// API: setDebugApp
// Service: ActivityManagerService_4

public void setDebugApp() {
    long var9 = Binder.clearCallingIdentity();
    Context var12 = this.mContext;
    ContentResolver var14 = var12.getContentResolver();
    boolean var17 = Settings$Global.putString(var14,debug_app,param2);
    boolean var21 = Settings$Global.putInt(var14,wait_for_debugger,var19);
    ActivityManagerService.boostPriorityForLockedSection();
    String var25 = this.mDebugApp;
    this.mOrigDebugApp = var25;
    boolean var26 = this.mWaitForDebugger;
    this.mOrigWaitForDebugger = var26;
    this.mDebugApp = param2;
    this.mWaitForDebugger = param3;
    this.mDebugTransient = var28;
    boolean var32 = forceStopPackageLocked(param2,-1,0,0,1,1,0,-1,set debug app);
    IPackageManager var19 = AppGlobals.getPackageManager();
    int var22 = var19.getPackageUid(param2,268435456,0);
    int var28 = UserHandle.getAppId(var22);
    AppErrors var79 = this.mAppErrors;
    var79.resetProcessCrashTimeLocked(var80,var29,param9);
    ProcessList var86 = this.mProcessList;
    boolean var107 = var86.killPackageProcessesLocked(param2,var29,param9,-10000,param4,1,param6,param7,1,var105);
    ArrayList var12 = new ArrayList();
    ProcessList$MyProcessMap var14 = this.mProcessNames;
    ArrayMap var16 = var14.getMap();
    int var18 = var16.size();
    ProcessList$MyProcessMap var22 = this.mProcessNames;
    ArrayMap var24 = var22.getMap();
    Object var26 = var24.valueAt(var81);
    SparseArray var27 = (SparseArray) var26;
    int var29 = var27.size();
    Object var31 = var27.valueAt(var75);
    ProcessRecord var32 = (ProcessRecord) var31;
    boolean var34 = var32.isPersistent();
    boolean var35 = var32.removed;
    int var38 = var32.setAdj;
    ArraySet var44 = var32.pkgDeps;
    ArraySet var45 = var32.pkgDeps;
    boolean var47 = var45.contains(param2);
    int var54 = var32.uid;
    int var56 = UserHandle.getAppId(var54);
    int var59 = var32.userId;
    ProcessRecord$PackageList var61 = var32.pkgList;
    boolean var63 = var61.containsKey(param2);
    ArrayMap var3 = this.mPkgList;
    boolean var5 = var3.containsKey(param2);
    boolean var5<PATH_SEP>long var9 = Binder.clearCallingIdentity();
    Context var12 = this.mContext;
    ContentResolver var14 = var12.getContentResolver();
    boolean var17 = Settings$Global.putString(var14,debug_app,param2);
    boolean var21 = Settings$Global.putInt(var14,wait_for_debugger,var19);
    ActivityManagerService.boostPriorityForLockedSection();
    String var25 = this.mDebugApp;
    this.mOrigDebugApp = var25;
    boolean var26 = this.mWaitForDebugger;
    this.mOrigWaitForDebugger = var26;
    this.mDebugApp = param2;
    this.mWaitForDebugger = param3;
    this.mDebugTransient = var28;
    boolean var32 = forceStopPackageLocked(param2,-1,0,0,1,1,0,-1,set debug app);
    IPackageManager var19 = AppGlobals.getPackageManager();
    int var22 = var19.getPackageUid(param2,268435456,0);
    int var28 = UserHandle.getAppId(var22);
    AppErrors var79 = this.mAppErrors;
    var79.resetProcessCrashTimeLocked(var80,var29,param9);
    ProcessList var86 = this.mProcessList;
    boolean var107 = var86.killPackageProcessesLocked(param2,var29,param9,-10000,param4,1,param6,param7,1,var105);
    ArrayList var12 = new ArrayList();
    ProcessList$MyProcessMap var14 = this.mProcessNames;
    ArrayMap var16 = var14.getMap();
    int var18 = var16.size();
    ProcessList$MyProcessMap var22 = this.mProcessNames;
    ArrayMap var24 = var22.getMap();
    Object var26 = var24.valueAt(var81);
    SparseArray var27 = (SparseArray) var26;
    int var29 = var27.size();
    Object var31 = var27.valueAt(var75);
    ProcessRecord var32 = (ProcessRecord) var31;
    boolean var34 = var32.isPersistent();
    boolean var35 = var32.removed;
    int var38 = var32.setAdj;
    int var39 = var32.userId;
    boolean var68 = var12.add(var32);<PATH_SEP>long var9 = Binder.clearCallingIdentity();
    Context var12 = this.mContext;
    ContentResolver var14 = var12.getContentResolver();
    boolean var17 = Settings$Global.putString(var14,debug_app,param2);
    int var5 = getUserId();
    boolean var8 = Settings$Global.putStringForUser(this,param2,param3,0,0,var5);
    HashSet var7 = MOVED_TO_SECURE;
    boolean var9 = var7.contains(param2);
    Settings$NameValueCache var11 = sNameValueCache;
    boolean var13 = var11.putStringForUser(this,param2,param3,param4,param5,param6);
    Bundle var8 = new Bundle();
    var8.putString(value,param4);
    var8.putInt(_user,param7);
    var8.putString(_tag,param5);
    Settings$ContentProviderHolder var24 = this.mProviderHolder;
    IContentProvider var26 = var24.getProvider(param2);
    String var28 = getPackageName();
    Settings$ContentProviderHolder var29 = this.mProviderHolder;
    Uri var31 = Settings$ContentProviderHolder.access$000(var29);{Uri var31 = Settings$ContentProviderHolder.access$000(var29);};
    String var33 = var31.getAuthority();
    String var34 = this.mCallSetCommand;
    Bundle var36 = var26.call(var28,var33,var34,param3,var8);
    boolean 1<PATH_SEP>long var9 = Binder.clearCallingIdentity();
    Context var12 = this.mContext;
    ContentResolver var14 = var12.getContentResolver();
    boolean var17 = Settings$Global.putString(var14,debug_app,param2);
    boolean var21 = Settings$Global.putInt(var14,wait_for_debugger,var19);
    ActivityManagerService.boostPriorityForLockedSection();
    String var25 = this.mDebugApp;
    this.mOrigDebugApp = var25;
    boolean var26 = this.mWaitForDebugger;
    this.mOrigWaitForDebugger = var26;
    this.mDebugApp = param2;
    this.mWaitForDebugger = param3;
    this.mDebugTransient = var28;
    boolean var32 = forceStopPackageLocked(param2,-1,0,0,1,1,0,-1,set debug app);
    IPackageManager var19 = AppGlobals.getPackageManager();
    int var22 = var19.getPackageUid(param2,268435456,0);
    int var28 = UserHandle.getAppId(var22);
    AppErrors var79 = this.mAppErrors;
    var79.resetProcessCrashTimeLocked(var80,var29,param9);
    ProcessList var86 = this.mProcessList;
    boolean var107 = var86.killPackageProcessesLocked(param2,var29,param9,-10000,param4,1,param6,param7,1,var105);
    ArrayList var12 = new ArrayList();
    ProcessList$MyProcessMap var14 = this.mProcessNames;
    ArrayMap var16 = var14.getMap();
    int var18 = var16.size();
    ProcessList$MyProcessMap var22 = this.mProcessNames;
    ArrayMap var24 = var22.getMap();
    Object var26 = var24.valueAt(var81);
    SparseArray var27 = (SparseArray) var26;
    int var29 = var27.size();
    Object var31 = var27.valueAt(var75);
    ProcessRecord var32 = (ProcessRecord) var31;
    boolean var34 = var32.isPersistent();
    boolean var35 = var32.removed;
    int var38 = var32.setAdj;
    ArraySet var44 = var32.pkgDeps;
    ArraySet var45 = var32.pkgDeps;
    boolean var47 = var45.contains(param2);
    int var59 = var32.userId;
    ProcessRecord$PackageList var61 = var32.pkgList;
    boolean var63 = var61.containsKey(param2);
    var32.removed = 1;
    boolean var68 = var12.add(var32);
}