// Method: getProcessPss
// Service: ActivityManagerService_2

public void getProcessPss() {
    int var6 = Binder.getCallingPid();
    int var8 = Binder.getCallingUid();
    int var10 = UserHandle.getUserId(var8);
    ActivityTaskManagerInternal var17 = this.mAtmInternal;
    boolean var19 = var17.isGetTasksAllowed(getProcessPss,var6,var8);
    20 = arraylength 2;
    [J var21 = new [J(var20);
    22 = arraylength 2;
    var23 = var22 sub 1;
    ActivityManagerService.boostPriorityForLockedSection();
    ActivityManagerService$PidMap var25 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var26 = this.mPidsSelfLocked;
    27 = arrayload 2[103];
    ProcessRecord var29 = var26.get(var27);
    int var30 = var29.setAdj;
    ActivityManagerService.resetPriorityAfterLockedSection();
    int var33 = var29.uid;
    int var35 = UserHandle.getUserId(var33);
    [J var40 = new [J(3);
    long var42 = SystemClock.currentThreadTimeMillis();
    43 = arrayload 2[103];
    long var45 = Debug.getPss(var43,var40,0);
    arraystore 21[103] = 45;
    long var47 = SystemClock.currentThreadTimeMillis();
    ActivityManagerService.boostPriorityForLockedSection();
    IApplicationThread var49 = var29.thread;
    int var50 = var29.setAdj;
    ProcessState var51 = var29.baseProcessTracker;
    52 = arrayload 21[103];
    53 = arrayload 40[15];
    55 = arrayload 40[54];
    var56 = var47 sub var42;
    ProcessRecord$PackageList var57 = var29.pkgList;
    ArrayMap var58 = var57.mPkgList;
    var51.addPss(var52,var53,var55,0,3,var56,var58);
    ensureNotDead();{ensureNotDead();};
    int var50 = this.mLastPssState;
    int var51 = this.mCurCombinedState;
    long var53 = SystemClock.uptimeMillis();
    long var54 = this.mLastPssTime;
    var56 = var54 add 30000;
    var57 = var53 lt var56;
    int var62 = this.mCurCombinedState;
    this.mLastPssState = var62;
    long var64 = SystemClock.uptimeMillis();
    this.mLastPssTime = var64;
    int var65 = this.mCurCombinedState;
    ProcessState var67 = this.mCommonProcess;
    PssTable var68 = var67.mPssTable;
    var68.mergeStats(var65,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    ProcessState var70 = this.mCommonProcess;
    [J var71 = var70.mTotalRunningPss;
    PssTable.mergeStats(var71,0,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    ProcessState var73 = this.mCommonProcess;
    boolean var74 = var73.mMultiPackage;
    int var76 = size();
    var77 = var76 sub 1;
    ProcessState var79 = pullFixedProc(param8,var88);
    Object var5 = valueAt(param3);
    ProcessStats$ProcessStateHolder var6 = (ProcessStats$ProcessStateHolder) var5;
    ProcessState var7 = var6.state;
    boolean var8 = this.mDead;
    ProcessState var10 = var7.mCommonProcess;
    String var16 = this.mName;
    String var22 = this.mPackage;
    int var28 = this.mUid;
    ProcessState var34 = this.mCommonProcess;
    String var35 = var34.mName;
    ProcessStats var43 = this.mStats;
    String var44 = var7.mPackage;
    int var45 = var7.mUid;
    long var46 = var7.mVersion;
    String var47 = var7.mName;
    ProcessState var49 = var43.getProcessStateLocked(var44,var45,var46,var47);
    ProcessStats$PackageState var7 = getPackageStateLocked(param2,param3,param4);
    ProcessState var9 = getProcessStateLocked(var7,param5);
    Lcom/android/internal/app/procstats/ProcessState var9<PATH_SEP>int var6 = Binder.getCallingPid();
    int var8 = Binder.getCallingUid();
    int var10 = UserHandle.getUserId(var8);
    ActivityTaskManagerInternal var17 = this.mAtmInternal;
    boolean var19 = var17.isGetTasksAllowed(getProcessPss,var6,var8);
    20 = arraylength 2;
    [J var21 = new [J(var20);
    22 = arraylength 2;
    var23 = var22 sub 1;
    ActivityManagerService.boostPriorityForLockedSection();
    ActivityManagerService$PidMap var25 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var26 = this.mPidsSelfLocked;
    27 = arrayload 2[103];
    ProcessRecord var29 = var26.get(var27);
    int var30 = var29.setAdj;
    ActivityManagerService.resetPriorityAfterLockedSection();
    int var33 = var29.uid;
    int var35 = UserHandle.getUserId(var33);
    [J var40 = new [J(3);
    long var42 = SystemClock.currentThreadTimeMillis();
    43 = arrayload 2[103];
    long var45 = Debug.getPss(var43,var40,0);
    arraystore 21[103] = 45;
    long var47 = SystemClock.currentThreadTimeMillis();
    ActivityManagerService.boostPriorityForLockedSection();
    IApplicationThread var49 = var29.thread;
    int var50 = var29.setAdj;
    ProcessState var51 = var29.baseProcessTracker;
    52 = arrayload 21[103];
    53 = arrayload 40[15];
    55 = arrayload 40[54];
    var56 = var47 sub var42;
    ProcessRecord$PackageList var57 = var29.pkgList;
    ArrayMap var58 = var57.mPkgList;
    var51.addPss(var52,var53,var55,0,3,var56,var58);
    ensureNotDead();{ensureNotDead();};
    int var50 = this.mLastPssState;
    int var51 = this.mCurCombinedState;
    long var53 = SystemClock.uptimeMillis();
    long var54 = this.mLastPssTime;
    var56 = var54 add 30000;
    var57 = var53 lt var56;
    int var62 = this.mCurCombinedState;
    this.mLastPssState = var62;
    long var64 = SystemClock.uptimeMillis();
    this.mLastPssTime = var64;
    int var65 = this.mCurCombinedState;
    ProcessState var67 = this.mCommonProcess;
    PssTable var68 = var67.mPssTable;
    var68.mergeStats(var65,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    13 = conversion(B) 2;
    int var16 = getOrAddKey(var13,10);
    assertConsistency();
    int var6 = binarySearch(param2);
    SparseMappingTable var8 = this.mParent;
    ArrayList var10 = SparseMappingTable.access$100(var8);{ArrayList var10 = SparseMappingTable.access$100(var8);};
    int var12 = var10.size();
    var14 = var12 add -1;
    Object var16 = var10.get(var14);
    [J var17 = ([J) var16;
    SparseMappingTable var18 = this.mParent;
    int var20 = SparseMappingTable.access$200(var18);{int var20 = SparseMappingTable.access$200(var18);};
    var21 = var20 add param3;
    22 = arraylength 17;
    [J var24 = new [J(4096);
    boolean var26 = var10.add(var24);
    var28 = var14 add 1;
    SparseMappingTable var29 = this.mParent;
    int var31 = SparseMappingTable.access$202(var29,0);{int var31 = SparseMappingTable.access$202(var29,0);};
    var39 = var32 SHL 8;
    SparseMappingTable var40 = this.mParent;
    int var42 = SparseMappingTable.access$200(var40);{int var42 = SparseMappingTable.access$200(var40);};
    var44 = var42 SHL 16;
    var45 = var39 or var44;
    var47 = param2 SHL 0;
    var48 = var45 or var47;
    SparseMappingTable var49 = this.mParent;
    int var51 = SparseMappingTable.access$212(var49,param3);{int var51 = SparseMappingTable.access$212(var49,param3);};
    [I var52 = this.mTable;
    [I var53 = INT;
    int var55 = this.mSize;
    56 = bitnot 6;
    [I var58 = GrowingArrayUtils.insert(var54,var55,var56,var48);
    this.mTable = var58;
    int var59 = this.mSize;
    var60 = var59 add 1;
    this.mSize = var60;
    int var48<PATH_SEP>int var6 = Binder.getCallingPid();
    int var8 = Binder.getCallingUid();
    int var10 = UserHandle.getUserId(var8);
    ActivityTaskManagerInternal var17 = this.mAtmInternal;
    boolean var19 = var17.isGetTasksAllowed(getProcessPss,var6,var8);
    20 = arraylength 2;
    [J var21 = new [J(var20);
    22 = arraylength 2;
    var23 = var22 sub 1;
    ActivityManagerService.boostPriorityForLockedSection();
    ActivityManagerService$PidMap var25 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var26 = this.mPidsSelfLocked;
    27 = arrayload 2[103];
    ProcessRecord var29 = var26.get(var27);
    int var30 = var29.setAdj;
    ActivityManagerService.resetPriorityAfterLockedSection();
    int var33 = var29.uid;
    int var35 = UserHandle.getUserId(var33);
    [J var40 = new [J(3);
    long var42 = SystemClock.currentThreadTimeMillis();
    43 = arrayload 2[103];
    long var45 = Debug.getPss(var43,var40,0);
    arraystore 21[103] = 45;
    long var47 = SystemClock.currentThreadTimeMillis();
    ActivityManagerService.boostPriorityForLockedSection();
    IApplicationThread var49 = var29.thread;
    int var50 = var29.setAdj;
    ProcessState var51 = var29.baseProcessTracker;
    52 = arrayload 21[103];
    53 = arrayload 40[15];
    55 = arrayload 40[54];
    var56 = var47 sub var42;
    ProcessRecord$PackageList var57 = var29.pkgList;
    ArrayMap var58 = var57.mPkgList;
    var51.addPss(var52,var53,var55,0,3,var56,var58);
    ensureNotDead();{ensureNotDead();};
    int var50 = this.mLastPssState;
    int var51 = this.mCurCombinedState;
    long var53 = SystemClock.uptimeMillis();
    long var54 = this.mLastPssTime;
    var56 = var54 add 30000;
    var57 = var53 lt var56;
    int var62 = this.mCurCombinedState;
    this.mLastPssState = var62;
    long var64 = SystemClock.uptimeMillis();
    this.mLastPssTime = var64;
    int var65 = this.mCurCombinedState;
    ProcessState var67 = this.mCommonProcess;
    PssTable var68 = var67.mPssTable;
    var68.mergeStats(var65,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    ProcessState var70 = this.mCommonProcess;
    [J var71 = var70.mTotalRunningPss;
    PssTable.mergeStats(var71,0,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    ProcessState var73 = this.mCommonProcess;
    boolean var74 = var73.mMultiPackage;
    int var76 = size();
    var77 = var76 sub 1;
    ProcessState var79 = pullFixedProc(param8,var88);
    Object var5 = valueAt(param3);
    ProcessStats$ProcessStateHolder var6 = (ProcessStats$ProcessStateHolder) var5;
    ProcessState var7 = var6.state;
    boolean var8 = this.mDead;
    ProcessState var10 = var7.mCommonProcess;
    String var16 = this.mName;
    String var22 = this.mPackage;
    int var28 = this.mUid;
    ProcessState var34 = this.mCommonProcess;
    String var35 = var34.mName;
    ProcessStats var43 = this.mStats;
    String var44 = var7.mPackage;
    int var45 = var7.mUid;
    long var46 = var7.mVersion;
    String var47 = var7.mName;
    ProcessState var49 = var43.getProcessStateLocked(var44,var45,var46,var47);
    boolean var54 = var50.mMultiPackage;
    ProcessStats var55 = this.mStats;
    ProcessMap var56 = var55.mPackages;
    Object var58 = keyAt(param3);
    String var59 = (String) var58;
    int var60 = var50.mUid;
    Object var62 = var56.get(var59,var60);
    ArrayMap var4 = this.mMap;
    Object var6 = var4.get(param2);
    SparseArray var7 = (SparseArray) var6;
    Ljava/lang/Object 0<PATH_SEP>int var6 = Binder.getCallingPid();
    int var8 = Binder.getCallingUid();
    int var10 = UserHandle.getUserId(var8);
    ActivityTaskManagerInternal var17 = this.mAtmInternal;
    boolean var19 = var17.isGetTasksAllowed(getProcessPss,var6,var8);
    20 = arraylength 2;
    [J var21 = new [J(var20);
    22 = arraylength 2;
    var23 = var22 sub 1;
    ActivityManagerService.boostPriorityForLockedSection();
    ActivityManagerService$PidMap var25 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var26 = this.mPidsSelfLocked;
    27 = arrayload 2[103];
    ProcessRecord var29 = var26.get(var27);
    int var30 = var29.setAdj;
    ActivityManagerService.resetPriorityAfterLockedSection();
    int var33 = var29.uid;
    int var35 = UserHandle.getUserId(var33);
    [J var40 = new [J(3);
    long var42 = SystemClock.currentThreadTimeMillis();
    43 = arrayload 2[103];
    long var45 = Debug.getPss(var43,var40,0);
    arraystore 21[103] = 45;
    long var47 = SystemClock.currentThreadTimeMillis();
    ActivityManagerService.boostPriorityForLockedSection();
    IApplicationThread var49 = var29.thread;
    int var50 = var29.setAdj;
    ProcessState var51 = var29.baseProcessTracker;
    52 = arrayload 21[103];
    53 = arrayload 40[15];
    55 = arrayload 40[54];
    var56 = var47 sub var42;
    ProcessRecord$PackageList var57 = var29.pkgList;
    ArrayMap var58 = var57.mPkgList;
    var51.addPss(var52,var53,var55,0,3,var56,var58);
    ensureNotDead();{ensureNotDead();};
    int var50 = this.mLastPssState;
    int var51 = this.mCurCombinedState;
    long var53 = SystemClock.uptimeMillis();
    long var54 = this.mLastPssTime;
    var56 = var54 add 30000;
    var57 = var53 lt var56;
    int var62 = this.mCurCombinedState;
    this.mLastPssState = var62;
    long var64 = SystemClock.uptimeMillis();
    this.mLastPssTime = var64;
    int var65 = this.mCurCombinedState;
    ProcessState var67 = this.mCommonProcess;
    PssTable var68 = var67.mPssTable;
    var68.mergeStats(var65,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    13 = conversion(B) 2;
    int var16 = getOrAddKey(var13,10);
    assertConsistency();
    int var6 = binarySearch(param2);
    SparseMappingTable var8 = this.mParent;
    ArrayList var10 = SparseMappingTable.access$100(var8);{ArrayList var10 = SparseMappingTable.access$100(var8);};
    int var12 = var10.size();
    var14 = var12 add -1;
    Object var16 = var10.get(var14);
    [J var17 = ([J) var16;
    SparseMappingTable var18 = this.mParent;
    int var20 = SparseMappingTable.access$200(var18);{int var20 = SparseMappingTable.access$200(var18);};
    var21 = var20 add param3;
    22 = arraylength 17;
    var39 = var32 SHL 8;
    SparseMappingTable var40 = this.mParent;
    int var42 = SparseMappingTable.access$200(var40);{int var42 = SparseMappingTable.access$200(var40);};
    var44 = var42 SHL 16;
    var45 = var39 or var44;
    var47 = param2 SHL 0;
    var48 = var45 or var47;
    SparseMappingTable var49 = this.mParent;
    int var51 = SparseMappingTable.access$212(var49,param3);{int var51 = SparseMappingTable.access$212(var49,param3);};
    [I var52 = this.mTable;
    int var55 = this.mSize;
    56 = bitnot 6;
    [I var58 = GrowingArrayUtils.insert(var54,var55,var56,var48);
    this.mTable = var58;
    int var59 = this.mSize;
    var60 = var59 add 1;
    this.mSize = var60;
}