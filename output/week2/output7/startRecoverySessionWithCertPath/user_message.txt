// API: startRecoverySessionWithCertPath
// Service: LockSettingsService_7

public void startRecoverySessionWithCertPath() {
    RecoverableKeyStoreManager var8 = this.mRecoverableKeyStoreManager;
    [B var10 = var8.startRecoverySessionWithCertPath(param2,param3,param4,param5,param6,param7);
    TestOnlyInsecureCertificateHelper var10 = this.mTestCertHelper;
    String var12 = var10.getDefaultCertificateAliasIfEmpty(param3);
    Object var15 = Preconditions.checkNotNull(param2,invalid session);{Object var15 = Preconditions.checkNotNull(param2,invalid session);};
    Object var18 = Preconditions.checkNotNull(param4,verifierCertPath is null);{Object var18 = Preconditions.checkNotNull(param4,verifierCertPath is null);};
    Object var21 = Preconditions.checkNotNull(param5,vaultParams is null);{Object var21 = Preconditions.checkNotNull(param5,vaultParams is null);};
    Object var24 = Preconditions.checkNotNull(param6,vaultChallenge is null);{Object var24 = Preconditions.checkNotNull(param6,vaultChallenge is null);};
    Object var27 = Preconditions.checkNotNull(param7,secrets is null);{Object var27 = Preconditions.checkNotNull(param7,secrets is null);};
    CertPath var30 = getCertPath();
    TestOnlyInsecureCertificateHelper var36 = this.mTestCertHelper;
    X509Certificate var38 = var36.getRootCertificate(var12);
    CertUtils.validateCertPath(var38,var30);{CertUtils.validateCertPath(var38,var30);};
    List var50 = var30.getCertificates();
    Object var53 = var50.get(0);
    Certificate var54 = (Certificate) var53;
    PublicKey var56 = var54.getPublicKey();
    [B var58 = var56.getEncoded();
    [B var65 = startRecoverySession(param2,var58,param5,param6,param7);
    int var9 = Binder.getCallingUid();
    int var11 = size();
    PublicKey var18 = KeySyncUtils.deserializePublicKey(param3);
    boolean var25 = publicKeysMatch(var18,param4);
    [B var32 = KeySyncUtils.generateKeyClaimant();
    Object var34 = get(0);
    KeyChainProtectionParams var35 = (KeyChainProtectionParams) var34;
    [B var37 = var35.getSecret();
    RecoverySessionStorage var38 = this.mRecoverySessionStorage;
    RecoverySessionStorage$Entry var39 = new RecoverySessionStorage$Entry();
    var38.add(var9,var39);
    String var48 = HexDump.toHexString(param4);
    [B var57 = KeySyncUtils.calculateThmKfHash(var37);
    [B var59 = KeySyncUtils.encryptRecoveryClaim(var18,param4,param5,var57,var32);
    [[B var7 = new [[B(3);
    [B var8 = RECOVERY_CLAIM_HEADER;
    arraystore 7[9] = 8;
    arraystore 7[10] = 2;
    arraystore 7[11] = 3;
    [B var13 = KeySyncUtils.concat(var7);
    [[B var14 = new [[B(2);
    arraystore 14[9] = 4;
    arraystore 14[10] = 5;
    [B var16 = KeySyncUtils.concat(var14);
    RecoverableKeyStoreManager var8 = this.mRecoverableKeyStoreManager;
    [B var10 = var8.startRecoverySessionWithCertPath(param2,param3,param4,param5,param6,param7);
    TestOnlyInsecureCertificateHelper var10 = this.mTestCertHelper;
    String var12 = var10.getDefaultCertificateAliasIfEmpty(param3);
    Object var15 = Preconditions.checkNotNull(param2,invalid session);{Object var15 = Preconditions.checkNotNull(param2,invalid session);};
    Object var18 = Preconditions.checkNotNull(param4,verifierCertPath is null);{Object var18 = Preconditions.checkNotNull(param4,verifierCertPath is null);};
    Object var21 = Preconditions.checkNotNull(param5,vaultParams is null);{Object var21 = Preconditions.checkNotNull(param5,vaultParams is null);};
    Object var24 = Preconditions.checkNotNull(param6,vaultChallenge is null);{Object var24 = Preconditions.checkNotNull(param6,vaultChallenge is null);};
    Object var27 = Preconditions.checkNotNull(param7,secrets is null);{Object var27 = Preconditions.checkNotNull(param7,secrets is null);};
    CertPath var30 = getCertPath();
    TestOnlyInsecureCertificateHelper var36 = this.mTestCertHelper;
    X509Certificate var38 = var36.getRootCertificate(var12);
    CertUtils.validateCertPath(var38,var30);{CertUtils.validateCertPath(var38,var30);};
    List var50 = var30.getCertificates();
    Object var53 = var50.get(0);
    Certificate var54 = (Certificate) var53;
    PublicKey var56 = var54.getPublicKey();
    [B var58 = var56.getEncoded();
    [B var65 = startRecoverySession(param2,var58,param5,param6,param7);
    int var9 = Binder.getCallingUid();
    int var11 = size();
    PublicKey var18 = KeySyncUtils.deserializePublicKey(param3);
    boolean var25 = publicKeysMatch(var18,param4);
    [B var32 = KeySyncUtils.generateKeyClaimant();
    SecureRandom this = new SecureRandom();
    [B var4 = new [B(16);
    this.nextBytes(var4);
    RecoverableKeyStoreManager var8 = this.mRecoverableKeyStoreManager;
    [B var10 = var8.startRecoverySessionWithCertPath(param2,param3,param4,param5,param6,param7);
    TestOnlyInsecureCertificateHelper var10 = this.mTestCertHelper;
    String var12 = var10.getDefaultCertificateAliasIfEmpty(param3);
    Object var15 = Preconditions.checkNotNull(param2,invalid session);{Object var15 = Preconditions.checkNotNull(param2,invalid session);};
    Object var18 = Preconditions.checkNotNull(param4,verifierCertPath is null);{Object var18 = Preconditions.checkNotNull(param4,verifierCertPath is null);};
    Object var21 = Preconditions.checkNotNull(param5,vaultParams is null);{Object var21 = Preconditions.checkNotNull(param5,vaultParams is null);};
    Object var24 = Preconditions.checkNotNull(param6,vaultChallenge is null);{Object var24 = Preconditions.checkNotNull(param6,vaultChallenge is null);};
    Object var27 = Preconditions.checkNotNull(param7,secrets is null);{Object var27 = Preconditions.checkNotNull(param7,secrets is null);};
    CertPath var30 = getCertPath();
    TestOnlyInsecureCertificateHelper var36 = this.mTestCertHelper;
    X509Certificate var38 = var36.getRootCertificate(var12);
    CertUtils.validateCertPath(var38,var30);{CertUtils.validateCertPath(var38,var30);};
    List var50 = var30.getCertificates();
    Object var53 = var50.get(0);
    Certificate var54 = (Certificate) var53;
    PublicKey var56 = var54.getPublicKey();
    [B var58 = var56.getEncoded();
    [B var65 = startRecoverySession(param2,var58,param5,param6,param7);
    int var9 = Binder.getCallingUid();
    int var11 = size();
    PublicKey var18 = KeySyncUtils.deserializePublicKey(param3);
    boolean var25 = publicKeysMatch(var18,param4);
    [B var32 = KeySyncUtils.generateKeyClaimant();
    Object var34 = get(0);
    KeyChainProtectionParams var35 = (KeyChainProtectionParams) var34;
    [B var37 = var35.getSecret();
    RecoverySessionStorage var38 = this.mRecoverySessionStorage;
    RecoverySessionStorage$Entry var39 = new RecoverySessionStorage$Entry();
    var38.add(var9,var39);
    String var48 = HexDump.toHexString(param4);
    [B var57 = KeySyncUtils.calculateThmKfHash(var37);
    MessageDigest var4 = MessageDigest.getInstance(SHA-256);
    [B var5 = THM_KF_HASH_PREFIX;
    var4.update(var5);
    var4.update(this);
    [B var9 = var4.digest();
    RecoverableKeyStoreManager var8 = this.mRecoverableKeyStoreManager;
    [B var10 = var8.startRecoverySessionWithCertPath(param2,param3,param4,param5,param6,param7);
    TestOnlyInsecureCertificateHelper var10 = this.mTestCertHelper;
    String var12 = var10.getDefaultCertificateAliasIfEmpty(param3);
    Object var15 = Preconditions.checkNotNull(param2,invalid session);{Object var15 = Preconditions.checkNotNull(param2,invalid session);};
    Object var18 = Preconditions.checkNotNull(param4,verifierCertPath is null);{Object var18 = Preconditions.checkNotNull(param4,verifierCertPath is null);};
    Object var21 = Preconditions.checkNotNull(param5,vaultParams is null);{Object var21 = Preconditions.checkNotNull(param5,vaultParams is null);};
    Object var24 = Preconditions.checkNotNull(param6,vaultChallenge is null);{Object var24 = Preconditions.checkNotNull(param6,vaultChallenge is null);};
    Object var27 = Preconditions.checkNotNull(param7,secrets is null);{Object var27 = Preconditions.checkNotNull(param7,secrets is null);};
    CertPath var30 = getCertPath();
    TestOnlyInsecureCertificateHelper var36 = this.mTestCertHelper;
    X509Certificate var38 = var36.getRootCertificate(var12);
    CertUtils.validateCertPath(var38,var30);{CertUtils.validateCertPath(var38,var30);};
    List var50 = var30.getCertificates();
    Object var53 = var50.get(0);
    Certificate var54 = (Certificate) var53;
    PublicKey var56 = var54.getPublicKey();
    [B var58 = var56.getEncoded();
    [B var65 = startRecoverySession(param2,var58,param5,param6,param7);
    int var9 = Binder.getCallingUid();
    int var11 = size();
    PublicKey var18 = KeySyncUtils.deserializePublicKey(param3);
    boolean var25 = publicKeysMatch(var18,param4);
    [B var32 = KeySyncUtils.generateKeyClaimant();
    Object var34 = get(0);
    KeyChainProtectionParams var35 = (KeyChainProtectionParams) var34;
    [B var37 = var35.getSecret();
    RecoverySessionStorage var38 = this.mRecoverySessionStorage;
    RecoverySessionStorage$Entry var39 = new RecoverySessionStorage$Entry();
    var38.add(var9,var39);
    SparseArray var4 = this.mSessionsByUid;
    Object var6 = var4.get(param2);
    SparseArray var8 = this.mSessionsByUid;
    ArrayList var9 = new ArrayList();
    var8.put(param2,var9);
    SparseArray var14 = this.mSessionsByUid;
    Object var16 = var14.get(param2);
    ArrayList var17 = (ArrayList) var16;
    boolean var19 = var17.add(param3);
}