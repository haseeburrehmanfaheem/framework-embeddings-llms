// API: setServerParams
// Service: LockSettingsService_2

public void setServerParams() {
    RecoverableKeyStoreManager var3 = this.mRecoverableKeyStoreManager;
    var3.setServerParams(param2);
    int var5 = UserHandle.getCallingUserId();
    int var7 = Binder.getCallingUid();
    RecoverableKeyStoreDb var8 = this.mDatabase;
    [B var10 = var8.getServerParams(var5,var7);
    boolean var12 = Arrays.equals(param2,var10);
    RecoverableKeyStoreDb var15 = this.mDatabase;
    long var17 = var15.setServerParams(var5,var7,param2);
    var19 = var17 lt 0;
    RecoverableKeyStoreDb var24 = this.mDatabase;
    Long var26 = var24.getSnapshotVersion(var5,var7);
    Long var6 = getLong(param2,param3,snapshot_version);
    RecoverableKeyStoreDbHelper var5 = this.mKeyStoreDbHelper;
    SQLiteDatabase var7 = var5.getReadableDatabase();
    String var9 = new String(4);
    arraystore 9[10] = 11;
    arraystore 9[12] = 13;
    arraystore 9[14] = 15;
    arraystore 9[16] = 4;
    String var18 = new String(2);
    String var20 = Integer.toString(param2);
    arraystore 18[10] = 20;
    String var22 = Integer.toString(param3);
    arraystore 18[12] = 22;
    Cursor var25 = var7.query(recovery_service_metadata,var9,user_id = ? AND uid = ?,var18,0,0,0);
    int var27 = var25.getCount();
    boolean var29 = var25.moveToFirst();
    int var31 = var25.getColumnIndexOrThrow(param4);
    boolean var33 = var25.isNull(var31);
    RecoverableKeyStoreDb.$closeResource(0,var25);
    Ljava/lang/Long 0<PATH_SEP>RecoverableKeyStoreManager var3 = this.mRecoverableKeyStoreManager;
    var3.setServerParams(param2);
    int var5 = UserHandle.getCallingUserId();
    int var7 = Binder.getCallingUid();
    RecoverableKeyStoreDb var8 = this.mDatabase;
    [B var10 = var8.getServerParams(var5,var7);
    boolean var12 = Arrays.equals(param2,var10);
    RecoverableKeyStoreDb var15 = this.mDatabase;
    long var17 = var15.setServerParams(var5,var7,param2);
    var19 = var17 lt 0;
    RecoverableKeyStoreDb var24 = this.mDatabase;
    Long var26 = var24.getSnapshotVersion(var5,var7);
    Long var6 = getLong(param2,param3,snapshot_version);
    RecoverableKeyStoreDbHelper var5 = this.mKeyStoreDbHelper;
    SQLiteDatabase var7 = var5.getReadableDatabase();
    String var9 = new String(4);
    arraystore 9[10] = 11;
    arraystore 9[12] = 13;
    arraystore 9[14] = 15;
    arraystore 9[16] = 4;
    String var18 = new String(2);
    String var20 = Integer.toString(param2);
    arraystore 18[10] = 20;
    String var22 = Integer.toString(param3);
    arraystore 18[12] = 22;
    Cursor var25 = var7.query(recovery_service_metadata,var9,user_id = ? AND uid = ?,var18,0,0,0);
    int var27 = var25.getCount();
    boolean var29 = var25.moveToFirst();
    int var31 = var25.getColumnIndexOrThrow(param4);
    boolean var33 = var25.isNull(var31);
    long var35 = var25.getLong(var31);
    Long var37 = Long.valueOf(var35);
    RecoverableKeyStoreDb.$closeResource(0,var25);
    Ljava/lang/Long var37<PATH_SEP>RecoverableKeyStoreManager var3 = this.mRecoverableKeyStoreManager;
    var3.setServerParams(param2);
    int var5 = UserHandle.getCallingUserId();
    int var7 = Binder.getCallingUid();
    RecoverableKeyStoreDb var8 = this.mDatabase;
    [B var10 = var8.getServerParams(var5,var7);
    boolean var12 = Arrays.equals(param2,var10);
    RecoverableKeyStoreDb var15 = this.mDatabase;
    long var17 = var15.setServerParams(var5,var7,param2);
    var19 = var17 lt 0;
    RecoverableKeyStoreDb var24 = this.mDatabase;
    Long var26 = var24.getSnapshotVersion(var5,var7);
    RecoverableKeyStoreDb var30 = this.mDatabase;
    long var33 = var30.setShouldCreateSnapshot(var5,var7,1);
    long var11 = setLong(param2,param3,should_create_snapshot,var8);
    RecoverableKeyStoreDbHelper var6 = this.mKeyStoreDbHelper;
    SQLiteDatabase var8 = var6.getWritableDatabase();
    ContentValues var9 = new ContentValues();
    Long var12 = Long.valueOf(param5);
    var9.put(param4,var12);
    String var16 = new String(2);
    String var18 = Integer.toString(param2);
    arraystore 16[19] = 18;
    String var21 = Integer.toString(param3);
    arraystore 16[22] = 21;
    ensureRecoveryServiceMetadataEntryExists(param2,param3);{ensureRecoveryServiceMetadataEntryExists(param2,param3);};
    int var26 = var8.update(recovery_service_metadata,var9,user_id = ? AND uid = ?,var16);
    27 = conversion(J) 26;
    long var27<PATH_SEP>RecoverableKeyStoreManager var3 = this.mRecoverableKeyStoreManager;
    var3.setServerParams(param2);
    int var5 = UserHandle.getCallingUserId();
    int var7 = Binder.getCallingUid();
    RecoverableKeyStoreDb var8 = this.mDatabase;
    [B var10 = var8.getServerParams(var5,var7);
    [B var6 = getBytes(param2,param3,server_params);
    RecoverableKeyStoreDbHelper var5 = this.mKeyStoreDbHelper;
    SQLiteDatabase var7 = var5.getReadableDatabase();
    String var9 = new String(4);
    arraystore 9[10] = 11;
    arraystore 9[12] = 13;
    arraystore 9[14] = 15;
    arraystore 9[16] = 4;
    String var18 = new String(2);
    String var20 = Integer.toString(param2);
    arraystore 18[10] = 20;
    String var22 = Integer.toString(param3);
    arraystore 18[12] = 22;
    Cursor var25 = var7.query(recovery_service_metadata,var9,user_id = ? AND uid = ?,var18,0,0,0);
    int var27 = var25.getCount();
    Locale var39 = US;
    Object var41 = new Object(3);
    Integer var43 = Integer.valueOf(var27);
    arraystore 41[10] = 43;
    Integer var45 = Integer.valueOf(param2);
    arraystore 41[12] = 45;
    Integer var47 = Integer.valueOf(param3);
    arraystore 41[14] = 47;
    String var49 = String.format(var39,%d entries found for userId=%d uid=%d. Should only ever be 0 or 1.,var41);
}