// API: getHistoricalOps
// Service: AppOpsService_8

public void getHistoricalOps() {
    AppOpsManager$HistoricalOpsRequest$Builder var9 = new AppOpsManager$HistoricalOpsRequest$Builder();
    AppOpsManager$HistoricalOpsRequest$Builder var12 = var9.setUid(param2);
    AppOpsManager$HistoricalOpsRequest$Builder var14 = var12.setPackageName(param3);
    AppOpsManager$HistoricalOpsRequest$Builder var16 = var14.setOpNames(param4);
    AppOpsManager$HistoricalOpsRequest$Builder var18 = var16.setFlags(param7);
    AppOpsManager$HistoricalOpsRequest var20 = var18.build();
    Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);{Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);};
    Context var24 = this.mContext;
    int var26 = Binder.getCallingPid();
    int var28 = Binder.getCallingUid();
    int var34 = size();
    String var35 = new String(var34);
    Object var37 = toArray(var35);
    String var38 = (String) var37;
    HistoricalRegistry var42 = this.mHistoricalRegistry;
    var42.getHistoricalOps(param2,param3,var39,param5,param6,param7,param8);
    long var10 = System.currentTimeMillis();
    var12 = param6 lt 9223372036854775807;
    var16 = var10 sub var14;
    long var19 = Math.max(var16,0);
    var20 = var10 sub param5;
    long var22 = Math.max(var20,0);
    AppOpsManager$HistoricalOps var23 = new AppOpsManager$HistoricalOps();
    Object var25 = this.mOnDiskLock;
    Object var26 = this.mInMemoryLock;
    boolean var29 = isPersistenceInitializedMLocked();
    AppOpsManager$HistoricalOps var32 = getUpdatedPendingHistoricalOpsMLocked(var10);
    AppOpsManager$HistoricalOps var3 = this.mCurrentHistoricalOps;
    long var6 = this.mNextPersistDueTimeMillis;
    var7 = var6 sub param2;
    long var8 = this.mBaseSnapshotInterval;
    var9 = var7 lt var8;
    long var12 = this.mBaseSnapshotInterval;
    var13 = var12 sub var7;
    AppOpsManager$HistoricalOps var14 = this.mCurrentHistoricalOps;
    var14.setEndTime(var13);
    var16 = var7 lt 0;
    AppOpsManager$HistoricalOps var17 = this.mCurrentHistoricalOps;
    boolean var19 = var17.isEmpty();
    AppOpsManager$HistoricalOps var41 = this.mCurrentHistoricalOps;
    var41.setBeginAndEndTime(0,0);
    long var43 = this.mBaseSnapshotInterval;
    var44 = var43 add param2;
    this.mNextPersistDueTimeMillis = var44;
    AppOpsManager$HistoricalOps var45 = this.mCurrentHistoricalOps;
    Landroid/app/AppOpsManager$HistoricalOps var45<PATH_SEP>AppOpsManager$HistoricalOpsRequest$Builder var9 = new AppOpsManager$HistoricalOpsRequest$Builder();
    AppOpsManager$HistoricalOpsRequest$Builder var12 = var9.setUid(param2);
    AppOpsManager$HistoricalOpsRequest$Builder var14 = var12.setPackageName(param3);
    AppOpsManager$HistoricalOpsRequest$Builder var16 = var14.setOpNames(param4);
    AppOpsManager$HistoricalOpsRequest$Builder var18 = var16.setFlags(param7);
    AppOpsManager$HistoricalOpsRequest var20 = var18.build();
    Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);{Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);};
    Context var24 = this.mContext;
    int var26 = Binder.getCallingPid();
    int var28 = Binder.getCallingUid();
    int var34 = size();
    String var35 = new String(var34);
    Object var37 = toArray(var35);
    String var38 = (String) var37;
    HistoricalRegistry var42 = this.mHistoricalRegistry;
    var42.getHistoricalOps(param2,param3,var39,param5,param6,param7,param8);
    long var10 = System.currentTimeMillis();
    var12 = param6 lt 9223372036854775807;
    var16 = var10 sub var14;
    long var19 = Math.max(var16,0);
    var20 = var10 sub param5;
    long var22 = Math.max(var20,0);
    AppOpsManager$HistoricalOps var23 = new AppOpsManager$HistoricalOps();
    Object var25 = this.mOnDiskLock;
    Object var26 = this.mInMemoryLock;
    boolean var29 = isPersistenceInitializedMLocked();
    AppOpsManager$HistoricalOps var32 = getUpdatedPendingHistoricalOpsMLocked(var10);
    AppOpsManager$HistoricalOps var3 = this.mCurrentHistoricalOps;
    long var6 = this.mNextPersistDueTimeMillis;
    var7 = var6 sub param2;
    long var8 = this.mBaseSnapshotInterval;
    var9 = var7 lt var8;
    long var12 = this.mBaseSnapshotInterval;
    var13 = var12 sub var7;
    AppOpsManager$HistoricalOps var14 = this.mCurrentHistoricalOps;
    var14.setEndTime(var13);
    var16 = var7 lt 0;
    AppOpsManager$HistoricalOps var46 = this.mCurrentHistoricalOps;
    Landroid/app/AppOpsManager$HistoricalOps var46<PATH_SEP>AppOpsManager$HistoricalOpsRequest$Builder var9 = new AppOpsManager$HistoricalOpsRequest$Builder();
    AppOpsManager$HistoricalOpsRequest$Builder var12 = var9.setUid(param2);
    AppOpsManager$HistoricalOpsRequest$Builder var14 = var12.setPackageName(param3);
    AppOpsManager$HistoricalOpsRequest$Builder var16 = var14.setOpNames(param4);
    AppOpsManager$HistoricalOpsRequest$Builder var18 = var16.setFlags(param7);
    AppOpsManager$HistoricalOpsRequest var20 = var18.build();
    Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);{Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);};
    Context var24 = this.mContext;
    int var26 = Binder.getCallingPid();
    int var28 = Binder.getCallingUid();
    int var34 = size();
    String var35 = new String(var34);
    Object var37 = toArray(var35);
    String var38 = (String) var37;
    HistoricalRegistry var42 = this.mHistoricalRegistry;
    var42.getHistoricalOps(param2,param3,var39,param5,param6,param7,param8);
    long var10 = System.currentTimeMillis();
    var12 = param6 lt 9223372036854775807;
    var16 = var10 sub var14;
    long var19 = Math.max(var16,0);
    var20 = var10 sub param5;
    long var22 = Math.max(var20,0);
    AppOpsManager$HistoricalOps var23 = new AppOpsManager$HistoricalOps();
    Object var25 = this.mOnDiskLock;
    Object var26 = this.mInMemoryLock;
    boolean var29 = isPersistenceInitializedMLocked();
    AppOpsManager$HistoricalOps var32 = getUpdatedPendingHistoricalOpsMLocked(var10);
    AppOpsManager$HistoricalOps var3 = this.mCurrentHistoricalOps;
    long var6 = this.mNextPersistDueTimeMillis;
    var7 = var6 sub param2;
    long var8 = this.mBaseSnapshotInterval;
    var9 = var7 lt var8;
    long var12 = this.mBaseSnapshotInterval;
    var13 = var12 sub var7;
    AppOpsManager$HistoricalOps var14 = this.mCurrentHistoricalOps;
    var14.setEndTime(var13);
    var16 = var7 lt 0;
    AppOpsManager$HistoricalOps var17 = this.mCurrentHistoricalOps;
    boolean var19 = var17.isEmpty();
    AppOpsManager$HistoricalOps var20 = this.mCurrentHistoricalOps;
    long var21 = this.mBaseSnapshotInterval;
    var20.offsetBeginAndEndTime(var21);
    AppOpsManager$HistoricalOps var23 = this.mCurrentHistoricalOps;
    long var25 = var23.getEndTimeMillis();
    long var26 = this.mBaseSnapshotInterval;
    var27 = var25 sub var26;
    var23.setBeginTime(var27);<PATH_SEP>AppOpsManager$HistoricalOpsRequest$Builder var9 = new AppOpsManager$HistoricalOpsRequest$Builder();
    AppOpsManager$HistoricalOpsRequest$Builder var12 = var9.setUid(param2);
    AppOpsManager$HistoricalOpsRequest$Builder var14 = var12.setPackageName(param3);
    AppOpsManager$HistoricalOpsRequest$Builder var16 = var14.setOpNames(param4);
    AppOpsManager$HistoricalOpsRequest$Builder var18 = var16.setFlags(param7);
    AppOpsManager$HistoricalOpsRequest var20 = var18.build();
    Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);{Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);};
    Context var24 = this.mContext;
    int var26 = Binder.getCallingPid();
    int var28 = Binder.getCallingUid();
    int var34 = size();
    String var35 = new String(var34);
    Object var37 = toArray(var35);
    String var38 = (String) var37;
    HistoricalRegistry var42 = this.mHistoricalRegistry;
    var42.getHistoricalOps(param2,param3,var39,param5,param6,param7,param8);
    long var10 = System.currentTimeMillis();
    var12 = param6 lt 9223372036854775807;
    var16 = var10 sub var14;
    long var19 = Math.max(var16,0);
    var20 = var10 sub param5;
    long var22 = Math.max(var20,0);
    AppOpsManager$HistoricalOps var23 = new AppOpsManager$HistoricalOps();
    Object var25 = this.mOnDiskLock;
    Object var26 = this.mInMemoryLock;
    boolean var29 = isPersistenceInitializedMLocked();
    AppOpsManager$HistoricalOps var32 = getUpdatedPendingHistoricalOpsMLocked(var10);
    AppOpsManager$HistoricalOps var3 = this.mCurrentHistoricalOps;
    long var6 = this.mNextPersistDueTimeMillis;
    var7 = var6 sub param2;
    long var8 = this.mBaseSnapshotInterval;
    var9 = var7 lt var8;
    var10 = var7 sub var8;
    this.mPendingHistoryOffsetMillis = var10;
    long var12 = this.mBaseSnapshotInterval;
    var13 = var12 sub var7;
    AppOpsManager$HistoricalOps var14 = this.mCurrentHistoricalOps;
    var14.setEndTime(var13);
    var16 = var7 lt 0;
    AppOpsManager$HistoricalOps var17 = this.mCurrentHistoricalOps;
    boolean var19 = var17.isEmpty();
    AppOpsManager$HistoricalOps var20 = this.mCurrentHistoricalOps;
    long var21 = this.mBaseSnapshotInterval;
    var20.offsetBeginAndEndTime(var21);
    AppOpsManager$HistoricalOps var23 = this.mCurrentHistoricalOps;
    long var25 = var23.getEndTimeMillis();
    long var26 = this.mBaseSnapshotInterval;
    var27 = var25 sub var26;
    var23.setBeginTime(var27);
    long var30 = Math.abs(var7);
    AppOpsManager$HistoricalOps var31 = this.mCurrentHistoricalOps;
    var31.offsetBeginAndEndTime(var30);
    AppOpsManager$HistoricalOps var33 = this.mCurrentHistoricalOps;
    schedulePersistHistoricalOpsMLocked(var33);
    AppOpsManager$HistoricalOps var36 = new AppOpsManager$HistoricalOps();
    this.mCurrentHistoricalOps = var36;
    long var38 = this.mBaseSnapshotInterval;
    var39 = var38 add param2;
    this.mNextPersistDueTimeMillis = var39;
    AppOpsManager$HistoricalOps var40 = this.mCurrentHistoricalOps;
    Landroid/app/AppOpsManager$HistoricalOps var40;
}