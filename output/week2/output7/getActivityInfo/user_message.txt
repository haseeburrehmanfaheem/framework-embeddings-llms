// API: getActivityInfo
// Service: PackageManagerService_4

public void getActivityInfo() {
    int var6 = Binder.getCallingUid();
    ActivityInfo var8 = getActivityInfoInternal(param2,param3,var6,param4);
    UserManagerService var6 = sUserManager;
    boolean var8 = var6.exists(param5);
    int var11 = updateFlagsForComponent(param3,param5,param2);
    int var13 = Binder.getCallingUid();
    PermissionManagerServiceInternal var16 = this.mPermissionManager;
    int var18 = Binder.getCallingUid();
    ArrayMap var23 = this.mPackages;
    ComponentResolver var24 = this.mComponentResolver;
    PackageParser$Activity var26 = var24.getActivity(param2);
    Settings var27 = this.mSettings;
    ActivityInfo var28 = var26.info;
    boolean var30 = var27.isEnabledAndMatchLPr(var28,var11,param5);
    Settings var43 = this.mSettings;
    ArrayMap var44 = var43.mPackages;
    String var46 = getPackageName();
    Object var48 = var44.get(var46);
    PackageSetting var49 = (PackageSetting) var48;
    boolean var52 = filterAppAccessLPr(var49,param4,param2,1,param5);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var22 = this.mComponentResolver;
    PackageParser$Service var24 = var22.getService(param2);
    ServiceInfo var25 = var24.info;
    int var26 = var25.flags;
    var27 = 1048576 and var26;
    boolean var29<PATH_SEP>int var6 = Binder.getCallingUid();
    ActivityInfo var8 = getActivityInfoInternal(param2,param3,var6,param4);
    UserManagerService var6 = sUserManager;
    boolean var8 = var6.exists(param5);
    int var11 = updateFlagsForComponent(param3,param5,param2);
    int var13 = Binder.getCallingUid();
    PermissionManagerServiceInternal var16 = this.mPermissionManager;
    int var18 = Binder.getCallingUid();
    ArrayMap var23 = this.mPackages;
    ComponentResolver var24 = this.mComponentResolver;
    PackageParser$Activity var26 = var24.getActivity(param2);
    Settings var27 = this.mSettings;
    ActivityInfo var28 = var26.info;
    boolean var30 = var27.isEnabledAndMatchLPr(var28,var11,param5);
    Settings var43 = this.mSettings;
    ArrayMap var44 = var43.mPackages;
    String var46 = getPackageName();
    Object var48 = var44.get(var46);
    PackageSetting var49 = (PackageSetting) var48;
    boolean var52 = filterAppAccessLPr(var49,param4,param2,1,param5);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var25 = getInstantApp(param6);
    boolean var27 = canViewInstantApps(var14,param6);
    Context var6 = this.mContext;
    Context var11 = this.mContext;
    boolean 0<PATH_SEP>int var6 = Binder.getCallingUid();
    ActivityInfo var8 = getActivityInfoInternal(param2,param3,var6,param4);
    UserManagerService var6 = sUserManager;
    boolean var8 = var6.exists(param5);
    int var11 = updateFlagsForComponent(param3,param5,param2);
    int var13 = Binder.getCallingUid();
    PermissionManagerServiceInternal var16 = this.mPermissionManager;
    int var18 = Binder.getCallingUid();
    ArrayMap var23 = this.mPackages;
    ComponentResolver var24 = this.mComponentResolver;
    PackageParser$Activity var26 = var24.getActivity(param2);
    Settings var27 = this.mSettings;
    ActivityInfo var28 = var26.info;
    boolean var30 = var27.isEnabledAndMatchLPr(var28,var11,param5);
    Settings var43 = this.mSettings;
    ArrayMap var44 = var43.mPackages;
    String var46 = getPackageName();
    Object var48 = var44.get(var46);
    PackageSetting var49 = (PackageSetting) var48;
    boolean var52 = filterAppAccessLPr(var49,param4,param2,1,param5);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var43 = this.mComponentResolver;
    PackageParser$Activity var45 = var43.getActivity(param2);
    boolean 0<PATH_SEP>int var6 = Binder.getCallingUid();
    ActivityInfo var8 = getActivityInfoInternal(param2,param3,var6,param4);
    UserManagerService var6 = sUserManager;
    boolean var8 = var6.exists(param5);
    int var11 = updateFlagsForComponent(param3,param5,param2);
    int var13 = Binder.getCallingUid();
    PermissionManagerServiceInternal var16 = this.mPermissionManager;
    int var18 = Binder.getCallingUid();
    ArrayMap var23 = this.mPackages;
    ComponentResolver var24 = this.mComponentResolver;
    PackageParser$Activity var26 = var24.getActivity(param2);
    Settings var27 = this.mSettings;
    ActivityInfo var28 = var26.info;
    boolean var30 = var27.isEnabledAndMatchLPr(var28,var11,param5);
    Settings var43 = this.mSettings;
    ArrayMap var44 = var43.mPackages;
    String var46 = getPackageName();
    Object var48 = var44.get(var46);
    PackageSetting var49 = (PackageSetting) var48;
    boolean var52 = filterAppAccessLPr(var49,param4,param2,1,param5);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var31 = this.mComponentResolver;
    PackageParser$Activity var33 = var31.getReceiver(param2);
    boolean 0;
}