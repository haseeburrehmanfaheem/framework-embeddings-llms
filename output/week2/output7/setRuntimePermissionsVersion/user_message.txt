// API: setRuntimePermissionsVersion
// Service: PackageManagerService_3

public void setRuntimePermissionsVersion() {
    int var5 = Preconditions.checkArgumentNonnegative(param2);{int var5 = Preconditions.checkArgumentNonnegative(param2);};
    int var7 = Preconditions.checkArgumentNonnegative(param3);{int var7 = Preconditions.checkArgumentNonnegative(param3);};
    Context var8 = this.mContext;
    ArrayMap var12 = this.mPackages;
    Settings var13 = this.mSettings;
    var13.setDefaultRuntimePermissionsVersionLPr(param2,param3);
    Settings$RuntimePermissionPersistence var4 = this.mRuntimePermissionsPersistence;
    var4.setVersionLPr(param2,param3);<PATH_SEP>int var5 = Preconditions.checkArgumentNonnegative(param2);{int var5 = Preconditions.checkArgumentNonnegative(param2);};
    int var7 = Preconditions.checkArgumentNonnegative(param3);{int var7 = Preconditions.checkArgumentNonnegative(param3);};
    Context var8 = this.mContext;
    ArrayMap var12 = this.mPackages;
    Settings var13 = this.mSettings;
    var13.setDefaultRuntimePermissionsVersionLPr(param2,param3);
    Settings$RuntimePermissionPersistence var4 = this.mRuntimePermissionsPersistence;
    var4.setVersionLPr(param2,param3);
    SparseIntArray var4 = this.mVersions;
    var4.put(param3,param2);
    writePermissionsForUserAsyncLPr(param3);
    long var4 = SystemClock.uptimeMillis();
    SparseBooleanArray var5 = this.mWriteScheduled;
    boolean var7 = var5.get(param2);
    Handler var21 = this.mHandler;
    var21.removeMessages(param2);
    SparseLongArray var23 = this.mLastNotWrittenMutationTimesMillis;
    long var25 = var23.get(param2);
    var26 = var4 sub var25;
    var28 = var26 lt 2000;
    Handler var48 = this.mHandler;
    Message var50 = var48.obtainMessage(param2);
    var50.sendToTarget();<PATH_SEP>int var5 = Preconditions.checkArgumentNonnegative(param2);{int var5 = Preconditions.checkArgumentNonnegative(param2);};
    int var7 = Preconditions.checkArgumentNonnegative(param3);{int var7 = Preconditions.checkArgumentNonnegative(param3);};
    Context var8 = this.mContext;
    ArrayMap var12 = this.mPackages;
    Settings var13 = this.mSettings;
    var13.setDefaultRuntimePermissionsVersionLPr(param2,param3);
    Settings$RuntimePermissionPersistence var4 = this.mRuntimePermissionsPersistence;
    var4.setVersionLPr(param2,param3);
    SparseIntArray var4 = this.mVersions;
    var4.put(param3,param2);
    writePermissionsForUserAsyncLPr(param3);
    long var4 = SystemClock.uptimeMillis();
    SparseBooleanArray var5 = this.mWriteScheduled;
    boolean var7 = var5.get(param2);
    SparseLongArray var10 = this.mLastNotWrittenMutationTimesMillis;
    var10.put(param2,var4);<PATH_SEP>int var5 = Preconditions.checkArgumentNonnegative(param2);{int var5 = Preconditions.checkArgumentNonnegative(param2);};
    int var7 = Preconditions.checkArgumentNonnegative(param3);{int var7 = Preconditions.checkArgumentNonnegative(param3);};
    Context var8 = this.mContext;
    ArrayMap var12 = this.mPackages;
    Settings var13 = this.mSettings;
    var13.setDefaultRuntimePermissionsVersionLPr(param2,param3);
    Settings$RuntimePermissionPersistence var4 = this.mRuntimePermissionsPersistence;
    var4.setVersionLPr(param2,param3);
    SparseIntArray var4 = this.mVersions;
    var4.put(param3,param2);
    writePermissionsForUserAsyncLPr(param3);
    long var4 = SystemClock.uptimeMillis();
    SparseBooleanArray var5 = this.mWriteScheduled;
    boolean var7 = var5.get(param2);
    SparseLongArray var10 = this.mLastNotWrittenMutationTimesMillis;
    var10.put(param2,var4);
    Handler var12 = this.mHandler;
    Message var14 = var12.obtainMessage(param2);
    Handler var15 = this.mHandler;
    boolean var17 = var15.sendMessageDelayed(var14,200);
}