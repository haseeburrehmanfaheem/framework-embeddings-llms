// API: queryContentProviders
// Service: PackageManagerService_5

public void queryContentProviders() {
    int var7 = Binder.getCallingUid();
    int var12 = UserHandle.getUserId(param3);
    UserManagerService var16 = sUserManager;
    boolean var18 = var16.exists(var13);
    int var20 = updateFlagsForComponent(param4,var13,param2);
    ComponentResolver var21 = this.mComponentResolver;
    List var23 = var21.queryProviders(param2,param5,param3,var20,var13);
    ArrayMap var29 = this.mPackages;
    Object var31 = var23.get(var70);
    ProviderInfo var32 = (ProviderInfo) var31;
    Settings var33 = this.mSettings;
    boolean var35 = var33.isEnabledAndMatchLPr(var32,var20,var13);
    Settings var36 = this.mSettings;
    ArrayMap var37 = var36.mPackages;
    String var38 = var32.packageName;
    Object var40 = var37.get(var38);
    PackageSetting var41 = (PackageSetting) var40;
    ComponentName var42 = new ComponentName();
    String var43 = var32.packageName;
    String var44 = var32.name;
    boolean var48 = filterAppAccessLPr(var41,var7,var42,4,var13);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    boolean var12 = isComponentVisibleToInstantApp(param2);
    boolean var12<PATH_SEP>int var7 = Binder.getCallingUid();
    int var12 = UserHandle.getUserId(param3);
    UserManagerService var16 = sUserManager;
    boolean var18 = var16.exists(var13);
    int var20 = updateFlagsForComponent(param4,var13,param2);
    ComponentResolver var21 = this.mComponentResolver;
    List var23 = var21.queryProviders(param2,param5,param3,var20,var13);
    UserManagerService var7 = sUserManager;
    boolean var9 = var7.exists(param6);
    Object var11 = this.mLock;
    ComponentResolver$ProviderIntentResolver var12 = this.mProviders;
    ArrayMap var14 = ComponentResolver$ProviderIntentResolver.access$400(var12);{ArrayMap var14 = ComponentResolver$ProviderIntentResolver.access$400(var12);};
    int var16 = var14.size();
    var18 = var16 add -1;
    ComponentResolver$ProviderIntentResolver var19 = this.mProviders;
    ArrayMap var21 = ComponentResolver$ProviderIntentResolver.access$400(var19);{ArrayMap var21 = ComponentResolver$ProviderIntentResolver.access$400(var19);};
    Object var23 = var21.valueAt(var67);
    PackageParser$Provider var24 = (PackageParser$Provider) var23;
    PackageParser$Package var25 = var24.owner;
    Object var26 = var25.mExtras;
    PackageSetting var27 = (PackageSetting) var26;
    ProviderInfo var28 = var24.info;
    String var29 = var28.authority;
    ProviderInfo var30 = var24.info;
    String var31 = var30.processName;
    boolean var33 = var31.equals(param2);
    ProviderInfo var34 = var24.info;
    ApplicationInfo var35 = var34.applicationInfo;
    int var36 = var35.uid;
    boolean var38 = UserHandle.isSameApp(var36,param4);
    Bundle var42 = var24.metaData;
    Bundle var43 = var24.metaData;
    boolean var45 = var43.containsKey(param3);
    PackageUserState var50 = var27.readUserState(param6);
    ProviderInfo var52 = PackageParser.generateProviderInfo(var24,param5,var50,param6);
    ArrayList var53 = new ArrayList();
    var55 = var67 add 1;
    boolean var60 = var57.add(var52);<PATH_SEP>int var7 = Binder.getCallingUid();
    int var12 = UserHandle.getUserId(param3);
    UserManagerService var16 = sUserManager;
    boolean var18 = var16.exists(var13);
    int var20 = updateFlagsForComponent(param4,var13,param2);
    ComponentResolver var21 = this.mComponentResolver;
    List var23 = var21.queryProviders(param2,param5,param3,var20,var13);
    ArrayMap var29 = this.mPackages;
    Object var31 = var23.get(var70);
    ProviderInfo var32 = (ProviderInfo) var31;
    Settings var33 = this.mSettings;
    boolean var35 = var33.isEnabledAndMatchLPr(var32,var20,var13);
    Settings var36 = this.mSettings;
    ArrayMap var37 = var36.mPackages;
    String var38 = var32.packageName;
    Object var40 = var37.get(var38);
    PackageSetting var41 = (PackageSetting) var40;
    ComponentName var42 = new ComponentName();
    String var43 = var32.packageName;
    String var44 = var32.name;
    boolean var48 = filterAppAccessLPr(var41,var7,var42,4,var13);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var13 = this.mComponentResolver;
    PackageParser$Provider var15 = var13.getProvider(param2);
    Object var3 = this.mLock;
    ComponentResolver$ProviderIntentResolver var4 = this.mProviders;
    ArrayMap var6 = ComponentResolver$ProviderIntentResolver.access$400(var4);{ArrayMap var6 = ComponentResolver$ProviderIntentResolver.access$400(var4);};
    Object var8 = var6.get(param2);
    PackageParser$Provider var9 = (PackageParser$Provider) var8;
    Landroid/content/pm/PackageParser$Provider var9<PATH_SEP>int var7 = Binder.getCallingUid();
    int var12 = UserHandle.getUserId(param3);
    UserManagerService var16 = sUserManager;
    boolean var18 = var16.exists(var13);
    int var20 = updateFlagsForComponent(param4,var13,param2);
    ComponentResolver var21 = this.mComponentResolver;
    List var23 = var21.queryProviders(param2,param5,param3,var20,var13);
    ArrayMap var29 = this.mPackages;
    Object var31 = var23.get(var70);
    ProviderInfo var32 = (ProviderInfo) var31;
    Settings var33 = this.mSettings;
    boolean var35 = var33.isEnabledAndMatchLPr(var32,var20,var13);
    Settings var36 = this.mSettings;
    ArrayMap var37 = var36.mPackages;
    String var38 = var32.packageName;
    Object var40 = var37.get(var38);
    PackageSetting var41 = (PackageSetting) var40;
    ComponentName var42 = new ComponentName();
    String var43 = var32.packageName;
    String var44 = var32.name;
    boolean var48 = filterAppAccessLPr(var41,var7,var42,4,var13);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var25 = getInstantApp(param6);
    boolean var27 = canViewInstantApps(var14,param6);
    Context var6 = this.mContext;
    Context var11 = this.mContext;
    ComponentName var16 = getDefaultHomeActivity(param3);
    String var18 = var16.getPackageName();
    String var24 = this.mAppPredictionServicePackage;
    boolean 0;
}