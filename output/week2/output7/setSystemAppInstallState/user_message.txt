// API: setSystemAppInstallState
// Service: PackageManagerService_4

public void setSystemAppInstallState() {
    ArrayMap var7 = this.mPackages;
    Settings var8 = this.mSettings;
    ArrayMap var9 = var8.mPackages;
    Object var11 = var9.get(param2);
    PackageSetting var12 = (PackageSetting) var11;
    boolean var17 = var12.getInstalled(param4);
    long var19 = Binder.clearCallingIdentity();
    int var34 = installExistingPackageAsUser(param2,param4,4194304,3,0);
    int var9 = installExistingPackageAsUser(param2,param3,param4,param5,param6,0);
    int var9 = Binder.getCallingUid();
    Context var10 = this.mContext;
    Context var15 = this.mContext;
    PermissionManagerServiceInternal var42 = this.mPermissionManager;
    long var58 = Binder.clearCallingIdentity();
    var60 = param4 and 2048;
    var63 = param4 and 16384;
    ArrayMap var65 = this.mPackages;
    Settings var67 = this.mSettings;
    ArrayMap var68 = var67.mPackages;
    Object var70 = var68.get(param2);
    PackageSetting var71 = (PackageSetting) var70;
    int var74 = UserHandle.getUserId(var9);
    boolean var76 = canViewInstantApps(var9,var74);
    UserManagerService var77 = sUserManager;
    [I var79 = var77.getUserIds();
    80 = arraylength 79;
    81 = arrayload 79[87];
    boolean var83 = var71.getInstantApp(var81);
    var85 = var83 xor 1;
    boolean var103 = var71.getInstalled(param3);
    var71.setInstalled(1,param3);
    var71.setHidden(0,param3);
    var71.setInstallReason(param5,param3);
    Settings var109 = this.mSettings;
    var109.writePackageRestrictionsLPr(param3);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    ArrayMap var63 = this.mPackages;
    Collection var65 = var63.values();
    Iterator var67 = var65.iterator();
    Object var71 = var67.next();
    PackageSetting var72 = (PackageSetting) var71;
    PackageUserState var74 = var72.readUserState(param2);
    XmlSerializer var76 = var44.startTag(0,pkg);
    String var77 = var72.name;
    XmlSerializer var79 = var44.attribute(0,name,var77);
    long var80 = var74.ceDataInode;
    var82 = var80 lt 0;
    long var84 = var74.ceDataInode;
    XmlUtils.writeLongAttribute(var44,ceDataInode,var84);
    boolean var89 = var74.installed;
    XmlSerializer var93 = var44.attribute(0,inst,false);
    boolean var99 = var74.stopped;
    XmlSerializer var103 = var44.attribute(0,stopped,true);
    boolean var108 = var74.notLaunched;
    XmlSerializer var111 = var44.attribute(0,nl,true);
    boolean var116 = var74.hidden;
    XmlSerializer var119 = var44.attribute(0,hidden,true);
    int var124 = var74.distractionFlags;
    int var126 = var74.distractionFlags;
    String var128 = Integer.toString(var126);
    XmlSerializer var130 = var44.attribute(0,distraction_flags,var128);
    boolean var136 = var74.suspended;
    XmlSerializer var139 = var44.attribute(0,suspended,true);
    String var140 = var74.suspendingPackage;
    String var142 = var74.suspendingPackage;
    XmlSerializer var144 = var44.attribute(0,suspending-package,var142);
    XmlSerializer var152 = var44.startTag(0,suspended-dialog-info);
    XmlSerializer var156 = var44.endTag(0,suspended-dialog-info);
    PersistableBundle var161 = var74.suspendedAppExtras;
    XmlSerializer var164 = var44.startTag(0,suspended-app-extras);
    PersistableBundle var165 = var74.suspendedAppExtras;
    var165.saveToXml(var44);
    XmlSerializer var188 = var44.endTag(0,suspended-app-extras);
    PersistableBundle var194 = var74.suspendedLauncherExtras;
    XmlSerializer var196 = var44.startTag(0,suspended-launcher-extras);
    PersistableBundle var197 = var74.suspendedLauncherExtras;
    var197.saveToXml(var44);
    XmlSerializer var219 = var44.endTag(0,suspended-launcher-extras);
    boolean var226 = var74.instantApp;
    XmlSerializer var229 = var44.attribute(0,instant-app,true);
    boolean var234 = var74.virtualPreload;
    XmlSerializer var237 = var44.attribute(0,virtual-preload,true);
    int var242 = var74.enabled;
    int var244 = var74.enabled;
    String var246 = Integer.toString(var244);
    XmlSerializer var248 = var44.attribute(0,enabled,var246);
    String var249 = var74.lastDisableAppCaller;
    String var251 = var74.lastDisableAppCaller;
    XmlSerializer var253 = var44.attribute(0,enabledCaller,var251);
    int var259 = var74.domainVerificationStatus;
    int var261 = var74.domainVerificationStatus;
    XmlUtils.writeIntAttribute(var44,domainVerificationStatus,var261);<PATH_SEP>ArrayMap var7 = this.mPackages;
    Settings var8 = this.mSettings;
    ArrayMap var9 = var8.mPackages;
    Object var11 = var9.get(param2);
    PackageSetting var12 = (PackageSetting) var11;
    boolean var17 = var12.getInstalled(param4);
    long var19 = Binder.clearCallingIdentity();
    int var34 = installExistingPackageAsUser(param2,param4,4194304,3,0);
    int var9 = installExistingPackageAsUser(param2,param3,param4,param5,param6,0);
    int var9 = Binder.getCallingUid();
    Context var10 = this.mContext;
    Context var15 = this.mContext;
    PermissionManagerServiceInternal var42 = this.mPermissionManager;
    long var58 = Binder.clearCallingIdentity();
    var60 = param4 and 2048;
    var63 = param4 and 16384;
    ArrayMap var65 = this.mPackages;
    Settings var67 = this.mSettings;
    ArrayMap var68 = var67.mPackages;
    Object var70 = var68.get(param2);
    PackageSetting var71 = (PackageSetting) var70;
    int var74 = UserHandle.getUserId(var9);
    boolean var76 = canViewInstantApps(var9,var74);
    UserManagerService var77 = sUserManager;
    [I var79 = var77.getUserIds();
    80 = arraylength 79;
    81 = arrayload 79[87];
    boolean var83 = var71.getInstantApp(var81);
    var85 = var83 xor 1;
    boolean var103 = var71.getInstalled(param3);
    var71.setInstalled(1,param3);
    var71.setHidden(0,param3);
    var71.setInstallReason(param5,param3);
    Settings var109 = this.mSettings;
    var109.writePackageRestrictionsLPr(param3);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    ArrayMap var63 = this.mPackages;
    Collection var65 = var63.values();
    Iterator var67 = var65.iterator();
    Object var71 = var67.next();
    PackageSetting var72 = (PackageSetting) var71;
    PackageUserState var74 = var72.readUserState(param2);
    XmlSerializer var76 = var44.startTag(0,pkg);
    String var77 = var72.name;
    XmlSerializer var79 = var44.attribute(0,name,var77);
    long var80 = var74.ceDataInode;
    var82 = var80 lt 0;
    long var84 = var74.ceDataInode;
    XmlUtils.writeLongAttribute(var44,ceDataInode,var84);
    boolean var89 = var74.installed;
    XmlSerializer var93 = var44.attribute(0,inst,false);
    boolean var99 = var74.stopped;
    XmlSerializer var103 = var44.attribute(0,stopped,true);
    boolean var108 = var74.notLaunched;
    XmlSerializer var111 = var44.attribute(0,nl,true);
    boolean var116 = var74.hidden;
    XmlSerializer var119 = var44.attribute(0,hidden,true);
    int var124 = var74.distractionFlags;
    int var126 = var74.distractionFlags;
    String var128 = Integer.toString(var126);
    XmlSerializer var130 = var44.attribute(0,distraction_flags,var128);
    boolean var136 = var74.suspended;
    XmlSerializer var139 = var44.attribute(0,suspended,true);
    String var140 = var74.suspendingPackage;
    String var142 = var74.suspendingPackage;
    XmlSerializer var144 = var44.attribute(0,suspending-package,var142);
    XmlSerializer var152 = var44.startTag(0,suspended-dialog-info);
    XmlSerializer var156 = var44.endTag(0,suspended-dialog-info);
    PersistableBundle var161 = var74.suspendedAppExtras;
    XmlSerializer var164 = var44.startTag(0,suspended-app-extras);
    PersistableBundle var165 = var74.suspendedAppExtras;
    var165.saveToXml(var44);
    XmlSerializer var188 = var44.endTag(0,suspended-app-extras);
    PersistableBundle var194 = var74.suspendedLauncherExtras;
    XmlSerializer var196 = var44.startTag(0,suspended-launcher-extras);
    PersistableBundle var197 = var74.suspendedLauncherExtras;
    var197.saveToXml(var44);
    XmlSerializer var219 = var44.endTag(0,suspended-launcher-extras);
    boolean var226 = var74.instantApp;
    XmlSerializer var229 = var44.attribute(0,instant-app,true);
    boolean var234 = var74.virtualPreload;
    XmlSerializer var237 = var44.attribute(0,virtual-preload,true);
    int var242 = var74.enabled;
    int var244 = var74.enabled;
    String var246 = Integer.toString(var244);
    XmlSerializer var248 = var44.attribute(0,enabled,var246);
    String var249 = var74.lastDisableAppCaller;
    String var251 = var74.lastDisableAppCaller;
    XmlSerializer var253 = var44.attribute(0,enabledCaller,var251);
    int var259 = var74.domainVerificationStatus;
    int var261 = var74.domainVerificationStatus;
    XmlUtils.writeIntAttribute(var44,domainVerificationStatus,var261);
    int var266 = var74.appLinkGeneration;
    int var268 = var74.appLinkGeneration;
    XmlUtils.writeIntAttribute(var44,app-link-generation,var268);
    int var273 = var74.installReason;
    int var275 = var74.installReason;
    String var277 = Integer.toString(var275);
    XmlSerializer var279 = var44.attribute(0,install-reason,var277);
    String var285 = var74.harmfulAppWarning;
    String var287 = var74.harmfulAppWarning;
    XmlSerializer var289 = var44.attribute(0,harmful-app-warning,var287);
    ArraySet var295 = var74.enabledComponents;
    boolean var297 = ArrayUtils.isEmpty(var295);
    ArraySet var326 = var74.disabledComponents;
    boolean var328 = ArrayUtils.isEmpty(var326);
    XmlSerializer var330 = var44.startTag(0,disabled-components);
    ArraySet var331 = var74.disabledComponents;
    Iterator var333 = var331.iterator();
    Object var337 = var333.next();
    String var338 = (String) var337;
    XmlSerializer var340 = var44.startTag(0,item);<PATH_SEP>ArrayMap var7 = this.mPackages;
    Settings var8 = this.mSettings;
    ArrayMap var9 = var8.mPackages;
    Object var11 = var9.get(param2);
    PackageSetting var12 = (PackageSetting) var11;
    boolean var17 = var12.getInstalled(param4);
    long var19 = Binder.clearCallingIdentity();
    int var34 = installExistingPackageAsUser(param2,param4,4194304,3,0);
    int var9 = installExistingPackageAsUser(param2,param3,param4,param5,param6,0);
    int var9 = Binder.getCallingUid();
    Context var10 = this.mContext;
    Context var15 = this.mContext;
    PermissionManagerServiceInternal var42 = this.mPermissionManager;
    long var58 = Binder.clearCallingIdentity();
    var60 = param4 and 2048;
    var63 = param4 and 16384;
    ArrayMap var65 = this.mPackages;
    Settings var67 = this.mSettings;
    ArrayMap var68 = var67.mPackages;
    Object var70 = var68.get(param2);
    PackageSetting var71 = (PackageSetting) var70;
    int var74 = UserHandle.getUserId(var9);
    boolean var76 = canViewInstantApps(var9,var74);
    UserManagerService var77 = sUserManager;
    [I var79 = var77.getUserIds();
    80 = arraylength 79;
    81 = arrayload 79[87];
    boolean var83 = var71.getInstantApp(var81);
    var85 = var83 xor 1;
    boolean var103 = var71.getInstalled(param3);
    var71.setInstalled(1,param3);
    var71.setHidden(0,param3);
    var71.setInstallReason(param5,param3);
    Settings var109 = this.mSettings;
    var109.writePackageRestrictionsLPr(param3);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    ArrayMap var63 = this.mPackages;
    Collection var65 = var63.values();
    Iterator var67 = var65.iterator();
    Object var71 = var67.next();
    PackageSetting var72 = (PackageSetting) var71;
    PackageUserState var74 = var72.readUserState(param2);
    XmlSerializer var76 = var44.startTag(0,pkg);
    String var77 = var72.name;
    XmlSerializer var79 = var44.attribute(0,name,var77);
    long var80 = var74.ceDataInode;
    var82 = var80 lt 0;
    long var84 = var74.ceDataInode;
    XmlUtils.writeLongAttribute(var44,ceDataInode,var84);
    boolean var89 = var74.installed;
    XmlSerializer var93 = var44.attribute(0,inst,false);
    boolean var99 = var74.stopped;
    XmlSerializer var103 = var44.attribute(0,stopped,true);
    boolean var108 = var74.notLaunched;
    XmlSerializer var111 = var44.attribute(0,nl,true);
    boolean var116 = var74.hidden;
    XmlSerializer var119 = var44.attribute(0,hidden,true);
    int var124 = var74.distractionFlags;
    int var126 = var74.distractionFlags;
    String var128 = Integer.toString(var126);
    XmlSerializer var130 = var44.attribute(0,distraction_flags,var128);
    boolean var136 = var74.suspended;
    XmlSerializer var139 = var44.attribute(0,suspended,true);
    String var140 = var74.suspendingPackage;
    String var142 = var74.suspendingPackage;
    XmlSerializer var144 = var44.attribute(0,suspending-package,var142);
    XmlSerializer var152 = var44.startTag(0,suspended-dialog-info);
    XmlSerializer var156 = var44.endTag(0,suspended-dialog-info);
    PersistableBundle var161 = var74.suspendedAppExtras;
    XmlSerializer var164 = var44.startTag(0,suspended-app-extras);
    PersistableBundle var165 = var74.suspendedAppExtras;
    var165.saveToXml(var44);
    XmlSerializer var188 = var44.endTag(0,suspended-app-extras);
    PersistableBundle var194 = var74.suspendedLauncherExtras;
    XmlSerializer var196 = var44.startTag(0,suspended-launcher-extras);
    PersistableBundle var197 = var74.suspendedLauncherExtras;
    var197.saveToXml(var44);<PATH_SEP>ArrayMap var7 = this.mPackages;
    Settings var8 = this.mSettings;
    ArrayMap var9 = var8.mPackages;
    Object var11 = var9.get(param2);
    PackageSetting var12 = (PackageSetting) var11;
    boolean var17 = var12.getInstalled(param4);
    long var19 = Binder.clearCallingIdentity();
    int var34 = installExistingPackageAsUser(param2,param4,4194304,3,0);
    int var9 = installExistingPackageAsUser(param2,param3,param4,param5,param6,0);
    int var9 = Binder.getCallingUid();
    Context var10 = this.mContext;
    Context var15 = this.mContext;
    PermissionManagerServiceInternal var42 = this.mPermissionManager;
    long var58 = Binder.clearCallingIdentity();
    var60 = param4 and 2048;
    var63 = param4 and 16384;
    ArrayMap var65 = this.mPackages;
    Settings var67 = this.mSettings;
    ArrayMap var68 = var67.mPackages;
    Object var70 = var68.get(param2);
    PackageSetting var71 = (PackageSetting) var70;
    int var74 = UserHandle.getUserId(var9);
    boolean var76 = canViewInstantApps(var9,var74);
    UserManagerService var77 = sUserManager;
    [I var79 = var77.getUserIds();
    80 = arraylength 79;
    81 = arrayload 79[87];
    boolean var83 = var71.getInstantApp(var81);
    var85 = var83 xor 1;
    boolean var103 = var71.getInstalled(param3);
    var71.setInstalled(1,param3);
    var71.setHidden(0,param3);
    var71.setInstallReason(param5,param3);
    Settings var109 = this.mSettings;
    var109.writePackageRestrictionsLPr(param3);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    ArrayMap var63 = this.mPackages;
    Collection var65 = var63.values();
    Iterator var67 = var65.iterator();
    Object var71 = var67.next();
    PackageSetting var72 = (PackageSetting) var71;
    PackageUserState var74 = var72.readUserState(param2);
    XmlSerializer var76 = var44.startTag(0,pkg);
    String var77 = var72.name;
    XmlSerializer var79 = var44.attribute(0,name,var77);
    long var80 = var74.ceDataInode;
    var82 = var80 lt 0;
    long var84 = var74.ceDataInode;
    XmlUtils.writeLongAttribute(var44,ceDataInode,var84);
}