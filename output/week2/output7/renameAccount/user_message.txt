// API: renameAccount
// Service: AccountManagerService_4

public void renameAccount() {
    int var6 = Binder.getCallingUid();
    int var33 = Binder.getCallingPid();
    int var47 = UserHandle.getCallingUserId();
    String var48 = param3.type;
    boolean var50 = isAccountManagedByCaller(var48,var6,var47);{boolean var50 = isAccountManagedByCaller(var48,var6,var47);};
    long var62 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var64 = getUserAccounts(var47);
    Account var66 = renameAccountInternal(var64,param3,param4);
    AccountManagerService$NotificationId var7 = getSigninRequiredNotificationId(param2,param3);
    UserHandle var8 = new UserHandle();
    int var10 = AccountManagerService$UserAccounts.access$800(param2);{int var10 = AccountManagerService$UserAccounts.access$800(param2);};
    cancelNotification(var7,var8);
    HashMap var14 = AccountManagerService$UserAccounts.access$1600(param2);{HashMap var14 = AccountManagerService$UserAccounts.access$1600(param2);};
    HashMap var16 = AccountManagerService$UserAccounts.access$1600(param2);{HashMap var16 = AccountManagerService$UserAccounts.access$1600(param2);};
    Set var18 = var16.keySet();
    Iterator var20 = var18.iterator();
    Object var47 = param2.dbLock;
    Object var48 = param2.cacheLock;
    List var50 = getAccountRemovedReceivers(param3,param2);
    Intent var4 = new Intent();
    Intent var9 = var4.setFlags(16777216);
    PackageManager var10 = this.mPackageManager;
    int var12 = AccountManagerService$UserAccounts.access$800(param3);{int var12 = AccountManagerService$UserAccounts.access$800(param3);};
    List var15 = var10.queryBroadcastReceiversAsUser(var4,0,var12);
    ArrayList var16 = new ArrayList();
    Iterator var19 = var15.iterator();
    Object var23 = var19.next();
    ResolveInfo var24 = (ResolveInfo) var23;
    ActivityInfo var25 = var24.activityInfo;
    ApplicationInfo var26 = var25.applicationInfo;
    String var27 = var26.packageName;
    Integer var29 = resolveAccountVisibility(param2,var27,param3);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    Integer var105 = Integer.valueOf(1);
    Ljava/lang/Integer var105<PATH_SEP>int var6 = Binder.getCallingUid();
    int var33 = Binder.getCallingPid();
    int var47 = UserHandle.getCallingUserId();
    String var48 = param3.type;
    boolean var50 = isAccountManagedByCaller(var48,var6,var47);{boolean var50 = isAccountManagedByCaller(var48,var6,var47);};
    long var62 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var64 = getUserAccounts(var47);
    Account var66 = renameAccountInternal(var64,param3,param4);
    AccountManagerService$NotificationId var7 = getSigninRequiredNotificationId(param2,param3);
    UserHandle var8 = new UserHandle();
    int var10 = AccountManagerService$UserAccounts.access$800(param2);{int var10 = AccountManagerService$UserAccounts.access$800(param2);};
    cancelNotification(var7,var8);
    HashMap var14 = AccountManagerService$UserAccounts.access$1600(param2);{HashMap var14 = AccountManagerService$UserAccounts.access$1600(param2);};
    HashMap var16 = AccountManagerService$UserAccounts.access$1600(param2);{HashMap var16 = AccountManagerService$UserAccounts.access$1600(param2);};
    Set var18 = var16.keySet();
    Iterator var20 = var18.iterator();
    Object var47 = param2.dbLock;
    Object var48 = param2.cacheLock;
    List var50 = getAccountRemovedReceivers(param3,param2);
    Intent var4 = new Intent();
    Intent var9 = var4.setFlags(16777216);
    PackageManager var10 = this.mPackageManager;
    int var12 = AccountManagerService$UserAccounts.access$800(param3);{int var12 = AccountManagerService$UserAccounts.access$800(param3);};
    List var15 = var10.queryBroadcastReceiversAsUser(var4,0,var12);
    ArrayList var16 = new ArrayList();
    Iterator var19 = var15.iterator();
    Object var23 = var19.next();
    ResolveInfo var24 = (ResolveInfo) var23;
    ActivityInfo var25 = var24.activityInfo;
    ApplicationInfo var26 = var25.applicationInfo;
    String var27 = var26.packageName;
    Integer var29 = resolveAccountVisibility(param2,var27,param3);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    int var51 = getAccountVisibilityFromCache(param2,param3,param4);
    int var53 = AccountManagerService$UserAccounts.access$800(param4);{int var53 = AccountManagerService$UserAccounts.access$800(param4);};
    String var55 = new String(1);
    boolean var61 = isPreOApplication(param3);
    int var63 = AccountManagerService$UserAccounts.access$800(param4);{int var63 = AccountManagerService$UserAccounts.access$800(param4);};
    int var70 = AccountManagerService$UserAccounts.access$800(param4);{int var70 = AccountManagerService$UserAccounts.access$800(param4);};
    int var83 = getAccountVisibilityFromCache(param2,android:accounts:key_legacy_not_visible,param4);
    Integer var99 = Integer.valueOf(var94);
    Ljava/lang/Integer var99<PATH_SEP>int var6 = Binder.getCallingUid();
    int var33 = Binder.getCallingPid();
    int var47 = UserHandle.getCallingUserId();
    String var48 = param3.type;
    boolean var50 = isAccountManagedByCaller(var48,var6,var47);{boolean var50 = isAccountManagedByCaller(var48,var6,var47);};
    long var62 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var64 = getUserAccounts(var47);
    Account var66 = renameAccountInternal(var64,param3,param4);
    AccountManagerService$NotificationId var7 = getSigninRequiredNotificationId(param2,param3);
    UserHandle var8 = new UserHandle();
    int var10 = AccountManagerService$UserAccounts.access$800(param2);{int var10 = AccountManagerService$UserAccounts.access$800(param2);};
    cancelNotification(var7,var8);
    HashMap var14 = AccountManagerService$UserAccounts.access$1600(param2);{HashMap var14 = AccountManagerService$UserAccounts.access$1600(param2);};
    HashMap var16 = AccountManagerService$UserAccounts.access$1600(param2);{HashMap var16 = AccountManagerService$UserAccounts.access$1600(param2);};
    Set var18 = var16.keySet();
    Iterator var20 = var18.iterator();
    Object var47 = param2.dbLock;
    Object var48 = param2.cacheLock;
    List var50 = getAccountRemovedReceivers(param3,param2);
    Intent var4 = new Intent();
    Intent var9 = var4.setFlags(16777216);
    PackageManager var10 = this.mPackageManager;
    int var12 = AccountManagerService$UserAccounts.access$800(param3);{int var12 = AccountManagerService$UserAccounts.access$800(param3);};
    List var15 = var10.queryBroadcastReceiversAsUser(var4,0,var12);
    ArrayList var16 = new ArrayList();
    Iterator var19 = var15.iterator();
    Object var23 = var19.next();
    ResolveInfo var24 = (ResolveInfo) var23;
    ActivityInfo var25 = var24.activityInfo;
    ApplicationInfo var26 = var25.applicationInfo;
    String var27 = var26.packageName;
    Integer var29 = resolveAccountVisibility(param2,var27,param3);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    int var51 = getAccountVisibilityFromCache(param2,param3,param4);
    int var53 = AccountManagerService$UserAccounts.access$800(param4);{int var53 = AccountManagerService$UserAccounts.access$800(param4);};
    String var55 = new String(1);
    boolean var61 = isPreOApplication(param3);
    int var70 = AccountManagerService$UserAccounts.access$800(param4);{int var70 = AccountManagerService$UserAccounts.access$800(param4);};
    int var93 = getAccountVisibilityFromCache(param2,android:accounts:key_legacy_visible,param4);
    Integer var99 = Integer.valueOf(var94);
    Ljava/lang/Integer var99;
}