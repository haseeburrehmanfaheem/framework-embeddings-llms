// API: createPrinterDiscoverySession
// Service: PrintManagerService$PrintManagerImpl_3

public void createPrinterDiscoverySession() {
    Object var5 = Preconditions.checkNotNull(param2);{Object var5 = Preconditions.checkNotNull(param2);};
    IPrinterDiscoveryObserver var6 = (IPrinterDiscoveryObserver) var5;
    int var8 = resolveCallingUserEnforcingPermissions(param3);
    Object var9 = this.mLock;
    int var11 = resolveCallingProfileParentLocked(var8);
    int var13 = getCurrentUserId();
    UserState var16 = getOrCreateUserStateLocked(var8,0);
    long var18 = Binder.clearCallingIdentity();
    var16.createPrinterDiscoverySession(var6);
    RemotePrintSpooler var3 = this.mSpooler;
    var3.clearCustomPrinterIconCache();
    Object var5 = this.mLock;
    throwIfDestroyedLocked();
    UserState$PrinterDiscoverySessionMediator var7 = this.mPrinterDiscoverySession;
    UserState$1 var11 = new UserState$1();
    this.mPrinterDiscoverySession = var11;
    UserState$PrinterDiscoverySessionMediator var13 = this.mPrinterDiscoverySession;
    var13.addObserverLocked(param2);
    RemoteCallbackList var3 = this.mDiscoveryObservers;
    boolean var5 = var3.register(param2);
    ArrayMap var6 = this.mPrinters;
    boolean var8 = var6.isEmpty();
    Handler var11 = Handler.getMain();
    -$$Lambda$UserState$PrinterDiscoverySessionMediator$vhz2AcQkYu3SdMlMt9bsncMGW7E var12 = INSTANCE;
    ArrayList var13 = new ArrayList();
    ArrayMap var14 = this.mPrinters;
    Collection var16 = var14.values();
    Message var19 = PooledLambda.obtainMessage(var12,this,param2,var13);
    boolean var21 = var11.sendMessage(var19);<PATH_SEP>Object var5 = Preconditions.checkNotNull(param2);{Object var5 = Preconditions.checkNotNull(param2);};
    IPrinterDiscoveryObserver var6 = (IPrinterDiscoveryObserver) var5;
    int var8 = resolveCallingUserEnforcingPermissions(param3);
    Object var9 = this.mLock;
    int var11 = resolveCallingProfileParentLocked(var8);
    int var13 = getCurrentUserId();
    UserState var16 = getOrCreateUserStateLocked(var8,0);
    long var18 = Binder.clearCallingIdentity();
    var16.createPrinterDiscoverySession(var6);
    RemotePrintSpooler var3 = this.mSpooler;
    var3.clearCustomPrinterIconCache();
    Object var5 = this.mLock;
    throwIfDestroyedLocked();
    UserState$PrinterDiscoverySessionMediator var7 = this.mPrinterDiscoverySession;
    UserState$1 var11 = new UserState$1();
    this.mPrinterDiscoverySession = var11;
    UserState$PrinterDiscoverySessionMediator var13 = this.mPrinterDiscoverySession;
    var13.addObserverLocked(param2);<PATH_SEP>Object var5 = Preconditions.checkNotNull(param2);{Object var5 = Preconditions.checkNotNull(param2);};
    IPrinterDiscoveryObserver var6 = (IPrinterDiscoveryObserver) var5;
    int var8 = resolveCallingUserEnforcingPermissions(param3);
    Object var9 = this.mLock;
    int var11 = resolveCallingProfileParentLocked(var8);
    int var13 = getCurrentUserId();
    UserState var16 = getOrCreateUserStateLocked(var8,0);
    long var18 = Binder.clearCallingIdentity();
    var16.createPrinterDiscoverySession(var6);
    RemotePrintSpooler var3 = this.mSpooler;
    var3.clearCustomPrinterIconCache();
    throwIfCalledOnMainThread();
    Thread var3 = Thread.currentThread();
    Context var4 = this.mContext;
    Looper var6 = var4.getMainLooper();
    Thread var8 = var6.getThread();<PATH_SEP>Object var5 = Preconditions.checkNotNull(param2);{Object var5 = Preconditions.checkNotNull(param2);};
    IPrinterDiscoveryObserver var6 = (IPrinterDiscoveryObserver) var5;
    int var8 = resolveCallingUserEnforcingPermissions(param3);
    Object var9 = this.mLock;
    int var11 = resolveCallingProfileParentLocked(var8);
    int var13 = getCurrentUserId();
    UserState var16 = getOrCreateUserStateLocked(var8,0);
    UserState var6 = getOrCreateUserStateLocked(param2,param3,1);
    UserManager var6 = this.mUserManager;
    boolean var8 = var6.isUserUnlockingOrUnlocked(param2);
    SparseArray var23 = this.mUserStates;
    Object var25 = var23.get(param2);
    UserState var26 = (UserState) var25;
    var33.increasePriority();
    Lcom/android/server/print/UserState var33;
}