// API: removeWhitelistedRestrictedPermission
// Service: PackageManagerService_5

public void removeWhitelistedRestrictedPermission() {
    Object var7 = Preconditions.checkNotNull(param3);{Object var7 = Preconditions.checkNotNull(param3);};
    List var12 = getWhitelistedRestrictedPermissions(param2,param4,param5);
    Object var6 = Preconditions.checkNotNull(param2);{Object var6 = Preconditions.checkNotNull(param2);};
    int var9 = Preconditions.checkFlagsArgument(param3,7);{int var9 = Preconditions.checkFlagsArgument(param3,7);};
    10 = conversion(F) 4;
    float var13 = Preconditions.checkArgumentNonNegative(var10,0);{float var13 = Preconditions.checkArgumentNonNegative(var10,0);};
    int var15 = UserHandle.getCallingUserId();
    Context var16 = this.mContext;
    ArrayMap var31 = this.mPackages;
    Settings var32 = this.mSettings;
    ArrayMap var33 = var32.mPackages;
    Object var35 = var33.get(param2);
    PackageSetting var36 = (PackageSetting) var35;
    PackageParser$Package var37 = var36.pkg;
    Context var38 = this.mContext;
    Settings var44 = this.mSettings;
    ArrayMap var45 = var44.mPackages;
    String var46 = var36.installerPackageName;
    Object var48 = var45.get(var46);
    PackageSetting var49 = (PackageSetting) var48;
    int var50 = var49.appId;
    int var52 = Binder.getCallingUid();
    boolean var54 = UserHandle.isSameApp(var50,var52);
    var63 = param3 and 1;
    var68 = param3 and 6;
    int var73 = Binder.getCallingUid();
    int var75 = UserHandle.getCallingUserId();
    boolean var77 = filterAppAccessLPr(var36,var73,var75);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    var52 = var51 xor 1;
    boolean var52<PATH_SEP>Object var7 = Preconditions.checkNotNull(param3);{Object var7 = Preconditions.checkNotNull(param3);};
    List var12 = getWhitelistedRestrictedPermissions(param2,param4,param5);
    Object var6 = Preconditions.checkNotNull(param2);{Object var6 = Preconditions.checkNotNull(param2);};
    int var9 = Preconditions.checkFlagsArgument(param3,7);{int var9 = Preconditions.checkFlagsArgument(param3,7);};
    10 = conversion(F) 4;
    float var13 = Preconditions.checkArgumentNonNegative(var10,0);{float var13 = Preconditions.checkArgumentNonNegative(var10,0);};
    int var15 = UserHandle.getCallingUserId();
    Context var16 = this.mContext;
    ArrayMap var31 = this.mPackages;
    Settings var32 = this.mSettings;
    ArrayMap var33 = var32.mPackages;
    Object var35 = var33.get(param2);
    PackageSetting var36 = (PackageSetting) var35;
    PackageParser$Package var37 = var36.pkg;
    Context var38 = this.mContext;
    Settings var44 = this.mSettings;
    ArrayMap var45 = var44.mPackages;
    String var46 = var36.installerPackageName;
    Object var48 = var45.get(var46);
    PackageSetting var49 = (PackageSetting) var48;
    int var50 = var49.appId;
    int var52 = Binder.getCallingUid();
    boolean var54 = UserHandle.isSameApp(var50,var52);
    var63 = param3 and 1;
    var68 = param3 and 6;
    int var73 = Binder.getCallingUid();
    int var75 = UserHandle.getCallingUserId();
    boolean var77 = filterAppAccessLPr(var36,var73,var75);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    boolean 1<PATH_SEP>Object var7 = Preconditions.checkNotNull(param3);{Object var7 = Preconditions.checkNotNull(param3);};
    List var12 = getWhitelistedRestrictedPermissions(param2,param4,param5);
    Object var6 = Preconditions.checkNotNull(param2);{Object var6 = Preconditions.checkNotNull(param2);};
    int var9 = Preconditions.checkFlagsArgument(param3,7);{int var9 = Preconditions.checkFlagsArgument(param3,7);};
    10 = conversion(F) 4;
    float var13 = Preconditions.checkArgumentNonNegative(var10,0);{float var13 = Preconditions.checkArgumentNonNegative(var10,0);};
    int var15 = UserHandle.getCallingUserId();
    Context var16 = this.mContext;
    ArrayMap var31 = this.mPackages;
    Settings var32 = this.mSettings;
    ArrayMap var33 = var32.mPackages;
    Object var35 = var33.get(param2);
    PackageSetting var36 = (PackageSetting) var35;
    PackageParser$Package var37 = var36.pkg;
    Context var38 = this.mContext;
    Settings var44 = this.mSettings;
    ArrayMap var45 = var44.mPackages;
    String var46 = var36.installerPackageName;
    Object var48 = var45.get(var46);
    PackageSetting var49 = (PackageSetting) var48;
    int var50 = var49.appId;
    int var52 = Binder.getCallingUid();
    boolean var54 = UserHandle.isSameApp(var50,var52);
    var63 = param3 and 1;
    var68 = param3 and 6;
    int var73 = Binder.getCallingUid();
    int var75 = UserHandle.getCallingUserId();
    boolean var77 = filterAppAccessLPr(var36,var73,var75);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    var52 = var51 xor 1;
    boolean var52<PATH_SEP>Object var7 = Preconditions.checkNotNull(param3);{Object var7 = Preconditions.checkNotNull(param3);};
    List var12 = getWhitelistedRestrictedPermissions(param2,param4,param5);
    Object var6 = Preconditions.checkNotNull(param2);{Object var6 = Preconditions.checkNotNull(param2);};
    int var9 = Preconditions.checkFlagsArgument(param3,7);{int var9 = Preconditions.checkFlagsArgument(param3,7);};
    10 = conversion(F) 4;
    float var13 = Preconditions.checkArgumentNonNegative(var10,0);{float var13 = Preconditions.checkArgumentNonNegative(var10,0);};
    int var15 = UserHandle.getCallingUserId();
    Context var16 = this.mContext;
    ArrayMap var31 = this.mPackages;
    Settings var32 = this.mSettings;
    ArrayMap var33 = var32.mPackages;
    Object var35 = var33.get(param2);
    PackageSetting var36 = (PackageSetting) var35;
    PackageParser$Package var37 = var36.pkg;
    Context var38 = this.mContext;
    Settings var44 = this.mSettings;
    ArrayMap var45 = var44.mPackages;
    String var46 = var36.installerPackageName;
    Object var48 = var45.get(var46);
    PackageSetting var49 = (PackageSetting) var48;
    int var50 = var49.appId;
    int var52 = Binder.getCallingUid();
    boolean var54 = UserHandle.isSameApp(var50,var52);
    var63 = param3 and 1;
    var68 = param3 and 6;
    int var73 = Binder.getCallingUid();
    int var75 = UserHandle.getCallingUserId();
    boolean var77 = filterAppAccessLPr(var36,var73,var75);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var25 = getInstantApp(param6);
    boolean var27 = canViewInstantApps(var14,param6);
    boolean 0;
}