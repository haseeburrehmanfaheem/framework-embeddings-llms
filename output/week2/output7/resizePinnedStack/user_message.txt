// API: resizePinnedStack
// Service: ActivityTaskManagerService_3

public void resizePinnedStack() {
    long var8 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var9 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStackSupervisor var11 = this.mStackSupervisor;
    var11.resizePinnedStackLocked(param2,param3);
    RootActivityContainer var4 = this.mRootActivityContainer;
    ActivityDisplay var6 = var4.getDefaultDisplay();
    ActivityStack var8 = var6.getPinnedStack();
    TaskStack var11 = var8.getTaskStack();
    boolean var13 = var11.pinnedStackResizeDisallowed();
    Trace.traceBegin(64,am.resizePinnedStack);
    WindowManagerService var17 = this.mWindowManager;
    var17.deferSurfaceLayout();
    ActivityRecord var20 = var8.topRunningActivityLocked();
    boolean var22 = var8.isAnimatingBoundsToFullscreen();
    Rect var23 = this.tempRect;
    var23.top = 0;
    var23.left = 0;
    int var25 = width();
    var23.right = var25;
    int var27 = height();
    var23.bottom = var27;
    var8.onPipAnimationEndResize();
    var8.resize(param2,param3,var28);
    boolean var6 = updateBoundsAllowed(param2);
    ArrayList var9 = this.mTaskHistory;
    int var11 = var9.size();
    var13 = var11 add -1;
    ArrayList var14 = this.mTaskHistory;
    Object var16 = var14.get(var25);
    TaskRecord var17 = (TaskRecord) var16;
    boolean var19 = var17.isResizeable();
    boolean var4 = isResizeable(1);
    boolean var4<PATH_SEP>long var8 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var9 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStackSupervisor var11 = this.mStackSupervisor;
    var11.resizePinnedStackLocked(param2,param3);
    RootActivityContainer var4 = this.mRootActivityContainer;
    ActivityDisplay var6 = var4.getDefaultDisplay();
    ActivityStack var8 = var6.getPinnedStack();
    TaskStack var11 = var8.getTaskStack();
    boolean var13 = var11.pinnedStackResizeDisallowed();
    Trace.traceBegin(64,am.resizePinnedStack);
    WindowManagerService var17 = this.mWindowManager;
    var17.deferSurfaceLayout();
    ActivityRecord var20 = var8.topRunningActivityLocked();
    boolean var22 = var8.isAnimatingBoundsToFullscreen();
    Rect var23 = this.tempRect;
    var23.top = 0;
    var23.left = 0;
    int var25 = width();
    var23.right = var25;
    int var27 = height();
    var23.bottom = var27;
    var8.onPipAnimationEndResize();
    TaskStack var2 = this.mTaskStack;
    var2.onPipAnimationEndResize();
    WindowManagerService var2 = this.mWmService;
    WindowManagerGlobalLock var3 = var2.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    this.mBoundsAnimating = 0;
    WindowList var6 = this.mChildren;
    int var8 = var6.size();
    WindowManagerService var18 = this.mWmService;
    var18.requestTraversal();
    WindowManagerService.resetPriorityAfterLockedSection();<PATH_SEP>long var8 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var9 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStackSupervisor var11 = this.mStackSupervisor;
    var11.resizePinnedStackLocked(param2,param3);
    RootActivityContainer var4 = this.mRootActivityContainer;
    ActivityDisplay var6 = var4.getDefaultDisplay();
    ActivityStack var8 = var6.getPinnedStack();
    TaskStack var11 = var8.getTaskStack();
    boolean var13 = var11.pinnedStackResizeDisallowed();
    Trace.traceBegin(64,am.resizePinnedStack);
    WindowManagerService var17 = this.mWindowManager;
    var17.deferSurfaceLayout();
    ActivityRecord var20 = var8.topRunningActivityLocked();
    boolean var22 = var8.isAnimatingBoundsToFullscreen();
    Rect var23 = this.tempRect;
    var23.top = 0;
    var23.left = 0;
    int var25 = width();
    var23.right = var25;
    int var27 = height();
    var23.bottom = var27;
    var8.onPipAnimationEndResize();
    var8.resize(param2,param3,var28);
    boolean var6 = updateBoundsAllowed(param2);
    ArrayList var9 = this.mTaskHistory;
    int var11 = var9.size();
    var13 = var11 add -1;
    ArrayList var14 = this.mTaskHistory;
    Object var16 = var14.get(var25);
    TaskRecord var17 = (TaskRecord) var16;
    boolean var19 = var17.isResizeable();
    boolean var21 = var17.updateOverrideConfiguration(var8,param4);
    boolean var7 = isEmpty();
    setDisplayedBounds(param2);
    boolean var14 = equivalentRequestedOverrideBounds(var12);
    Configuration var15 = this.mTmpConfig;
    Configuration var17 = getResolvedOverrideConfiguration();
    var15.setTo(var17);
    int var20 = setBounds(var12);<PATH_SEP>long var8 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var9 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStackSupervisor var11 = this.mStackSupervisor;
    var11.resizePinnedStackLocked(param2,param3);
    RootActivityContainer var4 = this.mRootActivityContainer;
    ActivityDisplay var6 = var4.getDefaultDisplay();
    ActivityStack var8 = var6.getPinnedStack();
    TaskStack var11 = var8.getTaskStack();
    boolean var13 = var11.pinnedStackResizeDisallowed();
    Trace.traceBegin(64,am.resizePinnedStack);
    WindowManagerService var17 = this.mWindowManager;
    var17.deferSurfaceLayout();
    ActivityRecord var20 = var8.topRunningActivityLocked();
    boolean var22 = var8.isAnimatingBoundsToFullscreen();
    Rect var23 = this.tempRect;
    var23.top = 0;
    var23.left = 0;
    int var25 = width();
    var23.right = var25;
    int var27 = height();
    var23.bottom = var27;
    var8.onPipAnimationEndResize();
    var8.resize(param2,param3,var28);
    boolean var6 = updateBoundsAllowed(param2);
    ArrayList var9 = this.mTaskHistory;
    int var11 = var9.size();
    var13 = var11 add -1;
    ArrayList var14 = this.mTaskHistory;
    Object var16 = var14.get(var25);
    TaskRecord var17 = (TaskRecord) var16;
    boolean var19 = var17.isResizeable();
    boolean var21 = var17.updateOverrideConfiguration(var8,param4);
    setDisplayedBounds(param2);
    boolean var14 = equivalentRequestedOverrideBounds(var12);
    Configuration var15 = this.mTmpConfig;
    Configuration var17 = getResolvedOverrideConfiguration();
    var15.setTo(var17);
    int var20 = setBounds(var12);
    Configuration var21 = this.mTmpConfig;
    Configuration var23 = getResolvedOverrideConfiguration();
    boolean var25 = var21.equals(var23);
    var26 = 1 xor var25;
    boolean var26;
}