// API: removeSystemPowerWhitelistApp
// Service: DeviceIdleController$BinderService_2

public void removeSystemPowerWhitelistApp() {
    DeviceIdleController var3 = this.this$0;
    Context var5 = var3.getContext();
    long var10 = Binder.clearCallingIdentity();
    DeviceIdleController var11 = this.this$0;
    boolean var13 = var11.removeSystemPowerWhitelistAppInternal(param2);
    ArrayMap var3 = this.mPowerSaveWhitelistApps;
    boolean var5 = var3.containsKey(param2);
    ArrayMap var7 = this.mRemovedFromSystemWhitelistApps;
    ArrayMap var8 = this.mPowerSaveWhitelistApps;
    Object var10 = var8.remove(param2);
    Integer var11 = (Integer) var10;
    Object var13 = var7.put(param2,var11);
    reportPowerSaveWhitelistChangedLocked();
    updateWhitelistAppIdsLocked();
    ArrayMap var2 = this.mPowerSaveWhitelistAppsExceptIdle;
    ArrayMap var3 = this.mPowerSaveWhitelistUserApps;
    SparseBooleanArray var4 = this.mPowerSaveWhitelistExceptIdleAppIds;
    [I var6 = DeviceIdleController.buildAppIdArray(var2,var3,var4);
    this.mPowerSaveWhitelistExceptIdleAppIdArray = var6;
    ArrayMap var7 = this.mPowerSaveWhitelistApps;
    ArrayMap var8 = this.mPowerSaveWhitelistUserApps;
    SparseBooleanArray var9 = this.mPowerSaveWhitelistAllAppIds;
    [I var11 = DeviceIdleController.buildAppIdArray(var7,var8,var9);
    this.mPowerSaveWhitelistAllAppIdArray = var11;
    ArrayMap var12 = this.mPowerSaveWhitelistUserApps;
    SparseBooleanArray var13 = this.mPowerSaveWhitelistUserAppIds;
    [I var16 = DeviceIdleController.buildAppIdArray(0,var12,var13);
    this.mPowerSaveWhitelistUserAppIdArray = var16;
    ActivityManagerInternal var17 = this.mLocalActivityManager;
    [I var18 = this.mPowerSaveWhitelistAllAppIdArray;
    [I var19 = this.mPowerSaveWhitelistExceptIdleAppIdArray;
    var17.setDeviceIdleWhitelist(var18,var19);
    PowerManagerInternal var24 = this.mLocalPowerManager;
    [I var25 = this.mPowerSaveWhitelistAllAppIdArray;
    var24.setDeviceIdleWhitelist(var25);
    passWhiteListsToForceAppStandbyTrackerLocked();
    AppStateTracker var2 = this.mAppStateTracker;
    [I var3 = this.mPowerSaveWhitelistExceptIdleAppIdArray;
    [I var4 = this.mPowerSaveWhitelistUserAppIdArray;
    [I var5 = this.mTempWhitelistAppIdArray;
    var2.setPowerSaveWhitelistAppIds(var3,var4,var5);<PATH_SEP>DeviceIdleController var3 = this.this$0;
    Context var5 = var3.getContext();
    long var10 = Binder.clearCallingIdentity();
    DeviceIdleController var11 = this.this$0;
    boolean var13 = var11.removeSystemPowerWhitelistAppInternal(param2);
    Binder.restoreCallingIdentity(var10);<PATH_SEP>DeviceIdleController var3 = this.this$0;
    Context var5 = var3.getContext();
    long var10 = Binder.clearCallingIdentity();
    DeviceIdleController var11 = this.this$0;
    boolean var13 = var11.removeSystemPowerWhitelistAppInternal(param2);
    ArrayMap var3 = this.mPowerSaveWhitelistApps;
    boolean var5 = var3.containsKey(param2);
    ArrayMap var7 = this.mRemovedFromSystemWhitelistApps;
    ArrayMap var8 = this.mPowerSaveWhitelistApps;
    Object var10 = var8.remove(param2);
    Integer var11 = (Integer) var10;
    Object var13 = var7.put(param2,var11);
    reportPowerSaveWhitelistChangedLocked();
    updateWhitelistAppIdsLocked();
    ArrayMap var2 = this.mPowerSaveWhitelistAppsExceptIdle;
    ArrayMap var3 = this.mPowerSaveWhitelistUserApps;
    SparseBooleanArray var4 = this.mPowerSaveWhitelistExceptIdleAppIds;
    [I var6 = DeviceIdleController.buildAppIdArray(var2,var3,var4);
    clear();
    int var8 = size();
    int var21 = size();
    Object var23 = valueAt(var29);
    Integer var24 = (Integer) var23;
    int var26 = var24.intValue();
    put(var26,1);<PATH_SEP>DeviceIdleController var3 = this.this$0;
    Context var5 = var3.getContext();
    long var10 = Binder.clearCallingIdentity();
    DeviceIdleController var11 = this.this$0;
    boolean var13 = var11.removeSystemPowerWhitelistAppInternal(param2);
    ArrayMap var3 = this.mPowerSaveWhitelistApps;
    boolean var5 = var3.containsKey(param2);
    ArrayMap var7 = this.mRemovedFromSystemWhitelistApps;
    ArrayMap var8 = this.mPowerSaveWhitelistApps;
    Object var10 = var8.remove(param2);
    Integer var11 = (Integer) var10;
    Object var13 = var7.put(param2,var11);
    reportPowerSaveWhitelistChangedLocked();
    updateWhitelistAppIdsLocked();
    ArrayMap var2 = this.mPowerSaveWhitelistAppsExceptIdle;
    ArrayMap var3 = this.mPowerSaveWhitelistUserApps;
    SparseBooleanArray var4 = this.mPowerSaveWhitelistExceptIdleAppIds;
    [I var6 = DeviceIdleController.buildAppIdArray(var2,var3,var4);
    this.mPowerSaveWhitelistExceptIdleAppIdArray = var6;
    ArrayMap var7 = this.mPowerSaveWhitelistApps;
    ArrayMap var8 = this.mPowerSaveWhitelistUserApps;
    SparseBooleanArray var9 = this.mPowerSaveWhitelistAllAppIds;
    [I var11 = DeviceIdleController.buildAppIdArray(var7,var8,var9);
    this.mPowerSaveWhitelistAllAppIdArray = var11;
    ArrayMap var12 = this.mPowerSaveWhitelistUserApps;
    SparseBooleanArray var13 = this.mPowerSaveWhitelistUserAppIds;
    [I var16 = DeviceIdleController.buildAppIdArray(0,var12,var13);
    this.mPowerSaveWhitelistUserAppIdArray = var16;
    ActivityManagerInternal var17 = this.mLocalActivityManager;
    [I var18 = this.mPowerSaveWhitelistAllAppIdArray;
    [I var19 = this.mPowerSaveWhitelistExceptIdleAppIdArray;
    var17.setDeviceIdleWhitelist(var18,var19);
    PowerManagerInternal var24 = this.mLocalPowerManager;
    [I var25 = this.mPowerSaveWhitelistAllAppIdArray;
    var24.setDeviceIdleWhitelist(var25);
    passWhiteListsToForceAppStandbyTrackerLocked();
}