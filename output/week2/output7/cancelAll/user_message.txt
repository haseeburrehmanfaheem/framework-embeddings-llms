// API: cancelAll
// Service: JobSchedulerService$JobSchedulerStub_1

public void cancelAll() {
    int var3 = Binder.getCallingUid();
    long var5 = Binder.clearCallingIdentity();
    JobSchedulerService var6 = this.this$0;
    boolean var17 = var6.cancelJobsForUid(var3,var15);
    Object var6 = this.mLock;
    JobStore var7 = this.mJobs;
    List var9 = var7.getJobsByUid(param2);
    int var11 = var9.size();
    Object var13 = var9.get(var19);
    JobStatus var14 = (JobStatus) var13;
    cancelJobImplLocked(var14,0,param3);
    boolean var5 = DEBUG;
    String var14 = toShortString();
    IActivityManager var23 = ActivityManager.getService();
    unprepareLocked(var23);
    boolean var27 = stopTrackingJobLocked(param2,param3,1);
    ArrayList var28 = this.mPendingJobs;
    boolean var30 = var28.remove(param2);
    JobPackageTracker var31 = this.mJobPackageTracker;
    var31.noteNonpending(param2);{var31.noteNonpending(param2);};
    boolean var36 = stopJobOnServiceContextLocked(param2,0,param4);
    boolean var37 = DEBUG;
    String var44 = toShortString();
    startTrackingJobLocked(param3,param2);
    reportActiveLocked();
    ArrayList var2 = this.mPendingJobs;
    int var4 = var2.size();
    ArrayList var8 = this.mPendingJobs;
    int var10 = var8.size();
    List var11 = this.mActiveServices;
    int var13 = var11.size();
    List var14 = this.mActiveServices;
    Object var16 = var14.get(var32);
    JobServiceContext var17 = (JobServiceContext) var16;
    JobStatus var19 = var17.getRunningJobLocked();
    JobInfo var21 = var19.getJob();
    int var23 = var21.getFlags();
    var24 = var23 and 1;
    boolean var25 = var19.dozeWhitelisted;
    boolean var26 = var19.uidActive;
    boolean var41 = this.mReportedActive;
    this.mReportedActive = var35;
    DeviceIdleController$LocalService var42 = this.mLocalDeviceIdleController;
    var42.setJobsActive(var35);
}