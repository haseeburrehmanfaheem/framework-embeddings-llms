// API: getMultipathPreference
// Service: ConnectivityService_2

public void getMultipathPreference() {
    NetworkAgentInfo var5 = getNetworkAgentInfoForNetwork(param2);
    NetworkCapabilities var7 = var5.networkCapabilities;
    boolean var10 = var7.hasCapability(11);
    int 7<PATH_SEP>NetworkAgentInfo var5 = getNetworkAgentInfoForNetwork(param2);
    NetworkCapabilities var7 = var5.networkCapabilities;
    boolean var10 = var7.hasCapability(11);
    MultipathPolicyTracker var13 = this.mMultipathPolicyTracker;
    Integer var15 = var13.getMultipathPreference(param2);
    ConcurrentHashMap var4 = this.mMultipathTrackers;
    Object var6 = var4.get(param2);
    MultipathPolicyTracker$MultipathTracker var7 = (MultipathPolicyTracker$MultipathTracker) var6;
    int var9 = var7.getMultipathPreference();
    boolean var3 = haveMultipathBudget();
    int 0<PATH_SEP>NetworkAgentInfo var5 = getNetworkAgentInfoForNetwork(param2);
    NetworkCapabilities var7 = var5.networkCapabilities;
    boolean var10 = var7.hasCapability(11);
    MultipathPolicyTracker var13 = this.mMultipathPolicyTracker;
    Integer var15 = var13.getMultipathPreference(param2);
    ConcurrentHashMap var4 = this.mMultipathTrackers;
    Object var6 = var4.get(param2);
    MultipathPolicyTracker$MultipathTracker var7 = (MultipathPolicyTracker$MultipathTracker) var6;
    int var9 = var7.getMultipathPreference();
    boolean var3 = haveMultipathBudget();
    int 3<PATH_SEP>NetworkAgentInfo var5 = getNetworkAgentInfoForNetwork(param2);
    NetworkCapabilities var7 = var5.networkCapabilities;
    boolean var10 = var7.hasCapability(11);
    MultipathPolicyTracker var13 = this.mMultipathPolicyTracker;
    Integer var15 = var13.getMultipathPreference(param2);
    ConcurrentHashMap var4 = this.mMultipathTrackers;
    Object var6 = var4.get(param2);
    MultipathPolicyTracker$MultipathTracker var7 = (MultipathPolicyTracker$MultipathTracker) var6;
    Ljava/lang/Integer 0;
}