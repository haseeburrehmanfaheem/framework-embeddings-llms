// API: setUsbTethering
// Service: ConnectivityService_3

public void setUsbTethering() {
    Context var4 = this.mContext;
    boolean var7 = isTetheringSupported();
    Tethering var10 = this.mTethering;
    int var12 = var10.setUsbTethering(param2);
    Context var3 = this.mContext;
    Object var6 = var3.getSystemService(usb);
    UsbManager var7 = (UsbManager) var6;
    Object var9 = this.mPublicSync;
    var7.setCurrentFunctions(var12);
    IUsbManager var3 = this.mService;
    var3.setCurrentFunctions(param2);<PATH_SEP>Context var4 = this.mContext;
    boolean var7 = isTetheringSupported();
    MockableSystemProperties var2 = this.mSystemProperties;
    String var5 = var2.get(ro.tether.denied);
    boolean var8 = var5.equals(true);
    var10 = var8 xor 1;
    int var12 = ConnectivityService.encodeBool(var10);
    Context var13 = this.mContext;
    ContentResolver var15 = var13.getContentResolver();
    int var18 = Settings$Global.getInt(var15,tether_supported,var12);
    boolean var20 = ConnectivityService.toBool(var18);
    UserManager var22 = this.mUserManager;
    boolean var25 = var22.hasUserRestriction(no_config_tethering);
    long var32 = Binder.clearCallingIdentity();
    UserManager var33 = this.mUserManager;
    boolean var35 = var33.isAdminUser();
    Binder.restoreCallingIdentity(var32);
    Tethering var41 = this.mTethering;
    boolean var43 = var41.hasTetherableConfiguration();
    TetheringConfiguration var2 = this.mConfig;
    String var3 = var2.tetherableUsbRegexs;
    4 = arraylength 3;
    String var7 = var2.tetherableWifiRegexs;
    8 = arraylength 7;
    String var9 = var2.tetherableBluetoothRegexs;
    10 = arraylength 9;
    Collection var13 = var2.preferredUpstreamIfaceTypes;
    boolean var15 = var13.isEmpty();
    boolean var19<PATH_SEP>Context var4 = this.mContext;
    boolean var7 = isTetheringSupported();
    MockableSystemProperties var2 = this.mSystemProperties;
    String var5 = var2.get(ro.tether.denied);
    boolean var8 = var5.equals(true);
    var10 = var8 xor 1;
    int var12 = ConnectivityService.encodeBool(var10);
    Context var13 = this.mContext;
    ContentResolver var15 = var13.getContentResolver();
    int var18 = Settings$Global.getInt(var15,tether_supported,var12);
    boolean var20 = ConnectivityService.toBool(var18);
    UserManager var22 = this.mUserManager;
    boolean var25 = var22.hasUserRestriction(no_config_tethering);
    long var32 = Binder.clearCallingIdentity();
    UserManager var33 = this.mUserManager;
    boolean var35 = var33.isAdminUser();
    Binder.restoreCallingIdentity(var32);
    Tethering var41 = this.mTethering;
    boolean var43 = var41.hasTetherableConfiguration();
    TetheringConfiguration var2 = this.mConfig;
    String var3 = var2.tetherableUsbRegexs;
    4 = arraylength 3;
    String var7 = var2.tetherableWifiRegexs;
    8 = arraylength 7;
    Collection var13 = var2.preferredUpstreamIfaceTypes;
    boolean var15 = var13.isEmpty();
    boolean var19<PATH_SEP>Context var4 = this.mContext;
    boolean var7 = isTetheringSupported();
    Tethering var10 = this.mTethering;
    int var12 = var10.setUsbTethering(param2);
    Context var3 = this.mContext;
    Object var6 = var3.getSystemService(usb);
    UsbManager var7 = (UsbManager) var6;
    Object var9 = this.mPublicSync;
    var7.setCurrentFunctions(var12);
    IUsbManager var3 = this.mService;
    var3.setCurrentFunctions(param2);
    Context var3 = this.mContext;
    boolean var8 = UsbManager.areSettableFunctions(param2);
    Preconditions.checkArgument(var8);{Preconditions.checkArgument(var8);};
    UsbDeviceManager var10 = this.mDeviceManager;
    Preconditions.checkState(var12);{Preconditions.checkState(var12);};
    UsbDeviceManager var14 = this.mDeviceManager;
    var14.setCurrentFunctions(param2);
}