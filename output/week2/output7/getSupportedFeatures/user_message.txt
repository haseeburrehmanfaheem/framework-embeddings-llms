// API: getSupportedFeatures
// Service: WifiServiceImpl_1

public void getSupportedFeatures() {
    boolean var3 = this.mVerboseLoggingEnabled;
    int var10 = Binder.getCallingUid();
    11 = conversion(J) 10;
    long var18 = getSupportedFeaturesInternal();
    AsyncChannel var2 = this.mClientModeImplChannel;
    ClientModeImpl var9 = this.mClientModeImpl;
    long var11 = var9.syncGetSupportedFeatures(var2);
    Message var5 = sendMessageSynchronously(131133);
    Message var4 = Message.obtain();
    var4.what = param2;
    Message var6 = sendMessageSynchronously(var4);<PATH_SEP>boolean var3 = this.mVerboseLoggingEnabled;
    int var10 = Binder.getCallingUid();
    11 = conversion(J) 10;
    long var18 = getSupportedFeaturesInternal();
    AsyncChannel var2 = this.mClientModeImplChannel;
    ClientModeImpl var9 = this.mClientModeImpl;
    long var11 = var9.syncGetSupportedFeatures(var2);
    Message var5 = sendMessageSynchronously(131133);
    boolean var7 = messageIsNull(var5);
    AtomicInteger var4 = this.mNullMessageCounter;
    int var6 = var4.getAndIncrement();
    boolean 1<PATH_SEP>boolean var3 = this.mVerboseLoggingEnabled;
    int var10 = Binder.getCallingUid();
    11 = conversion(J) 10;
    long var18 = getSupportedFeaturesInternal();
    AsyncChannel var2 = this.mClientModeImplChannel;
    ClientModeImpl var9 = this.mClientModeImpl;
    long var11 = var9.syncGetSupportedFeatures(var2);
    Message var5 = sendMessageSynchronously(131133);
    boolean var7 = messageIsNull(var5);
    Object var9 = var5.obj;
    Long var10 = (Long) var9;
    long var12 = var10.longValue();
    var5.recycle();<PATH_SEP>boolean var3 = this.mVerboseLoggingEnabled;
    int var10 = Binder.getCallingUid();
    11 = conversion(J) 10;
    long var18 = getSupportedFeaturesInternal();
    AsyncChannel var2 = this.mClientModeImplChannel;
    ClientModeImpl var9 = this.mClientModeImpl;
    long var11 = var9.syncGetSupportedFeatures(var2);
    Message var5 = sendMessageSynchronously(131133);
    boolean var7 = messageIsNull(var5);
    AtomicInteger var4 = this.mNullMessageCounter;
    int var6 = var4.getAndIncrement();
    RuntimeException var7 = new RuntimeException();
    boolean 1;
}