// API: offsetHistory
// Service: AppOpsService_2

public void offsetHistory() {
    Context var3 = this.mContext;
    HistoricalRegistry var7 = this.mHistoricalRegistry;
    var7.offsetHistory(param2);
    Object var3 = this.mOnDiskLock;
    Object var4 = this.mInMemoryLock;
    boolean var6 = isPersistenceInitializedMLocked();
    HistoricalRegistry$Persistence var8 = this.mPersistence;
    List var10 = var8.readHistoryDLocked();
    clearHistory();
    int var13 = var10.size();
    var24 = param2 lt 0;
    pruneFutureOps(var10);
    HistoricalRegistry$Persistence var27 = this.mPersistence;
    var27.persistHistoricalOpsDLocked(var10);
    AtomicDirectory var3 = sHistoricalAppOpsDir;
    File var5 = var3.startWrite();
    AtomicDirectory var6 = sHistoricalAppOpsDir;
    File var8 = var6.getBackupDirectory();
    Set var10 = HistoricalRegistry$Persistence.getHistoricalFileNames(var8);
    handlePersistHistoricalOpsRecursiveDLocked(var5,var8,param2,var10,0);
    long var7 = this.mIntervalCompressionMultiplier;
    8 = conversion(D) 7;
    9 = conversion(D) 6;
    double var11 = Math.pow(var8,var9);
    12 = conversion(J) 11;
    long var13 = this.mBaseSnapshotInterval;
    var14 = var12 mul var13;
    long var15 = this.mIntervalCompressionMultiplier;
    16 = conversion(D) 15;
    var18 = param6 add 1;
    19 = conversion(D) 18;
    double var21 = Math.pow(var16,var19);
    22 = conversion(J) 21;
    long var23 = this.mBaseSnapshotInterval;
    var24 = var22 mul var23;
    boolean var27 = isEmpty();
    int var29 = size();
    List var46 = readHistoricalOpsLocked(param3,var14,var24,-1,0,0,0,9223372036854775807,31,0,param6,0);
    int var48 = var46.size();
    int var50 = size();
    var52 = var50 add -1;
    Object var54 = get(var52);
    AppOpsManager$HistoricalOps var55 = (AppOpsManager$HistoricalOps) var54;
    long var57 = var55.getEndTimeMillis();
    LinkedList var74 = new LinkedList();
    boolean var77 = var74.addAll(var46);
    int var81 = var74.size();
    Object var83 = var74.get(var139);
    AppOpsManager$HistoricalOps var84 = (AppOpsManager$HistoricalOps) var83;
    long var86 = var84.getEndTimeMillis();
    var87 = var86 lt var24;
    long var89 = var84.getBeginTimeMillis();
    var90 = var89 lt var24;
    long var92 = var84.getEndTimeMillis();
    var93 = var92 sub var24;
    var94 = var93 lt var14;
    95 = conversion(D) 93;
    long var97 = var84.getDurationMillis();
    98 = conversion(D) 97;
    var99 = var95 div var98;
    AppOpsManager$HistoricalOps var101 = HistoricalRegistry$Persistence.spliceFromEnd(var84,var99);
    long var103 = var84.getEndTimeMillis();
    var104 = var103 sub var24;
    ArrayList var112 = new ArrayList();
    boolean var118 = var115.add(var105);
    ArrayList var123 = new ArrayList();
    boolean var129 = var126.add(var106);<PATH_SEP>Context var3 = this.mContext;
    HistoricalRegistry var7 = this.mHistoricalRegistry;
    var7.offsetHistory(param2);
    Object var3 = this.mOnDiskLock;
    Object var4 = this.mInMemoryLock;
    boolean var6 = isPersistenceInitializedMLocked();
    HistoricalRegistry$Persistence var8 = this.mPersistence;
    List var10 = var8.readHistoryDLocked();
    clearHistory();
    int var13 = var10.size();
    var24 = param2 lt 0;
    pruneFutureOps(var10);
    HistoricalRegistry$Persistence var27 = this.mPersistence;
    var27.persistHistoricalOpsDLocked(var10);
    AtomicDirectory var3 = sHistoricalAppOpsDir;
    File var5 = var3.startWrite();
    AtomicDirectory var6 = sHistoricalAppOpsDir;
    File var8 = var6.getBackupDirectory();
    Set var10 = HistoricalRegistry$Persistence.getHistoricalFileNames(var8);
    handlePersistHistoricalOpsRecursiveDLocked(var5,var8,param2,var10,0);
    long var7 = this.mIntervalCompressionMultiplier;
    8 = conversion(D) 7;
    9 = conversion(D) 6;
    double var11 = Math.pow(var8,var9);
    12 = conversion(J) 11;
    long var13 = this.mBaseSnapshotInterval;
    var14 = var12 mul var13;
    long var15 = this.mIntervalCompressionMultiplier;
    16 = conversion(D) 15;
    var18 = param6 add 1;
    19 = conversion(D) 18;
    double var21 = Math.pow(var16,var19);
    22 = conversion(J) 21;
    long var23 = this.mBaseSnapshotInterval;
    var24 = var22 mul var23;
    boolean var27 = isEmpty();
    int var29 = size();
    List var46 = readHistoricalOpsLocked(param3,var14,var24,-1,0,0,0,9223372036854775807,31,0,param6,0);
    int var48 = var46.size();
    int var50 = size();
    var52 = var50 add -1;
    Object var54 = get(var52);
    AppOpsManager$HistoricalOps var55 = (AppOpsManager$HistoricalOps) var54;
    long var57 = var55.getEndTimeMillis();
    LinkedList var74 = new LinkedList();
    boolean var77 = var74.addAll(var46);
    int var81 = var74.size();
    Object var83 = var74.get(var139);
    AppOpsManager$HistoricalOps var84 = (AppOpsManager$HistoricalOps) var83;
    long var86 = var84.getEndTimeMillis();
    var87 = var86 lt var24;
    long var89 = var84.getBeginTimeMillis();
    var90 = var89 lt var24;
    long var92 = var84.getEndTimeMillis();
    var93 = var92 sub var24;
    var94 = var93 lt var14;
    ArrayList var123 = new ArrayList();
    boolean var129 = var126.add(var106);<PATH_SEP>Context var3 = this.mContext;
    HistoricalRegistry var7 = this.mHistoricalRegistry;
    var7.offsetHistory(param2);
    Object var3 = this.mOnDiskLock;
    Object var4 = this.mInMemoryLock;
    boolean var6 = isPersistenceInitializedMLocked();
    HistoricalRegistry$Persistence var8 = this.mPersistence;
    List var10 = var8.readHistoryDLocked();
    clearHistory();
    int var13 = var10.size();
    var24 = param2 lt 0;
    pruneFutureOps(var10);
    HistoricalRegistry$Persistence var27 = this.mPersistence;
    var27.persistHistoricalOpsDLocked(var10);
    AtomicDirectory var3 = sHistoricalAppOpsDir;
    File var5 = var3.startWrite();
    AtomicDirectory var6 = sHistoricalAppOpsDir;
    File var8 = var6.getBackupDirectory();
    Set var10 = HistoricalRegistry$Persistence.getHistoricalFileNames(var8);
    handlePersistHistoricalOpsRecursiveDLocked(var5,var8,param2,var10,0);
    long var7 = this.mIntervalCompressionMultiplier;
    8 = conversion(D) 7;
    9 = conversion(D) 6;
    double var11 = Math.pow(var8,var9);
    12 = conversion(J) 11;
    long var13 = this.mBaseSnapshotInterval;
    var14 = var12 mul var13;
    long var15 = this.mIntervalCompressionMultiplier;
    16 = conversion(D) 15;
    var18 = param6 add 1;
    19 = conversion(D) 18;
    double var21 = Math.pow(var16,var19);
    22 = conversion(J) 21;
    long var23 = this.mBaseSnapshotInterval;
    var24 = var22 mul var23;
    boolean var27 = isEmpty();
    int var29 = size();
    List var46 = readHistoricalOpsLocked(param3,var14,var24,-1,0,0,0,9223372036854775807,31,0,param6,0);
    int var48 = var46.size();
    int var50 = size();
    var52 = var50 add -1;
    Object var54 = get(var52);
    AppOpsManager$HistoricalOps var55 = (AppOpsManager$HistoricalOps) var54;
    long var57 = var55.getEndTimeMillis();
    LinkedList var74 = new LinkedList();
    boolean var77 = var74.addAll(var46);
    int var81 = var74.size();
    Object var83 = var74.get(var139);
    AppOpsManager$HistoricalOps var84 = (AppOpsManager$HistoricalOps) var83;
    long var86 = var84.getEndTimeMillis();
    var87 = var86 lt var24;
    long var89 = var84.getBeginTimeMillis();
    var90 = var89 lt var24;
    long var92 = var84.getEndTimeMillis();
    var93 = var92 sub var24;
    var94 = var93 lt var14;
    95 = conversion(D) 93;
    long var97 = var84.getDurationMillis();
    98 = conversion(D) 97;
    var99 = var95 div var98;
    AppOpsManager$HistoricalOps var101 = HistoricalRegistry$Persistence.spliceFromEnd(var84,var99);
    long var103 = var84.getEndTimeMillis();
    var104 = var103 sub var24;
    boolean var118 = var115.add(var105);
    boolean var129 = var126.add(var106);<PATH_SEP>Context var3 = this.mContext;
    HistoricalRegistry var7 = this.mHistoricalRegistry;
    var7.offsetHistory(param2);
    Object var3 = this.mOnDiskLock;
    Object var4 = this.mInMemoryLock;
    boolean var6 = isPersistenceInitializedMLocked();
    HistoricalRegistry$Persistence var8 = this.mPersistence;
    List var10 = var8.readHistoryDLocked();
    clearHistory();
    int var13 = var10.size();
    var24 = param2 lt 0;
    pruneFutureOps(var10);
    HistoricalRegistry$Persistence var27 = this.mPersistence;
    var27.persistHistoricalOpsDLocked(var10);
    AtomicDirectory var3 = sHistoricalAppOpsDir;
    File var5 = var3.startWrite();
    AtomicDirectory var6 = sHistoricalAppOpsDir;
    File var8 = var6.getBackupDirectory();
    Set var10 = HistoricalRegistry$Persistence.getHistoricalFileNames(var8);
    handlePersistHistoricalOpsRecursiveDLocked(var5,var8,param2,var10,0);
    long var7 = this.mIntervalCompressionMultiplier;
    8 = conversion(D) 7;
    9 = conversion(D) 6;
    double var11 = Math.pow(var8,var9);
    12 = conversion(J) 11;
    long var13 = this.mBaseSnapshotInterval;
    var14 = var12 mul var13;
    long var15 = this.mIntervalCompressionMultiplier;
    16 = conversion(D) 15;
    var18 = param6 add 1;
    19 = conversion(D) 18;
    double var21 = Math.pow(var16,var19);
    22 = conversion(J) 21;
    long var23 = this.mBaseSnapshotInterval;
    var24 = var22 mul var23;
    boolean var27 = isEmpty();
    int var29 = size();
    List var46 = readHistoricalOpsLocked(param3,var14,var24,-1,0,0,0,9223372036854775807,31,0,param6,0);
    int var48 = var46.size();
    int var50 = size();
    var52 = var50 add -1;
    Object var54 = get(var52);
    AppOpsManager$HistoricalOps var55 = (AppOpsManager$HistoricalOps) var54;
    long var57 = var55.getEndTimeMillis();
    LinkedList var74 = new LinkedList();
    boolean var77 = var74.addAll(var46);
    int var81 = var74.size();
    Object var83 = var74.get(var139);
    AppOpsManager$HistoricalOps var84 = (AppOpsManager$HistoricalOps) var83;
    long var86 = var84.getEndTimeMillis();
    var87 = var86 lt var24;
    boolean var118 = var115.add(var105);
}