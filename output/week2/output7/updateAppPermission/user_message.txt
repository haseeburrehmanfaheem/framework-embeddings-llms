// API: updateAppPermission
// Service: AccountManagerService_5

public void updateAppPermission() {
    int var7 = AccountManagerService.getCallingUid();
    int var9 = UserHandle.getAppId(var7);
    grantAppPermission(param2,param3,param4);
    int var7 = UserHandle.getUserId(param4);
    AccountManagerService$UserAccounts var9 = getUserAccounts(var7);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var7 = AccountManagerService.getCallingUid();
    int var9 = UserHandle.getAppId(var7);
    grantAppPermission(param2,param3,param4);
    int var7 = UserHandle.getUserId(param4);
    AccountManagerService$UserAccounts var9 = getUserAccounts(var7);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var7 = AccountManagerService.getCallingUid();
    int var9 = UserHandle.getAppId(var7);
    grantAppPermission(param2,param3,param4);
    int var7 = UserHandle.getUserId(param4);
    AccountManagerService$UserAccounts var9 = getUserAccounts(var7);
    Object var10 = var9.dbLock;
    Object var11 = var9.cacheLock;
    AccountsDb var12 = var9.accountsDb;
    long var14 = var12.findDeAccountId(param2);
    var16 = var14 lt 0;
    AccountsDb var17 = var9.accountsDb;
    long var19 = var17.insertGrant(var14,param3,param4);
    AccountManagerService$NotificationId var24 = getCredentialPermissionNotificationId(param2,param3,param4);
    int var26 = AccountManagerService$UserAccounts.access$800(var9);{int var26 = AccountManagerService$UserAccounts.access$800(var9);};
    UserHandle var28 = UserHandle.of(var26);
    cancelNotification(var24,var28);
    Context var4 = this.mContext;
    String var6 = var4.getPackageName();
    cancelNotification(param2,var6,param3);
    long var6 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$Injector var7 = this.mInjector;
    INotificationManager var9 = var7.getNotificationManager();
    String var10 = param2.mTag;
    int var12 = AccountManagerService$NotificationId.access$3600(param2);{int var12 = AccountManagerService$NotificationId.access$3600(param2);};
    int var14 = getIdentifier();
    var9.cancelNotificationWithTag(param3,var10,var12,var14);<PATH_SEP>int var7 = AccountManagerService.getCallingUid();
    int var9 = UserHandle.getAppId(var7);
    grantAppPermission(param2,param3,param4);
    int var7 = UserHandle.getUserId(param4);
    AccountManagerService$UserAccounts var9 = getUserAccounts(var7);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}