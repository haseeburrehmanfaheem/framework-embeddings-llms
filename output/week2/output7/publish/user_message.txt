// API: publish
// Service: WifiAwareServiceImpl_5

public void publish() {
    int var9 = getMockableCallingUid();
    AppOpsManager var10 = this.mAppOps;
    int var13 = getMockableCallingUid();
    WifiAwareStateManager var22 = this.mStateManager;
    Characteristics var24 = var22.getCharacteristics();
    Context var25 = this.mContext;
    PackageManager var27 = var25.getPackageManager();
    boolean var30 = var27.hasSystemFeature(android.hardware.wifi.rtt);
    assertValid(var24,var30);{assertValid(var24,var30);};
    enforceClientValidity(var9,param3);{enforceClientValidity(var9,param3);};
    WifiAwareStateManager var33 = this.mStateManager;
    var33.publish(param3,param4,param5);
    WifiAwareStateManager$WifiAwareStateMachine var5 = this.mSm;
    Message var8 = var5.obtainMessage(1);
    var8.arg1 = 103;
    var8.arg2 = param2;
    var8.obj = param4;
    Bundle var11 = var8.getData();
    var11.putParcelable(config,param3);
    WifiAwareStateManager$WifiAwareStateMachine var14 = this.mSm;
    var14.sendMessage(var8);<PATH_SEP>int var9 = getMockableCallingUid();
    AppOpsManager var10 = this.mAppOps;
    int var13 = getMockableCallingUid();
    WifiAwareStateManager var22 = this.mStateManager;
    Characteristics var24 = var22.getCharacteristics();
    Context var25 = this.mContext;
    PackageManager var27 = var25.getPackageManager();
    boolean var30 = var27.hasSystemFeature(android.hardware.wifi.rtt);
    assertValid(var24,var30);{assertValid(var24,var30);};
    enforceClientValidity(var9,param3);{enforceClientValidity(var9,param3);};
    WifiAwareStateManager var33 = this.mStateManager;
    var33.publish(param3,param4,param5);
    WifiAwareStateManager$WifiAwareStateMachine var5 = this.mSm;
    Message var8 = var5.obtainMessage(1);
    var8.arg1 = 103;
    var8.arg2 = param2;
    var8.obj = param4;
    Bundle var11 = var8.getData();
    var11.putParcelable(config,param3);
    WifiAwareStateManager$WifiAwareStateMachine var14 = this.mSm;
    var14.sendMessage(var8);
    StateMachine$SmHandler var3 = this.mSmHandler;
    boolean var6 = var3.sendMessage(param2);<PATH_SEP>int var9 = getMockableCallingUid();
    AppOpsManager var10 = this.mAppOps;
    int var13 = getMockableCallingUid();
    WifiAwareStateManager var22 = this.mStateManager;
    Characteristics var24 = var22.getCharacteristics();
    Context var25 = this.mContext;
    PackageManager var27 = var25.getPackageManager();
    boolean var30 = var27.hasSystemFeature(android.hardware.wifi.rtt);
    assertValid(var24,var30);{assertValid(var24,var30);};
    enforceClientValidity(var9,param3);{enforceClientValidity(var9,param3);};
    WifiAwareStateManager var33 = this.mStateManager;
    var33.publish(param3,param4,param5);
    WifiAwareStateManager$WifiAwareStateMachine var5 = this.mSm;
    Message var8 = var5.obtainMessage(1);
    StateMachine$SmHandler var3 = this.mSmHandler;
    Message var5 = Message.obtain(var3,param2);
    Landroid/os/Message var5<PATH_SEP>int var9 = getMockableCallingUid();
    AppOpsManager var10 = this.mAppOps;
    int var13 = getMockableCallingUid();
    WifiAwareStateManager var22 = this.mStateManager;
    Characteristics var24 = var22.getCharacteristics();
    Context var25 = this.mContext;
    PackageManager var27 = var25.getPackageManager();
    boolean var30 = var27.hasSystemFeature(android.hardware.wifi.rtt);
    assertValid(var24,var30);{assertValid(var24,var30);};
    enforceClientValidity(var9,param3);{enforceClientValidity(var9,param3);};
    WifiAwareStateManager var33 = this.mStateManager;
    var33.publish(param3,param4,param5);
    WifiAwareStateManager$WifiAwareStateMachine var5 = this.mSm;
    Message var8 = var5.obtainMessage(1);
    var8.arg1 = 103;
    var8.arg2 = param2;
    var8.obj = param4;
}