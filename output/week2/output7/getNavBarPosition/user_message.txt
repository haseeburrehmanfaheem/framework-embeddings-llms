// API: getNavBarPosition
// Service: WindowManagerService_2

public void getNavBarPosition() {
    WindowManagerGlobalLock var3 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var5 = this.mRoot;
    DisplayContent var7 = var5.getDisplayContent(param2);
    var7.performLayout(0,0);
    Trace.traceBegin(32,performLayout);
    performLayoutNoTrace(param2,param3);
    boolean var5 = isLayoutNeeded();
    clearLayoutNeeded();
    DisplayInfo var8 = this.mDisplayInfo;
    int var9 = var8.logicalWidth;
    DisplayInfo var10 = this.mDisplayInfo;
    int var11 = var10.logicalHeight;
    DisplayFrames var12 = this.mDisplayFrames;
    DisplayInfo var13 = this.mDisplayInfo;
    int var14 = var13.rotation;
    WmDisplayCutout var16 = calculateDisplayCutoutForRotation(var14);
    var12.onDisplayInfoUpdated(var13,var16);
    DisplayFrames var18 = this.mDisplayFrames;
    int var19 = this.mRotation;
    var18.mRotation = var19;
    DisplayPolicy var20 = this.mDisplayPolicy;
    Configuration var22 = getConfiguration();
    int var23 = var22.uiMode;
    var20.beginLayoutLw(var18,var23);
    onBeginLayout();
    SystemGesturesPointerEventListener var5 = this.mSystemGestures;
    Rect var6 = param2.mUnrestricted;
    int var8 = var6.width();
    var5.screenWidth = var8;
    SystemGesturesPointerEventListener var9 = this.mSystemGestures;
    Rect var10 = param2.mUnrestricted;
    int var12 = var10.height();
    var9.screenHeight = var12;
    int var13 = this.mLastSystemUiFlags;
    var15 = var13 and 2;
    var20 = -2147450880 and var13;
    var23 = var13 and 2048;
    var26 = var13 and 4096;
    var30 = var21 and var29;
    boolean var32 = isStatusBarKeyguard();
    WindowManagerService var33 = this.mService;
    WindowManagerPolicy var34 = var33.mPolicy;
    boolean var36 = var34.isKeyguardOccluded();
    WindowState var43 = this.mStatusBar;
    WindowManager$LayoutParams var45 = var43.getAttrs();
    int var46 = var45.privateFlags;
    var48 = var46 and 8388608;
    WindowManagerPolicy$InputConsumer var58 = this.mInputConsumer;
    WindowState var59 = this.mStatusBar;
    boolean var61 = canHideNavigationBar();
    WindowManagerService var62 = this.mService;
    Handler var63 = this.mHandler;
    Looper var65 = var63.getLooper();
    -$$Lambda$DisplayPolicy$FpQuLkFb2EnHvk4Uzhr9G5Rn_xI var66 = new -$$Lambda$DisplayPolicy$FpQuLkFb2EnHvk4Uzhr9G5Rn_xI();
    int var68 = param2.mDisplayId;
    WindowManagerPolicy$InputConsumer var71 = var62.createInputConsumer(var65,nav_input_consumer,var66,var68);
    this.mInputConsumer = var71;
    InputManager var73 = InputManager.getInstance();
    var73.setPointerIconType(0);
    boolean var89 = canHideNavigationBar();
    var90 = var89 xor 1;
    var91 = var18 or var90;
    boolean var93 = layoutNavigationBar(param2,param3,var91,var30,var28,var55);
    boolean var95 = layoutStatusBar(param2,var13,var40);
    var96 = var93 or var95;
    int var98 = updateSystemUiVisibilityLw();
    layoutScreenDecorWindows(param2);
    Rect var102 = param2.mDisplayCutoutSafe;
    int var103 = var102.top;
    Rect var104 = param2.mUnrestricted;
    int var105 = var104.top;
    Rect var106 = param2.mDisplayCutoutSafe;
    Rect var107 = param2.mDisplayCutoutSafe;
    int var108 = var107.top;
    Rect var109 = param2.mStable;
    int var110 = var109.top;
    int var112 = Math.max(var108,var110);
    var106.top = var112;
}