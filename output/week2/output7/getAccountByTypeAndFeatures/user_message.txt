// API: getAccountByTypeAndFeatures
// Service: AccountManagerService_5

public void getAccountByTypeAndFeatures() {
    int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    int var60 = UserHandle.getCallingUserId();
    long var62 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var64 = getUserAccounts(var60);
    boolean var66 = ArrayUtils.isEmpty(param4);
    Account var82 = getAccountsFromCache(var64,param3,var7,param5,1);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var61 = param2.cacheLock;
    HashMap var62 = param2.accountCache;
    Object var64 = var62.get(param3);
    Account var65 = (Account) var64;
    70 = arraylength 65;
    Object var72 = Arrays.copyOf(var65,var70);
    Account var73 = (Account) var72;
    Account var75 = filterAccounts(param2,var73,param4,param5,param6);
    String var9 = getPackageNameForUid(param4);
    LinkedHashMap var11 = new LinkedHashMap();
    13 = arraylength 3;
    Map var36 = filterSharedAccounts(param2,var11,param4,param5);
    UserManager var7 = getUserManager();
    int var10 = AccountManagerService$UserAccounts.access$800(param2);{int var10 = AccountManagerService$UserAccounts.access$800(param2);};
    UserManager var13 = getUserManager();
    int var15 = AccountManagerService$UserAccounts.access$800(param2);{int var15 = AccountManagerService$UserAccounts.access$800(param2);};
    UserInfo var17 = var13.getUserInfo(var15);
    boolean var19 = var17.isRestricted();
    PackageManager var23 = this.mPackageManager;
    String var25 = var23.getPackagesForUid(param4);
    String var26 = new String(0);
    Context var29 = this.mContext;
    Resources var31 = var29.getResources();
    String var34 = var31.getString(17039671);
    35 = arraylength 28;
    int var56 = AccountManagerService$UserAccounts.access$800(param2);{int var56 = AccountManagerService$UserAccounts.access$800(param2);};
    Account var58 = getSharedAccountsAsUser(var56);
    boolean var60 = ArrayUtils.isEmpty(var58);
    PackageManager var74 = this.mPackageManager;
    PackageInfo var76 = var74.getPackageInfo(param5,0);
    LinkedHashMap var114 = new LinkedHashMap();
    Set var117 = entrySet();
    Iterator var119 = var117.iterator();
    Ljava/util/Map var114<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    int var60 = UserHandle.getCallingUserId();
    long var62 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var64 = getUserAccounts(var60);
    boolean var66 = ArrayUtils.isEmpty(param4);
    Account var82 = getAccountsFromCache(var64,param3,var7,param5,1);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var61 = param2.cacheLock;
    HashMap var62 = param2.accountCache;
    Object var64 = var62.get(param3);
    Account var65 = (Account) var64;
    70 = arraylength 65;
    Object var72 = Arrays.copyOf(var65,var70);
    Account var73 = (Account) var72;
    Account var75 = filterAccounts(param2,var73,param4,param5,param6);
    String var9 = getPackageNameForUid(param4);
    LinkedHashMap var11 = new LinkedHashMap();
    13 = arraylength 3;
    Map var36 = filterSharedAccounts(param2,var11,param4,param5);
    UserManager var7 = getUserManager();
    int var10 = AccountManagerService$UserAccounts.access$800(param2);{int var10 = AccountManagerService$UserAccounts.access$800(param2);};
    UserManager var13 = getUserManager();
    int var15 = AccountManagerService$UserAccounts.access$800(param2);{int var15 = AccountManagerService$UserAccounts.access$800(param2);};
    UserInfo var17 = var13.getUserInfo(var15);
    boolean var19 = var17.isRestricted();
    PackageManager var23 = this.mPackageManager;
    String var25 = var23.getPackagesForUid(param4);
    String var26 = new String(0);
    Context var29 = this.mContext;
    Resources var31 = var29.getResources();
    String var34 = var31.getString(17039671);
    35 = arraylength 28;
    int var56 = AccountManagerService$UserAccounts.access$800(param2);{int var56 = AccountManagerService$UserAccounts.access$800(param2);};
    Account var58 = getSharedAccountsAsUser(var56);
    boolean var60 = ArrayUtils.isEmpty(var58);
    62 = arraylength 28;
    63 = arrayload 28[69];
    PackageManager var64 = this.mPackageManager;
    PackageInfo var66 = var64.getPackageInfo(var63,0);
    String var67 = var66.restrictedAccountType;
    String var73 = var66.restrictedAccountType;
    LinkedHashMap var114 = new LinkedHashMap();
    Set var117 = entrySet();
    Iterator var119 = var117.iterator();
    Object var123 = var119.next();
    Map$Entry var124 = (Map$Entry) var123;
    Object var126 = var124.getKey();
    Account var127 = (Account) var126;
    String var128 = var127.type;
    boolean var130 = var128.equals(var108);
    Object var145 = var124.getValue();
    Integer var146 = (Integer) var145;
    Object var148 = var114.put(var127,var146);<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    int var60 = UserHandle.getCallingUserId();
    long var62 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var64 = getUserAccounts(var60);
    boolean var66 = ArrayUtils.isEmpty(param4);
    Account var82 = getAccountsFromCache(var64,param3,var7,param5,1);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var61 = param2.cacheLock;
    HashMap var62 = param2.accountCache;
    Object var64 = var62.get(param3);
    Account var65 = (Account) var64;
    70 = arraylength 65;
    Object var72 = Arrays.copyOf(var65,var70);
    Account var73 = (Account) var72;
    Account var75 = filterAccounts(param2,var73,param4,param5,param6);
    String var9 = getPackageNameForUid(param4);
    LinkedHashMap var11 = new LinkedHashMap();
    13 = arraylength 3;
    14 = arrayload 3[32];
    Integer var16 = resolveAccountVisibility(var14,var10,param2);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    int var51 = getAccountVisibilityFromCache(param2,param3,param4);
    int var53 = AccountManagerService$UserAccounts.access$800(param4);{int var53 = AccountManagerService$UserAccounts.access$800(param4);};
    String var55 = new String(1);
    boolean var61 = isPreOApplication(param3);
    int var63 = AccountManagerService$UserAccounts.access$800(param4);{int var63 = AccountManagerService$UserAccounts.access$800(param4);};
    int var70 = AccountManagerService$UserAccounts.access$800(param4);{int var70 = AccountManagerService$UserAccounts.access$800(param4);};
    String var73 = param2.type;
    int var75 = AccountManagerService$UserAccounts.access$800(param4);{int var75 = AccountManagerService$UserAccounts.access$800(param4);};
    boolean var77 = accountTypeManagesContacts(var73,var75);
    int var93 = getAccountVisibilityFromCache(param2,android:accounts:key_legacy_visible,param4);<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    int var60 = UserHandle.getCallingUserId();
    long var62 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var64 = getUserAccounts(var60);
    boolean var66 = ArrayUtils.isEmpty(param4);
    Account var82 = getAccountsFromCache(var64,param3,var7,param5,1);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var61 = param2.cacheLock;
    HashMap var62 = param2.accountCache;
    Object var64 = var62.get(param3);
    Account var65 = (Account) var64;
    70 = arraylength 65;
    Object var72 = Arrays.copyOf(var65,var70);
    Account var73 = (Account) var72;
    Account var75 = filterAccounts(param2,var73,param4,param5,param6);
    String var9 = getPackageNameForUid(param4);
    LinkedHashMap var11 = new LinkedHashMap();
    13 = arraylength 3;
    14 = arrayload 3[32];
    Integer var16 = resolveAccountVisibility(var14,var10,param2);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    int var51 = getAccountVisibilityFromCache(param2,param3,param4);
    int var53 = AccountManagerService$UserAccounts.access$800(param4);{int var53 = AccountManagerService$UserAccounts.access$800(param4);};
    String var55 = new String(1);
    boolean var61 = isPreOApplication(param3);
    int var93 = getAccountVisibilityFromCache(param2,android:accounts:key_legacy_visible,param4);
    Integer var99 = Integer.valueOf(var94);
    Ljava/lang/Integer var99;
}