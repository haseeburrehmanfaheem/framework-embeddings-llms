// API: hasFeatures
// Service: AccountManagerService_5

public void hasFeatures() {
    int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    Preconditions.checkArgument(var54,account cannot be null);{Preconditions.checkArgument(var54,account cannot be null);};
    Preconditions.checkArgument(var57,response cannot be null);{Preconditions.checkArgument(var57,response cannot be null);};
    Preconditions.checkArgument(var60,features cannot be null);{Preconditions.checkArgument(var60,features cannot be null);};
    int var64 = UserHandle.getCallingUserId();
    String var65 = param3.type;
    checkReadAccountsPermitted(var7,var65,var64,param5);{checkReadAccountsPermitted(var7,var65,var64,param5);};
    long var68 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var70 = getUserAccounts(var64);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    Preconditions.checkArgument(var54,account cannot be null);{Preconditions.checkArgument(var54,account cannot be null);};
    Preconditions.checkArgument(var57,response cannot be null);{Preconditions.checkArgument(var57,response cannot be null);};
    Preconditions.checkArgument(var60,features cannot be null);{Preconditions.checkArgument(var60,features cannot be null);};
    int var64 = UserHandle.getCallingUserId();
    String var65 = param3.type;
    checkReadAccountsPermitted(var7,var65,var64,param5);{checkReadAccountsPermitted(var7,var65,var64,param5);};
    long var68 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var70 = getUserAccounts(var64);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    Context var3 = this.mContext;
    File var4 = this.mPreNDatabaseFile;
    AccountsDb$CeDatabaseHelper var6 = AccountsDb$CeDatabaseHelper.create(var3,var4,param2);
    AccountsDb$DeDatabaseHelper var7 = this.mDeDatabase;
    SQLiteDatabase var9 = var7.getWritableDatabase();
    String var16 = getPath();
    var9.execSQL(var23);
    AccountsDb$DeDatabaseHelper var25 = this.mDeDatabase;
    boolean var28 = AccountsDb$DeDatabaseHelper.access$702(var25,1);{boolean var28 = AccountsDb$DeDatabaseHelper.access$702(var25,1);}<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    Preconditions.checkArgument(var54,account cannot be null);{Preconditions.checkArgument(var54,account cannot be null);};
    Preconditions.checkArgument(var57,response cannot be null);{Preconditions.checkArgument(var57,response cannot be null);};
    Preconditions.checkArgument(var60,features cannot be null);{Preconditions.checkArgument(var60,features cannot be null);};
    int var64 = UserHandle.getCallingUserId();
    String var65 = param3.type;
    checkReadAccountsPermitted(var7,var65,var64,param5);{checkReadAccountsPermitted(var7,var65,var64,param5);};
    long var68 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var70 = getUserAccounts(var64);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    SparseArray var3 = this.mUsers;
    boolean var5 = Thread.holdsLock(var3);
    Preconditions.checkState(var5,mUsers lock must be held);{Preconditions.checkState(var5,mUsers lock must be held);};
    AccountsDb var8 = param2.accountsDb;
    List var10 = var8.findCeAccountsNotInDe();
    boolean var12 = var10.isEmpty();
    int var17 = var10.size();
    int var24 = AccountManagerService$UserAccounts.access$800(param2);{int var24 = AccountManagerService$UserAccounts.access$800(param2);};
    String var35 = DEBUG_ACTION_SYNC_DE_CE_ACCOUNTS;
    Iterator var39 = var10.iterator();<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    Preconditions.checkArgument(var54,account cannot be null);{Preconditions.checkArgument(var54,account cannot be null);};
    Preconditions.checkArgument(var57,response cannot be null);{Preconditions.checkArgument(var57,response cannot be null);};
    Preconditions.checkArgument(var60,features cannot be null);{Preconditions.checkArgument(var60,features cannot be null);};
    int var64 = UserHandle.getCallingUserId();
    String var65 = param3.type;
    checkReadAccountsPermitted(var7,var65,var64,param5);{checkReadAccountsPermitted(var7,var65,var64,param5);};
    long var68 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var70 = getUserAccounts(var64);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var4 = Environment.getDataSystemDirectory();
    File var5 = new File();
    File var7 = Environment.getUserSystemDirectory(param2);
    File var11 = new File();
    boolean var14 = var11.exists();
    boolean var16 = var5.exists();
    File var18 = Environment.getUserSystemDirectory(param2);
    boolean var20 = var18.exists();
    boolean var38 = var11.renameTo(var5);
    String var55 = var5.getPath();
    Ljava/lang/String var55;
}