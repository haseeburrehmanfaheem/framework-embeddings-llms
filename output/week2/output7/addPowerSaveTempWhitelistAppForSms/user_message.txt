// API: addPowerSaveTempWhitelistAppForSms
// Service: DeviceIdleController$BinderService_4

public void addPowerSaveTempWhitelistAppForSms() {
    DeviceIdleController var5 = this.this$0;
    DeviceIdleController$Constants var7 = DeviceIdleController.access$100(var5);{DeviceIdleController$Constants var7 = DeviceIdleController.access$100(var5);};
    long var8 = var7.SMS_TEMP_APP_WHITELIST_DURATION;
    DeviceIdleController var9 = this.this$0;
    var9.addPowerSaveTempWhitelistAppChecked(param2,var8,param3,param4);
    Context var7 = getContext();
    int var12 = Binder.getCallingUid();
    IActivityManager var14 = ActivityManager.getService();
    int var16 = Binder.getCallingPid();
    int var20 = var14.handleIncomingUser(var16,var12,param4,0,0,addPowerSaveTempWhitelistApp,0);
    long var22 = Binder.clearCallingIdentity();
    addPowerSaveTempWhitelistAppInternal(var12,param2,param3,var20,1,param5);
    Context var9 = getContext();
    PackageManager var11 = var9.getPackageManager();
    int var13 = var11.getPackageUidAsUser(param3,param5);
    addPowerSaveTempWhitelistAppDirectInternal(param2,var13,param4,param6,param7);
    long var8 = SystemClock.elapsedRealtime();
    int var11 = UserHandle.getAppId(param3);
    int var13 = UserHandle.getAppId(param2);
    SparseBooleanArray var15 = this.mPowerSaveWhitelistSystemAppIds;
    boolean var17 = var15.get(var13);
    DeviceIdleController$Constants var43 = this.mConstants;
    long var44 = var43.MAX_TEMP_APP_WHITELIST_DURATION;
    long var49 = Math.min(param4,var44);
    SparseArray var54 = this.mTempWhitelistAppIdEndTimes;
    Object var56 = var54.get(var11);
    Pair var57 = (Pair) var56;
    Pair var60 = new Pair();
    MutableLong var61 = new MutableLong();
    SparseArray var65 = this.mTempWhitelistAppIdEndTimes;
    var65.put(var11,var60);
    Object var70 = var68.first;
    MutableLong var71 = (MutableLong) var70;
    var72 = var8 add var49;
    var71.value = var72;
    IBatteryStats var73 = this.mBatteryStats;
    var73.noteEvent(32785,param6,param3);{var73.noteEvent(32785,param6,param3);};
    postTempActiveTimeoutMessage(var11,var49);
    updateTempWhitelistAppIdsLocked(var11,1);
    DeviceIdleController$MyHandler var88 = this.mHandler;
    Message var91 = var88.obtainMessage(9,var11,1);
    var91.sendToTarget();<PATH_SEP>DeviceIdleController var5 = this.this$0;
    DeviceIdleController$Constants var7 = DeviceIdleController.access$100(var5);{DeviceIdleController$Constants var7 = DeviceIdleController.access$100(var5);};
    long var8 = var7.SMS_TEMP_APP_WHITELIST_DURATION;
    DeviceIdleController var9 = this.this$0;
    var9.addPowerSaveTempWhitelistAppChecked(param2,var8,param3,param4);
    Context var7 = getContext();
    int var12 = Binder.getCallingUid();
    IActivityManager var14 = ActivityManager.getService();
    int var16 = Binder.getCallingPid();
    int var20 = var14.handleIncomingUser(var16,var12,param4,0,0,addPowerSaveTempWhitelistApp,0);
    long var22 = Binder.clearCallingIdentity();
    addPowerSaveTempWhitelistAppInternal(var12,param2,param3,var20,1,param5);
    Context var9 = getContext();
    PackageManager var11 = var9.getPackageManager();
    int var13 = var11.getPackageUidAsUser(param3,param5);
    addPowerSaveTempWhitelistAppDirectInternal(param2,var13,param4,param6,param7);
    long var8 = SystemClock.elapsedRealtime();
    int var11 = UserHandle.getAppId(param3);
    int var13 = UserHandle.getAppId(param2);
    DeviceIdleController$Constants var43 = this.mConstants;
    long var44 = var43.MAX_TEMP_APP_WHITELIST_DURATION;
    long var49 = Math.min(param4,var44);
    SparseArray var54 = this.mTempWhitelistAppIdEndTimes;
    Object var56 = var54.get(var11);
    Pair var57 = (Pair) var56;
    Pair var60 = new Pair();
    MutableLong var61 = new MutableLong();
    SparseArray var65 = this.mTempWhitelistAppIdEndTimes;
    var65.put(var11,var60);
    Object var70 = var68.first;
    MutableLong var71 = (MutableLong) var70;
    var72 = var8 add var49;
    var71.value = var72;
    IBatteryStats var73 = this.mBatteryStats;
    var73.noteEvent(32785,param6,param3);{var73.noteEvent(32785,param6,param3);};
    postTempActiveTimeoutMessage(var11,var49);
    updateTempWhitelistAppIdsLocked(var11,1);
    DeviceIdleController$MyHandler var88 = this.mHandler;
    Message var91 = var88.obtainMessage(9,var11,1);
    var91.sendToTarget();<PATH_SEP>DeviceIdleController var5 = this.this$0;
    DeviceIdleController$Constants var7 = DeviceIdleController.access$100(var5);{DeviceIdleController$Constants var7 = DeviceIdleController.access$100(var5);};
    long var8 = var7.SMS_TEMP_APP_WHITELIST_DURATION;
    DeviceIdleController var9 = this.this$0;
    var9.addPowerSaveTempWhitelistAppChecked(param2,var8,param3,param4);
    Context var7 = getContext();
    int var12 = Binder.getCallingUid();
    IActivityManager var14 = ActivityManager.getService();
    int var16 = Binder.getCallingPid();
    int var20 = var14.handleIncomingUser(var16,var12,param4,0,0,addPowerSaveTempWhitelistApp,0);
    long var22 = Binder.clearCallingIdentity();
    addPowerSaveTempWhitelistAppInternal(var12,param2,param3,var20,1,param5);
    Context var9 = getContext();
    PackageManager var11 = var9.getPackageManager();
    int var13 = var11.getPackageUidAsUser(param3,param5);
    addPowerSaveTempWhitelistAppDirectInternal(param2,var13,param4,param6,param7);
    long var8 = SystemClock.elapsedRealtime();
    int var11 = UserHandle.getAppId(param3);
    int var13 = UserHandle.getAppId(param2);
    SparseBooleanArray var15 = this.mPowerSaveWhitelistSystemAppIds;
    boolean var17 = var15.get(var13);
    DeviceIdleController$Constants var43 = this.mConstants;
    long var44 = var43.MAX_TEMP_APP_WHITELIST_DURATION;
    long var49 = Math.min(param4,var44);
    SparseArray var54 = this.mTempWhitelistAppIdEndTimes;
    Object var56 = var54.get(var11);
    Pair var57 = (Pair) var56;
    Object var70 = var68.first;
    MutableLong var71 = (MutableLong) var70;
    var72 = var8 add var49;
    var71.value = var72;
    IBatteryStats var73 = this.mBatteryStats;
    var73.noteEvent(32785,param6,param3);{var73.noteEvent(32785,param6,param3);};
    postTempActiveTimeoutMessage(var11,var49);
    updateTempWhitelistAppIdsLocked(var11,1);
    reportTempWhitelistChangedLocked();
    NetworkPolicyManagerInternal var125 = this.mNetworkPolicyManagerInternal;
    var125.onTempPowerSaveWhitelistChange(var11,1);<PATH_SEP>DeviceIdleController var5 = this.this$0;
    DeviceIdleController$Constants var7 = DeviceIdleController.access$100(var5);{DeviceIdleController$Constants var7 = DeviceIdleController.access$100(var5);};
    long var8 = var7.SMS_TEMP_APP_WHITELIST_DURATION;
    DeviceIdleController var9 = this.this$0;
    var9.addPowerSaveTempWhitelistAppChecked(param2,var8,param3,param4);
    Context var7 = getContext();
    int var12 = Binder.getCallingUid();
    IActivityManager var14 = ActivityManager.getService();
    int var16 = Binder.getCallingPid();
    int var20 = var14.handleIncomingUser(var16,var12,param4,0,0,addPowerSaveTempWhitelistApp,0);
    long var22 = Binder.clearCallingIdentity();
    addPowerSaveTempWhitelistAppInternal(var12,param2,param3,var20,1,param5);
    Context var9 = getContext();
    PackageManager var11 = var9.getPackageManager();
    int var13 = var11.getPackageUidAsUser(param3,param5);
    addPowerSaveTempWhitelistAppDirectInternal(param2,var13,param4,param6,param7);
    long var8 = SystemClock.elapsedRealtime();
    int var11 = UserHandle.getAppId(param3);
    int var13 = UserHandle.getAppId(param2);
    DeviceIdleController$Constants var43 = this.mConstants;
    long var44 = var43.MAX_TEMP_APP_WHITELIST_DURATION;
    long var49 = Math.min(param4,var44);
    SparseArray var54 = this.mTempWhitelistAppIdEndTimes;
    Object var56 = var54.get(var11);
    Pair var57 = (Pair) var56;
    Object var70 = var68.first;
    MutableLong var71 = (MutableLong) var70;
    var72 = var8 add var49;
    var71.value = var72;
    IBatteryStats var73 = this.mBatteryStats;
    var73.noteEvent(32785,param6,param3);{var73.noteEvent(32785,param6,param3);};
    postTempActiveTimeoutMessage(var11,var49);
    updateTempWhitelistAppIdsLocked(var11,1);
    DeviceIdleController$MyHandler var88 = this.mHandler;
    Message var91 = var88.obtainMessage(9,var11,1);
    var91.sendToTarget();
}