// API: getAccountsAsUser
// Service: AccountManagerService_4

public void getAccountsAsUser() {
    int var6 = Binder.getCallingUid();
    AppOpsManager var7 = this.mAppOpsManager;
    Account var12 = getAccountsAsUserForPackage(param2,param3,param4,-1,param4,0);
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    Context var13 = this.mContext;
    int var54 = Binder.getCallingUid();
    int var61 = Binder.getCallingPid();
    int var72 = UserHandle.getUserId(var9);
    List var74 = getTypesManagedByCaller(var9,var72);
    boolean var77 = UserHandle.isSameApp(var9,1000);
    boolean var79 = var74.contains(param2);
    List var93 = getTypesVisibleToCaller(var88,param3,var89);
    boolean var95 = var93.isEmpty();
    boolean var97 = var93.contains(param2);
    boolean var102 = var93.contains(param2);
    ArrayList var103 = new ArrayList();
    boolean var106 = var103.add(param2);
    long var113 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var115 = getUserAccounts(param3);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var6 = Binder.getCallingUid();
    AppOpsManager var7 = this.mAppOpsManager;
    Account var12 = getAccountsAsUserForPackage(param2,param3,param4,-1,param4,0);
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    Context var13 = this.mContext;
    int var54 = Binder.getCallingUid();
    int var61 = Binder.getCallingPid();
    int var72 = UserHandle.getUserId(var9);
    List var74 = getTypesManagedByCaller(var9,var72);
    boolean var77 = UserHandle.isSameApp(var9,1000);
    boolean var79 = var74.contains(param2);
    List var93 = getTypesVisibleToCaller(var88,param3,var89);
    boolean var95 = var93.isEmpty();
    boolean var97 = var93.contains(param2);
    boolean var102 = var93.contains(param2);
    ArrayList var103 = new ArrayList();
    boolean var106 = var103.add(param2);
    long var113 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var115 = getUserAccounts(param3);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var6 = Binder.getCallingUid();
    AppOpsManager var7 = this.mAppOpsManager;
    Account var12 = getAccountsAsUserForPackage(param2,param3,param4,-1,param4,0);
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    Context var13 = this.mContext;
    int var54 = Binder.getCallingUid();
    int var61 = Binder.getCallingPid();
    int var72 = UserHandle.getUserId(var9);
    List var74 = getTypesManagedByCaller(var9,var72);
    boolean var77 = UserHandle.isSameApp(var9,1000);
    boolean var79 = var74.contains(param2);
    List var93 = getTypesVisibleToCaller(var88,param3,var89);
    boolean var95 = var93.isEmpty();
    boolean var97 = var93.contains(param2);
    boolean var102 = var93.contains(param2);
    ArrayList var103 = new ArrayList();
    boolean var106 = var103.add(param2);
    long var113 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var115 = getUserAccounts(param3);
    Account var117 = getAccountsInternal(var115,var88,var89,var109,param7);
    ArrayList var7 = new ArrayList();
    Iterator var10 = iterator();
    Object var15 = var10.next();
    String var16 = (String) var15;
    Account var18 = getAccountsFromCache(param2,var16,param3,param4,param6);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var61 = param2.cacheLock;
    HashMap var62 = param2.accountCache;
    Object var64 = var62.get(param3);
    Account var65 = (Account) var64;
    70 = arraylength 65;
    Object var72 = Arrays.copyOf(var65,var70);
    Account var73 = (Account) var72;
    Account var75 = filterAccounts(param2,var73,param4,param5,param6);
    int var6 = Binder.getCallingUid();
    AppOpsManager var7 = this.mAppOpsManager;
    Account var12 = getAccountsAsUserForPackage(param2,param3,param4,-1,param4,0);
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    Context var13 = this.mContext;
    int var54 = Binder.getCallingUid();
    int var61 = Binder.getCallingPid();
    int var72 = UserHandle.getUserId(var9);
    List var74 = getTypesManagedByCaller(var9,var72);
    boolean var77 = UserHandle.isSameApp(var9,1000);
    boolean var79 = var74.contains(param2);
    List var93 = getTypesVisibleToCaller(var88,param3,var89);
    boolean var95 = var93.isEmpty();
    boolean var97 = var93.contains(param2);
    boolean var102 = var93.contains(param2);
    ArrayList var103 = new ArrayList();
    boolean var106 = var103.add(param2);
    long var113 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var115 = getUserAccounts(param3);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}