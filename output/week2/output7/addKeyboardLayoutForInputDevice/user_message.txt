// API: addKeyboardLayoutForInputDevice
// Service: InputManagerService_3

public void addKeyboardLayoutForInputDevice() {
    String var16 = getLayoutDescriptor(param2);
    PersistentDataStore var17 = this.mDataStore;
    PersistentDataStore var18 = this.mDataStore;
    String var20 = var18.getCurrentKeyboardLayout(var16);
    String var22 = getDescriptor();
    boolean var24 = var16.equals(var22);
    PersistentDataStore var25 = this.mDataStore;
    String var27 = getDescriptor();
    String var29 = var25.getCurrentKeyboardLayout(var27);
    PersistentDataStore var34 = this.mDataStore;
    boolean var36 = var34.addKeyboardLayout(var16,param3);
    PersistentDataStore var37 = this.mDataStore;
    String var39 = var37.getCurrentKeyboardLayout(var16);
    boolean var41 = Objects.equals(var30,var39);
    InputManagerService$InputManagerHandler var42 = this.mHandler;
    boolean var45 = var42.sendEmptyMessage(3);
    PersistentDataStore var58 = this.mDataStore;
    var58.saveIfNeeded();
    boolean var2 = this.mDirty;
    save();
    AtomicFile var2 = this.mAtomicFile;
    FileOutputStream var4 = var2.startWrite();
    FastXmlSerializer var6 = new FastXmlSerializer();
    BufferedOutputStream var8 = new BufferedOutputStream();
    Charset var10 = UTF_8;
    String var12 = var10.name();
    var6.setOutput(var8,var12);
    saveToXml(var6);
    Boolean var5 = Boolean.valueOf(1);
    startDocument(0,var5);
    setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var12 = startTag(0,input-manager-state);
    XmlSerializer var15 = startTag(0,input-devices);
    HashMap var16 = this.mInputDevices;
    Set var18 = var16.entrySet();
    Iterator var20 = var18.iterator();
    Object var24 = var20.next();
    Map$Entry var25 = (Map$Entry) var24;
    Object var27 = var25.getKey();
    String var28 = (String) var27;
    Object var30 = var25.getValue();
    PersistentDataStore$InputDeviceState var31 = (PersistentDataStore$InputDeviceState) var30;
    XmlSerializer var34 = startTag(0,input-device);
    XmlSerializer var37 = attribute(0,descriptor,var28);
    var31.saveToXml(param2);<PATH_SEP>String var16 = getLayoutDescriptor(param2);
    PersistentDataStore var17 = this.mDataStore;
    PersistentDataStore var18 = this.mDataStore;
    String var20 = var18.getCurrentKeyboardLayout(var16);
    String var22 = getDescriptor();
    boolean var24 = var16.equals(var22);
    PersistentDataStore var25 = this.mDataStore;
    String var27 = getDescriptor();
    String var29 = var25.getCurrentKeyboardLayout(var27);
    PersistentDataStore var34 = this.mDataStore;
    boolean var36 = var34.addKeyboardLayout(var16,param3);
    PersistentDataStore var37 = this.mDataStore;
    String var39 = var37.getCurrentKeyboardLayout(var16);
    boolean var41 = Objects.equals(var30,var39);
    InputManagerService$InputManagerHandler var42 = this.mHandler;
    boolean var45 = var42.sendEmptyMessage(3);
    PersistentDataStore var58 = this.mDataStore;
    var58.saveIfNeeded();
    boolean var2 = this.mDirty;
    save();
    AtomicFile var2 = this.mAtomicFile;
    FileOutputStream var4 = var2.startWrite();
    FastXmlSerializer var6 = new FastXmlSerializer();
    BufferedOutputStream var8 = new BufferedOutputStream();
    Charset var10 = UTF_8;
    String var12 = var10.name();
    var6.setOutput(var8,var12);
    saveToXml(var6);
    var6.flush();
    int var2 = this.mPos;
    OutputStream var4 = this.mOutputStream;
    Writer var5 = this.mWriter;
    [C var6 = this.mText;
    var5.write(var6,0,var2);
    Writer var8 = this.mWriter;
    var8.flush();
    this.mPos = 0;<PATH_SEP>String var16 = getLayoutDescriptor(param2);
    PersistentDataStore var17 = this.mDataStore;
    PersistentDataStore var18 = this.mDataStore;
    String var20 = var18.getCurrentKeyboardLayout(var16);
    String var22 = getDescriptor();
    boolean var24 = var16.equals(var22);
    PersistentDataStore var25 = this.mDataStore;
    String var27 = getDescriptor();
    String var29 = var25.getCurrentKeyboardLayout(var27);
    PersistentDataStore var34 = this.mDataStore;
    boolean var36 = var34.addKeyboardLayout(var16,param3);
    PersistentDataStore var37 = this.mDataStore;
    String var39 = var37.getCurrentKeyboardLayout(var16);
    boolean var41 = Objects.equals(var30,var39);
    InputManagerService$InputManagerHandler var42 = this.mHandler;
    boolean var45 = var42.sendEmptyMessage(3);
    PersistentDataStore var58 = this.mDataStore;
    var58.saveIfNeeded();
    boolean var2 = this.mDirty;
    save();
    AtomicFile var2 = this.mAtomicFile;
    FileOutputStream var4 = var2.startWrite();
    FastXmlSerializer var6 = new FastXmlSerializer();
    BufferedOutputStream var8 = new BufferedOutputStream();
    Charset var10 = UTF_8;
    String var12 = var10.name();
    var6.setOutput(var8,var12);
    saveToXml(var6);
    Boolean var5 = Boolean.valueOf(1);
    startDocument(0,var5);
    setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var12 = startTag(0,input-manager-state);
    XmlSerializer var15 = startTag(0,input-devices);
    HashMap var16 = this.mInputDevices;
    Set var18 = var16.entrySet();<PATH_SEP>String var16 = getLayoutDescriptor(param2);
    PersistentDataStore var17 = this.mDataStore;
    PersistentDataStore var18 = this.mDataStore;
    String var20 = var18.getCurrentKeyboardLayout(var16);
    String var22 = getDescriptor();
    boolean var24 = var16.equals(var22);
    PersistentDataStore var25 = this.mDataStore;
    String var27 = getDescriptor();
    String var29 = var25.getCurrentKeyboardLayout(var27);
    PersistentDataStore var34 = this.mDataStore;
    boolean var36 = var34.addKeyboardLayout(var16,param3);
    PersistentDataStore$InputDeviceState var6 = getInputDeviceState(param2,1);
    boolean var8 = var6.addKeyboardLayout(param3);
    ArrayList var3 = this.mKeyboardLayouts;
    int var5 = Collections.binarySearch(var3,param2);
    ArrayList var7 = this.mKeyboardLayouts;
    8 = neg 5;
    var10 = var8 sub 1;
    var7.add(var10,param2);
    String var12 = this.mCurrentKeyboardLayout;
    this.mCurrentKeyboardLayout = param2;
}