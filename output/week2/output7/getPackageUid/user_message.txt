// API: getPackageUid
// Service: PackageManagerService_4

public void getPackageUid() {
    UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var11 = Binder.getCallingUid();
    int var13 = updateFlagsForPackage(param3,param4,param2);
    PermissionManagerServiceInternal var14 = this.mPermissionManager;
    ArrayMap var17 = this.mPackages;
    ArrayMap var18 = this.mPackages;
    Object var20 = var18.get(param2);
    PackageParser$Package var21 = (PackageParser$Package) var20;
    boolean var23 = var21.isMatch(var13);
    Object var45 = var21.mExtras;
    PackageSetting var46 = (PackageSetting) var45;
    boolean var48 = filterAppAccessLPr(var46,var11,param4);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var31 = this.mComponentResolver;
    PackageParser$Activity var33 = var31.getReceiver(param2);
    boolean 0<PATH_SEP>UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var11 = Binder.getCallingUid();
    int var13 = updateFlagsForPackage(param3,param4,param2);
    PermissionManagerServiceInternal var14 = this.mPermissionManager;
    ArrayMap var17 = this.mPackages;
    ArrayMap var18 = this.mPackages;
    Object var20 = var18.get(param2);
    PackageParser$Package var21 = (PackageParser$Package) var20;
    boolean var23 = var21.isMatch(var13);
    Object var45 = var21.mExtras;
    PackageSetting var46 = (PackageSetting) var45;
    boolean var48 = filterAppAccessLPr(var46,var11,param4);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var25 = getInstantApp(param6);
    boolean var27 = canViewInstantApps(var14,param6);
    Context var6 = this.mContext;
    Context var11 = this.mContext;
    ComponentName var16 = getDefaultHomeActivity(param3);
    String var24 = this.mAppPredictionServicePackage;
    boolean 1<PATH_SEP>UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var11 = Binder.getCallingUid();
    int var13 = updateFlagsForPackage(param3,param4,param2);
    PermissionManagerServiceInternal var14 = this.mPermissionManager;
    ArrayMap var17 = this.mPackages;
    ArrayMap var18 = this.mPackages;
    Object var20 = var18.get(param2);
    PackageParser$Package var21 = (PackageParser$Package) var20;
    boolean var23 = var21.isMatch(var13);
    Object var45 = var21.mExtras;
    PackageSetting var46 = (PackageSetting) var45;
    boolean var48 = filterAppAccessLPr(var46,var11,param4);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var13 = this.mComponentResolver;
    PackageParser$Provider var15 = var13.getProvider(param2);
    boolean var20<PATH_SEP>UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var11 = Binder.getCallingUid();
    int var13 = updateFlagsForPackage(param3,param4,param2);
    PermissionManagerServiceInternal var14 = this.mPermissionManager;
    ArrayMap var17 = this.mPackages;
    ArrayMap var18 = this.mPackages;
    Object var20 = var18.get(param2);
    PackageParser$Package var21 = (PackageParser$Package) var20;
    boolean var23 = var21.isMatch(var13);
    Object var45 = var21.mExtras;
    PackageSetting var46 = (PackageSetting) var45;
    boolean var48 = filterAppAccessLPr(var46,var11,param4);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var43 = this.mComponentResolver;
    PackageParser$Activity var45 = var43.getActivity(param2);
    ActivityInfo var46 = var45.info;
    int var47 = var46.flags;
    var48 = 1048576 and var47;
    ActivityInfo var50 = var45.info;
    int var51 = var50.flags;
    var52 = 2097152 and var51;
    boolean var54;
}