// API: setTouchCalibrationForInputDevice
// Service: InputManagerService_4

public void setTouchCalibrationForInputDevice() {
    PersistentDataStore var24 = this.mDataStore;
    PersistentDataStore var25 = this.mDataStore;
    boolean var27 = var25.setTouchCalibration(param2,param3,param4);
    long var28 = this.mPtr;
    InputManagerService.nativeReloadCalibration(var28);
    PersistentDataStore var38 = this.mDataStore;
    var38.saveIfNeeded();
    boolean var2 = this.mDirty;
    save();
    AtomicFile var2 = this.mAtomicFile;
    FileOutputStream var4 = var2.startWrite();
    FastXmlSerializer var6 = new FastXmlSerializer();
    BufferedOutputStream var8 = new BufferedOutputStream();
    Charset var10 = UTF_8;
    String var12 = var10.name();
    var6.setOutput(var8,var12);
    saveToXml(var6);
    var6.flush();
    int var2 = this.mPos;
    OutputStream var4 = this.mOutputStream;
    [C var10 = this.mText;
    CharBuffer var12 = CharBuffer.wrap(var10,0,var2);
    CharsetEncoder var13 = this.mCharset;
    ByteBuffer var14 = this.mBytes;
    CoderResult var17 = var13.encode(var12,var14,1);
    boolean var19 = var27.isError();
    boolean var21 = var27.isOverflow();
    flushBytes();
    OutputStream var36 = this.mOutputStream;
    var36.flush();
    this.mPos = 0;<PATH_SEP>PersistentDataStore var24 = this.mDataStore;
    PersistentDataStore var25 = this.mDataStore;
    boolean var27 = var25.setTouchCalibration(param2,param3,param4);
    PersistentDataStore$InputDeviceState var7 = getInputDeviceState(param2,1);
    loadIfNeeded();
    HashMap var5 = this.mInputDevices;
    Object var7 = var5.get(param2);
    PersistentDataStore$InputDeviceState var8 = (PersistentDataStore$InputDeviceState) var7;
    Lcom/android/server/input/PersistentDataStore$InputDeviceState var16<PATH_SEP>PersistentDataStore var24 = this.mDataStore;
    PersistentDataStore var25 = this.mDataStore;
    boolean var27 = var25.setTouchCalibration(param2,param3,param4);
    long var28 = this.mPtr;
    InputManagerService.nativeReloadCalibration(var28);
    PersistentDataStore var38 = this.mDataStore;
    var38.saveIfNeeded();
    boolean var2 = this.mDirty;
    save();
    AtomicFile var2 = this.mAtomicFile;
    FileOutputStream var4 = var2.startWrite();
    FastXmlSerializer var6 = new FastXmlSerializer();
    BufferedOutputStream var8 = new BufferedOutputStream();
    Charset var10 = UTF_8;
    String var12 = var10.name();
    var6.setOutput(var8,var12);
    saveToXml(var6);
    var6.flush();
    int var2 = this.mPos;
    OutputStream var4 = this.mOutputStream;
    Writer var5 = this.mWriter;
    [C var6 = this.mText;
    var5.write(var6,0,var2);
    Writer var8 = this.mWriter;
    var8.flush();
    this.mPos = 0;<PATH_SEP>PersistentDataStore var24 = this.mDataStore;
    PersistentDataStore var25 = this.mDataStore;
    boolean var27 = var25.setTouchCalibration(param2,param3,param4);
    long var28 = this.mPtr;
    InputManagerService.nativeReloadCalibration(var28);
    PersistentDataStore var38 = this.mDataStore;
    var38.saveIfNeeded();
    boolean var2 = this.mDirty;
    save();
    AtomicFile var2 = this.mAtomicFile;
    FileOutputStream var4 = var2.startWrite();
    FastXmlSerializer var6 = new FastXmlSerializer();
    BufferedOutputStream var8 = new BufferedOutputStream();
    Charset var10 = UTF_8;
    String var12 = var10.name();
    var6.setOutput(var8,var12);
    Charset var8 = Charset.forName(param3);
    CharsetEncoder var10 = var8.newEncoder();
    CodingErrorAction var11 = REPLACE;
    CharsetEncoder var13 = var10.onMalformedInput(var11);
    CodingErrorAction var14 = REPLACE;
    CharsetEncoder var16 = var13.onUnmappableCharacter(var14);
    this.mCharset = var16;
    this.mOutputStream = param2;
}