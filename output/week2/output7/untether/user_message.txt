// API: untether
// Service: ConnectivityService_3

public void untether() {
    Context var4 = this.mContext;
    boolean var7 = isTetheringSupported();
    Tethering var10 = this.mTethering;
    int var12 = var10.untether(param2);
    Object var3 = this.mPublicSync;
    ArrayMap var4 = this.mTetherStates;
    Object var6 = var4.get(param2);
    Tethering$TetherState var7 = (Tethering$TetherState) var6;
    boolean var10 = var7.isCurrentlyServing();
    String var14 = TAG;
    int 4<PATH_SEP>Context var4 = this.mContext;
    boolean var7 = isTetheringSupported();
    MockableSystemProperties var2 = this.mSystemProperties;
    String var5 = var2.get(ro.tether.denied);
    boolean var8 = var5.equals(true);
    var10 = var8 xor 1;
    int var12 = ConnectivityService.encodeBool(var10);
    Context var13 = this.mContext;
    ContentResolver var15 = var13.getContentResolver();
    int var18 = Settings$Global.getInt(var15,tether_supported,var12);
    boolean var20 = ConnectivityService.toBool(var18);
    UserManager var22 = this.mUserManager;
    boolean var25 = var22.hasUserRestriction(no_config_tethering);
    long var32 = Binder.clearCallingIdentity();
    UserManager var33 = this.mUserManager;
    boolean var35 = var33.isAdminUser();
    Binder.restoreCallingIdentity(var32);
    Tethering var41 = this.mTethering;
    boolean var43 = var41.hasTetherableConfiguration();
    TetheringConfiguration var2 = this.mConfig;
    String var3 = var2.tetherableUsbRegexs;
    4 = arraylength 3;
    String var7 = var2.tetherableWifiRegexs;
    8 = arraylength 7;
    String var9 = var2.tetherableBluetoothRegexs;
    10 = arraylength 9;
    Collection var13 = var2.preferredUpstreamIfaceTypes;
    boolean var15 = var13.isEmpty();
    boolean var19<PATH_SEP>Context var4 = this.mContext;
    boolean var7 = isTetheringSupported();
    MockableSystemProperties var2 = this.mSystemProperties;
    String var5 = var2.get(ro.tether.denied);
    boolean var8 = var5.equals(true);
    var10 = var8 xor 1;
    int var12 = ConnectivityService.encodeBool(var10);
    Context var13 = this.mContext;
    ContentResolver var15 = var13.getContentResolver();
    int var18 = Settings$Global.getInt(var15,tether_supported,var12);
    boolean var20 = ConnectivityService.toBool(var18);
    UserManager var22 = this.mUserManager;
    boolean var25 = var22.hasUserRestriction(no_config_tethering);
    long var32 = Binder.clearCallingIdentity();
    UserManager var33 = this.mUserManager;
    boolean var35 = var33.isAdminUser();
    Binder.restoreCallingIdentity(var32);
    Tethering var41 = this.mTethering;
    boolean var43 = var41.hasTetherableConfiguration();
    TetheringConfiguration var2 = this.mConfig;
    String var3 = var2.tetherableUsbRegexs;
    4 = arraylength 3;
    String var7 = var2.tetherableWifiRegexs;
    8 = arraylength 7;
    Collection var13 = var2.preferredUpstreamIfaceTypes;
    boolean var15 = var13.isEmpty();
    boolean var19<PATH_SEP>Context var4 = this.mContext;
    boolean var7 = isTetheringSupported();
    MockableSystemProperties var2 = this.mSystemProperties;
    String var5 = var2.get(ro.tether.denied);
    boolean var8 = var5.equals(true);
    var10 = var8 xor 1;
    int var12 = ConnectivityService.encodeBool(var10);
    Context var13 = this.mContext;
    ContentResolver var15 = var13.getContentResolver();
    int var18 = Settings$Global.getInt(var15,tether_supported,var12);
    boolean var20 = ConnectivityService.toBool(var18);
    boolean var4;
}