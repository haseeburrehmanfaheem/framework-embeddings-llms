// API: getActivePlaybackConfigurations
// Service: AudioService_1

public void getActivePlaybackConfigurations() {
    Context var2 = this.mContext;
    PlaybackActivityMonitor var9 = this.mPlaybackMonitor;
    List var11 = var9.getActivePlaybackConfigurations(var8);
    HashMap var3 = this.mPlayers;
    Object var5 = this.mPlayerLock;
    ArrayList var6 = new ArrayList();
    HashMap var7 = this.mPlayers;
    Collection var9 = var7.values();
    ArrayList var12 = anonymizeForPublicConsumption(var6);
    ArrayList var3 = new ArrayList();
    Iterator var6 = iterator();
    Object var11 = var6.next();
    AudioPlaybackConfiguration var12 = (AudioPlaybackConfiguration) var11;
    boolean var14 = var12.isActive();
    AudioPlaybackConfiguration var16 = AudioPlaybackConfiguration.anonymizedCopy(var12);
    AudioPlaybackConfiguration var2 = new AudioPlaybackConfiguration();
    int var3 = this.mPlayerIId;
    int var5 = this.mPlayerState;
    var2.mPlayerState = var5;
    AudioAttributes$Builder var6 = new AudioAttributes$Builder();
    AudioAttributes var8 = this.mPlayerAttr;
    int var10 = var8.getUsage();
    AudioAttributes$Builder var12 = var6.setUsage(var10);
    AudioAttributes var13 = this.mPlayerAttr;
    int var15 = var13.getContentType();
    AudioAttributes$Builder var17 = var12.setContentType(var15);
    AudioAttributes var18 = this.mPlayerAttr;
    int var20 = var18.getFlags();
    AudioAttributes$Builder var22 = var17.setFlags(var20);
    AudioAttributes var23 = this.mPlayerAttr;
    int var25 = var23.getAllowedCapturePolicy();
    AudioAttributes$Builder var30 = var22.setAllowedCapturePolicy(var28);<PATH_SEP>Context var2 = this.mContext;
    PlaybackActivityMonitor var9 = this.mPlaybackMonitor;
    List var11 = var9.getActivePlaybackConfigurations(var8);
    HashMap var3 = this.mPlayers;
    Object var5 = this.mPlayerLock;
    ArrayList var6 = new ArrayList();
    HashMap var7 = this.mPlayers;
    Collection var9 = var7.values();
    ArrayList var12 = anonymizeForPublicConsumption(var6);
    ArrayList var3 = new ArrayList();
    Iterator var6 = iterator();
    Object var11 = var6.next();
    AudioPlaybackConfiguration var12 = (AudioPlaybackConfiguration) var11;
    boolean var14 = var12.isActive();
    int var2 = this.mPlayerState;
    boolean 0<PATH_SEP>Context var2 = this.mContext;
    PlaybackActivityMonitor var9 = this.mPlaybackMonitor;
    List var11 = var9.getActivePlaybackConfigurations(var8);
    HashMap var3 = this.mPlayers;
    Object var5 = this.mPlayerLock;
    ArrayList var6 = new ArrayList();
    HashMap var7 = this.mPlayers;
    Collection var9 = var7.values();
    ArrayList var12 = anonymizeForPublicConsumption(var6);
    ArrayList var3 = new ArrayList();
    Iterator var6 = iterator();
    Object var11 = var6.next();
    AudioPlaybackConfiguration var12 = (AudioPlaybackConfiguration) var11;
    boolean var14 = var12.isActive();
    AudioPlaybackConfiguration var16 = AudioPlaybackConfiguration.anonymizedCopy(var12);
    AudioPlaybackConfiguration var2 = new AudioPlaybackConfiguration();
    int var3 = this.mPlayerIId;
    int var5 = this.mPlayerState;
    var2.mPlayerState = var5;
    AudioAttributes$Builder var6 = new AudioAttributes$Builder();
    AudioAttributes var8 = this.mPlayerAttr;
    int var10 = var8.getUsage();
    AudioAttributes$Builder var12 = var6.setUsage(var10);
    AudioAttributes var13 = this.mPlayerAttr;
    int var15 = var13.getContentType();
    AudioAttributes$Builder var17 = var12.setContentType(var15);
    AudioAttributes var18 = this.mPlayerAttr;
    int var20 = var18.getFlags();
    AudioAttributes$Builder var22 = var17.setFlags(var20);
    AudioAttributes var23 = this.mPlayerAttr;
    int var25 = var23.getAllowedCapturePolicy();
    AudioAttributes$Builder var30 = var22.setAllowedCapturePolicy(var28);
    AudioAttributes var32 = var30.build();
    var2.mPlayerAttr = var32;
    var2.mPlayerType = -1;
    var2.mClientUid = -1;<PATH_SEP>Context var2 = this.mContext;
    PlaybackActivityMonitor var9 = this.mPlaybackMonitor;
    List var11 = var9.getActivePlaybackConfigurations(var8);
    HashMap var3 = this.mPlayers;
    Object var5 = this.mPlayerLock;
    ArrayList var6 = new ArrayList();
    HashMap var7 = this.mPlayers;
    Collection var9 = var7.values();
    ArrayList var12 = anonymizeForPublicConsumption(var6);
    ArrayList var3 = new ArrayList();
    Iterator var6 = iterator();
    Object var11 = var6.next();
    AudioPlaybackConfiguration var12 = (AudioPlaybackConfiguration) var11;
    boolean var14 = var12.isActive();
    AudioPlaybackConfiguration var16 = AudioPlaybackConfiguration.anonymizedCopy(var12);
    AudioPlaybackConfiguration var2 = new AudioPlaybackConfiguration();
    int var3 = this.mPlayerIId;
    int var5 = this.mPlayerState;
    var2.mPlayerState = var5;
    AudioAttributes$Builder var6 = new AudioAttributes$Builder();
    AudioAttributes var8 = this.mPlayerAttr;
    int var10 = var8.getUsage();
    AudioAttributes$Builder var12 = var6.setUsage(var10);
    AudioAttributes var13 = this.mPlayerAttr;
    int var15 = var13.getContentType();
    AudioAttributes$Builder var17 = var12.setContentType(var15);
    AudioAttributes var18 = this.mPlayerAttr;
    int var20 = var18.getFlags();
    AudioAttributes$Builder var22 = var17.setFlags(var20);
    AudioAttributes var23 = this.mPlayerAttr;
    int var25 = var23.getAllowedCapturePolicy();
    AudioAttributes$Builder var30 = var22.setAllowedCapturePolicy(var28);
    AudioAttributes var32 = var30.build();
    var2.mPlayerAttr = var32;
}