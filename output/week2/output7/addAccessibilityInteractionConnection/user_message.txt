// API: addAccessibilityInteractionConnection
// Service: AccessibilityManagerService_5

public void addAccessibilityInteractionConnection() {
    Object var6 = this.mLock;
    AccessibilityManagerService$SecurityPolicy var7 = this.mSecurityPolicy;
    int var9 = var7.resolveCallingUserIdEnforcingPermissionsLocked(param5);
    int var4 = Binder.getCallingUid();
    int var58 = resolveProfileParentLocked(param2);
    int var58<PATH_SEP>Object var6 = this.mLock;
    AccessibilityManagerService$SecurityPolicy var7 = this.mSecurityPolicy;
    int var9 = var7.resolveCallingUserIdEnforcingPermissionsLocked(param5);
    int var11 = UserHandle.getCallingAppId();
    int var13 = UserHandle.getUid(var9,var11);
    AccessibilityManagerService$SecurityPolicy var14 = this.mSecurityPolicy;
    int var16 = UserHandle.getCallingAppId();
    int var29 = sNextWindowId;
    var31 = var29 add 1;
    var31.sNextWindowId = var31;
    AccessibilityManagerService$SecurityPolicy var32 = this.mSecurityPolicy;
    AccessibilityManagerService$RemoteAccessibilityConnection var47 = new AccessibilityManagerService$RemoteAccessibilityConnection();
    var47.linkToDeath();
    SparseArray var51 = this.mGlobalInteractionConnections;
    var51.put(var29,var47);
    SparseArray var53 = this.mGlobalWindowTokens;
    IBinder var55 = asBinder();
    var53.put(var29,var55);
    94 = load_metadata: <Application,Lcom/android/server/wm/WindowManagerInternal>;
    <Primordial,Ljava/lang/Class>;
    Object var96 = LocalServices.getService(var94);
    WindowManagerInternal var97 = (WindowManagerInternal) var96;
    var97.computeWindowsForAccessibility();<PATH_SEP>Object var6 = this.mLock;
    AccessibilityManagerService$SecurityPolicy var7 = this.mSecurityPolicy;
    int var9 = var7.resolveCallingUserIdEnforcingPermissionsLocked(param5);
    int var11 = UserHandle.getCallingAppId();
    int var13 = UserHandle.getUid(var9,var11);
    AccessibilityManagerService$SecurityPolicy var14 = this.mSecurityPolicy;
    int var16 = UserHandle.getCallingAppId();
    int var29 = sNextWindowId;
    var31 = var29 add 1;
    var31.sNextWindowId = var31;
    AccessibilityManagerService$SecurityPolicy var32 = this.mSecurityPolicy;
    AccessibilityManagerService$RemoteAccessibilityConnection var47 = new AccessibilityManagerService$RemoteAccessibilityConnection();
    var47.linkToDeath();
    SparseArray var51 = this.mGlobalInteractionConnections;
    var51.put(var29,var47);
    SparseArray var53 = this.mGlobalWindowTokens;
    IBinder var55 = asBinder();<PATH_SEP>Object var6 = this.mLock;
    AccessibilityManagerService$SecurityPolicy var7 = this.mSecurityPolicy;
    int var9 = var7.resolveCallingUserIdEnforcingPermissionsLocked(param5);
    int var11 = UserHandle.getCallingAppId();
    int var13 = UserHandle.getUid(var9,var11);
    AccessibilityManagerService$SecurityPolicy var14 = this.mSecurityPolicy;
    int var16 = UserHandle.getCallingAppId();
    int var29 = sNextWindowId;
    var31 = var29 add 1;
    var31.sNextWindowId = var31;
    AccessibilityManagerService$SecurityPolicy var32 = this.mSecurityPolicy;
    AccessibilityManagerService$RemoteAccessibilityConnection var36 = new AccessibilityManagerService$RemoteAccessibilityConnection();
    var36.linkToDeath();
    AccessibilityManagerService$UserState var40 = getUserStateLocked(var9);
    SparseArray var3 = this.mUserStates;
    Object var5 = var3.get(param2);
    AccessibilityManagerService$UserState var6 = (AccessibilityManagerService$UserState) var5;
    AccessibilityManagerService$UserState var8 = new AccessibilityManagerService$UserState();
    SparseArray var10 = this.mUserStates;
    var10.put(param2,var8);
}