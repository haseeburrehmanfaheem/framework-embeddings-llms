// API: startFreezingScreen
// Service: WindowManagerService_3

public void startFreezingScreen() {
    WindowManagerGlobalLock var12 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var14 = this.mClientFreezingScreen;
    this.mClientFreezingScreen = 1;
    long var17 = Binder.clearCallingIdentity();
    startFreezingDisplayLocked(param2,param3);
    DisplayContent var5 = getDefaultDisplayContentLocked();
    startFreezingDisplayLocked(param2,param3,var5);
    boolean var5 = this.mDisplayFrozen;
    boolean var7 = this.mRotatingSeamlessly;
    boolean var9 = isReady();
    WindowManagerPolicy var10 = this.mPolicy;
    boolean var12 = var10.isScreenOn();
    boolean var14 = okToAnimate();
    this.mDisplayFrozen = 1;
    long var19 = SystemClock.elapsedRealtime();
    this.mDisplayFreezeTime = var19;
    this.mLastFinishedFreezeSource = 0;
    int var21 = getDisplayId();
    this.mFrozenDisplayId = var21;
    InputManagerCallback var22 = this.mInputManagerCallback;
    var22.freezeInputDispatchingLw();
    AppTransition var24 = param4.mAppTransition;
    boolean var26 = var24.isTransitionSet();
    AppTransition var27 = param4.mAppTransition;
    var27.freeze();
    LatencyTracker var31 = this.mLatencyTracker;
    var31.onActionStart(6);
    this.mExitAnimId = param2;
    this.mEnterAnimId = param3;
    WindowAnimator var34 = this.mAnimator;
    int var35 = this.mFrozenDisplayId;
    ScreenRotationAnimation var37 = var34.getScreenRotationAnimationLocked(var35);
    var37.kill();
    SurfaceControl var2 = this.mSurfaceControl;
    WindowManagerService var4 = this.mService;
    TransactionFactory var5 = var4.mTransactionFactory;
    SurfaceControl$Transaction var7 = var5.make();
    SurfaceControl var8 = this.mSurfaceControl;
    SurfaceControl$Transaction var10 = var7.remove(var8);<PATH_SEP>WindowManagerGlobalLock var12 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var14 = this.mClientFreezingScreen;
    this.mClientFreezingScreen = 1;
    long var17 = Binder.clearCallingIdentity();
    startFreezingDisplayLocked(param2,param3);
    DisplayContent var5 = getDefaultDisplayContentLocked();
    startFreezingDisplayLocked(param2,param3,var5);
    boolean var5 = this.mDisplayFrozen;
    boolean var7 = this.mRotatingSeamlessly;
    boolean var9 = isReady();
    WindowManagerPolicy var10 = this.mPolicy;
    boolean var12 = var10.isScreenOn();
    boolean var14 = okToAnimate();
    this.mDisplayFrozen = 1;
    long var19 = SystemClock.elapsedRealtime();
    this.mDisplayFreezeTime = var19;
    this.mLastFinishedFreezeSource = 0;
    int var21 = getDisplayId();
    this.mFrozenDisplayId = var21;
    InputManagerCallback var22 = this.mInputManagerCallback;
    var22.freezeInputDispatchingLw();
    AppTransition var24 = param4.mAppTransition;
    boolean var26 = var24.isTransitionSet();
    AppTransition var27 = param4.mAppTransition;
    var27.freeze();
    LatencyTracker var31 = this.mLatencyTracker;
    var31.onActionStart(6);
    this.mExitAnimId = param2;
    this.mEnterAnimId = param3;
    WindowAnimator var34 = this.mAnimator;
    int var35 = this.mFrozenDisplayId;
    ScreenRotationAnimation var37 = var34.getScreenRotationAnimationLocked(var35);
    var37.kill();
    SurfaceControl var2 = this.mSurfaceControl;
    WindowManagerService var4 = this.mService;
    TransactionFactory var5 = var4.mTransactionFactory;
    SurfaceControl$Transaction var7 = var5.make();
    SurfaceControl var8 = this.mSurfaceControl;
    SurfaceControl$Transaction var10 = var7.remove(var8);
    var10.apply();
    this.mSurfaceControl = 0;
    BlackFrame var13 = this.mCustomBlackFrame;
    var13.kill();
    this.mCustomBlackFrame = 0;
    BlackFrame var16 = this.mExitingBlackFrame;
    var16.kill();
    this.mExitingBlackFrame = 0;
    BlackFrame var19 = this.mEnteringBlackFrame;
    var19.kill();
    this.mEnteringBlackFrame = 0;
    Animation var22 = this.mRotateExitAnimation;
    var22.cancel();
    this.mRotateExitAnimation = 0;<PATH_SEP>WindowManagerGlobalLock var12 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var14 = this.mClientFreezingScreen;
    this.mClientFreezingScreen = 1;
    long var17 = Binder.clearCallingIdentity();
    startFreezingDisplayLocked(param2,param3);
    DisplayContent var5 = getDefaultDisplayContentLocked();
    startFreezingDisplayLocked(param2,param3,var5);
    boolean var5 = this.mDisplayFrozen;
    boolean var7 = this.mRotatingSeamlessly;
    boolean var9 = isReady();
    WindowManagerPolicy var10 = this.mPolicy;
    boolean var12 = var10.isScreenOn();
    boolean var14 = okToAnimate();
    this.mDisplayFrozen = 1;
    long var19 = SystemClock.elapsedRealtime();
    this.mDisplayFreezeTime = var19;
    this.mLastFinishedFreezeSource = 0;
    int var21 = getDisplayId();
    this.mFrozenDisplayId = var21;
    InputManagerCallback var22 = this.mInputManagerCallback;
    var22.freezeInputDispatchingLw();
    AppTransition var24 = param4.mAppTransition;
    boolean var26 = var24.isTransitionSet();
    AppTransition var27 = param4.mAppTransition;
    var27.freeze();
    LatencyTracker var31 = this.mLatencyTracker;
    var31.onActionStart(6);
    this.mExitAnimId = param2;
    this.mEnterAnimId = param3;
    WindowAnimator var34 = this.mAnimator;
    int var35 = this.mFrozenDisplayId;
    ScreenRotationAnimation var37 = var34.getScreenRotationAnimationLocked(var35);
    var37.kill();
    SurfaceControl var2 = this.mSurfaceControl;
    WindowManagerService var4 = this.mService;
    TransactionFactory var5 = var4.mTransactionFactory;
    SurfaceControl$Transaction var7 = var5.make();
    SurfaceControl var8 = this.mSurfaceControl;
    SurfaceControl$Transaction var10 = var7.remove(var8);
    var10.apply();
    this.mSurfaceControl = 0;
    BlackFrame var13 = this.mCustomBlackFrame;
    var13.kill();
    this.mCustomBlackFrame = 0;
    BlackFrame var16 = this.mExitingBlackFrame;
    var16.kill();
    this.mExitingBlackFrame = 0;
    BlackFrame var19 = this.mEnteringBlackFrame;
    var19.kill();
    this.mEnteringBlackFrame = 0;
    Animation var22 = this.mRotateExitAnimation;
    Animation var25 = this.mRotateEnterAnimation;
    var25.cancel();<PATH_SEP>WindowManagerGlobalLock var12 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var14 = this.mClientFreezingScreen;
    this.mClientFreezingScreen = 1;
    long var17 = Binder.clearCallingIdentity();
    startFreezingDisplayLocked(param2,param3);
    DisplayContent var5 = getDefaultDisplayContentLocked();
    startFreezingDisplayLocked(param2,param3,var5);
    boolean var5 = this.mDisplayFrozen;
    boolean var7 = this.mRotatingSeamlessly;
    boolean var9 = isReady();
    WindowManagerPolicy var10 = this.mPolicy;
    boolean var12 = var10.isScreenOn();
    boolean var14 = okToAnimate();
    this.mDisplayFrozen = 1;
    long var19 = SystemClock.elapsedRealtime();
    this.mDisplayFreezeTime = var19;
    this.mLastFinishedFreezeSource = 0;
    int var21 = getDisplayId();
    this.mFrozenDisplayId = var21;
    InputManagerCallback var22 = this.mInputManagerCallback;
    var22.freezeInputDispatchingLw();
    AppTransition var24 = param4.mAppTransition;
    boolean var26 = var24.isTransitionSet();
    AppTransition var27 = param4.mAppTransition;
    var27.freeze();
    LatencyTracker var31 = this.mLatencyTracker;
    var31.onActionStart(6);
    this.mExitAnimId = param2;
    this.mEnterAnimId = param3;
    WindowAnimator var34 = this.mAnimator;
    int var35 = this.mFrozenDisplayId;
    ScreenRotationAnimation var37 = var34.getScreenRotationAnimationLocked(var35);
    WindowAnimator$DisplayContentsAnimator var5 = getDisplayContentsAnimatorLocked(param2);
    ScreenRotationAnimation var6 = var5.mScreenRotationAnimation;
    Lcom/android/server/wm/ScreenRotationAnimation var7;
}