// API: addHistoricalOps
// Service: AppOpsService_2

public void addHistoricalOps() {
    Context var3 = this.mContext;
    HistoricalRegistry var7 = this.mHistoricalRegistry;
    var7.addHistoricalOps(param2);
    Object var3 = this.mInMemoryLock;
    boolean var5 = isPersistenceInitializedMLocked();
    HistoricalRegistry$Persistence var2 = this.mPersistence;
    boolean var5<PATH_SEP>Context var3 = this.mContext;
    HistoricalRegistry var7 = this.mHistoricalRegistry;
    var7.addHistoricalOps(param2);
    Object var3 = this.mInMemoryLock;
    boolean var5 = isPersistenceInitializedMLocked();
    long var7 = this.mBaseSnapshotInterval;
    offsetBeginAndEndTime(var7);
    LinkedList var9 = this.mPendingWrites;
    boolean var11 = var9.offerFirst(param2);
    ArrayList var12 = new ArrayList();
    LinkedList var13 = this.mPendingWrites;
    LinkedList var15 = this.mPendingWrites;
    var15.clear();
    persistPendingHistory(var12);
    Object var3 = this.mOnDiskLock;
    Handler var5 = BackgroundThread.getHandler();
    var5.removeMessages(1);
    boolean var9 = isEmpty();
    int var12 = size();
    HistoricalRegistry$Persistence var31 = this.mPersistence;
    var31.persistHistoricalOpsDLocked(param2);
    AtomicDirectory var3 = sHistoricalAppOpsDir;
    File var5 = var3.startWrite();
    AtomicDirectory var6 = sHistoricalAppOpsDir;
    File var8 = var6.getBackupDirectory();
    Set var10 = HistoricalRegistry$Persistence.getHistoricalFileNames(var8);<PATH_SEP>Context var3 = this.mContext;
    HistoricalRegistry var7 = this.mHistoricalRegistry;
    var7.addHistoricalOps(param2);
    Object var3 = this.mInMemoryLock;
    boolean var5 = isPersistenceInitializedMLocked();
    long var7 = this.mBaseSnapshotInterval;
    offsetBeginAndEndTime(var7);<PATH_SEP>Context var3 = this.mContext;
    HistoricalRegistry var7 = this.mHistoricalRegistry;
    var7.addHistoricalOps(param2);
    Object var3 = this.mInMemoryLock;
    boolean var5 = isPersistenceInitializedMLocked();
    long var7 = this.mBaseSnapshotInterval;
    offsetBeginAndEndTime(var7);
    LinkedList var9 = this.mPendingWrites;
    boolean var11 = var9.offerFirst(param2);
    ArrayList var12 = new ArrayList();
    LinkedList var13 = this.mPendingWrites;
    LinkedList var15 = this.mPendingWrites;
    var15.clear();
    persistPendingHistory(var12);
    Object var3 = this.mOnDiskLock;
    Handler var5 = BackgroundThread.getHandler();
    var5.removeMessages(1);
    boolean var9 = isEmpty();
    int var12 = size();
    HistoricalRegistry$Persistence var31 = this.mPersistence;
    var31.persistHistoricalOpsDLocked(param2);
    AtomicDirectory var3 = sHistoricalAppOpsDir;
    File var5 = var3.startWrite();
    AtomicDirectory var6 = sHistoricalAppOpsDir;
    File var8 = var6.getBackupDirectory();
    Set var10 = HistoricalRegistry$Persistence.getHistoricalFileNames(var8);
    handlePersistHistoricalOpsRecursiveDLocked(var5,var8,param2,var10,0);
    AtomicDirectory var13 = sHistoricalAppOpsDir;
    var13.finishWrite();
}