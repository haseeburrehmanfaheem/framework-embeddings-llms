// API: generateKeyWithMetadata
// Service: LockSettingsService_3

public void generateKeyWithMetadata() {
    RecoverableKeyStoreManager var4 = this.mRecoverableKeyStoreManager;
    String var6 = var4.generateKeyWithMetadata(param2,param3);
    Object var7 = Preconditions.checkNotNull(param2,alias is null);{Object var7 = Preconditions.checkNotNull(param2,alias is null);};
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    PlatformKeyManager var13 = this.mPlatformKeyManager;
    PlatformEncryptionKey var15 = var13.getEncryptKey(var11);
    RecoverableKeyGenerator var30 = this.mRecoverableKeyGenerator;
    [B var32 = var30.generateAndStoreKey(var15,var11,var9,param2,param3);
    KeyGenerator var7 = this.mKeyGenerator;
    var7.init(256);
    KeyGenerator var10 = this.mKeyGenerator;
    SecretKey var12 = var10.generateKey();
    WrappedKey var14 = WrappedKey.fromSecretKey(param2,var12,param6);
    RecoverableKeyStoreDb var15 = this.mDatabase;
    long var17 = var15.insertKey(param3,param4,param5,var14);
    RecoverableKeyStoreDbHelper var6 = this.mKeyStoreDbHelper;
    SQLiteDatabase var8 = var6.getWritableDatabase();
    ContentValues var9 = new ContentValues();
    Integer var12 = Integer.valueOf(param2);
    var9.put(user_id,var12);
    Integer var16 = Integer.valueOf(param3);
    var9.put(uid,var16);
    var9.put(alias,param4);
    [B var22 = getNonce();
    var9.put(nonce,var22);
    [B var26 = getKeyMaterial();
    var9.put(wrapped_key,var26);
    Integer var31 = Integer.valueOf(-1);
    var9.put(last_synced_at,var31);
    int var35 = getPlatformKeyGenerationId();
    Integer var37 = Integer.valueOf(var35);
    var9.put(platform_key_generation_id,var37);
    int var41 = getRecoveryStatus();
    Integer var43 = Integer.valueOf(var41);
    var9.put(recovery_status,var43);
    [B var47 = getKeyMetadata();
    var9.putNull(key_metadata);
    long var55 = var8.replace(keys,0,var9);<PATH_SEP>RecoverableKeyStoreManager var4 = this.mRecoverableKeyStoreManager;
    String var6 = var4.generateKeyWithMetadata(param2,param3);
    Object var7 = Preconditions.checkNotNull(param2,alias is null);{Object var7 = Preconditions.checkNotNull(param2,alias is null);};
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    PlatformKeyManager var13 = this.mPlatformKeyManager;
    PlatformEncryptionKey var15 = var13.getEncryptKey(var11);
    RecoverableKeyGenerator var30 = this.mRecoverableKeyGenerator;
    [B var32 = var30.generateAndStoreKey(var15,var11,var9,param2,param3);
    KeyGenerator var7 = this.mKeyGenerator;
    var7.init(256);
    KeyGenerator var10 = this.mKeyGenerator;
    SecretKey var12 = var10.generateKey();
    WrappedKey var14 = WrappedKey.fromSecretKey(param2,var12,param6);
    RecoverableKeyStoreDb var15 = this.mDatabase;
    long var17 = var15.insertKey(param3,param4,param5,var14);
    RecoverableKeyStoreDbHelper var6 = this.mKeyStoreDbHelper;
    SQLiteDatabase var8 = var6.getWritableDatabase();
    ContentValues var9 = new ContentValues();
    Integer var12 = Integer.valueOf(param2);
    var9.put(user_id,var12);
    Integer var16 = Integer.valueOf(param3);
    var9.put(uid,var16);
    var9.put(alias,param4);
    [B var22 = getNonce();
    var9.put(nonce,var22);
    [B var26 = getKeyMaterial();
    var9.put(wrapped_key,var26);
    Integer var31 = Integer.valueOf(-1);
    var9.put(last_synced_at,var31);
    int var35 = getPlatformKeyGenerationId();
    Integer var37 = Integer.valueOf(var35);
    var9.put(platform_key_generation_id,var37);
    int var41 = getRecoveryStatus();
    Integer var43 = Integer.valueOf(var41);
    var9.put(recovery_status,var43);<PATH_SEP>RecoverableKeyStoreManager var4 = this.mRecoverableKeyStoreManager;
    String var6 = var4.generateKeyWithMetadata(param2,param3);
    Object var7 = Preconditions.checkNotNull(param2,alias is null);{Object var7 = Preconditions.checkNotNull(param2,alias is null);};
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    PlatformKeyManager var13 = this.mPlatformKeyManager;
    PlatformEncryptionKey var15 = var13.getEncryptKey(var11);
    RecoverableKeyGenerator var30 = this.mRecoverableKeyGenerator;
    [B var32 = var30.generateAndStoreKey(var15,var11,var9,param2,param3);
    KeyGenerator var7 = this.mKeyGenerator;
    var7.init(256);
    KeyGenerator var10 = this.mKeyGenerator;
    SecretKey var12 = var10.generateKey();
    WrappedKey var14 = WrappedKey.fromSecretKey(param2,var12,param6);
    RecoverableKeyStoreDb var15 = this.mDatabase;
    long var17 = var15.insertKey(param3,param4,param5,var14);
    RecoverableKeyStoreDbHelper var6 = this.mKeyStoreDbHelper;
    SQLiteDatabase var8 = var6.getWritableDatabase();
    ContentValues var9 = new ContentValues();
    Integer var12 = Integer.valueOf(param2);
    var9.put(user_id,var12);
    Integer var16 = Integer.valueOf(param3);
    var9.put(uid,var16);
    var9.put(alias,param4);
    [B var22 = getNonce();
    var9.put(nonce,var22);<PATH_SEP>RecoverableKeyStoreManager var4 = this.mRecoverableKeyStoreManager;
    String var6 = var4.generateKeyWithMetadata(param2,param3);
    Object var7 = Preconditions.checkNotNull(param2,alias is null);{Object var7 = Preconditions.checkNotNull(param2,alias is null);};
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    PlatformKeyManager var13 = this.mPlatformKeyManager;
    PlatformEncryptionKey var15 = var13.getEncryptKey(var11);
    RecoverableKeyGenerator var30 = this.mRecoverableKeyGenerator;
    [B var32 = var30.generateAndStoreKey(var15,var11,var9,param2,param3);
    KeyGenerator var7 = this.mKeyGenerator;
    var7.init(256);
    KeyGenerator var10 = this.mKeyGenerator;
    SecretKey var12 = var10.generateKey();
    WrappedKey var14 = WrappedKey.fromSecretKey(param2,var12,param6);
    RecoverableKeyStoreDb var15 = this.mDatabase;
    long var17 = var15.insertKey(param3,param4,param5,var14);
    RecoverableKeyStoreDbHelper var6 = this.mKeyStoreDbHelper;
    SQLiteDatabase var8 = var6.getWritableDatabase();
    ContentValues var9 = new ContentValues();
    Integer var12 = Integer.valueOf(param2);
    var9.put(user_id,var12);
    Integer var16 = Integer.valueOf(param3);
    var9.put(uid,var16);
    var9.put(alias,param4);
    [B var22 = getNonce();
    var9.put(nonce,var22);
    [B var26 = getKeyMaterial();
    var9.put(wrapped_key,var26);
    Integer var31 = Integer.valueOf(-1);
    var9.put(last_synced_at,var31);
    int var35 = getPlatformKeyGenerationId();
    Integer var37 = Integer.valueOf(var35);
    var9.put(platform_key_generation_id,var37);
}