// API: thawRotation
// Service: WindowManagerService_1

public void thawRotation() {
    thawDisplayRotation(0);
    long var12 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(param2);
    DisplayRotation var19 = var17.getDisplayRotation();
    var19.thawRotation();
    int var2 = this.mUserRotation;
    setUserRotation(0,var2);
    boolean var4 = this.isDefaultDisplay;
    int var7 = this.mUserRotationMode;
    int var9 = this.mUserRotation;
    this.mUserRotation = param3;
    DisplayWindowSettings var11 = this.mDisplayWindowSettings;
    DisplayContent var12 = this.mDisplayContent;
    var11.setUserRotation(var12,param2,param3);
    WindowManagerService var14 = this.mService;
    var14.updateRotation(1,0);<PATH_SEP>thawDisplayRotation(0);
    long var12 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(param2);
    DisplayRotation var19 = var17.getDisplayRotation();
    var19.thawRotation();
    int var2 = this.mUserRotation;
    setUserRotation(0,var2);
    boolean var4 = this.isDefaultDisplay;
    int var7 = this.mUserRotationMode;
    int var9 = this.mUserRotation;
    DisplayWindowSettings var11 = this.mDisplayWindowSettings;
    DisplayContent var12 = this.mDisplayContent;
    var11.setUserRotation(var12,param2,param3);
    WindowManagerService var14 = this.mService;
    var14.updateRotation(1,0);<PATH_SEP>thawDisplayRotation(0);
    long var12 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(param2);
    DisplayRotation var19 = var17.getDisplayRotation();
    var19.thawRotation();
    WindowManagerService.resetPriorityAfterLockedSection();
    Binder.restoreCallingIdentity(var12);
    updateRotationUnchecked(0,0);
    Trace.traceBegin(32,updateRotation);
    long var8 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var9 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var12 = this.mRoot;
    WindowList var13 = var12.mChildren;
    int var15 = var13.size();
    RootWindowContainer var16 = this.mRoot;
    WindowList var17 = var16.mChildren;
    Object var19 = var17.get(var35);
    DisplayContent var20 = (DisplayContent) var19;
    Trace.traceBegin(32,updateRotation: display);
    boolean var24 = var20.updateRotationUnchecked();
    Trace.traceEnd(32);
    var20.setLayoutNeeded();
    this.mLayoutNeeded = 1;<PATH_SEP>thawDisplayRotation(0);
    long var12 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(param2);
    DisplayRotation var19 = var17.getDisplayRotation();
    var19.thawRotation();
    int var2 = this.mUserRotation;
    setUserRotation(0,var2);
    boolean var4 = this.isDefaultDisplay;
    int var7 = this.mUserRotationMode;
    this.mUserRotationMode = param2;
    int var9 = this.mUserRotation;
    DisplayWindowSettings var11 = this.mDisplayWindowSettings;
    DisplayContent var12 = this.mDisplayContent;
    var11.setUserRotation(var12,param2,param3);
}