// API: peekAuthToken
// Service: AccountManagerService_3

public void peekAuthToken() {
    int var5 = Binder.getCallingUid();
    int var32 = Binder.getCallingPid();
    Object var44 = Preconditions.checkNotNull(param2,account cannot be null);{Object var44 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var47 = Preconditions.checkNotNull(param3,authTokenType cannot be null);{Object var47 = Preconditions.checkNotNull(param3,authTokenType cannot be null);};
    int var49 = UserHandle.getCallingUserId();
    String var50 = param2.type;
    boolean var52 = isAccountManagedByCaller(var50,var5,var49);{boolean var52 = isAccountManagedByCaller(var50,var5,var49);};
    long var66 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var68 = getUserAccounts(var49);
    String var70 = readAuthTokenInternal(var68,param2,param3);
    Object var5 = param2.cacheLock;
    Map var7 = AccountManagerService$UserAccounts.access$1200(param2);{Map var7 = AccountManagerService$UserAccounts.access$1200(param2);};
    Object var9 = var7.get(param3);
    Map var10 = (Map) var9;
    Object var12 = param2.dbLock;
    Object var13 = param2.cacheLock;
    Map var15 = AccountManagerService$UserAccounts.access$1200(param2);{Map var15 = AccountManagerService$UserAccounts.access$1200(param2);};
    Object var17 = var15.get(param3);
    Map var18 = (Map) var17;
    AccountsDb var19 = param2.accountsDb;
    Map var21 = var19.findAuthTokensByAccount(param3);
    AccountsDb$DeDatabaseHelper var3 = this.mDeDatabase;
    SQLiteDatabase var5 = var3.getReadableDatabaseUserIsUnlocked();
    HashMap var6 = new HashMap();
    String var8 = COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN;
    String var10 = new String(2);
    String var11 = param2.name;
    arraystore 10[12] = 11;
    String var13 = param2.type;
    arraystore 10[14] = 13;
    Cursor var18 = var5.query(ceDb.authtokens,var8,accounts_id=(select _id FROM accounts WHERE name=? AND type=?),var10,0,0,0);
    boolean var20 = var18.moveToNext();
    String var22 = var18.getString(0);
    SparseArray var3 = this.mRedactions;
    int var5 = var3.indexOfKey(param2);
    String var8 = getString(param2);
    Ljava/lang/String var8<PATH_SEP>int var5 = Binder.getCallingUid();
    int var32 = Binder.getCallingPid();
    Object var44 = Preconditions.checkNotNull(param2,account cannot be null);{Object var44 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var47 = Preconditions.checkNotNull(param3,authTokenType cannot be null);{Object var47 = Preconditions.checkNotNull(param3,authTokenType cannot be null);};
    int var49 = UserHandle.getCallingUserId();
    String var50 = param2.type;
    boolean var52 = isAccountManagedByCaller(var50,var5,var49);{boolean var52 = isAccountManagedByCaller(var50,var5,var49);};
    long var66 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var68 = getUserAccounts(var49);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    File var3 = new File();
    File var5 = Environment.getDataSystemCeDirectory(param2);
    String var9 = var3.getPath();
    Ljava/lang/String var9<PATH_SEP>int var5 = Binder.getCallingUid();
    int var32 = Binder.getCallingPid();
    Object var44 = Preconditions.checkNotNull(param2,account cannot be null);{Object var44 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var47 = Preconditions.checkNotNull(param3,authTokenType cannot be null);{Object var47 = Preconditions.checkNotNull(param3,authTokenType cannot be null);};
    int var49 = UserHandle.getCallingUserId();
    String var50 = param2.type;
    boolean var52 = isAccountManagedByCaller(var50,var5,var49);{boolean var52 = isAccountManagedByCaller(var50,var5,var49);};
    long var66 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var68 = getUserAccounts(var49);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    SparseArray var3 = this.mUsers;
    boolean var5 = Thread.holdsLock(var3);
    Preconditions.checkState(var5,mUsers lock must be held);{Preconditions.checkState(var5,mUsers lock must be held);};
    AccountsDb var8 = param2.accountsDb;
    List var10 = var8.findCeAccountsNotInDe();
    boolean var12 = var10.isEmpty();
    int var17 = var10.size();
    int var24 = AccountManagerService$UserAccounts.access$800(param2);{int var24 = AccountManagerService$UserAccounts.access$800(param2);};
    String var35 = DEBUG_ACTION_SYNC_DE_CE_ACCOUNTS;
    Iterator var39 = var10.iterator();<PATH_SEP>int var5 = Binder.getCallingUid();
    int var32 = Binder.getCallingPid();
    Object var44 = Preconditions.checkNotNull(param2,account cannot be null);{Object var44 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var47 = Preconditions.checkNotNull(param3,authTokenType cannot be null);{Object var47 = Preconditions.checkNotNull(param3,authTokenType cannot be null);};
    int var49 = UserHandle.getCallingUserId();
    String var50 = param2.type;
    boolean var52 = isAccountManagedByCaller(var50,var5,var49);{boolean var52 = isAccountManagedByCaller(var50,var5,var49);};
    long var66 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var68 = getUserAccounts(var49);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}