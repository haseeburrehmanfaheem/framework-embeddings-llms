// API: setForceShowSystemBars
// Service: WindowManagerService_2

public void setForceShowSystemBars() {
    Context var3 = this.mContext;
    WindowManagerGlobalLock var11 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var13 = this.mRoot;
    -$$Lambda$XcHmyRxMY5ULhjLiV-sIKnPtvOM var14 = INSTANCE;
    ArgumentPlaceholder var16 = PooledLambda.__();
    Boolean var18 = Boolean.valueOf(param2);
    PooledConsumer var20 = PooledLambda.obtainConsumer(var14,var16,var18);
    var13.forAllDisplayPolicies(var20);
    WindowManagerService.resetPriorityAfterLockedSection();
    WindowManagerThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.reset();
    int var3 = Process.myTid();
    int var4 = this.mAnimationThreadId;
    int var5 = this.mSurfaceAnimationThreadId;
    reset();
    ThreadLocal var2 = this.mThreadState;
    Object var4 = var2.get();
    ThreadPriorityBooster$PriorityState var5 = (ThreadPriorityBooster$PriorityState) var4;
    int var6 = var5.regionCounter;
    var8 = var6 add -1;
    var5.regionCounter = var8;
    int var9 = var5.regionCounter;
    int var11 = var5.prevPriority;
    int var13 = var5.tid;
    int var14 = var5.prevPriority;
    Process.setThreadPriority(var13,var14);<PATH_SEP>Context var3 = this.mContext;
    WindowManagerGlobalLock var11 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var13 = this.mRoot;
    -$$Lambda$XcHmyRxMY5ULhjLiV-sIKnPtvOM var14 = INSTANCE;
    ArgumentPlaceholder var16 = PooledLambda.__();
    Boolean var18 = Boolean.valueOf(param2);
    PooledConsumer var20 = PooledLambda.obtainConsumer(var14,var16,var18);
    var13.forAllDisplayPolicies(var20);
    WindowList var3 = this.mChildren;
    int var5 = var3.size();
    var7 = var5 add -1;
    WindowList var9 = this.mChildren;
    Object var11 = var9.get(var17);
    DisplayContent var12 = (DisplayContent) var11;
    DisplayPolicy var14 = var12.getDisplayPolicy();
    DisplayPolicy var2 = this.mDisplayPolicy;
    Lcom/android/server/wm/DisplayPolicy var2<PATH_SEP>Context var3 = this.mContext;
    WindowManagerGlobalLock var11 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var13 = this.mRoot;
    -$$Lambda$XcHmyRxMY5ULhjLiV-sIKnPtvOM var14 = INSTANCE;
    ArgumentPlaceholder var16 = PooledLambda.__();
    Boolean var18 = Boolean.valueOf(param2);
    PooledConsumer var20 = PooledLambda.obtainConsumer(var14,var16,var18);
    var13.forAllDisplayPolicies(var20);
    WindowManagerService.resetPriorityAfterLockedSection();
    WindowManagerThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.reset();<PATH_SEP>Context var3 = this.mContext;
    WindowManagerGlobalLock var11 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var13 = this.mRoot;
    -$$Lambda$XcHmyRxMY5ULhjLiV-sIKnPtvOM var14 = INSTANCE;
    ArgumentPlaceholder var16 = PooledLambda.__();
    Boolean var18 = Boolean.valueOf(param2);
    PooledConsumer var20 = PooledLambda.obtainConsumer(var14,var16,var18);
    var13.forAllDisplayPolicies(var20);
    WindowManagerService.resetPriorityAfterLockedSection();
    WindowManagerThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.reset();
    int var3 = Process.myTid();
    int var4 = this.mAnimationThreadId;
    int var5 = this.mSurfaceAnimationThreadId;
}