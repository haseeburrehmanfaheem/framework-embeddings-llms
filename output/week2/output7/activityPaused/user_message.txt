// API: activityPaused
// Service: ActivityTaskManagerService_2

public void activityPaused() {
    long var4 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var5 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStack var8 = ActivityRecord.getStackLocked(param2);
    var8.activityPausedLocked(param2,0);
    ActivityRecord var5 = isInStackLocked(param2);
    Handler var7 = this.mHandler;
    var7.removeMessages(101,var5);
    ActivityRecord var10 = this.mPausingActivity;
    ActivityTaskManagerService var46 = this.mService;
    WindowManagerService var47 = var46.mWindowManager;
    var47.deferSurfaceLayout();
    completePauseLocked(1,0);
    ActivityRecord var4 = this.mPausingActivity;
    var4.setWillCloseOrEnterPip(0);
    ActivityStack$ActivityState var7 = STOPPING;
    boolean var9 = var4.isState(var7);
    ActivityStack$ActivityState var10 = PAUSED;
    var4.setState(var10,completePausedLocked);
    ActivityStack$ActivityState var4 = this.mState;
    this.mState = param2;
    TaskRecord var6 = getTaskRecord();
    var6.onActivityStateChanged(this,param2,param3);
    ActivityStack$ActivityState var10 = STOPPING;
    boolean var12 = isSleeping();
    AppWindowToken var13 = this.mAppWindowToken;
    var13.detachChildren();
    ActivityStack$ActivityState var18 = RESUMED;
    ActivityStack$ActivityState var19 = PAUSED;
    ActivityStack$ActivityState var20 = STOPPED;
    ActivityStack$ActivityState var21 = DESTROYED;
    ActivityTaskManagerService var22 = this.mAtmService;
    var22.updateActivityUsageStats(this,24);
}