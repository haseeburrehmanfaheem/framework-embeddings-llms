// API: getAccountsForPackage
// Service: AccountManagerService_4

public void getAccountsForPackage() {
    int var6 = Binder.getCallingUid();
    boolean var9 = UserHandle.isSameApp(var6,1000);
    int var28 = UserHandle.getCallingUserId();
    Account var31 = getAccountsAsUserForPackage(0,var28,param2,param3,param4,1);
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    Context var13 = this.mContext;
    int var54 = Binder.getCallingUid();
    int var61 = Binder.getCallingPid();
    int var72 = UserHandle.getUserId(var9);
    List var74 = getTypesManagedByCaller(var9,var72);
    List var6 = getTypesForCaller(param2,param3,0);
    ArrayList var5 = new ArrayList();
    long var8 = Binder.clearCallingIdentity();
    IAccountAuthenticatorCache var9 = this.mAuthenticatorCache;
    Collection var11 = var9.getAllServices(param3);
    Binder.restoreCallingIdentity(var8);
    17 = load_metadata: <Application,Landroid/content/pm/PackageManagerInternal>;
    <Primordial,Ljava/lang/Class>;
    Object var19 = LocalServices.getService(var17);
    PackageManagerInternal var20 = (PackageManagerInternal) var19;
    Iterator var22 = var11.iterator();
    Object var27 = var22.next();
    RegisteredServicesCache$ServiceInfo var28 = (RegisteredServicesCache$ServiceInfo) var27;
    int var29 = var28.uid;
    boolean var32 = var20.hasSignatureCapability(var29,param2,16);
    Object var35 = var28.type;
    AuthenticatorDescription var36 = (AuthenticatorDescription) var35;
    String var37 = var36.type;
    boolean var39 = var5.add(var37);<PATH_SEP>int var6 = Binder.getCallingUid();
    boolean var9 = UserHandle.isSameApp(var6,1000);
    int var28 = UserHandle.getCallingUserId();
    Account var31 = getAccountsAsUserForPackage(0,var28,param2,param3,param4,1);
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    Context var13 = this.mContext;
    int var54 = Binder.getCallingUid();
    int var61 = Binder.getCallingPid();
    int var72 = UserHandle.getUserId(var9);
    List var74 = getTypesManagedByCaller(var9,var72);
    boolean var77 = UserHandle.isSameApp(var9,1000);
    boolean var79 = var74.contains(param2);
    List var93 = getTypesVisibleToCaller(var88,param3,var89);
    boolean var95 = var93.isEmpty();
    boolean var97 = var93.contains(param2);
    boolean var102 = var93.contains(param2);
    ArrayList var103 = new ArrayList();
    boolean var106 = var103.add(param2);
    long var113 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var115 = getUserAccounts(param3);
    Account var117 = getAccountsInternal(var115,var88,var89,var109,param7);
    ArrayList var7 = new ArrayList();
    Iterator var10 = iterator();
    Object var15 = var10.next();
    String var16 = (String) var15;
    Account var18 = getAccountsFromCache(param2,var16,param3,param4,param6);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var15 = param2.cacheLock;
    HashMap var16 = param2.accountCache;
    Collection var18 = var16.values();
    Iterator var20 = var18.iterator();
    Account var31 = new Account(var28);
    HashMap var32 = param2.accountCache;
    Collection var34 = var32.values();
    Iterator var36 = var34.iterator();
    Account var51 = filterAccounts(param2,var31,param4,param5,param6);
    int var6 = Binder.getCallingUid();
    boolean var9 = UserHandle.isSameApp(var6,1000);
    int var28 = UserHandle.getCallingUserId();
    Account var31 = getAccountsAsUserForPackage(0,var28,param2,param3,param4,1);
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    Context var13 = this.mContext;
    int var54 = Binder.getCallingUid();
    int var61 = Binder.getCallingPid();
    int var72 = UserHandle.getUserId(var9);
    List var74 = getTypesManagedByCaller(var9,var72);
    boolean var77 = UserHandle.isSameApp(var9,1000);
    boolean var79 = var74.contains(param2);
    List var93 = getTypesVisibleToCaller(var88,param3,var89);
    boolean var95 = var93.isEmpty();
    boolean var97 = var93.contains(param2);
    boolean var102 = var93.contains(param2);
    ArrayList var103 = new ArrayList();
    boolean var106 = var103.add(param2);
    long var113 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var115 = getUserAccounts(param3);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var6 = Binder.getCallingUid();
    boolean var9 = UserHandle.isSameApp(var6,1000);
    int var28 = UserHandle.getCallingUserId();
    Account var31 = getAccountsAsUserForPackage(0,var28,param2,param3,param4,1);
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    Context var13 = this.mContext;
    int var54 = Binder.getCallingUid();
    int var61 = Binder.getCallingPid();
    int var72 = UserHandle.getUserId(var9);
    List var74 = getTypesManagedByCaller(var9,var72);
    boolean var77 = UserHandle.isSameApp(var9,1000);
    boolean var79 = var74.contains(param2);
    List var93 = getTypesVisibleToCaller(var88,param3,var89);
    boolean var95 = var93.isEmpty();
    boolean var97 = var93.contains(param2);
    boolean var102 = var93.contains(param2);
    ArrayList var103 = new ArrayList();
    boolean var106 = var103.add(param2);
    long var113 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var115 = getUserAccounts(param3);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}