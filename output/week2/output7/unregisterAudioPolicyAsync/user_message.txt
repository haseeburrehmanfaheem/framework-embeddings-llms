// API: unregisterAudioPolicyAsync
// Service: AudioService_2

public void unregisterAudioPolicyAsync() {
    unregisterAudioPolicy(param2);
    unregisterAudioPolicyInt(param2);
    IBinder var11 = asBinder();
    HashMap var21 = this.mAudioPolicies;
    HashMap var22 = this.mAudioPolicies;
    IBinder var24 = asBinder();
    Object var26 = var22.remove(var24);
    AudioService$AudioPolicyProxy var27 = (AudioService$AudioPolicyProxy) var26;
    IBinder var30 = asBinder();
    boolean var32 = var30.unlinkToDeath(var27,0);
    var27.release();
    boolean var2 = this.mIsFocusPolicy;
    AudioService var4 = this.this$0;
    MediaFocusControl var6 = AudioService.access$7600(var4);{MediaFocusControl var6 = AudioService.access$7600(var4);};
    IAudioPolicyCallback var7 = this.mPolicyCallback;
    boolean var8 = this.mIsTestFocusPolicy;
    var6.unsetFocusPolicy(var7,var8);
    int var11 = this.mFocusDuckBehavior;
    AudioService var13 = this.this$0;
    MediaFocusControl var15 = AudioService.access$7600(var13);{MediaFocusControl var15 = AudioService.access$7600(var13);};
    var15.setDuckingInExtPolicyAvailable(0);
    boolean var20 = this.mHasFocusListener;
    AudioService var21 = this.this$0;
    MediaFocusControl var23 = AudioService.access$7600(var21);{MediaFocusControl var23 = AudioService.access$7600(var21);};
    IAudioPolicyCallback var24 = this.mPolicyCallback;
    var23.removeFocusFollower(var24);
    AudioService$AudioPolicyProxy$UnregisterOnStopCallback var30 = this.mProjectionCallback;
    IMediaProjection var31 = this.mProjection;
    var31.unregisterCallback(var30);
    long var43 = Binder.clearCallingIdentity();
    ArrayList var44 = this.mMixes;
    int var46 = AudioSystem.registerPolicyMixes(var44,0);
    Binder.restoreCallingIdentity(var43);
}