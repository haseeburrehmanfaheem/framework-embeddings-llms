// API: getLastLocation
// Service: LocationManagerService_3

public void getLastLocation() {
    Object var4 = this.mLock;
    int var9 = getCallerAllowedResolutionLevel();
    String var12 = var7.getProvider();
    checkResolutionLevelIsSufficientForProviderUseLocked(var9,var12);{checkResolutionLevelIsSufficientForProviderUseLocked(var9,var12);};
    int var15 = Binder.getCallingPid();
    int var17 = Binder.getCallingUid();
    long var19 = Binder.clearCallingIdentity();
    LocationBlacklist var20 = this.mBlacklist;
    boolean var22 = var20.isBlacklisted(param3);{boolean var22 = var20.isBlacklisted(param3);};
    String var24 = var7.getProvider();
    LocationManagerService$LocationProvider var28 = getLocationProviderLocked(var26);
    int var30 = UserHandle.getUserId(var17);
    boolean var39 = var28.isUseableLocked();
    HashMap var45 = this.mLastLocationCoarseInterval;
    Object var47 = var45.get(var26);
    Location var48 = (Location) var47;
    String var53 = LocationManagerService.resolutionLevelToOpStr(var9);
    long var55 = SystemClock.elapsedRealtime();
    long var57 = var49.getElapsedRealtimeNanos();
    var59 = var57 div 1000000;
    var60 = var55 sub var59;
    Context var61 = this.mContext;
    ContentResolver var63 = var61.getContentResolver();
    long var75 = Settings$Global.getLong(var63,location_last_location_max_age_millis,1200000);
    String var5 = Settings$Global.getString(this,param2);
    int var4 = getUserId();
    String var6 = Settings$Global.getStringForUser(this,param2,var4);
    HashSet var4 = MOVED_TO_SECURE;
    boolean var6 = var4.contains(param2);
    Settings$NameValueCache var8 = sNameValueCache;
    String var10 = var8.getStringForUser(this,param2,param3);
    Ljava/lang/String var10<PATH_SEP>Object var4 = this.mLock;
    int var9 = getCallerAllowedResolutionLevel();
    String var12 = var7.getProvider();
    checkResolutionLevelIsSufficientForProviderUseLocked(var9,var12);{checkResolutionLevelIsSufficientForProviderUseLocked(var9,var12);};
    int var15 = Binder.getCallingPid();
    int var17 = Binder.getCallingUid();
    long var19 = Binder.clearCallingIdentity();
    LocationBlacklist var20 = this.mBlacklist;
    boolean var22 = var20.isBlacklisted(param3);{boolean var22 = var20.isBlacklisted(param3);};
    String var24 = var7.getProvider();
    LocationManagerService$LocationProvider var28 = getLocationProviderLocked(var26);
    int var30 = UserHandle.getUserId(var17);
    boolean var39 = var28.isUseableLocked();
    HashMap var45 = this.mLastLocationCoarseInterval;
    Object var47 = var45.get(var26);
    Location var48 = (Location) var47;
    String var53 = LocationManagerService.resolutionLevelToOpStr(var9);
    long var55 = SystemClock.elapsedRealtime();
    long var57 = var49.getElapsedRealtimeNanos();
    var59 = var57 div 1000000;
    var60 = var55 sub var59;
    Context var61 = this.mContext;
    ContentResolver var63 = var61.getContentResolver();
    long var75 = Settings$Global.getLong(var63,location_last_location_max_age_millis,1200000);
    var77 = var60 lt var75;
    AppOpsManager var78 = this.mAppOps;
    int var80 = var78.unsafeCheckOp(var53,var17,param3);
    Location var93 = var49.getExtraLocation(noGPSLocation);
    Location var94 = new Location();
    LocationFudger var95 = this.mLocationFudger;
    Location var97 = var95.getOrCreate(var93);
    Object var3 = this.mLock;
    Location var6 = getExtraLocation(coarseLocation);
    Location var15 = addCoarseLocationExtraLocked(param2);
    Location var4 = createCoarseLocked(param2);
    Location var3 = new Location();
    var3.removeBearing();
    var3.removeSpeed();
    var3.removeAltitude();
    var3.setExtras(0);
    double var11 = var3.getLatitude();
    double var13 = var3.getLongitude();
    double var15 = LocationFudger.wrapLatitude(var11);
    double var17 = LocationFudger.wrapLongitude(var13);
    updateRandomOffsetLocked();
    double var19 = this.mOffsetLongitudeMeters;
    double var21 = LocationFudger.metersToDegreesLongitude(var19,var15);
    var22 = var17 add var21;
    double var23 = this.mOffsetLatitudeMeters;
    double var25 = LocationFudger.metersToDegreesLatitude(var23);
    var26 = var15 add var25;
    double var28 = LocationFudger.wrapLatitude(var26);
    double var30 = LocationFudger.wrapLongitude(var22);
    double var31 = this.mGridSizeInMeters;
    double var33 = LocationFudger.metersToDegreesLatitude(var31);
    var34 = var28 div var33;
    long var36 = Math.round(var34);
    37 = conversion(D) 36;
    var38 = var37 mul var33;
    double var39 = this.mGridSizeInMeters;
    double var41 = LocationFudger.metersToDegreesLongitude(var39,var38);
    var42 = var30 div var41;
    long var44 = Math.round(var42);
    45 = conversion(D) 44;
    var46 = var45 mul var41;
    double var48 = LocationFudger.wrapLatitude(var38);
    double var50 = LocationFudger.wrapLongitude(var46);
    var3.setLatitude(var48);
    var3.setLongitude(var50);<PATH_SEP>Object var4 = this.mLock;
    int var9 = getCallerAllowedResolutionLevel();
    String var12 = var7.getProvider();
    checkResolutionLevelIsSufficientForProviderUseLocked(var9,var12);{checkResolutionLevelIsSufficientForProviderUseLocked(var9,var12);};
    int var15 = Binder.getCallingPid();
    int var17 = Binder.getCallingUid();
    long var19 = Binder.clearCallingIdentity();
    LocationBlacklist var20 = this.mBlacklist;
    boolean var22 = var20.isBlacklisted(param3);{boolean var22 = var20.isBlacklisted(param3);};
    String var24 = var7.getProvider();
    LocationManagerService$LocationProvider var28 = getLocationProviderLocked(var26);
    int var30 = UserHandle.getUserId(var17);
    boolean var39 = var28.isUseableLocked();
    HashMap var45 = this.mLastLocationCoarseInterval;
    Object var47 = var45.get(var26);
    Location var48 = (Location) var47;
    String var53 = LocationManagerService.resolutionLevelToOpStr(var9);
    long var55 = SystemClock.elapsedRealtime();
    long var57 = var49.getElapsedRealtimeNanos();
    var59 = var57 div 1000000;
    var60 = var55 sub var59;
    Context var61 = this.mContext;
    ContentResolver var63 = var61.getContentResolver();
    long var75 = Settings$Global.getLong(var63,location_last_location_max_age_millis,1200000);
    var77 = var60 lt var75;
    AppOpsManager var78 = this.mAppOps;
    int var80 = var78.unsafeCheckOp(var53,var17,param3);
    Location var93 = var49.getExtraLocation(noGPSLocation);
    Location var94 = new Location();
    LocationFudger var95 = this.mLocationFudger;
    Location var97 = var95.getOrCreate(var93);
    Object var3 = this.mLock;
    Location var6 = getExtraLocation(coarseLocation);
    float var9 = var6.getAccuracy();
    float var10 = this.mAccuracyInMeters;
    var11 = var9 gt var10;
    Location var13 = addCoarseLocationExtraLocked(param2);
    Landroid/location/Location var13<PATH_SEP>Object var4 = this.mLock;
    int var9 = getCallerAllowedResolutionLevel();
    String var12 = var7.getProvider();
    checkResolutionLevelIsSufficientForProviderUseLocked(var9,var12);{checkResolutionLevelIsSufficientForProviderUseLocked(var9,var12);};
    int var15 = Binder.getCallingPid();
    int var17 = Binder.getCallingUid();
    long var19 = Binder.clearCallingIdentity();
    LocationBlacklist var20 = this.mBlacklist;
    boolean var22 = var20.isBlacklisted(param3);{boolean var22 = var20.isBlacklisted(param3);};
    String var24 = var7.getProvider();
    LocationManagerService$LocationProvider var28 = getLocationProviderLocked(var26);
    int var30 = UserHandle.getUserId(var17);
    boolean var39 = var28.isUseableLocked();
    HashMap var45 = this.mLastLocationCoarseInterval;
    Object var47 = var45.get(var26);
    Location var48 = (Location) var47;
    String var53 = LocationManagerService.resolutionLevelToOpStr(var9);
    long var55 = SystemClock.elapsedRealtime();
    long var57 = var49.getElapsedRealtimeNanos();
    var59 = var57 div 1000000;
    var60 = var55 sub var59;
    Context var61 = this.mContext;
    ContentResolver var63 = var61.getContentResolver();
    long var75 = Settings$Global.getLong(var63,location_last_location_max_age_millis,1200000);
    var77 = var60 lt var75;
    AppOpsManager var78 = this.mAppOps;
    int var80 = var78.unsafeCheckOp(var53,var17,param3);
    Location var93 = var49.getExtraLocation(noGPSLocation);
    Location var94 = new Location();
    LocationFudger var95 = this.mLocationFudger;
    Location var97 = var95.getOrCreate(var93);
    Object var3 = this.mLock;
    Location var6 = getExtraLocation(coarseLocation);
    Location var15 = addCoarseLocationExtraLocked(param2);
    Location var4 = createCoarseLocked(param2);
    setExtraLocation(coarseLocation,var4);
    Landroid/location/Location var4;
}