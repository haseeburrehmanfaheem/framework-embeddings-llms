// API: syncAsUser
// Service: ContentService_4

public void syncAsUser() {
    int var16 = Binder.getCallingUid();
    int var18 = Binder.getCallingPid();
    Bundle var20 = getBundle();
    validateExtras(var16,var20);{validateExtras(var16,var20);};
    int var23 = getSyncExemptionAndCleanUpExtrasForCaller(var16,var20);
    long var25 = ContentService.clearCallingIdentity();
    SyncManager var27 = getSyncManager();
    long var30 = getSyncFlexTime();
    long var32 = getSyncRunTime();
    boolean var34 = isPeriodic();
    Account var36 = getAccount();
    String var38 = getProvider();
    var27.scheduleSync(var36,param3,var16,var38,var20,-2,var23,var16,var18,param4);
    scheduleSync(param2,param3,param4,param5,param6,param7,0,1,param8,param9,param10,param11);
    Bundle var15 = new Bundle();
    int var19 = var17.size();
    Object var30 = new Object(22);
    arraystore 30[14] = 31;
    arraystore 30[27] = 2;
    arraystore 30[20] = 32;
    Integer var34 = Integer.valueOf(param3);
    arraystore 30[26] = 34;
    arraystore 30[25] = 35;
    arraystore 30[24] = 5;
    arraystore 30[36] = 37;
    Integer var40 = Integer.valueOf(param4);
    arraystore 30[38] = 40;
    arraystore 30[41] = 42;
    arraystore 30[43] = 17;
    arraystore 30[44] = 45;
    Integer var48 = Integer.valueOf(param11);
    arraystore 30[46] = 48;
    arraystore 30[49] = 50;
    Integer var53 = Integer.valueOf(param12);
    arraystore 30[51] = 53;
    arraystore 30[54] = 55;
    arraystore 30[56] = 13;
    arraystore 30[57] = 58;
    Long var61 = Long.valueOf(param8);
    arraystore 30[59] = 61;
    arraystore 30[62] = 63;
    Boolean var66 = Boolean.valueOf(param9);
    arraystore 30[64] = 66;
    arraystore 30[67] = 68;
    Integer var71 = Integer.valueOf(param10);
    arraystore 30[69] = 71;
    AccountAndUser var98 = new AccountAndUser(1);
    AccountAndUser var99 = new AccountAndUser();
    arraystore 98[14] = 99;
    boolean var109 = ArrayUtils.isEmpty(var105);
    boolean var112 = var17.getBoolean(upload,0);
    boolean var115 = var17.getBoolean(force,0);
    var17.putBoolean(ignore_backoff,1);
    var17.putBoolean(ignore_settings,1);
    boolean var123 = var17.getBoolean(ignore_settings,0);
    131 = arraylength 105;
    132 = arrayload 105[360];
    int var133 = var132.userId;
    int var134 = var132.userId;
    HashSet var136 = new HashSet();
    SyncAdaptersCache var138 = this.mSyncAdapters;
    int var139 = var132.userId;
    Collection var141 = var138.getAllServices(var139);
    Iterator var143 = var141.iterator();
    boolean var158 = var136.contains(param5);
    var136.clear();
    boolean var161 = var136.add(param5);
    Iterator var166 = var136.iterator();
    Object var170 = var166.next();
    String var171 = (String) var170;
    Account var172 = var132.account;
    int var173 = var132.userId;
    var174 = param9 xor 1;
    int var176 = computeSyncable(var172,var173,var171,var174);
    SyncAdaptersCache var177 = this.mSyncAdapters;
    Account var178 = var132.account;
    String var179 = var178.type;
    SyncAdapterType var181 = SyncAdapterType.newKey(var171,var179);
    int var182 = var132.userId;
    RegisteredServicesCache$ServiceInfo var184 = var177.getServiceInfo(var181,var182);
    int var185 = var184.uid;
    Object var204 = var184.type;
    SyncAdapterType var205 = (SyncAdapterType) var204;
    boolean var207 = var205.allowParallelSyncs();
    Object var208 = var184.type;
    SyncAdapterType var209 = (SyncAdapterType) var208;
    boolean var211 = var209.isAlwaysSyncable();
    SyncStorageEngine var212 = this.mSyncStorageEngine;
    Account var213 = var132.account;
    int var214 = var132.userId;
    var212.setIsSyncable(var213,var214,var171,1,param11,param12);<PATH_SEP>int var16 = Binder.getCallingUid();
    int var18 = Binder.getCallingPid();
    Bundle var20 = getBundle();
    validateExtras(var16,var20);{validateExtras(var16,var20);};
    int var23 = getSyncExemptionAndCleanUpExtrasForCaller(var16,var20);
    long var25 = ContentService.clearCallingIdentity();
    SyncManager var27 = getSyncManager();
    long var30 = getSyncFlexTime();
    long var32 = getSyncRunTime();
    boolean var34 = isPeriodic();
    Account var36 = getAccount();
    String var38 = getProvider();
    var27.scheduleSync(var36,param3,var16,var38,var20,-2,var23,var16,var18,param4);
    scheduleSync(param2,param3,param4,param5,param6,param7,0,1,param8,param9,param10,param11);
    Bundle var15 = new Bundle();
    int var19 = var17.size();
    Object var30 = new Object(22);
    arraystore 30[14] = 31;
    arraystore 30[27] = 2;
    arraystore 30[20] = 32;
    Integer var34 = Integer.valueOf(param3);
    arraystore 30[26] = 34;
    arraystore 30[25] = 35;
    arraystore 30[24] = 5;
    arraystore 30[36] = 37;
    Integer var40 = Integer.valueOf(param4);
    arraystore 30[38] = 40;
    arraystore 30[41] = 42;
    arraystore 30[43] = 17;
    arraystore 30[44] = 45;
    Integer var48 = Integer.valueOf(param11);
    arraystore 30[46] = 48;
    arraystore 30[49] = 50;
    Integer var53 = Integer.valueOf(param12);
    arraystore 30[51] = 53;
    arraystore 30[54] = 55;
    arraystore 30[56] = 13;
    arraystore 30[57] = 58;
    Long var61 = Long.valueOf(param8);
    arraystore 30[59] = 61;
    arraystore 30[62] = 63;
    Boolean var66 = Boolean.valueOf(param9);
    arraystore 30[64] = 66;
    arraystore 30[67] = 68;
    Integer var71 = Integer.valueOf(param10);
    arraystore 30[69] = 71;
    AccountAndUser var98 = new AccountAndUser(1);
    AccountAndUser var99 = new AccountAndUser();
    arraystore 98[14] = 99;
    boolean var109 = ArrayUtils.isEmpty(var105);
    boolean var112 = var17.getBoolean(upload,0);
    boolean var115 = var17.getBoolean(force,0);
    var17.putBoolean(ignore_backoff,1);
    var17.putBoolean(ignore_settings,1);
    boolean var123 = var17.getBoolean(ignore_settings,0);
    131 = arraylength 105;
    132 = arrayload 105[360];
    int var133 = var132.userId;
    int var134 = var132.userId;
    HashSet var136 = new HashSet();
    SyncAdaptersCache var138 = this.mSyncAdapters;
    int var139 = var132.userId;
    Collection var141 = var138.getAllServices(var139);
    Iterator var143 = var141.iterator();
    boolean var158 = var136.contains(param5);
    var136.clear();
    boolean var161 = var136.add(param5);
    Iterator var166 = var136.iterator();
    Object var170 = var166.next();
    String var171 = (String) var170;
    Account var172 = var132.account;
    int var173 = var132.userId;
    var174 = param9 xor 1;
    int var176 = computeSyncable(var172,var173,var171,var174);
    int var8 = getIsSyncable(param2,param3,param4);
    String var10 = param2.type;
    SyncAdapterType var12 = SyncAdapterType.newKey(param4,var10);
    SyncAdaptersCache var13 = this.mSyncAdapters;
    RegisteredServicesCache$ServiceInfo var15 = var13.getServiceInfo(var12,param3);
    int var16 = var15.uid;
    ComponentName var17 = var15.componentName;
    String var19 = var17.getPackageName();
    IActivityManager var21 = ActivityManager.getService();
    boolean var23 = var21.isAppStartModeDisabled(var16,var19);
    int var66 = var15.uid;
    ComponentName var72 = var15.componentName;
    int 0<PATH_SEP>int var16 = Binder.getCallingUid();
    int var18 = Binder.getCallingPid();
    Bundle var20 = getBundle();
    validateExtras(var16,var20);{validateExtras(var16,var20);};
    int var23 = getSyncExemptionAndCleanUpExtrasForCaller(var16,var20);
    long var25 = ContentService.clearCallingIdentity();
    SyncManager var27 = getSyncManager();
    long var30 = getSyncFlexTime();
    long var32 = getSyncRunTime();
    boolean var34 = isPeriodic();
    Account var36 = getAccount();
    String var38 = getProvider();
    var27.scheduleSync(var36,param3,var16,var38,var20,-2,var23,var16,var18,param4);
    scheduleSync(param2,param3,param4,param5,param6,param7,0,1,param8,param9,param10,param11);
    Bundle var15 = new Bundle();
    int var19 = var17.size();
    Object var30 = new Object(22);
    arraystore 30[14] = 31;
    arraystore 30[27] = 2;
    arraystore 30[20] = 32;
    Integer var34 = Integer.valueOf(param3);
    arraystore 30[26] = 34;
    arraystore 30[25] = 35;
    arraystore 30[24] = 5;
    arraystore 30[36] = 37;
    Integer var40 = Integer.valueOf(param4);
    arraystore 30[38] = 40;
    arraystore 30[41] = 42;
    arraystore 30[43] = 17;
    arraystore 30[44] = 45;
    Integer var48 = Integer.valueOf(param11);
    arraystore 30[46] = 48;
    arraystore 30[49] = 50;
    Integer var53 = Integer.valueOf(param12);
    arraystore 30[51] = 53;
    arraystore 30[54] = 55;
    arraystore 30[56] = 13;
    arraystore 30[57] = 58;
    Long var61 = Long.valueOf(param8);
    arraystore 30[59] = 61;
    arraystore 30[62] = 63;
    Boolean var66 = Boolean.valueOf(param9);
    arraystore 30[64] = 66;
    arraystore 30[67] = 68;
    Integer var71 = Integer.valueOf(param10);
    arraystore 30[69] = 71;
    AccountAndUser var98 = new AccountAndUser(1);
    AccountAndUser var99 = new AccountAndUser();
    arraystore 98[14] = 99;
    boolean var109 = ArrayUtils.isEmpty(var105);
    boolean var112 = var17.getBoolean(upload,0);
    boolean var115 = var17.getBoolean(force,0);
    var17.putBoolean(ignore_backoff,1);
    var17.putBoolean(ignore_settings,1);
    boolean var123 = var17.getBoolean(ignore_settings,0);
    131 = arraylength 105;
    132 = arrayload 105[360];
    int var133 = var132.userId;
    int var134 = var132.userId;
    HashSet var136 = new HashSet();
    SyncAdaptersCache var138 = this.mSyncAdapters;
    int var139 = var132.userId;
    Collection var141 = var138.getAllServices(var139);
    Iterator var143 = var141.iterator();
    boolean var158 = var136.contains(param5);
    var136.clear();
    boolean var161 = var136.add(param5);
    Iterator var166 = var136.iterator();
    Object var170 = var166.next();
    String var171 = (String) var170;
    Account var172 = var132.account;
    int var173 = var132.userId;
    var174 = param9 xor 1;
    int var176 = computeSyncable(var172,var173,var171,var174);
    SyncAdaptersCache var177 = this.mSyncAdapters;
    Account var178 = var132.account;
    String var179 = var178.type;
    SyncAdapterType var181 = SyncAdapterType.newKey(var171,var179);
    int var182 = var132.userId;
    RegisteredServicesCache$ServiceInfo var184 = var177.getServiceInfo(var181,var182);
    int var185 = var184.uid;
    Object var204 = var184.type;
    SyncAdapterType var205 = (SyncAdapterType) var204;
    boolean var207 = var205.allowParallelSyncs();
    Object var208 = var184.type;
    SyncAdapterType var209 = (SyncAdapterType) var208;
    boolean var211 = var209.isAlwaysSyncable();
    SyncStorageEngine var212 = this.mSyncStorageEngine;
    Account var213 = var132.account;
    int var214 = var132.userId;
    var212.setIsSyncable(var213,var214,var171,1,param11,param12);
    Object var224 = var184.type;
    SyncAdapterType var225 = (SyncAdapterType) var224;
    boolean var227 = var225.supportsUploading();
    SyncStorageEngine var228 = this.mSyncStorageEngine;
    int var229 = var132.userId;
    boolean var231 = var228.getMasterSyncAutomatically(var229);
    SyncStorageEngine var232 = this.mSyncStorageEngine;
    Account var233 = var132.account;
    int var234 = var132.userId;
    boolean var236 = var232.getSyncAutomatically(var233,var234,var171);
    SparseArray var5 = this.mAuthorities;
    SyncStorageEngine$EndPoint var27 = new SyncStorageEngine$EndPoint();
    SyncStorageEngine$AuthorityInfo var31 = getAuthorityLocked(var27,getSyncAutomatically);
    boolean var32 = var31.enabled;
    boolean var34<PATH_SEP>int var16 = Binder.getCallingUid();
    int var18 = Binder.getCallingPid();
    Bundle var20 = getBundle();
    validateExtras(var16,var20);{validateExtras(var16,var20);};
    int var23 = getSyncExemptionAndCleanUpExtrasForCaller(var16,var20);
    long var25 = ContentService.clearCallingIdentity();
    SyncManager var27 = getSyncManager();
    long var30 = getSyncFlexTime();
    long var32 = getSyncRunTime();
    boolean var34 = isPeriodic();
    Account var36 = getAccount();
    String var38 = getProvider();
    var27.scheduleSync(var36,param3,var16,var38,var20,-2,var23,var16,var18,param4);
    scheduleSync(param2,param3,param4,param5,param6,param7,0,1,param8,param9,param10,param11);
    Bundle var15 = new Bundle();
    int var19 = var17.size();
    Object var30 = new Object(22);
    arraystore 30[14] = 31;
    arraystore 30[27] = 2;
    arraystore 30[20] = 32;
    Integer var34 = Integer.valueOf(param3);
    arraystore 30[26] = 34;
    arraystore 30[25] = 35;
    arraystore 30[24] = 5;
    arraystore 30[36] = 37;
    Integer var40 = Integer.valueOf(param4);
    arraystore 30[38] = 40;
    arraystore 30[41] = 42;
    arraystore 30[43] = 17;
    arraystore 30[44] = 45;
    Integer var48 = Integer.valueOf(param11);
    arraystore 30[46] = 48;
    arraystore 30[49] = 50;
    Integer var53 = Integer.valueOf(param12);
    arraystore 30[51] = 53;
    arraystore 30[54] = 55;
    arraystore 30[56] = 13;
    arraystore 30[57] = 58;
    Long var61 = Long.valueOf(param8);
    arraystore 30[59] = 61;
    arraystore 30[62] = 63;
    Boolean var66 = Boolean.valueOf(param9);
    arraystore 30[64] = 66;
    arraystore 30[67] = 68;
    Integer var71 = Integer.valueOf(param10);
    arraystore 30[69] = 71;
    AccountAndUser var98 = new AccountAndUser(1);
    AccountAndUser var99 = new AccountAndUser();
    arraystore 98[14] = 99;
    boolean var109 = ArrayUtils.isEmpty(var105);
    boolean var112 = var17.getBoolean(upload,0);
    boolean var115 = var17.getBoolean(force,0);
    var17.putBoolean(ignore_backoff,1);
    var17.putBoolean(ignore_settings,1);
    boolean var123 = var17.getBoolean(ignore_settings,0);
    131 = arraylength 105;
    132 = arrayload 105[360];
    int var133 = var132.userId;
    int var134 = var132.userId;
    HashSet var136 = new HashSet();
    SyncAdaptersCache var138 = this.mSyncAdapters;
    int var139 = var132.userId;
    Collection var141 = var138.getAllServices(var139);
    Iterator var143 = var141.iterator();
    boolean var158 = var136.contains(param5);
    var136.clear();
    boolean var161 = var136.add(param5);
    Iterator var166 = var136.iterator();
    Object var170 = var166.next();
    String var171 = (String) var170;
    Account var172 = var132.account;
    int var173 = var132.userId;
    var174 = param9 xor 1;
    int var176 = computeSyncable(var172,var173,var171,var174);
    SyncAdaptersCache var177 = this.mSyncAdapters;
    Account var178 = var132.account;
    String var179 = var178.type;
    SyncAdapterType var181 = SyncAdapterType.newKey(var171,var179);
    int var182 = var132.userId;
    RegisteredServicesCache$ServiceInfo var184 = var177.getServiceInfo(var181,var182);
    int var185 = var184.uid;
    Object var204 = var184.type;
    SyncAdapterType var205 = (SyncAdapterType) var204;
    boolean var207 = var205.allowParallelSyncs();
    Object var208 = var184.type;
    SyncAdapterType var209 = (SyncAdapterType) var208;
    boolean var211 = var209.isAlwaysSyncable();
    SyncStorageEngine var212 = this.mSyncStorageEngine;
    Account var213 = var132.account;
    int var214 = var132.userId;
    var212.setIsSyncable(var213,var214,var171,1,param11,param12);
    Object var224 = var184.type;
    SyncAdapterType var225 = (SyncAdapterType) var224;
    boolean var227 = var225.supportsUploading();
    SyncStorageEngine var228 = this.mSyncStorageEngine;
    int var229 = var132.userId;
    boolean var231 = var228.getMasterSyncAutomatically(var229);
    SyncStorageEngine var232 = this.mSyncStorageEngine;
    Account var233 = var132.account;
    int var234 = var132.userId;
    boolean var236 = var232.getSyncAutomatically(var233,var234,var171);
    SyncStorageEngine$EndPoint var258 = new SyncStorageEngine$EndPoint();
    Account var259 = var132.account;
    int var260 = var132.userId;
    SyncStorageEngine var262 = this.mSyncStorageEngine;
    long var264 = var262.getDelayUntilTime(var258);
    ComponentName var265 = var184.componentName;
    String var267 = var265.getPackageName();
    Bundle var268 = new Bundle();
    Context var270 = this.mContext;
    int var271 = var132.userId;
    -$$Lambda$SyncManager$XKEiBZ17uDgUCTwf_kh9_pH7usQ var272 = new -$$Lambda$SyncManager$XKEiBZ17uDgUCTwf_kh9_pH7usQ();
    SyncManager.sendOnUnsyncableAccount(var270,var184,var271,var272);
}