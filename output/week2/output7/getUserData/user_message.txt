// API: getUserData
// Service: AccountManagerService_3

public void getUserData() {
    int var5 = Binder.getCallingUid();
    Object var13 = new Object(4);
    arraystore 13[11] = 2;
    arraystore 13[10] = 3;
    Integer var15 = Integer.valueOf(var5);
    arraystore 13[6] = 15;
    int var18 = Binder.getCallingPid();
    Integer var20 = Integer.valueOf(var18);
    arraystore 13[16] = 20;
    String var23 = String.format(getUserData( account: %s;
    key: %s;
    callerUid: %s;
    pid: %s,var13);
    Object var31 = Preconditions.checkNotNull(param2,account cannot be null);{Object var31 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var34 = Preconditions.checkNotNull(param3,key cannot be null);{Object var34 = Preconditions.checkNotNull(param3,key cannot be null);};
    int var36 = UserHandle.getCallingUserId();
    String var37 = param2.type;
    boolean var39 = isAccountManagedByCaller(var37,var5,var36);{boolean var39 = isAccountManagedByCaller(var37,var5,var36);};
    long var52 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var54 = getUserAccounts(var36);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var5 = Binder.getCallingUid();
    Object var13 = new Object(4);
    arraystore 13[11] = 2;
    arraystore 13[10] = 3;
    Integer var15 = Integer.valueOf(var5);
    arraystore 13[6] = 15;
    int var18 = Binder.getCallingPid();
    Integer var20 = Integer.valueOf(var18);
    arraystore 13[16] = 20;
    String var23 = String.format(getUserData( account: %s;
    key: %s;
    callerUid: %s;
    pid: %s,var13);
    Object var31 = Preconditions.checkNotNull(param2,account cannot be null);{Object var31 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var34 = Preconditions.checkNotNull(param3,key cannot be null);{Object var34 = Preconditions.checkNotNull(param3,key cannot be null);};
    int var36 = UserHandle.getCallingUserId();
    String var37 = param2.type;
    boolean var39 = isAccountManagedByCaller(var37,var5,var36);{boolean var39 = isAccountManagedByCaller(var37,var5,var36);};
    long var52 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var54 = getUserAccounts(var36);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    AccountsDb$DeDatabaseHelper var2 = this.mDeDatabase;
    boolean var4 = AccountsDb$DeDatabaseHelper.access$700(var2);{boolean var4 = AccountsDb$DeDatabaseHelper.access$700(var2);};
    boolean var4<PATH_SEP>int var5 = Binder.getCallingUid();
    Object var13 = new Object(4);
    arraystore 13[11] = 2;
    arraystore 13[10] = 3;
    Integer var15 = Integer.valueOf(var5);
    arraystore 13[6] = 15;
    int var18 = Binder.getCallingPid();
    Integer var20 = Integer.valueOf(var18);
    arraystore 13[16] = 20;
    String var23 = String.format(getUserData( account: %s;
    key: %s;
    callerUid: %s;
    pid: %s,var13);
    Object var31 = Preconditions.checkNotNull(param2,account cannot be null);{Object var31 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var34 = Preconditions.checkNotNull(param3,key cannot be null);{Object var34 = Preconditions.checkNotNull(param3,key cannot be null);};
    int var36 = UserHandle.getCallingUserId();
    String var37 = param2.type;
    boolean var39 = isAccountManagedByCaller(var37,var5,var36);{boolean var39 = isAccountManagedByCaller(var37,var5,var36);};
    long var52 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var54 = getUserAccounts(var36);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    Context var3 = this.mContext;
    File var4 = this.mPreNDatabaseFile;
    AccountsDb$CeDatabaseHelper var6 = AccountsDb$CeDatabaseHelper.create(var3,var4,param2);
    AccountsDb$DeDatabaseHelper var7 = this.mDeDatabase;
    SQLiteDatabase var9 = var7.getWritableDatabase();
    String var16 = getPath();
    var9.execSQL(var23);
    AccountsDb$DeDatabaseHelper var25 = this.mDeDatabase;
    boolean var28 = AccountsDb$DeDatabaseHelper.access$702(var25,1);{boolean var28 = AccountsDb$DeDatabaseHelper.access$702(var25,1);}<PATH_SEP>int var5 = Binder.getCallingUid();
    Object var13 = new Object(4);
    arraystore 13[11] = 2;
    arraystore 13[10] = 3;
    Integer var15 = Integer.valueOf(var5);
    arraystore 13[6] = 15;
    int var18 = Binder.getCallingPid();
    Integer var20 = Integer.valueOf(var18);
    arraystore 13[16] = 20;
    String var23 = String.format(getUserData( account: %s;
    key: %s;
    callerUid: %s;
    pid: %s,var13);
    Object var31 = Preconditions.checkNotNull(param2,account cannot be null);{Object var31 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var34 = Preconditions.checkNotNull(param3,key cannot be null);{Object var34 = Preconditions.checkNotNull(param3,key cannot be null);};
    int var36 = UserHandle.getCallingUserId();
    String var37 = param2.type;
    boolean var39 = isAccountManagedByCaller(var37,var5,var36);{boolean var39 = isAccountManagedByCaller(var37,var5,var36);};
    long var52 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var54 = getUserAccounts(var36);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}