// API: getRateLimitResetTime
// Service: ShortcutService_3

public void getRateLimitResetTime() {
    Object var5 = this.mLock;
    throwIfUserLockedL(param3);
    long var8 = getNextResetTimeLocked();
    updateTimesLocked();
    long var3 = injectCurrentTimeMillis();
    long var4 = this.mRawLastResetTime;
    long var5 = this.mRawLastResetTime;
    var7 = var5 lt 0;
    var9 = var3 lt var5;
    boolean var18 = ShortcutService.isClockValid(var3);{boolean var18 = ShortcutService.isClockValid(var3);};
    this.mRawLastResetTime = var3;
    long var28 = this.mRawLastResetTime;
    var29 = var4 lt var28;
    scheduleSaveBaseState();<PATH_SEP>Object var5 = this.mLock;
    throwIfUserLockedL(param3);
    long var8 = getNextResetTimeLocked();
    updateTimesLocked();
    long var3 = this.mRawLastResetTime;
    long var4 = this.mResetInterval;
    var5 = var3 add var4;
    long var5<PATH_SEP>Object var5 = this.mLock;
    throwIfUserLockedL(param3);
    long var8 = getNextResetTimeLocked();
    updateTimesLocked();
    long var3 = injectCurrentTimeMillis();
    long var4 = this.mRawLastResetTime;
    long var5 = this.mRawLastResetTime;
    var7 = var5 lt 0;
    var9 = var3 lt var5;
    boolean var18 = ShortcutService.isClockValid(var3);{boolean var18 = ShortcutService.isClockValid(var3);};
    long var28 = this.mRawLastResetTime;
    var29 = var4 lt var28;
    scheduleSaveBaseState();<PATH_SEP>Object var5 = this.mLock;
    throwIfUserLockedL(param3);
    long var8 = getNextResetTimeLocked();
    updateTimesLocked();
    long var3 = injectCurrentTimeMillis();
    long var4 = this.mRawLastResetTime;
    long var5 = this.mRawLastResetTime;
    var7 = var5 lt 0;
    var9 = var3 lt var5;
    long var10 = this.mResetInterval;
    var11 = var5 add var10;
    var12 = var11 lt var3;
    var13 = var5 rem var10;
    var14 = var3 div var10;
    var15 = var14 mul var10;
    var16 = var15 add var13;
    this.mRawLastResetTime = var16;
    long var28 = this.mRawLastResetTime;
    var29 = var4 lt var28;
    scheduleSaveBaseState();
}