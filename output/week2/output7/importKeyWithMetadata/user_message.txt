// API: importKeyWithMetadata
// Service: LockSettingsService_4

public void importKeyWithMetadata() {
    RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    String var7 = var5.importKeyWithMetadata(param2,param3,param4);
    Object var8 = Preconditions.checkNotNull(param2,alias is null);{Object var8 = Preconditions.checkNotNull(param2,alias is null);};
    Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);{Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);};
    12 = arraylength 3;
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getCallingUserId();
    PlatformKeyManager var27 = this.mPlatformKeyManager;
    PlatformEncryptionKey var29 = var27.getEncryptKey(var25);
    RecoverableKeyGenerator var44 = this.mRecoverableKeyGenerator;
    var44.importKey(var29,var25,var23,param2,param3,param4);
    ApplicationKeyStorage var46 = this.mApplicationKeyStorage;
    var46.setSymmetricKeyEntry(var25,var23,param2,param3);
    Locale var6 = US;
    Object var8 = new Object(4);
    Integer var10 = Integer.valueOf(param2);
    arraystore 8[11] = 10;
    Integer var13 = Integer.valueOf(param3);
    arraystore 8[14] = 13;
    arraystore 8[15] = 4;
    16 = arraylength 5;
    Integer var18 = Integer.valueOf(var16);
    arraystore 8[19] = 18;
    String var22 = String.format(var6,Set %d/%d/%s: %d bytes of key material,var8);
    KeyStoreProxy var26 = this.mKeyStore;
    String var28 = getInternalAlias(param2,param3,param4);
    KeyStore$SecretKeyEntry var29 = new KeyStore$SecretKeyEntry();
    SecretKeySpec var30 = new SecretKeySpec();
    KeyProtection$Builder var34 = new KeyProtection$Builder();
    String var37 = new String(1);
    KeyProtection$Builder var39 = var34.setBlockModes(var37);<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    String var7 = var5.importKeyWithMetadata(param2,param3,param4);
    Object var8 = Preconditions.checkNotNull(param2,alias is null);{Object var8 = Preconditions.checkNotNull(param2,alias is null);};
    Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);{Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);};
    12 = arraylength 3;
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getCallingUserId();
    PlatformKeyManager var27 = this.mPlatformKeyManager;
    PlatformEncryptionKey var29 = var27.getEncryptKey(var25);
    RecoverableKeyGenerator var44 = this.mRecoverableKeyGenerator;
    var44.importKey(var29,var25,var23,param2,param3,param4);
    ApplicationKeyStorage var46 = this.mApplicationKeyStorage;
    var46.setSymmetricKeyEntry(var25,var23,param2,param3);
    Locale var6 = US;
    Object var8 = new Object(4);
    Integer var10 = Integer.valueOf(param2);
    arraystore 8[11] = 10;
    Integer var13 = Integer.valueOf(param3);
    arraystore 8[14] = 13;
    arraystore 8[15] = 4;
    16 = arraylength 5;
    Integer var18 = Integer.valueOf(var16);
    arraystore 8[19] = 18;
    String var22 = String.format(var6,Set %d/%d/%s: %d bytes of key material,var8);
    KeyStoreProxy var26 = this.mKeyStore;
    String var28 = getInternalAlias(param2,param3,param4);
    KeyStore$SecretKeyEntry var29 = new KeyStore$SecretKeyEntry();
    SecretKeySpec var30 = new SecretKeySpec();
    KeyProtection$Builder var34 = new KeyProtection$Builder();
    String var37 = new String(1);
    KeyProtection$Builder var39 = var34.setBlockModes(var37);
    String var4 = ArrayUtils.cloneIfNotEmpty(param2);
    this.mBlockModes = var4;
    Landroid/security/keystore/KeyProtection$Builder this<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    String var7 = var5.importKeyWithMetadata(param2,param3,param4);
    Object var8 = Preconditions.checkNotNull(param2,alias is null);{Object var8 = Preconditions.checkNotNull(param2,alias is null);};
    Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);{Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);};
    12 = arraylength 3;
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getCallingUserId();
    PlatformKeyManager var27 = this.mPlatformKeyManager;
    PlatformEncryptionKey var29 = var27.getEncryptKey(var25);
    RecoverableKeyGenerator var44 = this.mRecoverableKeyGenerator;
    var44.importKey(var29,var25,var23,param2,param3,param4);
    SecretKeySpec var8 = new SecretKeySpec();
    WrappedKey var12 = WrappedKey.fromSecretKey(param2,var8,param7);
    RecoverableKeyStoreDb var13 = this.mDatabase;
    long var15 = var13.insertKey(param3,param4,param5,var12);
    RecoverableKeyStoreDbHelper var6 = this.mKeyStoreDbHelper;
    SQLiteDatabase var8 = var6.getWritableDatabase();
    ContentValues var9 = new ContentValues();
    Integer var12 = Integer.valueOf(param2);
    var9.put(user_id,var12);
    Integer var16 = Integer.valueOf(param3);
    var9.put(uid,var16);
    var9.put(alias,param4);
    [B var22 = getNonce();
    var9.put(nonce,var22);
    [B var26 = getKeyMaterial();
    var9.put(wrapped_key,var26);<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    String var7 = var5.importKeyWithMetadata(param2,param3,param4);
    Object var8 = Preconditions.checkNotNull(param2,alias is null);{Object var8 = Preconditions.checkNotNull(param2,alias is null);};
    Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);{Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);};
    12 = arraylength 3;
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getCallingUserId();
    PlatformKeyManager var27 = this.mPlatformKeyManager;
    PlatformEncryptionKey var29 = var27.getEncryptKey(var25);
    RecoverableKeyGenerator var44 = this.mRecoverableKeyGenerator;
    var44.importKey(var29,var25,var23,param2,param3,param4);
    ApplicationKeyStorage var46 = this.mApplicationKeyStorage;
    var46.setSymmetricKeyEntry(var25,var23,param2,param3);
    Locale var6 = US;
    Object var8 = new Object(4);
    Integer var10 = Integer.valueOf(param2);
    arraystore 8[11] = 10;
    Integer var13 = Integer.valueOf(param3);
    arraystore 8[14] = 13;
    arraystore 8[15] = 4;
    16 = arraylength 5;
    Integer var18 = Integer.valueOf(var16);
    arraystore 8[19] = 18;
    String var22 = String.format(var6,Set %d/%d/%s: %d bytes of key material,var8);
    KeyStoreProxy var26 = this.mKeyStore;
    String var28 = getInternalAlias(param2,param3,param4);
    KeyStore$SecretKeyEntry var29 = new KeyStore$SecretKeyEntry();
    SecretKeySpec var30 = new SecretKeySpec();
    KeyProtection$Builder var34 = new KeyProtection$Builder();
    String var37 = new String(1);
    KeyProtection$Builder var39 = var34.setBlockModes(var37);
    String var41 = new String(1);
    KeyProtection$Builder var43 = var39.setEncryptionPaddings(var41);
    KeyProtection var45 = var43.build();
    KeyProtection var2 = new KeyProtection();
    Date var3 = this.mKeyValidityStart;
    Date var4 = this.mKeyValidityForOriginationEnd;
    Date var5 = this.mKeyValidityForConsumptionEnd;
    int var6 = this.mPurposes;
    String var7 = this.mEncryptionPaddings;
    String var8 = this.mSignaturePaddings;
    String var9 = this.mDigests;
    String var10 = this.mBlockModes;
    boolean var11 = this.mRandomizedEncryptionRequired;
    boolean var12 = this.mUserAuthenticationRequired;
    int var13 = this.mUserAuthenticationValidityDurationSeconds;
    boolean var14 = this.mUserPresenceRequired;
    boolean var15 = this.mUserAuthenticationValidWhileOnBody;
    boolean var16 = this.mInvalidatedByBiometricEnrollment;
    long var17 = this.mBoundToSecureUserId;
    boolean var18 = this.mCriticalToDeviceEncryption;
    boolean var19 = this.mUserConfirmationRequired;
    boolean var20 = this.mUnlockedDeviceRequired;
    boolean var21 = this.mIsStrongBoxBacked;
    Landroid/security/keystore/KeyProtection var2;
}