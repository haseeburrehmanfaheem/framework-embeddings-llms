// API: snoozeLimit
// Service: NetworkPolicyManagerService_2

public void snoozeLimit() {
    Context var3 = this.mContext;
    long var8 = Binder.clearCallingIdentity();
    performSnooze(param2,35);
    Clock var4 = this.mClock;
    long var6 = var4.millis();
    Object var7 = this.mUidRulesFirstLock;
    Object var8 = this.mNetworkPoliciesSecondLock;
    ArrayMap var9 = this.mNetworkPolicy;
    Object var11 = var9.get(param2);
    NetworkPolicy var12 = (NetworkPolicy) var11;
    var12.lastRapidSnooze = var6;
    handleNetworkPoliciesUpdateAL(1);
    normalizePoliciesNL();
    updateNetworkEnabledNL();
    updateNetworkRulesNL();
    boolean var2 = LOGV;
    Trace.traceBegin(2097152,updateNetworkRulesNL);
    IConnectivityManager var12 = this.mConnManager;
    NetworkState var14 = var12.getAllNetworkState();
    NetworkState var17 = NetworkPolicyManagerService.defeatNullable(var14);
    SparseIntArray var18 = this.mNetIdToSubId;
    var18.clear();
    ArrayMap var20 = new ArrayMap();
    22 = arraylength 17;
    24 = arrayload 17[49];
    Network var25 = var24.network;
    SparseIntArray var26 = this.mNetIdToSubId;
    Network var27 = var24.network;
    int var28 = var27.netId;
    int var30 = parseSubId(var24);
    var26.put(var28,var30);<PATH_SEP>Context var3 = this.mContext;
    long var8 = Binder.clearCallingIdentity();
    performSnooze(param2,35);
    Clock var4 = this.mClock;
    long var6 = var4.millis();
    Object var7 = this.mUidRulesFirstLock;
    Object var8 = this.mNetworkPoliciesSecondLock;
    ArrayMap var9 = this.mNetworkPolicy;
    Object var11 = var9.get(param2);
    NetworkPolicy var12 = (NetworkPolicy) var11;
    var12.lastRapidSnooze = var6;
    handleNetworkPoliciesUpdateAL(1);
    normalizePoliciesNL();
    updateNetworkEnabledNL();
    updateNetworkRulesNL();
    boolean var2 = LOGV;
    Trace.traceBegin(2097152,updateNetworkRulesNL);
    IConnectivityManager var12 = this.mConnManager;
    NetworkState var14 = var12.getAllNetworkState();
    NetworkState var17 = NetworkPolicyManagerService.defeatNullable(var14);
    SparseIntArray var18 = this.mNetIdToSubId;
    var18.clear();
    ArrayMap var20 = new ArrayMap();
    22 = arraylength 17;
    ArraySet var52 = new ArraySet();
    ArraySet var55 = new ArraySet();
    ArrayMap var57 = this.mNetworkPolicy;
    int var59 = var57.size();
    var60 = var59 sub 1;
    228 = arraylength 17;
    ArraySet var275 = this.mMeteredIfaces;
    int var277 = var275.size();
    var278 = var277 sub 1;
    this.mMeteredIfaces = var52;
    Context var293 = this.mContext;
    ContentResolver var295 = var293.getContentResolver();
    int var298 = Settings$Global.getInt(var295,netpolicy_quota_enabled,1);
    long var300 = QUOTA_UNLIMITED_DEFAULT;
    long var303 = Settings$Global.getLong(var295,netpolicy_quota_unlimited,var300);
    float var307 = Settings$Global.getFloat(var295,netpolicy_quota_limited,1036831949);
    SparseLongArray var308 = this.mSubscriptionOpportunisticQuota;
    var308.clear();
    310 = arraylength 17;
    311 = arrayload 17[414];
    Network var312 = var311.network;
    Network var313 = var311.network;
    int var315 = getSubIdLocked(var313);
    SubscriptionPlan var317 = getPrimarySubscriptionPlanLocked(var315);
    long var319 = var317.getDataLimitBytes();
    NetworkCapabilities var320 = var311.networkCapabilities;
    boolean var323 = var320.hasCapability(18);
    var325 = var319 lt -1;
    SparseLongArray var395 = this.mSubscriptionOpportunisticQuota;
    var395.put(var315,var391);<PATH_SEP>Context var3 = this.mContext;
    long var8 = Binder.clearCallingIdentity();
    performSnooze(param2,35);
    Clock var4 = this.mClock;
    long var6 = var4.millis();
    Object var7 = this.mUidRulesFirstLock;
    Object var8 = this.mNetworkPoliciesSecondLock;
    ArrayMap var9 = this.mNetworkPolicy;
    Object var11 = var9.get(param2);
    NetworkPolicy var12 = (NetworkPolicy) var11;
    var12.lastRapidSnooze = var6;
    handleNetworkPoliciesUpdateAL(1);
    normalizePoliciesNL();
    updateNetworkEnabledNL();
    updateNetworkRulesNL();
    boolean var2 = LOGV;
    Trace.traceBegin(2097152,updateNetworkRulesNL);
    IConnectivityManager var12 = this.mConnManager;
    NetworkState var14 = var12.getAllNetworkState();
    NetworkState var17 = NetworkPolicyManagerService.defeatNullable(var14);
    SparseIntArray var18 = this.mNetIdToSubId;
    var18.clear();
    ArrayMap var20 = new ArrayMap();
    22 = arraylength 17;
    ArraySet var52 = new ArraySet();
    ArraySet var55 = new ArraySet();
    ArrayMap var57 = this.mNetworkPolicy;
    int var59 = var57.size();
    var60 = var59 sub 1;
    ArrayMap var62 = this.mNetworkPolicy;
    Object var64 = var62.valueAt(var210);
    NetworkPolicy var65 = (NetworkPolicy) var64;
    var55.clear();
    int var68 = var20.size();
    var69 = var68 sub 1;
    boolean var89 = LOGD;
    long var110 = var65.warningBytes;
    var111 = var110 lt -1;
    long var113 = var65.limitBytes;
    var114 = var113 lt -1;
    boolean var116 = var65.metered;
    int var163 = var55.size();
    int var171 = var55.size();
    var172 = var171 sub 1;
    Object var174 = var55.valueAt(var180);
    String var175 = (String) var174;
    setInterfaceQuotaAsync(var175,var155);
    boolean var178 = var52.add(var175);<PATH_SEP>Context var3 = this.mContext;
    long var8 = Binder.clearCallingIdentity();
    performSnooze(param2,35);
    Clock var4 = this.mClock;
    long var6 = var4.millis();
    Object var7 = this.mUidRulesFirstLock;
    Object var8 = this.mNetworkPoliciesSecondLock;
    ArrayMap var9 = this.mNetworkPolicy;
    Object var11 = var9.get(param2);
    NetworkPolicy var12 = (NetworkPolicy) var11;
    var12.lastRapidSnooze = var6;
    handleNetworkPoliciesUpdateAL(1);
    normalizePoliciesNL();
    updateNetworkEnabledNL();
    updateNetworkRulesNL();
    boolean var2 = LOGV;
    Trace.traceBegin(2097152,updateNetworkRulesNL);
    IConnectivityManager var12 = this.mConnManager;
    NetworkState var14 = var12.getAllNetworkState();
    NetworkState var17 = NetworkPolicyManagerService.defeatNullable(var14);
    SparseIntArray var18 = this.mNetIdToSubId;
    var18.clear();
    ArrayMap var20 = new ArrayMap();
    22 = arraylength 17;
    ArraySet var52 = new ArraySet();
    ArraySet var55 = new ArraySet();
    ArrayMap var57 = this.mNetworkPolicy;
    int var59 = var57.size();
    var60 = var59 sub 1;
    228 = arraylength 17;
    ArraySet var275 = this.mMeteredIfaces;
    int var277 = var275.size();
    var278 = var277 sub 1;
    this.mMeteredIfaces = var52;
    Context var293 = this.mContext;
    ContentResolver var295 = var293.getContentResolver();
    int var298 = Settings$Global.getInt(var295,netpolicy_quota_enabled,1);
    long var300 = QUOTA_UNLIMITED_DEFAULT;
    long var303 = Settings$Global.getLong(var295,netpolicy_quota_unlimited,var300);
    float var307 = Settings$Global.getFloat(var295,netpolicy_quota_limited,1036831949);
    SparseLongArray var308 = this.mSubscriptionOpportunisticQuota;
    var308.clear();
    310 = arraylength 17;
    311 = arrayload 17[414];
    Network var312 = var311.network;
    Network var313 = var311.network;
    int var315 = getSubIdLocked(var313);
    SubscriptionPlan var317 = getPrimarySubscriptionPlanLocked(var315);
    long var319 = var317.getDataLimitBytes();
    NetworkCapabilities var320 = var311.networkCapabilities;
    boolean var323 = var320.hasCapability(18);
    var325 = var319 lt -1;
    var326 = var319 lt 9223372036854775807;
    Iterator var328 = var317.cycleIterator();
    Object var330 = var328.next();
    Range var331 = (Range) var330;
    Comparable var333 = var331.getLower();
    ZonedDateTime var334 = (ZonedDateTime) var333;
    Instant var336 = var334.toInstant();
    long var338 = var336.toEpochMilli();
    Comparable var340 = var331.getUpper();
    ZonedDateTime var341 = (ZonedDateTime) var340;
    Instant var343 = var341.toInstant();
    long var345 = var343.toEpochMilli();
    Clock var346 = this.mClock;
    Instant var348 = var346.instant();
    Comparable var350 = var331.getLower();
    ZonedDateTime var351 = (ZonedDateTime) var350;
    ZoneId var353 = var351.getZone();
    ZonedDateTime var355 = ZonedDateTime.ofInstant(var348,var353);
    ChronoUnit var356 = DAYS;
    ZonedDateTime var358 = var355.truncatedTo(var356);
    Instant var360 = var358.toInstant();
    long var362 = var360.toEpochMilli();
    String var363 = var311.subscriberId;
    NetworkTemplate var365 = NetworkTemplate.buildTemplateMobileAll(var363);
    long var367 = getTotalBytes(var365,var338,var362);
    var368 = var319 sub var367;
    long var370 = var348.toEpochMilli();
    var371 = var345 sub var370;
    var372 = var371 sub 1;
    TimeUnit var373 = DAYS;
    long var375 = var373.toMillis(1);
    var376 = var372 div var375;
    var377 = var376 add 1;
    var378 = var368 div var377;
    379 = conversion(F) 378;
    var380 = var379 mul var307;
    381 = conversion(J) 380;
    long var383 = Math.max(0,var381);
    SparseLongArray var395 = this.mSubscriptionOpportunisticQuota;
    var395.put(var315,var391);
}