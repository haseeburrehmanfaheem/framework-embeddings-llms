// API: updateAppWidgetIds
// Service: AppWidgetServiceImpl_4

public void updateAppWidgetIds() {
    boolean var5 = DEBUG;
    int var13 = UserHandle.getCallingUserId();
    updateAppWidgetIds(param2,param3,param4,0);
    int var7 = UserHandle.getCallingUserId();
    9 = arraylength 3;
    AppWidgetServiceImpl$SecurityPolicy var10 = this.mSecurityPolicy;
    Object var12 = this.mLock;
    ensureGroupStateLoadedLocked(var7);{ensureGroupStateLoadedLocked(var7);};
    14 = arraylength 3;
    15 = arrayload 3[24];
    int var17 = Binder.getCallingUid();
    AppWidgetServiceImpl$Widget var19 = lookupWidgetLocked(var15,var17,param2);
    updateAppWidgetInstanceLocked(var19,param4,param5);
    AppWidgetServiceImpl$Provider var6 = param2.provider;
    AppWidgetServiceImpl$Provider var7 = param2.provider;
    boolean var8 = var7.zombie;
    AppWidgetServiceImpl$Host var9 = param2.host;
    boolean var10 = var9.zombie;
    RemoteViews var11 = param2.views;
    RemoteViews var13 = param2.views;
    var13.mergeRemoteViews(param3);
    int var17 = Binder.getCallingUid();
    int var19 = UserHandle.getAppId(var17);
    RemoteViews var21 = param2.views;
    RemoteViews var22 = param2.views;
    int var24 = var22.estimateMemoryUsage();
    int var25 = this.mMaxWidgetBitmapMemory;
    RemoteViews var51 = getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(param2,var51);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    SparseLongArray var8 = param2.updateSequenceNos;
    var8.put(0,var6);
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
    AppWidgetServiceImpl$Host var21 = param2.host;
    IAppWidgetHost var22 = var21.callbacks;
    var19.arg2 = var22;
    RemoteViews var24 = clone();
    var19.arg3 = var25;
    Long var29 = Long.valueOf(var6);
    var19.arg4 = var29;
    int var30 = param2.appWidgetId;
    var19.argi1 = var30;
    Handler var31 = this.mCallbackHandler;
    Message var34 = var31.obtainMessage(1,var19);
    var34.sendToTarget();<PATH_SEP>boolean var5 = DEBUG;
    int var13 = UserHandle.getCallingUserId();
    updateAppWidgetIds(param2,param3,param4,0);
    int var7 = UserHandle.getCallingUserId();
    9 = arraylength 3;
    AppWidgetServiceImpl$SecurityPolicy var10 = this.mSecurityPolicy;
    Object var12 = this.mLock;
    ensureGroupStateLoadedLocked(var7);{ensureGroupStateLoadedLocked(var7);};
    14 = arraylength 3;
    15 = arrayload 3[24];
    int var17 = Binder.getCallingUid();
    AppWidgetServiceImpl$Widget var19 = lookupWidgetLocked(var15,var17,param2);
    updateAppWidgetInstanceLocked(var19,param4,param5);
    AppWidgetServiceImpl$Provider var6 = param2.provider;
    AppWidgetServiceImpl$Provider var7 = param2.provider;
    boolean var8 = var7.zombie;
    AppWidgetServiceImpl$Host var9 = param2.host;
    boolean var10 = var9.zombie;
    RemoteViews var11 = param2.views;
    RemoteViews var13 = param2.views;
    var13.mergeRemoteViews(param3);
    int var17 = Binder.getCallingUid();
    int var19 = UserHandle.getAppId(var17);
    RemoteViews var51 = getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(param2,var51);<PATH_SEP>boolean var5 = DEBUG;
    int var13 = UserHandle.getCallingUserId();
    updateAppWidgetIds(param2,param3,param4,0);
    int var7 = UserHandle.getCallingUserId();
    9 = arraylength 3;
    AppWidgetServiceImpl$SecurityPolicy var10 = this.mSecurityPolicy;
    Object var12 = this.mLock;
    ensureGroupStateLoadedLocked(var7);{ensureGroupStateLoadedLocked(var7);};
    14 = arraylength 3;
    15 = arrayload 3[24];
    int var17 = Binder.getCallingUid();
    AppWidgetServiceImpl$Widget var19 = lookupWidgetLocked(var15,var17,param2);
    updateAppWidgetInstanceLocked(var19,param4,param5);
    AppWidgetServiceImpl$Provider var6 = param2.provider;
    AppWidgetServiceImpl$Provider var7 = param2.provider;
    boolean var8 = var7.zombie;
    AppWidgetServiceImpl$Host var9 = param2.host;
    boolean var10 = var9.zombie;
    RemoteViews var11 = param2.views;
    RemoteViews var13 = param2.views;
    var13.mergeRemoteViews(param3);
    int var17 = Binder.getCallingUid();
    int var19 = UserHandle.getAppId(var17);
    RemoteViews var21 = param2.views;
    RemoteViews var22 = param2.views;
    int var24 = var22.estimateMemoryUsage();
    int var25 = this.mMaxWidgetBitmapMemory;
    RemoteViews var51 = getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(param2,var51);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
    AppWidgetServiceImpl$Host var21 = param2.host;
    IAppWidgetHost var22 = var21.callbacks;
    var19.arg2 = var22;
    RemoteViews var24 = clone();
    var19.arg3 = var25;
    Long var29 = Long.valueOf(var6);
    var19.arg4 = var29;
    int var30 = param2.appWidgetId;
    var19.argi1 = var30;<PATH_SEP>boolean var5 = DEBUG;
    int var13 = UserHandle.getCallingUserId();
    updateAppWidgetIds(param2,param3,param4,0);
    int var7 = UserHandle.getCallingUserId();
    9 = arraylength 3;
    AppWidgetServiceImpl$SecurityPolicy var10 = this.mSecurityPolicy;
    Object var12 = this.mLock;
    ensureGroupStateLoadedLocked(var7);{ensureGroupStateLoadedLocked(var7);};
    14 = arraylength 3;
    15 = arrayload 3[24];
    int var17 = Binder.getCallingUid();
    AppWidgetServiceImpl$Widget var19 = lookupWidgetLocked(var15,var17,param2);
    updateAppWidgetInstanceLocked(var19,param4,param5);
    AppWidgetServiceImpl$Provider var6 = param2.provider;
    AppWidgetServiceImpl$Provider var7 = param2.provider;
    boolean var8 = var7.zombie;
    AppWidgetServiceImpl$Host var9 = param2.host;
    boolean var10 = var9.zombie;
    RemoteViews var11 = param2.views;
    RemoteViews var13 = param2.views;
    var13.mergeRemoteViews(param3);
    int var17 = Binder.getCallingUid();
    int var19 = UserHandle.getAppId(var17);
    RemoteViews var21 = param2.views;
    RemoteViews var22 = param2.views;
    int var24 = var22.estimateMemoryUsage();
    int var25 = this.mMaxWidgetBitmapMemory;
    RemoteViews var51 = getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(param2,var51);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
}