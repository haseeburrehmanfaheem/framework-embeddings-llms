// API: forceDexOpt
// Service: PackageManagerService_2

public void forceDexOpt() {
    ArrayMap var5 = this.mPackages;
    ArrayMap var6 = this.mPackages;
    Object var8 = var6.get(param2);
    PackageParser$Package var9 = (PackageParser$Package) var8;
    Object var27 = this.mInstallLock;
    Trace.traceBegin(262144,dexopt);
    DexoptOptions var31 = new DexoptOptions();
    String var33 = PackageManagerServiceCompilerMapping.getDefaultCompilerFilter();
    int var37 = performDexOptInternalWithDependenciesLI(var9,var31);
    boolean var5 = isForce();
    PackageDexOptimizer$ForcedUpdatePackageDexOptimizer var8 = new PackageDexOptimizer$ForcedUpdatePackageDexOptimizer();
    PackageDexOptimizer var9 = this.mPackageDexOptimizer;
    List var15 = PackageManagerService.findSharedLibraries(param2);
    ApplicationInfo var16 = param2.applicationInfo;
    String var18 = InstructionSets.getAppDexInstructionSets(var16);
    boolean var20 = var15.isEmpty();
    DexoptOptions var21 = new DexoptOptions();
    String var23 = getPackageName();
    int var25 = getCompilationReason();
    String var27 = getCompilerFilter();
    String var29 = getSplitName();
    int var31 = getFlags();
    var33 = var31 or 64;
    Iterator var36 = var15.iterator();
    Object var40 = var36.next();
    SharedLibraryInfo var41 = (SharedLibraryInfo) var40;
    ArrayMap var42 = this.mPackages;
    ArrayMap var43 = this.mPackages;
    String var45 = var41.getPackageName();
    Object var47 = var43.get(var45);
    PackageParser$Package var48 = (PackageParser$Package) var47;
    CompilerStats$PackageStats var50 = getOrCreateCompilerPackageStats(var48);
    DexManager var51 = this.mDexManager;
    String var52 = var48.packageName;
    PackageDexUsage$PackageUseInfo var54 = var51.getPackageUseInfoOrDefault(var52);
    int var56 = var12.performDexOpt(var48,var18,var50,var54,var21);
    ApplicationInfo var7 = param2.applicationInfo;
    int var8 = var7.uid;
    Object var28 = this.mInstallLock;
    ApplicationInfo var29 = param2.applicationInfo;
    int var30 = var29.uid;
    int var34 = performDexOptLI(param2,param3,param4,param5,param6);
    ArrayList var7 = param2.usesLibraryInfos;
    String var14 = InstructionSets.getDexCodeInstructionSets(var12);
    List var16 = getAllCodePaths();
    ApplicationInfo var17 = param2.applicationInfo;
    int var18 = var17.uid;
    int var20 = UserHandle.getSharedAppGid(var18);
    ApplicationInfo var27 = param2.applicationInfo;
    String var28 = var27.name;
    ApplicationInfo var34 = param2.applicationInfo;
    int var35 = var34.uid;
    Throwable var40 = new Throwable();
    int var51 = var16.size();
    [Z var52 = new [Z(var51);
    ApplicationInfo var53 = param2.applicationInfo;
    int var54 = var53.flags;
    var56 = var54 and 4;
    arraystore 52[8] = 58;
    int var60 = var16.size();
    ApplicationInfo var74 = param2.applicationInfo;
    String var76 = DexoptUtils.getClassLoaderContexts(var74,var7,var52);
    int var78 = var16.size();
    79 = arraylength 76;
    int var81 = var16.size();
    82 = arrayload 52[184];
    83 = arrayload 76[184];
    Object var85 = var16.get(var184);
    String var86 = (String) var85;
    String var88 = getSplitName();
    String var90 = getSplitName();
    File var91 = new File();
    String var94 = var91.getName();
    boolean var96 = var90.equals(var94);
    String var105 = param2.splitNames;
    var106 = var184 add -1;
    107 = arrayload 105[106];
    String var111 = ArtManager.getProfileName(var108);<PATH_SEP>ArrayMap var5 = this.mPackages;
    ArrayMap var6 = this.mPackages;
    Object var8 = var6.get(param2);
    PackageParser$Package var9 = (PackageParser$Package) var8;
    Object var27 = this.mInstallLock;
    Trace.traceBegin(262144,dexopt);
    DexoptOptions var31 = new DexoptOptions();
    String var33 = PackageManagerServiceCompilerMapping.getDefaultCompilerFilter();
    int var37 = performDexOptInternalWithDependenciesLI(var9,var31);
    boolean var5 = isForce();
    PackageDexOptimizer$ForcedUpdatePackageDexOptimizer var8 = new PackageDexOptimizer$ForcedUpdatePackageDexOptimizer();
    PackageDexOptimizer var9 = this.mPackageDexOptimizer;
    List var15 = PackageManagerService.findSharedLibraries(param2);
    ApplicationInfo var16 = param2.applicationInfo;
    String var18 = InstructionSets.getAppDexInstructionSets(var16);
    boolean var20 = var15.isEmpty();
    DexoptOptions var21 = new DexoptOptions();
    String var23 = getPackageName();
    int var25 = getCompilationReason();
    String var27 = getCompilerFilter();
    String var29 = getSplitName();
    int var31 = getFlags();
    var33 = var31 or 64;
    Iterator var36 = var15.iterator();
    Object var40 = var36.next();
    SharedLibraryInfo var41 = (SharedLibraryInfo) var40;
    ArrayMap var42 = this.mPackages;
    ArrayMap var43 = this.mPackages;
    String var45 = var41.getPackageName();
    Object var47 = var43.get(var45);
    PackageParser$Package var48 = (PackageParser$Package) var47;
    CompilerStats$PackageStats var50 = getOrCreateCompilerPackageStats(var48);
    DexManager var51 = this.mDexManager;
    String var52 = var48.packageName;
    PackageDexUsage$PackageUseInfo var54 = var51.getPackageUseInfoOrDefault(var52);
    int var56 = var12.performDexOpt(var48,var18,var50,var54,var21);
    ApplicationInfo var7 = param2.applicationInfo;
    int var8 = var7.uid;
    Object var28 = this.mInstallLock;
    ApplicationInfo var29 = param2.applicationInfo;
    int var30 = var29.uid;
    int var34 = performDexOptLI(param2,param3,param4,param5,param6);
    ArrayList var7 = param2.usesLibraryInfos;
    String var14 = InstructionSets.getDexCodeInstructionSets(var12);
    List var16 = getAllCodePaths();
    ApplicationInfo var17 = param2.applicationInfo;
    int var18 = var17.uid;
    int var20 = UserHandle.getSharedAppGid(var18);
    int var51 = var16.size();
    [Z var52 = new [Z(var51);
    ApplicationInfo var53 = param2.applicationInfo;
    int var54 = var53.flags;
    var56 = var54 and 4;
    arraystore 52[8] = 58;
    int var60 = var16.size();
    ApplicationInfo var74 = param2.applicationInfo;
    String var76 = DexoptUtils.getClassLoaderContexts(var74,var7,var52);
    int var78 = var16.size();
    79 = arraylength 76;
    int var81 = var16.size();
    82 = arrayload 52[184];
    83 = arrayload 76[184];
    Object var85 = var16.get(var184);
    String var86 = (String) var85;
    String var88 = getSplitName();
    String var90 = getSplitName();
    File var91 = new File();
    String var94 = var91.getName();
    boolean var96 = var90.equals(var94);
    String var105 = param2.splitNames;
    var106 = var184 add -1;
    107 = arrayload 105[106];
    String var111 = ArtManager.getProfileName(var108);<PATH_SEP>ArrayMap var5 = this.mPackages;
    ArrayMap var6 = this.mPackages;
    Object var8 = var6.get(param2);
    PackageParser$Package var9 = (PackageParser$Package) var8;
    Object var27 = this.mInstallLock;
    Trace.traceBegin(262144,dexopt);
    DexoptOptions var31 = new DexoptOptions();
    String var33 = PackageManagerServiceCompilerMapping.getDefaultCompilerFilter();
    int var37 = performDexOptInternalWithDependenciesLI(var9,var31);
    boolean var5 = isForce();
    PackageDexOptimizer$ForcedUpdatePackageDexOptimizer var8 = new PackageDexOptimizer$ForcedUpdatePackageDexOptimizer();
    PackageDexOptimizer var9 = this.mPackageDexOptimizer;
    List var15 = PackageManagerService.findSharedLibraries(param2);
    ApplicationInfo var16 = param2.applicationInfo;
    String var18 = InstructionSets.getAppDexInstructionSets(var16);
    boolean var20 = var15.isEmpty();
    DexoptOptions var21 = new DexoptOptions();
    String var23 = getPackageName();
    int var25 = getCompilationReason();
    String var27 = getCompilerFilter();
    String var29 = getSplitName();
    int var31 = getFlags();
    var33 = var31 or 64;
    Iterator var36 = var15.iterator();
    Object var40 = var36.next();
    SharedLibraryInfo var41 = (SharedLibraryInfo) var40;
    ArrayMap var42 = this.mPackages;
    ArrayMap var43 = this.mPackages;
    String var45 = var41.getPackageName();
    Object var47 = var43.get(var45);
    PackageParser$Package var48 = (PackageParser$Package) var47;
    CompilerStats$PackageStats var50 = getOrCreateCompilerPackageStats(var48);
    DexManager var51 = this.mDexManager;
    String var52 = var48.packageName;
    PackageDexUsage$PackageUseInfo var54 = var51.getPackageUseInfoOrDefault(var52);
    PackageDexUsage var3 = this.mPackageDexUsage;
    PackageDexUsage$PackageUseInfo var5 = var3.getPackageUseInfo(param2);
    Map var3 = this.mPackageUseInfoMap;
    Map var4 = this.mPackageUseInfoMap;
    Object var6 = var4.get(param2);
    PackageDexUsage$PackageUseInfo var7 = (PackageDexUsage$PackageUseInfo) var6;
    PackageDexUsage$PackageUseInfo var9 = new PackageDexUsage$PackageUseInfo();
    Lcom/android/server/pm/dex/PackageDexUsage$PackageUseInfo var11<PATH_SEP>ArrayMap var5 = this.mPackages;
    ArrayMap var6 = this.mPackages;
    Object var8 = var6.get(param2);
    PackageParser$Package var9 = (PackageParser$Package) var8;
    Object var27 = this.mInstallLock;
    Trace.traceBegin(262144,dexopt);
    DexoptOptions var31 = new DexoptOptions();
    String var33 = PackageManagerServiceCompilerMapping.getDefaultCompilerFilter();
    int var37 = performDexOptInternalWithDependenciesLI(var9,var31);
    boolean var5 = isForce();
    PackageDexOptimizer$ForcedUpdatePackageDexOptimizer var8 = new PackageDexOptimizer$ForcedUpdatePackageDexOptimizer();
    PackageDexOptimizer var9 = this.mPackageDexOptimizer;
    List var15 = PackageManagerService.findSharedLibraries(param2);
    ApplicationInfo var16 = param2.applicationInfo;
    String var18 = InstructionSets.getAppDexInstructionSets(var16);
    boolean var20 = var15.isEmpty();
    DexoptOptions var21 = new DexoptOptions();
    String var23 = getPackageName();
    int var25 = getCompilationReason();
    String var27 = getCompilerFilter();
    String var29 = getSplitName();
    int var31 = getFlags();
    var33 = var31 or 64;
    Iterator var36 = var15.iterator();
    Object var40 = var36.next();
    SharedLibraryInfo var41 = (SharedLibraryInfo) var40;
    ArrayMap var42 = this.mPackages;
    ArrayMap var43 = this.mPackages;
    String var45 = var41.getPackageName();
    Object var47 = var43.get(var45);
    PackageParser$Package var48 = (PackageParser$Package) var47;
    CompilerStats$PackageStats var50 = getOrCreateCompilerPackageStats(var48);
    DexManager var51 = this.mDexManager;
    String var52 = var48.packageName;
    PackageDexUsage$PackageUseInfo var54 = var51.getPackageUseInfoOrDefault(var52);
    int var56 = var12.performDexOpt(var48,var18,var50,var54,var21);
    ApplicationInfo var7 = param2.applicationInfo;
    int var8 = var7.uid;
    Object var28 = this.mInstallLock;
    ApplicationInfo var29 = param2.applicationInfo;
    int var30 = var29.uid;
    int var34 = performDexOptLI(param2,param3,param4,param5,param6);
    ArrayList var7 = param2.usesLibraryInfos;
    String var14 = InstructionSets.getDexCodeInstructionSets(var12);
    List var16 = getAllCodePaths();
    ApplicationInfo var17 = param2.applicationInfo;
    int var18 = var17.uid;
    int var20 = UserHandle.getSharedAppGid(var18);
    ApplicationInfo var27 = param2.applicationInfo;
    String var28 = var27.name;
    ApplicationInfo var34 = param2.applicationInfo;
    int var35 = var34.uid;
    Throwable var40 = new Throwable();
    int var51 = var16.size();
    [Z var52 = new [Z(var51);
    ApplicationInfo var53 = param2.applicationInfo;
    int var54 = var53.flags;
    var56 = var54 and 4;
    arraystore 52[8] = 58;
    int var60 = var16.size();
    ApplicationInfo var74 = param2.applicationInfo;
    String var76 = DexoptUtils.getClassLoaderContexts(var74,var7,var52);
    int var78 = var16.size();
    79 = arraylength 76;
    int var81 = var16.size();
    82 = arrayload 52[184];
    83 = arrayload 76[184];
    Object var85 = var16.get(var184);
    String var86 = (String) var85;
    String var88 = getSplitName();
    String var111 = ArtManager.getProfileName(var108);
    boolean var113 = isDexoptInstallWithDexMetadata();
    File var114 = new File();
    File var117 = DexMetadataHelper.findDexMetadataForFile(var114);
}