// API: prepareVpn
// Service: ConnectivityService_4

public void prepareVpn() {
    SparseArray var6 = this.mVpns;
    throwIfLockdownEnabled();
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(param4);
    Vpn var11 = (Vpn) var10;
    boolean var14 = var11.prepare(param2,param3);
    boolean var6 = this.mAlwaysOn;
    boolean var40 = equals([Legacy VPN]);
    prepareInternal(param2);
    long var6 = Binder.clearCallingIdentity();
    String var7 = this.mInterface;
    this.mStatusIntent = 0;
    agentDisconnect();
    String var10 = this.mInterface;
    jniReset(var10);
    this.mInterface = 0;
    NetworkCapabilities var12 = this.mNetworkCapabilities;
    NetworkCapabilities var14 = var12.setUids(0);
    Vpn$Connection var18 = this.mConnection;
    Vpn$Connection var22 = this.mConnection;
    IBinder var24 = Vpn$Connection.access$000(var22);{IBinder var24 = Vpn$Connection.access$000(var22);};
    Parcel var27 = Parcel.obtain();
    boolean var30 = var24.transact(16777215,var27,0,1);
    Context var38 = this.mContext;
    Vpn$Connection var39 = this.mConnection;
    var38.unbindService(var39);
    this.mConnection = 0;
    INetworkManagementService var44 = this.mNetd;
    int var45 = this.mOwnerUID;
    var44.denyProtect(var45);
    String var76 = this.mPackage;
    this.mPackage = param2;
    int var88 = this.mUserHandle;
    int var90 = getAppUid(param2,var88);
    this.mOwnerUID = var90;
    boolean var92 = doesPackageTargetAtLeastQ(param2);
    this.mIsPackageTargetingAtLeastQ = var92;
    INetworkManagementService var93 = this.mNetd;
    int var94 = this.mOwnerUID;
    var93.allowProtect(var94);
    this.mConfig = 0;
    NetworkInfo$DetailedState var121 = IDLE;
    updateState(var121,prepare);
    boolean var124 = this.mLockdown;
    setVpnForcedLocked(var124);
    String var3 = this.mPackage;
    boolean var5 = Vpn.isNullOrLegacyVpn(var3);
    ArrayList var7 = new ArrayList();
    List var8 = this.mLockdownWhitelist;
    String var10 = this.mPackage;
    boolean var12 = var7.add(var10);<PATH_SEP>SparseArray var6 = this.mVpns;
    throwIfLockdownEnabled();
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(param4);
    Vpn var11 = (Vpn) var10;
    boolean var14 = var11.prepare(param2,param3);
    boolean var6 = this.mAlwaysOn;
    boolean var40 = equals([Legacy VPN]);
    prepareInternal(param2);
    long var6 = Binder.clearCallingIdentity();
    String var7 = this.mInterface;
    this.mStatusIntent = 0;
    agentDisconnect();
    String var10 = this.mInterface;
    jniReset(var10);
    this.mInterface = 0;
    NetworkCapabilities var12 = this.mNetworkCapabilities;
    NetworkCapabilities var14 = var12.setUids(0);
    Vpn$Connection var18 = this.mConnection;
    Vpn$Connection var22 = this.mConnection;
    IBinder var24 = Vpn$Connection.access$000(var22);{IBinder var24 = Vpn$Connection.access$000(var22);};
    Parcel var27 = Parcel.obtain();
    boolean var30 = var24.transact(16777215,var27,0,1);
    Context var38 = this.mContext;
    Vpn$Connection var39 = this.mConnection;
    var38.unbindService(var39);
    this.mConnection = 0;
    INetworkManagementService var44 = this.mNetd;
    int var45 = this.mOwnerUID;
    var44.denyProtect(var45);
    String var76 = this.mPackage;
    this.mPackage = param2;
    int var88 = this.mUserHandle;
    int var90 = getAppUid(param2,var88);
    this.mOwnerUID = var90;
    boolean var92 = doesPackageTargetAtLeastQ(param2);
    this.mIsPackageTargetingAtLeastQ = var92;
    INetworkManagementService var93 = this.mNetd;
    int var94 = this.mOwnerUID;
    var93.allowProtect(var94);
    this.mConfig = 0;
    NetworkInfo$DetailedState var121 = IDLE;
    updateState(var121,prepare);
    boolean var124 = this.mLockdown;
    setVpnForcedLocked(var124);
    String var3 = this.mPackage;
    boolean var5 = Vpn.isNullOrLegacyVpn(var3);
    ArrayList var7 = new ArrayList();
    List var8 = this.mLockdownWhitelist;
    String var10 = this.mPackage;
    boolean var12 = var7.add(var10);
    ArraySet var16 = new ArraySet();
    Set var17 = this.mBlockedUsers;
    Set var20 = Collections.emptySet();
    int var22 = this.mUserHandle;
    Set var24 = createUserAndRestrictedProfilesRanges(var22,0,var13);
    Iterator var26 = var24.iterator();
    boolean var48 = var16.removeAll(var24);
    Set var49 = this.mBlockedUsers;
    boolean var51 = var24.removeAll(var49);
    boolean var56 = setAllowOnlyVpnForUids(0,var16);
    boolean var58 = setAllowOnlyVpnForUids(1,var52);<PATH_SEP>SparseArray var6 = this.mVpns;
    throwIfLockdownEnabled();
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(param4);
    Vpn var11 = (Vpn) var10;
    boolean var14 = var11.prepare(param2,param3);
    boolean var6 = this.mAlwaysOn;
    boolean var40 = equals([Legacy VPN]);
    prepareInternal(param2);
    long var6 = Binder.clearCallingIdentity();
    String var7 = this.mInterface;
    this.mStatusIntent = 0;
    agentDisconnect();
    String var10 = this.mInterface;
    jniReset(var10);
    this.mInterface = 0;
    NetworkCapabilities var12 = this.mNetworkCapabilities;
    NetworkCapabilities var14 = var12.setUids(0);
    Vpn$Connection var18 = this.mConnection;
    Vpn$Connection var22 = this.mConnection;
    IBinder var24 = Vpn$Connection.access$000(var22);{IBinder var24 = Vpn$Connection.access$000(var22);};
    Parcel var27 = Parcel.obtain();
    boolean var30 = var24.transact(16777215,var27,0,1);
    Context var38 = this.mContext;
    Vpn$Connection var39 = this.mConnection;
    var38.unbindService(var39);
    this.mConnection = 0;
    INetworkManagementService var44 = this.mNetd;
    int var45 = this.mOwnerUID;
    var44.denyProtect(var45);
    String var76 = this.mPackage;
    this.mPackage = param2;
    int var88 = this.mUserHandle;
    int var90 = getAppUid(param2,var88);
    this.mOwnerUID = var90;
    boolean var92 = doesPackageTargetAtLeastQ(param2);
    this.mIsPackageTargetingAtLeastQ = var92;
    INetworkManagementService var93 = this.mNetd;
    int var94 = this.mOwnerUID;
    var93.allowProtect(var94);
    this.mConfig = 0;
    NetworkInfo$DetailedState var121 = IDLE;
    updateState(var121,prepare);
    boolean var124 = this.mLockdown;
    setVpnForcedLocked(var124);
    String var3 = this.mPackage;
    boolean var5 = Vpn.isNullOrLegacyVpn(var3);
    ArrayList var7 = new ArrayList();
    List var8 = this.mLockdownWhitelist;
    String var10 = this.mPackage;
    boolean var12 = var7.add(var10);
    ArraySet var16 = new ArraySet();
    Set var17 = this.mBlockedUsers;
    Set var20 = Collections.emptySet();
    boolean var56 = setAllowOnlyVpnForUids(0,var16);<PATH_SEP>SparseArray var6 = this.mVpns;
    throwIfLockdownEnabled();
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(param4);
    Vpn var11 = (Vpn) var10;
    boolean var14 = var11.prepare(param2,param3);
    boolean var6 = this.mAlwaysOn;
    boolean var40 = equals([Legacy VPN]);
    prepareInternal(param2);
    long var6 = Binder.clearCallingIdentity();
    String var7 = this.mInterface;
    this.mStatusIntent = 0;
    agentDisconnect();
    String var10 = this.mInterface;
    jniReset(var10);
    this.mInterface = 0;
    NetworkCapabilities var12 = this.mNetworkCapabilities;
    NetworkCapabilities var14 = var12.setUids(0);
    Vpn$Connection var18 = this.mConnection;
    Vpn$Connection var22 = this.mConnection;
    IBinder var24 = Vpn$Connection.access$000(var22);{IBinder var24 = Vpn$Connection.access$000(var22);};
    Parcel var27 = Parcel.obtain();
    boolean var30 = var24.transact(16777215,var27,0,1);
    Context var38 = this.mContext;
    Vpn$Connection var39 = this.mConnection;
    var38.unbindService(var39);
    this.mConnection = 0;
    INetworkManagementService var44 = this.mNetd;
    int var45 = this.mOwnerUID;
    var44.denyProtect(var45);
    String var76 = this.mPackage;
    this.mPackage = param2;
    int var88 = this.mUserHandle;
    int var90 = getAppUid(param2,var88);
    this.mOwnerUID = var90;
    boolean var92 = doesPackageTargetAtLeastQ(param2);
    this.mIsPackageTargetingAtLeastQ = var92;
    INetworkManagementService var93 = this.mNetd;
    int var94 = this.mOwnerUID;
    var93.allowProtect(var94);
    this.mConfig = 0;
    NetworkInfo$DetailedState var121 = IDLE;
    updateState(var121,prepare);
    boolean var124 = this.mLockdown;
    setVpnForcedLocked(var124);
    String var3 = this.mPackage;
    boolean var5 = Vpn.isNullOrLegacyVpn(var3);
    ArraySet var16 = new ArraySet();
    Set var17 = this.mBlockedUsers;
    Set var20 = Collections.emptySet();
    boolean var56 = setAllowOnlyVpnForUids(0,var16);
}