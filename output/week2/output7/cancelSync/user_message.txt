// API: cancelSync
// Service: ContentService_4

public void cancelSync() {
    int var6 = UserHandle.getCallingUserId();
    cancelSyncAsUser(param2,param3,param4,var6);
    int var8 = length();
    long var23 = ContentService.clearCallingIdentity();
    SyncManager var25 = getSyncManager();
    SyncStorageEngine$EndPoint var26 = new SyncStorageEngine$EndPoint();
    var25.clearScheduledSyncOperations(var26);
    List var4 = getAllPendingSyncs();
    Iterator var6 = var4.iterator();
    Object var11 = var6.next();
    SyncOperation var12 = (SyncOperation) var11;
    boolean var13 = var12.isPeriodic;
    SyncStorageEngine$EndPoint var14 = var12.target;
    boolean var16 = var14.matchesSpec(param2);
    cancelJob(var12,clearScheduledSyncOperations);
    boolean var5 = param2.isPeriodic;
    Object var8 = new Object(4);
    arraystore 8[4] = 9;
    arraystore 8[10] = 2;
    arraystore 8[11] = 12;
    arraystore 8[13] = 3;
    JobScheduler var17 = getJobScheduler();
    int var18 = param2.jobId;
    var17.cancel(var18);<PATH_SEP>int var6 = UserHandle.getCallingUserId();
    cancelSyncAsUser(param2,param3,param4,var6);
    int var8 = length();
    long var23 = ContentService.clearCallingIdentity();
    SyncManager var25 = getSyncManager();
    SyncStorageEngine$EndPoint var26 = new SyncStorageEngine$EndPoint();
    var25.clearScheduledSyncOperations(var26);
    List var4 = getAllPendingSyncs();
    Iterator var6 = var4.iterator();
    Object var11 = var6.next();
    SyncOperation var12 = (SyncOperation) var11;
    boolean var13 = var12.isPeriodic;
    SyncStorageEngine$EndPoint var14 = var12.target;
    boolean var16 = var14.matchesSpec(param2);
    int var3 = this.userId;
    int var4 = param2.userId;
    Account var7 = param2.account;
    Account var8 = this.account;
    boolean var10 = var8.equals(var7);
    String var14 = param2.provider;
    String var15 = this.provider;
    boolean var17 = var15.equals(var14);
    boolean var22<PATH_SEP>int var6 = UserHandle.getCallingUserId();
    cancelSyncAsUser(param2,param3,param4,var6);
    int var8 = length();
    long var23 = ContentService.clearCallingIdentity();
    SyncManager var25 = getSyncManager();
    SyncStorageEngine$EndPoint var26 = new SyncStorageEngine$EndPoint();
    var25.clearScheduledSyncOperations(var26);
    List var4 = getAllPendingSyncs();
    Iterator var6 = var4.iterator();
    Object var11 = var6.next();
    SyncOperation var12 = (SyncOperation) var11;
    boolean var13 = var12.isPeriodic;
    SyncStorageEngine$EndPoint var14 = var12.target;
    boolean var16 = var14.matchesSpec(param2);
    cancelJob(var12,clearScheduledSyncOperations);
    SyncStorageEngine var20 = getSyncStorageEngine();
    SyncStorageEngine$EndPoint var21 = var12.target;
    var20.markPending(var21,0);
    SparseArray var4 = this.mAuthorities;
    SyncStorageEngine$AuthorityInfo var8 = getOrCreateAuthorityLocked(param2,-1,1);
    int var10 = var8.ident;
    SyncStatusInfo var12 = getOrCreateSyncStatusLocked(var10);
    var12.pending = param3;<PATH_SEP>int var6 = UserHandle.getCallingUserId();
    cancelSyncAsUser(param2,param3,param4,var6);
    int var8 = length();
    long var23 = ContentService.clearCallingIdentity();
    SyncManager var25 = getSyncManager();
    SyncStorageEngine$EndPoint var26 = new SyncStorageEngine$EndPoint();
    var25.clearScheduledSyncOperations(var26);
    List var4 = getAllPendingSyncs();
    Iterator var6 = var4.iterator();
    SyncStorageEngine var28 = this.mSyncStorageEngine;
    var28.setBackoff(param2,-1,-1);
    SparseArray var35 = this.mAuthorities;
    Account var36 = param2.account;
    String var38 = param2.provider;
    SyncStorageEngine$AuthorityInfo var41 = getOrCreateAuthorityLocked(param2,-1,1);
    long var42 = var41.backoffTime;
    var43 = var42 lt param3;
    long var44 = var41.backoffDelay;
    var45 = var44 lt param4;
    var41.backoffTime = param3;
    var41.backoffDelay = param4;
}