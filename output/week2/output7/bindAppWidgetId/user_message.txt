// API: bindAppWidgetId
// Service: AppWidgetServiceImpl_6

public void bindAppWidgetId() {
    int var8 = UserHandle.getCallingUserId();
    boolean var9 = DEBUG;
    AppWidgetServiceImpl$SecurityPolicy var26 = this.mSecurityPolicy;
    AppWidgetServiceImpl$SecurityPolicy var28 = this.mSecurityPolicy;
    AppWidgetServiceImpl$SecurityPolicy var31 = this.mSecurityPolicy;
    String var33 = getPackageName();
    Object var36 = this.mLock;
    ensureGroupStateLoadedLocked(var8);{ensureGroupStateLoadedLocked(var8);};
    AppWidgetServiceImpl$SecurityPolicy var38 = this.mSecurityPolicy;
    int var42 = Binder.getCallingUid();
    AppWidgetServiceImpl$Widget var44 = lookupWidgetLocked(param3,var42,param2);
    AppWidgetServiceImpl$Provider var45 = var44.provider;
    String var47 = getPackageName();
    int var49 = getUidForPackage(var47,param4);
    AppWidgetServiceImpl$ProviderId var50 = new AppWidgetServiceImpl$ProviderId();
    AppWidgetServiceImpl$Provider var53 = lookupProviderLocked(var50);
    boolean var54 = var53.zombie;
    var44.provider = var53;
    Bundle var58 = AppWidgetServiceImpl.cloneIfLocalBinder(param6);
    var44.options = var59;
    Bundle var62 = var44.options;
    boolean var65 = var62.containsKey(appWidgetCategory);
    Bundle var67 = var44.options;
    var67.putInt(appWidgetCategory,1);
    ArrayList var71 = var53.widgets;
    boolean var73 = var71.add(var44);
    onWidgetProviderAddedOrChangedLocked(var44);
    AppWidgetServiceImpl$Provider var3 = param2.provider;
    AppWidgetServiceImpl$Provider var5 = param2.provider;
    int var7 = var5.getUserId();
    SparseArray var8 = this.mWidgetPackages;
    Object var10 = var8.get(var7);
    ArraySet var11 = (ArraySet) var10;
    SparseArray var12 = this.mWidgetPackages;
    ArraySet var13 = new ArraySet();
    var12.put(var7,var13);
    AppWidgetServiceImpl$Provider var18 = param2.provider;
    AppWidgetProviderInfo var19 = var18.info;
    ComponentName var20 = var19.provider;
    String var22 = var20.getPackageName();
    boolean var24 = var16.add(var22);
    AppWidgetServiceImpl$Provider var25 = param2.provider;
    boolean var27 = var25.isMaskedLocked();
    AppWidgetServiceImpl$Provider var30 = param2.provider;
    maskWidgetsViewsLocked(var30,param2);
    ArrayList var4 = param2.widgets;
    int var6 = var4.size();
    AppWidgetProviderInfo var8 = param2.info;
    ComponentName var9 = var8.provider;
    String var11 = var9.getPackageName();
    int var13 = getUserId();
    Bitmap var15 = createMaskedWidgetBitmap(var11,var13);
    long var17 = Binder.clearCallingIdentity();
    boolean var18 = param2.maskedBySuspendedPackage;
    UserManager var29 = this.mUserManager;
    UserInfo var31 = var29.getUserInfo(var13);
    boolean var33 = var31.isManagedProfile();
    PackageManagerInternal var34 = this.mPackageManagerInternal;
    String var36 = var34.getSuspendingPackage(var11,var13);
    boolean var39 = equals(var36);
    DevicePolicyManagerInternal var45 = this.mDevicePolicyManagerInternal;
    Intent var47 = var45.createShowAdminSupportIntent(var13,1);
    ArrayList var58 = param2.widgets;
    Object var60 = var58.get(var85);
    AppWidgetServiceImpl$Widget var61 = (AppWidgetServiceImpl$Widget) var60;
    Context var62 = this.mContext;
    int var63 = var61.appWidgetId;
    PendingIntent var66 = PendingIntent.getActivity(var62,var63,var55,134217728);
    RemoteViews var72 = createMaskedWidgetRemoteViews(var15,var53,var68);
    boolean var74 = AppWidgetServiceImpl$Widget.access$900(var61,var72);{boolean var74 = AppWidgetServiceImpl$Widget.access$900(var61,var72);};
    RemoteViews var76 = var61.getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(var61,var76);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
    AppWidgetServiceImpl$Host var21 = param2.host;
    IAppWidgetHost var22 = var21.callbacks;
    var19.arg2 = var22;
    var19.arg3 = var25;
    Long var29 = Long.valueOf(var6);
    var19.arg4 = var29;
    int var30 = param2.appWidgetId;
    var19.argi1 = var30;
    Handler var31 = this.mCallbackHandler;
    Message var34 = var31.obtainMessage(1,var19);
    var34.sendToTarget();<PATH_SEP>int var8 = UserHandle.getCallingUserId();
    boolean var9 = DEBUG;
    AppWidgetServiceImpl$SecurityPolicy var26 = this.mSecurityPolicy;
    AppWidgetServiceImpl$SecurityPolicy var28 = this.mSecurityPolicy;
    AppWidgetServiceImpl$SecurityPolicy var31 = this.mSecurityPolicy;
    String var33 = getPackageName();
    Object var36 = this.mLock;
    ensureGroupStateLoadedLocked(var8);{ensureGroupStateLoadedLocked(var8);};
    AppWidgetServiceImpl$SecurityPolicy var38 = this.mSecurityPolicy;
    int var42 = Binder.getCallingUid();
    AppWidgetServiceImpl$Widget var44 = lookupWidgetLocked(param3,var42,param2);
    AppWidgetServiceImpl$Provider var45 = var44.provider;
    String var47 = getPackageName();
    int var49 = getUidForPackage(var47,param4);
    AppWidgetServiceImpl$ProviderId var50 = new AppWidgetServiceImpl$ProviderId();
    AppWidgetServiceImpl$Provider var53 = lookupProviderLocked(var50);
    boolean var54 = var53.zombie;
    var44.provider = var53;
    Bundle var58 = AppWidgetServiceImpl.cloneIfLocalBinder(param6);
    var44.options = var59;
    Bundle var62 = var44.options;
    boolean var65 = var62.containsKey(appWidgetCategory);
    Bundle var67 = var44.options;
    var67.putInt(appWidgetCategory,1);
    ArrayList var71 = var53.widgets;
    boolean var73 = var71.add(var44);
    onWidgetProviderAddedOrChangedLocked(var44);
    AppWidgetServiceImpl$Provider var3 = param2.provider;
    AppWidgetServiceImpl$Provider var5 = param2.provider;
    int var7 = var5.getUserId();
    SparseArray var8 = this.mWidgetPackages;
    Object var10 = var8.get(var7);
    ArraySet var11 = (ArraySet) var10;
    SparseArray var12 = this.mWidgetPackages;
    ArraySet var13 = new ArraySet();
    var12.put(var7,var13);
    AppWidgetServiceImpl$Provider var18 = param2.provider;
    AppWidgetProviderInfo var19 = var18.info;
    ComponentName var20 = var19.provider;
    String var22 = var20.getPackageName();
    boolean var24 = var16.add(var22);
    AppWidgetServiceImpl$Provider var25 = param2.provider;
    boolean var27 = var25.isMaskedLocked();
    AppWidgetServiceImpl$Provider var30 = param2.provider;
    maskWidgetsViewsLocked(var30,param2);
    ArrayList var4 = param2.widgets;
    int var6 = var4.size();
    AppWidgetProviderInfo var8 = param2.info;
    ComponentName var9 = var8.provider;
    String var11 = var9.getPackageName();
    int var13 = getUserId();
    Bitmap var15 = createMaskedWidgetBitmap(var11,var13);
    long var17 = Binder.clearCallingIdentity();
    boolean var18 = param2.maskedBySuspendedPackage;
    UserManager var29 = this.mUserManager;
    UserInfo var31 = var29.getUserInfo(var13);
    boolean var33 = var31.isManagedProfile();
    PackageManagerInternal var34 = this.mPackageManagerInternal;
    String var36 = var34.getSuspendingPackage(var11,var13);
    boolean var39 = equals(var36);
    DevicePolicyManagerInternal var45 = this.mDevicePolicyManagerInternal;
    Intent var47 = var45.createShowAdminSupportIntent(var13,1);
    ArrayList var58 = param2.widgets;
    Object var60 = var58.get(var85);
    AppWidgetServiceImpl$Widget var61 = (AppWidgetServiceImpl$Widget) var60;
    Context var62 = this.mContext;
    int var63 = var61.appWidgetId;
    PendingIntent var66 = PendingIntent.getActivity(var62,var63,var55,134217728);
    RemoteViews var72 = createMaskedWidgetRemoteViews(var15,var53,var68);
    boolean var74 = AppWidgetServiceImpl$Widget.access$900(var61,var72);{boolean var74 = AppWidgetServiceImpl$Widget.access$900(var61,var72);};
    RemoteViews var76 = var61.getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(var61,var76);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    SparseLongArray var8 = param2.updateSequenceNos;
    var8.put(0,var6);
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
    AppWidgetServiceImpl$Host var21 = param2.host;
    IAppWidgetHost var22 = var21.callbacks;
    var19.arg2 = var22;
    var19.arg3 = var25;
    Long var29 = Long.valueOf(var6);
    var19.arg4 = var29;
    int var30 = param2.appWidgetId;
    var19.argi1 = var30;
    Handler var31 = this.mCallbackHandler;
    Message var34 = var31.obtainMessage(1,var19);
    var34.sendToTarget();<PATH_SEP>int var8 = UserHandle.getCallingUserId();
    boolean var9 = DEBUG;
    AppWidgetServiceImpl$SecurityPolicy var26 = this.mSecurityPolicy;
    AppWidgetServiceImpl$SecurityPolicy var28 = this.mSecurityPolicy;
    AppWidgetServiceImpl$SecurityPolicy var31 = this.mSecurityPolicy;
    String var33 = getPackageName();
    Object var36 = this.mLock;
    ensureGroupStateLoadedLocked(var8);{ensureGroupStateLoadedLocked(var8);};
    AppWidgetServiceImpl$SecurityPolicy var38 = this.mSecurityPolicy;
    int var42 = Binder.getCallingUid();
    AppWidgetServiceImpl$Widget var44 = lookupWidgetLocked(param3,var42,param2);
    AppWidgetServiceImpl$Provider var45 = var44.provider;
    String var47 = getPackageName();
    int var49 = getUidForPackage(var47,param4);
    AppWidgetServiceImpl$ProviderId var50 = new AppWidgetServiceImpl$ProviderId();
    AppWidgetServiceImpl$Provider var53 = lookupProviderLocked(var50);
    boolean var54 = var53.zombie;
    var44.provider = var53;
    Bundle var58 = AppWidgetServiceImpl.cloneIfLocalBinder(param6);
    var44.options = var59;
    Bundle var62 = var44.options;
    boolean var65 = var62.containsKey(appWidgetCategory);
    Bundle var67 = var44.options;
    var67.putInt(appWidgetCategory,1);
    ArrayList var71 = var53.widgets;
    boolean var73 = var71.add(var44);
    onWidgetProviderAddedOrChangedLocked(var44);
    AppWidgetServiceImpl$Provider var3 = param2.provider;
    AppWidgetServiceImpl$Provider var5 = param2.provider;
    int var7 = var5.getUserId();
    SparseArray var8 = this.mWidgetPackages;
    Object var10 = var8.get(var7);
    ArraySet var11 = (ArraySet) var10;
    SparseArray var12 = this.mWidgetPackages;
    ArraySet var13 = new ArraySet();
    var12.put(var7,var13);
    AppWidgetServiceImpl$Provider var18 = param2.provider;
    AppWidgetProviderInfo var19 = var18.info;
    ComponentName var20 = var19.provider;
    String var22 = var20.getPackageName();
    boolean var24 = var16.add(var22);
    AppWidgetServiceImpl$Provider var25 = param2.provider;
    boolean var27 = var25.isMaskedLocked();
    AppWidgetServiceImpl$Provider var30 = param2.provider;
    maskWidgetsViewsLocked(var30,param2);
    ArrayList var4 = param2.widgets;
    int var6 = var4.size();
    AppWidgetProviderInfo var8 = param2.info;
    ComponentName var9 = var8.provider;
    String var11 = var9.getPackageName();
    int var13 = getUserId();
    Bitmap var15 = createMaskedWidgetBitmap(var11,var13);
    long var17 = Binder.clearCallingIdentity();
    boolean var18 = param2.maskedBySuspendedPackage;
    UserManager var29 = this.mUserManager;
    UserInfo var31 = var29.getUserInfo(var13);
    boolean var33 = var31.isManagedProfile();
    PackageManagerInternal var34 = this.mPackageManagerInternal;
    String var36 = var34.getSuspendingPackage(var11,var13);
    boolean var39 = equals(var36);
    DevicePolicyManagerInternal var45 = this.mDevicePolicyManagerInternal;
    Intent var47 = var45.createShowAdminSupportIntent(var13,1);
    ArrayList var58 = param2.widgets;
    Object var60 = var58.get(var85);
    AppWidgetServiceImpl$Widget var61 = (AppWidgetServiceImpl$Widget) var60;
    Context var62 = this.mContext;
    int var63 = var61.appWidgetId;
    PendingIntent var66 = PendingIntent.getActivity(var62,var63,var55,134217728);
    RemoteViews var72 = createMaskedWidgetRemoteViews(var15,var53,var68);
    RemoteViews var5 = new RemoteViews();
    Context var6 = this.mContext;
    String var8 = var6.getPackageName();
    var5.setImageViewBitmap(16909563,param2);
    var5.setViewVisibility(16909564,4);
    var5.setOnClickPendingIntent(16909565,param4);
    Landroid/widget/RemoteViews var5<PATH_SEP>int var8 = UserHandle.getCallingUserId();
    boolean var9 = DEBUG;
    AppWidgetServiceImpl$SecurityPolicy var26 = this.mSecurityPolicy;
    AppWidgetServiceImpl$SecurityPolicy var28 = this.mSecurityPolicy;
    AppWidgetServiceImpl$SecurityPolicy var31 = this.mSecurityPolicy;
    String var33 = getPackageName();
    Object var36 = this.mLock;
    ensureGroupStateLoadedLocked(var8);{ensureGroupStateLoadedLocked(var8);};
    AppWidgetServiceImpl$SecurityPolicy var38 = this.mSecurityPolicy;
    int var42 = Binder.getCallingUid();
    AppWidgetServiceImpl$Widget var44 = lookupWidgetLocked(param3,var42,param2);
    AppWidgetServiceImpl$Provider var45 = var44.provider;
    String var47 = getPackageName();
    int var49 = getUidForPackage(var47,param4);
    AppWidgetServiceImpl$ProviderId var50 = new AppWidgetServiceImpl$ProviderId();
    AppWidgetServiceImpl$Provider var53 = lookupProviderLocked(var50);
    boolean var54 = var53.zombie;
    var44.provider = var53;
    Bundle var58 = AppWidgetServiceImpl.cloneIfLocalBinder(param6);
    var44.options = var59;
    Bundle var62 = var44.options;
    boolean var65 = var62.containsKey(appWidgetCategory);
    Bundle var67 = var44.options;
    var67.putInt(appWidgetCategory,1);
    ArrayList var71 = var53.widgets;
    boolean var73 = var71.add(var44);
    onWidgetProviderAddedOrChangedLocked(var44);
    AppWidgetServiceImpl$Provider var3 = param2.provider;
    AppWidgetServiceImpl$Provider var5 = param2.provider;
    int var7 = var5.getUserId();
    SparseArray var8 = this.mWidgetPackages;
    Object var10 = var8.get(var7);
    ArraySet var11 = (ArraySet) var10;
    SparseArray var12 = this.mWidgetPackages;
    ArraySet var13 = new ArraySet();
    var12.put(var7,var13);
    AppWidgetServiceImpl$Provider var18 = param2.provider;
    AppWidgetProviderInfo var19 = var18.info;
    ComponentName var20 = var19.provider;
    String var22 = var20.getPackageName();
    boolean var24 = var16.add(var22);
    AppWidgetServiceImpl$Provider var25 = param2.provider;
    boolean var27 = var25.isMaskedLocked();
    AppWidgetServiceImpl$Provider var30 = param2.provider;
    maskWidgetsViewsLocked(var30,param2);
    ArrayList var4 = param2.widgets;
    int var6 = var4.size();
    AppWidgetProviderInfo var8 = param2.info;
    ComponentName var9 = var8.provider;
    String var11 = var9.getPackageName();
    int var13 = getUserId();
    Bitmap var15 = createMaskedWidgetBitmap(var11,var13);
    long var17 = Binder.clearCallingIdentity();
    boolean var18 = param2.maskedBySuspendedPackage;
    UserManager var29 = this.mUserManager;
    UserInfo var31 = var29.getUserInfo(var13);
    boolean var33 = var31.isManagedProfile();
    PackageManagerInternal var34 = this.mPackageManagerInternal;
    String var36 = var34.getSuspendingPackage(var11,var13);
    boolean var39 = equals(var36);
    DevicePolicyManagerInternal var45 = this.mDevicePolicyManagerInternal;
    Intent var47 = var45.createShowAdminSupportIntent(var13,1);
    ArrayList var58 = param2.widgets;
    Object var60 = var58.get(var85);
    AppWidgetServiceImpl$Widget var61 = (AppWidgetServiceImpl$Widget) var60;
    Context var62 = this.mContext;
    int var63 = var61.appWidgetId;
    PendingIntent var66 = PendingIntent.getActivity(var62,var63,var55,134217728);
    RemoteViews var72 = createMaskedWidgetRemoteViews(var15,var53,var68);
    boolean var74 = AppWidgetServiceImpl$Widget.access$900(var61,var72);{boolean var74 = AppWidgetServiceImpl$Widget.access$900(var61,var72);};
    RemoteViews var76 = var61.getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(var61,var76);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    SparseLongArray var8 = param2.updateSequenceNos;
    var8.put(0,var6);
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
    AppWidgetServiceImpl$Host var21 = param2.host;
    IAppWidgetHost var22 = var21.callbacks;
    var19.arg2 = var22;
    RemoteViews var24 = clone();
    var19.arg3 = var25;
    Long var29 = Long.valueOf(var6);
    var19.arg4 = var29;
    int var30 = param2.appWidgetId;
    var19.argi1 = var30;
}