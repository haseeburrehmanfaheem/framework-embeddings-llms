// API: updateAppWidgetProvider
// Service: AppWidgetServiceImpl_3

public void updateAppWidgetProvider() {
    int var5 = UserHandle.getCallingUserId();
    boolean var6 = DEBUG;
    AppWidgetServiceImpl$SecurityPolicy var23 = this.mSecurityPolicy;
    String var25 = getPackageName();
    Object var27 = this.mLock;
    ensureGroupStateLoadedLocked(var5);{ensureGroupStateLoadedLocked(var5);};
    AppWidgetServiceImpl$ProviderId var29 = new AppWidgetServiceImpl$ProviderId();
    int var31 = Binder.getCallingUid();
    AppWidgetServiceImpl$Provider var34 = lookupProviderLocked(var29);
    ArrayList var35 = var34.widgets;
    int var37 = var35.size();
    Object var39 = var35.get(var44);
    AppWidgetServiceImpl$Widget var40 = (AppWidgetServiceImpl$Widget) var39;
    updateAppWidgetInstanceLocked(var40,param3,0);
    AppWidgetServiceImpl$Provider var6 = param2.provider;
    AppWidgetServiceImpl$Provider var7 = param2.provider;
    boolean var8 = var7.zombie;
    AppWidgetServiceImpl$Host var9 = param2.host;
    boolean var10 = var9.zombie;
    RemoteViews var11 = param2.views;
    RemoteViews var13 = param2.views;
    var13.mergeRemoteViews(param3);
    int var17 = Binder.getCallingUid();
    int var19 = UserHandle.getAppId(var17);
    RemoteViews var21 = param2.views;
    RemoteViews var22 = param2.views;
    int var24 = var22.estimateMemoryUsage();
    int var25 = this.mMaxWidgetBitmapMemory;
    RemoteViews var51 = getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(param2,var51);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
    AppWidgetServiceImpl$Host var21 = param2.host;
    IAppWidgetHost var22 = var21.callbacks;
    var19.arg2 = var22;
    var19.arg3 = var25;
    Long var29 = Long.valueOf(var6);
    var19.arg4 = var29;<PATH_SEP>int var5 = UserHandle.getCallingUserId();
    boolean var6 = DEBUG;
    AppWidgetServiceImpl$SecurityPolicy var23 = this.mSecurityPolicy;
    String var25 = getPackageName();
    Object var27 = this.mLock;
    ensureGroupStateLoadedLocked(var5);{ensureGroupStateLoadedLocked(var5);};
    AppWidgetServiceImpl$ProviderId var29 = new AppWidgetServiceImpl$ProviderId();
    int var31 = Binder.getCallingUid();
    AppWidgetServiceImpl$Provider var34 = lookupProviderLocked(var29);
    ArrayList var35 = var34.widgets;
    int var37 = var35.size();
    Object var39 = var35.get(var44);
    AppWidgetServiceImpl$Widget var40 = (AppWidgetServiceImpl$Widget) var39;
    updateAppWidgetInstanceLocked(var40,param3,0);
    AppWidgetServiceImpl$Provider var6 = param2.provider;
    AppWidgetServiceImpl$Provider var7 = param2.provider;
    boolean var8 = var7.zombie;
    AppWidgetServiceImpl$Host var9 = param2.host;
    boolean var10 = var9.zombie;
    RemoteViews var11 = param2.views;
    RemoteViews var13 = param2.views;
    var13.mergeRemoteViews(param3);
    int var17 = Binder.getCallingUid();
    int var19 = UserHandle.getAppId(var17);
    RemoteViews var21 = param2.views;
    RemoteViews var22 = param2.views;
    int var24 = var22.estimateMemoryUsage();
    int var25 = this.mMaxWidgetBitmapMemory;
    RemoteViews var51 = getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(param2,var51);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    SparseLongArray var8 = param2.updateSequenceNos;
    var8.put(0,var6);
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    Object var1 = sPoolLock;
    int var2 = sPoolSize;
    SomeArgs var6 = sPool;
    SomeArgs var7 = sPool;
    SomeArgs var8 = var7.mNext;
    var8.sPool = var8;
    var6.mNext = 0;
    var6.mInPool = 0;
    int var9 = sPoolSize;
    var11 = var9 add -1;
    var11.sPoolSize = var11;<PATH_SEP>int var5 = UserHandle.getCallingUserId();
    boolean var6 = DEBUG;
    AppWidgetServiceImpl$SecurityPolicy var23 = this.mSecurityPolicy;
    String var25 = getPackageName();
    Object var27 = this.mLock;
    ensureGroupStateLoadedLocked(var5);{ensureGroupStateLoadedLocked(var5);};
    AppWidgetServiceImpl$ProviderId var29 = new AppWidgetServiceImpl$ProviderId();
    int var31 = Binder.getCallingUid();
    AppWidgetServiceImpl$Provider var34 = lookupProviderLocked(var29);
    ArrayList var35 = var34.widgets;
    int var37 = var35.size();
    Object var39 = var35.get(var44);
    AppWidgetServiceImpl$Widget var40 = (AppWidgetServiceImpl$Widget) var39;
    updateAppWidgetInstanceLocked(var40,param3,0);
    AppWidgetServiceImpl$Provider var6 = param2.provider;
    AppWidgetServiceImpl$Provider var7 = param2.provider;
    boolean var8 = var7.zombie;
    AppWidgetServiceImpl$Host var9 = param2.host;
    boolean var10 = var9.zombie;
    RemoteViews var11 = param2.views;
    RemoteViews var13 = param2.views;
    var13.mergeRemoteViews(param3);
    int var17 = Binder.getCallingUid();
    int var19 = UserHandle.getAppId(var17);
    RemoteViews var21 = param2.views;
    RemoteViews var22 = param2.views;
    int var24 = var22.estimateMemoryUsage();
    int var25 = this.mMaxWidgetBitmapMemory;
    RemoteViews var51 = getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(param2,var51);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    SparseLongArray var8 = param2.updateSequenceNos;
    var8.put(0,var6);
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
    AppWidgetServiceImpl$Host var21 = param2.host;
    IAppWidgetHost var22 = var21.callbacks;
    var19.arg2 = var22;
    var19.arg3 = var25;
    Long var29 = Long.valueOf(var6);
    var19.arg4 = var29;<PATH_SEP>int var5 = UserHandle.getCallingUserId();
    boolean var6 = DEBUG;
    AppWidgetServiceImpl$SecurityPolicy var23 = this.mSecurityPolicy;
    String var25 = getPackageName();
    Object var27 = this.mLock;
    ensureGroupStateLoadedLocked(var5);{ensureGroupStateLoadedLocked(var5);};
    AppWidgetServiceImpl$ProviderId var29 = new AppWidgetServiceImpl$ProviderId();
    int var31 = Binder.getCallingUid();
    AppWidgetServiceImpl$Provider var34 = lookupProviderLocked(var29);
    ArrayList var35 = var34.widgets;
    int var37 = var35.size();
    Object var39 = var35.get(var44);
    AppWidgetServiceImpl$Widget var40 = (AppWidgetServiceImpl$Widget) var39;
    updateAppWidgetInstanceLocked(var40,param3,0);
    AppWidgetServiceImpl$Provider var6 = param2.provider;
    AppWidgetServiceImpl$Provider var7 = param2.provider;
    boolean var8 = var7.zombie;
    AppWidgetServiceImpl$Host var9 = param2.host;
    boolean var10 = var9.zombie;
    RemoteViews var11 = param2.views;
    RemoteViews var13 = param2.views;
    var13.mergeRemoteViews(param3);
    int var17 = Binder.getCallingUid();
    int var19 = UserHandle.getAppId(var17);
    RemoteViews var21 = param2.views;
    RemoteViews var22 = param2.views;
    int var24 = var22.estimateMemoryUsage();
    int var25 = this.mMaxWidgetBitmapMemory;
    RemoteViews var51 = getEffectiveViewsLocked();
    scheduleNotifyUpdateAppWidgetLocked(param2,var51);
    AtomicLong var4 = UPDATE_COUNTER;
    long var6 = var4.incrementAndGet();
    AppWidgetServiceImpl$Provider var11 = param2.provider;
    AppWidgetServiceImpl$Provider var12 = param2.provider;
    boolean var13 = var12.zombie;
    AppWidgetServiceImpl$Host var14 = param2.host;
    IAppWidgetHost var15 = var14.callbacks;
    AppWidgetServiceImpl$Host var16 = param2.host;
    boolean var17 = var16.zombie;
    SomeArgs var19 = SomeArgs.obtain();
    AppWidgetServiceImpl$Host var20 = param2.host;
    var19.arg1 = var20;
    AppWidgetServiceImpl$Host var21 = param2.host;
    IAppWidgetHost var22 = var21.callbacks;
    var19.arg2 = var22;
    var19.arg3 = var25;
}