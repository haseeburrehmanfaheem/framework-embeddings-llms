// API: startUpdateCredentialsSession
// Service: AccountManagerService_6

public void startUpdateCredentialsSession() {
    Bundle var9 = Bundle.setDefusable(param6,1);
    int var41 = Binder.getCallingUid();
    int var48 = Binder.getCallingPid();
    int var65 = Binder.getCallingUid();
    int var67 = UserHandle.getCallingUserId();
    String var70 = getString(androidPackageName);
    String var72 = new String(1);
    long var76 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var78 = getUserAccounts(var67);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    Context var3 = this.mContext;
    File var4 = this.mPreNDatabaseFile;
    AccountsDb$CeDatabaseHelper var6 = AccountsDb$CeDatabaseHelper.create(var3,var4,param2);
    AccountsDb$DeDatabaseHelper var7 = this.mDeDatabase;
    SQLiteDatabase var9 = var7.getWritableDatabase();
    String var16 = getPath();
    var9.execSQL(var23);
    AccountsDb$DeDatabaseHelper var25 = this.mDeDatabase;
    boolean var28 = AccountsDb$DeDatabaseHelper.access$702(var25,1);{boolean var28 = AccountsDb$DeDatabaseHelper.access$702(var25,1);}<PATH_SEP>Bundle var9 = Bundle.setDefusable(param6,1);
    int var41 = Binder.getCallingUid();
    int var48 = Binder.getCallingPid();
    int var65 = Binder.getCallingUid();
    int var67 = UserHandle.getCallingUserId();
    String var70 = getString(androidPackageName);
    String var72 = new String(1);
    long var76 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var78 = getUserAccounts(var67);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    AccountsDb$DeDatabaseHelper var2 = this.mDeDatabase;
    boolean var4 = AccountsDb$DeDatabaseHelper.access$700(var2);{boolean var4 = AccountsDb$DeDatabaseHelper.access$700(var2);};
    boolean var4<PATH_SEP>Bundle var9 = Bundle.setDefusable(param6,1);
    int var41 = Binder.getCallingUid();
    int var48 = Binder.getCallingPid();
    int var65 = Binder.getCallingUid();
    int var67 = UserHandle.getCallingUserId();
    String var70 = getString(androidPackageName);
    String var72 = new String(1);
    long var76 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var78 = getUserAccounts(var67);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>Bundle var9 = Bundle.setDefusable(param6,1);
    int var41 = Binder.getCallingUid();
    int var48 = Binder.getCallingPid();
    int var65 = Binder.getCallingUid();
    int var67 = UserHandle.getCallingUserId();
    String var70 = getString(androidPackageName);
    String var72 = new String(1);
    long var76 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var78 = getUserAccounts(var67);
    AccountManagerService$15 var79 = new AccountManagerService$15();
    String var80 = param3.type;
    String var81 = param3.name;
    var79.bind();
}