// API: takeUidSnapshot
// Service: BatteryStatsService_2

public void takeUidSnapshot() {
    int var4 = Binder.getCallingUid();
    Context var5 = this.mContext;
    long var12 = Binder.clearCallingIdentity();
    boolean var14 = shouldCollectExternalStats();
    syncStats(get-health-stats-for-uids,31);
    BatteryStatsImpl var20 = this.mStats;
    HealthStatsParceler var22 = getHealthStatsForUidLocked(param2);
    HealthStatsBatteryStatsWriter var3 = new HealthStatsBatteryStatsWriter();
    HealthStatsWriter var5 = new HealthStatsWriter();
    HealthKeys$Constants var6 = CONSTANTS;
    BatteryStatsImpl var8 = this.mStats;
    SparseArray var10 = var8.getUidStats();
    Object var12 = var10.get(param2);
    BatteryStats$Uid var13 = (BatteryStats$Uid) var12;
    BatteryStatsImpl var15 = this.mStats;
    var3.writeUid(var5,var15,var13);
    long var5 = this.mNowRealtimeMs;
    var7 = var5 mul 1000;
    long var10 = computeBatteryRealtime(var7,0);
    var11 = var10 div 1000;
    addMeasurement(10001,var11);
    long var14 = this.mNowUptimeMs;
    var15 = var14 mul 1000;
    long var17 = computeBatteryUptime(var15,0);
    var18 = var17 div 1000;
    addMeasurement(10002,var18);
    long var21 = this.mNowRealtimeMs;
    var22 = var21 mul 1000;
    long var24 = computeBatteryScreenOffRealtime(var22,0);<PATH_SEP>int var4 = Binder.getCallingUid();
    Context var5 = this.mContext;
    long var12 = Binder.clearCallingIdentity();
    boolean var14 = shouldCollectExternalStats();
    syncStats(get-health-stats-for-uids,31);
    BatteryStatsImpl var20 = this.mStats;
    HealthStatsParceler var22 = getHealthStatsForUidLocked(param2);
    HealthStatsBatteryStatsWriter var3 = new HealthStatsBatteryStatsWriter();
    HealthStatsWriter var5 = new HealthStatsWriter();
    HealthKeys$Constants var6 = CONSTANTS;
    BatteryStatsImpl var8 = this.mStats;
    SparseArray var10 = var8.getUidStats();
    Object var12 = var10.get(param2);
    BatteryStats$Uid var13 = (BatteryStats$Uid) var12;
    BatteryStatsImpl var15 = this.mStats;
    var3.writeUid(var5,var15,var13);
    long var5 = this.mNowRealtimeMs;
    var7 = var5 mul 1000;
    long var10 = computeBatteryRealtime(var7,0);
    var11 = var10 div 1000;
    addMeasurement(10001,var11);
    long var14 = this.mNowUptimeMs;
    var15 = var14 mul 1000;
    long var17 = computeBatteryUptime(var15,0);
    var18 = var17 div 1000;
    addMeasurement(10002,var18);
    long var21 = this.mNowRealtimeMs;
    var22 = var21 mul 1000;
    long var24 = computeBatteryScreenOffRealtime(var22,0);
    var25 = var24 div 1000;
    addMeasurement(10003,var25);
    long var28 = this.mNowUptimeMs;
    var29 = var28 mul 1000;
    long var31 = computeBatteryScreenOffUptime(var29,0);
    var32 = var31 div 1000;
    addMeasurement(10004,var32);
    Set var38 = var36.entrySet();
    Iterator var40 = var38.iterator();
    ArrayMap var76 = getSyncStats();
    Set var78 = var76.entrySet();
    Iterator var80 = var78.iterator();
    ArrayMap var101 = getJobStats();
    Set var103 = var101.entrySet();
    Iterator var105 = var103.iterator();
    SparseArray var126 = getSensorStats();
    int var128 = var126.size();
    SparseArray var160 = getPidStats();
    int var162 = var160.size();
    HealthStatsWriter var163 = new HealthStatsWriter();
    HealthKeys$Constants var164 = CONSTANTS;
    Object var167 = var160.valueAt(var177);
    BatteryStats$Uid$Pid var168 = (BatteryStats$Uid$Pid) var167;
    writePid(var163,var168);
    int var6 = param3.mWakeNesting;
    7 = conversion(J) 6;
    addMeasurement(20001,var7);
    long var9 = param3.mWakeSumMs;
    addMeasurement(20002,var9);
    long var12 = param3.mWakeStartMs;
    addMeasurement(20002,var12);<PATH_SEP>int var4 = Binder.getCallingUid();
    Context var5 = this.mContext;
    long var12 = Binder.clearCallingIdentity();
    boolean var14 = shouldCollectExternalStats();
    syncStats(get-health-stats-for-uids,31);
    BatteryStatsImpl var20 = this.mStats;
    HealthStatsParceler var22 = getHealthStatsForUidLocked(param2);
    HealthStatsBatteryStatsWriter var3 = new HealthStatsBatteryStatsWriter();
    HealthStatsWriter var5 = new HealthStatsWriter();
    HealthKeys$Constants var6 = CONSTANTS;
    BatteryStatsImpl var8 = this.mStats;
    SparseArray var10 = var8.getUidStats();
    Object var12 = var10.get(param2);
    BatteryStats$Uid var13 = (BatteryStats$Uid) var12;
    BatteryStatsImpl var15 = this.mStats;
    var3.writeUid(var5,var15,var13);
    long var5 = this.mNowRealtimeMs;
    var7 = var5 mul 1000;
    long var10 = computeBatteryRealtime(var7,0);
    var11 = var10 div 1000;
    addMeasurement(10001,var11);
    long var14 = this.mNowUptimeMs;
    var15 = var14 mul 1000;
    long var17 = computeBatteryUptime(var15,0);
    var18 = var17 div 1000;
    addMeasurement(10002,var18);
    long var21 = this.mNowRealtimeMs;
    var22 = var21 mul 1000;
    long var24 = computeBatteryScreenOffRealtime(var22,0);
    var25 = var24 div 1000;
    addMeasurement(10003,var25);
    long var28 = this.mNowUptimeMs;
    var29 = var28 mul 1000;
    long var31 = computeBatteryScreenOffUptime(var29,0);
    var32 = var31 div 1000;
    addMeasurement(10004,var32);
    Set var38 = var36.entrySet();
    Iterator var40 = var38.iterator();
    ArrayMap var76 = getSyncStats();
    Set var78 = var76.entrySet();
    Iterator var80 = var78.iterator();
    ArrayMap var101 = getJobStats();
    Set var103 = var101.entrySet();
    Iterator var105 = var103.iterator();
    SparseArray var126 = getSensorStats();
    int var128 = var126.size();
    SparseArray var160 = getPidStats();
    int var162 = var160.size();
    HealthStatsWriter var163 = new HealthStatsWriter();
    HealthKeys$Constants var164 = CONSTANTS;
    Object var167 = var160.valueAt(var177);
    BatteryStats$Uid$Pid var168 = (BatteryStats$Uid$Pid) var167;
    writePid(var163,var168);
    int var172 = var160.keyAt(var177);
    String var174 = Integer.toString(var172);
    addStats(10013,var174,var163);<PATH_SEP>int var4 = Binder.getCallingUid();
    Context var5 = this.mContext;
    long var12 = Binder.clearCallingIdentity();
    boolean var14 = shouldCollectExternalStats();
    syncStats(get-health-stats-for-uids,31);
    BatteryStatsImpl var20 = this.mStats;
    HealthStatsParceler var22 = getHealthStatsForUidLocked(param2);
    HealthStatsBatteryStatsWriter var3 = new HealthStatsBatteryStatsWriter();
    HealthStatsWriter var5 = new HealthStatsWriter();
    HealthKeys$Constants var6 = CONSTANTS;
    BatteryStatsImpl var8 = this.mStats;
    SparseArray var10 = var8.getUidStats();
    Object var12 = var10.get(param2);
    BatteryStats$Uid var13 = (BatteryStats$Uid) var12;
    BatteryStatsImpl var15 = this.mStats;
    var3.writeUid(var5,var15,var13);
    long var5 = this.mNowRealtimeMs;
    var7 = var5 mul 1000;
    long var10 = computeBatteryRealtime(var7,0);
    var11 = var10 div 1000;
    addMeasurement(10001,var11);
    long var14 = this.mNowUptimeMs;
    var15 = var14 mul 1000;
    long var17 = computeBatteryUptime(var15,0);
    var18 = var17 div 1000;
    addMeasurement(10002,var18);
    long var21 = this.mNowRealtimeMs;
    var22 = var21 mul 1000;
    long var24 = computeBatteryScreenOffRealtime(var22,0);
    var25 = var24 div 1000;
    addMeasurement(10003,var25);
    long var28 = this.mNowUptimeMs;
    var29 = var28 mul 1000;
    long var31 = computeBatteryScreenOffUptime(var29,0);
    var32 = var31 div 1000;
    addMeasurement(10004,var32);
    Set var38 = var36.entrySet();
    Iterator var40 = var38.iterator();
    ArrayMap var76 = getSyncStats();
    Set var78 = var76.entrySet();
    Iterator var80 = var78.iterator();
    ArrayMap var101 = getJobStats();
    Set var103 = var101.entrySet();
    Iterator var105 = var103.iterator();
    SparseArray var126 = getSensorStats();
    int var128 = var126.size();
    SparseArray var160 = getPidStats();
    int var162 = var160.size();
    HealthStatsWriter var163 = new HealthStatsWriter();
    HealthKeys$Constants var164 = CONSTANTS;
    Object var167 = var160.valueAt(var177);
    BatteryStats$Uid$Pid var168 = (BatteryStats$Uid$Pid) var167;
    writePid(var163,var168);
    int var6 = param3.mWakeNesting;
    7 = conversion(J) 6;
    addMeasurement(20001,var7);
}