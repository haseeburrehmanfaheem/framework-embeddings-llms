// API: unregisterAudioPolicy
// Service: AudioService_2

public void unregisterAudioPolicy() {
    unregisterAudioPolicyInt(param2);
    IBinder var11 = asBinder();
    HashMap var21 = this.mAudioPolicies;
    HashMap var22 = this.mAudioPolicies;
    IBinder var24 = asBinder();
    Object var26 = var22.remove(var24);
    AudioService$AudioPolicyProxy var27 = (AudioService$AudioPolicyProxy) var26;
    IBinder var30 = asBinder();
    boolean var32 = var30.unlinkToDeath(var27,0);
    var27.release();
    boolean var2 = this.mIsFocusPolicy;
    AudioService var4 = this.this$0;
    MediaFocusControl var6 = AudioService.access$7600(var4);{MediaFocusControl var6 = AudioService.access$7600(var4);};
    IAudioPolicyCallback var7 = this.mPolicyCallback;
    boolean var8 = this.mIsTestFocusPolicy;
    var6.unsetFocusPolicy(var7,var8);
    int var11 = this.mFocusDuckBehavior;
    AudioService var13 = this.this$0;
    MediaFocusControl var15 = AudioService.access$7600(var13);{MediaFocusControl var15 = AudioService.access$7600(var13);};
    var15.setDuckingInExtPolicyAvailable(0);
    boolean var20 = this.mHasFocusListener;
    AudioService var21 = this.this$0;
    MediaFocusControl var23 = AudioService.access$7600(var21);{MediaFocusControl var23 = AudioService.access$7600(var21);};
    IAudioPolicyCallback var24 = this.mPolicyCallback;
    var23.removeFocusFollower(var24);
    Object var4 = mAudioFocusLock;
    ArrayList var5 = this.mFocusFollowers;
    Iterator var7 = var5.iterator();
    Object var11 = var7.next();
    IAudioPolicyCallback var12 = (IAudioPolicyCallback) var11;
    IBinder var14 = var12.asBinder();
    IBinder var16 = asBinder();
    boolean var18 = var14.equals(var16);
    ArrayList var21 = this.mFocusFollowers;
    boolean var23 = var21.remove(var12);
}