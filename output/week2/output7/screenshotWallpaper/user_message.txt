// API: screenshotWallpaper
// Service: WindowManagerService_1

public void screenshotWallpaper() {
    Trace.traceBegin(32,screenshotWallpaper);
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    WindowManagerThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.boost();
    int var3 = Process.myTid();
    int var4 = this.mAnimationThreadId;
    int var5 = this.mSurfaceAnimationThreadId;
    boost();
    ThreadLocal var2 = this.mThreadState;
    Object var4 = var2.get();
    ThreadPriorityBooster$PriorityState var5 = (ThreadPriorityBooster$PriorityState) var4;
    int var6 = var5.regionCounter;
    int var8 = var5.tid;
    int var10 = Process.getThreadPriority(var8);
    int var11 = this.mBoostToPriority;
    int var12 = var5.tid;
    int var13 = this.mBoostToPriority;
    Process.setThreadPriority(var12,var13);
    var5.prevPriority = var10;<PATH_SEP>Trace.traceBegin(32,screenshotWallpaper);
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(0);
    WallpaperController var18 = var17.mWallpaperController;
    Bitmap var20 = var18.screenshotWallpaperLocked();
    WindowState var3 = getTopVisibleWallpaper();
    this.mTmpTopWallpaper = 0;
    ArrayList var3 = this.mWallpaperTokens;
    int var5 = var3.size();
    var7 = var5 sub 1;
    ArrayList var8 = this.mWallpaperTokens;
    Object var10 = var8.get(var18);
    WallpaperWindowToken var11 = (WallpaperWindowToken) var10;
    -$$Lambda$WallpaperController$3kGUJhX6nW41Z26JaiCQelxXZr8 var12 = new -$$Lambda$WallpaperController$3kGUJhX6nW41Z26JaiCQelxXZr8();
    boolean var15 = var11.forAllWindows(var12,1);
    WindowList var6 = this.mChildren;
    int var8 = var6.size();
    WindowList var9 = this.mChildren;
    Object var11 = var9.get(var17);
    WindowContainer var12 = (WindowContainer) var11;
    boolean var14 = var12.forAllWindows(param2,param3);
    boolean 1<PATH_SEP>Trace.traceBegin(32,screenshotWallpaper);
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(0);
    WallpaperController var18 = var17.mWallpaperController;
    Bitmap var20 = var18.screenshotWallpaperLocked();
    WindowState var3 = getTopVisibleWallpaper();
    this.mTmpTopWallpaper = 0;
    ArrayList var3 = this.mWallpaperTokens;
    int var5 = var3.size();
    var7 = var5 sub 1;
    ArrayList var8 = this.mWallpaperTokens;
    Object var10 = var8.get(var18);
    WallpaperWindowToken var11 = (WallpaperWindowToken) var10;
    -$$Lambda$WallpaperController$3kGUJhX6nW41Z26JaiCQelxXZr8 var12 = new -$$Lambda$WallpaperController$3kGUJhX6nW41Z26JaiCQelxXZr8();
    boolean var15 = var11.forAllWindows(var12,1);
    WindowList var20 = this.mChildren;
    int var22 = var20.size();
    var23 = var22 sub 1;
    WindowList var24 = this.mChildren;
    Object var26 = var24.get(var32);
    WindowContainer var27 = (WindowContainer) var26;
    boolean var29 = var27.forAllWindows(param2,param3);
    boolean 1<PATH_SEP>Trace.traceBegin(32,screenshotWallpaper);
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(0);
    WallpaperController var18 = var17.mWallpaperController;
    Bitmap var20 = var18.screenshotWallpaperLocked();
    WindowState var3 = getTopVisibleWallpaper();
    boolean var5 = canScreenshotWallpaper(var3);
    WindowManagerService var3 = this.mService;
    WindowManagerPolicy var4 = var3.mPolicy;
    boolean var6 = var4.isScreenOn();
    boolean 0;
}