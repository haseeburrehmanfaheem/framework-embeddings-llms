// API: updateScores
// Service: NetworkScoreService_2

public void updateScores() {
    int var4 = NetworkScoreService.getCallingUid();
    boolean var6 = isCallerActiveScorer(var4);{boolean var6 = isCallerActiveScorer(var4);};
    long var25 = Binder.clearCallingIdentity();
    ArrayMap var26 = new ArrayMap();
    28 = arraylength 2;
    Set var56 = var26.entrySet();
    Iterator var58 = var56.iterator();
    Object var63 = var58.next();
    Map$Entry var64 = (Map$Entry) var63;
    Map var65 = this.mScoreCaches;
    Map var66 = this.mScoreCaches;
    Object var68 = var64.getKey();
    Object var70 = var66.get(var68);
    RemoteCallbackList var71 = (RemoteCallbackList) var70;
    int var73 = var71.getRegisteredCallbackCount();
    Context var108 = this.mContext;
    Object var110 = var64.getValue();
    List var111 = (List) var110;
    Object var113 = var64.getKey();
    Integer var114 = (Integer) var113;
    int var116 = var114.intValue();
    NetworkScoreService$FilteringCacheUpdatingConsumer var118 = NetworkScoreService$FilteringCacheUpdatingConsumer.create(var108,var111,var116);
    Set var120 = Collections.singleton(var71);
    sendCacheUpdateCallback(var118,var120);
    Iterator var5 = iterator();
    Object var10 = var5.next();
    RemoteCallbackList var11 = (RemoteCallbackList) var10;
    int var13 = var11.beginBroadcast();
    IInterface var15 = var11.getBroadcastItem(var22);
    INetworkScoreCache var16 = (INetworkScoreCache) var15;
    Object var18 = var11.getBroadcastCookie(var22);
    accept(var16,var18);
}