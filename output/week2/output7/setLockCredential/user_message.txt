// API: setLockCredential
// Service: LockSettingsService_7

public void setLockCredential() {
    LockPatternUtils var8 = this.mLockPatternUtils;
    boolean var10 = var8.hasSecureLockScreen();
    Object var16 = this.mSeparateChallengeLock;
    setLockCredentialInternal(param2,param3,param4,param5,param6,param7,0);
    10 = arraylength 4;
    13 = arraylength 2;
    SyntheticPasswordManager var18 = this.mSpManager;
    boolean var20 = isSyntheticPasswordBasedCredentialLocked(param6);
    spBasedSetLockCredentialInternalLocked(var17,param3,var12,param5,param6,param7,param8);
    [B var14 = getDecryptedPasswordForTiedProfile(param6);
    long var31 = getSyntheticPasswordHandleLocked(param6);
    SyntheticPasswordManager var32 = this.mSpManager;
    IGateKeeperService var34 = getGateKeeperService();
    IGateKeeperService var2 = this.mGateKeeperService;
    IGateKeeperService var17 = this.mGateKeeperService;
    Landroid/service/gatekeeper/IGateKeeperService var17<PATH_SEP>LockPatternUtils var8 = this.mLockPatternUtils;
    boolean var10 = var8.hasSecureLockScreen();
    Object var16 = this.mSeparateChallengeLock;
    setLockCredentialInternal(param2,param3,param4,param5,param6,param7,0);
    10 = arraylength 4;
    13 = arraylength 2;
    SyntheticPasswordManager var18 = this.mSpManager;
    boolean var20 = isSyntheticPasswordBasedCredentialLocked(param6);
    spBasedSetLockCredentialInternalLocked(var17,param3,var12,param5,param6,param7,param8);
    [B var14 = getDecryptedPasswordForTiedProfile(param6);
    long var31 = getSyntheticPasswordHandleLocked(param6);
    SyntheticPasswordManager var32 = this.mSpManager;
    IGateKeeperService var34 = getGateKeeperService();
    SyntheticPasswordManager$AuthenticationResult var36 = var32.unwrapPasswordBasedSyntheticPassword(var34,var31,var27,param6,0);
    [B var8 = DEFAULT_PASSWORD;
    SyntheticPasswordManager$AuthenticationResult var10 = new SyntheticPasswordManager$AuthenticationResult();
    [B var14 = loadState(pwd,param3,param5);
    SyntheticPasswordManager$PasswordData var16 = SyntheticPasswordManager$PasswordData.fromBytes(var14);
    int var17 = var16.passwordType;
    var10.credentialType = var17;
    [B var19 = computePasswordToken(var9,var16);
    int var21 = loadWeaverSlot(param3,param5);
    boolean var96 = isWeaverAvailable();
    [B var98 = passwordTokenToWeaverKey(var19);
    VerifyCredentialResponse var100 = weaverVerify(var21,var98);
    var10.gkResponse = var100;
    VerifyCredentialResponse var101 = var10.gkResponse;
    int var103 = var101.getResponseCode();
    VerifyCredentialResponse var104 = var10.gkResponse;
    [B var106 = var104.getPayload();
    [B var108 = transformUnderWeaverSecret(var19,var106);
    onCredentialVerified();
    SyntheticPasswordManager$AuthenticationToken var121 = unwrapSyntheticPasswordBlob(param3,0,var112,var113,param5);
    var10.authToken = var121;
    SyntheticPasswordManager$AuthenticationToken var122 = var10.authToken;
    VerifyCredentialResponse var124 = verifyChallenge(param2,var122,0,param5);{VerifyCredentialResponse var124 = verifyChallenge(param2,var122,0,param5);};
    var10.gkResponse = var124;
    Lcom/android/server/locksettings/SyntheticPasswordManager$AuthenticationResult var10<PATH_SEP>LockPatternUtils var8 = this.mLockPatternUtils;
    boolean var10 = var8.hasSecureLockScreen();
    Object var16 = this.mSeparateChallengeLock;
    setLockCredentialInternal(param2,param3,param4,param5,param6,param7,0);
    10 = arraylength 4;
    13 = arraylength 2;
    SyntheticPasswordManager var18 = this.mSpManager;
    boolean var20 = isSyntheticPasswordBasedCredentialLocked(param6);
    spBasedSetLockCredentialInternalLocked(var17,param3,var12,param5,param6,param7,param8);
    [B var14 = getDecryptedPasswordForTiedProfile(param6);
    long var31 = getSyntheticPasswordHandleLocked(param6);
    SyntheticPasswordManager var32 = this.mSpManager;
    IGateKeeperService var34 = getGateKeeperService();
    SyntheticPasswordManager$AuthenticationResult var36 = var32.unwrapPasswordBasedSyntheticPassword(var34,var31,var27,param6,0);
    [B var8 = DEFAULT_PASSWORD;
    SyntheticPasswordManager$AuthenticationResult var10 = new SyntheticPasswordManager$AuthenticationResult();
    [B var14 = loadState(pwd,param3,param5);
    SyntheticPasswordManager$PasswordData var16 = SyntheticPasswordManager$PasswordData.fromBytes(var14);
    int var17 = var16.passwordType;
    var10.credentialType = var17;
    [B var19 = computePasswordToken(var9,var16);
    int var21 = loadWeaverSlot(param3,param5);
    [B var25 = passwordTokenToGkInput(var19);
    int var27 = fakeUid(param5);
    [B var29 = var16.passwordHandle;
    GateKeeperResponse var31 = verifyChallenge(var27,0,var29,var25);{GateKeeperResponse var31 = verifyChallenge(var27,0,var29,var25);};
    int var33 = var31.getResponseCode();
    VerifyCredentialResponse var40 = OK;
    var10.gkResponse = var40;
    boolean var42 = var31.getShouldReEnroll();
    int var44 = fakeUid(param5);
    [B var45 = var16.passwordHandle;
    GateKeeperResponse var47 = enroll(var44,var45,var25,var25);
    int var49 = var47.getResponseCode();
    [B var62 = var47.getPayload();
    var16.passwordHandle = var62;
    [B var64 = var16.toBytes();
    saveState(pwd,var64,param3,param5);
    int var66 = var16.passwordType;
    synchronizeFrpPassword(var16,var69,param5);
    [B var88 = var16.passwordHandle;
    long var90 = sidFromPasswordHandle(var88);
    [B var92 = loadSecdiscardable(param3,param5);
    [B var94 = transformUnderSecdiscardable(var19,var92);
    SyntheticPasswordManager$AuthenticationToken var121 = unwrapSyntheticPasswordBlob(param3,0,var112,var113,param5);
    var10.authToken = var121;
    SyntheticPasswordManager$AuthenticationToken var122 = var10.authToken;
    VerifyCredentialResponse var124 = verifyChallenge(param2,var122,0,param5);{VerifyCredentialResponse var124 = verifyChallenge(param2,var122,0,param5);};
    var10.gkResponse = var124;<PATH_SEP>LockPatternUtils var8 = this.mLockPatternUtils;
    boolean var10 = var8.hasSecureLockScreen();
    Object var16 = this.mSeparateChallengeLock;
    setLockCredentialInternal(param2,param3,param4,param5,param6,param7,0);
    10 = arraylength 4;
    13 = arraylength 2;
    SyntheticPasswordManager var18 = this.mSpManager;
    boolean var20 = isSyntheticPasswordBasedCredentialLocked(param6);
    spBasedSetLockCredentialInternalLocked(var17,param3,var12,param5,param6,param7,param8);
    [B var14 = getDecryptedPasswordForTiedProfile(param6);
    long var31 = getSyntheticPasswordHandleLocked(param6);
    SyntheticPasswordManager var32 = this.mSpManager;
    IGateKeeperService var34 = getGateKeeperService();
    SyntheticPasswordManager$AuthenticationResult var36 = var32.unwrapPasswordBasedSyntheticPassword(var34,var31,var27,param6,0);
    [B var8 = DEFAULT_PASSWORD;
    SyntheticPasswordManager$AuthenticationResult var10 = new SyntheticPasswordManager$AuthenticationResult();
    [B var14 = loadState(pwd,param3,param5);
    SyntheticPasswordManager$PasswordData var16 = SyntheticPasswordManager$PasswordData.fromBytes(var14);
    int var17 = var16.passwordType;
    var10.credentialType = var17;
    [B var19 = computePasswordToken(var9,var16);
    int var21 = loadWeaverSlot(param3,param5);
    [B var25 = passwordTokenToGkInput(var19);
    int var27 = fakeUid(param5);
    [B var29 = var16.passwordHandle;
    GateKeeperResponse var31 = verifyChallenge(var27,0,var29,var25);{GateKeeperResponse var31 = verifyChallenge(var27,0,var29,var25);};
    int var33 = var31.getResponseCode();
    VerifyCredentialResponse var40 = OK;
    var10.gkResponse = var40;
    boolean var42 = var31.getShouldReEnroll();
    [B var88 = var16.passwordHandle;
    long var90 = sidFromPasswordHandle(var88);
    [B var92 = loadSecdiscardable(param3,param5);
    [B var94 = transformUnderSecdiscardable(var19,var92);
    onCredentialVerified();
    SyntheticPasswordManager$AuthenticationToken var121 = unwrapSyntheticPasswordBlob(param3,0,var112,var113,param5);
    var10.authToken = var121;
    SyntheticPasswordManager$AuthenticationToken var122 = var10.authToken;
    VerifyCredentialResponse var124 = verifyChallenge(param2,var122,0,param5);{VerifyCredentialResponse var124 = verifyChallenge(param2,var122,0,param5);};
    var10.gkResponse = var124;
}