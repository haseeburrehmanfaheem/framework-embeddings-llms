// API: removeAccountAsUser
// Service: AccountManagerService_5

public void removeAccountAsUser() {
    int var7 = Binder.getCallingUid();
    int var34 = Binder.getCallingPid();
    Preconditions.checkArgument(var50,account cannot be null);{Preconditions.checkArgument(var50,account cannot be null);};
    Preconditions.checkArgument(var53,response cannot be null);{Preconditions.checkArgument(var53,response cannot be null);};
    UserHandle var71 = UserHandle.of(param5);
    String var72 = param3.type;
    int var74 = var71.getIdentifier();
    boolean var76 = isAccountManagedByCaller(var72,var7,var74);{boolean var76 = isAccountManagedByCaller(var72,var7,var74);};
    String var95 = param3.type;
    long var99 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var101 = getUserAccounts(param5);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var7 = Binder.getCallingUid();
    int var34 = Binder.getCallingPid();
    Preconditions.checkArgument(var50,account cannot be null);{Preconditions.checkArgument(var50,account cannot be null);};
    Preconditions.checkArgument(var53,response cannot be null);{Preconditions.checkArgument(var53,response cannot be null);};
    UserHandle var71 = UserHandle.of(param5);
    String var72 = param3.type;
    int var74 = var71.getIdentifier();
    boolean var76 = isAccountManagedByCaller(var72,var7,var74);{boolean var76 = isAccountManagedByCaller(var72,var7,var74);};
    String var95 = param3.type;
    long var99 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var101 = getUserAccounts(param5);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    File var3 = new File();
    File var5 = Environment.getDataSystemDeDirectory(param2);
    String var9 = var3.getPath();
    Ljava/lang/String var9<PATH_SEP>int var7 = Binder.getCallingUid();
    int var34 = Binder.getCallingPid();
    Preconditions.checkArgument(var50,account cannot be null);{Preconditions.checkArgument(var50,account cannot be null);};
    Preconditions.checkArgument(var53,response cannot be null);{Preconditions.checkArgument(var53,response cannot be null);};
    UserHandle var71 = UserHandle.of(param5);
    String var72 = param3.type;
    int var74 = var71.getIdentifier();
    boolean var76 = isAccountManagedByCaller(var72,var7,var74);{boolean var76 = isAccountManagedByCaller(var72,var7,var74);};
    String var95 = param3.type;
    long var99 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var101 = getUserAccounts(param5);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    Object var3 = param2.dbLock;
    Object var4 = param2.cacheLock;
    AccountsDb var5 = param2.accountsDb;
    List var7 = var5.findAllUidGrants();
    Iterator var9 = var7.iterator();<PATH_SEP>int var7 = Binder.getCallingUid();
    int var34 = Binder.getCallingPid();
    Preconditions.checkArgument(var50,account cannot be null);{Preconditions.checkArgument(var50,account cannot be null);};
    Preconditions.checkArgument(var53,response cannot be null);{Preconditions.checkArgument(var53,response cannot be null);};
    UserHandle var71 = UserHandle.of(param5);
    String var72 = param3.type;
    int var74 = var71.getIdentifier();
    boolean var76 = isAccountManagedByCaller(var72,var7,var74);{boolean var76 = isAccountManagedByCaller(var72,var7,var74);};
    String var95 = param3.type;
    long var99 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var101 = getUserAccounts(param5);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}