// API: unregisterAccountListener
// Service: AccountManagerService_3

public void unregisterAccountListener() {
    int var5 = Binder.getCallingUid();
    AppOpsManager var6 = this.mAppOpsManager;
    int var9 = UserHandle.getCallingUserId();
    long var11 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var13 = getUserAccounts(var9);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    Context var3 = this.mContext;
    File var4 = this.mPreNDatabaseFile;
    AccountsDb$CeDatabaseHelper var6 = AccountsDb$CeDatabaseHelper.create(var3,var4,param2);
    AccountsDb$DeDatabaseHelper var7 = this.mDeDatabase;
    SQLiteDatabase var9 = var7.getWritableDatabase();
    String var16 = getPath();
    var9.execSQL(var23);
    AccountsDb$DeDatabaseHelper var25 = this.mDeDatabase;
    boolean var28 = AccountsDb$DeDatabaseHelper.access$702(var25,1);{boolean var28 = AccountsDb$DeDatabaseHelper.access$702(var25,1);}<PATH_SEP>int var5 = Binder.getCallingUid();
    AppOpsManager var6 = this.mAppOpsManager;
    int var9 = UserHandle.getCallingUserId();
    long var11 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var13 = getUserAccounts(var9);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var5 = Binder.getCallingUid();
    AppOpsManager var6 = this.mAppOpsManager;
    int var9 = UserHandle.getCallingUserId();
    long var11 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var13 = getUserAccounts(var9);
    unregisterAccountListener(param2,param3,var13);
    Map var6 = AccountManagerService$UserAccounts.access$1000(param4);{Map var6 = AccountManagerService$UserAccounts.access$1000(param4);};
    String var8 = new String(1);
    12 = arraylength 10;
    13 = arrayload 10[40];
    Map var15 = AccountManagerService$UserAccounts.access$1000(param4);{Map var15 = AccountManagerService$UserAccounts.access$1000(param4);};
    Object var17 = var15.get(var13);
    Map var18 = (Map) var17;
    Object var20 = var18.get(param3);
    Object var22 = var18.get(param3);
    Integer var23 = (Integer) var22;
    int var25 = var23.intValue();
    int var29 = var23.intValue();
    var30 = var29 sub 1;
    Integer var32 = Integer.valueOf(var30);
    Object var34 = var18.put(param3,var32);<PATH_SEP>int var5 = Binder.getCallingUid();
    AppOpsManager var6 = this.mAppOpsManager;
    int var9 = UserHandle.getCallingUserId();
    long var11 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var13 = getUserAccounts(var9);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}