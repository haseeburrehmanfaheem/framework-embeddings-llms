// API: requestAssistScreenshot
// Service: WindowManagerService_2

public void requestAssistScreenshot() {
    WindowManagerGlobalLock var11 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var13 = this.mRoot;
    DisplayContent var15 = var13.getDisplayContent(0);
    Bitmap$Config var16 = ARGB_8888;
    Bitmap var18 = var15.screenshotDisplayLocked(var16);
    WindowManagerService var3 = this.mWmService;
    WindowManagerPolicy var4 = var3.mPolicy;
    boolean var6 = var4.isScreenOn();
    DisplayInfo var8 = this.mDisplayInfo;
    int var9 = var8.logicalWidth;
    DisplayInfo var10 = this.mDisplayInfo;
    int var11 = var10.logicalHeight;
    Rect var12 = new Rect();
    Display var14 = this.mDisplay;
    int var16 = var14.getRotation();
    DisplayContent.convertCropForSurfaceFlinger(var12,var20,var9,var11);
    WindowManagerService var23 = this.mWmService;
    WindowAnimator var24 = var23.mAnimator;
    ScreenRotationAnimation var26 = var24.getScreenRotationAnimationLocked(0);
    boolean var28 = var26.isAnimating();
    Bitmap var35 = SurfaceControl.screenshot(var12,var9,var11,var31,var20);
    IBinder var7 = SurfaceControl.getInternalDisplayToken();
    SurfaceControl.rotateCropForSF(this,var14);
    SurfaceControl$ScreenshotGraphicBuffer var17 = SurfaceControl.screenshotToBuffer(var7,this,param2,param3,param4,var14);
    GraphicBuffer var19 = var17.getGraphicBuffer();
    ColorSpace var21 = var17.getColorSpace();
    Bitmap var23 = Bitmap.wrapHardwareBuffer(var19,var21);
    Landroid/graphics/Bitmap var23<PATH_SEP>WindowManagerGlobalLock var11 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var13 = this.mRoot;
    DisplayContent var15 = var13.getDisplayContent(0);
    WindowManagerService.resetPriorityAfterLockedSection();
    WindowManagerThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.reset();
    int var3 = Process.myTid();
    int var4 = this.mAnimationThreadId;
    int var5 = this.mSurfaceAnimationThreadId;
    reset();<PATH_SEP>WindowManagerGlobalLock var11 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var13 = this.mRoot;
    DisplayContent var15 = var13.getDisplayContent(0);
    Bitmap$Config var16 = ARGB_8888;
    Bitmap var18 = var15.screenshotDisplayLocked(var16);
    WindowManagerService var3 = this.mWmService;
    WindowManagerPolicy var4 = var3.mPolicy;
    boolean var6 = var4.isScreenOn();
    DisplayInfo var8 = this.mDisplayInfo;
    int var9 = var8.logicalWidth;
    DisplayInfo var10 = this.mDisplayInfo;
    int var11 = var10.logicalHeight;
    Rect var12 = new Rect();
    Display var14 = this.mDisplay;
    int var16 = var14.getRotation();
    DisplayContent.convertCropForSurfaceFlinger(var12,var20,var9,var11);
    WindowManagerService var23 = this.mWmService;
    WindowAnimator var24 = var23.mAnimator;
    ScreenRotationAnimation var26 = var24.getScreenRotationAnimationLocked(0);
    boolean var28 = var26.isAnimating();
    Bitmap var35 = SurfaceControl.screenshot(var12,var9,var11,var31,var20);
    IBinder var7 = SurfaceControl.getInternalDisplayToken();
    SurfaceControl.rotateCropForSF(this,var14);
    SurfaceControl$ScreenshotGraphicBuffer var17 = SurfaceControl.screenshotToBuffer(var7,this,param2,param3,param4,var14);
    SurfaceControl$ScreenshotGraphicBuffer var12 = SurfaceControl.nativeScreenshot(this,param2,param3,param4,param5,param6,0);
    Landroid/view/SurfaceControl$ScreenshotGraphicBuffer var12<PATH_SEP>WindowManagerGlobalLock var11 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var13 = this.mRoot;
    DisplayContent var15 = var13.getDisplayContent(0);
    Bitmap$Config var16 = ARGB_8888;
    Bitmap var18 = var15.screenshotDisplayLocked(var16);
    WindowManagerService var3 = this.mWmService;
    WindowManagerPolicy var4 = var3.mPolicy;
    boolean var6 = var4.isScreenOn();
    DisplayInfo var8 = this.mDisplayInfo;
    int var9 = var8.logicalWidth;
    DisplayInfo var10 = this.mDisplayInfo;
    int var11 = var10.logicalHeight;
    Rect var12 = new Rect();
    Display var14 = this.mDisplay;
    int var16 = var14.getRotation();
    DisplayContent.convertCropForSurfaceFlinger(var12,var20,var9,var11);
    WindowManagerService var23 = this.mWmService;
    WindowAnimator var24 = var23.mAnimator;
    ScreenRotationAnimation var26 = var24.getScreenRotationAnimationLocked(0);
    boolean var28 = var26.isAnimating();
    Bitmap var35 = SurfaceControl.screenshot(var12,var9,var11,var31,var20);
    IBinder var7 = SurfaceControl.getInternalDisplayToken();
    SurfaceControl.rotateCropForSF(this,var14);
    int var6 = this.top;
    int var7 = this.left;
    this.top = var7;
    this.left = var6;
}