// API: getString
// Service: LockSettingsService_4

public void getString() {
    String var7 = getStringUnchecked(param2,param3,param4);
    boolean var7 = equals(param2);
    boolean var12 = equals(param2);
    LockSettingsStorage var14 = this.mStorage;
    String var16 = var14.readKeyValue(var13,param3,param4);
    LockSettingsStorage$Cache var5 = this.mCache;
    LockSettingsStorage$Cache var6 = this.mCache;
    boolean var8 = var6.hasKeyValue(param2,param4);
    LockSettingsStorage$Cache var10 = this.mCache;
    int var12 = LockSettingsStorage$Cache.access$100(var10);{int var12 = LockSettingsStorage$Cache.access$100(var10);};
    Object var13 = DEFAULT;
    LockSettingsStorage$DatabaseHelper var14 = this.mOpenHelper;
    SQLiteDatabase var16 = var14.getReadableDatabase();
    String var17 = COLUMNS_FOR_QUERY;
    String var19 = new String(2);
    String var21 = Integer.toString(param4);<PATH_SEP>String var7 = getStringUnchecked(param2,param3,param4);
    boolean var7 = equals(param2);
    boolean var12 = equals(param2);
    LockSettingsStorage var14 = this.mStorage;
    String var16 = var14.readKeyValue(var13,param3,param4);
    LockSettingsStorage$Cache var5 = this.mCache;
    LockSettingsStorage$Cache var6 = this.mCache;
    boolean var8 = var6.hasKeyValue(param2,param4);
    LockSettingsStorage$Cache var10 = this.mCache;
    int var12 = LockSettingsStorage$Cache.access$100(var10);{int var12 = LockSettingsStorage$Cache.access$100(var10);};
    Object var13 = DEFAULT;
    LockSettingsStorage$DatabaseHelper var14 = this.mOpenHelper;
    SQLiteDatabase var16 = var14.getReadableDatabase();
    String var17 = COLUMNS_FOR_QUERY;
    String var19 = new String(2);
    String var21 = Integer.toString(param4);
    arraystore 19[9] = 21;
    arraystore 19[22] = 2;
    Cursor var26 = var16.query(locksettings,var17,user=? AND name=?,var19,0,0,0);<PATH_SEP>String var7 = getStringUnchecked(param2,param3,param4);
    boolean var7 = equals(param2);
    boolean var12 = equals(param2);
    LockSettingsStorage var14 = this.mStorage;
    String var16 = var14.readKeyValue(var13,param3,param4);
    LockSettingsStorage$Cache var5 = this.mCache;
    LockSettingsStorage$Cache var6 = this.mCache;
    boolean var8 = var6.hasKeyValue(param2,param4);
    LockSettingsStorage$Cache var10 = this.mCache;
    int var12 = LockSettingsStorage$Cache.access$100(var10);{int var12 = LockSettingsStorage$Cache.access$100(var10);};
    Object var13 = DEFAULT;
    LockSettingsStorage$DatabaseHelper var14 = this.mOpenHelper;
    SQLiteDatabase var16 = var14.getReadableDatabase();
    String var17 = COLUMNS_FOR_QUERY;
    String var19 = new String(2);
    String var21 = Integer.toString(param4);
    arraystore 19[9] = 21;
    arraystore 19[22] = 2;
    Cursor var26 = var16.query(locksettings,var17,user=? AND name=?,var19,0,0,0);
    boolean var28 = var26.moveToFirst();
    String var30 = var26.getString(0);
    var26.close();
    LockSettingsStorage$Cache var39 = this.mCache;
    var39.putKeyValueIfUnchanged(param2,var35,param4,var12);
    putIfUnchanged(0,param2,param3,param4,param5);<PATH_SEP>String var7 = getStringUnchecked(param2,param3,param4);
    boolean var7 = equals(param2);
    boolean var12 = equals(param2);
    LockSettingsStorage var14 = this.mStorage;
    String var16 = var14.readKeyValue(var13,param3,param4);
    LockSettingsStorage$Cache var5 = this.mCache;
    LockSettingsStorage$Cache var6 = this.mCache;
    boolean var8 = var6.hasKeyValue(param2,param4);
    LockSettingsStorage$Cache var10 = this.mCache;
    int var12 = LockSettingsStorage$Cache.access$100(var10);{int var12 = LockSettingsStorage$Cache.access$100(var10);};
    Object var13 = DEFAULT;
    LockSettingsStorage$DatabaseHelper var14 = this.mOpenHelper;
    SQLiteDatabase var16 = var14.getReadableDatabase();
    String var17 = COLUMNS_FOR_QUERY;
    String var19 = new String(2);
    String var21 = Integer.toString(param4);
    arraystore 19[9] = 21;
    arraystore 19[22] = 2;
    Cursor var26 = var16.query(locksettings,var17,user=? AND name=?,var19,0,0,0);
    boolean var28 = var26.moveToFirst();
    var26.close();
}