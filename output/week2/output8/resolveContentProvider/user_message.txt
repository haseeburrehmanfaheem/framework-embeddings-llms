// API: resolveContentProvider
// Service: PackageManagerService_4

public void resolveContentProvider() {
    ProviderInfo var6 = resolveContentProviderInternal(param2,param3,param4);
    UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var10 = updateFlagsForComponent(param3,param4,param2);
    int var12 = Binder.getCallingUid();
    ComponentResolver var13 = this.mComponentResolver;
    ProviderInfo var15 = var13.queryProvider(param2,var10,param4);
    Settings var16 = this.mSettings;
    boolean var18 = var16.isEnabledAndMatchLPr(var15,var10,param4);
    ArrayMap var19 = this.mPackages;
    Settings var20 = this.mSettings;
    ArrayMap var21 = var20.mPackages;
    String var22 = var15.packageName;
    Object var24 = var21.get(var22);
    PackageSetting var25 = (PackageSetting) var24;
    ComponentName var26 = new ComponentName();
    String var27 = var15.packageName;
    String var28 = var15.name;
    boolean var32 = filterAppAccessLPr(var25,var12,var26,4,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var25 = getInstantApp(param6);
    boolean var27 = canViewInstantApps(var14,param6);
    Context var6 = this.mContext;
    Context var11 = this.mContext;
    ComponentName var16 = getDefaultHomeActivity(param3);
    String var18 = var16.getPackageName();
    String var24 = this.mAppPredictionServicePackage;
    boolean 0<PATH_SEP>ProviderInfo var6 = resolveContentProviderInternal(param2,param3,param4);
    UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var10 = updateFlagsForComponent(param3,param4,param2);
    int var12 = Binder.getCallingUid();
    ComponentResolver var13 = this.mComponentResolver;
    ProviderInfo var15 = var13.queryProvider(param2,var10,param4);
    Settings var16 = this.mSettings;
    boolean var18 = var16.isEnabledAndMatchLPr(var15,var10,param4);
    ArrayMap var19 = this.mPackages;
    Settings var20 = this.mSettings;
    ArrayMap var21 = var20.mPackages;
    String var22 = var15.packageName;
    Object var24 = var21.get(var22);
    PackageSetting var25 = (PackageSetting) var24;
    ComponentName var26 = new ComponentName();
    String var27 = var15.packageName;
    String var28 = var15.name;
    boolean var32 = filterAppAccessLPr(var25,var12,var26,4,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var13 = this.mComponentResolver;
    PackageParser$Provider var15 = var13.getProvider(param2);
    ProviderInfo var16 = var15.info;
    int var17 = var16.flags;
    var18 = 1048576 and var17;
    boolean var20<PATH_SEP>ProviderInfo var6 = resolveContentProviderInternal(param2,param3,param4);
    UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var10 = updateFlagsForComponent(param3,param4,param2);
    int var12 = Binder.getCallingUid();
    ComponentResolver var13 = this.mComponentResolver;
    ProviderInfo var15 = var13.queryProvider(param2,var10,param4);
    Settings var16 = this.mSettings;
    boolean var18 = var16.isEnabledAndMatchLPr(var15,var10,param4);
    ArrayMap var19 = this.mPackages;
    Settings var20 = this.mSettings;
    ArrayMap var21 = var20.mPackages;
    String var22 = var15.packageName;
    Object var24 = var21.get(var22);
    PackageSetting var25 = (PackageSetting) var24;
    ComponentName var26 = new ComponentName();
    String var27 = var15.packageName;
    String var28 = var15.name;
    boolean var32 = filterAppAccessLPr(var25,var12,var26,4,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var43 = this.mComponentResolver;
    PackageParser$Activity var45 = var43.getActivity(param2);
    boolean 0<PATH_SEP>ProviderInfo var6 = resolveContentProviderInternal(param2,param3,param4);
    UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var10 = updateFlagsForComponent(param3,param4,param2);
    int var12 = Binder.getCallingUid();
    ComponentResolver var13 = this.mComponentResolver;
    ProviderInfo var15 = var13.queryProvider(param2,var10,param4);
    Settings var16 = this.mSettings;
    boolean var18 = var16.isEnabledAndMatchLPr(var15,var10,param4);
    ArrayMap var19 = this.mPackages;
    Settings var20 = this.mSettings;
    ArrayMap var21 = var20.mPackages;
    String var22 = var15.packageName;
    Object var24 = var21.get(var22);
    PackageSetting var25 = (PackageSetting) var24;
    ComponentName var26 = new ComponentName();
    String var27 = var15.packageName;
    String var28 = var15.name;
    boolean var32 = filterAppAccessLPr(var25,var12,var26,4,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var25 = getInstantApp(param6);
    boolean var27 = canViewInstantApps(var14,param6);
    Context var6 = this.mContext;
    boolean 1;
}