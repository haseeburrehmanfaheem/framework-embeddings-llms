// API: getAccountVisibility
// Service: AccountManagerService_3

public void getAccountVisibility() {
    Object var6 = Preconditions.checkNotNull(param2,account cannot be null);{Object var6 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var9 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var9 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    int var11 = Binder.getCallingUid();
    int var13 = UserHandle.getCallingUserId();
    String var14 = param2.type;
    boolean var16 = isAccountManagedByCaller(var14,var11,var13);{boolean var16 = isAccountManagedByCaller(var14,var11,var13);};
    long var35 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var37 = getUserAccounts(var13);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    Object var3 = param2.dbLock;
    Object var4 = param2.cacheLock;
    AccountsDb var5 = param2.accountsDb;
    List var7 = var5.findAllUidGrants();
    Iterator var9 = var7.iterator();
    Object var14 = var9.next();
    Integer var15 = (Integer) var14;
    int var17 = var15.intValue();
    PackageManager var18 = this.mPackageManager;
    String var20 = var18.getPackagesForUid(var17);
    AccountsDb var40 = param2.accountsDb;
    boolean var42 = var40.deleteGrantsByUid(var17);<PATH_SEP>Object var6 = Preconditions.checkNotNull(param2,account cannot be null);{Object var6 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var9 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var9 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    int var11 = Binder.getCallingUid();
    int var13 = UserHandle.getCallingUserId();
    String var14 = param2.type;
    boolean var16 = isAccountManagedByCaller(var14,var11,var13);{boolean var16 = isAccountManagedByCaller(var14,var11,var13);};
    long var35 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var37 = getUserAccounts(var13);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    validateAccountsInternal(var26,1);{validateAccountsInternal(var26,1);};
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>Object var6 = Preconditions.checkNotNull(param2,account cannot be null);{Object var6 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var9 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var9 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    int var11 = Binder.getCallingUid();
    int var13 = UserHandle.getCallingUserId();
    String var14 = param2.type;
    boolean var16 = isAccountManagedByCaller(var14,var11,var13);{boolean var16 = isAccountManagedByCaller(var14,var11,var13);};
    long var35 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var37 = getUserAccounts(var13);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    File var3 = new File();
    File var5 = Environment.getDataSystemDeDirectory(param2);
    String var9 = var3.getPath();
    Ljava/lang/String var9<PATH_SEP>Object var6 = Preconditions.checkNotNull(param2,account cannot be null);{Object var6 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var9 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var9 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    int var11 = Binder.getCallingUid();
    int var13 = UserHandle.getCallingUserId();
    String var14 = param2.type;
    boolean var16 = isAccountManagedByCaller(var14,var11,var13);{boolean var16 = isAccountManagedByCaller(var14,var11,var13);};
    long var35 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var37 = getUserAccounts(var13);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}