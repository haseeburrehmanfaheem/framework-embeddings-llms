// API: releasePlayer
// Service: AudioService_2

public void releasePlayer() {
    PlaybackActivityMonitor var3 = this.mPlaybackMonitor;
    int var5 = Binder.getCallingUid();
    var3.releasePlayer(param2,var5);
    Object var5 = this.mPlayerLock;
    HashMap var6 = this.mPlayers;
    Integer var7 = new Integer();
    Object var10 = var6.get(var7);
    AudioPlaybackConfiguration var11 = (AudioPlaybackConfiguration) var10;
    boolean var13 = PlaybackActivityMonitor.checkConfigurationCaller(param2,var11,param3);{boolean var13 = PlaybackActivityMonitor.checkConfigurationCaller(param2,var11,param3);};
    HashMap var27 = this.mPlayers;
    Integer var28 = new Integer();
    Object var31 = var27.remove(var28);
    PlaybackActivityMonitor$DuckingManager var32 = this.mDuckingManager;
    var32.removeReleased(var11);
    boolean var36 = var11.handleStateEvent(0);
    int var3 = this.mPlayerState;
    this.mPlayerState = param2;
    AudioPlaybackConfiguration$IPlayerShell var7 = this.mIPlayerShell;
    AudioPlaybackConfiguration$IPlayerShell var8 = this.mIPlayerShell;
    var8.release();
    IPlayer var2 = this.mIPlayer;<PATH_SEP>PlaybackActivityMonitor var3 = this.mPlaybackMonitor;
    int var5 = Binder.getCallingUid();
    var3.releasePlayer(param2,var5);
    Object var5 = this.mPlayerLock;
    HashMap var6 = this.mPlayers;
    Integer var7 = new Integer();
    Object var10 = var6.get(var7);
    AudioPlaybackConfiguration var11 = (AudioPlaybackConfiguration) var10;
    boolean var13 = PlaybackActivityMonitor.checkConfigurationCaller(param2,var11,param3);{boolean var13 = PlaybackActivityMonitor.checkConfigurationCaller(param2,var11,param3);};
    HashMap var27 = this.mPlayers;
    Integer var28 = new Integer();
    Object var31 = var27.remove(var28);
    PlaybackActivityMonitor$DuckingManager var32 = this.mDuckingManager;
    var32.removeReleased(var11);
    boolean var36 = var11.handleStateEvent(0);
    int var3 = this.mPlayerState;
    this.mPlayerState = param2;
    AudioPlaybackConfiguration$IPlayerShell var7 = this.mIPlayerShell;
    AudioPlaybackConfiguration$IPlayerShell var8 = this.mIPlayerShell;
    var8.release();
    IPlayer var2 = this.mIPlayer;
    IPlayer var4 = this.mIPlayer;
    IBinder var6 = var4.asBinder();
    boolean var8 = var6.unlinkToDeath(this,0);
    this.mIPlayer = 0;<PATH_SEP>PlaybackActivityMonitor var3 = this.mPlaybackMonitor;
    int var5 = Binder.getCallingUid();
    var3.releasePlayer(param2,var5);
    Object var5 = this.mPlayerLock;
    HashMap var6 = this.mPlayers;
    Integer var7 = new Integer();
    Object var10 = var6.get(var7);
    AudioPlaybackConfiguration var11 = (AudioPlaybackConfiguration) var10;
    boolean var13 = PlaybackActivityMonitor.checkConfigurationCaller(param2,var11,param3);{boolean var13 = PlaybackActivityMonitor.checkConfigurationCaller(param2,var11,param3);};
    HashMap var27 = this.mPlayers;
    Integer var28 = new Integer();
    Object var31 = var27.remove(var28);
    PlaybackActivityMonitor$DuckingManager var32 = this.mDuckingManager;
    var32.removeReleased(var11);
    boolean var36 = var11.handleStateEvent(0);
    dispatchPlaybackChange(1);
    ArrayList var3 = this.mClients;
    ArrayList var4 = this.mClients;
    boolean var6 = var4.isEmpty();
    Object var8 = this.mPlayerLock;
    HashMap var9 = this.mPlayers;
    boolean var11 = var9.isEmpty();
    ArrayList var12 = new ArrayList();
    HashMap var13 = this.mPlayers;
    Collection var15 = var13.values();
    ArrayList var17 = this.mClients;
    ArrayList var18 = this.mClients;
    boolean var20 = var18.isEmpty();
    boolean var21 = this.mHasPublicClients;
    ArrayList var23 = anonymizeForPublicConsumption(var12);
    ArrayList var27 = this.mClients;
    Iterator var29 = var27.iterator();
    Object var33 = var29.next();
    PlaybackActivityMonitor$PlayMonitorClient var34 = (PlaybackActivityMonitor$PlayMonitorClient) var33;
    int var35 = var34.mErrorCount;
    boolean var37 = var34.mIsPrivileged;
    IPlaybackConfigDispatcher var38 = var34.mDispatcherCb;
    var38.dispatchPlaybackConfigChange(var12,param2);<PATH_SEP>PlaybackActivityMonitor var3 = this.mPlaybackMonitor;
    int var5 = Binder.getCallingUid();
    var3.releasePlayer(param2,var5);
    Object var5 = this.mPlayerLock;
    HashMap var6 = this.mPlayers;
    Integer var7 = new Integer();
    Object var10 = var6.get(var7);
    AudioPlaybackConfiguration var11 = (AudioPlaybackConfiguration) var10;
    boolean var13 = PlaybackActivityMonitor.checkConfigurationCaller(param2,var11,param3);{boolean var13 = PlaybackActivityMonitor.checkConfigurationCaller(param2,var11,param3);};
    HashMap var27 = this.mPlayers;
    Integer var28 = new Integer();
    Object var31 = var27.remove(var28);
    PlaybackActivityMonitor$DuckingManager var32 = this.mDuckingManager;
    var32.removeReleased(var11);
    boolean var36 = var11.handleStateEvent(0);
    int var3 = this.mPlayerState;
    this.mPlayerState = param2;
    boolean var6;
}