// API: generateKey
// Service: LockSettingsService_2

public void generateKey() {
    RecoverableKeyStoreManager var3 = this.mRecoverableKeyStoreManager;
    String var5 = var3.generateKey(param2);
    String var5 = generateKeyWithMetadata(param2,0);
    Object var7 = Preconditions.checkNotNull(param2,alias is null);{Object var7 = Preconditions.checkNotNull(param2,alias is null);};
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    PlatformKeyManager var13 = this.mPlatformKeyManager;
    PlatformEncryptionKey var15 = var13.getEncryptKey(var11);
    init(param2);
    PlatformDecryptionKey var5 = getDecryptKeyInternal(param2);
    PlatformEncryptionKey var7 = getEncryptKeyInternal(param2);
    Lcom/android/server/locksettings/recoverablekeystore/PlatformEncryptionKey var7<PATH_SEP>RecoverableKeyStoreManager var3 = this.mRecoverableKeyStoreManager;
    String var5 = var3.generateKey(param2);
    String var5 = generateKeyWithMetadata(param2,0);
    Object var7 = Preconditions.checkNotNull(param2,alias is null);{Object var7 = Preconditions.checkNotNull(param2,alias is null);};
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    PlatformKeyManager var13 = this.mPlatformKeyManager;
    PlatformEncryptionKey var15 = var13.getEncryptKey(var11);
    RecoverableKeyGenerator var30 = this.mRecoverableKeyGenerator;
    [B var32 = var30.generateAndStoreKey(var15,var11,var9,param2,param3);
    ApplicationKeyStorage var33 = this.mApplicationKeyStorage;
    var33.setSymmetricKeyEntry(var11,var9,param2,var32);
    Locale var6 = US;
    Object var8 = new Object(4);
    Integer var10 = Integer.valueOf(param2);
    arraystore 8[11] = 10;
    Integer var13 = Integer.valueOf(param3);
    arraystore 8[14] = 13;
    arraystore 8[15] = 4;
    16 = arraylength 5;
    Integer var18 = Integer.valueOf(var16);
    arraystore 8[19] = 18;
    String var22 = String.format(var6,Set %d/%d/%s: %d bytes of key material,var8);<PATH_SEP>RecoverableKeyStoreManager var3 = this.mRecoverableKeyStoreManager;
    String var5 = var3.generateKey(param2);
    String var5 = generateKeyWithMetadata(param2,0);
    Object var7 = Preconditions.checkNotNull(param2,alias is null);{Object var7 = Preconditions.checkNotNull(param2,alias is null);};
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    PlatformKeyManager var13 = this.mPlatformKeyManager;
    PlatformEncryptionKey var15 = var13.getEncryptKey(var11);
    RecoverableKeyGenerator var30 = this.mRecoverableKeyGenerator;
    [B var32 = var30.generateAndStoreKey(var15,var11,var9,param2,param3);
    KeyGenerator var7 = this.mKeyGenerator;
    var7.init(256);<PATH_SEP>RecoverableKeyStoreManager var3 = this.mRecoverableKeyStoreManager;
    String var5 = var3.generateKey(param2);
    String var5 = generateKeyWithMetadata(param2,0);
    Object var7 = Preconditions.checkNotNull(param2,alias is null);{Object var7 = Preconditions.checkNotNull(param2,alias is null);};
    int var9 = Binder.getCallingUid();
    int var11 = UserHandle.getCallingUserId();
    PlatformKeyManager var13 = this.mPlatformKeyManager;
    PlatformEncryptionKey var15 = var13.getEncryptKey(var11);
    RecoverableKeyGenerator var30 = this.mRecoverableKeyGenerator;
    [B var32 = var30.generateAndStoreKey(var15,var11,var9,param2,param3);
    ApplicationKeyStorage var33 = this.mApplicationKeyStorage;
    var33.setSymmetricKeyEntry(var11,var9,param2,var32);
    Locale var6 = US;
    Object var8 = new Object(4);
    Integer var10 = Integer.valueOf(param2);
    arraystore 8[11] = 10;
    Integer var13 = Integer.valueOf(param3);
    arraystore 8[14] = 13;
    arraystore 8[15] = 4;
    16 = arraylength 5;
    Integer var18 = Integer.valueOf(var16);
    arraystore 8[19] = 18;
    String var22 = String.format(var6,Set %d/%d/%s: %d bytes of key material,var8);
    KeyStoreProxy var26 = this.mKeyStore;
    String var28 = getInternalAlias(param2,param3,param4);
    KeyStore$SecretKeyEntry var29 = new KeyStore$SecretKeyEntry();
    SecretKeySpec var30 = new SecretKeySpec();
    KeyProtection$Builder var34 = new KeyProtection$Builder();
    String var37 = new String(1);
    KeyProtection$Builder var39 = var34.setBlockModes(var37);
    String var41 = new String(1);
    KeyProtection$Builder var43 = var39.setEncryptionPaddings(var41);
    KeyProtection var45 = var43.build();
    var26.setEntry(var28,var29,var45);
}