// API: setBlockUninstallForUser
// Service: PackageManagerService_4

public void setBlockUninstallForUser() {
    Context var5 = this.mContext;
    ArrayMap var9 = this.mPackages;
    ArrayMap var10 = this.mPackages;
    Object var12 = var10.get(param2);
    PackageParser$Package var13 = (PackageParser$Package) var12;
    String var14 = var13.staticSharedLibName;
    Settings var16 = this.mSettings;
    var16.setBlockUninstallLPw(param4,param2,param3);
    Settings var18 = this.mSettings;
    var18.writePackageRestrictionsLPr(param4);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    boolean var4 = this.mInTag;
    append(<PATH_SEP>Context var5 = this.mContext;
    ArrayMap var9 = this.mPackages;
    ArrayMap var10 = this.mPackages;
    Object var12 = var10.get(param2);
    PackageParser$Package var13 = (PackageParser$Package) var12;
    String var14 = var13.staticSharedLibName;
    Settings var16 = this.mSettings;
    var16.setBlockUninstallLPw(param4,param2,param3);
    Settings var18 = this.mSettings;
    var18.writePackageRestrictionsLPr(param4);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Charset var8 = Charset.forName(param3);
    CharsetEncoder var10 = var8.newEncoder();
    CodingErrorAction var11 = REPLACE;
    CharsetEncoder var13 = var10.onMalformedInput(var11);
    CodingErrorAction var14 = REPLACE;
    CharsetEncoder var16 = var13.onUnmappableCharacter(var14);
    this.mCharset = var16;
    this.mOutputStream = param2;<PATH_SEP>Context var5 = this.mContext;
    ArrayMap var9 = this.mPackages;
    ArrayMap var10 = this.mPackages;
    Object var12 = var10.get(param2);
    PackageParser$Package var13 = (PackageParser$Package) var12;
    String var14 = var13.staticSharedLibName;
    Settings var16 = this.mSettings;
    var16.setBlockUninstallLPw(param4,param2,param3);
    Settings var18 = this.mSettings;
    var18.writePackageRestrictionsLPr(param4);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    boolean var4 = this.mInTag;
    append(<PATH_SEP>Context var5 = this.mContext;
    ArrayMap var9 = this.mPackages;
    ArrayMap var10 = this.mPackages;
    Object var12 = var10.get(param2);
    PackageParser$Package var13 = (PackageParser$Package) var12;
    String var14 = var13.staticSharedLibName;
    Settings var16 = this.mSettings;
    var16.setBlockUninstallLPw(param4,param2,param3);
    Settings var18 = this.mSettings;
    var18.writePackageRestrictionsLPr(param4);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    boolean var4 = this.mInTag;
    boolean var9 = this.mIndent;
    int var10 = this.mNesting;
    appendIndent(var10);
    int var14 = this.mNesting;
    var16 = var14 add 1;
    this.mNesting = var16;
    append(60);
    append(param2);
    append(58);
}