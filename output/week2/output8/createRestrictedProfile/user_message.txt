// API: createRestrictedProfile
// Service: UserManagerService_3

public void createRestrictedProfile() {
    UserInfo var9 = createProfileForUser(param2,8,param3,0);
    long var11 = Binder.clearCallingIdentity();
    int var13 = var9.id;
    setUserRestriction(no_modify_accounts,1,var13);
    Object var10 = this.mRestrictionsLock;
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param4);
    Bundle var14 = (Bundle) var13;
    Bundle var16 = UserRestrictionsUtils.clone(var14);
    var16.putBoolean(param2,param3);
    updateUserRestrictionsInternalLR(var16,param4);
    SparseArray var4 = this.mAppliedUserRestrictions;
    Object var6 = var4.get(param3);
    Bundle var7 = (Bundle) var6;
    Bundle var9 = UserRestrictionsUtils.nonNull(var7);
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param3);
    Bundle var14 = (Bundle) var13;
    Preconditions.checkState(var16);{Preconditions.checkState(var16);};
    SparseArray var18 = this.mCachedEffectiveUserRestrictions;
    Object var20 = var18.get(param3);
    Preconditions.checkState(var21);{Preconditions.checkState(var21);};
    SparseArray var23 = this.mBaseUserRestrictions;
    boolean var25 = updateRestrictionsIfNeededLR(param3,param2,var23);
    UserManagerService$UserData var27 = getUserDataNoChecks(param3);
    scheduleWriteUser(var27);
    Bundle var33 = computeEffectiveUserRestrictionsLR(param3);
    SparseArray var34 = this.mCachedEffectiveUserRestrictions;
    var34.put(param3,var33);
    IAppOpsService var36 = this.mAppOpsService;
    Handler var37 = this.mHandler;
    UserManagerService$2 var38 = new UserManagerService$2();
    boolean var41 = var37.post(var38);
    propagateUserRestrictionsLR(param3,var33,var9);
    boolean var6 = UserRestrictionsUtils.areEqual(param3,param4);<PATH_SEP>UserInfo var9 = createProfileForUser(param2,8,param3,0);
    long var11 = Binder.clearCallingIdentity();
    int var13 = var9.id;
    setUserRestriction(no_modify_accounts,1,var13);
    Object var10 = this.mRestrictionsLock;
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param4);
    Bundle var14 = (Bundle) var13;
    Bundle var16 = UserRestrictionsUtils.clone(var14);
    var16.putBoolean(param2,param3);
    updateUserRestrictionsInternalLR(var16,param4);
    SparseArray var4 = this.mAppliedUserRestrictions;
    Object var6 = var4.get(param3);
    Bundle var7 = (Bundle) var6;
    Bundle var9 = UserRestrictionsUtils.nonNull(var7);
    Bundle var33 = computeEffectiveUserRestrictionsLR(param3);
    SparseArray var34 = this.mCachedEffectiveUserRestrictions;
    var34.put(param3,var33);<PATH_SEP>UserInfo var9 = createProfileForUser(param2,8,param3,0);
    long var11 = Binder.clearCallingIdentity();
    int var13 = var9.id;
    setUserRestriction(no_modify_accounts,1,var13);
    Object var10 = this.mRestrictionsLock;
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param4);
    Bundle var14 = (Bundle) var13;
    Bundle var16 = UserRestrictionsUtils.clone(var14);
    var16.putBoolean(param2,param3);
    updateUserRestrictionsInternalLR(var16,param4);
    SparseArray var4 = this.mAppliedUserRestrictions;
    Object var6 = var4.get(param3);
    Bundle var7 = (Bundle) var6;
    Bundle var9 = UserRestrictionsUtils.nonNull(var7);
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param3);
    Bundle var14 = (Bundle) var13;
    Preconditions.checkState(var16);{Preconditions.checkState(var16);};
    SparseArray var18 = this.mCachedEffectiveUserRestrictions;
    Object var20 = var18.get(param3);
    Preconditions.checkState(var21);{Preconditions.checkState(var21);};
    SparseArray var23 = this.mBaseUserRestrictions;
    boolean var25 = updateRestrictionsIfNeededLR(param3,param2,var23);
    Bundle var33 = computeEffectiveUserRestrictionsLR(param3);
    SparseArray var34 = this.mCachedEffectiveUserRestrictions;
    var34.put(param3,var33);<PATH_SEP>UserInfo var9 = createProfileForUser(param2,8,param3,0);
    long var11 = Binder.clearCallingIdentity();
    int var13 = var9.id;
    setUserRestriction(no_modify_accounts,1,var13);
    Object var10 = this.mRestrictionsLock;
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param4);
    Bundle var14 = (Bundle) var13;
    Bundle var16 = UserRestrictionsUtils.clone(var14);
    var16.putBoolean(param2,param3);
    updateUserRestrictionsInternalLR(var16,param4);
    SparseArray var4 = this.mAppliedUserRestrictions;
    Object var6 = var4.get(param3);
    Bundle var7 = (Bundle) var6;
    Bundle var9 = UserRestrictionsUtils.nonNull(var7);
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param3);
    Bundle var14 = (Bundle) var13;
    Preconditions.checkState(var16);{Preconditions.checkState(var16);};
    SparseArray var18 = this.mCachedEffectiveUserRestrictions;
    Object var20 = var18.get(param3);
    Preconditions.checkState(var21);{Preconditions.checkState(var21);};
    SparseArray var23 = this.mBaseUserRestrictions;
    boolean var25 = updateRestrictionsIfNeededLR(param3,param2,var23);
    Object var6 = get(param2);
    Bundle var7 = (Bundle) var6;
    boolean var9 = UserRestrictionsUtils.areEqual(var7,param3);
    var11 = var9 xor 1;
    boolean var14 = UserRestrictionsUtils.isEmpty(param3);
    put(param2,param3);
}