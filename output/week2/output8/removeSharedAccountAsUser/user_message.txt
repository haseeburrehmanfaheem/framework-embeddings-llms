// API: removeSharedAccountAsUser
// Service: AccountManagerService_3

public void removeSharedAccountAsUser() {
    int var5 = AccountManagerService.getCallingUid();
    boolean var7 = removeSharedAccountAsUser(param2,param3,var5);
    int var6 = handleIncomingUser(param3);
    AccountManagerService$UserAccounts var8 = getUserAccounts(var6);
    AccountsDb var9 = var8.accountsDb;
    long var11 = var9.findSharedAccountId(param2);
    AccountsDb var12 = var8.accountsDb;
    boolean var14 = var12.deleteSharedAccount(param2);
    String var16 = DEBUG_ACTION_ACCOUNT_REMOVE;
    boolean var20 = removeAccountInternal(var8,param2,param4);
    int var7 = AccountManagerService$UserAccounts.access$800(param2);{int var7 = AccountManagerService$UserAccounts.access$800(param2);};
    String var16 = toSafeString();
    int var23 = AccountManagerService$UserAccounts.access$800(param2);{int var23 = AccountManagerService$UserAccounts.access$800(param2);};
    Object var37 = param2.dbLock;
    Object var38 = param2.cacheLock;
    Map var40 = getRequestingPackages(param3,param2);
    List var42 = getAccountRemovedReceivers(param3,param2);
    AccountsDb var43 = param2.accountsDb;
    var43.beginTransaction();
    AccountsDb var46 = param2.accountsDb;
    long var48 = var46.findDeAccountId(param3);
    AccountsDb$DeDatabaseHelper var3 = this.mDeDatabase;
    SQLiteDatabase var5 = var3.getReadableDatabase();
    String var7 = new String(1);
    String var11 = new String(2);
    String var12 = param2.name;
    arraystore 11[13] = 12;
    String var14 = param2.type;
    arraystore 11[8] = 14;
    Cursor var17 = var5.query(accounts,var7,name=? AND type=?,var11,0,0,0);
    boolean var19 = var17.moveToNext();
    AccountsDb.$closeResource(0,var17);
    long -1<PATH_SEP>int var5 = AccountManagerService.getCallingUid();
    boolean var7 = removeSharedAccountAsUser(param2,param3,var5);
    int var6 = handleIncomingUser(param3);
    AccountManagerService$UserAccounts var8 = getUserAccounts(var6);
    AccountsDb var9 = var8.accountsDb;
    long var11 = var9.findSharedAccountId(param2);
    AccountsDb var12 = var8.accountsDb;
    boolean var14 = var12.deleteSharedAccount(param2);
    String var16 = DEBUG_ACTION_ACCOUNT_REMOVE;
    boolean var20 = removeAccountInternal(var8,param2,param4);
    int var7 = AccountManagerService$UserAccounts.access$800(param2);{int var7 = AccountManagerService$UserAccounts.access$800(param2);};
    String var16 = toSafeString();
    int var23 = AccountManagerService$UserAccounts.access$800(param2);{int var23 = AccountManagerService$UserAccounts.access$800(param2);};
    Object var37 = param2.dbLock;
    Object var38 = param2.cacheLock;
    Map var40 = getRequestingPackages(param3,param2);
    List var42 = getAccountRemovedReceivers(param3,param2);
    AccountsDb var43 = param2.accountsDb;
    var43.beginTransaction();
    AccountsDb var46 = param2.accountsDb;
    long var48 = var46.findDeAccountId(param3);
    var53 = var48 lt 0;
    AccountsDb var54 = param2.accountsDb;
    boolean var56 = var54.deleteDeAccount(var48);
    AccountsDb var65 = param2.accountsDb;
    long var67 = var65.findCeAccountId(param3);
    var68 = var67 lt 0;
    AccountsDb var69 = param2.accountsDb;
    boolean var71 = var69.deleteCeAccount(var67);
    AccountsDb var83 = param2.accountsDb;
    var83.setTransactionSuccessful();
    AccountsDb var96 = param2.accountsDb;
    var96.endTransaction();
    removeAccountFromCacheLocked(param2,param3);
    HashMap var4 = param2.accountCache;
    String var5 = param3.type;
    Object var7 = var4.get(var5);
    Account var8 = (Account) var7;
    ArrayList var10 = new ArrayList();
    12 = arraylength 8;
    13 = arrayload 8[22];
    boolean var15 = var13.equals(param3);
    boolean var17 = var10.add(var13);<PATH_SEP>int var5 = AccountManagerService.getCallingUid();
    boolean var7 = removeSharedAccountAsUser(param2,param3,var5);
    int var6 = handleIncomingUser(param3);
    AccountManagerService$UserAccounts var8 = getUserAccounts(var6);
    AccountsDb var9 = var8.accountsDb;
    long var11 = var9.findSharedAccountId(param2);
    AccountsDb var12 = var8.accountsDb;
    boolean var14 = var12.deleteSharedAccount(param2);
    String var16 = DEBUG_ACTION_ACCOUNT_REMOVE;
    boolean var20 = removeAccountInternal(var8,param2,param4);
    int var7 = AccountManagerService$UserAccounts.access$800(param2);{int var7 = AccountManagerService$UserAccounts.access$800(param2);};
    String var16 = toSafeString();
    int var23 = AccountManagerService$UserAccounts.access$800(param2);{int var23 = AccountManagerService$UserAccounts.access$800(param2);};
    Object var37 = param2.dbLock;
    Object var38 = param2.cacheLock;
    Map var40 = getRequestingPackages(param3,param2);
    List var42 = getAccountRemovedReceivers(param3,param2);
    AccountsDb var43 = param2.accountsDb;
    var43.beginTransaction();
    AccountsDb var46 = param2.accountsDb;
    long var48 = var46.findDeAccountId(param3);
    var53 = var48 lt 0;
    AccountsDb var54 = param2.accountsDb;
    boolean var56 = var54.deleteDeAccount(var48);
    AccountsDb var65 = param2.accountsDb;
    long var67 = var65.findCeAccountId(param3);
    var68 = var67 lt 0;
    AccountsDb var69 = param2.accountsDb;
    boolean var71 = var69.deleteCeAccount(var67);
    AccountsDb var83 = param2.accountsDb;
    var83.setTransactionSuccessful();
    AccountsDb var96 = param2.accountsDb;
    var96.endTransaction();
    removeAccountFromCacheLocked(param2,param3);
    HashMap var4 = param2.accountCache;
    String var5 = param3.type;
    Object var7 = var4.get(var5);
    Account var8 = (Account) var7;
    Map var48 = AccountManagerService$UserAccounts.access$1100(param2);{Map var48 = AccountManagerService$UserAccounts.access$1100(param2);};
    Object var50 = var48.remove(param3);
    Map var52 = AccountManagerService$UserAccounts.access$1200(param2);{Map var52 = AccountManagerService$UserAccounts.access$1200(param2);};
    Object var54 = var52.remove(param3);
    HashMap var56 = AccountManagerService$UserAccounts.access$1400(param2);{HashMap var56 = AccountManagerService$UserAccounts.access$1400(param2);};
    Object var58 = var56.remove(param3);
    Map var60 = AccountManagerService$UserAccounts.access$900(param2);{Map var60 = AccountManagerService$UserAccounts.access$900(param2);};
    Object var62 = var60.remove(param3);<PATH_SEP>int var5 = AccountManagerService.getCallingUid();
    boolean var7 = removeSharedAccountAsUser(param2,param3,var5);
    int var6 = handleIncomingUser(param3);
    AccountManagerService$UserAccounts var8 = getUserAccounts(var6);
    AccountsDb var9 = var8.accountsDb;
    long var11 = var9.findSharedAccountId(param2);
    AccountsDb var12 = var8.accountsDb;
    boolean var14 = var12.deleteSharedAccount(param2);
    String var16 = DEBUG_ACTION_ACCOUNT_REMOVE;
    boolean var20 = removeAccountInternal(var8,param2,param4);
    int var7 = AccountManagerService$UserAccounts.access$800(param2);{int var7 = AccountManagerService$UserAccounts.access$800(param2);};
    String var16 = toSafeString();
    int var23 = AccountManagerService$UserAccounts.access$800(param2);{int var23 = AccountManagerService$UserAccounts.access$800(param2);};
    Object var37 = param2.dbLock;
    Object var38 = param2.cacheLock;
    Map var40 = getRequestingPackages(param3,param2);
    List var42 = getAccountRemovedReceivers(param3,param2);
    AccountsDb var43 = param2.accountsDb;
    var43.beginTransaction();
    AccountsDb var46 = param2.accountsDb;
    long var48 = var46.findDeAccountId(param3);
    var53 = var48 lt 0;
    AccountsDb var54 = param2.accountsDb;
    boolean var56 = var54.deleteDeAccount(var48);
    AccountsDb var65 = param2.accountsDb;
    long var67 = var65.findCeAccountId(param3);
    var68 = var67 lt 0;
    AccountsDb var69 = param2.accountsDb;
    boolean var71 = var69.deleteCeAccount(var67);
    AccountsDb var83 = param2.accountsDb;
    var83.setTransactionSuccessful();
    AccountsDb var96 = param2.accountsDb;
    var96.endTransaction();
    removeAccountFromCacheLocked(param2,param3);
    HashMap var4 = param2.accountCache;
    String var5 = param3.type;
    Object var7 = var4.get(var5);
    Account var8 = (Account) var7;
    ArrayList var10 = new ArrayList();
    12 = arraylength 8;
    boolean var26 = var10.isEmpty();
    int var28 = var10.size();
    Account var29 = new Account(var28);
    Object var31 = var10.toArray(var29);
    Account var32 = (Account) var31;
    HashMap var33 = param2.accountCache;
    String var34 = param3.type;
    Object var36 = var33.put(var34,var32);
    Map var48 = AccountManagerService$UserAccounts.access$1100(param2);{Map var48 = AccountManagerService$UserAccounts.access$1100(param2);};
    Object var50 = var48.remove(param3);
}