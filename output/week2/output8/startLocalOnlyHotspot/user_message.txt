// API: startLocalOnlyHotspot
// Service: WifiServiceImpl_4

public void startLocalOnlyHotspot() {
    int var6 = Binder.getCallingUid();
    int var8 = Binder.getCallingPid();
    long var15 = Binder.clearCallingIdentity();
    WifiPermissionsUtil var16 = this.mWifiPermissionsUtil;
    boolean var18 = var16.isLocationModeEnabled();
    Binder.restoreCallingIdentity(var15);
    UserManager var29 = this.mUserManager;
    boolean var32 = var29.hasUserRestriction(no_config_tethering);
    FrameworkFacade var33 = this.mFrameworkFacade;
    FrameworkFacade var37 = this.mFrameworkFacade;
    boolean var39 = var37.inStorageManagerCryptKeeperBounce();
    44 = conversion(J) 6;
    47 = conversion(J) 8;
    HashMap var51 = this.mLocalOnlyHotspotRequests;
    boolean var53 = isConcurrentLohsAndTetheringSupported();
    ConcurrentHashMap var55 = this.mIfaceIpModes;
    Integer var57 = Integer.valueOf(1);
    boolean var59 = var55.contains(var57);
    HashMap var63 = this.mLocalOnlyHotspotRequests;
    Integer var65 = Integer.valueOf(var8);
    Object var67 = var63.get(var65);
    LocalOnlyHotspotRequestInfo var68 = (LocalOnlyHotspotRequestInfo) var67;
    LocalOnlyHotspotRequestInfo var77 = new LocalOnlyHotspotRequestInfo();
    WifiServiceImpl$LocalOnlyRequestorCallback var78 = new WifiServiceImpl$LocalOnlyRequestorCallback();
    ConcurrentHashMap var81 = this.mIfaceIpModes;
    Integer var83 = Integer.valueOf(2);
    boolean var85 = var81.contains(var83);
    HashMap var86 = this.mLocalOnlyHotspotRequests;
    boolean var88 = var86.isEmpty();
    Context var89 = this.mContext;
    boolean var91 = WifiServiceImpl.hasAutomotiveFeature(var89);
    Context var92 = this.mContext;
    Resources var94 = var92.getResources();
    boolean var97 = var94.getBoolean(17891588);
    boolean var99 = is5GhzSupported();
    long var3 = getSupportedFeaturesInternal();
    AsyncChannel var2 = this.mClientModeImplChannel;
    ClientModeImpl var9 = this.mClientModeImpl;
    long var11 = var9.syncGetSupportedFeatures(var2);
    Message var5 = sendMessageSynchronously(131133);
    boolean var7 = messageIsNull(var5);
    Object var9 = var5.obj;
    Long var10 = (Long) var9;
    long var12 = var10.longValue();
    var5.recycle();
    Context var14 = this.mContext;
    PackageManager var16 = var14.getPackageManager();
    boolean var19 = var16.hasSystemFeature(android.hardware.wifi.rtt);<PATH_SEP>int var6 = Binder.getCallingUid();
    int var8 = Binder.getCallingPid();
    long var15 = Binder.clearCallingIdentity();
    WifiPermissionsUtil var16 = this.mWifiPermissionsUtil;
    boolean var18 = var16.isLocationModeEnabled();
    Binder.restoreCallingIdentity(var15);
    UserManager var29 = this.mUserManager;
    boolean var32 = var29.hasUserRestriction(no_config_tethering);
    FrameworkFacade var33 = this.mFrameworkFacade;
    FrameworkFacade var37 = this.mFrameworkFacade;
    boolean var39 = var37.inStorageManagerCryptKeeperBounce();
    44 = conversion(J) 6;
    47 = conversion(J) 8;
    HashMap var51 = this.mLocalOnlyHotspotRequests;
    boolean var53 = isConcurrentLohsAndTetheringSupported();
    ConcurrentHashMap var55 = this.mIfaceIpModes;
    Integer var57 = Integer.valueOf(1);
    boolean var59 = var55.contains(var57);
    HashMap var63 = this.mLocalOnlyHotspotRequests;
    Integer var65 = Integer.valueOf(var8);
    Object var67 = var63.get(var65);
    LocalOnlyHotspotRequestInfo var68 = (LocalOnlyHotspotRequestInfo) var67;
    LocalOnlyHotspotRequestInfo var77 = new LocalOnlyHotspotRequestInfo();
    WifiServiceImpl$LocalOnlyRequestorCallback var78 = new WifiServiceImpl$LocalOnlyRequestorCallback();
    ConcurrentHashMap var81 = this.mIfaceIpModes;
    Integer var83 = Integer.valueOf(2);
    boolean var85 = var81.contains(var83);
    HashMap var86 = this.mLocalOnlyHotspotRequests;
    boolean var88 = var86.isEmpty();
    Context var89 = this.mContext;
    boolean var91 = WifiServiceImpl.hasAutomotiveFeature(var89);
    Context var92 = this.mContext;
    Resources var94 = var92.getResources();
    boolean var97 = var94.getBoolean(17891588);
    boolean var99 = is5GhzSupported();
    Context var106 = this.mContext;
    WifiConfiguration var109 = WifiApConfigStore.generateLocalOnlyHotspotConfig(var106,var107);
    WifiConfiguration var3 = new WifiConfiguration();
    Resources var8 = getResources();
    String var11 = var8.getString(17041294);
    int var18 = WifiApConfigStore.getRandomIntForDefaultSsid();
    var3.SSID = var22;
    var3.apBand = param2;
    BitSet var23 = var3.allowedKeyManagement;
    var23.set(4);
    var3.networkId = -2;
    UUID var28 = UUID.randomUUID();
    String var30 = var28.toString();
    String var36 = var30.substring(0,8);
    String var42 = var30.substring(9,13);<PATH_SEP>int var6 = Binder.getCallingUid();
    int var8 = Binder.getCallingPid();
    long var15 = Binder.clearCallingIdentity();
    WifiPermissionsUtil var16 = this.mWifiPermissionsUtil;
    boolean var18 = var16.isLocationModeEnabled();
    Binder.restoreCallingIdentity(var15);
    UserManager var29 = this.mUserManager;
    boolean var32 = var29.hasUserRestriction(no_config_tethering);
    FrameworkFacade var33 = this.mFrameworkFacade;
    FrameworkFacade var37 = this.mFrameworkFacade;
    boolean var39 = var37.inStorageManagerCryptKeeperBounce();
    44 = conversion(J) 6;
    47 = conversion(J) 8;
    HashMap var51 = this.mLocalOnlyHotspotRequests;
    boolean var53 = isConcurrentLohsAndTetheringSupported();
    ConcurrentHashMap var55 = this.mIfaceIpModes;
    Integer var57 = Integer.valueOf(1);
    boolean var59 = var55.contains(var57);
    HashMap var63 = this.mLocalOnlyHotspotRequests;
    Integer var65 = Integer.valueOf(var8);
    Object var67 = var63.get(var65);
    LocalOnlyHotspotRequestInfo var68 = (LocalOnlyHotspotRequestInfo) var67;
    LocalOnlyHotspotRequestInfo var77 = new LocalOnlyHotspotRequestInfo();
    WifiServiceImpl$LocalOnlyRequestorCallback var78 = new WifiServiceImpl$LocalOnlyRequestorCallback();
    ConcurrentHashMap var81 = this.mIfaceIpModes;
    Integer var83 = Integer.valueOf(2);
    boolean var85 = var81.contains(var83);
    HashMap var86 = this.mLocalOnlyHotspotRequests;
    boolean var88 = var86.isEmpty();
    Context var89 = this.mContext;
    boolean var91 = WifiServiceImpl.hasAutomotiveFeature(var89);
    Context var92 = this.mContext;
    Resources var94 = var92.getResources();
    boolean var97 = var94.getBoolean(17891588);
    boolean var99 = is5GhzSupported();
    long var3 = getSupportedFeaturesInternal();
    AsyncChannel var2 = this.mClientModeImplChannel;
    ClientModeImpl var9 = this.mClientModeImpl;
    long var11 = var9.syncGetSupportedFeatures(var2);
    Message var5 = sendMessageSynchronously(131133);<PATH_SEP>int var6 = Binder.getCallingUid();
    int var8 = Binder.getCallingPid();
    long var15 = Binder.clearCallingIdentity();
    WifiPermissionsUtil var16 = this.mWifiPermissionsUtil;
    boolean var18 = var16.isLocationModeEnabled();
    Binder.restoreCallingIdentity(var15);
    UserManager var29 = this.mUserManager;
    boolean var32 = var29.hasUserRestriction(no_config_tethering);
    FrameworkFacade var33 = this.mFrameworkFacade;
    FrameworkFacade var37 = this.mFrameworkFacade;
    boolean var39 = var37.inStorageManagerCryptKeeperBounce();
    44 = conversion(J) 6;
    47 = conversion(J) 8;
    HashMap var51 = this.mLocalOnlyHotspotRequests;
    boolean var53 = isConcurrentLohsAndTetheringSupported();
    ConcurrentHashMap var55 = this.mIfaceIpModes;
    Integer var57 = Integer.valueOf(1);
    boolean var59 = var55.contains(var57);
    HashMap var63 = this.mLocalOnlyHotspotRequests;
    Integer var65 = Integer.valueOf(var8);
    Object var67 = var63.get(var65);
    LocalOnlyHotspotRequestInfo var68 = (LocalOnlyHotspotRequestInfo) var67;
    LocalOnlyHotspotRequestInfo var77 = new LocalOnlyHotspotRequestInfo();
    WifiServiceImpl$LocalOnlyRequestorCallback var78 = new WifiServiceImpl$LocalOnlyRequestorCallback();
    ConcurrentHashMap var81 = this.mIfaceIpModes;
    Integer var83 = Integer.valueOf(2);
    boolean var85 = var81.contains(var83);
    HashMap var86 = this.mLocalOnlyHotspotRequests;
    boolean var88 = var86.isEmpty();
    Context var89 = this.mContext;
    boolean var91 = WifiServiceImpl.hasAutomotiveFeature(var89);
    Context var92 = this.mContext;
    Resources var94 = var92.getResources();
    boolean var97 = var94.getBoolean(17891588);
    boolean var99 = is5GhzSupported();
    Context var106 = this.mContext;
    WifiConfiguration var109 = WifiApConfigStore.generateLocalOnlyHotspotConfig(var106,var107);
    WifiConfiguration var3 = new WifiConfiguration();
    Resources var8 = getResources();
    String var11 = var8.getString(17041294);
    int var18 = WifiApConfigStore.getRandomIntForDefaultSsid();
    var3.SSID = var22;
    var3.apBand = param2;
    BitSet var23 = var3.allowedKeyManagement;
    var23.set(4);
    var3.networkId = -2;
}