// API: editProperties
// Service: AccountManagerService_4

public void editProperties() {
    int var6 = Binder.getCallingUid();
    int var38 = Binder.getCallingPid();
    int var55 = UserHandle.getCallingUserId();
    boolean var57 = isAccountManagedByCaller(param3,var6,var55);{boolean var57 = isAccountManagedByCaller(param3,var6,var55);};
    long var73 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var75 = getUserAccounts(var55);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    SparseArray var3 = this.mUsers;
    boolean var5 = Thread.holdsLock(var3);
    Preconditions.checkState(var5,mUsers lock must be held);{Preconditions.checkState(var5,mUsers lock must be held);};
    AccountsDb var8 = param2.accountsDb;
    List var10 = var8.findCeAccountsNotInDe();
    boolean var12 = var10.isEmpty();
    int var17 = var10.size();
    int var24 = AccountManagerService$UserAccounts.access$800(param2);{int var24 = AccountManagerService$UserAccounts.access$800(param2);};
    String var35 = DEBUG_ACTION_SYNC_DE_CE_ACCOUNTS;
    Iterator var39 = var10.iterator();<PATH_SEP>int var6 = Binder.getCallingUid();
    int var38 = Binder.getCallingPid();
    int var55 = UserHandle.getCallingUserId();
    boolean var57 = isAccountManagedByCaller(param3,var6,var55);{boolean var57 = isAccountManagedByCaller(param3,var6,var55);};
    long var73 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var75 = getUserAccounts(var55);
    AccountManagerService$17 var76 = new AccountManagerService$17();
    var76.bind();<PATH_SEP>int var6 = Binder.getCallingUid();
    int var38 = Binder.getCallingPid();
    int var55 = UserHandle.getCallingUserId();
    boolean var57 = isAccountManagedByCaller(param3,var6,var55);{boolean var57 = isAccountManagedByCaller(param3,var6,var55);};
    long var73 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var75 = getUserAccounts(var55);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    Object var3 = param2.dbLock;
    Object var4 = param2.cacheLock;
    AccountsDb var5 = param2.accountsDb;
    List var7 = var5.findAllUidGrants();
    Iterator var9 = var7.iterator();<PATH_SEP>int var6 = Binder.getCallingUid();
    int var38 = Binder.getCallingPid();
    int var55 = UserHandle.getCallingUserId();
    boolean var57 = isAccountManagedByCaller(param3,var6,var55);{boolean var57 = isAccountManagedByCaller(param3,var6,var55);};
    long var73 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var75 = getUserAccounts(var55);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    File var3 = new File();
    File var5 = Environment.getDataSystemCeDirectory(param2);
    String var9 = var3.getPath();
    Ljava/lang/String var9;
}