// API: checkPackage
// Service: AppOpsService_3

public void checkPackage() {
    Object var5 = Preconditions.checkNotNull(param3);{Object var5 = Preconditions.checkNotNull(param3);};
    AppOpsService$Ops var8 = getOpsRawLocked(param2,param3,1,1);
    AppOpsService$UidState var8 = getUidStateLocked(param2,param4);
    SparseArray var4 = this.mUidStates;
    Object var6 = var4.get(param2);
    AppOpsService$UidState var7 = (AppOpsService$UidState) var6;
    long var9 = var7.pendingStateCommitTime;
    var11 = var9 lt 0;
    long var12 = var7.pendingStateCommitTime;
    long var13 = this.mLastRealtime;
    var14 = var12 lt var13;
    commitUidPendingStateLocked(var7);
    boolean var3 = param2.hasForegroundWatchers;
    SparseBooleanArray var5 = param2.foregroundOps;
    int var7 = var5.size();
    var9 = var7 sub 1;
    SparseBooleanArray var10 = param2.foregroundOps;
    boolean var12 = var10.valueAt(var120);
    SparseBooleanArray var13 = param2.foregroundOps;
    int var15 = var13.keyAt(var120);
    int var17 = AppOpsManager.resolveFirstUnrestrictedUidState(var15);
    18 = conversion(J) 17;
    int var19 = param2.state;
    20 = conversion(J) 19;
    var21 = var20 lt var18;
    int var23 = param2.pendingState;
    24 = conversion(J) 23;
    var25 = var24 lt var18;
    SparseArray var27 = this.mOpModeWatchers;
    Object var29 = var27.get(var15);
    ArraySet var30 = (ArraySet) var29;
    int var32 = var30.size();
    var33 = var32 sub 1;
    Object var35 = var30.valueAt(var108);
    AppOpsService$ModeCallback var36 = (AppOpsService$ModeCallback) var35;
    int var37 = var36.mFlags;
    var38 = var37 and 1;
    int var39 = param2.uid;
    SparseIntArray var42 = param2.opModes;
    SparseIntArray var44 = param2.opModes;
    int var46 = var44.indexOfKey(var15);
    ArrayMap var56 = param2.pkgOps;
    ArrayMap var57 = param2.pkgOps;
    int var59 = var57.size();
    var60 = var59 sub 1;
    ArrayMap var61 = param2.pkgOps;
    Object var63 = var61.valueAt(var100);
    AppOpsService$Ops var64 = (AppOpsService$Ops) var63;
    Object var66 = var64.get(var15);
    AppOpsService$Op var67 = (AppOpsService$Op) var66;
    Handler var73 = this.mHandler;
    -$$Lambda$AppOpsService$FYLTtxqrHmv8Y5UdZ9ybXKsSJhs var74 = INSTANCE;
    Integer var76 = Integer.valueOf(var15);
    int var77 = param2.uid;
    Integer var79 = Integer.valueOf(var77);
    ArrayMap var80 = param2.pkgOps;
    Object var82 = var80.keyAt(var100);
    String var83 = (String) var82;
    Message var85 = PooledLambda.obtainMessage(var74,this,var36,var76,var79,var83);
    boolean var87 = var73.sendMessage(var85);<PATH_SEP>Object var5 = Preconditions.checkNotNull(param3);{Object var5 = Preconditions.checkNotNull(param3);};
    AppOpsService$Ops var8 = getOpsRawLocked(param2,param3,1,1);
    AppOpsService$UidState var8 = getUidStateLocked(param2,param4);
    SparseArray var4 = this.mUidStates;
    Object var6 = var4.get(param2);
    AppOpsService$UidState var7 = (AppOpsService$UidState) var6;
    long var9 = var7.pendingStateCommitTime;
    var11 = var9 lt 0;
    long var12 = var7.pendingStateCommitTime;
    long var13 = this.mLastRealtime;
    var14 = var12 lt var13;
    commitUidPendingStateLocked(var7);
    boolean var3 = param2.hasForegroundWatchers;
    SparseBooleanArray var5 = param2.foregroundOps;
    int var7 = var5.size();
    var9 = var7 sub 1;
    SparseBooleanArray var10 = param2.foregroundOps;
    boolean var12 = var10.valueAt(var120);
    SparseBooleanArray var13 = param2.foregroundOps;
    int var15 = var13.keyAt(var120);
    int var17 = AppOpsManager.resolveFirstUnrestrictedUidState(var15);
    18 = conversion(J) 17;
    int var19 = param2.state;
    20 = conversion(J) 19;
    var21 = var20 lt var18;
    int var23 = param2.pendingState;
    24 = conversion(J) 23;
    var25 = var24 lt var18;
    SparseArray var27 = this.mOpModeWatchers;
    Object var29 = var27.get(var15);
    ArraySet var30 = (ArraySet) var29;
    int var32 = var30.size();
    var33 = var32 sub 1;
    Object var35 = var30.valueAt(var108);
    AppOpsService$ModeCallback var36 = (AppOpsService$ModeCallback) var35;
    int var37 = var36.mFlags;
    var38 = var37 and 1;
    int var39 = param2.uid;
    SparseIntArray var42 = param2.opModes;
    ArrayMap var56 = param2.pkgOps;
    ArrayMap var57 = param2.pkgOps;
    int var59 = var57.size();
    var60 = var59 sub 1;
    ArrayMap var61 = param2.pkgOps;
    Object var63 = var61.valueAt(var100);
    AppOpsService$Ops var64 = (AppOpsService$Ops) var63;
    Object var66 = var64.get(var15);
    AppOpsService$Op var67 = (AppOpsService$Op) var66;
    Handler var73 = this.mHandler;
    -$$Lambda$AppOpsService$FYLTtxqrHmv8Y5UdZ9ybXKsSJhs var74 = INSTANCE;
    Integer var76 = Integer.valueOf(var15);
    int var77 = param2.uid;
    Integer var79 = Integer.valueOf(var77);
    ArrayMap var80 = param2.pkgOps;
    Object var82 = var80.keyAt(var100);
    String var83 = (String) var82;
    Message var85 = PooledLambda.obtainMessage(var74,this,var36,var76,var79,var83);
    boolean var87 = var73.sendMessage(var85);
}