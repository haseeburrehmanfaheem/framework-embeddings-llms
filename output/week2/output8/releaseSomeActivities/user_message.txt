// API: releaseSomeActivities
// Service: ActivityTaskManagerService_2

public void releaseSomeActivities() {
    WindowManagerGlobalLock var3 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    long var6 = Binder.clearCallingIdentity();
    WindowProcessController var8 = getProcessController(param2);
    RootActivityContainer var9 = this.mRootActivityContainer;
    var9.releaseSomeActivitiesLocked(var8,low-mem);
    ArraySet var5 = getReleaseSomeActivitiesTasks();
    ArrayList var7 = this.mActivityDisplays;
    int var9 = var7.size();
    ArrayList var10 = this.mActivityDisplays;
    Object var12 = var10.get(var26);
    ActivityDisplay var13 = (ActivityDisplay) var12;
    int var15 = var13.getChildCount();
    ActivityStack var17 = var13.getChildAt(var22);
    int var19 = var17.releaseSomeActivitiesLocked(param2,var5,param3);
    int var6 = size();
    var8 = var6 div 4;
    ArrayList var12 = this.mTaskHistory;
    int var14 = var12.size();
    ArrayList var15 = this.mTaskHistory;
    Object var17 = var15.get(var65);
    TaskRecord var18 = (TaskRecord) var17;
    boolean var20 = contains(var18);
    ArrayList var21 = var18.mActivities;
    int var23 = var21.size();
    Object var25 = var21.get(var46);
    ActivityRecord var26 = (ActivityRecord) var25;
    WindowProcessController var27 = var26.app;
    boolean var29 = var26.isDestroyable();
    boolean var31 = destroyActivityLocked(var26,1,param4);
    ActivityStack$ActivityState var5 = DESTROYING;
    ActivityStack$ActivityState var6 = DESTROYED;
    boolean var8 = isState(var5,var6);
    Object var12 = new Object(5);
    int var13 = param2.mUserId;
    Integer var15 = Integer.valueOf(var13);
    arraystore 12[9] = 15;
    int var17 = System.identityHashCode(param2);
    Integer var19 = Integer.valueOf(var17);
    arraystore 12[20] = 19;
    TaskRecord var23 = getTaskRecord();
    int var24 = var23.taskId;
    Integer var26 = Integer.valueOf(var24);
    arraystore 12[21] = 26;
    String var28 = param2.shortComponentName;
    arraystore 12[27] = 28;
    arraystore 12[29] = 4;
    cleanUpActivityLocked(param2,0,0);
    boolean var34 = hasProcess();
    WindowProcessController var49 = param2.app;
    var49.removeActivity(param2);
    WindowProcessController var51 = param2.app;
    boolean var53 = var51.hasActivities();
    ActivityTaskManagerService var54 = this.mService;
    WindowProcessController var55 = param2.app;
    var54.clearHeavyWeightProcessIfEquals(var55);
    WindowProcessController var59 = param2.app;
    boolean var61 = var59.hasActivities();
    WindowProcessController var62 = param2.app;
    var62.updateProcessInfo(1,0,1);
    ActivityTaskManagerService var67 = this.mService;
    ClientLifecycleManager var69 = var67.getLifecycleManager();
    WindowProcessController var70 = param2.app;
    IApplicationThread var72 = var70.getThread();
    IApplicationToken$Stub var73 = param2.appToken;
    boolean var74 = param2.finishing;
    int var75 = param2.configChangeFlags;
    DestroyActivityItem var77 = DestroyActivityItem.obtain(var74,var75);
    var69.scheduleTransaction(var72,var73,var77);
    param2.nowVisible = 0;
    boolean var104 = param2.finishing;
    ActivityStack$ActivityState var108 = DESTROYING;
    setState(var108,destroyActivityLocked. finishing and not skipping destroy);
    Handler var111 = this.mHandler;
    Message var114 = var111.obtainMessage(102,param2);
    Handler var115 = this.mHandler;
    boolean var118 = var115.sendMessageDelayed(var114,10000);
    param2.configChangeFlags = 0;
    ArrayList var130 = this.mLRUActivities;
    boolean var132 = var130.remove(param2);
    boolean var124;
}