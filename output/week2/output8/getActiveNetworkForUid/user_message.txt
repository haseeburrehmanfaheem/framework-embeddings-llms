// API: getActiveNetworkForUid
// Service: ConnectivityService_3

public void getActiveNetworkForUid() {
    Network var6 = getActiveNetworkForUidInternal(param2,param3);
    int var5 = UserHandle.getUserId(param2);
    SparseArray var7 = this.mVpns;
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(var5);
    Vpn var11 = (Vpn) var10;
    boolean var13 = var11.appliesToUid(param2);
    int var15 = var11.getNetId();
    NetworkAgentInfo var27 = getNetworkAgentInfoForNetId(var16);
    NetworkCapabilities var29 = ConnectivityService.createDefaultNetworkCapabilitiesForUid(param2);
    NetworkCapabilities var2 = new NetworkCapabilities();
    NetworkCapabilities var6 = var2.addCapability(12);
    NetworkCapabilities var9 = var2.addCapability(13);
    NetworkCapabilities var12 = var2.removeCapability(15);
    NetworkCapabilities.checkValidCapability(param2);{NetworkCapabilities.checkValidCapability(param2);};
    var5 = 1 SHL param2;
    6 = bitnot 5;
    7 = conversion(J) 6;
    long var8 = this.mNetworkCapabilities;
    var9 = var8 and var7;
    this.mNetworkCapabilities = var9;
    long var10 = this.mUnwantedNetworkCapabilities;
    var11 = var10 and var7;
    this.mUnwantedNetworkCapabilities = var11;
    Landroid/net/NetworkCapabilities this<PATH_SEP>Network var6 = getActiveNetworkForUidInternal(param2,param3);
    int var5 = UserHandle.getUserId(param2);
    SparseArray var7 = this.mVpns;
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(var5);
    Vpn var11 = (Vpn) var10;
    boolean var13 = var11.appliesToUid(param2);
    int var15 = var11.getNetId();
    NetworkAgentInfo var27 = getNetworkAgentInfoForNetId(var16);
    NetworkCapabilities var29 = ConnectivityService.createDefaultNetworkCapabilitiesForUid(param2);
    NetworkCapabilities var30 = var27.networkCapabilities;
    boolean var32 = var29.satisfiedByNetworkCapabilities(var30);
    boolean var5 = satisfiedByNetworkCapabilities(param2,0);
    boolean var6 = satisfiedByNetCapabilities(param2,param3);
    boolean var8 = satisfiedByTransportTypes(param2);
    boolean var10 = satisfiedByLinkBandwidths(param2);
    boolean var15 = satisfiedBySpecifier(param2);
    boolean var17 = satisfiedBySignalStrength(param2);
    boolean var27 = satisfiedBySSID(param2);
    boolean var35<PATH_SEP>Network var6 = getActiveNetworkForUidInternal(param2,param3);
    int var5 = UserHandle.getUserId(param2);
    SparseArray var7 = this.mVpns;
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(var5);
    Vpn var11 = (Vpn) var10;
    boolean var13 = var11.appliesToUid(param2);
    int var15 = var11.getNetId();
    NetworkAgent var2 = this.mNetworkAgent;
    int var5<PATH_SEP>Network var6 = getActiveNetworkForUidInternal(param2,param3);
    int var5 = UserHandle.getUserId(param2);
    SparseArray var7 = this.mVpns;
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(var5);
    Vpn var11 = (Vpn) var10;
    boolean var13 = var11.appliesToUid(param2);
    int var15 = var11.getNetId();
    NetworkAgentInfo var27 = getNetworkAgentInfoForNetId(var16);
    NetworkCapabilities var29 = ConnectivityService.createDefaultNetworkCapabilitiesForUid(param2);
    NetworkCapabilities var2 = new NetworkCapabilities();
    NetworkCapabilities var6 = var2.addCapability(12);
    NetworkCapabilities var9 = var2.addCapability(13);
    NetworkCapabilities var12 = var2.removeCapability(15);
    NetworkCapabilities.checkValidCapability(param2);{NetworkCapabilities.checkValidCapability(param2);};
    var5 = 1 SHL param2;
    6 = bitnot 5;
    7 = conversion(J) 6;
    long var8 = this.mNetworkCapabilities;
    var9 = var8 and var7;
    this.mNetworkCapabilities = var9;
    long var10 = this.mUnwantedNetworkCapabilities;
    var11 = var10 and var7;
    this.mUnwantedNetworkCapabilities = var11;
}