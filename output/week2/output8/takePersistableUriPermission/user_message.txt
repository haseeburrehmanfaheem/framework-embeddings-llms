// API: takePersistableUriPermission
// Service: UriGrantsManagerService_5

public void takePersistableUriPermission() {
    ActivityManagerInternal var11 = this.mAmInternal;
    PackageManagerInternal var15 = getPmInternal();
    int var17 = var15.getPackageUid(param4,0,param5);
    int var23 = Preconditions.checkFlagsArgument(param3,3);{int var23 = Preconditions.checkFlagsArgument(param3,3);};
    Object var24 = this.mLock;
    GrantUri var25 = new GrantUri();
    UriPermission var28 = findUriPermissionLocked(var18,var25);
    GrantUri var29 = new GrantUri();
    UriPermission var33 = findUriPermissionLocked(var18,var29);
    int var34 = var28.persistableModeFlags;
    var35 = var34 and param3;
    int var37 = var33.persistableModeFlags;
    var38 = var37 and param3;
    boolean var59 = var28.takePersistableModes(param3);
    var60 = 0 or var59;
    boolean var66 = var33.takePersistableModes(param3);
    var67 = var61 or var66;
    boolean var73 = maybePrunePersistedUriGrants(var18);
    SparseArray var3 = this.mGrantedUriPermissions;
    Object var5 = var3.get(param2);
    ArrayMap var6 = (ArrayMap) var5;
    int var9 = var6.size();
    ArrayList var12 = Lists.newArrayList();
    Collection var14 = var6.values();
    Iterator var16 = var14.iterator();
    Object var20 = var16.next();
    UriPermission var21 = (UriPermission) var20;
    int var22 = var21.persistedModeFlags;
    boolean var24 = var12.add(var21);<PATH_SEP>ActivityManagerInternal var11 = this.mAmInternal;
    PackageManagerInternal var15 = getPmInternal();
    int var17 = var15.getPackageUid(param4,0,param5);
    int var23 = Preconditions.checkFlagsArgument(param3,3);{int var23 = Preconditions.checkFlagsArgument(param3,3);};
    Object var24 = this.mLock;
    GrantUri var25 = new GrantUri();
    UriPermission var28 = findUriPermissionLocked(var18,var25);
    GrantUri var29 = new GrantUri();
    UriPermission var33 = findUriPermissionLocked(var18,var29);
    int var34 = var28.persistableModeFlags;
    var35 = var34 and param3;
    int var37 = var33.persistableModeFlags;
    var38 = var37 and param3;
    boolean var59 = var28.takePersistableModes(param3);
    var4 = param2 and 3;
    int var5 = this.persistableModeFlags;
    var6 = var4 and var5;
    int var8 = this.persistedModeFlags;
    int var9 = this.persistedModeFlags;
    var10 = var5 and var4;
    var11 = var10 or var9;
    this.persistedModeFlags = var11;<PATH_SEP>ActivityManagerInternal var11 = this.mAmInternal;
    PackageManagerInternal var15 = getPmInternal();
    int var17 = var15.getPackageUid(param4,0,param5);
    int var23 = Preconditions.checkFlagsArgument(param3,3);{int var23 = Preconditions.checkFlagsArgument(param3,3);};
    Object var24 = this.mLock;
    GrantUri var25 = new GrantUri();
    UriPermission var28 = findUriPermissionLocked(var18,var25);
    GrantUri var29 = new GrantUri();
    UriPermission var33 = findUriPermissionLocked(var18,var29);
    int var34 = var28.persistableModeFlags;
    var35 = var34 and param3;
    int var37 = var33.persistableModeFlags;
    var38 = var37 and param3;
    boolean var59 = var28.takePersistableModes(param3);
    var60 = 0 or var59;
    boolean var66 = var33.takePersistableModes(param3);
    var67 = var61 or var66;
    boolean var73 = maybePrunePersistedUriGrants(var18);
    SparseArray var3 = this.mGrantedUriPermissions;
    Object var5 = var3.get(param2);
    ArrayMap var6 = (ArrayMap) var5;
    int var9 = var6.size();
    ArrayList var12 = Lists.newArrayList();
    Collection var14 = var6.values();
    Iterator var16 = var14.iterator();
    int var30 = var12.size();
    var31 = var30 sub 128;
    UriPermission$PersistedTimeComparator var32 = new UriPermission$PersistedTimeComparator();
    Collections.sort(var12,var32);
    Object var36 = var12.get(var44);
    UriPermission var37 = (UriPermission) var36;
    boolean var40 = var37.releasePersistableModes(-1);
    var4 = param2 and 3;
    int var5 = this.persistedModeFlags;
    int var6 = this.persistableModeFlags;
    7 = bitnot 4;
    var8 = var6 and var7;
    this.persistableModeFlags = var8;
    int var9 = this.persistedModeFlags;
    10 = bitnot 4;
    var11 = var9 and var10;
    this.persistedModeFlags = var11;
    int var12 = this.persistedModeFlags;
    this.persistedCreateTime = 0;
    updateModeFlags();
    int var17 = this.persistedModeFlags;
    boolean var19<PATH_SEP>ActivityManagerInternal var11 = this.mAmInternal;
    PackageManagerInternal var15 = getPmInternal();
    int var17 = var15.getPackageUid(param4,0,param5);
    int var23 = Preconditions.checkFlagsArgument(param3,3);{int var23 = Preconditions.checkFlagsArgument(param3,3);};
    Object var24 = this.mLock;
    GrantUri var25 = new GrantUri();
    UriPermission var28 = findUriPermissionLocked(var18,var25);
    GrantUri var29 = new GrantUri();
    UriPermission var33 = findUriPermissionLocked(var18,var29);
    int var34 = var28.persistableModeFlags;
    var35 = var34 and param3;
    int var37 = var33.persistableModeFlags;
    var38 = var37 and param3;
    boolean var59 = var28.takePersistableModes(param3);
    var60 = 0 or var59;
    boolean var66 = var33.takePersistableModes(param3);
    var67 = var61 or var66;
    boolean var73 = maybePrunePersistedUriGrants(var18);
    SparseArray var3 = this.mGrantedUriPermissions;
    Object var5 = var3.get(param2);
    ArrayMap var6 = (ArrayMap) var5;
    int var9 = var6.size();
    ArrayList var12 = Lists.newArrayList();
    Collection var14 = var6.values();
    Iterator var16 = var14.iterator();
    int var30 = var12.size();
    var31 = var30 sub 128;
    UriPermission$PersistedTimeComparator var32 = new UriPermission$PersistedTimeComparator();
    Collections.sort(var12,var32);
    Object var36 = var12.get(var44);
    UriPermission var37 = (UriPermission) var36;
    boolean var40 = var37.releasePersistableModes(-1);
    var4 = param2 and 3;
    int var5 = this.persistedModeFlags;
    int var6 = this.persistableModeFlags;
    7 = bitnot 4;
    var8 = var6 and var7;
    this.persistableModeFlags = var8;
    int var9 = this.persistedModeFlags;
    10 = bitnot 4;
    var11 = var9 and var10;
    this.persistedModeFlags = var11;
}