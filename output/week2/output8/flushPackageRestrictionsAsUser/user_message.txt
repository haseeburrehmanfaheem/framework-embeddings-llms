// API: flushPackageRestrictionsAsUser
// Service: PackageManagerService_2

public void flushPackageRestrictionsAsUser() {
    int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    UserManagerService var8 = sUserManager;
    boolean var10 = var8.exists(param2);
    PermissionManagerServiceInternal var11 = this.mPermissionManager;
    int var13 = Binder.getCallingUid();
    ArrayMap var16 = this.mPackages;
    Settings var17 = this.mSettings;
    var17.writePackageRestrictionsLPr(param2);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    boolean var4 = this.mInTag;
    append(<PATH_SEP>int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    UserManagerService var8 = sUserManager;
    boolean var10 = var8.exists(param2);
    PermissionManagerServiceInternal var11 = this.mPermissionManager;
    int var13 = Binder.getCallingUid();
    ArrayMap var16 = this.mPackages;
    Settings var17 = this.mSettings;
    var17.writePackageRestrictionsLPr(param2);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    boolean var4 = this.mInTag;
    boolean var9 = this.mIndent;
    int var10 = this.mNesting;
    appendIndent(var10);
    int var14 = this.mNesting;
    var16 = var14 add 1;
    this.mNesting = var16;
    append(60);<PATH_SEP>int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    UserManagerService var8 = sUserManager;
    boolean var10 = var8.exists(param2);
    PermissionManagerServiceInternal var11 = this.mPermissionManager;
    int var13 = Binder.getCallingUid();
    ArrayMap var16 = this.mPackages;
    Settings var17 = this.mSettings;
    var17.writePackageRestrictionsLPr(param2);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    boolean var4 = this.mInTag;
    append(<PATH_SEP>int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    UserManagerService var8 = sUserManager;
    boolean var10 = var8.exists(param2);
    PermissionManagerServiceInternal var11 = this.mPermissionManager;
    int var13 = Binder.getCallingUid();
    ArrayMap var16 = this.mPackages;
    Settings var17 = this.mSettings;
    var17.writePackageRestrictionsLPr(param2);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    boolean var4 = this.mInTag;
    append(;
}