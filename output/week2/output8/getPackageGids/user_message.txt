// API: getPackageGids
// Service: PackageManagerService_4

public void getPackageGids() {
    UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var10 = Binder.getCallingUid();
    int var12 = updateFlagsForPackage(param3,param4,param2);
    PermissionManagerServiceInternal var13 = this.mPermissionManager;
    ArrayMap var16 = this.mPackages;
    ArrayMap var17 = this.mPackages;
    Object var19 = var17.get(param2);
    PackageParser$Package var20 = (PackageParser$Package) var19;
    boolean var22 = var20.isMatch(var12);
    Object var45 = var20.mExtras;
    PackageSetting var46 = (PackageSetting) var45;
    boolean var48 = filterAppAccessLPr(var46,var10,param4);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    PackageParser$Package var37 = param2.pkg;
    boolean var38 = var37.visibleToInstantApps;
    var39 = var38 xor 1;
    boolean var39<PATH_SEP>UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var10 = Binder.getCallingUid();
    int var12 = updateFlagsForPackage(param3,param4,param2);
    PermissionManagerServiceInternal var13 = this.mPermissionManager;
    ArrayMap var16 = this.mPackages;
    ArrayMap var17 = this.mPackages;
    Object var19 = var17.get(param2);
    PackageParser$Package var20 = (PackageParser$Package) var19;
    boolean var22 = var20.isMatch(var12);
    Object var45 = var20.mExtras;
    PackageSetting var46 = (PackageSetting) var45;
    boolean var48 = filterAppAccessLPr(var46,var10,param4);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean var51 = isComponentVisibleToInstantApp(param4,param5);
    ComponentResolver var13 = this.mComponentResolver;
    PackageParser$Provider var15 = var13.getProvider(param2);
    ProviderInfo var16 = var15.info;
    int var17 = var16.flags;
    var18 = 1048576 and var17;
    boolean var20<PATH_SEP>UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var10 = Binder.getCallingUid();
    int var12 = updateFlagsForPackage(param3,param4,param2);
    PermissionManagerServiceInternal var13 = this.mPermissionManager;
    ArrayMap var16 = this.mPackages;
    ArrayMap var17 = this.mPackages;
    Object var19 = var17.get(param2);
    PackageParser$Package var20 = (PackageParser$Package) var19;
    boolean var22 = var20.isMatch(var12);
    Object var45 = var20.mExtras;
    PackageSetting var46 = (PackageSetting) var45;
    boolean var48 = filterAppAccessLPr(var46,var10,param4);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var25 = getInstantApp(param6);
    boolean var27 = canViewInstantApps(var14,param6);
    Context var6 = this.mContext;
    Context var11 = this.mContext;
    ComponentName var16 = getDefaultHomeActivity(param3);
    String var18 = var16.getPackageName();
    boolean 1<PATH_SEP>UserManagerService var5 = sUserManager;
    boolean var7 = var5.exists(param4);
    int var10 = Binder.getCallingUid();
    int var12 = updateFlagsForPackage(param3,param4,param2);
    PermissionManagerServiceInternal var13 = this.mPermissionManager;
    ArrayMap var16 = this.mPackages;
    ArrayMap var17 = this.mPackages;
    Object var19 = var17.get(param2);
    PackageParser$Package var20 = (PackageParser$Package) var19;
    boolean var22 = var20.isMatch(var12);
    Object var45 = var20.mExtras;
    PackageSetting var46 = (PackageSetting) var45;
    boolean var48 = filterAppAccessLPr(var46,var10,param4);
    boolean var7 = filterAppAccessLPr(param2,param3,0,0,param4);
    boolean var8 = Process.isIsolated(param3);
    SparseIntArray var10 = this.mIsolatedOwners;
    int var12 = var10.get(param3);
    String var18 = getInstantAppPackageName(var14);
    String var21 = param2.name;
    boolean var36 = getInstantApp(param6);
    ArrayMap var40 = this.mInstrumentation;
    Object var42 = var40.get(param4);
    PackageParser$Instrumentation var43 = (PackageParser$Instrumentation) var42;
    InstrumentationInfo var44 = var43.info;
    String var45 = var44.targetPackage;
    boolean 0;
}