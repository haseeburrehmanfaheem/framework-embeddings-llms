// API: registerPinnedStackListener
// Service: WindowManagerService_3

public void registerPinnedStackListener() {
    boolean var9 = this.mSupportsPictureInPicture;
    WindowManagerGlobalLock var10 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var12 = this.mRoot;
    DisplayContent var14 = var12.getDisplayContent(param2);
    PinnedStackController var16 = var14.getPinnedStackController();
    var16.registerPinnedStackListener(param3);
    IBinder var4 = asBinder();
    PinnedStackController$PinnedStackListenerDeathHandler var5 = this.mPinnedStackListenerDeathHandler;
    var4.linkToDeath(var5,0);
    PinnedStackController$PinnedStackControllerCallback var8 = this.mCallbacks;
    onListenerRegistered(var8);
    this.mPinnedStackListener = param2;
    boolean var17 = this.mIsImeShowing;
    int var18 = this.mImeHeight;
    notifyImeVisibilityChanged(var17,var18);
    boolean var20 = this.mIsShelfShowing;
    int var21 = this.mShelfHeight;
    notifyShelfVisibilityChanged(var20,var21);
    notifyMovementBoundsChanged(0,0);
    WindowManagerService var4 = this.mService;
    WindowManagerGlobalLock var5 = var4.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    IPinnedStackListener var7 = this.mPinnedStackListener;
    Rect var9 = new Rect();
    getInsetBounds(var9);
    Rect var14 = getDefaultBounds(-1082130432);
    WindowManagerService var3 = this.mService;
    WindowManagerGlobalLock var4 = var3.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    Rect var6 = new Rect();
    getInsetBounds(var6);<PATH_SEP>boolean var9 = this.mSupportsPictureInPicture;
    WindowManagerGlobalLock var10 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var12 = this.mRoot;
    DisplayContent var14 = var12.getDisplayContent(param2);
    PinnedStackController var16 = var14.getPinnedStackController();
    var16.registerPinnedStackListener(param3);
    IBinder var4 = asBinder();
    PinnedStackController$PinnedStackListenerDeathHandler var5 = this.mPinnedStackListenerDeathHandler;
    var4.linkToDeath(var5,0);
    PinnedStackController$PinnedStackControllerCallback var8 = this.mCallbacks;
    onListenerRegistered(var8);
    this.mPinnedStackListener = param2;
    boolean var17 = this.mIsImeShowing;
    int var18 = this.mImeHeight;
    notifyImeVisibilityChanged(var17,var18);
    boolean var20 = this.mIsShelfShowing;
    int var21 = this.mShelfHeight;
    notifyShelfVisibilityChanged(var20,var21);
    notifyMovementBoundsChanged(0,0);
    WindowManagerService var4 = this.mService;
    WindowManagerGlobalLock var5 = var4.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    IPinnedStackListener var7 = this.mPinnedStackListener;
    Rect var9 = new Rect();
    getInsetBounds(var9);
    Rect var14 = getDefaultBounds(-1082130432);
    float var15 = this.mAspectRatio;
    boolean var17 = isValidPictureInPictureAspectRatio(var15);{boolean var17 = isValidPictureInPictureAspectRatio(var15);};
    float var18 = this.mAspectRatio;
    Rect var20 = transformBoundsToAspectRatio(var14,var18,0);
    PipSnapAlgorithm var5 = this.mSnapAlgorithm;
    Rect var7 = getMovementBounds(param2);
    float var9 = var5.getSnapFraction(param2,var7);
    int var12 = this.mCurrentMinSize;
    PipSnapAlgorithm var14 = this.mSnapAlgorithm;
    15 = conversion(F) 13;
    DisplayInfo var16 = this.mDisplayInfo;
    int var17 = var16.logicalWidth;
    DisplayInfo var18 = this.mDisplayInfo;
    int var19 = var18.logicalHeight;
    Size var21 = var14.getSizeForAspectRatio(param3,var15,var17,var19);
    int var23 = centerX();
    24 = conversion(F) 23;
    int var26 = var21.getWidth();
    27 = conversion(F) 26;
    var29 = var27 div 1073741824;
    var30 = var24 sub var29;
    31 = conversion(I) 30;
    int var33 = centerY();
    34 = conversion(F) 33;
    int var36 = var21.getHeight();
    37 = conversion(F) 36;
    var38 = var37 div 1073741824;
    var39 = var34 sub var38;
    40 = conversion(I) 39;
    int var42 = var21.getWidth();
    var43 = var42 add var31;
    int var45 = var21.getHeight();
    var46 = var45 add var40;
    set(var31,var40,var43,var46);<PATH_SEP>boolean var9 = this.mSupportsPictureInPicture;
    WindowManagerGlobalLock var10 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var12 = this.mRoot;
    DisplayContent var14 = var12.getDisplayContent(param2);
    PinnedStackController var16 = var14.getPinnedStackController();
    var16.registerPinnedStackListener(param3);
    IBinder var4 = asBinder();
    PinnedStackController$PinnedStackListenerDeathHandler var5 = this.mPinnedStackListenerDeathHandler;
    var4.linkToDeath(var5,0);
    PinnedStackController$PinnedStackControllerCallback var8 = this.mCallbacks;
    onListenerRegistered(var8);
    this.mPinnedStackListener = param2;
    boolean var17 = this.mIsImeShowing;
    int var18 = this.mImeHeight;
    notifyImeVisibilityChanged(var17,var18);
    boolean var20 = this.mIsShelfShowing;
    int var21 = this.mShelfHeight;
    notifyShelfVisibilityChanged(var20,var21);
    notifyMovementBoundsChanged(0,0);
    WindowManagerService var4 = this.mService;
    WindowManagerGlobalLock var5 = var4.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    IPinnedStackListener var7 = this.mPinnedStackListener;
    Rect var9 = new Rect();
    getInsetBounds(var9);
    Rect var14 = getDefaultBounds(-1082130432);
    float var15 = this.mAspectRatio;
    boolean var17 = isValidPictureInPictureAspectRatio(var15);{boolean var17 = isValidPictureInPictureAspectRatio(var15);};
    float var18 = this.mAspectRatio;
    Rect var20 = transformBoundsToAspectRatio(var14,var18,0);
    PipSnapAlgorithm var5 = this.mSnapAlgorithm;
    Rect var7 = getMovementBounds(param2);
    float var9 = var5.getSnapFraction(param2,var7);
    int var11 = this.mDefaultMinSize;
    PipSnapAlgorithm var14 = this.mSnapAlgorithm;
    15 = conversion(F) 13;
    DisplayInfo var16 = this.mDisplayInfo;
    int var17 = var16.logicalWidth;
    DisplayInfo var18 = this.mDisplayInfo;
    int var19 = var18.logicalHeight;
    Size var21 = var14.getSizeForAspectRatio(param3,var15,var17,var19);
    int var23 = centerX();
    24 = conversion(F) 23;
    int var26 = var21.getWidth();
    27 = conversion(F) 26;
    var29 = var27 div 1073741824;
    var30 = var24 sub var29;
    31 = conversion(I) 30;
    int var33 = centerY();
    34 = conversion(F) 33;
    int var36 = var21.getHeight();
    37 = conversion(F) 36;
    var38 = var37 div 1073741824;
    var39 = var34 sub var38;
    40 = conversion(I) 39;
    int var42 = var21.getWidth();
    var43 = var42 add var31;
    int var45 = var21.getHeight();
    var46 = var45 add var40;
    set(var31,var40,var43,var46);
    PipSnapAlgorithm var48 = this.mSnapAlgorithm;
    Rect var50 = getMovementBounds(param2);
    var48.applySnapFraction(param2,var50,var9);
    boolean var52 = this.mIsMinimized;
    Rect var54 = getMovementBounds(param2);
    applyMinimizedOffset(param2,var54);<PATH_SEP>boolean var9 = this.mSupportsPictureInPicture;
    WindowManagerGlobalLock var10 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var12 = this.mRoot;
    DisplayContent var14 = var12.getDisplayContent(param2);
    PinnedStackController var16 = var14.getPinnedStackController();
    var16.registerPinnedStackListener(param3);
    IBinder var4 = asBinder();
    PinnedStackController$PinnedStackListenerDeathHandler var5 = this.mPinnedStackListenerDeathHandler;
    var4.linkToDeath(var5,0);
    PinnedStackController$PinnedStackControllerCallback var8 = this.mCallbacks;
    onListenerRegistered(var8);
    this.mPinnedStackListener = param2;
    boolean var17 = this.mIsImeShowing;
    int var18 = this.mImeHeight;
    notifyImeVisibilityChanged(var17,var18);
    boolean var20 = this.mIsShelfShowing;
    int var21 = this.mShelfHeight;
    notifyShelfVisibilityChanged(var20,var21);
    notifyMovementBoundsChanged(0,0);
    WindowManagerService var4 = this.mService;
    WindowManagerGlobalLock var5 = var4.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    IPinnedStackListener var7 = this.mPinnedStackListener;
    Rect var9 = new Rect();
    getInsetBounds(var9);
    Rect var14 = getDefaultBounds(-1082130432);
    WindowManagerService var3 = this.mService;
    WindowManagerGlobalLock var4 = var3.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    Rect var6 = new Rect();
    getInsetBounds(var6);
    Rect var9 = new Rect();
    PipSnapAlgorithm var11 = this.mSnapAlgorithm;
    float var12 = this.mDefaultAspectRatio;
    int var13 = this.mDefaultMinSize;
    14 = conversion(F) 13;
    DisplayInfo var15 = this.mDisplayInfo;
    int var16 = var15.logicalWidth;
    DisplayInfo var17 = this.mDisplayInfo;
    int var18 = var17.logicalHeight;
    Size var20 = var11.getSizeForAspectRatio(var12,var14,var16,var18);
    var22 = param2 lt -1082130432;
    int var24 = this.mDefaultStackGravity;
    int var26 = var20.getWidth();
    int var28 = var20.getHeight();
    boolean var29 = this.mIsImeShowing;
    boolean var32 = this.mIsShelfShowing;
    int var33 = this.mShelfHeight;
    int var36 = Math.max(var31,var34);
    Gravity.apply(var24,var26,var28,var6,0,var36,var9);
    WindowManagerService.resetPriorityAfterLockedSection();
    Landroid/graphics/Rect var9;
}