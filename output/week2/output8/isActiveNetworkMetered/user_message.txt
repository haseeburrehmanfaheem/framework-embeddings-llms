// API: isActiveNetworkMetered
// Service: ConnectivityService_1

public void isActiveNetworkMetered() {
    Network var4 = getActiveNetwork();
    int var4 = Binder.getCallingUid();
    Network var7 = getActiveNetworkForUidInternal(var4,0);
    int var5 = UserHandle.getUserId(param2);
    SparseArray var7 = this.mVpns;
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(var5);
    Vpn var11 = (Vpn) var10;
    boolean var13 = var11.appliesToUid(param2);
    int var15 = var11.getNetId();
    NetworkAgentInfo var27 = getNetworkAgentInfoForNetId(var16);
    NetworkCapabilities var29 = ConnectivityService.createDefaultNetworkCapabilitiesForUid(param2);
    NetworkCapabilities var30 = var27.networkCapabilities;
    boolean var32 = var29.satisfiedByNetworkCapabilities(var30);
    boolean var5 = satisfiedByNetworkCapabilities(param2,0);
    boolean var5<PATH_SEP>Network var4 = getActiveNetwork();
    int var4 = Binder.getCallingUid();
    Network var7 = getActiveNetworkForUidInternal(var4,0);
    int var5 = UserHandle.getUserId(param2);
    SparseArray var7 = this.mVpns;
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(var5);
    Vpn var11 = (Vpn) var10;
    boolean var13 = var11.appliesToUid(param2);
    boolean var4 = isRunningLocked();
    NetworkCapabilities var6 = this.mNetworkCapabilities;
    boolean var8 = var6.appliesToUid(param2);
    boolean var8<PATH_SEP>Network var4 = getActiveNetwork();
    int var4 = Binder.getCallingUid();
    Network var7 = getActiveNetworkForUidInternal(var4,0);
    int var5 = UserHandle.getUserId(param2);
    SparseArray var7 = this.mVpns;
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(var5);
    Vpn var11 = (Vpn) var10;
    boolean var13 = var11.appliesToUid(param2);
    int var15 = var11.getNetId();
    NetworkAgentInfo var27 = getNetworkAgentInfoForNetId(var16);
    NetworkCapabilities var29 = ConnectivityService.createDefaultNetworkCapabilitiesForUid(param2);
    NetworkCapabilities var30 = var27.networkCapabilities;
    boolean var32 = var29.satisfiedByNetworkCapabilities(var30);
    NetworkAgentInfo var39 = getDefaultNetwork();
    LinkProperties var40 = var39.linkProperties;
    boolean var42 = isNetworkWithLinkPropertiesBlocked(var40,param2,param3);
    SparseArray var6 = this.mVpns;
    SparseArray var7 = this.mVpns;
    int var9 = UserHandle.getUserId(param3);
    Object var11 = var7.get(var9);
    Vpn var12 = (Vpn) var11;
    boolean var14 = var12.getLockdown();
    NetworkPolicyManagerInternal var26 = this.mPolicyManagerInternal;
    boolean var28<PATH_SEP>Network var4 = getActiveNetwork();
    int var4 = Binder.getCallingUid();
    Network var7 = getActiveNetworkForUidInternal(var4,0);
    int var5 = UserHandle.getUserId(param2);
    SparseArray var7 = this.mVpns;
    SparseArray var8 = this.mVpns;
    Object var10 = var8.get(var5);
    Vpn var11 = (Vpn) var10;
    boolean var13 = var11.appliesToUid(param2);
    int var15 = var11.getNetId();
    NetworkAgentInfo var27 = getNetworkAgentInfoForNetId(var16);
    NetworkCapabilities var29 = ConnectivityService.createDefaultNetworkCapabilitiesForUid(param2);
    NetworkCapabilities var30 = var27.networkCapabilities;
    boolean var32 = var29.satisfiedByNetworkCapabilities(var30);
    NetworkAgentInfo var39 = getDefaultNetwork();
    LinkProperties var40 = var39.linkProperties;
    boolean var42 = isNetworkWithLinkPropertiesBlocked(var40,param2,param3);
    SparseArray var6 = this.mVpns;
    SparseArray var7 = this.mVpns;
    int var9 = UserHandle.getUserId(param3);
    Object var11 = var7.get(var9);
    Vpn var12 = (Vpn) var11;
    boolean var14 = var12.getLockdown();
    String var21 = getInterfaceName();
    NetworkPolicyManagerInternal var26 = this.mPolicyManagerInternal;
    boolean var28;
}