// API: recoverKeyChainSnapshot
// Service: LockSettingsService_4

public void recoverKeyChainSnapshot() {
    RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    Map var7 = var5.recoverKeyChainSnapshot(param2,param3,param4);
    int var7 = UserHandle.getCallingUserId();
    int var9 = Binder.getCallingUid();
    RecoverySessionStorage var10 = this.mRecoverySessionStorage;
    RecoverySessionStorage$Entry var12 = var10.get(var9,param2);
    [B var27 = decryptRecoveryKey(var12,param3);
    Map var29 = recoverApplicationKeys(var27,param4);
    Map var31 = importKeyMaterials(var7,var9,var29);
    ArrayMap var5 = new ArrayMap();
    int var7 = size();
    Set var10 = keySet();
    Iterator var12 = var10.iterator();
    Object var17 = var12.next();
    String var18 = (String) var17;
    ApplicationKeyStorage var19 = this.mApplicationKeyStorage;
    Object var21 = get(var18);
    [B var22 = ([B) var21;
    var19.setSymmetricKeyEntry(param2,param3,var18,var22);
    Locale var6 = US;
    Object var8 = new Object(4);
    Integer var10 = Integer.valueOf(param2);
    arraystore 8[11] = 10;
    Integer var13 = Integer.valueOf(param3);
    arraystore 8[14] = 13;
    arraystore 8[15] = 4;
    16 = arraylength 5;
    Integer var18 = Integer.valueOf(var16);
    arraystore 8[19] = 18;
    String var22 = String.format(var6,Set %d/%d/%s: %d bytes of key material,var8);
    KeyStoreProxy var26 = this.mKeyStore;
    String var28 = getInternalAlias(param2,param3,param4);
    KeyStore$SecretKeyEntry var29 = new KeyStore$SecretKeyEntry();
    SecretKeySpec var30 = new SecretKeySpec();
    KeyProtection$Builder var34 = new KeyProtection$Builder();
    String var37 = new String(1);
    KeyProtection$Builder var39 = var34.setBlockModes(var37);<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    Map var7 = var5.recoverKeyChainSnapshot(param2,param3,param4);
    int var7 = UserHandle.getCallingUserId();
    int var9 = Binder.getCallingUid();
    RecoverySessionStorage var10 = this.mRecoverySessionStorage;
    RecoverySessionStorage$Entry var12 = var10.get(var9,param2);
    [B var27 = decryptRecoveryKey(var12,param3);
    Map var29 = recoverApplicationKeys(var27,param4);
    Map var31 = importKeyMaterials(var7,var9,var29);
    ArrayMap var5 = new ArrayMap();
    int var7 = size();
    Set var10 = keySet();
    Iterator var12 = var10.iterator();
    Object var17 = var12.next();
    String var18 = (String) var17;
    ApplicationKeyStorage var19 = this.mApplicationKeyStorage;
    Object var21 = get(var18);
    [B var22 = ([B) var21;
    var19.setSymmetricKeyEntry(param2,param3,var18,var22);
    String var25 = getAlias(param2,param3,var18);
    Locale var26 = US;
    Object var28 = new Object(2);
    arraystore 28[15] = 18;
    arraystore 28[29] = 25;
    String var32 = String.format(var26,Import %s -> %s,var28);<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    Map var7 = var5.recoverKeyChainSnapshot(param2,param3,param4);
    int var7 = UserHandle.getCallingUserId();
    int var9 = Binder.getCallingUid();
    RecoverySessionStorage var10 = this.mRecoverySessionStorage;
    RecoverySessionStorage$Entry var12 = var10.get(var9,param2);
    [B var27 = decryptRecoveryKey(var12,param3);
    Map var29 = recoverApplicationKeys(var27,param4);<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    Map var7 = var5.recoverKeyChainSnapshot(param2,param3,param4);
    int var7 = UserHandle.getCallingUserId();
    int var9 = Binder.getCallingUid();
    RecoverySessionStorage var10 = this.mRecoverySessionStorage;
    RecoverySessionStorage$Entry var12 = var10.get(var9,param2);
    [B var27 = decryptRecoveryKey(var12,param3);
    Map var29 = recoverApplicationKeys(var27,param4);
    HashMap var4 = new HashMap();
    Iterator var7 = iterator();
    Object var14 = var7.next();
    WrappedApplicationKey var15 = (WrappedApplicationKey) var14;
    String var17 = var15.getAlias();
    [B var19 = var15.getEncryptedKeyMaterial();
    [B var21 = var15.getMetadata();
    [B var23 = KeySyncUtils.decryptApplicationKey(param2,var19,var21);
    [[B var6 = new [[B(2);
    [B var7 = ENCRYPTED_APPLICATION_KEY_HEADER;
    arraystore 6[4] = 7;
    arraystore 6[8] = 3;
    [B var10 = KeySyncUtils.concat(var6);
    [B var14 = SecureBox.decrypt(0,this,var12,param2);
}