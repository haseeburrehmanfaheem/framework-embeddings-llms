// API: setOverscan
// Service: WindowManagerService_6

public void setOverscan() {
    Context var7 = this.mContext;
    long var16 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var17 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var19 = this.mRoot;
    DisplayContent var21 = var19.getDisplayContent(param2);
    setOverscanLocked(var21,param3,param4,param5,param6);
    DisplayInfo var8 = getDisplayInfo();
    var8.overscanLeft = param3;
    var8.overscanTop = param4;
    var8.overscanRight = param5;
    var8.overscanBottom = param6;
    DisplayWindowSettings var9 = this.mDisplayWindowSettings;
    var9.setOverscanLocked(var8,param3,param4,param5,param6);
    reconfigureDisplayLocked(param2);
    boolean var4 = isReady();
    configureDisplayPolicy();
    setLayoutNeeded();
    boolean var9 = updateOrientationFromAppTokens();
    Configuration var11 = getConfiguration();
    Configuration var12 = this.mTempConfiguration;
    var12.setTo(var11);
    Configuration var14 = this.mTempConfiguration;
    computeScreenConfiguration(var14);
    int var3 = param2.uiMode;
    DisplayInfo var5 = updateDisplayAndOrientation(var3,param2);
    Rect var6 = this.mTmpBounds;
    calculateBounds(var5,var6);
    WindowConfiguration var8 = param2.windowConfiguration;
    Rect var9 = this.mTmpBounds;
    var8.setBounds(var9);
    int var11 = var5.logicalWidth;
    int var12 = var5.logicalHeight;
    param2.orientation = var15;
    WindowConfiguration var16 = param2.windowConfiguration;
    int var18 = getWindowingMode();
    var16.setWindowingMode(var18);
    WindowConfiguration var20 = param2.windowConfiguration;
    int var22 = getWindowingMode();
    var20.setDisplayWindowingMode(var22);
    WindowConfiguration var24 = param2.windowConfiguration;
    int var25 = var5.rotation;
    var24.setRotation(var25);
    DisplayMetrics var27 = this.mDisplayMetrics;
    float var28 = var27.density;
    DisplayPolicy var29 = this.mDisplayPolicy;
    int var30 = var5.rotation;
    int var31 = param2.uiMode;
    DisplayCutout var32 = var5.displayCutout;
    int var34 = var29.getConfigDisplayWidth(var11,var12,var30,var31,var32);
    35 = conversion(F) 34;
    var36 = var35 div var28;
    37 = conversion(I) 36;
    param2.screenWidthDp = var37;
    DisplayPolicy var38 = this.mDisplayPolicy;
    int var39 = var5.rotation;
    int var40 = param2.uiMode;
    DisplayCutout var41 = var5.displayCutout;
    int var43 = var38.getConfigDisplayHeight(var11,var12,var39,var40,var41);
    44 = conversion(F) 43;
    var45 = var44 div var28;
    46 = conversion(I) 45;
    param2.screenHeightDp = var46;
    DisplayPolicy var47 = this.mDisplayPolicy;
    int var48 = var5.rotation;
    DisplayCutout var49 = var5.displayCutout;
    Rect var50 = this.mTmpRect;
    var47.getNonDecorInsetsLw(var48,var11,var12,var49,var50);
    Rect var52 = this.mTmpRect;
    int var53 = var52.left;
    Rect var54 = this.mTmpRect;
    int var55 = var54.top;
    WindowConfiguration var56 = param2.windowConfiguration;
    int var57 = var5.appWidth;
    var58 = var57 add var53;
    int var59 = var5.appHeight;
    var60 = var59 add var55;
    var56.setAppBounds(var53,var55,var58,var60);
    int var62 = var5.rotation;
    int var64 = var5.rotation;
    int var69 = param2.screenLayout;
    var71 = var69 and -769;
    int var72 = var5.flags;
    var74 = var72 and 16;
    var78 = var71 or var77;
    param2.screenLayout = var78;
    int var79 = param2.screenWidthDp;
    80 = conversion(F) 79;
    float var81 = this.mCompatibleScreenScale;
    var82 = var80 div var81;
    83 = conversion(I) 82;
    param2.compatScreenWidthDp = var83;
    int var84 = param2.screenHeightDp;
    85 = conversion(F) 84;
    float var86 = this.mCompatibleScreenScale;
    var87 = var85 div var86;
    88 = conversion(I) 87;
    param2.compatScreenHeightDp = var88;
    int var89 = param2.uiMode;
    DisplayCutout var90 = var5.displayCutout;
    int var92 = computeCompatSmallestWidth(var68,var89,var11,var12,var90);
    param2.compatSmallestScreenWidthDp = var92;
    int var93 = var5.logicalDensityDpi;
    param2.densityDpi = var93;
    boolean var95 = var5.isHdr();
    WindowManagerService var96 = this.mWmService;
    boolean var98 = var96.hasHdrSupport();
    boolean var108 = var5.isWideColorGamut();
    WindowManagerService var109 = this.mWmService;
    boolean var111 = var109.hasWideColorGamutSupport();
    var118 = var104 or var115;
    param2.colorMode = var118;
    param2.touchscreen = 1;<PATH_SEP>Context var7 = this.mContext;
    long var16 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var17 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var19 = this.mRoot;
    DisplayContent var21 = var19.getDisplayContent(param2);
    setOverscanLocked(var21,param3,param4,param5,param6);
    DisplayInfo var8 = getDisplayInfo();
    var8.overscanLeft = param3;
    var8.overscanTop = param4;
    var8.overscanRight = param5;
    var8.overscanBottom = param6;
    DisplayWindowSettings var9 = this.mDisplayWindowSettings;
    var9.setOverscanLocked(var8,param3,param4,param5,param6);
    reconfigureDisplayLocked(param2);
    boolean var4 = isReady();
    configureDisplayPolicy();
    setLayoutNeeded();
    boolean var9 = updateOrientationFromAppTokens();
    Configuration var11 = getConfiguration();
    Configuration var12 = this.mTempConfiguration;
    var12.setTo(var11);
    Configuration var14 = this.mTempConfiguration;
    computeScreenConfiguration(var14);
    int var3 = param2.uiMode;
    DisplayInfo var5 = updateDisplayAndOrientation(var3,param2);
    Rect var6 = this.mTmpBounds;
    calculateBounds(var5,var6);
    WindowConfiguration var8 = param2.windowConfiguration;
    Rect var9 = this.mTmpBounds;
    var8.setBounds(var9);
    int var11 = var5.logicalWidth;
    int var12 = var5.logicalHeight;
    param2.orientation = var15;
    WindowConfiguration var16 = param2.windowConfiguration;
    int var18 = getWindowingMode();
    var16.setWindowingMode(var18);
    WindowConfiguration var20 = param2.windowConfiguration;
    int var22 = getWindowingMode();
    var20.setDisplayWindowingMode(var22);
    WindowConfiguration var24 = param2.windowConfiguration;
    int var25 = var5.rotation;
    var24.setRotation(var25);
    DisplayMetrics var27 = this.mDisplayMetrics;
    float var28 = var27.density;
    DisplayPolicy var29 = this.mDisplayPolicy;
    int var30 = var5.rotation;
    int var31 = param2.uiMode;
    DisplayCutout var32 = var5.displayCutout;
    int var34 = var29.getConfigDisplayWidth(var11,var12,var30,var31,var32);
    35 = conversion(F) 34;
    var36 = var35 div var28;
    37 = conversion(I) 36;
    param2.screenWidthDp = var37;
    DisplayPolicy var38 = this.mDisplayPolicy;
    int var39 = var5.rotation;
    int var40 = param2.uiMode;
    DisplayCutout var41 = var5.displayCutout;
    int var43 = var38.getConfigDisplayHeight(var11,var12,var39,var40,var41);
    44 = conversion(F) 43;
    var45 = var44 div var28;
    46 = conversion(I) 45;
    param2.screenHeightDp = var46;
    DisplayPolicy var47 = this.mDisplayPolicy;
    int var48 = var5.rotation;
    DisplayCutout var49 = var5.displayCutout;
    Rect var50 = this.mTmpRect;
    var47.getNonDecorInsetsLw(var48,var11,var12,var49,var50);
    Rect var52 = this.mTmpRect;
    int var53 = var52.left;
    Rect var54 = this.mTmpRect;
    int var55 = var54.top;
    WindowConfiguration var56 = param2.windowConfiguration;
    int var57 = var5.appWidth;
    var58 = var57 add var53;
    int var59 = var5.appHeight;
    var60 = var59 add var55;
    var56.setAppBounds(var53,var55,var58,var60);
    int var62 = var5.rotation;
    int var64 = var5.rotation;
    int var69 = param2.screenLayout;
    var71 = var69 and -769;
    int var72 = var5.flags;
    var74 = var72 and 16;
    var78 = var71 or var77;
    param2.screenLayout = var78;
    int var79 = param2.screenWidthDp;
    80 = conversion(F) 79;
    float var81 = this.mCompatibleScreenScale;
    var82 = var80 div var81;
    83 = conversion(I) 82;
    param2.compatScreenWidthDp = var83;
    int var84 = param2.screenHeightDp;
    85 = conversion(F) 84;
    float var86 = this.mCompatibleScreenScale;
    var87 = var85 div var86;
    88 = conversion(I) 87;
    param2.compatScreenHeightDp = var88;
    int var89 = param2.uiMode;
    DisplayCutout var90 = var5.displayCutout;
    int var92 = computeCompatSmallestWidth(var68,var89,var11,var12,var90);
    param2.compatSmallestScreenWidthDp = var92;
    int var93 = var5.logicalDensityDpi;
    param2.densityDpi = var93;
    boolean var95 = var5.isHdr();
    WindowManagerService var96 = this.mWmService;
    boolean var98 = var96.hasHdrSupport();
    boolean var108 = var5.isWideColorGamut();
    WindowManagerService var109 = this.mWmService;
    boolean var111 = var109.hasWideColorGamutSupport();
    var118 = var104 or var115;
    param2.colorMode = var118;
    param2.touchscreen = 1;
    param2.keyboard = 1;
    param2.navigation = 1;<PATH_SEP>Context var7 = this.mContext;
    long var16 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var17 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var19 = this.mRoot;
    DisplayContent var21 = var19.getDisplayContent(param2);
    setOverscanLocked(var21,param3,param4,param5,param6);
    DisplayInfo var8 = getDisplayInfo();
    var8.overscanLeft = param3;
    var8.overscanTop = param4;
    var8.overscanRight = param5;
    var8.overscanBottom = param6;
    DisplayWindowSettings var9 = this.mDisplayWindowSettings;
    var9.setOverscanLocked(var8,param3,param4,param5,param6);
    reconfigureDisplayLocked(param2);
    boolean var4 = isReady();
    configureDisplayPolicy();
    setLayoutNeeded();
    boolean var9 = updateOrientationFromAppTokens();
    Configuration var11 = getConfiguration();
    Configuration var12 = this.mTempConfiguration;
    var12.setTo(var11);
    Configuration var14 = this.mTempConfiguration;
    computeScreenConfiguration(var14);
    int var3 = param2.uiMode;
    DisplayInfo var5 = updateDisplayAndOrientation(var3,param2);
    Rect var6 = this.mTmpBounds;
    calculateBounds(var5,var6);
    WindowConfiguration var8 = param2.windowConfiguration;
    Rect var9 = this.mTmpBounds;
    var8.setBounds(var9);
    int var11 = var5.logicalWidth;
    int var12 = var5.logicalHeight;
    param2.orientation = var15;
    WindowConfiguration var16 = param2.windowConfiguration;
    int var18 = getWindowingMode();
    var16.setWindowingMode(var18);
    WindowConfiguration var20 = param2.windowConfiguration;
    int var22 = getWindowingMode();
    var20.setDisplayWindowingMode(var22);
    WindowConfiguration var24 = param2.windowConfiguration;
    int var25 = var5.rotation;
    var24.setRotation(var25);
    DisplayMetrics var27 = this.mDisplayMetrics;
    float var28 = var27.density;
    DisplayPolicy var29 = this.mDisplayPolicy;
    int var30 = var5.rotation;
    int var31 = param2.uiMode;
    DisplayCutout var32 = var5.displayCutout;
    int var34 = var29.getConfigDisplayWidth(var11,var12,var30,var31,var32);
    35 = conversion(F) 34;
    var36 = var35 div var28;
    37 = conversion(I) 36;
    param2.screenWidthDp = var37;
    DisplayPolicy var38 = this.mDisplayPolicy;
    int var39 = var5.rotation;
    int var40 = param2.uiMode;
    DisplayCutout var41 = var5.displayCutout;
    int var43 = var38.getConfigDisplayHeight(var11,var12,var39,var40,var41);
    44 = conversion(F) 43;
    var45 = var44 div var28;
    46 = conversion(I) 45;
    param2.screenHeightDp = var46;
    DisplayPolicy var47 = this.mDisplayPolicy;
    int var48 = var5.rotation;
    DisplayCutout var49 = var5.displayCutout;
    Rect var50 = this.mTmpRect;
    var47.getNonDecorInsetsLw(var48,var11,var12,var49,var50);
    Rect var52 = this.mTmpRect;
    int var53 = var52.left;
    Rect var54 = this.mTmpRect;
    int var55 = var54.top;
    WindowConfiguration var56 = param2.windowConfiguration;
    int var57 = var5.appWidth;
    var58 = var57 add var53;
    int var59 = var5.appHeight;
    var60 = var59 add var55;
    var56.setAppBounds(var53,var55,var58,var60);
    int var62 = var5.rotation;
    int var64 = var5.rotation;
    int var69 = param2.screenLayout;
    var71 = var69 and -769;
    int var72 = var5.flags;
    var74 = var72 and 16;
    var78 = var71 or var77;
    param2.screenLayout = var78;
    int var79 = param2.screenWidthDp;
    80 = conversion(F) 79;
    float var81 = this.mCompatibleScreenScale;
    var82 = var80 div var81;
    83 = conversion(I) 82;
    param2.compatScreenWidthDp = var83;
    int var84 = param2.screenHeightDp;
    85 = conversion(F) 84;
    float var86 = this.mCompatibleScreenScale;
    var87 = var85 div var86;
    88 = conversion(I) 87;
    param2.compatScreenHeightDp = var88;
    int var89 = param2.uiMode;
    DisplayCutout var90 = var5.displayCutout;
    int var92 = computeCompatSmallestWidth(var68,var89,var11,var12,var90);
    param2.compatSmallestScreenWidthDp = var92;
    int var93 = var5.logicalDensityDpi;
    param2.densityDpi = var93;
    boolean var95 = var5.isHdr();
    WindowManagerService var96 = this.mWmService;
    boolean var98 = var96.hasHdrSupport();
    boolean var108 = var5.isWideColorGamut();
    WindowManagerService var109 = this.mWmService;
    boolean var111 = var109.hasWideColorGamutSupport();
    var118 = var104 or var115;
    param2.colorMode = var118;
    param2.touchscreen = 1;
    param2.keyboard = 1;
    param2.navigation = 1;
    WindowManagerService var119 = this.mWmService;
    InputManagerService var120 = var119.mInputManager;
    InputDevice var122 = var120.getInputDevices();
    123 = arraylength 122;
    125 = arrayload 122[177];
    boolean var127 = var125.isVirtual();
    WindowManagerService var128 = this.mWmService;
    InputManagerService var129 = var128.mInputManager;
    int var131 = var125.getId();
    int var132 = var5.type;
    boolean var137 = var129.canDispatchToDisplay(var131,var135);<PATH_SEP>Context var7 = this.mContext;
    long var16 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var17 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    WindowManagerThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.boost();
    int var3 = Process.myTid();
    int var4 = this.mAnimationThreadId;
    int var5 = this.mSurfaceAnimationThreadId;
    boost();
    ThreadLocal var2 = this.mThreadState;
    Object var4 = var2.get();
    ThreadPriorityBooster$PriorityState var5 = (ThreadPriorityBooster$PriorityState) var4;
    int var6 = var5.regionCounter;
    int var8 = var5.tid;
    int var10 = Process.getThreadPriority(var8);
    int var11 = this.mBoostToPriority;
    int var19 = var5.regionCounter;
    var21 = var19 add 1;
    var5.regionCounter = var21;
}