// API: installExistingPackageAsUser
// Service: PackageManagerService_6

public void installExistingPackageAsUser() {
    int var9 = installExistingPackageAsUser(param2,param3,param4,param5,param6,0);
    int var9 = Binder.getCallingUid();
    Context var10 = this.mContext;
    Context var15 = this.mContext;
    PermissionManagerServiceInternal var42 = this.mPermissionManager;
    long var58 = Binder.clearCallingIdentity();
    var60 = param4 and 2048;
    var63 = param4 and 16384;
    ArrayMap var65 = this.mPackages;
    Settings var67 = this.mSettings;
    ArrayMap var68 = var67.mPackages;
    Object var70 = var68.get(param2);
    PackageSetting var71 = (PackageSetting) var70;
    int var74 = UserHandle.getUserId(var9);
    boolean var76 = canViewInstantApps(var9,var74);
    UserManagerService var77 = sUserManager;
    [I var79 = var77.getUserIds();
    80 = arraylength 79;
    81 = arrayload 79[87];
    boolean var83 = var71.getInstantApp(var81);
    var85 = var83 xor 1;
    boolean var103 = var71.getInstalled(param3);
    var71.setInstalled(1,param3);
    var71.setHidden(0,param3);
    var71.setInstallReason(param5,param3);
    Settings var109 = this.mSettings;
    var109.writePackageRestrictionsLPr(param3);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Charset var8 = Charset.forName(param3);
    CharsetEncoder var10 = var8.newEncoder();
    CodingErrorAction var11 = REPLACE;
    CharsetEncoder var13 = var10.onMalformedInput(var11);
    CodingErrorAction var14 = REPLACE;
    CharsetEncoder var16 = var13.onUnmappableCharacter(var14);
    this.mCharset = var16;<PATH_SEP>int var9 = installExistingPackageAsUser(param2,param3,param4,param5,param6,0);
    int var9 = Binder.getCallingUid();
    Context var10 = this.mContext;
    Context var15 = this.mContext;
    PermissionManagerServiceInternal var42 = this.mPermissionManager;
    long var58 = Binder.clearCallingIdentity();
    var60 = param4 and 2048;
    var63 = param4 and 16384;
    ArrayMap var65 = this.mPackages;
    Settings var67 = this.mSettings;
    ArrayMap var68 = var67.mPackages;
    Object var70 = var68.get(param2);
    PackageSetting var71 = (PackageSetting) var70;
    int var74 = UserHandle.getUserId(var9);
    boolean var76 = canViewInstantApps(var9,var74);
    UserManagerService var77 = sUserManager;
    [I var79 = var77.getUserIds();
    80 = arraylength 79;
    81 = arrayload 79[87];
    boolean var83 = var71.getInstantApp(var81);
    var85 = var83 xor 1;
    boolean var103 = var71.getInstalled(param3);
    var71.setInstalled(1,param3);
    var71.setHidden(0,param3);
    var71.setInstallReason(param5,param3);
    Settings var109 = this.mSettings;
    var109.writePackageRestrictionsLPr(param3);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    boolean var6 = equals(http://xmlpull.org/v1/doc/features.html#indent-output);
    this.mIndent = 1;<PATH_SEP>int var9 = installExistingPackageAsUser(param2,param3,param4,param5,param6,0);
    int var9 = Binder.getCallingUid();
    Context var10 = this.mContext;
    Context var15 = this.mContext;
    PermissionManagerServiceInternal var42 = this.mPermissionManager;
    long var58 = Binder.clearCallingIdentity();
    var60 = param4 and 2048;
    var63 = param4 and 16384;
    ArrayMap var65 = this.mPackages;
    Settings var67 = this.mSettings;
    ArrayMap var68 = var67.mPackages;
    Object var70 = var68.get(param2);
    PackageSetting var71 = (PackageSetting) var70;
    int var74 = UserHandle.getUserId(var9);
    boolean var76 = canViewInstantApps(var9,var74);
    UserManagerService var77 = sUserManager;
    [I var79 = var77.getUserIds();
    80 = arraylength 79;
    81 = arrayload 79[87];
    boolean var83 = var71.getInstantApp(var81);
    var85 = var83 xor 1;
    boolean var103 = var71.getInstalled(param3);
    var71.setInstalled(1,param3);
    var71.setHidden(0,param3);
    var71.setInstallReason(param5,param3);
    Settings var109 = this.mSettings;
    var109.writePackageRestrictionsLPr(param3);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    var44.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var58 = var44.startTag(0,package-restrictions);
    boolean var4 = this.mInTag;
    append(<PATH_SEP>int var9 = installExistingPackageAsUser(param2,param3,param4,param5,param6,0);
    int var9 = Binder.getCallingUid();
    Context var10 = this.mContext;
    Context var15 = this.mContext;
    PermissionManagerServiceInternal var42 = this.mPermissionManager;
    long var58 = Binder.clearCallingIdentity();
    var60 = param4 and 2048;
    var63 = param4 and 16384;
    ArrayMap var65 = this.mPackages;
    Settings var67 = this.mSettings;
    ArrayMap var68 = var67.mPackages;
    Object var70 = var68.get(param2);
    PackageSetting var71 = (PackageSetting) var70;
    int var74 = UserHandle.getUserId(var9);
    boolean var76 = canViewInstantApps(var9,var74);
    UserManagerService var77 = sUserManager;
    [I var79 = var77.getUserIds();
    80 = arraylength 79;
    81 = arrayload 79[87];
    boolean var83 = var71.getInstantApp(var81);
    var85 = var83 xor 1;
    boolean var103 = var71.getInstalled(param3);
    var71.setInstalled(1,param3);
    var71.setHidden(0,param3);
    var71.setInstallReason(param5,param3);
    Settings var109 = this.mSettings;
    var109.writePackageRestrictionsLPr(param3);
    long var12 = SystemClock.uptimeMillis();
    File var14 = getUserPackagesStateFile(param2);
    File var16 = getUserPackagesStateBackupFile(param2);
    File var17 = new File();
    String var19 = var14.getParent();
    boolean var22 = var17.mkdirs();
    boolean var24 = var14.exists();
    boolean var28 = var16.exists();
    boolean var35 = var14.renameTo(var16);
    FileOutputStream var39 = new FileOutputStream();
    BufferedOutputStream var42 = new BufferedOutputStream();
    FastXmlSerializer var44 = new FastXmlSerializer();
    Charset var46 = UTF_8;
    String var48 = var46.name();
    var44.setOutput(var42,var48);
    Boolean var53 = Boolean.valueOf(1);
    var44.startDocument(0,var53);
    boolean var10 = booleanValue();
    append(var21);
    this.mLineStart = 1;
}