// API: setUserRestrictions
// Service: AppOpsService_4

public void setUserRestrictions() {
    Object var8 = Preconditions.checkNotNull(param2);{Object var8 = Preconditions.checkNotNull(param2);};
    Object var10 = Preconditions.checkNotNull(param3);{Object var10 = Preconditions.checkNotNull(param3);};
    String var14 = AppOpsManager.opToRestriction(var23);
    boolean var16 = getBoolean(var14,0);
    setUserRestrictionNoCheck(var23,var16,param3,param4,0);
    ArrayMap var7 = this.mOpUserRestrictions;
    Object var9 = var7.get(param4);
    AppOpsService$ClientRestrictionState var10 = (AppOpsService$ClientRestrictionState) var9;
    AppOpsService$ClientRestrictionState var12 = new AppOpsService$ClientRestrictionState();
    ArrayMap var15 = this.mOpUserRestrictions;
    Object var17 = var15.put(param4,var12);
    boolean var22 = var18.setRestriction(param2,param3,param6,param5);
    SparseArray var7 = this.perUserRestrictions;
    SparseArray var8 = new SparseArray();
    this.perUserRestrictions = var8;
    AppOpsService var14 = this.this$0;
    Context var15 = var14.mContext;
    UserManager var17 = UserManager.get(var15);
    List var19 = var17.getUsers(0);
    int var21 = var19.size();
    [I var22 = new [I(var21);
    int var24 = var19.size();
    SparseArray var37 = this.perUserRestrictions;
    38 = arraylength 35;
    39 = arrayload 35[94];
    SparseArray var40 = this.perUserRestrictions;
    Object var42 = var40.get(var39);
    [Z var43 = ([Z) var42;
    [Z var45 = new [Z(91);
    SparseArray var46 = this.perUserRestrictions;
    var46.put(var39,var45);
    50 = arrayload 48[2];
    arraystore 48[2] = 3;
    boolean var52 = isDefault(var48);
    SparseArray var53 = this.perUserRestrictions;
    var53.remove(var39);
    boolean var65 = ArrayUtils.isEmpty(param4);
    SparseArray var66 = this.perUserExcludedPackages;
    SparseArray var71 = this.perUserExcludedPackages;
    Object var73 = var71.get(var39);
    Object var74 = (Object) var73;
    boolean var76 = Arrays.equals(param4,var74);
    SparseArray var77 = this.perUserExcludedPackages;
    var77.remove(var39);
    SparseArray var79 = this.perUserExcludedPackages;
    int var81 = var79.size();
    this.perUserExcludedPackages = 0;<PATH_SEP>Object var8 = Preconditions.checkNotNull(param2);{Object var8 = Preconditions.checkNotNull(param2);};
    Object var10 = Preconditions.checkNotNull(param3);{Object var10 = Preconditions.checkNotNull(param3);};
    String var14 = AppOpsManager.opToRestriction(var23);
    boolean var16 = getBoolean(var14,0);
    setUserRestrictionNoCheck(var23,var16,param3,param4,0);
    ArrayMap var7 = this.mOpUserRestrictions;
    Object var9 = var7.get(param4);
    AppOpsService$ClientRestrictionState var10 = (AppOpsService$ClientRestrictionState) var9;
    AppOpsService$ClientRestrictionState var12 = new AppOpsService$ClientRestrictionState();
    ArrayMap var15 = this.mOpUserRestrictions;
    Object var17 = var15.put(param4,var12);
    boolean var22 = var18.setRestriction(param2,param3,param6,param5);
    SparseArray var7 = this.perUserRestrictions;
    SparseArray var8 = new SparseArray();
    this.perUserRestrictions = var8;
    AppOpsService var14 = this.this$0;
    Context var15 = var14.mContext;
    UserManager var17 = UserManager.get(var15);
    List var19 = var17.getUsers(0);
    int var21 = var19.size();
    [I var22 = new [I(var21);
    int var24 = var19.size();
    SparseArray var37 = this.perUserRestrictions;
    38 = arraylength 35;
    39 = arrayload 35[94];
    SparseArray var40 = this.perUserRestrictions;
    Object var42 = var40.get(var39);
    [Z var43 = ([Z) var42;
    [Z var45 = new [Z(91);
    SparseArray var46 = this.perUserRestrictions;
    var46.put(var39,var45);
    50 = arrayload 48[2];
    boolean var65 = ArrayUtils.isEmpty(param4);
    SparseArray var66 = this.perUserExcludedPackages;
    SparseArray var67 = new SparseArray();
    this.perUserExcludedPackages = var67;
    SparseArray var71 = this.perUserExcludedPackages;
    Object var73 = var71.get(var39);
    Object var74 = (Object) var73;
    boolean var76 = Arrays.equals(param4,var74);
    SparseArray var77 = this.perUserExcludedPackages;
    var77.remove(var39);
    SparseArray var79 = this.perUserExcludedPackages;
    int var81 = var79.size();
    this.perUserExcludedPackages = 0;<PATH_SEP>Object var8 = Preconditions.checkNotNull(param2);{Object var8 = Preconditions.checkNotNull(param2);};
    Object var10 = Preconditions.checkNotNull(param3);{Object var10 = Preconditions.checkNotNull(param3);};
    String var14 = AppOpsManager.opToRestriction(var23);
    boolean var16 = getBoolean(var14,0);
    setUserRestrictionNoCheck(var23,var16,param3,param4,0);
    ArrayMap var7 = this.mOpUserRestrictions;
    Object var9 = var7.get(param4);
    AppOpsService$ClientRestrictionState var10 = (AppOpsService$ClientRestrictionState) var9;
    AppOpsService$ClientRestrictionState var12 = new AppOpsService$ClientRestrictionState();
    ArrayMap var15 = this.mOpUserRestrictions;
    Object var17 = var15.put(param4,var12);
    boolean var22 = var18.setRestriction(param2,param3,param6,param5);
    SparseArray var7 = this.perUserRestrictions;
    SparseArray var8 = new SparseArray();
    this.perUserRestrictions = var8;
    AppOpsService var14 = this.this$0;
    Context var15 = var14.mContext;
    UserManager var17 = UserManager.get(var15);
    List var19 = var17.getUsers(0);
    int var21 = var19.size();
    [I var22 = new [I(var21);
    int var24 = var19.size();
    SparseArray var37 = this.perUserRestrictions;
    38 = arraylength 35;
    39 = arrayload 35[94];
    SparseArray var40 = this.perUserRestrictions;
    Object var42 = var40.get(var39);
    [Z var43 = ([Z) var42;
    [Z var45 = new [Z(91);
    SparseArray var46 = this.perUserRestrictions;
    var46.put(var39,var45);
    50 = arrayload 48[2];
    arraystore 48[2] = 3;
    boolean var52 = isDefault(var48);
    boolean var65 = ArrayUtils.isEmpty(param4);
    SparseArray var66 = this.perUserExcludedPackages;
    SparseArray var67 = new SparseArray();
    this.perUserExcludedPackages = var67;
    SparseArray var71 = this.perUserExcludedPackages;
    Object var73 = var71.get(var39);
    Object var74 = (Object) var73;
    boolean var76 = Arrays.equals(param4,var74);
    SparseArray var82 = this.perUserExcludedPackages;
    var82.put(var39,param4);<PATH_SEP>Object var8 = Preconditions.checkNotNull(param2);{Object var8 = Preconditions.checkNotNull(param2);};
    Object var10 = Preconditions.checkNotNull(param3);{Object var10 = Preconditions.checkNotNull(param3);};
    String var14 = AppOpsManager.opToRestriction(var23);
    boolean var16 = getBoolean(var14,0);
    setUserRestrictionNoCheck(var23,var16,param3,param4,0);
    ArrayMap var7 = this.mOpUserRestrictions;
    Object var9 = var7.get(param4);
    AppOpsService$ClientRestrictionState var10 = (AppOpsService$ClientRestrictionState) var9;
    AppOpsService$ClientRestrictionState var12 = new AppOpsService$ClientRestrictionState();
    ArrayMap var15 = this.mOpUserRestrictions;
    Object var17 = var15.put(param4,var12);
    boolean var22 = var18.setRestriction(param2,param3,param6,param5);
    SparseArray var7 = this.perUserRestrictions;
    SparseArray var8 = new SparseArray();
    this.perUserRestrictions = var8;
    AppOpsService var14 = this.this$0;
    Context var15 = var14.mContext;
    UserManager var17 = UserManager.get(var15);
    List var19 = var17.getUsers(0);
    int var21 = var19.size();
    [I var22 = new [I(var21);
    int var24 = var19.size();
    SparseArray var37 = this.perUserRestrictions;
    38 = arraylength 35;
    39 = arrayload 35[94];
    SparseArray var40 = this.perUserRestrictions;
    Object var42 = var40.get(var39);
    [Z var43 = ([Z) var42;
    [Z var45 = new [Z(91);
    SparseArray var46 = this.perUserRestrictions;
    var46.put(var39,var45);
    50 = arrayload 48[2];
    arraystore 48[2] = 3;
    boolean var52 = isDefault(var48);
    boolean var65 = ArrayUtils.isEmpty(param4);
    SparseArray var66 = this.perUserExcludedPackages;
    SparseArray var67 = new SparseArray();
    this.perUserExcludedPackages = var67;
    SparseArray var71 = this.perUserExcludedPackages;
    Object var73 = var71.get(var39);
    Object var74 = (Object) var73;
    boolean var76 = Arrays.equals(param4,var74);
    SparseArray var77 = this.perUserExcludedPackages;
    var77.remove(var39);
    SparseArray var79 = this.perUserExcludedPackages;
    int var81 = var79.size();
    this.perUserExcludedPackages = 0;
}