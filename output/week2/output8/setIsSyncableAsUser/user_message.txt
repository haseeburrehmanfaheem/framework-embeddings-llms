// API: setIsSyncableAsUser
// Service: ContentService_5

public void setIsSyncableAsUser() {
    boolean var7 = TextUtils.isEmpty(param3);
    Context var22 = this.mContext;
    int var27 = ContentService.normalizeSyncable(param4);
    int var29 = Binder.getCallingUid();
    int var31 = Binder.getCallingPid();
    long var33 = ContentService.clearCallingIdentity();
    SyncManager var35 = getSyncManager();
    SyncStorageEngine var37 = var35.getSyncStorageEngine();
    var37.setIsSyncable(param2,param5,param3,var27,var29,var31);
    SyncStorageEngine$EndPoint var8 = new SyncStorageEngine$EndPoint();
    setSyncableStateForEndPoint(var8,param5,param6,param7);
    Object var8 = new Object(8);
    arraystore 8[9] = 10;
    arraystore 8[11] = 2;
    arraystore 8[12] = 13;
    String var15 = Integer.toString(param3);
    arraystore 8[16] = 15;
    arraystore 8[17] = 18;
    Integer var20 = Integer.valueOf(param4);
    arraystore 8[21] = 20;
    arraystore 8[22] = 23;
    Integer var25 = Integer.valueOf(param5);
    arraystore 8[26] = 25;
    SparseArray var28 = this.mAuthorities;
    SyncStorageEngine$AuthorityInfo var31 = getOrCreateAuthorityLocked(param2,-1,0);
    String var43 = var31.toString();
    int var60 = var31.syncable;
    var31.syncable = var33;
    writeAccountInfoLocked();
    AtomicFile var15 = this.mAccountInfoFile;
    File var17 = var15.getBaseFile();
    AtomicFile var27 = this.mAccountInfoFile;
    FileOutputStream var29 = var27.startWrite();
    FastXmlSerializer var30 = new FastXmlSerializer();
    Charset var32 = UTF_8;
    String var34 = var32.name();
    var30.setOutput(var29,var34);
    Boolean var38 = Boolean.valueOf(1);
    var30.startDocument(0,var38);
    var30.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var43 = var30.startTag(0,accounts);
    String var47 = Integer.toString(3);
    XmlSerializer var49 = var30.attribute(0,version,var47);
    int var51 = this.mNextAuthorityId;
    String var53 = Integer.toString(var51);
    XmlSerializer var55 = var30.attribute(0,nextAuthorityId,var53);
    int var57 = this.mSyncRandomOffset;
    String var59 = Integer.toString(var57);
    XmlSerializer var61 = var30.attribute(0,offsetInSeconds,var59);
    SparseArray var62 = this.mMasterSyncAutomatically;
    int var64 = var62.size();
    SparseArray var67 = this.mMasterSyncAutomatically;
    int var69 = var67.keyAt(var90);
    SparseArray var70 = this.mMasterSyncAutomatically;
    Object var72 = var70.valueAt(var90);
    Boolean var73 = (Boolean) var72;
    XmlSerializer var75 = var30.startTag(0,listenForTickles);<PATH_SEP>boolean var7 = TextUtils.isEmpty(param3);
    Context var22 = this.mContext;
    int var27 = ContentService.normalizeSyncable(param4);
    int var29 = Binder.getCallingUid();
    int var31 = Binder.getCallingPid();
    long var33 = ContentService.clearCallingIdentity();
    SyncManager var35 = getSyncManager();
    SyncStorageEngine var37 = var35.getSyncStorageEngine();
    var37.setIsSyncable(param2,param5,param3,var27,var29,var31);
    SyncStorageEngine$EndPoint var8 = new SyncStorageEngine$EndPoint();
    setSyncableStateForEndPoint(var8,param5,param6,param7);
    Object var8 = new Object(8);
    arraystore 8[9] = 10;
    arraystore 8[11] = 2;
    arraystore 8[12] = 13;
    String var15 = Integer.toString(param3);
    arraystore 8[16] = 15;
    arraystore 8[17] = 18;
    Integer var20 = Integer.valueOf(param4);
    arraystore 8[21] = 20;
    arraystore 8[22] = 23;
    Integer var25 = Integer.valueOf(param5);
    arraystore 8[26] = 25;
    SparseArray var28 = this.mAuthorities;
    SyncStorageEngine$AuthorityInfo var31 = getOrCreateAuthorityLocked(param2,-1,0);
    String var43 = var31.toString();
    int var60 = var31.syncable;
    var31.syncable = var33;
    writeAccountInfoLocked();
    AtomicFile var15 = this.mAccountInfoFile;
    File var17 = var15.getBaseFile();
    AtomicFile var27 = this.mAccountInfoFile;
    FileOutputStream var29 = var27.startWrite();
    FastXmlSerializer var30 = new FastXmlSerializer();
    Charset var32 = UTF_8;
    String var34 = var32.name();
    var30.setOutput(var29,var34);
    Boolean var38 = Boolean.valueOf(1);
    var30.startDocument(0,var38);
    var30.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var43 = var30.startTag(0,accounts);
    String var47 = Integer.toString(3);
    XmlSerializer var49 = var30.attribute(0,version,var47);
    int var51 = this.mNextAuthorityId;
    String var53 = Integer.toString(var51);
    XmlSerializer var55 = var30.attribute(0,nextAuthorityId,var53);
    int var57 = this.mSyncRandomOffset;
    String var59 = Integer.toString(var57);
    XmlSerializer var61 = var30.attribute(0,offsetInSeconds,var59);
    SparseArray var62 = this.mMasterSyncAutomatically;
    int var64 = var62.size();
    SparseArray var93 = this.mAuthorities;
    int var95 = var93.size();
    SparseArray var96 = this.mAuthorities;
    Object var98 = var96.valueAt(var141);
    SyncStorageEngine$AuthorityInfo var99 = (SyncStorageEngine$AuthorityInfo) var98;
    SyncStorageEngine$EndPoint var100 = var99.target;
    XmlSerializer var102 = var30.startTag(0,authority);
    int var104 = var99.ident;
    String var106 = Integer.toString(var104);
    XmlSerializer var108 = var30.attribute(0,id,var106);
    int var109 = var100.userId;
    String var111 = Integer.toString(var109);
    XmlSerializer var113 = var30.attribute(0,user,var111);
    boolean var114 = var99.enabled;
    String var116 = Boolean.toString(var114);
    XmlSerializer var118 = var30.attribute(0,enabled,var116);
    Account var120 = var100.account;
    String var121 = var120.name;
    XmlSerializer var123 = var30.attribute(0,account,var121);
    Account var125 = var100.account;
    String var126 = var125.type;
    XmlSerializer var128 = var30.attribute(0,type,var126);
    String var129 = var100.provider;
    XmlSerializer var131 = var30.attribute(0,authority,var129);
    int var133 = var99.syncable;
    String var135 = Integer.toString(var133);<PATH_SEP>boolean var7 = TextUtils.isEmpty(param3);
    Context var22 = this.mContext;
    int var27 = ContentService.normalizeSyncable(param4);
    int var29 = Binder.getCallingUid();
    int var31 = Binder.getCallingPid();
    long var33 = ContentService.clearCallingIdentity();
    SyncManager var35 = getSyncManager();
    SyncStorageEngine var37 = var35.getSyncStorageEngine();
    var37.setIsSyncable(param2,param5,param3,var27,var29,var31);
    SyncStorageEngine$EndPoint var8 = new SyncStorageEngine$EndPoint();
    setSyncableStateForEndPoint(var8,param5,param6,param7);
    Object var8 = new Object(8);
    arraystore 8[9] = 10;
    arraystore 8[11] = 2;
    arraystore 8[12] = 13;
    String var15 = Integer.toString(param3);
    arraystore 8[16] = 15;
    arraystore 8[17] = 18;
    Integer var20 = Integer.valueOf(param4);
    arraystore 8[21] = 20;
    arraystore 8[22] = 23;
    Integer var25 = Integer.valueOf(param5);
    arraystore 8[26] = 25;
    SparseArray var28 = this.mAuthorities;
    SyncStorageEngine$AuthorityInfo var31 = getOrCreateAuthorityLocked(param2,-1,0);
    String var43 = var31.toString();
    int var60 = var31.syncable;
    var31.syncable = var33;
    writeAccountInfoLocked();
    AtomicFile var15 = this.mAccountInfoFile;
    File var17 = var15.getBaseFile();
    AtomicFile var27 = this.mAccountInfoFile;
    FileOutputStream var29 = var27.startWrite();
    FastXmlSerializer var30 = new FastXmlSerializer();
    Charset var32 = UTF_8;
    String var34 = var32.name();
    var30.setOutput(var29,var34);
    Boolean var38 = Boolean.valueOf(1);
    var30.startDocument(0,var38);
    var30.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var43 = var30.startTag(0,accounts);<PATH_SEP>boolean var7 = TextUtils.isEmpty(param3);
    Context var22 = this.mContext;
    int var27 = ContentService.normalizeSyncable(param4);
    int var29 = Binder.getCallingUid();
    int var31 = Binder.getCallingPid();
    long var33 = ContentService.clearCallingIdentity();
    SyncManager var35 = getSyncManager();
    SyncStorageEngine var37 = var35.getSyncStorageEngine();
    var37.setIsSyncable(param2,param5,param3,var27,var29,var31);
    SyncStorageEngine$EndPoint var8 = new SyncStorageEngine$EndPoint();
    setSyncableStateForEndPoint(var8,param5,param6,param7);
    Object var8 = new Object(8);
    arraystore 8[9] = 10;
    arraystore 8[11] = 2;
    arraystore 8[12] = 13;
    String var15 = Integer.toString(param3);
    arraystore 8[16] = 15;
    arraystore 8[17] = 18;
    Integer var20 = Integer.valueOf(param4);
    arraystore 8[21] = 20;
    arraystore 8[22] = 23;
    Integer var25 = Integer.valueOf(param5);
    arraystore 8[26] = 25;
    SparseArray var28 = this.mAuthorities;
    SyncStorageEngine$AuthorityInfo var31 = getOrCreateAuthorityLocked(param2,-1,0);
    String var43 = var31.toString();
    int var60 = var31.syncable;
    var31.syncable = var33;
    writeAccountInfoLocked();
    AtomicFile var27 = this.mAccountInfoFile;
    FileOutputStream var29 = var27.startWrite();
    FastXmlSerializer var30 = new FastXmlSerializer();
    Charset var32 = UTF_8;
    String var34 = var32.name();
    var30.setOutput(var29,var34);
    Boolean var38 = Boolean.valueOf(1);
    var30.startDocument(0,var38);
    var30.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var43 = var30.startTag(0,accounts);
    String var47 = Integer.toString(3);
    XmlSerializer var49 = var30.attribute(0,version,var47);
    int var51 = this.mNextAuthorityId;
    String var53 = Integer.toString(var51);
    XmlSerializer var55 = var30.attribute(0,nextAuthorityId,var53);
    int var57 = this.mSyncRandomOffset;
    String var59 = Integer.toString(var57);
    XmlSerializer var61 = var30.attribute(0,offsetInSeconds,var59);
    SparseArray var62 = this.mMasterSyncAutomatically;
    int var64 = var62.size();
    SparseArray var67 = this.mMasterSyncAutomatically;
    int var69 = var67.keyAt(var90);
    SparseArray var70 = this.mMasterSyncAutomatically;
    Object var72 = var70.valueAt(var90);
    Boolean var73 = (Boolean) var72;
    XmlSerializer var75 = var30.startTag(0,listenForTickles);
}