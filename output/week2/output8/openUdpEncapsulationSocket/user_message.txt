// API: openUdpEncapsulationSocket
// Service: IpSecService_3

public void openUdpEncapsulationSocket() {
    Object var13 = Preconditions.checkNotNull(param3,Null Binder passed to openUdpEncapsulationSocket);{Object var13 = Preconditions.checkNotNull(param3,Null Binder passed to openUdpEncapsulationSocket);};
    int var15 = Binder.getCallingUid();
    IpSecService$UserResourceTracker var16 = this.mUserResourceTracker;
    IpSecService$UserRecord var18 = var16.getUserRecord(var15);
    int var19 = this.mNextResourceId;
    var21 = var19 add 1;
    this.mNextResourceId = var21;
    IpSecService$ResourceTracker var23 = var18.mSocketQuotaTracker;
    boolean var25 = var23.isAvailable();
    int var26 = AF_INET;
    int var27 = SOCK_DGRAM;
    int var28 = IPPROTO_UDP;
    FileDescriptor var30 = Os.socket(var26,var27,var28);
    IpSecService$UidFdTagger var31 = this.mUidFdTagger;
    var31.tag(var30,var15);
    int var33 = IPPROTO_UDP;
    int var34 = UDP_ENCAP;
    int var35 = UDP_ENCAP_ESPINUDP;
    Os.setsockoptInt(var30,var33,var34,var35);
    IpSecService$IpSecServiceConfiguration var37 = this.mSrvConfig;
    INetd var39 = var37.getNetdInstance();
    ParcelFileDescriptor var40 = new ParcelFileDescriptor();
    var39.ipSecSetEncapSocketOwner(var40,var15);
    InetAddress var57 = INADDR_ANY;
    Os.bind(var30,var57,param2);
    IpSecService$RefcountedResourceArray var65 = var18.mEncapSocketRecords;
    IpSecService$RefcountedResource var66 = new IpSecService$RefcountedResource();
    IpSecService$EncapSocketRecord var67 = new IpSecService$EncapSocketRecord();
    IpSecService$RefcountedResource var69 = new IpSecService$RefcountedResource(0);
    var65.put(var19,var66);
    Object var6 = Preconditions.checkNotNull(param3,Null resources cannot be added);{Object var6 = Preconditions.checkNotNull(param3,Null resources cannot be added);};
    SparseArray var7 = this.mArray;
    var7.put(param2,param3);
}