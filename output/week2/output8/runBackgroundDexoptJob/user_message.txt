// API: runBackgroundDexoptJob
// Service: PackageManagerService_2

public void runBackgroundDexoptJob() {
    int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    long var11 = Binder.clearCallingIdentity();
    Context var12 = this.mContext;
    boolean var14 = BackgroundDexOptService.runIdleOptimizationsNow(this,var12,param2);
    BackgroundDexOptService var4 = new BackgroundDexOptService();
    ArraySet var10 = getOptimizablePackages();
    int var14 = var4.idleOptimization(this,var11,param2);
    AtomicBoolean var9 = this.mExitPostBootUpdate;
    var9.set(1);
    AtomicBoolean var12 = this.mAbortIdleOptimization;
    var12.set(0);
    long var16 = getLowStorageThreshold(param4);
    int var18 = optimizePackages(param2,param3,var16,1);
    ArraySet var6 = new ArraySet();
    long var8 = mDowngradeUnusedAppsThresholdInMillis;
    Set var10 = getUnusedPackages(var8);
    String var18 = String.join(,,var10);
    var27 = 2 mul param4;
    boolean var29 = shouldDowngrade(var27);
    Iterator var43 = iterator();
    Object var47 = var43.next();
    String var48 = (String) var47;
    int var50 = abortIdleOptimizations(param4);
    int var50<PATH_SEP>int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    long var11 = Binder.clearCallingIdentity();
    Context var12 = this.mContext;
    boolean var14 = BackgroundDexOptService.runIdleOptimizationsNow(this,var12,param2);
    BackgroundDexOptService var4 = new BackgroundDexOptService();
    ArraySet var10 = getOptimizablePackages();
    int var14 = var4.idleOptimization(this,var11,param2);
    AtomicBoolean var9 = this.mExitPostBootUpdate;
    var9.set(1);
    AtomicBoolean var12 = this.mAbortIdleOptimization;
    var12.set(0);
    long var16 = getLowStorageThreshold(param4);
    int var18 = optimizePackages(param2,param3,var16,1);
    ArraySet var6 = new ArraySet();
    long var8 = mDowngradeUnusedAppsThresholdInMillis;
    Set var10 = getUnusedPackages(var8);
    String var18 = String.join(,,var10);
    var27 = 2 mul param4;
    boolean var29 = shouldDowngrade(var27);
    Iterator var43 = iterator();
    notifyPinService(var6);<PATH_SEP>int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    long var11 = Binder.clearCallingIdentity();
    Context var12 = this.mContext;
    boolean var14 = BackgroundDexOptService.runIdleOptimizationsNow(this,var12,param2);
    BackgroundDexOptService var4 = new BackgroundDexOptService();
    ArraySet var10 = getOptimizablePackages();
    int var14 = var4.idleOptimization(this,var11,param2);
    AtomicBoolean var9 = this.mExitPostBootUpdate;
    var9.set(1);
    AtomicBoolean var12 = this.mAbortIdleOptimization;
    var12.set(0);
    long var16 = getLowStorageThreshold(param4);
    int var18 = optimizePackages(param2,param3,var16,1);
    int var18<PATH_SEP>int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    long var11 = Binder.clearCallingIdentity();
    Context var12 = this.mContext;
    boolean var14 = BackgroundDexOptService.runIdleOptimizationsNow(this,var12,param2);
    BackgroundDexOptService var4 = new BackgroundDexOptService();
    ArraySet var10 = getOptimizablePackages();
    int var14 = var4.idleOptimization(this,var11,param2);
    AtomicBoolean var9 = this.mExitPostBootUpdate;
    var9.set(1);
    AtomicBoolean var12 = this.mAbortIdleOptimization;
    var12.set(0);
    long var16 = getLowStorageThreshold(param4);
    int var18 = optimizePackages(param2,param3,var16,1);
    boolean var21 = supportSecondaryDex();
    DexManager var23 = getDexManager();
    int var25 = reconcileSecondaryDexFiles(var23);
    Set var4 = getAllPackagesWithSecondaryDexFiles();
    Iterator var6 = var4.iterator();
    int 0;
}