// API: getPeriodicSyncs
// Service: ContentService_4

public void getPeriodicSyncs() {
    boolean var10 = TextUtils.isEmpty(param3);
    Context var14 = this.mContext;
    int var19 = UserHandle.getCallingUserId();
    long var21 = ContentService.clearCallingIdentity();
    SyncManager var23 = getSyncManager();
    SyncStorageEngine$EndPoint var24 = new SyncStorageEngine$EndPoint();
    List var27 = var23.getPeriodicSyncs(var24);
    List var4 = getAllPendingSyncs();
    verifyJobScheduler();{verifyJobScheduler();};
    JobSchedulerInternal var3 = this.mJobSchedulerInternal;
    List var5 = var3.getSystemScheduledPendingJobs();
    ArrayList var6 = new ArrayList();
    int var8 = var5.size();
    Iterator var11 = var5.iterator();
    Object var16 = var11.next();
    JobInfo var17 = (JobInfo) var16;
    PersistableBundle var19 = var17.getExtras();
    SyncOperation var21 = SyncOperation.maybeCreateFromJobExtras(var19);
    boolean var5 = getBoolean(SyncManagerJob,0);
    String var8 = getString(accountName);
    String var11 = getString(accountType);
    String var14 = getString(provider);
    int var18 = getInt(userId,2147483647);
    int var21 = getInt(owningUid);
    String var24 = getString(owningPackage);
    int var27 = getInt(reason,2147483647);
    int var30 = getInt(source,2147483647);
    boolean var33 = getBoolean(allowParallelSyncs,0);
    boolean var36 = getBoolean(isPeriodic,0);
    int var40 = getInt(sourcePeriodicId,-1);
    long var43 = getLong(periodMillis);
    long var46 = getLong(flexMillis);
    int var49 = getInt(syncExemptionFlag,0);
    Bundle var50 = new Bundle();
    PersistableBundle var54 = getPersistableBundle(syncExtras);
    var50.putAll(var54);
    Set var58 = keySet();
    Iterator var60 = var58.iterator();
    Account var93 = new Account();
    SyncStorageEngine$EndPoint var95 = new SyncStorageEngine$EndPoint();
    SyncOperation var97 = new SyncOperation();
    int var101 = getInt(jobId);
    var97.jobId = var101;
    long var104 = getLong(expectedRuntime);
    var97.expectedRuntime = var104;
    int var107 = getInt(retries);
    var97.retries = var107;<PATH_SEP>boolean var10 = TextUtils.isEmpty(param3);
    Context var14 = this.mContext;
    int var19 = UserHandle.getCallingUserId();
    long var21 = ContentService.clearCallingIdentity();
    SyncManager var23 = getSyncManager();
    SyncStorageEngine$EndPoint var24 = new SyncStorageEngine$EndPoint();
    List var27 = var23.getPeriodicSyncs(var24);
    List var4 = getAllPendingSyncs();
    verifyJobScheduler();{verifyJobScheduler();};
    JobSchedulerInternal var3 = this.mJobSchedulerInternal;
    List var5 = var3.getSystemScheduledPendingJobs();
    ArrayList var6 = new ArrayList();
    int var8 = var5.size();
    Iterator var11 = var5.iterator();
    Object var16 = var11.next();
    JobInfo var17 = (JobInfo) var16;
    PersistableBundle var19 = var17.getExtras();
    SyncOperation var21 = SyncOperation.maybeCreateFromJobExtras(var19);
    boolean var5 = getBoolean(SyncManagerJob,0);
    String var8 = getString(accountName);
    String var11 = getString(accountType);
    String var14 = getString(provider);
    int var18 = getInt(userId,2147483647);
    int var21 = getInt(owningUid);
    String var24 = getString(owningPackage);
    int var27 = getInt(reason,2147483647);
    int var30 = getInt(source,2147483647);
    boolean var33 = getBoolean(allowParallelSyncs,0);
    boolean var36 = getBoolean(isPeriodic,0);
    int var40 = getInt(sourcePeriodicId,-1);
    long var43 = getLong(periodMillis);
    long var46 = getLong(flexMillis);
    int var49 = getInt(syncExemptionFlag,0);
    Bundle var50 = new Bundle();
    PersistableBundle var54 = getPersistableBundle(syncExtras);
    Set var58 = keySet();
    Iterator var60 = var58.iterator();
    Account var93 = new Account();
    SyncStorageEngine$EndPoint var95 = new SyncStorageEngine$EndPoint();
    SyncOperation var97 = new SyncOperation();
    int var101 = getInt(jobId);
    var97.jobId = var101;<PATH_SEP>boolean var10 = TextUtils.isEmpty(param3);
    Context var14 = this.mContext;
    int var19 = UserHandle.getCallingUserId();
    long var21 = ContentService.clearCallingIdentity();
    SyncManager var23 = getSyncManager();
    SyncStorageEngine$EndPoint var24 = new SyncStorageEngine$EndPoint();
    List var27 = var23.getPeriodicSyncs(var24);
    List var4 = getAllPendingSyncs();
    ArrayList var5 = new ArrayList();
    Iterator var8 = var4.iterator();
    Object var13 = var8.next();
    SyncOperation var14 = (SyncOperation) var13;
    boolean var15 = var14.isPeriodic;
    SyncStorageEngine$EndPoint var16 = var14.target;
    boolean var18 = var16.matchesSpec(param2);
    int var3 = this.userId;
    int var4 = param2.userId;
    boolean 0<PATH_SEP>boolean var10 = TextUtils.isEmpty(param3);
    Context var14 = this.mContext;
    int var19 = UserHandle.getCallingUserId();
    long var21 = ContentService.clearCallingIdentity();
    SyncManager var23 = getSyncManager();
    SyncStorageEngine$EndPoint var24 = new SyncStorageEngine$EndPoint();
    List var27 = var23.getPeriodicSyncs(var24);
    List var4 = getAllPendingSyncs();
    verifyJobScheduler();{verifyJobScheduler();};
    JobSchedulerInternal var3 = this.mJobSchedulerInternal;
    List var5 = var3.getSystemScheduledPendingJobs();
    ArrayList var6 = new ArrayList();
    int var8 = var5.size();
    Iterator var11 = var5.iterator();
    Object var16 = var11.next();
    JobInfo var17 = (JobInfo) var16;
    PersistableBundle var19 = var17.getExtras();
    SyncOperation var21 = SyncOperation.maybeCreateFromJobExtras(var19);
    boolean var5 = getBoolean(SyncManagerJob,0);
    String var8 = getString(accountName);
    String var11 = getString(accountType);
    String var14 = getString(provider);
    int var18 = getInt(userId,2147483647);
    int var21 = getInt(owningUid);
    String var24 = getString(owningPackage);
    int var27 = getInt(reason,2147483647);
    int var30 = getInt(source,2147483647);
    boolean var33 = getBoolean(allowParallelSyncs,0);
    boolean var36 = getBoolean(isPeriodic,0);
    int var40 = getInt(sourcePeriodicId,-1);
    long var43 = getLong(periodMillis);
    long var46 = getLong(flexMillis);
    int var49 = getInt(syncExemptionFlag,0);
    Bundle var50 = new Bundle();
    PersistableBundle var54 = getPersistableBundle(syncExtras);
    var50.putAll(var54);
    Set var58 = keySet();
    Iterator var60 = var58.iterator();
    Account var93 = new Account();
    SyncStorageEngine$EndPoint var95 = new SyncStorageEngine$EndPoint();
    SyncOperation var97 = new SyncOperation();
    int var101 = getInt(jobId);
    var97.jobId = var101;
    long var104 = getLong(expectedRuntime);
    var97.expectedRuntime = var104;
    int var107 = getInt(retries);
    var97.retries = var107;
    Lcom/android/server/content/SyncOperation var97;
}