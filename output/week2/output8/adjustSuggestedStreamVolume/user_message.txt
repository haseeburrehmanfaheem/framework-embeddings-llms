// API: adjustSuggestedStreamVolume
// Service: AudioService_6

public void adjustSuggestedStreamVolume() {
    Object var7 = this.mExtVolumeControllerLock;
    IAudioPolicyCallback var8 = this.mExtVolumeController;
    int var13 = Binder.getCallingUid();
    adjustSuggestedStreamVolume(param2,param3,param4,param5,param6,var13);
    AudioServiceEvents$VolumeEvent var10 = new AudioServiceEvents$VolumeEvent();
    Object var27 = this.mForceControlStreamLock;
    boolean var28 = this.mUserSelectedVolumeControlStream;
    int var47 = this.mVolumeControlStream;
    boolean var73 = isMuteAdjust(param2);
    ensureValidStreamType(var51);{ensureValidStreamType(var51);};
    [I var75 = mStreamVolumeAlias;
    76 = arrayload 75[51];
    var78 = param4 and 4;
    var80 = param4 and -5;
    AudioService$VolumeController var82 = this.mVolumeController;
    boolean var84 = var82.suppressAdjustment(var76,var81,var73);
    boolean var85 = this.mIsSingleVolume;
    var87 = var81 and -5;
    var89 = var87 and -17;
    adjustStreamVolume(var51,var92,var93,param5,param6,param7);
    boolean var8 = this.mUseFixedVolume;
    ensureValidDirection(param3);{ensureValidDirection(param3);};
    ensureValidStreamType(param2);{ensureValidStreamType(param2);};
    boolean var13 = isMuteAdjust(param3);
    boolean var15 = isStreamAffectedByMute(param2);
    Context var21 = this.mContext;
    [I var28 = mStreamVolumeAlias;
    29 = arrayload 28[2];
    AudioService$VolumeStreamState var30 = this.mStreamStates;
    31 = arrayload 30[29];
    int var33 = getDeviceForStream(var29);
    int var35 = var31.getIndex(var33);
    var38 = var33 and 896;
    var40 = param4 and 64;
    int var44 = getCurrentUserId();
    int var46 = UserHandle.getAppId(param7);
    int var48 = UserHandle.getUid(var44,var46);
    AppOpsManager var53 = this.mAppOps;
    [I var54 = STREAM_VOLUME_OPS;
    55 = arrayload 54[29];
    int var57 = var53.noteOp(var55,var50,param5);{int var57 = var53.noteOp(var55,var50,param5);};
    Object var58 = this.mSafeMediaVolumeStateLock;
    this.mPendingVolumeCommand = 0;
    var63 = param4 and -33;
    int var65 = this.mFixedVolumeDevices;
    var66 = var65 and var33;
    var72 = var63 or 32;
    int var73 = this.mSafeMediaVolumeState;
    var75 = 67108876 and var33;
    int var80 = safeMediaVolumeIndex(var33);
    var92 = var84 and 2;
    int var94 = getUiSoundsStreamType();
    int var99 = getRingerModeInternal();
    var101 = var84 and -17;
    boolean var104 = AudioService$VolumeStreamState.access$1000(var31);{boolean var104 = AudioService$VolumeStreamState.access$1000(var31);};
    int var106 = checkForRingerModeChange(var87,param3,var88,var104,param5,var102);{int var106 = checkForRingerModeChange(var87,param3,var88,var104,param5,var102);};
    var108 = var106 and 1;
    var111 = var106 and 128;
    var112 = var102 or 128;
    var115 = var106 and 2048;
    var116 = var113 or 2048;
    boolean var127 = volumeAdjustmentAllowedByDnd(var29,var123);
    NotificationManager var4 = this.mNm;
    int var6 = var4.getZenMode();
    boolean 1<PATH_SEP>Object var7 = this.mExtVolumeControllerLock;
    IAudioPolicyCallback var8 = this.mExtVolumeController;
    int var13 = Binder.getCallingUid();
    adjustSuggestedStreamVolume(param2,param3,param4,param5,param6,var13);
    AudioServiceEvents$VolumeEvent var10 = new AudioServiceEvents$VolumeEvent();
    Object var27 = this.mForceControlStreamLock;
    boolean var28 = this.mUserSelectedVolumeControlStream;
    int var47 = this.mVolumeControlStream;
    boolean var73 = isMuteAdjust(param2);
    ensureValidStreamType(var51);{ensureValidStreamType(var51);};
    [I var75 = mStreamVolumeAlias;
    76 = arrayload 75[51];
    var78 = param4 and 4;
    var80 = param4 and -5;
    AudioService$VolumeController var82 = this.mVolumeController;
    boolean var84 = var82.suppressAdjustment(var76,var81,var73);
    boolean var85 = this.mIsSingleVolume;
    var87 = var81 and -5;
    var89 = var87 and -17;
    adjustStreamVolume(var51,var92,var93,param5,param6,param7);
    boolean var8 = this.mUseFixedVolume;
    ensureValidDirection(param3);{ensureValidDirection(param3);};
    ensureValidStreamType(param2);{ensureValidStreamType(param2);};
    boolean var13 = isMuteAdjust(param3);
    boolean var15 = isStreamAffectedByMute(param2);
    Context var21 = this.mContext;
    [I var28 = mStreamVolumeAlias;
    29 = arrayload 28[2];
    AudioService$VolumeStreamState var30 = this.mStreamStates;
    31 = arrayload 30[29];
    int var33 = getDeviceForStream(var29);
    int var35 = var31.getIndex(var33);
    var38 = var33 and 896;
    var40 = param4 and 64;
    int var44 = getCurrentUserId();
    int var46 = UserHandle.getAppId(param7);
    int var48 = UserHandle.getUid(var44,var46);
    AppOpsManager var53 = this.mAppOps;
    [I var54 = STREAM_VOLUME_OPS;
    55 = arrayload 54[29];
    int var57 = var53.noteOp(var55,var50,param5);{int var57 = var53.noteOp(var55,var50,param5);};
    Object var58 = this.mSafeMediaVolumeStateLock;
    this.mPendingVolumeCommand = 0;
    var63 = param4 and -33;
    int var65 = this.mFixedVolumeDevices;
    var66 = var65 and var33;
    var72 = var63 or 32;
    int var73 = this.mSafeMediaVolumeState;
    var75 = 67108876 and var33;
    int var80 = safeMediaVolumeIndex(var33);
    var92 = var84 and 2;
    int var94 = getUiSoundsStreamType();
    int var99 = getRingerModeInternal();
    var101 = var84 and -17;
    boolean var104 = AudioService$VolumeStreamState.access$1000(var31);{boolean var104 = AudioService$VolumeStreamState.access$1000(var31);};
    int var106 = checkForRingerModeChange(var87,param3,var88,var104,param5,var102);{int var106 = checkForRingerModeChange(var87,param3,var88,var104,param5,var102);};
    var108 = var106 and 1;
    var111 = var106 and 128;
    var112 = var102 or 128;
    var115 = var106 and 2048;
    var116 = var113 or 2048;
    boolean var127 = volumeAdjustmentAllowedByDnd(var29,var123);<PATH_SEP>Object var7 = this.mExtVolumeControllerLock;
    IAudioPolicyCallback var8 = this.mExtVolumeController;
    int var13 = Binder.getCallingUid();
    adjustSuggestedStreamVolume(param2,param3,param4,param5,param6,var13);
    AudioServiceEvents$VolumeEvent var10 = new AudioServiceEvents$VolumeEvent();
    Object var27 = this.mForceControlStreamLock;
    boolean var28 = this.mUserSelectedVolumeControlStream;
    int var47 = this.mVolumeControlStream;
    boolean var73 = isMuteAdjust(param2);
    ensureValidStreamType(var51);{ensureValidStreamType(var51);};
    [I var75 = mStreamVolumeAlias;
    76 = arrayload 75[51];
    var78 = param4 and 4;
    var80 = param4 and -5;
    AudioService$VolumeController var82 = this.mVolumeController;
    boolean var84 = var82.suppressAdjustment(var76,var81,var73);
    boolean var85 = this.mIsSingleVolume;
    var87 = var81 and -5;
    var89 = var87 and -17;
    adjustStreamVolume(var51,var92,var93,param5,param6,param7);
    boolean var8 = this.mUseFixedVolume;
    ensureValidDirection(param3);{ensureValidDirection(param3);};
    ensureValidStreamType(param2);{ensureValidStreamType(param2);};
    boolean var13 = isMuteAdjust(param3);
    boolean var15 = isStreamAffectedByMute(param2);
    Context var21 = this.mContext;
    [I var28 = mStreamVolumeAlias;
    29 = arrayload 28[2];
    AudioService$VolumeStreamState var30 = this.mStreamStates;
    31 = arrayload 30[29];
    int var33 = getDeviceForStream(var29);
    int var35 = var31.getIndex(var33);
    var38 = var33 and 896;
    var40 = param4 and 64;
    int var44 = getCurrentUserId();
    int var46 = UserHandle.getAppId(param7);
    int var48 = UserHandle.getUid(var44,var46);
    AppOpsManager var53 = this.mAppOps;
    [I var54 = STREAM_VOLUME_OPS;
    55 = arrayload 54[29];
    int var57 = var53.noteOp(var55,var50,param5);{int var57 = var53.noteOp(var55,var50,param5);};
    Object var58 = this.mSafeMediaVolumeStateLock;
    this.mPendingVolumeCommand = 0;
    var63 = param4 and -33;
    int var65 = this.mFixedVolumeDevices;
    var66 = var65 and var33;
    var72 = var63 or 32;
    int var73 = this.mSafeMediaVolumeState;
    var75 = 67108876 and var33;
    int var80 = safeMediaVolumeIndex(var33);
    var92 = var84 and 2;
    int var94 = getUiSoundsStreamType();
    int var99 = getRingerModeInternal();
    var101 = var84 and -17;
    boolean var104 = AudioService$VolumeStreamState.access$1000(var31);{boolean var104 = AudioService$VolumeStreamState.access$1000(var31);};
    int var106 = checkForRingerModeChange(var87,param3,var88,var104,param5,var102);{int var106 = checkForRingerModeChange(var87,param3,var88,var104,param5,var102);};
    var108 = var106 and 1;
    var111 = var106 and 128;
    var112 = var102 or 128;
    var115 = var106 and 2048;
    var116 = var113 or 2048;
    boolean var127 = volumeAdjustmentAllowedByDnd(var29,var123);
    AudioService$VolumeStreamState var130 = this.mStreamStates;
    131 = arrayload 130[2];
    int var133 = var131.getIndex(var33);
    AudioService$AudioHandler var134 = this.mAudioHandler;
    var134.removeMessages(18);
    boolean var190 = AudioService$VolumeStreamState.access$1000(var31);{boolean var190 = AudioService$VolumeStreamState.access$1000(var31);};
    var191 = var190 xor 1;
    setSystemAudioMute(var192);
    AudioService$VolumeStreamState var197 = this.mStreamStates;
    198 = arraylength 197;
    [I var199 = mStreamVolumeAlias;
    200 = arrayload 199[220];
    boolean var202 = readCameraSoundForced();
    AudioService$VolumeStreamState var203 = this.mStreamStates;
    204 = arrayload 203[220];
    int var206 = var204.getStreamType();
    AudioService$VolumeStreamState var212 = this.mStreamStates;
    213 = arrayload 212[220];
    var213.mute(var192);
    4 = load_metadata: <Application,Lcom/android/server/audio/AudioService$VolumeStreamState>;
    <Primordial,Ljava/lang/Class>;
    boolean var5 = this.mIsMuted;
    Intent var19 = new Intent();
    int var22 = this.mStreamType;
    Intent var25 = var19.putExtra(android.media.EXTRA_VOLUME_STREAM_TYPE,var22);
    Intent var28 = var19.putExtra(android.media.EXTRA_STREAM_VOLUME_MUTED,param2);<PATH_SEP>Object var7 = this.mExtVolumeControllerLock;
    IAudioPolicyCallback var8 = this.mExtVolumeController;
    int var13 = Binder.getCallingUid();
    adjustSuggestedStreamVolume(param2,param3,param4,param5,param6,var13);
    AudioServiceEvents$VolumeEvent var10 = new AudioServiceEvents$VolumeEvent();
    Object var27 = this.mForceControlStreamLock;
    boolean var28 = this.mUserSelectedVolumeControlStream;
    int var47 = this.mVolumeControlStream;
    boolean var73 = isMuteAdjust(param2);
    ensureValidStreamType(var51);{ensureValidStreamType(var51);};
    [I var75 = mStreamVolumeAlias;
    76 = arrayload 75[51];
    var78 = param4 and 4;
    var80 = param4 and -5;
    AudioService$VolumeController var82 = this.mVolumeController;
    boolean var84 = var82.suppressAdjustment(var76,var81,var73);
    boolean var85 = this.mIsSingleVolume;
    var87 = var81 and -5;
    var89 = var87 and -17;
    adjustStreamVolume(var51,var92,var93,param5,param6,param7);
    boolean var8 = this.mUseFixedVolume;
    ensureValidDirection(param3);{ensureValidDirection(param3);};
    ensureValidStreamType(param2);{ensureValidStreamType(param2);};
    boolean var13 = isMuteAdjust(param3);
    boolean var15 = isStreamAffectedByMute(param2);
    Context var21 = this.mContext;
    [I var28 = mStreamVolumeAlias;
    29 = arrayload 28[2];
    AudioService$VolumeStreamState var30 = this.mStreamStates;
    31 = arrayload 30[29];
    int var33 = getDeviceForStream(var29);
    int var4 = getDevicesForStream(param2);
    var6 = var4 add -1;
    var7 = var6 and var4;
    int var20;
}