// API: importKey
// Service: LockSettingsService_3

public void importKey() {
    RecoverableKeyStoreManager var4 = this.mRecoverableKeyStoreManager;
    String var6 = var4.importKey(param2,param3);
    String var6 = importKeyWithMetadata(param2,param3,0);
    Object var8 = Preconditions.checkNotNull(param2,alias is null);{Object var8 = Preconditions.checkNotNull(param2,alias is null);};
    Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);{Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);};
    12 = arraylength 3;
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getCallingUserId();
    PlatformKeyManager var27 = this.mPlatformKeyManager;
    PlatformEncryptionKey var29 = var27.getEncryptKey(var25);
    RecoverableKeyGenerator var44 = this.mRecoverableKeyGenerator;
    var44.importKey(var29,var25,var23,param2,param3,param4);
    ApplicationKeyStorage var46 = this.mApplicationKeyStorage;
    var46.setSymmetricKeyEntry(var25,var23,param2,param3);
    Locale var6 = US;
    Object var8 = new Object(4);
    Integer var10 = Integer.valueOf(param2);
    arraystore 8[11] = 10;
    Integer var13 = Integer.valueOf(param3);
    arraystore 8[14] = 13;
    arraystore 8[15] = 4;
    16 = arraylength 5;
    Integer var18 = Integer.valueOf(var16);
    arraystore 8[19] = 18;
    String var22 = String.format(var6,Set %d/%d/%s: %d bytes of key material,var8);
    KeyStoreProxy var26 = this.mKeyStore;
    String var28 = getInternalAlias(param2,param3,param4);
    KeyStore$SecretKeyEntry var29 = new KeyStore$SecretKeyEntry();
    SecretKeySpec var30 = new SecretKeySpec();
    KeyProtection$Builder var34 = new KeyProtection$Builder();
    String var37 = new String(1);
    KeyProtection$Builder var39 = var34.setBlockModes(var37);<PATH_SEP>RecoverableKeyStoreManager var4 = this.mRecoverableKeyStoreManager;
    String var6 = var4.importKey(param2,param3);
    String var6 = importKeyWithMetadata(param2,param3,0);
    Object var8 = Preconditions.checkNotNull(param2,alias is null);{Object var8 = Preconditions.checkNotNull(param2,alias is null);};
    Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);{Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);};
    12 = arraylength 3;
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getCallingUserId();
    PlatformKeyManager var27 = this.mPlatformKeyManager;
    PlatformEncryptionKey var29 = var27.getEncryptKey(var25);
    RecoverableKeyGenerator var44 = this.mRecoverableKeyGenerator;
    var44.importKey(var29,var25,var23,param2,param3,param4);
    SecretKeySpec var8 = new SecretKeySpec();
    WrappedKey var12 = WrappedKey.fromSecretKey(param2,var8,param7);
    RecoverableKeyStoreDb var13 = this.mDatabase;
    long var15 = var13.insertKey(param3,param4,param5,var12);
    var17 = var15 lt -1;
    RecoverableKeyStorageException var20 = new RecoverableKeyStorageException();
    Locale var21 = US;
    Object var23 = new Object(2);
    Integer var25 = Integer.valueOf(param4);
    arraystore 23[19] = 25;
    arraystore 23[18] = 5;
    String var28 = String.format(var21,Failed writing (%d;
    %s) to database.,var23);<PATH_SEP>RecoverableKeyStoreManager var4 = this.mRecoverableKeyStoreManager;
    String var6 = var4.importKey(param2,param3);
    String var6 = importKeyWithMetadata(param2,param3,0);
    Object var8 = Preconditions.checkNotNull(param2,alias is null);{Object var8 = Preconditions.checkNotNull(param2,alias is null);};
    Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);{Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);};
    12 = arraylength 3;
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getCallingUserId();
    PlatformKeyManager var27 = this.mPlatformKeyManager;
    PlatformEncryptionKey var29 = var27.getEncryptKey(var25);
    RecoverableKeyGenerator var44 = this.mRecoverableKeyGenerator;
    var44.importKey(var29,var25,var23,param2,param3,param4);
    ApplicationKeyStorage var46 = this.mApplicationKeyStorage;
    var46.setSymmetricKeyEntry(var25,var23,param2,param3);
    Locale var6 = US;
    Object var8 = new Object(4);
    Integer var10 = Integer.valueOf(param2);
    arraystore 8[11] = 10;
    Integer var13 = Integer.valueOf(param3);
    arraystore 8[14] = 13;
    arraystore 8[15] = 4;
    16 = arraylength 5;
    Integer var18 = Integer.valueOf(var16);
    arraystore 8[19] = 18;
    String var22 = String.format(var6,Set %d/%d/%s: %d bytes of key material,var8);
    KeyStoreProxy var26 = this.mKeyStore;
    String var28 = getInternalAlias(param2,param3,param4);
    KeyStore$SecretKeyEntry var29 = new KeyStore$SecretKeyEntry();
    SecretKeySpec var30 = new SecretKeySpec();
    KeyProtection$Builder var34 = new KeyProtection$Builder();
    String var37 = new String(1);
    KeyProtection$Builder var39 = var34.setBlockModes(var37);
    String var41 = new String(1);
    KeyProtection$Builder var43 = var39.setEncryptionPaddings(var41);<PATH_SEP>RecoverableKeyStoreManager var4 = this.mRecoverableKeyStoreManager;
    String var6 = var4.importKey(param2,param3);
    String var6 = importKeyWithMetadata(param2,param3,0);
    Object var8 = Preconditions.checkNotNull(param2,alias is null);{Object var8 = Preconditions.checkNotNull(param2,alias is null);};
    Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);{Object var11 = Preconditions.checkNotNull(param3,keyBytes is null);};
    12 = arraylength 3;
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getCallingUserId();
    PlatformKeyManager var27 = this.mPlatformKeyManager;
    PlatformEncryptionKey var29 = var27.getEncryptKey(var25);
    RecoverableKeyGenerator var44 = this.mRecoverableKeyGenerator;
    var44.importKey(var29,var25,var23,param2,param3,param4);
    ApplicationKeyStorage var46 = this.mApplicationKeyStorage;
    var46.setSymmetricKeyEntry(var25,var23,param2,param3);
    String var56 = getAlias(var25,var23,param2);
    Ljava/lang/String var56;
}