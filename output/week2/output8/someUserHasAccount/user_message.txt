// API: someUserHasAccount
// Service: AccountManagerService_2

public void someUserHasAccount() {
    int var4 = Binder.getCallingUid();
    boolean var7 = UserHandle.isSameApp(1000,var4);
    long var13 = Binder.clearCallingIdentity();
    AccountAndUser var15 = getAllAccounts();
    UserManager var3 = getUserManager();
    List var6 = var3.getUsers(1);
    int var8 = var6.size();
    [I var9 = new [I(var8);
    11 = arraylength 9;
    AccountAndUser var22 = getAccounts(var9);
    ArrayList var4 = Lists.newArrayList();
    5 = arraylength 2;
    7 = arrayload 2[30];
    AccountManagerService$UserAccounts var9 = getUserAccounts(var7);
    int var11 = Binder.getCallingUid();
    Account var13 = getAccountsFromCache(var9,0,var11,0,0);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var61 = param2.cacheLock;
    HashMap var62 = param2.accountCache;
    Object var64 = var62.get(param3);
    Account var65 = (Account) var64;
    Account var76 = EMPTY_ACCOUNT_ARRAY;
    int var4 = Binder.getCallingUid();
    boolean var7 = UserHandle.isSameApp(1000,var4);
    long var13 = Binder.clearCallingIdentity();
    AccountAndUser var15 = getAllAccounts();
    UserManager var3 = getUserManager();
    List var6 = var3.getUsers(1);
    int var8 = var6.size();
    [I var9 = new [I(var8);
    11 = arraylength 9;
    AccountAndUser var22 = getAccounts(var9);
    ArrayList var4 = Lists.newArrayList();
    5 = arraylength 2;
    7 = arrayload 2[30];
    AccountManagerService$UserAccounts var9 = getUserAccounts(var7);
    int var11 = Binder.getCallingUid();
    Account var13 = getAccountsFromCache(var9,0,var11,0,0);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var61 = param2.cacheLock;
    HashMap var62 = param2.accountCache;
    Object var64 = var62.get(param3);
    Account var65 = (Account) var64;
    70 = arraylength 65;
    Object var72 = Arrays.copyOf(var65,var70);
    Account var73 = (Account) var72;
    Account var75 = filterAccounts(param2,var73,param4,param5,param6);
    int var4 = Binder.getCallingUid();
    boolean var7 = UserHandle.isSameApp(1000,var4);
    long var13 = Binder.clearCallingIdentity();
    AccountAndUser var15 = getAllAccounts();
    UserManager var3 = getUserManager();
    List var6 = var3.getUsers(1);
    int var8 = var6.size();
    [I var9 = new [I(var8);
    11 = arraylength 9;
    AccountAndUser var22 = getAccounts(var9);
    ArrayList var4 = Lists.newArrayList();
    5 = arraylength 2;
    7 = arrayload 2[30];
    AccountManagerService$UserAccounts var9 = getUserAccounts(var7);
    int var11 = Binder.getCallingUid();
    Account var13 = getAccountsFromCache(var9,0,var11,0,0);
    Object var7 = param2.cacheLock;
    boolean var9 = Thread.holdsLock(var7);
    var11 = var9 xor 1;
    Preconditions.checkState(var11,Method should not be called with cacheLock);{Preconditions.checkState(var11,Method should not be called with cacheLock);};
    Object var15 = param2.cacheLock;
    HashMap var16 = param2.accountCache;
    Collection var18 = var16.values();
    Iterator var20 = var18.iterator();
    Account var31 = new Account(var28);
    HashMap var32 = param2.accountCache;
    Collection var34 = var32.values();
    Iterator var36 = var34.iterator();
    Account var51 = filterAccounts(param2,var31,param4,param5,param6);
    int var4 = Binder.getCallingUid();
    boolean var7 = UserHandle.isSameApp(1000,var4);
    long var13 = Binder.clearCallingIdentity();
    AccountAndUser var15 = getAllAccounts();
    UserManager var3 = getUserManager();
    UserManager var2 = this.mUserManager;
    Context var4 = this.mContext;
    UserManager var6 = UserManager.get(var4);
    this.mUserManager = var6;
    UserManager var8 = this.mUserManager;
    Landroid/os/UserManager var8;
}