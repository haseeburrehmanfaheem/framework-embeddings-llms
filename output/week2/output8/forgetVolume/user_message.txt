// API: forgetVolume
// Service: StorageManagerService_2

public void forgetVolume() {
    Object var6 = Preconditions.checkNotNull(param2);{Object var6 = Preconditions.checkNotNull(param2);};
    Object var7 = this.mLock;
    ArrayMap var8 = this.mRecords;
    Object var10 = var8.remove(param2);
    VolumeRecord var11 = (VolumeRecord) var10;
    String var13 = var11.partGuid;
    boolean var15 = TextUtils.isEmpty(var13);
    Handler var16 = this.mHandler;
    Message var19 = var16.obtainMessage(9,var11);
    var19.sendToTarget();
    StorageManagerService$Callbacks var24 = this.mCallbacks;
    StorageManagerService$Callbacks.access$4400(var24,param2);{StorageManagerService$Callbacks.access$4400(var24,param2);};
    String var26 = this.mPrimaryStorageUuid;
    boolean var28 = Objects.equals(var26,param2);
    String var30 = getDefaultPrimaryStorageUuid();
    this.mPrimaryStorageUuid = var30;
    Handler var31 = this.mHandler;
    Message var34 = var31.obtainMessage(10);
    var34.sendToTarget();
    writeSettingsLocked();
    AtomicFile var4 = this.mSettingsFile;
    FileOutputStream var6 = var4.startWrite();
    FastXmlSerializer var7 = new FastXmlSerializer();
    Charset var9 = UTF_8;
    String var11 = var9.name();
    var7.setOutput(var6,var11);
    Boolean var15 = Boolean.valueOf(1);
    var7.startDocument(0,var15);
    XmlSerializer var18 = var7.startTag(0,volumes);
    boolean var4 = this.mInTag;
    boolean var9 = this.mIndent;
    int var10 = this.mNesting;
    appendIndent(var10);
    int var14 = this.mNesting;
    var16 = var14 add 1;
    this.mNesting = var16;
    append(60);<PATH_SEP>Object var6 = Preconditions.checkNotNull(param2);{Object var6 = Preconditions.checkNotNull(param2);};
    Object var7 = this.mLock;
    ArrayMap var8 = this.mRecords;
    Object var10 = var8.remove(param2);
    VolumeRecord var11 = (VolumeRecord) var10;
    String var13 = var11.partGuid;
    boolean var15 = TextUtils.isEmpty(var13);
    Handler var16 = this.mHandler;
    Message var19 = var16.obtainMessage(9,var11);
    var19.sendToTarget();
    StorageManagerService$Callbacks var24 = this.mCallbacks;
    StorageManagerService$Callbacks.access$4400(var24,param2);{StorageManagerService$Callbacks.access$4400(var24,param2);};
    String var26 = this.mPrimaryStorageUuid;
    boolean var28 = Objects.equals(var26,param2);
    String var30 = getDefaultPrimaryStorageUuid();
    this.mPrimaryStorageUuid = var30;
    Handler var31 = this.mHandler;
    Message var34 = var31.obtainMessage(10);
    var34.sendToTarget();
    writeSettingsLocked();
    AtomicFile var4 = this.mSettingsFile;
    FileOutputStream var6 = var4.startWrite();
    FastXmlSerializer var7 = new FastXmlSerializer();
    Charset var9 = UTF_8;
    String var11 = var9.name();
    var7.setOutput(var6,var11);
    Boolean var15 = Boolean.valueOf(1);
    var7.startDocument(0,var15);
    XmlSerializer var18 = var7.startTag(0,volumes);
    boolean var4 = this.mInTag;
    boolean var9 = this.mIndent;
    int var10 = this.mNesting;
    appendIndent(var10);
    int var14 = this.mNesting;
    var16 = var14 add 1;
    this.mNesting = var16;
    append(60);
    append(param2);<PATH_SEP>Object var6 = Preconditions.checkNotNull(param2);{Object var6 = Preconditions.checkNotNull(param2);};
    Object var7 = this.mLock;
    ArrayMap var8 = this.mRecords;
    Object var10 = var8.remove(param2);
    VolumeRecord var11 = (VolumeRecord) var10;
    String var13 = var11.partGuid;
    boolean var15 = TextUtils.isEmpty(var13);
    Handler var16 = this.mHandler;
    Message var19 = var16.obtainMessage(9,var11);
    var19.sendToTarget();
    StorageManagerService$Callbacks var24 = this.mCallbacks;
    StorageManagerService$Callbacks.access$4400(var24,param2);{StorageManagerService$Callbacks.access$4400(var24,param2);};
    String var26 = this.mPrimaryStorageUuid;
    boolean var28 = Objects.equals(var26,param2);
    String var30 = getDefaultPrimaryStorageUuid();
    this.mPrimaryStorageUuid = var30;
    Handler var31 = this.mHandler;
    Message var34 = var31.obtainMessage(10);
    var34.sendToTarget();
    writeSettingsLocked();
    AtomicFile var4 = this.mSettingsFile;
    FileOutputStream var6 = var4.startWrite();
    FastXmlSerializer var7 = new FastXmlSerializer();
    Charset var9 = UTF_8;
    String var11 = var9.name();
    var7.setOutput(var6,var11);
    Charset var8 = Charset.forName(param3);
    CharsetEncoder var10 = var8.newEncoder();
    CodingErrorAction var11 = REPLACE;
    CharsetEncoder var13 = var10.onMalformedInput(var11);<PATH_SEP>Object var6 = Preconditions.checkNotNull(param2);{Object var6 = Preconditions.checkNotNull(param2);};
    Object var7 = this.mLock;
    ArrayMap var8 = this.mRecords;
    Object var10 = var8.remove(param2);
    VolumeRecord var11 = (VolumeRecord) var10;
    String var13 = var11.partGuid;
    boolean var15 = TextUtils.isEmpty(var13);
    Handler var16 = this.mHandler;
    Message var19 = var16.obtainMessage(9,var11);
    var19.sendToTarget();
    StorageManagerService$Callbacks var24 = this.mCallbacks;
    StorageManagerService$Callbacks.access$4400(var24,param2);{StorageManagerService$Callbacks.access$4400(var24,param2);};
    String var26 = this.mPrimaryStorageUuid;
    boolean var28 = Objects.equals(var26,param2);
    String var30 = getDefaultPrimaryStorageUuid();
    this.mPrimaryStorageUuid = var30;
    Handler var31 = this.mHandler;
    Message var34 = var31.obtainMessage(10);
    var34.sendToTarget();
    writeSettingsLocked();
    AtomicFile var4 = this.mSettingsFile;
    FileOutputStream var6 = var4.startWrite();
    FastXmlSerializer var7 = new FastXmlSerializer();
    Charset var9 = UTF_8;
    String var11 = var9.name();
    var7.setOutput(var6,var11);
    Boolean var15 = Boolean.valueOf(1);
    var7.startDocument(0,var15);
    XmlSerializer var18 = var7.startTag(0,volumes);
    boolean var4 = this.mInTag;
    append(;
}