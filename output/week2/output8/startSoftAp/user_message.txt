// API: startSoftAp
// Service: WifiServiceImpl_2

public void startSoftAp() {
    FrameworkFacade var4 = this.mFrameworkFacade;
    boolean var6 = var4.inStorageManagerCryptKeeperBounce();
    int var13 = Binder.getCallingUid();
    14 = conversion(J) 13;
    HashMap var18 = this.mLocalOnlyHotspotRequests;
    ConcurrentHashMap var19 = this.mIfaceIpModes;
    Integer var22 = Integer.valueOf(1);
    boolean var24 = var19.contains(var22);
    boolean var26 = isConcurrentLohsAndTetheringSupported();
    HashMap var27 = this.mLocalOnlyHotspotRequests;
    boolean var29 = var27.isEmpty();
    boolean var32 = stopSoftApInternal(2);
    int var8 = Binder.getCallingUid();
    9 = conversion(J) 8;
    WifiController var13 = this.mWifiController;
    var13.sendMessage(155658,0,param2);
    boolean 1<PATH_SEP>FrameworkFacade var4 = this.mFrameworkFacade;
    boolean var6 = var4.inStorageManagerCryptKeeperBounce();
    int var13 = Binder.getCallingUid();
    14 = conversion(J) 13;
    HashMap var18 = this.mLocalOnlyHotspotRequests;
    ConcurrentHashMap var19 = this.mIfaceIpModes;
    Integer var22 = Integer.valueOf(1);
    boolean var24 = var19.contains(var22);
    boolean var26 = isConcurrentLohsAndTetheringSupported();
    HashMap var27 = this.mLocalOnlyHotspotRequests;
    boolean var29 = var27.isEmpty();
    boolean var32 = stopSoftApInternal(2);
    boolean var37 = startSoftApInternal(param2,1);
    int var9 = Binder.getCallingUid();
    10 = conversion(J) 9;
    13 = conversion(J) 3;
    boolean var19 = WifiApConfigStore.validateApWifiConfiguration(param2);{boolean var19 = WifiApConfigStore.validateApWifiConfiguration(param2);};
    SoftApModeConfiguration var27 = new SoftApModeConfiguration();
    WifiController var29 = this.mWifiController;
    var29.sendMessage(155658,1,0,var27);
    StateMachine$SmHandler var6 = this.mSmHandler;
    Message var9 = obtainMessage(param2,param3,param4,param5);
    StateMachine$SmHandler var6 = this.mSmHandler;
    Message var8 = Message.obtain(var6,param2,param3,param4,param5);
    Landroid/os/Message var8<PATH_SEP>FrameworkFacade var4 = this.mFrameworkFacade;
    boolean var6 = var4.inStorageManagerCryptKeeperBounce();
    int var13 = Binder.getCallingUid();
    14 = conversion(J) 13;
    HashMap var18 = this.mLocalOnlyHotspotRequests;
    ConcurrentHashMap var19 = this.mIfaceIpModes;
    Integer var22 = Integer.valueOf(1);
    boolean var24 = var19.contains(var22);
    boolean var26 = isConcurrentLohsAndTetheringSupported();
    HashMap var27 = this.mLocalOnlyHotspotRequests;
    boolean var29 = var27.isEmpty();
    boolean var32 = stopSoftApInternal(2);
    boolean var37 = startSoftApInternal(param2,1);
    int var9 = Binder.getCallingUid();
    10 = conversion(J) 9;
    13 = conversion(J) 3;
    boolean var19 = WifiApConfigStore.validateApWifiConfiguration(param2);{boolean var19 = WifiApConfigStore.validateApWifiConfiguration(param2);};
    SoftApModeConfiguration var27 = new SoftApModeConfiguration();
    WifiController var29 = this.mWifiController;
    var29.sendMessage(155658,1,0,var27);
    boolean 1<PATH_SEP>FrameworkFacade var4 = this.mFrameworkFacade;
    boolean var6 = var4.inStorageManagerCryptKeeperBounce();
    int var13 = Binder.getCallingUid();
    14 = conversion(J) 13;
    HashMap var18 = this.mLocalOnlyHotspotRequests;
    ConcurrentHashMap var19 = this.mIfaceIpModes;
    Integer var22 = Integer.valueOf(1);
    boolean var24 = var19.contains(var22);
    boolean var26 = isConcurrentLohsAndTetheringSupported();
    HashMap var27 = this.mLocalOnlyHotspotRequests;
    boolean var29 = var27.isEmpty();
    boolean var32 = stopSoftApInternal(2);
    boolean var37 = startSoftApInternal(param2,1);
    int var9 = Binder.getCallingUid();
    10 = conversion(J) 9;
    13 = conversion(J) 3;
    boolean var19 = WifiApConfigStore.validateApWifiConfiguration(param2);{boolean var19 = WifiApConfigStore.validateApWifiConfiguration(param2);};
    SoftApModeConfiguration var27 = new SoftApModeConfiguration();
    WifiController var29 = this.mWifiController;
    var29.sendMessage(155658,1,0,var27);
}