// API: setHdmiSystemAudioSupported
// Service: AudioService_2

public void setHdmiSystemAudioSupported() {
    Object var4 = this.mHdmiClientLock;
    HdmiControlManager var5 = this.mHdmiManager;
    HdmiTvClient var6 = this.mHdmiTvClient;
    HdmiAudioSystemClient var7 = this.mHdmiAudioSystemClient;
    boolean var9 = this.mHdmiSystemAudioSupported;
    this.mHdmiSystemAudioSupported = param2;
    AudioDeviceBroker var12 = this.mDeviceBroker;
    var12.setForceUse_Async(5,var11,setHdmiSystemAudioSupported);
    sendIILMsgNoDelay(4,2,param2,param3,param4);
    sendIILMsg(param2,param3,param4,param5,param6,0);
    AudioDeviceBroker$BrokerHandler var10 = this.mBrokerHandler;
    boolean var12 = var10.hasMessages(param2);
    long var20 = Binder.clearCallingIdentity();
    Binder.restoreCallingIdentity(var20);
    Object var38 = sLastDeviceConnectionMsgTimeLock;
    long var40 = SystemClock.uptimeMillis();
    41 = conversion(J) 7;
    var42 = var40 add var41;
    long var52 = sLastDeviceConnectMsgTime;
    var53 = var52 lt var42;
    long var54 = sLastDeviceConnectMsgTime;
    var56 = var54 add 30;
    var57.sLastDeviceConnectMsgTime = var57;
    AudioDeviceBroker$BrokerHandler var63 = this.mBrokerHandler;
    AudioDeviceBroker$BrokerHandler var64 = this.mBrokerHandler;
    Message var66 = var64.obtainMessage(param2,param4,param5,param6);
    boolean var68 = var63.sendMessageAtTime(var66,var60);
}