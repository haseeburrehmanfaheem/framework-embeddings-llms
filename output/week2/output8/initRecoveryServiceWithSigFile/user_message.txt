// API: initRecoveryServiceWithSigFile
// Service: LockSettingsService_4

public void initRecoveryServiceWithSigFile() {
    RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    var5.initRecoveryServiceWithSigFile(param2,param3,param4);
    TestOnlyInsecureCertificateHelper var7 = this.mTestCertHelper;
    String var9 = var7.getDefaultCertificateAliasIfEmpty(param2);
    Object var12 = Preconditions.checkNotNull(param3,recoveryServiceCertFile is null);{Object var12 = Preconditions.checkNotNull(param3,recoveryServiceCertFile is null);};
    Object var15 = Preconditions.checkNotNull(param4,recoveryServiceSigFile is null);{Object var15 = Preconditions.checkNotNull(param4,recoveryServiceSigFile is null);};
    SigXml var17 = SigXml.parse(param4);
    TestOnlyInsecureCertificateHelper var37 = this.mTestCertHelper;
    X509Certificate var39 = var37.getRootCertificate(var9);
    var17.verifyFileSignature(var39,param3);{var17.verifyFileSignature(var39,param3);};
    initRecoveryService(var9,param3);
    int var6 = UserHandle.getCallingUserId();
    int var8 = Binder.getCallingUid();
    TestOnlyInsecureCertificateHelper var9 = this.mTestCertHelper;
    String var11 = var9.getDefaultCertificateAliasIfEmpty(param2);
    TestOnlyInsecureCertificateHelper var12 = this.mTestCertHelper;
    boolean var14 = var12.isValidRootCertificateAlias(var11);{boolean var14 = var12.isValidRootCertificateAlias(var11);};
    RecoverableKeyStoreDb var20 = this.mDatabase;
    String var22 = var20.getActiveRootOfTrust(var6,var8);
    RecoverableKeyStoreDb var67 = this.mDatabase;
    long var69 = var67.setActiveRootOfTrust(var6,var8,var11);
    var71 = var69 lt 0;
    CertXml var78 = CertXml.parse(param3);
    long var98 = var78.getSerial();
    RecoverableKeyStoreDb var99 = this.mDatabase;
    Long var101 = var99.getRecoveryServiceCertSerial(var6,var8,var11);
    long var103 = var101.longValue();
    var104 = var103 lt var98;
    TestOnlyInsecureCertificateHelper var105 = this.mTestCertHelper;
    boolean var107 = var105.isTestOnlyCertificateAlias(var11);
    TestOnlyInsecureCertificateHelper var122 = this.mTestCertHelper;
    X509Certificate var124 = var122.getRootCertificate(var11);
    CertPath var129 = var78.getRandomEndpointCert(var124);
    RecoverableKeyStoreDb var141 = this.mDatabase;
    long var143 = var141.setRecoveryServiceCertPath(var6,var8,var11,var129);
    var145 = var143 lt 0;
    RecoverableKeyStoreDb var150 = this.mDatabase;
    long var152 = var150.setRecoveryServiceCertSerial(var6,var8,var11,var98);
    var153 = var152 lt 0;
    RecoverableKeyStoreDb var184 = this.mDatabase;
    Long var186 = var184.getSnapshotVersion(var6,var8);
    RecoverableKeyStoreDb var190 = this.mDatabase;
    long var193 = var190.setShouldCreateSnapshot(var6,var8,1);
    RecoverableKeyStoreDb var201 = this.mDatabase;
    SecureRandom var202 = new SecureRandom();
    long var205 = var202.nextLong();
    int var5 = next(32);
    6 = conversion(J) 5;
    var7 = var6 SHL 32;
    int var9 = next(32);
    10 = conversion(J) 9;
    var11 = var7 add var10;
    long var11<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    var5.initRecoveryServiceWithSigFile(param2,param3,param4);
    TestOnlyInsecureCertificateHelper var7 = this.mTestCertHelper;
    String var9 = var7.getDefaultCertificateAliasIfEmpty(param2);
    Object var12 = Preconditions.checkNotNull(param3,recoveryServiceCertFile is null);{Object var12 = Preconditions.checkNotNull(param3,recoveryServiceCertFile is null);};
    Object var15 = Preconditions.checkNotNull(param4,recoveryServiceSigFile is null);{Object var15 = Preconditions.checkNotNull(param4,recoveryServiceSigFile is null);};
    SigXml var17 = SigXml.parse(param4);
    TestOnlyInsecureCertificateHelper var37 = this.mTestCertHelper;
    X509Certificate var39 = var37.getRootCertificate(var9);
    var17.verifyFileSignature(var39,param3);{var17.verifyFileSignature(var39,param3);};
    initRecoveryService(var9,param3);
    int var6 = UserHandle.getCallingUserId();
    int var8 = Binder.getCallingUid();
    TestOnlyInsecureCertificateHelper var9 = this.mTestCertHelper;
    String var11 = var9.getDefaultCertificateAliasIfEmpty(param2);
    TestOnlyInsecureCertificateHelper var12 = this.mTestCertHelper;
    boolean var14 = var12.isValidRootCertificateAlias(var11);{boolean var14 = var12.isValidRootCertificateAlias(var11);};
    RecoverableKeyStoreDb var20 = this.mDatabase;
    String var22 = var20.getActiveRootOfTrust(var6,var8);
    RecoverableKeyStoreDbHelper var4 = this.mKeyStoreDbHelper;
    SQLiteDatabase var6 = var4.getReadableDatabase();
    String var11 = new String(4);
    String var15 = new String(2);
    String var17 = Integer.toString(param2);
    arraystore 15[18] = 17;
    String var20 = Integer.toString(param3);
    arraystore 15[21] = 20;
    Cursor var24 = var6.query(recovery_service_metadata,var11,user_id = ? AND uid = ?,var15,0,0,0);
    int var26 = var24.getCount();
    boolean var28 = var24.moveToFirst();
    int var30 = var24.getColumnIndexOrThrow(active_root_of_trust);
    boolean var32 = var24.isNull(var30);
    String var34 = var24.getString(var30);
    boolean var36 = TextUtils.isEmpty(var34);
    RecoverableKeyStoreDb.$closeResource(0,var24);
    Ljava/lang/String 0<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    var5.initRecoveryServiceWithSigFile(param2,param3,param4);
    TestOnlyInsecureCertificateHelper var7 = this.mTestCertHelper;
    String var9 = var7.getDefaultCertificateAliasIfEmpty(param2);
    Object var12 = Preconditions.checkNotNull(param3,recoveryServiceCertFile is null);{Object var12 = Preconditions.checkNotNull(param3,recoveryServiceCertFile is null);};
    Object var15 = Preconditions.checkNotNull(param4,recoveryServiceSigFile is null);{Object var15 = Preconditions.checkNotNull(param4,recoveryServiceSigFile is null);};
    SigXml var17 = SigXml.parse(param4);
    TestOnlyInsecureCertificateHelper var37 = this.mTestCertHelper;
    X509Certificate var39 = var37.getRootCertificate(var9);
    var17.verifyFileSignature(var39,param3);{var17.verifyFileSignature(var39,param3);};
    initRecoveryService(var9,param3);
    int var6 = UserHandle.getCallingUserId();
    int var8 = Binder.getCallingUid();
    TestOnlyInsecureCertificateHelper var9 = this.mTestCertHelper;
    String var11 = var9.getDefaultCertificateAliasIfEmpty(param2);
    TestOnlyInsecureCertificateHelper var12 = this.mTestCertHelper;
    boolean var14 = var12.isValidRootCertificateAlias(var11);{boolean var14 = var12.isValidRootCertificateAlias(var11);};
    RecoverableKeyStoreDb var20 = this.mDatabase;
    String var22 = var20.getActiveRootOfTrust(var6,var8);
    RecoverableKeyStoreDb var67 = this.mDatabase;
    long var69 = var67.setActiveRootOfTrust(var6,var8,var11);
    var71 = var69 lt 0;
    CertXml var78 = CertXml.parse(param3);
    long var98 = var78.getSerial();
    RecoverableKeyStoreDb var99 = this.mDatabase;
    Long var101 = var99.getRecoveryServiceCertSerial(var6,var8,var11);
    long var103 = var101.longValue();
    var104 = var103 lt var98;
    TestOnlyInsecureCertificateHelper var105 = this.mTestCertHelper;
    boolean var107 = var105.isTestOnlyCertificateAlias(var11);
    TestOnlyInsecureCertificateHelper var122 = this.mTestCertHelper;
    X509Certificate var124 = var122.getRootCertificate(var11);
    CertPath var129 = var78.getRandomEndpointCert(var124);
    RecoverableKeyStoreDb var141 = this.mDatabase;
    long var143 = var141.setRecoveryServiceCertPath(var6,var8,var11,var129);
    var145 = var143 lt 0;
    RecoverableKeyStoreDb var150 = this.mDatabase;
    long var152 = var150.setRecoveryServiceCertSerial(var6,var8,var11,var98);
    var153 = var152 lt 0;
    RecoverableKeyStoreDb var184 = this.mDatabase;
    Long var186 = var184.getSnapshotVersion(var6,var8);
    RecoverableKeyStoreDb var190 = this.mDatabase;
    long var193 = var190.setShouldCreateSnapshot(var6,var8,1);
    long var11 = setLong(param2,param3,should_create_snapshot,var8);
    long var11<PATH_SEP>RecoverableKeyStoreManager var5 = this.mRecoverableKeyStoreManager;
    var5.initRecoveryServiceWithSigFile(param2,param3,param4);
    TestOnlyInsecureCertificateHelper var7 = this.mTestCertHelper;
    String var9 = var7.getDefaultCertificateAliasIfEmpty(param2);
    Object var12 = Preconditions.checkNotNull(param3,recoveryServiceCertFile is null);{Object var12 = Preconditions.checkNotNull(param3,recoveryServiceCertFile is null);};
    Object var15 = Preconditions.checkNotNull(param4,recoveryServiceSigFile is null);{Object var15 = Preconditions.checkNotNull(param4,recoveryServiceSigFile is null);};
    SigXml var17 = SigXml.parse(param4);
    TestOnlyInsecureCertificateHelper var37 = this.mTestCertHelper;
    X509Certificate var39 = var37.getRootCertificate(var9);
    var17.verifyFileSignature(var39,param3);{var17.verifyFileSignature(var39,param3);};
    initRecoveryService(var9,param3);
    int var6 = UserHandle.getCallingUserId();
    int var8 = Binder.getCallingUid();
    TestOnlyInsecureCertificateHelper var9 = this.mTestCertHelper;
    String var11 = var9.getDefaultCertificateAliasIfEmpty(param2);
    TestOnlyInsecureCertificateHelper var12 = this.mTestCertHelper;
    boolean var14 = var12.isValidRootCertificateAlias(var11);{boolean var14 = var12.isValidRootCertificateAlias(var11);};
    RecoverableKeyStoreDb var20 = this.mDatabase;
    String var22 = var20.getActiveRootOfTrust(var6,var8);
    RecoverableKeyStoreDb var67 = this.mDatabase;
    long var69 = var67.setActiveRootOfTrust(var6,var8,var11);
}