// API: addUidPolicy
// Service: NetworkPolicyManagerService_3

public void addUidPolicy() {
    Context var4 = this.mContext;
    boolean var9 = UserHandle.isApp(param2);
    Object var22 = this.mUidRulesFirstLock;
    SparseIntArray var23 = this.mUidPolicy;
    int var25 = var23.get(param2,0);
    var26 = param3 or var25;
    setUidPolicyUncheckedUL(param2,var25,var26,1);
    setUidPolicyUncheckedUL(param2,param4,0);
    SparseIntArray var8 = this.mUidPolicy;
    var8.delete(param2);
    updateRulesForDataUsageRestrictionsUL(param2);
    Object var13 = this.mNetworkPoliciesSecondLock;
    writePolicyAL();
    boolean var8 = LOGV;
    AtomicFile var15 = this.mPolicyFile;
    FileOutputStream var17 = var15.startWrite();
    FastXmlSerializer var19 = new FastXmlSerializer();
    Charset var21 = UTF_8;
    String var23 = var21.name();
    var19.setOutput(var17,var23);
    Boolean var27 = Boolean.valueOf(1);
    var19.startDocument(0,var27);
    XmlSerializer var30 = var19.startTag(0,policy-list);
    XmlUtils.writeIntAttribute(var19,version,11);
    boolean var35 = this.mRestrictBackground;
    XmlUtils.writeBooleanAttribute(var19,restrictBackground,var35);
    ArrayMap var42 = this.mNetworkPolicy;
    int var44 = var42.size();
    ArrayMap var49 = this.mNetworkPolicy;
    Object var51 = var49.valueAt(var123);
    NetworkPolicy var52 = (NetworkPolicy) var51;
    NetworkTemplate var53 = var52.template;
    boolean var55 = var53.isPersistable();
    XmlSerializer var57 = var19.startTag(0,network-policy);
    int var60 = var53.getMatchRule();
    XmlUtils.writeIntAttribute(var19,networkTemplate,var60);
    String var63 = var53.getSubscriberId();
    XmlSerializer var66 = var19.attribute(0,subscriberId,var63);
    String var72 = var53.getNetworkId();
    RecurrenceRule var80 = var52.cycleRule;
    ZonedDateTime var81 = var80.start;
    String var83 = RecurrenceRule.convertZonedDateTime(var81);
    XmlUtils.writeStringAttribute(var19,cycleStart,var83);
    RecurrenceRule var85 = var52.cycleRule;
    ZonedDateTime var86 = var85.end;
    String var88 = RecurrenceRule.convertZonedDateTime(var86);
    XmlUtils.writeStringAttribute(var19,cycleEnd,var88);
    RecurrenceRule var90 = var52.cycleRule;
    Period var91 = var90.period;
    String var93 = RecurrenceRule.convertPeriod(var91);
    XmlUtils.writeStringAttribute(var19,cyclePeriod,var93);
    long var96 = var52.warningBytes;
    XmlUtils.writeLongAttribute(var19,warningBytes,var96);
    long var98 = var52.limitBytes;
    XmlUtils.writeLongAttribute(var19,limitBytes,var98);
    long var101 = var52.lastWarningSnooze;
    XmlUtils.writeLongAttribute(var19,lastWarningSnooze,var101);
    long var104 = var52.lastLimitSnooze;
    XmlUtils.writeLongAttribute(var19,lastLimitSnooze,var104);
    boolean var107 = var52.metered;
    XmlUtils.writeBooleanAttribute(var19,metered,var107);<PATH_SEP>Context var4 = this.mContext;
    boolean var9 = UserHandle.isApp(param2);
    Object var22 = this.mUidRulesFirstLock;
    SparseIntArray var23 = this.mUidPolicy;
    int var25 = var23.get(param2,0);
    var26 = param3 or var25;
    setUidPolicyUncheckedUL(param2,var25,var26,1);
    setUidPolicyUncheckedUL(param2,param4,0);
    SparseIntArray var8 = this.mUidPolicy;
    var8.delete(param2);
    updateRulesForDataUsageRestrictionsUL(param2);
    Object var13 = this.mNetworkPoliciesSecondLock;
    writePolicyAL();
    boolean var8 = LOGV;
    AtomicFile var15 = this.mPolicyFile;
    FileOutputStream var17 = var15.startWrite();
    FastXmlSerializer var19 = new FastXmlSerializer();
    Charset var21 = UTF_8;
    String var23 = var21.name();
    var19.setOutput(var17,var23);
    Boolean var27 = Boolean.valueOf(1);
    var19.startDocument(0,var27);
    XmlSerializer var30 = var19.startTag(0,policy-list);
    XmlUtils.writeIntAttribute(var19,version,11);
    boolean var35 = this.mRestrictBackground;
    XmlUtils.writeBooleanAttribute(var19,restrictBackground,var35);
    ArrayMap var42 = this.mNetworkPolicy;
    int var44 = var42.size();
    ArrayMap var49 = this.mNetworkPolicy;
    Object var51 = var49.valueAt(var123);
    NetworkPolicy var52 = (NetworkPolicy) var51;
    NetworkTemplate var53 = var52.template;
    boolean var55 = var53.isPersistable();
    XmlSerializer var57 = var19.startTag(0,network-policy);
    int var60 = var53.getMatchRule();
    XmlUtils.writeIntAttribute(var19,networkTemplate,var60);
    String var63 = var53.getSubscriberId();
    XmlSerializer var66 = var19.attribute(0,subscriberId,var63);
    String var72 = var53.getNetworkId();
    RecurrenceRule var80 = var52.cycleRule;
    ZonedDateTime var81 = var80.start;
    String var83 = RecurrenceRule.convertZonedDateTime(var81);
    XmlUtils.writeStringAttribute(var19,cycleStart,var83);
    RecurrenceRule var85 = var52.cycleRule;
    ZonedDateTime var86 = var85.end;
    String var88 = RecurrenceRule.convertZonedDateTime(var86);
    XmlUtils.writeStringAttribute(var19,cycleEnd,var88);<PATH_SEP>Context var4 = this.mContext;
    boolean var9 = UserHandle.isApp(param2);
    Object var22 = this.mUidRulesFirstLock;
    SparseIntArray var23 = this.mUidPolicy;
    int var25 = var23.get(param2,0);
    var26 = param3 or var25;
    setUidPolicyUncheckedUL(param2,var25,var26,1);
    setUidPolicyUncheckedUL(param2,param4,0);
    SparseIntArray var8 = this.mUidPolicy;
    var8.delete(param2);
    updateRulesForDataUsageRestrictionsUL(param2);
    Object var13 = this.mNetworkPoliciesSecondLock;
    writePolicyAL();
    boolean var8 = LOGV;
    AtomicFile var15 = this.mPolicyFile;
    FileOutputStream var17 = var15.startWrite();
    FastXmlSerializer var19 = new FastXmlSerializer();
    Charset var21 = UTF_8;
    String var23 = var21.name();
    var19.setOutput(var17,var23);
    Boolean var27 = Boolean.valueOf(1);
    var19.startDocument(0,var27);
    XmlSerializer var30 = var19.startTag(0,policy-list);
    XmlUtils.writeIntAttribute(var19,version,11);
    boolean var35 = this.mRestrictBackground;
    XmlUtils.writeBooleanAttribute(var19,restrictBackground,var35);
    ArrayMap var42 = this.mNetworkPolicy;
    int var44 = var42.size();
    ArrayMap var49 = this.mNetworkPolicy;
    Object var51 = var49.valueAt(var123);
    NetworkPolicy var52 = (NetworkPolicy) var51;
    NetworkTemplate var53 = var52.template;
    boolean var55 = var53.isPersistable();
    XmlSerializer var57 = var19.startTag(0,network-policy);
    int var60 = var53.getMatchRule();
    XmlUtils.writeIntAttribute(var19,networkTemplate,var60);
    String var63 = var53.getSubscriberId();
    XmlSerializer var66 = var19.attribute(0,subscriberId,var63);
    String var72 = var53.getNetworkId();
    RecurrenceRule var80 = var52.cycleRule;
    ZonedDateTime var81 = var80.start;
    String var83 = RecurrenceRule.convertZonedDateTime(var81);
    XmlUtils.writeStringAttribute(var19,cycleStart,var83);
    RecurrenceRule var85 = var52.cycleRule;
    ZonedDateTime var86 = var85.end;
    String var88 = RecurrenceRule.convertZonedDateTime(var86);
    XmlUtils.writeStringAttribute(var19,cycleEnd,var88);
    RecurrenceRule var90 = var52.cycleRule;
    Period var91 = var90.period;
    String var93 = RecurrenceRule.convertPeriod(var91);
    XmlUtils.writeStringAttribute(var19,cyclePeriod,var93);
    long var96 = var52.warningBytes;
    XmlUtils.writeLongAttribute(var19,warningBytes,var96);
    long var98 = var52.limitBytes;
    XmlUtils.writeLongAttribute(var19,limitBytes,var98);
    long var101 = var52.lastWarningSnooze;
    XmlUtils.writeLongAttribute(var19,lastWarningSnooze,var101);
    long var104 = var52.lastLimitSnooze;
    XmlUtils.writeLongAttribute(var19,lastLimitSnooze,var104);
    boolean var107 = var52.metered;
    XmlUtils.writeBooleanAttribute(var19,metered,var107);
    boolean var110 = var52.inferred;
    XmlUtils.writeBooleanAttribute(var19,inferred,var110);<PATH_SEP>Context var4 = this.mContext;
    boolean var9 = UserHandle.isApp(param2);
    Object var22 = this.mUidRulesFirstLock;
    SparseIntArray var23 = this.mUidPolicy;
    int var25 = var23.get(param2,0);
    var26 = param3 or var25;
    setUidPolicyUncheckedUL(param2,var25,var26,1);
    setUidPolicyUncheckedUL(param2,param4,0);
    SparseIntArray var8 = this.mUidPolicy;
    var8.delete(param2);
    updateRulesForDataUsageRestrictionsUL(param2);
    Object var13 = this.mNetworkPoliciesSecondLock;
    writePolicyAL();
    boolean var8 = LOGV;
    AtomicFile var15 = this.mPolicyFile;
    FileOutputStream var17 = var15.startWrite();
    FastXmlSerializer var19 = new FastXmlSerializer();
    Charset var21 = UTF_8;
    String var23 = var21.name();
    var19.setOutput(var17,var23);
    Boolean var27 = Boolean.valueOf(1);
    var19.startDocument(0,var27);
    XmlSerializer var30 = var19.startTag(0,policy-list);
    XmlUtils.writeIntAttribute(var19,version,11);
    boolean var35 = this.mRestrictBackground;
    XmlUtils.writeBooleanAttribute(var19,restrictBackground,var35);
    ArrayMap var42 = this.mNetworkPolicy;
    int var44 = var42.size();
    ArrayMap var49 = this.mNetworkPolicy;
    Object var51 = var49.valueAt(var123);
    NetworkPolicy var52 = (NetworkPolicy) var51;
    NetworkTemplate var53 = var52.template;
    boolean var55 = var53.isPersistable();
    XmlSerializer var57 = var19.startTag(0,network-policy);
    int var60 = var53.getMatchRule();
    XmlUtils.writeIntAttribute(var19,networkTemplate,var60);
    String var63 = var53.getSubscriberId();
    String var72 = var53.getNetworkId();
    XmlSerializer var75 = var19.attribute(0,networkId,var72);
    RecurrenceRule var80 = var52.cycleRule;
    ZonedDateTime var81 = var80.start;
    String var83 = RecurrenceRule.convertZonedDateTime(var81);
    XmlUtils.writeStringAttribute(var19,cycleStart,var83);
    RecurrenceRule var85 = var52.cycleRule;
    ZonedDateTime var86 = var85.end;
    String var88 = RecurrenceRule.convertZonedDateTime(var86);
    XmlUtils.writeStringAttribute(var19,cycleEnd,var88);
}