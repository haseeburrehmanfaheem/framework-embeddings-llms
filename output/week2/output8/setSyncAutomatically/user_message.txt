// API: setSyncAutomatically
// Service: ContentService_4

public void setSyncAutomatically() {
    int var6 = UserHandle.getCallingUserId();
    setSyncAutomaticallyAsUser(param2,param3,param4,var6);
    boolean var7 = TextUtils.isEmpty(param3);
    Context var12 = this.mContext;
    int var27 = Binder.getCallingUid();
    int var29 = Binder.getCallingPid();
    int var31 = getSyncExemptionForCaller(var27);
    long var33 = ContentService.clearCallingIdentity();
    SyncManager var35 = getSyncManager();
    SyncStorageEngine var37 = var35.getSyncStorageEngine();
    var37.setSyncAutomatically(param2,param5,param3,param4,var31,var27,var29);
    Object var40 = new Object(12);
    arraystore 40[13] = 41;
    arraystore 40[42] = 2;
    arraystore 40[9] = 43;
    Integer var46 = Integer.valueOf(param3);
    arraystore 40[44] = 46;
    arraystore 40[47] = 48;
    arraystore 40[49] = 4;
    arraystore 40[50] = 51;
    String var54 = Boolean.toString(param5);
    arraystore 40[52] = 54;
    arraystore 40[55] = 56;
    Integer var59 = Integer.valueOf(param7);
    arraystore 40[57] = 59;
    arraystore 40[60] = 61;
    Integer var64 = Integer.valueOf(param8);
    arraystore 40[62] = 64;
    SparseArray var66 = this.mAuthorities;
    SyncStorageEngine$EndPoint var67 = new SyncStorageEngine$EndPoint();
    SyncStorageEngine$AuthorityInfo var71 = getOrCreateAuthorityLocked(var67,-1,0);
    AccountAndUser var6 = new AccountAndUser();
    Account var7 = param2.account;
    int var8 = param2.userId;
    HashMap var10 = this.mAccounts;
    Object var12 = var10.get(var6);
    SyncStorageEngine$AccountInfo var13 = (SyncStorageEngine$AccountInfo) var12;
    SyncStorageEngine$AccountInfo var14 = new SyncStorageEngine$AccountInfo();
    HashMap var16 = this.mAccounts;
    Object var18 = var16.put(var6,var14);<PATH_SEP>int var6 = UserHandle.getCallingUserId();
    setSyncAutomaticallyAsUser(param2,param3,param4,var6);
    boolean var7 = TextUtils.isEmpty(param3);
    Context var12 = this.mContext;
    int var27 = Binder.getCallingUid();
    int var29 = Binder.getCallingPid();
    int var31 = getSyncExemptionForCaller(var27);
    long var33 = ContentService.clearCallingIdentity();
    SyncManager var35 = getSyncManager();
    SyncStorageEngine var37 = var35.getSyncStorageEngine();
    var37.setSyncAutomatically(param2,param5,param3,param4,var31,var27,var29);
    Object var40 = new Object(12);
    arraystore 40[13] = 41;
    arraystore 40[42] = 2;
    arraystore 40[9] = 43;
    Integer var46 = Integer.valueOf(param3);
    arraystore 40[44] = 46;
    arraystore 40[47] = 48;
    arraystore 40[49] = 4;
    arraystore 40[50] = 51;
    String var54 = Boolean.toString(param5);
    arraystore 40[52] = 54;
    arraystore 40[55] = 56;
    Integer var59 = Integer.valueOf(param7);
    arraystore 40[57] = 59;
    arraystore 40[60] = 61;
    Integer var64 = Integer.valueOf(param8);
    arraystore 40[62] = 64;
    SparseArray var66 = this.mAuthorities;
    SyncStorageEngine$EndPoint var67 = new SyncStorageEngine$EndPoint();
    SyncStorageEngine$AuthorityInfo var71 = getOrCreateAuthorityLocked(var67,-1,0);
    boolean var72 = var71.enabled;
    int var73 = var71.syncable;
    var71.syncable = -1;
    var71.enabled = param5;
    writeAccountInfoLocked();
    AtomicFile var15 = this.mAccountInfoFile;
    File var17 = var15.getBaseFile();
    AtomicFile var27 = this.mAccountInfoFile;
    FileOutputStream var29 = var27.startWrite();<PATH_SEP>int var6 = UserHandle.getCallingUserId();
    setSyncAutomaticallyAsUser(param2,param3,param4,var6);
    boolean var7 = TextUtils.isEmpty(param3);
    Context var12 = this.mContext;
    int var27 = Binder.getCallingUid();
    int var29 = Binder.getCallingPid();
    int var31 = getSyncExemptionForCaller(var27);
    long var33 = ContentService.clearCallingIdentity();
    SyncManager var35 = getSyncManager();
    SyncStorageEngine var37 = var35.getSyncStorageEngine();
    var37.setSyncAutomatically(param2,param5,param3,param4,var31,var27,var29);
    Object var40 = new Object(12);
    arraystore 40[13] = 41;
    arraystore 40[42] = 2;
    arraystore 40[9] = 43;
    Integer var46 = Integer.valueOf(param3);
    arraystore 40[44] = 46;
    arraystore 40[47] = 48;
    arraystore 40[49] = 4;
    arraystore 40[50] = 51;
    String var54 = Boolean.toString(param5);
    arraystore 40[52] = 54;
    arraystore 40[55] = 56;
    Integer var59 = Integer.valueOf(param7);
    arraystore 40[57] = 59;
    arraystore 40[60] = 61;
    Integer var64 = Integer.valueOf(param8);
    arraystore 40[62] = 64;
    SparseArray var66 = this.mAuthorities;
    SyncStorageEngine$EndPoint var67 = new SyncStorageEngine$EndPoint();
    SyncStorageEngine$AuthorityInfo var71 = getOrCreateAuthorityLocked(var67,-1,0);
    boolean var72 = var71.enabled;
    int var73 = var71.syncable;
    var71.syncable = -1;
    var71.enabled = param5;
    writeAccountInfoLocked();
    AtomicFile var15 = this.mAccountInfoFile;
    File var17 = var15.getBaseFile();
    AtomicFile var27 = this.mAccountInfoFile;
    FileOutputStream var29 = var27.startWrite();
    FastXmlSerializer var30 = new FastXmlSerializer();
    Charset var32 = UTF_8;
    String var34 = var32.name();
    var30.setOutput(var29,var34);
    Boolean var38 = Boolean.valueOf(1);
    var30.startDocument(0,var38);
    var30.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var43 = var30.startTag(0,accounts);
    String var47 = Integer.toString(3);
    XmlSerializer var49 = var30.attribute(0,version,var47);
    int var51 = this.mNextAuthorityId;
    String var53 = Integer.toString(var51);
    XmlSerializer var55 = var30.attribute(0,nextAuthorityId,var53);
    int var57 = this.mSyncRandomOffset;
    String var59 = Integer.toString(var57);
    XmlSerializer var61 = var30.attribute(0,offsetInSeconds,var59);
    SparseArray var62 = this.mMasterSyncAutomatically;
    int var64 = var62.size();
    SparseArray var93 = this.mAuthorities;
    int var95 = var93.size();
    SparseArray var96 = this.mAuthorities;
    Object var98 = var96.valueAt(var141);
    SyncStorageEngine$AuthorityInfo var99 = (SyncStorageEngine$AuthorityInfo) var98;
    SyncStorageEngine$EndPoint var100 = var99.target;
    XmlSerializer var102 = var30.startTag(0,authority);
    int var104 = var99.ident;
    String var106 = Integer.toString(var104);
    XmlSerializer var108 = var30.attribute(0,id,var106);
    int var109 = var100.userId;
    String var111 = Integer.toString(var109);<PATH_SEP>int var6 = UserHandle.getCallingUserId();
    setSyncAutomaticallyAsUser(param2,param3,param4,var6);
    boolean var7 = TextUtils.isEmpty(param3);
    Context var12 = this.mContext;
    int var27 = Binder.getCallingUid();
    int var29 = Binder.getCallingPid();
    int var31 = getSyncExemptionForCaller(var27);
    long var33 = ContentService.clearCallingIdentity();
    SyncManager var35 = getSyncManager();
    SyncStorageEngine var37 = var35.getSyncStorageEngine();
    var37.setSyncAutomatically(param2,param5,param3,param4,var31,var27,var29);
    Object var40 = new Object(12);
    arraystore 40[13] = 41;
    arraystore 40[42] = 2;
    arraystore 40[9] = 43;
    Integer var46 = Integer.valueOf(param3);
    arraystore 40[44] = 46;
    arraystore 40[47] = 48;
    arraystore 40[49] = 4;
    arraystore 40[50] = 51;
    String var54 = Boolean.toString(param5);
    arraystore 40[52] = 54;
    arraystore 40[55] = 56;
    Integer var59 = Integer.valueOf(param7);
    arraystore 40[57] = 59;
    arraystore 40[60] = 61;
    Integer var64 = Integer.valueOf(param8);
    arraystore 40[62] = 64;
    SparseArray var66 = this.mAuthorities;
    SyncStorageEngine$EndPoint var67 = new SyncStorageEngine$EndPoint();
    SyncStorageEngine$AuthorityInfo var71 = getOrCreateAuthorityLocked(var67,-1,0);
    boolean var72 = var71.enabled;
    int var73 = var71.syncable;
    var71.syncable = -1;
    var71.enabled = param5;
    writeAccountInfoLocked();
    AtomicFile var15 = this.mAccountInfoFile;
    File var17 = var15.getBaseFile();
    AtomicFile var27 = this.mAccountInfoFile;
    FileOutputStream var29 = var27.startWrite();
    FastXmlSerializer var30 = new FastXmlSerializer();
    Charset var32 = UTF_8;
    String var34 = var32.name();
    var30.setOutput(var29,var34);
    Boolean var38 = Boolean.valueOf(1);
    var30.startDocument(0,var38);
    var30.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var43 = var30.startTag(0,accounts);
    String var47 = Integer.toString(3);
    XmlSerializer var49 = var30.attribute(0,version,var47);
    int var51 = this.mNextAuthorityId;
    String var53 = Integer.toString(var51);
    XmlSerializer var55 = var30.attribute(0,nextAuthorityId,var53);
    int var57 = this.mSyncRandomOffset;
    String var59 = Integer.toString(var57);
    XmlSerializer var61 = var30.attribute(0,offsetInSeconds,var59);
    SparseArray var62 = this.mMasterSyncAutomatically;
    int var64 = var62.size();
    SparseArray var67 = this.mMasterSyncAutomatically;
    int var69 = var67.keyAt(var90);
    SparseArray var70 = this.mMasterSyncAutomatically;
    Object var72 = var70.valueAt(var90);
    Boolean var73 = (Boolean) var72;
    XmlSerializer var75 = var30.startTag(0,listenForTickles);
    String var77 = Integer.toString(var69);
}