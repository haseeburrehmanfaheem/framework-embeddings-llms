// API: setUserRestriction
// Service: UserManagerService_4

public void setUserRestriction() {
    Object var10 = this.mRestrictionsLock;
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param4);
    Bundle var14 = (Bundle) var13;
    Bundle var16 = UserRestrictionsUtils.clone(var14);
    var16.putBoolean(param2,param3);
    updateUserRestrictionsInternalLR(var16,param4);
    SparseArray var4 = this.mAppliedUserRestrictions;
    Object var6 = var4.get(param3);
    Bundle var7 = (Bundle) var6;
    Bundle var9 = UserRestrictionsUtils.nonNull(var7);
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param3);
    Bundle var14 = (Bundle) var13;
    Preconditions.checkState(var16);{Preconditions.checkState(var16);};
    SparseArray var18 = this.mCachedEffectiveUserRestrictions;
    Object var20 = var18.get(param3);
    Preconditions.checkState(var21);{Preconditions.checkState(var21);};
    SparseArray var23 = this.mBaseUserRestrictions;
    boolean var25 = updateRestrictionsIfNeededLR(param3,param2,var23);
    Object var6 = get(param2);
    Bundle var7 = (Bundle) var6;
    boolean var9 = UserRestrictionsUtils.areEqual(var7,param3);
    boolean var5 = UserRestrictionsUtils.isEmpty(this);
    boolean var8 = UserRestrictionsUtils.isEmpty(param2);
    Set var10 = keySet();<PATH_SEP>Object var10 = this.mRestrictionsLock;
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param4);
    Bundle var14 = (Bundle) var13;
    Bundle var16 = UserRestrictionsUtils.clone(var14);
    var16.putBoolean(param2,param3);
    updateUserRestrictionsInternalLR(var16,param4);
    SparseArray var4 = this.mAppliedUserRestrictions;
    Object var6 = var4.get(param3);
    Bundle var7 = (Bundle) var6;
    Bundle var9 = UserRestrictionsUtils.nonNull(var7);
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param3);
    Bundle var14 = (Bundle) var13;
    Preconditions.checkState(var16);{Preconditions.checkState(var16);};
    SparseArray var18 = this.mCachedEffectiveUserRestrictions;
    Object var20 = var18.get(param3);
    Preconditions.checkState(var21);{Preconditions.checkState(var21);};
    SparseArray var23 = this.mBaseUserRestrictions;
    boolean var25 = updateRestrictionsIfNeededLR(param3,param2,var23);
    Object var6 = get(param2);
    Bundle var7 = (Bundle) var6;
    boolean var9 = UserRestrictionsUtils.areEqual(var7,param3);
    var11 = var9 xor 1;
    boolean var14 = UserRestrictionsUtils.isEmpty(param3);
    delete(param2);
    boolean var11<PATH_SEP>Object var10 = this.mRestrictionsLock;
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param4);
    Bundle var14 = (Bundle) var13;
    Bundle var16 = UserRestrictionsUtils.clone(var14);
    var16.putBoolean(param2,param3);
    updateUserRestrictionsInternalLR(var16,param4);
    SparseArray var4 = this.mAppliedUserRestrictions;
    Object var6 = var4.get(param3);
    Bundle var7 = (Bundle) var6;
    Bundle var9 = UserRestrictionsUtils.nonNull(var7);
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param3);
    Bundle var14 = (Bundle) var13;
    Preconditions.checkState(var16);{Preconditions.checkState(var16);};
    SparseArray var18 = this.mCachedEffectiveUserRestrictions;
    Object var20 = var18.get(param3);
    Preconditions.checkState(var21);{Preconditions.checkState(var21);};
    SparseArray var23 = this.mBaseUserRestrictions;
    boolean var25 = updateRestrictionsIfNeededLR(param3,param2,var23);
    UserManagerService$UserData var27 = getUserDataNoChecks(param3);
    scheduleWriteUser(var27);
    Bundle var33 = computeEffectiveUserRestrictionsLR(param3);
    SparseArray var34 = this.mCachedEffectiveUserRestrictions;
    var34.put(param3,var33);<PATH_SEP>Object var10 = this.mRestrictionsLock;
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param4);
    Bundle var14 = (Bundle) var13;
    Bundle var16 = UserRestrictionsUtils.clone(var14);
    var16.putBoolean(param2,param3);
    updateUserRestrictionsInternalLR(var16,param4);
    SparseArray var4 = this.mAppliedUserRestrictions;
    Object var6 = var4.get(param3);
    Bundle var7 = (Bundle) var6;
    Bundle var9 = UserRestrictionsUtils.nonNull(var7);
    SparseArray var11 = this.mBaseUserRestrictions;
    Object var13 = var11.get(param3);
    Bundle var14 = (Bundle) var13;
    Preconditions.checkState(var16);{Preconditions.checkState(var16);};
    SparseArray var18 = this.mCachedEffectiveUserRestrictions;
    Object var20 = var18.get(param3);
    Preconditions.checkState(var21);{Preconditions.checkState(var21);};
    SparseArray var23 = this.mBaseUserRestrictions;
    boolean var25 = updateRestrictionsIfNeededLR(param3,param2,var23);
    Object var6 = get(param2);
    Bundle var7 = (Bundle) var6;
    boolean var9 = UserRestrictionsUtils.areEqual(var7,param3);
    boolean var5 = UserRestrictionsUtils.isEmpty(this);
    boolean var8 = UserRestrictionsUtils.isEmpty(param2);
    Set var10 = keySet();
    Iterator var12 = var10.iterator();
    Set var25 = keySet();
    Iterator var27 = var25.iterator();
    Object var31 = var27.next();
    String var32 = (String) var31;
    boolean var34 = getBoolean(var32);
    boolean var36 = getBoolean(var32);
    boolean 0;
}