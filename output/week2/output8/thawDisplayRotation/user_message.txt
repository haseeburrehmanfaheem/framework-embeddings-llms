// API: thawDisplayRotation
// Service: WindowManagerService_2

public void thawDisplayRotation() {
    long var12 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(param2);
    DisplayRotation var19 = var17.getDisplayRotation();
    var19.thawRotation();
    int var2 = this.mUserRotation;
    setUserRotation(0,var2);
    boolean var4 = this.isDefaultDisplay;
    Context var18 = this.mContext;
    ContentResolver var20 = var18.getContentResolver();
    boolean var25 = Settings$System.putIntForUser(var20,accelerometer_rotation,var21,-2);
    boolean var28 = Settings$System.putIntForUser(var20,user_rotation,param3,-2);<PATH_SEP>long var12 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(param2);
    DisplayRotation var19 = var17.getDisplayRotation();
    var19.thawRotation();
    int var2 = this.mUserRotation;
    setUserRotation(0,var2);
    boolean var4 = this.isDefaultDisplay;
    int var7 = this.mUserRotationMode;
    int var9 = this.mUserRotation;
    DisplayWindowSettings var11 = this.mDisplayWindowSettings;
    DisplayContent var12 = this.mDisplayContent;
    var11.setUserRotation(var12,param2,param3);
    WindowManagerService var14 = this.mService;
    var14.updateRotation(1,0);<PATH_SEP>long var12 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    WindowManagerThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.boost();
    int var3 = Process.myTid();
    int var4 = this.mAnimationThreadId;
    int var5 = this.mSurfaceAnimationThreadId;
    boost();
    ThreadLocal var2 = this.mThreadState;
    Object var4 = var2.get();
    ThreadPriorityBooster$PriorityState var5 = (ThreadPriorityBooster$PriorityState) var4;
    int var6 = var5.regionCounter;
    int var19 = var5.regionCounter;
    var21 = var19 add 1;
    var5.regionCounter = var21;<PATH_SEP>long var12 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var13 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var15 = this.mRoot;
    DisplayContent var17 = var15.getDisplayContent(param2);
    DisplayRotation var19 = var17.getDisplayRotation();
    var19.thawRotation();
    int var2 = this.mUserRotation;
    setUserRotation(0,var2);
    boolean var4 = this.isDefaultDisplay;
    int var7 = this.mUserRotationMode;
    this.mUserRotationMode = param2;
    int var9 = this.mUserRotation;
    this.mUserRotation = param3;
    DisplayWindowSettings var11 = this.mDisplayWindowSettings;
    DisplayContent var12 = this.mDisplayContent;
    var11.setUserRotation(var12,param2,param3);
    DisplayInfo var6 = getDisplayInfo();
    DisplayWindowSettings$Entry var8 = getOrCreateEntry(var6);
    int var10 = DisplayWindowSettings$Entry.access$702(var8,param3);{int var10 = DisplayWindowSettings$Entry.access$702(var8,param3);};
    int var12 = DisplayWindowSettings$Entry.access$802(var8,param4);{int var12 = DisplayWindowSettings$Entry.access$802(var8,param4);};
    writeSettingsIfNeeded(var8,var6);
}