// API: setAccountVisibility
// Service: AccountManagerService_4

public void setAccountVisibility() {
    Object var7 = Preconditions.checkNotNull(param2,account cannot be null);{Object var7 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var10 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var10 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    int var12 = Binder.getCallingUid();
    int var14 = UserHandle.getCallingUserId();
    String var15 = param2.type;
    boolean var17 = isAccountManagedByCaller(var15,var12,var14);{boolean var17 = isAccountManagedByCaller(var15,var12,var14);};
    long var36 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var38 = getUserAccounts(var14);
    boolean var40 = setAccountVisibility(param2,param3,param4,1,var38);
    Object var7 = param6.dbLock;
    Object var8 = param6.cacheLock;
    Map var42 = getRequestingPackages(param2,param6);
    HashSet var4 = new HashSet();
    Map var7 = AccountManagerService$UserAccounts.access$1000(param3);{Map var7 = AccountManagerService$UserAccounts.access$1000(param3);};
    String var9 = new String(2);
    String var10 = param2.type;
    arraystore 9[11] = 10;
    arraystore 9[12] = 11;
    13 = arraylength 9;
    HashMap var32 = new HashMap();
    Iterator var35 = var4.iterator();
    Object var39 = var35.next();
    String var40 = (String) var39;
    Integer var42 = resolveAccountVisibility(param2,var40,param3);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    int var51 = getAccountVisibilityFromCache(param2,param3,param4);<PATH_SEP>Object var7 = Preconditions.checkNotNull(param2,account cannot be null);{Object var7 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var10 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var10 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    int var12 = Binder.getCallingUid();
    int var14 = UserHandle.getCallingUserId();
    String var15 = param2.type;
    boolean var17 = isAccountManagedByCaller(var15,var12,var14);{boolean var17 = isAccountManagedByCaller(var15,var12,var14);};
    long var36 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var38 = getUserAccounts(var14);
    boolean var40 = setAccountVisibility(param2,param3,param4,1,var38);
    Object var7 = param6.dbLock;
    Object var8 = param6.cacheLock;
    Map var42 = getRequestingPackages(param2,param6);
    HashSet var4 = new HashSet();
    Map var7 = AccountManagerService$UserAccounts.access$1000(param3);{Map var7 = AccountManagerService$UserAccounts.access$1000(param3);};
    String var9 = new String(2);
    String var10 = param2.type;
    arraystore 9[11] = 10;
    arraystore 9[12] = 11;
    13 = arraylength 9;
    HashMap var32 = new HashMap();
    Iterator var35 = var4.iterator();
    Object var39 = var35.next();
    String var40 = (String) var39;
    Integer var42 = resolveAccountVisibility(param2,var40,param3);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    int var51 = getAccountVisibilityFromCache(param2,param3,param4);
    int var53 = AccountManagerService$UserAccounts.access$800(param4);{int var53 = AccountManagerService$UserAccounts.access$800(param4);};
    String var55 = new String(1);
    boolean var61 = isPreOApplication(param3);
    int var63 = AccountManagerService$UserAccounts.access$800(param4);{int var63 = AccountManagerService$UserAccounts.access$800(param4);};
    int var70 = AccountManagerService$UserAccounts.access$800(param4);{int var70 = AccountManagerService$UserAccounts.access$800(param4);};
    String var73 = param2.type;
    int var75 = AccountManagerService$UserAccounts.access$800(param4);{int var75 = AccountManagerService$UserAccounts.access$800(param4);};
    boolean var77 = accountTypeManagesContacts(var73,var75);
    int var83 = getAccountVisibilityFromCache(param2,android:accounts:key_legacy_not_visible,param4);<PATH_SEP>Object var7 = Preconditions.checkNotNull(param2,account cannot be null);{Object var7 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var10 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var10 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    int var12 = Binder.getCallingUid();
    int var14 = UserHandle.getCallingUserId();
    String var15 = param2.type;
    boolean var17 = isAccountManagedByCaller(var15,var12,var14);{boolean var17 = isAccountManagedByCaller(var15,var12,var14);};
    long var36 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var38 = getUserAccounts(var14);
    boolean var40 = setAccountVisibility(param2,param3,param4,1,var38);
    Object var7 = param6.dbLock;
    Object var8 = param6.cacheLock;
    Map var42 = getRequestingPackages(param2,param6);
    HashSet var4 = new HashSet();
    Map var7 = AccountManagerService$UserAccounts.access$1000(param3);{Map var7 = AccountManagerService$UserAccounts.access$1000(param3);};
    String var9 = new String(2);
    String var10 = param2.type;
    arraystore 9[11] = 10;
    arraystore 9[12] = 11;
    13 = arraylength 9;
    HashMap var32 = new HashMap();
    Iterator var35 = var4.iterator();
    Object var39 = var35.next();
    String var40 = (String) var39;
    Integer var42 = resolveAccountVisibility(param2,var40,param3);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    int var51 = getAccountVisibilityFromCache(param2,param3,param4);
    int var53 = AccountManagerService$UserAccounts.access$800(param4);{int var53 = AccountManagerService$UserAccounts.access$800(param4);};
    String var55 = new String(1);
    boolean var61 = isPreOApplication(param3);
    int var63 = AccountManagerService$UserAccounts.access$800(param4);{int var63 = AccountManagerService$UserAccounts.access$800(param4);};
    int var93 = getAccountVisibilityFromCache(param2,android:accounts:key_legacy_visible,param4);<PATH_SEP>Object var7 = Preconditions.checkNotNull(param2,account cannot be null);{Object var7 = Preconditions.checkNotNull(param2,account cannot be null);};
    Object var10 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var10 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    int var12 = Binder.getCallingUid();
    int var14 = UserHandle.getCallingUserId();
    String var15 = param2.type;
    boolean var17 = isAccountManagedByCaller(var15,var12,var14);{boolean var17 = isAccountManagedByCaller(var15,var12,var14);};
    long var36 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var38 = getUserAccounts(var14);
    boolean var40 = setAccountVisibility(param2,param3,param4,1,var38);
    Object var7 = param6.dbLock;
    Object var8 = param6.cacheLock;
    Map var42 = getRequestingPackages(param2,param6);
    HashSet var4 = new HashSet();
    Map var7 = AccountManagerService$UserAccounts.access$1000(param3);{Map var7 = AccountManagerService$UserAccounts.access$1000(param3);};
    String var9 = new String(2);
    String var10 = param2.type;
    arraystore 9[11] = 10;
    arraystore 9[12] = 11;
    13 = arraylength 9;
    HashMap var32 = new HashMap();
    Iterator var35 = var4.iterator();
    Object var39 = var35.next();
    String var40 = (String) var39;
    Integer var42 = resolveAccountVisibility(param2,var40,param3);
    Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);{Object var7 = Preconditions.checkNotNull(param3,packageName cannot be null);};
    long var10 = AccountManagerService.clearCallingIdentity();
    PackageManager var11 = this.mPackageManager;
    int var13 = AccountManagerService$UserAccounts.access$800(param4);{int var13 = AccountManagerService$UserAccounts.access$800(param4);};
    int var15 = var11.getPackageUidAsUser(param3,var13);
    AccountManagerService.restoreCallingIdentity(var10);
    boolean var41 = UserHandle.isSameApp(var15,1000);
    String var44 = param2.type;
    int var46 = AccountManagerService$UserAccounts.access$800(param4);{int var46 = AccountManagerService$UserAccounts.access$800(param4);};
    int var51 = getAccountVisibilityFromCache(param2,param3,param4);
    int var53 = AccountManagerService$UserAccounts.access$800(param4);{int var53 = AccountManagerService$UserAccounts.access$800(param4);};
    String var55 = new String(1);
    boolean var61 = isPreOApplication(param3);
    int var63 = AccountManagerService$UserAccounts.access$800(param4);{int var63 = AccountManagerService$UserAccounts.access$800(param4);};
    int var70 = AccountManagerService$UserAccounts.access$800(param4);{int var70 = AccountManagerService$UserAccounts.access$800(param4);};
    int var83 = getAccountVisibilityFromCache(param2,android:accounts:key_legacy_not_visible,param4);
    Integer var99 = Integer.valueOf(var94);
    Ljava/lang/Integer var99;
}