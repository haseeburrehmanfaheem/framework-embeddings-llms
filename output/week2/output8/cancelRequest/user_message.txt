// API: cancelRequest
// Service: ContentService_2

public void cancelRequest() {
    SyncManager var4 = getSyncManager();
    int var7 = UserHandle.getCallingUserId();
    int var9 = Binder.getCallingUid();
    boolean var11 = isPeriodic();
    Context var12 = this.mContext;
    Bundle var18 = new Bundle();
    Bundle var20 = getBundle();
    validateExtras(var9,var18);{validateExtras(var9,var18);};
    long var24 = ContentService.clearCallingIdentity();
    Account var26 = getAccount();
    String var28 = getProvider();
    SyncStorageEngine$EndPoint var29 = new SyncStorageEngine$EndPoint();
    boolean var32 = isPeriodic();
    SyncManager var34 = getSyncManager();
    var34.removePeriodicSync(var29,var18,var43);
    var4.cancelScheduledSyncOperation(var29,var18);
    List var5 = getAllPendingSyncs();
    verifyJobScheduler();{verifyJobScheduler();};
    JobSchedulerInternal var3 = this.mJobSchedulerInternal;
    List var5 = var3.getSystemScheduledPendingJobs();
    ArrayList var6 = new ArrayList();
    int var8 = var5.size();
    Iterator var11 = var5.iterator();
    Object var16 = var11.next();
    JobInfo var17 = (JobInfo) var16;
    PersistableBundle var19 = var17.getExtras();
    SyncOperation var21 = SyncOperation.maybeCreateFromJobExtras(var19);
    boolean var5 = getBoolean(SyncManagerJob,0);
    String var8 = getString(accountName);
    String var11 = getString(accountType);
    String var14 = getString(provider);
    int var18 = getInt(userId,2147483647);
    int var21 = getInt(owningUid);
    String var24 = getString(owningPackage);
    int var27 = getInt(reason,2147483647);
    int var30 = getInt(source,2147483647);
    boolean var33 = getBoolean(allowParallelSyncs,0);
    boolean var36 = getBoolean(isPeriodic,0);
    int var40 = getInt(sourcePeriodicId,-1);
    long var43 = getLong(periodMillis);
    long var46 = getLong(flexMillis);
    int var49 = getInt(syncExemptionFlag,0);
    Bundle var50 = new Bundle();
    PersistableBundle var54 = getPersistableBundle(syncExtras);
    var50.putAll(var54);
    Set var58 = keySet();
    Iterator var60 = var58.iterator();
    Account var93 = new Account();
    SyncStorageEngine$EndPoint var95 = new SyncStorageEngine$EndPoint();
    SyncOperation var97 = new SyncOperation();
    int var101 = getInt(jobId);
    var97.jobId = var101;
    long var104 = getLong(expectedRuntime);
    var97.expectedRuntime = var104;
    int var107 = getInt(retries);
    var97.retries = var107;
    Lcom/android/server/content/SyncOperation var97<PATH_SEP>SyncManager var4 = getSyncManager();
    int var7 = UserHandle.getCallingUserId();
    int var9 = Binder.getCallingUid();
    boolean var11 = isPeriodic();
    Context var12 = this.mContext;
    Bundle var18 = new Bundle();
    Bundle var20 = getBundle();
    validateExtras(var9,var18);{validateExtras(var9,var18);};
    long var24 = ContentService.clearCallingIdentity();
    Account var26 = getAccount();
    String var28 = getProvider();
    SyncStorageEngine$EndPoint var29 = new SyncStorageEngine$EndPoint();
    boolean var32 = isPeriodic();
    SyncManager var34 = getSyncManager();
    var34.removePeriodicSync(var29,var18,var43);
    var4.cancelScheduledSyncOperation(var29,var18);
    List var5 = getAllPendingSyncs();
    verifyJobScheduler();{verifyJobScheduler();};
    JobSchedulerInternal var3 = this.mJobSchedulerInternal;
    List var5 = var3.getSystemScheduledPendingJobs();
    ArrayList var6 = new ArrayList();
    int var8 = var5.size();
    Iterator var11 = var5.iterator();
    Object var16 = var11.next();
    JobInfo var17 = (JobInfo) var16;
    PersistableBundle var19 = var17.getExtras();
    SyncOperation var21 = SyncOperation.maybeCreateFromJobExtras(var19);
    boolean var5 = getBoolean(SyncManagerJob,0);
    String var8 = getString(accountName);
    String var11 = getString(accountType);
    String var14 = getString(provider);
    int var18 = getInt(userId,2147483647);
    int var21 = getInt(owningUid);
    String var24 = getString(owningPackage);
    int var27 = getInt(reason,2147483647);
    int var30 = getInt(source,2147483647);
    boolean var33 = getBoolean(allowParallelSyncs,0);
    boolean var36 = getBoolean(isPeriodic,0);
    int var40 = getInt(sourcePeriodicId,-1);
    long var43 = getLong(periodMillis);
    long var46 = getLong(flexMillis);
    int var49 = getInt(syncExemptionFlag,0);
    Bundle var50 = new Bundle();
    PersistableBundle var54 = getPersistableBundle(syncExtras);
    Set var58 = keySet();
    Iterator var60 = var58.iterator();
    Object var64 = var60.next();
    String var65 = (String) var64;
    boolean var68 = var65.startsWith(ACCOUNT:);
    String var71 = var65.substring(8);
    PersistableBundle var73 = getPersistableBundle(var65);
    Account var74 = new Account();
    String var76 = var73.getString(accountName);
    String var78 = var73.getString(accountType);
    var50.putParcelable(var71,var74);<PATH_SEP>SyncManager var4 = getSyncManager();
    int var7 = UserHandle.getCallingUserId();
    int var9 = Binder.getCallingUid();
    boolean var11 = isPeriodic();
    Context var12 = this.mContext;
    Bundle var18 = new Bundle();
    Bundle var20 = getBundle();
    validateExtras(var9,var18);{validateExtras(var9,var18);};
    long var24 = ContentService.clearCallingIdentity();
    Account var26 = getAccount();
    String var28 = getProvider();
    SyncStorageEngine$EndPoint var29 = new SyncStorageEngine$EndPoint();
    boolean var32 = isPeriodic();
    SyncManager var34 = getSyncManager();
    var34.removePeriodicSync(var29,var18,var43);
    var4.cancelScheduledSyncOperation(var29,var18);
    List var5 = getAllPendingSyncs();
    Iterator var7 = var5.iterator();
    Object var12 = var7.next();
    SyncOperation var13 = (SyncOperation) var12;
    boolean var14 = var13.isPeriodic;
    SyncStorageEngine$EndPoint var15 = var13.target;
    boolean var17 = var15.matchesSpec(param2);
    Bundle var18 = var13.extras;
    boolean var20 = SyncManager.syncExtrasEquals(param3,var18,0);
    int var7 = size();
    int var9 = size();
    int var11 = size();
    int var13 = size();
    int var16 = size();
    int var18 = size();
    Set var21 = var14.keySet();
    Iterator var23 = var21.iterator();
    Object var27 = var23.next();
    String var28 = (String) var27;
    boolean var30 = SyncManager.isSyncSetting(var28);
    boolean var36 = var19.containsKey(var28);
    boolean 0<PATH_SEP>SyncManager var4 = getSyncManager();
    int var7 = UserHandle.getCallingUserId();
    int var9 = Binder.getCallingUid();
    boolean var11 = isPeriodic();
    Context var12 = this.mContext;
    Bundle var18 = new Bundle();
    Bundle var20 = getBundle();
    validateExtras(var9,var18);{validateExtras(var9,var18);};
    long var24 = ContentService.clearCallingIdentity();
    Account var26 = getAccount();
    String var28 = getProvider();
    SyncStorageEngine$EndPoint var29 = new SyncStorageEngine$EndPoint();
    boolean var32 = isPeriodic();
    SyncManager var34 = getSyncManager();
    var34.removePeriodicSync(var29,var18,var43);
    var4.cancelScheduledSyncOperation(var29,var18);
    List var5 = getAllPendingSyncs();
    Iterator var7 = var5.iterator();
    Object var12 = var7.next();
    SyncOperation var13 = (SyncOperation) var12;
    boolean var14 = var13.isPeriodic;
    SyncStorageEngine$EndPoint var15 = var13.target;
    boolean var17 = var15.matchesSpec(param2);
    Bundle var18 = var13.extras;
    boolean var20 = SyncManager.syncExtrasEquals(param3,var18,0);
    int var7 = size();
    int var9 = size();
    int var11 = size();
    int var13 = size();
    int var16 = size();
    int var18 = size();
    Set var21 = var14.keySet();
    Iterator var23 = var21.iterator();
    Object var27 = var23.next();
    String var28 = (String) var27;
    boolean var36 = var19.containsKey(var28);
    Object var38 = var14.get(var28);
    Object var40 = var19.get(var28);
    boolean var42 = Objects.equals(var38,var40);
    boolean 0;
}