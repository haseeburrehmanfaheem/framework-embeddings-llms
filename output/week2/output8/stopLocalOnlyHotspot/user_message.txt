// API: stopLocalOnlyHotspot
// Service: WifiServiceImpl_1

public void stopLocalOnlyHotspot() {
    int var3 = Binder.getCallingUid();
    int var5 = Binder.getCallingPid();
    10 = conversion(J) 3;
    13 = conversion(J) 5;
    HashMap var17 = this.mLocalOnlyHotspotRequests;
    HashMap var18 = this.mLocalOnlyHotspotRequests;
    Integer var20 = Integer.valueOf(var5);
    Object var22 = var18.get(var20);
    LocalOnlyHotspotRequestInfo var23 = (LocalOnlyHotspotRequestInfo) var22;
    var23.unlinkDeathRecipient();
    unregisterCallingAppAndStopLocalOnlyHotspot(var23);
    int var8 = getPid();
    9 = conversion(J) 8;
    HashMap var13 = this.mLocalOnlyHotspotRequests;
    HashMap var14 = this.mLocalOnlyHotspotRequests;
    int var16 = getPid();
    Integer var18 = Integer.valueOf(var16);
    Object var20 = var14.remove(var18);
    HashMap var22 = this.mLocalOnlyHotspotRequests;
    boolean var24 = var22.isEmpty();
    this.mLocalOnlyHotspotConfig = 0;
    updateInterfaceIpStateInternal(0,-1);
    HashMap var4 = this.mLocalOnlyHotspotRequests;
    Integer var7 = Integer.valueOf(-1);
    ConcurrentHashMap var9 = this.mIfaceIpModes;
    Integer var11 = Integer.valueOf(param3);
    Object var13 = var9.put(param2,var11);
    Integer var14 = (Integer) var13;
    HashMap var69 = this.mLocalOnlyHotspotRequests;
    boolean var71 = var69.isEmpty();
    boolean var74 = stopSoftAp();
    FrameworkFacade var3 = this.mFrameworkFacade;
    boolean var5 = var3.inStorageManagerCryptKeeperBounce();
    int var12 = Binder.getCallingUid();
    13 = conversion(J) 12;
    HashMap var17 = this.mLocalOnlyHotspotRequests;
    HashMap var18 = this.mLocalOnlyHotspotRequests;
    boolean var20 = var18.isEmpty();
    boolean var31 = stopSoftApInternal(1);
    boolean var31;
}