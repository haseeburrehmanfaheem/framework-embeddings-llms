// API: schedule
// Service: JobSchedulerService$JobSchedulerStub_2

public void schedule() {
    boolean var3 = DEBUG;
    String var11 = toString();
    int var21 = Binder.getCallingPid();
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getUserId(var23);
    enforceValidJobRequest(var23,param2);{enforceValidJobRequest(var23,param2);};
    boolean var28 = isPersisted();
    boolean var30 = canPersistJobs(var21,var23);
    long var39 = Binder.clearCallingIdentity();
    JobSchedulerService var40 = this.this$0;
    int var42 = var40.scheduleAsPackage(param2,0,var23,0,var25,0);
    IActivityManager var9 = ActivityManager.getService();
    ComponentName var11 = getService();
    String var13 = var11.getPackageName();
    boolean var15 = var9.isAppStartModeDisabled(param4,var13);
    ActivityManagerService.boostPriorityForLockedSection();
    int var9 = getAppStartModeLocked(param2,param3,0,-1,0,1,0);
    ProcessList var9 = this.mProcessList;
    UidRecord var11 = var9.getUidRecordLocked(param2);
    boolean var13 = var11.idle;
    PackageManagerInternal var16 = getPackageManagerInternalLocked();
    int var18 = UserHandle.getUserId(param2);
    boolean var20 = var16.isPackageEphemeral(var18,param3);
    int var25 = appServicesRestrictedInBackgroundLocked(param2,param3,param4);
    ActivityManagerService$PidMap var32 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var33 = this.mPidsSelfLocked;
    ProcessRecord var35 = var33.get(param5);
    int var42 = var35.getCurProcState();
    boolean var44 = ActivityManager.isProcStateBackground(var42);{boolean var44 = ActivityManager.isProcStateBackground(var42);};
    int var28<PATH_SEP>boolean var3 = DEBUG;
    String var11 = toString();
    int var21 = Binder.getCallingPid();
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getUserId(var23);
    enforceValidJobRequest(var23,param2);{enforceValidJobRequest(var23,param2);};
    boolean var28 = isPersisted();
    boolean var30 = canPersistJobs(var21,var23);
    long var39 = Binder.clearCallingIdentity();
    JobSchedulerService var40 = this.this$0;
    int var42 = var40.scheduleAsPackage(param2,0,var23,0,var25,0);
    IActivityManager var9 = ActivityManager.getService();
    ComponentName var11 = getService();
    String var13 = var11.getPackageName();
    boolean var15 = var9.isAppStartModeDisabled(param4,var13);
    ActivityManagerService.boostPriorityForLockedSection();
    int var9 = getAppStartModeLocked(param2,param3,0,-1,0,1,0);
    ProcessList var9 = this.mProcessList;
    UidRecord var11 = var9.getUidRecordLocked(param2);
    boolean var13 = var11.idle;
    boolean var14 = var11.ephemeral;
    int 0<PATH_SEP>boolean var3 = DEBUG;
    String var11 = toString();
    int var21 = Binder.getCallingPid();
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getUserId(var23);
    enforceValidJobRequest(var23,param2);{enforceValidJobRequest(var23,param2);};
    boolean var28 = isPersisted();
    boolean var30 = canPersistJobs(var21,var23);
    long var39 = Binder.clearCallingIdentity();
    JobSchedulerService var40 = this.this$0;
    int var42 = var40.scheduleAsPackage(param2,0,var23,0,var25,0);
    IActivityManager var9 = ActivityManager.getService();
    ComponentName var11 = getService();
    String var13 = var11.getPackageName();
    boolean var15 = var9.isAppStartModeDisabled(param4,var13);
    ActivityManagerService.boostPriorityForLockedSection();
    int var9 = getAppStartModeLocked(param2,param3,0,-1,0,1,0);
    ProcessList var9 = this.mProcessList;
    UidRecord var11 = var9.getUidRecordLocked(param2);
    boolean var13 = var11.idle;
    boolean var14 = var11.ephemeral;
    int var27 = appRestrictedInBackgroundLocked(param2,param3,param4);
    ActivityManagerService$PidMap var32 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var33 = this.mPidsSelfLocked;
    ProcessRecord var35 = var33.get(param5);
    int var42 = var35.getCurProcState();
    boolean var44 = ActivityManager.isProcStateBackground(var42);{boolean var44 = ActivityManager.isProcStateBackground(var42);};
    int 0<PATH_SEP>boolean var3 = DEBUG;
    String var11 = toString();
    int var21 = Binder.getCallingPid();
    int var23 = Binder.getCallingUid();
    int var25 = UserHandle.getUserId(var23);
    enforceValidJobRequest(var23,param2);{enforceValidJobRequest(var23,param2);};
    boolean var28 = isPersisted();
    boolean var30 = canPersistJobs(var21,var23);
    long var39 = Binder.clearCallingIdentity();
    JobSchedulerService var40 = this.this$0;
    int var42 = var40.scheduleAsPackage(param2,0,var23,0,var25,0);
    IActivityManager var9 = ActivityManager.getService();
    ComponentName var11 = getService();
    String var13 = var11.getPackageName();
    boolean var15 = var9.isAppStartModeDisabled(param4,var13);
    ActivityManagerService.boostPriorityForLockedSection();
    int var9 = getAppStartModeLocked(param2,param3,0,-1,0,1,0);
    ProcessList var9 = this.mProcessList;
    UidRecord var11 = var9.getUidRecordLocked(param2);
    PackageManagerInternal var16 = getPackageManagerInternalLocked();
    int var18 = UserHandle.getUserId(param2);
    boolean var20 = var16.isPackageEphemeral(var18,param3);
    int var25 = appServicesRestrictedInBackgroundLocked(param2,param3,param4);
    ActivityManagerService$PidMap var32 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var33 = this.mPidsSelfLocked;
    ProcessRecord var35 = var33.get(param5);
    int var28;
}