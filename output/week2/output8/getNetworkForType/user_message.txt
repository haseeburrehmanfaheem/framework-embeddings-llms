// API: getNetworkForType
// Service: ConnectivityService_2

public void getNetworkForType() {
    int var5 = Binder.getCallingUid();
    NetworkState var7 = getFilteredNetworkState(param2,var5);
    ConnectivityService$LegacyTypeTracker var4 = this.mLegacyTypeTracker;
    boolean var6 = var4.isTypeSupported(param2);
    ConnectivityService$LegacyTypeTracker var9 = this.mLegacyTypeTracker;
    NetworkAgentInfo var11 = var9.getNetworkForType(param2);
    NetworkInfo var12 = new NetworkInfo();
    String var14 = ConnectivityManager.getNetworkTypeName(param2);
    NetworkInfo$DetailedState var17 = DISCONNECTED;
    var12.setDetailedState(var17,0,0);
    var12.setIsAvailable(1);
    NetworkCapabilities var21 = new NetworkCapabilities();
    boolean var25 = var12.isRoaming();
    var26 = 1 xor var25;
    NetworkCapabilities var28 = var21.setCapability(18,var26);
    NetworkCapabilities var8 = addCapability(param2);
    NetworkCapabilities.checkValidCapability(param2);{NetworkCapabilities.checkValidCapability(param2);};
    long var4 = this.mNetworkCapabilities;
    var6 = 1 SHL param2;
    7 = conversion(J) 6;
    var8 = var4 or var7;
    this.mNetworkCapabilities = var8;<PATH_SEP>int var5 = Binder.getCallingUid();
    NetworkState var7 = getFilteredNetworkState(param2,var5);
    ConnectivityService$LegacyTypeTracker var4 = this.mLegacyTypeTracker;
    boolean var6 = var4.isTypeSupported(param2);
    ConnectivityService$LegacyTypeTracker var9 = this.mLegacyTypeTracker;
    NetworkAgentInfo var11 = var9.getNetworkForType(param2);
    NetworkState var34 = var11.getNetworkState();
    NetworkInfo var35 = var34.networkInfo;
    var35.setType(param2);
    filterNetworkStateForUid(var37,param3,0);
    NetworkInfo var6 = param2.networkInfo;
    LinkProperties var7 = param2.linkProperties;
    LinkProperties var8 = param2.linkProperties;
    boolean var10 = isNetworkWithLinkPropertiesBlocked(var8,param3,param4);
    NetworkInfo var11 = param2.networkInfo;
    NetworkInfo$DetailedState var12 = BLOCKED;
    var11.setDetailedState(var12,0,0);
    SparseArray var16 = this.mVpns;
    LockdownVpnTracker var17 = this.mLockdownTracker;
    LockdownVpnTracker var18 = this.mLockdownTracker;
    NetworkInfo var19 = param2.networkInfo;
    var18.augmentNetworkInfo(var19);
    boolean var4 = isConnected();
    Vpn var6 = this.mVpn;
    NetworkInfo var8 = var6.getNetworkInfo();
    NetworkInfo$DetailedState var10 = var8.getDetailedState();
    String var12 = var8.getReason();
    setDetailedState(var10,var12,0);<PATH_SEP>int var5 = Binder.getCallingUid();
    NetworkState var7 = getFilteredNetworkState(param2,var5);
    ConnectivityService$LegacyTypeTracker var4 = this.mLegacyTypeTracker;
    boolean var6 = var4.isTypeSupported(param2);
    ConnectivityService$LegacyTypeTracker var9 = this.mLegacyTypeTracker;
    NetworkAgentInfo var11 = var9.getNetworkForType(param2);
    NetworkInfo var12 = new NetworkInfo();
    String var14 = ConnectivityManager.getNetworkTypeName(param2);
    NetworkInfo$DetailedState var17 = DISCONNECTED;
    var12.setDetailedState(var17,0,0);
    var12.setIsAvailable(1);
    NetworkCapabilities var21 = new NetworkCapabilities();
    boolean var25 = var12.isRoaming();
    var26 = 1 xor var25;
    NetworkCapabilities var28 = var21.setCapability(18,var26);
    NetworkCapabilities var8 = addCapability(param2);
    Landroid/net/NetworkCapabilities this<PATH_SEP>int var5 = Binder.getCallingUid();
    NetworkState var7 = getFilteredNetworkState(param2,var5);
    ConnectivityService$LegacyTypeTracker var4 = this.mLegacyTypeTracker;
    boolean var6 = var4.isTypeSupported(param2);
    ConnectivityService$LegacyTypeTracker var9 = this.mLegacyTypeTracker;
    NetworkAgentInfo var11 = var9.getNetworkForType(param2);
    NetworkInfo var12 = new NetworkInfo();
    String var14 = ConnectivityManager.getNetworkTypeName(param2);
    NetworkInfo$DetailedState var17 = DISCONNECTED;
    var12.setDetailedState(var17,0,0);
    var12.setIsAvailable(1);
    NetworkCapabilities var21 = new NetworkCapabilities();
    boolean var25 = var12.isRoaming();
    var26 = 1 xor var25;
    NetworkCapabilities var28 = var21.setCapability(18,var26);
    NetworkCapabilities var6 = removeCapability(param2);
    NetworkCapabilities.checkValidCapability(param2);{NetworkCapabilities.checkValidCapability(param2);};
    var5 = 1 SHL param2;
    6 = bitnot 5;
    7 = conversion(J) 6;
    long var8 = this.mNetworkCapabilities;
    var9 = var8 and var7;
    this.mNetworkCapabilities = var9;
    long var10 = this.mUnwantedNetworkCapabilities;
    var11 = var10 and var7;
    this.mUnwantedNetworkCapabilities = var11;
}