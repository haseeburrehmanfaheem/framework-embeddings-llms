// API: createProjection
// Service: MediaProjectionManagerService$BinderService_5

public void createProjection() {
    MediaProjectionManagerService var6 = this.this$0;
    Context var8 = MediaProjectionManagerService.access$500(var6);{Context var8 = MediaProjectionManagerService.access$500(var6);};
    boolean var17 = isEmpty();
    UserHandle var25 = Binder.getCallingUserHandle();
    long var27 = Binder.clearCallingIdentity();
    MediaProjectionManagerService var28 = this.this$0;
    PackageManager var30 = MediaProjectionManagerService.access$600(var28);{PackageManager var30 = MediaProjectionManagerService.access$600(var28);};
    ApplicationInfo var32 = var30.getApplicationInfoAsUser(param3,0,var25);
    MediaProjectionManagerService$MediaProjection var45 = new MediaProjectionManagerService$MediaProjection();
    MediaProjectionManagerService var46 = this.this$0;
    int var47 = var32.targetSdkVersion;
    boolean var49 = var32.isPrivilegedApp();
    MediaProjectionManagerService var51 = this.this$0;
    AppOpsManager var53 = MediaProjectionManagerService.access$400(var51);{AppOpsManager var53 = MediaProjectionManagerService.access$400(var51);};
    int var55 = var45.uid;
    String var56 = var45.packageName;
    var53.setMode(46,var55,var56,0);
    IAppOpsService var6 = this.mService;
    var6.setMode(param2,param3,param4,param5);
    setMode(param2,param3,param4,param5,1,0);
    int var9 = Binder.getCallingPid();
    int var11 = Binder.getCallingUid();
    verifyIncomingOp(param2);{verifyIncomingOp(param2);};
    int var16 = AppOpsManager.opToSwitch(param2);
    AppOpsService$UidState var18 = getUidStateLocked(param3,0);
    AppOpsService$Op var21 = getOpLocked(var16,param3,param4,1,param6,param7);
    int var23 = AppOpsService$Op.access$100(var21);{int var23 = AppOpsService$Op.access$100(var21);};
    int var25 = AppOpsService$Op.access$102(var21,param5);{int var25 = AppOpsService$Op.access$102(var21,param5);};
    SparseArray var26 = this.mOpModeWatchers;
    var18.evalForegroundOps(var26);
    SparseArray var30 = this.mOpModeWatchers;
    Object var32 = var30.get(var16);
    ArraySet var33 = (ArraySet) var32;
    ArraySet var34 = new ArraySet();
    var36.addAll(var33);
    ArrayMap var43 = this.mPackageModeWatchers;
    Object var45 = var43.get(param4);
    ArraySet var46 = (ArraySet) var45;
    int var56 = var21.op;
    int var58 = AppOpsManager.opToDefaultMode(var56);
    scheduleFastWriteLocked();
    Handler var74 = this.mHandler;
    -$$Lambda$AppOpsService$NDUi03ZZuuR42-RDEIQ0UELKycc var75 = INSTANCE;
    Integer var77 = Integer.valueOf(var16);
    Integer var79 = Integer.valueOf(param3);
    Message var81 = PooledLambda.obtainMessage(var75,this,var62,var77,var79,param4);
    boolean var83 = var74.sendMessage(var81);
    notifyOpChangedSync(var16,param3,param4,param5);<PATH_SEP>MediaProjectionManagerService var6 = this.this$0;
    Context var8 = MediaProjectionManagerService.access$500(var6);{Context var8 = MediaProjectionManagerService.access$500(var6);};
    boolean var17 = isEmpty();
    UserHandle var25 = Binder.getCallingUserHandle();
    long var27 = Binder.clearCallingIdentity();
    MediaProjectionManagerService var28 = this.this$0;
    PackageManager var30 = MediaProjectionManagerService.access$600(var28);{PackageManager var30 = MediaProjectionManagerService.access$600(var28);};
    ApplicationInfo var32 = var30.getApplicationInfoAsUser(param3,0,var25);
    MediaProjectionManagerService$MediaProjection var45 = new MediaProjectionManagerService$MediaProjection();
    MediaProjectionManagerService var46 = this.this$0;
    int var47 = var32.targetSdkVersion;
    boolean var49 = var32.isPrivilegedApp();
    MediaProjectionManagerService var51 = this.this$0;
    AppOpsManager var53 = MediaProjectionManagerService.access$400(var51);{AppOpsManager var53 = MediaProjectionManagerService.access$400(var51);};
    int var55 = var45.uid;
    String var56 = var45.packageName;
    var53.setMode(46,var55,var56,0);
    IAppOpsService var6 = this.mService;
    var6.setMode(param2,param3,param4,param5);
    setMode(param2,param3,param4,param5,1,0);
    int var9 = Binder.getCallingPid();
    int var11 = Binder.getCallingUid();
    verifyIncomingOp(param2);{verifyIncomingOp(param2);};
    int var16 = AppOpsManager.opToSwitch(param2);
    AppOpsService$UidState var18 = getUidStateLocked(param3,0);
    AppOpsService$Op var21 = getOpLocked(var16,param3,param4,1,param6,param7);
    int var23 = AppOpsService$Op.access$100(var21);{int var23 = AppOpsService$Op.access$100(var21);};
    int var25 = AppOpsService$Op.access$102(var21,param5);{int var25 = AppOpsService$Op.access$102(var21,param5);};
    SparseArray var26 = this.mOpModeWatchers;
    var18.evalForegroundOps(var26);
    SparseArray var30 = this.mOpModeWatchers;
    Object var32 = var30.get(var16);
    ArraySet var33 = (ArraySet) var32;
    ArraySet var34 = new ArraySet();
    var36.addAll(var33);
    ArrayMap var43 = this.mPackageModeWatchers;
    Object var45 = var43.get(param4);
    ArraySet var46 = (ArraySet) var45;
    var49.addAll(var46);
    int var56 = var21.op;
    int var58 = AppOpsManager.opToDefaultMode(var56);
    pruneOp(var21,param3,param4);
    scheduleFastWriteLocked();
    notifyOpChangedSync(var16,param3,param4,param5);<PATH_SEP>MediaProjectionManagerService var6 = this.this$0;
    Context var8 = MediaProjectionManagerService.access$500(var6);{Context var8 = MediaProjectionManagerService.access$500(var6);};
    boolean var17 = isEmpty();
    UserHandle var25 = Binder.getCallingUserHandle();
    long var27 = Binder.clearCallingIdentity();
    MediaProjectionManagerService var28 = this.this$0;
    PackageManager var30 = MediaProjectionManagerService.access$600(var28);{PackageManager var30 = MediaProjectionManagerService.access$600(var28);};
    ApplicationInfo var32 = var30.getApplicationInfoAsUser(param3,0,var25);
    MediaProjectionManagerService$MediaProjection var45 = new MediaProjectionManagerService$MediaProjection();
    MediaProjectionManagerService var46 = this.this$0;
    int var47 = var32.targetSdkVersion;
    boolean var49 = var32.isPrivilegedApp();
    MediaProjectionManagerService var51 = this.this$0;
    AppOpsManager var53 = MediaProjectionManagerService.access$400(var51);{AppOpsManager var53 = MediaProjectionManagerService.access$400(var51);};
    int var55 = var45.uid;
    String var56 = var45.packageName;
    var53.setMode(46,var55,var56,0);
    IAppOpsService var6 = this.mService;
    var6.setMode(param2,param3,param4,param5);
    setMode(param2,param3,param4,param5,1,0);
    int var9 = Binder.getCallingPid();
    int var11 = Binder.getCallingUid();
    verifyIncomingOp(param2);{verifyIncomingOp(param2);};
    int var16 = AppOpsManager.opToSwitch(param2);
    AppOpsService$UidState var18 = getUidStateLocked(param3,0);
    AppOpsService$Op var21 = getOpLocked(var16,param3,param4,1,param6,param7);
    int var23 = AppOpsService$Op.access$100(var21);{int var23 = AppOpsService$Op.access$100(var21);};
    int var25 = AppOpsService$Op.access$102(var21,param5);{int var25 = AppOpsService$Op.access$102(var21,param5);};
    SparseArray var26 = this.mOpModeWatchers;
    var18.evalForegroundOps(var26);
    SparseArray var30 = this.mOpModeWatchers;
    Object var32 = var30.get(var16);
    ArraySet var33 = (ArraySet) var32;
    var36.addAll(var33);
    ArrayMap var43 = this.mPackageModeWatchers;
    Object var45 = var43.get(param4);
    ArraySet var46 = (ArraySet) var45;
    ArraySet var47 = new ArraySet();
    var49.addAll(var46);
    int var56 = var21.op;
    int var58 = AppOpsManager.opToDefaultMode(var56);
    pruneOp(var21,param3,param4);
    scheduleFastWriteLocked();
    Handler var74 = this.mHandler;
    -$$Lambda$AppOpsService$NDUi03ZZuuR42-RDEIQ0UELKycc var75 = INSTANCE;
    Integer var77 = Integer.valueOf(var16);
    Integer var79 = Integer.valueOf(param3);
    Message var81 = PooledLambda.obtainMessage(var75,this,var62,var77,var79,param4);
    boolean var83 = var74.sendMessage(var81);<PATH_SEP>MediaProjectionManagerService var6 = this.this$0;
    Context var8 = MediaProjectionManagerService.access$500(var6);{Context var8 = MediaProjectionManagerService.access$500(var6);};
    boolean var17 = isEmpty();
    UserHandle var25 = Binder.getCallingUserHandle();
    long var27 = Binder.clearCallingIdentity();
    MediaProjectionManagerService var28 = this.this$0;
    PackageManager var30 = MediaProjectionManagerService.access$600(var28);{PackageManager var30 = MediaProjectionManagerService.access$600(var28);};
    ApplicationInfo var32 = var30.getApplicationInfoAsUser(param3,0,var25);
    MediaProjectionManagerService$MediaProjection var45 = new MediaProjectionManagerService$MediaProjection();
    MediaProjectionManagerService var46 = this.this$0;
    int var47 = var32.targetSdkVersion;
    boolean var49 = var32.isPrivilegedApp();
    MediaProjectionManagerService var51 = this.this$0;
    AppOpsManager var53 = MediaProjectionManagerService.access$400(var51);{AppOpsManager var53 = MediaProjectionManagerService.access$400(var51);};
    int var55 = var45.uid;
    String var56 = var45.packageName;
    var53.setMode(46,var55,var56,0);
    IAppOpsService var6 = this.mService;
    var6.setMode(param2,param3,param4,param5);
    setMode(param2,param3,param4,param5,1,0);
    int var9 = Binder.getCallingPid();
    int var11 = Binder.getCallingUid();
    verifyIncomingOp(param2);{verifyIncomingOp(param2);};
    int var16 = AppOpsManager.opToSwitch(param2);
    AppOpsService$UidState var18 = getUidStateLocked(param3,0);
    AppOpsService$Op var21 = getOpLocked(var16,param3,param4,1,param6,param7);
    int var23 = AppOpsService$Op.access$100(var21);{int var23 = AppOpsService$Op.access$100(var21);};
    int var25 = AppOpsService$Op.access$102(var21,param5);{int var25 = AppOpsService$Op.access$102(var21,param5);};
    SparseArray var26 = this.mOpModeWatchers;
    var18.evalForegroundOps(var26);
    SparseArray var30 = this.mOpModeWatchers;
    Object var32 = var30.get(var16);
    ArraySet var33 = (ArraySet) var32;
    ArraySet var34 = new ArraySet();
    var36.addAll(var33);
    ArrayMap var43 = this.mPackageModeWatchers;
    Object var45 = var43.get(param4);
    ArraySet var46 = (ArraySet) var45;
    var49.addAll(var46);
    int var56 = var21.op;
    int var58 = AppOpsManager.opToDefaultMode(var56);
    scheduleFastWriteLocked();
    Handler var74 = this.mHandler;
    -$$Lambda$AppOpsService$NDUi03ZZuuR42-RDEIQ0UELKycc var75 = INSTANCE;
    Integer var77 = Integer.valueOf(var16);
    Integer var79 = Integer.valueOf(param3);
    Message var81 = PooledLambda.obtainMessage(var75,this,var62,var77,var79,param4);
    boolean var83 = var74.sendMessage(var81);
}