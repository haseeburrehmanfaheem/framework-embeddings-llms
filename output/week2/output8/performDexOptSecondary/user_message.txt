// API: performDexOptSecondary
// Service: PackageManagerService_4

public void performDexOptSecondary() {
    var9 = var7 or 13;
    DexoptOptions var10 = new DexoptOptions();
    boolean var13 = performDexOpt(var10);
    int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    String var9 = getPackageName();
    int var11 = UserHandle.getCallingUserId();
    boolean var13 = isInstantApp(var9,var11);
    PermissionManagerServiceInternal var4 = this.mPermissionManager;
    int var6 = Binder.getCallingUid();
    ArrayMap var11 = this.mPackages;
    int var13 = Binder.getCallingUid();
    boolean var15 = Process.isIsolated(var13);
    Settings var23 = this.mSettings;
    ArrayMap var24 = var23.mPackages;
    Object var26 = var24.get(param2);
    PackageSetting var27 = (PackageSetting) var26;
    ArrayMap var28 = this.mPackages;
    Object var30 = var28.get(param2);
    PackageParser$Package var31 = (PackageParser$Package) var30;
    boolean var35 = canViewInstantApps(var19,param3);
    InstantAppRegistry var36 = this.mInstantAppRegistry;
    int var38 = UserHandle.getAppId(var19);
    int var39 = var27.appId;
    boolean var41 = var36.isInstantAccessGranted(param3,var38,var39);{boolean var41 = var36.isInstantAccessGranted(param3,var38,var39);};
    boolean var52 = var27.getInstantApp(param3);
    boolean var52<PATH_SEP>var9 = var7 or 13;
    DexoptOptions var10 = new DexoptOptions();
    boolean var13 = performDexOpt(var10);
    int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    String var9 = getPackageName();
    int var11 = UserHandle.getCallingUserId();
    boolean var13 = isInstantApp(var9,var11);
    boolean var15 = isDexoptOnlySecondaryDex();
    DexManager var21 = this.mDexManager;
    boolean var23 = var21.dexoptSecondaryDex(param2);
    boolean var4 = isForce();
    PackageDexOptimizer$ForcedUpdatePackageDexOptimizer var7 = new PackageDexOptimizer$ForcedUpdatePackageDexOptimizer();
    PackageDexOptimizer var8 = this.mPackageDexOptimizer;
    String var13 = getPackageName();
    PackageDexUsage$PackageUseInfo var15 = getPackageUseInfoOrDefault(var13);
    Map var17 = var15.getDexUseInfoMap();
    boolean var19 = var17.isEmpty();
    Map var23 = var15.getDexUseInfoMap();
    Set var25 = var23.entrySet();
    Iterator var27 = var25.iterator();
    Object var31 = var27.next();
    Map$Entry var32 = (Map$Entry) var31;
    Object var34 = var32.getKey();
    String var35 = (String) var34;
    Object var37 = var32.getValue();
    PackageDexUsage$DexUseInfo var38 = (PackageDexUsage$DexUseInfo) var37;
    IPackageManager var39 = this.mPackageManager;
    int var41 = var38.getOwnerUserId();
    PackageInfo var43 = var39.getPackageInfo(var13,0,var41);
    int var55 = var38.getOwnerUserId();
    PackageDexUsage var62 = this.mPackageDexUsage;
    int var64 = var38.getOwnerUserId();
    boolean var66 = var62.removeUserPackage(var13,var64);
    Map var4 = this.mPackageUseInfoMap;
    Map var5 = this.mPackageUseInfoMap;
    Object var7 = var5.get(param2);
    PackageDexUsage$PackageUseInfo var8 = (PackageDexUsage$PackageUseInfo) var7;
    Map var11 = PackageDexUsage$PackageUseInfo.access$100(var8);{Map var11 = PackageDexUsage$PackageUseInfo.access$100(var8);};
    Set var13 = var11.entrySet();
    Iterator var15 = var13.iterator();
    Object var19 = var15.next();
    Map$Entry var20 = (Map$Entry) var19;
    Object var22 = var20.getValue();
    PackageDexUsage$DexUseInfo var23 = (PackageDexUsage$DexUseInfo) var22;
    int var25 = PackageDexUsage$DexUseInfo.access$300(var23);{int var25 = PackageDexUsage$DexUseInfo.access$300(var23);};
    var15.remove();<PATH_SEP>var9 = var7 or 13;
    DexoptOptions var10 = new DexoptOptions();
    boolean var13 = performDexOpt(var10);
    int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    String var9 = getPackageName();
    int var11 = UserHandle.getCallingUserId();
    boolean var13 = isInstantApp(var9,var11);
    boolean var15 = isDexoptOnlySecondaryDex();
    DexManager var21 = this.mDexManager;
    boolean var23 = var21.dexoptSecondaryDex(param2);
    boolean var4 = isForce();
    PackageDexOptimizer$ForcedUpdatePackageDexOptimizer var7 = new PackageDexOptimizer$ForcedUpdatePackageDexOptimizer();
    PackageDexOptimizer var8 = this.mPackageDexOptimizer;
    String var13 = getPackageName();
    PackageDexUsage$PackageUseInfo var15 = getPackageUseInfoOrDefault(var13);
    Map var17 = var15.getDexUseInfoMap();
    boolean var19 = var17.isEmpty();
    Map var23 = var15.getDexUseInfoMap();
    Set var25 = var23.entrySet();
    Iterator var27 = var25.iterator();
    Object var31 = var27.next();
    Map$Entry var32 = (Map$Entry) var31;
    Object var34 = var32.getKey();
    String var35 = (String) var34;
    Object var37 = var32.getValue();
    PackageDexUsage$DexUseInfo var38 = (PackageDexUsage$DexUseInfo) var37;
    IPackageManager var39 = this.mPackageManager;
    int var41 = var38.getOwnerUserId();
    PackageInfo var43 = var39.getPackageInfo(var13,0,var41);
    int var55 = var38.getOwnerUserId();
    PackageDexUsage var62 = this.mPackageDexUsage;
    int var64 = var38.getOwnerUserId();
    boolean var66 = var62.removeUserPackage(var13,var64);
    Map var4 = this.mPackageUseInfoMap;
    Map var5 = this.mPackageUseInfoMap;
    Object var7 = var5.get(param2);
    PackageDexUsage$PackageUseInfo var8 = (PackageDexUsage$PackageUseInfo) var7;
    Map var11 = PackageDexUsage$PackageUseInfo.access$100(var8);{Map var11 = PackageDexUsage$PackageUseInfo.access$100(var8);};
    Set var13 = var11.entrySet();
    Iterator var15 = var13.iterator();
    Map var34 = PackageDexUsage$PackageUseInfo.access$100(var8);{Map var34 = PackageDexUsage$PackageUseInfo.access$100(var8);};
    boolean var36 = var34.isEmpty();
    boolean var38 = var8.isAnyCodePathUsedByOtherApps();
    Map var39 = this.mPackageUseInfoMap;
    Object var41 = var39.remove(param2);
    boolean var42<PATH_SEP>var9 = var7 or 13;
    DexoptOptions var10 = new DexoptOptions();
    boolean var13 = performDexOpt(var10);
    int var4 = Binder.getCallingUid();
    String var6 = getInstantAppPackageName(var4);
    String var9 = getPackageName();
    int var11 = UserHandle.getCallingUserId();
    boolean var13 = isInstantApp(var9,var11);
    boolean var15 = isDexoptOnlySecondaryDex();
    DexManager var21 = this.mDexManager;
    boolean var23 = var21.dexoptSecondaryDex(param2);
    boolean var4 = isForce();
    PackageDexOptimizer$ForcedUpdatePackageDexOptimizer var7 = new PackageDexOptimizer$ForcedUpdatePackageDexOptimizer();
    PackageDexOptimizer var8 = this.mPackageDexOptimizer;
    String var13 = getPackageName();
    PackageDexUsage$PackageUseInfo var15 = getPackageUseInfoOrDefault(var13);
    Map var17 = var15.getDexUseInfoMap();
    boolean var19 = var17.isEmpty();
    boolean var80 = DEBUG;
    boolean 1;
}