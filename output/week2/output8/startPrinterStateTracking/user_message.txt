// API: startPrinterStateTracking
// Service: PrintManagerService$PrintManagerImpl_3

public void startPrinterStateTracking() {
    Object var5 = Preconditions.checkNotNull(param2);{Object var5 = Preconditions.checkNotNull(param2);};
    PrinterId var6 = (PrinterId) var5;
    int var8 = resolveCallingUserEnforcingPermissions(param3);
    Object var9 = this.mLock;
    int var11 = resolveCallingProfileParentLocked(var8);
    int var4 = getCurrentUserId();
    long var6 = Binder.clearCallingIdentity();
    UserManager var7 = this.mUserManager;
    UserInfo var9 = var7.getProfileParent(param2);
    UserHandle var14 = var9.getUserHandle();
    int var16 = var14.getIdentifier();
    Binder.restoreCallingIdentity(var6);
    int var16<PATH_SEP>Object var5 = Preconditions.checkNotNull(param2);{Object var5 = Preconditions.checkNotNull(param2);};
    PrinterId var6 = (PrinterId) var5;
    int var8 = resolveCallingUserEnforcingPermissions(param3);
    Object var9 = this.mLock;
    int var11 = resolveCallingProfileParentLocked(var8);
    int var13 = getCurrentUserId();
    UserState var16 = getOrCreateUserStateLocked(var8,0);
    UserState var6 = getOrCreateUserStateLocked(param2,param3,1);
    SparseArray var23 = this.mUserStates;
    Object var25 = var23.get(param2);
    UserState var26 = (UserState) var25;
    var33.increasePriority();
    Lcom/android/server/print/UserState var33<PATH_SEP>Object var5 = Preconditions.checkNotNull(param2);{Object var5 = Preconditions.checkNotNull(param2);};
    PrinterId var6 = (PrinterId) var5;
    int var8 = resolveCallingUserEnforcingPermissions(param3);
    Object var9 = this.mLock;
    int var11 = resolveCallingProfileParentLocked(var8);
    int var13 = getCurrentUserId();
    UserState var16 = getOrCreateUserStateLocked(var8,0);
    long var18 = Binder.clearCallingIdentity();
    var16.startPrinterStateTracking(var6);
    Object var3 = this.mLock;
    throwIfDestroyedLocked();
    ArrayMap var5 = this.mActiveServices;
    boolean var7 = var5.isEmpty();
    UserState$PrinterDiscoverySessionMediator var9 = this.mPrinterDiscoverySession;
    UserState$PrinterDiscoverySessionMediator var10 = this.mPrinterDiscoverySession;
    var10.startPrinterStateTrackingLocked(param2);
    boolean var3 = this.mIsDestroyed;
    List var5 = this.mStartedPrinterDiscoveryTokens;
    boolean var7 = var5.isEmpty();
    List var8 = this.mStateTrackedPrinters;
    boolean var10 = var8.contains(param2);
    List var11 = this.mStateTrackedPrinters;
    boolean var13 = var11.add(param2);
    UserState var14 = this.this$0;
    ArrayMap var16 = UserState.access$600(var14);{ArrayMap var16 = UserState.access$600(var14);};
    ComponentName var18 = getServiceName();
    Object var20 = var16.get(var18);
    RemotePrintService var21 = (RemotePrintService) var20;
    Handler var23 = Handler.getMain();
    -$$Lambda$UserState$PrinterDiscoverySessionMediator$iQrjLK8luujjjp1uW3VGCsAZK_g var24 = INSTANCE;
    Message var26 = PooledLambda.obtainMessage(var24,this,var21,param2);
    boolean var28 = var23.sendMessage(var26);<PATH_SEP>Object var5 = Preconditions.checkNotNull(param2);{Object var5 = Preconditions.checkNotNull(param2);};
    PrinterId var6 = (PrinterId) var5;
    int var8 = resolveCallingUserEnforcingPermissions(param3);
    Object var9 = this.mLock;
    int var11 = resolveCallingProfileParentLocked(var8);
    int var13 = getCurrentUserId();
    UserState var16 = getOrCreateUserStateLocked(var8,0);
    long var18 = Binder.clearCallingIdentity();
    var16.startPrinterStateTracking(var6);
    Object var3 = this.mLock;
    throwIfDestroyedLocked();
    ArrayMap var5 = this.mActiveServices;
    boolean var7 = var5.isEmpty();
}