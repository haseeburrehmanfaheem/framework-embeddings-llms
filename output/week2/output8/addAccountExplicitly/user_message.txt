// API: addAccountExplicitly
// Service: AccountManagerService_4

public void addAccountExplicitly() {
    boolean var7 = addAccountExplicitlyWithVisibility(param2,param3,param4,0);
    Bundle var8 = Bundle.setDefusable(param4,1);
    int var10 = Binder.getCallingUid();
    int var12 = UserHandle.getCallingUserId();
    int var34 = Binder.getCallingPid();
    Object var46 = Preconditions.checkNotNull(param2,account cannot be null);{Object var46 = Preconditions.checkNotNull(param2,account cannot be null);};
    String var47 = param2.type;
    boolean var49 = isAccountManagedByCaller(var47,var10,var12);{boolean var49 = isAccountManagedByCaller(var47,var10,var12);};
    long var60 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var62 = getUserAccounts(var12);
    boolean var64 = addAccountInternal(var62,param2,param3,param4,var10,param5);
    Bundle var10 = Bundle.setDefusable(param5,1);
    int var13 = AccountManagerService$UserAccounts.access$800(param2);{int var13 = AccountManagerService$UserAccounts.access$800(param2);};
    Object var16 = param2.dbLock;
    Object var17 = param2.cacheLock;
    AccountsDb var18 = param2.accountsDb;
    var18.beginTransaction();
    AccountsDb var20 = param2.accountsDb;
    long var22 = var20.findCeAccountId(param3);
    var24 = var22 lt 0;
    AccountsDb var25 = param2.accountsDb;
    long var27 = var25.insertCeAccount(param3,param4);
    var28 = var27 lt 0;
    String var160 = toSafeString();
    AccountsDb var182 = param2.accountsDb;
    var182.endTransaction();
    boolean 0<PATH_SEP>boolean var7 = addAccountExplicitlyWithVisibility(param2,param3,param4,0);
    Bundle var8 = Bundle.setDefusable(param4,1);
    int var10 = Binder.getCallingUid();
    int var12 = UserHandle.getCallingUserId();
    int var34 = Binder.getCallingPid();
    Object var46 = Preconditions.checkNotNull(param2,account cannot be null);{Object var46 = Preconditions.checkNotNull(param2,account cannot be null);};
    String var47 = param2.type;
    boolean var49 = isAccountManagedByCaller(var47,var10,var12);{boolean var49 = isAccountManagedByCaller(var47,var10,var12);};
    long var60 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var62 = getUserAccounts(var12);
    boolean var64 = addAccountInternal(var62,param2,param3,param4,var10,param5);
    Bundle var10 = Bundle.setDefusable(param5,1);
    int var13 = AccountManagerService$UserAccounts.access$800(param2);{int var13 = AccountManagerService$UserAccounts.access$800(param2);};
    Object var16 = param2.dbLock;
    Object var17 = param2.cacheLock;
    AccountsDb var18 = param2.accountsDb;
    var18.beginTransaction();
    AccountsDb var20 = param2.accountsDb;
    long var22 = var20.findCeAccountId(param3);
    var24 = var22 lt 0;
    AccountsDb var25 = param2.accountsDb;
    long var27 = var25.insertCeAccount(param3,param4);
    var28 = var27 lt 0;
    AccountsDb var29 = param2.accountsDb;
    long var31 = var29.insertDeAccount(param3,var27);
    AccountsDb$DeDatabaseHelper var4 = this.mDeDatabase;
    SQLiteDatabase var6 = var4.getWritableDatabase();
    ContentValues var7 = new ContentValues();
    Long var10 = Long.valueOf(param3);
    var7.put(_id,var10);
    String var13 = param2.name;
    var7.put(name,var13);
    String var16 = param2.type;
    var7.put(type,var16);
    long var20 = System.currentTimeMillis();
    Long var22 = Long.valueOf(var20);
    var7.put(last_password_entry_time_millis_epoch,var22);<PATH_SEP>boolean var7 = addAccountExplicitlyWithVisibility(param2,param3,param4,0);
    Bundle var8 = Bundle.setDefusable(param4,1);
    int var10 = Binder.getCallingUid();
    int var12 = UserHandle.getCallingUserId();
    int var34 = Binder.getCallingPid();
    Object var46 = Preconditions.checkNotNull(param2,account cannot be null);{Object var46 = Preconditions.checkNotNull(param2,account cannot be null);};
    String var47 = param2.type;
    boolean var49 = isAccountManagedByCaller(var47,var10,var12);{boolean var49 = isAccountManagedByCaller(var47,var10,var12);};
    long var60 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var62 = getUserAccounts(var12);
    boolean var64 = addAccountInternal(var62,param2,param3,param4,var10,param5);
    Bundle var10 = Bundle.setDefusable(param5,1);
    int var13 = AccountManagerService$UserAccounts.access$800(param2);{int var13 = AccountManagerService$UserAccounts.access$800(param2);};
    Object var16 = param2.dbLock;
    Object var17 = param2.cacheLock;
    AccountsDb var18 = param2.accountsDb;
    var18.beginTransaction();
    AccountsDb var20 = param2.accountsDb;
    long var22 = var20.findCeAccountId(param3);
    var24 = var22 lt 0;
    AccountsDb var25 = param2.accountsDb;
    long var27 = var25.insertCeAccount(param3,param4);
    var28 = var27 lt 0;
    AccountsDb var29 = param2.accountsDb;
    long var31 = var29.insertDeAccount(param3,var27);
    var32 = var31 lt 0;
    Set var34 = keySet();
    Iterator var36 = var34.iterator();
    Object var40 = var36.next();
    String var41 = (String) var40;
    String var43 = getString(var41);
    AccountsDb var44 = param2.accountsDb;
    long var46 = var44.insertExtra(var27,var41,var43);
    AccountsDb$DeDatabaseHelper var5 = this.mDeDatabase;
    SQLiteDatabase var7 = var5.getWritableDatabaseUserIsUnlocked();
    ContentValues var8 = new ContentValues();
    var8.put(key,param3);<PATH_SEP>boolean var7 = addAccountExplicitlyWithVisibility(param2,param3,param4,0);
    Bundle var8 = Bundle.setDefusable(param4,1);
    int var10 = Binder.getCallingUid();
    int var12 = UserHandle.getCallingUserId();
    int var34 = Binder.getCallingPid();
    Object var46 = Preconditions.checkNotNull(param2,account cannot be null);{Object var46 = Preconditions.checkNotNull(param2,account cannot be null);};
    String var47 = param2.type;
    boolean var49 = isAccountManagedByCaller(var47,var10,var12);{boolean var49 = isAccountManagedByCaller(var47,var10,var12);};
    long var60 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var62 = getUserAccounts(var12);
    boolean var64 = addAccountInternal(var62,param2,param3,param4,var10,param5);
    Bundle var10 = Bundle.setDefusable(param5,1);
    int var13 = AccountManagerService$UserAccounts.access$800(param2);{int var13 = AccountManagerService$UserAccounts.access$800(param2);};
    Object var16 = param2.dbLock;
    Object var17 = param2.cacheLock;
    AccountsDb var18 = param2.accountsDb;
    var18.beginTransaction();
    AccountsDb var20 = param2.accountsDb;
    long var22 = var20.findCeAccountId(param3);
    var24 = var22 lt 0;
    AccountsDb var25 = param2.accountsDb;
    long var27 = var25.insertCeAccount(param3,param4);
    var28 = var27 lt 0;
    AccountsDb var29 = param2.accountsDb;
    long var31 = var29.insertDeAccount(param3,var27);
    AccountsDb$DeDatabaseHelper var4 = this.mDeDatabase;
    SQLiteDatabase var6 = var4.getWritableDatabase();
    ContentValues var7 = new ContentValues();
    Long var10 = Long.valueOf(param3);
    var7.put(_id,var10);
    String var13 = param2.name;
    var7.put(name,var13);
    String var16 = param2.type;
    var7.put(type,var16);
    long var20 = System.currentTimeMillis();
    Long var22 = Long.valueOf(var20);
    var7.put(last_password_entry_time_millis_epoch,var22);
    long var27 = var6.insert(accounts,name,var7);
    long var27;
}