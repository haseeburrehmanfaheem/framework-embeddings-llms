// API: getAccountsByFeatures
// Service: AccountManagerService_5

public void getAccountsByFeatures() {
    int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    int var60 = UserHandle.getCallingUserId();
    List var62 = getTypesVisibleToCaller(var7,var60,param5);
    boolean var64 = var62.contains(param3);
    long var67 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var69 = getUserAccounts(var60);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    File var3 = new File();
    File var5 = Environment.getDataSystemCeDirectory(param2);
    String var9 = var3.getPath();
    Ljava/lang/String var9<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    int var60 = UserHandle.getCallingUserId();
    List var62 = getTypesVisibleToCaller(var7,var60,param5);
    boolean var64 = var62.contains(param3);
    long var67 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var69 = getUserAccounts(var60);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    SparseArray var3 = this.mUsers;
    boolean var5 = Thread.holdsLock(var3);
    Preconditions.checkState(var5,mUsers lock must be held);{Preconditions.checkState(var5,mUsers lock must be held);};
    AccountsDb var8 = param2.accountsDb;
    List var10 = var8.findCeAccountsNotInDe();
    boolean var12 = var10.isEmpty();
    int var17 = var10.size();
    int var24 = AccountManagerService$UserAccounts.access$800(param2);{int var24 = AccountManagerService$UserAccounts.access$800(param2);};
    String var35 = DEBUG_ACTION_SYNC_DE_CE_ACCOUNTS;
    Iterator var39 = var10.iterator();<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    int var60 = UserHandle.getCallingUserId();
    List var62 = getTypesVisibleToCaller(var7,var60,param5);
    boolean var64 = var62.contains(param3);
    long var67 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var69 = getUserAccounts(var60);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    File var9 = new File();
    AccountManagerService$Injector var10 = this.mInjector;
    String var12 = var10.getPreNDatabaseName(param2);
    File var14 = new File();
    AccountManagerService$Injector var15 = this.mInjector;
    String var17 = var15.getDeDatabaseName(param2);
    AccountManagerService$UserAccounts var19 = new AccountManagerService$UserAccounts();
    Context var20 = this.mContext;
    SparseArray var22 = this.mUsers;
    var22.append(param2,var19);
    purgeOldGrants(var19);
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Object var51 = var26.dbLock;
    Object var52 = var26.cacheLock;
    File var53 = new File();
    AccountManagerService$Injector var54 = this.mInjector;
    String var56 = var54.getCeDatabaseName(param2);
    AccountsDb var58 = var26.accountsDb;
    var58.attachCeDatabase(var53);
    syncDeCeAccountsLocked(var26);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26<PATH_SEP>int var7 = Binder.getCallingUid();
    AppOpsManager var8 = this.mAppOpsManager;
    String var31 = Arrays.toString(param4);
    int var43 = Binder.getCallingPid();
    int var60 = UserHandle.getCallingUserId();
    List var62 = getTypesVisibleToCaller(var7,var60,param5);
    boolean var64 = var62.contains(param3);
    long var67 = AccountManagerService.clearCallingIdentity();
    AccountManagerService$UserAccounts var69 = getUserAccounts(var60);
    AccountManagerService$UserAccounts var4 = getUserAccountsNotChecked(param2);
    SparseArray var3 = this.mUsers;
    SparseArray var4 = this.mUsers;
    Object var6 = var4.get(param2);
    AccountManagerService$UserAccounts var7 = (AccountManagerService$UserAccounts) var6;
    AccountsDb var30 = var26.accountsDb;
    boolean var32 = var30.isCeDatabaseAttached();
    SparseBooleanArray var33 = this.mLocalUnlockedUsers;
    boolean var35 = var33.get(param2);
    Lcom/android/server/accounts/AccountManagerService$UserAccounts var26;
}