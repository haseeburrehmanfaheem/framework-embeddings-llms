// API: setComponentEnabledSetting
// Service: PackageManagerService_5

public void setComponentEnabledSetting() {
    UserManagerService var6 = sUserManager;
    boolean var8 = var6.exists(param5);
    String var11 = getPackageName();
    String var13 = getClassName();
    setEnabledSetting(var11,var13,param3,param4,param5,0);
    int var25 = Binder.getCallingUid();
    PermissionManagerServiceInternal var35 = this.mPermissionManager;
    String var41 = getInstantAppPackageName(var25);
    ArrayMap var44 = this.mPackages;
    Settings var45 = this.mSettings;
    ArrayMap var46 = var45.mPackages;
    Object var48 = var46.get(param2);
    PackageSetting var49 = (PackageSetting) var48;
    int var54 = var49.appId;
    boolean var56 = UserHandle.isSameApp(var25,var54);
    boolean var58 = filterAppAccessLPr(var49,var25,param6);
    ProtectedPackages var59 = this.mProtectedPackages;
    String var76 = APP_DETAILS_ACTIVITY_CLASS_NAME;
    boolean var78 = var76.equals(param3);
    ArrayMap var82 = this.mPackages;
    int var84 = var49.pkgFlags;
    var86 = var84 and 256;
    int var88 = var49.getEnabled(param6);
    ArrayMap var199 = this.mPackages;
    int var201 = var49.getEnabled(param6);
    PackageParser$Package var202 = var49.pkg;
    boolean var203 = var202.isStub;
    boolean var205 = var202.isSystem();
    boolean var214 = enableCompressedPackage(var202);
    int var3 = this.mDefParseFlags;
    var5 = var3 or -2147483648;
    var7 = var5 or 64;
    Object var8 = this.mInstallLock;
    String var10 = param2.packageName;
    PackageManagerService$PackageFreezer var13 = freezePackage(var10,setEnabledSetting);
    PackageParser$Package var15 = installStubPackageLI(param2,var7,0);
    ArrayMap var16 = this.mPackages;
    prepareAppDataAfterInstallLIF(var15);
    ArrayMap var18 = this.mPackages;
    updateSharedLibrariesLocked(var15,0,var18);
    PermissionManagerServiceInternal var28 = this.mPermissionManager;
    String var29 = var15.packageName;
    ArrayMap var31 = this.mPackages;
    Collection var33 = var31.values();
    PermissionManagerServiceInternal$PermissionCallback var34 = this.mPermissionCallback;
    var28.updatePermissions(var29,var15,1,var33,var34);
    Settings var36 = this.mSettings;
    var36.writeLPr();
    long var12 = SystemClock.uptimeMillis();
    File var13 = this.mSettingsFilename;
    boolean var15 = var13.exists();
    File var18 = this.mBackupSettingsFilename;
    boolean var20 = var18.exists();
    File var27 = this.mSettingsFilename;
    File var28 = this.mBackupSettingsFilename;
    boolean var30 = var27.renameTo(var28);
    ArrayList var34 = this.mPastSignatures;
    var34.clear();
    FileOutputStream var36 = new FileOutputStream();
    File var37 = this.mSettingsFilename;
    BufferedOutputStream var40 = new BufferedOutputStream();
    FastXmlSerializer var42 = new FastXmlSerializer();
    Charset var44 = UTF_8;
    String var46 = var44.name();
    var42.setOutput(var40,var46);
    Boolean var51 = Boolean.valueOf(1);
    var42.startDocument(0,var51);
    var42.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var56 = var42.startTag(0,packages);
    ArrayMap var57 = this.mVersion;
    int var59 = var57.size();
    ArrayMap var60 = this.mVersion;
    Object var62 = var60.keyAt(var85);
    String var63 = (String) var62;
    ArrayMap var64 = this.mVersion;
    Object var66 = var64.valueAt(var85);
    Settings$VersionInfo var67 = (Settings$VersionInfo) var66;
    XmlSerializer var69 = var42.startTag(0,version);
    XmlUtils.writeStringAttribute(var42,volumeUuid,var63);
    int var73 = var67.sdkVersion;
    XmlUtils.writeIntAttribute(var42,sdkVersion,var73);
    int var76 = var67.databaseVersion;
    XmlUtils.writeIntAttribute(var42,databaseVersion,var76);<PATH_SEP>UserManagerService var6 = sUserManager;
    boolean var8 = var6.exists(param5);
    String var11 = getPackageName();
    String var13 = getClassName();
    setEnabledSetting(var11,var13,param3,param4,param5,0);
    int var25 = Binder.getCallingUid();
    PermissionManagerServiceInternal var35 = this.mPermissionManager;
    String var41 = getInstantAppPackageName(var25);
    ArrayMap var44 = this.mPackages;
    Settings var45 = this.mSettings;
    ArrayMap var46 = var45.mPackages;
    Object var48 = var46.get(param2);
    PackageSetting var49 = (PackageSetting) var48;
    int var54 = var49.appId;
    boolean var56 = UserHandle.isSameApp(var25,var54);
    boolean var58 = filterAppAccessLPr(var49,var25,param6);
    ProtectedPackages var59 = this.mProtectedPackages;
    String var76 = APP_DETAILS_ACTIVITY_CLASS_NAME;
    boolean var78 = var76.equals(param3);
    ArrayMap var82 = this.mPackages;
    int var84 = var49.pkgFlags;
    var86 = var84 and 256;
    int var88 = var49.getEnabled(param6);
    ArrayMap var199 = this.mPackages;
    int var201 = var49.getEnabled(param6);
    PackageParser$Package var202 = var49.pkg;
    boolean var203 = var202.isStub;
    boolean var205 = var202.isSystem();
    boolean var214 = enableCompressedPackage(var202);
    int var3 = this.mDefParseFlags;
    var5 = var3 or -2147483648;
    var7 = var5 or 64;
    Object var8 = this.mInstallLock;
    String var10 = param2.packageName;
    PackageManagerService$PackageFreezer var13 = freezePackage(var10,setEnabledSetting);
    PackageParser$Package var15 = installStubPackageLI(param2,var7,0);
    ArrayMap var16 = this.mPackages;
    prepareAppDataAfterInstallLIF(var15);
    ArrayMap var18 = this.mPackages;
    updateSharedLibrariesLocked(var15,0,var18);
    PermissionManagerServiceInternal var28 = this.mPermissionManager;
    String var29 = var15.packageName;
    ArrayMap var31 = this.mPackages;
    Collection var33 = var31.values();
    PermissionManagerServiceInternal$PermissionCallback var34 = this.mPermissionCallback;
    var28.updatePermissions(var29,var15,1,var33,var34);
    Settings var36 = this.mSettings;
    var36.writeLPr();
    long var12 = SystemClock.uptimeMillis();
    File var13 = this.mSettingsFilename;
    boolean var15 = var13.exists();
    File var18 = this.mBackupSettingsFilename;
    boolean var20 = var18.exists();
    File var27 = this.mSettingsFilename;
    File var28 = this.mBackupSettingsFilename;
    boolean var30 = var27.renameTo(var28);
    ArrayList var34 = this.mPastSignatures;
    var34.clear();
    FileOutputStream var36 = new FileOutputStream();
    File var37 = this.mSettingsFilename;
    BufferedOutputStream var40 = new BufferedOutputStream();
    FastXmlSerializer var42 = new FastXmlSerializer();
    Charset var44 = UTF_8;
    String var46 = var44.name();
    var42.setOutput(var40,var46);
    Boolean var51 = Boolean.valueOf(1);
    var42.startDocument(0,var51);
    var42.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var56 = var42.startTag(0,packages);
    ArrayMap var57 = this.mVersion;
    int var59 = var57.size();
    VerifierDeviceIdentity var89 = this.mVerifierDeviceIdentity;
    XmlSerializer var91 = var42.startTag(0,verifier);
    VerifierDeviceIdentity var93 = this.mVerifierDeviceIdentity;
    String var95 = var93.toString();
    XmlSerializer var97 = var42.attribute(0,device,var95);
    XmlSerializer var99 = var42.endTag(0,verifier);
    Boolean var104 = this.mReadExternalStorageEnforced;
    XmlSerializer var106 = var42.startTag(0,read-external-storage);
    Boolean var108 = this.mReadExternalStorageEnforced;
    boolean var110 = var108.booleanValue();
    XmlSerializer var115 = var42.attribute(0,enforcement,var113);
    XmlSerializer var117 = var42.endTag(0,read-external-storage);
    XmlSerializer var124 = var42.startTag(0,permission-trees);
    PermissionSettings var125 = this.mPermissions;
    var125.writePermissionTrees(var42);
    XmlSerializer var128 = var42.endTag(0,permission-trees);
    XmlSerializer var130 = var42.startTag(0,permissions);
    PermissionSettings var131 = this.mPermissions;
    var131.writePermissions(var42);
    XmlSerializer var134 = var42.endTag(0,permissions);
    ArrayMap var135 = this.mPackages;
    Collection var137 = var135.values();
    Iterator var139 = var137.iterator();
    ArrayMap var149 = this.mDisabledSysPackages;
    Collection var151 = var149.values();
    Iterator var153 = var151.iterator();
    ArrayMap var163 = this.mSharedUsers;
    Collection var165 = var163.values();
    Iterator var167 = var165.iterator();
    ArrayMap var202 = this.mRenamedPackages;
    int var204 = var202.size();
    ArrayMap var205 = this.mRenamedPackages;
    Set var207 = var205.entrySet();
    Iterator var209 = var207.iterator();
    ArrayMap var244 = this.mRestoredIntentFilterVerifications;
    int var246 = var244.size();
    XmlSerializer var248 = var42.startTag(0,restored-ivi);
    XmlSerializer var260 = var42.endTag(0,restored-ivi);
    KeySetManagerService var265 = this.mKeySetManagerService;
    var265.writeKeySetManagerServiceLPr(var42);
    XmlSerializer var268 = var42.endTag(0,packages);
    var42.endDocument();
    var40.flush();
    boolean var272 = FileUtils.sync(var36);
    var40.close();<PATH_SEP>UserManagerService var6 = sUserManager;
    boolean var8 = var6.exists(param5);
    String var11 = getPackageName();
    String var13 = getClassName();
    setEnabledSetting(var11,var13,param3,param4,param5,0);
    int var25 = Binder.getCallingUid();
    PermissionManagerServiceInternal var35 = this.mPermissionManager;
    String var41 = getInstantAppPackageName(var25);
    ArrayMap var44 = this.mPackages;
    Settings var45 = this.mSettings;
    ArrayMap var46 = var45.mPackages;
    Object var48 = var46.get(param2);
    PackageSetting var49 = (PackageSetting) var48;
    int var54 = var49.appId;
    boolean var56 = UserHandle.isSameApp(var25,var54);
    boolean var58 = filterAppAccessLPr(var49,var25,param6);
    ProtectedPackages var59 = this.mProtectedPackages;
    String var76 = APP_DETAILS_ACTIVITY_CLASS_NAME;
    boolean var78 = var76.equals(param3);
    ArrayMap var82 = this.mPackages;
    int var84 = var49.pkgFlags;
    var86 = var84 and 256;
    int var88 = var49.getEnabled(param6);
    ArrayMap var199 = this.mPackages;
    int var201 = var49.getEnabled(param6);
    PackageParser$Package var202 = var49.pkg;
    boolean var203 = var202.isStub;
    boolean var205 = var202.isSystem();
    boolean var214 = enableCompressedPackage(var202);
    int var3 = this.mDefParseFlags;
    var5 = var3 or -2147483648;
    var7 = var5 or 64;
    Object var8 = this.mInstallLock;
    String var10 = param2.packageName;
    PackageManagerService$PackageFreezer var13 = freezePackage(var10,setEnabledSetting);
    PackageParser$Package var15 = installStubPackageLI(param2,var7,0);
    ArrayMap var16 = this.mPackages;
    prepareAppDataAfterInstallLIF(var15);
    ArrayMap var18 = this.mPackages;
    updateSharedLibrariesLocked(var15,0,var18);
    ArrayMap var5 = this.mSharedLibraries;
    ArrayList var8 = PackageManagerService.collectSharedLibraryInfos(param2,param4,var5,0);
    executeSharedLibrariesUpdateLPr(param2,param3,var8);<PATH_SEP>UserManagerService var6 = sUserManager;
    boolean var8 = var6.exists(param5);
    String var11 = getPackageName();
    String var13 = getClassName();
    setEnabledSetting(var11,var13,param3,param4,param5,0);
    int var25 = Binder.getCallingUid();
    PermissionManagerServiceInternal var35 = this.mPermissionManager;
    String var41 = getInstantAppPackageName(var25);
    ArrayMap var44 = this.mPackages;
    Settings var45 = this.mSettings;
    ArrayMap var46 = var45.mPackages;
    Object var48 = var46.get(param2);
    PackageSetting var49 = (PackageSetting) var48;
    int var54 = var49.appId;
    boolean var56 = UserHandle.isSameApp(var25,var54);
    boolean var58 = filterAppAccessLPr(var49,var25,param6);
    ProtectedPackages var59 = this.mProtectedPackages;
    String var76 = APP_DETAILS_ACTIVITY_CLASS_NAME;
    boolean var78 = var76.equals(param3);
    ArrayMap var82 = this.mPackages;
    int var84 = var49.pkgFlags;
    var86 = var84 and 256;
    int var88 = var49.getEnabled(param6);
    ArrayMap var199 = this.mPackages;
    int var201 = var49.getEnabled(param6);
    PackageParser$Package var202 = var49.pkg;
    boolean var203 = var202.isStub;
    boolean var205 = var202.isSystem();
    boolean var214 = enableCompressedPackage(var202);
    int var3 = this.mDefParseFlags;
    var5 = var3 or -2147483648;
    var7 = var5 or 64;
    Object var8 = this.mInstallLock;
    String var10 = param2.packageName;
    PackageManagerService$PackageFreezer var13 = freezePackage(var10,setEnabledSetting);
    PackageParser$Package var15 = installStubPackageLI(param2,var7,0);
    ArrayMap var16 = this.mPackages;
    prepareAppDataAfterInstallLIF(var15);
    ArrayMap var18 = this.mPackages;
    updateSharedLibrariesLocked(var15,0,var18);
    PermissionManagerServiceInternal var28 = this.mPermissionManager;
    String var29 = var15.packageName;
    ArrayMap var31 = this.mPackages;
    Collection var33 = var31.values();
    PermissionManagerServiceInternal$PermissionCallback var34 = this.mPermissionCallback;
    var28.updatePermissions(var29,var15,1,var33,var34);
    Settings var36 = this.mSettings;
    var36.writeLPr();
    long var12 = SystemClock.uptimeMillis();
    File var13 = this.mSettingsFilename;
    boolean var15 = var13.exists();
    File var18 = this.mBackupSettingsFilename;
    boolean var20 = var18.exists();
    File var27 = this.mSettingsFilename;
    File var28 = this.mBackupSettingsFilename;
    boolean var30 = var27.renameTo(var28);
    ArrayList var34 = this.mPastSignatures;
    var34.clear();
    FileOutputStream var36 = new FileOutputStream();
    File var37 = this.mSettingsFilename;
    BufferedOutputStream var40 = new BufferedOutputStream();
    FastXmlSerializer var42 = new FastXmlSerializer();
    Charset var44 = UTF_8;
    String var46 = var44.name();
    var42.setOutput(var40,var46);
    Boolean var51 = Boolean.valueOf(1);
    var42.startDocument(0,var51);
    var42.setFeature(http://xmlpull.org/v1/doc/features.html#indent-output,1);
    XmlSerializer var56 = var42.startTag(0,packages);
    ArrayMap var57 = this.mVersion;
    int var59 = var57.size();
    VerifierDeviceIdentity var89 = this.mVerifierDeviceIdentity;
    XmlSerializer var91 = var42.startTag(0,verifier);
    VerifierDeviceIdentity var93 = this.mVerifierDeviceIdentity;
    String var95 = var93.toString();
    XmlSerializer var97 = var42.attribute(0,device,var95);
    XmlSerializer var99 = var42.endTag(0,verifier);
    Boolean var104 = this.mReadExternalStorageEnforced;
    XmlSerializer var106 = var42.startTag(0,read-external-storage);
    Boolean var108 = this.mReadExternalStorageEnforced;
    boolean var110 = var108.booleanValue();
    XmlSerializer var115 = var42.attribute(0,enforcement,var113);
    XmlSerializer var117 = var42.endTag(0,read-external-storage);
    XmlSerializer var124 = var42.startTag(0,permission-trees);
    PermissionSettings var125 = this.mPermissions;
    var125.writePermissionTrees(var42);
    XmlSerializer var128 = var42.endTag(0,permission-trees);
    XmlSerializer var130 = var42.startTag(0,permissions);
    PermissionSettings var131 = this.mPermissions;
    var131.writePermissions(var42);
    XmlSerializer var134 = var42.endTag(0,permissions);
    ArrayMap var135 = this.mPackages;
    Collection var137 = var135.values();
    Iterator var139 = var137.iterator();
    ArrayMap var149 = this.mDisabledSysPackages;
    Collection var151 = var149.values();
    Iterator var153 = var151.iterator();
    ArrayMap var163 = this.mSharedUsers;
    Collection var165 = var163.values();
    Iterator var167 = var165.iterator();
    Object var171 = var167.next();
    SharedUserSetting var172 = (SharedUserSetting) var171;
    XmlSerializer var174 = var42.startTag(0,shared-user);
    String var176 = var172.name;
    XmlSerializer var178 = var42.attribute(0,name,var176);
    int var180 = var172.userId;
    String var182 = Integer.toString(var180);
    XmlSerializer var184 = var42.attribute(0,userId,var182);
    PackageSignatures var185 = var172.signatures;
    ArrayList var187 = this.mPastSignatures;
    var185.writeXml(var42,sigs,var187);
    PermissionsState var190 = var172.getPermissionsState();
    List var192 = var190.getInstallPermissionStates();
    writePermissionsLPr(var42,var192);
}