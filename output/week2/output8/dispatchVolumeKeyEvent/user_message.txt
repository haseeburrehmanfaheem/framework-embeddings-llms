// API: dispatchVolumeKeyEvent
// Service: MediaSessionService$SessionManagerImpl_7

public void dispatchVolumeKeyEvent() {
    int var10 = getKeyCode();
    int var13 = getKeyCode();
    int var16 = getKeyCode();
    int var23 = Binder.getCallingPid();
    int var25 = Binder.getCallingUid();
    long var27 = Binder.clearCallingIdentity();
    MediaSessionService var75 = this.this$0;
    Object var77 = MediaSessionService.access$1200(var75);{Object var77 = MediaSessionService.access$1200(var75);};
    MediaSessionService var78 = this.this$0;
    boolean var80 = MediaSessionService.access$1500(var78);{boolean var80 = MediaSessionService.access$1500(var78);};
    MediaSessionService var81 = this.this$0;
    MediaSessionService$FullUserRecord var83 = MediaSessionService.access$1400(var81);{MediaSessionService$FullUserRecord var83 = MediaSessionService.access$1400(var81);};
    IOnVolumeKeyLongPressListener var85 = MediaSessionService$FullUserRecord.access$500(var83);{IOnVolumeKeyLongPressListener var85 = MediaSessionService$FullUserRecord.access$500(var83);};
    dispatchVolumeKeyEventLocked(param2,param3,var23,var25,param4,param5,param6,param7);
    int var11 = getAction();
    landroid/view/keyevent;
    getaction()i >(3) { CONDITIONAL BRANCH INSTRUCTION };
    int var16 = getAction();
    landroid/view/keyevent;
    getaction()i >(3) { CONDITIONAL BRANCH INSTRUCTION };
    int var19 = getKeyCode();
    var33 = 4096 or 512;
    dispatchAdjustVolumeLocked(param2,param3,param4,param5,param6,param8,var39,var34);
    MediaSessionService var10 = this.this$0;
    boolean var12 = MediaSessionService.access$1500(var10);{boolean var12 = MediaSessionService.access$1500(var10);};
    MediaSessionService var21 = this.this$0;
    MediaSessionRecord var23 = MediaSessionService.access$1600(var21);{MediaSessionRecord var23 = MediaSessionService.access$1600(var21);};
    boolean var28 = isValidLocalStreamType(param7);{boolean var28 = isValidLocalStreamType(param7);};
    boolean var30 = AudioSystem.isStreamActive(param7,0);
    var24.adjustVolume(param2,param3,param4,param5,0,param6,param8,param9,1);
    var12 = param9 and 4;
    boolean var14 = isPlaybackActive();
    boolean var18 = hasFlag(65536);
    var23 = param9 and -5;
    int var28 = this.mVolumeType;
    int var30 = this.mVolumeControlType;
    boolean var36 = DEBUG;
    MediaSessionRecord$SessionCb var62 = this.mSessionCb;
    var62.adjustVolume(param2,param4,param5,param6,param7,param8);
    int var64 = this.mOptimisticVolume;
    int var65 = this.mCurrentVolume;
    var67 = var66 add param8;
    this.mOptimisticVolume = var67;
    int var68 = this.mOptimisticVolume;
    int var69 = this.mMaxVolume;
    int var71 = Math.min(var68,var69);
    int var73 = Math.max(0,var71);
    this.mOptimisticVolume = var73;
    MediaSessionRecord$MessageHandler var74 = this.mHandler;
    Runnable var75 = this.mClearOptimisticVolumeRunnable;
    var74.removeCallbacks(var75);
    MediaSessionRecord$MessageHandler var77 = this.mHandler;
    Runnable var78 = this.mClearOptimisticVolumeRunnable;
    boolean var81 = var77.postDelayed(var78,1000);
    int var82 = this.mOptimisticVolume;
    pushVolumeUpdate();
    MediaSessionService var85 = this.mService;
    var85.notifyRemoteVolumeChanged(var25,this);
}