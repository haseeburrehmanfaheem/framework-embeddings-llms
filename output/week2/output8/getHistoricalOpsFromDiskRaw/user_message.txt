// API: getHistoricalOpsFromDiskRaw
// Service: AppOpsService_8

public void getHistoricalOpsFromDiskRaw() {
    AppOpsManager$HistoricalOpsRequest$Builder var9 = new AppOpsManager$HistoricalOpsRequest$Builder();
    AppOpsManager$HistoricalOpsRequest$Builder var12 = var9.setUid(param2);
    AppOpsManager$HistoricalOpsRequest$Builder var14 = var12.setPackageName(param3);
    AppOpsManager$HistoricalOpsRequest$Builder var16 = var14.setOpNames(param4);
    AppOpsManager$HistoricalOpsRequest$Builder var18 = var16.setFlags(param7);
    AppOpsManager$HistoricalOpsRequest var20 = var18.build();
    Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);{Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);};
    Context var24 = this.mContext;
    int var26 = Binder.getCallingPid();
    int var28 = Binder.getCallingUid();
    int var34 = size();
    String var35 = new String(var34);
    Object var37 = toArray(var35);
    String var38 = (String) var37;
    HistoricalRegistry var42 = this.mHistoricalRegistry;
    var42.getHistoricalOpsFromDiskRaw(param2,param3,var39,param5,param6,param7,param8);
    Object var9 = this.mOnDiskLock;
    Object var10 = this.mInMemoryLock;
    boolean var12 = isPersistenceInitializedMLocked();
    String var23 = LOG_TAG;
    Bundle var27 = new Bundle();
    sendResult(var27);<PATH_SEP>AppOpsManager$HistoricalOpsRequest$Builder var9 = new AppOpsManager$HistoricalOpsRequest$Builder();
    AppOpsManager$HistoricalOpsRequest$Builder var12 = var9.setUid(param2);
    AppOpsManager$HistoricalOpsRequest$Builder var14 = var12.setPackageName(param3);
    AppOpsManager$HistoricalOpsRequest$Builder var16 = var14.setOpNames(param4);
    AppOpsManager$HistoricalOpsRequest$Builder var18 = var16.setFlags(param7);
    AppOpsManager$HistoricalOpsRequest var20 = var18.build();
    Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);{Object var23 = Preconditions.checkNotNull(param8,callback cannot be null);};
    Context var24 = this.mContext;
    int var26 = Binder.getCallingPid();
    int var28 = Binder.getCallingUid();
    int var34 = size();
    String var35 = new String(var34);
    Object var37 = toArray(var35);
    String var38 = (String) var37;
    HistoricalRegistry var42 = this.mHistoricalRegistry;
    var42.getHistoricalOpsFromDiskRaw(param2,param3,var39,param5,param6,param7,param8);
    Object var9 = this.mOnDiskLock;
    Object var10 = this.mInMemoryLock;
    boolean var12 = isPersistenceInitializedMLocked();
    AppOpsManager$HistoricalOps var14 = new AppOpsManager$HistoricalOps();
    HistoricalRegistry$Persistence var16 = this.mPersistence;
    HistoricalRegistry$Persistence.access$100(var16,var14,param2,param3,param4,param5,param6,param7);{HistoricalRegistry$Persistence.access$100(var16,var14,param2,param3,param4,param5,param6,param7);};
    Bundle var18 = new Bundle();
    var18.putParcelable(historical_ops,var14);
    sendResult(var18);
}