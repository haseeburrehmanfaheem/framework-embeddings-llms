// API: getIsSyncable
// Service: ContentService_3

public void getIsSyncable() {
    int var5 = UserHandle.getCallingUserId();
    int var7 = getIsSyncableAsUser(param2,param3,var5);
    Context var15 = this.mContext;
    long var20 = ContentService.clearCallingIdentity();
    SyncManager var22 = getSyncManager();
    int var27 = var22.computeSyncable(param2,param4,param3,0);
    int var8 = getIsSyncable(param2,param3,param4);
    String var10 = param2.type;
    SyncAdapterType var12 = SyncAdapterType.newKey(param4,var10);
    SyncAdaptersCache var13 = this.mSyncAdapters;
    RegisteredServicesCache$ServiceInfo var15 = var13.getServiceInfo(var12,param3);
    int var16 = var15.uid;
    ComponentName var17 = var15.componentName;
    String var19 = var17.getPackageName();
    IActivityManager var21 = ActivityManager.getService();
    boolean var23 = var21.isAppStartModeDisabled(var16,var19);<PATH_SEP>int var5 = UserHandle.getCallingUserId();
    int var7 = getIsSyncableAsUser(param2,param3,var5);
    Context var15 = this.mContext;
    long var20 = ContentService.clearCallingIdentity();
    SyncManager var22 = getSyncManager();
    int var27 = var22.computeSyncable(param2,param4,param3,0);
    int var8 = getIsSyncable(param2,param3,param4);
    SyncStorageEngine var5 = this.mSyncStorageEngine;
    int var7 = var5.getIsSyncable(param2,param3,param4);
    Context var8 = this.mContext;
    UserManager var10 = UserManager.get(var8);
    UserInfo var12 = var10.getUserInfo(param3);
    boolean var15 = var12.isRestricted();
    SyncAdaptersCache var16 = this.mSyncAdapters;
    String var17 = param2.type;
    SyncAdapterType var19 = SyncAdapterType.newKey(param4,var17);
    RegisteredServicesCache$ServiceInfo var21 = var16.getServiceInfo(var19,param3);
    IPackageManager var23 = AppGlobals.getPackageManager();
    ComponentName var24 = var21.componentName;
    String var26 = var24.getPackageName();
    PackageInfo var28 = var23.getPackageInfo(var26,0,param3);
    String var30 = var28.restrictedAccountType;
    String var31 = var28.restrictedAccountType;
    String var32 = param2.type;
    boolean var34 = var31.equals(var32);
    int 0<PATH_SEP>int var5 = UserHandle.getCallingUserId();
    int var7 = getIsSyncableAsUser(param2,param3,var5);
    Context var15 = this.mContext;
    long var20 = ContentService.clearCallingIdentity();
    SyncManager var22 = getSyncManager();
    Object var2 = this.mSyncManagerLock;
    SyncManager var3 = this.mSyncManager;
    SyncManager var5 = new SyncManager();
    Context var6 = this.mContext;
    boolean var7 = this.mFactoryTest;
    this.mSyncManager = var5;<PATH_SEP>int var5 = UserHandle.getCallingUserId();
    int var7 = getIsSyncableAsUser(param2,param3,var5);
    Context var15 = this.mContext;
    long var20 = ContentService.clearCallingIdentity();
    SyncManager var22 = getSyncManager();
    int var27 = var22.computeSyncable(param2,param4,param3,0);
    int var8 = getIsSyncable(param2,param3,param4);
    String var10 = param2.type;
    SyncAdapterType var12 = SyncAdapterType.newKey(param4,var10);
    SyncAdaptersCache var13 = this.mSyncAdapters;
    RegisteredServicesCache$ServiceInfo var15 = var13.getServiceInfo(var12,param3);
    int var16 = var15.uid;
    ComponentName var17 = var15.componentName;
    String var19 = var17.getPackageName();
    IActivityManager var21 = ActivityManager.getService();
    boolean var23 = var21.isAppStartModeDisabled(var16,var19);
    ActivityManagerService.boostPriorityForLockedSection();
    int var9 = getAppStartModeLocked(param2,param3,0,-1,0,1,0);
    ActivityManagerService.resetPriorityAfterLockedSection();
    boolean var11;
}