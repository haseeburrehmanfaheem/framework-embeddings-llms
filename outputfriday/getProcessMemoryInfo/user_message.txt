// Method: getProcessMemoryInfo
// Service: ActivityManagerService_2

public void getProcessMemoryInfo() {
    long var6 = SystemClock.uptimeMillis();
    ActivityManagerConstants var7 = this.mConstants;
    long var8 = var7.MEMORY_INFO_THROTTLE_TIME;
    var9 = var6 sub var8;
    int var11 = Binder.getCallingPid();
    int var13 = Binder.getCallingUid();
    int var15 = UserHandle.getUserId(var13);
    ActivityTaskManagerInternal var22 = this.mAtmInternal;
    boolean var24 = var22.isGetTasksAllowed(getProcessMemoryInfo,var11,var13);
    25 = arraylength 2;
    Debug$MemoryInfo var26 = new Debug$MemoryInfo(var25);
    27 = arraylength 2;
    var28 = var27 sub 1;
    Debug$MemoryInfo var29 = new Debug$MemoryInfo();
    arraystore 26[153] = 29;
    ActivityManagerService.boostPriorityForLockedSection();
    ActivityManagerService$PidMap var32 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var33 = this.mPidsSelfLocked;
    34 = arrayload 2[153];
    ProcessRecord var36 = var33.get(var34);
    int var37 = var36.setAdj;
    ActivityManagerService.resetPriorityAfterLockedSection();
    int var41 = var36.uid;
    int var44 = UserHandle.getUserId(var42);
    long var48 = var36.lastMemInfoTime;
    var49 = var48 lt var9;
    Debug$MemoryInfo var50 = var36.lastMemInfo;
    long var57 = SystemClock.currentThreadTimeMillis();
    Debug$MemoryInfo var58 = new Debug$MemoryInfo();
    60 = arrayload 2[153];
    Debug.getMemoryInfo(var60,var58);
    long var63 = SystemClock.currentThreadTimeMillis();
    64 = arrayload 26[153];
    var64.set(var58);
    ActivityManagerService.boostPriorityForLockedSection();
    var36.lastMemInfo = var58;
    long var68 = SystemClock.uptimeMillis();
    var36.lastMemInfoTime = var68;
    IApplicationThread var69 = var36.thread;
    int var70 = var36.setAdj;
    ProcessState var71 = var36.baseProcessTracker;
    72 = arrayload 26[153];
    int var74 = var72.getTotalPss();
    75 = conversion(J) 74;
    76 = arrayload 26[153];
    int var78 = var76.getTotalUss();
    79 = conversion(J) 78;
    80 = arrayload 26[153];
    int var82 = var80.getTotalRss();
    83 = conversion(J) 82;
    var85 = var63 sub var57;
    ProcessRecord$PackageList var86 = var36.pkgList;
    ArrayMap var87 = var86.mPkgList;
    var71.addPss(var75,var79,var83,0,4,var85,var87);
    ensureNotDead();{ensureNotDead();};
    int var50 = this.mLastPssState;
    int var51 = this.mCurCombinedState;
    long var53 = SystemClock.uptimeMillis();
    long var54 = this.mLastPssTime;
    var56 = var54 add 30000;
    var57 = var53 lt var56;
    int var62 = this.mCurCombinedState;
    this.mLastPssState = var62;
    long var64 = SystemClock.uptimeMillis();
    this.mLastPssTime = var64;
    int var65 = this.mCurCombinedState;
    ProcessState var67 = this.mCommonProcess;
    PssTable var68 = var67.mPssTable;
    var68.mergeStats(var65,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    13 = conversion(B) 2;
    int var16 = getOrAddKey(var13,10);
    assertConsistency();
    int var6 = binarySearch(param2);
    SparseMappingTable var8 = this.mParent;
    ArrayList var10 = SparseMappingTable.access$100(var8);{ArrayList var10 = SparseMappingTable.access$100(var8);};
    int var12 = var10.size();
    var14 = var12 add -1;
    Object var16 = var10.get(var14);
    [J var17 = ([J) var16;
    SparseMappingTable var18 = this.mParent;
    int var20 = SparseMappingTable.access$200(var18);{int var20 = SparseMappingTable.access$200(var18);};
    var21 = var20 add param3;
    22 = arraylength 17;
    [J var24 = new [J(4096);
    boolean var26 = var10.add(var24);
    var28 = var14 add 1;
    SparseMappingTable var29 = this.mParent;
    int var31 = SparseMappingTable.access$202(var29,0);{int var31 = SparseMappingTable.access$202(var29,0);};
    var39 = var32 SHL 8;
    SparseMappingTable var40 = this.mParent;
    int var42 = SparseMappingTable.access$200(var40);{int var42 = SparseMappingTable.access$200(var40);};
    var44 = var42 SHL 16;
    var45 = var39 or var44;
    var47 = param2 SHL 0;
    var48 = var45 or var47;
    SparseMappingTable var49 = this.mParent;
    int var51 = SparseMappingTable.access$212(var49,param3);{int var51 = SparseMappingTable.access$212(var49,param3);};
    [I var52 = this.mTable;
    int var55 = this.mSize;
    56 = bitnot 6;
    [I var58 = GrowingArrayUtils.insert(var54,var55,var56,var48);
    this.mTable = var58;
    int var59 = this.mSize;
    var60 = var59 add 1;
    this.mSize = var60;<PATH_SEP>long var6 = SystemClock.uptimeMillis();
    ActivityManagerConstants var7 = this.mConstants;
    long var8 = var7.MEMORY_INFO_THROTTLE_TIME;
    var9 = var6 sub var8;
    int var11 = Binder.getCallingPid();
    int var13 = Binder.getCallingUid();
    int var15 = UserHandle.getUserId(var13);
    ActivityTaskManagerInternal var22 = this.mAtmInternal;
    boolean var24 = var22.isGetTasksAllowed(getProcessMemoryInfo,var11,var13);
    25 = arraylength 2;
    Debug$MemoryInfo var26 = new Debug$MemoryInfo(var25);
    27 = arraylength 2;
    var28 = var27 sub 1;
    Debug$MemoryInfo var29 = new Debug$MemoryInfo();
    arraystore 26[153] = 29;
    ActivityManagerService.boostPriorityForLockedSection();
    ActivityManagerService$PidMap var32 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var33 = this.mPidsSelfLocked;
    34 = arrayload 2[153];
    ProcessRecord var36 = var33.get(var34);
    int var37 = var36.setAdj;
    ActivityManagerService.resetPriorityAfterLockedSection();
    int var41 = var36.uid;
    int var44 = UserHandle.getUserId(var42);
    long var48 = var36.lastMemInfoTime;
    var49 = var48 lt var9;
    Debug$MemoryInfo var50 = var36.lastMemInfo;
    long var57 = SystemClock.currentThreadTimeMillis();
    Debug$MemoryInfo var58 = new Debug$MemoryInfo();
    60 = arrayload 2[153];
    Debug.getMemoryInfo(var60,var58);
    long var63 = SystemClock.currentThreadTimeMillis();
    64 = arrayload 26[153];
    var64.set(var58);
    ActivityManagerService.boostPriorityForLockedSection();
    var36.lastMemInfo = var58;
    long var68 = SystemClock.uptimeMillis();
    var36.lastMemInfoTime = var68;
    IApplicationThread var69 = var36.thread;
    int var70 = var36.setAdj;
    ProcessState var71 = var36.baseProcessTracker;
    72 = arrayload 26[153];
    int var74 = var72.getTotalPss();
    75 = conversion(J) 74;
    76 = arrayload 26[153];
    int var78 = var76.getTotalUss();
    79 = conversion(J) 78;
    80 = arrayload 26[153];
    int var82 = var80.getTotalRss();
    83 = conversion(J) 82;
    var85 = var63 sub var57;
    ProcessRecord$PackageList var86 = var36.pkgList;
    ArrayMap var87 = var86.mPkgList;
    var71.addPss(var75,var79,var83,0,4,var85,var87);
    ensureNotDead();{ensureNotDead();};
    int var50 = this.mLastPssState;
    int var51 = this.mCurCombinedState;
    long var53 = SystemClock.uptimeMillis();
    long var54 = this.mLastPssTime;
    var56 = var54 add 30000;
    var57 = var53 lt var56;
    int var62 = this.mCurCombinedState;
    this.mLastPssState = var62;
    long var64 = SystemClock.uptimeMillis();
    this.mLastPssTime = var64;
    int var65 = this.mCurCombinedState;
    ProcessState var67 = this.mCommonProcess;
    PssTable var68 = var67.mPssTable;
    var68.mergeStats(var65,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    ProcessState var70 = this.mCommonProcess;
    [J var71 = var70.mTotalRunningPss;
    PssTable.mergeStats(var71,0,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    ProcessState var73 = this.mCommonProcess;
    boolean var74 = var73.mMultiPackage;
    int var76 = size();
    var77 = var76 sub 1;
    ProcessState var79 = pullFixedProc(param8,var88);
    Object var5 = valueAt(param3);
    ProcessStats$ProcessStateHolder var6 = (ProcessStats$ProcessStateHolder) var5;
    ProcessState var7 = var6.state;
    boolean var8 = this.mDead;
    ProcessState var10 = var7.mCommonProcess;
    String var16 = this.mName;
    String var22 = this.mPackage;
    int var28 = this.mUid;
    ProcessState var34 = this.mCommonProcess;
    String var35 = var34.mName;
    ProcessStats var43 = this.mStats;
    String var44 = var7.mPackage;
    int var45 = var7.mUid;
    long var46 = var7.mVersion;
    String var47 = var7.mName;
    ProcessState var49 = var43.getProcessStateLocked(var44,var45,var46,var47);
    boolean var54 = var50.mMultiPackage;
    ProcessStats var55 = this.mStats;
    ProcessMap var56 = var55.mPackages;
    Object var58 = keyAt(param3);
    String var59 = (String) var58;
    int var60 = var50.mUid;
    Object var62 = var56.get(var59,var60);
    LongSparseArray var63 = (LongSparseArray) var62;
    long var90 = var50.mVersion;
    Object var92 = var63.get(var90);
    ProcessStats$PackageState var93 = (ProcessStats$PackageState) var92;
    String var123 = var50.mName;
    ArrayMap var124 = var93.mProcesses;
    String var125 = var50.mName;
    Object var127 = var124.get(var125);
    ProcessState var128 = (ProcessState) var127;
    var6.state = var128;<PATH_SEP>long var6 = SystemClock.uptimeMillis();
    ActivityManagerConstants var7 = this.mConstants;
    long var8 = var7.MEMORY_INFO_THROTTLE_TIME;
    var9 = var6 sub var8;
    int var11 = Binder.getCallingPid();
    int var13 = Binder.getCallingUid();
    int var15 = UserHandle.getUserId(var13);
    ActivityTaskManagerInternal var22 = this.mAtmInternal;
    boolean var24 = var22.isGetTasksAllowed(getProcessMemoryInfo,var11,var13);
    25 = arraylength 2;
    Debug$MemoryInfo var26 = new Debug$MemoryInfo(var25);
    27 = arraylength 2;
    var28 = var27 sub 1;
    Debug$MemoryInfo var29 = new Debug$MemoryInfo();
    arraystore 26[153] = 29;
    ActivityManagerService.boostPriorityForLockedSection();
    ActivityManagerService$PidMap var32 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var33 = this.mPidsSelfLocked;
    34 = arrayload 2[153];
    ProcessRecord var36 = var33.get(var34);
    int var37 = var36.setAdj;
    ActivityManagerService.resetPriorityAfterLockedSection();
    int var41 = var36.uid;
    int var44 = UserHandle.getUserId(var42);
    long var48 = var36.lastMemInfoTime;
    var49 = var48 lt var9;
    Debug$MemoryInfo var50 = var36.lastMemInfo;
    long var57 = SystemClock.currentThreadTimeMillis();
    Debug$MemoryInfo var58 = new Debug$MemoryInfo();
    60 = arrayload 2[153];
    Debug.getMemoryInfo(var60,var58);
    long var63 = SystemClock.currentThreadTimeMillis();
    64 = arrayload 26[153];
    var64.set(var58);
    ActivityManagerService.boostPriorityForLockedSection();
    var36.lastMemInfo = var58;
    long var68 = SystemClock.uptimeMillis();
    var36.lastMemInfoTime = var68;
    IApplicationThread var69 = var36.thread;
    int var70 = var36.setAdj;
    ProcessState var71 = var36.baseProcessTracker;
    72 = arrayload 26[153];
    int var74 = var72.getTotalPss();
    75 = conversion(J) 74;
    76 = arrayload 26[153];
    int var78 = var76.getTotalUss();
    79 = conversion(J) 78;
    80 = arrayload 26[153];
    int var82 = var80.getTotalRss();
    83 = conversion(J) 82;
    var85 = var63 sub var57;
    ProcessRecord$PackageList var86 = var36.pkgList;
    ArrayMap var87 = var86.mPkgList;
    var71.addPss(var75,var79,var83,0,4,var85,var87);
    ensureNotDead();{ensureNotDead();};
    int var50 = this.mLastPssState;
    int var51 = this.mCurCombinedState;
    long var53 = SystemClock.uptimeMillis();
    long var54 = this.mLastPssTime;
    var56 = var54 add 30000;
    var57 = var53 lt var56;
    int var62 = this.mCurCombinedState;
    this.mLastPssState = var62;
    long var64 = SystemClock.uptimeMillis();
    this.mLastPssTime = var64;
    int var65 = this.mCurCombinedState;
    ProcessState var67 = this.mCommonProcess;
    PssTable var68 = var67.mPssTable;
    var68.mergeStats(var65,1,param2,param2,param2,param3,param3,param3,param4,param4,param4);
    13 = conversion(B) 2;
    int var16 = getOrAddKey(var13,10);
    assertConsistency();
    int var6 = binarySearch(param2);
    SparseMappingTable var8 = this.mParent;
    ArrayList var10 = SparseMappingTable.access$100(var8);{ArrayList var10 = SparseMappingTable.access$100(var8);};
    int var12 = var10.size();
    var14 = var12 add -1;
    Object var16 = var10.get(var14);
    [J var17 = ([J) var16;
    SparseMappingTable var18 = this.mParent;
    int var20 = SparseMappingTable.access$200(var18);{int var20 = SparseMappingTable.access$200(var18);};
    var21 = var20 add param3;
    22 = arraylength 17;
    [J var24 = new [J(4096);
    boolean var26 = var10.add(var24);
    var28 = var14 add 1;
    SparseMappingTable var29 = this.mParent;
    int var31 = SparseMappingTable.access$202(var29,0);{int var31 = SparseMappingTable.access$202(var29,0);};
    var39 = var32 SHL 8;
    SparseMappingTable var40 = this.mParent;
    int var42 = SparseMappingTable.access$200(var40);{int var42 = SparseMappingTable.access$200(var40);};
    var44 = var42 SHL 16;
    var45 = var39 or var44;
    var47 = param2 SHL 0;
    var48 = var45 or var47;
    SparseMappingTable var49 = this.mParent;
    int var51 = SparseMappingTable.access$212(var49,param3);{int var51 = SparseMappingTable.access$212(var49,param3);};
    [I var52 = this.mTable;
    int var55 = this.mSize;
    56 = bitnot 6;
    [I var58 = GrowingArrayUtils.insert(var54,var55,var56,var48);
    this.mTable = var58;
    int var59 = this.mSize;
    var60 = var59 add 1;
    this.mSize = var60;
    int var48<PATH_SEP>long var6 = SystemClock.uptimeMillis();
    ActivityManagerConstants var7 = this.mConstants;
    long var8 = var7.MEMORY_INFO_THROTTLE_TIME;
    var9 = var6 sub var8;
    int var11 = Binder.getCallingPid();
    int var13 = Binder.getCallingUid();
    int var15 = UserHandle.getUserId(var13);
    ActivityTaskManagerInternal var22 = this.mAtmInternal;
    boolean var24 = var22.isGetTasksAllowed(getProcessMemoryInfo,var11,var13);
    25 = arraylength 2;
    Debug$MemoryInfo var26 = new Debug$MemoryInfo(var25);
    27 = arraylength 2;
    var28 = var27 sub 1;
    Debug$MemoryInfo var29 = new Debug$MemoryInfo();
    arraystore 26[153] = 29;
    ActivityManagerService.boostPriorityForLockedSection();
    ActivityManagerService$PidMap var32 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var33 = this.mPidsSelfLocked;
    34 = arrayload 2[153];
    ProcessRecord var36 = var33.get(var34);
    int var37 = var36.setAdj;
    ActivityManagerService.resetPriorityAfterLockedSection();
    int var41 = var36.uid;
    int var44 = UserHandle.getUserId(var42);
    long var48 = var36.lastMemInfoTime;
    var49 = var48 lt var9;
    Debug$MemoryInfo var50 = var36.lastMemInfo;
    long var57 = SystemClock.currentThreadTimeMillis();
    Debug$MemoryInfo var58 = new Debug$MemoryInfo();
    60 = arrayload 2[153];
    Debug.getMemoryInfo(var60,var58);
    long var63 = SystemClock.currentThreadTimeMillis();
    64 = arrayload 26[153];
    var64.set(var58);
    ActivityManagerService.boostPriorityForLockedSection();
    var36.lastMemInfo = var58;
    long var68 = SystemClock.uptimeMillis();
    var36.lastMemInfoTime = var68;
    IApplicationThread var69 = var36.thread;
    int var70 = var36.setAdj;
    ProcessState var71 = var36.baseProcessTracker;
    72 = arrayload 26[153];
    int var74 = var72.getTotalPss();
    75 = conversion(J) 74;
    76 = arrayload 26[153];
    int var78 = var76.getTotalUss();
    79 = conversion(J) 78;
    80 = arrayload 26[153];
    int var82 = var80.getTotalRss();
    83 = conversion(J) 82;
    var85 = var63 sub var57;
    ProcessRecord$PackageList var86 = var36.pkgList;
    ArrayMap var87 = var86.mPkgList;
    var71.addPss(var75,var79,var83,0,4,var85,var87);
    ensureNotDead();{ensureNotDead();};
    int var50 = this.mLastPssState;
    int var51 = this.mCurCombinedState;
    long var53 = SystemClock.uptimeMillis();
    long var54 = this.mLastPssTime;
    var56 = var54 add 30000;
    var57 = var53 lt var56;
    int var62 = this.mCurCombinedState;
    this.mLastPssState = var62;
    long var64 = SystemClock.uptimeMillis();
    this.mLastPssTime = var64;
}