// API: startActivityFromRecents
// Service: ActivityManagerService_3

public void startActivityFromRecents() {
    ActivityTaskManagerService var4 = this.mActivityTaskManager;
    int var6 = var4.startActivityFromRecents(param2,param3);
    int var8 = Binder.getCallingPid();
    int var10 = Binder.getCallingUid();
    SafeActivityOptions var12 = SafeActivityOptions.fromBundle(param3);
    long var14 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var15 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStackSupervisor var17 = this.mStackSupervisor;
    int var19 = var17.startActivityFromRecents(var8,var10,param2,var12);
    ActivityOptions var8 = getOptions(this);
    int var11 = var9.getLaunchActivityType();
    int var13 = var9.getLaunchWindowingMode();
    boolean var15 = var9.freezeRecentTasksReordering();
    RecentTasks var16 = this.mRecentTasks;
    boolean var18 = var16.isCallerRecents(param3);{boolean var18 = var16.isCallerRecents(param3);};
    RecentTasks var19 = this.mRecentTasks;
    var19.setFreezeTaskListReordering();
    WindowManagerService var47 = this.mWindowManager;
    var47.deferSurfaceLayout();
    WindowManagerService var50 = this.mWindowManager;
    int var52 = var9.getSplitScreenCreateMode();
    var50.setDockedStackCreateState(var52,0);
    deferUpdateRecentsHomeStackBounds();
    WindowManagerService var55 = this.mWindowManager;
    var55.prepareAppTransition(19,0);
    RootActivityContainer var68 = this.mRootActivityContainer;
    TaskRecord var71 = var68.anyTaskForId(param4,2,var9,1);
    RootActivityContainer var98 = this.mRootActivityContainer;
    ActivityDisplay var100 = var98.getDefaultDisplay();
    var100.moveHomeStackToFront(startActivityFromRecents);
    ActivityTaskManagerService var112 = this.mService;
    ActivityManagerInternal var113 = var112.mAmInternal;
    int var114 = var71.userId;
    boolean var116 = var113.shouldConfirmCredentials(var114);
    ActivityRecord var123 = var71.getRootActivity();
    ArrayList var3 = this.mActivities;
    int var5 = var3.size();
    Lcom/android/server/wm/ActivityRecord 0<PATH_SEP>ActivityTaskManagerService var4 = this.mActivityTaskManager;
    int var6 = var4.startActivityFromRecents(param2,param3);
    int var8 = Binder.getCallingPid();
    int var10 = Binder.getCallingUid();
    SafeActivityOptions var12 = SafeActivityOptions.fromBundle(param3);
    long var14 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var15 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStackSupervisor var17 = this.mStackSupervisor;
    int var19 = var17.startActivityFromRecents(var8,var10,param2,var12);
    ActivityOptions var8 = getOptions(this);
    int var11 = var9.getLaunchActivityType();
    int var13 = var9.getLaunchWindowingMode();
    boolean var15 = var9.freezeRecentTasksReordering();
    RecentTasks var16 = this.mRecentTasks;
    boolean var18 = var16.isCallerRecents(param3);{boolean var18 = var16.isCallerRecents(param3);};
    RecentTasks var19 = this.mRecentTasks;
    var19.setFreezeTaskListReordering();
    WindowManagerService var47 = this.mWindowManager;
    var47.deferSurfaceLayout();
    WindowManagerService var50 = this.mWindowManager;
    int var52 = var9.getSplitScreenCreateMode();
    var50.setDockedStackCreateState(var52,0);
    deferUpdateRecentsHomeStackBounds();
    WindowManagerService var55 = this.mWindowManager;
    var55.prepareAppTransition(19,0);
    RootActivityContainer var68 = this.mRootActivityContainer;
    TaskRecord var71 = var68.anyTaskForId(param4,2,var9,1);
    ArrayList var11 = this.mActivityDisplays;
    int var13 = var11.size();
    ActivityStackSupervisor var38 = this.mStackSupervisor;
    RecentTasks var39 = var38.mRecentTasks;
    TaskRecord var41 = var39.getTask(param2);
    Lcom/android/server/wm/TaskRecord var41<PATH_SEP>ActivityTaskManagerService var4 = this.mActivityTaskManager;
    int var6 = var4.startActivityFromRecents(param2,param3);
    int var8 = Binder.getCallingPid();
    int var10 = Binder.getCallingUid();
    SafeActivityOptions var12 = SafeActivityOptions.fromBundle(param3);
    long var14 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var15 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStackSupervisor var17 = this.mStackSupervisor;
    int var19 = var17.startActivityFromRecents(var8,var10,param2,var12);
    ActivityOptions var8 = getOptions(this);
    int var11 = var9.getLaunchActivityType();
    int var13 = var9.getLaunchWindowingMode();
    boolean var15 = var9.freezeRecentTasksReordering();
    RecentTasks var16 = this.mRecentTasks;
    boolean var18 = var16.isCallerRecents(param3);{boolean var18 = var16.isCallerRecents(param3);};
    RecentTasks var19 = this.mRecentTasks;
    var19.setFreezeTaskListReordering();
    this.mFreezeTaskListReordering = 1;
    ActivityTaskManagerService var3 = this.mService;
    ActivityTaskManagerService$H var4 = var3.mH;
    Runnable var5 = this.mResetFreezeTaskListOnTimeoutRunnable;
    var4.removeCallbacks(var5);
    ActivityTaskManagerService var7 = this.mService;
    ActivityTaskManagerService$H var8 = var7.mH;
    Runnable var9 = this.mResetFreezeTaskListOnTimeoutRunnable;
    long var10 = this.mFreezeTaskListTimeoutMs;
    boolean var12 = var8.postDelayed(var9,var10);<PATH_SEP>ActivityTaskManagerService var4 = this.mActivityTaskManager;
    int var6 = var4.startActivityFromRecents(param2,param3);
    int var8 = Binder.getCallingPid();
    int var10 = Binder.getCallingUid();
    SafeActivityOptions var12 = SafeActivityOptions.fromBundle(param3);
    long var14 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var15 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    ActivityStackSupervisor var17 = this.mStackSupervisor;
    int var19 = var17.startActivityFromRecents(var8,var10,param2,var12);
    ActivityOptions var8 = getOptions(this);
    int var11 = var9.getLaunchActivityType();
    int var13 = var9.getLaunchWindowingMode();
    boolean var15 = var9.freezeRecentTasksReordering();
    RecentTasks var16 = this.mRecentTasks;
    boolean var18 = var16.isCallerRecents(param3);{boolean var18 = var16.isCallerRecents(param3);};
    RecentTasks var19 = this.mRecentTasks;
    var19.setFreezeTaskListReordering();
    WindowManagerService var47 = this.mWindowManager;
    var47.deferSurfaceLayout();
    WindowManagerService var50 = this.mWindowManager;
    int var52 = var9.getSplitScreenCreateMode();
}