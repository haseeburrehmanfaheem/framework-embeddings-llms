// API: unregisterReceiver
// Service: ActivityManagerService_2

public void unregisterReceiver() {
    long var4 = Binder.clearCallingIdentity();
    ActivityManagerService.boostPriorityForLockedSection();
    HashMap var7 = this.mRegisteredReceivers;
    IBinder var9 = asBinder();
    Object var11 = var7.get(var9);
    ReceiverList var12 = (ReceiverList) var11;
    BroadcastRecord var13 = var12.curBroadcast;
    BroadcastQueue var14 = var13.queue;
    BroadcastRecord var16 = var14.getMatchingOrderedReceiver(var13);
    BroadcastQueue var17 = var13.queue;
    int var18 = var13.resultCode;
    String var19 = var13.resultData;
    Bundle var20 = var13.resultExtras;
    boolean var21 = var13.resultAbort;
    boolean var23 = var17.finishReceiverLocked(var13,var18,var19,var20,var21,0);
    int var8 = param2.state;
    ActivityInfo var9 = param2.curReceiver;
    long var11 = SystemClock.uptimeMillis();
    long var12 = param2.receiverTime;
    var13 = var11 sub var12;
    param2.state = 0;
    String var21 = this.mQueueName;
    boolean var33 = param2.allowBackgroundActivityStarts;
    ProcessRecord var34 = param2.curApp;
    BroadcastConstants var35 = this.mConstants;
    long var36 = var35.ALLOW_BG_ACTIVITY_START_TIMEOUT;
    var37 = var13 lt var36;
    ProcessRecord var40 = param2.curApp;
    var40.removeAllowBackgroundActivityStartsToken(param2);
    int var44 = param2.nextReceiver;
    [J var46 = param2.duration;
    int var47 = param2.nextReceiver;
    var48 = var47 sub 1;
    arraystore 46[48] = 13;
    boolean var50 = param2.timeoutExempt;
    BroadcastConstants var51 = this.mConstants;
    long var52 = var51.SLOW_TIME;
    var54 = var52 lt 0;
    BroadcastConstants var55 = this.mConstants;
    long var56 = var55.SLOW_TIME;
    var57 = var13 lt var56;
    ProcessRecord var58 = param2.curApp;
    int var59 = var58.uid;
    boolean var61 = UserHandle.isCore(var59);
    ProcessRecord var62 = param2.curApp;
    BroadcastDispatcher var74 = this.mDispatcher;
    ProcessRecord var75 = param2.curApp;
    int var76 = var75.uid;
    var74.startDeferring(var76);
    param2.receiver = 0;<PATH_SEP>long var4 = Binder.clearCallingIdentity();
    ActivityManagerService.boostPriorityForLockedSection();
    HashMap var7 = this.mRegisteredReceivers;
    IBinder var9 = asBinder();
    Object var11 = var7.get(var9);
    ReceiverList var12 = (ReceiverList) var11;
    BroadcastRecord var13 = var12.curBroadcast;
    BroadcastQueue var14 = var13.queue;
    BroadcastRecord var16 = var14.getMatchingOrderedReceiver(var13);
    BroadcastQueue var17 = var13.queue;
    int var18 = var13.resultCode;
    String var19 = var13.resultData;
    Bundle var20 = var13.resultExtras;
    boolean var21 = var13.resultAbort;
    boolean var23 = var17.finishReceiverLocked(var13,var18,var19,var20,var21,0);
    int var8 = param2.state;
    ActivityInfo var9 = param2.curReceiver;
    long var11 = SystemClock.uptimeMillis();
    long var12 = param2.receiverTime;
    var13 = var11 sub var12;
    param2.state = 0;
    String var21 = this.mQueueName;
    boolean var33 = param2.allowBackgroundActivityStarts;
    ProcessRecord var34 = param2.curApp;
    BroadcastConstants var35 = this.mConstants;
    long var36 = var35.ALLOW_BG_ACTIVITY_START_TIMEOUT;
    var37 = var13 lt var36;
    ProcessRecord var40 = param2.curApp;
    var40.removeAllowBackgroundActivityStartsToken(param2);
    int var44 = param2.nextReceiver;
    [J var46 = param2.duration;
    int var47 = param2.nextReceiver;
    var48 = var47 sub 1;
    arraystore 46[48] = 13;
    boolean var50 = param2.timeoutExempt;
    BroadcastConstants var51 = this.mConstants;
    long var52 = var51.SLOW_TIME;
    var54 = var52 lt 0;
    BroadcastConstants var55 = this.mConstants;
    long var56 = var55.SLOW_TIME;
    var57 = var13 lt var56;
    ProcessRecord var58 = param2.curApp;
    int var59 = var58.uid;
    boolean var61 = UserHandle.isCore(var59);
    ProcessRecord var62 = param2.curApp;
    BroadcastDispatcher var74 = this.mDispatcher;
    ProcessRecord var75 = param2.curApp;
    int var76 = var75.uid;
    var74.startDeferring(var76);
    param2.receiver = 0;
    Intent var82 = param2.intent;
    Intent var84 = var82.setComponent(0);
    ProcessRecord var85 = param2.curApp;
    ProcessRecord var86 = param2.curApp;
    ArraySet var87 = var86.curReceivers;
    boolean var89 = var87.contains(param2);
    ProcessRecord var90 = param2.curApp;
    ArraySet var91 = var90.curReceivers;
    boolean var93 = var91.remove(param2);
    BroadcastFilter var97 = param2.curFilter;
    BroadcastFilter var98 = param2.curFilter;
    ReceiverList var99 = var98.receiverList;
    var99.curBroadcast = 0;
    param2.curFilter = 0;
    param2.curReceiver = 0;
    param2.curApp = 0;
    this.mPendingBroadcast = 0;
    param2.resultCode = param3;
    param2.resultData = param4;<PATH_SEP>long var4 = Binder.clearCallingIdentity();
    ActivityManagerService.boostPriorityForLockedSection();
    HashMap var7 = this.mRegisteredReceivers;
    IBinder var9 = asBinder();
    Object var11 = var7.get(var9);
    ReceiverList var12 = (ReceiverList) var11;
    BroadcastRecord var13 = var12.curBroadcast;
    BroadcastQueue var14 = var13.queue;
    BroadcastRecord var16 = var14.getMatchingOrderedReceiver(var13);
    BroadcastQueue var17 = var13.queue;
    int var18 = var13.resultCode;
    String var19 = var13.resultData;
    Bundle var20 = var13.resultExtras;
    boolean var21 = var13.resultAbort;
    boolean var23 = var17.finishReceiverLocked(var13,var18,var19,var20,var21,0);
    int var8 = param2.state;
    ActivityInfo var9 = param2.curReceiver;
    long var11 = SystemClock.uptimeMillis();
    long var12 = param2.receiverTime;
    var13 = var11 sub var12;
    param2.state = 0;
    String var21 = this.mQueueName;
    boolean var33 = param2.allowBackgroundActivityStarts;
    ProcessRecord var34 = param2.curApp;
    BroadcastConstants var35 = this.mConstants;
    long var36 = var35.ALLOW_BG_ACTIVITY_START_TIMEOUT;
    var37 = var13 lt var36;
    ProcessRecord var40 = param2.curApp;
    var40.removeAllowBackgroundActivityStartsToken(param2);
    int var44 = param2.nextReceiver;
    [J var46 = param2.duration;
    int var47 = param2.nextReceiver;
    var48 = var47 sub 1;
    arraystore 46[48] = 13;
    boolean var50 = param2.timeoutExempt;
    BroadcastConstants var51 = this.mConstants;
    long var52 = var51.SLOW_TIME;
    var54 = var52 lt 0;
    BroadcastConstants var55 = this.mConstants;
    long var56 = var55.SLOW_TIME;
    var57 = var13 lt var56;
    ProcessRecord var58 = param2.curApp;
    int var59 = var58.uid;
    boolean var61 = UserHandle.isCore(var59);
    ProcessRecord var62 = param2.curApp;
    BroadcastDispatcher var74 = this.mDispatcher;
    ProcessRecord var75 = param2.curApp;
    int var76 = var75.uid;
    var74.startDeferring(var76);
    param2.receiver = 0;
    Intent var82 = param2.intent;
    Intent var84 = var82.setComponent(0);
    ProcessRecord var85 = param2.curApp;
    ProcessRecord var86 = param2.curApp;
    ArraySet var87 = var86.curReceivers;
    boolean var89 = var87.contains(param2);
    ProcessRecord var90 = param2.curApp;
    ArraySet var91 = var90.curReceivers;
    boolean var93 = var91.remove(param2);<PATH_SEP>long var4 = Binder.clearCallingIdentity();
    ActivityManagerService.boostPriorityForLockedSection();
    HashMap var7 = this.mRegisteredReceivers;
    IBinder var9 = asBinder();
    Object var11 = var7.get(var9);
    ReceiverList var12 = (ReceiverList) var11;
    BroadcastRecord var13 = var12.curBroadcast;
    BroadcastQueue var14 = var13.queue;
    BroadcastRecord var16 = var14.getMatchingOrderedReceiver(var13);
    BroadcastQueue var17 = var13.queue;
    int var18 = var13.resultCode;
    String var19 = var13.resultData;
    Bundle var20 = var13.resultExtras;
    boolean var21 = var13.resultAbort;
    boolean var23 = var17.finishReceiverLocked(var13,var18,var19,var20,var21,0);
    int var8 = param2.state;
    ActivityInfo var9 = param2.curReceiver;
    long var11 = SystemClock.uptimeMillis();
    long var12 = param2.receiverTime;
    var13 = var11 sub var12;
    param2.state = 0;
    String var21 = this.mQueueName;
    boolean var33 = param2.allowBackgroundActivityStarts;
    ProcessRecord var34 = param2.curApp;
    BroadcastConstants var35 = this.mConstants;
    long var36 = var35.ALLOW_BG_ACTIVITY_START_TIMEOUT;
    var37 = var13 lt var36;
    ProcessRecord var40 = param2.curApp;
    var40.removeAllowBackgroundActivityStartsToken(param2);
    int var44 = param2.nextReceiver;
    [J var46 = param2.duration;
    int var47 = param2.nextReceiver;
    var48 = var47 sub 1;
    arraystore 46[48] = 13;
    boolean var50 = param2.timeoutExempt;
    BroadcastConstants var51 = this.mConstants;
    long var52 = var51.SLOW_TIME;
    var54 = var52 lt 0;
    BroadcastConstants var55 = this.mConstants;
    long var56 = var55.SLOW_TIME;
    var57 = var13 lt var56;
    ProcessRecord var58 = param2.curApp;
    int var59 = var58.uid;
    boolean var61 = UserHandle.isCore(var59);
    ProcessRecord var62 = param2.curApp;
    BroadcastDispatcher var74 = this.mDispatcher;
    ProcessRecord var75 = param2.curApp;
    int var76 = var75.uid;
    var74.startDeferring(var76);
    Object var3 = this.mLock;
    BroadcastDispatcher$Deferrals var5 = findUidLocked(param2);
    long var10 = SystemClock.uptimeMillis();
    BroadcastDispatcher$Deferrals var11 = new BroadcastDispatcher$Deferrals();
    BroadcastConstants var12 = this.mConstants;
    long var13 = var12.DEFERRAL;
    SparseIntArray var14 = this.mAlarmUids;
    int var16 = var14.get(param2,0);
    int var18 = var11.alarmCount;
    ArrayList var22 = this.mDeferredBroadcasts;
    BroadcastDispatcher.insertLocked(var22,var11);
    scheduleDeferralCheckLocked(1);
    ArrayList var5 = this.mDeferredBroadcasts;
    boolean var7 = var5.isEmpty();
    ArrayList var8 = this.mDeferredBroadcasts;
    Object var10 = var8.get(0);
    BroadcastDispatcher$Deferrals var11 = (BroadcastDispatcher$Deferrals) var10;
    ArrayList var12 = var11.broadcasts;
    boolean var14 = var12.isEmpty();
    Handler var15 = this.mHandler;
    Runnable var16 = this.mScheduleRunnable;
    var15.removeCallbacks(var16);
    Handler var18 = this.mHandler;
    Runnable var19 = this.mScheduleRunnable;
    long var20 = var11.deferUntil;
    boolean var22 = var18.postAtTime(var19,var20);
}