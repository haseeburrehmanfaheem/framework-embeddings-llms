// API: requestSystemServerHeapDump
// Service: ActivityManagerService_1

public void requestSystemServerHeapDump() {
    boolean var2 = IS_DEBUGGABLE;
    int var5 = Binder.getCallingUid();
    ActivityManagerService$PidMap var10 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var11 = this.mPidsSelfLocked;
    int var13 = Process.myPid();
    ProcessRecord var15 = var11.get(var13);
    ActivityManagerService.boostPriorityForLockedSection();
    startHeapDumpLocked(var15,1);
    File var5 = DumpHeapProvider.getJavaFile();
    String var6 = param2.processName;
    this.mMemWatchDumpProcName = var6;
    String var8 = var5.toString();
    this.mMemWatchDumpFile = var8;
    int var9 = param2.pid;
    this.mMemWatchDumpPid = var9;
    int var10 = param2.uid;
    this.mMemWatchDumpUid = var10;
    this.mMemWatchIsUserInitiated = param3;
    Handler var12 = BackgroundThread.getHandler();
    1 = load_metadata: <Application,Lcom/android/internal/os/BackgroundThread>;
    <Primordial,Ljava/lang/Class>;
    BackgroundThread.ensureThreadLocked();{BackgroundThread.ensureThreadLocked();};
    Handler var3 = sHandler;
    Landroid/os/Handler var3<PATH_SEP>boolean var2 = IS_DEBUGGABLE;
    int var5 = Binder.getCallingUid();
    ActivityManagerService$PidMap var10 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var11 = this.mPidsSelfLocked;
    int var13 = Process.myPid();
    ProcessRecord var15 = var11.get(var13);
    ActivityManagerService.boostPriorityForLockedSection();
    ThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.boost();
    ThreadLocal var2 = this.mThreadState;
    Object var4 = var2.get();
    ThreadPriorityBooster$PriorityState var5 = (ThreadPriorityBooster$PriorityState) var4;
    int var6 = var5.regionCounter;
    int var8 = var5.tid;
    int var10 = Process.getThreadPriority(var8);
    int var11 = this.mBoostToPriority;
    int var12 = var5.tid;
    int var13 = this.mBoostToPriority;
    Process.setThreadPriority(var12,var13);<PATH_SEP>boolean var2 = IS_DEBUGGABLE;
    int var5 = Binder.getCallingUid();
    ActivityManagerService$PidMap var10 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var11 = this.mPidsSelfLocked;
    int var13 = Process.myPid();
    ProcessRecord var15 = var11.get(var13);
    ActivityManagerService.boostPriorityForLockedSection();
    startHeapDumpLocked(var15,1);
    ActivityManagerService.resetPriorityAfterLockedSection();<PATH_SEP>boolean var2 = IS_DEBUGGABLE;
    int var5 = Binder.getCallingUid();
    ActivityManagerService$PidMap var10 = this.mPidsSelfLocked;
    ActivityManagerService$PidMap var11 = this.mPidsSelfLocked;
    int var13 = Process.myPid();
    ProcessRecord var15 = var11.get(var13);
    ActivityManagerService.boostPriorityForLockedSection();
    startHeapDumpLocked(var15,1);
    ActivityManagerService.resetPriorityAfterLockedSection();
    ThreadPriorityBooster var1 = sThreadPriorityBooster;
    this.reset();
    ThreadLocal var2 = this.mThreadState;
    Object var4 = var2.get();
    ThreadPriorityBooster$PriorityState var5 = (ThreadPriorityBooster$PriorityState) var4;
    int var6 = var5.regionCounter;
    var8 = var6 add -1;
    var5.regionCounter = var8;
    int var9 = var5.regionCounter;
    int var11 = var5.prevPriority;
    int var13 = var5.tid;
    int var14 = var5.prevPriority;
    Process.setThreadPriority(var13,var14);
}