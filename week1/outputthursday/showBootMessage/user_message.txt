// API: showBootMessage
// Service: ActivityManagerService_3

public void showBootMessage() {
    int var5 = Binder.getCallingUid();
    int var7 = Process.myUid();
    WindowManagerService var10 = this.mWindowManager;
    var10.showBootMessage(param2,param3);
    WindowManagerGlobalLock var5 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var7 = this.mAllowBootMessages;
    boolean var8 = this.mShowingBootMessages;
    boolean var11 = this.mSystemBooted;
    this.mShowingBootMessages = 1;
    WindowManagerPolicy var12 = this.mPolicy;
    var12.showBootMessage(param2,param3);
    WindowManagerService.resetPriorityAfterLockedSection();
    performEnableScreen();
    WindowManagerGlobalLock var2 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var4 = this.mDisplayEnabled;
    boolean var6 = this.mSystemBooted;
    boolean var7 = this.mShowingBootMessages;
    boolean var9 = this.mShowingBootMessages;
    WindowManagerPolicy var10 = this.mPolicy;
    boolean var12 = var10.canDismissBootAnimation();
    boolean var15 = this.mForceDisplayEnabled;
    DisplayContent var17 = getDefaultDisplayContentLocked();
    boolean var19 = var17.checkWaitingForWindows();{boolean var19 = var17.checkWaitingForWindows();};
    boolean var23 = this.mBootAnimationStopped;
    Trace.asyncTraceBegin(32,Stop bootanim,0);
    SystemProperties.set(service.bootanim.exit,1);
    this.mBootAnimationStopped = 1;
    boolean var33 = this.mForceDisplayEnabled;
    boolean var35 = checkBootAnimationCompleteLocked();{boolean var35 = checkBootAnimationCompleteLocked();};
    IBinder var41 = ServiceManager.getService(SurfaceFlinger);
    Parcel var47 = Parcel.obtain();
    var47.writeInterfaceToken(android.ui.ISurfaceComposer);
    boolean var51 = var41.transact(1,var47,0,0);
    var47.recycle();
    long var67 = SystemClock.uptimeMillis();
    Trace.asyncTraceEnd(32,Stop bootanim,0);
    this.mDisplayEnabled = 1;
    InputManagerCallback var71 = this.mInputManagerCallback;
    boolean var72 = this.mEventDispatchingEnabled;
    var71.setEventDispatchingLw(var72);
    WindowManagerService.resetPriorityAfterLockedSection();
    IActivityManager var75 = this.mActivityManager;
    var75.bootAnimationComplete();
    WindowManagerPolicy var79 = this.mPolicy;
    var79.enableScreenAfterBoot();
    updateRotationUnchecked(0,0);<PATH_SEP>int var5 = Binder.getCallingUid();
    int var7 = Process.myUid();
    WindowManagerService var10 = this.mWindowManager;
    var10.showBootMessage(param2,param3);
    WindowManagerGlobalLock var5 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var7 = this.mAllowBootMessages;
    boolean var8 = this.mShowingBootMessages;
    boolean var11 = this.mSystemBooted;
    this.mShowingBootMessages = 1;
    WindowManagerPolicy var12 = this.mPolicy;
    var12.showBootMessage(param2,param3);
    WindowManagerService.resetPriorityAfterLockedSection();
    performEnableScreen();
    WindowManagerGlobalLock var2 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var4 = this.mDisplayEnabled;
    boolean var6 = this.mSystemBooted;
    boolean var7 = this.mShowingBootMessages;
    boolean var9 = this.mShowingBootMessages;
    WindowManagerPolicy var10 = this.mPolicy;
    boolean var12 = var10.canDismissBootAnimation();
    boolean var15 = this.mForceDisplayEnabled;
    DisplayContent var17 = getDefaultDisplayContentLocked();
    boolean var19 = var17.checkWaitingForWindows();{boolean var19 = var17.checkWaitingForWindows();};
    boolean var23 = this.mBootAnimationStopped;
    Trace.asyncTraceBegin(32,Stop bootanim,0);
    SystemProperties.set(service.bootanim.exit,1);
    this.mBootAnimationStopped = 1;
    boolean var33 = this.mForceDisplayEnabled;
    boolean var35 = checkBootAnimationCompleteLocked();{boolean var35 = checkBootAnimationCompleteLocked();};
    IBinder var41 = ServiceManager.getService(SurfaceFlinger);
    Parcel var47 = Parcel.obtain();
    var47.writeInterfaceToken(android.ui.ISurfaceComposer);
    boolean var51 = var41.transact(1,var47,0,0);
    var47.recycle();
    long var67 = SystemClock.uptimeMillis();
    Trace.asyncTraceEnd(32,Stop bootanim,0);
    this.mDisplayEnabled = 1;
    InputManagerCallback var71 = this.mInputManagerCallback;
    boolean var72 = this.mEventDispatchingEnabled;
    var71.setEventDispatchingLw(var72);
    WindowManagerService.resetPriorityAfterLockedSection();
    IActivityManager var75 = this.mActivityManager;
    var75.bootAnimationComplete();
    WindowManagerPolicy var79 = this.mPolicy;
    var79.enableScreenAfterBoot();
    updateRotationUnchecked(0,0);
    Trace.traceBegin(32,updateRotation);
    long var8 = Binder.clearCallingIdentity();
    WindowManagerGlobalLock var9 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    RootWindowContainer var12 = this.mRoot;
    WindowList var13 = var12.mChildren;
    int var15 = var13.size();
    RootWindowContainer var16 = this.mRoot;
    WindowList var17 = var16.mChildren;
    Object var19 = var17.get(var35);
    DisplayContent var20 = (DisplayContent) var19;
    Trace.traceBegin(32,updateRotation: display);
    boolean var24 = var20.updateRotationUnchecked();
    Trace.traceEnd(32);
    var20.setLayoutNeeded();<PATH_SEP>int var5 = Binder.getCallingUid();
    int var7 = Process.myUid();
    WindowManagerService var10 = this.mWindowManager;
    var10.showBootMessage(param2,param3);
    WindowManagerGlobalLock var5 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var7 = this.mAllowBootMessages;
    boolean var8 = this.mShowingBootMessages;
    boolean var11 = this.mSystemBooted;
    this.mShowingBootMessages = 1;
    WindowManagerPolicy var12 = this.mPolicy;
    var12.showBootMessage(param2,param3);
    WindowManagerService.resetPriorityAfterLockedSection();
    performEnableScreen();
    WindowManagerGlobalLock var2 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var4 = this.mDisplayEnabled;
    boolean var6 = this.mSystemBooted;
    boolean var7 = this.mShowingBootMessages;
    boolean var9 = this.mShowingBootMessages;
    WindowManagerPolicy var10 = this.mPolicy;
    boolean var12 = var10.canDismissBootAnimation();
    boolean var15 = this.mForceDisplayEnabled;
    DisplayContent var17 = getDefaultDisplayContentLocked();
    boolean var19 = var17.checkWaitingForWindows();{boolean var19 = var17.checkWaitingForWindows();};
    boolean var23 = this.mBootAnimationStopped;
    Trace.asyncTraceBegin(32,Stop bootanim,0);
    SystemProperties.set(service.bootanim.exit,1);
    this.mBootAnimationStopped = 1;
    boolean var33 = this.mForceDisplayEnabled;
    boolean var35 = checkBootAnimationCompleteLocked();{boolean var35 = checkBootAnimationCompleteLocked();};
    IBinder var41 = ServiceManager.getService(SurfaceFlinger);
    Parcel var47 = Parcel.obtain();
    var47.writeInterfaceToken(android.ui.ISurfaceComposer);
    boolean var51 = var41.transact(1,var47,0,0);
    var47.recycle();
    long var67 = SystemClock.uptimeMillis();
    Trace.asyncTraceEnd(32,Stop bootanim,0);
    this.mDisplayEnabled = 1;
    InputManagerCallback var71 = this.mInputManagerCallback;
    boolean var72 = this.mEventDispatchingEnabled;
    var71.setEventDispatchingLw(var72);
    WindowManagerService.resetPriorityAfterLockedSection();
    IActivityManager var75 = this.mActivityManager;
    var75.bootAnimationComplete();
    ActivityManagerService.boostPriorityForLockedSection();
    boolean var3 = this.mCallFinishBooting;
    this.mBootAnimationComplete = 1;<PATH_SEP>int var5 = Binder.getCallingUid();
    int var7 = Process.myUid();
    WindowManagerService var10 = this.mWindowManager;
    var10.showBootMessage(param2,param3);
    WindowManagerGlobalLock var5 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var7 = this.mAllowBootMessages;
    boolean var8 = this.mShowingBootMessages;
    boolean var11 = this.mSystemBooted;
    this.mShowingBootMessages = 1;
    WindowManagerPolicy var12 = this.mPolicy;
    var12.showBootMessage(param2,param3);
    WindowManagerService.resetPriorityAfterLockedSection();
    performEnableScreen();
    WindowManagerGlobalLock var2 = this.mGlobalLock;
    WindowManagerService.boostPriorityForLockedSection();
    boolean var4 = this.mDisplayEnabled;
    boolean var6 = this.mSystemBooted;
    boolean var7 = this.mShowingBootMessages;
    boolean var9 = this.mShowingBootMessages;
    WindowManagerPolicy var10 = this.mPolicy;
    boolean var12 = var10.canDismissBootAnimation();
    boolean var15 = this.mForceDisplayEnabled;
    DisplayContent var17 = getDefaultDisplayContentLocked();
    boolean var19 = var17.checkWaitingForWindows();{boolean var19 = var17.checkWaitingForWindows();};
    boolean var23 = this.mBootAnimationStopped;
    Trace.asyncTraceBegin(32,Stop bootanim,0);
    SystemProperties.set(service.bootanim.exit,1);
    this.mBootAnimationStopped = 1;
    boolean var33 = this.mForceDisplayEnabled;
    boolean var35 = checkBootAnimationCompleteLocked();{boolean var35 = checkBootAnimationCompleteLocked();};
    IBinder var41 = ServiceManager.getService(SurfaceFlinger);
    Parcel var47 = Parcel.obtain();
    var47.writeInterfaceToken(android.ui.ISurfaceComposer);
    boolean var51 = var41.transact(1,var47,0,0);
    var47.recycle();
    long var67 = SystemClock.uptimeMillis();
    Trace.asyncTraceEnd(32,Stop bootanim,0);
    this.mDisplayEnabled = 1;
    InputManagerCallback var71 = this.mInputManagerCallback;
    boolean var72 = this.mEventDispatchingEnabled;
    var71.setEventDispatchingLw(var72);
    boolean var3 = this.mInputDispatchEnabled;
    this.mInputDispatchEnabled = param2;
}