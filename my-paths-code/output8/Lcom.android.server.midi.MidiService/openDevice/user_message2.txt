The method openDevice has the following code snippet:

This is path 1 for the API with depth 2:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	Object v2 = this.mClients.get(p1);
	if (v2 != 0) {
		MidiService$Client v3 = new MidiService$Client(MidiService,p1);
		p1.linkToDeath(v3, 0);
		Object v6 = this.mClients.put(p1, v3);
		MidiService$Client v1 = v2;
		if (v1 != 0) {
			Object v13 = this.mDevicesByInfo.get(p2);
			if (v13 == 0) {
				int v20 = Binder.getCallingUid();
				boolean v22 = this.mIsPrivate;
				if (v22 == 0) {
					boolean v21 = 0;
					if (v21 == 0) {
						int v23 = p2.getType();
						if (v23 != 1) {
							Bundle v25 = this.mProperties;
							String v26 = v25.getString("name");
							int v27 = v26.length();
							if (v27 >= 8) {
								int v29 = v26.length();
								String v30 = v26.substring(0, (v29 + -8));
								String v28 = v30;
								int v32 = v26.length();
								String v33 = v26.substring((v32 + -8));
								String v31 = v33;
								boolean v42 = this.mUsbMidiUniversalDeviceInUse.contains(v28);
								if (v42 != 0) {
									boolean v43 = v31.equals("MIDI 2.0");
									if (v43 == 0) {
										boolean v44 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v28);
										if (v44 == 0) {
											boolean v24 = 1;
											if (v24 != 0) {
												Bundle v46 = this.mProperties;
												String v47 = v46.getString("name");
												int v48 = v47.length();
												if (v48 >= 8) {
													int v50 = v47.length();
													String v51 = v47.substring(0, (v50 + -8));
													String v49 = v51;
													int v53 = v47.length();
													String v54 = v47.substring((v53 + -8));
													String v52 = v54;
													boolean v63 = v52.equals("MIDI 2.0");
													if (v63 == 0) {
														boolean v64 = v52.equals("MIDI 1.0");
														if (v64 == 0) {
															Integer v65 = Integer.valueOf(0);
															Object v66 = this.mUsbMidiLegacyDeviceOpenCount.getOrDefault(v49, v65);
															int v67 = v66.intValue();
															Integer v68 = Integer.valueOf((v67 + 1));
															Object v69 = this.mUsbMidiLegacyDeviceOpenCount.put(v49, v68);
															long v70 = Binder.clearCallingIdentity();
															int v84 = this.mDeviceConnections.size();
															if (v84 >= 64) {
																MidiService$DeviceConnection v85 = new MidiService$DeviceConnection(this.this$0,v13,MidiService$Client,p3);
																IBinder v87 = this.mToken;
																Object v88 = this.mDeviceConnections.put(v87, v85);
																if (this.mServer == 0) {
																	if (this.mServiceConnection != 0) {
																		if (this.mServiceInfo != 0) {
																			if (this.mBluetoothDevice == 0) {
																				boolean v103 = this.mDeviceConnections.add(v85);
																				MidiService$Device$1 v104 = new MidiService$Device$1(MidiService$Device);
																				this.mServiceConnection = v104;
																				if (this.mBluetoothDevice == 0) {
																					Intent v106 = new Intent("android.media.midi.MidiDeviceService");
																					ComponentName v108 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
																					Intent v110 = v106.setComponent(v108);
																					Context v111 = MidiService.-$$Nest$fgetmContext(this.this$0);
																					boolean v112 = v111.bindService(new Intent(), this.mServiceConnection, 1);
																					if (v112 != 0) {
																						Binder.restoreCallingIdentity(v70);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	Object v2 = this.mClients.get(p1);
	if (v2 != 0) {
		MidiService$Client v3 = new MidiService$Client(MidiService,p1);
		p1.linkToDeath(v3, 0);
		Object v6 = this.mClients.put(p1, v3);
		MidiService$Client v1 = v2;
		if (v1 != 0) {
			Object v13 = this.mDevicesByInfo.get(p2);
			if (v13 == 0) {
				int v20 = Binder.getCallingUid();
				boolean v22 = this.mDeviceInfo.isPrivate();
				if (v22 == 0) {
					boolean v21 = 0;
					if (v21 == 0) {
						int v23 = this.mType;
						if (v23 != 1) {
							Bundle v25 = p2.getProperties();
							String v26 = v25.getString("name");
							int v27 = v26.length();
							if (v27 >= 8) {
								String v28 = MidiService.extractUsbDeviceName(v26);
								String v29 = MidiService.extractUsbDeviceTag(v26);
								boolean v38 = this.mUsbMidiUniversalDeviceInUse.contains(v28);
								if (v38 != 0) {
									boolean v39 = v29.equals("MIDI 2.0");
									if (v39 == 0) {
										boolean v40 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v28);
										if (v40 == 0) {
											boolean v24 = 1;
											if (v24 != 0) {
												Bundle v42 = p2.getProperties();
												String v43 = v42.getString("name");
												int v44 = v43.length();
												if (v44 >= 8) {
													String v45 = MidiService.extractUsbDeviceName(v43);
													String v46 = MidiService.extractUsbDeviceTag(v43);
													boolean v55 = v46.equals("MIDI 2.0");
													if (v55 == 0) {
														boolean v56 = v46.equals("MIDI 1.0");
														if (v56 == 0) {
															Integer v57 = Integer.valueOf(0);
															Object v58 = this.mUsbMidiLegacyDeviceOpenCount.getOrDefault(v45, v57);
															int v59 = v58.intValue();
															Integer v60 = Integer.valueOf((v59 + 1));
															Object v61 = this.mUsbMidiLegacyDeviceOpenCount.put(v45, v60);
															long v62 = Binder.clearCallingIdentity();
															int v76 = this.mDeviceConnections.size();
															if (v76 >= 64) {
																MidiService$DeviceConnection v77 = new MidiService$DeviceConnection(this.this$0,v13,MidiService$Client,p3);
																IBinder v79 = v77.getToken();
																Object v80 = this.mDeviceConnections.put(v79, v77);
																v13.addDeviceConnection(v77);
																Binder.restoreCallingIdentity(v62);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	MidiService$Client v1 = p0.getClient(p1);
	if (v1 != 0) {
		Object v8 = this.mDevicesByInfo.get(p2);
		if (v8 == 0) {
			int v15 = Binder.getCallingUid();
			boolean v16 = v8.isUidAllowed(v15);
			if (v16 == 0) {
				int v17 = p2.getType();
				if (v17 != 1) {
					boolean v18 = p0.isUsbMidiDeviceInUseLocked(p2);
					if (v18 != 0) {
						p0.addUsbMidiDeviceLocked(p2);
						long v20 = Binder.clearCallingIdentity();
						v1.addDeviceConnection(v8, p3);
						Binder.restoreCallingIdentity(v20);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['MidiService$Client v3 = new MidiService$Client(MidiService, p1);\np1.linkToDeath(v3, 0);\nObject v6 = this.mClients.put(p1, v3);\nObject v13 = this.mDevicesByInfo.get(p2);', 'MidiService$DeviceConnection v85 = new MidiService$DeviceConnection(this.this$0, v13, MidiService$Client, p3);\nIBinder v87 = this.mToken;\nObject v88 = this.mDeviceConnections.put(v87, v85);', 'int v20 = Binder.getCallingUid();\nboolean v22 = this.mIsPrivate;\nif (v22 == 0) { ... }']

The method openDevice has the following similar APIs:

- API Name: closeDevice(Landroid/os/IBinder;Landroid/os/IBinder;)V with Similarity Score: 0.9503569006919861
  - Access Control Level: NONE and the following code:
Object v2 = this.mClients.get(p1);
MidiService$Client v3 = new MidiService$Client(MidiService,p1);
p1.linkToDeath(v3, 0);
Object v6 = this.mClients.put(p1, v3);
Object v8 = this.mDeviceConnections.remove(p2);

- API Name: closeDevice(Landroid/os/IBinder;Landroid/os/IBinder;)V with Similarity Score: 0.9503569006919861
  - Access Control Level: NONE and the following code:
Object v2 = this.mClients.get(p1);
MidiService$Client v3 = new MidiService$Client(MidiService,p1);
p1.linkToDeath(v3, 0);
Object v6 = this.mClients.put(p1, v3);
Object v8 = this.mDeviceConnections.remove(p2);

