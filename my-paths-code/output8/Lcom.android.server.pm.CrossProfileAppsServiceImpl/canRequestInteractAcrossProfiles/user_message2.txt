The method canRequestInteractAcrossProfiles in the following class Lcom.android.server.pm.CrossProfileAppsServiceImpl has the following code snippet:

This is path 1 for the API with depth 2:
public boolean canRequestInteractAcrossProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	UserManager v7 = this.mInjector.getUserManager();
	int v8 = this.mInjector.getCallingUserId();
	[I v9 = v7.getEnabledProfileIds(v8);
	if (v9.length >= 2) {
		if (0 >= v9.length) {
			boolean v11 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[0]);
			if (v11 == 0) {
				if ((0 + 1) >= v9.length) {
					boolean v12 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[(0 + 1)]);
					if (v12 == 0) {
						boolean v10 = 1;
						if (v10 == 0) {
							String v13 = AppOpsManager.opToPermission(93);
							boolean v6 = v14;
							return v6;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean canRequestInteractAcrossProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	UserManager v7 = this.mInjector.getUserManager();
	int v8 = this.mInjector.getCallingUserId();
	[I v9 = v7.getEnabledProfileIds(v8);
	if (v9.length >= 2) {
		boolean v10 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9);
		if (v10 == 0) {
			String v11 = AppOpsManager.opToPermission(93);
			boolean v6 = v12;
			return v6;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean canRequestInteractAcrossProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	p0.verifyCallingPackage(p1);
	boolean v3 = p0.canRequestInteractAcrossProfilesUnchecked(p1);
	return v3;
}

and the following sink code:
['int v8 = this.mInjector.getCallingUserId();\n[I v9 = v7.getEnabledProfileIds(v8);\nboolean v11 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[0]);', 'p0.canRequestInteractAcrossProfilesUnchecked(p1);']

The method canRequestInteractAcrossProfiles has the following similar APIs:

- API Name: canUserAttemptToConfigureInteractAcrossProfiles(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.9370562434196472, Code:
int v1 = this.mInjector.getCallingUserId();
UserManager v3 = this.mInjector.getUserManager();
[I v4 = v3.getProfileIds(v1, 0);
boolean v5 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4);
  - Similarity: 0.9360611438751221, Code:
int v1 = this.mInjector.getCallingUserId();
[I v4 = v3.getProfileIds(v1, 0);
boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4[0]);
  - Similarity: 0.8088025450706482, Code:
int v1 = this.mInjector.getCallingUserId();
boolean v2 = p0.canUserAttemptToConfigureInteractAcrossProfiles(p1, v1);
  - Access Control Level: SYS_OR_SIG

- API Name: canConfigureInteractAcrossProfiles(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.8554064035415649, Code:
int v1 = this.mInjector.getCallingUserId();
I v5 = v4.getProfileIds(v1, 0);
CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10 v11 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10(CrossProfileAppsServiceImpl,v1,p1);
Object v13 = this.mInjector.withCleanCallingIdentity(v11);
boolean v14 = v13.booleanValue();
  - Similarity: 0.8220521211624146, Code:
int v1 = this.mInjector.getCallingUserId();
boolean v2 = p0.canConfigureInteractAcrossProfiles(p1, v1);
  - Similarity: 0.8018366098403931, Code:
int v1 = this.mInjector.getCallingUserId();
boolean v3 = CrossProfileAppsServiceImpl.canUserAttemptToConfigureInteractAcrossProfiles(p1, v1);
  - Similarity: 0.7870590686798096, Code:
boolean v4 = CrossProfileAppsServiceImpl.hasOtherProfileWithPackageInstalled(p1, v1);
boolean v7 = CrossProfileAppsServiceImpl.isCrossProfilePackageAllowlisted(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: setInteractAcrossProfilesAppOp(Ljava/lang/String;I)V in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.849927544593811, Code:
p0.setInteractAcrossProfilesAppOp(p1, p2, v1);
  - Similarity: 0.7962262630462646, Code:
CrossProfileAppsServiceImpl.canConfigureInteractAcrossProfiles(p1, v1);
  - Similarity: 0.7741597890853882, Code:
CrossProfileAppsServiceImpl.setInteractAcrossProfilesAppOpUnchecked(p1, p2, v1);
  - Access Control Level: SYS_OR_SIG

- API Name: getAllSessions(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.pm.LauncherAppsService$LauncherAppsImpl with the following sink code entries:
  - Similarity: 0.7939572334289551, Code:
int v3 = ILauncherApps$Stub.getCallingUid();
int v5 = UserHandle.getUserId(v2);
int v6 = this.mIPM.getPackageUid(p1, 794624, v5);
ArrayList v7 = new ArrayList();
[I v13 = this.mUm.getEnabledProfileIds(v9);
PackageInstaller$SessionInfo v30 = PackageInstallerSession.generateInfoInternal(0, v29);
boolean v31 = v21.add(v28);
ParceledListSlice v36 = new ParceledListSlice(v21);
return v44;
  - Access Control Level: NONE

- API Name: rename(IILjava/lang/String;)V in the following Class: Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper with the following sink code entries:
  - Similarity: 0.7731366157531738, Code:
int v7 = ActivityManager.getCurrentUser();
[I v8 = v5.getEnabledProfileIds(v7);
Pair v11 = this.this$0.getSingleProvider();
int v12 = Pair.first.intValue();
Pair.second.rename(v12, p1, p2, p3);
  - Access Control Level: NORMAL

