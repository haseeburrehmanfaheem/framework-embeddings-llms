This is path 1 for the API with depth 2:
public boolean canRequestInteractAcrossProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	UserManager v7 = this.mInjector.getUserManager();
	int v8 = this.mInjector.getCallingUserId();
	[I v9 = v7.getEnabledProfileIds(v8);
	if (v9.length >= 2) {
		if (0 >= v9.length) {
			boolean v11 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[0]);
			if (v11 == 0) {
				if ((0 + 1) >= v9.length) {
					boolean v12 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[(0 + 1)]);
					if (v12 == 0) {
						boolean v10 = 1;
						if (v10 == 0) {
							String v13 = AppOpsManager.opToPermission(93);
							boolean v6 = v14;
							return v6;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean canRequestInteractAcrossProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	UserManager v7 = this.mInjector.getUserManager();
	int v8 = this.mInjector.getCallingUserId();
	[I v9 = v7.getEnabledProfileIds(v8);
	if (v9.length >= 2) {
		boolean v10 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9);
		if (v10 == 0) {
			String v11 = AppOpsManager.opToPermission(93);
			boolean v6 = v12;
			return v6;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean canRequestInteractAcrossProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	p0.verifyCallingPackage(p1);
	boolean v3 = p0.canRequestInteractAcrossProfilesUnchecked(p1);
	return v3;
}
