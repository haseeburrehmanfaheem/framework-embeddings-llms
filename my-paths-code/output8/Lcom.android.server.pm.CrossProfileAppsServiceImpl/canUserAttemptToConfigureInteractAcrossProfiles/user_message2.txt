The method canUserAttemptToConfigureInteractAcrossProfiles in the following class Lcom.android.server.pm.CrossProfileAppsServiceImpl has the following code snippet:

This is path 1 for the API with depth 2:
public boolean canUserAttemptToConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	UserManager v3 = this.mInjector.getUserManager();
	[I v4 = v3.getProfileIds(v1, 0);
	if (v4.length >= 2) {
		if (0 >= v4.length) {
			boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4[0]);
			if (v6 == 0) {
				if ((0 + 1) >= v4.length) {
					boolean v7 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4[(0 + 1)]);
					if (v7 == 0) {
						boolean v5 = 1;
						if (v5 == 0) {
							String v8 = AppOpsManager.opToPermission(93);
							if (v9 != 0) {
								boolean v2 = (v10 ^ 1);
								return v2;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean canUserAttemptToConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	UserManager v3 = this.mInjector.getUserManager();
	[I v4 = v3.getProfileIds(v1, 0);
	if (v4.length >= 2) {
		boolean v5 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4);
		if (v5 == 0) {
			String v6 = AppOpsManager.opToPermission(93);
			if (v7 != 0) {
				boolean v2 = (v8 ^ 1);
				return v2;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean canUserAttemptToConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	boolean v2 = p0.canUserAttemptToConfigureInteractAcrossProfiles(p1, v1);
	return v2;
}

and the following sink code:
['int v1 = this.mInjector.getCallingUserId();\n[I v4 = v3.getProfileIds(v1, 0);\nboolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4[0]);', 'int v1 = this.mInjector.getCallingUserId();\nUserManager v3 = this.mInjector.getUserManager();\n[I v4 = v3.getProfileIds(v1, 0);\nboolean v5 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4);', 'int v1 = this.mInjector.getCallingUserId();\nboolean v2 = p0.canUserAttemptToConfigureInteractAcrossProfiles(p1, v1);']

The method canUserAttemptToConfigureInteractAcrossProfiles has the following similar APIs:

- API Name: canConfigureInteractAcrossProfiles(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.9860643148422241, Code:
int v1 = this.mInjector.getCallingUserId();
boolean v2 = p0.canConfigureInteractAcrossProfiles(p1, v1);
  - Similarity: 0.9554608464241028, Code:
int v1 = this.mInjector.getCallingUserId();
boolean v3 = CrossProfileAppsServiceImpl.canUserAttemptToConfigureInteractAcrossProfiles(p1, v1);
  - Similarity: 0.8793627023696899, Code:
int v1 = this.mInjector.getCallingUserId();
I v5 = v4.getProfileIds(v1, 0);
CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10 v11 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10(CrossProfileAppsServiceImpl,v1,p1);
Object v13 = this.mInjector.withCleanCallingIdentity(v11);
boolean v14 = v13.booleanValue();
  - Access Control Level: SYS_OR_SIG

- API Name: canRequestInteractAcrossProfiles(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.9370562434196472, Code:
int v8 = this.mInjector.getCallingUserId();
[I v9 = v7.getEnabledProfileIds(v8);
boolean v11 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[0]);
  - Similarity: 0.8088025450706482, Code:
p0.canRequestInteractAcrossProfilesUnchecked(p1);
  - Access Control Level: NONE

- API Name: canInteractAcrossProfiles(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.8257414102554321, Code:
p0.verifyCallingPackage(p1);
int v3 = this.mInjector.getCallingUserId();
List v4 = p0.getTargetUserProfilesUnchecked(p1, v3);
  - Access Control Level: SYS_OR_SIG

- API Name: setInteractAcrossProfilesAppOp(Ljava/lang/String;I)V in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.7933699488639832, Code:
CrossProfileAppsServiceImpl.canConfigureInteractAcrossProfiles(p1, v1);
  - Access Control Level: SYS_OR_SIG

- API Name: isDeviceSecure(II)Z in the following Class: Lcom.android.server.trust.TrustManagerService$1 with the following sink code entries:
  - Similarity: 0.7873862981796265, Code:
int v1 = ITrustManager$Stub.getCallingUid();
boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
int v3 = ITrustManager$Stub.getCallingPid();
int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceSecure", 0);
LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);
  - Access Control Level: SYS_OR_SIG

