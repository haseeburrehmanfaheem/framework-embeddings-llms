This is path 1 for the API with depth 2:
public boolean canConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	UserManager v4 = this.mInjector.getUserManager();
	[I v5 = v4.getProfileIds(v1, 0);
	if (v5.length >= 2) {
		boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v5);
		if (v6 == 0) {
			String v7 = AppOpsManager.opToPermission(93);
			if (v8 != 0) {
				boolean v3 = (v9 ^ 1);
				if (v3 != 0) {
					CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10 v11 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10(CrossProfileAppsServiceImpl,v1,p1);
					Object v13 = this.mInjector.withCleanCallingIdentity(v11);
					boolean v14 = v13.booleanValue();
					boolean v10 = v14;
					if (v10 != 0) {
						String v15 = AppOpsManager.opToPermission(93);
						if (v16 != 0) {
							CrossProfileAppsServiceImpl$$ExternalSyntheticLambda9 v18 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda9(CrossProfileAppsServiceImpl,p1);
							Object v20 = this.mInjector.withCleanCallingIdentity(v18);
							boolean v21 = v20.booleanValue();
							boolean v17 = v21;
							boolean v2 = v17;
							return v2;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean canConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	boolean v3 = CrossProfileAppsServiceImpl.canUserAttemptToConfigureInteractAcrossProfiles(p1, v1);
	if (v3 != 0) {
		boolean v4 = CrossProfileAppsServiceImpl.hasOtherProfileWithPackageInstalled(p1, v1);
		if (v4 != 0) {
			String v5 = AppOpsManager.opToPermission(93);
			if (v6 != 0) {
				boolean v7 = CrossProfileAppsServiceImpl.isCrossProfilePackageAllowlisted(p1);
				boolean v2 = v7;
				return v2;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean canConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	boolean v2 = p0.canConfigureInteractAcrossProfiles(p1, v1);
	return v2;
}
