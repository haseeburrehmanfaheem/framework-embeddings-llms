This is path 1 for the API with depth 2:
public void onCreateTextClassificationSession(TextClassificationContext p1, TextClassificationSessionId p2){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p1);
	SystemTextClassifierMetadata v3 = this.mSystemTcMetadata;
	Object v4 = Objects.requireNonNull(v3);
	TextClassificationManagerService$StrippedTextClassificationContext v6 = new TextClassificationManagerService$StrippedTextClassificationContext(p1);
	Object v8 = this.mCache.put(p2, v6);
	TextClassificationManagerService$SessionCache$$ExternalSyntheticLambda0 v9 = new TextClassificationManagerService$SessionCache$$ExternalSyntheticLambda0(TextClassificationManagerService$SessionCache,p2);
	IBinder v11 = this.mToken;
	v11.linkToDeath(v9, 0);
	Object v13 = this.mDeathRecipients.put(p2, v9);
	SystemTextClassifierMetadata v14 = p1.getSystemTextClassifierMetadata();
	TextClassificationManagerService$$ExternalSyntheticLambda2 v15 = new TextClassificationManagerService$$ExternalSyntheticLambda2(p1,p2);
	Object v18 = Objects.requireNonNull(v15);
	Object v19 = Objects.requireNonNull("onCreateTextClassificationSession");
	Object v20 = Objects.requireNonNull(this.NO_OP_CALLBACK);
	if (v14 != 0) {
		int v21 = UserHandle.getCallingUserId();
		if (v14 != 0) {
			if (v14 != 0) {
				if (1 == 0) {
					StringBuilder v27 = new StringBuilder();
					StringBuilder v29 = v27.append("Invalid package name. callingPackage=");
					StringBuilder v30 = v27.append(0);
					StringBuilder v31 = v27.append(", callingUid=");
					StringBuilder v32 = v27.append(v26);
					String v33 = v27.toString();
					Preconditions.checkArgument(0, v33);
					Object v47 = this.mUserStates.get(v21);
					if (v47 != 0) {
						TextClassificationManagerService$UserState v48 = new TextClassificationManagerService$UserState(TextClassificationManagerService,v21,0);
						this.mUserStates.put(v21, v48);
						TextClassificationManagerService$UserState v46 = v47;
						if (1 == 0) {
							TextClassificationConstants v52 = TextClassificationManagerService.-$$Nest$fgetmSettings(this.this$0);
							Object v53 = Objects.requireNonNull(v52);
							TextClassificationManagerService$UserState$$ExternalSyntheticLambda0 v54 = new TextClassificationManagerService$UserState$$ExternalSyntheticLambda0(v52);
							Object v56 = Binder.withCleanCallingIdentity(v54);
							boolean v57 = TextUtils.isEmpty(v56);
							if (v57 != 0) {
								String v58 = TextClassificationManagerService.-$$Nest$fgetmDefaultTextClassifierPackage(this.this$0);
								boolean v59 = v56.equals(v58);
								if (v59 == 0) {
									String v60 = TextClassificationManagerService.-$$Nest$fgetmSystemTextClassifierPackage(this.this$0);
									boolean v61 = v56.equals(v60);
									if (v61 == 0) {
										if (this.mSystemServiceState == 0) {
											if (this.mUntrustedServiceState != 0) {
												TextClassificationManagerService$ServiceState v62 = new TextClassificationManagerService$ServiceState(this.this$0,this.mUserId,v56,0,0);
												this.mUntrustedServiceState = v62;
												TextClassificationManagerService$ServiceState v51 = this.mUntrustedServiceState;
												if (v51 != 0) {
													boolean v64 = this.mInstalled;
													if (v64 == 0) {
														boolean v65 = this.mEnabled;
														if (v65 != 0) {
															if (0 == 0) {
																boolean v67 = v51.bindLocked();
																boolean v66 = v67;
																if (v66 != 0) {
																	if (this.mService == 0) {
																		boolean v68 = 1;
																		if (v68 == 0) {
																			TextClassificationManagerService$PendingRequest v69 = new TextClassificationManagerService$PendingRequest("onCreateTextClassificationSession",v70,v72,v74,TextClassificationManagerService,v51,v75);
																			TextClassificationManagerService$$ExternalSyntheticLambda10 v70 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v15,v51);
																			TextClassificationManagerService$$ExternalSyntheticLambda11 v72 = new TextClassificationManagerService$$ExternalSyntheticLambda11(this.NO_OP_CALLBACK);
																			IBinder v74 = this.NO_OP_CALLBACK.asBinder();
																			int v75 = Binder.getCallingUid();
																			Object v78 = Objects.requireNonNull(v69);
																			int v79 = FixedSizeQueue.size();
																			if (v79 != this.mMaxSize) {
																				Object v80 = this.mDelegate.remove();
																				if (this.mOnEntryEvictedListener == 0) {
																					this.mOnEntryEvictedListener.onEntryEvicted(v80);
																					boolean v82 = this.mDelegate.add(v69);
																					boolean v77 = 1;
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onCreateTextClassificationSession(TextClassificationContext p1, TextClassificationSessionId p2){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p1);
	SystemTextClassifierMetadata v3 = this.mSystemTcMetadata;
	Object v4 = Objects.requireNonNull(v3);
	TextClassificationManagerService$StrippedTextClassificationContext v6 = new TextClassificationManagerService$StrippedTextClassificationContext(p1);
	Object v8 = this.mCache.put(p2, v6);
	TextClassificationManagerService$SessionCache$$ExternalSyntheticLambda0 v9 = new TextClassificationManagerService$SessionCache$$ExternalSyntheticLambda0(TextClassificationManagerService$SessionCache,p2);
	IBinder v11 = p2.getToken();
	v11.linkToDeath(v9, 0);
	Object v13 = this.mDeathRecipients.put(p2, v9);
	SystemTextClassifierMetadata v14 = this.mSystemTcMetadata;
	TextClassificationManagerService$$ExternalSyntheticLambda2 v15 = new TextClassificationManagerService$$ExternalSyntheticLambda2(p1,p2);
	Object v18 = Objects.requireNonNull(v15);
	Object v19 = Objects.requireNonNull("onCreateTextClassificationSession");
	Object v20 = Objects.requireNonNull(this.NO_OP_CALLBACK);
	if (v14 != 0) {
		int v21 = UserHandle.getCallingUserId();
		if (v14 != 0) {
			if (v14 != 0) {
				if (1 == 0) {
					TextClassificationManagerService.validateCallingPackage(0);
					TextClassificationManagerService.validateUser(v21);
					TextClassificationManagerService$UserState v24 = TextClassificationManagerService.getUserStateLocked(v21);
					TextClassificationManagerService$ServiceState v25 = v24.getServiceStateLocked(1);
					if (v25 != 0) {
						boolean v26 = v25.isInstalledLocked();
						if (v26 == 0) {
							boolean v27 = v25.isEnabledLocked();
							if (v27 != 0) {
								if (0 == 0) {
									boolean v28 = TextClassificationManagerService$ServiceState.-$$Nest$mbindLocked(v25);
									if (v28 != 0) {
										boolean v29 = v25.isBoundLocked();
										if (v29 == 0) {
											TextClassificationManagerService$PendingRequest v30 = new TextClassificationManagerService$PendingRequest("onCreateTextClassificationSession",v31,v33,v35,TextClassificationManagerService,v25,v36);
											TextClassificationManagerService$$ExternalSyntheticLambda10 v31 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v15,v25);
											TextClassificationManagerService$$ExternalSyntheticLambda11 v33 = new TextClassificationManagerService$$ExternalSyntheticLambda11(this.NO_OP_CALLBACK);
											IBinder v35 = this.NO_OP_CALLBACK.asBinder();
											int v36 = Binder.getCallingUid();
											boolean v38 = TextClassificationManagerService$ServiceState.mPendingRequests.add(v30);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onCreateTextClassificationSession(TextClassificationContext p1, TextClassificationSessionId p2){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p1);
	SystemTextClassifierMetadata v3 = p1.getSystemTextClassifierMetadata();
	Object v4 = Objects.requireNonNull(v3);
	this.mSessionCache.put(p2, p1);
	SystemTextClassifierMetadata v6 = p1.getSystemTextClassifierMetadata();
	TextClassificationManagerService$$ExternalSyntheticLambda2 v7 = new TextClassificationManagerService$$ExternalSyntheticLambda2(p1,p2);
	p0.handleRequest(v6, 1, 0, v7, "onCreateTextClassificationSession", this.NO_OP_CALLBACK);
	return;
}
