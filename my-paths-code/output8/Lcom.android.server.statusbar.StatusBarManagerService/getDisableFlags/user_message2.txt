The method getDisableFlags has the following code snippet:

This is path 1 for the API with depth 1:
public [I getDisableFlags(IBinder p1, int p2){
	int v4 = this.mDisableRecords.size();
	if (0 >= v4) {
		Pair v5 = new Pair(v6,get());
		Integer v6 = Integer.valueOf(0);
		Pair v3 = v5;
		if (Pair.second == 0) {
			[I v8 = new [I(2);
			return v8;
		}
	}
}


This is path 2 for the API with depth 0:
public [I getDisableFlags(IBinder p1, int p2){
	p0.enforceStatusBar();
	Pair v2 = p0.findMatchingRecordLocked(p1, p2);
	if (Pair.second == 0) {
		[I v3 = new [I(2);
		return v3;
	}
}

and the following sink code:
['[I v8 = new [I(2);\nreturn v8;', '[I v3 = new [I(2);\nreturn v3;']

The method getDisableFlags has the following similar APIs:

- API Name: getCarrierFrequencies()[I with Similarity Score: 0.8935664892196655
  - Access Control Level: NORMAL and the following code:
[I v4 = new [I((v3.length * 2));
if (0 >= v3.length) {
if ((0 + 1) >= v3.length) {
return v4;

- API Name: getCarrierFrequencies()[I with Similarity Score: 0.8615399599075317
  - Access Control Level: NORMAL and the following code:
[I v4 = new [I((v3.length * 2));
if (0 >= v3.length) {
if ((0 + 1) >= v3.length) {
return v4;

