The method registerStatusBar in the following class Lcom.android.server.statusbar.StatusBarManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public RegisterStatusBarResult registerStatusBar(IStatusBar p1){
	this.mBar = p1;
	IStatusBar v10 = this.mBar;
	IBinder v11 = v10.asBinder();
	StatusBarManagerService$DeathRecipient v12 = this.mDeathRecipient;
	v11.linkToDeath(v12, 0);
	UiThread.ensureThreadLocked();
	Handler v15 = this.sHandler;
	StatusBarManagerService$$ExternalSyntheticLambda4 v17 = new StatusBarManagerService$$ExternalSyntheticLambda4(StatusBarManagerService);
	boolean v19 = v15.post(v17);
	StatusBarManagerService$$ExternalSyntheticLambda5 v20 = new StatusBarManagerService$$ExternalSyntheticLambda5(StatusBarManagerService);
	boolean v22 = this.mHandler.post(v20);
	ArrayMap v23 = new ArrayMap(this.mIcons);
	Object v25 = this.mDisplayUiState.get(0);
	ArraySet v26 = StatusBarManagerService$UiState.-$$Nest$fgetmTransientBarTypes(v25);
	int v27 = v26.size();
	[I v28 = new [I(v27);
	if (0 >= v27) {
		RegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v34,v35,v36,v37,v38,v39,v43,v44,v45,v46,v47,v28,v48);
		int v31 = this.mDisableRecords.size();
		if (0 >= v31) {
			Object v32 = this.mDisableRecords.get(0);
			if (StatusBarManagerService$DisableRecord.userId != this.mCurrentUserId) {
				if (1 == 1) {
					if (1 == 2) {
						int v33 = this.what2;
						if ((0 + 1) >= v31) {
							int v30 = 0;
							int v34 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25);
							AppearanceRegion v35 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v25);
							int v36 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v25);
							int v37 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v25);
							boolean v38 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v25);
							int v40 = this.mDisableRecords.size();
							if (((0 + 1) + 1) >= v40) {
								Object v41 = this.mDisableRecords.get(((0 + 1) + 1));
								if (StatusBarManagerService$DisableRecord.userId != this.mCurrentUserId) {
									if (2 == 1) {
										if (2 == 2) {
											int v42 = this.what2;
											if ((((0 + 1) + 1) + 1) >= v40) {
												int v39 = 0;
												IBinder v43 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v25);
												boolean v44 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v25);
												int v45 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v25);
												InsetsVisibilities v46 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v25);
												String v47 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v25);
												LetterboxDetails v48 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v25);
												return v29;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public RegisterStatusBarResult registerStatusBar(IStatusBar p1){
	this.mBar = p1;
	IStatusBar v10 = StatusBarManagerService.-$$Nest$fgetmBar(this.this$0);
	IBinder v11 = v10.asBinder();
	StatusBarManagerService$DeathRecipient v12 = StatusBarManagerService.-$$Nest$fgetmDeathRecipient(this.this$0);
	v11.linkToDeath(v12, 0);
	Handler v15 = UiThread.getHandler();
	StatusBarManagerService$$ExternalSyntheticLambda4 v16 = new StatusBarManagerService$$ExternalSyntheticLambda4(StatusBarManagerService);
	boolean v18 = v15.post(v16);
	StatusBarManagerService$$ExternalSyntheticLambda5 v19 = new StatusBarManagerService$$ExternalSyntheticLambda5(StatusBarManagerService);
	boolean v21 = this.mHandler.post(v19);
	ArrayMap v22 = new ArrayMap(this.mIcons);
	Object v24 = this.mDisplayUiState.get(0);
	ArraySet v25 = this.mTransientBarTypes;
	int v26 = v25.size();
	[I v27 = new [I(v26);
	if (0 >= v26) {
		RegisterStatusBarResult v28 = new RegisterStatusBarResult(v22,v29,v33,v34,v35,v36,v37,v38,v42,v43,v44,v45,v46,v27,v47);
		int v30 = this.mDisableRecords.size();
		if (0 >= v30) {
			Object v31 = this.mDisableRecords.get(0);
			if (StatusBarManagerService$DisableRecord.userId != this.mCurrentUserId) {
				int v32 = v31.getFlags(1);
				if ((0 + 1) >= v30) {
					int v29 = 0;
					int v33 = this.mAppearance;
					AppearanceRegion v34 = this.mAppearanceRegions;
					int v35 = this.mImeWindowVis;
					int v36 = this.mImeBackDisposition;
					boolean v37 = this.mShowImeSwitcher;
					int v39 = this.mDisableRecords.size();
					if (((0 + 1) + 1) >= v39) {
						Object v40 = this.mDisableRecords.get(((0 + 1) + 1));
						if (StatusBarManagerService$DisableRecord.userId != this.mCurrentUserId) {
							int v41 = v40.getFlags(2);
							if ((((0 + 1) + 1) + 1) >= v39) {
								int v38 = 0;
								IBinder v42 = this.mImeToken;
								boolean v43 = this.mNavbarColorManagedByIme;
								int v44 = this.mBehavior;
								InsetsVisibilities v45 = this.mRequestedVisibilities;
								String v46 = this.mPackageName;
								LetterboxDetails v47 = this.mLetterboxDetails;
								return v28;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public RegisterStatusBarResult registerStatusBar(IStatusBar p1){
	p0.enforceStatusBarService();
	this.mBar = p1;
	this.mDeathRecipient.linkToDeath();
	p0.notifyBarAttachChanged();
	ArrayMap v10 = new ArrayMap(this.mIcons);
	Object v12 = this.mDisplayUiState.get(0);
	ArraySet v13 = StatusBarManagerService$UiState.-$$Nest$fgetmTransientBarTypes(v12);
	int v14 = v13.size();
	[I v15 = new [I(v14);
	if (0 >= v14) {
		RegisterStatusBarResult v16 = new RegisterStatusBarResult(v10,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v15,v29);
		int v17 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1);
		int v18 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v12);
		AppearanceRegion v19 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v12);
		int v20 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v12);
		int v21 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v12);
		boolean v22 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v12);
		int v23 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2);
		IBinder v24 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v12);
		boolean v25 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v12);
		int v26 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v12);
		InsetsVisibilities v27 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v12);
		String v28 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v12);
		LetterboxDetails v29 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v12);
		return v16;
	}
}

and the following sink code:
['this.mBar = p1;\nIStatusBar v10 = this.mBar;\nIBinder v11 = v10.asBinder();\nv11.linkToDeath(v12, 0);', 'ArrayMap v10 = new ArrayMap(this.mIcons);\nObject v12 = this.mDisplayUiState.get(0);\nRegisterStatusBarResult v16 = new RegisterStatusBarResult(v10,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v15,v29);', 'Handler v15 = this.sHandler;\nboolean v19 = v15.post(v17);\nStatusBarManagerService$$ExternalSyntheticLambda5 v20 = new StatusBarManagerService$$ExternalSyntheticLambda5(StatusBarManagerService);\nboolean v22 = this.mHandler.post(v20);']

The method registerStatusBar has the following similar APIs:

- API Name: shutdown()V in the following Class: Lcom.android.server.statusbar.StatusBarManagerService with the following sink code entries:
  - Similarity: 0.8878569006919861, Code:
StatusBarManagerService$$ExternalSyntheticLambda3 v18 = new StatusBarManagerService$$ExternalSyntheticLambda3("userrequested");
boolean v20 = this.mHandler.post(v18);
  - Access Control Level: SYS_OR_SIG

- API Name: restart()V in the following Class: Lcom.android.server.statusbar.StatusBarManagerService with the following sink code entries:
  - Similarity: 0.8493876457214355, Code:
StatusBarManagerService$$ExternalSyntheticLambda0 v4 = new StatusBarManagerService$$ExternalSyntheticLambda0(p0);
boolean v6 = this.mHandler.post(v4);
  - Access Control Level: SYS_OR_SIG

- API Name: setImeWindowStatus(ILandroid/os/IBinder;IIZ)V in the following Class: Lcom.android.server.statusbar.StatusBarManagerService with the following sink code entries:
  - Similarity: 0.8318554162979126, Code:
StatusBarManagerService$$ExternalSyntheticLambda1 v10 = new StatusBarManagerService$$ExternalSyntheticLambda1(p0,p1,p2,p3,p4,p5);
boolean v12 = this.mHandler.post(v10);
  - Similarity: 0.7157881855964661, Code:
Object v4 = this.mDisplayUiState.get(p1);
StatusBarManagerService$UiState v5 = new StatusBarManagerService$UiState(0);
this.mDisplayUiState.put(p1, v5);
this.mImeWindowVis = p3;
this.mImeBackDisposition = p4;
this.mShowImeSwitcher = p5;
this.mImeToken = p2;
  - Access Control Level: SYS_OR_SIG

- API Name: reboot(Z)V in the following Class: Lcom.android.server.statusbar.StatusBarManagerService with the following sink code entries:
  - Similarity: 0.8135672211647034, Code:
int v3 = Binder.getCallingPid();
this.INSTANCE.recordCheckPointInternal(v3, "safemode");
this.mNotificationDelegate.prepareForPossibleShutdown();
StatusBarManagerService$$ExternalSyntheticLambda2 v8 = new StatusBarManagerService$$ExternalSyntheticLambda2(p1,"safemode");
boolean v10 = this.mHandler.post(v8);
  - Similarity: 0.7935555577278137, Code:
int v2 = Binder.getCallingPid();
ShutdownCheckPoints.recordCheckPoint(v2, "safemode");
this.mNotificationDelegate.prepareForPossibleShutdown();
StatusBarManagerService$$ExternalSyntheticLambda2 v6 = new StatusBarManagerService$$ExternalSyntheticLambda2(p1,"safemode");
boolean v8 = this.mHandler.post(v6);
  - Similarity: 0.7702520489692688, Code:
int v3 = Binder.getCallingPid();
ShutdownCheckPoints$SystemServerCheckPoint v7 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,"safemode");
ShutdownCheckPoints.recordCheckPointInternal(v7);
this.mNotificationDelegate.prepareForPossibleShutdown();
StatusBarManagerService$$ExternalSyntheticLambda2 v18 = new StatusBarManagerService$$ExternalSyntheticLambda2(p1,"safemode");
boolean v20 = this.mHandler.post(v18);
  - Access Control Level: SYS_OR_SIG

- API Name: unregisterVcnStatusCallback(Landroid/net/vcn/IVcnStatusCallback;)V in the following Class: Lcom.android.server.VcnManagementService with the following sink code entries:
  - Similarity: 0.7394957542419434, Code:
IBinder v3 = p1.asBinder();
Object v4 = this.mRegisteredStatusCallbacks.remove(v3);
boolean v5 = v3.unlinkToDeath(v4, 0);
  - Access Control Level: NONE

