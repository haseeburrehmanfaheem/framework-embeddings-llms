This is path 1 for the API with depth 0:
public void setDebugFlags(int p1, int p2){
	if ((p2 & 4) == 0) {
		boolean v2 = StorageManager.isFileEncryptedNativeOnly();
		if (v2 != 0) {
			boolean v3 = this.mLockPatternUtils.isCredentialRequiredToDecrypt(0);
			if (v3 != 0) {
				long v4 = Binder.clearCallingIdentity();
				if ((p1 & 4) == 0) {
					String v5 = Boolean.toString(1);
					SystemProperties.set("persist.sys.emulate_fbe", v5);
					Object v7 = this.mContext.getSystemService(PowerManage.class);
					v7.reboot(0);
					Binder.restoreCallingIdentity(v4);
					if ((p2 & 3) == 0) {
						if ((p1 & 1) == 0) {
							long v10 = Binder.clearCallingIdentity();
							SystemProperties.set("persist.sys.adoptable", "force_on");
							Message v12 = this.mHandler.obtainMessage(10);
							v12.sendToTarget();
							Binder.restoreCallingIdentity(v10);
							if ((p2 & 24) == 0) {
								if ((p2 & 32) == 0) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public void setDebugFlags(int p1, int p2){
	if ((p2 & 4) == 0) {
		boolean v2 = StorageManager.isFileEncryptedNativeOnly();
		if (v2 != 0) {
			boolean v3 = this.mLockPatternUtils.isCredentialRequiredToDecrypt(0);
			if (v3 != 0) {
				long v4 = Binder.clearCallingIdentity();
				if ((p1 & 4) == 0) {
					String v5 = Boolean.toString(1);
					SystemProperties.set("persist.sys.emulate_fbe", v5);
					Object v7 = this.mContext.getSystemService(PowerManage.class);
					v7.reboot(0);
					Binder.restoreCallingIdentity(v4);
					if ((p2 & 3) == 0) {
						if ((p1 & 1) == 0) {
							if ((p1 & 2) == 0) {
								long v10 = Binder.clearCallingIdentity();
								SystemProperties.set("persist.sys.adoptable", "force_on");
								Message v12 = this.mHandler.obtainMessage(10);
								v12.sendToTarget();
								Binder.restoreCallingIdentity(v10);
								if ((p2 & 24) == 0) {
									if ((p2 & 32) == 0) {
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setDebugFlags(int p1, int p2){
	if ((p2 & 4) == 0) {
		boolean v2 = StorageManager.isFileEncryptedNativeOnly();
		if (v2 != 0) {
			boolean v3 = this.mLockPatternUtils.isCredentialRequiredToDecrypt(0);
			if (v3 != 0) {
				long v4 = Binder.clearCallingIdentity();
				if ((p1 & 4) == 0) {
					String v5 = Boolean.toString(1);
					SystemProperties.set("persist.sys.emulate_fbe", v5);
					Object v7 = this.mContext.getSystemService(PowerManage.class);
					v7.reboot(0);
					Binder.restoreCallingIdentity(v4);
					if ((p2 & 3) == 0) {
						if ((p2 & 24) == 0) {
							if ((p1 & 8) == 0) {
								long v10 = Binder.clearCallingIdentity();
								SystemProperties.set("persist.sys.sdcardfs", "force_on");
								Message v12 = this.mHandler.obtainMessage(10);
								v12.sendToTarget();
								Binder.restoreCallingIdentity(v10);
								if ((p2 & 32) == 0) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
