This is path 1 for the API with depth 2:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				Object v7 = v5.next();
				boolean v8 = StorageManager.isFileEncryptedNativeOrEmulated();
				if (v8 == 0) {
					boolean v11 = ArrayUtils.contains(this.users, UserInfo.id);
					boolean v10 = v11;
					boolean v9 = v10;
					if (v9 != 0) {
						boolean v12 = v5.hasNext();
						if (v12 == 0) {
							boolean v13 = "primary_physical".equals(this.mPrimaryStorageUuid);
							if (v13 != 0) {
								boolean v14 = "primary_physical".equals(p1);
								if (v14 == 0) {
									if (this.mMoveCallback != 0) {
										this.mMoveCallback.onStatusChanged(-1, 82, -1);
										if (82 != 82) {
											this.mPrimaryStorageUuid = this.mMoveTargetUuid;
											FileOutputStream v26 = this.mSettingsFile.startWrite();
											TypedXmlSerializer v27 = Xml.resolveSerializer(v26);
											if (0 == 0) {
												this.mSettingsFile.failWrite(0);
												boolean v29 = PackageManager.isMoveStatusFinished(82);
												if (v29 == 0) {
													this.mMoveCallback = 0;
													this.mMoveTargetUuid = 0;
													if (this.mMoveCallback != 0) {
														this.mMoveCallback.onStatusChanged(-1, -100, -1);
														if (-100 != 82) {
															this.mPrimaryStorageUuid = this.mMoveTargetUuid;
															FileOutputStream v48 = this.mSettingsFile.startWrite();
															TypedXmlSerializer v49 = Xml.resolveSerializer(v48);
															if (0 == 0) {
																this.mSettingsFile.failWrite(0);
																boolean v51 = PackageManager.isMoveStatusFinished(-100);
																if (v51 == 0) {
																	this.mMoveCallback = 0;
																	this.mMoveTargetUuid = 0;
																	Message v60 = this.mHandler.obtainMessage(10);
																	v60.sendToTarget();
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				Object v7 = v5.next();
				boolean v8 = StorageManager.isFileEncryptedNativeOrEmulated();
				if (v8 == 0) {
					boolean v10 = this.mLocalUnlockedUsers.contains(UserInfo.id);
					boolean v9 = v10;
					if (v9 != 0) {
						boolean v11 = v5.hasNext();
						if (v11 == 0) {
							boolean v12 = "primary_physical".equals(this.mPrimaryStorageUuid);
							if (v12 != 0) {
								boolean v13 = "primary_physical".equals(p1);
								if (v13 == 0) {
									if (this.mMoveCallback != 0) {
										this.mMoveCallback.onStatusChanged(-1, 82, -1);
										if (82 != 82) {
											this.mPrimaryStorageUuid = this.mMoveTargetUuid;
											StorageManagerService.writeSettingsLocked();
											boolean v25 = PackageManager.isMoveStatusFinished(82);
											if (v25 == 0) {
												this.mMoveCallback = 0;
												this.mMoveTargetUuid = 0;
												if (this.mMoveCallback != 0) {
													this.mMoveCallback.onStatusChanged(-1, -100, -1);
													if (-100 != 82) {
														this.mPrimaryStorageUuid = this.mMoveTargetUuid;
														StorageManagerService.writeSettingsLocked();
														boolean v44 = PackageManager.isMoveStatusFinished(-100);
														if (v44 == 0) {
															this.mMoveCallback = 0;
															this.mMoveTargetUuid = 0;
															Message v53 = this.mHandler.obtainMessage(10);
															v53.sendToTarget();
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				Object v7 = v5.next();
				boolean v8 = StorageManager.isFileEncryptedNativeOrEmulated();
				if (v8 == 0) {
					boolean v9 = p0.isUserKeyUnlocked(UserInfo.id);
					if (v9 != 0) {
						boolean v10 = v5.hasNext();
						if (v10 == 0) {
							boolean v11 = "primary_physical".equals(this.mPrimaryStorageUuid);
							if (v11 != 0) {
								boolean v12 = "primary_physical".equals(p1);
								if (v12 == 0) {
									VolumeInfo v13 = p0.findStorageForUuidAsUser(this.mPrimaryStorageUuid, this.mCurrentUserId);
									VolumeInfo v14 = p0.findStorageForUuidAsUser(p1, this.mCurrentUserId);
									if (v13 != 0) {
										if (v14 != 0) {
											StorageManagerService$12 v15 = new StorageManagerService$12(p0);
											this.mVold.moveStorage(VolumeInfo.id, VolumeInfo.id, v15);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
