This is path 1 for the API with depth 2:
public void unlockUserKey(int p1, int p2, byte[] p3){
	boolean v15 = ArrayUtils.contains(this.users, p1);
	boolean v14 = v15;
	boolean v13 = v14;
	if (v13 == 0) {
		if (v1 == 0) {
			boolean v16 = this.mLockPatternUtils.isSecure(p1);
			if (v16 == 0) {
				boolean v17 = ArrayUtils.isEmpty(p3);
				if (v17 == 0) {
					String v18 = p0.encodeBytes(p3);
					this.mVold.unlockUserKey(p1, p2, v18);
					[I v21 = ArrayUtils.appendInt(this.users, p1);
					this.users = v21;
					UserManager.invalidateIsUserUnlockedCache();
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void unlockUserKey(int p1, int p2, byte[] p3){
	boolean v14 = this.mLocalUnlockedUsers.contains(p1);
	boolean v13 = v14;
	if (v13 == 0) {
		if (v1 == 0) {
			boolean v15 = this.mLockPatternUtils.isSecure(p1);
			if (v15 == 0) {
				boolean v16 = ArrayUtils.isEmpty(p3);
				if (v16 == 0) {
					boolean v18 = ArrayUtils.isEmpty(p3);
					if (v18 == 0) {
						String v19 = HexDump.toHexString(p3);
						String v17 = v19;
						this.mVold.unlockUserKey(p1, p2, v17);
						[I v22 = ArrayUtils.appendInt(this.users, p1);
						this.users = v22;
						StorageManagerService$WatchedLockedUsers.invalidateIsUserUnlockedCache();
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void unlockUserKey(int p1, int p2, byte[] p3){
	boolean v13 = p0.isUserKeyUnlocked(p1);
	if (v13 == 0) {
		if (v1 == 0) {
			boolean v14 = this.mLockPatternUtils.isSecure(p1);
			if (v14 == 0) {
				boolean v15 = ArrayUtils.isEmpty(p3);
				if (v15 == 0) {
					String v16 = p0.encodeBytes(p3);
					this.mVold.unlockUserKey(p1, p2, v16);
					this.mLocalUnlockedUsers.append(p1);
					return;
				}
			}
		}
	}
}
