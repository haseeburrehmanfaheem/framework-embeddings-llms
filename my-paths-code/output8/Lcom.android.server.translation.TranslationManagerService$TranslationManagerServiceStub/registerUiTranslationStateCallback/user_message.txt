This is path 1 for the API with depth 2:
public void registerUiTranslationStateCallback(IRemoteCallback p1, int p2){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		int v4 = Binder.getCallingUid();
		Integer v6 = Integer.valueOf(v4);
		boolean v7 = this.mCallbacks.register(p1, v6);
		int v8 = this.mActiveTranslations.size();
		if (v8 != 0) {
			Object v10 = LocalServices.getService(InputMethodManagerInterna.class);
			List v11 = v10.getEnabledInputMethodListAsUser(AbstractPerUserSystemService.mUserId);
			List v9 = v11;
			int v12 = this.mActiveTranslations.size();
			if (0 >= v12) {
				Object v13 = this.mActiveTranslations.valueAt(0);
				if (this.DEBUG == 0) {
					Bundle v27 = new Bundle();
					v27.putInt("state", 0);
					if (TranslationManagerServiceImpl$ActiveTranslation.sourceSpec == 0) {
						ULocale v30 = TranslationManagerServiceImpl$ActiveTranslation.sourceSpec.getLocale();
						v27.putSerializable("source_locale", v30);
						ULocale v32 = TranslationManagerServiceImpl$ActiveTranslation.targetSpec.getLocale();
						v27.putSerializable("target_locale", v32);
						v27.putString("package_name", TranslationManagerServiceImpl$ActiveTranslation.packageName);
						Bundle v26 = v27;
						if (v4 != TranslationManagerServiceImpl$ActiveTranslation.translatedAppUid) {
							Iterator v36 = v9.iterator();
							boolean v37 = v36.hasNext();
							if (v37 == 0) {
								Object v38 = v36.next();
								ServiceInfo v39 = v38.getServiceInfo();
								if (v4 != ApplicationInfo.uid) {
									boolean v40 = v36.hasNext();
									if (v40 == 0) {
										Object v41 = v36.next();
										ServiceInfo v42 = v41.getServiceInfo();
										if (v4 != ApplicationInfo.uid) {
											if (0 != 0) {
												p1.sendResult(v26);
												if (TranslationManagerServiceImpl$ActiveTranslation.isPaused == 0) {
													Bundle v45 = new Bundle();
													v45.putInt("state", 1);
													if (TranslationManagerServiceImpl$ActiveTranslation.sourceSpec == 0) {
														ULocale v48 = TranslationManagerServiceImpl$ActiveTranslation.sourceSpec.getLocale();
														v45.putSerializable("source_locale", v48);
														ULocale v50 = TranslationManagerServiceImpl$ActiveTranslation.targetSpec.getLocale();
														v45.putSerializable("target_locale", v50);
														v45.putString("package_name", TranslationManagerServiceImpl$ActiveTranslation.packageName);
														Bundle v44 = v45;
														if (v4 != TranslationManagerServiceImpl$ActiveTranslation.translatedAppUid) {
															Iterator v54 = v9.iterator();
															boolean v55 = v54.hasNext();
															if (v55 == 0) {
																Object v56 = v54.next();
																ServiceInfo v57 = v56.getServiceInfo();
																if (v4 != ApplicationInfo.uid) {
																	boolean v58 = v54.hasNext();
																	if (v58 == 0) {
																		Object v59 = v54.next();
																		ServiceInfo v60 = v59.getServiceInfo();
																		if (v4 != ApplicationInfo.uid) {
																			if (0 != 0) {
																				p1.sendResult(v44);
																				int v62 = this.mActiveTranslations.size();
																				if ((0 + 1) >= v62) {
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerUiTranslationStateCallback(IRemoteCallback p1, int p2){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		int v4 = Binder.getCallingUid();
		Integer v6 = Integer.valueOf(v4);
		boolean v7 = this.mCallbacks.register(p1, v6);
		int v8 = this.mActiveTranslations.size();
		if (v8 != 0) {
			List v9 = TranslationManagerServiceImpl.getEnabledInputMethods();
			int v10 = this.mActiveTranslations.size();
			if (0 >= v10) {
				Object v11 = this.mActiveTranslations.valueAt(0);
				if (this.DEBUG == 0) {
					Bundle v24 = TranslationManagerServiceImpl.createResultForCallback(0, TranslationManagerServiceImpl$ActiveTranslation.sourceSpec, TranslationManagerServiceImpl$ActiveTranslation.targetSpec, TranslationManagerServiceImpl$ActiveTranslation.packageName);
					TranslationManagerServiceImpl.invokeCallback(v4, TranslationManagerServiceImpl$ActiveTranslation.translatedAppUid, p1, v24, v9);
					if (TranslationManagerServiceImpl$ActiveTranslation.isPaused == 0) {
						Bundle v26 = TranslationManagerServiceImpl.createResultForCallback(1, TranslationManagerServiceImpl$ActiveTranslation.sourceSpec, TranslationManagerServiceImpl$ActiveTranslation.targetSpec, TranslationManagerServiceImpl$ActiveTranslation.packageName);
						TranslationManagerServiceImpl.invokeCallback(v4, TranslationManagerServiceImpl$ActiveTranslation.translatedAppUid, p1, v26, v9);
						int v28 = this.mActiveTranslations.size();
						if ((0 + 1) >= v28) {
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void registerUiTranslationStateCallback(IRemoteCallback p1, int p2){
	Object v1 = TranslationManagerService.access$1000(this.this$0);
	AbstractPerUserSystemService v2 = TranslationManagerService.access$1100(this.this$0, p2);
	if (v2 == 0) {
		int v3 = Binder.getCallingUid();
		v2.registerUiTranslationStateCallbackLocked(p1, v3);
		return;
	}
}
