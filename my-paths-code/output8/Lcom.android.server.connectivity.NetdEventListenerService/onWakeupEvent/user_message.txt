This is path 1 for the API with depth 2:
public void onWakeupEvent(String p1, int p2, int p3, int p4, byte[] p5, String p6, String p7, int p8, int p9, long p10){
	String v1 = p1.replaceFirst("iface:", "");
	if ((p10 < 0) <= 0) {
		WakeupEvent v2 = new WakeupEvent();
		WakeupEvent.iface = v1;
		WakeupEvent.timestampMs = (p10 / 1000000);
		WakeupEvent.uid = p2;
		WakeupEvent.ethertype = p3;
		MacAddress v4 = MacAddress.fromBytes(p5);
		WakeupEvent.dstHwAddr = v4;
		WakeupEvent.srcIp = p6;
		WakeupEvent.dstIp = p7;
		WakeupEvent.ipNextHeader = p4;
		WakeupEvent.srcPort = p8;
		WakeupEvent.dstPort = p9;
		this.mCursor = (1 + this.mCursor);
		int v7 = RingBuffer.indexOf(this.mCursor);
		Object v8 = this.mWakeupStats.get(WakeupEvent.iface);
		if (v8 != 0) {
			WakeupStats v9 = new WakeupStats(WakeupEvent.iface);
			Object v11 = this.mWakeupStats.put(WakeupEvent.iface, v9);
			this.totalWakeups = (this.totalWakeups + 1);
			if (WakeupEvent.uid < 10000) {
				this.applicationWakeups = (this.applicationWakeups + 1);
				int v13 = WakeupEvent.dstHwAddr.getAddressType();
				this.l2MulticastCount = (this.l2MulticastCount + 1);
				WakeupStats.increment(this.ethertypes, WakeupEvent.ethertype);
				if (WakeupEvent.ipNextHeader < 0) {
					WakeupStats.increment(this.ipNextHeaders, WakeupEvent.ipNextHeader);
					String v16 = WakeupEvent.dstHwAddr.toString();
					FrameworkStatsLog.write(44, p2, v1, p3, v16, p6, p7, p4, p8, p9);
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onWakeupEvent(String p1, int p2, int p3, int p4, byte[] p5, String p6, String p7, int p8, int p9, long p10){
	String v1 = p1.replaceFirst("iface:", "");
	if ((p10 < 0) <= 0) {
		WakeupEvent v2 = new WakeupEvent();
		WakeupEvent.iface = v1;
		WakeupEvent.timestampMs = (p10 / 1000000);
		WakeupEvent.uid = p2;
		WakeupEvent.ethertype = p3;
		MacAddress v4 = MacAddress.fromBytes(p5);
		WakeupEvent.dstHwAddr = v4;
		WakeupEvent.srcIp = p6;
		WakeupEvent.dstIp = p7;
		WakeupEvent.ipNextHeader = p4;
		WakeupEvent.srcPort = p8;
		WakeupEvent.dstPort = p9;
		this.mWakeupEvents.append(v2);
		Object v7 = this.mWakeupStats.get(WakeupEvent.iface);
		if (v7 != 0) {
			WakeupStats v8 = new WakeupStats(WakeupEvent.iface);
			Object v10 = this.mWakeupStats.put(WakeupEvent.iface, v8);
			v7.countEvent(v2);
			String v12 = WakeupEvent.dstHwAddr.toString();
			StatsEvent$Builder v14 = StatsEvent.newBuilder();
			StatsEvent$Builder v15 = v14.setAtomId(44);
			StatsEvent$Builder v16 = v14.writeInt(p2);
			if (44 != 44) {
				StatsEvent$Builder v17 = v14.addBooleanAnnotation(1, 1);
				StatsEvent$Builder v18 = v14.writeString(v1);
				StatsEvent$Builder v19 = v14.writeInt(p3);
				StatsEvent$Builder v20 = v14.writeString(v12);
				StatsEvent$Builder v21 = v14.writeString(p6);
				StatsEvent$Builder v22 = v14.writeString(p7);
				StatsEvent$Builder v23 = v14.writeInt(p4);
				StatsEvent$Builder v24 = v14.writeInt(p8);
				StatsEvent$Builder v25 = v14.writeInt(p9);
				StatsEvent$Builder v26 = v14.usePooledBuffer();
				StatsEvent v27 = v14.build();
				StatsLog.write(v27);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onWakeupEvent(String p1, int p2, int p3, int p4, byte[] p5, String p6, String p7, int p8, int p9, long p10){
	String v1 = p1.replaceFirst("iface:", "");
	if ((p10 < 0) <= 0) {
		WakeupEvent v2 = new WakeupEvent();
		WakeupEvent.iface = v1;
		WakeupEvent.timestampMs = (p10 / 1000000);
		WakeupEvent.uid = p2;
		WakeupEvent.ethertype = p3;
		MacAddress v4 = MacAddress.fromBytes(p5);
		WakeupEvent.dstHwAddr = v4;
		WakeupEvent.srcIp = p6;
		WakeupEvent.dstIp = p7;
		WakeupEvent.ipNextHeader = p4;
		WakeupEvent.srcPort = p8;
		WakeupEvent.dstPort = p9;
		p0.addWakeupEvent(v2);
		String v6 = WakeupEvent.dstHwAddr.toString();
		FrameworkStatsLog.write(44, p2, v1, p3, v6, p6, p7, p4, p8, p9);
		return;
	}
}
