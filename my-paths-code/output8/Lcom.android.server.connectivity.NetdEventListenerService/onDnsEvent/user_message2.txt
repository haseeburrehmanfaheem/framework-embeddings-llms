The method onDnsEvent in the following class Lcom.android.server.connectivity.NetdEventListenerService has the following code snippet:

This is path 1 for the API with depth 2:
public void onDnsEvent(int p1, int p2, int p3, int p4, String p5, String p6, int p7, int p8){
	long v1 = System.currentTimeMillis();
	Object v3 = this.mNetworkMetrics.get(p1);
	NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);
	if (v4 == 0) {
		[I v5 = v4.getTransportTypes();
		if (0 >= v5.length) {
			if ((0 + 1) >= v5.length) {
				long v6 = (0 | (1 << v5[0]));
				if (v3 == 0) {
					if (v4 == 0) {
						if ((NetworkMetrics.transports < v6) == 0) {
							if (1 != 0) {
								long v8 = Math.abs((v1 - this.mLastSnapshot));
								if ((v8 < 300000) > 0) {
									long v9 = NetdEventListenerService.projectSnapshotTime(v1);
									this.mLastSnapshot = v9;
									NetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);
									boolean v11 = NetdEventListenerService$NetworkMetricsSnapshot.stats.isEmpty();
									if (v11 == 0) {
										this.mNetworkMetricsSnapshots.append(v10);
										if (v3 == 0) {
											if (1 == 0) {
												NetworkMetrics v13 = new NetworkMetrics(p1,v6,this.mConnectTb);
												this.mNetworkMetrics.put(p1, v13);
												NetworkMetrics v2 = v3;
												if (this.pendingSummary != 0) {
													NetworkMetrics$Summary v17 = new NetworkMetrics$Summary(this.netId,this.transports);
													this.pendingSummary = v17;
													if (p3 != 0) {
														if (this.eventCount < 20000) {
															if (this.eventCount != this.eventTypes.length) {
																DnsEvent.resize((this.eventCount * 4608983858650965606));
																this.eventCount = (this.eventCount + 1);
																if (1 == 0) {
																	this.successCount = (this.successCount + 1);
																	boolean v19 = 1;
																	NetworkMetrics$Metrics.count(p4, 1);
																	if (v19 == 0) {
																		NetworkMetrics$Metrics.count(0, 1);
																		if (0 >= this.mNetdEventCallbackList.length) {
																			if (this.mNetdEventCallbackList[0] == 0) {
																				this.mNetdEventCallbackList[0].onDnsEvent(p1, p2, p3, p5, p6, p7, v1, p8);
																				if ((0 + 1) >= this.mNetdEventCallbackList.length) {
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onDnsEvent(int p1, int p2, int p3, int p4, String p5, String p6, int p7, int p8){
	long v1 = System.currentTimeMillis();
	Object v3 = this.mNetworkMetrics.get(p1);
	NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);
	if (v4 == 0) {
		[I v5 = v4.getTransportTypes();
		long v6 = BitUtils.packBits(v5);
		if (v3 == 0) {
			if (v4 == 0) {
				if ((NetworkMetrics.transports < v6) == 0) {
					NetdEventListenerService.collectPendingMetricsSnapshot(v1, 1);
					if (v3 == 0) {
						if (1 == 0) {
							NetworkMetrics v8 = new NetworkMetrics(p1,v6,this.mConnectTb);
							this.mNetworkMetrics.put(p1, v8);
							NetworkMetrics v2 = v3;
							if (this.pendingSummary != 0) {
								NetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);
								this.pendingSummary = v12;
								boolean v14 = this.dnsMetrics.addResult(p2, p3, p4);
								NetworkMetrics$Summary.dnsLatencies.count(p4);
								if (v14 == 0) {
									NetworkMetrics$Summary.dnsErrorRate.count(0);
									if (0 >= this.mNetdEventCallbackList.length) {
										if (this.mNetdEventCallbackList[0] == 0) {
											this.mNetdEventCallbackList[0].onDnsEvent(p1, p2, p3, p5, p6, p7, v1, p8);
											if ((0 + 1) >= this.mNetdEventCallbackList.length) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onDnsEvent(int p1, int p2, int p3, int p4, String p5, String p6, int p7, int p8){
	long v1 = System.currentTimeMillis();
	NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1);
	v2.addDnsResult(p2, p3, p4);
	if (0 >= this.mNetdEventCallbackList.length) {
		if (this.mNetdEventCallbackList[0] == 0) {
			this.mNetdEventCallbackList[0].onDnsEvent(p1, p2, p3, p5, p6, p7, v1, p8);
			if ((0 + 1) >= this.mNetdEventCallbackList.length) {
				return;
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mNetworkMetrics.get(p1);\nNetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);\nNetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);\nthis.mNetworkMetricsSnapshots.append(v10);\nNetworkMetrics v13 = new NetworkMetrics(p1,v6,this.mConnectTb);\nthis.mNetworkMetrics.put(p1, v13);', 'long v1 = System.currentTimeMillis();\nNetdEventListenerService.collectPendingMetricsSnapshot(v1, 1);\nNetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);\nthis.pendingSummary = v12;', 'v2.addDnsResult(p2, p3, p4);']

The method onDnsEvent has the following similar APIs:

- API Name: onConnectEvent(IIILjava/lang/String;II)V in the following Class: Lcom.android.server.connectivity.NetdEventListenerService with the following sink code entries:
  - Similarity: 0.9841552972793579, Code:
Object v3 = this.mNetworkMetrics.get(p1);
NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);
NetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);
this.mNetworkMetrics.put(p1, v13);
  - Similarity: 0.8703756928443909, Code:
long v6 = BitUtils.packBits(v5);
NetdEventListenerService.collectPendingMetricsSnapshot(v1, 1);
NetworkMetrics v8 = new NetworkMetrics(p1,v6,this.mConnectTb);
this.mNetworkMetrics.put(p1, v8);
  - Similarity: 0.7071186304092407, Code:
NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1);
v2.addConnectResult(p2, p3, p4);
  - Access Control Level: NONE

- API Name: onTcpSocketStatsEvent([I[I[I[I[I)V in the following Class: Lcom.android.server.connectivity.NetdEventListenerService with the following sink code entries:
  - Similarity: 0.968650221824646, Code:
long v6 = BitUtils.packBits(v5);
NetdEventListenerService.collectPendingMetricsSnapshot(v1, 1);
NetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);
this.pendingSummary = v12;
  - Similarity: 0.895501434803009, Code:
Object v3 = this.mNetworkMetrics.get(p1[0]);
NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[0]);
[I v5 = v4.getTransportTypes();
long v6 = (0 | (1 << v5[0]));
NetworkMetrics v9 = new NetworkMetrics(p1[0],v6,this.mConnectTb);
this.mNetworkMetrics.put(p1[0], v9);
  - Similarity: 0.7130146026611328, Code:
NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1[0]);
v2.addTcpStatsResult(p2[0], p3[0], p4[0], p5[0]);
  - Access Control Level: NONE

- API Name: addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;Ljava/lang/String;)V in the following Class: Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper with the following sink code entries:
  - Similarity: 0.7192155718803406, Code:
v3.addCallback(p1, p2);
  - Access Control Level: NORMAL

- API Name: removeVpnAddress(Ljava/lang/String;I)Z in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.7153288125991821, Code:
boolean v5 = v4.removeAddress(p1, p2);
  - Access Control Level: NONE

- API Name: startWatchlistLogging()Z in the following Class: Lcom.android.server.net.watchlist.NetworkWatchlistService with the following sink code entries:
  - Similarity: 0.7029598355293274, Code:
boolean v3 = this.mIpConnectivityMetrics.addNetdEventCallback(2, this.mNetdEventCallback);
if (v3 == 0) {
this.mIsLoggingEnabled = 1;
boolean v2 = 1;
return v2;
  - Access Control Level: SYS_OR_SIG

