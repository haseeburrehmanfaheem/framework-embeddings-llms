The method onTcpSocketStatsEvent in the following class Lcom.android.server.connectivity.NetdEventListenerService has the following code snippet:

This is path 1 for the API with depth 2:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if (0 >= p1.length) {
						Object v3 = this.mNetworkMetrics.get(p1[0]);
						NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[0]);
						if (v4 == 0) {
							[I v5 = v4.getTransportTypes();
							if (0 >= v5.length) {
								if ((0 + 1) >= v5.length) {
									long v6 = (0 | (1 << v5[0]));
									if (v3 == 0) {
										if (v4 == 0) {
											if ((NetworkMetrics.transports < v6) == 0) {
												if (1 != 0) {
													long v8 = Math.abs((v1 - this.mLastSnapshot));
													if ((v8 < 300000) > 0) {
														if (v3 == 0) {
															if (1 == 0) {
																NetworkMetrics v9 = new NetworkMetrics(p1[0],v6,this.mConnectTb);
																this.mNetworkMetrics.put(p1[0], v9);
																NetworkMetrics v2 = v3;
																if (this.pendingSummary != 0) {
																	NetworkMetrics$Summary v13 = new NetworkMetrics$Summary(this.netId,this.transports);
																	this.pendingSummary = v13;
																	this.count = (this.count + p2[0]);
																	this.sum = (this.sum + p3[0]);
																	double v16 = Math.max(this.max, p3[0]);
																	this.max = v16;
																	NetworkMetrics$Metrics.count(p4[0], 1);
																	NetworkMetrics$Metrics.count(p5[0], 1);
																	if ((0 + 1) >= p1.length) {
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if (0 >= p1.length) {
						Object v3 = this.mNetworkMetrics.get(p1[0]);
						NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[0]);
						if (v4 == 0) {
							[I v5 = v4.getTransportTypes();
							long v6 = BitUtils.packBits(v5);
							if (v3 == 0) {
								if (v4 == 0) {
									if ((NetworkMetrics.transports < v6) == 0) {
										NetdEventListenerService.collectPendingMetricsSnapshot(v1, 1);
										if (v3 == 0) {
											if (1 == 0) {
												NetworkMetrics v8 = new NetworkMetrics(p1[0],v6,this.mConnectTb);
												this.mNetworkMetrics.put(p1[0], v8);
												NetworkMetrics v2 = v3;
												if (this.pendingSummary != 0) {
													NetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);
													this.pendingSummary = v12;
													NetworkMetrics$Summary.tcpLossRate.count(p3[0], p2[0]);
													NetworkMetrics$Summary.roundTripTimeUs.count(p4[0]);
													NetworkMetrics$Summary.sentAckTimeDiffenceMs.count(p5[0]);
													if ((0 + 1) >= p1.length) {
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if (0 >= p1.length) {
						NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1[0]);
						v2.addTcpStatsResult(p2[0], p3[0], p4[0], p5[0]);
						if ((0 + 1) >= p1.length) {
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mNetworkMetrics.get(p1[0]);\nNetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[0]);\n[I v5 = v4.getTransportTypes();\nlong v6 = (0 | (1 << v5[0]));\nNetworkMetrics v9 = new NetworkMetrics(p1[0],v6,this.mConnectTb);\nthis.mNetworkMetrics.put(p1[0], v9);', 'NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1[0]);\nv2.addTcpStatsResult(p2[0], p3[0], p4[0], p5[0]);', 'long v6 = BitUtils.packBits(v5);\nNetdEventListenerService.collectPendingMetricsSnapshot(v1, 1);\nNetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);\nthis.pendingSummary = v12;']

The method onTcpSocketStatsEvent has the following similar APIs:

- API Name: onDnsEvent(IIIILjava/lang/String;[Ljava/lang/String;II)V in the following Class: Lcom.android.server.connectivity.NetdEventListenerService with the following sink code entries:
  - Similarity: 0.968650221824646, Code:
long v1 = System.currentTimeMillis();
NetdEventListenerService.collectPendingMetricsSnapshot(v1, 1);
NetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);
this.pendingSummary = v12;
  - Similarity: 0.895501434803009, Code:
Object v3 = this.mNetworkMetrics.get(p1);
NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);
NetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);
this.mNetworkMetricsSnapshots.append(v10);
NetworkMetrics v13 = new NetworkMetrics(p1,v6,this.mConnectTb);
this.mNetworkMetrics.put(p1, v13);
  - Access Control Level: NONE

- API Name: onConnectEvent(IIILjava/lang/String;II)V in the following Class: Lcom.android.server.connectivity.NetdEventListenerService with the following sink code entries:
  - Similarity: 0.8980135321617126, Code:
long v6 = BitUtils.packBits(v5);
NetdEventListenerService.collectPendingMetricsSnapshot(v1, 1);
NetworkMetrics v8 = new NetworkMetrics(p1,v6,this.mConnectTb);
this.mNetworkMetrics.put(p1, v8);
  - Similarity: 0.8870234489440918, Code:
Object v3 = this.mNetworkMetrics.get(p1);
NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);
NetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);
this.mNetworkMetrics.put(p1, v13);
  - Similarity: 0.8743554353713989, Code:
NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1);
v2.addConnectResult(p2, p3, p4);
  - Access Control Level: NONE

