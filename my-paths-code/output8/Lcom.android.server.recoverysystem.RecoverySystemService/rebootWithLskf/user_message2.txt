The method rebootWithLskf in the following class Lcom.android.server.recoverysystem.RecoverySystemService has the following code snippet:

This is path 1 for the API with depth 2:
public int rebootWithLskf(String p1, String p2, boolean p3){
	if (p1 != 0) {
		boolean v4 = RecoverySystemService.isLskfCaptured(p1);
		if (v4 != 0) {
			boolean v5 = RecoverySystemService.verifySlotForNextBoot(p3);
			if (v5 != 0) {
				long v6 = Binder.clearCallingIdentity();
				LockSettingsInternal v7 = this.mInjector.getLockSettingsService();
				if (v7 != 0) {
					int v8 = v7.armRebootEscrow();
					Binder.restoreCallingIdentity(v6);
					if (v8 == 0) {
						RecoverySystemService$RebootPreparationError v10 = new RecoverySystemService$RebootPreparationError(0,0);
						RecoverySystemService$RebootPreparationError v3 = v10;
						int v13 = this.mInjector.getUidFromPackageName(p1);
						boolean v14 = RecoverySystemService.useServerBasedRoR();
						int v15 = this.mCallerPreparedForReboot.size();
						long v16 = this.mInjector.getCurrentTimeMillis();
						RecoverySystemService$PreferencesManager v17 = this.mInjector.getMetricsPrefs();
						long v18 = v17.getLong("lskf_captured_timestamp", -1);
						if ((v18 < -1) == 0) {
							if ((v16 < v18) <= 0) {
								StringBuilder v19 = new StringBuilder();
								StringBuilder v21 = v19.append(p1);
								StringBuilder v22 = v19.append("_request_lskf_count");
								String v23 = v19.toString();
								int v24 = v17.getInt(v23, -1);
								int v25 = v17.getInt("lskf_captured_count", -1);
								Integer v27 = Integer.valueOf(v15);
								Integer v28 = Integer.valueOf(v24);
								Integer v29 = Integer.valueOf(v25);
								Integer v30 = Integer.valueOf(((v16 - v18) / 1000));
								int v33 = v3.getErrorCodeForMetrics();
								this.mInjector.reportRebootEscrowRebootMetrics(v33, v13, v15, v24, p3, v14, ((v16 - v18) / 1000), v25);
								Integer v36 = Integer.valueOf(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
								boolean v37 = this.FATAL_ARM_ESCROW_ERRORS.contains(v36);
								if (v37 != 0) {
									if (RecoverySystemService$RebootPreparationError.mRebootErrorCode == 0) {
										RecoverySystemService$PreferencesManager v38 = this.mPrefs;
										boolean v40 = this.mMetricsPrefsFile.delete();
										if (v40 != 0) {
											Object v42 = this.mContext.getSystemService("power");
											PowerManager v41 = v42;
											v41.reboot(p2);
											int v2 = 1000;
											return v2;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int rebootWithLskf(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v3 = RecoverySystemService.armRebootEscrow(p1, p3);
	RecoverySystemService.reportMetricsOnRebootWithLskf(p1, p3, v3);
	RecoverySystemService.clearRoRPreparationStateOnRebootFailure(v3);
	if (RecoverySystemService$RebootPreparationError.mRebootErrorCode == 0) {
		RecoverySystemService$PreferencesManager v6 = this.mInjector.getMetricsPrefs();
		v6.deletePrefsFile();
		PowerManager v8 = this.mInjector.getPowerManager();
		v8.reboot(p2);
		int v2 = 1000;
		return v2;
	}
}


This is path 3 for the API with depth 0:
public int rebootWithLskf(String p1, String p2, boolean p3){
	int v2 = p0.rebootWithLskfImpl(p1, p2, p3);
	return v2;
}

and the following sink code:
['boolean v4 = RecoverySystemService.isLskfCaptured(p1);\nboolean v5 = RecoverySystemService.verifySlotForNextBoot(p3);\nint v8 = v7.armRebootEscrow();\nthis.mInjector.reportRebootEscrowRebootMetrics(v33, v13, v15, v24, p3, v14, ((v16 - v18) / 1000), v25);', 'RecoverySystemService$RebootPreparationError v3 = RecoverySystemService.armRebootEscrow(p1, p3);\nRecoverySystemService.reportMetricsOnRebootWithLskf(p1, p3, v3);\nPowerManager v8 = this.mInjector.getPowerManager();\nv8.reboot(p2);']

The method rebootWithLskf has the following similar APIs:

- API Name: rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I in the following Class: Lcom.android.server.recoverysystem.RecoverySystemService with the following sink code entries:
  - Similarity: 0.9973358511924744, Code:
RecoverySystemService$RebootPreparationError v3 = RecoverySystemService.armRebootEscrow(p1, 1);
RecoverySystemService.reportMetricsOnRebootWithLskf(p1, 1, v3);
PowerManager v8 = this.mInjector.getPowerManager();
v8.reboot(p2);
  - Similarity: 0.9360654354095459, Code:
boolean v4 = RecoverySystemService.isLskfCaptured(p1);
int v8 = v7.armRebootEscrow();
RecoverySystemService$RebootPreparationError v10 = new RecoverySystemService$RebootPreparationError(0,0);
this.mInjector.reportRebootEscrowRebootMetrics(v33, v13, v15, v24, 1, v14, ((v16 - v18) / 1000), v25);
PowerManager v41 = (PowerManager) this.mContext.getSystemService("power");
v41.reboot(p2);
  - Similarity: 0.7024425268173218, Code:
int v2 = p0.rebootWithLskfImpl(p1, p2, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: rebootRecoveryWithCommand(Ljava/lang/String;)V in the following Class: Lcom.android.server.recoverysystem.RecoverySystemService with the following sink code entries:
  - Similarity: 0.7724242210388184, Code:
boolean v1 = p0.setupOrClearBcb(1, p1);
PowerManager v2 = this.mInjector.getPowerManager();
v2.reboot("recovery");
  - Access Control Level: SYS_OR_SIG

- API Name: isLskfCaptured(Ljava/lang/String;)Z in the following Class: Lcom.android.server.recoverysystem.RecoverySystemService with the following sink code entries:
  - Similarity: 0.7211427092552185, Code:
boolean v2 = this.mCallerPreparedForReboot.contains(p1);
if (v2 != 0) { return 0; }
  - Access Control Level: SYS_OR_SIG

