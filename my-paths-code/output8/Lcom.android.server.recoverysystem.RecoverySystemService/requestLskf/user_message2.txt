The method requestLskf in the following class Lcom.android.server.recoverysystem.RecoverySystemService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPendingRequest.isEmpty();
			boolean v5 = this.mCallerPendingRequest.containsKey(p1);
			if (v5 == 0) {
				Object v12 = this.mCallerPendingRequest.put(p1, p2);
				if (v4 == 0) {
					int v2 = 0;
					PackageManager v15 = this.mContext.getPackageManager();
					int v16 = v15.getPackageUidAsUser(p1, 0);
					int v14 = v16;
					int v17 = this.mCallerPendingRequest.size();
					RecoverySystemService$PreferencesManager v18 = this.mPrefs;
					StringBuilder v19 = new StringBuilder();
					StringBuilder v21 = v19.append(p1);
					StringBuilder v22 = v19.append("_request_lskf_timestamp");
					String v23 = v19.toString();
					long v25 = System.currentTimeMillis();
					long v24 = v25;
					SharedPreferences$Editor v27 = this.mSharedPreferences.edit();
					SharedPreferences$Editor v28 = v27.putLong(v23, v24);
					boolean v29 = v28.commit();
					StringBuilder v30 = new StringBuilder();
					StringBuilder v32 = v30.append(p1);
					StringBuilder v33 = v30.append("_request_lskf_count");
					String v34 = v30.toString();
					int v36 = RecoverySystemService$PreferencesManager.getInt(v34, 0);
					RecoverySystemService$PreferencesManager.putInt(v34, (v36 + 1));
					FrameworkStatsLog.write(339, v14, v2, v17);
					if (v2 == 0) {
						long v40 = Binder.clearCallingIdentity();
						Object v43 = this.sLocalServiceObjects.get(LockSettingsInterna.class);
						Object v42 = v43;
						LockSettingsInternal v41 = v42;
						if (v41 != 0) {
							boolean v44 = v41.prepareRebootEscrow();
							if (v44 != 0) {
								p0.clearRoRPreparationState();
								Binder.restoreCallingIdentity(v40);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPendingRequest.isEmpty();
			boolean v5 = this.mCallerPendingRequest.containsKey(p1);
			if (v5 == 0) {
				Object v12 = this.mCallerPendingRequest.put(p1, p2);
				if (v4 == 0) {
					int v2 = 0;
					int v14 = this.mInjector.getUidFromPackageName(p1);
					int v15 = this.mCallerPendingRequest.size();
					RecoverySystemService$PreferencesManager v16 = this.mInjector.getMetricsPrefs();
					StringBuilder v17 = new StringBuilder();
					StringBuilder v19 = v17.append(p1);
					StringBuilder v20 = v17.append("_request_lskf_timestamp");
					String v21 = v17.toString();
					long v22 = this.mInjector.getCurrentTimeMillis();
					v16.putLong(v21, v22);
					StringBuilder v24 = new StringBuilder();
					StringBuilder v26 = v24.append(p1);
					StringBuilder v27 = v24.append("_request_lskf_count");
					String v28 = v24.toString();
					v16.incrementIntKey(v28, 0);
					this.mInjector.reportRebootEscrowPreparationMetrics(v14, v2, v15);
					if (v2 == 0) {
						long v31 = Binder.clearCallingIdentity();
						Object v33 = LocalServices.getService(LockSettingsInterna.class);
						LockSettingsInternal v32 = v33;
						if (v32 != 0) {
							boolean v34 = v32.prepareRebootEscrow();
							if (v34 != 0) {
								this.mCallerPendingRequest.clear();
								this.mCallerPreparedForReboot.clear();
								Binder.restoreCallingIdentity(v31);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
		p0.reportMetricsOnRequestLskf(p1, v2);
		if (v2 == 0) {
			long v4 = Binder.clearCallingIdentity();
			LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
			if (v5 != 0) {
				boolean v6 = v5.prepareRebootEscrow();
				if (v6 != 0) {
					p0.clearRoRPreparationState();
					Binder.restoreCallingIdentity(v4);
					return 0;
				}
			}
		}
	}
}

and the following sink code:
['Object v12 = this.mCallerPendingRequest.put(p1, p2);\nint v16 = v15.getPackageUidAsUser(p1, 0);\nSharedPreferences$Editor v27 = this.mSharedPreferences.edit();\nv27.putLong(v23, v24);', 'int v14 = this.mInjector.getUidFromPackageName(p1);\nRecoverySystemService$PreferencesManager v16 = this.mInjector.getMetricsPrefs();\nv16.putLong(v21, v22);', 'int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);\np0.reportMetricsOnRequestLskf(p1, v2);']

The method requestLskf has the following similar APIs:

- API Name: clearLskf(Ljava/lang/String;)Z in the following Class: Lcom.android.server.recoverysystem.RecoverySystemService with the following sink code entries:
  - Similarity: 0.8078701496124268, Code:
int v2 = p0.updateRoRPreparationStateOnClear(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: getTargetUserProfiles(Ljava/lang/String;)Ljava/util/List; in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.7305951714515686, Code:
int v14 = this.mInjector.getCallingUserId();
List v15 = v18;
return v15;
  - Access Control Level: NONE

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.7273789644241333, Code:
int v1 = UserHandle.getUserId(p5);
PackageManager v2 = this.mContext.getPackageManager();
String v3 = v2.getPackagesForUid(p5);
  - Access Control Level: NORMAL

- API Name: print(Ljava/lang/String;Landroid/print/IPrintDocumentAdapter;Landroid/print/PrintAttributes;Ljava/lang/String;II)Landroid/os/Bundle; in the following Class: Lcom.android.server.print.PrintManagerService$PrintManagerImpl with the following sink code entries:
  - Similarity: 0.7206259965896606, Code:
PackageManager v10 = this.mContext.getPackageManager();
int v11 = Binder.getCallingUid();
String v12 = v10.getPackagesForUid(v11);
UserState v19 = new UserState(this.mContext,v5,this.mLock,0);
  - Access Control Level: SYS_OR_SIG

- API Name: removeAllDynamicShortcuts(Ljava/lang/String;I)V in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.714169979095459, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ShortcutPackage v32 = ShortcutUser.getPackageShortcutsIfExists(p1);
ShortcutUser v27 = new ShortcutUser(ShortcutService,p2);
ShortcutPackage v33 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
  - Access Control Level: SYS_OR_SIG

