This is path 1 for the API with depth 2:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPendingRequest.isEmpty();
			boolean v5 = this.mCallerPendingRequest.containsKey(p1);
			if (v5 == 0) {
				Object v12 = this.mCallerPendingRequest.put(p1, p2);
				if (v4 == 0) {
					int v2 = 0;
					PackageManager v15 = this.mContext.getPackageManager();
					int v16 = v15.getPackageUidAsUser(p1, 0);
					int v14 = v16;
					int v17 = this.mCallerPendingRequest.size();
					RecoverySystemService$PreferencesManager v18 = this.mPrefs;
					StringBuilder v19 = new StringBuilder();
					StringBuilder v21 = v19.append(p1);
					StringBuilder v22 = v19.append("_request_lskf_timestamp");
					String v23 = v19.toString();
					long v25 = System.currentTimeMillis();
					long v24 = v25;
					SharedPreferences$Editor v27 = this.mSharedPreferences.edit();
					SharedPreferences$Editor v28 = v27.putLong(v23, v24);
					boolean v29 = v28.commit();
					StringBuilder v30 = new StringBuilder();
					StringBuilder v32 = v30.append(p1);
					StringBuilder v33 = v30.append("_request_lskf_count");
					String v34 = v30.toString();
					int v36 = RecoverySystemService$PreferencesManager.getInt(v34, 0);
					RecoverySystemService$PreferencesManager.putInt(v34, (v36 + 1));
					FrameworkStatsLog.write(339, v14, v2, v17);
					if (v2 == 0) {
						long v40 = Binder.clearCallingIdentity();
						Object v43 = this.sLocalServiceObjects.get(LockSettingsInterna.class);
						Object v42 = v43;
						LockSettingsInternal v41 = v42;
						if (v41 != 0) {
							boolean v44 = v41.prepareRebootEscrow();
							if (v44 != 0) {
								p0.clearRoRPreparationState();
								Binder.restoreCallingIdentity(v40);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPendingRequest.isEmpty();
			boolean v5 = this.mCallerPendingRequest.containsKey(p1);
			if (v5 == 0) {
				Object v12 = this.mCallerPendingRequest.put(p1, p2);
				if (v4 == 0) {
					int v2 = 0;
					int v14 = this.mInjector.getUidFromPackageName(p1);
					int v15 = this.mCallerPendingRequest.size();
					RecoverySystemService$PreferencesManager v16 = this.mInjector.getMetricsPrefs();
					StringBuilder v17 = new StringBuilder();
					StringBuilder v19 = v17.append(p1);
					StringBuilder v20 = v17.append("_request_lskf_timestamp");
					String v21 = v17.toString();
					long v22 = this.mInjector.getCurrentTimeMillis();
					v16.putLong(v21, v22);
					StringBuilder v24 = new StringBuilder();
					StringBuilder v26 = v24.append(p1);
					StringBuilder v27 = v24.append("_request_lskf_count");
					String v28 = v24.toString();
					v16.incrementIntKey(v28, 0);
					this.mInjector.reportRebootEscrowPreparationMetrics(v14, v2, v15);
					if (v2 == 0) {
						long v31 = Binder.clearCallingIdentity();
						Object v33 = LocalServices.getService(LockSettingsInterna.class);
						LockSettingsInternal v32 = v33;
						if (v32 != 0) {
							boolean v34 = v32.prepareRebootEscrow();
							if (v34 != 0) {
								this.mCallerPendingRequest.clear();
								this.mCallerPreparedForReboot.clear();
								Binder.restoreCallingIdentity(v31);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
		p0.reportMetricsOnRequestLskf(p1, v2);
		if (v2 == 0) {
			long v4 = Binder.clearCallingIdentity();
			LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
			if (v5 != 0) {
				boolean v6 = v5.prepareRebootEscrow();
				if (v6 != 0) {
					p0.clearRoRPreparationState();
					Binder.restoreCallingIdentity(v4);
					return 0;
				}
			}
		}
	}
}
