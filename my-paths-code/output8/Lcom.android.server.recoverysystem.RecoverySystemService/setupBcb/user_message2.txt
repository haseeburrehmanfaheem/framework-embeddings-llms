The method setupBcb has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setupBcb(String p1){
	if (0 >= 30) {
		String v4 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
		String v5 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
		String v6 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
		boolean v7 = "running".equals(v4);
		if (v7 != 0) {
			boolean v8 = "running".equals(v5);
			if (v8 != 0) {
				boolean v9 = "running".equals(v6);
				if (v9 == 0) {
					if (0 != 0) {
						this.mInjector.threadSleep(1000);
						if ((0 + 1) >= 30) {
							String v11 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
							String v12 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
							String v13 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
							boolean v14 = "running".equals(v11);
							if (v14 != 0) {
								boolean v15 = "running".equals(v12);
								if (v15 != 0) {
									boolean v16 = "running".equals(v13);
									if (v16 == 0) {
										if (0 != 0) {
											boolean v3 = 1;
											if (v3 != 0) {
												if (1 == 0) {
													SystemProperties.set("ctl.start", "setup-bcb");
													RecoverySystemService$UncryptSocket v20 = new RecoverySystemService$UncryptSocket();
													boolean v22 = v20.connectService();
													if (v22 != 0) {
														v20.close();
														RecoverySystemService$UncryptSocket v19 = v20;
														if (v19 != 0) {
															if (1 == 0) {
																byte[] v25 = p1.getBytes(StandardCharsets.UTF_8);
																this.mOutputStream.writeInt(v25.length);
																this.mOutputStream.write(v25, 0, v25.length);
																int v29 = this.mInputStream.readInt();
																int v28 = v29;
																this.mOutputStream.writeInt(0);
																if (v28 != 100) {
																	if (1 == 0) {
																		IoUtils.closeQuietly(this.mInputStream);
																		IoUtils.closeQuietly(this.mOutputStream);
																		IoUtils.closeQuietly(this.mLocalSocket);
																		boolean v1 = 1;
																		return v1;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean setupBcb(String p1){
	boolean v3 = RecoverySystemService.checkAndWaitForUncryptService();
	if (v3 != 0) {
		if (1 == 0) {
			this.mInjector.systemPropertiesSet("ctl.start", "setup-bcb");
			RecoverySystemService$UncryptSocket v5 = this.mInjector.connectService();
			if (v5 != 0) {
				if (1 == 0) {
					v5.sendCommand(p1);
					int v7 = v5.getPercentageUncrypted();
					v5.sendAck();
					if (v7 != 100) {
						if (1 == 0) {
							v5.close();
							boolean v1 = 1;
							return v1;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean setupBcb(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	return v1;
}

and the following sink code:
['RecoverySystemService$UncryptSocket v20 = new RecoverySystemService$UncryptSocket();\nboolean v22 = v20.connectService();\nbyte[] v25 = p1.getBytes(StandardCharsets.UTF_8);\nthis.mOutputStream.writeInt(v25.length);\nthis.mOutputStream.write(v25, 0, v25.length);', 'RecoverySystemService$UncryptSocket v5 = this.mInjector.connectService();\nv5.sendCommand(p1);\nint v7 = v5.getPercentageUncrypted();\nv5.sendAck();', 'boolean v1 = p0.setupOrClearBcb(1, p1);']

The method setupBcb has the following similar APIs:

- API Name: clearBcb()Z with Similarity Score: 0.9736650586128235
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v1 = p0.setupOrClearBcb(0, 0);

- API Name: rebootRecoveryWithCommand(Ljava/lang/String;)V with Similarity Score: 0.9608771204948425
  - Access Control Level: SYS_OR_SIG and the following code:
RecoverySystemService$UncryptSocket v20 = new RecoverySystemService$UncryptSocket();
boolean v22 = v20.connectService();
v20.close();
byte[] v25 = p1.getBytes(StandardCharsets.UTF_8);
this.mOutputStream.writeInt(v25.length);
this.mOutputStream.write(v25, 0, v25.length);
PowerManager v43 = this.mInjector.getPowerManager();
v43.reboot("recovery");

