The method getApexInfo has the following code snippet:

This is path 1 for the API with depth 2:
public Map getApexInfo(){
	HashMap v1 = new HashMap();
	int v5 = this.mBinaryHashes.size();
	if (v5 != 0) {
		BinaryTransparencyService.doFreshBinaryMeasurements();
		boolean v4 = 1;
		boolean v3 = v4;
		if (v3 != 0) {
			Context v8 = BinaryTransparencyService.-$$Nest$fgetmContext(this.this$0);
			PackageManager v9 = v8.getPackageManager();
			if (v9 != 0) {
				ArrayList v12 = new ArrayList();
				PackageManager v14 = this.mContext.getPackageManager();
				if (v14 != 0) {
					PackageManager$PackageInfoFlags v15 = PackageManager$PackageInfoFlags.of(1073741824);
					List v16 = v14.getInstalledPackages(v15);
					if (v16 != 0) {
						Stream v17 = v16.stream();
						BinaryTransparencyService$$ExternalSyntheticLambda0 v18 = new BinaryTransparencyService$$ExternalSyntheticLambda0();
						Stream v20 = v17.filter(v18);
						Collector v21 = Collectors.toList();
						Object v22 = v20.collect(v21);
						List v11 = v22;
						List v10 = v11;
						Iterator v23 = v10.iterator();
						boolean v24 = v23.hasNext();
						if (v24 == 0) {
							Object v25 = v23.next();
							HashMap v26 = BinaryTransparencyService.-$$Nest$fgetmBinaryHashes(this.this$0);
							Object v27 = v26.get(PackageInfo.packageName);
							Object v28 = v1.put(v25, v27);
							boolean v29 = v23.hasNext();
							if (v29 == 0) {
								return v1;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public Map getApexInfo(){
	HashMap v1 = new HashMap();
	boolean v4 = this.this$0.updateBinaryMeasurements();
	boolean v3 = v4;
	if (v3 != 0) {
		Context v5 = this.mContext;
		PackageManager v6 = v5.getPackageManager();
		if (v6 != 0) {
			List v8 = this.this$0.getInstalledApexs();
			List v7 = v8;
			Iterator v9 = v7.iterator();
			boolean v10 = v9.hasNext();
			if (v10 == 0) {
				Object v11 = v9.next();
				HashMap v12 = this.mBinaryHashes;
				Object v13 = v12.get(PackageInfo.packageName);
				Object v14 = v1.put(v11, v13);
				boolean v15 = v9.hasNext();
				if (v15 == 0) {
					return v1;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Map getApexInfo(){
	HashMap v1 = new HashMap();
	boolean v3 = BinaryTransparencyService.-$$Nest$mupdateBinaryMeasurements(this.this$0);
	if (v3 != 0) {
		Context v4 = BinaryTransparencyService.-$$Nest$fgetmContext(this.this$0);
		PackageManager v5 = v4.getPackageManager();
		if (v5 != 0) {
			List v6 = BinaryTransparencyService.-$$Nest$mgetInstalledApexs(this.this$0);
			Iterator v7 = v6.iterator();
			boolean v8 = v7.hasNext();
			if (v8 == 0) {
				Object v9 = v7.next();
				HashMap v10 = BinaryTransparencyService.-$$Nest$fgetmBinaryHashes(this.this$0);
				Object v11 = v10.get(PackageInfo.packageName);
				Object v12 = v1.put(v9, v11);
				boolean v13 = v7.hasNext();
				if (v13 == 0) {
					return v1;
				}
			}
		}
	}
}

and the following sink code:
['HashMap v1 = new HashMap();\nint v5 = this.mBinaryHashes.size();\nif (v5 != 0) { BinaryTransparencyService.doFreshBinaryMeasurements(); }\nList v16 = v14.getInstalledPackages(v15);\nObject v27 = v26.get(PackageInfo.packageName);\nObject v28 = v1.put(v25, v27);\nreturn v1;', 'HashMap v1 = new HashMap();\nboolean v4 = this.this$0.updateBinaryMeasurements();\nList v8 = this.this$0.getInstalledApexs();\nObject v13 = v12.get(PackageInfo.packageName);\nObject v14 = v1.put(v11, v13);\nreturn v1;', 'HashMap v1 = new HashMap();\nboolean v3 = BinaryTransparencyService.-$$Nest$mupdateBinaryMeasurements(this.this$0);\nList v6 = BinaryTransparencyService.-$$Nest$mgetInstalledApexs(this.this$0);\nObject v11 = v10.get(PackageInfo.packageName);\nObject v12 = v1.put(v9, v11);\nreturn v1;']

The method getApexInfo has the following similar APIs:

- API Name: getPackageScreenCompatMode(Ljava/lang/String;)I with Similarity Score: 0.7405676245689392
  - Access Control Level: SYS_OR_SIG and the following code:
ApplicationInfo v10 = v8.getApplicationInfo(p1, 0, 0);
CompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked(v10);
boolean v13 = v12.alwaysSupportsScreen();
boolean v14 = v12.neverSupportsScreen();
boolean v15 = CompatModePackages.getPackageCompatModeEnabledLocked(v10);
int v11 = v15;
int v7 = v11;
return v7;

- API Name: getWhitelistedRuleProviders()Ljava/util/List; with Similarity Score: 0.7336810827255249
  - Access Control Level: NONE and the following code:
int v12 = v11.getPackageInfo(v9, 0);
boolean v13 = PackageInfo.applicationInfo.isSystemApp();
ArrayList v5 = new ArrayList();
boolean v14 = v5.add(v9);
return v1;

