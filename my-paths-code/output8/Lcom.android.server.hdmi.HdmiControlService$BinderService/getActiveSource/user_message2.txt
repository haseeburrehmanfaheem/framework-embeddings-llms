The method getActiveSource in the following class Lcom.android.server.hdmi.HdmiControlService$BinderService has the following code snippet:

This is path 1 for the API with depth 2:
public HdmiDeviceInfo getActiveSource(){
	HdmiControlService.setWorkSourceUidToCallingUid();
	HdmiCecLocalDevice v7 = this.mHdmiCecNetwork.getLocalDevice(4);
	HdmiCecLocalDevicePlayback v6 = v7;
	if (v6 == 0) {
		HdmiCecLocalDevice v9 = this.mHdmiCecNetwork.getLocalDevice(4);
		HdmiCecLocalDevicePlayback v8 = v9;
		boolean v10 = v8.isActiveSource();
		if (v10 == 0) {
			HdmiCecLocalDevice$ActiveSource v11 = this.mActiveSource;
			boolean v13 = HdmiUtils.isValidAddress(this.logicalAddress);
			boolean v12 = v13;
			if (v12 == 0) {
				HdmiCecLocalDevice v15 = this.mHdmiCecNetwork.getLocalDevice(0);
				HdmiCecLocalDeviceTv v14 = v15;
				if (v14 == 0) {
					HdmiCecLocalDevice v17 = this.mHdmiCecNetwork.getLocalDevice(0);
					HdmiCecLocalDeviceTv v16 = v17;
					int v18 = v16.getActivePath();
					if (v18 == 65535) {
						Iterator v20 = this.mSafeAllDeviceInfos.iterator();
						boolean v21 = v20.hasNext();
						if (v21 == 0) {
							HdmiDeviceInfo v19 = 0;
							if (v19 == 0) {
								HdmiCecLocalDevice v23 = this.mHdmiCecNetwork.getLocalDevice(0);
								HdmiCecLocalDeviceTv v22 = v23;
								int v24 = v22.getActivePortId();
								HdmiDeviceInfo$Builder v26 = new HdmiDeviceInfo$Builder(2,0);
								HdmiDeviceInfo$Builder v28 = v26.setPhysicalAddress(v18);
								HdmiDeviceInfo$Builder v29 = v28.setPortId(v24);
								HdmiDeviceInfo$Builder v30 = v29.setVendorId(0);
								StringBuilder v31 = new StringBuilder();
								StringBuilder v33 = v31.append("HDMI");
								StringBuilder v34 = v33.append(v24);
								String v35 = v34.toString();
								HdmiDeviceInfo$Builder v36 = v30.setDisplayName(v35);
								HdmiDeviceInfo v37 = v36.build();
								HdmiDeviceInfo v25 = v37;
								HdmiDeviceInfo v5 = v19;
								return v5;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public HdmiDeviceInfo getActiveSource(){
	this.this$0.initBinderCall();
	HdmiCecLocalDevicePlayback v4 = HdmiControlService.playback();
	if (v4 == 0) {
		HdmiCecLocalDevicePlayback v5 = HdmiControlService.playback();
		boolean v6 = v5.isActiveSource();
		if (v6 == 0) {
			HdmiCecLocalDevice$ActiveSource v7 = HdmiControlService.getLocalActiveSource();
			boolean v8 = v7.isValid();
			if (v8 == 0) {
				HdmiCecLocalDeviceTv v9 = HdmiControlService.tv();
				if (v9 == 0) {
					HdmiCecLocalDeviceTv v10 = HdmiControlService.tv();
					int v11 = v10.getActivePath();
					if (v11 == 65535) {
						HdmiDeviceInfo v12 = this.mHdmiCecNetwork.getSafeDeviceInfoByPath(v11);
						if (v12 == 0) {
							HdmiCecLocalDeviceTv v13 = HdmiControlService.tv();
							int v14 = v13.getActivePortId();
							HdmiDeviceInfo v15 = HdmiDeviceInfo.hardwarePort(v11, v14);
							HdmiDeviceInfo v3 = v12;
							return v3;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public HdmiDeviceInfo getActiveSource(){
	HdmiControlService.-$$Nest$minitBinderCall(this.this$0);
	HdmiDeviceInfo v2 = this.this$0.getActiveSource();
	return v2;
}

and the following sink code:
['HdmiCecLocalDevice v7 = this.mHdmiCecNetwork.getLocalDevice(4);\nHdmiCecLocalDevicePlayback v6 = v7;\nif (v6 == 0) { ... }\nHdmiDeviceInfo$Builder v26 = new HdmiDeviceInfo$Builder(2,0);\nHdmiDeviceInfo$Builder v28 = v26.setPhysicalAddress(v18);\nHdmiDeviceInfo$Builder v29 = v28.setPortId(v24);\nHdmiDeviceInfo$Builder v30 = v29.setVendorId(0);\nStringBuilder v31 = new StringBuilder();\nStringBuilder v33 = v31.append("HDMI");\nStringBuilder v34 = v33.append(v24);\nString v35 = v34.toString();\nHdmiDeviceInfo$Builder v36 = v30.setDisplayName(v35);\nHdmiDeviceInfo v37 = v36.build();', 'HdmiCecLocalDevicePlayback v4 = HdmiControlService.playback();\nif (v4 == 0) { ... }\nint v11 = v10.getActivePath();\nHdmiDeviceInfo v12 = this.mHdmiCecNetwork.getSafeDeviceInfoByPath(v11);\nif (v12 == 0) { ... }\nint v14 = v13.getActivePortId();\nHdmiDeviceInfo v15 = HdmiDeviceInfo.hardwarePort(v11, v14);', 'HdmiControlService.-$$Nest$minitBinderCall(this.this$0);\nHdmiDeviceInfo v2 = this.this$0.getActiveSource();\nreturn v2;']

The method getActiveSource has the following similar APIs:

- API Name: canChangeSystemAudioMode()Z in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.8363730907440186, Code:
HdmiControlService.setWorkSourceUidToCallingUid();
Object v7 = this.mLocalDevices.get(0);
HdmiCecNetwork v10 = HdmiCecLocalDevice.mService.getHdmiCecNetwork();
HdmiDeviceInfo v11 = v10.getSafeCecDeviceInfo(5);
if (v9 == 0) { boolean v8 = 1; return v8; }
  - Similarity: 0.833092212677002, Code:
HdmiControlService.-$$Nest$minitBinderCall(this.this$0);
HdmiCecLocalDeviceTv v2 = this.this$0.tv();
boolean v3 = v2.hasSystemAudioDevice();
return v3;
  - Access Control Level: SYS_OR_SIG

- API Name: getSystemAudioMode()Z in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.7986330986022949, Code:
HdmiCecLocalDeviceTv v5 = v6;
if (v5 == 0) {
boolean v14 = v15;
if (v14 == 0) {
return 1;
  - Similarity: 0.7792803049087524, Code:
HdmiCecLocalDeviceTv v2 = this.this$0.tv();
boolean v4 = v2.isSystemAudioActivated();
if (v4 != 0) {
if (v3 == 0) {
boolean v5 = v3.isSystemAudioActivated();
if (v5 == 0) {
return 1;
  - Access Control Level: SYS_OR_SIG

- API Name: getDeviceList()Ljava/util/List; in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.7923354506492615, Code:
HdmiCecNetwork v2 = HdmiControlService.-$$Nest$fgetmHdmiCecNetwork(this.this$0);
List v3 = v2.getSafeCecDevicesLocked();
return v3;
  - Access Control Level: SYS_OR_SIG

- API Name: getPortInfo()Ljava/util/List; in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.7907623648643494, Code:
HdmiControlService.-$$Nest$minitBinderCall(this.this$0);
List v2 = this.this$0.getPortInfo();
if (v2 != 0) {
List v3 = Collections.emptyList();
return v3;
  - Access Control Level: SYS_OR_SIG

- API Name: getInputDevices()Ljava/util/List; in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.7839547395706177, Code:
HdmiCecNetwork v5 = HdmiControlService.-$$Nest$fgetmHdmiCecNetwork(this.this$0);
List v6 = v5.getSafeExternalInputsLocked();
List v8 = this.mMhlDevices;
List v7 = v8;
List v9 = HdmiUtils.mergeToUnmodifiableList(v6, v7);
return v9;
  - Similarity: 0.7730897068977356, Code:
HdmiCecNetwork v2 = HdmiControlService.-$$Nest$fgetmHdmiCecNetwork(this.this$0);
List v3 = v2.getSafeExternalInputsLocked();
List v4 = HdmiControlService.-$$Nest$mgetMhlDevicesLocked(this.this$0);
List v5 = HdmiUtils.mergeToUnmodifiableList(v3, v4);
return v5;
  - Access Control Level: SYS_OR_SIG

