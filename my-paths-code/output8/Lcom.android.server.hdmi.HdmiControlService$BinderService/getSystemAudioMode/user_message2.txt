The method getSystemAudioMode in the following class Lcom.android.server.hdmi.HdmiControlService$BinderService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean getSystemAudioMode(){
	HdmiControlService.setWorkSourceUidToCallingUid();
	Object v7 = this.mLocalDevices.get(0);
	HdmiCecLocalDevice v6 = v7;
	HdmiCecLocalDeviceTv v5 = v6;
	Object v10 = this.mLocalDevices.get(5);
	HdmiCecLocalDevice v9 = v10;
	HdmiCecLocalDeviceAudioSystem v8 = v9;
	if (v5 == 0) {
		HdmiDeviceInfo v13 = HdmiCecLocalDeviceTv.getSafeAvrDeviceInfo();
		if (v13 == 0) {
			boolean v12 = 1;
			if (v12 != 0) {
				boolean v11 = 0;
				if (v11 != 0) {
					if (v8 == 0) {
						boolean v15 = this.mSystemAudioActivated;
						boolean v14 = v15;
						if (v14 == 0) {
							return 1;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean getSystemAudioMode(){
	this.this$0.initBinderCall();
	HdmiCecLocalDevice v4 = this.mHdmiCecNetwork.getLocalDevice(0);
	HdmiCecLocalDeviceTv v3 = v4;
	HdmiCecLocalDevice v6 = this.mHdmiCecNetwork.getLocalDevice(5);
	HdmiCecLocalDeviceAudioSystem v5 = v6;
	if (v3 == 0) {
		boolean v8 = HdmiCecLocalDeviceTv.hasSystemAudioDevice();
		if (v8 != 0) {
			boolean v7 = 0;
			if (v7 != 0) {
				if (v5 == 0) {
					boolean v10 = HdmiCecLocalDevice.mService.isSystemAudioActivated();
					boolean v9 = v10;
					if (v9 == 0) {
						return 1;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean getSystemAudioMode(){
	HdmiControlService.-$$Nest$minitBinderCall(this.this$0);
	HdmiCecLocalDeviceTv v2 = this.this$0.tv();
	HdmiCecLocalDeviceAudioSystem v3 = this.this$0.audioSystem();
	if (v2 == 0) {
		boolean v4 = v2.isSystemAudioActivated();
		if (v4 != 0) {
			if (v3 == 0) {
				boolean v5 = v3.isSystemAudioActivated();
				if (v5 == 0) {
					return 1;
				}
			}
		}
	}
}

and the following sink code:
['boolean v15 = this.mSystemAudioActivated;\nreturn 1;', 'HdmiCecLocalDeviceTv v5 = v6;\nif (v5 == 0) {\nboolean v14 = v15;\nif (v14 == 0) {\nreturn 1;', 'boolean v10 = HdmiCecLocalDevice.mService.isSystemAudioActivated();\nboolean v9 = v10;\nif (v9 == 0) {\nreturn 1;', 'HdmiCecLocalDeviceTv v2 = this.this$0.tv();\nboolean v4 = v2.isSystemAudioActivated();\nif (v4 != 0) {\nif (v3 == 0) {\nboolean v5 = v3.isSystemAudioActivated();\nif (v5 == 0) {\nreturn 1;']

The method getSystemAudioMode has the following similar APIs:

- API Name: canChangeSystemAudioMode()Z in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.8633508086204529, Code:
HdmiControlService.-$$Nest$minitBinderCall(this.this$0);
HdmiCecLocalDeviceTv v2 = this.this$0.tv();
boolean v3 = v2.hasSystemAudioDevice();
return v3;
  - Similarity: 0.8168402910232544, Code:
HdmiControlService.setWorkSourceUidToCallingUid();
Object v7 = this.mLocalDevices.get(0);
HdmiCecNetwork v10 = HdmiCecLocalDevice.mService.getHdmiCecNetwork();
HdmiDeviceInfo v11 = v10.getSafeCecDeviceInfo(5);
if (v9 == 0) { boolean v8 = 1; return v8; }
  - Similarity: 0.7648687362670898, Code:
this.this$0.initBinderCall();
HdmiCecLocalDevice v4 = this.mHdmiCecNetwork.getLocalDevice(0);
HdmiDeviceInfo v6 = HdmiCecLocalDeviceTv.getSafeAvrDeviceInfo();
if (v6 == 0) { boolean v5 = 1; return v5; }
  - Access Control Level: SYS_OR_SIG

- API Name: getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo; in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.7986330986022949, Code:
HdmiCecLocalDevice v7 = this.mHdmiCecNetwork.getLocalDevice(4);
HdmiCecLocalDevicePlayback v6 = v7;
if (v6 == 0) { ... }
HdmiDeviceInfo$Builder v26 = new HdmiDeviceInfo$Builder(2,0);
HdmiDeviceInfo$Builder v28 = v26.setPhysicalAddress(v18);
HdmiDeviceInfo$Builder v29 = v28.setPortId(v24);
HdmiDeviceInfo$Builder v30 = v29.setVendorId(0);
StringBuilder v31 = new StringBuilder();
StringBuilder v33 = v31.append("HDMI");
StringBuilder v34 = v33.append(v24);
String v35 = v34.toString();
HdmiDeviceInfo$Builder v36 = v30.setDisplayName(v35);
HdmiDeviceInfo v37 = v36.build();
  - Similarity: 0.7763029932975769, Code:
HdmiCecLocalDevicePlayback v4 = HdmiControlService.playback();
if (v4 == 0) { ... }
int v11 = v10.getActivePath();
HdmiDeviceInfo v12 = this.mHdmiCecNetwork.getSafeDeviceInfoByPath(v11);
if (v12 == 0) { ... }
int v14 = v13.getActivePortId();
HdmiDeviceInfo v15 = HdmiDeviceInfo.hardwarePort(v11, v14);
  - Access Control Level: SYS_OR_SIG

- API Name: isPlaybackActive(Landroid/media/IMediaRouterClient;)Z in the following Class: Lcom.android.server.media.MediaRouterService with the following sink code entries:
  - Similarity: 0.7861509919166565, Code:
boolean v4 = this.mAudioPlayerStateMonitor.isPlaybackActive(MediaRouterService$ClientRecord.mUid);
return v4;
  - Access Control Level: NONE

- API Name: isDeviceColorManaged()Z in the following Class: Lcom.android.server.display.color.ColorDisplayService$BinderService with the following sink code entries:
  - Similarity: 0.7666672468185425, Code:
boolean v5 = v4.isDeviceColorManaged();
return v2;
  - Access Control Level: NONE

- API Name: shouldHandleTvPowerKey()Z in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.7583038806915283, Code:
HdmiCecConfig v5 = HdmiControlService.getHdmiCecConfig();
String v6 = v5.getStringValue("power_control_mode");
boolean v7 = v6.equals("none");
  - Similarity: 0.7578718662261963, Code:
HdmiCecConfig v8 = HdmiControlService.getHdmiCecConfig();
int v9 = v8.getIntValue("hdmi_cec_enabled");
  - Access Control Level: SYS_OR_SIG

