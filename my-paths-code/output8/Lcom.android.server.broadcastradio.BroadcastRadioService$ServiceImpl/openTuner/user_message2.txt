The method openTuner in the following class Lcom.android.server.broadcastradio.BroadcastRadioService$ServiceImpl has the following code snippet:

This is path 1 for the API with depth 2:
public ITuner openTuner(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	if (v9 != 0) {
		if (p4 == 0) {
			Object v10 = this.mLock;
			BroadcastRadioService v11 = this.mHal2;
			Integer v13 = Integer.valueOf(p1);
			boolean v14 = this.mModules.containsKey(v13);
			boolean v12 = v14;
			if (v12 == 0) {
				BroadcastRadioService v15 = this.mHal2;
				Object v18 = Objects.requireNonNull(p4);
				if (p3 == 0) {
					Integer v19 = Integer.valueOf(p1);
					Object v20 = this.mModules.get(v19);
					if (v20 == 0) {
						Object v22 = new Object(0);
						this.mEventLogger.logRadioEvent("Open TunerSession", v22);
						if (this.mHalTunerSession != 0) {
							Mutable v24 = new Mutable();
							RadioModule$$ExternalSyntheticLambda5 v26 = new RadioModule$$ExternalSyntheticLambda5(RadioModule,v24);
							this.mService.openSession(this.mHalTunerCallback, v26);
							Object v29 = Objects.requireNonNull(Mutable.value);
							this.mHalTunerSession = Mutable.value;
							TunerSession v30 = new TunerSession(RadioModule,this.mHalTunerSession,p4,this.mLock);
							boolean v32 = this.mAidlTunerSessions.add(v30);
							if (this.mAntennaConnected == 0) {
								boolean v33 = this.mAntennaConnected.booleanValue();
								p4.onAntennaState(v33);
								if (this.mCurrentProgramInfo == 0) {
									p4.onCurrentProgramInfoChanged(this.mCurrentProgramInfo);
									TunerSession v21 = v30;
									if (p2 == 0) {
										TunerSession.checkNotClosedLocked();
										Object v38 = Objects.requireNonNull(p2);
										this.mDummyConfig = p2;
										TunerSession$$ExternalSyntheticLambda5 v40 = new TunerSession$$ExternalSyntheticLambda5(p2);
										this.mModule.fanoutAidlCallback(v40);
										ITuner v16 = v21;
										return v16;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ITuner openTuner(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	if (v9 != 0) {
		if (p4 == 0) {
			Object v10 = this.mLock;
			BroadcastRadioService v11 = this.mHal2;
			Integer v13 = Integer.valueOf(p1);
			boolean v14 = this.mModules.containsKey(v13);
			boolean v12 = v14;
			if (v12 == 0) {
				BroadcastRadioService v15 = this.mHal2;
				Object v18 = Objects.requireNonNull(p4);
				if (p3 == 0) {
					Integer v19 = Integer.valueOf(p1);
					Object v20 = this.mModules.get(v19);
					if (v20 == 0) {
						TunerSession v21 = v20.openSession(p4);
						if (p2 == 0) {
							v21.setConfiguration(p2);
							ITuner v16 = v21;
							return v16;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ITuner openTuner(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	p0.enforcePolicyAccess();
	if (p4 == 0) {
		Object v8 = BroadcastRadioService.-$$Nest$fgetmLock(this.this$0);
		BroadcastRadioService v9 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
		boolean v10 = v9.hasModule(p1);
		if (v10 == 0) {
			BroadcastRadioService v11 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
			ITuner v12 = v11.openSession(p1, p2, p3, p4);
			return v12;
		}
	}
}

and the following sink code:
['TunerSession v30 = new TunerSession(RadioModule, this.mHalTunerSession, p4, this.mLock);\nthis.mService.openSession(this.mHalTunerCallback, v26);\nITuner v16 = v21; return v16;', 'TunerSession v21 = v20.openSession(p4);\nv21.setConfiguration(p2);\nITuner v16 = v21; return v16;', 'ITuner v12 = v11.openSession(p1, p2, p3, p4);\nreturn v12;']

The method openTuner has the following similar APIs:

- API Name: resumeRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.733092188835144, Code:
ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
ITvInputSession v9 = v11;
ITvInputSession v8 = v9;
v8.resumeRecording(p2);
  - Access Control Level: SYS_OR_SIG

- API Name: createTestSession(ILandroid/hardware/biometrics/ITestSessionCallback;Ljava/lang/String;)Landroid/hardware/biometrics/ITestSession; in the following Class: Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper with the following sink code entries:
  - Similarity: 0.7193917632102966, Code:
ITestSession v12 = v3.createTestSession(p1, p2, p3);
return v12;
  - Similarity: 0.7031375765800476, Code:
ITestSession v5 = v3.createTestSession(p1, p2, p3);
return v5;
  - Access Control Level: NORMAL

- API Name: requestDescrambler(Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;[I)Z in the following Class: Lcom.android.server.tv.tunerresourcemanager.TunerResourceManagerService$BinderService with the following sink code entries:
  - Similarity: 0.715917706489563, Code:
int v16 = TunerResourceManagerService.generateResourceHandle(2, 0);
boolean v8 = 1;
return v8;
  - Access Control Level: SYS_OR_SIG

- API Name: relayoutOverlayView(Landroid/os/IBinder;Landroid/graphics/Rect;I)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7115060687065125, Code:
TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p1, v1, v3);
ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
ITvInputSession v9 = v11;
ITvInputSession v8 = v9;
v8.relayoutOverlayView(p2);
  - Access Control Level: SYS_OR_SIG

