The method requestUninstall has the following code snippet:

This is path 1 for the API with depth 2:
public int requestUninstall(byte[] p1, ICallback p2){
	this.mPermissionHelper.enforceCallerHasPermission("android.permission.UPDATE_TIME_ZONE_RULES");
	if (p1 == 0) {
		ByteArrayInputStream v4 = new ByteArrayInputStream(p1);
		DataInputStream v6 = new DataInputStream(v4);
		int v8 = v6.readInt();
		long v9 = v6.readLong();
		long v10 = v6.readLong();
		CheckToken v11 = new CheckToken(v8,v12);
		PackageVersions v12 = new PackageVersions(v9,v10);
		v6.close();
		CheckToken v3 = v11;
		CheckToken v2 = v3;
		String v16 = RulesManagerService.toStringOrNull(v2);
		EventLogTags.writeTimezoneRequestUninstall(v16);
		if (p2 == 0) {
			boolean v18 = this.mOperationInProgress.get();
			if (v18 == 0) {
				this.mOperationInProgress.set(1);
				RulesManagerService$UninstallRunnable v20 = new RulesManagerService$UninstallRunnable(p0,v2,p2);
				this.mExecutor.execute(v20);
				return 0;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int requestUninstall(byte[] p1, ICallback p2){
	this.mPermissionHelper.enforceCallerHasPermission("android.permission.UPDATE_TIME_ZONE_RULES");
	if (p1 == 0) {
		CheckToken v3 = CheckToken.fromByteArray(p1);
		CheckToken v2 = v3;
		if (v2 != 0) {
			String v4 = 0;
			int v6 = EventLog.writeEvent(51620, v4);
			if (p2 == 0) {
				boolean v7 = this.mOperationInProgress.get();
				if (v7 == 0) {
					this.mOperationInProgress.set(1);
					RulesManagerService$UninstallRunnable v9 = new RulesManagerService$UninstallRunnable(p0,v2,p2);
					this.mExecutor.execute(v9);
					return 0;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int requestUninstall(byte[] p1, ICallback p2){
	this.mPermissionHelper.enforceCallerHasPermission("android.permission.UPDATE_TIME_ZONE_RULES");
	if (p1 == 0) {
		CheckToken v2 = RulesManagerService.createCheckTokenOrThrow(p1);
		String v3 = RulesManagerService.toStringOrNull(v2);
		EventLogTags.writeTimezoneRequestUninstall(v3);
		if (p2 == 0) {
			boolean v5 = this.mOperationInProgress.get();
			if (v5 == 0) {
				this.mOperationInProgress.set(1);
				RulesManagerService$UninstallRunnable v7 = new RulesManagerService$UninstallRunnable(p0,v2,p2);
				this.mExecutor.execute(v7);
				return 0;
			}
		}
	}
}

and the following sink code:
['this.mPermissionHelper.enforceCallerHasPermission("android.permission.UPDATE_TIME_ZONE_RULES");\nCheckToken v2 = RulesManagerService.createCheckTokenOrThrow(p1);\nString v3 = RulesManagerService.toStringOrNull(v2);\nEventLogTags.writeTimezoneRequestUninstall(v3);\nRulesManagerService$UninstallRunnable v7 = new RulesManagerService$UninstallRunnable(p0,v2,p2);\nthis.mExecutor.execute(v7);', 'ByteArrayInputStream v4 = new ByteArrayInputStream(p1);\nDataInputStream v6 = new DataInputStream(v4);\nint v8 = v6.readInt();\nlong v9 = v6.readLong();\nlong v10 = v6.readLong();\nCheckToken v11 = new CheckToken(v8,v12);\nPackageVersions v12 = new PackageVersions(v9,v10);', 'CheckToken v3 = CheckToken.fromByteArray(p1);\nString v4 = 0;\nint v6 = EventLog.writeEvent(51620, v4);\nRulesManagerService$UninstallRunnable v9 = new RulesManagerService$UninstallRunnable(p0,v2,p2);\nthis.mExecutor.execute(v9);']

The method requestUninstall has the following similar APIs:

- API Name: requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I with Similarity Score: 0.9160587191581726
  - Access Control Level: NONE and the following code:
CheckToken v3 = CheckToken.fromByteArray(p2);
RulesManagerService$InstallRunnable v9 = new RulesManagerService$InstallRunnable(p0,p1,0,p3);
this.mExecutor.execute(v9);

- API Name: requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I with Similarity Score: 0.9062885046005249
  - Access Control Level: NONE and the following code:
CheckToken v11 = new CheckToken(v8,v12);
RulesManagerService$InstallRunnable v20 = new RulesManagerService$InstallRunnable(p0,p1,0,p3);
this.mExecutor.execute(v20);

