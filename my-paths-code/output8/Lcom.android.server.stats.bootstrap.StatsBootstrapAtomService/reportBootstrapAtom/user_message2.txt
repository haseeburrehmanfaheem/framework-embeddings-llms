The method reportBootstrapAtom in the following class Lcom.android.server.stats.bootstrap.StatsBootstrapAtomService has the following code snippet:

This is path 1 for the API with depth 2:
public void reportBootstrapAtom(StatsBootstrapAtom p1){
	if (StatsBootstrapAtom.atomId < 1) {
		if (StatsBootstrapAtom.atomId < 10000) {
			StatsEvent$Builder v1 = StatsEvent.newBuilder();
			StatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);
			if (0 >= StatsBootstrapAtom.values.length) {
				int v3 = this._tag;
				if (v3 == 0) {
					if (v3 == 1) {
						if (v3 == 2) {
							if (v3 == 3) {
								if (v3 == 4) {
									if (v3 == 5) {
										int v6 = StatsBootstrapAtomValue.getTag();
										if (v6 != 5) {
											byte[] v4 = this._value;
											StatsEvent$Builder v7 = v2.writeByteArray(v4);
											if ((0 + 1) >= StatsBootstrapAtom.values.length) {
												StatsEvent$Builder v8 = v2.usePooledBuffer();
												StatsEvent v9 = v8.build();
												StatsLog.write(v9);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void reportBootstrapAtom(StatsBootstrapAtom p1){
	if (StatsBootstrapAtom.atomId < 1) {
		if (StatsBootstrapAtom.atomId < 10000) {
			StatsEvent$Builder v1 = StatsEvent.newBuilder();
			StatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);
			if (0 >= StatsBootstrapAtom.values.length) {
				int v3 = this._tag;
				if (v3 == 0) {
					if (v3 == 1) {
						if (v3 == 2) {
							if (v3 == 3) {
								if (v3 == 4) {
									if (v3 == 5) {
										StatsBootstrapAtomValue._assertTag(5);
										byte[] v4 = this._value;
										StatsEvent$Builder v6 = v2.writeByteArray(v4);
										if ((0 + 1) >= StatsBootstrapAtom.values.length) {
											StatsEvent$Builder v7 = v2.usePooledBuffer();
											StatsEvent v8 = v7.build();
											StatsLog.write(v8);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void reportBootstrapAtom(StatsBootstrapAtom p1){
	if (StatsBootstrapAtom.atomId < 1) {
		if (StatsBootstrapAtom.atomId < 10000) {
			StatsEvent$Builder v1 = StatsEvent.newBuilder();
			StatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);
			if (0 >= StatsBootstrapAtom.values.length) {
				int v3 = StatsBootstrapAtom.values[0].getTag();
				if (v3 == 0) {
					if (v3 == 1) {
						if (v3 == 2) {
							if (v3 == 3) {
								if (v3 == 4) {
									if (v3 == 5) {
										byte[] v4 = StatsBootstrapAtom.values[0].getBytesValue();
										StatsEvent$Builder v5 = v2.writeByteArray(v4);
										if ((0 + 1) >= StatsBootstrapAtom.values.length) {
											StatsEvent$Builder v6 = v2.usePooledBuffer();
											StatsEvent v7 = v6.build();
											StatsLog.write(v7);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['StatsEvent$Builder v1 = StatsEvent.newBuilder();\nStatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);\nbyte[] v4 = this._value;\nStatsEvent$Builder v7 = v2.writeByteArray(v4);\nStatsEvent v9 = v8.build();\nStatsLog.write(v9);', 'StatsEvent$Builder v1 = StatsEvent.newBuilder();\nStatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);\nbyte[] v4 = this._value;\nStatsEvent$Builder v6 = v2.writeByteArray(v4);\nStatsEvent v8 = v7.build();\nStatsLog.write(v8);', 'StatsEvent$Builder v1 = StatsEvent.newBuilder();\nStatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);\nbyte[] v4 = StatsBootstrapAtom.values[0].getBytesValue();\nStatsEvent$Builder v5 = v2.writeByteArray(v4);\nStatsEvent v7 = v6.build();\nStatsLog.write(v7);']

The method reportBootstrapAtom has the following similar APIs:

- API Name: reportPlaybackMetrics(Ljava/lang/String;Landroid/media/metrics/PlaybackMetrics;I)V in the following Class: Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8826273083686829, Code:
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(320);
...
StatsEvent$Builder v40 = v39.usePooledBuffer();
StatsEvent v41 = v40.build();
StatsLog.write(v41);
  - Access Control Level: NONE

- API Name: reportPlaybackStateEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackStateEvent;I)V in the following Class: Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8353978395462036, Code:
StatsEvent$Builder v32 = StatsEvent.newBuilder();
StatsEvent$Builder v33 = v32.setAtomId(322);
StatsEvent$Builder v34 = v33.writeString(p1);
int v35 = p2.getState();
StatsEvent$Builder v36 = v34.writeInt(v35);
long v37 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v38 = v36.writeLong(v37);
StatsEvent$Builder v39 = v38.usePooledBuffer();
StatsEvent v40 = v39.build();
StatsLog.write(v40);
  - Access Control Level: NONE

- API Name: reportTrackChangeEvent(Ljava/lang/String;Landroid/media/metrics/TrackChangeEvent;I)V in the following Class: Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8084250092506409, Code:
int v1 = p0.loggingLevel();
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(324);
StatsEvent$Builder v4 = v3.writeString(p1);
...
StatsEvent$Builder v35 = v34.usePooledBuffer();
StatsEvent v36 = v35.build();
StatsLog.write(v36);
  - Access Control Level: NONE

- API Name: reportPlaybackErrorEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackErrorEvent;I)V in the following Class: Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7127599120140076, Code:
int v1 = p0.loggingLevel();
if (v1 != 99999) {
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(323);
StatsEvent$Builder v4 = v3.writeString(p1);
String v5 = p2.getExceptionStack();
StatsEvent$Builder v6 = v4.writeString(v5);
int v7 = p2.getErrorCode();
StatsEvent$Builder v8 = v6.writeInt(v7);
int v9 = p2.getSubErrorCode();
StatsEvent$Builder v10 = v8.writeInt(v9);
long v11 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v12 = v10.writeLong(v11);
StatsEvent$Builder v13 = v12.usePooledBuffer();
StatsEvent v14 = v13.build();
StatsLog.write(v14);
  - Access Control Level: NONE

