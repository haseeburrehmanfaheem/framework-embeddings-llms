The method startInstallation in the following class Lcom.android.server.DynamicSystemService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean startInstallation(String p1){
	if (this.mGsiService == 0) {
		IBinder v2 = ServiceManager.waitForService("gsiservice");
		if (v2 != 0) {
			IInterface v4 = v2.queryLocalInterface("android.gsi.IGsiService");
			if (v4 == 0) {
				if (v4 instanceof IGsiService == 0) {
					IGsiService$Stub$Proxy v5 = new IGsiService$Stub$Proxy(v2);
					IGsiService v3 = v5;
					IGsiService v1 = v3;
					this.mGsiService = v1;
					String v7 = SystemProperties.get("os.aot.path");
					boolean v8 = v7.isEmpty();
					if (v8 == 0) {
						int v9 = UserHandle.myUserId();
						Object v10 = this.mContext.getSystemService(StorageManage.class);
						List v11 = v10.getVolumes();
						Iterator v12 = v11.iterator();
						boolean v13 = v12.hasNext();
						if (v13 == 0) {
							Object v14 = v12.next();
							int v15 = v14.getType();
							if (v15 == 0) {
								boolean v16 = v12.hasNext();
								if (v16 == 0) {
									boolean v17 = getPath().isEmpty();
									if (v17 == 0) {
										StringBuilder v18 = new StringBuilder();
										StringBuilder v20 = v18.append("/data/gsi/");
										StringBuilder v21 = v18.append(p1);
										String v22 = v18.toString();
										this.mInstallPath = v7;
										this.mDsuSlot = p1;
										int v29 = v1.openInstall(v7);
										if (v29 == 0) {
											return 0;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean startInstallation(String p1){
	if (this.mGsiService == 0) {
		IBinder v2 = ServiceManager.waitForService("gsiservice");
		IGsiService v3 = IGsiService$Stub.asInterface(v2);
		IGsiService v1 = v3;
		this.mGsiService = v1;
		String v4 = SystemProperties.get("os.aot.path");
		boolean v5 = v4.isEmpty();
		if (v5 == 0) {
			int v6 = UserHandle.myUserId();
			Object v7 = this.mContext.getSystemService(StorageManage.class);
			List v8 = v7.getVolumes();
			Iterator v9 = v8.iterator();
			boolean v10 = v9.hasNext();
			if (v10 == 0) {
				Object v11 = v9.next();
				int v12 = v11.getType();
				if (v12 == 0) {
					boolean v13 = v9.hasNext();
					if (v13 == 0) {
						boolean v14 = getPath().isEmpty();
						if (v14 == 0) {
							StringBuilder v15 = new StringBuilder();
							StringBuilder v17 = v15.append("/data/gsi/");
							StringBuilder v18 = v15.append(p1);
							String v19 = v15.toString();
							this.mInstallPath = v4;
							this.mDsuSlot = p1;
							int v26 = v1.openInstall(v4);
							if (v26 == 0) {
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean startInstallation(String p1){
	IGsiService v1 = p0.getGsiService();
	this.mGsiService = v1;
	String v2 = SystemProperties.get("os.aot.path");
	boolean v3 = v2.isEmpty();
	if (v3 == 0) {
		int v4 = UserHandle.myUserId();
		Object v5 = this.mContext.getSystemService(StorageManage.class);
		List v6 = v5.getVolumes();
		Iterator v7 = v6.iterator();
		boolean v8 = v7.hasNext();
		if (v8 == 0) {
			Object v9 = v7.next();
			int v10 = v9.getType();
			if (v10 == 0) {
				boolean v11 = v7.hasNext();
				if (v11 == 0) {
					boolean v12 = getPath().isEmpty();
					if (v12 == 0) {
						StringBuilder v13 = new StringBuilder();
						StringBuilder v15 = v13.append("/data/gsi/");
						StringBuilder v16 = v13.append(p1);
						String v17 = v13.toString();
						this.mInstallPath = v2;
						this.mDsuSlot = p1;
						int v24 = v1.openInstall(v2);
						if (v24 == 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['String v7 = SystemProperties.get("os.aot.path");\nStringBuilder v18 = v15.append(p1);\nString v22 = v18.toString();\nthis.mInstallPath = v7;\nthis.mDsuSlot = p1;\nint v29 = v1.openInstall(v7);', 'IGsiService v3 = IGsiService$Stub.asInterface(v2);\nthis.mGsiService = v3;\nint v26 = v1.openInstall(v4);', 'IGsiService v1 = p0.getGsiService();\nthis.mGsiService = v1;\nint v24 = v1.openInstall(v2);']

The method startInstallation has the following similar APIs:

- API Name: finishInstallation()Z in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.9033011198043823, Code:
IGsiService v1 = p0.getGsiService();
int v2 = v1.closeInstall();
  - Similarity: 0.7515578866004944, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IInterface v4 = v2.queryLocalInterface("android.gsi.IGsiService");
IGsiService$Stub$Proxy v5 = new IGsiService$Stub$Proxy(v2);
IGsiService v3 = v5;
IGsiService v1 = v3;
int v7 = v1.closeInstall();
  - Similarity: 0.7457042932510376, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IGsiService v3 = IGsiService$Stub.asInterface(v2);
IGsiService v1 = v3;
int v4 = v1.closeInstall();
  - Access Control Level: NONE

- API Name: abort()Z in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.8648539781570435, Code:
IGsiService v1 = p0.getGsiService();
boolean v2 = v1.cancelGsiInstall();
  - Similarity: 0.8530571460723877, Code:
IGsiService v3 = IGsiService$Stub.asInterface(v2);
IGsiService v1 = v3;
boolean v4 = v1.cancelGsiInstall();
  - Access Control Level: NONE

- API Name: getInstallationProgress()Landroid/gsi/GsiProgress; in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.8309593200683594, Code:
IGsiService v1 = p0.getGsiService();
GsiProgress v2 = v1.getInstallProgress();
return v2;
  - Access Control Level: NONE

- API Name: isEnabled()Z in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.7817908525466919, Code:
IGsiService v1 = p0.getGsiService();
boolean v2 = v1.isGsiEnabled();
return v2;
  - Similarity: 0.7475789785385132, Code:
IGsiService v3 = 0;
IGsiService v1 = v3;
boolean v4 = v1.isGsiEnabled();
return v4;
  - Access Control Level: NONE

- API Name: submitFromAshmem(J)Z in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.7662796974182129, Code:
IGsiService v3 = IGsiService$Stub.asInterface(v2);
IGsiService v1 = v3;
boolean v4 = v1.commitGsiChunkFromAshmem(p1);
return v4;
  - Access Control Level: NONE

