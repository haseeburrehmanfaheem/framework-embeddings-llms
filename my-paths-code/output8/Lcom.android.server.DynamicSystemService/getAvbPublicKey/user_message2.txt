The method getAvbPublicKey in the following class Lcom.android.server.DynamicSystemService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean getAvbPublicKey(AvbPublicKey p1){
	if (this.mGsiService == 0) {
		IBinder v2 = ServiceManager.waitForService("gsiservice");
		if (v2 != 0) {
			IGsiService v3 = 0;
			IGsiService v1 = v3;
			int v4 = v1.getAvbPublicKey(p1);
			if (v4 != 0) {
				return 1;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean getAvbPublicKey(AvbPublicKey p1){
	if (this.mGsiService == 0) {
		IBinder v2 = ServiceManager.waitForService("gsiservice");
		IGsiService v3 = IGsiService$Stub.asInterface(v2);
		IGsiService v1 = v3;
		int v4 = v1.getAvbPublicKey(p1);
		if (v4 != 0) {
			return 1;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean getAvbPublicKey(AvbPublicKey p1){
	IGsiService v1 = p0.getGsiService();
	int v2 = v1.getAvbPublicKey(p1);
	if (v2 != 0) {
		return 1;
	}
}

and the following sink code:
['IGsiService v1 = p0.getGsiService();\nint v2 = v1.getAvbPublicKey(p1);\nif (v2 != 0) { return 1; }', 'IBinder v2 = ServiceManager.waitForService("gsiservice");\nIGsiService v3 = IGsiService$Stub.asInterface(v2);\nIGsiService v1 = v3;\nint v4 = v1.getAvbPublicKey(p1);\nif (v4 != 0) { return 1; }', 'IGsiService v3 = 0;\nIGsiService v1 = v3;\nint v4 = v1.getAvbPublicKey(p1);\nif (v4 != 0) { return 1; }']

The method getAvbPublicKey has the following similar APIs:

- API Name: closePartition()Z in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.8288577795028687, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IInterface v4 = v2.queryLocalInterface("android.gsi.IGsiService");
IGsiService$Stub$Proxy v5 = new IGsiService$Stub$Proxy(v2);
IGsiService v3 = v5;
IGsiService v1 = v3;
int v7 = v1.closePartition();
if (v7 == 0) { return 0; }
  - Similarity: 0.786623477935791, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IGsiService v3 = IGsiService$Stub.asInterface(v2);
IGsiService v1 = v3;
int v4 = v1.closePartition();
if (v4 == 0) { return 0; }
  - Access Control Level: NONE

- API Name: isEnabled()Z in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.8214783072471619, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IGsiService v3 = IGsiService$Stub.asInterface(v2);
IGsiService v1 = v3;
boolean v4 = v1.isGsiEnabled();
return v4;
  - Access Control Level: NONE

- API Name: setAshmem(Landroid/os/ParcelFileDescriptor;J)Z in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.8143999576568604, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IGsiService v3 = IGsiService$Stub.asInterface(v2);
IGsiService v1 = v3;
boolean v4 = v1.setGsiAshmem(p1, p2);
return v4;
  - Similarity: 0.7989383935928345, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
if (v2 != 0) {
IGsiService v3 = 0;
IGsiService v1 = v3;
boolean v4 = v1.setGsiAshmem(p1, p2);
return v4;
  - Access Control Level: NONE

- API Name: finishInstallation()Z in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.814264178276062, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IInterface v4 = v2.queryLocalInterface("android.gsi.IGsiService");
IGsiService$Stub$Proxy v5 = new IGsiService$Stub$Proxy(v2);
IGsiService v3 = v5;
IGsiService v1 = v3;
int v7 = v1.closeInstall();
  - Similarity: 0.8081989884376526, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IGsiService v3 = IGsiService$Stub.asInterface(v2);
IGsiService v1 = v3;
int v4 = v1.closeInstall();
  - Access Control Level: NONE

- API Name: getInstallationProgress()Landroid/gsi/GsiProgress; in the following Class: Lcom.android.server.DynamicSystemService with the following sink code entries:
  - Similarity: 0.776382327079773, Code:
IBinder v2 = ServiceManager.waitForService("gsiservice");
IGsiService v3 = IGsiService$Stub.asInterface(v2);
IGsiService v1 = v3;
GsiProgress v4 = v1.getInstallProgress();
return v4;
  - Access Control Level: NONE

