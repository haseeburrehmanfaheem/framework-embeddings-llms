The method dispatchVolumeKeyEvent in the following class Lcom.android.server.media.MediaSessionService$SessionManagerImpl has the following code snippet:

This is path 1 for the API with depth 2:
public void dispatchVolumeKeyEvent(String p1, String p2, boolean p3, KeyEvent p4, int p5, boolean p6){
	if (p4 == 0) {
		int v1 = p4.getKeyCode();
		if (v1 == 24) {
			int v2 = p4.getKeyCode();
			if (v2 == 25) {
				int v3 = p4.getKeyCode();
				if (v3 == 164) {
					int v4 = Binder.getCallingPid();
					int v5 = Binder.getCallingUid();
					long v6 = Binder.clearCallingIdentity();
					Object v27 = this.mLock;
					if (this.mGlobalPrioritySession == 0) {
						boolean v30 = this.mGlobalPrioritySession.isActive();
						if (v30 == 0) {
							boolean v29 = 1;
							boolean v28 = v29;
							if (v28 == 0) {
								int v32 = p4.getAction();
								if (v32 != 0) {
									int v33 = p4.getAction();
									if (v33 != 1) {
										int v34 = p4.getKeyCode();
										if (v34 == 24) {
											if (v34 == 25) {
												if (v34 == 164) {
													if (1 != 0) {
														if (1 == 0) {
															if (p6 != 0) {
																if (1 == 0) {
																	if (0 == 0) {
																		if (1 == 0) {
																			boolean v36 = MediaSessionService.-$$Nest$misGlobalPriorityActiveLocked(this.this$0);
																			if (v36 == 0) {
																				MediaSessionRecord v37 = MediaSessionService.-$$Nest$fgetmGlobalPrioritySession(this.this$0);
																				boolean v38 = MediaSessionService$SessionManagerImpl.isValidLocalStreamType(p5);
																				if (v38 == 0) {
																					boolean v39 = AudioSystem.isStreamActive(p5, 0);
																					if (v39 == 0) {
																						if (v37 == 0) {
																							if (1 == 0) {
																								if (p6 == 0) {
																									boolean v54 = AudioSystem.isStreamActive(3, 0);
																									if (v54 != 0) {
																										Binder.restoreCallingIdentity(v6);
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void dispatchVolumeKeyEvent(String p1, String p2, boolean p3, KeyEvent p4, int p5, boolean p6){
	if (p4 == 0) {
		int v1 = p4.getKeyCode();
		if (v1 == 24) {
			int v2 = p4.getKeyCode();
			if (v2 == 25) {
				int v3 = p4.getKeyCode();
				if (v3 == 164) {
					int v4 = Binder.getCallingPid();
					int v5 = Binder.getCallingUid();
					long v6 = Binder.clearCallingIdentity();
					Object v27 = this.mLock;
					boolean v29 = this.this$0.isGlobalPriorityActiveLocked();
					boolean v28 = v29;
					if (v28 == 0) {
						int v31 = p4.getAction();
						if (v31 != 0) {
							int v32 = p4.getAction();
							if (v32 != 1) {
								int v33 = p4.getKeyCode();
								if (v33 == 24) {
									if (v33 == 25) {
										if (v33 == 164) {
											if (1 != 0) {
												if (1 == 0) {
													if (p6 != 0) {
														if (1 == 0) {
															if (0 == 0) {
																if (1 == 0) {
																	MediaSessionService$SessionManagerImpl.dispatchAdjustVolumeLocked(p1, p2, v4, v5, p3, p5, 0, 4096, p6);
																	Binder.restoreCallingIdentity(v6);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void dispatchVolumeKeyEvent(String p1, String p2, boolean p3, KeyEvent p4, int p5, boolean p6){
	if (p4 == 0) {
		int v1 = p4.getKeyCode();
		if (v1 == 24) {
			int v2 = p4.getKeyCode();
			if (v2 == 25) {
				int v3 = p4.getKeyCode();
				if (v3 == 164) {
					int v4 = Binder.getCallingPid();
					int v5 = Binder.getCallingUid();
					long v6 = Binder.clearCallingIdentity();
					Object v27 = MediaSessionService.-$$Nest$fgetmLock(this.this$0);
					boolean v28 = MediaSessionService.-$$Nest$misGlobalPriorityActiveLocked(this.this$0);
					if (v28 == 0) {
						p0.dispatchVolumeKeyEventLocked(p1, p2, v4, v5, p3, p4, p5, p6);
						Binder.restoreCallingIdentity(v6);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v4 = Binder.getCallingPid();\nint v5 = Binder.getCallingUid();\nlong v6 = Binder.clearCallingIdentity();\np0.dispatchVolumeKeyEventLocked(p1, p2, v4, v5, p3, p4, p5, p6);', 'MediaSessionService$SessionManagerImpl.dispatchAdjustVolumeLocked(p1, p2, v4, v5, p3, p5, 0, 4096, p6);\nBinder.restoreCallingIdentity(v6);']

The method dispatchVolumeKeyEvent has the following similar APIs:

- API Name: dispatchAdjustVolume(Ljava/lang/String;Ljava/lang/String;III)V in the following Class: Lcom.android.server.media.MediaSessionService$SessionManagerImpl with the following sink code entries:
  - Similarity: 0.8385632634162903, Code:
p0.dispatchAdjustVolumeLocked(p1, p2, v1, v2, 0, p3, p4, p5, 0);
  - Access Control Level: NONE

- API Name: dispatchSurfaceChanged(Landroid/os/IBinder;IIII)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7784178256988525, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v4 = this.this$0.resolveCallingUserId(v2, v1, p5, "dispatchSurfaceChanged");
ITvInputSession v10 = this.this$0.getSessionLocked(v7);
v9.dispatchSurfaceChanged(p2, p3, p4);
  - Similarity: 0.7712175250053406, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v4 = this.this$0.resolveCallingUserId(v2, v1, p5, "dispatchSurfaceChanged");
TvInteractiveAppManagerService$SessionState v8 = this.this$0.getSessionStateLocked(p1, v1, v3);
ITvInteractiveAppSession v10 = this.this$0.getSessionLocked(v7);
v9.dispatchSurfaceChanged(p2, p3, p4);
  - Access Control Level: SYS_OR_SIG

- API Name: sendAppPrivateCommand(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;I)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7784100770950317, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v4 = this.this$0.resolveCallingUserId(v2, v1, p4, "sendAppPrivateCommand");
ITvInputSession v8 = this.this$0.getSessionLocked(p1, v1, v3);
v7.appPrivateCommand(p2, p3);
  - Similarity: 0.7677109837532043, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, "sendAppPrivateCommand");
ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3);
v6.appPrivateCommand(p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: setSessionVolumeWithManager(Landroid/media/IMediaRouter2Manager;ILjava/lang/String;I)V in the following Class: Lcom.android.server.media.MediaRouterService with the following sink code entries:
  - Similarity: 0.7766246199607849, Code:
MediaRouter2ServiceImpl.setSessionVolumeWithManagerLocked(p2, p1, p3, p4);
  - Access Control Level: NONE

- API Name: dispatchVolumeKeyEventToSessionAsSystemService(Ljava/lang/String;Ljava/lang/String;Landroid/view/KeyEvent;Landroid/media/session/MediaSession$Token;)V in the following Class: Lcom.android.server.media.MediaSessionService$SessionManagerImpl with the following sink code entries:
  - Similarity: 0.7679587006568909, Code:
MediaSessionRecord v12 = v11.getMediaSessionRecord(p4);
v38.tempAllowlistTargetPkgIfPossible(v39, v40, v1, v2, p1, "MediaSessionRecord:adjustVolume");
  - Access Control Level: SYS_OR_SIG

