The method putAllOverridesOnReleaseBuilds has the following code snippet:

This is path 1 for the API with depth 2:
public void putAllOverridesOnReleaseBuilds(CompatibilityOverridesByPackageConfig p1){
	Collection v2 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		Set v6 = CompatibilityOverrideConfig.overrides.keySet();
		Iterator v8 = v6.iterator();
		boolean v9 = v8.hasNext();
		if (v9 == 0) {
			Object v10 = v8.next();
			long v11 = v10.longValue();
			boolean v13 = this.mCompatConfig.isKnownChangeId(v11);
			boolean v12 = v13;
			if (v12 == 0) {
				long v14 = v10.longValue();
				Long v16 = Long.valueOf(v14);
				Object v17 = this.mChanges.get(v16);
				if (v17 == 0) {
					boolean v18 = v17.getOverridable();
					if (v18 == 0) {
						boolean v15 = 1;
						if (v15 == 0) {
							boolean v19 = v8.hasNext();
							if (v19 == 0) {
								boolean v20 = v3.hasNext();
								if (v20 == 0) {
									Set v22 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.keySet();
									Iterator v23 = v22.iterator();
									boolean v24 = v23.hasNext();
									if (v24 == 0) {
										Object v25 = v23.next();
										Object v26 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.get(v25);
										Set v28 = CompatibilityOverrideConfig.overrides.keySet();
										Iterator v29 = v28.iterator();
										boolean v30 = v29.hasNext();
										if (v30 == 0) {
											Object v31 = v29.next();
											if (1 == 0) {
												long v32 = v31.longValue();
												boolean v33 = CompatConfig.isKnownChangeId(v32);
												if (v33 != 0) {
													long v34 = v31.longValue();
													Object v35 = CompatibilityOverrideConfig.overrides.get(v31);
													boolean v36 = CompatConfig.addOverrideUnsafe(v34, v25, v35);
													boolean v37 = v29.hasNext();
													if (v37 == 0) {
														boolean v38 = v23.hasNext();
														if (v38 == 0) {
															if (this.mOverridesFile == 0) {
																if (this.mBackupOverridesFile != 0) {
																	Overrides v40 = new Overrides();
																	List v42 = v40.getChangeOverrides();
																	Collection v43 = this.mChanges.values();
																	Iterator v44 = v43.iterator();
																	boolean v45 = v44.hasNext();
																	if (v45 == 0) {
																		Object v46 = v44.next();
																		ChangeOverrides v47 = v46.saveOverrides();
																		if (v47 == 0) {
																			boolean v48 = v42.add(v47);
																			boolean v49 = v44.hasNext();
																			if (v49 == 0) {
																				boolean v50 = this.mOverridesFile.exists();
																				if (v50 == 0) {
																					boolean v51 = this.mBackupOverridesFile.exists();
																					if (v51 == 0) {
																						boolean v52 = this.mOverridesFile.delete();
																						boolean v53 = this.mOverridesFile.createNewFile();
																						PrintWriter v54 = new PrintWriter(this.mOverridesFile);
																						XmlWriter v56 = new XmlWriter(v54);
																						XmlWriter.write(v56, v40);
																						v54.close();
																						boolean v60 = this.mBackupOverridesFile.delete();
																						ChangeIdStateCache.invalidate();
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void putAllOverridesOnReleaseBuilds(CompatibilityOverridesByPackageConfig p1){
	Collection v2 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		Set v6 = CompatibilityOverrideConfig.overrides.keySet();
		Iterator v8 = v6.iterator();
		boolean v9 = v8.hasNext();
		if (v9 == 0) {
			Object v10 = v8.next();
			long v11 = v10.longValue();
			boolean v12 = PlatformCompat.isKnownChangeId(v11);
			if (v12 == 0) {
				long v13 = v10.longValue();
				boolean v14 = this.mCompatConfig.isOverridable(v13);
				if (v14 == 0) {
					boolean v15 = v8.hasNext();
					if (v15 == 0) {
						boolean v16 = v3.hasNext();
						if (v16 == 0) {
							Set v18 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.keySet();
							Iterator v19 = v18.iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = v19.next();
								Object v22 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.get(v21);
								CompatConfig.addPackageOverridesWithoutSaving(v22, v21, 1);
								boolean v24 = v19.hasNext();
								if (v24 == 0) {
									CompatConfig.saveOverrides();
									CompatConfig.invalidateCache();
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void putAllOverridesOnReleaseBuilds(CompatibilityOverridesByPackageConfig p1){
	Collection v2 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		Set v6 = CompatibilityOverrideConfig.overrides.keySet();
		p0.checkAllCompatOverridesAreOverridable(v6);
		boolean v8 = v3.hasNext();
		if (v8 == 0) {
			this.mCompatConfig.addAllPackageOverrides(p1, 1);
			return;
		}
	}
}

and the following sink code:
['Collection v2 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.values();\nIterator v3 = v2.iterator();\nOverrides v40 = new Overrides();\nList v42 = v40.getChangeOverrides();\nthis.mOverridesFile.delete();\nthis.mOverridesFile.createNewFile();\nPrintWriter v54 = new PrintWriter(this.mOverridesFile);\nXmlWriter v56 = new XmlWriter(v54);\nXmlWriter.write(v56, v40);', 'CompatConfig.addPackageOverridesWithoutSaving(v22, v21, 1);\nCompatConfig.saveOverrides();\nCompatConfig.invalidateCache();', 'p0.checkAllCompatOverridesAreOverridable(v6);\nthis.mCompatConfig.addAllPackageOverrides(p1, 1);']

The method putAllOverridesOnReleaseBuilds has the following similar APIs:

- API Name: putOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverrideConfig;Ljava/lang/String;)V with Similarity Score: 0.8988552093505859
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatConfig.addPackageOverrides(p1, p2, 1);

- API Name: putOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverrideConfig;Ljava/lang/String;)V with Similarity Score: 0.8974123001098633
  - Access Control Level: SYS_OR_SIG and the following code:
Set v2 = CompatibilityOverrideConfig.overrides.keySet();
CompatConfig.addPackageOverridesWithoutSaving(p1, p2, 1);
CompatConfig.saveOverrides();
CompatConfig.invalidateCache();

