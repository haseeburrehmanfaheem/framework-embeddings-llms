The method removeAllOverridesOnReleaseBuilds in the following class Lcom.android.server.compat.PlatformCompat has the following code snippet:

This is path 1 for the API with depth 2:
public void removeAllOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveByPackageConfig p1){
	Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		Iterator v7 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
		boolean v8 = v7.hasNext();
		if (v8 == 0) {
			Object v9 = v7.next();
			long v10 = v9.longValue();
			boolean v12 = this.mCompatConfig.isKnownChangeId(v10);
			boolean v11 = v12;
			if (v11 == 0) {
				long v13 = v9.longValue();
				Long v15 = Long.valueOf(v13);
				Object v16 = this.mChanges.get(v15);
				if (v16 == 0) {
					boolean v17 = v16.getOverridable();
					if (v17 == 0) {
						boolean v14 = 1;
						if (v14 == 0) {
							boolean v18 = v7.hasNext();
							if (v18 == 0) {
								boolean v19 = v3.hasNext();
								if (v19 == 0) {
									Set v21 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.keySet();
									Iterator v22 = v21.iterator();
									boolean v23 = v22.hasNext();
									if (v23 == 0) {
										Object v24 = v22.next();
										Object v25 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.get(v24);
										Iterator v27 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
										boolean v28 = v27.hasNext();
										if (v28 == 0) {
											Object v29 = v27.next();
											long v30 = v29.longValue();
											boolean v31 = CompatConfig.isKnownChangeId(v30);
											if (v31 != 0) {
												long v32 = v29.longValue();
												boolean v33 = CompatConfig.removeOverrideUnsafe(v32, v24);
												boolean v34 = v27.hasNext();
												if (v34 == 0) {
													boolean v26 = 0;
													boolean v35 = v22.hasNext();
													if (v35 == 0) {
														if ((0 | v26) == 0) {
															if (this.mOverridesFile == 0) {
																if (this.mBackupOverridesFile != 0) {
																	Overrides v37 = new Overrides();
																	List v39 = v37.getChangeOverrides();
																	Collection v40 = this.mChanges.values();
																	Iterator v41 = v40.iterator();
																	boolean v42 = v41.hasNext();
																	if (v42 == 0) {
																		Object v43 = v41.next();
																		ChangeOverrides v44 = v43.saveOverrides();
																		if (v44 == 0) {
																			boolean v45 = v39.add(v44);
																			boolean v46 = v41.hasNext();
																			if (v46 == 0) {
																				boolean v47 = this.mOverridesFile.exists();
																				if (v47 == 0) {
																					boolean v48 = this.mBackupOverridesFile.exists();
																					if (v48 == 0) {
																						boolean v49 = this.mOverridesFile.delete();
																						boolean v50 = this.mOverridesFile.createNewFile();
																						PrintWriter v51 = new PrintWriter(this.mOverridesFile);
																						XmlWriter v53 = new XmlWriter(v51);
																						XmlWriter.write(v53, v37);
																						v51.close();
																						boolean v57 = this.mBackupOverridesFile.delete();
																						ChangeIdStateCache.invalidate();
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeAllOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveByPackageConfig p1){
	Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		Iterator v7 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
		boolean v8 = v7.hasNext();
		if (v8 == 0) {
			Object v9 = v7.next();
			long v10 = v9.longValue();
			boolean v11 = PlatformCompat.isKnownChangeId(v10);
			if (v11 == 0) {
				long v12 = v9.longValue();
				boolean v13 = this.mCompatConfig.isOverridable(v12);
				if (v13 == 0) {
					boolean v14 = v7.hasNext();
					if (v14 == 0) {
						boolean v15 = v3.hasNext();
						if (v15 == 0) {
							Set v17 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.keySet();
							Iterator v18 = v17.iterator();
							boolean v19 = v18.hasNext();
							if (v19 == 0) {
								Object v20 = v18.next();
								Object v21 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.get(v20);
								boolean v22 = CompatConfig.removePackageOverridesWithoutSaving(v21, v20);
								boolean v23 = v18.hasNext();
								if (v23 == 0) {
									if ((0 | v22) == 0) {
										CompatConfig.saveOverrides();
										CompatConfig.invalidateCache();
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeAllOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveByPackageConfig p1){
	Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		p0.checkAllCompatOverridesAreOverridable(CompatibilityOverridesToRemoveConfig.changeIds);
		boolean v7 = v3.hasNext();
		if (v7 == 0) {
			this.mCompatConfig.removeAllPackageOverrides(p1);
			return;
		}
	}
}

and the following sink code:
['Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();\nIterator v3 = v2.iterator();\nboolean v4 = v3.hasNext();\nObject v5 = v3.next();\nIterator v7 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();\nboolean v8 = v7.hasNext();\nObject v9 = v7.next();\nlong v10 = v9.longValue();\nboolean v11 = this.mCompatConfig.isKnownChangeId(v10);', 'Overrides v37 = new Overrides();\nList v39 = v37.getChangeOverrides();\nCollection v40 = this.mChanges.values();\nIterator v41 = v40.iterator();\nboolean v42 = v41.hasNext();\nObject v43 = v41.next();\nChangeOverrides v44 = v43.saveOverrides();', 'Set v21 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.keySet();\nIterator v22 = v21.iterator();\nboolean v23 = v22.hasNext();\nObject v24 = v22.next();\nObject v25 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.get(v24);']

The method removeAllOverridesOnReleaseBuilds has the following similar APIs:

- API Name: removeOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverridesToRemoveConfig;Ljava/lang/String;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.8823845982551575, Code:
Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
boolean v7 = PlatformCompat.isKnownChangeId(v6);
boolean v9 = this.mCompatConfig.isOverridable(v8);
boolean v12 = CompatConfig.removePackageOverridesWithoutSaving(p1, p2);
  - Similarity: 0.8190434575080872, Code:
p0.checkAllCompatOverridesAreOverridable(CompatibilityOverridesToRemoveConfig.changeIds);
this.mCompatConfig.removePackageOverrides(p1, p2);
  - Similarity: 0.7890968322753906, Code:
Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
boolean v8 = this.mCompatConfig.isKnownChangeId(v6);
Long v11 = Long.valueOf(v9);
Object v12 = this.mChanges.get(v11);
boolean v23 = CompatConfig.removeOverrideUnsafe(v22, p2);
Overrides v26 = new Overrides();
List v28 = v26.getChangeOverrides();
PrintWriter v40 = new PrintWriter(this.mOverridesFile);
XmlWriter v42 = new XmlWriter(v40);
XmlWriter.write(v42, v26);
  - Access Control Level: SYS_OR_SIG

- API Name: putOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverrideConfig;Ljava/lang/String;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.842771053314209, Code:
Overrides v29 = new Overrides();
List v31 = v29.getChangeOverrides();
Collection v32 = this.mChanges.values();
XmlWriter.write(v45, v29);
  - Similarity: 0.7329153418540955, Code:
Set v2 = CompatibilityOverrideConfig.overrides.keySet();
CompatConfig.addPackageOverridesWithoutSaving(p1, p2, 1);
CompatConfig.saveOverrides();
CompatConfig.invalidateCache();
  - Access Control Level: SYS_OR_SIG

- API Name: clearOverrideForTest(JLjava/lang/String;)Z in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.7704866528511047, Code:
Long v4 = CompatConfig.getVersionCodeOrNull(p2);
Object v6 = this.mChanges.get(v5);
Overrides v9 = new Overrides();
List v11 = v9.getChangeOverrides();
boolean v21 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
boolean v22 = this.mOverridesFile.createNewFile();
PrintWriter v23 = new PrintWriter(this.mOverridesFile);
XmlWriter v25 = new XmlWriter(v23);
XmlWriter.write(v25, v9);
  - Access Control Level: SYS_OR_SIG

- API Name: putAllOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverridesByPackageConfig;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.7311881184577942, Code:
Collection v2 = CompatibilityOverridesByPackageConfig.packageNameToOverrides.values();
Iterator v3 = v2.iterator();
Overrides v40 = new Overrides();
List v42 = v40.getChangeOverrides();
this.mOverridesFile.delete();
this.mOverridesFile.createNewFile();
PrintWriter v54 = new PrintWriter(this.mOverridesFile);
XmlWriter v56 = new XmlWriter(v54);
XmlWriter.write(v56, v40);
  - Access Control Level: SYS_OR_SIG

- API Name: enableTargetSdkChanges(Ljava/lang/String;I)I in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.7271549701690674, Code:
int v2 = CompatConfig.getAllowedChangesSinceTargetSdkForPackage(p1, p2);
PackageOverride$Builder v4 = new PackageOverride$Builder();
PackageOverride v7 = v6.build();
boolean v8 = CompatConfig.addOverrideUnsafe(v3[0], p1, v7);
  - Access Control Level: SYS_OR_SIG

