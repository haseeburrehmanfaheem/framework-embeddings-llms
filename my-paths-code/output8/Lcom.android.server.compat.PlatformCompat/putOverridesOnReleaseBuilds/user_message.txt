This is path 1 for the API with depth 2:
public void putOverridesOnReleaseBuilds(CompatibilityOverrideConfig p1, String p2){
	Set v2 = CompatibilityOverrideConfig.overrides.keySet();
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	if (v5 == 0) {
		Object v6 = v4.next();
		long v7 = v6.longValue();
		boolean v9 = this.mCompatConfig.isKnownChangeId(v7);
		boolean v8 = v9;
		if (v8 == 0) {
			long v10 = v6.longValue();
			Long v12 = Long.valueOf(v10);
			Object v13 = this.mChanges.get(v12);
			if (v13 == 0) {
				boolean v14 = v13.getOverridable();
				if (v14 == 0) {
					boolean v11 = 1;
					if (v11 == 0) {
						boolean v15 = v4.hasNext();
						if (v15 == 0) {
							Set v18 = CompatibilityOverrideConfig.overrides.keySet();
							Iterator v19 = v18.iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = v19.next();
								if (1 == 0) {
									long v22 = v21.longValue();
									boolean v23 = CompatConfig.isKnownChangeId(v22);
									if (v23 != 0) {
										long v24 = v21.longValue();
										Object v25 = CompatibilityOverrideConfig.overrides.get(v21);
										boolean v26 = CompatConfig.addOverrideUnsafe(v24, p2, v25);
										boolean v27 = v19.hasNext();
										if (v27 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v29 = new Overrides();
													List v31 = v29.getChangeOverrides();
													Collection v32 = this.mChanges.values();
													Iterator v33 = v32.iterator();
													boolean v34 = v33.hasNext();
													if (v34 == 0) {
														Object v35 = v33.next();
														ChangeOverrides v36 = v35.saveOverrides();
														if (v36 == 0) {
															boolean v37 = v31.add(v36);
															boolean v38 = v33.hasNext();
															if (v38 == 0) {
																boolean v39 = this.mOverridesFile.exists();
																if (v39 == 0) {
																	boolean v40 = this.mBackupOverridesFile.exists();
																	if (v40 == 0) {
																		boolean v41 = this.mOverridesFile.delete();
																		boolean v42 = this.mOverridesFile.createNewFile();
																		PrintWriter v43 = new PrintWriter(this.mOverridesFile);
																		XmlWriter v45 = new XmlWriter(v43);
																		XmlWriter.write(v45, v29);
																		v43.close();
																		boolean v49 = this.mBackupOverridesFile.delete();
																		ChangeIdStateCache.invalidate();
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void putOverridesOnReleaseBuilds(CompatibilityOverrideConfig p1, String p2){
	Set v2 = CompatibilityOverrideConfig.overrides.keySet();
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	if (v5 == 0) {
		Object v6 = v4.next();
		long v7 = v6.longValue();
		boolean v8 = PlatformCompat.isKnownChangeId(v7);
		if (v8 == 0) {
			long v9 = v6.longValue();
			boolean v10 = this.mCompatConfig.isOverridable(v9);
			if (v10 == 0) {
				boolean v11 = v4.hasNext();
				if (v11 == 0) {
					CompatConfig.addPackageOverridesWithoutSaving(p1, p2, 1);
					CompatConfig.saveOverrides();
					CompatConfig.invalidateCache();
					return;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void putOverridesOnReleaseBuilds(CompatibilityOverrideConfig p1, String p2){
	Set v2 = CompatibilityOverrideConfig.overrides.keySet();
	p0.checkAllCompatOverridesAreOverridable(v2);
	this.mCompatConfig.addPackageOverrides(p1, p2, 1);
	return;
}
