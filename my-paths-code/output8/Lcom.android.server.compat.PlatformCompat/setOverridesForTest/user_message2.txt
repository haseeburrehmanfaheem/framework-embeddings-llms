The method setOverridesForTest in the following class Lcom.android.server.compat.PlatformCompat has the following code snippet:

This is path 1 for the API with depth 2:
public void setOverridesForTest(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v5 = this.mChangeConfig.getEnabledSet();
	Set v4 = v5;
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		Object v8 = v6.next();
		long v9 = v8.longValue();
		Long v10 = Long.valueOf(v9);
		PackageOverride$Builder v11 = new PackageOverride$Builder();
		this.mEnabled = 1;
		PackageOverride$Builder v13 = PackageOverride$Builder;
		if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
			PackageOverride v15 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
			PackageOverride v14 = v15;
			Object v17 = v2.put(v10, v14);
			boolean v18 = v6.hasNext();
			if (v18 == 0) {
				Set v20 = this.mChangeConfig.getDisabledSet();
				Set v19 = v20;
				Iterator v21 = v19.iterator();
				boolean v22 = v21.hasNext();
				if (v22 == 0) {
					Object v23 = v21.next();
					long v24 = v23.longValue();
					Long v25 = Long.valueOf(v24);
					PackageOverride$Builder v26 = new PackageOverride$Builder();
					this.mEnabled = 0;
					PackageOverride$Builder v28 = PackageOverride$Builder;
					if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
						PackageOverride v30 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
						PackageOverride v29 = v30;
						Object v32 = v2.put(v25, v29);
						boolean v33 = v21.hasNext();
						if (v33 == 0) {
							CompatibilityOverrideConfig v34 = new CompatibilityOverrideConfig(v2);
							Set v38 = CompatibilityOverrideConfig.overrides.keySet();
							Iterator v39 = v38.iterator();
							boolean v40 = v39.hasNext();
							if (v40 == 0) {
								Object v41 = v39.next();
								if (0 == 0) {
									long v42 = v41.longValue();
									boolean v43 = CompatConfig.isKnownChangeId(v42);
									if (v43 != 0) {
										long v44 = v41.longValue();
										Object v45 = CompatibilityOverrideConfig.overrides.get(v41);
										boolean v46 = CompatConfig.addOverrideUnsafe(v44, p2, v45);
										boolean v47 = v39.hasNext();
										if (v47 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v49 = new Overrides();
													List v51 = v49.getChangeOverrides();
													Collection v52 = this.mChanges.values();
													Iterator v53 = v52.iterator();
													boolean v54 = v53.hasNext();
													if (v54 == 0) {
														Object v55 = v53.next();
														ChangeOverrides v56 = v55.saveOverrides();
														if (v56 == 0) {
															boolean v57 = v51.add(v56);
															boolean v58 = v53.hasNext();
															if (v58 == 0) {
																boolean v59 = this.mOverridesFile.exists();
																if (v59 == 0) {
																	boolean v60 = this.mBackupOverridesFile.exists();
																	if (v60 == 0) {
																		boolean v61 = this.mOverridesFile.delete();
																		boolean v62 = this.mOverridesFile.createNewFile();
																		PrintWriter v63 = new PrintWriter(this.mOverridesFile);
																		XmlWriter v65 = new XmlWriter(v63);
																		XmlWriter.write(v65, v49);
																		v63.close();
																		boolean v69 = this.mBackupOverridesFile.delete();
																		ChangeIdStateCache.invalidate();
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setOverridesForTest(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v5 = this.mChangeConfig.getEnabledSet();
	Set v4 = v5;
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		Object v8 = v6.next();
		long v9 = v8.longValue();
		Long v10 = Long.valueOf(v9);
		PackageOverride$Builder v11 = new PackageOverride$Builder();
		this.mEnabled = 1;
		PackageOverride$Builder v13 = PackageOverride$Builder;
		if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
			PackageOverride v15 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
			PackageOverride v14 = v15;
			Object v17 = v2.put(v10, v14);
			boolean v18 = v6.hasNext();
			if (v18 == 0) {
				Set v20 = this.mChangeConfig.getDisabledSet();
				Set v19 = v20;
				Iterator v21 = v19.iterator();
				boolean v22 = v21.hasNext();
				if (v22 == 0) {
					Object v23 = v21.next();
					long v24 = v23.longValue();
					Long v25 = Long.valueOf(v24);
					PackageOverride$Builder v26 = new PackageOverride$Builder();
					this.mEnabled = 0;
					PackageOverride$Builder v28 = PackageOverride$Builder;
					if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
						PackageOverride v30 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
						PackageOverride v29 = v30;
						Object v32 = v2.put(v25, v29);
						boolean v33 = v21.hasNext();
						if (v33 == 0) {
							CompatibilityOverrideConfig v34 = new CompatibilityOverrideConfig(v2);
							CompatConfig.addPackageOverridesWithoutSaving(v34, p2, 0);
							CompatConfig.saveOverrides();
							CompatConfig.invalidateCache();
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setOverridesForTest(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v4 = p1.enabledChanges();
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	if (v6 == 0) {
		Object v7 = v5.next();
		long v8 = v7.longValue();
		Long v9 = Long.valueOf(v8);
		PackageOverride$Builder v10 = new PackageOverride$Builder();
		PackageOverride$Builder v12 = v10.setEnabled(1);
		PackageOverride v13 = v12.build();
		Object v14 = v2.put(v9, v13);
		boolean v15 = v5.hasNext();
		if (v15 == 0) {
			Set v16 = p1.disabledChanges();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				Object v19 = v17.next();
				long v20 = v19.longValue();
				Long v21 = Long.valueOf(v20);
				PackageOverride$Builder v22 = new PackageOverride$Builder();
				PackageOverride$Builder v24 = v22.setEnabled(0);
				PackageOverride v25 = v24.build();
				Object v26 = v2.put(v21, v25);
				boolean v27 = v17.hasNext();
				if (v27 == 0) {
					CompatibilityOverrideConfig v28 = new CompatibilityOverrideConfig(v2);
					this.mCompatConfig.addPackageOverrides(v28, p2, 0);
					return;
				}
			}
		}
	}
}

and the following sink code:
['Set v5 = this.mChangeConfig.getEnabledSet();\nPackageOverride v15 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);\nObject v17 = v2.put(v10, v14);\nCompatConfig.addOverrideUnsafe(v44, p2, v45);', 'Set v20 = this.mChangeConfig.getDisabledSet();\nPackageOverride v30 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);\nObject v32 = v2.put(v25, v29);\nCompatConfig.addPackageOverridesWithoutSaving(v34, p2, 0);', 'Set v4 = p1.enabledChanges();\nPackageOverride v13 = v12.build();\nObject v14 = v2.put(v9, v13);\nthis.mCompatConfig.addPackageOverrides(v28, p2, 0);']

The method setOverridesForTest has the following similar APIs:

- API Name: setOverrides(Lcom/android/internal/compat/CompatibilityChangeConfig;Ljava/lang/String;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.9751737713813782, Code:
Set v20 = this.mChangeConfig.getDisabledSet();
PackageOverride v30 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
Object v32 = v2.put(v25, v29);
  - Similarity: 0.9303418397903442, Code:
HashMap v2 = new HashMap();
Set v5 = this.mChangeConfig.getEnabledSet();
PackageOverride v15 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
Object v17 = v2.put(v10, v14);
CompatibilityOverrideConfig v34 = new CompatibilityOverrideConfig(v2);
  - Access Control Level: SYS_OR_SIG

- API Name: enableTargetSdkChanges(Ljava/lang/String;I)I in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.8192338943481445, Code:
PackageOverride$Builder v17 = new PackageOverride$Builder();
this.mEnabled = 1;
PackageOverride v21 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
v26.enforce(v3[0], p1);
  - Access Control Level: SYS_OR_SIG

- API Name: disableTargetSdkChanges(Ljava/lang/String;I)I in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.7939087152481079, Code:
[J v3 = CompatConfig.getAllowedChangesSinceTargetSdkForPackage(p1, p2);
PackageOverride$Builder v4 = new PackageOverride$Builder();
PackageOverride$Builder v6 = v4.setEnabled(0);
PackageOverride v7 = v6.build();
boolean v8 = CompatConfig.addOverrideUnsafe(v3[0], p1, v7);
  - Access Control Level: SYS_OR_SIG

- API Name: putAllOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverridesByPackageConfig;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.7934486865997314, Code:
p0.checkAllCompatOverridesAreOverridable(v6);
this.mCompatConfig.addAllPackageOverrides(p1, 1);
  - Similarity: 0.786835253238678, Code:
CompatConfig.addPackageOverridesWithoutSaving(v22, v21, 1);
CompatConfig.saveOverrides();
CompatConfig.invalidateCache();
  - Access Control Level: SYS_OR_SIG

- API Name: isChangeEnabledByUid(JI)Z in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.7784883975982666, Code:
String v4 = v3.getPackagesForUid(p2);
ApplicationInfo v8 = PlatformCompat.getApplicationInfo(v4[0], v5);
boolean v9 = this.mCompatConfig.willChangeBeEnabled(p1, v4[0]);
  - Access Control Level: SYS_OR_SIG

