The method removeOverridesOnReleaseBuilds in the following class Lcom.android.server.compat.PlatformCompat has the following code snippet:

This is path 1 for the API with depth 2:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		long v6 = v5.longValue();
		boolean v8 = this.mCompatConfig.isKnownChangeId(v6);
		boolean v7 = v8;
		if (v7 == 0) {
			long v9 = v5.longValue();
			Long v11 = Long.valueOf(v9);
			Object v12 = this.mChanges.get(v11);
			if (v12 == 0) {
				boolean v13 = v12.getOverridable();
				if (v13 == 0) {
					boolean v10 = 1;
					if (v10 == 0) {
						boolean v14 = v3.hasNext();
						if (v14 == 0) {
							Iterator v17 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
							boolean v18 = v17.hasNext();
							if (v18 == 0) {
								Object v19 = v17.next();
								long v20 = v19.longValue();
								boolean v21 = CompatConfig.isKnownChangeId(v20);
								if (v21 != 0) {
									long v22 = v19.longValue();
									boolean v23 = CompatConfig.removeOverrideUnsafe(v22, p2);
									boolean v24 = v17.hasNext();
									if (v24 == 0) {
										boolean v16 = 0;
										if (v16 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v26 = new Overrides();
													List v28 = v26.getChangeOverrides();
													Collection v29 = this.mChanges.values();
													Iterator v30 = v29.iterator();
													boolean v31 = v30.hasNext();
													if (v31 == 0) {
														Object v32 = v30.next();
														ChangeOverrides v33 = v32.saveOverrides();
														if (v33 == 0) {
															boolean v34 = v28.add(v33);
															boolean v35 = v30.hasNext();
															if (v35 == 0) {
																boolean v36 = this.mOverridesFile.exists();
																if (v36 == 0) {
																	boolean v37 = this.mBackupOverridesFile.exists();
																	if (v37 == 0) {
																		boolean v38 = this.mOverridesFile.delete();
																		boolean v39 = this.mOverridesFile.createNewFile();
																		PrintWriter v40 = new PrintWriter(this.mOverridesFile);
																		XmlWriter v42 = new XmlWriter(v40);
																		XmlWriter.write(v42, v26);
																		v40.close();
																		boolean v46 = this.mBackupOverridesFile.delete();
																		ChangeIdStateCache.invalidate();
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		long v6 = v5.longValue();
		boolean v7 = PlatformCompat.isKnownChangeId(v6);
		if (v7 == 0) {
			long v8 = v5.longValue();
			boolean v9 = this.mCompatConfig.isOverridable(v8);
			if (v9 == 0) {
				boolean v10 = v3.hasNext();
				if (v10 == 0) {
					boolean v12 = CompatConfig.removePackageOverridesWithoutSaving(p1, p2);
					if (v12 == 0) {
						CompatConfig.saveOverrides();
						CompatConfig.invalidateCache();
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	p0.checkAllCompatOverridesAreOverridable(CompatibilityOverridesToRemoveConfig.changeIds);
	this.mCompatConfig.removePackageOverrides(p1, p2);
	return;
}

and the following sink code:
['Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();\nboolean v8 = this.mCompatConfig.isKnownChangeId(v6);\nLong v11 = Long.valueOf(v9);\nObject v12 = this.mChanges.get(v11);\nboolean v23 = CompatConfig.removeOverrideUnsafe(v22, p2);\nOverrides v26 = new Overrides();\nList v28 = v26.getChangeOverrides();\nPrintWriter v40 = new PrintWriter(this.mOverridesFile);\nXmlWriter v42 = new XmlWriter(v40);\nXmlWriter.write(v42, v26);', 'Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();\nboolean v7 = PlatformCompat.isKnownChangeId(v6);\nboolean v9 = this.mCompatConfig.isOverridable(v8);\nboolean v12 = CompatConfig.removePackageOverridesWithoutSaving(p1, p2);', 'p0.checkAllCompatOverridesAreOverridable(CompatibilityOverridesToRemoveConfig.changeIds);\nthis.mCompatConfig.removePackageOverrides(p1, p2);']

The method removeOverridesOnReleaseBuilds has the following similar APIs:

- API Name: clearOverridesForTest(Ljava/lang/String;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.8928223252296448, Code:
this.mCompatConfig.removePackageOverrides(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: removeAllOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverridesToRemoveByPackageConfig;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.8823845982551575, Code:
Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();
Iterator v3 = v2.iterator();
boolean v4 = v3.hasNext();
Object v5 = v3.next();
Iterator v7 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
boolean v8 = v7.hasNext();
Object v9 = v7.next();
long v10 = v9.longValue();
boolean v11 = this.mCompatConfig.isKnownChangeId(v10);
  - Access Control Level: SYS_OR_SIG

- API Name: putAllOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverridesByPackageConfig;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.8686510920524597, Code:
p0.checkAllCompatOverridesAreOverridable(v6);
this.mCompatConfig.addAllPackageOverrides(p1, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: putOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverrideConfig;Ljava/lang/String;)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.847918689250946, Code:
this.mCompatConfig.addPackageOverrides(p1, p2, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: clearOverrideForTest(JLjava/lang/String;)Z in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.8463221192359924, Code:
Long v4 = CompatConfig.getVersionCodeOrNull(p2);
Object v6 = this.mChanges.get(v5);
Overrides v9 = new Overrides();
List v11 = v9.getChangeOverrides();
boolean v21 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
boolean v22 = this.mOverridesFile.createNewFile();
PrintWriter v23 = new PrintWriter(this.mOverridesFile);
XmlWriter v25 = new XmlWriter(v23);
XmlWriter.write(v25, v9);
  - Access Control Level: SYS_OR_SIG

