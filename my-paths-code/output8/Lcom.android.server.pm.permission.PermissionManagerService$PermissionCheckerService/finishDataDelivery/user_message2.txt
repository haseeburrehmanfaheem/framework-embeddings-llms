The method finishDataDelivery in the following class Lcom.android.server.pm.permission.PermissionManagerService$PermissionCheckerService has the following code snippet:

This is path 1 for the API with depth 2:
public void finishDataDelivery(int p1, AttributionSourceState p2, boolean p3){
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = this.mContext.getSystemService(AppOpsManage.class);
	if (p1 != -1) {
		AttributionSource v4 = new AttributionSource(p2);
		if (p3 != 0) {
			if (getNext() == 0) {
				if (this.mNextCached != 0) {
					if (AttributionSourceState.next == 0) {
						if (AttributionSourceState.next.length <= 0) {
							AttributionSource v7 = new AttributionSource(AttributionSourceState.next[0]);
							this.mNextCached = v7;
							AttributionSource v6 = this.mNextCached;
							if (p3 == 0) {
								AttributionSourceState v9 = this.mAttributionSourceState;
								if (v9 == p2) {
									if (v6 == 0) {
										if (AttributionSourceState.token == 0) {
											Object v11 = this.mContext.getSystemService(PermissionManage.class);
											boolean v12 = v11.isRegisteredAttributionSource(AttributionSource);
											if (v12 == 0) {
												boolean v10 = 1;
												if (v10 != 0) {
													if (p3 == 0) {
														AttributionSourceState v13 = this.mAttributionSourceState;
														if (v13 != p2) {
															if (v6 == 0) {
																if (this.mNextCached != 0) {
																	if (AttributionSourceState.next == 0) {
																		if (AttributionSourceState.next.length <= 0) {
																			AttributionSource v15 = new AttributionSource(AttributionSourceState.next[0]);
																			this.mNextCached = v15;
																			AttributionSource v14 = this.mNextCached;
																			if (v14 != 0) {
																				if (1 != 0) {
																					if (v6 != 0) {
																						if (1 != 0) {
																							if (0 == 0) {
																								PackageManager v19 = this.mContext.getPackageManager();
																								int v20 = getNext().getUid();
																								String v21 = v19.getPackagesForUid(v20);
																								if (v21 == 0) {
																									int v22 = getNext().getUid();
																									String v23 = getNext().getPackageName();
																									String v24 = AppOpsManager.resolvePackageName(v22, v23);
																									String v17 = v24;
																									if (v17 != 0) {
																										IBinder v25 = AttributionSourceState.token;
																										int v26 = AttributionSourceState.uid;
																										String v27 = AttributionSourceState.attributionTag;
																										v3.finishOp(v25, p1, v26, v17, v27);
																										ConcurrentHashMap v29 = this.sRunningAttributionSources;
																										IBinder v30 = AttributionSourceState.token;
																										Object v31 = v29.remove(v30);
																										if (v31 == 0) {
																											if (v6 == 0) {
																												return;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void finishDataDelivery(int p1, AttributionSourceState p2, boolean p3){
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = this.mContext.getSystemService(AppOpsManage.class);
	if (p1 != -1) {
		AttributionSource v4 = new AttributionSource(p2);
		if (p3 != 0) {
			if (getNext() == 0) {
				AttributionSource v6 = getNext().getNext();
				if (p3 == 0) {
					AttributionSourceState v7 = getNext().asState();
					if (v7 == p2) {
						if (v6 == 0) {
							boolean v8 = getNext().isTrusted(this.mContext);
							if (v8 != 0) {
								if (p3 == 0) {
									AttributionSourceState v9 = getNext().asState();
									if (v9 != p2) {
										if (v6 == 0) {
											AttributionSource v10 = v6.getNext();
											if (v10 != 0) {
												if (1 != 0) {
													if (v6 != 0) {
														if (1 != 0) {
															if (0 == 0) {
																String v11 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, getNext());
																if (v11 != 0) {
																	IBinder v12 = getNext().getToken();
																	int v13 = getNext().getUid();
																	String v14 = getNext().getAttributionTag();
																	v3.finishOp(v12, p1, v13, v11, v14);
																	ConcurrentHashMap v16 = PermissionManagerService.-$$Nest$sfgetsRunningAttributionSources();
																	IBinder v17 = getNext().getToken();
																	Object v18 = v16.remove(v17);
																	if (v18 == 0) {
																		if (v6 == 0) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void finishDataDelivery(int p1, AttributionSourceState p2, boolean p3){
	PermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, p1, p2, p3);
	return;
}

and the following sink code:
['Object v3 = this.mContext.getSystemService(AppOpsManage.class);\nint v20 = getNext().getUid();\nString v21 = v19.getPackagesForUid(v20);\nv3.finishOp(v25, p1, v26, v17, v27);', 'Object v3 = this.mContext.getSystemService(AppOpsManage.class);\nString v11 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, getNext());\nv3.finishOp(v12, p1, v13, v11, v14);']

The method finishDataDelivery has the following similar APIs:

- API Name: checkPermission(Ljava/lang/String;Landroid/content/AttributionSourceState;Ljava/lang/String;ZZZI)I in the following Class: Lcom.android.server.pm.permission.PermissionManagerService$PermissionCheckerService with the following sink code entries:
  - Similarity: 0.8167380094528198, Code:
int v6 = AppOpsManager.permissionToOpCode(p1);
AttributionSourceState v7 = this.mAttributionSourceState;
Object v11 = this.mContext.getSystemService(AppOpsManage.class);
if (v6 != -1) { AttributionSource v12 = new AttributionSource(v7); }
String v19 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, getNext());
IBinder v20 = getNext().getToken();
int v21 = getNext().getUid();
String v22 = getNext().getAttributionTag();
v11.finishOp(v20, v6, v21, v19, v22);
  - Similarity: 0.7407551407814026, Code:
int v6 = AppOpsManager.permissionToOpCode(p1);
PermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, v6, v7, p6);
  - Access Control Level: SYS_OR_SIG

- API Name: setAutoRevokeExempted(Ljava/lang/String;ZI)Z in the following Class: Lcom.android.server.pm.permission.PermissionManagerService with the following sink code entries:
  - Similarity: 0.7710802555084229, Code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v3 = Binder.getCallingUid();
boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);
this.mAppOpsManager.setMode(97, v9, v13, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: hasProjectionPermission(ILjava/lang/String;)Z in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7464977502822876, Code:
AppOpsManager v3 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
int v4 = v3.noteOpNoThrow(46, p1, p2);
  - Similarity: 0.7366498112678528, Code:
AppOpsManager v3 = this.mAppOps;
int v4 = v3.noteOpNoThrow(46, p1, p2);
  - Access Control Level: NONE

- API Name: getAllocatableBytes(Ljava/lang/String;ILjava/lang/String;)J in the following Class: Lcom.android.server.StorageManagerService with the following sink code entries:
  - Similarity: 0.7367329597473145, Code:
int v1 = Binder.getCallingUid();
Object v4 = this.mContext.getSystemService(AppOpsManage.class);
long v5 = Binder.clearCallingIdentity();
boolean v6 = v4.isOperationActive(26, v1, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: checkPhoneNumberAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)I in the following Class: Lcom.android.server.pm.permission.LegacyPermissionManagerService with the following sink code entries:
  - Similarity: 0.7104417085647583, Code:
PackageManager v4 = this.mContext.getPackageManager();
UserHandle v5 = UserHandle.getUserHandleForUid(p5);
ApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);
  - Access Control Level: DANGEROUS

