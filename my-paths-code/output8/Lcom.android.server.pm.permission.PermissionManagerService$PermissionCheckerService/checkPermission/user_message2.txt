The method checkPermission in the following class Lcom.android.server.pm.permission.PermissionManagerService$PermissionCheckerService has the following code snippet:

This is path 1 for the API with depth 2:
public int checkPermission(String p1, AttributionSourceState p2, String p3, boolean p4, boolean p5, boolean p6, int p7){
	if (p5 == 0) {
		if (v5 == 0) {
			if (v5 == 1) {
				if (p7 != -1) {
					int v6 = AppOpsManager.permissionToOpCode(p1);
					AttributionSourceState v7 = this.mAttributionSourceState;
					Object v10 = Objects.requireNonNull(v7);
					Object v11 = this.mContext.getSystemService(AppOpsManage.class);
					if (v6 != -1) {
						AttributionSource v12 = new AttributionSource(v7);
						if (p6 != 0) {
							if (getNext() == 0) {
								AttributionSource v14 = getNext().getNext();
								if (p6 == 0) {
									AttributionSourceState v15 = getNext().asState();
									if (v15 == v7) {
										if (v14 == 0) {
											boolean v16 = getNext().isTrusted(this.mContext);
											if (v16 != 0) {
												if (p6 == 0) {
													AttributionSourceState v17 = getNext().asState();
													if (v17 != v7) {
														if (v14 == 0) {
															AttributionSource v18 = v14.getNext();
															if (v18 != 0) {
																if (1 != 0) {
																	if (v14 != 0) {
																		if (1 != 0) {
																			if (0 == 0) {
																				String v19 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, getNext());
																				if (v19 != 0) {
																					IBinder v20 = getNext().getToken();
																					int v21 = getNext().getUid();
																					String v22 = getNext().getAttributionTag();
																					v11.finishOp(v20, v6, v21, v19, v22);
																					ConcurrentHashMap v24 = PermissionManagerService.-$$Nest$sfgetsRunningAttributionSources();
																					IBinder v25 = getNext().getToken();
																					Object v26 = v24.remove(v25);
																					if (v26 == 0) {
																						if (v14 == 0) {
																							return v5;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int checkPermission(String p1, AttributionSourceState p2, String p3, boolean p4, boolean p5, boolean p6, int p7){
	if (p5 == 0) {
		if (v5 == 0) {
			if (v5 == 1) {
				if (p7 != -1) {
					int v6 = AppOpsManager.permissionToOpCode(p1);
					AttributionSourceState v7 = this.mAttributionSourceState;
					PermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, v6, v7, p6);
					return v5;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int checkPermission(String p1, AttributionSourceState p2, String p3, boolean p4, boolean p5, boolean p6, int p7){
	if (p5 == 0) {
		if (v5 == 0) {
			if (v5 == 1) {
				if (p7 != -1) {
					int v6 = AppOpsManager.permissionToOpCode(p1);
					AttributionSourceState v7 = v3.asState();
					p0.finishDataDelivery(v6, v7, p6);
					return v5;
				}
			}
		}
	}
}

and the following sink code:
['int v6 = AppOpsManager.permissionToOpCode(p1);\nAttributionSourceState v7 = this.mAttributionSourceState;\nObject v11 = this.mContext.getSystemService(AppOpsManage.class);\nif (v6 != -1) { AttributionSource v12 = new AttributionSource(v7); }\nString v19 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, getNext());\nIBinder v20 = getNext().getToken();\nint v21 = getNext().getUid();\nString v22 = getNext().getAttributionTag();\nv11.finishOp(v20, v6, v21, v19, v22);', 'int v6 = AppOpsManager.permissionToOpCode(p1);\nPermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, v6, v7, p6);', 'int v6 = AppOpsManager.permissionToOpCode(p1);\np0.finishDataDelivery(v6, v7, p6);']

The method checkPermission has the following similar APIs:

- API Name: checkOp(ILandroid/content/AttributionSourceState;Ljava/lang/String;ZZ)I in the following Class: Lcom.android.server.pm.permission.PermissionManagerService$PermissionCheckerService with the following sink code entries:
  - Similarity: 0.8422514200210571, Code:
PermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, p1, p2, 0);
  - Similarity: 0.7508416771888733, Code:
AttributionSource v8 = new AttributionSource(p2);
v7.finishOp(v16, p1, v17, v15, v18);
ConcurrentHashMap v20 = PermissionManagerService.-$$Nest$sfgetsRunningAttributionSources();
IBinder v21 = getNext().getToken(); Object v22 = v20.remove(v21);
  - Access Control Level: SYS_OR_SIG

- API Name: finishDataDelivery(ILandroid/content/AttributionSourceState;Z)V in the following Class: Lcom.android.server.pm.permission.PermissionManagerService$PermissionCheckerService with the following sink code entries:
  - Similarity: 0.8167380094528198, Code:
Object v3 = this.mContext.getSystemService(AppOpsManage.class);
String v11 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, getNext());
v3.finishOp(v12, p1, v13, v11, v14);
  - Similarity: 0.8072899580001831, Code:
Object v3 = this.mContext.getSystemService(AppOpsManage.class);
int v20 = getNext().getUid();
String v21 = v19.getPackagesForUid(v20);
v3.finishOp(v25, p1, v26, v17, v27);
  - Access Control Level: SYS_OR_SIG

- API Name: setAutoRevokeExempted(Ljava/lang/String;ZI)Z in the following Class: Lcom.android.server.pm.permission.PermissionManagerService with the following sink code entries:
  - Similarity: 0.7312993407249451, Code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v3 = Binder.getCallingUid();
boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);
this.mAppOpsManager.setMode(97, v9, v13, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: sendSigningResult(Landroid/os/IBinder;Ljava/lang/String;[BI)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7010169625282288, Code:
int v5 = ActivityManager.handleIncomingUser(v2, v1, p4, 0, 0, "sendSigningResult", 0);
TvInteractiveAppManagerService$SessionState v11 = TvInteractiveAppManagerService.getSessionStateLocked(p1, v1, v10);
ITvInteractiveAppSession v14 = TvInteractiveAppManagerService$SessionState.-$$Nest$fgetmSession(v8);
v12.sendSigningResult(p2, p3);
  - Access Control Level: SYS_OR_SIG

