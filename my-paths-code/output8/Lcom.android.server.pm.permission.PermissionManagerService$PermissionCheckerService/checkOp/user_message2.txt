The method checkOp has the following code snippet:

This is path 1 for the API with depth 2:
public int checkOp(int p1, AttributionSourceState p2, String p3, boolean p4, boolean p5){
	if (v3 == 0) {
		if (p5 == 0) {
			Object v6 = Objects.requireNonNull(p2);
			Object v7 = this.mContext.getSystemService(AppOpsManage.class);
			if (p1 != -1) {
				AttributionSource v8 = new AttributionSource(p2);
				if (0 != 0) {
					if (getNext() == 0) {
						AttributionSource v10 = getNext().getNext();
						if (0 == 0) {
							AttributionSourceState v11 = getNext().asState();
							if (v11 == p2) {
								if (v10 == 0) {
									boolean v12 = getNext().isTrusted(this.mContext);
									if (v12 != 0) {
										if (0 == 0) {
											AttributionSourceState v13 = getNext().asState();
											if (v13 != p2) {
												if (v10 == 0) {
													AttributionSource v14 = v10.getNext();
													if (v14 != 0) {
														if (1 != 0) {
															if (v10 != 0) {
																if (1 != 0) {
																	if (0 == 0) {
																		String v15 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, getNext());
																		if (v15 != 0) {
																			IBinder v16 = getNext().getToken();
																			int v17 = getNext().getUid();
																			String v18 = getNext().getAttributionTag();
																			v7.finishOp(v16, p1, v17, v15, v18);
																			ConcurrentHashMap v20 = PermissionManagerService.-$$Nest$sfgetsRunningAttributionSources();
																			IBinder v21 = getNext().getToken();
																			Object v22 = v20.remove(v21);
																			if (v22 == 0) {
																				if (v10 == 0) {
																					return v3;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int checkOp(int p1, AttributionSourceState p2, String p3, boolean p4, boolean p5){
	if (v3 == 0) {
		if (p5 == 0) {
			PermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, p1, p2, 0);
			return v3;
		}
	}
}


This is path 3 for the API with depth 0:
public int checkOp(int p1, AttributionSourceState p2, String p3, boolean p4, boolean p5){
	if (v3 == 0) {
		if (p5 == 0) {
			p0.finishDataDelivery(p1, p2, 0);
			return v3;
		}
	}
}

and the following sink code:
['AttributionSource v8 = new AttributionSource(p2);\nv7.finishOp(v16, p1, v17, v15, v18);\nConcurrentHashMap v20 = PermissionManagerService.-$$Nest$sfgetsRunningAttributionSources();\nIBinder v21 = getNext().getToken(); Object v22 = v20.remove(v21);', 'PermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, p1, p2, 0);', 'p0.finishDataDelivery(p1, p2, 0);']

The method checkOp has the following similar APIs:

- API Name: checkPermission(Ljava/lang/String;Landroid/content/AttributionSourceState;Ljava/lang/String;ZZZI)I with Similarity Score: 0.8422515392303467
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = AppOpsManager.permissionToOpCode(p1);
PermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, v6, v7, p6);

- API Name: isRegisteredAttributionSource(Landroid/content/AttributionSourceState;)Z with Similarity Score: 0.8415561318397522
  - Access Control Level: NONE and the following code:
AttributionSource v1 = new AttributionSource(p1);
IBinder v4 = AttributionSourceState.token;
Object v5 = this.mAttributions.get(v4);
if (v5 == 0) {
... complex conditional logic ...
return v3;

