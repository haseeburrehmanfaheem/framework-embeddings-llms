This is path 1 for the API with depth 2:
public void unregisterRouter2(IMediaRouter2 p1){
	Object v2 = Objects.requireNonNull(p1, "router must not be null");
	long v3 = Binder.clearCallingIdentity();
	IBinder v5 = p1.asBinder();
	Object v6 = this.mAllRouterRecords.remove(v5);
	if (v6 != 0) {
		boolean v7 = MediaRouter2ServiceImpl$UserRecord.mRouterRecords.remove(v6);
		MediaRouter2ServiceImpl$$ExternalSyntheticLambda15 v8 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda15();
		Message v10 = PooledLambda.obtainMessage(v8, MediaRouter2ServiceImpl$UserRecord.mHandler, MediaRouter2ServiceImpl$RouterRecord.mPackageName, 0);
		boolean v11 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v10);
		MediaRouter2ServiceImpl$$ExternalSyntheticLambda16 v12 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda16();
		Message v14 = PooledLambda.obtainMessage(v12, MediaRouter2ServiceImpl$UserRecord.mHandler);
		boolean v15 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v14);
		v6.dispose();
		MediaRouter2ServiceImpl.disposeUserIfNeededLocked(MediaRouter2ServiceImpl$RouterRecord.mUserRecord);
		Binder.restoreCallingIdentity(v3);
		return;
	}
}


This is path 2 for the API with depth 1:
public void unregisterRouter2(IMediaRouter2 p1){
	Object v2 = Objects.requireNonNull(p1, "router must not be null");
	long v3 = Binder.clearCallingIdentity();
	MediaRouter2ServiceImpl.unregisterRouter2Locked(p1, 0);
	Binder.restoreCallingIdentity(v3);
	return;
}


This is path 3 for the API with depth 0:
public void unregisterRouter2(IMediaRouter2 p1){
	this.mService2.unregisterRouter2(p1);
	return;
}
