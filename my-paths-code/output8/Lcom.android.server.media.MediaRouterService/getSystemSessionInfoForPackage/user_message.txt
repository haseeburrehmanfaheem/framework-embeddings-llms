This is path 1 for the API with depth 2:
public RoutingSessionInfo getSystemSessionInfoForPackage(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	UserHandle v2 = UserHandle.getUserHandleForUid(v1);
	int v3 = v2.getIdentifier();
	Object v4 = this.mUserRecords.get(v3);
	if (v4 == 0) {
		Iterator v5 = MediaRouterService$UserRecord.mClientRecords.iterator();
		boolean v6 = v5.hasNext();
		if (v6 == 0) {
			Object v7 = v5.next();
			boolean v8 = TextUtils.equals(MediaRouterService$ClientRecord.mPackageName, p2);
			if (v8 == 0) {
				boolean v9 = this.mDefaultAudioRouteId.equals(MediaRouterService$ClientRecord.mSelectedRouteId);
				if (v9 == 0) {
					boolean v10 = v5.hasNext();
					if (v10 == 0) {
						Object v11 = v5.next();
						boolean v12 = TextUtils.equals(MediaRouterService$ClientRecord.mPackageName, p2);
						if (v12 == 0) {
							boolean v13 = this.mDefaultAudioRouteId.equals(MediaRouterService$ClientRecord.mSelectedRouteId);
							if (v13 == 0) {
								if (v18 != 0) {
									long v19 = Binder.clearCallingIdentity();
									MediaRouter2ServiceImpl$$ExternalSyntheticLambda3 v26 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda3();
									Message v28 = PooledLambda.obtainMessage(v26, MediaRouter2ServiceImpl$UserRecord.mHandler);
									boolean v29 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v28);
									MediaRouter2ServiceImpl$UserRecord v20 = v21;
									if (1 == 0) {
										if (1 == 0) {
											SystemMediaRoute2Provider v30 = this.mSystemProvider;
											boolean v32 = MediaRoute2Provider.mSessionInfos.isEmpty();
											if (v32 == 0) {
												RoutingSessionInfo$Builder v33 = new RoutingSessionInfo$Builder("SYSTEM_SESSION",p2);
												RoutingSessionInfo$Builder v35 = v33.setSystemSession(1);
												String v36 = this.mDeviceRoute.getId();
												RoutingSessionInfo$Builder v37 = v35.addSelectedRoute(v36);
												if (this.mBtRouteProvider == 0) {
													List v38 = this.mBtRouteProvider.getAllBluetoothRoutes();
													Iterator v39 = v38.iterator();
													boolean v40 = v39.hasNext();
													if (v40 == 0) {
														Object v41 = v39.next();
														String v42 = v41.getId();
														RoutingSessionInfo$Builder v43 = v35.addTransferableRoute(v42);
														boolean v44 = v39.hasNext();
														if (v44 == 0) {
															RoutingSessionInfo$Builder v45 = v35.setProviderId(MediaRoute2Provider.mUniqueId);
															RoutingSessionInfo v46 = v45.build();
															RoutingSessionInfo v31 = v46;
															Binder.restoreCallingIdentity(v19);
															RoutingSessionInfo v14 = v31;
															return v14;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public RoutingSessionInfo getSystemSessionInfoForPackage(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	UserHandle v2 = UserHandle.getUserHandleForUid(v1);
	int v3 = v2.getIdentifier();
	Object v4 = this.mUserRecords.get(v3);
	if (v4 == 0) {
		Iterator v5 = MediaRouterService$UserRecord.mClientRecords.iterator();
		boolean v6 = v5.hasNext();
		if (v6 == 0) {
			Object v7 = v5.next();
			boolean v8 = TextUtils.equals(MediaRouterService$ClientRecord.mPackageName, p2);
			if (v8 == 0) {
				boolean v9 = this.mDefaultAudioRouteId.equals(MediaRouterService$ClientRecord.mSelectedRouteId);
				if (v9 == 0) {
					boolean v10 = v5.hasNext();
					if (v10 == 0) {
						Object v11 = v5.next();
						boolean v12 = TextUtils.equals(MediaRouterService$ClientRecord.mPackageName, p2);
						if (v12 == 0) {
							boolean v13 = this.mDefaultAudioRouteId.equals(MediaRouterService$ClientRecord.mSelectedRouteId);
							if (v13 == 0) {
								if (v18 != 0) {
									long v19 = Binder.clearCallingIdentity();
									MediaRouter2ServiceImpl$UserRecord v20 = MediaRouter2ServiceImpl.getOrCreateUserRecordLocked(v17);
									if (1 == 0) {
										if (1 == 0) {
											SystemMediaRoute2Provider v21 = MediaRouter2ServiceImpl$UserHandler.-$$Nest$fgetmSystemProvider(MediaRouter2ServiceImpl$UserRecord.mHandler);
											List v22 = v21.getSessionInfos();
											if (v22 == 0) {
												boolean v23 = v22.isEmpty();
												if (v23 != 0) {
													RoutingSessionInfo$Builder v24 = new RoutingSessionInfo$Builder(v25);
													Object v25 = v22.get(0);
													RoutingSessionInfo$Builder v27 = v24.setClientPackageName(p2);
													RoutingSessionInfo v28 = v27.build();
													Binder.restoreCallingIdentity(v19);
													RoutingSessionInfo v14 = generateDeviceRouteSelectedSessionInfo();
													return v14;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public RoutingSessionInfo getSystemSessionInfoForPackage(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	UserHandle v2 = UserHandle.getUserHandleForUid(v1);
	int v3 = v2.getIdentifier();
	Object v4 = this.mUserRecords.get(v3);
	if (v4 == 0) {
		Iterator v5 = MediaRouterService$UserRecord.mClientRecords.iterator();
		boolean v6 = v5.hasNext();
		if (v6 == 0) {
			Object v7 = v5.next();
			boolean v8 = TextUtils.equals(MediaRouterService$ClientRecord.mPackageName, p2);
			if (v8 == 0) {
				boolean v9 = this.mDefaultAudioRouteId.equals(MediaRouterService$ClientRecord.mSelectedRouteId);
				if (v9 == 0) {
					boolean v10 = v5.hasNext();
					if (v10 == 0) {
						Object v11 = v5.next();
						boolean v12 = TextUtils.equals(MediaRouterService$ClientRecord.mPackageName, p2);
						if (v12 == 0) {
							boolean v13 = this.mDefaultAudioRouteId.equals(MediaRouterService$ClientRecord.mSelectedRouteId);
							if (v13 == 0) {
								RoutingSessionInfo v14 = this.mService2.getSystemSessionInfo(p2, 1);
								return v14;
							}
						}
					}
				}
			}
		}
	}
}
