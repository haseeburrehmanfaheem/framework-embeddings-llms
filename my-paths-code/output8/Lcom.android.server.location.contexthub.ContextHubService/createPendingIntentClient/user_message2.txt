The method createPendingIntentClient in the following class Lcom.android.server.location.contexthub.ContextHubService has the following code snippet:

This is path 1 for the API with depth 2:
public IContextHubClient createPendingIntentClient(int p1, PendingIntent p2, long p3, String p4){
	Integer v3 = Integer.valueOf(p1);
	boolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);
	boolean v2 = v4;
	if (v2 == 0) {
		Integer v5 = Integer.valueOf(p1);
		Object v6 = this.mContextHubIdToInfoMap.get(v5);
		int v8 = this.mId;
		Collection v10 = this.mHostEndPointIdToClientMap.values();
		Iterator v11 = v10.iterator();
		boolean v12 = v11.hasNext();
		if (v12 == 0) {
			Object v13 = v11.next();
			boolean v14 = v13.hasPendingIntent(p2, p3);
			if (v14 == 0) {
				int v15 = v13.getAttachedContextHubId();
				if (v15 != v8) {
					boolean v16 = v11.hasNext();
					if (v16 == 0) {
						Object v17 = v11.next();
						boolean v18 = v17.hasPendingIntent(p2, p3);
						if (v18 == 0) {
							int v19 = v17.getAttachedContextHubId();
							if (v19 != v8) {
								ContextHubClientBroker v9 = v17;
								if (v9 != 0) {
									int v21 = this.mHostEndPointIdToClientMap.size();
									if (v21 == 32768) {
										if (0 > 32767) {
											Short v22 = Short.valueOf(this.mNextHostEndPointId);
											boolean v23 = this.mHostEndPointIdToClientMap.containsKey(v22);
											if (v23 != 0) {
												if (this.mNextHostEndPointId != 32767) {
													if ((0 + 1) > 32767) {
														Short v24 = Short.valueOf(0);
														boolean v25 = this.mHostEndPointIdToClientMap.containsKey(v24);
														if (v25 != 0) {
															if (0 != 32767) {
																this.mNextHostEndPointId = 0;
																short v20 = 0;
																ContextHubClientBroker v26 = new ContextHubClientBroker(this.mContext,this.mContextHubProxy,ContextHubClientManager,v6,v20,p2,p3,p4,this.mTransactionManager);
																Short v28 = Short.valueOf(v20);
																Object v29 = this.mHostEndPointIdToClientMap.put(v28, v26);
																ContextHubClientManager$RegistrationRecord v30 = new ContextHubClientManager$RegistrationRecord(ContextHubClientManager,v31,0);
																StringBuilder v32 = new StringBuilder();
																StringBuilder v34 = v32.append("[ContextHubClient ");
																StringBuilder v35 = v32.append("endpointID: ");
																short v36 = ContextHubClientBroker.getHostEndPointId();
																StringBuilder v37 = v32.append(v36);
																StringBuilder v38 = v32.append(", ");
																String v39 = v32.toString();
																StringBuilder v40 = new StringBuilder();
																StringBuilder v42 = v40.append(v39);
																StringBuilder v43 = v40.append("contextHub: ");
																int v44 = ContextHubClientBroker.getAttachedContextHubId();
																StringBuilder v45 = v40.append(v44);
																StringBuilder v46 = v40.append(", ");
																String v47 = v40.toString();
																if (this.mAttributionTag == 0) {
																	StringBuilder v48 = new StringBuilder();
																	StringBuilder v50 = v48.append(v47);
																	StringBuilder v51 = v48.append("attributionTag: ");
																	String v52 = ContextHubClientBroker.getAttributionTag();
																	StringBuilder v53 = v48.append(v52);
																	StringBuilder v54 = v48.append(", ");
																	String v55 = v48.toString();
																	boolean v56 = this.mPendingIntentRequest.isValid();
																	if (v56 == 0) {
																		StringBuilder v57 = new StringBuilder();
																		StringBuilder v59 = v57.append(v47);
																		StringBuilder v60 = v57.append("package: ");
																		StringBuilder v61 = v57.append(this.mPackage);
																		String v62 = v57.toString();
																		int v63 = this.mMessageChannelNanoappIdMap.size();
																		if (v63 <= 0) {
																			StringBuilder v64 = new StringBuilder();
																			StringBuilder v66 = v64.append(toString());
																			StringBuilder v67 = v64.append("]");
																			String v68 = v64.toString();
																			String v31 = v68;
																			boolean v70 = this.mRegistrationRecordDeque.add(v30);
																			short v75 = this.mHostEndPointId;
																			if (v26 != 0) {
																				IInterface v80 = v26.queryLocalInterface("android.hardware.location.IContextHubClient");
																				if (v80 == 0) {
																					if (v80 instanceof IContextHubClient == 0) {
																						IContextHubClient$Stub$Proxy v81 = new IContextHubClient$Stub$Proxy(v26);
																						IContextHubClient v79 = v81;
																						IContextHubClient v7 = v79;
																						return v7;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public IContextHubClient createPendingIntentClient(int p1, PendingIntent p2, long p3, String p4){
	Integer v3 = Integer.valueOf(p1);
	boolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);
	boolean v2 = v4;
	if (v2 == 0) {
		Integer v5 = Integer.valueOf(p1);
		Object v6 = this.mContextHubIdToInfoMap.get(v5);
		int v8 = v6.getId();
		ContextHubClientBroker v9 = ContextHubClientManager.getClientBroker(v8, p2, p3);
		if (v9 != 0) {
			short v10 = ContextHubClientManager.getHostEndPointId();
			ContextHubClientBroker v11 = new ContextHubClientBroker(this.mContext,this.mContextHubProxy,ContextHubClientManager,v6,v10,p2,p3,p4,this.mTransactionManager);
			Short v13 = Short.valueOf(v10);
			Object v14 = this.mHostEndPointIdToClientMap.put(v13, v11);
			ContextHubClientManager$RegistrationRecord v15 = new ContextHubClientManager$RegistrationRecord(ContextHubClientManager,v16,0);
			String v16 = v11.toString();
			boolean v18 = this.mRegistrationRecordDeque.add(v15);
			short v23 = v11.getHostEndPointId();
			IContextHubClient v27 = IContextHubClient$Stub.asInterface(v11);
			IContextHubClient v7 = v27;
			return v7;
		}
	}
}


This is path 3 for the API with depth 0:
public IContextHubClient createPendingIntentClient(int p1, PendingIntent p2, long p3, String p4){
	boolean v2 = p0.isValidContextHubId(p1);
	if (v2 == 0) {
		Integer v3 = Integer.valueOf(p1);
		Object v4 = this.mContextHubIdToInfoMap.get(v3);
		IContextHubClient v5 = this.mClientManager.registerClient(v4, p2, p3, p4, this.mTransactionManager);
		return v5;
	}
}

and the following sink code:
['Integer v3 = Integer.valueOf(p1);\nboolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);\nContextHubClientBroker v26 = new ContextHubClientBroker(this.mContext,this.mContextHubProxy,ContextHubClientManager,v6,v20,p2,p3,p4,this.mTransactionManager);\nIInterface v80 = v26.queryLocalInterface("android.hardware.location.IContextHubClient");\nIContextHubClient$Stub$Proxy v81 = new IContextHubClient$Stub$Proxy(v26);\nIContextHubClient v7 = v79;\nreturn v7;', 'Integer v5 = Integer.valueOf(p1);\nObject v6 = this.mContextHubIdToInfoMap.get(v5);\nint v8 = v6.getId();\nContextHubClientBroker v9 = ContextHubClientManager.getClientBroker(v8, p2, p3);\nshort v10 = ContextHubClientManager.getHostEndPointId();\nContextHubClientBroker v11 = new ContextHubClientBroker(this.mContext,this.mContextHubProxy,ContextHubClientManager,v6,v10,p2,p3,p4,this.mTransactionManager);\nIContextHubClient v27 = IContextHubClient$Stub.asInterface(v11);\nreturn v7;', 'boolean v2 = p0.isValidContextHubId(p1);\nInteger v3 = Integer.valueOf(p1);\nObject v4 = this.mContextHubIdToInfoMap.get(v3);\nIContextHubClient v5 = this.mClientManager.registerClient(v4, p2, p3, p4, this.mTransactionManager);\nreturn v5;']

The method createPendingIntentClient has the following similar APIs:

- API Name: createClient(ILandroid/hardware/location/IContextHubClientCallback;Ljava/lang/String;Ljava/lang/String;)Landroid/hardware/location/IContextHubClient; in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.979229748249054, Code:
Integer v5 = Integer.valueOf(p1);
Object v6 = this.mContextHubIdToInfoMap.get(v5);
short v8 = ContextHubClientManager.getHostEndPointId();
ContextHubClientBroker v9 = new ContextHubClientBroker(this.mContext,this.mContextHubProxy,ContextHubClientManager,v6,v8,p2,p3,this.mTransactionManager,p4);
IContextHubClient v25 = IContextHubClient$Stub.asInterface(v9);
return v25;
  - Similarity: 0.9566811323165894, Code:
Integer v3 = Integer.valueOf(p1);
Object v4 = this.mContextHubIdToInfoMap.get(v3);
IContextHubClient v5 = this.mClientManager.registerClient(v4, p2, p3, this.mTransactionManager, p4);
return v5;
  - Similarity: 0.9521057605743408, Code:
Integer v3 = Integer.valueOf(p1);
boolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);
Object v6 = this.mContextHubIdToInfoMap.get(v5);
ContextHubClientBroker v14 = new ContextHubClientBroker(this.mContext,this.mContextHubProxy,ContextHubClientManager,v6,v8,p2,p3,this.mTransactionManager,p4);
IContextHubClient v7 = IContextHubClient$Stub.asInterface(v9);
return v7;
  - Access Control Level: SYS_OR_SIG

- API Name: sendMessage(IILandroid/hardware/location/ContextHubMessage;)I in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.8356910943984985, Code:
Integer v5 = Integer.valueOf(p1);
boolean v6 = this.mContextHubIdToInfoMap.containsKey(v5);
ContextHubService$9 v10 = new ContextHubService$9(ContextHubService, p1);
PackageManager v13 = this.mContext.getPackageManager();
int v14 = Binder.getCallingUid();
String v15 = v13.getNameForUid(v14);
ContextHubTransactionManager$5 v17 = new ContextHubTransactionManager$5(ContextHubTransactionManager, v18, 4, v12, p1, v9);
  - Access Control Level: SYS_OR_SIG

- API Name: loadNanoAppOnHub(ILandroid/hardware/location/IContextHubTransactionCallback;Landroid/hardware/location/NanoAppBinary;)V in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.8183528780937195, Code:
Integer v4 = Integer.valueOf(p1);
boolean v5 = this.mContextHubIdToInfoMap.containsKey(v4);
ContextHubTransactionManager$1 v8 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v9,0,v10,v6,p1,p3,p2);
  - Similarity: 0.7326756715774536, Code:
boolean v2 = p0.checkHalProxyAndContextHubId(p1, p2, 0);
String v3 = p0.getCallingPackageName();
ContextHubServiceTransaction v4 = this.mTransactionManager.createLoadTransaction(p1, p3, p2, v3);
this.mTransactionManager.addTransaction(v4);
  - Access Control Level: SYS_OR_SIG

- API Name: unloadNanoApp(I)I in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.7854775190353394, Code:
Integer v3 = Integer.valueOf(p1);
Object v4 = this.mNanoAppHash.get(v3);
ContextHubService$8 v8 = new ContextHubService$8(ContextHubService,v5);
ContextHubTransactionManager$2 v15 = new ContextHubTransactionManager$2(ContextHubTransactionManager,v16,1,v6,v10,v5,v6,v7);
  - Access Control Level: SYS_OR_SIG

- API Name: getContextHubInfo(I)Landroid/hardware/location/ContextHubInfo; in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.7429222464561462, Code:
Integer v2 = Integer.valueOf(p1);
boolean v3 = this.mContextHubIdToInfoMap.containsKey(v2);
Object v5 = this.mContextHubIdToInfoMap.get(v4);
return v5;
  - Access Control Level: SYS_OR_SIG

