This is path 1 for the API with depth 2:
public int sendMessage(int p1, int p2, ContextHubMessage p3){
	if (this.mContextHubWrapper != 0) {
		if (p3 != 0) {
			byte[] v3 = Arrays.copyOf(this.mData, this.mData.length);
			byte[] v2 = v3;
			if (v2 != 0) {
				Integer v5 = Integer.valueOf(p1);
				boolean v6 = this.mContextHubIdToInfoMap.containsKey(v5);
				boolean v4 = v6;
				if (v4 != 0) {
					if (p2 != -1) {
						int v7 = this.mType;
						if (v7 != 5) {
							if (this.mContextHubWrapper != 0) {
								ContextHubService$9 v10 = new ContextHubService$9(ContextHubService,p1);
								IContextHubTransactionCallback v9 = v10;
								PackageManager v13 = this.mContext.getPackageManager();
								int v14 = Binder.getCallingUid();
								String v15 = v13.getNameForUid(v14);
								String v12 = v15;
								ContextHubTransactionManager$5 v17 = new ContextHubTransactionManager$5(ContextHubTransactionManager,v18,4,v12,p1,v9);
								int v18 = this.mNextAvailableId.getAndIncrement();
								ContextHubServiceTransaction v16 = v17;
								int v21 = this.mTransactionQueue.size();
								if (v21 == 10000) {
									boolean v22 = this.mTransactionQueue.add(v16);
									ContextHubTransactionManager$TransactionRecord v23 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v24);
									String v24 = v16.toString();
									boolean v26 = this.mTransactionRecordDeque.add(v23);
									int v27 = this.mTransactionQueue.size();
									if (v27 != 1) {
										ContextHubTransactionManager.startNextTransaction();
										boolean v8 = 1;
										if (v8 == 0) {
											return -1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int sendMessage(int p1, int p2, ContextHubMessage p3){
	if (this.mContextHubWrapper != 0) {
		if (p3 != 0) {
			byte[] v3 = Arrays.copyOf(this.mData, this.mData.length);
			byte[] v2 = v3;
			if (v2 != 0) {
				Integer v5 = Integer.valueOf(p1);
				boolean v6 = this.mContextHubIdToInfoMap.containsKey(v5);
				boolean v4 = v6;
				if (v4 != 0) {
					if (p2 != -1) {
						NanoAppInstanceInfo v9 = this.mNanoAppStateManager.getNanoAppInstanceInfo(p2);
						NanoAppInstanceInfo v7 = v9;
						if (v7 == 0) {
							long v10 = this.mAppId;
							int v11 = this.mType;
							byte[] v13 = Arrays.copyOf(this.mData, this.mData.length);
							byte[] v12 = v13;
							NanoAppMessage v15 = new NanoAppMessage(v10,v11,v12,0);
							NanoAppMessage v14 = v15;
							Integer v17 = Integer.valueOf(p1);
							Object v18 = this.mDefaultClientMap.get(v17);
							int v19 = v18.sendMessageToNanoApp(v14);
							if (v19 != 0) {
								if (queryNanoAppsInternal() == 0) {
									return -1;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int sendMessage(int p1, int p2, ContextHubMessage p3){
	if (this.mContextHubWrapper != 0) {
		if (p3 != 0) {
			byte[] v2 = p3.getData();
			if (v2 != 0) {
				boolean v3 = p0.isValidContextHubId(p1);
				if (v3 != 0) {
					if (p2 != -1) {
						NanoAppInstanceInfo v4 = p0.getNanoAppInstanceInfo(p2);
						if (v4 == 0) {
							long v5 = v4.getAppId();
							int v6 = p3.getMsgType();
							byte[] v7 = p3.getData();
							NanoAppMessage v8 = NanoAppMessage.createMessageToNanoApp(v5, v6, v7);
							Integer v9 = Integer.valueOf(p1);
							Object v10 = this.mDefaultClientMap.get(v9);
							int v11 = v10.sendMessageToNanoApp(v8);
							if (v11 != 0) {
								if (queryNanoAppsInternal() == 0) {
									return -1;
								}
							}
						}
					}
				}
			}
		}
	}
}
