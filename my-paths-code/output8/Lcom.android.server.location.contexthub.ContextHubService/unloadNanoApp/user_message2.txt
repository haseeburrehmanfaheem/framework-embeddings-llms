The method unloadNanoApp in the following class Lcom.android.server.location.contexthub.ContextHubService has the following code snippet:

This is path 1 for the API with depth 2:
public int unloadNanoApp(int p1){
	if (this.mContextHubWrapper != 0) {
		Integer v3 = Integer.valueOf(p1);
		Object v4 = this.mNanoAppHash.get(v3);
		NanoAppInstanceInfo v2 = v4;
		if (v2 != 0) {
			int v5 = this.mContexthubId;
			long v6 = this.mAppId;
			ContextHubService$8 v8 = new ContextHubService$8(ContextHubService,v5);
			IContextHubTransactionCallback v7 = v8;
			PackageManager v11 = this.mContext.getPackageManager();
			int v12 = Binder.getCallingUid();
			String v13 = v11.getNameForUid(v12);
			String v10 = v13;
			ContextHubTransactionManager$2 v15 = new ContextHubTransactionManager$2(ContextHubTransactionManager,v16,1,v6,v10,v5,v6,v7);
			int v16 = this.mNextAvailableId.getAndIncrement();
			ContextHubServiceTransaction v14 = v15;
			int v19 = this.mTransactionQueue.size();
			if (v19 == 10000) {
				boolean v20 = this.mTransactionQueue.add(v14);
				ContextHubTransactionManager$TransactionRecord v21 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v22);
				String v22 = v14.toString();
				boolean v24 = this.mTransactionRecordDeque.add(v21);
				int v25 = this.mTransactionQueue.size();
				if (v25 != 1) {
					if (onTransact() == 0) {
						boolean v27 = this.mTransactionQueue.isEmpty();
						if (v27 != 0) {
							Object v28 = this.mTransactionQueue.peek();
							int v29 = v28.onTransact();
							if (v29 != 0) {
								ContextHubTransactionManager$$ExternalSyntheticLambda0 v30 = new ContextHubTransactionManager$$ExternalSyntheticLambda0(ContextHubTransactionManager,v28);
								long v32 = v28.getTimeout(TimeUnit.SECONDS);
								ScheduledFuture v33 = this.mTimeoutExecutor.schedule(v30, v32, TimeUnit.SECONDS);
								this.mTimeoutFuture = v33;
								if (v29 == 0) {
									boolean v34 = this.mTransactionQueue.isEmpty();
									if (v34 != 0) {
										return 0;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int unloadNanoApp(int p1){
	if (this.mContextHubWrapper != 0) {
		Integer v3 = Integer.valueOf(p1);
		Object v4 = this.mNanoAppHash.get(v3);
		NanoAppInstanceInfo v2 = v4;
		if (v2 != 0) {
			int v5 = this.mContexthubId;
			long v6 = this.mAppId;
			ContextHubService$8 v8 = new ContextHubService$8(ContextHubService,v5);
			IContextHubTransactionCallback v7 = v8;
			PackageManager v11 = this.mContext.getPackageManager();
			int v12 = Binder.getCallingUid();
			String v13 = v11.getNameForUid(v12);
			String v10 = v13;
			ContextHubTransactionManager$2 v15 = new ContextHubTransactionManager$2(ContextHubTransactionManager,v16,1,v6,v10,v5,v6,v7);
			int v16 = this.mNextAvailableId.getAndIncrement();
			ContextHubServiceTransaction v14 = v15;
			int v19 = this.mTransactionQueue.size();
			if (v19 == 10000) {
				boolean v20 = this.mTransactionQueue.add(v14);
				ContextHubTransactionManager$TransactionRecord v21 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v22);
				String v22 = v14.toString();
				boolean v24 = this.mTransactionRecordDeque.add(v21);
				int v25 = this.mTransactionQueue.size();
				if (v25 != 1) {
					ContextHubTransactionManager.startNextTransaction();
					return 0;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int unloadNanoApp(int p1){
	if (this.mContextHubWrapper != 0) {
		NanoAppInstanceInfo v2 = this.mNanoAppStateManager.getNanoAppInstanceInfo(p1);
		if (v2 != 0) {
			int v3 = v2.getContexthubId();
			long v4 = v2.getAppId();
			IContextHubTransactionCallback v5 = p0.createUnloadTransactionCallback(v3);
			String v6 = p0.getCallingPackageName();
			ContextHubServiceTransaction v7 = this.mTransactionManager.createUnloadTransaction(v3, v4, v5, v6);
			this.mTransactionManager.addTransaction(v7);
			return 0;
		}
	}
}

and the following sink code:
['Integer v3 = Integer.valueOf(p1);\nObject v4 = this.mNanoAppHash.get(v3);\nContextHubService$8 v8 = new ContextHubService$8(ContextHubService,v5);\nContextHubTransactionManager$2 v15 = new ContextHubTransactionManager$2(ContextHubTransactionManager,v16,1,v6,v10,v5,v6,v7);', 'NanoAppInstanceInfo v2 = this.mNanoAppStateManager.getNanoAppInstanceInfo(p1);\nIContextHubTransactionCallback v5 = p0.createUnloadTransactionCallback(v3);\nString v6 = p0.getCallingPackageName();\nContextHubServiceTransaction v7 = this.mTransactionManager.createUnloadTransaction(v3, v4, v5, v6);']

The method unloadNanoApp has the following similar APIs:

- API Name: sendMessage(IILandroid/hardware/location/ContextHubMessage;)I in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.8486130237579346, Code:
Integer v5 = Integer.valueOf(p1);
boolean v6 = this.mContextHubIdToInfoMap.containsKey(v5);
ContextHubService$9 v10 = new ContextHubService$9(ContextHubService, p1);
PackageManager v13 = this.mContext.getPackageManager();
int v14 = Binder.getCallingUid();
String v15 = v13.getNameForUid(v14);
ContextHubTransactionManager$5 v17 = new ContextHubTransactionManager$5(ContextHubTransactionManager, v18, 4, v12, p1, v9);
  - Access Control Level: SYS_OR_SIG

- API Name: loadNanoAppOnHub(ILandroid/hardware/location/IContextHubTransactionCallback;Landroid/hardware/location/NanoAppBinary;)V in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.828434944152832, Code:
Integer v4 = Integer.valueOf(p1);
boolean v5 = this.mContextHubIdToInfoMap.containsKey(v4);
ContextHubTransactionManager$1 v8 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v9,0,v10,v6,p1,p3,p2);
  - Similarity: 0.7572065591812134, Code:
p2.onTransactionComplete(8);
ContextHubTransactionManager$1 v9 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v10,0,v11,v4,p1,p3,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: loadNanoApp(ILandroid/hardware/location/NanoApp;)I in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.7956275343894958, Code:
NanoAppBinary v3 = new NanoAppBinary(v4);
ContextHubServiceTransaction v8 = this.mTransactionManager.createLoadTransaction(p1, v3, v6, v7);
  - Access Control Level: SYS_OR_SIG

- API Name: createPendingIntentClient(ILandroid/app/PendingIntent;JLjava/lang/String;)Landroid/hardware/location/IContextHubClient; in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.7854775190353394, Code:
Integer v3 = Integer.valueOf(p1);
boolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);
ContextHubClientBroker v26 = new ContextHubClientBroker(this.mContext,this.mContextHubProxy,ContextHubClientManager,v6,v20,p2,p3,p4,this.mTransactionManager);
IInterface v80 = v26.queryLocalInterface("android.hardware.location.IContextHubClient");
IContextHubClient$Stub$Proxy v81 = new IContextHubClient$Stub$Proxy(v26);
IContextHubClient v7 = v79;
return v7;
  - Access Control Level: SYS_OR_SIG

- API Name: getNanoAppInstanceInfo(I)Landroid/hardware/location/NanoAppInstanceInfo; in the following Class: Lcom.android.server.location.contexthub.ContextHubService with the following sink code entries:
  - Similarity: 0.7593460083007812, Code:
NanoAppInstanceInfo v2 = this.mNanoAppStateManager.getNanoAppInstanceInfo(p1);
return v2;
  - Access Control Level: SYS_OR_SIG

