The method getApplicationLocales in the following class Lcom.android.server.locales.LocaleManagerService$LocaleManagerBinderService has the following code snippet:

This is path 1 for the API with depth 2:
public LocaleList getApplicationLocales(String p1, int p2){
	Object v2 = Objects.requireNonNull(p1);
	int v3 = Binder.getCallingPid();
	int v4 = Binder.getCallingUid();
	int v5 = this.mActivityManagerInternal.handleIncomingUser(v3, v4, p2, 0, 0, "getApplicationLocales", 0);
	boolean v7 = LocaleManagerService.isPackageOwnedByCaller(p1, v5, 0);
	boolean v6 = v7;
	if (v6 != 0) {
		if (v12 == 0) {
			boolean v8 = 0;
			if (v8 != 0) {
				long v14 = Binder.clearCallingIdentity();
				ActivityTaskManagerInternal$PackageConfig v16 = this.mActivityTaskManagerInternal.getApplicationConfig(p1, v5);
				if (v16 != 0) {
					LocaleList v17 = LocaleList.getEmptyLocaleList();
					LocaleList v15 = v17;
					Binder.restoreCallingIdentity(v14);
					LocaleList v1 = v15;
					return v1;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public LocaleList getApplicationLocales(String p1, int p2){
	Object v2 = Objects.requireNonNull(p1);
	int v3 = Binder.getCallingPid();
	int v4 = Binder.getCallingUid();
	int v5 = this.mActivityManagerInternal.handleIncomingUser(v3, v4, p2, 0, 0, "getApplicationLocales", 0);
	boolean v6 = LocaleManagerService.isPackageOwnedByCaller(p1, v5);
	if (v6 != 0) {
		boolean v7 = LocaleManagerService.isCallerInstaller(p1, v5);
		if (v7 != 0) {
			long v9 = Binder.clearCallingIdentity();
			LocaleList v10 = LocaleManagerService.getApplicationLocalesUnchecked(p1, v5);
			Binder.restoreCallingIdentity(v9);
			LocaleList v1 = v10;
			return v1;
		}
	}
}


This is path 3 for the API with depth 0:
public LocaleList getApplicationLocales(String p1, int p2){
	LocaleList v1 = this.this$0.getApplicationLocales(p1, p2);
	return v1;
}

and the following sink code:
['int v5 = this.mActivityManagerInternal.handleIncomingUser(v3, v4, p2, 0, 0, "getApplicationLocales", 0);\nboolean v6 = LocaleManagerService.isPackageOwnedByCaller(p1, v5);\nlong v9 = Binder.clearCallingIdentity();\nLocaleList v10 = LocaleManagerService.getApplicationLocalesUnchecked(p1, v5);\nBinder.restoreCallingIdentity(v9);\nLocaleList v1 = v10;\nreturn v1;', 'int v5 = this.mActivityManagerInternal.handleIncomingUser(v3, v4, p2, 0, 0, "getApplicationLocales", 0);\nboolean v7 = LocaleManagerService.isPackageOwnedByCaller(p1, v5, 0);\nlong v14 = Binder.clearCallingIdentity();\nActivityTaskManagerInternal$PackageConfig v16 = this.mActivityTaskManagerInternal.getApplicationConfig(p1, v5);\nLocaleList v17 = LocaleList.getEmptyLocaleList();\nBinder.restoreCallingIdentity(v14);\nLocaleList v1 = v15;\nreturn v1;']

The method getApplicationLocales has the following similar APIs:

- API Name: startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8182762861251831, Code:
int v1 = UserHandle.getCallingUserId();
SafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);
ActivityOptions v5 = v4.getOriginalOptions();
boolean v6 = v5.getTransientLaunch();
int v7 = Binder.getCallingUid();
boolean v8 = ActivityTaskManagerService.isCallerRecents(v7);
long v9 = Binder.clearCallingIdentity();
WindowManagerService.boostPriorityForLockedSection();
Trace.traceBegin(32, "startExistingRecents");
ActivityOptions v12 = v4.getOriginalOptions();
boolean v13 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v12);
  - Access Control Level: SYS_OR_SIG

- API Name: setUserRestriction(Ljava/lang/String;ZI)V in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8007078170776367, Code:
int v4 = Binder.getCallingUid();
IPackageManager v6 = ActivityThread.getPackageManager();
IPackageManager v5 = v6;
String v7 = v5.getPackagesForUid(v4);
boolean v24 = v23.isSystemApp();
Bundle v27 = this.mBaseUserRestrictions.getRestrictions(p3);
Bundle v28 = BundleUtils.clone(v27);
v28.putBoolean(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: setAutoRevokeExempted(Ljava/lang/String;ZI)Z in the following Class: Lcom.android.server.pm.permission.PermissionManagerService with the following sink code entries:
  - Similarity: 0.7972068190574646, Code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v3 = Binder.getCallingUid();
boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);
this.mAppOpsManager.setMode(97, v9, v13, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: print(Ljava/lang/String;Landroid/print/IPrintDocumentAdapter;Landroid/print/PrintAttributes;Ljava/lang/String;II)Landroid/os/Bundle; in the following Class: Lcom.android.server.print.PrintManagerService$PrintManagerImpl with the following sink code entries:
  - Similarity: 0.7893690466880798, Code:
PackageManager v10 = this.mContext.getPackageManager();
int v11 = Binder.getCallingUid();
String v12 = v10.getPackagesForUid(v11);
UserState v19 = new UserState(this.mContext,v5,this.mLock,0);
  - Access Control Level: SYS_OR_SIG

- API Name: getServiceSettingsActivity(Lcom/android/internal/os/IResultReceiver;)V in the following Class: Lcom.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub with the following sink code entries:
  - Similarity: 0.7843246459960938, Code:
int v5 = UserHandle.getCallingUserId();
AbstractPerUserSystemService v8 = this.this$0.getServiceForUserLocked(v5);
String v10 = this.mInfo.getSettingsActivity();
ComponentName v12 = new ComponentName(ServiceInfo.packageName,v10);
Bundle v15 = new Bundle();
v15.putParcelable("EXTRA", v9);
p1.send(0, v14);
  - Access Control Level: NONE

