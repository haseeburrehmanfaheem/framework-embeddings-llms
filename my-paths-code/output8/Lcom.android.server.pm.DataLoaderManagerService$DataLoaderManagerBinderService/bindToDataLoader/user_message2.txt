The method bindToDataLoader has the following code snippet:

This is path 1 for the API with depth 2:
public boolean bindToDataLoader(int p1, DataLoaderParamsParcel p2, long p3, IDataLoaderStatusListener p4){
	SparseArray v1 = this.mServiceConnections;
	SparseArray v2 = this.mServiceConnections;
	Object v3 = v2.get(p1);
	if (v3 == 0) {
		ComponentName v4 = new ComponentName(DataLoaderParamsParcel.packageName,DataLoaderParamsParcel.className);
		Context v7 = this.mContext;
		PackageManager v8 = v7.getPackageManager();
		if (v8 != 0) {
			Intent v9 = new Intent("android.intent.action.LOAD_DATA");
			Intent v11 = v9.setComponent(v4);
			int v12 = UserHandle.getCallingUserId();
			List v13 = v8.queryIntentServicesAsUser(v9, 0, v12);
			if (v13 == 0) {
				boolean v14 = v13.isEmpty();
				if (v14 == 0) {
					int v15 = v13.size();
					if (v15 <= 0) {
						Object v16 = v13.get(0);
						ComponentName v17 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
						ComponentName v6 = v17;
						if (v6 != 0) {
							DataLoaderManagerService$DataLoaderServiceConnection v19 = new DataLoaderManagerService$DataLoaderServiceConnection(this.this$0,p1,p4);
							Intent v21 = new Intent();
							Intent v23 = v21.setComponent(v6);
							Handler v24 = DataLoaderManagerService.-$$Nest$fgetmHandler(this.this$0);
							DataLoaderManagerService$DataLoaderManagerBinderService$$ExternalSyntheticLambda0 v25 = new DataLoaderManagerService$DataLoaderManagerBinderService$$ExternalSyntheticLambda0(p0,v21,v19,v6,p1);
							boolean v27 = v24.postDelayed(v25, p3);
							return v27;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean bindToDataLoader(int p1, DataLoaderParamsParcel p2, long p3, IDataLoaderStatusListener p4){
	SparseArray v1 = this.mServiceConnections;
	SparseArray v2 = this.mServiceConnections;
	Object v3 = v2.get(p1);
	if (v3 == 0) {
		return 1;
	}
}


This is path 3 for the API with depth 0:
public boolean bindToDataLoader(int p1, DataLoaderParamsParcel p2, long p3, IDataLoaderStatusListener p4){
	SparseArray v1 = DataLoaderManagerService.-$$Nest$fgetmServiceConnections(this.this$0);
	SparseArray v2 = DataLoaderManagerService.-$$Nest$fgetmServiceConnections(this.this$0);
	Object v3 = v2.get(p1);
	if (v3 == 0) {
		return 1;
	}
}

and the following sink code:
['Object v3 = v2.get(p1);\nComponentName v4 = new ComponentName(DataLoaderParamsParcel.packageName,DataLoaderParamsParcel.className);\nPackageManager v8 = v7.getPackageManager();\nIntent v9 = new Intent("android.intent.action.LOAD_DATA");\nDataLoaderManagerService$DataLoaderServiceConnection v19 = new DataLoaderManagerService$DataLoaderServiceConnection(this.this$0,p1,p4);\nboolean v27 = v24.postDelayed(v25, p3);']

The method bindToDataLoader has the following similar APIs:

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;IZLandroid/os/IBinder;Landroid/os/Bundle;)V with Similarity Score: 0.7489762902259827
  - Access Control Level: SYS_OR_SIG and the following code:
Intent v38 = new Intent();
Intent v26 = v26.setComponent(p4);
ActivityTaskManagerInternal v27 = this.mInjector.getActivityTaskManagerInternal();
int v28 = v27.startActivityAsUser(p1, p2, p3, v16, p7, 0, v24, p5);

- API Name: getServiceSettingsActivity(Lcom/android/internal/os/IResultReceiver;I)V with Similarity Score: 0.7263044118881226
  - Access Control Level: NONE and the following code:
String v5 = this.mTranslationServiceInfo.getSettingsActivity();
ComponentName v7 = new ComponentName(ServiceInfo.packageName,v5);
Intent v10 = new Intent();
Intent v12 = v10.setComponent(v4);
PendingIntent v17 = PendingIntent.getActivityAsUser(v14, 0, v10, 67108864, 0, v15);
Bundle v19 = new Bundle();
v19.putParcelable("EXTRA", v17);
Bundle v18 = v19;
p1.send(1, v18);

