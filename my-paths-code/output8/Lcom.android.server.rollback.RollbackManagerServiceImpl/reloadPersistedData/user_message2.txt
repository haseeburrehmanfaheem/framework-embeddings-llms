The method reloadPersistedData in the following class Lcom.android.server.rollback.RollbackManagerServiceImpl has the following code snippet:

This is path 1 for the API with depth 2:
public void reloadPersistedData(){
	RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0);
	Handler v7 = RollbackManagerServiceImpl.getHandler();
	Looper v8 = v7.getLooper();
	boolean v9 = v8.isCurrentThread();
	Preconditions.checkState((v9 ^ 1));
	CompletableFuture v11 = CompletableFuture.runAsync(v3, this.mExecutor);
	Object v12 = v11.get();
	return;
}


This is path 2 for the API with depth 1:
public void reloadPersistedData(){
	RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0);
	RollbackManagerServiceImpl.assertNotInWorkerThread();
	CompletableFuture v7 = CompletableFuture.runAsync(v3, this.mExecutor);
	Object v8 = v7.get();
	return;
}


This is path 3 for the API with depth 0:
public void reloadPersistedData(){
	RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0);
	p0.awaitResult(v3);
	return;
}

and the following sink code:
['RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0);\nCompletableFuture v11 = CompletableFuture.runAsync(v3, this.mExecutor);', 'RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0);\nCompletableFuture v7 = CompletableFuture.runAsync(v3, this.mExecutor);', 'RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0);\np0.awaitResult(v3);']

The method reloadPersistedData has the following similar APIs:

- API Name: expireRollbackForPackage(Ljava/lang/String;)V in the following Class: Lcom.android.server.rollback.RollbackManagerServiceImpl with the following sink code entries:
  - Similarity: 0.9788457155227661, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1);
p0.awaitResult(v3);
  - Similarity: 0.9678434133529663, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1);
CompletableFuture v11 = CompletableFuture.runAsync(v3, this.mExecutor);
Object v12 = v11.get();
  - Similarity: 0.9614714980125427, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1);
CompletableFuture v7 = CompletableFuture.runAsync(v3, this.mExecutor);
Object v8 = v7.get();
  - Access Control Level: SYS_OR_SIG

- API Name: getRecentlyCommittedRollbacks()Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.rollback.RollbackManagerServiceImpl with the following sink code entries:
  - Similarity: 0.9708637595176697, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v7 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0);
CompletableFuture v15 = CompletableFuture.supplyAsync(v7, this.mExecutor);
Object v16 = v15.get();
return v9;
  - Similarity: 0.9656780362129211, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0);
Object v5 = p0.awaitResult(v3);
return v5;
  - Similarity: 0.9543112516403198, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v9 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0);
CompletableFuture v13 = CompletableFuture.supplyAsync(v9, this.mExecutor);
Object v14 = v13.get();
return v11;
  - Access Control Level: SYS_OR_SIG

- API Name: getAvailableRollbacks()Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.rollback.RollbackManagerServiceImpl with the following sink code entries:
  - Similarity: 0.9654825925827026, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda12 v7 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda12(p0);
CompletableFuture v15 = CompletableFuture.supplyAsync(v7, this.mExecutor);
Object v16 = v15.get();
return v16;
  - Similarity: 0.9633641839027405, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda12 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda12(p0);
Object v5 = p0.awaitResult(v3);
return v5;
  - Similarity: 0.9551517963409424, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda12 v9 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda12(p0);
CompletableFuture v13 = CompletableFuture.supplyAsync(v9, this.mExecutor);
Object v14 = v13.get();
return v14;
  - Access Control Level: SYS_OR_SIG

- API Name: notifyStagedSession(I)I in the following Class: Lcom.android.server.rollback.RollbackManagerServiceImpl with the following sink code entries:
  - Similarity: 0.942694365978241, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1);
CompletableFuture v7 = CompletableFuture.supplyAsync(v3, this.mExecutor);
Object v8 = v7.get();
int v9 = v8.intValue();
return v9;
  - Similarity: 0.9418395757675171, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1);
Object v5 = p0.awaitResult(v3);
int v6 = v5.intValue();
return v6;
  - Similarity: 0.9382312297821045, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1);
CompletableFuture v11 = CompletableFuture.supplyAsync(v3, this.mExecutor);
Object v12 = v11.get();
int v13 = v12.intValue();
return v13;
  - Access Control Level: SYS_OR_SIG

- API Name: snapshotAndRestoreUserData(Ljava/lang/String;[IIJLjava/lang/String;I)V in the following Class: Lcom.android.server.rollback.RollbackManagerServiceImpl with the following sink code entries:
  - Similarity: 0.9335444569587708, Code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda14 v4 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda14(p0,p1,p2,p3,p5,p6);
boolean v6 = v3.post(v4);
  - Access Control Level: SYS_OR_SIG

