The method addAccountExplicitlyWithVisibility has the following code snippet:

This is path 1 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesForCaller(v2, v3, 0);
			List v18 = v19;
			boolean v20 = v18.contains(Account.type);
			boolean v17 = v20;
			if (v17 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(v3);
				if (v24 != 0) {
					File v25 = new File(v26);
					String v26 = this.mInjector.getPreNDatabaseName(v3);
					File v28 = new File(v29);
					String v29 = this.mInjector.getDeDatabaseName(v3);
					AccountManagerService$UserAccounts v31 = new AccountManagerService$UserAccounts(this.mContext,v3,v25,v28);
					this.mUsers.append(v3, v31);
					AccountManagerService.purgeOldGrants(v31);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v36 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v36 != 0) {
						boolean v37 = this.mLocalUnlockedUsers.get(v3);
						if (v37 == 0) {
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v24, 1);
								AccountManagerService$UserAccounts v23 = v24;
								AccountManagerService$UserAccounts v22 = v23;
								boolean v39 = p0.addAccountInternal(v22, p1, p2, p3, v2, p4, p5);
								IAccountManager$Stub.restoreCallingIdentity(v21);
								return v39;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v18 = AccountManagerService.getTypesManagedByCaller(v2, v3);
			boolean v19 = v18.contains(Account.type);
			boolean v17 = v19;
			if (v17 == 0) {
				long v20 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v22 = AccountManagerService.getUserAccountsNotChecked(v3);
				AccountManagerService$UserAccounts v21 = v22;
				boolean v23 = p0.addAccountInternal(v21, p1, p2, p3, v2, p4, p5);
				IAccountManager$Stub.restoreCallingIdentity(v20);
				return v23;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		boolean v17 = p0.isAccountManagedByCaller(Account.type, v2, v3);
		if (v17 == 0) {
			long v18 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v3);
			boolean v20 = p0.addAccountInternal(v19, p1, p2, p3, v2, p4, p5);
			IAccountManager$Stub.restoreCallingIdentity(v18);
			return v20;
		}
	}
}

and the following sink code:
['Bundle v1 = Bundle.setDefusable(p3, 1);\nboolean v39 = p0.addAccountInternal(v22, p1, p2, v1, v2, p4, p5);', 'Bundle v1 = Bundle.setDefusable(p3, 1);\nboolean v23 = p0.addAccountInternal(v21, p1, p2, v1, v2, p4, p5);', 'Bundle v1 = Bundle.setDefusable(p3, 1);\nboolean v20 = p0.addAccountInternal(v19, p1, p2, v1, v2, p4, p5);']

The method addAccountExplicitlyWithVisibility has the following similar APIs:

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z with Similarity Score: 0.9419602155685425
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v2 = Bundle.setDefusable(p3, 1);
boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, v2, v3, 0, p4);
return v21;

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z with Similarity Score: 0.9360363483428955
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v2 = Bundle.setDefusable(p3, 1);
boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, v2, v3, 0, p4);
return v21;

