The method addAccountExplicitlyWithVisibility in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesForCaller(v2, v3, 0);
			List v18 = v19;
			boolean v20 = v18.contains(Account.type);
			boolean v17 = v20;
			if (v17 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(v3);
				if (v24 != 0) {
					File v25 = new File(v26);
					String v26 = this.mInjector.getPreNDatabaseName(v3);
					File v28 = new File(v29);
					String v29 = this.mInjector.getDeDatabaseName(v3);
					AccountManagerService$UserAccounts v31 = new AccountManagerService$UserAccounts(this.mContext,v3,v25,v28);
					this.mUsers.append(v3, v31);
					AccountManagerService.purgeOldGrants(v31);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v36 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v36 != 0) {
						boolean v37 = this.mLocalUnlockedUsers.get(v3);
						if (v37 == 0) {
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v24, 1);
								AccountManagerService$UserAccounts v23 = v24;
								AccountManagerService$UserAccounts v22 = v23;
								boolean v39 = p0.addAccountInternal(v22, p1, p2, p3, v2, p4, p5);
								IAccountManager$Stub.restoreCallingIdentity(v21);
								return v39;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v18 = AccountManagerService.getTypesManagedByCaller(v2, v3);
			boolean v19 = v18.contains(Account.type);
			boolean v17 = v19;
			if (v17 == 0) {
				long v20 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v22 = AccountManagerService.getUserAccountsNotChecked(v3);
				AccountManagerService$UserAccounts v21 = v22;
				boolean v23 = p0.addAccountInternal(v21, p1, p2, p3, v2, p4, p5);
				IAccountManager$Stub.restoreCallingIdentity(v20);
				return v23;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		boolean v17 = p0.isAccountManagedByCaller(Account.type, v2, v3);
		if (v17 == 0) {
			long v18 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v3);
			boolean v20 = p0.addAccountInternal(v19, p1, p2, p3, v2, p4, p5);
			IAccountManager$Stub.restoreCallingIdentity(v18);
			return v20;
		}
	}
}

and the following sink code:
['Bundle v1 = Bundle.setDefusable(p3, 1);\nboolean v39 = p0.addAccountInternal(v22, p1, p2, v1, v2, p4, p5);', 'Bundle v1 = Bundle.setDefusable(p3, 1);\nboolean v23 = p0.addAccountInternal(v21, p1, p2, v1, v2, p4, p5);', 'Bundle v1 = Bundle.setDefusable(p3, 1);\nboolean v20 = p0.addAccountInternal(v19, p1, p2, v1, v2, p4, p5);']

The method addAccountExplicitlyWithVisibility has the following similar APIs:

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9419603943824768, Code:
Bundle v2 = Bundle.setDefusable(p3, 1);
boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, v2, v3, 0, p4);
return v21;
  - Similarity: 0.9155417084693909, Code:
Bundle v2 = Bundle.setDefusable(p3, 1);
Object v17 = Objects.requireNonNull(p1, "account cannot be null");
boolean v24 = AccountManagerService.addAccountInternal(v22, p1, p2, v2, v3, 0, p4);
return v24;
  - Access Control Level: SYS_OR_SIG

- API Name: addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8882829546928406, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
String v12 = Arrays.toString(p4);
AccountManagerService$9 v58 = new AccountManagerService$9(AccountManagerService,v54,p1,p2,p5,1,0,0,1,p3,p4,v49,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8696823120117188, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v21 = p0.getUserAccounts(p5);
AccountManagerService$12 v22 = new AccountManagerService$12(p0,v21,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
v22.bind();
  - Similarity: 0.8673648238182068, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
  - Similarity: 0.8588849902153015, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v25 = this.mUsers.get(p5);
AccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
AccountManagerService.syncDeCeAccountsLocked(v25);
AccountManagerService.validateAccountsInternal(v25, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8647429347038269, Code:
Bundle v1 = Bundle.setDefusable(p5, 1);
AccountManagerService$14 v45 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
v28.bind();
  - Access Control Level: SYS_OR_SIG

- API Name: finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8366286158561707, Code:
Bundle v1 = Bundle.setDefusable(p2, 1);
boolean v24 = p0.isCrossUser(v2, p5);
boolean v25 = p0.canUserModifyAccounts(p5, v2);
CryptoHelper v27 = CryptoHelper.getInstance();
Bundle v28 = v27.decryptBundle(p2);
  - Similarity: 0.832526683807373, Code:
Bundle v1 = Bundle.setDefusable(p2, 1);
int v23 = p2.size();
boolean v28 = AccountManagerService.isProfileOwner(v2);
UserHandle v30 = new UserHandle(p5);
Bundle v32 = v29.getUserRestrictions(v30);
  - Access Control Level: SYS_OR_SIG

