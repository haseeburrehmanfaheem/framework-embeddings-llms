The method clearPassword in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v18 = AccountManagerService.getTypesForCaller(v1, v15, 0);
			List v17 = v18;
			boolean v19 = v17.contains(Account.type);
			boolean v16 = v19;
			if (v16 == 0) {
				long v20 = IAccountManager$Stub.clearCallingIdentity();
				Object v23 = this.mUsers.get(v15);
				if (v23 != 0) {
					boolean v24 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v24 != 0) {
						boolean v25 = this.mLocalUnlockedUsers.get(v15);
						if (v25 == 0) {
							File v33 = new File(v34);
							String v34 = this.mInjector.getCeDatabaseName(v15);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v33);
							AccountManagerService.syncDeCeAccountsLocked(v23);
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v23, 1);
								AccountManagerService$UserAccounts v22 = v23;
								AccountManagerService$UserAccounts v21 = v22;
								if (p1 != 0) {
									SQLiteDatabase v41 = this.mDeDatabase.getWritableDatabase();
									v41.beginTransaction();
									SQLiteDatabase v44 = this.mDeDatabase.getReadableDatabase();
									String v45 = new String(1);
									String v46 = new String(2);
									Cursor v47 = v44.query("accounts", v45, "name=? AND type=?", v46, 0, 0, 0);
									boolean v48 = v47.moveToNext();
									if (v48 == 0) {
										long v49 = v47.getLong(0);
										v47.close();
										long v43 = v49;
										if ((v43 < 0) < 0) {
											SQLiteDatabase v52 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
											ContentValues v53 = new ContentValues();
											v53.put("password", 0);
											String v56 = new String(1);
											String v57 = String.valueOf(v43);
											int v58 = v52.update("ceDb.accounts", v53, "_id=?", v56);
											int v51 = v58;
											SQLiteDatabase v60 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
											String v61 = new String(1);
											String v62 = String.valueOf(v43);
											int v63 = v60.delete("ceDb.authtokens", "accounts_id=?", v61);
											if (v63 <= 0) {
												boolean v59 = 1;
												Map v64 = this.authTokenCache;
												Object v65 = v64.remove(p1);
												TokenCache v66 = this.accountTokenCaches;
												this.mCachedTokens.evict(p1);
												SQLiteDatabase v70 = this.mDeDatabase.getWritableDatabase();
												v70.setTransactionSuccessful();
												if (0 == 0) {
													int v72 = 0.length();
													if (v72 != 0) {
														long v74 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
														if ((v74 < -1) == 0) {
															AccountManagerService$1LogRecordTask v75 = new AccountManagerService$1LogRecordTask(AccountManagerService,DEBUG_ACTION_SET_PASSWORD,"accounts",v43,v21,v1,v74);
															boolean v77 = this.mHandler.post(v75);
															SQLiteDatabase v79 = this.mDeDatabase.getWritableDatabase();
															v79.endTransaction();
															if (0 == 0) {
																Map v82 = AccountManagerService.getRequestingPackages(p1, v21);
																Set v83 = v82.entrySet();
																Iterator v84 = v83.iterator();
																boolean v85 = v84.hasNext();
																if (v85 == 0) {
																	Object v86 = v84.next();
																	Object v87 = v86.getValue();
																	int v88 = v87.intValue();
																	if (v88 == 3) {
																		Object v89 = v86.getValue();
																		int v90 = v89.intValue();
																		if (v90 == 4) {
																			Object v91 = v86.getKey();
																			AccountManagerService.notifyPackage(v91, v21);
																			boolean v93 = v84.hasNext();
																			if (v93 == 0) {
																				int v94 = this.userId;
																				String v99 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																				UserHandle v103 = new UserHandle(v94);
																				this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v103);
																				IAccountManager$Stub.restoreCallingIdentity(v20);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
			boolean v18 = v17.contains(Account.type);
			boolean v16 = v18;
			if (v16 == 0) {
				long v19 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
				AccountManagerService$UserAccounts v20 = v21;
				if (p1 != 0) {
					AccountManagerService$UserAccounts.accountsDb.beginTransaction();
					long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
					if ((v24 < 0) < 0) {
						int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, 0);
						boolean v26 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v24);
						Map v27 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v20);
						Object v28 = v27.remove(p1);
						TokenCache v29 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v20);
						v29.remove(p1);
						AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
						if (0 == 0) {
							int v32 = 0.length();
							if (v32 != 0) {
								AccountManagerService.logRecord(DEBUG_ACTION_SET_PASSWORD, "accounts", v24, v20, v1);
								AccountManagerService$UserAccounts.accountsDb.endTransaction();
								if (0 == 0) {
									AccountManagerService.sendNotificationAccountUpdated(p1, v20);
									int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v20);
									AccountManagerService.sendAccountsChangedBroadcast(v36);
									IAccountManager$Stub.restoreCallingIdentity(v19);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
		if (v16 == 0) {
			long v17 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
			p0.setPasswordInternal(v18, p1, 0, v1);
			IAccountManager$Stub.restoreCallingIdentity(v17);
			return;
		}
	}
}

and the following sink code:
['setPasswordInternal(v18, p1, 0, v1);\nint v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);\nint v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, 0);\nboolean v26 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v24);', 'int var1 = Binder.getCallingUid();\nlong v17 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);']

The method clearPassword has the following similar APIs:

- API Name: editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.896377682685852, Code:
int v1 = Binder.getCallingUid();
List v21 = AccountManagerService.getTypesForCaller(v1, v18, 0);
AccountManagerService$16 v43 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
  - Similarity: 0.872744619846344, Code:
int v1 = Binder.getCallingUid();
List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
AccountManagerService$16 v31 = new AccountManagerService$16(p0,v29,p1,p2,p3,1,0,0,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8814153671264648, Code:
int v3 = Binder.getCallingUid();
int v4 = UserHandle.getCallingUserId();
List v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);
boolean v8 = v6.contains(Account.type);
  - Access Control Level: SYS_OR_SIG

- API Name: getPassword(Landroid/accounts/Account;)Ljava/lang/String; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8795273900032043, Code:
int v15 = UserHandle.getCallingUserId();
boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
String v19 = p0.readPasswordInternal(v18, p1);
IAccountManager$Stub.restoreCallingIdentity(v17);
return v19;
  - Similarity: 0.8679472208023071, Code:
int v15 = UserHandle.getCallingUserId();
List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
boolean v18 = v17.contains(Account.type);
long v19 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
String v25 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
IAccountManager$Stub.restoreCallingIdentity(v19);
return v22;
  - Access Control Level: SYS_OR_SIG

- API Name: removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8719165921211243, Code:
int v1 = Binder.getCallingUid();
UserHandle v23 = UserHandle.of(p4);
List v27 = AccountManagerService.getTypesForCaller(v1, v24, 0);
boolean v28 = v26.contains(Account.type);
if (v25 != 0) { ... }
  - Access Control Level: SYS_OR_SIG

- API Name: setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8527683615684509, Code:
int v1 = Binder.getCallingUid();
List v18 = AccountManagerService.getTypesManagedByCaller(v1, v16);
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v30 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
long v32 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v30, p2, p3);
  - Access Control Level: SYS_OR_SIG

