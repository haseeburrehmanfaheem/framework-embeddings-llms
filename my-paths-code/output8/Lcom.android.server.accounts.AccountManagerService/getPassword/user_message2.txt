The method getPassword has the following code snippet:

This is path 1 for the API with depth 2:
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v8 = Binder.getCallingUid();
		int v11 = Binder.getCallingPid();
		if (p1 == 0) {
			int v15 = UserHandle.getCallingUserId();
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(v1, v15, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					long v20 = IAccountManager$Stub.clearCallingIdentity();
					Object v23 = this.mUsers.get(v15);
					if (v23 != 0) {
						boolean v24 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v24 != 0) {
							boolean v25 = this.mLocalUnlockedUsers.get(v15);
							if (v25 == 0) {
								File v33 = new File(v34);
								String v34 = this.mInjector.getCeDatabaseName(v15);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v33);
								AccountManagerService.syncDeCeAccountsLocked(v23);
								if (0 == 0) {
									AccountManagerService.validateAccountsInternal(v23, 1);
									AccountManagerService$UserAccounts v22 = v23;
									AccountManagerService$UserAccounts v21 = v22;
									if (p1 != 0) {
										int v40 = this.userId;
										boolean v42 = this.mLocalUnlockedUsers.get(v40);
										boolean v41 = v42;
										if (v41 != 0) {
											SQLiteDatabase v44 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											String v45 = new String(2);
											String v46 = new String(1);
											Cursor v47 = v44.query("ceDb.accounts", v46, "name=? AND type=?", v45, 0, 0, 0);
											boolean v48 = v47.moveToNext();
											if (v48 == 0) {
												String v49 = v47.getString(0);
												v47.close();
												String v43 = v49;
												String v39 = v43;
												IAccountManager$Stub.restoreCallingIdentity(v20);
												return v39;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v8 = Binder.getCallingUid();
		int v11 = Binder.getCallingPid();
		if (p1 == 0) {
			int v15 = UserHandle.getCallingUserId();
			if (Account.type != 0) {
				List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
				boolean v18 = v17.contains(Account.type);
				boolean v16 = v18;
				if (v16 == 0) {
					long v19 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
					AccountManagerService$UserAccounts v20 = v21;
					if (p1 != 0) {
						int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v20);
						boolean v24 = AccountManagerService.isLocalUnlockedUser(v23);
						if (v24 != 0) {
							String v25 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
							String v22 = v25;
							IAccountManager$Stub.restoreCallingIdentity(v19);
							return v22;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v8 = Binder.getCallingUid();
		int v11 = Binder.getCallingPid();
		if (p1 == 0) {
			int v15 = UserHandle.getCallingUserId();
			boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
			if (v16 == 0) {
				long v17 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
				String v19 = p0.readPasswordInternal(v18, p1);
				IAccountManager$Stub.restoreCallingIdentity(v17);
				return v19;
			}
		}
	}
}

and the following sink code:
['int v15 = UserHandle.getCallingUserId();\nList v18 = AccountManagerService.getTypesForCaller(v1, v15, 0);\nboolean v19 = v17.contains(Account.type);\nlong v20 = IAccountManager$Stub.clearCallingIdentity();\nObject v23 = this.mUsers.get(v15);\nSQLiteDatabase v44 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();\nCursor v47 = v44.query("ceDb.accounts", v46, "name=? AND type=?", v45, 0, 0, 0);\nString v49 = v47.getString(0);\nv47.close();\nIAccountManager$Stub.restoreCallingIdentity(v20);\nreturn v39;', 'int v15 = UserHandle.getCallingUserId();\nList v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);\nboolean v18 = v17.contains(Account.type);\nlong v19 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);\nString v25 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);\nIAccountManager$Stub.restoreCallingIdentity(v19);\nreturn v22;', 'int v15 = UserHandle.getCallingUserId();\nboolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);\nlong v17 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);\nString v19 = p0.readPasswordInternal(v18, p1);\nIAccountManager$Stub.restoreCallingIdentity(v17);\nreturn v19;']

The method getPassword has the following similar APIs:

- API Name: getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.8803087472915649
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v11 = UserHandle.getCallingUserId();
Object v9 = Objects.requireNonNull(p1, "account cannot be null");
Object v10 = Objects.requireNonNull(p2, "key cannot be null");
SQLiteDatabase v43 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
Cursor v47 = v43.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v46, 0, 0, 0);

- API Name: clearPassword(Landroid/accounts/Account;)V with Similarity Score: 0.8795272707939148
  - Access Control Level: SYS_OR_SIG and the following code:
int var1 = Binder.getCallingUid();
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);

