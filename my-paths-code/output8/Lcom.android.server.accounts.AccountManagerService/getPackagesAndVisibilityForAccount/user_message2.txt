The method getPackagesAndVisibilityForAccount has the following code snippet:

This is path 1 for the API with depth 2:
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v6 = AccountManagerService.getTypesForCaller(v2, v3, 0);
		List v5 = v6;
		boolean v7 = v5.contains(Account.type);
		boolean v4 = v7;
		if (v4 != 0) {
			boolean v8 = p0.isSystemUid(v2);
			if (v8 == 0) {
				long v9 = IAccountManager$Stub.clearCallingIdentity();
				Object v12 = this.mUsers.get(v3);
				if (v12 != 0) {
					File v13 = new File(v14);
					String v14 = this.mInjector.getPreNDatabaseName(v3);
					File v16 = new File(v17);
					String v17 = this.mInjector.getDeDatabaseName(v3);
					AccountManagerService$UserAccounts v19 = new AccountManagerService$UserAccounts(this.mContext,v3,v13,v16);
					this.mUsers.append(v3, v19);
					AccountManagerService.purgeOldGrants(v19);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v24 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v24 != 0) {
						boolean v25 = this.mLocalUnlockedUsers.get(v3);
						if (v25 == 0) {
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v12, 1);
								AccountManagerService$UserAccounts v11 = v12;
								AccountManagerService$UserAccounts v10 = v11;
								Map v28 = this.visibilityCache;
								Object v29 = v28.get(p1);
								if (v29 != 0) {
									HashMap v31 = new HashMap();
									Map v33 = this.visibilityCache;
									Object v34 = v33.put(p1, v31);
									AccountManager.invalidateLocalAccountsDataCaches();
									Map v27 = v29;
									IAccountManager$Stub.restoreCallingIdentity(v9);
									return v27;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v5 = AccountManagerService.getTypesManagedByCaller(v2, v3);
		boolean v6 = v5.contains(Account.type);
		boolean v4 = v6;
		if (v4 != 0) {
			long v8 = Binder.clearCallingIdentity();
			String v9 = this.mPackageManager.getPackagesForUid(v2);
			if (v9 == 0) {
				if (0 >= v9.length) {
					PackageInfo v10 = this.mPackageManager.getPackageInfo(v9[0], 0);
					if (v10 == 0) {
						if ((ApplicationInfo.flags & 1) == 0) {
							if ((0 + 1) >= v9.length) {
								PackageInfo v11 = this.mPackageManager.getPackageInfo(v9[(0 + 1)], 0);
								if (v11 == 0) {
									if ((ApplicationInfo.flags & 1) == 0) {
										Binder.restoreCallingIdentity(v8);
										boolean v7 = 1;
										if (v7 == 0) {
											long v13 = IAccountManager$Stub.clearCallingIdentity();
											AccountManagerService$UserAccounts v15 = AccountManagerService.getUserAccountsNotChecked(v3);
											AccountManagerService$UserAccounts v14 = v15;
											Map v17 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v14);
											Object v18 = v17.get(p1);
											if (v18 != 0) {
												HashMap v20 = new HashMap();
												Map v22 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v14);
												Object v23 = v22.put(p1, v20);
												AccountManager.invalidateLocalAccountsDataCaches();
												Map v16 = v18;
												IAccountManager$Stub.restoreCallingIdentity(v13);
												return v16;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	if (v4 != 0) {
		boolean v5 = p0.isSystemUid(v2);
		if (v5 == 0) {
			long v6 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
			Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
			IAccountManager$Stub.restoreCallingIdentity(v6);
			return v8;
		}
	}
}

and the following sink code:
['AccountManagerService$UserAccounts v19 = new AccountManagerService$UserAccounts(this.mContext,v3,v13,v16);\nthis.mUsers.append(v3, v19);\nMap v28 = this.visibilityCache;\nObject v29 = v28.get(p1);', 'List v6 = AccountManagerService.getTypesForCaller(v2, v3, 0);\nboolean v7 = v5.contains(Account.type);', 'String v9 = this.mPackageManager.getPackagesForUid(v2);\nPackageInfo v10 = this.mPackageManager.getPackageInfo(v9[0], 0);', 'Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);']

The method getPackagesAndVisibilityForAccount has the following similar APIs:

- API Name: setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z with Similarity Score: 0.9741880893707275
  - Access Control Level: SYS_OR_SIG and the following code:
List v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);
List v6 = v7;
boolean v8 = v6.contains(Account.type);
boolean v5 = v8;

- API Name: registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9083309173583984
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v14 = new AccountManagerService$UserAccounts(this.mContext,v3,v8,v11);
this.mUsers.append(v3, v14);

