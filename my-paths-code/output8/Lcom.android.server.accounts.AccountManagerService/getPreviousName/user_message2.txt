The method getPreviousName in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		Object v19 = this.mUsers.get(v15);
		if (v19 != 0) {
			boolean v20 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v20 != 0) {
				boolean v21 = this.mLocalUnlockedUsers.get(v15);
				if (v21 == 0) {
					File v29 = new File(v30);
					String v30 = this.mInjector.getCeDatabaseName(v15);
					AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v29);
					AccountManagerService.syncDeCeAccountsLocked(v19);
					if (0 == 0) {
						AccountManagerService.validateAccountsInternal(v19, 1);
						AccountManagerService$UserAccounts v18 = v19;
						AccountManagerService$UserAccounts v17 = v18;
						if (p1 != 0) {
							HashMap v36 = this.previousNameCache;
							Object v37 = v36.get(p1);
							if (v37 != 0) {
								SQLiteDatabase v39 = this.mDeDatabase.getReadableDatabase();
								String v40 = new String(1);
								String v41 = new String(2);
								Cursor v42 = v39.query("accounts", v40, "name=? AND type=?", v41, 0, 0, 0);
								boolean v43 = v42.moveToNext();
								if (v43 == 0) {
									String v44 = v42.getString(0);
									v42.close();
									String v38 = v44;
									AtomicReference v46 = new AtomicReference(v38);
									HashMap v48 = this.previousNameCache;
									Object v49 = v48.put(p1, v46);
									String v35 = v38;
									IAccountManager$Stub.restoreCallingIdentity(v16);
									return v35;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v15);
		AccountManagerService$UserAccounts v17 = v18;
		if (p1 != 0) {
			HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);
			Object v21 = v20.get(p1);
			if (v21 != 0) {
				String v22 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p1);
				AtomicReference v23 = new AtomicReference(v22);
				HashMap v25 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);
				Object v26 = v25.put(p1, v23);
				String v19 = v22;
				IAccountManager$Stub.restoreCallingIdentity(v16);
				return v19;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
		String v18 = p0.readPreviousNameInternal(v17, p1);
		IAccountManager$Stub.restoreCallingIdentity(v16);
		return v18;
	}
}

and the following sink code:
['AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v29);\nFile v29 = new File(v30);\nAccountManagerService.syncDeCeAccountsLocked(v19);\nAccountManagerService.validateAccountsInternal(v19, 1);\nHashMap v36 = this.previousNameCache;\nObject v37 = v36.get(p1);\nAtomicReference v46 = new AtomicReference(v38);\nObject v49 = v48.put(p1, v46);\nSQLiteDatabase v39 = this.mDeDatabase.getReadableDatabase();\nCursor v42 = v39.query("accounts", v40, "name=? AND type=?", v41, 0, 0, 0);', 'AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p1);\nAtomicReference v23 = new AtomicReference(v22);\nHashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);\nObject v21 = v20.get(p1);\nObject v26 = v25.put(p1, v23);', 'p0.readPreviousNameInternal(v17, p1);']

The method getPreviousName has the following similar APIs:

- API Name: accountAuthenticated(Landroid/accounts/Account;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8702536821365356, Code:
Integer v4 = Integer.valueOf(v1);
Object v7 = Objects.requireNonNull(p1, "account cannot be null");
AccountManagerService.getTypesForCaller(v1, v8, 0);
UserManager v19 = UserManager.get(this.mContext);
v18.getUserRestrictions(v20);
new File(v47);
this.mInjector.getCeDatabaseName(v8);
AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v46);
AccountManagerService.syncDeCeAccountsLocked(v36);
AccountManagerService.validateAccountsInternal(v36, 1);
SQLiteDatabase v57 = this.mDeDatabase.getWritableDatabase();
ContentValues v58 = new ContentValues();
v57.update("accounts", v58, "name=? AND type=?", v63);
  - Access Control Level: SYS_OR_SIG

- API Name: copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8136553168296814, Code:
Object v7 = this.mUsers.get(p3);
int var1 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
File v17 = new File(v18);
String v18 = this.mInjector.getCeDatabaseName(p3);
AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v17);
AccountManagerService.syncDeCeAccountsLocked(v7);
AccountManagerService.validateAccountsInternal(v7, 1);
AccountManagerService$5 v53 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v23,p3);
  - Access Control Level: SYS_OR_SIG

- API Name: setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8089853525161743, Code:
int v1 = Binder.getCallingUid();
List v19 = AccountManagerService.getTypesForCaller(v1, v16, 0);
AccountManagerService.syncDeCeAccountsLocked(v24);
SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabase();
v43.beginTransaction();
v43.update("extras", v71, "_id=?", v74);
  - Access Control Level: SYS_OR_SIG

- API Name: setPassword(Landroid/accounts/Account;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.7961691617965698, Code:
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, p2);
Map v27 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v20); Object v28 = v27.remove(p1);
  - Similarity: 0.7581150531768799, Code:
SQLiteDatabase v41 = this.mDeDatabase.getWritableDatabase();
v41.beginTransaction();
Cursor v47 = v44.query("accounts", v45, "name=? AND type=?", v46, 0, 0, 0);
ContentValues v53 = new ContentValues(); v53.put("password", p2);
int v58 = v52.update("ceDb.accounts", v53, "_id=?", v56);
Map v64 = this.authTokenCache; Object v65 = v64.remove(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.7872037887573242, Code:
long v10 = IAccountManager$Stub.clearCallingIdentity();
Object v13 = this.mUsers.get(v4);
AccountManagerService.syncDeCeAccountsLocked(v13);
  - Access Control Level: SYS_OR_SIG

