This is path 1 for the API with depth 2:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		Object v19 = this.mUsers.get(v15);
		if (v19 != 0) {
			boolean v20 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v20 != 0) {
				boolean v21 = this.mLocalUnlockedUsers.get(v15);
				if (v21 == 0) {
					File v29 = new File(v30);
					String v30 = this.mInjector.getCeDatabaseName(v15);
					AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v29);
					AccountManagerService.syncDeCeAccountsLocked(v19);
					if (0 == 0) {
						AccountManagerService.validateAccountsInternal(v19, 1);
						AccountManagerService$UserAccounts v18 = v19;
						AccountManagerService$UserAccounts v17 = v18;
						if (p1 != 0) {
							HashMap v36 = this.previousNameCache;
							Object v37 = v36.get(p1);
							if (v37 != 0) {
								SQLiteDatabase v39 = this.mDeDatabase.getReadableDatabase();
								String v40 = new String(1);
								String v41 = new String(2);
								Cursor v42 = v39.query("accounts", v40, "name=? AND type=?", v41, 0, 0, 0);
								boolean v43 = v42.moveToNext();
								if (v43 == 0) {
									String v44 = v42.getString(0);
									v42.close();
									String v38 = v44;
									AtomicReference v46 = new AtomicReference(v38);
									HashMap v48 = this.previousNameCache;
									Object v49 = v48.put(p1, v46);
									String v35 = v38;
									IAccountManager$Stub.restoreCallingIdentity(v16);
									return v35;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v15);
		AccountManagerService$UserAccounts v17 = v18;
		if (p1 != 0) {
			HashMap v20 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);
			Object v21 = v20.get(p1);
			if (v21 != 0) {
				String v22 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p1);
				AtomicReference v23 = new AtomicReference(v22);
				HashMap v25 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);
				Object v26 = v25.put(p1, v23);
				String v19 = v22;
				IAccountManager$Stub.restoreCallingIdentity(v16);
				return v19;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v17 = p0.getUserAccounts(v15);
		String v18 = p0.readPreviousNameInternal(v17, p1);
		IAccountManager$Stub.restoreCallingIdentity(v16);
		return v18;
	}
}
