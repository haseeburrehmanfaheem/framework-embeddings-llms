The method confirmCredentialsAsUser in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		int v15 = Binder.getCallingPid();
		if (v21 == 0) {
			boolean v19 = 1;
			if (v19 != 0) {
				if (p1 == 0) {
					if (p2 == 0) {
						long v22 = IAccountManager$Stub.clearCallingIdentity();
						Object v25 = this.mUsers.get(p5);
						if (v25 != 0) {
							boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
							if (v26 != 0) {
								boolean v27 = this.mLocalUnlockedUsers.get(p5);
								if (v27 == 0) {
									File v35 = new File(v36);
									String v36 = this.mInjector.getCeDatabaseName(p5);
									AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
									AccountManagerService.syncDeCeAccountsLocked(v25);
									if (0 == 0) {
										AccountManagerService.validateAccountsInternal(v25, 1);
										AccountManagerService$UserAccounts v24 = v25;
										AccountManagerService$UserAccounts v23 = v24;
										AccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
										if (v44 == 0) {
											IAccountAuthenticatorCache v52 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
											AuthenticatorDescription v53 = AuthenticatorDescription.newKey(this.mAccountType);
											int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
											RegisteredServicesCache$ServiceInfo v55 = v52.getServiceInfo(v53, v54);
											if (v55 != 0) {
												int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												boolean v57 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v56);
												if (v57 != 0) {
													if (ComponentInfo.directBootAware != 0) {
														Intent v58 = new Intent();
														Intent v60 = v58.setAction("android.accounts.AccountAuthenticator");
														Intent v61 = v58.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
														if (v62 == 0) {
															IAccountAuthenticatorCache v69 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
															int v70 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
															boolean v71 = v69.getBindInstantServiceAllowed(v70);
															if (v71 == 0) {
																int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																UserHandle v73 = UserHandle.of(v72);
																boolean v74 = AccountManagerService.mContext.bindServiceAsUser(v58, AccountManagerService$Session, 4194305, v73);
																if (v74 != 0) {
																	if (v75 == 0) {
																		boolean v51 = 0;
																		if (v51 != 0) {
																			long v80 = SystemClock.elapsedRealtime();
																			String v81 = AccountManagerService$Session.toDebugString(v80);
																			String v79 = v81;
																			this.mNumErrors = (this.mNumErrors + 1);
																			IAccountManagerResponse v86 = AccountManagerService$Session.getResponseAndClose();
																			if (v86 == 0) {
																				if (v87 == 0) {
																					Class v90 = AccountManagerService$Session.getClass();
																					String v91 = v90.getSimpleName();
																					v86.onError(1, "bind failure");
																					if (v98 == 0) {
																						IAccountManager$Stub.restoreCallingIdentity(v22);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		int v15 = Binder.getCallingPid();
		if (v21 == 0) {
			boolean v19 = 1;
			if (v19 != 0) {
				if (p1 == 0) {
					if (p2 == 0) {
						long v22 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
						AccountManagerService$UserAccounts v23 = v24;
						AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
						if (v28 == 0) {
							boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
							if (v35 != 0) {
								String v39 = AccountManagerService$Session.toDebugString();
								AccountManagerService$Session.onError(1, "bind failure");
								IAccountManager$Stub.restoreCallingIdentity(v22);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		int v15 = Binder.getCallingPid();
		boolean v19 = p0.isCrossUser(v2, p5);
		if (v19 != 0) {
			if (p1 == 0) {
				if (p2 == 0) {
					long v20 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v21 = p0.getUserAccounts(p5);
					AccountManagerService$12 v22 = new AccountManagerService$12(p0,v21,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
					v22.bind();
					IAccountManager$Stub.restoreCallingIdentity(v20);
					return;
				}
			}
		}
	}
}

and the following sink code:
['Bundle v1 = Bundle.setDefusable(p3, 1);\nAccountManagerService$UserAccounts v25 = this.mUsers.get(p5);\nAccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);\nAccountManagerService.syncDeCeAccountsLocked(v25);\nAccountManagerService.validateAccountsInternal(v25, 1);', 'Bundle v1 = Bundle.setDefusable(p3, 1);\nAccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);\nAccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);', 'Bundle v1 = Bundle.setDefusable(p3, 1);\nAccountManagerService$UserAccounts v21 = p0.getUserAccounts(p5);\nAccountManagerService$12 v22 = new AccountManagerService$12(p0,v21,p1,Account.type,p4,1,Account.name,1,1,p2,p3);\nv22.bind();']

The method confirmCredentialsAsUser has the following similar APIs:

- API Name: startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9821452498435974, Code:
Bundle v1 = Bundle.setDefusable(p5, 1);
AccountManagerService$14 v45 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
v28.bind();
  - Access Control Level: SYS_OR_SIG

- API Name: addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9611619710922241, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
String v12 = Arrays.toString(p4);
AccountManagerService$9 v58 = new AccountManagerService$9(AccountManagerService,v54,p1,p2,p5,1,0,0,1,p3,p4,v49,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9483575820922852, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
int v2 = Binder.getCallingUid();
AccountManagerService$UserAccounts v61 = AccountManagerService.getUserAccountsNotChecked(p7);
AccountManagerService$9 v64 = new AccountManagerService$9(AccountManagerService,v60,p1,p2,p5,1,0,0,1,p3,p4,v55,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.882702112197876, Code:
Bundle v2 = Bundle.setDefusable(p3, 1);
boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, v2, v3, 0, p4);
return v21;
  - Similarity: 0.8763436675071716, Code:
Bundle v2 = Bundle.setDefusable(p3, 1);
Object v17 = Objects.requireNonNull(p1, "account cannot be null");
boolean v24 = AccountManagerService.addAccountInternal(v22, p1, p2, v2, v3, 0, p4);
return v24;
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8696823120117188, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v39 = p0.addAccountInternal(v22, p1, p2, v1, v2, p4, p5);
  - Access Control Level: SYS_OR_SIG

