The method peekAuthToken in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(v1, v18, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				boolean v23 = p0.isLocalUnlockedUser(v18);
				if (v23 != 0) {
					long v24 = IAccountManager$Stub.clearCallingIdentity();
					Object v27 = this.mUsers.get(v18);
					if (v27 != 0) {
						boolean v28 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v28 != 0) {
							boolean v29 = this.mLocalUnlockedUsers.get(v18);
							if (v29 == 0) {
								File v37 = new File(v38);
								String v38 = this.mInjector.getCeDatabaseName(v18);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v37);
								AccountManagerService.syncDeCeAccountsLocked(v27);
								if (0 == 0) {
									AccountManagerService.validateAccountsInternal(v27, 1);
									AccountManagerService$UserAccounts v26 = v27;
									AccountManagerService$UserAccounts v25 = v26;
									Map v44 = this.authTokenCache;
									Object v45 = v44.get(p1);
									if (v45 == 0) {
										Map v46 = this.authTokenCache;
										Object v47 = v46.get(p1);
										if (v47 != 0) {
											SQLiteDatabase v49 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											HashMap v50 = new HashMap();
											String v52 = new String(2);
											Cursor v53 = v49.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v52, 0, 0, 0);
											boolean v54 = v53.moveToNext();
											if (v54 == 0) {
												String v55 = v53.getString(0);
												String v56 = v53.getString(1);
												Object v57 = v50.put(v55, v56);
												boolean v58 = v53.moveToNext();
												if (v58 == 0) {
													v53.close();
													Map v48 = v50;
													Map v60 = this.authTokenCache;
													Object v61 = v60.put(p1, v48);
													Object v62 = v47.get(p2);
													String v43 = v62;
													IAccountManager$Stub.restoreCallingIdentity(v24);
													return v43;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
			boolean v21 = v20.contains(Account.type);
			boolean v19 = v21;
			if (v19 == 0) {
				boolean v23 = this.mLocalUnlockedUsers.get(v18);
				boolean v22 = v23;
				if (v22 != 0) {
					long v24 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v26 = AccountManagerService.getUserAccountsNotChecked(v18);
					AccountManagerService$UserAccounts v25 = v26;
					Map v28 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);
					Object v29 = v28.get(p1);
					if (v29 == 0) {
						Map v30 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);
						Object v31 = v30.get(p1);
						if (v31 != 0) {
							Map v32 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p1);
							Map v33 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);
							Object v34 = v33.put(p1, v32);
							Object v35 = v31.get(p2);
							String v27 = v35;
							IAccountManager$Stub.restoreCallingIdentity(v24);
							return v27;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		boolean v19 = p0.isAccountManagedByCaller(Account.type, v1, v18);
		if (v19 == 0) {
			boolean v20 = p0.isLocalUnlockedUser(v18);
			if (v20 != 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v18);
				String v23 = p0.readAuthTokenInternal(v22, p1, p2);
				IAccountManager$Stub.restoreCallingIdentity(v21);
				return v23;
			}
		}
	}
}

and the following sink code:
['Map v44 = this.authTokenCache;\nObject v45 = v44.get(p1);\nSQLiteDatabase v49 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();\nCursor v53 = v49.query(...);\nString v43 = v62;', 'AccountManagerService$UserAccounts v26 = AccountManagerService.getUserAccountsNotChecked(v18);\nMap v28 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);\nObject v29 = v28.get(p1);\nString v27 = v35;', 'AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v18);\nString v23 = p0.readAuthTokenInternal(v22, p1, p2);']

The method peekAuthToken has the following similar APIs:

- API Name: getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9206567406654358, Code:
Map v40 = this.authTokenCache;
Object v41 = v40.get(p2);
Map v42 = this.authTokenCache;
Object v43 = v42.get(p2);
SQLiteDatabase v45 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
HashMap v46 = new HashMap();
  - Access Control Level: SYS_OR_SIG

- API Name: setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9037715196609497, Code:
AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v18);
boolean v22 = p0.saveAuthTokenToDatabase(v21, p1, p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8473609089851379, Code:
AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v2);
Integer v24 = Integer.valueOf(v1);
LinkedHashMap v28 = new LinkedHashMap();
Iterator v30 = v4.iterator();
Object v32 = v30.next();
Object v33 = AccountManagerService$UserAccounts.accountCache.get(v32);
Integer v34 = AccountManagerService.resolveAccountVisibility(v33[0], p1, v22);
Map v38 = AccountManagerService.filterSharedAccounts(v22, v28, v37, p1);
return v25;
  - Access Control Level: SYS_OR_SIG

- API Name: copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8461803197860718, Code:
AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);
AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);
String v12 = p2.toSafeString();
long v20 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);
  - Access Control Level: SYS_OR_SIG

- API Name: updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8430353403091431, Code:
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
  - Access Control Level: SYS_OR_SIG

