The method getAuthToken in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 != 0) {
				if (p3 != 0) {
					int v4 = UserHandle.getCallingUserId();
					long v5 = Binder.clearCallingIdentity();
					Object v8 = this.mUsers.get(v4);
					if (v8 != 0) {
						boolean v9 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v9 != 0) {
							boolean v10 = this.mLocalUnlockedUsers.get(v4);
							if (v10 == 0) {
								File v18 = new File(v19);
								String v19 = this.mInjector.getCeDatabaseName(v4);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v18);
								AccountManagerService.syncDeCeAccountsLocked(v8);
								if (0 == 0) {
									AccountManagerService.validateAccountsInternal(v8, 1);
									AccountManagerService$UserAccounts v7 = v8;
									AccountManagerService$UserAccounts v6 = v7;
									AuthenticatorDescription v24 = AuthenticatorDescription.newKey(Account.type);
									int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v6);
									RegisteredServicesCache$ServiceInfo v26 = this.mAuthenticatorCache.getServiceInfo(v24, v25);
									Binder.restoreCallingIdentity(v5);
									if (v26 == 0) {
										int v28 = Binder.getCallingUid();
										if (1 != 0) {
											String v29 = p6.getString("androidPackageName");
											long v30 = Binder.clearCallingIdentity();
											String v31 = this.mPackageManager.getPackagesForUid(v28);
											Binder.restoreCallingIdentity(v30);
											if (v29 == 0) {
												if (v31 == 0) {
													boolean v33 = ArrayUtils.contains(v31, v29);
													if (v33 == 0) {
														p6.putInt("callerUid", v28);
														int v35 = Binder.getCallingPid();
														p6.putInt("callerPid", v35);
														if (p4 == 0) {
															long v37 = IAccountManager$Stub.clearCallingIdentity();
															byte[] v38 = p0.calculatePackageSignatureDigest(v29);
															if (1 != 0) {
																if (0 == 0) {
																	Map v40 = this.authTokenCache;
																	Object v41 = v40.get(p2);
																	if (v41 == 0) {
																		Map v42 = this.authTokenCache;
																		Object v43 = v42.get(p2);
																		if (v43 != 0) {
																			SQLiteDatabase v45 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
																			HashMap v46 = new HashMap();
																			String v48 = new String(2);
																			Cursor v49 = v45.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v48, 0, 0, 0);
																			boolean v50 = v49.moveToNext();
																			if (v50 == 0) {
																				String v51 = v49.getString(0);
																				String v52 = v49.getString(1);
																				Object v53 = v46.put(v51, v52);
																				boolean v54 = v49.moveToNext();
																				if (v54 == 0) {
																					v49.close();
																					Map v44 = v46;
																					Map v56 = this.authTokenCache;
																					Object v57 = v56.put(p2, v44);
																					Object v58 = v43.get(p3);
																					String v39 = v58;
																					if (v39 == 0) {
																						if (1 == 0) {
																							AccountManagerService$8 v59 = new AccountManagerService$8(p0,v6,p1,Account.type,p5,0,Account.name,0,p6,p2,p3,p4,0,v29,v28,1,v38,v6);
																							if (v62 == 0) {
																								IAccountAuthenticatorCache v70 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																								AuthenticatorDescription v71 = AuthenticatorDescription.newKey(this.mAccountType);
																								int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																								RegisteredServicesCache$ServiceInfo v73 = v70.getServiceInfo(v71, v72);
																								if (v73 != 0) {
																									int v74 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																									boolean v75 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v74);
																									if (v75 != 0) {
																										if (ComponentInfo.directBootAware != 0) {
																											Intent v76 = new Intent();
																											Intent v78 = v76.setAction("android.accounts.AccountAuthenticator");
																											Intent v79 = v76.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
																											if (v80 == 0) {
																												IAccountAuthenticatorCache v87 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																												int v88 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																												boolean v89 = v87.getBindInstantServiceAllowed(v88);
																												if (v89 == 0) {
																													int v90 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																													UserHandle v91 = UserHandle.of(v90);
																													boolean v92 = AccountManagerService.mContext.bindServiceAsUser(v76, AccountManagerService$Session, 4194305, v91);
																													if (v92 != 0) {
																														if (v93 == 0) {
																															boolean v69 = 0;
																															if (v69 != 0) {
																																long v98 = SystemClock.elapsedRealtime();
																																String v99 = AccountManagerService$Session.toDebugString(v98);
																																String v97 = v99;
																																this.mNumErrors = (this.mNumErrors + 1);
																																IAccountManagerResponse v104 = AccountManagerService$Session.getResponseAndClose();
																																if (v104 == 0) {
																																	if (v105 == 0) {
																																		Class v108 = AccountManagerService$Session.getClass();
																																		String v109 = v108.getSimpleName();
																																		v104.onError(1, "bind failure");
																																		if (v116 == 0) {
																																			IAccountManager$Stub.restoreCallingIdentity(v37);
																																			return;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 != 0) {
				if (p3 != 0) {
					int v4 = UserHandle.getCallingUserId();
					long v5 = Binder.clearCallingIdentity();
					AccountManagerService$UserAccounts v7 = AccountManagerService.getUserAccountsNotChecked(v4);
					AccountManagerService$UserAccounts v6 = v7;
					AuthenticatorDescription v8 = AuthenticatorDescription.newKey(Account.type);
					int v9 = this.userId;
					RegisteredServicesCache$ServiceInfo v10 = this.mAuthenticatorCache.getServiceInfo(v8, v9);
					Binder.restoreCallingIdentity(v5);
					if (v10 == 0) {
						int v12 = Binder.getCallingUid();
						if (1 != 0) {
							String v13 = p6.getString("androidPackageName");
							long v14 = Binder.clearCallingIdentity();
							String v15 = this.mPackageManager.getPackagesForUid(v12);
							Binder.restoreCallingIdentity(v14);
							if (v13 == 0) {
								if (v15 == 0) {
									boolean v17 = ArrayUtils.contains(v15, v13);
									if (v17 == 0) {
										p6.putInt("callerUid", v12);
										int v19 = Binder.getCallingPid();
										p6.putInt("callerPid", v19);
										if (p4 == 0) {
											long v21 = IAccountManager$Stub.clearCallingIdentity();
											MessageDigest v23 = MessageDigest.getInstance("SHA-256");
											PackageInfo v24 = this.mPackageManager.getPackageInfo(v13, 64);
											if (0 >= PackageInfo.signatures.length) {
												byte[] v25 = PackageInfo.signatures[0].toByteArray();
												v23.update(v25);
												if ((0 + 1) >= PackageInfo.signatures.length) {
													if (v23 != 0) {
														byte[] v22 = 0;
														if (1 != 0) {
															if (0 == 0) {
																Map v28 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v6);
																Object v29 = v28.get(p2);
																if (v29 == 0) {
																	Map v30 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v6);
																	Object v31 = v30.get(p2);
																	if (v31 != 0) {
																		Map v32 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p2);
																		Map v33 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v6);
																		Object v34 = v33.put(p2, v32);
																		Object v35 = v31.get(p3);
																		String v27 = v35;
																		if (v27 == 0) {
																			if (1 == 0) {
																				AccountManagerService$8 v36 = new AccountManagerService$8(p0,v6,p1,Account.type,p5,0,Account.name,0,p6,p2,p3,p4,0,v13,v12,1,v22,v6);
																				if (v39 == 0) {
																					boolean v46 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																					if (v46 != 0) {
																						String v50 = AccountManagerService$Session.toDebugString();
																						AccountManagerService$Session.onError(1, "bind failure");
																						IAccountManager$Stub.restoreCallingIdentity(v21);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 != 0) {
				if (p3 != 0) {
					int v4 = UserHandle.getCallingUserId();
					long v5 = Binder.clearCallingIdentity();
					AccountManagerService$UserAccounts v6 = p0.getUserAccounts(v4);
					AuthenticatorDescription v7 = AuthenticatorDescription.newKey(Account.type);
					int v8 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v6);
					RegisteredServicesCache$ServiceInfo v9 = this.mAuthenticatorCache.getServiceInfo(v7, v8);
					Binder.restoreCallingIdentity(v5);
					if (v9 == 0) {
						int v11 = Binder.getCallingUid();
						if (1 != 0) {
							if (v12 == 0) {
								String v13 = p6.getString("androidPackageName");
								long v14 = Binder.clearCallingIdentity();
								String v15 = this.mPackageManager.getPackagesForUid(v11);
								Binder.restoreCallingIdentity(v14);
								if (v13 == 0) {
									if (v15 == 0) {
										boolean v17 = ArrayUtils.contains(v15, v13);
										if (v17 == 0) {
											p6.putInt("callerUid", v11);
											int v19 = Binder.getCallingPid();
											p6.putInt("callerPid", v19);
											if (p4 == 0) {
												long v21 = IAccountManager$Stub.clearCallingIdentity();
												byte[] v22 = p0.calculatePackageSignatureDigest(v13);
												if (1 != 0) {
													if (1 == 0) {
														AccountManagerService$8 v23 = new AccountManagerService$8(p0,v6,p1,Account.type,p5,0,Account.name,0,p6,p2,p3,p4,0,v13,v11,1,v22,v6);
														v23.bind();
														IAccountManager$Stub.restoreCallingIdentity(v21);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v4 = UserHandle.getCallingUserId();\nlong v5 = Binder.clearCallingIdentity();\nAccountManagerService$UserAccounts v6 = this.mUsers.get(v4);\nAuthenticatorDescription v8 = AuthenticatorDescription.newKey(Account.type);\nRegisteredServicesCache$ServiceInfo v10 = this.mAuthenticatorCache.getServiceInfo(v8, AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v6));', 'Bundle v1 = Bundle.setDefusable(p6, 1);\np6.putInt("callerUid", Binder.getCallingUid());\nint v19 = Binder.getCallingPid();\np6.putInt("callerPid", v19);', 'Map v40 = this.authTokenCache;\nObject v41 = v40.get(p2);\nMap v42 = this.authTokenCache;\nObject v43 = v42.get(p2);\nSQLiteDatabase v45 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();\nHashMap v46 = new HashMap();', 'AccountManagerService$8 v59 = new AccountManagerService$8(p0,v6,p1,Account.type,p5,0,Account.name,0,p6,p2,p3,p4,0,v29,v28,1,v38,v6);\nv59.bind();']

The method getAuthToken has the following similar APIs:

- API Name: peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9206567406654358, Code:
Map v44 = this.authTokenCache;
Object v45 = v44.get(p1);
SQLiteDatabase v49 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
Cursor v53 = v49.query(...);
String v43 = v62;
  - Access Control Level: SYS_OR_SIG

- API Name: getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8982512354850769, Code:
AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
AccountManagerService$7 v9 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
v9.bind();
  - Access Control Level: SYS_OR_SIG

- API Name: updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8922242522239685, Code:
AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v21);
AccountManagerService$13 v24 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
v24.bind();
  - Access Control Level: SYS_OR_SIG

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8776519298553467, Code:
AccountManagerService$15 v37 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
AccountManagerService$15 v20 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8669000267982483, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
int v2 = Binder.getCallingUid();
boolean v29 = p0.isCrossUser(v2, p7);
  - Access Control Level: SYS_OR_SIG

