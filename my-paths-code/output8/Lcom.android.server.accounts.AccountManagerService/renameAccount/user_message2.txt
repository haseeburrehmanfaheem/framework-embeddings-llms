The method renameAccount in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v20 = AccountManagerService.getTypesForCaller(v1, v17, 0);
						List v19 = v20;
						boolean v21 = v19.contains(Account.type);
						boolean v18 = v21;
						if (v18 == 0) {
							long v22 = IAccountManager$Stub.clearCallingIdentity();
							Object v25 = this.mUsers.get(v17);
							if (v25 != 0) {
								File v26 = new File(v27);
								String v27 = this.mInjector.getPreNDatabaseName(v17);
								File v29 = new File(v30);
								String v30 = this.mInjector.getDeDatabaseName(v17);
								AccountManagerService$UserAccounts v32 = new AccountManagerService$UserAccounts(this.mContext,v17,v26,v29);
								this.mUsers.append(v17, v32);
								AccountManagerService.purgeOldGrants(v32);
								AccountManager.invalidateLocalAccountsDataCaches();
								boolean v37 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v37 != 0) {
									boolean v38 = this.mLocalUnlockedUsers.get(v17);
									if (v38 == 0) {
										if (0 == 0) {
											AccountManagerService.validateAccountsInternal(v25, 1);
											AccountManagerService$UserAccounts v24 = v25;
											AccountManagerService$UserAccounts v23 = v24;
											Account v40 = p0.renameAccountInternal(v23, p2, p3);
											Bundle v41 = new Bundle();
											v41.putString("authAccount", Account.name);
											v41.putString("accountType", Account.type);
											String v45 = v40.getAccessId();
											v41.putString("accountAccessId", v45);
											p1.onResult(v41);
											IAccountManager$Stub.restoreCallingIdentity(v22);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v19 = AccountManagerService.getTypesManagedByCaller(v1, v17);
						boolean v20 = v19.contains(Account.type);
						boolean v18 = v20;
						if (v18 == 0) {
							long v21 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v17);
							AccountManagerService$UserAccounts v22 = v23;
							Account v24 = p0.renameAccountInternal(v22, p2, p3);
							Bundle v25 = new Bundle();
							v25.putString("authAccount", Account.name);
							v25.putString("accountType", Account.type);
							String v29 = v24.getAccessId();
							v25.putString("accountAccessId", v29);
							p1.onResult(v25);
							IAccountManager$Stub.restoreCallingIdentity(v21);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
					if (v18 == 0) {
						long v19 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
						Account v21 = p0.renameAccountInternal(v20, p2, p3);
						Bundle v22 = new Bundle();
						v22.putString("authAccount", Account.name);
						v22.putString("accountType", Account.type);
						String v26 = v21.getAccessId();
						v22.putString("accountAccessId", v26);
						p1.onResult(v22);
						IAccountManager$Stub.restoreCallingIdentity(v19);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['Account v40 = p0.renameAccountInternal(v23, p2, p3);\nBundle v41 = new Bundle();\nv41.putString("authAccount", Account.name);\nv41.putString("accountType", Account.type);\nString v45 = v40.getAccessId();\nv41.putString("accountAccessId", v45);\np1.onResult(v41);', 'AccountManagerService$UserAccounts v32 = new AccountManagerService$UserAccounts(this.mContext,v17,v26,v29);\nthis.mUsers.append(v17, v32);\nAccountManagerService.purgeOldGrants(v32);\nAccountManager.invalidateLocalAccountsDataCaches();']

The method renameAccount has the following similar APIs:

- API Name: registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9253769516944885, Code:
AccountManagerService$UserAccounts v14 = new AccountManagerService$UserAccounts(this.mContext,v3,v8,v11);
this.mUsers.append(v3, v14);
  - Access Control Level: SYS_OR_SIG

- API Name: getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8919779062271118, Code:
AccountManagerService$UserAccounts v19 = new AccountManagerService$UserAccounts(this.mContext,v3,v13,v16);
this.mUsers.append(v3, v19);
Map v28 = this.visibilityCache;
Object v29 = v28.get(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8197142481803894, Code:
AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v21);
AccountManagerService$13 v24 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
v24.bind();
  - Similarity: 0.8178920149803162, Code:
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
  - Similarity: 0.7837159633636475, Code:
Object v25 = this.mUsers.get(v21);
AccountManagerService$13 v41 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
IAccountAuthenticatorCache v52 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
RegisteredServicesCache$ServiceInfo v55 = v52.getServiceInfo(v53, v54);
  - Access Control Level: SYS_OR_SIG

- API Name: getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8186970353126526, Code:
AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
AccountManagerService$7 v9 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
v9.bind();
  - Similarity: 0.8136337995529175, Code:
AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
boolean v20 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
  - Similarity: 0.7682140469551086, Code:
Object v10 = this.mUsers.get(v6);
AccountManagerService$7 v26 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);
  - Access Control Level: SYS_OR_SIG

- API Name: editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.7804215550422668, Code:
boolean v19 = p0.isAccountManagedByCaller(p2, v1, v18);
AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v18);
AccountManagerService$16 v23 = new AccountManagerService$16(p0,v22,p1,p2,p3,1,0,0,p2);
  - Access Control Level: SYS_OR_SIG

