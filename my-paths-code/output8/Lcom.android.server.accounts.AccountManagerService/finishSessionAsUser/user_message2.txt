The method finishSessionAsUser in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		int v13 = UserHandle.getCallingUserId();
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				int v23 = p2.size();
				if (v23 == 0) {
					if (v26 == 0) {
						boolean v24 = 1;
						if (v24 != 0) {
							Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
							if (v29 == 0) {
								boolean v30 = v29.isActiveProfileOwner(v2);
								if (v30 != 0) {
									boolean v31 = v29.isActiveDeviceOwner(v2);
									if (v31 == 0) {
										boolean v28 = 1;
										if (v28 == 0) {
											if (this.mUserManager != 0) {
												UserManager v33 = UserManager.get(this.mContext);
												this.mUserManager = v33;
												UserManager v32 = this.mUserManager;
												UserHandle v34 = new UserHandle(p5);
												Bundle v36 = v32.getUserRestrictions(v34);
												boolean v37 = v36.getBoolean("no_modify_accounts");
												if (v37 == 0) {
													boolean v27 = 0;
													if (v27 != 0) {
														p0.sendErrorResponse(p1, 100, "User is not allowed to add an account!");
														Object v41 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
														Object v40 = v41;
														if (v40 != 0) {
															Intent v43 = new Intent(this.mContext,CantAddAccountActivit.class);
															Intent v45 = v43.putExtra("android.accounts.extra.ERROR_CODE", 100);
															Intent v46 = v43.addFlags(268435456);
															Intent v42 = v43;
															if (v42 != 0) {
																Intent v48 = new Intent(this.mContext,CantAddAccountActivit.class);
																Intent v50 = v48.putExtra("android.accounts.extra.ERROR_CODE", 100);
																Intent v51 = v48.addFlags(268435456);
																Intent v47 = v48;
																long v52 = IAccountManager$Stub.clearCallingIdentity();
																UserHandle v53 = new UserHandle(p5);
																this.mContext.startActivityAsUser(v42, v53);
																IAccountManager$Stub.restoreCallingIdentity(v52);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		int v13 = UserHandle.getCallingUserId();
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				int v23 = p2.size();
				if (v23 == 0) {
					if (v26 == 0) {
						boolean v24 = 1;
						if (v24 != 0) {
							boolean v28 = AccountManagerService.isProfileOwner(v2);
							if (v28 == 0) {
								UserManager v29 = AccountManagerService.getUserManager();
								UserHandle v30 = new UserHandle(p5);
								Bundle v32 = v29.getUserRestrictions(v30);
								boolean v33 = v32.getBoolean("no_modify_accounts");
								if (v33 == 0) {
									boolean v27 = 0;
									if (v27 != 0) {
										int v34 = Binder.getCallingPid();
										if (this.sInstance != 0) {
											CryptoHelper v36 = new CryptoHelper();
											this.sInstance = v36;
											CryptoHelper v35 = this.sInstance;
											Object v39 = Objects.requireNonNull(p2, "Cannot decrypt null bundle.");
											byte[] v40 = p2.getByteArray("iv");
											byte[] v41 = p2.getByteArray("cipher");
											byte[] v42 = p2.getByteArray("mac");
											boolean v43 = CryptoHelper.verifyMac(v41, v40, v42);
											if (v43 != 0) {
												IvParameterSpec v44 = new IvParameterSpec(v40);
												Cipher v46 = Cipher.getInstance("AES/CBC/PKCS5Padding");
												v46.init(2, this.mEncryptionKey, v44);
												byte[] v48 = v46.doFinal(v41);
												Parcel v49 = Parcel.obtain();
												v49.unmarshall(v48, 0, v48.length);
												v49.setDataPosition(0);
												Bundle v52 = new Bundle();
												v52.readFromParcel(v49);
												v49.recycle();
												Bundle v38 = v52;
												if (v56 == 0) {
													p1.onError(8, "failed to decrypt session bundle");
													if (v60 == 0) {
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		int v13 = UserHandle.getCallingUserId();
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				int v23 = p2.size();
				if (v23 == 0) {
					boolean v24 = p0.isCrossUser(v2, p5);
					if (v24 != 0) {
						boolean v25 = p0.canUserModifyAccounts(p5, v2);
						if (v25 != 0) {
							int v26 = Binder.getCallingPid();
							CryptoHelper v27 = CryptoHelper.getInstance();
							Bundle v28 = v27.decryptBundle(p2);
							if (v29 == 0) {
								p0.sendErrorResponse(p1, 8, "failed to decrypt session bundle");
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Bundle v1 = Bundle.setDefusable(p2, 1);\nint v23 = p2.size();\nObject v29 = LocalServices.getService(DevicePolicyManagerInterna.class);\nboolean v30 = v29.isActiveProfileOwner(v2);\nUserHandle v34 = new UserHandle(p5);\nBundle v36 = v32.getUserRestrictions(v34);', 'Bundle v1 = Bundle.setDefusable(p2, 1);\nint v23 = p2.size();\nboolean v28 = AccountManagerService.isProfileOwner(v2);\nUserHandle v30 = new UserHandle(p5);\nBundle v32 = v29.getUserRestrictions(v30);', 'Bundle v1 = Bundle.setDefusable(p2, 1);\nboolean v24 = p0.isCrossUser(v2, p5);\nboolean v25 = p0.canUserModifyAccounts(p5, v2);\nCryptoHelper v27 = CryptoHelper.getInstance();\nBundle v28 = v27.decryptBundle(p2);']

The method finishSessionAsUser has the following similar APIs:

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8679497241973877, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
  - Similarity: 0.8573646545410156, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v25 = this.mUsers.get(p5);
AccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
AccountManagerService.syncDeCeAccountsLocked(v25);
AccountManagerService.validateAccountsInternal(v25, 1);
  - Similarity: 0.8512912392616272, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v21 = p0.getUserAccounts(p5);
AccountManagerService$12 v22 = new AccountManagerService$12(p0,v21,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
v22.bind();
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8556230068206787, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
int v2 = Binder.getCallingUid();
AccountManagerService$UserAccounts v61 = AccountManagerService.getUserAccountsNotChecked(p7);
AccountManagerService$9 v64 = new AccountManagerService$9(AccountManagerService,v60,p1,p2,p5,1,0,0,1,p3,p4,v55,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8523691296577454, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
String v12 = Arrays.toString(p4);
AccountManagerService$9 v58 = new AccountManagerService$9(AccountManagerService,v54,p1,p2,p5,1,0,0,1,p3,p4,v49,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8366286158561707, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v39 = p0.addAccountInternal(v22, p1, p2, v1, v2, p4, p5);
  - Similarity: 0.8351029753684998, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v23 = p0.addAccountInternal(v21, p1, p2, v1, v2, p4, p5);
  - Similarity: 0.8323090076446533, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v20 = p0.addAccountInternal(v19, p1, p2, v1, v2, p4, p5);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8353947401046753, Code:
Bundle v2 = Bundle.setDefusable(p3, 1);
boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, v2, v3, 0, p4);
return v21;
  - Access Control Level: SYS_OR_SIG

