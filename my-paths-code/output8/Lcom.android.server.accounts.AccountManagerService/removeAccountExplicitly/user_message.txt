This is path 1 for the API with depth 2:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		UserHandle v14 = Binder.getCallingUserHandle();
		int v15 = v14.getIdentifier();
		if (p1 != 0) {
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(v1, v15, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					int v21 = UserHandle.getCallingUserId();
					AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v21);
					AccountManagerService$UserAccounts v22 = v23;
					AccountManagerService$UserAccounts v20 = v22;
					long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
					if ((this.mDebugDbInsertionPoint < -1) != 0) {
						this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
						long v26 = this.mDebugDbInsertionPoint;
						if ((v26 < -1) == 0) {
							AccountManagerService$1LogRecordTask v27 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v24,v20,v1,v26);
							boolean v29 = this.mHandler.post(v27);
							long v30 = IAccountManager$Stub.clearCallingIdentity();
							int v32 = this.userId;
							boolean v34 = this.mLocalUnlockedUsers.get(v32);
							boolean v33 = v34;
							if (v33 != 0) {
								String v38 = p1.toSafeString();
								int v41 = this.userId;
								HashSet v47 = new HashSet();
								Map v49 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(v20);
								String v50 = new String(2);
								if (0 >= 2) {
									Map v51 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(v20);
									Object v52 = v51.get(v50[0]);
									if (v52 == 0) {
										Set v53 = v52.keySet();
										boolean v54 = v47.addAll(v53);
										if ((0 + 1) >= 2) {
											HashMap v55 = new HashMap();
											Iterator v57 = v47.iterator();
											boolean v58 = v57.hasNext();
											if (v58 == 0) {
												Object v59 = v57.next();
												Integer v60 = AccountManagerService.resolveAccountVisibility(p1, v59, v20);
												Object v61 = v55.put(v59, v60);
												boolean v62 = v57.hasNext();
												if (v62 == 0) {
													Map v46 = v55;
													Intent v64 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
													Intent v66 = v64.setFlags(16777216);
													int v67 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v20);
													List v68 = this.mPackageManager.queryBroadcastReceiversAsUser(v64, 0, v67);
													ArrayList v69 = new ArrayList();
													if (v68 != 0) {
														Iterator v71 = v68.iterator();
														boolean v72 = v71.hasNext();
														if (v72 == 0) {
															Object v73 = v71.next();
															Integer v74 = AccountManagerService.resolveAccountVisibility(p1, ApplicationInfo.packageName, v20);
															int v75 = v74.intValue();
															if (v75 == 1) {
																if (v75 != 2) {
																	boolean v76 = v69.add(ApplicationInfo.packageName);
																	boolean v77 = v71.hasNext();
																	if (v77 == 0) {
																		List v63 = v69;
																		SQLiteDatabase v79 = this.mDeDatabase.getWritableDatabase();
																		v79.beginTransaction();
																		SQLiteDatabase v82 = this.mDeDatabase.getReadableDatabase();
																		String v83 = new String(1);
																		String v84 = new String(2);
																		Cursor v85 = v82.query("accounts", v83, "name=? AND type=?", v84, 0, 0, 0);
																		boolean v86 = v85.moveToNext();
																		if (v86 == 0) {
																			long v87 = v85.getLong(0);
																			v85.close();
																			long v81 = v87;
																			if ((v81 < 0) < 0) {
																				SQLiteDatabase v90 = this.mDeDatabase.getWritableDatabase();
																				StringBuilder v91 = new StringBuilder();
																				StringBuilder v93 = v91.append("_id=");
																				StringBuilder v94 = v91.append(v81);
																				String v95 = v91.toString();
																				int v96 = v90.delete("accounts", v95, 0);
																				if (v96 <= 0) {
																					boolean v89 = 1;
																					if (v33 == 0) {
																						SQLiteDatabase v98 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
																						String v99 = new String(1);
																						String v100 = new String(2);
																						Cursor v101 = v98.query("ceDb.accounts", v99, "name=? AND type=?", v100, 0, 0, 0);
																						boolean v102 = v101.moveToNext();
																						if (v102 == 0) {
																							long v103 = v101.getLong(0);
																							v101.close();
																							long v97 = v103;
																							if ((v97 < 0) < 0) {
																								SQLiteDatabase v106 = this.mDeDatabase.getWritableDatabase();
																								v106.setTransactionSuccessful();
																								SQLiteDatabase v109 = this.mDeDatabase.getWritableDatabase();
																								v109.endTransaction();
																								if (v89 == 0) {
																									long v111 = Binder.clearCallingIdentity();
																									int v112 = this.userId;
																									UserManager v114 = AccountManagerService.getUserManager();
																									UserInfo v115 = v114.getUserInfo(v112);
																									if (v115 == 0) {
																										boolean v116 = v115.canHaveProfile();
																										if (v116 == 0) {
																											boolean v113 = 1;
																											if (v113 == 0) {
																												Binder.restoreCallingIdentity(v111);
																												if (v89 == 0) {
																													AccountManager.invalidateLocalAccountUserDataCaches();
																													boolean v31 = v89;
																													IAccountManager$Stub.restoreCallingIdentity(v30);
																													return v31;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		UserHandle v14 = Binder.getCallingUserHandle();
		int v15 = v14.getIdentifier();
		if (p1 != 0) {
			if (Account.type != 0) {
				List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
				boolean v18 = v17.contains(Account.type);
				boolean v16 = v18;
				if (v16 == 0) {
					int v20 = UserHandle.getCallingUserId();
					AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccounts(v20);
					AccountManagerService$UserAccounts v19 = v21;
					SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabase();
					String v24 = new String(1);
					String v25 = new String(2);
					Cursor v26 = v23.query("accounts", v24, "name=? AND type=?", v25, 0, 0, 0);
					boolean v27 = v26.moveToNext();
					if (v27 == 0) {
						long v28 = v26.getLong(0);
						v26.close();
						long v22 = v28;
						long v31 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
						if ((v31 < -1) == 0) {
							AccountManagerService$1LogRecordTask v32 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v22,v19,v1,v31);
							boolean v34 = this.mHandler.post(v32);
							long v35 = IAccountManager$Stub.clearCallingIdentity();
							int v37 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v19);
							boolean v38 = AccountManagerService.isLocalUnlockedUser(v37);
							if (v38 != 0) {
								String v42 = p1.toSafeString();
								int v45 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v19);
								Map v50 = AccountManagerService.getRequestingPackages(p1, v19);
								List v51 = AccountManagerService.getAccountRemovedReceivers(p1, v19);
								AccountManagerService$UserAccounts.accountsDb.beginTransaction();
								long v53 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
								if ((v53 < 0) < 0) {
									boolean v54 = AccountManagerService$UserAccounts.accountsDb.deleteDeAccount(v53);
									if (v38 == 0) {
										long v55 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
										if ((v55 < 0) < 0) {
											AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
											AccountManagerService$UserAccounts.accountsDb.endTransaction();
											if (v54 == 0) {
												long v58 = Binder.clearCallingIdentity();
												int v59 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v19);
												boolean v60 = AccountManagerService.canHaveProfile(v59);
												if (v60 == 0) {
													Binder.restoreCallingIdentity(v58);
													if (v54 == 0) {
														AccountManager.invalidateLocalAccountUserDataCaches();
														boolean v36 = v54;
														IAccountManager$Stub.restoreCallingIdentity(v35);
														return v36;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		UserHandle v14 = Binder.getCallingUserHandle();
		int v15 = v14.getIdentifier();
		if (p1 != 0) {
			boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
			if (v16 == 0) {
				AccountManagerService$UserAccounts v17 = p0.getUserAccountsForCaller();
				long v18 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
				p0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, "accounts", v18, v17, v1);
				long v20 = IAccountManager$Stub.clearCallingIdentity();
				boolean v21 = p0.removeAccountInternal(v17, p1, v1);
				IAccountManager$Stub.restoreCallingIdentity(v20);
				return v21;
			}
		}
	}
}
