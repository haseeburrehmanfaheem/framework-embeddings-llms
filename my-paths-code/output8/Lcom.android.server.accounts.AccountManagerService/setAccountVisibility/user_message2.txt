The method setAccountVisibility in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(v4);
				if (v13 != 0) {
					boolean v14 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v14 != 0) {
						boolean v15 = this.mLocalUnlockedUsers.get(v4);
						if (v15 == 0) {
							File v23 = new File(v24);
							String v24 = this.mInjector.getCeDatabaseName(v4);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v23);
							AccountManagerService.syncDeCeAccountsLocked(v13);
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v13, 1);
								AccountManagerService$UserAccounts v12 = v13;
								AccountManagerService$UserAccounts v11 = v12;
								if (1 == 0) {
									boolean v31 = "android:accounts:key_legacy_visible".equals(p2);
									if (v31 != 0) {
										boolean v32 = "android:accounts:key_legacy_not_visible".equals(p2);
										if (v32 == 0) {
											boolean v30 = 0;
											if (v30 == 0) {
												HashSet v34 = new HashSet();
												Map v36 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(v11);
												String v37 = new String(2);
												if (0 >= 2) {
													Map v38 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(v11);
													Object v39 = v38.get(v37[0]);
													if (v39 == 0) {
														Set v40 = v39.keySet();
														boolean v41 = v34.addAll(v40);
														if ((0 + 1) >= 2) {
															HashMap v42 = new HashMap();
															Iterator v44 = v34.iterator();
															boolean v45 = v44.hasNext();
															if (v45 == 0) {
																Object v46 = v44.next();
																Integer v47 = AccountManagerService.resolveAccountVisibility(p1, v46, v11);
																Object v48 = v42.put(v46, v47);
																boolean v49 = v44.hasNext();
																if (v49 == 0) {
																	Map v33 = v42;
																	Intent v51 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																	Intent v53 = v51.setFlags(16777216);
																	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v11);
																	List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
																	ArrayList v56 = new ArrayList();
																	if (v55 != 0) {
																		Iterator v58 = v55.iterator();
																		boolean v59 = v58.hasNext();
																		if (v59 == 0) {
																			Object v60 = v58.next();
																			Integer v61 = AccountManagerService.resolveAccountVisibility(p1, ApplicationInfo.packageName, v11);
																			int v62 = v61.intValue();
																			if (v62 == 1) {
																				if (v62 != 2) {
																					boolean v63 = v56.add(ApplicationInfo.packageName);
																					boolean v64 = v58.hasNext();
																					if (v64 == 0) {
																						List v50 = v56;
																						long v66 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
																						if ((v66 < 0) >= 0) {
																							StrictMode$ThreadPolicy v67 = StrictMode.allowThreadDiskWrites();
																							boolean v68 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v66, p2, p3);
																							if (v68 != 0) {
																								StrictMode.setThreadPolicy(v67);
																								Map v70 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, v11);
																								Integer v71 = Integer.valueOf(p3);
																								Object v72 = v70.put(p2, v71);
																								AccountManager.invalidateLocalAccountsDataCaches();
																								boolean v65 = 1;
																								if (v65 != 0) {
																									if (1 == 0) {
																										Set v74 = v33.entrySet();
																										Iterator v75 = v74.iterator();
																										boolean v76 = v75.hasNext();
																										if (v76 == 0) {
																											Object v77 = v75.next();
																											Object v78 = v77.getValue();
																											int v79 = v78.intValue();
																											Object v81 = Objects.requireNonNull(p2, "packageName cannot be null");
																											long v82 = IAccountManager$Stub.clearCallingIdentity();
																											int v83 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v11);
																											int v84 = this.mPackageManager.getPackageUidAsUser(p2, v83);
																											IAccountManager$Stub.restoreCallingIdentity(v82);
																											String v89 = caughtException.getMessage();
																											Integer v93 = Integer.valueOf(3);
																											Integer v80 = v93;
																											int v94 = v80.intValue();
																											if (v79 == 1) {
																												if (v79 != 2) {
																													boolean v95 = 1;
																													if (v94 == 1) {
																														if (v94 != 2) {
																															boolean v96 = 1;
																															if (v95 == v96) {
																																Object v97 = v77.getKey();
																																Intent v99 = new Intent("android.accounts.action.VISIBLE_ACCOUNTS_CHANGED");
																																Intent v101 = v99.setPackage(v97);
																																Intent v102 = v99.setFlags(1073741824);
																																UserHandle v103 = new UserHandle(v104);
																																int v104 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v11);
																																this.mContext.sendBroadcastAsUser(v99, v103);
																																boolean v107 = v75.hasNext();
																																if (v107 == 0) {
																																	Iterator v108 = v50.iterator();
																																	boolean v109 = v108.hasNext();
																																	if (v109 == 0) {
																																		Object v110 = v108.next();
																																		int v111 = this.userId;
																																		Intent v113 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																																		Intent v115 = v113.setFlags(16777216);
																																		Intent v116 = v113.setPackage(v110);
																																		Intent v117 = v113.putExtra("authAccount", Account.name);
																																		Intent v118 = v113.putExtra("accountType", Account.type);
																																		UserHandle v119 = new UserHandle(v111);
																																		this.mContext.sendBroadcastAsUser(v113, v119);
																																		boolean v122 = v108.hasNext();
																																		if (v122 == 0) {
																																			int v123 = this.userId;
																																			String v128 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																																			UserHandle v132 = new UserHandle(v123);
																																			this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v132);
																																			boolean v29 = 1;
																																			IAccountManager$Stub.restoreCallingIdentity(v10);
																																			return v29;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v6 = AccountManagerService.getTypesManagedByCaller(v3, v4);
		boolean v7 = v6.contains(Account.type);
		boolean v5 = v7;
		if (v5 != 0) {
			long v9 = Binder.clearCallingIdentity();
			String v10 = this.mPackageManager.getPackagesForUid(v3);
			if (v10 == 0) {
				if (0 >= v10.length) {
					PackageInfo v11 = this.mPackageManager.getPackageInfo(v10[0], 0);
					if (v11 == 0) {
						if ((ApplicationInfo.flags & 1) == 0) {
							if ((0 + 1) >= v10.length) {
								PackageInfo v12 = this.mPackageManager.getPackageInfo(v10[(0 + 1)], 0);
								if (v12 == 0) {
									if ((ApplicationInfo.flags & 1) == 0) {
										Binder.restoreCallingIdentity(v9);
										boolean v8 = 1;
										if (v8 == 0) {
											long v14 = IAccountManager$Stub.clearCallingIdentity();
											AccountManagerService$UserAccounts v16 = AccountManagerService.getUserAccountsNotChecked(v4);
											AccountManagerService$UserAccounts v15 = v16;
											if (1 == 0) {
												boolean v18 = AccountManagerService.isSpecialPackageKey(p2);
												if (v18 == 0) {
													Map v19 = AccountManagerService.getRequestingPackages(p1, v15);
													List v20 = AccountManagerService.getAccountRemovedReceivers(p1, v15);
													boolean v21 = AccountManagerService.updateAccountVisibilityLocked(p1, p2, p3, v15);
													if (v21 != 0) {
														if (1 == 0) {
															Set v22 = v19.entrySet();
															Iterator v23 = v22.iterator();
															boolean v24 = v23.hasNext();
															if (v24 == 0) {
																Object v25 = v23.next();
																Object v26 = v25.getValue();
																int v27 = v26.intValue();
																Integer v28 = AccountManagerService.resolveAccountVisibility(p1, p2, v15);
																int v29 = v28.intValue();
																boolean v30 = AccountManagerService.isVisible(v27);
																boolean v31 = AccountManagerService.isVisible(v29);
																if (v30 == v31) {
																	Object v32 = v25.getKey();
																	AccountManagerService.notifyPackage(v32, v15);
																	boolean v34 = v23.hasNext();
																	if (v34 == 0) {
																		Iterator v35 = v20.iterator();
																		boolean v36 = v35.hasNext();
																		if (v36 == 0) {
																			Object v37 = v35.next();
																			int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v15);
																			AccountManagerService.sendAccountRemovedBroadcast(p1, v37, v38);
																			boolean v40 = v35.hasNext();
																			if (v40 == 0) {
																				int v41 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v15);
																				AccountManagerService.sendAccountsChangedBroadcast(v41);
																				boolean v17 = 1;
																				IAccountManager$Stub.restoreCallingIdentity(v14);
																				return v17;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	if (v5 != 0) {
		boolean v6 = p0.isSystemUid(v3);
		if (v6 == 0) {
			long v7 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
			boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
			IAccountManager$Stub.restoreCallingIdentity(v7);
			return v9;
		}
	}
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p1, "account cannot be null");\nObject v2 = Objects.requireNonNull(p2, "packageName cannot be null");\nint v3 = Binder.getCallingUid();\nboolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);', 'List v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);\nList v6 = v7;\nboolean v8 = v6.contains(Account.type);\nboolean v5 = v8;', 'long v10 = IAccountManager$Stub.clearCallingIdentity();\nObject v13 = this.mUsers.get(v4);\nboolean v14 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();', 'HashSet v34 = new HashSet();\nMap v36 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(v11);\nString v37 = new String(2);\nObject v39 = v38.get(v37[0]);', 'boolean v21 = AccountManagerService.updateAccountVisibilityLocked(p1, p2, p3, v15);\nMap v70 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, v11);\nInteger v71 = Integer.valueOf(p3);\nObject v72 = v70.put(p2, v71);', 'boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);']

The method setAccountVisibility has the following similar APIs:

- API Name: getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9741881489753723, Code:
List v6 = AccountManagerService.getTypesForCaller(v2, v3, 0);
boolean v7 = v5.contains(Account.type);
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9247927069664001, Code:
Map v54 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, v11);
Object v55 = v54.get(p2);
int v56 = v55.intValue();
  - Access Control Level: SYS_OR_SIG

- API Name: onAccountAccessed(Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9216147065162659, Code:
List v10 = AccountManagerService.getTypesForCaller(v7, v3, 1);
Iterator v18 = v9.iterator();
Account v21 = AccountManagerService.getAccountsFromCache(v13, v20, v7, v5, 0);
ArrayList v16 = new ArrayList();
boolean v23 = v16.addAll(v22);
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9144498705863953, Code:
List v22 = AccountManagerService.getTypesForCaller(v1, v20, 1);
boolean v23 = v21.contains(p2);
Account v35 = new Account((0 + v33.length));
Collection v36 = AccountManagerService$UserAccounts.accountCache.values();
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8915383219718933, Code:
boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
return v1;
  - Access Control Level: SYS_OR_SIG

