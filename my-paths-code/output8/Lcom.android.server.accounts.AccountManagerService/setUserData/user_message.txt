This is path 1 for the API with depth 2:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p1 == 0) {
				int v16 = UserHandle.getCallingUserId();
				if (Account.type != 0) {
					List v19 = AccountManagerService.getTypesForCaller(v1, v16, 0);
					List v18 = v19;
					boolean v20 = v18.contains(Account.type);
					boolean v17 = v20;
					if (v17 == 0) {
						long v21 = IAccountManager$Stub.clearCallingIdentity();
						Object v24 = this.mUsers.get(v16);
						if (v24 != 0) {
							boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
							if (v25 != 0) {
								boolean v26 = this.mLocalUnlockedUsers.get(v16);
								if (v26 == 0) {
									File v34 = new File(v35);
									String v35 = this.mInjector.getCeDatabaseName(v16);
									AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
									AccountManagerService.syncDeCeAccountsLocked(v24);
									if (0 == 0) {
										AccountManagerService.validateAccountsInternal(v24, 1);
										AccountManagerService$UserAccounts v23 = v24;
										AccountManagerService$UserAccounts v22 = v23;
										boolean v40 = p0.accountExistsCache(v22, p1);
										if (v40 != 0) {
											SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabase();
											v43.beginTransaction();
											SQLiteDatabase v46 = this.mDeDatabase.getReadableDatabase();
											String v47 = new String(1);
											String v48 = new String(2);
											Cursor v49 = v46.query("accounts", v47, "name=? AND type=?", v48, 0, 0, 0);
											boolean v50 = v49.moveToNext();
											if (v50 == 0) {
												long v51 = v49.getLong(0);
												v49.close();
												long v45 = v51;
												if ((v45 < 0) >= 0) {
													SQLiteDatabase v54 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
													String v55 = new String(1);
													StringBuilder v56 = new StringBuilder();
													StringBuilder v58 = v56.append("accounts_id=");
													StringBuilder v59 = v56.append(v45);
													StringBuilder v60 = v56.append(" AND ");
													StringBuilder v61 = v56.append("key");
													StringBuilder v62 = v56.append("=?");
													String v63 = v56.toString();
													String v64 = new String(1);
													Cursor v65 = v54.query("ceDb.extras", v55, v63, v64, 0, 0, 0);
													boolean v66 = v65.moveToNext();
													if (v66 == 0) {
														long v67 = v65.getLong(0);
														v65.close();
														long v53 = v67;
														if ((v53 < 0) >= 0) {
															SQLiteDatabase v70 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
															ContentValues v71 = new ContentValues();
															v71.put("value", p3);
															String v74 = new String(1);
															String v75 = String.valueOf(v53);
															int v76 = v70.update("extras", v71, "_id=?", v74);
															if (v76 != 1) {
																boolean v69 = 1;
																if (v69 != 0) {
																	SQLiteDatabase v78 = this.mDeDatabase.getWritableDatabase();
																	v78.setTransactionSuccessful();
																	SQLiteDatabase v81 = this.mDeDatabase.getWritableDatabase();
																	v81.endTransaction();
																	AccountManagerService.writeUserDataIntoCacheLocked(v22, p1, p2, p3);
																	AccountManager.invalidateLocalAccountUserDataCaches();
																	IAccountManager$Stub.restoreCallingIdentity(v21);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p1 == 0) {
				int v16 = UserHandle.getCallingUserId();
				if (Account.type != 0) {
					List v18 = AccountManagerService.getTypesManagedByCaller(v1, v16);
					boolean v19 = v18.contains(Account.type);
					boolean v17 = v19;
					if (v17 == 0) {
						long v20 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v22 = AccountManagerService.getUserAccountsNotChecked(v16);
						AccountManagerService$UserAccounts v21 = v22;
						boolean v24 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
						if (v24 == 0) {
							Object v25 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
							if (0 >= v25.length) {
								boolean v26 = Account.name.equals(Account.name);
								if (v26 == 0) {
									if ((0 + 1) >= v25.length) {
										boolean v27 = Account.name.equals(Account.name);
										if (v27 == 0) {
											boolean v23 = 1;
											if (v23 != 0) {
												AccountManagerService$UserAccounts.accountsDb.beginTransaction();
												long v30 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
												if ((v30 < 0) >= 0) {
													long v31 = AccountManagerService$UserAccounts.accountsDb.findExtrasIdByAccountId(v30, p2);
													if ((v31 < 0) >= 0) {
														long v32 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v30, p2, p3);
														if ((v32 < 0) >= 0) {
															AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
															AccountManagerService$UserAccounts.accountsDb.endTransaction();
															AccountManagerService.writeUserDataIntoCacheLocked(v21, p1, p2, p3);
															AccountManager.invalidateLocalAccountUserDataCaches();
															IAccountManager$Stub.restoreCallingIdentity(v20);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p1 == 0) {
				int v16 = UserHandle.getCallingUserId();
				boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);
				if (v17 == 0) {
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);
					boolean v20 = p0.accountExistsCache(v19, p1);
					if (v20 != 0) {
						p0.setUserdataInternal(v19, p1, p2, p3);
						IAccountManager$Stub.restoreCallingIdentity(v18);
						return;
					}
				}
			}
		}
	}
}
