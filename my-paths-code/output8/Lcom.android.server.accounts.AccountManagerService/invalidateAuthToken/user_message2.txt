The method invalidateAuthToken in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		int v16 = UserHandle.getCallingUserId();
		long v17 = IAccountManager$Stub.clearCallingIdentity();
		Object v20 = this.mUsers.get(v16);
		if (v20 != 0) {
			boolean v21 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v21 != 0) {
				boolean v22 = this.mLocalUnlockedUsers.get(v16);
				if (v22 == 0) {
					File v30 = new File(v31);
					String v31 = this.mInjector.getCeDatabaseName(v16);
					AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v30);
					AccountManagerService.syncDeCeAccountsLocked(v20);
					if (0 == 0) {
						AccountManagerService.validateAccountsInternal(v20, 1);
						AccountManagerService$UserAccounts v19 = v20;
						AccountManagerService$UserAccounts v18 = v19;
						AccountManagerService$UserAccounts.accountsDb.beginTransaction();
						ArrayList v38 = new ArrayList();
						SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
						String v42 = new String(2);
						Cursor v43 = v41.rawQuery("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", v42);
						Cursor v40 = v43;
						boolean v44 = v40.moveToNext();
						if (v44 == 0) {
							String v45 = v40.getString(0);
							String v46 = v40.getString(1);
							String v47 = v40.getString(2);
							SQLiteDatabase v49 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							String v50 = new String(1);
							int v51 = v49.delete("ceDb.authtokens", "_id= ?", v50);
							if (v51 <= 0) {
								boolean v48 = 1;
								Account v52 = new Account(v46,p1);
								Pair v54 = Pair.create(v52, v47);
								boolean v55 = v38.add(v54);
								boolean v56 = v40.moveToNext();
								if (v56 == 0) {
									v40.close();
									List v37 = v38;
									AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
									AccountManagerService$UserAccounts.accountsDb.endTransaction();
									Iterator v60 = v37.iterator();
									boolean v61 = v60.hasNext();
									if (v61 == 0) {
										Object v62 = v60.next();
										Map v64 = this.authTokenCache;
										Object v65 = v64.get(Pair.first);
										if (v65 != 0) {
											SQLiteDatabase v67 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											HashMap v68 = new HashMap();
											String v70 = new String(2);
											Cursor v71 = v67.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v70, 0, 0, 0);
											boolean v72 = v71.moveToNext();
											if (v72 == 0) {
												String v73 = v71.getString(0);
												String v74 = v71.getString(1);
												Object v75 = v68.put(v73, v74);
												boolean v76 = v71.moveToNext();
												if (v76 == 0) {
													v71.close();
													Map v66 = v68;
													Map v78 = this.authTokenCache;
													Object v79 = v78.put(Pair.first, v66);
													if (0 != 0) {
														Object v80 = v65.remove(Pair.second);
														boolean v81 = v60.hasNext();
														if (v81 == 0) {
															TokenCache v82 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
															Pair v85 = new Pair(p1,p2);
															Object v87 = this.mTokenEvictors.get(v85);
															if (v87 == 0) {
																v87.evict();
																IAccountManager$Stub.restoreCallingIdentity(v17);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		int v16 = UserHandle.getCallingUserId();
		long v17 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v16);
		AccountManagerService$UserAccounts v18 = v19;
		SQLiteDatabase v21 = this.mDeDatabase.getWritableDatabase();
		v21.beginTransaction();
		ArrayList v24 = new ArrayList();
		Cursor v26 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p1, p2);
		boolean v27 = v26.moveToNext();
		if (v27 == 0) {
			String v28 = v26.getString(0);
			String v29 = v26.getString(1);
			String v30 = v26.getString(2);
			boolean v31 = AccountManagerService$UserAccounts.accountsDb.deleteAuthToken(v28);
			Account v32 = new Account(v29,p1);
			Pair v34 = Pair.create(v32, v30);
			boolean v35 = v24.add(v34);
			boolean v36 = v26.moveToNext();
			if (v36 == 0) {
				v26.close();
				List v23 = v24;
				SQLiteDatabase v39 = this.mDeDatabase.getWritableDatabase();
				v39.setTransactionSuccessful();
				SQLiteDatabase v42 = this.mDeDatabase.getWritableDatabase();
				v42.endTransaction();
				Iterator v44 = v23.iterator();
				boolean v45 = v44.hasNext();
				if (v45 == 0) {
					Object v46 = v44.next();
					Map v48 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v18);
					Object v49 = v48.get(Pair.first);
					if (v49 != 0) {
						Map v50 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(Pair.first);
						Map v51 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v18);
						Object v52 = v51.put(Pair.first, v50);
						if (0 != 0) {
							Object v53 = v49.remove(Pair.second);
							boolean v54 = v44.hasNext();
							if (v54 == 0) {
								TokenCache v55 = this.accountTokenCaches;
								this.mCachedTokens.evict(p1, p2);
								IAccountManager$Stub.restoreCallingIdentity(v17);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		int v16 = UserHandle.getCallingUserId();
		long v17 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v16);
		AccountManagerService$UserAccounts.accountsDb.beginTransaction();
		List v20 = p0.invalidateAuthTokenLocked(v18, p1, p2);
		AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
		AccountManagerService$UserAccounts.accountsDb.endTransaction();
		Iterator v23 = v20.iterator();
		boolean v24 = v23.hasNext();
		if (v24 == 0) {
			Object v25 = v23.next();
			p0.writeAuthTokenIntoCacheLocked(v18, Pair.first, Pair.second, 0);
			boolean v27 = v23.hasNext();
			if (v27 == 0) {
				TokenCache v28 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
				v28.remove(p1, p2);
				IAccountManager$Stub.restoreCallingIdentity(v17);
				return;
			}
		}
	}
}

and the following sink code:
['Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");\nObject v3 = Objects.requireNonNull(p2, "authToken cannot be null");\nCursor v43 = v41.rawQuery("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", v42);\nint v51 = v49.delete("ceDb.authtokens", "_id= ?", v50);', 'AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v16);\nCursor v26 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p1, p2);\nboolean v31 = AccountManagerService$UserAccounts.accountsDb.deleteAuthToken(v28);', 'List v20 = p0.invalidateAuthTokenLocked(v18, p1, p2);\np0.writeAuthTokenIntoCacheLocked(v18, Pair.first, Pair.second, 0);\nv28.remove(p1, p2);']

The method invalidateAuthToken has the following similar APIs:

- API Name: setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8377278447151184, Code:
AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v18);
boolean v22 = p0.saveAuthTokenToDatabase(v21, p1, p2, p3);
  - Similarity: 0.7913851737976074, Code:
AccountManagerService$NotificationId v26 = AccountManagerService.getSigninRequiredNotificationId(v23, p1);
int v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v23);
UserHandle v28 = UserHandle.of(v27);
AccountManagerService.cancelNotification(v26, v28);
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v31 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
boolean v32 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v31, p2);
long v33 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v31, p2, p3);
  - Similarity: 0.7704334259033203, Code:
Object v16 = Objects.requireNonNull(p1, "account cannot be null");
Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v18);
if (p1 == 0) { if (p2 != 0) { ... } }
SQLiteDatabase v63 = this.mDeDatabase.getWritableDatabase();
v63.beginTransaction();
ContentValues v80 = new ContentValues();
Long v82 = Long.valueOf(v65);
v80.put("accounts_id", v82);
v80.put("type", p2);
v80.put("authtoken", p3);
long v86 = v79.insert("ceDb.authtokens", "authtoken", v80);
  - Access Control Level: SYS_OR_SIG

- API Name: setPassword(Landroid/accounts/Account;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8094499707221985, Code:
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, p2);
Map v27 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v20); Object v28 = v27.remove(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.797943115234375, Code:
AccountManagerService$UserAccounts v26 = AccountManagerService.getUserAccountsNotChecked(v18);
Map v28 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);
Object v29 = v28.get(p1);
String v27 = v35;
  - Similarity: 0.7954791784286499, Code:
AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v18);
String v23 = p0.readAuthTokenInternal(v22, p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.7718091011047363, Code:
AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
boolean v20 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
  - Access Control Level: SYS_OR_SIG

- API Name: updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.7629901170730591, Code:
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
  - Access Control Level: SYS_OR_SIG

