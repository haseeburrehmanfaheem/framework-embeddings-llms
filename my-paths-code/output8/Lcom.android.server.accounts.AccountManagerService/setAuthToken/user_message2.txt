The method setAuthToken in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(v1, v18, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				long v23 = IAccountManager$Stub.clearCallingIdentity();
				Object v26 = this.mUsers.get(v18);
				if (v26 != 0) {
					boolean v27 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v27 != 0) {
						boolean v28 = this.mLocalUnlockedUsers.get(v18);
						if (v28 == 0) {
							File v36 = new File(v37);
							String v37 = this.mInjector.getCeDatabaseName(v18);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v36);
							AccountManagerService.syncDeCeAccountsLocked(v26);
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v26, 1);
								AccountManagerService$UserAccounts v25 = v26;
								AccountManagerService$UserAccounts v24 = v25;
								if (p1 == 0) {
									if (p2 != 0) {
										HashMap v44 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(v24);
										HashMap v45 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(v24);
										Object v46 = v45.get(p1);
										if (v46 != 0) {
											StringBuilder v47 = new StringBuilder();
											StringBuilder v49 = v47.append("AccountManagerService:37:");
											int v50 = p1.hashCode();
											StringBuilder v51 = v47.append(v50);
											String v52 = v47.toString();
											AccountManagerService$NotificationId v53 = new AccountManagerService$NotificationId(v52,37);
											HashMap v55 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(v24);
											Object v56 = v55.put(p1, v53);
											AccountManagerService$NotificationId v43 = v46;
											int v57 = this.userId;
											UserHandle v58 = UserHandle.of(v57);
											String v60 = this.mContext.getPackageName();
											AccountManagerService.cancelNotification(v43, v60, v58);
											SQLiteDatabase v63 = this.mDeDatabase.getWritableDatabase();
											v63.beginTransaction();
											SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabase();
											String v67 = new String(1);
											String v68 = new String(2);
											Cursor v69 = v66.query("accounts", v67, "name=? AND type=?", v68, 0, 0, 0);
											boolean v70 = v69.moveToNext();
											if (v70 == 0) {
												long v71 = v69.getLong(0);
												v69.close();
												long v65 = v71;
												if ((v65 < 0) >= 0) {
													SQLiteDatabase v74 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
													String v75 = new String(2);
													String v76 = String.valueOf(v65);
													int v77 = v74.delete("ceDb.authtokens", "accounts_id=? AND type=?", v75);
													if (v77 <= 0) {
														boolean v73 = 0;
														SQLiteDatabase v79 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
														ContentValues v80 = new ContentValues();
														Long v82 = Long.valueOf(v65);
														v80.put("accounts_id", v82);
														v80.put("type", p2);
														v80.put("authtoken", p3);
														long v86 = v79.insert("ceDb.authtokens", "authtoken", v80);
														long v78 = v86;
														if ((v78 < 0) < 0) {
															SQLiteDatabase v88 = this.mDeDatabase.getWritableDatabase();
															v88.setTransactionSuccessful();
															SQLiteDatabase v91 = this.mDeDatabase.getWritableDatabase();
															v91.endTransaction();
															AccountManagerService.writeAuthTokenIntoCacheLocked(v24, p1, p2, p3);
															boolean v42 = 1;
															IAccountManager$Stub.restoreCallingIdentity(v23);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
			boolean v21 = v20.contains(Account.type);
			boolean v19 = v21;
			if (v19 == 0) {
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v18);
				AccountManagerService$UserAccounts v23 = v24;
				if (p1 == 0) {
					if (p2 != 0) {
						AccountManagerService$NotificationId v26 = AccountManagerService.getSigninRequiredNotificationId(v23, p1);
						int v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v23);
						UserHandle v28 = UserHandle.of(v27);
						AccountManagerService.cancelNotification(v26, v28);
						AccountManagerService$UserAccounts.accountsDb.beginTransaction();
						long v31 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
						if ((v31 < 0) >= 0) {
							boolean v32 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v31, p2);
							long v33 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v31, p2, p3);
							if ((v33 < 0) < 0) {
								AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
								AccountManagerService$UserAccounts.accountsDb.endTransaction();
								AccountManagerService.writeAuthTokenIntoCacheLocked(v23, p1, p2, p3);
								boolean v25 = 1;
								IAccountManager$Stub.restoreCallingIdentity(v22);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		boolean v19 = p0.isAccountManagedByCaller(Account.type, v1, v18);
		if (v19 == 0) {
			long v20 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v18);
			boolean v22 = p0.saveAuthTokenToDatabase(v21, p1, p2, p3);
			IAccountManager$Stub.restoreCallingIdentity(v20);
			return;
		}
	}
}

and the following sink code:
['Object v16 = Objects.requireNonNull(p1, "account cannot be null");\nObject v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");\nAccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v18);\nif (p1 == 0) { if (p2 != 0) { ... } }\nSQLiteDatabase v63 = this.mDeDatabase.getWritableDatabase();\nv63.beginTransaction();\nContentValues v80 = new ContentValues();\nLong v82 = Long.valueOf(v65);\nv80.put("accounts_id", v82);\nv80.put("type", p2);\nv80.put("authtoken", p3);\nlong v86 = v79.insert("ceDb.authtokens", "authtoken", v80);', 'AccountManagerService$NotificationId v26 = AccountManagerService.getSigninRequiredNotificationId(v23, p1);\nint v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v23);\nUserHandle v28 = UserHandle.of(v27);\nAccountManagerService.cancelNotification(v26, v28);\nAccountManagerService$UserAccounts.accountsDb.beginTransaction();\nlong v31 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);\nboolean v32 = AccountManagerService$UserAccounts.accountsDb.deleteAuthtokensByAccountIdAndType(v31, p2);\nlong v33 = AccountManagerService$UserAccounts.accountsDb.insertAuthToken(v31, p2, p3);', 'AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v18);\nboolean v22 = p0.saveAuthTokenToDatabase(v21, p1, p2, p3);']

The method setAuthToken has the following similar APIs:

- API Name: peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9037715196609497, Code:
AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v18);
String v23 = p0.readAuthTokenInternal(v22, p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8377278447151184, Code:
AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v16);
Cursor v26 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p1, p2);
boolean v31 = AccountManagerService$UserAccounts.accountsDb.deleteAuthToken(v28);
  - Access Control Level: SYS_OR_SIG

- API Name: setPassword(Landroid/accounts/Account;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8078094124794006, Code:
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, p2);
Map v27 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v20); Object v28 = v27.remove(p1);
  - Similarity: 0.7772781252861023, Code:
SQLiteDatabase v41 = this.mDeDatabase.getWritableDatabase();
v41.beginTransaction();
Cursor v47 = v44.query("accounts", v45, "name=? AND type=?", v46, 0, 0, 0);
ContentValues v53 = new ContentValues(); v53.put("password", p2);
int v58 = v52.update("ceDb.accounts", v53, "_id=?", v56);
Map v64 = this.authTokenCache; Object v65 = v64.remove(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: clearPassword(Landroid/accounts/Account;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.7828004360198975, Code:
setPasswordInternal(v18, p1, 0, v1);
int v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, 0);
boolean v26 = AccountManagerService$UserAccounts.accountsDb.deleteAuthTokensByAccountId(v24);
  - Access Control Level: SYS_OR_SIG

- API Name: getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.7805686593055725, Code:
AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
boolean v20 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
  - Access Control Level: SYS_OR_SIG

