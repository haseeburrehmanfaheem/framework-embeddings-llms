The method getAccountByTypeAndFeatures in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(v20);
				if (v24 != 0) {
					boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v25 != 0) {
						boolean v26 = this.mLocalUnlockedUsers.get(v20);
						if (v26 == 0) {
							File v34 = new File(v35);
							String v35 = this.mInjector.getCeDatabaseName(v20);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
							AccountManagerService.syncDeCeAccountsLocked(v24);
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v24, 1);
								AccountManagerService$UserAccounts v23 = v24;
								AccountManagerService$UserAccounts v22 = v23;
								boolean v40 = ArrayUtils.isEmpty(p3);
								if (v40 == 0) {
									boolean v42 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
									Preconditions.checkState((v42 ^ 1), "Method should not be called with cacheLock");
									if (p2 == 0) {
										Collection v44 = AccountManagerService$UserAccounts.accountCache.values();
										Iterator v45 = v44.iterator();
										boolean v46 = v45.hasNext();
										if (v46 == 0) {
											Object v47 = v45.next();
											boolean v48 = v45.hasNext();
											if (v48 == 0) {
												if ((0 + v47.length) != 0) {
													Account v49 = new Account((0 + v47.length));
													Collection v50 = AccountManagerService$UserAccounts.accountCache.values();
													Iterator v51 = v50.iterator();
													boolean v52 = v51.hasNext();
													if (v52 == 0) {
														Object v53 = v51.next();
														System.arraycopy(v53, 0, v49, 0, v53.length);
														boolean v55 = v51.hasNext();
														if (v55 == 0) {
															if (p4 != 0) {
																String v57 = AccountManagerService.getPackageNameForUid(v1);
																LinkedHashMap v58 = new LinkedHashMap();
																if (0 >= v49.length) {
																	Integer v60 = AccountManagerService.resolveAccountVisibility(v49[0], v57, v22);
																	int v61 = v60.intValue();
																	if (v61 == 1) {
																		if (v61 == 2) {
																			if (1 == 0) {
																				if (v61 != 4) {
																					Integer v62 = Integer.valueOf(v61);
																					Object v63 = v58.put(v49[0], v62);
																					if ((0 + 1) >= v49.length) {
																						Map v64 = AccountManagerService.filterSharedAccounts(v22, v58, v1, p4);
																						int v65 = v64.size();
																						Account v66 = new Account(v65);
																						Set v67 = v64.keySet();
																						Object v68 = v67.toArray(v66);
																						Account v56 = v68;
																						Account v41 = v56;
																						if (v41.length >= 1) {
																							if (v41.length <= 1) {
																								int v71 = UserHandle.getCallingUserId();
																								AccountManagerService$UserAccounts v72 = AccountManagerService.getUserAccounts(v71);
																								Integer v73 = AccountManagerService.resolveAccountVisibility(v41[0], p4, v72);
																								int v74 = v73.intValue();
																								if (v74 != 4) {
																									boolean v70 = 1;
																									if (v70 == 0) {
																										if (v41.length != 1) {
																											Bundle v75 = new Bundle();
																											v75.putString("authAccount", Account.name);
																											v75.putString("accountType", Account.type);
																											if (v75 != 0) {
																												if (v80 == 0) {
																													Class v83 = AccountManagerService.getClass();
																													String v84 = v83.getSimpleName();
																													p1.onResult(v75);
																													if (v91 == 0) {
																														IAccountManager$Stub.restoreCallingIdentity(v21);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
				AccountManagerService$UserAccounts v22 = v23;
				boolean v24 = ArrayUtils.isEmpty(p3);
				if (v24 == 0) {
					boolean v26 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
					Preconditions.checkState((v26 ^ 1), "Method should not be called with cacheLock");
					if (p2 == 0) {
						Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
						Iterator v29 = v28.iterator();
						boolean v30 = v29.hasNext();
						if (v30 == 0) {
							Object v31 = v29.next();
							boolean v32 = v29.hasNext();
							if (v32 == 0) {
								if ((0 + v31.length) != 0) {
									Account v33 = new Account((0 + v31.length));
									Collection v34 = AccountManagerService$UserAccounts.accountCache.values();
									Iterator v35 = v34.iterator();
									boolean v36 = v35.hasNext();
									if (v36 == 0) {
										Object v37 = v35.next();
										System.arraycopy(v37, 0, v33, 0, v37.length);
										boolean v39 = v35.hasNext();
										if (v39 == 0) {
											Account v40 = AccountManagerService.filterAccounts(v22, v33, v1, p4, 1);
											Account v25 = v40;
											boolean v42 = AccountManagerService.needToStartChooseAccountActivity(v25, p4);
											if (v42 == 0) {
												if (v25.length != 1) {
													Bundle v43 = new Bundle();
													v43.putString("authAccount", Account.name);
													v43.putString("accountType", Account.type);
													AccountManagerService.onResult(p1, v43);
													IAccountManager$Stub.restoreCallingIdentity(v21);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
				boolean v23 = ArrayUtils.isEmpty(p3);
				if (v23 == 0) {
					AccountManagerService$18 v24 = new AccountManagerService$18(p0,p1,p4);
					AccountManagerService$GetAccountsByTypeAndFeatureSession v26 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v22,v24,p2,p3,v1,p4,1);
					v26.bind();
					IAccountManager$Stub.restoreCallingIdentity(v21);
					return;
				}
			}
		}
	}
}

and the following sink code:
['Account v49 = new Account((0 + v47.length));\nSystem.arraycopy(v53, 0, v49, 0, v53.length);\nInteger v60 = AccountManagerService.resolveAccountVisibility(v49[0], v57, v22);\nMap v64 = AccountManagerService.filterSharedAccounts(v22, v58, v1, p4);', 'Account v33 = new Account((0 + v31.length));\nSystem.arraycopy(v37, 0, v33, 0, v37.length);\nAccount v40 = AccountManagerService.filterAccounts(v22, v33, v1, p4, 1);', 'AccountManagerService$GetAccountsByTypeAndFeatureSession v26 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v22,v24,p2,p3,v1,p4,1);\nv26.bind();']

The method getAccountByTypeAndFeatures has the following similar APIs:

- API Name: getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9066809415817261, Code:
AccountManagerService$GetAccountsByTypeAndFeatureSession v55 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v37,p1,p2,p3,v1,p4,0);
IAccountAuthenticatorCache v66 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v67 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v69 = v66.getServiceInfo(v67, v68);
  - Similarity: 0.7875092625617981, Code:
List v22 = AccountManagerService.getTypesForCaller(v1, v20, 1);
boolean v23 = v21.contains(p2);
Account v35 = new Account((0 + v33.length));
Collection v36 = AccountManagerService$UserAccounts.accountCache.values();
  - Access Control Level: SYS_OR_SIG

- API Name: getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8544573783874512, Code:
AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
boolean v20 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
  - Similarity: 0.837262749671936, Code:
AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
AccountManagerService$7 v9 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
v9.bind();
  - Access Control Level: SYS_OR_SIG

- API Name: updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8521876335144043, Code:
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
  - Similarity: 0.8366696238517761, Code:
AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v21);
AccountManagerService$13 v24 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
v24.bind();
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8315796256065369, Code:
AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v2);
Integer v24 = Integer.valueOf(v1);
LinkedHashMap v28 = new LinkedHashMap();
Iterator v30 = v4.iterator();
Object v32 = v30.next();
Object v33 = AccountManagerService$UserAccounts.accountCache.get(v32);
Integer v34 = AccountManagerService.resolveAccountVisibility(v33[0], p1, v22);
Map v38 = AccountManagerService.filterSharedAccounts(v22, v28, v37, p1);
return v25;
  - Access Control Level: SYS_OR_SIG

- API Name: hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.785970151424408, Code:
AccountManagerService$TestFeaturesSession v47 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
AccountManagerService$TestFeaturesSession v29 = new AccountManagerService$TestFeaturesSession(p0,v27,p1,p2,p3);
AccountManagerService$TestFeaturesSession v27 = new AccountManagerService$TestFeaturesSession(p0,v26,p1,p2,p3);
  - Access Control Level: SYS_OR_SIG

