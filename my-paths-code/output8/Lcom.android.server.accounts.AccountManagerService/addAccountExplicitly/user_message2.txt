The method addAccountExplicitly has the following code snippet:

This is path 1 for the API with depth 2:
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		int v13 = Binder.getCallingPid();
		Object v17 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
			boolean v20 = v19.contains(Account.type);
			boolean v18 = v20;
			if (v18 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
				AccountManagerService$UserAccounts v22 = v23;
				boolean v24 = AccountManagerService.addAccountInternal(v22, p1, p2, p3, v3, 0, p4);
				IAccountManager$Stub.restoreCallingIdentity(v21);
				boolean v1 = v24;
				return v1;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		int v13 = Binder.getCallingPid();
		Object v17 = Objects.requireNonNull(p1, "account cannot be null");
		boolean v18 = AccountManagerService.isAccountManagedByCaller(Account.type, v3, v4);
		if (v18 == 0) {
			long v19 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccounts(v4);
			boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, p3, v3, 0, p4);
			IAccountManager$Stub.restoreCallingIdentity(v19);
			boolean v1 = v21;
			return v1;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
	return v1;
}

and the following sink code:
['Bundle v2 = Bundle.setDefusable(p3, 1);\nObject v17 = Objects.requireNonNull(p1, "account cannot be null");\nboolean v24 = AccountManagerService.addAccountInternal(v22, p1, p2, v2, v3, 0, p4);\nreturn v24;', 'Bundle v2 = Bundle.setDefusable(p3, 1);\nboolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, v2, v3, 0, p4);\nreturn v21;', 'boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);\nreturn v1;']

The method addAccountExplicitly has the following similar APIs:

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z with Similarity Score: 0.9419602155685425
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v23 = p0.addAccountInternal(v21, p1, p2, v1, v2, p4, p5);

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z with Similarity Score: 0.9360363483428955
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v20 = p0.addAccountInternal(v19, p1, p2, v1, v2, p4, p5);

