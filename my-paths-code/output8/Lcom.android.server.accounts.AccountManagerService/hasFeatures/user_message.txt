This is path 1 for the API with depth 2:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(1, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(1, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(1, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v26 = AccountManagerService.getTypesVisibleToCaller(v1, v23, p4);
						boolean v27 = v26.contains(Account.type);
						boolean v25 = v27;
						if (v25 == 0) {
							long v28 = IAccountManager$Stub.clearCallingIdentity();
							Object v31 = this.mUsers.get(v23);
							if (v31 != 0) {
								boolean v32 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v32 != 0) {
									boolean v33 = this.mLocalUnlockedUsers.get(v23);
									if (v33 == 0) {
										File v41 = new File(v42);
										String v42 = this.mInjector.getCeDatabaseName(v23);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v41);
										AccountManagerService.syncDeCeAccountsLocked(v31);
										if (0 == 0) {
											AccountManagerService.validateAccountsInternal(v31, 1);
											AccountManagerService$UserAccounts v30 = v31;
											AccountManagerService$UserAccounts v29 = v30;
											AccountManagerService$TestFeaturesSession v47 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
											if (v50 == 0) {
												IAccountAuthenticatorCache v58 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
												AuthenticatorDescription v59 = AuthenticatorDescription.newKey(this.mAccountType);
												int v60 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												RegisteredServicesCache$ServiceInfo v61 = v58.getServiceInfo(v59, v60);
												if (v61 != 0) {
													int v62 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v63 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v62);
													if (v63 != 0) {
														if (ComponentInfo.directBootAware != 0) {
															Intent v64 = new Intent();
															Intent v66 = v64.setAction("android.accounts.AccountAuthenticator");
															Intent v67 = v64.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
															if (v68 == 0) {
																IAccountAuthenticatorCache v75 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																int v76 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																boolean v77 = v75.getBindInstantServiceAllowed(v76);
																if (v77 == 0) {
																	int v78 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	UserHandle v79 = UserHandle.of(v78);
																	boolean v80 = AccountManagerService.mContext.bindServiceAsUser(v64, AccountManagerService$Session, 4194305, v79);
																	if (v80 != 0) {
																		if (v81 == 0) {
																			boolean v57 = 0;
																			if (v57 != 0) {
																				long v86 = SystemClock.elapsedRealtime();
																				String v87 = AccountManagerService$Session.toDebugString(v86);
																				String v85 = v87;
																				this.mNumErrors = (this.mNumErrors + 1);
																				IAccountManagerResponse v92 = AccountManagerService$Session.getResponseAndClose();
																				if (v92 == 0) {
																					if (v93 == 0) {
																						Class v96 = AccountManagerService$Session.getClass();
																						String v97 = v96.getSimpleName();
																						v92.onError(1, "bind failure");
																						if (v104 == 0) {
																							IAccountManager$Stub.restoreCallingIdentity(v28);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(1, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(1, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(1, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					boolean v25 = AccountManagerService.isAccountVisibleToCaller(Account.type, v1, v23, p4);
					if (v25 == 0) {
						long v26 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v28 = AccountManagerService.getUserAccountsNotChecked(v23);
						AccountManagerService$UserAccounts v27 = v28;
						AccountManagerService$TestFeaturesSession v29 = new AccountManagerService$TestFeaturesSession(p0,v27,p1,p2,p3);
						if (v32 == 0) {
							boolean v39 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
							if (v39 != 0) {
								String v43 = AccountManagerService$Session.toDebugString();
								AccountManagerService$Session.onError(1, "bind failure");
								IAccountManager$Stub.restoreCallingIdentity(v26);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(1, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(1, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(1, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					p0.checkReadAccountsPermitted(v1, Account.type, v23, p4);
					long v25 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v26 = p0.getUserAccounts(v23);
					AccountManagerService$TestFeaturesSession v27 = new AccountManagerService$TestFeaturesSession(p0,v26,p1,p2,p3);
					v27.bind();
					IAccountManager$Stub.restoreCallingIdentity(v25);
					return;
				}
			}
		}
	}
}
