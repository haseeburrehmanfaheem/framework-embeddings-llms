The method editProperties in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v14 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				if (p2 != 0) {
					List v21 = AccountManagerService.getTypesForCaller(v1, v18, 0);
					List v20 = v21;
					boolean v22 = v20.contains(p2);
					boolean v19 = v22;
					if (v19 != 0) {
						boolean v23 = p0.isSystemUid(v1);
						if (v23 == 0) {
							long v24 = IAccountManager$Stub.clearCallingIdentity();
							Object v27 = this.mUsers.get(v18);
							if (v27 != 0) {
								boolean v28 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v28 != 0) {
									boolean v29 = this.mLocalUnlockedUsers.get(v18);
									if (v29 == 0) {
										File v37 = new File(v38);
										String v38 = this.mInjector.getCeDatabaseName(v18);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v37);
										AccountManagerService.syncDeCeAccountsLocked(v27);
										if (0 == 0) {
											AccountManagerService.validateAccountsInternal(v27, 1);
											AccountManagerService$UserAccounts v26 = v27;
											AccountManagerService$UserAccounts v25 = v26;
											AccountManagerService$16 v43 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
											if (v46 == 0) {
												IAccountAuthenticatorCache v54 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
												AuthenticatorDescription v55 = AuthenticatorDescription.newKey(this.mAccountType);
												int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												RegisteredServicesCache$ServiceInfo v57 = v54.getServiceInfo(v55, v56);
												if (v57 != 0) {
													int v58 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v59 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v58);
													if (v59 != 0) {
														if (ComponentInfo.directBootAware != 0) {
															Intent v60 = new Intent();
															Intent v62 = v60.setAction("android.accounts.AccountAuthenticator");
															Intent v63 = v60.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
															if (v64 == 0) {
																IAccountAuthenticatorCache v71 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																boolean v73 = v71.getBindInstantServiceAllowed(v72);
																if (v73 == 0) {
																	int v74 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	UserHandle v75 = UserHandle.of(v74);
																	boolean v76 = AccountManagerService.mContext.bindServiceAsUser(v60, AccountManagerService$Session, 4194305, v75);
																	if (v76 != 0) {
																		if (v77 == 0) {
																			boolean v53 = 0;
																			if (v53 != 0) {
																				long v82 = SystemClock.elapsedRealtime();
																				String v83 = AccountManagerService$Session.toDebugString(v82);
																				String v81 = v83;
																				this.mNumErrors = (this.mNumErrors + 1);
																				IAccountManagerResponse v88 = AccountManagerService$Session.getResponseAndClose();
																				if (v88 == 0) {
																					if (v89 == 0) {
																						Class v92 = AccountManagerService$Session.getClass();
																						String v93 = v92.getSimpleName();
																						v88.onError(1, "bind failure");
																						if (v100 == 0) {
																							IAccountManager$Stub.restoreCallingIdentity(v24);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v14 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				if (p2 != 0) {
					List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
					boolean v21 = v20.contains(p2);
					boolean v19 = v21;
					if (v19 != 0) {
						long v23 = Binder.clearCallingIdentity();
						String v24 = this.mPackageManager.getPackagesForUid(v1);
						if (v24 == 0) {
							if (0 >= v24.length) {
								PackageInfo v25 = this.mPackageManager.getPackageInfo(v24[0], 0);
								if (v25 == 0) {
									if ((ApplicationInfo.flags & 1) == 0) {
										if ((0 + 1) >= v24.length) {
											PackageInfo v26 = this.mPackageManager.getPackageInfo(v24[(0 + 1)], 0);
											if (v26 == 0) {
												if ((ApplicationInfo.flags & 1) == 0) {
													Binder.restoreCallingIdentity(v23);
													boolean v22 = 1;
													if (v22 == 0) {
														long v28 = IAccountManager$Stub.clearCallingIdentity();
														AccountManagerService$UserAccounts v30 = AccountManagerService.getUserAccountsNotChecked(v18);
														AccountManagerService$UserAccounts v29 = v30;
														AccountManagerService$16 v31 = new AccountManagerService$16(p0,v29,p1,p2,p3,1,0,0,p2);
														if (v34 == 0) {
															boolean v41 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
															if (v41 != 0) {
																String v45 = AccountManagerService$Session.toDebugString();
																AccountManagerService$Session.onError(1, "bind failure");
																IAccountManager$Stub.restoreCallingIdentity(v28);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v14 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				boolean v19 = p0.isAccountManagedByCaller(p2, v1, v18);
				if (v19 != 0) {
					boolean v20 = p0.isSystemUid(v1);
					if (v20 == 0) {
						long v21 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v18);
						AccountManagerService$16 v23 = new AccountManagerService$16(p0,v22,p1,p2,p3,1,0,0,p2);
						v23.bind();
						IAccountManager$Stub.restoreCallingIdentity(v21);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nList v21 = AccountManagerService.getTypesForCaller(v1, v18, 0);\nAccountManagerService$16 v43 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);', 'int v1 = Binder.getCallingUid();\nList v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);\nAccountManagerService$16 v31 = new AccountManagerService$16(p0,v29,p1,p2,p3,1,0,0,p2);', 'boolean v19 = p0.isAccountManagedByCaller(p2, v1, v18);\nAccountManagerService$UserAccounts v22 = p0.getUserAccounts(v18);\nAccountManagerService$16 v23 = new AccountManagerService$16(p0,v22,p1,p2,p3,1,0,0,p2);']

The method editProperties has the following similar APIs:

- API Name: removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9402918219566345, Code:
int v1 = Binder.getCallingUid();
UserHandle v23 = UserHandle.of(p4);
List v27 = AccountManagerService.getTypesForCaller(v1, v24, 0);
boolean v28 = v26.contains(Account.type);
if (v25 != 0) { ... }
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9039759635925293, Code:
int v3 = Binder.getCallingUid();
int v4 = UserHandle.getCallingUserId();
List v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);
boolean v8 = v6.contains(Account.type);
  - Access Control Level: SYS_OR_SIG

- API Name: clearPassword(Landroid/accounts/Account;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.896377682685852, Code:
int var1 = Binder.getCallingUid();
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
  - Access Control Level: SYS_OR_SIG

- API Name: accountAuthenticated(Landroid/accounts/Account;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8765671849250793, Code:
boolean v9 = p0.isAccountManagedByCaller(Account.type, v1, v8);
long v12 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v13 = p0.getUserAccounts(v8);
boolean v14 = p0.updateLastAuthenticatedTime(p1);
IAccountManager$Stub.restoreCallingIdentity(v12);
  - Access Control Level: SYS_OR_SIG

- API Name: copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8666198253631592, Code:
AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
String v8 = p2.toSafeString();
long v16 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$5 v17 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
  - Access Control Level: SYS_OR_SIG

