The method removeAccountAsUser in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(1, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(1, "response cannot be null");
				if (v22 == 0) {
					boolean v20 = 1;
					if (v20 != 0) {
						UserHandle v23 = UserHandle.of(p4);
						int v24 = v23.getIdentifier();
						if (Account.type != 0) {
							List v27 = AccountManagerService.getTypesForCaller(v1, v24, 0);
							List v26 = v27;
							boolean v28 = v26.contains(Account.type);
							boolean v25 = v28;
							if (v25 != 0) {
								boolean v29 = p0.isSystemUid(v1);
								if (v29 != 0) {
									Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
									Object v31 = v32;
									if (v31 == 0) {
										boolean v33 = v31.isActiveProfileOwner(v1);
										if (v33 != 0) {
											boolean v34 = v31.isActiveDeviceOwner(v1);
											if (v34 == 0) {
												boolean v30 = 1;
												if (v30 == 0) {
													Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
													if (v37 == 0) {
														boolean v38 = v37.isActiveProfileOwner(v1);
														if (v38 != 0) {
															boolean v39 = v37.isActiveDeviceOwner(v1);
															if (v39 == 0) {
																boolean v36 = 1;
																if (v36 == 0) {
																	if (this.mUserManager != 0) {
																		UserManager v41 = UserManager.get(this.mContext);
																		this.mUserManager = v41;
																		UserManager v40 = this.mUserManager;
																		UserHandle v42 = new UserHandle(p4);
																		Bundle v44 = v40.getUserRestrictions(v42);
																		boolean v45 = v44.getBoolean("no_modify_accounts");
																		if (v45 == 0) {
																			boolean v35 = 0;
																			if (v35 != 0) {
																				Object v48 = LocalServices.getService(DevicePolicyManagerInterna.class);
																				if (v48 == 0) {
																					boolean v49 = v48.isActiveProfileOwner(v1);
																					if (v49 != 0) {
																						boolean v50 = v48.isActiveDeviceOwner(v1);
																						if (v50 == 0) {
																							boolean v47 = 1;
																							if (v47 == 0) {
																								Object v51 = this.mContext.getSystemService("device_policy");
																								String v52 = v51.getAccountTypesWithManagementDisabledAsUser(p4);
																								if (v52 != 0) {
																									if (0 >= v52.length) {
																										boolean v53 = v52[0].equals(Account.type);
																										if (v53 == 0) {
																											if ((0 + 1) >= v52.length) {
																												boolean v54 = v52[(0 + 1)].equals(Account.type);
																												if (v54 == 0) {
																													boolean v46 = 0;
																													if (v46 != 0) {
																														p1.onError(101, "User cannot modify accounts of this type (policy).");
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(1, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(1, "response cannot be null");
				if (v22 == 0) {
					boolean v20 = 1;
					if (v20 != 0) {
						UserHandle v23 = UserHandle.of(p4);
						int v24 = v23.getIdentifier();
						if (Account.type != 0) {
							List v26 = AccountManagerService.getTypesManagedByCaller(v1, v24);
							boolean v27 = v26.contains(Account.type);
							boolean v25 = v27;
							if (v25 != 0) {
								long v29 = Binder.clearCallingIdentity();
								String v30 = this.mPackageManager.getPackagesForUid(v1);
								if (v30 == 0) {
									if (0 >= v30.length) {
										PackageInfo v31 = this.mPackageManager.getPackageInfo(v30[0], 0);
										if (v31 == 0) {
											if ((ApplicationInfo.flags & 1) == 0) {
												if ((0 + 1) >= v30.length) {
													PackageInfo v32 = this.mPackageManager.getPackageInfo(v30[(0 + 1)], 0);
													if (v32 == 0) {
														if ((ApplicationInfo.flags & 1) == 0) {
															Binder.restoreCallingIdentity(v29);
															boolean v28 = 1;
															if (v28 != 0) {
																Object v35 = LocalServices.getService(DevicePolicyManagerInterna.class);
																if (v35 == 0) {
																	boolean v36 = v35.isActiveProfileOwner(v1);
																	if (v36 != 0) {
																		boolean v37 = v35.isActiveDeviceOwner(v1);
																		if (v37 == 0) {
																			boolean v34 = 1;
																			if (v34 == 0) {
																				boolean v39 = AccountManagerService.isProfileOwner(v1);
																				if (v39 == 0) {
																					UserManager v40 = AccountManagerService.getUserManager();
																					UserHandle v41 = new UserHandle(p4);
																					Bundle v43 = v40.getUserRestrictions(v41);
																					boolean v44 = v43.getBoolean("no_modify_accounts");
																					if (v44 == 0) {
																						boolean v38 = 0;
																						if (v38 != 0) {
																							boolean v46 = AccountManagerService.isProfileOwner(v1);
																							if (v46 == 0) {
																								Object v47 = this.mContext.getSystemService("device_policy");
																								String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p4);
																								if (v48 != 0) {
																									if (0 >= v48.length) {
																										boolean v49 = v48[0].equals(Account.type);
																										if (v49 == 0) {
																											if ((0 + 1) >= v48.length) {
																												boolean v50 = v48[(0 + 1)].equals(Account.type);
																												if (v50 == 0) {
																													boolean v45 = 0;
																													if (v45 != 0) {
																														p1.onError(101, "User cannot modify accounts of this type (policy).");
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(1, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(1, "response cannot be null");
				boolean v20 = p0.isCrossUser(v1, p4);
				if (v20 != 0) {
					UserHandle v21 = UserHandle.of(p4);
					int v22 = v21.getIdentifier();
					boolean v23 = p0.isAccountManagedByCaller(Account.type, v1, v22);
					if (v23 != 0) {
						boolean v24 = p0.isSystemUid(v1);
						if (v24 != 0) {
							boolean v25 = p0.isProfileOwner(v1);
							if (v25 == 0) {
								boolean v26 = p0.canUserModifyAccounts(p4, v1);
								if (v26 != 0) {
									boolean v27 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
									if (v27 != 0) {
										p1.onError(101, "User cannot modify accounts of this type (policy).");
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nUserHandle v23 = UserHandle.of(p4);\nList v27 = AccountManagerService.getTypesForCaller(v1, v24, 0);\nboolean v28 = v26.contains(Account.type);\nif (v25 != 0) { ... }', 'int v12 = Binder.getCallingPid();\nif (p2 == 0) { Preconditions.checkArgument(1, "account cannot be null"); }\nboolean v20 = p0.isCrossUser(v1, p4);\nboolean v23 = p0.isAccountManagedByCaller(Account.type, v1, v22);', 'Object v35 = LocalServices.getService(DevicePolicyManagerInterna.class);\nboolean v36 = v35.isActiveProfileOwner(v1);\nboolean v37 = v35.isActiveDeviceOwner(v1);\np1.onError(101, "User cannot modify accounts of this type (policy).");']

The method removeAccountAsUser has the following similar APIs:

- API Name: getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9541900753974915, Code:
int v3 = Binder.getCallingUid();
int v4 = UserHandle.getCallingUserId();
List v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);
boolean v8 = v6.contains(Account.type);
  - Access Control Level: SYS_OR_SIG

- API Name: editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9402918219566345, Code:
int v1 = Binder.getCallingUid();
List v21 = AccountManagerService.getTypesForCaller(v1, v18, 0);
AccountManagerService$16 v43 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
  - Similarity: 0.9325413703918457, Code:
int v1 = Binder.getCallingUid();
List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
AccountManagerService$16 v31 = new AccountManagerService$16(p0,v29,p1,p2,p3,1,0,0,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: clearPassword(Landroid/accounts/Account;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8719165921211243, Code:
int var1 = Binder.getCallingUid();
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
  - Access Control Level: SYS_OR_SIG

- API Name: setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8673950433731079, Code:
Object v1 = Objects.requireNonNull(p1, "account cannot be null");
Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
int v3 = Binder.getCallingUid();
boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
  - Access Control Level: SYS_OR_SIG

- API Name: getPassword(Landroid/accounts/Account;)Ljava/lang/String; in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8620820045471191, Code:
int v15 = UserHandle.getCallingUserId();
List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
boolean v18 = v17.contains(Account.type);
long v19 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
String v25 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
IAccountManager$Stub.restoreCallingIdentity(v19);
return v22;
  - Access Control Level: SYS_OR_SIG

