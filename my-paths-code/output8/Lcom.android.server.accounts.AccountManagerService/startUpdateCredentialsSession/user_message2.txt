The method startUpdateCredentialsSession in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = Binder.getCallingUid();
				int v22 = UserHandle.getCallingUserId();
				String v23 = p5.getString("androidPackageName");
				String v24 = new String(1);
				long v26 = IAccountManager$Stub.clearCallingIdentity();
				Object v29 = this.mUsers.get(v22);
				if (v29 != 0) {
					boolean v30 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v30 != 0) {
						boolean v31 = this.mLocalUnlockedUsers.get(v22);
						if (v31 == 0) {
							File v39 = new File(v40);
							String v40 = this.mInjector.getCeDatabaseName(v22);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v39);
							AccountManagerService.syncDeCeAccountsLocked(v29);
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v29, 1);
								AccountManagerService$UserAccounts v28 = v29;
								AccountManagerService$UserAccounts v27 = v28;
								AccountManagerService$14 v45 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
								if (v48 == 0) {
									IAccountAuthenticatorCache v56 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
									AuthenticatorDescription v57 = AuthenticatorDescription.newKey(this.mAccountType);
									int v58 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									RegisteredServicesCache$ServiceInfo v59 = v56.getServiceInfo(v57, v58);
									if (v59 != 0) {
										int v60 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v61 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v60);
										if (v61 != 0) {
											if (ComponentInfo.directBootAware != 0) {
												Intent v62 = new Intent();
												Intent v64 = v62.setAction("android.accounts.AccountAuthenticator");
												Intent v65 = v62.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
												if (v66 == 0) {
													IAccountAuthenticatorCache v73 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
													int v74 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v75 = v73.getBindInstantServiceAllowed(v74);
													if (v75 == 0) {
														int v76 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														UserHandle v77 = UserHandle.of(v76);
														boolean v78 = AccountManagerService.mContext.bindServiceAsUser(v62, AccountManagerService$Session, 4194305, v77);
														if (v78 != 0) {
															if (v79 == 0) {
																boolean v55 = 0;
																if (v55 != 0) {
																	long v84 = SystemClock.elapsedRealtime();
																	String v85 = AccountManagerService$Session.toDebugString(v84);
																	String v83 = v85;
																	this.mNumErrors = (this.mNumErrors + 1);
																	IAccountManagerResponse v90 = AccountManagerService$Session.getResponseAndClose();
																	if (v90 == 0) {
																		if (v91 == 0) {
																			Class v94 = AccountManagerService$Session.getClass();
																			String v95 = v94.getSimpleName();
																			v90.onError(1, "bind failure");
																			if (v102 == 0) {
																				IAccountManager$Stub.restoreCallingIdentity(v26);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = Binder.getCallingUid();
				int v22 = UserHandle.getCallingUserId();
				String v23 = p5.getString("androidPackageName");
				String v24 = new String(1);
				long v26 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v28 = AccountManagerService.getUserAccountsNotChecked(v22);
				AccountManagerService$UserAccounts v27 = v28;
				AccountManagerService$14 v29 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
				if (v32 == 0) {
					boolean v39 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
					if (v39 != 0) {
						String v43 = AccountManagerService$Session.toDebugString();
						AccountManagerService$Session.onError(1, "bind failure");
						IAccountManager$Stub.restoreCallingIdentity(v26);
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = Binder.getCallingUid();
				int v22 = UserHandle.getCallingUserId();
				String v23 = p5.getString("androidPackageName");
				String v24 = new String(1);
				long v26 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v27 = p0.getUserAccounts(v22);
				AccountManagerService$14 v28 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
				v28.bind();
				IAccountManager$Stub.restoreCallingIdentity(v26);
				return;
			}
		}
	}
}

and the following sink code:
['Bundle v1 = Bundle.setDefusable(p5, 1);\nAccountManagerService$14 v45 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);\nv28.bind();']

The method startUpdateCredentialsSession has the following similar APIs:

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9821452498435974, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v21 = p0.getUserAccounts(p5);
AccountManagerService$12 v22 = new AccountManagerService$12(p0,v21,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
v22.bind();
  - Similarity: 0.9643410444259644, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
  - Similarity: 0.91633540391922, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v25 = this.mUsers.get(p5);
AccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
AccountManagerService.syncDeCeAccountsLocked(v25);
AccountManagerService.validateAccountsInternal(v25, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9486992955207825, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
String v12 = Arrays.toString(p4);
AccountManagerService$9 v58 = new AccountManagerService$9(AccountManagerService,v54,p1,p2,p5,1,0,0,1,p3,p4,v49,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9242451190948486, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
int v2 = Binder.getCallingUid();
AccountManagerService$UserAccounts v61 = AccountManagerService.getUserAccountsNotChecked(p7);
AccountManagerService$9 v64 = new AccountManagerService$9(AccountManagerService,v60,p1,p2,p5,1,0,0,1,p3,p4,v55,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8802824020385742, Code:
Bundle v2 = Bundle.setDefusable(p3, 1);
boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, v2, v3, 0, p4);
return v21;
  - Similarity: 0.8710676431655884, Code:
Bundle v2 = Bundle.setDefusable(p3, 1);
Object v17 = Objects.requireNonNull(p1, "account cannot be null");
boolean v24 = AccountManagerService.addAccountInternal(v22, p1, p2, v2, v3, 0, p4);
return v24;
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8647429347038269, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v39 = p0.addAccountInternal(v22, p1, p2, v1, v2, p4, p5);
  - Similarity: 0.8564876914024353, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v23 = p0.addAccountInternal(v21, p1, p2, v1, v2, p4, p5);
  - Similarity: 0.8528783321380615, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
boolean v20 = p0.addAccountInternal(v19, p1, p2, v1, v2, p4, p5);
  - Access Control Level: SYS_OR_SIG

