The method getUserData has the following code snippet:

This is path 1 for the API with depth 2:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		int v5 = Binder.getCallingPid();
		Integer v6 = Integer.valueOf(v5);
		Object v9 = Objects.requireNonNull(p1, "account cannot be null");
		Object v10 = Objects.requireNonNull(p2, "key cannot be null");
		int v11 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v14 = AccountManagerService.getTypesForCaller(v1, v11, 0);
			List v13 = v14;
			boolean v15 = v13.contains(Account.type);
			boolean v12 = v15;
			if (v12 == 0) {
				boolean v16 = p0.isLocalUnlockedUser(v11);
				if (v16 != 0) {
					long v17 = IAccountManager$Stub.clearCallingIdentity();
					Object v20 = this.mUsers.get(v11);
					if (v20 != 0) {
						boolean v21 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v21 != 0) {
							boolean v22 = this.mLocalUnlockedUsers.get(v11);
							if (v22 == 0) {
								File v30 = new File(v31);
								String v31 = this.mInjector.getCeDatabaseName(v11);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v30);
								AccountManagerService.syncDeCeAccountsLocked(v20);
								if (0 == 0) {
									AccountManagerService.validateAccountsInternal(v20, 1);
									AccountManagerService$UserAccounts v19 = v20;
									AccountManagerService$UserAccounts v18 = v19;
									boolean v36 = p0.accountExistsCache(v18, p1);
									if (v36 != 0) {
										Map v38 = this.userDataCache;
										Object v39 = v38.get(p1);
										if (v39 != 0) {
											Map v40 = this.userDataCache;
											Object v41 = v40.get(p1);
											if (v41 != 0) {
												SQLiteDatabase v43 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
												HashMap v44 = new HashMap();
												String v46 = new String(2);
												Cursor v47 = v43.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v46, 0, 0, 0);
												boolean v48 = v47.moveToNext();
												if (v48 == 0) {
													String v49 = v47.getString(0);
													String v50 = v47.getString(1);
													Object v51 = v44.put(v49, v50);
													boolean v52 = v47.moveToNext();
													if (v52 == 0) {
														v47.close();
														Map v42 = v44;
														Map v54 = this.userDataCache;
														Object v55 = v54.put(p1, v42);
														Object v56 = v39.get(p2);
														String v37 = v56;
														IAccountManager$Stub.restoreCallingIdentity(v17);
														return v37;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		int v5 = Binder.getCallingPid();
		Integer v6 = Integer.valueOf(v5);
		Object v9 = Objects.requireNonNull(p1, "account cannot be null");
		Object v10 = Objects.requireNonNull(p2, "key cannot be null");
		int v11 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v13 = AccountManagerService.getTypesManagedByCaller(v1, v11);
			boolean v14 = v13.contains(Account.type);
			boolean v12 = v14;
			if (v12 == 0) {
				boolean v16 = this.mLocalUnlockedUsers.get(v11);
				boolean v15 = v16;
				if (v15 != 0) {
					long v17 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v11);
					AccountManagerService$UserAccounts v18 = v19;
					boolean v21 = AccountManagerService$UserAccounts.accountCache.containsKey(Account.type);
					if (v21 == 0) {
						Object v22 = AccountManagerService$UserAccounts.accountCache.get(Account.type);
						if (0 >= v22.length) {
							boolean v23 = Account.name.equals(Account.name);
							if (v23 == 0) {
								if ((0 + 1) >= v22.length) {
									boolean v24 = Account.name.equals(Account.name);
									if (v24 == 0) {
										boolean v20 = 1;
										if (v20 != 0) {
											Map v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
											Object v27 = v26.get(p1);
											if (v27 != 0) {
												Map v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
												Object v29 = v28.get(p1);
												if (v29 != 0) {
													Map v30 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p1);
													Map v31 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
													Object v32 = v31.put(p1, v30);
													Object v33 = v27.get(p2);
													String v25 = v33;
													IAccountManager$Stub.restoreCallingIdentity(v17);
													return v25;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		int v5 = Binder.getCallingPid();
		Integer v6 = Integer.valueOf(v5);
		Object v9 = Objects.requireNonNull(p1, "account cannot be null");
		Object v10 = Objects.requireNonNull(p2, "key cannot be null");
		int v11 = UserHandle.getCallingUserId();
		boolean v12 = p0.isAccountManagedByCaller(Account.type, v1, v11);
		if (v12 == 0) {
			boolean v13 = p0.isLocalUnlockedUser(v11);
			if (v13 != 0) {
				long v14 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v15 = p0.getUserAccounts(v11);
				boolean v16 = p0.accountExistsCache(v15, p1);
				if (v16 != 0) {
					String v17 = p0.readUserDataInternal(v15, p1, p2);
					IAccountManager$Stub.restoreCallingIdentity(v14);
					return v17;
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nint v11 = UserHandle.getCallingUserId();\nObject v9 = Objects.requireNonNull(p1, "account cannot be null");\nObject v10 = Objects.requireNonNull(p2, "key cannot be null");\nSQLiteDatabase v43 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();\nCursor v47 = v43.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v46, 0, 0, 0);', 'Map v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);\nObject v27 = v26.get(p1);\nMap v30 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p1);\nObject v32 = v31.put(p1, v30);', 'String v17 = p0.readUserDataInternal(v15, p1, p2);']

The method getUserData has the following similar APIs:

- API Name: getPassword(Landroid/accounts/Account;)Ljava/lang/String; with Similarity Score: 0.8803087472915649
  - Access Control Level: SYS_OR_SIG and the following code:
int v15 = UserHandle.getCallingUserId();
List v18 = AccountManagerService.getTypesForCaller(v1, v15, 0);
boolean v19 = v17.contains(Account.type);
long v20 = IAccountManager$Stub.clearCallingIdentity();
Object v23 = this.mUsers.get(v15);
SQLiteDatabase v44 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
Cursor v47 = v44.query("ceDb.accounts", v46, "name=? AND type=?", v45, 0, 0, 0);
String v49 = v47.getString(0);
v47.close();
IAccountManager$Stub.restoreCallingIdentity(v20);
return v39;

- API Name: setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8377472162246704
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
List v18 = AccountManagerService.getTypesManagedByCaller(v1, v16);
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v30 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
long v32 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v30, p2, p3);

