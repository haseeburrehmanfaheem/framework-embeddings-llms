This is path 1 for the API with depth 2:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = UserHandle.getCallingUserId();
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				Object v25 = this.mUsers.get(v21);
				if (v25 != 0) {
					boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v26 != 0) {
						boolean v27 = this.mLocalUnlockedUsers.get(v21);
						if (v27 == 0) {
							File v35 = new File(v36);
							String v36 = this.mInjector.getCeDatabaseName(v21);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
							AccountManagerService.syncDeCeAccountsLocked(v25);
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v25, 1);
								AccountManagerService$UserAccounts v24 = v25;
								AccountManagerService$UserAccounts v23 = v24;
								AccountManagerService$13 v41 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
								if (v44 == 0) {
									IAccountAuthenticatorCache v52 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
									AuthenticatorDescription v53 = AuthenticatorDescription.newKey(this.mAccountType);
									int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									RegisteredServicesCache$ServiceInfo v55 = v52.getServiceInfo(v53, v54);
									if (v55 != 0) {
										int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v57 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v56);
										if (v57 != 0) {
											if (ComponentInfo.directBootAware != 0) {
												Intent v58 = new Intent();
												Intent v60 = v58.setAction("android.accounts.AccountAuthenticator");
												Intent v61 = v58.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
												if (v62 == 0) {
													IAccountAuthenticatorCache v69 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
													int v70 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v71 = v69.getBindInstantServiceAllowed(v70);
													if (v71 == 0) {
														int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														UserHandle v73 = UserHandle.of(v72);
														boolean v74 = AccountManagerService.mContext.bindServiceAsUser(v58, AccountManagerService$Session, 4194305, v73);
														if (v74 != 0) {
															if (v75 == 0) {
																boolean v51 = 0;
																if (v51 != 0) {
																	long v80 = SystemClock.elapsedRealtime();
																	String v81 = AccountManagerService$Session.toDebugString(v80);
																	String v79 = v81;
																	this.mNumErrors = (this.mNumErrors + 1);
																	IAccountManagerResponse v86 = AccountManagerService$Session.getResponseAndClose();
																	if (v86 == 0) {
																		if (v87 == 0) {
																			Class v90 = AccountManagerService$Session.getClass();
																			String v91 = v90.getSimpleName();
																			v86.onError(1, "bind failure");
																			if (v98 == 0) {
																				IAccountManager$Stub.restoreCallingIdentity(v22);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = UserHandle.getCallingUserId();
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
				AccountManagerService$UserAccounts v23 = v24;
				AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
				if (v28 == 0) {
					boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
					if (v35 != 0) {
						String v39 = AccountManagerService$Session.toDebugString();
						AccountManagerService$Session.onError(1, "bind failure");
						IAccountManager$Stub.restoreCallingIdentity(v22);
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = UserHandle.getCallingUserId();
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v21);
				AccountManagerService$13 v24 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
				v24.bind();
				IAccountManager$Stub.restoreCallingIdentity(v22);
				return;
			}
		}
	}
}
