This is path 1 for the API with depth 2:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				ArrayList v23 = new ArrayList();
				long v25 = Binder.clearCallingIdentity();
				Collection v26 = this.mAuthenticatorCache.getAllServices(v20);
				Binder.restoreCallingIdentity(v25);
				Object v28 = LocalServices.getService(PackageManagerInterna.class);
				Iterator v29 = v26.iterator();
				boolean v30 = v29.hasNext();
				if (v30 == 0) {
					Object v31 = v29.next();
					if (1 != 0) {
						boolean v32 = v28.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v1, 16);
						if (v32 == 0) {
							boolean v33 = v23.add(AuthenticatorDescription.type);
							boolean v34 = v29.hasNext();
							if (v34 == 0) {
								List v22 = v23;
								List v21 = v22;
								boolean v35 = v21.contains(p2);
								if (v35 != 0) {
									long v36 = IAccountManager$Stub.clearCallingIdentity();
									Object v39 = this.mUsers.get(v20);
									if (v39 != 0) {
										boolean v40 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
										if (v40 != 0) {
											boolean v41 = this.mLocalUnlockedUsers.get(v20);
											if (v41 == 0) {
												File v49 = new File(v50);
												String v50 = this.mInjector.getCeDatabaseName(v20);
												AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v49);
												AccountManagerService.syncDeCeAccountsLocked(v39);
												if (0 == 0) {
													AccountManagerService.validateAccountsInternal(v39, 1);
													AccountManagerService$UserAccounts v38 = v39;
													AccountManagerService$UserAccounts v37 = v38;
													if (p3 == 0) {
														if (p3.length != 0) {
															AccountManagerService$GetAccountsByTypeAndFeatureSession v55 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v37,p1,p2,p3,v1,p4,0);
															if (v58 == 0) {
																IAccountAuthenticatorCache v66 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																AuthenticatorDescription v67 = AuthenticatorDescription.newKey(this.mAccountType);
																int v68 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																RegisteredServicesCache$ServiceInfo v69 = v66.getServiceInfo(v67, v68);
																if (v69 != 0) {
																	int v70 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	boolean v71 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v70);
																	if (v71 != 0) {
																		if (ComponentInfo.directBootAware != 0) {
																			Intent v72 = new Intent();
																			Intent v74 = v72.setAction("android.accounts.AccountAuthenticator");
																			Intent v75 = v72.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
																			if (v76 == 0) {
																				IAccountAuthenticatorCache v83 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																				int v84 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																				boolean v85 = v83.getBindInstantServiceAllowed(v84);
																				if (v85 == 0) {
																					int v86 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																					UserHandle v87 = UserHandle.of(v86);
																					boolean v88 = AccountManagerService.mContext.bindServiceAsUser(v72, AccountManagerService$Session, 4194305, v87);
																					if (v88 != 0) {
																						if (v89 == 0) {
																							boolean v65 = 0;
																							if (v65 != 0) {
																								long v94 = SystemClock.elapsedRealtime();
																								String v95 = AccountManagerService$Session.toDebugString(v94);
																								String v93 = v95;
																								this.mNumErrors = (this.mNumErrors + 1);
																								IAccountManagerResponse v100 = AccountManagerService$Session.getResponseAndClose();
																								if (v100 == 0) {
																									if (v101 == 0) {
																										Class v104 = AccountManagerService$Session.getClass();
																										String v105 = v104.getSimpleName();
																										v100.onError(1, "bind failure");
																										if (v112 == 0) {
																											IAccountManager$Stub.restoreCallingIdentity(v36);
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				List v22 = AccountManagerService.getTypesForCaller(v1, v20, 1);
				List v21 = v22;
				boolean v23 = v21.contains(p2);
				if (v23 != 0) {
					long v24 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v26 = AccountManagerService.getUserAccountsNotChecked(v20);
					AccountManagerService$UserAccounts v25 = v26;
					if (p3 == 0) {
						if (p3.length != 0) {
							boolean v28 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
							Preconditions.checkState((v28 ^ 1), "Method should not be called with cacheLock");
							if (p2 == 0) {
								Collection v30 = AccountManagerService$UserAccounts.accountCache.values();
								Iterator v31 = v30.iterator();
								boolean v32 = v31.hasNext();
								if (v32 == 0) {
									Object v33 = v31.next();
									boolean v34 = v31.hasNext();
									if (v34 == 0) {
										if ((0 + v33.length) != 0) {
											Account v35 = new Account((0 + v33.length));
											Collection v36 = AccountManagerService$UserAccounts.accountCache.values();
											Iterator v37 = v36.iterator();
											boolean v38 = v37.hasNext();
											if (v38 == 0) {
												Object v39 = v37.next();
												System.arraycopy(v39, 0, v35, 0, v39.length);
												boolean v41 = v37.hasNext();
												if (v41 == 0) {
													Account v42 = AccountManagerService.filterAccounts(v25, v35, v1, p4, 0);
													Account v27 = v42;
													Bundle v43 = new Bundle();
													v43.putParcelableArray("accounts", v27);
													if (v43 != 0) {
														if (v47 == 0) {
															Class v50 = AccountManagerService.getClass();
															String v51 = v50.getSimpleName();
															p1.onResult(v43);
															if (v58 == 0) {
																IAccountManager$Stub.restoreCallingIdentity(v24);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				List v21 = p0.getTypesVisibleToCaller(v1, v20, p4);
				boolean v22 = v21.contains(p2);
				if (v22 != 0) {
					long v23 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v24 = p0.getUserAccounts(v20);
					if (p3 == 0) {
						if (p3.length != 0) {
							Account v25 = p0.getAccountsFromCache(v24, p2, v1, p4, 0);
							Bundle v26 = new Bundle();
							v26.putParcelableArray("accounts", v25);
							p0.onResult(p1, v26);
							IAccountManager$Stub.restoreCallingIdentity(v23);
							return;
						}
					}
				}
			}
		}
	}
}
