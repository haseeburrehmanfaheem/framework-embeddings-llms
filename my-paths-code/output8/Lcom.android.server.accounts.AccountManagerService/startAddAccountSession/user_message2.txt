The method startAddAccountSession in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(1, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v30 == 0) {
					boolean v31 = v30.isActiveProfileOwner(v26);
					if (v31 != 0) {
						boolean v32 = v30.isActiveDeviceOwner(v26);
						if (v32 == 0) {
							boolean v29 = 1;
							if (v29 == 0) {
								if (this.mUserManager != 0) {
									UserManager v34 = UserManager.get(this.mContext);
									this.mUserManager = v34;
									UserManager v33 = this.mUserManager;
									UserHandle v35 = new UserHandle(v27);
									Bundle v37 = v33.getUserRestrictions(v35);
									boolean v38 = v37.getBoolean("no_modify_accounts");
									if (v38 == 0) {
										boolean v28 = 0;
										if (v28 != 0) {
											Object v41 = LocalServices.getService(DevicePolicyManagerInterna.class);
											if (v41 == 0) {
												boolean v42 = v41.isActiveProfileOwner(v26);
												if (v42 != 0) {
													boolean v43 = v41.isActiveDeviceOwner(v26);
													if (v43 == 0) {
														boolean v40 = 1;
														if (v40 == 0) {
															Object v44 = this.mContext.getSystemService("device_policy");
															String v45 = v44.getAccountTypesWithManagementDisabledAsUser(v27);
															if (v45 != 0) {
																if (0 >= v45.length) {
																	boolean v46 = v45[0].equals(p2);
																	if (v46 == 0) {
																		if ((0 + 1) >= v45.length) {
																			boolean v47 = v45[(0 + 1)].equals(p2);
																			if (v47 == 0) {
																				boolean v39 = 0;
																				if (v39 != 0) {
																					p1.onError(101, "User cannot modify accounts of this type (policy).");
																					Object v51 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
																					Object v50 = v51;
																					if (v50 != 0) {
																						Intent v53 = new Intent(this.mContext,CantAddAccountActivit.class);
																						Intent v55 = v53.putExtra("android.accounts.extra.ERROR_CODE", 101);
																						Intent v56 = v53.addFlags(268435456);
																						Intent v52 = v53;
																						if (v52 != 0) {
																							Intent v58 = new Intent(this.mContext,CantAddAccountActivit.class);
																							Intent v60 = v58.putExtra("android.accounts.extra.ERROR_CODE", 101);
																							Intent v61 = v58.addFlags(268435456);
																							Intent v57 = v58;
																							long v62 = IAccountManager$Stub.clearCallingIdentity();
																							UserHandle v63 = new UserHandle(v27);
																							this.mContext.startActivityAsUser(v52, v63);
																							IAccountManager$Stub.restoreCallingIdentity(v62);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(1, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				boolean v29 = AccountManagerService.isProfileOwner(v26);
				if (v29 == 0) {
					UserManager v30 = AccountManagerService.getUserManager();
					UserHandle v31 = new UserHandle(v27);
					Bundle v33 = v30.getUserRestrictions(v31);
					boolean v34 = v33.getBoolean("no_modify_accounts");
					if (v34 == 0) {
						boolean v28 = 0;
						if (v28 != 0) {
							boolean v36 = AccountManagerService.isProfileOwner(v26);
							if (v36 == 0) {
								Object v37 = this.mContext.getSystemService("device_policy");
								String v38 = v37.getAccountTypesWithManagementDisabledAsUser(v27);
								if (v38 != 0) {
									if (0 >= v38.length) {
										boolean v39 = v38[0].equals(p2);
										if (v39 == 0) {
											if ((0 + 1) >= v38.length) {
												boolean v40 = v38[(0 + 1)].equals(p2);
												if (v40 == 0) {
													boolean v35 = 0;
													if (v35 != 0) {
														p1.onError(101, "User cannot modify accounts of this type (policy).");
														Object v43 = LocalServices.getService(DevicePolicyManagerInterna.class);
														if (v43 != 0) {
															if (101 != 100) {
																if (101 != 101) {
																	Intent v44 = v43.createShowAdminSupportIntent(v27, 0);
																	if (getDefaultCantAddAccountIntent() != 0) {
																		Intent v45 = AccountManagerService.getDefaultCantAddAccountIntent(101);
																		long v46 = IAccountManager$Stub.clearCallingIdentity();
																		UserHandle v47 = new UserHandle(v27);
																		this.mContext.startActivityAsUser(getDefaultCantAddAccountIntent(), v47);
																		IAccountManager$Stub.restoreCallingIdentity(v46);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(1, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				boolean v28 = p0.canUserModifyAccounts(v27, v26);
				if (v28 != 0) {
					boolean v29 = p0.canUserModifyAccountsForType(v27, p2, v26);
					if (v29 != 0) {
						p1.onError(101, "User cannot modify accounts of this type (policy).");
						p0.showCantAddAccount(101, v27);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v17 = Binder.getCallingUid();\nint v20 = Binder.getCallingPid();\nif (p1 == 0) {\nPreconditions.checkArgument(1, "response cannot be null");\nif (p2 == 0) {\nPreconditions.checkArgument(1, "accountType cannot be null");', 'boolean v28 = p0.canUserModifyAccounts(v27, v26);\nboolean v29 = p0.canUserModifyAccountsForType(v27, p2, v26);\np1.onError(101, "User cannot modify accounts of this type (policy).");', 'Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);\nboolean v31 = v30.isActiveProfileOwner(v26);\nboolean v32 = v30.isActiveDeviceOwner(v26);']

The method startAddAccountSession has the following similar APIs:

- API Name: addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9057177305221558, Code:
boolean v26 = p0.canUserModifyAccounts(v25, v24);
boolean v27 = p0.canUserModifyAccountsForType(v25, p2, v24);
  - Similarity: 0.8264105916023254, Code:
int v17 = Binder.getCallingUid();
int v25 = UserHandle.getUserId(v24);
Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
boolean v29 = v28.isActiveProfileOwner(v24);
  - Access Control Level: SYS_OR_SIG

- API Name: editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8398873805999756, Code:
int v1 = Binder.getCallingUid();
List v21 = AccountManagerService.getTypesForCaller(v1, v18, 0);
AccountManagerService$16 v43 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
  - Similarity: 0.8122978806495667, Code:
int v1 = Binder.getCallingUid();
List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
AccountManagerService$16 v31 = new AccountManagerService$16(p0,v29,p1,p2,p3,1,0,0,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8257534503936768, Code:
int v1 = Binder.getCallingUid();
UserHandle v23 = UserHandle.of(p4);
List v27 = AccountManagerService.getTypesForCaller(v1, v24, 0);
boolean v28 = v26.contains(Account.type);
if (v25 != 0) { ... }
  - Similarity: 0.824268639087677, Code:
Object v35 = LocalServices.getService(DevicePolicyManagerInterna.class);
boolean v36 = v35.isActiveProfileOwner(v1);
boolean v37 = v35.isActiveDeviceOwner(v1);
p1.onError(101, "User cannot modify accounts of this type (policy).");
  - Similarity: 0.8143336772918701, Code:
int v12 = Binder.getCallingPid();
if (p2 == 0) { Preconditions.checkArgument(1, "account cannot be null"); }
boolean v20 = p0.isCrossUser(v1, p4);
boolean v23 = p0.isAccountManagedByCaller(Account.type, v1, v22);
  - Access Control Level: SYS_OR_SIG

- API Name: clearPassword(Landroid/accounts/Account;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8079034090042114, Code:
int var1 = Binder.getCallingUid();
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8051363825798035, Code:
int v3 = Binder.getCallingUid();
int v4 = UserHandle.getCallingUserId();
List v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);
boolean v8 = v6.contains(Account.type);
  - Access Control Level: SYS_OR_SIG

