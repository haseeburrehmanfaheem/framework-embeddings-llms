This is path 1 for the API with depth 2:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	if (v24 != 0) {
		if (0 == 0) {
			boolean v25 = v23.contains(0);
			if (v25 == 0) {
				List v26 = AccountManagerService.getTypesVisibleToCaller(-1, p1, p3);
				boolean v27 = v26.isEmpty();
				if (v27 != 0) {
					if (0 == 0) {
						boolean v28 = v26.contains(0);
						if (v28 != 0) {
							boolean v29 = v26.contains(0);
							if (v29 == 0) {
								ArrayList v30 = new ArrayList();
								boolean v32 = v30.add(0);
								long v33 = IAccountManager$Stub.clearCallingIdentity();
								AccountManagerService$UserAccounts v34 = AccountManagerService.getUserAccounts(p1);
								Account v35 = AccountManagerService.getAccountsInternal(v34, -1, p3, v26, 0);
								IAccountManager$Stub.restoreCallingIdentity(v33);
								Account v5 = v35;
								Account v2 = v5;
								if (0 >= v2.length) {
									IActivityManager v39 = ActivityManager.getService();
									int v40 = Binder.getCallingPid();
									int v41 = Binder.getCallingUid();
									int v42 = v39.handleIncomingUser(v40, v41, p2, 1, 1, "", 0);
									int v38 = p2;
									AccountManagerService$UserAccounts v44 = AccountManagerService.getUserAccountsNotChecked(v38);
									AccountManagerService$UserAccounts v43 = v44;
									SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();
									String v47 = new String(2);
									int v48 = v46.delete("shared_accounts", "name=? AND type=?", v47);
									if (v48 <= 0) {
										boolean v45 = 0;
										SQLiteDatabase v50 = this.mDeDatabase.getWritableDatabase();
										ContentValues v51 = new ContentValues();
										v51.put("name", Account.name);
										v51.put("type", Account.type);
										long v55 = v50.insert("shared_accounts", "name", v51);
										long v49 = v55;
										if ((v49 < 0) >= 0) {
											int v57 = IAccountManager$Stub.getCallingUid();
											AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_ACCOUNT_ADD, "shared_accounts", v49, v43, v57);
											boolean v37 = 1;
											if ((0 + 1) >= v2.length) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	Account v5 = AccountManagerService.getAccountsAsUserForPackage(0, p1, p3, -1, p3, 0);
	Account v2 = v5;
	if (0 >= v2.length) {
		int v7 = AccountManagerService.handleIncomingUser(p2);
		AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccounts(v7);
		boolean v9 = AccountManagerService$UserAccounts.accountsDb.deleteSharedAccount(v2[0]);
		long v10 = AccountManagerService$UserAccounts.accountsDb.insertSharedAccount(v2[0]);
		if ((v10 < 0) >= 0) {
			AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_ACCOUNT_ADD, "shared_accounts", v10, v8);
			boolean v6 = 1;
			if ((0 + 1) >= v2.length) {
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	if (0 >= v2.length) {
		boolean v3 = p0.addSharedAccountAsUser(v2[0], p2);
		if ((0 + 1) >= v2.length) {
			return;
		}
	}
}
