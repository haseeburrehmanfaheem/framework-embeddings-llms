The method addSharedAccountsFromParentUser in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	if (v24 != 0) {
		if (0 == 0) {
			boolean v25 = v23.contains(0);
			if (v25 == 0) {
				List v26 = AccountManagerService.getTypesVisibleToCaller(-1, p1, p3);
				boolean v27 = v26.isEmpty();
				if (v27 != 0) {
					if (0 == 0) {
						boolean v28 = v26.contains(0);
						if (v28 != 0) {
							boolean v29 = v26.contains(0);
							if (v29 == 0) {
								ArrayList v30 = new ArrayList();
								boolean v32 = v30.add(0);
								long v33 = IAccountManager$Stub.clearCallingIdentity();
								AccountManagerService$UserAccounts v34 = AccountManagerService.getUserAccounts(p1);
								Account v35 = AccountManagerService.getAccountsInternal(v34, -1, p3, v26, 0);
								IAccountManager$Stub.restoreCallingIdentity(v33);
								Account v5 = v35;
								Account v2 = v5;
								if (0 >= v2.length) {
									IActivityManager v39 = ActivityManager.getService();
									int v40 = Binder.getCallingPid();
									int v41 = Binder.getCallingUid();
									int v42 = v39.handleIncomingUser(v40, v41, p2, 1, 1, "", 0);
									int v38 = p2;
									AccountManagerService$UserAccounts v44 = AccountManagerService.getUserAccountsNotChecked(v38);
									AccountManagerService$UserAccounts v43 = v44;
									SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();
									String v47 = new String(2);
									int v48 = v46.delete("shared_accounts", "name=? AND type=?", v47);
									if (v48 <= 0) {
										boolean v45 = 0;
										SQLiteDatabase v50 = this.mDeDatabase.getWritableDatabase();
										ContentValues v51 = new ContentValues();
										v51.put("name", Account.name);
										v51.put("type", Account.type);
										long v55 = v50.insert("shared_accounts", "name", v51);
										long v49 = v55;
										if ((v49 < 0) >= 0) {
											int v57 = IAccountManager$Stub.getCallingUid();
											AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_ACCOUNT_ADD, "shared_accounts", v49, v43, v57);
											boolean v37 = 1;
											if ((0 + 1) >= v2.length) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	Account v5 = AccountManagerService.getAccountsAsUserForPackage(0, p1, p3, -1, p3, 0);
	Account v2 = v5;
	if (0 >= v2.length) {
		int v7 = AccountManagerService.handleIncomingUser(p2);
		AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccounts(v7);
		boolean v9 = AccountManagerService$UserAccounts.accountsDb.deleteSharedAccount(v2[0]);
		long v10 = AccountManagerService$UserAccounts.accountsDb.insertSharedAccount(v2[0]);
		if ((v10 < 0) >= 0) {
			AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_ACCOUNT_ADD, "shared_accounts", v10, v8);
			boolean v6 = 1;
			if ((0 + 1) >= v2.length) {
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	Account v2 = p0.getAccountsAsUser(0, p1, p3);
	if (0 >= v2.length) {
		boolean v3 = p0.addSharedAccountAsUser(v2[0], p2);
		if ((0 + 1) >= v2.length) {
			return;
		}
	}
}

and the following sink code:
['List v26 = AccountManagerService.getTypesVisibleToCaller(-1, p1, p3);\nAccountManagerService$UserAccounts v34 = AccountManagerService.getUserAccounts(p1);\nAccount v35 = AccountManagerService.getAccountsInternal(v34, -1, p3, v26, 0);\nSQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();\nint v48 = v46.delete("shared_accounts", "name=? AND type=?", v47);\nlong v55 = v50.insert("shared_accounts", "name", v51);', 'Account v5 = AccountManagerService.getAccountsAsUserForPackage(0, p1, p3, -1, p3, 0);\nboolean v9 = AccountManagerService$UserAccounts.accountsDb.deleteSharedAccount(v2[0]);\nlong v10 = AccountManagerService$UserAccounts.accountsDb.insertSharedAccount(v2[0]);', 'Account v2 = p0.getAccountsAsUser(0, p1, p3);\nboolean v3 = p0.addSharedAccountAsUser(v2[0], p2);']

The method addSharedAccountsFromParentUser has the following similar APIs:

- API Name: removeAccountExplicitly(Landroid/accounts/Account;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8277570009231567, Code:
List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccounts(v20);
long v53 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8097518086433411, Code:
boolean v2 = p0.someUserHasAccountNoChecks(p1, p2);
return v2;
  - Access Control Level: SYS_OR_SIG

- API Name: accountAuthenticated(Landroid/accounts/Account;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8093778491020203, Code:
List v10 = AccountManagerService.getTypesManagedByCaller(v1, v8);
UserManager v14 = AccountManagerService.getUserManager();
v14.getUserRestrictions(v15);
AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.7855591177940369, Code:
int v1 = Binder.getCallingUid();
List v18 = AccountManagerService.getTypesManagedByCaller(v1, v16);
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v30 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
long v32 = AccountManagerService$UserAccounts.accountsDb.insertExtra(v30, p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.781975507736206, Code:
List v22 = AccountManagerService.getTypesForCaller(v1, v20, 1);
boolean v23 = v21.contains(p2);
Account v35 = new Account((0 + v33.length));
Collection v36 = AccountManagerService$UserAccounts.accountCache.values();
  - Access Control Level: SYS_OR_SIG

