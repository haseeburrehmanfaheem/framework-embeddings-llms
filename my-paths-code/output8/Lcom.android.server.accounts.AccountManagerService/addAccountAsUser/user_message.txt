This is path 1 for the API with depth 2:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		String v13 = Arrays.toString(p4);
		int v18 = Binder.getCallingUid();
		int v21 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(1, "accountType cannot be null");
				if (v31 == 0) {
					boolean v29 = 1;
					if (v29 != 0) {
						Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
						if (v34 == 0) {
							boolean v35 = v34.isActiveProfileOwner(v2);
							if (v35 != 0) {
								boolean v36 = v34.isActiveDeviceOwner(v2);
								if (v36 == 0) {
									boolean v33 = 1;
									if (v33 == 0) {
										if (this.mUserManager != 0) {
											UserManager v38 = UserManager.get(this.mContext);
											this.mUserManager = v38;
											UserManager v37 = this.mUserManager;
											UserHandle v39 = new UserHandle(p7);
											Bundle v41 = v37.getUserRestrictions(v39);
											boolean v42 = v41.getBoolean("no_modify_accounts");
											if (v42 == 0) {
												boolean v32 = 0;
												if (v32 != 0) {
													Object v45 = LocalServices.getService(DevicePolicyManagerInterna.class);
													if (v45 == 0) {
														boolean v46 = v45.isActiveProfileOwner(v2);
														if (v46 != 0) {
															boolean v47 = v45.isActiveDeviceOwner(v2);
															if (v47 == 0) {
																boolean v44 = 1;
																if (v44 == 0) {
																	Object v48 = this.mContext.getSystemService("device_policy");
																	String v49 = v48.getAccountTypesWithManagementDisabledAsUser(p7);
																	if (v49 != 0) {
																		if (0 >= v49.length) {
																			boolean v50 = v49[0].equals(p2);
																			if (v50 == 0) {
																				if ((0 + 1) >= v49.length) {
																					boolean v51 = v49[(0 + 1)].equals(p2);
																					if (v51 == 0) {
																						boolean v43 = 0;
																						if (v43 != 0) {
																							int v53 = Binder.getCallingPid();
																							int v54 = Binder.getCallingUid();
																							if (p6 != 0) {
																								Bundle v55 = new Bundle();
																								v55.putInt("callerUid", v54);
																								v55.putInt("callerPid", v53);
																								long v59 = IAccountManager$Stub.clearCallingIdentity();
																								AccountManagerService$UserAccounts v61 = AccountManagerService.getUserAccountsNotChecked(p7);
																								AccountManagerService$UserAccounts v60 = v61;
																								AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v60, v54);
																								AccountManagerService$9 v64 = new AccountManagerService$9(AccountManagerService,v60,p1,p2,p5,1,0,0,1,p3,p4,v55,p2);
																								if (v67 == 0) {
																									boolean v74 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																									if (v74 != 0) {
																										String v78 = AccountManagerService$Session.toDebugString();
																										AccountManagerService$Session.onError(1, "bind failure");
																										IAccountManager$Stub.restoreCallingIdentity(v59);
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		String v13 = Arrays.toString(p4);
		int v18 = Binder.getCallingUid();
		int v21 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(1, "accountType cannot be null");
				if (v31 == 0) {
					boolean v29 = 1;
					if (v29 != 0) {
						boolean v33 = AccountManagerService.isProfileOwner(v2);
						if (v33 == 0) {
							UserManager v34 = AccountManagerService.getUserManager();
							UserHandle v35 = new UserHandle(p7);
							Bundle v37 = v34.getUserRestrictions(v35);
							boolean v38 = v37.getBoolean("no_modify_accounts");
							if (v38 == 0) {
								boolean v32 = 0;
								if (v32 != 0) {
									boolean v40 = AccountManagerService.isProfileOwner(v2);
									if (v40 == 0) {
										Object v41 = this.mContext.getSystemService("device_policy");
										String v42 = v41.getAccountTypesWithManagementDisabledAsUser(p7);
										if (v42 != 0) {
											if (0 >= v42.length) {
												boolean v43 = v42[0].equals(p2);
												if (v43 == 0) {
													if ((0 + 1) >= v42.length) {
														boolean v44 = v42[(0 + 1)].equals(p2);
														if (v44 == 0) {
															boolean v39 = 0;
															if (v39 != 0) {
																p1.onError(101, "User cannot modify accounts of this type (policy).");
																Object v47 = LocalServices.getService(DevicePolicyManagerInterna.class);
																if (v47 != 0) {
																	if (101 != 100) {
																		if (101 != 101) {
																			Intent v48 = v47.createShowAdminSupportIntent(p7, 0);
																			if (getDefaultCantAddAccountIntent() != 0) {
																				Intent v49 = AccountManagerService.getDefaultCantAddAccountIntent(101);
																				long v50 = IAccountManager$Stub.clearCallingIdentity();
																				UserHandle v51 = new UserHandle(p7);
																				this.mContext.startActivityAsUser(getDefaultCantAddAccountIntent(), v51);
																				IAccountManager$Stub.restoreCallingIdentity(v50);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		String v13 = Arrays.toString(p4);
		int v18 = Binder.getCallingUid();
		int v21 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(1, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(1, "accountType cannot be null");
				boolean v29 = p0.isCrossUser(v2, p7);
				if (v29 != 0) {
					boolean v30 = p0.canUserModifyAccounts(p7, v2);
					if (v30 != 0) {
						boolean v31 = p0.canUserModifyAccountsForType(p7, p2, v2);
						if (v31 != 0) {
							p1.onError(101, "User cannot modify accounts of this type (policy).");
							p0.showCantAddAccount(101, p7);
							return;
						}
					}
				}
			}
		}
	}
}
