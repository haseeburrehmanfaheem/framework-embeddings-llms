This is path 1 for the API with depth 2:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	if (v13 == 0) {
		Object v14 = v12.next();
		if (v3 != 0) {
			boolean v15 = v10.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v1, 16);
			if (v15 == 0) {
				boolean v16 = v5.add(AuthenticatorDescription.type);
				boolean v17 = v12.hasNext();
				if (v17 == 0) {
					List v4 = v5;
					if (p2 == 0) {
						boolean v18 = v4.contains(p2);
						if (v18 == 0) {
							if (p2 != 0) {
								if (v3 == 0) {
									if (p2 == 0) {
										ArrayList v19 = new ArrayList();
										boolean v21 = v19.add(p2);
										long v22 = IAccountManager$Stub.clearCallingIdentity();
										Object v25 = this.mUsers.get(v2);
										if (v25 != 0) {
											boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
											if (v26 != 0) {
												boolean v27 = this.mLocalUnlockedUsers.get(v2);
												if (v27 == 0) {
													File v35 = new File(v36);
													String v36 = this.mInjector.getCeDatabaseName(v2);
													AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
													AccountManagerService.syncDeCeAccountsLocked(v25);
													if (0 == 0) {
														AccountManagerService.validateAccountsInternal(v25, 1);
														AccountManagerService$UserAccounts v24 = v25;
														AccountManagerService$UserAccounts v23 = v24;
														Integer v41 = Integer.valueOf(v1);
														int v43 = this.userId;
														long v45 = IAccountManager$Stub.clearCallingIdentity();
														int v46 = this.mPackageManager.getPackageUidAsUser(p1, v43);
														IAccountManager$Stub.restoreCallingIdentity(v45);
														boolean v44 = 0;
														if (v44 != 0) {
															LinkedHashMap v48 = new LinkedHashMap();
															Iterator v50 = v4.iterator();
															boolean v51 = v50.hasNext();
															if (v51 == 0) {
																Object v52 = v50.next();
																Object v53 = AccountManagerService$UserAccounts.accountCache.get(v52);
																if (v53 == 0) {
																	if (0 >= v53.length) {
																		Object v55 = Objects.requireNonNull(p1, "packageName cannot be null");
																		long v56 = IAccountManager$Stub.clearCallingIdentity();
																		int v57 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v23);
																		int v58 = this.mPackageManager.getPackageUidAsUser(p1, v57);
																		IAccountManager$Stub.restoreCallingIdentity(v56);
																		String v63 = caughtException.getMessage();
																		Integer v67 = Integer.valueOf(3);
																		Integer v54 = v67;
																		Object v68 = v48.put(v53[0], v54);
																		if ((0 + 1) >= v53.length) {
																			boolean v69 = v50.hasNext();
																			if (v69 == 0) {
																				int v70 = v41.intValue();
																				UserManager v72 = AccountManagerService.getUserManager();
																				if (v72 == 0) {
																					if (v23 == 0) {
																						int v73 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v23);
																						if (v73 < 0) {
																							if (v70 != 1000) {
																								UserManager v74 = AccountManagerService.getUserManager();
																								int v75 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v23);
																								UserInfo v76 = v74.getUserInfo(v75);
																								if (v76 == 0) {
																									boolean v77 = v76.isRestricted();
																									if (v77 == 0) {
																										String v78 = this.mPackageManager.getPackagesForUid(v70);
																										if (v78 != 0) {
																											String v79 = new String(0);
																											Resources v80 = this.mContext.getResources();
																											String v81 = v80.getString(17039884);
																											if (0 >= v78.length) {
																												StringBuilder v82 = new StringBuilder();
																												StringBuilder v84 = v82.append(";");
																												StringBuilder v85 = v82.append(v78[0]);
																												StringBuilder v86 = v82.append(";");
																												String v87 = v82.toString();
																												boolean v88 = v81.contains(v87);
																												if (v88 == 0) {
																													if ((0 + 1) >= v78.length) {
																														StringBuilder v89 = new StringBuilder();
																														StringBuilder v91 = v89.append(";");
																														StringBuilder v92 = v89.append(v78[(0 + 1)]);
																														StringBuilder v93 = v89.append(";");
																														String v94 = v89.toString();
																														boolean v95 = v81.contains(v94);
																														if (v95 == 0) {
																															Map v71 = v48;
																															Map v42 = v71;
																															IAccountManager$Stub.restoreCallingIdentity(v22);
																															return v42;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v10 = LocalServices.getService(PackageManagerInterna.class);
	Iterator v11 = v8.iterator();
	boolean v12 = v11.hasNext();
	if (v12 == 0) {
		Object v13 = v11.next();
		if (v3 != 0) {
			boolean v14 = v10.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v1, 16);
			if (v14 == 0) {
				boolean v15 = v5.add(AuthenticatorDescription.type);
				boolean v16 = v11.hasNext();
				if (v16 == 0) {
					List v4 = v5;
					if (p2 == 0) {
						boolean v17 = v4.contains(p2);
						if (v17 == 0) {
							if (p2 != 0) {
								if (v3 == 0) {
									if (p2 == 0) {
										ArrayList v18 = new ArrayList();
										boolean v20 = v18.add(p2);
										long v21 = IAccountManager$Stub.clearCallingIdentity();
										AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v2);
										AccountManagerService$UserAccounts v22 = v23;
										Integer v24 = Integer.valueOf(v1);
										int v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
										boolean v27 = AccountManagerService.packageExistsForUser(p1, v26);
										if (v27 != 0) {
											LinkedHashMap v28 = new LinkedHashMap();
											Iterator v30 = v4.iterator();
											boolean v31 = v30.hasNext();
											if (v31 == 0) {
												Object v32 = v30.next();
												Object v33 = AccountManagerService$UserAccounts.accountCache.get(v32);
												if (v33 == 0) {
													if (0 >= v33.length) {
														Integer v34 = AccountManagerService.resolveAccountVisibility(v33[0], p1, v22);
														Object v35 = v28.put(v33[0], v34);
														if ((0 + 1) >= v33.length) {
															boolean v36 = v30.hasNext();
															if (v36 == 0) {
																int v37 = v24.intValue();
																Map v38 = AccountManagerService.filterSharedAccounts(v22, v28, v37, p1);
																Map v25 = v38;
																IAccountManager$Stub.restoreCallingIdentity(v21);
																return v25;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	List v4 = p0.getTypesForCaller(v1, v2, v3);
	if (p2 == 0) {
		boolean v5 = v4.contains(p2);
		if (v5 == 0) {
			if (p2 != 0) {
				if (v3 == 0) {
					if (p2 == 0) {
						ArrayList v6 = new ArrayList();
						boolean v8 = v6.add(p2);
						long v9 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v2);
						Integer v11 = Integer.valueOf(v1);
						Map v12 = p0.getAccountsAndVisibilityForPackage(p1, v4, v11, v10);
						IAccountManager$Stub.restoreCallingIdentity(v9);
						return v12;
					}
				}
			}
		}
	}
}
