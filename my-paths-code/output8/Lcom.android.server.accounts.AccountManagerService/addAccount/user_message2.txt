The method addAccount in the following class Lcom.android.server.accounts.AccountManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v28 == 0) {
					boolean v29 = v28.isActiveProfileOwner(v24);
					if (v29 != 0) {
						boolean v30 = v28.isActiveDeviceOwner(v24);
						if (v30 == 0) {
							boolean v27 = 1;
							if (v27 == 0) {
								if (this.mUserManager != 0) {
									UserManager v32 = UserManager.get(this.mContext);
									this.mUserManager = v32;
									UserManager v31 = this.mUserManager;
									UserHandle v33 = new UserHandle(v25);
									Bundle v35 = v31.getUserRestrictions(v33);
									boolean v36 = v35.getBoolean("no_modify_accounts");
									if (v36 == 0) {
										boolean v26 = 0;
										if (v26 != 0) {
											Object v39 = LocalServices.getService(DevicePolicyManagerInterna.class);
											if (v39 == 0) {
												boolean v40 = v39.isActiveProfileOwner(v24);
												if (v40 != 0) {
													boolean v41 = v39.isActiveDeviceOwner(v24);
													if (v41 == 0) {
														boolean v38 = 1;
														if (v38 == 0) {
															Object v42 = this.mContext.getSystemService("device_policy");
															String v43 = v42.getAccountTypesWithManagementDisabledAsUser(v25);
															if (v43 != 0) {
																if (0 >= v43.length) {
																	boolean v44 = v43[0].equals(p2);
																	if (v44 == 0) {
																		if ((0 + 1) >= v43.length) {
																			boolean v45 = v43[(0 + 1)].equals(p2);
																			if (v45 == 0) {
																				boolean v37 = 0;
																				if (v37 != 0) {
																					int v47 = Binder.getCallingPid();
																					int v48 = Binder.getCallingUid();
																					if (p6 != 0) {
																						Bundle v49 = new Bundle();
																						v49.putInt("callerUid", v48);
																						v49.putInt("callerPid", v47);
																						long v53 = IAccountManager$Stub.clearCallingIdentity();
																						AccountManagerService$UserAccounts v55 = AccountManagerService.getUserAccountsNotChecked(v25);
																						AccountManagerService$UserAccounts v54 = v55;
																						AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v54, v48);
																						AccountManagerService$9 v58 = new AccountManagerService$9(AccountManagerService,v54,p1,p2,p5,1,0,0,1,p3,p4,v49,p2);
																						if (v61 == 0) {
																							boolean v68 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																							if (v68 != 0) {
																								String v72 = AccountManagerService$Session.toDebugString();
																								AccountManagerService$Session.onError(1, "bind failure");
																								IAccountManager$Stub.restoreCallingIdentity(v53);
																								return;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				boolean v27 = AccountManagerService.isProfileOwner(v24);
				if (v27 == 0) {
					UserManager v28 = AccountManagerService.getUserManager();
					UserHandle v29 = new UserHandle(v25);
					Bundle v31 = v28.getUserRestrictions(v29);
					boolean v32 = v31.getBoolean("no_modify_accounts");
					if (v32 == 0) {
						boolean v26 = 0;
						if (v26 != 0) {
							boolean v34 = AccountManagerService.isProfileOwner(v24);
							if (v34 == 0) {
								Object v35 = this.mContext.getSystemService("device_policy");
								String v36 = v35.getAccountTypesWithManagementDisabledAsUser(v25);
								if (v36 != 0) {
									if (0 >= v36.length) {
										boolean v37 = v36[0].equals(p2);
										if (v37 == 0) {
											if ((0 + 1) >= v36.length) {
												boolean v38 = v36[(0 + 1)].equals(p2);
												if (v38 == 0) {
													boolean v33 = 0;
													if (v33 != 0) {
														p1.onError(101, "User cannot modify accounts of this type (policy).");
														Object v41 = LocalServices.getService(DevicePolicyManagerInterna.class);
														if (v41 != 0) {
															if (101 != 100) {
																if (101 != 101) {
																	Intent v42 = v41.createShowAdminSupportIntent(v25, 0);
																	if (getDefaultCantAddAccountIntent() != 0) {
																		Intent v43 = AccountManagerService.getDefaultCantAddAccountIntent(101);
																		long v44 = IAccountManager$Stub.clearCallingIdentity();
																		UserHandle v45 = new UserHandle(v25);
																		this.mContext.startActivityAsUser(getDefaultCantAddAccountIntent(), v45);
																		IAccountManager$Stub.restoreCallingIdentity(v44);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				boolean v26 = p0.canUserModifyAccounts(v25, v24);
				if (v26 != 0) {
					boolean v27 = p0.canUserModifyAccountsForType(v25, p2, v24);
					if (v27 != 0) {
						p1.onError(101, "User cannot modify accounts of this type (policy).");
						p0.showCantAddAccount(101, v25);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v17 = Binder.getCallingUid();\nint v25 = UserHandle.getUserId(v24);\nObject v28 = LocalServices.getService(DevicePolicyManagerInterna.class);\nboolean v29 = v28.isActiveProfileOwner(v24);', 'Bundle v1 = Bundle.setDefusable(p6, 1);\nString v12 = Arrays.toString(p4);\nAccountManagerService$9 v58 = new AccountManagerService$9(AccountManagerService,v54,p1,p2,p5,1,0,0,1,p3,p4,v49,p2);', 'boolean v26 = p0.canUserModifyAccounts(v25, v24);\nboolean v27 = p0.canUserModifyAccountsForType(v25, p2, v24);']

The method addAccount has the following similar APIs:

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9611619710922241, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
  - Similarity: 0.9423258900642395, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v21 = p0.getUserAccounts(p5);
AccountManagerService$12 v22 = new AccountManagerService$12(p0,v21,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
v22.bind();
  - Similarity: 0.9244970679283142, Code:
Bundle v1 = Bundle.setDefusable(p3, 1);
AccountManagerService$UserAccounts v25 = this.mUsers.get(p5);
AccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
AccountManagerService.syncDeCeAccountsLocked(v25);
AccountManagerService.validateAccountsInternal(v25, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9486992955207825, Code:
Bundle v1 = Bundle.setDefusable(p5, 1);
AccountManagerService$14 v45 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
v28.bind();
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9319018125534058, Code:
Bundle v1 = Bundle.setDefusable(p6, 1);
int v2 = Binder.getCallingUid();
AccountManagerService$UserAccounts v61 = AccountManagerService.getUserAccountsNotChecked(p7);
AccountManagerService$9 v64 = new AccountManagerService$9(AccountManagerService,v60,p1,p2,p5,1,0,0,1,p3,p4,v55,p2);
  - Access Control Level: SYS_OR_SIG

- API Name: startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.9057177305221558, Code:
boolean v28 = p0.canUserModifyAccounts(v27, v26);
boolean v29 = p0.canUserModifyAccountsForType(v27, p2, v26);
p1.onError(101, "User cannot modify accounts of this type (policy).");
  - Access Control Level: SYS_OR_SIG

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8901609778404236, Code:
Bundle v2 = Bundle.setDefusable(p3, 1);
boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, v2, v3, 0, p4);
return v21;
  - Access Control Level: SYS_OR_SIG

