The method getAccountVisibility has the following code snippet:

This is path 1 for the API with depth 2:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(v4);
				if (v13 != 0) {
					boolean v14 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v14 != 0) {
						boolean v15 = this.mLocalUnlockedUsers.get(v4);
						if (v15 == 0) {
							File v23 = new File(v24);
							String v24 = this.mInjector.getCeDatabaseName(v4);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v23);
							AccountManagerService.syncDeCeAccountsLocked(v13);
							if (0 == 0) {
								AccountManagerService.validateAccountsInternal(v13, 1);
								AccountManagerService$UserAccounts v12 = v13;
								AccountManagerService$UserAccounts v11 = v12;
								boolean v29 = "android:accounts:key_legacy_visible".equals(p2);
								if (v29 == 0) {
									boolean v30 = "android:accounts:key_legacy_not_visible".equals(p2);
									if (v30 == 0) {
										if (v37 == 0) {
											int v38 = this.userId;
											if (Account.type != 0) {
												long v40 = Binder.clearCallingIdentity();
												Collection v41 = this.mAuthenticatorCache.getAllServices(v38);
												Binder.restoreCallingIdentity(v40);
												Object v43 = LocalServices.getService(PackageManagerInterna.class);
												Iterator v44 = v41.iterator();
												boolean v45 = v44.hasNext();
												if (v45 == 0) {
													Object v46 = v44.next();
													boolean v47 = Account.type.equals(AuthenticatorDescription.type);
													if (v47 == 0) {
														if (RegisteredServicesCache$ServiceInfo.uid != v35) {
															boolean v48 = v43.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v35, 16);
															if (v48 == 0) {
																boolean v49 = v44.hasNext();
																if (v49 == 0) {
																	Object v50 = v44.next();
																	boolean v51 = Account.type.equals(AuthenticatorDescription.type);
																	if (v51 == 0) {
																		if (RegisteredServicesCache$ServiceInfo.uid != v35) {
																			boolean v52 = v43.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v35, 16);
																			if (v52 == 0) {
																				int v39 = 1;
																				if (v39 != 2) {
																					Map v54 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, v11);
																					Object v55 = v54.get(p2);
																					if (v55 == 0) {
																						int v56 = v55.intValue();
																						int v53 = v56;
																						if (v53 == 0) {
																							Integer v57 = Integer.valueOf(v53);
																							Integer v31 = v57;
																							int v58 = v31.intValue();
																							IAccountManager$Stub.restoreCallingIdentity(v10);
																							return v58;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v6 = AccountManagerService.getTypesManagedByCaller(v3, v4);
		boolean v7 = v6.contains(Account.type);
		boolean v5 = v7;
		if (v5 != 0) {
			long v9 = Binder.clearCallingIdentity();
			String v10 = this.mPackageManager.getPackagesForUid(v3);
			if (v10 == 0) {
				if (0 >= v10.length) {
					PackageInfo v11 = this.mPackageManager.getPackageInfo(v10[0], 0);
					if (v11 == 0) {
						if ((ApplicationInfo.flags & 1) == 0) {
							if ((0 + 1) >= v10.length) {
								PackageInfo v12 = this.mPackageManager.getPackageInfo(v10[(0 + 1)], 0);
								if (v12 == 0) {
									if ((ApplicationInfo.flags & 1) == 0) {
										Binder.restoreCallingIdentity(v9);
										boolean v8 = 1;
										if (v8 == 0) {
											long v14 = IAccountManager$Stub.clearCallingIdentity();
											AccountManagerService$UserAccounts v16 = AccountManagerService.getUserAccountsNotChecked(v4);
											AccountManagerService$UserAccounts v15 = v16;
											boolean v17 = "android:accounts:key_legacy_visible".equals(p2);
											if (v17 == 0) {
												boolean v18 = "android:accounts:key_legacy_not_visible".equals(p2);
												if (v18 == 0) {
													Object v20 = Objects.requireNonNull(p2, "packageName cannot be null");
													long v21 = IAccountManager$Stub.clearCallingIdentity();
													int v22 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v15);
													int v23 = this.mPackageManager.getPackageUidAsUser(p2, v22);
													IAccountManager$Stub.restoreCallingIdentity(v21);
													String v28 = caughtException.getMessage();
													Integer v32 = Integer.valueOf(3);
													Integer v19 = v32;
													int v33 = v19.intValue();
													IAccountManager$Stub.restoreCallingIdentity(v14);
													return v33;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	if (v5 != 0) {
		boolean v6 = p0.isSystemUid(v3);
		if (v6 == 0) {
			long v7 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
			boolean v9 = "android:accounts:key_legacy_visible".equals(p2);
			if (v9 == 0) {
				boolean v10 = "android:accounts:key_legacy_not_visible".equals(p2);
				if (v10 == 0) {
					int v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);
					if (v11 == 0) {
						IAccountManager$Stub.restoreCallingIdentity(v7);
						return v11;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = Binder.getCallingUid();\nint v4 = UserHandle.getCallingUserId();\nList v7 = AccountManagerService.getTypesForCaller(v3, v4, 0);\nboolean v8 = v6.contains(Account.type);', 'long v10 = IAccountManager$Stub.clearCallingIdentity();\nObject v13 = this.mUsers.get(v4);\nAccountManagerService.syncDeCeAccountsLocked(v13);', 'Map v54 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, v11);\nObject v55 = v54.get(p2);\nint v56 = v55.intValue();']

The method getAccountVisibility has the following similar APIs:

- API Name: removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V with Similarity Score: 0.954190194606781
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
UserHandle v23 = UserHandle.of(p4);
List v27 = AccountManagerService.getTypesForCaller(v1, v24, 0);
boolean v28 = v26.contains(Account.type);
if (v25 != 0) { ... }

- API Name: setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z with Similarity Score: 0.9247926473617554
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v21 = AccountManagerService.updateAccountVisibilityLocked(p1, p2, p3, v15);
Map v70 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, v11);
Integer v71 = Integer.valueOf(p3);
Object v72 = v70.put(p2, v71);

