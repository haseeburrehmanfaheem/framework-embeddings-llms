This is path 1 for the API with depth 2:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	if (v1 == 0) {
		int v9 = Binder.getCallingUid();
		int v12 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v16 = TextUtils.isEmpty(p3);
				if (v16 != 0) {
					int v17 = UserHandle.getCallingUserId();
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					Object v21 = this.mUsers.get(v17);
					if (v21 != 0) {
						boolean v22 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v22 != 0) {
							boolean v23 = this.mLocalUnlockedUsers.get(v17);
							if (v23 == 0) {
								File v31 = new File(v32);
								String v32 = this.mInjector.getCeDatabaseName(v17);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v31);
								AccountManagerService.syncDeCeAccountsLocked(v21);
								if (0 == 0) {
									AccountManagerService.validateAccountsInternal(v21, 1);
									AccountManagerService$UserAccounts v20 = v21;
									AccountManagerService$UserAccounts v19 = v20;
									AccountManagerService$15 v37 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
									if (v40 == 0) {
										IAccountAuthenticatorCache v48 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
										AuthenticatorDescription v49 = AuthenticatorDescription.newKey(this.mAccountType);
										int v50 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										RegisteredServicesCache$ServiceInfo v51 = v48.getServiceInfo(v49, v50);
										if (v51 != 0) {
											int v52 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
											boolean v53 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v52);
											if (v53 != 0) {
												if (ComponentInfo.directBootAware != 0) {
													Intent v54 = new Intent();
													Intent v56 = v54.setAction("android.accounts.AccountAuthenticator");
													Intent v57 = v54.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
													if (v58 == 0) {
														IAccountAuthenticatorCache v65 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
														int v66 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														boolean v67 = v65.getBindInstantServiceAllowed(v66);
														if (v67 == 0) {
															int v68 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
															UserHandle v69 = UserHandle.of(v68);
															boolean v70 = AccountManagerService.mContext.bindServiceAsUser(v54, AccountManagerService$Session, 4194305, v69);
															if (v70 != 0) {
																if (v71 == 0) {
																	boolean v47 = 0;
																	if (v47 != 0) {
																		long v76 = SystemClock.elapsedRealtime();
																		String v77 = AccountManagerService$Session.toDebugString(v76);
																		String v75 = v77;
																		this.mNumErrors = (this.mNumErrors + 1);
																		IAccountManagerResponse v82 = AccountManagerService$Session.getResponseAndClose();
																		if (v82 == 0) {
																			if (v83 == 0) {
																				Class v86 = AccountManagerService$Session.getClass();
																				String v87 = v86.getSimpleName();
																				v82.onError(1, "bind failure");
																				if (v94 == 0) {
																					IAccountManager$Stub.restoreCallingIdentity(v18);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	if (v1 == 0) {
		int v9 = Binder.getCallingUid();
		int v12 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v16 = TextUtils.isEmpty(p3);
				if (v16 != 0) {
					int v17 = UserHandle.getCallingUserId();
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
					AccountManagerService$UserAccounts v19 = v20;
					AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
					if (v24 == 0) {
						boolean v31 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
						if (v31 != 0) {
							String v35 = AccountManagerService$Session.toDebugString();
							AccountManagerService$Session.onError(1, "bind failure");
							IAccountManager$Stub.restoreCallingIdentity(v18);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	if (v1 == 0) {
		int v9 = Binder.getCallingUid();
		int v12 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v16 = TextUtils.isEmpty(p3);
				if (v16 != 0) {
					int v17 = UserHandle.getCallingUserId();
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v17);
					AccountManagerService$15 v20 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
					v20.bind();
					IAccountManager$Stub.restoreCallingIdentity(v18);
					return;
				}
			}
		}
	}
}
