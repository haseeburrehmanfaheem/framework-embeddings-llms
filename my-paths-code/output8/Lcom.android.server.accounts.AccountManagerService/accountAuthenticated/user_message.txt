This is path 1 for the API with depth 2:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v11 = AccountManagerService.getTypesForCaller(v1, v8, 0);
			List v10 = v11;
			boolean v12 = v10.contains(Account.type);
			boolean v9 = v12;
			if (v9 == 0) {
				Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v15 == 0) {
					boolean v16 = v15.isActiveProfileOwner(v1);
					if (v16 != 0) {
						boolean v17 = v15.isActiveDeviceOwner(v1);
						if (v17 == 0) {
							boolean v14 = 1;
							if (v14 == 0) {
								if (this.mUserManager != 0) {
									UserManager v19 = UserManager.get(this.mContext);
									this.mUserManager = v19;
									UserManager v18 = this.mUserManager;
									UserHandle v20 = new UserHandle(v8);
									Bundle v22 = v18.getUserRestrictions(v20);
									boolean v23 = v22.getBoolean("no_modify_accounts");
									if (v23 == 0) {
										boolean v13 = 0;
										if (v13 == 0) {
											Object v26 = LocalServices.getService(DevicePolicyManagerInterna.class);
											if (v26 == 0) {
												boolean v27 = v26.isActiveProfileOwner(v1);
												if (v27 != 0) {
													boolean v28 = v26.isActiveDeviceOwner(v1);
													if (v28 == 0) {
														boolean v25 = 1;
														if (v25 == 0) {
															Object v29 = this.mContext.getSystemService("device_policy");
															String v30 = v29.getAccountTypesWithManagementDisabledAsUser(v8);
															if (v30 != 0) {
																if (0 >= v30.length) {
																	boolean v31 = v30[0].equals(Account.type);
																	if (v31 == 0) {
																		if ((0 + 1) >= v30.length) {
																			boolean v32 = v30[(0 + 1)].equals(Account.type);
																			if (v32 == 0) {
																				boolean v24 = 0;
																				if (v24 != 0) {
																					long v33 = IAccountManager$Stub.clearCallingIdentity();
																					Object v36 = this.mUsers.get(v8);
																					if (v36 != 0) {
																						boolean v37 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
																						if (v37 != 0) {
																							boolean v38 = this.mLocalUnlockedUsers.get(v8);
																							if (v38 == 0) {
																								File v46 = new File(v47);
																								String v47 = this.mInjector.getCeDatabaseName(v8);
																								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v46);
																								AccountManagerService.syncDeCeAccountsLocked(v36);
																								if (0 == 0) {
																									AccountManagerService.validateAccountsInternal(v36, 1);
																									AccountManagerService$UserAccounts v35 = v36;
																									AccountManagerService$UserAccounts v34 = v35;
																									int v54 = UserHandle.getCallingUserId();
																									AccountManagerService$UserAccounts v55 = AccountManagerService.getUserAccounts(v54);
																									AccountManagerService$UserAccounts v53 = v55;
																									SQLiteDatabase v57 = this.mDeDatabase.getWritableDatabase();
																									ContentValues v58 = new ContentValues();
																									long v60 = System.currentTimeMillis();
																									Long v61 = Long.valueOf(v60);
																									v58.put("last_password_entry_time_millis_epoch", v61);
																									String v63 = new String(2);
																									int v64 = v57.update("accounts", v58, "name=? AND type=?", v63);
																									if (v64 <= 0) {
																										boolean v56 = 0;
																										boolean v52 = v56;
																										IAccountManager$Stub.restoreCallingIdentity(v33);
																										return v52;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v10 = AccountManagerService.getTypesManagedByCaller(v1, v8);
			boolean v11 = v10.contains(Account.type);
			boolean v9 = v11;
			if (v9 == 0) {
				boolean v13 = AccountManagerService.isProfileOwner(v1);
				if (v13 == 0) {
					UserManager v14 = AccountManagerService.getUserManager();
					UserHandle v15 = new UserHandle(v8);
					Bundle v17 = v14.getUserRestrictions(v15);
					boolean v18 = v17.getBoolean("no_modify_accounts");
					if (v18 == 0) {
						boolean v12 = 0;
						if (v12 == 0) {
							boolean v20 = AccountManagerService.isProfileOwner(v1);
							if (v20 == 0) {
								Object v21 = this.mContext.getSystemService("device_policy");
								String v22 = v21.getAccountTypesWithManagementDisabledAsUser(v8);
								if (v22 != 0) {
									if (0 >= v22.length) {
										boolean v23 = v22[0].equals(Account.type);
										if (v23 == 0) {
											if ((0 + 1) >= v22.length) {
												boolean v24 = v22[(0 + 1)].equals(Account.type);
												if (v24 == 0) {
													boolean v19 = 0;
													if (v19 != 0) {
														long v25 = IAccountManager$Stub.clearCallingIdentity();
														AccountManagerService$UserAccounts v27 = AccountManagerService.getUserAccountsNotChecked(v8);
														AccountManagerService$UserAccounts v26 = v27;
														AccountManagerService$UserAccounts v29 = AccountManagerService.getUserAccountsForCaller();
														boolean v30 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
														boolean v28 = v30;
														IAccountManager$Stub.restoreCallingIdentity(v25);
														return v28;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		boolean v9 = p0.isAccountManagedByCaller(Account.type, v1, v8);
		if (v9 == 0) {
			boolean v10 = p0.canUserModifyAccounts(v8, v1);
			if (v10 == 0) {
				boolean v11 = p0.canUserModifyAccountsForType(v8, Account.type, v1);
				if (v11 != 0) {
					long v12 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v13 = p0.getUserAccounts(v8);
					boolean v14 = p0.updateLastAuthenticatedTime(p1);
					IAccountManager$Stub.restoreCallingIdentity(v12);
					return v14;
				}
			}
		}
	}
}
