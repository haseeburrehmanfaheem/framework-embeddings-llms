The method setHibernatingForUser in the following class Lcom.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub has the following code snippet:

This is path 1 for the API with depth 2:
public void setHibernatingForUser(String p1, int p2, boolean p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, "setHibernatingForUser", 0);
	int v4 = v7;
	boolean v9 = this.mUserManager.isUserUnlockingOrUnlocked(v4);
	if (v9 != 0) {
		boolean v10 = this.mUserStates.contains(v4);
		if (v10 != 0) {
			if (1 == 0) {
				boolean v8 = 0;
				if (v8 != 0) {
					Object v11 = this.mUserStates.get(v4);
					Object v12 = v11.get(p1);
					if (v12 == 0) {
						int v13 = Binder.getCallingUid();
						boolean v14 = this.mPackageManagerInternal.canQueryPackage(v13, p1);
						if (v14 != 0) {
							if (UserLevelState.hibernated != p3) {
								UserLevelState.hibernated = p3;
								if (p3 == 0) {
									AppHibernationService$$ExternalSyntheticLambda3 v15 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4);
									this.mBackgroundExecutor.execute(v15);
									long v18 = System.currentTimeMillis();
									UserLevelState.lastUnhibernatedMs = v18;
									UserLevelState v19 = new UserLevelState(v12);
									AppHibernationService$$ExternalSyntheticLambda4 v21 = new AppHibernationService$$ExternalSyntheticLambda4(v19,v4);
									this.mBackgroundExecutor.execute(v21);
									ArrayList v24 = new ArrayList(v26);
									Object v25 = this.mUserStates.get(v4);
									Collection v26 = v25.values();
									Object v28 = this.mUserDiskStores.get(v4);
									this.mScheduledStatesToWrite = v24;
									boolean v30 = this.mExecutorService.isShutdown();
									if (v30 == 0) {
										if (this.mFuture == 0) {
											HibernationStateDiskStore$$ExternalSyntheticLambda0 v31 = new HibernationStateDiskStore$$ExternalSyntheticLambda0(HibernationStateDiskStore);
											ScheduledFuture v33 = this.mExecutorService.schedule(v31, 60000, TimeUnit.MILLISECONDS);
											this.mFuture = v33;
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setHibernatingForUser(String p1, int p2, boolean p3){
	int v4 = AppHibernationService.handleIncomingUser(p2, "setHibernatingForUser");
	boolean v5 = AppHibernationService.checkUserStatesExist(v4, "setHibernatingForUser", 1);
	if (v5 != 0) {
		Object v6 = this.mUserStates.get(v4);
		Object v7 = v6.get(p1);
		if (v7 == 0) {
			int v8 = Binder.getCallingUid();
			boolean v9 = this.mPackageManagerInternal.canQueryPackage(v8, p1);
			if (v9 != 0) {
				if (UserLevelState.hibernated != p3) {
					UserLevelState.hibernated = p3;
					if (p3 == 0) {
						AppHibernationService$$ExternalSyntheticLambda3 v10 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4);
						this.mBackgroundExecutor.execute(v10);
						long v13 = System.currentTimeMillis();
						UserLevelState.lastUnhibernatedMs = v13;
						UserLevelState v14 = new UserLevelState(v7);
						AppHibernationService$$ExternalSyntheticLambda4 v16 = new AppHibernationService$$ExternalSyntheticLambda4(v14,v4);
						this.mBackgroundExecutor.execute(v16);
						ArrayList v19 = new ArrayList(v21);
						Object v20 = this.mUserStates.get(v4);
						Collection v21 = v20.values();
						Object v23 = this.mUserDiskStores.get(v4);
						v23.scheduleWriteHibernationStates(v19);
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setHibernatingForUser(String p1, int p2, boolean p3){
	this.mService.setHibernatingForUser(p1, p2, p3);
	return;
}

and the following sink code:
['int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, "setHibernatingForUser", 0);\nboolean v9 = this.mUserManager.isUserUnlockingOrUnlocked(v4);\nAppHibernationService$$ExternalSyntheticLambda3 v15 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4);\nthis.mBackgroundExecutor.execute(v15);', 'int v4 = AppHibernationService.handleIncomingUser(p2, "setHibernatingForUser");\nboolean v5 = AppHibernationService.checkUserStatesExist(v4, "setHibernatingForUser", 1);\nAppHibernationService$$ExternalSyntheticLambda3 v10 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4);\nthis.mBackgroundExecutor.execute(v10);', 'this.mService.setHibernatingForUser(p1, p2, p3);']

The method setHibernatingForUser has the following similar APIs:

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z in the following Class: Lcom.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub with the following sink code entries:
  - Similarity: 0.9130854606628418, Code:
boolean v1 = this.mService.isHibernatingForUser(p1, p2);
  - Similarity: 0.8418865203857422, Code:
int v9 = AppHibernationService.handleIncomingUser(p2, "isHibernatingForUser");
boolean v10 = AppHibernationService.checkUserStatesExist(v9, "isHibernatingForUser", 0);
Object v11 = this.mUserStates.get(v9);
  - Similarity: 0.832453191280365, Code:
int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
boolean v15 = this.mUserStates.contains(v9);
  - Access Control Level: SYS_OR_SIG

- API Name: setHibernatingGlobally(Ljava/lang/String;Z)V in the following Class: Lcom.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub with the following sink code entries:
  - Similarity: 0.8403774499893188, Code:
this.mService.setHibernatingGlobally(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getHibernationStatsForUser(Ljava/util/List;I)Ljava/util/Map; in the following Class: Lcom.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub with the following sink code entries:
  - Similarity: 0.8138586282730103, Code:
int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, "getHibernationStatsForUser", 0);
boolean v13 = this.mUserManager.isUserUnlockingOrUnlocked(v8);
Object v15 = this.mUserStates.get(v8);
HibernationStats v25 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));
Object v27 = v4.put(v18, v25);
Map v3 = v4;
return v3;
  - Similarity: 0.7913491725921631, Code:
int v8 = AppHibernationService.handleIncomingUser(p2, "getHibernationStatsForUser");
boolean v9 = AppHibernationService.checkUserStatesExist(v8, "getHibernationStatsForUser", 1);
Object v10 = this.mUserStates.get(v8);
HibernationStats v20 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));
Object v22 = v4.put(v13, v20);
Map v3 = v4;
return v3;
  - Access Control Level: SYS_OR_SIG

- API Name: stopPrinterStateTracking(Landroid/print/PrinterId;I)V in the following Class: Lcom.android.server.print.PrintManagerService$PrintManagerImpl with the following sink code entries:
  - Similarity: 0.7812592387199402, Code:
boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(v2);
v8.increasePriority();
  - Access Control Level: NONE

- API Name: getTvInteractiveAppServiceList(I)Ljava/util/List; in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7790600657463074, Code:
int v5 = ActivityManager.handleIncomingUser(v1, v2, p1, 0, 0, "getTvInteractiveAppServiceList", 0);
TvInteractiveAppManagerService$UserState v11 = TvInteractiveAppManagerService.getOrCreateUserStateLocked(p1);
ArrayList v18 = new ArrayList();
Iterator v20 = v17.iterator();
return v55;
  - Access Control Level: NONE

