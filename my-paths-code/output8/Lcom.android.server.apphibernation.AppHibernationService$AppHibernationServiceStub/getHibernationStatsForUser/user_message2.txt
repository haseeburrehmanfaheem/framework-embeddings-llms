The method getHibernationStatsForUser in the following class Lcom.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub has the following code snippet:

This is path 1 for the API with depth 2:
public Map getHibernationStatsForUser(List p1, int p2){
	if (p1 == 0) {
		ArraySet v1 = new ArraySet(p1);
		int v9 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, "getHibernationStatsForUser", 0);
		int v8 = v11;
		boolean v13 = this.mUserManager.isUserUnlockingOrUnlocked(v8);
		if (v13 != 0) {
			boolean v14 = this.mUserStates.contains(v8);
			if (v14 != 0) {
				if (1 == 0) {
					boolean v12 = 0;
					if (v12 != 0) {
						Object v15 = this.mUserStates.get(v8);
						if (v1 == 0) {
							Iterator v16 = v1.iterator();
							boolean v17 = v16.hasNext();
							if (v17 == 0) {
								Object v18 = v16.next();
								int v19 = Binder.getCallingUid();
								boolean v20 = this.mPackageManagerInternal.canQueryPackage(v19, v18);
								if (v20 != 0) {
									boolean v21 = this.mGlobalHibernationStates.containsKey(v18);
									if (v21 == 0) {
										boolean v22 = v15.containsKey(v18);
										if (v22 != 0) {
											Object v23 = this.mGlobalHibernationStates.get(v18);
											Object v24 = v15.get(v18);
											HibernationStats v25 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));
											Object v27 = v4.put(v18, v25);
											boolean v28 = v16.hasNext();
											if (v28 == 0) {
												Map v3 = v4;
												return v3;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public Map getHibernationStatsForUser(List p1, int p2){
	if (p1 == 0) {
		ArraySet v1 = new ArraySet(p1);
		int v8 = AppHibernationService.handleIncomingUser(p2, "getHibernationStatsForUser");
		boolean v9 = AppHibernationService.checkUserStatesExist(v8, "getHibernationStatsForUser", 1);
		if (v9 != 0) {
			Object v10 = this.mUserStates.get(v8);
			if (v1 == 0) {
				Iterator v11 = v1.iterator();
				boolean v12 = v11.hasNext();
				if (v12 == 0) {
					Object v13 = v11.next();
					int v14 = Binder.getCallingUid();
					boolean v15 = this.mPackageManagerInternal.canQueryPackage(v14, v13);
					if (v15 != 0) {
						boolean v16 = this.mGlobalHibernationStates.containsKey(v13);
						if (v16 == 0) {
							boolean v17 = v10.containsKey(v13);
							if (v17 != 0) {
								Object v18 = this.mGlobalHibernationStates.get(v13);
								Object v19 = v10.get(v13);
								HibernationStats v20 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));
								Object v22 = v4.put(v13, v20);
								boolean v23 = v11.hasNext();
								if (v23 == 0) {
									Map v3 = v4;
									return v3;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Map getHibernationStatsForUser(List p1, int p2){
	if (p1 == 0) {
		ArraySet v1 = new ArraySet(p1);
		Map v3 = this.mService.getHibernationStatsForUser(v1, p2);
		return v3;
	}
}

and the following sink code:
['int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, "getHibernationStatsForUser", 0);\nboolean v13 = this.mUserManager.isUserUnlockingOrUnlocked(v8);\nObject v15 = this.mUserStates.get(v8);\nHibernationStats v25 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));\nObject v27 = v4.put(v18, v25);\nMap v3 = v4;\nreturn v3;', 'int v8 = AppHibernationService.handleIncomingUser(p2, "getHibernationStatsForUser");\nboolean v9 = AppHibernationService.checkUserStatesExist(v8, "getHibernationStatsForUser", 1);\nObject v10 = this.mUserStates.get(v8);\nHibernationStats v20 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));\nObject v22 = v4.put(v13, v20);\nMap v3 = v4;\nreturn v3;', 'Map v3 = this.mService.getHibernationStatsForUser(v1, p2);\nreturn v3;']

The method getHibernationStatsForUser has the following similar APIs:

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z in the following Class: Lcom.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub with the following sink code entries:
  - Similarity: 0.9026003479957581, Code:
int v9 = AppHibernationService.handleIncomingUser(p2, "isHibernatingForUser");
boolean v10 = AppHibernationService.checkUserStatesExist(v9, "isHibernatingForUser", 0);
Object v11 = this.mUserStates.get(v9);
  - Similarity: 0.8670607209205627, Code:
int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
boolean v15 = this.mUserStates.contains(v9);
  - Similarity: 0.7980088591575623, Code:
boolean v1 = this.mService.isHibernatingForUser(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getHibernatingPackagesForUser(I)Ljava/util/List; in the following Class: Lcom.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub with the following sink code entries:
  - Similarity: 0.8606029152870178, Code:
int v6 = AppHibernationService.handleIncomingUser(p1, "getHibernatingPackagesForUser");
boolean v7 = AppHibernationService.checkUserStatesExist(v6, "getHibernatingPackagesForUser", 1);
Object v8 = this.mUserStates.get(v6);
Collection v9 = v8.values();
Iterator v10 = v9.iterator();
boolean v15 = v2.add(UserLevelState.packageName);
List v1 = v2;
return v1;
  - Similarity: 0.847176194190979, Code:
int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);
Object v13 = this.mUserStates.get(v6);
Collection v14 = v13.values();
Iterator v15 = v14.iterator();
boolean v20 = v2.add(UserLevelState.packageName);
List v1 = v2;
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: setHibernatingForUser(Ljava/lang/String;IZ)V in the following Class: Lcom.android.server.apphibernation.AppHibernationService$AppHibernationServiceStub with the following sink code entries:
  - Similarity: 0.8138586282730103, Code:
int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, "setHibernatingForUser", 0);
boolean v9 = this.mUserManager.isUserUnlockingOrUnlocked(v4);
AppHibernationService$$ExternalSyntheticLambda3 v15 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4);
this.mBackgroundExecutor.execute(v15);
  - Similarity: 0.7913491725921631, Code:
int v4 = AppHibernationService.handleIncomingUser(p2, "setHibernatingForUser");
boolean v5 = AppHibernationService.checkUserStatesExist(v4, "setHibernatingForUser", 1);
AppHibernationService$$ExternalSyntheticLambda3 v10 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4);
this.mBackgroundExecutor.execute(v10);
  - Access Control Level: SYS_OR_SIG

- API Name: getBlockedRatings(I)Ljava/util/List; in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7904847264289856, Code:
int v5 = ActivityManager.handleIncomingUser(v1, v2, p1, 0, 0, "getBlockedRatings", 0);
TvInputManagerService$UserState v11 = new TvInputManagerService$UserState(this.mContext,v3,0);
ArrayList v14 = new ArrayList();
PersistentDataStore v16 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v8);
String v23 = v17[0].flattenToString();
boolean v24 = v14.add(v23);
  - Access Control Level: NONE

- API Name: createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo; in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7809330821037292, Code:
int v4 = UserManagerService.scanNextAvailableIdLocked();
long v16 = UserManagerService.logUserJourneyBegin(4, v3, p2, p3);
Object v18 = this.mUserTypes.get(p2);
boolean v21 = UserManagerService.checkUserTypeConsistency((p3 | v20));
UserInfo v31 = UserManagerService.convertPreCreatedUserIfPossible(v19, (p3 | v20), p1, 0);
  - Access Control Level: SYS_OR_SIG

