The method getHibernatingPackagesForUser has the following code snippet:

This is path 1 for the API with depth 2:
public List getHibernatingPackagesForUser(int p1){
	int v7 = Binder.getCallingUid();
	int v8 = Binder.getCallingPid();
	int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);
	int v6 = v9;
	boolean v11 = this.mUserManager.isUserUnlockingOrUnlocked(v6);
	if (v11 != 0) {
		boolean v12 = this.mUserStates.contains(v6);
		if (v12 != 0) {
			if (1 == 0) {
				boolean v10 = 0;
				if (v10 != 0) {
					Object v13 = this.mUserStates.get(v6);
					Collection v14 = v13.values();
					Iterator v15 = v14.iterator();
					boolean v16 = v15.hasNext();
					if (v16 == 0) {
						Object v17 = v15.next();
						int v18 = Binder.getCallingUid();
						boolean v19 = this.mPackageManagerInternal.canQueryPackage(v18, UserLevelState.packageName);
						if (v19 != 0) {
							if (UserLevelState.hibernated == 0) {
								boolean v20 = v2.add(UserLevelState.packageName);
								boolean v21 = v15.hasNext();
								if (v21 == 0) {
									List v1 = v2;
									return v1;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public List getHibernatingPackagesForUser(int p1){
	int v6 = AppHibernationService.handleIncomingUser(p1, "getHibernatingPackagesForUser");
	boolean v7 = AppHibernationService.checkUserStatesExist(v6, "getHibernatingPackagesForUser", 1);
	if (v7 != 0) {
		Object v8 = this.mUserStates.get(v6);
		Collection v9 = v8.values();
		Iterator v10 = v9.iterator();
		boolean v11 = v10.hasNext();
		if (v11 == 0) {
			Object v12 = v10.next();
			int v13 = Binder.getCallingUid();
			boolean v14 = this.mPackageManagerInternal.canQueryPackage(v13, UserLevelState.packageName);
			if (v14 != 0) {
				if (UserLevelState.hibernated == 0) {
					boolean v15 = v2.add(UserLevelState.packageName);
					boolean v16 = v10.hasNext();
					if (v16 == 0) {
						List v1 = v2;
						return v1;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public List getHibernatingPackagesForUser(int p1){
	List v1 = this.mService.getHibernatingPackagesForUser(p1);
	return v1;
}

and the following sink code:
['int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);\nObject v13 = this.mUserStates.get(v6);\nCollection v14 = v13.values();\nIterator v15 = v14.iterator();\nboolean v20 = v2.add(UserLevelState.packageName);\nList v1 = v2;\nreturn v1;', 'int v6 = AppHibernationService.handleIncomingUser(p1, "getHibernatingPackagesForUser");\nboolean v7 = AppHibernationService.checkUserStatesExist(v6, "getHibernatingPackagesForUser", 1);\nObject v8 = this.mUserStates.get(v6);\nCollection v9 = v8.values();\nIterator v10 = v9.iterator();\nboolean v15 = v2.add(UserLevelState.packageName);\nList v1 = v2;\nreturn v1;', 'List v1 = this.mService.getHibernatingPackagesForUser(p1);\nreturn v1;']

The method getHibernatingPackagesForUser has the following similar APIs:

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z with Similarity Score: 0.8984065651893616
  - Access Control Level: SYS_OR_SIG and the following code:
int v9 = AppHibernationService.handleIncomingUser(p2, "isHibernatingForUser");
boolean v10 = AppHibernationService.checkUserStatesExist(v9, "isHibernatingForUser", 0);
Object v11 = this.mUserStates.get(v9);

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z with Similarity Score: 0.8637368679046631
  - Access Control Level: SYS_OR_SIG and the following code:
int v9 = AppHibernationService.handleIncomingUser(p2, "isHibernatingForUser");
boolean v10 = AppHibernationService.checkUserStatesExist(v9, "isHibernatingForUser", 0);
Object v11 = this.mUserStates.get(v9);

