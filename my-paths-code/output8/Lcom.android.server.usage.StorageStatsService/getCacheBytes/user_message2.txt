The method getCacheBytes in the following class Lcom.android.server.usage.StorageStatsService has the following code snippet:

This is path 1 for the API with depth 2:
public long getCacheBytes(String p1, String p2){
	int v1 = Binder.getCallingUid();
	List v3 = this.mUser.getUsers();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	if (v5 == 0) {
		Object v6 = v4.next();
		int v10 = Binder.getCallingUid();
		List v13 = this.mPackage.getInstalledApplicationsAsUser(8192, UserInfo.id);
		Iterator v14 = v13.iterator();
		boolean v15 = v14.hasNext();
		if (v15 == 0) {
			Object v16 = v14.next();
			int v17 = UserHandle.getAppId(ApplicationInfo.uid);
			boolean v18 = ArrayUtils.contains(appendInt(), v17);
			if (v18 != 0) {
				[I v19 = ArrayUtils.appendInt(appendInt(), v17);
				boolean v20 = v14.hasNext();
				if (v20 == 0) {
					[I v12 = appendInt();
					PackageStats v21 = new PackageStats("StorageStatsService");
					boolean v24 = SystemProperties.getBoolean("fw.disable_quota", 0);
					if (v24 == 0) {
						int v23 = 0;
						boolean v26 = Installer.checkBeforeRemote();
						if (v26 != 0) {
							[J v27 = this.mInstalld.getUserSize(p1, UserInfo.id, v23, v12);
							PackageStats.codeSize = (PackageStats.codeSize + v27[0]);
							PackageStats.dataSize = (PackageStats.dataSize + v27[1]);
							PackageStats.cacheSize = (PackageStats.cacheSize + v27[2]);
							PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v27[3]);
							PackageStats.externalDataSize = (PackageStats.externalDataSize + v27[4]);
							PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v27[5]);
							boolean v28 = SystemProperties.getBoolean("fw.verify_storage", 0);
							if (v28 == 0) {
								PackageStats v29 = new PackageStats("StorageStatsService");
								boolean v32 = Installer.checkBeforeRemote();
								if (v32 != 0) {
									[J v33 = this.mInstalld.getUserSize(p1, UserInfo.id, 0, v12);
									PackageStats.codeSize = (PackageStats.codeSize + v33[0]);
									PackageStats.dataSize = (PackageStats.dataSize + v33[1]);
									PackageStats.cacheSize = (PackageStats.cacheSize + v33[2]);
									PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v33[3]);
									PackageStats.externalDataSize = (PackageStats.externalDataSize + v33[4]);
									PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v33[5]);
									StringBuilder v34 = new StringBuilder();
									StringBuilder v36 = v34.append("User ");
									StringBuilder v37 = v34.append(UserInfo.id);
									String v38 = v34.toString();
									StringBuilder v40 = new StringBuilder();
									StringBuilder v42 = v40.append(v38);
									StringBuilder v43 = v40.append(" codeSize");
									String v44 = v40.toString();
									StorageStatsService.checkEquals(v44, PackageStats.codeSize, PackageStats.codeSize);
									StringBuilder v46 = new StringBuilder();
									StringBuilder v48 = v46.append(v38);
									StringBuilder v49 = v46.append(" dataSize");
									String v50 = v46.toString();
									StorageStatsService.checkEquals(v50, PackageStats.dataSize, PackageStats.dataSize);
									StringBuilder v52 = new StringBuilder();
									StringBuilder v54 = v52.append(v38);
									StringBuilder v55 = v52.append(" cacheSize");
									String v56 = v52.toString();
									StorageStatsService.checkEquals(v56, PackageStats.cacheSize, PackageStats.cacheSize);
									StringBuilder v58 = new StringBuilder();
									StringBuilder v60 = v58.append(v38);
									StringBuilder v61 = v58.append(" externalCodeSize");
									String v62 = v58.toString();
									StorageStatsService.checkEquals(v62, PackageStats.externalCodeSize, PackageStats.externalCodeSize);
									StringBuilder v64 = new StringBuilder();
									StringBuilder v66 = v64.append(v38);
									StringBuilder v67 = v64.append(" externalDataSize");
									String v68 = v64.toString();
									StorageStatsService.checkEquals(v68, PackageStats.externalDataSize, PackageStats.externalDataSize);
									StringBuilder v70 = new StringBuilder();
									StringBuilder v72 = v70.append(v38);
									StringBuilder v73 = v70.append(" externalCacheSize");
									String v74 = v70.toString();
									StorageStatsService.checkEquals(v74, PackageStats.externalCacheSize, PackageStats.externalCacheSize);
									if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
										UserHandle v76 = UserHandle.of(UserInfo.id);
										StorageStatsService$$ExternalSyntheticLambda1 v77 = new StorageStatsService$$ExternalSyntheticLambda1(v21,v76);
										int v80 = this.mStorageStatsAugmenters.size();
										if (0 >= v80) {
											Object v81 = this.mStorageStatsAugmenters.get(0);
											StringBuilder v82 = new StringBuilder();
											StringBuilder v84 = v82.append("queryStatsForUser");
											StringBuilder v85 = v82.append(":");
											StringBuilder v86 = v82.append(Pair.first);
											String v87 = v82.toString();
											Trace.traceBegin(524288, v87);
											v77.accept(Pair.second);
											Trace.traceEnd(524288);
											if ((0 + 1) >= v80) {
												StorageStats v92 = new StorageStats();
												StorageStats.codeBytes = (PackageStats.codeSize + PackageStats.externalCodeSize);
												StorageStats.dataBytes = (PackageStats.dataSize + PackageStats.externalDataSize);
												StorageStats.cacheBytes = (PackageStats.cacheSize + PackageStats.externalCacheSize);
												StorageStats.externalCacheBytes = PackageStats.externalCacheSize;
												StorageStats v91 = v92;
												StorageStats v7 = v91;
												boolean v94 = v4.hasNext();
												if (v94 == 0) {
													return (0 + StorageStats.cacheBytes);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long getCacheBytes(String p1, String p2){
	int v1 = Binder.getCallingUid();
	List v3 = this.mUser.getUsers();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	if (v5 == 0) {
		Object v6 = v4.next();
		int v10 = Binder.getCallingUid();
		[I v12 = StorageStatsService.getAppIds(UserInfo.id);
		PackageStats v13 = new PackageStats("StorageStatsService");
		int v15 = StorageStatsService.getDefaultFlags();
		this.mInstaller.getUserSize(p1, UserInfo.id, v15, v12, v13);
		boolean v17 = SystemProperties.getBoolean("fw.verify_storage", 0);
		if (v17 == 0) {
			PackageStats v18 = new PackageStats("StorageStatsService");
			this.mInstaller.getUserSize(p1, UserInfo.id, 0, v12, v18);
			StringBuilder v21 = new StringBuilder();
			StringBuilder v23 = v21.append("User ");
			StringBuilder v24 = v21.append(UserInfo.id);
			String v25 = v21.toString();
			StorageStatsService.checkEquals(v25, v18, v13);
			if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
				UserHandle v27 = UserHandle.of(UserInfo.id);
				StorageStatsService$$ExternalSyntheticLambda1 v28 = new StorageStatsService$$ExternalSyntheticLambda1(v13,v27);
				StorageStatsService.forEachStorageStatsAugmenter(v28, "queryStatsForUser");
				StorageStats v31 = StorageStatsService.translate(v13);
				StorageStats v7 = v31;
				boolean v32 = v4.hasNext();
				if (v32 == 0) {
					return (0 + StorageStats.cacheBytes);
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public long getCacheBytes(String p1, String p2){
	int v1 = Binder.getCallingUid();
	List v3 = this.mUser.getUsers();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	if (v5 == 0) {
		Object v6 = v4.next();
		StorageStats v7 = p0.queryStatsForUser(p1, UserInfo.id, 0);
		boolean v8 = v4.hasNext();
		if (v8 == 0) {
			return (0 + StorageStats.cacheBytes);
		}
	}
}

and the following sink code:
['List v3 = this.mUser.getUsers();\nIterator v4 = v3.iterator();\nPackageStats v21 = new PackageStats("StorageStatsService");\nthis.mInstalld.getUserSize(p1, UserInfo.id, v23, v12);\nreturn (0 + StorageStats.cacheBytes);', 'int v10 = Binder.getCallingUid();\n[I v12 = StorageStatsService.getAppIds(UserInfo.id);\nPackageStats v13 = new PackageStats("StorageStatsService");\nthis.mInstaller.getUserSize(p1, UserInfo.id, v15, v12, v13);', 'StorageStats v7 = p0.queryStatsForUser(p1, UserInfo.id, 0);\nreturn (0 + StorageStats.cacheBytes);']

The method getCacheBytes has the following similar APIs:

- API Name: queryStatsForUser(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; in the following Class: Lcom.android.server.usage.StorageStatsService with the following sink code entries:
  - Similarity: 0.8447059988975525, Code:
int v3 = Binder.getCallingUid();
List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
Iterator v7 = v6.iterator();
PackageStats v14 = new PackageStats("StorageStatsService");
[J v38 = this.mInstalld.getUserSize(p1, p2, v16, v5);
PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
...
return StorageStatsService.translate(v14);
  - Similarity: 0.8433111906051636, Code:
[I v5 = p0.getAppIds(p2);
PackageStats v6 = new PackageStats("StorageStatsService");
this.mInstaller.getUserSize(p1, p2, v8, v5, v6);
return StorageStatsService.translate(v6);
  - Access Control Level: SYS_OR_SIG

- API Name: getCacheSizeBytes(Ljava/lang/String;I)J in the following Class: Lcom.android.server.StorageManagerService with the following sink code entries:
  - Similarity: 0.8410608172416687, Code:
StorageStats v7 = StorageStatsManager.queryStatsForUid(v6, p2);
long v8 = this.cacheBytes;
return v8;
  - Similarity: 0.8310279846191406, Code:
StorageStats v5 = v4.queryStatsForUid(p1, p2);
long v6 = v5.getCacheBytes();
return v6;
  - Similarity: 0.7850174307823181, Code:
StorageStats v10 = this.mService.queryStatsForUid(v8, p2, v9);
long v11 = v5.getCacheBytes();
return v11;
  - Access Control Level: SYS_OR_SIG

- API Name: queryStatsForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; in the following Class: Lcom.android.server.usage.StorageStatsService with the following sink code entries:
  - Similarity: 0.8331047892570496, Code:
PackageStats v21 = new PackageStats("StorageStatsService");
int v23 = this.mInstalld.getAppSize(p1, v18, v10, v23, v11, v19, v20);
PackageStats.codeSize = (PackageStats.codeSize + v23[0]);
StorageStats v95 = new StorageStats();
return v9;
  - Similarity: 0.8178418874740601, Code:
String v7 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
Object v16 = ArrayUtils.appendElement(Strin.class, v12, v15);
this.mInstaller.getAppSize(p1, v10, p3, 0, v9, v11, v12, v17);
StorageStats v24 = StorageStatsService.translate(v17);
  - Access Control Level: SYS_OR_SIG

- API Name: queryStatsForUid(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; in the following Class: Lcom.android.server.usage.StorageStatsService with the following sink code entries:
  - Similarity: 0.8293481469154358, Code:
ApplicationInfo v12 = this.mPackage.getApplicationInfoAsUser(v9[0], 8192, v1);
this.mInstaller.getAppSize(p1, v9, v1, v18, v2, v10, v11, v16);
StorageStats v21 = StorageStatsService.translate(v16);
return v21;
  - Similarity: 0.8060775995254517, Code:
PackageStats v12 = new PackageStats("StorageStatsService");
int v14 = 0;
[J v20 = this.mInstalld.getAppSize(p1, v9, v1, v14, v2, v10, v11);
PackageStats.codeSize = (PackageStats.codeSize + v20[0]);
StorageStats v21 = StorageStatsService.translate(v16);
return v21;
  - Access Control Level: SYS_OR_SIG

- API Name: queryCratesForUid(Ljava/lang/String;ILjava/lang/String;)Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.usage.StorageStatsService with the following sink code entries:
  - Similarity: 0.7963433265686035, Code:
String v6 = this.mPackage.getPackagesForUid(p2);
ApplicationInfo v10 = this.mPackage.getApplicationInfoAsUser(v7[0], 8192, v2);
CrateMetadata v13 = this.mInstaller.getAppCrates(p1, v8, v2);
List v15 = StorageStatsService.convertCrateInfoFrom(v13);
ParceledListSlice v14 = new ParceledListSlice(v15);
return v12;
  - Access Control Level: SYS_OR_SIG

