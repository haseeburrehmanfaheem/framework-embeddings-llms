This is path 1 for the API with depth 2:
public ParceledListSlice queryCratesForUser(String p1, int p2, String p3){
	int v4 = Binder.getCallingUid();
	if (this.mWarnIfHeld == 0) {
		boolean v8 = Thread.holdsLock(this.mWarnIfHeld);
		if (v8 == 0) {
			Thread v12 = Thread.currentThread();
			String v13 = v12.getName();
			int v16 = System.identityHashCode(this.mWarnIfHeld);
			String v17 = Integer.toHexString(v16);
			if (this.mIsolated == 0) {
				boolean v23 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
				if (v23 == 0) {
					Installer$InstallerException v24 = new Installer$InstallerException("time out waiting for the installer to be ready");
					boolean v7 = 1;
					if (v7 != 0) {
						CrateMetadata v26 = this.mInstalld.getUserCrates(p1, p2);
						CrateMetadata v6 = v26;
						ParceledListSlice v27 = new ParceledListSlice(v28);
						boolean v29 = ArrayUtils.isEmpty(v6);
						if (v29 == 0) {
							ArrayList v30 = new ArrayList();
							if (0 >= v6.length) {
								if (v6[0] == 0) {
									boolean v32 = TextUtils.isEmpty(CrateMetadata.id);
									if (v32 != 0) {
										boolean v33 = TextUtils.isEmpty(CrateMetadata.packageName);
										if (v33 == 0) {
											if (v35 == 0) {
												boolean v36 = TextUtils.isEmpty(CrateMetadata.packageName);
												if (v36 != 0) {
													boolean v37 = TextUtils.isEmpty(CrateMetadata.id);
													if (v37 == 0) {
														CrateInfo v38 = new CrateInfo(CrateMetadata.id,0);
														this.mUid = CrateMetadata.uid;
														this.mPackageName = CrateMetadata.packageName;
														this.mId = CrateMetadata.id;
														CrateInfo v34 = v38;
														if (v34 != 0) {
															if ((0 + 1) >= v6.length) {
																List v28 = v30;
																return v27;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ParceledListSlice queryCratesForUser(String p1, int p2, String p3){
	int v4 = Binder.getCallingUid();
	boolean v7 = Installer.checkBeforeRemote();
	if (v7 != 0) {
		CrateMetadata v8 = this.mInstalld.getUserCrates(p1, p2);
		CrateMetadata v6 = v8;
		ParceledListSlice v9 = new ParceledListSlice(v10);
		boolean v11 = ArrayUtils.isEmpty(v6);
		if (v11 == 0) {
			ArrayList v12 = new ArrayList();
			if (0 >= v6.length) {
				if (v6[0] == 0) {
					boolean v14 = TextUtils.isEmpty(CrateMetadata.id);
					if (v14 != 0) {
						boolean v15 = TextUtils.isEmpty(CrateMetadata.packageName);
						if (v15 == 0) {
							CrateInfo v16 = CrateInfo.copyFrom(CrateMetadata.uid, CrateMetadata.packageName, CrateMetadata.id);
							if (v16 != 0) {
								if ((0 + 1) >= v6.length) {
									List v10 = v12;
									return v9;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ParceledListSlice queryCratesForUser(String p1, int p2, String p3){
	int v4 = Binder.getCallingUid();
	CrateMetadata v6 = this.mInstaller.getUserCrates(p1, p2);
	ParceledListSlice v7 = new ParceledListSlice(v8);
	List v8 = StorageStatsService.convertCrateInfoFrom(v6);
	return v7;
}
