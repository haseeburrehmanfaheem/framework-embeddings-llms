This is path 1 for the API with depth 2:
public long getFreeBytes(String p1, String p2){
	long v1 = Binder.clearCallingIdentity();
	File v2 = this.mStorage.findPathForUuid(p1);
	boolean v5 = Installer.checkBeforeRemote();
	if (v5 != 0) {
		boolean v6 = this.mInstalld.isQuotaSupported(p1);
		boolean v4 = v6;
		boolean v3 = v4;
		if (v3 == 0) {
			int v8 = Binder.getCallingUid();
			List v10 = this.mUser.getUsers();
			Iterator v11 = v10.iterator();
			boolean v12 = v11.hasNext();
			if (v12 == 0) {
				Object v13 = v11.next();
				int v17 = Binder.getCallingUid();
				[I v19 = StorageStatsService.getAppIds(UserInfo.id);
				PackageStats v20 = new PackageStats("StorageStatsService");
				int v22 = StorageStatsService.getDefaultFlags();
				this.mInstaller.getUserSize(p1, UserInfo.id, v22, v19, v20);
				boolean v24 = SystemProperties.getBoolean("fw.verify_storage", 0);
				if (v24 == 0) {
					PackageStats v25 = new PackageStats("StorageStatsService");
					this.mInstaller.getUserSize(p1, UserInfo.id, 0, v19, v25);
					StringBuilder v28 = new StringBuilder();
					StringBuilder v30 = v28.append("User ");
					StringBuilder v31 = v28.append(UserInfo.id);
					String v32 = v28.toString();
					StorageStatsService.checkEquals(v32, v25, v20);
					if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
						UserHandle v34 = UserHandle.of(UserInfo.id);
						StorageStatsService$$ExternalSyntheticLambda1 v35 = new StorageStatsService$$ExternalSyntheticLambda1(v20,v34);
						StorageStatsService.forEachStorageStatsAugmenter(v35, "queryStatsForUser");
						StorageStats v38 = StorageStatsService.translate(v20);
						StorageStats v14 = v38;
						boolean v39 = v11.hasNext();
						if (v39 == 0) {
							long v7 = (0 + StorageStats.cacheBytes);
							long v40 = this.mStorage.getStorageCacheBytes(v2, 0);
							long v41 = Math.max(0, (v7 - v40));
							long v42 = v2.getUsableSpace();
							Binder.restoreCallingIdentity(v1);
							return (v42 + v41);
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long getFreeBytes(String p1, String p2){
	long v1 = Binder.clearCallingIdentity();
	File v2 = this.mStorage.findPathForUuid(p1);
	boolean v4 = this.mInstaller.isQuotaSupported(p1);
	boolean v3 = v4;
	if (v3 == 0) {
		int v6 = Binder.getCallingUid();
		List v8 = this.mUser.getUsers();
		Iterator v9 = v8.iterator();
		boolean v10 = v9.hasNext();
		if (v10 == 0) {
			Object v11 = v9.next();
			StorageStats v12 = StorageStatsService.queryStatsForUser(p1, UserInfo.id, 0);
			boolean v13 = v9.hasNext();
			if (v13 == 0) {
				long v5 = (0 + StorageStats.cacheBytes);
				long v14 = this.mStorage.getStorageCacheBytes(v2, 0);
				long v15 = Math.max(0, (v5 - v14));
				long v16 = v2.getUsableSpace();
				Binder.restoreCallingIdentity(v1);
				return (v16 + v15);
			}
		}
	}
}


This is path 3 for the API with depth 0:
public long getFreeBytes(String p1, String p2){
	long v1 = Binder.clearCallingIdentity();
	File v2 = this.mStorage.findPathForUuid(p1);
	boolean v3 = p0.isQuotaSupported(p1, "android");
	if (v3 == 0) {
		long v4 = p0.getCacheBytes(p1, "android");
		long v5 = this.mStorage.getStorageCacheBytes(v2, 0);
		long v6 = Math.max(0, (v4 - v5));
		long v7 = v2.getUsableSpace();
		Binder.restoreCallingIdentity(v1);
		return (v7 + v6);
	}
}
