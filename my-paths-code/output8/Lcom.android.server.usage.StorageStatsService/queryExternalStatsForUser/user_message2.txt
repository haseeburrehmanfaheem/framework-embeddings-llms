The method queryExternalStatsForUser has the following code snippet:

This is path 1 for the API with depth 2:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(appendInt(), v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(appendInt(), v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = appendInt();
				boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v15 == 0) {
					int v14 = 0;
					if (this.mWarnIfHeld == 0) {
						boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
						if (v18 == 0) {
							Thread v22 = Thread.currentThread();
							String v23 = v22.getName();
							int v26 = System.identityHashCode(this.mWarnIfHeld);
							String v27 = Integer.toHexString(v26);
							if (this.mIsolated == 0) {
								boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v33 == 0) {
									Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v17 = 1;
									if (v17 != 0) {
										[J v36 = this.mInstalld.getExternalSize(p1, p2, v14, v5);
										[J v16 = v36;
										boolean v37 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v37 == 0) {
											if (this.mWarnIfHeld == 0) {
												boolean v40 = Thread.holdsLock(this.mWarnIfHeld);
												if (v40 == 0) {
													Thread v44 = Thread.currentThread();
													String v45 = v44.getName();
													int v48 = System.identityHashCode(this.mWarnIfHeld);
													String v49 = Integer.toHexString(v48);
													if (this.mIsolated == 0) {
														boolean v55 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
														if (v55 == 0) {
															Installer$InstallerException v56 = new Installer$InstallerException("time out waiting for the installer to be ready");
															boolean v39 = 1;
															if (v39 != 0) {
																[J v58 = this.mInstalld.getExternalSize(p1, p2, 0, v5);
																[J v38 = v58;
																StringBuilder v59 = new StringBuilder();
																StringBuilder v61 = v59.append("External ");
																StringBuilder v62 = v59.append(p2);
																String v63 = v59.toString();
																if (0 >= v38.length) {
																	StringBuilder v65 = new StringBuilder();
																	StringBuilder v67 = v65.append(v63);
																	StringBuilder v68 = v65.append("[");
																	StringBuilder v69 = v65.append(0);
																	StringBuilder v70 = v65.append("]");
																	String v71 = v65.toString();
																	if ((v38[0] < v16[0]) == 0) {
																		if ((0 + 1) >= v38.length) {
																			ExternalStorageStats v73 = new ExternalStorageStats();
																			ExternalStorageStats.totalBytes = v16[0];
																			ExternalStorageStats.audioBytes = v16[1];
																			ExternalStorageStats.videoBytes = v16[2];
																			ExternalStorageStats.imageBytes = v16[3];
																			ExternalStorageStats.appBytes = v16[4];
																			ExternalStorageStats.obbBytes = v16[5];
																			return v73;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(appendInt(), v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(appendInt(), v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = appendInt();
				boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v15 == 0) {
					int v14 = 0;
					boolean v17 = Installer.checkBeforeRemote();
					if (v17 != 0) {
						[J v18 = this.mInstalld.getExternalSize(p1, p2, v14, v5);
						[J v16 = v18;
						boolean v19 = SystemProperties.getBoolean("fw.verify_storage", 0);
						if (v19 == 0) {
							boolean v21 = Installer.checkBeforeRemote();
							if (v21 != 0) {
								[J v22 = this.mInstalld.getExternalSize(p1, p2, 0, v5);
								[J v20 = v22;
								StringBuilder v23 = new StringBuilder();
								StringBuilder v25 = v23.append("External ");
								StringBuilder v26 = v23.append(p2);
								String v27 = v23.toString();
								if (0 >= v20.length) {
									StringBuilder v29 = new StringBuilder();
									StringBuilder v31 = v29.append(v27);
									StringBuilder v32 = v29.append("[");
									StringBuilder v33 = v29.append(0);
									StringBuilder v34 = v29.append("]");
									String v35 = v29.toString();
									StorageStatsService.checkEquals(v35, v20[0], v16[0]);
									if ((0 + 1) >= v20.length) {
										ExternalStorageStats v37 = new ExternalStorageStats();
										ExternalStorageStats.totalBytes = v16[0];
										ExternalStorageStats.audioBytes = v16[1];
										ExternalStorageStats.videoBytes = v16[2];
										ExternalStorageStats.imageBytes = v16[3];
										ExternalStorageStats.appBytes = v16[4];
										ExternalStorageStats.obbBytes = v16[5];
										return v37;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	[I v5 = p0.getAppIds(p2);
	int v6 = StorageStatsService.getDefaultFlags();
	[J v7 = this.mInstaller.getExternalSize(p1, p2, v6, v5);
	boolean v8 = SystemProperties.getBoolean("fw.verify_storage", 0);
	if (v8 == 0) {
		[J v9 = this.mInstaller.getExternalSize(p1, p2, 0, v5);
		StringBuilder v10 = new StringBuilder();
		StringBuilder v12 = v10.append("External ");
		StringBuilder v13 = v10.append(p2);
		String v14 = v10.toString();
		StorageStatsService.checkEquals(v14, v9, v7);
		ExternalStorageStats v16 = new ExternalStorageStats();
		ExternalStorageStats.totalBytes = v7[0];
		ExternalStorageStats.audioBytes = v7[1];
		ExternalStorageStats.videoBytes = v7[2];
		ExternalStorageStats.imageBytes = v7[3];
		ExternalStorageStats.appBytes = v7[4];
		ExternalStorageStats.obbBytes = v7[5];
		return v16;
	}
}

and the following sink code:
['List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);\nIterator v7 = v6.iterator();\nint v10 = UserHandle.getAppId(ApplicationInfo.uid);\n[I v12 = ArrayUtils.appendInt(appendInt(), v10);\n[J v36 = this.mInstalld.getExternalSize(p1, p2, v14, v5);\n[J v16 = v36;\nExternalStorageStats v73 = new ExternalStorageStats();\nExternalStorageStats.totalBytes = v16[0];\nExternalStorageStats.audioBytes = v16[1];\nExternalStorageStats.videoBytes = v16[2];\nExternalStorageStats.imageBytes = v16[3];\nExternalStorageStats.appBytes = v16[4];\nExternalStorageStats.obbBytes = v16[5];\nreturn v73;', '[J v18 = this.mInstalld.getExternalSize(p1, p2, v14, v5);\n[J v16 = v18;\n[J v22 = this.mInstalld.getExternalSize(p1, p2, 0, v5);\n[J v20 = v22;\nExternalStorageStats v37 = new ExternalStorageStats();\nExternalStorageStats.totalBytes = v16[0];\nExternalStorageStats.audioBytes = v16[1];\nExternalStorageStats.videoBytes = v16[2];\nExternalStorageStats.imageBytes = v16[3];\nExternalStorageStats.appBytes = v16[4];\nExternalStorageStats.obbBytes = v16[5];\nreturn v37;', '[I v5 = p0.getAppIds(p2);\n[J v7 = this.mInstaller.getExternalSize(p1, p2, v6, v5);\n[J v9 = this.mInstaller.getExternalSize(p1, p2, 0, v5);\nExternalStorageStats v16 = new ExternalStorageStats();\nExternalStorageStats.totalBytes = v7[0];\nExternalStorageStats.audioBytes = v7[1];\nExternalStorageStats.videoBytes = v7[2];\nExternalStorageStats.imageBytes = v7[3];\nExternalStorageStats.appBytes = v7[4];\nExternalStorageStats.obbBytes = v7[5];\nreturn v16;']

The method queryExternalStatsForUser has the following similar APIs:

- API Name: queryStatsForUser(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.8556058406829834
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = Binder.getCallingUid();
List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
Iterator v7 = v6.iterator();
PackageStats v14 = new PackageStats("StorageStatsService");
[J v38 = this.mInstalld.getUserSize(p1, p2, v16, v5);
PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
...
return StorageStatsService.translate(v14);

- API Name: queryStatsForUid(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.8282200694084167
  - Access Control Level: SYS_OR_SIG and the following code:
ApplicationInfo v12 = this.mPackage.getApplicationInfoAsUser(v9[0], 8192, v1);
this.mInstaller.getAppSize(p1, v9, v1, v18, v2, v10, v11, v16);
StorageStats v21 = StorageStatsService.translate(v16);
return v21;

