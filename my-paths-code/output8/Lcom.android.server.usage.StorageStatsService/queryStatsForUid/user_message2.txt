The method queryStatsForUid has the following code snippet:

This is path 1 for the API with depth 2:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if (0 >= v9.length) {
			PackageStats v12 = new PackageStats("StorageStatsService");
			boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
			if (v15 == 0) {
				int v14 = 0;
				if (this.mWarnIfHeld == 0) {
					boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
					if (v18 == 0) {
						Thread v22 = Thread.currentThread();
						String v23 = v22.getName();
						int v26 = System.identityHashCode(this.mWarnIfHeld);
						String v27 = Integer.toHexString(v26);
						if (this.mIsolated == 0) {
							boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
							if (v33 == 0) {
								Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
								boolean v17 = 1;
								if (v17 != 0) {
									if (v11 == 0) {
										if (0 >= v11.length) {
											BlockGuard$VmPolicy v36 = BlockGuard.getVmPolicy();
											v36.onPathAccess(v11[0]);
											if ((0 + 1) >= v11.length) {
												[J v38 = this.mInstalld.getAppSize(p1, v9, v1, v14, v2, v10, v11);
												PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
												PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
												PackageStats.cacheSize = (PackageStats.cacheSize + v38[2]);
												PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v38[3]);
												PackageStats.externalDataSize = (PackageStats.externalDataSize + v38[4]);
												PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v38[5]);
												boolean v39 = SystemProperties.getBoolean("fw.verify_storage", 0);
												if (v39 == 0) {
													PackageStats v40 = new PackageStats("StorageStatsService");
													if (this.mWarnIfHeld == 0) {
														boolean v44 = Thread.holdsLock(this.mWarnIfHeld);
														if (v44 == 0) {
															Thread v48 = Thread.currentThread();
															String v49 = v48.getName();
															int v52 = System.identityHashCode(this.mWarnIfHeld);
															String v53 = Integer.toHexString(v52);
															if (this.mIsolated == 0) {
																boolean v59 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
																if (v59 == 0) {
																	Installer$InstallerException v60 = new Installer$InstallerException("time out waiting for the installer to be ready");
																	boolean v43 = 1;
																	if (v43 != 0) {
																		if (v11 == 0) {
																			if (((0 + 1) + 1) >= v11.length) {
																				BlockGuard$VmPolicy v62 = BlockGuard.getVmPolicy();
																				v62.onPathAccess(v11[((0 + 1) + 1)]);
																				if ((((0 + 1) + 1) + 1) >= v11.length) {
																					[J v64 = this.mInstalld.getAppSize(p1, v9, v1, 0, v2, v10, v11);
																					PackageStats.codeSize = (PackageStats.codeSize + v64[0]);
																					PackageStats.dataSize = (PackageStats.dataSize + v64[1]);
																					PackageStats.cacheSize = (PackageStats.cacheSize + v64[2]);
																					PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v64[3]);
																					PackageStats.externalDataSize = (PackageStats.externalDataSize + v64[4]);
																					PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v64[5]);
																					StringBuilder v65 = new StringBuilder();
																					StringBuilder v67 = v65.append("UID ");
																					StringBuilder v68 = v65.append(p2);
																					String v69 = v65.toString();
																					StringBuilder v71 = new StringBuilder();
																					StringBuilder v73 = v71.append(v69);
																					StringBuilder v74 = v71.append(" codeSize");
																					String v75 = v71.toString();
																					if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																						StringBuilder v77 = new StringBuilder();
																						StringBuilder v79 = v77.append(v69);
																						StringBuilder v80 = v77.append(" dataSize");
																						String v81 = v77.toString();
																						if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																							StringBuilder v83 = new StringBuilder();
																							StringBuilder v85 = v83.append(v69);
																							StringBuilder v86 = v83.append(" cacheSize");
																							String v87 = v83.toString();
																							if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																								StringBuilder v89 = new StringBuilder();
																								StringBuilder v91 = v89.append(v69);
																								StringBuilder v92 = v89.append(" externalCodeSize");
																								String v93 = v89.toString();
																								if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																									StringBuilder v95 = new StringBuilder();
																									StringBuilder v97 = v95.append(v69);
																									StringBuilder v98 = v95.append(" externalDataSize");
																									String v99 = v95.toString();
																									if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																										StringBuilder v101 = new StringBuilder();
																										StringBuilder v103 = v101.append(v69);
																										StringBuilder v104 = v101.append(" externalCacheSize");
																										String v105 = v101.toString();
																										if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																											if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																												StorageStatsService$$ExternalSyntheticLambda2 v107 = new StorageStatsService$$ExternalSyntheticLambda2(v12,p2,1);
																												p0.forEachStorageStatsAugmenter(v107, "queryStatsForUid");
																												StorageStats v110 = StorageStatsService.translate(v12);
																												return v110;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if (0 >= v9.length) {
			PackageStats v12 = new PackageStats("StorageStatsService");
			boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
			if (v15 == 0) {
				int v14 = 0;
				boolean v17 = Installer.checkBeforeRemote();
				if (v17 != 0) {
					if (v11 == 0) {
						if (0 >= v11.length) {
							BlockGuard$VmPolicy v18 = BlockGuard.getVmPolicy();
							v18.onPathAccess(v11[0]);
							if ((0 + 1) >= v11.length) {
								[J v20 = this.mInstalld.getAppSize(p1, v9, v1, v14, v2, v10, v11);
								PackageStats.codeSize = (PackageStats.codeSize + v20[0]);
								PackageStats.dataSize = (PackageStats.dataSize + v20[1]);
								PackageStats.cacheSize = (PackageStats.cacheSize + v20[2]);
								PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v20[3]);
								PackageStats.externalDataSize = (PackageStats.externalDataSize + v20[4]);
								PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v20[5]);
								boolean v21 = SystemProperties.getBoolean("fw.verify_storage", 0);
								if (v21 == 0) {
									PackageStats v22 = new PackageStats("StorageStatsService");
									boolean v25 = Installer.checkBeforeRemote();
									if (v25 != 0) {
										if (v11 == 0) {
											if (((0 + 1) + 1) >= v11.length) {
												BlockGuard$VmPolicy v26 = BlockGuard.getVmPolicy();
												v26.onPathAccess(v11[((0 + 1) + 1)]);
												if ((((0 + 1) + 1) + 1) >= v11.length) {
													[J v28 = this.mInstalld.getAppSize(p1, v9, v1, 0, v2, v10, v11);
													PackageStats.codeSize = (PackageStats.codeSize + v28[0]);
													PackageStats.dataSize = (PackageStats.dataSize + v28[1]);
													PackageStats.cacheSize = (PackageStats.cacheSize + v28[2]);
													PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v28[3]);
													PackageStats.externalDataSize = (PackageStats.externalDataSize + v28[4]);
													PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v28[5]);
													StringBuilder v29 = new StringBuilder();
													StringBuilder v31 = v29.append("UID ");
													StringBuilder v32 = v29.append(p2);
													String v33 = v29.toString();
													StringBuilder v35 = new StringBuilder();
													StringBuilder v37 = v35.append(v33);
													StringBuilder v38 = v35.append(" codeSize");
													String v39 = v35.toString();
													StorageStatsService.checkEquals(v39, PackageStats.codeSize, PackageStats.codeSize);
													StringBuilder v41 = new StringBuilder();
													StringBuilder v43 = v41.append(v33);
													StringBuilder v44 = v41.append(" dataSize");
													String v45 = v41.toString();
													StorageStatsService.checkEquals(v45, PackageStats.dataSize, PackageStats.dataSize);
													StringBuilder v47 = new StringBuilder();
													StringBuilder v49 = v47.append(v33);
													StringBuilder v50 = v47.append(" cacheSize");
													String v51 = v47.toString();
													StorageStatsService.checkEquals(v51, PackageStats.cacheSize, PackageStats.cacheSize);
													StringBuilder v53 = new StringBuilder();
													StringBuilder v55 = v53.append(v33);
													StringBuilder v56 = v53.append(" externalCodeSize");
													String v57 = v53.toString();
													StorageStatsService.checkEquals(v57, PackageStats.externalCodeSize, PackageStats.externalCodeSize);
													StringBuilder v59 = new StringBuilder();
													StringBuilder v61 = v59.append(v33);
													StringBuilder v62 = v59.append(" externalDataSize");
													String v63 = v59.toString();
													StorageStatsService.checkEquals(v63, PackageStats.externalDataSize, PackageStats.externalDataSize);
													StringBuilder v65 = new StringBuilder();
													StringBuilder v67 = v65.append(v33);
													StringBuilder v68 = v65.append(" externalCacheSize");
													String v69 = v65.toString();
													StorageStatsService.checkEquals(v69, PackageStats.externalCacheSize, PackageStats.externalCacheSize);
													if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
														StorageStatsService$$ExternalSyntheticLambda2 v71 = new StorageStatsService$$ExternalSyntheticLambda2(v12,p2,1);
														int v74 = this.mStorageStatsAugmenters.size();
														if (0 >= v74) {
															Object v75 = this.mStorageStatsAugmenters.get(0);
															StringBuilder v76 = new StringBuilder();
															StringBuilder v78 = v76.append("queryStatsForUid");
															StringBuilder v79 = v76.append(":");
															StringBuilder v80 = v76.append(Pair.first);
															String v81 = v76.toString();
															Trace.traceBegin(524288, v81);
															v71.accept(Pair.second);
															Trace.traceEnd(524288);
															if ((0 + 1) >= v74) {
																StorageStats v86 = new StorageStats();
																StorageStats.codeBytes = (PackageStats.codeSize + PackageStats.externalCodeSize);
																StorageStats.dataBytes = (PackageStats.dataSize + PackageStats.externalDataSize);
																StorageStats.cacheBytes = (PackageStats.cacheSize + PackageStats.externalCacheSize);
																StorageStats.externalCacheBytes = PackageStats.externalCacheSize;
																StorageStats v85 = v86;
																return v85;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if (0 >= v9.length) {
			ApplicationInfo v12 = this.mPackage.getApplicationInfoAsUser(v9[0], 8192, v1);
			boolean v13 = v12.isSystemApp();
			if (v13 == 0) {
				String v14 = v12.getCodePath();
				Object v15 = ArrayUtils.appendElement(Strin.class, v11, v14);
				if ((0 + 1) >= v9.length) {
					PackageStats v16 = new PackageStats("StorageStatsService");
					int v18 = StorageStatsService.getDefaultFlags();
					this.mInstaller.getAppSize(p1, v9, v1, v18, v2, v10, v11, v16);
					boolean v20 = SystemProperties.getBoolean("fw.verify_storage", 0);
					if (v20 == 0) {
						if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
							StorageStats v21 = StorageStatsService.translate(v16);
							return v21;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['PackageStats v12 = new PackageStats("StorageStatsService");\nint v14 = 0;\n[J v20 = this.mInstalld.getAppSize(p1, v9, v1, v14, v2, v10, v11);\nPackageStats.codeSize = (PackageStats.codeSize + v20[0]);\nStorageStats v21 = StorageStatsService.translate(v16);\nreturn v21;', 'ApplicationInfo v12 = this.mPackage.getApplicationInfoAsUser(v9[0], 8192, v1);\nthis.mInstaller.getAppSize(p1, v9, v1, v18, v2, v10, v11, v16);\nStorageStats v21 = StorageStatsService.translate(v16);\nreturn v21;']

The method queryStatsForUid has the following similar APIs:

- API Name: queryStatsForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.9744590520858765
  - Access Control Level: SYS_OR_SIG and the following code:
PackageStats v21 = new PackageStats("StorageStatsService");
int v23 = this.mInstalld.getAppSize(p1, v18, v10, v23, v11, v19, v20);
PackageStats.codeSize = (PackageStats.codeSize + v23[0]);
StorageStats v95 = new StorageStats();
return v9;

- API Name: queryStatsForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.8863523006439209
  - Access Control Level: SYS_OR_SIG and the following code:
String v7 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
Object v16 = ArrayUtils.appendElement(Strin.class, v12, v15);
this.mInstaller.getAppSize(p1, v10, p3, 0, v9, v11, v12, v17);
StorageStats v24 = StorageStatsService.translate(v17);

