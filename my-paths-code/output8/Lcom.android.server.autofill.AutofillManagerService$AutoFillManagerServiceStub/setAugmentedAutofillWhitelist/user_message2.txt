The method setAugmentedAutofillWhitelist has the following code snippet:

This is path 1 for the API with depth 2:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		boolean v7 = AutofillManagerServiceImpl.isCalledByAugmentedAutofillServiceLocked("setAugmentedAutofillWhitelistLocked", v5);
		if (v7 != 0) {
			if (AbstractMasterSystemService.verbose == 0) {
				if (AbstractMasterSystemService.verbose == 0) {
					AutofillManagerService.mAugmentedAutofillState.setWhitelist(AbstractPerUserSystemService.mUserId, p1, p2);
					if (this.mRemoteAugmentedAutofillServiceInfo == 0) {
						ComponentName v27 = this.mRemoteAugmentedAutofillServiceInfo.getComponentName();
						String v28 = v27.flattenToShortString();
						LogMaker v29 = new LogMaker(1721);
						if (v28 != 0) {
							boolean v32 = LogMaker.isValidValue(v28);
							if (v32 == 0) {
								String v33 = v28.toString();
								byte[] v34 = v33.getBytes();
								if (v34.length <= 4000) {
									LogMaker v31 = LogMaker;
									if (p1 == 0) {
										int v42 = p1.size();
										Integer v43 = Integer.valueOf(v42);
										if (v43 != 0) {
											boolean v45 = LogMaker.isValidValue(v43);
											if (v45 == 0) {
												String v46 = v43.toString();
												byte[] v47 = v46.getBytes();
												if (v47.length <= 4000) {
													LogMaker v44 = LogMaker;
													if (p2 == 0) {
														int v55 = p2.size();
														Integer v56 = Integer.valueOf(v55);
														if (v56 != 0) {
															boolean v58 = LogMaker.isValidValue(v56);
															if (v58 == 0) {
																String v59 = v56.toString();
																byte[] v60 = v59.getBytes();
																if (v60.length <= 4000) {
																	LogMaker v57 = LogMaker;
																	this.mMetricsLogger.write(v31);
																	boolean v6 = 1;
																	if (v6 == 0) {
																		p3.send(0, 0);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		boolean v7 = AutofillManagerServiceImpl.isCalledByAugmentedAutofillServiceLocked("setAugmentedAutofillWhitelistLocked", v5);
		if (v7 != 0) {
			if (AbstractMasterSystemService.verbose == 0) {
				AutofillManagerServiceImpl.whitelistForAugmentedAutofillPackages(p1, p2);
				if (this.mRemoteAugmentedAutofillServiceInfo == 0) {
					ComponentName v18 = this.mRemoteAugmentedAutofillServiceInfo.getComponentName();
					String v19 = v18.flattenToShortString();
					LogMaker v20 = new LogMaker(1721);
					LogMaker v22 = v20.addTaggedData(908, v19);
					if (p1 == 0) {
						int v23 = p1.size();
						Integer v24 = Integer.valueOf(v23);
						LogMaker v25 = v22.addTaggedData(1722, v24);
						if (p2 == 0) {
							int v26 = p2.size();
							Integer v27 = Integer.valueOf(v26);
							LogMaker v28 = v22.addTaggedData(1723, v27);
							this.mMetricsLogger.write(v22);
							boolean v6 = 1;
							if (v6 == 0) {
								this.this$0.send(p3, 0);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AutofillManagerService.access$2900(this.this$0);
	AbstractPerUserSystemService v3 = AutofillManagerService.access$3000(this.this$0, v1);
	if (v3 == 0) {
		if (Helper.sVerbose == 0) {
			if (setAugmentedAutofillWhitelistLocked() == 0) {
				AutofillManagerService.-$$Nest$msend(this.this$0, p3, 0);
				return;
			}
		}
	}
}

and the following sink code:
['AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);\nAutofillManagerService.mAugmentedAutofillState.setWhitelist(AbstractPerUserSystemService.mUserId, p1, p2);', 'AutofillManagerServiceImpl.whitelistForAugmentedAutofillPackages(p1, p2);']

The method setAugmentedAutofillWhitelist has the following similar APIs:

- API Name: restoreSession(ILandroid/os/IBinder;Landroid/os/IBinder;Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.773596465587616
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v6 = this.this$0.peekServiceForUserLocked(v1);
AutofillManagerService.-$$Nest$msend(this.this$0, p4, restoreSession());

- API Name: getAutofillServiceComponentName(Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.7551361322402954
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
Bundle v13 = SyncResultReceiver.bundleFor(getServiceComponentName());
AutofillManagerService.send(p1, v13);

