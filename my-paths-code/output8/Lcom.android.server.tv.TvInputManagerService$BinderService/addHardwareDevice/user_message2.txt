The method addHardwareDevice in the following class Lcom.android.server.tv.TvInputManagerService$BinderService has the following code snippet:

This is path 1 for the API with depth 2:
public void addHardwareDevice(int p1){
	TvInputHardwareInfo$Builder v1 = new TvInputHardwareInfo$Builder();
	Integer v4 = Integer.valueOf(p1);
	this.mDeviceId = v4;
	TvInputHardwareInfo$Builder v3 = TvInputHardwareInfo$Builder;
	Integer v6 = Integer.valueOf(9);
	this.mType = v6;
	TvInputHardwareInfo$Builder v5 = TvInputHardwareInfo$Builder;
	this.mAudioType = 0;
	TvInputHardwareInfo$Builder v7 = TvInputHardwareInfo$Builder;
	this.mAudioAddress = "0";
	TvInputHardwareInfo$Builder v8 = TvInputHardwareInfo$Builder;
	Integer v10 = Integer.valueOf(0);
	this.mHdmiPortId = v10;
	TvInputHardwareInfo$Builder v9 = TvInputHardwareInfo$Builder;
	if (this.mDeviceId == 0) {
		if (this.mType == 0) {
			int v12 = this.mType.intValue();
			if (v12 != 9) {
				if (this.mHdmiPortId == 0) {
					int v13 = this.mType.intValue();
					if (v13 == 9) {
						if (this.mHdmiPortId != 0) {
							TvInputHardwareInfo v14 = new TvInputHardwareInfo(0);
							int v16 = this.mDeviceId.intValue();
							this.mDeviceId = v16;
							int v18 = this.mType.intValue();
							this.mType = v18;
							this.mAudioType = this.mAudioType;
							int v21 = this.mAudioType;
							if (v21 == 0) {
								this.mAudioAddress = this.mAudioAddress;
								if (this.mHdmiPortId == 0) {
									int v23 = this.mHdmiPortId.intValue();
									this.mHdmiPortId = v23;
									int v25 = this.mCableConnectionStatus.intValue();
									this.mCableConnectionStatus = v25;
									TvInputHardwareInfo v11 = v14;
									TvInputHardwareManager v27 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
									TvInputHardwareManager$Connection v29 = new TvInputHardwareManager$Connection(TvInputHardwareManager,v11);
									this.mConfigs = 0;
									int v32 = this.mCableConnectionStatus;
									if (v32 != 0) {
										if (this.mIsCableConnectionStatusUpdated == 0) {
											this.mIsCableConnectionStatusUpdated = 1;
											TvInputHardwareInfo$Builder v34 = this.mHardwareInfo.toBuilder();
											TvInputHardwareInfo$Builder v35 = v34.cableConnectionStatus(v32);
											TvInputHardwareInfo v36 = v35.build();
											this.mHardwareInfo = v36;
											boolean v33 = this.mIsCableConnectionStatusUpdated;
											int v37 = this.mDeviceId;
											this.mConnections.put(v37, v29);
											this.mHardwareList.clear();
											int v41 = this.mConnections.size();
											if (0 >= v41) {
												Object v42 = this.mConnections.valueAt(0);
												TvInputHardwareInfo v43 = v42.getHardwareInfoLocked();
												boolean v44 = this.mHardwareList.add(v43);
												int v45 = this.mConnections.size();
												if ((0 + 1) >= v45) {
													Message v46 = this.mHandler.obtainMessage(2, 0, 0, v11);
													v46.sendToTarget();
													int v48 = this.mType;
													if (v48 != 9) {
														Iterator v50 = this.mPendingHdmiDeviceEvents.iterator();
														boolean v51 = v50.hasNext();
														if (v51 == 0) {
															Object v52 = v50.next();
															int v53 = Message.obj.getPortId();
															TvInputHardwareInfo v54 = TvInputHardwareManager.findHardwareInfoForHdmiPortLocked(v53);
															if (v54 == 0) {
																v52.sendToTarget();
																v50.remove();
																boolean v57 = v50.hasNext();
																if (v57 == 0) {
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void addHardwareDevice(int p1){
	TvInputHardwareInfo$Builder v1 = new TvInputHardwareInfo$Builder();
	Integer v4 = Integer.valueOf(p1);
	this.mDeviceId = v4;
	TvInputHardwareInfo$Builder v3 = TvInputHardwareInfo$Builder;
	Integer v6 = Integer.valueOf(9);
	this.mType = v6;
	TvInputHardwareInfo$Builder v5 = TvInputHardwareInfo$Builder;
	this.mAudioType = 0;
	TvInputHardwareInfo$Builder v7 = TvInputHardwareInfo$Builder;
	this.mAudioAddress = "0";
	TvInputHardwareInfo$Builder v8 = TvInputHardwareInfo$Builder;
	Integer v10 = Integer.valueOf(0);
	this.mHdmiPortId = v10;
	TvInputHardwareInfo$Builder v9 = TvInputHardwareInfo$Builder;
	if (this.mDeviceId == 0) {
		if (this.mType == 0) {
			int v12 = this.mType.intValue();
			if (v12 != 9) {
				if (this.mHdmiPortId == 0) {
					int v13 = this.mType.intValue();
					if (v13 == 9) {
						if (this.mHdmiPortId != 0) {
							TvInputHardwareInfo v14 = new TvInputHardwareInfo(0);
							int v16 = this.mDeviceId.intValue();
							TvInputHardwareInfo.-$$Nest$fputmDeviceId(v14, v16);
							int v18 = this.mType.intValue();
							TvInputHardwareInfo.-$$Nest$fputmType(v14, v18);
							TvInputHardwareInfo.-$$Nest$fputmAudioType(v14, this.mAudioType);
							int v21 = TvInputHardwareInfo.-$$Nest$fgetmAudioType(v14);
							if (v21 == 0) {
								TvInputHardwareInfo.-$$Nest$fputmAudioAddress(v14, this.mAudioAddress);
								if (this.mHdmiPortId == 0) {
									int v23 = this.mHdmiPortId.intValue();
									TvInputHardwareInfo.-$$Nest$fputmHdmiPortId(v14, v23);
									int v25 = this.mCableConnectionStatus.intValue();
									TvInputHardwareInfo.-$$Nest$fputmCableConnectionStatus(v14, v25);
									TvInputHardwareInfo v11 = v14;
									TvInputHardwareManager v27 = this.mTvInputHardwareManager;
									TvInputHardwareManager$Connection v29 = new TvInputHardwareManager$Connection(TvInputHardwareManager,v11);
									v29.updateConfigsLocked(0);
									int v32 = v11.getCableConnectionStatus();
									boolean v33 = v29.updateCableConnectionStatusLocked(v32);
									int v34 = v11.getDeviceId();
									this.mConnections.put(v34, v29);
									TvInputHardwareManager.buildHardwareListLocked();
									Message v37 = this.mHandler.obtainMessage(2, 0, 0, v11);
									v37.sendToTarget();
									int v39 = v11.getType();
									if (v39 != 9) {
										TvInputHardwareManager.processPendingHdmiDeviceEventsLocked();
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void addHardwareDevice(int p1){
	TvInputHardwareInfo$Builder v1 = new TvInputHardwareInfo$Builder();
	TvInputHardwareInfo$Builder v3 = v1.deviceId(p1);
	TvInputHardwareInfo$Builder v4 = v3.type(9);
	TvInputHardwareInfo$Builder v5 = v4.audioType(0);
	TvInputHardwareInfo$Builder v6 = v5.audioAddress("0");
	TvInputHardwareInfo$Builder v7 = v6.hdmiPortId(0);
	TvInputHardwareInfo v8 = v7.build();
	TvInputHardwareManager v9 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
	v9.onDeviceAvailable(v8, 0);
	return;
}

and the following sink code:
['TvInputHardwareInfo$Builder v1 = new TvInputHardwareInfo$Builder();\nTvInputHardwareInfo$Builder v3 = v1.deviceId(p1);\nTvInputHardwareInfo$Builder v4 = v3.type(9);\nTvInputHardwareInfo$Builder v5 = v4.audioType(0);\nTvInputHardwareInfo$Builder v6 = v5.audioAddress("0");\nTvInputHardwareInfo$Builder v7 = v6.hdmiPortId(0);\nTvInputHardwareInfo v8 = v7.build();', 'Integer v4 = Integer.valueOf(p1);\nthis.mDeviceId = v4;\nif (this.mDeviceId == 0) { ... }']

The method addHardwareDevice has the following similar APIs:

- API Name: registerDeviceServer(Landroid/media/midi/IMidiDeviceServer;II[Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;II)Landroid/media/midi/MidiDeviceInfo; in the following Class: Lcom.android.server.midi.MidiService with the following sink code entries:
  - Similarity: 0.8161816596984863, Code:
MidiDeviceInfo v9 = new MidiDeviceInfo(p7,this.mNextDeviceId,p2,p3,p4,p5,p6,0,p8);
this.mNextDeviceId = (this.mNextDeviceId + 1);
return v2;
  - Similarity: 0.773212730884552, Code:
p1.setDeviceInfo(v9);
  - Access Control Level: SYS_OR_SIG

- API Name: getHardwareList()Ljava/util/List; in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7970201373100281, Code:
TvInputHardwareManager v4 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
List v5 = v4.getHardwareList();
return v5;
  - Access Control Level: SYS_OR_SIG

- API Name: getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo; in the following Class: Lcom.android.server.hdmi.HdmiControlService$BinderService with the following sink code entries:
  - Similarity: 0.7335640788078308, Code:
HdmiCecLocalDevice v7 = this.mHdmiCecNetwork.getLocalDevice(4);
HdmiCecLocalDevicePlayback v6 = v7;
if (v6 == 0) { ... }
HdmiDeviceInfo$Builder v26 = new HdmiDeviceInfo$Builder(2,0);
HdmiDeviceInfo$Builder v28 = v26.setPhysicalAddress(v18);
HdmiDeviceInfo$Builder v29 = v28.setPortId(v24);
HdmiDeviceInfo$Builder v30 = v29.setVendorId(0);
StringBuilder v31 = new StringBuilder();
StringBuilder v33 = v31.append("HDMI");
StringBuilder v34 = v33.append(v24);
String v35 = v34.toString();
HdmiDeviceInfo$Builder v36 = v30.setDisplayName(v35);
HdmiDeviceInfo v37 = v36.build();
  - Access Control Level: SYS_OR_SIG

- API Name: getAvailableTvStreamConfigList(Ljava/lang/String;I)Ljava/util/List; in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7108826637268066, Code:
TvInputHardwareManager v6 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
List v7 = v6.getAvailableTvStreamConfigList(p1, v3, v5);
return v7;
  - Access Control Level: SYS_OR_SIG

- API Name: removeHardwareDevice(I)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7041230201721191, Code:
TvInputHardwareManager v1 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
v1.onDeviceUnavailable(p1);
  - Access Control Level: NONE

