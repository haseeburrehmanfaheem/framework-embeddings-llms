This is path 1 for the API with depth 2:
public void authorizeReport(int p1, String p2, String p3, String p4, int p5, IIncidentAuthListener p6){
	long v2 = Binder.clearCallingIdentity();
	PendingReports v3 = this.mPendingReports;
	IBinder v5 = p6.asBinder();
	PendingReports$$ExternalSyntheticLambda0 v6 = new PendingReports$$ExternalSyntheticLambda0(PendingReports,p1,p2,p3,p4,p5,p6);
	if (1 != 0) {
		int v9 = this.mPending.size();
		if ((v9 - 1) < 0) {
			Object v10 = this.mPending.get((v9 - 1));
			if (RequestQueue$Rec.key != v5) {
				if (RequestQueue$Rec.value == 0) {
					if (((v9 - 1) + -1) < 0) {
						Object v11 = this.mPending.get(((v9 - 1) + -1));
						if (RequestQueue$Rec.key != v5) {
							if (RequestQueue$Rec.value == 0) {
								Object v12 = this.mPending.remove(((v9 - 1) + -1));
								if (0 != 0) {
									RequestQueue$Rec v13 = new RequestQueue$Rec(RequestQueue,v5,1,v6);
									boolean v15 = this.mPending.add(v13);
									if (this.mStarted == 0) {
										boolean v16 = this.mHandler.post(this.mWorker);
										Binder.restoreCallingIdentity(v2);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void authorizeReport(int p1, String p2, String p3, String p4, int p5, IIncidentAuthListener p6){
	long v2 = Binder.clearCallingIdentity();
	PendingReports v3 = this.mPendingReports;
	IBinder v5 = p6.asBinder();
	PendingReports$$ExternalSyntheticLambda0 v6 = new PendingReports$$ExternalSyntheticLambda0(PendingReports,p1,p2,p3,p4,p5,p6);
	this.mRequestQueue.enqueue(v5, 1, v6);
	Binder.restoreCallingIdentity(v2);
	return;
}


This is path 3 for the API with depth 0:
public void authorizeReport(int p1, String p2, String p3, String p4, int p5, IIncidentAuthListener p6){
	long v2 = Binder.clearCallingIdentity();
	PendingReports v3 = IncidentCompanionService.-$$Nest$fgetmPendingReports(this.this$0);
	v3.authorizeReport(p1, p2, p3, p4, p5, p6);
	Binder.restoreCallingIdentity(v2);
	return;
}
