The method setAutoRevokeExempted in the following class Lcom.android.server.pm.permission.PermissionManagerService has the following code snippet:

This is path 1 for the API with depth 1:
public boolean setAutoRevokeExempted(String p1, boolean p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
	int v3 = Binder.getCallingUid();
	if (v5 != 0) {
		boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
		if (0 != 0) {
			if (v6 == 0) {
				boolean v4 = 1;
				if (v4 != 0) {
					int v8 = v2.getUid();
					int v9 = UserHandle.getUid(p3, v8);
					String v10 = v2.getPackageName();
					int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);
					if (v11 == 0) {
						long v12 = Binder.clearCallingIdentity();
						String v13 = v2.getPackageName();
						if (p2 == 0) {
							this.mAppOpsManager.setMode(97, v9, v13, 0);
							Binder.restoreCallingIdentity(v12);
							boolean v7 = 1;
							return v7;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public boolean setAutoRevokeExempted(String p1, boolean p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
	int v3 = Binder.getCallingUid();
	boolean v4 = p0.checkAutoRevokeAccess(v2, v3);
	if (v4 != 0) {
		boolean v5 = p0.setAutoRevokeExemptedInternal(v2, p2, p3);
		return v5;
	}
}


This is path 3 for the API with depth 1:
public boolean setAutoRevokeExempted(String p1, boolean p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
	int v3 = Binder.getCallingUid();
	if (v5 != 0) {
		boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
		if (0 != 0) {
			if (v6 == 0) {
				boolean v4 = 1;
				if (v4 != 0) {
					int v8 = v2.getUid();
					int v9 = UserHandle.getUid(p3, v8);
					String v10 = v2.getPackageName();
					int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);
					if (v11 == 0) {
						boolean v7 = 0;
						return v7;
					}
				}
			}
		}
	}
}

and the following sink code:
['AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);\nint v3 = Binder.getCallingUid();\nboolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);\nint v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);\nthis.mAppOpsManager.setMode(97, v9, v13, 0);', 'boolean v4 = p0.checkAutoRevokeAccess(v2, v3);\nboolean v5 = p0.setAutoRevokeExemptedInternal(v2, p2, p3);']

The method setAutoRevokeExempted has the following similar APIs:

- API Name: isAutoRevokeExempted(Ljava/lang/String;I)Z in the following Class: Lcom.android.server.pm.permission.PermissionManagerService with the following sink code entries:
  - Similarity: 0.8951473832130432, Code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v3 = Binder.getCallingUid();
boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2);
boolean v5 = p0.checkAutoRevokeAccess(v2, v3);
int v6 = v2.getUid();
int v7 = UserHandle.getUid(p2, v6);
long v8 = Binder.clearCallingIdentity();
int v9 = this.mAppOpsManager.checkOpNoThrow(97, v7, p1);
  - Similarity: 0.7884515523910522, Code:
if (v4 == 0) {
if (v6 != 0) {
boolean v7 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
if (0 != 0) {
if (v7 == 0) {
  - Access Control Level: SYS_OR_SIG

- API Name: getApplicationLocales(Ljava/lang/String;I)Landroid/os/LocaleList; in the following Class: Lcom.android.server.locales.LocaleManagerService$LocaleManagerBinderService with the following sink code entries:
  - Similarity: 0.7972068190574646, Code:
int v5 = this.mActivityManagerInternal.handleIncomingUser(v3, v4, p2, 0, 0, "getApplicationLocales", 0);
boolean v7 = LocaleManagerService.isPackageOwnedByCaller(p1, v5, 0);
long v14 = Binder.clearCallingIdentity();
ActivityTaskManagerInternal$PackageConfig v16 = this.mActivityTaskManagerInternal.getApplicationConfig(p1, v5);
LocaleList v17 = LocaleList.getEmptyLocaleList();
Binder.restoreCallingIdentity(v14);
LocaleList v1 = v15;
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: print(Ljava/lang/String;Landroid/print/IPrintDocumentAdapter;Landroid/print/PrintAttributes;Ljava/lang/String;II)Landroid/os/Bundle; in the following Class: Lcom.android.server.print.PrintManagerService$PrintManagerImpl with the following sink code entries:
  - Similarity: 0.7849981784820557, Code:
PackageManager v10 = this.mContext.getPackageManager();
int v11 = Binder.getCallingUid();
String v12 = v10.getPackagesForUid(v11);
UserState v19 = new UserState(this.mContext,v5,this.mLock,0);
  - Access Control Level: SYS_OR_SIG

- API Name: checkPhoneNumberAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)I in the following Class: Lcom.android.server.pm.permission.LegacyPermissionManagerService with the following sink code entries:
  - Similarity: 0.778842031955719, Code:
PackageManager v4 = this.mContext.getPackageManager();
UserHandle v5 = UserHandle.getUserHandleForUid(p5);
ApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);
  - Access Control Level: DANGEROUS

- API Name: checkDeviceIdentifierAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)I in the following Class: Lcom.android.server.pm.permission.LegacyPermissionManagerService with the following sink code entries:
  - Similarity: 0.7781213521957397, Code:
long v4 = this.mInjector.clearCallingIdentity();
Object v6 = this.mContext.getSystemService("appops");
int v7 = v5.noteOpNoThrow("android:read_device_identifiers", p5, p1, p3, p2);
this.mInjector.restoreCallingIdentity(v4);
Object v10 = this.mContext.getSystemService("device_policy");
boolean v11 = v9.hasDeviceIdentifierAccess(p1, p4, p5);
  - Access Control Level: SYS_OR_SIG

