The method isAutoRevokeExempted in the following class Lcom.android.server.pm.permission.PermissionManagerService has the following code snippet:

This is path 1 for the API with depth 1:
public boolean isAutoRevokeExempted(String p1, int p2){
	Object v1 = Objects.requireNonNull(p1);
	AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
	int v3 = Binder.getCallingUid();
	boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2);
	if (v4 == 0) {
		if (v6 != 0) {
			boolean v7 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
			if (0 != 0) {
				if (v7 == 0) {
					boolean v5 = 1;
					if (v5 != 0) {
						int v8 = v2.getUid();
						int v9 = UserHandle.getUid(p2, v8);
						long v10 = Binder.clearCallingIdentity();
						int v11 = this.mAppOpsManager.checkOpNoThrow(97, v9, p1);
						if (v11 != 1) {
							Binder.restoreCallingIdentity(v10);
							return 0;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public boolean isAutoRevokeExempted(String p1, int p2){
	Object v1 = Objects.requireNonNull(p1);
	AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
	int v3 = Binder.getCallingUid();
	boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2);
	if (v4 == 0) {
		boolean v5 = p0.checkAutoRevokeAccess(v2, v3);
		if (v5 != 0) {
			int v6 = v2.getUid();
			int v7 = UserHandle.getUid(p2, v6);
			long v8 = Binder.clearCallingIdentity();
			int v9 = this.mAppOpsManager.checkOpNoThrow(97, v7, p1);
			if (v9 != 1) {
				Binder.restoreCallingIdentity(v8);
				return 0;
			}
		}
	}
}


This is path 3 for the API with depth 1:
public boolean isAutoRevokeExempted(String p1, int p2){
	Object v1 = Objects.requireNonNull(p1);
	AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
	int v3 = Binder.getCallingUid();
	boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2);
	if (v4 == 0) {
		if (v6 != 0) {
			boolean v7 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
			if (0 != 0) {
				if (v7 == 0) {
					boolean v5 = 1;
					if (v5 != 0) {
						return 0;
					}
				}
			}
		}
	}
}

and the following sink code:
['AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);\nint v3 = Binder.getCallingUid();\nboolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2);\nboolean v5 = p0.checkAutoRevokeAccess(v2, v3);\nint v6 = v2.getUid();\nint v7 = UserHandle.getUid(p2, v6);\nlong v8 = Binder.clearCallingIdentity();\nint v9 = this.mAppOpsManager.checkOpNoThrow(97, v7, p1);', 'if (v4 == 0) {\nif (v6 != 0) {\nboolean v7 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);\nif (0 != 0) {\nif (v7 == 0) {']

The method isAutoRevokeExempted has the following similar APIs:

- API Name: setAutoRevokeExempted(Ljava/lang/String;ZI)Z in the following Class: Lcom.android.server.pm.permission.PermissionManagerService with the following sink code entries:
  - Similarity: 0.8951473832130432, Code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v3 = Binder.getCallingUid();
boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);
this.mAppOpsManager.setMode(97, v9, v13, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: setUserRestriction(Ljava/lang/String;ZI)V in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.794417142868042, Code:
int v4 = Binder.getCallingUid();
IPackageManager v5 = AppGlobals.getPackageManager();
String v6 = v5.getPackagesForUid(v4);
boolean v16 = UserRestrictionsUtils.isSystemApp(v4, 0);
Object v20 = this.mUserRestrictions.get(p3);
Bundle v19 = v20;
Bundle v22 = new Bundle(v19);
v21.putBoolean(p1, p2);
  - Similarity: 0.7865381240844727, Code:
int v4 = Binder.getCallingUid();
IPackageManager v6 = ActivityThread.getPackageManager();
IPackageManager v5 = v6;
String v7 = v5.getPackagesForUid(v4);
boolean v24 = v23.isSystemApp();
Bundle v27 = this.mBaseUserRestrictions.getRestrictions(p3);
Bundle v28 = BundleUtils.clone(v27);
v28.putBoolean(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: checkPhoneNumberAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)I in the following Class: Lcom.android.server.pm.permission.LegacyPermissionManagerService with the following sink code entries:
  - Similarity: 0.7816304564476013, Code:
PackageManager v4 = this.mContext.getPackageManager();
UserHandle v5 = UserHandle.getUserHandleForUid(p5);
ApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);
  - Access Control Level: DANGEROUS

- API Name: checkDeviceIdentifierAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)I in the following Class: Lcom.android.server.pm.permission.LegacyPermissionManagerService with the following sink code entries:
  - Similarity: 0.7809799313545227, Code:
long v4 = this.mInjector.clearCallingIdentity();
Object v6 = this.mContext.getSystemService("appops");
int v7 = v5.noteOpNoThrow("android:read_device_identifiers", p5, p1, p3, p2);
this.mInjector.restoreCallingIdentity(v4);
Object v10 = this.mContext.getSystemService("device_policy");
boolean v11 = v9.hasDeviceIdentifierAccess(p1, p4, p5);
  - Access Control Level: SYS_OR_SIG

- API Name: getShortcuts(Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.7632630467414856, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p3);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p3);
ShortcutUser v25 = ShortcutService.getUserShortcutsLocked(p3);
ShortcutPackage v26 = v25.getPackageShortcuts(p1);
ArrayList v22 = new ArrayList();
ShortcutPackage.findAll(v22, v19, 9, 0, 0, 0);
ParceledListSlice v31 = new ParceledListSlice(v32);
  - Access Control Level: SYS_OR_SIG

