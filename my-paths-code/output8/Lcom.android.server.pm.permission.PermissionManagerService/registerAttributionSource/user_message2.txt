The method registerAttributionSource in the following class Lcom.android.server.pm.permission.PermissionManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void registerAttributionSource(AttributionSourceState p1){
	AttributionSource v1 = new AttributionSource(p1);
	if (this.mNextCached != 0) {
		if (AttributionSourceState.next == 0) {
			if (AttributionSourceState.next.length <= 0) {
				AttributionSource v14 = new AttributionSource(AttributionSourceState.next[0]);
				this.mNextCached = v14;
				AttributionSource v13 = this.mNextCached;
				if (v13 == 0) {
					if (this.mNextCached != 0) {
						if (AttributionSourceState.next == 0) {
							if (AttributionSourceState.next.length <= 0) {
								AttributionSource v17 = new AttributionSource(AttributionSourceState.next[0]);
								this.mNextCached = v17;
								AttributionSource v16 = this.mNextCached;
								if (v16 == 0) {
									IBinder v20 = v13.getToken();
									Object v21 = this.mAttributions.get(v20);
									if (v21 == 0) {
										boolean v22 = v21.equals(v13);
										boolean v19 = v22;
										if (v19 == 0) {
											IBinder v23 = AttributionSourceState.token;
											Object v24 = this.mAttributions.put(v23, v1);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerAttributionSource(AttributionSourceState p1){
	AttributionSource v1 = new AttributionSource(p1);
	AttributionSource v13 = v1.getNext();
	if (v13 == 0) {
		AttributionSource v14 = v13.getNext();
		if (v14 == 0) {
			boolean v15 = PermissionManagerService$AttributionSourceRegistry.isRegisteredAttributionSource(v13);
			if (v15 == 0) {
				IBinder v16 = v1.getToken();
				Object v17 = this.mAttributions.put(v16, v1);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void registerAttributionSource(AttributionSourceState p1){
	AttributionSource v1 = new AttributionSource(p1);
	this.mAttributionSourceRegistry.registerAttributionSource(v1);
	return;
}

and the following sink code:
['AttributionSource v1 = new AttributionSource(p1);\nObject v24 = this.mAttributions.put(v23, v1);', 'AttributionSource v1 = new AttributionSource(p1);\nObject v17 = this.mAttributions.put(v16, v1);', 'AttributionSource v1 = new AttributionSource(p1);\nthis.mAttributionSourceRegistry.registerAttributionSource(v1);']

The method registerAttributionSource has the following similar APIs:

- API Name: isRegisteredAttributionSource(Landroid/content/AttributionSourceState;)Z in the following Class: Lcom.android.server.pm.permission.PermissionManagerService with the following sink code entries:
  - Similarity: 0.9434214234352112, Code:
AttributionSource v1 = new AttributionSource(p1);
boolean v3 = this.mAttributionSourceRegistry.isRegisteredAttributionSource(v1);
return v3;
  - Similarity: 0.9009782671928406, Code:
AttributionSource v1 = new AttributionSource(p1);
IBinder v4 = v1.getToken();
Object v5 = this.mAttributions.get(v4);
if (v5 == 0) {
boolean v6 = v5.equals(v1);
boolean v3 = v6;
return v3;
  - Similarity: 0.8968510627746582, Code:
AttributionSource v1 = new AttributionSource(p1);
IBinder v4 = AttributionSourceState.token;
Object v5 = this.mAttributions.get(v4);
if (v5 == 0) {
... complex conditional logic ...
return v3;
  - Access Control Level: NONE

- API Name: checkOp(ILandroid/content/AttributionSourceState;Ljava/lang/String;ZZ)I in the following Class: Lcom.android.server.pm.permission.PermissionManagerService$PermissionCheckerService with the following sink code entries:
  - Similarity: 0.8136383295059204, Code:
AttributionSource v8 = new AttributionSource(p2);
v7.finishOp(v16, p1, v17, v15, v18);
ConcurrentHashMap v20 = PermissionManagerService.-$$Nest$sfgetsRunningAttributionSources();
IBinder v21 = getNext().getToken(); Object v22 = v20.remove(v21);
  - Access Control Level: SYS_OR_SIG

