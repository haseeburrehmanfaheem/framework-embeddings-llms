The method getVersionCodeForPackage has the following code snippet:

This is path 1 for the API with depth 2:
public long getVersionCodeForPackage(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v16 = new ComputerEngine(v14,v11);
							long v18 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v18, -1);
								Computer v12 = v16;
								this.sSnapshot.set(v12);
								Computer v21 = v12.use();
								Computer v3 = v21;
								PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);
								if (v22 == 0) {
									long v23 = v22.getLongVersionCode();
									return 0;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long getVersionCodeForPackage(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);
						this.sSnapshot.set(v12);
						Computer v14 = v12.use();
						Computer v3 = v14;
						PackageInfo v15 = v3.getPackageInfo(p1, 0, v2);
						if (v15 == 0) {
							long v16 = v15.getLongVersionCode();
							return 0;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public long getVersionCodeForPackage(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	Computer v3 = this.mPm.snapshotComputer();
	PackageInfo v4 = v3.getPackageInfo(p1, 0, v2);
	if (v4 == 0) {
		long v5 = v4.getLongVersionCode();
		return 0;
	}
}

and the following sink code:
['PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);\nreturn v22.getLongVersionCode();', 'Computer v14 = v12.use();\nComputer v3 = v14;\nPackageInfo v15 = v3.getPackageInfo(p1, 0, v2);\nlong v16 = v15.getLongVersionCode();\nreturn v16;', 'Computer v3 = this.mPm.snapshotComputer();\nPackageInfo v4 = v3.getPackageInfo(p1, 0, v2);\nlong v5 = v4.getLongVersionCode();\nreturn v5;']

The method getVersionCodeForPackage has the following similar APIs:

- API Name: getAllPackages()[Ljava/lang/String; with Similarity Score: 0.9042066335678101
  - Access Control Level: NONE and the following code:
Computer v1 = this.mPm.snapshotComputer();
List v2 = v1.getAllPackages();
String v3 = new String(0);
Object v4 = v2.toArray(v3);
return v4;

- API Name: getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.873868465423584
  - Access Control Level: NONE and the following code:
Computer v1 = this.mPm.snapshotComputer();
String v2 = v1.getInstallerPackageName(p1);

