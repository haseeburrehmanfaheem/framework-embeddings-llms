The method getLocationFlags has the following code snippet:

This is path 1 for the API with depth 2:
public int getLocationFlags(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v16 = new ComputerEngine(v14,v11);
							long v18 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v18, -1);
								Computer v12 = v16;
								this.sSnapshot.set(v12);
								Computer v21 = v12.use();
								Computer v3 = v21;
								ApplicationInfo v22 = v3.getApplicationInfo(p1, 0, v2);
								if (v22 == 0) {
									boolean v23 = v22.isSystemApp();
									boolean v24 = v22.isVendor();
									if (v24 == 0) {
										boolean v25 = v22.isProduct();
										if (v25 == 0) {
											return ((v23 | 2) | 0);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getLocationFlags(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);
						this.sSnapshot.set(v12);
						Computer v14 = v12.use();
						Computer v3 = v14;
						ApplicationInfo v15 = v3.getApplicationInfo(p1, 0, v2);
						if (v15 == 0) {
							boolean v16 = v15.isSystemApp();
							boolean v17 = v15.isVendor();
							if (v17 == 0) {
								boolean v18 = v15.isProduct();
								if (v18 == 0) {
									return ((v16 | 2) | 0);
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int getLocationFlags(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	Computer v3 = this.mPm.snapshotComputer();
	ApplicationInfo v4 = v3.getApplicationInfo(p1, 0, v2);
	if (v4 == 0) {
		boolean v5 = v4.isSystemApp();
		boolean v6 = v4.isVendor();
		if (v6 == 0) {
			boolean v7 = v4.isProduct();
			if (v7 == 0) {
				return ((v5 | 2) | 0);
			}
		}
	}
}

and the following sink code:
['ComputerEngine v16 = new ComputerEngine(v14,v11);\nApplicationInfo v22 = v3.getApplicationInfo(p1, 0, v2);\nreturn ((v23 | 2) | 0);', 'Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);\nApplicationInfo v15 = v3.getApplicationInfo(p1, 0, v2);\nreturn ((v16 | 2) | 0);', 'ApplicationInfo v4 = v3.getApplicationInfo(p1, 0, v2);\nreturn ((v5 | 2) | 0);']

The method getLocationFlags has the following similar APIs:

- API Name: getAllPackages()[Ljava/lang/String; with Similarity Score: 0.8097245693206787
  - Access Control Level: NONE and the following code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
Computer v12 = v10.use();
List v13 = v12.getAllPackages();
String v14 = new String(0);
Object v15 = v13.toArray(v14);
return v15;

- API Name: getPackageScreenCompatMode(Ljava/lang/String;)I with Similarity Score: 0.806827187538147
  - Access Control Level: SYS_OR_SIG and the following code:
ApplicationInfo v8 = v7.getApplicationInfo(p1, 0, 0);
int v9 = CompatModePackages.computeCompatModeLocked(v8);
int v6 = v9;
return v6;

