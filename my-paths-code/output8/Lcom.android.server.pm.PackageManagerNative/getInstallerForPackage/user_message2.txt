The method getInstallerForPackage in the following class Lcom.android.server.pm.PackageManagerNative has the following code snippet:

This is path 1 for the API with depth 2:
public String getInstallerForPackage(String p1){
	boolean v2 = Thread.holdsLock(this.mLock);
	if (v2 == 0) {
		Object v3 = this.sSnapshot.get();
		int v4 = this.sSnapshotPendingVersion.get();
		if (v3 == 0) {
			int v5 = v3.getVersion();
			if (v5 != v4) {
				Object v6 = this.sSnapshot.get();
				int v7 = this.sSnapshotPendingVersion.get();
				if (v6 == 0) {
					int v8 = v6.getVersion();
					if (v8 != v7) {
						int v9 = this.sSnapshotPendingVersion.get();
						long v11 = SystemClock.currentTimeMicro();
						if (v6 != 0) {
							PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v14 = new ComputerEngine(v12,v9);
							long v16 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v11, v16, -1);
								Computer v10 = v14;
								this.sSnapshot.set(v10);
								Computer v19 = v10.use();
								Computer v1 = v19;
								String v20 = v1.getInstallerPackageName(p1);
								boolean v21 = TextUtils.isEmpty(v20);
								if (v21 != 0) {
									int v22 = Binder.getCallingUid();
									int v23 = UserHandle.getUserId(v22);
									ApplicationInfo v24 = v1.getApplicationInfo(p1, 0, v23);
									if (v24 == 0) {
										if ((ApplicationInfo.flags & 1) == 0) {
											return "preload";
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String getInstallerForPackage(String p1){
	boolean v2 = Thread.holdsLock(this.mLock);
	if (v2 == 0) {
		Object v3 = this.sSnapshot.get();
		int v4 = this.sSnapshotPendingVersion.get();
		if (v3 == 0) {
			int v5 = v3.getVersion();
			if (v5 != v4) {
				Object v6 = this.sSnapshot.get();
				int v7 = this.sSnapshotPendingVersion.get();
				if (v6 == 0) {
					int v8 = v6.getVersion();
					if (v8 != v7) {
						int v9 = this.sSnapshotPendingVersion.get();
						Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
						this.sSnapshot.set(v10);
						Computer v12 = v10.use();
						Computer v1 = v12;
						String v13 = v1.getInstallerPackageName(p1);
						boolean v14 = TextUtils.isEmpty(v13);
						if (v14 != 0) {
							int v15 = Binder.getCallingUid();
							int v16 = UserHandle.getUserId(v15);
							ApplicationInfo v17 = v1.getApplicationInfo(p1, 0, v16);
							if (v17 == 0) {
								if ((ApplicationInfo.flags & 1) == 0) {
									return "preload";
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String getInstallerForPackage(String p1){
	Computer v1 = this.mPm.snapshotComputer();
	String v2 = v1.getInstallerPackageName(p1);
	boolean v3 = TextUtils.isEmpty(v2);
	if (v3 != 0) {
		int v4 = Binder.getCallingUid();
		int v5 = UserHandle.getUserId(v4);
		ApplicationInfo v6 = v1.getApplicationInfo(p1, 0, v5);
		if (v6 == 0) {
			if ((ApplicationInfo.flags & 1) == 0) {
				return "preload";
			}
		}
	}
}

and the following sink code:
['Computer v1 = this.mPm.snapshotComputer();\nString v2 = v1.getInstallerPackageName(p1);', 'Object v3 = this.sSnapshot.get();\nint v4 = this.sSnapshotPendingVersion.get();\nComputer v10 = PackageManagerService.rebuildSnapshot(v6, v9);\nthis.sSnapshot.set(v10);\nComputer v12 = v10.use();\nString v13 = v12.getInstallerPackageName(p1);', 'PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);\nComputerEngine v14 = new ComputerEngine(v12,v9);\nlong v16 = SystemClock.currentTimeMicro();\nthis.mSnapshotStatistics.rebuild(v11, v16, -1);\nComputer v10 = v14;\nthis.sSnapshot.set(v10);\nComputer v19 = v10.use();\nString v20 = v19.getInstallerPackageName(p1);']

The method getInstallerForPackage has the following similar APIs:

- API Name: getTargetSdkVersionForPackage(Ljava/lang/String;)I in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.9446333050727844, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, -1);
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
Computer v1 = v19;
int v20 = v1.getTargetSdkVersion(p1);
  - Similarity: 0.8601232171058655, Code:
Computer v1 = this.mPm.snapshotComputer();
int v2 = v1.getTargetSdkVersion(p1);
  - Similarity: 0.8562343120574951, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
Computer v1 = v12;
int v13 = v1.getTargetSdkVersion(p1);
  - Access Control Level: NONE

- API Name: getNamesForUids([I)[Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8945338726043701, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
this.sSnapshot.set(v10);
String v20 = v1.getNamesForUids(p1);
  - Access Control Level: NONE

- API Name: getAllPackages()[Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8812817335128784, Code:
Computer v1 = this.mPm.snapshotComputer();
List v2 = v1.getAllPackages();
String v3 = new String(0);
Object v4 = v2.toArray(v3);
return v4;
  - Similarity: 0.8780125379562378, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
Computer v12 = v10.use();
List v13 = v12.getAllPackages();
String v14 = new String(0);
Object v15 = v13.toArray(v14);
return v15;
  - Similarity: 0.8718205690383911, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
List v20 = v1.getAllPackages();
String v21 = new String(0);
Object v22 = v20.toArray(v21);
return v22;
  - Access Control Level: NONE

- API Name: prepare()V in the following Class: Lcom.android.server.pm.OtaDexoptService with the following sink code entries:
  - Similarity: 0.881181001663208, Code:
Object v5 = this.sSnapshot.get();
int v6 = this.sSnapshotPendingVersion.get();
Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);
this.sSnapshot.set(v12);
ArrayList v30 = new ArrayList(v27);
DexOptHelper.sortPackagesByUsageDate(v30, this.mPackageManagerService);
boolean v55 = v27.removeAll(v30);
  - Access Control Level: NONE

- API Name: getVersionCodeForPackage(Ljava/lang/String;)J in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8738684058189392, Code:
Computer v3 = this.mPm.snapshotComputer();
PackageInfo v4 = v3.getPackageInfo(p1, 0, v2);
long v5 = v4.getLongVersionCode();
return v5;
  - Access Control Level: NONE

