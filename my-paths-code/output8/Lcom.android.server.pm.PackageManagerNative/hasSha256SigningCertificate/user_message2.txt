The method hasSha256SigningCertificate in the following class Lcom.android.server.pm.PackageManagerNative has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hasSha256SigningCertificate(String p1, byte[] p2){
	boolean v2 = Thread.holdsLock(this.mLock);
	if (v2 == 0) {
		Object v3 = this.sSnapshot.get();
		int v4 = this.sSnapshotPendingVersion.get();
		if (v3 == 0) {
			int v5 = v3.getVersion();
			if (v5 != v4) {
				Object v6 = this.sSnapshot.get();
				int v7 = this.sSnapshotPendingVersion.get();
				if (v6 == 0) {
					int v8 = v6.getVersion();
					if (v8 != v7) {
						int v9 = this.sSnapshotPendingVersion.get();
						long v11 = SystemClock.currentTimeMicro();
						if (v6 != 0) {
							PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v14 = new ComputerEngine(v12,v9);
							long v16 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v11, v16, -1);
								Computer v10 = v14;
								this.sSnapshot.set(v10);
								Computer v19 = v10.use();
								Computer v1 = v19;
								boolean v20 = v1.hasSigningCertificate(p1, p2, 1);
								return v20;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean hasSha256SigningCertificate(String p1, byte[] p2){
	boolean v2 = Thread.holdsLock(this.mLock);
	if (v2 == 0) {
		Object v3 = this.sSnapshot.get();
		int v4 = this.sSnapshotPendingVersion.get();
		if (v3 == 0) {
			int v5 = v3.getVersion();
			if (v5 != v4) {
				Object v6 = this.sSnapshot.get();
				int v7 = this.sSnapshotPendingVersion.get();
				if (v6 == 0) {
					int v8 = v6.getVersion();
					if (v8 != v7) {
						int v9 = this.sSnapshotPendingVersion.get();
						Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
						this.sSnapshot.set(v10);
						Computer v12 = v10.use();
						Computer v1 = v12;
						boolean v13 = v1.hasSigningCertificate(p1, p2, 1);
						return v13;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean hasSha256SigningCertificate(String p1, byte[] p2){
	Computer v1 = this.mPm.snapshotComputer();
	boolean v2 = v1.hasSigningCertificate(p1, p2, 1);
	return v2;
}

and the following sink code:
['Computer v1 = this.mPm.snapshotComputer();\nboolean v2 = v1.hasSigningCertificate(p1, p2, 1);\nreturn v2;', 'Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);\nthis.sSnapshot.set(v10);\nComputer v12 = v10.use();\nComputer v1 = v12;\nboolean v13 = v1.hasSigningCertificate(p1, p2, 1);\nreturn v13;', 'Computer v14 = new ComputerEngine(v12,v9);\nComputer v10 = v14;\nthis.sSnapshot.set(v10);\nComputer v19 = v10.use();\nComputer v1 = v19;\nboolean v20 = v1.hasSigningCertificate(p1, p2, 1);\nreturn v20;']

The method hasSha256SigningCertificate has the following similar APIs:

- API Name: getTargetSdkVersionForPackage(Ljava/lang/String;)I in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8810737133026123, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
Computer v1 = v12;
int v13 = v1.getTargetSdkVersion(p1);
  - Similarity: 0.8415498733520508, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, -1);
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
Computer v1 = v19;
int v20 = v1.getTargetSdkVersion(p1);
  - Similarity: 0.7930333018302917, Code:
Computer v1 = this.mPm.snapshotComputer();
int v2 = v1.getTargetSdkVersion(p1);
  - Access Control Level: NONE

- API Name: getAllPackages()[Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8784047365188599, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
Computer v12 = v10.use();
List v13 = v12.getAllPackages();
String v14 = new String(0);
Object v15 = v13.toArray(v14);
return v15;
  - Access Control Level: NONE

- API Name: getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.841069221496582, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, -1);
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
String v20 = v19.getInstallerPackageName(p1);
  - Similarity: 0.8256954550743103, Code:
Object v3 = this.sSnapshot.get();
int v4 = this.sSnapshotPendingVersion.get();
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
String v13 = v12.getInstallerPackageName(p1);
  - Access Control Level: NONE

- API Name: getNamesForUids([I)[Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.820386528968811, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
String v13 = v1.getNamesForUids(p1);
  - Access Control Level: NONE

- API Name: getVersionCodeForPackage(Ljava/lang/String;)J in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.7978872060775757, Code:
Computer v3 = this.mPm.snapshotComputer();
PackageInfo v4 = v3.getPackageInfo(p1, 0, v2);
long v5 = v4.getLongVersionCode();
return v5;
  - Access Control Level: NONE

