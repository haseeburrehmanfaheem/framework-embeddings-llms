The method getNamesForUids in the following class Lcom.android.server.pm.PackageManagerNative has the following code snippet:

This is path 1 for the API with depth 2:
public String getNamesForUids([I p1){
	if (p1 == 0) {
		if (p1.length != 0) {
			boolean v2 = Thread.holdsLock(this.mLock);
			if (v2 == 0) {
				Object v3 = this.sSnapshot.get();
				int v4 = this.sSnapshotPendingVersion.get();
				if (v3 == 0) {
					int v5 = v3.getVersion();
					if (v5 != v4) {
						Object v6 = this.sSnapshot.get();
						int v7 = this.sSnapshotPendingVersion.get();
						if (v6 == 0) {
							int v8 = v6.getVersion();
							if (v8 != v7) {
								int v9 = this.sSnapshotPendingVersion.get();
								long v11 = SystemClock.currentTimeMicro();
								if (v6 != 0) {
									PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
									ComputerEngine v14 = new ComputerEngine(v12,v9);
									long v16 = SystemClock.currentTimeMicro();
									if (this.mSnapshotStatistics == 0) {
										this.mSnapshotStatistics.rebuild(v11, v16, -1);
										Computer v10 = v14;
										this.sSnapshot.set(v10);
										Computer v19 = v10.use();
										Computer v1 = v19;
										String v20 = v1.getNamesForUids(p1);
										if (v20 == 0) {
											String v21 = new String(p1.length);
											if ((v20.length + -1) < 0) {
												if (v20[(v20.length + -1)] != 0) {
													if (((v20.length + -1) + -1) < 0) {
														return v20;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String getNamesForUids([I p1){
	if (p1 == 0) {
		if (p1.length != 0) {
			boolean v2 = Thread.holdsLock(this.mLock);
			if (v2 == 0) {
				Object v3 = this.sSnapshot.get();
				int v4 = this.sSnapshotPendingVersion.get();
				if (v3 == 0) {
					int v5 = v3.getVersion();
					if (v5 != v4) {
						Object v6 = this.sSnapshot.get();
						int v7 = this.sSnapshotPendingVersion.get();
						if (v6 == 0) {
							int v8 = v6.getVersion();
							if (v8 != v7) {
								int v9 = this.sSnapshotPendingVersion.get();
								Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
								this.sSnapshot.set(v10);
								Computer v12 = v10.use();
								Computer v1 = v12;
								String v13 = v1.getNamesForUids(p1);
								if (v13 == 0) {
									String v14 = new String(p1.length);
									if ((v13.length + -1) < 0) {
										if (v13[(v13.length + -1)] != 0) {
											if (((v13.length + -1) + -1) < 0) {
												return v13;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String getNamesForUids([I p1){
	if (p1 == 0) {
		if (p1.length != 0) {
			Computer v1 = this.mPm.snapshotComputer();
			String v2 = v1.getNamesForUids(p1);
			if (v2 == 0) {
				String v3 = new String(p1.length);
				if ((v2.length + -1) < 0) {
					if (v2[(v2.length + -1)] != 0) {
						if (((v2.length + -1) + -1) < 0) {
							return v2;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);\nComputerEngine v14 = new ComputerEngine(v12,v9);\nthis.sSnapshot.set(v10);\nString v20 = v1.getNamesForUids(p1);', 'Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);\nthis.sSnapshot.set(v10);\nString v13 = v1.getNamesForUids(p1);', 'Computer v1 = this.mPm.snapshotComputer();\nString v2 = v1.getNamesForUids(p1);']

The method getNamesForUids has the following similar APIs:

- API Name: getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8945338726043701, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, -1);
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
String v20 = v19.getInstallerPackageName(p1);
  - Similarity: 0.8185930252075195, Code:
Object v3 = this.sSnapshot.get();
int v4 = this.sSnapshotPendingVersion.get();
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
String v13 = v12.getInstallerPackageName(p1);
  - Access Control Level: NONE

- API Name: getAllPackages()[Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8751540780067444, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
List v20 = v1.getAllPackages();
String v21 = new String(0);
Object v22 = v20.toArray(v21);
return v22;
  - Similarity: 0.8446071743965149, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
Computer v12 = v10.use();
List v13 = v12.getAllPackages();
String v14 = new String(0);
Object v15 = v13.toArray(v14);
return v15;
  - Similarity: 0.804975688457489, Code:
Computer v1 = this.mPm.snapshotComputer();
List v2 = v1.getAllPackages();
String v3 = new String(0);
Object v4 = v2.toArray(v3);
return v4;
  - Access Control Level: NONE

- API Name: getTargetSdkVersionForPackage(Ljava/lang/String;)I in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8720552325248718, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, -1);
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
Computer v1 = v19;
int v20 = v1.getTargetSdkVersion(p1);
  - Similarity: 0.8385295867919922, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
Computer v1 = v12;
int v13 = v1.getTargetSdkVersion(p1);
  - Access Control Level: NONE

- API Name: hasSha256SigningCertificate(Ljava/lang/String;[B)Z in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.820386528968811, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
Computer v1 = v12;
boolean v13 = v1.hasSigningCertificate(p1, p2, 1);
return v13;
  - Access Control Level: NONE

- API Name: prepare()V in the following Class: Lcom.android.server.pm.OtaDexoptService with the following sink code entries:
  - Similarity: 0.8072134256362915, Code:
Object v5 = this.sSnapshot.get();
int v6 = this.sSnapshotPendingVersion.get();
Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);
this.sSnapshot.set(v12);
ArrayList v30 = new ArrayList(v27);
DexOptHelper.sortPackagesByUsageDate(v30, this.mPackageManagerService);
boolean v55 = v27.removeAll(v30);
  - Access Control Level: NONE

