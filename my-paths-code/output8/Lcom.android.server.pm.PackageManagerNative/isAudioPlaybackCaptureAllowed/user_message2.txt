The method isAudioPlaybackCaptureAllowed has the following code snippet:

This is path 1 for the API with depth 2:
public [Z isAudioPlaybackCaptureAllowed(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v16 = new ComputerEngine(v14,v11);
							long v18 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v18, -1);
								Computer v12 = v16;
								this.sSnapshot.set(v12);
								Computer v21 = v12.use();
								Computer v3 = v21;
								[Z v22 = new [Z(p1.length);
								if ((p1.length - 1) < 0) {
									ApplicationInfo v23 = v3.getApplicationInfo(p1[(p1.length - 1)], 0, v2);
									if (v23 == 0) {
										boolean v24 = v23.isAudioPlaybackCaptureAllowed();
										if (v24 == 0) {
											if (((p1.length - 1) + -1) < 0) {
												return v22;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public [Z isAudioPlaybackCaptureAllowed(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);
						this.sSnapshot.set(v12);
						Computer v14 = v12.use();
						Computer v3 = v14;
						[Z v15 = new [Z(p1.length);
						if ((p1.length - 1) < 0) {
							ApplicationInfo v16 = v3.getApplicationInfo(p1[(p1.length - 1)], 0, v2);
							if (v16 == 0) {
								boolean v17 = v16.isAudioPlaybackCaptureAllowed();
								if (v17 == 0) {
									if (((p1.length - 1) + -1) < 0) {
										return v15;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public [Z isAudioPlaybackCaptureAllowed(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	Computer v3 = this.mPm.snapshotComputer();
	[Z v4 = new [Z(p1.length);
	if ((p1.length - 1) < 0) {
		ApplicationInfo v5 = v3.getApplicationInfo(p1[(p1.length - 1)], 0, v2);
		if (v5 == 0) {
			boolean v6 = v5.isAudioPlaybackCaptureAllowed();
			if (v6 == 0) {
				if (((p1.length - 1) + -1) < 0) {
					return v4;
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nint v2 = UserHandle.getUserId(v1);\nObject v5 = this.sSnapshot.get();\nint v6 = this.sSnapshotPendingVersion.get();\nPackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);\nComputerEngine v16 = new ComputerEngine(v14,v11);\nthis.mSnapshotStatistics.rebuild(v13, v18, -1);\nComputer v12 = v16;\nthis.sSnapshot.set(v12);\nComputer v21 = v12.use();\nApplicationInfo v23 = v3.getApplicationInfo(p1[(p1.length - 1)], 0, v2);\nboolean v24 = v23.isAudioPlaybackCaptureAllowed();\n[Z v22 = new [Z(p1.length);', 'Computer v3 = this.mPm.snapshotComputer();\nApplicationInfo v5 = v3.getApplicationInfo(p1[(p1.length - 1)], 0, v2);\nboolean v6 = v5.isAudioPlaybackCaptureAllowed();\n[Z v4 = new [Z(p1.length);']

The method isAudioPlaybackCaptureAllowed has the following similar APIs:

- API Name: isPackageDebuggable(Ljava/lang/String;)Z with Similarity Score: 0.9235617518424988
  - Access Control Level: NONE and the following code:
int v1 = UserHandle.getCallingUserId();
Object v4 = this.sSnapshot.get();
int v5 = this.sSnapshotPendingVersion.get();
if (v7 != 0) {
PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v15 = new ComputerEngine(v13,v10);
this.mSnapshotStatistics.rebuild(v12, v17, -1);
Computer v11 = v15;
this.sSnapshot.set(v11);
Computer v20 = v11.use();
Computer v2 = v20;
ApplicationInfo v21 = v2.getApplicationInfo(p1, 0, v1);

- API Name: isPackageDebuggable(Ljava/lang/String;)Z with Similarity Score: 0.8504558801651001
  - Access Control Level: NONE and the following code:
int v1 = UserHandle.getCallingUserId();
Object v4 = this.sSnapshot.get();
int v5 = this.sSnapshotPendingVersion.get();
Computer v11 = PackageManagerService.rebuildSnapshot(v7, v10);
this.sSnapshot.set(v11);
Computer v13 = v11.use();
Computer v2 = v13;
ApplicationInfo v14 = v2.getApplicationInfo(p1, 0, v1);

