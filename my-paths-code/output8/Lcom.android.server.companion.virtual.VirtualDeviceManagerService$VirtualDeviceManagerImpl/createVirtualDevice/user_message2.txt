The method createVirtualDevice has the following code snippet:

This is path 1 for the API with depth 2:
public IVirtualDevice createVirtualDevice(IBinder p1, String p2, int p3, VirtualDeviceParams p4, IVirtualDeviceActivityListener p5){
	int v3 = IVirtualDeviceManager$Stub.getCallingUid();
	Context v4 = this.this$0.getContext();
	Binder.restoreCallingIdentity(v7);
	boolean v5 = 1;
	if (v5 == 0) {
		UserHandle v13 = IVirtualDeviceManager$Stub.getCallingUserHandle();
		int v14 = v13.getIdentifier();
		ConcurrentHashMap v15 = this.mAllAssociations;
		Integer v16 = Integer.valueOf(v14);
		Object v17 = v15.get(v16);
		if (v17 == 0) {
			int v18 = v17.size();
			if (0 >= v18) {
				Object v19 = v17.get(0);
				if (this.mUserId != v14) {
					boolean v21 = Objects.equals(this.mPackageName, p2);
					if (v21 == 0) {
						boolean v20 = 1;
						if (v20 == 0) {
							if ((0 + 1) >= v18) {
								AssociationInfo v12 = 0;
								if (v12 == 0) {
									Object v22 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);
									SparseArray v23 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
									boolean v24 = v23.contains(p3);
									if (v24 != 0) {
										int v25 = UserHandle.getUserId(v3);
										SparseArray v26 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);
										Object v27 = v26.get(v25);
										VirtualDeviceImpl v28 = new VirtualDeviceImpl(v29,v12,p1,v3,v30,p0,p5,v32,p4);
										Context v29 = this.this$0.getContext();
										VirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v30 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v27,v25);
										VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v32 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v27,v12);
										if (v27 == 0) {
											if (this.mObserverCount != 0) {
												Executor v36 = this.mContext.getMainExecutor();
												if (v36 == 0) {
													CameraManager$CameraManagerGlobal v38 = CameraManager$CameraManagerGlobal.get();
													v38.registerAvailabilityCallback(CameraAccessController, v36, this.mHasOpenCloseListenerPermission);
													this.mObserverCount = (this.mObserverCount + 1);
													SparseArray v40 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
													int v41 = v12.getId();
													v40.put(v41, v28);
													return v28;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public IVirtualDevice createVirtualDevice(IBinder p1, String p2, int p3, VirtualDeviceParams p4, IVirtualDeviceActivityListener p5){
	int v3 = IVirtualDeviceManager$Stub.getCallingUid();
	Context v4 = this.this$0.getContext();
	Binder.restoreCallingIdentity(v7);
	boolean v5 = 1;
	if (v5 == 0) {
		UserHandle v13 = IVirtualDeviceManager$Stub.getCallingUserHandle();
		int v14 = v13.getIdentifier();
		ConcurrentHashMap v15 = VirtualDeviceManagerService.-$$Nest$fgetmAllAssociations(this.this$0);
		Integer v16 = Integer.valueOf(v14);
		Object v17 = v15.get(v16);
		if (v17 == 0) {
			int v18 = v17.size();
			if (0 >= v18) {
				Object v19 = v17.get(0);
				boolean v20 = v19.belongsToPackage(v14, p2);
				if (v20 == 0) {
					if ((0 + 1) >= v18) {
						AssociationInfo v12 = 0;
						if (v12 == 0) {
							Object v21 = this.mVirtualDeviceManagerLock;
							SparseArray v22 = this.mVirtualDevices;
							boolean v23 = v22.contains(p3);
							if (v23 != 0) {
								int v24 = UserHandle.getUserId(v3);
								SparseArray v25 = this.mCameraAccessControllers;
								Object v26 = v25.get(v24);
								VirtualDeviceImpl v27 = new VirtualDeviceImpl(v28,v12,p1,v3,v29,p0,p5,v31,p4);
								Context v28 = this.this$0.getContext();
								VirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v29 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v26,v24);
								VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v31 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v26,v12);
								if (v26 == 0) {
									if (this.mObserverCount != 0) {
										Executor v35 = this.mContext.getMainExecutor();
										this.mCameraManager.registerAvailabilityCallback(v35, CameraAccessController);
										this.mObserverCount = (this.mObserverCount + 1);
										SparseArray v37 = this.mVirtualDevices;
										int v38 = this.mId;
										v37.put(v38, v27);
										return v27;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public IVirtualDevice createVirtualDevice(IBinder p1, String p2, int p3, VirtualDeviceParams p4, IVirtualDeviceActivityListener p5){
	int v3 = IVirtualDeviceManager$Stub.getCallingUid();
	Context v4 = this.this$0.getContext();
	boolean v5 = PermissionUtils.validateCallingPackageName(v4, p2);
	if (v5 == 0) {
		AssociationInfo v6 = p0.getAssociationInfo(p2, p3);
		if (v6 == 0) {
			Object v7 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);
			SparseArray v8 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
			boolean v9 = v8.contains(p3);
			if (v9 != 0) {
				int v10 = UserHandle.getUserId(v3);
				SparseArray v11 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);
				Object v12 = v11.get(v10);
				VirtualDeviceImpl v13 = new VirtualDeviceImpl(v14,v6,p1,v3,v15,p0,p5,v17,p4);
				Context v14 = this.this$0.getContext();
				VirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v15 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v12,v10);
				VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v17 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v12,v6);
				if (v12 == 0) {
					v12.startObservingIfNeeded();
					SparseArray v21 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
					int v22 = v6.getId();
					v21.put(v22, v13);
					return v13;
				}
			}
		}
	}
}

and the following sink code:
['int v3 = IVirtualDeviceManager$Stub.getCallingUid();\nObject v22 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);\nSparseArray v23 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);\nboolean v24 = v23.contains(p3);\nVirtualDeviceImpl v28 = new VirtualDeviceImpl(v29,v12,p1,v3,v30,p0,p5,v32,p4);\nreturn v28;', 'AssociationInfo v6 = p0.getAssociationInfo(p2, p3);\nObject v7 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);\nSparseArray v8 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);\nboolean v9 = v8.contains(p3);\nVirtualDeviceImpl v13 = new VirtualDeviceImpl(v14,v6,p1,v3,v15,p0,p5,v17,p4);\nreturn v13;', 'int v24 = UserHandle.getUserId(v3);\nSparseArray v25 = this.mCameraAccessControllers;\nObject v26 = v25.get(v24);\nVirtualDeviceImpl v27 = new VirtualDeviceImpl(v28,v12,p1,v3,v29,p0,p5,v31,p4);\nreturn v27;']

The method createVirtualDevice has the following similar APIs:

- API Name: legacyDisassociate(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.8238334655761719
  - Access Control Level: SYS_OR_SIG and the following code:
AssociationInfo v4 = this.mAssociationStore.getAssociationsForPackageWithAddress(p3, p2, p1);
Context v5 = CompanionDeviceManagerService.getContext();
AssociationInfo v6 = PermissionsUtils.sanitizeWithCallerChecks(v5, v4);

- API Name: notifyDeviceDisappeared(I)V with Similarity Score: 0.8204878568649292
  - Access Control Level: SYS_OR_SIG and the following code:
AssociationInfo v1 = this.this$0.getAssociationWithCallerChecks(p1);
boolean v2 = v1.isSelfManaged();
CompanionDevicePresenceMonitor v3 = CompanionDeviceManagerService.-$$Nest$fgetmDevicePresenceMonitor(this.this$0);
v3.onSelfManagedDeviceDisconnected(p1);

