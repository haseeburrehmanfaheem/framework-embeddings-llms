The method initRecoveryServiceWithSigFile in the following class Lcom.android.server.locksettings.LockSettingsService has the following code snippet:

This is path 1 for the API with depth 2:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	if (p1 == 0) {
		boolean v4 = p1.isEmpty();
		if (v4 == 0) {
			String v3 = p1;
			Object v5 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
			Object v6 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
			Element v8 = CertUtils.getXmlRootNode(p3);
			SigXml v9 = new SigXml(v10,v11,v12);
			List v10 = SigXml.parseIntermediateCerts(v8);
			X509Certificate v11 = SigXml.parseSignerCert(v8);
			byte[] v12 = SigXml.parseFileSignature(v8);
			SigXml v7 = v9;
			String v15 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v16 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v15);
			if (v16 == 0) {
				X509Certificate v17 = TrustedRootCertificates.getRootCertificate(v15);
				if (v17 == 0) {
					X509Certificate v14 = v17;
					SigXml.verifyFileSignature(v14, p2, 0);
					int v22 = UserHandle.getCallingUserId();
					int v23 = Binder.getCallingUid();
					String v24 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v3);
					boolean v25 = this.mTestCertHelper.isValidRootCertificateAlias(v24);
					if (v25 == 0) {
						String v26 = this.mDatabase.getActiveRootOfTrust(v22, v23);
						if (v26 != 0) {
							long v35 = this.mDatabase.setActiveRootOfTrust(v22, v23, v24);
							if ((v35 < 0) < 0) {
								CertXml v36 = CertXml.parse(p2);
								long v37 = v36.getSerial();
								Long v38 = this.mDatabase.getRecoveryServiceCertSerial(v22, v23, v24);
								if (v38 == 0) {
									long v39 = v38.longValue();
									if ((v39 < v37) < 0) {
										X509Certificate v46 = this.mTestCertHelper.getRootCertificate(v24);
										CertPath v48 = v36.getRandomEndpointCert(v46);
										long v50 = this.mDatabase.setRecoveryServiceCertPath(v22, v23, v24, v48);
										if ((v50 < 0) <= 0) {
											if ((v50 < 0) < 0) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v4 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
	Object v5 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
	SigXml v6 = SigXml.parse(p3);
	X509Certificate v7 = this.mTestCertHelper.getRootCertificate(v3);
	v6.verifyFileSignature(v7, p2);
	RecoverableKeyStoreManager.initRecoveryService(v3, p2);
	return;
}


This is path 3 for the API with depth 0:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}

and the following sink code:
['String v3 = p1;\nObject v5 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");\nObject v6 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");\nElement v8 = CertUtils.getXmlRootNode(p3);\nSigXml v9 = new SigXml(v10,v11,v12);\nSigXml.verifyFileSignature(v14, p2, 0);', 'String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);\nSigXml v6 = SigXml.parse(p3);\nv6.verifyFileSignature(v7, p2);\nRecoverableKeyStoreManager.initRecoveryService(v3, p2);', 'this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);']

The method initRecoveryServiceWithSigFile has the following similar APIs:

- API Name: startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8488800525665283, Code:
String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
X509Certificate v10 = this.mTestCertHelper.getRootCertificate(v3);
CertUtils.validateCertPath(v10, v9);
List v12 = v9.getCertificates();
Object v13 = v12.get(0);
PublicKey v14 = v13.getPublicKey();
byte[] v15 = v14.getEncoded();
byte[] v16 = RecoverableKeyStoreManager.startRecoverySession(p1, v15, p4, p5, p6);
byte[] v1 = v16;
return v1;
  - Similarity: 0.8092694878578186, Code:
byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
return v1;
  - Similarity: 0.7342512607574463, Code:
CertPath v11 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
String v13 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
boolean v14 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v13);
X509Certificate v15 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
CertUtils.validateCertPath(0, v12, v10);
List v18 = v10.getCertificates();
Object v19 = v18.get(0);
PublicKey v20 = v19.getPublicKey();
byte[] v21 = v20.getEncoded();
PublicKey v26 = KeySyncUtils.deserializePublicKey(v21);
boolean v27 = RecoverableKeyStoreManager.publicKeysMatch(v26, p4);
byte[] v28 = KeySyncUtils.generateKeyClaimant();
Object v29 = p6.get(0);
byte[] v30 = v29.getSecret();
RecoverySessionStorage$Entry v31 = new RecoverySessionStorage$Entry(p1, v30, v28, p4);
this.mRecoverySessionStorage.add(v24, v31);
byte[] v42 = KeySyncUtils.encryptRecoveryClaim(v26, p4, p5, v41, v28);
byte[] v22 = v42;
byte[] v1 = v22;
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: setRecoveryStatus(Ljava/lang/String;I)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8353334069252014, Code:
this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: setRecoverySecretTypes([I)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8189637660980225, Code:
this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: setServerParams([B)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7530319690704346, Code:
this.mRecoverableKeyStoreManager.setServerParams(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: isAppSourceCertificateTrusted([BLjava/lang/String;)Z in the following Class: Lcom.android.server.security.FileIntegrityService$1 with the following sink code entries:
  - Similarity: 0.7434310913085938, Code:
Collection v4 = this.mTrustedCertificates;
ByteArrayInputStream v7 = new ByteArrayInputStream(p1);
Certificate v9 = this.sCertFactory.generateCertificate(v7);
X509Certificate v6 = v9;
X509Certificate v5 = v6;
boolean v10 = v4.contains(v5);
return v10;
  - Access Control Level: SYS_OR_SIG

