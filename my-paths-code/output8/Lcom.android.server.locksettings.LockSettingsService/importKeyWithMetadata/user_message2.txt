The method importKeyWithMetadata in the following class Lcom.android.server.locksettings.LockSettingsService has the following code snippet:

This is path 1 for the API with depth 2:
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	Object v4 = Objects.requireNonNull(p2, "keyBytes is null");
	if (p2.length != 32) {
		int v5 = Binder.getCallingUid();
		int v6 = UserHandle.getCallingUserId();
		PlatformKeyManager.init(v6);
		PlatformDecryptionKey v9 = PlatformKeyManager.getDecryptKeyInternal(v6);
		PlatformEncryptionKey v10 = PlatformKeyManager.getEncryptKeyInternal(v6);
		Integer v12 = Integer.valueOf(v6);
		PlatformKeyManager.regenerate(v6);
		PlatformEncryptionKey v16 = PlatformKeyManager.getEncryptKeyInternal(v6);
		PlatformEncryptionKey v7 = v16;
		SecretKeySpec v18 = new SecretKeySpec(p2,"AES");
		WrappedKey v20 = WrappedKey.fromSecretKey(v7, v18, p3);
		long v21 = this.mDatabase.insertKey(v6, v5, p1, v20);
		if ((v21 < -1) == 0) {
			long v22 = this.mDatabase.setShouldCreateSnapshot(v6, v5, 1);
			Integer v25 = Integer.valueOf(v6);
			Integer v26 = Integer.valueOf(v5);
			Integer v27 = Integer.valueOf(p2.length);
			String v30 = ApplicationKeyStorage.getInternalAlias(v6, v5, p1);
			KeyStore$SecretKeyEntry v31 = new KeyStore$SecretKeyEntry(v32);
			SecretKeySpec v32 = new SecretKeySpec(p2,"AES");
			KeyProtection$Builder v35 = new KeyProtection$Builder(3);
			String v37 = new String(1);
			KeyProtection$Builder v38 = v35.setBlockModes(v37);
			String v39 = new String(1);
			KeyProtection$Builder v40 = v38.setEncryptionPaddings(v39);
			KeyProtection v41 = v40.build();
			this.mKeyStore.setEntry(v30, v31, v41);
			String v44 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);
			String v43 = v44;
			String v1 = v43;
			return v1;
		}
	}
}


This is path 2 for the API with depth 1:
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	Object v4 = Objects.requireNonNull(p2, "keyBytes is null");
	if (p2.length != 32) {
		int v5 = Binder.getCallingUid();
		int v6 = UserHandle.getCallingUserId();
		PlatformEncryptionKey v7 = this.mPlatformKeyManager.getEncryptKey(v6);
		this.mRecoverableKeyGenerator.importKey(v7, v6, v5, p1, p2, p3);
		this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, p2);
		String v10 = RecoverableKeyStoreManager.getAlias(v6, v5, p1);
		String v1 = v10;
		return v1;
	}
}


This is path 3 for the API with depth 0:
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}

and the following sink code:
['Object v3 = Objects.requireNonNull(p1, "alias is null");\nObject v4 = Objects.requireNonNull(p2, "keyBytes is null");\nSecretKeySpec v18 = new SecretKeySpec(p2,"AES");\nWrappedKey v20 = WrappedKey.fromSecretKey(v7, v18, p3);\nlong v21 = this.mDatabase.insertKey(v6, v5, p1, v20);', 'int v5 = Binder.getCallingUid();\nPlatformEncryptionKey v7 = this.mPlatformKeyManager.getEncryptKey(v6);\nthis.mRecoverableKeyGenerator.importKey(v7, v6, v5, p1, p2, p3);\nthis.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, p2);', 'String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);\nreturn v1;']

The method importKeyWithMetadata has the following similar APIs:

- API Name: importKey(Ljava/lang/String;[B)Ljava/lang/String; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.9611649513244629, Code:
String v2 = RecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, 0);
return v2;
  - Similarity: 0.9560625553131104, Code:
String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
return v1;
  - Similarity: 0.816523551940918, Code:
Object v4 = Objects.requireNonNull(p1, "alias is null");
Object v5 = Objects.requireNonNull(p2, "keyBytes is null");
if (p2.length != 32) {
int v6 = Binder.getCallingUid();
int v7 = UserHandle.getCallingUserId();
PlatformEncryptionKey v8 = this.mPlatformKeyManager.getEncryptKey(v7);
this.mRecoverableKeyGenerator.importKey(v8, v7, v6, p1, p2, 0);
this.mApplicationKeyStorage.setSymmetricKeyEntry(v7, v6, p1, p2);
String v11 = RecoverableKeyStoreManager.getAlias(v7, v6, p1);
return v11;
  - Access Control Level: SYS_OR_SIG

- API Name: generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.9065778851509094, Code:
String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);
return v1;
  - Similarity: 0.8678629398345947, Code:
PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
byte[] v7 = this.mRecoverableKeyGenerator.generateAndStoreKey(v6, v5, v4, p1, p2);
this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, v7);
return v1;
  - Similarity: 0.8127403259277344, Code:
this.mKeyGenerator.init(256);
SecretKey v18 = this.mKeyGenerator.generateKey();
WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);
long v20 = this.mDatabase.insertKey(v5, v4, p1, v19);
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: generateKey(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8817336559295654, Code:
String v2 = RecoverableKeyStoreManager.generateKeyWithMetadata(p1, 0);
return v1;
  - Similarity: 0.8360233306884766, Code:
String v1 = this.mRecoverableKeyStoreManager.generateKey(p1);
return v1;
  - Similarity: 0.7479169368743896, Code:
byte[] v8 = this.mRecoverableKeyGenerator.generateAndStoreKey(v7, v6, v5, p1, 0);
this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, v8);
String v10 = RecoverableKeyStoreManager.getAlias(v6, v5, p1);
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: getKey(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8467304706573486, Code:
String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
return v1;
  - Similarity: 0.7573567032814026, Code:
String v6 = RecoverableKeyStoreManager.getAlias(v5, v4, p1);
String v1 = v6;
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7507776021957397, Code:
int v3 = UserHandle.getCallingUserId();
int v4 = Binder.getCallingUid();
RecoverySessionStorage$Entry v5 = this.mRecoverySessionStorage.get(v4, p1);
byte[] v6 = RecoverableKeyStoreManager.decryptRecoveryKey(v5, p2);
Map v7 = RecoverableKeyStoreManager.recoverApplicationKeys(v6, p3);
Map v8 = RecoverableKeyStoreManager.importKeyMaterials(v3, v4, v7);
v5.destroy();
this.mRecoverySessionStorage.remove(v4);
Map v1 = v8;
  - Similarity: 0.7487401962280273, Code:
int v3 = UserHandle.getCallingUserId();
int v4 = Binder.getCallingUid();
Object v6 = this.mSessionsByUid.get(v4);
byte[] v17 = v5.getKeyClaimant();
byte[] v18 = v5.getVaultParams();
byte[] v19 = KeySyncUtils.decryptRecoveryClaimResponse(v17, v18, p2);
byte[] v20 = v5.getLskfHash();
byte[] v21 = KeySyncUtils.decryptRecoveryKey(v20, v19);
HashMap v23 = new HashMap();
Iterator v25 = p3.iterator();
byte[] v29 = v27.getEncryptedKeyMaterial();
byte[] v30 = v27.getMetadata();
byte[] v31 = KeySyncUtils.decryptApplicationKey(v16, v29, v30);
Object v32 = v23.put(v28, v31);
this.mApplicationKeyStorage.setSymmetricKeyEntry(v3, v4, v43, v44);
String v46 = RecoverableKeyStoreManager.getAlias(v3, v4, v43);
Map v1 = v36;
  - Access Control Level: SYS_OR_SIG

