The method verifyGatekeeperPasswordHandle in the following class Lcom.android.server.locksettings.LockSettingsService has the following code snippet:

This is path 1 for the API with depth 2:
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v2 = this.mGatekeeperPasswords.get(p1);
	if (v2 != 0) {
		if (this.mGateKeeperService == 0) {
			IBinder v4 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
			if (v4 == 0) {
				LockSettingsService$GateKeeperDiedRecipient v5 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
				v4.linkToDeath(v5, 0);
				if (v4 != 0) {
					IInterface v9 = v4.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
					if (v9 == 0) {
						if (v9 instanceof IGateKeeperService == 0) {
							IGateKeeperService$Stub$Proxy v10 = new IGateKeeperService$Stub$Proxy(v4);
							IGateKeeperService v8 = v10;
							this.mGateKeeperService = v8;
							IGateKeeperService v3 = v8;
							byte[] v14 = SyntheticPasswordManager.loadState("handle", 0, p3);
							byte[] v13 = v14;
							if (v13 != 0) {
								GateKeeperResponse v15 = v3.verifyChallenge(p3, p2, v13, v2);
								int v16 = this.mResponseCode;
								if (v16 != 0) {
									VerifyCredentialResponse$Builder v17 = new VerifyCredentialResponse$Builder();
									byte[] v19 = this.mPayload;
									this.mGatekeeperHAT = v19;
									VerifyCredentialResponse$Builder v20 = VerifyCredentialResponse$Builder;
									VerifyCredentialResponse v22 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
									VerifyCredentialResponse v21 = v22;
									boolean v24 = this.mShouldReEnroll;
									if (v24 == 0) {
										GateKeeperResponse v25 = v3.enroll(p3, v13, v13, v2);
										int v26 = this.mResponseCode;
										if (v26 != 0) {
											byte[] v27 = this.mPayload;
											SyntheticPasswordManager.saveState("handle", v27, 0, p3);
											VerifyCredentialResponse v30 = SyntheticPasswordManager.verifyChallengeInternal(v3, v2, p2, p3);
											byte[] v31 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);
											if (v31 != 0) {
												GateKeeperResponse v32 = v3.verifyChallenge(p3, p2, v31, v2);
												int v33 = v32.getResponseCode();
												if (v33 != 0) {
													VerifyCredentialResponse$Builder v34 = new VerifyCredentialResponse$Builder();
													byte[] v36 = v32.getPayload();
													VerifyCredentialResponse$Builder v37 = v34.setGatekeeperHAT(v36);
													VerifyCredentialResponse v38 = v37.build();
													boolean v39 = v32.getShouldReEnroll();
													if (v39 == 0) {
														GateKeeperResponse v40 = v3.enroll(p3, v31, v31, v2);
														int v41 = v40.getResponseCode();
														if (v41 != 0) {
															byte[] v42 = v40.getPayload();
															SyntheticPasswordManager.saveSyntheticPasswordHandle(v42, p3);
															VerifyCredentialResponse v44 = SyntheticPasswordManager.verifyChallengeInternal(v3, v2, p2, p3);
															VerifyCredentialResponse v12 = v44;
															return ERROR;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v2 = this.mGatekeeperPasswords.get(p1);
	if (v2 != 0) {
		if (this.mGateKeeperService == 0) {
			IBinder v4 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
			if (v4 == 0) {
				LockSettingsService$GateKeeperDiedRecipient v5 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
				v4.linkToDeath(v5, 0);
				IGateKeeperService v8 = IGateKeeperService$Stub.asInterface(v4);
				this.mGateKeeperService = v8;
				IGateKeeperService v3 = v8;
				byte[] v10 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);
				if (v10 != 0) {
					GateKeeperResponse v11 = v3.verifyChallenge(p3, p2, v10, v2);
					int v12 = v11.getResponseCode();
					if (v12 != 0) {
						VerifyCredentialResponse$Builder v13 = new VerifyCredentialResponse$Builder();
						byte[] v15 = v11.getPayload();
						VerifyCredentialResponse$Builder v16 = v13.setGatekeeperHAT(v15);
						VerifyCredentialResponse v17 = v16.build();
						boolean v18 = v11.getShouldReEnroll();
						if (v18 == 0) {
							GateKeeperResponse v19 = v3.enroll(p3, v10, v10, v2);
							int v20 = v19.getResponseCode();
							if (v20 != 0) {
								byte[] v21 = v19.getPayload();
								SyntheticPasswordManager.saveSyntheticPasswordHandle(v21, p3);
								VerifyCredentialResponse v23 = SyntheticPasswordManager.verifyChallengeInternal(v3, v2, p2, p3);
								VerifyCredentialResponse v9 = v23;
								return ERROR;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v2 = this.mGatekeeperPasswords.get(p1);
	if (v2 != 0) {
		return VerifyCredentialResponse.ERROR;
	}
}

and the following sink code:
['Object v2 = this.mGatekeeperPasswords.get(p1);\nIGateKeeperService v3 = v8;\nbyte[] v14 = SyntheticPasswordManager.loadState("handle", 0, p3);\nGateKeeperResponse v15 = v3.verifyChallenge(p3, p2, v13, v2);\nVerifyCredentialResponse v22 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);', 'Object v2 = this.mGatekeeperPasswords.get(p1);\nIGateKeeperService v8 = IGateKeeperService$Stub.asInterface(v4);\nbyte[] v10 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);\nGateKeeperResponse v11 = v3.verifyChallenge(p3, p2, v10, v2);\nVerifyCredentialResponse v17 = v16.build();']

The method verifyGatekeeperPasswordHandle has the following similar APIs:

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8009988069534302, Code:
int v21 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);
IGateKeeperService v24 = LockSettingsService.getGateKeeperService();
VerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
  - Access Control Level: DANGEROUS

- API Name: verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8007417917251587, Code:
long v3 = Binder.clearCallingIdentity();
IGateKeeperService v21 = LockSettingsService.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v20, p1, p2, 0);
VerifyCredentialResponse v27 = this.mSpManager.verifyChallenge(v26, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
return v4;
  - Access Control Level: SYS_OR_SIG

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.731326162815094, Code:
UserManager v4 = LockSettingsService.getUserManagerFromCache(p2);
boolean v5 = v4.isCredentialSharableWithParent();
UserInfo v8 = this.mUserManager.getProfileParent(p2);
IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, UserInfo.id, 0);
VerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, UserInfo.id);
  - Access Control Level: DANGEROUS

- API Name: isWeakEscrowTokenValid(J[BI)Z in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7032977938652039, Code:
SyntheticPasswordManager.hasState("e0", 0, p3);
boolean v8 = SyntheticPasswordManager.hasState("p1", 0, p3);
IGateKeeperService v14 = IGateKeeperService$Stub.asInterface(v10);
SyntheticPasswordManager.unwrapTokenBasedSyntheticPasswordInternal(v9, p1, 2, p2, p3);
  - Access Control Level: SYS_OR_SIG

