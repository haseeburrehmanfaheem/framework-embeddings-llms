The method getLong in the following class Lcom.android.server.locksettings.LockSettingsService has the following code snippet:

This is path 1 for the API with depth 2:
public long getLong(String p1, long p2, int p3){
	if (p3 != -9999) {
		boolean v4 = "legacy_lock_pattern_enabled".equals(p1);
		if (v4 == 0) {
			String v5 = LockSettingsStorage.readKeyValue(p1, 0, p3);
			String v3 = v5;
			boolean v6 = TextUtils.isEmpty(v3);
			if (v6 == 0) {
				long v2 = p2;
				return v2;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long getLong(String p1, long p2, int p3){
	String v3 = LockSettingsStorage.getString(p1, 0, p3);
	boolean v4 = TextUtils.isEmpty(v3);
	if (v4 == 0) {
		long v2 = p2;
		return v2;
	}
}


This is path 3 for the API with depth 0:
public long getLong(String p1, long p2, int p3){
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}

and the following sink code:
['long v2 = this.mStorage.getLong(p1, p2, p3);\nreturn v2;', 'String v5 = LockSettingsStorage.readKeyValue(p1, 0, p3);\nlong v2 = p2;\nreturn v2;', 'String v3 = LockSettingsStorage.getString(p1, 0, p3);\nlong v2 = p2;\nreturn v2;']

The method getLong has the following similar APIs:

- API Name: getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.9818907380104065, Code:
String v4 = LockSettingsStorage.readKeyValue(p1, p2, p3);
String v2 = v4;
return v2;
  - Similarity: 0.9139488339424133, Code:
String v2 = this.mStorage.getString(p1, p2, p3);
return v2;
  - Access Control Level: DANGEROUS

- API Name: setLong(Ljava/lang/String;JI)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8994302153587341, Code:
String v3 = Long.toString(p2);
LockSettingsStorage.setString(p1, v3, p3);
  - Similarity: 0.8385183811187744, Code:
this.mStorage.setLong(p1, p2, p3);
  - Similarity: 0.7679949998855591, Code:
String v3 = Long.toString(p2);
if (p3 == -9999) {
Preconditions.checkArgument(1, "cannot store lock settings for FRP user");
LockSettingsStorage.writeKeyValue(p1, v3, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: setString(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8227023482322693, Code:
LockSettingsStorage.writeKeyValue(p1, p2, p3);
  - Similarity: 0.7539719343185425, Code:
this.mStorage.setString(p1, p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: setBoolean(Ljava/lang/String;ZI)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7886003255844116, Code:
LockSettingsStorage.writeKeyValue(p1, "1", p3);
LockSettingsStorage.setString(p1, "1", p3);
  - Similarity: 0.7764304876327515, Code:
this.mStorage.setBoolean(p1, p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getCredentialType(I)I in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7417445182800293, Code:
LockSettingsStorage$PersistentData v4 = this.mStorage.readPersistentDataBlock();
long v6 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
int v5 = v6;
if (v5 != 65536) { ... }
return v2;
  - Access Control Level: DANGEROUS

