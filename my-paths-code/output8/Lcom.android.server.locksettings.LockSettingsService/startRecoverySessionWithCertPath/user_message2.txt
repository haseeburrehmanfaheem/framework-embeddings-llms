The method startRecoverySessionWithCertPath in the following class Lcom.android.server.locksettings.LockSettingsService has the following code snippet:

This is path 1 for the API with depth 2:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	if (p2 == 0) {
		boolean v4 = p2.isEmpty();
		if (v4 == 0) {
			String v3 = p2;
			Object v5 = Objects.requireNonNull(p1, "invalid session");
			Object v6 = Objects.requireNonNull(p3, "verifierCertPath is null");
			Object v7 = Objects.requireNonNull(p4, "vaultParams is null");
			Object v8 = Objects.requireNonNull(p5, "vaultChallenge is null");
			Object v9 = Objects.requireNonNull(p6, "secrets is null");
			CertPath v11 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
			CertPath v10 = v11;
			String v13 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v14 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v13);
			if (v14 == 0) {
				X509Certificate v15 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
				X509Certificate v12 = v15;
				CertUtils.validateCertPath(0, v12, v10);
				List v18 = v10.getCertificates();
				Object v19 = v18.get(0);
				PublicKey v20 = v19.getPublicKey();
				byte[] v21 = v20.getEncoded();
				if (v21 == 0) {
					int v24 = Binder.getCallingUid();
					int v25 = p6.size();
					if (v25 != 1) {
						PublicKey v26 = KeySyncUtils.deserializePublicKey(v21);
						boolean v27 = RecoverableKeyStoreManager.publicKeysMatch(v26, p4);
						if (v27 == 0) {
							byte[] v28 = KeySyncUtils.generateKeyClaimant();
							Object v29 = p6.get(0);
							byte[] v30 = v29.getSecret();
							RecoverySessionStorage$Entry v31 = new RecoverySessionStorage$Entry(p1,v30,v28,p4);
							this.mRecoverySessionStorage.add(v24, v31);
							String v37 = HexDump.toHexString(p4);
							byte[] v41 = KeySyncUtils.calculateThmKfHash(v30);
							byte[] v42 = KeySyncUtils.encryptRecoveryClaim(v26, p4, p5, v41, v28);
							byte[] v22 = v42;
							byte[] v1 = v22;
							return v1;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v4 = Objects.requireNonNull(p1, "invalid session");
	Object v5 = Objects.requireNonNull(p3, "verifierCertPath is null");
	Object v6 = Objects.requireNonNull(p4, "vaultParams is null");
	Object v7 = Objects.requireNonNull(p5, "vaultChallenge is null");
	Object v8 = Objects.requireNonNull(p6, "secrets is null");
	CertPath v9 = p3.getCertPath();
	X509Certificate v10 = this.mTestCertHelper.getRootCertificate(v3);
	CertUtils.validateCertPath(v10, v9);
	List v12 = v9.getCertificates();
	Object v13 = v12.get(0);
	PublicKey v14 = v13.getPublicKey();
	byte[] v15 = v14.getEncoded();
	if (v15 == 0) {
		byte[] v16 = RecoverableKeyStoreManager.startRecoverySession(p1, v15, p4, p5, p6);
		byte[] v1 = v16;
		return v1;
	}
}


This is path 3 for the API with depth 0:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}

and the following sink code:
['CertPath v11 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);\nString v13 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);\nboolean v14 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v13);\nX509Certificate v15 = TrustedRootCertificates.getTestOnlyInsecureCertificate();\nCertUtils.validateCertPath(0, v12, v10);\nList v18 = v10.getCertificates();\nObject v19 = v18.get(0);\nPublicKey v20 = v19.getPublicKey();\nbyte[] v21 = v20.getEncoded();\nPublicKey v26 = KeySyncUtils.deserializePublicKey(v21);\nboolean v27 = RecoverableKeyStoreManager.publicKeysMatch(v26, p4);\nbyte[] v28 = KeySyncUtils.generateKeyClaimant();\nObject v29 = p6.get(0);\nbyte[] v30 = v29.getSecret();\nRecoverySessionStorage$Entry v31 = new RecoverySessionStorage$Entry(p1, v30, v28, p4);\nthis.mRecoverySessionStorage.add(v24, v31);\nbyte[] v42 = KeySyncUtils.encryptRecoveryClaim(v26, p4, p5, v41, v28);\nbyte[] v22 = v42;\nbyte[] v1 = v22;\nreturn v1;', 'String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);\nX509Certificate v10 = this.mTestCertHelper.getRootCertificate(v3);\nCertUtils.validateCertPath(v10, v9);\nList v12 = v9.getCertificates();\nObject v13 = v12.get(0);\nPublicKey v14 = v13.getPublicKey();\nbyte[] v15 = v14.getEncoded();\nbyte[] v16 = RecoverableKeyStoreManager.startRecoverySession(p1, v15, p4, p5, p6);\nbyte[] v1 = v16;\nreturn v1;', 'byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);\nreturn v1;']

The method startRecoverySessionWithCertPath has the following similar APIs:

- API Name: initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8488800525665283, Code:
String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
SigXml v6 = SigXml.parse(p3);
v6.verifyFileSignature(v7, p2);
RecoverableKeyStoreManager.initRecoveryService(v3, p2);
  - Similarity: 0.8092694878578186, Code:
this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: isAppSourceCertificateTrusted([BLjava/lang/String;)Z in the following Class: Lcom.android.server.security.FileIntegrityService$1 with the following sink code entries:
  - Similarity: 0.7983220219612122, Code:
Collection v4 = this.mTrustedCertificates;
ByteArrayInputStream v7 = new ByteArrayInputStream(p1);
Certificate v9 = this.sCertFactory.generateCertificate(v7);
X509Certificate v6 = v9;
X509Certificate v5 = v6;
boolean v10 = v4.contains(v5);
return v10;
  - Access Control Level: SYS_OR_SIG

- API Name: setRecoveryStatus(Ljava/lang/String;I)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7715777158737183, Code:
this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getKey(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7462736964225769, Code:
String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: importKey(Ljava/lang/String;[B)Ljava/lang/String; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.738740086555481, Code:
String v1 = this.mRecoverableKeyStoreManager.importKey(p1, p2);
return v1;
  - Access Control Level: SYS_OR_SIG

