The method getCredentialType in the following class Lcom.android.server.locksettings.LockSettingsService has the following code snippet:

This is path 1 for the API with depth 2:
public int getCredentialType(int p1){
	if (p1 != -9999) {
		if (p1 != -9999) {
			LockSettingsStorage$PersistentData v4 = this.mStorage.readPersistentDataBlock();
			if (LockSettingsStorage$PersistentData.type == 1) {
				if (LockSettingsStorage$PersistentData.type != 2) {
					boolean v3 = 0;
					if (v3 == 0) {
						long v6 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
						int v5 = v6;
						if (v5 != 65536) {
							String v8 = LockSettingsStorage.getLockPatternFilename(p1);
							boolean v9 = LockSettingsStorage.hasFile(v8);
							boolean v7 = v9;
							if (v7 == 0) {
								if (v5 < 131072) {
									String v11 = LockSettingsStorage.getLockPasswordFilename(p1);
									boolean v12 = LockSettingsStorage.hasFile(v11);
									boolean v10 = v12;
									if (v10 == 0) {
										boolean v14 = LockPatternUtils.isQualityAlphabeticPassword(v5);
										if (v14 == 0) {
											boolean v15 = LockPatternUtils.isQualityNumericPin(v5);
											if (v15 == 0) {
												int v13 = 3;
												int v2 = v13;
												return v2;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getCredentialType(int p1){
	if (p1 != -9999) {
		boolean v3 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p1);
		if (v3 == 0) {
			int v4 = LockSettingsService.getKeyguardStoredQuality(p1);
			if (v4 != 65536) {
				boolean v5 = this.mStorage.hasPattern(p1);
				if (v5 == 0) {
					if (v4 < 131072) {
						boolean v6 = this.mStorage.hasPassword(p1);
						if (v6 == 0) {
							int v7 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
							int v2 = v7;
							return v2;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int getCredentialType(int p1){
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}

and the following sink code:
['LockSettingsStorage$PersistentData v4 = this.mStorage.readPersistentDataBlock();\nlong v6 = this.mStorage.getLong("lockscreen.password_type", 0, p1);\nint v5 = v6;\nif (v5 != 65536) { ... }\nreturn v2;', 'boolean v3 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p1);\nint v4 = LockSettingsService.getKeyguardStoredQuality(p1);\nif (v4 != 65536) { ... }\nreturn v7;', 'int v2 = p0.getCredentialTypeInternal(p1);\nreturn v2;']

The method getCredentialType has the following similar APIs:

- API Name: getBoolean(Ljava/lang/String;ZI)Z in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.9484386444091797, Code:
int v3 = p0.getCredentialTypeInternal(p3);
  - Similarity: 0.8892195820808411, Code:
LockSettingsStorage$PersistentData v5 = this.mStorage.readPersistentDataBlock();
long v7 = this.mStorage.getLong("lockscreen.password_type", 0, p3);
String v9 = LockSettingsStorage.getLockPatternFilename(p3);
boolean v10 = LockSettingsStorage.hasFile(v9);
String v12 = LockSettingsStorage.getLockPasswordFilename(p3);
boolean v13 = LockSettingsStorage.hasFile(v12);
boolean v15 = LockPatternUtils.isQualityAlphabeticPassword(v6);
boolean v16 = LockPatternUtils.isQualityNumericPin(v6);
  - Similarity: 0.879675030708313, Code:
boolean v4 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
int v5 = LockSettingsService.getKeyguardStoredQuality(p3);
boolean v6 = this.mStorage.hasPattern(p3);
boolean v7 = this.mStorage.hasPassword(p3);
int v8 = LockSettingsService.pinOrPasswordQualityToCredentialType(v5);
  - Access Control Level: DANGEROUS

- API Name: setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.817989706993103, Code:
LockSettingsStorage$CredentialHash v34 = this.mStorage.readCredentialHash(p3);
boolean v35 = LockSettingsService.isProfileWithUnifiedLock(p3);
if (v35 == 0) {
SyntheticPasswordManager$AuthenticationToken v39 = LockSettingsService.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8122782111167908, Code:
UserManager v4 = LockSettingsService.getUserManagerFromCache(p2);
boolean v5 = v4.isCredentialSharableWithParent();
byte[] v11 = LockSettingsStorage.readFile(v10);
Key v19 = this.mJavaKeyStore.getKey(v18, 0);
Cipher v20 = Cipher.getInstance("AES/GCM/NoPadding");
byte[] v24 = v20.doFinal(v13);
  - Similarity: 0.7951244711875916, Code:
boolean v3 = LockSettingsService.isCredentialSharableWithParent(p2);
byte[] v6 = this.mStorage.readChildProfileLock(p2);
Key v14 = this.mJavaKeyStore.getKey(v13, 0);
Cipher v15 = Cipher.getInstance("AES/GCM/NoPadding");
byte[] v19 = v15.doFinal(v8);
  - Access Control Level: DANGEROUS

- API Name: addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8112565875053406, Code:
boolean v10 = LockSettingsService.isUserSecure(p2);
long v12 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
LockscreenCredential v14 = LockscreenCredential.createNone();
SyntheticPasswordManager$AuthenticationResult v15 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v13, v12, v14, p2, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8092501163482666, Code:
boolean v3 = LockSettingsService.isCredentialSharableWithParent(p2);
VerifyCredentialResponse v10 = LockSettingsService.spBasedDoVerifyCredential(p1, UserInfo.id, 0, p3);
LockscreenCredential v38 = LockscreenCredential.createManagedPassword(v37);
  - Similarity: 0.792817234992981, Code:
UserManager v4 = LockSettingsService.getUserManagerFromCache(p2);
boolean v5 = v4.isCredentialSharableWithParent();
UserInfo v8 = this.mUserManager.getProfileParent(p2);
IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, UserInfo.id, 0);
VerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, UserInfo.id);
  - Access Control Level: DANGEROUS

