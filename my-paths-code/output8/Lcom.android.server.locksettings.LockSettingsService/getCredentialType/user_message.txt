This is path 1 for the API with depth 2:
public int getCredentialType(int p1){
	if (p1 != -9999) {
		if (p1 != -9999) {
			LockSettingsStorage$PersistentData v4 = this.mStorage.readPersistentDataBlock();
			if (LockSettingsStorage$PersistentData.type == 1) {
				if (LockSettingsStorage$PersistentData.type != 2) {
					boolean v3 = 0;
					if (v3 == 0) {
						long v6 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
						int v5 = v6;
						if (v5 != 65536) {
							String v8 = LockSettingsStorage.getLockPatternFilename(p1);
							boolean v9 = LockSettingsStorage.hasFile(v8);
							boolean v7 = v9;
							if (v7 == 0) {
								if (v5 < 131072) {
									String v11 = LockSettingsStorage.getLockPasswordFilename(p1);
									boolean v12 = LockSettingsStorage.hasFile(v11);
									boolean v10 = v12;
									if (v10 == 0) {
										boolean v14 = LockPatternUtils.isQualityAlphabeticPassword(v5);
										if (v14 == 0) {
											boolean v15 = LockPatternUtils.isQualityNumericPin(v5);
											if (v15 == 0) {
												int v13 = 3;
												int v2 = v13;
												return v2;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getCredentialType(int p1){
	if (p1 != -9999) {
		boolean v3 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p1);
		if (v3 == 0) {
			int v4 = LockSettingsService.getKeyguardStoredQuality(p1);
			if (v4 != 65536) {
				boolean v5 = this.mStorage.hasPattern(p1);
				if (v5 == 0) {
					if (v4 < 131072) {
						boolean v6 = this.mStorage.hasPassword(p1);
						if (v6 == 0) {
							int v7 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
							int v2 = v7;
							return v2;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int getCredentialType(int p1){
	int v2 = p0.getCredentialTypeInternal(p1);
	return v2;
}
