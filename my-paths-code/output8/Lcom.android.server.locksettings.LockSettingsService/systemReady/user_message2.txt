The method systemReady has the following code snippet:

This is path 1 for the API with depth 2:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		String v12 = this.mStorage.getString("migrated", 0, 0);
		String v10 = v12;
		if (v10 != 0) {
			ContentResolver v13 = this.mContext.getContentResolver();
			if (0 >= this.VALID_SETTINGS.length) {
				int v14 = v13.getUserId();
				String v15 = Settings$Secure.getStringForUser(v13, this.VALID_SETTINGS[0], v14);
				if (v15 == 0) {
					this.mStorage.setString(this.VALID_SETTINGS[0], v15, 0);
					if ((0 + 1) >= this.VALID_SETTINGS.length) {
						this.mStorage.setString("migrated", "true", 0);
						String v25 = this.mStorage.getString("migrated_user_specific", 0, 0);
						String v23 = v25;
						if (v23 != 0) {
							ContentResolver v26 = this.mContext.getContentResolver();
							List v27 = this.mUserManager.getUsers();
							int v28 = v27.size();
							if (0 >= v28) {
								this.mStorage.setString("migrated_user_specific", "true", 0);
								String v35 = this.mStorage.getString("migrated_biometric_weak", 0, 0);
								String v33 = v35;
								if (v33 != 0) {
									List v36 = this.mUserManager.getUsers();
									int v37 = v36.size();
									if (0 >= v37) {
										this.mStorage.setString("migrated_biometric_weak", "true", 0);
										String v44 = this.mStorage.getString("migrated_lockscreen_disabled", 0, 0);
										String v42 = v44;
										if (v42 != 0) {
											PackageManager v45 = this.mContext.getPackageManager();
											boolean v46 = v45.hasSystemFeature("android.hardware.type.watch");
											if (v46 == 0) {
												String v49 = this.mStorage.getString("migrated_wear_lockscreen_disabled", 0, 0);
												String v47 = v49;
												if (v47 != 0) {
													String v52 = this.mStorage.getString("migrated_keystore_namespace", 0, 0);
													String v50 = v52;
													if (v50 != 0) {
														if (this.mGateKeeperService == 0) {
															IBinder v54 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
															if (v54 == 0) {
																LockSettingsService$GateKeeperDiedRecipient v55 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
																v54.linkToDeath(v55, 0);
																if (v54 != 0) {
																	IInterface v59 = v54.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
																	if (v59 == 0) {
																		if (v59 instanceof IGateKeeperService == 0) {
																			IGateKeeperService$Stub$Proxy v60 = new IGateKeeperService$Stub$Proxy(v54);
																			IGateKeeperService v58 = v60;
																			this.mGateKeeperService = v58;
																			IGateKeeperService v53 = v58;
																			if (this.mWeaver == 0) {
																				this.mWeaverConfig = 0;
																				IWeaver v64 = IWeaver.getService(1);
																				IWeaver v63 = 0;
																				this.mWeaver = v63;
																				if (v63 == 0) {
																					SyntheticPasswordManager$$ExternalSyntheticLambda0 v66 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
																					v63.getConfig(v66);
																					Map v70 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
																					HashSet v71 = new HashSet();
																					Set v73 = v70.entrySet();
																					Iterator v74 = v73.iterator();
																					boolean v75 = v74.hasNext();
																					if (v75 == 0) {
																						Object v76 = v74.next();
																						Object v77 = v76.getValue();
																						Iterator v78 = v77.iterator();
																						boolean v79 = v78.hasNext();
																						if (v79 == 0) {
																							Object v80 = v78.next();
																							long v81 = v80.longValue();
																							Object v82 = v76.getKey();
																							int v83 = v82.intValue();
																							int v84 = SyntheticPasswordManager.loadWeaverSlot(v81, v83);
																							Integer v85 = Integer.valueOf(v84);
																							boolean v86 = v71.add(v85);
																							boolean v87 = v78.hasNext();
																							if (v87 == 0) {
																								boolean v88 = v74.hasNext();
																								if (v88 == 0) {
																									Set v69 = v71;
																									if (this.mSlotMap != 0) {
																										HashSet v90 = new HashSet();
																										Set v92 = this.mSlotMap.entrySet();
																										Iterator v93 = v92.iterator();
																										boolean v94 = v93.hasNext();
																										if (v94 == 0) {
																											Object v95 = v93.next();
																											Object v96 = v95.getValue();
																											String v97 = PasswordSlotManager.getMode();
																											boolean v98 = v96.equals(v97);
																											if (v98 == 0) {
																												Object v99 = v95.getKey();
																												boolean v100 = v90.add(v99);
																												boolean v101 = v93.hasNext();
																												if (v101 == 0) {
																													Iterator v102 = v90.iterator();
																													boolean v103 = v102.hasNext();
																													if (v103 == 0) {
																														Object v104 = v102.next();
																														Object v105 = this.mSlotMap.remove(v104);
																														boolean v106 = v102.hasNext();
																														if (v106 == 0) {
																															Iterator v107 = v69.iterator();
																															boolean v108 = v107.hasNext();
																															if (v108 == 0) {
																																Object v109 = v107.next();
																																String v110 = PasswordSlotManager.getMode();
																																Object v111 = this.mSlotMap.put(v109, v110);
																																boolean v112 = v107.hasNext();
																																if (v112 == 0) {
																																	PasswordSlotManager.saveSlotMap();
																																	p0.getAuthSecretHal();
																																	Context v116 = this.mContext;
																																	boolean v117 = LockPatternUtils.frpCredentialEnabled(v116);
																																	if (v117 == 0) {
																																		Context v119 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
																																		ContentResolver v120 = v119.getContentResolver();
																																		int v121 = Settings$Global.getInt(v120, "device_provisioned", 0);
																																		if (v121 == 0) {
																																			boolean v118 = 0;
																																			if (v118 != 0) {
																																				IGateKeeperService v124 = this.this$0.getGateKeeperService();
																																				v124.reportDeviceSetupComplete();
																																				boolean v128 = LockSettingsStorage$Cache.contains(2, "", 0);
																																				boolean v127 = v128;
																																				if (v127 == 0) {
																																					LockSettingsStorage$Cache.put(2, "isFetched", "true", 0);
																																					int v132 = this.mCache.getVersion();
																																					int v131 = v132;
																																					SQLiteDatabase v133 = this.mOpenHelper.getReadableDatabase();
																																					String v134 = new String(1);
																																					String v135 = Integer.toString(0);
																																					Cursor v136 = v133.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v134, 0, 0, 0);
																																					if (v136 == 0) {
																																						boolean v137 = v136.moveToNext();
																																						if (v137 == 0) {
																																							String v138 = v136.getString(0);
																																							String v139 = v136.getString(1);
																																							LockSettingsStorage$Cache.putIfUnchanged(0, v138, v139, 0, v131);
																																							boolean v142 = v136.moveToNext();
																																							if (v142 == 0) {
																																								v136.close();
																																								LockSettingsStorage$CredentialHash v145 = LockSettingsStorage.readPasswordHashIfExists(0);
																																								if (v145 == 0) {
																																									LockSettingsStorage$CredentialHash v146 = LockSettingsStorage.readPatternHashIfExists(0);
																																									if (v146 == 0) {
																																										LockSettingsStorage$CredentialHash v147 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																										LockSettingsStorage$CredentialHash v144 = v147;
																																										FingerprintManager v148 = this.mInjector.getFingerprintManager();
																																										FaceManager v149 = this.mInjector.getFaceManager();
																																										this.mBiometricDeferredQueue.systemReady(v148, v149);
																																										return;
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		String v10 = LockSettingsService.getString("migrated", 0, 0);
		if (v10 != 0) {
			ContentResolver v11 = this.mContext.getContentResolver();
			if (0 >= this.VALID_SETTINGS.length) {
				int v12 = v11.getUserId();
				String v13 = Settings$Secure.getStringForUser(v11, this.VALID_SETTINGS[0], v12);
				if (v13 == 0) {
					LockSettingsService.setString(this.VALID_SETTINGS[0], v13, 0);
					if ((0 + 1) >= this.VALID_SETTINGS.length) {
						LockSettingsService.setString("migrated", "true", 0);
						String v17 = LockSettingsService.getString("migrated_user_specific", 0, 0);
						if (v17 != 0) {
							ContentResolver v18 = this.mContext.getContentResolver();
							List v19 = this.mUserManager.getUsers();
							int v20 = v19.size();
							if (0 >= v20) {
								LockSettingsService.setString("migrated_user_specific", "true", 0);
								String v23 = LockSettingsService.getString("migrated_biometric_weak", 0, 0);
								if (v23 != 0) {
									List v24 = this.mUserManager.getUsers();
									int v25 = v24.size();
									if (0 >= v25) {
										LockSettingsService.setString("migrated_biometric_weak", "true", 0);
										String v28 = LockSettingsService.getString("migrated_lockscreen_disabled", 0, 0);
										if (v28 != 0) {
											PackageManager v29 = this.mContext.getPackageManager();
											boolean v30 = v29.hasSystemFeature("android.hardware.type.watch");
											if (v30 == 0) {
												String v31 = LockSettingsService.getString("migrated_wear_lockscreen_disabled", 0, 0);
												if (v31 != 0) {
													String v32 = LockSettingsService.getString("migrated_keystore_namespace", 0, 0);
													if (v32 != 0) {
														if (this.mGateKeeperService == 0) {
															IBinder v34 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
															if (v34 == 0) {
																LockSettingsService$GateKeeperDiedRecipient v35 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
																v34.linkToDeath(v35, 0);
																IGateKeeperService v38 = IGateKeeperService$Stub.asInterface(v34);
																this.mGateKeeperService = v38;
																IGateKeeperService v33 = v38;
																if (this.mWeaver == 0) {
																	this.mWeaverConfig = 0;
																	IWeaver v40 = SyntheticPasswordManager.getWeaverService();
																	this.mWeaver = v40;
																	if (v40 == 0) {
																		SyntheticPasswordManager$$ExternalSyntheticLambda0 v41 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
																		v40.getConfig(v41);
																		Set v44 = SyntheticPasswordManager.getUsedWeaverSlots();
																		this.mPasswordSlotManager.refreshActiveSlots(v44);
																		IAuthSecret v47 = IAuthSecret.getService(1);
																		this.mAuthSecretService = v47;
																		Context v49 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
																		boolean v50 = LockPatternUtils.frpCredentialEnabled(v49);
																		if (v50 == 0) {
																			boolean v51 = LockSettingsService$DeviceProvisionedObserver.isProvisioned();
																			if (v51 != 0) {
																				LockSettingsService$DeviceProvisionedObserver.reportDeviceSetupComplete();
																				boolean v55 = this.mCache.isFetched(0);
																				if (v55 == 0) {
																					this.mCache.setFetched(0);
																					int v57 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
																					SQLiteDatabase v58 = this.mOpenHelper.getReadableDatabase();
																					String v59 = new String(1);
																					String v60 = Integer.toString(0);
																					Cursor v61 = v58.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v59, 0, 0, 0);
																					if (v61 == 0) {
																						boolean v62 = v61.moveToNext();
																						if (v62 == 0) {
																							String v63 = v61.getString(0);
																							String v64 = v61.getString(1);
																							this.mCache.putKeyValueIfUnchanged(v63, v64, 0, v57);
																							boolean v66 = v61.moveToNext();
																							if (v66 == 0) {
																								v61.close();
																								LockSettingsStorage$CredentialHash v68 = LockSettingsStorage.readCredentialHash(0);
																								PackageManager v70 = this.mContext.getPackageManager();
																								boolean v71 = v70.hasSystemFeature("android.hardware.fingerprint");
																								if (v71 == 0) {
																									Object v72 = this.mContext.getSystemService("fingerprint");
																									FingerprintManager v69 = v72;
																									PackageManager v74 = this.mContext.getPackageManager();
																									boolean v75 = v74.hasSystemFeature("android.hardware.biometrics.face");
																									if (v75 == 0) {
																										Object v76 = this.mContext.getSystemService("face");
																										FaceManager v73 = v76;
																										this.mBiometricDeferredQueue.systemReady(v69, v73);
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		p0.migrateOldData();
		IGateKeeperService v10 = p0.getGateKeeperService();
		this.mSpManager.initWeaverService();
		p0.getAuthSecretHal();
		this.mDeviceProvisionedObserver.onSystemReady();
		this.mStorage.prefetchUser(0);
		FingerprintManager v15 = this.mInjector.getFingerprintManager();
		FaceManager v16 = this.mInjector.getFaceManager();
		this.mBiometricDeferredQueue.systemReady(v15, v16);
		return;
	}
}

and the following sink code:
['int v3 = ILockSettings$Stub.getCallingUid();\nPackageManager v7 = this.mContext.getPackageManager();\nboolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");', 'IGateKeeperService v10 = p0.getGateKeeperService();\nthis.mSpManager.initWeaverService();\np0.getAuthSecretHal();']

The method systemReady has the following similar APIs:

- API Name: getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B with Similarity Score: 0.747255265712738
  - Access Control Level: DANGEROUS and the following code:
UserManager v4 = LockSettingsService.getUserManagerFromCache(p2);
boolean v5 = v4.isCredentialSharableWithParent();
byte[] v11 = LockSettingsStorage.readFile(v10);
Key v19 = this.mJavaKeyStore.getKey(v18, 0);
Cipher v20 = Cipher.getInstance("AES/GCM/NoPadding");
byte[] v24 = v20.doFinal(v13);

- API Name: isInLockTaskMode()Z with Similarity Score: 0.7289033532142639
  - Access Control Level: NONE and the following code:
int v3 = this.mLockTaskModeState;
if (v1 == 0) {
return 1;

