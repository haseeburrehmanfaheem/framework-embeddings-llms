The method getBoolean in the following class Lcom.android.server.locksettings.LockSettingsService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean getBoolean(String p1, boolean p2, int p3){
	boolean v2 = "lock_pattern_autolock".equals(p1);
	if (v2 == 0) {
		if (p3 != -9999) {
			if (p3 != -9999) {
				LockSettingsStorage$PersistentData v5 = this.mStorage.readPersistentDataBlock();
				if (LockSettingsStorage$PersistentData.type == 1) {
					if (LockSettingsStorage$PersistentData.type != 2) {
						boolean v4 = 0;
						if (v4 == 0) {
							long v7 = this.mStorage.getLong("lockscreen.password_type", 0, p3);
							int v6 = v7;
							if (v6 != 65536) {
								String v9 = LockSettingsStorage.getLockPatternFilename(p3);
								boolean v10 = LockSettingsStorage.hasFile(v9);
								boolean v8 = v10;
								if (v8 == 0) {
									if (v6 < 131072) {
										String v12 = LockSettingsStorage.getLockPasswordFilename(p3);
										boolean v13 = LockSettingsStorage.hasFile(v12);
										boolean v11 = v13;
										if (v11 == 0) {
											boolean v15 = LockPatternUtils.isQualityAlphabeticPassword(v6);
											if (v15 == 0) {
												boolean v16 = LockPatternUtils.isQualityNumericPin(v6);
												if (v16 == 0) {
													int v14 = 3;
													int v3 = v14;
													if (v3 != 1) {
														return 1;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean getBoolean(String p1, boolean p2, int p3){
	boolean v2 = "lock_pattern_autolock".equals(p1);
	if (v2 == 0) {
		if (p3 != -9999) {
			boolean v4 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
			if (v4 == 0) {
				int v5 = LockSettingsService.getKeyguardStoredQuality(p3);
				if (v5 != 65536) {
					boolean v6 = this.mStorage.hasPattern(p3);
					if (v6 == 0) {
						if (v5 < 131072) {
							boolean v7 = this.mStorage.hasPassword(p3);
							if (v7 == 0) {
								int v8 = LockSettingsService.pinOrPasswordQualityToCredentialType(v5);
								int v3 = v8;
								if (v3 != 1) {
									return 1;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean getBoolean(String p1, boolean p2, int p3){
	boolean v2 = "lock_pattern_autolock".equals(p1);
	if (v2 == 0) {
		int v3 = p0.getCredentialTypeInternal(p3);
		if (v3 != 1) {
			return 1;
		}
	}
}

and the following sink code:
['LockSettingsStorage$PersistentData v5 = this.mStorage.readPersistentDataBlock();\nlong v7 = this.mStorage.getLong("lockscreen.password_type", 0, p3);\nString v9 = LockSettingsStorage.getLockPatternFilename(p3);\nboolean v10 = LockSettingsStorage.hasFile(v9);\nString v12 = LockSettingsStorage.getLockPasswordFilename(p3);\nboolean v13 = LockSettingsStorage.hasFile(v12);\nboolean v15 = LockPatternUtils.isQualityAlphabeticPassword(v6);\nboolean v16 = LockPatternUtils.isQualityNumericPin(v6);', 'boolean v4 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);\nint v5 = LockSettingsService.getKeyguardStoredQuality(p3);\nboolean v6 = this.mStorage.hasPattern(p3);\nboolean v7 = this.mStorage.hasPassword(p3);\nint v8 = LockSettingsService.pinOrPasswordQualityToCredentialType(v5);', 'int v3 = p0.getCredentialTypeInternal(p3);']

The method getBoolean has the following similar APIs:

- API Name: getCredentialType(I)I in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.9484386444091797, Code:
int v2 = p0.getCredentialTypeInternal(p1);
return v2;
  - Similarity: 0.8892195820808411, Code:
LockSettingsStorage$PersistentData v4 = this.mStorage.readPersistentDataBlock();
long v6 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
int v5 = v6;
if (v5 != 65536) { ... }
return v2;
  - Similarity: 0.879675030708313, Code:
boolean v3 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p1);
int v4 = LockSettingsService.getKeyguardStoredQuality(p1);
if (v4 != 65536) { ... }
return v7;
  - Access Control Level: DANGEROUS

- API Name: setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8244562149047852, Code:
LockSettingsStorage$CredentialHash v34 = this.mStorage.readCredentialHash(p3);
boolean v35 = LockSettingsService.isProfileWithUnifiedLock(p3);
if (v35 == 0) {
SyntheticPasswordManager$AuthenticationToken v39 = LockSettingsService.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, p2, p3);
  - Similarity: 0.7386227250099182, Code:
LockscreenCredential v26 = new LockscreenCredential(-1,v27);
[B v27 = new [B(0);
LockscreenCredential v25 = v26;
Object v30 = Objects.requireNonNull(p1);
Object v31 = Objects.requireNonNull(p2);
boolean v32 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8006108999252319, Code:
boolean v3 = LockSettingsService.isCredentialSharableWithParent(p2);
byte[] v6 = this.mStorage.readChildProfileLock(p2);
Key v14 = this.mJavaKeyStore.getKey(v13, 0);
Cipher v15 = Cipher.getInstance("AES/GCM/NoPadding");
byte[] v19 = v15.doFinal(v8);
  - Similarity: 0.7988431453704834, Code:
UserManager v4 = LockSettingsService.getUserManagerFromCache(p2);
boolean v5 = v4.isCredentialSharableWithParent();
byte[] v11 = LockSettingsStorage.readFile(v10);
Key v19 = this.mJavaKeyStore.getKey(v18, 0);
Cipher v20 = Cipher.getInstance("AES/GCM/NoPadding");
byte[] v24 = v20.doFinal(v13);
  - Similarity: 0.7302843332290649, Code:
LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
long v5 = p0.getSyntheticPasswordHandleLocked(p2);
IGateKeeperService v6 = p0.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, p1, p2, 0);
  - Access Control Level: DANGEROUS

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7917212247848511, Code:
boolean v3 = LockSettingsService.isCredentialSharableWithParent(p2);
VerifyCredentialResponse v10 = LockSettingsService.spBasedDoVerifyCredential(p1, UserInfo.id, 0, p3);
LockscreenCredential v38 = LockscreenCredential.createManagedPassword(v37);
  - Similarity: 0.7834425568580627, Code:
UserManager v4 = LockSettingsService.getUserManagerFromCache(p2);
boolean v5 = v4.isCredentialSharableWithParent();
UserInfo v8 = this.mUserManager.getProfileParent(p2);
IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, UserInfo.id, 0);
VerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, UserInfo.id);
  - Access Control Level: DANGEROUS

- API Name: addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7512658834457397, Code:
boolean v10 = LockSettingsService.isUserSecure(p2);
long v12 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
LockscreenCredential v14 = LockscreenCredential.createNone();
SyntheticPasswordManager$AuthenticationResult v15 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v13, v12, v14, p2, 0);
  - Similarity: 0.7481144070625305, Code:
int v11 = LockSettingsService.getCredentialTypeInternal(p2);
long v13 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
LockSettingsService$$ExternalSyntheticLambda0 v6 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
SyntheticPasswordManager$TokenData v74 = new SyntheticPasswordManager$TokenData();
this.tokenMap.put(v70, v71);
  - Access Control Level: SYS_OR_SIG

