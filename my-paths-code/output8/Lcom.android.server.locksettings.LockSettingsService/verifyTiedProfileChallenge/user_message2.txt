The method verifyTiedProfileChallenge has the following code snippet:

This is path 1 for the API with depth 2:
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	UserManager v4 = LockSettingsService.getUserManagerFromCache(p2);
	boolean v5 = v4.isCredentialSharableWithParent();
	boolean v3 = v5;
	if (v3 == 0) {
		boolean v7 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p2);
		boolean v6 = v7;
		if (v6 != 0) {
			boolean v2 = 1;
			if (v2 == 0) {
				UserInfo v8 = this.mUserManager.getProfileParent(p2);
				if (p1 == 0) {
					boolean v10 = p1.isNone();
					if (v10 != 0) {
						if (UserInfo.id != -9999) {
							ContentResolver v11 = this.mContext.getContentResolver();
							int v13 = Settings$Global.getInt(v11, "device_provisioned", 0);
							int v12 = v13;
							if (v12 == 0) {
								boolean v15 = this.mInjector.hasEnrolledBiometrics(UserInfo.id);
								if ((p3 & 1) == 0) {
									boolean v24 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(UserInfo.id);
									if (v24 != 0) {
										if (UserInfo.id != -9999) {
											long v25 = LockSettingsService.getSyntheticPasswordHandleLocked(UserInfo.id);
											IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
											SyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, UserInfo.id, 0);
											int v28 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
											if (v28 != 0) {
												byte[] v29 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
												this.mBiometricDeferredQueue.addPendingLockoutResetForUser(UserInfo.id, v29);
												IGateKeeperService v31 = LockSettingsService.getGateKeeperService();
												VerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, UserInfo.id);
												int v33 = v32.getResponseCode();
												if (v33 == 0) {
													int v34 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
													if (v34 != 0) {
														int v35 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
														if (v35 != 1) {
															int v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getTimeout();
															if (v36 <= 0) {
																LockSettingsService.requireStrongAuth(8, UserInfo.id);
																boolean v38 = SyntheticPasswordManager$AuthenticationResult.gkResponse.isMatched();
																if (v38 == 0) {
																	if (1 == 0) {
																		VerifyCredentialResponse v14 = SyntheticPasswordManager$AuthenticationResult.gkResponse;
																		if (v14 == 0) {
																			if (UserInfo.id != -9999) {
																				LockSettingsStorage$CredentialHash v40 = LockSettingsStorage.readPasswordHashIfExists(UserInfo.id);
																				if (v40 == 0) {
																					LockSettingsStorage$CredentialHash v41 = LockSettingsStorage.readPatternHashIfExists(UserInfo.id);
																					if (v41 == 0) {
																						LockSettingsStorage$CredentialHash v42 = LockSettingsStorage$CredentialHash.createEmptyHash();
																						LockSettingsStorage$CredentialHash v39 = v42;
																						if (LockSettingsStorage$CredentialHash.type != 2) {
																							int v44 = LockscreenCredential.getType();
																							if (v44 == 4) {
																								int v45 = LockscreenCredential.getType();
																								if (v45 != 3) {
																									boolean v43 = 1;
																									if (v43 != 0) {
																										if (v39 == 0) {
																											if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																												boolean v47 = p1.isNone();
																												if (v47 == 0) {
																													if (v39 == 0) {
																														if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																															boolean v48 = p1.isNone();
																															if (v48 == 0) {
																																StrictMode.noteDiskRead();
																																IGateKeeperService v50 = LockSettingsService.getGateKeeperService();
																																byte[] v51 = p1.getCredential();
																																GateKeeperResponse v52 = v50.verifyChallenge(UserInfo.id, 0, LockSettingsStorage$CredentialHash.hash, v51);
																																VerifyCredentialResponse v53 = LockSettingsService.convertResponse(v52);
																																boolean v54 = v52.getShouldReEnroll();
																																int v55 = v53.getResponseCode();
																																if (v55 != 0) {
																																	if (0 == 0) {
																																		0.onCredentialVerified();
																																		LockSettingsService.setUserPasswordMetrics(p1, UserInfo.id);
																																		byte[] v58 = p1.getCredential();
																																		LockSettingsService.unlockKeystore(v58, UserInfo.id);
																																		byte[] v66 = LockSettingsService.secretFromCredential(p1);
																																		LockSettingsService.unlockUser(UserInfo.id, v66);
																																		boolean v68 = LockSettingsService.isProfileWithSeparatedLock(UserInfo.id);
																																		if (v68 == 0) {
																																			LockSettingsService.setDeviceUnlockedForUser(UserInfo.id);
																																			if (v54 == 0) {
																																				boolean v70 = LockSettingsService.shouldMigrateToSyntheticPasswordLocked(UserInfo.id);
																																				if (v70 == 0) {
																																					LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, UserInfo.id);
																																					VerifyCredentialResponse v46 = v53;
																																					int v72 = this.mResponseCode;
																																					if (v72 != 0) {
																																						Message v74 = this.mHandler.obtainMessage(5, UserInfo.id, 0);
																																						v74.sendToTarget();
																																						VerifyCredentialResponse v9 = v46;
																																						int v76 = v9.getResponseCode();
																																						if (v76 == 0) {
																																							String v79 = LockSettingsStorage.getChildProfileLockFile(p2);
																																							byte[] v80 = LockSettingsStorage.readFile(v79);
																																							byte[] v78 = v80;
																																							if (v78 == 0) {
																																								byte[] v81 = Arrays.copyOfRange(v78, 0, 12);
																																								byte[] v82 = Arrays.copyOfRange(v78, 12, v78.length);
																																								StringBuilder v83 = new StringBuilder();
																																								StringBuilder v85 = v83.append("profile_key_name_decrypt_");
																																								StringBuilder v86 = v83.append(p2);
																																								String v87 = v83.toString();
																																								Key v88 = this.mJavaKeyStore.getKey(v87, 0);
																																								Cipher v89 = Cipher.getInstance("AES/GCM/NoPadding");
																																								GCMParameterSpec v90 = new GCMParameterSpec(128,v81);
																																								v89.init(2, v88, v90);
																																								byte[] v93 = v89.doFinal(v82);
																																								LockscreenCredential v95 = new LockscreenCredential(4,v96);
																																								byte[] v96 = Arrays.copyOf(v93, v93.length);
																																								LockscreenCredential v94 = v95;
																																								Arrays.fill(v93, 0);
																																								boolean v100 = this.mEncryptedPasswords.contains(p2);
																																								if (v100 == 0) {
																																									UserInfo v101 = this.mUserManager.getProfileParent(p2);
																																									if (v101 == 0) {
																																										if (UserInfo.id == 0) {
																																											String v102 = ManagedProfilePasswordCache.getEncryptionKeyName(p2);
																																											Provider v103 = this.mKeyStore.getProvider();
																																											KeyGenerator v104 = KeyGenerator.getInstance("AES", v103);
																																											KeyGenParameterSpec$Builder v105 = new KeyGenParameterSpec$Builder(v102,3);
																																											KeyGenParameterSpec$Builder v107 = v105.setKeySize(256);
																																											String v108 = new String(1);
																																											KeyGenParameterSpec$Builder v109 = v107.setBlockModes(v108);
																																											int v110 = SyntheticPasswordCrypto.keyNamespace();
																																											KeyGenParameterSpec$Builder v111 = v109.setNamespace(v110);
																																											String v112 = new String(1);
																																											KeyGenParameterSpec$Builder v113 = v111.setEncryptionPaddings(v112);
																																											KeyGenParameterSpec$Builder v114 = v113.setUserAuthenticationRequired(1);
																																											KeyGenParameterSpec$Builder v115 = v114.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
																																											KeyGenParameterSpec v116 = v115.build();
																																											v104.init(v116);
																																											SecretKey v118 = v104.generateKey();
																																											Cipher v119 = Cipher.getInstance("AES/GCM/NoPadding");
																																											v119.init(1, v118);
																																											byte[] v121 = v94.getCredential();
																																											byte[] v122 = v119.doFinal(v121);
																																											byte[] v123 = v119.getIV();
																																											LockscreenCredential v77 = v94;
																																											if (v77 == 0) {
																																												boolean v126 = v77.isNone();
																																												if (v126 != 0) {
																																													if (p2 != -9999) {
																																														ContentResolver v127 = this.mContext.getContentResolver();
																																														int v129 = Settings$Global.getInt(v127, "device_provisioned", 0);
																																														int v128 = v129;
																																														if (v128 == 0) {
																																															boolean v131 = this.mInjector.hasEnrolledBiometrics(p2);
																																															if ((p3 & 1) == 0) {
																																																boolean v140 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
																																																if (v140 != 0) {
																																																	if (p2 != -9999) {
																																																		long v141 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
																																																		IGateKeeperService v142 = LockSettingsService.getGateKeeperService();
																																																		SyntheticPasswordManager$AuthenticationResult v143 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v142, v141, v77, p2, 0);
																																																		int v144 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																																		if (v144 != 0) {
																																																			byte[] v145 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
																																																			this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v145);
																																																			IGateKeeperService v147 = LockSettingsService.getGateKeeperService();
																																																			VerifyCredentialResponse v148 = this.mSpManager.verifyChallenge(v147, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
																																																			int v149 = v148.getResponseCode();
																																																			if (v149 == 0) {
																																																				int v150 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																																				if (v150 != 0) {
																																																					int v151 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																																					if (v151 != 1) {
																																																						int v152 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getTimeout();
																																																						if (v152 <= 0) {
																																																							LockSettingsService.requireStrongAuth(8, p2);
																																																							boolean v154 = SyntheticPasswordManager$AuthenticationResult.gkResponse.isMatched();
																																																							if (v154 == 0) {
																																																								if (1 == 0) {
																																																									VerifyCredentialResponse v130 = SyntheticPasswordManager$AuthenticationResult.gkResponse;
																																																									if (v130 == 0) {
																																																										if (p2 != -9999) {
																																																											LockSettingsStorage$CredentialHash v156 = LockSettingsStorage.readPasswordHashIfExists(p2);
																																																											if (v156 == 0) {
																																																												LockSettingsStorage$CredentialHash v157 = LockSettingsStorage.readPatternHashIfExists(p2);
																																																												if (v157 == 0) {
																																																													LockSettingsStorage$CredentialHash v158 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																																													LockSettingsStorage$CredentialHash v155 = v158;
																																																													if (LockSettingsStorage$CredentialHash.type != 2) {
																																																														int v160 = LockscreenCredential.getType();
																																																														if (v160 == 4) {
																																																															int v161 = LockscreenCredential.getType();
																																																															if (v161 != 3) {
																																																																boolean v159 = 1;
																																																																if (v159 != 0) {
																																																																	if (v155 == 0) {
																																																																		if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																																																																			boolean v163 = v77.isNone();
																																																																			if (v163 == 0) {
																																																																				if (v155 == 0) {
																																																																					if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																																																																						boolean v164 = v77.isNone();
																																																																						if (v164 == 0) {
																																																																							StrictMode.noteDiskRead();
																																																																							IGateKeeperService v166 = LockSettingsService.getGateKeeperService();
																																																																							byte[] v167 = v77.getCredential();
																																																																							GateKeeperResponse v168 = v166.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v167);
																																																																							VerifyCredentialResponse v169 = LockSettingsService.convertResponse(v168);
																																																																							boolean v170 = v168.getShouldReEnroll();
																																																																							int v171 = v169.getResponseCode();
																																																																							if (v171 != 0) {
																																																																								if (0 == 0) {
																																																																									0.onCredentialVerified();
																																																																									LockSettingsService.setUserPasswordMetrics(v77, p2);
																																																																									byte[] v174 = v77.getCredential();
																																																																									LockSettingsService.unlockKeystore(v174, p2);
																																																																									byte[] v182 = LockSettingsService.secretFromCredential(v77);
																																																																									LockSettingsService.unlockUser(p2, v182);
																																																																									boolean v184 = LockSettingsService.isProfileWithSeparatedLock(p2);
																																																																									if (v184 == 0) {
																																																																										LockSettingsService.setDeviceUnlockedForUser(p2);
																																																																										if (v170 == 0) {
																																																																											boolean v186 = LockSettingsService.shouldMigrateToSyntheticPasswordLocked(p2);
																																																																											if (v186 == 0) {
																																																																												LockSettingsService.sendCredentialsOnUnlockIfRequired(v77, p2);
																																																																												VerifyCredentialResponse v162 = v169;
																																																																												int v188 = this.mResponseCode;
																																																																												if (v188 != 0) {
																																																																													Message v190 = this.mHandler.obtainMessage(5, p2, 0);
																																																																													v190.sendToTarget();
																																																																													VerifyCredentialResponse v125 = v162;
																																																																													p0.scheduleGc();
																																																																													return v125;
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	boolean v3 = LockSettingsService.isCredentialSharableWithParent(p2);
	if (v3 == 0) {
		boolean v4 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p2);
		if (v4 != 0) {
			boolean v2 = 1;
			if (v2 == 0) {
				UserInfo v5 = this.mUserManager.getProfileParent(p2);
				if (p1 == 0) {
					boolean v7 = p1.isNone();
					if (v7 != 0) {
						if (UserInfo.id != -9999) {
							ContentResolver v8 = this.mContext.getContentResolver();
							int v9 = this.mInjector.settingsGlobalGetInt(v8, "device_provisioned", 0);
							if (v9 == 0) {
								VerifyCredentialResponse v10 = LockSettingsService.spBasedDoVerifyCredential(p1, UserInfo.id, 0, p3);
								if (v10 == 0) {
									if (UserInfo.id != -9999) {
										LockSettingsStorage$CredentialHash v11 = this.mStorage.readCredentialHash(UserInfo.id);
										boolean v12 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
										if (v12 != 0) {
											int v18 = p1.getType();
											VerifyCredentialResponse v6 = VerifyCredentialResponse.ERROR;
											int v22 = this.mResponseCode;
											if (v22 == 0) {
												byte[] v24 = this.mStorage.readChildProfileLock(p2);
												if (v24 == 0) {
													byte[] v25 = Arrays.copyOfRange(v24, 0, 12);
													byte[] v26 = Arrays.copyOfRange(v24, 12, v24.length);
													StringBuilder v27 = new StringBuilder();
													StringBuilder v29 = v27.append("profile_key_name_decrypt_");
													StringBuilder v30 = v27.append(p2);
													String v31 = v27.toString();
													Key v32 = this.mJavaKeyStore.getKey(v31, 0);
													Cipher v33 = Cipher.getInstance("AES/GCM/NoPadding");
													GCMParameterSpec v34 = new GCMParameterSpec(128,v25);
													v33.init(2, v32, v34);
													byte[] v37 = v33.doFinal(v26);
													LockscreenCredential v38 = LockscreenCredential.createManagedPassword(v37);
													Arrays.fill(v37, 0);
													this.mManagedProfilePasswordCache.storePassword(p2, v38);
													LockscreenCredential v23 = v38;
													if (v23 == 0) {
														boolean v42 = v23.isNone();
														if (v42 != 0) {
															if (p2 != -9999) {
																ContentResolver v43 = this.mContext.getContentResolver();
																int v44 = this.mInjector.settingsGlobalGetInt(v43, "device_provisioned", 0);
																if (v44 == 0) {
																	VerifyCredentialResponse v45 = LockSettingsService.spBasedDoVerifyCredential(v23, p2, 0, p3);
																	if (v45 == 0) {
																		if (p2 != -9999) {
																			LockSettingsStorage$CredentialHash v46 = this.mStorage.readCredentialHash(p2);
																			boolean v47 = v23.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
																			if (v47 != 0) {
																				int v53 = v23.getType();
																				VerifyCredentialResponse v41 = VerifyCredentialResponse.ERROR;
																				LockSettingsService$$ExternalSyntheticLambda3 v58 = new LockSettingsService$$ExternalSyntheticLambda3();
																				boolean v60 = this.mHandler.postDelayed(v58, 2000);
																				return v41;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	if (v2 == 0) {
		UserInfo v3 = this.mUserManager.getProfileParent(p2);
		VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
		int v5 = v4.getResponseCode();
		if (v5 == 0) {
			LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
			VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
			p0.scheduleGc();
			return v7;
		}
	}
}

and the following sink code:
['UserManager v4 = LockSettingsService.getUserManagerFromCache(p2);\nboolean v5 = v4.isCredentialSharableWithParent();\nUserInfo v8 = this.mUserManager.getProfileParent(p2);\nIGateKeeperService v26 = LockSettingsService.getGateKeeperService();\nSyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, UserInfo.id, 0);\nVerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, UserInfo.id);', 'boolean v3 = LockSettingsService.isCredentialSharableWithParent(p2);\nVerifyCredentialResponse v10 = LockSettingsService.spBasedDoVerifyCredential(p1, UserInfo.id, 0, p3);\nLockscreenCredential v38 = LockscreenCredential.createManagedPassword(v37);', 'boolean v2 = p0.isProfileWithUnifiedLock(p2);\nVerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);']

The method verifyTiedProfileChallenge has the following similar APIs:

- API Name: setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z with Similarity Score: 0.8872814774513245
  - Access Control Level: SYS_OR_SIG and the following code:
p0.enforceFrpResolved();
boolean v8 = p2.isNone();
UserInfo v10 = this.mUserManager.getProfileParent(p3);
VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);

- API Name: verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.866651177406311
  - Access Control Level: SYS_OR_SIG and the following code:
long v3 = Binder.clearCallingIdentity();
IGateKeeperService v21 = LockSettingsService.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v20, p1, p2, 0);
VerifyCredentialResponse v27 = this.mSpManager.verifyChallenge(v26, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
return v4;

