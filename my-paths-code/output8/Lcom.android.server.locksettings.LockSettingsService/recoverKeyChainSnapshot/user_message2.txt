The method recoverKeyChainSnapshot has the following code snippet:

This is path 1 for the API with depth 2:
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	Object v6 = this.mSessionsByUid.get(v4);
	if (v6 != 0) {
		Iterator v7 = v6.iterator();
		boolean v8 = v7.hasNext();
		if (v8 == 0) {
			Object v9 = v7.next();
			String v10 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v9);
			boolean v11 = p1.equals(v10);
			if (v11 == 0) {
				boolean v12 = v7.hasNext();
				if (v12 == 0) {
					Object v13 = v7.next();
					String v14 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v13);
					boolean v15 = p1.equals(v14);
					if (v15 == 0) {
						RecoverySessionStorage$Entry v5 = v13;
						if (v5 == 0) {
							byte[] v17 = v5.getKeyClaimant();
							byte[] v18 = v5.getVaultParams();
							byte[] v19 = KeySyncUtils.decryptRecoveryClaimResponse(v17, v18, p2);
							byte[] v20 = v5.getLskfHash();
							byte[] v21 = KeySyncUtils.decryptRecoveryKey(v20, v19);
							byte[] v16 = v21;
							HashMap v23 = new HashMap();
							Iterator v25 = p3.iterator();
							boolean v26 = v25.hasNext();
							if (v26 == 0) {
								Object v27 = v25.next();
								String v28 = v27.getAlias();
								byte[] v29 = v27.getEncryptedKeyMaterial();
								byte[] v30 = v27.getMetadata();
								byte[] v31 = KeySyncUtils.decryptApplicationKey(v16, v29, v30);
								Object v32 = v23.put(v28, v31);
								boolean v33 = v25.hasNext();
								if (v33 == 0) {
									boolean v34 = p3.isEmpty();
									if (v34 != 0) {
										boolean v35 = v23.isEmpty();
										if (v35 != 0) {
											Map v22 = v23;
											ArrayMap v37 = new ArrayMap(v38);
											int v38 = v22.size();
											Set v40 = v22.keySet();
											Iterator v41 = v40.iterator();
											boolean v42 = v41.hasNext();
											if (v42 == 0) {
												Object v43 = v41.next();
												Object v44 = v22.get(v43);
												this.mApplicationKeyStorage.setSymmetricKeyEntry(v3, v4, v43, v44);
												String v46 = RecoverableKeyStoreManager.getAlias(v3, v4, v43);
												Object v50 = v37.put(v43, v46);
												boolean v51 = v41.hasNext();
												if (v51 == 0) {
													Map v36 = v37;
													Arrays.fill(this.mLskfHash, 0);
													Arrays.fill(this.mKeyClaimant, 0);
													Object v56 = this.mSessionsByUid.get(v4);
													if (v56 != 0) {
														Iterator v57 = v56.iterator();
														boolean v58 = v57.hasNext();
														if (v58 == 0) {
															Object v59 = v57.next();
															v59.destroy();
															boolean v61 = v57.hasNext();
															if (v61 == 0) {
																this.mSessionsByUid.remove(v4);
																Map v1 = v36;
																return v1;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v5 = this.mRecoverySessionStorage.get(v4, p1);
	if (v5 == 0) {
		byte[] v6 = RecoverableKeyStoreManager.decryptRecoveryKey(v5, p2);
		Map v7 = RecoverableKeyStoreManager.recoverApplicationKeys(v6, p3);
		Map v8 = RecoverableKeyStoreManager.importKeyMaterials(v3, v4, v7);
		v5.destroy();
		this.mRecoverySessionStorage.remove(v4);
		Map v1 = v8;
		return v1;
	}
}


This is path 3 for the API with depth 0:
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}

and the following sink code:
['int v3 = UserHandle.getCallingUserId();\nint v4 = Binder.getCallingUid();\nObject v6 = this.mSessionsByUid.get(v4);\nbyte[] v17 = v5.getKeyClaimant();\nbyte[] v18 = v5.getVaultParams();\nbyte[] v19 = KeySyncUtils.decryptRecoveryClaimResponse(v17, v18, p2);\nbyte[] v20 = v5.getLskfHash();\nbyte[] v21 = KeySyncUtils.decryptRecoveryKey(v20, v19);\nHashMap v23 = new HashMap();\nIterator v25 = p3.iterator();\nbyte[] v29 = v27.getEncryptedKeyMaterial();\nbyte[] v30 = v27.getMetadata();\nbyte[] v31 = KeySyncUtils.decryptApplicationKey(v16, v29, v30);\nObject v32 = v23.put(v28, v31);\nthis.mApplicationKeyStorage.setSymmetricKeyEntry(v3, v4, v43, v44);\nString v46 = RecoverableKeyStoreManager.getAlias(v3, v4, v43);\nMap v1 = v36;', 'int v3 = UserHandle.getCallingUserId();\nint v4 = Binder.getCallingUid();\nRecoverySessionStorage$Entry v5 = this.mRecoverySessionStorage.get(v4, p1);\nbyte[] v6 = RecoverableKeyStoreManager.decryptRecoveryKey(v5, p2);\nMap v7 = RecoverableKeyStoreManager.recoverApplicationKeys(v6, p3);\nMap v8 = RecoverableKeyStoreManager.importKeyMaterials(v3, v4, v7);\nv5.destroy();\nthis.mRecoverySessionStorage.remove(v4);\nMap v1 = v8;', 'Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);']

The method recoverKeyChainSnapshot has the following similar APIs:

- API Name: getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot; with Similarity Score: 0.8208979368209839
  - Access Control Level: SYS_OR_SIG and the following code:
KeyChainSnapshot v1 = this.mRecoverableKeyStoreManager.getKeyChainSnapshot();
return v1;

- API Name: getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.7855197787284851
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v11 = UserHandle.getCallingUserId();
Object v9 = Objects.requireNonNull(p1, "account cannot be null");
Object v10 = Objects.requireNonNull(p2, "key cannot be null");
SQLiteDatabase v43 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
Cursor v47 = v43.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v46, 0, 0, 0);

