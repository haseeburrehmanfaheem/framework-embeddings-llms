This is path 1 for the API with depth 2:
public void removeKey(String p1){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	SQLiteDatabase v7 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v8 = new String(2);
	String v9 = Integer.toString(v4);
	int v10 = v7.delete("keys", "uid = ? AND alias = ?", v8);
	if (v10 <= 0) {
		boolean v6 = 0;
		if (v6 == 0) {
			if (1 == 0) {
				long v12 = RecoverableKeyStoreDb.setLong(v5, v4, "should_create_snapshot", 1);
				long v11 = v12;
				Integer v15 = Integer.valueOf(v5);
				Integer v16 = Integer.valueOf(v4);
				String v19 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);
				this.mKeyStore.deleteEntry(v19);
				return;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeKey(String p1){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	boolean v6 = this.mDatabase.removeKey(v4, p1);
	if (v6 == 0) {
		long v7 = this.mDatabase.setShouldCreateSnapshot(v5, v4, 1);
		this.mApplicationKeyStorage.deleteEntry(v5, v4, p1);
		return;
	}
}


This is path 3 for the API with depth 0:
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
