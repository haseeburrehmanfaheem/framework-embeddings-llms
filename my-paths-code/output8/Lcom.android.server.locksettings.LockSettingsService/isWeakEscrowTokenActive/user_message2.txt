The method isWeakEscrowTokenActive in the following class Lcom.android.server.locksettings.LockSettingsService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isWeakEscrowTokenActive(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		long v5 = Binder.clearCallingIdentity();
		boolean v8 = SyntheticPasswordManager.hasState("spblob", p1, p2);
		boolean v7 = v8;
		boolean v6 = v7;
		Binder.restoreCallingIdentity(v5);
		return v6;
	}
}


This is path 2 for the API with depth 1:
public boolean isWeakEscrowTokenActive(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		long v5 = Binder.clearCallingIdentity();
		boolean v7 = this.mSpManager.existsHandle(p1, p2);
		boolean v6 = v7;
		Binder.restoreCallingIdentity(v5);
		return v6;
	}
}


This is path 3 for the API with depth 0:
public boolean isWeakEscrowTokenActive(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.isEscrowTokenActive(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}

and the following sink code:
['boolean v8 = SyntheticPasswordManager.hasState("spblob", p1, p2);\nboolean v7 = v8;\nboolean v6 = v7;\nreturn v6;', 'boolean v7 = this.mSpManager.existsHandle(p1, p2);\nboolean v6 = v7;\nreturn v6;', 'boolean v3 = p0.isEscrowTokenActive(p1, p2);\nreturn v3;']

The method isWeakEscrowTokenActive has the following similar APIs:

- API Name: removeWeakEscrowToken(JI)Z in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.8599551320075989, Code:
boolean v3 = p0.removeEscrowToken(p1, p2);
  - Similarity: 0.7653040289878845, Code:
long v8 = LockSettingsService.getLong("sp-handle", 0, p2);
Integer v10 = Integer.valueOf(p2);
boolean v11 = this.tokenMap.containsKey(v10);
Object v13 = this.tokenMap.get(v12);
Long v14 = Long.valueOf(p1);
Object v15 = v13.remove(v14);
byte[] v19 = SyntheticPasswordManager.loadState("spblob", p1, p2);
SyntheticPasswordManager$SyntheticPasswordBlob v20 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v19);
SyntheticPasswordManager.destroySyntheticPassword(p1, p2);
SyntheticPasswordManager.destroyState("secdis", p1, p2);
  - Similarity: 0.7587856650352478, Code:
long v7 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
boolean v8 = this.mSpManager.removePendingToken(p1, p2);
boolean v9 = this.mSpManager.existsHandle(p1, p2);
this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.808036208152771, Code:
long v6 = p0.addEscrowToken(p1, 1, p2, v3);
  - Similarity: 0.7574895024299622, Code:
boolean v10 = LockSettingsService.isUserSecure(p2);
long v12 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
LockscreenCredential v14 = LockscreenCredential.createNone();
SyntheticPasswordManager$AuthenticationResult v15 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v13, v12, v14, p2, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: isWeakEscrowTokenValid(J[BI)Z in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7286660075187683, Code:
this.mSpManager.hasEscrowData(p3);
SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
  - Access Control Level: SYS_OR_SIG

