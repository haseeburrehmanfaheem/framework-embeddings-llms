The method dismissToolbar has the following code snippet:

This is path 1 for the API with depth 2:
public void dismissToolbar(long p1, int p2){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		if (this.mRemoteService != 0) {
			String v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();
			ComponentName v7 = ComponentName.unflattenFromString(v6);
			RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
			Context v9 = SelectionToolbarManagerServiceImpl.getContext();
			this.mRemoteService = v8;
			RemoteSelectionToolbarRenderService v5 = this.mRemoteService;
			if (v5 == 0) {
				int v11 = Binder.getCallingUid();
				RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda1 v13 = new RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda1(v11,p1);
				boolean v15 = RemoteSelectionToolbarRenderService.run(v13);
				return;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void dismissToolbar(long p1, int p2){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		RemoteSelectionToolbarRenderService v5 = SelectionToolbarManagerServiceImpl.ensureRemoteServiceLocked();
		if (v5 == 0) {
			int v6 = Binder.getCallingUid();
			v5.onDismiss(v6, p1);
			return;
		}
	}
}


This is path 3 for the API with depth 0:
public void dismissToolbar(long p1, int p2){
	Object v1 = SelectionToolbarManagerService.access$400(this.this$0);
	AbstractPerUserSystemService v2 = SelectionToolbarManagerService.access$500(this.this$0, p2);
	if (v2 == 0) {
		v2.dismissToolbar(p1);
		return;
	}
}

and the following sink code:
['AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);\nRemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);\nboolean v15 = RemoteSelectionToolbarRenderService.run(v13);', 'AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);\nRemoteSelectionToolbarRenderService v5 = SelectionToolbarManagerServiceImpl.ensureRemoteServiceLocked();\nv5.onDismiss(v6, p1);', 'AbstractPerUserSystemService v2 = SelectionToolbarManagerService.access$500(this.this$0, p2);\nv2.dismissToolbar(p1);']

The method dismissToolbar has the following similar APIs:

- API Name: hideToolbar(JI)V with Similarity Score: 0.9637356996536255
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v2 = SelectionToolbarManagerService.access$300(this.this$0, p2);
if (v2 == 0) {
v2.hideToolbar(p1);

- API Name: showToolbar(Landroid/view/selectiontoolbar/ShowInfo;Landroid/view/selectiontoolbar/ISelectionToolbarCallback;I)V with Similarity Score: 0.9587364196777344
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v2 = this.this$0.getServiceForUserLocked(p3);
RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
this.mRemoteService = v8;
RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda2 v13 = new RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda2(v11,p1,p2);
boolean v15 = RemoteSelectionToolbarRenderService.run(v13);

