The method isAppSourceCertificateTrusted in the following class Lcom.android.server.security.FileIntegrityService$1 has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isAppSourceCertificateTrusted(byte[] p1, String p2){
	if (Build$VERSION.DEVICE_INITIAL_SDK_INT >= 30) {
		int v3 = SystemProperties.getInt("ro.apk_verity.mode", 0);
		if (v3 != 2) {
			boolean v2 = 0;
			if (v2 != 0) {
				if (p1 != 0) {
					Collection v4 = this.mTrustedCertificates;
					ByteArrayInputStream v7 = new ByteArrayInputStream(p1);
					Certificate v9 = this.sCertFactory.generateCertificate(v7);
					if (v9 instanceof X509Certificate == 0) {
						X509Certificate v6 = v9;
						X509Certificate v5 = v6;
						boolean v10 = v4.contains(v5);
						return v10;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isAppSourceCertificateTrusted(byte[] p1, String p2){
	if (Build$VERSION.DEVICE_INITIAL_SDK_INT >= 30) {
		int v3 = SystemProperties.getInt("ro.apk_verity.mode", 0);
		if (v3 != 2) {
			boolean v2 = 0;
			if (v2 != 0) {
				return 0;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isAppSourceCertificateTrusted(byte[] p1, String p2){
	boolean v2 = VerityUtils.isFsVeritySupported();
	if (v2 != 0) {
		return 0;
	}
}

and the following sink code:
['Collection v4 = this.mTrustedCertificates;\nByteArrayInputStream v7 = new ByteArrayInputStream(p1);\nCertificate v9 = this.sCertFactory.generateCertificate(v7);\nX509Certificate v6 = v9;\nX509Certificate v5 = v6;\nboolean v10 = v4.contains(v5);\nreturn v10;']

The method isAppSourceCertificateTrusted has the following similar APIs:

- API Name: startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7983220219612122, Code:
String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
X509Certificate v10 = this.mTestCertHelper.getRootCertificate(v3);
CertUtils.validateCertPath(v10, v9);
List v12 = v9.getCertificates();
Object v13 = v12.get(0);
PublicKey v14 = v13.getPublicKey();
byte[] v15 = v14.getEncoded();
byte[] v16 = RecoverableKeyStoreManager.startRecoverySession(p1, v15, p4, p5, p6);
byte[] v1 = v16;
return v1;
  - Similarity: 0.7747515439987183, Code:
CertPath v11 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
String v13 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
boolean v14 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v13);
X509Certificate v15 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
CertUtils.validateCertPath(0, v12, v10);
List v18 = v10.getCertificates();
Object v19 = v18.get(0);
PublicKey v20 = v19.getPublicKey();
byte[] v21 = v20.getEncoded();
PublicKey v26 = KeySyncUtils.deserializePublicKey(v21);
boolean v27 = RecoverableKeyStoreManager.publicKeysMatch(v26, p4);
byte[] v28 = KeySyncUtils.generateKeyClaimant();
Object v29 = p6.get(0);
byte[] v30 = v29.getSecret();
RecoverySessionStorage$Entry v31 = new RecoverySessionStorage$Entry(p1, v30, v28, p4);
this.mRecoverySessionStorage.add(v24, v31);
byte[] v42 = KeySyncUtils.encryptRecoveryClaim(v26, p4, p5, v41, v28);
byte[] v22 = v42;
byte[] v1 = v22;
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7434310913085938, Code:
String v3 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
SigXml v6 = SigXml.parse(p3);
v6.verifyFileSignature(v7, p2);
RecoverableKeyStoreManager.initRecoveryService(v3, p2);
  - Access Control Level: SYS_OR_SIG

