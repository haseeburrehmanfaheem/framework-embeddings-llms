This is path 1 for the API with depth 2:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	this.this$0.assertCalledByPackageOwner(p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		if (this.mComponentName != 0) {
			ComponentName v13 = AmbientContextManagerPerUserService.updateServiceInfoLocked();
			this.mComponentName = v13;
			if (this.mComponentName != 0) {
				IPackageManager v14 = AppGlobals.getPackageManager();
				ServiceInfo v15 = v14.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId);
				if (v15 == 0) {
					boolean v12 = 0;
					if (v12 != 0) {
						Set v20 = p1.getEventTypes();
						boolean v24 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
						if (v24 == 0) {
							AmbientContextManagerPerUserService.ensureRemoteServiceInitiated();
							RemoteCallback v26 = AmbientContextManagerPerUserService.createDetectionResultRemoteCallback();
							AmbientContextManagerPerUserService$$ExternalSyntheticLambda1 v27 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3);
							RemoteCallback v29 = AmbientContextManagerPerUserService.getServerStatusCallback(v27);
							this.mRemoteService.startDetection(p1, p2, v26, v29);
							Set v38 = AmbientContextManagerService.findExistingRequests(AbstractPerUserSystemService.mUserId, p2);
							boolean v39 = this.mExistingClientRequests.removeAll(v38);
							AmbientContextManagerService$ClientRequest v40 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);
							boolean v42 = this.mExistingClientRequests.add(v40);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	this.this$0.assertCalledByPackageOwner(p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		boolean v12 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
		if (v12 != 0) {
			AmbientContextManagerPerUserService.startDetection(p1, p2, p3);
			AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, p2, p3);
			return;
		}
	}
}


This is path 3 for the API with depth 0:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	AmbientContextManagerService.access$100(this.this$0, p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		this.mService.onRegisterObserver(p1, p2, p3);
		return;
	}
}
