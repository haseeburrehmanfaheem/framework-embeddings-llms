The method registerObserverWithCallback in the following class Lcom.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal has the following code snippet:

This is path 1 for the API with depth 2:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	this.this$0.assertCalledByPackageOwner(p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		if (this.mComponentName != 0) {
			ComponentName v13 = AmbientContextManagerPerUserService.updateServiceInfoLocked();
			this.mComponentName = v13;
			if (this.mComponentName != 0) {
				IPackageManager v14 = AppGlobals.getPackageManager();
				ServiceInfo v15 = v14.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId);
				if (v15 == 0) {
					boolean v12 = 0;
					if (v12 != 0) {
						Set v20 = p1.getEventTypes();
						boolean v24 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
						if (v24 == 0) {
							AmbientContextManagerPerUserService.ensureRemoteServiceInitiated();
							RemoteCallback v26 = AmbientContextManagerPerUserService.createDetectionResultRemoteCallback();
							AmbientContextManagerPerUserService$$ExternalSyntheticLambda1 v27 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3);
							RemoteCallback v29 = AmbientContextManagerPerUserService.getServerStatusCallback(v27);
							this.mRemoteService.startDetection(p1, p2, v26, v29);
							Set v38 = AmbientContextManagerService.findExistingRequests(AbstractPerUserSystemService.mUserId, p2);
							boolean v39 = this.mExistingClientRequests.removeAll(v38);
							AmbientContextManagerService$ClientRequest v40 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);
							boolean v42 = this.mExistingClientRequests.add(v40);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	this.this$0.assertCalledByPackageOwner(p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		boolean v12 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
		if (v12 != 0) {
			AmbientContextManagerPerUserService.startDetection(p1, p2, p3);
			AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, p2, p3);
			return;
		}
	}
}


This is path 3 for the API with depth 0:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	AmbientContextManagerService.access$100(this.this$0, p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		this.mService.onRegisterObserver(p1, p2, p3);
		return;
	}
}

and the following sink code:
['AmbientContextManagerPerUserService$$ExternalSyntheticLambda1 v27 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3);\nRemoteCallback v26 = AmbientContextManagerPerUserService.createDetectionResultRemoteCallback();\nthis.mRemoteService.startDetection(p1, p2, v26, v29);', 'AmbientContextManagerPerUserService.startDetection(p1, p2, p3);\nAbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, p2, p3);', 'this.mService.onRegisterObserver(p1, p2, p3);', 'AmbientContextManagerService$ClientRequest v40 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);\nboolean v42 = this.mExistingClientRequests.add(v40);']

The method registerObserverWithCallback has the following similar APIs:

- API Name: registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V in the following Class: Lcom.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal with the following sink code entries:
  - Similarity: 0.912011444568634, Code:
this.this$0.assertCalledByPackageOwner(v6);
AmbientContextManagerPerUserService.setUpServiceIfNeeded();
AmbientContextManagerPerUserService.startDetection(p1, v6, v4);
AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, v6, v4);
  - Similarity: 0.778460681438446, Code:
p0.registerObserverWithCallback(p1, v6, v4);
  - Access Control Level: NORMAL

- API Name: unregisterObserver(Ljava/lang/String;)V in the following Class: Lcom.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal with the following sink code entries:
  - Similarity: 0.8265236020088196, Code:
this.this$0.assertCalledByPackageOwner(p1);
AmbientContextManagerPerUserService.stopDetection(p1);
AbstractPerUserSystemService.mMaster.clientRemoved(AbstractPerUserSystemService.mUserId, p1);
  - Similarity: 0.7765823602676392, Code:
this.mRemoteService.stopDetection(p1);
Set v23 = AmbientContextManagerService.findExistingRequests(AbstractPerUserSystemService.mUserId, p1);
boolean v24 = this.mExistingClientRequests.removeAll(v23);
  - Access Control Level: NORMAL

- API Name: suggestExternalTime(Landroid/app/time/ExternalTimeSuggestion;)V in the following Class: Lcom.android.server.timedetector.TimeDetectorService with the following sink code entries:
  - Similarity: 0.7333681583404541, Code:
TimeDetectorService$$ExternalSyntheticLambda1 v3 = new TimeDetectorService$$ExternalSyntheticLambda1(p0,p1);
boolean v5 = this.mHandler.post(v3);
  - Access Control Level: SYS_OR_SIG

- API Name: suggestTelephonyTime(Landroid/app/timedetector/TelephonyTimeSuggestion;)V in the following Class: Lcom.android.server.timedetector.TimeDetectorService with the following sink code entries:
  - Similarity: 0.7325604557991028, Code:
TimeDetectorService$$ExternalSyntheticLambda0 v3 = new TimeDetectorService$$ExternalSyntheticLambda0(p0,p1)
boolean v5 = this.mHandler.post(v3)
  - Access Control Level: SYS_OR_SIG

- API Name: registerSessionListener(ILcom/android/internal/statusbar/ISessionListener;)V in the following Class: Lcom.android.server.statusbar.StatusBarManagerService with the following sink code entries:
  - Similarity: 0.7207704782485962, Code:
this.mSessionMonitor.registerSessionListener(p1, p2);
return;
  - Access Control Level: SYS_OR_SIG

