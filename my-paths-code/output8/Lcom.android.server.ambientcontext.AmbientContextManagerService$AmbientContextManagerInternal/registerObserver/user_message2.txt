The method registerObserver in the following class Lcom.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal has the following code snippet:

This is path 1 for the API with depth 2:
public void registerObserver(AmbientContextEventRequest p1, PendingIntent p2, RemoteCallback p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = Objects.requireNonNull(p3);
	AmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);
	String v6 = p2.getCreatorPackage();
	this.this$0.assertCalledByPackageOwner(v6);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		boolean v19 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
		if (v19 != 0) {
			AmbientContextManagerPerUserService.startDetection(p1, v6, v4);
			AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, v6, v4);
			return;
		}
	}
}


This is path 2 for the API with depth 1:
public void registerObserver(AmbientContextEventRequest p1, PendingIntent p2, RemoteCallback p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = Objects.requireNonNull(p3);
	AmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);
	String v6 = p2.getCreatorPackage();
	AmbientContextManagerService.access$100(this.this$0, v6);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		this.mService.onRegisterObserver(p1, v6, v4);
		return;
	}
}


This is path 3 for the API with depth 0:
public void registerObserver(AmbientContextEventRequest p1, PendingIntent p2, RemoteCallback p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = Objects.requireNonNull(p3);
	AmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);
	String v6 = p2.getCreatorPackage();
	p0.registerObserverWithCallback(p1, v6, v4);
	return;
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p1);\nObject v2 = Objects.requireNonNull(p2);\nObject v3 = Objects.requireNonNull(p3);\nAmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);\nString v6 = p2.getCreatorPackage();', 'this.this$0.assertCalledByPackageOwner(v6);\nAmbientContextManagerPerUserService.setUpServiceIfNeeded();\nAmbientContextManagerPerUserService.startDetection(p1, v6, v4);\nAbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, v6, v4);', 'AmbientContextManagerService.access$100(this.this$0, v6);\nthis.mService.onRegisterObserver(p1, v6, v4);', 'p0.registerObserverWithCallback(p1, v6, v4);']

The method registerObserver has the following similar APIs:

- API Name: registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V in the following Class: Lcom.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal with the following sink code entries:
  - Similarity: 0.912011444568634, Code:
AmbientContextManagerPerUserService.startDetection(p1, p2, p3);
AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, p2, p3);
  - Similarity: 0.778460681438446, Code:
this.mService.onRegisterObserver(p1, p2, p3);
  - Similarity: 0.7611849308013916, Code:
AmbientContextManagerPerUserService$$ExternalSyntheticLambda1 v27 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3);
RemoteCallback v26 = AmbientContextManagerPerUserService.createDetectionResultRemoteCallback();
this.mRemoteService.startDetection(p1, p2, v26, v29);
  - Similarity: 0.7370479106903076, Code:
AmbientContextManagerService$ClientRequest v40 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);
boolean v42 = this.mExistingClientRequests.add(v40);
  - Access Control Level: NORMAL

- API Name: unregisterObserver(Ljava/lang/String;)V in the following Class: Lcom.android.server.ambientcontext.AmbientContextManagerService$AmbientContextManagerInternal with the following sink code entries:
  - Similarity: 0.9073432683944702, Code:
AmbientContextManagerService.access$200(this.this$0, p1);
this.mService.onUnregisterObserver(p1);
  - Similarity: 0.8453671932220459, Code:
this.this$0.assertCalledByPackageOwner(p1);
AmbientContextManagerPerUserService.stopDetection(p1);
AbstractPerUserSystemService.mMaster.clientRemoved(AbstractPerUserSystemService.mUserId, p1);
  - Similarity: 0.7595828771591187, Code:
this.mRemoteService.stopDetection(p1);
Set v23 = AmbientContextManagerService.findExistingRequests(AbstractPerUserSystemService.mUserId, p1);
boolean v24 = this.mExistingClientRequests.removeAll(v23);
  - Access Control Level: NORMAL

- API Name: registerCallback(Landroid/hardware/display/IDisplayManagerCallback;)V in the following Class: Lcom.android.server.display.DisplayManagerService$BinderService with the following sink code entries:
  - Similarity: 0.843998372554779, Code:
p0.registerCallbackWithEventMask(p1, 7);
  - Similarity: 0.7725759148597717, Code:
this.this$0.registerCallbackInternal(p1, v2, v3, 7);
  - Access Control Level: NONE

- API Name: registerDevicePresenceListenerService(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.7617107033729553, Code:
p0.registerDevicePresenceListenerActive(p2, p1, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: unregisterDevicePresenceListenerService(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.7598663568496704, Code:
p0.registerDevicePresenceListenerActive(p2, p1, 0);
  - Access Control Level: SYS_OR_SIG

