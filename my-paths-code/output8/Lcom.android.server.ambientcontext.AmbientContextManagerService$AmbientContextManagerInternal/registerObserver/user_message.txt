This is path 1 for the API with depth 2:
public void registerObserver(AmbientContextEventRequest p1, PendingIntent p2, RemoteCallback p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = Objects.requireNonNull(p3);
	AmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);
	String v6 = p2.getCreatorPackage();
	this.this$0.assertCalledByPackageOwner(v6);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		boolean v19 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
		if (v19 != 0) {
			AmbientContextManagerPerUserService.startDetection(p1, v6, v4);
			AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, v6, v4);
			return;
		}
	}
}


This is path 2 for the API with depth 1:
public void registerObserver(AmbientContextEventRequest p1, PendingIntent p2, RemoteCallback p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = Objects.requireNonNull(p3);
	AmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);
	String v6 = p2.getCreatorPackage();
	AmbientContextManagerService.access$100(this.this$0, v6);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		this.mService.onRegisterObserver(p1, v6, v4);
		return;
	}
}


This is path 3 for the API with depth 0:
public void registerObserver(AmbientContextEventRequest p1, PendingIntent p2, RemoteCallback p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = Objects.requireNonNull(p3);
	AmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);
	String v6 = p2.getCreatorPackage();
	p0.registerObserverWithCallback(p1, v6, v4);
	return;
}
