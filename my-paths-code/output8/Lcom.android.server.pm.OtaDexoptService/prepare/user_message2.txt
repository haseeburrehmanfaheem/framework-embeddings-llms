The method prepare in the following class Lcom.android.server.pm.OtaDexoptService has the following code snippet:

This is path 1 for the API with depth 2:
public void prepare(){
	if (this.mDexoptCommands != 0) {
		OtaDexoptService$$ExternalSyntheticLambda0 v1 = new OtaDexoptService$$ExternalSyntheticLambda0();
		boolean v4 = Thread.holdsLock(this.mLock);
		if (v4 == 0) {
			Object v5 = this.sSnapshot.get();
			int v6 = this.sSnapshotPendingVersion.get();
			if (v5 == 0) {
				int v7 = v5.getVersion();
				if (v7 != v6) {
					Object v8 = this.sSnapshot.get();
					int v9 = this.sSnapshotPendingVersion.get();
					if (v8 == 0) {
						int v10 = v8.getVersion();
						if (v10 != v9) {
							int v11 = this.sSnapshotPendingVersion.get();
							long v13 = SystemClock.currentTimeMicro();
							if (v8 != 0) {
								PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
								ComputerEngine v16 = new ComputerEngine(v14,v11);
								long v18 = SystemClock.currentTimeMicro();
								if (this.mSnapshotStatistics == 0) {
									this.mSnapshotStatistics.rebuild(v13, v18, -1);
									Computer v12 = v16;
									this.sSnapshot.set(v12);
									Computer v21 = v12.use();
									Computer v3 = v21;
									ArrayMap v22 = v3.getPackageStates();
									Collection v23 = v22.values();
									LinkedList v25 = new LinkedList();
									ArrayList v27 = new ArrayList(v23);
									boolean v29 = v27.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
									ArrayList v30 = new ArrayList(v31);
									int v31 = v27.size();
									boolean v34 = Thread.holdsLock(this.mLock);
									if (v34 == 0) {
										Object v35 = this.sSnapshot.get();
										int v36 = this.sSnapshotPendingVersion.get();
										if (v35 == 0) {
											int v37 = v35.getVersion();
											if (v37 != v36) {
												Object v38 = this.sSnapshot.get();
												int v39 = this.sSnapshotPendingVersion.get();
												if (v38 == 0) {
													int v40 = v38.getVersion();
													if (v40 != v39) {
														int v41 = this.sSnapshotPendingVersion.get();
														Computer v42 = PackageManagerService.rebuildSnapshot(v38, v41);
														this.sSnapshot.set(v42);
														Computer v44 = v42.use();
														Computer v33 = v44;
														DexOptHelper$$ExternalSyntheticLambda0 v45 = new DexOptHelper$$ExternalSyntheticLambda0();
														Iterator v48 = v27.iterator();
														boolean v49 = v48.hasNext();
														if (v49 == 0) {
															Object v50 = v48.next();
															boolean v51 = v45.test(v50);
															if (v51 == 0) {
																boolean v52 = v30.add(v50);
																boolean v53 = v48.hasNext();
																if (v53 == 0) {
																	DexOptHelper.sortPackagesByUsageDate(v30, this.mPackageManagerService);
																	boolean v55 = v27.removeAll(v30);
																	Iterator v56 = v30.iterator();
																	boolean v57 = v56.hasNext();
																	if (v57 == 0) {
																		Object v58 = v56.next();
																		boolean v59 = v25.add(v58);
																		List v60 = v33.findSharedNonSystemLibraries(v58);
																		boolean v61 = v60.isEmpty();
																		if (v61 != 0) {
																			boolean v62 = v60.removeAll(v25);
																			boolean v63 = v25.addAll(v60);
																			boolean v64 = v27.removeAll(v60);
																			boolean v65 = v56.hasNext();
																			if (v65 == 0) {
																				v30.clear();
																				Intent v67 = new Intent("android.intent.action.PRE_BOOT_COMPLETED");
																				IPackageManager v70 = AppGlobals.getPackageManager();
																				ParceledListSlice v71 = v70.queryIntentReceivers(v67, 0, 0, 0);
																				List v72 = v71.getList();
																				ArraySet v73 = new ArraySet();
																				if (v72 == 0) {
																					Iterator v75 = v72.iterator();
																					boolean v76 = v75.hasNext();
																					if (v76 == 0) {
																						Object v77 = v75.next();
																						boolean v78 = v73.add(ActivityInfo.packageName);
																						boolean v79 = v75.hasNext();
																						if (v79 == 0) {
																							ArraySet v69 = v73;
																							DexOptHelper$$ExternalSyntheticLambda1 v80 = new DexOptHelper$$ExternalSyntheticLambda1(v69);
																							Iterator v83 = v27.iterator();
																							boolean v84 = v83.hasNext();
																							if (v84 == 0) {
																								Object v85 = v83.next();
																								boolean v86 = v80.test(v85);
																								if (v86 == 0) {
																									boolean v87 = v30.add(v85);
																									boolean v88 = v83.hasNext();
																									if (v88 == 0) {
																										DexOptHelper.sortPackagesByUsageDate(v30, this.mPackageManagerService);
																										boolean v90 = v27.removeAll(v30);
																										Iterator v91 = v30.iterator();
																										boolean v92 = v91.hasNext();
																										if (v92 == 0) {
																											Object v93 = v91.next();
																											boolean v94 = v25.add(v93);
																											List v95 = v33.findSharedNonSystemLibraries(v93);
																											boolean v96 = v95.isEmpty();
																											if (v96 != 0) {
																												boolean v97 = v95.removeAll(v25);
																												boolean v98 = v25.addAll(v95);
																												boolean v99 = v27.removeAll(v95);
																												boolean v100 = v91.hasNext();
																												if (v100 == 0) {
																													v30.clear();
																													DexManager v102 = this.mDexManager;
																													DexOptHelper$$ExternalSyntheticLambda2 v103 = new DexOptHelper$$ExternalSyntheticLambda2(v102);
																													Iterator v106 = v27.iterator();
																													boolean v107 = v106.hasNext();
																													if (v107 == 0) {
																														Object v108 = v106.next();
																														boolean v109 = v103.test(v108);
																														if (v109 == 0) {
																															boolean v110 = v30.add(v108);
																															boolean v111 = v106.hasNext();
																															if (v111 == 0) {
																																DexOptHelper.sortPackagesByUsageDate(v30, this.mPackageManagerService);
																																boolean v113 = v27.removeAll(v30);
																																Iterator v114 = v30.iterator();
																																boolean v115 = v114.hasNext();
																																if (v115 == 0) {
																																	Object v116 = v114.next();
																																	boolean v117 = v25.add(v116);
																																	List v118 = v33.findSharedNonSystemLibraries(v116);
																																	boolean v119 = v118.isEmpty();
																																	if (v119 != 0) {
																																		boolean v120 = v118.removeAll(v25);
																																		boolean v121 = v25.addAll(v118);
																																		boolean v122 = v27.removeAll(v118);
																																		boolean v123 = v114.hasNext();
																																		if (v123 == 0) {
																																			v30.clear();
																																			boolean v125 = v27.isEmpty();
																																			if (v125 != 0) {
																																				boolean v127 = this.mPackageUsage.isHistoricalPackageUsageAvailable();
																																				boolean v126 = v127;
																																				if (v126 == 0) {
																																					DexOptHelper$$ExternalSyntheticLambda6 v128 = new DexOptHelper$$ExternalSyntheticLambda6();
																																					Iterator v131 = v27.iterator();
																																					boolean v132 = v131.hasNext();
																																					if (v132 == 0) {
																																						Object v133 = v131.next();
																																						boolean v134 = v128.test(v133);
																																						if (v134 == 0) {
																																							boolean v135 = v30.add(v133);
																																							boolean v136 = v131.hasNext();
																																							if (v136 == 0) {
																																								DexOptHelper.sortPackagesByUsageDate(v30, this.mPackageManagerService);
																																								boolean v138 = v27.removeAll(v30);
																																								Iterator v139 = v30.iterator();
																																								boolean v140 = v139.hasNext();
																																								if (v140 == 0) {
																																									Object v141 = v139.next();
																																									boolean v142 = v25.add(v141);
																																									List v143 = v33.findSharedNonSystemLibraries(v141);
																																									boolean v144 = v143.isEmpty();
																																									if (v144 != 0) {
																																										boolean v145 = v143.removeAll(v25);
																																										boolean v146 = v25.addAll(v143);
																																										boolean v147 = v27.removeAll(v143);
																																										boolean v148 = v139.hasNext();
																																										if (v148 == 0) {
																																											v30.clear();
																																											if (1 == 0) {
																																												StringBuilder v154 = new StringBuilder();
																																												int v156 = v25.size();
																																												if (0 >= v156) {
																																													int v157 = v154.length();
																																													if (v157 <= 0) {
																																														StringBuilder v158 = v154.append(", ");
																																														Object v159 = v25.get(0);
																																														String v160 = v159.getPackageName();
																																														StringBuilder v161 = v154.append(v160);
																																														int v162 = v25.size();
																																														if ((0 + 1) >= v162) {
																																															String v163 = v154.toString();
																																															String v153 = v163;
																																															StringBuilder v171 = new StringBuilder();
																																															int v173 = v27.size();
																																															if (((0 + 1) + 1) >= v173) {
																																																int v174 = v171.length();
																																																if (v174 <= 0) {
																																																	StringBuilder v175 = v171.append(", ");
																																																	Object v176 = v27.get(((0 + 1) + 1));
																																																	String v177 = v176.getPackageName();
																																																	StringBuilder v178 = v171.append(v177);
																																																	int v179 = v27.size();
																																																	if ((((0 + 1) + 1) + 1) >= v179) {
																																																		String v180 = v171.toString();
																																																		String v170 = v180;
																																																		List v24 = v25;
																																																		boolean v184 = v24.removeIf(v1);
																																																		ArrayList v185 = new ArrayList(v23);
																																																		boolean v187 = v185.removeAll(v24);
																																																		boolean v188 = v185.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
																																																		boolean v189 = v185.removeIf(v1);
																																																		ArrayList v190 = new ArrayList(((v191 * 3) / 2));
																																																		int v191 = v23.size();
																																																		this.mDexoptCommands = v190;
																																																		Iterator v193 = v24.iterator();
																																																		boolean v194 = v193.hasNext();
																																																		if (v194 == 0) {
																																																			Iterator v195 = v185.iterator();
																																																			boolean v196 = v195.hasNext();
																																																			if (v196 == 0) {
																																																				int v197 = this.mDexoptCommands.size();
																																																				this.completeSize = v197;
																																																				File v200 = Environment.getDataDirectory();
																																																				StorageManager v201 = StorageManager.from(this.mContext);
																																																				long v202 = v201.getStorageLowBytes(v200);
																																																				if ((v202 < 0) == 0) {
																																																					long v199 = v202;
																																																					File v203 = Environment.getDataDirectory();
																																																					long v204 = v203.getUsableSpace();
																																																					long v198 = (v204 - v199);
																																																					if ((v198 < 1073741824) >= 0) {
																																																						File v207 = Environment.getDataDirectory();
																																																						StorageManager v208 = StorageManager.from(this.mContext);
																																																						long v209 = v208.getStorageLowBytes(v207);
																																																						if ((v209 < 0) == 0) {
																																																							long v206 = v209;
																																																							File v210 = Environment.getDataDirectory();
																																																							long v211 = v210.getUsableSpace();
																																																							long v205 = (v211 - v206);
																																																							int v212 = v24.size();
																																																							int v213 = v185.size();
																																																							p0.prepareMetricsLogging(v212, v213, v198, v205);
																																																							OtaDexoptService$$ExternalSyntheticLambda1 v215 = new OtaDexoptService$$ExternalSyntheticLambda1();
																																																							Comparator v217 = Comparator.comparingLong(v215);
																																																							Object v218 = Collections.max(v24, v217);
																																																							StringBuilder v219 = new StringBuilder();
																																																							StringBuilder v221 = v219.append("A/B OTA: lastUsed time = ");
																																																							return;
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void prepare(){
	if (this.mDexoptCommands != 0) {
		OtaDexoptService$$ExternalSyntheticLambda0 v1 = new OtaDexoptService$$ExternalSyntheticLambda0();
		boolean v4 = Thread.holdsLock(this.mLock);
		if (v4 == 0) {
			Object v5 = this.sSnapshot.get();
			int v6 = this.sSnapshotPendingVersion.get();
			if (v5 == 0) {
				int v7 = v5.getVersion();
				if (v7 != v6) {
					Object v8 = this.sSnapshot.get();
					int v9 = this.sSnapshotPendingVersion.get();
					if (v8 == 0) {
						int v10 = v8.getVersion();
						if (v10 != v9) {
							int v11 = this.sSnapshotPendingVersion.get();
							Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);
							this.sSnapshot.set(v12);
							Computer v14 = v12.use();
							Computer v3 = v14;
							ArrayMap v15 = v3.getPackageStates();
							Collection v16 = v15.values();
							LinkedList v18 = new LinkedList();
							ArrayList v20 = new ArrayList(v16);
							boolean v22 = v20.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
							ArrayList v23 = new ArrayList(v24);
							int v24 = v20.size();
							Computer v26 = this.mPackageManagerService.snapshotComputer();
							DexOptHelper$$ExternalSyntheticLambda0 v27 = new DexOptHelper$$ExternalSyntheticLambda0();
							DexOptHelper.applyPackageFilter(v26, v27, v18, v20, v23, this.mPackageManagerService);
							Intent v30 = new Intent("android.intent.action.PRE_BOOT_COMPLETED");
							ArraySet v32 = DexOptHelper.getPackageNamesForIntent(v30, 0);
							DexOptHelper$$ExternalSyntheticLambda1 v33 = new DexOptHelper$$ExternalSyntheticLambda1(v32);
							DexOptHelper.applyPackageFilter(v26, v33, v18, v20, v23, this.mPackageManagerService);
							DexManager v36 = this.mPackageManagerService.getDexManager();
							DexOptHelper$$ExternalSyntheticLambda2 v37 = new DexOptHelper$$ExternalSyntheticLambda2(v36);
							DexOptHelper.applyPackageFilter(v26, v37, v18, v20, v23, this.mPackageManagerService);
							boolean v40 = v20.isEmpty();
							if (v40 != 0) {
								boolean v41 = this.mPackageManagerService.isHistoricalPackageUsageAvailable();
								if (v41 == 0) {
									if (1 == 0) {
										DexOptHelper$$ExternalSyntheticLambda3 v43 = new DexOptHelper$$ExternalSyntheticLambda3();
										Comparator v45 = Comparator.comparingLong(v43);
										Object v46 = Collections.max(v20, v45);
										if (1 == 0) {
											PackageStateUnserialized v47 = v46.getTransientState();
											long v48 = v47.getLatestForegroundPackageUseTimeInMills();
											if ((v48 < 0) == 0) {
												DexOptHelper$$ExternalSyntheticLambda4 v49 = new DexOptHelper$$ExternalSyntheticLambda4((v48 - 604800000));
												DexOptHelper.sortPackagesByUsageDate(v20, this.mPackageManagerService);
												DexOptHelper.applyPackageFilter(v26, v49, v18, v20, v23, this.mPackageManagerService);
												if (1 == 0) {
													List v17 = v18;
													boolean v53 = v17.removeIf(v1);
													ArrayList v54 = new ArrayList(v16);
													boolean v56 = v54.removeAll(v17);
													boolean v57 = v54.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
													boolean v58 = v54.removeIf(v1);
													ArrayList v59 = new ArrayList(((v60 * 3) / 2));
													int v60 = v16.size();
													this.mDexoptCommands = v59;
													Iterator v62 = v17.iterator();
													boolean v63 = v62.hasNext();
													if (v63 == 0) {
														Iterator v64 = v54.iterator();
														boolean v65 = v64.hasNext();
														if (v65 == 0) {
															int v66 = this.mDexoptCommands.size();
															this.completeSize = v66;
															long v68 = OtaDexoptService.getMainLowSpaceThreshold();
															File v69 = Environment.getDataDirectory();
															long v70 = v69.getUsableSpace();
															long v67 = (v70 - v68);
															if ((v67 < 1073741824) >= 0) {
																long v72 = OtaDexoptService.getMainLowSpaceThreshold();
																File v73 = Environment.getDataDirectory();
																long v74 = v73.getUsableSpace();
																long v71 = (v74 - v72);
																int v75 = v17.size();
																int v76 = v54.size();
																this.availableSpaceBefore = v67;
																this.availableSpaceAfterBulkDelete = v71;
																this.availableSpaceAfterDexopt = 0;
																this.importantPackageCount = v75;
																this.otherPackageCount = v76;
																int v78 = this.mDexoptCommands.size();
																this.dexoptCommandCountTotal = v78;
																this.dexoptCommandCountExecuted = 0;
																long v79 = System.nanoTime();
																this.otaDexoptTimeStart = v79;
																OtaDexoptService$$ExternalSyntheticLambda1 v80 = new OtaDexoptService$$ExternalSyntheticLambda1();
																Comparator v82 = Comparator.comparingLong(v80);
																Object v83 = Collections.max(v17, v82);
																StringBuilder v84 = new StringBuilder();
																StringBuilder v86 = v84.append("A/B OTA: lastUsed time = ");
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void prepare(){
	if (this.mDexoptCommands != 0) {
		OtaDexoptService$$ExternalSyntheticLambda0 v1 = new OtaDexoptService$$ExternalSyntheticLambda0();
		Computer v3 = this.mPackageManagerService.snapshotComputer();
		ArrayMap v4 = v3.getPackageStates();
		Collection v5 = v4.values();
		List v6 = DexOptHelper.getPackagesForDexopt(v5, this.mPackageManagerService, 1);
		boolean v7 = v6.removeIf(v1);
		ArrayList v8 = new ArrayList(v5);
		boolean v10 = v8.removeAll(v6);
		boolean v11 = v8.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
		boolean v12 = v8.removeIf(v1);
		ArrayList v13 = new ArrayList(((v14 * 3) / 2));
		int v14 = v5.size();
		this.mDexoptCommands = v13;
		Iterator v16 = v6.iterator();
		boolean v17 = v16.hasNext();
		if (v17 == 0) {
			Iterator v18 = v8.iterator();
			boolean v19 = v18.hasNext();
			if (v19 == 0) {
				int v20 = this.mDexoptCommands.size();
				this.completeSize = v20;
				long v21 = p0.getAvailableSpace();
				if ((v21 < 1073741824) >= 0) {
					long v22 = p0.getAvailableSpace();
					int v23 = v6.size();
					int v24 = v8.size();
					p0.prepareMetricsLogging(v23, v24, v21, v22);
					OtaDexoptService$$ExternalSyntheticLambda1 v26 = new OtaDexoptService$$ExternalSyntheticLambda1();
					Comparator v28 = Comparator.comparingLong(v26);
					Object v29 = Collections.max(v6, v28);
					StringBuilder v30 = new StringBuilder();
					StringBuilder v32 = v30.append("A/B OTA: lastUsed time = ");
					return;
				}
			}
		}
	}
}

and the following sink code:
['Object v5 = this.sSnapshot.get();\nint v6 = this.sSnapshotPendingVersion.get();\nComputer v12 = PackageManagerService.rebuildSnapshot(v8, v11);\nthis.sSnapshot.set(v12);\nArrayList v30 = new ArrayList(v27);\nDexOptHelper.sortPackagesByUsageDate(v30, this.mPackageManagerService);\nboolean v55 = v27.removeAll(v30);', 'Computer v3 = this.mPackageManagerService.snapshotComputer();\nArrayMap v4 = v3.getPackageStates();\nList v6 = DexOptHelper.getPackagesForDexopt(v5, this.mPackageManagerService, 1);\nArrayList v8 = new ArrayList(v5);\nboolean v10 = v8.removeAll(v6);']

The method prepare has the following similar APIs:

- API Name: getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.881181001663208, Code:
Object v3 = this.sSnapshot.get();
int v4 = this.sSnapshotPendingVersion.get();
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
String v13 = v12.getInstallerPackageName(p1);
  - Similarity: 0.787945032119751, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, -1);
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
String v20 = v19.getInstallerPackageName(p1);
  - Access Control Level: NONE

- API Name: getNamesForUids([I)[Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.8072134256362915, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
String v13 = v1.getNamesForUids(p1);
  - Access Control Level: NONE

- API Name: getTargetSdkVersionForPackage(Ljava/lang/String;)I in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.7952013611793518, Code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, -1);
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
Computer v1 = v19;
int v20 = v1.getTargetSdkVersion(p1);
  - Access Control Level: NONE

- API Name: getAllPackages()[Ljava/lang/String; in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.7881863713264465, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
Computer v12 = v10.use();
List v13 = v12.getAllPackages();
String v14 = new String(0);
Object v15 = v13.toArray(v14);
return v15;
  - Access Control Level: NONE

- API Name: hasSha256SigningCertificate(Ljava/lang/String;[B)Z in the following Class: Lcom.android.server.pm.PackageManagerNative with the following sink code entries:
  - Similarity: 0.7832441926002502, Code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
Computer v1 = v12;
boolean v13 = v1.hasSigningCertificate(p1, p2, 1);
return v13;
  - Access Control Level: NONE

