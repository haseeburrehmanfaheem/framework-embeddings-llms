This is path 1 for the API with depth 2:
public void cleanup(){
	this.mDexoptCommands = 0;
	File v4 = Environment.getDataDirectory();
	StorageManager v5 = StorageManager.from(this.mContext);
	long v6 = v5.getStorageLowBytes(v4);
	if ((v6 < 0) == 0) {
		long v3 = v6;
		File v7 = Environment.getDataDirectory();
		long v8 = v7.getUsableSpace();
		long v2 = (v8 - v3);
		this.availableSpaceAfterDexopt = v2;
		long v10 = System.nanoTime();
		if (((this.availableSpaceBefore / 1048576) < 2147483647) <= 0) {
			int v11 = (this.availableSpaceBefore / 1048576);
			this.metricsLogger.histogram("ota_dexopt_available_space_before_mb", v11);
			if (((this.availableSpaceAfterBulkDelete / 1048576) < 2147483647) <= 0) {
				int v13 = (this.availableSpaceAfterBulkDelete / 1048576);
				this.metricsLogger.histogram("ota_dexopt_available_space_after_bulk_delete_mb", v13);
				if (((this.availableSpaceAfterDexopt / 1048576) < 2147483647) <= 0) {
					int v15 = (this.availableSpaceAfterDexopt / 1048576);
					this.metricsLogger.histogram("ota_dexopt_available_space_after_dexopt_mb", v15);
					this.metricsLogger.histogram("ota_dexopt_num_important_packages", this.importantPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_other_packages", this.otherPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_commands", this.dexoptCommandCountTotal);
					this.metricsLogger.histogram("ota_dexopt_num_commands_executed", this.dexoptCommandCountExecuted);
					long v21 = TimeUnit.NANOSECONDS.toSeconds((v10 - this.otaDexoptTimeStart));
					this.metricsLogger.histogram("ota_dexopt_time_s", v21);
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void cleanup(){
	this.mDexoptCommands = 0;
	long v3 = OtaDexoptService.getMainLowSpaceThreshold();
	File v4 = Environment.getDataDirectory();
	long v5 = v4.getUsableSpace();
	long v2 = (v5 - v3);
	this.availableSpaceAfterDexopt = v2;
	long v7 = System.nanoTime();
	int v8 = OtaDexoptService.inMegabytes(this.availableSpaceBefore);
	this.metricsLogger.histogram("ota_dexopt_available_space_before_mb", v8);
	int v10 = OtaDexoptService.inMegabytes(this.availableSpaceAfterBulkDelete);
	this.metricsLogger.histogram("ota_dexopt_available_space_after_bulk_delete_mb", v10);
	int v12 = OtaDexoptService.inMegabytes(this.availableSpaceAfterDexopt);
	this.metricsLogger.histogram("ota_dexopt_available_space_after_dexopt_mb", v12);
	this.metricsLogger.histogram("ota_dexopt_num_important_packages", this.importantPackageCount);
	this.metricsLogger.histogram("ota_dexopt_num_other_packages", this.otherPackageCount);
	this.metricsLogger.histogram("ota_dexopt_num_commands", this.dexoptCommandCountTotal);
	this.metricsLogger.histogram("ota_dexopt_num_commands_executed", this.dexoptCommandCountExecuted);
	long v18 = TimeUnit.NANOSECONDS.toSeconds((v7 - this.otaDexoptTimeStart));
	this.metricsLogger.histogram("ota_dexopt_time_s", v18);
	return;
}


This is path 3 for the API with depth 0:
public void cleanup(){
	this.mDexoptCommands = 0;
	long v2 = p0.getAvailableSpace();
	this.availableSpaceAfterDexopt = v2;
	p0.performMetricsLogging();
	return;
}
