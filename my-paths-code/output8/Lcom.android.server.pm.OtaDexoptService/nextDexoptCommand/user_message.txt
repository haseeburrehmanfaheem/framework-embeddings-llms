This is path 1 for the API with depth 2:
public String nextDexoptCommand(){
	if (this.mDexoptCommands == 0) {
		boolean v1 = this.mDexoptCommands.isEmpty();
		if (v1 == 0) {
			Object v2 = this.mDexoptCommands.remove(0);
			File v5 = Environment.getDataDirectory();
			StorageManager v6 = StorageManager.from(this.mContext);
			long v7 = v6.getStorageLowBytes(v5);
			if ((v7 < 0) == 0) {
				long v4 = v7;
				File v8 = Environment.getDataDirectory();
				long v9 = v8.getUsableSpace();
				long v3 = (v9 - v4);
				if ((v3 < 0) <= 0) {
					this.dexoptCommandCountExecuted = (this.dexoptCommandCountExecuted + 1);
					return v2;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String nextDexoptCommand(){
	if (this.mDexoptCommands == 0) {
		boolean v1 = this.mDexoptCommands.isEmpty();
		if (v1 == 0) {
			Object v2 = this.mDexoptCommands.remove(0);
			long v4 = OtaDexoptService.getMainLowSpaceThreshold();
			File v5 = Environment.getDataDirectory();
			long v6 = v5.getUsableSpace();
			long v3 = (v6 - v4);
			if ((v3 < 0) <= 0) {
				this.dexoptCommandCountExecuted = (this.dexoptCommandCountExecuted + 1);
				return v2;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String nextDexoptCommand(){
	if (this.mDexoptCommands == 0) {
		boolean v1 = this.mDexoptCommands.isEmpty();
		if (v1 == 0) {
			Object v2 = this.mDexoptCommands.remove(0);
			long v3 = p0.getAvailableSpace();
			if ((v3 < 0) <= 0) {
				this.dexoptCommandCountExecuted = (this.dexoptCommandCountExecuted + 1);
				return v2;
			}
		}
	}
}
