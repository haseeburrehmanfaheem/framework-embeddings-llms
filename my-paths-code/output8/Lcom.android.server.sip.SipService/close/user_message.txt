This is path 1 for the API with depth 2:
public void close(String p1, String p2){
	if (v4 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			Object v5 = this.mSipGroups.get(p1);
			if (v5 != 0) {
				boolean v7 = 1;
				if (v7 != 0) {
					boolean v9 = 1;
					if (v9 == 0) {
						boolean v6 = 0;
						if (v6 != 0) {
							Object v13 = this.mSipGroups.remove(p1);
							SipProfile v15 = this.mLocalProfile;
							SipProfile v14 = v15;
							StringBuilder v17 = new StringBuilder();
							StringBuilder v19 = v17.append("notify: profile removed: ");
							StringBuilder v20 = v19.append(v14);
							String v21 = v20.toString();
							int v23 = Rlog.d("SipService", v21);
							Intent v24 = new Intent("android.net.sip.action.SIP_REMOVE_PROFILE");
							String v26 = v14.getUriString();
							Intent v27 = v24.putExtra("android:localSipUri", v26);
							this.mContext.sendBroadcast(v24, "android.permission.USE_SIP");
							int v29 = this.mSipGroups.size();
							if (v29 != 0) {
								this.mContext.unregisterReceiver(this.mConnectivityReceiver);
								SipService.log("unregisterReceivers:");
								this.mWifiLock.release();
								this.mNetworkType = -1;
								this.mOpenedToReceiveCalls = 0;
								SipSessionGroup.onConnectivityChanged();
								this.mSessionMap.clear();
								SipSessionGroup.closeToNotReceiveCalls();
								if (this.mSipStack == 0) {
									this.mSipStack.stop();
									this.mSipStack = 0;
									this.mSipHelper = 0;
									SipSessionGroup.resetExternalAddress();
									if (this.mRunning != 0) {
										this.mRunning = 0;
										SipWakeLock v42 = SipService.-$$Nest$fgetmMyWakeLock(this.this$0);
										v42.release(this.mSession);
										if (this.mSession == 0) {
											this.mSession.setListener(0);
											int v45 = SipService.-$$Nest$fgetmNetworkType(this.this$0);
											if (v45 == -1) {
												if (this.mRegistered == 0) {
													this.mSession.unregister();
													SipWakeupTimer v47 = SipService.-$$Nest$fgetmTimer(this.this$0);
													v47.cancel(SipService$SipAutoReg);
													SipService$SipAutoReg.stopKeepAliveProcess();
													this.mRegistered = 0;
													ISipSessionListener v50 = this.mProxy.getListener();
													SipService$SipAutoReg.setListener(v50);
													StringBuilder v52 = new StringBuilder();
													StringBuilder v54 = v52.append("close: ");
													String v56 = this.mSipGroup.getLocalProfileUri();
													String v55 = v56;
													StringBuilder v58 = new StringBuilder();
													String v60 = v55.trim();
													boolean v61 = v60.startsWith("sip:");
													if (v61 == 0) {
														StringBuilder v62 = v58.append("sip:");
														int v63 = v60.length();
														if (0 >= v63) {
															char v64 = v60.charAt(0);
															if ((0 + 1) >= v63) {
																char v65 = v60.charAt((0 + 1));
																if ((0 - 0) < 1) {
																	if ((0 + 1) == v63) {
																		boolean v66 = SipService.isAllowedCharacter(v64);
																		if (v66 != 0) {
																			if (charAt() == 64) {
																				if (v65 != 64) {
																					StringBuilder v67 = v58.append(42);
																					if ((0 + 1) >= v63) {
																						String v68 = v58.toString();
																						String v57 = v68;
																						StringBuilder v69 = v54.append(v57);
																						StringBuilder v70 = v69.append(": ");
																						StringBuilder v71 = v70.append(this.mIncomingCallPendingIntent);
																						String v72 = v71.toString();
																						int v74 = Rlog.d("SipSessionGroupExt", v72);
																						Collection v76 = this.mSipGroups.values();
																						Iterator v77 = v76.iterator();
																						boolean v78 = v77.hasNext();
																						if (v78 == 0) {
																							Object v79 = v77.next();
																							boolean v80 = this.mOpenedToReceiveCalls;
																							if (v80 == 0) {
																								boolean v81 = v77.hasNext();
																								if (v81 == 0) {
																									Object v82 = v77.next();
																									boolean v83 = this.mOpenedToReceiveCalls;
																									if (v83 == 0) {
																										if (this.mNetworkType == 1) {
																											if (this.mNetworkType != -1) {
																												this.mWifiLock.acquire();
																												return;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void close(String p1, String p2){
	if (v4 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			Object v5 = this.mSipGroups.get(p1);
			if (v5 != 0) {
				boolean v7 = SipService.isCallerRadio();
				if (v7 != 0) {
					boolean v8 = SipService.isCallerCreator(v5);
					if (v8 == 0) {
						boolean v6 = 0;
						if (v6 != 0) {
							Object v9 = this.mSipGroups.remove(p1);
							SipProfile v11 = this.mSipGroup.getLocalProfile();
							SipProfile v10 = v11;
							StringBuilder v13 = new StringBuilder();
							StringBuilder v15 = v13.append("notify: profile removed: ");
							StringBuilder v16 = v15.append(v10);
							String v17 = v16.toString();
							SipService.log(v17);
							Intent v19 = new Intent("android.net.sip.action.SIP_REMOVE_PROFILE");
							String v21 = v10.getUriString();
							Intent v22 = v19.putExtra("android:localSipUri", v21);
							this.mContext.sendBroadcast(v19, "android.permission.USE_SIP");
							int v24 = this.mSipGroups.size();
							if (v24 != 0) {
								SipService.unregisterReceivers();
								this.mOpenedToReceiveCalls = 0;
								this.mSipGroup.close();
								this.mAutoRegistration.stop();
								StringBuilder v29 = new StringBuilder();
								StringBuilder v31 = v29.append("close: ");
								String v32 = SipService$SipSessionGroupExt.getUri();
								String v33 = SipService.obfuscateSipUri(v32);
								StringBuilder v34 = v31.append(v33);
								StringBuilder v35 = v34.append(": ");
								StringBuilder v36 = v35.append(this.mIncomingCallPendingIntent);
								String v37 = v36.toString();
								SipService$SipSessionGroupExt.log(v37);
								Collection v40 = this.mSipGroups.values();
								Iterator v41 = v40.iterator();
								boolean v42 = v41.hasNext();
								if (v42 == 0) {
									Object v43 = v41.next();
									boolean v44 = v43.isOpenedToReceiveCalls();
									if (v44 == 0) {
										boolean v45 = v41.hasNext();
										if (v45 == 0) {
											Object v46 = v41.next();
											boolean v47 = v46.isOpenedToReceiveCalls();
											if (v47 == 0) {
												if (this.mNetworkType == 1) {
													if (this.mNetworkType != -1) {
														this.mWifiLock.acquire();
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void close(String p1, String p2){
	boolean v1 = p0.canUseSip(p2, "close");
	if (v1 != 0) {
		Object v2 = this.mSipGroups.get(p1);
		if (v2 != 0) {
			boolean v3 = p0.isCallerCreatorOrRadio(v2);
			if (v3 != 0) {
				Object v4 = this.mSipGroups.remove(p1);
				SipProfile v5 = v4.getLocalProfile();
				p0.notifyProfileRemoved(v5);
				v4.close();
				p0.updateWakeLocks();
				return;
			}
		}
	}
}
