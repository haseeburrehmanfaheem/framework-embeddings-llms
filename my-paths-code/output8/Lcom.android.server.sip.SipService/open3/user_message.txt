This is path 1 for the API with depth 2:
public void open3(SipProfile p1, PendingIntent p2, ISipSessionListener p3, String p4){
	if (v4 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			int v5 = Binder.getCallingUid();
			p1.setCallingUid(v5);
			if (p2 != 0) {
				StringBuilder v7 = new StringBuilder();
				StringBuilder v9 = v7.append("open3: ");
				String v10 = p1.getUriString();
				StringBuilder v12 = new StringBuilder();
				String v14 = v10.trim();
				boolean v15 = v14.startsWith("sip:");
				if (v15 == 0) {
					StringBuilder v16 = v12.append("sip:");
					int v17 = v14.length();
					if (0 >= v17) {
						char v18 = v14.charAt(0);
						if ((0 + 1) >= v17) {
							char v19 = v14.charAt((0 + 1));
							if ((0 - 0) < 1) {
								if ((0 + 1) == v17) {
									if (v18 == 64) {
										if (v18 != 46) {
											boolean v20 = 0;
											if (v20 != 0) {
												if (charAt() == 64) {
													if (v19 != 64) {
														StringBuilder v21 = v12.append(42);
														if ((0 + 1) >= v17) {
															String v22 = v12.toString();
															String v11 = v22;
															StringBuilder v23 = v9.append(v11);
															StringBuilder v24 = v23.append(": ");
															StringBuilder v25 = v24.append(p2);
															StringBuilder v26 = v25.append(": ");
															StringBuilder v27 = v26.append(p3);
															String v28 = v27.toString();
															p0.log(v28);
															String v31 = p1.getUriString();
															Object v32 = this.mSipGroups.get(v31);
															if (v32 == 0) {
																SipService$SipSessionGroupExt v33 = new SipService$SipSessionGroupExt(SipService,p1,p2,p3);
																Object v35 = this.mSipGroups.put(v31, v33);
																StringBuilder v37 = new StringBuilder();
																StringBuilder v39 = v37.append("notify: profile added: ");
																StringBuilder v40 = v39.append(p1);
																String v41 = v40.toString();
																SipService.log(v41);
																Intent v43 = new Intent("com.android.phone.SIP_ADD_PHONE");
																String v45 = p1.getUriString();
																Intent v46 = v43.putExtra("android:localSipUri", v45);
																this.mContext.sendBroadcast(v43, "android.permission.USE_SIP");
																int v48 = this.mSipGroups.size();
																if (v48 != 1) {
																	SipService.registerReceivers();
																	SipService$SipSessionGroupExt v30 = v32;
																	boolean v50 = p1.getAutoRegistration();
																	if (v50 == 0) {
																		this.mOpenedToReceiveCalls = 1;
																		int v52 = this.mNetworkType;
																		if (v52 == -1) {
																			if (this.mCallReceiverSession != 0) {
																				SipSessionGroup$SipSessionCallReceiverImpl v54 = new SipSessionGroup$SipSessionCallReceiverImpl(SipSessionGroup,SipService$SipSessionGroupExt);
																				this.mCallReceiverSession = v54;
																				if (this.mRunning != 0) {
																					this.mRunning = 1;
																					this.mBackoff = 1;
																					ISipSession v57 = this.mSipGroup.createSession(SipService$SipAutoReg);
																					this.mSession = v57;
																					if (v57 != 0) {
																						SipWakeLock v58 = SipService.-$$Nest$fgetmMyWakeLock(this.this$0);
																						v58.acquire(this.mSession);
																						this.mSession.unregister();
																						StringBuilder v61 = new StringBuilder();
																						StringBuilder v63 = v61.append("SipAutoReg:");
																						SipProfile v64 = this.mSession.getLocalProfile();
																						String v65 = v64.getUriString();
																						String v66 = SipService.obfuscateSipUri(v65);
																						StringBuilder v67 = v63.append(v66);
																						String v68 = v67.toString();
																						this.SAR_TAG = v68;
																						StringBuilder v69 = new StringBuilder();
																						StringBuilder v71 = v69.append("start: group=");
																						StringBuilder v72 = v71.append(this.mSipGroup);
																						String v73 = v72.toString();
																						SipService$SipAutoReg.log(v73);
																						StringBuilder v75 = new StringBuilder();
																						StringBuilder v77 = v75.append("openToReceiveCalls: ");
																						String v79 = this.mSipGroup.getLocalProfileUri();
																						String v78 = v79;
																						StringBuilder v81 = new StringBuilder();
																						String v83 = v78.trim();
																						boolean v84 = v83.startsWith("sip:");
																						if (v84 == 0) {
																							StringBuilder v85 = v81.append("sip:");
																							int v86 = v83.length();
																							if (((0 + 1) + 1) >= v86) {
																								char v87 = v83.charAt(((0 + 1) + 1));
																								if ((((0 + 1) + 1) + 1) >= v86) {
																									char v88 = v83.charAt((((0 + 1) + 1) + 1));
																									if ((((0 + 1) + 1) - 0) < 1) {
																										if ((((0 + 1) + 1) + 1) == v86) {
																											boolean v89 = SipService.isAllowedCharacter(v87);
																											if (v89 != 0) {
																												if (v18 == 64) {
																													if (v88 != 64) {
																														StringBuilder v90 = v81.append(42);
																														if ((((0 + 1) + 1) + 1) >= v86) {
																															String v91 = v81.toString();
																															String v80 = v91;
																															StringBuilder v92 = v77.append(v80);
																															StringBuilder v93 = v92.append(": ");
																															StringBuilder v94 = v93.append(this.mIncomingCallPendingIntent);
																															String v95 = v94.toString();
																															int v97 = Rlog.d("SipSessionGroupExt", v95);
																															Collection v99 = this.mSipGroups.values();
																															Iterator v100 = v99.iterator();
																															boolean v101 = v100.hasNext();
																															if (v101 == 0) {
																																Object v102 = v100.next();
																																boolean v103 = this.mOpenedToReceiveCalls;
																																if (v103 == 0) {
																																	boolean v104 = v100.hasNext();
																																	if (v104 == 0) {
																																		Object v105 = v100.next();
																																		boolean v106 = this.mOpenedToReceiveCalls;
																																		if (v106 == 0) {
																																			if (this.mNetworkType == 1) {
																																				if (this.mNetworkType != -1) {
																																					this.mWifiLock.acquire();
																																					p0.loge("open3:", caughtException);
																																					return;
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void open3(SipProfile p1, PendingIntent p2, ISipSessionListener p3, String p4){
	if (v4 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			int v5 = Binder.getCallingUid();
			p1.setCallingUid(v5);
			if (p2 != 0) {
				StringBuilder v7 = new StringBuilder();
				StringBuilder v9 = v7.append("open3: ");
				String v10 = p1.getUriString();
				StringBuilder v12 = new StringBuilder();
				String v14 = v10.trim();
				boolean v15 = v14.startsWith("sip:");
				if (v15 == 0) {
					StringBuilder v16 = v12.append("sip:");
					int v17 = v14.length();
					if (0 >= v17) {
						char v18 = v14.charAt(0);
						if ((0 + 1) >= v17) {
							char v19 = v14.charAt((0 + 1));
							if ((0 - 0) < 1) {
								if ((0 + 1) == v17) {
									boolean v20 = SipService.isAllowedCharacter(v18);
									if (v20 != 0) {
										if (charAt() == 64) {
											if (v19 != 64) {
												StringBuilder v21 = v12.append(42);
												if ((0 + 1) >= v17) {
													String v22 = v12.toString();
													String v11 = v22;
													StringBuilder v23 = v9.append(v11);
													StringBuilder v24 = v23.append(": ");
													StringBuilder v25 = v24.append(p2);
													StringBuilder v26 = v25.append(": ");
													StringBuilder v27 = v26.append(p3);
													String v28 = v27.toString();
													int v30 = Rlog.d("SipService", v28);
													String v32 = p1.getUriString();
													Object v33 = this.mSipGroups.get(v32);
													if (v33 == 0) {
														boolean v34 = SipService.isCallerCreator(v33);
														if (v34 == 0) {
															v33.setIncomingCallPendingIntent(p2);
															v33.setListener(p3);
															SipService$SipSessionGroupExt v31 = v33;
															boolean v37 = p1.getAutoRegistration();
															if (v37 == 0) {
																this.mOpenedToReceiveCalls = 1;
																int v39 = SipService.-$$Nest$fgetmNetworkType(this.this$0);
																if (v39 == -1) {
																	this.mSipGroup.openToReceiveCalls(SipService$SipSessionGroupExt);
																	this.mAutoRegistration.start(this.mSipGroup);
																	StringBuilder v42 = new StringBuilder();
																	StringBuilder v44 = v42.append("openToReceiveCalls: ");
																	String v45 = SipService$SipSessionGroupExt.getUri();
																	String v46 = SipService.obfuscateSipUri(v45);
																	StringBuilder v47 = v44.append(v46);
																	StringBuilder v48 = v47.append(": ");
																	StringBuilder v49 = v48.append(this.mIncomingCallPendingIntent);
																	String v50 = v49.toString();
																	SipService$SipSessionGroupExt.log(v50);
																	Collection v53 = this.mSipGroups.values();
																	Iterator v54 = v53.iterator();
																	boolean v55 = v54.hasNext();
																	if (v55 == 0) {
																		Object v56 = v54.next();
																		boolean v57 = v56.isOpenedToReceiveCalls();
																		if (v57 == 0) {
																			boolean v58 = v54.hasNext();
																			if (v58 == 0) {
																				Object v59 = v54.next();
																				boolean v60 = v59.isOpenedToReceiveCalls();
																				if (v60 == 0) {
																					if (this.mNetworkType == 1) {
																						if (this.mNetworkType != -1) {
																							this.mWifiLock.acquire();
																							int v63 = Rlog.e("SipService", "open3:", caughtException);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void open3(SipProfile p1, PendingIntent p2, ISipSessionListener p3, String p4){
	boolean v1 = p0.canUseSip(p4, "open3");
	if (v1 != 0) {
		int v2 = Binder.getCallingUid();
		p1.setCallingUid(v2);
		if (p2 != 0) {
			StringBuilder v4 = new StringBuilder();
			StringBuilder v6 = v4.append("open3: ");
			String v7 = p1.getUriString();
			String v8 = SipService.obfuscateSipUri(v7);
			StringBuilder v9 = v6.append(v8);
			StringBuilder v10 = v9.append(": ");
			StringBuilder v11 = v10.append(p2);
			StringBuilder v12 = v11.append(": ");
			StringBuilder v13 = v12.append(p3);
			String v14 = v13.toString();
			p0.log(v14);
			SipService$SipSessionGroupExt v16 = p0.createGroup(p1, p2, p3);
			boolean v17 = p1.getAutoRegistration();
			if (v17 == 0) {
				v16.openToReceiveCalls();
				p0.updateWakeLocks();
				p0.loge("open3:", caughtException);
				return;
			}
		}
	}
}
