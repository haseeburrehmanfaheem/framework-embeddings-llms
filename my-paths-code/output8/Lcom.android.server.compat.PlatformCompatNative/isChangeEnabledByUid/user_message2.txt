The method isChangeEnabledByUid in the following class Lcom.android.server.compat.PlatformCompat has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isChangeEnabledByUid(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	String v4 = v3.getPackagesForUid(p2);
	if (v4 == 0) {
		if (v4.length != 0) {
			if (0 >= v4.length) {
				int v5 = UserHandle.getUserId(p2);
				ApplicationInfo v8 = PlatformCompat.getApplicationInfo(v4[0], v5);
				if (v8 != 0) {
					boolean v9 = this.mCompatConfig.willChangeBeEnabled(p1, v4[0]);
					boolean v6 = v9;
					if ((0 + 1) >= v4.length) {
						boolean v1 = (1 & v6);
						return v1;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isChangeEnabledByUid(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	String v4 = v3.getPackagesForUid(p2);
	if (v4 == 0) {
		if (v4.length != 0) {
			if (0 >= v4.length) {
				int v5 = UserHandle.getUserId(p2);
				boolean v6 = PlatformCompat.isChangeEnabledByPackageName(p1, v4[0], v5);
				if ((0 + 1) >= v4.length) {
					boolean v1 = (1 & v6);
					return v1;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isChangeEnabledByUid(long p1, int p2){
	boolean v1 = this.mPlatformCompat.isChangeEnabledByUid(p1, p2);
	return v1;
}

and the following sink code:
['String v4 = v3.getPackagesForUid(p2);\nApplicationInfo v8 = PlatformCompat.getApplicationInfo(v4[0], v5);\nboolean v9 = this.mCompatConfig.willChangeBeEnabled(p1, v4[0]);', 'String v4 = v3.getPackagesForUid(p2);\nboolean v6 = PlatformCompat.isChangeEnabledByPackageName(p1, v4[0], v5);', 'boolean v1 = this.mPlatformCompat.isChangeEnabledByUid(p1, p2);']

The method isChangeEnabledByUid has the following similar APIs:

- API Name: isChangeEnabledByPackageName(JLjava/lang/String;I)Z in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.9022951722145081, Code:
boolean v1 = this.mPlatformCompat.isChangeEnabledByPackageName(p1, p2, p3);
  - Similarity: 0.8845993280410767, Code:
ApplicationInfo v3 = PlatformCompat.getApplicationInfo(p2, p3);
boolean v4 = this.mCompatConfig.willChangeBeEnabled(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: reportChangeByUid(JI)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.8274040222167969, Code:
this.mPlatformCompat.reportChangeByUid(p1, p2);
return;
  - Access Control Level: SYS_OR_SIG

- API Name: getPackageScreenCompatMode(Ljava/lang/String;)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8206034302711487, Code:
ApplicationInfo v8 = v7.getApplicationInfo(p1, 0, 0);
int v9 = CompatModePackages.computeCompatModeLocked(v8);
int v6 = v9;
return v6;
  - Similarity: 0.8070857524871826, Code:
ApplicationInfo v10 = v8.getApplicationInfo(p1, 0, 0);
CompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked(v10);
boolean v13 = v12.alwaysSupportsScreen();
boolean v14 = v12.neverSupportsScreen();
boolean v15 = CompatModePackages.getPackageCompatModeEnabledLocked(v10);
int v11 = v15;
int v7 = v11;
return v7;
  - Access Control Level: SYS_OR_SIG

- API Name: isChangeEnabled(JLandroid/content/pm/ApplicationInfo;)Z in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.80821293592453, Code:
boolean v4 = this.mCompatConfig.isChangeEnabled(p1, p2);
if (p2 == 0) {
if (v3 == 0) {
this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, 1);
return v2;
  - Access Control Level: SYS_OR_SIG

- API Name: setFrontActivityScreenCompatMode(I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8060780167579651, Code:
CompatibilityInfo v10 = CompatModePackages.compatibilityInfoForPackageLocked(ActivityInfo.applicationInfo);
boolean v11 = v10.alwaysSupportsScreen();
if (v11 == 0) {
boolean v12 = v10.neverSupportsScreen();
  - Access Control Level: SYS_OR_SIG

