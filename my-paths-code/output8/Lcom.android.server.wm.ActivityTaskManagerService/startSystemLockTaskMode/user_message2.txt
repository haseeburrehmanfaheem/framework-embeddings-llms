The method startSystemLockTaskMode in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void startSystemLockTaskMode(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (0 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, 2, 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									WindowContainer v20 = TaskFragment.getParent();
									if (v20 != 0) {
										TaskFragment v21 = v20.asTaskFragment();
										if (v21 != 0) {
											TaskFragment v19 = TaskFragment;
											Task v22 = 0;
											Task v18 = v22;
											boolean v25 = Task.isAttached();
											if (v25 != 0) {
												TaskDisplayArea v26 = Task.getDisplayArea();
												boolean v27 = Task.isActivityTypeHome();
												if (v27 != 0) {
													boolean v28 = Task.returnsToHomeRootTask();
													if (v28 == 0) {
														StringBuilder v29 = new StringBuilder();
														StringBuilder v31 = v29.append("startSystemLockTaskMode");
														StringBuilder v32 = v29.append(" returnToHome");
														String v33 = v29.toString();
														v26.moveHomeRootTaskToFront(v33);
														boolean v35 = Task.isRootTask();
														if (v35 == 0) {
															Task v36 = v26.getFocusedRootTask();
															if (0 != 0) {
																WindowContainer v37 = Task.getParent();
																v37.positionChildAt(2147483647, Task, 1);
																v26.updateLastFocusedRootTask(v36, "startSystemLockTaskMode");
																if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
																	String v41 = String.valueOf(v6);
																	Object v42 = new Object(1);
																	ProtoLogImpl v44 = ProtoLogImpl.getSingleInstance();
																	v44.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_LOCKTASK, 295861935, 0, 0, v42);
																	if (v6 == 0) {
																		if (Task.mLockTaskAuth != 0) {
																			int v47 = RootWindowContainer.getChildCount();
																			if ((v47 + -1) < 0) {
																				WindowContainer v48 = RootWindowContainer.getChildAt((v47 + -1));
																				Task v49 = v48.getFocusedRootTask();
																				if (v49 == 0) {
																					if (((v47 + -1) + -1) < 0) {
																						WindowContainer v50 = RootWindowContainer.getChildAt(((v47 + -1) + -1));
																						Task v51 = v50.getFocusedRootTask();
																						if (v51 == 0) {
																							Task v46 = v51;
																							if (v46 == 0) {
																								WindowContainer$$ExternalSyntheticLambda1 v53 = new WindowContainer$$ExternalSyntheticLambda1();
																								Task v55 = WindowContainer.getTask(v53, 1);
																								Task v52 = v55;
																								if (v6 != v52) {
																									int v56 = Binder.getCallingUid();
																									long v57 = Binder.clearCallingIdentity();
																									[I v58 = new [I(1);
																									int v60 = RootWindowContainer.getChildCount();
																									if ((v60 + -1) < 0) {
																										WindowContainer v61 = RootWindowContainer.getChildAt((v60 + -1));
																										v61.removeRootTasksInWindowingModes(v58);
																										if (((v60 + -1) + -1) < 0) {
																											LockTaskController v63 = this.mLockTaskController;
																											if (Task.mLockTaskAuth != 0) {
																												if (1 != 0) {
																													Task.mLockTaskUid = v56;
																													if (Task.mLockTaskAuth != 1) {
																														if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
																															ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 1401295262, 0, 0, 0);
																															Object v66 = LocalServices.getService(StatusBarManagerInterna.class);
																															if (v66 == 0) {
																																v66.showScreenPinningRequest(Task.mTaskId);
																																Binder.restoreCallingIdentity(v57);
																																Binder.restoreCallingIdentity(v2);
																																return;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void startSystemLockTaskMode(int p1){
	long v2 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
	Task v5 = v6;
	if (v5 != 0) {
		TaskFragment v8 = TaskFragment.getRootTaskFragment();
		Task v9 = v8.asTask();
		Task v7 = v9;
		Task.moveToFront("startSystemLockTaskMode", 0);
		if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
			String v13 = String.valueOf(v5);
			Object v14 = new Object(1);
			ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 295861935, 0, 0, v14);
			if (v5 == 0) {
				if (Task.mLockTaskAuth != 0) {
					Task v16 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
					if (v16 == 0) {
						Task v17 = v16.getTopMostTask();
						if (v5 != v17) {
							int v18 = Binder.getCallingUid();
							long v19 = Binder.clearCallingIdentity();
							[I v20 = new [I(1);
							this.mRootWindowContainer.removeRootTasksInWindowingModes(v20);
							LockTaskController v22 = ActivityTaskManagerService.getLockTaskController();
							v22.startLockTaskMode(v5, 1, v18);
							Binder.restoreCallingIdentity(v19);
							this.sThreadPriorityBooster.reset();
							Binder.restoreCallingIdentity(v2);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void startSystemLockTaskMode(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	if (v4 != 0) {
		Task v5 = v4.getRootTask();
		v5.moveToFront("startSystemLockTaskMode");
		p0.startLockTaskMode(v4, 1);
		WindowManagerService.resetPriorityAfterLockedSection();
		Binder.restoreCallingIdentity(v2);
		return;
	}
}

and the following sink code:
['Task v13 = RootWindowContainer.getTask(v12);\nint v11 = Integer.valueOf(p1);\nPooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);', 'Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);\nv22.startLockTaskMode(v5, 1, v18);', 'Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);\np0.startLockTaskMode(v4, 1);']

The method startSystemLockTaskMode has the following similar APIs:

- API Name: removeTask(I)Z in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8553264737129211, Code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
WindowContainer.mTransitionController.requestCloseTransitionIfNeeded(v5);
v5.removeActivities("remove-task", 0);
LockTaskController v17 = this.mService.getLockTaskController();
v17.clearLockedTask(v5);
  - Access Control Level: SYS_OR_SIG

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8353245854377747, Code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
TaskSnapshot v13 = snapshotTask();
  - Access Control Level: SYS_OR_SIG

- API Name: setTaskResizeable(II)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8250616788864136, Code:
Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);
v2.setResizeMode(p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8135825395584106, Code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
TaskSnapshot v11 = this.mCache.getSnapshot(p1, Task.mUserId, 1, 1);
return v9;
  - Access Control Level: SYS_OR_SIG

- API Name: cancelTaskWindowTransition(I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8070396184921265, Code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
v4.cancelTaskWindowTransition();
  - Access Control Level: SYS_OR_SIG

