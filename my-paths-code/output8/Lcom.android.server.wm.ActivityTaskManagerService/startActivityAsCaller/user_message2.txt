The method startActivityAsCaller has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivityAsCaller(IApplicationThread p1, String p2, Intent p3, String p4, IBinder p5, String p6, int p7, int p8, ProfilerInfo p9, Bundle p10, boolean p11, int p12){
	if (p11 == 0) {
		boolean v7 = "android".equals(this.packageName);
		if (v7 != 0) {
			ClassLoader v8 = Objec.class.getClassLoader();
			String v9 = this.mActivityComponent.getClassName();
			Class v10 = v8.loadClass(v9);
			boolean v11 = ResolverActivit.class.isAssignableFrom(v10);
			boolean v6 = v11;
			if (p12 != -10000) {
				int v15 = UserHandle.getUserId(WindowProcessController.mUid);
				ActivityStartController v16 = p0.getActivityStartController();
				ActivityStarter v18 = this.mFactory.obtain();
				ActivityStarter$Request.intent = p3;
				ActivityStarter v19 = ActivityStarter;
				ActivityStarter$Request.reason = "startActivityAsCaller";
				ActivityStarter v20 = ActivityStarter;
				ActivityStarter v17 = v20;
				ActivityStarter v21 = v17.setCallingUid(ActivityRecord.launchedFromUid);
				ActivityStarter v22 = v21.setCallingPackage(ActivityRecord.launchedFromPackage);
				ActivityStarter v23 = v22.setCallingFeatureId(ActivityRecord.launchedFromFeatureId);
				ActivityStarter v24 = v23.setResolvedType(p4);
				ActivityStarter v25 = v24.setResultTo(p5);
				ActivityStarter v26 = v25.setResultWho(p6);
				ActivityStarter v27 = v26.setRequestCode(p7);
				ActivityStarter v28 = v27.setStartFlags(p8);
				if (p10 == 0) {
					SafeActivityOptions v31 = new SafeActivityOptions(v32);
					ActivityOptions v32 = ActivityOptions.fromBundle(p10);
					SafeActivityOptions v30 = v31;
					ActivityStarter$Request.activityOptions = v30;
					ActivityStarter v34 = ActivityStarter;
					ActivityStarter v29 = v34;
					ActivityStarter v35 = v29.setUserId(p12);
					ActivityStarter v36 = v35.setIgnoreTargetSecurity(p11);
					if (v6 == 0) {
						ActivityStarter v37 = v36.setFilterCallingUid(ActivityRecord.launchedFromUid);
						ActivityStarter v38 = v37.setAllowBackgroundActivityStart(1);
						this.mController.onExecutionStarted();
						if (ActivityStarter$Request.intent == 0) {
							this.sThreadPriorityBooster.boost();
							if (ActivityStarter$Request.resultTo != 0) {
								Object v45 = ActivityRecord$Token.mActivityRef.get();
								if (v45 == 0) {
									Task v46 = v45.getRootTask();
									if (v46 != 0) {
										ActivityRecord v44 = 0;
										if (ActivityStarter$Request.realCallingUid != -1) {
											ActivityMetricsLogger v47 = this.mActivityMetricsLogger;
											if (0 != 0) {
												ActivityMetricsLogger$LaunchingState v56 = new ActivityMetricsLogger$LaunchingState();
												ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v56, v49);
												ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v49);
												ActivityMetricsLogger$LaunchingState v48 = v56;
												this.sThreadPriorityBooster.reset();
												if (ActivityStarter$Request.activityInfo != 0) {
													if (this.realCallingPid != 0) {
														int v63 = Binder.getCallingPid();
														this.realCallingPid = v63;
														if (this.realCallingUid != -1) {
															int v64 = Binder.getCallingUid();
															this.realCallingUid = v64;
															if (this.callingUid < 0) {
																this.callingPid = -1;
																if (this.caller == 0) {
																	Intent v65 = new Intent(this.intent);
																	this.ephemeralIntent = v65;
																	Intent v67 = new Intent(this.intent);
																	this.intent = v67;
																	ComponentName v69 = v67.getComponent();
																	if (v69 == 0) {
																		int v70 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																		ResolveInfo v71 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v70);
																		this.resolveInfo = v71;
																		if (v71 != 0) {
																			UserInfo v72 = this.mSupervisor.getUserInfo(this.userId);
																			if (v72 == 0) {
																				boolean v73 = v72.isManagedProfile();
																				if (v73 == 0) {
																					ActivityInfo v74 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																					this.activityInfo = v74;
																					if (v74 == 0) {
																						if (ActivityStarter$Request.intent == 0) {
																							this.sThreadPriorityBooster.boost();
																							if (ActivityStarter$Request.globalConfig == 0) {
																								int v78 = RootWindowContainer.getChildCount();
																								if ((v78 + -1) < 0) {
																									WindowContainer v79 = RootWindowContainer.getChildAt((v78 + -1));
																									Task v80 = v79.getFocusedRootTask();
																									if (v80 == 0) {
																										if (((v78 + -1) + -1) < 0) {
																											WindowContainer v81 = RootWindowContainer.getChildAt(((v78 + -1) + -1));
																											Task v82 = v81.getFocusedRootTask();
																											if (v82 == 0) {
																												Task v77 = v82;
																												if (v77 == 0) {
																													if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																														long v83 = Binder.clearCallingIdentity();
																														int v84 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																														if (v84 == 0) {
																															this.sThreadPriorityBooster.reset();
																															this.mController.onExecutionComplete(ActivityStarter);
																															int v39 = v84;
																															return v39;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startActivityAsCaller(IApplicationThread p1, String p2, Intent p3, String p4, IBinder p5, String p6, int p7, int p8, ProfilerInfo p9, Bundle p10, boolean p11, int p12){
	if (p11 == 0) {
		boolean v7 = "android".equals(this.packageName);
		if (v7 != 0) {
			ClassLoader v8 = Objec.class.getClassLoader();
			String v9 = this.mActivityComponent.getClassName();
			Class v10 = v8.loadClass(v9);
			boolean v11 = ResolverActivit.class.isAssignableFrom(v10);
			boolean v6 = v11;
			this.sThreadPriorityBooster.reset();
			if (p12 != -10000) {
				int v14 = UserHandle.getUserId(WindowProcessController.mUid);
				ActivityStartController v15 = this.mActivityStartController;
				ActivityStarter v17 = this.mFactory.obtain();
				ActivityStarter v18 = v17.setIntent(p3);
				ActivityStarter v19 = v18.setReason("startActivityAsCaller");
				ActivityStarter v16 = v19;
				ActivityStarter$Request.callingUid = ActivityRecord.launchedFromUid;
				ActivityStarter v20 = ActivityStarter;
				ActivityStarter$Request.callingPackage = ActivityRecord.launchedFromPackage;
				ActivityStarter v21 = ActivityStarter;
				ActivityStarter$Request.callingFeatureId = ActivityRecord.launchedFromFeatureId;
				ActivityStarter v22 = ActivityStarter;
				ActivityStarter$Request.resolvedType = p4;
				ActivityStarter v23 = ActivityStarter;
				ActivityStarter$Request.resultTo = p5;
				ActivityStarter v24 = ActivityStarter;
				ActivityStarter$Request.resultWho = p6;
				ActivityStarter v25 = ActivityStarter;
				ActivityStarter$Request.requestCode = p7;
				ActivityStarter v26 = ActivityStarter;
				ActivityStarter$Request.startFlags = p8;
				ActivityStarter v27 = ActivityStarter;
				SafeActivityOptions v29 = SafeActivityOptions.fromBundle(p10);
				ActivityStarter v30 = ActivityStarter.setActivityOptions(v29);
				ActivityStarter v28 = v30;
				ActivityStarter$Request.userId = p12;
				ActivityStarter v31 = ActivityStarter;
				ActivityStarter$Request.ignoreTargetSecurity = p11;
				ActivityStarter v32 = ActivityStarter;
				if (v6 == 0) {
					ActivityStarter$Request.filterCallingUid = ActivityRecord.launchedFromUid;
					ActivityStarter v33 = ActivityStarter;
					ActivityStarter$Request.allowBackgroundActivityStart = 1;
					ActivityStarter v34 = ActivityStarter;
					ActivityStarter.onExecutionStarted();
					if (ActivityStarter$Request.intent == 0) {
						WindowManagerService.boostPriorityForLockedSection();
						ActivityRecord v38 = ActivityRecord.forTokenLocked(ActivityStarter$Request.resultTo);
						if (ActivityStarter$Request.realCallingUid != -1) {
							int v39 = Binder.getCallingUid();
							ActivityMetricsLogger v40 = this.mSupervisor.getActivityMetricsLogger();
							ActivityMetricsLogger$LaunchingState v41 = v40.notifyActivityLaunching(ActivityStarter$Request.intent, v38, ActivityStarter$Request.realCallingUid);
							WindowManagerService.resetPriorityAfterLockedSection();
							if (ActivityStarter$Request.activityInfo != 0) {
								if (ActivityStarter$Request.intent == 0) {
									WindowManagerService.boostPriorityForLockedSection();
									if (ActivityStarter$Request.globalConfig == 0) {
										Task v44 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
										if (v44 == 0) {
											Task.mConfigWillChange = 1;
											if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
												long v45 = Binder.clearCallingIdentity();
												int v46 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
												if (v46 == 0) {
													WindowManagerService.resetPriorityAfterLockedSection();
													ActivityStarter.onExecutionComplete();
													int v35 = v46;
													return v35;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startActivityAsCaller(IApplicationThread p1, String p2, Intent p3, String p4, IBinder p5, String p6, int p7, int p8, ProfilerInfo p9, Bundle p10, boolean p11, int p12){
	if (p11 == 0) {
		boolean v6 = v2.isResolverOrChildActivity();
		WindowManagerService.resetPriorityAfterLockedSection();
		if (p12 != -10000) {
			int v8 = UserHandle.getUserId(WindowProcessController.mUid);
			ActivityStartController v9 = p0.getActivityStartController();
			ActivityStarter v10 = v9.obtainStarter(p3, "startActivityAsCaller");
			ActivityStarter v11 = v10.setCallingUid(ActivityRecord.launchedFromUid);
			ActivityStarter v12 = v11.setCallingPackage(ActivityRecord.launchedFromPackage);
			ActivityStarter v13 = v12.setCallingFeatureId(ActivityRecord.launchedFromFeatureId);
			ActivityStarter v14 = v13.setResolvedType(p4);
			ActivityStarter v15 = v14.setResultTo(p5);
			ActivityStarter v16 = v15.setResultWho(p6);
			ActivityStarter v17 = v16.setRequestCode(p7);
			ActivityStarter v18 = v17.setStartFlags(p8);
			ActivityStarter v19 = v18.setActivityOptions(p10);
			ActivityStarter v20 = v19.setUserId(p12);
			ActivityStarter v21 = v20.setIgnoreTargetSecurity(p11);
			if (v6 == 0) {
				ActivityStarter v22 = v21.setFilterCallingUid(ActivityRecord.launchedFromUid);
				ActivityStarter v23 = v22.setAllowBackgroundActivityStart(1);
				int v24 = v23.execute();
				return v24;
			}
		}
	}
}

and the following sink code:
['ActivityStarter v17 = this.mFactory.obtain();\nActivityStarter$Request.intent = p3;\nActivityStarter v21 = v20.setCallingUid(ActivityRecord.launchedFromUid);\nActivityStarter v22 = v21.setCallingPackage(ActivityRecord.launchedFromPackage);\nActivityStarter v23 = v22.setResolvedType(p4);\nActivityStarter v24 = v23.setResultTo(p5);\nActivityStarter v25 = v24.setResultWho(p6);\nActivityStarter v26 = v25.setRequestCode(p7);\nActivityStarter v27 = v26.setStartFlags(p8);', 'SafeActivityOptions v29 = new SafeActivityOptions(v32);\nActivityOptions v32 = ActivityOptions.fromBundle(p10);\nActivityStarter$Request.activityOptions = v30;', 'int v15 = UserHandle.getUserId(WindowProcessController.mUid);\nActivityStartController v16 = p0.getActivityStartController();\nActivityStarter v17 = v16.obtainStarter(p3, "startActivityAsCaller");']

The method startActivityAsCaller has the following similar APIs:

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I with Similarity Score: 0.8777862787246704
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityStarter v47 = this.mFactory.obtain();
ActivityStarter v48 = v47.setIntent(p4);
ActivityStarter v49 = v48.setReason("startActivityAsUser");
ActivityStarter$Request.caller = p1;
ActivityStarter$Request.callingPackage = p2;
ActivityStarter$Request.callingFeatureId = p3;
ActivityStarter$Request.resolvedType = p5;
ActivityStarter$Request.resultTo = p6;
ActivityStarter$Request.resultWho = p7;
ActivityStarter$Request.requestCode = p8;
ActivityStarter$Request.startFlags = p9;
ActivityStarter$Request.profilerInfo = p10;
ActivityStarter$Request.activityOptions = v2;
ActivityStarter$Request.userId = v43;

- API Name: startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I with Similarity Score: 0.8562213778495789
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityStarter v8 = v7.setCaller(p1);
ActivityStarter v9 = v8.setCallingPackage(p2);
ActivityStarter v10 = v9.setCallingFeatureId(p3);
ActivityStarter v11 = v10.setResolvedType(p5);

