The method getAssistContextExtras in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	this.sThreadPriorityBooster.boost();
	Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v6 = v7;
	if (v6 == 0) {
		ActivityRecord v9 = TaskFragment.getTopNonFinishingActivity(1);
		ActivityRecord v8 = v9;
		if (v8 != 0) {
			boolean v11 = ActivityRecord.hasProcess();
			if (v11 == 0) {
				boolean v12 = this.app.hasThread();
				if (v12 == 0) {
					boolean v10 = 1;
					if (v10 != 0) {
						if (1 == 0) {
							if (0 == 0) {
								if (0 != 0) {
									Object v14 = ActivityRecord$Token.mActivityRef.get();
									if (v14 == 0) {
										Task v15 = v14.getRootTask();
										if (v15 != 0) {
											ActivityRecord v13 = 0;
											if (v8 == v13) {
												Bundle v16 = new Bundle();
												if (0 == 0) {
													v16.putAll(0);
													v16.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
													v16.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
													ActivityTaskManagerService$PendingAssistExtras v21 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,v8,v16,0,0,0,0,v1);
													boolean v23 = v8.isActivityTypeHome();
													ActivityTaskManagerService$PendingAssistExtras.isHome = v23;
													if (1 == 0) {
														this.mViSessionId = (this.mViSessionId + 1);
														IApplicationThread v24 = this.mThread;
														v24.requestAssistContextExtras(WindowToken.token, v21, p1, this.mViSessionId, 0);
														boolean v26 = this.mPendingAssistExtras.add(v21);
														boolean v27 = this.mUiHandler.postDelayed(v21, 500);
														this.sThreadPriorityBooster.reset();
														ActivityTaskManagerService$PendingAssistExtras v2 = v21;
														if (v2 != 0) {
															if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																v2.wait();
																if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																	p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
																	boolean v35 = this.mPendingAssistExtras.remove(v2);
																	this.mUiHandler.removeCallbacks(v2);
																	return ActivityTaskManagerService$PendingAssistExtras.extras;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	WindowManagerService.boostPriorityForLockedSection();
	Task v5 = ActivityTaskManagerService.getTopDisplayFocusedRootTask();
	if (v5 == 0) {
		ActivityRecord v6 = v5.getTopNonFinishingActivity();
		if (v6 != 0) {
			boolean v7 = v6.attachedToProcess();
			if (v7 != 0) {
				if (1 == 0) {
					if (0 == 0) {
						ActivityRecord v8 = ActivityRecord.forTokenLocked(0);
						if (v6 == v8) {
							Bundle v9 = new Bundle();
							if (0 == 0) {
								v9.putAll(0);
								v9.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
								v9.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
								ActivityTaskManagerService$PendingAssistExtras v14 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,v6,v9,0,0,0,0,v1);
								boolean v16 = v6.isActivityTypeHome();
								ActivityTaskManagerService$PendingAssistExtras.isHome = v16;
								if (1 == 0) {
									this.mViSessionId = (this.mViSessionId + 1);
									IApplicationThread v17 = ActivityRecord.app.getThread();
									v17.requestAssistContextExtras(WindowToken.token, v14, p1, this.mViSessionId, 0);
									boolean v19 = this.mPendingAssistExtras.add(v14);
									boolean v20 = this.mUiHandler.postDelayed(v14, 500);
									WindowManagerService.resetPriorityAfterLockedSection();
									ActivityTaskManagerService$PendingAssistExtras v2 = v14;
									if (v2 != 0) {
										if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
											v2.wait();
											if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
												this.sThreadPriorityBooster.boost();
												if (ActivityTaskManagerService$PendingAssistExtras.result == 0) {
													ActivityTaskManagerService$PendingAssistExtras.extras.putBundle("android.intent.extra.ASSIST_CONTEXT", ActivityTaskManagerService$PendingAssistExtras.result);
													if (ActivityTaskManagerService$PendingAssistExtras.hint == 0) {
														ActivityTaskManagerService$PendingAssistExtras.extras.putBoolean(ActivityTaskManagerService$PendingAssistExtras.hint, 1);
														boolean v28 = this.mPendingAssistExtras.remove(v2);
														this.mUiHandler.removeCallbacks(v2);
														this.sThreadPriorityBooster.reset();
														return ActivityTaskManagerService$PendingAssistExtras.extras;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	ActivityTaskManagerService$PendingAssistExtras v2 = p0.enqueueAssistContext(p1, 0, 0, 0, 0, 0, 1, 1, v1, 0, 500, 0);
	if (v2 != 0) {
		if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
			v2.wait();
			if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
				WindowManagerService.boostPriorityForLockedSection();
				p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
				boolean v6 = this.mPendingAssistExtras.remove(v2);
				this.mUiHandler.removeCallbacks(v2);
				WindowManagerService.resetPriorityAfterLockedSection();
				return ActivityTaskManagerService$PendingAssistExtras.extras;
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nBundle v9 = new Bundle();\nv9.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);\nv9.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);\nActivityTaskManagerService$PendingAssistExtras v14 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,v6,v9,0,0,0,0,v1);\nIApplicationThread v17 = ActivityRecord.app.getThread();\nv17.requestAssistContextExtras(WindowToken.token, v14, p1, this.mViSessionId, 0);\nreturn ActivityTaskManagerService$PendingAssistExtras.extras;', 'ActivityTaskManagerService$PendingAssistExtras v2 = p0.enqueueAssistContext(p1, 0, 0, 0, 0, 0, 1, 1, v1, 0, 500, 0);\nv2.wait();\np0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);\nreturn ActivityTaskManagerService$PendingAssistExtras.extras;']

The method getAssistContextExtras has the following similar APIs:

- API Name: startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7919580936431885, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
ActivityStarter$Request.intent = p5;
ActivityStarter v11 = v7.setCallingUid(p4);
ActivityStarter v12 = v11.setCallingPackage(p1);
ActivityStarter v13 = v12.setCallingFeatureId(p2);
ActivityStarter v14 = v13.setResolvedType(p6);
int v14 = v13.execute();
  - Access Control Level: SYS_OR_SIG

- API Name: startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.776552140712738, Code:
int v1 = UserHandle.getCallingUserId();
SafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);
ActivityOptions v5 = v4.getOriginalOptions();
boolean v6 = v5.getTransientLaunch();
int v7 = Binder.getCallingUid();
boolean v8 = ActivityTaskManagerService.isCallerRecents(v7);
long v9 = Binder.clearCallingIdentity();
WindowManagerService.boostPriorityForLockedSection();
Trace.traceBegin(32, "startExistingRecents");
ActivityOptions v12 = v4.getOriginalOptions();
boolean v13 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v12);
  - Access Control Level: SYS_OR_SIG

- API Name: getStatuses(Ljava/lang/String;ILjava/lang/String;)Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.people.PeopleService$1 with the following sink code entries:
  - Similarity: 0.7706487774848938, Code:
IActivityManager v3 = ActivityManager.getService();
int v4 = Binder.getCallingPid();
int v5 = Binder.getCallingUid();
int v6 = v3.handleIncomingUser(v4, v5, p2, 1, 1, "", 0);
ParceledListSlice v16 = new ParceledListSlice(v18);
return v16;
  - Access Control Level: SYS_OR_SIG

- API Name: getTvInteractiveAppServiceList(I)Ljava/util/List; in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.767835795879364, Code:
int v5 = ActivityManager.handleIncomingUser(v1, v2, p1, 0, 0, "getTvInteractiveAppServiceList", 0);
TvInteractiveAppManagerService$UserState v11 = TvInteractiveAppManagerService.getOrCreateUserStateLocked(p1);
ArrayList v18 = new ArrayList();
Iterator v20 = v17.iterator();
return v55;
  - Access Control Level: NONE

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;IZLandroid/os/IBinder;Landroid/os/Bundle;)V in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.7644636034965515, Code:
Intent v38 = new Intent();
Intent v26 = v26.setComponent(p4);
ActivityTaskManagerInternal v27 = this.mInjector.getActivityTaskManagerInternal();
int v28 = v27.startActivityAsUser(p1, p2, p3, v16, p7, 0, v24, p5);
  - Access Control Level: SYS_OR_SIG

