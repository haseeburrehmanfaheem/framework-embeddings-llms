This is path 1 for the API with depth 2:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (1 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, 2, 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 == 0) {
									int v19 = this.mChildren.size();
									if ((v19 - 1) < 0) {
										Object v20 = this.mChildren.get((v19 - 1));
										boolean v21 = v20.isVisible();
										int v22 = this.mChildren.size();
										if (((v19 - 1) + -1) < 0) {
											Object v23 = this.mChildren.get(((v19 - 1) + -1));
											boolean v24 = v23.isVisible();
											if (v24 == 0) {
												if ((((v19 - 1) + -1) + -1) < 0) {
													Object v25 = this.mChildren.get((((v19 - 1) + -1) + -1));
													boolean v26 = v25.isVisible();
													if (v26 == 0) {
														boolean v18 = 1;
														if (v26 == 0) {
															if (((((v19 - 1) + -1) + -1) + -1) < 0) {
																Object v27 = this.mChildren.get(((((v19 - 1) + -1) + -1) + -1));
																boolean v28 = v27.isVisible();
																int v29 = this.mChildren.size();
																if ((((((v19 - 1) + -1) + -1) + -1) + -1) < 0) {
																	Object v30 = this.mChildren.get((((((v19 - 1) + -1) + -1) + -1) + -1));
																	boolean v31 = v30.isVisible();
																	if (v31 == 0) {
																		if (((((((v19 - 1) + -1) + -1) + -1) + -1) + -1) < 0) {
																			Object v32 = this.mChildren.get(((((((v19 - 1) + -1) + -1) + -1) + -1) + -1));
																			boolean v33 = v32.isVisible();
																			if (v33 == 0) {
																				return 1;
																				if (v33 == 0) {
																					return 1;
																					if (isVisible() != 0) {
																						if (0 == 0) {
																							ActivityRecord v36 = v6.getTopMostActivity();
																							boolean v37 = v6.isActivityTypeStandardOrUndefined();
																							if (v37 != 0) {
																								boolean v38 = v6.isActivityTypeAssistant();
																								if (v38 != 0) {
																									if (v36 == 0) {
																										boolean v39 = v36.shouldUseAppThemeSnapshot();
																										if (v39 == 0) {
																											int v35 = 1;
																											if (v35 == 0) {
																												if (v35 == 1) {
																													ActivityRecord v41 = v6.getTopMostActivity();
																													if (v41 != 0) {
																														WindowState v42 = v41.findMainWindow();
																														if (v42 != 0) {
																															ActivityManager$TaskDescription v43 = v6.getTaskDescription();
																															int v44 = v43.getBackgroundColor();
																															int v45 = ColorUtils.setAlphaComponent(v44, 255);
																															WindowManager$LayoutParams v46 = v42.getAttrs();
																															Rect v47 = v6.getBounds();
																															InsetsState v48 = v42.getInsetsStateWithVisibilityOverride();
																															Rect v49 = v42.getFrame();
																															Rect v50 = TaskSnapshotController.getSystemBarInsets(v49, v48);
																															TaskSnapshotController$SystemBarBackgroundPainter v51 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v52,this.mHighResTaskSnapshotScale,v48);
																															ActivityManager$TaskDescription v52 = v6.getTaskDescription();
																															int v54 = v47.width();
																															int v55 = v47.height();
																															RenderNode v56 = RenderNode.create("TaskSnapshotController", 0);
																															boolean v57 = v56.setLeftTopRightBottom(0, 0, (v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															boolean v58 = v56.setClipToBounds(0);
																															RecordingCanvas v59 = v56.start((v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															v59.drawColor(v45);
																															v51.setInsets(v50);
																															v51.drawDecors(v59);
																															v56.end(v59);
																															Bitmap v64 = ThreadedRenderer.createHardwareBitmap(v56, (v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															if (v64 != 0) {
																																TaskSnapshot v40 = 0;
																																TaskSnapshot v34 = snapshotTask();
																																Binder.restoreCallingIdentity(v2);
																																return 0;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
	Task v5 = v6;
	if (v5 == 0) {
		int v8 = this.mChildren.size();
		if ((v8 - 1) < 0) {
			Object v9 = this.mChildren.get((v8 - 1));
			boolean v10 = v9.isVisible();
			if (v10 == 0) {
				if (((v8 - 1) + -1) < 0) {
					Object v11 = this.mChildren.get(((v8 - 1) + -1));
					boolean v12 = v11.isVisible();
					if (v12 == 0) {
						boolean v7 = 1;
						if (v7 != 0) {
							if (0 == 0) {
								int v14 = TaskSnapshotController.getSnapshotMode(v5);
								if (v14 == 0) {
									if (v14 == 1) {
										if (v14 == 2) {
											TaskSnapshot v13 = snapshotTask();
											this.sThreadPriorityBooster.reset();
											Binder.restoreCallingIdentity(v2);
											return 0;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	if (v4 == 0) {
		boolean v5 = v4.isVisible();
		if (v5 != 0) {
			TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);
			WindowManagerService.resetPriorityAfterLockedSection();
			Binder.restoreCallingIdentity(v2);
			return 0;
		}
	}
}
