The method startAssistantActivity in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public int startAssistantActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, Bundle p7, int p8){
	int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
	int v3 = v4;
	long v5 = Binder.clearCallingIdentity();
	ActivityStartController v6 = this.mActivityStartController;
	ActivityStarter v8 = this.mFactory.obtain();
	ActivityStarter$Request.intent = p5;
	ActivityStarter v9 = ActivityStarter;
	ActivityStarter$Request.reason = "startAssistantActivity";
	ActivityStarter v10 = ActivityStarter;
	ActivityStarter v7 = v10;
	ActivityStarter v11 = v7.setCallingUid(p4);
	ActivityStarter v12 = v11.setCallingPackage(p1);
	ActivityStarter v13 = v12.setCallingFeatureId(p2);
	ActivityStarter v14 = v13.setResolvedType(p6);
	if (p7 == 0) {
		SafeActivityOptions v17 = new SafeActivityOptions(v18);
		ActivityOptions v18 = ActivityOptions.fromBundle(p7);
		SafeActivityOptions v16 = v17;
		ActivityStarter$Request.activityOptions = v16;
		ActivityStarter v20 = ActivityStarter;
		ActivityStarter v15 = v20;
		ActivityStarter v21 = v15.setUserId(v3);
		ActivityStarter v22 = v21.setAllowBackgroundActivityStart(1);
		this.mController.onExecutionStarted();
		if (ActivityStarter$Request.intent == 0) {
			this.sThreadPriorityBooster.boost();
			if (ActivityStarter$Request.resultTo != 0) {
				Object v29 = ActivityRecord$Token.mActivityRef.get();
				if (v29 == 0) {
					Task v30 = v29.getRootTask();
					if (v30 != 0) {
						ActivityRecord v28 = 0;
						if (ActivityStarter$Request.realCallingUid != -1) {
							ActivityMetricsLogger v31 = this.mActivityMetricsLogger;
							if (0 != 0) {
								ActivityMetricsLogger$LaunchingState v40 = new ActivityMetricsLogger$LaunchingState();
								ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v40, v33);
								ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v33);
								ActivityMetricsLogger$LaunchingState v32 = v40;
								this.sThreadPriorityBooster.reset();
								if (ActivityStarter$Request.activityInfo != 0) {
									if (this.realCallingPid != 0) {
										int v47 = Binder.getCallingPid();
										this.realCallingPid = v47;
										if (this.realCallingUid != -1) {
											int v48 = Binder.getCallingUid();
											this.realCallingUid = v48;
											if (this.callingUid < 0) {
												this.callingPid = -1;
												if (this.caller == 0) {
													Intent v49 = new Intent(this.intent);
													this.ephemeralIntent = v49;
													Intent v51 = new Intent(this.intent);
													this.intent = v51;
													ComponentName v53 = v51.getComponent();
													if (v53 == 0) {
														int v54 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
														ResolveInfo v55 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v54);
														this.resolveInfo = v55;
														if (v55 != 0) {
															UserInfo v56 = this.mSupervisor.getUserInfo(this.userId);
															if (v56 == 0) {
																boolean v57 = v56.isManagedProfile();
																if (v57 == 0) {
																	ActivityInfo v58 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																	this.activityInfo = v58;
																	if (v58 == 0) {
																		if (ActivityStarter$Request.intent == 0) {
																			this.sThreadPriorityBooster.boost();
																			if (ActivityStarter$Request.globalConfig == 0) {
																				int v62 = RootWindowContainer.getChildCount();
																				if ((v62 + -1) < 0) {
																					WindowContainer v63 = RootWindowContainer.getChildAt((v62 + -1));
																					Task v64 = v63.getFocusedRootTask();
																					if (v64 == 0) {
																						if (((v62 + -1) + -1) < 0) {
																							WindowContainer v65 = RootWindowContainer.getChildAt(((v62 + -1) + -1));
																							Task v66 = v65.getFocusedRootTask();
																							if (v66 == 0) {
																								Task v61 = v66;
																								if (v61 == 0) {
																									if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																										long v67 = Binder.clearCallingIdentity();
																										int v68 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																										if (v68 == 0) {
																											this.sThreadPriorityBooster.reset();
																											this.mController.onExecutionComplete(ActivityStarter);
																											int v23 = v68;
																											Binder.restoreCallingIdentity(v5);
																											return v23;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startAssistantActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, Bundle p7, int p8){
	int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
	int v3 = v4;
	long v5 = Binder.clearCallingIdentity();
	ActivityStartController v6 = this.mActivityStartController;
	ActivityStarter v8 = this.mFactory.obtain();
	ActivityStarter v9 = v8.setIntent(p5);
	ActivityStarter v10 = v9.setReason("startAssistantActivity");
	ActivityStarter v7 = v10;
	ActivityStarter$Request.callingUid = p4;
	ActivityStarter v11 = ActivityStarter;
	ActivityStarter$Request.callingPackage = p1;
	ActivityStarter v12 = ActivityStarter;
	ActivityStarter$Request.callingFeatureId = p2;
	ActivityStarter v13 = ActivityStarter;
	ActivityStarter$Request.resolvedType = p6;
	ActivityStarter v14 = ActivityStarter;
	SafeActivityOptions v16 = SafeActivityOptions.fromBundle(p7);
	ActivityStarter v17 = ActivityStarter.setActivityOptions(v16);
	ActivityStarter v15 = v17;
	ActivityStarter$Request.userId = v3;
	ActivityStarter v18 = ActivityStarter;
	ActivityStarter$Request.allowBackgroundActivityStart = 1;
	ActivityStarter v19 = ActivityStarter;
	ActivityStarter.onExecutionStarted();
	if (ActivityStarter$Request.intent == 0) {
		WindowManagerService.boostPriorityForLockedSection();
		ActivityRecord v23 = ActivityRecord.forTokenLocked(ActivityStarter$Request.resultTo);
		if (ActivityStarter$Request.realCallingUid != -1) {
			int v24 = Binder.getCallingUid();
			ActivityMetricsLogger v25 = this.mSupervisor.getActivityMetricsLogger();
			ActivityMetricsLogger$LaunchingState v26 = v25.notifyActivityLaunching(ActivityStarter$Request.intent, v23, ActivityStarter$Request.realCallingUid);
			WindowManagerService.resetPriorityAfterLockedSection();
			if (ActivityStarter$Request.activityInfo != 0) {
				if (ActivityStarter$Request.intent == 0) {
					WindowManagerService.boostPriorityForLockedSection();
					if (ActivityStarter$Request.globalConfig == 0) {
						Task v29 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
						if (v29 == 0) {
							Task.mConfigWillChange = 1;
							if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
								long v30 = Binder.clearCallingIdentity();
								int v31 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
								if (v31 == 0) {
									WindowManagerService.resetPriorityAfterLockedSection();
									ActivityStarter.onExecutionComplete();
									int v20 = v31;
									Binder.restoreCallingIdentity(v5);
									return v20;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startAssistantActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, Bundle p7, int p8){
	int v3 = p0.handleIncomingUser(p3, p4, p8, "startAssistantActivity");
	long v4 = Binder.clearCallingIdentity();
	ActivityStartController v5 = p0.getActivityStartController();
	ActivityStarter v6 = v5.obtainStarter(p5, "startAssistantActivity");
	ActivityStarter v7 = v6.setCallingUid(p4);
	ActivityStarter v8 = v7.setCallingPackage(p1);
	ActivityStarter v9 = v8.setCallingFeatureId(p2);
	ActivityStarter v10 = v9.setResolvedType(p6);
	ActivityStarter v11 = v10.setActivityOptions(p7);
	ActivityStarter v12 = v11.setUserId(v3);
	ActivityStarter v13 = v12.setAllowBackgroundActivityStart(1);
	int v14 = v13.execute();
	Binder.restoreCallingIdentity(v4);
	return v14;
}

and the following sink code:
['int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);\nActivityStarter$Request.intent = p5;\nActivityStarter v11 = v7.setCallingUid(p4);\nActivityStarter v12 = v11.setCallingPackage(p1);\nActivityStarter v13 = v12.setCallingFeatureId(p2);\nActivityStarter v14 = v13.setResolvedType(p6);\nint v14 = v13.execute();']

The method startAssistantActivity has the following similar APIs:

- API Name: startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8944963216781616, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v7 = this.mFactory.obtain();
ActivityStarter$Request.intent = p5;
ActivityStarter v10 = v6.setCallingUid(p4);
ActivityStarter v11 = v10.setCallingPackage(p1);
ActivityStarter v12 = v11.setCallingFeatureId(p2);
ActivityStarter v13 = v12.setResolvedType(p6);
ActivityStarter v14 = v13.setVoiceSession(p7);
ActivityStarter v15 = v14.setVoiceInteractor(p8);
ActivityStarter v16 = v15.setStartFlags(p9);
ActivityStarter v17 = v16.setProfilerInfo(p10);
SafeActivityOptions v20 = new SafeActivityOptions(v21);
ActivityOptions v21 = ActivityOptions.fromBundle(p11);
ActivityStarter$Request.activityOptions = v19;
ActivityStarter v24 = v18.setUserId(v3);
ActivityStarter v25 = v24.setAllowBackgroundActivityStart(1);
  - Similarity: 0.8632997274398804, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v8 = v7.setIntent(p5);
ActivityStarter v9 = v8.setReason("startVoiceActivity");
ActivityStarter$Request.callingUid = p4;
ActivityStarter$Request.callingPackage = p1;
ActivityStarter$Request.callingFeatureId = p2;
ActivityStarter$Request.resolvedType = p6;
ActivityStarter$Request.voiceSession = p7;
ActivityStarter$Request.voiceInteractor = p8;
ActivityStarter$Request.startFlags = p9;
ActivityStarter$Request.profilerInfo = p10;
SafeActivityOptions v19 = SafeActivityOptions.fromBundle(p11);
ActivityStarter v20 = ActivityStarter.setActivityOptions(v19);
  - Similarity: 0.8482614159584045, Code:
int v3 = p0.handleIncomingUser(p3, p4, p12, "startVoiceActivity");
ActivityStartController v4 = p0.getActivityStartController();
ActivityStarter v5 = v4.obtainStarter(p5, "startVoiceActivity");
ActivityStarter v6 = v5.setCallingUid(p4);
ActivityStarter v7 = v6.setCallingPackage(p1);
ActivityStarter v8 = v7.setCallingFeatureId(p2);
ActivityStarter v9 = v8.setResolvedType(p6);
ActivityStarter v10 = v9.setVoiceSession(p7);
ActivityStarter v11 = v10.setVoiceInteractor(p8);
ActivityStarter v12 = v11.setStartFlags(p9);
ActivityStarter v13 = v12.setProfilerInfo(p10);
ActivityStarter v14 = v13.setActivityOptions(p11);
ActivityStarter v15 = v14.setUserId(v3);
ActivityStarter v16 = v15.setAllowBackgroundActivityStart(1);
  - Access Control Level: SYS_OR_SIG

- API Name: startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.823258101940155, Code:
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
ActivityStartController v11 = this.mActivityStartController;
SafeActivityOptions v13 = new SafeActivityOptions(v14);
ActivityOptions v14 = ActivityOptions.fromBundle(p7);
int v16 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);
  - Similarity: 0.7923540472984314, Code:
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
ActivityStartController v11 = this.mActivityStartController;
SafeActivityOptions v13 = new SafeActivityOptions(v14);
int v18 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: startActivityFromGameSession(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;II)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8054060339927673, Code:
ActivityOptions v6 = new ActivityOptions();
this.mLaunchTaskId = p7;
int v10 = this.mAmInternal.handleIncomingUser(p4, p5, p8, 0, 0, "startActivityFromGameSession", 0);
ActivityStarter v14 = this.mFactory.obtain();
ActivityStarter$Request.intent = p6;
ActivityStarter v17 = v13.setCaller(p1);
ActivityStarter v18 = v17.setCallingUid(p5);
ActivityStarter v19 = v18.setCallingPid(p4);
String v20 = p6.getPackage();
ActivityStarter v21 = v19.setCallingPackage(v20);
ActivityStarter v22 = v21.setCallingFeatureId(p3);
ActivityStarter v23 = v22.setUserId(v9);
return v30;
  - Similarity: 0.7790628671646118, Code:
ActivityOptions v3 = ActivityOptions.makeBasic();
v3.setLaunchTaskId(p7);
int v5 = p0.handleIncomingUser(p4, p5, p8, "startActivityFromGameSession");
ActivityStarter v8 = v7.obtainStarter(p6, "startActivityFromGameSession");
ActivityStarter v9 = v8.setCaller(p1);
ActivityStarter v10 = v9.setCallingUid(p5);
ActivityStarter v11 = v10.setCallingPid(p4);
String v12 = p6.getPackage();
ActivityStarter v13 = v11.setCallingPackage(v12);
ActivityStarter v14 = v13.setCallingFeatureId(p3);
ActivityStarter v15 = v14.setUserId(v5);
int v20 = v19.execute();
  - Access Control Level: SYS_OR_SIG

- API Name: getAssistContextExtras(I)Landroid/os/Bundle; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7919580936431885, Code:
int v1 = UserHandle.getCallingUserId();
Bundle v9 = new Bundle();
v9.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
v9.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
ActivityTaskManagerService$PendingAssistExtras v14 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,v6,v9,0,0,0,0,v1);
IApplicationThread v17 = ActivityRecord.app.getThread();
v17.requestAssistContextExtras(WindowToken.token, v14, p1, this.mViSessionId, 0);
return ActivityTaskManagerService$PendingAssistExtras.extras;
  - Access Control Level: SYS_OR_SIG

- API Name: getAvailableExtensionInterfaceNames(Ljava/lang/String;I)Ljava/util/List; in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7864267230033875, Code:
int v2 = Binder.getCallingUid();
int v3 = Binder.getCallingPid();
int v6 = ActivityManager.handleIncomingUser(v3, v2, p2, 0, 0, "getAvailableExtensionInterfaceNames", 0);
TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(v4);
Map v15 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);
Object v16 = v15.get(p1);
  - Access Control Level: SYS_OR_SIG

