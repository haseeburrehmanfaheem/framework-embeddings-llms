The method cancelTaskWindowTransition has the following code snippet:

This is path 1 for the API with depth 2:
public void cancelTaskWindowTransition(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (0 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, 2, 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									int v19 = WindowContainer.mChildren.size();
									if ((v19 + -1) < 0) {
										Object v20 = WindowContainer.mChildren.get((v19 + -1));
										int v22 = this.mSurfaceAnimator.getAnimationType();
										AnimationAdapter v23 = this.mSurfaceAnimator.getAnimation();
										WindowContainer.doAnimationFinished(v22, v23);
										this.mSurfaceAnimator.cancelAnimation();
										SurfaceControl$Transaction v26 = WindowContainer.getSyncTransaction();
										this.mSurfaceFreezer.unfreeze(v26);
										if (((v19 + -1) + -1) < 0) {
											Binder.restoreCallingIdentity(v2);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void cancelTaskWindowTransition(int p1){
	long v2 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
	Task v5 = v6;
	if (v5 != 0) {
		int v8 = WindowContainer.mChildren.size();
		if ((v8 + -1) < 0) {
			Object v9 = WindowContainer.mChildren.get((v8 + -1));
			v9.cancelAnimation();
			if (((v8 + -1) + -1) < 0) {
				this.sThreadPriorityBooster.reset();
				Binder.restoreCallingIdentity(v2);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void cancelTaskWindowTransition(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	if (v4 != 0) {
		v4.cancelTaskWindowTransition();
		WindowManagerService.resetPriorityAfterLockedSection();
		Binder.restoreCallingIdentity(v2);
		return;
	}
}

and the following sink code:
['Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);\nv4.cancelTaskWindowTransition();', 'Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);\nif (v5 != 0) { ... }\nv9.cancelAnimation();']

The method cancelTaskWindowTransition has the following similar APIs:

- API Name: getTaskBounds(I)Landroid/graphics/Rect; with Similarity Score: 0.8482349514961243
  - Access Control Level: SYS_OR_SIG and the following code:
Task v8 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
Rect v10 = v7.getBounds();
v3.set(v10);
return v3;

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; with Similarity Score: 0.8386029601097107
  - Access Control Level: SYS_OR_SIG and the following code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
TaskSnapshot v13 = snapshotTask();

