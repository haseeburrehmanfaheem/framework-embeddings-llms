The method startActivityAndWait has the following code snippet:

This is path 1 for the API with depth 2:
public WaitResult startActivityAndWait(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (v3 == 0) {
		WaitResult v4 = new WaitResult();
		if (v8 != 0) {
			int v9 = Binder.getCallingPid();
			int v10 = Binder.getCallingUid();
			int v12 = this.mAmInternal.handleIncomingUser(v9, v10, p12, 0, 0, "startActivityAndWait", 0);
			int v11 = v12;
			ActivityStartController v13 = this.mActivityStartController;
			ActivityStarter v15 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p4;
			ActivityStarter v16 = ActivityStarter;
			ActivityStarter$Request.reason = "startActivityAndWait";
			ActivityStarter v17 = ActivityStarter;
			ActivityStarter v14 = v17;
			ActivityStarter v18 = v14.setCaller(p1);
			ActivityStarter v19 = v18.setCallingPackage(p2);
			ActivityStarter v20 = v19.setCallingFeatureId(p3);
			ActivityStarter v21 = v20.setResolvedType(p5);
			ActivityStarter v22 = v21.setResultTo(p6);
			ActivityStarter v23 = v22.setResultWho(p7);
			ActivityStarter v24 = v23.setRequestCode(p8);
			ActivityStarter v25 = v24.setStartFlags(p9);
			if (p11 == 0) {
				SafeActivityOptions v28 = new SafeActivityOptions(v29);
				ActivityOptions v29 = ActivityOptions.fromBundle(p11);
				SafeActivityOptions v27 = v28;
				ActivityStarter$Request.activityOptions = v27;
				ActivityStarter v31 = ActivityStarter;
				ActivityStarter v26 = v31;
				ActivityStarter v32 = v26.setUserId(v11);
				ActivityStarter v33 = v32.setProfilerInfo(p10);
				ActivityStarter v34 = v33.setWaitResult(v4);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v41 = ActivityRecord$Token.mActivityRef.get();
						if (v41 == 0) {
							Task v42 = v41.getRootTask();
							if (v42 != 0) {
								ActivityRecord v40 = 0;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v43 = this.mActivityMetricsLogger;
									if (0 != 0) {
										ActivityMetricsLogger$LaunchingState v52 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v52, v45);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v45);
										ActivityMetricsLogger$LaunchingState v44 = v52;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v59 = Binder.getCallingPid();
												this.realCallingPid = v59;
												if (this.realCallingUid != -1) {
													int v60 = Binder.getCallingUid();
													this.realCallingUid = v60;
													if (this.callingUid < 0) {
														this.callingPid = -1;
														if (this.caller == 0) {
															Intent v61 = new Intent(this.intent);
															this.ephemeralIntent = v61;
															Intent v63 = new Intent(this.intent);
															this.intent = v63;
															ComponentName v65 = v63.getComponent();
															if (v65 == 0) {
																int v66 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																ResolveInfo v67 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v66);
																this.resolveInfo = v67;
																if (v67 != 0) {
																	UserInfo v68 = this.mSupervisor.getUserInfo(this.userId);
																	if (v68 == 0) {
																		boolean v69 = v68.isManagedProfile();
																		if (v69 == 0) {
																			ActivityInfo v70 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																			this.activityInfo = v70;
																			if (v70 == 0) {
																				if (ActivityStarter$Request.intent == 0) {
																					this.sThreadPriorityBooster.boost();
																					if (ActivityStarter$Request.globalConfig == 0) {
																						int v74 = RootWindowContainer.getChildCount();
																						if ((v74 + -1) < 0) {
																							WindowContainer v75 = RootWindowContainer.getChildAt((v74 + -1));
																							Task v76 = v75.getFocusedRootTask();
																							if (v76 == 0) {
																								if (((v74 + -1) + -1) < 0) {
																									WindowContainer v77 = RootWindowContainer.getChildAt(((v74 + -1) + -1));
																									Task v78 = v77.getFocusedRootTask();
																									if (v78 == 0) {
																										Task v73 = v78;
																										if (v73 == 0) {
																											if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																												long v79 = Binder.clearCallingIdentity();
																												int v80 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																												if (v80 == 0) {
																													this.sThreadPriorityBooster.reset();
																													this.mController.onExecutionComplete(ActivityStarter);
																													int v35 = v80;
																													return v4;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public WaitResult startActivityAndWait(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (v3 == 0) {
		WaitResult v4 = new WaitResult();
		if (v8 != 0) {
			int v9 = Binder.getCallingPid();
			int v10 = Binder.getCallingUid();
			int v12 = this.mAmInternal.handleIncomingUser(v9, v10, p12, 0, 0, "startActivityAndWait", 0);
			int v11 = v12;
			ActivityStartController v13 = this.mActivityStartController;
			ActivityStarter v15 = this.mFactory.obtain();
			ActivityStarter v16 = v15.setIntent(p4);
			ActivityStarter v17 = v16.setReason("startActivityAndWait");
			ActivityStarter v14 = v17;
			ActivityStarter$Request.caller = p1;
			ActivityStarter v18 = ActivityStarter;
			ActivityStarter$Request.callingPackage = p2;
			ActivityStarter v19 = ActivityStarter;
			ActivityStarter$Request.callingFeatureId = p3;
			ActivityStarter v20 = ActivityStarter;
			ActivityStarter$Request.resolvedType = p5;
			ActivityStarter v21 = ActivityStarter;
			ActivityStarter$Request.resultTo = p6;
			ActivityStarter v22 = ActivityStarter;
			ActivityStarter$Request.resultWho = p7;
			ActivityStarter v23 = ActivityStarter;
			ActivityStarter$Request.requestCode = p8;
			ActivityStarter v24 = ActivityStarter;
			ActivityStarter$Request.startFlags = p9;
			ActivityStarter v25 = ActivityStarter;
			SafeActivityOptions v27 = SafeActivityOptions.fromBundle(p11);
			ActivityStarter v28 = ActivityStarter.setActivityOptions(v27);
			ActivityStarter v26 = v28;
			ActivityStarter$Request.userId = v11;
			ActivityStarter v29 = ActivityStarter;
			ActivityStarter$Request.profilerInfo = p10;
			ActivityStarter v30 = ActivityStarter;
			ActivityStarter$Request.waitResult = v4;
			ActivityStarter v31 = ActivityStarter;
			ActivityStarter.onExecutionStarted();
			if (ActivityStarter$Request.intent == 0) {
				WindowManagerService.boostPriorityForLockedSection();
				ActivityRecord v35 = ActivityRecord.forTokenLocked(ActivityStarter$Request.resultTo);
				if (ActivityStarter$Request.realCallingUid != -1) {
					int v36 = Binder.getCallingUid();
					ActivityMetricsLogger v37 = this.mSupervisor.getActivityMetricsLogger();
					ActivityMetricsLogger$LaunchingState v38 = v37.notifyActivityLaunching(ActivityStarter$Request.intent, v35, ActivityStarter$Request.realCallingUid);
					WindowManagerService.resetPriorityAfterLockedSection();
					if (ActivityStarter$Request.activityInfo != 0) {
						if (ActivityStarter$Request.intent == 0) {
							WindowManagerService.boostPriorityForLockedSection();
							if (ActivityStarter$Request.globalConfig == 0) {
								Task v41 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
								if (v41 == 0) {
									Task.mConfigWillChange = 1;
									if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
										long v42 = Binder.clearCallingIdentity();
										int v43 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
										if (v43 == 0) {
											WindowManagerService.resetPriorityAfterLockedSection();
											ActivityStarter.onExecutionComplete();
											int v32 = v43;
											return v4;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public WaitResult startActivityAndWait(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	p0.assertPackageMatchesCallingUid(p2);
	WaitResult v2 = new WaitResult();
	ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityAndWait");
	int v5 = Binder.getCallingPid();
	int v6 = Binder.getCallingUid();
	int v7 = p0.handleIncomingUser(v5, v6, p12, "startActivityAndWait");
	ActivityStartController v8 = p0.getActivityStartController();
	ActivityStarter v9 = v8.obtainStarter(p4, "startActivityAndWait");
	ActivityStarter v10 = v9.setCaller(p1);
	ActivityStarter v11 = v10.setCallingPackage(p2);
	ActivityStarter v12 = v11.setCallingFeatureId(p3);
	ActivityStarter v13 = v12.setResolvedType(p5);
	ActivityStarter v14 = v13.setResultTo(p6);
	ActivityStarter v15 = v14.setResultWho(p7);
	ActivityStarter v16 = v15.setRequestCode(p8);
	ActivityStarter v17 = v16.setStartFlags(p9);
	ActivityStarter v18 = v17.setActivityOptions(p11);
	ActivityStarter v19 = v18.setUserId(v7);
	ActivityStarter v20 = v19.setProfilerInfo(p10);
	ActivityStarter v21 = v20.setWaitResult(v2);
	int v22 = v21.execute();
	return v2;
}

and the following sink code:
['ActivityStarter v15 = this.mFactory.obtain();\nActivityStarter$Request.intent = p4;\nActivityStarter v16 = ActivityStarter.setIntent(p4);\nActivityStarter v17 = v16.setReason("startActivityAndWait");\nActivityStarter v18 = v17.setCaller(p1);\n...\nWaitResult v4 = new WaitResult();\nreturn v4;', 'ActivityStartController v13 = this.mActivityStartController;\nActivityStarter v15 = this.mFactory.obtain();\nActivityStarter v16 = v15.setIntent(p4);\n...\nActivityStarter.onExecutionStarted();\nint v35 = v80;', 'ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityAndWait");\nWaitResult v2 = new WaitResult();\nActivityStartController v8 = p0.getActivityStartController();\nActivityStarter v9 = v8.obtainStarter(p4, "startActivityAndWait");\n...\nint v22 = v21.execute();\nreturn v2;']

The method startActivityAndWait has the following similar APIs:

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;IZLandroid/os/IBinder;Landroid/os/Bundle;)V with Similarity Score: 0.8543421030044556
  - Access Control Level: SYS_OR_SIG and the following code:
Intent v38 = new Intent();
Intent v26 = v26.setComponent(p4);
ActivityTaskManagerInternal v27 = this.mInjector.getActivityTaskManagerInternal();
int v28 = v27.startActivityAsUser(p1, p2, p3, v16, p7, 0, v24, p5);

- API Name: startActivityAsCaller(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;ZI)I with Similarity Score: 0.850834846496582
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityStarter v17 = this.mFactory.obtain();
ActivityStarter$Request.intent = p3;
ActivityStarter v21 = v20.setCallingUid(ActivityRecord.launchedFromUid);
ActivityStarter v22 = v21.setCallingPackage(ActivityRecord.launchedFromPackage);
ActivityStarter v23 = v22.setResolvedType(p4);
ActivityStarter v24 = v23.setResultTo(p5);
ActivityStarter v25 = v24.setResultWho(p6);
ActivityStarter v26 = v25.setRequestCode(p7);
ActivityStarter v27 = v26.setStartFlags(p8);

