The method setRunningRemoteTransitionDelegate has the following code snippet:

This is path 1 for the API with depth 2:
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	Object v11 = this.mPidMap.get(v4);
	WindowProcessController v10 = v11;
	if (v10 != 0) {
		WindowProcessController v9 = 0;
		if (v9 == 0) {
			boolean v12 = v9.isRunningRemoteTransition();
			if (v12 == 0) {
				if (p1 != 0) {
					IBinder v14 = p1.asBinder();
					ArrayMap v15 = this.mMap;
					int v16 = v15.size();
					if ((v16 + -1) < 0) {
						Object v17 = v15.valueAt((v16 + -1));
						int v18 = v17.size();
						if ((v18 + -1) < 0) {
							Object v19 = v17.valueAt((v18 + -1));
							if (this.mThread == 0) {
								boolean v20 = 1;
								if (v20 == 0) {
									IApplicationThread v21 = this.mThread;
									IBinder v22 = v21.asBinder();
									if (v22 != v14) {
										if (((v18 + -1) + -1) < 0) {
											Object v23 = v17.valueAt(((v18 + -1) + -1));
											if (this.mThread == 0) {
												boolean v24 = 1;
												if (v24 == 0) {
													IApplicationThread v25 = this.mThread;
													IBinder v26 = v25.asBinder();
													if (v26 != v14) {
														WindowProcessController v13 = v23;
														if (v13 != 0) {
															if (1 != 0) {
																int v28 = this.mDelegateProcesses.size();
																if ((v28 - 1) < 0) {
																	Object v29 = this.mDelegateProcesses.valueAt((v28 - 1));
																	if (TransitionController$RemotePlayer$DelegateProcess.mProc != v13) {
																		if (((v28 - 1) + -1) < 0) {
																			Object v30 = this.mDelegateProcesses.valueAt(((v28 - 1) + -1));
																			if (TransitionController$RemotePlayer$DelegateProcess.mProc != v13) {
																				Object v31 = this.mDelegateProcesses.removeAt(((v28 - 1) + -1));
																				if (1 != 0) {
																					if (this.mRunningRemoteAnimation != 0) {
																						this.mRunningRemoteAnimation = 0;
																						WindowProcessController.updateRunningRemoteOrRecentsAnimation();
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	this.sThreadPriorityBooster.boost();
	WindowProcessController v8 = v9;
	if (v8 == 0) {
		if (this.mRunningRecentsAnimation != 0) {
			if (this.mRunningRemoteAnimation == 0) {
				boolean v11 = 0;
				if (v11 == 0) {
					if (p1 != 0) {
						IBinder v13 = p1.asBinder();
						ArrayMap v14 = this.mProcessNames.getMap();
						int v15 = v14.size();
						if ((v15 + -1) < 0) {
							Object v16 = v14.valueAt((v15 + -1));
							int v17 = v16.size();
							if ((v17 + -1) < 0) {
								Object v18 = v16.valueAt((v17 + -1));
								boolean v19 = v18.hasThread();
								if (v19 == 0) {
									IApplicationThread v20 = v18.getThread();
									IBinder v21 = v20.asBinder();
									if (v21 != v13) {
										if (((v17 + -1) + -1) < 0) {
											Object v22 = v16.valueAt(((v17 + -1) + -1));
											boolean v23 = v22.hasThread();
											if (v23 == 0) {
												IApplicationThread v24 = v22.getThread();
												IBinder v25 = v24.asBinder();
												if (v25 != v13) {
													WindowProcessController v12 = v22;
													if (v12 != 0) {
														if (1 != 0) {
															int v27 = this.mDelegateProcesses.size();
															if ((v27 - 1) < 0) {
																Object v28 = this.mDelegateProcesses.valueAt((v27 - 1));
																if (TransitionController$RemotePlayer$DelegateProcess.mProc != v12) {
																	if (((v27 - 1) + -1) < 0) {
																		Object v29 = this.mDelegateProcesses.valueAt(((v27 - 1) + -1));
																		if (TransitionController$RemotePlayer$DelegateProcess.mProc != v12) {
																			Object v30 = this.mDelegateProcesses.removeAt(((v27 - 1) + -1));
																			if (1 != 0) {
																				v12.setRunningRemoteAnimation(0);
																				this.sThreadPriorityBooster.reset();
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	WindowManagerService.boostPriorityForLockedSection();
	WindowProcessController v7 = p0.getProcessController(v4, v5);
	if (v7 == 0) {
		boolean v8 = v7.isRunningRemoteTransition();
		if (v8 == 0) {
			WindowProcessController v9 = p0.getProcessController(p1);
			if (v9 != 0) {
				TransitionController.mRemotePlayer.update(v9, 1, 0);
				WindowManagerService.resetPriorityAfterLockedSection();
				return;
			}
		}
	}
}

and the following sink code:
['int v4 = Binder.getCallingPid();\nint v5 = Binder.getCallingUid();\nWindowProcessController v7 = p0.getProcessController(v4, v5);\nboolean v8 = v7.isRunningRemoteTransition();', 'this.mPidMap.get(v4)\nif (v10 != 0) { ... }']

The method setRunningRemoteTransitionDelegate has the following similar APIs:

- API Name: setInteractiveAppNotificationEnabled(Landroid/os/IBinder;ZI)V with Similarity Score: 0.840692937374115
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v5 = ActivityManager.handleIncomingUser(v2, v1, p3, 0, 0, "setInteractiveAppNotificationEnabled", 0);
TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p1, v1, v3);
ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
v8.setInteractiveAppNotificationEnabled(p2);

- API Name: notifyError(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;I)V with Similarity Score: 0.8354218602180481
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
TvInteractiveAppManagerService$SessionState v11 = TvInteractiveAppManagerService.getSessionStateLocked(p1, v1, v10);
ITvInteractiveAppSession v14 = TvInteractiveAppManagerService$SessionState.-$$Nest$fgetmSession(v8);
v12.notifyError(p2, p3);

