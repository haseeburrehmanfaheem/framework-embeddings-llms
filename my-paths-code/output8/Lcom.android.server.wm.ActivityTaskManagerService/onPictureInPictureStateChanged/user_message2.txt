The method onPictureInPictureStateChanged has the following code snippet:

This is path 1 for the API with depth 2:
public void onPictureInPictureStateChanged(PictureInPictureUiState p1){
	TaskDisplayArea v4 = this.mDisplayAreaPolicy.getDefaultTaskDisplayArea();
	TaskDisplayArea v3 = v4;
	TaskDisplayArea v2 = v3;
	Task v5 = v2.getRootPinnedTask();
	if (v5 == 0) {
		WindowContainer$$ExternalSyntheticLambda2 v7 = new WindowContainer$$ExternalSyntheticLambda2();
		ActivityRecord v10 = WindowContainer.getActivity(v7, 1, 0);
		ActivityRecord v9 = v10;
		ActivityRecord v6 = v9;
		if (v6 == 0) {
			WindowContainer$$ExternalSyntheticLambda2 v12 = new WindowContainer$$ExternalSyntheticLambda2();
			ActivityRecord v15 = WindowContainer.getActivity(v12, 1, 0);
			ActivityRecord v14 = v15;
			ActivityRecord v11 = v14;
			int v18 = Configuration.windowConfiguration.getWindowingMode();
			if (v18 != 2) {
				boolean v17 = 1;
				if (v17 == 0) {
					IApplicationThread v19 = this.mThread;
					ObjectPoolItem v21 = ObjectPool.obtain(ClientTransactio.class);
					if (v21 != 0) {
						ClientTransaction v22 = new ClientTransaction();
						this.mClient = v19;
						this.mActivityToken = WindowToken.token;
						ClientTransaction v20 = v21;
						ObjectPoolItem v25 = ObjectPool.obtain(PipStateTransactionIte.class);
						if (v25 != 0) {
							PipStateTransactionItem v26 = new PipStateTransactionItem();
							this.mPipState = p1;
							PipStateTransactionItem v24 = v25;
							if (this.mActivityCallbacks != 0) {
								ArrayList v29 = new ArrayList();
								this.mActivityCallbacks = v29;
								boolean v31 = this.mActivityCallbacks.add(v24);
								ClientLifecycleManager v32 = this.mLifecycleManager;
								IApplicationThread v34 = v20.getClient();
								v20.schedule();
								if (v34 instanceof Binder != 0) {
									v20.recycle();
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onPictureInPictureStateChanged(PictureInPictureUiState p1){
	TaskDisplayArea v3 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
	TaskDisplayArea v2 = v3;
	Task v4 = this.mRootPinnedTask;
	if (v4 == 0) {
		WindowContainer$$ExternalSyntheticLambda2 v6 = new WindowContainer$$ExternalSyntheticLambda2();
		ActivityRecord v8 = WindowContainer.getActivity(v6, 1);
		ActivityRecord v5 = v8;
		if (v5 == 0) {
			WindowContainer$$ExternalSyntheticLambda2 v10 = new WindowContainer$$ExternalSyntheticLambda2();
			ActivityRecord v12 = WindowContainer.getActivity(v10, 1);
			ActivityRecord v9 = v12;
			boolean v14 = v9.inPinnedWindowingMode();
			if (v14 == 0) {
				IApplicationThread v15 = ActivityRecord.app.getThread();
				ClientTransaction v16 = ClientTransaction.obtain(v15, WindowToken.token);
				PipStateTransactionItem v17 = PipStateTransactionItem.obtain(p1);
				v16.addCallback(v17);
				ClientLifecycleManager v19 = this.mService.getLifecycleManager();
				v19.scheduleTransaction(v16);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onPictureInPictureStateChanged(PictureInPictureUiState p1){
	TaskDisplayArea v2 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v3 = v2.getRootPinnedTask();
	if (v3 == 0) {
		ActivityRecord v4 = v3.getTopMostActivity();
		if (v4 == 0) {
			ActivityRecord v5 = v3.getTopMostActivity();
			this.mActivityClientController.onPictureInPictureStateChanged(v5, p1);
			return;
		}
	}
}

and the following sink code:
['WindowContainer$$ExternalSyntheticLambda2 v7 = new WindowContainer$$ExternalSyntheticLambda2();\nActivityRecord v10 = WindowContainer.getActivity(v7, 1, 0);\nClientTransaction v22 = new ClientTransaction();\nPipStateTransactionItem v26 = new PipStateTransactionItem();\nthis.mPipState = p1;\nv20.schedule();', 'ActivityRecord v8 = WindowContainer.getActivity(v6, 1);\nClientTransaction v16 = ClientTransaction.obtain(v15, WindowToken.token);\nPipStateTransactionItem v17 = PipStateTransactionItem.obtain(p1);\nv16.addCallback(v17);\nv19.scheduleTransaction(v16);', 'this.mActivityClientController.onPictureInPictureStateChanged(v5, p1);']

The method onPictureInPictureStateChanged has the following similar APIs:

- API Name: setTaskResizeable(II)V with Similarity Score: 0.8429698944091797
  - Access Control Level: SYS_OR_SIG and the following code:
AppTransition$$ExternalSyntheticLambda2 v6 = new AppTransition$$ExternalSyntheticLambda2();
Integer v9 = Integer.valueOf(p1);
Task v11 = RootWindowContainer.getTask(v10);
boolean v15 = v11.reparent(v13, 0, 2, 1, 1, "anyTaskForId");
ActivityManager$TaskDescription v23 = new ActivityManager$TaskDescription();
v23.setResizeMode(this.mResizeMode);
Task.setTaskDescription(v23);

- API Name: setLockScreenShown(ZZ)V with Similarity Score: 0.769050121307373
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityTaskManagerService$$ExternalSyntheticLambda11 v13 = new ActivityTaskManagerService$$ExternalSyntheticLambda11(p0,p1,p2);
this.mRootWindowContainer.forAllDisplays(v13);

