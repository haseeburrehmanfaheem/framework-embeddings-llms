The method isTopActivityImmersive in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isTopActivityImmersive(){
	if (v3 != 0) {
		int v9 = RootWindowContainer.getChildCount();
		if ((v9 + -1) < 0) {
			WindowContainer v10 = RootWindowContainer.getChildAt((v9 + -1));
			Task v11 = v10.getFocusedRootTask();
			if (v11 == 0) {
				if (((v9 + -1) + -1) < 0) {
					WindowContainer v12 = RootWindowContainer.getChildAt(((v9 + -1) + -1));
					Task v13 = v12.getFocusedRootTask();
					if (v13 == 0) {
						Task v8 = v13;
						Task v7 = v8;
						if (v7 != 0) {
							ActivityRecord v16 = TaskFragment.topRunningActivity(0, 1);
							ActivityRecord v15 = v16;
							ActivityRecord v14 = v15;
							if (v14 == 0) {
								if (ActivityRecord.immersive == 0) {
									return 0;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isTopActivityImmersive(){
	if (v3 != 0) {
		this.sThreadPriorityBooster.boost();
		Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
		Task v6 = v7;
		if (v6 != 0) {
			ActivityRecord v9 = TaskFragment.topRunningActivity(0);
			ActivityRecord v8 = v9;
			if (v8 == 0) {
				if (ActivityRecord.immersive == 0) {
					this.sThreadPriorityBooster.reset();
					return 0;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isTopActivityImmersive(){
	ActivityTaskManagerService.enforceNotIsolatedCaller("isTopActivityImmersive");
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = p0.getTopDisplayFocusedRootTask();
	if (v3 != 0) {
		ActivityRecord v4 = v3.topRunningActivity();
		if (v4 == 0) {
			if (ActivityRecord.immersive == 0) {
				WindowManagerService.resetPriorityAfterLockedSection();
				return 0;
			}
		}
	}
}

and the following sink code:
['Task v3 = p0.getTopDisplayFocusedRootTask();\nActivityRecord v4 = v3.topRunningActivity();\nif (v4 == 0) { if (ActivityRecord.immersive == 0) { return 0; } }', 'Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();\nActivityRecord v9 = TaskFragment.topRunningActivity(0);\nif (v8 == 0) { if (ActivityRecord.immersive == 0) { return 0; } }', 'int v9 = RootWindowContainer.getChildCount();\nWindowContainer v10 = RootWindowContainer.getChildAt((v9 + -1));\nTask v11 = v10.getFocusedRootTask();\nActivityRecord v16 = TaskFragment.topRunningActivity(0, 1);\nif (v14 == 0) { if (ActivityRecord.immersive == 0) { return 0; } }']

The method isTopActivityImmersive has the following similar APIs:

- API Name: getFrontActivityScreenCompatMode()I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.9026342630386353, Code:
Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
ActivityRecord v9 = TaskFragment.topRunningActivity(0);
CompatibilityInfo v11 = CompatModePackages.compatibilityInfoForPackageLocked(ActivityInfo.applicationInfo);
boolean v12 = v11.alwaysSupportsScreen();
  - Similarity: 0.8584774136543274, Code:
Task v3 = p0.getTopDisplayFocusedRootTask();
ActivityRecord v4 = v3.topRunningActivity();
int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo);
  - Similarity: 0.8262020349502563, Code:
Task v11 = v10.getFocusedRootTask();
ActivityRecord v16 = TaskFragment.topRunningActivity(0, 1);
CompatibilityInfo v22 = new CompatibilityInfo(ActivityInfo.applicationInfo,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v19,v20);
boolean v24 = v18.alwaysSupportsScreen();
  - Access Control Level: SYS_OR_SIG

- API Name: setFocusedRootTask(I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8822791576385498, Code:
Task v7 = this.mRootWindowContainer.getRootTask(p1);
ActivityRecord v8 = v7.topRunningActivity();
  - Access Control Level: SYS_OR_SIG

- API Name: setFocusedTask(I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8332077264785767, Code:
Task v14 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
ActivityRecord v19 = Task.getActivity(v17);
boolean v21 = ActivityRecord.isFocusable();
WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
  - Similarity: 0.8130578398704529, Code:
Task v10 = this.mRootWindowContainer.anyTaskForId(p1, 0);
boolean v12 = v11.moveFocusableActivityToTop("setFocusedTask");
DisplayContent v16 = 0.getDisplayContent();
boolean v17 = v16.setFocusedApp(0);
boolean v18 = this.mWindowManager.updateFocusedWindowLocked(0, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8269786834716797, Code:
Task v10 = v9.getFocusedRootTask();
Task v6 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
  - Access Control Level: SYS_OR_SIG

- API Name: unhandledBack()V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8011313080787659, Code:
Task v4 = p0.getTopDisplayFocusedRootTask();
if (v4 == 0) {
v4.unhandledBackLocked();
  - Access Control Level: SYS_OR_SIG

