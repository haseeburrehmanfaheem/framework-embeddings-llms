The method registerRemoteAnimationsForDisplay has the following code snippet:

This is path 1 for the API with depth 2:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ((v5 + -1) < 0) {
		Object v6 = this.mTransitionAnimationMap.valueAt((v5 + -1));
		RemoteAnimationDefinition$RemoteAnimationAdapterEntry.adapter.setCallingPidUid(v2, v3);
		if (((v5 + -1) + -1) < 0) {
			int v13 = this.mChildren.size();
			int v12 = v13;
			if ((v12 + -1) < 0) {
				DisplayContent v11 = 0;
				if (v11 != 0) {
					long v14 = Binder.clearCallingIdentity();
					this.mRemoteAnimationDefinition = p2;
					Binder.restoreCallingIdentity(v14);
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ((v5 + -1) < 0) {
		Object v6 = this.mTransitionAnimationMap.valueAt((v5 + -1));
		RemoteAnimationDefinition$RemoteAnimationAdapterEntry.adapter.setCallingPidUid(v2, v3);
		if (((v5 + -1) + -1) < 0) {
			this.sThreadPriorityBooster.boost();
			int v11 = RootWindowContainer.getChildCount();
			if ((v11 + -1) < 0) {
				DisplayContent v10 = 0;
				if (v10 != 0) {
					long v12 = Binder.clearCallingIdentity();
					this.mAppTransitionController.registerRemoteAnimations(p2);
					Binder.restoreCallingIdentity(v12);
					this.sThreadPriorityBooster.reset();
					return;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	p2.setCallingPidUid(v2, v3);
	WindowManagerService.boostPriorityForLockedSection();
	DisplayContent v6 = this.mRootWindowContainer.getDisplayContent(p1);
	if (v6 != 0) {
		long v7 = Binder.clearCallingIdentity();
		v6.registerRemoteAnimations(p2);
		Binder.restoreCallingIdentity(v7);
		WindowManagerService.resetPriorityAfterLockedSection();
		return;
	}
}

and the following sink code:
['int v2 = Binder.getCallingPid();\nint v3 = Binder.getCallingUid();\np2.setCallingPidUid(v2, v3);\nWindowManagerService.boostPriorityForLockedSection();\nDisplayContent v6 = this.mRootWindowContainer.getDisplayContent(p1);\nlong v7 = Binder.clearCallingIdentity();\nv6.registerRemoteAnimations(p2);\nBinder.restoreCallingIdentity(v7);', 'int v2 = Binder.getCallingPid();\nint v3 = Binder.getCallingUid();\nthis.sThreadPriorityBooster.boost();\nlong v12 = Binder.clearCallingIdentity();\nthis.mAppTransitionController.registerRemoteAnimations(p2);\nBinder.restoreCallingIdentity(v12);']

The method registerRemoteAnimationsForDisplay has the following similar APIs:

- API Name: notifyVideoAvailable(Landroid/os/IBinder;I)V with Similarity Score: 0.8353279829025269
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v3 = TvInteractiveAppManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, "notifyVideoAvailable");
TvInteractiveAppManagerService$SessionState v6 = TvInteractiveAppManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3);
ITvInteractiveAppSession v7 = TvInteractiveAppManagerService.-$$Nest$mgetSessionLocked(this.this$0, v6);
v7.notifyVideoAvailable();

- API Name: getTasks(IZZI)Ljava/util/List; with Similarity Score: 0.8351728916168213
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
ArrayList v11 = new ArrayList();
this.mRootWindowContainer.getRunningTasks(p1, v11, (((p2 | 8) | 4) | 0), v1, v7, p4);
return v11;

