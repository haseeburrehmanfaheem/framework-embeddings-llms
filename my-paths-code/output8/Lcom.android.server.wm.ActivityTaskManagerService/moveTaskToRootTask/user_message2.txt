The method moveTaskToRootTask has the following code snippet:

This is path 1 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	long v5 = Binder.clearCallingIdentity();
	Task v8 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v7 = v8;
	Task v6 = v7;
	if (v6 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v9 = new Object(3);
			Long v10 = Long.valueOf(p1);
			Long v11 = Long.valueOf(p2);
			Boolean v12 = Boolean.valueOf(p3);
			if (this.sServiceInstance != 0) {
				ProtoLogImpl v15 = new ProtoLogImpl(v16,1048576,v18);
				File v16 = new File("/data/misc/wmtrace/wm_log.winscope");
				ProtoLogViewerConfigReader v18 = new ProtoLogViewerConfigReader();
				this.sServiceInstance = v15;
				ProtoLogImpl v14 = this.sServiceInstance;
				boolean v22 = ProtoLogGroup.WM_DEBUG_TASKS.isLogToProto();
				if (v22 == 0) {
					BaseProtoLogImpl.logToProto(-677449371, 53, v9);
					boolean v24 = ProtoLogGroup.WM_DEBUG_TASKS.isLogToLogcat();
					if (v24 == 0) {
						String v25 = ProtoLogGroup.WM_DEBUG_TASKS.getTag();
						BaseProtoLogImpl.logToLogcat(v25, BaseProtoLogImpl$LogLevel.DEBUG, -677449371, 0, v9);
						int v29 = this.mChildren.size();
						int v28 = v29;
						if ((v28 + -1) < 0) {
							Object v31 = this.mChildren.get((v28 + -1));
							WindowContainer v30 = v31;
							DisplayContent$$ExternalSyntheticLambda6 v33 = new DisplayContent$$ExternalSyntheticLambda6(p2);
							Task v35 = DisplayContent.getRootTask(v33);
							Task v32 = v35;
							if (v32 == 0) {
								if (((v28 + -1) + -1) < 0) {
									Object v37 = this.mChildren.get(((v28 + -1) + -1));
									WindowContainer v36 = v37;
									DisplayContent$$ExternalSyntheticLambda6 v39 = new DisplayContent$$ExternalSyntheticLambda6(p2);
									Task v41 = DisplayContent.getRootTask(v39);
									Task v38 = v41;
									if (v38 == 0) {
										Task v27 = v38;
										if (v27 == 0) {
											boolean v42 = v27.isActivityTypeStandardOrUndefined();
											if (v42 == 0) {
												if (p3 == 0) {
													Task v45 = Task.getRootTask();
													if (2147483647 != 2147483647) {
														Task v46 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, v27, 1);
														if (v46 != v45) {
															int v47 = v46.getDisplayId();
															boolean v48 = Task.canBeLaunchedOnDisplay(v47);
															if (v48 != 0) {
																boolean v44 = 0;
																boolean v43 = v44;
																Binder.restoreCallingIdentity(v5);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	this.sThreadPriorityBooster.boost();
	long v4 = Binder.clearCallingIdentity();
	Task v6 = RootWindowContainer.anyTaskForId(p1, 2);
	Task v5 = v6;
	if (v5 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v7 = new Object(3);
			Long v8 = Long.valueOf(p1);
			Long v9 = Long.valueOf(p2);
			Boolean v10 = Boolean.valueOf(p3);
			ProtoLogImpl v12 = ProtoLogImpl.getSingleInstance();
			v12.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_TASKS, -677449371, 53, 0, v7);
			int v15 = RootWindowContainer.getChildCount();
			if ((v15 + -1) < 0) {
				WindowContainer v16 = RootWindowContainer.getChildAt((v15 + -1));
				Task v17 = v16.getRootTask(p2);
				if (v17 == 0) {
					if (((v15 + -1) + -1) < 0) {
						WindowContainer v18 = RootWindowContainer.getChildAt(((v15 + -1) + -1));
						Task v19 = v18.getRootTask(p2);
						if (v19 == 0) {
							Task v14 = v19;
							if (v14 == 0) {
								boolean v20 = v14.isActivityTypeStandardOrUndefined();
								if (v20 == 0) {
									if (p3 == 0) {
										boolean v22 = Task.reparent(v14, 2147483647, 1, 1, 0, 1, "moveTaskToRootTask");
										boolean v21 = v22;
										Binder.restoreCallingIdentity(v4);
										this.sThreadPriorityBooster.reset();
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1);
	if (v4 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v5 = new Object(3);
			Long v6 = Long.valueOf(p1);
			Long v7 = Long.valueOf(p2);
			Boolean v8 = Boolean.valueOf(p3);
			ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, -677449371, 53, 0, v5);
			Task v10 = this.mRootWindowContainer.getRootTask(p2);
			if (v10 == 0) {
				boolean v11 = v10.isActivityTypeStandardOrUndefined();
				if (v11 == 0) {
					boolean v12 = v4.reparent(v10, p3, 1, 1, 0, "moveTaskToRootTask");
					Binder.restoreCallingIdentity(v3);
					WindowManagerService.resetPriorityAfterLockedSection();
					return;
				}
			}
		}
	}
}

and the following sink code:
['Task v8 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);\nObject v9 = new Object(3);\nLong v10 = Long.valueOf(p1);\nLong v11 = Long.valueOf(p2);\nBoolean v12 = Boolean.valueOf(p3);', 'Task v6 = RootWindowContainer.anyTaskForId(p1, 2);\nLong v8 = Long.valueOf(p1);\nLong v9 = Long.valueOf(p2);\nBoolean v10 = Boolean.valueOf(p3);', 'Task v4 = this.mRootWindowContainer.anyTaskForId(p1);\nLong v6 = Long.valueOf(p1);\nLong v7 = Long.valueOf(p2);\nBoolean v8 = Boolean.valueOf(p3);']

The method moveTaskToRootTask has the following similar APIs:

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; with Similarity Score: 0.902058482170105
  - Access Control Level: SYS_OR_SIG and the following code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
TaskSnapshot v13 = snapshotTask();

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; with Similarity Score: 0.8832597732543945
  - Access Control Level: SYS_OR_SIG and the following code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
TaskSnapshot v13 = snapshotTask();

