The method onSplashScreenViewCopyFinished in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	if (0 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v7 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v9 = PooledLambda.__(Tas.class);
			Integer v10 = Integer.valueOf(p1);
			PooledPredicate v11 = PooledLambda.obtainPredicate(v7, v9, v10);
			Task v12 = RootWindowContainer.getTask(v11);
			v11.recycle();
			if (v12 == 0) {
				if (0 == 0) {
					Task v14 = RootWindowContainer.getOrCreateRootTask(0, 0, v12, 0);
					if (v14 == 0) {
						Task v15 = v12.getRootTask();
						if (v15 == v14) {
							if (0 == 0) {
								boolean v16 = v12.reparent(v14, 0, 2, 1, 1, "anyTaskForId");
								Task v6 = v12;
								Task v5 = v6;
								if (v5 == 0) {
									Task$$ExternalSyntheticLambda8 v18 = new Task$$ExternalSyntheticLambda8();
									ActivityRecord v21 = WindowContainer.getActivity(v18, 1);
									ActivityRecord v20 = v21;
									ActivityRecord v17 = v20;
									if (v17 == 0) {
										ActivityTaskManagerService.mH.removeCallbacks(this.mTransferSplashScreenTimeoutRunnable);
										if (p2 == 0) {
											if (this.mTransferringSplashScreenState != 1) {
												if (this.mStartingWindow == 0) {
													if (WindowState.mRemoved != 0) {
														if (this.finishing == 0) {
															SurfaceControl$Transaction v26 = this.mStartingWindow.getPendingTransaction();
															Rect v27 = this.mStartingWindow.getRelativeFrame();
															TaskOrganizerController$StartingWindowAnimationAdaptor v28 = new TaskOrganizerController$StartingWindowAnimationAdaptor();
															this.mStartingWindow.startAnimation(v26, v28, 0, 128);
															if (TaskOrganizerController$StartingWindowAnimationAdaptor.mAnimationLeash != 0) {
																SurfaceControl$Transaction v31 = v26.setPosition(TaskOrganizerController$StartingWindowAnimationAdaptor.mAnimationLeash, Rect.left, Rect.top);
																SurfaceControl v25 = TaskOrganizerController$StartingWindowAnimationAdaptor.mAnimationLeash;
																this.mTransferringSplashScreenState = 2;
																ClientLifecycleManager v32 = this.mLifecycleManager;
																IApplicationThread v33 = this.mThread;
																ObjectPoolItem v35 = ObjectPool.obtain(TransferSplashScreenViewStateIte.class);
																if (v35 != 0) {
																	TransferSplashScreenViewStateItem v36 = new TransferSplashScreenViewStateItem();
																	this.mSplashScreenViewParcelable = p2;
																	this.mStartingWindowLeash = v25;
																	TransferSplashScreenViewStateItem v34 = v35;
																	ClientTransaction v39 = ClientLifecycleManager.transactionWithCallback(v33, WindowToken.token, v34);
																	ClientLifecycleManager.scheduleTransaction(v39);
																	boolean v42 = ActivityTaskManagerService.mH.postDelayed(this.mTransferSplashScreenTimeoutRunnable, 2000);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	this.sThreadPriorityBooster.boost();
	Task v5 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
	Task v4 = v5;
	if (v4 == 0) {
		Task$$ExternalSyntheticLambda8 v7 = new Task$$ExternalSyntheticLambda8();
		ActivityRecord v9 = Task.getActivity(v7);
		ActivityRecord v6 = v9;
		if (v6 == 0) {
			ActivityRecord.removeTransferSplashScreenTimeout();
			if (p2 == 0) {
				if (this.mTransferringSplashScreenState != 1) {
					if (this.mStartingWindow == 0) {
						if (WindowState.mRemoved != 0) {
							if (this.finishing == 0) {
								SurfaceControl v12 = TaskOrganizerController.applyStartingWindowAnimation(this.mStartingWindow);
								this.mTransferringSplashScreenState = 2;
								ClientLifecycleManager v13 = this.mAtmService.getLifecycleManager();
								IApplicationThread v14 = this.app.getThread();
								TransferSplashScreenViewStateItem v15 = TransferSplashScreenViewStateItem.obtain(p2, v12);
								v13.scheduleTransaction(v14, WindowToken.token, v15);
								ActivityRecord.scheduleTransferSplashScreenTimeout();
								this.sThreadPriorityBooster.reset();
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	if (v3 == 0) {
		ActivityRecord v4 = v3.getTopWaitSplashScreenActivity();
		if (v4 == 0) {
			v4.onCopySplashScreenFinish(p2);
			WindowManagerService.resetPriorityAfterLockedSection();
			return;
		}
	}
}

and the following sink code:
['Task v5 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);\nSurfaceControl v12 = TaskOrganizerController.applyStartingWindowAnimation(this.mStartingWindow);\nTransferSplashScreenViewStateItem v15 = TransferSplashScreenViewStateItem.obtain(p2, v12);\nv13.scheduleTransaction(v14, WindowToken.token, v15);']

The method onSplashScreenViewCopyFinished has the following similar APIs:

- API Name: removeTask(I)Z in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.764482319355011, Code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
WindowContainer.mTransitionController.requestCloseTransitionIfNeeded(v5);
v5.removeActivities("remove-task", 0);
LockTaskController v17 = this.mService.getLockTaskController();
v17.clearLockedTask(v5);
  - Access Control Level: SYS_OR_SIG

- API Name: cancelTaskWindowTransition(I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7596457600593567, Code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
v4.cancelTaskWindowTransition();
  - Similarity: 0.7487825155258179, Code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
if (v5 != 0) { ... }
v9.cancelAnimation();
  - Access Control Level: SYS_OR_SIG

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7359017133712769, Code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: setFocusedRootTask(I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7333486676216125, Code:
Task v7 = this.mRootWindowContainer.getRootTask(p1);
ActivityRecord v8 = v7.topRunningActivity();
  - Access Control Level: SYS_OR_SIG

- API Name: moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.731412947177887, Code:
Task v65 = RootWindowContainer.anyTaskForId(p3, 2);
ActivityStarter v50 = this.mFactory.obtain();
ActivityStarter v51 = v50.setIntent(0);
ActivityStarter v52 = v51.setReason("moveTaskToFront");
v64.moveTaskToFront(v64, 0, v69, 0, v80);
  - Access Control Level: SYS_OR_SIG

