This is path 1 for the API with depth 2:
public int startActivityFromRecents(int p1, Bundle p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	if (p2 == 0) {
		SafeActivityOptions v5 = new SafeActivityOptions(v6);
		if (p2 == 0) {
			ActivityOptions v7 = new ActivityOptions(p2);
			ActivityOptions v6 = v7;
			SafeActivityOptions v4 = v5;
			long v10 = Binder.clearCallingIdentity();
			if (v4 == 0) {
				ActivityOptions v13 = SafeActivityOptions.getOptions(0, 0, 0, ActivityTaskSupervisor);
				ActivityOptions v12 = v13;
				this.sThreadPriorityBooster.boost();
				if (v12 == 0) {
					if (getLaunchActivityType() == 2) {
						if (getLaunchActivityType() == 3) {
							boolean v17 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
							if (v17 != 0) {
								this.mLayoutReasons = 0;
								WindowManagerService.mWindowPlacerLocked.deferLayout();
								if (2 == 2) {
									if (v12 != 0) {
										AppTransition$$ExternalSyntheticLambda2 v20 = new AppTransition$$ExternalSyntheticLambda2();
										ArgumentPlaceholder v22 = PooledLambda.__(Tas.class);
										Integer v23 = Integer.valueOf(p1);
										PooledPredicate v24 = PooledLambda.obtainPredicate(v20, v22, v23);
										Task v25 = RootWindowContainer.getTask(v24);
										v24.recycle();
										if (v25 == 0) {
											if (v12 == 0) {
												Task v27 = RootWindowContainer.getOrCreateRootTask(0, v12, v25, 1);
												if (v27 == 0) {
													Task v28 = v25.getRootTask();
													if (v28 == v27) {
														if (1 == 0) {
															boolean v29 = v25.reparent(v27, 1, 2, 1, 1, "anyTaskForId");
															Task v19 = v25;
															if (v19 == 0) {
																if (0 == 0) {
																	TaskDisplayArea v31 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
																	TaskDisplayArea v30 = v31;
																	Task v33 = TaskDisplayArea.getOrCreateRootHomeTask();
																	if (v33 == 0) {
																		v33.moveToFront("startActivityFromRecents");
																		boolean v35 = ActivityTaskManagerService.mAmInternal.shouldConfirmCredentials(Task.mUserId);
																		if (v35 != 0) {
																			ActivityRecord v37 = Task.getRootActivity(1, 0);
																			ActivityRecord v36 = v37;
																			if (v36 == 0) {
																				Intent v38 = Task.intent.addFlags(1048576);
																				this.sThreadPriorityBooster.reset();
																				ActivityStartController v41 = this.mActivityStartController;
																				int v43 = ActivityStartController.checkTargetUser(Task.mUserId, 0, v2, v3, "startActivityFromRecents");
																				ActivityStarter v44 = ActivityStartController.obtainStarter(Task.intent, "startActivityFromRecents");
																				ActivityStarter v45 = v44.setCallingUid(Task.mCallingUid);
																				ActivityStarter v46 = v45.setRealCallingPid(v2);
																				ActivityStarter v47 = v46.setRealCallingUid(v3);
																				ActivityStarter v48 = v47.setCallingPackage(Task.mCallingPackage);
																				ActivityStarter v49 = v48.setCallingFeatureId(Task.mCallingFeatureId);
																				ActivityStarter v50 = v49.setResolvedType(0);
																				ActivityStarter v51 = v50.setResultTo(0);
																				ActivityStarter v52 = v51.setResultWho(0);
																				ActivityStarter v53 = v52.setRequestCode(0);
																				ActivityStarter v54 = v53.setStartFlags(0);
																				ActivityStarter v55 = v54.setActivityOptions(v4);
																				ActivityStarter v56 = v55.setUserId(v43);
																				ActivityStarter v57 = v56.setInTask(v19);
																				ActivityStarter v58 = v57.setOriginatingPendingIntent(0);
																				ActivityStarter v59 = v58.setAllowBackgroundActivityStart(0);
																				int v60 = v59.execute();
																				int v42 = v60;
																				this.sThreadPriorityBooster.boost();
																				if (this.mLayoutReasons == 0) {
																					WindowManagerService.mWindowPlacerLocked.continueLayout(1);
																					this.sThreadPriorityBooster.reset();
																					int v11 = v42;
																					Binder.restoreCallingIdentity(v10);
																					return v11;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startActivityFromRecents(int p1, Bundle p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	if (p2 == 0) {
		SafeActivityOptions v5 = new SafeActivityOptions(v6);
		ActivityOptions v6 = ActivityOptions.fromBundle(p2);
		SafeActivityOptions v4 = v5;
		long v8 = Binder.clearCallingIdentity();
		if (v4 == 0) {
			ActivityOptions v10 = v4.getOptions(ActivityTaskSupervisor);
			WindowManagerService.boostPriorityForLockedSection();
			if (v10 == 0) {
				if (getLaunchActivityType() == 2) {
					if (getLaunchActivityType() == 3) {
						this.mService.deferWindowLayout();
						Task v13 = this.mRootWindowContainer.anyTaskForId(p1, 2, v10, 1);
						if (v13 == 0) {
							if (0 == 0) {
								TaskDisplayArea v14 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
								v14.moveHomeRootTaskToFront("startActivityFromRecents");
								boolean v16 = ActivityTaskManagerService.mAmInternal.shouldConfirmCredentials(Task.mUserId);
								if (v16 != 0) {
									ActivityRecord v17 = v13.getRootActivity();
									if (v17 == 0) {
										Intent v18 = Task.intent.addFlags(1048576);
										WindowManagerService.resetPriorityAfterLockedSection();
										ActivityStartController v20 = this.mService.getActivityStartController();
										int v21 = v20.startActivityInPackage(Task.mCallingUid, v2, v3, Task.mCallingPackage, Task.mCallingFeatureId, Task.intent, 0, 0, 0, 0, 0, v4, Task.mUserId, v13, "startActivityFromRecents", 0, 0, 0);
										WindowManagerService.boostPriorityForLockedSection();
										this.mService.continueWindowLayout();
										WindowManagerService.resetPriorityAfterLockedSection();
										int v9 = v21;
										Binder.restoreCallingIdentity(v8);
										return v9;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startActivityFromRecents(int p1, Bundle p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	SafeActivityOptions v4 = SafeActivityOptions.fromBundle(p2);
	long v5 = Binder.clearCallingIdentity();
	int v6 = this.mTaskSupervisor.startActivityFromRecents(v2, v3, p1, v4);
	Binder.restoreCallingIdentity(v5);
	return v6;
}
