Based on the provided information and analysis of similar APIs, I would assign an access control level to the `moveRootTaskToDisplay` method.

The method interacts with sensitive system components, such as `RootWindowContainer`, `DisplayContent`, and `TaskDisplayArea`. It also performs operations that can impact the system's behavior, like moving tasks between displays and reparenting tasks.

Looking at the similar APIs provided:

* `setFocusedRootTask(I)V` has an access control level of `SYS_OR_SIG`.
* `getTaskBounds(I)Landroid/graphics/Rect;` has an access control level of `SYS_OR_SIG`.
* `removeRootTasksInWindowingModes([I)V` has an access control level of `SYS_OR_SIG`.
* `resizeTask(ILandroid/graphics/Rect;I)Z` has an access control level of `SYS_OR_SIG`.
* `removeRootTasksWithActivityTypes([I)V` has an access control level of `SYS_OR_SIG`.

All these similar APIs have a high access control level, indicating that they require system or signature-level permissions to execute.

Given the similarities in functionality and the potential impact on the system's behavior, I would assign an access control level of `SYS_OR_SIG` to the `moveRootTaskToDisplay` method.

Here is the final access control level in JSON format:

```json
{
  "access_control_level": "SYS_OR_SIG"
}
```

This assignment ensures that only authorized system components or applications with signature-level permissions can call this method, reducing the risk of unauthorized modifications to the system's behavior.