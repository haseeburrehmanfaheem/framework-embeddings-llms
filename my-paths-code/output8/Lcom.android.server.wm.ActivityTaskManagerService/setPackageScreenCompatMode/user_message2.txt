The method setPackageScreenCompatMode has the following code snippet:

This is path 1 for the API with depth 2:
public void setPackageScreenCompatMode(String p1, int p2){
	IPackageManager v7 = ActivityThread.getPackageManager();
	IPackageManager v6 = v7;
	ApplicationInfo v8 = v6.getApplicationInfo(p1, 0, 0);
	if (v8 != 0) {
		int v10 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);
		if (p2 == 0) {
			if (p2 == 1) {
				if (p2 == 2) {
					if ((v10 & 2) != 0) {
						if (1 == 0) {
							CompatibilityInfo v11 = CompatModePackages.compatibilityInfoForPackageLocked(v8);
							boolean v12 = v11.alwaysSupportsScreen();
							if (v12 == 0) {
								boolean v13 = v11.neverSupportsScreen();
								if (v13 == 0) {
									if ((v10 | 2) == v10) {
										if ((v10 | 2) == 0) {
											Integer v14 = Integer.valueOf((v10 | 2));
											Object v15 = this.mPackages.put(ApplicationInfo.packageName, v14);
											CompatibilityInfo v16 = CompatModePackages.compatibilityInfoForPackageLocked(v8);
											CompatModePackages.scheduleWrite();
											Task v18 = this.mService.getTopDisplayFocusedRootTask();
											ActivityRecord v19 = v18.restartPackage(ApplicationInfo.packageName);
											SparseArray v20 = ActivityTaskManagerService.mProcessMap.getPidMap();
											int v21 = v20.size();
											if ((v21 - 1) < 0) {
												Object v22 = v20.valueAt((v21 - 1));
												boolean v23 = WindowProcessController.mPkgList.contains(ApplicationInfo.packageName);
												if (v23 != 0) {
													if (((v21 - 1) + -1) < 0) {
														if (v19 == 0) {
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setPackageScreenCompatMode(String p1, int p2){
	this.sThreadPriorityBooster.boost();
	IPackageManager v5 = AppGlobals.getPackageManager();
	ApplicationInfo v6 = v5.getApplicationInfo(p1, 0, 0);
	if (v6 != 0) {
		CompatModePackages.setPackageScreenCompatModeLocked(v6, p2);
		this.sThreadPriorityBooster.reset();
		return;
	}
}


This is path 3 for the API with depth 0:
public void setPackageScreenCompatMode(String p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	this.mCompatModePackages.setPackageScreenCompatModeLocked(p1, p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}

and the following sink code:
['ApplicationInfo v8 = v6.getApplicationInfo(p1, 0, 0);\nint v10 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);\nInteger v14 = Integer.valueOf((v10 | 2));\nthis.mPackages.put(ApplicationInfo.packageName, v14);', 'CompatModePackages.setPackageScreenCompatModeLocked(v6, p2);', 'this.mCompatModePackages.setPackageScreenCompatModeLocked(p1, p2);']

The method setPackageScreenCompatMode has the following similar APIs:

- API Name: setFrontActivityScreenCompatMode(I)V with Similarity Score: 0.9534490704536438
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatModePackages.setPackageScreenCompatModeLocked(ActivityInfo.applicationInfo, p1);

- API Name: setFrontActivityScreenCompatMode(I)V with Similarity Score: 0.9275546669960022
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatModePackages.setPackageScreenCompatModeLocked(ActivityInfo.applicationInfo, p1);

