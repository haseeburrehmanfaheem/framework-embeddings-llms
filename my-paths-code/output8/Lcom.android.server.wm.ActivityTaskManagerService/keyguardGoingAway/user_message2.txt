The method keyguardGoingAway in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void keyguardGoingAway(int p1){
	if (v3 != 0) {
		long v4 = Binder.clearCallingIdentity();
		if ((p1 & 16) == 0) {
			if (0 != 0) {
				this.sThreadPriorityBooster.boost();
				if (0 != 0) {
					TaskDisplayArea v13 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
					TaskDisplayArea v12 = v13;
					Task v14 = this.mRootHomeTask;
					if (v14 == 0) {
						ActivityRecord v16 = TaskFragment.topRunningActivity(0);
						ActivityRecord v15 = v16;
						if (v15 == 0) {
							boolean v17 = v15.isActivityTypeHome();
							if (v17 == 0) {
								Task v18 = this.task;
								this.mCache.removeRunningEntry(Task.mTaskId);
								this.sThreadPriorityBooster.reset();
								ActivityTaskManagerService$$ExternalSyntheticLambda1 v23 = new ActivityTaskManagerService$$ExternalSyntheticLambda1(p0,p1);
								this.mRootWindowContainer.forAllDisplays(v23);
								Binder.restoreCallingIdentity(v4);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void keyguardGoingAway(int p1){
	if (v3 != 0) {
		long v4 = Binder.clearCallingIdentity();
		this.sThreadPriorityBooster.boost();
		if ((p1 & 16) == 0) {
			if (0 != 0) {
				WindowManagerService.boostPriorityForLockedSection();
				if (0 != 0) {
					TaskDisplayArea v10 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea();
					Task v11 = v10.getRootHomeTask();
					if (v11 == 0) {
						ActivityRecord v12 = v11.topRunningActivity();
						if (v12 == 0) {
							boolean v13 = v12.isActivityTypeHome();
							if (v13 == 0) {
								Task v14 = v12.getTask();
								WindowManagerService.mTaskSnapshotController.removeSnapshotCache(Task.mTaskId);
								WindowManagerService.resetPriorityAfterLockedSection();
								ActivityTaskManagerService$$ExternalSyntheticLambda1 v17 = new ActivityTaskManagerService$$ExternalSyntheticLambda1(p0,p1);
								this.mRootWindowContainer.forAllDisplays(v17);
								this.sThreadPriorityBooster.reset();
								Binder.restoreCallingIdentity(v4);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void keyguardGoingAway(int p1){
	ActivityTaskManagerService.enforceNotIsolatedCaller("keyguardGoingAway");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	if ((p1 & 16) == 0) {
		if (this.mKeyguardShown == 0) {
			this.mDemoteTopAppReasons = (this.mDemoteTopAppReasons | 1);
			ActivityTaskManagerService$$ExternalSyntheticLambda1 v4 = new ActivityTaskManagerService$$ExternalSyntheticLambda1(p0,p1);
			this.mRootWindowContainer.forAllDisplays(v4);
			WindowManagerService.resetPriorityAfterLockedSection();
			Binder.restoreCallingIdentity(v2);
			return;
		}
	}
}

and the following sink code:
['long v4 = Binder.clearCallingIdentity();\nActivityTaskManagerService$$ExternalSyntheticLambda1 v23 = new ActivityTaskManagerService$$ExternalSyntheticLambda1(p0,p1);\nthis.mRootWindowContainer.forAllDisplays(v23);', 'ActivityTaskManagerService.enforceNotIsolatedCaller("keyguardGoingAway");\nlong v2 = Binder.clearCallingIdentity();\nActivityTaskManagerService$$ExternalSyntheticLambda1 v4 = new ActivityTaskManagerService$$ExternalSyntheticLambda1(p0,p1);\nthis.mRootWindowContainer.forAllDisplays(v4);']

The method keyguardGoingAway has the following similar APIs:

- API Name: setLockScreenShown(ZZ)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8843737244606018, Code:
ActivityTaskManagerService$$ExternalSyntheticLambda11 v13 = new ActivityTaskManagerService$$ExternalSyntheticLambda11(p0,p1,p2);
this.mRootWindowContainer.forAllDisplays(v13);
  - Access Control Level: SYS_OR_SIG

- API Name: removeRootTasksInWindowingModes([I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8036282658576965, Code:
int v8 = this.mChildren.size();
Object v10 = this.mChildren.get((v7 + -1));
ArrayList v12 = new ArrayList();
DisplayContent$$ExternalSyntheticLambda29 v14 = new DisplayContent$$ExternalSyntheticLambda29(p1,v12);
RootWindowContainer.mTaskSupervisor.removeRootTask(v18);
  - Access Control Level: SYS_OR_SIG

- API Name: removeRootTasksWithActivityTypes([I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.799875020980835, Code:
int v8 = this.mChildren.size();
Object v10 = this.mChildren.get((v7 + -1));
ArrayList v12 = new ArrayList();
DisplayContent$$ExternalSyntheticLambda23 v14 = new DisplayContent$$ExternalSyntheticLambda23(p1,v12);
DisplayContent.forAllRootTasks(v14);
RootWindowContainer.mTaskSupervisor.removeRootTask(v18);
  - Access Control Level: SYS_OR_SIG

- API Name: getAllRootTaskInfosOnDisplay(I)Ljava/util/List; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7907407879829407, Code:
DisplayContent v8 = RootWindowContainer.getDisplayContent(p1);
RootWindowContainer$$ExternalSyntheticLambda12 v9 = new RootWindowContainer$$ExternalSyntheticLambda12(RootWindowContainer,v6);
v8.forAllRootTasks(v9);
ArrayList v5 = v6;
return v5;
  - Access Control Level: SYS_OR_SIG

- API Name: setFocusedTask(I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7852219343185425, Code:
Task v14 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
ActivityRecord v19 = Task.getActivity(v17);
boolean v21 = ActivityRecord.isFocusable();
WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
  - Access Control Level: SYS_OR_SIG

