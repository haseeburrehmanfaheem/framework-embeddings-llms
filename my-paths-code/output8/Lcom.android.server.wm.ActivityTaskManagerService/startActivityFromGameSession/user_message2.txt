The method startActivityFromGameSession has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivityFromGameSession(IApplicationThread p1, String p2, String p3, int p4, int p5, Intent p6, int p7, int p8){
	if (v1 != 0) {
		if (v4 == 0) {
			ActivityOptions v6 = new ActivityOptions();
			ActivityOptions v5 = v6;
			this.mLaunchTaskId = p7;
			int v10 = this.mAmInternal.handleIncomingUser(p4, p5, p8, 0, 0, "startActivityFromGameSession", 0);
			int v9 = v10;
			long v11 = Binder.clearCallingIdentity();
			ActivityStartController v12 = this.mActivityStartController;
			ActivityStarter v14 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p6;
			ActivityStarter v15 = ActivityStarter;
			ActivityStarter$Request.reason = "startActivityFromGameSession";
			ActivityStarter v16 = ActivityStarter;
			ActivityStarter v13 = v16;
			ActivityStarter v17 = v13.setCaller(p1);
			ActivityStarter v18 = v17.setCallingUid(p5);
			ActivityStarter v19 = v18.setCallingPid(p4);
			String v20 = p6.getPackage();
			ActivityStarter v21 = v19.setCallingPackage(v20);
			ActivityStarter v22 = v21.setCallingFeatureId(p3);
			ActivityStarter v23 = v22.setUserId(v9);
			Bundle v24 = v5.toBundle();
			if (v24 == 0) {
				SafeActivityOptions v27 = new SafeActivityOptions(v28);
				ActivityOptions v28 = ActivityOptions.fromBundle(v24);
				SafeActivityOptions v26 = v27;
				ActivityStarter$Request.activityOptions = v26;
				ActivityStarter v30 = ActivityStarter;
				ActivityStarter v25 = v30;
				int v31 = Binder.getCallingUid();
				ActivityStarter v32 = v25.setRealCallingUid(v31);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v39 = ActivityRecord$Token.mActivityRef.get();
						if (v39 == 0) {
							Task v40 = v39.getRootTask();
							if (v40 != 0) {
								ActivityRecord v38 = 0;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v41 = this.mActivityMetricsLogger;
									if (0 != 0) {
										ActivityMetricsLogger$LaunchingState v50 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v50, v43);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v43);
										ActivityMetricsLogger$LaunchingState v42 = v50;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v57 = Binder.getCallingPid();
												this.realCallingPid = v57;
												if (this.realCallingUid != -1) {
													int v58 = Binder.getCallingUid();
													this.realCallingUid = v58;
													if (this.callingUid < 0) {
														this.callingPid = -1;
														if (this.caller == 0) {
															Intent v59 = new Intent(this.intent);
															this.ephemeralIntent = v59;
															Intent v61 = new Intent(this.intent);
															this.intent = v61;
															ComponentName v63 = v61.getComponent();
															if (v63 == 0) {
																int v64 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																ResolveInfo v65 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v64);
																this.resolveInfo = v65;
																if (v65 != 0) {
																	UserInfo v66 = this.mSupervisor.getUserInfo(this.userId);
																	if (v66 == 0) {
																		boolean v67 = v66.isManagedProfile();
																		if (v67 == 0) {
																			ActivityInfo v68 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																			this.activityInfo = v68;
																			if (v68 == 0) {
																				if (ActivityStarter$Request.intent == 0) {
																					this.sThreadPriorityBooster.boost();
																					if (ActivityStarter$Request.globalConfig == 0) {
																						int v72 = RootWindowContainer.getChildCount();
																						if ((v72 + -1) < 0) {
																							WindowContainer v73 = RootWindowContainer.getChildAt((v72 + -1));
																							Task v74 = v73.getFocusedRootTask();
																							if (v74 == 0) {
																								if (((v72 + -1) + -1) < 0) {
																									WindowContainer v75 = RootWindowContainer.getChildAt(((v72 + -1) + -1));
																									Task v76 = v75.getFocusedRootTask();
																									if (v76 == 0) {
																										Task v71 = v76;
																										if (v71 == 0) {
																											if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																												long v77 = Binder.clearCallingIdentity();
																												int v78 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																												if (v78 == 0) {
																													this.sThreadPriorityBooster.reset();
																													this.mController.onExecutionComplete(ActivityStarter);
																													int v33 = v78;
																													Binder.restoreCallingIdentity(v11);
																													return v33;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startActivityFromGameSession(IApplicationThread p1, String p2, String p3, int p4, int p5, Intent p6, int p7, int p8){
	if (v1 != 0) {
		if (v4 == 0) {
			ActivityOptions v6 = new ActivityOptions();
			ActivityOptions v5 = v6;
			this.mLaunchTaskId = p7;
			int v10 = this.mAmInternal.handleIncomingUser(p4, p5, p8, 0, 0, "startActivityFromGameSession", 0);
			int v9 = v10;
			long v11 = Binder.clearCallingIdentity();
			ActivityStartController v12 = this.mActivityStartController;
			ActivityStarter v14 = this.mFactory.obtain();
			ActivityStarter v15 = v14.setIntent(p6);
			ActivityStarter v16 = v15.setReason("startActivityFromGameSession");
			ActivityStarter v13 = v16;
			ActivityStarter$Request.caller = p1;
			ActivityStarter v17 = ActivityStarter;
			ActivityStarter$Request.callingUid = p5;
			ActivityStarter v18 = ActivityStarter;
			ActivityStarter$Request.callingPid = p4;
			ActivityStarter v19 = ActivityStarter;
			String v20 = p6.getPackage();
			ActivityStarter$Request.callingPackage = v20;
			ActivityStarter v21 = ActivityStarter;
			ActivityStarter$Request.callingFeatureId = p3;
			ActivityStarter v22 = ActivityStarter;
			ActivityStarter$Request.userId = v9;
			ActivityStarter v23 = ActivityStarter;
			Bundle v24 = v5.toBundle();
			SafeActivityOptions v26 = SafeActivityOptions.fromBundle(v24);
			ActivityStarter v27 = ActivityStarter.setActivityOptions(v26);
			ActivityStarter v25 = v27;
			int v28 = Binder.getCallingUid();
			ActivityStarter$Request.realCallingUid = v28;
			ActivityStarter v29 = ActivityStarter;
			ActivityStarter.onExecutionStarted();
			if (ActivityStarter$Request.intent == 0) {
				WindowManagerService.boostPriorityForLockedSection();
				ActivityRecord v33 = ActivityRecord.forTokenLocked(ActivityStarter$Request.resultTo);
				if (ActivityStarter$Request.realCallingUid != -1) {
					int v34 = Binder.getCallingUid();
					ActivityMetricsLogger v35 = this.mSupervisor.getActivityMetricsLogger();
					ActivityMetricsLogger$LaunchingState v36 = v35.notifyActivityLaunching(ActivityStarter$Request.intent, v33, ActivityStarter$Request.realCallingUid);
					WindowManagerService.resetPriorityAfterLockedSection();
					if (ActivityStarter$Request.activityInfo != 0) {
						if (ActivityStarter$Request.intent == 0) {
							WindowManagerService.boostPriorityForLockedSection();
							if (ActivityStarter$Request.globalConfig == 0) {
								Task v39 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
								if (v39 == 0) {
									Task.mConfigWillChange = 1;
									if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
										long v40 = Binder.clearCallingIdentity();
										int v41 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
										if (v41 == 0) {
											WindowManagerService.resetPriorityAfterLockedSection();
											ActivityStarter.onExecutionComplete();
											int v30 = v41;
											Binder.restoreCallingIdentity(v11);
											return v30;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startActivityFromGameSession(IApplicationThread p1, String p2, String p3, int p4, int p5, Intent p6, int p7, int p8){
	if (v1 != 0) {
		p0.assertPackageMatchesCallingUid(p2);
		ActivityOptions v3 = ActivityOptions.makeBasic();
		v3.setLaunchTaskId(p7);
		int v5 = p0.handleIncomingUser(p4, p5, p8, "startActivityFromGameSession");
		long v6 = Binder.clearCallingIdentity();
		ActivityStartController v7 = p0.getActivityStartController();
		ActivityStarter v8 = v7.obtainStarter(p6, "startActivityFromGameSession");
		ActivityStarter v9 = v8.setCaller(p1);
		ActivityStarter v10 = v9.setCallingUid(p5);
		ActivityStarter v11 = v10.setCallingPid(p4);
		String v12 = p6.getPackage();
		ActivityStarter v13 = v11.setCallingPackage(v12);
		ActivityStarter v14 = v13.setCallingFeatureId(p3);
		ActivityStarter v15 = v14.setUserId(v5);
		Bundle v16 = v3.toBundle();
		ActivityStarter v17 = v15.setActivityOptions(v16);
		int v18 = Binder.getCallingUid();
		ActivityStarter v19 = v17.setRealCallingUid(v18);
		int v20 = v19.execute();
		Binder.restoreCallingIdentity(v6);
		return v20;
	}
}

and the following sink code:
['ActivityOptions v6 = new ActivityOptions();\nthis.mLaunchTaskId = p7;\nint v10 = this.mAmInternal.handleIncomingUser(p4, p5, p8, 0, 0, "startActivityFromGameSession", 0);\nActivityStarter v14 = this.mFactory.obtain();\nActivityStarter$Request.intent = p6;\nActivityStarter v17 = v13.setCaller(p1);\nActivityStarter v18 = v17.setCallingUid(p5);\nActivityStarter v19 = v18.setCallingPid(p4);\nString v20 = p6.getPackage();\nActivityStarter v21 = v19.setCallingPackage(v20);\nActivityStarter v22 = v21.setCallingFeatureId(p3);\nActivityStarter v23 = v22.setUserId(v9);\nreturn v30;', 'ActivityOptions v3 = ActivityOptions.makeBasic();\nv3.setLaunchTaskId(p7);\nint v5 = p0.handleIncomingUser(p4, p5, p8, "startActivityFromGameSession");\nActivityStarter v8 = v7.obtainStarter(p6, "startActivityFromGameSession");\nActivityStarter v9 = v8.setCaller(p1);\nActivityStarter v10 = v9.setCallingUid(p5);\nActivityStarter v11 = v10.setCallingPid(p4);\nString v12 = p6.getPackage();\nActivityStarter v13 = v11.setCallingPackage(v12);\nActivityStarter v14 = v13.setCallingFeatureId(p3);\nActivityStarter v15 = v14.setUserId(v5);\nint v20 = v19.execute();']

The method startActivityFromGameSession has the following similar APIs:

- API Name: startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I with Similarity Score: 0.8460676670074463
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v7 = this.mFactory.obtain();
ActivityStarter$Request.intent = p5;
ActivityStarter v10 = v6.setCallingUid(p4);
ActivityStarter v11 = v10.setCallingPackage(p1);
ActivityStarter v12 = v11.setCallingFeatureId(p2);
ActivityStarter v13 = v12.setResolvedType(p6);
ActivityStarter v14 = v13.setVoiceSession(p7);
ActivityStarter v15 = v14.setVoiceInteractor(p8);
ActivityStarter v16 = v15.setStartFlags(p9);
ActivityStarter v17 = v16.setProfilerInfo(p10);
SafeActivityOptions v20 = new SafeActivityOptions(v21);
ActivityOptions v21 = ActivityOptions.fromBundle(p11);
ActivityStarter$Request.activityOptions = v19;
ActivityStarter v24 = v18.setUserId(v3);
ActivityStarter v25 = v24.setAllowBackgroundActivityStart(1);

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I with Similarity Score: 0.8334959745407104
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityStarter v47 = this.mFactory.obtain();
ActivityStarter v48 = v47.setIntent(p4);
ActivityStarter v49 = v48.setReason("startActivityAsUser");
ActivityStarter$Request.caller = p1;
ActivityStarter$Request.callingPackage = p2;
ActivityStarter$Request.callingFeatureId = p3;
ActivityStarter$Request.resolvedType = p5;
ActivityStarter$Request.resultTo = p6;
ActivityStarter$Request.resultWho = p7;
ActivityStarter$Request.requestCode = p8;
ActivityStarter$Request.startFlags = p9;
ActivityStarter$Request.profilerInfo = p10;
ActivityStarter$Request.activityOptions = v2;
ActivityStarter$Request.userId = v43;

