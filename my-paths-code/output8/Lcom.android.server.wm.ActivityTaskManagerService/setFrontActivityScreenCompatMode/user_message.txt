This is path 1 for the API with depth 2:
public void setFrontActivityScreenCompatMode(int p1){
	int v7 = RootWindowContainer.getChildCount();
	if ((v7 + -1) < 0) {
		WindowContainer v8 = RootWindowContainer.getChildAt((v7 + -1));
		Task v9 = v8.getFocusedRootTask();
		if (v9 == 0) {
			if (((v7 + -1) + -1) < 0) {
				WindowContainer v10 = RootWindowContainer.getChildAt(((v7 + -1) + -1));
				Task v11 = v10.getFocusedRootTask();
				if (v11 == 0) {
					Task v6 = v11;
					Task v5 = v6;
					if (v5 == 0) {
						ActivityRecord v14 = TaskFragment.topRunningActivity(0, 1);
						ActivityRecord v13 = v14;
						ActivityRecord v12 = v13;
						if (v12 != 0) {
							Object v17 = this.mPackages.get(ApplicationInfo.packageName);
							if (v17 == 0) {
								int v18 = v17.intValue();
								int v16 = v18;
								if (p1 == 0) {
									if (p1 == 1) {
										if (p1 == 2) {
											if ((v16 & 2) != 0) {
												if (1 == 0) {
													boolean v20 = CompatModePackages.getPackageCompatModeEnabledLocked(ActivityInfo.applicationInfo);
													float v21 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
													Configuration v22 = this.mService.getGlobalConfiguration();
													CompatibilityInfo v23 = new CompatibilityInfo(ActivityInfo.applicationInfo,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v20,v21);
													CompatibilityInfo v19 = v23;
													boolean v25 = v19.alwaysSupportsScreen();
													if (v25 == 0) {
														boolean v26 = v19.neverSupportsScreen();
														if (v26 == 0) {
															if ((v16 | 2) == v16) {
																if ((v16 | 2) == 0) {
																	Integer v27 = Integer.valueOf((v16 | 2));
																	Object v28 = this.mPackages.put(ApplicationInfo.packageName, v27);
																	boolean v30 = CompatModePackages.getPackageCompatModeEnabledLocked(ActivityInfo.applicationInfo);
																	float v31 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
																	Configuration v32 = this.mService.getGlobalConfiguration();
																	CompatibilityInfo v33 = new CompatibilityInfo(ActivityInfo.applicationInfo,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v30,v31);
																	CompatibilityInfo v29 = v33;
																	this.mHandler.removeMessages(300);
																	Message v37 = this.mHandler.obtainMessage(300);
																	boolean v38 = this.mHandler.sendMessageDelayed(v37, 10000);
																	Task v40 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
																	Task v39 = v40;
																	ActivityRecord v42 = Task.topRunningActivity();
																	Task$$ExternalSyntheticLambda28 v43 = new Task$$ExternalSyntheticLambda28();
																	ArgumentPlaceholder v45 = PooledLambda.__(ActivityRecor.class);
																	PooledConsumer v46 = PooledLambda.obtainConsumer(v43, v45, v42, ApplicationInfo.packageName);
																	Task.forAllActivities(v46);
																	v46.recycle();
																	ActivityRecord v41 = v42;
																	SparseArray v49 = this.mPidMap;
																	int v50 = v49.size();
																	if ((v50 - 1) < 0) {
																		Object v51 = v49.valueAt((v50 - 1));
																		boolean v52 = WindowProcessController.mPkgList.contains(ApplicationInfo.packageName);
																		if (v52 != 0) {
																			if (this.mThread == 0) {
																				boolean v53 = 1;
																				if (((v50 - 1) + -1) < 0) {
																					if (v41 == 0) {
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setFrontActivityScreenCompatMode(int p1){
	this.sThreadPriorityBooster.boost();
	Task v5 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v4 = v5;
	if (v4 == 0) {
		ActivityRecord v7 = TaskFragment.topRunningActivity(0);
		ActivityRecord v6 = v7;
		if (v6 != 0) {
			int v9 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);
			if (p1 == 0) {
				if (p1 == 1) {
					if (p1 == 2) {
						if ((v9 & 2) != 0) {
							if (1 == 0) {
								CompatibilityInfo v10 = CompatModePackages.compatibilityInfoForPackageLocked(ActivityInfo.applicationInfo);
								boolean v11 = v10.alwaysSupportsScreen();
								if (v11 == 0) {
									boolean v12 = v10.neverSupportsScreen();
									if (v12 == 0) {
										if ((v9 | 2) == v9) {
											if ((v9 | 2) == 0) {
												Integer v13 = Integer.valueOf((v9 | 2));
												Object v14 = this.mPackages.put(ApplicationInfo.packageName, v13);
												CompatibilityInfo v15 = CompatModePackages.compatibilityInfoForPackageLocked(ActivityInfo.applicationInfo);
												CompatModePackages.scheduleWrite();
												Task v17 = this.mService.getTopDisplayFocusedRootTask();
												ActivityRecord v18 = v17.restartPackage(ApplicationInfo.packageName);
												SparseArray v19 = ActivityTaskManagerService.mProcessMap.getPidMap();
												int v20 = v19.size();
												if ((v20 - 1) < 0) {
													Object v21 = v19.valueAt((v20 - 1));
													boolean v22 = WindowProcessController.mPkgList.contains(ApplicationInfo.packageName);
													if (v22 != 0) {
														if (((v20 - 1) + -1) < 0) {
															if (v18 == 0) {
																this.sThreadPriorityBooster.reset();
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setFrontActivityScreenCompatMode(int p1){
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = p0.getTopDisplayFocusedRootTask();
	if (v3 == 0) {
		ActivityRecord v4 = v3.topRunningActivity();
		if (v4 != 0) {
			this.mCompatModePackages.setPackageScreenCompatModeLocked(ActivityInfo.applicationInfo, p1);
			WindowManagerService.resetPriorityAfterLockedSection();
			return;
		}
	}
}
