The method reportAssistContextExtras in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void reportAssistContextExtras(IBinder p1, Bundle p2, AssistStructure p3, AssistContent p4, Uri p5){
	ActivityTaskManagerService$PendingAssistExtras.result = p2;
	ActivityTaskManagerService$PendingAssistExtras.structure = p3;
	ActivityTaskManagerService$PendingAssistExtras.content = p4;
	if (p5 == 0) {
		ActivityTaskManagerService$PendingAssistExtras.extras.putParcelable("android.intent.extra.REFERRER", p5);
		WindowContainer v3 = this.mParent;
		if (v3 == 0) {
			boolean v4 = v3.isAttached();
			WindowContainer v5 = WindowContainer.getParent();
			if (v5 == 0) {
				boolean v6 = v5.isAttached();
				if (v6 == 0) {
					boolean v2 = 1;
					if (v6 == 0) {
						return 1;
						if (isAttached() != 0) {
							if (p3 == 0) {
								Task v7 = ActivityTaskManagerService$PendingAssistExtras.activity.getTask();
								p3.setTaskId(Task.mTaskId);
								p3.setActivityComponent(ActivityRecord.mActivityComponent);
								p3.setHomeActivity(ActivityTaskManagerService$PendingAssistExtras.isHome);
								ActivityTaskManagerService$PendingAssistExtras.haveResult = 1;
								p1.notifyAll();
								if (ActivityTaskManagerService$PendingAssistExtras.intent != 0) {
									if (ActivityTaskManagerService$PendingAssistExtras.receiver != 0) {
										p0.buildAssistBundleLocked(p1, p2);
										boolean v16 = this.mPendingAssistExtras.remove(p1);
										this.mUiHandler.removeCallbacks(p1);
										if (v16 != 0) {
											if (ActivityTaskManagerService$PendingAssistExtras.receiver == 0) {
												if (ActivityTaskManagerService$PendingAssistExtras.receiver == 0) {
													ActivityTaskManagerService$PendingAssistExtras.receiver.onHandleAssistData(0);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void reportAssistContextExtras(IBinder p1, Bundle p2, AssistStructure p3, AssistContent p4, Uri p5){
	ActivityTaskManagerService$PendingAssistExtras.result = p2;
	ActivityTaskManagerService$PendingAssistExtras.structure = p3;
	ActivityTaskManagerService$PendingAssistExtras.content = p4;
	if (p5 == 0) {
		ActivityTaskManagerService$PendingAssistExtras.extras.putParcelable("android.intent.extra.REFERRER", p5);
		WindowContainer v3 = WindowContainer.getParent();
		if (v3 == 0) {
			boolean v4 = v3.isAttached();
			if (v4 == 0) {
				boolean v2 = 1;
				if (v2 != 0) {
					if (p3 == 0) {
						Task v5 = this.task;
						this.mTaskId = Task.mTaskId;
						this.mActivityComponent = ActivityRecord.mActivityComponent;
						this.mIsHomeActivity = ActivityTaskManagerService$PendingAssistExtras.isHome;
						ActivityTaskManagerService$PendingAssistExtras.haveResult = 1;
						p1.notifyAll();
						if (ActivityTaskManagerService$PendingAssistExtras.intent != 0) {
							if (ActivityTaskManagerService$PendingAssistExtras.receiver != 0) {
								this.sThreadPriorityBooster.boost();
								if (p2 == 0) {
									ActivityTaskManagerService$PendingAssistExtras.extras.putBundle("android.intent.extra.ASSIST_CONTEXT", p2);
									if (ActivityTaskManagerService$PendingAssistExtras.hint == 0) {
										ActivityTaskManagerService$PendingAssistExtras.extras.putBoolean(ActivityTaskManagerService$PendingAssistExtras.hint, 1);
										boolean v15 = this.mPendingAssistExtras.remove(p1);
										this.mUiHandler.removeCallbacks(p1);
										if (v15 != 0) {
											if (ActivityTaskManagerService$PendingAssistExtras.receiver == 0) {
												this.sThreadPriorityBooster.reset();
												if (ActivityTaskManagerService$PendingAssistExtras.receiver == 0) {
													ActivityTaskManagerService$PendingAssistExtras.receiver.onHandleAssistData(0);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void reportAssistContextExtras(IBinder p1, Bundle p2, AssistStructure p3, AssistContent p4, Uri p5){
	ActivityTaskManagerService$PendingAssistExtras.result = p2;
	ActivityTaskManagerService$PendingAssistExtras.structure = p3;
	ActivityTaskManagerService$PendingAssistExtras.content = p4;
	if (p5 == 0) {
		ActivityTaskManagerService$PendingAssistExtras.extras.putParcelable("android.intent.extra.REFERRER", p5);
		boolean v2 = ActivityTaskManagerService$PendingAssistExtras.activity.isAttached();
		if (v2 != 0) {
			if (p3 == 0) {
				Task v3 = ActivityTaskManagerService$PendingAssistExtras.activity.getTask();
				p3.setTaskId(Task.mTaskId);
				p3.setActivityComponent(ActivityRecord.mActivityComponent);
				p3.setHomeActivity(ActivityTaskManagerService$PendingAssistExtras.isHome);
				ActivityTaskManagerService$PendingAssistExtras.haveResult = 1;
				p1.notifyAll();
				if (ActivityTaskManagerService$PendingAssistExtras.intent != 0) {
					if (ActivityTaskManagerService$PendingAssistExtras.receiver != 0) {
						WindowManagerService.boostPriorityForLockedSection();
						p0.buildAssistBundleLocked(p1, p2);
						boolean v10 = this.mPendingAssistExtras.remove(p1);
						this.mUiHandler.removeCallbacks(p1);
						if (v10 != 0) {
							if (ActivityTaskManagerService$PendingAssistExtras.receiver == 0) {
								WindowManagerService.resetPriorityAfterLockedSection();
								if (ActivityTaskManagerService$PendingAssistExtras.receiver == 0) {
									ActivityTaskManagerService$PendingAssistExtras.receiver.onHandleAssistData(0);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ActivityTaskManagerService$PendingAssistExtras.result = p2;\nActivityTaskManagerService$PendingAssistExtras.structure = p3;\nActivityTaskManagerService$PendingAssistExtras.content = p4;', 'ActivityTaskManagerService$PendingAssistExtras.extras.putParcelable("android.intent.extra.REFERRER", p5);', 'Task v7 = ActivityTaskManagerService$PendingAssistExtras.activity.getTask();\np3.setTaskId(Task.mTaskId);\np3.setActivityComponent(ActivityRecord.mActivityComponent);\np3.setHomeActivity(ActivityTaskManagerService$PendingAssistExtras.isHome);', 'this.mTaskId = Task.mTaskId;\nthis.mActivityComponent = ActivityRecord.mActivityComponent;\nthis.mIsHomeActivity = ActivityTaskManagerService$PendingAssistExtras.isHome;']

The method reportAssistContextExtras has the following similar APIs:

- API Name: getAssistContextExtras(I)Landroid/os/Bundle; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7621122002601624, Code:
int v1 = UserHandle.getCallingUserId();
Bundle v9 = new Bundle();
v9.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
v9.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
ActivityTaskManagerService$PendingAssistExtras v14 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,v6,v9,0,0,0,0,v1);
IApplicationThread v17 = ActivityRecord.app.getThread();
v17.requestAssistContextExtras(WindowToken.token, v14, p1, this.mViSessionId, 0);
return ActivityTaskManagerService$PendingAssistExtras.extras;
  - Similarity: 0.7341558337211609, Code:
ActivityTaskManagerService$PendingAssistExtras v2 = p0.enqueueAssistContext(p1, 0, 0, 0, 0, 0, 1, 1, v1, 0, 500, 0);
v2.wait();
p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
return ActivityTaskManagerService$PendingAssistExtras.extras;
  - Access Control Level: SYS_OR_SIG

- API Name: setActivityController(Landroid/app/IActivityController;Z)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7536606192588806, Code:
this.mController = p1;
this.mControllerIsAMonkey = p2;
Watchdog v5 = Watchdog.getInstance();
v5.setActivityController(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: getRootTaskInfo(II)Landroid/app/ActivityTaskManager$RootTaskInfo; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7514384984970093, Code:
Task v6 = RootWindowContainer.getRootTask(p1, p2);
ActivityTaskManager$RootTaskInfo v7 = RootWindowContainer.getRootTaskInfo(v6);
return v5;
  - Similarity: 0.744297444820404, Code:
Task v10 = v9.getRootTask(p1, p2);
ActivityTaskManager$RootTaskInfo v14 = new ActivityTaskManager$RootTaskInfo();
v7.fillTaskInfo(v14);
return v6;
  - Access Control Level: SYS_OR_SIG

- API Name: setFocusedTask(I)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7482978105545044, Code:
Task v14 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
ActivityRecord v19 = Task.getActivity(v17);
boolean v21 = ActivityRecord.isFocusable();
WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7280979156494141, Code:
ActivityTaskManager$RootTaskInfo v21 = new ActivityTaskManager$RootTaskInfo();
v14.fillTaskInfo(v21);
DisplayContent v24 = v14.getDisplayContent();
return v20;
  - Access Control Level: SYS_OR_SIG

