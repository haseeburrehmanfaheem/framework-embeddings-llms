The method moveTaskToFront has the following code snippet:

This is path 1 for the API with depth 2:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = ProtoLogGroup.WM_DEBUG_TASKS.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(2117696413, 1, v2);
				boolean v15 = ProtoLogGroup.WM_DEBUG_TASKS.isLogToLogcat();
				if (v15 == 0) {
					String v16 = ProtoLogGroup.WM_DEBUG_TASKS.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, 2117696413, 0, v2);
					if (p5 == 0) {
						SafeActivityOptions v22 = new SafeActivityOptions(v23);
						if (p5 == 0) {
							ActivityOptions v24 = new ActivityOptions(p5);
							ActivityOptions v23 = v24;
							SafeActivityOptions v21 = v22;
							int v28 = Binder.getCallingPid();
							int v29 = Binder.getCallingUid();
							if (v32 == 0) {
								long v33 = Binder.clearCallingIdentity();
								if (p1 == 0) {
									if (p1 != 0) {
										IBinder v35 = p1.asBinder();
										ArrayMap v36 = this.mProcessNames.getMap();
										int v37 = v36.size();
										if ((v37 + -1) < 0) {
											Object v38 = v36.valueAt((v37 + -1));
											int v39 = v38.size();
											if ((v39 + -1) < 0) {
												Object v40 = v38.valueAt((v39 + -1));
												boolean v41 = v40.hasThread();
												if (v41 == 0) {
													IApplicationThread v42 = v40.getThread();
													IBinder v43 = v42.asBinder();
													if (v43 != v35) {
														if (((v39 + -1) + -1) < 0) {
															Object v44 = v38.valueAt(((v39 + -1) + -1));
															boolean v45 = v44.hasThread();
															if (v45 == 0) {
																IApplicationThread v46 = v44.getThread();
																IBinder v47 = v46.asBinder();
																if (v47 != v35) {
																	WindowProcessController v34 = v44;
																	ActivityStartController v48 = this.mActivityStartController;
																	ActivityStarter v50 = this.mFactory.obtain();
																	ActivityStarter v51 = v50.setIntent(0);
																	ActivityStarter v52 = v51.setReason("moveTaskToFront");
																	ActivityStarter v49 = v52;
																	if (v58 == 2) {
																		if (v58 != 1) {
																			if (0 != 0) {
																				boolean v61 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(v29);
																				if (v61 == 0) {
																					if (1 == 0) {
																						if (0 == 0) {
																							boolean v53 = 0;
																							if (v53 == 0) {
																								boolean v63 = this.mAmInternal.isBackgroundActivityStartsEnabled();
																								boolean v62 = v63;
																								if (v62 != 0) {
																									Task v65 = RootWindowContainer.anyTaskForId(p3, 2);
																									Task v64 = v65;
																									if (v64 != 0) {
																										LockTaskController v66 = this.mLockTaskController;
																										boolean v68 = LockTaskController.isLockTaskModeViolation(v64, 0);
																										boolean v67 = v68;
																										if (v67 == 0) {
																											if (v21 == 0) {
																												ActivityOptions v70 = SafeActivityOptions.getOptions(0, 0, 0, this.mTaskSupervisor);
																												ActivityOptions v69 = v70;
																												Task v72 = v64.getRootTask();
																												if (v72 != 0) {
																													if ((p4 & 2) != 0) {
																														this.mUserLeaving = 1;
																														boolean v73 = WindowContainer.mTransitionController.isShellTransitionsEnabled();
																														if (v73 == 0) {
																															boolean v74 = WindowContainer.mTransitionController.isCollecting();
																															if (v74 == 0) {
																																WindowContainer.mTransitionController.collect(v64);
																																StringBuilder v76 = new StringBuilder();
																																StringBuilder v78 = v76.append("moveTaskToFront");
																																StringBuilder v79 = v76.append(" findTaskToMoveToFront");
																																String v80 = v76.toString();
																																boolean v81 = v64.isResizeable();
																																if (v81 == 0) {
																																	boolean v82 = ActivityTaskSupervisor.canUseActivityOptionsLaunchBounds(v69);
																																	if (v82 == 0) {
																																		Rect v83 = v69.getLaunchBounds();
																																		int v84 = v64.setBounds(v83);
																																		Task v85 = this.mRootWindowContainer.getOrCreateRootTask(0, v69, v64, 1);
																																		if (v85 == v72) {
																																			boolean v86 = v85.shouldResizeRootTaskWithLaunchBounds();
																																			if (v86 == 0) {
																																				v64.resize(0, 0);
																																				if (1 != 0) {
																																					ActivityRecord v88 = v64.getTopNonFinishingActivity();
																																					if (v88 != 0) {
																																						v85.moveTaskToFront(v64, 0, v69, 0, v80);
																																						TaskDisplayArea v90 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
																																						ActivityTaskSupervisor.handleNonResizableTaskIfNeeded(v64, 0, v90, v85, 0);
																																						if (v88 == 0) {
																																							if (createTransition() == 0) {
																																								this.mUserLeaving = 0;
																																								Binder.restoreCallingIdentity(v33);
																																								return;
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		ProtoLogImpl v5 = ProtoLogImpl.getSingleInstance();
		v5.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_TASKS, 2117696413, 1, 0, v2);
		this.sThreadPriorityBooster.boost();
		if (p5 == 0) {
			SafeActivityOptions v10 = new SafeActivityOptions(v11);
			ActivityOptions v11 = ActivityOptions.fromBundle(p5);
			SafeActivityOptions v9 = v10;
			int v14 = Binder.getCallingPid();
			int v15 = Binder.getCallingUid();
			ActivityTaskManagerService.assertPackageMatchesCallingUid(p2);
			long v17 = Binder.clearCallingIdentity();
			if (p1 == 0) {
				WindowProcessController v18 = ActivityTaskManagerService.getProcessController(p1);
				ActivityStartController v19 = ActivityTaskManagerService.getActivityStartController();
				ActivityStarter v20 = v19.obtainStarter(0, "moveTaskToFront");
				boolean v21 = v20.shouldAbortBackgroundActivityStart(v15, v14, p2, -1, -1, v18, 0, 0, 0, 0);
				if (v21 == 0) {
					boolean v22 = ActivityTaskManagerService.isBackgroundActivityStartsEnabled();
					if (v22 != 0) {
						Task v23 = this.mRootWindowContainer.anyTaskForId(p3);
						if (v23 != 0) {
							LockTaskController v24 = ActivityTaskManagerService.getLockTaskController();
							boolean v25 = v24.isLockTaskModeViolation(v23);
							if (v25 == 0) {
								if (v9 == 0) {
									ActivityOptions v26 = v9.getOptions(this.mTaskSupervisor);
									this.mTaskSupervisor.findTaskToMoveToFront(v23, p4, v26, "moveTaskToFront", 0);
									Binder.restoreCallingIdentity(v17);
									this.sThreadPriorityBooster.reset();
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, 2117696413, 1, 0, v2);
		WindowManagerService.boostPriorityForLockedSection();
		SafeActivityOptions v6 = SafeActivityOptions.fromBundle(p5);
		p0.moveTaskToFrontLocked(p1, p2, p3, p4, v6);
		WindowManagerService.resetPriorityAfterLockedSection();
		return;
	}
}

and the following sink code:
['Task v65 = RootWindowContainer.anyTaskForId(p3, 2);\nActivityStarter v50 = this.mFactory.obtain();\nActivityStarter v51 = v50.setIntent(0);\nActivityStarter v52 = v51.setReason("moveTaskToFront");\nv64.moveTaskToFront(v64, 0, v69, 0, v80);', 'WindowProcessController v18 = ActivityTaskManagerService.getProcessController(p1);\nActivityStartController v19 = ActivityTaskManagerService.getActivityStartController();\nActivityStarter v20 = v19.obtainStarter(0, "moveTaskToFront");\nTask v23 = this.mRootWindowContainer.anyTaskForId(p3);\nv23.moveTaskToFront(p4, v26, "moveTaskToFront", 0);', 'p0.moveTaskToFrontLocked(p1, p2, p3, p4, v6);']

The method moveTaskToFront has the following similar APIs:

- API Name: setFocusedTask(I)V with Similarity Score: 0.847790002822876
  - Access Control Level: SYS_OR_SIG and the following code:
Task v14 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
ActivityRecord v19 = Task.getActivity(v17);
boolean v21 = ActivityRecord.isFocusable();
WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);

- API Name: setFocusedRootTask(I)V with Similarity Score: 0.8431819677352905
  - Access Control Level: SYS_OR_SIG and the following code:
Task v7 = this.mRootWindowContainer.getRootTask(p1);
ActivityRecord v8 = v7.topRunningActivity();

