The method resizeTask in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean resizeTask(int p1, Rect p2, int p3){
	long v2 = Binder.clearCallingIdentity();
	if (0 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, 2, 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									WindowConfiguration v18 = v6.getWindowConfiguration();
									boolean v19 = v18.canResizeTask();
									if (v19 != 0) {
										if ((p3 & 1) == 0) {
											boolean v22 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
											if (v22 != 0) {
												this.mLayoutReasons = 0;
												WindowManagerService.mWindowPlacerLocked.deferLayout();
												if ((p3 & 2) == 0) {
													WindowContainer v24 = this.mParent;
													if (v24 != 0) {
														if (p2 == 0) {
															boolean v26 = Task.inFreeformWindowingMode();
															if (v26 != 0) {
																int v27 = p2.width();
																int v28 = p2.height();
																if (v27 <= v28) {
																	Rect v29 = Task.getRequestedOverrideBounds();
																	if (this.mResizeMode != 7) {
																		boolean v30 = v29.isEmpty();
																		if (v30 != 0) {
																			int v31 = v29.width();
																			int v32 = v29.height();
																			if (v31 <= v32) {
																				if (1 != 1) {
																					boolean v25 = 1;
																					if (v25 == 0) {
																						StringBuilder v33 = new StringBuilder();
																						StringBuilder v35 = v33.append("resizeTask_");
																						StringBuilder v36 = v33.append(this.mTaskId);
																						String v37 = v33.toString();
																						Trace.traceBegin(32, v37);
																						Configuration v39 = this.mResolvedOverrideConfiguration;
																						this.mTmpConfig.setTo(v39);
																						boolean v42 = Task.isRootTask();
																						if (v42 == 0) {
																							Task v43 = Task.getRootTask();
																							if (v43 == 0) {
																								Task v44 = Task.getRootTask();
																								DisplayContent v45 = v44.getDisplayContent();
																								if (v45 == 0) {
																									DisplayInfo v46 = v45.getDisplayInfo();
																									int v47 = Task.setBounds(p2);
																									this.mRotation = 0;
																									Task.updateSurfacePositionNonOrganized();
																									int v41 = v47;
																									if (v41 == 0) {
																										Configuration v49 = this.mResolvedOverrideConfiguration;
																										boolean v50 = this.mTmpConfig.equals(v49);
																										if ((v50 ^ 1) == 0) {
																											WindowContainer v52 = Task.getParent();
																											if (v52 != 0) {
																												Task$$ExternalSyntheticLambda6 v53 = new Task$$ExternalSyntheticLambda6();
																												ActivityRecord v55 = Task.getActivity(v53);
																												ActivityRecord v51 = v55;
																												if (v51 == 0) {
																													boolean v57 = ActivityRecord.ensureActivityConfiguration(0, 0, 0);
																													boolean v56 = v57;
																													RootWindowContainer.ensureActivitiesVisible(v51, 0, 0, 1);
																													if (v56 != 0) {
																														boolean v61 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
																														boolean v60 = v61;
																														Rect v63 = Task.getRequestedOverrideBounds();
																														int v64 = Task.setBounds(v63, 1);
																														if (v64 == 0) {
																															if (1 == 0) {
																																DisplayContent v65 = Task.getDisplayContent();
																																v65.layoutAndAssignWindowLayersIfNeeded();
																																DisplayContent v68 = Task.getDisplayContent();
																																Task.saveLaunchingStateIfNeeded(v68);
																																Trace.traceEnd(32);
																																if (this.mLayoutReasons == 0) {
																																	WindowManagerService.mWindowPlacerLocked.continueLayout(1);
																																	boolean v20 = 1;
																																	Binder.restoreCallingIdentity(v2);
																																	return v20;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean resizeTask(int p1, Rect p2, int p3){
	long v2 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
	Task v5 = v6;
	if (v5 != 0) {
		WindowConfiguration v7 = v5.getWindowConfiguration();
		if (this.mWindowingMode == 5) {
			if (this.mWindowingMode != 6) {
				boolean v8 = 0;
				if (v8 != 0) {
					if ((p3 & 1) == 0) {
						TaskFragment.mAtmService.deferWindowLayout();
						if ((p3 & 2) == 0) {
							WindowContainer v11 = Task.getParent();
							if (v11 != 0) {
								boolean v12 = Task.canResizeToBounds(p2);
								if (v12 == 0) {
									StringBuilder v13 = new StringBuilder();
									StringBuilder v15 = v13.append("resizeTask_");
									StringBuilder v16 = v13.append(this.mTaskId);
									String v17 = v13.toString();
									Trace.traceBegin(32, v17);
									Configuration v19 = Task.getResolvedOverrideConfiguration();
									this.mTmpConfig.setTo(v19);
									int v21 = Task.setBounds(p2);
									if (v21 == 0) {
										Configuration v22 = Task.getResolvedOverrideConfiguration();
										boolean v23 = this.mTmpConfig.equals(v22);
										if ((v23 ^ 1) == 0) {
											ActivityRecord v24 = Task.topRunningActivityLocked();
											if (v24 == 0) {
												boolean v25 = v24.ensureActivityConfiguration(0, 0);
												TaskFragment.mRootWindowContainer.ensureActivitiesVisible(v24, 0, 0);
												if (v25 != 0) {
													boolean v27 = TaskFragment.mRootWindowContainer.resumeFocusedTasksTopActivities();
													Task.resize(1, 1);
													Task.saveLaunchingStateIfNeeded();
													Trace.traceEnd(32);
													TaskFragment.mAtmService.continueWindowLayout();
													boolean v9 = 1;
													this.sThreadPriorityBooster.reset();
													Binder.restoreCallingIdentity(v2);
													return v9;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean resizeTask(int p1, Rect p2, int p3){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	if (v4 != 0) {
		WindowConfiguration v5 = v4.getWindowConfiguration();
		boolean v6 = v5.canResizeTask();
		if (v6 != 0) {
			if ((p3 & 1) == 0) {
				boolean v7 = v4.resize(p2, p3, 0);
				WindowManagerService.resetPriorityAfterLockedSection();
				Binder.restoreCallingIdentity(v2);
				return v7;
			}
		}
	}
}

and the following sink code:
['Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);\nboolean v7 = v4.resize(p2, p3, 0);', 'Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);\nboolean v12 = Task.canResizeToBounds(p2);', 'int v47 = Task.setBounds(p2);']

The method resizeTask has the following similar APIs:

- API Name: setTaskResizeable(II)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8913142681121826, Code:
Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);
v2.setResizeMode(p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getTaskBounds(I)Landroid/graphics/Rect; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8785321712493896, Code:
Task v8 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
Rect v10 = v7.getBounds();
v3.set(v10);
return v3;
  - Similarity: 0.8760395050048828, Code:
Task v6 = this.mRootWindowContainer.anyTaskForId(p1, 1);
Rect v8 = v6.getBounds();
v3.set(v8);
return v3;
  - Access Control Level: SYS_OR_SIG

- API Name: moveTaskToRootTask(IIZ)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8402784466743469, Code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1);
Long v6 = Long.valueOf(p1);
Long v7 = Long.valueOf(p2);
Boolean v8 = Boolean.valueOf(p3);
  - Similarity: 0.8294143080711365, Code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 2);
Long v8 = Long.valueOf(p1);
Long v9 = Long.valueOf(p2);
Boolean v10 = Boolean.valueOf(p3);
  - Similarity: 0.8122204542160034, Code:
Task v8 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
Object v9 = new Object(3);
Long v10 = Long.valueOf(p1);
Long v11 = Long.valueOf(p2);
Boolean v12 = Boolean.valueOf(p3);
  - Access Control Level: SYS_OR_SIG

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8363747596740723, Code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
TaskSnapshot v13 = snapshotTask();
  - Access Control Level: SYS_OR_SIG

- API Name: getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7991515398025513, Code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
TaskSnapshot v11 = this.mCache.getSnapshot(p1, Task.mUserId, 1, 1);
return v9;
  - Access Control Level: SYS_OR_SIG

