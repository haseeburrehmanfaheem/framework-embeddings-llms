The method getTasks has the following code snippet:

This is path 1 for the API with depth 2:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		if (v5 != 0) {
			boolean v3 = 0;
			if (v3 == 0) {
				if (this.mUserManager != 0) {
					IBinder v7 = ServiceManager.getService("user");
					if (v7 != 0) {
						IInterface v9 = v7.queryLocalInterface("android.os.IUserManager");
						if (v9 == 0) {
							if (v9 instanceof IUserManager == 0) {
								IUserManager$Stub$Proxy v10 = new IUserManager$Stub$Proxy(v7);
								IUserManager v8 = v10;
								this.mUserManager = v8;
								UserManagerService v6 = this.mUserManager;
								int v12 = UserHandle.getUserId(v1);
								StringBuilder v16 = new StringBuilder();
								StringBuilder v18 = v16.append("getting profiles related to user ");
								StringBuilder v19 = v16.append(v12);
								String v20 = v16.toString();
								long v22 = Binder.clearCallingIdentity();
								IntArray v23 = UserManagerService.getProfileIdsLU(v12, 0, 1);
								[I v24 = v23.toArray();
								Binder.restoreCallingIdentity(v22);
								[I v14 = v24;
								[I v13 = v14;
								ArraySet v26 = new ArraySet();
								if (0 >= v13.length) {
									Integer v28 = Integer.valueOf(v13[0]);
									boolean v29 = v26.add(v28);
									if ((0 + 1) >= v13.length) {
										ArrayList v30 = new ArrayList();
										if (v38 != 0) {
											IPackageManager v40 = ActivityThread.getPackageManager();
											IPackageManager v39 = v40;
											boolean v41 = v39.isUidPrivileged(v1);
											if (v41 == 0) {
												if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
													String v42 = String.valueOf("getTasks");
													Object v43 = new Object(2);
													Long v44 = Long.valueOf(v1);
													ProtoLogImpl v46 = ProtoLogImpl.getSingleInstance();
													v46.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v43);
													if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
														String v48 = String.valueOf("getTasks");
														Object v49 = new Object(2);
														Long v50 = Long.valueOf(v1);
														ProtoLogImpl v52 = ProtoLogImpl.getSingleInstance();
														v52.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v49);
														boolean v35 = 1;
														if (v35 == 0) {
															if (p4 == -1) {
																int v56 = RootWindowContainer.getChildCount();
																if ((v56 + -1) < 0) {
																	DisplayContent v55 = 0;
																	if (v55 != 0) {
																		RunningTasks v57 = this.mRunningTasks;
																		RecentTasks v58 = this.mRecentTasks;
																		if (p1 > 0) {
																			this.mTmpSortedSet.clear();
																			this.mCallingUid = v1;
																			int v61 = UserHandle.getUserId(v1);
																			this.mUserId = v61;
																			if (((((p2 | 8) | 4) | 0) & 4) != 4) {
																				this.mCrossUser = 1;
																				this.mProfileIds = v26;
																				if (((((p2 | 8) | 4) | 0) & 2) != 2) {
																					this.mAllowed = 1;
																					if (((((p2 | 8) | 4) | 0) & 1) != 1) {
																						this.mFilterOnlyVisibleRecents = 1;
																						this.mRecentTasks = v58;
																						if (((((p2 | 8) | 4) | 0) & 8) != 8) {
																							this.mKeepIntentExtra = 1;
																							RunningTasks$$ExternalSyntheticLambda0 v62 = new RunningTasks$$ExternalSyntheticLambda0();
																							ArgumentPlaceholder v64 = PooledLambda.__(Tas.class);
																							PooledConsumer v65 = PooledLambda.obtainConsumer(v62, RunningTasks, v64);
																							v55.forAllLeafTasks(v65, 0);
																							v65.recycle();
																							Iterator v68 = this.mTmpSortedSet.iterator();
																							boolean v69 = v68.hasNext();
																							if (v69 == 0) {
																								if (p1 != 0) {
																									Object v70 = v68.next();
																									ActivityManager$RunningTaskInfo v71 = RunningTasks.createRunningTaskInfo(v70);
																									boolean v72 = v30.add(v71);
																									boolean v73 = v68.hasNext();
																									if (v73 == 0) {
																										return v30;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		if (v5 != 0) {
			boolean v3 = 0;
			if (v3 == 0) {
				if (this.mUserManager != 0) {
					IBinder v7 = ServiceManager.getService("user");
					IUserManager v8 = IUserManager$Stub.asInterface(v7);
					this.mUserManager = v8;
					UserManagerService v6 = this.mUserManager;
					int v9 = UserHandle.getUserId(v1);
					[I v11 = UserManagerService.getProfileIds(v9, 0, 1);
					[I v10 = v11;
					ArraySet v12 = new ArraySet();
					if (0 >= v10.length) {
						Integer v14 = Integer.valueOf(v10[0]);
						boolean v15 = v12.add(v14);
						if ((0 + 1) >= v10.length) {
							ArrayList v16 = new ArrayList();
							this.sThreadPriorityBooster.boost();
							if (v23 != 0) {
								IPackageManager v24 = AppGlobals.getPackageManager();
								boolean v25 = v24.isUidPrivileged(v1);
								if (v25 == 0) {
									if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
										String v26 = String.valueOf("getTasks");
										Object v27 = new Object(2);
										Long v28 = Long.valueOf(v1);
										ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v27);
										if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
											String v30 = String.valueOf("getTasks");
											Object v31 = new Object(2);
											Long v32 = Long.valueOf(v1);
											ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v31);
											boolean v20 = 1;
											if (v20 == 0) {
												if (p4 == -1) {
													DisplayContent v35 = RootWindowContainer.getDisplayContent(p4);
													if (v35 != 0) {
														RunningTasks v36 = this.mTaskSupervisor.getRunningTasks();
														RecentTasks v37 = this.mService.getRecentTasks();
														v36.getTasks(p1, v16, (((p2 | 8) | 4) | 0), v37, v35, v1, v12);
														this.sThreadPriorityBooster.reset();
														return v16;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		boolean v3 = p0.isCrossUserAllowed(v2, v1);
		if (v3 == 0) {
			UserManagerService v4 = p0.getUserManager();
			int v5 = UserHandle.getUserId(v1);
			[I v6 = v4.getProfileIds(v5, 1);
			ArraySet v7 = new ArraySet();
			if (0 >= v6.length) {
				Integer v9 = Integer.valueOf(v6[0]);
				boolean v10 = v7.add(v9);
				if ((0 + 1) >= v6.length) {
					ArrayList v11 = new ArrayList();
					WindowManagerService.boostPriorityForLockedSection();
					boolean v14 = p0.isGetTasksAllowed("getTasks", v2, v1);
					if (v14 == 0) {
						this.mRootWindowContainer.getRunningTasks(p1, v11, (((p2 | 8) | 4) | 0), v1, v7, p4);
						WindowManagerService.resetPriorityAfterLockedSection();
						return v11;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nint v2 = Binder.getCallingPid();\nArrayList v30 = new ArrayList();\nRunningTasks$$ExternalSyntheticLambda0 v62 = new RunningTasks$$ExternalSyntheticLambda0();\nv55.forAllLeafTasks(v65, 0);\nreturn v30;', 'int v1 = Binder.getCallingUid();\nint v2 = Binder.getCallingPid();\nArrayList v16 = new ArrayList();\nthis.sThreadPriorityBooster.boost();\nv36.getTasks(p1, v16, (((p2 | 8) | 4) | 0), v37, v35, v1, v12);\nreturn v16;', 'int v1 = Binder.getCallingUid();\nint v2 = Binder.getCallingPid();\nArrayList v11 = new ArrayList();\nthis.mRootWindowContainer.getRunningTasks(p1, v11, (((p2 | 8) | 4) | 0), v1, v7, p4);\nreturn v11;']

The method getTasks has the following similar APIs:

- API Name: grantDefaultPermissionsToEnabledCarrierApps([Ljava/lang/String;I)V with Similarity Score: 0.8614665269851685
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
LegacyPermissionManagerService$$ExternalSyntheticLambda2 v3 = new LegacyPermissionManagerService$$ExternalSyntheticLambda2(p0,p1,p2);
Binder.withCleanCallingIdentity(v3);

- API Name: grantDefaultPermissionsToActiveLuiApp(Ljava/lang/String;I)V with Similarity Score: 0.8579557538032532
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
if (v1 == 1001) {
LegacyPermissionManagerService$$ExternalSyntheticLambda6 v3 = new LegacyPermissionManagerService$$ExternalSyntheticLambda6(p0,p1,p2);
Binder.withCleanCallingIdentity(v3);

