This is path 1 for the API with depth 2:
public int startActivityAsUser(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (p11 == 0) {
		SafeActivityOptions v3 = new SafeActivityOptions(v4);
		ActivityOptions v4 = ActivityOptions.fromBundle(p11);
		SafeActivityOptions v2 = v3;
		if (v2 == 0) {
			ActivityOptions v6 = this.mOriginalOptions;
			boolean v7 = this.mTransientLaunch;
			if (v7 == 0) {
				int v8 = Binder.getCallingUid();
				boolean v10 = this.mRecentTasks.isCallerRecents(v8);
				boolean v9 = v10;
				if (v9 == 0) {
					long v11 = Binder.clearCallingIdentity();
					this.sThreadPriorityBooster.boost();
					Trace.traceBegin(32, "startExistingRecents");
					ActivityOptions v15 = this.mOriginalOptions;
					RecentTasks v17 = this.mService.getRecentTasks();
					ComponentName v18 = v17.getRecentsComponent();
					ComponentName v19 = p4.getComponent();
					boolean v20 = v18.equals(v19);
					if (v20 == 0) {
						TaskDisplayArea v21 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea();
						Task v22 = v21.getRootTask(0, 3);
						if (v22 != 0) {
							ActivityRecord v23 = v22.topRunningActivity();
							if (v23 == 0) {
								if (ActivityRecord.mVisibleRequested != 0) {
									boolean v24 = v23.attachedToProcess();
									if (v24 == 0) {
										ComponentName v25 = p4.getComponent();
										boolean v26 = ActivityRecord.mActivityComponent.equals(v25);
										if (v26 == 0) {
											boolean v27 = WindowContainer.mDisplayContent.isKeyguardLocked();
											if (v27 == 0) {
												boolean v16 = 0;
												if (v16 == 0) {
													this.sThreadPriorityBooster.reset();
													Trace.traceEnd(32);
													Binder.restoreCallingIdentity(v11);
													if (v34 == 0) {
														if (v37 != 0) {
															int v38 = Binder.getCallingUid();
															boolean v39 = Process.isSdkSandboxUid(v38);
															if (v39 == 0) {
																ActivityStartController v40 = this.mActivityStartController;
																int v41 = Binder.getCallingPid();
																int v42 = Binder.getCallingUid();
																if (1 == 0) {
																	ActivityTaskManagerService.mAmInternal.ensureNotSpecialUser(p12);
																	int v43 = p12;
																	ActivityStartController v45 = this.mActivityStartController;
																	ActivityStarter v47 = this.mFactory.obtain();
																	ActivityStarter v48 = v47.setIntent(p4);
																	ActivityStarter v49 = v48.setReason("startActivityAsUser");
																	ActivityStarter v46 = v49;
																	ActivityStarter$Request.caller = p1;
																	ActivityStarter v50 = ActivityStarter;
																	ActivityStarter$Request.callingPackage = p2;
																	ActivityStarter v51 = ActivityStarter;
																	ActivityStarter$Request.callingFeatureId = p3;
																	ActivityStarter v52 = ActivityStarter;
																	ActivityStarter$Request.resolvedType = p5;
																	ActivityStarter v53 = ActivityStarter;
																	ActivityStarter$Request.resultTo = p6;
																	ActivityStarter v54 = ActivityStarter;
																	ActivityStarter$Request.resultWho = p7;
																	ActivityStarter v55 = ActivityStarter;
																	ActivityStarter$Request.requestCode = p8;
																	ActivityStarter v56 = ActivityStarter;
																	ActivityStarter$Request.startFlags = p9;
																	ActivityStarter v57 = ActivityStarter;
																	ActivityStarter$Request.profilerInfo = p10;
																	ActivityStarter v58 = ActivityStarter;
																	ActivityStarter$Request.activityOptions = v2;
																	ActivityStarter v59 = ActivityStarter;
																	ActivityStarter$Request.userId = v43;
																	ActivityStarter v60 = ActivityStarter;
																	ActivityStarter.onExecutionStarted();
																	if (ActivityStarter$Request.intent == 0) {
																		WindowManagerService.boostPriorityForLockedSection();
																		ActivityRecord v64 = ActivityRecord.forTokenLocked(ActivityStarter$Request.resultTo);
																		if (ActivityStarter$Request.realCallingUid != -1) {
																			int v65 = Binder.getCallingUid();
																			ActivityMetricsLogger v66 = this.mSupervisor.getActivityMetricsLogger();
																			ActivityMetricsLogger$LaunchingState v67 = v66.notifyActivityLaunching(ActivityStarter$Request.intent, v64, ActivityStarter$Request.realCallingUid);
																			WindowManagerService.resetPriorityAfterLockedSection();
																			if (ActivityStarter$Request.activityInfo != 0) {
																				if (ActivityStarter$Request.intent == 0) {
																					WindowManagerService.boostPriorityForLockedSection();
																					if (ActivityStarter$Request.globalConfig == 0) {
																						Task v70 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
																						if (v70 == 0) {
																							Task.mConfigWillChange = 1;
																							if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																								long v71 = Binder.clearCallingIdentity();
																								int v72 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																								if (v72 == 0) {
																									WindowManagerService.resetPriorityAfterLockedSection();
																									ActivityStarter.onExecutionComplete();
																									int v61 = v72;
																									int v1 = v61;
																									return v1;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startActivityAsUser(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	SafeActivityOptions v2 = SafeActivityOptions.fromBundle(p11);
	if (v2 == 0) {
		ActivityOptions v3 = v2.getOriginalOptions();
		boolean v4 = v3.getTransientLaunch();
		if (v4 == 0) {
			int v5 = Binder.getCallingUid();
			boolean v6 = ActivityTaskManagerService.isCallerRecents(v5);
			if (v6 == 0) {
				long v7 = Binder.clearCallingIdentity();
				WindowManagerService.boostPriorityForLockedSection();
				Trace.traceBegin(32, "startExistingRecents");
				ActivityOptions v10 = v2.getOriginalOptions();
				boolean v11 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v10);
				if (v11 == 0) {
					WindowManagerService.resetPriorityAfterLockedSection();
					Trace.traceEnd(32);
					Binder.restoreCallingIdentity(v7);
					ActivityTaskManagerService.assertPackageMatchesCallingUid(p2);
					ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityAsUser");
					int v17 = Binder.getCallingUid();
					boolean v18 = Process.isSdkSandboxUid(v17);
					if (v18 == 0) {
						ActivityStartController v19 = ActivityTaskManagerService.getActivityStartController();
						int v20 = Binder.getCallingPid();
						int v21 = Binder.getCallingUid();
						int v22 = v19.checkTargetUser(p12, 1, v20, v21, "startActivityAsUser");
						ActivityStartController v23 = ActivityTaskManagerService.getActivityStartController();
						ActivityStarter v24 = v23.obtainStarter(p4, "startActivityAsUser");
						ActivityStarter v25 = v24.setCaller(p1);
						ActivityStarter v26 = v25.setCallingPackage(p2);
						ActivityStarter v27 = v26.setCallingFeatureId(p3);
						ActivityStarter v28 = v27.setResolvedType(p5);
						ActivityStarter v29 = v28.setResultTo(p6);
						ActivityStarter v30 = v29.setResultWho(p7);
						ActivityStarter v31 = v30.setRequestCode(p8);
						ActivityStarter v32 = v31.setStartFlags(p9);
						ActivityStarter v33 = v32.setProfilerInfo(p10);
						ActivityStarter v34 = v33.setActivityOptions(v2);
						ActivityStarter v35 = v34.setUserId(v22);
						int v36 = v35.execute();
						int v1 = v36;
						return v1;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startActivityAsUser(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	int v1 = p0.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, 1);
	return v1;
}
