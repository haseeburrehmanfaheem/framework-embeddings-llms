The method addAppTask in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public int addAppTask(IBinder p1, Intent p2, ActivityManager$TaskDescription p3, Bitmap p4){
	if (this.task == 0) {
		TaskFragment v16 = TaskFragment.getRootTaskFragment();
		Task v17 = v16.asTask();
		Task v15 = v17;
		Task v14 = v15;
		Task$Builder v18 = new Task$Builder(p0);
		int v21 = this.mWindowingMode;
		int v20 = v21;
		Task$Builder v22 = v18.setWindowingMode(v20);
		int v25 = Configuration.windowConfiguration.getActivityType();
		int v24 = v25;
		if (v24 != 0) {
			int v27 = ConfigurationContainer.getChildCount();
			if (v27 <= 0) {
				boolean v26 = 1;
				if (v26 != 0) {
					WindowContainer$$ExternalSyntheticLambda2 v29 = new WindowContainer$$ExternalSyntheticLambda2();
					ActivityRecord v31 = WindowContainer.getActivity(v29, 1);
					ActivityRecord v28 = v31;
					if (v28 == 0) {
						Object v33 = this.mChildren.peekLast();
						WindowContainer v32 = v33;
						int v35 = Configuration.windowConfiguration.getActivityType();
						int v34 = v35;
						int v23 = getActivityType();
						Task$Builder v36 = v22.setActivityType(v23);
						Task$Builder v37 = v36.setActivityInfo(v13);
						Task$Builder v38 = v37.setIntent(p2);
						WindowContainer v41 = WindowContainer.getParent();
						if (v41 == 0) {
							DisplayArea v42 = v41.getDisplayArea();
							DisplayArea v40 = v42;
							TaskDisplayArea v39 = v40;
							int v45 = ActivityTaskSupervisor.getNextTaskIdForUser(RootWindowContainer.mCurrentUser);
							int v44 = v45;
							int v43 = v44;
							Task$Builder v46 = v38.setTaskId(v43);
							if (this.mParent == 0) {
								if (this.mParent instanceof TaskDisplayArea == 0) {
									if (this.mActivityType != 0) {
										if (this.mCreatedByOrganizer != 0) {
											this.mActivityType = 1;
											if (this.mActivityType == 1) {
												if (this.mActivityType == 0) {
													Task v49 = this.mParent.getRootTask(0, this.mActivityType);
													if (v49 != 0) {
														boolean v50 = TaskDisplayArea.isWindowingModeSupported(this.mWindowingMode, ActivityTaskManagerService.mSupportsMultiWindow, ActivityTaskManagerService.mSupportsFreeformWindowManagement, ActivityTaskManagerService.mSupportsPictureInPicture);
														if (v50 == 0) {
															if (this.mWindowingMode != 2) {
																if (this.mActivityType != 1) {
																	if (this.mWindowingMode != 2) {
																		Task v51 = this.mParent.getRootPinnedTask();
																		if (v51 == 0) {
																			Task v52 = this.mParent.getRootPinnedTask();
																			v52.dismissPip();
																			if (this.mIntent == 0) {
																				int v54 = this.mIntent.getFlags();
																				this.mLaunchFlags = (v54 | this.mLaunchFlags);
																				if (this.mCreatedByOrganizer == 0) {
																					Task v55 = this.mParent.getLaunchRootTask(this.mWindowingMode, this.mActivityType, this.mActivityOptions, this.mSourceTask, this.mLaunchFlags);
																					if (0 == 0) {
																						this.mWindowingMode = 0;
																						this.mParent = 0;
																						int v56 = this.mParent.getNextRootTaskId();
																						this.mTaskId = v56;
																						if (this.mActivityInfo != 0) {
																							ActivityInfo v57 = new ActivityInfo();
																							this.mActivityInfo = v57;
																							ApplicationInfo v59 = new ApplicationInfo();
																							ActivityInfo.applicationInfo = v59;
																							int v61 = UserHandle.getUserId(ApplicationInfo.uid);
																							this.mUserId = v61;
																							this.mTaskAffiliation = this.mTaskId;
																							long v62 = System.currentTimeMillis();
																							this.mLastTimeMoved = v62;
																							this.mNeverRelinquishIdentity = 1;
																							this.mCallingUid = ApplicationInfo.uid;
																							this.mCallingPackage = ActivityInfo.packageName;
																							this.mResizeMode = ActivityInfo.resizeMode;
																							boolean v63 = this.mActivityInfo.supportsPictureInPicture();
																							this.mSupportsPictureInPicture = v63;
																							if (this.mActivityOptions == 0) {
																								boolean v64 = this.mRemoveWithTaskOrganizer;
																								this.mRemoveWithTaskOrganizer = v64;
																								Task v66 = new Task(this.mAtmService,this.mTaskId,this.mIntent,this.mAffinityIntent,this.mAffinity,this.mRootAffinity,this.mRealActivity,this.mOrigActivity,this.mRootWasReset,this.mAutoRemoveRecents,this.mAskedCompatMode,this.mUserId,this.mEffectiveUid,this.mLastDescription,this.mLastTimeMoved,this.mNeverRelinquishIdentity,this.mLastTaskDescription,this.mLastSnapshotData,this.mTaskAffiliation,this.mPrevAffiliateTaskId,this.mNextAffiliateTaskId,this.mCallingUid,this.mCallingPackage,this.mCallingFeatureId,this.mResizeMode,this.mSupportsPictureInPicture,this.mRealActivitySuspended,this.mUserSetupComplete,this.mMinWidth,this.mMinHeight,this.mActivityInfo,this.mVoiceSession,this.mVoiceInteractor,this.mCreatedByOrganizer,this.mLaunchCookie,this.mDeferTaskAppear,this.mRemoveWithTaskOrganizer,0);
																								Task v65 = v66;
																								this.mHasBeenVisible = this.mHasBeenVisible;
																								if (this.mActivityType == 0) {
																									int v70 = ConfigurationContainer.getActivityType();
																									if (v70 != this.mActivityType) {
																										if (v70 != 0) {
																											Configuration v71 = ConfigurationContainer.getRequestedOverrideConfiguration();
																											this.mRequestsTmpConfig.setTo(v71);
																											Configuration.windowConfiguration.setActivityType(this.mActivityType);
																											ConfigurationContainer.onRequestedOverrideConfigurationChanged(this.mRequestsTmpConfig);
																											if (this.mParent == 0) {
																												if (this.mWindowingMode == 0) {
																													Task$$ExternalSyntheticLambda12 v76 = new Task$$ExternalSyntheticLambda12(Task,this.mWindowingMode,1);
																													WindowContainer.mWmService.inSurfaceTransaction(v76);
																													Task v47 = v65;
																													int v81 = RecentTasks.findRemoveIndexForAddTask(v47);
																													if (v81 != -1) {
																														boolean v80 = 1;
																														if (v80 != 0) {
																															if (Task.mAffiliatedTaskId != Task.mTaskId) {
																																if (Task.mNextAffiliateTaskId != -1) {
																																	if (Task.mPrevAffiliateTaskId == -1) {
																																		int v83 = this.mTasks.size();
																																		if (Task.voiceSession == 0) {
																																			if (0 != 0) {
																																				if (v83 <= 0) {
																																					Object v84 = this.mTasks.get(0);
																																					if (v84 != v47) {
																																						if (0 == 0) {
																																							if (v83 <= 0) {
																																								if (Task.inRecents == 0) {
																																									Object v85 = this.mTasks.get(0);
																																									if (Task.mAffiliatedTaskId != Task.mAffiliatedTaskId) {
																																										if (Task.inRecents == 0) {
																																											int v86 = this.mTasks.indexOf(v47);
																																											if (v86 < 0) {
																																												if (0 != 0) {
																																													int v87 = RecentTasks.removeForAddTask(v47);
																																													Task.inRecents = 1;
																																													if (0 == 0) {
																																														if (1 == 0) {
																																															if (0 == 0) {
																																																if (Task.mNextAffiliate != 0) {
																																																	if (Task.mNextAffiliate == 0) {
																																																		if (1 == 0) {
																																																			this.mCheckTrimmableTasksOnIdle = 1;
																																																			RecentTasks.notifyTaskPersisterLocked(v47, 0);
																																																			boolean v79 = 1;
																																																			if (v79 != 0) {
																																																				if (TaskFragment.mCreatedByOrganizer == 0) {
																																																					Task v90 = 0;
																																																					if (v90 == 0) {
																																																						DisplayArea v92 = TaskFragment.getDisplayArea();
																																																						TaskDisplayArea v91 = v92;
																																																						if (v47 != this.mRootHomeTask) {
																																																							if (v47 != this.mRootPinnedTask) {
																																																								this.mRootPinnedTask = 0;
																																																								boolean v94 = WindowContainer.mChildren.contains(v47);
																																																								if (v94 != 0) {
																																																									TaskFragment.removeChild(v47);
																																																									boolean v97 = BackNavigationController.isScreenshotEnabled();
																																																									if (v97 == 0) {
																																																										ActivityRecord v98 = v47.asActivityRecord();
																																																										if (v98 == 0) {
																																																											String v99 = ActivityRecord.mActivityComponent.flattenToString();
																																																											Object v100 = this.mBackScreenshots.remove(v99);
																																																											if (0 == 0) {
																																																												boolean v101 = TaskFragment.shouldRemoveSelfOnLastChildRemoval();
																																																												if (v101 == 0) {
																																																													boolean v102 = TaskFragment.hasChild();
																																																													if (v102 != 0) {
																																																														StringBuilder v103 = new StringBuilder();
																																																														StringBuilder v105 = v103.append("removeLastChild ");
																																																														StringBuilder v106 = v103.append(v47);
																																																														String v107 = v103.toString();
																																																														TaskFragment.removeImmediately(v107);
																																																														int v110 = Configuration.windowConfiguration.getWindowingMode();
																																																														if (v110 != 2) {
																																																															boolean v109 = 1;
																																																															if (v109 == 0) {
																																																																TaskChangeNotificationController v111 = this.mTaskChangeNotificationController;
																																																																ActivityMetricsLogger v113 = this.mTaskSupervisor.getActivityMetricsLogger();
																																																																v113.logWindowState();
																																																																this.mHandler.removeMessages(2);
																																																																Message v116 = this.mHandler.obtainMessage(2);
																																																																TaskChangeNotificationController.forAllLocalListeners(this.mNotifyTaskStackChanged, v116);
																																																																boolean v118 = this.mHandler.sendMessageDelayed(v116, 100);
																																																																int v120 = ConfigurationContainer.getChildCount();
																																																																if (v120 <= 0) {
																																																																	boolean v119 = 1;
																																																																	if (v119 == 0) {
																																																																		ActivityRecord v122 = Task.getRootActivity(1);
																																																																		if (v122 == 0) {
																																																																			Task.setIntent(v122);
																																																																			Task.updateTaskDescription();
																																																																			int v126 = Task.getChildCount();
																																																																			if ((v126 - 1) < 0) {
																																																																				WindowContainer v127 = Task.getChildAt((v126 - 1));
																																																																				ActivityRecord v128 = v127.asActivityRecord();
																																																																				if (v128 != 0) {
																																																																					if (1 != 0) {
																																																																						if (ActivityRecord.finishing == 0) {
																																																																							if (((v126 - 1) + -1) < 0) {
																																																																								WindowContainer v129 = Task.getChildAt(((v126 - 1) + -1));
																																																																								ActivityRecord v130 = v129.asActivityRecord();
																																																																								if (v130 != 0) {
																																																																									if (1 != 0) {
																																																																										if (ActivityRecord.finishing == 0) {
																																																																											boolean v131 = v130.isTaskOverlay();
																																																																											if (v131 != 0) {
																																																																												boolean v125 = 0;
																																																																												if (v125 == 0) {
																																																																													if (Task.mInRemoveTask == 0) {
																																																																														WindowContainer.mTransitionController.requestCloseTransitionIfNeeded(Task);
																																																																														Task.mInRemoveTask = 1;
																																																																														Task.removeActivities("addAppTask", 0);
																																																																														ActivityTaskSupervisor.cleanUpRemovedTaskLocked(Task, 0, 0);
																																																																														LockTaskController v136 = this.mService.getLockTaskController();
																																																																														v136.clearLockedTask(Task);
																																																																														TaskChangeNotificationController v138 = this.mService.getTaskChangeNotificationController();
																																																																														v138.notifyTaskStackChanged();
																																																																														if (Task.isPersistable == 0) {
																																																																															this.mService.notifyTaskPersisterLocked(0, 1);
																																																																															Task.mInRemoveTask = 0;
																																																																															Binder.restoreCallingIdentity(v2);
																																																																															return -1;
																																																																														}
																																																																													}
																																																																												}
																																																																											}
																																																																										}
																																																																									}
																																																																								}
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int addAppTask(IBinder p1, Intent p2, ActivityManager$TaskDescription p3, Bitmap p4){
	if (this.task == 0) {
		Task v15 = this.task.getRootTask();
		Task v14 = v15;
		Task$Builder v16 = new Task$Builder(p0);
		int v19 = Configuration.windowConfiguration.getWindowingMode();
		int v18 = v19;
		this.mWindowingMode = v18;
		Task$Builder v20 = Task$Builder;
		int v22 = TaskFragment.getActivityType();
		if (v22 != 0) {
			boolean v23 = TaskFragment.hasChild();
			if (v23 != 0) {
				ActivityRecord v24 = TaskFragment.getTopMostActivity();
				if (v24 == 0) {
					int v25 = v24.getActivityType();
					int v21 = v25;
					this.mActivityType = v21;
					Task$Builder v26 = Task$Builder;
					this.mActivityInfo = v13;
					Task$Builder v27 = Task$Builder;
					this.mIntent = p2;
					Task$Builder v28 = Task$Builder;
					DisplayArea v30 = TaskFragment.getDisplayArea();
					TaskDisplayArea v29 = v30;
					int v32 = ActivityTaskManagerService.mTaskSupervisor.getNextTaskIdForUser();
					int v31 = v32;
					this.mTaskId = v31;
					Task$Builder v33 = Task$Builder;
					if (this.mParent == 0) {
						if (this.mParent instanceof TaskDisplayArea == 0) {
							Task$Builder.validateRootTask(this.mParent);
							if (this.mActivityInfo != 0) {
								ActivityInfo v36 = new ActivityInfo();
								this.mActivityInfo = v36;
								ApplicationInfo v38 = new ApplicationInfo();
								ActivityInfo.applicationInfo = v38;
								int v40 = UserHandle.getUserId(ApplicationInfo.uid);
								this.mUserId = v40;
								this.mTaskAffiliation = this.mTaskId;
								long v41 = System.currentTimeMillis();
								this.mLastTimeMoved = v41;
								this.mNeverRelinquishIdentity = 1;
								this.mCallingUid = ApplicationInfo.uid;
								this.mCallingPackage = ActivityInfo.packageName;
								this.mResizeMode = ActivityInfo.resizeMode;
								boolean v42 = this.mActivityInfo.supportsPictureInPicture();
								this.mSupportsPictureInPicture = v42;
								if (this.mActivityOptions == 0) {
									boolean v43 = this.mActivityOptions.getRemoveWithTaskOranizer();
									this.mRemoveWithTaskOrganizer = v43;
									Task v44 = Task$Builder.buildInner();
									Task.-$$Nest$fputmHasBeenVisible(v44, this.mHasBeenVisible);
									if (this.mActivityType == 0) {
										v44.setActivityType(this.mActivityType);
										if (this.mParent == 0) {
											if (this.mWindowingMode == 0) {
												v44.setWindowingMode(this.mWindowingMode, 1);
												Task v34 = v44;
												boolean v49 = RecentTasks.canAddTaskWithoutTrim(v34);
												if (v49 != 0) {
													RecentTasks.add(v34);
													boolean v48 = 1;
													if (v48 != 0) {
														if (TaskFragment.mCreatedByOrganizer == 0) {
															Task v52 = v34.asTask();
															if (v52 == 0) {
																TaskDisplayArea v53 = Task.getDisplayArea();
																v53.removeRootTaskReferenceIfNeeded(v34);
																boolean v55 = WindowContainer.mChildren.contains(v34);
																if (v55 != 0) {
																	Task.removeChild(v34, 0);
																	boolean v57 = Task.inPinnedWindowingMode();
																	if (v57 == 0) {
																		TaskChangeNotificationController v58 = TaskFragment.mAtmService.getTaskChangeNotificationController();
																		v58.notifyTaskStackChanged();
																		boolean v60 = Task.hasChild();
																		if (v60 == 0) {
																			if (this.mReuseTask != 0) {
																				boolean v61 = Task.shouldRemoveSelfOnLastChildRemoval();
																				if (v61 == 0) {
																					boolean v62 = Task.isRootTask();
																					if (v62 != 0) {
																						WindowContainer v63 = Task.getParent();
																						if (v63 == 0) {
																							TaskFragment v64 = v63.asTaskFragment();
																							v64.removeChild(Task);
																							StringBuilder v66 = new StringBuilder();
																							StringBuilder v68 = v66.append("removeChild:");
																							StringBuilder v69 = v66.append("addAppTask");
																							StringBuilder v70 = v66.append(" last r=");
																							StringBuilder v71 = v66.append(v34);
																							StringBuilder v72 = v66.append(" in t=");
																							StringBuilder v73 = v66.append(Task);
																							String v74 = v66.toString();
																							EventLogTags.writeWmTaskRemoved(this.mTaskId, v74);
																							Task.removeIfPossible("addAppTask");
																							this.sThreadPriorityBooster.reset();
																							Binder.restoreCallingIdentity(v2);
																							return -1;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int addAppTask(IBinder p1, Intent p2, ActivityManager$TaskDescription p3, Bitmap p4){
	Task v14 = v4.getRootTask();
	Task$Builder v15 = new Task$Builder(p0);
	int v17 = v14.getWindowingMode();
	Task$Builder v18 = v15.setWindowingMode(v17);
	int v19 = v14.getActivityType();
	Task$Builder v20 = v18.setActivityType(v19);
	Task$Builder v21 = v20.setActivityInfo(v13);
	Task$Builder v22 = v21.setIntent(p2);
	TaskDisplayArea v23 = v14.getDisplayArea();
	int v24 = v23.getNextRootTaskId();
	Task$Builder v25 = v22.setTaskId(v24);
	Task v26 = v25.build();
	boolean v27 = this.mRecentTasks.addToBottom(v26);
	if (v27 != 0) {
		v14.removeChild(v26, "addAppTask");
		WindowManagerService.resetPriorityAfterLockedSection();
		Binder.restoreCallingIdentity(v2);
		return -1;
	}
}

and the following sink code:
['Task$Builder v15 = new Task$Builder(p0);\nint v17 = v14.getWindowingMode();\nTask$Builder v18 = v15.setWindowingMode(v17);\nint v19 = v14.getActivityType();\nTask$Builder v20 = v18.setActivityType(v19);\nTask$Builder v21 = v20.setActivityInfo(v13);\nTask$Builder v22 = v21.setIntent(p2);\nTaskDisplayArea v23 = v14.getDisplayArea();\nint v24 = v23.getNextRootTaskId();\nTask$Builder v25 = v22.setTaskId(v24);\nTask v26 = v25.build();', 'boolean v27 = this.mRecentTasks.addToBottom(v26);\nv14.removeChild(v26, "addAppTask");']

The method addAppTask has the following similar APIs:

- API Name: getAppTasks(Ljava/lang/String;)Ljava/util/List; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8485564589500427, Code:
ArrayList v8 = this.mRecentTasks.getAppTasksList(v4, p1);
List v5 = v8;
return v5;
  - Access Control Level: SYS_OR_SIG

- API Name: getRootTaskInfo(II)Landroid/app/ActivityTaskManager$RootTaskInfo; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8186859488487244, Code:
Task v10 = v9.getRootTask(p1, p2);
ActivityTaskManager$RootTaskInfo v14 = new ActivityTaskManager$RootTaskInfo();
v7.fillTaskInfo(v14);
return v6;
  - Access Control Level: SYS_OR_SIG

- API Name: getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8120258450508118, Code:
ActivityTaskManager$RootTaskInfo v21 = new ActivityTaskManager$RootTaskInfo();
v14.fillTaskInfo(v21);
DisplayContent v24 = v14.getDisplayContent();
return v20;
  - Access Control Level: SYS_OR_SIG

- API Name: removeAllVisibleRecentTasks()V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7952951788902283, Code:
RecentTasks v6 = p0.getRecentTasks();
int v7 = this.mAmInternal.getCurrentUserId();
ArraySet v10 = new ArraySet();
Object v29 = this.mTasks.remove((v16 - 1));
this.mTaskNotificationController.notifyTaskListUpdated();
  - Similarity: 0.7802579998970032, Code:
RecentTasks v4 = p0.getRecentTasks();
int v5 = this.mAmInternal.getCurrentUserId();
v4.removeAllVisibleTasks(v5);
  - Similarity: 0.7660431861877441, Code:
RecentTasks v5 = this.mRecentTasks;
int v6 = this.mAmInternal.getCurrentUserId();
Set v8 = RecentTasks.getProfileIds(v6);
Object v14 = this.mTasks.remove((v9 - 1));
RecentTasks.notifyTaskRemoved(v10, 1, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7454697489738464, Code:
Task v65 = RootWindowContainer.anyTaskForId(p3, 2);
ActivityStarter v50 = this.mFactory.obtain();
ActivityStarter v51 = v50.setIntent(0);
ActivityStarter v52 = v51.setReason("moveTaskToFront");
v64.moveTaskToFront(v64, 0, v69, 0, v80);
  - Access Control Level: SYS_OR_SIG

