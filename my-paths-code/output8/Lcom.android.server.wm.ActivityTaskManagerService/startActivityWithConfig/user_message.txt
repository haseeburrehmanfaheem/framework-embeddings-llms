This is path 1 for the API with depth 2:
public int startActivityWithConfig(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, Configuration p10, Bundle p11, int p12){
	if (v3 == 0) {
		if (v6 != 0) {
			int v7 = Binder.getCallingPid();
			int v8 = Binder.getCallingUid();
			int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p12, 0, 0, "startActivityWithConfig", 0);
			int v9 = v10;
			ActivityStartController v11 = this.mActivityStartController;
			ActivityStarter v13 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p4;
			ActivityStarter v14 = ActivityStarter;
			ActivityStarter$Request.reason = "startActivityWithConfig";
			ActivityStarter v15 = ActivityStarter;
			ActivityStarter v12 = v15;
			ActivityStarter v16 = v12.setCaller(p1);
			ActivityStarter v17 = v16.setCallingPackage(p2);
			ActivityStarter v18 = v17.setCallingFeatureId(p3);
			ActivityStarter v19 = v18.setResolvedType(p5);
			ActivityStarter v20 = v19.setResultTo(p6);
			ActivityStarter v21 = v20.setResultWho(p7);
			ActivityStarter v22 = v21.setRequestCode(p8);
			ActivityStarter v23 = v22.setStartFlags(p9);
			ActivityStarter v24 = v23.setGlobalConfiguration(p10);
			if (p11 == 0) {
				SafeActivityOptions v27 = new SafeActivityOptions(v28);
				ActivityOptions v28 = ActivityOptions.fromBundle(p11);
				SafeActivityOptions v26 = v27;
				ActivityStarter$Request.activityOptions = v26;
				ActivityStarter v30 = ActivityStarter;
				ActivityStarter v25 = v30;
				ActivityStarter v31 = v25.setUserId(v9);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v38 = ActivityRecord$Token.mActivityRef.get();
						if (v38 == 0) {
							Task v39 = v38.getRootTask();
							if (v39 != 0) {
								ActivityRecord v37 = 0;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v40 = this.mActivityMetricsLogger;
									if (0 != 0) {
										ActivityMetricsLogger$LaunchingState v49 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v49, v42);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v42);
										ActivityMetricsLogger$LaunchingState v41 = v49;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v56 = Binder.getCallingPid();
												this.realCallingPid = v56;
												if (this.realCallingUid != -1) {
													int v57 = Binder.getCallingUid();
													this.realCallingUid = v57;
													if (this.callingUid < 0) {
														this.callingPid = -1;
														if (this.caller == 0) {
															Intent v58 = new Intent(this.intent);
															this.ephemeralIntent = v58;
															Intent v60 = new Intent(this.intent);
															this.intent = v60;
															ComponentName v62 = v60.getComponent();
															if (v62 == 0) {
																int v63 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																ResolveInfo v64 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v63);
																this.resolveInfo = v64;
																if (v64 != 0) {
																	UserInfo v65 = this.mSupervisor.getUserInfo(this.userId);
																	if (v65 == 0) {
																		boolean v66 = v65.isManagedProfile();
																		if (v66 == 0) {
																			ActivityInfo v67 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																			this.activityInfo = v67;
																			if (v67 == 0) {
																				if (ActivityStarter$Request.intent == 0) {
																					this.sThreadPriorityBooster.boost();
																					if (ActivityStarter$Request.globalConfig == 0) {
																						int v71 = RootWindowContainer.getChildCount();
																						if ((v71 + -1) < 0) {
																							WindowContainer v72 = RootWindowContainer.getChildAt((v71 + -1));
																							Task v73 = v72.getFocusedRootTask();
																							if (v73 == 0) {
																								if (((v71 + -1) + -1) < 0) {
																									WindowContainer v74 = RootWindowContainer.getChildAt(((v71 + -1) + -1));
																									Task v75 = v74.getFocusedRootTask();
																									if (v75 == 0) {
																										Task v70 = v75;
																										if (v70 == 0) {
																											if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																												long v76 = Binder.clearCallingIdentity();
																												int v77 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																												if (v77 == 0) {
																													this.sThreadPriorityBooster.reset();
																													this.mController.onExecutionComplete(ActivityStarter);
																													int v32 = v77;
																													return v32;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startActivityWithConfig(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, Configuration p10, Bundle p11, int p12){
	if (v3 == 0) {
		if (v6 != 0) {
			int v7 = Binder.getCallingPid();
			int v8 = Binder.getCallingUid();
			int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p12, 0, 0, "startActivityWithConfig", 0);
			int v9 = v10;
			ActivityStartController v11 = this.mActivityStartController;
			ActivityStarter v13 = this.mFactory.obtain();
			ActivityStarter v14 = v13.setIntent(p4);
			ActivityStarter v15 = v14.setReason("startActivityWithConfig");
			ActivityStarter v12 = v15;
			ActivityStarter$Request.caller = p1;
			ActivityStarter v16 = ActivityStarter;
			ActivityStarter$Request.callingPackage = p2;
			ActivityStarter v17 = ActivityStarter;
			ActivityStarter$Request.callingFeatureId = p3;
			ActivityStarter v18 = ActivityStarter;
			ActivityStarter$Request.resolvedType = p5;
			ActivityStarter v19 = ActivityStarter;
			ActivityStarter$Request.resultTo = p6;
			ActivityStarter v20 = ActivityStarter;
			ActivityStarter$Request.resultWho = p7;
			ActivityStarter v21 = ActivityStarter;
			ActivityStarter$Request.requestCode = p8;
			ActivityStarter v22 = ActivityStarter;
			ActivityStarter$Request.startFlags = p9;
			ActivityStarter v23 = ActivityStarter;
			ActivityStarter$Request.globalConfig = p10;
			ActivityStarter v24 = ActivityStarter;
			SafeActivityOptions v26 = SafeActivityOptions.fromBundle(p11);
			ActivityStarter v27 = ActivityStarter.setActivityOptions(v26);
			ActivityStarter v25 = v27;
			ActivityStarter$Request.userId = v9;
			ActivityStarter v28 = ActivityStarter;
			ActivityStarter.onExecutionStarted();
			if (ActivityStarter$Request.intent == 0) {
				WindowManagerService.boostPriorityForLockedSection();
				ActivityRecord v32 = ActivityRecord.forTokenLocked(ActivityStarter$Request.resultTo);
				if (ActivityStarter$Request.realCallingUid != -1) {
					int v33 = Binder.getCallingUid();
					ActivityMetricsLogger v34 = this.mSupervisor.getActivityMetricsLogger();
					ActivityMetricsLogger$LaunchingState v35 = v34.notifyActivityLaunching(ActivityStarter$Request.intent, v32, ActivityStarter$Request.realCallingUid);
					WindowManagerService.resetPriorityAfterLockedSection();
					if (ActivityStarter$Request.activityInfo != 0) {
						if (ActivityStarter$Request.intent == 0) {
							WindowManagerService.boostPriorityForLockedSection();
							if (ActivityStarter$Request.globalConfig == 0) {
								Task v38 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
								if (v38 == 0) {
									Task.mConfigWillChange = 1;
									if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
										long v39 = Binder.clearCallingIdentity();
										int v40 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
										if (v40 == 0) {
											WindowManagerService.resetPriorityAfterLockedSection();
											ActivityStarter.onExecutionComplete();
											int v29 = v40;
											return v29;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startActivityWithConfig(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, Configuration p10, Bundle p11, int p12){
	p0.assertPackageMatchesCallingUid(p2);
	ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityWithConfig");
	int v3 = Binder.getCallingPid();
	int v4 = Binder.getCallingUid();
	int v5 = p0.handleIncomingUser(v3, v4, p12, "startActivityWithConfig");
	ActivityStartController v6 = p0.getActivityStartController();
	ActivityStarter v7 = v6.obtainStarter(p4, "startActivityWithConfig");
	ActivityStarter v8 = v7.setCaller(p1);
	ActivityStarter v9 = v8.setCallingPackage(p2);
	ActivityStarter v10 = v9.setCallingFeatureId(p3);
	ActivityStarter v11 = v10.setResolvedType(p5);
	ActivityStarter v12 = v11.setResultTo(p6);
	ActivityStarter v13 = v12.setResultWho(p7);
	ActivityStarter v14 = v13.setRequestCode(p8);
	ActivityStarter v15 = v14.setStartFlags(p9);
	ActivityStarter v16 = v15.setGlobalConfiguration(p10);
	ActivityStarter v17 = v16.setActivityOptions(p11);
	ActivityStarter v18 = v17.setUserId(v5);
	int v19 = v18.execute();
	return v19;
}
