This is path 1 for the API with depth 2:
public boolean removeTask(int p1){
	long v5 = Binder.clearCallingIdentity();
	if (1 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, 2, 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									int v19 = WindowContainer.mChildren.size();
									if ((v19 - 1) < 0) {
										Object v20 = WindowContainer.mChildren.get((v19 - 1));
										Task v21 = 0;
										if (v21 == 0) {
											if (((v19 - 1) + -1) < 0) {
												Object v22 = WindowContainer.mChildren.get(((v19 - 1) + -1));
												Task v23 = 0;
												if (v23 == 0) {
													boolean v18 = 0;
													if (v18 == 0) {
														if (Task.mInRemoveTask == 0) {
															if (this.mTransitionPlayer != 0) {
																boolean v26 = v6.isVisibleRequested();
																if (v26 == 0) {
																	boolean v27 = TransitionController.isCollecting();
																	if (v27 != 0) {
																		Transition v28 = TransitionController.createTransition(2, 0);
																		Task v29 = v6.asTask();
																		Transition v30 = TransitionController.requestStartTransition(v28, v29, 0, 0);
																		TransitionController.collectExistenceChange(v6);
																		Task.mInRemoveTask = 1;
																		Task.clearPinnedTaskIfNeed();
																		Task v34 = Task.getRootTask();
																		if (v34 != 0) {
																			Task$$ExternalSyntheticLambda2 v35 = new Task$$ExternalSyntheticLambda2(Task,0,"remove-task");
																			Task.forAllActivities(v35);
																			if (1 == 0) {
																				this.mRecentTasks.remove(v6);
																				Intent v40 = v6.getBaseIntent();
																				ComponentName v41 = v40.getComponent();
																				if (v41 != 0) {
																					ActivityTaskSupervisor$$ExternalSyntheticLambda1 v42 = new ActivityTaskSupervisor$$ExternalSyntheticLambda1();
																					Integer v44 = Integer.valueOf(Task.mUserId);
																					Intent v45 = new Intent(v46);
																					Intent v46 = v6.getBaseIntent();
																					Message v48 = PooledLambda.obtainMessage(v42, ActivityTaskManagerService.mAmInternal, v44, v41, v45);
																					boolean v49 = ActivityTaskManagerService.mH.sendMessage(v48);
																					if (1 != 0) {
																						String v50 = v41.getPackageName();
																						ArrayList v51 = new ArrayList();
																						ArrayMap v53 = ActivityTaskManagerService.mProcessNames.getMap();
																						int v54 = v53.size();
																						if (0 >= v54) {
																							Object v55 = v53.valueAt(0);
																							int v56 = v55.size();
																							if (0 >= v56) {
																								Object v57 = v55.valueAt(0);
																								if (WindowProcessController.mUserId == Task.mUserId) {
																									if (v57 != ActivityTaskManagerService.mHomeProcess) {
																										boolean v58 = WindowProcessController.mPkgList.contains(v50);
																										if (v58 != 0) {
																											boolean v59 = v57.shouldKillProcessForRemovedTask(v6);
																											if (v59 != 0) {
																												LockTaskController v60 = this.mLockTaskController;
																												if (v6 == 0) {
																													boolean v62 = this.mLockTaskModeTasks.isEmpty();
																													if (v62 == 0) {
																														Object v63 = this.mLockTaskModeTasks.get(0);
																														if (v6 != v63) {
																															int v64 = this.mLockTaskModeTasks.size();
																															if ((v64 + -1) <= 0) {
																																Object v65 = this.mLockTaskModeTasks.get((v64 + -1));
																																LockTaskController.clearLockedTask(v65);
																																if (((v64 + -1) + -1) <= 0) {
																																	LockTaskController.removeLockedTask(v6);
																																	boolean v68 = this.mLockTaskModeTasks.isEmpty();
																																	if (v68 == 0) {
																																		v6.performClearTaskForReuse(0);
																																		boolean v70 = ActivityTaskSupervisor.mRootWindowContainer.resumeFocusedTasksTopActivities();
																																		TaskChangeNotificationController v71 = this.mTaskChangeNotificationController;
																																		ActivityMetricsLogger v73 = this.mTaskSupervisor.getActivityMetricsLogger();
																																		v73.logWindowState();
																																		this.mHandler.removeMessages(2);
																																		Message v76 = this.mHandler.obtainMessage(2);
																																		TaskChangeNotificationController.forAllLocalListeners(this.mNotifyTaskStackChanged, v76);
																																		boolean v78 = this.mHandler.sendMessageDelayed(v76, 100);
																																		if (Task.isPersistable == 0) {
																																			this.mRecentTasks.notifyTaskPersisterLocked(0, 1);
																																			Task.mInRemoveTask = 0;
																																			Binder.restoreCallingIdentity(v5);
																																			return 1;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean removeTask(int p1){
	this.sThreadPriorityBooster.boost();
	long v4 = Binder.clearCallingIdentity();
	Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
	Task v5 = v6;
	if (v5 != 0) {
		int v8 = WindowContainer.mChildren.size();
		if ((v8 - 1) < 0) {
			Object v9 = WindowContainer.mChildren.get((v8 - 1));
			Task v10 = v9.asTask();
			if (v10 == 0) {
				if (((v8 - 1) + -1) < 0) {
					Object v11 = WindowContainer.mChildren.get(((v8 - 1) + -1));
					Task v12 = v11.asTask();
					if (v12 == 0) {
						boolean v7 = 0;
						if (v7 == 0) {
							if (Task.mInRemoveTask == 0) {
								WindowContainer.mTransitionController.requestCloseTransitionIfNeeded(v5);
								Task.mInRemoveTask = 1;
								v5.removeActivities("remove-task", 0);
								ActivityTaskSupervisor.cleanUpRemovedTaskLocked(v5, 1, 1);
								LockTaskController v17 = this.mService.getLockTaskController();
								v17.clearLockedTask(v5);
								TaskChangeNotificationController v19 = this.mService.getTaskChangeNotificationController();
								v19.notifyTaskStackChanged();
								if (Task.isPersistable == 0) {
									this.mService.notifyTaskPersisterLocked(0, 1);
									Task.mInRemoveTask = 0;
									Binder.restoreCallingIdentity(v4);
									this.sThreadPriorityBooster.reset();
									return 1;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean removeTask(int p1){
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	if (v4 != 0) {
		boolean v5 = v4.isLeafTask();
		if (v5 == 0) {
			this.mTaskSupervisor.removeTask(v4, 1, 1, "remove-task");
			Binder.restoreCallingIdentity(v3);
			WindowManagerService.resetPriorityAfterLockedSection();
			return 1;
		}
	}
}
