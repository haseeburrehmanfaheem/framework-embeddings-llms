The method startActivity has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivity(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11){
	int v1 = UserHandle.getCallingUserId();
	SafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);
	if (v4 == 0) {
		ActivityOptions v5 = v4.getOriginalOptions();
		boolean v6 = v5.getTransientLaunch();
		if (v6 == 0) {
			int v7 = Binder.getCallingUid();
			boolean v8 = ActivityTaskManagerService.isCallerRecents(v7);
			if (v8 == 0) {
				long v9 = Binder.clearCallingIdentity();
				WindowManagerService.boostPriorityForLockedSection();
				Trace.traceBegin(32, "startExistingRecents");
				ActivityOptions v12 = v4.getOriginalOptions();
				boolean v13 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v12);
				if (v13 == 0) {
					WindowManagerService.resetPriorityAfterLockedSection();
					Trace.traceEnd(32);
					Binder.restoreCallingIdentity(v9);
					int v3 = 2;
					int v2 = v3;
					return v2;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startActivity(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11){
	int v1 = UserHandle.getCallingUserId();
	int v3 = ActivityTaskManagerService.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, v1, 1);
	int v2 = v3;
	return v2;
}


This is path 3 for the API with depth 0:
public int startActivity(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11){
	int v1 = UserHandle.getCallingUserId();
	int v2 = p0.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, v1);
	return v2;
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nSafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);\nActivityOptions v5 = v4.getOriginalOptions();\nboolean v6 = v5.getTransientLaunch();\nint v7 = Binder.getCallingUid();\nboolean v8 = ActivityTaskManagerService.isCallerRecents(v7);\nlong v9 = Binder.clearCallingIdentity();\nWindowManagerService.boostPriorityForLockedSection();\nTrace.traceBegin(32, "startExistingRecents");\nActivityOptions v12 = v4.getOriginalOptions();\nboolean v13 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v12);', 'int v1 = UserHandle.getCallingUserId();\nint v3 = ActivityTaskManagerService.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, v1, 1);', 'int v1 = UserHandle.getCallingUserId();\nint v2 = p0.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, v1);']

The method startActivity has the following similar APIs:

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I with Similarity Score: 0.8665358424186707
  - Access Control Level: SYS_OR_SIG and the following code:
p0.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, 1);

- API Name: setMainSession(Landroid/os/IBinder;I)V with Similarity Score: 0.8576553463935852
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = Binder.getCallingUid();
int v4 = Binder.getCallingPid();
int v7 = ActivityManager.handleIncomingUser(v4, v3, p2, 0, 0, "setMainSession", 0);

