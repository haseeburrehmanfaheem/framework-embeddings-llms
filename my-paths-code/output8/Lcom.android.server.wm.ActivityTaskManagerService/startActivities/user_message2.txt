The method startActivities in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivities(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, Bundle p7, int p8){
	if (v3 == 0) {
		if (v6 != 0) {
			int v7 = Binder.getCallingPid();
			int v8 = Binder.getCallingUid();
			int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
			int v9 = v10;
			ActivityStartController v11 = this.mActivityStartController;
			if (p7 == 0) {
				SafeActivityOptions v13 = new SafeActivityOptions(v14);
				if (p7 == 0) {
					ActivityOptions v15 = new ActivityOptions(p7);
					ActivityOptions v14 = v15;
					SafeActivityOptions v12 = v13;
					int v18 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);
					return v18;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startActivities(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, Bundle p7, int p8){
	if (v3 == 0) {
		if (v6 != 0) {
			int v7 = Binder.getCallingPid();
			int v8 = Binder.getCallingUid();
			int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
			int v9 = v10;
			ActivityStartController v11 = this.mActivityStartController;
			if (p7 == 0) {
				SafeActivityOptions v13 = new SafeActivityOptions(v14);
				ActivityOptions v14 = ActivityOptions.fromBundle(p7);
				SafeActivityOptions v12 = v13;
				int v16 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);
				return v16;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startActivities(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, Bundle p7, int p8){
	p0.assertPackageMatchesCallingUid(p2);
	ActivityTaskManagerService.enforceNotIsolatedCaller("startActivities");
	int v3 = Binder.getCallingPid();
	int v4 = Binder.getCallingUid();
	int v5 = p0.handleIncomingUser(v3, v4, p8, "startActivities");
	ActivityStartController v6 = p0.getActivityStartController();
	SafeActivityOptions v7 = SafeActivityOptions.fromBundle(p7);
	int v8 = v6.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v7, v5, "startActivities", 0, 0);
	return v8;
}

and the following sink code:
['int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);\nActivityStartController v11 = this.mActivityStartController;\nSafeActivityOptions v13 = new SafeActivityOptions(v14);\nint v18 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);', 'int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);\nActivityStartController v11 = this.mActivityStartController;\nSafeActivityOptions v13 = new SafeActivityOptions(v14);\nActivityOptions v14 = ActivityOptions.fromBundle(p7);\nint v16 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);', 'int v5 = p0.handleIncomingUser(v3, v4, p8, "startActivities");\nActivityStartController v6 = p0.getActivityStartController();\nSafeActivityOptions v7 = SafeActivityOptions.fromBundle(p7);\nint v8 = v6.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v7, v5, "startActivities", 0, 0);']

The method startActivities has the following similar APIs:

- API Name: startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8745002746582031, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v8 = v7.setIntent(p5);
ActivityStarter v9 = v8.setReason("startVoiceActivity");
ActivityStarter$Request.callingUid = p4;
ActivityStarter$Request.callingPackage = p1;
ActivityStarter$Request.callingFeatureId = p2;
ActivityStarter$Request.resolvedType = p6;
ActivityStarter$Request.voiceSession = p7;
ActivityStarter$Request.voiceInteractor = p8;
ActivityStarter$Request.startFlags = p9;
ActivityStarter$Request.profilerInfo = p10;
SafeActivityOptions v19 = SafeActivityOptions.fromBundle(p11);
ActivityStarter v20 = ActivityStarter.setActivityOptions(v19);
  - Similarity: 0.834479808807373, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v7 = this.mFactory.obtain();
ActivityStarter$Request.intent = p5;
ActivityStarter v10 = v6.setCallingUid(p4);
ActivityStarter v11 = v10.setCallingPackage(p1);
ActivityStarter v12 = v11.setCallingFeatureId(p2);
ActivityStarter v13 = v12.setResolvedType(p6);
ActivityStarter v14 = v13.setVoiceSession(p7);
ActivityStarter v15 = v14.setVoiceInteractor(p8);
ActivityStarter v16 = v15.setStartFlags(p9);
ActivityStarter v17 = v16.setProfilerInfo(p10);
SafeActivityOptions v20 = new SafeActivityOptions(v21);
ActivityOptions v21 = ActivityOptions.fromBundle(p11);
ActivityStarter$Request.activityOptions = v19;
ActivityStarter v24 = v18.setUserId(v3);
ActivityStarter v25 = v24.setAllowBackgroundActivityStart(1);
  - Access Control Level: SYS_OR_SIG

- API Name: getTvInteractiveAppServiceList(I)Ljava/util/List; in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.834283173084259, Code:
int v5 = ActivityManager.handleIncomingUser(v1, v2, p1, 0, 0, "getTvInteractiveAppServiceList", 0);
TvInteractiveAppManagerService$UserState v11 = TvInteractiveAppManagerService.getOrCreateUserStateLocked(p1);
ArrayList v18 = new ArrayList();
Iterator v20 = v17.iterator();
return v55;
  - Access Control Level: NONE

- API Name: startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.823258101940155, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
ActivityStarter$Request.intent = p5;
ActivityStarter v11 = v7.setCallingUid(p4);
ActivityStarter v12 = v11.setCallingPackage(p1);
ActivityStarter v13 = v12.setCallingFeatureId(p2);
ActivityStarter v14 = v13.setResolvedType(p6);
int v14 = v13.execute();
  - Access Control Level: SYS_OR_SIG

- API Name: unregisterAppLinkInfo(Ljava/lang/String;Landroid/media/tv/interactive/AppLinkInfo;I)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8222624659538269, Code:
int v10 = ActivityManager.handleIncomingUser(v1, v2, p3, 0, 0, v7, 0);
TvInteractiveAppManagerService$UserState v15 = TvInteractiveAppManagerService.getUserStateLocked(v8);
Map v19 = TvInteractiveAppManagerService$UserState.-$$Nest$fgetmIAppMap(v13);
Object v20 = v19.get(p1);
TvInteractiveAppManagerService$ServiceState v25 = new TvInteractiveAppManagerService$ServiceState(this.this$0,v22,p1,v8,0);
  - Access Control Level: NONE

- API Name: relayoutMediaView(Landroid/os/IBinder;Landroid/graphics/Rect;I)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8167663216590881, Code:
int v5 = ActivityManager.handleIncomingUser(v2, v1, p3, 0, 0, "relayoutMediaView", 0);
TvInteractiveAppManagerService$SessionState v10 = TvInteractiveAppManagerService.getSessionStateLocked(p1, v1, v3);
ITvInteractiveAppSession v11 = TvInteractiveAppManagerService.getSessionLocked(v10);
v8.relayoutMediaView(p2);
  - Access Control Level: SYS_OR_SIG

