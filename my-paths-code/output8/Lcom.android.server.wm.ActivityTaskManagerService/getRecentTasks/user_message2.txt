The method getRecentTasks in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v4 = this.mAmInternal.handleIncomingUser(v2, v1, p3, 0, 0, "getRecentTasks", 0);
	int v3 = v4;
	int v5 = Binder.getCallingPid();
	if (v9 != 0) {
		IPackageManager v11 = ActivityThread.getPackageManager();
		IPackageManager v10 = v11;
		boolean v12 = v10.isUidPrivileged(v1);
		if (v12 == 0) {
			if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
				String v13 = String.valueOf("getRecentTasks");
				Object v14 = new Object(2);
				Long v15 = Long.valueOf(v1);
				ProtoLogImpl v17 = ProtoLogImpl.getSingleInstance();
				v17.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v14);
				if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
					String v19 = String.valueOf("getRecentTasks");
					Object v20 = new Object(2);
					Long v21 = Long.valueOf(v1);
					ProtoLogImpl v23 = ProtoLogImpl.getSingleInstance();
					v23.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v20);
					boolean v6 = 1;
					ParceledListSlice v29 = new ParceledListSlice(v30);
					if ((p2 & 1) == 0) {
						boolean v31 = RecentTasks.isUserRunning(v3, 4);
						if (v31 != 0) {
							RecentTasks.loadUserRecentsLocked(v3);
							Set v33 = RecentTasks.getProfileIds(v3);
							Integer v34 = Integer.valueOf(v3);
							boolean v35 = v33.add(v34);
							ArrayList v36 = new ArrayList();
							int v38 = this.mTasks.size();
							if (0 >= v38) {
								Object v39 = this.mTasks.get(0);
								boolean v40 = RecentTasks.isVisibleRecentTask(v39);
								if (v40 == 0) {
									boolean v41 = RecentTasks.isInVisibleRange(v39, 0, (0 + 1), 1);
									if (v41 == 0) {
										int v42 = v36.size();
										if (v42 < p1) {
											Integer v43 = Integer.valueOf(Task.mUserId);
											boolean v44 = v33.contains(v43);
											if (v44 != 0) {
												if (Task.realActivitySuspended == 0) {
													if (v6 != 0) {
														boolean v45 = v39.isActivityTypeHome();
														if (v45 != 0) {
															if (Task.effectiveUid == v1) {
																if (Task.autoRemoveRecents == 0) {
																	ActivityRecord v46 = v39.getTopNonFinishingActivity();
																	if (v46 != 0) {
																		if ((0 + 1) >= v38) {
																			ArrayList v30 = v36;
																			ParceledListSlice v28 = v29;
																			return v28;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v4 = this.mAmInternal.handleIncomingUser(v2, v1, p3, 0, 0, "getRecentTasks", 0);
	int v3 = v4;
	int v5 = Binder.getCallingPid();
	if (v9 != 0) {
		IPackageManager v10 = AppGlobals.getPackageManager();
		boolean v11 = v10.isUidPrivileged(v1);
		if (v11 == 0) {
			if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
				String v12 = String.valueOf("getRecentTasks");
				Object v13 = new Object(2);
				Long v14 = Long.valueOf(v1);
				ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v13);
				if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
					String v16 = String.valueOf("getRecentTasks");
					Object v17 = new Object(2);
					Long v18 = Long.valueOf(v1);
					ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v17);
					boolean v6 = 1;
					this.sThreadPriorityBooster.boost();
					ParceledListSlice v23 = new ParceledListSlice(v24);
					ArrayList v24 = RecentTasks.getRecentTasksImpl(p1, p2, v6, v3, v1);
					ParceledListSlice v22 = v23;
					this.sThreadPriorityBooster.reset();
					return v22;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.handleIncomingUser(v2, v1, p3, "getRecentTasks");
	int v4 = Binder.getCallingPid();
	boolean v5 = p0.isGetTasksAllowed("getRecentTasks", v4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	ParceledListSlice v7 = this.mRecentTasks.getRecentTasks(p1, p2, v5, v3, v1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v7;
}

and the following sink code:
['int v4 = this.mAmInternal.handleIncomingUser(v2, v1, p3, 0, 0, "getRecentTasks", 0);\nint v3 = v4;\nParceledListSlice v29 = new ParceledListSlice(v30);\nreturn v28;', 'int v4 = this.mAmInternal.handleIncomingUser(v2, v1, p3, 0, 0, "getRecentTasks", 0);\nArrayList v24 = RecentTasks.getRecentTasksImpl(p1, p2, v6, v3, v1);\nParceledListSlice v23 = new ParceledListSlice(v24);\nreturn v22;', 'int v3 = p0.handleIncomingUser(v2, v1, p3, "getRecentTasks");\nParceledListSlice v7 = this.mRecentTasks.getRecentTasks(p1, p2, v5, v3, v1);\nreturn v7;']

The method getRecentTasks has the following similar APIs:

- API Name: removeAllVisibleRecentTasks()V in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8488121628761292, Code:
RecentTasks v6 = p0.getRecentTasks();
int v7 = this.mAmInternal.getCurrentUserId();
ArraySet v10 = new ArraySet();
Object v29 = this.mTasks.remove((v16 - 1));
this.mTaskNotificationController.notifyTaskListUpdated();
  - Similarity: 0.7996584177017212, Code:
RecentTasks v4 = p0.getRecentTasks();
int v5 = this.mAmInternal.getCurrentUserId();
v4.removeAllVisibleTasks(v5);
  - Similarity: 0.7882483005523682, Code:
RecentTasks v5 = this.mRecentTasks;
int v6 = this.mAmInternal.getCurrentUserId();
Set v8 = RecentTasks.getProfileIds(v6);
Object v14 = this.mTasks.remove((v9 - 1));
RecentTasks.notifyTaskRemoved(v10, 1, 1);
  - Access Control Level: SYS_OR_SIG

- API Name: startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7941044569015503, Code:
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
ActivityStartController v11 = this.mActivityStartController;
SafeActivityOptions v13 = new SafeActivityOptions(v14);
ActivityOptions v14 = ActivityOptions.fromBundle(p7);
int v16 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);
  - Similarity: 0.7929266691207886, Code:
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
ActivityStartController v11 = this.mActivityStartController;
SafeActivityOptions v13 = new SafeActivityOptions(v14);
int v18 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: getAppTasks(Ljava/lang/String;)Ljava/util/List; in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.780194103717804, Code:
ArrayList v8 = this.mRecentTasks.getAppTasksList(v4, p1);
List v5 = v8;
return v5;
  - Access Control Level: SYS_OR_SIG

- API Name: getTvInteractiveAppServiceList(I)Ljava/util/List; in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7798178791999817, Code:
int v5 = ActivityManager.handleIncomingUser(v1, v2, p1, 0, 0, "getTvInteractiveAppServiceList", 0);
TvInteractiveAppManagerService$UserState v11 = TvInteractiveAppManagerService.getOrCreateUserStateLocked(p1);
ArrayList v18 = new ArrayList();
Iterator v20 = v17.iterator();
return v55;
  - Access Control Level: NONE

- API Name: startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7720574736595154, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v8 = v7.setIntent(p5);
ActivityStarter v9 = v8.setReason("startVoiceActivity");
ActivityStarter$Request.callingUid = p4;
ActivityStarter$Request.callingPackage = p1;
ActivityStarter$Request.callingFeatureId = p2;
ActivityStarter$Request.resolvedType = p6;
ActivityStarter$Request.voiceSession = p7;
ActivityStarter$Request.voiceInteractor = p8;
ActivityStarter$Request.startFlags = p9;
ActivityStarter$Request.profilerInfo = p10;
SafeActivityOptions v19 = SafeActivityOptions.fromBundle(p11);
ActivityStarter v20 = ActivityStarter.setActivityOptions(v19);
  - Access Control Level: SYS_OR_SIG

