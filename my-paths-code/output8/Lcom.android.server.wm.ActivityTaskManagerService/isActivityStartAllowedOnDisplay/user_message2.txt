The method isActivityStartAllowedOnDisplay in the following class Lcom.android.server.wm.ActivityTaskManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	if (-10000 == -10000) {
		if (v1 < 0) {
			int v5 = -10000;
			ResolveInfo v7 = ActivityTaskSupervisor.resolveIntent(p2, p3, p4, 0, v5);
			ActivityInfo v8 = ActivityTaskSupervisor.resolveActivity(p2, v7, 0, 0);
			ActivityInfo v6 = v8;
			ActivityInfo v9 = this.mAmInternal.getActivityInfoForUser(v6, p4);
			ActivityInfo v4 = v9;
			if (p1 != 0) {
				if (ActivityTaskManagerService.mSupportsMultiDisplay != 0) {
					boolean v15 = ActivityTaskSupervisor.isCallerAllowedToLaunchOnDisplay(v2, v1, p1, v4);
					if (v15 != 0) {
						DisplayContent v16 = this.mRootWindowContainer.getDisplayContentOrCreate(p1);
						if (v16 == 0) {
							boolean v17 = DisplayContent.mDwpcHelper.hasController();
							if (v17 == 0) {
								ArrayList v18 = new ArrayList();
								if (v4 == 0) {
									boolean v20 = v18.add(v4);
									if (0 == 0) {
										ActivityTaskSupervisor$$ExternalSyntheticLambda6 v21 = new ActivityTaskSupervisor$$ExternalSyntheticLambda6(v18);
										0.forAllActivities(v21);
										int v24 = v16.getWindowingMode();
										boolean v25 = DisplayContent.mDwpcHelper.canContainActivities(v18, v24);
										if (v25 != 0) {
											boolean v14 = 0;
											boolean v13 = v14;
											Binder.restoreCallingIdentity(v3);
											return v13;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	int v5 = ActivityStarter.computeResolveFilterUid(v1, v1, -10000);
	ActivityInfo v6 = this.mTaskSupervisor.resolveActivity(p2, p3, 0, 0, p4, v5);
	ActivityInfo v7 = this.mAmInternal.getActivityInfoForUser(v6, p4);
	ActivityInfo v4 = v7;
	this.sThreadPriorityBooster.boost();
	boolean v11 = ActivityTaskSupervisor.canPlaceEntityOnDisplay(p1, v2, v1, 0, v4);
	boolean v10 = v11;
	this.sThreadPriorityBooster.reset();
	Binder.restoreCallingIdentity(v3);
	return v10;
}


This is path 3 for the API with depth 0:
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	ActivityInfo v4 = p0.resolveActivityInfoForIntent(p2, p3, p4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	boolean v6 = this.mTaskSupervisor.canPlaceEntityOnDisplay(p1, v2, v1, v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v3);
	return v6;
}

and the following sink code:
['int v5 = ActivityStarter.computeResolveFilterUid(v1, v1, -10000);\nActivityInfo v6 = this.mTaskSupervisor.resolveActivity(p2, p3, 0, 0, p4, v5);\nActivityInfo v7 = this.mAmInternal.getActivityInfoForUser(v6, p4);\nboolean v11 = ActivityTaskSupervisor.canPlaceEntityOnDisplay(p1, v2, v1, 0, v4);', 'ResolveInfo v7 = ActivityTaskSupervisor.resolveIntent(p2, p3, p4, 0, v5);\nActivityInfo v8 = ActivityTaskSupervisor.resolveActivity(p2, v7, 0, 0);\nActivityInfo v9 = this.mAmInternal.getActivityInfoForUser(v6, p4);\nboolean v15 = ActivityTaskSupervisor.isCallerAllowedToLaunchOnDisplay(v2, v1, p1, v4);', 'ActivityInfo v4 = p0.resolveActivityInfoForIntent(p2, p3, p4, v1);\nboolean v6 = this.mTaskSupervisor.canPlaceEntityOnDisplay(p1, v2, v1, v4);']

The method isActivityStartAllowedOnDisplay has the following similar APIs:

- API Name: startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.748465895652771, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
ActivityStarter$Request.intent = p5;
ActivityStarter v11 = v7.setCallingUid(p4);
ActivityStarter v12 = v11.setCallingPackage(p1);
ActivityStarter v13 = v12.setCallingFeatureId(p2);
ActivityStarter v14 = v13.setResolvedType(p6);
int v14 = v13.execute();
  - Access Control Level: SYS_OR_SIG

- API Name: startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7456905841827393, Code:
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
ActivityStartController v11 = this.mActivityStartController;
SafeActivityOptions v13 = new SafeActivityOptions(v14);
ActivityOptions v14 = ActivityOptions.fromBundle(p7);
int v16 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);
  - Similarity: 0.7173410058021545, Code:
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
ActivityStartController v11 = this.mActivityStartController;
SafeActivityOptions v13 = new SafeActivityOptions(v14);
int v18 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);
  - Access Control Level: SYS_OR_SIG

- API Name: startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7266405820846558, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v8 = v7.setIntent(p5);
ActivityStarter v9 = v8.setReason("startVoiceActivity");
ActivityStarter$Request.callingUid = p4;
ActivityStarter$Request.callingPackage = p1;
ActivityStarter$Request.callingFeatureId = p2;
ActivityStarter$Request.resolvedType = p6;
ActivityStarter$Request.voiceSession = p7;
ActivityStarter$Request.voiceInteractor = p8;
ActivityStarter$Request.startFlags = p9;
ActivityStarter$Request.profilerInfo = p10;
SafeActivityOptions v19 = SafeActivityOptions.fromBundle(p11);
ActivityStarter v20 = ActivityStarter.setActivityOptions(v19);
  - Access Control Level: SYS_OR_SIG

- API Name: setGameMode(Ljava/lang/String;II)V in the following Class: Lcom.android.server.app.GameManagerService with the following sink code entries:
  - Similarity: 0.722858726978302, Code:
boolean v2 = p0.isPackageGame(p1, p3);
int v5 = ActivityManager.handleIncomingUser(v3, v4, p3, 0, 1, "setGameMode", "com.android.server.app.GameManagerService");
v9.setGameModeLocked(p1, p2);
p0.updateInterventions(p1, p2, v5);
  - Access Control Level: SYS_OR_SIG

- API Name: getTvInteractiveAppServiceList(I)Ljava/util/List; in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7172621488571167, Code:
int v5 = ActivityManager.handleIncomingUser(v1, v2, p1, 0, 0, "getTvInteractiveAppServiceList", 0);
TvInteractiveAppManagerService$UserState v11 = TvInteractiveAppManagerService.getOrCreateUserStateLocked(p1);
ArrayList v18 = new ArrayList();
Iterator v20 = v17.iterator();
return v55;
  - Access Control Level: NONE

