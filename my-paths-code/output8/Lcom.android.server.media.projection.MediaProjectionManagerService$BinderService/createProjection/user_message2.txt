The method createProjection in the following class Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService has the following code snippet:

This is path 1 for the API with depth 1:
public IMediaProjection createProjection(int p1, String p2, int p3, boolean p4){
	if (v2 != 0) {
		if (p2 == 0) {
			boolean v3 = p2.isEmpty();
			if (v3 != 0) {
				UserHandle v4 = Binder.getCallingUserHandle();
				long v5 = Binder.clearCallingIdentity();
				PackageManager v6 = this.mPackageManager;
				ApplicationInfo v7 = v6.getApplicationInfoAsUser(p2, 0, v4);
				MediaProjectionManagerService$MediaProjection v8 = new MediaProjectionManagerService$MediaProjection(this.this$0,p3,p1,p2,ApplicationInfo.targetSdkVersion,v9);
				boolean v9 = v7.isPrivilegedApp();
				if (p4 == 0) {
					AppOpsManager v11 = this.mAppOps;
					v11.setMode(46, MediaProjectionManagerService$MediaProjection.uid, MediaProjectionManagerService$MediaProjection.packageName, 0);
					Binder.restoreCallingIdentity(v5);
					return v8;
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public IMediaProjection createProjection(int p1, String p2, int p3, boolean p4){
	if (v2 != 0) {
		if (p2 == 0) {
			boolean v3 = p2.isEmpty();
			if (v3 != 0) {
				UserHandle v4 = Binder.getCallingUserHandle();
				long v5 = Binder.clearCallingIdentity();
				PackageManager v6 = MediaProjectionManagerService.-$$Nest$fgetmPackageManager(this.this$0);
				ApplicationInfo v7 = v6.getApplicationInfoAsUser(p2, 0, v4);
				MediaProjectionManagerService$MediaProjection v8 = new MediaProjectionManagerService$MediaProjection(this.this$0,p3,p1,p2,ApplicationInfo.targetSdkVersion,v9);
				boolean v9 = v7.isPrivilegedApp();
				if (p4 == 0) {
					AppOpsManager v11 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
					v11.setMode(46, MediaProjectionManagerService$MediaProjection.uid, MediaProjectionManagerService$MediaProjection.packageName, 0);
					Binder.restoreCallingIdentity(v5);
					return v8;
				}
			}
		}
	}
}

and the following sink code:
['ApplicationInfo v7 = v6.getApplicationInfoAsUser(p2, 0, v4);\nboolean v9 = v7.isPrivilegedApp();\nMediaProjectionManagerService$MediaProjection v8 = new MediaProjectionManagerService$MediaProjection(this.this$0,p3,p1,p2,ApplicationInfo.targetSdkVersion,v9);\nreturn v8;']

The method createProjection has the following similar APIs:

- API Name: stopActiveProjection()V in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.778383731842041, Code:
int v13 = v12.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v14.setMode(24, this.uid, this.packageName, 3);
this.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);
  - Similarity: 0.742120087146759, Code:
int v12 = v11.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v13.setMode(24, this.uid, this.packageName, 3);
MediaProjectionManagerService.-$$Nest$mstopProjectionLocked(this.this$0, MediaProjectionManagerService$MediaProjection);
  - Access Control Level: SYS_OR_SIG

- API Name: setContentRecordingSession(Landroid/view/ContentRecordingSession;Landroid/media/projection/IMediaProjection;)V in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7650898694992065, Code:
boolean v6 = this.this$0.isValidMediaProjection(v4);
boolean v8 = v7.setContentRecordingSession(p1);
int v18 = v17.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v18.setMode(24, this.uid, this.packageName, 3);
this.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);
  - Similarity: 0.7449766397476196, Code:
boolean v5 = MediaProjectionManagerService.-$$Nest$misValidMediaProjection(this.this$0, v4);
boolean v8 = v6.setContentRecordingSession(p1);
int v17 = v16.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v18.setMode(24, this.uid, this.packageName, 3);
MediaProjectionManagerService.-$$Nest$mstopProjectionLocked(this.this$0, MediaProjectionManagerService$MediaProjection);
  - Access Control Level: NONE

- API Name: getActiveProjectionInfo()Landroid/media/projection/MediaProjectionInfo; in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7621803879737854, Code:
MediaProjectionInfo v6 = this.mProjectionGrant.getProjectionInfo();
return v4;
  - Similarity: 0.7377733588218689, Code:
MediaProjectionInfo v4 = MediaProjectionManagerService.-$$Nest$mgetActiveProjectionInfo(this.this$0);
  - Access Control Level: SYS_OR_SIG

- API Name: queryStatsForUid(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; in the following Class: Lcom.android.server.usage.StorageStatsService with the following sink code entries:
  - Similarity: 0.7480612993240356, Code:
ApplicationInfo v12 = this.mPackage.getApplicationInfoAsUser(v9[0], 8192, v1);
this.mInstaller.getAppSize(p1, v9, v1, v18, v2, v10, v11, v16);
StorageStats v21 = StorageStatsService.translate(v16);
return v21;
  - Access Control Level: SYS_OR_SIG

- API Name: checkPhoneNumberAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)I in the following Class: Lcom.android.server.pm.permission.LegacyPermissionManagerService with the following sink code entries:
  - Similarity: 0.7472461462020874, Code:
PackageManager v4 = this.mContext.getPackageManager();
UserHandle v5 = UserHandle.getUserHandleForUid(p5);
ApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);
  - Access Control Level: DANGEROUS

