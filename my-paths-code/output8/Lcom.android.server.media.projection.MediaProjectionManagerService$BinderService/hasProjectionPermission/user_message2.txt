The method hasProjectionPermission in the following class Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService has the following code snippet:

This is path 1 for the API with depth 1:
public boolean hasProjectionPermission(int p1, String p2){
	if (v2 != 0) {
		AppOpsManager v3 = this.mAppOps;
		int v4 = v3.noteOpNoThrow(46, p1, p2);
		if (v4 != 0) {
			Binder.restoreCallingIdentity(v1);
			return (0 | 0);
		}
	}
}


This is path 2 for the API with depth 0:
public boolean hasProjectionPermission(int p1, String p2){
	if (v2 != 0) {
		AppOpsManager v3 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
		int v4 = v3.noteOpNoThrow(46, p1, p2);
		if (v4 != 0) {
			Binder.restoreCallingIdentity(v1);
			return (0 | 0);
		}
	}
}


This is path 3 for the API with depth 0:
public boolean hasProjectionPermission(int p1, String p2){
	if (v2 != 0) {
		AppOpsManager v3 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
		int v4 = v3.noteOpNoThrow(46, p1, p2);
		if (v4 != 0) {
			Binder.restoreCallingIdentity(v1);
			return (0 | 0);
		}
	}
}

and the following sink code:
['AppOpsManager v3 = this.mAppOps;\nint v4 = v3.noteOpNoThrow(46, p1, p2);', 'AppOpsManager v3 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);\nint v4 = v3.noteOpNoThrow(46, p1, p2);']

The method hasProjectionPermission has the following similar APIs:

- API Name: finishDataDelivery(ILandroid/content/AttributionSourceState;Z)V in the following Class: Lcom.android.server.pm.permission.PermissionManagerService$PermissionCheckerService with the following sink code entries:
  - Similarity: 0.7464977502822876, Code:
Object v3 = this.mContext.getSystemService(AppOpsManage.class);
int v20 = getNext().getUid();
String v21 = v19.getPackagesForUid(v20);
v3.finishOp(v25, p1, v26, v17, v27);
  - Similarity: 0.7320278286933899, Code:
Object v3 = this.mContext.getSystemService(AppOpsManage.class);
String v11 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, getNext());
v3.finishOp(v12, p1, v13, v11, v14);
  - Access Control Level: SYS_OR_SIG

- API Name: createProjection(ILjava/lang/String;IZ)Landroid/media/projection/IMediaProjection; in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7087187767028809, Code:
ApplicationInfo v7 = v6.getApplicationInfoAsUser(p2, 0, v4);
boolean v9 = v7.isPrivilegedApp();
MediaProjectionManagerService$MediaProjection v8 = new MediaProjectionManagerService$MediaProjection(this.this$0,p3,p1,p2,ApplicationInfo.targetSdkVersion,v9);
return v8;
  - Access Control Level: SYS_OR_SIG

- API Name: getActiveProjectionInfo()Landroid/media/projection/MediaProjectionInfo; in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7059382200241089, Code:
MediaProjectionInfo v4 = MediaProjectionManagerService.-$$Nest$mgetActiveProjectionInfo(this.this$0);
  - Access Control Level: SYS_OR_SIG

- API Name: stopActiveProjection()V in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7014811038970947, Code:
int v13 = v12.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v14.setMode(24, this.uid, this.packageName, 3);
this.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);
  - Access Control Level: SYS_OR_SIG

