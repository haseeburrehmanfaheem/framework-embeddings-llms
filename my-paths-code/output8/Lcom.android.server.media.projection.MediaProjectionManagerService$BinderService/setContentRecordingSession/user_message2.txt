The method setContentRecordingSession in the following class Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService has the following code snippet:

This is path 1 for the API with depth 2:
public void setContentRecordingSession(ContentRecordingSession p1, IMediaProjection p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mLock;
	IBinder v4 = p2.asBinder();
	boolean v6 = this.this$0.isValidMediaProjection(v4);
	boolean v5 = v6;
	boolean v3 = v5;
	if (v3 == 0) {
		Object v7 = LocalServices.getService(WindowManagerInterna.class);
		boolean v8 = v7.setContentRecordingSession(p1);
		if (v8 != 0) {
			MediaProjectionManagerService$MediaProjection v9 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
			if (v9 == 0) {
				MediaProjectionManagerService$MediaProjection v10 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
				Object v12 = this.mLock;
				IBinder v13 = IMediaProjection$Stub;
				boolean v15 = this.this$0.isValidMediaProjection(v13);
				boolean v14 = v15;
				if (v14 != 0) {
					if (this.mRestoreSystemAlertWindow == 0) {
						long v16 = Binder.clearCallingIdentity();
						AppOpsManager v17 = this.mAppOps;
						int v18 = v17.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
						if (v18 != 0) {
							AppOpsManager v19 = this.mAppOps;
							v19.setMode(24, this.uid, this.packageName, 3);
							this.mRestoreSystemAlertWindow = 0;
							Binder.restoreCallingIdentity(v16);
							this.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);
							boolean v24 = this.mToken.unlinkToDeath(this.mDeathEater, 0);
							this.mToken = 0;
							if (this.mCallback == 0) {
								MediaProjectionManagerService$CallbackDelegate v26 = MediaProjectionManagerService.-$$Nest$fgetmCallbackDelegate(this.this$0);
								v26.remove(this.mCallback);
								this.mCallback = 0;
								Binder.restoreCallingIdentity(v1);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setContentRecordingSession(ContentRecordingSession p1, IMediaProjection p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mLock;
	IBinder v4 = p2.asBinder();
	boolean v5 = MediaProjectionManagerService.-$$Nest$misValidMediaProjection(this.this$0, v4);
	boolean v3 = v5;
	if (v3 == 0) {
		Object v7 = this.sLocalServiceObjects.get(WindowManagerInterna.class);
		Object v6 = v7;
		boolean v8 = v6.setContentRecordingSession(p1);
		if (v8 != 0) {
			MediaProjectionManagerService$MediaProjection v9 = this.mProjectionGrant;
			if (v9 == 0) {
				MediaProjectionManagerService$MediaProjection v10 = this.mProjectionGrant;
				Object v12 = MediaProjectionManagerService.-$$Nest$fgetmLock(this.this$0);
				IBinder v13 = MediaProjectionManagerService$MediaProjection.asBinder();
				boolean v14 = MediaProjectionManagerService.-$$Nest$misValidMediaProjection(this.this$0, v13);
				if (v14 != 0) {
					if (this.mRestoreSystemAlertWindow == 0) {
						long v15 = Binder.clearCallingIdentity();
						AppOpsManager v16 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
						int v17 = v16.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
						if (v17 != 0) {
							AppOpsManager v18 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
							v18.setMode(24, this.uid, this.packageName, 3);
							this.mRestoreSystemAlertWindow = 0;
							Binder.restoreCallingIdentity(v15);
							MediaProjectionManagerService.-$$Nest$mstopProjectionLocked(this.this$0, MediaProjectionManagerService$MediaProjection);
							boolean v22 = this.mToken.unlinkToDeath(this.mDeathEater, 0);
							this.mToken = 0;
							MediaProjectionManagerService$MediaProjection.unregisterCallback(this.mCallback);
							this.mCallback = 0;
							Binder.restoreCallingIdentity(v1);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setContentRecordingSession(ContentRecordingSession p1, IMediaProjection p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = MediaProjectionManagerService.-$$Nest$fgetmLock(this.this$0);
	boolean v3 = p0.isValidMediaProjection(p2);
	if (v3 == 0) {
		Object v4 = LocalServices.getService(WindowManagerInterna.class);
		boolean v5 = v4.setContentRecordingSession(p1);
		if (v5 != 0) {
			MediaProjectionManagerService$MediaProjection v6 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
			if (v6 == 0) {
				MediaProjectionManagerService$MediaProjection v7 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
				v7.stop();
				Binder.restoreCallingIdentity(v1);
				return;
			}
		}
	}
}

and the following sink code:
['boolean v6 = this.this$0.isValidMediaProjection(v4);\nboolean v8 = v7.setContentRecordingSession(p1);\nint v18 = v17.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);\nv18.setMode(24, this.uid, this.packageName, 3);\nthis.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);', 'boolean v5 = MediaProjectionManagerService.-$$Nest$misValidMediaProjection(this.this$0, v4);\nboolean v8 = v6.setContentRecordingSession(p1);\nint v17 = v16.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);\nv18.setMode(24, this.uid, this.packageName, 3);\nMediaProjectionManagerService.-$$Nest$mstopProjectionLocked(this.this$0, MediaProjectionManagerService$MediaProjection);', 'boolean v3 = p0.isValidMediaProjection(p2);\nboolean v5 = v4.setContentRecordingSession(p1);\nv7.stop();']

The method setContentRecordingSession has the following similar APIs:

- API Name: stopActiveProjection()V in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.9198669195175171, Code:
int v12 = v11.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v13.setMode(24, this.uid, this.packageName, 3);
MediaProjectionManagerService.-$$Nest$mstopProjectionLocked(this.this$0, MediaProjectionManagerService$MediaProjection);
  - Similarity: 0.9038986563682556, Code:
int v13 = v12.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v14.setMode(24, this.uid, this.packageName, 3);
this.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);
  - Access Control Level: SYS_OR_SIG

- API Name: resumeRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.787869393825531, Code:
ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
ITvInputSession v9 = v11;
ITvInputSession v8 = v9;
v8.resumeRecording(p2);
  - Similarity: 0.7545497417449951, Code:
ITvInputSession v8 = this.this$0.getSessionLocked(p1, v1, v3);
ITvInputSession v7 = v8;
v7.resumeRecording(p2);
  - Access Control Level: SYS_OR_SIG

- API Name: isAssistDataAllowedOnCurrentActivity()Z in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.771361768245697, Code:
boolean v13 = v10.isScreenCaptureAllowed(ActivityRecord.mUserId);
return v13;
  - Access Control Level: NONE

- API Name: createProjection(ILjava/lang/String;IZ)Landroid/media/projection/IMediaProjection; in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7650898694992065, Code:
ApplicationInfo v7 = v6.getApplicationInfoAsUser(p2, 0, v4);
boolean v9 = v7.isPrivilegedApp();
MediaProjectionManagerService$MediaProjection v8 = new MediaProjectionManagerService$MediaProjection(this.this$0,p3,p1,p2,ApplicationInfo.targetSdkVersion,v9);
return v8;
  - Access Control Level: SYS_OR_SIG

- API Name: getActiveProjectionInfo()Landroid/media/projection/MediaProjectionInfo; in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7639406323432922, Code:
MediaProjectionInfo v4 = MediaProjectionManagerService.-$$Nest$mgetActiveProjectionInfo(this.this$0);
  - Similarity: 0.7536940574645996, Code:
MediaProjectionInfo v6 = this.mProjectionGrant.getProjectionInfo();
return v4;
  - Access Control Level: SYS_OR_SIG

