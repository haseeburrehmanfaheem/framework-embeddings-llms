The method stopActiveProjection in the following class Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService has the following code snippet:

This is path 1 for the API with depth 2:
public void stopActiveProjection(){
	if (v2 != 0) {
		long v3 = Binder.clearCallingIdentity();
		MediaProjectionManagerService$MediaProjection v4 = this.mProjectionGrant;
		if (v4 == 0) {
			MediaProjectionManagerService$MediaProjection v5 = this.mProjectionGrant;
			Object v7 = this.mLock;
			IBinder v8 = IMediaProjection$Stub;
			boolean v10 = this.this$0.isValidMediaProjection(v8);
			boolean v9 = v10;
			if (v9 != 0) {
				if (this.mRestoreSystemAlertWindow == 0) {
					long v11 = Binder.clearCallingIdentity();
					AppOpsManager v12 = this.mAppOps;
					int v13 = v12.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
					if (v13 != 0) {
						AppOpsManager v14 = this.mAppOps;
						v14.setMode(24, this.uid, this.packageName, 3);
						this.mRestoreSystemAlertWindow = 0;
						Binder.restoreCallingIdentity(v11);
						this.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);
						boolean v19 = this.mToken.unlinkToDeath(this.mDeathEater, 0);
						this.mToken = 0;
						if (this.mCallback == 0) {
							MediaProjectionManagerService$CallbackDelegate v21 = MediaProjectionManagerService.-$$Nest$fgetmCallbackDelegate(this.this$0);
							v21.remove(this.mCallback);
							this.mCallback = 0;
							Binder.restoreCallingIdentity(v3);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void stopActiveProjection(){
	if (v2 != 0) {
		long v3 = Binder.clearCallingIdentity();
		MediaProjectionManagerService$MediaProjection v4 = this.mProjectionGrant;
		if (v4 == 0) {
			MediaProjectionManagerService$MediaProjection v5 = this.mProjectionGrant;
			Object v7 = MediaProjectionManagerService.-$$Nest$fgetmLock(this.this$0);
			IBinder v8 = MediaProjectionManagerService$MediaProjection.asBinder();
			boolean v9 = MediaProjectionManagerService.-$$Nest$misValidMediaProjection(this.this$0, v8);
			if (v9 != 0) {
				if (this.mRestoreSystemAlertWindow == 0) {
					long v10 = Binder.clearCallingIdentity();
					AppOpsManager v11 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
					int v12 = v11.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
					if (v12 != 0) {
						AppOpsManager v13 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
						v13.setMode(24, this.uid, this.packageName, 3);
						this.mRestoreSystemAlertWindow = 0;
						Binder.restoreCallingIdentity(v10);
						MediaProjectionManagerService.-$$Nest$mstopProjectionLocked(this.this$0, MediaProjectionManagerService$MediaProjection);
						boolean v17 = this.mToken.unlinkToDeath(this.mDeathEater, 0);
						this.mToken = 0;
						MediaProjectionManagerService$MediaProjection.unregisterCallback(this.mCallback);
						this.mCallback = 0;
						Binder.restoreCallingIdentity(v3);
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void stopActiveProjection(){
	if (v2 != 0) {
		long v3 = Binder.clearCallingIdentity();
		MediaProjectionManagerService$MediaProjection v4 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
		if (v4 == 0) {
			MediaProjectionManagerService$MediaProjection v5 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
			v5.stop();
			Binder.restoreCallingIdentity(v3);
			return;
		}
	}
}

and the following sink code:
['int v13 = v12.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);\nv14.setMode(24, this.uid, this.packageName, 3);\nthis.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);', 'int v12 = v11.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);\nv13.setMode(24, this.uid, this.packageName, 3);\nMediaProjectionManagerService.-$$Nest$mstopProjectionLocked(this.this$0, MediaProjectionManagerService$MediaProjection);', 'v5.stop();']

The method stopActiveProjection has the following similar APIs:

- API Name: setContentRecordingSession(Landroid/view/ContentRecordingSession;Landroid/media/projection/IMediaProjection;)V in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.9198669195175171, Code:
boolean v5 = MediaProjectionManagerService.-$$Nest$misValidMediaProjection(this.this$0, v4);
boolean v8 = v6.setContentRecordingSession(p1);
int v17 = v16.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v18.setMode(24, this.uid, this.packageName, 3);
MediaProjectionManagerService.-$$Nest$mstopProjectionLocked(this.this$0, MediaProjectionManagerService$MediaProjection);
  - Similarity: 0.902677059173584, Code:
boolean v6 = this.this$0.isValidMediaProjection(v4);
boolean v8 = v7.setContentRecordingSession(p1);
int v18 = v17.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
v18.setMode(24, this.uid, this.packageName, 3);
this.this$0.stopProjectionLocked(MediaProjectionManagerService$MediaProjection);
  - Access Control Level: NONE

- API Name: getActiveProjectionInfo()Landroid/media/projection/MediaProjectionInfo; in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7808073163032532, Code:
MediaProjectionInfo v4 = MediaProjectionManagerService.-$$Nest$mgetActiveProjectionInfo(this.this$0);
  - Similarity: 0.7543898224830627, Code:
MediaProjectionInfo v6 = this.mProjectionGrant.getProjectionInfo();
return v4;
  - Similarity: 0.7366815209388733, Code:
MediaProjectionInfo v5 = this.this$0.getActiveProjectionInfo();
  - Access Control Level: SYS_OR_SIG

- API Name: createProjection(ILjava/lang/String;IZ)Landroid/media/projection/IMediaProjection; in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.778383731842041, Code:
ApplicationInfo v7 = v6.getApplicationInfoAsUser(p2, 0, v4);
boolean v9 = v7.isPrivilegedApp();
MediaProjectionManagerService$MediaProjection v8 = new MediaProjectionManagerService$MediaProjection(this.this$0,p3,p1,p2,ApplicationInfo.targetSdkVersion,v9);
return v8;
  - Access Control Level: SYS_OR_SIG

- API Name: isValidMediaProjection(Landroid/media/projection/IMediaProjection;)Z in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.710509181022644, Code:
IBinder v1 = p1.asBinder();
boolean v2 = MediaProjectionManagerService.-$$Nest$misValidMediaProjection(this.this$0, v1);
return v2;
  - Access Control Level: NONE

- API Name: hasProjectionPermission(ILjava/lang/String;)Z in the following Class: Lcom.android.server.media.projection.MediaProjectionManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7014811038970947, Code:
AppOpsManager v3 = MediaProjectionManagerService.-$$Nest$fgetmAppOps(this.this$0);
int v4 = v3.noteOpNoThrow(46, p1, p2);
  - Access Control Level: NONE

