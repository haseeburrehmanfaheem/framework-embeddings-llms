The method provideContextImage has the following code snippet:

This is path 1 for the API with depth 2:
public void provideContextImage(int p1, int p2, Bundle p3){
	if (p3 == 0) {
		int v1 = UserHandle.getCallingUserId();
		if (v5 == 0) {
			boolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(v1);
			if (v6 != 0) {
				int v7 = Binder.getCallingUid();
				boolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);
				if (v8 == 0) {
					boolean v9 = p3.containsKey("android.contentsuggestions.extra.BITMAP");
					if (v9 != 0) {
						ActivityTaskManagerInternal v10 = ContentSuggestionsManagerService.-$$Nest$fgetmActivityTaskManagerInternal(this.this$0);
						TaskSnapshot v11 = v10.getTaskSnapshotBlocking(p2, 0);
						if (v11 == 0) {
							HardwareBuffer v12 = v11.getHardwareBuffer();
							ColorSpace v13 = v11.getColorSpace();
							if (v13 == 0) {
								int v14 = v13.getId();
								Object v15 = ContentSuggestionsManagerService.access$200(this.this$0);
								AbstractPerUserSystemService v16 = ContentSuggestionsManagerService.access$300(this.this$0, p1);
								if (v16 == 0) {
									v16.provideContextImageLocked(p2, 0, 0, p3);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void provideContextImage(int p1, int p2, Bundle p3){
	if (p3 == 0) {
		int v1 = UserHandle.getCallingUserId();
		this.this$0.enforceCaller(v1, "provideContextImage");
		boolean v4 = p3.containsKey("android.contentsuggestions.extra.BITMAP");
		if (v4 != 0) {
			ActivityTaskManagerInternal v5 = this.mActivityTaskManagerInternal;
			TaskSnapshot v6 = v5.getTaskSnapshotBlocking(p2, 0);
			if (v6 == 0) {
				HardwareBuffer v7 = v6.getHardwareBuffer();
				ColorSpace v8 = v6.getColorSpace();
				if (v8 == 0) {
					int v9 = v8.getId();
					Object v10 = AbstractMasterSystemService.mLock;
					AbstractPerUserSystemService v12 = this.this$0.getServiceForUserLocked(p1);
					AbstractPerUserSystemService v11 = v12;
					if (v11 == 0) {
						v11.provideContextImageLocked(p2, 0, 0, p3);
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void provideContextImage(int p1, int p2, Bundle p3){
	if (p3 == 0) {
		int v1 = UserHandle.getCallingUserId();
		ContentSuggestionsManagerService.-$$Nest$menforceCaller(this.this$0, v1, "provideContextImage");
		boolean v3 = p3.containsKey("android.contentsuggestions.extra.BITMAP");
		if (v3 != 0) {
			ActivityTaskManagerInternal v4 = ContentSuggestionsManagerService.-$$Nest$fgetmActivityTaskManagerInternal(this.this$0);
			TaskSnapshot v5 = v4.getTaskSnapshotBlocking(p2, 0);
			if (v5 == 0) {
				HardwareBuffer v6 = v5.getHardwareBuffer();
				ColorSpace v7 = v5.getColorSpace();
				if (v7 == 0) {
					int v8 = v7.getId();
					Object v9 = ContentSuggestionsManagerService.access$200(this.this$0);
					AbstractPerUserSystemService v10 = ContentSuggestionsManagerService.access$300(this.this$0, p1);
					if (v10 == 0) {
						v10.provideContextImageLocked(p2, 0, 0, p3);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nboolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(v1);\nTaskSnapshot v11 = v10.getTaskSnapshotBlocking(p2, 0);\nHardwareBuffer v12 = v11.getHardwareBuffer();\nColorSpace v13 = v11.getColorSpace();']

The method provideContextImage has the following similar APIs:

- API Name: isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z with Similarity Score: 0.7906934022903442
  - Access Control Level: NONE and the following code:
int v1 = Binder.getCallingUid();
int v2 = UserHandle.getUserId(v1);
Object v5 = this.sSnapshot.get();
int v6 = this.sSnapshotPendingVersion.get();
PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v16 = new ComputerEngine(v14,v11);
this.mSnapshotStatistics.rebuild(v13, v18, -1);
Computer v12 = v16;
this.sSnapshot.set(v12);
Computer v21 = v12.use();
ApplicationInfo v23 = v3.getApplicationInfo(p1[(p1.length - 1)], 0, v2);
boolean v24 = v23.isAudioPlaybackCaptureAllowed();
[Z v22 = new [Z(p1.length);

- API Name: isPackageDebuggable(Ljava/lang/String;)Z with Similarity Score: 0.7878252267837524
  - Access Control Level: NONE and the following code:
int v1 = UserHandle.getCallingUserId();
Object v4 = this.sSnapshot.get();
int v5 = this.sSnapshotPendingVersion.get();
if (v7 != 0) {
PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v15 = new ComputerEngine(v13,v10);
this.mSnapshotStatistics.rebuild(v12, v17, -1);
Computer v11 = v15;
this.sSnapshot.set(v11);
Computer v20 = v11.use();
Computer v2 = v20;
ApplicationInfo v21 = v2.getApplicationInfo(p1, 0, v1);

