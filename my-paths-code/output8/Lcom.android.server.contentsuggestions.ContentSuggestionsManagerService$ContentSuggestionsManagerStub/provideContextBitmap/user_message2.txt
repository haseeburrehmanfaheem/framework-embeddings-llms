The method provideContextBitmap has the following code snippet:

This is path 1 for the API with depth 2:
public void provideContextBitmap(int p1, Bitmap p2, Bundle p3){
	if (p2 == 0) {
		if (p3 == 0) {
			int v1 = UserHandle.getCallingUserId();
			if (v5 == 0) {
				boolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(v1);
				if (v6 != 0) {
					int v7 = Binder.getCallingUid();
					boolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);
					if (v8 == 0) {
						Object v9 = ContentSuggestionsManagerService.access$000(this.this$0);
						AbstractPerUserSystemService v10 = ContentSuggestionsManagerService.access$100(this.this$0, p1);
						if (v10 == 0) {
							p3.putParcelable("android.contentsuggestions.extra.BITMAP", p2);
							RemoteContentSuggestionsService v14 = ContentSuggestionsPerUserService.ensureRemoteServiceLocked();
							if (v14 == 0) {
								v14.provideContextImage(-1, 0, 0, p3);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void provideContextBitmap(int p1, Bitmap p2, Bundle p3){
	if (p2 == 0) {
		if (p3 == 0) {
			int v1 = UserHandle.getCallingUserId();
			this.this$0.enforceCaller(v1, "provideContextBitmap");
			Object v4 = AbstractMasterSystemService.mLock;
			AbstractPerUserSystemService v6 = this.this$0.getServiceForUserLocked(p1);
			AbstractPerUserSystemService v5 = v6;
			if (v5 == 0) {
				p3.putParcelable("android.contentsuggestions.extra.BITMAP", p2);
				ContentSuggestionsPerUserService.provideContextImageLocked(-1, 0, 0, p3);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void provideContextBitmap(int p1, Bitmap p2, Bundle p3){
	if (p2 == 0) {
		if (p3 == 0) {
			int v1 = UserHandle.getCallingUserId();
			ContentSuggestionsManagerService.-$$Nest$menforceCaller(this.this$0, v1, "provideContextBitmap");
			Object v3 = ContentSuggestionsManagerService.access$000(this.this$0);
			AbstractPerUserSystemService v4 = ContentSuggestionsManagerService.access$100(this.this$0, p1);
			if (v4 == 0) {
				p3.putParcelable("android.contentsuggestions.extra.BITMAP", p2);
				v4.provideContextImageFromBitmapLocked(p3);
				return;
			}
		}
	}
}

and the following sink code:
['int v7 = Binder.getCallingUid();\nboolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);\nObject v9 = ContentSuggestionsManagerService.access$000(this.this$0);\nAbstractPerUserSystemService v10 = ContentSuggestionsManagerService.access$100(this.this$0, p1);\np3.putParcelable("android.contentsuggestions.extra.BITMAP", p2);', 'this.this$0.enforceCaller(v1, "provideContextBitmap");\nAbstractPerUserSystemService v6 = this.this$0.getServiceForUserLocked(p1);\nContentSuggestionsManagerService.-$$Nest$menforceCaller(this.this$0, v1, "provideContextBitmap");', 'RemoteContentSuggestionsService v14 = ContentSuggestionsPerUserService.ensureRemoteServiceLocked();\nv14.provideContextImage(-1, 0, 0, p3);\nContentSuggestionsPerUserService.provideContextImageLocked(-1, 0, 0, p3);']

The method provideContextBitmap has the following similar APIs:

- API Name: classifyContentSelections(ILandroid/app/contentsuggestions/ClassificationsRequest;Landroid/app/contentsuggestions/IClassificationsCallback;)V with Similarity Score: 0.863711953163147
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = UserHandle.getCallingUserId();
Object v9 = ContentSuggestionsManagerService.access$600(this.this$0);
AbstractPerUserSystemService v10 = ContentSuggestionsManagerService.access$700(this.this$0, p1);
RemoteContentSuggestionsService v15 = new RemoteContentSuggestionsService(v16,v14,AbstractPerUserSystemService.mUserId,v17,v19,AbstractMasterSystemService.verbose);
RemoteContentSuggestionsService$$ExternalSyntheticLambda0 v22 = new RemoteContentSuggestionsService$$ExternalSyntheticLambda0(p2,p3);
RemoteContentSuggestionsService.scheduleAsyncRequest(v22);

- API Name: isEnabled(ILcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.8577693700790405
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = UserHandle.getCallingUserId();
if (v5 == 0) {
boolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(v1);
if (v6 != 0) {
int v7 = Binder.getCallingUid();
boolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);
Object v9 = ContentSuggestionsManagerService.access$1000(this.this$0);
boolean v10 = ContentSuggestionsManagerService.access$1100(this.this$0, p1);
p2.send((v10 ^ 1), 0);

