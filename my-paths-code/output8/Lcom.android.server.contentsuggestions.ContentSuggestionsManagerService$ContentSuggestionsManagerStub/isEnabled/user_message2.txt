The method isEnabled has the following code snippet:

This is path 1 for the API with depth 2:
public void isEnabled(int p1, IResultReceiver p2){
	int v1 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		boolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(v1);
		if (v6 != 0) {
			int v7 = Binder.getCallingUid();
			boolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);
			if (v8 == 0) {
				Object v9 = ContentSuggestionsManagerService.access$1000(this.this$0);
				boolean v10 = ContentSuggestionsManagerService.access$1100(this.this$0, p1);
				p2.send((v10 ^ 1), 0);
				return;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void isEnabled(int p1, IResultReceiver p2){
	int v1 = UserHandle.getCallingUserId();
	this.this$0.enforceCaller(v1, "isEnabled");
	Object v4 = AbstractMasterSystemService.mLock;
	boolean v6 = this.this$0.isDisabledLocked(p1);
	boolean v5 = v6;
	p2.send((v5 ^ 1), 0);
	return;
}


This is path 3 for the API with depth 0:
public void isEnabled(int p1, IResultReceiver p2){
	int v1 = UserHandle.getCallingUserId();
	ContentSuggestionsManagerService.-$$Nest$menforceCaller(this.this$0, v1, "isEnabled");
	Object v3 = ContentSuggestionsManagerService.access$1000(this.this$0);
	boolean v4 = ContentSuggestionsManagerService.access$1100(this.this$0, p1);
	p2.send((v4 ^ 1), 0);
	return;
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nif (v5 == 0) {\nboolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(v1);\nif (v6 != 0) {\nint v7 = Binder.getCallingUid();\nboolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);\nObject v9 = ContentSuggestionsManagerService.access$1000(this.this$0);\nboolean v10 = ContentSuggestionsManagerService.access$1100(this.this$0, p1);\np2.send((v10 ^ 1), 0);', 'this.this$0.enforceCaller(v1, "isEnabled");\nObject v4 = AbstractMasterSystemService.mLock;\nboolean v6 = this.this$0.isDisabledLocked(p1);\np2.send((v5 ^ 1), 0);', 'ContentSuggestionsManagerService.-$$Nest$menforceCaller(this.this$0, v1, "isEnabled");\nObject v3 = ContentSuggestionsManagerService.access$1000(this.this$0);\nboolean v4 = ContentSuggestionsManagerService.access$1100(this.this$0, p1);\np2.send((v4 ^ 1), 0);']

The method isEnabled has the following similar APIs:

- API Name: classifyContentSelections(ILandroid/app/contentsuggestions/ClassificationsRequest;Landroid/app/contentsuggestions/IClassificationsCallback;)V with Similarity Score: 0.8676376938819885
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = UserHandle.getCallingUserId();
Object v9 = ContentSuggestionsManagerService.access$600(this.this$0);
AbstractPerUserSystemService v10 = ContentSuggestionsManagerService.access$700(this.this$0, p1);
RemoteContentSuggestionsService v15 = new RemoteContentSuggestionsService(v16,v14,AbstractPerUserSystemService.mUserId,v17,v19,AbstractMasterSystemService.verbose);
RemoteContentSuggestionsService$$ExternalSyntheticLambda0 v22 = new RemoteContentSuggestionsService$$ExternalSyntheticLambda0(p2,p3);
RemoteContentSuggestionsService.scheduleAsyncRequest(v22);

- API Name: provideContextBitmap(ILandroid/graphics/Bitmap;Landroid/os/Bundle;)V with Similarity Score: 0.8577693700790405
  - Access Control Level: SYS_OR_SIG and the following code:
int v7 = Binder.getCallingUid();
boolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);
Object v9 = ContentSuggestionsManagerService.access$000(this.this$0);
AbstractPerUserSystemService v10 = ContentSuggestionsManagerService.access$100(this.this$0, p1);
p3.putParcelable("android.contentsuggestions.extra.BITMAP", p2);

