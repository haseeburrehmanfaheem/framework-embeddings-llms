The method checkDeviceIdentifierAccess has the following code snippet:

This is path 1 for the API with depth 1:
public int checkDeviceIdentifierAccess(String p1, String p2, String p3, int p4, int p5){
	if (v3 != 0) {
		if (p1 == 0) {
			long v4 = this.mInjector.clearCallingIdentity();
			Object v6 = this.mContext.getSystemService("appops");
			Object v5 = v6;
			int v7 = v5.noteOpNoThrow("android:read_device_identifiers", p5, p1, p3, p2);
			if (v7 != 0) {
				this.mInjector.restoreCallingIdentity(v4);
				Object v10 = this.mContext.getSystemService("device_policy");
				Object v9 = v10;
				if (v9 == 0) {
					boolean v11 = v9.hasDeviceIdentifierAccess(p1, p4, p5);
					if (v11 == 0) {
						return 0;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public int checkDeviceIdentifierAccess(String p1, String p2, String p3, int p4, int p5){
	if (v3 != 0) {
		if (p1 == 0) {
			long v4 = this.mInjector.clearCallingIdentity();
			Object v5 = this.mInjector.getSystemService("appops");
			int v6 = v5.noteOpNoThrow("android:read_device_identifiers", p5, p1, p3, p2);
			if (v6 != 0) {
				this.mInjector.restoreCallingIdentity(v4);
				Object v8 = this.mInjector.getSystemService("device_policy");
				if (v8 == 0) {
					boolean v9 = v8.hasDeviceIdentifierAccess(p1, p4, p5);
					if (v9 == 0) {
						return 0;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 1:
public int checkDeviceIdentifierAccess(String p1, String p2, String p3, int p4, int p5){
	if (v3 != 0) {
		if (p1 == 0) {
			long v4 = this.mInjector.clearCallingIdentity();
			Object v6 = this.mContext.getSystemService("appops");
			Object v5 = v6;
			int v7 = v5.noteOpNoThrow("android:read_device_identifiers", p5, p1, p3, p2);
			if (v7 != 0) {
				this.mInjector.restoreCallingIdentity(v4);
				Object v10 = this.mContext.getSystemService("device_policy");
				Object v9 = v10;
				if (v9 == 0) {
					boolean v11 = v9.hasDeviceIdentifierAccess(p1, p4, p5);
					if (v11 == 0) {
						return -1;
					}
				}
			}
		}
	}
}

and the following sink code:
['long v4 = this.mInjector.clearCallingIdentity();\nObject v6 = this.mContext.getSystemService("appops");\nint v7 = v5.noteOpNoThrow("android:read_device_identifiers", p5, p1, p3, p2);\nthis.mInjector.restoreCallingIdentity(v4);\nObject v10 = this.mContext.getSystemService("device_policy");\nboolean v11 = v9.hasDeviceIdentifierAccess(p1, p4, p5);']

The method checkDeviceIdentifierAccess has the following similar APIs:

- API Name: isAutoRevokeExempted(Ljava/lang/String;I)Z with Similarity Score: 0.7809799313545227
  - Access Control Level: SYS_OR_SIG and the following code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v3 = Binder.getCallingUid();
boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2);
boolean v5 = p0.checkAutoRevokeAccess(v2, v3);
int v6 = v2.getUid();
int v7 = UserHandle.getUid(p2, v6);
long v8 = Binder.clearCallingIdentity();
int v9 = this.mAppOpsManager.checkOpNoThrow(97, v7, p1);

- API Name: setAutoRevokeExempted(Ljava/lang/String;ZI)Z with Similarity Score: 0.7781212329864502
  - Access Control Level: SYS_OR_SIG and the following code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v3 = Binder.getCallingUid();
boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);
this.mAppOpsManager.setMode(97, v9, v13, 0);

