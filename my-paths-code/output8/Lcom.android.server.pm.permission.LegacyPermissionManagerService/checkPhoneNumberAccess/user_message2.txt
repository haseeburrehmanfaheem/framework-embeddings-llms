The method checkPhoneNumberAccess in the following class Lcom.android.server.pm.permission.LegacyPermissionManagerService has the following code snippet:

This is path 1 for the API with depth 1:
public int checkPhoneNumberAccess(String p1, String p2, String p3, int p4, int p5){
	if (v2 != 0) {
		if (p1 != 0) {
			PackageManager v4 = this.mContext.getPackageManager();
			UserHandle v5 = UserHandle.getUserHandleForUid(p5);
			ApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);
			ApplicationInfo v3 = v6;
			if (1 == 0) {
				if (v7 != 0) {
					if (v8 != 0) {
						if (v9 != 0) {
							if (v10 != 0) {
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public int checkPhoneNumberAccess(String p1, String p2, String p3, int p4, int p5){
	if (v2 != 0) {
		if (p1 != 0) {
			ApplicationInfo v3 = this.mInjector.getApplicationInfo(p1, p5);
			if (1 == 0) {
				if (v4 != 0) {
					if (v5 != 0) {
						if (v6 != 0) {
							if (v7 != 0) {
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 1:
public int checkPhoneNumberAccess(String p1, String p2, String p3, int p4, int p5){
	if (v2 != 0) {
		if (p1 != 0) {
			PackageManager v4 = this.mContext.getPackageManager();
			UserHandle v5 = UserHandle.getUserHandleForUid(p5);
			ApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);
			ApplicationInfo v3 = v6;
			if (1 == 0) {
				if (v7 != 0) {
					if (v8 != 0) {
						if (v9 != 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['PackageManager v4 = this.mContext.getPackageManager();\nUserHandle v5 = UserHandle.getUserHandleForUid(p5);\nApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);', 'ApplicationInfo v3 = this.mInjector.getApplicationInfo(p1, p5);']

The method checkPhoneNumberAccess has the following similar APIs:

- API Name: getGameModeInfo(Ljava/lang/String;I)Landroid/app/GameModeInfo; in the following Class: Lcom.android.server.app.GameManagerService with the following sink code entries:
  - Similarity: 0.8181248903274536, Code:
ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3);
int v12 = v11.getGameModeLocked(p1);
[I v22 = new [I(v21);
GameModeInfo v25 = new GameModeInfo(v7,v16);
  - Similarity: 0.8048449158668518, Code:
ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3);
int v12 = v11.getGameModeLocked(p1);
[I v16 = new [I(0);
GameModeInfo v17 = new GameModeInfo(v7,v13);
  - Access Control Level: SYS_OR_SIG

- API Name: reportChangeByPackageName(JLjava/lang/String;I)V in the following Class: Lcom.android.server.compat.PlatformCompat with the following sink code entries:
  - Similarity: 0.8114607334136963, Code:
Object v4 = LocalServices.getService(PackageManagerInternal.class);
int v5 = Process.myUid();
ApplicationInfo v6 = v4.getApplicationInfo(p2, 0, v5, p3);
if (v3 == 0) {
this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, 3);
  - Similarity: 0.7996017932891846, Code:
ApplicationInfo v2 = p0.getApplicationInfo(p2, p3);
p0.reportChangeInternal(p1, ApplicationInfo.uid, 3);
  - Access Control Level: SYS_OR_SIG

- API Name: getPackageScreenCompatMode(Ljava/lang/String;)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.8092620968818665, Code:
ApplicationInfo v10 = v8.getApplicationInfo(p1, 0, 0);
CompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked(v10);
boolean v13 = v12.alwaysSupportsScreen();
boolean v14 = v12.neverSupportsScreen();
boolean v15 = CompatModePackages.getPackageCompatModeEnabledLocked(v10);
int v11 = v15;
int v7 = v11;
return v7;
  - Access Control Level: SYS_OR_SIG

- API Name: print(Ljava/lang/String;Landroid/print/IPrintDocumentAdapter;Landroid/print/PrintAttributes;Ljava/lang/String;II)Landroid/os/Bundle; in the following Class: Lcom.android.server.print.PrintManagerService$PrintManagerImpl with the following sink code entries:
  - Similarity: 0.8028026819229126, Code:
PackageManager v10 = this.mContext.getPackageManager();
int v11 = Binder.getCallingUid();
String v12 = v10.getPackagesForUid(v11);
UserState v19 = new UserState(this.mContext,v5,this.mLock,0);
  - Access Control Level: SYS_OR_SIG

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.79509437084198, Code:
int v1 = UserHandle.getUserId(p5);
PackageManager v2 = this.mContext.getPackageManager();
String v3 = v2.getPackagesForUid(p5);
  - Access Control Level: NORMAL

