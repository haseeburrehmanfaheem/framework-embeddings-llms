The method setDeviceLockedForUser in the following class Lcom.android.server.trust.TrustManagerService$1 has the following code snippet:

This is path 1 for the API with depth 2:
public void setDeviceLockedForUser(int p1, boolean p2){
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = this.mLockPatternUtils;
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	if (v4 == 0) {
		LockPatternUtils v5 = this.mLockPatternUtils;
		boolean v6 = v5.isSecure(p1);
		if (v6 == 0) {
			SparseBooleanArray v7 = this.mDeviceLockedForUser;
			SparseBooleanArray v8 = this.mDeviceLockedForUser;
			v8.put(p1, p2);
			Object v12 = this.mContext.getSystemService(BiometricManage.class);
			if (v12 != 0) {
				[J v13 = v12.getAuthenticatorIds(p1);
				[J v11 = v13;
				[J v10 = v11;
				if (p2 == 0) {
					IBinder v16 = ServiceManager.checkService("android.security.authorization");
					IKeystoreAuthorization v17 = IKeystoreAuthorization$Stub.asInterface(v16);
					IKeystoreAuthorization v15 = v17;
					v15.onLockScreenEvent(1, p1, 0, v10);
					int v14 = ServiceSpecificException.errorCode;
					if (p2 == 0) {
						IActivityManager v19 = ActivityManager.getService();
						v19.notifyLockedProfile(p1);
						Intent v21 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
						Intent v23 = v21.addFlags(1073741824);
						Intent v24 = v21.putExtra("android.intent.extra.user_handle", p1);
						Context v25 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);
						v25.sendBroadcastAsUser(v21, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
						Binder.restoreCallingIdentity(v2);
						return;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setDeviceLockedForUser(int p1, boolean p2){
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = this.mLockPatternUtils;
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	if (v4 == 0) {
		LockPatternUtils v5 = this.mLockPatternUtils;
		boolean v6 = v5.isSecure(p1);
		if (v6 == 0) {
			SparseBooleanArray v7 = this.mDeviceLockedForUser;
			SparseBooleanArray v8 = this.mDeviceLockedForUser;
			v8.put(p1, p2);
			[J v11 = this.this$0.getBiometricSids(p1);
			[J v10 = v11;
			if (p2 == 0) {
				IKeystoreAuthorization v13 = Authorization.getService();
				v13.onLockScreenEvent(1, p1, 0, v10);
				int v12 = ServiceSpecificException.errorCode;
				if (p2 == 0) {
					IActivityManager v15 = ActivityManager.getService();
					v15.notifyLockedProfile(p1);
					Intent v17 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
					Intent v19 = v17.addFlags(1073741824);
					Intent v20 = v17.putExtra("android.intent.extra.user_handle", p1);
					Context v21 = this.mContext;
					v21.sendBroadcastAsUser(v17, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
					Binder.restoreCallingIdentity(v2);
					return;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setDeviceLockedForUser(int p1, boolean p2){
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	if (v4 == 0) {
		LockPatternUtils v5 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
		boolean v6 = v5.isSecure(p1);
		if (v6 == 0) {
			SparseBooleanArray v7 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);
			SparseBooleanArray v8 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);
			v8.put(p1, p2);
			[J v10 = TrustManagerService.-$$Nest$mgetBiometricSids(this.this$0, p1);
			int v11 = Authorization.onLockScreenEvent(p2, p1, 0, v10);
			if (p2 == 0) {
				IActivityManager v12 = ActivityManager.getService();
				v12.notifyLockedProfile(p1);
				Intent v14 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
				Intent v16 = v14.addFlags(1073741824);
				Intent v17 = v14.putExtra("android.intent.extra.user_handle", p1);
				Context v18 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);
				v18.sendBroadcastAsUser(v14, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
				Binder.restoreCallingIdentity(v2);
				return;
			}
		}
	}
}

and the following sink code:
['LockPatternUtils v3 = this.mLockPatternUtils;\nboolean v4 = v3.isSeparateProfileChallengeEnabled(p1);\nLockPatternUtils v5 = this.mLockPatternUtils;\nboolean v6 = v5.isSecure(p1);\nSparseBooleanArray v8 = this.mDeviceLockedForUser;\nv8.put(p1, p2);\nObject v12 = this.mContext.getSystemService(BiometricManage.class);\n[J v13 = v12.getAuthenticatorIds(p1);\nIKeystoreAuthorization v17 = IKeystoreAuthorization$Stub.asInterface(v16);\nv15.onLockScreenEvent(1, p1, 0, v10);\nIntent v21 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");\nv21.putExtra("android.intent.extra.user_handle", p1);\nContext v25 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);\nv25.sendBroadcastAsUser(v21, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);']

The method setDeviceLockedForUser has the following similar APIs:

- API Name: detectFace(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)J in the following Class: Lcom.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper with the following sink code entries:
  - Similarity: 0.7804127335548401, Code:
LockPatternUtils v11 = this.mLockPatternUtils;
int v13 = v11.getStrongAuthForUser(p2);
ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
long v43 = Pair.second.scheduleFaceDetect(v40, p1, p2, v41, p4, 1);
return v43;
  - Similarity: 0.7727723717689514, Code:
LockPatternUtils v5 = FaceService.-$$Nest$fgetmLockPatternUtils(this.this$0);
boolean v6 = Utils.isUserEncryptedOrLockdown(v5, p2);
ClientMonitorCallbackConverter v9 = new ClientMonitorCallbackConverter(p3);
long v11 = Pair.second.scheduleFaceDetect(v8, p1, p2, v9, p4, 1);
return v11;
  - Similarity: 0.7671465277671814, Code:
LockPatternUtils v11 = this.mLockPatternUtils;
int v13 = v11.getStrongAuthForUser(p2);
ClientMonitorCallbackConverter v28 = new ClientMonitorCallbackConverter(p3);
long v30 = Pair.second.scheduleFaceDetect(v27, p1, p2, v28, p4, 1);
return v30;
  - Access Control Level: SYS_OR_SIG

- API Name: detectFingerprint(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;)J in the following Class: Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper with the following sink code entries:
  - Similarity: 0.7716308832168579, Code:
LockPatternUtils v11 = this.mLockPatternUtils;
int v13 = v11.getStrongAuthForUser(p2);
ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
long v43 = Pair.second.scheduleFingerDetect(v40, p1, p2, v41, p4, 1);
return v43;
  - Similarity: 0.7354686856269836, Code:
LockPatternUtils v5 = FingerprintService.-$$Nest$fgetmLockPatternUtils(this.this$0);
boolean v6 = Utils.isUserEncryptedOrLockdown(v5, p2);
Pair v7 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
int v8 = Pair.first.intValue();
ClientMonitorCallbackConverter v9 = new ClientMonitorCallbackConverter(p3);
long v11 = Pair.second.scheduleFingerDetect(v8, p1, p2, v9, p4, 1);
return v11;
  - Access Control Level: SYS_OR_SIG

- API Name: isDeviceSecure(II)Z in the following Class: Lcom.android.server.trust.TrustManagerService$1 with the following sink code entries:
  - Similarity: 0.7679210901260376, Code:
int v16 = this.this$0.resolveProfileParent(v11);
LockPatternUtils v17 = this.mLockPatternUtils;
boolean v18 = v17.isSecure(v11);
  - Access Control Level: SYS_OR_SIG

- API Name: isDeviceLocked(II)Z in the following Class: Lcom.android.server.trust.TrustManagerService$1 with the following sink code entries:
  - Similarity: 0.7551781535148621, Code:
int v1 = ITrustManager$Stub.getCallingUid();
boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
int v3 = ITrustManager$Stub.getCallingPid();
int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceLocked", 0);
LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);
int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);
boolean v9 = this.this$0.isDeviceLockedInner(v4);
return v9;
  - Access Control Level: SYS_OR_SIG

- API Name: unlockUserKey(II[B)V in the following Class: Lcom.android.server.StorageManagerService with the following sink code entries:
  - Similarity: 0.7404006123542786, Code:
boolean v16 = this.mLockPatternUtils.isSecure(p1);
String v18 = p0.encodeBytes(p3);
this.mVold.unlockUserKey(p1, p2, v18);
[I v21 = ArrayUtils.appendInt(this.users, p1);
this.users = v21;
  - Access Control Level: SYS_OR_SIG

