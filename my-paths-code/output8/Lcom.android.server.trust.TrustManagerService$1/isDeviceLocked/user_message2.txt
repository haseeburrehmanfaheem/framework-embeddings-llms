The method isDeviceLocked in the following class Lcom.android.server.trust.TrustManagerService$1 has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isDeviceLocked(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	if (v3 == 0) {
		VirtualDeviceManagerInternal v4 = this.mVirtualDeviceManager;
		if (v4 != 0) {
			Object v6 = this.sLocalServiceObjects.get(VirtualDeviceManagerInterna.class);
			Object v5 = v6;
			this.mVirtualDeviceManager = v5;
			VirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;
			if (v8 != 0) {
				if (p2 == -1) {
					if (p2 == 0) {
						VirtualDeviceManagerInternal v9 = this.mVirtualDeviceManager;
						boolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);
						if (v10 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								int v11 = ITrustManager$Stub.getCallingPid();
								int v12 = ActivityManager.handleIncomingUser(v11, v1, p1, 0, 1, "isDeviceLocked", 0);
								long v13 = Binder.clearCallingIdentity();
								LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
								boolean v15 = v14.isSeparateProfileChallengeEnabled(v12);
								if (v15 != 0) {
									long v18 = Binder.clearCallingIdentity();
									UserInfo v19 = this.mUserManager.getProfileParent(v12);
									if (v19 == 0) {
										UserHandle v20 = v19.getUserHandle();
										int v21 = v20.getIdentifier();
										Binder.restoreCallingIdentity(v18);
										int v17 = v21;
										int v16 = v17;
										boolean v23 = this.this$0.isDeviceLockedInner(v12);
										Binder.restoreCallingIdentity(v13);
										return v23;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isDeviceLocked(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	if (v3 == 0) {
		VirtualDeviceManagerInternal v4 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
		if (v4 != 0) {
			Object v5 = LocalServices.getService(VirtualDeviceManagerInterna.class);
			TrustManagerService.-$$Nest$fputmVirtualDeviceManager(this.this$0, v5);
			VirtualDeviceManagerInternal v7 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
			if (v7 != 0) {
				if (p2 == -1) {
					if (p2 == 0) {
						VirtualDeviceManagerInternal v8 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
						boolean v9 = v8.isDisplayOwnedByAnyVirtualDevice(p2);
						if (v9 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								int v10 = ITrustManager$Stub.getCallingPid();
								int v11 = ActivityManager.handleIncomingUser(v10, v1, p1, 0, 1, "isDeviceLocked", 0);
								long v12 = Binder.clearCallingIdentity();
								LockPatternUtils v13 = this.mLockPatternUtils;
								boolean v14 = v13.isSeparateProfileChallengeEnabled(v11);
								if (v14 != 0) {
									int v16 = this.this$0.resolveProfileParent(v11);
									int v15 = v16;
									boolean v18 = this.mDeviceLockedForUser.get(v11, 1);
									boolean v17 = v18;
									Binder.restoreCallingIdentity(v12);
									return v17;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isDeviceLocked(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
	if (v2 == 0) {
		int v3 = ITrustManager$Stub.getCallingPid();
		int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceLocked", 0);
		long v5 = Binder.clearCallingIdentity();
		LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
		boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);
		if (v7 != 0) {
			int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);
			boolean v9 = this.this$0.isDeviceLockedInner(v4);
			Binder.restoreCallingIdentity(v5);
			return v9;
		}
	}
}

and the following sink code:
['int v1 = ITrustManager$Stub.getCallingUid();\nboolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);\nint v3 = ITrustManager$Stub.getCallingPid();\nint v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceLocked", 0);\nLockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);\nboolean v7 = v6.isSeparateProfileChallengeEnabled(v4);\nint v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);\nboolean v9 = this.this$0.isDeviceLockedInner(v4);\nreturn v9;']

The method isDeviceLocked has the following similar APIs:

- API Name: isDeviceSecure(II)Z in the following Class: Lcom.android.server.trust.TrustManagerService$1 with the following sink code entries:
  - Similarity: 0.9468265175819397, Code:
int v1 = ITrustManager$Stub.getCallingUid();
boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
int v3 = ITrustManager$Stub.getCallingPid();
int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceSecure", 0);
LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);
  - Access Control Level: SYS_OR_SIG

- API Name: sendAppPrivateCommand(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;I)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.805141031742096, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v5 = ActivityManager.handleIncomingUser(v2, v1, p4, 0, 0, "sendAppPrivateCommand", 0);
TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p1, v1, v3);
ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
v8.appPrivateCommand(p2, p3);
  - Similarity: 0.7888453006744385, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v4 = this.this$0.resolveCallingUserId(v2, v1, p4, "sendAppPrivateCommand");
ITvInputSession v8 = this.this$0.getSessionLocked(p1, v1, v3);
v7.appPrivateCommand(p2, p3);
  - Similarity: 0.7807941436767578, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, "sendAppPrivateCommand");
ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3);
v6.appPrivateCommand(p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: notifySignalStrength(Landroid/os/IBinder;II)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7939820289611816, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v5 = ActivityManager.handleIncomingUser(v2, v1, p3, 0, 0, "notifySignalStrength", 0);
TvInteractiveAppManagerService$SessionState v10 = TvInteractiveAppManagerService.getOrCreateUserStateLocked(v3);
ITvInteractiveAppSession v14 = TvInteractiveAppManagerService$SessionState.-$$Nest$fgetmSession(v8);
v12.notifySignalStrength(p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getAvailableExtensionInterfaceNames(Ljava/lang/String;I)Ljava/util/List; in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7859152555465698, Code:
int v2 = Binder.getCallingUid();
int v3 = Binder.getCallingPid();
int v6 = ActivityManager.handleIncomingUser(v3, v2, p2, 0, 0, "getAvailableExtensionInterfaceNames", 0);
TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(v4);
Map v15 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);
Object v16 = v15.get(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: setTeletextAppEnabled(Landroid/os/IBinder;ZI)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7755174040794373, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v5 = ActivityManager.handleIncomingUser(v2, v1, p3, 0, 0, "setTeletextAppEnabled", 0);
TvInteractiveAppManagerService$SessionState v11 = TvInteractiveAppManagerService.getSessionStateLocked(p1, v1, v10);
ITvInteractiveAppSession v14 = TvInteractiveAppManagerService$SessionState.-$$Nest$fgetmSession(v8);
v12.setTeletextAppEnabled(p2);
  - Access Control Level: SYS_OR_SIG

