The method takePersistableUriPermission in the following class Lcom.android.server.uri.UriGrantsManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void takePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v4 = new GrantUri(p4,p1,0);
	GrantUri v7 = new GrantUri(p4,p1,128);
	if (v6 == 0) {
		if ((UriPermission.persistableModeFlags & p2) != p2) {
			if (v9 == 0) {
				if ((UriPermission.persistableModeFlags & p2) != p2) {
					if (1 != 0) {
						if (1 == 0) {
							if (1 == 0) {
								if (((p2 & 3) & this.persistableModeFlags) == (p2 & 3)) {
									this.persistedModeFlags = (((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags);
									if ((((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags) == 0) {
										long v11 = System.currentTimeMillis();
										this.persistedCreateTime = v11;
										this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
										if (v13 == 0) {
											if (this.modeFlags == this.modeFlags) {
												String v21 = Integer.toHexString(this.modeFlags);
												String v24 = Integer.toHexString(this.modeFlags);
												int v27 = Binder.getCallingUid();
												int v30 = Binder.getCallingPid();
												if (this.persistedModeFlags == this.persistedModeFlags) {
													boolean v10 = 0;
													if (1 == 0) {
														if (((p2 & 3) & this.persistableModeFlags) == (p2 & 3)) {
															this.persistedModeFlags = (((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags);
															if ((((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags) == 0) {
																long v37 = System.currentTimeMillis();
																this.persistedCreateTime = v37;
																this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
																if (v39 == 0) {
																	if (this.modeFlags == this.modeFlags) {
																		String v47 = Integer.toHexString(this.modeFlags);
																		String v50 = Integer.toHexString(this.modeFlags);
																		int v53 = Binder.getCallingUid();
																		int v56 = Binder.getCallingPid();
																		if (this.persistedModeFlags == this.persistedModeFlags) {
																			boolean v36 = 0;
																			Object v63 = this.mGrantedUriPermissions.get(v2);
																			if (v63 != 0) {
																				int v64 = v63.size();
																				if (v64 >= 512) {
																					ArrayList v66 = new ArrayList();
																					ArrayList v65 = v66;
																					Collection v68 = v63.values();
																					Iterator v69 = v68.iterator();
																					boolean v70 = v69.hasNext();
																					if (v70 == 0) {
																						Object v71 = v69.next();
																						if (UriPermission.persistedModeFlags == 0) {
																							boolean v72 = v65.add(v71);
																							boolean v73 = v69.hasNext();
																							if (v73 == 0) {
																								int v74 = v65.size();
																								if ((v74 - 512) > 0) {
																									UriPermission$PersistedTimeComparator v75 = new UriPermission$PersistedTimeComparator();
																									Collections.sort(v65, v75);
																									if (0 >= (v74 - 512)) {
																										Object v78 = v65.get(0);
																										this.persistedModeFlags = ((~(-1 & 3)) & this.persistedModeFlags);
																										if (((~(-1 & 3)) & this.persistedModeFlags) != 0) {
																											this.persistedCreateTime = 0;
																											UriPermission.updateModeFlags();
																											if (this.persistedModeFlags == this.persistedModeFlags) {
																												boolean v79 = 1;
																												if ((0 + 1) >= (v74 - 512)) {
																													boolean v62 = 1;
																													if ((v62 | 0) == 0) {
																														p0.schedulePersistUriGrants();
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void takePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v4 = new GrantUri(p4,p1,0);
	GrantUri v7 = new GrantUri(p4,p1,128);
	if (v6 == 0) {
		if ((UriPermission.persistableModeFlags & p2) != p2) {
			if (v9 == 0) {
				if ((UriPermission.persistableModeFlags & p2) != p2) {
					if (1 != 0) {
						if (1 == 0) {
							if (1 == 0) {
								if (((p2 & 3) & this.persistableModeFlags) == (p2 & 3)) {
									this.persistedModeFlags = (((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags);
									if ((((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags) == 0) {
										long v11 = System.currentTimeMillis();
										this.persistedCreateTime = v11;
										UriPermission.updateModeFlags();
										if (this.persistedModeFlags == this.persistedModeFlags) {
											boolean v10 = 0;
											if (1 == 0) {
												if (((p2 & 3) & this.persistableModeFlags) == (p2 & 3)) {
													this.persistedModeFlags = (((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags);
													if ((((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags) == 0) {
														long v14 = System.currentTimeMillis();
														this.persistedCreateTime = v14;
														UriPermission.updateModeFlags();
														if (this.persistedModeFlags == this.persistedModeFlags) {
															boolean v13 = 0;
															Object v17 = this.mGrantedUriPermissions.get(v2);
															if (v17 != 0) {
																int v18 = v17.size();
																if (v18 >= 512) {
																	ArrayList v19 = Lists.newArrayList();
																	Collection v20 = v17.values();
																	Iterator v21 = v20.iterator();
																	boolean v22 = v21.hasNext();
																	if (v22 == 0) {
																		Object v23 = v21.next();
																		if (UriPermission.persistedModeFlags == 0) {
																			boolean v24 = v19.add(v23);
																			boolean v25 = v21.hasNext();
																			if (v25 == 0) {
																				int v26 = v19.size();
																				if ((v26 - 512) > 0) {
																					UriPermission$PersistedTimeComparator v27 = new UriPermission$PersistedTimeComparator();
																					Collections.sort(v19, v27);
																					if (0 >= (v26 - 512)) {
																						Object v30 = v19.get(0);
																						boolean v31 = v30.releasePersistableModes(-1);
																						if ((0 + 1) >= (v26 - 512)) {
																							boolean v16 = 1;
																							if ((v16 | 0) == 0) {
																								boolean v34 = this.mH.hasMessages(1);
																								if (v34 != 0) {
																									Message v35 = this.mH.obtainMessage(1);
																									boolean v36 = this.mH.sendMessageDelayed(v35, 10000);
																									return;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void takePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v4 = new GrantUri(p4,p1,0);
	GrantUri v7 = new GrantUri(p4,p1,128);
	if (v6 == 0) {
		if ((UriPermission.persistableModeFlags & p2) != p2) {
			if (v9 == 0) {
				if ((UriPermission.persistableModeFlags & p2) != p2) {
					if (1 != 0) {
						if (1 == 0) {
							if (1 == 0) {
								boolean v10 = v6.takePersistableModes(p2);
								if (1 == 0) {
									boolean v11 = v9.takePersistableModes(p2);
									boolean v12 = p0.maybePrunePersistedUriGrantsLocked(v2);
									if ((v12 | 0) == 0) {
										p0.schedulePersistUriGrants();
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);\nGrantUri v4 = new GrantUri(p4,p1,0);\nGrantUri v7 = new GrantUri(p4,p1,128);', 'this.persistedModeFlags = (((p2 & 3) & this.persistableModeFlags) | this.persistedModeFlags);\nlong v11 = System.currentTimeMillis();\nthis.persistedCreateTime = v11;', 'Object v63 = this.mGrantedUriPermissions.get(v2);\nint v64 = v63.size();']

The method takePersistableUriPermission has the following similar APIs:

- API Name: releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V in the following Class: Lcom.android.server.uri.UriGrantsManagerService with the following sink code entries:
  - Similarity: 0.9762018322944641, Code:
int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
int v3 = Preconditions.checkFlagsArgument(p2, 3);
GrantUri v4 = new GrantUri(p4,p1,0);
GrantUri v7 = new GrantUri(p4,p1,128);
  - Similarity: 0.9297243356704712, Code:
this.persistedModeFlags = ((~(p2 & 3)) & this.persistedModeFlags);
this.persistedCreateTime = 0;
this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
  - Access Control Level: SYS_OR_SIG

- API Name: getUriPermissions(Ljava/lang/String;ZZ)Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.uri.UriGrantsManagerService with the following sink code entries:
  - Similarity: 0.81113600730896, Code:
ArrayList v7 = Lists.newArrayList();
Object v8 = this.mGrantedUriPermissions.get(v3);
UriPermission v12 = v10.buildPersistedPublicApiObject();
boolean v13 = v7.add(v12);
ParceledListSlice v15 = new ParceledListSlice(v7);
return v15;
  - Similarity: 0.791540265083313, Code:
ArrayList v7 = Lists.newArrayList();
int v8 = this.mGrantedUriPermissions.size();
Object v9 = this.mGrantedUriPermissions.valueAt(0);
UriPermission v13 = v11.buildPersistedPublicApiObject();
boolean v14 = v7.add(v13);
ParceledListSlice v16 = new ParceledListSlice(v7);
return v16;
  - Similarity: 0.7822122573852539, Code:
ArrayList v8 = new ArrayList();
Object v10 = this.mGrantedUriPermissions.get(v3);
UriPermission v15 = new UriPermission(GrantUri.uri,this.persistedModeFlags,this.persistedCreateTime);
boolean v17 = v7.add(v14);
ParceledListSlice v19 = new ParceledListSlice(v7);
return v19;
  - Access Control Level: SYS_OR_SIG

- API Name: grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.725152850151062, Code:
v12.grantUri(p3, v10);
v17.addPkg(v8);
  - Access Control Level: NONE

