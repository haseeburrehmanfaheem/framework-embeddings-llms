The method removeData in the following class Lcom.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub has the following code snippet:

This is path 1 for the API with depth 2:
public void removeData(DataRemovalRequest p1){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = this.mPackageName;
	Context v9 = this.mContext;
	PackageManager v10 = v9.getPackageManager();
	int v11 = this.mOwnerUid;
	String v12 = v10.getPackagesForUid(v11);
	if (v12 == 0) {
		if (0 >= v12.length) {
			boolean v13 = v2.equals(v12[0]);
			if (v13 == 0) {
				if ((0 + 1) >= v12.length) {
					boolean v14 = v2.equals(v12[(0 + 1)]);
					if (v14 == 0) {
						int v15 = UserHandle.getCallingUserId();
						Object v16 = ContentCaptureManagerService.access$600(this.this$0);
						AbstractPerUserSystemService v17 = ContentCaptureManagerService.access$700(this.this$0, v15);
						boolean v19 = ContentCapturePerUserService.isEnabledLocked();
						if (v19 != 0) {
							String v20 = this.mPackageName;
							if (1 != 0) {
								RemoteContentCaptureService$$ExternalSyntheticLambda2 v34 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);
								RemoteContentCaptureService.scheduleAsyncRequest(v34);
								ContentCaptureMetricsLogger.writeServiceEvent(5, AbstractMultiplePendingRequestsRemoteService.mComponentName);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeData(DataRemovalRequest p1){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = this.mPackageName;
	Context v9 = ContentCaptureManagerService.getContext();
	PackageManager v10 = v9.getPackageManager();
	int v11 = v7.getOwnerUid();
	String v12 = v10.getPackagesForUid(v11);
	if (v12 == 0) {
		if (0 >= v12.length) {
			boolean v13 = v2.equals(v12[0]);
			if (v13 == 0) {
				if ((0 + 1) >= v12.length) {
					boolean v14 = v2.equals(v12[(0 + 1)]);
					if (v14 == 0) {
						int v15 = UserHandle.getCallingUserId();
						Object v16 = AbstractMasterSystemService.mLock;
						AbstractPerUserSystemService v18 = this.this$0.getServiceForUserLocked(v15);
						AbstractPerUserSystemService v17 = v18;
						boolean v20 = ContentCapturePerUserService.isEnabledLocked();
						if (v20 != 0) {
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeData(DataRemovalRequest p1){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = p1.getPackageName();
	this.this$0.assertCalledByPackageOwner(v2);
	int v4 = UserHandle.getCallingUserId();
	Object v5 = ContentCaptureManagerService.access$600(this.this$0);
	AbstractPerUserSystemService v6 = ContentCaptureManagerService.access$700(this.this$0, v4);
	v6.removeDataLocked(p1);
	return;
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p1);\nRemoteContentCaptureService$$ExternalSyntheticLambda2 v34 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);\nRemoteContentCaptureService.scheduleAsyncRequest(v34);', 'String v2 = p1.getPackageName();\nthis.this$0.assertCalledByPackageOwner(v2);\nv6.removeDataLocked(p1);']

The method removeData has the following similar APIs:

- API Name: isContentCaptureFeatureEnabled(Lcom/android/internal/os/IResultReceiver;)V in the following Class: Lcom.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub with the following sink code entries:
  - Similarity: 0.8137650489807129, Code:
ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1 v2 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1(p0);
v2.run();
  - Access Control Level: NONE

- API Name: getServiceSettingsActivity(Lcom/android/internal/os/IResultReceiver;)V in the following Class: Lcom.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub with the following sink code entries:
  - Similarity: 0.7621786594390869, Code:
ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda2 v1 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda2(p0);
v1.run();
boolean v4 = this.this$0.throwsSecurityException(p1, v1);
  - Access Control Level: NONE

- API Name: onReceive(Landroid/content/Context;Landroid/content/Intent;)V in the following Class: Lcom.android.server.updates.EmergencyNumberDbInstallReceiver with the following sink code entries:
  - Similarity: 0.7357395887374878, Code:
WallpaperUpdateReceiver$$ExternalSyntheticLambda0 v3 = new WallpaperUpdateReceiver$$ExternalSyntheticLambda0(p0);
AsyncTask.execute(v3);
  - Access Control Level: NONE

- API Name: addVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V in the following Class: Lcom.android.server.VcnManagementService with the following sink code entries:
  - Similarity: 0.734011709690094, Code:
VcnManagementService$$ExternalSyntheticLambda2 v4 = new VcnManagementService$$ExternalSyntheticLambda2(p0,p1);
Binder.withCleanCallingIdentity(v4);
  - Access Control Level: NORMAL

- API Name: resetInteractAcrossProfilesAppOps(Ljava/util/List;)V in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.7271837592124939, Code:
CrossProfileAppsServiceImpl$$ExternalSyntheticLambda1 v1 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda1(p0);
p1.forEach(v1);
  - Access Control Level: NONE

