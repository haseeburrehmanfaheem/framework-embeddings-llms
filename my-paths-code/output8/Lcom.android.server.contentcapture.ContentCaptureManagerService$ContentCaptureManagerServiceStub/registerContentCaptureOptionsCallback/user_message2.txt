The method registerContentCaptureOptionsCallback has the following code snippet:

This is path 1 for the API with depth 2:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	Context v7 = this.mContext;
	PackageManager v8 = v7.getPackageManager();
	int v9 = this.mOwnerUid;
	String v10 = v8.getPackagesForUid(v9);
	if (v10 == 0) {
		if (0 >= v10.length) {
			boolean v11 = p1.equals(v10[0]);
			if (v11 == 0) {
				if ((0 + 1) >= v10.length) {
					boolean v12 = p1.equals(v10[(0 + 1)]);
					if (v12 == 0) {
						RemoteCallbackList v13 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);
						boolean v14 = v13.register(p2, p1);
						int v15 = UserHandle.getCallingUserId();
						if (this.mWhitelisterHelpers != 0) {
							Object v18 = this.mWhitelisterHelpers.get(v15);
							if (v18 != 0) {
								boolean v19 = v18.isWhitelisted(p1);
								boolean v17 = 0;
								if (v17 != 0) {
									if (this.mWhitelisterHelpers != 0) {
										Object v21 = this.mWhitelisterHelpers.get(v15);
										if (v21 != 0) {
											ArraySet v22 = v21.getWhitelistedComponents(p1);
											ArraySet v20 = 0;
											if (v20 != 0) {
												Object v23 = this.mServicePackages.get(v15);
												boolean v24 = p1.equals(v23);
												if (v24 == 0) {
													if (Build.IS_USER == 0) {
														ServiceNameResolver v25 = AbstractMasterSystemService.mServiceNameResolver;
														boolean v26 = v25.isTemporary(v15);
														if (v26 == 0) {
															Object v27 = this.mServicePackages.get(v15);
															boolean v28 = p1.equals(v27);
															if (v28 != 0) {
																if (v17 != 0) {
																	if (v20 != 0) {
																		ContentCaptureOptions v29 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,v20);
																		if (AbstractMasterSystemService.verbose == 0) {
																			String v31 = this.TAG;
																			ContentCaptureOptions v16 = v29;
																			if (v16 == 0) {
																				p2.setContentCaptureOptions(v16);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	Context v7 = ContentCaptureManagerService.getContext();
	PackageManager v8 = v7.getPackageManager();
	int v9 = v5.getOwnerUid();
	String v10 = v8.getPackagesForUid(v9);
	if (v10 == 0) {
		if (0 >= v10.length) {
			boolean v11 = p1.equals(v10[0]);
			if (v11 == 0) {
				if ((0 + 1) >= v10.length) {
					boolean v12 = p1.equals(v10[(0 + 1)]);
					if (v12 == 0) {
						RemoteCallbackList v13 = this.mCallbacks;
						boolean v14 = v13.register(p2, p1);
						int v15 = UserHandle.getCallingUserId();
						boolean v17 = ContentCaptureManagerService$GlobalContentCaptureOptions.isWhitelisted(v15, p1);
						if (v17 != 0) {
							ArraySet v18 = ContentCaptureManagerService$GlobalContentCaptureOptions.getWhitelistedComponents(v15, p1);
							if (v18 != 0) {
								Object v19 = this.mServicePackages.get(v15);
								boolean v20 = p1.equals(v19);
								if (v20 == 0) {
									if (Build.IS_USER == 0) {
										ServiceNameResolver v21 = ContentCaptureManagerService.access$2300(this.this$0);
										boolean v22 = v21.isTemporary(v15);
										if (v22 == 0) {
											Object v23 = this.mServicePackages.get(v15);
											boolean v24 = p1.equals(v23);
											if (v24 != 0) {
												if (v17 != 0) {
													if (v18 != 0) {
														ContentCaptureOptions v25 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,v18);
														if (AbstractMasterSystemService.verbose == 0) {
															ContentCaptureOptions v16 = v25;
															if (v16 == 0) {
																p2.setContentCaptureOptions(v16);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	this.this$0.assertCalledByPackageOwner(p1);
	RemoteCallbackList v2 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);
	boolean v3 = v2.register(p2, p1);
	int v4 = UserHandle.getCallingUserId();
	ContentCaptureOptions v5 = ContentCaptureManagerService.mGlobalContentCaptureOptions.getOptions(v4, p1);
	if (v5 == 0) {
		p2.setContentCaptureOptions(v5);
		return;
	}
}

and the following sink code:
['RemoteCallbackList v13 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);\nboolean v14 = v13.register(p2, p1);\nContentCaptureOptions v29 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,v20);\np2.setContentCaptureOptions(v16);', 'RemoteCallbackList v2 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);\nboolean v3 = v2.register(p2, p1);\nContentCaptureOptions v5 = ContentCaptureManagerService.mGlobalContentCaptureOptions.getOptions(v4, p1);\np2.setContentCaptureOptions(v5);']

The method registerContentCaptureOptionsCallback has the following similar APIs:

- API Name: addOnAssociationsChangedListener(Landroid/companion/IOnAssociationsChangedListener;I)V with Similarity Score: 0.8406029343605042
  - Access Control Level: SYS_OR_SIG and the following code:
RemoteCallbackList v9 = CompanionDeviceManagerService.-$$Nest$fgetmListeners(this.this$0);
Integer v10 = Integer.valueOf(p2);
boolean v11 = v9.register(p1, v10);

- API Name: unregisterCallback(Landroid/media/tv/interactive/ITvInteractiveAppManagerCallback;I)V with Similarity Score: 0.8330461978912354
  - Access Control Level: NONE and the following code:
RemoteCallbackList v14 = TvInteractiveAppManagerService$UserState.-$$Nest$fgetmCallbacks(v8);
boolean v15 = v14.unregister(p1);

