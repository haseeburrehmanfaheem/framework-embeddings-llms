The method shareData has the following code snippet:

This is path 1 for the API with depth 2:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = this.mPackageName;
	Context v10 = this.mContext;
	PackageManager v11 = v10.getPackageManager();
	int v12 = this.mOwnerUid;
	String v13 = v11.getPackagesForUid(v12);
	if (v13 == 0) {
		if (0 >= v13.length) {
			boolean v14 = v3.equals(v13[0]);
			if (v14 == 0) {
				if ((0 + 1) >= v13.length) {
					boolean v15 = v3.equals(v13[(0 + 1)]);
					if (v15 == 0) {
						int v16 = UserHandle.getCallingUserId();
						Object v17 = ContentCaptureManagerService.access$800(this.this$0);
						AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$900(this.this$0, v16);
						Set v19 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
						int v20 = v19.size();
						if (v20 >= 10) {
							Set v21 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
							String v22 = p1.getPackageName();
							boolean v23 = v21.contains(v22);
							if (v23 == 0) {
								ContentCaptureManagerService$DataShareCallbackDelegate v24 = new ContentCaptureManagerService$DataShareCallbackDelegate(p1,p2,this.this$0);
								boolean v27 = ContentCapturePerUserService.isEnabledLocked();
								if (v27 != 0) {
									String v28 = this.mPackageName;
									if (1 != 0) {
										RemoteContentCaptureService$$ExternalSyntheticLambda4 v42 = new RemoteContentCaptureService$$ExternalSyntheticLambda4(p1,v24);
										RemoteContentCaptureService.scheduleAsyncRequest(v42);
										ContentCaptureMetricsLogger.writeServiceEvent(6, AbstractMultiplePendingRequestsRemoteService.mComponentName);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = this.mPackageName;
	Context v10 = ContentCaptureManagerService.getContext();
	PackageManager v11 = v10.getPackageManager();
	int v12 = v8.getOwnerUid();
	String v13 = v11.getPackagesForUid(v12);
	if (v13 == 0) {
		if (0 >= v13.length) {
			boolean v14 = v3.equals(v13[0]);
			if (v14 == 0) {
				if ((0 + 1) >= v13.length) {
					boolean v15 = v3.equals(v13[(0 + 1)]);
					if (v15 == 0) {
						int v16 = UserHandle.getCallingUserId();
						Object v17 = AbstractMasterSystemService.mLock;
						AbstractPerUserSystemService v19 = this.this$0.getServiceForUserLocked(v16);
						AbstractPerUserSystemService v18 = v19;
						Set v20 = this.mPackagesWithShareRequests;
						int v21 = v20.size();
						if (v21 >= 10) {
							Set v22 = this.mPackagesWithShareRequests;
							String v23 = this.mPackageName;
							boolean v24 = v22.contains(v23);
							if (v24 == 0) {
								ServiceNameResolver v25 = AbstractMasterSystemService.mServiceNameResolver;
								String v26 = v25.getServiceName(v16);
								FrameworkStatsLog.write(207, 14, v26, 0, 0, 0);
								p2.error(2);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = p1.getPackageName();
	this.this$0.assertCalledByPackageOwner(v3);
	int v5 = UserHandle.getCallingUserId();
	Object v6 = ContentCaptureManagerService.access$800(this.this$0);
	AbstractPerUserSystemService v7 = ContentCaptureManagerService.access$900(this.this$0, v5);
	Set v8 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
	int v9 = v8.size();
	if (v9 >= 10) {
		Set v10 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
		String v11 = p1.getPackageName();
		boolean v12 = v10.contains(v11);
		if (v12 == 0) {
			ServiceNameResolver v13 = ContentCaptureManagerService.access$1000(this.this$0);
			String v14 = v13.getServiceName(v5);
			ContentCaptureMetricsLogger.writeServiceEvent(14, v14);
			p2.error(2);
			return;
		}
	}
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p1);\nObject v2 = Objects.requireNonNull(p2);\nContentCaptureManagerService$DataShareCallbackDelegate v24 = new ContentCaptureManagerService$DataShareCallbackDelegate(p1,p2,this.this$0);', 'String v3 = this.mPackageName;\nContext v10 = this.mContext;\nPackageManager v11 = v10.getPackageManager();\nint v12 = this.mOwnerUid;', 'UserHandle.getCallingUserId();\nAbstractPerUserSystemService v18 = ContentCaptureManagerService.access$900(this.this$0, v16);']

The method shareData has the following similar APIs:

- API Name: getServiceSettingsActivity(Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.8526557683944702
  - Access Control Level: NONE and the following code:
int v4 = UserHandle.getCallingUserId();
AbstractPerUserSystemService v6 = ContentCaptureManagerService.access$1300(this.this$0, v4);
ComponentName v7 = v6.getServiceSettingsActivityLocked();
Bundle v8 = SyncResultReceiver.bundleFor(v7);
p1.send(0, v8);

- API Name: finishSession(I)V with Similarity Score: 0.816338062286377
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v5 = ContentCaptureManagerService.access$300(this.this$0, v3);
v5.finishSessionLocked(p1);

