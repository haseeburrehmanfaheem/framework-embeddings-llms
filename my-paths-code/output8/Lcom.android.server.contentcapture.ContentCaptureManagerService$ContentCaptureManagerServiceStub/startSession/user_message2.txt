The method startSession has the following code snippet:

This is path 1 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	if (this.mAm != 0) {
		Object v8 = LocalServices.getService(ActivityManagerInterna.class);
		this.mAm = v8;
		ActivityManagerInternal v7 = this.mAm;
		ActivityManagerInternal v6 = v7;
		ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);
		Object v10 = ContentCaptureManagerService.access$000(this.this$0);
		AbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);
		String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(v5);
		if (v14 != 0) {
			String v15 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(v5);
			boolean v16 = v14.equals(v15);
			boolean v13 = v16;
			boolean v12 = v13;
			if (v12 != 0) {
				boolean v18 = 1;
				boolean v17 = v18;
				if (v17 != 0) {
					int v28 = Binder.getCallingUid();
					if (v9 != 0) {
						if (this.mWhitelisterHelpers != 0) {
							Object v31 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
							if (v31 != 0) {
								boolean v32 = v31.isWhitelisted(ActivityPresentationInfo.componentName);
								boolean v30 = 0;
								if (v30 != 0) {
									String v33 = ActivityPresentationInfo.componentName.getPackageName();
									if (this.mWhitelisterHelpers != 0) {
										Object v35 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
										if (v35 != 0) {
											boolean v36 = v35.isWhitelisted(v33);
											boolean v34 = 0;
											if (v34 == 0) {
												if (this.mServiceInfo != 0) {
													ComponentName v38 = this.mServiceInfo.getComponentName();
													ComponentName v37 = 0;
													boolean v39 = ContentCapturePerUserService.isEnabledLocked();
													if (ContentCaptureManagerService.mRequestsHistory == 0) {
														if (v39 != 0) {
															if (v37 != 0) {
																if (0 != 0) {
																	Object v40 = this.mSessions.get(p4);
																	if (v40 == 0) {
																		if (this.mRemoteService != 0) {
																			if (this.mRemoteService != 0) {
																				RemoteContentCaptureService.scheduleBind();
																				ContentCaptureServerSession v43 = new ContentCaptureServerSession(AbstractPerUserSystemService.mLock,p1,v44,ContentCapturePerUserService,ActivityPresentationInfo.componentName,p6,ActivityPresentationInfo.taskId,ActivityPresentationInfo.displayId,p4,v28,p5);
																				ActivityId v44 = new ActivityId(ActivityPresentationInfo.taskId,p2);
																				if (AbstractMasterSystemService.verbose == 0) {
																					this.mSessions.put(p4, v43);
																					if (ContentCapturePerUserService.mRemoteService != 0) {
																						ContentCapturePerUserService.mRemoteService.onSessionStarted(this.mContentCaptureContext, this.mId, this.mUid, p6, 2);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	ActivityManagerInternal v7 = this.this$0.getAmInternal();
	ActivityManagerInternal v6 = v7;
	ActivityPresentationInfo v8 = v6.getActivityPresentationInfo(p1);
	Object v9 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v11 = this.this$0.getServiceForUserLocked(v5);
	AbstractPerUserSystemService v10 = v11;
	boolean v13 = this.this$0.isDefaultServiceLocked(v5);
	boolean v12 = v13;
	if (v12 != 0) {
		boolean v15 = this.this$0.isCalledByServiceLocked("startSession()");
		boolean v14 = v15;
		if (v14 != 0) {
			int v16 = Binder.getCallingUid();
			if (v8 != 0) {
				boolean v18 = ContentCaptureManagerService.mGlobalContentCaptureOptions.isWhitelisted(AbstractPerUserSystemService.mUserId, ActivityPresentationInfo.componentName);
				if (v18 != 0) {
					String v19 = ActivityPresentationInfo.componentName.getPackageName();
					boolean v20 = ContentCaptureManagerService.mGlobalContentCaptureOptions.isWhitelisted(AbstractPerUserSystemService.mUserId, v19);
					if (v20 == 0) {
						ComponentName v21 = ContentCapturePerUserService.getServiceComponentName();
						boolean v22 = ContentCapturePerUserService.isEnabledLocked();
						if (ContentCaptureManagerService.mRequestsHistory == 0) {
							if (v22 != 0) {
								if (v21 != 0) {
									if (0 != 0) {
										Object v23 = this.mSessions.get(p4);
										if (v23 == 0) {
											if (this.mRemoteService != 0) {
												if (this.mRemoteService != 0) {
													this.mRemoteService.ensureBoundLocked();
													ContentCaptureServerSession v25 = new ContentCaptureServerSession(AbstractPerUserSystemService.mLock,p1,v26,ContentCapturePerUserService,ActivityPresentationInfo.componentName,p6,ActivityPresentationInfo.taskId,ActivityPresentationInfo.displayId,p4,v16,p5);
													ActivityId v26 = new ActivityId(ActivityPresentationInfo.taskId,p2);
													if (AbstractMasterSystemService.verbose == 0) {
														this.mSessions.put(p4, v25);
														v25.notifySessionStartedLocked(p6);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	ActivityManagerInternal v6 = ContentCaptureManagerService.-$$Nest$mgetAmInternal(this.this$0);
	ActivityPresentationInfo v7 = v6.getActivityPresentationInfo(p1);
	Object v8 = ContentCaptureManagerService.access$000(this.this$0);
	AbstractPerUserSystemService v9 = ContentCaptureManagerService.access$100(this.this$0, v5);
	boolean v10 = ContentCaptureManagerService.-$$Nest$misDefaultServiceLocked(this.this$0, v5);
	if (v10 != 0) {
		boolean v11 = ContentCaptureManagerService.-$$Nest$misCalledByServiceLocked(this.this$0, "startSession()");
		if (v11 != 0) {
			int v12 = Binder.getCallingUid();
			v9.startSessionLocked(p1, p2, v7, p4, v12, p5, p6);
			return;
		}
	}
}

and the following sink code:
['ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);\nint v28 = Binder.getCallingUid();\nContentCaptureServerSession v43 = new ContentCaptureServerSession(AbstractPerUserSystemService.mLock,p1,v44,ContentCapturePerUserService,ActivityPresentationInfo.componentName,p6,ActivityPresentationInfo.taskId,ActivityPresentationInfo.displayId,p4,v28,p5);\nthis.mSessions.put(p4, v43);', 'Object v8 = LocalServices.getService(ActivityManagerInternal.class);\nActivityManagerInternal v7 = this.mAm;\nActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);\nAbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);', 'v9.startSessionLocked(p1, p2, v7, p4, v12, p5, p6);']

The method startSession has the following similar APIs:

- API Name: startOneTimePermissionSession(Ljava/lang/String;IJJII)V with Similarity Score: 0.8518499732017517
  - Access Control Level: SYS_OR_SIG and the following code:
v4.startPackageOneTimeSession(p1, p3, p4, p5, p6);

- API Name: createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J with Similarity Score: 0.8259117603302002
  - Access Control Level: SYS_OR_SIG and the following code:
long v19 = this.this$0.createSessionInternal(p1, v13, p2);
return v18;

