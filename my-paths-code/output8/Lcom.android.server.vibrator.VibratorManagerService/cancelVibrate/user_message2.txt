The method cancelVibrate has the following code snippet:

This is path 1 for the API with depth 2:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mVibration;
		if (Vibration.token != p2) {
			int v9 = Vibration.attrs.getUsage();
			if (v9 != 0) {
				int v10 = Vibration.attrs.getUsage();
				int v11 = Vibration.attrs.getUsage();
				if ((v10 & p1) != v11) {
					boolean v8 = 1;
					if (v8 == 0) {
						boolean v7 = 1;
						if (v7 == 0) {
							if (this.mNextVibration == 0) {
								Vibration v13 = this.mVibration;
								v13.end(v3);
								VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
								this.mVibratorManagerRecords.record(v13);
								if (1 == 0) {
									long v18 = SystemClock.uptimeMillis();
									VibrationStats$StatsInfo v19 = v13.getStatsInfo(v18);
									this.mFrameworkStatsLogger.writeVibrationReportedAsync(v19);
									this.mNextVibration = 0;
									if (this.mCurrentVibration == 0) {
										Vibration v21 = this.mCurrentVibration.getVibration();
										if (Vibration.token != p2) {
											int v24 = Vibration.attrs.getUsage();
											if (v24 != 0) {
												int v25 = Vibration.attrs.getUsage();
												int v26 = Vibration.attrs.getUsage();
												if ((v25 & p1) != v26) {
													boolean v23 = 1;
													if (v23 == 0) {
														boolean v22 = 1;
														if (v22 == 0) {
															if (Build.IS_DEBUGGABLE == 0) {
																Thread v29 = Thread.currentThread();
																if (v29 instanceof VibrationThread == 0) {
																	if (v3 == 0) {
																		String v36 = Vibration$EndInfo.status.name();
																		boolean v37 = v36.startsWith("CANCEL");
																		if (v37 != 0) {
																			if (0 == 0) {
																				if (this.mSignalCancelImmediate != 0) {
																					if (this.mSignalCancel == 0) {
																						this.mSignalCancelImmediate = (0 | this.mSignalCancelImmediate);
																						if (this.mSignalCancel != 0) {
																							this.mSignalCancel = v3;
																							this.mLock.notify();
																							if (this.mCurrentExternalVibration == 0) {
																								VibrationAttributes$Builder v40 = new VibrationAttributes$Builder(this.mAttrs);
																								VibrationAttributes v43 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
																								VibrationAttributes v42 = v43;
																								VibrationAttributes v39 = v42;
																								int v46 = this.mUsage;
																								if (v46 != 0) {
																									int v47 = this.mUsage;
																									int v48 = this.mUsage;
																									if ((v47 & p1) != v48) {
																										boolean v45 = 1;
																										if (v45 == 0) {
																											boolean v51 = this.mController.mute();
																											boolean v50 = 0;
																											Trace.traceBegin(8388608, "endExternalVibrateLocked");
																											if (this.mCurrentExternalVibration != 0) {
																												this.externalVibration.unlinkToDeath(VibratorManagerService$ExternalVibrationHolder);
																												if (0 != 0) {
																													int v63 = this.mVibrators.size();
																													if (0 >= v63) {
																														Object v64 = this.mVibrators.valueAt(0);
																														v64.setExternalControl(0);
																														VibratorManagerService$ExternalVibrationHolder.stats.reportSetExternalControl();
																														int v67 = this.mVibrators.size();
																														if ((0 + 1) >= v67) {
																															this.mCurrentExternalVibration.end(v3);
																															int v70 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getUid();
																															VibrationAttributes v71 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
																															VibratorManagerService.logVibrationStatus(v70, v71, Vibration$EndInfo.status);
																															this.mVibratorManagerRecords.record(this.mCurrentExternalVibration);
																															long v74 = SystemClock.uptimeMillis();
																															VibrationStats$StatsInfo v75 = this.mCurrentExternalVibration.getStatsInfo(v74);
																															this.mFrameworkStatsLogger.writeVibrationReportedAsync(v75);
																															this.mCurrentExternalVibration = 0;
																															Trace.traceEnd(8388608);
																															Binder.restoreCallingIdentity(v5);
																															Trace.traceEnd(8388608);
																															return;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mVibration;
		if (Vibration.token != p2) {
			boolean v8 = VibratorManagerService.shouldCancelVibration(Vibration.attrs, p1);
			if (v8 == 0) {
				boolean v7 = 1;
				if (v7 == 0) {
					if (this.mNextVibration == 0) {
						Vibration v10 = this.mNextVibration.getVibration();
						VibratorManagerService.endVibrationLocked(v10, v3, 1);
						this.mNextVibration = 0;
						if (this.mCurrentVibration == 0) {
							Vibration v12 = this.mVibration;
							if (Vibration.token != p2) {
								boolean v14 = VibratorManagerService.shouldCancelVibration(Vibration.attrs, p1);
								if (v14 == 0) {
									boolean v13 = 1;
									if (v13 == 0) {
										if (Build.IS_DEBUGGABLE == 0) {
											VibrationStepConductor.expectIsVibrationThread(0);
											if (v3 == 0) {
												String v17 = Vibration$EndInfo.status.name();
												boolean v18 = v17.startsWith("CANCEL");
												if (v18 != 0) {
													if (0 == 0) {
														if (this.mSignalCancelImmediate != 0) {
															if (this.mSignalCancel == 0) {
																this.mSignalCancelImmediate = (0 | this.mSignalCancelImmediate);
																if (this.mSignalCancel != 0) {
																	this.mSignalCancel = v3;
																	this.mLock.notify();
																	if (this.mCurrentExternalVibration == 0) {
																		VibrationAttributes$Builder v21 = new VibrationAttributes$Builder(this.mAttrs);
																		VibrationAttributes v23 = v21.build();
																		VibrationAttributes v20 = v23;
																		int v25 = v20.getUsage();
																		if (v25 != 0) {
																			int v26 = v20.getUsage();
																			int v27 = v20.getUsage();
																			if ((v26 & p1) != v27) {
																				boolean v24 = 1;
																				if (v24 == 0) {
																					boolean v29 = this.externalVibration.mute();
																					Trace.traceBegin(8388608, "endExternalVibrateLocked");
																					if (this.mCurrentExternalVibration != 0) {
																						Trace.traceEnd(8388608);
																						Binder.restoreCallingIdentity(v5);
																						Trace.traceEnd(8388608);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mNextVibration.getVibration();
		boolean v7 = p0.shouldCancelVibration(v6, p1, p2);
		if (v7 == 0) {
			p0.clearNextVibrationLocked(v3);
			if (this.mCurrentVibration == 0) {
				Vibration v9 = this.mCurrentVibration.getVibration();
				boolean v10 = p0.shouldCancelVibration(v9, p1, p2);
				if (v10 == 0) {
					this.mCurrentVibration.notifyCancelled(v3, 0);
					if (this.mCurrentExternalVibration == 0) {
						VibrationAttributes v12 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
						boolean v13 = p0.shouldCancelVibration(v12, p1);
						if (v13 == 0) {
							this.mCurrentExternalVibration.mute();
							p0.endExternalVibrateLocked(v3, 0);
							Binder.restoreCallingIdentity(v5);
							Trace.traceEnd(8388608);
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);\nif (this.mNextVibration == 0) {\nVibration v6 = this.mVibration;\nv13.end(v3);\nVibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);\nthis.mVibratorManagerRecords.record(v13);', 'boolean v8 = VibratorManagerService.shouldCancelVibration(Vibration.attrs, p1);\nif (v8 == 0) {\nVibration v10 = this.mNextVibration.getVibration();\nVibratorManagerService.endVibrationLocked(v10, v3, 1);', 'p0.clearNextVibrationLocked(v3);\nthis.mCurrentVibration.notifyCancelled(v3, 0);\np0.endExternalVibrateLocked(v3, 0);']

The method cancelVibrate has the following similar APIs:

- API Name: vibrate(IILjava/lang/String;Landroid/os/CombinedVibration;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)V with Similarity Score: 0.7533732056617737
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v10 = VibratorManagerService.isEffectValid(p4);
VibrationAttributes v11 = VibratorManagerService.fixupVibrationAttributes(p5, p4);
Vibration v12 = new Vibration(p7,v13,p4,v11,p1,p2,p3,p6);

- API Name: vibrate(IILjava/lang/String;Landroid/os/CombinedVibration;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)V with Similarity Score: 0.7420940399169922
  - Access Control Level: SYS_OR_SIG and the following code:
Vibration v1 = p0.vibrateInternal(p1, p2, p3, p4, p5, p6, p7);

