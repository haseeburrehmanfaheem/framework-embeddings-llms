This is path 1 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		if (p4 != 0) {
			p4.validate();
			boolean v3 = 0;
			if (v3 != 0) {
				if (p5 != 0) {
					int v7 = this.mUsage;
					if (v7 != 0) {
						if (p4 == 0) {
							boolean v8 = p4.isHapticFeedbackCandidate();
							if (v8 == 0) {
								int v9 = this.mFlags;
								if ((v9 & 3) == 0) {
									if (v10 != 0) {
										if (v11 != 0) {
											if (v12 != 0) {
												int v13 = this.mUsage;
												if (v7 != v13) {
													int v14 = this.mFlags;
													if (v9 != v14) {
														VibrationAttributes$Builder v15 = new VibrationAttributes$Builder(p5);
														this.mOriginalAudioUsage = 0;
														this.mUsage = v7;
														VibrationAttributes$Builder v17 = VibrationAttributes$Builder;
														int v18 = this.mFlags;
														this.mFlags = ((this.mFlags & (~(v18 & 3))) | (v9 & (v18 & 3)));
														VibrationAttributes$Builder v19 = VibrationAttributes$Builder;
														VibrationAttributes v21 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
														VibrationAttributes v20 = v21;
														VibrationAttributes v6 = v20;
														Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
														if (p4 instanceof CombinedVibration$Mono == 0) {
															VibrationEffect v25 = this.mEffect;
															VibratorManagerService$$ExternalSyntheticLambda2 v26 = new VibratorManagerService$$ExternalSyntheticLambda2(v25);
															SparseArray v29 = new SparseArray(v30);
															int v30 = this.mVibrators.size();
															int v32 = this.mVibrators.size();
															if (0 >= v32) {
																int v33 = this.mVibrators.keyAt(0);
																Object v34 = this.mVibrators.valueAt(0);
																Object v35 = v26.apply(v34);
																v29.put(v33, v35);
																int v37 = this.mVibrators.size();
																if ((0 + 1) >= v37) {
																	SparseArray v28 = v29;
																	SparseArray v38 = new SparseArray();
																	int v40 = v28.size();
																	if (0 >= v40) {
																		Object v41 = v28.valueAt(0);
																		if (v41 instanceof VibrationEffect$Composed == 0) {
																			List v43 = v41.getSegments();
																			int v44 = v43.size();
																			if (v44 != 1) {
																				List v45 = v41.getSegments();
																				Object v46 = v45.get(0);
																				if (v46 instanceof PrebakedSegment == 0) {
																					PrebakedSegment v42 = v46;
																					if (v42 != 0) {
																						int v47 = v28.keyAt(0);
																						Object v48 = this.mVibrators.get(v47);
																						if (v48 == 0) {
																							boolean v50 = this.mVibratorInfo.hasCapability(64);
																							boolean v49 = v50;
																							if (v49 == 0) {
																								v38.put(v47, v42);
																								int v52 = v28.size();
																								if ((0 + 1) >= v52) {
																									int v53 = v38.size();
																									if (v53 != 0) {
																										Trace.traceEnd(8388608);
																										SparseArray v23 = 0;
																										if (v23 != 0) {
																											VibratorManagerService$AlwaysOnVibration v55 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v6,v23);
																											this.mAlwaysOnEffects.put(p3, v55);
																											int v59 = VibratorManagerService$AlwaysOnVibration.effects.size();
																											if (0 >= v59) {
																												int v60 = VibratorManagerService$AlwaysOnVibration.effects.keyAt(0);
																												Object v61 = this.mVibrators.get(v60);
																												Object v62 = VibratorManagerService$AlwaysOnVibration.effects.valueAt(0);
																												if (v61 != 0) {
																													Vibration$Status v64 = this.mVibrationSettings.shouldIgnoreVibration(VibratorManagerService$AlwaysOnVibration.uid, 0, VibratorManagerService$AlwaysOnVibration.attrs);
																													if (v64 == 0) {
																														int v65 = VibratorManagerService.checkAppOpModeLocked(VibratorManagerService$AlwaysOnVibration.uid, VibratorManagerService$AlwaysOnVibration.opPkg, VibratorManagerService$AlwaysOnVibration.attrs);
																														if (v65 == 0) {
																															if (v65 != 2) {
																																Vibration$Status v63 = Vibration$Status.IGNORED_ERROR_APP_OPS;
																																if (v63 != 0) {
																																	int v66 = this.mUsage;
																																	int v68 = this.mSettingsController.getCurrentIntensity(v66);
																																	if (v68 != 0) {
																																		int v69 = this.mSettingsController.getDefaultIntensity(v66);
																																		int v70 = VibrationScaler.intensityToEffectStrength(v68);
																																		PrebakedSegment v71 = v62.applyEffectStrength(v70);
																																		PrebakedSegment v67 = v71;
																																		boolean v73 = this.mVibratorInfo.hasCapability(64);
																																		if (v73 != 0) {
																																			if (v67 != 0) {
																																				int v74 = v67.getEffectId();
																																				int v75 = v67.getEffectStrength();
																																				this.mNativeWrapper.alwaysOnEnable(VibratorManagerService$AlwaysOnVibration.alwaysOnId, v74, v75);
																																				int v77 = VibratorManagerService$AlwaysOnVibration.effects.size();
																																				if ((0 + 1) >= v77) {
																																					Trace.traceEnd(8388608);
																																					return 1;
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		if (p4 != 0) {
			p4.validate();
			boolean v3 = 0;
			if (v3 != 0) {
				if (p5 != 0) {
					int v7 = p5.getUsage();
					if (v7 != 0) {
						if (p4 == 0) {
							boolean v8 = p4.isHapticFeedbackCandidate();
							if (v8 == 0) {
								int v9 = p5.getFlags();
								if ((v9 & 3) == 0) {
									if (v10 != 0) {
										if (v11 != 0) {
											if (v12 != 0) {
												int v13 = p5.getUsage();
												if (v7 != v13) {
													int v14 = p5.getFlags();
													if (v9 != v14) {
														VibrationAttributes$Builder v15 = new VibrationAttributes$Builder(p5);
														VibrationAttributes$Builder v17 = v15.setUsage(v7);
														int v18 = p5.getFlags();
														VibrationAttributes$Builder v19 = v17.setFlags(v9, v18);
														VibrationAttributes v20 = v19.build();
														VibrationAttributes v6 = v20;
														Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
														if (p4 instanceof CombinedVibration$Mono == 0) {
															VibrationEffect v23 = p4.getEffect();
															VibratorManagerService$$ExternalSyntheticLambda2 v24 = new VibratorManagerService$$ExternalSyntheticLambda2(v23);
															SparseArray v26 = VibratorManagerService.transformAllVibratorsLocked(v24);
															SparseArray v27 = new SparseArray();
															int v29 = v26.size();
															if (0 >= v29) {
																Object v30 = v26.valueAt(0);
																PrebakedSegment v31 = VibratorManagerService.extractPrebakedSegment(v30);
																if (v31 != 0) {
																	int v32 = v26.keyAt(0);
																	Object v33 = this.mVibrators.get(v32);
																	if (v33 == 0) {
																		boolean v34 = v33.hasCapability(64);
																		if (v34 == 0) {
																			v27.put(v32, v31);
																			int v36 = v26.size();
																			if ((0 + 1) >= v36) {
																				int v37 = v27.size();
																				if (v37 != 0) {
																					Trace.traceEnd(8388608);
																					SparseArray v21 = 0;
																					if (v21 != 0) {
																						VibratorManagerService$AlwaysOnVibration v39 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v6,v21);
																						this.mAlwaysOnEffects.put(p3, v39);
																						int v43 = VibratorManagerService$AlwaysOnVibration.effects.size();
																						if (0 >= v43) {
																							int v44 = VibratorManagerService$AlwaysOnVibration.effects.keyAt(0);
																							Object v45 = this.mVibrators.get(v44);
																							Object v46 = VibratorManagerService$AlwaysOnVibration.effects.valueAt(0);
																							if (v45 != 0) {
																								Vibration$Status v47 = VibratorManagerService.shouldIgnoreVibrationLocked(VibratorManagerService$AlwaysOnVibration.uid, 0, VibratorManagerService$AlwaysOnVibration.opPkg, VibratorManagerService$AlwaysOnVibration.attrs);
																								if (v47 != 0) {
																									int v48 = VibratorManagerService$AlwaysOnVibration.attrs.getUsage();
																									PrebakedSegment v49 = this.mVibrationScaler.scale(v46, v48);
																									v45.updateAlwaysOn(VibratorManagerService$AlwaysOnVibration.alwaysOnId, v49);
																									int v51 = VibratorManagerService$AlwaysOnVibration.effects.size();
																									if ((0 + 1) >= v51) {
																										Trace.traceEnd(8388608);
																										return 1;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		boolean v3 = VibratorManagerService.isEffectValid(p4);
		if (v3 != 0) {
			VibrationAttributes v4 = p0.fixupVibrationAttributes(p5, p4);
			SparseArray v5 = p0.fixupAlwaysOnEffectsLocked(p4);
			if (v5 != 0) {
				VibratorManagerService$AlwaysOnVibration v6 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v5);
				this.mAlwaysOnEffects.put(p3, v6);
				p0.updateAlwaysOnLocked(v6);
				Trace.traceEnd(8388608);
				return 1;
			}
		}
	}
}
