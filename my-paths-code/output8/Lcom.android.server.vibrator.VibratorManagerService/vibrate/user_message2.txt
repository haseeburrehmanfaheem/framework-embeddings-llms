The method vibrate in the following class Lcom.android.server.vibrator.VibratorManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void vibrate(int p1, int p2, String p3, CombinedVibration p4, VibrationAttributes p5, String p6, IBinder p7){
	if (p7 != 0) {
		if (p4 != 0) {
			p4.validate();
			boolean v10 = 0;
			if (v10 != 0) {
				if (p5 != 0) {
					int v14 = p5.getUsage();
					if (v14 != 0) {
						if (p4 == 0) {
							boolean v15 = p4.isHapticFeedbackCandidate();
							if (v15 == 0) {
								int v16 = p5.getFlags();
								if ((v16 & 3) == 0) {
									if (v17 != 0) {
										if (v18 != 0) {
											if (v19 != 0) {
												int v20 = p5.getUsage();
												if (v14 != v20) {
													int v21 = p5.getFlags();
													if (v16 != v21) {
														VibrationAttributes$Builder v22 = new VibrationAttributes$Builder(p5);
														VibrationAttributes$Builder v24 = v22.setUsage(v14);
														int v25 = p5.getFlags();
														VibrationAttributes$Builder v26 = v24.setFlags(v16, v25);
														VibrationAttributes v27 = v26.build();
														VibrationAttributes v13 = v27;
														Vibration v28 = new Vibration(p7,v29,p4,v13,p1,p2,p3,p6);
														int v29 = this.mNextVibrationId.getAndIncrement();
														if (p4 instanceof CombinedVibration$Mono == 0) {
															if (p4 instanceof CombinedVibration$Stereo == 0) {
																if (p4 instanceof CombinedVibration$Sequential == 0) {
																	List v32 = p4.getEffects();
																	int v33 = v32.size();
																	if (0 >= v33) {
																		Object v34 = v32.get(0);
																		VibratorManagerService.fillVibrationFallbacks(v28, v34);
																		int v36 = v32.size();
																		if ((0 + 1) >= v36) {
																			if ((this.mFlags & 3) <= 0) {
																				boolean v37 = 1;
																				if (v37 == 0) {
																					VibrationSettings.-$$Nest$mupdateSettings(this.this$0);
																					VibrationSettings.-$$Nest$mnotifyListeners(this.this$0);
																					Vibration$Status v42 = this.mVibrationSettings.shouldIgnoreVibration(Vibration.uid, Vibration.displayId, Vibration.attrs);
																					if (v42 == 0) {
																						int v43 = VibratorManagerService.checkAppOpModeLocked(Vibration.uid, Vibration.opPkg, Vibration.attrs);
																						if (v43 == 0) {
																							if (v43 != 2) {
																								Vibration$Status v41 = Vibration$Status.IGNORED_ERROR_APP_OPS;
																								if (v41 != 0) {
																									if (IGNORED_FOR_EXTERNAL != 0) {
																										if (this.mCurrentVibration == 0) {
																											boolean v45 = v28.isRepeating();
																											if (v45 == 0) {
																												Vibration v46 = this.mCurrentVibration.getVibration();
																												boolean v47 = v46.hasEnded();
																												if (v47 == 0) {
																													int v48 = Vibration.attrs.getUsage();
																													int v49 = Vibration.attrs.getUsage();
																													int v50 = VibratorManagerService.getVibrationImportance(v48);
																													int v51 = VibratorManagerService.getVibrationImportance(v49);
																													if (v50 <= v51) {
																														boolean v52 = v46.isRepeating();
																														if (v52 == 0) {
																															Vibration$Status v44 = Vibration$Status.IGNORED_FOR_ONGOING;
																															if (v44 == 0) {
																																if (IGNORED_FOR_EXTERNAL != 0) {
																																	if (IGNORED_FOR_EXTERNAL == Vibration$Status.RUNNING) {
																																		Vibration$EndInfo v53 = new Vibration$EndInfo(IGNORED_FOR_EXTERNAL,getUid(),getUsage());
																																		v28.end(v53);
																																		VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
																																		this.mVibratorManagerRecords.record(v28);
																																		if (1 == 0) {
																																			long v59 = SystemClock.uptimeMillis();
																																			VibrationStats$StatsInfo v60 = v28.getStatsInfo(v59);
																																			this.mFrameworkStatsLogger.writeVibrationReportedAsync(v60);
																																			Trace.traceEnd(8388608);
																																			Vibration v1 = v28;
																																			return;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void vibrate(int p1, int p2, String p3, CombinedVibration p4, VibrationAttributes p5, String p6, IBinder p7){
	if (p7 != 0) {
		boolean v10 = VibratorManagerService.isEffectValid(p4);
		if (v10 != 0) {
			VibrationAttributes v11 = VibratorManagerService.fixupVibrationAttributes(p5, p4);
			Vibration v12 = new Vibration(p7,v13,p4,v11,p1,p2,p3,p6);
			int v13 = this.mNextVibrationId.getAndIncrement();
			VibratorManagerService.fillVibrationFallbacks(v12, p4);
			boolean v16 = v11.isFlagSet(3);
			if (v16 == 0) {
				VibrationSettings.mSettingObserver.onChange(0);
				Vibration$Status v18 = VibratorManagerService.shouldIgnoreVibrationLocked(Vibration.uid, Vibration.displayId, Vibration.opPkg, Vibration.attrs);
				if (v18 != 0) {
					if (this.mCurrentExternalVibration == 0) {
						if (IGNORED_FOR_EXTERNAL != 0) {
							if (IGNORED_FOR_EXTERNAL != 0) {
								if (IGNORED_FOR_EXTERNAL == Vibration$Status.RUNNING) {
									Vibration$EndInfo v19 = new Vibration$EndInfo(IGNORED_FOR_EXTERNAL,getUid(),getUsage());
									VibratorManagerService.endVibrationLocked(v12, v19, 1);
									Trace.traceEnd(8388608);
									Vibration v1 = v12;
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void vibrate(int p1, int p2, String p3, CombinedVibration p4, VibrationAttributes p5, String p6, IBinder p7){
	Vibration v1 = p0.vibrateInternal(p1, p2, p3, p4, p5, p6, p7);
	return;
}

and the following sink code:
['p4.validate();\nVibrationAttributes$Builder v22 = new VibrationAttributes$Builder(p5);\nVibrationAttributes$Builder v24 = v22.setUsage(v14);\nint v25 = p5.getFlags();\nVibrationAttributes$Builder v26 = v24.setFlags(v16, v25);\nVibrationAttributes v27 = v26.build();\nVibration v28 = new Vibration(p7,v29,p4,v13,p1,p2,p3,p6);', 'boolean v10 = VibratorManagerService.isEffectValid(p4);\nVibrationAttributes v11 = VibratorManagerService.fixupVibrationAttributes(p5, p4);\nVibration v12 = new Vibration(p7,v13,p4,v11,p1,p2,p3,p6);', 'Vibration v1 = p0.vibrateInternal(p1, p2, p3, p4, p5, p6, p7);']

The method vibrate has the following similar APIs:

- API Name: setAlwaysOnEffect(ILjava/lang/String;ILandroid/os/CombinedVibration;Landroid/os/VibrationAttributes;)Z in the following Class: Lcom.android.server.vibrator.VibratorManagerService with the following sink code entries:
  - Similarity: 0.919075608253479, Code:
VibratorManagerService.isEffectValid(p4);
p0.fixupVibrationAttributes(p5, p4);
p0.fixupAlwaysOnEffectsLocked(p4);
VibratorManagerService$AlwaysOnVibration v6 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v5);
  - Similarity: 0.8541974425315857, Code:
p4.validate();
VibratorManagerService.transformAllVibratorsLocked(v24);
VibratorManagerService.extractPrebakedSegment(v30);
VibrationAttributes$Builder v15 = new VibrationAttributes$Builder(p5);
  - Similarity: 0.8380588889122009, Code:
p4.validate();
this.mNativeWrapper.alwaysOnEnable(VibratorManagerService$AlwaysOnVibration.alwaysOnId, v74, v75);
VibrationAttributes$Builder v15 = new VibrationAttributes$Builder(p5);
VibratorManagerService$$ExternalSyntheticLambda2 v26 = new VibratorManagerService$$ExternalSyntheticLambda2(v25);
SparseArray v29 = new SparseArray(v30);
  - Access Control Level: SYS_OR_SIG

- API Name: cancelVibrate(ILandroid/os/IBinder;)V in the following Class: Lcom.android.server.vibrator.VibratorManagerService with the following sink code entries:
  - Similarity: 0.7533732652664185, Code:
boolean v8 = VibratorManagerService.shouldCancelVibration(Vibration.attrs, p1);
if (v8 == 0) {
Vibration v10 = this.mNextVibration.getVibration();
VibratorManagerService.endVibrationLocked(v10, v3, 1);
  - Similarity: 0.7420941591262817, Code:
p0.clearNextVibrationLocked(v3);
this.mCurrentVibration.notifyCancelled(v3, 0);
p0.endExternalVibrateLocked(v3, 0);
  - Access Control Level: NORMAL

