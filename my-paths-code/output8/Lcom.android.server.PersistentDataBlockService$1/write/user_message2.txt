The method write in the following class Lcom.android.server.PersistentDataBlockService$1 has the following code snippet:

This is path 1 for the API with depth 2:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	if (v1 != this.mAllowedUid) {
		long v6 = PersistentDataBlockService.getBlockDeviceSize();
		if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) {
			long v5 = (((((v6 - 8) - 32) - 10000) - 1000) - 1);
			long v4 = v5;
			if ((p1.length < v4) <= 0) {
				RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
				FileChannel v11 = v9.getChannel();
				FileChannel v8 = v11;
				FileChannel v7 = v8;
				ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
				[B v13 = new [B(32);
				ByteBuffer v14 = v12.put(v13);
				ByteBuffer v15 = v12.putInt(428873843);
				ByteBuffer v16 = v12.putInt(p1.length);
				ByteBuffer v17 = v12.put(p1);
				Buffer v18 = v12.flip();
				Object v19 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				boolean v20 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
				if (v20 != 0) {
					int v21 = v7.write(v12);
					v7.force(1);
					byte[] v25 = PersistentDataBlockService.computeDigestLocked(0);
					if (v25 == 0) {
						FileChannel v26 = PersistentDataBlockService.getBlockOutputChannel();
						ByteBuffer v27 = ByteBuffer.allocate(32);
						ByteBuffer v28 = v27.put(v25);
						Buffer v29 = v27.flip();
						int v30 = v26.write(v27);
						v26.force(1);
						boolean v24 = 1;
						boolean v23 = v24;
						if (v23 == 0) {
							return p1.length;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	this.this$0.enforceUid(v1);
	long v5 = this.this$0.doGetMaximumDataBlockSize();
	long v4 = v5;
	if ((p1.length < v4) <= 0) {
		FileChannel v7 = this.this$0.getBlockOutputChannel();
		FileChannel v6 = v7;
		ByteBuffer v8 = ByteBuffer.allocate(((p1.length + 8) + 32));
		[B v9 = new [B(32);
		ByteBuffer v10 = v8.put(v9);
		ByteBuffer v11 = v8.putInt(428873843);
		ByteBuffer v12 = v8.putInt(p1.length);
		ByteBuffer v13 = v8.put(p1);
		Buffer v14 = v8.flip();
		Object v15 = this.mLock;
		boolean v16 = this.mIsWritable;
		if (v16 != 0) {
			int v17 = v6.write(v8);
			v6.force(1);
			boolean v20 = this.this$0.computeAndWriteDigestLocked();
			boolean v19 = v20;
			if (v19 == 0) {
				return p1.length;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	long v3 = PersistentDataBlockService.-$$Nest$mdoGetMaximumDataBlockSize(this.this$0);
	if ((p1.length < v3) <= 0) {
		FileChannel v4 = PersistentDataBlockService.-$$Nest$mgetBlockOutputChannel(this.this$0);
		ByteBuffer v5 = ByteBuffer.allocate(((p1.length + 8) + 32));
		[B v6 = new [B(32);
		ByteBuffer v7 = v5.put(v6);
		ByteBuffer v8 = v5.putInt(428873843);
		ByteBuffer v9 = v5.putInt(p1.length);
		ByteBuffer v10 = v5.put(p1);
		Buffer v11 = v5.flip();
		Object v12 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
		boolean v13 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
		if (v13 != 0) {
			int v14 = v4.write(v5);
			v4.force(1);
			boolean v16 = PersistentDataBlockService.-$$Nest$mcomputeAndWriteDigestLocked(this.this$0);
			if (v16 == 0) {
				return p1.length;
			}
		}
	}
}

and the following sink code:
['RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");\nByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));\nv12.put(p1);\nint v21 = v7.write(v12);', 'FileChannel v7 = this.this$0.getBlockOutputChannel();\nByteBuffer v8 = ByteBuffer.allocate(((p1.length + 8) + 32));\nv8.put(p1);\nint v17 = v6.write(v8);', 'FileChannel v4 = PersistentDataBlockService.-$$Nest$mgetBlockOutputChannel(this.this$0);\nByteBuffer v5 = ByteBuffer.allocate(((p1.length + 8) + 32));\nv5.put(p1);\nint v14 = v4.write(v5);']

The method write has the following similar APIs:

- API Name: read()[B in the following Class: Lcom.android.server.PersistentDataBlockService$1 with the following sink code entries:
  - Similarity: 0.8039218783378601, Code:
DataInputStream v6 = new DataInputStream(v7);
FileInputStream v7 = new FileInputStream(v8);
File v8 = new File(v9);
String v9 = this.mDataBlockFile;
[B v16 = new [B(v14);
int v17 = v6.read(v16, 0, v14);
return v16;
  - Similarity: 0.7392589449882507, Code:
DataInputStream v4 = new DataInputStream(v5);
FileInputStream v5 = new FileInputStream(v6);
File v6 = new File(v7);
String v7 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
[B v13 = new [B(v12);
int v14 = v4.read(v13, 0, v12);
return v13;
  - Access Control Level: NONE

- API Name: getDataBlockSize()I in the following Class: Lcom.android.server.PersistentDataBlockService$1 with the following sink code entries:
  - Similarity: 0.770592451095581, Code:
DataInputStream v6 = new DataInputStream(v7);
FileInputStream v7 = new FileInputStream(v8);
File v8 = new File(v9);
String v9 = this.mDataBlockFile;
int v15 = this.this$0.getTotalDataSizeLocked(v6);
return v14;
  - Similarity: 0.725441038608551, Code:
DataInputStream v7 = new DataInputStream(v8);
FileInputStream v8 = new FileInputStream(v9);
File v9 = new File(v10);
String v10 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7);
return v15;
  - Similarity: 0.710837185382843, Code:
DataInputStream v2 = new DataInputStream(v3);
FileInputStream v3 = new FileInputStream(v4);
File v4 = new File(v5);
String v5 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
int v10 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v2);
return v10;
  - Access Control Level: SYS_OR_SIG

