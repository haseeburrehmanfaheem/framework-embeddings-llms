The method read in the following class Lcom.android.server.PersistentDataBlockService$1 has the following code snippet:

This is path 1 for the API with depth 2:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	if (v1 != this.mAllowedUid) {
		[B v6 = new [B(32);
		byte[] v7 = PersistentDataBlockService.computeDigestLocked(v6);
		if (v7 == 0) {
			boolean v8 = Arrays.equals(v6, v7);
			if (v8 != 0) {
				PersistentDataBlockService.formatPartitionLocked(0);
				boolean v5 = 0;
				boolean v4 = v5;
				if (v4 != 0) {
					DataInputStream v11 = new DataInputStream(v12);
					FileInputStream v12 = new FileInputStream(v13);
					File v13 = new File(v14);
					String v14 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
					Object v18 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
					int v19 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v11);
					if (v19 != 0) {
						[B v20 = new [B(v19);
						int v21 = v11.read(v20, 0, v19);
						if (v21 >= v19) {
							v11.close();
							return v20;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	this.this$0.enforceUid(v1);
	boolean v5 = this.this$0.enforceChecksumValidity();
	boolean v4 = v5;
	if (v4 != 0) {
		DataInputStream v6 = new DataInputStream(v7);
		FileInputStream v7 = new FileInputStream(v8);
		File v8 = new File(v9);
		String v9 = this.mDataBlockFile;
		Object v13 = this.mLock;
		int v15 = this.this$0.getTotalDataSizeLocked(v6);
		int v14 = v15;
		if (v14 != 0) {
			[B v16 = new [B(v14);
			int v17 = v6.read(v16, 0, v14);
			if (v17 >= v14) {
				v6.close();
				return v16;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	boolean v3 = PersistentDataBlockService.-$$Nest$menforceChecksumValidity(this.this$0);
	if (v3 != 0) {
		DataInputStream v4 = new DataInputStream(v5);
		FileInputStream v5 = new FileInputStream(v6);
		File v6 = new File(v7);
		String v7 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
		Object v11 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
		int v12 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v4);
		if (v12 != 0) {
			[B v13 = new [B(v12);
			int v14 = v4.read(v13, 0, v12);
			if (v14 >= v12) {
				v4.close();
				return v13;
			}
		}
	}
}

and the following sink code:
['DataInputStream v6 = new DataInputStream(v7);\nFileInputStream v7 = new FileInputStream(v8);\nFile v8 = new File(v9);\nString v9 = this.mDataBlockFile;\n[B v16 = new [B(v14);\nint v17 = v6.read(v16, 0, v14);\nreturn v16;', 'DataInputStream v4 = new DataInputStream(v5);\nFileInputStream v5 = new FileInputStream(v6);\nFile v6 = new File(v7);\nString v7 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);\n[B v13 = new [B(v12);\nint v14 = v4.read(v13, 0, v12);\nreturn v13;']

The method read has the following similar APIs:

- API Name: getDataBlockSize()I in the following Class: Lcom.android.server.PersistentDataBlockService$1 with the following sink code entries:
  - Similarity: 0.8882606029510498, Code:
DataInputStream v6 = new DataInputStream(v7);
FileInputStream v7 = new FileInputStream(v8);
File v8 = new File(v9);
String v9 = this.mDataBlockFile;
int v15 = this.this$0.getTotalDataSizeLocked(v6);
return v14;
  - Similarity: 0.8817206621170044, Code:
DataInputStream v7 = new DataInputStream(v8);
FileInputStream v8 = new FileInputStream(v9);
File v9 = new File(v10);
String v10 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7);
return v15;
  - Similarity: 0.8672879934310913, Code:
DataInputStream v2 = new DataInputStream(v3);
FileInputStream v3 = new FileInputStream(v4);
File v4 = new File(v5);
String v5 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
int v10 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v2);
return v10;
  - Access Control Level: SYS_OR_SIG

- API Name: write([B)I in the following Class: Lcom.android.server.PersistentDataBlockService$1 with the following sink code entries:
  - Similarity: 0.8039218783378601, Code:
RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
v12.put(p1);
int v21 = v7.write(v12);
  - Similarity: 0.7248154282569885, Code:
FileChannel v4 = PersistentDataBlockService.-$$Nest$mgetBlockOutputChannel(this.this$0);
ByteBuffer v5 = ByteBuffer.allocate(((p1.length + 8) + 32));
v5.put(p1);
int v14 = v4.write(v5);
  - Access Control Level: NONE

- API Name: getMaximumDataBlockSize()J in the following Class: Lcom.android.server.PersistentDataBlockService$1 with the following sink code entries:
  - Similarity: 0.7256578207015991, Code:
long v5 = this.this$0.doGetMaximumDataBlockSize();
long v4 = v5;
return v4;
  - Access Control Level: NONE

- API Name: getOemUnlockEnabled()Z in the following Class: Lcom.android.server.PersistentDataBlockService$1 with the following sink code entries:
  - Similarity: 0.7217649221420288, Code:
long v10 = PersistentDataBlockService.getBlockDeviceSize();
byte v12 = v4.readByte();
if (v12 == 0) {
    IoUtils.closeQuietly(v4);
    boolean v3 = 1;
    boolean v2 = v3;
    return v2;
  - Access Control Level: SYS_OR_SIG

- API Name: reportTrackChangeEvent(Ljava/lang/String;Landroid/media/metrics/TrackChangeEvent;I)V in the following Class: Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7083051204681396, Code:
Integer v4 = this.mMode;
this.mMode = Integer.valueOf(v6);
...
List v25 = this.mBlockList;
if (v25 != 0) { ... }
  - Access Control Level: NONE

