The method isOemUnlockAllowed has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isOemUnlockAllowed(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = this.mOemLock;
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	if (v4 == 0) {
		OemLock v5 = this.mOemLock;
		boolean v6 = v5.isOemUnlockAllowedByDevice();
		if (v6 == 0) {
			Object v9 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
			if (v9 == 0) {
				if (this.mOemLock instanceof PersistentDataBlockLock != 0) {
					v9.forceOemUnlockEnabled(1);
					Binder.restoreCallingIdentity(v2);
					return 1;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isOemUnlockAllowed(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = this.mOemLock;
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	if (v4 == 0) {
		OemLock v5 = this.mOemLock;
		boolean v6 = v5.isOemUnlockAllowedByDevice();
		if (v6 == 0) {
			this.this$0.setPersistentDataBlockOemUnlockAllowedBit(1);
			Binder.restoreCallingIdentity(v2);
			return 1;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isOemUnlockAllowed(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	if (v4 == 0) {
		OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
		boolean v6 = v5.isOemUnlockAllowedByDevice();
		if (v6 == 0) {
			OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, 1);
			Binder.restoreCallingIdentity(v2);
			return 1;
		}
	}
}

and the following sink code:
['OemLock v3 = this.mOemLock;\nboolean v4 = v3.isOemUnlockAllowedByCarrier();\nboolean v6 = v5.isOemUnlockAllowedByDevice();\nv9.forceOemUnlockEnabled(1);', 'OemLock v3 = this.mOemLock;\nboolean v4 = v3.isOemUnlockAllowedByCarrier();\nboolean v6 = v5.isOemUnlockAllowedByDevice();\nthis.this$0.setPersistentDataBlockOemUnlockAllowedBit(1);', 'OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);\nboolean v4 = v3.isOemUnlockAllowedByCarrier();\nboolean v6 = v5.isOemUnlockAllowedByDevice();\nOemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, 1);']

The method isOemUnlockAllowed has the following similar APIs:

- API Name: setOemUnlockAllowedByUser(Z)V with Similarity Score: 0.9808717966079712
  - Access Control Level: SYS_OR_SIG and the following code:
OemLock v8 = this.mOemLock;
boolean v9 = v8.isOemUnlockAllowedByCarrier();
OemLock v10 = this.mOemLock;
v10.setOemUnlockAllowedByDevice(p1);
this.this$0.setPersistentDataBlockOemUnlockAllowedBit(p1);

- API Name: setOemUnlockAllowedByUser(Z)V with Similarity Score: 0.9467061758041382
  - Access Control Level: SYS_OR_SIG and the following code:
OemLock v15 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
boolean v16 = v15.isOemUnlockAllowedByCarrier();
OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
v17.setOemUnlockAllowedByDevice(p1);

