This is path 1 for the API with depth 2:
public void setOemUnlockAllowedByCarrier(boolean p1, byte[] p2){
	int v4 = UserHandle.getCallingUserId();
	long v5 = Binder.clearCallingIdentity();
	UserManager v6 = UserManager.get(this.mContext);
	boolean v7 = v6.isUserAdmin(v4);
	if (v7 == 0) {
		Binder.restoreCallingIdentity(v5);
		long v9 = Binder.clearCallingIdentity();
		OemLock v10 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
		v10.setOemUnlockAllowedByCarrier(p1, p2);
		Binder.restoreCallingIdentity(v9);
		return;
	}
}


This is path 2 for the API with depth 1:
public void setOemUnlockAllowedByCarrier(boolean p1, byte[] p2){
	this.this$0.enforceUserIsAdmin();
	long v4 = Binder.clearCallingIdentity();
	OemLock v5 = this.mOemLock;
	v5.setOemUnlockAllowedByCarrier(p1, p2);
	Binder.restoreCallingIdentity(v4);
	return;
}


This is path 3 for the API with depth 0:
public void setOemUnlockAllowedByCarrier(boolean p1, byte[] p2){
	OemLockService.-$$Nest$menforceUserIsAdmin(this.this$0);
	long v3 = Binder.clearCallingIdentity();
	OemLock v4 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	v4.setOemUnlockAllowedByCarrier(p1, p2);
	Binder.restoreCallingIdentity(v3);
	return;
}
