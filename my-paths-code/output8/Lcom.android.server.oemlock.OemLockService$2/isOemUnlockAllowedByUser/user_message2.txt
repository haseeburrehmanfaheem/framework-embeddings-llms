The method isOemUnlockAllowedByUser in the following class Lcom.android.server.oemlock.OemLockService$2 has the following code snippet:

This is path 1 for the API with depth 1:
public boolean isOemUnlockAllowedByUser(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = this.mOemLock;
	boolean v4 = v3.isOemUnlockAllowedByDevice();
	Binder.restoreCallingIdentity(v2);
	return v4;
}


This is path 2 for the API with depth 0:
public boolean isOemUnlockAllowedByUser(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByDevice();
	Binder.restoreCallingIdentity(v2);
	return v4;
}

and the following sink code:
['OemLock v3 = this.mOemLock;\nboolean v4 = v3.isOemUnlockAllowedByDevice();\nreturn v4;']

The method isOemUnlockAllowedByUser has the following similar APIs:

- API Name: isOemUnlockAllowedByCarrier()Z in the following Class: Lcom.android.server.oemlock.OemLockService$2 with the following sink code entries:
  - Similarity: 0.9068790078163147, Code:
OemLock v3 = this.mOemLock;
boolean v4 = v3.isOemUnlockAllowedByCarrier();
return v4;
  - Access Control Level: SYS_OR_SIG

- API Name: isOemUnlockAllowed()Z in the following Class: Lcom.android.server.oemlock.OemLockService$2 with the following sink code entries:
  - Similarity: 0.8958080410957336, Code:
OemLock v3 = this.mOemLock;
boolean v4 = v3.isOemUnlockAllowedByCarrier();
boolean v6 = v5.isOemUnlockAllowedByDevice();
v9.forceOemUnlockEnabled(1);
  - Similarity: 0.843008279800415, Code:
OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
boolean v4 = v3.isOemUnlockAllowedByCarrier();
boolean v6 = v5.isOemUnlockAllowedByDevice();
OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, 1);
  - Similarity: 0.8410186767578125, Code:
OemLock v3 = this.mOemLock;
boolean v4 = v3.isOemUnlockAllowedByCarrier();
boolean v6 = v5.isOemUnlockAllowedByDevice();
this.this$0.setPersistentDataBlockOemUnlockAllowedBit(1);
  - Access Control Level: SYS_OR_SIG

- API Name: setOemUnlockAllowedByUser(Z)V in the following Class: Lcom.android.server.oemlock.OemLockService$2 with the following sink code entries:
  - Similarity: 0.8781028389930725, Code:
OemLock v15 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
boolean v16 = v15.isOemUnlockAllowedByCarrier();
OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
v17.setOemUnlockAllowedByDevice(p1);
  - Similarity: 0.8420193791389465, Code:
OemLock v8 = this.mOemLock;
boolean v9 = v8.isOemUnlockAllowedByCarrier();
OemLock v10 = this.mOemLock;
v10.setOemUnlockAllowedByDevice(p1);
this.this$0.setPersistentDataBlockOemUnlockAllowedBit(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: getLockName()Ljava/lang/String; in the following Class: Lcom.android.server.oemlock.OemLockService$2 with the following sink code entries:
  - Similarity: 0.8574614524841309, Code:
OemLock v3 = this.mOemLock;
String v4 = v3.getLockName();
return v4;
  - Access Control Level: SYS_OR_SIG

- API Name: getOemUnlockEnabled()Z in the following Class: Lcom.android.server.PersistentDataBlockService$1 with the following sink code entries:
  - Similarity: 0.8531752824783325, Code:
boolean v3 = this.this$0.doGetOemUnlockEnabled();
return v2;
  - Access Control Level: SYS_OR_SIG

