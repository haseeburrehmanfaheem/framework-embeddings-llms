This is path 1 for the API with depth 2:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		long v6 = Binder.clearCallingIdentity();
		UserManager v7 = UserManager.get(this.mContext);
		boolean v8 = v7.isUserAdmin(v5);
		if (v8 == 0) {
			Binder.restoreCallingIdentity(v6);
			long v10 = Binder.clearCallingIdentity();
			UserManager v13 = UserManager.get(this.mContext);
			boolean v14 = v13.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
			boolean v12 = (v14 ^ 1);
			boolean v11 = v12;
			if (v11 == 0) {
				OemLock v15 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
				boolean v16 = v15.isOemUnlockAllowedByCarrier();
				if (v16 == 0) {
					OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
					v17.setOemUnlockAllowedByDevice(p1);
					Object v21 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
					if (v21 == 0) {
						if (this.mOemLock instanceof PersistentDataBlockLock != 0) {
							v21.forceOemUnlockEnabled(p1);
							Binder.restoreCallingIdentity(v10);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		this.this$0.enforceUserIsAdmin();
		long v5 = Binder.clearCallingIdentity();
		boolean v7 = this.this$0.isOemUnlockAllowedByAdmin();
		boolean v6 = v7;
		if (v6 == 0) {
			OemLock v8 = this.mOemLock;
			boolean v9 = v8.isOemUnlockAllowedByCarrier();
			if (v9 == 0) {
				OemLock v10 = this.mOemLock;
				v10.setOemUnlockAllowedByDevice(p1);
				this.this$0.setPersistentDataBlockOemUnlockAllowedBit(p1);
				Binder.restoreCallingIdentity(v5);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		return;
	}
}
