The method generateCinematicEffect in the following class Lcom.android.server.wallpapereffectsgeneration.WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub has the following code snippet:

This is path 1 for the API with depth 2:
public void generateCinematicEffect(CinematicEffectRequest p1, ICinematicEffectListener p2){
	WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0(p1,p2);
	if (v11 == 0) {
		ServiceNameResolver v12 = AbstractMasterSystemService.mServiceNameResolver;
		boolean v13 = v12.isTemporary(v9);
		if (v13 != 0) {
			ActivityTaskManagerInternal v14 = this.mActivityTaskManagerInternal;
			int v15 = Binder.getCallingUid();
			boolean v16 = v14.isCallerRecents(v15);
			if (v16 == 0) {
				int v17 = Binder.getCallingUid();
				long v18 = Binder.clearCallingIdentity();
				Object v19 = AbstractMasterSystemService.mLock;
				AbstractPerUserSystemService v21 = this.this$0.getServiceForUserLocked(v9);
				AbstractPerUserSystemService v20 = v21;
				if (v20 == 0) {
					if (1 != 0) {
						int v23 = WallpaperEffectsGenerationPerUserService.getServiceUidLocked();
						if (v23 != v17) {
							boolean v22 = 1;
							if (v22 == 0) {
								v1.accept(v20);
								Binder.restoreCallingIdentity(v18);
								boolean v3 = 0;
								if (v3 != 0) {
									CinematicEffectResponse$Builder v26 = new CinematicEffectResponse$Builder(0,v27);
									String v27 = p1.getTaskId();
									CinematicEffectResponse v29 = v26.build();
									p2.onCinematicEffectGenerated(v29);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void generateCinematicEffect(CinematicEffectRequest p1, ICinematicEffectListener p2){
	WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0(p1,p2);
	if (v11 == 0) {
		ServiceNameResolver v12 = WallpaperEffectsGenerationManagerService.access$000(this.this$0);
		boolean v13 = v12.isTemporary(v9);
		if (v13 != 0) {
			ActivityTaskManagerInternal v14 = WallpaperEffectsGenerationManagerService.-$$Nest$fgetmActivityTaskManagerInternal(this.this$0);
			int v15 = Binder.getCallingUid();
			boolean v16 = v14.isCallerRecents(v15);
			if (v16 == 0) {
				int v17 = Binder.getCallingUid();
				long v18 = Binder.clearCallingIdentity();
				Object v19 = WallpaperEffectsGenerationManagerService.access$100(this.this$0);
				AbstractPerUserSystemService v20 = WallpaperEffectsGenerationManagerService.access$200(this.this$0, v9);
				if (v20 == 0) {
					if (1 != 0) {
						boolean v21 = v20.isCallingUidAllowed(v17);
						if (v21 == 0) {
							v1.accept(v20);
							Binder.restoreCallingIdentity(v18);
							boolean v3 = 0;
							if (v3 != 0) {
								CinematicEffectResponse$Builder v24 = new CinematicEffectResponse$Builder(0,v25);
								String v25 = this.mTaskId;
								if (this.mTexturedMeshes != 0) {
									ArrayList v28 = new ArrayList(0);
									this.mTexturedMeshes = v28;
									CinematicEffectResponse v30 = new CinematicEffectResponse(this.mStatusCode,this.mTaskId,this.mImageContentType,this.mTexturedMeshes,this.mStartKeyFrame,this.mEndKeyFrame,0);
									CinematicEffectResponse v27 = v30;
									p2.onCinematicEffectGenerated(v27);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void generateCinematicEffect(CinematicEffectRequest p1, ICinematicEffectListener p2){
	WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0(p1,p2);
	boolean v3 = p0.runForUser("generateCinematicEffect", 1, v1);
	if (v3 != 0) {
		CinematicEffectResponse$Builder v4 = new CinematicEffectResponse$Builder(0,v5);
		String v5 = p1.getTaskId();
		CinematicEffectResponse v7 = v4.build();
		p2.onCinematicEffectGenerated(v7);
		return;
	}
}

and the following sink code:
['WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0(p1,p2);\nCinematicEffectResponse$Builder v4 = new CinematicEffectResponse$Builder(0,v5);\nString v5 = p1.getTaskId();\nCinematicEffectResponse v7 = v4.build();\np2.onCinematicEffectGenerated(v7);', 'int v15 = Binder.getCallingUid();\nboolean v16 = v14.isCallerRecents(v15);\nv1.accept(v20);\nBinder.restoreCallingIdentity(v18);']

The method generateCinematicEffect has the following similar APIs:

- API Name: createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8801342248916626, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
long v6 = Binder.clearCallingIdentity();
Binder.restoreCallingIdentity(v6);
  - Access Control Level: NONE

- API Name: returnCinematicEffectResponse(Landroid/app/wallpapereffectsgeneration/CinematicEffectResponse;)V in the following Class: Lcom.android.server.wallpapereffectsgeneration.WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub with the following sink code entries:
  - Similarity: 0.8620219826698303, Code:
WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda1 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda1(p1);
v1.accept(v20);
boolean v3 = p0.runForUser("returnCinematicResponse", 0, v1);
  - Access Control Level: SYS_OR_SIG

- API Name: getServiceDeviceInfo(Ljava/lang/String;Ljava/lang/String;)Landroid/media/midi/MidiDeviceInfo; in the following Class: Lcom.android.server.midi.MidiService with the following sink code entries:
  - Similarity: 0.8558867573738098, Code:
int v1 = Binder.getCallingUid();
boolean v14 = v10.isUidAllowed(v1);
  - Access Control Level: NONE

- API Name: createSession(Landroid/media/tv/interactive/ITvInteractiveAppClient;Ljava/lang/String;III)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8465652465820312, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
TvInteractiveAppManagerService$UserState v14 = TvInteractiveAppManagerService.getUserStateLocked(v3);
Map v18 = TvInteractiveAppManagerService$UserState.-$$Nest$fgetmIAppMap(v12);
Object v19 = v18.get(p2);
Binder v24 = new Binder();
TvInteractiveAppManagerService$SessionState v26 = new TvInteractiveAppManagerService$SessionState(this.this$0,v24,p2,p3,v27,p1,p4,v1,v2,v3,0);
Map v29 = TvInteractiveAppManagerService$UserState.-$$Nest$fgetmSessionStateMap(v12);
Object v30 = v29.put(v24, v26);
  - Access Control Level: NONE

- API Name: notifyError(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;I)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8352081179618835, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v3 = TvInteractiveAppManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, "notifyError");
TvInteractiveAppManagerService$SessionState v6 = TvInteractiveAppManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3);
ITvInteractiveAppSession v7 = TvInteractiveAppManagerService.-$$Nest$mgetSessionLocked(this.this$0, v6);
v7.notifyError(p2, p3);
  - Access Control Level: SYS_OR_SIG

