The method factoryReset has the following code snippet:

This is path 1 for the API with depth 2:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	ILegacyKeystore v11 = LegacyVpnProfileStore.getService();
	v11.remove("LOCKDOWN_VPN", -1);
	if (ServiceSpecificException.errorCode == 7) {
		boolean v10 = 0;
		boolean v9 = v10;
		this.mLockdownEnabled = 0;
		this.mLockdownTracker = 0;
		if (this.mLockdownTracker == 0) {
			LockdownVpnTracker.shutdownLocked();
			if (0 == 0) {
				this.mLockdownTracker = 0;
				LockdownVpnTracker.initLocked();
				Binder.restoreCallingIdentity(v8);
				Object v21 = this.mVpns.get(v4);
				if (v21 == 0) {
					VpnConfig v22 = this.mConfig;
					VpnConfig v19 = v22;
					if (v19 == 0) {
						if (VpnConfig.legacy == 0) {
							Object v26 = this.mVpns.get(v4);
							if (v26 == 0) {
								int v29 = Vpn.getAppUid(VpnConfig.user, this.mUserId);
								if (v29 == -1) {
									boolean v30 = "[Legacy VPN]".equals(VpnConfig.user);
									if (v30 == 0) {
										long v31 = Binder.clearCallingIdentity();
										if (-1 == -1) {
											if (-1 == 1) {
												if (-1 == 2) {
													String v32 = new String(1);
													Binder.restoreCallingIdentity(v31);
													boolean v27 = 0;
													VpnManagerService.throwIfLockdownEnabled();
													Object v45 = this.mVpns.get(v4);
													if (v45 == 0) {
														if (v47 == 0) {
															if (0 == 0) {
																Vpn.verifyCallingUidAndPackage(0);
																if ("[Legacy VPN]" == 0) {
																	Vpn.verifyCallingUidAndPackage("[Legacy VPN]");
																	if (0 == 0) {
																		if (this.mAlwaysOn == 0) {
																			boolean v50 = Vpn.isCurrentPreparedPackage(0);
																			if (v50 != 0) {
																				boolean v51 = Vpn.isCurrentPreparedPackage(0);
																				if (v51 != 0) {
																					boolean v52 = 0.equals("[Legacy VPN]");
																					if (v52 != 0) {
																						boolean v53 = Vpn.isVpnPreConsented(this.mContext, 0, 1);
																						if (v53 != 0) {
																							if ("[Legacy VPN]" == 0) {
																								boolean v54 = "[Legacy VPN]".equals("[Legacy VPN]");
																								if (v54 != 0) {
																									boolean v55 = Vpn.isCurrentPreparedPackage("[Legacy VPN]");
																									if (v55 == 0) {
																										boolean v46 = 1;
																										boolean v42 = v46;
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	boolean v10 = LegacyVpnProfileStore.remove("LOCKDOWN_VPN");
	boolean v9 = v10;
	this.mLockdownEnabled = 0;
	this.mLockdownTracker = 0;
	if (this.mLockdownTracker == 0) {
		this.mLockdownTracker.shutdown();
		if (0 == 0) {
			this.mLockdownTracker = 0;
			0.init();
			Binder.restoreCallingIdentity(v8);
			Object v17 = this.mVpns.get(v4);
			if (v17 == 0) {
				VpnConfig v18 = v17.getVpnConfig();
				VpnConfig v15 = v18;
				if (v15 == 0) {
					if (VpnConfig.legacy == 0) {
						Object v21 = this.mVpns.get(v4);
						if (v21 == 0) {
							boolean v22 = v21.setPackageAuthorization(VpnConfig.user, -1);
							VpnManagerService.throwIfLockdownEnabled();
							Object v26 = this.mVpns.get(v4);
							if (v26 == 0) {
								boolean v27 = v26.prepare(0, "[Legacy VPN]", 1);
								boolean v23 = v27;
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	boolean v9 = this.mVpnProfileStore.remove("LOCKDOWN_VPN");
	this.mLockdownEnabled = 0;
	p0.setLockdownTracker(0);
	Binder.restoreCallingIdentity(v8);
	VpnConfig v12 = p0.getVpnConfig(v4);
	if (v12 == 0) {
		if (VpnConfig.legacy == 0) {
			p0.setVpnPackageAuthorization(VpnConfig.user, v4, -1);
			boolean v14 = p0.prepareVpn(0, "[Legacy VPN]", v4);
			return;
		}
	}
}

and the following sink code:
['long v8 = Binder.clearCallingIdentity();\nILegacyKeystore v11 = LegacyVpnProfileStore.getService();\nv11.remove("LOCKDOWN_VPN", -1);\nthis.mLockdownEnabled = 0;\nthis.mLockdownTracker = 0;', 'LegacyVpnProfileStore.remove("LOCKDOWN_VPN");\nthis.mLockdownTracker.shutdown();\n0.init();', 'this.mVpnProfileStore.remove("LOCKDOWN_VPN");\np0.setLockdownTracker(0);']

The method factoryReset has the following similar APIs:

- API Name: deleteVpnProfile(Ljava/lang/String;)V with Similarity Score: 0.8223678469657898
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(v2);
v3.deleteVpnProfile(p1);

- API Name: stopVpnProfile(Ljava/lang/String;)V with Similarity Score: 0.796298086643219
  - Access Control Level: NONE and the following code:
this.mVpns.get(v3).stopVpnProfile(p1);

