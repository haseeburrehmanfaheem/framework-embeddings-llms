The method prepareVpn has the following code snippet:

This is path 1 for the API with depth 2:
public boolean prepareVpn(String p1, String p2, int p3){
	p0.throwIfLockdownEnabled();
	Object v3 = this.mVpns.get(p3);
	if (v3 == 0) {
		if (v5 == 0) {
			if (p1 == 0) {
				if (p2 == 0) {
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v12 = Vpn.isCurrentPreparedPackage(p1);
							if (v12 != 0) {
								boolean v13 = Vpn.isCurrentPreparedPackage(p1);
								if (v13 != 0) {
									boolean v14 = p1.equals("[Legacy VPN]");
									if (v14 != 0) {
										if (1 == 1) {
											if (1 == 2) {
												boolean v16 = Vpn.isVpnProfilePreConsented(this.mContext, p1);
												boolean v15 = v16;
												if (v15 == 0) {
													long v18 = Binder.clearCallingIdentity();
													if (this.mInterface == 0) {
														this.mStatusIntent = 0;
														Vpn.agentDisconnect();
														Vpn.jniReset(this.mInterface);
														this.mInterface = 0;
														Vpn.resetNetworkCapabilities();
														if (this.mConnection == 0) {
															if (this.mVpnRunner == 0) {
																this.mPackage = p1;
																int v38 = Vpn.getAppUid(p1, this.mUserId);
																this.mOwnerUID = v38;
																boolean v39 = Vpn.doesPackageTargetAtLeastQ(p1);
																this.mIsPackageTargetingAtLeastQ = v39;
																this.mNms.allowProtect(this.mOwnerUID);
																this.mConfig = 0;
																Vpn.updateState(NetworkInfo$DetailedState.DISCONNECTED, "prepare");
																Vpn.setVpnForcedLocked(this.mLockdown);
																Binder.restoreCallingIdentity(v18);
																boolean v4 = 1;
																return v4;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean prepareVpn(String p1, String p2, int p3){
	p0.throwIfLockdownEnabled();
	Object v3 = this.mVpns.get(p3);
	if (v3 == 0) {
		if (v5 == 0) {
			if (p1 == 0) {
				Vpn.verifyCallingUidAndPackage(p1);
				if (p2 == 0) {
					Vpn.verifyCallingUidAndPackage(p2);
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v8 = Vpn.isCurrentPreparedPackage(p1);
							if (v8 != 0) {
								boolean v9 = Vpn.isCurrentPreparedPackage(p1);
								if (v9 != 0) {
									boolean v10 = p1.equals("[Legacy VPN]");
									if (v10 != 0) {
										boolean v11 = Vpn.isVpnPreConsented(this.mContext, p1, 1);
										if (v11 != 0) {
											if (p2 == 0) {
												boolean v12 = p2.equals("[Legacy VPN]");
												if (v12 != 0) {
													boolean v13 = Vpn.isCurrentPreparedPackage(p2);
													if (v13 == 0) {
														boolean v4 = 1;
														return v4;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean prepareVpn(String p1, String p2, int p3){
	p0.throwIfLockdownEnabled();
	Object v3 = this.mVpns.get(p3);
	if (v3 == 0) {
		boolean v4 = v3.prepare(p1, p2, 1);
		return v4;
	}
}

and the following sink code:
['Object v3 = this.mVpns.get(p3);\nboolean v12 = Vpn.isCurrentPreparedPackage(p1);\nthis.mPackage = p1;\nint v38 = Vpn.getAppUid(p1, this.mUserId);\nthis.mOwnerUID = v38;\nVpn.updateState(NetworkInfo$DetailedState.DISCONNECTED, "prepare");', 'Vpn.verifyCallingUidAndPackage(p1);\nboolean v8 = Vpn.isCurrentPreparedPackage(p1);\nboolean v11 = Vpn.isVpnPreConsented(this.mContext, p1, 1);', 'v3.prepare(p1, p2, 1);']

The method prepareVpn has the following similar APIs:

- API Name: deleteVpnProfile(Ljava/lang/String;)V with Similarity Score: 0.8811255097389221
  - Access Control Level: SYS_OR_SIG and the following code:
Vpn.verifyCallingUidAndPackage(p1);
Vpn.enforceNotRestrictedUser();
boolean v10 = Vpn.isCurrentIkev2VpnLocked(p1);
if (v10 == 0) { ... }
VpnProfileStore v12 = Vpn.getVpnProfileStore();
String v13 = Vpn.getProfileNameForPackage(p1);
boolean v14 = v12.remove(v13);

- API Name: startVpnProfile(Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.8135333061218262
  - Access Control Level: SYS_OR_SIG and the following code:
p0.verifyCallingUidAndPackage(p1, v1)
String v6 = v5.startVpnProfile(p1)
return v6;

