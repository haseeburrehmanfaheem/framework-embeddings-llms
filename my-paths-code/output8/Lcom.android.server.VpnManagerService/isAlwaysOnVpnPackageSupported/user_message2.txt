The method isAlwaysOnVpnPackageSupported has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			long v6 = Binder.clearCallingIdentity();
			boolean v8 = this.mDeps.isCallerSystem();
			if (v8 != 0) {
				VpnProfileStore v9 = Vpn.getVpnProfileStore();
				String v10 = Vpn.getProfileNameForPackage(p2);
				byte[] v11 = v9.get(v10);
				if (v11 != 0) {
					VpnProfile v12 = VpnProfile.decode("", v11);
					VpnProfile v7 = v12;
					if (v7 == 0) {
						Binder.restoreCallingIdentity(v6);
						PackageManager v14 = this.mContext.getPackageManager();
						ApplicationInfo v15 = v14.getApplicationInfoAsUser(p2, 0, this.mUserId);
						if (v15 == 0) {
							if (ApplicationInfo.targetSdkVersion >= 24) {
								Intent v16 = new Intent("android.net.VpnService");
								Intent v18 = v16.setPackage(p2);
								List v19 = v14.queryIntentServicesAsUser(v16, 128, this.mUserId);
								if (v19 == 0) {
									int v20 = v19.size();
									if (v20 != 0) {
										Iterator v21 = v19.iterator();
										boolean v22 = v21.hasNext();
										if (v22 == 0) {
											Object v23 = v21.next();
											if (ServiceInfo.metaData == 0) {
												boolean v24 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
												if (v24 != 0) {
													boolean v25 = v21.hasNext();
													if (v25 == 0) {
														Object v26 = v21.next();
														if (ServiceInfo.metaData == 0) {
															boolean v27 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
															if (v27 != 0) {
																boolean v4 = 0;
																return v4;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			long v6 = Binder.clearCallingIdentity();
			VpnProfile v7 = Vpn.getVpnProfilePrivileged(p2);
			if (v7 == 0) {
				Binder.restoreCallingIdentity(v6);
				PackageManager v9 = this.mContext.getPackageManager();
				ApplicationInfo v10 = v9.getApplicationInfoAsUser(p2, 0, this.mUserId);
				if (v10 == 0) {
					if (ApplicationInfo.targetSdkVersion >= 24) {
						Intent v11 = new Intent("android.net.VpnService");
						Intent v13 = v11.setPackage(p2);
						List v14 = v9.queryIntentServicesAsUser(v11, 128, this.mUserId);
						if (v14 == 0) {
							int v15 = v14.size();
							if (v15 != 0) {
								Iterator v16 = v14.iterator();
								boolean v17 = v16.hasNext();
								if (v17 == 0) {
									Object v18 = v16.next();
									if (ServiceInfo.metaData == 0) {
										boolean v19 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
										if (v19 != 0) {
											boolean v20 = v16.hasNext();
											if (v20 == 0) {
												Object v21 = v16.next();
												if (ServiceInfo.metaData == 0) {
													boolean v22 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
													if (v22 != 0) {
														boolean v4 = 0;
														return v4;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("User ");
		StringBuilder v7 = v4.append(p1);
		StringBuilder v8 = v4.append(" has no Vpn configuration");
		String v9 = v4.toString();
		VpnManagerService.logw(v9);
		return 0;
	}
}

and the following sink code:
['Object v3 = this.mVpns.get(p1);\nString v10 = Vpn.getProfileNameForPackage(p2);\nbyte[] v11 = v9.get(v10);\nIntent v16 = new Intent("android.net.VpnService");\nIntent v18 = v16.setPackage(p2);\nList v19 = v14.queryIntentServicesAsUser(v16, 128, this.mUserId);', 'VpnProfile v7 = Vpn.getVpnProfilePrivileged(p2);\nIntent v11 = new Intent("android.net.VpnService");\nIntent v13 = v11.setPackage(p2);\nList v14 = v9.queryIntentServicesAsUser(v11, 128, this.mUserId);']

The method isAlwaysOnVpnPackageSupported has the following similar APIs:

- API Name: setAppExclusionList(ILjava/lang/String;Ljava/util/List;)Z with Similarity Score: 0.8148500919342041
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
PersistableBundle v11 = PersistableBundleUtils.fromList(p3, PersistableBundleUtils.STRING_SERIALIZER);
byte[] v12 = PersistableBundleUtils.toDiskStableBytes(v11);
VpnProfileStore v14 = Vpn.getVpnProfileStore();
String v15 = Vpn.getVpnAppExcludedForPackage(p2);
boolean v16 = v14.put(v15, v12);

- API Name: deleteVpnProfile(Ljava/lang/String;)V with Similarity Score: 0.8134554624557495
  - Access Control Level: SYS_OR_SIG and the following code:
Object v4 = this.mVpns.get(v3);
Object v6 = Objects.requireNonNull(p1, "No package name provided");
boolean v17 = Vpn.isCurrentPreparedPackage(p1);
if (v17 == 0) { ... }
VpnProfileStore v46 = this.mVpnProfileStore;
StringBuilder v48 = new StringBuilder();
String v54 = v48.toString();
boolean v56 = LegacyVpnProfileStore.remove(v47);

