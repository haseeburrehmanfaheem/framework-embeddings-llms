This is path 1 for the API with depth 2:
public String startVpnProfile(String p1){
	int v1 = Binder.getCallingUid();
	int v5 = UserHandle.getUserId(v1);
	p0.throwIfLockdownEnabled();
	Object v7 = this.mVpns.get(v5);
	Object v9 = Objects.requireNonNull(p1, "No package name provided");
	long v11 = Binder.clearCallingIdentity();
	UserInfo v12 = this.mUserManager.getUserInfo(this.mUserId);
	boolean v13 = v12.isRestricted();
	if (v13 != 0) {
		Binder.restoreCallingIdentity(v11);
		if (v16 == 0) {
			if (p1 == 0) {
				Vpn.verifyCallingUidAndPackage(p1);
				if (0 == 0) {
					Vpn.verifyCallingUidAndPackage(0);
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v19 = Vpn.isCurrentPreparedPackage(p1);
							if (v19 != 0) {
								boolean v20 = Vpn.isCurrentPreparedPackage(p1);
								if (v20 != 0) {
									boolean v21 = p1.equals("[Legacy VPN]");
									if (v21 != 0) {
										boolean v22 = Vpn.isVpnPreConsented(this.mContext, p1, 2);
										if (v22 != 0) {
											if (0 == 0) {
												boolean v23 = 0.equals("[Legacy VPN]");
												if (v23 != 0) {
													boolean v24 = Vpn.isCurrentPreparedPackage(0);
													if (v24 == 0) {
														boolean v15 = 1;
														if (v15 == 0) {
															long v25 = Binder.clearCallingIdentity();
															boolean v27 = this.mDeps.isCallerSystem();
															if (v27 != 0) {
																VpnProfileStore v28 = Vpn.getVpnProfileStore();
																String v29 = Vpn.getProfileNameForPackage(p1);
																byte[] v30 = v28.get(v29);
																if (v30 != 0) {
																	VpnProfile v31 = VpnProfile.decode("", v30);
																	VpnProfile v26 = v31;
																	if (v26 == 0) {
																		boolean v48 = this.mVpnRunner instanceof Vpn$IkeV2VpnRunner;
																		if (v48 == 0) {
																			boolean v50 = Vpn.isIkev2VpnRunner();
																			if (v50 == 0) {
																				String v51 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																				String v49 = v51;
																				Binder.restoreCallingIdentity(v25);
																				String v8 = v49;
																				return v8;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String startVpnProfile(String p1){
	int v1 = Binder.getCallingUid();
	int v5 = UserHandle.getUserId(v1);
	p0.throwIfLockdownEnabled();
	Object v7 = this.mVpns.get(v5);
	Object v9 = Objects.requireNonNull(p1, "No package name provided");
	Vpn.enforceNotRestrictedUser();
	boolean v11 = Vpn.prepare(p1, 0, 2);
	if (v11 == 0) {
		long v12 = Binder.clearCallingIdentity();
		VpnProfile v13 = Vpn.getVpnProfilePrivileged(p1);
		if (v13 == 0) {
			Vpn.startVpnProfilePrivileged(v13, p1);
			boolean v15 = Vpn.isIkev2VpnRunner();
			if (v15 == 0) {
				String v16 = Vpn.getSessionKeyLocked();
				Binder.restoreCallingIdentity(v12);
				String v8 = v16;
				return v8;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String startVpnProfile(String p1){
	int v1 = Binder.getCallingUid();
	p0.verifyCallingUidAndPackage(p1, v1);
	int v3 = UserHandle.getUserId(v1);
	p0.throwIfLockdownEnabled();
	Object v5 = this.mVpns.get(v3);
	String v6 = v5.startVpnProfile(p1);
	return v6;
}
