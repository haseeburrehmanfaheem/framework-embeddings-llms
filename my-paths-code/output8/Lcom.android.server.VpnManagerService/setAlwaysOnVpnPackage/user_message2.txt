The method setAlwaysOnVpnPackage in the following class Lcom.android.server.VpnManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setAlwaysOnVpnPackage(int p1, String p2, boolean p3, List p4){
	byte[] v5 = LegacyVpnProfileStore.get("LOCKDOWN_VPN");
	byte[] v4 = v5;
	if (v4 == 0) {
		boolean v3 = 1;
		if (v3 == 0) {
			Object v6 = this.mVpns.get(p1);
			if (v6 != 0) {
				boolean v9 = Objects.equals(p2, this.mPackage);
				if (v9 != 0) {
					boolean v10 = Vpn.isVpnApp(this.mPackage);
					if (v10 == 0) {
						if (this.mAlwaysOn == 0) {
							if (p3 != this.mLockdown) {
								if (1 == 0) {
									boolean v11 = Vpn.isVpnApp(p2);
									if (v11 == 0) {
										if (1 == 0) {
											boolean v13 = "[Legacy VPN]".equals(p2);
											if (v13 == 0) {
												if (p4 == 0) {
													Iterator v14 = p4.iterator();
													boolean v15 = v14.hasNext();
													if (v15 == 0) {
														Object v16 = v14.next();
														boolean v17 = v16.contains(",");
														if (v17 == 0) {
															boolean v18 = v14.hasNext();
															if (v18 == 0) {
																if (p2 == 0) {
																	long v19 = Binder.clearCallingIdentity();
																	VpnProfile v20 = Vpn.getVpnProfilePrivileged(p2);
																	Binder.restoreCallingIdentity(v19);
																	if (v20 != 0) {
																		boolean v22 = Vpn.setPackageAuthorization(p2, 1);
																		if (v22 != 0) {
																			this.mAlwaysOn = 1;
																			if (this.mAlwaysOn == 0) {
																				if (p3 == 0) {
																					this.mLockdown = 0;
																					if (0 == 0) {
																						if (p4 == 0) {
																							ArrayList v23 = new ArrayList(p4);
																							List v25 = Collections.unmodifiableList(v23);
																							this.mLockdownAllowlist = v25;
																							boolean v26 = Vpn.isCurrentPreparedPackage(p2);
																							if (v26 == 0) {
																								NetworkInfo$DetailedState v27 = this.mNetworkInfo.getDetailedState();
																								Vpn.updateAlwaysOnNotification(v27);
																								Vpn.setVpnForcedLocked(this.mLockdown);
																								boolean v12 = 1;
																								if (v12 != 0) {
																									long v31 = Binder.clearCallingIdentity();
																									String v32 = Vpn.getAlwaysOnPackage();
																									this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_app", v32, this.mUserId);
																									if (this.mAlwaysOn == 0) {
																										if (this.mLockdown == 0) {
																											this.mSystemServices.settingsSecurePutIntForUser("always_on_vpn_lockdown", 1, this.mUserId);
																											String v35 = String.join(",", this.mLockdownAllowlist);
																											this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_lockdown_whitelist", v35, this.mUserId);
																											Binder.restoreCallingIdentity(v31);
																											boolean v38 = 1;
																											if (v38 != 0) {
																												if (1 == 0) {
																													if (1 == 0) {
																														VpnProfileState v40 = new VpnProfileState(v41,v43,this.mAlwaysOn,this.mLockdown);
																														int v41 = Vpn.getStateFromLegacyState(this.mLegacyState);
																														boolean v42 = Vpn.isIkev2VpnRunner();
																														if (v42 == 0) {
																															String v43 = Vpn.getSessionKeyLocked();
																															VpnProfileState v39 = v40;
																															Intent v46 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, makeDisconnectedVpnProfileState(), 0, 0, 0);
																															boolean v47 = Vpn.sendEventToVpnManagerApp(v46, this.mPackage);
																															boolean v45 = v47;
																															if (1 == 0) {
																																boolean v49 = Vpn.isIkev2VpnRunner();
																																if (v49 == 0) {
																																	String v50 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																																	String v48 = v50;
																																	VpnProfileState v52 = new VpnProfileState(v53,v55,this.mAlwaysOn,this.mLockdown);
																																	int v53 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																	boolean v54 = Vpn.isIkev2VpnRunner();
																																	if (v54 == 0) {
																																		String v55 = Vpn.getSessionKeyLocked();
																																		VpnProfileState v51 = v52;
																																		Intent v58 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, p2, v48, v51, 0, 0, 0);
																																		boolean v59 = Vpn.sendEventToVpnManagerApp(v58, p2);
																																		boolean v57 = v59;
																																		boolean v7 = 1;
																																		if (v7 != 0) {
																																			Object v61 = this.mVpns.get(p1);
																																			if (v61 != 0) {
																																				String v63 = Vpn.getAlwaysOnPackage();
																																				if (v63 != 0) {
																																					boolean v64 = Vpn.isAlwaysOnPackageSupported(v63);
																																					if (v64 != 0) {
																																						NetworkInfo v65 = Vpn.getNetworkInfo();
																																						boolean v66 = v65.isConnected();
																																						if (v66 == 0) {
																																							long v67 = Binder.clearCallingIdentity();
																																							VpnProfile v68 = Vpn.getVpnProfilePrivileged(v63);
																																							if (v68 == 0) {
																																								DeviceIdleInternal v69 = this.mDeps.getDeviceIdleInternal();
																																								int v70 = Process.myUid();
																																								v69.addPowerSaveTempWhitelistApp(v70, v63, 60000, this.mUserId, 0, 309, "vpn");
																																								Intent v72 = new Intent("android.net.VpnService");
																																								Intent v74 = v72.setPackage(v63);
																																								ComponentName v75 = this.mUserIdContext.startService(v72);
																																								if (v75 == 0) {
																																									Binder.restoreCallingIdentity(v67);
																																									boolean v62 = 1;
																																									boolean v60 = v62;
																																									if (v60 != 0) {
																																										boolean v79 = Objects.equals(0, this.mPackage);
																																										if (v79 != 0) {
																																											boolean v80 = Vpn.isVpnApp(this.mPackage);
																																											if (v80 == 0) {
																																												if (this.mAlwaysOn == 0) {
																																													if (0 != this.mLockdown) {
																																														if (1 == 0) {
																																															boolean v81 = Vpn.isVpnApp(0);
																																															if (v81 == 0) {
																																																if (1 == 0) {
																																																	boolean v83 = "[Legacy VPN]".equals(0);
																																																	if (v83 == 0) {
																																																		if (0 == 0) {
																																																			Iterator v84 = 0.iterator();
																																																			boolean v85 = v84.hasNext();
																																																			if (v85 == 0) {
																																																				Object v86 = v84.next();
																																																				boolean v87 = v86.contains(",");
																																																				if (v87 == 0) {
																																																					boolean v88 = v84.hasNext();
																																																					if (v88 == 0) {
																																																						if (0 == 0) {
																																																							long v89 = Binder.clearCallingIdentity();
																																																							VpnProfile v90 = Vpn.getVpnProfilePrivileged(0);
																																																							Binder.restoreCallingIdentity(v89);
																																																							if (v90 != 0) {
																																																								boolean v92 = Vpn.setPackageAuthorization(0, 1);
																																																								if (v92 != 0) {
																																																									this.mAlwaysOn = 1;
																																																									if (this.mAlwaysOn == 0) {
																																																										if (0 == 0) {
																																																											this.mLockdown = 0;
																																																											if (0 == 0) {
																																																												if (0 == 0) {
																																																													ArrayList v93 = new ArrayList(0);
																																																													List v95 = Collections.unmodifiableList(v93);
																																																													this.mLockdownAllowlist = v95;
																																																													boolean v96 = Vpn.isCurrentPreparedPackage(0);
																																																													if (v96 == 0) {
																																																														NetworkInfo$DetailedState v97 = this.mNetworkInfo.getDetailedState();
																																																														Vpn.updateAlwaysOnNotification(v97);
																																																														Vpn.setVpnForcedLocked(this.mLockdown);
																																																														boolean v82 = 1;
																																																														if (v82 != 0) {
																																																															long v101 = Binder.clearCallingIdentity();
																																																															String v102 = Vpn.getAlwaysOnPackage();
																																																															this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_app", v102, this.mUserId);
																																																															if (this.mAlwaysOn == 0) {
																																																																if (this.mLockdown == 0) {
																																																																	this.mSystemServices.settingsSecurePutIntForUser("always_on_vpn_lockdown", 1, this.mUserId);
																																																																	String v105 = String.join(",", this.mLockdownAllowlist);
																																																																	this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_lockdown_whitelist", v105, this.mUserId);
																																																																	Binder.restoreCallingIdentity(v101);
																																																																	boolean v108 = 1;
																																																																	if (v108 != 0) {
																																																																		if (1 == 0) {
																																																																			if (1 == 0) {
																																																																				VpnProfileState v110 = new VpnProfileState(v111,v113,this.mAlwaysOn,this.mLockdown);
																																																																				int v111 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																																																				boolean v112 = Vpn.isIkev2VpnRunner();
																																																																				if (v112 == 0) {
																																																																					String v113 = Vpn.getSessionKeyLocked();
																																																																					VpnProfileState v109 = v110;
																																																																					Intent v116 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, makeDisconnectedVpnProfileState(), 0, 0, 0);
																																																																					boolean v117 = Vpn.sendEventToVpnManagerApp(v116, this.mPackage);
																																																																					boolean v115 = v117;
																																																																					if (1 == 0) {
																																																																						boolean v119 = Vpn.isIkev2VpnRunner();
																																																																						if (v119 == 0) {
																																																																							String v120 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																																																																							String v118 = v120;
																																																																							VpnProfileState v122 = new VpnProfileState(v123,v125,this.mAlwaysOn,this.mLockdown);
																																																																							int v123 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																																																							boolean v124 = Vpn.isIkev2VpnRunner();
																																																																							if (v124 == 0) {
																																																																								String v125 = Vpn.getSessionKeyLocked();
																																																																								VpnProfileState v121 = v122;
																																																																								Intent v128 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, 0, v118, v121, 0, 0, 0);
																																																																								boolean v129 = Vpn.sendEventToVpnManagerApp(v128, 0);
																																																																								boolean v127 = v129;
																																																																								boolean v77 = 1;
																																																																								return 0;
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean setAlwaysOnVpnPackage(int p1, String p2, boolean p3, List p4){
	byte[] v4 = this.mVpnProfileStore.get("LOCKDOWN_VPN");
	if (v4 == 0) {
		boolean v3 = 1;
		if (v3 == 0) {
			Object v5 = this.mVpns.get(p1);
			if (v5 != 0) {
				boolean v8 = Objects.equals(p2, this.mPackage);
				if (v8 != 0) {
					boolean v9 = Vpn.isVpnApp(this.mPackage);
					if (v9 == 0) {
						if (this.mAlwaysOn == 0) {
							if (p3 != this.mLockdown) {
								if (1 == 0) {
									boolean v10 = Vpn.isVpnApp(p2);
									if (v10 == 0) {
										if (1 == 0) {
											boolean v11 = Vpn.setAlwaysOnPackageInternal(p2, p3, p4);
											if (v11 != 0) {
												Vpn.saveAlwaysOnPackage();
												boolean v13 = SdkLevel.isAtLeastT();
												if (v13 != 0) {
													if (1 == 0) {
														if (1 == 0) {
															VpnProfileState v14 = Vpn.makeDisconnectedVpnProfileState();
															boolean v15 = Vpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, v14, 0, 0, 0);
															if (1 == 0) {
																String v16 = Vpn.getSessionKeyLocked();
																VpnProfileState v17 = Vpn.makeVpnProfileStateLocked();
																boolean v18 = Vpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, p2, v16, v17, 0, 0, 0);
																boolean v6 = 1;
																if (v6 != 0) {
																	Object v20 = this.mVpns.get(p1);
																	if (v20 != 0) {
																		boolean v19 = 0;
																		if (v19 != 0) {
																			boolean v30 = Objects.equals(0, this.mPackage);
																			if (v30 != 0) {
																				boolean v31 = Vpn.isVpnApp(this.mPackage);
																				if (v31 == 0) {
																					if (this.mAlwaysOn == 0) {
																						if (0 != this.mLockdown) {
																							if (1 == 0) {
																								boolean v32 = Vpn.isVpnApp(0);
																								if (v32 == 0) {
																									if (1 == 0) {
																										boolean v33 = Vpn.setAlwaysOnPackageInternal(0, 0, 0);
																										if (v33 != 0) {
																											Vpn.saveAlwaysOnPackage();
																											boolean v35 = SdkLevel.isAtLeastT();
																											if (v35 != 0) {
																												if (1 == 0) {
																													if (1 == 0) {
																														VpnProfileState v36 = Vpn.makeDisconnectedVpnProfileState();
																														boolean v37 = Vpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, v36, 0, 0, 0);
																														if (1 == 0) {
																															String v38 = Vpn.getSessionKeyLocked();
																															VpnProfileState v39 = Vpn.makeVpnProfileStateLocked();
																															boolean v40 = Vpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, 0, v38, v39, 0, 0, 0);
																															boolean v28 = 1;
																															return 0;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean setAlwaysOnVpnPackage(int p1, String p2, boolean p3, List p4){
	boolean v3 = p0.isLockdownVpnEnabled();
	if (v3 == 0) {
		Object v4 = this.mVpns.get(p1);
		if (v4 != 0) {
			StringBuilder v5 = new StringBuilder();
			StringBuilder v7 = v5.append("User ");
			StringBuilder v8 = v5.append(p1);
			StringBuilder v9 = v5.append(" has no Vpn configuration");
			String v10 = v5.toString();
			VpnManagerService.logw(v10);
			return 0;
		}
	}
}

and the following sink code:
['byte[] v5 = LegacyVpnProfileStore.get("LOCKDOWN_VPN");\nint var1 = this.mNative.getLightColor(par1, par2);\nObject v6 = this.mVpns.get(p1);\nboolean v9 = Objects.equals(p2, this.mPackage);\nboolean v10 = Vpn.isVpnApp(this.mPackage);\nVpnProfileState v40 = new VpnProfileState(v41,v43,this.mAlwaysOn,this.mLockdown);\nboolean v22 = Vpn.setPackageAuthorization(p2, 1);\nthis.mAlwaysOn = 1;\nVpn.sendEventToVpnManagerApp(v46, this.mPackage);', 'byte[] v4 = this.mVpnProfileStore.get("LOCKDOWN_VPN");\nboolean v11 = Vpn.setAlwaysOnPackageInternal(p2, p3, p4);\nVpn.saveAlwaysOnPackage();\nVpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, v14, 0, 0, 0);', 'boolean v3 = p0.isLockdownVpnEnabled();\nObject v4 = this.mVpns.get(p1);\nStringBuilder v5 = new StringBuilder();\nVpnManagerService.logw(v10);']

The method setAlwaysOnVpnPackage has the following similar APIs:

- API Name: updateLockdownVpn()Z in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8432475924491882, Code:
byte[] v6 = LegacyVpnProfileStore.get("LOCKDOWN_VPN");
String v11 = new String(v7);
StringBuilder v13 = v10.append("VPN_");
StringBuilder v16 = v13.append(v11);
VpnProfile v22 = VpnProfile.decode(v11, v18);
LockdownVpnTracker v26 = new LockdownVpnTracker(this.mContext, this.mHandler, v25, v22);
this.mLockdownTracker = v26;
  - Similarity: 0.8418439030647278, Code:
byte[] v5 = LegacyVpnProfileStore.get("LOCKDOWN_VPN");
String v8 = new String(v6);
StringBuilder v12 = v10.append("VPN_");
StringBuilder v13 = v10.append(v8);
VpnProfile v17 = VpnProfile.decode(v8, v15);
LockdownVpnTracker v22 = new LockdownVpnTracker(this.mContext, this.mHandler, v21, v17);
this.mLockdownTracker = v22;
  - Similarity: 0.8268843293190002, Code:
byte[] v5 = this.mVpnProfileStore.get("LOCKDOWN_VPN");
String v6 = new String(v5);
StringBuilder v10 = v8.append("VPN_");
StringBuilder v11 = v8.append(v6);
VpnProfile v14 = VpnProfile.decode(v6, v13);
  - Access Control Level: SYS_OR_SIG

- API Name: getProvisionedVpnProfileState(Ljava/lang/String;)Landroid/net/VpnProfileState; in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8329145312309265, Code:
boolean v10 = Vpn.isCurrentIkev2VpnLocked(p1);
VpnProfileState v11 = Vpn.makeVpnProfileStateLocked();
VpnProfileState v7 = v11;
return v7;
  - Access Control Level: NONE

- API Name: deleteVpnProfile(Ljava/lang/String;)V in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8271689414978027, Code:
Object v4 = this.mVpns.get(v3);
Object v6 = Objects.requireNonNull(p1, "No package name provided");
boolean v17 = Vpn.isCurrentPreparedPackage(p1);
if (v17 == 0) { ... }
VpnProfileStore v46 = this.mVpnProfileStore;
StringBuilder v48 = new StringBuilder();
String v54 = v48.toString();
boolean v56 = LegacyVpnProfileStore.remove(v47);
  - Access Control Level: SYS_OR_SIG

- API Name: getLegacyVpnInfo(I)Lcom/android/internal/net/LegacyVpnInfo; in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8208727240562439, Code:
Object v2 = this.mVpns.get(p1);
LegacyVpnInfo v3 = v2.getLegacyVpnInfo();
return v3;
  - Access Control Level: SYS_OR_SIG

- API Name: startVpnProfile(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8074371814727783, Code:
Vpn.prepare(p1, 0, 2)
VpnProfile v13 = Vpn.getVpnProfilePrivileged(p1)
Vpn.startVpnProfilePrivileged(v13, p1)
String v16 = Vpn.getSessionKeyLocked()
return v8;
  - Access Control Level: SYS_OR_SIG

