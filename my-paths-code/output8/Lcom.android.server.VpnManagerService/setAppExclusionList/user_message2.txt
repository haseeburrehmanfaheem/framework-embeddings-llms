The method setAppExclusionList in the following class Lcom.android.server.VpnManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setAppExclusionList(int p1, String p2, List p3){
	Object v3 = this.mVpns.get(p1);
	if (v3 == 0) {
		long v6 = Binder.clearCallingIdentity();
		UserInfo v7 = this.mUserManager.getUserInfo(this.mUserId);
		boolean v8 = v7.isRestricted();
		if (v8 != 0) {
			Binder.restoreCallingIdentity(v6);
			PersistableBundle v11 = PersistableBundleUtils.fromList(p3, PersistableBundleUtils.STRING_SERIALIZER);
			byte[] v12 = PersistableBundleUtils.toDiskStableBytes(v11);
			long v13 = Binder.clearCallingIdentity();
			VpnProfileStore v14 = Vpn.getVpnProfileStore();
			String v15 = Vpn.getVpnAppExcludedForPackage(p2);
			boolean v16 = v14.put(v15, v12);
			Binder.restoreCallingIdentity(v13);
			boolean v10 = 1;
			if (v10 != 0) {
				boolean v4 = 0;
				return v4;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean setAppExclusionList(int p1, String p2, List p3){
	Object v3 = this.mVpns.get(p1);
	if (v3 == 0) {
		Vpn.enforceNotRestrictedUser();
		boolean v6 = Vpn.storeAppExclusionList(p2, p3);
		if (v6 != 0) {
			boolean v4 = 0;
			return v4;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean setAppExclusionList(int p1, String p2, List p3){
	Object v3 = this.mVpns.get(p1);
	if (v3 == 0) {
		boolean v4 = v3.setAppExclusionList(p2, p3);
		return v4;
	}
}

and the following sink code:
['Object v3 = this.mVpns.get(p1);\nPersistableBundle v11 = PersistableBundleUtils.fromList(p3, PersistableBundleUtils.STRING_SERIALIZER);\nbyte[] v12 = PersistableBundleUtils.toDiskStableBytes(v11);\nVpnProfileStore v14 = Vpn.getVpnProfileStore();\nString v15 = Vpn.getVpnAppExcludedForPackage(p2);\nboolean v16 = v14.put(v15, v12);', 'Vpn.enforceNotRestrictedUser();\nboolean v6 = Vpn.storeAppExclusionList(p2, p3);', 'Object v3 = this.mVpns.get(p1);\nboolean v4 = v3.setAppExclusionList(p2, p3);']

The method setAppExclusionList has the following similar APIs:

- API Name: deleteVpnProfile(Ljava/lang/String;)V in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8725978136062622, Code:
Object v4 = this.mVpns.get(v3);
Object v6 = Objects.requireNonNull(p1, "No package name provided");
boolean v17 = Vpn.isCurrentPreparedPackage(p1);
if (v17 == 0) { ... }
VpnProfileStore v46 = this.mVpnProfileStore;
StringBuilder v48 = new StringBuilder();
String v54 = v48.toString();
boolean v56 = LegacyVpnProfileStore.remove(v47);
  - Access Control Level: SYS_OR_SIG

- API Name: isAlwaysOnVpnPackageSupported(ILjava/lang/String;)Z in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8148500323295593, Code:
Object v3 = this.mVpns.get(p1);
String v10 = Vpn.getProfileNameForPackage(p2);
byte[] v11 = v9.get(v10);
Intent v16 = new Intent("android.net.VpnService");
Intent v18 = v16.setPackage(p2);
List v19 = v14.queryIntentServicesAsUser(v16, 128, this.mUserId);
  - Access Control Level: SYS_OR_SIG

- API Name: updateLockdownVpn()Z in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8145128488540649, Code:
byte[] v5 = this.mVpnProfileStore.get("LOCKDOWN_VPN");
String v6 = new String(v5);
StringBuilder v10 = v8.append("VPN_");
StringBuilder v11 = v8.append(v6);
VpnProfile v14 = VpnProfile.decode(v6, v13);
  - Access Control Level: SYS_OR_SIG

- API Name: getLegacyVpnInfo(I)Lcom/android/internal/net/LegacyVpnInfo; in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8082054257392883, Code:
Object v2 = this.mVpns.get(p1);
LegacyVpnInfo v3 = v2.getLegacyVpnInfo();
return v3;
  - Access Control Level: SYS_OR_SIG

- API Name: setAlwaysOnVpnPackage(ILjava/lang/String;ZLjava/util/List;)Z in the following Class: Lcom.android.server.VpnManagerService with the following sink code entries:
  - Similarity: 0.8032130002975464, Code:
byte[] v5 = LegacyVpnProfileStore.get("LOCKDOWN_VPN");
int var1 = this.mNative.getLightColor(par1, par2);
Object v6 = this.mVpns.get(p1);
boolean v9 = Objects.equals(p2, this.mPackage);
boolean v10 = Vpn.isVpnApp(this.mPackage);
VpnProfileState v40 = new VpnProfileState(v41,v43,this.mAlwaysOn,this.mLockdown);
boolean v22 = Vpn.setPackageAuthorization(p2, 1);
this.mAlwaysOn = 1;
Vpn.sendEventToVpnManagerApp(v46, this.mPackage);
  - Access Control Level: SYS_OR_SIG

