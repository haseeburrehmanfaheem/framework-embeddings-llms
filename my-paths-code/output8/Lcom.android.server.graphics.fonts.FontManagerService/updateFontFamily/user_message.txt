This is path 1 for the API with depth 2:
public int updateFontFamily(List p1, int p2){
	if (this.mUpdatableFontDir == 0) {
		if (p2 == -1) {
			int v6 = this.mConfigVersion;
			if (v6 != p2) {
				Iterator v8 = p1.iterator();
				boolean v9 = v8.hasNext();
				if (v9 == 0) {
					ArrayMap v10 = new ArrayMap(this.mFontFileInfoMap);
					PersistentSystemFontConfig$Config v12 = UpdatableFontDir.readPersistentConfig();
					HashMap v13 = new HashMap();
					int v15 = PersistentSystemFontConfig$Config.fontFamilies.size();
					if (0 >= v15) {
						Iterator v16 = p1.iterator();
						boolean v17 = v16.hasNext();
						if (v17 == 0) {
							Collection v18 = v13.values();
							Iterator v19 = v18.iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = v19.next();
								FontConfig$FontFamily v22 = UpdatableFontDir.resolveFontFiles(v21);
								if (v22 == 0) {
									boolean v23 = v19.hasNext();
									if (v23 == 0) {
										Object v24 = this.mCurrentTimeSupplier.get();
										long v25 = v24.longValue();
										this.mLastModifiedMillis = v25;
										PersistentSystemFontConfig$Config v26 = new PersistentSystemFontConfig$Config();
										PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
										Collection v28 = this.mFontFileInfoMap.values();
										Iterator v29 = v28.iterator();
										boolean v30 = v29.hasNext();
										if (v30 == 0) {
											Collection v31 = v13.values();
											boolean v32 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v31);
											UpdatableFontDir.writePersistentConfig(v26);
											this.mConfigVersion = (this.mConfigVersion + 1);
											FontConfig v35 = FontManagerService.getSystemFontConfig();
											SharedMemory v36 = FontManagerService.serializeFontMap(v35);
											if (v36 != 0) {
												SharedMemory v37 = FontManagerService.serializeSystemServerFontMap();
												FontManagerService.setSerializedFontMap(v36);
												if (p1 != 0) {
													Iterator v40 = p1.iterator();
													boolean v41 = v40.hasNext();
													if (v41 == 0) {
														Object v42 = v40.next();
														if (v42 != 0) {
															ParcelFileDescriptor v43 = this.mFd;
															if (v43 != 0) {
																boolean v44 = v40.hasNext();
																if (v44 == 0) {
																	return 0;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int updateFontFamily(List p1, int p2){
	if (this.mUpdatableFontDir == 0) {
		if (p2 == -1) {
			int v6 = this.mUpdatableFontDir.getConfigVersion();
			if (v6 != p2) {
				this.mUpdatableFontDir.update(p1);
				FontManagerService.updateSerializedFontMap();
				if (p1 != 0) {
					Iterator v10 = p1.iterator();
					boolean v11 = v10.hasNext();
					if (v11 == 0) {
						Object v12 = v10.next();
						if (v12 != 0) {
							ParcelFileDescriptor v13 = v12.getFd();
							if (v13 != 0) {
								boolean v14 = v10.hasNext();
								if (v14 == 0) {
									return 0;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int updateFontFamily(List p1, int p2){
	p0.update(p2, p1);
	FontManagerService.closeFileDescriptors(p1);
	return 0;
}
