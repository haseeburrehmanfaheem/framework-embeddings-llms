The method openSession in the following class Lcom.android.server.lights.LightsService$LightsManagerBinderService has the following code snippet:

This is path 1 for the API with depth 1:
public void openSession(IBinder p1, int p2){
	Object v3 = Preconditions.checkNotNull(p1);
	int v5 = this.mSessions.size();
	if (0 >= v5) {
		Object v6 = this.mSessions.get(0);
		boolean v7 = p1.equals(LightsService$LightsManagerBinderService$Session.mToken);
		if (v7 == 0) {
			int v8 = this.mSessions.size();
			if ((0 + 1) >= v8) {
				Object v9 = this.mSessions.get((0 + 1));
				boolean v10 = p1.equals(LightsService$LightsManagerBinderService$Session.mToken);
				if (v10 == 0) {
					Object v11 = this.mSessions.get((0 + 1));
					LightsService$LightsManagerBinderService$Session v4 = v11;
					if (v4 != 0) {
						Preconditions.checkState(1, "already registered");
						LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0 v13 = new LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0(p0,p1);
						p1.linkToDeath(v13, 0);
						LightsService$LightsManagerBinderService$Session v16 = new LightsService$LightsManagerBinderService$Session(p0,p1,p2);
						boolean v18 = this.mSessions.add(v16);
						Collections.sort(this.mSessions);
						return;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public void openSession(IBinder p1, int p2){
	Object v3 = Preconditions.checkNotNull(p1);
	LightsService$LightsManagerBinderService$Session v4 = p0.getSessionLocked(p1);
	if (v4 != 0) {
		Preconditions.checkState(1, "already registered");
		LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0 v6 = new LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0(p0,p1);
		p1.linkToDeath(v6, 0);
		LightsService$LightsManagerBinderService$Session v9 = new LightsService$LightsManagerBinderService$Session(p0,p1,p2);
		boolean v11 = this.mSessions.add(v9);
		Collections.sort(this.mSessions);
		return;
	}
}


This is path 3 for the API with depth 1:
public void openSession(IBinder p1, int p2){
	Object v3 = Preconditions.checkNotNull(p1);
	int v5 = this.mSessions.size();
	if (0 >= v5) {
		Object v6 = this.mSessions.get(0);
		boolean v7 = p1.equals(LightsService$LightsManagerBinderService$Session.mToken);
		if (v7 == 0) {
			int v8 = this.mSessions.size();
			if ((0 + 1) >= v8) {
				LightsService$LightsManagerBinderService$Session v4 = 0;
				if (v4 != 0) {
					Preconditions.checkState(1, "already registered");
					LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0 v10 = new LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0(p0,p1);
					p1.linkToDeath(v10, 0);
					LightsService$LightsManagerBinderService$Session v13 = new LightsService$LightsManagerBinderService$Session(p0,p1,p2);
					boolean v15 = this.mSessions.add(v13);
					Collections.sort(this.mSessions);
					return;
				}
			}
		}
	}
}

and the following sink code:
['LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0 v13 = new LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0(p0,p1);\np1.linkToDeath(v13, 0);\nLightsService$LightsManagerBinderService$Session v16 = new LightsService$LightsManagerBinderService$Session(p0,p1,p2);\nboolean v18 = this.mSessions.add(v16);', 'LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0 v6 = new LightsService$LightsManagerBinderService$$ExternalSyntheticLambda0(p0,p1);\np1.linkToDeath(v6, 0);\nLightsService$LightsManagerBinderService$Session v9 = new LightsService$LightsManagerBinderService$Session(p0,p1,p2);\nboolean v11 = this.mSessions.add(v9);']

The method openSession has the following similar APIs:

- API Name: setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V in the following Class: Lcom.android.server.display.DisplayManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7852911949157715, Code:
DisplayManagerService$BinderService$$ExternalSyntheticLambda0 v9 = new DisplayManagerService$BinderService$$ExternalSyntheticLambda0(p0,p1,p2,p3);
v8.forEachLocked(v9);
  - Access Control Level: SYS_OR_SIG

- API Name: suppressToggleSensorPrivacyReminders(IILandroid/os/IBinder;Z)V in the following Class: Lcom.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl with the following sink code entries:
  - Similarity: 0.7410399317741394, Code:
SensorPrivacyService$SensorPrivacyHandler$$ExternalSyntheticLambda0 v9 = new SensorPrivacyService$SensorPrivacyHandler$$ExternalSyntheticLambda0();
Message v12 = PooledLambda.obtainMessage(v9, v11, v4, p3);
boolean v13 = SensorPrivacyService$SensorPrivacyHandler.sendMessage(v12);
  - Access Control Level: NORMAL

- API Name: registerAuthenticators(Ljava/util/List;)V in the following Class: Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper with the following sink code entries:
  - Similarity: 0.7360379099845886, Code:
IrisService$IrisServiceWrapper$$ExternalSyntheticLambda0 v9 = new IrisService$IrisServiceWrapper$$ExternalSyntheticLambda0(p0,p1);
boolean v11 = v6.post(v9);
  - Access Control Level: NORMAL

- API Name: isUserForeground(I)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7290382385253906, Code:
UserManagerService$$ExternalSyntheticLambda0 v3 = new UserManagerService$$ExternalSyntheticLambda0();
Object v5 = Binder.withCleanCallingIdentity(v3);
  - Access Control Level: SYS_OR_SIG

- API Name: setToggleSensorPrivacy(IIIZ)V in the following Class: Lcom.android.server.sensorprivacy.SensorPrivacyService$SensorPrivacyServiceImpl with the following sink code entries:
  - Similarity: 0.7275010347366333, Code:
SensorPrivacyService$SensorPrivacyServiceImpl$$ExternalSyntheticLambda3 v18 = new SensorPrivacyService$SensorPrivacyServiceImpl$$ExternalSyntheticLambda3(SensorPrivacyService$SensorPrivacyServiceImpl,1,p1,p3,v17,p4,p2);
this.mSensorPrivacyStateController.atomic(v18);
  - Access Control Level: SYS_OR_SIG

