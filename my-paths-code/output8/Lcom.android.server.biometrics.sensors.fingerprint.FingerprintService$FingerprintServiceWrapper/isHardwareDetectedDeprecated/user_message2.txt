The method isHardwareDetectedDeprecated in the following class Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p1);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, v3);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(v1, p1, p2);
			if (v15 != 0) {
				if (0 == 0) {
					boolean v16 = Utils.isForeground(v1, v2);
					if (v16 != 0) {
						boolean v5 = 1;
						boolean v4 = v5;
						if (v4 != 0) {
							long v17 = Binder.clearCallingIdentity();
							List v20 = FingerprintService.getSensorProperties();
							boolean v21 = v20.isEmpty();
							if (v21 == 0) {
								Object v22 = v20.get(0);
								Iterator v23 = this.mServiceProviders.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									boolean v26 = v25.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v26 == 0) {
										boolean v27 = v23.hasNext();
										if (v27 == 0) {
											Object v28 = v23.next();
											boolean v29 = v28.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
											if (v29 == 0) {
												Pair v30 = new Pair(v31,v28);
												Integer v31 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
												Pair v19 = v30;
												Pair v18 = v19;
												if (v18 != 0) {
													int v33 = Pair.first.intValue();
													boolean v34 = Pair.second.isHardwareDetected(v33);
													Binder.restoreCallingIdentity(v17);
													return v34;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	boolean v5 = this.this$0.canUseFingerprint(p1, p2, 0, v1, v2, v3);
	boolean v4 = v5;
	if (v4 != 0) {
		long v6 = Binder.clearCallingIdentity();
		Pair v8 = this.this$0.getSingleProvider();
		Pair v7 = v8;
		if (v7 != 0) {
			int v9 = Pair.first.intValue();
			boolean v10 = Pair.second.isHardwareDetected(v9);
			Binder.restoreCallingIdentity(v6);
			return v10;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p1, p2, 0, v1, v2, v3);
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		Pair v6 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
		if (v6 != 0) {
			int v7 = Pair.first.intValue();
			boolean v8 = Pair.second.isHardwareDetected(v7);
			Binder.restoreCallingIdentity(v5);
			return v8;
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nint v2 = Binder.getCallingPid();\nint v3 = UserHandle.getCallingUserId();\nboolean v5 = this.this$0.canUseFingerprint(p1, p2, 0, v1, v2, v3);\nlong v6 = Binder.clearCallingIdentity();\nPair v8 = this.this$0.getSingleProvider();\nint v9 = Pair.first.intValue();\nboolean v10 = Pair.second.isHardwareDetected(v9);\nBinder.restoreCallingIdentity(v6);\nreturn v10;', 'int v1 = Binder.getCallingUid();\nint v2 = Binder.getCallingPid();\nint v3 = UserHandle.getCallingUserId();\nboolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p1, p2, 0, v1, v2, v3);\nlong v5 = Binder.clearCallingIdentity();\nPair v6 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);\nint v7 = Pair.first.intValue();\nboolean v8 = Pair.second.isHardwareDetected(v7);\nBinder.restoreCallingIdentity(v5);\nreturn v8;', 'int v1 = Binder.getCallingUid();\nint v2 = Binder.getCallingPid();\nint v3 = UserHandle.getCallingUserId();\nboolean v12 = Utils.isKeyguard(v11, p1);\nboolean v14 = Utils.isCurrentUserOrProfile(v13, v3);\nboolean v15 = FingerprintService.checkAppOps(v1, p1, p2);\nlong v17 = Binder.clearCallingIdentity();\nList v20 = FingerprintService.getSensorProperties();\nObject v22 = v20.get(0);\nIterator v23 = this.mServiceProviders.iterator();\nboolean v26 = v25.containsSensor(FingerprintSensorPropertiesInternal.sensorId);\nPair v30 = new Pair(v31,v28);\nInteger v31 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);\nint v33 = Pair.first.intValue();\nboolean v34 = Pair.second.isHardwareDetected(v33);\nBinder.restoreCallingIdentity(v17);\nreturn v34;']

The method isHardwareDetectedDeprecated has the following similar APIs:

- API Name: cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;Ljava/lang/String;J)V in the following Class: Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper with the following sink code entries:
  - Similarity: 0.8518752455711365, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v3 = UserHandle.getCallingUserId();
Pair v23 = new Pair(v24,v21);
Integer v24 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
if (v11 != 0) {
    int v26 = Pair.first.intValue();
    Pair.second.cancelAuthentication(v26, p1, p4);
    return;
  - Access Control Level: SYS_OR_SIG

- API Name: createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8173627853393555, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
long v6 = Binder.clearCallingIdentity();
Binder.restoreCallingIdentity(v6);
  - Access Control Level: NONE

- API Name: notifyError(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;I)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8047233819961548, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v4 = this.this$0.resolveCallingUserId(v2, v1, p4, "notifyError");
TvInteractiveAppManagerService$SessionState v8 = this.this$0.getSessionStateLocked(p1, v1, v3);
ITvInteractiveAppSession v10 = this.this$0.getSessionLocked(v7);
v9.notifyError(p2, p3);
  - Similarity: 0.7983807325363159, Code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
int v3 = TvInteractiveAppManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, "notifyError");
TvInteractiveAppManagerService$SessionState v6 = TvInteractiveAppManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3);
ITvInteractiveAppSession v7 = TvInteractiveAppManagerService.-$$Nest$mgetSessionLocked(this.this$0, v6);
v7.notifyError(p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo; in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8036126494407654, Code:
int v1 = Binder.getCallingPid();
int v2 = Binder.getCallingUid();
int v4 = this.this$0.resolveCallingUserId(v1, v2, p2, "getTvInputInfo");
int v3 = v4;
long v5 = Binder.clearCallingIdentity();
Object v6 = this.mLock;
TvInputManagerService$UserState v8 = this.this$0.getOrCreateUserStateLocked(v3);
  - Similarity: 0.8031834363937378, Code:
int v1 = Binder.getCallingPid();
int v2 = Binder.getCallingUid();
int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, "getTvInputInfo");
long v4 = Binder.clearCallingIdentity();
Object v5 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);
  - Access Control Level: NONE

- API Name: generateCinematicEffect(Landroid/app/wallpapereffectsgeneration/CinematicEffectRequest;Landroid/app/wallpapereffectsgeneration/ICinematicEffectListener;)V in the following Class: Lcom.android.server.wallpapereffectsgeneration.WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub with the following sink code entries:
  - Similarity: 0.7982743978500366, Code:
int v15 = Binder.getCallingUid();
boolean v16 = v14.isCallerRecents(v15);
v1.accept(v20);
Binder.restoreCallingIdentity(v18);
  - Access Control Level: SYS_OR_SIG

