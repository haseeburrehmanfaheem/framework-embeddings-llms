This is path 1 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p1);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, v3);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(v1, p1, p2);
			if (v15 != 0) {
				if (0 == 0) {
					boolean v16 = Utils.isForeground(v1, v2);
					if (v16 != 0) {
						boolean v5 = 1;
						boolean v4 = v5;
						if (v4 != 0) {
							long v17 = Binder.clearCallingIdentity();
							List v20 = FingerprintService.getSensorProperties();
							boolean v21 = v20.isEmpty();
							if (v21 == 0) {
								Object v22 = v20.get(0);
								Iterator v23 = this.mServiceProviders.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									boolean v26 = v25.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v26 == 0) {
										boolean v27 = v23.hasNext();
										if (v27 == 0) {
											Object v28 = v23.next();
											boolean v29 = v28.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
											if (v29 == 0) {
												Pair v30 = new Pair(v31,v28);
												Integer v31 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
												Pair v19 = v30;
												Pair v18 = v19;
												if (v18 != 0) {
													int v33 = Pair.first.intValue();
													boolean v34 = Pair.second.isHardwareDetected(v33);
													Binder.restoreCallingIdentity(v17);
													return v34;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	boolean v5 = this.this$0.canUseFingerprint(p1, p2, 0, v1, v2, v3);
	boolean v4 = v5;
	if (v4 != 0) {
		long v6 = Binder.clearCallingIdentity();
		Pair v8 = this.this$0.getSingleProvider();
		Pair v7 = v8;
		if (v7 != 0) {
			int v9 = Pair.first.intValue();
			boolean v10 = Pair.second.isHardwareDetected(v9);
			Binder.restoreCallingIdentity(v6);
			return v10;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p1, p2, 0, v1, v2, v3);
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		Pair v6 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
		if (v6 != 0) {
			int v7 = Pair.first.intValue();
			boolean v8 = Pair.second.isHardwareDetected(v7);
			Binder.restoreCallingIdentity(v5);
			return v8;
		}
	}
}
