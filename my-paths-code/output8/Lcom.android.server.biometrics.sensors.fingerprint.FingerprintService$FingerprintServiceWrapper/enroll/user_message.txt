This is path 1 for the API with depth 2:
public long enroll(IBinder p1, byte[] p2, int p3, IFingerprintServiceReceiver p4, String p5, int p6){
	List v5 = FingerprintService.getSensorProperties();
	boolean v6 = v5.isEmpty();
	if (v6 == 0) {
		Object v7 = v5.get(0);
		Iterator v8 = this.mServiceProviders.iterator();
		boolean v9 = v8.hasNext();
		if (v9 == 0) {
			Object v10 = v8.next();
			boolean v11 = v10.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
			if (v11 == 0) {
				boolean v12 = v8.hasNext();
				if (v12 == 0) {
					Object v13 = v8.next();
					boolean v14 = v13.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
					if (v14 == 0) {
						Pair v15 = new Pair(v16,v13);
						Integer v16 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
						Pair v4 = v15;
						Pair v3 = v4;
						if (v3 != 0) {
							int v18 = Pair.first.intValue();
							long v19 = Pair.second.scheduleEnroll(v18, p1, p2, p3, p4, p5, p6);
							return v19;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long enroll(IBinder p1, byte[] p2, int p3, IFingerprintServiceReceiver p4, String p5, int p6){
	Pair v4 = this.this$0.getSingleProvider();
	Pair v3 = v4;
	if (v3 != 0) {
		int v5 = Pair.first.intValue();
		long v6 = Pair.second.scheduleEnroll(v5, p1, p2, p3, p4, p5, p6);
		return v6;
	}
}


This is path 3 for the API with depth 0:
public long enroll(IBinder p1, byte[] p2, int p3, IFingerprintServiceReceiver p4, String p5, int p6){
	Pair v3 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
	if (v3 != 0) {
		int v4 = Pair.first.intValue();
		long v5 = Pair.second.scheduleEnroll(v4, p1, p2, p3, p4, p5, p6);
		return v5;
	}
}
