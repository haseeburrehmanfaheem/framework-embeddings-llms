The method getPrimaryClip in the following class Lcom.android.server.clipboard.ClipboardService$ClipboardImpl has the following code snippet:

This is path 1 for the API with depth 2:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v3 = ClipboardService.getIntendingUserId(p1, p3);
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getAppId(v4);
	int v6 = UserHandle.getUid(v3, v5);
	int v2 = v6;
	int v1 = v2;
	int v7 = UserHandle.getUserId(v1);
	boolean v10 = ClipboardService.clipboardAccessAllowed(29, p1, p2, v1, v7, 1);
	boolean v9 = v10;
	boolean v8 = v9;
	if (v8 == 0) {
		long v13 = Binder.clearCallingIdentity();
		Context v14 = ClipboardService.getContext();
		Object v15 = v14.getSystemService(KeyguardManage.class);
		if (v15 == 0) {
			boolean v16 = v15.isDeviceLocked(v7);
			if (v16 == 0) {
				Binder.restoreCallingIdentity(v13);
				boolean v12 = 1;
				boolean v11 = v12;
				if (v11 == 0) {
					Object v18 = ClipboardService.-$$Nest$fgetmLock(this.this$0);
					Binder.restoreCallingIdentity(v23);
					int v27 = UserHandle.getUserId(v1);
					ClipboardService$PerUserClipboard v28 = ClipboardService.getClipboardLocked(v27);
					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
						boolean v29 = ClipboardService$PerUserClipboard.activePermissionOwners.contains(p1);
						if (v29 != 0) {
							int v30 = ClipboardService$PerUserClipboard.primaryClip.getItemCount();
							if (0 >= v30) {
								ClipData$Item v31 = ClipboardService$PerUserClipboard.primaryClip.getItemAt(0);
								int v32 = UserHandle.getUserId(v1);
								if ((0 + 1) >= v30) {
									boolean v34 = ClipboardService$PerUserClipboard.activePermissionOwners.add(p1);
									Object v37 = this.mClipboards.get(v7);
									if (v37 != 0) {
										ClipboardService$PerUserClipboard v38 = new ClipboardService$PerUserClipboard(ClipboardService,v7);
										this.mClipboards.put(v7, v38);
										ClipboardService$PerUserClipboard v36 = v37;
										ClipboardService$PerUserClipboard v35 = v36;
										if (v46 == 0) {
											boolean v47 = ClipboardService.isDefaultIme(v7, p1);
											if (v47 == 0) {
												if (this.mContentCaptureInternal == 0) {
													boolean v48 = this.mContentCaptureInternal.isContentCaptureServiceForUser(v1, v7);
													if (v48 == 0) {
														if (this.mAutofillInternal == 0) {
															boolean v49 = this.mAutofillInternal.isAugmentedAutofillServiceForUser(v1, v7);
															if (v49 == 0) {
																if (ClipboardService$PerUserClipboard.primaryClip != 0) {
																	ClipData$Item v52 = ClipboardService$PerUserClipboard.primaryClip.getItemAt(0);
																	if (v52 != 0) {
																		boolean v53 = ClipboardService.isText(ClipboardService$PerUserClipboard.primaryClip);
																		if (v53 != 0) {
																			if (ClipboardService$PerUserClipboard.mTextClassifier != 0) {
																				boolean v54 = this.mWm.isUidFocused(v1);
																				if (v54 != 0) {
																					boolean v55 = ClipboardService$PerUserClipboard.mNotifiedTextClassifierUids.get(v1);
																					if (v55 == 0) {
																						if (ClipboardService$PerUserClipboard.primaryClip == 0) {
																							long v57 = Binder.clearCallingIdentity();
																							String v59 = DeviceConfig.getProperty("clipboard", "auto_clear_enabled");
																							if (v59 == 0) {
																								boolean v60 = Boolean.parseBoolean(v59);
																								boolean v58 = v60;
																								if (v58 == 0) {
																									Integer v61 = Integer.valueOf(p3);
																									this.mClipboardClearHandler.removeEqualMessages(101, v61);
																									Integer v63 = Integer.valueOf(p3);
																									Message v64 = Message.obtain(this.mClipboardClearHandler, 101, p3, v1, v63);
																									long v66 = DeviceConfig.getLong("clipboard", "auto_clear_timeout", 3600000);
																									long v65 = v66;
																									boolean v67 = this.mClipboardClearHandler.sendMessageDelayed(v64, v65);
																									Binder.restoreCallingIdentity(v57);
																									return ClipboardService$PerUserClipboard.primaryClip;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v2 = this.this$0.getIntendingUid(p1, p3);
	int v1 = v2;
	int v3 = UserHandle.getUserId(v1);
	boolean v5 = this.this$0.clipboardAccessAllowed(29, p1, p2, v1, v3);
	boolean v4 = v5;
	if (v4 == 0) {
		boolean v7 = this.this$0.isDeviceLocked(v3);
		boolean v6 = v7;
		if (v6 == 0) {
			Object v8 = this.mLock;
			this.this$0.addActiveOwnerLocked(v1, p1);
			ClipboardService$PerUserClipboard v12 = this.this$0.getClipboardLocked(v3);
			ClipboardService$PerUserClipboard v11 = v12;
			this.this$0.showAccessNotificationLocked(p1, v1, v3, v11);
			this.this$0.notifyTextClassifierLocked(v11, p1, v1);
			if (ClipboardService$PerUserClipboard.primaryClip == 0) {
				long v18 = Binder.clearCallingIdentity();
				boolean v19 = DeviceConfig.getBoolean("clipboard", "auto_clear_enabled", 1);
				if (v19 == 0) {
					Integer v20 = Integer.valueOf(p3);
					this.mClipboardClearHandler.removeEqualMessages(101, v20);
					Integer v22 = Integer.valueOf(p3);
					Message v23 = Message.obtain(this.mClipboardClearHandler, 101, p3, v1, v22);
					long v24 = ClipboardService$ClipboardImpl.getTimeoutForAutoClear();
					boolean v25 = this.mClipboardClearHandler.sendMessageDelayed(v23, v24);
					Binder.restoreCallingIdentity(v18);
					return ClipboardService$PerUserClipboard.primaryClip;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v1 = ClipboardService.-$$Nest$mgetIntendingUid(this.this$0, p1, p3);
	int v2 = UserHandle.getUserId(v1);
	boolean v3 = ClipboardService.-$$Nest$mclipboardAccessAllowed(this.this$0, 29, p1, p2, v1, v2);
	if (v3 == 0) {
		boolean v4 = ClipboardService.-$$Nest$misDeviceLocked(this.this$0, v2);
		if (v4 == 0) {
			Object v5 = ClipboardService.-$$Nest$fgetmLock(this.this$0);
			ClipboardService.-$$Nest$maddActiveOwnerLocked(this.this$0, v1, p1);
			ClipboardService$PerUserClipboard v7 = ClipboardService.-$$Nest$mgetClipboardLocked(this.this$0, v2);
			ClipboardService.-$$Nest$mshowAccessNotificationLocked(this.this$0, p1, v1, v2, v7);
			ClipboardService.-$$Nest$mnotifyTextClassifierLocked(this.this$0, v7, p1, v1);
			if (ClipboardService$PerUserClipboard.primaryClip == 0) {
				p0.scheduleAutoClear(p3, v1);
				return ClipboardService$PerUserClipboard.primaryClip;
			}
		}
	}
}

and the following sink code:
['int v3 = ClipboardService.getIntendingUserId(p1, p3);\nint v4 = Binder.getCallingUid();\nboolean v10 = ClipboardService.clipboardAccessAllowed(29, p1, p2, v1, v7, 1);\nClipboardService$PerUserClipboard v38 = new ClipboardService$PerUserClipboard(ClipboardService,v7);', 'int v2 = this.this$0.getIntendingUid(p1, p3);\nboolean v5 = this.this$0.clipboardAccessAllowed(29, p1, p2, v1, v3);', 'int v1 = ClipboardService.-$$Nest$mgetIntendingUid(this.this$0, p1, p3);\nboolean v3 = ClipboardService.-$$Nest$mclipboardAccessAllowed(this.this$0, 29, p1, p2, v1, v2);']

The method getPrimaryClip has the following similar APIs:

- API Name: setPrimaryClip(Landroid/content/ClipData;Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.clipboard.ClipboardService$ClipboardImpl with the following sink code entries:
  - Similarity: 0.9457324743270874, Code:
int v3 = ClipboardService.-$$Nest$mgetIntendingUid(this.this$0, p2, p4);
int v4 = UserHandle.getUserId(v3);
boolean v5 = ClipboardService.-$$Nest$mclipboardAccessAllowed(this.this$0, 30, p2, p3, v3, v4);
  - Similarity: 0.90342116355896, Code:
int v5 = this.this$0.getIntendingUid(p2, p4);
int v6 = UserHandle.getUserId(v4);
boolean v8 = this.this$0.clipboardAccessAllowed(30, p2, p3, v4, v6);
  - Access Control Level: SYS_OR_SIG

- API Name: setPrimaryClipAsPackage(Landroid/content/ClipData;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V in the following Class: Lcom.android.server.clipboard.ClipboardService$ClipboardImpl with the following sink code entries:
  - Similarity: 0.9406108260154724, Code:
int v5 = ClipboardService.-$$Nest$mgetIntendingUid(this.this$0, p2, p4);
int v6 = UserHandle.getUserId(v5);
boolean v7 = ClipboardService.-$$Nest$mclipboardAccessAllowed(this.this$0, 30, p2, p3, v5, v6);
  - Similarity: 0.9106849431991577, Code:
int v7 = this.this$0.getIntendingUid(p2, p4);
int v8 = UserHandle.getUserId(v6);
boolean v10 = this.this$0.clipboardAccessAllowed(30, p2, p3, v6, v8);
  - Access Control Level: SYS_OR_SIG

- API Name: getPrimaryClipDescription(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/ClipDescription; in the following Class: Lcom.android.server.clipboard.ClipboardService$ClipboardImpl with the following sink code entries:
  - Similarity: 0.8960287570953369, Code:
int v1 = ClipboardService.-$$Nest$mgetIntendingUid(this.this$0, p1, p3);
boolean v3 = ClipboardService.-$$Nest$mclipboardAccessAllowed(this.this$0, 29, p1, p2, v1, v2, 0);
ClipboardService$PerUserClipboard v6 = ClipboardService.-$$Nest$mgetClipboardLocked(this.this$0, v2);
  - Similarity: 0.8701775670051575, Code:
int v3 = ClipboardService.getIntendingUserId(p1, p3);
Object v22 = v21.getSystemService(KeyguardManage.class);
if (v23 == 0) { ... }
ClipboardService$PerUserClipboard v29 = new ClipboardService$PerUserClipboard(ClipboardService,v7);
  - Similarity: 0.8437156677246094, Code:
int v2 = this.this$0.getIntendingUid(p1, p3);
boolean v5 = this.this$0.clipboardAccessAllowed(29, p1, p2, v1, v3, 0);
ClipboardService$PerUserClipboard v10 = this.this$0.getClipboardLocked(v3);
  - Access Control Level: SYS_OR_SIG

- API Name: clearPrimaryClip(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.clipboard.ClipboardService$ClipboardImpl with the following sink code entries:
  - Similarity: 0.8477525115013123, Code:
int v1 = ClipboardService.-$$Nest$mgetIntendingUid(this.this$0, p1, p3);
boolean v3 = ClipboardService.-$$Nest$mclipboardAccessAllowed(this.this$0, 30, p1, p2, v1, v2);
this.mClipboardClearHandler.removeEqualMessages(101, v5);
ClipboardService.-$$Nest$msetPrimaryClipInternalLocked(this.this$0, 0, v1, p1);
  - Similarity: 0.8301347494125366, Code:
int v2 = this.this$0.getIntendingUid(p1, p3);
boolean v5 = this.this$0.clipboardAccessAllowed(30, p1, p2, v1, v3);
this.mClipboardClearHandler.removeEqualMessages(101, v7);
this.this$0.setPrimaryClipInternalLocked(0, v1, p1);
  - Access Control Level: SYS_OR_SIG

- API Name: hasClipboardText(Ljava/lang/String;Ljava/lang/String;I)Z in the following Class: Lcom.android.server.clipboard.ClipboardService$ClipboardImpl with the following sink code entries:
  - Similarity: 0.8149557709693909, Code:
int v3 = ClipboardService.getIntendingUserId(p1, p3);
boolean v5 = this.this$0.clipboardAccessAllowed(29, p1, p2, v1, v3, 0);
ClipboardService$PerUserClipboard v10 = this.this$0.getClipboardLocked(v3);
if (ClipboardService$PerUserClipboard.primaryClip == 0) { ... }
  - Access Control Level: SYS_OR_SIG

