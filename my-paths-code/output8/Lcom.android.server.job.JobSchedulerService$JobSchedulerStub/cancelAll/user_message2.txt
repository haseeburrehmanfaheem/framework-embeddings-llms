The method cancelAll has the following code snippet:

This is path 1 for the API with depth 2:
public void cancelAll(){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("cancelAll() called by app, callingUid=");
	StringBuilder v6 = v3.append(v1);
	String v7 = v3.toString();
	if (v1 != 1000) {
		List v10 = this.mJobSet.getJobsByUid(v1);
		List v9 = v10;
		int v11 = v9.size();
		if (0 >= v11) {
			Object v12 = v9.get(0);
			if (this.DEBUG == 0) {
				String v17 = v12.toShortString();
				v12.unprepareLocked();
				boolean v22 = JobSchedulerService.stopTrackingJobLocked(v12, 0, 1);
				boolean v23 = this.mPendingJobQueue.remove(v12);
				if (v23 == 0) {
					this.mJobPackageTracker.noteNonpending(v12);
					boolean v25 = this.mChangedJobList.remove(v12);
					boolean v26 = this.mConcurrencyManager.stopJobOnServiceContextLocked(v12, 1, 0, v7);
					if (0 == 0) {
						if (this.DEBUG == 0) {
							String v30 = 0.toShortString();
							JobSchedulerService.startTrackingJobLocked(0, v12);
							JobSchedulerService.reportActiveLocked();
							int v36 = v9.size();
							if ((0 + 1) >= v36) {
								boolean v8 = 1;
								Binder.restoreCallingIdentity(v2);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void cancelAll(){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("cancelAll() called by app, callingUid=");
	StringBuilder v6 = v3.append(v1);
	String v7 = v3.toString();
	if (v1 != 1000) {
		List v9 = this.mJobs.getJobsByUid(v1);
		int v10 = v9.size();
		if (0 >= v10) {
			Object v11 = v9.get(0);
			JobSchedulerService.cancelJobImplLocked(v11, 0, 1, 0, v7);
			int v13 = v9.size();
			if ((0 + 1) >= v13) {
				boolean v8 = 1;
				Binder.restoreCallingIdentity(v2);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void cancelAll(){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("cancelAll() called by app, callingUid=");
	StringBuilder v6 = v3.append(v1);
	String v7 = v3.toString();
	boolean v8 = this.this$0.cancelJobsForUid(v1, 1, 0, v7);
	Binder.restoreCallingIdentity(v2);
	return;
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nList v10 = this.mJobSet.getJobsByUid(v1);\nv12.unprepareLocked();\nboolean v22 = JobSchedulerService.stopTrackingJobLocked(v12, 0, 1);\nboolean v23 = this.mPendingJobQueue.remove(v12);\nboolean v26 = this.mConcurrencyManager.stopJobOnServiceContextLocked(v12, 1, 0, v7);', 'int v1 = Binder.getCallingUid();\nList v9 = this.mJobs.getJobsByUid(v1);\nJobSchedulerService.cancelJobImplLocked(v11, 0, 1, 0, v7);', 'int v1 = Binder.getCallingUid();\nboolean v8 = this.this$0.cancelJobsForUid(v1, 1, 0, v7);']

The method cancelAll has the following similar APIs:

- API Name: cancel(I)V with Similarity Score: 0.8997910022735596
  - Access Control Level: NONE and the following code:
JobStatus v5 = this.mJobs.getJobByUidAndJobId(v1, p1);
JobSchedulerService.cancelJobImplLocked(v5, 0, 1, 0, v14);

- API Name: editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V with Similarity Score: 0.7804907560348511
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
AccountManagerService$16 v31 = new AccountManagerService$16(p0,v29,p1,p2,p3,1,0,0,p2);

