The method createLocalApprovalIntent in the following class Lcom.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl has the following code snippet:

This is path 1 for the API with depth 1:
public Intent createLocalApprovalIntent(){
	int v1 = UserHandle.getCallingUserId();
	if (this.mDpm == 0) {
		long v2 = Binder.clearCallingIdentity();
		ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
		if (v3 == 0) {
			String v4 = v3.getPackageName();
			Intent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");
			Intent v7 = v5.setPackage(v4);
			IPackageManager v9 = ActivityThread.getPackageManager();
			IPackageManager v8 = v9;
			ResolveInfo v10 = v8.resolveIntent(v5, 0, 0, v1);
			if (v10 == 0) {
				if (ResolveInfo.activityInfo == 0) {
					if (ActivityInfo.exported == 0) {
						ComponentName v11 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name);
						Intent v13 = v5.setComponent(v11);
						Binder.restoreCallingIdentity(v2);
						return v5;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public Intent createLocalApprovalIntent(){
	int v1 = UserHandle.getCallingUserId();
	if (this.mDpm == 0) {
		long v2 = Binder.clearCallingIdentity();
		ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
		if (v3 == 0) {
			String v4 = v3.getPackageName();
			Intent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");
			Intent v7 = v5.setPackage(v4);
			IPackageManager v8 = AppGlobals.getPackageManager();
			ResolveInfo v9 = v8.resolveIntent(v5, 0, 0, v1);
			if (v9 == 0) {
				if (ResolveInfo.activityInfo == 0) {
					if (ActivityInfo.exported == 0) {
						ComponentName v10 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name);
						Intent v12 = v5.setComponent(v10);
						Binder.restoreCallingIdentity(v2);
						return v5;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Intent createLocalApprovalIntent(){
	int v1 = UserHandle.getCallingUserId();
	if (this.mDpm == 0) {
		long v2 = Binder.clearCallingIdentity();
		ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
		if (v3 == 0) {
			String v4 = v3.getPackageName();
			Intent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");
			Intent v7 = v5.setPackage(v4);
			IPackageManager v8 = AppGlobals.getPackageManager();
			ResolveInfo v9 = v8.resolveIntent(v5, 0, 0, v1);
			if (v9 == 0) {
				if (ResolveInfo.activityInfo == 0) {
					if (ActivityInfo.exported == 0) {
						Binder.restoreCallingIdentity(v2);
						return 0;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nComponentName v3 = this.mDpm.getRestrictionsProvider(v1);\nString v4 = v3.getPackageName();\nIntent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");\nIntent v7 = v5.setPackage(v4);\nResolveInfo v10 = v8.resolveIntent(v5, 0, 0, v1);\nComponentName v11 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name);\nIntent v13 = v5.setComponent(v11);\nreturn v5;']

The method createLocalApprovalIntent has the following similar APIs:

- API Name: hasRestrictionsProvider()Z in the following Class: Lcom.android.server.restrictions.RestrictionsManagerService$RestrictionsManagerImpl with the following sink code entries:
  - Similarity: 0.8552742600440979, Code:
int v1 = UserHandle.getCallingUserId();
ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
if (v3 == 0) {
return 0;
  - Access Control Level: NONE

- API Name: setUserRestriction(Ljava/lang/String;ZI)V in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7988865375518799, Code:
int v4 = Binder.getCallingUid();
IPackageManager v6 = ActivityThread.getPackageManager();
IPackageManager v5 = v6;
String v7 = v5.getPackagesForUid(v4);
boolean v24 = v23.isSystemApp();
Bundle v27 = this.mBaseUserRestrictions.getRestrictions(p3);
Bundle v28 = BundleUtils.clone(v27);
v28.putBoolean(p1, p2);
  - Similarity: 0.7896249890327454, Code:
int v4 = Binder.getCallingUid();
IPackageManager v5 = AppGlobals.getPackageManager();
String v6 = v5.getPackagesForUid(v4);
boolean v16 = UserRestrictionsUtils.isSystemApp(v4, 0);
Object v20 = this.mUserRestrictions.get(p3);
Bundle v19 = v20;
Bundle v22 = new Bundle(v19);
v21.putBoolean(p1, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle; in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7904938459396362, Code:
int v1 = UserHandle.getCallingUserId();
File v18 = Environment.getUserSystemDirectory(v1);
String v19 = UserManagerService.packageToRestrictionsFileName(p1);
AtomicFile v16 = new AtomicFile(v17);
Bundle v22 = UserManagerService.readApplicationRestrictionsLAr(v16);
return v2;
  - Similarity: 0.789918065071106, Code:
int v1 = UserHandle.getCallingUserId();
UserManagerService.checkSystemOrRoot(v11);
Bundle v13 = UserManagerService.readApplicationRestrictionsLAr(p1, v1);
return v2;
  - Access Control Level: SYS_OR_SIG

- API Name: hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7693730592727661, Code:
boolean v2 = this.USER_RESTRICTIONS.contains(p1);
int v3 = Binder.getCallingUid();
IPackageManager v5 = ActivityThread.getPackageManager();
String v6 = v4.getPackagesForUid(v3);
Bundle v33 = v34;
Bundle v35 = v42;
this.mUserRestrictions.put(UserInfo.id, v35);
  - Access Control Level: SYS_OR_SIG

- API Name: setApplicationRestrictions(Ljava/lang/String;Landroid/os/Bundle;I)V in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7638871669769287, Code:
File v8 = new File(v7,v9);
String v9 = UserManagerService.packageToRestrictionsFileName(p1);
Intent v13 = new Intent("android.intent.action.APPLICATION_RESTRICTIONS_CHANGED");
v15 = v13.setPackage(p1);
  - Access Control Level: SYS_OR_SIG

