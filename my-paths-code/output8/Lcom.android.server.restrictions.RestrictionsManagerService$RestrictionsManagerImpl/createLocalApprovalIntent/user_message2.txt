The method createLocalApprovalIntent has the following code snippet:

This is path 1 for the API with depth 1:
public Intent createLocalApprovalIntent(){
	int v1 = UserHandle.getCallingUserId();
	if (this.mDpm == 0) {
		long v2 = Binder.clearCallingIdentity();
		ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
		if (v3 == 0) {
			String v4 = v3.getPackageName();
			Intent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");
			Intent v7 = v5.setPackage(v4);
			IPackageManager v9 = ActivityThread.getPackageManager();
			IPackageManager v8 = v9;
			ResolveInfo v10 = v8.resolveIntent(v5, 0, 0, v1);
			if (v10 == 0) {
				if (ResolveInfo.activityInfo == 0) {
					if (ActivityInfo.exported == 0) {
						ComponentName v11 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name);
						Intent v13 = v5.setComponent(v11);
						Binder.restoreCallingIdentity(v2);
						return v5;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public Intent createLocalApprovalIntent(){
	int v1 = UserHandle.getCallingUserId();
	if (this.mDpm == 0) {
		long v2 = Binder.clearCallingIdentity();
		ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
		if (v3 == 0) {
			String v4 = v3.getPackageName();
			Intent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");
			Intent v7 = v5.setPackage(v4);
			IPackageManager v8 = AppGlobals.getPackageManager();
			ResolveInfo v9 = v8.resolveIntent(v5, 0, 0, v1);
			if (v9 == 0) {
				if (ResolveInfo.activityInfo == 0) {
					if (ActivityInfo.exported == 0) {
						ComponentName v10 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name);
						Intent v12 = v5.setComponent(v10);
						Binder.restoreCallingIdentity(v2);
						return v5;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Intent createLocalApprovalIntent(){
	int v1 = UserHandle.getCallingUserId();
	if (this.mDpm == 0) {
		long v2 = Binder.clearCallingIdentity();
		ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
		if (v3 == 0) {
			String v4 = v3.getPackageName();
			Intent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");
			Intent v7 = v5.setPackage(v4);
			IPackageManager v8 = AppGlobals.getPackageManager();
			ResolveInfo v9 = v8.resolveIntent(v5, 0, 0, v1);
			if (v9 == 0) {
				if (ResolveInfo.activityInfo == 0) {
					if (ActivityInfo.exported == 0) {
						Binder.restoreCallingIdentity(v2);
						return 0;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nComponentName v3 = this.mDpm.getRestrictionsProvider(v1);\nString v4 = v3.getPackageName();\nIntent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");\nIntent v7 = v5.setPackage(v4);\nResolveInfo v10 = v8.resolveIntent(v5, 0, 0, v1);\nComponentName v11 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name);\nIntent v13 = v5.setComponent(v11);\nreturn v5;']

The method createLocalApprovalIntent has the following similar APIs:

- API Name: hasRestrictionsProvider()Z with Similarity Score: 0.8552742004394531
  - Access Control Level: NONE and the following code:
int v1 = UserHandle.getCallingUserId();
ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
if (v3 == 0) {
return 0;

- API Name: setUserRestriction(Ljava/lang/String;ZI)V with Similarity Score: 0.7988864183425903
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = Binder.getCallingUid();
IPackageManager v6 = ActivityThread.getPackageManager();
IPackageManager v5 = v6;
String v7 = v5.getPackagesForUid(v4);
boolean v24 = v23.isSystemApp();
Bundle v27 = this.mBaseUserRestrictions.getRestrictions(p3);
Bundle v28 = BundleUtils.clone(v27);
v28.putBoolean(p1, p2);

