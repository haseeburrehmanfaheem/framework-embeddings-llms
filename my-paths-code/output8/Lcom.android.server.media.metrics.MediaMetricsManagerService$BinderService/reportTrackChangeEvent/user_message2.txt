The method reportTrackChangeEvent has the following code snippet:

This is path 1 for the API with depth 2:
public void reportTrackChangeEvent(String p1, TrackChangeEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													StatsEvent$Builder v32 = StatsEvent.newBuilder();
													StatsEvent$Builder v33 = v32.setAtomId(324);
													StatsEvent$Builder v34 = v33.writeString(p1);
													int v35 = p2.getTrackState();
													StatsEvent$Builder v36 = v34.writeInt(v35);
													int v37 = p2.getTrackChangeReason();
													StatsEvent$Builder v38 = v36.writeInt(v37);
													String v39 = p2.getContainerMimeType();
													StatsEvent$Builder v40 = v38.writeString(v39);
													String v41 = p2.getSampleMimeType();
													StatsEvent$Builder v42 = v40.writeString(v41);
													String v43 = p2.getCodecName();
													StatsEvent$Builder v44 = v42.writeString(v43);
													int v45 = p2.getBitrate();
													StatsEvent$Builder v46 = v44.writeInt(v45);
													long v47 = p2.getTimeSinceCreatedMillis();
													StatsEvent$Builder v48 = v46.writeLong(v47);
													int v49 = p2.getTrackType();
													StatsEvent$Builder v50 = v48.writeInt(v49);
													String v51 = p2.getLanguage();
													StatsEvent$Builder v52 = v50.writeString(v51);
													String v53 = p2.getLanguageRegion();
													StatsEvent$Builder v54 = v52.writeString(v53);
													int v55 = p2.getChannelCount();
													StatsEvent$Builder v56 = v54.writeInt(v55);
													int v57 = p2.getAudioSampleRate();
													StatsEvent$Builder v58 = v56.writeInt(v57);
													int v59 = p2.getWidth();
													StatsEvent$Builder v60 = v58.writeInt(v59);
													int v61 = p2.getHeight();
													StatsEvent$Builder v62 = v60.writeInt(v61);
													float v63 = p2.getVideoFrameRate();
													StatsEvent$Builder v64 = v62.writeFloat(v63);
													StatsEvent$Builder v65 = v64.usePooledBuffer();
													StatsEvent v66 = v65.build();
													StatsLog.write(v66);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void reportTrackChangeEvent(String p1, TrackChangeEvent p2, int p3){
	Object v2 = MediaMetricsManagerService.-$$Nest$fgetmLock(this.this$0);
	int v3 = Binder.getCallingUid();
	Integer v4 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		int v6 = DeviceConfig.getInt("media", "media_metrics_mode", 2);
		Integer v7 = Integer.valueOf(v6);
		MediaMetricsManagerService.-$$Nest$fputmMode(this.this$0, v7);
		Binder.restoreCallingIdentity(v5);
		Integer v10 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
		int v11 = v10.intValue();
		if (v11 != 1) {
			Integer v12 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
			int v13 = v12.intValue();
			if (v13 != 0) {
				Context v14 = this.this$0.getContext();
				PackageManager v15 = v14.getPackageManager();
				String v16 = v15.getPackagesForUid(v3);
				if (v16 == 0) {
					if (v16.length != 0) {
						Integer v17 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
						int v18 = v17.intValue();
						if (v18 != 2) {
							List v19 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
							if (v19 != 0) {
								List v20 = MediaMetricsManagerService.-$$Nest$mgetListLocked(this.this$0, "player_metrics_app_blocklist");
								MediaMetricsManagerService.-$$Nest$fputmBlockList(this.this$0, v20);
								List v22 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
								if (v22 != 0) {
									List v23 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
									Integer v24 = MediaMetricsManagerService$BinderService.loggingLevelInternal(v16, v23, "player_metrics_app_blocklist");
									if (v24 == 0) {
										int v25 = v24.intValue();
										int v1 = v25;
										if (v1 != 99999) {
											StatsEvent$Builder v26 = StatsEvent.newBuilder();
											StatsEvent$Builder v27 = v26.setAtomId(324);
											StatsEvent$Builder v28 = v27.writeString(p1);
											int v29 = this.mState;
											StatsEvent$Builder v30 = v28.writeInt(v29);
											int v31 = this.mReason;
											StatsEvent$Builder v32 = v30.writeInt(v31);
											String v33 = this.mContainerMimeType;
											StatsEvent$Builder v34 = v32.writeString(v33);
											String v35 = this.mSampleMimeType;
											StatsEvent$Builder v36 = v34.writeString(v35);
											String v37 = this.mCodecName;
											StatsEvent$Builder v38 = v36.writeString(v37);
											int v39 = this.mBitrate;
											StatsEvent$Builder v40 = v38.writeInt(v39);
											long v41 = this.mTimeSinceCreatedMillis;
											StatsEvent$Builder v42 = v40.writeLong(v41);
											int v43 = this.mType;
											StatsEvent$Builder v44 = v42.writeInt(v43);
											String v45 = this.mLanguage;
											StatsEvent$Builder v46 = v44.writeString(v45);
											String v47 = this.mLanguageRegion;
											StatsEvent$Builder v48 = v46.writeString(v47);
											int v49 = this.mChannelCount;
											StatsEvent$Builder v50 = v48.writeInt(v49);
											int v51 = this.mAudioSampleRate;
											StatsEvent$Builder v52 = v50.writeInt(v51);
											int v53 = this.mWidth;
											StatsEvent$Builder v54 = v52.writeInt(v53);
											int v55 = this.mHeight;
											StatsEvent$Builder v56 = v54.writeInt(v55);
											float v57 = this.mVideoFrameRate;
											StatsEvent$Builder v58 = v56.writeFloat(v57);
											StatsEvent$Builder v59 = v58.usePooledBuffer();
											StatsEvent v60 = v59.build();
											StatsLog.write(v60);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void reportTrackChangeEvent(String p1, TrackChangeEvent p2, int p3){
	int v1 = p0.loggingLevel();
	if (v1 != 99999) {
		StatsEvent$Builder v2 = StatsEvent.newBuilder();
		StatsEvent$Builder v3 = v2.setAtomId(324);
		StatsEvent$Builder v4 = v3.writeString(p1);
		int v5 = p2.getTrackState();
		StatsEvent$Builder v6 = v4.writeInt(v5);
		int v7 = p2.getTrackChangeReason();
		StatsEvent$Builder v8 = v6.writeInt(v7);
		String v9 = p2.getContainerMimeType();
		StatsEvent$Builder v10 = v8.writeString(v9);
		String v11 = p2.getSampleMimeType();
		StatsEvent$Builder v12 = v10.writeString(v11);
		String v13 = p2.getCodecName();
		StatsEvent$Builder v14 = v12.writeString(v13);
		int v15 = p2.getBitrate();
		StatsEvent$Builder v16 = v14.writeInt(v15);
		long v17 = p2.getTimeSinceCreatedMillis();
		StatsEvent$Builder v18 = v16.writeLong(v17);
		int v19 = p2.getTrackType();
		StatsEvent$Builder v20 = v18.writeInt(v19);
		String v21 = p2.getLanguage();
		StatsEvent$Builder v22 = v20.writeString(v21);
		String v23 = p2.getLanguageRegion();
		StatsEvent$Builder v24 = v22.writeString(v23);
		int v25 = p2.getChannelCount();
		StatsEvent$Builder v26 = v24.writeInt(v25);
		int v27 = p2.getAudioSampleRate();
		StatsEvent$Builder v28 = v26.writeInt(v27);
		int v29 = p2.getWidth();
		StatsEvent$Builder v30 = v28.writeInt(v29);
		int v31 = p2.getHeight();
		StatsEvent$Builder v32 = v30.writeInt(v31);
		float v33 = p2.getVideoFrameRate();
		StatsEvent$Builder v34 = v32.writeFloat(v33);
		StatsEvent$Builder v35 = v34.usePooledBuffer();
		StatsEvent v36 = v35.build();
		StatsLog.write(v36);
		return;
	}
}

and the following sink code:
['int v1 = p0.loggingLevel();\nStatsEvent$Builder v2 = StatsEvent.newBuilder();\nStatsEvent$Builder v3 = v2.setAtomId(324);\nStatsEvent$Builder v4 = v3.writeString(p1);\n...\nStatsEvent$Builder v35 = v34.usePooledBuffer();\nStatsEvent v36 = v35.build();\nStatsLog.write(v36);', 'Integer v4 = this.mMode;\nthis.mMode = Integer.valueOf(v6);\n...\nList v25 = this.mBlockList;\nif (v25 != 0) { ... }']

The method reportTrackChangeEvent has the following similar APIs:

- API Name: reportPlaybackErrorEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackErrorEvent;I)V with Similarity Score: 0.9209254384040833
  - Access Control Level: NONE and the following code:
int v1 = p0.loggingLevel();
if (v1 != 99999) {
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(323);
StatsEvent$Builder v4 = v3.writeString(p1);
String v5 = p2.getExceptionStack();
StatsEvent$Builder v6 = v4.writeString(v5);
int v7 = p2.getErrorCode();
StatsEvent$Builder v8 = v6.writeInt(v7);
int v9 = p2.getSubErrorCode();
StatsEvent$Builder v10 = v8.writeInt(v9);
long v11 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v12 = v10.writeLong(v11);
StatsEvent$Builder v13 = v12.usePooledBuffer();
StatsEvent v14 = v13.build();
StatsLog.write(v14);

- API Name: reportPlaybackStateEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackStateEvent;I)V with Similarity Score: 0.8698533773422241
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v32 = StatsEvent.newBuilder();
StatsEvent$Builder v33 = v32.setAtomId(322);
StatsEvent$Builder v34 = v33.writeString(p1);
int v35 = p2.getState();
StatsEvent$Builder v36 = v34.writeInt(v35);
long v37 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v38 = v36.writeLong(v37);
StatsEvent$Builder v39 = v38.usePooledBuffer();
StatsEvent v40 = v39.build();
StatsLog.write(v40);

