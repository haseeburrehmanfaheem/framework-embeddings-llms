The method reportPlaybackMetrics in the following class Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService has the following code snippet:

This is path 1 for the API with depth 2:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													StatsEvent$Builder v32 = StatsEvent.newBuilder();
													StatsEvent$Builder v33 = v32.setAtomId(320);
													if (v1 != 0) {
														int v34 = Binder.getCallingUid();
														StatsEvent$Builder v35 = v33.writeInt(v34);
														StatsEvent$Builder v36 = v35.writeString(p1);
														long v37 = p2.getMediaDurationMillis();
														StatsEvent$Builder v38 = v36.writeLong(v37);
														int v39 = p2.getStreamSource();
														StatsEvent$Builder v40 = v38.writeInt(v39);
														int v41 = p2.getStreamType();
														StatsEvent$Builder v42 = v40.writeInt(v41);
														int v43 = p2.getPlaybackType();
														StatsEvent$Builder v44 = v42.writeInt(v43);
														int v45 = p2.getDrmType();
														StatsEvent$Builder v46 = v44.writeInt(v45);
														int v47 = p2.getContentType();
														StatsEvent$Builder v48 = v46.writeInt(v47);
														String v49 = p2.getPlayerName();
														StatsEvent$Builder v50 = v48.writeString(v49);
														String v51 = p2.getPlayerVersion();
														StatsEvent$Builder v52 = v50.writeString(v51);
														[B v53 = new [B(0);
														StatsEvent$Builder v54 = v52.writeByteArray(v53);
														int v55 = p2.getVideoFramesPlayed();
														StatsEvent$Builder v56 = v54.writeInt(v55);
														int v57 = p2.getVideoFramesDropped();
														StatsEvent$Builder v58 = v56.writeInt(v57);
														int v59 = p2.getAudioUnderrunCount();
														StatsEvent$Builder v60 = v58.writeInt(v59);
														long v61 = p2.getNetworkBytesRead();
														StatsEvent$Builder v62 = v60.writeLong(v61);
														long v63 = p2.getLocalBytesRead();
														StatsEvent$Builder v64 = v62.writeLong(v63);
														long v65 = p2.getNetworkTransferDurationMillis();
														StatsEvent$Builder v66 = v64.writeLong(v65);
														byte[] v67 = p2.getDrmSessionId();
														String v68 = Base64.encodeToString(v67, 0);
														StatsEvent$Builder v69 = v66.writeString(v68);
														StatsEvent$Builder v70 = v69.usePooledBuffer();
														StatsEvent v71 = v70.build();
														StatsLog.write(v71);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	Object v2 = MediaMetricsManagerService.-$$Nest$fgetmLock(this.this$0);
	int v3 = Binder.getCallingUid();
	Integer v4 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		int v6 = DeviceConfig.getInt("media", "media_metrics_mode", 2);
		Integer v7 = Integer.valueOf(v6);
		MediaMetricsManagerService.-$$Nest$fputmMode(this.this$0, v7);
		Binder.restoreCallingIdentity(v5);
		Integer v10 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
		int v11 = v10.intValue();
		if (v11 != 1) {
			Integer v12 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
			int v13 = v12.intValue();
			if (v13 != 0) {
				Context v14 = this.this$0.getContext();
				PackageManager v15 = v14.getPackageManager();
				String v16 = v15.getPackagesForUid(v3);
				if (v16 == 0) {
					if (v16.length != 0) {
						Integer v17 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
						int v18 = v17.intValue();
						if (v18 != 2) {
							List v19 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
							if (v19 != 0) {
								List v20 = MediaMetricsManagerService.-$$Nest$mgetListLocked(this.this$0, "player_metrics_app_blocklist");
								MediaMetricsManagerService.-$$Nest$fputmBlockList(this.this$0, v20);
								List v22 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
								if (v22 != 0) {
									List v23 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
									Integer v24 = MediaMetricsManagerService$BinderService.loggingLevelInternal(v16, v23, "player_metrics_app_blocklist");
									if (v24 == 0) {
										int v25 = v24.intValue();
										int v1 = v25;
										if (v1 != 99999) {
											StatsEvent$Builder v26 = StatsEvent.newBuilder();
											StatsEvent$Builder v27 = v26.setAtomId(320);
											if (v1 != 0) {
												int v28 = Binder.getCallingUid();
												StatsEvent$Builder v29 = v27.writeInt(v28);
												StatsEvent$Builder v30 = v29.writeString(p1);
												long v31 = this.mMediaDurationMillis;
												StatsEvent$Builder v32 = v30.writeLong(v31);
												int v33 = this.mStreamSource;
												StatsEvent$Builder v34 = v32.writeInt(v33);
												int v35 = this.mStreamType;
												StatsEvent$Builder v36 = v34.writeInt(v35);
												int v37 = this.mPlaybackType;
												StatsEvent$Builder v38 = v36.writeInt(v37);
												int v39 = this.mDrmType;
												StatsEvent$Builder v40 = v38.writeInt(v39);
												int v41 = this.mContentType;
												StatsEvent$Builder v42 = v40.writeInt(v41);
												String v43 = this.mPlayerName;
												StatsEvent$Builder v44 = v42.writeString(v43);
												String v45 = this.mPlayerVersion;
												StatsEvent$Builder v46 = v44.writeString(v45);
												[B v47 = new [B(0);
												StatsEvent$Builder v48 = v46.writeByteArray(v47);
												int v49 = this.mVideoFramesPlayed;
												StatsEvent$Builder v50 = v48.writeInt(v49);
												int v51 = this.mVideoFramesDropped;
												StatsEvent$Builder v52 = v50.writeInt(v51);
												int v53 = this.mAudioUnderrunCount;
												StatsEvent$Builder v54 = v52.writeInt(v53);
												long v55 = this.mNetworkBytesRead;
												StatsEvent$Builder v56 = v54.writeLong(v55);
												long v57 = this.mLocalBytesRead;
												StatsEvent$Builder v58 = v56.writeLong(v57);
												long v59 = this.mNetworkTransferDurationMillis;
												StatsEvent$Builder v60 = v58.writeLong(v59);
												byte[] v61 = this.mDrmSessionId;
												String v62 = Base64.encodeToString(v61, 0);
												StatsEvent$Builder v63 = v60.writeString(v62);
												StatsEvent$Builder v64 = v63.usePooledBuffer();
												StatsEvent v65 = v64.build();
												StatsLog.write(v65);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	int v1 = p0.loggingLevel();
	if (v1 != 99999) {
		StatsEvent$Builder v2 = StatsEvent.newBuilder();
		StatsEvent$Builder v3 = v2.setAtomId(320);
		if (v1 != 0) {
			int v4 = Binder.getCallingUid();
			StatsEvent$Builder v5 = v3.writeInt(v4);
			StatsEvent$Builder v6 = v5.writeString(p1);
			long v7 = p2.getMediaDurationMillis();
			StatsEvent$Builder v8 = v6.writeLong(v7);
			int v9 = p2.getStreamSource();
			StatsEvent$Builder v10 = v8.writeInt(v9);
			int v11 = p2.getStreamType();
			StatsEvent$Builder v12 = v10.writeInt(v11);
			int v13 = p2.getPlaybackType();
			StatsEvent$Builder v14 = v12.writeInt(v13);
			int v15 = p2.getDrmType();
			StatsEvent$Builder v16 = v14.writeInt(v15);
			int v17 = p2.getContentType();
			StatsEvent$Builder v18 = v16.writeInt(v17);
			String v19 = p2.getPlayerName();
			StatsEvent$Builder v20 = v18.writeString(v19);
			String v21 = p2.getPlayerVersion();
			StatsEvent$Builder v22 = v20.writeString(v21);
			[B v23 = new [B(0);
			StatsEvent$Builder v24 = v22.writeByteArray(v23);
			int v25 = p2.getVideoFramesPlayed();
			StatsEvent$Builder v26 = v24.writeInt(v25);
			int v27 = p2.getVideoFramesDropped();
			StatsEvent$Builder v28 = v26.writeInt(v27);
			int v29 = p2.getAudioUnderrunCount();
			StatsEvent$Builder v30 = v28.writeInt(v29);
			long v31 = p2.getNetworkBytesRead();
			StatsEvent$Builder v32 = v30.writeLong(v31);
			long v33 = p2.getLocalBytesRead();
			StatsEvent$Builder v34 = v32.writeLong(v33);
			long v35 = p2.getNetworkTransferDurationMillis();
			StatsEvent$Builder v36 = v34.writeLong(v35);
			byte[] v37 = p2.getDrmSessionId();
			String v38 = Base64.encodeToString(v37, 0);
			StatsEvent$Builder v39 = v36.writeString(v38);
			StatsEvent$Builder v40 = v39.usePooledBuffer();
			StatsEvent v41 = v40.build();
			StatsLog.write(v41);
			return;
		}
	}
}

and the following sink code:
['StatsEvent$Builder v2 = StatsEvent.newBuilder();\nStatsEvent$Builder v3 = v2.setAtomId(320);\n...\nStatsEvent$Builder v40 = v39.usePooledBuffer();\nStatsEvent v41 = v40.build();\nStatsLog.write(v41);']

The method reportPlaybackMetrics has the following similar APIs:

- API Name: reportBootstrapAtom(Landroid/os/StatsBootstrapAtom;)V in the following Class: Lcom.android.server.stats.bootstrap.StatsBootstrapAtomService with the following sink code entries:
  - Similarity: 0.8826273083686829, Code:
StatsEvent$Builder v1 = StatsEvent.newBuilder();
StatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);
byte[] v4 = StatsBootstrapAtom.values[0].getBytesValue();
StatsEvent$Builder v5 = v2.writeByteArray(v4);
StatsEvent v7 = v6.build();
StatsLog.write(v7);
  - Similarity: 0.8240081667900085, Code:
StatsEvent$Builder v1 = StatsEvent.newBuilder();
StatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);
byte[] v4 = this._value;
StatsEvent$Builder v7 = v2.writeByteArray(v4);
StatsEvent v9 = v8.build();
StatsLog.write(v9);
  - Similarity: 0.8238484263420105, Code:
StatsEvent$Builder v1 = StatsEvent.newBuilder();
StatsEvent$Builder v2 = v1.setAtomId(StatsBootstrapAtom.atomId);
byte[] v4 = this._value;
StatsEvent$Builder v6 = v2.writeByteArray(v4);
StatsEvent v8 = v7.build();
StatsLog.write(v8);
  - Access Control Level: NONE

- API Name: reportPlaybackStateEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackStateEvent;I)V in the following Class: Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8663113713264465, Code:
StatsEvent$Builder v32 = StatsEvent.newBuilder();
StatsEvent$Builder v33 = v32.setAtomId(322);
StatsEvent$Builder v34 = v33.writeString(p1);
int v35 = p2.getState();
StatsEvent$Builder v36 = v34.writeInt(v35);
long v37 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v38 = v36.writeLong(v37);
StatsEvent$Builder v39 = v38.usePooledBuffer();
StatsEvent v40 = v39.build();
StatsLog.write(v40);
  - Access Control Level: NONE

- API Name: reportTrackChangeEvent(Ljava/lang/String;Landroid/media/metrics/TrackChangeEvent;I)V in the following Class: Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService with the following sink code entries:
  - Similarity: 0.8613191246986389, Code:
int v1 = p0.loggingLevel();
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(324);
StatsEvent$Builder v4 = v3.writeString(p1);
...
StatsEvent$Builder v35 = v34.usePooledBuffer();
StatsEvent v36 = v35.build();
StatsLog.write(v36);
  - Access Control Level: NONE

- API Name: reportPlaybackErrorEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackErrorEvent;I)V in the following Class: Lcom.android.server.media.metrics.MediaMetricsManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7560471892356873, Code:
int v1 = p0.loggingLevel();
if (v1 != 99999) {
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(323);
StatsEvent$Builder v4 = v3.writeString(p1);
String v5 = p2.getExceptionStack();
StatsEvent$Builder v6 = v4.writeString(v5);
int v7 = p2.getErrorCode();
StatsEvent$Builder v8 = v6.writeInt(v7);
int v9 = p2.getSubErrorCode();
StatsEvent$Builder v10 = v8.writeInt(v9);
long v11 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v12 = v10.writeLong(v11);
StatsEvent$Builder v13 = v12.usePooledBuffer();
StatsEvent v14 = v13.build();
StatsLog.write(v14);
  - Access Control Level: NONE

