The method reportPlaybackStateEvent has the following code snippet:

This is path 1 for the API with depth 2:
public void reportPlaybackStateEvent(String p1, PlaybackStateEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													StatsEvent$Builder v32 = StatsEvent.newBuilder();
													StatsEvent$Builder v33 = v32.setAtomId(322);
													StatsEvent$Builder v34 = v33.writeString(p1);
													int v35 = p2.getState();
													StatsEvent$Builder v36 = v34.writeInt(v35);
													long v37 = p2.getTimeSinceCreatedMillis();
													StatsEvent$Builder v38 = v36.writeLong(v37);
													StatsEvent$Builder v39 = v38.usePooledBuffer();
													StatsEvent v40 = v39.build();
													StatsLog.write(v40);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void reportPlaybackStateEvent(String p1, PlaybackStateEvent p2, int p3){
	Object v2 = MediaMetricsManagerService.-$$Nest$fgetmLock(this.this$0);
	int v3 = Binder.getCallingUid();
	Integer v4 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		int v6 = DeviceConfig.getInt("media", "media_metrics_mode", 2);
		Integer v7 = Integer.valueOf(v6);
		MediaMetricsManagerService.-$$Nest$fputmMode(this.this$0, v7);
		Binder.restoreCallingIdentity(v5);
		Integer v10 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
		int v11 = v10.intValue();
		if (v11 != 1) {
			Integer v12 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
			int v13 = v12.intValue();
			if (v13 != 0) {
				Context v14 = this.this$0.getContext();
				PackageManager v15 = v14.getPackageManager();
				String v16 = v15.getPackagesForUid(v3);
				if (v16 == 0) {
					if (v16.length != 0) {
						Integer v17 = MediaMetricsManagerService.-$$Nest$fgetmMode(this.this$0);
						int v18 = v17.intValue();
						if (v18 != 2) {
							List v19 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
							if (v19 != 0) {
								List v20 = MediaMetricsManagerService.-$$Nest$mgetListLocked(this.this$0, "player_metrics_app_blocklist");
								MediaMetricsManagerService.-$$Nest$fputmBlockList(this.this$0, v20);
								List v22 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
								if (v22 != 0) {
									List v23 = MediaMetricsManagerService.-$$Nest$fgetmBlockList(this.this$0);
									Integer v24 = MediaMetricsManagerService$BinderService.loggingLevelInternal(v16, v23, "player_metrics_app_blocklist");
									if (v24 == 0) {
										int v25 = v24.intValue();
										int v1 = v25;
										if (v1 != 99999) {
											StatsEvent$Builder v26 = StatsEvent.newBuilder();
											StatsEvent$Builder v27 = v26.setAtomId(322);
											StatsEvent$Builder v28 = v27.writeString(p1);
											int v29 = this.mState;
											StatsEvent$Builder v30 = v28.writeInt(v29);
											long v31 = this.mTimeSinceCreatedMillis;
											StatsEvent$Builder v32 = v30.writeLong(v31);
											StatsEvent$Builder v33 = v32.usePooledBuffer();
											StatsEvent v34 = v33.build();
											StatsLog.write(v34);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void reportPlaybackStateEvent(String p1, PlaybackStateEvent p2, int p3){
	int v1 = p0.loggingLevel();
	if (v1 != 99999) {
		StatsEvent$Builder v2 = StatsEvent.newBuilder();
		StatsEvent$Builder v3 = v2.setAtomId(322);
		StatsEvent$Builder v4 = v3.writeString(p1);
		int v5 = p2.getState();
		StatsEvent$Builder v6 = v4.writeInt(v5);
		long v7 = p2.getTimeSinceCreatedMillis();
		StatsEvent$Builder v8 = v6.writeLong(v7);
		StatsEvent$Builder v9 = v8.usePooledBuffer();
		StatsEvent v10 = v9.build();
		StatsLog.write(v10);
		return;
	}
}

and the following sink code:
['StatsEvent$Builder v32 = StatsEvent.newBuilder();\nStatsEvent$Builder v33 = v32.setAtomId(322);\nStatsEvent$Builder v34 = v33.writeString(p1);\nint v35 = p2.getState();\nStatsEvent$Builder v36 = v34.writeInt(v35);\nlong v37 = p2.getTimeSinceCreatedMillis();\nStatsEvent$Builder v38 = v36.writeLong(v37);\nStatsEvent$Builder v39 = v38.usePooledBuffer();\nStatsEvent v40 = v39.build();\nStatsLog.write(v40);']

The method reportPlaybackStateEvent has the following similar APIs:

- API Name: reportTrackChangeEvent(Ljava/lang/String;Landroid/media/metrics/TrackChangeEvent;I)V with Similarity Score: 0.8698533773422241
  - Access Control Level: NONE and the following code:
int v1 = p0.loggingLevel();
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(324);
StatsEvent$Builder v4 = v3.writeString(p1);
...
StatsEvent$Builder v35 = v34.usePooledBuffer();
StatsEvent v36 = v35.build();
StatsLog.write(v36);

- API Name: reportPlaybackMetrics(Ljava/lang/String;Landroid/media/metrics/PlaybackMetrics;I)V with Similarity Score: 0.8663113117218018
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(320);
...
StatsEvent$Builder v40 = v39.usePooledBuffer();
StatsEvent v41 = v40.build();
StatsLog.write(v41);

