The method hasSliceAccess has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hasSliceAccess(String p1){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	long v7 = Binder.clearCallingIdentity();
	SliceManagerService$PackageMatchingCache v9 = SliceManagerService.getHomeMatcher(v5);
	boolean v10 = v9.matches(p1);
	boolean v8 = v10;
	if (v8 != 0) {
		SliceManagerService$PackageMatchingCache v12 = SliceManagerService.getAssistantMatcher(v5);
		boolean v13 = v12.matches(p1);
		boolean v11 = v13;
		if (v11 != 0) {
			boolean v15 = this.mPermissions.hasFullAccess(p1, v5);
			boolean v14 = v15;
			if (v14 == 0) {
				Binder.restoreCallingIdentity(v7);
				boolean v6 = 0;
				return v6;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean hasSliceAccess(String p1){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	long v7 = Binder.clearCallingIdentity();
	boolean v8 = SliceManagerService.isDefaultHomeApp(p1, v5);
	if (v8 != 0) {
		boolean v9 = SliceManagerService.isAssistant(p1, v5);
		if (v9 != 0) {
			boolean v10 = SliceManagerService.isGrantedFullAccess(p1, v5);
			if (v10 == 0) {
				Binder.restoreCallingIdentity(v7);
				boolean v6 = 0;
				return v6;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean hasSliceAccess(String p1){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	boolean v4 = p0.hasFullSliceAccess(p1, v3);
	return v4;
}

and the following sink code:
['UserHandle v4 = Binder.getCallingUserHandle();\nint v5 = v4.getIdentifier();\nSliceManagerService$PackageMatchingCache v9 = SliceManagerService.getHomeMatcher(v5);\nboolean v10 = v9.matches(p1);', 'UserHandle v4 = Binder.getCallingUserHandle();\nint v5 = v4.getIdentifier();\nboolean v8 = SliceManagerService.isDefaultHomeApp(p1, v5);\nboolean v9 = SliceManagerService.isAssistant(p1, v5);', 'p0.verifyCaller(p1);\nUserHandle v2 = Binder.getCallingUserHandle();\nint v3 = v2.getIdentifier();\nboolean v4 = p0.hasFullSliceAccess(p1, v3);']

The method hasSliceAccess has the following similar APIs:

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I with Similarity Score: 0.8826375007629395
  - Access Control Level: NORMAL and the following code:
int v1 = UserHandle.getUserId(p5);
boolean v4 = SliceManagerService.isDefaultHomeApp(p3, v1);
boolean v5 = SliceManagerService.isAssistant(p3, v1);
boolean v6 = SliceManagerService.isGrantedFullAccess(p3, v1);

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I with Similarity Score: 0.8228071928024292
  - Access Control Level: NORMAL and the following code:
int v1 = UserHandle.getUserId(p5);
SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(v1);
boolean v6 = v5.matches(p3);
SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(v1);
boolean v9 = v8.matches(p3);
boolean v11 = this.mPermissions.hasFullAccess(p3, v1);

