The method hasSliceAccess in the following class Lcom.android.server.slice.SliceManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hasSliceAccess(String p1){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	long v7 = Binder.clearCallingIdentity();
	SliceManagerService$PackageMatchingCache v9 = SliceManagerService.getHomeMatcher(v5);
	boolean v10 = v9.matches(p1);
	boolean v8 = v10;
	if (v8 != 0) {
		SliceManagerService$PackageMatchingCache v12 = SliceManagerService.getAssistantMatcher(v5);
		boolean v13 = v12.matches(p1);
		boolean v11 = v13;
		if (v11 != 0) {
			boolean v15 = this.mPermissions.hasFullAccess(p1, v5);
			boolean v14 = v15;
			if (v14 == 0) {
				Binder.restoreCallingIdentity(v7);
				boolean v6 = 0;
				return v6;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean hasSliceAccess(String p1){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	long v7 = Binder.clearCallingIdentity();
	boolean v8 = SliceManagerService.isDefaultHomeApp(p1, v5);
	if (v8 != 0) {
		boolean v9 = SliceManagerService.isAssistant(p1, v5);
		if (v9 != 0) {
			boolean v10 = SliceManagerService.isGrantedFullAccess(p1, v5);
			if (v10 == 0) {
				Binder.restoreCallingIdentity(v7);
				boolean v6 = 0;
				return v6;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean hasSliceAccess(String p1){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	boolean v4 = p0.hasFullSliceAccess(p1, v3);
	return v4;
}

and the following sink code:
['UserHandle v4 = Binder.getCallingUserHandle();\nint v5 = v4.getIdentifier();\nSliceManagerService$PackageMatchingCache v9 = SliceManagerService.getHomeMatcher(v5);\nboolean v10 = v9.matches(p1);', 'UserHandle v4 = Binder.getCallingUserHandle();\nint v5 = v4.getIdentifier();\nboolean v8 = SliceManagerService.isDefaultHomeApp(p1, v5);\nboolean v9 = SliceManagerService.isAssistant(p1, v5);', 'p0.verifyCaller(p1);\nUserHandle v2 = Binder.getCallingUserHandle();\nint v3 = v2.getIdentifier();\nboolean v4 = p0.hasFullSliceAccess(p1, v3);']

The method hasSliceAccess has the following similar APIs:

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.8826373219490051, Code:
int v1 = UserHandle.getUserId(p5);
boolean v4 = SliceManagerService.isDefaultHomeApp(p3, v1);
boolean v5 = SliceManagerService.isAssistant(p3, v1);
boolean v6 = SliceManagerService.isGrantedFullAccess(p3, v1);
  - Similarity: 0.8228071331977844, Code:
int v1 = UserHandle.getUserId(p5);
SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(v1);
boolean v6 = v5.matches(p3);
SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(v1);
boolean v9 = v8.matches(p3);
boolean v11 = this.mPermissions.hasFullAccess(p3, v1);
  - Access Control Level: NORMAL

- API Name: getPinnedSpecs(Landroid/net/Uri;Ljava/lang/String;)[Landroid/app/slice/SliceSpec; in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.7641995549201965, Code:
UserHandle v27 = Binder.getCallingUserHandle();
int v28 = v27.getIdentifier();
Uri v29 = ContentProvider.maybeAddUserId(p1, v28);
PinnedSliceState v30 = p0.getPinnedSlice(v29);
SliceSpec v31 = v30.getSpecs();
return v31;
  - Similarity: 0.7417253851890564, Code:
int v7 = SliceManagerService.checkAccess(p2, p1, v5, v6);
UserHandle v8 = Binder.getCallingUserHandle();
int v9 = v8.getIdentifier();
int v10 = ContentProvider.getUserIdFromUri(p1, v9);
String v11 = SliceManagerService.getProviderPkg(p1, v10);
boolean v12 = Objects.equals(p2, v11);
SliceManagerService.enforceCrossUser(p2, p1);
Uri v16 = ContentProvider.maybeAddUserId(p1, v15);
Object v18 = this.mPinnedSlicesByUri.get(v16);
SliceSpec v19 = this.mSupportedSpecs;
return v19;
  - Access Control Level: SYS_OR_SIG

- API Name: getMediaKeyEventSessionPackageName(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.media.MediaSessionService$SessionManagerImpl with the following sink code entries:
  - Similarity: 0.7422211170196533, Code:
int v1 = Binder.getCallingPid();
int v2 = Binder.getCallingUid();
UserHandle v3 = UserHandle.getUserHandleForUid(v2);
int v4 = v3.getIdentifier();
Object v14 = MediaSessionService.-$$Nest$fgetmLock(this.this$0);
MediaSessionService$FullUserRecord v15 = this.mUserRecords.get(v17);
MediaButtonReceiverHolder v23 = MediaSessionService$FullUserRecord.-$$Nest$fgetmLastMediaButtonReceiverHolder(v15);
String v25 = v24.getPackageName();
return v25;
  - Similarity: 0.7405503988265991, Code:
int v2 = Binder.getCallingUid();
UserHandle v3 = UserHandle.getUserHandleForUid(v2);
int v4 = v3.getIdentifier();
MediaSessionService$FullUserRecord v9 = MediaSessionService.-$$Nest$mgetFullUserRecordLocked(this.this$0, v4);
MediaButtonReceiverHolder v11 = MediaSessionService$FullUserRecord.-$$Nest$fgetmLastMediaButtonReceiverHolder(v9);
String v13 = v12.getPackageName();
return v13;
  - Access Control Level: SYS_OR_SIG

- API Name: getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List; in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7393910884857178, Code:
int v9 = Binder.getCallingUid();
IPackageManager v10 = AppGlobals.getPackageManager();
String v11 = v10.getPackagesForUid(v9);
UserManager$EnforcingUser v27 = new UserManager$EnforcingUser(-10000,1);
boolean v29 = v3.add(v27);
  - Access Control Level: SYS_OR_SIG

- API Name: getSearchablesInGlobalSearch()Ljava/util/List; in the following Class: Lcom.android.server.search.SearchManagerService with the following sink code entries:
  - Similarity: 0.7393079996109009, Code:
int v1 = UserHandle.getCallingUserId();
long v4 = Binder.clearCallingIdentity();
Object v5 = this.mContext.getSystemService(UserManage.class);
UserInfo v6 = v5.getUserInfo(v1);
Searchables v10 = new Searchables(this.mContext,v1);
v10.updateSearchableList();
this.mSearchables.append(v1, v10);
ArrayList v16 = new ArrayList();
Iterator v22 = this.mSearchablesInGlobalSearchList.iterator();
Object v24 = v22.next();
ComponentName v25 = v24.getSearchActivity();
boolean v26 = v19.canAccessComponent(v20, v25, v21);
ArrayList v15 = v16;
return v14;
  - Access Control Level: NONE

