This is path 1 for the API with depth 2:
public boolean hasSliceAccess(String p1){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	long v7 = Binder.clearCallingIdentity();
	SliceManagerService$PackageMatchingCache v9 = SliceManagerService.getHomeMatcher(v5);
	boolean v10 = v9.matches(p1);
	boolean v8 = v10;
	if (v8 != 0) {
		SliceManagerService$PackageMatchingCache v12 = SliceManagerService.getAssistantMatcher(v5);
		boolean v13 = v12.matches(p1);
		boolean v11 = v13;
		if (v11 != 0) {
			boolean v15 = this.mPermissions.hasFullAccess(p1, v5);
			boolean v14 = v15;
			if (v14 == 0) {
				Binder.restoreCallingIdentity(v7);
				boolean v6 = 0;
				return v6;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean hasSliceAccess(String p1){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	long v7 = Binder.clearCallingIdentity();
	boolean v8 = SliceManagerService.isDefaultHomeApp(p1, v5);
	if (v8 != 0) {
		boolean v9 = SliceManagerService.isAssistant(p1, v5);
		if (v9 != 0) {
			boolean v10 = SliceManagerService.isGrantedFullAccess(p1, v5);
			if (v10 == 0) {
				Binder.restoreCallingIdentity(v7);
				boolean v6 = 0;
				return v6;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean hasSliceAccess(String p1){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	boolean v4 = p0.hasFullSliceAccess(p1, v3);
	return v4;
}
