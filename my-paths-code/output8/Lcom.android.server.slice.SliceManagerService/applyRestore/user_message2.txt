The method applyRestore in the following class Lcom.android.server.slice.SliceManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void applyRestore(byte[] p1, int p2){
	if (p1 != 0) {
		if (p2 == 0) {
			ByteArrayInputStream v2 = new ByteArrayInputStream(p1);
			XmlPullParserFactory v4 = XmlPullParserFactory.newInstance();
			XmlPullParser v5 = v4.newPullParser();
			String v6 = Xml$Encoding.UTF_8.name();
			v5.setInput(v2, v6);
			int v9 = v5.getEventType();
			if (v9 != 2) {
				String v10 = v5.getName();
				boolean v11 = "slice-access-list".equals(v10);
				if (v11 != 0) {
					int v12 = v5.getEventType();
					if (v12 == 1) {
						int v13 = v5.next();
						int v14 = v5.getEventType();
						if (v14 != 2) {
							String v15 = v5.getName();
							boolean v16 = "slice-access-list".equals(v15);
							if (v16 != 0) {
								int v17 = v5.getEventType();
								if (v17 == 1) {
									if (v5 instanceof TypedXmlPullParser == 0) {
										String v19 = v5.getAttributeValue(0, "version");
										boolean v20 = TextUtils.isEmpty(v19);
										if (v20 == 0) {
											int v21 = Integer.parseInt(v19);
											int v18 = 0;
											if (v18 >= 2) {
												int v22 = v5.getEventType();
												if (v22 == 1) {
													int v23 = v5.getEventType();
													if (v23 != 2) {
														String v24 = v5.getName();
														boolean v25 = "client".equals(v24);
														if (v25 == 0) {
															int v27 = v5.getEventType();
															if (v27 != 2) {
																String v28 = v5.getName();
																boolean v29 = "client".equals(v28);
																if (v29 != 0) {
																	int v30 = v5.getEventType();
																	if (v30 == 1) {
																		int v31 = v5.next();
																		int v32 = v5.getEventType();
																		if (v32 != 2) {
																			String v33 = v5.getName();
																			boolean v34 = "client".equals(v33);
																			if (v34 != 0) {
																				int v35 = v5.getDepth();
																				SlicePermissionManager$PkgUser v36 = new SlicePermissionManager$PkgUser(v37);
																				String v37 = v5.getAttributeValue(this.NAMESPACE, "pkg");
																				SliceClientPermissions v39 = new SliceClientPermissions(v36,SlicePermissionManager);
																				String v41 = v5.getAttributeValue(this.NAMESPACE, "fullAccess");
																				if (v41 != 0) {
																					int v42 = Integer.parseInt(v41);
																					if (v42 == 0) {
																						this.mHasFullAccess = 1;
																						int v43 = v5.next();
																						int v44 = v5.getDepth();
																						if (v44 <= v35) {
																							int v45 = v5.getEventType();
																							if (v45 != 1) {
																								int v46 = v5.getEventType();
																								if (v46 != 2) {
																									String v47 = v5.getName();
																									boolean v48 = "authority".equals(v47);
																									if (v48 == 0) {
																										int v49 = v5.next();
																										int v50 = v5.getDepth();
																										if (v50 <= v35) {
																											int v51 = v5.getEventType();
																											if (v51 != 1) {
																												SliceClientPermissions v26 = v39;
																												SlicePermissionManager$PkgUser v52 = this.mPkg;
																												Object v53 = this.mCachedClients.put(v52, v26);
																												this.mHandler.removeMessages(2);
																												Message v56 = this.mHandler.obtainMessage(1, v26);
																												v56.sendToTarget();
																												boolean v58 = this.mHandler.sendEmptyMessageDelayed(2, 500);
																												SlicePermissionManager$PkgUser v59 = this.mPkg;
																												Message v60 = this.mHandler.obtainMessage(4, v59);
																												boolean v61 = this.mHandler.sendMessageDelayed(v60, 300000);
																												int v62 = v5.getEventType();
																												if (v62 == 1) {
																													return;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void applyRestore(byte[] p1, int p2){
	if (p1 != 0) {
		if (p2 == 0) {
			ByteArrayInputStream v2 = new ByteArrayInputStream(p1);
			XmlPullParserFactory v4 = XmlPullParserFactory.newInstance();
			XmlPullParser v5 = v4.newPullParser();
			String v6 = Xml$Encoding.UTF_8.name();
			v5.setInput(v2, v6);
			int v9 = v5.getEventType();
			if (v9 != 2) {
				String v10 = v5.getName();
				boolean v11 = "slice-access-list".equals(v10);
				if (v11 != 0) {
					int v12 = v5.getEventType();
					if (v12 == 1) {
						int v13 = v5.next();
						int v14 = v5.getEventType();
						if (v14 != 2) {
							String v15 = v5.getName();
							boolean v16 = "slice-access-list".equals(v15);
							if (v16 != 0) {
								int v17 = v5.getEventType();
								if (v17 == 1) {
									int v18 = XmlUtils.readIntAttribute(v5, "version", 0);
									if (v18 >= 2) {
										int v19 = v5.getEventType();
										if (v19 == 1) {
											int v20 = v5.getEventType();
											if (v20 != 2) {
												String v21 = v5.getName();
												boolean v22 = "client".equals(v21);
												if (v22 == 0) {
													String v23 = v5.getName();
													boolean v24 = "provider".equals(v23);
													if (v24 == 0) {
														SliceProviderPermissions v25 = SliceProviderPermissions.createFrom(v5, SlicePermissionManager);
														SlicePermissionManager$PkgUser v26 = v25.getPkg();
														Object v27 = this.mCachedProviders.put(v26, v25);
														SlicePermissionManager.onPersistableDirty(v25);
														SlicePermissionManager$PkgUser v29 = v25.getPkg();
														Message v30 = this.mHandler.obtainMessage(5, v29);
														boolean v31 = this.mHandler.sendMessageDelayed(v30, 300000);
														int v32 = v5.getEventType();
														if (v32 == 1) {
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void applyRestore(byte[] p1, int p2){
	if (p1 != 0) {
		if (p2 == 0) {
			ByteArrayInputStream v2 = new ByteArrayInputStream(p1);
			XmlPullParserFactory v4 = XmlPullParserFactory.newInstance();
			XmlPullParser v5 = v4.newPullParser();
			String v6 = Xml$Encoding.UTF_8.name();
			v5.setInput(v2, v6);
			this.mPermissions.readRestore(v5);
			return;
		}
	}
}

and the following sink code:
['ByteArrayInputStream v2 = new ByteArrayInputStream(p1);\nXmlPullParserFactory v4 = XmlPullParserFactory.newInstance();\nXmlPullParser v5 = v4.newPullParser();\nString v6 = Xml$Encoding.UTF_8.name();\nv5.setInput(v2, v6);\nSlicePermissionManager$PkgUser v36 = new SlicePermissionManager$PkgUser(v37);\nSliceClientPermissions v39 = new SliceClientPermissions(v36,SlicePermissionManager);\nObject v53 = this.mCachedClients.put(v52, v26);', 'ByteArrayInputStream v2 = new ByteArrayInputStream(p1);\nXmlPullParserFactory v4 = XmlPullParserFactory.newInstance();\nXmlPullParser v5 = v4.newPullParser();\nString v6 = Xml$Encoding.UTF_8.name();\nv5.setInput(v2, v6);\nSliceProviderPermissions v25 = SliceProviderPermissions.createFrom(v5, SlicePermissionManager);\nObject v27 = this.mCachedProviders.put(v26, v25);', 'ByteArrayInputStream v2 = new ByteArrayInputStream(p1);\nXmlPullParserFactory v4 = XmlPullParserFactory.newInstance();\nXmlPullParser v5 = v4.newPullParser();\nString v6 = Xml$Encoding.UTF_8.name();\nv5.setInput(v2, v6);\nthis.mPermissions.readRestore(v5);']

The method applyRestore has the following similar APIs:

- API Name: enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.8125337958335876, Code:
ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);
ShortcutPackage v14 = v13.getPackageShortcuts(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.7634369134902954, Code:
Object v10 = this.mUsers.get(p3);
ShortcutUser v11 = ShortcutService.loadUserLocked(p3);
this.mUsers.put(p3, v11);
ShortcutPackage v17 = ShortcutUser.getPackageShortcutsIfExists(p2);
ShortcutPackage v18 = new ShortcutPackage(ShortcutUser,this.mUserId,p2);
this.mPackages.put(p2, v18);
boolean v21 = v6.hasShareTargets();
return v21;
  - Access Control Level: SYS_OR_SIG

- API Name: removeAllDynamicShortcuts(Ljava/lang/String;I)V in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.7478681802749634, Code:
ShortcutService.injectGetPackageUid(p1, p2);
ShortcutUser v14 = ShortcutService.getUserShortcutsLocked(p2);
ShortcutPackage v15 = v14.getPackageShortcuts(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: getShareTargets(Ljava/lang/String;Landroid/content/IntentFilter;I)Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.7445378303527832, Code:
boolean v8 = this.mUnlockedUsers.get(p3);
int v38 = v32.size();
ShortcutUser v24 = ShortcutService.loadUserInternal(p3, v23, 0);
ParceledListSlice v49 = new ParceledListSlice(v10);
  - Similarity: 0.7262192964553833, Code:
boolean v7 = ShortcutService.isUserUnlockedL(p3);
ShortcutUser v14 = ShortcutService.loadUserLocked(p3);
ParceledListSlice v25 = new ParceledListSlice(v8);
  - Access Control Level: SYS_OR_SIG

- API Name: getBackupPayload(I)[B in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.7379825115203857, Code:
ByteArrayOutputStream v39 = new ByteArrayOutputStream(32768);
TypedXmlSerializer v42 = Xml.newFastSerializer();
String v43 = StandardCharsets.UTF_8.name();
v42.setOutput(v39, v43);
v42.startDocument(0, Boolean.TRUE);
ShortcutUser v46 = ShortcutService.getUserShortcutsLocked(p1);
v46.saveToXml(v42, 1);
v42.endDocument();
v39.flush();
byte[] v50 = v39.toByteArray();
return v50;
  - Access Control Level: SYS_OR_SIG

