The method grantPermissionFromUser has the following code snippet:

This is path 1 for the API with depth 2:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	if (p4 == 0) {
		Uri$Builder v6 = p1.buildUpon();
		Uri$Builder v7 = v6.path("");
		Uri v8 = v7.build();
		int v9 = ContentProvider.getUserIdFromUri(v8, v5);
		long v11 = Binder.clearCallingIdentity();
		Uri v12 = ContentProvider.getUriWithoutUserId(v8);
		String v13 = v12.getAuthority();
		PackageManager v14 = this.mContext.getPackageManager();
		int v15 = ContentProvider.getUserIdFromUri(v8, v9);
		ProviderInfo v16 = v14.resolveContentProviderAsUser(v13, 0, v15);
		Binder.restoreCallingIdentity(v11);
		String v10 = ProviderInfo.packageName;
		SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
		SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
		Object v24 = this.mCachedClients.get(v19);
		if (v24 != 0) {
			String v25 = SliceClientPermissions.getFileName(v19);
			SlicePermissionManager$ParserHolder v26 = SlicePermissionManager.getParser(v25);
			XmlPullParser v27 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v26);
			if (v26 == 0) {
				v26.close();
				caughtException.addSuppressed(caughtException);
				SliceClientPermissions v30 = new SliceClientPermissions(v19,SlicePermissionManager);
				Object v32 = this.mCachedClients.put(v19, v30);
				SliceClientPermissions v23 = v24;
				SlicePermissionManager$PkgUser v34 = new SlicePermissionManager$PkgUser(v35,v36);
				String v35 = v8.getAuthority();
				int v36 = v21.getUserId();
				SliceClientPermissions$SliceAuthority v38 = SliceClientPermissions.getOrCreateAuthority(v34, v21);
				List v39 = v8.getPathSegments();
				v38.addPath(v39);
				Object v42 = this.mCachedProviders.get(v21);
				if (v42 != 0) {
					String v43 = SliceProviderPermissions.getFileName(v21);
					SlicePermissionManager$ParserHolder v44 = SlicePermissionManager.getParser(v43);
					XmlPullParser v45 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v44);
					if (v44 == 0) {
						v44.close();
						caughtException.addSuppressed(caughtException);
						SliceProviderPermissions v48 = new SliceProviderPermissions(v21,SlicePermissionManager);
						Object v50 = this.mCachedProviders.put(v21, v48);
						SliceProviderPermissions v41 = v42;
						Uri v51 = ContentProvider.getUriWithoutUserId(v8);
						String v52 = v51.getAuthority();
						Object v54 = this.mAuths.get(v52);
						if (v54 != 0) {
							SliceProviderPermissions$SliceAuthority v55 = new SliceProviderPermissions$SliceAuthority(v52,SliceProviderPermissions);
							Object v57 = this.mAuths.put(v52, v55);
							SliceProviderPermissions.onPersistableDirty(v55);
							SliceProviderPermissions$SliceAuthority v53 = v54;
							boolean v60 = this.mPkgs.add(v19);
							if (v60 == 0) {
								this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
								long v62 = Binder.clearCallingIdentity();
								ContentResolver v63 = this.mContext.getContentResolver();
								v63.notifyChange(p1, 0);
								Binder.restoreCallingIdentity(v62);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	if (p4 == 0) {
		Uri$Builder v6 = p1.buildUpon();
		Uri$Builder v7 = v6.path("");
		Uri v8 = v7.build();
		int v9 = ContentProvider.getUserIdFromUri(v8, v5);
		long v11 = Binder.clearCallingIdentity();
		Uri v12 = ContentProvider.getUriWithoutUserId(v8);
		String v13 = v12.getAuthority();
		PackageManager v14 = this.mContext.getPackageManager();
		int v15 = ContentProvider.getUserIdFromUri(v8, v9);
		ProviderInfo v16 = v14.resolveContentProviderAsUser(v13, 0, v15);
		Binder.restoreCallingIdentity(v11);
		String v10 = ProviderInfo.packageName;
		SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
		SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
		SliceClientPermissions v23 = SlicePermissionManager.getClient(v19);
		v23.grantUri(v8, v21);
		SliceProviderPermissions v25 = SlicePermissionManager.getProvider(v21);
		Uri v26 = ContentProvider.getUriWithoutUserId(v8);
		String v27 = v26.getAuthority();
		SliceProviderPermissions$SliceAuthority v28 = v25.getOrCreateAuthority(v27);
		v28.addPkg(v19);
		long v30 = Binder.clearCallingIdentity();
		ContentResolver v31 = this.mContext.getContentResolver();
		v31.notifyChange(p1, 0);
		Binder.restoreCallingIdentity(v30);
		return;
	}
}


This is path 3 for the API with depth 0:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	if (p4 == 0) {
		Uri$Builder v6 = p1.buildUpon();
		Uri$Builder v7 = v6.path("");
		Uri v8 = v7.build();
		int v9 = ContentProvider.getUserIdFromUri(v8, v5);
		String v10 = p0.getProviderPkg(v8, v9);
		this.mPermissions.grantSliceAccess(p2, v5, v10, v9, v8);
		long v12 = Binder.clearCallingIdentity();
		ContentResolver v13 = this.mContext.getContentResolver();
		v13.notifyChange(p1, 0);
		Binder.restoreCallingIdentity(v12);
		return;
	}
}

and the following sink code:
['SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);\nSlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);\nObject v24 = this.mCachedClients.get(v19);\nSliceClientPermissions v30 = new SliceClientPermissions(v19,SlicePermissionManager);', 'XmlPullParser v27 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v26);\nif (v26 == 0) { v26.close(); }', 'SliceClientPermissions$SliceAuthority v38 = SliceClientPermissions.getOrCreateAuthority(v34, v21);\nList v39 = v8.getPathSegments();\nv38.addPath(v39);', 'SliceClientPermissions v23 = SlicePermissionManager.getClient(v19);\nv23.grantUri(v8, v21);', 'this.mPermissions.grantSliceAccess(p2, v5, v10, v9, v8);']

The method grantPermissionFromUser has the following similar APIs:

- API Name: revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.8648988604545593
  - Access Control Level: NONE and the following code:
Object v13 = this.mCachedClients.get(v8);
String v14 = SliceClientPermissions.getFileName(v8);
SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
SliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);
Object v21 = this.mCachedClients.put(v8, v19);
SliceClientPermissions$SliceAuthority v27 = SliceClientPermissions.getOrCreateAuthority(v23, v10);
v27.removePath(v28);

- API Name: revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.8583168983459473
  - Access Control Level: NONE and the following code:
this.mPermissions.revokeSliceAccess(p2, v3, p1, v3, p3);

