The method getPinnedSpecs in the following class Lcom.android.server.slice.SliceManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public SliceSpec getPinnedSpecs(Uri p1, String p2){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p1, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p1);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p1, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p2, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p1, v28);
			PinnedSliceState v30 = p0.getPinnedSlice(v29);
			SliceSpec v31 = v30.getSpecs();
			return v31;
		}
	}
}


This is path 2 for the API with depth 1:
public SliceSpec getPinnedSpecs(Uri p1, String p2){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = SliceManagerService.checkAccess(p2, p1, v5, v6);
	if (v7 == 0) {
		UserHandle v8 = Binder.getCallingUserHandle();
		int v9 = v8.getIdentifier();
		int v10 = ContentProvider.getUserIdFromUri(p1, v9);
		String v11 = SliceManagerService.getProviderPkg(p1, v10);
		boolean v12 = Objects.equals(p2, v11);
		if (v12 == 0) {
			SliceManagerService.enforceCrossUser(p2, p1);
			UserHandle v14 = Binder.getCallingUserHandle();
			int v15 = v14.getIdentifier();
			Uri v16 = ContentProvider.maybeAddUserId(p1, v15);
			Object v18 = this.mPinnedSlicesByUri.get(v16);
			if (v18 == 0) {
				PinnedSliceState v17 = v18;
				SliceSpec v19 = this.mSupportedSpecs;
				return v19;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public SliceSpec getPinnedSpecs(Uri p1, String p2){
	p0.verifyCaller(p2);
	p0.enforceAccess(p2, p1);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p1, v4);
	PinnedSliceState v6 = p0.getPinnedSlice(v5);
	SliceSpec v7 = v6.getSpecs();
	return v7;
}

and the following sink code:
['UserHandle v27 = Binder.getCallingUserHandle();\nint v28 = v27.getIdentifier();\nUri v29 = ContentProvider.maybeAddUserId(p1, v28);\nPinnedSliceState v30 = p0.getPinnedSlice(v29);\nSliceSpec v31 = v30.getSpecs();\nreturn v31;', 'int v7 = SliceManagerService.checkAccess(p2, p1, v5, v6);\nUserHandle v8 = Binder.getCallingUserHandle();\nint v9 = v8.getIdentifier();\nint v10 = ContentProvider.getUserIdFromUri(p1, v9);\nString v11 = SliceManagerService.getProviderPkg(p1, v10);\nboolean v12 = Objects.equals(p2, v11);\nSliceManagerService.enforceCrossUser(p2, p1);\nUri v16 = ContentProvider.maybeAddUserId(p1, v15);\nObject v18 = this.mPinnedSlicesByUri.get(v16);\nSliceSpec v19 = this.mSupportedSpecs;\nreturn v19;', 'p0.verifyCaller(p2);\np0.enforceAccess(p2, p1);\nUserHandle v3 = Binder.getCallingUserHandle();\nint v4 = v3.getIdentifier();\nUri v5 = ContentProvider.maybeAddUserId(p1, v4);\nPinnedSliceState v6 = p0.getPinnedSlice(v5);\nSliceSpec v7 = v6.getSpecs();\nreturn v7;']

The method getPinnedSpecs has the following similar APIs:

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.8403754234313965, Code:
int v1 = UserHandle.getUserId(p5);
SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(v1);
boolean v6 = v5.matches(p3);
SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(v1);
boolean v9 = v8.matches(p3);
boolean v11 = this.mPermissions.hasFullAccess(p3, v1);
  - Similarity: 0.8281914591789246, Code:
int v1 = UserHandle.getUserId(p5);
boolean v4 = SliceManagerService.isDefaultHomeApp(p3, v1);
boolean v5 = SliceManagerService.isAssistant(p3, v1);
boolean v6 = SliceManagerService.isGrantedFullAccess(p3, v1);
  - Access Control Level: NORMAL

- API Name: hasSliceAccess(Ljava/lang/String;)Z in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.7641995549201965, Code:
UserHandle v4 = Binder.getCallingUserHandle();
int v5 = v4.getIdentifier();
SliceManagerService$PackageMatchingCache v9 = SliceManagerService.getHomeMatcher(v5);
boolean v10 = v9.matches(p1);
  - Similarity: 0.7417253851890564, Code:
UserHandle v4 = Binder.getCallingUserHandle();
int v5 = v4.getIdentifier();
boolean v8 = SliceManagerService.isDefaultHomeApp(p1, v5);
boolean v9 = SliceManagerService.isAssistant(p1, v5);
  - Similarity: 0.7193415760993958, Code:
p0.verifyCaller(p1);
UserHandle v2 = Binder.getCallingUserHandle();
int v3 = v2.getIdentifier();
boolean v4 = p0.hasFullSliceAccess(p1, v3);
  - Access Control Level: NONE

- API Name: getMediaKeyEventSessionPackageName(Ljava/lang/String;)Ljava/lang/String; in the following Class: Lcom.android.server.media.MediaSessionService$SessionManagerImpl with the following sink code entries:
  - Similarity: 0.7160646319389343, Code:
int v2 = Binder.getCallingUid();
UserHandle v3 = UserHandle.getUserHandleForUid(v2);
int v4 = v3.getIdentifier();
MediaSessionService$FullUserRecord v9 = MediaSessionService.-$$Nest$mgetFullUserRecordLocked(this.this$0, v4);
MediaButtonReceiverHolder v11 = MediaSessionService$FullUserRecord.-$$Nest$fgetmLastMediaButtonReceiverHolder(v9);
String v13 = v12.getPackageName();
return v13;
  - Access Control Level: SYS_OR_SIG

- API Name: revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.7130693197250366, Code:
Object v13 = this.mCachedClients.get(v8);
String v14 = SliceClientPermissions.getFileName(v8);
SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
SliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);
Object v21 = this.mCachedClients.put(v8, v19);
SliceClientPermissions$SliceAuthority v27 = SliceClientPermissions.getOrCreateAuthority(v23, v10);
v27.removePath(v28);
  - Access Control Level: NONE

- API Name: grantPermissionFromUser(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.710818886756897, Code:
SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
Object v24 = this.mCachedClients.get(v19);
SliceClientPermissions v30 = new SliceClientPermissions(v19,SlicePermissionManager);
  - Access Control Level: SYS_OR_SIG

