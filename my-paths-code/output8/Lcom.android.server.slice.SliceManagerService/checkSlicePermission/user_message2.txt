The method checkSlicePermission in the following class Lcom.android.server.slice.SliceManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		long v3 = Binder.clearCallingIdentity();
		SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(v1);
		boolean v6 = v5.matches(p3);
		boolean v4 = v6;
		if (v4 != 0) {
			SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(v1);
			boolean v9 = v8.matches(p3);
			boolean v7 = v9;
			if (v7 != 0) {
				boolean v11 = this.mPermissions.hasFullAccess(p3, v1);
				boolean v10 = v11;
				if (v10 == 0) {
					Binder.restoreCallingIdentity(v3);
					boolean v2 = 0;
					if (v2 == 0) {
						if (v13 == 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		long v3 = Binder.clearCallingIdentity();
		boolean v4 = SliceManagerService.isDefaultHomeApp(p3, v1);
		if (v4 != 0) {
			boolean v5 = SliceManagerService.isAssistant(p3, v1);
			if (v5 != 0) {
				boolean v6 = SliceManagerService.isGrantedFullAccess(p3, v1);
				if (v6 == 0) {
					Binder.restoreCallingIdentity(v3);
					boolean v2 = 0;
					if (v2 == 0) {
						if (v8 == 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		PackageManager v2 = this.mContext.getPackageManager();
		String v3 = v2.getPackagesForUid(p5);
		if (0 >= v3.length) {
			if (v4 != 0) {
				if ((0 + 1) >= v3.length) {
					if (v5 != 0) {
						return 0;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getUserId(p5);\nSliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(v1);\nboolean v6 = v5.matches(p3);\nSliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(v1);\nboolean v9 = v8.matches(p3);\nboolean v11 = this.mPermissions.hasFullAccess(p3, v1);', 'int v1 = UserHandle.getUserId(p5);\nboolean v4 = SliceManagerService.isDefaultHomeApp(p3, v1);\nboolean v5 = SliceManagerService.isAssistant(p3, v1);\nboolean v6 = SliceManagerService.isGrantedFullAccess(p3, v1);', 'int v1 = UserHandle.getUserId(p5);\nPackageManager v2 = this.mContext.getPackageManager();\nString v3 = v2.getPackagesForUid(p5);']

The method checkSlicePermission has the following similar APIs:

- API Name: hasSliceAccess(Ljava/lang/String;)Z in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.8826373219490051, Code:
UserHandle v4 = Binder.getCallingUserHandle();
int v5 = v4.getIdentifier();
boolean v8 = SliceManagerService.isDefaultHomeApp(p1, v5);
boolean v9 = SliceManagerService.isAssistant(p1, v5);
  - Similarity: 0.8228071331977844, Code:
UserHandle v4 = Binder.getCallingUserHandle();
int v5 = v4.getIdentifier();
SliceManagerService$PackageMatchingCache v9 = SliceManagerService.getHomeMatcher(v5);
boolean v10 = v9.matches(p1);
  - Access Control Level: NONE

- API Name: getPinnedSpecs(Landroid/net/Uri;Ljava/lang/String;)[Landroid/app/slice/SliceSpec; in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.8403754234313965, Code:
int v7 = SliceManagerService.checkAccess(p2, p1, v5, v6);
UserHandle v8 = Binder.getCallingUserHandle();
int v9 = v8.getIdentifier();
int v10 = ContentProvider.getUserIdFromUri(p1, v9);
String v11 = SliceManagerService.getProviderPkg(p1, v10);
boolean v12 = Objects.equals(p2, v11);
SliceManagerService.enforceCrossUser(p2, p1);
Uri v16 = ContentProvider.maybeAddUserId(p1, v15);
Object v18 = this.mPinnedSlicesByUri.get(v16);
SliceSpec v19 = this.mSupportedSpecs;
return v19;
  - Access Control Level: SYS_OR_SIG

- API Name: addOnAppsChangedListener(Ljava/lang/String;Landroid/content/pm/IOnAppsChangedListener;)V in the following Class: Lcom.android.server.pm.LauncherAppsService$LauncherAppsImpl with the following sink code entries:
  - Similarity: 0.7961581945419312, Code:
int v3 = ILauncherApps$Stub.getCallingUid();
int v5 = UserHandle.getUserId(v2);
int v6 = this.mIPM.getPackageUid(p1, 794624, v5);
  - Access Control Level: NONE

- API Name: checkPhoneNumberAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)I in the following Class: Lcom.android.server.pm.permission.LegacyPermissionManagerService with the following sink code entries:
  - Similarity: 0.79509437084198, Code:
PackageManager v4 = this.mContext.getPackageManager();
UserHandle v5 = UserHandle.getUserHandleForUid(p5);
ApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);
  - Access Control Level: DANGEROUS

- API Name: setUserRestriction(Ljava/lang/String;ZI)V in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7902869582176208, Code:
int v4 = Binder.getCallingUid();
IPackageManager v6 = ActivityThread.getPackageManager();
IPackageManager v5 = v6;
String v7 = v5.getPackagesForUid(v4);
boolean v24 = v23.isSystemApp();
Bundle v27 = this.mBaseUserRestrictions.getRestrictions(p3);
Bundle v28 = BundleUtils.clone(v27);
v28.putBoolean(p1, p2);
  - Access Control Level: SYS_OR_SIG

