The method grantSlicePermission in the following class Lcom.android.server.slice.SliceManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void grantSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	if (v13 != 0) {
		String v14 = SliceClientPermissions.getFileName(v8);
		SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
		XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
		if (v15 == 0) {
			v15.close();
			caughtException.addSuppressed(caughtException);
			SliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);
			Object v21 = this.mCachedClients.put(v8, v19);
			SliceClientPermissions v12 = v13;
			SlicePermissionManager$PkgUser v23 = new SlicePermissionManager$PkgUser(v24,v25);
			String v24 = p3.getAuthority();
			int v25 = v10.getUserId();
			SliceClientPermissions$SliceAuthority v27 = SliceClientPermissions.getOrCreateAuthority(v23, v10);
			List v28 = p3.getPathSegments();
			v27.addPath(v28);
			Object v31 = this.mCachedProviders.get(v10);
			if (v31 != 0) {
				String v32 = SliceProviderPermissions.getFileName(v10);
				SlicePermissionManager$ParserHolder v33 = SlicePermissionManager.getParser(v32);
				XmlPullParser v34 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v33);
				if (v33 == 0) {
					v33.close();
					caughtException.addSuppressed(caughtException);
					SliceProviderPermissions v37 = new SliceProviderPermissions(v10,SlicePermissionManager);
					Object v39 = this.mCachedProviders.put(v10, v37);
					SliceProviderPermissions v30 = v31;
					Uri v40 = ContentProvider.getUriWithoutUserId(p3);
					String v41 = v40.getAuthority();
					Object v43 = this.mAuths.get(v41);
					if (v43 != 0) {
						SliceProviderPermissions$SliceAuthority v44 = new SliceProviderPermissions$SliceAuthority(v41,SliceProviderPermissions);
						Object v46 = this.mAuths.put(v41, v44);
						SliceProviderPermissions.onPersistableDirty(v44);
						SliceProviderPermissions$SliceAuthority v42 = v43;
						boolean v49 = this.mPkgs.add(v8);
						if (v49 == 0) {
							this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void grantSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	SliceClientPermissions v12 = SlicePermissionManager.getClient(v8);
	v12.grantUri(p3, v10);
	SliceProviderPermissions v14 = SlicePermissionManager.getProvider(v10);
	Uri v15 = ContentProvider.getUriWithoutUserId(p3);
	String v16 = v15.getAuthority();
	SliceProviderPermissions$SliceAuthority v17 = v14.getOrCreateAuthority(v16);
	v17.addPkg(v8);
	return;
}


This is path 3 for the API with depth 0:
public void grantSlicePermission(String p1, String p2, Uri p3){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	p0.enforceOwner(p1, p3, v3);
	this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);
	return;
}

and the following sink code:
['SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);\nSlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);\np0.enforceOwner(p1, p3, v5);\nthis.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);', 'v12.grantUri(p3, v10);\nv17.addPkg(v8);']

The method grantSlicePermission has the following similar APIs:

- API Name: grantPermissionFromUser(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.839462399482727, Code:
this.mPermissions.grantSliceAccess(p2, v5, v10, v9, v8);
  - Similarity: 0.8031797409057617, Code:
SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
Object v24 = this.mCachedClients.get(v19);
SliceClientPermissions v30 = new SliceClientPermissions(v19,SlicePermissionManager);
  - Similarity: 0.7591148018836975, Code:
SliceClientPermissions$SliceAuthority v38 = SliceClientPermissions.getOrCreateAuthority(v34, v21);
List v39 = v8.getPathSegments();
v38.addPath(v39);
  - Similarity: 0.7358622550964355, Code:
SliceClientPermissions v23 = SlicePermissionManager.getClient(v19);
v23.grantUri(v8, v21);
  - Access Control Level: SYS_OR_SIG

- API Name: revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.8194299936294556, Code:
this.mPermissions.revokeSliceAccess(p2, v3, p1, v3, p3);
  - Similarity: 0.7713343501091003, Code:
v12.revokeUri(p3, v10);
  - Access Control Level: NONE

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.7371857166290283, Code:
int v1 = UserHandle.getUserId(p5);
SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(v1);
boolean v6 = v5.matches(p3);
SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(v1);
boolean v9 = v8.matches(p3);
boolean v11 = this.mPermissions.hasFullAccess(p3, v1);
  - Access Control Level: NORMAL

- API Name: takePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V in the following Class: Lcom.android.server.uri.UriGrantsManagerService with the following sink code entries:
  - Similarity: 0.725152850151062, Code:
int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
GrantUri v4 = new GrantUri(p4,p1,0);
GrantUri v7 = new GrantUri(p4,p1,128);
  - Access Control Level: SYS_OR_SIG

- API Name: releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V in the following Class: Lcom.android.server.uri.UriGrantsManagerService with the following sink code entries:
  - Similarity: 0.7046931982040405, Code:
int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
int v3 = Preconditions.checkFlagsArgument(p2, 3);
GrantUri v4 = new GrantUri(p4,p1,0);
GrantUri v7 = new GrantUri(p4,p1,128);
  - Access Control Level: SYS_OR_SIG

