The method getBackupPayload has the following code snippet:

This is path 1 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	if (p1 == 0) {
		ByteArrayOutputStream v2 = new ByteArrayOutputStream();
		XmlPullParserFactory v4 = XmlPullParserFactory.newInstance();
		XmlSerializer v5 = v4.newSerializer();
		String v6 = Xml$Encoding.UTF_8.name();
		v5.setOutput(v2, v6);
		XmlSerializer v9 = v5.startTag(0, "slice-access-list");
		String v10 = String.valueOf(2);
		XmlSerializer v11 = v5.attribute(0, "version", v10);
		SlicePermissionManager$$ExternalSyntheticLambda0 v12 = new SlicePermissionManager$$ExternalSyntheticLambda0();
		boolean v14 = this.mHandler.hasMessages(2);
		if (v14 == 0) {
			this.mHandler.removeMessages(2);
			Iterator v17 = this.mDirty.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				Object v19 = v17.next();
				String v20 = v19.getFileName();
				AtomicFile v21 = SlicePermissionManager.getFile(v20);
				FileOutputStream v22 = v21.startWrite();
				XmlPullParserFactory v23 = XmlPullParserFactory.newInstance();
				XmlSerializer v24 = v23.newSerializer();
				String v25 = Xml$Encoding.UTF_8.name();
				v24.setOutput(v22, v25);
				v19.writeTo(v24);
				v24.flush();
				v21.finishWrite(v22);
				boolean v30 = v17.hasNext();
				if (v30 == 0) {
					this.mDirty.clear();
					File v32 = new File(v33);
					String v33 = this.mSliceDir.getAbsolutePath();
					String v35 = v32.list();
					if (0 >= v35.length) {
						AtomicFile v37 = SlicePermissionManager.getFile(v35[0]);
						SlicePermissionManager$ParserHolder v38 = new SlicePermissionManager$ParserHolder(SlicePermissionManager,0);
						FileInputStream v40 = v37.openRead();
						SlicePermissionManager$ParserHolder.-$$Nest$fputinput(v38, v40);
						XmlPullParserFactory v42 = XmlPullParserFactory.newInstance();
						XmlPullParser v43 = v42.newPullParser();
						SlicePermissionManager$ParserHolder.-$$Nest$fputparser(v38, v43);
						XmlPullParser v45 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v38);
						InputStream v46 = SlicePermissionManager$ParserHolder.-$$Nest$fgetinput(v38);
						String v47 = Xml$Encoding.UTF_8.name();
						v45.setInput(v46, v47);
						SlicePermissionManager$ParserHolder v36 = v38;
						XmlPullParser v49 = this.parser;
						int v50 = v49.getEventType();
						if (v50 == 1) {
							XmlPullParser v51 = this.parser;
							int v52 = v51.getEventType();
							if (v52 != 2) {
								XmlPullParser v53 = this.parser;
								String v54 = v53.getName();
								boolean v55 = "client".equals(v54);
								if (v55 == 0) {
									XmlPullParser v56 = this.parser;
									int v58 = v56.getEventType();
									if (v58 != 2) {
										String v59 = v56.getName();
										boolean v60 = "client".equals(v59);
										if (v60 != 0) {
											int v61 = v56.getEventType();
											if (v61 == 1) {
												int v62 = v56.next();
												int v63 = v56.getEventType();
												if (v63 != 2) {
													String v64 = v56.getName();
													boolean v65 = "client".equals(v64);
													if (v65 != 0) {
														int v66 = v56.getDepth();
														SlicePermissionManager$PkgUser v67 = new SlicePermissionManager$PkgUser(v68);
														String v68 = v56.getAttributeValue(this.NAMESPACE, "pkg");
														SliceClientPermissions v70 = new SliceClientPermissions(v67,v12);
														String v72 = v56.getAttributeValue(this.NAMESPACE, "fullAccess");
														if (v72 != 0) {
															int v73 = Integer.parseInt(v72);
															if (v73 == 0) {
																this.mHasFullAccess = 1;
																int v74 = v56.next();
																int v75 = v56.getDepth();
																if (v75 <= v66) {
																	int v76 = v56.getEventType();
																	if (v76 != 1) {
																		int v77 = v56.getEventType();
																		if (v77 != 2) {
																			String v78 = v56.getName();
																			boolean v79 = "authority".equals(v78);
																			if (v79 == 0) {
																				int v80 = v56.next();
																				int v81 = v56.getDepth();
																				if (v81 <= v66) {
																					int v82 = v56.getEventType();
																					if (v82 != 1) {
																						SliceClientPermissions v57 = v70;
																						if (v57 == 0) {
																							v57.writeTo(v5);
																							if (v36 == 0) {
																								this.input.close();
																								if ((0 + 1) >= v35.length) {
																									XmlSerializer v86 = v5.endTag(0, "slice-access-list");
																									v5.flush();
																									byte[] v88 = v2.toByteArray();
																									return v88;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public byte[] getBackupPayload(int p1){
	if (p1 == 0) {
		ByteArrayOutputStream v2 = new ByteArrayOutputStream();
		XmlPullParserFactory v4 = XmlPullParserFactory.newInstance();
		XmlSerializer v5 = v4.newSerializer();
		String v6 = Xml$Encoding.UTF_8.name();
		v5.setOutput(v2, v6);
		XmlSerializer v9 = v5.startTag(0, "slice-access-list");
		String v10 = String.valueOf(2);
		XmlSerializer v11 = v5.attribute(0, "version", v10);
		SlicePermissionManager$$ExternalSyntheticLambda0 v12 = new SlicePermissionManager$$ExternalSyntheticLambda0();
		boolean v14 = this.mHandler.hasMessages(2);
		if (v14 == 0) {
			this.mHandler.removeMessages(2);
			SlicePermissionManager.handlePersist();
			File v17 = new File(v18);
			String v18 = this.mSliceDir.getAbsolutePath();
			String v20 = v17.list();
			if (0 >= v20.length) {
				SlicePermissionManager$ParserHolder v21 = SlicePermissionManager.getParser(v20[0]);
				XmlPullParser v22 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v21);
				int v23 = v22.getEventType();
				if (v23 == 1) {
					XmlPullParser v24 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v21);
					int v25 = v24.getEventType();
					if (v25 != 2) {
						XmlPullParser v26 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v21);
						String v27 = v26.getName();
						boolean v28 = "client".equals(v27);
						if (v28 == 0) {
							XmlPullParser v29 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v21);
							SliceClientPermissions v30 = SliceClientPermissions.createFrom(v29, v12);
							if (v30 == 0) {
								v30.writeTo(v5);
								if (v21 == 0) {
									v21.close();
									if ((0 + 1) >= v20.length) {
										XmlSerializer v33 = v5.endTag(0, "slice-access-list");
										v5.flush();
										byte[] v35 = v2.toByteArray();
										return v35;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public byte[] getBackupPayload(int p1){
	if (p1 == 0) {
		ByteArrayOutputStream v2 = new ByteArrayOutputStream();
		XmlPullParserFactory v4 = XmlPullParserFactory.newInstance();
		XmlSerializer v5 = v4.newSerializer();
		String v6 = Xml$Encoding.UTF_8.name();
		v5.setOutput(v2, v6);
		this.mPermissions.writeBackup(v5);
		v5.flush();
		byte[] v10 = v2.toByteArray();
		return v10;
	}
}

and the following sink code:
[]

The method getBackupPayload has the following similar APIs:

- API Name: getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.7398236393928528
  - Access Control Level: SYS_OR_SIG and the following code:
String v17 = p0.readUserDataInternal(v15, p1, p2);

- API Name: applyRestore([BI)V with Similarity Score: 0.7379825115203857
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutUser v23 = ShortcutUser.loadFromXml(ShortcutService, v16, p2, 1);
v15.forAllLaunchers(v42);
v15.forAllPackages(v45);
ShortcutUser v9 = p0.loadUserInternal(p2, v7, 1);
v13.mergeRestoredFile(v9);
p0.rescanUpdatedPackagesLocked(p2, 0);
p0.saveUserLocked(p2);

