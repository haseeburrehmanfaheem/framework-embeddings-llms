The method revokeSlicePermission in the following class Lcom.android.server.slice.SliceManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void revokeSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	if (v13 != 0) {
		String v14 = SliceClientPermissions.getFileName(v8);
		SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
		XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
		if (v15 == 0) {
			v15.close();
			caughtException.addSuppressed(caughtException);
			SliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);
			Object v21 = this.mCachedClients.put(v8, v19);
			SliceClientPermissions v12 = v13;
			SlicePermissionManager$PkgUser v23 = new SlicePermissionManager$PkgUser(v24,v25);
			String v24 = p3.getAuthority();
			int v25 = v10.getUserId();
			SliceClientPermissions$SliceAuthority v27 = SliceClientPermissions.getOrCreateAuthority(v23, v10);
			List v28 = p3.getPathSegments();
			v27.removePath(v28);
			return;
		}
	}
}


This is path 2 for the API with depth 1:
public void revokeSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	SliceClientPermissions v12 = SlicePermissionManager.getClient(v8);
	v12.revokeUri(p3, v10);
	return;
}


This is path 3 for the API with depth 0:
public void revokeSlicePermission(String p1, String p2, Uri p3){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	p0.enforceOwner(p1, p3, v3);
	this.mPermissions.revokeSliceAccess(p2, v3, p1, v3, p3);
	return;
}

and the following sink code:
['this.mPermissions.revokeSliceAccess(p2, v3, p1, v3, p3);', 'v12.revokeUri(p3, v10);', 'Object v13 = this.mCachedClients.get(v8);\nString v14 = SliceClientPermissions.getFileName(v8);\nSlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);\nSliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);\nObject v21 = this.mCachedClients.put(v8, v19);\nSliceClientPermissions$SliceAuthority v27 = SliceClientPermissions.getOrCreateAuthority(v23, v10);\nv27.removePath(v28);']

The method revokeSlicePermission has the following similar APIs:

- API Name: grantPermissionFromUser(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.8648987412452698, Code:
SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
Object v24 = this.mCachedClients.get(v19);
SliceClientPermissions v30 = new SliceClientPermissions(v19,SlicePermissionManager);
  - Similarity: 0.8583168387413025, Code:
this.mPermissions.grantSliceAccess(p2, v5, v10, v9, v8);
  - Similarity: 0.7230096459388733, Code:
SliceClientPermissions$SliceAuthority v38 = SliceClientPermissions.getOrCreateAuthority(v34, v21);
List v39 = v8.getPathSegments();
v38.addPath(v39);
  - Similarity: 0.7021876573562622, Code:
SliceClientPermissions v23 = SlicePermissionManager.getClient(v19);
v23.grantUri(v8, v21);
  - Access Control Level: SYS_OR_SIG

- API Name: grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.8194299936294556, Code:
SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
p0.enforceOwner(p1, p3, v5);
this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);
  - Similarity: 0.7713343501091003, Code:
v12.grantUri(p3, v10);
v17.addPkg(v8);
  - Access Control Level: NONE

- API Name: applyRestore([BI)V in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.7528111338615417, Code:
ByteArrayInputStream v2 = new ByteArrayInputStream(p1);
XmlPullParserFactory v4 = XmlPullParserFactory.newInstance();
XmlPullParser v5 = v4.newPullParser();
String v6 = Xml$Encoding.UTF_8.name();
v5.setInput(v2, v6);
SlicePermissionManager$PkgUser v36 = new SlicePermissionManager$PkgUser(v37);
SliceClientPermissions v39 = new SliceClientPermissions(v36,SlicePermissionManager);
Object v53 = this.mCachedClients.put(v52, v26);
  - Access Control Level: SYS_OR_SIG

- API Name: getPinnedSpecs(Landroid/net/Uri;Ljava/lang/String;)[Landroid/app/slice/SliceSpec; in the following Class: Lcom.android.server.slice.SliceManagerService with the following sink code entries:
  - Similarity: 0.7130693197250366, Code:
int v7 = SliceManagerService.checkAccess(p2, p1, v5, v6);
UserHandle v8 = Binder.getCallingUserHandle();
int v9 = v8.getIdentifier();
int v10 = ContentProvider.getUserIdFromUri(p1, v9);
String v11 = SliceManagerService.getProviderPkg(p1, v10);
boolean v12 = Objects.equals(p2, v11);
SliceManagerService.enforceCrossUser(p2, p1);
Uri v16 = ContentProvider.maybeAddUserId(p1, v15);
Object v18 = this.mPinnedSlicesByUri.get(v16);
SliceSpec v19 = this.mSupportedSpecs;
return v19;
  - Access Control Level: SYS_OR_SIG

- API Name: isPermissionRevokedByPolicy(Ljava/lang/String;Ljava/lang/String;I)Z in the following Class: Lcom.android.server.pm.permission.PermissionManagerService with the following sink code entries:
  - Similarity: 0.704643726348877, Code:
public boolean isPermissionRevokedByPolicy(String p1, String p2, int p3){
return v1;
  - Access Control Level: SYS_OR_SIG

