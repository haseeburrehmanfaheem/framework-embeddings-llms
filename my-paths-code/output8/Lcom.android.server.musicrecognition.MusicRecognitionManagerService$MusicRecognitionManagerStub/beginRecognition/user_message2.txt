The method beginRecognition in the following class Lcom.android.server.musicrecognition.MusicRecognitionManagerService$MusicRecognitionManagerStub has the following code snippet:

This is path 1 for the API with depth 2:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	if (v4 != 0) {
		Object v5 = MusicRecognitionManagerService.access$000(this.this$0);
		int v6 = UserHandle.getCallingUserId();
		AbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);
		if (v7 == 0) {
			ServiceNameResolver v9 = AbstractMasterSystemService.mServiceNameResolver;
			String v10 = v9.getDefaultServiceName(v6);
			if (v10 != 0) {
				ServiceNameResolver v11 = AbstractMasterSystemService.mServiceNameResolver;
				String v12 = v11.getServiceName(v6);
				boolean v13 = v10.equals(v12);
				boolean v8 = v13;
				if (v8 != 0) {
					boolean v14 = p0.isCalledByServiceAppLocked("beginRecognition");
					if (v14 == 0) {
						if (p2 != 0) {
							IInterface v17 = p2.queryLocalInterface("android.media.musicrecognition.IMusicRecognitionManagerCallback");
							if (v17 == 0) {
								if (v17 instanceof IMusicRecognitionManagerCallback == 0) {
									IMusicRecognitionManagerCallback$Stub$Proxy v18 = new IMusicRecognitionManagerCallback$Stub$Proxy(p2);
									IMusicRecognitionManagerCallback v16 = v18;
									if (this.mRemoteService != 0) {
										String v21 = MusicRecognitionManagerPerUserService.getComponentNameLocked();
										if (v21 != 0) {
											ComponentName v22 = ComponentName.unflattenFromString(v21);
											RemoteMusicRecognitionService v23 = new RemoteMusicRecognitionService(v24,v22,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v25,v27,AbstractMasterSystemService.verbose);
											Context v24 = MusicRecognitionManagerPerUserService.getContext();
											MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback v25 = new MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback(MusicRecognitionManagerPerUserService,v16,0);
											boolean v27 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
											this.mRemoteService = v23;
											Context v29 = MusicRecognitionManagerPerUserService.getContext();
											PackageManager v30 = v29.getPackageManager();
											ComponentName v31 = this.mRemoteService.getComponentName();
											ServiceInfo v32 = v30.getServiceInfo(v31, 128);
											this.mServiceInfo = v32;
											CompletableFuture v33 = this.mRemoteService.getAttributionTag();
											this.mAttributionTagFuture = v33;
											ComponentName v37 = this.mRemoteService.getComponentName();
											RemoteMusicRecognitionService v20 = this.mRemoteService;
											this.mRemoteService = v20;
											if (v20 != 0) {
												ParcelFileDescriptor v42 = ParcelFileDescriptor.createPipe();
												if (v42.length == 2) {
													FileDescriptor v43 = v42[0].getFileDescriptor();
													boolean v44 = v43.valid();
													if (v44 == 0) {
														FileDescriptor v45 = v42[1].getFileDescriptor();
														boolean v46 = v45.valid();
														if (v46 != 0) {
															Pair v47 = Pair.create(v42[0], v42[1]);
															Pair v41 = v47;
															if (v41 != 0) {
																MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v48 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v16,Pair.second);
																CompletableFuture v50 = this.mAttributionTagFuture.thenAcceptAsync(v48, MusicRecognitionManagerService.mExecutorService);
																AudioFormat v51 = this.mAudioFormat;
																RemoteMusicRecognitionService$$ExternalSyntheticLambda0 v53 = new RemoteMusicRecognitionService$$ExternalSyntheticLambda0(RemoteMusicRecognitionService,Pair.first,v51);
																RemoteMusicRecognitionService.scheduleAsyncRequest(v53);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	this.this$0.enforceCaller("beginRecognition");
	Object v3 = AbstractMasterSystemService.mLock;
	int v4 = UserHandle.getCallingUserId();
	AbstractPerUserSystemService v6 = this.this$0.getServiceForUserLocked(v4);
	AbstractPerUserSystemService v5 = v6;
	if (v5 == 0) {
		ServiceNameResolver v8 = MusicRecognitionManagerService.access$200(this.this$0);
		String v9 = v8.getDefaultServiceName(v4);
		if (v9 != 0) {
			ServiceNameResolver v10 = MusicRecognitionManagerService.access$300(this.this$0);
			String v11 = v10.getServiceName(v4);
			boolean v12 = v9.equals(v11);
			boolean v7 = v12;
			if (v7 != 0) {
				boolean v13 = 1;
				if (v13 == 0) {
					IMusicRecognitionManagerCallback v25 = IMusicRecognitionManagerCallback$Stub.asInterface(p2);
					RemoteMusicRecognitionService v26 = MusicRecognitionManagerPerUserService.ensureRemoteServiceLocked(v25);
					this.mRemoteService = v26;
					if (v26 != 0) {
						Pair v27 = MusicRecognitionManagerPerUserService.createPipe();
						if (v27 != 0) {
							MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v28 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v25,Pair.second);
							CompletableFuture v30 = this.mAttributionTagFuture.thenAcceptAsync(v28, MusicRecognitionManagerService.mExecutorService);
							AudioFormat v31 = p1.getAudioFormat();
							this.mRemoteService.onAudioStreamStarted(Pair.first, v31);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	MusicRecognitionManagerService.-$$Nest$menforceCaller(this.this$0, "beginRecognition");
	Object v2 = MusicRecognitionManagerService.access$000(this.this$0);
	int v3 = UserHandle.getCallingUserId();
	AbstractPerUserSystemService v4 = MusicRecognitionManagerService.access$100(this.this$0, v3);
	if (v4 == 0) {
		boolean v5 = p0.isDefaultServiceLocked(v3);
		if (v5 != 0) {
			boolean v6 = p0.isCalledByServiceAppLocked("beginRecognition");
			if (v6 == 0) {
				v4.beginRecognitionLocked(p1, p2);
				return;
			}
		}
	}
}

and the following sink code:
['int v6 = UserHandle.getCallingUserId();\nAbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);\nRemoteMusicRecognitionService v23 = new RemoteMusicRecognitionService(v24,v22,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v25,v27,AbstractMasterSystemService.verbose);\nthis.mRemoteService = v23;\nCompletableFuture v50 = this.mAttributionTagFuture.thenAcceptAsync(v48, MusicRecognitionManagerService.mExecutorService);', 'IMusicRecognitionManagerCallback v25 = IMusicRecognitionManagerCallback$Stub.asInterface(p2);\nRemoteMusicRecognitionService v26 = MusicRecognitionManagerPerUserService.ensureRemoteServiceLocked(v25);\nthis.mRemoteService = v26;\nPair v27 = MusicRecognitionManagerPerUserService.createPipe();\nMusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v28 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v25,Pair.second);', 'v4.beginRecognitionLocked(p1, p2);']

The method beginRecognition has the following similar APIs:

- API Name: onDetectLanguage(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextLanguage$Request;Landroid/service/textclassifier/ITextClassifierCallback;)V in the following Class: Lcom.android.server.textclassifier.TextClassificationManagerService with the following sink code entries:
  - Similarity: 0.7694337368011475, Code:
int v11 = UserHandle.getCallingUserId();
TextClassificationManagerService$UserState v14 = TextClassificationManagerService.getUserStateLocked(v11);
TextClassificationManagerService$ServiceState v15 = v14.getServiceStateLocked(1);
TextClassificationManagerService$PendingRequest v20 = new TextClassificationManagerService$PendingRequest("onDetectLanguage",v21,v23,v25,TextClassificationManagerService,v15,v26);
  - Access Control Level: SYS_OR_SIG

- API Name: createSession(Landroid/content/ComponentName;Landroid/os/IBinder;ZLandroid/speech/IRecognitionServiceManagerCallback;)V in the following Class: Lcom.android.server.speech.SpeechRecognitionManagerService$SpeechRecognitionManagerServiceStub with the following sink code entries:
  - Similarity: 0.7554929256439209, Code:
int v1 = UserHandle.getCallingUserId();
AbstractPerUserSystemService v4 = this.this$0.getServiceForUserLocked(v1);
SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda2 v25 = new SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda2(p1);
p2.linkToDeath(v31, 0);
CompletableFuture v42 = v34.thenAccept(v40);
  - Access Control Level: NONE

- API Name: startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7520008087158203, Code:
int v3 = p0.handleIncomingUser(p3, p4, p12, "startVoiceActivity");
ActivityStartController v4 = p0.getActivityStartController();
ActivityStarter v5 = v4.obtainStarter(p5, "startVoiceActivity");
ActivityStarter v6 = v5.setCallingUid(p4);
ActivityStarter v7 = v6.setCallingPackage(p1);
ActivityStarter v8 = v7.setCallingFeatureId(p2);
ActivityStarter v9 = v8.setResolvedType(p6);
ActivityStarter v10 = v9.setVoiceSession(p7);
ActivityStarter v11 = v10.setVoiceInteractor(p8);
ActivityStarter v12 = v11.setStartFlags(p9);
ActivityStarter v13 = v12.setProfilerInfo(p10);
ActivityStarter v14 = v13.setActivityOptions(p11);
ActivityStarter v15 = v14.setUserId(v3);
ActivityStarter v16 = v15.setAllowBackgroundActivityStart(1);
  - Similarity: 0.7445269227027893, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v8 = v7.setIntent(p5);
ActivityStarter v9 = v8.setReason("startVoiceActivity");
ActivityStarter$Request.callingUid = p4;
ActivityStarter$Request.callingPackage = p1;
ActivityStarter$Request.callingFeatureId = p2;
ActivityStarter$Request.resolvedType = p6;
ActivityStarter$Request.voiceSession = p7;
ActivityStarter$Request.voiceInteractor = p8;
ActivityStarter$Request.startFlags = p9;
ActivityStarter$Request.profilerInfo = p10;
SafeActivityOptions v19 = SafeActivityOptions.fromBundle(p11);
ActivityStarter v20 = ActivityStarter.setActivityOptions(v19);
  - Similarity: 0.7422259449958801, Code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter v7 = this.mFactory.obtain();
ActivityStarter$Request.intent = p5;
ActivityStarter v10 = v6.setCallingUid(p4);
ActivityStarter v11 = v10.setCallingPackage(p1);
ActivityStarter v12 = v11.setCallingFeatureId(p2);
ActivityStarter v13 = v12.setResolvedType(p6);
ActivityStarter v14 = v13.setVoiceSession(p7);
ActivityStarter v15 = v14.setVoiceInteractor(p8);
ActivityStarter v16 = v15.setStartFlags(p9);
ActivityStarter v17 = v16.setProfilerInfo(p10);
SafeActivityOptions v20 = new SafeActivityOptions(v21);
ActivityOptions v21 = ActivityOptions.fromBundle(p11);
ActivityStarter$Request.activityOptions = v19;
ActivityStarter v24 = v18.setUserId(v3);
ActivityStarter v25 = v24.setAllowBackgroundActivityStart(1);
  - Access Control Level: SYS_OR_SIG

- API Name: stopRecording(Landroid/os/IBinder;I)V in the following Class: Lcom.android.server.tv.TvInputManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7388430237770081, Code:
int v5 = ActivityManager.handleIncomingUser(v2, v1, p2, 0, 0, "stopRecording", 0);
TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p1, v1, v3);
ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
ITvInputSession v8 = v9;
v8.stopRecording();
  - Access Control Level: SYS_OR_SIG

- API Name: getGameMode(Ljava/lang/String;I)I in the following Class: Lcom.android.server.app.GameManagerService with the following sink code entries:
  - Similarity: 0.7386898398399353, Code:
int v3 = ActivityManager.handleIncomingUser(v1, v2, p2, 0, 1, "getGameMode", "com.android.server.app.GameManagerService");
Integer v10 = Integer.valueOf(v3);
boolean v11 = this.mSettings.containsKey(v10);
Object v13 = this.mSettings.get(v12);
int v14 = v13.getGameModeLocked(p1);
int v9 = v14;
return v9;
  - Access Control Level: SYS_OR_SIG

