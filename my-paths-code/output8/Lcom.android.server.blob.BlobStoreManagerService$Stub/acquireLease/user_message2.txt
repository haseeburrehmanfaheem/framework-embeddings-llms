The method acquireLease in the following class Lcom.android.server.blob.BlobStoreManagerService$Stub has the following code snippet:

This is path 1 for the API with depth 2:
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(1, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(1, "tag too long");
			boolean v12 = ResourceId.isValid(p2);
			if (v12 != 0) {
				if (p3 == 0) {
					StringBuilder v13 = new StringBuilder();
					StringBuilder v15 = v13.append("Description must be valid; descriptionId=");
					StringBuilder v16 = v13.append(p2);
					StringBuilder v17 = v13.append(", description=");
					StringBuilder v18 = v13.append(p3);
					String v19 = v13.toString();
					Preconditions.checkArgument(0, v19);
					long v21 = Preconditions.checkArgumentNonnegative(p4, "leaseExpiryTimeMillis must not be negative");
					Object v22 = Objects.requireNonNull(p5, "packageName must not be null");
					boolean v24 = TextUtils.isEmpty(p3);
					if (v24 == 0) {
						CharSequence v25 = TextUtils.trimToLengthWithEllipsis(p3, BlobStoreConfig$DeviceConfigProperties.LEASE_DESC_CHAR_LIMIT);
						CharSequence v23 = v25;
						int v26 = Binder.getCallingUid();
						if (v34 != 0) {
							int v35 = UserHandle.getUserId(v26);
							boolean v36 = this.mPackageManagerInternal.isInstantApp(p5, v35);
							if (v36 != 0) {
								boolean v32 = 1;
								boolean v31 = v32;
								if (v31 == 0) {
									int v39 = BlobStoreManagerService.getLeasedBlobsCountLocked(v26, p5);
									int v40 = BlobStoreConfig.getMaxLeasedBlobs();
									if (v39 >= v40) {
										if ((p4 < 0) == 0) {
											if ((BlobHandle.expiryTimeMillis < 0) == 0) {
												if ((p4 < BlobHandle.expiryTimeMillis) > 0) {
													Object v41 = this.mBlobsMap.get(p1);
													if (v41 == 0) {
														boolean v42 = v41.isAccessAllowedForCaller(p5, v26);
														if (v42 != 0) {
															long v43 = v41.getSize();
															long v44 = BlobStoreManagerService.getRemainingLeaseQuotaBytesInternal(v26, p5);
															if ((v43 < v44) > 0) {
																long v45 = v41.getBlobId();
																long v46 = v41.getSize();
																FrameworkStatsLog.write(299, v26, v45, v46, 1);
																v41.addOrReplaceLeasee(p5, v26, p2, v23, p4);
																if (BlobStoreConfig.LOGV == 0) {
																	BlobStoreManagerService.writeBlobsInfoAsync();
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(1, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(1, "tag too long");
			boolean v12 = ResourceId.isValid(p2);
			if (v12 != 0) {
				if (p3 == 0) {
					StringBuilder v13 = new StringBuilder();
					StringBuilder v15 = v13.append("Description must be valid; descriptionId=");
					StringBuilder v16 = v13.append(p2);
					StringBuilder v17 = v13.append(", description=");
					StringBuilder v18 = v13.append(p3);
					String v19 = v13.toString();
					Preconditions.checkArgument(0, v19);
					long v21 = Preconditions.checkArgumentNonnegative(p4, "leaseExpiryTimeMillis must not be negative");
					Object v22 = Objects.requireNonNull(p5, "packageName must not be null");
					boolean v24 = TextUtils.isEmpty(p3);
					if (v24 == 0) {
						CharSequence v25 = TextUtils.trimToLengthWithEllipsis(p3, BlobStoreConfig$DeviceConfigProperties.LEASE_DESC_CHAR_LIMIT);
						CharSequence v23 = v25;
						int v26 = Binder.getCallingUid();
						this.this$0.verifyCallingPackage(v26, p5);
						boolean v30 = this.this$0.isAllowedBlobStoreAccess(v26, p5);
						boolean v29 = v30;
						if (v29 == 0) {
							this.this$0.acquireLeaseInternal(p1, p2, v23, p4, v26, p5);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	p1.assertIsValid();
	boolean v3 = ResourceId.isValid(p2);
	if (v3 != 0) {
		if (p3 == 0) {
			StringBuilder v4 = new StringBuilder();
			StringBuilder v6 = v4.append("Description must be valid; descriptionId=");
			StringBuilder v7 = v4.append(p2);
			StringBuilder v8 = v4.append(", description=");
			StringBuilder v9 = v4.append(p3);
			String v10 = v4.toString();
			Preconditions.checkArgument(0, v10);
			long v12 = Preconditions.checkArgumentNonnegative(p4, "leaseExpiryTimeMillis must not be negative");
			Object v13 = Objects.requireNonNull(p5, "packageName must not be null");
			CharSequence v14 = BlobStoreConfig.getTruncatedLeaseDescription(p3);
			int v15 = Binder.getCallingUid();
			BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v15, p5);
			boolean v17 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v15, p5);
			if (v17 == 0) {
				BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v14, p4, v15, p5);
				return;
			}
		}
	}
}

and the following sink code:
['Object v41 = this.mBlobsMap.get(p1);\nv41.addOrReplaceLeasee(p5, v26, p2, v23, p4);', 'this.this$0.verifyCallingPackage(v26, p5);\nboolean v30 = this.this$0.isAllowedBlobStoreAccess(v26, p5);\nthis.this$0.acquireLeaseInternal(p1, p2, v23, p4, v26, p5);', 'BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v15, p5);\nboolean v17 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v15, p5);\nBlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v14, p4, v15, p5);']

The method acquireLease has the following similar APIs:

- API Name: releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.9363877773284912, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
  - Similarity: 0.9162635803222656, Code:
this.this$0.verifyCallingPackage(v13, p2);
this.this$0.isAllowedBlobStoreAccess(v13, p2);
this.this$0.releaseLeaseInternal(p1, v13, p2);
  - Similarity: 0.7391616106033325, Code:
Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
this.mPackageManagerInternal.isInstantApp(p2, v22);
v26.removeLeasee(p2, v13);
BlobStoreManagerService$$ExternalSyntheticLambda7 v40 = new BlobStoreManagerService$$ExternalSyntheticLambda7(BlobStoreManagerService,p1,v26);
this.mHandler.postDelayed(v40, v42);
  - Access Control Level: SYS_OR_SIG

- API Name: getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.8986865282058716, Code:
Object v26 = this.mBlobsMap.get(p1);
LeaseInfo v28 = v26.getLeaseInfo(p2, v13);
return v24;
  - Similarity: 0.7567435503005981, Code:
LeaseInfo v7 = BlobStoreManagerService.-$$Nest$mgetLeaseInfoInternal(this.this$0, p1, v4, p2);
return v7;
  - Access Control Level: SYS_OR_SIG

- API Name: releaseAllLeases(Ljava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.8645896315574646, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
if (v4 == 0) { BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1); return; }
  - Similarity: 0.8512531518936157, Code:
this.this$0.verifyCallingPackage(v2, p1);
boolean v6 = this.this$0.isAllowedBlobStoreAccess(v2, p1);
if (v5 == 0) { this.this$0.releaseAllLeasesInternal(v2, p1); return; }
  - Access Control Level: SYS_OR_SIG

- API Name: openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7911950945854187, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
if (v6 == 0) {
ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
return v7;
  - Similarity: 0.7798222303390503, Code:
this.this$0.verifyCallingPackage(v13, p2);
boolean v17 = this.this$0.isAllowedBlobStoreAccess(v13, p2);
if (v16 == 0) {
ParcelFileDescriptor v19 = this.this$0.openBlobInternal(p1, v13, p2);
return v18;
  - Similarity: 0.7513241171836853, Code:
Object v26 = this.mBlobsMap.get(p1);
if (v26 == 0) {
boolean v27 = v26.isAccessAllowedForCaller(p2, v13);
long v28 = v26.getBlobId();
long v29 = v26.getSize();
FrameworkStatsLog.write(300, v13, v28, v29, 1);
ParcelFileDescriptor v31 = v26.openForRead(p2, v13);
return v24;
  - Access Control Level: SYS_OR_SIG

- API Name: getRemainingLeaseQuotaBytes(Ljava/lang/String;)J in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7375237345695496, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v1, p1);
long v3 = BlobStoreManagerService.-$$Nest$mgetRemainingLeaseQuotaBytesInternal(this.this$0, v1, p1);
return v3;
  - Similarity: 0.7015341520309448, Code:
this.this$0.verifyCallingPackage(v1, p1);
long v5 = this.this$0.getRemainingLeaseQuotaBytesInternal(v1, p1);
long v4 = v5;
return v4;
  - Access Control Level: SYS_OR_SIG

