The method releaseAllLeases in the following class Lcom.android.server.blob.BlobStoreManagerService$Stub has the following code snippet:

This is path 1 for the API with depth 2:
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, "packageName must not be null");
	int v2 = Binder.getCallingUid();
	if (v10 != 0) {
		int v11 = UserHandle.getUserId(v2);
		boolean v12 = this.mPackageManagerInternal.isInstantApp(p1, v11);
		if (v12 != 0) {
			boolean v8 = 1;
			boolean v7 = v8;
			if (v7 == 0) {
				BlobStoreManagerService$$ExternalSyntheticLambda12 v15 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p1,v2);
				this.mBlobsMap.forEach(v15);
				BlobStoreManagerService.writeBlobsInfoAsync();
				if (BlobStoreConfig.LOGV == 0) {
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, "packageName must not be null");
	int v2 = Binder.getCallingUid();
	this.this$0.verifyCallingPackage(v2, p1);
	boolean v6 = this.this$0.isAllowedBlobStoreAccess(v2, p1);
	boolean v5 = v6;
	if (v5 == 0) {
		this.this$0.releaseAllLeasesInternal(v2, p1);
		return;
	}
}


This is path 3 for the API with depth 0:
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, "packageName must not be null");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
	if (v4 == 0) {
		BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1);
		return;
	}
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p1, "packageName must not be null");\nint v2 = Binder.getCallingUid();\nBlobStoreManagerService$$ExternalSyntheticLambda12 v15 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p1,v2);\nthis.mBlobsMap.forEach(v15);', 'this.this$0.verifyCallingPackage(v2, p1);\nboolean v6 = this.this$0.isAllowedBlobStoreAccess(v2, p1);\nif (v5 == 0) { this.this$0.releaseAllLeasesInternal(v2, p1); return; }', 'BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);\nboolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);\nif (v4 == 0) { BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1); return; }']

The method releaseAllLeases has the following similar APIs:

- API Name: releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.9210060834884644, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
  - Similarity: 0.9000611901283264, Code:
this.this$0.verifyCallingPackage(v13, p2);
this.this$0.isAllowedBlobStoreAccess(v13, p2);
this.this$0.releaseLeaseInternal(p1, v13, p2);
  - Similarity: 0.7286331653594971, Code:
Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
this.mPackageManagerInternal.isInstantApp(p2, v22);
v26.removeLeasee(p2, v13);
BlobStoreManagerService$$ExternalSyntheticLambda7 v40 = new BlobStoreManagerService$$ExternalSyntheticLambda7(BlobStoreManagerService,p1,v26);
this.mHandler.postDelayed(v40, v42);
  - Access Control Level: SYS_OR_SIG

- API Name: acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.8645896315574646, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v15, p5);
boolean v17 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v15, p5);
BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v14, p4, v15, p5);
  - Similarity: 0.8512531518936157, Code:
this.this$0.verifyCallingPackage(v26, p5);
boolean v30 = this.this$0.isAllowedBlobStoreAccess(v26, p5);
this.this$0.acquireLeaseInternal(p1, p2, v23, p4, v26, p5);
  - Access Control Level: SYS_OR_SIG

- API Name: openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7927849292755127, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
if (v6 == 0) {
ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
return v7;
  - Similarity: 0.7613921165466309, Code:
this.this$0.verifyCallingPackage(v13, p2);
boolean v17 = this.this$0.isAllowedBlobStoreAccess(v13, p2);
if (v16 == 0) {
ParcelFileDescriptor v19 = this.this$0.openBlobInternal(p1, v13, p2);
return v18;
  - Access Control Level: SYS_OR_SIG

- API Name: getLeasedBlobs(Ljava/lang/String;)Ljava/util/List; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7629818916320801, Code:
int v2 = Binder.getCallingUid();
BlobStoreManagerService$$ExternalSyntheticLambda13 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda13(p1,v2,v9);
BlobStoreManagerService.forEachBlobLocked(v11);
List v8 = v9;
return v7;
  - Similarity: 0.7416548132896423, Code:
int v2 = Binder.getCallingUid();
this.this$0.verifyCallingPackage(v2, p1);
List v6 = this.this$0.getLeasedBlobsInternal(v2, p1);
return v5;
  - Access Control Level: SYS_OR_SIG

- API Name: deleteBlob(J)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.73748379945755, Code:
Set v4 = this.mBlobsMap.entrySet();
BlobStoreManagerService$$ExternalSyntheticLambda8 v5 = new BlobStoreManagerService$$ExternalSyntheticLambda8(BlobStoreManagerService,p1);
boolean v7 = v4.removeIf(v5);
BlobStoreManagerService.writeBlobsInfoAsync();
  - Access Control Level: SYS_OR_SIG

