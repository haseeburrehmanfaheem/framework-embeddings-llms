The method createSession in the following class Lcom.android.server.blob.BlobStoreManagerService$Stub has the following code snippet:

This is path 1 for the API with depth 2:
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(1, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(1, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			if (v21 != 0) {
				int v22 = UserHandle.getUserId(v13);
				boolean v23 = this.mPackageManagerInternal.isInstantApp(p2, v22);
				if (v23 != 0) {
					boolean v19 = 1;
					boolean v18 = v19;
					if (v18 == 0) {
						int v26 = BlobStoreManagerService.getSessionsCountLocked(v13, p2);
						int v27 = BlobStoreConfig.getMaxActiveSessions();
						if (v26 >= v27) {
							long v28 = BlobStoreManagerService.generateNextSessionIdLocked();
							BlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p1,v13,p2,this.mSessionStateChangeListener);
							int v31 = UserHandle.getUserId(v13);
							BlobStoreManagerService.addSessionForUserLocked(v29, v31);
							if (BlobStoreConfig.LOGV == 0) {
								BlobStoreManagerService.writeBlobSessionsAsync();
								long v25 = v28;
								long v24 = v25;
								return v24;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(1, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(1, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			this.this$0.verifyCallingPackage(v13, p2);
			boolean v17 = this.this$0.isAllowedBlobStoreAccess(v13, p2);
			boolean v16 = v17;
			if (v16 == 0) {
				long v19 = this.this$0.createSessionInternal(p1, v13, p2);
				long v18 = v19;
				return v18;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, "packageName must not be null");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	if (v6 == 0) {
		long v7 = BlobStoreManagerService.-$$Nest$mcreateSessionInternal(this.this$0, p1, v4, p2);
		return v7;
	}
}

and the following sink code:
['int v26 = BlobStoreManagerService.getSessionsCountLocked(v13, p2);\nBlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p1,v13,p2,this.mSessionStateChangeListener);\nBlobStoreManagerService.addSessionForUserLocked(v29, v31);\nlong v25 = v28;\nreturn v24;', 'long v19 = this.this$0.createSessionInternal(p1, v13, p2);\nreturn v18;', 'long v7 = BlobStoreManagerService.-$$Nest$mcreateSessionInternal(this.this$0, p1, v4, p2);\nreturn v7;']

The method createSession has the following similar APIs:

- API Name: openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.8797280788421631, Code:
BlobStoreManagerService.-$$Nest$mopenSessionInternal(this.this$0, p1, v8, p2);
return v10;
  - Similarity: 0.8417791724205017, Code:
BlobStoreSession v12 = this.this$0.openSessionInternal(p1, v8, p2);
return v11;
  - Access Control Level: SYS_OR_SIG

- API Name: startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)V in the following Class: Lcom.android.server.contentcapture.ContentCaptureManagerService$ContentCaptureManagerServiceStub with the following sink code entries:
  - Similarity: 0.8259116411209106, Code:
v9.startSessionLocked(p1, p2, v7, p4, v12, p5, p6);
  - Access Control Level: NONE

- API Name: abandonSession(JLjava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.8185709714889526, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v8, p2);
BlobStoreManagerService.-$$Nest$mabandonSessionInternal(this.this$0, p1, v8, p2);
  - Similarity: 0.8014514446258545, Code:
BlobStoreSession v15 = BlobStoreManagerService.openSessionInternal(p1, v8, p2);
v15.open();
v15.abandon();
  - Access Control Level: SYS_OR_SIG

- API Name: createSession(Ljava/lang/String;Landroid/media/session/ISessionCallback;Ljava/lang/String;Landroid/os/Bundle;I)Landroid/media/session/ISession; in the following Class: Lcom.android.server.media.MediaSessionService$SessionManagerImpl with the following sink code entries:
  - Similarity: 0.7991321682929993, Code:
int v6 = ActivityManager.getCurrentUser();
MediaSessionRecord v14 = this.this$0.createSessionInternal(v1, v2, v6, p1, p2, p3, p4);
  - Access Control Level: SYS_OR_SIG

- API Name: notifyAdResponse(Landroid/os/IBinder;Landroid/media/tv/AdResponse;I)V in the following Class: Lcom.android.server.tv.interactive.TvInteractiveAppManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7886651754379272, Code:
int v3 = v4;
TvInteractiveAppManagerService$SessionState v8 = this.this$0.getSessionStateLocked(p1, v1, v3);
ITvInteractiveAppSession v10 = this.this$0.getSessionLocked(v7);
v9.notifyAdResponse(p2);
  - Access Control Level: SYS_OR_SIG

