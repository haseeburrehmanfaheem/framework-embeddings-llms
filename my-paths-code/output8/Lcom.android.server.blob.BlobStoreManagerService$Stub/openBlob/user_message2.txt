The method openBlob in the following class Lcom.android.server.blob.BlobStoreManagerService$Stub has the following code snippet:

This is path 1 for the API with depth 2:
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(1, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(1, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			if (v21 != 0) {
				int v22 = UserHandle.getUserId(v13);
				boolean v23 = this.mPackageManagerInternal.isInstantApp(p2, v22);
				if (v23 != 0) {
					boolean v19 = 1;
					boolean v18 = v19;
					if (v18 == 0) {
						Object v26 = this.mBlobsMap.get(p1);
						if (v26 == 0) {
							boolean v27 = v26.isAccessAllowedForCaller(p2, v13);
							if (v27 != 0) {
								long v28 = v26.getBlobId();
								long v29 = v26.getSize();
								FrameworkStatsLog.write(300, v13, v28, v29, 1);
								ParcelFileDescriptor v31 = v26.openForRead(p2, v13);
								ParcelFileDescriptor v25 = v31;
								ParcelFileDescriptor v24 = v25;
								return v24;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(1, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(1, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			this.this$0.verifyCallingPackage(v13, p2);
			boolean v17 = this.this$0.isAllowedBlobStoreAccess(v13, p2);
			boolean v16 = v17;
			if (v16 == 0) {
				ParcelFileDescriptor v19 = this.this$0.openBlobInternal(p1, v13, p2);
				ParcelFileDescriptor v18 = v19;
				return v18;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, "packageName must not be null");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	if (v6 == 0) {
		ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
		return v7;
	}
}

and the following sink code:
['Object v26 = this.mBlobsMap.get(p1);\nif (v26 == 0) {\nboolean v27 = v26.isAccessAllowedForCaller(p2, v13);\nlong v28 = v26.getBlobId();\nlong v29 = v26.getSize();\nFrameworkStatsLog.write(300, v13, v28, v29, 1);\nParcelFileDescriptor v31 = v26.openForRead(p2, v13);\nreturn v24;', 'this.this$0.verifyCallingPackage(v13, p2);\nboolean v17 = this.this$0.isAllowedBlobStoreAccess(v13, p2);\nif (v16 == 0) {\nParcelFileDescriptor v19 = this.this$0.openBlobInternal(p1, v13, p2);\nreturn v18;', 'BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);\nboolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);\nif (v6 == 0) {\nParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);\nreturn v7;']

The method openBlob has the following similar APIs:

- API Name: getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.8314042091369629, Code:
Object v26 = this.mBlobsMap.get(p1);
LeaseInfo v28 = v26.getLeaseInfo(p2, v13);
return v24;
  - Access Control Level: SYS_OR_SIG

- API Name: releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.8144956231117249, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
  - Similarity: 0.7685936689376831, Code:
this.this$0.verifyCallingPackage(v13, p2);
this.this$0.isAllowedBlobStoreAccess(v13, p2);
this.this$0.releaseLeaseInternal(p1, v13, p2);
  - Access Control Level: SYS_OR_SIG

- API Name: releaseAllLeases(Ljava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7927849292755127, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
if (v4 == 0) { BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1); return; }
  - Similarity: 0.7613921165466309, Code:
this.this$0.verifyCallingPackage(v2, p1);
boolean v6 = this.this$0.isAllowedBlobStoreAccess(v2, p1);
if (v5 == 0) { this.this$0.releaseAllLeasesInternal(v2, p1); return; }
  - Access Control Level: SYS_OR_SIG

- API Name: acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7911950945854187, Code:
BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v15, p5);
boolean v17 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v15, p5);
BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v14, p4, v15, p5);
  - Similarity: 0.7798222303390503, Code:
this.this$0.verifyCallingPackage(v26, p5);
boolean v30 = this.this$0.isAllowedBlobStoreAccess(v26, p5);
this.this$0.acquireLeaseInternal(p1, p2, v23, p4, v26, p5);
  - Similarity: 0.7513241171836853, Code:
Object v41 = this.mBlobsMap.get(p1);
v41.addOrReplaceLeasee(p5, v26, p2, v23, p4);
  - Access Control Level: SYS_OR_SIG

- API Name: openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7738799452781677, Code:
BlobStoreSession v12 = this.this$0.openSessionInternal(p1, v8, p2);
return v11;
  - Similarity: 0.7525613307952881, Code:
BlobStoreManagerService.-$$Nest$mopenSessionInternal(this.this$0, p1, v8, p2);
return v10;
  - Access Control Level: SYS_OR_SIG

