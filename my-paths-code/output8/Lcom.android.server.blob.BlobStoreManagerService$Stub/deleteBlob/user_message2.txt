The method deleteBlob in the following class Lcom.android.server.blob.BlobStoreManagerService$Stub has the following code snippet:

This is path 1 for the API with depth 2:
public void deleteBlob(long p1){
	Set v4 = this.mBlobsMap.entrySet();
	BlobStoreManagerService$$ExternalSyntheticLambda8 v5 = new BlobStoreManagerService$$ExternalSyntheticLambda8(BlobStoreManagerService,p1);
	boolean v7 = v4.removeIf(v5);
	BlobStoreManagerService.writeBlobsInfoAsync();
	return;
}


This is path 2 for the API with depth 1:
public void deleteBlob(long p1){
	this.this$0.deleteBlobInternal(p1, v1);
	return;
}


This is path 3 for the API with depth 0:
public void deleteBlob(long p1){
	BlobStoreManagerService.-$$Nest$mdeleteBlobInternal(this.this$0, p1, v1);
	return;
}

and the following sink code:
['Set v4 = this.mBlobsMap.entrySet();\nBlobStoreManagerService$$ExternalSyntheticLambda8 v5 = new BlobStoreManagerService$$ExternalSyntheticLambda8(BlobStoreManagerService,p1);\nboolean v7 = v4.removeIf(v5);\nBlobStoreManagerService.writeBlobsInfoAsync();', 'this.this$0.deleteBlobInternal(p1, v1);', 'BlobStoreManagerService.-$$Nest$mdeleteBlobInternal(this.this$0, p1, v1);']

The method deleteBlob has the following similar APIs:

- API Name: releaseAllLeases(Ljava/lang/String;)V in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.73748379945755, Code:
Object v1 = Objects.requireNonNull(p1, "packageName must not be null");
int v2 = Binder.getCallingUid();
BlobStoreManagerService$$ExternalSyntheticLambda12 v15 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p1,v2);
this.mBlobsMap.forEach(v15);
  - Access Control Level: SYS_OR_SIG

- API Name: openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7224432229995728, Code:
BlobStoreManagerService.-$$Nest$mopenSessionInternal(this.this$0, p1, v8, p2);
return v10;
  - Access Control Level: SYS_OR_SIG

- API Name: getLeasedBlobs(Ljava/lang/String;)Ljava/util/List; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.7215849757194519, Code:
int v2 = Binder.getCallingUid();
BlobStoreManagerService$$ExternalSyntheticLambda13 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda13(p1,v2,v9);
BlobStoreManagerService.forEachBlobLocked(v11);
List v8 = v9;
return v7;
  - Access Control Level: SYS_OR_SIG

- API Name: openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor; in the following Class: Lcom.android.server.blob.BlobStoreManagerService$Stub with the following sink code entries:
  - Similarity: 0.701884925365448, Code:
Object v26 = this.mBlobsMap.get(p1);
if (v26 == 0) {
boolean v27 = v26.isAccessAllowedForCaller(p2, v13);
long v28 = v26.getBlobId();
long v29 = v26.getSize();
FrameworkStatsLog.write(300, v13, v28, v29, 1);
ParcelFileDescriptor v31 = v26.openForRead(p2, v13);
return v24;
  - Access Control Level: SYS_OR_SIG

