The method resetThrottling has the following code snippet:

This is path 1 for the API with depth 2:
public void resetThrottling(){
	boolean v2 = v4;
	if (v2 != 0) {
		int v6 = ShortcutService.injectBinderCallingUid();
		if (v6 == 2000) {
			if (v6 != 0) {
				boolean v5 = 0;
				if (v5 == 0) {
					int v9 = IShortcutService$Stub.getCallingUid();
					int v8 = v9;
					int v10 = UserHandle.getUserId(v8);
					int v7 = v10;
					boolean v13 = this.mUnlockedUsers.get(v7);
					if (v13 == 0) {
						boolean v14 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(v7);
						boolean v12 = v14;
						if (v12 != 0) {
							boolean v16 = ShortcutService.isUserUnlockedL(v7);
							if (v16 != 0) {
								if (v7 == this.mLastLockedUser) {
									ShortcutService.wtf("User still locked");
									this.mLastLockedUser = v7;
									Object v18 = this.mUsers.get(v7);
									if (v18 != 0) {
										ShortcutUser v19 = ShortcutService.loadUserLocked(v7);
										if (v19 != 0) {
											ShortcutUser v20 = new ShortcutUser(ShortcutService,v7);
											this.mUsers.put(v7, v19);
											ShortcutService.checkPackageChanges(v7);
											ShortcutUser v15 = v18;
											int v25 = this.mPackages.size();
											if ((v25 + -1) < 0) {
												Object v26 = this.mPackages.valueAt((v25 + -1));
												v26.resetThrottling();
												if (((v25 + -1) + -1) < 0) {
													ShortcutService.scheduleSaveInner(v7);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void resetThrottling(){
	boolean v2 = ShortcutService.isCallerSystem();
	if (v2 != 0) {
		boolean v3 = ShortcutService.isCallerShell();
		if (v3 == 0) {
			int v5 = ShortcutService.injectBinderCallingUid();
			int v6 = UserHandle.getUserId(v5);
			int v4 = v6;
			boolean v8 = ShortcutService.isUserUnlockedL(v4);
			if (v8 != 0) {
				ShortcutUser v9 = ShortcutService.getUserShortcutsLocked(v4);
				v9.resetThrottling();
				ShortcutService.scheduleSaveUser(v4);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void resetThrottling(){
	p0.enforceSystemOrShell();
	int v2 = p0.getCallingUserId();
	p0.resetThrottlingInner(v2);
	return;
}

and the following sink code:
['int v6 = ShortcutService.injectBinderCallingUid();\nint v8 = v9;\nint v10 = UserHandle.getUserId(v8);\nboolean v13 = this.mUnlockedUsers.get(v7);\nShortcutUser v19 = ShortcutService.loadUserLocked(v7);\nthis.mUsers.put(v7, v19);\nv26.resetThrottling();', 'int v5 = ShortcutService.injectBinderCallingUid();\nint v6 = UserHandle.getUserId(v5);\nboolean v8 = ShortcutService.isUserUnlockedL(v4);\nv9.resetThrottling();', 'p0.enforceSystemOrShell();\nint v2 = p0.getCallingUserId();\np0.resetThrottlingInner(v2);']

The method resetThrottling has the following similar APIs:

- API Name: getShareTargets(Ljava/lang/String;Landroid/content/IntentFilter;I)Landroid/content/pm/ParceledListSlice; with Similarity Score: 0.832898736000061
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v8 = this.mUnlockedUsers.get(p3);
int v38 = v32.size();
ShortcutUser v24 = ShortcutService.loadUserInternal(p3, v23, 0);
ParceledListSlice v49 = new ParceledListSlice(v10);

- API Name: disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V with Similarity Score: 0.8019109964370728
  - Access Control Level: SYS_OR_SIG and the following code:
long v7 = ShortcutService.injectClearCallingIdentity();
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p5);
ShortcutUser v25 = new ShortcutUser(ShortcutService,p5);
this.mUsers.put(p5, v25);

