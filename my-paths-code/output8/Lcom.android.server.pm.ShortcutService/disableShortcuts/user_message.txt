This is path 1 for the API with depth 2:
public void disableShortcuts(String p1, List p2, CharSequence p3, int p4, int p5){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p5);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p5);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p5);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p5);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p5);
				if (v22 != 0) {
					if (p5 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p5;
						Object v24 = this.mUsers.get(p5);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p5);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p5);
								this.mUsers.put(p5, v25);
								ShortcutService.checkPackageChanges(p5);
								ShortcutUser v21 = v24;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = v31;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									int v40 = p2.size();
									if ((v40 + -1) < 0) {
										Object v41 = p2.get((v40 + -1));
										ShortcutInfo v43 = ShortcutPackage.findShortcutById(v41);
										ShortcutPackage.ensureNotImmutable(v43, 1);
										if (((v40 + -1) + -1) < 0) {
											if (p3 != 0) {
												int v45 = p2.size();
												if ((v45 - 1) < 0) {
													Object v46 = p2.get((v45 - 1));
													CharSequence v47 = Preconditions.checkStringNotEmpty(v46);
													if (v47 != 0) {
														Object v50 = this.mShortcuts.get(v47);
														ShortcutInfo v49 = v50;
														if (v49 == 0) {
															boolean v52 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
															boolean v51 = (v52 ^ 1);
															if (v51 == 0) {
																boolean v48 = 1;
																if (v48 != 0) {
																	if (1 == 0) {
																		if (1 != 1) {
																			StringBuilder v55 = new StringBuilder();
																			StringBuilder v57 = v55.append("disable and disabledReason disagree: ");
																			StringBuilder v58 = v55.append(1);
																			StringBuilder v59 = v55.append(" vs ");
																			StringBuilder v60 = v55.append(1);
																			String v61 = v55.toString();
																			Preconditions.checkState(1, v61);
																			ShortcutInfo v63 = ShortcutPackage.findShortcutById(v47);
																			if (v63 == 0) {
																				boolean v64 = v63.isEnabled();
																				if (v64 != 0) {
																					if (1 == 0) {
																						boolean v65 = v63.isVisibleToPublisher();
																						if (v65 != 0) {
																							if (0 != 0) {
																								ShortcutPackage.ensureNotImmutable(v63, 1);
																								if (0 != 0) {
																									String v67 = new String(1);
																									ShortcutPackage.removeShortcutAsync(v67);
																									boolean v69 = v63.isPinned();
																									if (v69 != 0) {
																										boolean v70 = v63.isCached();
																										if (v70 == 0) {
																											String v71 = v63.getId();
																											ShortcutPackage$$ExternalSyntheticLambda38 v72 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,1,1);
																											ShortcutPackage.mutateShortcut(v71, v63, v72);
																											ShortcutInfo v54 = 0;
																											ShortcutPackage$$ExternalSyntheticLambda6 v75 = new ShortcutPackage$$ExternalSyntheticLambda6(ShortcutPackage,0,p4);
																											Object v78 = Objects.requireNonNull(v47);
																											Object v79 = Objects.requireNonNull(v75);
																											if (0 == 0) {
																												v75.accept(0);
																												ShortcutInfo v81 = ShortcutPackage.findShortcutById(v47);
																												if (v81 != 0) {
																													v75.accept(v81);
																													ShortcutInfo v83 = new ShortcutInfo(1);
																													ShortcutPackage.saveShortcut(v83);
																													ShortcutInfo v53 = v54;
																													if (v53 != 0) {
																														if (0 != 0) {
																															ArrayList v85 = new ArrayList(1);
																															ShortcutInfo v87 = v20.findShortcutById(v47);
																															boolean v88 = 0.add(v87);
																															if (((v45 - 1) + -1) < 0) {
																																long v91 = System.currentTimeMillis();
																																long v90 = v91;
																																ShortcutPackage$$ExternalSyntheticLambda4 v92 = new ShortcutPackage$$ExternalSyntheticLambda4(v90);
																																int v95 = this.mShortcuts.size();
																																if ((v95 + -1) < 0) {
																																	Object v96 = this.mShortcuts.valueAt((v95 + -1));
																																	v92.accept(v96);
																																	if (((v95 + -1) + -1) < 0) {
																																		ArrayMap v99 = new ArrayMap();
																																		ShortcutPackage$$ExternalSyntheticLambda40 v101 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v99);
																																		ShortcutPackage.forEachShortcut(v101);
																																		ArrayMap v98 = v99;
																																		int v104 = v98.size();
																																		if ((v104 + -1) < 0) {
																																			Object v105 = v98.valueAt((v104 + -1));
																																			Collections.sort(v105, this.mShortcutRankComparator);
																																			int v107 = v105.size();
																																			if (0 >= v107) {
																																				Object v108 = v105.get(0);
																																				boolean v110 = ShortcutInfo.isDeclaredInManifest();
																																				boolean v109 = v110;
																																				if (v109 == 0) {
																																					boolean v112 = ShortcutInfo.hasFlags(1);
																																					boolean v111 = v112;
																																					if (v111 != 0) {
																																						int v113 = this.mRank;
																																						if (v113 == 0) {
																																							String v114 = this.mId;
																																							ShortcutPackage$$ExternalSyntheticLambda5 v115 = new ShortcutPackage$$ExternalSyntheticLambda5(v90,0);
																																							Object v118 = Objects.requireNonNull(v114);
																																							Object v119 = Objects.requireNonNull(v115);
																																							if (v108 == 0) {
																																								v115.accept(v108);
																																								ShortcutInfo v121 = ShortcutPackage.findShortcutById(v114);
																																								if (v121 != 0) {
																																									v115.accept(v121);
																																									ShortcutInfo v123 = new ShortcutInfo(1);
																																									ShortcutPackage.saveShortcut(v123);
																																									if ((0 + 1) >= v107) {
																																										if (((v104 + -1) + -1) < 0) {
																																											Object v126 = Objects.requireNonNull(v20);
																																											String v127 = this.mPackageName;
																																											int v128 = this.mPackageUserId;
																																											ShortcutService$$ExternalSyntheticLambda28 v130 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v128,v127);
																																											Runnable v129 = v130;
																																											Object v133 = Objects.requireNonNull(v20);
																																											Object v134 = Objects.requireNonNull(v129);
																																											this.mHandler.removeCallbacksAndMessages(v20);
																																											boolean v136 = this.mHandler.postDelayed(v129, v20, 100);
																																											List v138 = ShortcutService.removeNonKeyFields(0);
																																											List v139 = ShortcutService.removeNonKeyFields(0);
																																											UserHandle v140 = UserHandle.of(v128);
																																											ShortcutService$$ExternalSyntheticLambda26 v141 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v128,v138,v127,v140,v139);
																																											ShortcutService.injectPostToHandler(v141);
																																											ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																											boolean v147 = 0;
																																											if (v147 == 0) {
																																												ShortcutService$$ExternalSyntheticLambda25 v149 = new ShortcutService$$ExternalSyntheticLambda25();
																																												ShortcutService.forEachLoadedUserLocked(v149);
																																												return;
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void disableShortcuts(String p1, List p2, CharSequence p3, int p4, int p5){
	int v6 = ShortcutService.injectGetPackageUid(p1, p5);
	if (v6 != v4) {
		boolean v7 = ShortcutService.isEphemeralApp(p1, p5);
		Preconditions.checkState((v7 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v9 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v11 = ShortcutService.isUserUnlockedL(p5);
		if (v11 == 0) {
			ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p5);
			ShortcutPackage v14 = v13.getPackageShortcuts(p1);
			ShortcutUser v15 = v14.getUser();
			v15.onCalledByPublisher(p1);
			ShortcutPackage v12 = v14;
			int v18 = p2.size();
			if ((v18 + -1) < 0) {
				Object v19 = p2.get((v18 + -1));
				ShortcutPackage.ensureNotImmutable(v19, 1);
				if (((v18 + -1) + -1) < 0) {
					if (p3 != 0) {
						int v21 = p2.size();
						if ((v21 - 1) < 0) {
							Object v22 = p2.get((v21 - 1));
							CharSequence v23 = Preconditions.checkStringNotEmpty(v22);
							ShortcutInfo v25 = ShortcutPackage.findShortcutById(v23);
							if (v25 == 0) {
								boolean v26 = v25.isVisibleToPublisher();
								if (v26 == 0) {
									boolean v24 = 1;
									if (v24 != 0) {
										ShortcutInfo v28 = ShortcutPackage.deleteOrDisableWithId(v23, 1, 0, 1, 1, 0);
										ShortcutPackage$$ExternalSyntheticLambda6 v29 = new ShortcutPackage$$ExternalSyntheticLambda6(ShortcutPackage,0,p4);
										ShortcutPackage.mutateShortcut(v23, 0, v29);
										ShortcutInfo v27 = v28;
										if (v27 != 0) {
											if (0 != 0) {
												ArrayList v32 = new ArrayList(1);
												if (v23 != 0) {
													Object v35 = this.mShortcuts.get(v23);
													ShortcutInfo v34 = v35;
													boolean v36 = 0.add(v34);
													if (((v21 - 1) + -1) < 0) {
														long v38 = ShortcutUser.mService.injectCurrentTimeMillis();
														ShortcutPackage$$ExternalSyntheticLambda4 v39 = new ShortcutPackage$$ExternalSyntheticLambda4(v38);
														ShortcutPackage.forEachShortcutMutate(v39);
														ArrayMap v42 = ShortcutPackage.sortShortcutsToActivities();
														int v43 = v42.size();
														if ((v43 + -1) < 0) {
															Object v44 = v42.valueAt((v43 + -1));
															Collections.sort(v44, this.mShortcutRankComparator);
															int v46 = v44.size();
															if (0 >= v46) {
																Object v47 = v44.get(0);
																boolean v48 = v47.isManifestShortcut();
																if (v48 == 0) {
																	boolean v49 = v47.isDynamic();
																	if (v49 != 0) {
																		StringBuilder v50 = new StringBuilder();
																		StringBuilder v52 = v50.append("Non-dynamic shortcut found. ");
																		String v53 = v47.toInsecureString();
																		StringBuilder v54 = v50.append(v53);
																		String v55 = v50.toString();
																		ShortcutUser.mService.wtf(v55);
																		if ((0 + 1) >= v46) {
																			if (((v43 + -1) + -1) < 0) {
																				Object v58 = Objects.requireNonNull(v12);
																				String v59 = v12.getPackageName();
																				int v60 = v12.getPackageUserId();
																				Runnable v61 = ShortcutService.notifyListenerRunnable(v59, v60);
																				ShortcutService.injectPostToHandlerDebounced(v12, v61);
																				ShortcutService.notifyShortcutChangeCallbacks(v59, v60, 0, 0);
																				v12.scheduleSave();
																				boolean v66 = ShortcutService.injectShouldPerformVerification();
																				if (v66 == 0) {
																					ShortcutService.verifyStatesInner();
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void disableShortcuts(String p1, List p2, CharSequence p3, int p4, int p5){
	p0.verifyCaller(p1, p5);
	Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
	p0.throwIfUserLockedL(p5);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5);
	v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
	if (p3 != 0) {
		int v6 = p2.size();
		if ((v6 - 1) < 0) {
			Object v7 = p2.get((v6 - 1));
			CharSequence v8 = Preconditions.checkStringNotEmpty(v7);
			boolean v9 = v4.isShortcutExistsAndVisibleToPublisher(v8);
			if (v9 != 0) {
				ShortcutInfo v10 = v4.disableWithId(v8, 0, p4, 0, 1, 1);
				if (v10 != 0) {
					if (0 != 0) {
						ArrayList v11 = new ArrayList(1);
						ShortcutInfo v13 = v4.findShortcutById(v8);
						boolean v14 = 0.add(v13);
						if (((v6 - 1) + -1) < 0) {
							v4.adjustRanks();
							p0.packageShortcutsChanged(v4, 0, 0);
							p0.verifyStates();
							return;
						}
					}
				}
			}
		}
	}
}
