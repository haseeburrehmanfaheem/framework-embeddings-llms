The method applyRestore has the following code snippet:

This is path 1 for the API with depth 2:
public void applyRestore(byte[] p1, int p2){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p2);
		if (v5 != 0) {
			ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);
			boolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);
			ShortcutDumpFiles$$ExternalSyntheticLambda0 v10 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p1);
			File v13 = this.mService.getDumpPath();
			boolean v14 = v13.mkdirs();
			boolean v15 = v13.exists();
			if (v15 != 0) {
				File v16 = new File(v13,"restore-1-payload.xml");
				PrintWriter v18 = new PrintWriter(v19);
				BufferedOutputStream v19 = new BufferedOutputStream(v20);
				FileOutputStream v20 = new FileOutputStream(v16);
				v10.accept(v18);
				v18.close();
				boolean v12 = 1;
				boolean v9 = v12;
				ByteArrayInputStream v26 = new ByteArrayInputStream(p1);
				if (1 == 0) {
					TypedXmlPullParser v29 = Xml.newFastPullParser();
					String v30 = StandardCharsets.UTF_8.name();
					v29.setInput(v26, v30);
					int v32 = v29.next();
					if (v32 == 1) {
						if (v32 == 2) {
							int v33 = v29.getDepth();
							String v34 = v29.getName();
							if (v33 != 1) {
								boolean v35 = "user".equals(v34);
								if (v35 == 0) {
									ShortcutUser v37 = new ShortcutUser(ShortcutService,p2);
									String v39 = ShortcutService.parseStringAttribute(v29, "locales");
									this.mKnownLocales = v39;
									long v40 = ShortcutService.parseLongAttribute(v29, "last-app-scan-time2");
									long v41 = ShortcutService.injectCurrentTimeMillis();
									if ((v40 < v41) >= 0) {
										this.mLastAppScanTime = v40;
										String v42 = ShortcutService.parseStringAttribute(v29, "last-app-scan-fp");
										this.mLastAppScanOsFingerprint = v42;
										String v43 = ShortcutService.parseStringAttribute(v29, "restore-from-fp");
										this.mRestoreFromOsFingerprint = v43;
										int v44 = v29.getDepth();
										int v45 = v29.next();
										if (v45 == 1) {
											if (v45 != 3) {
												int v46 = v29.getDepth();
												if (v46 <= v44) {
													if (v45 == 2) {
														int v47 = v29.getDepth();
														String v48 = v29.getName();
														if (v47 != (v44 + 1)) {
															int v49 = v48.hashCode();
															if (v49 == -1146595445) {
																if (v49 == -807062458) {
																	if (-1 == 0) {
																		if (-1 == 1) {
																			ShortcutService.warnForInvalidTag(v47, v48);
																			int v51 = v29.next();
																			if (v51 == 1) {
																				if (v51 != 3) {
																					int v52 = v29.getDepth();
																					if (v52 <= v44) {
																						if (1 == 0) {
																							ShortcutService.scheduleSaveUser(p2);
																							ShortcutUser v36 = v37;
																							int v54 = v29.next();
																							if (v54 == 1) {
																								ShortcutUser v28 = 0;
																								ShortcutService$$ExternalSyntheticLambda7 v55 = new ShortcutService$$ExternalSyntheticLambda7(p0);
																								boolean v57 = this.mShortcutDumpFiles.save("restore-2.txt", v55);
																								boolean v60 = this.mUnlockedUsers.get(p2);
																								if (v60 == 0) {
																									boolean v61 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
																									boolean v59 = v61;
																									if (v59 != 0) {
																										if (p2 == this.mLastLockedUser) {
																											ShortcutService.wtf("User still locked", 0);
																											this.mLastLockedUser = p2;
																											Object v64 = this.mUsers.get(p2);
																											if (v64 != 0) {
																												File v66 = ShortcutService.getUserFile(p2);
																												AtomicFile v67 = new AtomicFile(v66);
																												FileInputStream v69 = v67.openRead();
																												ShortcutUser v70 = ShortcutService.loadUserInternal(p2, v69, 0);
																												IoUtils.closeQuietly(v69);
																												ShortcutUser v65 = v70;
																												if (v65 != 0) {
																													ShortcutUser v72 = new ShortcutUser(ShortcutService,p2);
																													this.mUsers.put(p2, v65);
																													boolean v76 = ShortcutService.injectIsSafeModeEnabled();
																													if (v76 == 0) {
																														long v77 = ShortcutService.getStatStartTime();
																														ArrayList v78 = new ArrayList();
																														ShortcutUser v80 = ShortcutService.getUserShortcutsLocked(p2);
																														ShortcutService$$ExternalSyntheticLambda18 v81 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v78);
																														v80.forAllPackageItems(v81);
																														int v84 = v78.size();
																														if (v84 <= 0) {
																															int v85 = v78.size();
																															if ((v85 + -1) < 0) {
																																Object v86 = v78.get((v85 + -1));
																																ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p2, ShortcutUser$PackageWithUser.userId, 0);
																																if (((v85 + -1) + -1) < 0) {
																																	long v88 = v80.getLastAppScanTime();
																																	ShortcutService.rescanUpdatedPackagesLocked(p2, v88);
																																	ShortcutService.logDurationStat(8, v77);
																																	ShortcutService.verifyStates();
																																	ShortcutUser v58 = v64;
																																	[I v93 = new [I(1);
																																	[I v94 = new [I(1);
																																	[I v95 = new [I(1);
																																	this.mLaunchers.clear();
																																	ShortcutUser$$ExternalSyntheticLambda3 v97 = new ShortcutUser$$ExternalSyntheticLambda3(ShortcutUser,this.mService,v93);
																																	int v100 = this.mLaunchers.size();
																																	if (0 >= v100) {
																																		Object v101 = this.mLaunchers.valueAt(0);
																																		v97.accept(v101);
																																		if ((0 + 1) >= v100) {
																																			ShortcutUser$$ExternalSyntheticLambda4 v103 = new ShortcutUser$$ExternalSyntheticLambda4(ShortcutUser,this.mService,v94,v95);
																																			int v106 = this.mPackages.size();
																																			if (0 >= v106) {
																																				Object v107 = this.mPackages.valueAt(0);
																																				v103.accept(v107);
																																				if ((0 + 1) >= v106) {
																																					this.mLaunchers.clear();
																																					this.mPackages.clear();
																																					this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
																																					ShortcutService$$ExternalSyntheticLambda7 v121 = new ShortcutService$$ExternalSyntheticLambda7(p0);
																																					boolean v123 = this.mShortcutDumpFiles.save("restore-3.txt", v121);
																																					boolean v126 = ShortcutService.isUserUnlockedL(p2);
																																					if (v126 != 0) {
																																						if (p2 == this.mLastLockedUser) {
																																							ShortcutService.wtf("User still locked");
																																							this.mLastLockedUser = p2;
																																							Object v128 = this.mUsers.get(p2);
																																							if (v128 != 0) {
																																								ShortcutUser v129 = ShortcutService.loadUserLocked(p2);
																																								if (v129 != 0) {
																																									ShortcutUser v130 = new ShortcutUser(ShortcutService,p2);
																																									this.mUsers.put(p2, v129);
																																									ShortcutService.checkPackageChanges(p2);
																																									ShortcutUser v125 = v128;
																																									long v135 = System.currentTimeMillis();
																																									long v134 = v135;
																																									String v136 = Build.FINGERPRINT;
																																									String v137 = this.mLastAppScanOsFingerprint;
																																									boolean v138 = v136.equals(v137);
																																									ShortcutService$$ExternalSyntheticLambda21 v139 = new ShortcutService$$ExternalSyntheticLambda21(ShortcutService,v125,p2);
																																									List v142 = ShortcutService.getInstalledPackages(p2);
																																									int v143 = v142.size();
																																									if ((v143 + -1) < 0) {
																																										Object v144 = v142.get((v143 + -1));
																																										if ((v138 ^ 1) != 0) {
																																											if ((PackageInfo.lastUpdateTime < 0) < 0) {
																																												v139.accept(PackageInfo.applicationInfo);
																																												if (((v143 + -1) + -1) < 0) {
																																													this.mLastAppScanTime = v134;
																																													String v147 = Build.FINGERPRINT;
																																													this.mLastAppScanOsFingerprint = v147;
																																													ShortcutService.scheduleSaveInner(p2);
																																													ShortcutService$$ExternalSyntheticLambda7 v151 = new ShortcutService$$ExternalSyntheticLambda7(p0);
																																													boolean v153 = this.mShortcutDumpFiles.save("restore-4.txt", v151);
																																													ShortcutService$$ExternalSyntheticLambda8 v154 = new ShortcutService$$ExternalSyntheticLambda8(p0);
																																													boolean v156 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v154);
																																													File v159 = new File(v160,"shortcuts.xml");
																																													File v160 = ShortcutService.injectUserDataPath(p2);
																																													File v158 = v159;
																																													File v162 = v158.getParentFile();
																																													boolean v163 = v162.mkdirs();
																																													AtomicFile v164 = new AtomicFile(v158);
																																													FileOutputStream v166 = v164.startWrite();
																																													if (0 == 0) {
																																														TypedXmlSerializer v168 = Xml.newFastSerializer();
																																														String v169 = StandardCharsets.UTF_8.name();
																																														v168.setOutput(v166, v169);
																																														v168.startDocument(0, Boolean.TRUE);
																																														ShortcutUser v172 = ShortcutService.getUserShortcutsLocked(p2);
																																														v172.saveToXml(v168, 0);
																																														v168.endDocument();
																																														v166.flush();
																																														v164.finishWrite(v166);
																																														long v178 = ShortcutService.getStatStartTime();
																																														ShortcutUser v179 = ShortcutService.getUserShortcutsLocked(p2);
																																														File v180 = ShortcutService.getUserBitmapFilePath(p2);
																																														File v181 = v180.listFiles();
																																														if (v181 != 0) {
																																															if (0 >= v181.length) {
																																																boolean v182 = v181[0].isDirectory();
																																																if (v182 != 0) {
																																																	String v183 = v181[0].getName();
																																																	boolean v184 = v179.hasPackage(v183);
																																																	if (v184 != 0) {
																																																		ShortcutService.cleanupBitmapsForPackage(p2, v183);
																																																		if ((0 + 1) >= v181.length) {
																																																			ShortcutService.logDurationStat(5, v178);
																																																			boolean v188 = ShortcutService.isUserUnlockedL(p2);
																																																			if (v188 != 0) {
																																																				if (p2 == this.mLastLockedUser) {
																																																					ShortcutService.wtf("User still locked");
																																																					this.mLastLockedUser = p2;
																																																					Object v190 = this.mUsers.get(p2);
																																																					if (v190 != 0) {
																																																						ShortcutUser v191 = ShortcutService.loadUserLocked(p2);
																																																						if (v191 != 0) {
																																																							ShortcutUser v192 = new ShortcutUser(ShortcutService,p2);
																																																							this.mUsers.put(p2, v191);
																																																							ShortcutService.checkPackageChanges(p2);
																																																							ShortcutUser v187 = v190;
																																																							int v197 = this.mPackages.size();
																																																							if (0 >= v197) {
																																																								Object v198 = this.mPackages.valueAt(0);
																																																								boolean v199 = v198.hasShareTargets();
																																																								if (v199 == 0) {
																																																									Object v200 = this.mPackages.valueAt(0);
																																																									int v201 = v200.getSharingShortcutCount();
																																																									int v202 = this.mPackages.size();
																																																									if ((0 + 1) >= v202) {
																																																										LogMaker v203 = new LogMaker(1717);
																																																										LogMaker v205 = v203.setType(1);
																																																										LogMaker v206 = v205.setSubtype(this.mUserId);
																																																										this.mMetricsLogger.write(v206);
																																																										LogMaker v208 = v203.setType(2);
																																																										LogMaker v209 = v208.setSubtype(0);
																																																										this.mMetricsLogger.write(v209);
																																																										LogMaker v211 = v203.setType(3);
																																																										LogMaker v212 = v211.setSubtype(0);
																																																										this.mMetricsLogger.write(v212);
																																																										return;
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void applyRestore(byte[] p1, int p2){
	boolean v2 = ShortcutService.isCallerSystem();
	if (v2 == 0) {
		boolean v4 = this.mUnlockedUsers.get(p2);
		if (v4 == 0) {
			boolean v5 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
			boolean v3 = v5;
			if (v3 != 0) {
				ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);
				boolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);
				ShortcutDumpFiles$$ExternalSyntheticLambda0 v10 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p1);
				boolean v12 = ShortcutDumpFiles.save("restore-1-payload.xml", v10);
				boolean v9 = v12;
				ByteArrayInputStream v13 = new ByteArrayInputStream(p1);
				if (1 == 0) {
					TypedXmlPullParser v16 = Xml.newFastPullParser();
					String v17 = StandardCharsets.UTF_8.name();
					v16.setInput(v13, v17);
					int v19 = v16.next();
					if (v19 == 1) {
						if (v19 == 2) {
							int v20 = v16.getDepth();
							String v21 = v16.getName();
							if (v20 != 1) {
								boolean v22 = "user".equals(v21);
								if (v22 == 0) {
									ShortcutUser v23 = ShortcutUser.loadFromXml(ShortcutService, v16, p2, 1);
									int v24 = v16.next();
									if (v24 == 1) {
										ShortcutUser v15 = 0;
										ShortcutService$$ExternalSyntheticLambda7 v25 = new ShortcutService$$ExternalSyntheticLambda7(p0);
										boolean v27 = this.mShortcutDumpFiles.save("restore-2.txt", v25);
										boolean v29 = ShortcutService.isUserUnlockedL(p2);
										if (v29 != 0) {
											if (p2 == this.mLastLockedUser) {
												ShortcutService.wtf("User still locked");
												this.mLastLockedUser = p2;
												Object v31 = this.mUsers.get(p2);
												if (v31 != 0) {
													ShortcutUser v32 = ShortcutService.loadUserLocked(p2);
													if (v32 != 0) {
														ShortcutUser v33 = new ShortcutUser(ShortcutService,p2);
														this.mUsers.put(p2, v32);
														ShortcutService.checkPackageChanges(p2);
														ShortcutUser v28 = v31;
														[I v38 = new [I(1);
														[I v39 = new [I(1);
														[I v40 = new [I(1);
														this.mLaunchers.clear();
														ShortcutUser$$ExternalSyntheticLambda3 v42 = new ShortcutUser$$ExternalSyntheticLambda3(ShortcutUser,this.mService,v38);
														v15.forAllLaunchers(v42);
														ShortcutUser$$ExternalSyntheticLambda4 v45 = new ShortcutUser$$ExternalSyntheticLambda4(ShortcutUser,this.mService,v39,v40);
														v15.forAllPackages(v45);
														this.mLaunchers.clear();
														this.mPackages.clear();
														this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
														ShortcutService$$ExternalSyntheticLambda7 v60 = new ShortcutService$$ExternalSyntheticLambda7(p0);
														boolean v62 = this.mShortcutDumpFiles.save("restore-3.txt", v60);
														ShortcutUser v64 = ShortcutService.getUserShortcutsLocked(p2);
														long v65 = ShortcutService.injectCurrentTimeMillis();
														String v66 = ShortcutService.injectBuildFingerprint();
														String v67 = v64.getLastAppScanOsFingerprint();
														boolean v68 = v66.equals(v67);
														ShortcutService$$ExternalSyntheticLambda21 v69 = new ShortcutService$$ExternalSyntheticLambda21(ShortcutService,v64,p2);
														ShortcutService.forUpdatedPackages(p2, 0, (v68 ^ 1), v69);
														v64.setLastAppScanTime(v65);
														String v73 = ShortcutService.injectBuildFingerprint();
														v64.setLastAppScanOsFingerprint(v73);
														ShortcutService.scheduleSaveUser(p2);
														ShortcutService$$ExternalSyntheticLambda7 v76 = new ShortcutService$$ExternalSyntheticLambda7(p0);
														boolean v78 = this.mShortcutDumpFiles.save("restore-4.txt", v76);
														ShortcutService$$ExternalSyntheticLambda8 v79 = new ShortcutService$$ExternalSyntheticLambda8(p0);
														boolean v81 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v79);
														File v83 = ShortcutService.getUserFile(p2);
														File v84 = v83.getParentFile();
														boolean v85 = v84.mkdirs();
														AtomicFile v86 = new AtomicFile(v83);
														FileOutputStream v88 = v86.startWrite();
														ShortcutService.saveUserInternalLocked(p2, v88, 0);
														v86.finishWrite(v88);
														ShortcutService.cleanupDanglingBitmapDirectoriesLocked(p2);
														ShortcutUser v92 = ShortcutService.getUserShortcutsLocked(p2);
														v92.logSharingShortcutStats(this.mMetricsLogger);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void applyRestore(byte[] p1, int p2){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p2);
	if (v2 != 0) {
		ShortcutService$$ExternalSyntheticLambda6 v3 = new ShortcutService$$ExternalSyntheticLambda6(p0);
		boolean v5 = this.mShortcutDumpFiles.save("restore-0-start.txt", v3);
		boolean v6 = this.mShortcutDumpFiles.save("restore-1-payload.xml", p1);
		ByteArrayInputStream v7 = new ByteArrayInputStream(p1);
		ShortcutUser v9 = p0.loadUserInternal(p2, v7, 1);
		ShortcutService$$ExternalSyntheticLambda7 v10 = new ShortcutService$$ExternalSyntheticLambda7(p0);
		boolean v12 = this.mShortcutDumpFiles.save("restore-2.txt", v10);
		ShortcutUser v13 = p0.getUserShortcutsLocked(p2);
		v13.mergeRestoredFile(v9);
		ShortcutService$$ExternalSyntheticLambda7 v15 = new ShortcutService$$ExternalSyntheticLambda7(p0);
		boolean v17 = this.mShortcutDumpFiles.save("restore-3.txt", v15);
		p0.rescanUpdatedPackagesLocked(p2, 0);
		ShortcutService$$ExternalSyntheticLambda7 v19 = new ShortcutService$$ExternalSyntheticLambda7(p0);
		boolean v21 = this.mShortcutDumpFiles.save("restore-4.txt", v19);
		ShortcutService$$ExternalSyntheticLambda8 v22 = new ShortcutService$$ExternalSyntheticLambda8(p0);
		boolean v24 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v22);
		p0.saveUserLocked(p2);
		return;
	}
}

and the following sink code:
['ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);\nboolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);', 'ByteArrayInputStream v26 = new ByteArrayInputStream(p1);\nByteArrayInputStream v13 = new ByteArrayInputStream(p1);\nByteArrayInputStream v7 = new ByteArrayInputStream(p1);', 'File v16 = new File(v13,"restore-1-payload.xml");\nPrintWriter v18 = new PrintWriter(v19);\nBufferedOutputStream v19 = new BufferedOutputStream(v20);\nFileOutputStream v20 = new FileOutputStream(v16);', 'ShortcutUser v23 = ShortcutUser.loadFromXml(ShortcutService, v16, p2, 1);\nv15.forAllLaunchers(v42);\nv15.forAllPackages(v45);\nShortcutUser v9 = p0.loadUserInternal(p2, v7, 1);\nv13.mergeRestoredFile(v9);\np0.rescanUpdatedPackagesLocked(p2, 0);\np0.saveUserLocked(p2);']

The method applyRestore has the following similar APIs:

- API Name: enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.8125337958335876
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);
ShortcutPackage v14 = v13.getPackageShortcuts(p1);

- API Name: hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z with Similarity Score: 0.7634369730949402
  - Access Control Level: SYS_OR_SIG and the following code:
Object v10 = this.mUsers.get(p3);
ShortcutUser v11 = ShortcutService.loadUserLocked(p3);
this.mUsers.put(p3, v11);
ShortcutPackage v17 = ShortcutUser.getPackageShortcutsIfExists(p2);
ShortcutPackage v18 = new ShortcutPackage(ShortcutUser,this.mUserId,p2);
this.mPackages.put(p2, v18);
boolean v21 = v6.hasShareTargets();
return v21;

