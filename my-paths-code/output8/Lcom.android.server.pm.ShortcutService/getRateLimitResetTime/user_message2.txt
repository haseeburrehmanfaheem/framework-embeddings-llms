The method getRateLimitResetTime in the following class Lcom.android.server.pm.ShortcutService has the following code snippet:

This is path 1 for the API with depth 2:
public long getRateLimitResetTime(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		boolean v17 = this.mUnlockedUsers.get(p2);
		if (v17 == 0) {
			boolean v18 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
			boolean v16 = v18;
			if (v16 == 0) {
				long v21 = ShortcutService.injectCurrentTimeMillis();
				if ((this.mRawLastResetTime < 0) != 0) {
					if ((v21 < this.mRawLastResetTime) >= 0) {
						if (((this.mRawLastResetTime + this.mResetInterval) < v21) > 0) {
							this.mRawLastResetTime = (((v21 / this.mResetInterval) * this.mResetInterval) + (this.mRawLastResetTime % this.mResetInterval));
							if ((this.mRawLastResetTime < this.mRawLastResetTime) == 0) {
								ShortcutService.scheduleSaveBaseState();
								long v19 = (this.mRawLastResetTime + this.mResetInterval);
								return v19;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long getRateLimitResetTime(String p1, int p2){
	int v6 = ShortcutService.injectGetPackageUid(p1, p2);
	if (v6 != v4) {
		boolean v7 = ShortcutService.isEphemeralApp(p1, p2);
		Preconditions.checkState((v7 ^ 1), "Ephemeral apps can't use ShortcutManager");
		boolean v10 = ShortcutService.isUserUnlockedL(p2);
		if (v10 == 0) {
			ShortcutService.updateTimesLocked();
			long v11 = (this.mRawLastResetTime + this.mResetInterval);
			return v11;
		}
	}
}


This is path 3 for the API with depth 0:
public long getRateLimitResetTime(String p1, int p2){
	p0.verifyCaller(p1, p2);
	p0.throwIfUserLockedL(p2);
	long v3 = p0.getNextResetTimeLocked();
	return v3;
}

and the following sink code:
['int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);\nif (v6 != v4) {\nApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);\nboolean v13 = ShortcutService.isEphemeralApp(v12);\nPreconditions.checkState((v11 ^ 1), "Ephemeral apps can\'t use ShortcutManager");\nif ((this.mRawLastResetTime + this.mResetInterval) < v21) > 0) {\nthis.mRawLastResetTime = (((v21 / this.mResetInterval) * this.mResetInterval) + (this.mRawLastResetTime % this.mResetInterval));\nlong v19 = (this.mRawLastResetTime + this.mResetInterval);\nreturn v19;', 'int v6 = ShortcutService.injectGetPackageUid(p1, p2);\nboolean v7 = ShortcutService.isEphemeralApp(p1, p2);\nPreconditions.checkState((v7 ^ 1), "Ephemeral apps can\'t use ShortcutManager");\nlong v11 = (this.mRawLastResetTime + this.mResetInterval);\nreturn v11;', 'p0.verifyCaller(p1, p2);\np0.throwIfUserLockedL(p2);\nlong v3 = p0.getNextResetTimeLocked();\nreturn v3;']

The method getRateLimitResetTime has the following similar APIs:

- API Name: getRemainingCallCount(Ljava/lang/String;I)I in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.8944410085678101, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
boolean v13 = ShortcutService.isEphemeralApp(v12);
ShortcutUser v28 = new ShortcutUser(ShortcutService,p2);
ShortcutPackage v34 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
return (this.mMaxUpdatesPerInterval - this.mApiCallCount);
  - Similarity: 0.8468755483627319, Code:
int v6 = ShortcutService.injectGetPackageUid(p1, p2);
boolean v7 = ShortcutService.isEphemeralApp(p1, p2);
ShortcutUser v17 = ShortcutService.getUserShortcutsLocked(p2);
v17.getPackageShortcuts(p1);
return (this.mMaxUpdatesPerInterval - this.mApiCallCount);
  - Access Control Level: SYS_OR_SIG

- API Name: reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.8506372570991516, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p3);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p3);
boolean v13 = ShortcutService.isEphemeralApp(v12);
this.mUsageStatsManagerInternal.reportShortcutUsage(p1, p2, p3);
  - Similarity: 0.8134203553199768, Code:
int v6 = ShortcutService.injectGetPackageUid(p1, p3);
boolean v7 = ShortcutService.isEphemeralApp(p1, p3);
this.mUsageStatsManagerInternal.reportShortcutUsage(p1, p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getMaxShortcutCountPerActivity(Ljava/lang/String;I)I in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.8470115661621094, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
return this.mMaxShortcuts;
  - Similarity: 0.8433352112770081, Code:
int v6 = ShortcutService.injectGetPackageUid(p1, p2);
boolean v7 = ShortcutService.isEphemeralApp(p1, p2);
return this.mMaxShortcuts;
  - Access Control Level: SYS_OR_SIG

- API Name: getShortcuts(Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice; in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.8227357864379883, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p3);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p3);
ShortcutUser v25 = ShortcutService.getUserShortcutsLocked(p3);
ShortcutPackage v26 = v25.getPackageShortcuts(p1);
ArrayList v22 = new ArrayList();
ShortcutPackage.findAll(v22, v19, 9, 0, 0, 0);
ParceledListSlice v31 = new ParceledListSlice(v32);
  - Access Control Level: SYS_OR_SIG

- API Name: removeAllDynamicShortcuts(Ljava/lang/String;I)V in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.748585045337677, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ShortcutPackage v32 = ShortcutUser.getPackageShortcutsIfExists(p1);
ShortcutUser v27 = new ShortcutUser(ShortcutService,p2);
ShortcutPackage v33 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
  - Access Control Level: SYS_OR_SIG

