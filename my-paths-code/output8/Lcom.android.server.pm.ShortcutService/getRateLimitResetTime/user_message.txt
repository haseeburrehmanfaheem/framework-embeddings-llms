This is path 1 for the API with depth 2:
public long getRateLimitResetTime(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		boolean v17 = this.mUnlockedUsers.get(p2);
		if (v17 == 0) {
			boolean v18 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
			boolean v16 = v18;
			if (v16 == 0) {
				long v21 = ShortcutService.injectCurrentTimeMillis();
				if ((this.mRawLastResetTime < 0) != 0) {
					if ((v21 < this.mRawLastResetTime) >= 0) {
						if (((this.mRawLastResetTime + this.mResetInterval) < v21) > 0) {
							this.mRawLastResetTime = (((v21 / this.mResetInterval) * this.mResetInterval) + (this.mRawLastResetTime % this.mResetInterval));
							if ((this.mRawLastResetTime < this.mRawLastResetTime) == 0) {
								ShortcutService.scheduleSaveBaseState();
								long v19 = (this.mRawLastResetTime + this.mResetInterval);
								return v19;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long getRateLimitResetTime(String p1, int p2){
	int v6 = ShortcutService.injectGetPackageUid(p1, p2);
	if (v6 != v4) {
		boolean v7 = ShortcutService.isEphemeralApp(p1, p2);
		Preconditions.checkState((v7 ^ 1), "Ephemeral apps can't use ShortcutManager");
		boolean v10 = ShortcutService.isUserUnlockedL(p2);
		if (v10 == 0) {
			ShortcutService.updateTimesLocked();
			long v11 = (this.mRawLastResetTime + this.mResetInterval);
			return v11;
		}
	}
}


This is path 3 for the API with depth 0:
public long getRateLimitResetTime(String p1, int p2){
	p0.verifyCaller(p1, p2);
	p0.throwIfUserLockedL(p2);
	long v3 = p0.getNextResetTimeLocked();
	return v3;
}
