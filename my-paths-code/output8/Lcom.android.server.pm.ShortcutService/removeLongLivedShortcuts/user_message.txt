This is path 1 for the API with depth 2:
public void removeLongLivedShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p3);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p3);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p3);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p3);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p3);
				if (v22 != 0) {
					if (p3 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p3;
						Object v24 = this.mUsers.get(p3);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p3);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p3);
								this.mUsers.put(p3, v25);
								ShortcutService.checkPackageChanges(p3);
								ShortcutUser v21 = v24;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = v31;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									int v40 = p2.size();
									if ((v40 + -1) < 0) {
										Object v41 = p2.get((v40 + -1));
										ShortcutInfo v43 = ShortcutPackage.findShortcutById(v41);
										ShortcutPackage.ensureNotImmutable(v43, 1);
										if (((v40 + -1) + -1) < 0) {
											int v45 = p2.size();
											if ((v45 - 1) < 0) {
												Object v46 = p2.get((v45 - 1));
												CharSequence v47 = Preconditions.checkStringNotEmpty(v46);
												if (v47 != 0) {
													Object v50 = this.mShortcuts.get(v47);
													ShortcutInfo v49 = v50;
													if (v49 == 0) {
														boolean v52 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v51 = (v52 ^ 1);
														if (v51 == 0) {
															boolean v48 = 1;
															if (v48 != 0) {
																if (v47 != 0) {
																	Object v55 = this.mShortcuts.get(v47);
																	ShortcutInfo v54 = v55;
																	if (v54 == 0) {
																		ShortcutPackage$$ExternalSyntheticLambda3 v56 = new ShortcutPackage$$ExternalSyntheticLambda3();
																		Object v59 = Objects.requireNonNull(v47);
																		Object v60 = Objects.requireNonNull(v56);
																		if (0 == 0) {
																			v56.accept(0);
																			ShortcutInfo v62 = ShortcutPackage.findShortcutById(v47);
																			if (v62 != 0) {
																				v56.accept(v62);
																				ShortcutInfo v64 = new ShortcutInfo(1);
																				ShortcutPackage.saveShortcut(v64);
																				if (0 == 0) {
																					if (0 != 1) {
																						StringBuilder v67 = new StringBuilder();
																						StringBuilder v69 = v67.append("disable and disabledReason disagree: ");
																						StringBuilder v70 = v67.append(0);
																						StringBuilder v71 = v67.append(" vs ");
																						StringBuilder v72 = v67.append(0);
																						String v73 = v67.toString();
																						Preconditions.checkState(1, v73);
																						ShortcutInfo v75 = ShortcutPackage.findShortcutById(v47);
																						if (v75 == 0) {
																							boolean v76 = v75.isEnabled();
																							if (v76 != 0) {
																								if (1 == 0) {
																									boolean v77 = v75.isVisibleToPublisher();
																									if (v77 != 0) {
																										if (0 != 0) {
																											ShortcutPackage.ensureNotImmutable(v75, 1);
																											if (0 != 0) {
																												String v79 = new String(1);
																												ShortcutPackage.removeShortcutAsync(v79);
																												boolean v81 = v75.isPinned();
																												if (v81 != 0) {
																													boolean v82 = v75.isCached();
																													if (v82 == 0) {
																														String v83 = v75.getId();
																														ShortcutPackage$$ExternalSyntheticLambda38 v84 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,0,0);
																														ShortcutPackage.mutateShortcut(v83, v75, v84);
																														ShortcutInfo v66 = 0;
																														ShortcutInfo v53 = v66;
																														if (v53 == 0) {
																															if (0 != 0) {
																																ArrayList v87 = new ArrayList(1);
																																boolean v89 = 0.add(v53);
																																if (((v45 - 1) + -1) < 0) {
																																	long v92 = System.currentTimeMillis();
																																	long v91 = v92;
																																	ShortcutPackage$$ExternalSyntheticLambda4 v93 = new ShortcutPackage$$ExternalSyntheticLambda4(v91);
																																	int v96 = this.mShortcuts.size();
																																	if ((v96 + -1) < 0) {
																																		Object v97 = this.mShortcuts.valueAt((v96 + -1));
																																		v93.accept(v97);
																																		if (((v96 + -1) + -1) < 0) {
																																			ArrayMap v100 = new ArrayMap();
																																			ShortcutPackage$$ExternalSyntheticLambda40 v102 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v100);
																																			ShortcutPackage.forEachShortcut(v102);
																																			ArrayMap v99 = v100;
																																			int v105 = v99.size();
																																			if ((v105 + -1) < 0) {
																																				Object v106 = v99.valueAt((v105 + -1));
																																				Collections.sort(v106, this.mShortcutRankComparator);
																																				int v108 = v106.size();
																																				if (0 >= v108) {
																																					Object v109 = v106.get(0);
																																					boolean v111 = ShortcutInfo.isDeclaredInManifest();
																																					boolean v110 = v111;
																																					if (v110 == 0) {
																																						boolean v113 = ShortcutInfo.hasFlags(1);
																																						boolean v112 = v113;
																																						if (v112 != 0) {
																																							int v114 = this.mRank;
																																							if (v114 == 0) {
																																								String v115 = this.mId;
																																								ShortcutPackage$$ExternalSyntheticLambda5 v116 = new ShortcutPackage$$ExternalSyntheticLambda5(v91,0);
																																								Object v119 = Objects.requireNonNull(v115);
																																								Object v120 = Objects.requireNonNull(v116);
																																								if (v109 == 0) {
																																									v116.accept(v109);
																																									ShortcutInfo v122 = ShortcutPackage.findShortcutById(v115);
																																									if (v122 != 0) {
																																										v116.accept(v122);
																																										ShortcutInfo v124 = new ShortcutInfo(1);
																																										ShortcutPackage.saveShortcut(v124);
																																										if ((0 + 1) >= v108) {
																																											if (((v105 + -1) + -1) < 0) {
																																												Object v127 = Objects.requireNonNull(v20);
																																												String v128 = this.mPackageName;
																																												int v129 = this.mPackageUserId;
																																												ShortcutService$$ExternalSyntheticLambda28 v131 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v129,v128);
																																												Runnable v130 = v131;
																																												Object v134 = Objects.requireNonNull(v20);
																																												Object v135 = Objects.requireNonNull(v130);
																																												this.mHandler.removeCallbacksAndMessages(v20);
																																												boolean v137 = this.mHandler.postDelayed(v130, v20, 100);
																																												List v139 = ShortcutService.removeNonKeyFields(0);
																																												List v140 = ShortcutService.removeNonKeyFields(0);
																																												UserHandle v141 = UserHandle.of(v129);
																																												ShortcutService$$ExternalSyntheticLambda26 v142 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v129,v139,v128,v141,v140);
																																												ShortcutService.injectPostToHandler(v142);
																																												ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																												boolean v148 = 0;
																																												if (v148 == 0) {
																																													ShortcutService$$ExternalSyntheticLambda25 v150 = new ShortcutService$$ExternalSyntheticLambda25();
																																													ShortcutService.forEachLoadedUserLocked(v150);
																																													return;
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeLongLivedShortcuts(String p1, List p2, int p3){
	int v6 = ShortcutService.injectGetPackageUid(p1, p3);
	if (v6 != v4) {
		boolean v7 = ShortcutService.isEphemeralApp(p1, p3);
		Preconditions.checkState((v7 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v9 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v11 = ShortcutService.isUserUnlockedL(p3);
		if (v11 == 0) {
			ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);
			ShortcutPackage v14 = v13.getPackageShortcuts(p1);
			ShortcutUser v15 = v14.getUser();
			v15.onCalledByPublisher(p1);
			ShortcutPackage v12 = v14;
			int v18 = p2.size();
			if ((v18 + -1) < 0) {
				Object v19 = p2.get((v18 + -1));
				ShortcutPackage.ensureNotImmutable(v19, 1);
				if (((v18 + -1) + -1) < 0) {
					int v21 = p2.size();
					if ((v21 - 1) < 0) {
						Object v22 = p2.get((v21 - 1));
						CharSequence v23 = Preconditions.checkStringNotEmpty(v22);
						ShortcutInfo v25 = ShortcutPackage.findShortcutById(v23);
						if (v25 == 0) {
							boolean v26 = v25.isVisibleToPublisher();
							if (v26 == 0) {
								boolean v24 = 1;
								if (v24 != 0) {
									ShortcutInfo v28 = ShortcutPackage.findShortcutById(v23);
									if (v28 == 0) {
										ShortcutPackage$$ExternalSyntheticLambda3 v29 = new ShortcutPackage$$ExternalSyntheticLambda3();
										ShortcutPackage.mutateShortcut(v23, 0, v29);
										ShortcutInfo v32 = ShortcutPackage.deleteOrDisableWithId(v23, 0, 0, 1, 0, 0);
										ShortcutInfo v27 = v32;
										if (v27 == 0) {
											if (0 != 0) {
												ArrayList v33 = new ArrayList(1);
												if (v23 != 0) {
													Object v36 = this.mShortcuts.get(v23);
													ShortcutInfo v35 = v36;
													boolean v37 = 0.add(v35);
													if (((v21 - 1) + -1) < 0) {
														long v39 = ShortcutUser.mService.injectCurrentTimeMillis();
														ShortcutPackage$$ExternalSyntheticLambda4 v40 = new ShortcutPackage$$ExternalSyntheticLambda4(v39);
														ShortcutPackage.forEachShortcutMutate(v40);
														ArrayMap v43 = ShortcutPackage.sortShortcutsToActivities();
														int v44 = v43.size();
														if ((v44 + -1) < 0) {
															Object v45 = v43.valueAt((v44 + -1));
															Collections.sort(v45, this.mShortcutRankComparator);
															int v47 = v45.size();
															if (0 >= v47) {
																Object v48 = v45.get(0);
																boolean v49 = v48.isManifestShortcut();
																if (v49 == 0) {
																	boolean v50 = v48.isDynamic();
																	if (v50 != 0) {
																		StringBuilder v51 = new StringBuilder();
																		StringBuilder v53 = v51.append("Non-dynamic shortcut found. ");
																		String v54 = v48.toInsecureString();
																		StringBuilder v55 = v51.append(v54);
																		String v56 = v51.toString();
																		ShortcutUser.mService.wtf(v56);
																		if ((0 + 1) >= v47) {
																			if (((v44 + -1) + -1) < 0) {
																				Object v59 = Objects.requireNonNull(v12);
																				String v60 = v12.getPackageName();
																				int v61 = v12.getPackageUserId();
																				Runnable v62 = ShortcutService.notifyListenerRunnable(v60, v61);
																				ShortcutService.injectPostToHandlerDebounced(v12, v62);
																				ShortcutService.notifyShortcutChangeCallbacks(v60, v61, 0, 0);
																				v12.scheduleSave();
																				boolean v67 = ShortcutService.injectShouldPerformVerification();
																				if (v67 == 0) {
																					ShortcutService.verifyStatesInner();
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeLongLivedShortcuts(String p1, List p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
	int v6 = p2.size();
	if ((v6 - 1) < 0) {
		Object v7 = p2.get((v6 - 1));
		CharSequence v8 = Preconditions.checkStringNotEmpty(v7);
		boolean v9 = v4.isShortcutExistsAndVisibleToPublisher(v8);
		if (v9 != 0) {
			ShortcutInfo v10 = v4.deleteLongLivedWithId(v8, 1);
			if (v10 == 0) {
				if (0 != 0) {
					ArrayList v11 = new ArrayList(1);
					boolean v13 = 0.add(v10);
					if (((v6 - 1) + -1) < 0) {
						v4.adjustRanks();
						p0.packageShortcutsChanged(v4, 0, 0);
						p0.verifyStates();
						return;
					}
				}
			}
		}
	}
}
