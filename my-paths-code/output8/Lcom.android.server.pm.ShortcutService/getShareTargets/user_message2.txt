The method getShareTargets has the following code snippet:

This is path 1 for the API with depth 2:
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	boolean v8 = this.mUnlockedUsers.get(p3);
	if (v8 == 0) {
		boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p3);
		boolean v7 = v9;
		if (v7 == 0) {
			ArrayList v10 = new ArrayList();
			boolean v14 = this.mUnlockedUsers.get(p3);
			if (v14 == 0) {
				boolean v15 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p3);
				boolean v13 = v15;
				if (v13 != 0) {
					if (p3 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p3;
						Object v18 = this.mUsers.get(p3);
						if (v18 != 0) {
							File v20 = ShortcutService.getUserFile(p3);
							AtomicFile v21 = new AtomicFile(v20);
							FileInputStream v23 = v21.openRead();
							ShortcutUser v24 = ShortcutService.loadUserInternal(p3, v23, 0);
							IoUtils.closeQuietly(v23);
							ShortcutUser v19 = v24;
							if (v19 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p3);
								this.mUsers.put(p3, v19);
								boolean v30 = ShortcutService.injectIsSafeModeEnabled();
								if (v30 == 0) {
									long v31 = ShortcutService.getStatStartTime();
									ArrayList v32 = new ArrayList();
									ShortcutUser v34 = ShortcutService.getUserShortcutsLocked(p3);
									ShortcutService$$ExternalSyntheticLambda18 v35 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v32);
									v34.forAllPackageItems(v35);
									int v38 = v32.size();
									if (v38 <= 0) {
										int v39 = v32.size();
										if ((v39 + -1) < 0) {
											Object v40 = v32.get((v39 + -1));
											ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p3, ShortcutUser$PackageWithUser.userId, 0);
											if (((v39 + -1) + -1) < 0) {
												long v42 = v34.getLastAppScanTime();
												ShortcutService.rescanUpdatedPackagesLocked(p3, v42);
												ShortcutService.logDurationStat(8, v31);
												ShortcutService.verifyStates();
												ShortcutUser v12 = v18;
												ShortcutService$$ExternalSyntheticLambda12 v46 = new ShortcutService$$ExternalSyntheticLambda12(v10,p2);
												v12.forAllPackages(v46);
												ParceledListSlice v49 = new ParceledListSlice(v10);
												return v49;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	boolean v7 = ShortcutService.isUserUnlockedL(p3);
	if (v7 == 0) {
		ArrayList v8 = new ArrayList();
		boolean v11 = ShortcutService.isUserUnlockedL(p3);
		if (v11 != 0) {
			if (p3 == this.mLastLockedUser) {
				ShortcutService.wtf("User still locked");
				this.mLastLockedUser = p3;
				Object v13 = this.mUsers.get(p3);
				if (v13 != 0) {
					ShortcutUser v14 = ShortcutService.loadUserLocked(p3);
					if (v14 != 0) {
						ShortcutUser v15 = new ShortcutUser(ShortcutService,p3);
						this.mUsers.put(p3, v14);
						ShortcutService.checkPackageChanges(p3);
						ShortcutUser v10 = v13;
						ShortcutService$$ExternalSyntheticLambda12 v19 = new ShortcutService$$ExternalSyntheticLambda12(v8,p2);
						int v22 = this.mPackages.size();
						if (0 >= v22) {
							Object v23 = this.mPackages.valueAt(0);
							v19.accept(v23);
							if ((0 + 1) >= v22) {
								ParceledListSlice v25 = new ParceledListSlice(v8);
								return v25;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	p0.throwIfUserLockedL(p3);
	ArrayList v7 = new ArrayList();
	ShortcutUser v9 = p0.getUserShortcutsLocked(p3);
	ShortcutService$$ExternalSyntheticLambda12 v10 = new ShortcutService$$ExternalSyntheticLambda12(v7,p2);
	v9.forAllPackages(v10);
	ParceledListSlice v13 = new ParceledListSlice(v7);
	return v13;
}

and the following sink code:
['boolean v8 = this.mUnlockedUsers.get(p3);\nint v38 = v32.size();\nShortcutUser v24 = ShortcutService.loadUserInternal(p3, v23, 0);\nParceledListSlice v49 = new ParceledListSlice(v10);', 'boolean v7 = ShortcutService.isUserUnlockedL(p3);\nShortcutUser v14 = ShortcutService.loadUserLocked(p3);\nParceledListSlice v25 = new ParceledListSlice(v8);', 'p0.throwIfUserLockedL(p3);\nShortcutUser v9 = p0.getUserShortcutsLocked(p3);\nParceledListSlice v13 = new ParceledListSlice(v7);']

The method getShareTargets has the following similar APIs:

- API Name: resetThrottling()V with Similarity Score: 0.832898736000061
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = ShortcutService.injectBinderCallingUid();
int v8 = v9;
int v10 = UserHandle.getUserId(v8);
boolean v13 = this.mUnlockedUsers.get(v7);
ShortcutUser v19 = ShortcutService.loadUserLocked(v7);
this.mUsers.put(v7, v19);
v26.resetThrottling();

- API Name: hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z with Similarity Score: 0.8126230239868164
  - Access Control Level: SYS_OR_SIG and the following code:
Object v10 = this.mUsers.get(p3);
ShortcutUser v11 = ShortcutService.loadUserLocked(p3);
this.mUsers.put(p3, v11);
ShortcutPackage v17 = ShortcutUser.getPackageShortcutsIfExists(p2);
ShortcutPackage v18 = new ShortcutPackage(ShortcutUser,this.mUserId,p2);
this.mPackages.put(p2, v18);
boolean v21 = v6.hasShareTargets();
return v21;

