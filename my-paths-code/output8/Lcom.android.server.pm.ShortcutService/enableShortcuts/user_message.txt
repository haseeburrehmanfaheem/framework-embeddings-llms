This is path 1 for the API with depth 2:
public void enableShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p3);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p3);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p3);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p3);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p3);
				if (v22 != 0) {
					if (p3 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p3;
						Object v24 = this.mUsers.get(p3);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p3);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p3);
								this.mUsers.put(p3, v25);
								ShortcutService.checkPackageChanges(p3);
								ShortcutUser v21 = v24;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = v31;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									int v40 = p2.size();
									if ((v40 + -1) < 0) {
										Object v41 = p2.get((v40 + -1));
										ShortcutInfo v43 = ShortcutPackage.findShortcutById(v41);
										ShortcutPackage.ensureNotImmutable(v43, 1);
										if (((v40 + -1) + -1) < 0) {
											int v45 = p2.size();
											if ((v45 - 1) < 0) {
												Object v46 = p2.get((v45 - 1));
												CharSequence v47 = Preconditions.checkStringNotEmpty(v46);
												if (v47 != 0) {
													Object v50 = this.mShortcuts.get(v47);
													ShortcutInfo v49 = v50;
													if (v49 == 0) {
														boolean v52 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v51 = (v52 ^ 1);
														if (v51 == 0) {
															boolean v48 = 1;
															if (v48 != 0) {
																ShortcutPackage$$ExternalSyntheticLambda21 v54 = new ShortcutPackage$$ExternalSyntheticLambda21(ShortcutPackage);
																Object v57 = Objects.requireNonNull(v47);
																Object v58 = Objects.requireNonNull(v54);
																if (0 == 0) {
																	v54.accept(0);
																	ShortcutInfo v60 = ShortcutPackage.findShortcutById(v47);
																	if (v60 != 0) {
																		v54.accept(v60);
																		ShortcutInfo v62 = new ShortcutInfo(1);
																		ShortcutPackage.saveShortcut(v62);
																		if (0 != 0) {
																			ArrayList v64 = new ArrayList(1);
																			ShortcutInfo v66 = v20.findShortcutById(v47);
																			boolean v67 = 0.add(v66);
																			if (((v45 - 1) + -1) < 0) {
																				Object v69 = Objects.requireNonNull(v20);
																				String v70 = this.mPackageName;
																				int v71 = this.mPackageUserId;
																				ShortcutService$$ExternalSyntheticLambda28 v73 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v71,v70);
																				Runnable v72 = v73;
																				Object v76 = Objects.requireNonNull(v20);
																				Object v77 = Objects.requireNonNull(v72);
																				this.mHandler.removeCallbacksAndMessages(v20);
																				boolean v79 = this.mHandler.postDelayed(v72, v20, 100);
																				List v81 = ShortcutService.removeNonKeyFields(0);
																				List v82 = ShortcutService.removeNonKeyFields(0);
																				UserHandle v83 = UserHandle.of(v71);
																				ShortcutService$$ExternalSyntheticLambda26 v84 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v71,v81,v70,v83,v82);
																				ShortcutService.injectPostToHandler(v84);
																				ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																				boolean v90 = 0;
																				if (v90 == 0) {
																					ShortcutService$$ExternalSyntheticLambda25 v92 = new ShortcutService$$ExternalSyntheticLambda25();
																					ShortcutService.forEachLoadedUserLocked(v92);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void enableShortcuts(String p1, List p2, int p3){
	int v6 = ShortcutService.injectGetPackageUid(p1, p3);
	if (v6 != v4) {
		boolean v7 = ShortcutService.isEphemeralApp(p1, p3);
		Preconditions.checkState((v7 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v9 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v11 = ShortcutService.isUserUnlockedL(p3);
		if (v11 == 0) {
			ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);
			ShortcutPackage v14 = v13.getPackageShortcuts(p1);
			ShortcutUser v15 = v14.getUser();
			v15.onCalledByPublisher(p1);
			ShortcutPackage v12 = v14;
			int v18 = p2.size();
			if ((v18 + -1) < 0) {
				Object v19 = p2.get((v18 + -1));
				ShortcutPackage.ensureNotImmutable(v19, 1);
				if (((v18 + -1) + -1) < 0) {
					int v21 = p2.size();
					if ((v21 - 1) < 0) {
						Object v22 = p2.get((v21 - 1));
						CharSequence v23 = Preconditions.checkStringNotEmpty(v22);
						ShortcutInfo v25 = ShortcutPackage.findShortcutById(v23);
						if (v25 == 0) {
							boolean v26 = v25.isVisibleToPublisher();
							if (v26 == 0) {
								boolean v24 = 1;
								if (v24 != 0) {
									ShortcutPackage$$ExternalSyntheticLambda21 v28 = new ShortcutPackage$$ExternalSyntheticLambda21(ShortcutPackage);
									ShortcutPackage.mutateShortcut(v23, 0, v28);
									if (0 != 0) {
										ArrayList v31 = new ArrayList(1);
										if (v23 != 0) {
											Object v34 = this.mShortcuts.get(v23);
											ShortcutInfo v33 = v34;
											boolean v35 = 0.add(v33);
											if (((v21 - 1) + -1) < 0) {
												Object v37 = Objects.requireNonNull(v12);
												String v38 = v12.getPackageName();
												int v39 = v12.getPackageUserId();
												Runnable v40 = ShortcutService.notifyListenerRunnable(v38, v39);
												ShortcutService.injectPostToHandlerDebounced(v12, v40);
												ShortcutService.notifyShortcutChangeCallbacks(v38, v39, 0, 0);
												v12.scheduleSave();
												boolean v45 = ShortcutService.injectShouldPerformVerification();
												if (v45 == 0) {
													ShortcutService.verifyStatesInner();
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void enableShortcuts(String p1, List p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
	int v6 = p2.size();
	if ((v6 - 1) < 0) {
		Object v7 = p2.get((v6 - 1));
		CharSequence v8 = Preconditions.checkStringNotEmpty(v7);
		boolean v9 = v4.isShortcutExistsAndVisibleToPublisher(v8);
		if (v9 != 0) {
			v4.enableWithId(v8);
			if (0 != 0) {
				ArrayList v11 = new ArrayList(1);
				ShortcutInfo v13 = v4.findShortcutById(v8);
				boolean v14 = 0.add(v13);
				if (((v6 - 1) + -1) < 0) {
					p0.packageShortcutsChanged(v4, 0, 0);
					p0.verifyStates();
					return;
				}
			}
		}
	}
}
