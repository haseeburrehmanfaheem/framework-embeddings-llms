The method onApplicationActive in the following class Lcom.android.server.pm.ShortcutService has the following code snippet:

This is path 1 for the API with depth 2:
public void onApplicationActive(String p1, int p2){
	boolean v3 = this.mUnlockedUsers.get(p2);
	if (v3 == 0) {
		boolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
		boolean v2 = v4;
		if (v2 != 0) {
			boolean v7 = ShortcutService.isUserUnlockedL(p2);
			if (v7 != 0) {
				if (p2 == this.mLastLockedUser) {
					ShortcutService.wtf("User still locked");
					this.mLastLockedUser = p2;
					Object v9 = this.mUsers.get(p2);
					if (v9 != 0) {
						ShortcutUser v10 = ShortcutService.loadUserLocked(p2);
						if (v10 != 0) {
							ShortcutUser v11 = new ShortcutUser(ShortcutService,p2);
							this.mUsers.put(p2, v10);
							ShortcutService.checkPackageChanges(p2);
							ShortcutUser v6 = v9;
							ShortcutPackage v16 = ShortcutUser.getPackageShortcutsIfExists(p1);
							if (v16 != 0) {
								ShortcutPackage v17 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
								Object v19 = this.mPackages.put(p1, v17);
								ShortcutPackage v15 = v16;
								ShortcutPackage v5 = v15;
								v5.resetRateLimitingForCommandLineNoSaving();
								File v23 = new File(v24,"shortcuts.xml");
								File v24 = ShortcutService.injectUserDataPath(p2);
								File v22 = v23;
								File v26 = v22.getParentFile();
								boolean v27 = v26.mkdirs();
								AtomicFile v28 = new AtomicFile(v22);
								FileOutputStream v30 = v28.startWrite();
								if (0 == 0) {
									TypedXmlSerializer v32 = Xml.newFastSerializer();
									String v33 = StandardCharsets.UTF_8.name();
									v32.setOutput(v30, v33);
									v32.startDocument(0, Boolean.TRUE);
									ShortcutUser v36 = ShortcutService.getUserShortcutsLocked(p2);
									v36.saveToXml(v32, 0);
									v32.endDocument();
									v30.flush();
									v28.finishWrite(v30);
									long v42 = ShortcutService.getStatStartTime();
									ShortcutUser v43 = ShortcutService.getUserShortcutsLocked(p2);
									File v44 = ShortcutService.getUserBitmapFilePath(p2);
									File v45 = v44.listFiles();
									if (v45 != 0) {
										if (0 >= v45.length) {
											boolean v46 = v45[0].isDirectory();
											if (v46 != 0) {
												String v47 = v45[0].getName();
												boolean v48 = v43.hasPackage(v47);
												if (v48 != 0) {
													ShortcutService.cleanupBitmapsForPackage(p2, v47);
													if ((0 + 1) >= v45.length) {
														ShortcutService.logDurationStat(5, v42);
														boolean v52 = ShortcutService.isUserUnlockedL(p2);
														if (v52 != 0) {
															if (p2 == this.mLastLockedUser) {
																ShortcutService.wtf("User still locked");
																this.mLastLockedUser = p2;
																Object v54 = this.mUsers.get(p2);
																if (v54 != 0) {
																	ShortcutUser v55 = ShortcutService.loadUserLocked(p2);
																	if (v55 != 0) {
																		ShortcutUser v56 = new ShortcutUser(ShortcutService,p2);
																		this.mUsers.put(p2, v55);
																		ShortcutService.checkPackageChanges(p2);
																		ShortcutUser v51 = v54;
																		int v61 = this.mPackages.size();
																		if (0 >= v61) {
																			Object v62 = this.mPackages.valueAt(0);
																			boolean v63 = v62.hasShareTargets();
																			if (v63 == 0) {
																				Object v64 = this.mPackages.valueAt(0);
																				int v65 = v64.getSharingShortcutCount();
																				int v66 = this.mPackages.size();
																				if ((0 + 1) >= v66) {
																					LogMaker v67 = new LogMaker(1717);
																					LogMaker v69 = v67.setType(1);
																					LogMaker v70 = v69.setSubtype(this.mUserId);
																					this.mMetricsLogger.write(v70);
																					LogMaker v72 = v67.setType(2);
																					LogMaker v73 = v72.setSubtype(0);
																					this.mMetricsLogger.write(v73);
																					LogMaker v75 = v67.setType(3);
																					LogMaker v76 = v75.setSubtype(0);
																					this.mMetricsLogger.write(v76);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onApplicationActive(String p1, int p2){
	boolean v3 = this.mUnlockedUsers.get(p2);
	if (v3 == 0) {
		boolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
		boolean v2 = v4;
		if (v2 != 0) {
			ShortcutUser v6 = ShortcutService.getUserShortcutsLocked(p2);
			ShortcutPackage v7 = v6.getPackageShortcuts(p1);
			ShortcutPackage v5 = v7;
			this.mApiCallCount = 0;
			this.mLastResetTime = 0;
			File v10 = ShortcutService.getUserFile(p2);
			File v11 = v10.getParentFile();
			boolean v12 = v11.mkdirs();
			AtomicFile v13 = new AtomicFile(v10);
			FileOutputStream v15 = v13.startWrite();
			ShortcutService.saveUserInternalLocked(p2, v15, 0);
			v13.finishWrite(v15);
			ShortcutService.cleanupDanglingBitmapDirectoriesLocked(p2);
			ShortcutUser v19 = ShortcutService.getUserShortcutsLocked(p2);
			v19.logSharingShortcutStats(this.mMetricsLogger);
			return;
		}
	}
}


This is path 3 for the API with depth 0:
public void onApplicationActive(String p1, int p2){
	boolean v2 = p0.isUserUnlockedL(p2);
	if (v2 != 0) {
		ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2);
		v3.resetRateLimitingForCommandLineNoSaving();
		p0.saveUserLocked(p2);
		return;
	}
}

and the following sink code:
['ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2);\nv3.resetRateLimitingForCommandLineNoSaving();', 'p0.saveUserLocked(p2);']

The method onApplicationActive has the following similar APIs:

- API Name: enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.8499211668968201, Code:
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
  - Similarity: 0.8316493034362793, Code:
ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);
ShortcutPackage v14 = v13.getPackageShortcuts(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.8449104428291321, Code:
ShortcutPackage v4 = p0.getPackageShortcutsLocked(p2, p3);
boolean v5 = v4.hasShareTargets();
return v5;
  - Access Control Level: SYS_OR_SIG

- API Name: removeAllDynamicShortcuts(Ljava/lang/String;I)V in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.8297417759895325, Code:
ShortcutService.injectGetPackageUid(p1, p2);
ShortcutUser v14 = ShortcutService.getUserShortcutsLocked(p2);
ShortcutPackage v15 = v14.getPackageShortcuts(p1);
  - Similarity: 0.812839150428772, Code:
ShortcutPackage v5 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
v5.findAll(v2, v6, 4);
List v9 = v5.deleteAllDynamicShortcuts();
  - Access Control Level: SYS_OR_SIG

- API Name: reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.7788728475570679, Code:
p0.verifyCaller(p1, p3);
p0.throwIfUserLockedL(p3);
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
p0.reportShortcutUsedInternal(p1, p2, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getMaxShortcutCountPerActivity(Ljava/lang/String;I)I in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.76646888256073, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
return this.mMaxShortcuts;
  - Access Control Level: SYS_OR_SIG

