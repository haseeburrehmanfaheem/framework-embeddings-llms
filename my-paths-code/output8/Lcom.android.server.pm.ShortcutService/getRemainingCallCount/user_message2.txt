The method getRemainingCallCount has the following code snippet:

This is path 1 for the API with depth 2:
public int getRemainingCallCount(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		int v15 = p0.injectBinderCallingPid();
		int v16 = p0.injectBinderCallingUid();
		boolean v20 = this.mUnlockedUsers.get(p2);
		if (v20 == 0) {
			boolean v21 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
			boolean v19 = v21;
			if (v19 == 0) {
				boolean v24 = ShortcutService.isUserUnlockedL(p2);
				if (v24 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v26 = this.mUsers.get(p2);
						if (v26 != 0) {
							ShortcutUser v27 = ShortcutService.loadUserLocked(p2);
							if (v27 != 0) {
								ShortcutUser v28 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, v27);
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v23 = v26;
								ShortcutPackage v33 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v33 != 0) {
									ShortcutPackage v34 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v36 = this.mPackages.put(p1, v34);
									ShortcutPackage v32 = v33;
									ShortcutUser v37 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v22 = v32;
									if (this.mPackageUid != 1000) {
										int v43 = this.mUidState.get(this.mPackageUid, 20);
										boolean v44 = ShortcutService.isProcessStateForeground(v43);
										if (v44 == 0) {
											int v45 = this.mActivityManagerInternal.getUidProcessState(this.mPackageUid);
											boolean v46 = ShortcutService.isProcessStateForeground(v45);
											boolean v42 = v46;
											if (v42 != 0) {
												long v48 = this.mUidLastForegroundElapsedTime.get(this.mPackageUid);
												long v47 = v48;
												if ((this.mLastKnownForegroundElapsedTime < v47) < 0) {
													if (v17 == 0) {
														long v50 = SystemClock.elapsedRealtime();
														long v49 = v50;
														this.mLastKnownForegroundElapsedTime = v49;
														if (this.mApiCallCount <= 0) {
															this.mApiCallCount = 0;
															ShortcutPackage.scheduleSave();
															ShortcutService.updateTimesLocked();
															long v53 = this.mRawLastResetTime;
															long v56 = System.currentTimeMillis();
															long v55 = v56;
															if ((v55 < 1420070400) < 0) {
																boolean v57 = 1;
																if (v57 == 0) {
																	if ((this.mLastResetTime < v55) <= 0) {
																		if ((this.mLastResetTime < v53) >= 0) {
																			this.mApiCallCount = 0;
																			this.mLastResetTime = v53;
																			int v41 = this.mApiCallCount;
																			return (this.mMaxUpdatesPerInterval - v41);
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getRemainingCallCount(String p1, int p2){
	int v6 = ShortcutService.injectGetPackageUid(p1, p2);
	if (v6 != v4) {
		boolean v7 = ShortcutService.isEphemeralApp(p1, p2);
		Preconditions.checkState((v7 ^ 1), "Ephemeral apps can't use ShortcutManager");
		int v10 = IShortcutService$Stub.getCallingPid();
		int v9 = v10;
		int v12 = IShortcutService$Stub.getCallingUid();
		int v11 = v12;
		boolean v15 = ShortcutService.isUserUnlockedL(p2);
		if (v15 == 0) {
			ShortcutUser v17 = ShortcutService.getUserShortcutsLocked(p2);
			ShortcutPackage v18 = v17.getPackageShortcuts(p1);
			ShortcutUser v19 = v18.getUser();
			v19.onCalledByPublisher(p1);
			ShortcutPackage v16 = v18;
			boolean v22 = ShortcutUser.mService.isUidForegroundLocked(this.mPackageUid);
			if (v22 != 0) {
				long v23 = ShortcutUser.mService.getUidLastForegroundElapsedTimeLocked(this.mPackageUid);
				if ((this.mLastKnownForegroundElapsedTime < v23) < 0) {
					if (v13 == 0) {
						long v24 = ShortcutUser.mService.injectElapsedRealtime();
						this.mLastKnownForegroundElapsedTime = v24;
						ShortcutPackage.resetRateLimiting();
						long v26 = ShortcutUser.mService.getLastResetTimeLocked();
						long v27 = ShortcutUser.mService.injectCurrentTimeMillis();
						boolean v28 = ShortcutService.isClockValid(v27);
						if (v28 == 0) {
							if ((this.mLastResetTime < v27) <= 0) {
								if ((this.mLastResetTime < v26) >= 0) {
									this.mApiCallCount = 0;
									this.mLastResetTime = v26;
									int v21 = this.mApiCallCount;
									return (this.mMaxUpdatesPerInterval - v21);
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int getRemainingCallCount(String p1, int p2){
	p0.verifyCaller(p1, p2);
	int v2 = p0.injectBinderCallingPid();
	int v3 = p0.injectBinderCallingUid();
	p0.throwIfUserLockedL(p2);
	ShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
	int v7 = v6.getApiCallCount(v4);
	return (this.mMaxUpdatesPerInterval - v7);
}

and the following sink code:
['int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);\nApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);\nboolean v13 = ShortcutService.isEphemeralApp(v12);\nShortcutUser v28 = new ShortcutUser(ShortcutService,p2);\nShortcutPackage v34 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);\nreturn (this.mMaxUpdatesPerInterval - this.mApiCallCount);', 'int v6 = ShortcutService.injectGetPackageUid(p1, p2);\nboolean v7 = ShortcutService.isEphemeralApp(p1, p2);\nShortcutUser v17 = ShortcutService.getUserShortcutsLocked(p2);\nv17.getPackageShortcuts(p1);\nreturn (this.mMaxUpdatesPerInterval - this.mApiCallCount);', 'p0.verifyCaller(p1, p2);\nShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p2);\nint v7 = v6.getApiCallCount(v4);\nreturn (this.mMaxUpdatesPerInterval - v7);']

The method getRemainingCallCount has the following similar APIs:

- API Name: getMaxShortcutCountPerActivity(Ljava/lang/String;I)I with Similarity Score: 0.9051719903945923
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = ShortcutService.injectGetPackageUid(p1, p2);
boolean v7 = ShortcutService.isEphemeralApp(p1, p2);
return this.mMaxShortcuts;

- API Name: getMaxShortcutCountPerActivity(Ljava/lang/String;I)I with Similarity Score: 0.8987661600112915
  - Access Control Level: SYS_OR_SIG and the following code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
return this.mMaxShortcuts;

