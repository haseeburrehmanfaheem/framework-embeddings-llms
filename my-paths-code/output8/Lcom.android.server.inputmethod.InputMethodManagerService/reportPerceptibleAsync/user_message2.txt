The method reportPerceptibleAsync in the following class Lcom.android.server.inputmethod.InputMethodManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	if (v7 != 0) {
		boolean v3 = 1;
		if (v3 != 0) {
			long v8 = Binder.clearCallingIdentity();
			if (this.mCurFocusedWindow != p1) {
				if (this.mCurPerceptible == p2) {
					this.mCurPerceptible = p2;
					IBinder v11 = this.mBindingController.getCurToken();
					IBinder v10 = v11;
					if (v10 != 0) {
						long v12 = Binder.clearCallingIdentity();
						if (this.mCurPerceptible != 0) {
							if ((this.mImeWindowVis & 2) == 0) {
								if (this.mShowOngoingImeSwitcherForPhones != 0) {
									AlertDialog v14 = this.mMenuController.getSwitchingDialogLocked();
									if (v14 == 0) {
										boolean v15 = this.mWindowManagerInternal.isKeyguardShowingAndNotOccluded();
										if (v15 == 0) {
											if (this.mKeyguardManager == 0) {
												boolean v16 = this.mKeyguardManager.isKeyguardSecure();
												if (v16 == 0) {
													if ((this.mImeWindowVis & 1) == 0) {
														if ((this.mImeWindowVis & 4) == 0) {
															boolean v17 = this.mWindowManagerInternal.isHardKeyboardAvailable();
															if (v17 == 0) {
																if ((this.mImeWindowVis & 2) != 0) {
																	boolean v13 = 0;
																	if (this.mStatusBar == 0) {
																		IBinder v19 = this.mBindingController.getCurToken();
																		IBinder v18 = v19;
																		StatusBarManagerService.enforceStatusBar();
																		StatusBarManagerService$UiState v22 = StatusBarManagerService.getUiState(this.mCurTokenDisplayId);
																		StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v22, this.mImeWindowVis, this.mBackDisposition, v13, v18);
																		StatusBarManagerService$$ExternalSyntheticLambda1 v24 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v18,this.mImeWindowVis,this.mBackDisposition,v13);
																		boolean v26 = this.mHandler.post(v24);
																		String v28 = this.mBindingController.getSelectedMethodId();
																		String v27 = v28;
																		Object v29 = this.mMethodMap.get(v27);
																		if (v29 == 0) {
																			if (v13 == 0) {
																				CharSequence v30 = this.mRes.getText(17041471);
																				PackageManager v32 = this.mContext.getPackageManager();
																				CharSequence v33 = v29.loadLabel(v32);
																				if (this.mCurrentSubtype == 0) {
																					CharSequence v34 = new CharSequence(2);
																					String v35 = v29.getPackageName();
																					ServiceInfo v36 = v29.getServiceInfo();
																					CharSequence v37 = this.mCurrentSubtype.getDisplayName(this.mContext, v35, ServiceInfo.applicationInfo);
																					boolean v38 = TextUtils.isEmpty(v33);
																					if (v38 == 0) {
																						StringBuilder v39 = new StringBuilder();
																						StringBuilder v41 = v39.append(" - ");
																						StringBuilder v42 = v39.append(v33);
																						String v43 = v39.toString();
																						CharSequence v44 = TextUtils.concat(v34);
																						CharSequence v31 = v33;
																						Notification$Builder v45 = this.mImeSwitcherNotification.setContentTitle(v30);
																						Notification$Builder v46 = v45.setContentText(v31);
																						Notification$Builder v47 = v46.setContentIntent(this.mImeSwitchPendingIntent);
																						if (this.mNotificationManager == 0) {
																							boolean v48 = this.mIWindowManager.hasNavigationBar(0);
																							if (v48 != 0) {
																								Notification v49 = this.mImeSwitcherNotification.build();
																								this.mNotificationManager.notifyAsUser(0, 8, v49, UserHandle.ALL);
																								this.mNotificationShown = 1;
																								Binder.restoreCallingIdentity(v12);
																								Binder.restoreCallingIdentity(v8);
																								return;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	if (v7 != 0) {
		boolean v3 = 1;
		if (v3 != 0) {
			long v8 = Binder.clearCallingIdentity();
			if (this.mCurFocusedWindow != p1) {
				if (this.mCurPerceptible == p2) {
					this.mCurPerceptible = p2;
					IBinder v10 = InputMethodManagerService.getCurTokenLocked();
					if (v10 != 0) {
						long v11 = Binder.clearCallingIdentity();
						if (this.mCurPerceptible != 0) {
							if ((this.mImeWindowVis & 2) == 0) {
								boolean v12 = InputMethodManagerService.shouldShowImeSwitcherLocked(this.mImeWindowVis);
								if (this.mStatusBar == 0) {
									IBinder v13 = InputMethodManagerService.getCurTokenLocked();
									this.mStatusBar.setImeWindowStatus(this.mCurTokenDisplayId, v13, this.mImeWindowVis, this.mBackDisposition, v12);
									String v15 = InputMethodManagerService.getSelectedMethodIdLocked();
									Object v16 = this.mMethodMap.get(v15);
									if (v16 == 0) {
										if (v12 == 0) {
											CharSequence v17 = this.mRes.getText(17041471);
											CharSequence v18 = InputMethodUtils.getImeAndSubtypeDisplayName(this.mContext, v16, this.mCurrentSubtype);
											Notification$Builder v19 = this.mImeSwitcherNotification.setContentTitle(v17);
											Notification$Builder v20 = v19.setContentText(v18);
											Notification$Builder v21 = v20.setContentIntent(this.mImeSwitchPendingIntent);
											if (this.mNotificationManager == 0) {
												boolean v22 = this.mIWindowManager.hasNavigationBar(0);
												if (v22 != 0) {
													Notification v23 = this.mImeSwitcherNotification.build();
													this.mNotificationManager.notifyAsUser(0, 8, v23, UserHandle.ALL);
													this.mNotificationShown = 1;
													Binder.restoreCallingIdentity(v11);
													Binder.restoreCallingIdentity(v8);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	boolean v3 = p0.calledFromValidUserLocked();
	if (v3 != 0) {
		long v4 = Binder.clearCallingIdentity();
		if (this.mCurFocusedWindow != p1) {
			if (this.mCurPerceptible == p2) {
				this.mCurPerceptible = p2;
				p0.updateSystemUiLocked(this.mImeWindowVis, this.mBackDisposition);
				Binder.restoreCallingIdentity(v4);
				return;
			}
		}
	}
}

and the following sink code:
['long v8 = Binder.clearCallingIdentity();\nthis.mCurPerceptible = p2;\nIBinder v11 = this.mBindingController.getCurToken();\nStatusBarManagerService$UiState v22 = StatusBarManagerService.getUiState(this.mCurTokenDisplayId);\nStatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v22, this.mImeWindowVis, this.mBackDisposition, v13, v18);', 'Notification$Builder v45 = this.mImeSwitcherNotification.setContentTitle(v30);\nNotification$Builder v46 = v45.setContentText(v31);\nNotification$Builder v47 = v46.setContentIntent(this.mImeSwitchPendingIntent);', 'p0.updateSystemUiLocked(this.mImeWindowVis, this.mBackDisposition);']

The method reportPerceptibleAsync has the following similar APIs:

- API Name: onGlobalActionsShown()V in the following Class: Lcom.android.server.statusbar.StatusBarManagerService with the following sink code entries:
  - Similarity: 0.7716090679168701, Code:
p0.enforceStatusBarService();
long v2 = Binder.clearCallingIdentity();
if (this.mGlobalActionListener != 0) {
this.mGlobalActionListener.onGlobalActionsShown();
Binder.restoreCallingIdentity(v2);
  - Access Control Level: SYS_OR_SIG

- API Name: setImeWindowStatus(ILandroid/os/IBinder;IIZ)V in the following Class: Lcom.android.server.statusbar.StatusBarManagerService with the following sink code entries:
  - Similarity: 0.7436349391937256, Code:
Object v4 = this.mDisplayUiState.get(p1);
StatusBarManagerService$UiState v5 = new StatusBarManagerService$UiState(0);
this.mDisplayUiState.put(p1, v5);
this.mImeWindowVis = p3;
this.mImeBackDisposition = p4;
this.mShowImeSwitcher = p5;
this.mImeToken = p2;
  - Access Control Level: SYS_OR_SIG

