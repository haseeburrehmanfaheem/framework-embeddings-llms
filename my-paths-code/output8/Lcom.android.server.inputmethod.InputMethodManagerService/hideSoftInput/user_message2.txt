The method hideSoftInput in the following class Lcom.android.server.inputmethod.InputMethodManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hideSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	int v1 = Binder.getCallingUid();
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingServerImpl v5 = new ImeTracingServerImpl();
			this.sInstance = v5;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");
			boolean v8 = p0.calledFromValidUserLocked();
			if (v8 != 0) {
				long v9 = Binder.clearCallingIdentity();
				Trace.traceBegin(32, "IMMS.hideSoftInput");
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v11 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v12 = p1.asBinder();
						if (v11 == v12) {
							IBinder v13 = p1.asBinder();
							Object v14 = this.mClients.get(v13);
							if (v14 == 0) {
								boolean v15 = p0.isImeClientFocused(p2, v14);
								if (v15 != 0) {
									if ((p3 & 1) == 0) {
										if (this.mShowExplicitlyRequested != 0) {
											if (this.mShowForced == 0) {
												if (this.mShowForced == 0) {
													if ((p3 & 2) == 0) {
														IInputMethodInvoker v18 = this.mBindingController.getCurMethod();
														IInputMethodInvoker v17 = v18;
														if (v17 == 0) {
															if (this.mInputShown != 0) {
																if ((this.mImeWindowVis & 1) == 0) {
																	if (1 == 0) {
																		Binder v19 = new Binder();
																		Object v21 = this.mHideRequestWindowMap.put(v19, p2);
																		this.mTarget.hideSoftInput(v19, 0, p4);
																		IInputMethodInvoker.logRemoteException(caughtException);
																		boolean v22 = 0;
																		if (v22 == 0) {
																			WindowManagerInternal$ImeTargetInfo v26 = this.mWindowManagerInternal.onToggleImeRequested(0, this.mCurFocusedWindow, p2, this.mCurTokenDisplayId);
																			InputMethodManagerService$SoftInputShowHideHistory$Entry v27 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p5,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
																			this.mSoftInputShowHideHistory.addEntry(v27);
																			if (this.mVisibleBound == 0) {
																				InputMethodBindingController.unbindVisibleConnection();
																				this.mInputShown = 0;
																				this.mShowRequested = 0;
																				this.mShowExplicitlyRequested = 0;
																				this.mShowForced = 0;
																				boolean v16 = 1;
																				Binder.restoreCallingIdentity(v9);
																				Trace.traceEnd(32);
																				return v16;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean hideSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	int v1 = Binder.getCallingUid();
	if (this.sInstance != 0) {
		boolean v3 = ImeTracing.isSystemProcess();
		if (v3 == 0) {
			ImeTracingServerImpl v4 = new ImeTracingServerImpl();
			this.sInstance = v4;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");
			if (v11 != 0) {
				boolean v7 = 1;
				if (v7 != 0) {
					long v12 = Binder.clearCallingIdentity();
					Trace.traceBegin(32, "IMMS.hideSoftInput");
					if (this.mCurClient == 0) {
						if (p1 == 0) {
							IBinder v14 = InputMethodManagerService$ClientState.client.asBinder();
							IBinder v15 = p1.asBinder();
							if (v14 == v15) {
								IBinder v16 = p1.asBinder();
								Object v17 = this.mClients.get(v16);
								if (v17 == 0) {
									int v19 = this.mWindowManagerInternal.hasInputMethodClientFocus(p2, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
									if (v19 != 0) {
										boolean v18 = 1;
										if (v18 != 0) {
											if ((p3 & 1) == 0) {
												if (this.mShowExplicitlyRequested != 0) {
													if (this.mShowForced == 0) {
														if (this.mShowForced == 0) {
															if ((p3 & 2) == 0) {
																IInputMethodInvoker v21 = InputMethodManagerService.getCurMethodLocked();
																if (v21 == 0) {
																	if (this.mInputShown != 0) {
																		if ((this.mImeWindowVis & 1) == 0) {
																			if (1 == 0) {
																				Binder v22 = new Binder();
																				Object v24 = this.mHideRequestWindowMap.put(v22, p2);
																				boolean v25 = v21.hideSoftInput(v22, 0, p4);
																				if (v25 == 0) {
																					InputMethodManagerService.onShowHideSoftInputRequested(0, p2, p5);
																					this.mBindingController.setCurrentMethodNotVisible();
																					this.mInputShown = 0;
																					this.mShowRequested = 0;
																					this.mShowExplicitlyRequested = 0;
																					this.mShowForced = 0;
																					boolean v20 = 1;
																					Binder.restoreCallingIdentity(v12);
																					Trace.traceEnd(32);
																					return v20;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean hideSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	int v1 = Binder.getCallingUid();
	ImeTracing v2 = ImeTracing.getInstance();
	v2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");
	boolean v4 = p0.calledFromValidUserLocked();
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		Trace.traceBegin(32, "IMMS.hideSoftInput");
		if (this.mCurClient == 0) {
			if (p1 == 0) {
				IBinder v7 = InputMethodManagerService$ClientState.client.asBinder();
				IBinder v8 = p1.asBinder();
				if (v7 == v8) {
					IBinder v9 = p1.asBinder();
					Object v10 = this.mClients.get(v9);
					if (v10 == 0) {
						boolean v11 = p0.isImeClientFocused(p2, v10);
						if (v11 != 0) {
							boolean v12 = p0.hideCurrentInputLocked(p2, p3, p4, p5);
							Binder.restoreCallingIdentity(v5);
							Trace.traceEnd(32);
							return v12;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ImeTracingServerImpl v5 = new ImeTracingServerImpl();\nv2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");\nIInputMethodInvoker v18 = this.mBindingController.getCurMethod();\nthis.mTarget.hideSoftInput(v19, 0, p4);', 'ImeTracingServerImpl v4 = new ImeTracingServerImpl();\nv2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");\nIInputMethodInvoker v21 = InputMethodManagerService.getCurMethodLocked();\nboolean v25 = v21.hideSoftInput(v22, 0, p4);', 'ImeTracing v2 = ImeTracing.getInstance();\nv2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");\nboolean v12 = p0.hideCurrentInputLocked(p2, p3, p4, p5);']

The method hideSoftInput has the following similar APIs:

- API Name: showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z in the following Class: Lcom.android.server.inputmethod.InputMethodManagerService with the following sink code entries:
  - Similarity: 0.7845128178596497, Code:
int v2 = Binder.getCallingUid();
ImeTracingServerImpl v6 = new ImeTracingServerImpl();
this.mTarget.showSoftInput(v23, v26, p4);
this.mShowRequested = 1;
this.mShowExplicitlyRequested = 1;
this.mShowForced = 1;
  - Similarity: 0.7819980978965759, Code:
IInputMethodInvoker v22 = this.mBindingController.getCurMethod();
v22.showSoftInput(v23, v26, p4);
  - Access Control Level: SYS_OR_SIG

- API Name: hideCurrentInputMethodForBubbles()V in the following Class: Lcom.android.server.statusbar.StatusBarManagerService with the following sink code entries:
  - Similarity: 0.7508939504623413, Code:
Object v5 = LocalServices.getService(InputMethodManagerInterna.class);
InputMethodManagerInternal v4 = v5;
v4.hideCurrentInputMethod(19);
  - Similarity: 0.7407404184341431, Code:
InputMethodManagerInternal v3 = InputMethodManagerInternal.get();
v3.hideCurrentInputMethod(19);
  - Access Control Level: SYS_OR_SIG

