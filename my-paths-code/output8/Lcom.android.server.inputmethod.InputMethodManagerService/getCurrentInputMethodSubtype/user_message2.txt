The method getCurrentInputMethodSubtype in the following class Lcom.android.server.inputmethod.InputMethodManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public InputMethodSubtype getCurrentInputMethodSubtype(){
	if (v5 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			String v8 = this.mBindingController.getSelectedMethodId();
			String v7 = v8;
			if (v7 != 0) {
				int v10 = InputMethodUtils$InputMethodSettings.getSelectedInputMethodSubtypeHashCode();
				if (v10 == -1) {
					boolean v9 = 1;
					Object v11 = this.mMethodMap.get(v7);
					if (v11 == 0) {
						int v12 = v11.getSubtypeCount();
						if (v12 != 0) {
							if (v9 == 0) {
								if (this.mCurrentSubtype == 0) {
									int v13 = this.mSubtypeHashCode;
									int v15 = InputMethodUtils.getSubtypeIdFromHashCode(v11, v13);
									if (v15 == -1) {
										boolean v14 = 1;
										if (v14 != 0) {
											Object v17 = this.mMethodMap.get(v7);
											if (v17 != 0) {
												int v18 = InputMethodUtils$InputMethodSettings.getSelectedInputMethodSubtypeHashCode();
												int v19 = InputMethodUtils.getSubtypeIdFromHashCode(v17, v18);
												int v16 = v19;
												if (v16 != -1) {
													List v21 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked(v11);
													if (1 == 0) {
														boolean v22 = v21.isEmpty();
														if (v22 == 0) {
															Resources v23 = this.mContext.getResources();
															ArrayList v24 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v23, v11);
															List v25 = InputMethodSubtype.sort(this.mContext, 0, v11, v21);
															List v20 = v25;
															int v26 = v20.size();
															if (v26 != 1) {
																int v27 = v20.size();
																if (v27 <= 1) {
																	if (v20 == 0) {
																		int v29 = v20.size();
																		if (v29 != 0) {
																			boolean v30 = TextUtils.isEmpty(0);
																			if (v30 == 0) {
																				Configuration v31 = this.mRes.getConfiguration();
																				String v32 = Configuration.locale.toString();
																				String v33 = InputMethodUtils.getLanguageFromLocaleString(0);
																				int v34 = v20.size();
																				if (0 >= v34) {
																					Object v35 = v20.get(0);
																					String v36 = v35.getLocale();
																					String v37 = InputMethodUtils.getLanguageFromLocaleString(v36);
																					if ("keyboard" == 0) {
																						Object v38 = v20.get(0);
																						String v39 = v38.getMode();
																						boolean v40 = v39.equalsIgnoreCase("keyboard");
																						if (v40 == 0) {
																							if (0 != 0) {
																								boolean v41 = 0.equals(v36);
																								if (v41 == 0) {
																									if (0 != 0) {
																										boolean v42 = v33.equals(v37);
																										if (v42 == 0) {
																											if ((0 + 1) >= v34) {
																												if (0 != 0) {
																													if (1 == 0) {
																														InputMethodSubtype v28 = 0;
																														this.mCurrentSubtype = v28;
																														if (v28 != 0) {
																															if (v20 == 0) {
																																int v44 = v20.size();
																																if (v44 != 0) {
																																	boolean v45 = TextUtils.isEmpty(0);
																																	if (v45 == 0) {
																																		Configuration v46 = this.mRes.getConfiguration();
																																		String v47 = Configuration.locale.toString();
																																		String v48 = InputMethodUtils.getLanguageFromLocaleString(0);
																																		int v49 = v20.size();
																																		if (((0 + 1) + 1) >= v49) {
																																			Object v50 = v20.get(((0 + 1) + 1));
																																			String v51 = v50.getLocale();
																																			String v52 = InputMethodUtils.getLanguageFromLocaleString(v51);
																																			if (0 == 0) {
																																				Object v53 = v20.get(((0 + 1) + 1));
																																				String v54 = v53.getMode();
																																				boolean v55 = v54.equalsIgnoreCase(0);
																																				if (v55 == 0) {
																																					if (0 != 0) {
																																						boolean v56 = 0.equals(v51);
																																						if (v56 == 0) {
																																							if (0 != 0) {
																																								boolean v57 = v48.equals(v52);
																																								if (v57 == 0) {
																																									if ((((0 + 1) + 1) + 1) >= v49) {
																																										if (0 != 0) {
																																											if (1 == 0) {
																																												InputMethodSubtype v43 = 0;
																																												this.mCurrentSubtype = v43;
																																												InputMethodSubtype v6 = this.mCurrentSubtype;
																																												return v6;
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public InputMethodSubtype getCurrentInputMethodSubtype(){
	if (v5 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			String v7 = InputMethodManagerService.getSelectedMethodIdLocked();
			if (v7 != 0) {
				boolean v8 = this.mSettings.isSubtypeSelected();
				Object v9 = this.mMethodMap.get(v7);
				if (v9 == 0) {
					int v10 = v9.getSubtypeCount();
					if (v10 != 0) {
						if (v8 == 0) {
							if (this.mCurrentSubtype == 0) {
								int v11 = this.mCurrentSubtype.hashCode();
								boolean v12 = InputMethodUtils.isValidSubtypeId(v9, v11);
								if (v12 != 0) {
									int v13 = this.mSettings.getSelectedInputMethodSubtypeId(v7);
									if (v13 != -1) {
										List v14 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, v9, 1);
										int v15 = v14.size();
										if (v15 != 1) {
											int v16 = v14.size();
											if (v16 <= 1) {
												InputMethodSubtype v17 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v14, "keyboard", 0, 1);
												this.mCurrentSubtype = v17;
												if (v17 != 0) {
													InputMethodSubtype v18 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v14, 0, 0, 1);
													this.mCurrentSubtype = v18;
													InputMethodSubtype v6 = this.mCurrentSubtype;
													return v6;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public InputMethodSubtype getCurrentInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	if (v1 != 0) {
		InputMethodSubtype v2 = p0.getCurrentInputMethodSubtypeLocked();
		return v2;
	}
}

and the following sink code:
['String v8 = this.mBindingController.getSelectedMethodId();\nObject v11 = this.mMethodMap.get(v7);\nint v12 = v11.getSubtypeCount();\nthis.mCurrentSubtype = v28;', 'String v7 = InputMethodManagerService.getSelectedMethodIdLocked();\nboolean v8 = this.mSettings.isSubtypeSelected();\nObject v9 = this.mMethodMap.get(v7);\nInputMethodSubtype v17 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v14, "keyboard", 0, 1);\nthis.mCurrentSubtype = v17;', 'boolean v1 = p0.calledFromValidUserLocked();\nInputMethodSubtype v2 = p0.getCurrentInputMethodSubtypeLocked();\nreturn v2;']

The method getCurrentInputMethodSubtype has the following similar APIs:

- API Name: showInputMethodAndSubtypeEnablerFromClient(Lcom/android/internal/view/IInputMethodClient;Ljava/lang/String;)V in the following Class: Lcom.android.server.inputmethod.InputMethodManagerService with the following sink code entries:
  - Similarity: 0.8718838691711426, Code:
boolean v1 = p0.calledFromValidUserLocked();
if (v1 != 0) {
p0.showInputMethodAndSubtypeEnabler(p2);
  - Access Control Level: SYS_OR_SIG

- API Name: getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List; in the following Class: Lcom.android.server.inputmethod.InputMethodManagerService with the following sink code entries:
  - Similarity: 0.8111767172813416, Code:
int v1 = UserHandle.getCallingUserId();
String v13 = InputMethodManagerService.getSelectedMethodIdLocked();
Object v14 = this.mMethodMap.get(v13);
List v15 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, v14, p2);
return v11;
  - Similarity: 0.8033114671707153, Code:
int v1 = UserHandle.getCallingUserId();
int v2 = this.mSettings.getCurrentUserId();
[I v3 = InputMethodUtils.resolveUserId(v1, v2, 0);
List v5 = p0.getEnabledInputMethodSubtypeListLocked(p1, p2, v3[0]);
return v5;
  - Similarity: 0.7200548648834229, Code:
int v1 = UserHandle.getCallingUserId();
Object v5 = this.sLocalServiceObjects.get(UserManagerInterna.class);
List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked(v13);
Resources v17 = this.mContext.getResources();
ArrayList v18 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v17, v13);
List v19 = InputMethodSubtype.sort(this.mContext, 0, v13, v15);
return v9;
  - Access Control Level: SYS_OR_SIG

- API Name: getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype; in the following Class: Lcom.android.server.inputmethod.InputMethodManagerService with the following sink code entries:
  - Similarity: 0.8072533011436462, Code:
Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();
Object v5 = this.mMethodMap.get(Pair.first);
int v6 = Integer.parseInt(Pair.second);
int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);
  - Similarity: 0.7639089226722717, Code:
List v8 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
List v9 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
String v15 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v8, Pair.first, Pair.second);
  - Similarity: 0.7354476451873779, Code:
Pair v7 = InputMethodUtils$InputMethodSettings.getLastSubtypeForInputMethodLockedInternal(0);
Object v10 = this.mMethodMap.get(Pair.first);
int v11 = Integer.parseInt(Pair.second);
return 0;
  - Access Control Level: SYS_OR_SIG

- API Name: getEnabledInputMethodList(I)Ljava/util/List; in the following Class: Lcom.android.server.inputmethod.InputMethodManagerService with the following sink code entries:
  - Similarity: 0.7533656358718872, Code:
int v3 = this.mSettings.getCurrentUserId();
[I v4 = InputMethodUtils.resolveUserId(p1, v3, 0);
long v5 = Binder.clearCallingIdentity();
List v6 = p0.getEnabledInputMethodListLocked(v4[0]);
return v6;
  - Access Control Level: SYS_OR_SIG

- API Name: getInputMethodList(I)Ljava/util/List; in the following Class: Lcom.android.server.inputmethod.InputMethodManagerService with the following sink code entries:
  - Similarity: 0.7207273840904236, Code:
int v4 = this.mSettings.getCurrentUserId();
[I v5 = InputMethodUtils.resolveUserId(p1, v4, 0);
List v7 = InputMethodManagerService.getInputMethodListLocked(v5[0], 0);
return v7;
  - Access Control Level: SYS_OR_SIG

