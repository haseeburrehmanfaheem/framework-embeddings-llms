The method getLastInputMethodSubtype has the following code snippet:

This is path 1 for the API with depth 2:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			List v8 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
			List v9 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
			Iterator v10 = v9.iterator();
			boolean v11 = v10.hasNext();
			if (v11 == 0) {
				Object v12 = v10.next();
				boolean v13 = TextUtils.isEmpty(0);
				if (v13 != 0) {
					boolean v14 = Pair.first.equals(0);
					if (v14 == 0) {
						String v15 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v8, Pair.first, Pair.second);
						boolean v16 = TextUtils.isEmpty(v15);
						if (v16 != 0) {
							boolean v17 = v10.hasNext();
							if (v17 == 0) {
								Object v18 = v10.next();
								boolean v19 = TextUtils.isEmpty(0);
								if (v19 != 0) {
									boolean v20 = Pair.first.equals(0);
									if (v20 == 0) {
										String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v8, Pair.first, Pair.second);
										boolean v22 = TextUtils.isEmpty(v21);
										if (v22 != 0) {
											Pair v23 = new Pair(Pair.first,v21);
											Pair v7 = v23;
											Pair v6 = v7;
											if (v6 == 0) {
												boolean v25 = TextUtils.isEmpty(Pair.first);
												if (v25 != 0) {
													boolean v26 = TextUtils.isEmpty(Pair.second);
													if (v26 == 0) {
														Object v27 = this.mMethodMap.get(Pair.first);
														if (v27 != 0) {
															int v28 = Integer.parseInt(Pair.second);
															if (v27 == 0) {
																int v30 = v27.getSubtypeCount();
																if (0 >= v30) {
																	InputMethodSubtype v31 = v27.getSubtypeAt(0);
																	int v32 = this.mSubtypeHashCode;
																	if (v28 != v32) {
																		if ((0 + 1) >= v30) {
																			InputMethodSubtype v33 = v27.getSubtypeAt((0 + 1));
																			int v34 = this.mSubtypeHashCode;
																			if (v28 != v34) {
																				int v29 = (0 + 1);
																				if (v29 < 0) {
																					int v35 = v27.getSubtypeCount();
																					return 0;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			Pair v7 = InputMethodUtils$InputMethodSettings.getLastSubtypeForInputMethodLockedInternal(0);
			Pair v6 = v7;
			if (v6 == 0) {
				boolean v8 = TextUtils.isEmpty(Pair.first);
				if (v8 != 0) {
					boolean v9 = TextUtils.isEmpty(Pair.second);
					if (v9 == 0) {
						Object v10 = this.mMethodMap.get(Pair.first);
						if (v10 != 0) {
							int v11 = Integer.parseInt(Pair.second);
							if (v10 == 0) {
								int v13 = v10.getSubtypeCount();
								if (0 >= v13) {
									InputMethodSubtype v14 = v10.getSubtypeAt(0);
									int v15 = v14.hashCode();
									if (v11 != v15) {
										if ((0 + 1) >= v13) {
											InputMethodSubtype v16 = v10.getSubtypeAt((0 + 1));
											int v17 = v16.hashCode();
											if (v11 != v17) {
												int v12 = (0 + 1);
												if (v12 < 0) {
													int v18 = v10.getSubtypeCount();
													return 0;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public InputMethodSubtype getLastInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	if (v1 != 0) {
		Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();
		if (v2 == 0) {
			boolean v3 = TextUtils.isEmpty(Pair.first);
			if (v3 != 0) {
				boolean v4 = TextUtils.isEmpty(Pair.second);
				if (v4 == 0) {
					Object v5 = this.mMethodMap.get(Pair.first);
					if (v5 != 0) {
						int v6 = Integer.parseInt(Pair.second);
						int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);
						if (v7 < 0) {
							int v8 = v5.getSubtypeCount();
							return 0;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Pair v7 = InputMethodUtils$InputMethodSettings.getLastSubtypeForInputMethodLockedInternal(0);\nObject v10 = this.mMethodMap.get(Pair.first);\nint v11 = Integer.parseInt(Pair.second);\nreturn 0;', 'List v8 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();\nList v9 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();\nString v15 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v8, Pair.first, Pair.second);', 'Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();\nObject v5 = this.mMethodMap.get(Pair.first);\nint v6 = Integer.parseInt(Pair.second);\nint v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);']

The method getLastInputMethodSubtype has the following similar APIs:

- API Name: getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype; with Similarity Score: 0.8072533011436462
  - Access Control Level: SYS_OR_SIG and the following code:
String v7 = InputMethodManagerService.getSelectedMethodIdLocked();
boolean v8 = this.mSettings.isSubtypeSelected();
Object v9 = this.mMethodMap.get(v7);
InputMethodSubtype v17 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v14, "keyboard", 0, 1);
this.mCurrentSubtype = v17;

- API Name: getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List; with Similarity Score: 0.7916231751441956
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = UserHandle.getCallingUserId();
String v13 = InputMethodManagerService.getSelectedMethodIdLocked();
Object v14 = this.mMethodMap.get(v13);
List v15 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, v14, p2);
return v11;

