This is path 1 for the API with depth 2:
public void registerCallback(IDeviceStateManagerCallback p1){
	if (p1 == 0) {
		int v1 = Binder.getCallingPid();
		long v2 = Binder.clearCallingIdentity();
		boolean v5 = this.mProcessRecords.contains(v1);
		if (v5 != 0) {
			DeviceStateManagerService$ProcessRecord v6 = new DeviceStateManagerService$ProcessRecord(p1,v1,v7,this.mHandler);
			DeviceStateManagerService$$ExternalSyntheticLambda2 v7 = new DeviceStateManagerService$$ExternalSyntheticLambda2(DeviceStateManagerService);
			IBinder v10 = p1.asBinder();
			v10.linkToDeath(v6, 0);
			this.mProcessRecords.put(v1, v6);
			boolean v13 = this.mCommittedState.isPresent();
			if (v13 == 0) {
				DeviceStateInfo v14 = DeviceStateManagerService.getDeviceStateInfoLocked();
				if (v14 == 0) {
					v6.notifyDeviceStateInfoAsync(v14);
					Binder.restoreCallingIdentity(v2);
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerCallback(IDeviceStateManagerCallback p1){
	if (p1 == 0) {
		int v1 = Binder.getCallingPid();
		long v2 = Binder.clearCallingIdentity();
		this.this$0.registerProcess(v1, p1);
		Binder.restoreCallingIdentity(v2);
		return;
	}
}


This is path 3 for the API with depth 0:
public void registerCallback(IDeviceStateManagerCallback p1){
	if (p1 == 0) {
		int v1 = Binder.getCallingPid();
		long v2 = Binder.clearCallingIdentity();
		DeviceStateManagerService.-$$Nest$mregisterProcess(this.this$0, v1, p1);
		Binder.restoreCallingIdentity(v2);
		return;
	}
}
