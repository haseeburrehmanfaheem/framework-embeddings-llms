The method cancelStateRequest in the following class Lcom.android.server.devicestate.DeviceStateManagerService$BinderService has the following code snippet:

This is path 1 for the API with depth 2:
public void cancelStateRequest(){
	int v1 = Binder.getCallingPid();
	long v8 = Binder.clearCallingIdentity();
	Object v11 = this.mProcessRecords.get(v1);
	if (v11 == 0) {
		Object v12 = Objects.requireNonNull(this.mOverrideRequestController);
		DeviceStateManagerService$$ExternalSyntheticLambda3 v13 = new DeviceStateManagerService$$ExternalSyntheticLambda3(this.mOverrideRequestController);
		this.mActiveOverride.ifPresent(v13);
		Binder.restoreCallingIdentity(v8);
		return;
	}
}


This is path 2 for the API with depth 1:
public void cancelStateRequest(){
	int v1 = Binder.getCallingPid();
	this.this$0.assertCanControlDeviceState(v1);
	long v4 = Binder.clearCallingIdentity();
	this.this$0.cancelStateRequestInternal(v1);
	Binder.restoreCallingIdentity(v4);
	return;
}


This is path 3 for the API with depth 0:
public void cancelStateRequest(){
	int v1 = Binder.getCallingPid();
	DeviceStateManagerService.-$$Nest$massertCanControlDeviceState(this.this$0, v1);
	long v3 = Binder.clearCallingIdentity();
	DeviceStateManagerService.-$$Nest$mcancelStateRequestInternal(this.this$0, v1);
	Binder.restoreCallingIdentity(v3);
	return;
}

and the following sink code:
['int v1 = Binder.getCallingPid();\nthis.this$0.cancelStateRequestInternal(v1);', 'int v1 = Binder.getCallingPid();\nDeviceStateManagerService.-$$Nest$mcancelStateRequestInternal(this.this$0, v1);', 'int v1 = Binder.getCallingPid();\nObject v11 = this.mProcessRecords.get(v1);\nDeviceStateManagerService$$ExternalSyntheticLambda3 v13 = new DeviceStateManagerService$$ExternalSyntheticLambda3(this.mOverrideRequestController);\nthis.mActiveOverride.ifPresent(v13);']

The method cancelStateRequest has the following similar APIs:

- API Name: requestState(Landroid/os/IBinder;II)V in the following Class: Lcom.android.server.devicestate.DeviceStateManagerService$BinderService with the following sink code entries:
  - Similarity: 0.868252694606781, Code:
int v1 = Binder.getCallingPid();
Object v12 = this.mProcessRecords.get(v1);
boolean v13 = this.mOverrideRequestController.hasRequest(p1, 0);
Optional v14 = DeviceStateManagerService.getStateLocked(p2);
OverrideRequest v16 = new OverrideRequest(p1,v1,p2,p3,0);
this.mOverrideRequestController.addRequest(v16);
  - Similarity: 0.8341811895370483, Code:
int v1 = Binder.getCallingPid();
DeviceStateManagerService.-$$Nest$massertCanRequestDeviceState(this.this$0, v1, p2);
DeviceStateManagerService.-$$Nest$mrequestStateInternal(this.this$0, p2, p3, v1, p1);
  - Similarity: 0.7918332815170288, Code:
int v1 = Binder.getCallingPid();
this.this$0.assertCanRequestDeviceState(v1, p2);
this.this$0.requestStateInternal(p2, p3, v1, p1);
  - Access Control Level: SYS_OR_SIG

- API Name: cancelBaseStateOverride()V in the following Class: Lcom.android.server.devicestate.DeviceStateManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7658921480178833, Code:
DeviceStateManagerService.-$$Nest$mcancelBaseStateOverrideInternal(this.this$0, v1);
  - Access Control Level: SYS_OR_SIG

- API Name: cancelAll()V in the following Class: Lcom.android.server.job.JobSchedulerService$JobSchedulerStub with the following sink code entries:
  - Similarity: 0.7468075752258301, Code:
int v1 = Binder.getCallingUid();
boolean v8 = this.this$0.cancelJobsForUid(v1, 1, 0, v7);
  - Similarity: 0.7230062484741211, Code:
int v1 = Binder.getCallingUid();
List v9 = this.mJobs.getJobsByUid(v1);
JobSchedulerService.cancelJobImplLocked(v11, 0, 1, 0, v7);
  - Access Control Level: SYS_OR_SIG

