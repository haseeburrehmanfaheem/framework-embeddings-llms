The method requestBufferForProcess in the following class Landroid.graphics.GraphicsStatsService has the following code snippet:

This is path 1 for the API with depth 2:
public ParcelFileDescriptor requestBufferForProcess(String p1, IGraphicsStatsCallback p2){
	PackageManager v5 = this.mContext.getPackageManager();
	int v6 = UserHandle.getUserId(v1);
	PackageInfo v7 = v5.getPackageInfoAsUser(p1, 0, v6);
	long v8 = v7.getLongVersionCode();
	int v11 = this.mActive.size();
	long v12 = System.currentTimeMillis();
	Calendar v13 = GraphicsStatsService.normalizeDate(v12);
	long v14 = v13.getTimeInMillis();
	if (0 >= v11) {
		Object v15 = this.mActive.get(0);
		if (GraphicsStatsService$ActiveBuffer.mPid != v2) {
			if (GraphicsStatsService$ActiveBuffer.mUid != v1) {
				if ((0 + 1) >= v11) {
					Object v16 = this.mActive.get((0 + 1));
					if (GraphicsStatsService$ActiveBuffer.mPid != v2) {
						if (GraphicsStatsService$ActiveBuffer.mUid != v1) {
							if ((GraphicsStatsService$BufferInfo.mStartTime < v14) >= 0) {
								v16.binderDied();
								GraphicsStatsService$ActiveBuffer v18 = new GraphicsStatsService$ActiveBuffer(GraphicsStatsService,p2,v1,v2,p1,v8);
								boolean v20 = this.mActive.add(v18);
								GraphicsStatsService$ActiveBuffer v10 = v18;
								if (this.mRotateIsScheduled == 0) {
									this.mRotateIsScheduled = 1;
									long v22 = System.currentTimeMillis();
									Calendar v23 = GraphicsStatsService.normalizeDate(v22);
									v23.add(5, 1);
									long v25 = v23.getTimeInMillis();
									GraphicsStatsService$$ExternalSyntheticLambda0 v26 = new GraphicsStatsService$$ExternalSyntheticLambda0(GraphicsStatsService);
									this.mAlarmManager.setExact(1, v25, "GraphicsStatsService", v26, this.mWriteOutHandler);
									ParcelFileDescriptor v30 = this.mProcessBuffer.getFdDup();
									ParcelFileDescriptor v29 = v30;
									ParcelFileDescriptor v9 = v29;
									Binder.restoreCallingIdentity(v3);
									return v9;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ParcelFileDescriptor requestBufferForProcess(String p1, IGraphicsStatsCallback p2){
	PackageManager v5 = this.mContext.getPackageManager();
	int v6 = UserHandle.getUserId(v1);
	PackageInfo v7 = v5.getPackageInfoAsUser(p1, 0, v6);
	long v8 = v7.getLongVersionCode();
	GraphicsStatsService$ActiveBuffer v10 = GraphicsStatsService.fetchActiveBuffersLocked(p2, v1, v2, p1, v8);
	GraphicsStatsService.scheduleRotateLocked();
	ParcelFileDescriptor v12 = v10.getPfd();
	ParcelFileDescriptor v9 = v12;
	Binder.restoreCallingIdentity(v3);
	return v9;
}


This is path 3 for the API with depth 0:
public ParcelFileDescriptor requestBufferForProcess(String p1, IGraphicsStatsCallback p2){
	PackageManager v5 = this.mContext.getPackageManager();
	int v6 = UserHandle.getUserId(v1);
	PackageInfo v7 = v5.getPackageInfoAsUser(p1, 0, v6);
	long v8 = v7.getLongVersionCode();
	ParcelFileDescriptor v9 = p0.requestBufferForProcessLocked(p2, v1, v2, p1, v8);
	Binder.restoreCallingIdentity(v3);
	return v9;
}

and the following sink code:
['GraphicsStatsService$ActiveBuffer v18 = new GraphicsStatsService$ActiveBuffer(GraphicsStatsService,p2,v1,v2,p1,v8);\nboolean v20 = this.mActive.add(v18);\nParcelFileDescriptor v30 = this.mProcessBuffer.getFdDup();\nParcelFileDescriptor v9 = v30;\nreturn v9;', 'GraphicsStatsService$ActiveBuffer v10 = GraphicsStatsService.fetchActiveBuffersLocked(p2, v1, v2, p1, v8);\nParcelFileDescriptor v12 = v10.getPfd();\nParcelFileDescriptor v9 = v12;\nreturn v9;', 'ParcelFileDescriptor v9 = p0.requestBufferForProcessLocked(p2, v1, v2, p1, v8);\nreturn v9;']

The method requestBufferForProcess has the following similar APIs:

- API Name: openSerialPort(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor; in the following Class: Lcom.android.server.SerialService with the following sink code entries:
  - Similarity: 0.704058051109314, Code:
ParcelFileDescriptor v3 = p0.native_open(p1);
return v3;
  - Access Control Level: NONE

