The method authenticate in the following class Lcom.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper has the following code snippet:

This is path 1 for the API with depth 2:
public long authenticate(IBinder p1, long p2, int p3, IFaceServiceReceiver p4, String p5, boolean p6){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if (v9 == 0) {
				boolean v10 = v9.equals(p5);
				if (v10 == 0) {
					boolean v4 = 1;
					Context v11 = this.this$0.getContext();
					Resources v14 = v11.getResources();
					String v15 = v14.getString(17039993);
					ComponentName v16 = ComponentName.unflattenFromString(v15);
					if (v16 == 0) {
						String v17 = v16.getPackageName();
						if (v13 == 0) {
							if (v17 == 0) {
								boolean v18 = v17.equals(p5);
								if (v18 == 0) {
									boolean v12 = 1;
									List v21 = FaceService.getSensorProperties();
									int v22 = v21.size();
									if (v22 == 1) {
										Object v23 = v21.get(0);
										Iterator v24 = this.mServiceProviders.iterator();
										boolean v25 = v24.hasNext();
										if (v25 == 0) {
											Object v26 = v24.next();
											boolean v27 = v26.containsSensor(FaceSensorPropertiesInternal.sensorId);
											if (v27 == 0) {
												boolean v28 = v24.hasNext();
												if (v28 == 0) {
													Object v29 = v24.next();
													boolean v30 = v29.containsSensor(FaceSensorPropertiesInternal.sensorId);
													if (v30 == 0) {
														Pair v31 = new Pair(v32,v29);
														Integer v32 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
														Pair v20 = v31;
														Pair v19 = v20;
														if (v19 != 0) {
															int v34 = Pair.first.intValue();
															ClientMonitorCallbackConverter v35 = new ClientMonitorCallbackConverter(p4);
															long v37 = Pair.second.scheduleAuthenticate(v34, p1, p2, p3, 0, v35, p5, 0, v4, v12, p6);
															return v37;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long authenticate(IBinder p1, long p2, int p3, IFaceServiceReceiver p4, String p5, boolean p6){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if (v9 == 0) {
				boolean v10 = v9.equals(p5);
				if (v10 == 0) {
					boolean v4 = 1;
					Context v11 = this.this$0.getContext();
					Resources v14 = v11.getResources();
					String v15 = v14.getString(17039993);
					ComponentName v16 = ComponentName.unflattenFromString(v15);
					if (v16 == 0) {
						String v17 = v16.getPackageName();
						if (v13 == 0) {
							if (v17 == 0) {
								boolean v18 = v17.equals(p5);
								if (v18 == 0) {
									boolean v12 = 1;
									Pair v20 = this.this$0.getSingleProvider();
									Pair v19 = v20;
									if (v19 != 0) {
										int v21 = Pair.first.intValue();
										ClientMonitorCallbackConverter v22 = new ClientMonitorCallbackConverter(p4);
										long v24 = Pair.second.scheduleAuthenticate(v21, p1, p2, p3, 0, v22, p5, 0, v4, v12, p6);
										return v24;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public long authenticate(IBinder p1, long p2, int p3, IFaceServiceReceiver p4, String p5, boolean p6){
	Context v3 = this.this$0.getContext();
	boolean v4 = Utils.isKeyguard(v3, p5);
	Context v5 = this.this$0.getContext();
	boolean v6 = Utils.isKeyguard(v5, p5);
	Pair v7 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);
	if (v7 != 0) {
		int v8 = Pair.first.intValue();
		ClientMonitorCallbackConverter v9 = new ClientMonitorCallbackConverter(p4);
		long v11 = Pair.second.scheduleAuthenticate(v8, p1, p2, p3, 0, v9, p5, 0, v4, v6, p6);
		return v11;
	}
}

and the following sink code:
['Pair v31 = new Pair(v32,v29);\nlong v37 = Pair.second.scheduleAuthenticate(v34, p1, p2, p3, 0, v35, p5, 0, v4, v12, p6);', 'Pair v20 = this.this$0.getSingleProvider();\nlong v24 = Pair.second.scheduleAuthenticate(v21, p1, p2, p3, 0, v22, p5, 0, v4, v12, p6);', 'Pair v7 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);\nlong v11 = Pair.second.scheduleAuthenticate(v8, p1, p2, p3, 0, v9, p5, 0, v4, v6, p6);']

The method authenticate has the following similar APIs:

- API Name: authenticate(Landroid/os/IBinder;JIILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;Ljava/lang/String;Z)J in the following Class: Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper with the following sink code entries:
  - Similarity: 0.9104152321815491, Code:
long v20 = Pair.second.scheduleAuthenticate(v17, p1, p2, p4, 0, v18, p6, 1, 1, v6);
return v20;
  - Access Control Level: SYS_OR_SIG

- API Name: cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;J)V in the following Class: Lcom.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper with the following sink code entries:
  - Similarity: 0.8715434074401855, Code:
Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);
int v4 = Pair.first.intValue();
Pair.second.cancelAuthentication(v4, p1, p3);
  - Similarity: 0.8428432941436768, Code:
Pair v4 = this.this$0.getSingleProvider();
int v5 = Pair.first.intValue();
Pair.second.cancelAuthentication(v5, p1, p3);
  - Access Control Level: NORMAL

- API Name: cancelFingerprintDetect(Landroid/os/IBinder;Ljava/lang/String;J)V in the following Class: Lcom.android.server.biometrics.sensors.fingerprint.FingerprintService$FingerprintServiceWrapper with the following sink code entries:
  - Similarity: 0.8403009176254272, Code:
Pair v12 = this.this$0.getSingleProvider();
int v13 = Pair.first.intValue();
Pair.second.cancelAuthentication(v13, p1, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: enroll(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[ILandroid/view/Surface;Z)J in the following Class: Lcom.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper with the following sink code entries:
  - Similarity: 0.8237729072570801, Code:
Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);
int v4 = Pair.first.intValue();
long v5 = Pair.second.scheduleEnroll(v4, p2, p3, p1, p4, p5, p6, p7, p8);
  - Access Control Level: NORMAL

- API Name: setFeature(Landroid/os/IBinder;IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V in the following Class: Lcom.android.server.biometrics.sensors.face.FaceService$FaceServiceWrapper with the following sink code entries:
  - Similarity: 0.8089885115623474, Code:
Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);
int v4 = Pair.first.intValue();
Pair.second.scheduleSetFeature(v4, p1, p2, p3, p4, p5, p6, p7);
  - Access Control Level: NORMAL

