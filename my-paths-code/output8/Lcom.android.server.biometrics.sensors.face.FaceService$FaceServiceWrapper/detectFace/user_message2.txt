The method detectFace has the following code snippet:

This is path 1 for the API with depth 2:
public long detectFace(IBinder p1, int p2, IFaceServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if (v9 == 0) {
				boolean v10 = v9.equals(p4);
				if (v10 == 0) {
					boolean v4 = 1;
					if (v4 != 0) {
						LockPatternUtils v11 = this.mLockPatternUtils;
						int v13 = v11.getStrongAuthForUser(p2);
						if ((v13 & 1) == 0) {
							boolean v14 = 1;
							if ((v13 & 2) == 0) {
								boolean v15 = 1;
								if (v15 != 0) {
									if ((v13 & 32) == 0) {
										boolean v16 = 1;
										if (v16 == 0) {
											if (v14 != 0) {
												if (0 == 0) {
													boolean v12 = 1;
													if (v12 != 0) {
														List v27 = FaceService.getSensorProperties();
														int v28 = v27.size();
														if (v28 == 1) {
															Object v29 = v27.get(0);
															Iterator v30 = this.mServiceProviders.iterator();
															boolean v31 = v30.hasNext();
															if (v31 == 0) {
																Object v32 = v30.next();
																boolean v33 = v32.containsSensor(FaceSensorPropertiesInternal.sensorId);
																if (v33 == 0) {
																	boolean v34 = v30.hasNext();
																	if (v34 == 0) {
																		Object v35 = v30.next();
																		boolean v36 = v35.containsSensor(FaceSensorPropertiesInternal.sensorId);
																		if (v36 == 0) {
																			Pair v37 = new Pair(v38,v35);
																			Integer v38 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
																			Pair v26 = v37;
																			Pair v25 = v26;
																			if (v25 != 0) {
																				int v40 = Pair.first.intValue();
																				ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
																				long v43 = Pair.second.scheduleFaceDetect(v40, p1, p2, v41, p4, 1);
																				return v43;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long detectFace(IBinder p1, int p2, IFaceServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if (v9 == 0) {
				boolean v10 = v9.equals(p4);
				if (v10 == 0) {
					boolean v4 = 1;
					if (v4 != 0) {
						LockPatternUtils v11 = this.mLockPatternUtils;
						int v13 = v11.getStrongAuthForUser(p2);
						boolean v14 = Utils.containsFlag(v13, 1);
						boolean v15 = Utils.containsFlag(v13, 2);
						if (v15 != 0) {
							boolean v16 = Utils.containsFlag(v13, 32);
							if (v16 == 0) {
								if (v14 != 0) {
									if (0 == 0) {
										boolean v12 = 1;
										if (v12 != 0) {
											Pair v26 = this.this$0.getSingleProvider();
											Pair v25 = v26;
											if (v25 != 0) {
												int v27 = Pair.first.intValue();
												ClientMonitorCallbackConverter v28 = new ClientMonitorCallbackConverter(p3);
												long v30 = Pair.second.scheduleFaceDetect(v27, p1, p2, v28, p4, 1);
												return v30;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public long detectFace(IBinder p1, int p2, IFaceServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	boolean v4 = Utils.isKeyguard(v3, p4);
	if (v4 != 0) {
		LockPatternUtils v5 = FaceService.-$$Nest$fgetmLockPatternUtils(this.this$0);
		boolean v6 = Utils.isUserEncryptedOrLockdown(v5, p2);
		if (v6 != 0) {
			Pair v7 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);
			if (v7 != 0) {
				int v8 = Pair.first.intValue();
				ClientMonitorCallbackConverter v9 = new ClientMonitorCallbackConverter(p3);
				long v11 = Pair.second.scheduleFaceDetect(v8, p1, p2, v9, p4, 1);
				return v11;
			}
		}
	}
}

and the following sink code:
['LockPatternUtils v11 = this.mLockPatternUtils;\nint v13 = v11.getStrongAuthForUser(p2);\nClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);\nlong v43 = Pair.second.scheduleFaceDetect(v40, p1, p2, v41, p4, 1);\nreturn v43;', 'LockPatternUtils v11 = this.mLockPatternUtils;\nint v13 = v11.getStrongAuthForUser(p2);\nClientMonitorCallbackConverter v28 = new ClientMonitorCallbackConverter(p3);\nlong v30 = Pair.second.scheduleFaceDetect(v27, p1, p2, v28, p4, 1);\nreturn v30;', 'LockPatternUtils v5 = FaceService.-$$Nest$fgetmLockPatternUtils(this.this$0);\nboolean v6 = Utils.isUserEncryptedOrLockdown(v5, p2);\nClientMonitorCallbackConverter v9 = new ClientMonitorCallbackConverter(p3);\nlong v11 = Pair.second.scheduleFaceDetect(v8, p1, p2, v9, p4, 1);\nreturn v11;']

The method detectFace has the following similar APIs:

- API Name: detectFingerprint(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;)J with Similarity Score: 0.9457900524139404
  - Access Control Level: SYS_OR_SIG and the following code:
LockPatternUtils v11 = this.mLockPatternUtils;
int v13 = v11.getStrongAuthForUser(p2);
ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
long v43 = Pair.second.scheduleFingerDetect(v40, p1, p2, v41, p4, 1);
return v43;

- API Name: detectFingerprint(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;)J with Similarity Score: 0.9353078603744507
  - Access Control Level: SYS_OR_SIG and the following code:
LockPatternUtils v11 = this.mLockPatternUtils;
int v13 = v11.getStrongAuthForUser(p2);
ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
long v43 = Pair.second.scheduleFingerDetect(v40, p1, p2, v41, p4, 1);
return v43;

