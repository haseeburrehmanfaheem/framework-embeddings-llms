The method startShortcut in the following class Lcom.android.server.pm.LauncherAppsService$LauncherAppsImpl has the following code snippet:

This is path 1 for the API with depth 2:
public boolean startShortcut(String p1, String p2, String p3, String p4, Rect p5, Bundle p6, int p7){
	int v2 = ILauncherApps$Stub.getCallingUid();
	int v1 = v2;
	int v4 = ILauncherApps$Stub.getCallingPid();
	int v3 = v4;
	int v7 = ILauncherApps$Stub.getCallingUid();
	int v6 = v7;
	int v8 = UserHandle.getUserId(v6);
	int v5 = v8;
	int v11 = UserHandle.getUserId(v1);
	int v12 = this.mIPM.getPackageUid(p1, 794624, v11);
	if (v12 >= 0) {
		if (v12 != v1) {
			int v14 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
			int v15 = LauncherAppsService$LauncherAppsImpl.injectCallingUserId();
			int v16 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingPid();
			boolean v17 = LauncherAppsService$LauncherAppsImpl.canAccessProfile(v14, v15, v16, p7, "Cannot start activity");
			boolean v13 = v17;
			if (v13 != 0) {
				boolean v18 = this.mShortcutServiceInternal.isPinnedByCaller(v5, p1, p2, p4, p7);
				if (v18 != 0) {
					AndroidFuture v20 = new AndroidFuture();
					int v23 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
					int v24 = UserHandle.getUserId(v23);
					int v22 = v24;
					int v26 = ILauncherApps$Stub.getCallingPid();
					int v25 = v26;
					int v28 = ILauncherApps$Stub.getCallingUid();
					int v27 = v28;
					this.mShortcutServiceInternal.createShortcutIntentsAsync(v22, p1, p2, p4, p7, v25, v27, v20);
					Object v30 = v20.get();
					if (v30 == 0) {
						if (v30.length != 0) {
							if (p6 == 0) {
								ActivityOptions v32 = new ActivityOptions(p6);
								ActivityOptions v31 = v32;
								if (v31 == 0) {
									boolean v34 = this.mApplyActivityFlagsForBubbles;
									if (v34 == 0) {
										Intent v35 = v30[0].addFlags(524288);
										Intent v36 = v30[0].addFlags(134217728);
										Intent v37 = v30[0].addFlags(268435456);
										v30[0].setSourceBounds(p5);
										String v39 = this.mShortcutServiceInternal.getShortcutStartingThemeResName(v5, p1, p2, p4, p7);
										if (v39 == 0) {
											boolean v40 = v39.isEmpty();
											if (v40 != 0) {
												if (p6 != 0) {
													Bundle v41 = new Bundle();
													v41.putString("android.activity.splashScreenTheme", v39);
													int v45 = this.mActivityTaskManagerInternal.startActivitiesAsPackage(p2, p3, p7, v30, v41);
													boolean v46 = ActivityManager.isStartResultSuccessful(v45);
													if (v46 == 0) {
														StringBuilder v47 = new StringBuilder();
														StringBuilder v49 = v47.append("Couldn't start activity, code=");
														StringBuilder v50 = v47.append(v45);
														boolean v44 = 0;
														boolean v9 = v44;
														return v9;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean startShortcut(String p1, String p2, String p3, String p4, Rect p5, Bundle p6, int p7){
	int v2 = ILauncherApps$Stub.getCallingUid();
	int v1 = v2;
	int v4 = ILauncherApps$Stub.getCallingPid();
	int v3 = v4;
	int v6 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
	int v7 = UserHandle.getUserId(v6);
	int v5 = v7;
	LauncherAppsService$LauncherAppsImpl.verifyCallingPackage(p1, v1);
	boolean v10 = LauncherAppsService$LauncherAppsImpl.canAccessProfile(p7, "Cannot start activity");
	if (v10 != 0) {
		boolean v11 = this.mShortcutServiceInternal.isPinnedByCaller(v5, p1, p2, p4, p7);
		if (v11 != 0) {
			AndroidFuture v13 = new AndroidFuture();
			int v15 = LauncherAppsService$LauncherAppsImpl.getCallingUserId();
			int v16 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingPid();
			int v17 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
			this.mShortcutServiceInternal.createShortcutIntentsAsync(v15, p1, p2, p4, p7, v16, v17, v13);
			Object v19 = v13.get();
			if (v19 == 0) {
				if (v19.length != 0) {
					ActivityOptions v20 = ActivityOptions.fromBundle(p6);
					if (v20 == 0) {
						boolean v21 = v20.isApplyActivityFlagsForBubbles();
						if (v21 == 0) {
							Intent v22 = v19[0].addFlags(524288);
							Intent v23 = v19[0].addFlags(134217728);
							Intent v24 = v19[0].addFlags(268435456);
							v19[0].setSourceBounds(p5);
							String v26 = this.mShortcutServiceInternal.getShortcutStartingThemeResName(v5, p1, p2, p4, p7);
							if (v26 == 0) {
								boolean v27 = v26.isEmpty();
								if (v27 != 0) {
									if (p6 != 0) {
										Bundle v28 = new Bundle();
										v28.putString("android.activity.splashScreenTheme", v26);
										boolean v31 = LauncherAppsService$LauncherAppsImpl.startShortcutIntentsAsPublisher(v19, p2, p3, v28, p7);
										boolean v8 = v31;
										return v8;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean startShortcut(String p1, String p2, String p3, String p4, Rect p5, Bundle p6, int p7){
	int v1 = p0.injectBinderCallingUid();
	int v2 = p0.injectBinderCallingPid();
	int v3 = p0.injectCallingUserId();
	boolean v4 = p0.startShortcutInner(v1, v2, v3, p1, p2, p3, p4, p5, p6, p7);
	return v4;
}

and the following sink code:
['int v12 = this.mIPM.getPackageUid(p1, 794624, v11);\nboolean v17 = LauncherAppsService$LauncherAppsImpl.canAccessProfile(v14, v15, v16, p7, "Cannot start activity");\nboolean v18 = this.mShortcutServiceInternal.isPinnedByCaller(v5, p1, p2, p4, p7);\nthis.mShortcutServiceInternal.createShortcutIntentsAsync(v22, p1, p2, p4, p7, v25, v27, v20);', 'LauncherAppsService$LauncherAppsImpl.verifyCallingPackage(p1, v1);\nboolean v10 = LauncherAppsService$LauncherAppsImpl.canAccessProfile(p7, "Cannot start activity");\nthis.mShortcutServiceInternal.createShortcutIntentsAsync(v15, p1, p2, p4, p7, v16, v17, v13);', 'p0.startShortcutInner(v1, v2, v3, p1, p2, p3, p4, p5, p6, p7);']

The method startShortcut has the following similar APIs:

- API Name: hasShortcutHostPermission(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.LauncherAppsService$LauncherAppsImpl with the following sink code entries:
  - Similarity: 0.7921976447105408, Code:
int v3 = ILauncherApps$Stub.getCallingUid();
int v6 = this.mIPM.getPackageUid(p1, 794624, v5);
boolean v13 = this.mShortcutServiceInternal.hasShortcutHostPermission(v7, p1, v11, v12);
return v13;
  - Similarity: 0.7515076994895935, Code:
LauncherAppsService$LauncherAppsImpl.verifyCallingPackage(p1, v2);
boolean v11 = this.mShortcutServiceInternal.hasShortcutHostPermission(v4, p1, v7, v9);
return v11;
  - Access Control Level: NONE

- API Name: getShortcutIconFd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Landroid/os/ParcelFileDescriptor; in the following Class: Lcom.android.server.pm.LauncherAppsService$LauncherAppsImpl with the following sink code entries:
  - Similarity: 0.7527838349342346, Code:
int v10 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
int v11 = UserHandle.getUserId(v10);
this.mShortcutServiceInternal.getShortcutIconFdAsync(v9, p1, p2, p3, p4, v7);
Object v13 = v7.get();
return v13;
  - Similarity: 0.7420622706413269, Code:
int v21 = ILauncherApps$Stub.getCallingUid();
int v22 = UserHandle.getUserId(v20);
this.mShortcutServiceInternal.getShortcutIconFdAsync(v19, p1, p2, p3, p4, v17);
Object v24 = v17.get();
return v24;
  - Access Control Level: SYS_OR_SIG

- API Name: getShortcutIconUri(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; in the following Class: Lcom.android.server.pm.LauncherAppsService$LauncherAppsImpl with the following sink code entries:
  - Similarity: 0.7376529574394226, Code:
int v10 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
int v11 = UserHandle.getUserId(v10);
this.mShortcutServiceInternal.getShortcutIconUriAsync(v9, p1, p2, p3, p4, v7);
Object v13 = v7.get();
return v13;
  - Access Control Level: SYS_OR_SIG

- API Name: registerShortcutChangeCallback(Ljava/lang/String;Landroid/content/pm/ShortcutQueryWrapper;Landroid/content/pm/IShortcutChangeCallback;)V in the following Class: Lcom.android.server.pm.LauncherAppsService$LauncherAppsImpl with the following sink code entries:
  - Similarity: 0.7375844717025757, Code:
int v7 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
UserHandle v9 = UserHandle.of(v6);
this.mShortcutChangeHandler.addShortcutChangeCallback(p3, p2, v9);
  - Access Control Level: SYS_OR_SIG

- API Name: getRemainingCallCount(Ljava/lang/String;I)I in the following Class: Lcom.android.server.pm.ShortcutService with the following sink code entries:
  - Similarity: 0.7357088327407837, Code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
boolean v13 = ShortcutService.isEphemeralApp(v12);
ShortcutUser v28 = new ShortcutUser(ShortcutService,p2);
ShortcutPackage v34 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
return (this.mMaxUpdatesPerInterval - this.mApiCallCount);
  - Similarity: 0.7257707118988037, Code:
int v6 = ShortcutService.injectGetPackageUid(p1, p2);
boolean v7 = ShortcutService.isEphemeralApp(p1, p2);
ShortcutUser v17 = ShortcutService.getUserShortcutsLocked(p2);
v17.getPackageShortcuts(p1);
return (this.mMaxUpdatesPerInterval - this.mApiCallCount);
  - Access Control Level: SYS_OR_SIG

