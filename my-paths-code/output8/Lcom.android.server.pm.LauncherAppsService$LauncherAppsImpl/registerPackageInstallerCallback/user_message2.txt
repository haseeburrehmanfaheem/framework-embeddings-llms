The method registerPackageInstallerCallback has the following code snippet:

This is path 1 for the API with depth 2:
public void registerPackageInstallerCallback(String p1, IPackageInstallerCallback p2){
	int v3 = ILauncherApps$Stub.getCallingUid();
	int v2 = v3;
	int v5 = UserHandle.getUserId(v2);
	int v6 = this.mIPM.getPackageUid(p1, 794624, v5);
	if (v6 >= 0) {
		if (v6 != v2) {
			UserHandle v7 = new UserHandle(v8);
			int v10 = ILauncherApps$Stub.getCallingUid();
			int v9 = v10;
			int v11 = UserHandle.getUserId(v9);
			int v8 = v11;
			PackageInstallerService v13 = p0.getPackageInstallerService();
			LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v14 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v7);
			v13.registerCallback(p2, v14);
			return;
		}
	}
}


This is path 2 for the API with depth 1:
public void registerPackageInstallerCallback(String p1, IPackageInstallerCallback p2){
	int v2 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
	LauncherAppsService$LauncherAppsImpl.verifyCallingPackage(p1, v2);
	UserHandle v4 = new UserHandle(v5);
	int v6 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
	int v7 = UserHandle.getUserId(v6);
	int v5 = v7;
	if (this.mPackageInstallerService != 0) {
		IBinder v10 = ServiceManager.getService("package");
		IPackageInstaller v11 = v10.getPackageInstaller();
		PackageInstallerService v9 = this.mPackageInstallerService;
		LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v13 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v4);
		v9.registerCallback(p2, v13);
		return;
	}
}


This is path 3 for the API with depth 0:
public void registerPackageInstallerCallback(String p1, IPackageInstallerCallback p2){
	p0.verifyCallingPackage(p1);
	UserHandle v2 = new UserHandle(v3);
	int v3 = p0.getCallingUserId();
	PackageInstallerService v5 = p0.getPackageInstallerService();
	LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v6 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v2);
	v5.registerCallback(p2, v6);
	return;
}

and the following sink code:
['UserHandle v2 = new UserHandle(v3);\nPackageInstallerService v5 = p0.getPackageInstallerService();\nLauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v6 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v2);\nv5.registerCallback(p2, v6);', 'UserHandle v4 = new UserHandle(v5);\nIBinder v10 = ServiceManager.getService("package");\nIPackageInstaller v11 = v10.getPackageInstaller();\nPackageInstallerService v9 = this.mPackageInstallerService;\nLauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v13 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v4);\nv9.registerCallback(p2, v13);', 'UserHandle v7 = new UserHandle(v8);\nPackageInstallerService v13 = p0.getPackageInstallerService();\nLauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v14 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v7);\nv13.registerCallback(p2, v14);']

The method registerPackageInstallerCallback has the following similar APIs:

- API Name: checkPhoneNumberAccess(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)I with Similarity Score: 0.736868143081665
  - Access Control Level: DANGEROUS and the following code:
PackageManager v4 = this.mContext.getPackageManager();
UserHandle v5 = UserHandle.getUserHandleForUid(p5);
ApplicationInfo v6 = v4.getApplicationInfoAsUser(p1, 0, v5);

- API Name: unregisterAppLinkInfo(Ljava/lang/String;Landroid/media/tv/interactive/AppLinkInfo;I)V with Similarity Score: 0.723168671131134
  - Access Control Level: NONE and the following code:
int v9 = this.this$0.resolveCallingUserId(v1, v2, p3, v7);
TvInteractiveAppManagerService$UserState v13 = this.this$0.getOrCreateUserStateLocked(v8);
Map v14 = this.mIAppMap;
Object v15 = v14.get(p1);
TvInteractiveAppManagerService$ServiceState v22 = new TvInteractiveAppManagerService$ServiceState(this.this$0,v17,p1,v8,0);

