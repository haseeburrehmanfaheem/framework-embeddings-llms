The method getAssociations in the following class Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl has the following code snippet:

This is path 1 for the API with depth 2:
public List getAssociations(String p1, int p2){
	Context v1 = this.this$0.getContext();
	boolean v4 = PermissionsUtils.checkCallerIsSystemOr(p2, p1);
	if (v4 == 0) {
		boolean v5 = PermissionsUtils.checkCallerCanInteractWithUserId(v1, p2);
		if (v5 != 0) {
			boolean v6 = PermissionsUtils.checkCallerCanManageCompanionDevice(v1);
			boolean v3 = v6;
			if (v3 == 0) {
				Context v7 = this.this$0.getContext();
				boolean v8 = PermissionsUtils.checkCallerCanManageCompanionDevice(v7);
				if (v8 != 0) {
					Context v9 = this.this$0.getContext();
					PackageManager v12 = v9.getPackageManager();
					PackageManager$PackageInfoFlags v13 = PackageManager$PackageInfoFlags.of(20480);
					PackageUtils$$ExternalSyntheticLambda0 v14 = new PackageUtils$$ExternalSyntheticLambda0(v12,p1,v13,p2);
					Object v16 = Binder.withCleanCallingIdentity(v14);
					PackageInfo v11 = v16;
					if (PackageInfo.reqFeatures == 0) {
						if (0 >= PackageInfo.reqFeatures.length) {
							boolean v17 = "android.software.companion_device_setup".equals(FeatureInfo.name);
							if (v17 == 0) {
								if ((0 + 1) >= PackageInfo.reqFeatures.length) {
									boolean v18 = "android.software.companion_device_setup".equals(FeatureInfo.name);
									if (v18 == 0) {
										AssociationStoreImpl v19 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);
										List v22 = AssociationStoreImpl.getAssociationsForUserLocked(p2);
										List v21 = v22;
										AssociationStoreImpl$$ExternalSyntheticLambda0 v23 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);
										int v26 = CollectionUtils.size(v21);
										if (0 >= v26) {
											Object v27 = v21.get(0);
											boolean v28 = v23.test(v27);
											if (v28 == 0) {
												ArrayList v29 = ArrayUtils.add(0, v27);
												int v30 = CollectionUtils.size(v21);
												if ((0 + 1) >= v30) {
													List v31 = CollectionUtils.emptyIfNull(0);
													List v25 = v31;
													List v32 = Collections.unmodifiableList(v25);
													List v20 = v32;
													return v20;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public List getAssociations(String p1, int p2){
	Context v1 = this.this$0.getContext();
	boolean v3 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v1, p2, p1);
	if (v3 == 0) {
		Context v4 = this.this$0.getContext();
		if (v7 != 0) {
			boolean v5 = 1;
			if (v5 != 0) {
				Context v8 = this.this$0.getContext();
				PackageInfo v10 = PackageUtils.getPackageInfo(v8, p2, p1);
				if (PackageInfo.reqFeatures == 0) {
					if (0 >= PackageInfo.reqFeatures.length) {
						boolean v11 = "android.software.companion_device_setup".equals(FeatureInfo.name);
						if (v11 == 0) {
							if ((0 + 1) >= PackageInfo.reqFeatures.length) {
								boolean v12 = "android.software.companion_device_setup".equals(FeatureInfo.name);
								if (v12 == 0) {
									AssociationStoreImpl v13 = this.mAssociationStore;
									List v15 = AssociationStoreImpl.getAssociationsForUser(p2);
									AssociationStoreImpl$$ExternalSyntheticLambda0 v16 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);
									List v18 = CollectionUtils.filter(v15, v16);
									List v19 = Collections.unmodifiableList(v18);
									List v14 = v19;
									return v14;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public List getAssociations(String p1, int p2){
	Context v1 = this.this$0.getContext();
	PermissionsUtils.enforceCallerCanManageAssociationsForPackage(v1, p2, p1, "get associations");
	Context v3 = this.this$0.getContext();
	boolean v4 = PermissionsUtils.checkCallerCanManageCompanionDevice(v3);
	if (v4 != 0) {
		Context v5 = this.this$0.getContext();
		PackageUtils.enforceUsesCompanionDeviceFeature(v5, p2, p1);
		AssociationStoreImpl v7 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);
		List v8 = v7.getAssociationsForPackage(p2, p1);
		return v8;
	}
}

and the following sink code:
['AssociationStoreImpl v19 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);\nList v22 = AssociationStoreImpl.getAssociationsForUserLocked(p2);\nAssociationStoreImpl$$ExternalSyntheticLambda0 v23 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);\nint v26 = CollectionUtils.size(v21);\nObject v27 = v21.get(0);\nboolean v28 = v23.test(v27);\nreturn v20;', 'PackageUtils$$ExternalSyntheticLambda0 v14 = new PackageUtils$$ExternalSyntheticLambda0(v12,p1,v13,p2);\nObject v16 = Binder.withCleanCallingIdentity(v14);\nList v15 = AssociationStoreImpl.getAssociationsForUser(p2);\nAssociationStoreImpl$$ExternalSyntheticLambda0 v16 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);\nList v18 = CollectionUtils.filter(v15, v16);\nreturn v19;', 'AssociationStoreImpl v7 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);\nList v8 = v7.getAssociationsForPackage(p2, p1);\nreturn v8;']

The method getAssociations has the following similar APIs:

- API Name: unregisterDevicePresenceListenerService(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.8528578877449036, Code:
PermissionsUtils.enforceCallerIsSystemOr(v4, p2);
AssociationStoreImpl v6 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);
AssociationInfo v7 = v6.getAssociationsForPackageWithAddress(v4, p2, p1);
AssociationInfo$NonActionableBuilder v9 = AssociationInfo.builder(v7);
AssociationInfo$Builder v10 = v9.setNotifyOnDeviceNearby(0);
AssociationInfo v11 = v10.build();
  - Similarity: 0.8433278203010559, Code:
int v4 = UserHandle.getCallingUserId();
AssociationStoreImpl v10 = this.mAssociationStore;
List v12 = AssociationStoreImpl.getAssociationsByAddress(p1);
AssociationStoreImpl$$ExternalSyntheticLambda2 v13 = new AssociationStoreImpl$$ExternalSyntheticLambda2(v4,p2);
Object v15 = CollectionUtils.find(v12, v13);
AssociationInfo v11 = v15;
AssociationInfo$Builder v18 = new AssociationInfo$Builder(v11,0);
AssociationInfo$NonActionableBuilder v17 = v18;
AssociationInfo$Builder v20 = v17.setNotifyOnDeviceNearby(0);
AssociationInfo v22 = new AssociationInfo(v23,v24,v25,v26,v27,v28,v29,this.mNotifyOnDeviceNearby,this.mRevoked,v30);
  - Access Control Level: SYS_OR_SIG

- API Name: legacyDisassociate(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.8518137335777283, Code:
List v5 = AssociationStoreImpl.getAssociationsByAddress(p1);
AssociationStoreImpl$$ExternalSyntheticLambda2 v6 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p3,p2);
Object v8 = CollectionUtils.find(v5, v6);
int v11 = v4.getUserId();
String v12 = v4.getPackageName();
boolean v13 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v9, v11, v12);
  - Similarity: 0.8413596153259277, Code:
AssociationInfo v4 = this.mAssociationStore.getAssociationsForPackageWithAddress(p3, p2, p1);
Context v5 = CompanionDeviceManagerService.getContext();
AssociationInfo v6 = PermissionsUtils.sanitizeWithCallerChecks(v5, v4);
  - Access Control Level: SYS_OR_SIG

- API Name: hasNotificationAccess(Landroid/content/ComponentName;)Z in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.8253850936889648, Code:
String v1 = p1.getPackageName();
List v13 = AssociationStoreImpl.getAssociationsForUser(v3);
AssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v1);
List v16 = CollectionUtils.filter(v13, v14);
boolean v22 = v21.isNotificationListenerAccessGranted(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: canPairWithoutPrompt(Ljava/lang/String;Ljava/lang/String;I)Z in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.8217673301696777, Code:
List v3 = AssociationStoreImpl.getAssociationsByAddress(p2);
AssociationStoreImpl$$ExternalSyntheticLambda2 v4 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p3,p1);
Object v6 = CollectionUtils.find(v3, v4);
AssociationInfo v2 = v6;
  - Access Control Level: NONE

- API Name: registerDevicePresenceListenerService(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.8093974590301514, Code:
AssociationStoreImpl v10 = this.mAssociationStore;
List v12 = AssociationStoreImpl.getAssociationsByAddress(p1);
AssociationInfo$Builder v18 = new AssociationInfo$Builder(v11,0);
AssociationInfo v22 = new AssociationInfo(v23,v24,v25,v26,v27,v28,v29,this.mNotifyOnDeviceNearby,this.mRevoked,v30);
this.mIdMap.put(v39, v21);
  - Access Control Level: SYS_OR_SIG

