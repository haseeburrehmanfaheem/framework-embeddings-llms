The method requestNotificationAccess in the following class Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl has the following code snippet:

This is path 1 for the API with depth 2:
public PendingIntent requestNotificationAccess(ComponentName p1, int p2){
	String v1 = p1.getPackageName();
	Context v6 = this.this$0.getContext();
	PackageInfo v8 = PackageUtils.getPackageInfo(v6, v3, v1);
	if (PackageInfo.reqFeatures == 0) {
		if (0 >= PackageInfo.reqFeatures.length) {
			boolean v9 = "android.software.companion_device_setup".equals(FeatureInfo.name);
			if (v9 == 0) {
				if ((0 + 1) >= PackageInfo.reqFeatures.length) {
					boolean v10 = "android.software.companion_device_setup".equals(FeatureInfo.name);
					if (v10 == 0) {
						AssociationStoreImpl v11 = this.mAssociationStore;
						List v13 = AssociationStoreImpl.getAssociationsForUser(v3);
						AssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v1);
						List v16 = CollectionUtils.filter(v13, v14);
						List v17 = Collections.unmodifiableList(v16);
						List v12 = v17;
						boolean v18 = ArrayUtils.isEmpty(v12);
						Preconditions.checkState((v18 ^ 1), "App must have an association before calling this API");
						long v20 = Binder.clearCallingIdentity();
						Context v21 = this.this$0.getContext();
						Context v22 = this.this$0.getContext();
						Intent v23 = NotificationAccessConfirmationActivityContract.launcherIntent(v22, p2, p1);
						UserHandle v24 = new UserHandle(p2);
						PendingIntent v26 = PendingIntent.getActivityAsUser(v21, 0, v23, 1409286144, 0, v24);
						Binder.restoreCallingIdentity(v20);
						return v26;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public PendingIntent requestNotificationAccess(ComponentName p1, int p2){
	String v1 = p1.getPackageName();
	long v6 = Binder.clearCallingIdentity();
	Context v7 = this.this$0.getContext();
	Context v8 = this.this$0.getContext();
	Intent v10 = new Intent();
	String v12 = v8.getString(17040008);
	ComponentName v13 = ComponentName.unflattenFromString(v12);
	Intent v14 = v10.setComponent(v13);
	Intent v15 = v14.putExtra("user_id", p2);
	Intent v16 = v15.putExtra("component_name", p1);
	Intent v9 = v16;
	UserHandle v17 = new UserHandle(p2);
	PendingIntent v19 = PendingIntent.getActivityAsUser(v7, 0, v9, 1409286144, 0, v17);
	Binder.restoreCallingIdentity(v6);
	return v19;
}


This is path 3 for the API with depth 0:
public PendingIntent requestNotificationAccess(ComponentName p1, int p2){
	String v1 = p1.getPackageName();
	p0.checkCanCallNotificationApi(v1);
	long v3 = Binder.clearCallingIdentity();
	Context v4 = this.this$0.getContext();
	Context v5 = this.this$0.getContext();
	Intent v6 = NotificationAccessConfirmationActivityContract.launcherIntent(v5, p2, p1);
	UserHandle v7 = new UserHandle(p2);
	PendingIntent v9 = PendingIntent.getActivityAsUser(v4, 0, v6, 1409286144, 0, v7);
	Binder.restoreCallingIdentity(v3);
	return v9;
}

and the following sink code:
['String v1 = p1.getPackageName();\nlong v3 = Binder.clearCallingIdentity();\nContext v4 = this.this$0.getContext();\nIntent v6 = NotificationAccessConfirmationActivityContract.launcherIntent(v5, p2, p1);\nUserHandle v7 = new UserHandle(p2);\nPendingIntent v9 = PendingIntent.getActivityAsUser(v4, 0, v6, 1409286144, 0, v7);\nreturn v9;', 'String v12 = v8.getString(17040008);\nComponentName v13 = ComponentName.unflattenFromString(v12);\nIntent v14 = v10.setComponent(v13);\nIntent v15 = v14.putExtra("user_id", p2);\nIntent v16 = v15.putExtra("component_name", p1);\nPendingIntent v19 = PendingIntent.getActivityAsUser(v7, 0, v9, 1409286144, 0, v17);\nreturn v19;', 'String v1 = p1.getPackageName();\nAssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v1);\nList v16 = CollectionUtils.filter(v13, v14);\nPendingIntent v26 = PendingIntent.getActivityAsUser(v21, 0, v23, 1409286144, 0, v24);\nreturn v26;']

The method requestNotificationAccess has the following similar APIs:

- API Name: hasNotificationAccess(Landroid/content/ComponentName;)Z in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.8944791555404663, Code:
String v1 = p1.getPackageName();
List v13 = AssociationStoreImpl.getAssociationsForUser(v3);
AssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v1);
List v16 = CollectionUtils.filter(v13, v14);
boolean v22 = v21.isNotificationListenerAccessGranted(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;IZLandroid/os/IBinder;Landroid/os/Bundle;)V in the following Class: Lcom.android.server.pm.CrossProfileAppsServiceImpl with the following sink code entries:
  - Similarity: 0.8211796879768372, Code:
Intent v38 = new Intent();
Intent v26 = v26.setComponent(p4);
ActivityTaskManagerInternal v27 = this.mInjector.getActivityTaskManagerInternal();
int v28 = v27.startActivityAsUser(p1, p2, p3, v16, p7, 0, v24, p5);
  - Access Control Level: SYS_OR_SIG

- API Name: legacyDisassociate(Ljava/lang/String;Ljava/lang/String;I)V in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.8054941296577454, Code:
List v5 = AssociationStoreImpl.getAssociationsByAddress(p1);
AssociationStoreImpl$$ExternalSyntheticLambda2 v6 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p3,p2);
Object v8 = CollectionUtils.find(v5, v6);
int v11 = v4.getUserId();
String v12 = v4.getPackageName();
boolean v13 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v9, v11, v12);
  - Access Control Level: SYS_OR_SIG

- API Name: getAssociations(Ljava/lang/String;I)Ljava/util/List; in the following Class: Lcom.android.server.companion.CompanionDeviceManagerService$CompanionDeviceManagerImpl with the following sink code entries:
  - Similarity: 0.7982634902000427, Code:
PackageUtils$$ExternalSyntheticLambda0 v14 = new PackageUtils$$ExternalSyntheticLambda0(v12,p1,v13,p2);
Object v16 = Binder.withCleanCallingIdentity(v14);
List v15 = AssociationStoreImpl.getAssociationsForUser(p2);
AssociationStoreImpl$$ExternalSyntheticLambda0 v16 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);
List v18 = CollectionUtils.filter(v15, v16);
return v19;
  - Access Control Level: SYS_OR_SIG

- API Name: startNextMatchingActivity(Landroid/os/IBinder;Landroid/content/Intent;Landroid/os/Bundle;)Z in the following Class: Lcom.android.server.wm.ActivityTaskManagerService with the following sink code entries:
  - Similarity: 0.7969812750816345, Code:
new Intent(p2);
Uri v8 = ActivityRecord.intent.getData();
String v9 = ActivityRecord.intent.getType();
Intent v10 = v6.setDataAndType(v8, v9);
Intent v11 = v6.setComponent(0);
  - Access Control Level: NONE

