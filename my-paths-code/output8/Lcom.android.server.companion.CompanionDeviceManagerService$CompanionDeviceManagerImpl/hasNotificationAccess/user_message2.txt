The method hasNotificationAccess has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hasNotificationAccess(ComponentName p1){
	String v1 = p1.getPackageName();
	Context v6 = this.this$0.getContext();
	PackageInfo v8 = PackageUtils.getPackageInfo(v6, v3, v1);
	if (PackageInfo.reqFeatures == 0) {
		if (0 >= PackageInfo.reqFeatures.length) {
			boolean v9 = "android.software.companion_device_setup".equals(FeatureInfo.name);
			if (v9 == 0) {
				if ((0 + 1) >= PackageInfo.reqFeatures.length) {
					boolean v10 = "android.software.companion_device_setup".equals(FeatureInfo.name);
					if (v10 == 0) {
						AssociationStoreImpl v11 = this.mAssociationStore;
						List v13 = AssociationStoreImpl.getAssociationsForUser(v3);
						AssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v1);
						List v16 = CollectionUtils.filter(v13, v14);
						List v17 = Collections.unmodifiableList(v16);
						List v12 = v17;
						boolean v18 = ArrayUtils.isEmpty(v12);
						Preconditions.checkState((v18 ^ 1), "App must have an association before calling this API");
						Context v20 = this.this$0.getContext();
						Object v21 = v20.getSystemService(NotificationManage.class);
						boolean v22 = v21.isNotificationListenerAccessGranted(p1);
						return v22;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean hasNotificationAccess(ComponentName p1){
	String v1 = p1.getPackageName();
	Context v6 = this.this$0.getContext();
	Object v7 = v6.getSystemService(NotificationManage.class);
	boolean v8 = v7.isNotificationListenerAccessGranted(p1);
	return v8;
}


This is path 3 for the API with depth 0:
public boolean hasNotificationAccess(ComponentName p1){
	String v1 = p1.getPackageName();
	p0.checkCanCallNotificationApi(v1);
	Context v3 = this.this$0.getContext();
	Object v4 = v3.getSystemService(NotificationManage.class);
	boolean v5 = v4.isNotificationListenerAccessGranted(p1);
	return v5;
}

and the following sink code:
['String v1 = p1.getPackageName();\nList v13 = AssociationStoreImpl.getAssociationsForUser(v3);\nAssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v1);\nList v16 = CollectionUtils.filter(v13, v14);\nboolean v22 = v21.isNotificationListenerAccessGranted(p1);', 'String v1 = p1.getPackageName();\nObject v7 = v6.getSystemService(NotificationManage.class);\nboolean v8 = v7.isNotificationListenerAccessGranted(p1);', 'String v1 = p1.getPackageName();\np0.checkCanCallNotificationApi(v1);\nObject v4 = v3.getSystemService(NotificationManage.class);\nboolean v5 = v4.isNotificationListenerAccessGranted(p1);']

The method hasNotificationAccess has the following similar APIs:

- API Name: requestNotificationAccess(Landroid/content/ComponentName;I)Landroid/app/PendingIntent; with Similarity Score: 0.8944792151451111
  - Access Control Level: SYS_OR_SIG and the following code:
String v1 = p1.getPackageName();
AssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v1);
List v16 = CollectionUtils.filter(v13, v14);
PendingIntent v26 = PendingIntent.getActivityAsUser(v21, 0, v23, 1409286144, 0, v24);
return v26;

- API Name: legacyDisassociate(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.8733884692192078
  - Access Control Level: SYS_OR_SIG and the following code:
List v5 = AssociationStoreImpl.getAssociationsByAddress(p1);
AssociationStoreImpl$$ExternalSyntheticLambda2 v6 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p3,p2);
Object v8 = CollectionUtils.find(v5, v6);
int v11 = v4.getUserId();
String v12 = v4.getPackageName();
boolean v13 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v9, v11, v12);

