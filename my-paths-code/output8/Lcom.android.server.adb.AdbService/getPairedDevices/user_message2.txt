The method getPairedDevices has the following code snippet:

This is path 1 for the API with depth 2:
public FingerprintAndPairDevice getPairedDevices(){
	if (this.mDebuggingManager != 0) {
		AdbDebuggingManager$AdbKeyStore v3 = new AdbDebuggingManager$AdbKeyStore(AdbDebuggingManager);
		HashMap v6 = new HashMap();
		Set v8 = this.mKeyMap.entrySet();
		Iterator v9 = v8.iterator();
		boolean v10 = v9.hasNext();
		if (v10 == 0) {
			Object v11 = v9.next();
			Object v12 = v11.getKey();
			String v13 = AdbDebuggingManager.-$$Nest$mgetFingerprints(this.this$0, v12);
			Object v14 = v11.getKey();
			String v15 = v14.split("\s+");
			if (v15.length <= 1) {
				PairDevice v16 = new PairDevice();
				PairDevice.name = v15[1];
				PairDevice.guid = v13;
				Set v18 = AdbDebuggingManager.-$$Nest$fgetmWifiConnectedKeys(this.this$0);
				Object v19 = v11.getKey();
				boolean v20 = v18.contains(v19);
				PairDevice.connected = v20;
				Object v21 = v11.getKey();
				Object v22 = v6.put(v21, v16);
				boolean v23 = v9.hasNext();
				if (v23 == 0) {
					Map v5 = v6;
					Map v2 = v5;
					int v24 = v2.size();
					FingerprintAndPairDevice v25 = new FingerprintAndPairDevice(v24);
					Set v26 = v2.entrySet();
					Iterator v27 = v26.iterator();
					boolean v28 = v27.hasNext();
					if (v28 == 0) {
						Object v29 = v27.next();
						FingerprintAndPairDevice v30 = new FingerprintAndPairDevice();
						Object v32 = v29.getKey();
						FingerprintAndPairDevice.keyFingerprint = v32;
						Object v33 = v29.getValue();
						FingerprintAndPairDevice.device = v33;
						boolean v34 = v27.hasNext();
						if (v34 == 0) {
							return v25;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public FingerprintAndPairDevice getPairedDevices(){
	if (this.mDebuggingManager != 0) {
		AdbDebuggingManager$AdbKeyStore v3 = new AdbDebuggingManager$AdbKeyStore(AdbDebuggingManager);
		Map v5 = v3.getPairedDevices();
		Map v2 = v5;
		int v6 = v2.size();
		FingerprintAndPairDevice v7 = new FingerprintAndPairDevice(v6);
		Set v8 = v2.entrySet();
		Iterator v9 = v8.iterator();
		boolean v10 = v9.hasNext();
		if (v10 == 0) {
			Object v11 = v9.next();
			FingerprintAndPairDevice v12 = new FingerprintAndPairDevice();
			Object v14 = v11.getKey();
			FingerprintAndPairDevice.keyFingerprint = v14;
			Object v15 = v11.getValue();
			FingerprintAndPairDevice.device = v15;
			boolean v16 = v9.hasNext();
			if (v16 == 0) {
				return v7;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public FingerprintAndPairDevice getPairedDevices(){
	if (this.mDebuggingManager != 0) {
		Map v2 = this.mDebuggingManager.getPairedDevices();
		int v3 = v2.size();
		FingerprintAndPairDevice v4 = new FingerprintAndPairDevice(v3);
		Set v5 = v2.entrySet();
		Iterator v6 = v5.iterator();
		boolean v7 = v6.hasNext();
		if (v7 == 0) {
			Object v8 = v6.next();
			FingerprintAndPairDevice v9 = new FingerprintAndPairDevice();
			Object v11 = v8.getKey();
			FingerprintAndPairDevice.keyFingerprint = v11;
			Object v12 = v8.getValue();
			FingerprintAndPairDevice.device = v12;
			boolean v13 = v6.hasNext();
			if (v13 == 0) {
				return v4;
			}
		}
	}
}

and the following sink code:
['AdbDebuggingManager$AdbKeyStore v3 = new AdbDebuggingManager$AdbKeyStore(AdbDebuggingManager);\nHashMap v6 = new HashMap();\nSet v8 = this.mKeyMap.entrySet();\nIterator v9 = v8.iterator();\nPairDevice v16 = new PairDevice();\nObject v22 = v6.put(v21, v16);\nFingerprintAndPairDevice v25 = new FingerprintAndPairDevice(v24);\nreturn v25;', 'AdbDebuggingManager$AdbKeyStore v3 = new AdbDebuggingManager$AdbKeyStore(AdbDebuggingManager);\nMap v5 = v3.getPairedDevices();\nint v6 = v2.size();\nFingerprintAndPairDevice v7 = new FingerprintAndPairDevice(v6);\nreturn v7;', 'Map v2 = this.mDebuggingManager.getPairedDevices();\nint v3 = v2.size();\nFingerprintAndPairDevice v4 = new FingerprintAndPairDevice(v3);\nreturn v4;']

The method getPairedDevices has the following similar APIs:

- API Name: unpairDevice(Ljava/lang/String;)V with Similarity Score: 0.7107754349708557
  - Access Control Level: SYS_OR_SIG and the following code:
this.mDebuggingManager.unpairDevice(p1);

