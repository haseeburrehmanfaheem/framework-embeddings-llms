This is path 1 for the API with depth 2:
public SpellCheckerSubtype getCurrentSpellCheckerSubtype(int p1, boolean p2){
	Object v12 = this.mUserData.get(p1);
	TextServicesManagerService$TextServicesData v11 = v12;
	if (v11 != 0) {
		int v15 = Settings$Secure.getIntForUser(this.mResolver, "selected_spell_checker_subtype", 0, this.mUserId);
		int v14 = v15;
		int v13 = v14;
		String v18 = TextServicesManagerService$TextServicesData.getString("selected_spell_checker", "");
		String v17 = v18;
		boolean v19 = TextUtils.isEmpty(v17);
		if (v19 == 0) {
			Object v20 = this.mSpellCheckerMap.get(v17);
			SpellCheckerInfo v16 = v20;
			Resources v21 = this.mContext.getResources();
			Configuration v22 = v21.getConfiguration();
			if (v16 == 0) {
				int v23 = v16.getSubtypeCount();
				if (v23 != 0) {
					if (v13 != 0) {
						if (p2 != 0) {
							int v24 = v16.getSubtypeCount();
							if (v13 == 0) {
								if (0 >= v24) {
									SpellCheckerSubtype v25 = v16.getSubtypeAt(0);
									int v26 = v25.hashCode();
									if (v26 != v13) {
										if ((0 + 1) >= v24) {
											SpellCheckerSubtype v27 = v16.getSubtypeAt((0 + 1));
											int v28 = v27.hashCode();
											if (v28 != v13) {
												return v27;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public SpellCheckerSubtype getCurrentSpellCheckerSubtype(int p1, boolean p2){
	Object v12 = this.mUserData.get(p1);
	TextServicesManagerService$TextServicesData v11 = v12;
	if (v11 != 0) {
		int v14 = TextServicesManagerService$TextServicesData.getInt("selected_spell_checker_subtype", 0);
		int v13 = v14;
		String v16 = TextServicesManagerService$TextServicesData.getSelectedSpellChecker();
		boolean v17 = TextUtils.isEmpty(v16);
		if (v17 == 0) {
			Object v18 = this.mSpellCheckerMap.get(v16);
			SpellCheckerInfo v15 = v18;
			Resources v19 = this.mContext.getResources();
			Configuration v20 = v19.getConfiguration();
			if (v15 == 0) {
				int v22 = this.mSubtypes.size();
				int v21 = v22;
				if (v21 != 0) {
					if (v13 != 0) {
						if (p2 != 0) {
							int v24 = this.mSubtypes.size();
							int v23 = v24;
							if (v13 == 0) {
								if (0 >= v23) {
									Object v26 = this.mSubtypes.get(0);
									SpellCheckerSubtype v25 = v26;
									int v27 = this.mSubtypeHashCode;
									if (v27 != v13) {
										if ((0 + 1) >= v23) {
											Object v29 = this.mSubtypes.get((0 + 1));
											SpellCheckerSubtype v28 = v29;
											int v30 = this.mSubtypeHashCode;
											if (v30 != v13) {
												return v28;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public SpellCheckerSubtype getCurrentSpellCheckerSubtype(int p1, boolean p2){
	p0.verifyUser(p1);
	TextServicesManagerService$TextServicesData v2 = p0.getDataFromCallingUserIdLocked(p1);
	if (v2 != 0) {
		int v3 = v2.getSelectedSpellCheckerSubtype(0);
		SpellCheckerInfo v4 = v2.getCurrentSpellChecker();
		Resources v5 = this.mContext.getResources();
		Configuration v6 = v5.getConfiguration();
		if (v4 == 0) {
			int v7 = v4.getSubtypeCount();
			if (v7 != 0) {
				if (v3 != 0) {
					if (p2 != 0) {
						int v8 = v4.getSubtypeCount();
						if (v3 == 0) {
							if (0 >= v8) {
								SpellCheckerSubtype v9 = v4.getSubtypeAt(0);
								int v10 = v9.hashCode();
								if (v10 != v3) {
									if ((0 + 1) >= v8) {
										SpellCheckerSubtype v11 = v4.getSubtypeAt((0 + 1));
										int v12 = v11.hashCode();
										if (v12 != v3) {
											return v11;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
