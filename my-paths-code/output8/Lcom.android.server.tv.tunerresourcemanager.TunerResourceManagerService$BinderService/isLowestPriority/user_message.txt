This is path 1 for the API with depth 2:
public boolean isLowestPriority(int p1, int p2){
	Object v2 = this.mLock;
	Set v4 = this.mClientProfiles.keySet();
	Integer v5 = Integer.valueOf(p1);
	boolean v6 = v4.contains(v5);
	boolean v3 = v6;
	if (v3 == 0) {
		Integer v9 = Integer.valueOf(p1);
		Object v10 = this.mClientProfiles.get(v9);
		ClientProfile v8 = v10;
		if (v8 != 0) {
			boolean v12 = v8.isPriorityOverwritten();
			if (v12 == 0) {
				int v13 = v8.getProcessId();
				boolean v14 = TunerResourceManagerService.checkIsForeground(v13);
				int v15 = v8.getUseCase();
				int v16 = TunerResourceManagerService.getClientPriority(v15, v14);
				v8.setPriority(v16);
				int v18 = (this.mPriority - this.mNiceValue);
				Map v19 = this.mFrontendResources;
				Collection v20 = v19.values();
				Iterator v21 = v20.iterator();
				boolean v22 = v21.hasNext();
				if (v22 == 0) {
					Object v23 = v21.next();
					int v24 = this.mType;
					if (v24 != p2) {
						boolean v25 = this.mIsInUse;
						if (v25 == 0) {
							int v26 = this.mOwnerClientId;
							ClientProfile v28 = TunerResourceManagerService.getClientProfile(v26);
							TunerResourceManagerService.clientPriorityUpdateOnRequest(v28);
							int v30 = v28.getPriority();
							int v27 = v30;
							if (v18 <= v27) {
								boolean v31 = v21.hasNext();
								if (v31 == 0) {
									Object v32 = v21.next();
									int v33 = this.mType;
									if (v33 != p2) {
										boolean v34 = this.mIsInUse;
										if (v34 == 0) {
											int v35 = this.mOwnerClientId;
											ClientProfile v37 = TunerResourceManagerService.getClientProfile(v35);
											TunerResourceManagerService.clientPriorityUpdateOnRequest(v37);
											int v39 = v37.getPriority();
											int v36 = v39;
											if (v18 <= v36) {
												boolean v7 = 0;
												return v7;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isLowestPriority(int p1, int p2){
	Object v2 = this.mLock;
	Set v4 = this.mClientProfiles.keySet();
	Integer v5 = Integer.valueOf(p1);
	boolean v6 = v4.contains(v5);
	boolean v3 = v6;
	if (v3 == 0) {
		ClientProfile v8 = TunerResourceManagerService.getClientProfile(p1);
		if (v8 != 0) {
			TunerResourceManagerService.clientPriorityUpdateOnRequest(v8);
			int v10 = v8.getPriority();
			Map v11 = TunerResourceManagerService.getFrontendResources();
			Collection v12 = v11.values();
			Iterator v13 = v12.iterator();
			boolean v14 = v13.hasNext();
			if (v14 == 0) {
				Object v15 = v13.next();
				int v16 = v15.getType();
				if (v16 != p2) {
					boolean v17 = v15.isInUse();
					if (v17 == 0) {
						int v18 = v15.getOwnerClientId();
						int v19 = TunerResourceManagerService.updateAndGetOwnerClientPriority(v18);
						if (v10 <= v19) {
							boolean v20 = v13.hasNext();
							if (v20 == 0) {
								Object v21 = v13.next();
								int v22 = v21.getType();
								if (v22 != p2) {
									boolean v23 = v21.isInUse();
									if (v23 == 0) {
										int v24 = v21.getOwnerClientId();
										int v25 = TunerResourceManagerService.updateAndGetOwnerClientPriority(v24);
										if (v10 <= v25) {
											boolean v7 = 0;
											return v7;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isLowestPriority(int p1, int p2){
	Object v2 = TunerResourceManagerService.-$$Nest$fgetmLock(this.this$0);
	boolean v3 = this.this$0.checkClientExists(p1);
	if (v3 == 0) {
		boolean v4 = this.this$0.isLowestPriorityInternal(p1, p2);
		return v4;
	}
}
