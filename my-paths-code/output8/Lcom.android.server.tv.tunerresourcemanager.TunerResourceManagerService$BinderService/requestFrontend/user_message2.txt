The method requestFrontend has the following code snippet:

This is path 1 for the API with depth 2:
public boolean requestFrontend(TunerFrontendRequest p1, [I p2){
	if (p2 != 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerFrontendRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 != 0) {
			Integer v9 = Integer.valueOf(TunerFrontendRequest.clientId);
			Object v10 = this.mClientProfiles.get(v9);
			ClientProfile v8 = v10;
			Set v11 = this.mUsingFrontendHandles;
			boolean v12 = v11.isEmpty();
			if (v12 != 0) {
				if (this.DEBUG == 0) {
					Integer v22 = Integer.valueOf(TunerFrontendRequest.clientId);
					Object v23 = this.mClientProfiles.get(v22);
					ClientProfile v21 = v23;
					if (v21 != 0) {
						boolean v25 = v21.isPriorityOverwritten();
						if (v25 == 0) {
							int v26 = v21.getProcessId();
							boolean v27 = TunerResourceManagerService.checkIsForeground(v26);
							int v28 = v21.getUseCase();
							int v29 = TunerResourceManagerService.getClientPriority(v28, v27);
							v21.setPriority(v29);
							Map v31 = this.mFrontendResources;
							Collection v32 = v31.values();
							Iterator v33 = v32.iterator();
							boolean v34 = v33.hasNext();
							if (v34 == 0) {
								Object v35 = v33.next();
								int v36 = this.mType;
								if (v36 != TunerFrontendRequest.frontendType) {
									boolean v37 = this.mIsInUse;
									if (v37 != 0) {
										int v39 = this.mFrontendMaxUsableNums.get(TunerFrontendRequest.frontendType, -1);
										if (v39 != -1) {
											int v40 = this.mFrontendUsedNums.get(TunerFrontendRequest.frontendType, -1);
											if (v40 != -1) {
												if (v40 < v39) {
													boolean v38 = 0;
													if (v38 == 0) {
														boolean v41 = v33.hasNext();
														if (v41 == 0) {
															if (getHandle() == -1) {
																if (getHandle() == -1) {
																	int v42 = (this.mPriority - this.mNiceValue);
																	if (v42 <= getFrontendHighestClientPriority()) {
																		Integer v44 = Integer.valueOf(getHandle());
																		Object v45 = this.mFrontendResources.get(v44);
																		FrontendResource v43 = v45;
																		int v46 = this.mOwnerClientId;
																		Binder.allowBlockingForCurrentThread();
																		ClientProfile v49 = TunerResourceManagerService.getClientProfile(v46);
																		if (v49 != 0) {
																			Set v50 = v49.getShareFeClientIds();
																			Iterator v51 = v50.iterator();
																			boolean v52 = v51.hasNext();
																			if (v52 == 0) {
																				Object v53 = v51.next();
																				int v54 = v53.intValue();
																				Integer v55 = Integer.valueOf(v54);
																				Object v56 = this.mListeners.get(v55);
																				IResourcesReclaimListener v57 = v56.getListener();
																				v57.onReclaimResources();
																				ClientProfile v59 = TunerResourceManagerService.getClientProfile(v54);
																				TunerResourceManagerService.clearAllResourcesAndClientMapping(v59);
																				boolean v61 = v51.hasNext();
																				if (v61 == 0) {
																					if (this.DEBUG == 0) {
																						Integer v70 = Integer.valueOf(v46);
																						Object v71 = this.mListeners.get(v70);
																						IResourcesReclaimListener v72 = v71.getListener();
																						v72.onReclaimResources();
																						TunerResourceManagerService.clearAllResourcesAndClientMapping(v49);
																						boolean v47 = 1;
																						if (v47 != 0) {
																							boolean v13 = 0;
																							return v13;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean requestFrontend(TunerFrontendRequest p1, [I p2){
	if (p2 != 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerFrontendRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 != 0) {
			Integer v9 = Integer.valueOf(TunerFrontendRequest.clientId);
			Object v10 = this.mClientProfiles.get(v9);
			ClientProfile v8 = v10;
			Set v11 = this.mUsingFrontendHandles;
			boolean v12 = v11.isEmpty();
			if (v12 != 0) {
				if (this.DEBUG == 0) {
					ClientProfile v21 = TunerResourceManagerService.getClientProfile(TunerFrontendRequest.clientId);
					if (v21 != 0) {
						TunerResourceManagerService.clientPriorityUpdateOnRequest(v21);
						Map v23 = TunerResourceManagerService.getFrontendResources();
						Collection v24 = v23.values();
						Iterator v25 = v24.iterator();
						boolean v26 = v25.hasNext();
						if (v26 == 0) {
							Object v27 = v25.next();
							int v28 = v27.getType();
							if (v28 != TunerFrontendRequest.frontendType) {
								boolean v29 = v27.isInUse();
								if (v29 != 0) {
									boolean v30 = TunerResourceManagerService.isFrontendMaxNumUseReached(TunerFrontendRequest.frontendType);
									if (v30 == 0) {
										boolean v31 = v25.hasNext();
										if (v31 == 0) {
											if (getHandle() == -1) {
												if (getHandle() == -1) {
													int v32 = v21.getPriority();
													if (v32 <= getFrontendHighestClientPriority()) {
														FrontendResource v33 = TunerResourceManagerService.getFrontendResource(getHandle());
														int v34 = v33.getOwnerClientId();
														boolean v35 = TunerResourceManagerService.reclaimResource(v34, 0);
														if (v35 != 0) {
															boolean v13 = 0;
															return v13;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean requestFrontend(TunerFrontendRequest p1, [I p2){
	if (p2 != 0) {
		Object v3 = TunerResourceManagerService.-$$Nest$fgetmLock(this.this$0);
		boolean v4 = this.this$0.checkClientExists(TunerFrontendRequest.clientId);
		if (v4 != 0) {
			ClientProfile v5 = this.this$0.getClientProfile(TunerFrontendRequest.clientId);
			Set v6 = v5.getInUseFrontendHandles();
			boolean v7 = v6.isEmpty();
			if (v7 != 0) {
				boolean v8 = this.this$0.requestFrontendInternal(p1, p2);
				return v8;
			}
		}
	}
}

and the following sink code:
['Set v5 = this.mClientProfiles.keySet();\nInteger v6 = Integer.valueOf(TunerFrontendRequest.clientId);\nboolean v7 = v5.contains(v6);\nObject v10 = this.mClientProfiles.get(v9);', 'Map v31 = this.mFrontendResources;\nCollection v32 = v31.values();\nIterator v33 = v32.iterator();', 'ClientProfile v21 = TunerResourceManagerService.getClientProfile(TunerFrontendRequest.clientId);\nTunerResourceManagerService.clientPriorityUpdateOnRequest(v21);']

The method requestFrontend has the following similar APIs:

- API Name: hasUnusedFrontend(I)Z with Similarity Score: 0.9680081605911255
  - Access Control Level: SYS_OR_SIG and the following code:
Map v4 = this.mFrontendResources;
Collection v5 = v4.values();
Iterator v6 = v5.iterator();

- API Name: requestLnb(Landroid/media/tv/tunerresourcemanager/TunerLnbRequest;[I)Z with Similarity Score: 0.951967716217041
  - Access Control Level: SYS_OR_SIG and the following code:
ClientProfile v16 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);
TunerResourceManagerService.clientPriorityUpdateOnRequest(v16);

