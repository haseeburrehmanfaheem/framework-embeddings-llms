The method requestLnb has the following code snippet:

This is path 1 for the API with depth 2:
public boolean requestLnb(TunerLnbRequest p1, [I p2){
	if (p2 == 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerLnbRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 == 0) {
			if (this.DEBUG == 0) {
				Integer v17 = Integer.valueOf(TunerLnbRequest.clientId);
				Object v18 = this.mClientProfiles.get(v17);
				ClientProfile v16 = v18;
				boolean v20 = v16.isPriorityOverwritten();
				if (v20 == 0) {
					int v21 = v16.getProcessId();
					boolean v22 = TunerResourceManagerService.checkIsForeground(v21);
					int v23 = v16.getUseCase();
					int v24 = TunerResourceManagerService.getClientPriority(v23, v22);
					v16.setPriority(v24);
					Map v26 = this.mLnbResources;
					Collection v27 = v26.values();
					Iterator v28 = v27.iterator();
					boolean v29 = v28.hasNext();
					if (v29 == 0) {
						Object v30 = v28.next();
						boolean v31 = this.mIsInUse;
						if (v31 != 0) {
							int v32 = this.mHandle;
							if (v32 <= -1) {
								if (getHandle() <= -1) {
									int v33 = (this.mPriority - this.mNiceValue);
									if (v33 <= updateAndGetOwnerClientPriority()) {
										Integer v35 = Integer.valueOf(getHandle());
										Object v36 = this.mLnbResources.get(v35);
										LnbResource v34 = v36;
										int v37 = this.mOwnerClientId;
										Binder.allowBlockingForCurrentThread();
										ClientProfile v40 = TunerResourceManagerService.getClientProfile(v37);
										if (v40 != 0) {
											Set v41 = v40.getShareFeClientIds();
											Iterator v42 = v41.iterator();
											boolean v43 = v42.hasNext();
											if (v43 == 0) {
												Object v44 = v42.next();
												int v45 = v44.intValue();
												Integer v46 = Integer.valueOf(v45);
												Object v47 = this.mListeners.get(v46);
												IResourcesReclaimListener v48 = v47.getListener();
												v48.onReclaimResources();
												ClientProfile v50 = TunerResourceManagerService.getClientProfile(v45);
												TunerResourceManagerService.clearAllResourcesAndClientMapping(v50);
												boolean v52 = v42.hasNext();
												if (v52 == 0) {
													if (this.DEBUG == 0) {
														Integer v61 = Integer.valueOf(v37);
														Object v62 = this.mListeners.get(v61);
														IResourcesReclaimListener v63 = v62.getListener();
														v63.onReclaimResources();
														TunerResourceManagerService.clearAllResourcesAndClientMapping(v40);
														boolean v38 = 1;
														if (v38 != 0) {
															LnbResource v67 = TunerResourceManagerService.getLnbResource(getHandle());
															ClientProfile v68 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);
															v67.setOwner(TunerLnbRequest.clientId);
															v68.useLnb(getHandle());
															boolean v8 = 1;
															return v8;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean requestLnb(TunerLnbRequest p1, [I p2){
	if (p2 == 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerLnbRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 == 0) {
			if (this.DEBUG == 0) {
				ClientProfile v16 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);
				TunerResourceManagerService.clientPriorityUpdateOnRequest(v16);
				Map v18 = TunerResourceManagerService.getLnbResources();
				Collection v19 = v18.values();
				Iterator v20 = v19.iterator();
				boolean v21 = v20.hasNext();
				if (v21 == 0) {
					Object v22 = v20.next();
					boolean v23 = v22.isInUse();
					if (v23 != 0) {
						int v24 = v22.getOwnerClientId();
						int v25 = TunerResourceManagerService.updateAndGetOwnerClientPriority(v24);
						if (updateAndGetOwnerClientPriority() <= v25) {
							int v26 = v22.getHandle();
							boolean v27 = v20.hasNext();
							if (v27 == 0) {
								Object v28 = v20.next();
								boolean v29 = v28.isInUse();
								if (v29 != 0) {
									int v30 = v28.getHandle();
									if (v30 <= -1) {
										TunerResourceManagerService.updateLnbClientMappingOnNewGrant(v30, TunerLnbRequest.clientId);
										boolean v8 = 1;
										return v8;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean requestLnb(TunerLnbRequest p1, [I p2){
	if (p2 == 0) {
		Object v3 = TunerResourceManagerService.-$$Nest$fgetmLock(this.this$0);
		boolean v4 = this.this$0.checkClientExists(TunerLnbRequest.clientId);
		if (v4 == 0) {
			boolean v5 = this.this$0.requestLnbInternal(p1, p2);
			return v5;
		}
	}
}

and the following sink code:
['Integer v17 = Integer.valueOf(TunerLnbRequest.clientId);\nObject v18 = this.mClientProfiles.get(v17);\nboolean v20 = v16.isPriorityOverwritten();\nv16.setPriority(v24);', 'ClientProfile v16 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);\nTunerResourceManagerService.clientPriorityUpdateOnRequest(v16);', 'boolean v4 = this.this$0.checkClientExists(TunerLnbRequest.clientId);\nboolean v5 = this.this$0.requestLnbInternal(p1, p2);']

The method requestLnb has the following similar APIs:

- API Name: requestFrontend(Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;[I)Z with Similarity Score: 0.951967716217041
  - Access Control Level: SYS_OR_SIG and the following code:
ClientProfile v21 = TunerResourceManagerService.getClientProfile(TunerFrontendRequest.clientId);
TunerResourceManagerService.clientPriorityUpdateOnRequest(v21);

- API Name: requestFrontend(Landroid/media/tv/tunerresourcemanager/TunerFrontendRequest;[I)Z with Similarity Score: 0.8627776503562927
  - Access Control Level: SYS_OR_SIG and the following code:
ClientProfile v21 = TunerResourceManagerService.getClientProfile(TunerFrontendRequest.clientId);
TunerResourceManagerService.clientPriorityUpdateOnRequest(v21);

