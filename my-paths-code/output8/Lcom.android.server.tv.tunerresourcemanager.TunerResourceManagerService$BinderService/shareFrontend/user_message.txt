This is path 1 for the API with depth 2:
public void shareFrontend(int p1, int p2){
	Object v3 = this.mLock;
	Set v5 = this.mClientProfiles.keySet();
	Integer v6 = Integer.valueOf(p1);
	boolean v7 = v5.contains(v6);
	boolean v4 = v7;
	if (v4 == 0) {
		Set v9 = this.mClientProfiles.keySet();
		Integer v10 = Integer.valueOf(p2);
		boolean v11 = v9.contains(v10);
		boolean v8 = v11;
		if (v8 == 0) {
			Integer v13 = Integer.valueOf(p2);
			Object v14 = this.mClientProfiles.get(v13);
			ClientProfile v12 = v14;
			Set v15 = this.mUsingFrontendHandles;
			boolean v16 = v15.isEmpty();
			if (v16 != 0) {
				if (this.DEBUG == 0) {
					Integer v27 = Integer.valueOf(p2);
					Object v28 = this.mClientProfiles.get(v27);
					ClientProfile v26 = v28;
					Set v29 = this.mUsingFrontendHandles;
					Iterator v30 = v29.iterator();
					boolean v31 = v30.hasNext();
					if (v31 == 0) {
						Object v32 = v30.next();
						int v33 = v32.intValue();
						Integer v35 = Integer.valueOf(p1);
						Object v36 = this.mClientProfiles.get(v35);
						ClientProfile v34 = v36;
						Integer v38 = Integer.valueOf(v33);
						boolean v39 = this.mUsingFrontendHandles.add(v38);
						boolean v40 = v30.hasNext();
						if (v40 == 0) {
							Integer v42 = Integer.valueOf(p2);
							Object v43 = this.mClientProfiles.get(v42);
							ClientProfile v41 = v43;
							Integer v45 = Integer.valueOf(p1);
							boolean v46 = this.mShareFeClientIds.add(v45);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void shareFrontend(int p1, int p2){
	Object v3 = this.mLock;
	Set v5 = this.mClientProfiles.keySet();
	Integer v6 = Integer.valueOf(p1);
	boolean v7 = v5.contains(v6);
	boolean v4 = v7;
	if (v4 == 0) {
		Set v9 = this.mClientProfiles.keySet();
		Integer v10 = Integer.valueOf(p2);
		boolean v11 = v9.contains(v10);
		boolean v8 = v11;
		if (v8 == 0) {
			Integer v13 = Integer.valueOf(p2);
			Object v14 = this.mClientProfiles.get(v13);
			ClientProfile v12 = v14;
			Set v15 = this.mUsingFrontendHandles;
			boolean v16 = v15.isEmpty();
			if (v16 != 0) {
				if (this.DEBUG == 0) {
					ClientProfile v26 = TunerResourceManagerService.getClientProfile(p2);
					Set v27 = v26.getInUseFrontendHandles();
					Iterator v28 = v27.iterator();
					boolean v29 = v28.hasNext();
					if (v29 == 0) {
						Object v30 = v28.next();
						int v31 = v30.intValue();
						ClientProfile v32 = TunerResourceManagerService.getClientProfile(p1);
						v32.useFrontend(v31);
						boolean v34 = v28.hasNext();
						if (v34 == 0) {
							ClientProfile v35 = TunerResourceManagerService.getClientProfile(p2);
							v35.shareFrontend(p1);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void shareFrontend(int p1, int p2){
	Object v3 = TunerResourceManagerService.-$$Nest$fgetmLock(this.this$0);
	boolean v4 = this.this$0.checkClientExists(p1);
	if (v4 == 0) {
		boolean v5 = this.this$0.checkClientExists(p2);
		if (v5 == 0) {
			ClientProfile v6 = this.this$0.getClientProfile(p2);
			Set v7 = v6.getInUseFrontendHandles();
			boolean v8 = v7.isEmpty();
			if (v8 != 0) {
				this.this$0.shareFrontendInternal(p1, p2);
				return;
			}
		}
	}
}
