This is path 1 for the API with depth 2:
public boolean requestCasSession(CasSessionRequest p1, [I p2){
	if (p2 == 0) {
		Object v2 = this.mLock;
		Set v4 = this.mClientProfiles.keySet();
		Integer v5 = Integer.valueOf(CasSessionRequest.clientId);
		boolean v6 = v4.contains(v5);
		boolean v3 = v6;
		if (v3 == 0) {
			if (this.DEBUG == 0) {
				Integer v16 = Integer.valueOf(CasSessionRequest.casSystemId);
				Object v17 = this.mCasResources.get(v16);
				CasResource v15 = v17;
				if (v15 != 0) {
					CasResource$Builder v18 = new CasResource$Builder(CasSessionRequest.casSystemId);
					this.mMaxSessionNum = 2147483647;
					CasResource$Builder v20 = CasResource$Builder;
					CasResource v22 = new CasResource(CasResource$Builder);
					CasResource v21 = v22;
					int v25 = v21.getSystemId();
					Integer v26 = Integer.valueOf(v25);
					Object v27 = this.mCasResources.put(v26, v21);
					Integer v29 = Integer.valueOf(CasSessionRequest.clientId);
					Object v30 = this.mClientProfiles.get(v29);
					ClientProfile v28 = v30;
					boolean v32 = v28.isPriorityOverwritten();
					if (v32 == 0) {
						int v33 = v28.getProcessId();
						boolean v34 = TunerResourceManagerService.checkIsForeground(v33);
						int v35 = v28.getUseCase();
						int v36 = TunerResourceManagerService.getClientPriority(v35, v34);
						v28.setPriority(v36);
						if (this.mAvailableSessionNum != 0) {
							boolean v38 = 1;
							if (v38 != 0) {
								Set v40 = this.mOwnerClientIdsToSessionNum.keySet();
								Set v39 = v40;
								Iterator v41 = v39.iterator();
								boolean v42 = v41.hasNext();
								if (v42 == 0) {
									Object v43 = v41.next();
									int v44 = v43.intValue();
									ClientProfile v46 = TunerResourceManagerService.getClientProfile(v44);
									TunerResourceManagerService.clientPriorityUpdateOnRequest(v46);
									int v48 = v46.getPriority();
									int v45 = v48;
									if (updateAndGetOwnerClientPriority() <= v45) {
										boolean v49 = v41.hasNext();
										if (v49 == 0) {
											if (intValue() <= -1) {
												int v50 = (this.mPriority - this.mNiceValue);
												if (v50 <= updateAndGetOwnerClientPriority()) {
													Binder.allowBlockingForCurrentThread();
													ClientProfile v53 = TunerResourceManagerService.getClientProfile(intValue());
													if (v53 != 0) {
														Set v54 = v53.getShareFeClientIds();
														Iterator v55 = v54.iterator();
														boolean v56 = v55.hasNext();
														if (v56 == 0) {
															Object v57 = v55.next();
															int v58 = v57.intValue();
															Integer v59 = Integer.valueOf(v58);
															Object v60 = this.mListeners.get(v59);
															IResourcesReclaimListener v61 = v60.getListener();
															v61.onReclaimResources();
															ClientProfile v63 = TunerResourceManagerService.getClientProfile(v58);
															TunerResourceManagerService.clearAllResourcesAndClientMapping(v63);
															boolean v65 = v55.hasNext();
															if (v65 == 0) {
																if (this.DEBUG == 0) {
																	Integer v74 = Integer.valueOf(intValue());
																	Object v75 = this.mListeners.get(v74);
																	IResourcesReclaimListener v76 = v75.getListener();
																	v76.onReclaimResources();
																	TunerResourceManagerService.clearAllResourcesAndClientMapping(v53);
																	boolean v51 = 1;
																	if (v51 != 0) {
																		boolean v7 = 0;
																		return v7;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean requestCasSession(CasSessionRequest p1, [I p2){
	if (p2 == 0) {
		Object v2 = this.mLock;
		Set v4 = this.mClientProfiles.keySet();
		Integer v5 = Integer.valueOf(CasSessionRequest.clientId);
		boolean v6 = v4.contains(v5);
		boolean v3 = v6;
		if (v3 == 0) {
			if (this.DEBUG == 0) {
				CasResource v15 = TunerResourceManagerService.getCasResource(CasSessionRequest.casSystemId);
				if (v15 != 0) {
					CasResource$Builder v16 = new CasResource$Builder(CasSessionRequest.casSystemId);
					CasResource$Builder v18 = v16.maxSessionNum(2147483647);
					CasResource v19 = v18.build();
					TunerResourceManagerService.addCasResource(v19);
					ClientProfile v21 = TunerResourceManagerService.getClientProfile(CasSessionRequest.clientId);
					TunerResourceManagerService.clientPriorityUpdateOnRequest(v21);
					boolean v23 = v15.isFullyUsed();
					if (v23 != 0) {
						Set v24 = v15.getOwnerClientIds();
						Iterator v25 = v24.iterator();
						boolean v26 = v25.hasNext();
						if (v26 == 0) {
							Object v27 = v25.next();
							int v28 = v27.intValue();
							int v29 = TunerResourceManagerService.updateAndGetOwnerClientPriority(v28);
							if (updateAndGetOwnerClientPriority() <= v29) {
								boolean v30 = v25.hasNext();
								if (v30 == 0) {
									if (intValue() <= -1) {
										int v31 = v21.getPriority();
										if (v31 <= updateAndGetOwnerClientPriority()) {
											boolean v32 = TunerResourceManagerService.reclaimResource(intValue(), 4);
											if (v32 != 0) {
												boolean v7 = 0;
												return v7;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean requestCasSession(CasSessionRequest p1, [I p2){
	if (p2 == 0) {
		Object v2 = TunerResourceManagerService.-$$Nest$fgetmLock(this.this$0);
		boolean v3 = this.this$0.checkClientExists(CasSessionRequest.clientId);
		if (v3 == 0) {
			boolean v4 = this.this$0.requestCasSessionInternal(p1, p2);
			return v4;
		}
	}
}
