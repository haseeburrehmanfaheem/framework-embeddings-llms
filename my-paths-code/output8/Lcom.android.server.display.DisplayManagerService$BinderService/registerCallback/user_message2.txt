The method registerCallback has the following code snippet:

This is path 1 for the API with depth 2:
public void registerCallback(IDisplayManagerCallback p1){
	if (p1 == 0) {
		int v2 = Binder.getCallingPid();
		int v3 = Binder.getCallingUid();
		long v4 = Binder.clearCallingIdentity();
		this.this$0.registerCallbackInternal(p1, v2, v3, 7);
		Binder.restoreCallingIdentity(v4);
		return;
	}
}


This is path 2 for the API with depth 1:
public void registerCallback(IDisplayManagerCallback p1){
	if (p1 == 0) {
		int v2 = Binder.getCallingPid();
		int v3 = Binder.getCallingUid();
		long v4 = Binder.clearCallingIdentity();
		DisplayManagerService.-$$Nest$mregisterCallbackInternal(this.this$0, p1, v2, v3, 7);
		Binder.restoreCallingIdentity(v4);
		return;
	}
}


This is path 3 for the API with depth 0:
public void registerCallback(IDisplayManagerCallback p1){
	p0.registerCallbackWithEventMask(p1, 7);
	return;
}

and the following sink code:
['this.this$0.registerCallbackInternal(p1, v2, v3, 7);', 'DisplayManagerService.-$$Nest$mregisterCallbackInternal(this.this$0, p1, v2, v3, 7);', 'p0.registerCallbackWithEventMask(p1, 7);']

The method registerCallback has the following similar APIs:

- API Name: registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V with Similarity Score: 0.8439984321594238
  - Access Control Level: NORMAL and the following code:
p0.registerObserverWithCallback(p1, v6, v4);

- API Name: registerDevicePresenceListenerService(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.7806351184844971
  - Access Control Level: SYS_OR_SIG and the following code:
p0.registerDevicePresenceListenerActive(p2, p1, 1);

