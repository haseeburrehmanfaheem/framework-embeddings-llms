The method getDisplayInfo in the following class Lcom.android.server.display.DisplayManagerService$BinderService has the following code snippet:

This is path 1 for the API with depth 2:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p1);
	if (v5 == 0) {
		DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();
		DisplayInfo v7 = v5.getDisplayInfoLocked();
		DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, v1);
		boolean v9 = v8.hasAccess(v1);
		if (v9 != 0) {
			boolean v10 = DisplayManagerService.isUidPresentOnDisplayInternal(v1, p1);
			if (v10 == 0) {
				DisplayInfo v4 = v8;
				DisplayInfo v3 = v4;
				Binder.restoreCallingIdentity(v2);
				return v3;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	DisplayInfo v4 = this.this$0.getDisplayInfoInternal(p1, v1);
	DisplayInfo v3 = v4;
	Binder.restoreCallingIdentity(v2);
	return v3;
}


This is path 3 for the API with depth 0:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	DisplayInfo v3 = DisplayManagerService.-$$Nest$mgetDisplayInfoInternal(this.this$0, p1, v1);
	Binder.restoreCallingIdentity(v2);
	return v3;
}

and the following sink code:
['LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p1);\nDisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();\nDisplayInfo v7 = v5.getDisplayInfoLocked();\nDisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, v1);\nDisplayInfo v4 = v8;\nDisplayInfo v3 = v4;\nreturn v3;', 'DisplayInfo v4 = this.this$0.getDisplayInfoInternal(p1, v1);\nDisplayInfo v3 = v4;\nreturn v3;', 'DisplayInfo v3 = DisplayManagerService.-$$Nest$mgetDisplayInfoInternal(this.this$0, p1, v1);\nreturn v3;']

The method getDisplayInfo has the following similar APIs:

- API Name: reportVirtualDisplayGeometryAsync(Lcom/android/internal/view/IInputMethodClient;I[F)V in the following Class: Lcom.android.server.inputmethod.InputMethodManagerService with the following sink code entries:
  - Similarity: 0.8547736406326294, Code:
DisplayInfo v1 = this.mDisplayManagerInternal.getDisplayInfo(p2);
  - Access Control Level: NONE

- API Name: requestColorMode(II)V in the following Class: Lcom.android.server.display.DisplayManagerService$BinderService with the following sink code entries:
  - Similarity: 0.816644012928009, Code:
LogicalDisplay v6 = this.mLogicalDisplayMapper.getDisplayLocked(p1);
int v7 = v6.getRequestedColorModeLocked();
v6.setRequestedColorModeLocked(p2);
  - Access Control Level: SYS_OR_SIG

- API Name: isMinimalPostProcessingRequested(I)Z in the following Class: Lcom.android.server.display.DisplayManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7702497243881226, Code:
LogicalDisplay v3 = v2.getDisplayLocked(p1);
boolean v4 = v3.getRequestedMinimalPostProcessingLocked();
return v4;
  - Access Control Level: NONE

- API Name: connectWifiDisplay(Ljava/lang/String;)V in the following Class: Lcom.android.server.display.DisplayManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7442395091056824, Code:
DisplayManagerService.-$$Nest$mconnectWifiDisplayInternal(this.this$0, p1);
  - Access Control Level: SYS_OR_SIG

- API Name: getSystemPreferredDisplayMode(I)Landroid/view/Display$Mode; in the following Class: Lcom.android.server.display.DisplayManagerService$BinderService with the following sink code entries:
  - Similarity: 0.7372074723243713, Code:
Display$Mode v2 = this.this$0.getSystemPreferredDisplayModeInternal(p1);
return v2;
  - Access Control Level: NONE

