This is path 1 for the API with depth 2:
public void resizeVirtualDisplay(IVirtualDisplayCallback p1, int p2, int p3, int p4){
	if (p2 <= 0) {
		if (p3 <= 0) {
			if (p4 <= 0) {
				long v1 = Binder.clearCallingIdentity();
				IBinder v2 = p1.asBinder();
				if (this.mVirtualDisplayAdapter != 0) {
					this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(v2, p2, p3, p4);
					Binder.restoreCallingIdentity(v1);
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void resizeVirtualDisplay(IVirtualDisplayCallback p1, int p2, int p3, int p4){
	if (p2 <= 0) {
		if (p3 <= 0) {
			if (p4 <= 0) {
				long v1 = Binder.clearCallingIdentity();
				IBinder v2 = p1.asBinder();
				this.this$0.resizeVirtualDisplayInternal(v2, p2, p3, p4);
				Binder.restoreCallingIdentity(v1);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void resizeVirtualDisplay(IVirtualDisplayCallback p1, int p2, int p3, int p4){
	if (p2 <= 0) {
		if (p3 <= 0) {
			if (p4 <= 0) {
				long v1 = Binder.clearCallingIdentity();
				IBinder v2 = p1.asBinder();
				DisplayManagerService.-$$Nest$mresizeVirtualDisplayInternal(this.this$0, v2, p2, p3, p4);
				Binder.restoreCallingIdentity(v1);
				return;
			}
		}
	}
}
