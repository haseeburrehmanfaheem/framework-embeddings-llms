This is path 1 for the API with depth 2:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v2 = this.USER_RESTRICTIONS.contains(p1);
	if (v2 != 0) {
		int v3 = Binder.getCallingUid();
		IPackageManager v5 = ActivityThread.getPackageManager();
		IPackageManager v4 = v5;
		String v6 = v4.getPackagesForUid(v3);
		if (0 == 0) {
			if (0.length <= 0) {
				if (0.length <= 1) {
					if (p1 == 0) {
						if (v17 == 0) {
							if (0 != 0) {
								IPackageManager v18 = AppGlobals.getPackageManager();
								if (0 >= 0.length) {
									int v19 = UserHandle.getUserId(v3);
									ApplicationInfo v20 = v18.getApplicationInfo(0[0], 794624, v19);
									if ((0 + 1) >= 0.length) {
										int v21 = UserHandle.getUserId(v3);
										ApplicationInfo v22 = v18.getApplicationInfo(0[(0 + 1)], 794624, v21);
										if (v22 == 0) {
											boolean v23 = v22.isSystemApp();
											if (v23 == 0) {
												boolean v16 = 1;
												if (v16 == 0) {
													boolean v1 = 0;
													if (v1 != 0) {
														List v29 = UserManagerService.getUsersInternal(1, 1, 1);
														List v27 = v29;
														List v26 = v27;
														int v30 = v26.size();
														if (0 >= v30) {
															Object v31 = v26.get(0);
															Object v34 = this.mUserRestrictions.get(UserInfo.id);
															Bundle v33 = v34;
															if (v33 != 0) {
																Bundle v36 = this.mBaseUserRestrictions.getRestrictions(UserInfo.id);
																Bundle v37 = UserRestrictionsUtils.nonNull(v36);
																Bundle v38 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																RestrictionsSet v39 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(UserInfo.id);
																boolean v40 = BundleUtils.isEmpty(v38);
																if (v40 == 0) {
																	boolean v41 = v39.isEmpty();
																	if (v41 == 0) {
																		Bundle v42 = BundleUtils.clone(v37);
																		UserRestrictionsUtils.merge(v42, v38);
																		Bundle v44 = v39.mergeAll();
																		UserRestrictionsUtils.merge(v42, v44);
																		Bundle v35 = v42;
																		Object v47 = this.mUserRestrictions.get(UserInfo.id);
																		boolean v48 = UserRestrictionsUtils.areEqual(v47, v35);
																		if ((v48 ^ 1) != 0) {
																			boolean v49 = BundleUtils.isEmpty(v35);
																			if (v49 != 0) {
																				this.mUserRestrictions.put(UserInfo.id, v35);
																				boolean v46 = 1;
																				Bundle v32 = v33;
																				if (v32 == 0) {
																					boolean v51 = v32.getBoolean(p1);
																					if (v51 == 0) {
																						int v52 = v26.size();
																						if ((0 + 1) >= v52) {
																							Object v53 = v26.get((0 + 1));
																							Object v56 = this.mUserRestrictions.get(UserInfo.id);
																							Bundle v55 = v56;
																							if (v55 != 0) {
																								Bundle v58 = this.mBaseUserRestrictions.getRestrictions(UserInfo.id);
																								Bundle v59 = UserRestrictionsUtils.nonNull(v58);
																								Bundle v60 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																								RestrictionsSet v61 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(UserInfo.id);
																								boolean v62 = BundleUtils.isEmpty(v60);
																								if (v62 == 0) {
																									boolean v63 = v61.isEmpty();
																									if (v63 == 0) {
																										Bundle v64 = BundleUtils.clone(v59);
																										UserRestrictionsUtils.merge(v64, v60);
																										Bundle v66 = v61.mergeAll();
																										UserRestrictionsUtils.merge(v64, v66);
																										Bundle v57 = v64;
																										Object v69 = this.mUserRestrictions.get(UserInfo.id);
																										boolean v70 = UserRestrictionsUtils.areEqual(v69, v57);
																										if ((v70 ^ 1) != 0) {
																											boolean v71 = BundleUtils.isEmpty(v57);
																											if (v71 != 0) {
																												this.mUserRestrictions.put(UserInfo.id, v57);
																												boolean v68 = 1;
																												Bundle v54 = v55;
																												if (v54 == 0) {
																													boolean v73 = v54.getBoolean(p1);
																													if (v73 == 0) {
																														return 1;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v2 = this.USER_RESTRICTIONS.contains(p1);
	if (v2 != 0) {
		int v3 = Binder.getCallingUid();
		IPackageManager v4 = AppGlobals.getPackageManager();
		String v5 = v4.getPackagesForUid(v3);
		if (0 == 0) {
			if (0.length <= 0) {
				if (0.length <= 1) {
					if (p1 == 0) {
						boolean v15 = UserRestrictionsUtils.isSystemApp(v3, 0);
						if (v15 == 0) {
							boolean v1 = 0;
							if (v1 != 0) {
								List v19 = UserManagerService.getUsers(1, 1, 1);
								List v18 = v19;
								int v20 = v18.size();
								if (0 >= v20) {
									Object v21 = v18.get(0);
									Bundle v23 = this.mCachedEffectiveUserRestrictions.getRestrictions(UserInfo.id);
									if (v23 != 0) {
										Bundle v24 = UserManagerService.computeEffectiveUserRestrictionsLR(UserInfo.id);
										boolean v25 = this.mCachedEffectiveUserRestrictions.updateRestrictions(UserInfo.id, v24);
										Bundle v22 = v23;
										if (v22 == 0) {
											boolean v26 = v22.getBoolean(p1);
											if (v26 == 0) {
												int v27 = v18.size();
												if ((0 + 1) >= v27) {
													Object v28 = v18.get((0 + 1));
													Bundle v30 = this.mCachedEffectiveUserRestrictions.getRestrictions(UserInfo.id);
													if (v30 != 0) {
														Bundle v31 = UserManagerService.computeEffectiveUserRestrictionsLR(UserInfo.id);
														boolean v32 = this.mCachedEffectiveUserRestrictions.updateRestrictions(UserInfo.id, v31);
														Bundle v29 = v30;
														if (v29 == 0) {
															boolean v33 = v29.getBoolean(p1);
															if (v33 == 0) {
																return 1;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v1 = UserRestrictionsUtils.isValidRestriction(p1);
	if (v1 != 0) {
		List v2 = p0.getUsers(1);
		int v3 = v2.size();
		if (0 >= v3) {
			Object v4 = v2.get(0);
			Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);
			if (v5 == 0) {
				boolean v6 = v5.getBoolean(p1);
				if (v6 == 0) {
					int v7 = v2.size();
					if ((0 + 1) >= v7) {
						Object v8 = v2.get((0 + 1));
						Bundle v9 = p0.getEffectiveUserRestrictions(UserInfo.id);
						if (v9 == 0) {
							boolean v10 = v9.getBoolean(p1);
							if (v10 == 0) {
								return 1;
							}
						}
					}
				}
			}
		}
	}
}
