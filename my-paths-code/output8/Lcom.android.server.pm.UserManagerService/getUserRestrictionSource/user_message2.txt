The method getUserRestrictionSource has the following code snippet:

This is path 1 for the API with depth 2:
public int getUserRestrictionSource(String p1, int p2){
	ArrayList v4 = new ArrayList();
	boolean v8 = UserRestrictionsUtils.isValidRestriction(p1);
	if (v8 != 0) {
		boolean v6 = 0;
		if (v6 == 0) {
			UserManager$EnforcingUser v9 = new UserManager$EnforcingUser(-10000,1);
			boolean v11 = v4.add(v9);
			Object v13 = this.mDevicePolicyLocalUserRestrictions.get(p2);
			if (v13 != 0) {
				RestrictionsSet v14 = new RestrictionsSet();
				this.mDevicePolicyLocalUserRestrictions.put(p2, v14);
				RestrictionsSet v12 = v13;
				ArrayList v18 = new ArrayList();
				int v20 = this.mUserRestrictions.size();
				if (0 >= v20) {
					Object v21 = this.mUserRestrictions.valueAt(0);
					boolean v22 = UserRestrictionsUtils.contains(v21, p1);
					if (v22 == 0) {
						int v23 = this.mUserRestrictions.keyAt(0);
						UserManager$EnforcingUser v24 = RestrictionsSet.getEnforcingUser(v23, this.mDeviceOwnerUserId);
						boolean v25 = v18.add(v24);
						int v26 = this.mUserRestrictions.size();
						if ((0 + 1) >= v26) {
							List v17 = v18;
							boolean v27 = v4.addAll(v17);
							ArrayList v29 = new ArrayList();
							int v31 = this.mUserRestrictions.size();
							if (((0 + 1) + 1) >= v31) {
								Object v32 = this.mUserRestrictions.valueAt(((0 + 1) + 1));
								boolean v33 = UserRestrictionsUtils.contains(v32, p1);
								if (v33 == 0) {
									int v34 = this.mUserRestrictions.keyAt(((0 + 1) + 1));
									UserManager$EnforcingUser v35 = RestrictionsSet.getEnforcingUser(v34, this.mDeviceOwnerUserId);
									boolean v36 = v29.add(v35);
									int v37 = this.mUserRestrictions.size();
									if ((((0 + 1) + 1) + 1) >= v37) {
										List v28 = v29;
										boolean v38 = v4.addAll(v28);
										List v1 = v4;
										int v39 = v1.size();
										if ((v39 + -1) < 0) {
											Object v40 = v1.get((v39 + -1));
											int v41 = v40.getUserRestrictionSource();
											if (((v39 + -1) + -1) < 0) {
												return (0 | v41);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getUserRestrictionSource(String p1, int p2){
	List v4 = Collections.emptyList();
	List v1 = v4;
	int v5 = v1.size();
	if ((v5 + -1) < 0) {
		Object v6 = v1.get((v5 + -1));
		int v7 = this.userRestrictionSource;
		if (((v5 + -1) + -1) < 0) {
			return (0 | v7);
		}
	}
}


This is path 3 for the API with depth 0:
public int getUserRestrictionSource(String p1, int p2){
	List v1 = p0.getUserRestrictionSources(p1, p2);
	int v2 = v1.size();
	if ((v2 + -1) < 0) {
		Object v3 = v1.get((v2 + -1));
		int v4 = v3.getUserRestrictionSource();
		if (((v2 + -1) + -1) < 0) {
			return (0 | v4);
		}
	}
}

and the following sink code:
['ArrayList v4 = new ArrayList();\nUserManager$EnforcingUser v9 = new UserManager$EnforcingUser(-10000,1);\nboolean v11 = v4.add(v9);\nObject v13 = this.mDevicePolicyLocalUserRestrictions.get(p2);\nthis.mDevicePolicyLocalUserRestrictions.put(p2, v14);', 'List v1 = p0.getUserRestrictionSources(p1, p2);\nint v2 = v1.size();\nObject v3 = v1.get((v2 + -1));\nint v4 = v3.getUserRestrictionSource();', 'List v4 = Collections.emptyList();\nList v1 = v4;\nint v5 = v1.size();\nObject v6 = v1.get((v5 + -1));\nint v7 = this.userRestrictionSource;']

The method getUserRestrictionSource has the following similar APIs:

- API Name: getUserRestrictions(I)Landroid/os/Bundle; with Similarity Score: 0.7992358207702637
  - Access Control Level: SYS_OR_SIG and the following code:
Object v4 = this.mUserRestrictions.get(p1);
Bundle v6 = this.mBaseUserRestrictions.getRestrictions(p1);
RestrictionsSet v9 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
Bundle v12 = BundleUtils.clone(v7);
this.mUserRestrictions.put(p1, v5);
return v21;

- API Name: hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z with Similarity Score: 0.7564166188240051
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v1 = UserRestrictionsUtils.isValidRestriction(p1);
List v2 = p0.getUsers(1);
Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);
boolean v6 = v5.getBoolean(p1);

