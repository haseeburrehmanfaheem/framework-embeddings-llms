The method removeUserWhenPossible in the following class Lcom.android.server.pm.UserManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public int removeUserWhenPossible(int p1, boolean p2){
	Object v13 = this.mUsers.get(p1);
	if (p1 != 0) {
		if (v13 != 0) {
			boolean v14 = this.mRemovingUserIds.get(p1);
			if (v14 == 0) {
				this.mRemovingUserIds.put(p1, 1);
				Integer v23 = Integer.valueOf(p1);
				boolean v24 = this.mRecentlyRemovedIds.add(v23);
				int v25 = this.mRecentlyRemovedIds.size();
				if (v25 <= 100) {
					Object v26 = this.mRecentlyRemovedIds.removeFirst();
					UserInfo.partial = 1;
					UserInfo.flags = (UserInfo.flags | 64);
					AtomicFile v28 = new AtomicFile(v29);
					File v29 = new File(this.mUsersDir,v34);
					StringBuilder v30 = new StringBuilder();
					StringBuilder v32 = v30.append(UserInfo.id);
					StringBuilder v33 = v30.append(".xml");
					String v34 = v30.toString();
					FileOutputStream v37 = v28.startWrite();
					UserManagerService.writeUserLP(v13, v37);
					v28.finishWrite(v37);
					long v41 = UserManagerService.logUserJourneyBegin(6, p1, UserInfo.userType, UserInfo.flags);
					long v40 = v41;
					this.mAppOpsService.removeUser(p1);
					if (UserInfo.profileGroupId == -10000) {
						boolean v44 = UserManager.isUserTypeManagedProfile(this.userType);
						boolean v43 = v44;
						if (v43 == 0) {
							IActivityManager v45 = ActivityManager.getService();
							UserManagerService$6 v46 = new UserManagerService$6(UserManagerService,v40);
							int v48 = v45.stopUser(p1, 1, v46);
							if (v48 != 0) {
								Binder.restoreCallingIdentity(v11);
								boolean v10 = 0;
								if (v10 == 0) {
									UserInfo.flags = (UserInfo.flags | 256);
									p0.writeUserLP(v7);
									Binder.restoreCallingIdentity(v6);
									return 1;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int removeUserWhenPossible(int p1, boolean p2){
	Object v13 = this.mUsers.get(p1);
	if (p1 != 0) {
		if (v13 != 0) {
			boolean v14 = this.mRemovingUserIds.get(p1);
			if (v14 == 0) {
				UserManagerService.addRemovingUserIdLocked(p1);
				UserInfo.partial = 1;
				UserInfo.flags = (UserInfo.flags | 64);
				UserManagerService.writeUserLP(v13);
				long v23 = UserManagerService.logUserRemoveJourneyBegin(p1, UserInfo.userType, UserInfo.flags);
				this.mAppOpsService.removeUser(p1);
				if (UserInfo.profileGroupId == -10000) {
					boolean v25 = UserManagerService$UserData.info.isManagedProfile();
					if (v25 == 0) {
						IActivityManager v26 = ActivityManager.getService();
						UserManagerService$6 v27 = new UserManagerService$6(UserManagerService,v23);
						int v29 = v26.stopUser(p1, 1, v27);
						if (v29 != 0) {
							Binder.restoreCallingIdentity(v11);
							boolean v10 = 0;
							if (v10 == 0) {
								UserInfo.flags = (UserInfo.flags | 256);
								AtomicFile v41 = new AtomicFile(v42);
								File v42 = new File(this.mUsersDir,v47);
								StringBuilder v43 = new StringBuilder();
								StringBuilder v45 = v43.append(UserInfo.id);
								StringBuilder v46 = v43.append(".xml");
								String v47 = v43.toString();
								FileOutputStream v50 = v41.startWrite();
								UserManagerService.writeUserLP(v7, v50);
								v41.finishWrite(v50);
								Binder.restoreCallingIdentity(v6);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int removeUserWhenPossible(int p1, boolean p2){
	boolean v10 = p0.removeUserUnchecked(p1);
	if (v10 == 0) {
		UserInfo.flags = (UserInfo.flags | 256);
		p0.writeUserLP(v7);
		Binder.restoreCallingIdentity(v6);
		return 1;
	}
}

and the following sink code:
['Object v13 = this.mUsers.get(p1);\nthis.mRemovingUserIds.put(p1, 1);\nInteger v23 = Integer.valueOf(p1);\nboolean v24 = this.mRecentlyRemovedIds.add(v23);\nAtomicFile v28 = new AtomicFile(v29);\nFileOutputStream v37 = v28.startWrite();\nUserManagerService.writeUserLP(v13, v37);', 'UserManagerService.addRemovingUserIdLocked(p1);\nUserInfo.partial = 1;\nUserInfo.flags = (UserInfo.flags | 64);\nUserManagerService.writeUserLP(v13);\nlong v23 = UserManagerService.logUserRemoveJourneyBegin(p1, UserInfo.userType, UserInfo.flags);', 'boolean v10 = p0.removeUserUnchecked(p1);\nUserInfo.flags = (UserInfo.flags | 256);\np0.writeUserLP(v7);']

The method removeUserWhenPossible has the following similar APIs:

- API Name: removeUser(I)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.9535642266273499, Code:
Object v10 = this.mUsers.get(p1);
boolean v11 = this.mRemovingUserIds.get(p1);
this.mRemovingUserIds.put(p1, 1);
Integer v38 = Integer.valueOf(p1);
boolean v39 = this.mRecentlyRemovedIds.add(v38);
AtomicFile v43 = new AtomicFile(v44);
UserManagerService.writeUserLP(v28, v52);
  - Access Control Level: SYS_OR_SIG

- API Name: removeUserEvenWhenDisallowed(I)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.914354681968689, Code:
Object v5 = this.mUsers.get(p1);
boolean v6 = this.mRemovingUserIds.get(p1);
this.mRemovingUserIds.put(p1, 1);
Integer v15 = Integer.valueOf(p1);
boolean v16 = this.mRecentlyRemovedIds.add(v15);
UserManagerService.writeUserLP(v5, v29);
this.mAppOpsService.removeUser(p1);
IActivityManager v37 = ActivityManager.getService();
int v40 = v37.stopUser(p1, 1, v38);
  - Similarity: 0.8863186240196228, Code:
Object v5 = this.mUsers.get(p1);
boolean v6 = this.mRemovingUserIds.get(p1);
UserManagerService.addRemovingUserIdLocked(p1);
UserManagerService.writeUserLP(v5);
long v15 = UserManagerService.logUserRemoveJourneyBegin(p1, UserInfo.userType, UserInfo.flags);
this.mAppOpsService.removeUser(p1);
IActivityManager v18 = ActivityManager.getService();
int v21 = v18.stopUser(p1, 1, v19);
  - Access Control Level: SYS_OR_SIG

- API Name: setUserEphemeral(IZ)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8605207800865173, Code:
Object v2 = this.mUsers.get(p1);
if ((UserInfo.flags & 256) == 0) {
if ((UserInfo.flags & 8192) == 0) {
UserInfo.flags = (UserInfo.flags | 256);
p0.writeUserLP(v2);
  - Similarity: 0.8577675819396973, Code:
Object v2 = this.mUsers.get(p1);
if ((UserInfo.flags & 256) == 0) {
if ((UserInfo.flags & 8192) == 0) {
UserInfo.flags = (UserInfo.flags & -257);
p0.writeUserLP(v2);
  - Access Control Level: SYS_OR_SIG

- API Name: setUserEnabled(I)V in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8536983728408813, Code:
Object v3 = this.mUsers.get(p1);
if (v4 != 0) {
UserInfo.flags = (UserInfo.flags ^ 64);
UserManagerService$UserData v6 = v7;
AtomicFile v10 = new AtomicFile(v11);
FileOutputStream v19 = v10.startWrite();
UserManagerService.writeUserLP(v6, v19);
  - Similarity: 0.8234339952468872, Code:
UserInfo v2 = p0.getUserInfoLU(p1);
if (v3 != 0) {
UserInfo.flags = (UserInfo.flags ^ 64);
UserManagerService$UserData v4 = p0.getUserDataLU(UserInfo.id);
p0.writeUserLP(v4);
  - Access Control Level: SYS_OR_SIG

- API Name: setUserName(ILjava/lang/String;)V in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8371322154998779, Code:
UserInfo.name = p2;
p0.writeUserLP(v2);
  - Access Control Level: SYS_OR_SIG

