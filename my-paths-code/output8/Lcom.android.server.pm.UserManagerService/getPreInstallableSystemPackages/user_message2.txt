The method getPreInstallableSystemPackages in the following class Lcom.android.server.pm.UserManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = 1;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = 1;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = 1;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = 1;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if (0 >= v17) {
												Object v18 = this.mWhitelistedPackagesForUserTypes.keyAt(0);
												Object v19 = this.mWhitelistedPackagesForUserTypes.valueAt(0);
												long v20 = v19.longValue();
												if (((v20 & v13) < 0) == 0) {
													boolean v21 = v14.add(v18);
													int v22 = this.mWhitelistedPackagesForUserTypes.size();
													if ((0 + 1) >= v22) {
														Set v12 = v14;
														ArraySet v23 = new ArraySet();
														Object v26 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
														Object v25 = v26;
														UserSystemPackageInstaller$$ExternalSyntheticLambda0 v27 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,0,v23);
														v25.forEachPackage(v27);
														Set v2 = v23;
														if (v2 != 0) {
															int v30 = v2.size();
															String v31 = new String(v30);
															Object v32 = v2.toArray(v31);
															return v32;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String getPreInstallableSystemPackages(String p1){
	int v3 = UserSystemPackageInstaller.getWhitelistMode();
	boolean v4 = UserSystemPackageInstaller.isEnforceMode(v3);
	if (v4 != 0) {
		boolean v5 = UserSystemPackageInstaller.isImplicitWhitelistMode(v3);
		if (v5 != 0) {
			boolean v6 = UserSystemPackageInstaller.isImplicitWhitelistSystemMode(v3);
			if (v6 == 0) {
				boolean v7 = this.mUm.isUserTypeSubtypeOfSystem(p1);
				if (v7 == 0) {
					Set v8 = UserSystemPackageInstaller.getWhitelistedPackagesForUserType(p1);
					ArraySet v9 = new ArraySet();
					Object v11 = LocalServices.getService(PackageManagerInterna.class);
					UserSystemPackageInstaller$$ExternalSyntheticLambda0 v12 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v8,0,v9);
					v11.forEachPackage(v12);
					Set v2 = v9;
					if (v2 != 0) {
						int v15 = v2.size();
						String v16 = new String(v15);
						Object v17 = v2.toArray(v16);
						return v17;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String getPreInstallableSystemPackages(String p1){
	Set v2 = this.mSystemPackageInstaller.getInstallablePackagesForUserType(p1);
	if (v2 != 0) {
		int v3 = v2.size();
		String v4 = new String(v3);
		Object v5 = v2.toArray(v4);
		return v5;
	}
}

and the following sink code:
['Set v2 = this.mSystemPackageInstaller.getInstallablePackagesForUserType(p1);\nint v3 = v2.size();\nString v4 = new String(v3);\nObject v5 = v2.toArray(v4);\nreturn v5;', 'Set v8 = UserSystemPackageInstaller.getWhitelistedPackagesForUserType(p1);\nArraySet v9 = new ArraySet();\nObject v11 = LocalServices.getService(PackageManagerInterna.class);\nUserSystemPackageInstaller$$ExternalSyntheticLambda0 v12 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v8,0,v9);\nv11.forEachPackage(v12);\nSet v2 = v9;\nint v15 = v2.size();\nString v16 = new String(v15);\nObject v17 = v2.toArray(v16);\nreturn v17;', 'Object v10 = this.mUserTypes.get(p1);\nlong v13 = UserSystemPackageInstaller.getUserTypeMask(p1);\nArraySet v14 = new ArraySet(v15);\nUserSystemPackageInstaller$$ExternalSyntheticLambda0 v27 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,0,v23);\nv25.forEachPackage(v27);\nSet v2 = v23;\nint v30 = v2.size();\nString v31 = new String(v30);\nObject v32 = v2.toArray(v31);\nreturn v32;']

The method getPreInstallableSystemPackages has the following similar APIs:

- API Name: getRemainingCreatableProfileCount(Ljava/lang/String;I)I in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.791140079498291, Code:
Object v3 = this.mUserTypes.get(p1);
boolean v4 = v3.isEnabled();
if (v4 != 0) {
boolean v5 = v3.isManagedProfile();
PackageManager v6 = this.mContext.getPackageManager();
boolean v7 = v6.hasSystemFeature("android.software.managed_users");
UserInfo v8 = UserManagerService.getUserInfoLU(p2);
boolean v9 = v8.canHaveProfile();
[I v10 = UserManagerService.getProfileIds(p2, p1, 0);
int v11 = UserManagerService.getAliveUsersExcludingGuestsCountLU();
int v12 = UserManager.getMaxSupportedUsers();
if ((v12 - (v11 - 1)) > 0) {
int v13 = UserManagerService.getMaxUsersOfTypePerParent(v3);
int v14 = Math.min(1, (v13 - (v10.length - 1)));
if (1 > 0) {
int v15 = v3.getMaxAllowed();
if (v15 == -1) {
int v16 = Math.max(0, 1);
int v1 = v16;
return v1;
  - Similarity: 0.7391748428344727, Code:
Object v3 = this.mUserTypes.get(p1);
boolean v4 = this.mEnabled;
if (v4 != 0) {
boolean v6 = UserManager.isUserTypeManagedProfile(this.mName);
boolean v5 = v6;
PackageManager v7 = this.mContext.getPackageManager();
boolean v8 = v7.hasSystemFeature("android.software.managed_users");
IntArray v25 = UserManagerService.getProfileIdsLU(p2, p1, 0);
int v28 = 0;
int v33 = UserManager.getMaxSupportedUsers();
if ((v33 - (v28 - 1)) > 0) {
int v35 = v3.getMaxAllowedPerParent();
int v37 = SystemProperties.getInt("persist.sys.max_profiles", v35);
int v34 = v37;
if (v34 == -1) {
int v38 = Math.min(1, (v34 - (v16.length - 1)));
if (1 > 0) {
int v39 = this.mMaxAllowed;
if (v39 == -1) {
int v40 = Math.max(0, 1);
int v1 = v40;
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: getRemainingCreatableUserCount(Ljava/lang/String;)I in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7820834517478943, Code:
Object v2 = this.mUserTypes.get(p1);
int v5 = this.mUsers.size();
PackageManager v13 = this.mContext.getPackageManager();
return v19;
  - Similarity: 0.7344341278076172, Code:
Object v2 = this.mUserTypes.get(p1);
int v5 = this.mUsers.size();
this.mMaxAllowed
return v23;
  - Access Control Level: SYS_OR_SIG

- API Name: canAddMoreUsersOfType(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7694287896156311, Code:
Object v2 = this.mUserTypes.get(p1);
boolean v4 = v2.isEnabled();
int v5 = v2.getMaxAllowed();
String v6 = v2.getName();
int v7 = UserManagerService.getNumberOfUsersOfType(v6);
  - Access Control Level: SYS_OR_SIG

- API Name: preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo; in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7535229921340942, Code:
Object v1 = this.mUserTypes.get(p1);
int v2 = v1.getDefaultUserInfoFlags();
UserInfo v17 = p0.createUserInternalUnchecked(0, p1, v2, -10000, 1, 0, 0);
return v17;
  - Similarity: 0.7452828288078308, Code:
Object v1 = this.mUserTypes.get(p1);
int v22 = UserManagerService.scanNextAvailableIdLocked();
long v34 = UserManagerService.logUserJourneyBegin(4, v21, p1, v2);
UserInfo v49 = UserManagerService.convertPreCreatedUserIfPossible(v37, (v2 | v38), 0, 0);
return v20;
  - Similarity: 0.7350063920021057, Code:
Object v1 = this.mUserTypes.get(p1);
int v18 = UserManagerService.getNextAvailableId();
long v27 = UserManagerService.logUserCreateJourneyBegin(v18, p1, v2);
UserInfo v28 = UserManagerService.createUserInternalUncheckedNoTracing(0, p1, v2, -10000, 1, 0, v19, 0);
return v17;
  - Access Control Level: SYS_OR_SIG

- API Name: hasBadge(I)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.7104797959327698, Code:
String v3 = UserManagerService.getUserTypeNoChecks(p1);
Object v4 = this.mUserTypes.get(v3);
UserTypeDetails v2 = v4;
  - Access Control Level: SYS_OR_SIG

