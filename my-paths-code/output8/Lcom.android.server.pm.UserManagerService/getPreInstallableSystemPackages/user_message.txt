This is path 1 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = 1;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = 1;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = 1;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = 1;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if (0 >= v17) {
												Object v18 = this.mWhitelistedPackagesForUserTypes.keyAt(0);
												Object v19 = this.mWhitelistedPackagesForUserTypes.valueAt(0);
												long v20 = v19.longValue();
												if (((v20 & v13) < 0) == 0) {
													boolean v21 = v14.add(v18);
													int v22 = this.mWhitelistedPackagesForUserTypes.size();
													if ((0 + 1) >= v22) {
														Set v12 = v14;
														ArraySet v23 = new ArraySet();
														Object v26 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
														Object v25 = v26;
														UserSystemPackageInstaller$$ExternalSyntheticLambda0 v27 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,0,v23);
														v25.forEachPackage(v27);
														Set v2 = v23;
														if (v2 != 0) {
															int v30 = v2.size();
															String v31 = new String(v30);
															Object v32 = v2.toArray(v31);
															return v32;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public String getPreInstallableSystemPackages(String p1){
	int v3 = UserSystemPackageInstaller.getWhitelistMode();
	boolean v4 = UserSystemPackageInstaller.isEnforceMode(v3);
	if (v4 != 0) {
		boolean v5 = UserSystemPackageInstaller.isImplicitWhitelistMode(v3);
		if (v5 != 0) {
			boolean v6 = UserSystemPackageInstaller.isImplicitWhitelistSystemMode(v3);
			if (v6 == 0) {
				boolean v7 = this.mUm.isUserTypeSubtypeOfSystem(p1);
				if (v7 == 0) {
					Set v8 = UserSystemPackageInstaller.getWhitelistedPackagesForUserType(p1);
					ArraySet v9 = new ArraySet();
					Object v11 = LocalServices.getService(PackageManagerInterna.class);
					UserSystemPackageInstaller$$ExternalSyntheticLambda0 v12 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v8,0,v9);
					v11.forEachPackage(v12);
					Set v2 = v9;
					if (v2 != 0) {
						int v15 = v2.size();
						String v16 = new String(v15);
						Object v17 = v2.toArray(v16);
						return v17;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public String getPreInstallableSystemPackages(String p1){
	Set v2 = this.mSystemPackageInstaller.getInstallablePackagesForUserType(p1);
	if (v2 != 0) {
		int v3 = v2.size();
		String v4 = new String(v3);
		Object v5 = v2.toArray(v4);
		return v5;
	}
}
