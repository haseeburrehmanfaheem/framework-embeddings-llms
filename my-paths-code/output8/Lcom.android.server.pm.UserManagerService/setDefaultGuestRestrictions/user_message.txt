This is path 1 for the API with depth 2:
public void setDefaultGuestRestrictions(Bundle p1){
	this.mGuestRestrictions.clear();
	this.mGuestRestrictions.putAll(p1);
	AtomicFile v5 = new AtomicFile(this.mUserListFile);
	FileOutputStream v7 = v5.startWrite();
	TypedXmlSerializer v8 = Xml.resolveSerializer(v7);
	v8.startDocument(0, Boolean.TRUE);
	v8.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", 1);
	XmlSerializer v11 = v8.startTag(0, "users");
	XmlSerializer v12 = v8.attributeInt(0, "nextSerialNumber", this.mNextSerialNumber);
	XmlSerializer v13 = v8.attributeInt(0, "version", this.mUserVersion);
	XmlSerializer v14 = v8.attributeInt(0, "userTypeConfigVersion", this.mUserTypeVersion);
	XmlSerializer v15 = v8.startTag(0, "guestRestrictions");
	if (this.mGuestRestrictions != 0) {
		XmlSerializer v17 = v8.startTag(0, "restrictions");
		Set v18 = this.mGuestRestrictions.keySet();
		Iterator v19 = v18.iterator();
		boolean v20 = v19.hasNext();
		if (v20 == 0) {
			Object v21 = v19.next();
			boolean v22 = this.NON_PERSIST_USER_RESTRICTIONS.contains(v21);
			if (v22 == 0) {
				boolean v23 = v19.hasNext();
				if (v23 == 0) {
					XmlSerializer v24 = v8.endTag(0, "restrictions");
					XmlSerializer v25 = v8.endTag(0, "guestRestrictions");
					XmlSerializer v26 = v8.startTag(0, "deviceOwnerUserId");
					XmlSerializer v27 = v8.attributeInt(0, "id", this.mDeviceOwnerUserId);
					XmlSerializer v28 = v8.endTag(0, "deviceOwnerUserId");
					int v29 = this.mUsers.size();
					[I v30 = new [I(v29);
					if (0 >= v29) {
						if (0 >= v29) {
							XmlSerializer v31 = v8.startTag(0, "user");
							XmlSerializer v32 = v8.attributeInt(0, "id", v30[0]);
							XmlSerializer v33 = v8.endTag(0, "user");
							if ((0 + 1) >= v29) {
								XmlSerializer v34 = v8.endTag(0, "users");
								v8.endDocument();
								v5.finishWrite(v7);
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setDefaultGuestRestrictions(Bundle p1){
	this.mGuestRestrictions.clear();
	this.mGuestRestrictions.putAll(p1);
	AtomicFile v5 = new AtomicFile(this.mUserListFile);
	FileOutputStream v7 = v5.startWrite();
	TypedXmlSerializer v8 = Xml.resolveSerializer(v7);
	v8.startDocument(0, Boolean.TRUE);
	v8.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", 1);
	XmlSerializer v11 = v8.startTag(0, "users");
	XmlSerializer v12 = v8.attributeInt(0, "nextSerialNumber", this.mNextSerialNumber);
	XmlSerializer v13 = v8.attributeInt(0, "version", this.mUserVersion);
	XmlSerializer v14 = v8.attributeInt(0, "userTypeConfigVersion", this.mUserTypeVersion);
	XmlSerializer v15 = v8.startTag(0, "guestRestrictions");
	UserRestrictionsUtils.writeRestrictions(v8, this.mGuestRestrictions, "restrictions");
	XmlSerializer v17 = v8.endTag(0, "guestRestrictions");
	XmlSerializer v18 = v8.startTag(0, "deviceOwnerUserId");
	XmlSerializer v19 = v8.attributeInt(0, "id", this.mDeviceOwnerUserId);
	XmlSerializer v20 = v8.endTag(0, "deviceOwnerUserId");
	int v21 = this.mUsers.size();
	[I v22 = new [I(v21);
	if (0 >= v21) {
		if (0 >= v21) {
			XmlSerializer v23 = v8.startTag(0, "user");
			XmlSerializer v24 = v8.attributeInt(0, "id", v22[0]);
			XmlSerializer v25 = v8.endTag(0, "user");
			if ((0 + 1) >= v21) {
				XmlSerializer v26 = v8.endTag(0, "users");
				v8.endDocument();
				v5.finishWrite(v7);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setDefaultGuestRestrictions(Bundle p1){
	this.mGuestRestrictions.clear();
	this.mGuestRestrictions.putAll(p1);
	p0.writeUserListLP();
	return;
}
