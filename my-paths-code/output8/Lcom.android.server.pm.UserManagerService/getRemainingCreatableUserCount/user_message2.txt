The method getRemainingCreatableUserCount in the following class Lcom.android.server.pm.UserManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public int getRemainingCreatableUserCount(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v3 = this.mEnabled;
		if (v3 != 0) {
			int v5 = this.mUsers.size();
			if (0 >= v5) {
				Object v6 = this.mUsers.valueAt(0);
				boolean v7 = this.mRemovingUserIds.get(UserInfo.id);
				if (v7 != 0) {
					boolean v9 = UserManager.isUserTypeGuest(this.userType);
					boolean v8 = v9;
					if (v8 != 0) {
						if (UserInfo.preCreated != 0) {
							if ((0 + 1) >= v5) {
								int v4 = 0;
								boolean v10 = UserManager.isUserTypeGuest(p1);
								if (v10 != 0) {
									boolean v11 = UserManager.isUserTypeDemo(p1);
									if (v11 == 0) {
										boolean v12 = v2.isManagedProfile();
										if (v12 == 0) {
											PackageManager v13 = this.mContext.getPackageManager();
											boolean v14 = v13.hasSystemFeature("android.software.managed_users");
											if (v14 != 0) {
												if ((getMaxSupportedUsers() - v4) > 0) {
													if (v4 != 1) {
														if ((1 & 1) == 0) {
															if ((getMaxSupportedUsers() - v4) > 0) {
																int v15 = v2.getMaxAllowed();
																if (v15 != -1) {
																	int v16 = v2.getMaxAllowed();
																	int v17 = p0.getNumberOfUsersOfType(p1);
																	int v18 = Math.min((getMaxSupportedUsers() - v4), 2147483647);
																	int v19 = Math.max(0, v18);
																	return v19;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getRemainingCreatableUserCount(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v3 = this.mEnabled;
		if (v3 != 0) {
			int v5 = this.mUsers.size();
			if (0 >= v5) {
				Object v6 = this.mUsers.valueAt(0);
				boolean v7 = this.mRemovingUserIds.get(UserInfo.id);
				if (v7 != 0) {
					boolean v8 = UserManagerService$UserData.info.isGuest();
					if (v8 != 0) {
						if (UserInfo.preCreated != 0) {
							if ((0 + 1) >= v5) {
								int v4 = 0;
								boolean v9 = UserManager.isUserTypeGuest(p1);
								if (v9 != 0) {
									boolean v10 = UserManager.isUserTypeDemo(p1);
									if (v10 == 0) {
										boolean v12 = UserManager.isUserTypeManagedProfile(this.mName);
										boolean v11 = v12;
										if (v11 == 0) {
											PackageManager v13 = this.mContext.getPackageManager();
											boolean v14 = v13.hasSystemFeature("android.software.managed_users");
											if (v14 != 0) {
												if ((getMaxSupportedUsers() - v4) > 0) {
													if (v4 != 1) {
														if ((1 & 1) == 0) {
															if ((getMaxSupportedUsers() - v4) > 0) {
																int v15 = this.mMaxAllowed;
																if (v15 != -1) {
																	int v16 = this.mMaxAllowed;
																	int v18 = this.mUsers.size();
																	if (0 >= v18) {
																		Object v19 = this.mUsers.valueAt(0);
																		boolean v20 = UserInfo.userType.equals(p1);
																		if (v20 == 0) {
																			if (UserInfo.guestToRemove != 0) {
																				boolean v21 = this.mRemovingUserIds.get(UserInfo.id);
																				if (v21 != 0) {
																					if (UserInfo.preCreated != 0) {
																						if ((0 + 1) >= v18) {
																							int v17 = 0;
																							int v22 = Math.min((getMaxSupportedUsers() - v4), 2147483647);
																							int v23 = Math.max(0, v22);
																							return v23;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int getRemainingCreatableUserCount(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v3 = v2.isEnabled();
		if (v3 != 0) {
			int v4 = p0.getAliveUsersExcludingGuestsCountLU();
			boolean v5 = UserManager.isUserTypeGuest(p1);
			if (v5 != 0) {
				boolean v6 = UserManager.isUserTypeDemo(p1);
				if (v6 == 0) {
					boolean v7 = v2.isManagedProfile();
					if (v7 == 0) {
						PackageManager v8 = this.mContext.getPackageManager();
						boolean v9 = v8.hasSystemFeature("android.software.managed_users");
						if (v9 != 0) {
							if ((getMaxSupportedUsers() - v4) > 0) {
								if (v4 != 1) {
									if ((1 & 1) == 0) {
										if ((getMaxSupportedUsers() - v4) > 0) {
											int v10 = v2.getMaxAllowed();
											if (v10 != -1) {
												int v11 = v2.getMaxAllowed();
												int v12 = p0.getNumberOfUsersOfType(p1);
												int v13 = Math.min((getMaxSupportedUsers() - v4), 2147483647);
												int v14 = Math.max(0, v13);
												return v14;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v2 = this.mUserTypes.get(p1);\nint v5 = this.mUsers.size();\nPackageManager v13 = this.mContext.getPackageManager();\nreturn v19;', 'Object v2 = this.mUserTypes.get(p1);\nint v5 = this.mUsers.size();\nthis.mMaxAllowed\nreturn v23;', 'Object v2 = this.mUserTypes.get(p1);\nint v4 = p0.getAliveUsersExcludingGuestsCountLU();\nreturn v14;']

The method getRemainingCreatableUserCount has the following similar APIs:

- API Name: canAddMoreUsersOfType(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.9046590328216553, Code:
Object v2 = this.mUserTypes.get(p1);
boolean v4 = v2.isEnabled();
int v5 = v2.getMaxAllowed();
String v6 = v2.getName();
int v7 = UserManagerService.getNumberOfUsersOfType(v6);
  - Similarity: 0.8423166275024414, Code:
Object v2 = this.mUserTypes.get(p1);
if (v2 == 0) {
boolean v3 = p0.canAddMoreUsersOfType(v2);
  - Access Control Level: SYS_OR_SIG

- API Name: preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo; in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8457732796669006, Code:
Object v1 = this.mUserTypes.get(p1);
int v22 = UserManagerService.scanNextAvailableIdLocked();
long v34 = UserManagerService.logUserJourneyBegin(4, v21, p1, v2);
UserInfo v49 = UserManagerService.convertPreCreatedUserIfPossible(v37, (v2 | v38), 0, 0);
return v20;
  - Access Control Level: SYS_OR_SIG

- API Name: getRemainingCreatableProfileCount(Ljava/lang/String;I)I in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8456671833992004, Code:
Object v3 = this.mUserTypes.get(p1);
boolean v4 = v3.isEnabled();
if (v4 != 0) {
boolean v5 = v3.isManagedProfile();
PackageManager v6 = this.mContext.getPackageManager();
boolean v7 = v6.hasSystemFeature("android.software.managed_users");
UserInfo v8 = UserManagerService.getUserInfoLU(p2);
boolean v9 = v8.canHaveProfile();
[I v10 = UserManagerService.getProfileIds(p2, p1, 0);
int v11 = UserManagerService.getAliveUsersExcludingGuestsCountLU();
int v12 = UserManager.getMaxSupportedUsers();
if ((v12 - (v11 - 1)) > 0) {
int v13 = UserManagerService.getMaxUsersOfTypePerParent(v3);
int v14 = Math.min(1, (v13 - (v10.length - 1)));
if (1 > 0) {
int v15 = v3.getMaxAllowed();
if (v15 == -1) {
int v16 = Math.max(0, 1);
int v1 = v16;
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: hasBadge(I)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8248840570449829, Code:
String v3 = UserManagerService.getUserTypeNoChecks(p1);
Object v4 = this.mUserTypes.get(v3);
UserTypeDetails v2 = v4;
  - Access Control Level: SYS_OR_SIG

- API Name: isUserTypeEnabled(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8238257765769958, Code:
Object v2 = this.mUserTypes.get(p1);
boolean v3 = this.mEnabled;
if (v3 == 0) {
return 1;
  - Access Control Level: SYS_OR_SIG

