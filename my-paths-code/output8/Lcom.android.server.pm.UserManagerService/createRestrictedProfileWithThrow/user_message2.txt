The method createRestrictedProfileWithThrow has the following code snippet:

This is path 1 for the API with depth 2:
public UserInfo createRestrictedProfileWithThrow(String p1, int p2){
	boolean v5 = UserManager.isUserTypeCloneProfile("android.os.usertype.full.RESTRICTED");
	if (v5 == 0) {
		boolean v6 = UserManager.isUserTypeManagedProfile("android.os.usertype.full.RESTRICTED");
		if (v6 == 0) {
			int v7 = UserHandle.getCallingUserId();
			UserManagerService.enforceUserRestriction("no_add_clone_profile", v7, "Cannot add user");
			UserInfo v9 = UserManagerService.createUserInternalUnchecked(p1, "android.os.usertype.full.RESTRICTED", 0, p2, 0, 0, 0);
			UserInfo v4 = v9;
			UserInfo v2 = v4;
			if (v2 != 0) {
				long v10 = Binder.clearCallingIdentity();
				boolean v14 = this.USER_RESTRICTIONS.contains("no_modify_accounts");
				if (v14 != 0) {
					int v15 = Binder.getCallingUid();
					IPackageManager v16 = AppGlobals.getPackageManager();
					String v17 = v16.getPackagesForUid(v15);
					if (0 == 0) {
						if (0.length <= 0) {
							if (0.length <= 1) {
								if ("no_modify_accounts" == 0) {
									boolean v27 = UserRestrictionsUtils.isSystemApp(v15, 0);
									if (v27 == 0) {
										boolean v13 = 0;
										if (v13 != 0) {
											Object v31 = this.mUserRestrictions.get(UserInfo.id);
											Bundle v30 = v31;
											Bundle v33 = new Bundle(v30);
											if (v30 == 0) {
												Bundle v32 = v33;
												v32.putBoolean("no_modify_accounts", 1);
												Bundle v37 = this.mAppliedUserRestrictions.getRestrictions(UserInfo.id);
												Bundle v38 = UserRestrictionsUtils.nonNull(v37);
												if (v32 == 0) {
													Bundle v39 = this.mBaseUserRestrictions.getRestrictions(UserInfo.id);
													if (v39 == v32) {
														Preconditions.checkState(1);
														Bundle v41 = this.mCachedEffectiveUserRestrictions.getRestrictions(UserInfo.id);
														if (v41 == v32) {
															Preconditions.checkState(1);
															boolean v43 = this.mBaseUserRestrictions.updateRestrictions(UserInfo.id, v32);
															if (v43 == 0) {
																UserManagerService$UserData v44 = UserManagerService.getUserDataNoChecks(UserInfo.id);
																UserManagerService.scheduleWriteUser(v44);
																Bundle v46 = UserManagerService.computeEffectiveUserRestrictionsLR(UserInfo.id);
																boolean v47 = this.mCachedEffectiveUserRestrictions.updateRestrictions(UserInfo.id, v46);
																if (this.mAppOpsService == 0) {
																	UserManagerService$3 v48 = new UserManagerService$3(UserManagerService,v46,UserInfo.id);
																	boolean v50 = this.mHandler.post(v48);
																	UserManagerService.propagateUserRestrictionsLR(UserInfo.id, v46, v38);
																	Bundle v52 = new Bundle(v46);
																	boolean v54 = this.mAppliedUserRestrictions.updateRestrictions(UserInfo.id, v52);
																	ContentResolver v55 = this.mContext.getContentResolver();
																	boolean v56 = Settings$Secure.putIntForUser(v55, "location_mode", 0, UserInfo.id);
																	boolean v60 = this.USER_RESTRICTIONS.contains("no_share_location");
																	if (v60 != 0) {
																		int v61 = Binder.getCallingUid();
																		IPackageManager v62 = AppGlobals.getPackageManager();
																		String v63 = v62.getPackagesForUid(v61);
																		if (0 == 0) {
																			if (0.length <= 0) {
																				if (0.length <= 1) {
																					if ("no_share_location" == 0) {
																						boolean v73 = UserRestrictionsUtils.isSystemApp(v61, 0);
																						if (v73 == 0) {
																							boolean v59 = 0;
																							if (v59 != 0) {
																								Object v77 = this.mUserRestrictions.get(UserInfo.id);
																								Bundle v76 = v77;
																								Bundle v79 = new Bundle(v76);
																								if (v76 == 0) {
																									Bundle v78 = v79;
																									v78.putBoolean("no_share_location", 1);
																									Bundle v83 = this.mAppliedUserRestrictions.getRestrictions(UserInfo.id);
																									Bundle v84 = UserRestrictionsUtils.nonNull(v83);
																									if (v78 == 0) {
																										Bundle v85 = this.mBaseUserRestrictions.getRestrictions(UserInfo.id);
																										if (v85 == v78) {
																											Preconditions.checkState(1);
																											Bundle v87 = this.mCachedEffectiveUserRestrictions.getRestrictions(UserInfo.id);
																											if (v87 == v78) {
																												Preconditions.checkState(1);
																												boolean v89 = this.mBaseUserRestrictions.updateRestrictions(UserInfo.id, v78);
																												if (v89 == 0) {
																													UserManagerService$UserData v90 = UserManagerService.getUserDataNoChecks(UserInfo.id);
																													UserManagerService.scheduleWriteUser(v90);
																													Bundle v92 = UserManagerService.computeEffectiveUserRestrictionsLR(UserInfo.id);
																													boolean v93 = this.mCachedEffectiveUserRestrictions.updateRestrictions(UserInfo.id, v92);
																													if (this.mAppOpsService == 0) {
																														UserManagerService$3 v94 = new UserManagerService$3(UserManagerService,v92,UserInfo.id);
																														boolean v96 = this.mHandler.post(v94);
																														UserManagerService.propagateUserRestrictionsLR(UserInfo.id, v92, v84);
																														Bundle v98 = new Bundle(v92);
																														boolean v100 = this.mAppliedUserRestrictions.updateRestrictions(UserInfo.id, v98);
																														Binder.restoreCallingIdentity(v10);
																														return v2;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public UserInfo createRestrictedProfileWithThrow(String p1, int p2){
	UserInfo v4 = UserManagerService.createUserInternal(p1, "android.os.usertype.full.RESTRICTED", 0, p2, 0);
	UserInfo v2 = v4;
	if (v2 != 0) {
		long v5 = Binder.clearCallingIdentity();
		boolean v8 = UserRestrictionsUtils.isValidRestriction("no_modify_accounts");
		if (v8 != 0) {
			Bundle v9 = this.mBaseUserRestrictions.getRestrictions(UserInfo.id);
			Bundle v10 = BundleUtils.clone(v9);
			v10.putBoolean("no_modify_accounts", 1);
			UserManagerService.updateUserRestrictionsInternalLR(v10, UserInfo.id);
			ContentResolver v13 = this.mContext.getContentResolver();
			boolean v14 = Settings$Secure.putIntForUser(v13, "location_mode", 0, UserInfo.id);
			boolean v17 = UserRestrictionsUtils.isValidRestriction("no_share_location");
			if (v17 != 0) {
				Bundle v18 = this.mBaseUserRestrictions.getRestrictions(UserInfo.id);
				Bundle v19 = BundleUtils.clone(v18);
				v19.putBoolean("no_share_location", 1);
				UserManagerService.updateUserRestrictionsInternalLR(v19, UserInfo.id);
				Binder.restoreCallingIdentity(v5);
				return v2;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public UserInfo createRestrictedProfileWithThrow(String p1, int p2){
	UserInfo v2 = p0.createProfileForUserWithThrow(p1, "android.os.usertype.full.RESTRICTED", 0, p2, 0);
	if (v2 != 0) {
		long v3 = Binder.clearCallingIdentity();
		p0.setUserRestriction("no_modify_accounts", 1, UserInfo.id);
		ContentResolver v5 = this.mContext.getContentResolver();
		boolean v6 = Settings$Secure.putIntForUser(v5, "location_mode", 0, UserInfo.id);
		p0.setUserRestriction("no_share_location", 1, UserInfo.id);
		Binder.restoreCallingIdentity(v3);
		return v2;
	}
}

and the following sink code:
['UserInfo v9 = UserManagerService.createUserInternalUnchecked(p1, "android.os.usertype.full.RESTRICTED", 0, p2, 0);\nv32.putBoolean("no_modify_accounts", 1);\nthis.mBaseUserRestrictions.updateRestrictions(UserInfo.id, v32);', 'UserInfo v4 = UserManagerService.createUserInternal(p1, "android.os.usertype.full.RESTRICTED", 0, p2, 0);\nv10.putBoolean("no_modify_accounts", 1);\nUserManagerService.updateUserRestrictionsInternalLR(v10, UserInfo.id);', 'UserInfo v2 = p0.createProfileForUserWithThrow(p1, "android.os.usertype.full.RESTRICTED", 0, p2, 0);\np0.setUserRestriction("no_modify_accounts", 1, UserInfo.id);']

The method createRestrictedProfileWithThrow has the following similar APIs:

- API Name: removeUser(I)Z with Similarity Score: 0.7803450226783752
  - Access Control Level: SYS_OR_SIG and the following code:
UserInfo v9 = UserManagerService.getUserInfoLU(p1);
Bundle v14 = UserManagerService.getEffectiveUserRestrictions(v11);
Bundle v15 = BundleUtils.clone(v14);
UserManagerService.addRemovingUserIdLocked(p1);
UserManagerService.writeUserLP(v20);

- API Name: getUserRestrictions(I)Landroid/os/Bundle; with Similarity Score: 0.7602439522743225
  - Access Control Level: SYS_OR_SIG and the following code:
Object v4 = this.mUserRestrictions.get(p1);
Bundle v6 = this.mBaseUserRestrictions.getRestrictions(p1);
RestrictionsSet v9 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
Bundle v12 = BundleUtils.clone(v7);
this.mUserRestrictions.put(p1, v5);
return v21;

