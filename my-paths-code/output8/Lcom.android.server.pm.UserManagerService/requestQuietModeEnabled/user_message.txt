This is path 1 for the API with depth 2:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if (1 == 0) {
						if (1 != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								if (v8 == 0) {
									Object v10 = this.sLocalServiceObjects.get(ShortcutServiceInterna.class);
									Object v9 = v10;
									if (v9 == 0) {
										boolean v11 = v9.isForegroundDefaultLauncher(p1, v2);
										if (v11 == 0) {
											if (1 == 0) {
												if (this.mPmInternal != 0) {
													Object v14 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
													Object v13 = v14;
													this.mPmInternal = v13;
													PackageManagerInternal v12 = this.mPmInternal;
													ComponentName v15 = v12.getSystemUiServiceComponent();
													String v16 = v15.getPackageName();
													boolean v17 = p1.equals(v16);
													if (v17 != 0) {
														long v18 = Binder.clearCallingIdentity();
														if (p2 == 0) {
															boolean v19 = this.mLockPatternUtils.isManagedProfileWithUnifiedChallenge(p3);
															if (v19 == 0) {
																Object v20 = this.mContext.getSystemService(KeyguardManage.class);
																Object v22 = this.mUsersLock;
																UserInfo v24 = this.this$0.getProfileParentLU(p3);
																UserInfo v23 = v24;
																if (v23 != 0) {
																	int v21 = UserInfo.id;
																	boolean v25 = v20.isDeviceLocked(v21);
																	if (v25 == 0) {
																		if (1 == 0) {
																			if (1 != 0) {
																				boolean v26 = this.mLockPatternUtils.isSecure(p3);
																				if (v26 == 0) {
																					if (1 == 0) {
																						Object v29 = this.mUsers.get(p3);
																						if (v29 == 0) {
																							if (UserInfo.partial == 0) {
																								boolean v30 = this.mRemovingUserIds.get(p3);
																								if (v30 != 0) {
																									if (v29 == 0) {
																										UserInfo v28 = 0;
																										UserInfo v32 = UserManagerService.getUserInfoLU(p3);
																										if (v32 != 0) {
																											if (UserInfo.profileGroupId == p3) {
																												if (UserInfo.profileGroupId != -10000) {
																													UserInfo v33 = UserManagerService.getUserInfoLU(UserInfo.profileGroupId);
																													UserInfo v31 = v33;
																													if (v28 == 0) {
																														boolean v35 = UserManager.isUserTypeManagedProfile(this.userType);
																														boolean v34 = v35;
																														if (v34 == 0) {
																															if ((this.flags & 128) != 128) {
																																boolean v36 = 1;
																																if (v36 != 0) {
																																	UserInfo.flags = (UserInfo.flags ^ 128);
																																	Object v38 = this.mUsers.get(UserInfo.id);
																																	if (v38 == 0) {
																																		if (UserInfo.partial == 0) {
																																			boolean v39 = this.mRemovingUserIds.get(UserInfo.id);
																																			if (v39 != 0) {
																																				UserManagerService$UserData v37 = 0;
																																				AtomicFile v41 = new AtomicFile(v42);
																																				File v42 = new File(this.mUsersDir,v47);
																																				StringBuilder v43 = new StringBuilder();
																																				StringBuilder v45 = v43.append(UserInfo.id);
																																				StringBuilder v46 = v43.append(".xml");
																																				String v47 = v43.toString();
																																				FileOutputStream v50 = v41.startWrite();
																																				UserManagerService.writeUserLP(v37, v50);
																																				v41.finishWrite(v50);
																																				if (0 == 0) {
																																					IActivityManager v53 = ActivityManager.getService();
																																					int v54 = v53.stopUser(p3, 1, 0);
																																					Object v56 = this.sLocalServiceObjects.get(ActivityManagerInterna.class);
																																					Object v55 = v56;
																																					v55.killForegroundAppsForUser(p3);
																																					Boolean v60 = Boolean.valueOf(0);
																																					UserManagerService$UserData v62 = UserManagerService.getUserDataLU(p3);
																																					if (v62 != 0) {
																																						long v63 = System.currentTimeMillis();
																																						long v64 = v62.getLastRequestQuietModeEnabledMillis();
																																						if ((v64 < 0) == 0) {
																																							long v65 = v62.getLastRequestQuietModeEnabledMillis();
																																							DevicePolicyEventLogger v66 = DevicePolicyEventLogger.createEvent(55);
																																							String v67 = new String(1);
																																							DevicePolicyEventLogger v68 = v66.setStrings(v67);
																																							DevicePolicyEventLogger v69 = v68.setBoolean(0);
																																							DevicePolicyEventLogger v70 = v69.setTimePeriod((v63 - v65));
																																							v70.write();
																																							v62.setLastRequestQuietModeEnabledMillis(v63);
																																							UserHandle v74 = UserHandle.of(this.id);
																																							UserHandle v73 = v74;
																																							UserHandle v76 = UserHandle.of(this.id);
																																							UserHandle v75 = v76;
																																							Intent v78 = new Intent();
																																							if (0 == 0) {
																																								Intent v80 = v78.setAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
																																								Intent v81 = v78.putExtra("android.intent.extra.QUIET_MODE", 0);
																																								Intent v82 = v78.putExtra("android.intent.extra.USER", v73);
																																								int v83 = v73.getIdentifier();
																																								Intent v84 = v78.putExtra("android.intent.extra.user_handle", v83);
																																								DevicePolicyManagerInternal v85 = UserManagerService.getDevicePolicyManagerInternal();
																																								v85.broadcastIntentToManifestReceivers(v78, v75, 1);
																																								Intent v87 = v78.addFlags(1073741824);
																																								this.mContext.sendBroadcastAsUser(v78, v75);
																																								Binder.restoreCallingIdentity(v18);
																																								return 1;
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if (1 == 0) {
						if (1 != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								if (v8 == 0) {
									Object v9 = LocalServices.getService(ShortcutServiceInterna.class);
									if (v9 == 0) {
										boolean v10 = v9.isForegroundDefaultLauncher(p1, v2);
										if (v10 == 0) {
											if (1 == 0) {
												if (this.mPmInternal != 0) {
													Object v12 = LocalServices.getService(PackageManagerInterna.class);
													this.mPmInternal = v12;
													PackageManagerInternal v11 = this.mPmInternal;
													ComponentName v13 = v11.getSystemUiServiceComponent();
													String v14 = v13.getPackageName();
													boolean v15 = p1.equals(v14);
													if (v15 != 0) {
														long v16 = Binder.clearCallingIdentity();
														if (p2 == 0) {
															boolean v17 = this.mLockPatternUtils.isManagedProfileWithUnifiedChallenge(p3);
															if (v17 == 0) {
																Object v18 = this.mContext.getSystemService(KeyguardManage.class);
																Object v20 = UserManagerService.-$$Nest$fgetmUsersLock(this.this$0);
																UserInfo v21 = UserManagerService.-$$Nest$mgetProfileParentLU(this.this$0, p3);
																if (v21 != 0) {
																	int v19 = UserInfo.id;
																	boolean v22 = v18.isDeviceLocked(v19);
																	if (v22 == 0) {
																		if (1 == 0) {
																			if (1 != 0) {
																				boolean v23 = this.mLockPatternUtils.isSecure(p3);
																				if (v23 == 0) {
																					if (1 == 0) {
																						UserInfo v25 = UserManagerService.getUserInfoLU(p3);
																						UserInfo v26 = UserManagerService.getProfileParentLU(p3);
																						if (v25 == 0) {
																							boolean v27 = v25.isManagedProfile();
																							if (v27 == 0) {
																								boolean v28 = v25.isQuietModeEnabled();
																								if (v28 != 0) {
																									UserInfo.flags = (UserInfo.flags ^ 128);
																									UserManagerService$UserData v29 = UserManagerService.getUserDataLU(UserInfo.id);
																									UserManagerService.writeUserLP(v29);
																									if (0 == 0) {
																										IActivityManager v31 = ActivityManager.getService();
																										int v32 = v31.stopUser(p3, 1, 0);
																										Object v33 = LocalServices.getService(ActivityManagerInterna.class);
																										v33.killForegroundAppsForUser(p3);
																										UserManagerService.logQuietModeEnabled(p3, 0, p1);
																										UserHandle v36 = v25.getUserHandle();
																										UserHandle v37 = v26.getUserHandle();
																										UserManagerService.broadcastProfileAvailabilityChanges(v36, v37, 0);
																										Binder.restoreCallingIdentity(v16);
																										return 1;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if (1 == 0) {
						if (1 != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								p0.ensureCanModifyQuietMode(p1, v2, p3, 1, 1);
								if (1 == 0) {
									PackageManagerInternal v4 = p0.getPackageManagerInternal();
									ComponentName v5 = v4.getSystemUiServiceComponent();
									String v6 = v5.getPackageName();
									boolean v7 = p1.equals(v6);
									if (v7 != 0) {
										long v8 = Binder.clearCallingIdentity();
										if (p2 == 0) {
											boolean v9 = this.mLockPatternUtils.isManagedProfileWithUnifiedChallenge(p3);
											if (v9 == 0) {
												Object v10 = this.mContext.getSystemService(KeyguardManage.class);
												int v11 = this.mLocalService.getProfileParentId(p3);
												boolean v12 = v10.isDeviceLocked(v11);
												if (v12 == 0) {
													if (1 == 0) {
														boolean v13 = this.mLockPatternUtils.tryUnlockWithCachedUnifiedChallenge(p3);
														if (1 != 0) {
															if (1 == 0) {
																if (1 == 0) {
																	p0.showConfirmCredentialToDisableQuietMode(p3, p4);
																	Binder.restoreCallingIdentity(v8);
																	return 0;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
