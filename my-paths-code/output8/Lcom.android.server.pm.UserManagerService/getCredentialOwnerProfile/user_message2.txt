The method getCredentialOwnerProfile in the following class Lcom.android.server.pm.UserManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public int getCredentialOwnerProfile(int p1){
	boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);
	if (v2 != 0) {
		Object v5 = this.mUsers.get(p1);
		if (v5 == 0) {
			if (UserInfo.partial == 0) {
				boolean v6 = this.mRemovingUserIds.get(p1);
				if (v6 != 0) {
					if (v5 == 0) {
						UserInfo v4 = 0;
						if (v4 != 0) {
							if (UserInfo.profileGroupId == p1) {
								if (UserInfo.profileGroupId != -10000) {
									Object v8 = this.mUsers.get(UserInfo.profileGroupId);
									if (v8 == 0) {
										if (UserInfo.partial == 0) {
											boolean v9 = this.mRemovingUserIds.get(UserInfo.profileGroupId);
											if (v9 != 0) {
												if (v8 == 0) {
													UserInfo v7 = 0;
													UserInfo v3 = v7;
													if (v3 == 0) {
														return UserInfo.id;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getCredentialOwnerProfile(int p1){
	boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);
	if (v2 != 0) {
		UserInfo v4 = UserManagerService.getUserInfoLU(p1);
		if (v4 != 0) {
			if (UserInfo.profileGroupId == p1) {
				if (UserInfo.profileGroupId != -10000) {
					UserInfo v5 = UserManagerService.getUserInfoLU(UserInfo.profileGroupId);
					UserInfo v3 = v5;
					if (v3 == 0) {
						return UserInfo.id;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int getCredentialOwnerProfile(int p1){
	boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);
	if (v2 != 0) {
		UserInfo v3 = p0.getProfileParentLU(p1);
		if (v3 == 0) {
			return UserInfo.id;
		}
	}
}

and the following sink code:
['boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);\nUserInfo v4 = UserManagerService.getUserInfoLU(p1);\nreturn UserInfo.id;', 'boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);\nUserInfo v3 = p0.getProfileParentLU(p1);\nreturn UserInfo.id;', 'boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);\nObject v5 = this.mUsers.get(p1);\nreturn UserInfo.id;']

The method getCredentialOwnerProfile has the following similar APIs:

- API Name: getSeparateProfileChallengeEnabled(I)Z in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7886613011360168, Code:
boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
return v2;
  - Similarity: 0.7863753437995911, Code:
boolean v3 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
boolean v2 = v3;
return v2;
  - Similarity: 0.7511122226715088, Code:
String v4 = LockSettingsStorage.getString("lockscreen.profilechallenge", 0, p1);
boolean v5 = TextUtils.isEmpty(v4);
if (v5 == 0) {
boolean v3 = 0;
boolean v2 = v3;
return v2;
  - Access Control Level: DANGEROUS

- API Name: getProfileParentId(I)I in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.782570481300354, Code:
UserInfo v5 = this.this$0.getProfileParentLU(p1);
if (v4 != 0) { int v2 = p1; return v2; }
  - Access Control Level: SYS_OR_SIG

- API Name: getProfileParent(I)Landroid/content/pm/UserInfo; in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.775322675704956, Code:
UserInfo v2 = p0.getProfileParentLU(p1);
return v2;
  - Access Control Level: SYS_OR_SIG

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; in the following Class: Lcom.android.server.locksettings.LockSettingsService with the following sink code entries:
  - Similarity: 0.7668914794921875, Code:
boolean v2 = p0.isProfileWithUnifiedLock(p2);
VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
  - Access Control Level: DANGEROUS

- API Name: unlockUserKey(II[B)V in the following Class: Lcom.android.server.StorageManagerService with the following sink code entries:
  - Similarity: 0.7646678686141968, Code:
boolean v14 = this.mLockPatternUtils.isSecure(p1);
String v16 = p0.encodeBytes(p3);
this.mVold.unlockUserKey(p1, p2, v16);
this.mLocalUnlockedUsers.append(p1);
  - Access Control Level: SYS_OR_SIG

