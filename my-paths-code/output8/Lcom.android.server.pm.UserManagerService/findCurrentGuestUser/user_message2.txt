The method findCurrentGuestUser has the following code snippet:

This is path 1 for the API with depth 1:
public UserInfo findCurrentGuestUser(){
	int v2 = this.mUsers.size();
	if (0 >= v2) {
		Object v3 = this.mUsers.valueAt(0);
		boolean v5 = UserManager.isUserTypeGuest(this.userType);
		boolean v4 = v5;
		if (v4 == 0) {
			if (UserInfo.guestToRemove != 0) {
				if (UserInfo.preCreated != 0) {
					boolean v6 = this.mRemovingUserIds.get(UserInfo.id);
					if (v6 != 0) {
						if ((0 + 1) >= v2) {
							Object v7 = this.mUsers.valueAt((0 + 1));
							boolean v9 = UserManager.isUserTypeGuest(this.userType);
							boolean v8 = v9;
							if (v8 == 0) {
								if (UserInfo.guestToRemove != 0) {
									if (UserInfo.preCreated != 0) {
										boolean v10 = this.mRemovingUserIds.get(UserInfo.id);
										if (v10 != 0) {
											return UserManagerService$UserData.info;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public UserInfo findCurrentGuestUser(){
	int v2 = this.mUsers.size();
	if (0 >= v2) {
		Object v3 = this.mUsers.valueAt(0);
		boolean v4 = UserManagerService$UserData.info.isGuest();
		if (v4 == 0) {
			if (UserInfo.guestToRemove != 0) {
				if (UserInfo.preCreated != 0) {
					boolean v5 = this.mRemovingUserIds.get(UserInfo.id);
					if (v5 != 0) {
						if ((0 + 1) >= v2) {
							Object v6 = this.mUsers.valueAt((0 + 1));
							boolean v7 = UserManagerService$UserData.info.isGuest();
							if (v7 == 0) {
								if (UserInfo.guestToRemove != 0) {
									if (UserInfo.preCreated != 0) {
										boolean v8 = this.mRemovingUserIds.get(UserInfo.id);
										if (v8 != 0) {
											return UserManagerService$UserData.info;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public UserInfo findCurrentGuestUser(){
	int v2 = this.mUsers.size();
	if (0 >= v2) {
		Object v3 = this.mUsers.valueAt(0);
		boolean v4 = UserManagerService$UserData.info.isGuest();
		if (v4 == 0) {
			if (UserInfo.guestToRemove != 0) {
				if (UserInfo.preCreated != 0) {
					boolean v5 = this.mRemovingUserIds.get(UserInfo.id);
					if (v5 != 0) {
						if ((0 + 1) >= v2) {
							return 0;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v2 = this.mUsers.size();\nObject v3 = this.mUsers.valueAt(0);\nboolean v4 = UserManagerService$UserData.info.isGuest();\nif (v4 == 0) {\nreturn UserManagerService$UserData.info;', 'int v2 = this.mUsers.size();\nObject v3 = this.mUsers.valueAt(0);\nboolean v5 = this.mRemovingUserIds.get(UserInfo.id);\nif (v5 != 0) {\nreturn UserManagerService$UserData.info;', 'int v2 = this.mUsers.size();\nObject v3 = this.mUsers.valueAt(0);\nboolean v5 = this.mRemovingUserIds.get(UserInfo.id);\nif (v5 != 0) {\nreturn 0;']

The method findCurrentGuestUser has the following similar APIs:

- API Name: getPrimaryUser()Landroid/content/pm/UserInfo; with Similarity Score: 0.9643723964691162
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = this.mUsers.size();
if (0 >= v2) {
Object v3 = this.mUsers.valueAt(0);
boolean v4 = UserManagerService$UserData.info.isPrimary();
boolean v5 = this.mRemovingUserIds.get(UserInfo.id);
return UserManagerService$UserData.info;

- API Name: getPrimaryUser()Landroid/content/pm/UserInfo; with Similarity Score: 0.9151161313056946
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = this.mUsers.size();
if (0 >= v2) {
Object v3 = this.mUsers.valueAt(0);
boolean v4 = UserManagerService$UserData.info.isPrimary();
boolean v5 = this.mRemovingUserIds.get(UserInfo.id);
return UserManagerService$UserData.info;

