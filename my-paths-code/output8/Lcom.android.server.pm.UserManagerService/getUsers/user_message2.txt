The method getUsers has the following code snippet:

This is path 1 for the API with depth 2:
public List getUsers(boolean p1, boolean p2, boolean p3){
	ArrayList v3 = new ArrayList(v4);
	int v4 = this.mUsers.size();
	int v6 = this.mUsers.size();
	if (0 >= v6) {
		Object v7 = this.mUsers.valueAt(0);
		if (p1 == 0) {
			if (UserInfo.partial != 0) {
				if (p2 == 0) {
					boolean v8 = this.mRemovingUserIds.get(UserInfo.id);
					if (v8 != 0) {
						if (p3 == 0) {
							if (UserInfo.preCreated == 0) {
								if (UserManagerService$UserData.info == 0) {
									if (UserInfo.name != 0) {
										if (UserInfo.id != 0) {
											boolean v10 = UserManagerService$UserData.info.isGuest();
											if (v10 == 0) {
												String v11 = UserManagerService.getGuestName();
												if (getOwnerName() == 0) {
													UserInfo v12 = new UserInfo(UserManagerService$UserData.info);
													UserInfo.name = getOwnerName();
													UserInfo v9 = v12;
													boolean v14 = v3.add(v9);
													if ((0 + 1) >= v6) {
														List v2 = v3;
														return v2;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public List getUsers(boolean p1, boolean p2, boolean p3){
	ArrayList v3 = new ArrayList(v4);
	int v4 = this.mUsers.size();
	int v6 = this.mUsers.size();
	if (0 >= v6) {
		Object v7 = this.mUsers.valueAt(0);
		if (p1 == 0) {
			if (UserInfo.partial != 0) {
				if (p2 == 0) {
					boolean v8 = this.mRemovingUserIds.get(UserInfo.id);
					if (v8 != 0) {
						if (p3 == 0) {
							if (UserInfo.preCreated == 0) {
								UserInfo v9 = UserManagerService.userWithName(UserManagerService$UserData.info);
								boolean v10 = v3.add(v9);
								if ((0 + 1) >= v6) {
									List v2 = v3;
									return v2;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public List getUsers(boolean p1, boolean p2, boolean p3){
	List v2 = p0.getUsersInternal(p1, p2, p3);
	return v2;
}

and the following sink code:
['ArrayList v3 = new ArrayList(v4);\nint v4 = this.mUsers.size();\nUserInfo v12 = new UserInfo(UserManagerService$UserData.info);\nboolean v14 = v3.add(v9);\nList v2 = v3; return v2;', 'ArrayList v3 = new ArrayList(v4);\nint v4 = this.mUsers.size();\nUserInfo v9 = UserManagerService.userWithName(UserManagerService$UserData.info);\nboolean v10 = v3.add(v9);\nList v2 = v3; return v2;', 'List v2 = p0.getUsersInternal(p1, p2, p3); return v2;']

The method getUsers has the following similar APIs:

- API Name: findCurrentGuestUser()Landroid/content/pm/UserInfo; with Similarity Score: 0.8513094186782837
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = this.mUsers.size();
Object v3 = this.mUsers.valueAt(0);
boolean v5 = this.mRemovingUserIds.get(UserInfo.id);
if (v5 != 0) {
return UserManagerService$UserData.info;

- API Name: getPrimaryUser()Landroid/content/pm/UserInfo; with Similarity Score: 0.850418210029602
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = this.mUsers.size();
if (0 >= v2) {
Object v3 = this.mUsers.valueAt(0);
boolean v4 = UserManagerService$UserData.info.isPrimary();
boolean v5 = this.mRemovingUserIds.get(UserInfo.id);
return UserManagerService$UserData.info;

