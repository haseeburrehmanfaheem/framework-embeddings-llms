This is path 1 for the API with depth 2:
public int getRemainingCreatableProfileCount(String p1, int p2){
	Object v3 = this.mUserTypes.get(p1);
	if (v3 == 0) {
		boolean v4 = this.mEnabled;
		if (v4 != 0) {
			boolean v6 = UserManager.isUserTypeManagedProfile(this.mName);
			boolean v5 = v6;
			if (v5 == 0) {
				PackageManager v7 = this.mContext.getPackageManager();
				boolean v8 = v7.hasSystemFeature("android.software.managed_users");
				if (v8 != 0) {
					Object v10 = this.mUsers.get(p2);
					if (v10 == 0) {
						if (UserInfo.partial == 0) {
							boolean v11 = this.mRemovingUserIds.get(p2);
							if (v11 != 0) {
								if (v10 == 0) {
									UserInfo v9 = 0;
									if (v9 == 0) {
										boolean v13 = UserInfo.isProfile();
										if (v13 != 0) {
											boolean v14 = UserInfo.isGuest();
											if (v14 != 0) {
												boolean v15 = UserInfo.isRestricted();
												if (v15 == 0) {
													boolean v12 = 0;
													if (v12 != 0) {
														StringBuilder v18 = new StringBuilder();
														StringBuilder v20 = v18.append("getting profiles related to user ");
														StringBuilder v21 = v18.append(p2);
														String v22 = v18.toString();
														long v24 = Binder.clearCallingIdentity();
														IntArray v25 = UserManagerService.getProfileIdsLU(p2, p1, 0);
														[I v26 = v25.toArray();
														Binder.restoreCallingIdentity(v24);
														[I v16 = v26;
														if (v16.length <= 0) {
															if (0 == 0) {
																int v29 = this.mUsers.size();
																if (0 >= v29) {
																	Object v30 = this.mUsers.valueAt(0);
																	boolean v31 = this.mRemovingUserIds.get(UserInfo.id);
																	if (v31 != 0) {
																		boolean v32 = UserManagerService$UserData.info.isGuest();
																		if (v32 != 0) {
																			if (UserInfo.preCreated != 0) {
																				if ((0 + 1) >= v29) {
																					int v28 = 0;
																					int v33 = UserManager.getMaxSupportedUsers();
																					if ((v33 - (v28 - 1)) > 0) {
																						if (v5 == 0) {
																							if ((v28 - 1) != 1) {
																								int v35 = v3.getMaxAllowedPerParent();
																								if (Build.IS_DEBUGGABLE != 0) {
																									boolean v36 = v3.isManagedProfile();
																									if (v36 == 0) {
																										int v37 = SystemProperties.getInt("persist.sys.max_profiles", v35);
																										int v34 = v37;
																										if (v34 == -1) {
																											int v38 = Math.min(1, (v34 - (v16.length - 1)));
																											if (1 > 0) {
																												int v39 = this.mMaxAllowed;
																												if (v39 == -1) {
																													int v40 = Math.max(0, 1);
																													int v1 = v40;
																													return v1;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getRemainingCreatableProfileCount(String p1, int p2){
	Object v3 = this.mUserTypes.get(p1);
	if (v3 == 0) {
		boolean v4 = v3.isEnabled();
		if (v4 != 0) {
			boolean v5 = v3.isManagedProfile();
			if (v5 == 0) {
				PackageManager v6 = this.mContext.getPackageManager();
				boolean v7 = v6.hasSystemFeature("android.software.managed_users");
				if (v7 != 0) {
					UserInfo v8 = UserManagerService.getUserInfoLU(p2);
					if (v8 == 0) {
						boolean v9 = v8.canHaveProfile();
						if (v9 != 0) {
							[I v10 = UserManagerService.getProfileIds(p2, p1, 0);
							if (v10.length <= 0) {
								if (0 == 0) {
									int v11 = UserManagerService.getAliveUsersExcludingGuestsCountLU();
									int v12 = UserManager.getMaxSupportedUsers();
									if ((v12 - (v11 - 1)) > 0) {
										if (v5 == 0) {
											if ((v11 - 1) != 1) {
												int v13 = UserManagerService.getMaxUsersOfTypePerParent(v3);
												if (v13 == -1) {
													int v14 = Math.min(1, (v13 - (v10.length - 1)));
													if (1 > 0) {
														int v15 = v3.getMaxAllowed();
														if (v15 == -1) {
															int v16 = Math.max(0, 1);
															int v1 = v16;
															return v1;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int getRemainingCreatableProfileCount(String p1, int p2){
	int v1 = p0.getRemainingCreatableProfileCount(p1, p2, 0);
	return v1;
}
