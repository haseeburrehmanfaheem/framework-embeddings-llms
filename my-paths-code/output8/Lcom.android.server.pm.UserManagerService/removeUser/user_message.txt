This is path 1 for the API with depth 2:
public boolean removeUser(int p1){
	Object v10 = this.mUsers.get(p1);
	if (v10 == 0) {
		if (UserInfo.partial == 0) {
			boolean v11 = this.mRemovingUserIds.get(p1);
			if (v11 != 0) {
				if (v10 == 0) {
					UserInfo v9 = 0;
					if (v9 == 0) {
						boolean v13 = UserManager.isUserTypeManagedProfile(this.userType);
						boolean v12 = v13;
						if (v12 == 0) {
							if (1 == 0) {
								String v8 = "no_remove_managed_profile";
								int v14 = UserHandle.getCallingUserId();
								Bundle v18 = this.mCachedEffectiveUserRestrictions.getRestrictions(v14);
								if (v18 != 0) {
									Bundle v19 = UserManagerService.computeEffectiveUserRestrictionsLR(v14);
									boolean v20 = this.mCachedEffectiveUserRestrictions.updateRestrictions(v14, v19);
									Bundle v17 = v18;
									Bundle v22 = new Bundle(v17);
									if (v17 == 0) {
										Bundle v21 = v22;
										Bundle v15 = v21;
										boolean v24 = v15.getBoolean(v8, 0);
										if (v24 == 0) {
											Object v28 = this.mUsers.get(p1);
											if (p1 != 0) {
												if (v28 != 0) {
													boolean v29 = this.mRemovingUserIds.get(p1);
													if (v29 == 0) {
														this.mRemovingUserIds.put(p1, 1);
														Integer v38 = Integer.valueOf(p1);
														boolean v39 = this.mRecentlyRemovedIds.add(v38);
														int v40 = this.mRecentlyRemovedIds.size();
														if (v40 <= 100) {
															Object v41 = this.mRecentlyRemovedIds.removeFirst();
															UserInfo.partial = 1;
															UserInfo.flags = (UserInfo.flags | 64);
															AtomicFile v43 = new AtomicFile(v44);
															File v44 = new File(this.mUsersDir,v49);
															StringBuilder v45 = new StringBuilder();
															StringBuilder v47 = v45.append(UserInfo.id);
															StringBuilder v48 = v45.append(".xml");
															String v49 = v45.toString();
															FileOutputStream v52 = v43.startWrite();
															UserManagerService.writeUserLP(v28, v52);
															v43.finishWrite(v52);
															long v56 = UserManagerService.logUserJourneyBegin(6, p1, UserInfo.userType, UserInfo.flags);
															long v55 = v56;
															this.mAppOpsService.removeUser(p1);
															if (UserInfo.profileGroupId == -10000) {
																boolean v59 = UserManager.isUserTypeManagedProfile(this.userType);
																boolean v58 = v59;
																if (v58 == 0) {
																	IActivityManager v60 = ActivityManager.getService();
																	UserManagerService$6 v61 = new UserManagerService$6(UserManagerService,v55);
																	int v63 = v60.stopUser(p1, 1, v61);
																	if (v63 != 0) {
																		Binder.restoreCallingIdentity(v26);
																		boolean v25 = 0;
																		return v25;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean removeUser(int p1){
	UserInfo v9 = UserManagerService.getUserInfoLU(p1);
	if (v9 == 0) {
		boolean v10 = v9.isManagedProfile();
		if (v10 == 0) {
			if (1 == 0) {
				String v8 = "no_remove_managed_profile";
				int v11 = UserHandle.getCallingUserId();
				Bundle v14 = UserManagerService.getEffectiveUserRestrictions(v11);
				Bundle v15 = BundleUtils.clone(v14);
				Bundle v12 = v15;
				boolean v16 = v12.getBoolean(v8, 0);
				if (v16 == 0) {
					Object v20 = this.mUsers.get(p1);
					if (p1 != 0) {
						if (v20 != 0) {
							boolean v21 = this.mRemovingUserIds.get(p1);
							if (v21 == 0) {
								UserManagerService.addRemovingUserIdLocked(p1);
								UserInfo.partial = 1;
								UserInfo.flags = (UserInfo.flags | 64);
								UserManagerService.writeUserLP(v20);
								long v30 = UserManagerService.logUserRemoveJourneyBegin(p1, UserInfo.userType, UserInfo.flags);
								this.mAppOpsService.removeUser(p1);
								if (UserInfo.profileGroupId == -10000) {
									boolean v32 = UserManagerService$UserData.info.isManagedProfile();
									if (v32 == 0) {
										IActivityManager v33 = ActivityManager.getService();
										UserManagerService$6 v34 = new UserManagerService$6(UserManagerService,v30);
										int v36 = v33.stopUser(p1, 1, v34);
										if (v36 != 0) {
											Binder.restoreCallingIdentity(v18);
											boolean v17 = 0;
											return v17;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean removeUser(int p1){
	String v8 = p0.getUserRemovalRestriction(p1);
	int v9 = UserHandle.getCallingUserId();
	Bundle v10 = p0.getUserRestrictions(v9);
	boolean v11 = v10.getBoolean(v8, 0);
	if (v11 == 0) {
		boolean v12 = p0.removeUserUnchecked(p1);
		return v12;
	}
}
