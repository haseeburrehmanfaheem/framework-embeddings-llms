The method canAddMoreUsersOfType in the following class Lcom.android.server.pm.UserManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public boolean canAddMoreUsersOfType(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v4 = this.mEnabled;
		if (v4 != 0) {
			int v5 = this.mMaxAllowed;
			if (v5 != -1) {
				String v6 = this.mName;
				int v8 = this.mUsers.size();
				if (0 >= v8) {
					Object v9 = this.mUsers.valueAt(0);
					boolean v10 = UserInfo.userType.equals(v6);
					if (v10 == 0) {
						if (UserInfo.guestToRemove != 0) {
							boolean v11 = this.mRemovingUserIds.get(UserInfo.id);
							if (v11 != 0) {
								if (UserInfo.preCreated != 0) {
									if ((0 + 1) >= v8) {
										int v7 = 0;
										if (v7 >= v5) {
											boolean v3 = 0;
											if (v3 == 0) {
												return 1;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean canAddMoreUsersOfType(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v4 = v2.isEnabled();
		if (v4 != 0) {
			int v5 = v2.getMaxAllowed();
			if (v5 != -1) {
				String v6 = v2.getName();
				int v7 = UserManagerService.getNumberOfUsersOfType(v6);
				if (v7 >= v5) {
					boolean v3 = 0;
					if (v3 == 0) {
						return 1;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean canAddMoreUsersOfType(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v3 = p0.canAddMoreUsersOfType(v2);
		if (v3 == 0) {
			return 1;
		}
	}
}

and the following sink code:
['Object v2 = this.mUserTypes.get(p1);\nboolean v4 = v2.isEnabled();\nint v5 = v2.getMaxAllowed();\nString v6 = v2.getName();\nint v7 = UserManagerService.getNumberOfUsersOfType(v6);', 'Object v2 = this.mUserTypes.get(p1);\nif (v2 == 0) {\nboolean v3 = p0.canAddMoreUsersOfType(v2);']

The method canAddMoreUsersOfType has the following similar APIs:

- API Name: getRemainingCreatableUserCount(Ljava/lang/String;)I in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.9046590328216553, Code:
Object v2 = this.mUserTypes.get(p1);
int v5 = this.mUsers.size();
this.mMaxAllowed
return v23;
  - Similarity: 0.8848883509635925, Code:
Object v2 = this.mUserTypes.get(p1);
int v5 = this.mUsers.size();
PackageManager v13 = this.mContext.getPackageManager();
return v19;
  - Similarity: 0.8106488585472107, Code:
Object v2 = this.mUserTypes.get(p1);
int v4 = p0.getAliveUsersExcludingGuestsCountLU();
return v14;
  - Access Control Level: SYS_OR_SIG

- API Name: getRemainingCreatableProfileCount(Ljava/lang/String;I)I in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8783619403839111, Code:
Object v3 = this.mUserTypes.get(p1);
boolean v4 = v3.isEnabled();
if (v4 != 0) {
boolean v5 = v3.isManagedProfile();
PackageManager v6 = this.mContext.getPackageManager();
boolean v7 = v6.hasSystemFeature("android.software.managed_users");
UserInfo v8 = UserManagerService.getUserInfoLU(p2);
boolean v9 = v8.canHaveProfile();
[I v10 = UserManagerService.getProfileIds(p2, p1, 0);
int v11 = UserManagerService.getAliveUsersExcludingGuestsCountLU();
int v12 = UserManager.getMaxSupportedUsers();
if ((v12 - (v11 - 1)) > 0) {
int v13 = UserManagerService.getMaxUsersOfTypePerParent(v3);
int v14 = Math.min(1, (v13 - (v10.length - 1)));
if (1 > 0) {
int v15 = v3.getMaxAllowed();
if (v15 == -1) {
int v16 = Math.max(0, 1);
int v1 = v16;
return v1;
  - Similarity: 0.839391827583313, Code:
Object v3 = this.mUserTypes.get(p1);
boolean v4 = this.mEnabled;
if (v4 != 0) {
boolean v6 = UserManager.isUserTypeManagedProfile(this.mName);
boolean v5 = v6;
PackageManager v7 = this.mContext.getPackageManager();
boolean v8 = v7.hasSystemFeature("android.software.managed_users");
IntArray v25 = UserManagerService.getProfileIdsLU(p2, p1, 0);
int v28 = 0;
int v33 = UserManager.getMaxSupportedUsers();
if ((v33 - (v28 - 1)) > 0) {
int v35 = v3.getMaxAllowedPerParent();
int v37 = SystemProperties.getInt("persist.sys.max_profiles", v35);
int v34 = v37;
if (v34 == -1) {
int v38 = Math.min(1, (v34 - (v16.length - 1)));
if (1 > 0) {
int v39 = this.mMaxAllowed;
if (v39 == -1) {
int v40 = Math.max(0, 1);
int v1 = v40;
return v1;
  - Access Control Level: SYS_OR_SIG

- API Name: isUserTypeEnabled(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.824384868144989, Code:
Object v2 = this.mUserTypes.get(p1);
boolean v3 = this.mEnabled;
if (v3 == 0) {
return 1;
  - Similarity: 0.8181930780410767, Code:
Object v2 = this.mUserTypes.get(p1);
boolean v3 = v2.isEnabled();
if (v3 == 0) {
return 1;
  - Access Control Level: SYS_OR_SIG

- API Name: hasBadge(I)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8205511569976807, Code:
String v3 = UserManagerService.getUserTypeNoChecks(p1);
Object v4 = this.mUserTypes.get(v3);
UserTypeDetails v2 = v4;
  - Access Control Level: SYS_OR_SIG

- API Name: preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo; in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8150786757469177, Code:
Object v1 = this.mUserTypes.get(p1);
int v18 = UserManagerService.getNextAvailableId();
long v27 = UserManagerService.logUserCreateJourneyBegin(v18, p1, v2);
UserInfo v28 = UserManagerService.createUserInternalUncheckedNoTracing(0, p1, v2, -10000, 1, 0, v19, 0);
return v17;
  - Similarity: 0.8140367865562439, Code:
Object v1 = this.mUserTypes.get(p1);
int v22 = UserManagerService.scanNextAvailableIdLocked();
long v34 = UserManagerService.logUserJourneyBegin(4, v21, p1, v2);
UserInfo v49 = UserManagerService.convertPreCreatedUserIfPossible(v37, (v2 | v38), 0, 0);
return v20;
  - Access Control Level: SYS_OR_SIG

