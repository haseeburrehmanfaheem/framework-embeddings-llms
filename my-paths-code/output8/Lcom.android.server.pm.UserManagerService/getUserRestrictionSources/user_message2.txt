The method getUserRestrictionSources in the following class Lcom.android.server.pm.UserManagerService has the following code snippet:

This is path 1 for the API with depth 2:
public List getUserRestrictionSources(String p1, int p2){
	ArrayList v3 = new ArrayList();
	boolean v8 = this.USER_RESTRICTIONS.contains(p1);
	if (v8 != 0) {
		int v9 = Binder.getCallingUid();
		IPackageManager v10 = AppGlobals.getPackageManager();
		String v11 = v10.getPackagesForUid(v9);
		if (0 == 0) {
			if (0.length <= 0) {
				if (0.length <= 1) {
					if (p1 == 0) {
						boolean v21 = UserRestrictionsUtils.isSystemApp(v9, 0);
						if (v21 == 0) {
							boolean v7 = 0;
							if (v7 != 0) {
								Object v25 = this.mUserRestrictions.get(p2);
								Bundle v24 = v25;
								if (v24 == 0) {
									boolean v26 = v24.getBoolean(p1, 0);
									if (v26 == 0) {
										boolean v5 = 0;
										if (v5 == 0) {
											UserManager$EnforcingUser v27 = new UserManager$EnforcingUser(-10000,1);
											boolean v29 = v3.add(v27);
											RestrictionsSet v30 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p2);
											ArrayList v32 = new ArrayList();
											int v34 = this.mUserRestrictions.size();
											if (0 >= v34) {
												Object v35 = this.mUserRestrictions.valueAt(0);
												if (v35 == 0) {
													boolean v37 = v35.getBoolean(p1);
													if (v37 == 0) {
														boolean v36 = 1;
														if (v36 == 0) {
															int v38 = this.mUserRestrictions.keyAt(0);
															if (this.mDeviceOwnerUserId != v38) {
																UserManager$EnforcingUser v40 = new UserManager$EnforcingUser(v38,2);
																UserManager$EnforcingUser v39 = v40;
																boolean v42 = v32.add(v39);
																int v43 = this.mUserRestrictions.size();
																if ((0 + 1) >= v43) {
																	List v31 = v32;
																	boolean v44 = v3.addAll(v31);
																	ArrayList v46 = new ArrayList();
																	int v48 = this.mUserRestrictions.size();
																	if (((0 + 1) + 1) >= v48) {
																		Object v49 = this.mUserRestrictions.valueAt(((0 + 1) + 1));
																		if (v49 == 0) {
																			boolean v51 = v49.getBoolean(p1);
																			if (v51 == 0) {
																				boolean v50 = 1;
																				if (v50 == 0) {
																					int v52 = this.mUserRestrictions.keyAt(((0 + 1) + 1));
																					if (this.mDeviceOwnerUserId != v52) {
																						UserManager$EnforcingUser v54 = new UserManager$EnforcingUser(v52,2);
																						UserManager$EnforcingUser v53 = v54;
																						boolean v56 = v46.add(v53);
																						int v57 = this.mUserRestrictions.size();
																						if ((((0 + 1) + 1) + 1) >= v57) {
																							List v45 = v46;
																							boolean v58 = v3.addAll(v45);
																							return v3;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public List getUserRestrictionSources(String p1, int p2){
	ArrayList v3 = new ArrayList();
	boolean v7 = UserRestrictionsUtils.isValidRestriction(p1);
	if (v7 != 0) {
		Bundle v8 = this.mBaseUserRestrictions.getRestrictions(p2);
		if (v8 == 0) {
			boolean v9 = v8.getBoolean(p1, 0);
			if (v9 == 0) {
				boolean v5 = 0;
				if (v5 == 0) {
					UserManager$EnforcingUser v10 = new UserManager$EnforcingUser(-10000,1);
					boolean v12 = v3.add(v10);
					Object v14 = this.mDevicePolicyLocalUserRestrictions.get(p2);
					if (v14 != 0) {
						RestrictionsSet v15 = new RestrictionsSet();
						this.mDevicePolicyLocalUserRestrictions.put(p2, v15);
						RestrictionsSet v13 = v14;
						ArrayList v19 = new ArrayList();
						int v21 = this.mUserRestrictions.size();
						if (0 >= v21) {
							Object v22 = this.mUserRestrictions.valueAt(0);
							boolean v23 = UserRestrictionsUtils.contains(v22, p1);
							if (v23 == 0) {
								int v24 = this.mUserRestrictions.keyAt(0);
								UserManager$EnforcingUser v25 = RestrictionsSet.getEnforcingUser(v24, this.mDeviceOwnerUserId);
								boolean v26 = v19.add(v25);
								int v27 = this.mUserRestrictions.size();
								if ((0 + 1) >= v27) {
									List v18 = v19;
									boolean v28 = v3.addAll(v18);
									ArrayList v30 = new ArrayList();
									int v32 = this.mUserRestrictions.size();
									if (((0 + 1) + 1) >= v32) {
										Object v33 = this.mUserRestrictions.valueAt(((0 + 1) + 1));
										boolean v34 = UserRestrictionsUtils.contains(v33, p1);
										if (v34 == 0) {
											int v35 = this.mUserRestrictions.keyAt(((0 + 1) + 1));
											UserManager$EnforcingUser v36 = RestrictionsSet.getEnforcingUser(v35, this.mDeviceOwnerUserId);
											boolean v37 = v30.add(v36);
											int v38 = this.mUserRestrictions.size();
											if ((((0 + 1) + 1) + 1) >= v38) {
												List v29 = v30;
												boolean v39 = v3.addAll(v29);
												return v3;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public List getUserRestrictionSources(String p1, int p2){
	List v3 = Collections.emptyList();
	return v3;
}

and the following sink code:
['int v9 = Binder.getCallingUid();\nIPackageManager v10 = AppGlobals.getPackageManager();\nString v11 = v10.getPackagesForUid(v9);\nUserManager$EnforcingUser v27 = new UserManager$EnforcingUser(-10000,1);\nboolean v29 = v3.add(v27);', 'Bundle v8 = this.mBaseUserRestrictions.getRestrictions(p2);\nUserManager$EnforcingUser v10 = new UserManager$EnforcingUser(-10000,1);\nboolean v12 = v3.add(v10);']

The method getUserRestrictionSources has the following similar APIs:

- API Name: hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8767939805984497, Code:
boolean v2 = this.USER_RESTRICTIONS.contains(p1);
int v3 = Binder.getCallingUid();
IPackageManager v4 = AppGlobals.getPackageManager();
String v5 = v4.getPackagesForUid(v3);
Bundle v22 = v23;
boolean v26 = v22.getBoolean(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: hasUserRestriction(Ljava/lang/String;I)Z in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8766813278198242, Code:
Bundle v4 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2);
boolean v5 = v4.getBoolean(p1);
  - Similarity: 0.8603198528289795, Code:
Bundle v21 = this.this$0.getEffectiveUserRestrictions(p2);
Bundle v20 = v21;
boolean v22 = v20.getBoolean(p1);
  - Access Control Level: SYS_OR_SIG

- API Name: setUserRestriction(Ljava/lang/String;ZI)V in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8568875789642334, Code:
int v4 = Binder.getCallingUid();
IPackageManager v5 = AppGlobals.getPackageManager();
String v6 = v5.getPackagesForUid(v4);
boolean v16 = UserRestrictionsUtils.isSystemApp(v4, 0);
Object v20 = this.mUserRestrictions.get(p3);
Bundle v19 = v20;
Bundle v22 = new Bundle(v19);
v21.putBoolean(p1, p2);
  - Similarity: 0.8513084650039673, Code:
boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3);
Bundle v4 = BundleUtils.clone(v3);
v4.putBoolean(p1, p2);
p0.updateUserRestrictionsInternalLR(v4, p3);
  - Access Control Level: SYS_OR_SIG

- API Name: getUserRestrictions(I)Landroid/os/Bundle; in the following Class: Lcom.android.server.pm.UserManagerService with the following sink code entries:
  - Similarity: 0.8528924584388733, Code:
Bundle v2 = p0.getEffectiveUserRestrictions(p1);
Bundle v3 = BundleUtils.clone(v2);
return v3;
  - Similarity: 0.8498786687850952, Code:
Bundle v3 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
Bundle v4 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
boolean v5 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v4);
Bundle v7 = new Bundle(v2);
return v6;
  - Access Control Level: SYS_OR_SIG

- API Name: editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V in the following Class: Lcom.android.server.accounts.AccountManagerService with the following sink code entries:
  - Similarity: 0.8437724113464355, Code:
int v1 = Binder.getCallingUid();
List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);
AccountManagerService$16 v31 = new AccountManagerService$16(p0,v29,p1,p2,p3,1,0,0,p2);
  - Access Control Level: SYS_OR_SIG

