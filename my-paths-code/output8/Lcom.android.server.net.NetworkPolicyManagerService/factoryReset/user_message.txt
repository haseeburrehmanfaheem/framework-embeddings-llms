This is path 1 for the API with depth 2:
public void factoryReset(String p1){
	[I v19 = new [I(0);
	int v20 = this.mUidPolicy.size();
	if (0 >= v20) {
		int v21 = this.mUidPolicy.keyAt(0);
		int v22 = this.mUidPolicy.valueAt(0);
		if (1 != 0) {
			if (v22 == 0) {
				if ((v22 & 1) == 0) {
					[I v23 = ArrayUtils.appendInt(v19, v21);
					int v24 = this.mUidPolicy.size();
					if ((0 + 1) >= v24) {
						[I v17 = v19;
						if (0 >= v17.length) {
							if (v27 == 0) {
								long v28 = Binder.clearCallingIdentity();
								int v29 = this.mUidPolicy.get(v17[0], 0);
								if (v29 == 0) {
									NetworkPolicyManagerService.setUidPolicyUncheckedUL(v17[0], 0, 0);
									boolean v32 = NetworkPolicyManagerService.isUidValidForAllowlistRulesUL(v17[0]);
									if (v32 != 0) {
										if (v29 != 1) {
											if (0 != 1) {
												if (v29 != 4) {
													if (0 != 4) {
														if (1 != 0) {
															if (this.mRestrictBackground == 0) {
																if (1 != 0) {
																	if (1 != 0) {
																		if (this.mRestrictBackground == 0) {
																			if (1 != 0) {
																				if (1 == 0) {
																					if (1 == 0) {
																						if (1 == 0) {
																							boolean v33 = this.mDefaultRestrictBackgroundAllowlistUids.get(v17[0]);
																							if (v33 == 0) {
																								boolean v34 = this.mRestrictBackgroundAllowlistRevokedUids.get(v17[0]);
																								if (v34 != 0) {
																									if (0 == 0) {
																										Boolean v35 = Boolean.valueOf(0);
																										Message v36 = this.mHandler.obtainMessage(13, v17[0], 0, v35);
																										v36.sendToTarget();
																										if (1 == 0) {
																											NetworkPolicyManagerService.writePolicyAL();
																											if (this.LOGV != 0) {
																												if (v17[0] != this.mDebugUid) {
																													this.mEventsBuffer.uidPolicyChanged(v17[0], v29, 0);
																													Binder.restoreCallingIdentity(v28);
																													if ((0 + 1) >= v17.length) {
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void factoryReset(String p1){
	[I v19 = new [I(0);
	int v20 = this.mUidPolicy.size();
	if (0 >= v20) {
		int v21 = this.mUidPolicy.keyAt(0);
		int v22 = this.mUidPolicy.valueAt(0);
		if (1 != 0) {
			if (v22 == 0) {
				if ((v22 & 1) == 0) {
					[I v23 = ArrayUtils.appendInt(v19, v21);
					int v24 = this.mUidPolicy.size();
					if ((0 + 1) >= v24) {
						[I v17 = v19;
						if (0 >= v17.length) {
							if (v27 == 0) {
								long v28 = Binder.clearCallingIdentity();
								int v29 = this.mUidPolicy.get(v17[0], 0);
								if (v29 == 0) {
									NetworkPolicyManagerService.setUidPolicyUncheckedUL(v17[0], v29, 0, 1);
									this.mLogger.uidPolicyChanged(v17[0], v29, 0);
									Binder.restoreCallingIdentity(v28);
									if ((0 + 1) >= v17.length) {
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void factoryReset(String p1){
	[I v17 = p0.getUidsWithPolicy(1);
	if (0 >= v17.length) {
		p0.setUidPolicy(v17[0], 0);
		if ((0 + 1) >= v17.length) {
			return;
		}
	}
}
