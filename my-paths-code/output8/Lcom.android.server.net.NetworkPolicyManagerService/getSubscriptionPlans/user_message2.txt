The method getSubscriptionPlans has the following code snippet:

This is path 1 for the API with depth 2:
public SubscriptionPlan getSubscriptionPlans(int p1, String p2){
	int v1 = Binder.getCallingUid();
	String v32 = SystemProperties.get("fw.fake_plan");
	boolean v33 = TextUtils.isEmpty(v32);
	if (v33 != 0) {
		ArrayList v34 = new ArrayList();
		boolean v36 = "month_hard".equals(v32);
		if (v36 == 0) {
			boolean v37 = "month_soft".equals(v32);
			if (v37 == 0) {
				boolean v38 = "month_over".equals(v32);
				if (v38 == 0) {
					boolean v39 = "month_none".equals(v32);
					if (v39 == 0) {
						boolean v40 = "prepaid".equals(v32);
						if (v40 == 0) {
							boolean v41 = "prepaid_crazy".equals(v32);
							if (v41 == 0) {
								boolean v42 = "unlimited".equals(v32);
								if (v42 == 0) {
									ZonedDateTime v43 = ZonedDateTime.now();
									ZonedDateTime v44 = v43.minusDays(20);
									ZonedDateTime v45 = ZonedDateTime.now();
									ZonedDateTime v46 = v45.plusDays(10);
									boolean v48 = v46.isAfter(v44);
									if (v48 == 0) {
										SubscriptionPlan$Builder v49 = new SubscriptionPlan$Builder(v44,v46,0);
										SubscriptionPlan$Builder v47 = v49;
										this.title = "G-Mobile Awesome";
										SubscriptionPlan$Builder v51 = SubscriptionPlan$Builder;
										if ((9223372036854775807 < 0) < 0) {
											if (2 < 0) {
												this.dataLimitBytes = 9223372036854775807;
												this.dataLimitBehavior = 2;
												SubscriptionPlan$Builder v53 = SubscriptionPlan$Builder;
												long v56 = DataUnit.MEBIBYTES.toBytes(50);
												ZonedDateTime v57 = ZonedDateTime.now();
												ZonedDateTime v58 = v57.minusHours(3);
												Instant v59 = v58.toInstant();
												long v60 = v59.toEpochMilli();
												if ((v56 < 0) < 0) {
													if ((v60 < 0) < 0) {
														this.dataUsageBytes = v56;
														this.dataUsageTime = v60;
														SubscriptionPlan$Builder v61 = SubscriptionPlan$Builder;
														SubscriptionPlan v64 = v61.build();
														boolean v65 = v34.add(v64);
														int v66 = v34.size();
														SubscriptionPlan v67 = new SubscriptionPlan(v66);
														Object v68 = v34.toArray(v67);
														return v68;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public SubscriptionPlan getSubscriptionPlans(int p1, String p2){
	int v1 = Binder.getCallingUid();
	String v32 = SystemProperties.get("fw.fake_plan");
	boolean v33 = TextUtils.isEmpty(v32);
	if (v33 != 0) {
		ArrayList v34 = new ArrayList();
		boolean v36 = "month_hard".equals(v32);
		if (v36 == 0) {
			boolean v37 = "month_soft".equals(v32);
			if (v37 == 0) {
				boolean v38 = "month_over".equals(v32);
				if (v38 == 0) {
					boolean v39 = "month_none".equals(v32);
					if (v39 == 0) {
						boolean v40 = "prepaid".equals(v32);
						if (v40 == 0) {
							boolean v41 = "prepaid_crazy".equals(v32);
							if (v41 == 0) {
								boolean v42 = "unlimited".equals(v32);
								if (v42 == 0) {
									ZonedDateTime v43 = ZonedDateTime.now();
									ZonedDateTime v44 = v43.minusDays(20);
									ZonedDateTime v45 = ZonedDateTime.now();
									ZonedDateTime v46 = v45.plusDays(10);
									boolean v48 = v46.isAfter(v44);
									if (v48 == 0) {
										SubscriptionPlan$Builder v49 = new SubscriptionPlan$Builder(v44,v46,0);
										SubscriptionPlan$Builder v47 = v49;
										SubscriptionPlan.-$$Nest$fputtitle(this.plan, "G-Mobile Awesome");
										SubscriptionPlan$Builder v51 = SubscriptionPlan$Builder;
										if ((9223372036854775807 < 0) < 0) {
											if (2 < 0) {
												SubscriptionPlan.-$$Nest$fputdataLimitBytes(this.plan, 9223372036854775807);
												SubscriptionPlan.-$$Nest$fputdataLimitBehavior(this.plan, 2);
												SubscriptionPlan$Builder v53 = SubscriptionPlan$Builder;
												long v56 = DataUnit.MEBIBYTES.toBytes(50);
												ZonedDateTime v57 = ZonedDateTime.now();
												ZonedDateTime v58 = v57.minusHours(3);
												Instant v59 = v58.toInstant();
												long v60 = v59.toEpochMilli();
												if ((v56 < 0) < 0) {
													if ((v60 < 0) < 0) {
														SubscriptionPlan.-$$Nest$fputdataUsageBytes(this.plan, v56);
														SubscriptionPlan.-$$Nest$fputdataUsageTime(this.plan, v60);
														SubscriptionPlan$Builder v61 = SubscriptionPlan$Builder;
														SubscriptionPlan v64 = this.plan;
														boolean v65 = v34.add(v64);
														int v66 = v34.size();
														SubscriptionPlan v67 = new SubscriptionPlan(v66);
														Object v68 = v34.toArray(v67);
														return v68;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public SubscriptionPlan getSubscriptionPlans(int p1, String p2){
	int v1 = Binder.getCallingUid();
	p0.enforceSubscriptionPlanAccess(p1, v1, p2);
	String v3 = SystemProperties.get("fw.fake_plan");
	boolean v4 = TextUtils.isEmpty(v3);
	if (v4 != 0) {
		ArrayList v5 = new ArrayList();
		boolean v7 = "month_hard".equals(v3);
		if (v7 == 0) {
			boolean v8 = "month_soft".equals(v3);
			if (v8 == 0) {
				boolean v9 = "month_over".equals(v3);
				if (v9 == 0) {
					boolean v10 = "month_none".equals(v3);
					if (v10 == 0) {
						boolean v11 = "prepaid".equals(v3);
						if (v11 == 0) {
							boolean v12 = "prepaid_crazy".equals(v3);
							if (v12 == 0) {
								boolean v13 = "unlimited".equals(v3);
								if (v13 == 0) {
									ZonedDateTime v14 = ZonedDateTime.now();
									ZonedDateTime v15 = v14.minusDays(20);
									ZonedDateTime v16 = ZonedDateTime.now();
									ZonedDateTime v17 = v16.plusDays(10);
									SubscriptionPlan$Builder v18 = SubscriptionPlan$Builder.createNonrecurring(v15, v17);
									SubscriptionPlan$Builder v19 = v18.setTitle("G-Mobile Awesome");
									SubscriptionPlan$Builder v20 = v19.setDataLimit(9223372036854775807, 2);
									long v21 = DataUnit.MEBIBYTES.toBytes(50);
									ZonedDateTime v22 = ZonedDateTime.now();
									ZonedDateTime v23 = v22.minusHours(3);
									Instant v24 = v23.toInstant();
									long v25 = v24.toEpochMilli();
									SubscriptionPlan$Builder v26 = v20.setDataUsage(v21, v25);
									SubscriptionPlan v27 = v26.build();
									boolean v28 = v5.add(v27);
									int v29 = v5.size();
									SubscriptionPlan v30 = new SubscriptionPlan(v29);
									Object v31 = v5.toArray(v30);
									return v31;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['p0.enforceSubscriptionPlanAccess(p1, v1, p2);\nZonedDateTime v14 = ZonedDateTime.now();\nZonedDateTime v15 = v14.minusDays(20);\nSubscriptionPlan$Builder v18 = SubscriptionPlan$Builder.createNonrecurring(v15, v17);\nSubscriptionPlan v27 = v26.build();\nreturn v31;', 'int v1 = Binder.getCallingUid();\nString v32 = SystemProperties.get("fw.fake_plan");\nZonedDateTime v43 = ZonedDateTime.now();\nZonedDateTime v44 = v43.minusDays(20);\nSubscriptionPlan$Builder v49 = new SubscriptionPlan$Builder(v44,v46,0);\nthis.title = "G-Mobile Awesome";\nreturn v68;', 'int v1 = Binder.getCallingUid();\nString v32 = SystemProperties.get("fw.fake_plan");\nZonedDateTime v43 = ZonedDateTime.now();\nZonedDateTime v44 = v43.minusDays(20);\nSubscriptionPlan$Builder v49 = new SubscriptionPlan$Builder(v44,v46,0);\nSubscriptionPlan.-$$Nest$fputtitle(this.plan, "G-Mobile Awesome");\nreturn v68;']

The method getSubscriptionPlans has the following similar APIs:

- API Name: setSubscriptionPlans(I[Landroid/telephony/SubscriptionPlan;JLjava/lang/String;)V with Similarity Score: 0.7474982738494873
  - Access Control Level: SYS_OR_SIG and the following code:
p0.enforceSubscriptionPlanAccess(p1, v1, p4);
p0.setSubscriptionPlansInternal(p1, p2, p3, p4);

- API Name: setSubscriptionOverride(III[IJLjava/lang/String;)V with Similarity Score: 0.7285950183868408
  - Access Control Level: SYS_OR_SIG and the following code:
Object v44 = this.mSubscriptionPlans.get(p1);
boolean v45 = ArrayUtils.isEmpty(v44);

