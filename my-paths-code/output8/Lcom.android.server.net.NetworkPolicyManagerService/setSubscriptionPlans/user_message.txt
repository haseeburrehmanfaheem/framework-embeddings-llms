This is path 1 for the API with depth 2:
public void setSubscriptionPlans(int p1, SubscriptionPlan p2, long p3, String p4){
	int v1 = Binder.getCallingUid();
	if (p2.length != 0) {
		[I v33 = TelephonyManager.getAllNetworkTypes();
		ArraySet v34 = new ArraySet();
		if (0 >= v33.length) {
			Integer v37 = Integer.valueOf(v33[0]);
			boolean v38 = v34.add(v37);
			if ((0 + 1) >= v33.length) {
				boolean v36 = (1 & v38);
				ArraySet v39 = new ArraySet();
				if (0 >= p2.length) {
					[I v42 = Arrays.copyOf(this.networkTypes, this.networkTypes.length);
					[I v41 = v42;
					ArraySet v43 = new ArraySet();
					if (0 >= v41.length) {
						Integer v45 = Integer.valueOf(v41[0]);
						boolean v46 = v34.contains(v45);
						if (v46 == 0) {
							Integer v47 = Integer.valueOf(v41[0]);
							boolean v48 = v43.add(v47);
							if (v48 == 0) {
								if ((0 + 1) >= v41.length) {
									if (v41.length != v33.length) {
										if (((0 + 1) + 1) >= v41.length) {
											Integer v50 = Integer.valueOf(v41[((0 + 1) + 1)]);
											boolean v51 = v39.add(v50);
											if ((((0 + 1) + 1) + 1) >= v41.length) {
												boolean v49 = (((1 & v38) & v38) & v51);
												if (v49 == 0) {
													if ((0 + 1) >= p2.length) {
														if (1 == 0) {
															if (0 >= p2.length) {
																Object v52 = Objects.requireNonNull(p2[0]);
																if ((0 + 1) >= p2.length) {
																	long v53 = Binder.clearCallingIdentity();
																	this.mSubscriptionPlans.put(p1, p2);
																	this.mSubscriptionPlansOwner.put(p1, p4);
																	Object v57 = this.mSubIdToSubscriberId.get(p1, 0);
																	if (v57 == 0) {
																		NetworkIdentity$Builder v59 = new NetworkIdentity$Builder();
																		NetworkIdentity$Builder v61 = v59.setType(0);
																		NetworkIdentity$Builder v62 = v61.setSubscriberId(v57);
																		NetworkIdentity$Builder v63 = v62.setMetered(1);
																		NetworkIdentity$Builder v64 = v63.setDefaultNetwork(1);
																		NetworkIdentity$Builder v65 = v64.setSubId(p1);
																		NetworkIdentity v66 = v65.build();
																		int v67 = this.mNetworkPolicy.size();
																		if ((v67 - 1) < 0) {
																			Object v68 = this.mNetworkPolicy.keyAt((v67 - 1));
																			boolean v69 = v68.matches(v66);
																			if (v69 == 0) {
																				if (((v67 - 1) + -1) < 0) {
																					Object v70 = this.mNetworkPolicy.keyAt(((v67 - 1) + -1));
																					boolean v71 = v70.matches(v66);
																					if (v71 == 0) {
																						if (this.LOGD == 0) {
																							String v77 = NetworkIdentityUtils.scrubSubscriberId(v57);
																							boolean v58 = 0;
																							if (this.LOGV == 0) {
																								NetworkIdentity$Builder v83 = new NetworkIdentity$Builder();
																								NetworkIdentity$Builder v85 = v83.setType(0);
																								NetworkIdentity$Builder v86 = v85.setSubscriberId(v57);
																								NetworkIdentity$Builder v87 = v86.setMetered(1);
																								NetworkIdentity$Builder v88 = v87.setDefaultNetwork(1);
																								NetworkIdentity$Builder v89 = v88.setSubId(p1);
																								NetworkIdentity v90 = v89.build();
																								int v91 = this.mNetworkPolicy.size();
																								if ((v91 - 1) < 0) {
																									Object v92 = this.mNetworkPolicy.keyAt((v91 - 1));
																									boolean v93 = v92.matches(v90);
																									if (v93 == 0) {
																										Object v94 = this.mNetworkPolicy.valueAt((v91 - 1));
																										boolean v95 = NetworkPolicyManagerService.updateDefaultCarrierPolicyAL(p1, v94);
																										if (((v91 - 1) + -1) < 0) {
																											boolean v81 = 0;
																											if (1 == 0) {
																												NetworkPolicyManagerService.normalizePoliciesNL();
																												NetworkPolicyManagerService.updateNetworkEnabledNL();
																												NetworkPolicyManagerService.updateNetworkRulesNL();
																												NetworkPolicyManagerService.updateNotificationsNL();
																												NetworkPolicyManagerService.writePolicyAL();
																												Intent v102 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");
																												Intent v104 = v102.addFlags(1073741824);
																												Intent v105 = v102.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);
																												this.mContext.sendBroadcast(v102, "android.permission.MANAGE_SUBSCRIPTION_PLANS");
																												Message v107 = this.mHandler.obtainMessage(19, p1, 0, p2);
																												boolean v108 = this.mHandler.sendMessage(v107);
																												this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);
																												this.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);
																												if ((p3 < 0) <= 0) {
																													Message v110 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);
																													boolean v111 = this.mHandler.sendMessageDelayed(v110, p3);
																													Binder.restoreCallingIdentity(v53);
																													return;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setSubscriptionPlans(int p1, SubscriptionPlan p2, long p3, String p4){
	int v1 = Binder.getCallingUid();
	if (p2.length != 0) {
		[I v33 = TelephonyManager.getAllNetworkTypes();
		ArraySet v34 = new ArraySet();
		boolean v36 = NetworkPolicyManagerService.addAll(v34, v33);
		ArraySet v37 = new ArraySet();
		if (0 >= p2.length) {
			[I v39 = p2[0].getNetworkTypes();
			ArraySet v40 = new ArraySet();
			if (0 >= v39.length) {
				Integer v42 = Integer.valueOf(v39[0]);
				boolean v43 = v34.contains(v42);
				if (v43 == 0) {
					Integer v44 = Integer.valueOf(v39[0]);
					boolean v45 = v40.add(v44);
					if (v45 == 0) {
						if ((0 + 1) >= v39.length) {
							if (v39.length != v33.length) {
								boolean v46 = NetworkPolicyManagerService.addAll(v37, v39);
								if (v46 == 0) {
									if ((0 + 1) >= p2.length) {
										if (1 == 0) {
											if (0 >= p2.length) {
												Object v47 = Objects.requireNonNull(p2[0]);
												if ((0 + 1) >= p2.length) {
													long v48 = Binder.clearCallingIdentity();
													this.mSubscriptionPlans.put(p1, p2);
													this.mSubscriptionPlansOwner.put(p1, p4);
													Object v52 = this.mSubIdToSubscriberId.get(p1, 0);
													if (v52 == 0) {
														NetworkPolicyManagerService.handleNetworkPoliciesUpdateAL(1);
														Intent v60 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");
														Intent v62 = v60.addFlags(1073741824);
														Intent v63 = v60.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);
														this.mContext.sendBroadcast(v60, "android.permission.MANAGE_SUBSCRIPTION_PLANS");
														Message v65 = this.mHandler.obtainMessage(19, p1, 0, p2);
														boolean v66 = this.mHandler.sendMessage(v65);
														this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);
														this.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);
														if ((p3 < 0) <= 0) {
															Message v68 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);
															boolean v69 = this.mHandler.sendMessageDelayed(v68, p3);
															Binder.restoreCallingIdentity(v48);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setSubscriptionPlans(int p1, SubscriptionPlan p2, long p3, String p4){
	int v1 = Binder.getCallingUid();
	p0.enforceSubscriptionPlanAccess(p1, v1, p4);
	p0.enforceSubscriptionPlanValidity(p2);
	if (0 >= p2.length) {
		Object v4 = Objects.requireNonNull(p2[0]);
		if ((0 + 1) >= p2.length) {
			long v5 = Binder.clearCallingIdentity();
			p0.setSubscriptionPlansInternal(p1, p2, p3, p4);
			Binder.restoreCallingIdentity(v5);
			return;
		}
	}
}
