The method setRestrictBackground has the following code snippet:

This is path 1 for the API with depth 2:
public void setRestrictBackground(boolean p1){
	int v3 = Binder.getCallingUid();
	long v4 = Binder.clearCallingIdentity();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("uid:");
	StringBuilder v8 = v5.append(v3);
	String v9 = v5.toString();
	Trace.traceBegin(2097152, "setRestrictBackgroundUL");
	if (p1 != this.mRestrictBackground) {
		this.mRestrictBackground = p1;
		Trace.traceBegin(2097152, "updateRulesForRestrictBackgroundUL");
		NetworkPolicyManagerService$$ExternalSyntheticLambda5 v22 = new NetworkPolicyManagerService$$ExternalSyntheticLambda5(NetworkPolicyManagerService);
		NetworkPolicyManagerService.forEachUid("updateRulesForRestrictBackground", v22);
		Trace.traceEnd(2097152);
		boolean v26 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground);
		if (v26 != 0) {
			this.mHandler.removeMessages(6);
			Message v29 = this.mHandler.obtainMessage(6, this.mRestrictBackground, 0);
			v29.sendToTarget();
			if (this.LOGD != 0) {
				if (this.mDebugUid == -1) {
					this.mEventsBuffer.restrictBackgroundChanged(this.mRestrictBackground, this.mRestrictBackground);
					if (this.mRestrictBackgroundLowPowerMode == 0) {
						this.mRestrictBackgroundChangedInBsm = 1;
						if (this.LOGV == 0) {
							Trace.traceBegin(2097152, "updateNotificationsNL");
							ArraySet v38 = new ArraySet(this.mActiveNotifs);
							this.mActiveNotifs.clear();
							long v41 = this.mClock.millis();
							int v42 = this.mNetworkPolicy.size();
							if ((v42 - 1) < 0) {
								Object v43 = this.mNetworkPolicy.valueAt((v42 - 1));
								int v44 = NetworkPolicyManagerService.findRelevantSubIdNL(NetworkPolicy.template);
								if (v44 != -1) {
									if (((v42 - 1) + -1) < 0) {
										int v45 = v38.size();
										if ((v45 - 1) < 0) {
											Object v46 = v38.valueAt((v45 - 1));
											boolean v47 = this.mActiveNotifs.contains(v46);
											if (v47 != 0) {
												NetworkPolicyManagerService.cancelNotification(v46);
												if (((v45 - 1) + -1) < 0) {
													Trace.traceEnd(2097152);
													if (this.LOGV == 0) {
														FileOutputStream v52 = this.mPolicyFile.startWrite();
														TypedXmlSerializer v53 = Xml.resolveSerializer(v52);
														if (0 == 0) {
															this.mPolicyFile.failWrite(0);
															Trace.traceEnd(2097152);
															Binder.restoreCallingIdentity(v4);
															Trace.traceEnd(2097152);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setRestrictBackground(boolean p1){
	int v3 = Binder.getCallingUid();
	long v4 = Binder.clearCallingIdentity();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("uid:");
	StringBuilder v8 = v5.append(v3);
	String v9 = v5.toString();
	Trace.traceBegin(2097152, "setRestrictBackgroundUL");
	if (p1 != this.mRestrictBackground) {
		this.mRestrictBackground = p1;
		NetworkPolicyManagerService.updateRulesForRestrictBackgroundUL();
		boolean v21 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground);
		if (v21 != 0) {
			NetworkPolicyManagerService.sendRestrictBackgroundChangedMsg();
			this.mLogger.restrictBackgroundChanged(this.mRestrictBackground, this.mRestrictBackground);
			if (this.mRestrictBackgroundLowPowerMode == 0) {
				this.mRestrictBackgroundChangedInBsm = 1;
				NetworkPolicyManagerService.updateNotificationsNL();
				NetworkPolicyManagerService.writePolicyAL();
				Trace.traceEnd(2097152);
				Binder.restoreCallingIdentity(v4);
				Trace.traceEnd(2097152);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setRestrictBackground(boolean p1){
	int v3 = Binder.getCallingUid();
	long v4 = Binder.clearCallingIdentity();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("uid:");
	StringBuilder v8 = v5.append(v3);
	String v9 = v5.toString();
	p0.setRestrictBackgroundUL(p1, v9);
	Binder.restoreCallingIdentity(v4);
	Trace.traceEnd(2097152);
	return;
}

and the following sink code:
['int v3 = Binder.getCallingUid();\nlong v4 = Binder.clearCallingIdentity();\nthis.mRestrictBackground = p1;\nNetworkPolicyManagerService.forEachUid("updateRulesForRestrictBackground", v22);\nboolean v26 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground);', 'NetworkPolicyManagerService.updateRulesForRestrictBackgroundUL();\nboolean v21 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground);\nNetworkPolicyManagerService.sendRestrictBackgroundChangedMsg();', 'p0.setRestrictBackgroundUL(p1, v9);']

The method setRestrictBackground has the following similar APIs:

- API Name: getRestrictBackgroundStatus(I)I with Similarity Score: 0.7553452849388123
  - Access Control Level: NORMAL and the following code:
int v2 = p0.getRestrictBackgroundStatusInternal(p1);
return v2;

- API Name: setUidPolicy(II)V with Similarity Score: 0.7500399351119995
  - Access Control Level: SYS_OR_SIG and the following code:
NetworkPolicyManagerService.setUidPolicyUncheckedUL(p1, p2, 0);
boolean v8 = this.mDefaultRestrictBackgroundAllowlistUids.get(p1);
Boolean v10 = Boolean.valueOf(0);
Message v11 = this.mHandler.obtainMessage(13, p1, p2, v10);
v11.sendToTarget();

