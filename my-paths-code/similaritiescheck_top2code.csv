EP1_ID,EP2_ID,EP1_Code,EP2_Code,Similarity
getUserInfo(I)Landroid/content/pm/UserInfo;,No similar EPs with similarity > 0.8,,,
getUserBadgeResId(I)I,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9809373021125793
getUserBadgeResId(I)I,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9789021015167236
isUserSwitcherEnabled(I)Z,No similar EPs with similarity > 0.8,,,
getProfiles(IZ)Ljava/util/List;,isUserNameSet(I)Z,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9693561792373657
getProfiles(IZ)Ljava/util/List;,getUserName()Ljava/lang/String;,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9693561792373657
getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,getUserRestrictionSource(Ljava/lang/String;I)I,"boolean v4 = p0.hasBaseUserRestriction(p1, p2); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2); boolean v4 = v3.getBoolean(p1, 0); return phiInstruction;","List v1 = p0.getUserRestrictionSources(p1, p2); int v2 = v1.size(); return phiInstruction;",0.8156574368476868
getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,setUserRestriction(Ljava/lang/String;ZI)V,"boolean v4 = p0.hasBaseUserRestriction(p1, p2); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2); boolean v4 = v3.getBoolean(p1, 0); return phiInstruction;","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8140348196029663
isDemoUser(I)Z,isUserForeground(I)Z,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9631252884864807
isDemoUser(I)Z,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.946996808052063
removeUserEvenWhenDisallowed(I)Z,removeUser(I)Z,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v2 = p0.removeUserUnchecked(p1); return v2;","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();",0.9173704981803894
removeUserEvenWhenDisallowed(I)Z,markGuestForDeletion(I)Z,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v2 = p0.removeUserUnchecked(p1); return v2;","UserManagerService.checkManageUsersPermission(""Only the system can remove users""); int v2 = UserHandle.getCallingUserId(); Bundle v3 = p0.getUserRestrictions(v2); boolean v4 = v3.getBoolean(""no_remove_user"", 0);",0.8576700687408447
requestQuietModeEnabled(Ljava/lang/String;ZILandroid/content/IntentSender;I)Z,isQuietModeEnabled(I)Z,"p0.setQuietModeEnabled(p3, 1, p4, p1); UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getProfileParentLU(p1); boolean v3 = v1.isManagedProfile(); boolean v4 = v1.isQuietModeEnabled(); UserInfo.flags = (UserInfo.flags ^ 128);",UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,0.8151953816413879
canHaveRestrictedProfile(I)Z,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
canHaveRestrictedProfile(I)Z,getSeedAccountType(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
isSettingRestrictedForUser(Ljava/lang/String;ILjava/lang/String;I)Z,No similar EPs with similarity > 0.8,,,
getSeedAccountOptions(I)Landroid/os/PersistableBundle;,No similar EPs with similarity > 0.8,,,
addUserRestrictionsListener(Landroid/os/IUserRestrictionsListener;)V,No similar EPs with similarity > 0.8,,,
getUserUnlockRealtime()J,getUserStartRealtime()J,UserManagerService$UserData v3 = p0.getUserDataLU(v2); return UserManagerService$UserData.unlockRealtime;,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,0.8146394491195679
someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkManageUsersPermission(""check seed account information""); boolean v2 = p0.someUserHasSeedAccountNoChecks(p1, p2);",0.8596875667572021
someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8549307584762573
getUserRestrictions(I)Landroid/os/Bundle;,setUserRestriction(Ljava/lang/String;ZI)V,"Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1); Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2); boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);",0.9443613290786743
getUserRestrictions(I)Landroid/os/Bundle;,removeUserWhenPossible(IZ)I,"Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8934767246246338
isRestricted(I)Z,No similar EPs with similarity > 0.8,,,
hasBadge(I)Z,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.8754937648773193
hasBadge(I)Z,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8701645135879517
hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,setUserRestriction(Ljava/lang/String;ZI)V,boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8591769933700562
hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,hasBaseUserRestriction(Ljava/lang/String;I)Z,boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,"UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);",0.8404284715652466
isUserRunning(I)Z,isUserUnlocked(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserRunning(I)Z,isUserUnlockingOrUnlocked(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
getProfileIds(IZ)[I,No similar EPs with similarity > 0.8,,,
isUserForeground(I)Z,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9686480760574341
isUserForeground(I)Z,isDemoUser(I)Z,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9631252884864807
isUserOfType(ILjava/lang/String;)Z,getProfiles(IZ)Ljava/util/List;,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9341824650764465
isUserOfType(ILjava/lang/String;)Z,isUserNameSet(I)Z,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9047053456306458
isUserTypeEnabled(Ljava/lang/String;)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.932373583316803
isUserTypeEnabled(Ljava/lang/String;)Z,isUserOfType(ILjava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8412986993789673
setApplicationRestrictions(Ljava/lang/String;Landroid/os/Bundle;I)V,getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,"UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3); File v1 = Environment.getUserSystemDirectory(p3); String v2 = UserManagerService.packageToRestrictionsFileName(p1); UserManagerService.writeApplicationRestrictionsLAr(p2, v0);","Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);",0.8589118719100952
setApplicationRestrictions(Ljava/lang/String;Landroid/os/Bundle;I)V,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,"UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3); File v1 = Environment.getUserSystemDirectory(p3); String v2 = UserManagerService.packageToRestrictionsFileName(p1); UserManagerService.writeApplicationRestrictionsLAr(p2, v0);",File v1 = Environment.getUserSystemDirectory(p2); String v2 = UserManagerService.packageToRestrictionsFileName(p1); AtomicFile v0 = new AtomicFile(v0); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0); return v5;,0.8454561829566956
getProfileParent(I)Landroid/content/pm/UserInfo;,getCredentialOwnerProfile(I)I,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,0.9353470206260681
getProfileParent(I)Landroid/content/pm/UserInfo;,getUserCreationTime(I)J,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,0.9229633808135986
preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;","UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);",0.8273171782493591
preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,getRemainingCreatableUserCount(Ljava/lang/String;)I,"Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;","Object v2 = this.mUserTypes.get(p1); boolean v3 = v2.isEnabled(); int v10 = v2.getMaxAllowed(); int v12 = p0.getNumberOfUsersOfType(p1); int v13 = Math.min(phiInstruction, phiInstruction); int v14 = Math.max(0, v13); return v14;",0.810904860496521
removeUser(I)Z,removeUserWhenPossible(IZ)I,String v7 = p0.getUserRemovalRestriction(p1); UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile();,String v2 = p0.getUserRemovalRestriction(p1); UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile();,0.9889239072799683
removeUser(I)Z,removeUserEvenWhenDisallowed(I)Z,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v2 = p0.removeUserUnchecked(p1); return v2;",0.9173704981803894
setUserEphemeral(IZ)Z,No similar EPs with similarity > 0.8,,,
hasRestrictedProfiles(I)Z,No similar EPs with similarity > 0.8,,,
markGuestForDeletion(I)Z,removeUser(I)Z,"UserManagerService.checkManageUsersPermission(""Only the system can remove users""); int v2 = UserHandle.getCallingUserId(); Bundle v3 = p0.getUserRestrictions(v2); boolean v4 = v3.getBoolean(""no_remove_user"", 0);","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();",0.8626486659049988
markGuestForDeletion(I)Z,removeUserEvenWhenDisallowed(I)Z,"UserManagerService.checkManageUsersPermission(""Only the system can remove users""); int v2 = UserHandle.getCallingUserId(); Bundle v3 = p0.getUserRestrictions(v2); boolean v4 = v3.getBoolean(""no_remove_user"", 0);","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v2 = p0.removeUserUnchecked(p1); return v2;",0.8576700687408447
setUserAdmin(I)V,setUserEnabled(I)V,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.isAdmin(); UserInfo.flags = (UserInfo.flags ^ 2); UserManagerService$UserData v4 = p0.getUserDataLU(UserInfo.id); p0.writeUserLP(v4);,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.isEnabled(); UserInfo.flags = (UserInfo.flags ^ 64); UserManagerService$UserData v4 = p0.getUserDataLU(UserInfo.id); p0.writeUserLP(v4);,0.9844028949737549
setUserAdmin(I)V,setUserAccount(ILjava/lang/String;)V,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user account"");",0.8861690759658813
isUserNameSet(I)Z,getUserName()Ljava/lang/String;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",1.0
isUserNameSet(I)Z,getProfiles(IZ)Ljava/util/List;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9693561792373657
hasUserRestriction(Ljava/lang/String;I)Z,getUserRestrictions(I)Landroid/os/Bundle;,"Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);",Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,0.8607409000396729
hasUserRestriction(Ljava/lang/String;I)Z,removeUserWhenPossible(IZ)I,"Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8400041460990906
setUserRestriction(Ljava/lang/String;ZI)V,getUserRestrictions(I)Landroid/os/Bundle;,"boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1); Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2); boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);","Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.9443613290786743
setUserRestriction(Ljava/lang/String;ZI)V,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.910153329372406
getProfileParentId(I)I,No similar EPs with similarity > 0.8,,,
isUserUnlocked(I)Z,isUserRunning(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserUnlocked(I)Z,isUserUnlockingOrUnlocked(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,setUserRestriction(Ljava/lang/String;ZI)V,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.910153329372406
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,removeUserWhenPossible(IZ)I,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8586581349372864
getUserName()Ljava/lang/String;,isUserNameSet(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",1.0
getUserName()Ljava/lang/String;,getProfiles(IZ)Ljava/util/List;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9693561792373657
isSameProfileGroup(II)Z,getUserSerialNumber(I)I,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,0.8879214525222778
isSameProfileGroup(II)Z,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,0.8641630411148071
getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,"Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);",File v1 = Environment.getUserSystemDirectory(p2); String v2 = UserManagerService.packageToRestrictionsFileName(p1); AtomicFile v0 = new AtomicFile(v0); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0); return v5;,0.9336578249931335
getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,"Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);","Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1); StringBuilder v4 = new StringBuilder(); StringBuilder v6 = v4.append(""get application restrictions for other user/app ""); StringBuilder v7 = v4.append(p1); String v8 = v4.toString(); UserManagerService.checkSystemOrRoot(v8); Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); return v10;",0.863210916519165
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;","UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",0.962058424949646
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;","UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7); return v9;",0.9201406240463257
getUserStartRealtime()J,getUserAccount(I)Ljava/lang/String;,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,Object v2 = this.mUsers.get(p1); return UserManagerService$UserData.account;,0.8352342844009399
getUserStartRealtime()J,getUserUnlockRealtime()J,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,UserManagerService$UserData v3 = p0.getUserDataLU(v2); return UserManagerService$UserData.unlockRealtime;,0.8146394491195679
getUserRestrictionSource(Ljava/lang/String;I)I,getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,"List v1 = p0.getUserRestrictionSources(p1, p2); int v2 = v1.size(); return phiInstruction;","boolean v4 = p0.hasBaseUserRestriction(p1, p2); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2); boolean v4 = v3.getBoolean(p1, 0); return phiInstruction;",0.8156574368476868
getUserRestrictionSource(Ljava/lang/String;I)I,getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,"ArrayList v2 = new ArrayList(); UserManager$EnforcingUser v4 = new UserManager$EnforcingUser(-10000,1); boolean v6 = v2.add(v4);","ArrayList v2 = new ArrayList(); boolean v6 = v2.add(v4); List v8 = v7.getEnforcingUsers(p1, this.mDeviceOwnerUserId); boolean v9 = v2.addAll(v8); return v2;",0.8120923042297363
isUserUnlockingOrUnlocked(I)Z,isUserRunning(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserUnlockingOrUnlocked(I)Z,isUserUnlocked(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
setUserName(ILjava/lang/String;)V,canHaveRestrictedProfile(I)Z,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.906494140625
setUserName(ILjava/lang/String;)V,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.906494140625
isCredentialSharableWithParent(I)Z,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.8213932514190674
isCredentialSharableWithParent(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8159065246582031
getUserBadgeColorResId(I)I,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.989261269569397
getUserBadgeColorResId(I)I,getUserBadgeDarkColorResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,0.9825477600097656
isPreCreated(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.968237042427063
isPreCreated(I)Z,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.9619094729423523
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,isUserForeground(I)Z,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9686480760574341
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,isDemoUser(I)Z,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.946996808052063
getUserCreationTime(I)J,getCredentialOwnerProfile(I)I,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,0.9532679319381714
getUserCreationTime(I)J,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,0.9229633808135986
getPrimaryUser()Landroid/content/pm/UserInfo;,findCurrentGuestUser()Landroid/content/pm/UserInfo;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isPrimary(); return UserManagerService$UserData.info;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isGuest(); boolean v5 = this.mRemovingUserIds.get(UserInfo.id); return UserManagerService$UserData.info;,0.9065591096878052
getUserIconBadgeResId(I)I,getUserBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,0.9664064645767212
getUserIconBadgeResId(I)I,getUserBadgeNoBackgroundResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,0.9389290809631348
isMediaSharedWithParent(I)Z,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.9313556551933289
isMediaSharedWithParent(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.925527811050415
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,canHaveRestrictedProfile(I)Z,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.9501102566719055
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,isQuietModeEnabled(I)Z,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,0.8871009349822998
evictCredentialEncryptionKey(I)V,No similar EPs with similarity > 0.8,,,
removeUserWhenPossible(IZ)I,removeUser(I)Z,String v2 = p0.getUserRemovalRestriction(p1); UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile();,String v7 = p0.getUserRemovalRestriction(p1); UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile();,0.9889239072799683
removeUserWhenPossible(IZ)I,getUserRestrictions(I)Landroid/os/Bundle;,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8934767246246338
getSeedAccountName(I)Ljava/lang/String;,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();","UserManagerService.checkManageUsersPermission(""check seed account information""); boolean v2 = p0.someUserHasSeedAccountNoChecks(p1, p2);",0.8523678779602051
getSeedAccountName(I)Ljava/lang/String;,someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();","UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8485433459281921
getRemainingCreatableUserCount(Ljava/lang/String;)I,canAddMoreProfilesToUser(Ljava/lang/String;IZ)Z,"UserManagerService.checkQueryOrCreateUsersPermission(""get the remaining number of users that can be added."");","UserManagerService.checkQueryOrCreateUsersPermission(""get the remaining number of profiles that can be added to the given user.""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();",0.8910335898399353
getRemainingCreatableUserCount(Ljava/lang/String;)I,preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,"Object v2 = this.mUserTypes.get(p1); boolean v3 = v2.isEnabled(); int v10 = v2.getMaxAllowed(); int v12 = p0.getNumberOfUsersOfType(p1); int v13 = Math.min(phiInstruction, phiInstruction); int v14 = Math.max(0, v13); return v14;","Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;",0.810904860496521
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,getSeedAccountType(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
getUserBadgeNoBackgroundResId(I)I,getUserBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,0.9516139626502991
getUserBadgeNoBackgroundResId(I)I,getUserIconBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,0.9389290809631348
getUserAccount(I)Ljava/lang/String;,setUserAccount(ILjava/lang/String;)V,Object v2 = this.mUsers.get(p1); return UserManagerService$UserData.account;,"Object v2 = this.mUsers.get(p1); boolean v3 = Objects.equals(UserManagerService$UserData.account, p2); UserManagerService$UserData.account = p2;",0.9193761348724365
getUserAccount(I)Ljava/lang/String;,getUserStartRealtime()J,Object v2 = this.mUsers.get(p1); return UserManagerService$UserData.account;,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,0.8352342844009399
hasBaseUserRestriction(Ljava/lang/String;I)Z,setUserRestriction(Ljava/lang/String;ZI)V,"UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8520787358283997
hasBaseUserRestriction(Ljava/lang/String;I)Z,hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);",boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,0.8404284715652466
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;","UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;",0.962058424949646
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7); return v9;","UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;",0.9201406240463257
getUserSerialNumber(I)I,isSameProfileGroup(II)Z,UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,0.8879214525222778
getUserSerialNumber(I)I,isUserOfType(ILjava/lang/String;)Z,UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,String v2 = p0.getUserTypeNoChecks(p1); UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1);,0.8100606203079224
canAddMoreUsersOfType(Ljava/lang/String;)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,public void checkCreateUsersPermission(String p1){ boolean v1 = UserManagerService.hasCreateUsersPermission();,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8278248310089111
canAddMoreUsersOfType(Ljava/lang/String;)Z,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,Object v2 = this.mUserTypes.get(p1); boolean v3 = p0.canAddMoreUsersOfType(v2);,Object v2 = this.mUserTypes.get(p1); boolean v3 = v2.isEnabled(); boolean v4 = v2.isManagedProfile();,0.8045931458473206
getUserBadgeDarkColorResId(I)I,getUserBadgeColorResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,0.9825477600097656
getUserBadgeDarkColorResId(I)I,getUserBadgeLabelResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,0.9652432203292847
getUserBadgeLabelResId(I)I,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.989261269569397
getUserBadgeLabelResId(I)I,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.9809373021125793
getCredentialOwnerProfile(I)I,getUserCreationTime(I)J,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,0.9532679319381714
getCredentialOwnerProfile(I)I,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,0.9353470206260681
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,isUserTypeEnabled(Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.932373583316803
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9004337191581726
isQuietModeEnabled(I)Z,canHaveRestrictedProfile(I)Z,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.9079347252845764
isQuietModeEnabled(I)Z,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.8871009349822998
getUsers(ZZZ)Ljava/util/List;,No similar EPs with similarity > 0.8,,,
getSeedAccountType(I)Ljava/lang/String;,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
getSeedAccountType(I)Ljava/lang/String;,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setUserAccount(ILjava/lang/String;)V,getUserAccount(I)Ljava/lang/String;,"Object v2 = this.mUsers.get(p1); boolean v3 = Objects.equals(UserManagerService$UserData.account, p2); UserManagerService$UserData.account = p2;",Object v2 = this.mUsers.get(p1); return UserManagerService$UserData.account;,0.9193761348724365
setUserAccount(ILjava/lang/String;)V,setUserAdmin(I)V,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user account"");","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);",0.8861690759658813
canAddMoreProfilesToUser(Ljava/lang/String;IZ)Z,getRemainingCreatableUserCount(Ljava/lang/String;)I,"UserManagerService.checkQueryOrCreateUsersPermission(""get the remaining number of profiles that can be added to the given user.""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();","UserManagerService.checkQueryOrCreateUsersPermission(""get the remaining number of users that can be added."");",0.8910335898399353
canAddMoreManagedProfiles(IZ)Z,No similar EPs with similarity > 0.8,,,
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,File v1 = Environment.getUserSystemDirectory(p2); String v2 = UserManagerService.packageToRestrictionsFileName(p1); AtomicFile v0 = new AtomicFile(v0); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0); return v5;,"Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);",0.9336578249931335
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,"Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1); StringBuilder v4 = new StringBuilder(); StringBuilder v6 = v4.append(""get application restrictions for other user/app ""); StringBuilder v7 = v4.append(p1); String v8 = v4.toString(); UserManagerService.checkSystemOrRoot(v8); Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); return v10;","Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);",0.863210916519165
getDefaultGuestRestrictions()Landroid/os/Bundle;,No similar EPs with similarity > 0.8,,,
setUserIcon(ILandroid/graphics/Bitmap;)V,No similar EPs with similarity > 0.8,,,
findCurrentGuestUser()Landroid/content/pm/UserInfo;,getPrimaryUser()Landroid/content/pm/UserInfo;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isGuest(); boolean v5 = this.mRemovingUserIds.get(UserInfo.id); return UserManagerService$UserData.info;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isPrimary(); return UserManagerService$UserData.info;,0.9065591096878052
findCurrentGuestUser()Landroid/content/pm/UserInfo;,getUserCreationTime(I)J,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isGuest(); boolean v5 = this.mRemovingUserIds.get(UserInfo.id); return UserManagerService$UserData.info;,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1); return phiInstruction;,0.8199714422225952
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
clearSeedAccountData(I)V,No similar EPs with similarity > 0.8,,,
getProfileType(I)Ljava/lang/String;,isPreCreated(I)Z,"public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8786324262619019
getProfileType(I)Ljava/lang/String;,isUserUnlocked(I)Z,"public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8644905686378479
createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);","Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;",0.8273171782493591
createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);","UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",0.8272992372512817
getUserHandle(I)I,No similar EPs with similarity > 0.8,,,
setUserEnabled(I)V,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setUserEnabled(I)V,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
