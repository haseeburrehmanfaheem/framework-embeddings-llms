The method hasBaseUserRestriction has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean hasBaseUserRestriction(String p1, int p2){
	UserManagerService.checkCreateUsersPermission("hasBaseUserRestriction");
	boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
	boolean v4 = v3.getBoolean(p1, 0);
	return phiInstruction;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public boolean isValidRestriction(String p1){
	boolean v1 = this.USER_RESTRICTIONS.contains(p1);
	int v2 = Binder.getCallingUid();
	IPackageManager v3 = AppGlobals.getPackageManager();
	String v4 = v3.getPackagesForUid(v2);
	StringBuilder v4 = new StringBuilder("Unknown restriction queried by uid ");
	StringBuilder v6 = v4.append(v2);
	StringBuilder v7 = v4.append(" (");
	StringBuilder v8 = v4.append(phiInstruction[0]);
	StringBuilder v9 = v4.append(" et al");
	StringBuilder v10 = v4.append(")");
	StringBuilder v11 = v4.append(": ");
	StringBuilder v12 = v4.append(p1);
	boolean v13 = UserRestrictionsUtils.isSystemApp(v2, phiInstruction);
	String v14 = v4.toString();
	int v15 = Slog.wtf("UserRestrictionsUtils", v14);
	return 0;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public boolean isSystemApp(int p1, String p2){
	IPackageManager v2 = AppGlobals.getPackageManager();
	int v3 = UserHandle.getUserId(p1);
	ApplicationInfo v4 = v2.getApplicationInfo(p2[phiInstruction], 794624, v3);
	boolean v5 = v4.isSystemApp();
	return 1;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean hasBaseUserRestriction(String p1, int p2){
	UserManagerService.checkCreateUsersPermission("hasBaseUserRestriction");
	boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
	boolean v4 = v3.getBoolean(p1, 0);
	return phiInstruction;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public boolean isValidRestriction(String p1){
	boolean v1 = this.USER_RESTRICTIONS.contains(p1);
	int v2 = Binder.getCallingUid();
	IPackageManager v3 = AppGlobals.getPackageManager();
	String v4 = v3.getPackagesForUid(v2);
	StringBuilder v4 = new StringBuilder("Unknown restriction queried by uid ");
	StringBuilder v6 = v4.append(v2);
	StringBuilder v7 = v4.append(" (");
	StringBuilder v8 = v4.append(phiInstruction[0]);
	StringBuilder v9 = v4.append(")");
	StringBuilder v10 = v4.append(": ");
	StringBuilder v11 = v4.append(p1);
	boolean v12 = UserRestrictionsUtils.isSystemApp(v2, phiInstruction);
	String v13 = v4.toString();
	int v14 = Slog.wtf("UserRestrictionsUtils", v13);
	return 0;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public boolean isSystemApp(int p1, String p2){
	IPackageManager v2 = AppGlobals.getPackageManager();
	int v3 = UserHandle.getUserId(p1);
	ApplicationInfo v4 = v2.getApplicationInfo(p2[phiInstruction], 794624, v3);
	boolean v5 = v4.isSystemApp();
	return 1;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean hasBaseUserRestriction(String p1, int p2){
	UserManagerService.checkCreateUsersPermission("hasBaseUserRestriction");
	boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
	return phiInstruction;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public boolean isValidRestriction(String p1){
	boolean v1 = this.USER_RESTRICTIONS.contains(p1);
	int v2 = Binder.getCallingUid();
	IPackageManager v3 = AppGlobals.getPackageManager();
	String v4 = v3.getPackagesForUid(v2);
	StringBuilder v4 = new StringBuilder("Unknown restriction queried by uid ");
	StringBuilder v6 = v4.append(v2);
	StringBuilder v7 = v4.append(" (");
	StringBuilder v8 = v4.append(phiInstruction[0]);
	StringBuilder v9 = v4.append(" et al");
	StringBuilder v10 = v4.append(")");
	StringBuilder v11 = v4.append(": ");
	StringBuilder v12 = v4.append(p1);
	boolean v13 = UserRestrictionsUtils.isSystemApp(v2, phiInstruction);
	String v14 = v4.toString();
	int v15 = Slog.wtf("UserRestrictionsUtils", v14);
	return 0;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public boolean isSystemApp(int p1, String p2){
	IPackageManager v2 = AppGlobals.getPackageManager();
	int v3 = UserHandle.getUserId(p1);
	ApplicationInfo v4 = v2.getApplicationInfo(p2[phiInstruction], 794624, v3);
	boolean v5 = v4.isSystemApp();
	return 1;
}
-----

and the following sink code:
['UserManagerService.checkCreateUsersPermission("hasBaseUserRestriction");\nboolean v2 = UserRestrictionsUtils.isValidRestriction(p1);\nBundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);']

The method hasBaseUserRestriction has the following similar APIs:

- API Name: setUserRestriction(Ljava/lang/String;ZI)V with Similarity Score: 0.8520787358283997
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3);
Bundle v4 = BundleUtils.clone(v3);
v4.putBoolean(p1, p2);
p0.updateUserRestrictionsInternalLR(v4, p3);

- API Name: hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z with Similarity Score: 0.8404284715652466
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v1 = UserRestrictionsUtils.isValidRestriction(p1);
List v2 = p0.getUsers(1);
Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);

