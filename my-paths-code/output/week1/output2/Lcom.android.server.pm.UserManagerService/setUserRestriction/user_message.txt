This is path 1 for the API with depth 2:
depth : 0
public void setUserRestriction(String p1, boolean p2, int p3){
	UserManagerService.checkManageUsersPermission("setUserRestriction");
	boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3);
	Bundle v4 = BundleUtils.clone(v3);
	v4.putBoolean(p1, p2);
	p0.updateUserRestrictionsInternalLR(v4, p3);
	return;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public boolean isValidRestriction(String p1){
	boolean v1 = this.USER_RESTRICTIONS.contains(p1);
	int v2 = Binder.getCallingUid();
	IPackageManager v3 = AppGlobals.getPackageManager();
	String v4 = v3.getPackagesForUid(v2);
	StringBuilder v4 = new StringBuilder("Unknown restriction queried by uid ");
	StringBuilder v6 = v4.append(v2);
	StringBuilder v7 = v4.append(" (");
	StringBuilder v8 = v4.append(phiInstruction[0]);
	StringBuilder v9 = v4.append(" et al");
	StringBuilder v10 = v4.append(")");
	StringBuilder v11 = v4.append(": ");
	StringBuilder v12 = v4.append(p1);
	boolean v13 = UserRestrictionsUtils.isSystemApp(v2, phiInstruction);
	String v14 = v4.toString();
	int v15 = Slog.wtf("UserRestrictionsUtils", v14);
	return 0;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public boolean isSystemApp(int p1, String p2){
	IPackageManager v2 = AppGlobals.getPackageManager();
	int v3 = UserHandle.getUserId(p1);
	ApplicationInfo v4 = v2.getApplicationInfo(p2[phiInstruction], 794624, v3);
	boolean v5 = v4.isSystemApp();
	return 1;
}
-----
depth : 1
public void updateUserRestrictionsInternalLR(Bundle p1, int p2){
	Bundle v1 = this.mAppliedUserRestrictions.getRestrictions(p2);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
	Preconditions.checkState(phiInstruction);
	Bundle v5 = this.mCachedEffectiveUserRestrictions.getRestrictions(p2);
	Preconditions.checkState(phiInstruction);
	boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1);
	UserManagerService$UserData v8 = p0.getUserDataNoChecks(p2);
	p0.scheduleWriteUser(v8);
	Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2);
	boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);
	UserManagerService$3 v11 = new UserManagerService$3(p0,v10,p2);
	boolean v13 = this.mHandler.post(v11);
	p0.propagateUserRestrictionsLR(p2, v10, v2);
	Bundle v14 = new Bundle(v10);
	boolean v16 = this.mAppliedUserRestrictions.updateRestrictions(p2, v14);
	return;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle nonNull(Bundle p1){
	return phiInstruction;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
depth : 2
public UserManagerService$UserData getUserDataNoChecks(int p1){
	Object v1 = this.mUsers.get(p1);
	return v1;
}
-----
depth : 2
public void scheduleWriteUser(UserManagerService$UserData p1){
	boolean v1 = this.mHandler.hasMessages(1, p1);
	Message v2 = this.mHandler.obtainMessage(1, p1);
	boolean v3 = this.mHandler.sendMessageDelayed(v2, 2000);
	return;
}
-----
depth : 2
public Bundle computeEffectiveUserRestrictionsLR(int p1){
	Bundle v1 = this.mBaseUserRestrictions.getRestrictions(p1);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
	RestrictionsSet v4 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
	boolean v5 = BundleUtils.isEmpty(v3);
	boolean v6 = v4.isEmpty();
	return v2;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
depth : 2
public void propagateUserRestrictionsLR(int p1, Bundle p2, Bundle p3){
	boolean v1 = UserRestrictionsUtils.areEqual(p2, p3);
	Bundle v1 = new Bundle(p2);
	Bundle v2 = new Bundle(p3);
	UserManagerService$4 v3 = new UserManagerService$4(p0,p1,v1,v2);
	boolean v5 = this.mHandler.post(v3);
	return;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void setUserRestriction(String p1, boolean p2, int p3){
	UserManagerService.checkManageUsersPermission("setUserRestriction");
	boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3);
	Bundle v4 = BundleUtils.clone(v3);
	v4.putBoolean(p1, p2);
	p0.updateUserRestrictionsInternalLR(v4, p3);
	return;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public boolean isValidRestriction(String p1){
	boolean v1 = this.USER_RESTRICTIONS.contains(p1);
	int v2 = Binder.getCallingUid();
	IPackageManager v3 = AppGlobals.getPackageManager();
	String v4 = v3.getPackagesForUid(v2);
	StringBuilder v4 = new StringBuilder("Unknown restriction queried by uid ");
	StringBuilder v6 = v4.append(v2);
	StringBuilder v7 = v4.append(" (");
	StringBuilder v8 = v4.append(phiInstruction[0]);
	StringBuilder v9 = v4.append(")");
	StringBuilder v10 = v4.append(": ");
	StringBuilder v11 = v4.append(p1);
	boolean v12 = UserRestrictionsUtils.isSystemApp(v2, phiInstruction);
	String v13 = v4.toString();
	int v14 = Slog.wtf("UserRestrictionsUtils", v13);
	return 0;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public boolean isSystemApp(int p1, String p2){
	IPackageManager v2 = AppGlobals.getPackageManager();
	int v3 = UserHandle.getUserId(p1);
	ApplicationInfo v4 = v2.getApplicationInfo(p2[phiInstruction], 794624, v3);
	boolean v5 = v4.isSystemApp();
	return 1;
}
-----
depth : 1
public void updateUserRestrictionsInternalLR(Bundle p1, int p2){
	Bundle v1 = this.mAppliedUserRestrictions.getRestrictions(p2);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
	Preconditions.checkState(phiInstruction);
	Bundle v5 = this.mCachedEffectiveUserRestrictions.getRestrictions(p2);
	Preconditions.checkState(phiInstruction);
	boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1);
	UserManagerService$UserData v8 = p0.getUserDataNoChecks(p2);
	p0.scheduleWriteUser(v8);
	Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2);
	boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);
	UserManagerService$3 v11 = new UserManagerService$3(p0,v10,p2);
	boolean v13 = this.mHandler.post(v11);
	p0.propagateUserRestrictionsLR(p2, v10, v2);
	Bundle v14 = new Bundle(v10);
	boolean v16 = this.mAppliedUserRestrictions.updateRestrictions(p2, v14);
	return;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle nonNull(Bundle p1){
	return phiInstruction;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
depth : 2
public UserManagerService$UserData getUserDataNoChecks(int p1){
	Object v1 = this.mUsers.get(p1);
	return v1;
}
-----
depth : 2
public void scheduleWriteUser(UserManagerService$UserData p1){
	boolean v1 = this.mHandler.hasMessages(1, p1);
	Message v2 = this.mHandler.obtainMessage(1, p1);
	boolean v3 = this.mHandler.sendMessageDelayed(v2, 2000);
	return;
}
-----
depth : 2
public Bundle computeEffectiveUserRestrictionsLR(int p1){
	Bundle v1 = this.mBaseUserRestrictions.getRestrictions(p1);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
	RestrictionsSet v4 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
	boolean v5 = BundleUtils.isEmpty(v3);
	boolean v6 = v4.isEmpty();
	return v2;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
depth : 2
public void propagateUserRestrictionsLR(int p1, Bundle p2, Bundle p3){
	boolean v1 = UserRestrictionsUtils.areEqual(p2, p3);
	Bundle v1 = new Bundle(p2);
	Bundle v2 = new Bundle(p3);
	UserManagerService$4 v3 = new UserManagerService$4(p0,p1,v1,v2);
	boolean v5 = this.mHandler.post(v3);
	return;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void setUserRestriction(String p1, boolean p2, int p3){
	UserManagerService.checkManageUsersPermission("setUserRestriction");
	boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3);
	Bundle v4 = BundleUtils.clone(v3);
	v4.putBoolean(p1, p2);
	p0.updateUserRestrictionsInternalLR(v4, p3);
	return;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public boolean isValidRestriction(String p1){
	boolean v1 = this.USER_RESTRICTIONS.contains(p1);
	int v2 = Binder.getCallingUid();
	IPackageManager v3 = AppGlobals.getPackageManager();
	String v4 = v3.getPackagesForUid(v2);
	StringBuilder v4 = new StringBuilder("Unknown restriction queried by uid ");
	StringBuilder v6 = v4.append(v2);
	StringBuilder v7 = v4.append(" (");
	StringBuilder v8 = v4.append(phiInstruction[0]);
	StringBuilder v9 = v4.append(" et al");
	StringBuilder v10 = v4.append(")");
	StringBuilder v11 = v4.append(": ");
	StringBuilder v12 = v4.append(p1);
	boolean v13 = UserRestrictionsUtils.isSystemApp(v2, phiInstruction);
	String v14 = v4.toString();
	int v15 = Slog.wtf("UserRestrictionsUtils", v14);
	return 0;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public boolean isSystemApp(int p1, String p2){
	IPackageManager v2 = AppGlobals.getPackageManager();
	int v3 = UserHandle.getUserId(p1);
	ApplicationInfo v4 = v2.getApplicationInfo(p2[phiInstruction], 794624, v3);
	boolean v5 = v4.isSystemApp();
	return 1;
}
-----
depth : 1
public void updateUserRestrictionsInternalLR(Bundle p1, int p2){
	Bundle v1 = this.mAppliedUserRestrictions.getRestrictions(p2);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
	Preconditions.checkState(phiInstruction);
	Bundle v5 = this.mCachedEffectiveUserRestrictions.getRestrictions(p2);
	Preconditions.checkState(phiInstruction);
	boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1);
	UserManagerService$UserData v8 = p0.getUserDataNoChecks(p2);
	p0.scheduleWriteUser(v8);
	Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2);
	boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);
	UserManagerService$3 v11 = new UserManagerService$3(p0,v10,p2);
	boolean v13 = this.mHandler.post(v11);
	p0.propagateUserRestrictionsLR(p2, v10, v2);
	Bundle v14 = new Bundle(v10);
	boolean v16 = this.mAppliedUserRestrictions.updateRestrictions(p2, v14);
	return;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle nonNull(Bundle p1){
	Bundle v0 = new Bundle();
	return phiInstruction;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
depth : 2
public UserManagerService$UserData getUserDataNoChecks(int p1){
	Object v1 = this.mUsers.get(p1);
	return v1;
}
-----
depth : 2
public void scheduleWriteUser(UserManagerService$UserData p1){
	boolean v1 = this.mHandler.hasMessages(1, p1);
	Message v2 = this.mHandler.obtainMessage(1, p1);
	boolean v3 = this.mHandler.sendMessageDelayed(v2, 2000);
	return;
}
-----
depth : 2
public Bundle computeEffectiveUserRestrictionsLR(int p1){
	Bundle v1 = this.mBaseUserRestrictions.getRestrictions(p1);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
	RestrictionsSet v4 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
	boolean v5 = BundleUtils.isEmpty(v3);
	boolean v6 = v4.isEmpty();
	return v2;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
depth : 2
public void propagateUserRestrictionsLR(int p1, Bundle p2, Bundle p3){
	boolean v1 = UserRestrictionsUtils.areEqual(p2, p3);
	Bundle v1 = new Bundle(p2);
	Bundle v2 = new Bundle(p3);
	UserManagerService$4 v3 = new UserManagerService$4(p0,p1,v1,v2);
	boolean v5 = this.mHandler.post(v3);
	return;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
