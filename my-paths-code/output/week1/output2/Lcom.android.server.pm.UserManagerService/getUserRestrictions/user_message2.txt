The method getUserRestrictions has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle computeEffectiveUserRestrictionsLR(int p1){
	Bundle v1 = this.mBaseUserRestrictions.getRestrictions(p1);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
	RestrictionsSet v4 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
	boolean v5 = BundleUtils.isEmpty(v3);
	boolean v6 = v4.isEmpty();
	return v2;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle computeEffectiveUserRestrictionsLR(int p1){
	Bundle v1 = this.mBaseUserRestrictions.getRestrictions(p1);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
	RestrictionsSet v4 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
	boolean v5 = BundleUtils.isEmpty(v3);
	boolean v6 = v4.isEmpty();
	Bundle v7 = BundleUtils.clone(v2);
	UserRestrictionsUtils.merge(v7, v3);
	Bundle v9 = v4.mergeAll();
	UserRestrictionsUtils.merge(v7, v9);
	return v7;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle getRestrictions(int p1){
	Object v1 = this.mUserRestrictions.get(p1);
	return v1;
}
-----
depth : 2
public Bundle computeEffectiveUserRestrictionsLR(int p1){
	Bundle v1 = this.mBaseUserRestrictions.getRestrictions(p1);
	Bundle v2 = UserRestrictionsUtils.nonNull(v1);
	Bundle v3 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
	RestrictionsSet v4 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
	boolean v5 = BundleUtils.isEmpty(v3);
	boolean v6 = v4.isEmpty();
	return v2;
}
-----
depth : 2
public boolean updateRestrictions(int p1, Bundle p2){
	Object v1 = this.mUserRestrictions.get(p1);
	boolean v2 = UserRestrictionsUtils.areEqual(v1, p2);
	boolean v3 = BundleUtils.isEmpty(p2);
	this.mUserRestrictions.put(p1, p2);
	return 1;
}
-----

and the following sink code:
['Bundle v2 = p0.getEffectiveUserRestrictions(p1);\nBundle v3 = BundleUtils.clone(v2);\nreturn v3;', 'Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);\nBundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);\nboolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);']

The method getUserRestrictions has the following similar APIs:

- API Name: setUserRestriction(Ljava/lang/String;ZI)V with Similarity Score: 0.9443613290786743
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1);
Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2);
boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);

- API Name: removeUserWhenPossible(IZ)I with Similarity Score: 0.8934767246246338
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v4 = p0.getUserRestrictions(v3);
p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
Bundle v2 = p0.getEffectiveUserRestrictions(p1);
boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);

