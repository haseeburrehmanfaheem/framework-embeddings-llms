The method preCreateUserWithThrow has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public UserInfo preCreateUserWithThrow(String p1){
	Object v1 = this.mUserTypes.get(p1);
	int v2 = v1.getDefaultUserInfoFlags();
	UserManagerService.checkCreateUsersPermission(phiInstruction);
	boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cannot pre-create user of type ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	Preconditions.checkArgument(v4, v8);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("Pre-creating user of type ");
	StringBuilder v12 = v9.append(p1);
	String v13 = v9.toString();
	int v14 = Slog.i("UserManagerService", v13);
	UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0);
	return v15;
}
-----
depth : 1
public int getDefaultUserInfoFlags(){
	return (this.mBaseType | this.mDefaultUserInfoPropertyFlags);
}
-----
depth : 1
public void checkCreateUsersPermission(int p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public boolean isUserTypeEligibleForPreCreation(UserTypeDetails p1){
	boolean v1 = p1.isProfile();
	String v2 = p1.getName();
	boolean v3 = v2.equals("android.os.usertype.full.RESTRICTED");
	return phiInstruction;
}
-----
depth : 2
public boolean isProfile(){
	return phiInstruction;
}
-----
depth : 2
public String getName(){
	return this.mName;
}
-----
depth : 1
public UserInfo createUserInternalUnchecked(String p1, String p2, int p3, int p4, boolean p5, String p6, Object p7){
	int v1 = p0.getNextAvailableId();
	TimingsTraceAndSlog v1 = new TimingsTraceAndSlog();
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append("createUser-");
	StringBuilder v5 = v2.append(p3);
	String v6 = v2.toString();
	v1.traceBegin(v6);
	long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3);
	UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7);
	p0.logUserCreateJourneyFinish(v8, v1, phiInstruction);
	v1.traceEnd();
	return v9;
}
-----
depth : 2
public int getNextAvailableId(){
	int v1 = p0.scanNextAvailableIdLocked();
	int v2 = this.mRemovingUserIds.size();
	int v3 = Slog.i("UserManagerService", "All available IDs are used. Recycling LRU ids.");
	this.mRemovingUserIds.clear();
	Iterator v5 = this.mRecentlyRemovedIds.iterator();
	boolean v6 = v5.hasNext();
	int v7 = p0.scanNextAvailableIdLocked();
	UserManager.invalidateStaticUserProperties();
	return phiInstruction;
}
-----
depth : 2
public void traceBegin(String p1){
	int v1 = Slog.d(this.mTag, p1);
	return;
}
-----
depth : 2
public long logUserCreateJourneyBegin(int p1, String p2, int p3){
	long v1 = p0.logUserJourneyBegin(4, p1, p2, p3);
	return v1;
}
-----
depth : 2
public UserInfo createUserInternalUncheckedNoTracing(String p1, String p2, int p3, int p4, boolean p5, String p6, TimingsTraceAndSlog p7, Object p8){
	Object v1 = this.mUserTypes.get(p2);
	String v2 = p2.intern();
	int v3 = v1.getDefaultUserInfoFlags();
	boolean v4 = UserManagerService.checkUserTypeConsistency((p3 | v3));
	boolean v5 = v1.isEnabled();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Cannot add a user of disabled type ");
	StringBuilder v8 = v5.append(v2);
	StringBuilder v9 = v5.append(".");
	String v10 = v5.toString();
	p0.throwCheckedUserOperationException(v10, 6);
	boolean v12 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);
	return v13;
}
-----
depth : 2
public void logUserCreateJourneyFinish(long p1, int p2, boolean p3){
	FrameworkStatsLog.write(265, p1, p2, 3, phiInstruction);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public UserInfo preCreateUserWithThrow(String p1){
	Object v1 = this.mUserTypes.get(p1);
	int v2 = v1.getDefaultUserInfoFlags();
	UserManagerService.checkCreateUsersPermission(phiInstruction);
	boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cannot pre-create user of type ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	Preconditions.checkArgument(v4, v8);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("Pre-creating user of type ");
	StringBuilder v12 = v9.append(p1);
	String v13 = v9.toString();
	int v14 = Slog.i("UserManagerService", v13);
	UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0);
	return v15;
}
-----
depth : 1
public int getDefaultUserInfoFlags(){
	return (this.mBaseType | this.mDefaultUserInfoPropertyFlags);
}
-----
depth : 1
public void checkCreateUsersPermission(int p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public boolean isUserTypeEligibleForPreCreation(UserTypeDetails p1){
	boolean v1 = p1.isProfile();
	String v2 = p1.getName();
	boolean v3 = v2.equals("android.os.usertype.full.RESTRICTED");
	return phiInstruction;
}
-----
depth : 2
public boolean isProfile(){
	return phiInstruction;
}
-----
depth : 2
public String getName(){
	return this.mName;
}
-----
depth : 1
public UserInfo createUserInternalUnchecked(String p1, String p2, int p3, int p4, boolean p5, String p6, Object p7){
	int v1 = p0.getNextAvailableId();
	TimingsTraceAndSlog v1 = new TimingsTraceAndSlog();
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append("createUser-");
	StringBuilder v5 = v2.append(p3);
	String v6 = v2.toString();
	v1.traceBegin(v6);
	long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3);
	UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7);
	p0.logUserCreateJourneyFinish(v8, v1, phiInstruction);
	v1.traceEnd();
	return v9;
}
-----
depth : 2
public int getNextAvailableId(){
	int v1 = p0.scanNextAvailableIdLocked();
	int v2 = this.mRemovingUserIds.size();
	int v3 = Slog.i("UserManagerService", "All available IDs are used. Recycling LRU ids.");
	this.mRemovingUserIds.clear();
	Iterator v5 = this.mRecentlyRemovedIds.iterator();
	boolean v6 = v5.hasNext();
	int v7 = p0.scanNextAvailableIdLocked();
	UserManager.invalidateStaticUserProperties();
	return phiInstruction;
}
-----
depth : 2
public void traceBegin(String p1){
	int v1 = Slog.d(this.mTag, p1);
	return;
}
-----
depth : 2
public long logUserCreateJourneyBegin(int p1, String p2, int p3){
	long v1 = p0.logUserJourneyBegin(4, p1, p2, p3);
	return v1;
}
-----
depth : 2
public UserInfo createUserInternalUncheckedNoTracing(String p1, String p2, int p3, int p4, boolean p5, String p6, TimingsTraceAndSlog p7, Object p8){
	Object v1 = this.mUserTypes.get(p2);
	String v2 = p2.intern();
	int v3 = v1.getDefaultUserInfoFlags();
	boolean v4 = UserManagerService.checkUserTypeConsistency((p3 | v3));
	boolean v5 = v1.isEnabled();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Cannot add a user of disabled type ");
	StringBuilder v8 = v5.append(v2);
	StringBuilder v9 = v5.append(".");
	String v10 = v5.toString();
	p0.throwCheckedUserOperationException(v10, 6);
	boolean v12 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);
	return v13;
}
-----
depth : 2
public void logUserCreateJourneyFinish(long p1, int p2, boolean p3){
	FrameworkStatsLog.write(265, p1, p2, 3, phiInstruction);
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public UserInfo preCreateUserWithThrow(String p1){
	Object v1 = this.mUserTypes.get(p1);
	int v2 = v1.getDefaultUserInfoFlags();
	UserManagerService.checkCreateUsersPermission(phiInstruction);
	boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cannot pre-create user of type ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	Preconditions.checkArgument(v4, v8);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("Pre-creating user of type ");
	StringBuilder v12 = v9.append(p1);
	String v13 = v9.toString();
	int v14 = Slog.i("UserManagerService", v13);
	UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0);
	return v15;
}
-----
depth : 1
public int getDefaultUserInfoFlags(){
	return (this.mBaseType | this.mDefaultUserInfoPropertyFlags);
}
-----
depth : 1
public void checkCreateUsersPermission(int p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public boolean isUserTypeEligibleForPreCreation(UserTypeDetails p1){
	boolean v1 = p1.isProfile();
	String v2 = p1.getName();
	boolean v3 = v2.equals("android.os.usertype.full.RESTRICTED");
	return phiInstruction;
}
-----
depth : 2
public boolean isProfile(){
	return phiInstruction;
}
-----
depth : 2
public String getName(){
	return this.mName;
}
-----
depth : 1
public UserInfo createUserInternalUnchecked(String p1, String p2, int p3, int p4, boolean p5, String p6, Object p7){
	int v1 = p0.getNextAvailableId();
	TimingsTraceAndSlog v1 = new TimingsTraceAndSlog();
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append("createUser-");
	StringBuilder v5 = v2.append(p3);
	String v6 = v2.toString();
	v1.traceBegin(v6);
	long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3);
	UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7);
	p0.logUserCreateJourneyFinish(v8, v1, phiInstruction);
	v1.traceEnd();
	return v9;
}
-----
depth : 2
public int getNextAvailableId(){
	int v1 = p0.scanNextAvailableIdLocked();
	int v2 = this.mRemovingUserIds.size();
	int v3 = Slog.i("UserManagerService", "All available IDs are used. Recycling LRU ids.");
	this.mRemovingUserIds.clear();
	Iterator v5 = this.mRecentlyRemovedIds.iterator();
	boolean v6 = v5.hasNext();
	int v7 = p0.scanNextAvailableIdLocked();
	UserManager.invalidateStaticUserProperties();
	return phiInstruction;
}
-----
depth : 2
public void traceBegin(String p1){
	int v1 = Slog.d(this.mTag, p1);
	return;
}
-----
depth : 2
public long logUserCreateJourneyBegin(int p1, String p2, int p3){
	long v1 = p0.logUserJourneyBegin(4, p1, p2, p3);
	return v1;
}
-----
depth : 2
public UserInfo createUserInternalUncheckedNoTracing(String p1, String p2, int p3, int p4, boolean p5, String p6, TimingsTraceAndSlog p7, Object p8){
	Object v1 = this.mUserTypes.get(p2);
	String v2 = p2.intern();
	int v3 = v1.getDefaultUserInfoFlags();
	boolean v4 = UserManagerService.checkUserTypeConsistency((p3 | v3));
	boolean v5 = v1.isEnabled();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Cannot add a user of disabled type ");
	StringBuilder v8 = v5.append(v2);
	StringBuilder v9 = v5.append(".");
	String v10 = v5.toString();
	p0.throwCheckedUserOperationException(v10, 6);
	boolean v12 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);
	return v13;
}
-----
depth : 2
public void logUserCreateJourneyFinish(long p1, int p2, boolean p3){
	FrameworkStatsLog.write(265, p1, p2, 3, phiInstruction);
	return;
}
-----

and the following sink code:
['Object v1 = this.mUserTypes.get(p1);\nint v2 = v1.getDefaultUserInfoFlags();\nboolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1);\nUserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0);\nreturn v15;', 'int v2 = v1.getDefaultUserInfoFlags();\nboolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1);']

The method preCreateUserWithThrow has the following similar APIs:

- API Name: createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo; with Similarity Score: 0.8273171782493591
  - Access Control Level: SYS_OR_SIG and the following code:
UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);
return v2;
int v1 = p0.getNextAvailableId();
TimingsTraceAndSlog v1 = new TimingsTraceAndSlog();
long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3);
UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0);
return v9;
Object v1 = this.mUserTypes.get(p2);
String v2 = p2.intern();
UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);

- API Name: getRemainingCreatableUserCount(Ljava/lang/String;)I with Similarity Score: 0.810904860496521
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = this.mUserTypes.get(p1);
boolean v3 = v2.isEnabled();
int v10 = v2.getMaxAllowed();
int v12 = p0.getNumberOfUsersOfType(p1);
int v13 = Math.min(phiInstruction, phiInstruction);
int v14 = Math.max(0, v13);
return v14;

