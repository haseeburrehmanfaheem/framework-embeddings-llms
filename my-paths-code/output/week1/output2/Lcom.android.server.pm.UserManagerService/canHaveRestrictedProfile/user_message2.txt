The method canHaveRestrictedProfile has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean canHaveRestrictedProfile(int p1){
	UserManagerService.checkManageUsersPermission("canHaveRestrictedProfile");
	UserInfo v2 = p0.getUserInfoLU(p1);
	boolean v3 = v2.canHaveProfile();
	boolean v4 = v2.isAdmin();
	return 0;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public boolean canHaveProfile(){
	boolean v1 = p0.isProfile();
	boolean v2 = p0.isGuest();
	boolean v3 = p0.isRestricted();
	return 0;
}
-----
depth : 2
public boolean isProfile(){
	return phiInstruction;
}
-----
depth : 2
public boolean isGuest(){
	boolean v1 = UserManager.isUserTypeGuest(this.userType);
	return v1;
}
-----
depth : 2
public boolean isRestricted(){
	boolean v1 = UserManager.isUserTypeRestricted(this.userType);
	return v1;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean canHaveRestrictedProfile(int p1){
	UserManagerService.checkManageUsersPermission("canHaveRestrictedProfile");
	UserInfo v2 = p0.getUserInfoLU(p1);
	boolean v3 = v2.canHaveProfile();
	return 0;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public boolean canHaveProfile(){
	boolean v1 = p0.isProfile();
	boolean v2 = p0.isGuest();
	boolean v3 = p0.isRestricted();
	return 0;
}
-----
depth : 2
public boolean isProfile(){
	return phiInstruction;
}
-----
depth : 2
public boolean isGuest(){
	boolean v1 = UserManager.isUserTypeGuest(this.userType);
	return v1;
}
-----
depth : 2
public boolean isRestricted(){
	boolean v1 = UserManager.isUserTypeRestricted(this.userType);
	return v1;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean canHaveRestrictedProfile(int p1){
	UserManagerService.checkManageUsersPermission("canHaveRestrictedProfile");
	UserInfo v2 = p0.getUserInfoLU(p1);
	boolean v3 = v2.canHaveProfile();
	boolean v4 = v2.isAdmin();
	return 0;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public boolean canHaveProfile(){
	boolean v1 = p0.isProfile();
	boolean v2 = p0.isGuest();
	boolean v3 = p0.isRestricted();
	return 0;
}
-----
depth : 2
public boolean isProfile(){
	return phiInstruction;
}
-----
depth : 2
public boolean isGuest(){
	boolean v1 = UserManager.isUserTypeGuest(this.userType);
	return v1;
}
-----
depth : 2
public boolean isRestricted(){
	boolean v1 = UserManager.isUserTypeRestricted(this.userType);
	return v1;
}
-----

and the following sink code:
['UserInfo v2 = p0.getUserInfoLU(p1);\nboolean v3 = v2.canHaveProfile();\nboolean v4 = v2.isAdmin();', 'int v1 = Binder.getCallingUid();\nboolean v2 = UserManagerService.hasManageUsersPermission(v1);']

The method canHaveRestrictedProfile has the following similar APIs:

- API Name: setDefaultGuestRestrictions(Landroid/os/Bundle;)V with Similarity Score: 1.0
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
boolean v2 = UserManagerService.hasManageUsersPermission(v1);

- API Name: getSeedAccountType(I)Ljava/lang/String; with Similarity Score: 1.0
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
boolean v2 = UserManagerService.hasManageUsersPermission(v1);

