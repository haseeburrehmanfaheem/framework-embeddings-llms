The method isMediaSharedWithParent has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean isMediaSharedWithParent(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isMediaSharedWithParent");
	UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1);
	boolean v3 = v2.isProfile();
	boolean v4 = v2.isMediaSharedWithParent();
	return phiInstruction;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public UserTypeDetails getUserTypeDetailsNoChecks(int p1){
	String v1 = p0.getUserTypeNoChecks(p1);
	Object v2 = this.mUserTypes.get(v1);
	return phiInstruction;
}
-----
depth : 2
public String getUserTypeNoChecks(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	return phiInstruction;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean isMediaSharedWithParent(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isMediaSharedWithParent");
	UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1);
	boolean v3 = v2.isProfile();
	boolean v4 = v2.isMediaSharedWithParent();
	return phiInstruction;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public UserTypeDetails getUserTypeDetailsNoChecks(int p1){
	String v1 = p0.getUserTypeNoChecks(p1);
	Object v2 = this.mUserTypes.get(v1);
	return phiInstruction;
}
-----
depth : 2
public String getUserTypeNoChecks(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	return phiInstruction;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean isMediaSharedWithParent(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isMediaSharedWithParent");
	UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1);
	boolean v3 = v2.isProfile();
	boolean v4 = v2.isMediaSharedWithParent();
	return phiInstruction;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public UserTypeDetails getUserTypeDetailsNoChecks(int p1){
	String v1 = p0.getUserTypeNoChecks(p1);
	Object v2 = this.mUserTypes.get(v1);
	return phiInstruction;
}
-----
depth : 2
public String getUserTypeNoChecks(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	return phiInstruction;
}
-----

and the following sink code:
['UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1);\nString v1 = p0.getUserTypeNoChecks(p1);\nObject v2 = this.mUserTypes.get(v1);\nboolean v4 = v2.isMediaSharedWithParent();\nreturn phiInstruction;', 'p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isMediaSharedWithParent");\nboolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);\nboolean v3 = UserManagerService.hasManageUsersPermission();']

The method isMediaSharedWithParent has the following similar APIs:

- API Name: isUserRunning(I)Z with Similarity Score: 0.9313556551933289
  - Access Control Level: SYS_OR_SIG and the following code:
p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isUserRunning");
boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);

- API Name: isUserUnlocked(I)Z with Similarity Score: 0.925527811050415
  - Access Control Level: SYS_OR_SIG and the following code:
p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isUserUnlocked");
boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
boolean v3 = UserManagerService.hasManageUsersPermission();
int v4 = Binder.getCallingUid();
boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);

