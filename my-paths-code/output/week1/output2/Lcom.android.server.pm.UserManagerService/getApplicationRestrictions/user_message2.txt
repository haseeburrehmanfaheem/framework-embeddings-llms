The method getApplicationRestrictions has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public Bundle getApplicationRestrictions(String p1){
	int v1 = UserHandle.getCallingUserId();
	Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1);
	return v2;
}
-----
depth : 1
public Bundle getApplicationRestrictionsForUser(String p1, int p2){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("get application restrictions for other user/app ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	UserManagerService.checkSystemOrRoot(v8);
	Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
	return v10;
}
-----
depth : 2
public void checkSystemOrRoot(String p1){
	return;
}
-----
depth : 2
public Bundle readApplicationRestrictionsLAr(String p1, int p2){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(v1,v2);
	File v1 = Environment.getUserSystemDirectory(p2);
	String v2 = UserManagerService.packageToRestrictionsFileName(p1);
	Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);
	return v5;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public Bundle getApplicationRestrictions(String p1){
	int v1 = UserHandle.getCallingUserId();
	Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1);
	return v2;
}
-----
depth : 1
public Bundle getApplicationRestrictionsForUser(String p1, int p2){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("get application restrictions for other user/app ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	UserManagerService.checkSystemOrRoot(v8);
	Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
	return v10;
}
-----
depth : 2
public void checkSystemOrRoot(String p1){
	return;
}
-----
depth : 2
public Bundle readApplicationRestrictionsLAr(String p1, int p2){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(v1,v2);
	File v1 = Environment.getUserSystemDirectory(p2);
	String v2 = UserManagerService.packageToRestrictionsFileName(p1);
	Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);
	return v5;
}
-----

and the following sink code:
['Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1);\nStringBuilder v4 = new StringBuilder();\nStringBuilder v6 = v4.append("get application restrictions for other user/app ");\nStringBuilder v7 = v4.append(p1);\nString v8 = v4.toString();\nUserManagerService.checkSystemOrRoot(v8);\nBundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);\nreturn v10;', 'File v1 = Environment.getUserSystemDirectory(p2);\nString v2 = UserManagerService.packageToRestrictionsFileName(p1);\nAtomicFile v0 = new AtomicFile(v0);\nBundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);\nreturn v5;']

The method getApplicationRestrictions has the following similar APIs:

- API Name: getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle; with Similarity Score: 0.9336578249931335
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
AtomicFile v0 = new AtomicFile(v0);
String v2 = UserManagerService.packageToRestrictionsFileName(p1);
Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);

- API Name: getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle; with Similarity Score: 0.863210916519165
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
AtomicFile v0 = new AtomicFile(v0);
String v2 = UserManagerService.packageToRestrictionsFileName(p1);
Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);

