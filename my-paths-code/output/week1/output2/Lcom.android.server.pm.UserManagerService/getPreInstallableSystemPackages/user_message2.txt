The method getPreInstallableSystemPackages has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public String getPreInstallableSystemPackages(String p1){
	UserManagerService.checkCreateUsersPermission("getPreInstallableSystemPackages");
	Set v2 = this.mSystemPackageInstaller.getInstallablePackagesForUserType(p1);
	int v3 = v2.size();
	String v3 = new String(v3);
	Object v4 = v2.toArray(v3);
	return v4;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public Set getInstallablePackagesForUserType(String p1){
	int v1 = p0.getWhitelistMode();
	boolean v2 = UserSystemPackageInstaller.isEnforceMode(v1);
	boolean v3 = UserSystemPackageInstaller.isImplicitWhitelistMode(v1);
	boolean v4 = UserSystemPackageInstaller.isImplicitWhitelistSystemMode(v1);
	boolean v5 = this.mUm.isUserTypeSubtypeOfSystem(p1);
	Set v6 = p0.getWhitelistedPackagesForUserType(p1);
	ArraySet v6 = new ArraySet();
	Object v8 = LocalServices.getService(PackageManagerInterna.class);
	UserSystemPackageInstaller$$ExternalSyntheticLambda0 v8 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(p0,v6,phiInstruction,v6);
	v8.forEachPackage(v8);
	return v6;
}
-----
depth : 2
public int getWhitelistMode(){
	int v1 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	return v1;
}
-----
depth : 2
public boolean isEnforceMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isImplicitWhitelistMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isImplicitWhitelistSystemMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isUserTypeSubtypeOfSystem(String p1){
	Object v1 = this.mUserTypes.get(p1);
	boolean v2 = v1.isSystem();
	return phiInstruction;
}
-----
depth : 2
public Set getWhitelistedPackagesForUserType(String p1){
	long v1 = p0.getUserTypeMask(p1);
	ArraySet v1 = new ArraySet(v2);
	int v2 = this.mWhitelistedPackagesForUserTypes.size();
	int v4 = this.mWhitelistedPackagesForUserTypes.size();
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public String getPreInstallableSystemPackages(String p1){
	UserManagerService.checkCreateUsersPermission("getPreInstallableSystemPackages");
	Set v2 = this.mSystemPackageInstaller.getInstallablePackagesForUserType(p1);
	int v3 = v2.size();
	String v3 = new String(v3);
	Object v4 = v2.toArray(v3);
	return v4;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public Set getInstallablePackagesForUserType(String p1){
	int v1 = p0.getWhitelistMode();
	boolean v2 = UserSystemPackageInstaller.isEnforceMode(v1);
	boolean v3 = UserSystemPackageInstaller.isImplicitWhitelistMode(v1);
	boolean v4 = UserSystemPackageInstaller.isImplicitWhitelistSystemMode(v1);
	boolean v5 = this.mUm.isUserTypeSubtypeOfSystem(p1);
	Set v6 = p0.getWhitelistedPackagesForUserType(p1);
	ArraySet v6 = new ArraySet();
	Object v8 = LocalServices.getService(PackageManagerInterna.class);
	UserSystemPackageInstaller$$ExternalSyntheticLambda0 v8 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(p0,v6,phiInstruction,v6);
	v8.forEachPackage(v8);
	return v6;
}
-----
depth : 2
public int getWhitelistMode(){
	int v1 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	int v2 = p0.getDeviceDefaultWhitelistMode();
	return v2;
}
-----
depth : 2
public boolean isEnforceMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isImplicitWhitelistMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isImplicitWhitelistSystemMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isUserTypeSubtypeOfSystem(String p1){
	Object v1 = this.mUserTypes.get(p1);
	boolean v2 = v1.isSystem();
	return phiInstruction;
}
-----
depth : 2
public Set getWhitelistedPackagesForUserType(String p1){
	long v1 = p0.getUserTypeMask(p1);
	ArraySet v1 = new ArraySet(v2);
	int v2 = this.mWhitelistedPackagesForUserTypes.size();
	int v4 = this.mWhitelistedPackagesForUserTypes.size();
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public String getPreInstallableSystemPackages(String p1){
	UserManagerService.checkCreateUsersPermission("getPreInstallableSystemPackages");
	Set v2 = this.mSystemPackageInstaller.getInstallablePackagesForUserType(p1);
	return 0;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public Set getInstallablePackagesForUserType(String p1){
	int v1 = p0.getWhitelistMode();
	boolean v2 = UserSystemPackageInstaller.isEnforceMode(v1);
	boolean v3 = UserSystemPackageInstaller.isImplicitWhitelistMode(v1);
	boolean v4 = UserSystemPackageInstaller.isImplicitWhitelistSystemMode(v1);
	boolean v5 = this.mUm.isUserTypeSubtypeOfSystem(p1);
	Set v6 = p0.getWhitelistedPackagesForUserType(p1);
	ArraySet v6 = new ArraySet();
	Object v8 = LocalServices.getService(PackageManagerInterna.class);
	UserSystemPackageInstaller$$ExternalSyntheticLambda0 v8 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(p0,v6,phiInstruction,v6);
	v8.forEachPackage(v8);
	return v6;
}
-----
depth : 2
public int getWhitelistMode(){
	int v1 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	return v1;
}
-----
depth : 2
public boolean isEnforceMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isImplicitWhitelistMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isImplicitWhitelistSystemMode(int p1){
	return phiInstruction;
}
-----
depth : 2
public boolean isUserTypeSubtypeOfSystem(String p1){
	Object v1 = this.mUserTypes.get(p1);
	boolean v2 = v1.isSystem();
	return phiInstruction;
}
-----
depth : 2
public Set getWhitelistedPackagesForUserType(String p1){
	long v1 = p0.getUserTypeMask(p1);
	ArraySet v1 = new ArraySet(v2);
	int v2 = this.mWhitelistedPackagesForUserTypes.size();
	int v4 = this.mWhitelistedPackagesForUserTypes.size();
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----

and the following sink code:
['Set v2 = this.mSystemPackageInstaller.getInstallablePackagesForUserType(p1);\nint v1 = p0.getWhitelistMode();\nboolean v5 = this.mUm.isUserTypeSubtypeOfSystem(p1);\nSet v6 = p0.getWhitelistedPackagesForUserType(p1);\nArraySet v6 = new ArraySet();\nObject v8 = LocalServices.getService(PackageManagerInterna.class);\nreturn v2;', 'boolean v1 = UserManagerService.hasCreateUsersPermission();\nboolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");']

The method getPreInstallableSystemPackages has the following similar APIs:

- API Name: isUserTypeEnabled(Ljava/lang/String;)Z with Similarity Score: 0.932373583316803
  - Access Control Level: SYS_OR_SIG and the following code:
UserManagerService.checkCreateUsersPermission("check if user type is enabled.");
boolean v1 = UserManagerService.hasCreateUsersPermission();
boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");

- API Name: getUserIcon(I)Landroid/os/ParcelFileDescriptor; with Similarity Score: 0.9004337191581726
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.GET_ACCOUNTS_PRIVILEGED");
int v1 = Binder.getCallingUid();
boolean v2 = UserManagerService.hasManageUsersPermission(v1);
boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);

