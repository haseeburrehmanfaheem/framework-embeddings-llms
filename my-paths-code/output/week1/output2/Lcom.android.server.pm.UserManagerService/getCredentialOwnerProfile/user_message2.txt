The method getCredentialOwnerProfile has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public int getCredentialOwnerProfile(int p1){
	UserManagerService.checkManageUsersPermission("get the credential owner");
	boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);
	UserInfo v3 = p0.getProfileParentLU(p1);
	return UserInfo.id;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId);
	return v2;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public int getCredentialOwnerProfile(int p1){
	UserManagerService.checkManageUsersPermission("get the credential owner");
	boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);
	UserInfo v3 = p0.getProfileParentLU(p1);
	return p1;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId);
	return v2;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public int getCredentialOwnerProfile(int p1){
	UserManagerService.checkManageUsersPermission("get the credential owner");
	boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);
	UserInfo v3 = p0.getProfileParentLU(p1);
	return UserInfo.id;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	return 0;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----

and the following sink code:
['UserInfo v3 = p0.getProfileParentLU(p1);\nreturn UserInfo.id;', 'boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);\nUserInfo v3 = p0.getProfileParentLU(p1);']

The method getCredentialOwnerProfile has the following similar APIs:

- API Name: getUserCreationTime(I)J with Similarity Score: 0.9532679319381714
  - Access Control Level: SYS_OR_SIG and the following code:
UserInfo v2 = p0.getProfileParentLU(p1);
return UserInfo.creationTime;

- API Name: getProfileParent(I)Landroid/content/pm/UserInfo; with Similarity Score: 0.9353470206260681
  - Access Control Level: SYS_OR_SIG and the following code:
UserInfo v2 = p0.getProfileParentLU(p1);
return v2;

