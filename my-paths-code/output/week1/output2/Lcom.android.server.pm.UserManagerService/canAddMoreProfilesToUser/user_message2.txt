The method canAddMoreProfilesToUser has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean canAddMoreProfilesToUser(String p1, int p2, boolean p3){
	int v1 = p0.getRemainingCreatableProfileCount(p1, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public int getRemainingCreatableProfileCount(String p1, int p2, boolean p3){
	UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of profiles that can be added to the given user.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = v2.isEnabled();
	boolean v4 = v2.isManagedProfile();
	PackageManager v5 = this.mContext.getPackageManager();
	boolean v6 = v5.hasSystemFeature("android.software.managed_users");
	UserInfo v7 = p0.getUserInfoLU(p2);
	boolean v8 = v7.canHaveProfile();
	[I v9 = p0.getProfileIds(p2, p1, 0);
	int v10 = p0.getAliveUsersExcludingGuestsCountLU();
	int v11 = UserManager.getMaxSupportedUsers();
	int v12 = UserManagerService.getMaxUsersOfTypePerParent(v2);
	int v13 = Math.min(phiInstruction, (v12 - (v9.length - phiInstruction)));
	return 0;
}
-----
depth : 2
public void checkQueryOrCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean isEnabled(){
	return this.mEnabled;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.mName);
	return v1;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean canHaveProfile(){
	boolean v1 = p0.isProfile();
	boolean v2 = p0.isGuest();
	boolean v3 = p0.isRestricted();
	return 0;
}
-----
depth : 2
public [I getProfileIds(int p1, String p2, boolean p3){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getting profiles related to user ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v5);
	long v7 = Binder.clearCallingIdentity();
	IntArray v8 = p0.getProfileIdsLU(p1, p2, p3);
	[I v9 = v8.toArray();
	Binder.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 2
public int getAliveUsersExcludingGuestsCountLU(){
	int v1 = this.mUsers.size();
	return phiInstruction;
}
-----
depth : 2
public int getMaxUsersOfTypePerParent(UserTypeDetails p1){
	int v1 = p1.getMaxAllowedPerParent();
	boolean v2 = p1.isManagedProfile();
	int v3 = SystemProperties.getInt("persist.sys.max_profiles", v1);
	return v3;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean canAddMoreProfilesToUser(String p1, int p2, boolean p3){
	int v1 = p0.getRemainingCreatableProfileCount(p1, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public int getRemainingCreatableProfileCount(String p1, int p2, boolean p3){
	UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of profiles that can be added to the given user.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = v2.isEnabled();
	boolean v4 = v2.isManagedProfile();
	PackageManager v5 = this.mContext.getPackageManager();
	boolean v6 = v5.hasSystemFeature("android.software.managed_users");
	UserInfo v7 = p0.getUserInfoLU(p2);
	boolean v8 = v7.canHaveProfile();
	[I v9 = p0.getProfileIds(p2, p1, 0);
	int v10 = p0.getAliveUsersExcludingGuestsCountLU();
	int v11 = UserManager.getMaxSupportedUsers();
	int v12 = UserManagerService.getMaxUsersOfTypePerParent(v2);
	int v13 = Math.min(phiInstruction, (v12 - (v9.length - phiInstruction)));
	return 0;
}
-----
depth : 2
public void checkQueryOrCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean isEnabled(){
	return this.mEnabled;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.mName);
	return v1;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean canHaveProfile(){
	boolean v1 = p0.isProfile();
	boolean v2 = p0.isGuest();
	boolean v3 = p0.isRestricted();
	return 0;
}
-----
depth : 2
public [I getProfileIds(int p1, String p2, boolean p3){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getting profiles related to user ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v5);
	long v7 = Binder.clearCallingIdentity();
	IntArray v8 = p0.getProfileIdsLU(p1, p2, p3);
	[I v9 = v8.toArray();
	Binder.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 2
public int getAliveUsersExcludingGuestsCountLU(){
	int v1 = this.mUsers.size();
	return phiInstruction;
}
-----
depth : 2
public int getMaxUsersOfTypePerParent(UserTypeDetails p1){
	int v1 = p1.getMaxAllowedPerParent();
	boolean v2 = p1.isManagedProfile();
	return v1;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean canAddMoreProfilesToUser(String p1, int p2, boolean p3){
	int v1 = p0.getRemainingCreatableProfileCount(p1, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public int getRemainingCreatableProfileCount(String p1, int p2, boolean p3){
	UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of profiles that can be added to the given user.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = v2.isEnabled();
	boolean v4 = v2.isManagedProfile();
	PackageManager v5 = this.mContext.getPackageManager();
	boolean v6 = v5.hasSystemFeature("android.software.managed_users");
	UserInfo v7 = p0.getUserInfoLU(p2);
	boolean v8 = v7.canHaveProfile();
	[I v9 = p0.getProfileIds(p2, p1, 0);
	int v10 = p0.getAliveUsersExcludingGuestsCountLU();
	int v11 = UserManager.getMaxSupportedUsers();
	int v12 = UserManagerService.getMaxUsersOfTypePerParent(v2);
	int v13 = Math.min(phiInstruction, (v12 - (v9.length - phiInstruction)));
	return 0;
}
-----
depth : 2
public void checkQueryOrCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean isEnabled(){
	return this.mEnabled;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.mName);
	return v1;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean canHaveProfile(){
	boolean v1 = p0.isProfile();
	boolean v2 = p0.isGuest();
	boolean v3 = p0.isRestricted();
	return 0;
}
-----
depth : 2
public [I getProfileIds(int p1, String p2, boolean p3){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getting profiles related to user ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v5);
	long v7 = Binder.clearCallingIdentity();
	IntArray v8 = p0.getProfileIdsLU(p1, p2, p3);
	[I v9 = v8.toArray();
	Binder.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 2
public int getAliveUsersExcludingGuestsCountLU(){
	int v1 = this.mUsers.size();
	return phiInstruction;
}
-----
depth : 2
public int getMaxUsersOfTypePerParent(UserTypeDetails p1){
	int v1 = p1.getMaxAllowedPerParent();
	boolean v2 = p1.isManagedProfile();
	int v3 = SystemProperties.getInt("persist.sys.max_profiles", v1);
	return v3;
}
-----

and the following sink code:
['int v1 = p0.getRemainingCreatableProfileCount(p1, p2, p3);\nObject v2 = this.mUserTypes.get(p1);\nboolean v3 = v2.isEnabled();\nboolean v4 = v2.isManagedProfile();\nUserInfo v7 = p0.getUserInfoLU(p2);\nboolean v8 = v7.canHaveProfile();\n[I v9 = p0.getProfileIds(p2, p1, 0);\nint v10 = p0.getAliveUsersExcludingGuestsCountLU();\nint v11 = UserManager.getMaxSupportedUsers();\nint v12 = UserManagerService.getMaxUsersOfTypePerParent(v2);\nint v13 = Math.min(phiInstruction, (v12 - (v9.length - phiInstruction)));', 'UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of profiles that can be added to the given user.");\nboolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();']

The method canAddMoreProfilesToUser has the following similar APIs:

- API Name: getRemainingCreatableUserCount(Ljava/lang/String;)I with Similarity Score: 0.8910335898399353
  - Access Control Level: SYS_OR_SIG and the following code:
UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of users that can be added.");

