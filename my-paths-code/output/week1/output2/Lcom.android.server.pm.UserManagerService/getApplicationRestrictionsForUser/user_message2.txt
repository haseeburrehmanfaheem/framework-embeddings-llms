The method getApplicationRestrictionsForUser has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public Bundle getApplicationRestrictionsForUser(String p1, int p2){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("get application restrictions for other user/app ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	UserManagerService.checkSystemOrRoot(v8);
	Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
	return v10;
}
-----
depth : 1
public void checkSystemOrRoot(String p1){
	return;
}
-----
depth : 1
public Bundle readApplicationRestrictionsLAr(String p1, int p2){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(v1,v2);
	File v1 = Environment.getUserSystemDirectory(p2);
	String v2 = UserManagerService.packageToRestrictionsFileName(p1);
	Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);
	return v5;
}
-----
depth : 2
public String packageToRestrictionsFileName(String p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("res_");
	StringBuilder v3 = v0.append(p1);
	StringBuilder v4 = v0.append(".xml");
	String v5 = v0.toString();
	return v5;
}
-----
depth : 2
public Bundle readApplicationRestrictionsLAr(AtomicFile p1){
	Bundle v0 = new Bundle();
	ArrayList v1 = new ArrayList();
	File v3 = p1.getBaseFile();
	boolean v4 = v3.exists();
	FileInputStream v5 = p1.openRead();
	TypedXmlPullParser v6 = Xml.resolvePullParser(v5);
	XmlUtils.nextElement(v6);
	int v8 = v6.getEventType();
	StringBuilder v8 = new StringBuilder;
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Error parsing ");
	File v11 = p1.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.w("UserManagerService", v13, caughtException);
	IoUtils.closeQuietly(phiInstruction);
	return v0;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public Bundle getApplicationRestrictionsForUser(String p1, int p2){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("get application restrictions for other user/app ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	UserManagerService.checkSystemOrRoot(v8);
	Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
	return v10;
}
-----
depth : 1
public void checkSystemOrRoot(String p1){
	return;
}
-----
depth : 1
public Bundle readApplicationRestrictionsLAr(String p1, int p2){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(v1,v2);
	File v1 = Environment.getUserSystemDirectory(p2);
	String v2 = UserManagerService.packageToRestrictionsFileName(p1);
	Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);
	return v5;
}
-----
depth : 2
public String packageToRestrictionsFileName(String p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("res_");
	StringBuilder v3 = v0.append(p1);
	StringBuilder v4 = v0.append(".xml");
	String v5 = v0.toString();
	return v5;
}
-----
depth : 2
public Bundle readApplicationRestrictionsLAr(AtomicFile p1){
	Bundle v0 = new Bundle();
	ArrayList v1 = new ArrayList();
	File v3 = p1.getBaseFile();
	boolean v4 = v3.exists();
	FileInputStream v5 = p1.openRead();
	TypedXmlPullParser v6 = Xml.resolvePullParser(v5);
	XmlUtils.nextElement(v6);
	int v8 = v6.getEventType();
	StringBuilder v8 = new StringBuilder;
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Error parsing ");
	File v11 = p1.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.w("UserManagerService", v13, caughtException);
	IoUtils.closeQuietly(phiInstruction);
	return v0;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public Bundle getApplicationRestrictionsForUser(String p1, int p2){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("get application restrictions for other user/app ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	UserManagerService.checkSystemOrRoot(v5);
	Bundle v7 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
	return v7;
}
-----
depth : 1
public void checkSystemOrRoot(String p1){
	return;
}
-----
depth : 1
public Bundle readApplicationRestrictionsLAr(String p1, int p2){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(v1,v2);
	File v1 = Environment.getUserSystemDirectory(p2);
	String v2 = UserManagerService.packageToRestrictionsFileName(p1);
	Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);
	return v5;
}
-----
depth : 2
public String packageToRestrictionsFileName(String p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("res_");
	StringBuilder v3 = v0.append(p1);
	StringBuilder v4 = v0.append(".xml");
	String v5 = v0.toString();
	return v5;
}
-----
depth : 2
public Bundle readApplicationRestrictionsLAr(AtomicFile p1){
	Bundle v0 = new Bundle();
	ArrayList v1 = new ArrayList();
	File v3 = p1.getBaseFile();
	boolean v4 = v3.exists();
	FileInputStream v5 = p1.openRead();
	TypedXmlPullParser v6 = Xml.resolvePullParser(v5);
	XmlUtils.nextElement(v6);
	int v8 = v6.getEventType();
	StringBuilder v8 = new StringBuilder;
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Error parsing ");
	File v11 = p1.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.w("UserManagerService", v13, caughtException);
	IoUtils.closeQuietly(phiInstruction);
	return v0;
}
-----

and the following sink code:
['Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);\nAtomicFile v0 = new AtomicFile(v0);\nString v2 = UserManagerService.packageToRestrictionsFileName(p1);\nBundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);', 'return v10;\nreturn v7;']

The method getApplicationRestrictionsForUser has the following similar APIs:

- API Name: getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle; with Similarity Score: 0.9336578249931335
  - Access Control Level: SYS_OR_SIG and the following code:
File v1 = Environment.getUserSystemDirectory(p2);
String v2 = UserManagerService.packageToRestrictionsFileName(p1);
AtomicFile v0 = new AtomicFile(v0);
Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);
return v5;

- API Name: getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle; with Similarity Score: 0.863210916519165
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1);
StringBuilder v4 = new StringBuilder();
StringBuilder v6 = v4.append("get application restrictions for other user/app ");
StringBuilder v7 = v4.append(p1);
String v8 = v4.toString();
UserManagerService.checkSystemOrRoot(v8);
Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
return v10;

