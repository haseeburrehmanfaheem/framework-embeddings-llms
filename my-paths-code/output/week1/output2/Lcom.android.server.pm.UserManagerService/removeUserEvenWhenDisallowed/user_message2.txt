The method removeUserEvenWhenDisallowed has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean removeUserEvenWhenDisallowed(int p1){
	UserManagerService.checkCreateUsersPermission("Only the system can remove users");
	boolean v2 = p0.removeUserUnchecked(p1);
	return v2;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----

and the following sink code:
['UserManagerService.checkCreateUsersPermission("Only the system can remove users");\nboolean v2 = p0.removeUserUnchecked(p1);\nreturn v2;']

The method removeUserEvenWhenDisallowed has the following similar APIs:

- API Name: removeUser(I)Z with Similarity Score: 0.9173704981803894
  - Access Control Level: SYS_OR_SIG and the following code:
UserManagerService.checkCreateUsersPermission("Only the system can remove users");
boolean v1 = UserManagerService.hasCreateUsersPermission();

- API Name: markGuestForDeletion(I)Z with Similarity Score: 0.8576700687408447
  - Access Control Level: SYS_OR_SIG and the following code:
UserManagerService.checkManageUsersPermission("Only the system can remove users");
int v2 = UserHandle.getCallingUserId();
Bundle v3 = p0.getUserRestrictions(v2);
boolean v4 = v3.getBoolean("no_remove_user", 0);

