The method isUserRunning has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean isUserRunning(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isUserRunning");
	boolean v2 = this.mLocalService.isUserRunning(p1);
	return v2;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isUserRunning(int p1){
	UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);
	UserManagerService$WatchedUserStates v2 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);
	int v3 = v2.get(p1, -1);
	return phiInstruction;
}
-----
depth : 2
public UserManagerService$WatchedUserStates -$$Nest$fgetmUserStates(UserManagerService p1){
	return this.mUserStates;
}
-----
depth : 2
public UserManagerService$WatchedUserStates -$$Nest$fgetmUserStates(UserManagerService p1){
	return this.mUserStates;
}
-----
depth : 2
public int get(int p1, int p2){
	int v1 = this.states.indexOfKey(p1);
	int v2 = this.states.get(p1);
	return phiInstruction;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean isUserRunning(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isUserRunning");
	boolean v2 = this.mLocalService.isUserRunning(p1);
	return v2;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isUserRunning(int p1){
	UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);
	UserManagerService$WatchedUserStates v2 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);
	int v3 = v2.get(p1, -1);
	return phiInstruction;
}
-----
depth : 2
public UserManagerService$WatchedUserStates -$$Nest$fgetmUserStates(UserManagerService p1){
	return this.mUserStates;
}
-----
depth : 2
public UserManagerService$WatchedUserStates -$$Nest$fgetmUserStates(UserManagerService p1){
	return this.mUserStates;
}
-----
depth : 2
public int get(int p1, int p2){
	int v1 = this.states.indexOfKey(p1);
	int v2 = this.states.get(p1);
	return phiInstruction;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean isUserRunning(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isUserRunning");
	boolean v2 = this.mLocalService.isUserRunning(p1);
	return v2;
}
-----
depth : 1
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public boolean isUserRunning(int p1){
	UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);
	UserManagerService$WatchedUserStates v2 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);
	int v3 = v2.get(p1, -1);
	return phiInstruction;
}
-----
depth : 2
public UserManagerService$WatchedUserStates -$$Nest$fgetmUserStates(UserManagerService p1){
	return this.mUserStates;
}
-----
depth : 2
public UserManagerService$WatchedUserStates -$$Nest$fgetmUserStates(UserManagerService p1){
	return this.mUserStates;
}
-----
depth : 2
public int get(int p1, int p2){
	int v1 = this.states.indexOfKey(p1);
	return phiInstruction;
}
-----

and the following sink code:
['p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "isUserRunning");\nboolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);', 'UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);\nint v3 = v2.get(p1, -1);']

The method isUserRunning has the following similar APIs:

- API Name: isUserUnlocked(I)Z with Similarity Score: 1.0000001192092896
  - Access Control Level: SYS_OR_SIG and the following code:
UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);
int v3 = v2.get(p1, -1);

- API Name: isUserUnlockingOrUnlocked(I)Z with Similarity Score: 1.0000001192092896
  - Access Control Level: SYS_OR_SIG and the following code:
UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0);
int v3 = v2.get(p1, -1);

