This is path 1 for the API with depth 2:
depth : 0
public UserInfo createProfileForUserEvenWhenDisallowedWithThrow(String p1, String p2, int p3, int p4, String p5){
	UserManagerService.checkCreateUsersPermission(p3);
	UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);
	return v2;
}
-----
depth : 1
public void checkCreateUsersPermission(int p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public UserInfo createUserInternalUnchecked(String p1, String p2, int p3, int p4, boolean p5, String p6, Object p7){
	int v1 = p0.getNextAvailableId();
	TimingsTraceAndSlog v1 = new TimingsTraceAndSlog();
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append("createUser-");
	StringBuilder v5 = v2.append(p3);
	String v6 = v2.toString();
	v1.traceBegin(v6);
	long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3);
	UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7);
	p0.logUserCreateJourneyFinish(v8, v1, phiInstruction);
	v1.traceEnd();
	return v9;
}
-----
depth : 2
public int getNextAvailableId(){
	int v1 = p0.scanNextAvailableIdLocked();
	int v2 = this.mRemovingUserIds.size();
	int v3 = Slog.i("UserManagerService", "All available IDs are used. Recycling LRU ids.");
	this.mRemovingUserIds.clear();
	Iterator v5 = this.mRecentlyRemovedIds.iterator();
	boolean v6 = v5.hasNext();
	int v7 = p0.scanNextAvailableIdLocked();
	UserManager.invalidateStaticUserProperties();
	return phiInstruction;
}
-----
depth : 2
public void traceBegin(String p1){
	int v1 = Slog.d(this.mTag, p1);
	return;
}
-----
depth : 2
public long logUserCreateJourneyBegin(int p1, String p2, int p3){
	long v1 = p0.logUserJourneyBegin(4, p1, p2, p3);
	return v1;
}
-----
depth : 2
public UserInfo createUserInternalUncheckedNoTracing(String p1, String p2, int p3, int p4, boolean p5, String p6, TimingsTraceAndSlog p7, Object p8){
	Object v1 = this.mUserTypes.get(p2);
	String v2 = p2.intern();
	int v3 = v1.getDefaultUserInfoFlags();
	boolean v4 = UserManagerService.checkUserTypeConsistency((p3 | v3));
	boolean v5 = v1.isEnabled();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Cannot add a user of disabled type ");
	StringBuilder v8 = v5.append(v2);
	StringBuilder v9 = v5.append(".");
	String v10 = v5.toString();
	p0.throwCheckedUserOperationException(v10, 6);
	boolean v12 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);
	return v13;
}
-----
depth : 2
public void logUserCreateJourneyFinish(long p1, int p2, boolean p3){
	FrameworkStatsLog.write(265, p1, p2, 3, phiInstruction);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public UserInfo createProfileForUserEvenWhenDisallowedWithThrow(String p1, String p2, int p3, int p4, String p5){
	UserManagerService.checkCreateUsersPermission(p3);
	UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);
	return v2;
}
-----
depth : 1
public void checkCreateUsersPermission(int p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public UserInfo createUserInternalUnchecked(String p1, String p2, int p3, int p4, boolean p5, String p6, Object p7){
	int v1 = p0.getNextAvailableId();
	TimingsTraceAndSlog v1 = new TimingsTraceAndSlog();
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append("createUser-");
	StringBuilder v5 = v2.append(p3);
	String v6 = v2.toString();
	v1.traceBegin(v6);
	long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3);
	UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7);
	p0.logUserCreateJourneyFinish(v8, v1, phiInstruction);
	v1.traceEnd();
	return v9;
}
-----
depth : 2
public int getNextAvailableId(){
	int v1 = p0.scanNextAvailableIdLocked();
	int v2 = this.mRemovingUserIds.size();
	int v3 = Slog.i("UserManagerService", "All available IDs are used. Recycling LRU ids.");
	this.mRemovingUserIds.clear();
	Iterator v5 = this.mRecentlyRemovedIds.iterator();
	boolean v6 = v5.hasNext();
	int v7 = p0.scanNextAvailableIdLocked();
	UserManager.invalidateStaticUserProperties();
	return phiInstruction;
}
-----
depth : 2
public void traceBegin(String p1){
	int v1 = Slog.d(this.mTag, p1);
	return;
}
-----
depth : 2
public long logUserCreateJourneyBegin(int p1, String p2, int p3){
	long v1 = p0.logUserJourneyBegin(4, p1, p2, p3);
	return v1;
}
-----
depth : 2
public UserInfo createUserInternalUncheckedNoTracing(String p1, String p2, int p3, int p4, boolean p5, String p6, TimingsTraceAndSlog p7, Object p8){
	Object v1 = this.mUserTypes.get(p2);
	String v2 = p2.intern();
	int v3 = v1.getDefaultUserInfoFlags();
	boolean v4 = UserManagerService.checkUserTypeConsistency((p3 | v3));
	boolean v5 = v1.isEnabled();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Cannot add a user of disabled type ");
	StringBuilder v8 = v5.append(v2);
	StringBuilder v9 = v5.append(".");
	String v10 = v5.toString();
	p0.throwCheckedUserOperationException(v10, 6);
	boolean v12 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);
	return v13;
}
-----
depth : 2
public void logUserCreateJourneyFinish(long p1, int p2, boolean p3){
	FrameworkStatsLog.write(265, p1, p2, 3, phiInstruction);
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public UserInfo createProfileForUserEvenWhenDisallowedWithThrow(String p1, String p2, int p3, int p4, String p5){
	UserManagerService.checkCreateUsersPermission(p3);
	UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);
	return v2;
}
-----
depth : 1
public void checkCreateUsersPermission(int p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public UserInfo createUserInternalUnchecked(String p1, String p2, int p3, int p4, boolean p5, String p6, Object p7){
	int v1 = p0.getNextAvailableId();
	TimingsTraceAndSlog v1 = new TimingsTraceAndSlog();
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append("createUser-");
	StringBuilder v5 = v2.append(p3);
	String v6 = v2.toString();
	v1.traceBegin(v6);
	long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3);
	UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7);
	p0.logUserCreateJourneyFinish(v8, v1, phiInstruction);
	v1.traceEnd();
	return v9;
}
-----
depth : 2
public int getNextAvailableId(){
	int v1 = p0.scanNextAvailableIdLocked();
	int v2 = this.mRemovingUserIds.size();
	int v3 = Slog.i("UserManagerService", "All available IDs are used. Recycling LRU ids.");
	this.mRemovingUserIds.clear();
	Iterator v5 = this.mRecentlyRemovedIds.iterator();
	boolean v6 = v5.hasNext();
	int v7 = p0.scanNextAvailableIdLocked();
	UserManager.invalidateStaticUserProperties();
	return phiInstruction;
}
-----
depth : 2
public void traceBegin(String p1){
	int v1 = Slog.d(this.mTag, p1);
	return;
}
-----
depth : 2
public long logUserCreateJourneyBegin(int p1, String p2, int p3){
	long v1 = p0.logUserJourneyBegin(4, p1, p2, p3);
	return v1;
}
-----
depth : 2
public UserInfo createUserInternalUncheckedNoTracing(String p1, String p2, int p3, int p4, boolean p5, String p6, TimingsTraceAndSlog p7, Object p8){
	Object v1 = this.mUserTypes.get(p2);
	String v2 = p2.intern();
	int v3 = v1.getDefaultUserInfoFlags();
	boolean v4 = UserManagerService.checkUserTypeConsistency((p3 | v3));
	boolean v5 = v1.isEnabled();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Cannot add a user of disabled type ");
	StringBuilder v8 = v5.append(v2);
	StringBuilder v9 = v5.append(".");
	String v10 = v5.toString();
	p0.throwCheckedUserOperationException(v10, 6);
	boolean v12 = UserManagerService.isUserTypeEligibleForPreCreation(v1);
	UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);
	return v13;
}
-----
depth : 2
public void logUserCreateJourneyFinish(long p1, int p2, boolean p3){
	FrameworkStatsLog.write(265, p1, p2, 3, phiInstruction);
	return;
}
-----
