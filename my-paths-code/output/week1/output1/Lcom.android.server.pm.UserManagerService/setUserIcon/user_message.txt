This is path 1 for the API with depth 2:
depth : 0
public void setUserIcon(int p1, Bitmap p2){
	UserManagerService.checkManageUsersPermission("update users");
	p0.enforceUserRestriction("no_set_user_icon", p1, "Cannot set user icon");
	this.mLocalService.setUserIcon(p1, p2);
	return;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public void setUserIcon(int p1, Bitmap p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = UserManagerService.-$$Nest$fgetmPackagesLock(this.this$0);
	UserManagerService$UserData v3 = UserManagerService.-$$Nest$mgetUserDataNoChecks(this.this$0, p1);
	UserManagerService.-$$Nest$mwriteBitmapLP(this.this$0, UserManagerService$UserData.info, p2);
	UserManagerService.-$$Nest$mwriteUserLP(this.this$0, v3);
	UserManagerService.-$$Nest$msendUserInfoChangedBroadcast(this.this$0, p1);
	Binder.restoreCallingIdentity(v1);
	return;
}
-----
depth : 2
public Object -$$Nest$fgetmPackagesLock(UserManagerService p1){
	return this.mPackagesLock;
}
-----
depth : 2
public UserManagerService$UserData -$$Nest$mgetUserDataNoChecks(UserManagerService p1, int p2){
	UserManagerService$UserData v1 = p1.getUserDataNoChecks(p2);
	return v1;
}
-----
depth : 2
public void -$$Nest$mwriteBitmapLP(UserManagerService p1, UserInfo p2, Bitmap p3){
	p1.writeBitmapLP(p2, p3);
	return;
}
-----
depth : 2
public void -$$Nest$mwriteUserLP(UserManagerService p1, UserManagerService$UserData p2){
	p1.writeUserLP(p2);
	return;
}
-----
depth : 2
public void -$$Nest$msendUserInfoChangedBroadcast(UserManagerService p1, int p2){
	p1.sendUserInfoChangedBroadcast(p2);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void setUserIcon(int p1, Bitmap p2){
	UserManagerService.checkManageUsersPermission("update users");
	p0.enforceUserRestriction("no_set_user_icon", p1, "Cannot set user icon");
	this.mLocalService.setUserIcon(p1, p2);
	return;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public void setUserIcon(int p1, Bitmap p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = UserManagerService.-$$Nest$fgetmPackagesLock(this.this$0);
	UserManagerService$UserData v3 = UserManagerService.-$$Nest$mgetUserDataNoChecks(this.this$0, p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("setUserIcon: unknown user #");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.w("UserManagerService", v7);
	Binder.restoreCallingIdentity(v1);
	return;
}
-----
depth : 2
public Object -$$Nest$fgetmPackagesLock(UserManagerService p1){
	return this.mPackagesLock;
}
-----
depth : 2
public UserManagerService$UserData -$$Nest$mgetUserDataNoChecks(UserManagerService p1, int p2){
	UserManagerService$UserData v1 = p1.getUserDataNoChecks(p2);
	return v1;
}
-----
