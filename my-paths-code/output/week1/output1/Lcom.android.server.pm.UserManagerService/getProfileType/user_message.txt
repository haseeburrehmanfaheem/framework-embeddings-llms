This is path 1 for the API with depth 2:
depth : 0
public String getProfileType(int p1){
	p0.checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getProfileType");
	UserInfo v2 = p0.getUserInfoLU(p1);
	boolean v3 = v2.isProfile();
	return phiInstruction;
}
-----
depth : 1
public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasQueryUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasQueryUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.QUERY_USERS");
	return v1;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public String getProfileType(int p1){
	p0.checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getProfileType");
	UserInfo v2 = p0.getUserInfoLU(p1);
	boolean v3 = v2.isProfile();
	return phiInstruction;
}
-----
depth : 1
public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasQueryUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasQueryUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.QUERY_USERS");
	return v1;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public String getProfileType(int p1){
	p0.checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getProfileType");
	UserInfo v2 = p0.getUserInfoLU(p1);
	boolean v3 = v2.isProfile();
	return phiInstruction;
}
-----
depth : 1
public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasQueryUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasQueryUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.QUERY_USERS");
	return v1;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
