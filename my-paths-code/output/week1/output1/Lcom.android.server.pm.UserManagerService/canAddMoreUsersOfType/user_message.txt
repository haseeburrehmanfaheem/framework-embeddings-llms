This is path 1 for the API with depth 2:
depth : 0
public boolean canAddMoreUsersOfType(String p1){
	UserManagerService.checkCreateUsersPermission("check if more users can be added.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = p0.canAddMoreUsersOfType(v2);
	return phiInstruction;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public boolean canAddMoreUsersOfType(UserTypeDetails p1){
	boolean v1 = p1.isEnabled();
	int v2 = p1.getMaxAllowed();
	String v3 = p1.getName();
	int v4 = p0.getNumberOfUsersOfType(v3);
	return phiInstruction;
}
-----
depth : 2
public boolean isEnabled(){
	return this.mEnabled;
}
-----
depth : 2
public int getMaxAllowed(){
	return this.mMaxAllowed;
}
-----
depth : 2
public String getName(){
	return this.mName;
}
-----
depth : 2
public int getNumberOfUsersOfType(String p1){
	int v1 = this.mUsers.size();
	return phiInstruction;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean canAddMoreUsersOfType(String p1){
	UserManagerService.checkCreateUsersPermission("check if more users can be added.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = p0.canAddMoreUsersOfType(v2);
	return phiInstruction;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public boolean canAddMoreUsersOfType(UserTypeDetails p1){
	boolean v1 = p1.isEnabled();
	int v2 = p1.getMaxAllowed();
	String v3 = p1.getName();
	int v4 = p0.getNumberOfUsersOfType(v3);
	return phiInstruction;
}
-----
depth : 2
public boolean isEnabled(){
	return this.mEnabled;
}
-----
depth : 2
public int getMaxAllowed(){
	return this.mMaxAllowed;
}
-----
depth : 2
public String getName(){
	return this.mName;
}
-----
depth : 2
public int getNumberOfUsersOfType(String p1){
	int v1 = this.mUsers.size();
	return phiInstruction;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean canAddMoreUsersOfType(String p1){
	UserManagerService.checkCreateUsersPermission("check if more users can be added.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = p0.canAddMoreUsersOfType(v2);
	return phiInstruction;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public boolean canAddMoreUsersOfType(UserTypeDetails p1){
	boolean v1 = p1.isEnabled();
	int v2 = p1.getMaxAllowed();
	return 1;
}
-----
depth : 2
public boolean isEnabled(){
	return this.mEnabled;
}
-----
depth : 2
public int getMaxAllowed(){
	return this.mMaxAllowed;
}
-----
