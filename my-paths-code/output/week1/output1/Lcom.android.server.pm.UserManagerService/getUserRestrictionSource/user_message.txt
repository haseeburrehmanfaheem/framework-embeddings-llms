This is path 1 for the API with depth 2:
depth : 0
public int getUserRestrictionSource(String p1, int p2){
	List v1 = p0.getUserRestrictionSources(p1, p2);
	int v2 = v1.size();
	return phiInstruction;
}
-----
depth : 1
public List getUserRestrictionSources(String p1, int p2){
	ArrayList v2 = new ArrayList();
	boolean v4 = p0.hasBaseUserRestriction(p1, p2);
	UserManager$EnforcingUser v4 = new UserManager$EnforcingUser(-10000,1);
	boolean v6 = v2.add(v4);
	RestrictionsSet v7 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p2);
	List v8 = v7.getEnforcingUsers(p1, this.mDeviceOwnerUserId);
	boolean v9 = v2.addAll(v8);
	List v10 = this.mDevicePolicyGlobalUserRestrictions.getEnforcingUsers(p1, this.mDeviceOwnerUserId);
	boolean v11 = v2.addAll(v10);
	return v2;
}
-----
depth : 2
public boolean hasBaseUserRestriction(String p1, int p2){
	UserManagerService.checkCreateUsersPermission("hasBaseUserRestriction");
	boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
	boolean v4 = v3.getBoolean(p1, 0);
	return phiInstruction;
}
-----
depth : 2
public RestrictionsSet getDevicePolicyLocalRestrictionsForTargetUserLR(int p1){
	Object v1 = this.mDevicePolicyLocalUserRestrictions.get(p1);
	RestrictionsSet v1 = new RestrictionsSet();
	this.mDevicePolicyLocalUserRestrictions.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public List getEnforcingUsers(String p1, int p2){
	ArrayList v0 = new ArrayList();
	int v2 = this.mUserRestrictions.size();
	return v0;
}
-----
depth : 2
public List getEnforcingUsers(String p1, int p2){
	ArrayList v0 = new ArrayList();
	int v2 = this.mUserRestrictions.size();
	return v0;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public int getUserRestrictionSource(String p1, int p2){
	List v1 = p0.getUserRestrictionSources(p1, p2);
	int v2 = v1.size();
	return phiInstruction;
}
-----
depth : 1
public List getUserRestrictionSources(String p1, int p2){
	ArrayList v2 = new ArrayList();
	boolean v4 = p0.hasBaseUserRestriction(p1, p2);
	UserManager$EnforcingUser v4 = new UserManager$EnforcingUser(-10000,1);
	boolean v6 = v2.add(v4);
	RestrictionsSet v7 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p2);
	List v8 = v7.getEnforcingUsers(p1, this.mDeviceOwnerUserId);
	boolean v9 = v2.addAll(v8);
	List v10 = this.mDevicePolicyGlobalUserRestrictions.getEnforcingUsers(p1, this.mDeviceOwnerUserId);
	boolean v11 = v2.addAll(v10);
	return v2;
}
-----
depth : 2
public boolean hasBaseUserRestriction(String p1, int p2){
	UserManagerService.checkCreateUsersPermission("hasBaseUserRestriction");
	boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
	Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
	return phiInstruction;
}
-----
depth : 2
public RestrictionsSet getDevicePolicyLocalRestrictionsForTargetUserLR(int p1){
	Object v1 = this.mDevicePolicyLocalUserRestrictions.get(p1);
	RestrictionsSet v1 = new RestrictionsSet();
	this.mDevicePolicyLocalUserRestrictions.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public List getEnforcingUsers(String p1, int p2){
	ArrayList v0 = new ArrayList();
	int v2 = this.mUserRestrictions.size();
	return v0;
}
-----
depth : 2
public List getEnforcingUsers(String p1, int p2){
	ArrayList v0 = new ArrayList();
	int v2 = this.mUserRestrictions.size();
	return v0;
}
-----
