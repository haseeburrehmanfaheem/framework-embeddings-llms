This is path 1 for the API with depth 2:
depth : 0
public int getRemainingCreatableUserCount(String p1){
	UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of users that can be added.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = v2.isEnabled();
	int v4 = p0.getAliveUsersExcludingGuestsCountLU();
	boolean v5 = UserManager.isUserTypeGuest(p1);
	boolean v6 = UserManager.isUserTypeDemo(p1);
	boolean v7 = v2.isManagedProfile();
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature("android.software.managed_users");
	int v10 = v2.getMaxAllowed();
	int v11 = v2.getMaxAllowed();
	int v12 = p0.getNumberOfUsersOfType(p1);
	int v13 = Math.min(phiInstruction, phiInstruction);
	int v14 = Math.max(0, v13);
	return v14;
}
-----
depth : 1
public void checkQueryOrCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasQueryOrCreateUsersPermission(){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	int v2 = Binder.getCallingUid();
	boolean v3 = UserManagerService.hasPermissionGranted("android.permission.QUERY_USERS", v2);
	return phiInstruction;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public int getRemainingCreatableUserCount(String p1){
	UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of users that can be added.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = v2.isEnabled();
	int v4 = p0.getAliveUsersExcludingGuestsCountLU();
	boolean v5 = UserManager.isUserTypeGuest(p1);
	boolean v6 = UserManager.isUserTypeDemo(p1);
	boolean v7 = v2.isManagedProfile();
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature("android.software.managed_users");
	int v10 = v2.getMaxAllowed();
	int v11 = v2.getMaxAllowed();
	int v12 = p0.getNumberOfUsersOfType(p1);
	int v13 = Math.min(phiInstruction, phiInstruction);
	int v14 = Math.max(0, v13);
	return v14;
}
-----
depth : 1
public void checkQueryOrCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasQueryOrCreateUsersPermission(){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	int v2 = Binder.getCallingUid();
	boolean v3 = UserManagerService.hasPermissionGranted("android.permission.QUERY_USERS", v2);
	return phiInstruction;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public int getRemainingCreatableUserCount(String p1){
	UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of users that can be added.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = v2.isEnabled();
	int v4 = p0.getAliveUsersExcludingGuestsCountLU();
	boolean v5 = UserManager.isUserTypeGuest(p1);
	boolean v6 = UserManager.isUserTypeDemo(p1);
	boolean v7 = v2.isManagedProfile();
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature("android.software.managed_users");
	int v10 = v2.getMaxAllowed();
	int v11 = Math.min(phiInstruction, phiInstruction);
	int v12 = Math.max(0, v11);
	return v12;
}
-----
depth : 1
public void checkQueryOrCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasQueryOrCreateUsersPermission(){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	int v2 = Binder.getCallingUid();
	boolean v3 = UserManagerService.hasPermissionGranted("android.permission.QUERY_USERS", v2);
	return phiInstruction;
}
-----
