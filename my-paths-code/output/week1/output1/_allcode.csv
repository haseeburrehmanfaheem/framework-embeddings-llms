EP1_ID,EP2_ID,EP1_Code,EP2_Code,Similarity
getUserInfo(I)Landroid/content/pm/UserInfo;,No similar EPs with similarity > 0.8,,,
getUserBadgeResId(I)I,hasBadge(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");",0.8754937648773193
getUserBadgeResId(I)I,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.8949418663978577
getUserBadgeResId(I)I,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9507584571838379
getUserBadgeResId(I)I,getUserBadgeColorResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,0.8593587875366211
getUserBadgeResId(I)I,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9789021015167236
getUserBadgeResId(I)I,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9619094729423523
getUserBadgeResId(I)I,getUserIconBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,0.9664064645767212
getUserBadgeResId(I)I,getUserIconBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1);,0.8739138841629028
getUserBadgeResId(I)I,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.8744869232177734
getUserBadgeResId(I)I,getUserBadgeNoBackgroundResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,0.9516139626502991
getUserBadgeResId(I)I,getUserBadgeDarkColorResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,0.8590397834777832
getUserBadgeResId(I)I,getUserBadgeLabelResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,0.8595061898231506
getUserBadgeResId(I)I,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9809373021125793
getUserBadgeResId(I)I,getProfileType(I)Ljava/lang/String;,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)","public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8626377582550049
isUserSwitcherEnabled(I)Z,No similar EPs with similarity > 0.8,,,
getProfiles(IZ)Ljava/util/List;,isDemoUser(I)Z,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.8768971562385559
getProfiles(IZ)Ljava/util/List;,canHaveRestrictedProfile(I)Z,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8366724848747253
getProfiles(IZ)Ljava/util/List;,isUserForeground(I)Z,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8615180850028992
getProfiles(IZ)Ljava/util/List;,isUserOfType(ILjava/lang/String;)Z,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9341824650764465
getProfiles(IZ)Ljava/util/List;,isUserNameSet(I)Z,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9693561792373657
getProfiles(IZ)Ljava/util/List;,getUserName()Ljava/lang/String;,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9693561792373657
getProfiles(IZ)Ljava/util/List;,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8372723460197449
getProfiles(IZ)Ljava/util/List;,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8366724848747253
getProfiles(IZ)Ljava/util/List;,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.816504180431366
getProfiles(IZ)Ljava/util/List;,getSeedAccountType(I)Ljava/lang/String;,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8366724848747253
getProfiles(IZ)Ljava/util/List;,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8366724848747253
getProfiles(IZ)Ljava/util/List;,setUserEnabled(I)V,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8366724848747253
getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,setUserRestriction(Ljava/lang/String;ZI)V,"boolean v4 = p0.hasBaseUserRestriction(p1, p2); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2); boolean v4 = v3.getBoolean(p1, 0); return phiInstruction;","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8140348196029663
getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,getUserRestrictionSource(Ljava/lang/String;I)I,"boolean v4 = p0.hasBaseUserRestriction(p1, p2); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2); boolean v4 = v3.getBoolean(p1, 0); return phiInstruction;","List v1 = p0.getUserRestrictionSources(p1, p2); int v2 = v1.size(); return phiInstruction;",0.8156574368476868
getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,getUserRestrictionSource(Ljava/lang/String;I)I,"ArrayList v2 = new ArrayList(); boolean v6 = v2.add(v4); List v8 = v7.getEnforcingUsers(p1, this.mDeviceOwnerUserId); boolean v9 = v2.addAll(v8); return v2;","ArrayList v2 = new ArrayList(); UserManager$EnforcingUser v4 = new UserManager$EnforcingUser(-10000,1); boolean v6 = v2.add(v4);",0.8120923042297363
isDemoUser(I)Z,getProfiles(IZ)Ljava/util/List;,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8768971562385559
isDemoUser(I)Z,canHaveRestrictedProfile(I)Z,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.9099709391593933
isDemoUser(I)Z,canHaveRestrictedProfile(I)Z,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.8671401739120483
isDemoUser(I)Z,isUserForeground(I)Z,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9631252884864807
isDemoUser(I)Z,isUserOfType(ILjava/lang/String;)Z,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8244983553886414
isDemoUser(I)Z,isUserTypeEnabled(Ljava/lang/String;)Z,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.814711332321167
isDemoUser(I)Z,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,0.8194174766540527
isDemoUser(I)Z,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,0.8142462968826294
isDemoUser(I)Z,setUserAdmin(I)V,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);",0.8044556379318237
isDemoUser(I)Z,isUserNameSet(I)Z,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,0.802979052066803
isDemoUser(I)Z,isUserNameSet(I)Z,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9354992508888245
isDemoUser(I)Z,getUserName()Ljava/lang/String;,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9354992508888245
isDemoUser(I)Z,isSameProfileGroup(II)Z,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,0.8208146691322327
isDemoUser(I)Z,setUserName(ILjava/lang/String;)V,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.892310380935669
isDemoUser(I)Z,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.946996808052063
isDemoUser(I)Z,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.8598516583442688
isDemoUser(I)Z,getSeedAccountName(I)Ljava/lang/String;,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.801760196685791
isDemoUser(I)Z,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.9099709391593933
isDemoUser(I)Z,getCredentialOwnerProfile(I)I,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,0.8326346278190613
isDemoUser(I)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8957232236862183
isDemoUser(I)Z,isQuietModeEnabled(I)Z,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,0.8348522782325745
isDemoUser(I)Z,getSeedAccountType(I)Ljava/lang/String;,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.9099709391593933
isDemoUser(I)Z,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.9099709391593933
isDemoUser(I)Z,setUserEnabled(I)V,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.9099709391593933
removeUserEvenWhenDisallowed(I)Z,removeUser(I)Z,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v2 = p0.removeUserUnchecked(p1); return v2;","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();",0.9173704981803894
removeUserEvenWhenDisallowed(I)Z,markGuestForDeletion(I)Z,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v2 = p0.removeUserUnchecked(p1); return v2;","UserManagerService.checkManageUsersPermission(""Only the system can remove users""); int v2 = UserHandle.getCallingUserId(); Bundle v3 = p0.getUserRestrictions(v2); boolean v4 = v3.getBoolean(""no_remove_user"", 0);",0.8576700687408447
requestQuietModeEnabled(Ljava/lang/String;ZILandroid/content/IntentSender;I)Z,isQuietModeEnabled(I)Z,"p0.setQuietModeEnabled(p3, 1, p4, p1); UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getProfileParentLU(p1); boolean v3 = v1.isManagedProfile(); boolean v4 = v1.isQuietModeEnabled(); UserInfo.flags = (UserInfo.flags ^ 128);",UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,0.8151953816413879
canHaveRestrictedProfile(I)Z,getProfiles(IZ)Ljava/util/List;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8366724848747253
canHaveRestrictedProfile(I)Z,isDemoUser(I)Z,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,0.8671401739120483
canHaveRestrictedProfile(I)Z,isDemoUser(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9099709391593933
canHaveRestrictedProfile(I)Z,isUserForeground(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8743652105331421
canHaveRestrictedProfile(I)Z,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,0.8258652687072754
canHaveRestrictedProfile(I)Z,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,0.8405317068099976
canHaveRestrictedProfile(I)Z,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,0.8766711950302124
canHaveRestrictedProfile(I)Z,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
canHaveRestrictedProfile(I)Z,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,0.8287651538848877
canHaveRestrictedProfile(I)Z,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
canHaveRestrictedProfile(I)Z,setUserName(ILjava/lang/String;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.906494140625
canHaveRestrictedProfile(I)Z,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8416682481765747
canHaveRestrictedProfile(I)Z,getUserCreationTime(I)J,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,0.8017342686653137
canHaveRestrictedProfile(I)Z,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.9501102566719055
canHaveRestrictedProfile(I)Z,getSeedAccountName(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.8269932270050049
canHaveRestrictedProfile(I)Z,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
canHaveRestrictedProfile(I)Z,getCredentialOwnerProfile(I)I,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,0.8255176544189453
canHaveRestrictedProfile(I)Z,isQuietModeEnabled(I)Z,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,0.9079347252845764
canHaveRestrictedProfile(I)Z,getSeedAccountType(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
canHaveRestrictedProfile(I)Z,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
canHaveRestrictedProfile(I)Z,setUserEnabled(I)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
isSettingRestrictedForUser(Ljava/lang/String;ILjava/lang/String;I)Z,No similar EPs with similarity > 0.8,,,
getSeedAccountOptions(I)Landroid/os/PersistableBundle;,No similar EPs with similarity > 0.8,,,
addUserRestrictionsListener(Landroid/os/IUserRestrictionsListener;)V,No similar EPs with similarity > 0.8,,,
getUserUnlockRealtime()J,getUserStartRealtime()J,UserManagerService$UserData v3 = p0.getUserDataLU(v2); return UserManagerService$UserData.unlockRealtime;,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,0.8146394491195679
someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,isUserTypeEnabled(Ljava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8370175957679749
someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,getSeedAccountName(I)Ljava/lang/String;,"UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.8485433459281921
someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8549307584762573
someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkManageUsersPermission(""check seed account information""); boolean v2 = p0.someUserHasSeedAccountNoChecks(p1, p2);",0.8596875667572021
getUserRestrictions(I)Landroid/os/Bundle;,hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,0.802370011806488
getUserRestrictions(I)Landroid/os/Bundle;,hasUserRestriction(Ljava/lang/String;I)Z,Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,"Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);",0.8607409000396729
getUserRestrictions(I)Landroid/os/Bundle;,hasUserRestriction(Ljava/lang/String;I)Z,"Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);",0.8094274401664734
getUserRestrictions(I)Landroid/os/Bundle;,setUserRestriction(Ljava/lang/String;ZI)V,Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.84153151512146
getUserRestrictions(I)Landroid/os/Bundle;,setUserRestriction(Ljava/lang/String;ZI)V,"Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8656412363052368
getUserRestrictions(I)Landroid/os/Bundle;,setUserRestriction(Ljava/lang/String;ZI)V,"Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1); Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2); boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);",0.9443613290786743
getUserRestrictions(I)Landroid/os/Bundle;,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8238749504089355
getUserRestrictions(I)Landroid/os/Bundle;,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8027083277702332
getUserRestrictions(I)Landroid/os/Bundle;,removeUserWhenPossible(IZ)I,Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8523498773574829
getUserRestrictions(I)Landroid/os/Bundle;,removeUserWhenPossible(IZ)I,"Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8934767246246338
getUserRestrictions(I)Landroid/os/Bundle;,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,"Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1); StringBuilder v4 = new StringBuilder(); StringBuilder v6 = v4.append(""get application restrictions for other user/app ""); StringBuilder v7 = v4.append(p1); String v8 = v4.toString(); UserManagerService.checkSystemOrRoot(v8); Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); return v10;",0.8336560726165771
isRestricted(I)Z,No similar EPs with similarity > 0.8,,,
hasBadge(I)Z,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.8754937648773193
hasBadge(I)Z,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.8636069297790527
hasBadge(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8299776315689087
hasBadge(I)Z,isUserUnlockingOrUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;",0.8011775016784668
hasBadge(I)Z,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8559697866439819
hasBadge(I)Z,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8292558193206787
hasBadge(I)Z,getUserIconBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); return phiInstruction;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,0.8005485534667969
hasBadge(I)Z,isMediaSharedWithParent(I)Z,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); return phiInstruction;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); String v1 = p0.getUserTypeNoChecks(p1); Object v2 = this.mUserTypes.get(v1); boolean v4 = v2.isMediaSharedWithParent(); return phiInstruction;,0.8443433046340942
hasBadge(I)Z,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.8215504288673401
hasBadge(I)Z,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8701645135879517
hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,getUserRestrictions(I)Landroid/os/Bundle;,boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,0.802370011806488
hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,setUserRestriction(Ljava/lang/String;ZI)V,boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8591769933700562
hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8082215785980225
hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,hasBaseUserRestriction(Ljava/lang/String;I)Z,boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,"UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);",0.8404284715652466
isUserRunning(I)Z,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.8949418663978577
isUserRunning(I)Z,hasBadge(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");",0.8636069297790527
isUserRunning(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9238187670707703
isUserRunning(I)Z,isUserUnlocked(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserRunning(I)Z,isUserUnlockingOrUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;",0.8487232327461243
isUserRunning(I)Z,isUserUnlockingOrUnlocked(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserRunning(I)Z,isCredentialSharableWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;",0.8213932514190674
isUserRunning(I)Z,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8919421434402466
isUserRunning(I)Z,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9297858476638794
isUserRunning(I)Z,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.9313556551933289
isUserRunning(I)Z,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8923491835594177
isUserRunning(I)Z,getProfileType(I)Ljava/lang/String;,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);","public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8161318302154541
getProfileIds(IZ)[I,No similar EPs with similarity > 0.8,,,
isUserForeground(I)Z,getProfiles(IZ)Ljava/util/List;,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8615180850028992
isUserForeground(I)Z,isDemoUser(I)Z,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9631252884864807
isUserForeground(I)Z,canHaveRestrictedProfile(I)Z,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8743652105331421
isUserForeground(I)Z,isUserOfType(ILjava/lang/String;)Z,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8147373795509338
isUserForeground(I)Z,isUserTypeEnabled(Ljava/lang/String;)Z,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8137876391410828
isUserForeground(I)Z,setUserAdmin(I)V,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);",0.8237677216529846
isUserForeground(I)Z,isUserNameSet(I)Z,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9155557751655579
isUserForeground(I)Z,isUserUnlocked(I)Z,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8009375333786011
isUserForeground(I)Z,getUserName()Ljava/lang/String;,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9155557751655579
isUserForeground(I)Z,setUserName(ILjava/lang/String;)V,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.8443646430969238
isUserForeground(I)Z,getUserBadgeColorResId(I)I,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8066308498382568
isUserForeground(I)Z,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9686480760574341
isUserForeground(I)Z,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8743652105331421
isUserForeground(I)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8887454271316528
isUserForeground(I)Z,getSeedAccountType(I)Ljava/lang/String;,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8743652105331421
isUserForeground(I)Z,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8743652105331421
isUserForeground(I)Z,setUserEnabled(I)V,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8743652105331421
isUserOfType(ILjava/lang/String;)Z,getProfiles(IZ)Ljava/util/List;,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9341824650764465
isUserOfType(ILjava/lang/String;)Z,isDemoUser(I)Z,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.8244983553886414
isUserOfType(ILjava/lang/String;)Z,isUserForeground(I)Z,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8147373795509338
isUserOfType(ILjava/lang/String;)Z,isUserTypeEnabled(Ljava/lang/String;)Z,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8412986993789673
isUserOfType(ILjava/lang/String;)Z,preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,String v2 = p0.getUserTypeNoChecks(p1); UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1);,"Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;",0.810427188873291
isUserOfType(ILjava/lang/String;)Z,isUserNameSet(I)Z,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9047053456306458
isUserOfType(ILjava/lang/String;)Z,getUserName()Ljava/lang/String;,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9047053456306458
isUserOfType(ILjava/lang/String;)Z,getUserStartRealtime()J,String v2 = p0.getUserTypeNoChecks(p1); UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1);,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,0.8120465874671936
isUserOfType(ILjava/lang/String;)Z,getUserSerialNumber(I)I,String v2 = p0.getUserTypeNoChecks(p1); UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1);,UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,0.8100606203079224
isUserOfType(ILjava/lang/String;)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8135606050491333
isUserTypeEnabled(Ljava/lang/String;)Z,isDemoUser(I)Z,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.814711332321167
isUserTypeEnabled(Ljava/lang/String;)Z,someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8370175957679749
isUserTypeEnabled(Ljava/lang/String;)Z,isUserForeground(I)Z,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8137876391410828
isUserTypeEnabled(Ljava/lang/String;)Z,isUserOfType(ILjava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8412986993789673
isUserTypeEnabled(Ljava/lang/String;)Z,removeUser(I)Z,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();",0.8412235975265503
isUserTypeEnabled(Ljava/lang/String;)Z,setUserAdmin(I)V,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);",0.8265868425369263
isUserTypeEnabled(Ljava/lang/String;)Z,isUserNameSet(I)Z,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.811987042427063
isUserTypeEnabled(Ljava/lang/String;)Z,getUserName()Ljava/lang/String;,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.811987042427063
isUserTypeEnabled(Ljava/lang/String;)Z,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8205665349960327
isUserTypeEnabled(Ljava/lang/String;)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.932373583316803
setApplicationRestrictions(Ljava/lang/String;Landroid/os/Bundle;I)V,getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,"UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3); File v1 = Environment.getUserSystemDirectory(p3); String v2 = UserManagerService.packageToRestrictionsFileName(p1); UserManagerService.writeApplicationRestrictionsLAr(p2, v0);","Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);",0.8589118719100952
setApplicationRestrictions(Ljava/lang/String;Landroid/os/Bundle;I)V,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,"UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3); File v1 = Environment.getUserSystemDirectory(p3); String v2 = UserManagerService.packageToRestrictionsFileName(p1); UserManagerService.writeApplicationRestrictionsLAr(p2, v0);",File v1 = Environment.getUserSystemDirectory(p2); String v2 = UserManagerService.packageToRestrictionsFileName(p1); AtomicFile v0 = new AtomicFile(v0); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0); return v5;,0.8454561829566956
getProfileParent(I)Landroid/content/pm/UserInfo;,isDemoUser(I)Z,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,0.8194174766540527
getProfileParent(I)Landroid/content/pm/UserInfo;,isDemoUser(I)Z,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,0.8142462968826294
getProfileParent(I)Landroid/content/pm/UserInfo;,canHaveRestrictedProfile(I)Z,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.8258652687072754
getProfileParent(I)Landroid/content/pm/UserInfo;,canHaveRestrictedProfile(I)Z,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.8405317068099976
getProfileParent(I)Landroid/content/pm/UserInfo;,isSameProfileGroup(II)Z,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,0.8098517060279846
getProfileParent(I)Landroid/content/pm/UserInfo;,isSameProfileGroup(II)Z,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,0.8641630411148071
getProfileParent(I)Landroid/content/pm/UserInfo;,getUserCreationTime(I)J,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,0.9229633808135986
getProfileParent(I)Landroid/content/pm/UserInfo;,getUserCreationTime(I)J,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,0.8284186124801636
getProfileParent(I)Landroid/content/pm/UserInfo;,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.8544086813926697
getProfileParent(I)Landroid/content/pm/UserInfo;,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.872395396232605
getProfileParent(I)Landroid/content/pm/UserInfo;,getCredentialOwnerProfile(I)I,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,0.9353470206260681
getProfileParent(I)Landroid/content/pm/UserInfo;,getCredentialOwnerProfile(I)I,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,0.8561033010482788
getProfileParent(I)Landroid/content/pm/UserInfo;,isQuietModeEnabled(I)Z,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,0.8195012807846069
preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,isUserOfType(ILjava/lang/String;)Z,"Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;",String v2 = p0.getUserTypeNoChecks(p1); UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1);,0.810427188873291
preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,getRemainingCreatableUserCount(Ljava/lang/String;)I,"Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;","Object v2 = this.mUserTypes.get(p1); boolean v3 = v2.isEnabled(); int v10 = v2.getMaxAllowed(); int v12 = p0.getNumberOfUsersOfType(p1); int v13 = Math.min(phiInstruction, phiInstruction); int v14 = Math.max(0, v13); return v14;",0.810904860496521
preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;","UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);",0.8273171782493591
removeUser(I)Z,removeUserEvenWhenDisallowed(I)Z,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v2 = p0.removeUserUnchecked(p1); return v2;",0.9173704981803894
removeUser(I)Z,isUserTypeEnabled(Ljava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8412235975265503
removeUser(I)Z,markGuestForDeletion(I)Z,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();","UserManagerService.checkManageUsersPermission(""Only the system can remove users""); int v2 = UserHandle.getCallingUserId(); Bundle v3 = p0.getUserRestrictions(v2); boolean v4 = v3.getBoolean(""no_remove_user"", 0);",0.8626486659049988
removeUser(I)Z,removeUserWhenPossible(IZ)I,String v7 = p0.getUserRemovalRestriction(p1); UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile();,String v2 = p0.getUserRemovalRestriction(p1); UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile();,0.9889239072799683
removeUser(I)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8347028493881226
setUserEphemeral(IZ)Z,No similar EPs with similarity > 0.8,,,
hasRestrictedProfiles(I)Z,No similar EPs with similarity > 0.8,,,
markGuestForDeletion(I)Z,removeUserEvenWhenDisallowed(I)Z,"UserManagerService.checkManageUsersPermission(""Only the system can remove users""); int v2 = UserHandle.getCallingUserId(); Bundle v3 = p0.getUserRestrictions(v2); boolean v4 = v3.getBoolean(""no_remove_user"", 0);","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v2 = p0.removeUserUnchecked(p1); return v2;",0.8576700687408447
markGuestForDeletion(I)Z,removeUser(I)Z,"UserManagerService.checkManageUsersPermission(""Only the system can remove users""); int v2 = UserHandle.getCallingUserId(); Bundle v3 = p0.getUserRestrictions(v2); boolean v4 = v3.getBoolean(""no_remove_user"", 0);","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();",0.8626486659049988
setUserAdmin(I)V,isDemoUser(I)Z,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.8044556379318237
setUserAdmin(I)V,isUserForeground(I)Z,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8237677216529846
setUserAdmin(I)V,isUserTypeEnabled(Ljava/lang/String;)Z,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8265868425369263
setUserAdmin(I)V,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8148960471153259
setUserAdmin(I)V,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.847641110420227
setUserAdmin(I)V,setUserAccount(ILjava/lang/String;)V,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user account"");",0.8861690759658813
setUserAdmin(I)V,setUserEnabled(I)V,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.isAdmin(); UserInfo.flags = (UserInfo.flags ^ 2); UserManagerService$UserData v4 = p0.getUserDataLU(UserInfo.id); p0.writeUserLP(v4);,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.isEnabled(); UserInfo.flags = (UserInfo.flags ^ 64); UserManagerService$UserData v4 = p0.getUserDataLU(UserInfo.id); p0.writeUserLP(v4);,0.9844028949737549
isUserNameSet(I)Z,getProfiles(IZ)Ljava/util/List;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9693561792373657
isUserNameSet(I)Z,isDemoUser(I)Z,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.802979052066803
isUserNameSet(I)Z,isDemoUser(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9354992508888245
isUserNameSet(I)Z,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8766711950302124
isUserNameSet(I)Z,canHaveRestrictedProfile(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
isUserNameSet(I)Z,isUserForeground(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9155557751655579
isUserNameSet(I)Z,isUserOfType(ILjava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9047053456306458
isUserNameSet(I)Z,isUserTypeEnabled(Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.811987042427063
isUserNameSet(I)Z,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,0.9290438890457153
isUserNameSet(I)Z,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8098296523094177
isUserNameSet(I)Z,getUserName()Ljava/lang/String;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",1.0
isUserNameSet(I)Z,setUserName(ILjava/lang/String;)V,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.836755633354187
isUserNameSet(I)Z,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8957867622375488
isUserNameSet(I)Z,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8766711950302124
isUserNameSet(I)Z,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
isUserNameSet(I)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8817761540412903
isUserNameSet(I)Z,getSeedAccountType(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8766711950302124
isUserNameSet(I)Z,getSeedAccountType(I)Ljava/lang/String;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
isUserNameSet(I)Z,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8766711950302124
isUserNameSet(I)Z,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
isUserNameSet(I)Z,setUserEnabled(I)V,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8766711950302124
isUserNameSet(I)Z,setUserEnabled(I)V,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
hasUserRestriction(Ljava/lang/String;I)Z,getUserRestrictions(I)Landroid/os/Bundle;,"Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);",Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,0.8607409000396729
hasUserRestriction(Ljava/lang/String;I)Z,getUserRestrictions(I)Landroid/os/Bundle;,"Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);","Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8094274401664734
hasUserRestriction(Ljava/lang/String;I)Z,setUserRestriction(Ljava/lang/String;ZI)V,"Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8261253237724304
hasUserRestriction(Ljava/lang/String;I)Z,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);","p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.807986855506897
hasUserRestriction(Ljava/lang/String;I)Z,removeUserWhenPossible(IZ)I,"Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8400041460990906
setUserRestriction(Ljava/lang/String;ZI)V,getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","boolean v4 = p0.hasBaseUserRestriction(p1, p2); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2); boolean v4 = v3.getBoolean(p1, 0); return phiInstruction;",0.8140348196029663
setUserRestriction(Ljava/lang/String;ZI)V,getUserRestrictions(I)Landroid/os/Bundle;,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,0.84153151512146
setUserRestriction(Ljava/lang/String;ZI)V,getUserRestrictions(I)Landroid/os/Bundle;,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8656412363052368
setUserRestriction(Ljava/lang/String;ZI)V,getUserRestrictions(I)Landroid/os/Bundle;,"boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1); Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2); boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);","Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.9443613290786743
setUserRestriction(Ljava/lang/String;ZI)V,hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,0.8591769933700562
setUserRestriction(Ljava/lang/String;ZI)V,hasUserRestriction(Ljava/lang/String;I)Z,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);",0.8261253237724304
setUserRestriction(Ljava/lang/String;ZI)V,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.910153329372406
setUserRestriction(Ljava/lang/String;ZI)V,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1); Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2); boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);","p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8106112480163574
setUserRestriction(Ljava/lang/String;ZI)V,removeUserWhenPossible(IZ)I,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.862502932548523
setUserRestriction(Ljava/lang/String;ZI)V,removeUserWhenPossible(IZ)I,"boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1); Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2); boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8694451451301575
setUserRestriction(Ljava/lang/String;ZI)V,hasBaseUserRestriction(Ljava/lang/String;I)Z,"boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);",0.8520787358283997
getProfileParentId(I)I,No similar EPs with similarity > 0.8,,,
isUserUnlocked(I)Z,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.9507584571838379
isUserUnlocked(I)Z,hasBadge(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");",0.8299776315689087
isUserUnlocked(I)Z,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.9238187670707703
isUserUnlocked(I)Z,isUserRunning(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserUnlocked(I)Z,isUserForeground(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8009375333786011
isUserUnlocked(I)Z,isUserUnlockingOrUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;",0.873489499092102
isUserUnlocked(I)Z,isUserUnlockingOrUnlocked(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserUnlocked(I)Z,isCredentialSharableWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;",0.8159065246582031
isUserUnlocked(I)Z,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9664807915687561
isUserUnlocked(I)Z,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.968237042427063
isUserUnlocked(I)Z,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.925527811050415
isUserUnlocked(I)Z,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.954802393913269
isUserUnlocked(I)Z,getProfileType(I)Ljava/lang/String;,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8644905686378479
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,getUserRestrictions(I)Landroid/os/Bundle;,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,0.8238749504089355
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,getUserRestrictions(I)Landroid/os/Bundle;,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8027083277702332
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,0.8082215785980225
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,hasUserRestriction(Ljava/lang/String;I)Z,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);",0.807986855506897
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,setUserRestriction(Ljava/lang/String;ZI)V,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.910153329372406
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,setUserRestriction(Ljava/lang/String;ZI)V,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1); Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2); boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);",0.8106112480163574
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;","UserManagerService.checkCreateUsersPermission(p3); UserInfo v2 = p0.createUserInternal(p1, p2, p3, -10000, 0); return v2;",0.8281116485595703
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;","UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;",0.858029305934906
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,"UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;",UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.8146615028381348
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,removeUserWhenPossible(IZ)I,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8586581349372864
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,hasBaseUserRestriction(Ljava/lang/String;I)Z,"p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);","UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);",0.827533483505249
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;","UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",0.8068329095840454
createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;","UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7); return v9;",0.8165916800498962
getUserName()Ljava/lang/String;,getProfiles(IZ)Ljava/util/List;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9693561792373657
getUserName()Ljava/lang/String;,isDemoUser(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9354992508888245
getUserName()Ljava/lang/String;,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8287651538848877
getUserName()Ljava/lang/String;,canHaveRestrictedProfile(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
getUserName()Ljava/lang/String;,isUserForeground(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9155557751655579
getUserName()Ljava/lang/String;,isUserOfType(ILjava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.9047053456306458
getUserName()Ljava/lang/String;,isUserTypeEnabled(Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.811987042427063
getUserName()Ljava/lang/String;,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,0.9290438890457153
getUserName()Ljava/lang/String;,isUserNameSet(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,0.8098296523094177
getUserName()Ljava/lang/String;,isUserNameSet(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",1.0
getUserName()Ljava/lang/String;,setUserName(ILjava/lang/String;)V,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.836755633354187
getUserName()Ljava/lang/String;,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8957867622375488
getUserName()Ljava/lang/String;,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8287651538848877
getUserName()Ljava/lang/String;,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
getUserName()Ljava/lang/String;,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8817761540412903
getUserName()Ljava/lang/String;,getSeedAccountType(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8287651538848877
getUserName()Ljava/lang/String;,getSeedAccountType(I)Ljava/lang/String;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
getUserName()Ljava/lang/String;,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8287651538848877
getUserName()Ljava/lang/String;,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
getUserName()Ljava/lang/String;,setUserEnabled(I)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8287651538848877
getUserName()Ljava/lang/String;,setUserEnabled(I)V,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8736966252326965
isSameProfileGroup(II)Z,isDemoUser(I)Z,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,0.8208146691322327
isSameProfileGroup(II)Z,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,0.8098517060279846
isSameProfileGroup(II)Z,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,0.8641630411148071
isSameProfileGroup(II)Z,getUserCreationTime(I)J,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1); return phiInstruction;,0.8219866156578064
isSameProfileGroup(II)Z,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.8035290837287903
isSameProfileGroup(II)Z,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,"UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",0.8084977865219116
isSameProfileGroup(II)Z,getUserSerialNumber(I)I,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,0.8879214525222778
getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,setApplicationRestrictions(Ljava/lang/String;Landroid/os/Bundle;I)V,"Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);","UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3); File v1 = Environment.getUserSystemDirectory(p3); String v2 = UserManagerService.packageToRestrictionsFileName(p1); UserManagerService.writeApplicationRestrictionsLAr(p2, v0);",0.8589118719100952
getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,"Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);","Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1); StringBuilder v4 = new StringBuilder(); StringBuilder v6 = v4.append(""get application restrictions for other user/app ""); StringBuilder v7 = v4.append(p1); String v8 = v4.toString(); UserManagerService.checkSystemOrRoot(v8); Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); return v10;",0.863210916519165
getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,"Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);",File v1 = Environment.getUserSystemDirectory(p2); String v2 = UserManagerService.packageToRestrictionsFileName(p1); AtomicFile v0 = new AtomicFile(v0); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0); return v5;,0.9336578249931335
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserManagerService.checkCreateUsersPermission(p3); UserInfo v2 = p0.createUserInternal(p1, p2, p3, -10000, 0); return v2;","UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;",0.8281116485595703
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;","UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;",0.858029305934906
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;","UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);",0.8332293629646301
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserManagerService.checkCreateUsersPermission(p3); UserInfo v2 = p0.createUserInternal(p1, p2, p3, -10000, 0); return v2;","UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",0.8216109275817871
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;","UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",0.962058424949646
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;","UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7); return v9;",0.9201406240463257
createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;","UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);",0.8207842707633972
getUserStartRealtime()J,getUserUnlockRealtime()J,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,UserManagerService$UserData v3 = p0.getUserDataLU(v2); return UserManagerService$UserData.unlockRealtime;,0.8146394491195679
getUserStartRealtime()J,isUserOfType(ILjava/lang/String;)Z,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,String v2 = p0.getUserTypeNoChecks(p1); UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1);,0.8120465874671936
getUserStartRealtime()J,getUserAccount(I)Ljava/lang/String;,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,Object v2 = this.mUsers.get(p1); return UserManagerService$UserData.account;,0.8352342844009399
getUserRestrictionSource(Ljava/lang/String;I)I,getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,"List v1 = p0.getUserRestrictionSources(p1, p2); int v2 = v1.size(); return phiInstruction;","boolean v4 = p0.hasBaseUserRestriction(p1, p2); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2); boolean v4 = v3.getBoolean(p1, 0); return phiInstruction;",0.8156574368476868
getUserRestrictionSource(Ljava/lang/String;I)I,getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List;,"ArrayList v2 = new ArrayList(); UserManager$EnforcingUser v4 = new UserManager$EnforcingUser(-10000,1); boolean v6 = v2.add(v4);","ArrayList v2 = new ArrayList(); boolean v6 = v2.add(v4); List v8 = v7.getEnforcingUsers(p1, this.mDeviceOwnerUserId); boolean v9 = v2.addAll(v8); return v2;",0.8120923042297363
isUserUnlockingOrUnlocked(I)Z,hasBadge(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");",0.8011775016784668
isUserUnlockingOrUnlocked(I)Z,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.8487232327461243
isUserUnlockingOrUnlocked(I)Z,isUserRunning(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserUnlockingOrUnlocked(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.873489499092102
isUserUnlockingOrUnlocked(I)Z,isUserUnlocked(I)Z,"UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);","UserManagerService$WatchedUserStates v1 = UserManagerService.-$$Nest$fgetmUserStates(this.this$0); int v3 = v2.get(p1, -1);",1.0000001192092896
isUserUnlockingOrUnlocked(I)Z,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.808603823184967
isUserUnlockingOrUnlocked(I)Z,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.8332289457321167
setUserName(ILjava/lang/String;)V,isDemoUser(I)Z,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.892310380935669
setUserName(ILjava/lang/String;)V,canHaveRestrictedProfile(I)Z,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.906494140625
setUserName(ILjava/lang/String;)V,isUserForeground(I)Z,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8443646430969238
setUserName(ILjava/lang/String;)V,isUserNameSet(I)Z,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.836755633354187
setUserName(ILjava/lang/String;)V,getUserName()Ljava/lang/String;,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.836755633354187
setUserName(ILjava/lang/String;)V,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8206250071525574
setUserName(ILjava/lang/String;)V,getSeedAccountName(I)Ljava/lang/String;,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);","UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.8454791307449341
setUserName(ILjava/lang/String;)V,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.906494140625
setUserName(ILjava/lang/String;)V,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8022787570953369
setUserName(ILjava/lang/String;)V,getSeedAccountType(I)Ljava/lang/String;,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.906494140625
setUserName(ILjava/lang/String;)V,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.906494140625
setUserName(ILjava/lang/String;)V,setUserEnabled(I)V,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.906494140625
isCredentialSharableWithParent(I)Z,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.8213932514190674
isCredentialSharableWithParent(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8159065246582031
isCredentialSharableWithParent(I)Z,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8069270849227905
isCredentialSharableWithParent(I)Z,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8008530735969543
isCredentialSharableWithParent(I)Z,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.8001501560211182
isCredentialSharableWithParent(I)Z,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8025122880935669
getUserBadgeColorResId(I)I,getUserBadgeResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,0.8593587875366211
getUserBadgeColorResId(I)I,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.9789021015167236
getUserBadgeColorResId(I)I,hasBadge(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");",0.8559697866439819
getUserBadgeColorResId(I)I,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.8919421434402466
getUserBadgeColorResId(I)I,isUserForeground(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8066308498382568
getUserBadgeColorResId(I)I,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9664807915687561
getUserBadgeColorResId(I)I,isCredentialSharableWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;",0.8069270849227905
getUserBadgeColorResId(I)I,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9533453583717346
getUserBadgeColorResId(I)I,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,"UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);",0.845057487487793
getUserBadgeColorResId(I)I,getUserIconBadgeResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,0.8783040642738342
getUserBadgeColorResId(I)I,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.902385950088501
getUserBadgeColorResId(I)I,getUserBadgeNoBackgroundResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,0.868392825126648
getUserBadgeColorResId(I)I,getUserBadgeDarkColorResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,0.9825477600097656
getUserBadgeColorResId(I)I,getUserBadgeLabelResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,0.978567898273468
getUserBadgeColorResId(I)I,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.989261269569397
getUserBadgeColorResId(I)I,getProfileType(I)Ljava/lang/String;,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8465462327003479
isPreCreated(I)Z,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.9619094729423523
isPreCreated(I)Z,hasBadge(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");",0.8292558193206787
isPreCreated(I)Z,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.9297858476638794
isPreCreated(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.968237042427063
isPreCreated(I)Z,isUserUnlockingOrUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;",0.808603823184967
isPreCreated(I)Z,isCredentialSharableWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;",0.8008530735969543
isPreCreated(I)Z,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9533453583717346
isPreCreated(I)Z,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.9082564115524292
isPreCreated(I)Z,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9493933916091919
isPreCreated(I)Z,getSeedAccountType(I)Ljava/lang/String;,UserInfo v2 = p0.getUserInfoLU(p1); return phiInstruction;,UserManagerService$UserData v2 = p0.getUserDataLU(p1); return phiInstruction;,0.8778737187385559
isPreCreated(I)Z,getProfileType(I)Ljava/lang/String;,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8786324262619019
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,getProfiles(IZ)Ljava/util/List;,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8372723460197449
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,isDemoUser(I)Z,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.946996808052063
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,canHaveRestrictedProfile(I)Z,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8416682481765747
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,isUserForeground(I)Z,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9686480760574341
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,isUserTypeEnabled(Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8205665349960327
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,setUserAdmin(I)V,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);",0.8148960471153259
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,isUserNameSet(I)Z,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8957867622375488
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,getUserName()Ljava/lang/String;,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8957867622375488
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);","UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;",0.8332293629646301
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,setUserName(ILjava/lang/String;)V,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.8206250071525574
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,getUserBadgeColorResId(I)I,"UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);",UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,0.845057487487793
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8416682481765747
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);","UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",0.8283630609512329
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,getUserBadgeDarkColorResId(I)I,"UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);",UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,0.8467649817466736
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,getUserBadgeLabelResId(I)I,"UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);",UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,0.8438131213188171
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);","boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.9004337191581726
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,getSeedAccountType(I)Ljava/lang/String;,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8416682481765747
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8416682481765747
getUserIcon(I)Landroid/os/ParcelFileDescriptor;,setUserEnabled(I)V,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8416682481765747
getUserCreationTime(I)J,canHaveRestrictedProfile(I)Z,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.8017342686653137
getUserCreationTime(I)J,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,0.9229633808135986
getUserCreationTime(I)J,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,0.8284186124801636
getUserCreationTime(I)J,isSameProfileGroup(II)Z,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1); return phiInstruction;,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,0.8219866156578064
getUserCreationTime(I)J,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.8238787651062012
getUserCreationTime(I)J,getCredentialOwnerProfile(I)I,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,0.9532679319381714
getUserCreationTime(I)J,findCurrentGuestUser()Landroid/content/pm/UserInfo;,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1); return phiInstruction;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isGuest(); boolean v5 = this.mRemovingUserIds.get(UserInfo.id); return UserManagerService$UserData.info;,0.8199714422225952
getPrimaryUser()Landroid/content/pm/UserInfo;,findCurrentGuestUser()Landroid/content/pm/UserInfo;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isPrimary(); return UserManagerService$UserData.info;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isGuest(); boolean v5 = this.mRemovingUserIds.get(UserInfo.id); return UserManagerService$UserData.info;,0.9065591096878052
getUserIconBadgeResId(I)I,getUserBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,0.9664064645767212
getUserIconBadgeResId(I)I,getUserBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1);,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,0.8739138841629028
getUserIconBadgeResId(I)I,hasBadge(I)Z,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); return phiInstruction;,0.8005485534667969
getUserIconBadgeResId(I)I,getUserBadgeColorResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,0.8783040642738342
getUserIconBadgeResId(I)I,getUserBadgeNoBackgroundResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,0.9389290809631348
getUserIconBadgeResId(I)I,getUserBadgeNoBackgroundResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1);,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,0.8419698476791382
getUserIconBadgeResId(I)I,getUserBadgeDarkColorResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,0.8762280344963074
getUserIconBadgeResId(I)I,getUserBadgeLabelResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,0.8787320852279663
isMediaSharedWithParent(I)Z,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.8744869232177734
isMediaSharedWithParent(I)Z,hasBadge(I)Z,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); String v1 = p0.getUserTypeNoChecks(p1); Object v2 = this.mUserTypes.get(v1); boolean v4 = v2.isMediaSharedWithParent(); return phiInstruction;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); return phiInstruction;,0.8443433046340942
isMediaSharedWithParent(I)Z,hasBadge(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");",0.8215504288673401
isMediaSharedWithParent(I)Z,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.9313556551933289
isMediaSharedWithParent(I)Z,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.925527811050415
isMediaSharedWithParent(I)Z,isUserUnlockingOrUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlockingOrUnlocked""); boolean v2 = this.mLocalService.isUserUnlockingOrUnlocked(p1); return v2;",0.8332289457321167
isMediaSharedWithParent(I)Z,isCredentialSharableWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;",0.8001501560211182
isMediaSharedWithParent(I)Z,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.902385950088501
isMediaSharedWithParent(I)Z,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9082564115524292
isMediaSharedWithParent(I)Z,getUserBadgeLabelResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8931283354759216
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,isDemoUser(I)Z,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,0.8598516583442688
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,canHaveRestrictedProfile(I)Z,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.9501102566719055
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,0.8544086813926697
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,0.872395396232605
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,"UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;",0.8146615028381348
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,isSameProfileGroup(II)Z,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,0.8035290837287903
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,getUserCreationTime(I)J,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,0.8238787651062012
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,canAddMoreUsersOfType(Ljava/lang/String;)Z,Object v2 = this.mUserTypes.get(p1); boolean v3 = v2.isEnabled(); boolean v4 = v2.isManagedProfile();,Object v2 = this.mUserTypes.get(p1); boolean v3 = p0.canAddMoreUsersOfType(v2);,0.8045931458473206
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,getCredentialOwnerProfile(I)I,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,0.8475046157836914
getRemainingCreatableProfileCount(Ljava/lang/String;I)I,isQuietModeEnabled(I)Z,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,0.8871009349822998
evictCredentialEncryptionKey(I)V,No similar EPs with similarity > 0.8,,,
removeUserWhenPossible(IZ)I,getUserRestrictions(I)Landroid/os/Bundle;,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,0.8523498773574829
removeUserWhenPossible(IZ)I,getUserRestrictions(I)Landroid/os/Bundle;,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1); Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8934767246246338
removeUserWhenPossible(IZ)I,removeUser(I)Z,String v2 = p0.getUserRemovalRestriction(p1); UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile();,String v7 = p0.getUserRemovalRestriction(p1); UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile();,0.9889239072799683
removeUserWhenPossible(IZ)I,hasUserRestriction(Ljava/lang/String;I)Z,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","Bundle v2 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2); boolean v3 = v2.getBoolean(p1);",0.8400041460990906
removeUserWhenPossible(IZ)I,setUserRestriction(Ljava/lang/String;ZI)V,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.862502932548523
removeUserWhenPossible(IZ)I,setUserRestriction(Ljava/lang/String;ZI)V,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","boolean v7 = this.mBaseUserRestrictions.updateRestrictions(p2, p1); Bundle v10 = p0.computeEffectiveUserRestrictionsLR(p2); boolean v11 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p2, v10);",0.8694451451301575
removeUserWhenPossible(IZ)I,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8586581349372864
removeUserWhenPossible(IZ)I,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,"Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);","Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1); StringBuilder v4 = new StringBuilder(); StringBuilder v6 = v4.append(""get application restrictions for other user/app ""); StringBuilder v7 = v4.append(p1); String v8 = v4.toString(); UserManagerService.checkSystemOrRoot(v8); Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); return v10;",0.8075223565101624
getSeedAccountName(I)Ljava/lang/String;,isDemoUser(I)Z,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.801760196685791
getSeedAccountName(I)Ljava/lang/String;,canHaveRestrictedProfile(I)Z,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8269932270050049
getSeedAccountName(I)Ljava/lang/String;,someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();","UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8485433459281921
getSeedAccountName(I)Ljava/lang/String;,setUserName(ILjava/lang/String;)V,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();","UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.8454791307449341
getSeedAccountName(I)Ljava/lang/String;,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8269932270050049
getSeedAccountName(I)Ljava/lang/String;,getSeedAccountType(I)Ljava/lang/String;,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8269932270050049
getSeedAccountName(I)Ljava/lang/String;,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();","UserManagerService.checkManageUsersPermission(""check seed account information""); boolean v2 = p0.someUserHasSeedAccountNoChecks(p1, p2);",0.8523678779602051
getSeedAccountName(I)Ljava/lang/String;,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8269932270050049
getSeedAccountName(I)Ljava/lang/String;,setUserEnabled(I)V,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,0.8269932270050049
getRemainingCreatableUserCount(Ljava/lang/String;)I,preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,"Object v2 = this.mUserTypes.get(p1); boolean v3 = v2.isEnabled(); int v10 = v2.getMaxAllowed(); int v12 = p0.getNumberOfUsersOfType(p1); int v13 = Math.min(phiInstruction, phiInstruction); int v14 = Math.max(0, v13); return v14;","Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;",0.810904860496521
getRemainingCreatableUserCount(Ljava/lang/String;)I,canAddMoreProfilesToUser(Ljava/lang/String;IZ)Z,"UserManagerService.checkQueryOrCreateUsersPermission(""get the remaining number of users that can be added."");","UserManagerService.checkQueryOrCreateUsersPermission(""get the remaining number of profiles that can be added to the given user.""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();",0.8910335898399353
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,getProfiles(IZ)Ljava/util/List;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8366724848747253
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,isDemoUser(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9099709391593933
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,isUserForeground(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8743652105331421
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,0.8766711950302124
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,0.8287651538848877
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,setUserName(ILjava/lang/String;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.906494140625
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8416682481765747
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,getSeedAccountName(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.8269932270050049
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,getSeedAccountType(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setDefaultGuestRestrictions(Landroid/os/Bundle;)V,setUserEnabled(I)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
getUserBadgeNoBackgroundResId(I)I,getUserBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,0.9516139626502991
getUserBadgeNoBackgroundResId(I)I,getUserBadgeColorResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,0.868392825126648
getUserBadgeNoBackgroundResId(I)I,getUserIconBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,0.9389290809631348
getUserBadgeNoBackgroundResId(I)I,getUserIconBadgeResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1);,0.8419698476791382
getUserBadgeNoBackgroundResId(I)I,getUserBadgeDarkColorResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,0.8625856041908264
getUserBadgeNoBackgroundResId(I)I,getUserBadgeLabelResId(I)I,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,0.8573078513145447
getUserAccount(I)Ljava/lang/String;,getUserStartRealtime()J,Object v2 = this.mUsers.get(p1); return UserManagerService$UserData.account;,UserManagerService$UserData v3 = p0.getUserDataLU(v2); Object v1 = this.mUsers.get(p1); return v1;,0.8352342844009399
getUserAccount(I)Ljava/lang/String;,setUserAccount(ILjava/lang/String;)V,Object v2 = this.mUsers.get(p1); return UserManagerService$UserData.account;,"Object v2 = this.mUsers.get(p1); boolean v3 = Objects.equals(UserManagerService$UserData.account, p2); UserManagerService$UserData.account = p2;",0.9193761348724365
hasBaseUserRestriction(Ljava/lang/String;I)Z,hasUserRestrictionOnAnyUser(Ljava/lang/String;)Z,"UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);",boolean v1 = UserRestrictionsUtils.isValidRestriction(p1); List v2 = p0.getUsers(1); Bundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);,0.8404284715652466
hasBaseUserRestriction(Ljava/lang/String;I)Z,setUserRestriction(Ljava/lang/String;ZI)V,"UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);","boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.8520787358283997
hasBaseUserRestriction(Ljava/lang/String;I)Z,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserManagerService.checkCreateUsersPermission(""hasBaseUserRestriction""); boolean v2 = UserRestrictionsUtils.isValidRestriction(p1); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);","p0.setUserRestriction(""no_modify_accounts"", 1, UserInfo.id); Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3); Bundle v4 = BundleUtils.clone(v3); v4.putBoolean(p1, p2); p0.updateUserRestrictionsInternalLR(v4, p3);",0.827533483505249
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;","UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;",0.8068329095840454
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7); return v9;","UserInfo v2 = p0.createProfileForUserWithThrow(p1, ""android.os.usertype.full.RESTRICTED"", 0, p2, 0); return v2;",0.8165916800498962
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,isSameProfileGroup(II)Z,"UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(p2);,0.8084977865219116
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;","UserManagerService.checkCreateUsersPermission(p3); UserInfo v2 = p0.createUserInternal(p1, p2, p3, -10000, 0); return v2;",0.8216109275817871
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;","UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;",0.962058424949646
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7); return v9;","UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;",0.9201406240463257
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;","UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);",0.8283630609512329
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;","UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);",0.8272992372512817
createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7); return v9;","UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);",0.8041738867759705
getUserSerialNumber(I)I,isUserOfType(ILjava/lang/String;)Z,UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,String v2 = p0.getUserTypeNoChecks(p1); UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1);,0.8100606203079224
getUserSerialNumber(I)I,isSameProfileGroup(II)Z,UserInfo v1 = p0.getUserInfoLU(p1); Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1);,0.8879214525222778
canAddMoreUsersOfType(Ljava/lang/String;)Z,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,Object v2 = this.mUserTypes.get(p1); boolean v3 = p0.canAddMoreUsersOfType(v2);,Object v2 = this.mUserTypes.get(p1); boolean v3 = v2.isEnabled(); boolean v4 = v2.isManagedProfile();,0.8045931458473206
canAddMoreUsersOfType(Ljava/lang/String;)Z,getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,public void checkCreateUsersPermission(String p1){ boolean v1 = UserManagerService.hasCreateUsersPermission();,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8278248310089111
getUserBadgeDarkColorResId(I)I,getUserBadgeResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,0.8590397834777832
getUserBadgeDarkColorResId(I)I,getUserBadgeColorResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,0.9825477600097656
getUserBadgeDarkColorResId(I)I,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,"UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);",0.8467649817466736
getUserBadgeDarkColorResId(I)I,getUserIconBadgeResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,0.8762280344963074
getUserBadgeDarkColorResId(I)I,getUserBadgeNoBackgroundResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,0.8625856041908264
getUserBadgeDarkColorResId(I)I,getUserBadgeLabelResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,0.9652432203292847
getUserBadgeLabelResId(I)I,getUserBadgeResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.9809373021125793
getUserBadgeLabelResId(I)I,getUserBadgeResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getBadgePlain();,0.8595061898231506
getUserBadgeLabelResId(I)I,hasBadge(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""hasBadge"");",0.8701645135879517
getUserBadgeLabelResId(I)I,isUserRunning(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.8923491835594177
getUserBadgeLabelResId(I)I,isUserUnlocked(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.954802393913269
getUserBadgeLabelResId(I)I,isCredentialSharableWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isCredentialSharableWithParent""); UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.isProfile(); boolean v4 = v2.isCredentialSharableWithParent(); return phiInstruction;",0.8025122880935669
getUserBadgeLabelResId(I)I,getUserBadgeColorResId(I)I,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.989261269569397
getUserBadgeLabelResId(I)I,getUserBadgeColorResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeColor(UserInfo.profileBadge); return v5;,0.978567898273468
getUserBadgeLabelResId(I)I,isPreCreated(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.9493933916091919
getUserBadgeLabelResId(I)I,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,"UserInfo v2 = p0.getUserInfoNoChecks(p1); StringBuilder v4 = v2.append(""getUserIcon: unknown user #""); StringBuilder v5 = v2.append(p1); String v6 = v2.toString(); int v7 = Slog.w(""UserManagerService"", v6);",0.8438131213188171
getUserBadgeLabelResId(I)I,getUserIconBadgeResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); boolean v3 = v2.hasBadge(); int v4 = v2.getIconBadge(); return v4;,0.8787320852279663
getUserBadgeLabelResId(I)I,isMediaSharedWithParent(I)Z,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isMediaSharedWithParent""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission();",0.8931283354759216
getUserBadgeLabelResId(I)I,getUserBadgeNoBackgroundResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,UserTypeDetails v2 = p0.getUserTypeDetailsNoChecks(p1); int v4 = v2.getBadgeNoBackground();,0.8573078513145447
getUserBadgeLabelResId(I)I,getUserBadgeDarkColorResId(I)I,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getBadgeLabel(UserInfo.profileBadge); return v5;,UserInfo v2 = p0.getUserInfoNoChecks(p1); UserTypeDetails v3 = p0.getUserTypeDetails(v2); int v5 = v3.getDarkThemeBadgeColor(UserInfo.profileBadge); return v5;,0.9652432203292847
getUserBadgeLabelResId(I)I,getProfileType(I)Ljava/lang/String;,"p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8355919718742371
getCredentialOwnerProfile(I)I,isDemoUser(I)Z,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,0.8326346278190613
getCredentialOwnerProfile(I)I,canHaveRestrictedProfile(I)Z,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.8255176544189453
getCredentialOwnerProfile(I)I,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,UserInfo v2 = p0.getProfileParentLU(p1); return v2;,0.9353470206260681
getCredentialOwnerProfile(I)I,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,0.8561033010482788
getCredentialOwnerProfile(I)I,getUserCreationTime(I)J,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,UserInfo v2 = p0.getProfileParentLU(p1); return UserInfo.creationTime;,0.9532679319381714
getCredentialOwnerProfile(I)I,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v3 = p0.getProfileParentLU(p1); return UserInfo.id;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.8475046157836914
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,getProfiles(IZ)Ljava/util/List;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.816504180431366
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,isDemoUser(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.8957232236862183
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8549307584762573
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,isUserForeground(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8887454271316528
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,isUserOfType(ILjava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkQueryOrCreateUsersPermission(""check user type""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8135606050491333
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,isUserTypeEnabled(Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkCreateUsersPermission(""check if user type is enabled.""); boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.932373583316803
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,removeUser(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkCreateUsersPermission(""Only the system can remove users""); boolean v1 = UserManagerService.hasCreateUsersPermission();",0.8347028493881226
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,setUserAdmin(I)V,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);",0.847641110420227
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,isUserNameSet(I)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8817761540412903
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,getUserName()Ljava/lang/String;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8817761540412903
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,setUserName(ILjava/lang/String;)V,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.8022787570953369
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");","boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.9004337191581726
getPreInstallableSystemPackages(Ljava/lang/String;)[Ljava/lang/String;,canAddMoreUsersOfType(Ljava/lang/String;)Z,"boolean v1 = UserManagerService.hasCreateUsersPermission(); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",public void checkCreateUsersPermission(String p1){ boolean v1 = UserManagerService.hasCreateUsersPermission();,0.8278248310089111
isQuietModeEnabled(I)Z,isDemoUser(I)Z,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,UserInfo v3 = p0.getUserInfoLU(p1); boolean v4 = v3.isDemo();,0.8348522782325745
isQuietModeEnabled(I)Z,requestQuietModeEnabled(Ljava/lang/String;ZILandroid/content/IntentSender;I)Z,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,"p0.setQuietModeEnabled(p3, 1, p4, p1); UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getProfileParentLU(p1); boolean v3 = v1.isManagedProfile(); boolean v4 = v1.isQuietModeEnabled(); UserInfo.flags = (UserInfo.flags ^ 128);",0.8151953816413879
isQuietModeEnabled(I)Z,canHaveRestrictedProfile(I)Z,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.canHaveProfile(); boolean v4 = v2.isAdmin();,0.9079347252845764
isQuietModeEnabled(I)Z,getProfileParent(I)Landroid/content/pm/UserInfo;,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,UserInfo v1 = p0.getUserInfoLU(p1); UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId); return v2;,0.8195012807846069
isQuietModeEnabled(I)Z,getRemainingCreatableProfileCount(Ljava/lang/String;I)I,UserInfo v1 = p0.getUserInfoLU(p1); boolean v2 = v1.isManagedProfile(); boolean v3 = v1.isQuietModeEnabled(); return v3;,UserInfo v7 = p0.getUserInfoLU(p2); boolean v8 = v7.canHaveProfile();,0.8871009349822998
getUsers(ZZZ)Ljava/util/List;,No similar EPs with similarity > 0.8,,,
getSeedAccountType(I)Ljava/lang/String;,getProfiles(IZ)Ljava/util/List;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8366724848747253
getSeedAccountType(I)Ljava/lang/String;,isDemoUser(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9099709391593933
getSeedAccountType(I)Ljava/lang/String;,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
getSeedAccountType(I)Ljava/lang/String;,isUserForeground(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8743652105331421
getSeedAccountType(I)Ljava/lang/String;,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,0.8766711950302124
getSeedAccountType(I)Ljava/lang/String;,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
getSeedAccountType(I)Ljava/lang/String;,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,0.8287651538848877
getSeedAccountType(I)Ljava/lang/String;,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
getSeedAccountType(I)Ljava/lang/String;,setUserName(ILjava/lang/String;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.906494140625
getSeedAccountType(I)Ljava/lang/String;,isPreCreated(I)Z,UserManagerService$UserData v2 = p0.getUserDataLU(p1); return phiInstruction;,UserInfo v2 = p0.getUserInfoLU(p1); return phiInstruction;,0.8778737187385559
getSeedAccountType(I)Ljava/lang/String;,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8416682481765747
getSeedAccountType(I)Ljava/lang/String;,getSeedAccountName(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.8269932270050049
getSeedAccountType(I)Ljava/lang/String;,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
getSeedAccountType(I)Ljava/lang/String;,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
getSeedAccountType(I)Ljava/lang/String;,setUserEnabled(I)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setUserAccount(ILjava/lang/String;)V,setUserAdmin(I)V,"UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user account"");","UserManagerService.checkManageUserAndAcrossUsersFullPermission(""set user admin""); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", v1); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS_FULL"", v1);",0.8861690759658813
setUserAccount(ILjava/lang/String;)V,getUserAccount(I)Ljava/lang/String;,"Object v2 = this.mUsers.get(p1); boolean v3 = Objects.equals(UserManagerService$UserData.account, p2); UserManagerService$UserData.account = p2;",Object v2 = this.mUsers.get(p1); return UserManagerService$UserData.account;,0.9193761348724365
canAddMoreProfilesToUser(Ljava/lang/String;IZ)Z,getRemainingCreatableUserCount(Ljava/lang/String;)I,"UserManagerService.checkQueryOrCreateUsersPermission(""get the remaining number of profiles that can be added to the given user.""); boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission();","UserManagerService.checkQueryOrCreateUsersPermission(""get the remaining number of users that can be added."");",0.8910335898399353
canAddMoreManagedProfiles(IZ)Z,No similar EPs with similarity > 0.8,,,
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,getUserRestrictions(I)Landroid/os/Bundle;,"Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1); StringBuilder v4 = new StringBuilder(); StringBuilder v6 = v4.append(""get application restrictions for other user/app ""); StringBuilder v7 = v4.append(p1); String v8 = v4.toString(); UserManagerService.checkSystemOrRoot(v8); Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); return v10;",Bundle v2 = p0.getEffectiveUserRestrictions(p1); Bundle v3 = BundleUtils.clone(v2); return v3;,0.8336560726165771
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,setApplicationRestrictions(Ljava/lang/String;Landroid/os/Bundle;I)V,File v1 = Environment.getUserSystemDirectory(p2); String v2 = UserManagerService.packageToRestrictionsFileName(p1); AtomicFile v0 = new AtomicFile(v0); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0); return v5;,"UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3); File v1 = Environment.getUserSystemDirectory(p3); String v2 = UserManagerService.packageToRestrictionsFileName(p1); UserManagerService.writeApplicationRestrictionsLAr(p2, v0);",0.8454561829566956
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,"Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1); StringBuilder v4 = new StringBuilder(); StringBuilder v6 = v4.append(""get application restrictions for other user/app ""); StringBuilder v7 = v4.append(p1); String v8 = v4.toString(); UserManagerService.checkSystemOrRoot(v8); Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); return v10;","Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);",0.863210916519165
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle;,File v1 = Environment.getUserSystemDirectory(p2); String v2 = UserManagerService.packageToRestrictionsFileName(p1); AtomicFile v0 = new AtomicFile(v0); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0); return v5;,"Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); AtomicFile v0 = new AtomicFile(v0); String v2 = UserManagerService.packageToRestrictionsFileName(p1); Bundle v5 = UserManagerService.readApplicationRestrictionsLAr(v0);",0.9336578249931335
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,removeUserWhenPossible(IZ)I,"Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1); StringBuilder v4 = new StringBuilder(); StringBuilder v6 = v4.append(""get application restrictions for other user/app ""); StringBuilder v7 = v4.append(p1); String v8 = v4.toString(); UserManagerService.checkSystemOrRoot(v8); Bundle v10 = UserManagerService.readApplicationRestrictionsLAr(p1, p2); return v10;","Bundle v4 = p0.getUserRestrictions(v3); p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserRestrictions""); Bundle v2 = p0.getEffectiveUserRestrictions(p1); boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);",0.8075223565101624
getDefaultGuestRestrictions()Landroid/os/Bundle;,No similar EPs with similarity > 0.8,,,
setUserIcon(ILandroid/graphics/Bitmap;)V,No similar EPs with similarity > 0.8,,,
findCurrentGuestUser()Landroid/content/pm/UserInfo;,getUserCreationTime(I)J,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isGuest(); boolean v5 = this.mRemovingUserIds.get(UserInfo.id); return UserManagerService$UserData.info;,Object v1 = this.mUsers.get(p1); boolean v2 = this.mRemovingUserIds.get(p1); return phiInstruction;,0.8199714422225952
findCurrentGuestUser()Landroid/content/pm/UserInfo;,getPrimaryUser()Landroid/content/pm/UserInfo;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isGuest(); boolean v5 = this.mRemovingUserIds.get(UserInfo.id); return UserManagerService$UserData.info;,Object v3 = this.mUsers.valueAt(phiInstruction); boolean v4 = UserManagerService$UserData.info.isPrimary(); return UserManagerService$UserData.info;,0.9065591096878052
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,getProfiles(IZ)Ljava/util/List;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8366724848747253
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,isDemoUser(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9099709391593933
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,someUserHasAccount(Ljava/lang/String;Ljava/lang/String;)Z,"UserManagerService.checkManageUsersPermission(""check seed account information""); boolean v2 = p0.someUserHasSeedAccountNoChecks(p1, p2);","UserManagerService.checkCreateUsersPermission(""check seed account information""); boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.CREATE_USERS"");",0.8596875667572021
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,isUserForeground(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8743652105331421
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,0.8766711950302124
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,0.8287651538848877
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,setUserName(ILjava/lang/String;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.906494140625
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8416682481765747
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,getSeedAccountName(I)Ljava/lang/String;,"UserManagerService.checkManageUsersPermission(""check seed account information""); boolean v2 = p0.someUserHasSeedAccountNoChecks(p1, p2);","UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.8523678779602051
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,getSeedAccountName(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.8269932270050049
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,getSeedAccountType(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,setUserEnabled(I)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
clearSeedAccountData(I)V,No similar EPs with similarity > 0.8,,,
getProfileType(I)Ljava/lang/String;,getUserBadgeResId(I)I,"public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4)",0.8626377582550049
getProfileType(I)Ljava/lang/String;,isUserRunning(I)Z,"public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserRunning""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);",0.8161318302154541
getProfileType(I)Ljava/lang/String;,isUserUnlocked(I)Z,"public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isUserUnlocked""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8644905686378479
getProfileType(I)Ljava/lang/String;,getUserBadgeColorResId(I)I,"public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeColorResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8465462327003479
getProfileType(I)Ljava/lang/String;,isPreCreated(I)Z,"public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""isPreCreated""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8786324262619019
getProfileType(I)Ljava/lang/String;,getUserBadgeLabelResId(I)I,"public void checkQueryOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){ boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasQueryUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);","p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, ""getUserBadgeLabelResId""); boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1); boolean v3 = UserManagerService.hasManageUsersPermission(); int v4 = Binder.getCallingUid(); boolean v5 = UserManagerService.hasPermissionGranted(""android.permission.INTERACT_ACROSS_USERS"", v4);",0.8355919718742371
createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);","Object v1 = this.mUserTypes.get(p1); int v2 = v1.getDefaultUserInfoFlags(); boolean v4 = UserManagerService.isUserTypeEligibleForPreCreation(v1); UserInfo v15 = p0.createUserInternalUnchecked(0, p1, phiInstruction, -10000, 1, 0, 0); return v15;",0.8273171782493591
createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);","UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v5;",0.8207842707633972
createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);","UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5); UserInfo v5 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; return v5;",0.8272992372512817
createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo;,"UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0); return v2; int v1 = p0.getNextAvailableId(); TimingsTraceAndSlog v1 = new TimingsTraceAndSlog(); long v8 = p0.logUserCreateJourneyBegin(v1, p2, p3); UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v1, 0); return v9; Object v1 = this.mUserTypes.get(p2); String v2 = p2.intern(); UserInfo v13 = p0.convertPreCreatedUserIfPossible(v2, phiInstruction, p1, p8);","UserInfo v9 = p0.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, p5, p6, v1, p7); return v9;",0.8041738867759705
getUserHandle(I)I,No similar EPs with similarity > 0.8,,,
setUserEnabled(I)V,getProfiles(IZ)Ljava/util/List;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasQueryOrCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8366724848747253
setUserEnabled(I)V,isDemoUser(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v2 = UserManagerService.hasPermissionGranted(""android.permission.MANAGE_USERS"", p1);",0.9099709391593933
setUserEnabled(I)V,canHaveRestrictedProfile(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setUserEnabled(I)V,isUserForeground(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v2 = UserManagerService.hasManageUsersOrPermission(""android.permission.INTERACT_ACROSS_USERS""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8743652105331421
setUserEnabled(I)V,setUserAdmin(I)V,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.isEnabled(); UserInfo.flags = (UserInfo.flags ^ 64); UserManagerService$UserData v4 = p0.getUserDataLU(UserInfo.id); p0.writeUserLP(v4);,UserInfo v2 = p0.getUserInfoLU(p1); boolean v3 = v2.isAdmin(); UserInfo.flags = (UserInfo.flags ^ 2); UserManagerService$UserData v4 = p0.getUserDataLU(UserInfo.id); p0.writeUserLP(v4);,0.9844028949737549
setUserEnabled(I)V,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasQueryOrCreateUsersPermission(); UserInfo v4 = p0.getUserInfoLU(p1);,0.8766711950302124
setUserEnabled(I)V,isUserNameSet(I)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
setUserEnabled(I)V,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasQueryOrCreateUsersPermission(); int v4 = UserHandle.getUserId(v1); UserInfo v5 = p0.getUserInfoLU(v4); UserInfo v6 = p0.userWithName(v5); return UserInfo.name;,0.8287651538848877
setUserEnabled(I)V,getUserName()Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasCreateUsersPermission(); int v2 = Binder.getCallingUid(); boolean v3 = UserManagerService.hasPermissionGranted(""android.permission.QUERY_USERS"", v2);",0.8736966252326965
setUserEnabled(I)V,setUserName(ILjava/lang/String;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""rename users""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);",0.906494140625
setUserEnabled(I)V,getUserIcon(I)Landroid/os/ParcelFileDescriptor;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"boolean v1 = UserManagerService.hasManageUsersOrPermission(""android.permission.GET_ACCOUNTS_PRIVILEGED""); int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1); boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);",0.8416682481765747
setUserEnabled(I)V,getSeedAccountName(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,"UserManagerService.checkManageUsersPermission(""Cannot get seed account information""); boolean v1 = UserManagerService.hasManageUsersPermission(); int v1 = Binder.getCallingUid();",0.8269932270050049
setUserEnabled(I)V,setDefaultGuestRestrictions(Landroid/os/Bundle;)V,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setUserEnabled(I)V,getSeedAccountType(I)Ljava/lang/String;,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
setUserEnabled(I)V,someUserHasSeedAccount(Ljava/lang/String;Ljava/lang/String;)Z,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,int v1 = Binder.getCallingUid(); boolean v2 = UserManagerService.hasManageUsersPermission(v1);,1.0
