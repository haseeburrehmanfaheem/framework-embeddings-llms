The method createRestrictedProfileWithThrow has the following code snippet:

This is path 1 for the API with depth 2:
public UserInfo createRestrictedProfileWithThrow(String p1, int p2){
	boolean v5 = UserManager.isUserTypeCloneProfile(p2);
	if (v5 == 0) {
		boolean v6 = UserManager.isUserTypeManagedProfile(p2);
		if (v6 == 0) {
			int v7 = UserHandle.getCallingUserId();
			UserManagerService.enforceUserRestriction(, v7, "Cannot add user");
			UserInfo v9 = UserManagerService.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);
			UserInfo v4 = v9;
			UserInfo v2 = v4;
			if (v2 != 0) {
				long v10 = Binder.clearCallingIdentity();
				boolean v14 = this.USER_RESTRICTIONS.contains(p1);
				if (v14 != 0) {
					int v15 = Binder.getCallingUid();
					IPackageManager v16 = AppGlobals.getPackageManager();
					String v17 = v16.getPackagesForUid(v15);
					if ( == 0) {
						if (.length <= 0) {
							if (.length <= 1) {
								if (p1 == 0) {
									boolean v27 = UserRestrictionsUtils.isSystemApp(v15, );
									if (v27 == 0) {
										boolean v13 = 0;
										if (v13 != 0) {
											Object v31 = this.mUserRestrictions.get(p3);
											Bundle v30 = v31;
											Bundle v33 = new Bundle(v30);
											if (v30 == 0) {
												Bundle v32 = v33;
												v32.putBoolean("no_modify_accounts", 1);
												Bundle v37 = this.mAppliedUserRestrictions.getRestrictions(p3);
												Bundle v38 = UserRestrictionsUtils.nonNull(v37);
												if (v32 == 0) {
													Bundle v39 = this.mBaseUserRestrictions.getRestrictions(p3);
													if (v39 == v32) {
														Preconditions.checkState();
														Bundle v41 = this.mCachedEffectiveUserRestrictions.getRestrictions(p3);
														if (v41 == v32) {
															Preconditions.checkState();
															boolean v43 = this.mBaseUserRestrictions.updateRestrictions(p3, v32);
															if (v43 == 0) {
																UserManagerService$UserData v44 = UserManagerService.getUserDataNoChecks(p3);
																UserManagerService.scheduleWriteUser(v44);
																Bundle v46 = UserManagerService.computeEffectiveUserRestrictionsLR(p3);
																boolean v47 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p3, v46);
																if (this.mAppOpsService == 0) {
																	UserManagerService$3 v48 = new UserManagerService$3(UserManagerService,v46,p3);
																	boolean v50 = this.mHandler.post(v48);
																	UserManagerService.propagateUserRestrictionsLR(p3, v46, v38);
																	Bundle v52 = new Bundle(v46);
																	boolean v54 = this.mAppliedUserRestrictions.updateRestrictions(p3, v52);
																	ContentResolver v55 = this.mContext.getContentResolver();
																	boolean v56 = Settings$Secure.putIntForUser(v55, "location_mode", 0, UserInfo.id);
																	boolean v60 = this.USER_RESTRICTIONS.contains(p1);
																	if (v60 != 0) {
																		int v61 = Binder.getCallingUid();
																		IPackageManager v62 = AppGlobals.getPackageManager();
																		String v63 = v62.getPackagesForUid(v61);
																		if ( == 0) {
																			if (.length <= 0) {
																				if (.length <= 1) {
																					if (p1 == 0) {
																						boolean v73 = UserRestrictionsUtils.isSystemApp(v61, );
																						if (v73 == 0) {
																							boolean v59 = 0;
																							if (v59 != 0) {
																								Object v77 = this.mUserRestrictions.get(p3);
																								Bundle v76 = v77;
																								Bundle v79 = new Bundle(v76);
																								if (v76 == 0) {
																									Bundle v78 = v79;
																									v78.putBoolean("no_share_location", 1);
																									Bundle v83 = this.mAppliedUserRestrictions.getRestrictions(p3);
																									Bundle v84 = UserRestrictionsUtils.nonNull(v83);
																									if (v78 == 0) {
																										Bundle v85 = this.mBaseUserRestrictions.getRestrictions(p3);
																										if (v85 == v78) {
																											Preconditions.checkState();
																											Bundle v87 = this.mCachedEffectiveUserRestrictions.getRestrictions(p3);
																											if (v87 == v78) {
																												Preconditions.checkState();
																												boolean v89 = this.mBaseUserRestrictions.updateRestrictions(p3, v78);
																												if (v89 == 0) {
																													UserManagerService$UserData v90 = UserManagerService.getUserDataNoChecks(p3);
																													UserManagerService.scheduleWriteUser(v90);
																													Bundle v92 = UserManagerService.computeEffectiveUserRestrictionsLR(p3);
																													boolean v93 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p3, v92);
																													if (this.mAppOpsService == 0) {
																														UserManagerService$3 v94 = new UserManagerService$3(UserManagerService,v92,p3);
																														boolean v96 = this.mHandler.post(v94);
																														UserManagerService.propagateUserRestrictionsLR(p3, v92, v84);
																														Bundle v98 = new Bundle(v92);
																														boolean v100 = this.mAppliedUserRestrictions.updateRestrictions(p3, v98);
																														Binder.restoreCallingIdentity(v10);
																														return v2;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public UserInfo createRestrictedProfileWithThrow(String p1, int p2){
	boolean v5 = UserManager.isUserTypeCloneProfile(p2);
	if (v5 == 0) {
		boolean v6 = UserManager.isUserTypeManagedProfile(p2);
		if (v6 == 0) {
			int v7 = UserHandle.getCallingUserId();
			UserManagerService.enforceUserRestriction(, v7, "Cannot add user");
			UserInfo v9 = UserManagerService.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);
			UserInfo v4 = v9;
			UserInfo v2 = v4;
			if (v2 != 0) {
				long v10 = Binder.clearCallingIdentity();
				boolean v14 = this.USER_RESTRICTIONS.contains(p1);
				if (v14 != 0) {
					int v15 = Binder.getCallingUid();
					IPackageManager v16 = AppGlobals.getPackageManager();
					String v17 = v16.getPackagesForUid(v15);
					if ( == 0) {
						if (.length <= 0) {
							if (.length <= 1) {
								if (p1 == 0) {
									boolean v27 = UserRestrictionsUtils.isSystemApp(v15, );
									if (v27 == 0) {
										boolean v13 = 0;
										if (v13 != 0) {
											Object v31 = this.mUserRestrictions.get(p3);
											Bundle v30 = v31;
											Bundle v33 = new Bundle();
											if (v30 == 0) {
												Bundle v32 = v33;
												v32.putBoolean("no_modify_accounts", 1);
												Bundle v37 = this.mAppliedUserRestrictions.getRestrictions(p3);
												Bundle v38 = UserRestrictionsUtils.nonNull(v37);
												if (v32 == 0) {
													Bundle v39 = this.mBaseUserRestrictions.getRestrictions(p3);
													if (v39 == v32) {
														Preconditions.checkState();
														Bundle v41 = this.mCachedEffectiveUserRestrictions.getRestrictions(p3);
														if (v41 == v32) {
															Preconditions.checkState();
															boolean v43 = this.mBaseUserRestrictions.updateRestrictions(p3, v32);
															if (v43 == 0) {
																UserManagerService$UserData v44 = UserManagerService.getUserDataNoChecks(p3);
																UserManagerService.scheduleWriteUser(v44);
																Bundle v46 = UserManagerService.computeEffectiveUserRestrictionsLR(p3);
																boolean v47 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p3, v46);
																if (this.mAppOpsService == 0) {
																	UserManagerService$3 v48 = new UserManagerService$3(UserManagerService,v46,p3);
																	boolean v50 = this.mHandler.post(v48);
																	UserManagerService.propagateUserRestrictionsLR(p3, v46, v38);
																	Bundle v52 = new Bundle(v46);
																	boolean v54 = this.mAppliedUserRestrictions.updateRestrictions(p3, v52);
																	ContentResolver v55 = this.mContext.getContentResolver();
																	boolean v56 = Settings$Secure.putIntForUser(v55, "location_mode", 0, UserInfo.id);
																	boolean v60 = this.USER_RESTRICTIONS.contains(p1);
																	if (v60 != 0) {
																		int v61 = Binder.getCallingUid();
																		IPackageManager v62 = AppGlobals.getPackageManager();
																		String v63 = v62.getPackagesForUid(v61);
																		if ( == 0) {
																			if (.length <= 0) {
																				if (.length <= 1) {
																					if (p1 == 0) {
																						boolean v73 = UserRestrictionsUtils.isSystemApp(v61, );
																						if (v73 == 0) {
																							boolean v59 = 0;
																							if (v59 != 0) {
																								Object v77 = this.mUserRestrictions.get(p3);
																								Bundle v76 = v77;
																								Bundle v79 = new Bundle(v76);
																								if (v76 == 0) {
																									Bundle v78 = v79;
																									v78.putBoolean("no_share_location", 1);
																									Bundle v83 = this.mAppliedUserRestrictions.getRestrictions(p3);
																									Bundle v84 = UserRestrictionsUtils.nonNull(v83);
																									if (v78 == 0) {
																										Bundle v85 = this.mBaseUserRestrictions.getRestrictions(p3);
																										if (v85 == v78) {
																											Preconditions.checkState();
																											Bundle v87 = this.mCachedEffectiveUserRestrictions.getRestrictions(p3);
																											if (v87 == v78) {
																												Preconditions.checkState();
																												boolean v89 = this.mBaseUserRestrictions.updateRestrictions(p3, v78);
																												if (v89 == 0) {
																													UserManagerService$UserData v90 = UserManagerService.getUserDataNoChecks(p3);
																													UserManagerService.scheduleWriteUser(v90);
																													Bundle v92 = UserManagerService.computeEffectiveUserRestrictionsLR(p3);
																													boolean v93 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p3, v92);
																													if (this.mAppOpsService == 0) {
																														UserManagerService$3 v94 = new UserManagerService$3(UserManagerService,v92,p3);
																														boolean v96 = this.mHandler.post(v94);
																														UserManagerService.propagateUserRestrictionsLR(p3, v92, v84);
																														Bundle v98 = new Bundle(v92);
																														boolean v100 = this.mAppliedUserRestrictions.updateRestrictions(p3, v98);
																														Binder.restoreCallingIdentity(v10);
																														return v2;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public UserInfo createRestrictedProfileWithThrow(String p1, int p2){
	boolean v5 = UserManager.isUserTypeCloneProfile(p2);
	if (v5 == 0) {
		boolean v6 = UserManager.isUserTypeManagedProfile(p2);
		if (v6 == 0) {
			int v7 = UserHandle.getCallingUserId();
			UserManagerService.enforceUserRestriction(, v7, "Cannot add user");
			UserInfo v9 = UserManagerService.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);
			UserInfo v4 = v9;
			UserInfo v2 = v4;
			if (v2 != 0) {
				long v10 = Binder.clearCallingIdentity();
				boolean v14 = this.USER_RESTRICTIONS.contains(p1);
				if (v14 != 0) {
					int v15 = Binder.getCallingUid();
					IPackageManager v16 = AppGlobals.getPackageManager();
					String v17 = v16.getPackagesForUid(v15);
					if ( == 0) {
						if (.length <= 0) {
							if (.length <= 1) {
								if (p1 == 0) {
									boolean v27 = UserRestrictionsUtils.isSystemApp(v15, );
									if (v27 == 0) {
										boolean v13 = 0;
										if (v13 != 0) {
											Object v31 = this.mUserRestrictions.get(p3);
											Bundle v30 = v31;
											Bundle v33 = new Bundle(v30);
											if (v30 == 0) {
												Bundle v32 = v33;
												v32.putBoolean("no_modify_accounts", 1);
												Bundle v37 = this.mAppliedUserRestrictions.getRestrictions(p3);
												Bundle v38 = UserRestrictionsUtils.nonNull(v37);
												if (v32 == 0) {
													Bundle v39 = this.mBaseUserRestrictions.getRestrictions(p3);
													if (v39 == v32) {
														Preconditions.checkState();
														Bundle v41 = this.mCachedEffectiveUserRestrictions.getRestrictions(p3);
														if (v41 == v32) {
															Preconditions.checkState();
															boolean v43 = this.mBaseUserRestrictions.updateRestrictions(p3, v32);
															if (v43 == 0) {
																UserManagerService$UserData v44 = UserManagerService.getUserDataNoChecks(p3);
																UserManagerService.scheduleWriteUser(v44);
																Bundle v46 = UserManagerService.computeEffectiveUserRestrictionsLR(p3);
																boolean v47 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p3, v46);
																if (this.mAppOpsService == 0) {
																	UserManagerService$3 v48 = new UserManagerService$3(UserManagerService,v46,p3);
																	boolean v50 = this.mHandler.post(v48);
																	UserManagerService.propagateUserRestrictionsLR(p3, v46, v38);
																	Bundle v52 = new Bundle(v46);
																	boolean v54 = this.mAppliedUserRestrictions.updateRestrictions(p3, v52);
																	ContentResolver v55 = this.mContext.getContentResolver();
																	boolean v56 = Settings$Secure.putIntForUser(v55, "location_mode", 0, UserInfo.id);
																	boolean v60 = this.USER_RESTRICTIONS.contains(p1);
																	if (v60 != 0) {
																		int v61 = Binder.getCallingUid();
																		IPackageManager v62 = AppGlobals.getPackageManager();
																		String v63 = v62.getPackagesForUid(v61);
																		if ( == 0) {
																			if (.length <= 0) {
																				if (.length <= 1) {
																					if (p1 == 0) {
																						boolean v73 = UserRestrictionsUtils.isSystemApp(v61, );
																						if (v73 == 0) {
																							boolean v59 = 0;
																							if (v59 != 0) {
																								Object v77 = this.mUserRestrictions.get(p3);
																								Bundle v76 = v77;
																								Bundle v79 = new Bundle();
																								if (v76 == 0) {
																									Bundle v78 = v79;
																									v78.putBoolean("no_share_location", 1);
																									Bundle v83 = this.mAppliedUserRestrictions.getRestrictions(p3);
																									Bundle v84 = UserRestrictionsUtils.nonNull(v83);
																									if (v78 == 0) {
																										Bundle v85 = this.mBaseUserRestrictions.getRestrictions(p3);
																										if (v85 == v78) {
																											Preconditions.checkState();
																											Bundle v87 = this.mCachedEffectiveUserRestrictions.getRestrictions(p3);
																											if (v87 == v78) {
																												Preconditions.checkState();
																												boolean v89 = this.mBaseUserRestrictions.updateRestrictions(p3, v78);
																												if (v89 == 0) {
																													UserManagerService$UserData v90 = UserManagerService.getUserDataNoChecks(p3);
																													UserManagerService.scheduleWriteUser(v90);
																													Bundle v92 = UserManagerService.computeEffectiveUserRestrictionsLR(p3);
																													boolean v93 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p3, v92);
																													if (this.mAppOpsService == 0) {
																														UserManagerService$3 v94 = new UserManagerService$3(UserManagerService,v92,p3);
																														boolean v96 = this.mHandler.post(v94);
																														UserManagerService.propagateUserRestrictionsLR(p3, v92, v84);
																														Bundle v98 = new Bundle(v92);
																														boolean v100 = this.mAppliedUserRestrictions.updateRestrictions(p3, v98);
																														Binder.restoreCallingIdentity(v10);
																														return v2;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['UserInfo v9 = UserManagerService.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);\nreturn v2;', 'long v10 = Binder.clearCallingIdentity();\nboolean v14 = this.USER_RESTRICTIONS.contains(p1);\nint v15 = Binder.getCallingUid();', 'Object v31 = this.mUserRestrictions.get(p3);\nBundle v30 = v31;\nBundle v33 = new Bundle(v30);\nv32.putBoolean("no_modify_accounts", 1);\nboolean v43 = this.mBaseUserRestrictions.updateRestrictions(p3, v32);', 'UserInfo v4 = UserManagerService.createUserInternal(p1, "android.os.usertype.full.RESTRICTED", 0, p2, 0);\nlong v5 = Binder.clearCallingIdentity();\nboolean v8 = UserRestrictionsUtils.isValidRestriction("no_modify_accounts");', 'p0.createProfileForUserWithThrow(p1, "android.os.usertype.full.RESTRICTED", 0, p2, 0);\nlong v3 = Binder.clearCallingIdentity();\np0.setUserRestriction("no_modify_accounts", 1, UserInfo.id);']

The method createRestrictedProfileWithThrow has the following similar APIs:

- API Name: createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo; with Similarity Score: 0.9933291673660278
  - Access Control Level: SYS_OR_SIG and the following code:
UserInfo v6 = UserManagerService.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);
return v2;

- API Name: createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo; with Similarity Score: 0.9834871888160706
  - Access Control Level: SYS_OR_SIG and the following code:
UserInfo v6 = UserManagerService.createUserInternalUnchecked(p1, p2, p3, -10000, 0, 0, 0);
return v2;

