This is path 1 for the API with depth 2:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if ( == 0) {
						if ( != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								if (v8 == 0) {
									Object v10 = this.sLocalServiceObjects.get(ShortcutServiceInterna.class);
									Object v9 = v10;
									if (v9 == 0) {
										boolean v11 = v9.isForegroundDefaultLauncher(p1, v2);
										if (v11 == 0) {
											if ( == 0) {
												if (this.mPmInternal != 0) {
													Object v14 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
													Object v13 = v14;
													this.mPmInternal = v13;
													PackageManagerInternal v12 = this.mPmInternal;
													ComponentName v15 = v12.getSystemUiServiceComponent();
													String v16 = v15.getPackageName();
													boolean v17 = p1.equals(v16);
													if (v17 != 0) {
														long v18 = Binder.clearCallingIdentity();
														if (p2 == 0) {
															boolean v19 = this.mLockPatternUtils.isManagedProfileWithUnifiedChallenge(p3);
															if (v19 == 0) {
																Object v20 = this.mContext.getSystemService(KeyguardManage.class);
																Object v22 = this.mUsersLock;
																UserInfo v24 = this.this$0.getProfileParentLU(p1);
																UserInfo v23 = v24;
																if (v23 != 0) {
																	int v21 = UserInfo.id;
																	boolean v25 = v20.isDeviceLocked(v21);
																	if (v25 == 0) {
																		if ( == 0) {
																			if ( != 0) {
																				boolean v26 = this.mLockPatternUtils.isSecure(p3);
																				if (v26 == 0) {
																					if ( == 0) {
																						Object v29 = this.mUsers.get(p1);
																						if (v29 == 0) {
																							if (UserInfo.partial == 0) {
																								boolean v30 = this.mRemovingUserIds.get(p1);
																								if (v30 != 0) {
																									UserInfo v28 = 0;
																									UserInfo v38 = UserManagerService.getUserInfoLU(p1);
																									if (v38 != 0) {
																										if (UserInfo.profileGroupId == p1) {
																											if (UserInfo.profileGroupId != -10000) {
																												UserInfo v39 = UserManagerService.getUserInfoLU(UserInfo.profileGroupId);
																												UserInfo v37 = v39;
																												if (v28 == 0) {
																													boolean v41 = UserManager.isUserTypeManagedProfile(this.userType);
																													boolean v40 = v41;
																													if (v40 == 0) {
																														if ((this.flags & 128) != 128) {
																															boolean v42 = ;
																															if (v42 != 0) {
																																UserInfo.flags = (UserInfo.flags ^ 128);
																																Object v44 = this.mUsers.get(UserInfo.id);
																																if (v44 == 0) {
																																	if (UserInfo.partial == 0) {
																																		boolean v45 = this.mRemovingUserIds.get(UserInfo.id);
																																		if (v45 != 0) {
																																			UserManagerService$UserData v43 = 0;
																																			AtomicFile v47 = new AtomicFile(v48);
																																			File v48 = new File(this.mUsersDir,v53);
																																			StringBuilder v49 = new StringBuilder();
																																			StringBuilder v51 = v49.append(UserInfo.id);
																																			StringBuilder v52 = v49.append(".xml");
																																			String v53 = v49.toString();
																																			FileOutputStream v56 = v47.startWrite();
																																			UserManagerService.writeUserLP(v43, v56);
																																			v47.finishWrite(v56);
																																			if (0 == 0) {
																																				IActivityManager v59 = ActivityManager.getService();
																																				int v60 = v59.stopUser(p3, 1, 0);
																																				Object v62 = this.sLocalServiceObjects.get(ActivityManagerInterna.class);
																																				Object v61 = v62;
																																				v61.killForegroundAppsForUser(p3);
																																				Boolean v66 = Boolean.valueOf(p2);
																																				UserManagerService$UserData v68 = UserManagerService.getUserDataLU(p1);
																																				if (v68 != 0) {
																																					long v69 = System.currentTimeMillis();
																																					long v70 = v68.getLastRequestQuietModeEnabledMillis();
																																					if ((v70 < 0) == 0) {
																																						long v71 = v68.getLastRequestQuietModeEnabledMillis();
																																						DevicePolicyEventLogger v72 = DevicePolicyEventLogger.createEvent(55);
																																						String v73 = new String(1);
																																						DevicePolicyEventLogger v74 = v72.setStrings(v73);
																																						DevicePolicyEventLogger v75 = v74.setBoolean(p2);
																																						DevicePolicyEventLogger v76 = v75.setTimePeriod((v69 - ));
																																						v76.write();
																																						v68.setLastRequestQuietModeEnabledMillis(v69);
																																						UserHandle v80 = UserHandle.of(this.id);
																																						UserHandle v79 = v80;
																																						UserHandle v82 = UserHandle.of(this.id);
																																						UserHandle v81 = v82;
																																						Intent v84 = new Intent();
																																						if (p2 == 0) {
																																							Intent v86 = v84.setAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
																																							Intent v87 = v84.putExtra("android.intent.extra.QUIET_MODE", p2);
																																							Intent v88 = v84.putExtra("android.intent.extra.USER", v79);
																																							int v89 = v79.getIdentifier();
																																							Intent v90 = v84.putExtra("android.intent.extra.user_handle", v89);
																																							DevicePolicyManagerInternal v91 = UserManagerService.getDevicePolicyManagerInternal();
																																							v91.broadcastIntentToManifestReceivers(v84, v81, 1);
																																							Intent v93 = v84.addFlags(1073741824);
																																							this.mContext.sendBroadcastAsUser(v84, v81);
																																							Binder.restoreCallingIdentity(v18);
																																							return 1;
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if ( == 0) {
						if ( != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								if (v8 == 0) {
									Object v9 = LocalServices.getService(ShortcutServiceInterna.class);
									if (v9 == 0) {
										boolean v10 = v9.isForegroundDefaultLauncher(p1, v2);
										if (v10 == 0) {
											if ( == 0) {
												if (this.mPmInternal != 0) {
													Object v12 = LocalServices.getService(PackageManagerInterna.class);
													this.mPmInternal = v12;
													PackageManagerInternal v11 = this.mPmInternal;
													ComponentName v13 = v11.getSystemUiServiceComponent();
													String v14 = v13.getPackageName();
													boolean v15 = p1.equals(v14);
													if (v15 != 0) {
														long v16 = Binder.clearCallingIdentity();
														if (p2 == 0) {
															boolean v17 = this.mLockPatternUtils.isManagedProfileWithUnifiedChallenge(p3);
															if (v17 == 0) {
																Object v18 = this.mContext.getSystemService(KeyguardManage.class);
																Object v20 = UserManagerService.-$$Nest$fgetmUsersLock(this.this$0);
																UserInfo v21 = UserManagerService.-$$Nest$mgetProfileParentLU(this.this$0, p3);
																if (v21 != 0) {
																	int v19 = UserInfo.id;
																	boolean v22 = v18.isDeviceLocked(v19);
																	if (v22 == 0) {
																		if ( == 0) {
																			if ( != 0) {
																				boolean v23 = this.mLockPatternUtils.isSecure(p3);
																				if (v23 == 0) {
																					if ( == 0) {
																						UserInfo v25 = UserManagerService.getUserInfoLU(p3);
																						UserInfo v26 = UserManagerService.getProfileParentLU(p3);
																						if (v25 == 0) {
																							boolean v27 = v25.isManagedProfile();
																							if (v27 == 0) {
																								boolean v28 = v25.isQuietModeEnabled();
																								if (v28 != 0) {
																									UserInfo.flags = (UserInfo.flags ^ 128);
																									UserManagerService$UserData v29 = UserManagerService.getUserDataLU(UserInfo.id);
																									UserManagerService.writeUserLP(v29);
																									if (0 == 0) {
																										IActivityManager v31 = ActivityManager.getService();
																										int v32 = v31.stopUser(p3, 1, 0);
																										Object v33 = LocalServices.getService(ActivityManagerInterna.class);
																										v33.killForegroundAppsForUser(p3);
																										UserManagerService.logQuietModeEnabled(p3, 0, p1);
																										UserHandle v36 = v25.getUserHandle();
																										UserHandle v37 = v26.getUserHandle();
																										UserManagerService.broadcastProfileAvailabilityChanges(v36, v37, 0);
																										Binder.restoreCallingIdentity(v16);
																										return 1;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if ( == 0) {
						if ( != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								p0.ensureCanModifyQuietMode(p1, v2, p3, , );
								if ( == 0) {
									PackageManagerInternal v4 = p0.getPackageManagerInternal();
									ComponentName v5 = v4.getSystemUiServiceComponent();
									String v6 = v5.getPackageName();
									boolean v7 = p1.equals(v6);
									if (v7 != 0) {
										long v8 = Binder.clearCallingIdentity();
										if (p2 == 0) {
											boolean v9 = this.mLockPatternUtils.isManagedProfileWithUnifiedChallenge(p3);
											if (v9 == 0) {
												Object v10 = this.mContext.getSystemService(KeyguardManage.class);
												int v11 = this.mLocalService.getProfileParentId(p3);
												boolean v12 = v10.isDeviceLocked(v11);
												if (v12 == 0) {
													if ( == 0) {
														boolean v13 = this.mLockPatternUtils.tryUnlockWithCachedUnifiedChallenge(p3);
														if ( != 0) {
															if ( == 0) {
																if ( == 0) {
																	p0.showConfirmCredentialToDisableQuietMode(p3, p4);
																	Binder.restoreCallingIdentity(v8);
																	return 0;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
