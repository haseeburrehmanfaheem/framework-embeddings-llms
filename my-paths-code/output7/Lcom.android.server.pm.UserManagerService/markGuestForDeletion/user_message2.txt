The method markGuestForDeletion has the following code snippet:

This is path 1 for the API with depth 2:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v6 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	if (v6 != 0) {
		Bundle v7 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
		boolean v8 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v7);
		Bundle v5 = ;
		Bundle v10 = new Bundle(v5);
		if (v5 == 0) {
			Bundle v9 = v10;
			Bundle v3 = v9;
			boolean v12 = v3.getBoolean("no_remove_user", 0);
			if (v12 == 0) {
				long v13 = Binder.clearCallingIdentity();
				Object v14 = this.mUsers.get(p1);
				if (p1 == 0) {
					if (v14 == 0) {
						boolean v15 = this.mRemovingUserIds.get(p1);
						if (v15 == 0) {
							boolean v16 = UserManagerService$UserData.info.isGuest();
							if (v16 != 0) {
								UserInfo.guestToRemove = 1;
								UserInfo.flags = (UserInfo.flags | 64);
								p0.writeUserLP(v14);
								Binder.restoreCallingIdentity(v13);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v6 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	if (v6 != 0) {
		Bundle v7 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
		boolean v8 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v7);
		Bundle v5 = ;
		Bundle v10 = new Bundle();
		if (v5 == 0) {
			Bundle v9 = v10;
			Bundle v3 = v9;
			boolean v12 = v3.getBoolean("no_remove_user", 0);
			if (v12 == 0) {
				long v13 = Binder.clearCallingIdentity();
				Object v14 = this.mUsers.get(p1);
				if (p1 == 0) {
					if (v14 == 0) {
						boolean v15 = this.mRemovingUserIds.get(p1);
						if (v15 == 0) {
							boolean v16 = UserManagerService$UserData.info.isGuest();
							if (v16 != 0) {
								UserInfo.guestToRemove = 1;
								UserInfo.flags = (UserInfo.flags | 64);
								p0.writeUserLP(v14);
								Binder.restoreCallingIdentity(v13);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v6 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	if (v6 != 0) {
		Bundle v7 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
		boolean v8 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v7);
		Bundle v5 = ;
		Bundle v10 = new Bundle(v5);
		if (v5 == 0) {
			Bundle v9 = v10;
			Bundle v3 = v9;
			boolean v12 = v3.getBoolean("no_remove_user", 0);
			if (v12 == 0) {
				long v13 = Binder.clearCallingIdentity();
				Object v14 = this.mUsers.get(p1);
				if (p1 == 0) {
					if (v14 == 0) {
						boolean v15 = this.mRemovingUserIds.get(p1);
						if (v15 == 0) {
							boolean v16 = UserManagerService$UserData.info.isGuest();
							if (v16 != 0) {
								Binder.restoreCallingIdentity(v13);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['UserInfo.guestToRemove = 1;\nUserInfo.flags = (UserInfo.flags | 64);\np0.writeUserLP(v14);', 'UserInfo.guestToRemove = 1;\nUserInfo.flags = (UserInfo.flags | 64);\nUserManagerService.writeUserLP(v9, v23);', 'UserInfo.guestToRemove = 1;\nUserInfo.flags = (UserInfo.flags | 64);\np0.writeUserLP(v6);']

The method markGuestForDeletion has the following similar APIs:

- API Name: removeUserWhenPossible(IZ)I with Similarity Score: 0.8402994871139526
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v10 = p0.removeUserUnchecked(p1);
UserInfo.flags = (UserInfo.flags | 256);
p0.writeUserLP(v7);

- API Name: removeUserWhenPossible(IZ)I with Similarity Score: 0.8367516398429871
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v10 = p0.removeUserUnchecked(p1);
UserInfo.flags = (UserInfo.flags | 256);
p0.writeUserLP(v7);

