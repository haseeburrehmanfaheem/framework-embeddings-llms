This is path 1 for the API with depth 2:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v6 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	if (v6 != 0) {
		Bundle v7 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
		boolean v8 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v7);
		Bundle v5 = ;
		Bundle v10 = new Bundle(v5);
		if (v5 == 0) {
			Bundle v9 = v10;
			Bundle v3 = v9;
			boolean v12 = v3.getBoolean("no_remove_user", 0);
			if (v12 == 0) {
				long v13 = Binder.clearCallingIdentity();
				Object v14 = this.mUsers.get(p1);
				if (p1 == 0) {
					if (v14 == 0) {
						boolean v15 = this.mRemovingUserIds.get(p1);
						if (v15 == 0) {
							boolean v16 = UserManagerService$UserData.info.isGuest();
							if (v16 != 0) {
								UserInfo.guestToRemove = 1;
								UserInfo.flags = (UserInfo.flags | 64);
								p0.writeUserLP(v14);
								Binder.restoreCallingIdentity(v13);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v5 = UserManagerService.getEffectiveUserRestrictions(v2);
	Bundle v6 = BundleUtils.clone(v5);
	Bundle v3 = v6;
	boolean v7 = v3.getBoolean("no_remove_user", 0);
	if (v7 == 0) {
		long v8 = Binder.clearCallingIdentity();
		Object v9 = this.mUsers.get(p1);
		if (p1 == 0) {
			if (v9 == 0) {
				boolean v10 = this.mRemovingUserIds.get(p1);
				if (v10 == 0) {
					boolean v12 = UserManager.isUserTypeGuest(this.userType);
					boolean v11 = v12;
					if (v11 != 0) {
						UserInfo.guestToRemove = 1;
						UserInfo.flags = (UserInfo.flags | 64);
						AtomicFile v14 = new AtomicFile(v15);
						File v15 = new File(this.mUsersDir,v20);
						StringBuilder v16 = new StringBuilder();
						StringBuilder v18 = v16.append(UserInfo.id);
						StringBuilder v19 = v16.append(".xml");
						String v20 = v16.toString();
						FileOutputStream v23 = v14.startWrite();
						UserManagerService.writeUserLP(v9, v23);
						v14.finishWrite(v23);
						Binder.restoreCallingIdentity(v8);
						return 1;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v3 = p0.getUserRestrictions(v2);
	boolean v4 = v3.getBoolean("no_remove_user", 0);
	if (v4 == 0) {
		long v5 = Binder.clearCallingIdentity();
		Object v6 = this.mUsers.get(p1);
		if (p1 == 0) {
			if (v6 == 0) {
				boolean v7 = this.mRemovingUserIds.get(p1);
				if (v7 == 0) {
					boolean v8 = UserManagerService$UserData.info.isGuest();
					if (v8 != 0) {
						UserInfo.guestToRemove = 1;
						UserInfo.flags = (UserInfo.flags | 64);
						p0.writeUserLP(v6);
						Binder.restoreCallingIdentity(v5);
						return 1;
					}
				}
			}
		}
	}
}
