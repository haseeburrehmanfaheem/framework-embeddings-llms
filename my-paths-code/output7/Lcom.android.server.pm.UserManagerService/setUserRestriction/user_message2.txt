The method setUserRestriction has the following code snippet:

This is path 1 for the API with depth 2:
public void setUserRestriction(String p1, boolean p2, int p3){
	boolean v3 = this.USER_RESTRICTIONS.contains(p1);
	if (v3 != 0) {
		int v4 = Binder.getCallingUid();
		IPackageManager v6 = ActivityThread.getPackageManager();
		IPackageManager v5 = v6;
		String v7 = v5.getPackagesForUid(v4);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v18 == 0) {
							if ( != 0) {
								IPackageManager v19 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v20 = UserHandle.getUserId(v4);
									ApplicationInfo v21 = v19.getApplicationInfo([], 794624, v20);
									if ( >= .length) {
										int v22 = UserHandle.getUserId(v4);
										ApplicationInfo v23 = v19.getApplicationInfo([], 794624, v22);
										if (v23 == 0) {
											boolean v24 = v23.isSystemApp();
											if (v24 == 0) {
												boolean v17 = 1;
												if (v17 == 0) {
													boolean v2 = 0;
													if (v2 != 0) {
														Bundle v27 = this.mBaseUserRestrictions.getRestrictions(p3);
														Bundle v28 = BundleUtils.clone(v27);
														v28.putBoolean(p1, p2);
														Object v32 = this.mUserRestrictions.get(p2);
														Bundle v31 = v32;
														if (v31 == 0) {
															Bundle v34 = new Bundle();
															Bundle v33 = ;
															if (v28 == 0) {
																Object v37 = this.mUserRestrictions.get(p2);
																Bundle v36 = v37;
																if (v36 == v28) {
																	Preconditions.checkState();
																	Object v40 = this.mUserRestrictions.get(p2);
																	Bundle v39 = v40;
																	if (v39 == v28) {
																		Preconditions.checkState();
																		Object v43 = this.mUserRestrictions.get(p2);
																		boolean v44 = UserRestrictionsUtils.areEqual(v43, p1);
																		if ((v44 ^ 1) != 0) {
																			boolean v45 = BundleUtils.isEmpty(p1);
																			if (v45 != 0) {
																				this.mUserRestrictions.put(p2, p1);
																				boolean v42 = 1;
																				if (v42 == 0) {
																					Object v48 = this.mUsers.get(p2);
																					UserManagerService$UserData v47 = v48;
																					boolean v50 = this.mHandler.hasMessages(1, v47);
																					if (v50 != 0) {
																						Message v51 = this.mHandler.obtainMessage(1, v47);
																						boolean v52 = this.mHandler.sendMessageDelayed(v51, 2000);
																						Bundle v54 = this.mBaseUserRestrictions.getRestrictions(p2);
																						Bundle v55 = UserRestrictionsUtils.nonNull(v54);
																						Bundle v56 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																						RestrictionsSet v57 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p2);
																						boolean v58 = BundleUtils.isEmpty(v56);
																						if (v58 == 0) {
																							boolean v59 = v57.isEmpty();
																							if (v59 == 0) {
																								Bundle v60 = BundleUtils.clone(v55);
																								UserRestrictionsUtils.merge(v60, v56);
																								Bundle v62 = v57.mergeAll();
																								UserRestrictionsUtils.merge(v60, v62);
																								Bundle v53 = v60;
																								Object v65 = this.mUserRestrictions.get(p2);
																								boolean v66 = UserRestrictionsUtils.areEqual(v65, v53);
																								if ((v66 ^ 1) != 0) {
																									boolean v67 = BundleUtils.isEmpty(v53);
																									if (v67 != 0) {
																										this.mUserRestrictions.put(p2, v53);
																										boolean v64 = 1;
																										if (this.mAppOpsService == 0) {
																											UserManagerService$3 v69 = new UserManagerService$3(UserManagerService,v53,p3);
																											boolean v71 = this.mHandler.post(v69);
																											boolean v73 = UserRestrictionsUtils.areEqual(v53, v33);
																											if (v73 == 0) {
																												Bundle v74 = new Bundle(v53);
																												Bundle v76 = new Bundle(v33);
																												UserManagerService$4 v78 = new UserManagerService$4(UserManagerService,p2,v74,v76);
																												boolean v80 = this.mHandler.post(v78);
																												Bundle v81 = new Bundle(v53);
																												Object v84 = this.mUserRestrictions.get(p2);
																												boolean v85 = UserRestrictionsUtils.areEqual(v84, v81);
																												if ((v85 ^ 1) != 0) {
																													boolean v86 = BundleUtils.isEmpty(v81);
																													if (v86 != 0) {
																														this.mUserRestrictions.put(p2, v81);
																														boolean v83 = 1;
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setUserRestriction(String p1, boolean p2, int p3){
	boolean v3 = this.USER_RESTRICTIONS.contains(p1);
	if (v3 != 0) {
		int v4 = Binder.getCallingUid();
		IPackageManager v6 = ActivityThread.getPackageManager();
		IPackageManager v5 = v6;
		String v7 = v5.getPackagesForUid(v4);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v18 == 0) {
							if ( != 0) {
								IPackageManager v19 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v20 = UserHandle.getUserId(v4);
									ApplicationInfo v21 = v19.getApplicationInfo([], 794624, v20);
									if ( >= .length) {
										int v22 = UserHandle.getUserId(v4);
										ApplicationInfo v23 = v19.getApplicationInfo([], 794624, v22);
										if (v23 == 0) {
											boolean v24 = v23.isSystemApp();
											if (v24 == 0) {
												boolean v17 = 1;
												if (v17 == 0) {
													boolean v2 = 0;
													if (v2 != 0) {
														Bundle v27 = this.mBaseUserRestrictions.getRestrictions(p3);
														Bundle v28 = BundleUtils.clone(v27);
														v28.putBoolean(p1, p2);
														Object v32 = this.mUserRestrictions.get(p2);
														Bundle v31 = v32;
														if (v31 == 0) {
															Bundle v33 = ;
															if (v28 == 0) {
																Object v35 = this.mUserRestrictions.get(p2);
																Bundle v34 = v35;
																if (v34 == v28) {
																	Preconditions.checkState();
																	Object v38 = this.mUserRestrictions.get(p2);
																	Bundle v37 = v38;
																	if (v37 == v28) {
																		Preconditions.checkState();
																		Object v41 = this.mUserRestrictions.get(p2);
																		boolean v42 = UserRestrictionsUtils.areEqual(v41, p1);
																		if ((v42 ^ 1) != 0) {
																			boolean v43 = BundleUtils.isEmpty(p1);
																			if (v43 != 0) {
																				this.mUserRestrictions.put(p2, p1);
																				boolean v40 = 1;
																				if (v40 == 0) {
																					Object v46 = this.mUsers.get(p2);
																					UserManagerService$UserData v45 = v46;
																					boolean v48 = this.mHandler.hasMessages(1, v45);
																					if (v48 != 0) {
																						Message v49 = this.mHandler.obtainMessage(1, v45);
																						boolean v50 = this.mHandler.sendMessageDelayed(v49, 2000);
																						Bundle v52 = this.mBaseUserRestrictions.getRestrictions(p2);
																						Bundle v53 = UserRestrictionsUtils.nonNull(v52);
																						Bundle v54 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																						RestrictionsSet v55 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p2);
																						boolean v56 = BundleUtils.isEmpty(v54);
																						if (v56 == 0) {
																							boolean v57 = v55.isEmpty();
																							if (v57 == 0) {
																								Bundle v58 = BundleUtils.clone(v53);
																								UserRestrictionsUtils.merge(v58, v54);
																								Bundle v60 = v55.mergeAll();
																								UserRestrictionsUtils.merge(v58, v60);
																								Bundle v51 = v58;
																								Object v63 = this.mUserRestrictions.get(p2);
																								boolean v64 = UserRestrictionsUtils.areEqual(v63, v51);
																								if ((v64 ^ 1) != 0) {
																									boolean v65 = BundleUtils.isEmpty(v51);
																									if (v65 != 0) {
																										this.mUserRestrictions.put(p2, v51);
																										boolean v62 = 1;
																										if (this.mAppOpsService == 0) {
																											UserManagerService$3 v67 = new UserManagerService$3(UserManagerService,v51,p3);
																											boolean v69 = this.mHandler.post(v67);
																											boolean v71 = UserRestrictionsUtils.areEqual(v51, v33);
																											if (v71 == 0) {
																												Bundle v72 = new Bundle(v51);
																												Bundle v74 = new Bundle(v33);
																												UserManagerService$4 v76 = new UserManagerService$4(UserManagerService,p2,v72,v74);
																												boolean v78 = this.mHandler.post(v76);
																												Bundle v79 = new Bundle(v51);
																												Object v82 = this.mUserRestrictions.get(p2);
																												boolean v83 = UserRestrictionsUtils.areEqual(v82, v79);
																												if ((v83 ^ 1) != 0) {
																													boolean v84 = BundleUtils.isEmpty(v79);
																													if (v84 != 0) {
																														this.mUserRestrictions.put(p2, v79);
																														boolean v81 = 1;
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setUserRestriction(String p1, boolean p2, int p3){
	boolean v3 = this.USER_RESTRICTIONS.contains(p1);
	if (v3 != 0) {
		int v4 = Binder.getCallingUid();
		IPackageManager v6 = ActivityThread.getPackageManager();
		IPackageManager v5 = v6;
		String v7 = v5.getPackagesForUid(v4);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v18 == 0) {
							if ( != 0) {
								IPackageManager v19 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v20 = UserHandle.getUserId(v4);
									ApplicationInfo v21 = v19.getApplicationInfo([], 794624, v20);
									if ( >= .length) {
										boolean v17 = 0;
										if (v17 == 0) {
											boolean v2 = 0;
											if (v2 != 0) {
												Bundle v24 = this.mBaseUserRestrictions.getRestrictions(p3);
												Bundle v25 = BundleUtils.clone(v24);
												v25.putBoolean(p1, p2);
												Object v29 = this.mUserRestrictions.get(p2);
												Bundle v28 = v29;
												if (v28 == 0) {
													Bundle v31 = new Bundle();
													Bundle v30 = ;
													if (v25 == 0) {
														Object v34 = this.mUserRestrictions.get(p2);
														Bundle v33 = v34;
														if (v33 == v25) {
															Preconditions.checkState();
															Object v37 = this.mUserRestrictions.get(p2);
															Bundle v36 = v37;
															if (v36 == v25) {
																Preconditions.checkState();
																Object v40 = this.mUserRestrictions.get(p2);
																boolean v41 = UserRestrictionsUtils.areEqual(v40, p1);
																if ((v41 ^ 1) != 0) {
																	boolean v42 = BundleUtils.isEmpty(p1);
																	if (v42 != 0) {
																		this.mUserRestrictions.put(p2, p1);
																		boolean v39 = 1;
																		if (v39 == 0) {
																			Object v45 = this.mUsers.get(p2);
																			UserManagerService$UserData v44 = v45;
																			boolean v47 = this.mHandler.hasMessages(1, v44);
																			if (v47 != 0) {
																				Message v48 = this.mHandler.obtainMessage(1, v44);
																				boolean v49 = this.mHandler.sendMessageDelayed(v48, 2000);
																				Bundle v51 = this.mBaseUserRestrictions.getRestrictions(p2);
																				Bundle v52 = UserRestrictionsUtils.nonNull(v51);
																				Bundle v53 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																				RestrictionsSet v54 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p2);
																				boolean v55 = BundleUtils.isEmpty(v53);
																				if (v55 == 0) {
																					boolean v56 = v54.isEmpty();
																					if (v56 == 0) {
																						Bundle v57 = BundleUtils.clone(v52);
																						UserRestrictionsUtils.merge(v57, v53);
																						Bundle v59 = v54.mergeAll();
																						UserRestrictionsUtils.merge(v57, v59);
																						Bundle v50 = v57;
																						Object v62 = this.mUserRestrictions.get(p2);
																						boolean v63 = UserRestrictionsUtils.areEqual(v62, v50);
																						if ((v63 ^ 1) != 0) {
																							boolean v64 = BundleUtils.isEmpty(v50);
																							if (v64 != 0) {
																								this.mUserRestrictions.put(p2, v50);
																								boolean v61 = 1;
																								if (this.mAppOpsService == 0) {
																									UserManagerService$3 v66 = new UserManagerService$3(UserManagerService,v50,p3);
																									boolean v68 = this.mHandler.post(v66);
																									boolean v70 = UserRestrictionsUtils.areEqual(v50, v30);
																									if (v70 == 0) {
																										Bundle v71 = new Bundle(v50);
																										Bundle v73 = new Bundle(v30);
																										UserManagerService$4 v75 = new UserManagerService$4(UserManagerService,p2,v71,v73);
																										boolean v77 = this.mHandler.post(v75);
																										Bundle v78 = new Bundle(v50);
																										Object v81 = this.mUserRestrictions.get(p2);
																										boolean v82 = UserRestrictionsUtils.areEqual(v81, v78);
																										if ((v82 ^ 1) != 0) {
																											boolean v83 = BundleUtils.isEmpty(v78);
																											if (v83 != 0) {
																												this.mUserRestrictions.put(p2, v78);
																												boolean v80 = 1;
																												return;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v3 = this.USER_RESTRICTIONS.contains(p1);\nint v4 = Binder.getCallingUid();\nIPackageManager v5 = AppGlobals.getPackageManager();\nBundle v28 = this.mBaseUserRestrictions.getRestrictions(p3);\nv28.putBoolean(p1, p2);\nthis.mUserRestrictions.put(p2, v28);', 'Object v20 = this.mUserRestrictions.get(p3);\nBundle v19 = v20;\nBundle v22 = new Bundle(v19);\nv21.putBoolean(p1, p2);\nthis.mBaseUserRestrictions.updateRestrictions(p3, v21);', 'Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p3);\nBundle v4 = BundleUtils.clone(v3);\nv4.putBoolean(p1, p2);\np0.updateUserRestrictionsInternalLR(v4, p3);']

The method setUserRestriction has the following similar APIs:

- API Name: createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo; with Similarity Score: 0.9201228618621826
  - Access Control Level: SYS_OR_SIG and the following code:
Object v31 = this.mUserRestrictions.get(p3);
Bundle v30 = v31;
Bundle v33 = new Bundle(v30);
v32.putBoolean("no_modify_accounts", 1);
boolean v43 = this.mBaseUserRestrictions.updateRestrictions(p3, v32);

- API Name: getUserRestrictions(I)Landroid/os/Bundle; with Similarity Score: 0.8853171467781067
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v2 = p0.getEffectiveUserRestrictions(p1);
Bundle v3 = BundleUtils.clone(v2);
return v3;

