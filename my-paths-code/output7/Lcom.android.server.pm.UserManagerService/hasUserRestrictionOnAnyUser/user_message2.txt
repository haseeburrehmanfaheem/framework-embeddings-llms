The method hasUserRestrictionOnAnyUser has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v2 = this.USER_RESTRICTIONS.contains(p1);
	if (v2 != 0) {
		int v3 = Binder.getCallingUid();
		IPackageManager v5 = ActivityThread.getPackageManager();
		IPackageManager v4 = v5;
		String v6 = v4.getPackagesForUid(v3);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v17 == 0) {
							if ( != 0) {
								IPackageManager v18 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v19 = UserHandle.getUserId(v3);
									ApplicationInfo v20 = v18.getApplicationInfo([], 794624, v19);
									if ( >= .length) {
										int v21 = UserHandle.getUserId(v3);
										ApplicationInfo v22 = v18.getApplicationInfo([], 794624, v21);
										if (v22 == 0) {
											boolean v23 = v22.isSystemApp();
											if (v23 == 0) {
												boolean v16 = 1;
												if (v16 == 0) {
													boolean v1 = 0;
													if (v1 != 0) {
														List v29 = UserManagerService.getUsersInternal(1, p1, 1);
														List v27 = v29;
														List v26 = v27;
														int v30 = v26.size();
														if ( >= v30) {
															Object v31 = v26.get();
															Object v34 = this.mUserRestrictions.get(p1);
															Bundle v33 = v34;
															if (v33 != 0) {
																Bundle v36 = this.mBaseUserRestrictions.getRestrictions(p1);
																Bundle v37 = UserRestrictionsUtils.nonNull(v36);
																Bundle v38 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																RestrictionsSet v39 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
																boolean v40 = BundleUtils.isEmpty(v38);
																if (v40 == 0) {
																	boolean v41 = v39.isEmpty();
																	if (v41 == 0) {
																		Bundle v42 = BundleUtils.clone(v37);
																		UserRestrictionsUtils.merge(v42, v38);
																		Bundle v44 = v39.mergeAll();
																		UserRestrictionsUtils.merge(v42, v44);
																		Bundle v35 = v42;
																		Object v47 = this.mUserRestrictions.get(p1);
																		boolean v48 = UserRestrictionsUtils.areEqual(v47, v35);
																		if ((v48 ^ 1) != 0) {
																			boolean v49 = BundleUtils.isEmpty(v35);
																			if (v49 != 0) {
																				this.mUserRestrictions.put(p1, v35);
																				boolean v46 = 1;
																				Bundle v32 = ;
																				if (v32 == 0) {
																					boolean v51 = v32.getBoolean(p1);
																					if (v51 == 0) {
																						int v52 = v26.size();
																						if ( >= v52) {
																							Object v53 = v26.get();
																							Object v56 = this.mUserRestrictions.get(p1);
																							Bundle v55 = v56;
																							if (v55 != 0) {
																								Bundle v58 = this.mBaseUserRestrictions.getRestrictions(p1);
																								Bundle v59 = UserRestrictionsUtils.nonNull(v58);
																								Bundle v60 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																								RestrictionsSet v61 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
																								boolean v62 = BundleUtils.isEmpty(v60);
																								if (v62 == 0) {
																									boolean v63 = v61.isEmpty();
																									if (v63 == 0) {
																										Bundle v64 = BundleUtils.clone(v59);
																										UserRestrictionsUtils.merge(v64, v60);
																										Bundle v66 = v61.mergeAll();
																										UserRestrictionsUtils.merge(v64, v66);
																										Bundle v57 = v64;
																										Object v69 = this.mUserRestrictions.get(p1);
																										boolean v70 = UserRestrictionsUtils.areEqual(v69, v57);
																										if ((v70 ^ 1) != 0) {
																											boolean v71 = BundleUtils.isEmpty(v57);
																											if (v71 != 0) {
																												this.mUserRestrictions.put(p1, v57);
																												boolean v68 = 1;
																												Bundle v54 = ;
																												if (v54 == 0) {
																													boolean v73 = v54.getBoolean(p1);
																													if (v73 == 0) {
																														return 1;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v2 = this.USER_RESTRICTIONS.contains(p1);
	if (v2 != 0) {
		int v3 = Binder.getCallingUid();
		IPackageManager v5 = ActivityThread.getPackageManager();
		IPackageManager v4 = v5;
		String v6 = v4.getPackagesForUid(v3);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v17 == 0) {
							if ( != 0) {
								IPackageManager v18 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v19 = UserHandle.getUserId(v3);
									ApplicationInfo v20 = v18.getApplicationInfo([], 794624, v19);
									if ( >= .length) {
										int v21 = UserHandle.getUserId(v3);
										ApplicationInfo v22 = v18.getApplicationInfo([], 794624, v21);
										if (v22 == 0) {
											boolean v23 = v22.isSystemApp();
											if (v23 == 0) {
												boolean v16 = 1;
												if (v16 == 0) {
													boolean v1 = 0;
													if (v1 != 0) {
														List v29 = UserManagerService.getUsersInternal(1, p1, 1);
														List v27 = v29;
														List v26 = v27;
														int v30 = v26.size();
														if ( >= v30) {
															Object v31 = v26.get();
															Object v34 = this.mUserRestrictions.get(p1);
															Bundle v33 = v34;
															if (v33 != 0) {
																Bundle v36 = this.mBaseUserRestrictions.getRestrictions(p1);
																Bundle v37 = UserRestrictionsUtils.nonNull(v36);
																Bundle v38 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																RestrictionsSet v39 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
																boolean v40 = BundleUtils.isEmpty(v38);
																if (v40 == 0) {
																	boolean v41 = v39.isEmpty();
																	if (v41 == 0) {
																		Bundle v42 = BundleUtils.clone(v37);
																		UserRestrictionsUtils.merge(v42, v38);
																		Bundle v44 = v39.mergeAll();
																		UserRestrictionsUtils.merge(v42, v44);
																		Bundle v35 = v42;
																		Object v47 = this.mUserRestrictions.get(p1);
																		boolean v48 = UserRestrictionsUtils.areEqual(v47, v35);
																		if ((v48 ^ 1) != 0) {
																			boolean v49 = BundleUtils.isEmpty(v35);
																			if (v49 != 0) {
																				this.mUserRestrictions.delete(p1);
																				boolean v46 = 1;
																				Bundle v32 = ;
																				if (v32 == 0) {
																					boolean v51 = v32.getBoolean(p1);
																					if (v51 == 0) {
																						int v52 = v26.size();
																						if ( >= v52) {
																							Object v53 = v26.get();
																							Object v56 = this.mUserRestrictions.get(p1);
																							Bundle v55 = v56;
																							if (v55 != 0) {
																								Bundle v58 = this.mBaseUserRestrictions.getRestrictions(p1);
																								Bundle v59 = UserRestrictionsUtils.nonNull(v58);
																								Bundle v60 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																								RestrictionsSet v61 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
																								boolean v62 = BundleUtils.isEmpty(v60);
																								if (v62 == 0) {
																									boolean v63 = v61.isEmpty();
																									if (v63 == 0) {
																										Bundle v64 = BundleUtils.clone(v59);
																										UserRestrictionsUtils.merge(v64, v60);
																										Bundle v66 = v61.mergeAll();
																										UserRestrictionsUtils.merge(v64, v66);
																										Bundle v57 = v64;
																										Object v69 = this.mUserRestrictions.get(p1);
																										boolean v70 = UserRestrictionsUtils.areEqual(v69, v57);
																										if ((v70 ^ 1) != 0) {
																											boolean v71 = BundleUtils.isEmpty(v57);
																											if (v71 != 0) {
																												this.mUserRestrictions.put(p1, v57);
																												boolean v68 = 1;
																												Bundle v54 = ;
																												if (v54 == 0) {
																													boolean v73 = v54.getBoolean(p1);
																													if (v73 == 0) {
																														return 1;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v2 = this.USER_RESTRICTIONS.contains(p1);
	if (v2 != 0) {
		int v3 = Binder.getCallingUid();
		IPackageManager v5 = ActivityThread.getPackageManager();
		IPackageManager v4 = v5;
		String v6 = v4.getPackagesForUid(v3);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v17 == 0) {
							if ( != 0) {
								IPackageManager v18 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v19 = UserHandle.getUserId(v3);
									ApplicationInfo v20 = v18.getApplicationInfo([], 794624, v19);
									if ( >= .length) {
										int v21 = UserHandle.getUserId(v3);
										ApplicationInfo v22 = v18.getApplicationInfo([], 794624, v21);
										if (v22 == 0) {
											boolean v23 = v22.isSystemApp();
											if (v23 == 0) {
												boolean v16 = 1;
												if (v16 == 0) {
													boolean v1 = 0;
													if (v1 != 0) {
														List v29 = UserManagerService.getUsersInternal(1, p1, 1);
														List v27 = v29;
														List v26 = v27;
														int v30 = v26.size();
														if ( >= v30) {
															Object v31 = v26.get();
															Object v34 = this.mUserRestrictions.get(p1);
															Bundle v33 = v34;
															if (v33 != 0) {
																Bundle v36 = this.mBaseUserRestrictions.getRestrictions(p1);
																Bundle v37 = UserRestrictionsUtils.nonNull(v36);
																Bundle v38 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																RestrictionsSet v39 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
																boolean v40 = BundleUtils.isEmpty(v38);
																if (v40 == 0) {
																	boolean v41 = v39.isEmpty();
																	if (v41 == 0) {
																		Bundle v42 = BundleUtils.clone(v37);
																		UserRestrictionsUtils.merge(v42, v38);
																		Bundle v44 = v39.mergeAll();
																		UserRestrictionsUtils.merge(v42, v44);
																		Bundle v35 = v42;
																		Object v47 = this.mUserRestrictions.get(p1);
																		boolean v48 = UserRestrictionsUtils.areEqual(v47, v35);
																		if ((v48 ^ 1) != 0) {
																			boolean v49 = BundleUtils.isEmpty(v35);
																			if (v49 != 0) {
																				this.mUserRestrictions.put(p1, v35);
																				boolean v46 = 1;
																				Bundle v32 = ;
																				if (v32 == 0) {
																					boolean v51 = v32.getBoolean(p1);
																					if (v51 == 0) {
																						int v52 = v26.size();
																						if ( >= v52) {
																							Object v53 = v26.get();
																							Object v56 = this.mUserRestrictions.get(p1);
																							Bundle v55 = v56;
																							if (v55 != 0) {
																								Bundle v58 = this.mBaseUserRestrictions.getRestrictions(p1);
																								Bundle v59 = UserRestrictionsUtils.nonNull(v58);
																								Bundle v60 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
																								RestrictionsSet v61 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
																								boolean v62 = BundleUtils.isEmpty(v60);
																								if (v62 == 0) {
																									boolean v63 = v61.isEmpty();
																									if (v63 == 0) {
																										Bundle v64 = BundleUtils.clone(v59);
																										UserRestrictionsUtils.merge(v64, v60);
																										Bundle v66 = v61.mergeAll();
																										UserRestrictionsUtils.merge(v64, v66);
																										Bundle v57 = v64;
																										Object v69 = this.mUserRestrictions.get(p1);
																										boolean v70 = UserRestrictionsUtils.areEqual(v69, v57);
																										if ((v70 ^ 1) != 0) {
																											boolean v71 = BundleUtils.isEmpty(v57);
																											if (v71 != 0) {
																												this.mUserRestrictions.delete(p1);
																												boolean v68 = 1;
																												Bundle v54 = ;
																												if (v54 == 0) {
																													boolean v73 = v54.getBoolean(p1);
																													if (v73 == 0) {
																														return 1;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = Binder.getCallingUid();\nString v6 = v4.getPackagesForUid(v3);\nBundle v42 = BundleUtils.clone(v37);\nUserRestrictionsUtils.merge(v42, v44);', 'boolean v2 = this.USER_RESTRICTIONS.contains(p1);\nObject v31 = v26.get();\nBundle v33 = v34;', 'boolean v1 = UserRestrictionsUtils.isValidRestriction(p1);\nList v2 = p0.getUsers(1);\nBundle v5 = p0.getEffectiveUserRestrictions(UserInfo.id);']

The method hasUserRestrictionOnAnyUser has the following similar APIs:

- API Name: hasBaseUserRestriction(Ljava/lang/String;I)Z with Similarity Score: 0.9183417558670044
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v2 = UserRestrictionsUtils.isValidRestriction(p1);
Bundle v3 = this.mBaseUserRestrictions.getRestrictions(p2);
boolean v4 = v3.getBoolean(p1, 0);

- API Name: hasUserRestriction(Ljava/lang/String;I)Z with Similarity Score: 0.8979460597038269
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = UserRestrictionsUtils.isValidRestriction(p1);
Bundle v4 = UserManagerService.-$$Nest$mgetEffectiveUserRestrictions(this.this$0, p2);
boolean v5 = v4.getBoolean(p1);

