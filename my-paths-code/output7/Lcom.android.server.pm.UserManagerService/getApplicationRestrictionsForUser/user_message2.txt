The method getApplicationRestrictionsForUser has the following code snippet:

This is path 1 for the API with depth 2:
public Bundle getApplicationRestrictionsForUser(String p1, int p2){
	if (v4 != 0) {
		StringBuilder v5 = new StringBuilder();
		StringBuilder v7 = v5.append("get application restrictions for other user/app ");
		StringBuilder v8 = v5.append(p1);
		String v9 = v5.toString();
		AtomicFile v14 = new AtomicFile(v15);
		File v15 = new File(v16,v17);
		File v16 = Environment.getUserSystemDirectory(p2);
		StringBuilder v18 = new StringBuilder();
		StringBuilder v20 = v18.append("res_");
		StringBuilder v21 = v18.append(p1);
		StringBuilder v22 = v18.append(".xml");
		String v23 = v18.toString();
		String v17 = v23;
		Bundle v27 = new Bundle();
		ArrayList v29 = new ArrayList();
		File v31 = v14.getBaseFile();
		boolean v32 = v31.exists();
		if (v32 != 0) {
			Bundle v26 = v27;
			Bundle v13 = v26;
			return v13;
		}
	}
}
This is path 2 for the API with depth 2:
public Bundle getApplicationRestrictionsForUser(String p1, int p2){
	if (v4 != 0) {
		StringBuilder v5 = new StringBuilder();
		StringBuilder v7 = v5.append("get application restrictions for other user/app ");
		StringBuilder v8 = v5.append(p1);
		String v9 = v5.toString();
		AtomicFile v14 = new AtomicFile(v15);
		File v15 = new File(v16,v17);
		File v16 = Environment.getUserSystemDirectory(p2);
		StringBuilder v18 = new StringBuilder();
		StringBuilder v20 = v18.append("res_");
		StringBuilder v21 = v18.append(p1);
		StringBuilder v22 = v18.append(".xml");
		String v23 = v18.toString();
		String v17 = v23;
		Bundle v27 = new Bundle();
		ArrayList v29 = new ArrayList();
		File v31 = v14.getBaseFile();
		boolean v32 = v31.exists();
		if (v32 != 0) {
			FileInputStream v33 = v14.openRead();
			TypedXmlPullParser v34 = Xml.resolvePullParser(v33);
			XmlUtils.nextElement(v34);
			int v36 = v34.getEventType();
			if (v36 == 2) {
				StringBuilder v37 = new StringBuilder;
				File v41 = v14.getBaseFile();
				IoUtils.closeQuietly();
				Bundle v26 = v27;
				Bundle v13 = v26;
				return v13;
			}
		}
	}
}

and the following sink code:
['String v17 = UserManagerService.packageToRestrictionsFileName(p1);\nAtomicFile v14 = new AtomicFile(v15);\nBundle v20 = UserManagerService.readApplicationRestrictionsLAr(v14);\nBundle v13 = v20;\nreturn v13;', 'UserManagerService.checkSystemOrRoot(v9);\nBundle v11 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);\nreturn v11;']

The method getApplicationRestrictionsForUser has the following similar APIs:

- API Name: getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle; with Similarity Score: 0.9313217997550964
  - Access Control Level: NONE and the following code:
Bundle v13 = UserManagerService.readApplicationRestrictionsLAr(p1, v1);
Bundle v2 = v13;
return v2;

- API Name: getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle; with Similarity Score: 0.8578587174415588
  - Access Control Level: NONE and the following code:
AtomicFile v16 = new AtomicFile(v17);
Bundle v22 = UserManagerService.readApplicationRestrictionsLAr(v16);
Bundle v15 = v22;
Bundle v2 = v15;
return v2;

