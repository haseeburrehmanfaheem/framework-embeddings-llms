This is path 1 for the API with depth 2:
public boolean canAddMoreUsersOfType(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v4 = this.mEnabled;
		if (v4 != 0) {
			int v5 = this.mMaxAllowed;
			if (v5 != -1) {
				String v6 = this.mName;
				int v8 = this.mUsers.size();
				if ( >= v8) {
					Object v9 = this.mUsers.valueAt();
					boolean v10 = UserInfo.userType.equals(v6);
					if (v10 == 0) {
						if (UserInfo.guestToRemove != 0) {
							boolean v11 = this.mRemovingUserIds.get(UserInfo.id);
							if (v11 != 0) {
								if (UserInfo.preCreated != 0) {
									if ( >= v8) {
										int v7 = ;
										if (v7 >= v5) {
											boolean v3 = ;
											if (v3 == 0) {
												return ;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean canAddMoreUsersOfType(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v4 = v2.isEnabled();
		if (v4 != 0) {
			int v5 = v2.getMaxAllowed();
			if (v5 != -1) {
				String v6 = v2.getName();
				int v7 = UserManagerService.getNumberOfUsersOfType(v6);
				if (v7 >= v5) {
					boolean v3 = ;
					if (v3 == 0) {
						return ;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean canAddMoreUsersOfType(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v3 = p0.canAddMoreUsersOfType(v2);
		if (v3 == 0) {
			return ;
		}
	}
}
