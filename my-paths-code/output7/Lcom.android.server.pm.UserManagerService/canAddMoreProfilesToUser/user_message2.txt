The method canAddMoreProfilesToUser has the following code snippet:

This is path 1 for the API with depth 2:
public boolean canAddMoreProfilesToUser(String p1, int p2, boolean p3){
	Object v3 = this.mUserTypes.get(p1);
	if (v3 == 0) {
		boolean v4 = this.mEnabled;
		if (v4 != 0) {
			boolean v6 = UserManager.isUserTypeManagedProfile(this.mName);
			boolean v5 = v6;
			if (v5 == 0) {
				PackageManager v7 = this.mContext.getPackageManager();
				boolean v8 = v7.hasSystemFeature("android.software.managed_users");
				if (v8 != 0) {
					Object v10 = this.mUsers.get(p2);
					if (v10 == 0) {
						if (UserInfo.partial == 0) {
							boolean v11 = this.mRemovingUserIds.get(p2);
							if (v11 != 0) {
								UserInfo v9 = 0;
								if (v9 == 0) {
									boolean v19 = UserInfo.isProfile();
									if (v19 != 0) {
										boolean v20 = UserInfo.isGuest();
										if (v20 != 0) {
											boolean v21 = UserInfo.isRestricted();
											if (v21 == 0) {
												boolean v18 = 0;
												if (v18 != 0) {
													StringBuilder v24 = new StringBuilder();
													StringBuilder v26 = v24.append("getting profiles related to user ");
													StringBuilder v27 = v24.append(p2);
													String v28 = v24.toString();
													long v30 = Binder.clearCallingIdentity();
													IntArray v31 = UserManagerService.getProfileIdsLU(p2, p1, 0);
													[I v32 = v31.toArray();
													Binder.restoreCallingIdentity(v30);
													[I v22 = v32;
													if (v22.length <= 0) {
														if (p3 == 0) {
															int v35 = this.mUsers.size();
															if ( >= v35) {
																Object v36 = this.mUsers.valueAt();
																boolean v37 = this.mRemovingUserIds.get(UserInfo.id);
																if (v37 != 0) {
																	boolean v38 = UserManagerService$UserData.info.isGuest();
																	if (v38 != 0) {
																		if (UserInfo.preCreated != 0) {
																			if ( >= v35) {
																				int v34 = ;
																				int v39 = UserManager.getMaxSupportedUsers();
																				if ((v39 - (v34 - )) > 0) {
																					if (v5 == 0) {
																						if ((v34 - ) != 1) {
																							int v41 = v3.getMaxAllowedPerParent();
																							if (Build.IS_DEBUGGABLE != 0) {
																								boolean v42 = v3.isManagedProfile();
																								if (v42 == 0) {
																									int v43 = SystemProperties.getInt("persist.sys.max_profiles", v41);
																									int v40 = v43;
																									if (v40 == -1) {
																										int v44 = Math.min(, (v40 - (v22.length - )));
																										if ( > 0) {
																											int v45 = this.mMaxAllowed;
																											if (v45 == -1) {
																												int v46 = Math.max(0, );
																												int v1 = v46;
																												if (v1 <= 0) {
																													return ;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean canAddMoreProfilesToUser(String p1, int p2, boolean p3){
	Object v3 = this.mUserTypes.get(p1);
	if (v3 == 0) {
		boolean v4 = this.mEnabled;
		if (v4 != 0) {
			boolean v6 = UserManager.isUserTypeManagedProfile(this.mName);
			boolean v5 = v6;
			if (v5 == 0) {
				PackageManager v7 = this.mContext.getPackageManager();
				boolean v8 = v7.hasSystemFeature("android.software.managed_users");
				if (v8 != 0) {
					Object v10 = this.mUsers.get(p2);
					if (v10 == 0) {
						if (UserInfo.partial == 0) {
							boolean v11 = this.mRemovingUserIds.get(p2);
							if (v11 != 0) {
								UserInfo v9 = 0;
								if (v9 == 0) {
									boolean v19 = UserInfo.isProfile();
									if (v19 != 0) {
										boolean v20 = UserInfo.isGuest();
										if (v20 != 0) {
											boolean v21 = UserInfo.isRestricted();
											if (v21 == 0) {
												boolean v18 = 0;
												if (v18 != 0) {
													StringBuilder v24 = new StringBuilder();
													StringBuilder v26 = v24.append("getting profiles related to user ");
													StringBuilder v27 = v24.append(p2);
													String v28 = v24.toString();
													long v30 = Binder.clearCallingIdentity();
													IntArray v31 = UserManagerService.getProfileIdsLU(p2, p1, 0);
													[I v32 = v31.toArray();
													Binder.restoreCallingIdentity(v30);
													[I v22 = v32;
													if (v22.length <= 0) {
														if (p3 == 0) {
															int v35 = this.mUsers.size();
															if ( >= v35) {
																Object v36 = this.mUsers.valueAt();
																boolean v37 = this.mRemovingUserIds.get(UserInfo.id);
																if (v37 != 0) {
																	boolean v38 = UserManagerService$UserData.info.isGuest();
																	if (v38 != 0) {
																		if (UserInfo.preCreated != 0) {
																			if ( >= v35) {
																				int v34 = ;
																				int v39 = UserManager.getMaxSupportedUsers();
																				if ((v39 - (v34 - )) > 0) {
																					if (v5 == 0) {
																						if ((v34 - ) != 1) {
																							int v41 = v3.getMaxAllowedPerParent();
																							if (Build.IS_DEBUGGABLE != 0) {
																								boolean v42 = v3.isManagedProfile();
																								if (v42 == 0) {
																									int v40 = v41;
																									if (v40 == -1) {
																										int v43 = Math.min(, (v40 - (v22.length - )));
																										if ( > 0) {
																											int v44 = this.mMaxAllowed;
																											if (v44 == -1) {
																												int v45 = Math.max(0, );
																												int v1 = v45;
																												if (v1 <= 0) {
																													return ;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mUserTypes.get(p1);\nif (v3 == 0) {\nboolean v4 = this.mEnabled;\nif (v4 != 0) {\nboolean v6 = UserManager.isUserTypeManagedProfile(this.mName);\nboolean v5 = v6;\nPackageManager v7 = this.mContext.getPackageManager();\nboolean v8 = v7.hasSystemFeature("android.software.managed_users");\nObject v10 = this.mUsers.get(p2);\nif (v10 == 0) {\nIntArray v31 = UserManagerService.getProfileIdsLU(p2, p1, 0);\nint[] v22 = v31.toArray();', 'Object v3 = this.mUserTypes.get(p1);\nif (v3 == 0) {\nboolean v4 = v3.isEnabled();\nif (v4 != 0) {\nboolean v5 = v3.isManagedProfile();\nPackageManager v6 = this.mContext.getPackageManager();\nboolean v7 = v6.hasSystemFeature("android.software.managed_users");\nUserInfo v8 = UserManagerService.getUserInfoLU(p2);\n[I v10 = UserManagerService.getProfileIds(p2, p1, 0);', 'int v1 = p0.getRemainingCreatableProfileCount(p1, p2, p3);\nif (v1 <= 0) {']

The method canAddMoreProfilesToUser has the following similar APIs:

- API Name: getRemainingCreatableProfileCount(Ljava/lang/String;I)I with Similarity Score: 0.9784203767776489
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = p0.getRemainingCreatableProfileCount(p1, p2, 0);

- API Name: canAddMoreUsersOfType(Ljava/lang/String;)Z with Similarity Score: 0.8683863282203674
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = this.mUserTypes.get(p1);
if (v2 == 0) {
boolean v4 = v2.isEnabled();
int v5 = v2.getMaxAllowed();
String v6 = v2.getName();
int v7 = UserManagerService.getNumberOfUsersOfType(v6);

