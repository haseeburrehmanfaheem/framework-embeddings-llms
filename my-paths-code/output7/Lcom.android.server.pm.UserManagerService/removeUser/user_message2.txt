The method removeUser has the following code snippet:

This is path 1 for the API with depth 2:
public boolean removeUser(int p1){
	Object v10 = this.mUsers.get(p1);
	if (v10 == 0) {
		if (UserInfo.partial == 0) {
			boolean v11 = this.mRemovingUserIds.get(p1);
			if (v11 != 0) {
				UserInfo v9 = 0;
				if (v9 == 0) {
					boolean v19 = UserManager.isUserTypeManagedProfile(this.userType);
					boolean v18 = v19;
					if (v18 == 0) {
						if ( == 0) {
							String v8 = ;
							int v20 = UserHandle.getCallingUserId();
							Bundle v24 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
							if (v24 != 0) {
								Bundle v25 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
								boolean v26 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v25);
								Bundle v23 = ;
								Bundle v28 = new Bundle(v23);
								if (v23 == 0) {
									Bundle v27 = v28;
									Bundle v21 = v27;
									boolean v30 = v21.getBoolean(v8, 0);
									if (v30 == 0) {
										Object v34 = this.mUsers.get(p1);
										if (p1 != 0) {
											if (v34 != 0) {
												boolean v35 = this.mRemovingUserIds.get(p1);
												if (v35 == 0) {
													this.mRemovingUserIds.put(p1, 1);
													Integer v44 = Integer.valueOf(p1);
													boolean v45 = this.mRecentlyRemovedIds.add(v44);
													int v46 = this.mRecentlyRemovedIds.size();
													if (v46 <= 100) {
														Object v47 = this.mRecentlyRemovedIds.removeFirst();
														UserInfo.partial = 1;
														UserInfo.flags = (UserInfo.flags | 64);
														AtomicFile v49 = new AtomicFile(v50);
														File v50 = new File(this.mUsersDir,v55);
														StringBuilder v51 = new StringBuilder();
														StringBuilder v53 = v51.append(UserInfo.id);
														StringBuilder v54 = v51.append(".xml");
														String v55 = v51.toString();
														FileOutputStream v58 = v49.startWrite();
														UserManagerService.writeUserLP(v34, v58);
														v49.finishWrite(v58);
														long v62 = UserManagerService.logUserJourneyBegin(6, p1, UserInfo.userType, UserInfo.flags);
														long v61 = v62;
														this.mAppOpsService.removeUser(p1);
														if (UserInfo.profileGroupId == -10000) {
															boolean v66 = UserManager.isUserTypeManagedProfile(this.userType);
															boolean v65 = v66;
															if (v65 == 0) {
																IActivityManager v67 = ActivityManager.getService();
																Binder.restoreCallingIdentity(v32);
																boolean v31 = 0;
																return v31;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean removeUser(int p1){
	Object v10 = this.mUsers.get(p1);
	if (v10 == 0) {
		if (UserInfo.partial == 0) {
			boolean v11 = this.mRemovingUserIds.get(p1);
			if (v11 != 0) {
				UserInfo v9 = 0;
				if (v9 == 0) {
					boolean v19 = UserManager.isUserTypeManagedProfile(this.userType);
					boolean v18 = v19;
					if (v18 == 0) {
						if ( == 0) {
							String v8 = ;
							int v20 = UserHandle.getCallingUserId();
							Bundle v24 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
							if (v24 != 0) {
								Bundle v25 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
								boolean v26 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v25);
								Bundle v23 = ;
								Bundle v28 = new Bundle();
								if (v23 == 0) {
									Bundle v27 = v28;
									Bundle v21 = v27;
									boolean v30 = v21.getBoolean(v8, 0);
									if (v30 == 0) {
										Object v34 = this.mUsers.get(p1);
										if (p1 != 0) {
											if (v34 != 0) {
												boolean v35 = this.mRemovingUserIds.get(p1);
												if (v35 == 0) {
													this.mRemovingUserIds.put(p1, 1);
													Integer v44 = Integer.valueOf(p1);
													boolean v45 = this.mRecentlyRemovedIds.add(v44);
													int v46 = this.mRecentlyRemovedIds.size();
													if (v46 <= 100) {
														Object v47 = this.mRecentlyRemovedIds.removeFirst();
														UserInfo.partial = 1;
														UserInfo.flags = (UserInfo.flags | 64);
														AtomicFile v49 = new AtomicFile(v50);
														File v50 = new File(this.mUsersDir,v55);
														StringBuilder v51 = new StringBuilder();
														StringBuilder v53 = v51.append(UserInfo.id);
														StringBuilder v54 = v51.append(".xml");
														String v55 = v51.toString();
														FileOutputStream v58 = v49.startWrite();
														UserManagerService.writeUserLP(v34, v58);
														v49.finishWrite(v58);
														long v62 = UserManagerService.logUserJourneyBegin(6, p1, UserInfo.userType, UserInfo.flags);
														long v61 = v62;
														this.mAppOpsService.removeUser(p1);
														if (UserInfo.profileGroupId == -10000) {
															boolean v66 = UserManager.isUserTypeManagedProfile(this.userType);
															boolean v65 = v66;
															if (v65 == 0) {
																IActivityManager v67 = ActivityManager.getService();
																Binder.restoreCallingIdentity(v32);
																boolean v31 = 0;
																return v31;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean removeUser(int p1){
	Object v10 = this.mUsers.get(p1);
	if (v10 == 0) {
		if (UserInfo.partial == 0) {
			boolean v11 = this.mRemovingUserIds.get(p1);
			if (v11 != 0) {
				UserInfo v9 = 0;
				if (v9 == 0) {
					boolean v19 = UserManager.isUserTypeManagedProfile(this.userType);
					boolean v18 = v19;
					if (v18 == 0) {
						if ( == 0) {
							String v8 = ;
							int v20 = UserHandle.getCallingUserId();
							Bundle v24 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
							if (v24 != 0) {
								Bundle v25 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
								boolean v26 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v25);
								Bundle v23 = ;
								Bundle v28 = new Bundle(v23);
								if (v23 == 0) {
									Bundle v27 = v28;
									Bundle v21 = v27;
									boolean v30 = v21.getBoolean(v8, 0);
									if (v30 == 0) {
										Object v34 = this.mUsers.get(p1);
										if (p1 != 0) {
											if (v34 != 0) {
												boolean v35 = this.mRemovingUserIds.get(p1);
												if (v35 == 0) {
													this.mRemovingUserIds.put(p1, 1);
													Integer v44 = Integer.valueOf(p1);
													boolean v45 = this.mRecentlyRemovedIds.add(v44);
													int v46 = this.mRecentlyRemovedIds.size();
													if (v46 <= 100) {
														Object v47 = this.mRecentlyRemovedIds.removeFirst();
														UserInfo.partial = 1;
														UserInfo.flags = (UserInfo.flags | 64);
														AtomicFile v49 = new AtomicFile(v50);
														File v50 = new File(this.mUsersDir,v55);
														StringBuilder v51 = new StringBuilder();
														StringBuilder v53 = v51.append(UserInfo.id);
														StringBuilder v54 = v51.append(".xml");
														String v55 = v51.toString();
														FileOutputStream v58 = v49.startWrite();
														UserManagerService.writeUserLP(v34, v58);
														v49.finishWrite(v58);
														long v62 = UserManagerService.logUserJourneyBegin(6, p1, UserInfo.userType, UserInfo.flags);
														long v61 = v62;
														this.mAppOpsService.removeUser(p1);
														if (UserInfo.profileGroupId == -10000) {
															boolean v65 = UserManager.isUserTypeManagedProfile(this.userType);
															boolean v64 = v65;
															if (v64 == 0) {
																IActivityManager v66 = ActivityManager.getService();
																Binder.restoreCallingIdentity(v32);
																boolean v31 = 0;
																return v31;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v10 = this.mUsers.get(p1);\nint v9 = UserHandle.getCallingUserId();\nBundle v24 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);\nboolean v26 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v25);\nthis.mAppOpsService.removeUser(p1);', 'UserInfo v9 = UserManagerService.getUserInfoLU(p1);\nBundle v14 = UserManagerService.getEffectiveUserRestrictions(v11);\nboolean v16 = v12.getBoolean(v8, 0);\nUserManagerService.addRemovingUserIdLocked(p1);\nthis.mAppOpsService.removeUser(p1);', 'String v8 = p0.getUserRemovalRestriction(p1);\nint v9 = UserHandle.getCallingUserId();\nBundle v10 = p0.getUserRestrictions(v9);\nboolean v11 = v10.getBoolean(v8, 0);']

The method removeUser has the following similar APIs:

- API Name: setUserRestriction(Ljava/lang/String;ZI)V with Similarity Score: 0.8569066524505615
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = this.USER_RESTRICTIONS.contains(p1);
int v4 = Binder.getCallingUid();
IPackageManager v5 = AppGlobals.getPackageManager();
Bundle v28 = this.mBaseUserRestrictions.getRestrictions(p3);
v28.putBoolean(p1, p2);
this.mUserRestrictions.put(p2, v28);

- API Name: removeUserWhenPossible(IZ)I with Similarity Score: 0.8459775447845459
  - Access Control Level: SYS_OR_SIG and the following code:
Object v13 = this.mUsers.get(p1);
UserManagerService.addRemovingUserIdLocked(p1);
UserManagerService.writeUserLP(v13);
long v23 = UserManagerService.logUserRemoveJourneyBegin(p1, UserInfo.userType, UserInfo.flags);
this.mAppOpsService.removeUser(p1);

