To determine the access control level for the `isUserOfType` method, let's analyze the provided information:

1. **Code Snippets**: The method has two paths with depth 2, both involving checks on `p2`, `mUsers`, and `mRemovingUserIds`. These checks seem to be related to user management and access control.

2. **Sink Code**: The sink code snippets involve getting a user from `mUsers` based on an ID (`p1`), checking if a user ID is in `mRemovingUserIds`, getting a user info object using `UserManagerService.getUserInfoLU(p1)`, and retrieving a user type string via `getUserTypeNoChecks(p1)`.

3. **Similar APIs**:
   - **getProfileParent(I)Landroid/content/pm/UserInfo;**: This API has an access control level of `SYS_OR_SIG` with similar code involving `mUsers` and `mRemovingUserIds`.
   - **getSeedAccountType(I)Ljava/lang/String;**: Also has an access control level of `SYS_OR_SIG`, with similar operations on user data.

Given these points:

- The `isUserOfType` method interacts with sensitive user information, including user types and removal status.
- Both similar APIs (`getProfileParent` and `getSeedAccountType`) have been assigned the `SYS_OR_SIG` access control level due to their interaction with user management and sensitive information.
- The sink code indicates operations that could potentially reveal or manipulate sensitive user data, aligning with the need for a higher level of access control.

Considering these factors, it's reasonable to conclude that the `isUserOfType` method should also be assigned a similar level of access control due to its interaction with sensitive user information and its similarity in functionality to other APIs that have been classified as `SYS_OR_SIG`.

Therefore, the final access control level for the `isUserOfType` API is:

```json
{ "access_control_level": "SYS_OR_SIG" }
```