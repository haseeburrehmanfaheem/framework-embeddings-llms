This is path 1 for the API with depth 2:
public int removeUserWhenPossible(int p1, boolean p2){
	Object v13 = this.mUsers.get(p1);
	if (p1 != 0) {
		if (v13 != 0) {
			boolean v14 = this.mRemovingUserIds.get(p1);
			if (v14 == 0) {
				this.mRemovingUserIds.put(p1, 1);
				Integer v23 = Integer.valueOf(p1);
				boolean v24 = this.mRecentlyRemovedIds.add(v23);
				int v25 = this.mRecentlyRemovedIds.size();
				if (v25 <= 100) {
					Object v26 = this.mRecentlyRemovedIds.removeFirst();
					UserInfo.partial = 1;
					UserInfo.flags = (UserInfo.flags | 64);
					AtomicFile v28 = new AtomicFile(v29);
					File v29 = new File(this.mUsersDir,v34);
					StringBuilder v30 = new StringBuilder();
					StringBuilder v32 = v30.append(UserInfo.id);
					StringBuilder v33 = v30.append(".xml");
					String v34 = v30.toString();
					FileOutputStream v37 = v28.startWrite();
					UserManagerService.writeUserLP(v13, v37);
					v28.finishWrite(v37);
					long v41 = UserManagerService.logUserJourneyBegin(6, p1, UserInfo.userType, UserInfo.flags);
					long v40 = v41;
					this.mAppOpsService.removeUser(p1);
					if (UserInfo.profileGroupId == -10000) {
						boolean v45 = UserManager.isUserTypeManagedProfile(this.userType);
						boolean v44 = v45;
						if (v44 == 0) {
							IActivityManager v46 = ActivityManager.getService();
							Binder.restoreCallingIdentity(v11);
							boolean v10 = 0;
							if (v10 == 0) {
								UserInfo.flags = (UserInfo.flags | 256);
								p0.writeUserLP(v7);
								Binder.restoreCallingIdentity(v6);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int removeUserWhenPossible(int p1, boolean p2){
	Object v13 = this.mUsers.get(p1);
	if (p1 != 0) {
		if (v13 != 0) {
			boolean v14 = this.mRemovingUserIds.get(p1);
			if (v14 == 0) {
				UserManagerService.addRemovingUserIdLocked(p1);
				UserInfo.partial = 1;
				UserInfo.flags = (UserInfo.flags | 64);
				UserManagerService.writeUserLP(v13);
				long v23 = UserManagerService.logUserRemoveJourneyBegin(p1, UserInfo.userType, UserInfo.flags);
				this.mAppOpsService.removeUser(p1);
				if (UserInfo.profileGroupId == -10000) {
					IActivityManager v26 = ActivityManager.getService();
					UserManagerService$6 v27 = new UserManagerService$6(UserManagerService,v23);
					int v29 = v26.stopUser(p1, 1, v27);
					Binder.restoreCallingIdentity(v11);
					boolean v10 = 0;
					if (v10 == 0) {
						UserInfo.flags = (UserInfo.flags | 256);
						AtomicFile v42 = new AtomicFile(v43);
						File v43 = new File(this.mUsersDir,v48);
						StringBuilder v44 = new StringBuilder();
						StringBuilder v46 = v44.append(UserInfo.id);
						StringBuilder v47 = v44.append(".xml");
						String v48 = v44.toString();
						FileOutputStream v51 = v42.startWrite();
						UserManagerService.writeUserLP(v7, v51);
						v42.finishWrite(v51);
						Binder.restoreCallingIdentity(v6);
						return 1;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int removeUserWhenPossible(int p1, boolean p2){
	boolean v10 = p0.removeUserUnchecked(p1);
	if (v10 == 0) {
		UserInfo.flags = (UserInfo.flags | 256);
		p0.writeUserLP(v7);
		Binder.restoreCallingIdentity(v6);
		return 1;
	}
}
