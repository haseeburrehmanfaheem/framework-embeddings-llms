The method preCreateUserWithThrow has the following code snippet:

This is path 1 for the API with depth 2:
public UserInfo preCreateUserWithThrow(String p1){
	Object v1 = this.mUserTypes.get(p1);
	if (v1 == 0) {
		int v2 = (this.mBaseType | this.mDefaultUserInfoPropertyFlags);
		if (v1 != 0) {
			if ((this.mBaseType & 4096) == 0) {
				boolean v5 = ;
				if (v5 != 0) {
					String v6 = this.mName;
					boolean v7 = v6.equals("android.os.usertype.full.RESTRICTED");
					if (v7 != 0) {
						boolean v4 = ;
						StringBuilder v8 = new StringBuilder();
						StringBuilder v10 = v8.append("cannot pre-create user of type ");
						StringBuilder v11 = v8.append(p1);
						String v12 = v8.toString();
						Preconditions.checkArgument(v4, v12);
						int v22 = UserManagerService.scanNextAvailableIdLocked();
						if (v22 < 0) {
							int v21 = v22;
							StringBuilder v25 = new StringBuilder();
							StringBuilder v27 = v25.append("createUser-");
							StringBuilder v28 = v25.append();
							String v29 = v25.toString();
							TimingsTraceAndSlog.traceBegin(v29);
							long v34 = UserManagerService.logUserJourneyBegin(4, v21, p2, p3);
							long v33 = v34;
							Object v36 = this.mUserTypes.get(p2);
							if (v36 != 0) {
								String v37 = p2.intern();
								int v38 = v36.getDefaultUserInfoFlags();
								boolean v39 = UserManagerService.checkUserTypeConsistency((p3 | v38));
								if (v39 != 0) {
									if (((p3 | v38) & 2048) == 0) {
										boolean v40 = v36.isEnabled();
										if (v40 != 0) {
											StringBuilder v41 = new StringBuilder();
											StringBuilder v43 = v41.append("Cannot add a user of disabled type ");
											StringBuilder v44 = v41.append(v37);
											StringBuilder v45 = v41.append(".");
											String v46 = v41.toString();
											UserManagerService.throwCheckedUserOperationException(v46, 6);
											if (this.mForceEphemeralUsers == 0) {
												if (p5 != 0) {
													if (p4 >= 0) {
														boolean v48 = UserManagerService.isUserTypeEligibleForPreCreation(v36);
														if (v48 == 0) {
															UserInfo v49 = UserManagerService.convertPreCreatedUserIfPossible(v37, , p1, p7);
															if (v49 == 0) {
																UserInfo v35 = v49;
																if (v35 == 0) {
																	if ( == 0) {
																		FrameworkStatsLog.write(265, v33, v21, 3, );
																		v23.traceEnd();
																		UserInfo v20 = v35;
																		return v20;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public UserInfo preCreateUserWithThrow(String p1){
	Object v1 = this.mUserTypes.get(p1);
	if (v1 == 0) {
		int v2 = (this.mBaseType | this.mDefaultUserInfoPropertyFlags);
		if (v1 != 0) {
			if ((this.mBaseType & 4096) == 0) {
				boolean v5 = ;
				if (v5 != 0) {
					String v6 = this.mName;
					boolean v7 = v6.equals("android.os.usertype.full.RESTRICTED");
					if (v7 != 0) {
						boolean v4 = ;
						StringBuilder v8 = new StringBuilder();
						StringBuilder v10 = v8.append("cannot pre-create user of type ");
						StringBuilder v11 = v8.append(p1);
						String v12 = v8.toString();
						Preconditions.checkArgument(v4, v12);
						int v22 = UserManagerService.scanNextAvailableIdLocked();
						if (v22 < 0) {
							int v23 = this.mRemovingUserIds.size();
							if (v23 <= 0) {
								this.mRemovingUserIds.clear();
								Iterator v26 = this.mRecentlyRemovedIds.iterator();
								boolean v27 = v26.hasNext();
								if (v27 == 0) {
									Object v28 = v26.next();
									int v29 = v28.intValue();
									this.mRemovingUserIds.put(v29, 1);
									boolean v31 = v26.hasNext();
									if (v31 == 0) {
										int v32 = UserManagerService.scanNextAvailableIdLocked();
										UserManager.invalidateStaticUserProperties();
										if ( < 0) {
											int v21 = ;
											StringBuilder v36 = new StringBuilder();
											StringBuilder v38 = v36.append("createUser-");
											StringBuilder v39 = v36.append();
											String v40 = v36.toString();
											TimingsTraceAndSlog.traceBegin(v40);
											long v45 = UserManagerService.logUserJourneyBegin(4, v21, p2, p3);
											long v44 = v45;
											Object v47 = this.mUserTypes.get(p2);
											if (v47 != 0) {
												String v48 = p2.intern();
												int v49 = v47.getDefaultUserInfoFlags();
												boolean v50 = UserManagerService.checkUserTypeConsistency((p3 | v49));
												if (v50 != 0) {
													if (((p3 | v49) & 2048) == 0) {
														boolean v51 = v47.isEnabled();
														if (v51 != 0) {
															StringBuilder v52 = new StringBuilder();
															StringBuilder v54 = v52.append("Cannot add a user of disabled type ");
															StringBuilder v55 = v52.append(v48);
															StringBuilder v56 = v52.append(".");
															String v57 = v52.toString();
															UserManagerService.throwCheckedUserOperationException(v57, 6);
															if (this.mForceEphemeralUsers == 0) {
																if (p5 != 0) {
																	if (p4 >= 0) {
																		boolean v59 = UserManagerService.isUserTypeEligibleForPreCreation(v47);
																		if (v59 == 0) {
																			UserInfo v60 = UserManagerService.convertPreCreatedUserIfPossible(v48, , p1, p7);
																			if (v60 == 0) {
																				UserInfo v46 = v60;
																				if (v46 == 0) {
																					if ( == 0) {
																						FrameworkStatsLog.write(265, v44, v21, 3, );
																						v34.traceEnd();
																						UserInfo v20 = v46;
																						return v20;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v1 = this.mUserTypes.get(p1);\nint v2 = (this.mBaseType | this.mDefaultUserInfoPropertyFlags);\nStringBuilder v8 = v5.append(p1);\nPreconditions.checkArgument(v4, v9);\nUserInfo v49 = UserManagerService.convertPreCreatedUserIfPossible(v37, , p1, p7);\nreturn v20;', 'Object v1 = this.mUserTypes.get(p1);\nint v2 = (this.mBaseType | this.mDefaultUserInfoPropertyFlags);\nStringBuilder v8 = v5.append(p1);\nPreconditions.checkArgument(v4, v9);\nUserInfo v28 = UserManagerService.createUserInternalUncheckedNoTracing(0, p1, , -10000, 1, 0, v19, 0);\nreturn v17;', 'Object v1 = this.mUserTypes.get(p1);\nint v2 = v1.getDefaultUserInfoFlags();\nStringBuilder v8 = v5.append(p1);\nPreconditions.checkArgument(v4, v9);\nUserInfo v17 = p0.createUserInternalUnchecked(0, p1, , -10000, 1, 0, 0);\nreturn v17;']

The method preCreateUserWithThrow has the following similar APIs:

- API Name: canAddMoreUsersOfType(Ljava/lang/String;)Z with Similarity Score: 0.8047901391983032
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = this.mUserTypes.get(p1);
if (v2 == 0) {
boolean v4 = this.mEnabled;
int v5 = this.mMaxAllowed;
String v6 = this.mName;
int v8 = this.mUsers.size();

- API Name: canAddMoreUsersOfType(Ljava/lang/String;)Z with Similarity Score: 0.8036544322967529
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = this.mUserTypes.get(p1);
if (v2 == 0) {
boolean v4 = v2.isEnabled();
int v5 = v2.getMaxAllowed();
String v6 = v2.getName();
int v7 = UserManagerService.getNumberOfUsersOfType(v6);

