The method setApplicationRestrictions has the following code snippet:

This is path 1 for the API with depth 2:
public void setApplicationRestrictions(String p1, Bundle p2, int p3){
	if (p2 == 0) {
		p2.setDefusable(1);
		if (p2 == 0) {
			boolean v5 = p2.isEmpty();
			if (v5 == 0) {
				AtomicFile v7 = new AtomicFile(v8);
				File v8 = new File(v9,v10);
				File v9 = Environment.getUserSystemDirectory(p3);
				StringBuilder v11 = new StringBuilder();
				StringBuilder v13 = v11.append("res_");
				StringBuilder v14 = v11.append(p1);
				StringBuilder v15 = v11.append(".xml");
				String v16 = v11.toString();
				String v10 = v16;
				FileOutputStream v20 = v7.startWrite();
				TypedXmlSerializer v21 = Xml.resolveSerializer(v20);
				v21.startDocument(0, Boolean.TRUE);
				v21.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", 1);
				XmlSerializer v24 = v21.startTag(0, "restrictions");
				UserManagerService.writeBundle(p2, v21);
				XmlSerializer v26 = v21.endTag(0, "restrictions");
				v21.endDocument();
				v7.finishWrite(v20);
				if ( != 0) {
					Intent v29 = new Intent("android.intent.action.APPLICATION_RESTRICTIONS_CHANGED");
					Intent v31 = v29.setPackage(p1);
					Intent v32 = v29.addFlags(1073741824);
					UserHandle v33 = UserHandle.of(p3);
					this.mContext.sendBroadcastAsUser(v29, v33);
					return;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setApplicationRestrictions(String p1, Bundle p2, int p3){
	if (p2 == 0) {
		p2.setDefusable(1);
		if (p2 == 0) {
			boolean v5 = p2.isEmpty();
			if (v5 == 0) {
				AtomicFile v7 = new AtomicFile(v8);
				File v8 = new File(v9,v10);
				File v9 = Environment.getUserSystemDirectory(p3);
				StringBuilder v11 = new StringBuilder();
				StringBuilder v13 = v11.append("res_");
				StringBuilder v14 = v11.append(p1);
				StringBuilder v15 = v11.append(".xml");
				String v16 = v11.toString();
				String v10 = v16;
				FileOutputStream v20 = v7.startWrite();
				TypedXmlSerializer v21 = Xml.resolveSerializer(v20);
				v21.startDocument(0, Boolean.TRUE);
				v21.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", 1);
				XmlSerializer v24 = v21.startTag(0, "restrictions");
				UserManagerService.writeBundle(p2, v21);
				XmlSerializer v26 = v21.endTag(0, "restrictions");
				v21.endDocument();
				v7.finishWrite(v20);
				if ( != 0) {
					return;
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setApplicationRestrictions(String p1, Bundle p2, int p3){
	if (p2 == 0) {
		p2.setDefusable(1);
		if (p2 == 0) {
			boolean v5 = p2.isEmpty();
			if (v5 == 0) {
				File v7 = Environment.getUserSystemDirectory(p3);
				File v8 = new File(v7,v9);
				StringBuilder v10 = new StringBuilder();
				StringBuilder v12 = v10.append("res_");
				StringBuilder v13 = v10.append(p1);
				StringBuilder v14 = v10.append(".xml");
				String v15 = v10.toString();
				String v9 = v15;
				boolean v17 = v8.exists();
				if (v17 == 0) {
					boolean v18 = v8.delete();
					boolean v6 = 1;
					if ( != 0) {
						Intent v19 = new Intent("android.intent.action.APPLICATION_RESTRICTIONS_CHANGED");
						Intent v21 = v19.setPackage(p1);
						Intent v22 = v19.addFlags(1073741824);
						UserHandle v23 = UserHandle.of(p3);
						this.mContext.sendBroadcastAsUser(v19, v23);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['p2.setDefusable(1);\nAtomicFile v7 = new AtomicFile(v8);\nFileOutputStream v20 = v7.startWrite();\nTypedXmlSerializer v21 = Xml.resolveSerializer(v20);\nv21.startDocument(0, Boolean.TRUE);\nUserManagerService.writeBundle(p2, v21);\nv21.endTag(0, "restrictions");\nv21.endDocument();\nv7.finishWrite(v20);', 'File v7 = Environment.getUserSystemDirectory(p3);\nFile v8 = new File(v7,v9);\nboolean v11 = v8.exists();\nboolean v12 = v8.delete();', 'UserManagerService.checkSystemOrRoot("set application restrictions");\nboolean v4 = UserManagerService.cleanAppRestrictionsForPackageLAr(p1, p3);', 'Intent v29 = new Intent("android.intent.action.APPLICATION_RESTRICTIONS_CHANGED");\nIntent v31 = v29.setPackage(p1);\nIntent v32 = v29.addFlags(1073741824);\nUserHandle v33 = UserHandle.of(p3);\nthis.mContext.sendBroadcastAsUser(v29, v33);']

The method setApplicationRestrictions has the following similar APIs:

- API Name: notifyResourceGranted(II)V with Similarity Score: 0.8565289974212646
  - Access Control Level: NONE and the following code:
Intent v20 = new Intent("android.intent.action.MEDIA_RESOURCE_GRANTED");
Intent v22 = v20.putExtra("android.intent.extra.PACKAGES", v12);
Intent v23 = v20.putExtra("android.intent.extra.MEDIA_RESOURCE_TYPE", p2);
Context v27 = this.this$0.getContext();
v27.sendBroadcastAsUser(v20, v26, "android.permission.RECEIVE_MEDIA_RESOURCE_USAGE");

- API Name: getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle; with Similarity Score: 0.8075275421142578
  - Access Control Level: SYS_OR_SIG and the following code:
UserManagerService.checkSystemOrRoot(v9);
Bundle v11 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
return v11;

