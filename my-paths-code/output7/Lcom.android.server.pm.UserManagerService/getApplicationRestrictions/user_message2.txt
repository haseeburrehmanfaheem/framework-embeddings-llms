The method getApplicationRestrictions has the following code snippet:

This is path 1 for the API with depth 2:
public Bundle getApplicationRestrictions(String p1){
	int v1 = UserHandle.getCallingUserId();
	if (v6 != 0) {
		StringBuilder v7 = new StringBuilder();
		StringBuilder v9 = v7.append("get application restrictions for other user/app ");
		StringBuilder v10 = v7.append(p1);
		String v11 = v7.toString();
		AtomicFile v16 = new AtomicFile(v17);
		File v17 = new File(v18,v19);
		File v18 = Environment.getUserSystemDirectory(p2);
		String v19 = UserManagerService.packageToRestrictionsFileName(p1);
		Bundle v22 = UserManagerService.readApplicationRestrictionsLAr(v16);
		Bundle v15 = v22;
		Bundle v2 = v15;
		return v2;
	}
}

and the following sink code:
['Bundle v13 = UserManagerService.readApplicationRestrictionsLAr(p1, v1);\nBundle v2 = v13;\nreturn v2;', 'AtomicFile v16 = new AtomicFile(v17);\nBundle v22 = UserManagerService.readApplicationRestrictionsLAr(v16);\nBundle v15 = v22;\nBundle v2 = v15;\nreturn v2;', 'Bundle v2 = p0.getApplicationRestrictionsForUser(p1, v1);\nreturn v2;']

The method getApplicationRestrictions has the following similar APIs:

- API Name: getApplicationRestrictionsForUser(Ljava/lang/String;I)Landroid/os/Bundle; with Similarity Score: 0.9313217997550964
  - Access Control Level: SYS_OR_SIG and the following code:
UserManagerService.checkSystemOrRoot(v9);
Bundle v11 = UserManagerService.readApplicationRestrictionsLAr(p1, p2);
return v11;

- API Name: getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle; with Similarity Score: 0.8835596442222595
  - Access Control Level: NONE and the following code:
Bundle v1 = this.mUm.getApplicationRestrictions(p1);
return v1;

