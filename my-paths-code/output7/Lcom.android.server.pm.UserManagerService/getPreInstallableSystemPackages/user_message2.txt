The method getPreInstallableSystemPackages has the following code snippet:

This is path 1 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Object v18 = this.mWhitelistedPackagesForUserTypes.keyAt();
												Object v19 = this.mWhitelistedPackagesForUserTypes.valueAt();
												long v20 = v19.longValue();
												if (((v20 & v13) < 0) == 0) {
													boolean v21 = v14.add(v18);
													int v22 = this.mWhitelistedPackagesForUserTypes.size();
													if ( >= v22) {
														Set v12 = v14;
														ArraySet v23 = new ArraySet();
														Object v26 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
														Object v25 = v26;
														UserSystemPackageInstaller$$ExternalSyntheticLambda0 v27 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v23);
														v25.forEachPackage(v27);
														Set v2 = v23;
														if (v2 != 0) {
															int v30 = v2.size();
															String v31 = new String(v30);
															Object v32 = v2.toArray(v31);
															return v32;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Object v18 = this.mWhitelistedPackagesForUserTypes.keyAt();
												Object v19 = this.mWhitelistedPackagesForUserTypes.valueAt();
												long v20 = v19.longValue();
												if (((v20 & v13) < 0) == 0) {
													boolean v21 = v14.add(v18);
													int v22 = this.mWhitelistedPackagesForUserTypes.size();
													if ( >= v22) {
														Set v12 = v14;
														ArraySet v23 = new ArraySet();
														Object v26 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
														Object v25 = v26;
														UserSystemPackageInstaller$$ExternalSyntheticLambda0 v27 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v23);
														v25.forEachPackage(v27);
														Set v2 = v23;
														if (v2 != 0) {
															int v30 = v2.size();
															String v31 = new String(v30);
															Object v32 = v2.toArray(v31);
															return v32;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Object v18 = this.mWhitelistedPackagesForUserTypes.keyAt();
												Object v19 = this.mWhitelistedPackagesForUserTypes.valueAt();
												long v20 = v19.longValue();
												if (((v20 & v13) < 0) == 0) {
													boolean v21 = v14.add(v18);
													int v22 = this.mWhitelistedPackagesForUserTypes.size();
													if ( >= v22) {
														Set v12 = v14;
														ArraySet v23 = new ArraySet();
														Object v26 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
														Object v25 = v26;
														UserSystemPackageInstaller$$ExternalSyntheticLambda0 v27 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v23);
														v25.forEachPackage(v27);
														Set v2 = v23;
														if (v2 != 0) {
															return 0;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);\nint v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();\nObject v10 = this.mUserTypes.get(p1);\nlong v13 = UserSystemPackageInstaller.getUserTypeMask(p1);\nArraySet v14 = new ArraySet(v15);\nUserSystemPackageInstaller$$ExternalSyntheticLambda0 v27 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v23);\nreturn v32;', 'int v3 = UserSystemPackageInstaller.getWhitelistMode();\nboolean v4 = UserSystemPackageInstaller.isEnforceMode(v3);\nboolean v7 = this.mUm.isUserTypeSubtypeOfSystem(p1);\nSet v8 = UserSystemPackageInstaller.getWhitelistedPackagesForUserType(p1);\nUserSystemPackageInstaller$$ExternalSyntheticLambda0 v12 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v8,,v9);\nreturn v17;', 'Set v2 = this.mSystemPackageInstaller.getInstallablePackagesForUserType(p1);\nreturn v5;']

The method getPreInstallableSystemPackages has the following similar APIs:

- API Name: canAddMoreProfilesToUser(Ljava/lang/String;IZ)Z with Similarity Score: 0.7697922587394714
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mUserTypes.get(p1);
if (v3 == 0) {
boolean v4 = this.mEnabled;
if (v4 != 0) {
boolean v6 = UserManager.isUserTypeManagedProfile(this.mName);
boolean v5 = v6;
PackageManager v7 = this.mContext.getPackageManager();
boolean v8 = v7.hasSystemFeature("android.software.managed_users");
Object v10 = this.mUsers.get(p2);
if (v10 == 0) {
IntArray v31 = UserManagerService.getProfileIdsLU(p2, p1, 0);
int[] v22 = v31.toArray();

- API Name: canAddMoreProfilesToUser(Ljava/lang/String;IZ)Z with Similarity Score: 0.7603960037231445
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mUserTypes.get(p1);
if (v3 == 0) {
boolean v4 = v3.isEnabled();
if (v4 != 0) {
boolean v5 = v3.isManagedProfile();
PackageManager v6 = this.mContext.getPackageManager();
boolean v7 = v6.hasSystemFeature("android.software.managed_users");
UserInfo v8 = UserManagerService.getUserInfoLU(p2);
[I v10 = UserManagerService.getProfileIds(p2, p1, 0);

