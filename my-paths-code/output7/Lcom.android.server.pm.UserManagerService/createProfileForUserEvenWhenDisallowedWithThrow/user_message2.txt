The method createProfileForUserEvenWhenDisallowedWithThrow has the following code snippet:

This is path 1 for the API with depth 2:
public UserInfo createProfileForUserEvenWhenDisallowedWithThrow(String p1, String p2, int p3, int p4, String p5){
	int v4 = UserManagerService.scanNextAvailableIdLocked();
	if (v4 < 0) {
		int v3 = v4;
		StringBuilder v7 = new StringBuilder();
		StringBuilder v9 = v7.append("createUser-");
		StringBuilder v10 = v7.append(p3);
		String v11 = v7.toString();
		TimingsTraceAndSlog.traceBegin(v11);
		long v16 = UserManagerService.logUserJourneyBegin(4, v3, p2, p3);
		long v15 = v16;
		Object v18 = this.mUserTypes.get(p2);
		if (v18 != 0) {
			String v19 = p2.intern();
			int v20 = v18.getDefaultUserInfoFlags();
			boolean v21 = UserManagerService.checkUserTypeConsistency((p3 | v20));
			if (v21 != 0) {
				if (((p3 | v20) & 2048) == 0) {
					boolean v22 = v18.isEnabled();
					if (v22 != 0) {
						StringBuilder v23 = new StringBuilder();
						StringBuilder v25 = v23.append("Cannot add a user of disabled type ");
						StringBuilder v26 = v23.append(v19);
						StringBuilder v27 = v23.append(".");
						String v28 = v23.toString();
						UserManagerService.throwCheckedUserOperationException(v28, 6);
						if (this.mForceEphemeralUsers == 0) {
							if (p5 != 0) {
								if (p4 >= 0) {
									boolean v30 = UserManagerService.isUserTypeEligibleForPreCreation(v18);
									if (v30 == 0) {
										UserInfo v31 = UserManagerService.convertPreCreatedUserIfPossible(v19, , p1, p7);
										if (v31 == 0) {
											UserInfo v17 = v31;
											if (v17 == 0) {
												if ( == 0) {
													FrameworkStatsLog.write(265, v15, v3, 3, );
													v5.traceEnd();
													UserInfo v2 = v17;
													return v2;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public UserInfo createProfileForUserEvenWhenDisallowedWithThrow(String p1, String p2, int p3, int p4, String p5){
	int v4 = UserManagerService.scanNextAvailableIdLocked();
	if (v4 < 0) {
		int v5 = this.mRemovingUserIds.size();
		if (v5 <= 0) {
			this.mRemovingUserIds.clear();
			Iterator v8 = this.mRecentlyRemovedIds.iterator();
			boolean v9 = v8.hasNext();
			if (v9 == 0) {
				Object v10 = v8.next();
				int v11 = v10.intValue();
				this.mRemovingUserIds.put(v11, 1);
				boolean v13 = v8.hasNext();
				if (v13 == 0) {
					int v14 = UserManagerService.scanNextAvailableIdLocked();
					UserManager.invalidateStaticUserProperties();
					if ( < 0) {
						int v3 = ;
						StringBuilder v18 = new StringBuilder();
						StringBuilder v20 = v18.append("createUser-");
						StringBuilder v21 = v18.append(p3);
						String v22 = v18.toString();
						TimingsTraceAndSlog.traceBegin(v22);
						long v27 = UserManagerService.logUserJourneyBegin(4, v3, p2, p3);
						long v26 = v27;
						Object v29 = this.mUserTypes.get(p2);
						if (v29 != 0) {
							String v30 = p2.intern();
							int v31 = v29.getDefaultUserInfoFlags();
							boolean v32 = UserManagerService.checkUserTypeConsistency((p3 | v31));
							if (v32 != 0) {
								if (((p3 | v31) & 2048) == 0) {
									boolean v33 = v29.isEnabled();
									if (v33 != 0) {
										StringBuilder v34 = new StringBuilder();
										StringBuilder v36 = v34.append("Cannot add a user of disabled type ");
										StringBuilder v37 = v34.append(v30);
										StringBuilder v38 = v34.append(".");
										String v39 = v34.toString();
										UserManagerService.throwCheckedUserOperationException(v39, 6);
										if (this.mForceEphemeralUsers == 0) {
											if (p5 != 0) {
												if (p4 >= 0) {
													boolean v41 = UserManagerService.isUserTypeEligibleForPreCreation(v29);
													if (v41 == 0) {
														UserInfo v42 = UserManagerService.convertPreCreatedUserIfPossible(v30, , p1, p7);
														if (v42 == 0) {
															UserInfo v28 = v42;
															if (v28 == 0) {
																if ( == 0) {
																	FrameworkStatsLog.write(265, v26, v3, 3, );
																	v16.traceEnd();
																	UserInfo v2 = v28;
																	return v2;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v12 = UserManagerService.logUserCreateJourneyBegin(v3, p2, p3);\nUserInfo v13 = UserManagerService.createUserInternalUncheckedNoTracing(p1, p2, p3, p4, 0, p5, v4, 0);\nreturn v2;', 'UserInfo v2 = p0.createUserInternalUnchecked(p1, p2, p3, p4, 0, p5, 0);\nreturn v2;']

The method createProfileForUserEvenWhenDisallowedWithThrow has the following similar APIs:

- API Name: createProfileForUserWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo; with Similarity Score: 0.973575234413147
  - Access Control Level: SYS_OR_SIG and the following code:
UserInfo v2 = p0.createUserInternal(p1, p2, p3, p4, p5);
return v2;

- API Name: createUserWithThrow(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/UserInfo; with Similarity Score: 0.9584135413169861
  - Access Control Level: SYS_OR_SIG and the following code:
UserInfo v2 = p0.createUserInternal(p1, p2, p3, -10000, 0);
return v2;

