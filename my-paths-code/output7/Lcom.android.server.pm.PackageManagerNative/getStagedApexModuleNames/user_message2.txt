The method getStagedApexModuleNames has the following code snippet:

This is path 1 for the API with depth 2:
public String getStagedApexModuleNames(){
	StagingManager v1 = this.mStagingManager;
	ArrayList v3 = new ArrayList();
	int v5 = this.mStagedSessions.size();
	if ( >= v5) {
		Object v6 = this.mStagedSessions.valueAt();
		boolean v7 = v6.isSessionReady();
		if (v7 == 0) {
			boolean v8 = v6.isDestroyed();
			if (v8 != 0) {
				boolean v9 = v6.hasParentSessionId();
				if (v9 != 0) {
					boolean v10 = v6.containsApexSession();
					if (v10 != 0) {
						if (v6 == 0) {
							Preconditions.checkArgument(, "Session is null");
							boolean v13 = v6.hasParentSessionId();
							StringBuilder v14 = new StringBuilder();
							int v16 = v6.sessionId();
							StringBuilder v17 = v14.append(v16);
							StringBuilder v18 = v14.append(" session has parent session");
							String v19 = v14.toString();
							Preconditions.checkArgument((1 ^ v13), v19);
							boolean v21 = v6.containsApexSession();
							StringBuilder v22 = new StringBuilder();
							int v24 = v6.sessionId();
							StringBuilder v25 = v22.append(v24);
							StringBuilder v26 = v22.append(" session does not contain apex");
							String v27 = v22.toString();
							Preconditions.checkArgument(v21, v27);
							boolean v29 = v6.isSessionReady();
							if (v29 == 0) {
								boolean v30 = v6.isDestroyed();
								if (v30 == 0) {
									ApexSessionParams v31 = new ApexSessionParams();
									int v33 = v6.sessionId();
									ApexSessionParams.sessionId = v33;
									IntArray v34 = new IntArray();
									boolean v36 = v6.isMultiPackage();
									if (v36 == 0) {
										[I v37 = v34.toArray();
										ApexSessionParams.childSessionIds = v37;
										ApexInfo v38 = this.mApexManager.getStagedApexInfos(v31);
										ArrayMap v39 = new ArrayMap();
										if ( >= v38.length) {
											Object v41 = v39.put(ApexInfo.moduleName, v38[]);
											if ( >= v38.length) {
												Map v11 = v39;
												Set v42 = v11.keySet();
												boolean v43 = v3.addAll(v42);
												int v44 = this.mStagedSessions.size();
												if ( >= v44) {
													List v2 = v3;
													String v45 = new String(0);
													Object v46 = v2.toArray(v45);
													return v46;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getStagedApexModuleNames(){
	StagingManager v1 = this.mStagingManager;
	ArrayList v3 = new ArrayList();
	int v5 = this.mStagedSessions.size();
	if ( >= v5) {
		Object v6 = this.mStagedSessions.valueAt();
		boolean v7 = v6.isSessionReady();
		if (v7 == 0) {
			boolean v8 = v6.isDestroyed();
			if (v8 != 0) {
				boolean v9 = v6.hasParentSessionId();
				if (v9 != 0) {
					boolean v10 = v6.containsApexSession();
					if (v10 != 0) {
						if (v6 == 0) {
							Preconditions.checkArgument(, "Session is null");
							boolean v13 = v6.hasParentSessionId();
							StringBuilder v14 = new StringBuilder();
							int v16 = v6.sessionId();
							StringBuilder v17 = v14.append(v16);
							StringBuilder v18 = v14.append(" session has parent session");
							String v19 = v14.toString();
							Preconditions.checkArgument((1 ^ v13), v19);
							boolean v21 = v6.containsApexSession();
							StringBuilder v22 = new StringBuilder();
							int v24 = v6.sessionId();
							StringBuilder v25 = v22.append(v24);
							StringBuilder v26 = v22.append(" session does not contain apex");
							String v27 = v22.toString();
							Preconditions.checkArgument(v21, v27);
							boolean v29 = v6.isSessionReady();
							if (v29 == 0) {
								boolean v30 = v6.isDestroyed();
								if (v30 == 0) {
									ApexSessionParams v31 = new ApexSessionParams();
									int v33 = v6.sessionId();
									ApexSessionParams.sessionId = v33;
									IntArray v34 = new IntArray();
									boolean v36 = v6.isMultiPackage();
									if (v36 == 0) {
										List v37 = v6.getChildSessions();
										Iterator v38 = v37.iterator();
										boolean v39 = v38.hasNext();
										if (v39 == 0) {
											[I v40 = v34.toArray();
											ApexSessionParams.childSessionIds = v40;
											ApexInfo v41 = this.mApexManager.getStagedApexInfos(v31);
											ArrayMap v42 = new ArrayMap();
											if ( >= v41.length) {
												Map v11 = v42;
												Set v44 = v11.keySet();
												boolean v45 = v3.addAll(v44);
												int v46 = this.mStagedSessions.size();
												if ( >= v46) {
													List v2 = v3;
													String v47 = new String(0);
													Object v48 = v2.toArray(v47);
													return v48;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getStagedApexModuleNames(){
	StagingManager v1 = this.mStagingManager;
	ArrayList v3 = new ArrayList();
	int v5 = this.mStagedSessions.size();
	if ( >= v5) {
		Object v6 = this.mStagedSessions.valueAt();
		boolean v7 = v6.isSessionReady();
		if (v7 == 0) {
			boolean v8 = v6.isDestroyed();
			if (v8 != 0) {
				boolean v9 = v6.hasParentSessionId();
				if (v9 != 0) {
					boolean v10 = v6.containsApexSession();
					if (v10 != 0) {
						if (v6 == 0) {
							Preconditions.checkArgument(, "Session is null");
							boolean v13 = v6.hasParentSessionId();
							StringBuilder v14 = new StringBuilder();
							int v16 = v6.sessionId();
							StringBuilder v17 = v14.append(v16);
							StringBuilder v18 = v14.append(" session has parent session");
							String v19 = v14.toString();
							Preconditions.checkArgument((1 ^ v13), v19);
							boolean v21 = v6.containsApexSession();
							StringBuilder v22 = new StringBuilder();
							int v24 = v6.sessionId();
							StringBuilder v25 = v22.append(v24);
							StringBuilder v26 = v22.append(" session does not contain apex");
							String v27 = v22.toString();
							Preconditions.checkArgument(v21, v27);
							boolean v29 = v6.isSessionReady();
							if (v29 == 0) {
								boolean v30 = v6.isDestroyed();
								if (v30 == 0) {
									Map v31 = Collections.emptyMap();
									Map v11 = v31;
									Set v32 = v11.keySet();
									boolean v33 = v3.addAll(v32);
									int v34 = this.mStagedSessions.size();
									if ( >= v34) {
										List v2 = v3;
										String v35 = new String(0);
										Object v36 = v2.toArray(v35);
										return v36;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ArrayList v3 = new ArrayList();\nObject v6 = this.mStagedSessions.valueAt();\nboolean v7 = v6.isSessionReady();\nboolean v8 = v6.isDestroyed();\nboolean v9 = v6.hasParentSessionId();\nboolean v10 = v6.containsApexSession();\nApexSessionParams v31 = new ApexSessionParams();\nint v33 = v6.sessionId();\nApexSessionParams.sessionId = v33;\nIntArray v34 = new IntArray();\nboolean v36 = v6.isMultiPackage();\nApexInfo v38 = this.mApexManager.getStagedApexInfos(v31);\nArrayMap v39 = new ArrayMap();\nObject v41 = v39.put(ApexInfo.moduleName, v38[]);\nSet v42 = v11.keySet();\nboolean v43 = v3.addAll(v42);\nList v2 = v3;\nString v45 = new String(0);\nObject v46 = v2.toArray(v45);\nreturn v46;', 'ArrayList v3 = new ArrayList();\nObject v6 = this.mStagedSessions.valueAt();\nboolean v7 = v6.isSessionReady();\nboolean v8 = v6.isDestroyed();\nboolean v9 = v6.hasParentSessionId();\nboolean v10 = v6.containsApexSession();\nMap v11 = StagingManager.getStagedApexInfos(v6);\nSet v12 = v11.keySet();\nboolean v13 = v3.addAll(v12);\nList v2 = v3;\nString v15 = new String(0);\nObject v16 = v2.toArray(v15);\nreturn v16;', 'StagingManager v1 = PackageManagerService.mInstallerService.getStagingManager();\nList v2 = v1.getStagedApexModuleNames();\nString v3 = new String(0);\nObject v4 = v2.toArray(v3);\nreturn v4;']

The method getStagedApexModuleNames has the following similar APIs:

- API Name: getStagedApexInfo(Ljava/lang/String;)Landroid/content/pm/StagedApexInfo; with Similarity Score: 0.9217004179954529
  - Access Control Level: NONE and the following code:
StagingManager v1 = PackageManagerService.mInstallerService.getStagingManager();
StagedApexInfo v2 = v1.getStagedApexInfo(p1);
return v2;

- API Name: registerStagedApexObserver(Landroid/content/pm/IStagedApexObserver;)V with Similarity Score: 0.8345340490341187
  - Access Control Level: NONE and the following code:
StagingManager v1 = PackageManagerService.mInstallerService.getStagingManager();
v1.registerStagedApexObserver(p1);

