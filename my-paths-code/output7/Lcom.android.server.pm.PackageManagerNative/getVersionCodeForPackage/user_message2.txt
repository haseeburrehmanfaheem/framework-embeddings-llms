The method getVersionCodeForPackage has the following code snippet:

This is path 1 for the API with depth 2:
public long getVersionCodeForPackage(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v16 = new ComputerEngine(v14,v11);
							long v18 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v18, );
								Computer v12 = v16;
								this.sSnapshot.set(v12);
								Computer v21 = v12.use();
								Computer v3 = v21;
								PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);
								if (v22 == 0) {
									long v23 = v22.getLongVersionCode();
									return 0;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public long getVersionCodeForPackage(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							int v14 = v8.getUsed();
							PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v17 = new ComputerEngine(v15,v11);
							long v19 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v19, );
								Computer v12 = v17;
								this.sSnapshot.set(v12);
								Computer v22 = v12.use();
								Computer v3 = v22;
								PackageInfo v23 = v3.getPackageInfo(p1, 0, v2);
								if (v23 == 0) {
									long v24 = v23.getLongVersionCode();
									return 0;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nint v2 = UserHandle.getUserId(v1);\nObject v5 = this.sSnapshot.get();\nint v6 = this.sSnapshotPendingVersion.get();\nPackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);\nComputerEngine v16 = new ComputerEngine(v14,v11);\nPackageInfo v22 = v3.getPackageInfo(p1, 0, v2);\nreturn v22.getLongVersionCode();', 'int v1 = Binder.getCallingUid();\nint v2 = UserHandle.getUserId(v1);\nComputer v12 = PackageManagerService.rebuildSnapshot(v8, v11);\nthis.sSnapshot.set(v12);\nPackageInfo v15 = v3.getPackageInfo(p1, 0, v2);\nreturn v15.getLongVersionCode();', 'int v1 = Binder.getCallingUid();\nint v2 = UserHandle.getUserId(v1);\nComputer v3 = this.mPm.snapshotComputer();\nPackageInfo v4 = v3.getPackageInfo(p1, 0, v2);\nreturn v4.getLongVersionCode();']

The method getVersionCodeForPackage has the following similar APIs:

- API Name: isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z with Similarity Score: 0.8559301495552063
  - Access Control Level: NONE and the following code:
int v1 = Binder.getCallingUid();
int v2 = UserHandle.getUserId(v1);
Computer v3 = this.mPm.snapshotComputer();
[Z v4 = new [Z(p1.length);
ApplicationInfo v5 = v3.getApplicationInfo(p1[], 0, v2);
boolean v6 = v5.isAudioPlaybackCaptureAllowed();

- API Name: isAutoRevokeExempted(Ljava/lang/String;I)Z with Similarity Score: 0.8247218728065491
  - Access Control Level: SYS_OR_SIG and the following code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v3 = Binder.getCallingUid();
boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2);
boolean v7 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3);
int v8 = v2.getUid();
int v9 = UserHandle.getUid(p2, v8);

