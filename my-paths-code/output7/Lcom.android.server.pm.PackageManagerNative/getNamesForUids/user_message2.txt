The method getNamesForUids has the following code snippet:

This is path 1 for the API with depth 2:
public String getNamesForUids([I p1){
	if (p1 == 0) {
		if (p1.length != 0) {
			boolean v2 = Thread.holdsLock(this.mLock);
			if (v2 == 0) {
				Object v3 = this.sSnapshot.get();
				int v4 = this.sSnapshotPendingVersion.get();
				if (v3 == 0) {
					int v5 = v3.getVersion();
					if (v5 != v4) {
						Object v6 = this.sSnapshot.get();
						int v7 = this.sSnapshotPendingVersion.get();
						if (v6 == 0) {
							int v8 = v6.getVersion();
							if (v8 != v7) {
								int v9 = this.sSnapshotPendingVersion.get();
								long v11 = SystemClock.currentTimeMicro();
								if (v6 != 0) {
									PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
									ComputerEngine v14 = new ComputerEngine(v12,v9);
									long v16 = SystemClock.currentTimeMicro();
									if (this.mSnapshotStatistics == 0) {
										this.mSnapshotStatistics.rebuild(v11, v16, );
										Computer v10 = v14;
										this.sSnapshot.set(v10);
										Computer v19 = v10.use();
										Computer v1 = v19;
										String v20 = v1.getNamesForUids(p1);
										if (v20 == 0) {
											String v21 = new String(p1.length);
											if ( < 0) {
												if ([] != 0) {
													if ( < 0) {
														return ;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getNamesForUids([I p1){
	if (p1 == 0) {
		if (p1.length != 0) {
			boolean v2 = Thread.holdsLock(this.mLock);
			if (v2 == 0) {
				Object v3 = this.sSnapshot.get();
				int v4 = this.sSnapshotPendingVersion.get();
				if (v3 == 0) {
					int v5 = v3.getVersion();
					if (v5 != v4) {
						Object v6 = this.sSnapshot.get();
						int v7 = this.sSnapshotPendingVersion.get();
						if (v6 == 0) {
							int v8 = v6.getVersion();
							if (v8 != v7) {
								int v9 = this.sSnapshotPendingVersion.get();
								long v11 = SystemClock.currentTimeMicro();
								if (v6 != 0) {
									int v12 = v6.getUsed();
									PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);
									ComputerEngine v15 = new ComputerEngine(v13,v9);
									long v17 = SystemClock.currentTimeMicro();
									if (this.mSnapshotStatistics == 0) {
										this.mSnapshotStatistics.rebuild(v11, v17, );
										Computer v10 = v15;
										this.sSnapshot.set(v10);
										Computer v20 = v10.use();
										Computer v1 = v20;
										String v21 = v1.getNamesForUids(p1);
										if (v21 == 0) {
											String v22 = new String(p1.length);
											if ( < 0) {
												if ([] != 0) {
													if ( < 0) {
														return ;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getNamesForUids([I p1){
	if (p1 == 0) {
		if (p1.length != 0) {
			boolean v2 = Thread.holdsLock(this.mLock);
			if (v2 == 0) {
				Object v3 = this.sSnapshot.get();
				int v4 = this.sSnapshotPendingVersion.get();
				if (v3 == 0) {
					int v5 = v3.getVersion();
					if (v5 != v4) {
						Object v6 = this.sSnapshot.get();
						int v7 = this.sSnapshotPendingVersion.get();
						if (v6 == 0) {
							int v8 = v6.getVersion();
							if (v8 != v7) {
								int v9 = this.sSnapshotPendingVersion.get();
								long v11 = SystemClock.currentTimeMicro();
								if (v6 != 0) {
									PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
									ComputerEngine v14 = new ComputerEngine(v12,v9);
									long v16 = SystemClock.currentTimeMicro();
									if (this.mSnapshotStatistics == 0) {
										this.mSnapshotStatistics.rebuild(v11, v16, );
										Computer v10 = v14;
										this.sSnapshot.set(v10);
										Computer v19 = v10.use();
										Computer v1 = v19;
										String v20 = v1.getNamesForUids(p1);
										if (v20 == 0) {
											if ( < 0) {
												if ([] != 0) {
													if ( < 0) {
														return ;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);\nthis.sSnapshot.set(v10);\nComputer v12 = v10.use();\nString v13 = v1.getNamesForUids(p1);', 'PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);\nComputerEngine v14 = new ComputerEngine(v12,v9);\nlong v16 = SystemClock.currentTimeMicro();\nComputer v10 = v14;\nthis.sSnapshot.set(v10);\nComputer v19 = v10.use();\nString v20 = v1.getNamesForUids(p1);', 'Computer v1 = this.mPm.snapshotComputer();\nString v2 = v1.getNamesForUids(p1);']

The method getNamesForUids has the following similar APIs:

- API Name: hasSha256SigningCertificate(Ljava/lang/String;[B)Z with Similarity Score: 0.915388286113739
  - Access Control Level: NONE and the following code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, );
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
Computer v1 = v19;
boolean v20 = v1.hasSigningCertificate(p1, p2, 1);
return v20;

- API Name: getLocationFlags(Ljava/lang/String;)I with Similarity Score: 0.8928683996200562
  - Access Control Level: NONE and the following code:
PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v16 = new ComputerEngine(v14,v11);
long v18 = SystemClock.currentTimeMicro();
if (v8 != 0) {
    this.mSnapshotStatistics.rebuild(v13, v18, );
    Computer v12 = v16;
    this.sSnapshot.set(v12);
    Computer v21 = v12.use();
    ApplicationInfo v22 = v3.getApplicationInfo(p1, 0, v2);
    return ((v23 | ) | );

