The method getStagedApexInfo has the following code snippet:

This is path 1 for the API with depth 2:
public StagedApexInfo getStagedApexInfo(String p1){
	StagingManager v1 = this.mStagingManager;
	int v3 = this.mStagedSessions.size();
	if ( >= v3) {
		Object v4 = this.mStagedSessions.valueAt();
		boolean v5 = v4.isSessionReady();
		if (v5 == 0) {
			boolean v6 = v4.isDestroyed();
			if (v6 != 0) {
				boolean v7 = v4.hasParentSessionId();
				if (v7 != 0) {
					int v8 = this.mStagedSessions.size();
					if ( >= v8) {
						Object v9 = this.mStagedSessions.valueAt();
						boolean v10 = v9.isSessionReady();
						if (v10 == 0) {
							boolean v11 = v9.isDestroyed();
							if (v11 != 0) {
								boolean v12 = v9.hasParentSessionId();
								if (v12 != 0) {
									boolean v13 = v9.containsApexSession();
									if (v13 != 0) {
										if (v9 == 0) {
											Preconditions.checkArgument(, "Session is null");
											boolean v16 = v9.hasParentSessionId();
											StringBuilder v17 = new StringBuilder();
											int v19 = v9.sessionId();
											StringBuilder v20 = v17.append(v19);
											StringBuilder v21 = v17.append(" session has parent session");
											String v22 = v17.toString();
											Preconditions.checkArgument((1 ^ v16), v22);
											boolean v24 = v9.containsApexSession();
											StringBuilder v25 = new StringBuilder();
											int v27 = v9.sessionId();
											StringBuilder v28 = v25.append(v27);
											StringBuilder v29 = v25.append(" session does not contain apex");
											String v30 = v25.toString();
											Preconditions.checkArgument(v24, v30);
											boolean v32 = v9.isSessionReady();
											if (v32 == 0) {
												boolean v33 = v9.isDestroyed();
												if (v33 == 0) {
													ApexSessionParams v34 = new ApexSessionParams();
													int v36 = v9.sessionId();
													ApexSessionParams.sessionId = v36;
													IntArray v37 = new IntArray();
													boolean v39 = v9.isMultiPackage();
													if (v39 == 0) {
														[I v40 = v37.toArray();
														ApexSessionParams.childSessionIds = v40;
														ApexInfo v41 = this.mApexManager.getStagedApexInfos(v34);
														ArrayMap v42 = new ArrayMap();
														if ( >= v41.length) {
															Object v44 = v42.put(ApexInfo.moduleName, v41[]);
															if ( >= v41.length) {
																Map v14 = v42;
																Object v45 = v14.get(p1);
																if (v45 == 0) {
																	StagedApexInfo v46 = new StagedApexInfo();
																	StagedApexInfo.moduleName = ApexInfo.moduleName;
																	StagedApexInfo.diskImagePath = ApexInfo.modulePath;
																	StagedApexInfo.versionCode = ApexInfo.versionCode;
																	StagedApexInfo.versionName = ApexInfo.versionName;
																	StagedApexInfo.hasClassPathJars = ApexInfo.hasClassPathJars;
																	StagedApexInfo v2 = v46;
																	return v2;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public StagedApexInfo getStagedApexInfo(String p1){
	StagingManager v1 = this.mStagingManager;
	int v3 = this.mStagedSessions.size();
	if ( >= v3) {
		Object v4 = this.mStagedSessions.valueAt();
		boolean v5 = v4.isSessionReady();
		if (v5 == 0) {
			boolean v6 = v4.isDestroyed();
			if (v6 != 0) {
				boolean v7 = v4.hasParentSessionId();
				if (v7 != 0) {
					int v8 = this.mStagedSessions.size();
					if ( >= v8) {
						Object v9 = this.mStagedSessions.valueAt();
						boolean v10 = v9.isSessionReady();
						if (v10 == 0) {
							boolean v11 = v9.isDestroyed();
							if (v11 != 0) {
								boolean v12 = v9.hasParentSessionId();
								if (v12 != 0) {
									boolean v13 = v9.containsApexSession();
									if (v13 != 0) {
										if (v9 == 0) {
											Preconditions.checkArgument(, "Session is null");
											boolean v16 = v9.hasParentSessionId();
											StringBuilder v17 = new StringBuilder();
											int v19 = v9.sessionId();
											StringBuilder v20 = v17.append(v19);
											StringBuilder v21 = v17.append(" session has parent session");
											String v22 = v17.toString();
											Preconditions.checkArgument((1 ^ v16), v22);
											boolean v24 = v9.containsApexSession();
											StringBuilder v25 = new StringBuilder();
											int v27 = v9.sessionId();
											StringBuilder v28 = v25.append(v27);
											StringBuilder v29 = v25.append(" session does not contain apex");
											String v30 = v25.toString();
											Preconditions.checkArgument(v24, v30);
											boolean v32 = v9.isSessionReady();
											if (v32 == 0) {
												boolean v33 = v9.isDestroyed();
												if (v33 == 0) {
													ApexSessionParams v34 = new ApexSessionParams();
													int v36 = v9.sessionId();
													ApexSessionParams.sessionId = v36;
													IntArray v37 = new IntArray();
													boolean v39 = v9.isMultiPackage();
													if (v39 == 0) {
														List v40 = v9.getChildSessions();
														Iterator v41 = v40.iterator();
														boolean v42 = v41.hasNext();
														if (v42 == 0) {
															[I v43 = v37.toArray();
															ApexSessionParams.childSessionIds = v43;
															ApexInfo v44 = this.mApexManager.getStagedApexInfos(v34);
															ArrayMap v45 = new ArrayMap();
															if ( >= v44.length) {
																Map v14 = v45;
																Object v47 = v14.get(p1);
																if (v47 == 0) {
																	StagedApexInfo v48 = new StagedApexInfo();
																	StagedApexInfo.moduleName = ApexInfo.moduleName;
																	StagedApexInfo.diskImagePath = ApexInfo.modulePath;
																	StagedApexInfo.versionCode = ApexInfo.versionCode;
																	StagedApexInfo.versionName = ApexInfo.versionName;
																	StagedApexInfo.hasClassPathJars = ApexInfo.hasClassPathJars;
																	StagedApexInfo v2 = v48;
																	return v2;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ApexSessionParams v34 = new ApexSessionParams();\nint v36 = v9.sessionId();\nApexSessionParams.sessionId = v36;\nIntArray v37 = new IntArray();\nApexInfo v41 = this.mApexManager.getStagedApexInfos(v34);\nMap v14 = v42;\nObject v45 = v14.get(p1);\nif (v45 == 0) {\nStagedApexInfo v46 = new StagedApexInfo();\nStagedApexInfo.moduleName = ApexInfo.moduleName;\nreturn v2;', 'Map v14 = StagingManager.getStagedApexInfos(v9);\nObject v15 = v14.get(p1);\nif (v15 == 0) {\nStagedApexInfo v16 = new StagedApexInfo();\nreturn v2;', 'StagingManager v1 = PackageManagerService.mInstallerService.getStagingManager();\nStagedApexInfo v2 = v1.getStagedApexInfo(p1);\nreturn v2;']

The method getStagedApexInfo has the following similar APIs:

- API Name: getStagedApexModuleNames()[Ljava/lang/String; with Similarity Score: 0.9217004179954529
  - Access Control Level: NONE and the following code:
StagingManager v1 = PackageManagerService.mInstallerService.getStagingManager();
List v2 = v1.getStagedApexModuleNames();
String v3 = new String(0);
Object v4 = v2.toArray(v3);
return v4;

- API Name: unregisterStagedApexObserver(Landroid/content/pm/IStagedApexObserver;)V with Similarity Score: 0.8988259434700012
  - Access Control Level: NONE and the following code:
StagingManager v1 = PackageManagerService.mInstallerService.getStagingManager();
v1.unregisterStagedApexObserver(p1);

