The method getLocationFlags has the following code snippet:

This is path 1 for the API with depth 2:
public int getLocationFlags(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v16 = new ComputerEngine(v14,v11);
							long v18 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v18, );
								Computer v12 = v16;
								this.sSnapshot.set(v12);
								Computer v21 = v12.use();
								Computer v3 = v21;
								ApplicationInfo v22 = v3.getApplicationInfo(p1, 0, v2);
								if (v22 == 0) {
									boolean v23 = v22.isSystemApp();
									boolean v24 = v22.isVendor();
									if (v24 == 0) {
										boolean v25 = v22.isProduct();
										if (v25 == 0) {
											return ((v23 | ) | );
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int getLocationFlags(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							int v14 = v8.getUsed();
							PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v17 = new ComputerEngine(v15,v11);
							long v19 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v19, );
								Computer v12 = v17;
								this.sSnapshot.set(v12);
								Computer v22 = v12.use();
								Computer v3 = v22;
								ApplicationInfo v23 = v3.getApplicationInfo(p1, 0, v2);
								if (v23 == 0) {
									boolean v24 = v23.isSystemApp();
									boolean v25 = v23.isVendor();
									if (v25 == 0) {
										boolean v26 = v23.isProduct();
										if (v26 == 0) {
											return ((v24 | ) | );
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Computer v3 = this.mPm.snapshotComputer();\nApplicationInfo v4 = v3.getApplicationInfo(p1, 0, v2);\nreturn ((v5 | ) | );', 'Object v5 = this.sSnapshot.get();\nint v6 = this.sSnapshotPendingVersion.get();\nif (v5 == 0) {\n    int v7 = v5.getVersion();\n    if (v7 != v6) {\n        Object v8 = this.sSnapshot.get();\n        int v9 = this.sSnapshotPendingVersion.get();\n        if (v8 == 0) {\n            int v10 = v8.getVersion();\n            if (v10 != v9) {\n                Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);\n                this.sSnapshot.set(v12);\n                Computer v14 = v12.use();\n                ApplicationInfo v15 = v14.getApplicationInfo(p1, 0, v2);\n                return ((v16 | ) | );', 'PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);\nComputerEngine v16 = new ComputerEngine(v14,v11);\nlong v18 = SystemClock.currentTimeMicro();\nif (v8 != 0) {\n    this.mSnapshotStatistics.rebuild(v13, v18, );\n    Computer v12 = v16;\n    this.sSnapshot.set(v12);\n    Computer v21 = v12.use();\n    ApplicationInfo v22 = v3.getApplicationInfo(p1, 0, v2);\n    return ((v23 | ) | );']

The method getLocationFlags has the following similar APIs:

- API Name: hasSha256SigningCertificate(Ljava/lang/String;[B)Z with Similarity Score: 0.9138976335525513
  - Access Control Level: NONE and the following code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
this.mSnapshotStatistics.rebuild(v11, v16, );
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
Computer v1 = v19;
boolean v20 = v1.hasSigningCertificate(p1, p2, 1);
return v20;

- API Name: getNamesForUids([I)[Ljava/lang/String; with Similarity Score: 0.8928683996200562
  - Access Control Level: NONE and the following code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
long v16 = SystemClock.currentTimeMicro();
Computer v10 = v14;
this.sSnapshot.set(v10);
Computer v19 = v10.use();
String v20 = v1.getNamesForUids(p1);

