This is path 1 for the API with depth 2:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	if (v4 != 0) {
		Object v5 = MusicRecognitionManagerService.access$000(this.this$0);
		int v6 = UserHandle.getCallingUserId();
		AbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);
		if (v7 == 0) {
			ServiceNameResolver v9 = AbstractMasterSystemService.mServiceNameResolver;
			String v10 = v9.getDefaultServiceName(v6);
			if (v10 != 0) {
				ServiceNameResolver v11 = AbstractMasterSystemService.mServiceNameResolver;
				String v12 = v11.getServiceName(v6);
				boolean v13 = v10.equals(v12);
				boolean v8 = v13;
				if (v8 != 0) {
					int v15 = UserHandle.getCallingUserId();
					int v16 = Binder.getCallingUid();
					ServiceNameResolver v17 = AbstractMasterSystemService.mServiceNameResolver;
					String v18 = v17.getServiceName(v15);
					if (v18 != 0) {
						ComponentName v19 = ComponentName.unflattenFromString(v18);
						if (v19 != 0) {
							String v20 = v19.getPackageName();
							Context v21 = this.this$0.getContext();
							PackageManager v22 = v21.getPackageManager();
							int v23 = UserHandle.getCallingUserId();
							int v24 = v22.getPackageUidAsUser(v20, v23);
							String v25 = this.TAG;
							boolean v14 = 0;
							if (v14 == 0) {
								if (p2 != 0) {
									IInterface v35 = p2.queryLocalInterface("android.media.musicrecognition.IMusicRecognitionManagerCallback");
									if (v35 == 0) {
										if (v35 instanceof IMusicRecognitionManagerCallback == 0) {
											IMusicRecognitionManagerCallback$Stub$Proxy v36 = new IMusicRecognitionManagerCallback$Stub$Proxy(p2);
											IMusicRecognitionManagerCallback v34 = v36;
											if (this.mRemoteService != 0) {
												String v39 = MusicRecognitionManagerPerUserService.getComponentNameLocked();
												if (v39 != 0) {
													ComponentName v40 = ComponentName.unflattenFromString(v39);
													RemoteMusicRecognitionService v41 = new RemoteMusicRecognitionService(v42,v40,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v43,v45,AbstractMasterSystemService.verbose);
													Context v42 = MusicRecognitionManagerPerUserService.getContext();
													MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback v43 = new MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback(MusicRecognitionManagerPerUserService,v34,0);
													boolean v45 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
													this.mRemoteService = v41;
													Context v47 = MusicRecognitionManagerPerUserService.getContext();
													PackageManager v48 = v47.getPackageManager();
													ComponentName v49 = this.mRemoteService.getComponentName();
													ServiceInfo v50 = v48.getServiceInfo(v49, 128);
													this.mServiceInfo = v50;
													CompletableFuture v51 = this.mRemoteService.getAttributionTag();
													this.mAttributionTagFuture = v51;
													ComponentName v55 = this.mRemoteService.getComponentName();
													RemoteMusicRecognitionService v38 = this.mRemoteService;
													this.mRemoteService = v38;
													if (v38 != 0) {
														ParcelFileDescriptor v60 = ParcelFileDescriptor.createPipe();
														if (v60.length == 2) {
															FileDescriptor v61 = v60[0].getFileDescriptor();
															boolean v62 = v61.valid();
															if (v62 == 0) {
																FileDescriptor v63 = v60[1].getFileDescriptor();
																boolean v64 = v63.valid();
																if (v64 != 0) {
																	Pair v65 = Pair.create(v60[0], v60[1]);
																	Pair v59 = v65;
																	if (v59 != 0) {
																		MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v66 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v34,Pair.second);
																		CompletableFuture v68 = this.mAttributionTagFuture.thenAcceptAsync(v66, MusicRecognitionManagerService.mExecutorService);
																		AudioFormat v69 = this.mAudioFormat;
																		RemoteMusicRecognitionService$$ExternalSyntheticLambda0 v71 = new RemoteMusicRecognitionService$$ExternalSyntheticLambda0(RemoteMusicRecognitionService,Pair.first,v69);
																		RemoteMusicRecognitionService.scheduleAsyncRequest(v71);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	this.this$0.enforceCaller("beginRecognition");
	Object v3 = AbstractMasterSystemService.mLock;
	int v4 = UserHandle.getCallingUserId();
	AbstractPerUserSystemService v6 = this.this$0.getServiceForUserLocked(v4);
	AbstractPerUserSystemService v5 = v6;
	if (v5 == 0) {
		ServiceNameResolver v8 = MusicRecognitionManagerService.access$200(this.this$0);
		String v9 = v8.getDefaultServiceName(v4);
		if (v9 != 0) {
			ServiceNameResolver v10 = MusicRecognitionManagerService.access$300(this.this$0);
			String v11 = v10.getServiceName(v4);
			boolean v12 = v9.equals(v11);
			boolean v7 = v12;
			if (v7 != 0) {
				int v14 = UserHandle.getCallingUserId();
				int v15 = Binder.getCallingUid();
				ServiceNameResolver v16 = MusicRecognitionManagerService.access$400(this.this$0);
				String v17 = v16.getServiceName(v14);
				if (v17 != 0) {
					ComponentName v18 = ComponentName.unflattenFromString(v17);
					if (v18 != 0) {
						String v19 = v18.getPackageName();
						Context v20 = this.this$0.getContext();
						PackageManager v21 = v20.getPackageManager();
						int v22 = UserHandle.getCallingUserId();
						int v23 = v21.getPackageUidAsUser(v19, v22);
						boolean v13 = 0;
						if (v13 == 0) {
							IMusicRecognitionManagerCallback v33 = IMusicRecognitionManagerCallback$Stub.asInterface(p2);
							RemoteMusicRecognitionService v34 = MusicRecognitionManagerPerUserService.ensureRemoteServiceLocked(v33);
							this.mRemoteService = v34;
							if (v34 != 0) {
								Pair v35 = MusicRecognitionManagerPerUserService.createPipe();
								if (v35 != 0) {
									MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v36 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v33,Pair.second);
									CompletableFuture v38 = this.mAttributionTagFuture.thenAcceptAsync(v36, MusicRecognitionManagerService.mExecutorService);
									AudioFormat v39 = p1.getAudioFormat();
									this.mRemoteService.onAudioStreamStarted(Pair.first, v39);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	MusicRecognitionManagerService.-$$Nest$menforceCaller(this.this$0, "beginRecognition");
	Object v2 = MusicRecognitionManagerService.access$000(this.this$0);
	int v3 = UserHandle.getCallingUserId();
	AbstractPerUserSystemService v4 = MusicRecognitionManagerService.access$100(this.this$0, v3);
	if (v4 == 0) {
		boolean v5 = p0.isDefaultServiceLocked(v3);
		if (v5 != 0) {
			boolean v6 = p0.isCalledByServiceAppLocked("beginRecognition");
			if (v6 == 0) {
				v4.beginRecognitionLocked(p1, p2);
				return;
			}
		}
	}
}
