This is path 1 for the API with depth 2:
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	if (this.sInstance != 0) {
		boolean v5 = ActivityThread.isSystem();
		boolean v4 = v5;
		if (v4 == 0) {
			ImeTracingServerImpl v6 = new ImeTracingServerImpl();
			this.sInstance = ;
			ImeTracing v3 = this.sInstance;
			v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
			boolean v9 = p0.calledFromValidUserLocked();
			if (v9 != 0) {
				long v10 = Binder.clearCallingIdentity();
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v13 = p1.asBinder();
						if (v12 == v13) {
							IBinder v14 = p1.asBinder();
							Object v15 = this.mClients.get(v14);
							if (v15 == 0) {
								int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
								if (v17 != 0) {
									boolean v16 = ;
									if (v16 != 0) {
										Integer v19 = Integer.valueOf(v2);
										boolean v11 = 0;
										if (v11 != 0) {
											this.mShowRequested = 1;
											if (this.mAccessibilityRequestingNoSoftKeyboard != 0) {
												if (this.mImeHiddenByDisplayPolicy == 0) {
													if ((p3 & 2) == 0) {
														this.mShowExplicitlyRequested = 1;
														this.mShowForced = 1;
														if (this.mSystemReady != 0) {
															if (this.mCurMethod == 0) {
																if (this.mHasConnection != 0) {
																	long v24 = SystemClock.uptimeMillis();
																	if (((v24 - this.mLastBindTime) < 3000) < 0) {
																		Object v25 = new Object(3);
																		String v26 = InputMethodBindingController.getSelectedMethodId();
																		Long v27 = Long.valueOf((v24 - this.mLastBindTime));
																		Integer v28 = Integer.valueOf(1);
																		int v29 = EventLog.writeEvent(32000, v25);
																		InputMethodBindingController.unbindMainConnection();
																		boolean v32 = InputMethodBindingController.bindCurrentInputMethodServiceMainConnection();
																		IInputMethodInvoker v34 = this.mBindingController.getCurMethod();
																		IInputMethodInvoker v33 = v34;
																		if (v33 == 0) {
																			Binder v35 = new Binder();
																			Object v37 = this.mShowRequestWindowMap.put(v35, p2);
																			int v38 = InputMethodManagerService.getImeShowFlagsLocked();
																			this.mTarget.showSoftInput(v35, v38, p3);
																			IInputMethodInvoker.logRemoteException(caughtException);
																			boolean v39 = 0;
																			if (v39 == 0) {
																				WindowManagerInternal$ImeTargetInfo v43 = this.mWindowManagerInternal.onToggleImeRequested(1, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);
																				InputMethodManagerService$SoftInputShowHideHistory$Entry v44 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
																				this.mSoftInputShowHideHistory.addEntry(v44);
																				this.mInputShown = 1;
																				boolean v22 = 1;
																				Binder.restoreCallingIdentity(v10);
																				Trace.traceEnd(32);
																				return v22;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	if (this.sInstance != 0) {
		boolean v4 = ImeTracing.isSystemProcess();
		if (v4 == 0) {
			ImeTracingServerImpl v5 = new ImeTracingServerImpl();
			this.sInstance = ;
			ImeTracing v3 = this.sInstance;
			v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
			if (v12 != 0) {
				String v16 = Debug.getCallers(10);
				boolean v8 = 0;
				if (v8 != 0) {
					long v20 = Binder.clearCallingIdentity();
					if (this.mCurClient == 0) {
						if (p1 == 0) {
							IBinder v22 = InputMethodManagerService$ClientState.client.asBinder();
							IBinder v23 = p1.asBinder();
							if (v22 == v23) {
								IBinder v24 = p1.asBinder();
								Object v25 = this.mClients.get(v24);
								if (v25 == 0) {
									boolean v26 = InputMethodManagerService.isImeClientFocused(this.mCurFocusedWindow, v25);
									if (v26 != 0) {
										Integer v28 = Integer.valueOf(v2);
										boolean v21 = 0;
										if (v21 != 0) {
											this.mShowRequested = 1;
											if (this.mAccessibilityRequestingNoSoftKeyboard != 0) {
												if (this.mImeHiddenByDisplayPolicy == 0) {
													if ((p3 & 2) == 0) {
														this.mShowExplicitlyRequested = 1;
														this.mShowForced = 1;
														if (this.mSystemReady != 0) {
															this.mBindingController.setCurrentMethodVisible();
															IInputMethodInvoker v33 = InputMethodManagerService.getCurMethodLocked();
															if (v33 == 0) {
																Binder v34 = new Binder();
																Object v36 = this.mShowRequestWindowMap.put(v34, p2);
																int v37 = InputMethodManagerService.getImeShowFlagsLocked();
																boolean v38 = v33.showSoftInput(v34, v37, p4);
																if (v38 == 0) {
																	InputMethodManagerService.onShowHideSoftInputRequested(1, p2, p5);
																	this.mInputShown = 1;
																	boolean v31 = 1;
																	Binder.restoreCallingIdentity(v20);
																	Trace.traceEnd(32);
																	return v31;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	ImeTracing v3 = ImeTracing.getInstance();
	v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
	boolean v5 = p0.calledFromValidUserLocked();
	if (v5 != 0) {
		long v6 = Binder.clearCallingIdentity();
		boolean v7 = p0.canInteractWithImeLocked(v2, p1, "showSoftInput");
		if (v7 != 0) {
			boolean v8 = p0.showCurrentInputLocked(p2, p3, p4, p5);
			Binder.restoreCallingIdentity(v6);
			Trace.traceEnd(32);
			return v8;
		}
	}
}
