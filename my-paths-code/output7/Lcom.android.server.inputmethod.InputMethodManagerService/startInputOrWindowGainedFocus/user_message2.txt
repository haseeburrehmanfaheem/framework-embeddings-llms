The method startInputOrWindowGainedFocus has the following code snippet:

This is path 1 for the API with depth 2:
public InputBindResult startInputOrWindowGainedFocus(int p1, IInputMethodClient p2, IBinder p3, int p4, int p5, int p6, EditorInfo p7, IInputContext p8, IRemoteAccessibilityInputConnection p9, int p10, ImeOnBackInvokedDispatcher p11){
	int v8 = EditorInfo.targetInputMethodUser.getIdentifier();
	boolean v9 = this.mUserManagerInternal.isUserRunning(v8);
	if (v9 != 0) {
		long v10 = Binder.clearCallingIdentity();
		IBinder v12 = p2.asBinder();
		Object v13 = this.mClients.get(v12);
		if (v13 == 0) {
			int v14 = this.mWindowManagerInternal.hasInputMethodClientFocus(p3, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
			if (v14 == -3) {
				if (v14 == -2) {
					if (v14 == -1) {
						if (this.mUserSwitchHandlerTask == 0) {
							if ( != InputMethodManagerService$UserSwitchHandlerTask.mToUserId) {
								[I v15 = this.mUserManager.getProfileIdsWithDisabled(InputMethodManagerService$UserSwitchHandlerTask.mToUserId);
								if ( >= v15.length) {
									if (v15[] != ) {
										if ( >= v15.length) {
											if (v15[] != ) {
												InputMethodManagerService.scheduleSwitchUserTaskLocked(, InputMethodManagerService$ClientState.client);
												InputBindResult v11 = InputBindResult.USER_SWITCHING;
												Binder.restoreCallingIdentity(v10);
												if (v11 != 0) {
													StringBuilder v22 = new StringBuilder();
													StringBuilder v24 = v22.append("Unknown=");
													StringBuilder v25 = v24.append(p1);
													String v26 = v25.toString();
													String v21 = v26;
													String v29 = Integer.toHexString(p6);
													Trace.traceEnd(32);
													InputBindResult v1 = InputBindResult.NULL;
													return v1;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public InputBindResult startInputOrWindowGainedFocus(int p1, IInputMethodClient p2, IBinder p3, int p4, int p5, int p6, EditorInfo p7, IInputContext p8, IRemoteAccessibilityInputConnection p9, int p10, ImeOnBackInvokedDispatcher p11){
	int v8 = EditorInfo.targetInputMethodUser.getIdentifier();
	boolean v9 = this.mUserManagerInternal.isUserRunning(v8);
	if (v9 != 0) {
		long v10 = Binder.clearCallingIdentity();
		IBinder v12 = p2.asBinder();
		Object v13 = this.mClients.get(v12);
		if (v13 == 0) {
			int v14 = this.mWindowManagerInternal.hasInputMethodClientFocus(p3, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
			if (v14 == -3) {
				if (v14 == -2) {
					if (v14 == -1) {
						if (this.mUserSwitchHandlerTask == 0) {
							boolean v15 = this.mImePlatformCompatUtils.shouldClearShowForcedFlag(InputMethodManagerService$ClientState.uid);
							if (this.mCurFocusedWindow == p3) {
								if (this.mShowForced == 0) {
									if (v15 == 0) {
										this.mShowForced = 0;
										boolean v16 = this.mSettings.isCurrentProfile();
										if (v16 != 0) {
											boolean v19 = InputMethodManagerService.hideCurrentInputLocked(this.mCurFocusedWindow, 0, 0, 10);
											InputBindResult v11 = InputBindResult.INVALID_USER;
											Binder.restoreCallingIdentity(v10);
											if (v11 != 0) {
												StringBuilder v25 = new StringBuilder();
												StringBuilder v27 = v25.append("Unknown=");
												StringBuilder v28 = v27.append(p1);
												String v29 = v28.toString();
												String v24 = v29;
												String v32 = Integer.toHexString(p6);
												Trace.traceEnd(32);
												InputBindResult v1 = InputBindResult.NULL;
												return v1;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v8 = EditorInfo.targetInputMethodUser.getIdentifier();\nboolean v9 = this.mUserManagerInternal.isUserRunning(v8);\nInputBindResult v11 = InputBindResult.USER_SWITCHING;\nreturn v1;', 'int v8 = EditorInfo.targetInputMethodUser.getIdentifier();\nInputBindResult v11 = InputMethodManagerService.startInputOrWindowGainedFocusInternalLocked(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, , p11);\nreturn v1;', 'InputBindResult v1 = p0.startInputOrWindowGainedFocusInternal(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);\nreturn v1;']

The method startInputOrWindowGainedFocus has the following similar APIs:

- API Name: showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z with Similarity Score: 0.7701228857040405
  - Access Control Level: SYS_OR_SIG and the following code:
p0.showCurrentInputLocked(p2, p3, p4, p5);

- API Name: getEnabledInputMethodList(I)Ljava/util/List; with Similarity Score: 0.7526610493659973
  - Access Control Level: SYS_OR_SIG and the following code:
Object v6 = this.sLocalServiceObjects.get(UserManagerInterna.class);
boolean v7 = v5.exists(p1);
ArrayMap v13 = new ArrayMap();
InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, p1, v17, v13, v15, 0);
InputMethodUtils$InputMethodSettings v21 = new InputMethodUtils$InputMethodSettings(v22,v23,v12,v4[0],1);
ArrayList v26 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodListWithFilterLocked(0);

