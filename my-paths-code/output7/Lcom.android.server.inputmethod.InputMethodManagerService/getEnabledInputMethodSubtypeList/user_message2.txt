The method getEnabledInputMethodSubtypeList has the following code snippet:

This is path 1 for the API with depth 2:
public List getEnabledInputMethodSubtypeList(String p1, boolean p2){
	int v1 = UserHandle.getCallingUserId();
	int v2 = this.mCurrentUserId;
	Object v5 = this.sLocalServiceObjects.get(UserManagerInterna.class);
	Object v4 = v5;
	if (v1 != -1) {
		if (v1 != -2) {
			if (v1 >= 0) {
				boolean v6 = v4.exists(v1);
				if (v6 == 0) {
					[I v7 = new [I(1);
					[I v3 = v7;
					if (v3.length == 1) {
						long v8 = Binder.clearCallingIdentity();
						String v12 = this.mBindingController.getSelectedMethodId();
						String v11 = v12;
						if (p1 != 0) {
							if (v11 == 0) {
								Object v13 = this.mMethodMap.get(v11);
								if ( != 0) {
									List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked();
									if (p2 == 0) {
										boolean v16 = v15.isEmpty();
										if (v16 == 0) {
											Resources v17 = this.mContext.getResources();
											ArrayList v18 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v17, );
											List v19 = InputMethodSubtype.sort(this.mContext, 0, , );
											List v14 = v19;
											List v9 = v14;
											Binder.restoreCallingIdentity(v8);
											return v9;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public List getEnabledInputMethodSubtypeList(String p1, boolean p2){
	int v1 = UserHandle.getCallingUserId();
	int v2 = this.mCurrentUserId;
	Object v5 = this.sLocalServiceObjects.get(UserManagerInterna.class);
	Object v4 = v5;
	if (v1 != -1) {
		if (v1 != -2) {
			if (v1 >= 0) {
				boolean v6 = v4.exists(v1);
				if (v6 == 0) {
					[I v7 = new [I(1);
					[I v3 = v7;
					if (v3.length == 1) {
						long v8 = Binder.clearCallingIdentity();
						String v12 = this.mBindingController.getSelectedMethodId();
						String v11 = v12;
						if (p1 != 0) {
							if (v11 == 0) {
								Object v13 = this.mMethodMap.get(p1);
								if ( != 0) {
									List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked();
									if (p2 == 0) {
										boolean v16 = v15.isEmpty();
										if (v16 == 0) {
											Resources v17 = this.mContext.getResources();
											ArrayList v18 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v17, );
											List v19 = InputMethodSubtype.sort(this.mContext, 0, , );
											List v14 = v19;
											List v9 = v14;
											Binder.restoreCallingIdentity(v8);
											return v9;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public List getEnabledInputMethodSubtypeList(String p1, boolean p2){
	int v1 = UserHandle.getCallingUserId();
	int v2 = this.mCurrentUserId;
	Object v5 = this.sLocalServiceObjects.get(UserManagerInterna.class);
	Object v4 = v5;
	if (v1 != -1) {
		if (v1 != -2) {
			[I v6 = new [I(1);
			[I v3 = v6;
			if (v3.length == 1) {
				long v7 = Binder.clearCallingIdentity();
				String v11 = this.mBindingController.getSelectedMethodId();
				String v10 = v11;
				if (p1 != 0) {
					if (v10 == 0) {
						Object v12 = this.mMethodMap.get(v10);
						if ( != 0) {
							List v14 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked();
							if (p2 == 0) {
								boolean v15 = v14.isEmpty();
								if (v15 == 0) {
									Resources v16 = this.mContext.getResources();
									ArrayList v17 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v16, );
									List v18 = InputMethodSubtype.sort(this.mContext, 0, , );
									List v13 = v18;
									List v8 = v13;
									Binder.restoreCallingIdentity(v7);
									return v8;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['[I v3 = InputMethodUtils.resolveUserId(v1, v2, 0);\nList v5 = p0.getEnabledInputMethodSubtypeListLocked(p1, p2, v3[0]);\nreturn v5;', 'Object v14 = this.mMethodMap.get(v13);\nList v15 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, , p2);\nList v11 = v15;\nreturn v11;', 'Object v5 = this.sLocalServiceObjects.get(UserManagerInterna.class);\nint v6 = v4.exists(v1);\nList v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked();\nResources v17 = this.mContext.getResources();\nArrayList v18 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v17, );\nList v19 = InputMethodSubtype.sort(this.mContext, 0, , );\nList v14 = v19;\nList v9 = v14;\nreturn v9;']

The method getEnabledInputMethodSubtypeList has the following similar APIs:

- API Name: getEnabledInputMethodList(I)Ljava/util/List; with Similarity Score: 0.9220049381256104
  - Access Control Level: SYS_OR_SIG and the following code:
[I v4 = InputMethodUtils.resolveUserId(p1, v3, 0);
List v6 = p0.getEnabledInputMethodListLocked(v4[0]);

- API Name: getEnabledInputMethodList(I)Ljava/util/List; with Similarity Score: 0.8989343047142029
  - Access Control Level: SYS_OR_SIG and the following code:
Object v6 = this.sLocalServiceObjects.get(UserManagerInterna.class);
boolean v7 = v5.exists(p1);
ArrayMap v13 = new ArrayMap();
InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, p1, v17, v13, v15, 0);
InputMethodUtils$InputMethodSettings v21 = new InputMethodUtils$InputMethodSettings(v22,v23,v12,v4[0],1);
ArrayList v26 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodListWithFilterLocked(0);

