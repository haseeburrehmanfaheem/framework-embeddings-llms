This is path 1 for the API with depth 2:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	if (v7 != 0) {
		String v11 = Debug.getCallers(10);
		boolean v3 = 0;
		if (v3 != 0) {
			long v15 = Binder.clearCallingIdentity();
			if (this.mCurFocusedWindow != p1) {
				if (this.mCurPerceptible == p2) {
					this.mCurPerceptible = p2;
					IBinder v18 = this.mBindingController.getCurToken();
					IBinder v17 = v18;
					if (v17 != 0) {
						long v19 = Binder.clearCallingIdentity();
						if (this.mCurPerceptible != 0) {
							if ((this.mImeWindowVis & 2) == 0) {
								if (this.mShowOngoingImeSwitcherForPhones != 0) {
									AlertDialog v21 = this.mMenuController.getSwitchingDialogLocked();
									if (v21 == 0) {
										boolean v22 = this.mWindowManagerInternal.isKeyguardShowingAndNotOccluded();
										if (v22 == 0) {
											if (this.mKeyguardManager == 0) {
												boolean v23 = this.mKeyguardManager.isKeyguardSecure();
												if (v23 == 0) {
													if (( & 1) == 0) {
														if (( & 4) == 0) {
															boolean v24 = this.mWindowManagerInternal.isHardKeyboardAvailable();
															if (v24 == 0) {
																if (( & 2) != 0) {
																	boolean v20 = 0;
																	if (this.mStatusBar == 0) {
																		IBinder v26 = this.mBindingController.getCurToken();
																		IBinder v25 = v26;
																		StatusBarManagerService.enforceStatusBar();
																		StatusBarManagerService$UiState v29 = StatusBarManagerService.getUiState(this.mCurTokenDisplayId);
																		StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v29, , p2, v20, v25);
																		StatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v25,,p2,v20);
																		boolean v33 = this.mHandler.post(v31);
																		String v35 = this.mBindingController.getSelectedMethodId();
																		String v34 = v35;
																		Object v36 = this.mMethodMap.get(v34);
																		if (v36 == 0) {
																			if (v20 == 0) {
																				CharSequence v37 = this.mRes.getText(17041471);
																				PackageManager v39 = this.mContext.getPackageManager();
																				CharSequence v40 = v36.loadLabel(v39);
																				if (this.mCurrentSubtype == 0) {
																					CharSequence v41 = new CharSequence(2);
																					String v42 = v36.getPackageName();
																					ServiceInfo v43 = v36.getServiceInfo();
																					CharSequence v44 = this.mCurrentSubtype.getDisplayName(this.mContext, v42, ServiceInfo.applicationInfo);
																					boolean v45 = TextUtils.isEmpty(v40);
																					if (v45 == 0) {
																						StringBuilder v46 = new StringBuilder();
																						StringBuilder v48 = v46.append(" - ");
																						StringBuilder v49 = v46.append(v40);
																						String v50 = v46.toString();
																						CharSequence v51 = TextUtils.concat(v41);
																						CharSequence v38 = ;
																						Notification$Builder v52 = this.mImeSwitcherNotification.setContentTitle(v37);
																						Notification$Builder v53 = v52.setContentText(v38);
																						Notification$Builder v54 = v53.setContentIntent(this.mImeSwitchPendingIntent);
																						if (this.mNotificationManager == 0) {
																							boolean v55 = this.mIWindowManager.hasNavigationBar(0);
																							if (v55 != 0) {
																								Notification v56 = this.mImeSwitcherNotification.build();
																								this.mNotificationManager.notifyAsUser(0, 8, v56, UserHandle.ALL);
																								this.mNotificationShown = 1;
																								Binder.restoreCallingIdentity(v19);
																								Binder.restoreCallingIdentity(v15);
																								return;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	if (v7 != 0) {
		String v11 = Debug.getCallers(10);
		boolean v3 = 0;
		if (v3 != 0) {
			long v15 = Binder.clearCallingIdentity();
			if (this.mCurFocusedWindow != p1) {
				if (this.mCurPerceptible == p2) {
					this.mCurPerceptible = p2;
					IBinder v17 = InputMethodManagerService.getCurTokenLocked();
					if (v17 != 0) {
						long v18 = Binder.clearCallingIdentity();
						if (this.mCurPerceptible != 0) {
							if ((this.mImeWindowVis & 2) == 0) {
								boolean v19 = InputMethodManagerService.shouldShowImeSwitcherLocked();
								if (this.mStatusBar == 0) {
									IBinder v20 = InputMethodManagerService.getCurTokenLocked();
									this.mStatusBar.setImeWindowStatus(this.mCurTokenDisplayId, v20, , this.mBackDisposition, v19);
									String v22 = InputMethodManagerService.getSelectedMethodIdLocked();
									Object v23 = this.mMethodMap.get(v22);
									if (v23 == 0) {
										if (v19 == 0) {
											CharSequence v24 = this.mRes.getText(17041471);
											CharSequence v25 = InputMethodUtils.getImeAndSubtypeDisplayName(this.mContext, v23, this.mCurrentSubtype);
											Notification$Builder v26 = this.mImeSwitcherNotification.setContentTitle(v24);
											Notification$Builder v27 = v26.setContentText(v25);
											Notification$Builder v28 = v27.setContentIntent(this.mImeSwitchPendingIntent);
											if (this.mNotificationManager == 0) {
												boolean v29 = this.mIWindowManager.hasNavigationBar(0);
												if (v29 != 0) {
													Notification v30 = this.mImeSwitcherNotification.build();
													this.mNotificationManager.notifyAsUser(0, 8, v30, UserHandle.ALL);
													this.mNotificationShown = 1;
													Binder.restoreCallingIdentity(v18);
													Binder.restoreCallingIdentity(v15);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	boolean v3 = p0.calledFromValidUserLocked();
	if (v3 != 0) {
		long v4 = Binder.clearCallingIdentity();
		if (this.mCurFocusedWindow != p1) {
			if (this.mCurPerceptible == p2) {
				this.mCurPerceptible = p2;
				p0.updateSystemUiLocked(this.mImeWindowVis, this.mBackDisposition);
				Binder.restoreCallingIdentity(v4);
				return;
			}
		}
	}
}
