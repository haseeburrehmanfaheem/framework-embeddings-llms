The method getLastInputMethodSubtype has the following code snippet:

This is path 1 for the API with depth 2:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
			List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				Object v19 = v17.next();
				boolean v20 = TextUtils.isEmpty(0);
				if (v20 != 0) {
					boolean v21 = Pair.first.equals(0);
					if (v21 == 0) {
						String v22 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
						boolean v23 = TextUtils.isEmpty(v22);
						if (v23 != 0) {
							boolean v24 = v17.hasNext();
							if (v24 == 0) {
								Object v25 = v17.next();
								boolean v26 = TextUtils.isEmpty(0);
								if (v26 != 0) {
									boolean v27 = Pair.first.equals(0);
									if (v27 == 0) {
										String v28 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
										boolean v29 = TextUtils.isEmpty(v28);
										if (v29 != 0) {
											Pair v30 = new Pair(Pair.first,v28);
											Pair v14 = v30;
											Pair v13 = v14;
											if (v13 == 0) {
												boolean v32 = TextUtils.isEmpty(Pair.first);
												if (v32 != 0) {
													boolean v33 = TextUtils.isEmpty(Pair.second);
													if (v33 == 0) {
														Object v34 = this.mMethodMap.get(Pair.first);
														if (v34 != 0) {
															int v35 = Integer.parseInt(Pair.second);
															if (v34 == 0) {
																int v37 = v34.getSubtypeCount();
																if ( >= v37) {
																	InputMethodSubtype v38 = v34.getSubtypeAt();
																	int v39 = this.mSubtypeHashCode;
																	if (v35 != v39) {
																		if ( >= v37) {
																			InputMethodSubtype v40 = v34.getSubtypeAt();
																			int v41 = this.mSubtypeHashCode;
																			if (v35 != v41) {
																				int v36 = ;
																				if (v36 < 0) {
																					int v42 = v34.getSubtypeCount();
																					return 0;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
			List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				Object v19 = v17.next();
				boolean v20 = TextUtils.isEmpty(0);
				if (v20 != 0) {
					boolean v21 = Pair.first.equals(0);
					if (v21 == 0) {
						String v22 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
						boolean v23 = TextUtils.isEmpty(v22);
						if (v23 != 0) {
							boolean v24 = v17.hasNext();
							if (v24 == 0) {
								Object v25 = v17.next();
								boolean v26 = TextUtils.isEmpty(0);
								if (v26 != 0) {
									boolean v27 = Pair.first.equals(0);
									if (v27 == 0) {
										String v28 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
										boolean v29 = TextUtils.isEmpty(v28);
										if (v29 != 0) {
											Pair v30 = new Pair(Pair.first,v28);
											Pair v14 = v30;
											Pair v13 = v14;
											if (v13 == 0) {
												boolean v32 = TextUtils.isEmpty(Pair.first);
												if (v32 != 0) {
													boolean v33 = TextUtils.isEmpty(Pair.second);
													if (v33 == 0) {
														Object v34 = this.mMethodMap.get(Pair.first);
														if (v34 != 0) {
															int v35 = Integer.parseInt(Pair.second);
															if (v34 == 0) {
																int v37 = v34.getSubtypeCount();
																if ( >= v37) {
																	InputMethodSubtype v38 = v34.getSubtypeAt();
																	int v39 = this.mSubtypeHashCode;
																	if (v35 != v39) {
																		if ( >= v37) {
																			int v36 = -1;
																			if (v36 < 0) {
																				int v40 = v34.getSubtypeCount();
																				return 0;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			List v8 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
			List v9 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
			Iterator v10 = v9.iterator();
			boolean v11 = v10.hasNext();
			if (v11 == 0) {
				Object v12 = v10.next();
				boolean v13 = TextUtils.isEmpty(0);
				if (v13 != 0) {
					boolean v14 = Pair.first.equals(0);
					if (v14 == 0) {
						String v15 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v8, Pair.first, Pair.second);
						boolean v16 = TextUtils.isEmpty(v15);
						if (v16 != 0) {
							boolean v17 = v10.hasNext();
							if (v17 == 0) {
								Object v18 = v10.next();
								boolean v19 = TextUtils.isEmpty(0);
								if (v19 != 0) {
									boolean v20 = Pair.first.equals(0);
									if (v20 == 0) {
										String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v8, Pair.first, Pair.second);
										boolean v22 = TextUtils.isEmpty(v21);
										if (v22 != 0) {
											Pair v23 = new Pair(Pair.first,v21);
											Pair v7 = v23;
											Pair v6 = v7;
											if (v6 == 0) {
												boolean v25 = TextUtils.isEmpty(Pair.first);
												if (v25 != 0) {
													boolean v26 = TextUtils.isEmpty(Pair.second);
													if (v26 == 0) {
														Object v27 = this.mMethodMap.get(Pair.first);
														if (v27 != 0) {
															int v28 = Integer.parseInt(Pair.second);
															if (v27 == 0) {
																int v30 = v27.getSubtypeCount();
																if ( >= v30) {
																	InputMethodSubtype v31 = v27.getSubtypeAt();
																	int v32 = this.mSubtypeHashCode;
																	if (v28 != v32) {
																		if ( >= v30) {
																			InputMethodSubtype v33 = v27.getSubtypeAt();
																			int v34 = this.mSubtypeHashCode;
																			if (v28 != v34) {
																				int v29 = ;
																				if (v29 < 0) {
																					int v35 = v27.getSubtypeCount();
																					return 0;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();\nObject v5 = this.mMethodMap.get(Pair.first);\nint v6 = Integer.parseInt(Pair.second);\nint v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);', 'Pair v14 = InputMethodUtils$InputMethodSettings.getLastSubtypeForInputMethodLockedInternal(0);\nObject v17 = this.mMethodMap.get(Pair.first);\nint v18 = Integer.parseInt(Pair.second);\nInputMethodSubtype v21 = v17.getSubtypeAt();', 'List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();\nList v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();\nString v22 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);\nObject v34 = this.mMethodMap.get(Pair.first);\nint v35 = Integer.parseInt(Pair.second);\nInputMethodSubtype v38 = v34.getSubtypeAt();']

The method getLastInputMethodSubtype has the following similar APIs:

- API Name: getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List; with Similarity Score: 0.8718495965003967
  - Access Control Level: SYS_OR_SIG and the following code:
Object v14 = this.mMethodMap.get(v13);
List v15 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, , p2);
List v11 = v15;
return v11;

- API Name: getEnabledInputMethodList(I)Ljava/util/List; with Similarity Score: 0.8366022109985352
  - Access Control Level: SYS_OR_SIG and the following code:
ArrayMap v14 = InputMethodManagerService.queryMethodMapForUser(v4[0]);
InputMethodUtils$InputMethodSettings v15 = new InputMethodUtils$InputMethodSettings(v16,v17,v14,v4[0],1);
ArrayList v19 = v15.getEnabledInputMethodListLocked();

