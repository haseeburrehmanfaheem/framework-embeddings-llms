This is path 1 for the API with depth 2:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
			List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				Object v19 = v17.next();
				boolean v20 = TextUtils.isEmpty(0);
				if (v20 != 0) {
					boolean v21 = Pair.first.equals(0);
					if (v21 == 0) {
						String v22 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
						boolean v23 = TextUtils.isEmpty(v22);
						if (v23 != 0) {
							boolean v24 = v17.hasNext();
							if (v24 == 0) {
								Object v25 = v17.next();
								boolean v26 = TextUtils.isEmpty(0);
								if (v26 != 0) {
									boolean v27 = Pair.first.equals(0);
									if (v27 == 0) {
										String v28 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
										boolean v29 = TextUtils.isEmpty(v28);
										if (v29 != 0) {
											Pair v30 = new Pair(Pair.first,v28);
											Pair v14 = v30;
											Pair v13 = v14;
											if (v13 == 0) {
												boolean v32 = TextUtils.isEmpty(Pair.first);
												if (v32 != 0) {
													boolean v33 = TextUtils.isEmpty(Pair.second);
													if (v33 == 0) {
														Object v34 = this.mMethodMap.get(Pair.first);
														if (v34 != 0) {
															int v35 = Integer.parseInt(Pair.second);
															if (v34 == 0) {
																int v37 = v34.getSubtypeCount();
																if ( >= v37) {
																	InputMethodSubtype v38 = v34.getSubtypeAt();
																	int v39 = this.mSubtypeHashCode;
																	if (v35 != v39) {
																		if ( >= v37) {
																			InputMethodSubtype v40 = v34.getSubtypeAt();
																			int v41 = this.mSubtypeHashCode;
																			if (v35 != v41) {
																				int v36 = ;
																				if (v36 < 0) {
																					int v42 = v34.getSubtypeCount();
																					return 0;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			Pair v14 = InputMethodUtils$InputMethodSettings.getLastSubtypeForInputMethodLockedInternal(0);
			Pair v13 = v14;
			if (v13 == 0) {
				boolean v15 = TextUtils.isEmpty(Pair.first);
				if (v15 != 0) {
					boolean v16 = TextUtils.isEmpty(Pair.second);
					if (v16 == 0) {
						Object v17 = this.mMethodMap.get(Pair.first);
						if (v17 != 0) {
							int v18 = Integer.parseInt(Pair.second);
							if (v17 == 0) {
								int v20 = v17.getSubtypeCount();
								if ( >= v20) {
									InputMethodSubtype v21 = v17.getSubtypeAt();
									int v22 = v21.hashCode();
									if (v18 != v22) {
										if ( >= v20) {
											InputMethodSubtype v23 = v17.getSubtypeAt();
											int v24 = v23.hashCode();
											if (v18 != v24) {
												int v19 = ;
												if (v19 < 0) {
													int v25 = v17.getSubtypeCount();
													return 0;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public InputMethodSubtype getLastInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	if (v1 != 0) {
		Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();
		if (v2 == 0) {
			boolean v3 = TextUtils.isEmpty(Pair.first);
			if (v3 != 0) {
				boolean v4 = TextUtils.isEmpty(Pair.second);
				if (v4 == 0) {
					Object v5 = this.mMethodMap.get(Pair.first);
					if (v5 != 0) {
						int v6 = Integer.parseInt(Pair.second);
						int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);
						if (v7 < 0) {
							int v8 = v5.getSubtypeCount();
							return 0;
						}
					}
				}
			}
		}
	}
}
