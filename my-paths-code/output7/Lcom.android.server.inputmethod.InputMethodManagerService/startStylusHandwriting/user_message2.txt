The method startStylusHandwriting has the following code snippet:

This is path 1 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingServerImpl v5 = new ImeTracingServerImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
			int v8 = Binder.getCallingUid();
			boolean v9 = p0.calledFromValidUserLocked();
			if (v9 != 0) {
				long v10 = Binder.clearCallingIdentity();
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v13 = p1.asBinder();
						if (v12 == v13) {
							IBinder v14 = p1.asBinder();
							Object v15 = this.mClients.get(v14);
							if (v15 == 0) {
								int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
								if (v17 != 0) {
									boolean v16 = ;
									if (v16 != 0) {
										Integer v19 = Integer.valueOf(v8);
										boolean v11 = 0;
										if (v11 != 0) {
											boolean v22 = this.mBindingController.supportsStylusHandwriting();
											if (v22 != 0) {
												OptionalInt v23 = this.mHwController.getCurrentRequestId();
												boolean v24 = v23.isPresent();
												if (v24 != 0) {
													boolean v25 = this.mHwController.isStylusGestureOngoing();
													if (v25 != 0) {
														IInputMethodInvoker v27 = this.mCurMethod;
														IInputMethodInvoker v26 = v27;
														if (v26 == 0) {
															int v28 = v23.getAsInt();
															this.mTarget.canStartStylusHandwriting(v28);
															if (caughtException instanceof DeadObjectException != 0) {
																String v35 = IInputMethodInvoker.getCallerMethodName();
																Binder.restoreCallingIdentity(v10);
																Trace.traceEnd(32);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingClientImpl v5 = new ImeTracingClientImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
			int v8 = Binder.getCallingUid();
			boolean v9 = p0.calledFromValidUserLocked();
			if (v9 != 0) {
				long v10 = Binder.clearCallingIdentity();
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v13 = p1.asBinder();
						if (v12 == v13) {
							IBinder v14 = p1.asBinder();
							Object v15 = this.mClients.get(v14);
							if (v15 == 0) {
								int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
								if (v17 != 0) {
									boolean v16 = ;
									if (v16 != 0) {
										Integer v19 = Integer.valueOf(v8);
										boolean v11 = 0;
										if (v11 != 0) {
											boolean v22 = this.mBindingController.supportsStylusHandwriting();
											if (v22 != 0) {
												OptionalInt v23 = this.mHwController.getCurrentRequestId();
												boolean v24 = v23.isPresent();
												if (v24 != 0) {
													boolean v25 = this.mHwController.isStylusGestureOngoing();
													if (v25 != 0) {
														IInputMethodInvoker v27 = this.mCurMethod;
														IInputMethodInvoker v26 = v27;
														if (v26 == 0) {
															int v28 = v23.getAsInt();
															this.mTarget.canStartStylusHandwriting(v28);
															if (caughtException instanceof DeadObjectException != 0) {
																String v35 = IInputMethodInvoker.getCallerMethodName();
																Binder.restoreCallingIdentity(v10);
																Trace.traceEnd(32);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingServerImpl v5 = new ImeTracingServerImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
			int v8 = Binder.getCallingUid();
			boolean v9 = p0.calledFromValidUserLocked();
			if (v9 != 0) {
				long v10 = Binder.clearCallingIdentity();
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v13 = p1.asBinder();
						if (v12 == v13) {
							IBinder v14 = p1.asBinder();
							Object v15 = this.mClients.get(v14);
							if (v15 == 0) {
								int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
								if (v17 != 0) {
									boolean v16 = ;
									if (v16 != 0) {
										boolean v11 = 1;
										if (v11 != 0) {
											boolean v18 = this.mBindingController.supportsStylusHandwriting();
											if (v18 != 0) {
												OptionalInt v19 = this.mHwController.getCurrentRequestId();
												boolean v20 = v19.isPresent();
												if (v20 != 0) {
													boolean v21 = this.mHwController.isStylusGestureOngoing();
													if (v21 != 0) {
														IInputMethodInvoker v23 = this.mCurMethod;
														IInputMethodInvoker v22 = v23;
														if (v22 == 0) {
															int v24 = v19.getAsInt();
															this.mTarget.canStartStylusHandwriting(v24);
															if (caughtException instanceof DeadObjectException != 0) {
																String v31 = IInputMethodInvoker.getCallerMethodName();
																Binder.restoreCallingIdentity(v10);
																Trace.traceEnd(32);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ImeTracingServerImpl v5 = new ImeTracingServerImpl();\nthis.sInstance = ;\nImeTracing v2 = this.sInstance;\nv2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");\nint v8 = Binder.getCallingUid();\nboolean v9 = p0.calledFromValidUserLocked();\nif (this.mCurClient == 0) {\n    if (p1 == 0) {\n        IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();\n        IBinder v13 = p1.asBinder();\n        if (v12 == v13) {\n            IBinder v14 = p1.asBinder();\n            Object v15 = this.mClients.get(v14);\n            if (v15 == 0) {\n                int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);\n                if (v17 != 0) {\n                    Integer v19 = Integer.valueOf(v8);\n                    boolean v11 = 0;\n                    if (v11 != 0) {\n                        boolean v22 = this.mBindingController.supportsStylusHandwriting();\n                        if (v22 != 0) {\n                            OptionalInt v23 = this.mHwController.getCurrentRequestId();\n                            boolean v24 = v23.isPresent();\n                            if (v24 != 0) {\n                                boolean v25 = this.mHwController.isStylusGestureOngoing();\n                                if (v25 != 0) {\n                                    IInputMethodInvoker v27 = this.mCurMethod;\n                                    IInputMethodInvoker v26 = v27;\n                                    if (v26 == 0) {\n                                        int v28 = v23.getAsInt();\n                                        this.mTarget.canStartStylusHandwriting(v28);', 'ImeTracingServerImpl v4 = new ImeTracingServerImpl();\nthis.sInstance = ;\nImeTracing v2 = this.sInstance;\nv2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");\nint v7 = Binder.getCallingUid();\nif (v12 != 0) {\n    String v16 = Debug.getCallers(10);\n    boolean v8 = 0;\n    if (v8 != 0) {\n        long v20 = Binder.clearCallingIdentity();\n        if (this.mCurClient == 0) {\n            if (p1 == 0) {\n                IBinder v22 = InputMethodManagerService$ClientState.client.asBinder();\n                IBinder v23 = p1.asBinder();\n                if (v22 == v23) {\n                    IBinder v24 = p1.asBinder();\n                    Object v25 = this.mClients.get(v24);\n                    if (v25 == 0) {\n                        boolean v26 = InputMethodManagerService.isImeClientFocused(this.mCurFocusedWindow, v25);\n                        if (v26 != 0) {\n                            Integer v28 = Integer.valueOf(v7);\n                            boolean v21 = 0;\n                            if (v21 != 0) {\n                                boolean v31 = this.mSupportsStylusHw;\n                                if (v31 != 0) {\n                                    if (this.mHandwritingSurface != 0) {\n                                        OptionalInt v33 = OptionalInt.of(this.mCurrentRequestId);\n                                        OptionalInt v32 = v33;\n                                        boolean v34 = v32.isPresent();\n                                        if (v34 != 0) {\n                                            boolean v35 = this.mRecordingGesture;\n                                            if (v35 != 0) {\n                                                IInputMethodInvoker v37 = this.mBindingController.getCurMethod();\n                                                IInputMethodInvoker v36 = v37;\n                                                if (v36 == 0) {\n                                                    int v38 = v32.getAsInt();\n                                                    this.mTarget.canStartStylusHandwriting(v38);', 'ImeTracing v2 = ImeTracing.getInstance();\nv2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");\nint v4 = Binder.getCallingUid();\nboolean v5 = p0.calledFromValidUserLocked();\nif (v5 != 0) {\n    long v6 = Binder.clearCallingIdentity();\n    boolean v7 = p0.canInteractWithImeLocked(v4, p1, "startStylusHandwriting");\n    if (v7 != 0) {\n        boolean v8 = this.mBindingController.supportsStylusHandwriting();\n        if (v8 != 0) {\n            OptionalInt v9 = this.mHwController.getCurrentRequestId();\n            boolean v10 = v9.isPresent();\n            if (v10 != 0) {\n                boolean v11 = this.mHwController.isStylusGestureOngoing();\n                if (v11 != 0) {\n                    IInputMethodInvoker v12 = p0.getCurMethodLocked();\n                    if (v12 == 0) {\n                        int v13 = v9.getAsInt();\n                        v12.canStartStylusHandwriting(v13);']

The method startStylusHandwriting has the following similar APIs:

- API Name: isImeTraceEnabled()Z with Similarity Score: 0.728922963142395
  - Access Control Level: NONE and the following code:
ImeTracingServerImpl v4 = new ImeTracingServerImpl();
this.sInstance = ;
ImeTracing v1 = this.sInstance;
boolean v6 = v1.isEnabled();
return v6;

- API Name: startImeTrace()V with Similarity Score: 0.7170149087905884
  - Access Control Level: NONE and the following code:
ImeTracingServerImpl v4 = new ImeTracingServerImpl();
this.sInstance = ;
ImeTracing v1 = this.sInstance;
v1.startTrace(0);

