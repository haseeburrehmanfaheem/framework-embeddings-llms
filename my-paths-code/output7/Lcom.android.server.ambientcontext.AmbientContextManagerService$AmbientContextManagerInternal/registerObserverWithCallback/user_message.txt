This is path 1 for the API with depth 2:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	this.this$0.assertCalledByPackageOwner(p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		if (this.mComponentName != 0) {
			ComponentName v13 = AmbientContextManagerPerUserService.updateServiceInfoLocked();
			this.mComponentName = v13;
			if (this.mComponentName != 0) {
				IPackageManager v14 = AppGlobals.getPackageManager();
				ServiceInfo v15 = v14.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId);
				boolean v12 = 0;
				if (v12 != 0) {
					Set v21 = p1.getEventTypes();
					boolean v25 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
					if (v25 == 0) {
						AmbientContextManagerPerUserService.ensureRemoteServiceInitiated();
						RemoteCallback v27 = AmbientContextManagerPerUserService.createDetectionResultRemoteCallback();
						AmbientContextManagerPerUserService$$ExternalSyntheticLambda1 v28 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3);
						RemoteCallback v30 = AmbientContextManagerPerUserService.getServerStatusCallback(v28);
						this.mRemoteService.startDetection(p1, p2, v27, v30);
						Set v39 = AmbientContextManagerService.findExistingRequests(AbstractPerUserSystemService.mUserId, p2);
						boolean v40 = this.mExistingClientRequests.removeAll(v39);
						AmbientContextManagerService$ClientRequest v41 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);
						boolean v43 = this.mExistingClientRequests.add(v41);
						return;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	this.this$0.assertCalledByPackageOwner(p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		String v11 = this.TAG;
		p3.onRegistrationComplete(3);
		String v18 = caughtException.getMessage();
		return;
	}
}


This is path 3 for the API with depth 0:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	AmbientContextManagerService.access$100(this.this$0, p2);
	if (AmbientContextManagerService.mIsServiceEnabled != 0) {
		AmbientContextManagerPerUserService.completeRegistration(p3, 3);
		return;
	}
}
