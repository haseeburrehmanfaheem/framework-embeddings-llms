The method checkOp has the following code snippet:

This is path 1 for the API with depth 2:
public int checkOp(int p1, AttributionSourceState p2, String p3, boolean p4, boolean p5){
	if (v3 == 0) {
		if (p5 == 0) {
			Object v6 = Objects.requireNonNull(p2);
			Object v7 = this.mContext.getSystemService(AppOpsManage.class);
			if (p1 != -1) {
				AttributionSource v8 = new AttributionSource(p2);
				if (p3 != 0) {
					if ( == 0) {
						AttributionSource v10 = .getNext();
						if (p3 == 0) {
							AttributionSourceState v11 = .asState();
							if (v11 == p2) {
								if (v10 == 0) {
									boolean v12 = .isTrusted(this.mContext);
									if (v12 != 0) {
										if (p3 == 0) {
											AttributionSourceState v13 = .asState();
											if (v13 != p2) {
												if (v10 == 0) {
													AttributionSource v14 = v10.getNext();
													if (v14 != 0) {
														if ( != 0) {
															if (v10 != 0) {
																if ( != 0) {
																	if ( == 0) {
																		String v15 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, );
																		if (v15 != 0) {
																			IBinder v16 = .getToken();
																			int v17 = .getUid();
																			String v18 = .getAttributionTag();
																			v7.finishOp(v16, p1, v17, v15, v18);
																			ConcurrentHashMap v20 = PermissionManagerService.-$$Nest$sfgetsRunningAttributionSources();
																			IBinder v21 = .getToken();
																			Object v22 = v20.remove(v21);
																			if (v22 == 0) {
																				if (v10 == 0) {
																					return v3;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int checkOp(int p1, AttributionSourceState p2, String p3, boolean p4, boolean p5){
	if (v3 == 0) {
		if (p5 == 0) {
			String v17 = AppOpsManager.opToPublicName(p1);
			v7.finishProxyOp(v17, v15, );
			ConcurrentHashMap v19 = PermissionManagerService.-$$Nest$sfgetsRunningAttributionSources();
			IBinder v20 = .getToken();
			Object v21 = v19.remove(v20);
			if (v21 == 0) {
				boolean v22 = v21.unregister();
				return v3;
			}
		}
	}
}

and the following sink code:
['Object v6 = Objects.requireNonNull(p2);\nAttributionSource v8 = new AttributionSource(p2);\nv7.finishOp(v16, p1, v17, v15, v18);', 'PermissionManagerService$PermissionCheckerService.finishDataDelivery(this.mContext, p1, p2, 0);', 'p0.finishDataDelivery(p1, p2, 0);']

The method checkOp has the following similar APIs:

- API Name: finishDataDelivery(ILandroid/content/AttributionSourceState;Z)V with Similarity Score: 0.9856389164924622
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = Objects.requireNonNull(p2);
AttributionSource v4 = new AttributionSource(p2);
v3.finishOp(v25, p1, v26, v17, v27);

- API Name: finishDataDelivery(ILandroid/content/AttributionSourceState;Z)V with Similarity Score: 0.8458521366119385
  - Access Control Level: SYS_OR_SIG and the following code:
AttributionSource v6 = .getNext();
v3.finishOp(v12, p1, v13, v11, v14);

