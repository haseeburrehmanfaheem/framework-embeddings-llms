This is path 1 for the API with depth 2:
public int createVirtualDisplay(VirtualDisplayConfig p1, IVirtualDisplayCallback p2, IVirtualDevice p3, String p4){
	long v9 = Binder.clearCallingIdentity();
	GenericWindowPolicyController v11 = new GenericWindowPolicyController(8192,524288,v12,v25,v27,v29,v31,v33,v34,v37,v39,v41);
	ArraySet v13 = new ArraySet();
	Object v15 = this.mContext.getSystemService(DevicePolicyManage.class);
	Object v16 = this.mContext.getSystemService(UserManage.class);
	List v17 = v16.getAllProfiles();
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	if (v19 == 0) {
		Object v20 = v18.next();
		int v21 = v20.getIdentifier();
		int v22 = v15.getNearbyAppStreamingPolicy(v21);
		if (v22 == 2) {
			if (v22 != 0) {
				boolean v23 = v13.add(v20);
				boolean v24 = v18.hasNext();
				if (v24 == 0) {
					ArraySet v12 = v13;
					Set v26 = Collections.unmodifiableSet(this.mAllowedCrossTaskNavigations);
					Set v25 = v26;
					Set v28 = Collections.unmodifiableSet(this.mBlockedCrossTaskNavigations);
					Set v27 = v28;
					Set v30 = Collections.unmodifiableSet(this.mAllowedActivities);
					Set v29 = v30;
					Set v32 = Collections.unmodifiableSet(this.mBlockedActivities);
					Set v31 = v32;
					int v33 = this.mDefaultActivityPolicy;
					VirtualDeviceImpl$1 v35 = new VirtualDeviceImpl$1(VirtualDeviceImpl);
					VirtualDeviceManager$ActivityListener v34 = v35;
					VirtualDeviceImpl$$ExternalSyntheticLambda2 v37 = new VirtualDeviceImpl$$ExternalSyntheticLambda2(VirtualDeviceImpl);
					VirtualDeviceImpl$$ExternalSyntheticLambda3 v39 = new VirtualDeviceImpl$$ExternalSyntheticLambda3(VirtualDeviceImpl);
					String v41 = this.mDeviceProfile;
					boolean v44 = this.mRunningAppsChangedListener.add(p0);
					GenericWindowPolicyController v10 = v11;
					Binder.restoreCallingIdentity(v9);
					Object v46 = VirtualDeviceManagerService.access$000(this.this$0, DisplayManagerInterna.class);
					int v47 = v46.createVirtualDisplay(p1, p2, p3, v10, p4);
					long v48 = Binder.clearCallingIdentity();
					if (v47 != -1) {
						Integer v50 = Integer.valueOf(v47);
						boolean v51 = this.mVirtualDisplayIds.contains(v50);
						if (v51 != 0) {
							Integer v52 = Integer.valueOf(v47);
							boolean v53 = this.mVirtualDisplayIds.add(v52);
							this.mDisplayId = p2;
							this.mWindowPolicyControllers.put(v47, v10);
							this.mInputManagerInternal.setPointerIconVisible(this.mDefaultShowPointerIcon, p2);
							this.mInputManagerInternal.setPointerAcceleration(1065353216, p2);
							this.mInputManagerInternal.setDisplayEligibilityForPointerCapture(p2, 0);
							DisplayInfo v63 = this.mDisplayManagerInternal.getDisplayInfo(p2);
							if ((DisplayInfo.flags & 128) != 128) {
								this.mWindowManager.setDisplayImePolicy(p2, 0);
								Integer v65 = Integer.valueOf(v47);
								boolean v66 = this.mPerDisplayWakelocks.containsKey(v65);
								if (v66 == 0) {
									Object v67 = this.mContext.getSystemService(PowerManage.class);
									StringBuilder v68 = new StringBuilder();
									StringBuilder v70 = v68.append("VirtualDeviceImpl:");
									StringBuilder v71 = v68.append(v47);
									String v72 = v68.toString();
									PowerManager$WakeLock v73 = v67.newWakeLock(10, v72, v47);
									Integer v74 = Integer.valueOf(v47);
									Object v75 = this.mPerDisplayWakelocks.put(v74, v73);
									v73.acquire();
									Binder.restoreCallingIdentity(v48);
									VirtualDeviceManagerInternal v78 = VirtualDeviceManagerService.-$$Nest$fgetmLocalService(this.this$0);
									v78.onVirtualDisplayCreated(v47);
									return v47;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int createVirtualDisplay(VirtualDisplayConfig p1, IVirtualDisplayCallback p2, IVirtualDevice p3, String p4){
	long v9 = Binder.clearCallingIdentity();
	GenericWindowPolicyController v11 = new GenericWindowPolicyController(8192,524288,v12,v13,v14,v15,v16,v17,v18,v19,v21,v23);
	ArraySet v12 = VirtualDeviceImpl.getAllowedUserHandles();
	Set v13 = this.mParams.getAllowedCrossTaskNavigations();
	Set v14 = this.mParams.getBlockedCrossTaskNavigations();
	Set v15 = this.mParams.getAllowedActivities();
	Set v16 = this.mParams.getBlockedActivities();
	int v17 = this.mParams.getDefaultActivityPolicy();
	VirtualDeviceManager$ActivityListener v18 = VirtualDeviceImpl.createListenerAdapter();
	VirtualDeviceImpl$$ExternalSyntheticLambda2 v19 = new VirtualDeviceImpl$$ExternalSyntheticLambda2(VirtualDeviceImpl);
	VirtualDeviceImpl$$ExternalSyntheticLambda3 v21 = new VirtualDeviceImpl$$ExternalSyntheticLambda3(VirtualDeviceImpl);
	String v23 = this.mAssociationInfo.getDeviceProfile();
	v11.registerRunningAppsChangedListener(VirtualDeviceImpl);
	GenericWindowPolicyController v10 = v11;
	Binder.restoreCallingIdentity(v9);
	Object v28 = this.this$0.getLocalService(DisplayManagerInterna.class);
	Object v27 = v28;
	int v29 = v27.createVirtualDisplay(p1, p2, p3, v10, p4);
	long v30 = Binder.clearCallingIdentity();
	if (v29 != -1) {
		Integer v32 = Integer.valueOf(v29);
		boolean v33 = this.mVirtualDisplayIds.contains(v32);
		if (v33 != 0) {
			Integer v34 = Integer.valueOf(v29);
			boolean v35 = this.mVirtualDisplayIds.add(v34);
			v10.setDisplayId(v29);
			this.mWindowPolicyControllers.put(v29, v10);
			this.mInputController.setShowPointerIcon(this.mDefaultShowPointerIcon, v29);
			this.mInputController.setPointerAcceleration(1065353216, v29);
			this.mInputController.setDisplayEligibilityForPointerCapture(0, v29);
			this.mInputController.setLocalIme(v29);
			Integer v42 = Integer.valueOf(v29);
			boolean v43 = this.mPerDisplayWakelocks.containsKey(v42);
			if (v43 == 0) {
				Object v44 = this.mContext.getSystemService(PowerManage.class);
				StringBuilder v45 = new StringBuilder();
				StringBuilder v47 = v45.append("VirtualDeviceImpl:");
				StringBuilder v48 = v45.append(v29);
				String v49 = v45.toString();
				PowerManager$WakeLock v50 = v44.newWakeLock(10, v49, v29);
				Integer v51 = Integer.valueOf(v29);
				Object v52 = this.mPerDisplayWakelocks.put(v51, v50);
				v50.acquire();
				Binder.restoreCallingIdentity(v30);
				VirtualDeviceManagerInternal v55 = this.mLocalService;
				v55.onVirtualDisplayCreated(v29);
				return v29;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int createVirtualDisplay(VirtualDisplayConfig p1, IVirtualDisplayCallback p2, IVirtualDevice p3, String p4){
	long v9 = Binder.clearCallingIdentity();
	GenericWindowPolicyController v10 = v7.createWindowPolicyController();
	Binder.restoreCallingIdentity(v9);
	Object v12 = VirtualDeviceManagerService.access$000(this.this$0, DisplayManagerInterna.class);
	int v13 = v12.createVirtualDisplay(p1, p2, p3, v10, p4);
	long v14 = Binder.clearCallingIdentity();
	v7.onVirtualDisplayCreatedLocked(v10, v13);
	Binder.restoreCallingIdentity(v14);
	VirtualDeviceManagerInternal v17 = VirtualDeviceManagerService.-$$Nest$fgetmLocalService(this.this$0);
	v17.onVirtualDisplayCreated(v13);
	return v13;
}
