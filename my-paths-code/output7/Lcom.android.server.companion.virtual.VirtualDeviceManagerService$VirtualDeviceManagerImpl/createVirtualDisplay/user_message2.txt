The method createVirtualDisplay has the following code snippet:

This is path 1 for the API with depth 2:
public int createVirtualDisplay(VirtualDisplayConfig p1, IVirtualDisplayCallback p2, IVirtualDevice p3, String p4){
	long v9 = Binder.clearCallingIdentity();
	GenericWindowPolicyController v11 = new GenericWindowPolicyController(8192,524288,v12,v25,v27,v29,v31,v33,v34,v37,v39,v41);
	ArraySet v13 = new ArraySet();
	Object v15 = this.mContext.getSystemService(DevicePolicyManage.class);
	Object v16 = this.mContext.getSystemService(UserManage.class);
	List v17 = v16.getAllProfiles();
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	if (v19 == 0) {
		Object v20 = v18.next();
		int v21 = v20.getIdentifier();
		int v22 = v15.getNearbyAppStreamingPolicy(v21);
		if (v22 == 2) {
			if (v22 != 0) {
				boolean v23 = v13.add(v20);
				boolean v24 = v18.hasNext();
				if (v24 == 0) {
					ArraySet v12 = v13;
					Set v26 = Collections.unmodifiableSet(this.mAllowedCrossTaskNavigations);
					Set v25 = v26;
					Set v28 = Collections.unmodifiableSet(this.mBlockedCrossTaskNavigations);
					Set v27 = v28;
					Set v30 = Collections.unmodifiableSet(this.mAllowedActivities);
					Set v29 = v30;
					Set v32 = Collections.unmodifiableSet(this.mBlockedActivities);
					Set v31 = v32;
					int v33 = this.mDefaultActivityPolicy;
					VirtualDeviceImpl$1 v35 = new VirtualDeviceImpl$1(VirtualDeviceImpl);
					VirtualDeviceManager$ActivityListener v34 = v35;
					VirtualDeviceImpl$$ExternalSyntheticLambda2 v37 = new VirtualDeviceImpl$$ExternalSyntheticLambda2(VirtualDeviceImpl);
					VirtualDeviceImpl$$ExternalSyntheticLambda3 v39 = new VirtualDeviceImpl$$ExternalSyntheticLambda3(VirtualDeviceImpl);
					String v41 = this.mDeviceProfile;
					boolean v44 = this.mRunningAppsChangedListener.add(p0);
					GenericWindowPolicyController v10 = v11;
					Binder.restoreCallingIdentity(v9);
					Object v46 = VirtualDeviceManagerService.access$000(this.this$0, DisplayManagerInterna.class);
					int v47 = v46.createVirtualDisplay(p1, p2, p3, v10, p4);
					long v48 = Binder.clearCallingIdentity();
					if (v47 != -1) {
						Integer v50 = Integer.valueOf(v47);
						boolean v51 = this.mVirtualDisplayIds.contains(v50);
						if (v51 != 0) {
							Integer v52 = Integer.valueOf(v47);
							boolean v53 = this.mVirtualDisplayIds.add(v52);
							this.mDisplayId = p2;
							this.mWindowPolicyControllers.put(v47, v10);
							this.mInputManagerInternal.setPointerIconVisible(this.mDefaultShowPointerIcon, p2);
							this.mInputManagerInternal.setPointerAcceleration(1065353216, p2);
							this.mInputManagerInternal.setDisplayEligibilityForPointerCapture(p2, 0);
							DisplayInfo v63 = this.mDisplayManagerInternal.getDisplayInfo(p2);
							if ((DisplayInfo.flags & 128) != 128) {
								this.mWindowManager.setDisplayImePolicy(p2, 0);
								Integer v65 = Integer.valueOf(v47);
								boolean v66 = this.mPerDisplayWakelocks.containsKey(v65);
								if (v66 == 0) {
									Object v67 = this.mContext.getSystemService(PowerManage.class);
									StringBuilder v68 = new StringBuilder();
									StringBuilder v70 = v68.append("VirtualDeviceImpl:");
									StringBuilder v71 = v68.append(v47);
									String v72 = v68.toString();
									PowerManager$WakeLock v73 = v67.newWakeLock(10, v72, v47);
									Integer v74 = Integer.valueOf(v47);
									Object v75 = this.mPerDisplayWakelocks.put(v74, v73);
									v73.acquire();
									Binder.restoreCallingIdentity(v48);
									VirtualDeviceManagerInternal v78 = VirtualDeviceManagerService.-$$Nest$fgetmLocalService(this.this$0);
									v78.onVirtualDisplayCreated(v47);
									return v47;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int createVirtualDisplay(VirtualDisplayConfig p1, IVirtualDisplayCallback p2, IVirtualDevice p3, String p4){
	long v9 = Binder.clearCallingIdentity();
	GenericWindowPolicyController v11 = new GenericWindowPolicyController(8192,524288,v12,v27,v29,v31,v33,v35,v36,v39,v41,v43);
	ArraySet v13 = new ArraySet();
	Object v15 = this.mContext.getSystemService(DevicePolicyManage.class);
	Object v16 = this.mContext.getSystemService(UserManage.class);
	List v17 = v16.getAllProfiles();
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	if (v19 == 0) {
		Object v20 = v18.next();
		int v21 = v20.getIdentifier();
		int v22 = v15.getNearbyAppStreamingPolicy(v21);
		if (v22 == 2) {
			if (v22 != 0) {
				if (v22 != 3) {
					Set v23 = this.mParams.getUsersWithMatchingAccounts();
					boolean v24 = v23.contains(v20);
					if (v24 == 0) {
						boolean v25 = v13.add(v20);
						boolean v26 = v18.hasNext();
						if (v26 == 0) {
							ArraySet v12 = v13;
							Set v28 = Collections.unmodifiableSet(this.mAllowedCrossTaskNavigations);
							Set v27 = v28;
							Set v30 = Collections.unmodifiableSet(this.mBlockedCrossTaskNavigations);
							Set v29 = v30;
							Set v32 = Collections.unmodifiableSet(this.mAllowedActivities);
							Set v31 = v32;
							Set v34 = Collections.unmodifiableSet(this.mBlockedActivities);
							Set v33 = v34;
							int v35 = this.mDefaultActivityPolicy;
							VirtualDeviceImpl$1 v37 = new VirtualDeviceImpl$1(VirtualDeviceImpl);
							VirtualDeviceManager$ActivityListener v36 = v37;
							VirtualDeviceImpl$$ExternalSyntheticLambda2 v39 = new VirtualDeviceImpl$$ExternalSyntheticLambda2(VirtualDeviceImpl);
							VirtualDeviceImpl$$ExternalSyntheticLambda3 v41 = new VirtualDeviceImpl$$ExternalSyntheticLambda3(VirtualDeviceImpl);
							String v43 = this.mDeviceProfile;
							boolean v46 = this.mRunningAppsChangedListener.add(p0);
							GenericWindowPolicyController v10 = v11;
							Binder.restoreCallingIdentity(v9);
							Object v48 = VirtualDeviceManagerService.access$000(this.this$0, DisplayManagerInterna.class);
							int v49 = v48.createVirtualDisplay(p1, p2, p3, v10, p4);
							long v50 = Binder.clearCallingIdentity();
							if (v49 != -1) {
								Integer v52 = Integer.valueOf(v49);
								boolean v53 = this.mVirtualDisplayIds.contains(v52);
								if (v53 != 0) {
									Integer v54 = Integer.valueOf(v49);
									boolean v55 = this.mVirtualDisplayIds.add(v54);
									this.mDisplayId = p2;
									this.mWindowPolicyControllers.put(v49, v10);
									this.mInputManagerInternal.setPointerIconVisible(this.mDefaultShowPointerIcon, p2);
									this.mInputManagerInternal.setPointerAcceleration(1065353216, p2);
									this.mInputManagerInternal.setDisplayEligibilityForPointerCapture(p2, 0);
									DisplayInfo v65 = this.mDisplayManagerInternal.getDisplayInfo(p2);
									if ((DisplayInfo.flags & 128) != 128) {
										this.mWindowManager.setDisplayImePolicy(p2, 0);
										Integer v67 = Integer.valueOf(v49);
										boolean v68 = this.mPerDisplayWakelocks.containsKey(v67);
										if (v68 == 0) {
											Object v69 = this.mContext.getSystemService(PowerManage.class);
											StringBuilder v70 = new StringBuilder();
											StringBuilder v72 = v70.append("VirtualDeviceImpl:");
											StringBuilder v73 = v70.append(v49);
											String v74 = v70.toString();
											PowerManager$WakeLock v75 = v69.newWakeLock(10, v74, v49);
											Integer v76 = Integer.valueOf(v49);
											Object v77 = this.mPerDisplayWakelocks.put(v76, v75);
											v75.acquire();
											Binder.restoreCallingIdentity(v50);
											VirtualDeviceManagerInternal v80 = VirtualDeviceManagerService.-$$Nest$fgetmLocalService(this.this$0);
											v80.onVirtualDisplayCreated(v49);
											return v49;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v47 = v46.createVirtualDisplay(p1, p2, p3, v10, p4);\nthis.mVirtualDisplayIds.contains(v50);\nthis.mVirtualDisplayIds.add(v52);\nthis.mWindowPolicyControllers.put(v47, v10);\nreturn v47;', 'Object v15 = this.mContext.getSystemService(DevicePolicyManage.class);\nList v17 = v16.getAllProfiles();\nint v21 = v20.getIdentifier();\nint v22 = v15.getNearbyAppStreamingPolicy(v21);', 'PowerManager$WakeLock v73 = v67.newWakeLock(10, v72, v47);\nv73.acquire();', 'VirtualDeviceImpl$$ExternalSyntheticLambda2 v37 = new VirtualDeviceImpl$$ExternalSyntheticLambda2(VirtualDeviceImpl);\nVirtualDeviceImpl$$ExternalSyntheticLambda3 v39 = new VirtualDeviceImpl$$ExternalSyntheticLambda3(VirtualDeviceImpl);']

The method createVirtualDisplay has the following similar APIs:

- API Name: removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V with Similarity Score: 0.8532871007919312
  - Access Control Level: SYS_OR_SIG and the following code:
Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
boolean v39 = v38.isActiveProfileOwner(v1);
boolean v40 = v38.isActiveDeviceOwner(v1);

- API Name: addVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V with Similarity Score: 0.8284165859222412
  - Access Control Level: NORMAL and the following code:
VcnManagementService$$ExternalSyntheticLambda2 v4 = new VcnManagementService$$ExternalSyntheticLambda2(p0,p1);

