The method createVirtualDevice has the following code snippet:

This is path 1 for the API with depth 2:
public IVirtualDevice createVirtualDevice(IBinder p1, String p2, int p3, VirtualDeviceParams p4, IVirtualDeviceActivityListener p5){
	int v3 = IVirtualDeviceManager$Stub.getCallingUid();
	Context v4 = this.this$0.getContext();
	Binder.restoreCallingIdentity(v7);
	boolean v5 = 1;
	if (v5 == 0) {
		UserHandle v13 = IVirtualDeviceManager$Stub.getCallingUserHandle();
		int v14 = v13.getIdentifier();
		ConcurrentHashMap v15 = this.mAllAssociations;
		Integer v16 = Integer.valueOf(v14);
		Object v17 = v15.get(v16);
		if (v17 == 0) {
			int v18 = v17.size();
			if ( >= v18) {
				Object v19 = v17.get();
				if (this.mUserId != v14) {
					boolean v21 = Objects.equals(this.mPackageName, p1);
					if (v21 == 0) {
						boolean v20 = ;
						if (v20 == 0) {
							if ( >= v18) {
								AssociationInfo v12 = 0;
								if (v12 == 0) {
									Object v22 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);
									SparseArray v23 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
									boolean v24 = v23.contains(p3);
									if (v24 != 0) {
										int v25 = UserHandle.getUserId(v3);
										SparseArray v26 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);
										Object v27 = v26.get(v25);
										VirtualDeviceImpl v28 = new VirtualDeviceImpl(v29,v12,p1,v3,v30,p0,p5,v32,p4);
										Context v29 = this.this$0.getContext();
										VirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v30 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v27,v25);
										VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v32 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v27,v12);
										if (v27 == 0) {
											if (this.mObserverCount != 0) {
												Executor v36 = this.mContext.getMainExecutor();
												if (v36 == 0) {
													CameraManager$CameraManagerGlobal v38 = CameraManager$CameraManagerGlobal.get();
													v38.registerAvailabilityCallback(p0, v36, this.mHasOpenCloseListenerPermission);
													this.mObserverCount = (this.mObserverCount + 1);
													SparseArray v40 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
													int v41 = v12.getId();
													v40.put(v41, v28);
													return v28;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public IVirtualDevice createVirtualDevice(IBinder p1, String p2, int p3, VirtualDeviceParams p4, IVirtualDeviceActivityListener p5){
	int v3 = IVirtualDeviceManager$Stub.getCallingUid();
	Context v4 = this.this$0.getContext();
	Binder.restoreCallingIdentity(v7);
	boolean v5 = 1;
	if (v5 == 0) {
		UserHandle v13 = IVirtualDeviceManager$Stub.getCallingUserHandle();
		int v14 = v13.getIdentifier();
		ConcurrentHashMap v15 = this.mAllAssociations;
		Integer v16 = Integer.valueOf(v14);
		Object v17 = v15.get(v16);
		if (v17 == 0) {
			int v18 = v17.size();
			if ( >= v18) {
				Object v19 = v17.get();
				if (this.mUserId != v14) {
					boolean v21 = Objects.equals(this.mPackageName, p1);
					if (v21 == 0) {
						boolean v20 = ;
						if (v20 == 0) {
							if ( >= v18) {
								AssociationInfo v12 = 0;
								if (v12 == 0) {
									Object v22 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);
									SparseArray v23 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
									boolean v24 = v23.contains(p3);
									if (v24 != 0) {
										int v25 = UserHandle.getUserId(v3);
										SparseArray v26 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);
										Object v27 = v26.get(v25);
										VirtualDeviceImpl v28 = new VirtualDeviceImpl(v29,v12,p1,v3,v30,p0,p5,v32,p4);
										Context v29 = this.this$0.getContext();
										VirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v30 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v27,v25);
										VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v32 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v27,v12);
										if (v27 == 0) {
											SparseArray v41 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
											int v42 = v12.getId();
											v41.put(v42, v28);
											return v28;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = IVirtualDeviceManager$Stub.getCallingUid();\nUserHandle v13 = IVirtualDeviceManager$Stub.getCallingUserHandle();\nAssociationInfo v6 = p0.getAssociationInfo(p2, p3);\nObject v7 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);\nSparseArray v8 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);\nboolean v9 = v8.contains(p3);\nint v10 = UserHandle.getUserId(v3);\nSparseArray v11 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);\nObject v12 = v11.get(v10);\nVirtualDeviceImpl v13 = new VirtualDeviceImpl(v14,v6,p1,v3,v15,p0,p5,v17,p4);\nContext v14 = this.this$0.getContext();\nVirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v15 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v12,v10);\nVirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v17 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v12,v6);\nSparseArray v26 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);\nint v27 = v6.getId();\nv26.put(v27, v13);\nreturn v13;']

The method createVirtualDevice has the following similar APIs:

- API Name: setVolume(Landroid/os/IBinder;FI)V with Similarity Score: 0.7693936824798584
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, "setVolume");
long v5 = Binder.clearCallingIdentity();
TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3);
ITvInputSession v7 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, v6);
v7.setVolume(p2);

- API Name: getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I with Similarity Score: 0.7490313053131104
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = Binder.getCallingUid();
int v4 = UserHandle.getCallingUserId();
List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
boolean v8 = v6.contains(Account.type);
long v10 = IAccountManager$Stub.clearCallingIdentity();
Object v13 = this.mUsers.get(p1);
Map v54 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);
Object v55 = v54.get(p2);
Integer v57 = Integer.valueOf(v53);
int v58 = v31.intValue();
IAccountManager$Stub.restoreCallingIdentity(v10);
return v58;

