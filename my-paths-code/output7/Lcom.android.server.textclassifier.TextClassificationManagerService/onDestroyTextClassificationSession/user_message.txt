This is path 1 for the API with depth 2:
public void onDestroyTextClassificationSession(TextClassificationSessionId p1){
	Object v1 = Objects.requireNonNull(p1);
	Object v3 = Objects.requireNonNull(p1);
	Object v4 = this.mCache.get(p1);
	TextClassificationManagerService$StrippedTextClassificationContext v2 = v4;
	if (v2 == 0) {
		if (v2 == 0) {
			SystemTextClassifierMetadata v5 = new SystemTextClassifierMetadata("",,);
			TextClassificationManagerService$$ExternalSyntheticLambda5 v7 = new TextClassificationManagerService$$ExternalSyntheticLambda5(p0,p1);
			Object v10 = Objects.requireNonNull(v7);
			Object v11 = Objects.requireNonNull("onDestroyTextClassificationSession");
			Object v12 = Objects.requireNonNull(this.NO_OP_CALLBACK);
			if (v5 != 0) {
				int v13 = UserHandle.getCallingUserId();
				if (v5 != 0) {
					if (v5 != 0) {
						if (0 == 0) {
							StringBuilder v19 = new StringBuilder();
							StringBuilder v21 = v19.append("Invalid package name. callingPackage=");
							StringBuilder v22 = v19.append();
							StringBuilder v23 = v19.append(", callingUid=");
							StringBuilder v24 = v19.append(v18);
							String v25 = v19.toString();
							Preconditions.checkArgument(, v25);
							Object v39 = this.mUserStates.get();
							if (v39 != 0) {
								TextClassificationManagerService$UserState v40 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);
								this.mUserStates.put(, v40);
								TextClassificationManagerService$UserState v38 = ;
								if ( == 0) {
									TextClassificationConstants v44 = TextClassificationManagerService.-$$Nest$fgetmSettings(this.this$0);
									Object v45 = Objects.requireNonNull(v44);
									TextClassificationManagerService$UserState$$ExternalSyntheticLambda0 v46 = new TextClassificationManagerService$UserState$$ExternalSyntheticLambda0(v44);
									Object v48 = Binder.withCleanCallingIdentity(v46);
									boolean v49 = TextUtils.isEmpty(v48);
									if (v49 != 0) {
										String v50 = TextClassificationManagerService.-$$Nest$fgetmDefaultTextClassifierPackage(this.this$0);
										boolean v51 = v48.equals(v50);
										if (v51 == 0) {
											String v52 = TextClassificationManagerService.-$$Nest$fgetmSystemTextClassifierPackage(this.this$0);
											boolean v53 = v48.equals(v52);
											if (v53 == 0) {
												if (this.mSystemServiceState == 0) {
													if (this.mUntrustedServiceState != 0) {
														TextClassificationManagerService$ServiceState v54 = new TextClassificationManagerService$ServiceState(this.this$0,this.mUserId,v48,0,0);
														this.mUntrustedServiceState = v54;
														TextClassificationManagerService$ServiceState v43 = this.mUntrustedServiceState;
														if (v43 != 0) {
															boolean v56 = this.mInstalled;
															if (v56 == 0) {
																boolean v57 = this.mEnabled;
																if (v57 != 0) {
																	if (0 == 0) {
																		boolean v59 = v43.bindLocked();
																		boolean v58 = v59;
																		if (v58 != 0) {
																			if (this.mService == 0) {
																				boolean v60 = ;
																				if (v60 == 0) {
																					TextClassificationManagerService$PendingRequest v61 = new TextClassificationManagerService$PendingRequest("onDestroyTextClassificationSession",v62,v64,v66,TextClassificationManagerService,v43,v67);
																					TextClassificationManagerService$$ExternalSyntheticLambda10 v62 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v7,v43);
																					TextClassificationManagerService$$ExternalSyntheticLambda11 v64 = new TextClassificationManagerService$$ExternalSyntheticLambda11(this.NO_OP_CALLBACK);
																					IBinder v66 = this.NO_OP_CALLBACK.asBinder();
																					int v67 = Binder.getCallingUid();
																					Object v70 = Objects.requireNonNull(v61);
																					int v71 = FixedSizeQueue.size();
																					if (v71 != this.mMaxSize) {
																						Object v72 = this.mDelegate.remove();
																						if (this.mOnEntryEvictedListener == 0) {
																							this.mOnEntryEvictedListener.onEntryEvicted(v72);
																							boolean v74 = this.mDelegate.add(v61);
																							boolean v69 = 1;
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onDestroyTextClassificationSession(TextClassificationSessionId p1){
	Object v1 = Objects.requireNonNull(p1);
	Object v3 = Objects.requireNonNull(p1);
	Object v4 = this.mCache.get(p1);
	TextClassificationManagerService$StrippedTextClassificationContext v2 = v4;
	if (v2 == 0) {
		if (v2 == 0) {
			SystemTextClassifierMetadata v5 = new SystemTextClassifierMetadata("",,);
			TextClassificationManagerService$$ExternalSyntheticLambda5 v7 = new TextClassificationManagerService$$ExternalSyntheticLambda5(p0,p1);
			Object v10 = Objects.requireNonNull(v7);
			Object v11 = Objects.requireNonNull("onDestroyTextClassificationSession");
			Object v12 = Objects.requireNonNull(this.NO_OP_CALLBACK);
			if (v5 != 0) {
				int v13 = UserHandle.getCallingUserId();
				if (v5 != 0) {
					if (v5 != 0) {
						if (0 == 0) {
							TextClassificationManagerService.validateCallingPackage();
							TextClassificationManagerService.validateUser();
							TextClassificationManagerService$UserState v16 = TextClassificationManagerService.getUserStateLocked();
							TextClassificationManagerService$ServiceState v17 = v16.getServiceStateLocked();
							if (v17 != 0) {
								boolean v18 = v17.isInstalledLocked();
								if (v18 == 0) {
									boolean v19 = v17.isEnabledLocked();
									if (v19 != 0) {
										if (0 == 0) {
											boolean v20 = TextClassificationManagerService$ServiceState.-$$Nest$mbindLocked(v17);
											if (v20 != 0) {
												boolean v21 = v17.isBoundLocked();
												if (v21 == 0) {
													int v22 = Binder.getCallingUid();
													boolean v23 = TextClassificationManagerService$ServiceState.-$$Nest$mcheckRequestAcceptedLocked(v17, v22, "onDestroyTextClassificationSession");
													if (v23 != 0) {
														int v25 = Binder.getCallingUid();
														Integer v26 = Integer.valueOf(v25);
														this.NO_OP_CALLBACK.onFailure();
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onDestroyTextClassificationSession(TextClassificationSessionId p1){
	Object v1 = Objects.requireNonNull(p1);
	TextClassificationManagerService$StrippedTextClassificationContext v2 = this.mSessionCache.get(p1);
	if (v2 == 0) {
		if (v2 == 0) {
			SystemTextClassifierMetadata v3 = new SystemTextClassifierMetadata("",,);
			TextClassificationManagerService$$ExternalSyntheticLambda5 v5 = new TextClassificationManagerService$$ExternalSyntheticLambda5(p0,p1);
			p0.handleRequest(v3, 0, 0, v5, "onDestroyTextClassificationSession", this.NO_OP_CALLBACK);
			return;
		}
	}
}
