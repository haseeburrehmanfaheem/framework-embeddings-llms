The method onTextClassifierEvent has the following code snippet:

This is path 1 for the API with depth 2:
public void onTextClassifierEvent(TextClassificationSessionId p1, TextClassifierEvent p2){
	Object v1 = Objects.requireNonNull(p2);
	TextClassificationContext v2 = p2.getEventContext();
	if (v2 == 0) {
		SystemTextClassifierMetadata v3 = this.mSystemTcMetadata;
		TextClassificationManagerService$$ExternalSyntheticLambda4 v4 = new TextClassificationManagerService$$ExternalSyntheticLambda4(p1,p2);
		Object v7 = Objects.requireNonNull(v4);
		Object v8 = Objects.requireNonNull("onTextClassifierEvent");
		Object v9 = Objects.requireNonNull(this.NO_OP_CALLBACK);
		if ( != 0) {
			int v10 = UserHandle.getCallingUserId();
			if ( != 0) {
				if ( != 0) {
					if (1 == 0) {
						StringBuilder v16 = new StringBuilder();
						StringBuilder v18 = v16.append("Invalid package name. callingPackage=");
						StringBuilder v19 = v16.append();
						StringBuilder v20 = v16.append(", callingUid=");
						StringBuilder v21 = v16.append(v15);
						String v22 = v16.toString();
						Preconditions.checkArgument(, v22);
						Object v36 = this.mUserStates.get();
						if (v36 != 0) {
							TextClassificationManagerService$UserState v37 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);
							this.mUserStates.put(, v37);
							TextClassificationManagerService$UserState v35 = ;
							if ( == 0) {
								TextClassificationConstants v41 = TextClassificationManagerService.-$$Nest$fgetmSettings(this.this$0);
								Object v42 = Objects.requireNonNull(v41);
								TextClassificationManagerService$UserState$$ExternalSyntheticLambda0 v43 = new TextClassificationManagerService$UserState$$ExternalSyntheticLambda0(v41);
								Object v45 = Binder.withCleanCallingIdentity(v43);
								boolean v46 = TextUtils.isEmpty(v45);
								if (v46 != 0) {
									String v47 = TextClassificationManagerService.-$$Nest$fgetmDefaultTextClassifierPackage(this.this$0);
									boolean v48 = v45.equals(v47);
									if (v48 == 0) {
										String v49 = TextClassificationManagerService.-$$Nest$fgetmSystemTextClassifierPackage(this.this$0);
										boolean v50 = v45.equals(v49);
										if (v50 == 0) {
											if (this.mSystemServiceState == 0) {
												if (this.mUntrustedServiceState != 0) {
													TextClassificationManagerService$ServiceState v51 = new TextClassificationManagerService$ServiceState(this.this$0,this.mUserId,v45,0,0);
													this.mUntrustedServiceState = v51;
													TextClassificationManagerService$ServiceState v40 = this.mUntrustedServiceState;
													if (v40 != 0) {
														boolean v53 = this.mInstalled;
														if (v53 == 0) {
															boolean v54 = this.mEnabled;
															if (v54 != 0) {
																if (1 == 0) {
																	boolean v56 = v40.bindLocked();
																	boolean v55 = v56;
																	if (v55 != 0) {
																		if (this.mService == 0) {
																			boolean v57 = ;
																			if (v57 == 0) {
																				TextClassificationManagerService$PendingRequest v58 = new TextClassificationManagerService$PendingRequest("onTextClassifierEvent",v59,v61,v63,TextClassificationManagerService,v40,v64);
																				TextClassificationManagerService$$ExternalSyntheticLambda10 v59 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v4,v40);
																				TextClassificationManagerService$$ExternalSyntheticLambda11 v61 = new TextClassificationManagerService$$ExternalSyntheticLambda11(this.NO_OP_CALLBACK);
																				IBinder v63 = this.NO_OP_CALLBACK.asBinder();
																				int v64 = Binder.getCallingUid();
																				Object v67 = Objects.requireNonNull(v58);
																				int v68 = FixedSizeQueue.size();
																				if (v68 != this.mMaxSize) {
																					Object v69 = this.mDelegate.remove();
																					if (this.mOnEntryEvictedListener == 0) {
																						this.mOnEntryEvictedListener.onEntryEvicted(v69);
																						boolean v71 = this.mDelegate.add(v58);
																						boolean v66 = 1;
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void onTextClassifierEvent(TextClassificationSessionId p1, TextClassifierEvent p2){
	Object v1 = Objects.requireNonNull(p2);
	TextClassificationContext v2 = p2.getEventContext();
	if (v2 == 0) {
		SystemTextClassifierMetadata v3 = this.mSystemTcMetadata;
		TextClassificationManagerService$$ExternalSyntheticLambda4 v4 = new TextClassificationManagerService$$ExternalSyntheticLambda4(p1,p2);
		Object v7 = Objects.requireNonNull(v4);
		Object v8 = Objects.requireNonNull("onTextClassifierEvent");
		Object v9 = Objects.requireNonNull(this.NO_OP_CALLBACK);
		if ( != 0) {
			int v10 = UserHandle.getCallingUserId();
			if ( != 0) {
				if ( != 0) {
					if (1 == 0) {
						StringBuilder v16 = new StringBuilder();
						StringBuilder v18 = v16.append("Invalid package name. callingPackage=");
						StringBuilder v19 = v16.append();
						StringBuilder v20 = v16.append(", callingUid=");
						StringBuilder v21 = v16.append(v15);
						String v22 = v16.toString();
						Preconditions.checkArgument(, v22);
						Object v36 = this.mUserStates.get();
						if (v36 != 0) {
							TextClassificationManagerService$UserState v37 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);
							this.mUserStates.put(, v37);
							TextClassificationManagerService$UserState v35 = ;
							if ( == 0) {
								TextClassificationConstants v41 = TextClassificationManagerService.-$$Nest$fgetmSettings(this.this$0);
								Object v42 = Objects.requireNonNull(v41);
								TextClassificationManagerService$UserState$$ExternalSyntheticLambda0 v43 = new TextClassificationManagerService$UserState$$ExternalSyntheticLambda0(v41);
								Object v45 = Binder.withCleanCallingIdentity(v43);
								boolean v46 = TextUtils.isEmpty(v45);
								if (v46 != 0) {
									String v47 = TextClassificationManagerService.-$$Nest$fgetmDefaultTextClassifierPackage(this.this$0);
									boolean v48 = v45.equals(v47);
									if (v48 == 0) {
										String v49 = TextClassificationManagerService.-$$Nest$fgetmSystemTextClassifierPackage(this.this$0);
										boolean v50 = v45.equals(v49);
										if (v50 == 0) {
											if (this.mSystemServiceState == 0) {
												if (this.mUntrustedServiceState != 0) {
													TextClassificationManagerService$ServiceState v51 = new TextClassificationManagerService$ServiceState(this.this$0,this.mUserId,v45,0,0);
													this.mUntrustedServiceState = v51;
													TextClassificationManagerService$ServiceState v40 = this.mUntrustedServiceState;
													if (v40 != 0) {
														boolean v53 = this.mInstalled;
														if (v53 == 0) {
															boolean v54 = this.mEnabled;
															if (v54 != 0) {
																if (1 == 0) {
																	boolean v56 = v40.bindLocked();
																	boolean v55 = v56;
																	if (v55 != 0) {
																		if (this.mService == 0) {
																			boolean v57 = ;
																			if (v57 == 0) {
																				TextClassificationManagerService$PendingRequest v58 = new TextClassificationManagerService$PendingRequest("onTextClassifierEvent",v59,v61,v63,TextClassificationManagerService,v40,v64);
																				TextClassificationManagerService$$ExternalSyntheticLambda10 v59 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v4,v40);
																				TextClassificationManagerService$$ExternalSyntheticLambda11 v61 = new TextClassificationManagerService$$ExternalSyntheticLambda11(this.NO_OP_CALLBACK);
																				IBinder v63 = this.NO_OP_CALLBACK.asBinder();
																				int v64 = Binder.getCallingUid();
																				Object v67 = Objects.requireNonNull(v58);
																				int v68 = FixedSizeQueue.size();
																				if (v68 != this.mMaxSize) {
																					Object v69 = this.mDelegate.remove();
																					if (this.mOnEntryEvictedListener == 0) {
																						this.mOnEntryEvictedListener.onEntryEvicted(v69);
																						boolean v71 = this.mDelegate.add(v58);
																						boolean v66 = 1;
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p2);\nTextClassificationContext v2 = p2.getEventContext();\nSystemTextClassifierMetadata v3 = this.mSystemTcMetadata;\nTextClassificationManagerService$$ExternalSyntheticLambda4 v4 = new TextClassificationManagerService$$ExternalSyntheticLambda4(p1,p2);', 'int v10 = UserHandle.getCallingUserId();\nif ( != 0) {\nTextClassificationManagerService$UserState v37 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);\nthis.mUserStates.put(, v37);', 'TextClassificationConstants v41 = TextClassificationManagerService.-$$Nest$fgetmSettings(this.this$0);\nObject v42 = Objects.requireNonNull(v41);\nTextClassificationManagerService$UserState$$ExternalSyntheticLambda0 v43 = new TextClassificationManagerService$UserState$$ExternalSyntheticLambda0(v41);', 'TextClassificationManagerService$PendingRequest v58 = new TextClassificationManagerService$PendingRequest("onTextClassifierEvent",v59,v61,v63,TextClassificationManagerService,v40,v64);\nTextClassificationManagerService$$ExternalSyntheticLambda10 v59 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v4,v40);', 'TextClassificationContext v2 = p2.getEventContext();\nif (v2 == 0) {\nSystemTextClassifierMetadata v3 = v2.getSystemTextClassifierMetadata();\nTextClassificationManagerService$$ExternalSyntheticLambda4 v4 = new TextClassificationManagerService$$ExternalSyntheticLambda4(p1,p2);', 'int v19 = Binder.getCallingUid();\nboolean v20 = TextClassificationManagerService$ServiceState.-$$Nest$mcheckRequestAcceptedLocked(v14, v19, "onTextClassifierEvent");']

The method onTextClassifierEvent has the following similar APIs:

- API Name: onClassifyText(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextClassification$Request;Landroid/service/textclassifier/ITextClassifierCallback;)V with Similarity Score: 0.927358865737915
  - Access Control Level: SYS_OR_SIG and the following code:
Object v1 = Objects.requireNonNull(p2);
SystemTextClassifierMetadata v4 = this.mSystemTcMetadata;
TextClassificationManagerService$$ExternalSyntheticLambda7 v5 = new TextClassificationManagerService$$ExternalSyntheticLambda7(p1,p2,p3);

- API Name: onClassifyText(Landroid/view/textclassifier/TextClassificationSessionId;Landroid/view/textclassifier/TextClassification$Request;Landroid/service/textclassifier/ITextClassifierCallback;)V with Similarity Score: 0.9190175533294678
  - Access Control Level: SYS_OR_SIG and the following code:
int v20 = Binder.getCallingUid();
boolean v21 = TextClassificationManagerService$ServiceState.-$$Nest$mcheckRequestAcceptedLocked(v15, v20, "onClassifyText");

