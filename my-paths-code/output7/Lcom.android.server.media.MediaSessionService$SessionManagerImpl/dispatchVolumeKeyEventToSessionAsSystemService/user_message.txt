This is path 1 for the API with depth 2:
public void dispatchVolumeKeyEventToSessionAsSystemService(String p1, String p2, KeyEvent p3, MediaSession$Token p4){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	Object v4 = this.mLock;
	int v7 = p2.getUid();
	UserHandle v8 = UserHandle.getUserHandleForUid(v7);
	int v9 = v8.getIdentifier();
	MediaSessionService$FullUserRecord v10 = MediaSessionService.getFullUserRecordLocked(v9);
	if (v10 == 0) {
		MediaSessionStack v11 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v10);
		MediaSessionRecord v12 = v11.getMediaSessionRecord(p2);
		MediaSessionRecord v6 = v12;
		MediaSessionRecord v5 = v6;
		if (v5 != 0) {
			int v31 = p3.getAction();
			if (v31 == 0) {
				int v32 = p3.getKeyCode();
				if (v32 == 24) {
					if (v32 == 25) {
						if (v32 == 164) {
							if (this.mPlaybackState != 0) {
								boolean v35 = this.mPlaybackState.isActive();
								if (v35 != 1) {
									boolean v34 = ;
									if (v34 != 0) {
										if (((this.mFlags & 65536) < 0) == 0) {
											boolean v36 = ;
											if (v36 == 0) {
												if (this.mVolumeType != 1) {
													if (this.mVolumeControlType != 0) {
														if ( == 101) {
															if ( == -100) {
																if ( != 100) {
																	if (this.DEBUG == 0) {
																		MediaSessionService v38 = MediaSessionRecord.-$$Nest$fgetmService(this.this$0);
																		int v39 = this.this$0.getUid();
																		String v40 = this.this$0.getPackageName();
																		v38.tempAllowlistTargetPkgIfPossible(v39, v40, p3, p4, p1, "MediaSessionRecord:adjustVolume");
																		if (p5 == 0) {
																			Context v42 = MediaSessionRecord.-$$Nest$fgetmContext(this.this$0);
																			String v43 = v42.getPackageName();
																			int v44 = Process.myPid();
																			this.mCb.onAdjustVolume(v43, v44, 1000, p6);
																			if (this.mOptimisticVolume >= 0) {
																				this.mOptimisticVolume = ( + );
																				int v46 = Math.min(( + ), this.mMaxVolume);
																				int v47 = Math.max(0, v46);
																				this.mOptimisticVolume = v47;
																				this.mHandler.removeCallbacks(this.mClearOptimisticVolumeRunnable);
																				boolean v49 = this.mHandler.postDelayed(this.mClearOptimisticVolumeRunnable, 1000);
																				if ( == this.mOptimisticVolume) {
																					if (this.mDestroyed == 0) {
																						MediaController$PlaybackInfo v51 = MediaSessionRecord.getVolumeAttributes();
																						Iterator v52 = this.mControllerCallbackHolders.iterator();
																						boolean v53 = v52.hasNext();
																						if (v53 == 0) {
																							Object v54 = v52.next();
																							ISessionControllerCallback v55 = MediaSessionRecord$ISessionControllerCallbackHolder.-$$Nest$fgetmCallback(v54);
																							v55.onVolumeInfoChanged(v51);
																							if ( != 0) {
																								ArrayList v57 = new ArrayList();
																								boolean v59 = .add(v54);
																								MediaSessionRecord.logCallbackException("Removing dead callback in pushVolumeUpdate", v54, caughtException);
																								boolean v61 = v52.hasNext();
																								if (v61 == 0) {
																									if ( == 0) {
																										boolean v62 = this.mControllerCallbackHolders.removeAll();
																										if (this.DEBUG == 0) {
																											boolean v64 = p0.isActive();
																											if (v64 != 0) {
																												int v65 = this.mRemoteVolumeControllers.beginBroadcast();
																												MediaSession$Token v66 = p0.getSessionToken();
																												if ( < 0) {
																													IInterface v67 = this.mRemoteVolumeControllers.getBroadcastItem();
																													v67.onVolumeChanged(v66, );
																													if ( < 0) {
																														this.mRemoteVolumeControllers.finishBroadcast();
																														Binder.restoreCallingIdentity(v3);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void dispatchVolumeKeyEventToSessionAsSystemService(String p1, String p2, KeyEvent p3, MediaSession$Token p4){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	Object v4 = this.mLock;
	MediaSessionRecord v6 = this.this$0.getMediaSessionRecordLocked(p4);
	MediaSessionRecord v5 = v6;
	if (v5 != 0) {
		int v25 = p3.getAction();
		if (v25 == 0) {
			int v26 = p3.getKeyCode();
			if (v26 == 24) {
				if (v26 == 25) {
					if (v26 == 164) {
						boolean v28 = MediaSessionRecord.checkPlaybackActiveState(1);
						if (v28 != 0) {
							boolean v29 = MediaSessionRecord.isSystemPriority();
							if (v29 == 0) {
								if (this.mVolumeType != 1) {
									if (this.mVolumeControlType != 0) {
										if ( == 101) {
											if ( == -100) {
												if ( != 100) {
													if (this.DEBUG == 0) {
														this.mSessionCb.adjustVolume(p1, v1, v2, 1, );
														if (this.mOptimisticVolume >= 0) {
															this.mOptimisticVolume = ( + );
															int v31 = Math.min(( + ), this.mMaxVolume);
															int v32 = Math.max(0, v31);
															this.mOptimisticVolume = v32;
															this.mHandler.removeCallbacks(this.mClearOptimisticVolumeRunnable);
															boolean v34 = this.mHandler.postDelayed(this.mClearOptimisticVolumeRunnable, 1000);
															if ( == this.mOptimisticVolume) {
																MediaSessionRecord.pushVolumeUpdate();
																if (this.DEBUG == 0) {
																	this.mService.notifyRemoteVolumeChanged(, MediaSessionRecord);
																	Binder.restoreCallingIdentity(v3);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void dispatchVolumeKeyEventToSessionAsSystemService(String p1, String p2, KeyEvent p3, MediaSession$Token p4){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	Object v4 = MediaSessionService.-$$Nest$fgetmLock(this.this$0);
	MediaSessionRecord v5 = MediaSessionService.-$$Nest$mgetMediaSessionRecordLocked(this.this$0, p4);
	if (v5 != 0) {
		int v24 = p3.getAction();
		if (v24 == 0) {
			int v25 = p3.getKeyCode();
			if (v25 == 24) {
				if (v25 == 25) {
					if (v25 == 164) {
						v5.adjustVolume(p1, p2, v1, v2, 1, , 1, 0);
						Binder.restoreCallingIdentity(v3);
						return;
					}
				}
			}
		}
	}
}
