The method dispatchMediaKeyEvent has the following code snippet:

This is path 1 for the API with depth 2:
public void dispatchMediaKeyEvent(String p1, boolean p2, KeyEvent p3, boolean p4){
	if (v22 != 0) {
		MediaSessionService$FullUserRecord v23 = this.mCurrentFullUserRecord;
		IOnMediaKeyListener v24 = this.mOnMediaKeyListener;
		if (v24 == 0) {
			MediaSessionService$FullUserRecord v26 = this.mCurrentFullUserRecord;
			MediaSessionRecordImpl v28 = v26.getMediaButtonSessionLocked();
			MediaSessionRecordImpl v27 = v28;
			if (v27 instanceof MediaSession2Record == 0) {
				MediaKeyDispatcher v29 = this.mCustomMediaKeyDispatcher;
				if (v29 == 0) {
					MediaKeyDispatcher v30 = this.mCustomMediaKeyDispatcher;
					MediaSession$Token v31 = v30.getMediaSession(p3, v4, p2);
					if (v31 == 0) {
						MediaSessionRecord v33 = this.this$0.getMediaSessionRecordLocked(v31);
						MediaSessionRecord v32 = v33;
						if ( != 0) {
							MediaKeyDispatcher v34 = this.mCustomMediaKeyDispatcher;
							PendingIntent v35 = v34.getMediaButtonReceiver(p3, v4, p2);
							if (v35 == 0) {
								Context v36 = this.mContext;
								MediaSessionService$FullUserRecord v37 = this.mCurrentFullUserRecord;
								int v38 = this.mFullUserId;
								if (v35 != 0) {
									int v40 = MediaButtonReceiverHolder.getComponentType(v35);
									ComponentName v41 = MediaButtonReceiverHolder.getComponentName(v35, v40);
									if (v41 == 0) {
										MediaButtonReceiverHolder v48 = new MediaButtonReceiverHolder(v38,v35,"");
										MediaButtonReceiverHolder v39 = v48;
										if ( != 0) {
											if ( != 0) {
												if ( == 0) {
													if ( == 0) {
														if (p4 == 0) {
															if (p2 == 0) {
																Context v50 = this.mContext;
																if (p4 == 0) {
																	MediaSessionService$MessageHandler v51 = this.mHandler;
																	long v52 = this.sMediaButtonReceiverFgsAllowlistDurationMs;
																	Intent v54 = new Intent("android.intent.action.MEDIA_BUTTON");
																	Intent v56 = v54.addFlags(268435456);
																	Intent v57 = v54.putExtra("android.intent.extra.KEY_EVENT", p5);
																	Intent v58 = v54.putExtra("android.intent.extra.PACKAGE_NAME", );
																	BroadcastOptions v59 = BroadcastOptions.makeBasic();
																	v59.setTemporaryAppAllowlist(v52, 0, 313, "");
																	v59.setBackgroundActivityStartsAllowed(1);
																	if (this.mPendingIntent == 0) {
																		if (this.mComponentName == 0) {
																			Intent v72 = v54.setComponent(this.mComponentName);
																			UserHandle v73 = UserHandle.of(this.mUserId);
																			if (this.mComponentType == 2) {
																				if (this.mComponentType == 3) {
																					Bundle v74 = v59.toBundle();
																					v50.sendBroadcastAsUser(v54, v73, 0, v74);
																					boolean v53 = 0;
																					if (v53 == 0) {
																						Binder.restoreCallingIdentity(v5);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void dispatchMediaKeyEvent(String p1, boolean p2, KeyEvent p3, boolean p4){
	if (v22 != 0) {
		MediaSessionService$FullUserRecord v23 = this.mCurrentFullUserRecord;
		IOnMediaKeyListener v24 = this.mOnMediaKeyListener;
		if (v24 == 0) {
			MediaSessionService$FullUserRecord v26 = this.mCurrentFullUserRecord;
			MediaSessionRecordImpl v28 = v26.getMediaButtonSessionLocked();
			MediaSessionRecordImpl v27 = v28;
			if (v27 instanceof MediaSession2Record == 0) {
				MediaKeyDispatcher v29 = this.mCustomMediaKeyDispatcher;
				if (v29 == 0) {
					MediaKeyDispatcher v30 = this.mCustomMediaKeyDispatcher;
					MediaSession$Token v31 = v30.getMediaSession(p3, v4, p2);
					if (v31 == 0) {
						MediaSessionRecord v33 = this.this$0.getMediaSessionRecordLocked(v31);
						MediaSessionRecord v32 = v33;
						if ( != 0) {
							MediaKeyDispatcher v34 = this.mCustomMediaKeyDispatcher;
							PendingIntent v35 = v34.getMediaButtonReceiver(p3, v4, p2);
							if (v35 == 0) {
								Context v36 = this.mContext;
								MediaSessionService$FullUserRecord v37 = this.mCurrentFullUserRecord;
								int v38 = this.mFullUserId;
								if (v35 != 0) {
									int v40 = MediaButtonReceiverHolder.getComponentType(v35);
									ComponentName v41 = MediaButtonReceiverHolder.getComponentName(v35, v40);
									if (v41 == 0) {
										String v42 = v41.getPackageName();
										boolean v43 = TextUtils.equals(v42, "");
										if (v43 == 0) {
											MediaButtonReceiverHolder v44 = new MediaButtonReceiverHolder(v38,v35,v41,v40);
											MediaButtonReceiverHolder v39 = v44;
											if ( != 0) {
												if ( != 0) {
													if ( == 0) {
														if ( == 0) {
															if (p4 == 0) {
																if (p2 == 0) {
																	Context v46 = this.mContext;
																	if (p4 == 0) {
																		MediaSessionService$MessageHandler v47 = this.mHandler;
																		long v48 = this.sMediaButtonReceiverFgsAllowlistDurationMs;
																		Intent v50 = new Intent("android.intent.action.MEDIA_BUTTON");
																		Intent v52 = v50.addFlags(268435456);
																		Intent v53 = v50.putExtra("android.intent.extra.KEY_EVENT", p5);
																		Intent v54 = v50.putExtra("android.intent.extra.PACKAGE_NAME", );
																		BroadcastOptions v55 = BroadcastOptions.makeBasic();
																		v55.setTemporaryAppAllowlist(v48, 0, 313, "");
																		v55.setBackgroundActivityStartsAllowed(1);
																		if (this.mPendingIntent == 0) {
																			if (this.mComponentName == 0) {
																				Intent v68 = v50.setComponent(this.mComponentName);
																				UserHandle v69 = UserHandle.of(this.mUserId);
																				if (this.mComponentType == 2) {
																					if (this.mComponentType == 3) {
																						Bundle v70 = v55.toBundle();
																						v46.sendBroadcastAsUser(v50, v69, 0, v70);
																						boolean v49 = 0;
																						if (v49 == 0) {
																							Binder.restoreCallingIdentity(v5);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void dispatchMediaKeyEvent(String p1, boolean p2, KeyEvent p3, boolean p4){
	if (v22 != 0) {
		MediaSessionService$FullUserRecord v23 = this.mCurrentFullUserRecord;
		IOnMediaKeyListener v24 = this.mOnMediaKeyListener;
		if (v24 == 0) {
			boolean v27 = p5.isCanceled();
			if (v27 == 0) {
				MediaKeyDispatcher v28 = MediaSessionService.-$$Nest$fgetmCustomMediaKeyDispatcher(MediaSessionService$SessionManagerImpl.this$0);
				if (v28 == 0) {
					MediaKeyDispatcher v29 = MediaSessionService.-$$Nest$fgetmCustomMediaKeyDispatcher(MediaSessionService$SessionManagerImpl.this$0);
					Map v30 = v29.getOverriddenKeyEvents();
					if (v30 == 0) {
						MediaKeyDispatcher v31 = MediaSessionService.-$$Nest$fgetmCustomMediaKeyDispatcher(MediaSessionService$SessionManagerImpl.this$0);
						Map v32 = v31.getOverriddenKeyEvents();
						int v33 = p5.getKeyCode();
						Integer v34 = Integer.valueOf(v33);
						Object v35 = v32.get(v34);
						int v36 = v35.intValue();
						MediaSessionService$SessionManagerImpl$KeyEventHandler.cancelTrackingIfNeeded(p1, p2, p3, p4, p5, p6, 0, 0, 0, );
						boolean v38 = MediaSessionService$SessionManagerImpl$KeyEventHandler.needTracking(p5, );
						if (v38 != 0) {
							boolean v39 = MediaSessionService$SessionManagerImpl$KeyEventHandler.isFirstDownKeyEvent(p5);
							if (v39 == 0) {
								boolean v40 = MediaSessionService$SessionManagerImpl$KeyEventHandler.isFirstLongPressKeyEvent(p5);
								if (v40 == 0) {
									this.mIsLongPressing = 1;
									if (this.mIsLongPressing == 0) {
										int v41 = p5.getAction();
										if (v41 != 1) {
											this.mTrackingFirstDownKeyEvent = 0;
											boolean v42 = MediaSessionService$SessionManagerImpl$KeyEventHandler.shouldTrackForMultipleTapsLocked();
											if (v42 == 0) {
												if (this.mMultiTapCount != 0) {
													if (this.mMultiTapCount != 1) {
														if (this.mMultiTapCount != 2) {
															MediaSessionService$MessageHandler v43 = MediaSessionService.-$$Nest$fgetmHandler(MediaSessionService$SessionManagerImpl.this$0);
															v43.removeCallbacks(this.mMultiTapTimeoutRunnable);
															MediaSessionService$SessionManagerImpl$KeyEventHandler.onTripleTap(p5);
															Binder.restoreCallingIdentity(v5);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['IOnMediaKeyListener v24 = this.mOnMediaKeyListener;\nMediaSessionRecordImpl v28 = v26.getMediaButtonSessionLocked();\nif (v27 instanceof MediaSession2Record == 0) {\nMediaKeyDispatcher v29 = this.mCustomMediaKeyDispatcher;\nMediaSession$Token v31 = v30.getMediaSession(p3, v4, p2);\nPendingIntent v35 = v34.getMediaButtonReceiver(p3, v4, p2);\nMediaButtonReceiverHolder v48 = new MediaButtonReceiverHolder(v38,v35,"" );', 'Context v36 = this.mContext;\nint v40 = MediaButtonReceiverHolder.getComponentType(v35);\nComponentName v41 = MediaButtonReceiverHolder.getComponentName(v35, v40);\nIntent v54 = new Intent("android.intent.action.MEDIA_BUTTON");\nv50.sendBroadcastAsUser(v54, v73, 0, v74);', 'MediaSessionService$FullUserRecord v26 = MediaSessionService.-$$Nest$fgetmCurrentFullUserRecord(this.this$0);\nMediaSessionRecordImpl v27 = MediaSessionService$FullUserRecord.-$$Nest$mgetMediaButtonSessionLocked(v26);\nMediaKeyDispatcher v28 = MediaSessionService.-$$Nest$fgetmCustomMediaKeyDispatcher(this.this$0);', 'p0.dispatchMediaKeyEventLocked(p1, v3, v4, p2, p3, p4);']

The method dispatchMediaKeyEvent has the following similar APIs:

- API Name: addOnMediaKeyEventDispatchedListener(Landroid/media/session/IOnMediaKeyEventDispatchedListener;)V with Similarity Score: 0.8640874624252319
  - Access Control Level: NONE and the following code:
v8.addOnMediaKeyEventDispatchedListenerLocked(p1, v2);

- API Name: dispatchMediaKeyEventToSessionAsSystemService(Ljava/lang/String;Landroid/view/KeyEvent;Landroid/media/session/MediaSession$Token;)Z with Similarity Score: 0.8198084235191345
  - Access Control Level: SYS_OR_SIG and the following code:
MediaSessionRecord v5 = MediaSessionService.-$$Nest$mgetMediaSessionRecordLocked(this.this$0, p3);

