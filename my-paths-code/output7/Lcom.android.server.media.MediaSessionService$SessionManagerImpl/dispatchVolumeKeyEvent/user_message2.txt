The method dispatchVolumeKeyEvent has the following code snippet:

This is path 1 for the API with depth 2:
public void dispatchVolumeKeyEvent(String p1, String p2, boolean p3, KeyEvent p4, int p5, boolean p6){
	if (p4 == 0) {
		int v1 = p4.getKeyCode();
		if (v1 == 24) {
			int v2 = p4.getKeyCode();
			if (v2 == 25) {
				int v3 = p4.getKeyCode();
				if (v3 == 164) {
					int v4 = Binder.getCallingPid();
					int v5 = Binder.getCallingUid();
					long v6 = Binder.clearCallingIdentity();
					Object v27 = this.mLock;
					if (this.mGlobalPrioritySession == 0) {
						boolean v30 = this.mGlobalPrioritySession.isActive();
						if (v30 == 0) {
							boolean v29 = ;
							boolean v28 = v29;
							if (v28 == 0) {
								int v32 = p4.getAction();
								if (v32 != 0) {
									int v33 = p4.getAction();
									if (v33 != 1) {
										int v34 = p4.getKeyCode();
										if (v34 == 24) {
											if (v34 == 25) {
												if (v34 == 164) {
													if ( != 0) {
														if ( == 0) {
															if (p6 != 0) {
																if ( == 0) {
																	if ( == 0) {
																		if ( == 0) {
																			boolean v36 = MediaSessionService.-$$Nest$misGlobalPriorityActiveLocked(this.this$0);
																			if (v36 == 0) {
																				MediaSessionRecord v37 = MediaSessionService.-$$Nest$fgetmGlobalPrioritySession(this.this$0);
																				boolean v38 = MediaSessionService$SessionManagerImpl.isValidLocalStreamType(p7);
																				if (v38 == 0) {
																					boolean v39 = AudioSystem.isStreamActive(p7, 0);
																					if (v39 == 0) {
																						if ( == 0) {
																							if ( == 0) {
																								if (p8 == 0) {
																									boolean v54 = AudioSystem.isStreamActive(3, 0);
																									if (v54 != 0) {
																										Binder.restoreCallingIdentity(v6);
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void dispatchVolumeKeyEvent(String p1, String p2, boolean p3, KeyEvent p4, int p5, boolean p6){
	if (p4 == 0) {
		int v1 = p4.getKeyCode();
		if (v1 == 24) {
			int v2 = p4.getKeyCode();
			if (v2 == 25) {
				int v3 = p4.getKeyCode();
				if (v3 == 164) {
					int v4 = Binder.getCallingPid();
					int v5 = Binder.getCallingUid();
					long v6 = Binder.clearCallingIdentity();
					Object v27 = this.mLock;
					if (this.mGlobalPrioritySession == 0) {
						boolean v30 = this.mGlobalPrioritySession.isActive();
						if (v30 == 0) {
							boolean v29 = ;
							boolean v28 = v29;
							if (v28 == 0) {
								int v32 = p4.getAction();
								if (v32 != 0) {
									int v33 = p4.getAction();
									if (v33 != 1) {
										int v34 = p4.getKeyCode();
										if (v34 == 24) {
											if (v34 == 25) {
												if (v34 == 164) {
													if ( != 0) {
														if ( == 0) {
															if (p6 != 0) {
																if ( == 0) {
																	if ( == 0) {
																		if ( == 0) {
																			if ( == 0) {
																				int v35 = p4.getRepeatCount();
																				if (v35 != 0) {
																					boolean v37 = MediaSessionService.-$$Nest$misGlobalPriorityActiveLocked(this.this$0);
																					if (v37 == 0) {
																						MediaSessionRecord v38 = MediaSessionService.-$$Nest$fgetmGlobalPrioritySession(this.this$0);
																						boolean v39 = MediaSessionService$SessionManagerImpl.isValidLocalStreamType(p7);
																						if (v39 == 0) {
																							boolean v40 = AudioSystem.isStreamActive(p7, 0);
																							if (v40 == 0) {
																								if ( == 0) {
																									if ( == 0) {
																										if (p8 == 0) {
																											boolean v55 = AudioSystem.isStreamActive(3, 0);
																											if (v55 != 0) {
																												Binder.restoreCallingIdentity(v6);
																												return;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void dispatchVolumeKeyEvent(String p1, String p2, boolean p3, KeyEvent p4, int p5, boolean p6){
	if (p4 == 0) {
		int v1 = p4.getKeyCode();
		if (v1 == 24) {
			int v2 = p4.getKeyCode();
			if (v2 == 25) {
				int v3 = p4.getKeyCode();
				if (v3 == 164) {
					int v4 = Binder.getCallingPid();
					int v5 = Binder.getCallingUid();
					long v6 = Binder.clearCallingIdentity();
					Object v27 = this.mLock;
					if (this.mGlobalPrioritySession == 0) {
						boolean v30 = this.mGlobalPrioritySession.isActive();
						if (v30 == 0) {
							boolean v29 = ;
							boolean v28 = v29;
							if (v28 == 0) {
								boolean v33 = p5.isCanceled();
								if (v33 == 0) {
									MediaKeyDispatcher v34 = MediaSessionService.-$$Nest$fgetmCustomMediaKeyDispatcher(MediaSessionService$SessionManagerImpl.this$0);
									if (v34 == 0) {
										MediaKeyDispatcher v35 = MediaSessionService.-$$Nest$fgetmCustomMediaKeyDispatcher(MediaSessionService$SessionManagerImpl.this$0);
										Map v36 = v35.getOverriddenKeyEvents();
										if (v36 == 0) {
											MediaKeyDispatcher v37 = MediaSessionService.-$$Nest$fgetmCustomMediaKeyDispatcher(MediaSessionService$SessionManagerImpl.this$0);
											Map v38 = v37.getOverriddenKeyEvents();
											int v39 = p5.getKeyCode();
											Integer v40 = Integer.valueOf(v39);
											Object v41 = v38.get(v40);
											int v42 = v41.intValue();
											MediaSessionService$SessionManagerImpl$KeyEventHandler.cancelTrackingIfNeeded(p1, p2, p3, p4, p5, 0, p6, p7, p8, );
											boolean v44 = MediaSessionService$SessionManagerImpl$KeyEventHandler.needTracking(p5, );
											if (v44 != 0) {
												boolean v45 = MediaSessionService$SessionManagerImpl$KeyEventHandler.isFirstDownKeyEvent(p5);
												if (v45 == 0) {
													boolean v46 = MediaSessionService$SessionManagerImpl$KeyEventHandler.isFirstLongPressKeyEvent(p5);
													if (v46 == 0) {
														this.mIsLongPressing = 1;
														if (this.mIsLongPressing == 0) {
															int v47 = p5.getAction();
															if (v47 != 1) {
																this.mTrackingFirstDownKeyEvent = 0;
																boolean v48 = MediaSessionService$SessionManagerImpl$KeyEventHandler.shouldTrackForMultipleTapsLocked();
																if (v48 == 0) {
																	if (this.mMultiTapCount != 0) {
																		if (this.mMultiTapCount != 1) {
																			if (this.mMultiTapCount != 2) {
																				MediaSessionService$MessageHandler v49 = MediaSessionService.-$$Nest$fgetmHandler(MediaSessionService$SessionManagerImpl.this$0);
																				v49.removeCallbacks(this.mMultiTapTimeoutRunnable);
																				MediaSessionService$SessionManagerImpl$KeyEventHandler.onTripleTap(p5);
																				Binder.restoreCallingIdentity(v6);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v4 = Binder.getCallingPid();\nint v5 = Binder.getCallingUid();\nlong v6 = Binder.clearCallingIdentity();\nObject v27 = MediaSessionService.-$$Nest$fgetmLock(this.this$0);\nboolean v28 = MediaSessionService.-$$Nest$misGlobalPriorityActiveLocked(this.this$0);\np0.dispatchVolumeKeyEventLocked(p1, p2, v4, v5, p3, p4, p5, p6);\nBinder.restoreCallingIdentity(v6);', 'boolean v29 = this.this$0.isGlobalPriorityActiveLocked();\nboolean v28 = v29;\nif (v28 == 0) {\nint v31 = p4.getAction();\nif (v31 != 0) {\nMediaSessionService$SessionManagerImpl.dispatchAdjustVolumeLocked(p1, p2, v4, v5, p3, p5, , , p6);\nBinder.restoreCallingIdentity(v6);']

The method dispatchVolumeKeyEvent has the following similar APIs:

- API Name: getMediaKeyEventSession(Ljava/lang/String;)Landroid/media/session/MediaSession$Token; with Similarity Score: 0.8587195873260498
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingPid();
int v2 = Binder.getCallingUid();
UserHandle v3 = UserHandle.getUserHandleForUid(v2);
int v4 = v3.getIdentifier();
long v5 = Binder.clearCallingIdentity();
Object v14 = MediaSessionService.-$$Nest$fgetmLock(this.this$0);
int v17 = this.mFullUserIds.get(p2, -1);
if (v17 >= 0) {
Object v18 = this.mUserRecords.get(v17);
MediaSessionService$FullUserRecord v16 = v18;
MediaSessionService$FullUserRecord v15 = v16;
if (v15 != 0) {
boolean v21 = MediaSessionService.-$$Nest$misGlobalPriorityActiveLocked(this.this$0);
if (v21 == 0) {
MediaSessionRecord v22 = MediaSessionService.-$$Nest$fgetmGlobalPrioritySession(this.this$0);
MediaSessionRecordImpl v20 = ;
MediaSessionRecordImpl v19 = v20;
if (v19 instanceof MediaSessionRecord == 0) {
MediaSession$Token v23 = v19.getSessionToken();
Binder.restoreCallingIdentity(v5);
return v23;

- API Name: setVolume(Landroid/os/IBinder;FI)V with Similarity Score: 0.8559924364089966
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, "setVolume");
long v5 = Binder.clearCallingIdentity();
TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3);
ITvInputSession v7 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, v6);
v7.setVolume(p2);

