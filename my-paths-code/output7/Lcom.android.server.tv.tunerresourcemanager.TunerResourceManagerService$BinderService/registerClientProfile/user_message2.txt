The method registerClientProfile has the following code snippet:

This is path 1 for the API with depth 2:
public void registerClientProfile(ResourceClientProfile p1, IResourcesReclaimListener p2, [I p3){
	if (p1 == 0) {
		if (p3 == 0) {
			if (p2 == 0) {
				UseCasePriorityHints v3 = this.mPriorityCongfig;
				Integer v5 = Integer.valueOf(ResourceClientProfile.useCase);
				boolean v6 = this.mVendorDefinedUseCase.contains(v5);
				if (v6 != 0) {
					boolean v7 = UseCasePriorityHints.isPredefinedUseCase(ResourceClientProfile.useCase);
					if (v7 == 0) {
						boolean v4 = ;
						if (v4 == 0) {
							Object v8 = this.mLock;
							if (this.DEBUG == 0) {
								if (this.mTvInputManager != 0) {
									this.mNextUnusedClientId = (this.mNextUnusedClientId + 1);
									if (ResourceClientProfile.tvInputSessionId != 0) {
										int v18 = TvInputManager.getClientPidInternal(ResourceClientProfile.tvInputSessionId);
										int v17 = v18;
										if (ResourceClientProfile.tvInputSessionId == 0) {
											if (this.mMediaResourceManager == 0) {
												int v19 = Binder.getCallingPid();
												this.mMediaResourceManager.overridePid(v19, );
												ClientProfile$Builder v21 = new ClientProfile$Builder(p3[0]);
												this.mTvInputSessionId = ResourceClientProfile.tvInputSessionId;
												ClientProfile$Builder v23 = ClientProfile$Builder;
												this.mUseCase = ResourceClientProfile.useCase;
												ClientProfile$Builder v24 = ClientProfile$Builder;
												this.mProcessId = ;
												ClientProfile$Builder v25 = ClientProfile$Builder;
												ClientProfile v27 = new ClientProfile(ClientProfile$Builder,0);
												ClientProfile v26 = v27;
												Iterator v31 = v30.iterator();
												boolean v32 = v31.hasNext();
												if (v32 == 0) {
													Object v33 = v31.next();
													if (ActivityManager$RunningAppProcessInfo.pid != ) {
														if (ActivityManager$RunningAppProcessInfo.importance != 100) {
															boolean v34 = v31.hasNext();
															if (v34 == 0) {
																Object v35 = v31.next();
																if (ActivityManager$RunningAppProcessInfo.pid != ) {
																	if (ActivityManager$RunningAppProcessInfo.importance != 100) {
																		boolean v29 = 1;
																		if (this.DEBUG == 0) {
																			if (v29 == 0) {
																				int v46 = this.mPriorityCongfig.getForegroundPriority(ResourceClientProfile.useCase);
																				int v36 = v46;
																				if (v36 >= 0) {
																					this.mPriority = v36;
																					Integer v49 = Integer.valueOf(p3[0]);
																					Object v50 = this.mClientProfiles.put(v49, v26);
																					TunerResourceManagerService.addResourcesReclaimListener(p3[0], p2);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void registerClientProfile(ResourceClientProfile p1, IResourcesReclaimListener p2, [I p3){
	if (p1 == 0) {
		if (p3 == 0) {
			if (p2 == 0) {
				UseCasePriorityHints v3 = this.mPriorityCongfig;
				Integer v5 = Integer.valueOf(ResourceClientProfile.useCase);
				boolean v6 = this.mVendorDefinedUseCase.contains(v5);
				if (v6 != 0) {
					boolean v7 = UseCasePriorityHints.isPredefinedUseCase(ResourceClientProfile.useCase);
					if (v7 == 0) {
						boolean v4 = ;
						if (v4 == 0) {
							Object v8 = this.mLock;
							if (this.DEBUG == 0) {
								if (this.mTvInputManager != 0) {
									this.mNextUnusedClientId = (this.mNextUnusedClientId + 1);
									if (ResourceClientProfile.tvInputSessionId != 0) {
										int v18 = TvInputManager.getClientPidInternal(ResourceClientProfile.tvInputSessionId);
										int v17 = v18;
										if (ResourceClientProfile.tvInputSessionId == 0) {
											if (this.mMediaResourceManager == 0) {
												int v19 = Binder.getCallingPid();
												this.mMediaResourceManager.overridePid(v19, );
												ClientProfile$Builder v21 = new ClientProfile$Builder(p3[0]);
												this.mTvInputSessionId = ResourceClientProfile.tvInputSessionId;
												ClientProfile$Builder v23 = ClientProfile$Builder;
												this.mUseCase = ResourceClientProfile.useCase;
												ClientProfile$Builder v24 = ClientProfile$Builder;
												this.mProcessId = ;
												ClientProfile$Builder v25 = ClientProfile$Builder;
												ClientProfile v27 = new ClientProfile(ClientProfile$Builder,0);
												ClientProfile v26 = v27;
												Iterator v31 = v30.iterator();
												boolean v32 = v31.hasNext();
												if (v32 == 0) {
													Object v33 = v31.next();
													if (ActivityManager$RunningAppProcessInfo.pid != ) {
														if (ActivityManager$RunningAppProcessInfo.importance != 100) {
															boolean v34 = v31.hasNext();
															if (v34 == 0) {
																Object v35 = v31.next();
																if (ActivityManager$RunningAppProcessInfo.pid != ) {
																	if (ActivityManager$RunningAppProcessInfo.importance != 100) {
																		boolean v29 = 1;
																		if (this.DEBUG == 0) {
																			if (v29 == 0) {
																				int v46 = this.mPriorityCongfig.getForegroundPriority(ResourceClientProfile.useCase);
																				int v36 = v46;
																				if (v36 >= 0) {
																					this.mPriority = v36;
																					Integer v49 = Integer.valueOf(p3[0]);
																					Object v50 = this.mClientProfiles.put(v49, v26);
																					TunerResourceManagerService.addResourcesReclaimListener(p3[0], p2);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void registerClientProfile(ResourceClientProfile p1, IResourcesReclaimListener p2, [I p3){
	if (p1 == 0) {
		if (p3 == 0) {
			if (p2 == 0) {
				UseCasePriorityHints v3 = this.mPriorityCongfig;
				Integer v5 = Integer.valueOf(ResourceClientProfile.useCase);
				boolean v6 = this.mVendorDefinedUseCase.contains(v5);
				if (v6 != 0) {
					boolean v7 = UseCasePriorityHints.isPredefinedUseCase(ResourceClientProfile.useCase);
					if (v7 == 0) {
						boolean v4 = ;
						if (v4 == 0) {
							Object v8 = this.mLock;
							if (this.DEBUG == 0) {
								if (this.mTvInputManager != 0) {
									this.mNextUnusedClientId = (this.mNextUnusedClientId + 1);
									if (ResourceClientProfile.tvInputSessionId != 0) {
										int v18 = TvInputManager.getClientPidInternal(ResourceClientProfile.tvInputSessionId);
										int v17 = v18;
										if (ResourceClientProfile.tvInputSessionId == 0) {
											if (this.mMediaResourceManager == 0) {
												int v19 = Binder.getCallingPid();
												this.mMediaResourceManager.overridePid(v19, );
												ClientProfile$Builder v21 = new ClientProfile$Builder(p3[0]);
												this.mTvInputSessionId = ResourceClientProfile.tvInputSessionId;
												ClientProfile$Builder v23 = ClientProfile$Builder;
												this.mUseCase = ResourceClientProfile.useCase;
												ClientProfile$Builder v24 = ClientProfile$Builder;
												this.mProcessId = ;
												ClientProfile$Builder v25 = ClientProfile$Builder;
												ClientProfile v27 = new ClientProfile(ClientProfile$Builder,0);
												ClientProfile v26 = v27;
												Iterator v31 = v30.iterator();
												boolean v32 = v31.hasNext();
												if (v32 == 0) {
													Object v33 = v31.next();
													if (ActivityManager$RunningAppProcessInfo.pid != ) {
														if (ActivityManager$RunningAppProcessInfo.importance != 100) {
															boolean v34 = v31.hasNext();
															if (v34 == 0) {
																Object v35 = v31.next();
																if (ActivityManager$RunningAppProcessInfo.pid != ) {
																	if (ActivityManager$RunningAppProcessInfo.importance != 100) {
																		boolean v29 = 1;
																		if (this.DEBUG == 0) {
																			if (v29 == 0) {
																				int v46 = this.mPriorityCongfig.getBackgroundPriority(ResourceClientProfile.useCase);
																				int v36 = v46;
																				if (v36 >= 0) {
																					this.mPriority = v36;
																					Integer v49 = Integer.valueOf(p3[0]);
																					Object v50 = this.mClientProfiles.put(v49, v26);
																					TunerResourceManagerService.addResourcesReclaimListener(p3[0], p2);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v5 = Integer.valueOf(ResourceClientProfile.useCase);\nboolean v6 = this.mVendorDefinedUseCase.contains(v5);\nClientProfile$Builder v21 = new ClientProfile$Builder(p3[0]);\nthis.mTvInputSessionId = ResourceClientProfile.tvInputSessionId;\nthis.mUseCase = ResourceClientProfile.useCase;\nClientProfile v27 = new ClientProfile(ClientProfile$Builder,0);\nInteger v49 = Integer.valueOf(p3[0]);\nObject v50 = this.mClientProfiles.put(v49, v26);\nTunerResourceManagerService.addResourcesReclaimListener(p3[0], p2);', 'ClientProfile$Builder v20 = new ClientProfile$Builder(p3[0]);\nClientProfile$Builder v22 = v20.tvInputSessionId(ResourceClientProfile.tvInputSessionId);\nClientProfile$Builder v23 = v22.useCase(ResourceClientProfile.useCase);\nClientProfile$Builder v24 = v23.processId();\nClientProfile v25 = v24.build();\nv25.setPriority(v27);\nTunerResourceManagerService.addClientProfile(p3[0], v25, p2);', 'UseCasePriorityHints v3 = TunerResourceManagerService.-$$Nest$fgetmPriorityCongfig(this.this$0);\nthis.this$0.registerClientProfileInternal(p1, p2, p3);']

The method registerClientProfile has the following similar APIs:

- API Name: updateClientPriority(III)Z with Similarity Score: 0.7913244962692261
  - Access Control Level: SYS_OR_SIG and the following code:
ClientProfile v15 = TunerResourceManagerService.getClientProfile(p1);
v15.overwritePriority(p2);
v15.setNiceValue(p3);

- API Name: isLowestPriority(II)Z with Similarity Score: 0.7382541298866272
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v5 = Integer.valueOf(p1);
boolean v6 = v4.contains(v5);
ClientProfile v8 = this.mClientProfiles.get(v9);
v8.setPriority(v16);

