The method requestLnb has the following code snippet:

This is path 1 for the API with depth 2:
public boolean requestLnb(TunerLnbRequest p1, [I p2){
	if (p2 == 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerLnbRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 == 0) {
			if (this.DEBUG == 0) {
				Integer v17 = Integer.valueOf(TunerLnbRequest.clientId);
				Object v18 = this.mClientProfiles.get(v17);
				ClientProfile v16 = v18;
				boolean v20 = v16.isPriorityOverwritten();
				if (v20 == 0) {
					int v21 = v16.getProcessId();
					boolean v22 = TunerResourceManagerService.checkIsForeground(v21);
					int v23 = v16.getUseCase();
					int v24 = TunerResourceManagerService.getClientPriority(v23, v22);
					v16.setPriority(v24);
					Map v26 = this.mLnbResources;
					Collection v27 = v26.values();
					Iterator v28 = v27.iterator();
					boolean v29 = v28.hasNext();
					if (v29 == 0) {
						Object v30 = v28.next();
						boolean v31 = this.mIsInUse;
						if (v31 != 0) {
							int v32 = this.mHandle;
							if ( <= -1) {
								if ( <= -1) {
									int v33 = (this.mPriority - this.mNiceValue);
									if (v33 <= ) {
										Integer v35 = Integer.valueOf();
										Object v36 = this.mLnbResources.get(v35);
										LnbResource v34 = v36;
										int v37 = this.mOwnerClientId;
										Binder.allowBlockingForCurrentThread();
										ClientProfile v40 = TunerResourceManagerService.getClientProfile(v37);
										if (v40 != 0) {
											Set v41 = v40.getShareFeClientIds();
											Iterator v42 = v41.iterator();
											boolean v43 = v42.hasNext();
											if (v43 == 0) {
												Object v44 = v42.next();
												int v45 = v44.intValue();
												Integer v46 = Integer.valueOf(v45);
												Object v47 = this.mListeners.get(v46);
												IResourcesReclaimListener v48 = v47.getListener();
												v48.onReclaimResources();
												ClientProfile v50 = TunerResourceManagerService.getClientProfile(v45);
												TunerResourceManagerService.clearAllResourcesAndClientMapping(v50);
												boolean v52 = v42.hasNext();
												if (v52 == 0) {
													if (this.DEBUG == 0) {
														Integer v61 = Integer.valueOf(v37);
														Object v62 = this.mListeners.get(v61);
														IResourcesReclaimListener v63 = v62.getListener();
														v63.onReclaimResources();
														TunerResourceManagerService.clearAllResourcesAndClientMapping(v40);
														boolean v38 = 1;
														if (v38 != 0) {
															LnbResource v67 = TunerResourceManagerService.getLnbResource();
															ClientProfile v68 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);
															v67.setOwner(TunerLnbRequest.clientId);
															v68.useLnb();
															boolean v8 = 1;
															return v8;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean requestLnb(TunerLnbRequest p1, [I p2){
	if (p2 == 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerLnbRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 == 0) {
			if (this.DEBUG == 0) {
				Integer v17 = Integer.valueOf(TunerLnbRequest.clientId);
				Object v18 = this.mClientProfiles.get(v17);
				ClientProfile v16 = v18;
				boolean v20 = v16.isPriorityOverwritten();
				if (v20 == 0) {
					Map v21 = this.mLnbResources;
					Collection v22 = v21.values();
					Iterator v23 = v22.iterator();
					boolean v24 = v23.hasNext();
					if (v24 == 0) {
						Object v25 = v23.next();
						boolean v26 = this.mIsInUse;
						if (v26 != 0) {
							int v27 = this.mHandle;
							if ( <= -1) {
								if ( <= -1) {
									int v28 = (this.mPriority - this.mNiceValue);
									if (v28 <= ) {
										Integer v30 = Integer.valueOf();
										Object v31 = this.mLnbResources.get(v30);
										LnbResource v29 = v31;
										int v32 = this.mOwnerClientId;
										Binder.allowBlockingForCurrentThread();
										ClientProfile v35 = TunerResourceManagerService.getClientProfile(v32);
										if (v35 != 0) {
											Set v36 = v35.getShareFeClientIds();
											Iterator v37 = v36.iterator();
											boolean v38 = v37.hasNext();
											if (v38 == 0) {
												Object v39 = v37.next();
												int v40 = v39.intValue();
												Integer v41 = Integer.valueOf(v40);
												Object v42 = this.mListeners.get(v41);
												IResourcesReclaimListener v43 = v42.getListener();
												v43.onReclaimResources();
												ClientProfile v45 = TunerResourceManagerService.getClientProfile(v40);
												TunerResourceManagerService.clearAllResourcesAndClientMapping(v45);
												boolean v47 = v37.hasNext();
												if (v47 == 0) {
													if (this.DEBUG == 0) {
														Integer v56 = Integer.valueOf(v32);
														Object v57 = this.mListeners.get(v56);
														IResourcesReclaimListener v58 = v57.getListener();
														v58.onReclaimResources();
														TunerResourceManagerService.clearAllResourcesAndClientMapping(v35);
														boolean v33 = 1;
														if (v33 != 0) {
															LnbResource v62 = TunerResourceManagerService.getLnbResource();
															ClientProfile v63 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);
															v62.setOwner(TunerLnbRequest.clientId);
															v63.useLnb();
															boolean v8 = 1;
															return v8;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ClientProfile v16 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);\nTunerResourceManagerService.clientPriorityUpdateOnRequest(v16);\nMap v18 = TunerResourceManagerService.getLnbResources();\nCollection v19 = v18.values();\nIterator v20 = v19.iterator();\nObject v22 = v20.next();\nboolean v23 = v22.isInUse();\nint v24 = v22.getOwnerClientId();\nint v25 = TunerResourceManagerService.updateAndGetOwnerClientPriority(v24);', 'Integer v6 = Integer.valueOf(TunerLnbRequest.clientId);\nboolean v7 = v5.contains(v6);\nSet v5 = this.mClientProfiles.keySet();\nObject v3 = this.mLock;\nif (v4 == 0) {', 'LnbResource v67 = TunerResourceManagerService.getLnbResource();\nClientProfile v68 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);\nv67.setOwner(TunerLnbRequest.clientId);\nv68.useLnb();', 'TunerResourceManagerService.updateLnbClientMappingOnNewGrant(, TunerLnbRequest.clientId);']

The method requestLnb has the following similar APIs:

- API Name: requestCiCam(Landroid/media/tv/tunerresourcemanager/TunerCiCamRequest;[I)Z with Similarity Score: 0.9070534706115723
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v5 = Integer.valueOf(TunerCiCamRequest.clientId);
Set v4 = this.mClientProfiles.keySet();
boolean v6 = v4.contains(v5);

- API Name: requestDescrambler(Landroid/media/tv/tunerresourcemanager/TunerDescramblerRequest;[I)Z with Similarity Score: 0.8812075853347778
  - Access Control Level: SYS_OR_SIG and the following code:
Set v5 = this.mClientProfiles.keySet();
Integer v6 = Integer.valueOf(TunerDescramblerRequest.clientId);
boolean v7 = v5.contains(v6);

