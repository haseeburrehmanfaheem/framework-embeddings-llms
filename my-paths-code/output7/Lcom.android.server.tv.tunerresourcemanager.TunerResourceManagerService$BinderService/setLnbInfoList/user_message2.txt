The method setLnbInfoList has the following code snippet:

This is path 1 for the API with depth 2:
public void setLnbInfoList([I p1){
	if (p1 == 0) {
		Object v2 = this.mLock;
		if (this.DEBUG == 0) {
			if ( >= p1.length) {
				if ( >= p1.length) {
					HashSet v11 = new HashSet(v13);
					Map v12 = this.mLnbResources;
					Set v13 = v12.keySet();
					if ( >= p1.length) {
						Integer v16 = Integer.valueOf(p1[]);
						Object v17 = this.mLnbResources.get(v16);
						LnbResource v15 = v17;
						if (v15 == 0) {
							LnbResource$Builder v18 = new LnbResource$Builder(p1[]);
							LnbResource v21 = new LnbResource(LnbResource$Builder,0);
							LnbResource v20 = v21;
							int v24 = v20.getHandle();
							Integer v25 = Integer.valueOf(v24);
							Object v26 = this.mLnbResources.put(v25, v20);
							if ( >= p1.length) {
								Iterator v27 = v11.iterator();
								boolean v28 = v27.hasNext();
								if (v28 == 0) {
									Object v29 = v27.next();
									int v30 = v29.intValue();
									LnbResource v32 = TunerResourceManagerService.getLnbResource(v30);
									if (v32 != 0) {
										boolean v33 = v32.isInUse();
										if (v33 == 0) {
											TunerResourceManagerService.releaseLnbInternal(v32);
											Integer v35 = Integer.valueOf(v30);
											Object v36 = this.mLnbResources.remove(v35);
											boolean v37 = v27.hasNext();
											if (v37 == 0) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setLnbInfoList([I p1){
	if (p1 == 0) {
		Object v2 = this.mLock;
		if (this.DEBUG == 0) {
			if ( >= p1.length) {
				if ( >= p1.length) {
					HashSet v11 = new HashSet(v13);
					Map v12 = this.mLnbResources;
					Set v13 = v12.keySet();
					if ( >= p1.length) {
						Integer v16 = Integer.valueOf(p1[]);
						Object v17 = this.mLnbResources.get(v16);
						LnbResource v15 = v17;
						if (v15 == 0) {
							LnbResource$Builder v18 = new LnbResource$Builder(p1[]);
							LnbResource v21 = new LnbResource(LnbResource$Builder,0);
							LnbResource v20 = v21;
							int v24 = v20.getHandle();
							Integer v25 = Integer.valueOf(v24);
							Object v26 = this.mLnbResources.put(v25, v20);
							if ( >= p1.length) {
								Iterator v27 = v11.iterator();
								boolean v28 = v27.hasNext();
								if (v28 == 0) {
									Object v29 = v27.next();
									int v30 = v29.intValue();
									LnbResource v32 = TunerResourceManagerService.getLnbResource(v30);
									if (v32 != 0) {
										boolean v33 = v27.hasNext();
										if (v33 == 0) {
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['if (p1 == 0) {\nObject v2 = this.mLock;\nHashSet v11 = new HashSet(v13);\nMap v12 = this.mLnbResources;\nSet v13 = v12.keySet();\nInteger v16 = Integer.valueOf(p1[]);\nObject v17 = this.mLnbResources.get(v16);\nLnbResource$Builder v18 = new LnbResource$Builder(p1[]);\nLnbResource v21 = new LnbResource(LnbResource$Builder,0);\nthis.mLnbResources.put(v25, v20);', 'if (p1 == 0) {\nObject v2 = this.mLock;\nHashSet v11 = new HashSet(v13);\nMap v12 = TunerResourceManagerService.getLnbResources();\nSet v13 = v12.keySet();\nInteger v16 = Integer.valueOf(p1[]);\nv11.remove(v16);\nTunerResourceManagerService.removeLnbResource(v21);', 'if (p1 == 0) {\nObject v2 = TunerResourceManagerService.-$$Nest$fgetmLock(this.this$0);\nthis.this$0.setLnbInfoListInternal(p1);']

The method setLnbInfoList has the following similar APIs:

- API Name: releaseLnb(II)V with Similarity Score: 0.7129300236701965
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v11 = Integer.valueOf(p1);
Object v12 = this.mLnbResources.get(v11);
LnbResource v10 = v12;
TunerResourceManagerService.updateLnbClientMappingOnRelease(v10);

