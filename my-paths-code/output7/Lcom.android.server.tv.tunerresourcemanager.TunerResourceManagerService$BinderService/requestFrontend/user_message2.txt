The method requestFrontend has the following code snippet:

This is path 1 for the API with depth 2:
public boolean requestFrontend(TunerFrontendRequest p1, [I p2){
	if (p2 != 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerFrontendRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 != 0) {
			Integer v9 = Integer.valueOf(TunerFrontendRequest.clientId);
			Object v10 = this.mClientProfiles.get(v9);
			ClientProfile v8 = v10;
			Set v11 = this.mUsingFrontendHandles;
			boolean v12 = v11.isEmpty();
			if (v12 != 0) {
				if (this.DEBUG == 0) {
					Integer v22 = Integer.valueOf(TunerFrontendRequest.clientId);
					Object v23 = this.mClientProfiles.get(v22);
					ClientProfile v21 = v23;
					if (v21 != 0) {
						boolean v25 = v21.isPriorityOverwritten();
						if (v25 == 0) {
							int v26 = v21.getProcessId();
							boolean v27 = TunerResourceManagerService.checkIsForeground(v26);
							int v28 = v21.getUseCase();
							int v29 = TunerResourceManagerService.getClientPriority(v28, v27);
							v21.setPriority(v29);
							Map v31 = this.mFrontendResources;
							Collection v32 = v31.values();
							Iterator v33 = v32.iterator();
							boolean v34 = v33.hasNext();
							if (v34 == 0) {
								Object v35 = v33.next();
								int v36 = this.mType;
								if (v36 != TunerFrontendRequest.frontendType) {
									boolean v37 = this.mIsInUse;
									if (v37 != 0) {
										int v39 = this.mFrontendMaxUsableNums.get(TunerFrontendRequest.frontendType, -1);
										if (v39 != -1) {
											int v40 = this.mFrontendUsedNums.get(TunerFrontendRequest.frontendType, -1);
											if (v40 != -1) {
												if ( < v39) {
													boolean v38 = ;
													if (v38 == 0) {
														boolean v41 = v33.hasNext();
														if (v41 == 0) {
															if ( == -1) {
																if ( == -1) {
																	int v42 = (this.mPriority - this.mNiceValue);
																	if (v42 <= ) {
																		Integer v44 = Integer.valueOf();
																		Object v45 = this.mFrontendResources.get(v44);
																		FrontendResource v43 = v45;
																		int v46 = this.mOwnerClientId;
																		Binder.allowBlockingForCurrentThread();
																		ClientProfile v49 = TunerResourceManagerService.getClientProfile(v46);
																		if (v49 != 0) {
																			Set v50 = v49.getShareFeClientIds();
																			Iterator v51 = v50.iterator();
																			boolean v52 = v51.hasNext();
																			if (v52 == 0) {
																				Object v53 = v51.next();
																				int v54 = v53.intValue();
																				Integer v55 = Integer.valueOf(v54);
																				Object v56 = this.mListeners.get(v55);
																				IResourcesReclaimListener v57 = v56.getListener();
																				v57.onReclaimResources();
																				ClientProfile v59 = TunerResourceManagerService.getClientProfile(v54);
																				TunerResourceManagerService.clearAllResourcesAndClientMapping(v59);
																				boolean v61 = v51.hasNext();
																				if (v61 == 0) {
																					if (this.DEBUG == 0) {
																						Integer v70 = Integer.valueOf(v46);
																						Object v71 = this.mListeners.get(v70);
																						IResourcesReclaimListener v72 = v71.getListener();
																						v72.onReclaimResources();
																						TunerResourceManagerService.clearAllResourcesAndClientMapping(v49);
																						boolean v47 = 1;
																						if (v47 != 0) {
																							boolean v13 = 0;
																							return v13;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean requestFrontend(TunerFrontendRequest p1, [I p2){
	if (p2 != 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerFrontendRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 != 0) {
			Integer v9 = Integer.valueOf(TunerFrontendRequest.clientId);
			Object v10 = this.mClientProfiles.get(v9);
			ClientProfile v8 = v10;
			Set v11 = this.mUsingFrontendHandles;
			boolean v12 = v11.isEmpty();
			if (v12 != 0) {
				if (this.DEBUG == 0) {
					Integer v22 = Integer.valueOf(TunerFrontendRequest.clientId);
					Object v23 = this.mClientProfiles.get(v22);
					ClientProfile v21 = v23;
					if (v21 != 0) {
						boolean v25 = v21.isPriorityOverwritten();
						if (v25 == 0) {
							Map v26 = this.mFrontendResources;
							Collection v27 = v26.values();
							Iterator v28 = v27.iterator();
							boolean v29 = v28.hasNext();
							if (v29 == 0) {
								Object v30 = v28.next();
								int v31 = this.mType;
								if (v31 != TunerFrontendRequest.frontendType) {
									boolean v32 = this.mIsInUse;
									if (v32 != 0) {
										int v34 = this.mFrontendMaxUsableNums.get(TunerFrontendRequest.frontendType, -1);
										if (v34 != -1) {
											int v35 = this.mFrontendUsedNums.get(TunerFrontendRequest.frontendType, -1);
											if (v35 != -1) {
												if ( < v34) {
													boolean v33 = ;
													if (v33 == 0) {
														boolean v36 = v28.hasNext();
														if (v36 == 0) {
															if ( == -1) {
																if ( == -1) {
																	int v37 = (this.mPriority - this.mNiceValue);
																	if (v37 <= ) {
																		Integer v39 = Integer.valueOf();
																		Object v40 = this.mFrontendResources.get(v39);
																		FrontendResource v38 = v40;
																		int v41 = this.mOwnerClientId;
																		Binder.allowBlockingForCurrentThread();
																		ClientProfile v44 = TunerResourceManagerService.getClientProfile(v41);
																		if (v44 != 0) {
																			Set v45 = v44.getShareFeClientIds();
																			Iterator v46 = v45.iterator();
																			boolean v47 = v46.hasNext();
																			if (v47 == 0) {
																				Object v48 = v46.next();
																				int v49 = v48.intValue();
																				Integer v50 = Integer.valueOf(v49);
																				Object v51 = this.mListeners.get(v50);
																				IResourcesReclaimListener v52 = v51.getListener();
																				v52.onReclaimResources();
																				ClientProfile v54 = TunerResourceManagerService.getClientProfile(v49);
																				TunerResourceManagerService.clearAllResourcesAndClientMapping(v54);
																				boolean v56 = v46.hasNext();
																				if (v56 == 0) {
																					if (this.DEBUG == 0) {
																						Integer v65 = Integer.valueOf(v41);
																						Object v66 = this.mListeners.get(v65);
																						IResourcesReclaimListener v67 = v66.getListener();
																						v67.onReclaimResources();
																						TunerResourceManagerService.clearAllResourcesAndClientMapping(v44);
																						boolean v42 = 1;
																						if (v42 != 0) {
																							boolean v13 = 0;
																							return v13;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v9 = Integer.valueOf(TunerFrontendRequest.clientId);\nObject v10 = this.mClientProfiles.get(v9);\nClientProfile v8 = v10;\nSet v11 = this.mUsingFrontendHandles;\nboolean v12 = v11.isEmpty();', 'TunerResourceManagerService.clientPriorityUpdateOnRequest(v21);\nMap v23 = TunerResourceManagerService.getFrontendResources();\nCollection v24 = v23.values();\nIterator v25 = v24.iterator();', 'this.this$0.requestFrontendInternal(p1, p2);']

The method requestFrontend has the following similar APIs:

- API Name: isLowestPriority(II)Z with Similarity Score: 0.9084995985031128
  - Access Control Level: SYS_OR_SIG and the following code:
TunerResourceManagerService.getClientProfile(p1);
int v10 = v8.getPriority();
Map v11 = TunerResourceManagerService.getFrontendResources();
Collection v12 = v11.values();

- API Name: hasUnusedFrontend(I)Z with Similarity Score: 0.8382018804550171
  - Access Control Level: SYS_OR_SIG and the following code:
Map v4 = TunerResourceManagerService.getFrontendResources();
Collection v5 = v4.values();
Iterator v6 = v5.iterator();
Object v8 = v6.next();
int v9 = v8.getType();
if (v9 != p1) {

