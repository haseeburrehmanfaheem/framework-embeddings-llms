The method onTcpSocketStatsEvent has the following code snippet:

This is path 1 for the API with depth 2:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if ( >= p1.length) {
						Object v3 = this.mNetworkMetrics.get(p1[]);
						NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[]);
						if (v4 == 0) {
							[I v5 = v4.getTransportTypes();
							if ( >= v5.length) {
								if ( >= v5.length) {
									long v6 = ;
									if (v3 == 0) {
										if (v4 == 0) {
											if ((NetworkMetrics.transports < ) == 0) {
												if ( != 0) {
													long v8 = Math.abs((p1 - this.mLastSnapshot));
													if ((v8 < 300000) > 0) {
														if (v3 == 0) {
															if ( == 0) {
																NetworkMetrics v9 = new NetworkMetrics(p1[],,this.mConnectTb);
																this.mNetworkMetrics.put(p1[], v9);
																NetworkMetrics v2 = ;
																if (this.pendingSummary != 0) {
																	NetworkMetrics$Summary v13 = new NetworkMetrics$Summary(this.netId,this.transports);
																	this.pendingSummary = v13;
																	this.count = (this.count + p1);
																	this.sum = (this.sum + p2);
																	double v16 = Math.max(this.max, p2);
																	this.max = v16;
																	NetworkMetrics$Metrics.count(p3, 1);
																	NetworkMetrics$Metrics.count(p4, 1);
																	if ( >= p1.length) {
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if ( >= p1.length) {
						Object v3 = this.mNetworkMetrics.get(p1[]);
						NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[]);
						if (v4 == 0) {
							[I v5 = v4.getTransportTypes();
							if ( >= v5.length) {
								if ( >= v5.length) {
									long v6 = ;
									if (v3 == 0) {
										if (v4 == 0) {
											if ((NetworkMetrics.transports < ) == 0) {
												if ( != 0) {
													long v8 = Math.abs((p1 - this.mLastSnapshot));
													if ((v8 < 300000) > 0) {
														long v9 = NetdEventListenerService.projectSnapshotTime(p1);
														this.mLastSnapshot = v9;
														NetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);
														boolean v11 = NetdEventListenerService$NetworkMetricsSnapshot.stats.isEmpty();
														if (v11 == 0) {
															if (v3 == 0) {
																if ( == 0) {
																	NetworkMetrics v12 = new NetworkMetrics(p1[],,this.mConnectTb);
																	this.mNetworkMetrics.put(p1[], v12);
																	NetworkMetrics v2 = ;
																	if (this.pendingSummary != 0) {
																		NetworkMetrics$Summary v16 = new NetworkMetrics$Summary(this.netId,this.transports);
																		this.pendingSummary = v16;
																		this.count = (this.count + p1);
																		this.sum = (this.sum + p2);
																		double v19 = Math.max(this.max, p2);
																		this.max = v19;
																		NetworkMetrics$Metrics.count(p3, 1);
																		NetworkMetrics$Metrics.count(p4, 1);
																		if ( >= p1.length) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if ( >= p1.length) {
						Object v3 = this.mNetworkMetrics.get(p1[]);
						NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[]);
						if (v4 == 0) {
							[I v5 = v4.getTransportTypes();
							if ( >= v5.length) {
								if ( >= v5.length) {
									long v6 = ;
									if (v3 == 0) {
										if (v4 == 0) {
											if ((NetworkMetrics.transports < ) == 0) {
												if ( != 0) {
													long v8 = Math.abs((p1 - this.mLastSnapshot));
													if ((v8 < 300000) > 0) {
														long v9 = NetdEventListenerService.projectSnapshotTime(p1);
														this.mLastSnapshot = v9;
														NetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);
														boolean v11 = NetdEventListenerService$NetworkMetricsSnapshot.stats.isEmpty();
														if (v11 == 0) {
															this.mNetworkMetricsSnapshots.append(v10);
															if (v3 == 0) {
																if ( == 0) {
																	NetworkMetrics v13 = new NetworkMetrics(p1[],,this.mConnectTb);
																	this.mNetworkMetrics.put(p1[], v13);
																	NetworkMetrics v2 = ;
																	if (this.pendingSummary != 0) {
																		NetworkMetrics$Summary v17 = new NetworkMetrics$Summary(this.netId,this.transports);
																		this.pendingSummary = v17;
																		this.count = (this.count + p1);
																		this.sum = (this.sum + p2);
																		double v20 = Math.max(this.max, p2);
																		this.max = v20;
																		NetworkMetrics$Metrics.count(p3, 1);
																		NetworkMetrics$Metrics.count(p4, 1);
																		if ( >= p1.length) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mNetworkMetrics.get(p1[]);\nNetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[]);\nNetworkMetrics v9 = new NetworkMetrics(p1[],,this.mConnectTb);\nthis.mNetworkMetrics.put(p1[], v9);', 'NetworkMetrics$Summary v13 = new NetworkMetrics$Summary(this.netId,this.transports);\nthis.pendingSummary = v13;', 'NetworkMetrics v8 = new NetworkMetrics(p1[],,this.mConnectTb);\nthis.mNetworkMetrics.put(p1[], v8);', 'NetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);\nthis.pendingSummary = v12;', 'NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1[]);\nv2.addTcpStatsResult(p2[], p3[], p4[], p5[]);']

The method onTcpSocketStatsEvent has the following similar APIs:

- API Name: onDnsEvent(IIIILjava/lang/String;[Ljava/lang/String;II)V with Similarity Score: 0.9580579996109009
  - Access Control Level: NONE and the following code:
NetworkMetrics v13 = new NetworkMetrics(p1,,this.mConnectTb);
this.mNetworkMetrics.put(p1, v13);

- API Name: onConnectEvent(IIILjava/lang/String;II)V with Similarity Score: 0.9300485849380493
  - Access Control Level: NONE and the following code:
Object v3 = this.mNetworkMetrics.get(p1);
NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);
NetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);
NetworkMetrics v13 = new NetworkMetrics(p1,,this.mConnectTb);

