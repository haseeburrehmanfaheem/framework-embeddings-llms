This is path 1 for the API with depth 2:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if ( >= p1.length) {
						Object v3 = this.mNetworkMetrics.get(p1[]);
						NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[]);
						if (v4 == 0) {
							[I v5 = v4.getTransportTypes();
							if ( >= v5.length) {
								if ( >= v5.length) {
									long v6 = ;
									if (v3 == 0) {
										if (v4 == 0) {
											if ((NetworkMetrics.transports < ) == 0) {
												if ( != 0) {
													long v8 = Math.abs((p1 - this.mLastSnapshot));
													if ((v8 < 300000) > 0) {
														if (v3 == 0) {
															if ( == 0) {
																NetworkMetrics v9 = new NetworkMetrics(p1[],,this.mConnectTb);
																this.mNetworkMetrics.put(p1[], v9);
																NetworkMetrics v2 = ;
																if (this.pendingSummary != 0) {
																	NetworkMetrics$Summary v13 = new NetworkMetrics$Summary(this.netId,this.transports);
																	this.pendingSummary = v13;
																	this.count = (this.count + p1);
																	this.sum = (this.sum + p2);
																	double v16 = Math.max(this.max, p2);
																	this.max = v16;
																	NetworkMetrics$Metrics.count(p3, 1);
																	NetworkMetrics$Metrics.count(p4, 1);
																	if ( >= p1.length) {
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if ( >= p1.length) {
						Object v3 = this.mNetworkMetrics.get(p1[]);
						NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1[]);
						if (v4 == 0) {
							[I v5 = v4.getTransportTypes();
							long v6 = BitUtils.packBits(v5);
							if (v3 == 0) {
								if (v4 == 0) {
									if ((NetworkMetrics.transports < ) == 0) {
										NetdEventListenerService.collectPendingMetricsSnapshot(v1, );
										if (v3 == 0) {
											if ( == 0) {
												NetworkMetrics v8 = new NetworkMetrics(p1[],,this.mConnectTb);
												this.mNetworkMetrics.put(p1[], v8);
												NetworkMetrics v2 = ;
												if (this.pendingSummary != 0) {
													NetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);
													this.pendingSummary = v12;
													NetworkMetrics$Summary.tcpLossRate.count(p3[], p2[]);
													NetworkMetrics$Summary.roundTripTimeUs.count(p4[]);
													NetworkMetrics$Summary.sentAckTimeDiffenceMs.count(p5[]);
													if ( >= p1.length) {
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onTcpSocketStatsEvent([I p1, [I p2, [I p3, [I p4, [I p5){
	if (p1.length != p2.length) {
		if (p1.length != p3.length) {
			if (p1.length != p4.length) {
				if (p1.length == p5.length) {
					long v1 = System.currentTimeMillis();
					if ( >= p1.length) {
						NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1[]);
						v2.addTcpStatsResult(p2[], p3[], p4[], p5[]);
						if ( >= p1.length) {
							return;
						}
					}
				}
			}
		}
	}
}
