This is path 1 for the API with depth 2:
public void onDnsEvent(int p1, int p2, int p3, int p4, String p5, String p6, int p7, int p8){
	long v1 = System.currentTimeMillis();
	Object v3 = this.mNetworkMetrics.get(p1);
	NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);
	if (v4 == 0) {
		[I v5 = v4.getTransportTypes();
		if ( >= v5.length) {
			if ( >= v5.length) {
				long v6 = ;
				if (v3 == 0) {
					if (v4 == 0) {
						if ((NetworkMetrics.transports < ) == 0) {
							if ( != 0) {
								long v8 = Math.abs((p1 - this.mLastSnapshot));
								if ((v8 < 300000) > 0) {
									long v9 = NetdEventListenerService.projectSnapshotTime(p1);
									this.mLastSnapshot = v9;
									NetdEventListenerService$NetworkMetricsSnapshot v10 = NetdEventListenerService$NetworkMetricsSnapshot.collect(v9, this.mNetworkMetrics);
									boolean v11 = NetdEventListenerService$NetworkMetricsSnapshot.stats.isEmpty();
									if (v11 == 0) {
										this.mNetworkMetricsSnapshots.append(v10);
										if (v3 == 0) {
											if ( == 0) {
												NetworkMetrics v13 = new NetworkMetrics(p1,,this.mConnectTb);
												this.mNetworkMetrics.put(p1, v13);
												NetworkMetrics v2 = ;
												if (this.pendingSummary != 0) {
													NetworkMetrics$Summary v17 = new NetworkMetrics$Summary(this.netId,this.transports);
													this.pendingSummary = v17;
													if (p2 != 0) {
														if (this.eventCount < 20000) {
															if (this.eventCount != this.eventTypes.length) {
																DnsEvent.resize((this.eventCount * 4608983858650965606));
																this.eventCount = (this.eventCount + 1);
																if ( == 0) {
																	this.successCount = (this.successCount + 1);
																	boolean v19 = ;
																	NetworkMetrics$Metrics.count(p3, 1);
																	if (v19 == 0) {
																		NetworkMetrics$Metrics.count(0, 1);
																		if ( >= this.mNetdEventCallbackList.length) {
																			if (this.mNetdEventCallbackList[] == 0) {
																				this.mNetdEventCallbackList[].onDnsEvent(p1, p2, p3, p5, p6, p7, v1, p8);
																				if ( >= this.mNetdEventCallbackList.length) {
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onDnsEvent(int p1, int p2, int p3, int p4, String p5, String p6, int p7, int p8){
	long v1 = System.currentTimeMillis();
	Object v3 = this.mNetworkMetrics.get(p1);
	NetworkCapabilities v4 = this.mCallback.getNetworkCapabilities(p1);
	if (v4 == 0) {
		[I v5 = v4.getTransportTypes();
		long v6 = BitUtils.packBits(v5);
		if (v3 == 0) {
			if (v4 == 0) {
				if ((NetworkMetrics.transports < ) == 0) {
					NetdEventListenerService.collectPendingMetricsSnapshot(v1, );
					if (v3 == 0) {
						if ( == 0) {
							NetworkMetrics v8 = new NetworkMetrics(p1,,this.mConnectTb);
							this.mNetworkMetrics.put(p1, v8);
							NetworkMetrics v2 = ;
							if (this.pendingSummary != 0) {
								NetworkMetrics$Summary v12 = new NetworkMetrics$Summary(this.netId,this.transports);
								this.pendingSummary = v12;
								boolean v14 = this.dnsMetrics.addResult(p2, p3, p4);
								NetworkMetrics$Summary.dnsLatencies.count(p4);
								if (v14 == 0) {
									NetworkMetrics$Summary.dnsErrorRate.count(0);
									if ( >= this.mNetdEventCallbackList.length) {
										if (this.mNetdEventCallbackList[] == 0) {
											this.mNetdEventCallbackList[].onDnsEvent(p1, p2, p3, p5, p6, p7, v1, p8);
											if ( >= this.mNetdEventCallbackList.length) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onDnsEvent(int p1, int p2, int p3, int p4, String p5, String p6, int p7, int p8){
	long v1 = System.currentTimeMillis();
	NetworkMetrics v2 = p0.getMetricsForNetwork(v1, p1);
	v2.addDnsResult(p2, p3, p4);
	if ( >= this.mNetdEventCallbackList.length) {
		if (this.mNetdEventCallbackList[] == 0) {
			this.mNetdEventCallbackList[].onDnsEvent(p1, p2, p3, p5, p6, p7, v1, p8);
			if ( >= this.mNetdEventCallbackList.length) {
				return;
			}
		}
	}
}
