The method generateCinematicEffect has the following code snippet:

This is path 1 for the API with depth 2:
public void generateCinematicEffect(CinematicEffectRequest p1, ICinematicEffectListener p2){
	WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0(p1,p2);
	if (v11 == 0) {
		ServiceNameResolver v12 = AbstractMasterSystemService.mServiceNameResolver;
		boolean v13 = v12.isTemporary(v9);
		if (v13 != 0) {
			ActivityTaskManagerInternal v14 = this.mActivityTaskManagerInternal;
			int v15 = Binder.getCallingUid();
			boolean v16 = v14.isCallerRecents(v15);
			if (v16 == 0) {
				int v17 = Binder.getCallingUid();
				long v18 = Binder.clearCallingIdentity();
				Object v19 = AbstractMasterSystemService.mLock;
				AbstractPerUserSystemService v21 = this.this$0.getServiceForUserLocked(v9);
				AbstractPerUserSystemService v20 = v21;
				if (v20 == 0) {
					if (1 != 0) {
						int v23 = WallpaperEffectsGenerationPerUserService.getServiceUidLocked();
						if (v23 != v17) {
							boolean v22 = ;
							if (v22 == 0) {
								v1.accept(v20);
								Binder.restoreCallingIdentity(v18);
								boolean v3 = ;
								if (v3 != 0) {
									CinematicEffectResponse$Builder v26 = new CinematicEffectResponse$Builder(0,v27);
									String v27 = p1.getTaskId();
									CinematicEffectResponse v29 = v26.build();
									p2.onCinematicEffectGenerated(v29);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0(p1,p2);\nCinematicEffectResponse$Builder v26 = new CinematicEffectResponse$Builder(0,v27);\nString v27 = p1.getTaskId();\nCinematicEffectResponse v29 = v26.build();\np2.onCinematicEffectGenerated(v29);', 'WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0(p1,p2);\nCinematicEffectResponse$Builder v24 = new CinematicEffectResponse$Builder(0,v25);\nString v25 = this.mTaskId;\nCinematicEffectResponse v30 = new CinematicEffectResponse(this.mStatusCode,this.mTaskId,this.mImageContentType,this.mTexturedMeshes,this.mStartKeyFrame,this.mEndKeyFrame,0);\np2.onCinematicEffectGenerated(v27);', 'WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda0(p1,p2);\nCinematicEffectResponse$Builder v4 = new CinematicEffectResponse$Builder(0,v5);\nString v5 = p1.getTaskId();\nCinematicEffectResponse v7 = v4.build();\np2.onCinematicEffectGenerated(v7);']

The method generateCinematicEffect has the following similar APIs:

- API Name: returnCinematicEffectResponse(Landroid/app/wallpapereffectsgeneration/CinematicEffectResponse;)V with Similarity Score: 0.8676474690437317
  - Access Control Level: SYS_OR_SIG and the following code:
WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda1 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda1(p1);
v1.accept(v20);

- API Name: returnCinematicEffectResponse(Landroid/app/wallpapereffectsgeneration/CinematicEffectResponse;)V with Similarity Score: 0.8378303050994873
  - Access Control Level: SYS_OR_SIG and the following code:
WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda1 v1 = new WallpaperEffectsGenerationManagerService$WallpaperEffectsGenerationManagerStub$$ExternalSyntheticLambda1(p1);
v1.accept(v20);

