The method hasProjectionPermission has the following code snippet:

This is path 1 for the API with depth 1:
public boolean hasProjectionPermission(int p1, String p2){
	if (v2 != 0) {
		AppOpsManager v3 = this.mAppOps;
		int v4 = v3.noteOpNoThrow(46, p1, p2);
		if (v4 != 0) {
			Binder.restoreCallingIdentity(v1);
			return ( | 0);
		}
	}
}
This is path 2 for the API with depth 1:
public boolean hasProjectionPermission(int p1, String p2){
	if (v2 != 0) {
		AppOpsManager v3 = this.mAppOps;
		int v4 = v3.noteOpNoThrow(46, p1, p2);
		if (v4 != 0) {
			Binder.restoreCallingIdentity(v1);
			return ( | 0);
		}
	}
}

and the following sink code:
['int v4 = v3.noteOpNoThrow(46, p1, p2);\nif (v4 != 0) {\nreturn ( | 0);']

The method hasProjectionPermission has the following similar APIs:

- API Name: logEvent(Landroid/net/ConnectivityMetricsEvent;)I with Similarity Score: 0.7646377682685852
  - Access Control Level: NORMAL and the following code:
int v4 = this.this$0.append(p1);
return v3;

- API Name: isUserRunning(I)Z with Similarity Score: 0.7441934943199158
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = v4.get(p1, -1);

