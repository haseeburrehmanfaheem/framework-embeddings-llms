The method vibrate has the following code snippet:

This is path 1 for the API with depth 2:
public void vibrate(int p1, int p2, String p3, CombinedVibration p4, VibrationAttributes p5, String p6, IBinder p7){
	if (p7 != 0) {
		boolean v10 = VibratorManagerService.isEffectValid(p4);
		if (v10 != 0) {
			if (p5 != 0) {
				int v12 = .getUsage();
				if (v12 != 0) {
					if (p4 == 0) {
						boolean v13 = p4.isHapticFeedbackCandidate();
						if (v13 == 0) {
							int v14 = .getFlags();
							if ((v14 & 3) == 0) {
								if (v15 != 0) {
									if (v16 != 0) {
										if (v17 != 0) {
											int v18 = .getUsage();
											if ( != v18) {
												int v19 = .getFlags();
												if ( != v19) {
													VibrationAttributes$Builder v20 = new VibrationAttributes$Builder();
													VibrationAttributes$Builder v22 = v20.setUsage();
													int v23 = .getFlags();
													VibrationAttributes$Builder v24 = v22.setFlags(, v23);
													VibrationAttributes v25 = v24.build();
													VibrationAttributes v11 = v25;
													Vibration v26 = new Vibration(p7,v27,p4,v11,p1,p2,p3,p6);
													int v27 = this.mNextVibrationId.getAndIncrement();
													if (p4 instanceof CombinedVibration$Mono == 0) {
														if (p4 instanceof CombinedVibration$Stereo == 0) {
															if (p4 instanceof CombinedVibration$Sequential == 0) {
																List v30 = p4.getEffects();
																int v31 = v30.size();
																if ( >= v31) {
																	Object v32 = v30.get();
																	VibratorManagerService.fillVibrationFallbacks(v26, v32);
																	int v34 = v30.size();
																	if ( >= v34) {
																		if ((this.mFlags & 3) <= 0) {
																			boolean v35 = ;
																			if (v35 == 0) {
																				VibrationSettings.-$$Nest$mupdateSettings(this.this$0);
																				VibrationSettings.-$$Nest$mnotifyListeners(this.this$0);
																				Vibration$Status v40 = this.mVibrationSettings.shouldIgnoreVibration(Vibration.uid, Vibration.displayId, Vibration.attrs);
																				if (v40 == 0) {
																					int v41 = VibratorManagerService.checkAppOpModeLocked(Vibration.uid, Vibration.opPkg, Vibration.attrs);
																					if (v41 == 0) {
																						if (v41 != 2) {
																							Vibration$Status v39 = Vibration$Status.IGNORED_ERROR_APP_OPS;
																							if (v39 != 0) {
																								if ( != 0) {
																									if (this.mCurrentVibration == 0) {
																										boolean v43 = v26.isRepeating();
																										if (v43 == 0) {
																											Vibration v44 = this.mCurrentVibration.getVibration();
																											boolean v45 = v44.hasEnded();
																											if (v45 == 0) {
																												int v46 = Vibration.attrs.getUsage();
																												int v47 = Vibration.attrs.getUsage();
																												int v48 = VibratorManagerService.getVibrationImportance(v46);
																												int v49 = VibratorManagerService.getVibrationImportance(v47);
																												if (v48 <= v49) {
																													boolean v50 = v44.isRepeating();
																													if (v50 == 0) {
																														Vibration$Status v42 = Vibration$Status.IGNORED_FOR_ONGOING;
																														if (v42 == 0) {
																															if ( != 0) {
																																if ( == Vibration$Status.RUNNING) {
																																	Vibration$EndInfo v51 = new Vibration$EndInfo(,,);
																																	v26.end(v51);
																																	VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
																																	this.mVibratorManagerRecords.record(v26);
																																	if (1 == 0) {
																																		long v57 = SystemClock.uptimeMillis();
																																		VibrationStats$StatsInfo v58 = v26.getStatsInfo(v57);
																																		this.mFrameworkStatsLogger.writeVibrationReportedAsync(v58);
																																		Trace.traceEnd(8388608);
																																		Vibration v1 = v26;
																																		return;
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void vibrate(int p1, int p2, String p3, CombinedVibration p4, VibrationAttributes p5, String p6, IBinder p7){
	if (p7 != 0) {
		boolean v10 = VibratorManagerService.isEffectValid(p4);
		if (v10 != 0) {
			if (p5 != 0) {
				int v12 = .getUsage();
				if (v12 != 0) {
					if (p4 == 0) {
						boolean v13 = p4.isHapticFeedbackCandidate();
						if (v13 == 0) {
							int v14 = .getFlags();
							if ((v14 & 3) == 0) {
								if (v15 != 0) {
									if (v16 != 0) {
										if (v17 != 0) {
											int v18 = .getUsage();
											if ( != v18) {
												int v19 = .getFlags();
												if ( != v19) {
													VibrationAttributes$Builder v20 = new VibrationAttributes$Builder();
													VibrationAttributes$Builder v22 = v20.setUsage();
													int v23 = .getFlags();
													VibrationAttributes$Builder v24 = v22.setFlags(, v23);
													VibrationAttributes v25 = v24.build();
													VibrationAttributes v11 = v25;
													Vibration v26 = new Vibration(p7,v27,p4,v11,p1,p2,p3,p6);
													int v27 = this.mNextVibrationId.getAndIncrement();
													if (p4 instanceof CombinedVibration$Mono == 0) {
														if (p4 instanceof CombinedVibration$Stereo == 0) {
															if (p4 instanceof CombinedVibration$Sequential == 0) {
																List v30 = p4.getEffects();
																int v31 = v30.size();
																if ( >= v31) {
																	Object v32 = v30.get();
																	VibratorManagerService.fillVibrationFallbacks(v26, v32);
																	int v34 = v30.size();
																	if ( >= v34) {
																		if ((this.mFlags & 3) <= 0) {
																			boolean v35 = ;
																			if (v35 == 0) {
																				VibrationSettings.-$$Nest$mupdateSettings(this.this$0);
																				VibrationSettings.-$$Nest$mnotifyListeners(this.this$0);
																				Vibration$Status v40 = this.mVibrationSettings.shouldIgnoreVibration(Vibration.uid, Vibration.displayId, Vibration.attrs);
																				if (v40 == 0) {
																					int v41 = VibratorManagerService.checkAppOpModeLocked(Vibration.uid, Vibration.opPkg, Vibration.attrs);
																					if (v41 == 0) {
																						if (v41 != 2) {
																							Vibration$Status v39 = Vibration$Status.IGNORED_APP_OPS;
																							if (v39 != 0) {
																								if ( != 0) {
																									if (this.mCurrentVibration == 0) {
																										boolean v43 = v26.isRepeating();
																										if (v43 == 0) {
																											Vibration v44 = this.mCurrentVibration.getVibration();
																											boolean v45 = v44.hasEnded();
																											if (v45 == 0) {
																												int v46 = Vibration.attrs.getUsage();
																												int v47 = Vibration.attrs.getUsage();
																												int v48 = VibratorManagerService.getVibrationImportance(v46);
																												int v49 = VibratorManagerService.getVibrationImportance(v47);
																												if (v48 <= v49) {
																													boolean v50 = v44.isRepeating();
																													if (v50 == 0) {
																														Vibration$Status v42 = Vibration$Status.IGNORED_FOR_ONGOING;
																														if (v42 == 0) {
																															if ( != 0) {
																																if ( == Vibration$Status.RUNNING) {
																																	Vibration$EndInfo v51 = new Vibration$EndInfo(,,);
																																	v26.end(v51);
																																	VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
																																	this.mVibratorManagerRecords.record(v26);
																																	if (1 == 0) {
																																		long v57 = SystemClock.uptimeMillis();
																																		VibrationStats$StatsInfo v58 = v26.getStatsInfo(v57);
																																		this.mFrameworkStatsLogger.writeVibrationReportedAsync(v58);
																																		Trace.traceEnd(8388608);
																																		Vibration v1 = v26;
																																		return;
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v12 = .getUsage();\nVibrationAttributes$Builder v20 = new VibrationAttributes$Builder();\nVibrationAttributes$Builder v22 = v20.setUsage();\nint v23 = .getFlags();\nVibrationAttributes$Builder v24 = v22.setFlags(, v23);\nVibrationAttributes v25 = v24.build();\nVibration v26 = new Vibration(p7,v27,p4,v11,p1,p2,p3,p6);', 'VibrationAttributes v11 = VibratorManagerService.fixupVibrationAttributes(p5, p4);\nVibration v12 = new Vibration(p7,v13,p4,v11,p1,p2,p3,p6);']

The method vibrate has the following similar APIs:

- API Name: setAlwaysOnEffect(ILjava/lang/String;ILandroid/os/CombinedVibration;Landroid/os/VibrationAttributes;)Z with Similarity Score: 0.9000124931335449
  - Access Control Level: SYS_OR_SIG and the following code:
VibrationAttributes v4 = p0.fixupVibrationAttributes(p5, p4);
SparseArray v5 = p0.fixupAlwaysOnEffectsLocked(p4);
VibratorManagerService$AlwaysOnVibration v6 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v5);

- API Name: cancelVibrate(ILandroid/os/IBinder;)V with Similarity Score: 0.7628408670425415
  - Access Control Level: NORMAL and the following code:
Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
long v5 = Binder.clearCallingIdentity();
if (this.mNextVibration == 0) {
Vibration v6 = this.mVibration;
int v9 = Vibration.attrs.getUsage();
v13.end(p1);
VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
this.mVibratorManagerRecords.record(v13);

