This is path 1 for the API with depth 2:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mVibration;
		if (Vibration.token != p2) {
			int v9 = Vibration.attrs.getUsage();
			if (v9 != 0) {
				int v10 = Vibration.attrs.getUsage();
				int v11 = Vibration.attrs.getUsage();
				if ((v10 & p2) != v11) {
					boolean v8 = ;
					if (v8 == 0) {
						boolean v7 = ;
						if (v7 == 0) {
							if (this.mNextVibration == 0) {
								Vibration v13 = this.mVibration;
								v13.end(p1);
								VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
								this.mVibratorManagerRecords.record(v13);
								if (1 == 0) {
									long v18 = SystemClock.uptimeMillis();
									VibrationStats$StatsInfo v19 = v13.getStatsInfo(v18);
									this.mFrameworkStatsLogger.writeVibrationReportedAsync(v19);
									this.mNextVibration = 0;
									if (this.mCurrentVibration == 0) {
										Vibration v21 = this.mCurrentVibration.getVibration();
										if (Vibration.token != p2) {
											int v24 = Vibration.attrs.getUsage();
											if (v24 != 0) {
												int v25 = Vibration.attrs.getUsage();
												int v26 = Vibration.attrs.getUsage();
												if ((v25 & p2) != v26) {
													boolean v23 = ;
													if (v23 == 0) {
														boolean v22 = ;
														if (v22 == 0) {
															if (Build.IS_DEBUGGABLE == 0) {
																Thread v29 = Thread.currentThread();
																if (v29 instanceof VibrationThread == 0) {
																	if (v3 == 0) {
																		String v36 = Vibration$EndInfo.status.name();
																		boolean v37 = v36.startsWith("CANCEL");
																		if (v37 != 0) {
																			Vibration$EndInfo v45 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_UNKNOWN_REASON);
																			if (0 == 0) {
																				if (this.mSignalCancelImmediate != 0) {
																					if (this.mSignalCancel == 0) {
																						this.mSignalCancelImmediate = (0 | this.mSignalCancelImmediate);
																						if (this.mSignalCancel != 0) {
																							this.mSignalCancel = ;
																							this.mLock.notify();
																							if (this.mCurrentExternalVibration == 0) {
																								VibrationAttributes$Builder v49 = new VibrationAttributes$Builder(this.mAttrs);
																								VibrationAttributes v52 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
																								VibrationAttributes v51 = v52;
																								VibrationAttributes v48 = v51;
																								int v55 = this.mUsage;
																								if (v55 != 0) {
																									int v56 = this.mUsage;
																									int v57 = this.mUsage;
																									if ((v56 & p1) != v57) {
																										boolean v54 = ;
																										if (v54 == 0) {
																											boolean v60 = this.mController.mute();
																											boolean v59 = 0;
																											Trace.traceBegin(8388608, "endExternalVibrateLocked");
																											if (this.mCurrentExternalVibration != 0) {
																												this.externalVibration.unlinkToDeath(VibratorManagerService$ExternalVibrationHolder);
																												if (0 != 0) {
																													int v72 = this.mVibrators.size();
																													if ( >= v72) {
																														Object v73 = this.mVibrators.valueAt();
																														v73.setExternalControl(0);
																														VibratorManagerService$ExternalVibrationHolder.stats.reportSetExternalControl();
																														int v76 = this.mVibrators.size();
																														if ( >= v76) {
																															this.mCurrentExternalVibration.end(p1);
																															int v79 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getUid();
																															VibrationAttributes v80 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
																															VibratorManagerService.logVibrationStatus(v79, v80, Vibration$EndInfo.status);
																															this.mVibratorManagerRecords.record(this.mCurrentExternalVibration);
																															long v83 = SystemClock.uptimeMillis();
																															VibrationStats$StatsInfo v84 = this.mCurrentExternalVibration.getStatsInfo(v83);
																															this.mFrameworkStatsLogger.writeVibrationReportedAsync(v84);
																															this.mCurrentExternalVibration = 0;
																															Trace.traceEnd(8388608);
																															Binder.restoreCallingIdentity(v5);
																															Trace.traceEnd(8388608);
																															return;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mVibration;
		if (Vibration.token != p2) {
			boolean v8 = VibratorManagerService.shouldCancelVibration(Vibration.attrs, p1);
			if (v8 == 0) {
				boolean v7 = ;
				if (v7 == 0) {
					if (this.mNextVibration == 0) {
						Vibration v10 = this.mNextVibration.getVibration();
						VibratorManagerService.endVibrationLocked(v10, v3, 1);
						this.mNextVibration = 0;
						if (this.mCurrentVibration == 0) {
							Vibration v12 = this.mVibration;
							if (Vibration.token != p2) {
								boolean v14 = VibratorManagerService.shouldCancelVibration(Vibration.attrs, p1);
								if (v14 == 0) {
									boolean v13 = ;
									if (v13 == 0) {
										if (Build.IS_DEBUGGABLE == 0) {
											VibrationStepConductor.expectIsVibrationThread(0);
											if (v3 == 0) {
												String v17 = Vibration$EndInfo.status.name();
												boolean v18 = v17.startsWith("CANCEL");
												if (v18 != 0) {
													Vibration$EndInfo v26 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_UNKNOWN_REASON);
													if (0 == 0) {
														if (this.mSignalCancelImmediate != 0) {
															if (this.mSignalCancel == 0) {
																this.mSignalCancelImmediate = (0 | this.mSignalCancelImmediate);
																if (this.mSignalCancel != 0) {
																	this.mSignalCancel = ;
																	this.mLock.notify();
																	if (this.mCurrentExternalVibration == 0) {
																		VibrationAttributes$Builder v30 = new VibrationAttributes$Builder(this.mAttrs);
																		VibrationAttributes v32 = v30.build();
																		VibrationAttributes v29 = v32;
																		int v34 = v29.getUsage();
																		if (v34 != 0) {
																			int v35 = v29.getUsage();
																			int v36 = v29.getUsage();
																			if ((v35 & p1) != v36) {
																				boolean v33 = ;
																				if (v33 == 0) {
																					boolean v38 = this.externalVibration.mute();
																					Trace.traceBegin(8388608, "endExternalVibrateLocked");
																					if (this.mCurrentExternalVibration != 0) {
																						this.mCurrentExternalVibration.unlinkToDeath();
																						if (0 != 0) {
																							VibratorManagerService.setExternalControl(0, VibratorManagerService$ExternalVibrationHolder.stats);
																							VibratorManagerService.endVibrationAndWriteStatsLocked(this.mCurrentExternalVibration, v3);
																							this.mCurrentExternalVibration = 0;
																							Trace.traceEnd(8388608);
																							Binder.restoreCallingIdentity(v5);
																							Trace.traceEnd(8388608);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mNextVibration.getVibration();
		boolean v7 = p0.shouldCancelVibration(v6, p1, p2);
		if (v7 == 0) {
			p0.clearNextVibrationLocked(v3);
			if (this.mCurrentVibration == 0) {
				Vibration v9 = this.mCurrentVibration.getVibration();
				boolean v10 = p0.shouldCancelVibration(v9, p1, p2);
				if (v10 == 0) {
					this.mCurrentVibration.notifyCancelled(v3, 0);
					if (this.mCurrentExternalVibration == 0) {
						VibrationAttributes v12 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
						boolean v13 = p0.shouldCancelVibration(v12, p1);
						if (v13 == 0) {
							this.mCurrentExternalVibration.mute();
							p0.endExternalVibrateLocked(v3, 0);
							Binder.restoreCallingIdentity(v5);
							Trace.traceEnd(8388608);
							return;
						}
					}
				}
			}
		}
	}
}
