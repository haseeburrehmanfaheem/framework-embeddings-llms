The method setAlwaysOnEffect has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		boolean v3 = VibratorManagerService.isEffectValid(p4);
		if (v3 != 0) {
			if (p5 != 0) {
				int v5 = this.mUsage;
				if (v5 != 0) {
					if (p4 == 0) {
						boolean v6 = p4.isHapticFeedbackCandidate();
						if (v6 == 0) {
							int v7 = this.mFlags;
							if ((v7 & 3) == 0) {
								if (v8 != 0) {
									if (v9 != 0) {
										if (v10 != 0) {
											int v11 = this.mUsage;
											if ( != v11) {
												int v12 = this.mFlags;
												if ( != v12) {
													VibrationAttributes$Builder v13 = new VibrationAttributes$Builder();
													this.mOriginalAudioUsage = 0;
													this.mUsage = ;
													VibrationAttributes$Builder v15 = VibrationAttributes$Builder;
													int v16 = this.mFlags;
													this.mFlags = ((this.mFlags & (~(v16 & 3))) | ( & (v16 & 3)));
													VibrationAttributes$Builder v17 = VibrationAttributes$Builder;
													VibrationAttributes v19 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
													VibrationAttributes v18 = v19;
													VibrationAttributes v4 = v18;
													Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
													if (p4 instanceof CombinedVibration$Mono == 0) {
														VibrationEffect v23 = this.mEffect;
														VibratorManagerService$$ExternalSyntheticLambda2 v24 = new VibratorManagerService$$ExternalSyntheticLambda2(v23);
														SparseArray v27 = new SparseArray(v28);
														int v28 = this.mVibrators.size();
														int v30 = this.mVibrators.size();
														if ( >= v30) {
															int v31 = this.mVibrators.keyAt();
															Object v32 = this.mVibrators.valueAt();
															Object v33 = v24.apply(v32);
															v27.put(v31, v33);
															int v35 = this.mVibrators.size();
															if ( >= v35) {
																SparseArray v26 = v27;
																SparseArray v36 = new SparseArray();
																int v38 = .size();
																if ( >= v38) {
																	Object v39 = .valueAt();
																	if (v39 instanceof VibrationEffect$Composed == 0) {
																		List v41 = v39.getSegments();
																		int v42 = v41.size();
																		if (v42 != 1) {
																			List v43 = v39.getSegments();
																			Object v44 = v43.get(0);
																			if (v44 instanceof PrebakedSegment == 0) {
																				PrebakedSegment v40 = v44;
																				if (v40 != 0) {
																					int v45 = .keyAt();
																					Object v46 = this.mVibrators.get(v45);
																					if (v46 == 0) {
																						boolean v48 = this.mVibratorInfo.hasCapability(64);
																						boolean v47 = v48;
																						if (v47 == 0) {
																							v36.put(v45, v40);
																							int v50 = .size();
																							if ( >= v50) {
																								int v51 = v36.size();
																								if (v51 != 0) {
																									Trace.traceEnd(8388608);
																									SparseArray v21 = 0;
																									if (v21 != 0) {
																										VibratorManagerService$AlwaysOnVibration v53 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v21);
																										this.mAlwaysOnEffects.put(p3, v53);
																										int v57 = VibratorManagerService$AlwaysOnVibration.effects.size();
																										if ( >= v57) {
																											int v58 = VibratorManagerService$AlwaysOnVibration.effects.keyAt();
																											Object v59 = this.mVibrators.get(v58);
																											Object v60 = VibratorManagerService$AlwaysOnVibration.effects.valueAt();
																											if (v59 != 0) {
																												Vibration$Status v62 = this.mVibrationSettings.shouldIgnoreVibration(VibratorManagerService$AlwaysOnVibration.uid, 0, VibratorManagerService$AlwaysOnVibration.attrs);
																												if (v62 == 0) {
																													int v63 = VibratorManagerService.checkAppOpModeLocked(VibratorManagerService$AlwaysOnVibration.uid, VibratorManagerService$AlwaysOnVibration.opPkg, VibratorManagerService$AlwaysOnVibration.attrs);
																													if (v63 == 0) {
																														if (v63 != 2) {
																															Vibration$Status v61 = Vibration$Status.IGNORED_ERROR_APP_OPS;
																															if (v61 != 0) {
																																int v64 = this.mUsage;
																																int v66 = this.mSettingsController.getCurrentIntensity(v64);
																																if (v66 != 0) {
																																	int v67 = this.mSettingsController.getDefaultIntensity(v64);
																																	int v68 = VibrationScaler.intensityToEffectStrength();
																																	PrebakedSegment v69 = v60.applyEffectStrength(v68);
																																	PrebakedSegment v65 = v69;
																																	boolean v71 = this.mVibratorInfo.hasCapability(64);
																																	if (v71 != 0) {
																																		if ( != 0) {
																																			int v72 = .getEffectId();
																																			int v73 = .getEffectStrength();
																																			this.mNativeWrapper.alwaysOnEnable(VibratorManagerService$AlwaysOnVibration.alwaysOnId, v72, v73);
																																			int v75 = VibratorManagerService$AlwaysOnVibration.effects.size();
																																			if ( >= v75) {
																																				Trace.traceEnd(8388608);
																																				return 1;
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		boolean v3 = VibratorManagerService.isEffectValid(p4);
		if (v3 != 0) {
			if (p5 != 0) {
				int v5 = this.mUsage;
				if (v5 != 0) {
					if (p4 == 0) {
						boolean v6 = p4.isHapticFeedbackCandidate();
						if (v6 == 0) {
							int v7 = this.mFlags;
							if ((v7 & 3) == 0) {
								if (v8 != 0) {
									if (v9 != 0) {
										if (v10 != 0) {
											int v11 = this.mUsage;
											if ( != v11) {
												int v12 = this.mFlags;
												if ( != v12) {
													VibrationAttributes$Builder v13 = new VibrationAttributes$Builder();
													this.mOriginalAudioUsage = 0;
													this.mUsage = ;
													VibrationAttributes$Builder v15 = VibrationAttributes$Builder;
													int v16 = this.mFlags;
													this.mFlags = ((this.mFlags & (~(v16 & 3))) | ( & (v16 & 3)));
													VibrationAttributes$Builder v17 = VibrationAttributes$Builder;
													VibrationAttributes v19 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
													VibrationAttributes v18 = v19;
													VibrationAttributes v4 = v18;
													Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
													if (p4 instanceof CombinedVibration$Mono == 0) {
														VibrationEffect v23 = this.mEffect;
														VibratorManagerService$$ExternalSyntheticLambda2 v24 = new VibratorManagerService$$ExternalSyntheticLambda2(v23);
														SparseArray v27 = new SparseArray(v28);
														int v28 = this.mVibrators.size();
														int v30 = this.mVibrators.size();
														if ( >= v30) {
															int v31 = this.mVibrators.keyAt();
															Object v32 = this.mVibrators.valueAt();
															Object v33 = v24.apply(v32);
															v27.put(v31, v33);
															int v35 = this.mVibrators.size();
															if ( >= v35) {
																SparseArray v26 = v27;
																SparseArray v36 = new SparseArray();
																int v38 = .size();
																if ( >= v38) {
																	Object v39 = .valueAt();
																	if (v39 instanceof VibrationEffect$Composed == 0) {
																		List v41 = v39.getSegments();
																		int v42 = v41.size();
																		if (v42 != 1) {
																			List v43 = v39.getSegments();
																			Object v44 = v43.get(0);
																			if (v44 instanceof PrebakedSegment == 0) {
																				PrebakedSegment v40 = v44;
																				if (v40 != 0) {
																					int v45 = .keyAt();
																					Object v46 = this.mVibrators.get(v45);
																					if (v46 == 0) {
																						boolean v48 = this.mVibratorInfo.hasCapability(64);
																						boolean v47 = v48;
																						if (v47 == 0) {
																							v36.put(v45, v40);
																							int v50 = .size();
																							if ( >= v50) {
																								int v51 = v36.size();
																								if (v51 != 0) {
																									Trace.traceEnd(8388608);
																									SparseArray v21 = v36;
																									if (v21 != 0) {
																										VibratorManagerService$AlwaysOnVibration v53 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v21);
																										this.mAlwaysOnEffects.put(p3, v53);
																										int v57 = VibratorManagerService$AlwaysOnVibration.effects.size();
																										if ( >= v57) {
																											int v58 = VibratorManagerService$AlwaysOnVibration.effects.keyAt();
																											Object v59 = this.mVibrators.get(v58);
																											Object v60 = VibratorManagerService$AlwaysOnVibration.effects.valueAt();
																											if (v59 != 0) {
																												Vibration$Status v62 = this.mVibrationSettings.shouldIgnoreVibration(VibratorManagerService$AlwaysOnVibration.uid, 0, VibratorManagerService$AlwaysOnVibration.attrs);
																												if (v62 == 0) {
																													int v63 = VibratorManagerService.checkAppOpModeLocked(VibratorManagerService$AlwaysOnVibration.uid, VibratorManagerService$AlwaysOnVibration.opPkg, VibratorManagerService$AlwaysOnVibration.attrs);
																													if (v63 == 0) {
																														if (v63 != 2) {
																															Vibration$Status v61 = Vibration$Status.IGNORED_ERROR_APP_OPS;
																															if (v61 != 0) {
																																int v64 = this.mUsage;
																																int v66 = this.mSettingsController.getCurrentIntensity(v64);
																																if (v66 != 0) {
																																	int v67 = this.mSettingsController.getDefaultIntensity(v64);
																																	int v68 = VibrationScaler.intensityToEffectStrength();
																																	PrebakedSegment v69 = v60.applyEffectStrength(v68);
																																	PrebakedSegment v65 = v69;
																																	boolean v71 = this.mVibratorInfo.hasCapability(64);
																																	if (v71 != 0) {
																																		if ( != 0) {
																																			int v72 = .getEffectId();
																																			int v73 = .getEffectStrength();
																																			this.mNativeWrapper.alwaysOnEnable(VibratorManagerService$AlwaysOnVibration.alwaysOnId, v72, v73);
																																			int v75 = VibratorManagerService$AlwaysOnVibration.effects.size();
																																			if ( >= v75) {
																																				Trace.traceEnd(8388608);
																																				return 1;
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		boolean v3 = VibratorManagerService.isEffectValid(p4);
		if (v3 != 0) {
			if (p5 != 0) {
				int v5 = this.mUsage;
				if (v5 != 0) {
					if (p4 == 0) {
						boolean v6 = p4.isHapticFeedbackCandidate();
						if (v6 == 0) {
							int v7 = this.mFlags;
							if ((v7 & 3) == 0) {
								if (v8 != 0) {
									if (v9 != 0) {
										if (v10 != 0) {
											int v11 = this.mUsage;
											if ( != v11) {
												int v12 = this.mFlags;
												if ( != v12) {
													VibrationAttributes$Builder v13 = new VibrationAttributes$Builder();
													this.mOriginalAudioUsage = 0;
													this.mUsage = ;
													VibrationAttributes$Builder v15 = VibrationAttributes$Builder;
													int v16 = this.mFlags;
													this.mFlags = ((this.mFlags & (~(v16 & 3))) | ( & (v16 & 3)));
													VibrationAttributes$Builder v17 = VibrationAttributes$Builder;
													VibrationAttributes v19 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
													VibrationAttributes v18 = v19;
													VibrationAttributes v4 = v18;
													Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
													if (p4 instanceof CombinedVibration$Mono == 0) {
														VibrationEffect v23 = this.mEffect;
														VibratorManagerService$$ExternalSyntheticLambda2 v24 = new VibratorManagerService$$ExternalSyntheticLambda2(v23);
														SparseArray v27 = new SparseArray(v28);
														int v28 = this.mVibrators.size();
														int v30 = this.mVibrators.size();
														if ( >= v30) {
															int v31 = this.mVibrators.keyAt();
															Object v32 = this.mVibrators.valueAt();
															Object v33 = v24.apply(v32);
															v27.put(v31, v33);
															int v35 = this.mVibrators.size();
															if ( >= v35) {
																SparseArray v26 = v27;
																SparseArray v36 = new SparseArray();
																int v38 = .size();
																if ( >= v38) {
																	Object v39 = .valueAt();
																	if (v39 instanceof VibrationEffect$Composed == 0) {
																		List v41 = v39.getSegments();
																		int v42 = v41.size();
																		if (v42 != 1) {
																			List v43 = v39.getSegments();
																			Object v44 = v43.get(0);
																			if (v44 instanceof PrebakedSegment == 0) {
																				PrebakedSegment v40 = v44;
																				if (v40 != 0) {
																					int v45 = .keyAt();
																					Object v46 = this.mVibrators.get(v45);
																					if (v46 == 0) {
																						boolean v48 = this.mVibratorInfo.hasCapability(64);
																						boolean v47 = v48;
																						if (v47 == 0) {
																							v36.put(v45, v40);
																							int v50 = .size();
																							if ( >= v50) {
																								int v51 = v36.size();
																								if (v51 != 0) {
																									Trace.traceEnd(8388608);
																									SparseArray v21 = 0;
																									if (v21 != 0) {
																										VibratorManagerService$AlwaysOnVibration v53 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v21);
																										this.mAlwaysOnEffects.put(p3, v53);
																										int v57 = VibratorManagerService$AlwaysOnVibration.effects.size();
																										if ( >= v57) {
																											int v58 = VibratorManagerService$AlwaysOnVibration.effects.keyAt();
																											Object v59 = this.mVibrators.get(v58);
																											Object v60 = VibratorManagerService$AlwaysOnVibration.effects.valueAt();
																											if (v59 != 0) {
																												Vibration$Status v62 = this.mVibrationSettings.shouldIgnoreVibration(VibratorManagerService$AlwaysOnVibration.uid, 0, VibratorManagerService$AlwaysOnVibration.attrs);
																												if (v62 == 0) {
																													int v63 = VibratorManagerService.checkAppOpModeLocked(VibratorManagerService$AlwaysOnVibration.uid, VibratorManagerService$AlwaysOnVibration.opPkg, VibratorManagerService$AlwaysOnVibration.attrs);
																													if (v63 == 0) {
																														if (v63 != 2) {
																															Vibration$Status v61 = Vibration$Status.IGNORED_APP_OPS;
																															if (v61 != 0) {
																																int v64 = this.mUsage;
																																int v66 = this.mSettingsController.getCurrentIntensity(v64);
																																if (v66 != 0) {
																																	int v67 = this.mSettingsController.getDefaultIntensity(v64);
																																	int v68 = VibrationScaler.intensityToEffectStrength();
																																	PrebakedSegment v69 = v60.applyEffectStrength(v68);
																																	PrebakedSegment v65 = v69;
																																	boolean v71 = this.mVibratorInfo.hasCapability(64);
																																	if (v71 != 0) {
																																		if ( != 0) {
																																			int v72 = .getEffectId();
																																			int v73 = .getEffectStrength();
																																			this.mNativeWrapper.alwaysOnEnable(VibratorManagerService$AlwaysOnVibration.alwaysOnId, v72, v73);
																																			int v75 = VibratorManagerService$AlwaysOnVibration.effects.size();
																																			if ( >= v75) {
																																				Trace.traceEnd(8388608);
																																				return 1;
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['if (p4 != 0) {\nboolean v3 = VibratorManagerService.isEffectValid(p4);\nint v5 = this.mUsage;\nVibrationAttributes$Builder v13 = new VibrationAttributes$Builder();\nthis.mNativeWrapper.alwaysOnEnable(VibratorManagerService$AlwaysOnVibration.alwaysOnId, v72, v73);', 'VibrationAttributes v4 = p0.fixupVibrationAttributes(p5, p4);\nSparseArray v5 = p0.fixupAlwaysOnEffectsLocked(p4);\nVibratorManagerService$AlwaysOnVibration v6 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v5);', 'if (p4 instanceof CombinedVibration$Mono == 0) {\nVibrationEffect v21 = p4.getEffect();\nVibratorManagerService$$ExternalSyntheticLambda2 v22 = new VibratorManagerService$$ExternalSyntheticLambda2(v21);\nSparseArray v24 = VibratorManagerService.transformAllVibratorsLocked(v22);']

The method setAlwaysOnEffect has the following similar APIs:

- API Name: vibrate(IILjava/lang/String;Landroid/os/CombinedVibration;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)V with Similarity Score: 0.9000124931335449
  - Access Control Level: SYS_OR_SIG and the following code:
VibrationAttributes v11 = VibratorManagerService.fixupVibrationAttributes(p5, p4);
Vibration v12 = new Vibration(p7,v13,p4,v11,p1,p2,p3,p6);

- API Name: cancelVibrate(ILandroid/os/IBinder;)V with Similarity Score: 0.764609694480896
  - Access Control Level: NORMAL and the following code:
Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
long v5 = Binder.clearCallingIdentity();
if (this.mNextVibration == 0) {
Vibration v6 = this.mVibration;
int v9 = Vibration.attrs.getUsage();
v13.end(p1);
VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
this.mVibratorManagerRecords.record(v13);

