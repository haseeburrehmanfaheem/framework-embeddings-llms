The method setToggleSensorPrivacy has the following code snippet:

This is path 1 for the API with depth 2:
public void setToggleSensorPrivacy(int p1, int p2, int p3, boolean p4){
	if (p1 != -2) {
		int v2 = this.mCurrentUser;
		if (p3 != 1) {
			SensorPrivacyService$CallStateHelper v4 = this.mCallStateHelper;
			boolean v5 = this.mIsInEmergencyCall;
			if (v5 == 0) {
				Context v8 = SensorPrivacyService.-$$Nest$fgetmContext(this.this$0);
				Resources v9 = v8.getResources();
				boolean v10 = v9.getBoolean(17891749);
				boolean v6 = v10;
				if (v6 == 0) {
					KeyguardManager v11 = this.mKeyguardManager;
					if (v11 == 0) {
						KeyguardManager v12 = this.mKeyguardManager;
						boolean v13 = v12.isDeviceLocked();
						if (v13 == 0) {
							String v14 = this.TAG;
							boolean v3 = 0;
							if (v3 != 0) {
								p0.setToggleSensorPrivacyUnchecked(1, , p2, p3, p4);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setToggleSensorPrivacy(int p1, int p2, int p3, boolean p4){
	if (p1 != -2) {
		int v2 = this.mCurrentUser;
		if (p3 != 1) {
			SensorPrivacyService$CallStateHelper v4 = this.mCallStateHelper;
			boolean v5 = this.mIsInEmergencyCall;
			if (v5 == 0) {
				Context v8 = SensorPrivacyService.-$$Nest$fgetmContext(this.this$0);
				Resources v9 = v8.getResources();
				boolean v10 = v9.getBoolean(17891749);
				boolean v6 = v10;
				if (v6 == 0) {
					KeyguardManager v11 = this.mKeyguardManager;
					if (v11 == 0) {
						KeyguardManager v12 = this.mKeyguardManager;
						boolean v13 = v12.isDeviceLocked();
						if (v13 == 0) {
							String v14 = this.TAG;
							boolean v3 = 0;
							if (v3 != 0) {
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setToggleSensorPrivacy(int p1, int p2, int p3, boolean p4){
	if (p1 != -2) {
		int v2 = this.mCurrentUser;
		String v14 = this.TAG;
		boolean v3 = 0;
		if (v3 != 0) {
			p0.setToggleSensorPrivacyUnchecked(1, , p2, p3, p4);
			return;
		}
	}
}

and the following sink code:
['SensorPrivacyService$SensorPrivacyServiceImpl$$ExternalSyntheticLambda3 v18 = new SensorPrivacyService$SensorPrivacyServiceImpl$$ExternalSyntheticLambda3(SensorPrivacyService$SensorPrivacyServiceImpl,1,,p3,v17,p4,p2);\nthis.mSensorPrivacyStateController.atomic(v18);', 'boolean v3 = p0.canChangeToggleSensorPrivacy(, p3);\nif (v3 != 0) {\np0.setToggleSensorPrivacyUnchecked(1, , p2, p3, p4);']

The method setToggleSensorPrivacy has the following similar APIs:

- API Name: isCombinedToggleSensorPrivacyEnabled(I)Z with Similarity Score: 0.9251060485839844
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v1 = p0.isToggleSensorPrivacyEnabled(1, p1);
boolean v2 = p0.isToggleSensorPrivacyEnabled(2, p1);

- API Name: setToggleSensorPrivacyForProfileGroup(IIIZ)V with Similarity Score: 0.7814546227455139
  - Access Control Level: NORMAL and the following code:
int v2 = this.mCurrentUser;
UserManagerInternal v3 = this.mUserManagerInternal;
int v4 = v3.getProfileParentId();
SensorPrivacyService$SensorPrivacyServiceImpl$$ExternalSyntheticLambda2 v5 = new SensorPrivacyService$SensorPrivacyServiceImpl$$ExternalSyntheticLambda2(p0,v4,p2,p3,p4);

