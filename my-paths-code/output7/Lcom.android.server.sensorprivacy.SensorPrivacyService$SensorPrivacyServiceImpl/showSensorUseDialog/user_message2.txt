The method showSensorUseDialog has the following code snippet:

This is path 1 for the API with depth 2:
public void showSensorUseDialog(int p1){
	int v5 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);
	SensorState v6 = this.mSensorPrivacyStateController.getState(1, v5, p1);
	boolean v7 = v6.isEnabled();
	boolean v3 = v7;
	if (v3 != 0) {
		int v10 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);
		SensorState v11 = this.mSensorPrivacyStateController.getState(2, v10, p1);
		boolean v12 = v11.isEnabled();
		boolean v8 = v12;
		if (v8 == 0) {
			boolean v2 = ;
			if (v2 != 0) {
				int v13 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);
				UserHandle v14 = UserHandle.of(v13);
				p0.enqueueSensorUseReminderDialogAsync(-1, v14, "android", p1);
				return;
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void showSensorUseDialog(int p1){
	int v5 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);
	SensorState v6 = this.mSensorPrivacyStateController.getState(1, v5, p1);
	boolean v7 = v6.isEnabled();
	boolean v3 = v7;
	if (v3 != 0) {
		int v10 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);
		SensorState v11 = this.mSensorPrivacyStateController.getState(2, v10, p1);
		boolean v12 = v11.isEnabled();
		boolean v8 = v12;
		if (v8 == 0) {
			boolean v2 = ;
			if (v2 != 0) {
				return;
			}
		}
	}
}

and the following sink code:
['int v5 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);\nSensorState v6 = this.mSensorPrivacyStateController.getState(1, v5, p1);\nboolean v7 = v6.isEnabled();\nif (v3 != 0) {\nint v10 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);\nSensorState v11 = this.mSensorPrivacyStateController.getState(2, v10, p1);\nboolean v12 = v11.isEnabled();\nif (v8 == 0) {\nint v13 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);\nUserHandle v14 = UserHandle.of(v13);\np0.enqueueSensorUseReminderDialogAsync(-1, v14, "android", p1);', 'boolean v3 = SensorPrivacyService$SensorPrivacyServiceImpl.isToggleSensorPrivacyEnabled(1, p1);\nif (v3 != 0) {\nboolean v4 = SensorPrivacyService$SensorPrivacyServiceImpl.isToggleSensorPrivacyEnabled(2, p1);\nif (v4 == 0) {\nint v5 = this.mCurrentUser;\nUserHandle v6 = UserHandle.of(v5);\nSensorPrivacyService$SensorPrivacyServiceImpl$$ExternalSyntheticLambda4 v8 = new SensorPrivacyService$SensorPrivacyServiceImpl$$ExternalSyntheticLambda4();\nInteger v10 = Integer.valueOf(-1);\nInteger v11 = Integer.valueOf(p1);\nMessage v12 = PooledLambda.obtainMessage(v8, SensorPrivacyService$SensorPrivacyServiceImpl, v10, v6, "android", v11);\nboolean v13 = this.mHandler.sendMessage(v12);', 'boolean v2 = p0.isCombinedToggleSensorPrivacyEnabled(p1);\nif (v2 != 0) {\nint v3 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);\nUserHandle v4 = UserHandle.of(v3);\np0.enqueueSensorUseReminderDialogAsync(-1, v4, "android", p1);']

The method showSensorUseDialog has the following similar APIs:

- API Name: isCombinedToggleSensorPrivacyEnabled(I)Z with Similarity Score: 0.8034377694129944
  - Access Control Level: SYS_OR_SIG and the following code:
SensorState v4 = this.mSensorPrivacyStateController.getState(1, v3, p1);
boolean v5 = v4.isEnabled();
int v8 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);
SensorState v9 = this.mSensorPrivacyStateController.getState(2, v8, p1);
boolean v10 = v9.isEnabled();

- API Name: isToggleSensorPrivacyEnabled(II)Z with Similarity Score: 0.7877594232559204
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);
SensorState v3 = this.mSensorPrivacyStateController.getState(p1, v2, p2);
boolean v4 = v3.isEnabled();
return v4;

