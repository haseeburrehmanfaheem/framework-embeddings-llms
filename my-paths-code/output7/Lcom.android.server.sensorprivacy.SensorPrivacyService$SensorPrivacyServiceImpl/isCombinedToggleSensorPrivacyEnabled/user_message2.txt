The method isCombinedToggleSensorPrivacyEnabled has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isCombinedToggleSensorPrivacyEnabled(int p1){
	int v3 = this.mCurrentUser;
	SensorState v4 = this.mSensorPrivacyStateController.getState(1, v3, p1);
	int v6 = SensorState.getState();
	if (v6 != 1) {
		boolean v5 = ;
		boolean v1 = v5;
		if (v1 != 0) {
			int v9 = this.mCurrentUser;
			SensorState v10 = this.mSensorPrivacyStateController.getState(2, v9, p1);
			int v12 = SensorState.getState();
			if (v12 != 1) {
				boolean v11 = ;
				boolean v7 = v11;
				if (v7 == 0) {
					return ;
				}
			}
		}
	}
}

and the following sink code:
['SensorState v4 = this.mSensorPrivacyStateController.getState(1, v3, p1);\nboolean v5 = v4.isEnabled();\nint v8 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);\nSensorState v9 = this.mSensorPrivacyStateController.getState(2, v8, p1);\nboolean v10 = v9.isEnabled();', 'boolean v1 = p0.isToggleSensorPrivacyEnabled(1, p1);\nboolean v2 = p0.isToggleSensorPrivacyEnabled(2, p1);']

The method isCombinedToggleSensorPrivacyEnabled has the following similar APIs:

- API Name: setToggleSensorPrivacy(IIIZ)V with Similarity Score: 0.9251060485839844
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = p0.canChangeToggleSensorPrivacy(, p3);
if (v3 != 0) {
p0.setToggleSensorPrivacyUnchecked(1, , p2, p3, p4);

- API Name: isToggleSensorPrivacyEnabled(II)Z with Similarity Score: 0.901045560836792
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = SensorPrivacyService.-$$Nest$fgetmCurrentUser(this.this$0);
SensorState v3 = this.mSensorPrivacyStateController.getState(p1, v2, p2);
boolean v4 = v3.isEnabled();
return v4;

