This is path 1 for the API with depth 2:
public List getConfiguredSubscriptionGroups(String p1){
	int v7 = Binder.getCallingUid();
	int v6 = v7;
	if (v6 == 1000) {
		UserHandle v8 = UserHandle.getUserHandleForUid(v6);
		boolean v9 = v8.isSystem();
		if (v9 == 0) {
			ArrayList v10 = new ArrayList();
			Set v12 = this.mConfigs.keySet();
			Iterator v13 = v12.iterator();
			boolean v14 = v13.hasNext();
			if (v14 == 0) {
				Object v15 = v13.next();
				if (v16 != 0) {
					long v18 = Binder.clearCallingIdentity();
					Object v19 = this.mConfigs.get(v15);
					if (v19 == 0) {
						String v20 = this.mPackageName;
						boolean v21 = p1.equals(v20);
						if (v21 == 0) {
							Binder.restoreCallingIdentity(v18);
							boolean v17 = 1;
							if (v17 == 0) {
								boolean v23 = v10.add(v15);
								boolean v24 = v13.hasNext();
								if (v24 == 0) {
									return v10;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public List getConfiguredSubscriptionGroups(String p1){
	int v6 = this.mDeps.getBinderCallingUid();
	if (v6 == 1000) {
		UserHandle v7 = UserHandle.getUserHandleForUid(v6);
		boolean v8 = v7.isSystem();
		if (v8 == 0) {
			ArrayList v9 = new ArrayList();
			Set v11 = this.mConfigs.keySet();
			Iterator v12 = v11.iterator();
			boolean v13 = v12.hasNext();
			if (v13 == 0) {
				Object v14 = v12.next();
				if (v15 != 0) {
					long v17 = Binder.clearCallingIdentity();
					Object v18 = this.mConfigs.get(v14);
					if (v18 == 0) {
						String v19 = v18.getProvisioningPackageName();
						boolean v20 = p1.equals(v19);
						if (v20 == 0) {
							Binder.restoreCallingIdentity(v17);
							boolean v16 = 1;
							if (v16 == 0) {
								boolean v22 = v9.add(v14);
								boolean v23 = v12.hasNext();
								if (v23 == 0) {
									return v9;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public List getConfiguredSubscriptionGroups(String p1){
	p0.enforcePrimaryUser();
	ArrayList v6 = new ArrayList();
	Set v8 = this.mConfigs.keySet();
	Iterator v9 = v8.iterator();
	boolean v10 = v9.hasNext();
	if (v10 == 0) {
		Object v11 = v9.next();
		if (v12 != 0) {
			boolean v13 = p0.isProvisioningPackageForConfig(v11, p1);
			if (v13 == 0) {
				boolean v14 = v6.add(v11);
				boolean v15 = v9.hasNext();
				if (v15 == 0) {
					return v6;
				}
			}
		}
	}
}
