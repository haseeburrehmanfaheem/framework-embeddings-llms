The method reportPlaybackMetrics has the following code snippet:

This is path 1 for the API with depth 2:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													StatsEvent$Builder v32 = StatsEvent.newBuilder();
													StatsEvent$Builder v33 = v32.setAtomId(320);
													if (v1 != 0) {
														int v34 = Binder.getCallingUid();
														StatsEvent$Builder v35 = v33.writeInt();
														StatsEvent$Builder v36 = v35.writeString(p1);
														long v37 = p2.getMediaDurationMillis();
														StatsEvent$Builder v38 = v36.writeLong(v37);
														int v39 = p2.getStreamSource();
														StatsEvent$Builder v40 = v38.writeInt(v39);
														int v41 = p2.getStreamType();
														StatsEvent$Builder v42 = v40.writeInt(v41);
														int v43 = p2.getPlaybackType();
														StatsEvent$Builder v44 = v42.writeInt(v43);
														int v45 = p2.getDrmType();
														StatsEvent$Builder v46 = v44.writeInt(v45);
														int v47 = p2.getContentType();
														StatsEvent$Builder v48 = v46.writeInt(v47);
														String v49 = p2.getPlayerName();
														StatsEvent$Builder v50 = v48.writeString(v49);
														String v51 = p2.getPlayerVersion();
														StatsEvent$Builder v52 = v50.writeString(v51);
														[B v53 = new [B(0);
														StatsEvent$Builder v54 = v52.writeByteArray(v53);
														int v55 = p2.getVideoFramesPlayed();
														StatsEvent$Builder v56 = v54.writeInt(v55);
														int v57 = p2.getVideoFramesDropped();
														StatsEvent$Builder v58 = v56.writeInt(v57);
														int v59 = p2.getAudioUnderrunCount();
														StatsEvent$Builder v60 = v58.writeInt(v59);
														long v61 = p2.getNetworkBytesRead();
														StatsEvent$Builder v62 = v60.writeLong(v61);
														long v63 = p2.getLocalBytesRead();
														StatsEvent$Builder v64 = v62.writeLong(v63);
														long v65 = p2.getNetworkTransferDurationMillis();
														StatsEvent$Builder v66 = v64.writeLong(v65);
														byte[] v67 = p2.getDrmSessionId();
														String v68 = Base64.encodeToString(v67, 0);
														StatsEvent$Builder v69 = v66.writeString(v68);
														StatsEvent$Builder v70 = v69.usePooledBuffer();
														StatsEvent v71 = v70.build();
														StatsLog.write(v71);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v6 = 2;
			Integer v8 = Integer.valueOf(v6);
			this.mMode = v8;
			Binder.restoreCallingIdentity(v5);
			Integer v11 = this.mMode;
			int v12 = v11.intValue();
			if (v12 != 1) {
				Integer v13 = this.mMode;
				int v14 = v13.intValue();
				if (v14 != 0) {
					Context v15 = this.this$0.getContext();
					PackageManager v16 = v15.getPackageManager();
					String v17 = v16.getPackagesForUid(v3);
					if (v17 == 0) {
						if (v17.length != 0) {
							Integer v18 = this.mMode;
							int v19 = v18.intValue();
							if (v19 != 2) {
								List v20 = this.mBlockList;
								if (v20 != 0) {
									List v22 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v21 = v22;
									this.mBlockList = v21;
									List v24 = this.mBlockList;
									if (v24 != 0) {
										List v25 = this.mBlockList;
										boolean v27 = MediaMetricsManagerService$BinderService.inList(v17, v25);
										if (v27 == 0) {
											int v28 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v29 = Integer.valueOf(v28);
											Integer v26 = v29;
											if (v26 == 0) {
												int v30 = v26.intValue();
												int v1 = v30;
												if (v1 != 99999) {
													StatsEvent$Builder v31 = StatsEvent.newBuilder();
													StatsEvent$Builder v32 = v31.setAtomId(320);
													if (v1 != 0) {
														int v33 = Binder.getCallingUid();
														StatsEvent$Builder v34 = v32.writeInt();
														StatsEvent$Builder v35 = v34.writeString(p1);
														long v36 = p2.getMediaDurationMillis();
														StatsEvent$Builder v37 = v35.writeLong(v36);
														int v38 = p2.getStreamSource();
														StatsEvent$Builder v39 = v37.writeInt(v38);
														int v40 = p2.getStreamType();
														StatsEvent$Builder v41 = v39.writeInt(v40);
														int v42 = p2.getPlaybackType();
														StatsEvent$Builder v43 = v41.writeInt(v42);
														int v44 = p2.getDrmType();
														StatsEvent$Builder v45 = v43.writeInt(v44);
														int v46 = p2.getContentType();
														StatsEvent$Builder v47 = v45.writeInt(v46);
														String v48 = p2.getPlayerName();
														StatsEvent$Builder v49 = v47.writeString(v48);
														String v50 = p2.getPlayerVersion();
														StatsEvent$Builder v51 = v49.writeString(v50);
														[B v52 = new [B(0);
														StatsEvent$Builder v53 = v51.writeByteArray(v52);
														int v54 = p2.getVideoFramesPlayed();
														StatsEvent$Builder v55 = v53.writeInt(v54);
														int v56 = p2.getVideoFramesDropped();
														StatsEvent$Builder v57 = v55.writeInt(v56);
														int v58 = p2.getAudioUnderrunCount();
														StatsEvent$Builder v59 = v57.writeInt(v58);
														long v60 = p2.getNetworkBytesRead();
														StatsEvent$Builder v61 = v59.writeLong(v60);
														long v62 = p2.getLocalBytesRead();
														StatsEvent$Builder v63 = v61.writeLong(v62);
														long v64 = p2.getNetworkTransferDurationMillis();
														StatsEvent$Builder v65 = v63.writeLong(v64);
														byte[] v66 = p2.getDrmSessionId();
														String v67 = Base64.encodeToString(v66, 0);
														StatsEvent$Builder v68 = v65.writeString(v67);
														StatsEvent$Builder v69 = v68.usePooledBuffer();
														StatsEvent v70 = v69.build();
														StatsLog.write(v70);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = Binder.getCallingUid();\nInteger v4 = this.mMode;\nlong v5 = Binder.clearCallingIdentity();\nStatsEvent$Builder v32 = StatsEvent.newBuilder();\nStatsEvent$Builder v33 = v32.setAtomId(320);\n...\nStatsLog.write(v71);', 'Integer v9 = Integer.valueOf(v6);\nthis.mMode = v9;\nBinder.restoreCallingIdentity(v5);']

The method reportPlaybackMetrics has the following similar APIs:

- API Name: reportNetworkEvent(Ljava/lang/String;Landroid/media/metrics/NetworkEvent;I)V with Similarity Score: 0.8127092123031616
  - Access Control Level: NONE and the following code:
int v3 = Binder.getCallingUid();
String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
Integer v9 = Integer.valueOf(v6);
this.mMode = v9;
StatsEvent$Builder v32 = StatsEvent.newBuilder();
v33.setAtomId(321);
v34.writeString(p1);
int v35 = p2.getNetworkType();
v36.writeInt(v35);
long v37 = p2.getTimeSinceCreatedMillis();
v38.writeLong(v37);
StatsEvent$Builder v39 = v38.usePooledBuffer();
StatsEvent v40 = v39.build();
StatsLog.write(v40);

- API Name: notifySignalStrength(Landroid/os/IBinder;II)V with Similarity Score: 0.7917988896369934
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
long v4 = Binder.clearCallingIdentity();
TvInteractiveAppManagerService$SessionState v6 = TvInteractiveAppManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3);
ITvInteractiveAppSession v7 = TvInteractiveAppManagerService.-$$Nest$mgetSessionLocked(this.this$0, v6);
v7.notifySignalStrength(p2);

