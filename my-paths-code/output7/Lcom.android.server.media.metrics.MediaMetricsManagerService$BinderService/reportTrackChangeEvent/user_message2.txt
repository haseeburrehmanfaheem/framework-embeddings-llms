The method reportTrackChangeEvent has the following code snippet:

This is path 1 for the API with depth 2:
public void reportTrackChangeEvent(String p1, TrackChangeEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													StatsEvent$Builder v32 = StatsEvent.newBuilder();
													StatsEvent$Builder v33 = v32.setAtomId(324);
													StatsEvent$Builder v34 = v33.writeString(p1);
													int v35 = p2.getTrackState();
													StatsEvent$Builder v36 = v34.writeInt(v35);
													int v37 = p2.getTrackChangeReason();
													StatsEvent$Builder v38 = v36.writeInt(v37);
													String v39 = p2.getContainerMimeType();
													StatsEvent$Builder v40 = v38.writeString(v39);
													String v41 = p2.getSampleMimeType();
													StatsEvent$Builder v42 = v40.writeString(v41);
													String v43 = p2.getCodecName();
													StatsEvent$Builder v44 = v42.writeString(v43);
													int v45 = p2.getBitrate();
													StatsEvent$Builder v46 = v44.writeInt(v45);
													long v47 = p2.getTimeSinceCreatedMillis();
													StatsEvent$Builder v48 = v46.writeLong(v47);
													int v49 = p2.getTrackType();
													StatsEvent$Builder v50 = v48.writeInt(v49);
													String v51 = p2.getLanguage();
													StatsEvent$Builder v52 = v50.writeString(v51);
													String v53 = p2.getLanguageRegion();
													StatsEvent$Builder v54 = v52.writeString(v53);
													int v55 = p2.getChannelCount();
													StatsEvent$Builder v56 = v54.writeInt(v55);
													int v57 = p2.getAudioSampleRate();
													StatsEvent$Builder v58 = v56.writeInt(v57);
													int v59 = p2.getWidth();
													StatsEvent$Builder v60 = v58.writeInt(v59);
													int v61 = p2.getHeight();
													StatsEvent$Builder v62 = v60.writeInt(v61);
													float v63 = p2.getVideoFrameRate();
													StatsEvent$Builder v64 = v62.writeFloat(v63);
													StatsEvent$Builder v65 = v64.usePooledBuffer();
													StatsEvent v66 = v65.build();
													StatsLog.write(v66);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void reportTrackChangeEvent(String p1, TrackChangeEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v6 = 2;
			Integer v8 = Integer.valueOf(v6);
			this.mMode = v8;
			Binder.restoreCallingIdentity(v5);
			Integer v11 = this.mMode;
			int v12 = v11.intValue();
			if (v12 != 1) {
				Integer v13 = this.mMode;
				int v14 = v13.intValue();
				if (v14 != 0) {
					Context v15 = this.this$0.getContext();
					PackageManager v16 = v15.getPackageManager();
					String v17 = v16.getPackagesForUid(v3);
					if (v17 == 0) {
						if (v17.length != 0) {
							Integer v18 = this.mMode;
							int v19 = v18.intValue();
							if (v19 != 2) {
								List v20 = this.mBlockList;
								if (v20 != 0) {
									List v22 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v21 = v22;
									this.mBlockList = v21;
									List v24 = this.mBlockList;
									if (v24 != 0) {
										List v25 = this.mBlockList;
										boolean v27 = MediaMetricsManagerService$BinderService.inList(v17, v25);
										if (v27 == 0) {
											int v28 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v29 = Integer.valueOf(v28);
											Integer v26 = v29;
											if (v26 == 0) {
												int v30 = v26.intValue();
												int v1 = v30;
												if (v1 != 99999) {
													StatsEvent$Builder v31 = StatsEvent.newBuilder();
													StatsEvent$Builder v32 = v31.setAtomId(324);
													StatsEvent$Builder v33 = v32.writeString(p1);
													int v34 = p2.getTrackState();
													StatsEvent$Builder v35 = v33.writeInt(v34);
													int v36 = p2.getTrackChangeReason();
													StatsEvent$Builder v37 = v35.writeInt(v36);
													String v38 = p2.getContainerMimeType();
													StatsEvent$Builder v39 = v37.writeString(v38);
													String v40 = p2.getSampleMimeType();
													StatsEvent$Builder v41 = v39.writeString(v40);
													String v42 = p2.getCodecName();
													StatsEvent$Builder v43 = v41.writeString(v42);
													int v44 = p2.getBitrate();
													StatsEvent$Builder v45 = v43.writeInt(v44);
													long v46 = p2.getTimeSinceCreatedMillis();
													StatsEvent$Builder v47 = v45.writeLong(v46);
													int v48 = p2.getTrackType();
													StatsEvent$Builder v49 = v47.writeInt(v48);
													String v50 = p2.getLanguage();
													StatsEvent$Builder v51 = v49.writeString(v50);
													String v52 = p2.getLanguageRegion();
													StatsEvent$Builder v53 = v51.writeString(v52);
													int v54 = p2.getChannelCount();
													StatsEvent$Builder v55 = v53.writeInt(v54);
													int v56 = p2.getAudioSampleRate();
													StatsEvent$Builder v57 = v55.writeInt(v56);
													int v58 = p2.getWidth();
													StatsEvent$Builder v59 = v57.writeInt(v58);
													int v60 = p2.getHeight();
													StatsEvent$Builder v61 = v59.writeInt(v60);
													float v62 = p2.getVideoFrameRate();
													StatsEvent$Builder v63 = v61.writeFloat(v62);
													StatsEvent$Builder v64 = v63.usePooledBuffer();
													StatsEvent v65 = v64.build();
													StatsLog.write(v65);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void reportTrackChangeEvent(String p1, TrackChangeEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['StatsEvent$Builder v2 = StatsEvent.newBuilder();\nStatsEvent$Builder v3 = v2.setAtomId(324);\nStatsEvent$Builder v4 = v3.writeString(p1);\nint v5 = p2.getTrackState();\nStatsEvent$Builder v6 = v4.writeInt(v5);\nint v7 = p2.getTrackChangeReason();\nStatsEvent$Builder v8 = v6.writeInt(v7);\n...\nStatsLog.write(v36);', 'Integer v9 = this.mMode;\nlong v5 = Binder.clearCallingIdentity();\nString v7 = DeviceConfig.getProperty("media", "media_metrics_mode");\nint v8 = Integer.parseInt(v7);\n...\nthis.mMode = v9;', 'List v21 = this.mBlockList;\nList v23 = this.this$0.getListLocked("player_metrics_app_blocklist");\nthis.mBlockList = v22;']

The method reportTrackChangeEvent has the following similar APIs:

- API Name: reportPlaybackStateEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackStateEvent;I)V with Similarity Score: 0.942645251750946
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(322);
StatsEvent$Builder v4 = v3.writeString(p1);
int v5 = p2.getState();
StatsEvent$Builder v6 = v4.writeInt(v5);
long v7 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v8 = v6.writeLong(v7);
StatsEvent$Builder v9 = v8.usePooledBuffer();
StatsEvent v10 = v9.build();
StatsLog.write(v10);

- API Name: reportPlaybackStateEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackStateEvent;I)V with Similarity Score: 0.9229462146759033
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v32 = StatsEvent.newBuilder();
StatsEvent$Builder v33 = v32.setAtomId(322);
StatsEvent$Builder v34 = v33.writeString(p1);
int v35 = p2.getState();
StatsEvent$Builder v36 = v34.writeInt(v35);
long v37 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v38 = v36.writeLong(v37);
StatsEvent$Builder v39 = v38.usePooledBuffer();
StatsEvent v40 = v39.build();
StatsLog.write(v40);

