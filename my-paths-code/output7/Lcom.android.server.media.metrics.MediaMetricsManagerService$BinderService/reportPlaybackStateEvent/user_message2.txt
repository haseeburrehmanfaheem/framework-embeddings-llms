The method reportPlaybackStateEvent has the following code snippet:

This is path 1 for the API with depth 2:
public void reportPlaybackStateEvent(String p1, PlaybackStateEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													StatsEvent$Builder v32 = StatsEvent.newBuilder();
													StatsEvent$Builder v33 = v32.setAtomId(322);
													StatsEvent$Builder v34 = v33.writeString(p1);
													int v35 = p2.getState();
													StatsEvent$Builder v36 = v34.writeInt(v35);
													long v37 = p2.getTimeSinceCreatedMillis();
													StatsEvent$Builder v38 = v36.writeLong(v37);
													StatsEvent$Builder v39 = v38.usePooledBuffer();
													StatsEvent v40 = v39.build();
													StatsLog.write(v40);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void reportPlaybackStateEvent(String p1, PlaybackStateEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v6 = 2;
			Integer v8 = Integer.valueOf(v6);
			this.mMode = v8;
			Binder.restoreCallingIdentity(v5);
			Integer v11 = this.mMode;
			int v12 = v11.intValue();
			if (v12 != 1) {
				Integer v13 = this.mMode;
				int v14 = v13.intValue();
				if (v14 != 0) {
					Context v15 = this.this$0.getContext();
					PackageManager v16 = v15.getPackageManager();
					String v17 = v16.getPackagesForUid(v3);
					if (v17 == 0) {
						if (v17.length != 0) {
							Integer v18 = this.mMode;
							int v19 = v18.intValue();
							if (v19 != 2) {
								List v20 = this.mBlockList;
								if (v20 != 0) {
									List v22 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v21 = v22;
									this.mBlockList = v21;
									List v24 = this.mBlockList;
									if (v24 != 0) {
										List v25 = this.mBlockList;
										boolean v27 = MediaMetricsManagerService$BinderService.inList(v17, v25);
										if (v27 == 0) {
											int v28 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v29 = Integer.valueOf(v28);
											Integer v26 = v29;
											if (v26 == 0) {
												int v30 = v26.intValue();
												int v1 = v30;
												if (v1 != 99999) {
													StatsEvent$Builder v31 = StatsEvent.newBuilder();
													StatsEvent$Builder v32 = v31.setAtomId(322);
													StatsEvent$Builder v33 = v32.writeString(p1);
													int v34 = p2.getState();
													StatsEvent$Builder v35 = v33.writeInt(v34);
													long v36 = p2.getTimeSinceCreatedMillis();
													StatsEvent$Builder v37 = v35.writeLong(v36);
													StatsEvent$Builder v38 = v37.usePooledBuffer();
													StatsEvent v39 = v38.build();
													StatsLog.write(v39);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void reportPlaybackStateEvent(String p1, PlaybackStateEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										List v26 = this.mBlockList;
										boolean v28 = MediaMetricsManagerService$BinderService.inList(v18, v26);
										if (v28 == 0) {
											int v29 = MediaMetricsManagerService$BinderService.listNameToLoggingLevel("player_metrics_app_blocklist");
											Integer v30 = Integer.valueOf(v29);
											Integer v27 = v30;
											if (v27 == 0) {
												int v31 = v27.intValue();
												int v1 = v31;
												if (v1 != 99999) {
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['StatsEvent$Builder v32 = StatsEvent.newBuilder();\nStatsEvent$Builder v33 = v32.setAtomId(322);\nStatsEvent$Builder v34 = v33.writeString(p1);\nint v35 = p2.getState();\nStatsEvent$Builder v36 = v34.writeInt(v35);\nlong v37 = p2.getTimeSinceCreatedMillis();\nStatsEvent$Builder v38 = v36.writeLong(v37);\nStatsEvent$Builder v39 = v38.usePooledBuffer();\nStatsEvent v40 = v39.build();\nStatsLog.write(v40);', 'StatsEvent$Builder v26 = StatsEvent.newBuilder();\nStatsEvent$Builder v27 = v26.setAtomId(322);\nStatsEvent$Builder v28 = v27.writeString(p1);\nint v29 = this.mState;\nStatsEvent$Builder v30 = v28.writeInt(v29);\nlong v31 = this.mTimeSinceCreatedMillis;\nStatsEvent$Builder v32 = v30.writeLong(v31);\nStatsEvent$Builder v33 = v32.usePooledBuffer();\nStatsEvent v34 = v33.build();\nStatsLog.write(v34);', 'StatsEvent$Builder v2 = StatsEvent.newBuilder();\nStatsEvent$Builder v3 = v2.setAtomId(322);\nStatsEvent$Builder v4 = v3.writeString(p1);\nint v5 = p2.getState();\nStatsEvent$Builder v6 = v4.writeInt(v5);\nlong v7 = p2.getTimeSinceCreatedMillis();\nStatsEvent$Builder v8 = v6.writeLong(v7);\nStatsEvent$Builder v9 = v8.usePooledBuffer();\nStatsEvent v10 = v9.build();\nStatsLog.write(v10);']

The method reportPlaybackStateEvent has the following similar APIs:

- API Name: reportTrackChangeEvent(Ljava/lang/String;Landroid/media/metrics/TrackChangeEvent;I)V with Similarity Score: 0.942645251750946
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(324);
StatsEvent$Builder v4 = v3.writeString(p1);
int v5 = p2.getTrackState();
StatsEvent$Builder v6 = v4.writeInt(v5);
int v7 = p2.getTrackChangeReason();
StatsEvent$Builder v8 = v6.writeInt(v7);
...
StatsLog.write(v36);

- API Name: reportTrackChangeEvent(Ljava/lang/String;Landroid/media/metrics/TrackChangeEvent;I)V with Similarity Score: 0.9229462146759033
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v2 = StatsEvent.newBuilder();
StatsEvent$Builder v3 = v2.setAtomId(324);
StatsEvent$Builder v4 = v3.writeString(p1);
int v5 = p2.getTrackState();
StatsEvent$Builder v6 = v4.writeInt(v5);
int v7 = p2.getTrackChangeReason();
StatsEvent$Builder v8 = v6.writeInt(v7);
...
StatsLog.write(v36);

