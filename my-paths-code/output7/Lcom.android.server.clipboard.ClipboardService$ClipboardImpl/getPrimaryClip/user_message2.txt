The method getPrimaryClip has the following code snippet:

This is path 1 for the API with depth 2:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v3 = ClipboardService.getIntendingUserId(p2, p3);
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getAppId(v4);
	int v6 = UserHandle.getUid(v3, v5);
	int v2 = v6;
	int v1 = v2;
	int v7 = UserHandle.getUserId(v1);
	boolean v10 = ClipboardService.clipboardAccessAllowed(p2, p3, p4, p5, p6, 1);
	boolean v9 = v10;
	boolean v8 = v9;
	if (v8 == 0) {
		long v13 = Binder.clearCallingIdentity();
		Context v14 = ClipboardService.getContext();
		Object v15 = v14.getSystemService(KeyguardManage.class);
		if (v15 == 0) {
			boolean v16 = v15.isDeviceLocked(p2);
			if (v16 == 0) {
				Binder.restoreCallingIdentity(v13);
				boolean v12 = ;
				boolean v11 = v12;
				if (v11 == 0) {
					Object v18 = ClipboardService.-$$Nest$fgetmLock(this.this$0);
					Binder.restoreCallingIdentity(v23);
					int v27 = UserHandle.getUserId(p2);
					ClipboardService$PerUserClipboard v28 = ClipboardService.getClipboardLocked(v27);
					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
						boolean v29 = ClipboardService$PerUserClipboard.activePermissionOwners.contains(p3);
						if (v29 != 0) {
							int v30 = ClipboardService$PerUserClipboard.primaryClip.getItemCount();
							if ( >= v30) {
								ClipData$Item v31 = ClipboardService$PerUserClipboard.primaryClip.getItemAt();
								int v32 = UserHandle.getUserId(p2);
								if ( >= v30) {
									boolean v34 = ClipboardService$PerUserClipboard.activePermissionOwners.add(p3);
									Object v37 = this.mClipboards.get(p2);
									if (v37 != 0) {
										ClipboardService$PerUserClipboard v38 = new ClipboardService$PerUserClipboard(ClipboardService,p2);
										this.mClipboards.put(p2, v38);
										ClipboardService$PerUserClipboard v36 = ;
										ClipboardService$PerUserClipboard v35 = v36;
										if (v46 == 0) {
											boolean v47 = ClipboardService.isDefaultIme(p4, p2);
											if (v47 == 0) {
												if (this.mContentCaptureInternal == 0) {
													boolean v48 = this.mContentCaptureInternal.isContentCaptureServiceForUser(p3, p4);
													if (v48 == 0) {
														if (this.mAutofillInternal == 0) {
															boolean v49 = this.mAutofillInternal.isAugmentedAutofillServiceForUser(p3, p4);
															if (v49 == 0) {
																if (ClipboardService$PerUserClipboard.primaryClip != 0) {
																	ClipData$Item v52 = ClipboardService$PerUserClipboard.primaryClip.getItemAt(0);
																	if (v52 != 0) {
																		boolean v53 = ClipboardService.isText(ClipboardService$PerUserClipboard.primaryClip);
																		if (v53 != 0) {
																			if (ClipboardService$PerUserClipboard.mTextClassifier != 0) {
																				boolean v54 = this.mWm.isUidFocused(p4);
																				if (v54 != 0) {
																					boolean v55 = ClipboardService$PerUserClipboard.mNotifiedTextClassifierUids.get(p4);
																					if (v55 == 0) {
																						if (ClipboardService$PerUserClipboard.primaryClip == 0) {
																							long v57 = Binder.clearCallingIdentity();
																							String v59 = DeviceConfig.getProperty("clipboard", "auto_clear_enabled");
																							if (v59 == 0) {
																								boolean v60 = Boolean.parseBoolean(v59);
																								boolean v58 = ;
																								if (v58 == 0) {
																									Integer v61 = Integer.valueOf(p3);
																									this.mClipboardClearHandler.removeEqualMessages(101, v61);
																									Integer v63 = Integer.valueOf(p3);
																									Message v64 = Message.obtain(this.mClipboardClearHandler, 101, p3, v1, v63);
																									long v66 = DeviceConfig.getLong("clipboard", "auto_clear_timeout", 3600000);
																									long v65 = v66;
																									boolean v67 = this.mClipboardClearHandler.sendMessageDelayed(v64, v65);
																									Binder.restoreCallingIdentity(v57);
																									return ClipboardService$PerUserClipboard.primaryClip;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v3 = ClipboardService.getIntendingUserId(p2, p3);
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getAppId(v4);
	int v6 = UserHandle.getUid(v3, v5);
	int v2 = v6;
	int v1 = v2;
	int v7 = UserHandle.getUserId(v1);
	boolean v10 = ClipboardService.clipboardAccessAllowed(p2, p3, p4, p5, p6, 1);
	boolean v9 = v10;
	boolean v8 = v9;
	if (v8 == 0) {
		long v13 = Binder.clearCallingIdentity();
		Context v14 = ClipboardService.getContext();
		Object v15 = v14.getSystemService(KeyguardManage.class);
		if (v15 == 0) {
			boolean v16 = v15.isDeviceLocked(p2);
			if (v16 == 0) {
				Binder.restoreCallingIdentity(v13);
				boolean v12 = ;
				boolean v11 = v12;
				if (v11 == 0) {
					Object v18 = ClipboardService.-$$Nest$fgetmLock(this.this$0);
					Binder.restoreCallingIdentity(v23);
					int v27 = UserHandle.getUserId(p2);
					ClipboardService$PerUserClipboard v28 = ClipboardService.getClipboardLocked(v27);
					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
						boolean v29 = ClipboardService$PerUserClipboard.activePermissionOwners.contains(p3);
						if (v29 != 0) {
							int v30 = ClipboardService$PerUserClipboard.primaryClip.getItemCount();
							if ( >= v30) {
								ClipData$Item v31 = ClipboardService$PerUserClipboard.primaryClip.getItemAt();
								int v32 = UserHandle.getUserId(p2);
								if ( >= v30) {
									boolean v34 = ClipboardService$PerUserClipboard.activePermissionOwners.add(p3);
									Object v37 = this.mClipboards.get(p2);
									if (v37 != 0) {
										ClipboardService$PerUserClipboard v38 = new ClipboardService$PerUserClipboard(ClipboardService,p2);
										this.mClipboards.put(p2, v38);
										ClipboardService$PerUserClipboard v36 = ;
										ClipboardService$PerUserClipboard v35 = v36;
										if (v46 == 0) {
											boolean v47 = ClipboardService.isDefaultIme(p4, p2);
											if (v47 == 0) {
												if (this.mContentCaptureInternal == 0) {
													boolean v48 = this.mContentCaptureInternal.isContentCaptureServiceForUser(p3, p4);
													if (v48 == 0) {
														if (this.mAutofillInternal == 0) {
															boolean v49 = this.mAutofillInternal.isAugmentedAutofillServiceForUser(p3, p4);
															if (v49 == 0) {
																if (ClipboardService$PerUserClipboard.primaryClip != 0) {
																	ClipData$Item v52 = ClipboardService$PerUserClipboard.primaryClip.getItemAt(0);
																	if (v52 != 0) {
																		boolean v53 = ClipboardService.isText(ClipboardService$PerUserClipboard.primaryClip);
																		if (v53 != 0) {
																			if (ClipboardService$PerUserClipboard.mTextClassifier != 0) {
																				boolean v54 = this.mWm.isUidFocused(p4);
																				if (v54 != 0) {
																					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
																						long v56 = Binder.clearCallingIdentity();
																						String v58 = DeviceConfig.getProperty("clipboard", "auto_clear_enabled");
																						if (v58 == 0) {
																							boolean v59 = Boolean.parseBoolean(v58);
																							boolean v57 = ;
																							if (v57 == 0) {
																								Integer v60 = Integer.valueOf(p3);
																								this.mClipboardClearHandler.removeEqualMessages(101, v60);
																								Integer v62 = Integer.valueOf(p3);
																								Message v63 = Message.obtain(this.mClipboardClearHandler, 101, p3, v1, v62);
																								long v65 = DeviceConfig.getLong("clipboard", "auto_clear_timeout", 3600000);
																								long v64 = v65;
																								boolean v66 = this.mClipboardClearHandler.sendMessageDelayed(v63, v64);
																								Binder.restoreCallingIdentity(v56);
																								return ClipboardService$PerUserClipboard.primaryClip;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v3 = ClipboardService.getIntendingUserId(p2, p3);
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getAppId(v4);
	int v6 = UserHandle.getUid(v3, v5);
	int v2 = v6;
	int v1 = v2;
	int v7 = UserHandle.getUserId(v1);
	boolean v10 = ClipboardService.clipboardAccessAllowed(p2, p3, p4, p5, p6, 1);
	boolean v9 = v10;
	boolean v8 = v9;
	if (v8 == 0) {
		long v13 = Binder.clearCallingIdentity();
		Context v14 = ClipboardService.getContext();
		Object v15 = v14.getSystemService(KeyguardManage.class);
		if (v15 == 0) {
			boolean v16 = v15.isDeviceLocked(p2);
			if (v16 == 0) {
				Binder.restoreCallingIdentity(v13);
				boolean v12 = ;
				boolean v11 = v12;
				if (v11 == 0) {
					Object v18 = ClipboardService.-$$Nest$fgetmLock(this.this$0);
					Binder.restoreCallingIdentity(v23);
					int v27 = UserHandle.getUserId(p2);
					ClipboardService$PerUserClipboard v28 = ClipboardService.getClipboardLocked(v27);
					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
						boolean v29 = ClipboardService$PerUserClipboard.activePermissionOwners.contains(p3);
						if (v29 != 0) {
							int v30 = ClipboardService$PerUserClipboard.primaryClip.getItemCount();
							if ( >= v30) {
								ClipData$Item v31 = ClipboardService$PerUserClipboard.primaryClip.getItemAt();
								int v32 = UserHandle.getUserId(p2);
								if ( >= v30) {
									boolean v34 = ClipboardService$PerUserClipboard.activePermissionOwners.add(p3);
									Object v37 = this.mClipboards.get(p2);
									if (v37 != 0) {
										ClipboardService$PerUserClipboard v38 = new ClipboardService$PerUserClipboard(ClipboardService,p2);
										this.mClipboards.put(p2, v38);
										ClipboardService$PerUserClipboard v36 = ;
										ClipboardService$PerUserClipboard v35 = v36;
										if (v46 == 0) {
											boolean v47 = ClipboardService.isDefaultIme(p4, p2);
											if (v47 == 0) {
												if (this.mContentCaptureInternal == 0) {
													boolean v48 = this.mContentCaptureInternal.isContentCaptureServiceForUser(p3, p4);
													if (v48 == 0) {
														if (ClipboardService$PerUserClipboard.primaryClip != 0) {
															ClipData$Item v51 = ClipboardService$PerUserClipboard.primaryClip.getItemAt(0);
															if (v51 != 0) {
																boolean v52 = ClipboardService.isText(ClipboardService$PerUserClipboard.primaryClip);
																if (v52 != 0) {
																	if (ClipboardService$PerUserClipboard.mTextClassifier != 0) {
																		boolean v53 = this.mWm.isUidFocused(p4);
																		if (v53 != 0) {
																			boolean v54 = ClipboardService$PerUserClipboard.mNotifiedTextClassifierUids.get(p4);
																			if (v54 == 0) {
																				if (ClipboardService$PerUserClipboard.primaryClip == 0) {
																					long v56 = Binder.clearCallingIdentity();
																					String v58 = DeviceConfig.getProperty("clipboard", "auto_clear_enabled");
																					if (v58 == 0) {
																						boolean v59 = Boolean.parseBoolean(v58);
																						boolean v57 = ;
																						if (v57 == 0) {
																							Integer v60 = Integer.valueOf(p3);
																							this.mClipboardClearHandler.removeEqualMessages(101, v60);
																							Integer v62 = Integer.valueOf(p3);
																							Message v63 = Message.obtain(this.mClipboardClearHandler, 101, p3, v1, v62);
																							long v65 = DeviceConfig.getLong("clipboard", "auto_clear_timeout", 3600000);
																							long v64 = v65;
																							boolean v66 = this.mClipboardClearHandler.sendMessageDelayed(v63, v64);
																							Binder.restoreCallingIdentity(v56);
																							return ClipboardService$PerUserClipboard.primaryClip;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = ClipboardService.getIntendingUserId(p2, p3);\nClipboardService$PerUserClipboard v28 = ClipboardService.getClipboardLocked(v27);\nif (ClipboardService$PerUserClipboard.primaryClip == 0) { ... }\nreturn ClipboardService$PerUserClipboard.primaryClip;', 'int v2 = this.this$0.getIntendingUid(p1, p3);\nClipboardService$PerUserClipboard v12 = this.this$0.getClipboardLocked(v3);\nif (ClipboardService$PerUserClipboard.primaryClip == 0) { ... }\nreturn ClipboardService$PerUserClipboard.primaryClip;', 'int v1 = ClipboardService.-$$Nest$mgetIntendingUid(this.this$0, p1, p3);\nClipboardService$PerUserClipboard v7 = ClipboardService.-$$Nest$mgetClipboardLocked(this.this$0, v2);\nif (ClipboardService$PerUserClipboard.primaryClip == 0) { ... }\nreturn ClipboardService$PerUserClipboard.primaryClip;']

The method getPrimaryClip has the following similar APIs:

- API Name: removePrimaryClipChangedListener(Landroid/content/IOnPrimaryClipChangedListener;Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.9419841170310974
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = ClipboardService.-$$Nest$mgetIntendingUserId(this.this$0, p2, p4);
ClipboardService$PerUserClipboard v3 = ClipboardService.-$$Nest$mgetClipboardLocked(this.this$0, v1);
boolean v4 = ClipboardService$PerUserClipboard.primaryClipListeners.unregister(p1);

- API Name: getPrimaryClipDescription(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/ClipDescription; with Similarity Score: 0.9306007027626038
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = ClipboardService.-$$Nest$mgetIntendingUid(this.this$0, p1, p3);
boolean v3 = ClipboardService.-$$Nest$mclipboardAccessAllowed(this.this$0, 29, p1, p2, v1, v2, 0);
if (v3 == 0) { ... }
ClipDescription v7 = ClipboardService$PerUserClipboard.primaryClip.getDescription();

