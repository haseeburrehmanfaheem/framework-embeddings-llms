The method openDevice has the following code snippet:

This is path 1 for the API with depth 2:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	Object v2 = this.mClients.get(p1);
	if (v2 != 0) {
		MidiService$Client v3 = new MidiService$Client(MidiService,p1);
		p1.linkToDeath(v3, 0);
		Object v6 = this.mClients.put(p1, v3);
		MidiService$Client v1 = ;
		if (v1 != 0) {
			Object v13 = this.mDevicesByInfo.get(p2);
			if (v13 == 0) {
				int v20 = Binder.getCallingUid();
				boolean v22 = this.mIsPrivate;
				if (v22 == 0) {
					boolean v21 = ;
					if (v21 == 0) {
						int v23 = p2.getType();
						if (v23 != 1) {
							Bundle v25 = this.mProperties;
							String v26 = v25.getString("name");
							int v27 = v26.length();
							if (v27 >= 8) {
								int v29 = v26.length();
								String v30 = v26.substring(0, (v29 + -8));
								String v28 = v30;
								int v32 = v26.length();
								String v33 = v26.substring((v32 + -8));
								String v31 = v33;
								boolean v42 = this.mUsbMidiUniversalDeviceInUse.contains(v28);
								if (v42 != 0) {
									boolean v43 = v31.equals("MIDI 2.0");
									if (v43 == 0) {
										boolean v44 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v28);
										if (v44 == 0) {
											boolean v24 = 1;
											if (v24 != 0) {
												Bundle v46 = this.mProperties;
												String v47 = v46.getString("name");
												int v48 = v47.length();
												if (v48 >= 8) {
													int v50 = v47.length();
													String v51 = v47.substring(0, (v50 + -8));
													String v49 = v51;
													int v53 = v47.length();
													String v54 = v47.substring((v53 + -8));
													String v52 = v54;
													boolean v63 = v52.equals("MIDI 2.0");
													if (v63 == 0) {
														boolean v64 = v52.equals("MIDI 1.0");
														if (v64 == 0) {
															Integer v65 = Integer.valueOf(0);
															Object v66 = this.mUsbMidiLegacyDeviceOpenCount.getOrDefault(v49, v65);
															int v67 = v66.intValue();
															Integer v68 = Integer.valueOf((v67 + 1));
															Object v69 = this.mUsbMidiLegacyDeviceOpenCount.put(v49, v68);
															long v70 = Binder.clearCallingIdentity();
															int v84 = this.mDeviceConnections.size();
															if (v84 >= 64) {
																MidiService$DeviceConnection v85 = new MidiService$DeviceConnection(this.this$0,v13,MidiService$Client,p3);
																IBinder v87 = this.mToken;
																Object v88 = this.mDeviceConnections.put(v87, v85);
																if (this.mServer == 0) {
																	if (this.mServiceConnection != 0) {
																		if (this.mServiceInfo != 0) {
																			if (this.mBluetoothDevice == 0) {
																				boolean v103 = this.mDeviceConnections.add(v85);
																				MidiService$Device$1 v104 = new MidiService$Device$1(MidiService$Device);
																				this.mServiceConnection = v104;
																				if (this.mBluetoothDevice == 0) {
																					Intent v106 = new Intent("android.media.midi.MidiDeviceService");
																					ComponentName v108 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
																					Intent v110 = v106.setComponent(v108);
																					Context v111 = MidiService.-$$Nest$fgetmContext(this.this$0);
																					boolean v112 = v111.bindService(, this.mServiceConnection, 1);
																					if (v112 != 0) {
																						Binder.restoreCallingIdentity(v70);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	Object v2 = this.mClients.get(p1);
	if (v2 != 0) {
		MidiService$Client v3 = new MidiService$Client(MidiService,p1);
		p1.linkToDeath(v3, 0);
		Object v6 = this.mClients.put(p1, v3);
		MidiService$Client v1 = ;
		if (v1 != 0) {
			Object v13 = this.mDevicesByInfo.get(p2);
			if (v13 == 0) {
				int v20 = Binder.getCallingUid();
				boolean v22 = this.mIsPrivate;
				if (v22 == 0) {
					boolean v21 = ;
					if (v21 == 0) {
						int v23 = p2.getType();
						if (v23 != 1) {
							Bundle v25 = this.mProperties;
							String v26 = v25.getString("name");
							int v27 = v26.length();
							if (v27 >= 8) {
								int v29 = v26.length();
								String v30 = v26.substring(0, (v29 + -8));
								String v28 = v30;
								int v32 = v26.length();
								String v33 = v26.substring((v32 + -8));
								String v31 = v33;
								boolean v42 = this.mUsbMidiUniversalDeviceInUse.contains(v28);
								if (v42 != 0) {
									boolean v43 = v31.equals("MIDI 2.0");
									if (v43 == 0) {
										boolean v44 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v28);
										if (v44 == 0) {
											boolean v24 = 0;
											if (v24 != 0) {
												Bundle v46 = this.mProperties;
												String v47 = v46.getString("name");
												int v48 = v47.length();
												if (v48 >= 8) {
													int v50 = v47.length();
													String v51 = v47.substring(0, (v50 + -8));
													String v49 = v51;
													int v53 = v47.length();
													String v54 = v47.substring((v53 + -8));
													String v52 = v54;
													boolean v63 = v52.equals("MIDI 2.0");
													if (v63 == 0) {
														boolean v64 = v52.equals("MIDI 1.0");
														if (v64 == 0) {
															Integer v65 = Integer.valueOf(0);
															Object v66 = this.mUsbMidiLegacyDeviceOpenCount.getOrDefault(v49, v65);
															int v67 = v66.intValue();
															Integer v68 = Integer.valueOf((v67 + 1));
															Object v69 = this.mUsbMidiLegacyDeviceOpenCount.put(v49, v68);
															long v70 = Binder.clearCallingIdentity();
															int v84 = this.mDeviceConnections.size();
															if (v84 >= 64) {
																MidiService$DeviceConnection v85 = new MidiService$DeviceConnection(this.this$0,v13,MidiService$Client,p3);
																IBinder v87 = this.mToken;
																Object v88 = this.mDeviceConnections.put(v87, v85);
																if (this.mServer == 0) {
																	if (this.mServiceConnection != 0) {
																		if (this.mServiceInfo != 0) {
																			if (this.mBluetoothDevice == 0) {
																				boolean v103 = this.mDeviceConnections.add(v85);
																				MidiService$Device$1 v104 = new MidiService$Device$1(MidiService$Device);
																				this.mServiceConnection = v104;
																				if (this.mBluetoothDevice == 0) {
																					Intent v106 = new Intent("android.media.midi.MidiDeviceService");
																					ComponentName v108 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
																					Intent v110 = v106.setComponent(v108);
																					Context v111 = MidiService.-$$Nest$fgetmContext(this.this$0);
																					boolean v112 = v111.bindService(, this.mServiceConnection, 1);
																					if (v112 != 0) {
																						Binder.restoreCallingIdentity(v70);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	Object v2 = this.mClients.get(p1);
	if (v2 != 0) {
		MidiService$Client v3 = new MidiService$Client(MidiService,p1);
		p1.linkToDeath(v3, 0);
		Object v6 = this.mClients.put(p1, v3);
		MidiService$Client v1 = ;
		if (v1 != 0) {
			Object v13 = this.mDevicesByInfo.get(p2);
			if (v13 == 0) {
				int v20 = Binder.getCallingUid();
				boolean v22 = this.mIsPrivate;
				if (v22 == 0) {
					boolean v21 = ;
					if (v21 == 0) {
						int v23 = p2.getType();
						if (v23 != 1) {
							Bundle v25 = this.mProperties;
							String v26 = v25.getString("name");
							int v27 = v26.length();
							if (v27 >= 8) {
								int v29 = v26.length();
								String v30 = v26.substring(0, (v29 + -8));
								String v28 = v30;
								int v32 = v26.length();
								String v33 = v26.substring((v32 + -8));
								String v31 = v33;
								boolean v42 = this.mUsbMidiUniversalDeviceInUse.contains(v28);
								if (v42 != 0) {
									boolean v43 = v31.equals("MIDI 2.0");
									if (v43 == 0) {
										boolean v44 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v28);
										if (v44 == 0) {
											boolean v24 = 1;
											if (v24 != 0) {
												Bundle v46 = this.mProperties;
												String v47 = v46.getString("name");
												int v48 = v47.length();
												if (v48 >= 8) {
													int v50 = v47.length();
													String v51 = v47.substring(0, (v50 + -8));
													String v49 = v51;
													int v53 = v47.length();
													String v54 = v47.substring((v53 + -8));
													String v52 = v54;
													boolean v63 = v52.equals("MIDI 2.0");
													if (v63 == 0) {
														boolean v64 = v52.equals("MIDI 1.0");
														if (v64 == 0) {
															Integer v65 = Integer.valueOf(0);
															Object v66 = this.mUsbMidiLegacyDeviceOpenCount.getOrDefault(v49, v65);
															int v67 = v66.intValue();
															Integer v68 = Integer.valueOf((v67 + 1));
															Object v69 = this.mUsbMidiLegacyDeviceOpenCount.put(v49, v68);
															long v70 = Binder.clearCallingIdentity();
															int v84 = this.mDeviceConnections.size();
															if (v84 >= 64) {
																MidiService$DeviceConnection v85 = new MidiService$DeviceConnection(this.this$0,v13,MidiService$Client,p3);
																IBinder v87 = this.mToken;
																Object v88 = this.mDeviceConnections.put(v87, v85);
																if (this.mServer == 0) {
																	if (this.mServiceConnection != 0) {
																		if (this.mServiceInfo != 0) {
																			if (this.mBluetoothDevice == 0) {
																				boolean v103 = this.mDeviceConnections.add(v85);
																				MidiService$Device$1 v104 = new MidiService$Device$1(MidiService$Device);
																				this.mServiceConnection = v104;
																				if (this.mBluetoothDevice == 0) {
																					Intent v106 = new Intent("android.media.midi.BluetoothMidiService");
																					ComponentName v108 = new ComponentName("com.android.bluetoothmidiservice","com.android.bluetoothmidiservice.BluetoothMidiService");
																					Intent v110 = v106.setComponent(v108);
																					Context v111 = MidiService.-$$Nest$fgetmContext(this.this$0);
																					boolean v112 = v111.bindService(, this.mServiceConnection, 1);
																					if (v112 != 0) {
																						Binder.restoreCallingIdentity(v70);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['MidiService$Client v1 = p0.getClient(p1);\nObject v8 = this.mDevicesByInfo.get(p2);\nv1.addDeviceConnection(v8, p3);', 'int v20 = Binder.getCallingUid();\nboolean v16 = v8.isUidAllowed(v15);', 'MidiService$Client v3 = new MidiService$Client(MidiService,p1);\np1.linkToDeath(v3, 0);\nObject v6 = this.mClients.put(p1, v3);']

The method openDevice has the following similar APIs:

- API Name: openBluetoothDevice(Landroid/os/IBinder;Landroid/bluetooth/BluetoothDevice;Landroid/media/midi/IMidiDeviceOpenCallback;)V with Similarity Score: 0.991223156452179
  - Access Control Level: NONE and the following code:
MidiService$Client v4 = new MidiService$Client(MidiService,p1);
p1.linkToDeath(v4, 0);
Object v7 = this.mClients.put(p1, v4);

- API Name: getServiceDeviceInfo(Ljava/lang/String;Ljava/lang/String;)Landroid/media/midi/MidiDeviceInfo; with Similarity Score: 0.9800447225570679
  - Access Control Level: NONE and the following code:
int v1 = Binder.getCallingUid();
boolean v14 = v10.isUidAllowed(v1);

