The method unregisterDeviceServer has the following code snippet:

This is path 1 for the API with depth 2:
public void unregisterDeviceServer(IMidiDeviceServer p1){
	IBinder v1 = p1.asBinder();
	Object v2 = this.mDevicesByServer.get(v1);
	if (v2 == 0) {
		Iterator v4 = this.mDeviceConnections.iterator();
		boolean v5 = v4.hasNext();
		if (v5 == 0) {
			Object v6 = v4.next();
			MidiService$Device v7 = this.mDevice;
			MidiDeviceInfo v8 = this.mDeviceInfo;
			int v9 = this.mType;
			if (v9 != 1) {
				Object v10 = this.mUsbMidiLock;
				MidiService$Device v11 = this.mDevice;
				MidiDeviceInfo v12 = this.mDeviceInfo;
				Bundle v14 = v12.getProperties();
				String v15 = v14.getString("name");
				int v16 = v15.length();
				if (v16 >= 8) {
					String v17 = MidiService.extractUsbDeviceName(v15);
					String v18 = MidiService.extractUsbDeviceTag(v15);
					boolean v27 = v18.equals("MIDI 2.0");
					if (v27 == 0) {
						boolean v28 = v18.equals("MIDI 1.0");
						if (v28 == 0) {
							boolean v29 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v17);
							if (v29 == 0) {
								Object v30 = this.mUsbMidiLegacyDeviceOpenCount.get(v17);
								int v31 = v30.intValue();
								if (v31 <= 1) {
									Integer v32 = Integer.valueOf((v31 - 1));
									Object v33 = this.mUsbMidiLegacyDeviceOpenCount.put(v17, v32);
									MidiService$Client v34 = this.mClient;
									IBinder v36 = v6.getToken();
									Object v37 = this.mDeviceConnections.remove(v36);
									int v38 = this.mListeners.size();
									if (v38 != 0) {
										int v39 = this.mDeviceConnections.size();
										if (v39 != 0) {
											MidiService$Client.close();
											boolean v41 = v4.hasNext();
											if (v41 == 0) {
												this.mDeviceConnections.clear();
												if (0 == 0) {
													if (this.mServer == 0) {
														IBinder v45 = 0.asBinder();
														v45.linkToDeath(MidiService$Device, 0);
														this.mServer = 0;
														HashMap v47 = MidiService.-$$Nest$fgetmDevicesByServer(this.this$0);
														Object v48 = v47.put(v45, MidiService$Device);
														if (this.mDeviceConnections == 0) {
															Iterator v49 = this.mDeviceConnections.iterator();
															boolean v50 = v49.hasNext();
															if (v50 == 0) {
																Object v51 = v49.next();
																v51.notifyClient();
																boolean v53 = v49.hasNext();
																if (v53 == 0) {
																	if (this.mServiceInfo != 0) {
																		this.this$0.removeDeviceLocked(p0);
																		if (this.mBluetoothDevice == 0) {
																			HashMap v56 = this.mBluetoothDevices;
																			Object v57 = v56.remove(this.mBluetoothDevice);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void unregisterDeviceServer(IMidiDeviceServer p1){
	IBinder v1 = p1.asBinder();
	Object v2 = this.mDevicesByServer.get(v1);
	if (v2 == 0) {
		Iterator v4 = this.mDeviceConnections.iterator();
		boolean v5 = v4.hasNext();
		if (v5 == 0) {
			Object v6 = v4.next();
			MidiService$Device v7 = this.mDevice;
			MidiDeviceInfo v8 = this.mDeviceInfo;
			int v9 = this.mType;
			if (v9 != 1) {
				Object v10 = this.mUsbMidiLock;
				MidiService$Device v11 = this.mDevice;
				MidiDeviceInfo v12 = this.mDeviceInfo;
				Bundle v14 = v12.getProperties();
				String v15 = v14.getString("name");
				int v16 = v15.length();
				if (v16 >= 8) {
					String v17 = MidiService.extractUsbDeviceName(v15);
					String v18 = MidiService.extractUsbDeviceTag(v15);
					boolean v27 = v18.equals("MIDI 2.0");
					if (v27 == 0) {
						boolean v28 = v18.equals("MIDI 1.0");
						if (v28 == 0) {
							boolean v29 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v17);
							if (v29 == 0) {
								Object v30 = this.mUsbMidiLegacyDeviceOpenCount.get(v17);
								int v31 = v30.intValue();
								if (v31 <= 1) {
									Integer v32 = Integer.valueOf((v31 - 1));
									Object v33 = this.mUsbMidiLegacyDeviceOpenCount.put(v17, v32);
									MidiService$Client v34 = this.mClient;
									IBinder v36 = v6.getToken();
									Object v37 = this.mDeviceConnections.remove(v36);
									int v38 = this.mListeners.size();
									if (v38 != 0) {
										int v39 = this.mDeviceConnections.size();
										if (v39 != 0) {
											MidiService$Client.close();
											boolean v41 = v4.hasNext();
											if (v41 == 0) {
												this.mDeviceConnections.clear();
												if (0 == 0) {
													if (this.mServer == 0) {
														this.mServer = 0;
														IBinder v45 = this.mServer.asBinder();
														HashMap v46 = MidiService.-$$Nest$fgetmDevicesByServer(this.this$0);
														Object v47 = v46.remove(v45);
														this.mDeviceStatus = 0;
														this.mServer.closeDevice();
														if (this.mDeviceConnections == 0) {
															Iterator v49 = this.mDeviceConnections.iterator();
															boolean v50 = v49.hasNext();
															if (v50 == 0) {
																Object v51 = v49.next();
																v51.notifyClient();
																boolean v53 = v49.hasNext();
																if (v53 == 0) {
																	if (this.mServiceInfo != 0) {
																		this.this$0.removeDeviceLocked(p0);
																		if (this.mBluetoothDevice == 0) {
																			HashMap v56 = this.mBluetoothDevices;
																			Object v57 = v56.remove(this.mBluetoothDevice);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['IBinder v1 = p1.asBinder();\nObject v2 = this.mDevicesByServer.get(v1);\nInteger v32 = Integer.valueOf((v31 - 1));\nObject v33 = this.mUsbMidiLegacyDeviceOpenCount.put(v17, v32);\nthis.mDeviceConnections.remove(v36);', 'IBinder v1 = p1.asBinder();\nObject v2 = this.mDevicesByServer.get(v1);\nMidiService$Device v7 = v6.getDevice();\nthis.this$0.removeUsbMidiDeviceLocked(v12);\nv14.removeDeviceConnection(v6);', 'IBinder v1 = p1.asBinder();\nObject v2 = this.mDevicesByServer.get(v1);\nv2.closeLocked();']

The method unregisterDeviceServer has the following similar APIs:

- API Name: closeDevice(Landroid/os/IBinder;Landroid/os/IBinder;)V with Similarity Score: 0.836730420589447
  - Access Control Level: NONE and the following code:
MidiService$Client v1 = p0.getClient(p1);
v1.removeDeviceConnection(p2);

- API Name: openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V with Similarity Score: 0.7962586283683777
  - Access Control Level: NONE and the following code:
MidiService$Client v1 = p0.getClient(p1);
Object v8 = this.mDevicesByInfo.get(p2);
v1.addDeviceConnection(v8, p3);

