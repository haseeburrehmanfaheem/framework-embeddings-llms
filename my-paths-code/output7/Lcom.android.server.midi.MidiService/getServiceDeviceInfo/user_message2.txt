The method getServiceDeviceInfo has the following code snippet:

This is path 1 for the API with depth 2:
public MidiDeviceInfo getServiceDeviceInfo(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Collection v2 = this.mDevicesByInfo.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		ServiceInfo v6 = this.mServiceInfo;
		if (v6 == 0) {
			boolean v7 = p1.equals(ServiceInfo.packageName);
			if (v7 == 0) {
				boolean v8 = p2.equals(ServiceInfo.name);
				if (v8 == 0) {
					boolean v9 = v3.hasNext();
					if (v9 == 0) {
						Object v10 = v3.next();
						ServiceInfo v11 = this.mServiceInfo;
						if (v11 == 0) {
							boolean v12 = p1.equals(ServiceInfo.packageName);
							if (v12 == 0) {
								boolean v13 = p2.equals(ServiceInfo.name);
								if (v13 == 0) {
									boolean v15 = this.mIsPrivate;
									if (v15 == 0) {
										boolean v14 = ;
										if (v14 == 0) {
											Object v16 = new Object(3);
											Integer v17 = Integer.valueOf(-1);
											int v18 = EventLog.writeEvent(1397638484, v16);
											return 0;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public MidiDeviceInfo getServiceDeviceInfo(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Collection v2 = this.mDevicesByInfo.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		ServiceInfo v6 = this.mServiceInfo;
		if (v6 == 0) {
			boolean v7 = p1.equals(ServiceInfo.packageName);
			if (v7 == 0) {
				boolean v8 = p2.equals(ServiceInfo.name);
				if (v8 == 0) {
					boolean v9 = v3.hasNext();
					if (v9 == 0) {
						Object v10 = v3.next();
						ServiceInfo v11 = this.mServiceInfo;
						if (v11 == 0) {
							boolean v12 = p1.equals(ServiceInfo.packageName);
							if (v12 == 0) {
								boolean v13 = p2.equals(ServiceInfo.name);
								if (v13 == 0) {
									boolean v15 = this.mIsPrivate;
									if (v15 == 0) {
										boolean v14 = ;
										if (v14 == 0) {
											MidiDeviceInfo v16 = v10.getDeviceInfo();
											return v16;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nboolean v14 = v10.isUidAllowed(v1);', 'Collection v2 = this.mDevicesByInfo.values();\nIterator v3 = v2.iterator();\nObject v5 = v3.next();\nServiceInfo v6 = v5.getServiceInfo();\nServiceInfo v11 = v10.getServiceInfo();', 'boolean v7 = p1.equals(ServiceInfo.packageName);\nboolean v8 = p2.equals(ServiceInfo.name);\nboolean v12 = p1.equals(ServiceInfo.packageName);\nboolean v13 = p2.equals(ServiceInfo.name);']

The method getServiceDeviceInfo has the following similar APIs:

- API Name: openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V with Similarity Score: 0.9800447225570679
  - Access Control Level: NONE and the following code:
int v20 = Binder.getCallingUid();
boolean v16 = v8.isUidAllowed(v15);

- API Name: removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V with Similarity Score: 0.8909223675727844
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
UserHandle v23 = UserHandle.of(p4);

