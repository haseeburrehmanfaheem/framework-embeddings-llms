This is path 1 for the API with depth 2:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		RemoteAugmentedAutofillService v8 = AutofillManagerServiceImpl.getRemoteAugmentedAutofillServiceLocked();
		if (v8 != 0) {
			int v9 = AutofillManagerServiceImpl.getAugmentedAutofillServiceUidLocked();
			if (v9 == p3) {
				int v16 = AutofillManagerServiceImpl.getAugmentedAutofillServiceUidLocked();
				int v19 = AutofillManagerServiceImpl.getUserId();
				boolean v7 = 0;
				if (v7 != 0) {
					if (AbstractMasterSystemService.verbose == 0) {
						if (AbstractMasterSystemService.verbose == 0) {
							AutofillManagerService.mAugmentedAutofillState.setWhitelist(AbstractPerUserSystemService.mUserId, p1, p2);
							if (this.mRemoteAugmentedAutofillServiceInfo == 0) {
								ComponentName v42 = this.mRemoteAugmentedAutofillServiceInfo.getComponentName();
								String v43 = v42.flattenToShortString();
								LogMaker v44 = new LogMaker(1721);
								if ( != 0) {
									boolean v47 = LogMaker.isValidValue();
									if (v47 == 0) {
										String v48 = .toString();
										byte[] v49 = v48.getBytes();
										if (v49.length <= 4000) {
											LogMaker v46 = LogMaker;
											if (p1 == 0) {
												int v57 = p1.size();
												Integer v58 = Integer.valueOf(v57);
												if (v58 != 0) {
													boolean v60 = LogMaker.isValidValue(v58);
													if (v60 == 0) {
														String v61 = v58.toString();
														byte[] v62 = v61.getBytes();
														if (v62.length <= 4000) {
															LogMaker v59 = LogMaker;
															if (p2 == 0) {
																int v70 = p2.size();
																Integer v71 = Integer.valueOf(v70);
																if (v71 != 0) {
																	boolean v73 = LogMaker.isValidValue(v71);
																	if (v73 == 0) {
																		String v74 = v71.toString();
																		byte[] v75 = v74.getBytes();
																		if (v75.length <= 4000) {
																			LogMaker v72 = LogMaker;
																			this.mMetricsLogger.write(v46);
																			boolean v6 = 1;
																			if ( == 0) {
																				p2.send(p3, 0);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		boolean v7 = AutofillManagerServiceImpl.isCalledByAugmentedAutofillServiceLocked("setAugmentedAutofillWhitelistLocked", v5);
		if (v7 != 0) {
			if (AbstractMasterSystemService.verbose == 0) {
				AutofillManagerServiceImpl.whitelistForAugmentedAutofillPackages(p1, p2);
				if (this.mRemoteAugmentedAutofillServiceInfo == 0) {
					ComponentName v18 = this.mRemoteAugmentedAutofillServiceInfo.getComponentName();
					String v19 = v18.flattenToShortString();
					LogMaker v20 = new LogMaker(1721);
					LogMaker v22 = v20.addTaggedData(908, );
					if (p1 == 0) {
						int v23 = p1.size();
						Integer v24 = Integer.valueOf(v23);
						LogMaker v25 = v22.addTaggedData(1722, v24);
						if (p2 == 0) {
							int v26 = p2.size();
							Integer v27 = Integer.valueOf(v26);
							LogMaker v28 = v22.addTaggedData(1723, v27);
							this.mMetricsLogger.write(v22);
							boolean v6 = 1;
							if ( == 0) {
								this.this$0.send(p3, );
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AutofillManagerService.access$2900(this.this$0);
	AbstractPerUserSystemService v3 = AutofillManagerService.access$3000(this.this$0, v1);
	if (v3 == 0) {
		if (Helper.sVerbose == 0) {
			if ( == 0) {
				AutofillManagerService.-$$Nest$msend(this.this$0, p3, );
				return;
			}
		}
	}
}
