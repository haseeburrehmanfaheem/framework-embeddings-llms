The method putOverridesOnReleaseBuilds has the following code snippet:

This is path 1 for the API with depth 2:
public void putOverridesOnReleaseBuilds(CompatibilityOverrideConfig p1, String p2){
	Set v2 = CompatibilityOverrideConfig.overrides.keySet();
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	if (v5 == 0) {
		Object v6 = v4.next();
		long v7 = v6.longValue();
		boolean v9 = this.mCompatConfig.isKnownChangeId(v7);
		boolean v8 = v9;
		if (v8 == 0) {
			long v10 = v6.longValue();
			Long v12 = Long.valueOf(v10);
			Object v13 = this.mChanges.get(v12);
			if (v13 == 0) {
				boolean v14 = v13.getOverridable();
				if (v14 == 0) {
					boolean v11 = ;
					if (v11 == 0) {
						boolean v15 = v4.hasNext();
						if (v15 == 0) {
							Set v18 = CompatibilityOverrideConfig.overrides.keySet();
							Iterator v19 = v18.iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = v19.next();
								if (p3 == 0) {
									long v22 = v21.longValue();
									boolean v23 = CompatConfig.isKnownChangeId(v22);
									if (v23 != 0) {
										boolean v31 = v19.hasNext();
										if (v31 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v33 = new Overrides();
													List v35 = v33.getChangeOverrides();
													Collection v36 = this.mChanges.values();
													Iterator v37 = v36.iterator();
													boolean v38 = v37.hasNext();
													if (v38 == 0) {
														Object v39 = v37.next();
														ChangeOverrides v40 = v39.saveOverrides();
														if (v40 == 0) {
															boolean v41 = v35.add(v40);
															boolean v42 = v37.hasNext();
															if (v42 == 0) {
																boolean v43 = this.mOverridesFile.exists();
																if (v43 == 0) {
																	boolean v44 = this.mBackupOverridesFile.exists();
																	if (v44 == 0) {
																		boolean v45 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
																		if (v45 != 0) {
																			boolean v46 = this.mOverridesFile.createNewFile();
																			PrintWriter v47 = new PrintWriter(this.mOverridesFile);
																			XmlWriter v49 = new XmlWriter(v47);
																			XmlWriter.write(v49, v33);
																			v47.close();
																			boolean v53 = this.mBackupOverridesFile.delete();
																			ChangeIdStateCache.invalidate();
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void putOverridesOnReleaseBuilds(CompatibilityOverrideConfig p1, String p2){
	Set v2 = CompatibilityOverrideConfig.overrides.keySet();
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	if (v5 == 0) {
		Object v6 = v4.next();
		long v7 = v6.longValue();
		boolean v9 = this.mCompatConfig.isKnownChangeId(v7);
		boolean v8 = v9;
		if (v8 == 0) {
			long v10 = v6.longValue();
			Long v12 = Long.valueOf(v10);
			Object v13 = this.mChanges.get(v12);
			if (v13 == 0) {
				boolean v14 = v13.getOverridable();
				if (v14 == 0) {
					boolean v11 = ;
					if (v11 == 0) {
						boolean v15 = v4.hasNext();
						if (v15 == 0) {
							Set v18 = CompatibilityOverrideConfig.overrides.keySet();
							Iterator v19 = v18.iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = v19.next();
								if (p3 == 0) {
									long v22 = v21.longValue();
									boolean v23 = CompatConfig.isKnownChangeId(v22);
									if (v23 != 0) {
										boolean v31 = v19.hasNext();
										if (v31 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v33 = new Overrides();
													List v35 = v33.getChangeOverrides();
													Collection v36 = this.mChanges.values();
													Iterator v37 = v36.iterator();
													boolean v38 = v37.hasNext();
													if (v38 == 0) {
														Object v39 = v37.next();
														ChangeOverrides v40 = v39.saveOverrides();
														if (v40 == 0) {
															boolean v41 = v35.add(v40);
															boolean v42 = v37.hasNext();
															if (v42 == 0) {
																boolean v43 = this.mOverridesFile.exists();
																if (v43 == 0) {
																	boolean v44 = this.mBackupOverridesFile.exists();
																	if (v44 == 0) {
																		boolean v45 = this.mOverridesFile.delete();
																		boolean v46 = this.mOverridesFile.createNewFile();
																		PrintWriter v47 = new PrintWriter(this.mOverridesFile);
																		XmlWriter v49 = new XmlWriter(v47);
																		XmlWriter.write(v49, v33);
																		v47.close();
																		boolean v53 = this.mBackupOverridesFile.delete();
																		ChangeIdStateCache.invalidate();
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void putOverridesOnReleaseBuilds(CompatibilityOverrideConfig p1, String p2){
	Set v2 = CompatibilityOverrideConfig.overrides.keySet();
	Iterator v4 = v2.iterator();
	boolean v5 = v4.hasNext();
	if (v5 == 0) {
		Object v6 = v4.next();
		long v7 = v6.longValue();
		boolean v9 = this.mCompatConfig.isKnownChangeId(v7);
		boolean v8 = v9;
		if (v8 == 0) {
			long v10 = v6.longValue();
			Long v12 = Long.valueOf(v10);
			Object v13 = this.mChanges.get(v12);
			if (v13 == 0) {
				boolean v14 = v13.getOverridable();
				if (v14 == 0) {
					boolean v11 = ;
					if (v11 == 0) {
						boolean v15 = v4.hasNext();
						if (v15 == 0) {
							Set v18 = CompatibilityOverrideConfig.overrides.keySet();
							Iterator v19 = v18.iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = v19.next();
								if (p3 == 0) {
									long v22 = v21.longValue();
									boolean v23 = CompatConfig.isKnownChangeId(v22);
									if (v23 != 0) {
										long v24 = v21.longValue();
										Object v25 = CompatibilityOverrideConfig.overrides.get(v21);
										boolean v26 = CompatConfig.addOverrideUnsafe(v24, p2, v25);
										boolean v27 = v19.hasNext();
										if (v27 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v29 = new Overrides();
													List v31 = v29.getChangeOverrides();
													Collection v32 = this.mChanges.values();
													Iterator v33 = v32.iterator();
													boolean v34 = v33.hasNext();
													if (v34 == 0) {
														Object v35 = v33.next();
														ChangeOverrides v36 = v35.saveOverrides();
														if (v36 == 0) {
															boolean v37 = v31.add(v36);
															boolean v38 = v33.hasNext();
															if (v38 == 0) {
																boolean v39 = this.mOverridesFile.exists();
																if (v39 == 0) {
																	boolean v40 = this.mBackupOverridesFile.exists();
																	if (v40 == 0) {
																		boolean v41 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
																		if (v41 != 0) {
																			boolean v42 = this.mOverridesFile.createNewFile();
																			PrintWriter v43 = new PrintWriter(this.mOverridesFile);
																			XmlWriter v45 = new XmlWriter(v43);
																			XmlWriter.write(v45, v29);
																			v43.close();
																			boolean v49 = this.mBackupOverridesFile.delete();
																			ChangeIdStateCache.invalidate();
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Set v2 = CompatibilityOverrideConfig.overrides.keySet();\nIterator v4 = v2.iterator();\nObject v6 = v4.next();\nlong v7 = v6.longValue();\nboolean v8 = this.mCompatConfig.isKnownChangeId(v7);\nOverrides v33 = new Overrides();\nList v35 = v33.getChangeOverrides();\nPrintWriter v47 = new PrintWriter(this.mOverridesFile);\nXmlWriter v49 = new XmlWriter(v47);\nXmlWriter.write(v49, v33);', 'CompatConfig.addPackageOverridesWithoutSaving(p1, p2, 1);\nCompatConfig.saveOverrides();', 'p0.checkAllCompatOverridesAreOverridable(v2);\nthis.mCompatConfig.addPackageOverrides(p1, p2, 1);']

The method putOverridesOnReleaseBuilds has the following similar APIs:

- API Name: setOverrides(Lcom/android/internal/compat/CompatibilityChangeConfig;Ljava/lang/String;)V with Similarity Score: 0.976179838180542
  - Access Control Level: SYS_OR_SIG and the following code:
CompatConfig.addPackageOverridesWithoutSaving(v34, p2, 0);
CompatConfig.saveOverrides();

- API Name: putAllOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverridesByPackageConfig;)V with Similarity Score: 0.9398877620697021
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatConfig.addAllPackageOverrides(p1, 1);

