The method setOverrides has the following code snippet:

This is path 1 for the API with depth 2:
public void setOverrides(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v5 = this.mChangeConfig.getEnabledSet();
	Set v4 = v5;
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		Object v8 = v6.next();
		long v9 = v8.longValue();
		Long v10 = Long.valueOf(v9);
		PackageOverride$Builder v11 = new PackageOverride$Builder();
		this.mEnabled = 1;
		PackageOverride$Builder v13 = PackageOverride$Builder;
		if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
			PackageOverride v15 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
			PackageOverride v14 = v15;
			Object v17 = v2.put(v10, v14);
			boolean v18 = v6.hasNext();
			if (v18 == 0) {
				Set v20 = this.mChangeConfig.getDisabledSet();
				Set v19 = v20;
				Iterator v21 = v19.iterator();
				boolean v22 = v21.hasNext();
				if (v22 == 0) {
					Object v23 = v21.next();
					long v24 = v23.longValue();
					Long v25 = Long.valueOf(v24);
					PackageOverride$Builder v26 = new PackageOverride$Builder();
					this.mEnabled = 0;
					PackageOverride$Builder v28 = PackageOverride$Builder;
					if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
						PackageOverride v30 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
						PackageOverride v29 = v30;
						Object v32 = v2.put(v25, v29);
						boolean v33 = v21.hasNext();
						if (v33 == 0) {
							CompatibilityOverrideConfig v34 = new CompatibilityOverrideConfig(v2);
							Set v38 = CompatibilityOverrideConfig.overrides.keySet();
							Iterator v39 = v38.iterator();
							boolean v40 = v39.hasNext();
							if (v40 == 0) {
								Object v41 = v39.next();
								if (p3 == 0) {
									long v42 = v41.longValue();
									boolean v43 = CompatConfig.isKnownChangeId(v42);
									if (v43 != 0) {
										boolean v51 = v39.hasNext();
										if (v51 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v53 = new Overrides();
													List v55 = v53.getChangeOverrides();
													Collection v56 = this.mChanges.values();
													Iterator v57 = v56.iterator();
													boolean v58 = v57.hasNext();
													if (v58 == 0) {
														Object v59 = v57.next();
														ChangeOverrides v60 = v59.saveOverrides();
														if (v60 == 0) {
															boolean v61 = v55.add(v60);
															boolean v62 = v57.hasNext();
															if (v62 == 0) {
																boolean v63 = this.mOverridesFile.exists();
																if (v63 == 0) {
																	boolean v64 = this.mBackupOverridesFile.exists();
																	if (v64 == 0) {
																		boolean v65 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
																		if (v65 != 0) {
																			boolean v66 = this.mOverridesFile.createNewFile();
																			PrintWriter v67 = new PrintWriter(this.mOverridesFile);
																			XmlWriter v69 = new XmlWriter(v67);
																			XmlWriter.write(v69, v53);
																			v67.close();
																			boolean v73 = this.mBackupOverridesFile.delete();
																			ChangeIdStateCache.invalidate();
																			int v89 = UserHandle.getAppId(v79);
																			long v91 = Binder.clearCallingIdentity();
																			IActivityManager v92 = ActivityManager.getService();
																			if (v92 == 0) {
																				v92.killUid(v89, -1, "PlatformCompat overrides");
																				Binder.restoreCallingIdentity(v91);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setOverrides(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v5 = this.mChangeConfig.getEnabledSet();
	Set v4 = v5;
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		Object v8 = v6.next();
		long v9 = v8.longValue();
		Long v10 = Long.valueOf(v9);
		PackageOverride$Builder v11 = new PackageOverride$Builder();
		this.mEnabled = 1;
		PackageOverride$Builder v13 = PackageOverride$Builder;
		if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
			PackageOverride v15 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
			PackageOverride v14 = v15;
			Object v17 = v2.put(v10, v14);
			boolean v18 = v6.hasNext();
			if (v18 == 0) {
				Set v20 = this.mChangeConfig.getDisabledSet();
				Set v19 = v20;
				Iterator v21 = v19.iterator();
				boolean v22 = v21.hasNext();
				if (v22 == 0) {
					Object v23 = v21.next();
					long v24 = v23.longValue();
					Long v25 = Long.valueOf(v24);
					PackageOverride$Builder v26 = new PackageOverride$Builder();
					this.mEnabled = 0;
					PackageOverride$Builder v28 = PackageOverride$Builder;
					if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
						PackageOverride v30 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
						PackageOverride v29 = v30;
						Object v32 = v2.put(v25, v29);
						boolean v33 = v21.hasNext();
						if (v33 == 0) {
							CompatibilityOverrideConfig v34 = new CompatibilityOverrideConfig(v2);
							Set v38 = CompatibilityOverrideConfig.overrides.keySet();
							Iterator v39 = v38.iterator();
							boolean v40 = v39.hasNext();
							if (v40 == 0) {
								Object v41 = v39.next();
								if (p3 == 0) {
									long v42 = v41.longValue();
									boolean v43 = CompatConfig.isKnownChangeId(v42);
									if (v43 != 0) {
										boolean v51 = v39.hasNext();
										if (v51 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v53 = new Overrides();
													List v55 = v53.getChangeOverrides();
													Collection v56 = this.mChanges.values();
													Iterator v57 = v56.iterator();
													boolean v58 = v57.hasNext();
													if (v58 == 0) {
														Object v59 = v57.next();
														ChangeOverrides v60 = v59.saveOverrides();
														if (v60 == 0) {
															boolean v61 = v55.add(v60);
															boolean v62 = v57.hasNext();
															if (v62 == 0) {
																boolean v63 = this.mOverridesFile.exists();
																if (v63 == 0) {
																	boolean v64 = this.mBackupOverridesFile.exists();
																	if (v64 == 0) {
																		boolean v65 = this.mOverridesFile.delete();
																		boolean v66 = this.mOverridesFile.createNewFile();
																		PrintWriter v67 = new PrintWriter(this.mOverridesFile);
																		XmlWriter v69 = new XmlWriter(v67);
																		XmlWriter.write(v69, v53);
																		v67.close();
																		boolean v73 = this.mBackupOverridesFile.delete();
																		ChangeIdStateCache.invalidate();
																		int v89 = UserHandle.getAppId(v79);
																		long v91 = Binder.clearCallingIdentity();
																		IActivityManager v92 = ActivityManager.getService();
																		if (v92 == 0) {
																			v92.killUid(v89, -1, "PlatformCompat overrides");
																			Binder.restoreCallingIdentity(v91);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setOverrides(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v5 = this.mChangeConfig.getEnabledSet();
	Set v4 = v5;
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		Object v8 = v6.next();
		long v9 = v8.longValue();
		Long v10 = Long.valueOf(v9);
		PackageOverride$Builder v11 = new PackageOverride$Builder();
		this.mEnabled = 1;
		PackageOverride$Builder v13 = PackageOverride$Builder;
		if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
			PackageOverride v15 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
			PackageOverride v14 = v15;
			Object v17 = v2.put(v10, v14);
			boolean v18 = v6.hasNext();
			if (v18 == 0) {
				Set v20 = this.mChangeConfig.getDisabledSet();
				Set v19 = v20;
				Iterator v21 = v19.iterator();
				boolean v22 = v21.hasNext();
				if (v22 == 0) {
					Object v23 = v21.next();
					long v24 = v23.longValue();
					Long v25 = Long.valueOf(v24);
					PackageOverride$Builder v26 = new PackageOverride$Builder();
					this.mEnabled = 0;
					PackageOverride$Builder v28 = PackageOverride$Builder;
					if ((this.mMinVersionCode < this.mMaxVersionCode) > 0) {
						PackageOverride v30 = new PackageOverride(this.mMinVersionCode,this.mMaxVersionCode,this.mEnabled,0);
						PackageOverride v29 = v30;
						Object v32 = v2.put(v25, v29);
						boolean v33 = v21.hasNext();
						if (v33 == 0) {
							CompatibilityOverrideConfig v34 = new CompatibilityOverrideConfig(v2);
							Set v38 = CompatibilityOverrideConfig.overrides.keySet();
							Iterator v39 = v38.iterator();
							boolean v40 = v39.hasNext();
							if (v40 == 0) {
								Object v41 = v39.next();
								if (p3 == 0) {
									long v42 = v41.longValue();
									boolean v43 = CompatConfig.isKnownChangeId(v42);
									if (v43 != 0) {
										long v44 = v41.longValue();
										Object v45 = CompatibilityOverrideConfig.overrides.get(v41);
										boolean v46 = CompatConfig.addOverrideUnsafe(v44, p2, v45);
										boolean v47 = v39.hasNext();
										if (v47 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v49 = new Overrides();
													List v51 = v49.getChangeOverrides();
													Collection v52 = this.mChanges.values();
													Iterator v53 = v52.iterator();
													boolean v54 = v53.hasNext();
													if (v54 == 0) {
														Object v55 = v53.next();
														ChangeOverrides v56 = v55.saveOverrides();
														if (v56 == 0) {
															boolean v57 = v51.add(v56);
															boolean v58 = v53.hasNext();
															if (v58 == 0) {
																boolean v59 = this.mOverridesFile.exists();
																if (v59 == 0) {
																	boolean v60 = this.mBackupOverridesFile.exists();
																	if (v60 == 0) {
																		boolean v61 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
																		if (v61 != 0) {
																			boolean v62 = this.mOverridesFile.createNewFile();
																			PrintWriter v63 = new PrintWriter(this.mOverridesFile);
																			XmlWriter v65 = new XmlWriter(v63);
																			XmlWriter.write(v65, v49);
																			v63.close();
																			boolean v69 = this.mBackupOverridesFile.delete();
																			ChangeIdStateCache.invalidate();
																			int v85 = UserHandle.getAppId(v75);
																			long v87 = Binder.clearCallingIdentity();
																			IActivityManager v88 = ActivityManager.getService();
																			if (v88 == 0) {
																				v88.killUid(v85, -1, "PlatformCompat overrides");
																				Binder.restoreCallingIdentity(v87);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['CompatConfig.addPackageOverridesWithoutSaving(v34, p2, 0);\nCompatConfig.saveOverrides();', 'this.mCompatConfig.addPackageOverrides(v28, p2, 0);\np0.killPackage(p2);']

The method setOverrides has the following similar APIs:

- API Name: putOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverrideConfig;Ljava/lang/String;)V with Similarity Score: 0.976179838180542
  - Access Control Level: SYS_OR_SIG and the following code:
CompatConfig.addPackageOverridesWithoutSaving(p1, p2, 1);
CompatConfig.saveOverrides();

- API Name: clearOverrides(Ljava/lang/String;)V with Similarity Score: 0.9402558207511902
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatConfig.removePackageOverrides(p1);
p0.killPackage(p1);

