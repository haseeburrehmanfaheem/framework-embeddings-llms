The method removeOverridesOnReleaseBuilds has the following code snippet:

This is path 1 for the API with depth 2:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		long v6 = v5.longValue();
		boolean v8 = this.mCompatConfig.isKnownChangeId(v6);
		boolean v7 = v8;
		if (v7 == 0) {
			long v9 = v5.longValue();
			Long v11 = Long.valueOf(v9);
			Object v12 = this.mChanges.get(v11);
			if (v12 == 0) {
				boolean v13 = v12.getOverridable();
				if (v13 == 0) {
					boolean v10 = ;
					if (v10 == 0) {
						boolean v14 = v3.hasNext();
						if (v14 == 0) {
							Iterator v17 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
							boolean v18 = v17.hasNext();
							if (v18 == 0) {
								Object v19 = v17.next();
								long v20 = v19.longValue();
								boolean v21 = CompatConfig.isKnownChangeId(v20);
								if (v21 != 0) {
									boolean v29 = v17.hasNext();
									if (v29 == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v31 = new Overrides();
													List v33 = v31.getChangeOverrides();
													Collection v34 = this.mChanges.values();
													Iterator v35 = v34.iterator();
													boolean v36 = v35.hasNext();
													if (v36 == 0) {
														Object v37 = v35.next();
														ChangeOverrides v38 = v37.saveOverrides();
														if (v38 == 0) {
															boolean v39 = v33.add(v38);
															boolean v40 = v35.hasNext();
															if (v40 == 0) {
																boolean v41 = this.mOverridesFile.exists();
																if (v41 == 0) {
																	boolean v42 = this.mBackupOverridesFile.exists();
																	if (v42 == 0) {
																		boolean v43 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
																		if (v43 != 0) {
																			boolean v44 = this.mOverridesFile.createNewFile();
																			PrintWriter v45 = new PrintWriter(this.mOverridesFile);
																			XmlWriter v47 = new XmlWriter(v45);
																			XmlWriter.write(v47, v31);
																			v45.close();
																			boolean v51 = this.mBackupOverridesFile.delete();
																			ChangeIdStateCache.invalidate();
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		long v6 = v5.longValue();
		boolean v8 = this.mCompatConfig.isKnownChangeId(v6);
		boolean v7 = v8;
		if (v7 == 0) {
			long v9 = v5.longValue();
			Long v11 = Long.valueOf(v9);
			Object v12 = this.mChanges.get(v11);
			if (v12 == 0) {
				boolean v13 = v12.getOverridable();
				if (v13 == 0) {
					boolean v10 = ;
					if (v10 == 0) {
						boolean v14 = v3.hasNext();
						if (v14 == 0) {
							Iterator v17 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
							boolean v18 = v17.hasNext();
							if (v18 == 0) {
								Object v19 = v17.next();
								long v20 = v19.longValue();
								boolean v21 = CompatConfig.isKnownChangeId(v20);
								if (v21 != 0) {
									boolean v29 = v17.hasNext();
									if (v29 == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v31 = new Overrides();
													List v33 = v31.getChangeOverrides();
													Collection v34 = this.mChanges.values();
													Iterator v35 = v34.iterator();
													boolean v36 = v35.hasNext();
													if (v36 == 0) {
														Object v37 = v35.next();
														ChangeOverrides v38 = v37.saveOverrides();
														if (v38 == 0) {
															boolean v39 = v33.add(v38);
															boolean v40 = v35.hasNext();
															if (v40 == 0) {
																boolean v41 = this.mOverridesFile.exists();
																if (v41 == 0) {
																	boolean v42 = this.mBackupOverridesFile.exists();
																	if (v42 == 0) {
																		boolean v43 = this.mOverridesFile.delete();
																		boolean v44 = this.mOverridesFile.createNewFile();
																		PrintWriter v45 = new PrintWriter(this.mOverridesFile);
																		XmlWriter v47 = new XmlWriter(v45);
																		XmlWriter.write(v47, v31);
																		v45.close();
																		boolean v51 = this.mBackupOverridesFile.delete();
																		ChangeIdStateCache.invalidate();
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		long v6 = v5.longValue();
		boolean v8 = this.mCompatConfig.isKnownChangeId(v6);
		boolean v7 = v8;
		if (v7 == 0) {
			long v9 = v5.longValue();
			Long v11 = Long.valueOf(v9);
			Object v12 = this.mChanges.get(v11);
			if (v12 == 0) {
				boolean v13 = v12.getOverridable();
				if (v13 == 0) {
					boolean v10 = ;
					if (v10 == 0) {
						boolean v14 = v3.hasNext();
						if (v14 == 0) {
							Iterator v17 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
							boolean v18 = v17.hasNext();
							if (v18 == 0) {
								Object v19 = v17.next();
								long v20 = v19.longValue();
								boolean v21 = CompatConfig.isKnownChangeId(v20);
								if (v21 != 0) {
									long v22 = v19.longValue();
									boolean v23 = CompatConfig.removeOverrideUnsafe(v22, p2);
									boolean v24 = v17.hasNext();
									if (v24 == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v26 = new Overrides();
													List v28 = v26.getChangeOverrides();
													Collection v29 = this.mChanges.values();
													Iterator v30 = v29.iterator();
													boolean v31 = v30.hasNext();
													if (v31 == 0) {
														Object v32 = v30.next();
														ChangeOverrides v33 = v32.saveOverrides();
														if (v33 == 0) {
															boolean v34 = v28.add(v33);
															boolean v35 = v30.hasNext();
															if (v35 == 0) {
																boolean v36 = this.mOverridesFile.exists();
																if (v36 == 0) {
																	boolean v37 = this.mBackupOverridesFile.exists();
																	if (v37 == 0) {
																		boolean v38 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
																		if (v38 != 0) {
																			boolean v39 = this.mOverridesFile.createNewFile();
																			PrintWriter v40 = new PrintWriter(this.mOverridesFile);
																			XmlWriter v42 = new XmlWriter(v40);
																			XmlWriter.write(v42, v26);
																			v40.close();
																			boolean v46 = this.mBackupOverridesFile.delete();
																			ChangeIdStateCache.invalidate();
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Overrides v31 = new Overrides();\nList v33 = v31.getChangeOverrides();\nthis.mOverridesFile.renameTo(this.mBackupOverridesFile);\nthis.mOverridesFile.createNewFile();\nXmlWriter.write(v47, v31);', 'CompatConfig.removePackageOverridesWithoutSaving(p1, p2);\nCompatConfig.saveOverrides();\nCompatConfig.invalidateCache();', 'p0.checkAllCompatOverridesAreOverridable(CompatibilityOverridesToRemoveConfig.changeIds);\nthis.mCompatConfig.removePackageOverrides(p1, p2);']

The method removeOverridesOnReleaseBuilds has the following similar APIs:

- API Name: removeAllOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverridesToRemoveByPackageConfig;)V with Similarity Score: 0.9372891187667847
  - Access Control Level: SYS_OR_SIG and the following code:
Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();
Iterator v3 = v2.iterator();
p0.checkAllCompatOverridesAreOverridable(CompatibilityOverridesToRemoveConfig.changeIds);
this.mCompatConfig.removeAllPackageOverrides(p1);

- API Name: putOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverrideConfig;Ljava/lang/String;)V with Similarity Score: 0.9147920608520508
  - Access Control Level: SYS_OR_SIG and the following code:
CompatConfig.addPackageOverridesWithoutSaving(p1, p2, 1);
CompatConfig.saveOverrides();

