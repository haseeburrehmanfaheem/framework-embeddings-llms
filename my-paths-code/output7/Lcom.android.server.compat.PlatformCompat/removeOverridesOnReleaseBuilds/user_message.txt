This is path 1 for the API with depth 2:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		long v6 = v5.longValue();
		boolean v8 = this.mCompatConfig.isKnownChangeId(v6);
		boolean v7 = v8;
		if (v7 == 0) {
			long v9 = v5.longValue();
			Long v11 = Long.valueOf(v9);
			Object v12 = this.mChanges.get(v11);
			if (v12 == 0) {
				boolean v13 = v12.getOverridable();
				if (v13 == 0) {
					boolean v10 = ;
					if (v10 == 0) {
						boolean v14 = v3.hasNext();
						if (v14 == 0) {
							Iterator v17 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
							boolean v18 = v17.hasNext();
							if (v18 == 0) {
								Object v19 = v17.next();
								long v20 = v19.longValue();
								boolean v21 = CompatConfig.isKnownChangeId(v20);
								if (v21 != 0) {
									boolean v29 = v17.hasNext();
									if (v29 == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (this.mOverridesFile == 0) {
												if (this.mBackupOverridesFile != 0) {
													Overrides v31 = new Overrides();
													List v33 = v31.getChangeOverrides();
													Collection v34 = this.mChanges.values();
													Iterator v35 = v34.iterator();
													boolean v36 = v35.hasNext();
													if (v36 == 0) {
														Object v37 = v35.next();
														ChangeOverrides v38 = v37.saveOverrides();
														if (v38 == 0) {
															boolean v39 = v33.add(v38);
															boolean v40 = v35.hasNext();
															if (v40 == 0) {
																boolean v41 = this.mOverridesFile.exists();
																if (v41 == 0) {
																	boolean v42 = this.mBackupOverridesFile.exists();
																	if (v42 == 0) {
																		boolean v43 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
																		if (v43 != 0) {
																			boolean v44 = this.mOverridesFile.createNewFile();
																			PrintWriter v45 = new PrintWriter(this.mOverridesFile);
																			XmlWriter v47 = new XmlWriter(v45);
																			XmlWriter.write(v47, v31);
																			v45.close();
																			boolean v51 = this.mBackupOverridesFile.delete();
																			ChangeIdStateCache.invalidate();
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	Iterator v3 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		long v6 = v5.longValue();
		boolean v7 = PlatformCompat.isKnownChangeId(v6);
		if (v7 == 0) {
			long v8 = v5.longValue();
			boolean v9 = this.mCompatConfig.isOverridable(v8);
			if (v9 == 0) {
				boolean v10 = v3.hasNext();
				if (v10 == 0) {
					boolean v12 = CompatConfig.removePackageOverridesWithoutSaving(p1, p2);
					if (v12 == 0) {
						CompatConfig.saveOverrides();
						CompatConfig.invalidateCache();
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveConfig p1, String p2){
	p0.checkAllCompatOverridesAreOverridable(CompatibilityOverridesToRemoveConfig.changeIds);
	this.mCompatConfig.removePackageOverrides(p1, p2);
	return;
}
