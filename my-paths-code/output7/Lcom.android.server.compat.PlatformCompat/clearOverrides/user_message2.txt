The method clearOverrides has the following code snippet:

This is path 1 for the API with depth 2:
public void clearOverrides(String p1){
	PackageManager v4 = this.mContext.getPackageManager();
	ApplicationInfo v5 = v4.getApplicationInfo(p1, 4194304);
	Long v6 = Long.valueOf(ApplicationInfo.longVersionCode);
	Long v3 = v6;
	Collection v7 = this.mChanges.values();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	if (v9 == 0) {
		Object v10 = v8.next();
		long v12 = v10.getId();
		OverrideAllowedState v13 = this.mOverrideValidator.getOverrideAllowedState(v12, p1);
		boolean v14 = v10.removePackageOverride(p1, v13, v3);
		boolean v11 = v14;
		boolean v15 = v8.hasNext();
		if (v15 == 0) {
			if ( == 0) {
				if (this.mOverridesFile == 0) {
					if (this.mBackupOverridesFile != 0) {
						Overrides v17 = new Overrides();
						List v19 = v17.getChangeOverrides();
						Collection v20 = this.mChanges.values();
						Iterator v21 = v20.iterator();
						boolean v22 = v21.hasNext();
						if (v22 == 0) {
							Object v23 = v21.next();
							ChangeOverrides v24 = v23.saveOverrides();
							if (v24 == 0) {
								boolean v25 = v19.add(v24);
								boolean v26 = v21.hasNext();
								if (v26 == 0) {
									boolean v27 = this.mOverridesFile.exists();
									if (v27 == 0) {
										boolean v28 = this.mBackupOverridesFile.exists();
										if (v28 == 0) {
											boolean v29 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
											if (v29 != 0) {
												boolean v30 = this.mOverridesFile.createNewFile();
												PrintWriter v31 = new PrintWriter(this.mOverridesFile);
												XmlWriter v33 = new XmlWriter(v31);
												XmlWriter.write(v33, v17);
												v31.close();
												boolean v37 = this.mBackupOverridesFile.delete();
												ChangeIdStateCache.invalidate();
												int v53 = UserHandle.getAppId(v43);
												long v55 = Binder.clearCallingIdentity();
												IActivityManager v56 = ActivityManager.getService();
												if (v56 == 0) {
													v56.killUid(v53, -1, "PlatformCompat overrides");
													Binder.restoreCallingIdentity(v55);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void clearOverrides(String p1){
	PackageManager v4 = this.mContext.getPackageManager();
	ApplicationInfo v5 = v4.getApplicationInfo(p1, 4194304);
	Long v6 = Long.valueOf(ApplicationInfo.longVersionCode);
	Long v3 = v6;
	Collection v7 = this.mChanges.values();
	Iterator v8 = v7.iterator();
	boolean v9 = v8.hasNext();
	if (v9 == 0) {
		Object v10 = v8.next();
		long v12 = v10.getId();
		OverrideAllowedState v13 = this.mOverrideValidator.getOverrideAllowedState(v12, p1);
		boolean v14 = v10.removePackageOverride(p1, v13, v3);
		boolean v11 = v14;
		boolean v15 = v8.hasNext();
		if (v15 == 0) {
			if ( == 0) {
				if (this.mOverridesFile == 0) {
					if (this.mBackupOverridesFile != 0) {
						Overrides v17 = new Overrides();
						List v19 = v17.getChangeOverrides();
						Collection v20 = this.mChanges.values();
						Iterator v21 = v20.iterator();
						boolean v22 = v21.hasNext();
						if (v22 == 0) {
							Object v23 = v21.next();
							ChangeOverrides v24 = v23.saveOverrides();
							if (v24 == 0) {
								boolean v25 = v19.add(v24);
								boolean v26 = v21.hasNext();
								if (v26 == 0) {
									boolean v27 = this.mOverridesFile.exists();
									if (v27 == 0) {
										boolean v28 = this.mBackupOverridesFile.exists();
										if (v28 == 0) {
											boolean v29 = this.mOverridesFile.delete();
											boolean v30 = this.mOverridesFile.createNewFile();
											PrintWriter v31 = new PrintWriter(this.mOverridesFile);
											XmlWriter v33 = new XmlWriter(v31);
											XmlWriter.write(v33, v17);
											v31.close();
											boolean v37 = this.mBackupOverridesFile.delete();
											ChangeIdStateCache.invalidate();
											int v53 = UserHandle.getAppId(v43);
											long v55 = Binder.clearCallingIdentity();
											IActivityManager v56 = ActivityManager.getService();
											if (v56 == 0) {
												v56.killUid(v53, -1, "PlatformCompat overrides");
												Binder.restoreCallingIdentity(v55);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void clearOverrides(String p1){
	PackageManager v4 = this.mContext.getPackageManager();
	ApplicationInfo v5 = v4.getApplicationInfo(p1, 4194304);
	Long v3 = 0;
	Collection v6 = this.mChanges.values();
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		long v11 = v9.getId();
		OverrideAllowedState v12 = this.mOverrideValidator.getOverrideAllowedState(v11, p1);
		boolean v13 = v9.removePackageOverride(p1, v12, v3);
		boolean v10 = v13;
		boolean v14 = v7.hasNext();
		if (v14 == 0) {
			if ( == 0) {
				if (this.mOverridesFile == 0) {
					if (this.mBackupOverridesFile != 0) {
						Overrides v16 = new Overrides();
						List v18 = v16.getChangeOverrides();
						Collection v19 = this.mChanges.values();
						Iterator v20 = v19.iterator();
						boolean v21 = v20.hasNext();
						if (v21 == 0) {
							Object v22 = v20.next();
							ChangeOverrides v23 = v22.saveOverrides();
							if (v23 == 0) {
								boolean v24 = v18.add(v23);
								boolean v25 = v20.hasNext();
								if (v25 == 0) {
									boolean v26 = this.mOverridesFile.exists();
									if (v26 == 0) {
										boolean v27 = this.mBackupOverridesFile.exists();
										if (v27 == 0) {
											boolean v28 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
											if (v28 != 0) {
												boolean v29 = this.mOverridesFile.createNewFile();
												PrintWriter v30 = new PrintWriter(this.mOverridesFile);
												XmlWriter v32 = new XmlWriter(v30);
												XmlWriter.write(v32, v16);
												v30.close();
												boolean v36 = this.mBackupOverridesFile.delete();
												ChangeIdStateCache.invalidate();
												int v52 = UserHandle.getAppId(v42);
												long v54 = Binder.clearCallingIdentity();
												IActivityManager v55 = ActivityManager.getService();
												if (v55 == 0) {
													v55.killUid(v52, -1, "PlatformCompat overrides");
													Binder.restoreCallingIdentity(v54);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Collection v7 = this.mChanges.values();\nIterator v8 = v7.iterator();\nObject v10 = v8.next();\nOverrideAllowedState v13 = this.mOverrideValidator.getOverrideAllowedState(v12, p1);\nboolean v14 = v10.removePackageOverride(p1, v13, v3);\nOverrides v17 = new Overrides();\nList v19 = v17.getChangeOverrides();\nXmlWriter.write(v33, v17);', 'Long v3 = CompatConfig.getVersionCodeOrNull(p1);\nboolean v8 = CompatConfig.removeOverrideUnsafe(v7, p1, v3);\nCompatConfig.saveOverrides();\nint v25 = UserHandle.getAppId(v15);\nPlatformCompat.killUid(v25);', 'this.mCompatConfig.removePackageOverrides(p1);\np0.killPackage(p1);']

The method clearOverrides has the following similar APIs:

- API Name: setOverrides(Lcom/android/internal/compat/CompatibilityChangeConfig;Ljava/lang/String;)V with Similarity Score: 0.9402558207511902
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatConfig.addPackageOverrides(v28, p2, 0);
p0.killPackage(p2);

- API Name: clearOverride(JLjava/lang/String;)Z with Similarity Score: 0.9391557574272156
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v2 = this.mCompatConfig.removeOverride(p1, p2);
p0.killPackage(p2);

