This is path 1 for the API with depth 2:
public void removeAllOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveByPackageConfig p1){
	Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		Iterator v7 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
		boolean v8 = v7.hasNext();
		if (v8 == 0) {
			Object v9 = v7.next();
			long v10 = v9.longValue();
			boolean v12 = this.mCompatConfig.isKnownChangeId(v10);
			boolean v11 = v12;
			if (v11 == 0) {
				long v13 = v9.longValue();
				Long v15 = Long.valueOf(v13);
				Object v16 = this.mChanges.get(v15);
				if (v16 == 0) {
					boolean v17 = v16.getOverridable();
					if (v17 == 0) {
						boolean v14 = ;
						if (v14 == 0) {
							boolean v18 = v7.hasNext();
							if (v18 == 0) {
								boolean v19 = v3.hasNext();
								if (v19 == 0) {
									Set v21 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.keySet();
									Iterator v22 = v21.iterator();
									boolean v23 = v22.hasNext();
									if (v23 == 0) {
										Object v24 = v22.next();
										Object v25 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.get(v24);
										Iterator v27 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
										boolean v28 = v27.hasNext();
										if (v28 == 0) {
											Object v29 = v27.next();
											long v30 = v29.longValue();
											boolean v31 = CompatConfig.isKnownChangeId(v30);
											if (v31 != 0) {
												boolean v39 = v27.hasNext();
												if (v39 == 0) {
													boolean v26 = ;
													boolean v40 = v22.hasNext();
													if (v40 == 0) {
														if ( == 0) {
															if (this.mOverridesFile == 0) {
																if (this.mBackupOverridesFile != 0) {
																	Overrides v42 = new Overrides();
																	List v44 = v42.getChangeOverrides();
																	Collection v45 = this.mChanges.values();
																	Iterator v46 = v45.iterator();
																	boolean v47 = v46.hasNext();
																	if (v47 == 0) {
																		Object v48 = v46.next();
																		ChangeOverrides v49 = v48.saveOverrides();
																		if (v49 == 0) {
																			boolean v50 = v44.add(v49);
																			boolean v51 = v46.hasNext();
																			if (v51 == 0) {
																				boolean v52 = this.mOverridesFile.exists();
																				if (v52 == 0) {
																					boolean v53 = this.mBackupOverridesFile.exists();
																					if (v53 == 0) {
																						boolean v54 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
																						if (v54 != 0) {
																							boolean v55 = this.mOverridesFile.createNewFile();
																							PrintWriter v56 = new PrintWriter(this.mOverridesFile);
																							XmlWriter v58 = new XmlWriter(v56);
																							XmlWriter.write(v58, v42);
																							v56.close();
																							boolean v62 = this.mBackupOverridesFile.delete();
																							ChangeIdStateCache.invalidate();
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeAllOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveByPackageConfig p1){
	Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		Iterator v7 = CompatibilityOverridesToRemoveConfig.changeIds.iterator();
		boolean v8 = v7.hasNext();
		if (v8 == 0) {
			Object v9 = v7.next();
			long v10 = v9.longValue();
			boolean v11 = PlatformCompat.isKnownChangeId(v10);
			if (v11 == 0) {
				long v12 = v9.longValue();
				boolean v13 = this.mCompatConfig.isOverridable(v12);
				if (v13 == 0) {
					boolean v14 = v7.hasNext();
					if (v14 == 0) {
						boolean v15 = v3.hasNext();
						if (v15 == 0) {
							Set v17 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.keySet();
							Iterator v18 = v17.iterator();
							boolean v19 = v18.hasNext();
							if (v19 == 0) {
								Object v20 = v18.next();
								Object v21 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.get(v20);
								boolean v22 = CompatConfig.removePackageOverridesWithoutSaving(v21, v20);
								boolean v23 = v18.hasNext();
								if (v23 == 0) {
									if ( == 0) {
										CompatConfig.saveOverrides();
										CompatConfig.invalidateCache();
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeAllOverridesOnReleaseBuilds(CompatibilityOverridesToRemoveByPackageConfig p1){
	Collection v2 = CompatibilityOverridesToRemoveByPackageConfig.packageNameToOverridesToRemove.values();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	if (v4 == 0) {
		Object v5 = v3.next();
		p0.checkAllCompatOverridesAreOverridable(CompatibilityOverridesToRemoveConfig.changeIds);
		boolean v7 = v3.hasNext();
		if (v7 == 0) {
			this.mCompatConfig.removeAllPackageOverrides(p1);
			return;
		}
	}
}
