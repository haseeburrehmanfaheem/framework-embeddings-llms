The method clearOverride has the following code snippet:

This is path 1 for the API with depth 2:
public boolean clearOverride(long p1, String p2){
	Long v4 = CompatConfig.getVersionCodeOrNull(p2);
	Long v5 = Long.valueOf(p1);
	Object v6 = this.mChanges.get(v5);
	if (v6 == 0) {
		boolean v7 = CompatConfig.removeOverrideUnsafe(v6, p2, v4);
		boolean v3 = v7;
		if (v3 == 0) {
			if (this.mOverridesFile == 0) {
				if (this.mBackupOverridesFile != 0) {
					Overrides v9 = new Overrides();
					List v11 = v9.getChangeOverrides();
					Collection v12 = this.mChanges.values();
					Iterator v13 = v12.iterator();
					boolean v14 = v13.hasNext();
					if (v14 == 0) {
						Object v15 = v13.next();
						ChangeOverrides v16 = v15.saveOverrides();
						if (v16 == 0) {
							boolean v17 = v11.add(v16);
							boolean v18 = v13.hasNext();
							if (v18 == 0) {
								boolean v19 = this.mOverridesFile.exists();
								if (v19 == 0) {
									boolean v20 = this.mBackupOverridesFile.exists();
									if (v20 == 0) {
										boolean v21 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
										if (v21 != 0) {
											boolean v22 = this.mOverridesFile.createNewFile();
											PrintWriter v23 = new PrintWriter(this.mOverridesFile);
											XmlWriter v25 = new XmlWriter(v23);
											XmlWriter.write(v25, v9);
											v23.close();
											boolean v29 = this.mBackupOverridesFile.delete();
											ChangeIdStateCache.invalidate();
											boolean v2 = v3;
											int v45 = UserHandle.getAppId(v35);
											long v47 = Binder.clearCallingIdentity();
											IActivityManager v48 = ActivityManager.getService();
											if (v48 == 0) {
												v48.killUid(v45, -1, "PlatformCompat overrides");
												Binder.restoreCallingIdentity(v47);
												return v2;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean clearOverride(long p1, String p2){
	Long v4 = CompatConfig.getVersionCodeOrNull(p2);
	Long v5 = Long.valueOf(p1);
	Object v6 = this.mChanges.get(v5);
	if (v6 == 0) {
		boolean v7 = CompatConfig.removeOverrideUnsafe(v6, p2, v4);
		boolean v3 = v7;
		if (v3 == 0) {
			if (this.mOverridesFile == 0) {
				if (this.mBackupOverridesFile != 0) {
					Overrides v9 = new Overrides();
					List v11 = v9.getChangeOverrides();
					Collection v12 = this.mChanges.values();
					Iterator v13 = v12.iterator();
					boolean v14 = v13.hasNext();
					if (v14 == 0) {
						Object v15 = v13.next();
						ChangeOverrides v16 = v15.saveOverrides();
						if (v16 == 0) {
							boolean v17 = v11.add(v16);
							boolean v18 = v13.hasNext();
							if (v18 == 0) {
								boolean v19 = this.mOverridesFile.exists();
								if (v19 == 0) {
									boolean v20 = this.mBackupOverridesFile.exists();
									if (v20 == 0) {
										boolean v21 = this.mOverridesFile.delete();
										boolean v22 = this.mOverridesFile.createNewFile();
										PrintWriter v23 = new PrintWriter(this.mOverridesFile);
										XmlWriter v25 = new XmlWriter(v23);
										XmlWriter.write(v25, v9);
										v23.close();
										boolean v29 = this.mBackupOverridesFile.delete();
										ChangeIdStateCache.invalidate();
										boolean v2 = v3;
										int v45 = UserHandle.getAppId(v35);
										long v47 = Binder.clearCallingIdentity();
										IActivityManager v48 = ActivityManager.getService();
										if (v48 == 0) {
											v48.killUid(v45, -1, "PlatformCompat overrides");
											Binder.restoreCallingIdentity(v47);
											return v2;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean clearOverride(long p1, String p2){
	Long v4 = CompatConfig.getVersionCodeOrNull(p2);
	Long v5 = Long.valueOf(p1);
	Object v6 = this.mChanges.get(v5);
	if (v6 == 0) {
		boolean v3 = 0;
		if (v3 == 0) {
			if (this.mOverridesFile == 0) {
				if (this.mBackupOverridesFile != 0) {
					Overrides v8 = new Overrides();
					List v10 = v8.getChangeOverrides();
					Collection v11 = this.mChanges.values();
					Iterator v12 = v11.iterator();
					boolean v13 = v12.hasNext();
					if (v13 == 0) {
						Object v14 = v12.next();
						ChangeOverrides v15 = v14.saveOverrides();
						if (v15 == 0) {
							boolean v16 = v10.add(v15);
							boolean v17 = v12.hasNext();
							if (v17 == 0) {
								boolean v18 = this.mOverridesFile.exists();
								if (v18 == 0) {
									boolean v19 = this.mBackupOverridesFile.exists();
									if (v19 == 0) {
										boolean v20 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
										if (v20 != 0) {
											boolean v21 = this.mOverridesFile.createNewFile();
											PrintWriter v22 = new PrintWriter(this.mOverridesFile);
											XmlWriter v24 = new XmlWriter(v22);
											XmlWriter.write(v24, v8);
											v22.close();
											boolean v28 = this.mBackupOverridesFile.delete();
											ChangeIdStateCache.invalidate();
											boolean v2 = v3;
											int v44 = UserHandle.getAppId(v34);
											long v46 = Binder.clearCallingIdentity();
											IActivityManager v47 = ActivityManager.getService();
											if (v47 == 0) {
												v47.killUid(v44, -1, "PlatformCompat overrides");
												Binder.restoreCallingIdentity(v46);
												return v2;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v2 = this.mCompatConfig.removeOverride(p1, p2);\np0.killPackage(p2);']

The method clearOverride has the following similar APIs:

- API Name: clearOverrides(Ljava/lang/String;)V with Similarity Score: 0.9391557574272156
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatConfig.removePackageOverrides(p1);
p0.killPackage(p1);

- API Name: clearOverridesForTest(Ljava/lang/String;)V with Similarity Score: 0.8697539567947388
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatConfig.removePackageOverrides(p1);

