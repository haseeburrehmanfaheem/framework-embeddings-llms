The method isOemUnlockAllowed has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isOemUnlockAllowed(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = this.mOemLock;
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	if (v4 == 0) {
		OemLock v5 = this.mOemLock;
		boolean v6 = v5.isOemUnlockAllowedByDevice();
		if (v6 == 0) {
			Object v9 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
			if (v9 == 0) {
				if (this.mOemLock instanceof PersistentDataBlockLock != 0) {
					v9.forceOemUnlockEnabled(p2);
					Binder.restoreCallingIdentity(v2);
					return ;
				}
			}
		}
	}
}

and the following sink code:
['boolean v4 = v3.isOemUnlockAllowedByCarrier();\nif (v4 == 0) {\nboolean v6 = v5.isOemUnlockAllowedByDevice();\nif (v6 == 0) {', 'Object v9 = LocalServices.getService(PersistentDataBlockManagerInterna.class);\nv9.forceOemUnlockEnabled(p2);', 'this.this$0.setPersistentDataBlockOemUnlockAllowedBit();']

The method isOemUnlockAllowed has the following similar APIs:

- API Name: isOemUnlockAllowedByCarrier()Z with Similarity Score: 0.890834629535675
  - Access Control Level: SYS_OR_SIG and the following code:
OemLock v3 = this.mOemLock;
boolean v4 = v3.isOemUnlockAllowedByCarrier();
return v4;

- API Name: getOemUnlockEnabled()Z with Similarity Score: 0.8476547002792358
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v2 = PersistentDataBlockService.-$$Nest$mdoGetOemUnlockEnabled(this.this$0);

