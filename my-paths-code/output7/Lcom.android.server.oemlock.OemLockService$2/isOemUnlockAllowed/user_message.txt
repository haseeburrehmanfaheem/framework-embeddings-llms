This is path 1 for the API with depth 2:
public boolean isOemUnlockAllowed(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = this.mOemLock;
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	if (v4 == 0) {
		OemLock v5 = this.mOemLock;
		boolean v6 = v5.isOemUnlockAllowedByDevice();
		if (v6 == 0) {
			Object v9 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
			if (v9 == 0) {
				if (this.mOemLock instanceof PersistentDataBlockLock != 0) {
					v9.forceOemUnlockEnabled(p2);
					Binder.restoreCallingIdentity(v2);
					return ;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isOemUnlockAllowed(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = this.mOemLock;
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	if (v4 == 0) {
		OemLock v5 = this.mOemLock;
		boolean v6 = v5.isOemUnlockAllowedByDevice();
		if (v6 == 0) {
			this.this$0.setPersistentDataBlockOemUnlockAllowedBit();
			Binder.restoreCallingIdentity(v2);
			return ;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isOemUnlockAllowed(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	if (v4 == 0) {
		OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
		boolean v6 = v5.isOemUnlockAllowedByDevice();
		if (v6 == 0) {
			OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, );
			Binder.restoreCallingIdentity(v2);
			return ;
		}
	}
}
