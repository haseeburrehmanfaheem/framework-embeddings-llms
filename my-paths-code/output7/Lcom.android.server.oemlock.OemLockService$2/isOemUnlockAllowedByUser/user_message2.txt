The method isOemUnlockAllowedByUser has the following code snippet:

This is path 1 for the API with depth 1:
public boolean isOemUnlockAllowedByUser(){
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = this.mOemLock;
	boolean v4 = v3.isOemUnlockAllowedByDevice();
	Binder.restoreCallingIdentity(v2);
	return v4;
}

and the following sink code:
['long v2 = Binder.clearCallingIdentity();\nOemLock v3 = this.mOemLock;\nboolean v4 = v3.isOemUnlockAllowedByDevice();\nreturn v4;', 'long v2 = Binder.clearCallingIdentity();\nOemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);\nboolean v4 = v3.isOemUnlockAllowedByDevice();\nreturn v4;']

The method isOemUnlockAllowedByUser has the following similar APIs:

- API Name: setOemUnlockAllowedByCarrier(Z[B)V with Similarity Score: 0.9115631580352783
  - Access Control Level: SYS_OR_SIG and the following code:
long v5 = Binder.clearCallingIdentity();
OemLock v10 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
v10.setOemUnlockAllowedByCarrier(p1, p2);
Binder.restoreCallingIdentity(v9);

- API Name: setOemUnlockAllowedByCarrier(Z[B)V with Similarity Score: 0.876649796962738
  - Access Control Level: SYS_OR_SIG and the following code:
long v5 = Binder.clearCallingIdentity();
OemLock v10 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
v10.setOemUnlockAllowedByCarrier(p1, p2);
Binder.restoreCallingIdentity(v9);

