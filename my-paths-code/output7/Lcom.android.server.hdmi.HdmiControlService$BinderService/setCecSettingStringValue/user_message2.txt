The method setCecSettingStringValue has the following code snippet:

This is path 1 for the API with depth 2:
public void setCecSettingStringValue(String p1, String p2){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			boolean v11 = this.mUserConfigurable;
			if (v11 == 0) {
				HdmiCecConfig$Value v13 = HdmiCecConfig$Setting.getDefaultValue();
				String v14 = v13.getStringValue();
				if (v14 == 0) {
					String v12 = ;
					boolean v15 = v12.equals("string");
					if (v15 == 0) {
						HdmiCecConfig$Setting v17 = HdmiCecConfig.getSetting(p1);
						if (v17 == 0) {
							String v18 = v17.getValueType();
							boolean v19 = v18.equals("string");
							if (v19 == 0) {
								ArrayList v20 = new ArrayList();
								List v22 = v17.getAllowedValues();
								Iterator v23 = v22.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									String v26 = v25.getStringValue();
									boolean v27 = v20.add(v26);
									boolean v28 = v23.hasNext();
									if (v28 == 0) {
										List v16 = v20;
										boolean v29 = v16.contains(p2);
										if (v29 == 0) {
											StringBuilder v30 = new StringBuilder();
											StringBuilder v32 = v30.append("Updating CEC setting '");
											StringBuilder v33 = v30.append(p1);
											StringBuilder v34 = v30.append("' to '");
											StringBuilder v35 = v30.append(p2);
											StringBuilder v36 = v30.append("'.");
											String v37 = v30.toString();
											Object v38 = new Object(0);
											HdmiLogger v40 = HdmiLogger.getLogger();
											String v41 = HdmiLogger.toLogString(v37, v38);
											v40.debugInternal(v41);
											int v44 = HdmiCecConfig.getStorage(v8);
											String v45 = HdmiCecConfig.getStorageKey(v8);
											if (v44 != 0) {
												StringBuilder v46 = new StringBuilder();
												StringBuilder v48 = v46.append("Setting '");
												StringBuilder v49 = v46.append(v45);
												StringBuilder v50 = v46.append("' sysprop.");
												String v51 = v46.toString();
												Object v52 = new Object(0);
												HdmiLogger.debug(v51, v52);
												this.mStorageAdapter.storeSystemProperty(v45, p2);
												Binder.restoreCallingIdentity(v5);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setCecSettingStringValue(String p1, String p2){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			boolean v11 = this.mUserConfigurable;
			if (v11 == 0) {
				HdmiCecConfig$Value v13 = HdmiCecConfig$Setting.getDefaultValue();
				String v14 = v13.getStringValue();
				if (v14 == 0) {
					String v12 = ;
					boolean v15 = v12.equals("string");
					if (v15 == 0) {
						HdmiCecConfig$Setting v17 = HdmiCecConfig.getSetting(p1);
						if (v17 == 0) {
							String v18 = v17.getValueType();
							boolean v19 = v18.equals("string");
							if (v19 == 0) {
								ArrayList v20 = new ArrayList();
								List v22 = v17.getAllowedValues();
								Iterator v23 = v22.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									String v26 = v25.getStringValue();
									boolean v27 = v20.add(v26);
									boolean v28 = v23.hasNext();
									if (v28 == 0) {
										List v16 = v20;
										boolean v29 = v16.contains(p2);
										if (v29 == 0) {
											StringBuilder v30 = new StringBuilder();
											StringBuilder v32 = v30.append("Updating CEC setting '");
											StringBuilder v33 = v30.append(p1);
											StringBuilder v34 = v30.append("' to '");
											StringBuilder v35 = v30.append(p2);
											StringBuilder v36 = v30.append("'.");
											String v37 = v30.toString();
											Object v38 = new Object(0);
											HdmiLogger v40 = HdmiLogger.getLogger();
											String v41 = HdmiLogger.toLogString(v37, v38);
											v40.debugInternal(v41);
											int v44 = HdmiCecConfig.getStorage(v8);
											String v45 = HdmiCecConfig.getStorageKey(v8);
											if (v44 != 0) {
												if (v44 != 1) {
													StringBuilder v46 = new StringBuilder();
													StringBuilder v48 = v46.append("Setting '");
													StringBuilder v49 = v46.append(v45);
													StringBuilder v50 = v46.append("' global setting.");
													String v51 = v46.toString();
													Object v52 = new Object(0);
													HdmiLogger.debug(v51, v52);
													this.mStorageAdapter.storeGlobalSetting(v45, p2);
													Binder.restoreCallingIdentity(v5);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setCecSettingStringValue(String p1, String p2){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			boolean v11 = this.mUserConfigurable;
			if (v11 == 0) {
				HdmiCecConfig$Value v13 = HdmiCecConfig$Setting.getDefaultValue();
				String v14 = v13.getStringValue();
				if (v14 == 0) {
					String v12 = ;
					boolean v15 = v12.equals("string");
					if (v15 == 0) {
						HdmiCecConfig$Setting v17 = HdmiCecConfig.getSetting(p1);
						if (v17 == 0) {
							String v18 = v17.getValueType();
							boolean v19 = v18.equals("string");
							if (v19 == 0) {
								ArrayList v20 = new ArrayList();
								List v22 = v17.getAllowedValues();
								Iterator v23 = v22.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									String v26 = v25.getStringValue();
									boolean v27 = v20.add(v26);
									boolean v28 = v23.hasNext();
									if (v28 == 0) {
										List v16 = v20;
										boolean v29 = v16.contains(p2);
										if (v29 == 0) {
											StringBuilder v30 = new StringBuilder();
											StringBuilder v32 = v30.append("Updating CEC setting '");
											StringBuilder v33 = v30.append(p1);
											StringBuilder v34 = v30.append("' to '");
											StringBuilder v35 = v30.append(p2);
											StringBuilder v36 = v30.append("'.");
											String v37 = v30.toString();
											Object v38 = new Object(0);
											HdmiLogger v40 = HdmiLogger.getLogger();
											String v41 = HdmiLogger.toLogString(v37, v38);
											v40.debugInternal(v41);
											int v44 = HdmiCecConfig.getStorage(v8);
											String v45 = HdmiCecConfig.getStorageKey(v8);
											if (v44 != 0) {
												if (v44 != 1) {
													if (v44 != 2) {
														StringBuilder v46 = new StringBuilder();
														StringBuilder v48 = v46.append("Setting '");
														StringBuilder v49 = v46.append(v45);
														StringBuilder v50 = v46.append("' shared pref.");
														String v51 = v46.toString();
														Object v52 = new Object(0);
														HdmiLogger.debug(v51, v52);
														this.mStorageAdapter.storeSharedPref(v45, p2);
														HdmiCecConfig.notifySettingChanged(v8);
														Binder.restoreCallingIdentity(v5);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['HdmiCecConfig v6 = HdmiCecConfig.getSetting(p1);\nif (v7 == 0) {\nString v8 = v6.getValueType();\nboolean v9 = v8.equals("string");\nif (v9 == 0) {\nList v10 = HdmiCecConfig.getAllowedStringValues(p1);\nboolean v11 = v10.contains(p2);\nif (v11 == 0) {\nHdmiCecConfig.storeValue(v6, p2);', 'this.mStorageAdapter.storeSystemProperty(v45, p2);', 'HdmiCecConfig v3 = this.this$0.getHdmiCecConfig();\nv3.setStringValue(p1, p2);']

The method setCecSettingStringValue has the following similar APIs:

- API Name: setCecSettingIntValue(Ljava/lang/String;I)V with Similarity Score: 0.9213095903396606
  - Access Control Level: SYS_OR_SIG and the following code:
HdmiCecConfig$Setting v6 = HdmiCecConfig.getSetting(p1);
boolean v9 = v8.equals("int");
List v10 = HdmiCecConfig.getAllowedIntValues(p1);
StringBuilder v13 = new StringBuilder();
HdmiCecConfig.storeValue(v6, v23);

- API Name: getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.8848385810852051
  - Access Control Level: SYS_OR_SIG and the following code:
HdmiCecConfig$Setting v6 = HdmiCecConfig.getSetting(p1);
String v7 = v6.getValueType();
boolean v8 = v7.equals("string");
HdmiCecConfig$Value v17 = v6.getDefaultValue();
String v18 = v17.getStringValue();
String v19 = HdmiCecConfig.retrieveValue(v6, v18);
String v5 = v19;
return v5;

