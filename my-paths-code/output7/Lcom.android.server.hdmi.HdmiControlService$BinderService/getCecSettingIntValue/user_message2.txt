The method getCecSettingIntValue has the following code snippet:

This is path 1 for the API with depth 2:
public int getCecSettingIntValue(String p1){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue();
			String v13 = v12.getStringValue();
			if (v13 == 0) {
				String v11 = ;
				boolean v14 = v11.equals("int");
				if (v14 == 0) {
					StringBuilder v15 = new StringBuilder();
					StringBuilder v17 = v15.append("Getting CEC setting value '");
					StringBuilder v18 = v15.append(p1);
					StringBuilder v19 = v15.append("'.");
					String v20 = v15.toString();
					Object v21 = new Object(0);
					HdmiLogger v23 = HdmiLogger.getLogger();
					String v24 = HdmiLogger.toLogString(v20, v21);
					v23.debugInternal(v24);
					if (this.mDefaultValue == 0) {
						HdmiCecConfig$Value v26 = this.mDefaultValue;
						Integer v27 = this.mIntValue;
						int v28 = v27.intValue();
						String v29 = Integer.toString(v28);
						int v31 = HdmiCecConfig.getStorage(v8);
						String v32 = HdmiCecConfig.getStorageKey(v8);
						if (v31 != 0) {
							if (v31 != 1) {
								if (v31 != 2) {
									StringBuilder v33 = new StringBuilder();
									StringBuilder v35 = v33.append("Reading '");
									StringBuilder v36 = v33.append(v32);
									StringBuilder v37 = v33.append("' shared preference.");
									String v38 = v33.toString();
									Object v39 = new Object(0);
									HdmiLogger.debug(v38, v39);
									String v41 = this.mStorageAdapter.retrieveSharedPref(v32, v29);
									String v30 = v41;
									int v42 = Integer.parseInt(v30);
									int v7 = v42;
									Binder.restoreCallingIdentity(v5);
									return v7;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int getCecSettingIntValue(String p1){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue();
			String v13 = v12.getStringValue();
			if (v13 == 0) {
				String v11 = ;
				boolean v14 = v11.equals("int");
				if (v14 == 0) {
					StringBuilder v15 = new StringBuilder();
					StringBuilder v17 = v15.append("Getting CEC setting value '");
					StringBuilder v18 = v15.append(p1);
					StringBuilder v19 = v15.append("'.");
					String v20 = v15.toString();
					Object v21 = new Object(0);
					HdmiLogger v23 = HdmiLogger.getLogger();
					String v24 = HdmiLogger.toLogString(v20, v21);
					v23.debugInternal(v24);
					if (this.mDefaultValue == 0) {
						HdmiCecConfig$Value v26 = this.mDefaultValue;
						Integer v27 = this.mIntValue;
						int v28 = v27.intValue();
						String v29 = Integer.toString(v28);
						int v31 = HdmiCecConfig.getStorage(v8);
						String v32 = HdmiCecConfig.getStorageKey(v8);
						if (v31 != 0) {
							if (v31 != 1) {
								StringBuilder v33 = new StringBuilder();
								StringBuilder v35 = v33.append("Reading '");
								StringBuilder v36 = v33.append(v32);
								StringBuilder v37 = v33.append("' global setting.");
								String v38 = v33.toString();
								Object v39 = new Object(0);
								HdmiLogger.debug(v38, v39);
								String v41 = this.mStorageAdapter.retrieveGlobalSetting(v32, v29);
								String v30 = v41;
								int v42 = Integer.parseInt(v30);
								int v7 = v42;
								Binder.restoreCallingIdentity(v5);
								return v7;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int getCecSettingIntValue(String p1){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue();
			String v13 = v12.getStringValue();
			if (v13 == 0) {
				String v11 = ;
				boolean v14 = v11.equals("int");
				if (v14 == 0) {
					StringBuilder v15 = new StringBuilder();
					StringBuilder v17 = v15.append("Getting CEC setting value '");
					StringBuilder v18 = v15.append(p1);
					StringBuilder v19 = v15.append("'.");
					String v20 = v15.toString();
					Object v21 = new Object(0);
					HdmiLogger v23 = HdmiLogger.getLogger();
					String v24 = HdmiLogger.toLogString(v20, v21);
					v23.debugInternal(v24);
					if (this.mDefaultValue == 0) {
						HdmiCecConfig$Value v26 = this.mDefaultValue;
						Integer v27 = this.mIntValue;
						int v28 = v27.intValue();
						String v29 = Integer.toString(v28);
						int v31 = HdmiCecConfig.getStorage(v8);
						String v32 = HdmiCecConfig.getStorageKey(v8);
						if (v31 != 0) {
							StringBuilder v33 = new StringBuilder();
							StringBuilder v35 = v33.append("Reading '");
							StringBuilder v36 = v33.append(v32);
							StringBuilder v37 = v33.append("' sysprop.");
							String v38 = v33.toString();
							Object v39 = new Object(0);
							HdmiLogger.debug(v38, v39);
							String v41 = this.mStorageAdapter.retrieveSystemProperty(v32, v29);
							String v30 = v41;
							int v42 = Integer.parseInt(v30);
							int v7 = v42;
							Binder.restoreCallingIdentity(v5);
							return v7;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['HdmiCecConfig$Setting v8 = ;\nif (v8 == 0) {\nHdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue();\nString v13 = v12.getStringValue();\nint v31 = HdmiCecConfig.getStorage(v8);\nString v32 = HdmiCecConfig.getStorageKey(v8);\nif (v31 != 0) {\nString v41 = this.mStorageAdapter.retrieveSharedPref(v32, v29);\nint v42 = Integer.parseInt(v30);\nint v7 = v42;\nreturn v7;', 'HdmiCecConfig$Setting v6 = HdmiCecConfig.getSetting(p1);\nString v7 = v6.getValueType();\nHdmiCecConfig$Value v17 = v6.getDefaultValue();\nInteger v18 = v17.getIntValue();\nint v19 = v18.intValue();\nString v21 = HdmiCecConfig.retrieveValue(v6, v20);\nint v22 = Integer.parseInt(v21);\nint v5 = v22;\nreturn v5;', 'HdmiCecConfig v3 = this.this$0.getHdmiCecConfig();\nint v4 = v3.getIntValue(p1);\nreturn v4;']

The method getCecSettingIntValue has the following similar APIs:

- API Name: getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.9767990112304688
  - Access Control Level: SYS_OR_SIG and the following code:
HdmiCecConfig$Setting v6 = HdmiCecConfig.getSetting(p1);
String v7 = v6.getValueType();
boolean v8 = v7.equals("string");
HdmiCecConfig$Value v17 = v6.getDefaultValue();
String v18 = v17.getStringValue();
String v19 = HdmiCecConfig.retrieveValue(v6, v18);
String v5 = v19;
return v5;

- API Name: getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.9682747721672058
  - Access Control Level: SYS_OR_SIG and the following code:
HdmiCecConfig v3 = this.this$0.getHdmiCecConfig();
String v4 = v3.getStringValue(p1);
return v4;

