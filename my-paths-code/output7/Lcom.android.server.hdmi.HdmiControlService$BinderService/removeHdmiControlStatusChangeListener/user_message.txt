This is path 1 for the API with depth 2:
public void removeHdmiControlStatusChangeListener(IHdmiControlStatusChangeListener p1){
	HdmiControlService.setWorkSourceUidToCallingUid();
	Iterator v7 = this.mHdmiControlStatusChangeListenerRecords.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		IHdmiControlStatusChangeListener v10 = HdmiControlService$HdmiControlStatusChangeListenerRecord.-$$Nest$fgetmListener(v9);
		IBinder v11 = v10.asBinder();
		IBinder v12 = p2.asBinder();
		if (v11 != v12) {
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				Object v14 = v7.next();
				IHdmiControlStatusChangeListener v15 = HdmiControlService$HdmiControlStatusChangeListenerRecord.-$$Nest$fgetmListener(v14);
				IBinder v16 = v15.asBinder();
				IBinder v17 = p2.asBinder();
				if (v16 != v17) {
					IBinder v18 = p2.asBinder();
					boolean v19 = v18.unlinkToDeath(v14, 0);
					boolean v20 = this.mHdmiControlStatusChangeListenerRecords.remove(v14);
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeHdmiControlStatusChangeListener(IHdmiControlStatusChangeListener p1){
	this.this$0.initBinderCall();
	this.this$0.removeHdmiControlStatusChangeListener(p1);
	return;
}


This is path 3 for the API with depth 0:
public void removeHdmiControlStatusChangeListener(IHdmiControlStatusChangeListener p1){
	HdmiControlService.-$$Nest$minitBinderCall(this.this$0);
	HdmiControlService.-$$Nest$mremoveHdmiControlStatusChangeListener(this.this$0, p1);
	return;
}
