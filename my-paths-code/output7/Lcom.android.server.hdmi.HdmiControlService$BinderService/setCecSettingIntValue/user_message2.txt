The method setCecSettingIntValue has the following code snippet:

This is path 1 for the API with depth 2:
public void setCecSettingIntValue(String p1, int p2){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			boolean v11 = this.mUserConfigurable;
			if (v11 == 0) {
				HdmiCecConfig$Value v13 = HdmiCecConfig$Setting.getDefaultValue();
				String v14 = v13.getStringValue();
				if (v14 == 0) {
					String v12 = ;
					boolean v15 = v12.equals("int");
					if (v15 == 0) {
						HdmiCecConfig$Setting v17 = HdmiCecConfig.getSetting(p1);
						if (v17 == 0) {
							String v18 = v17.getValueType();
							boolean v19 = v18.equals("int");
							if (v19 == 0) {
								ArrayList v20 = new ArrayList();
								List v22 = v17.getAllowedValues();
								Iterator v23 = v22.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									Integer v26 = v25.getIntValue();
									boolean v27 = v20.add(v26);
									boolean v28 = v23.hasNext();
									if (v28 == 0) {
										List v16 = v20;
										Integer v29 = Integer.valueOf(p2);
										boolean v30 = v16.contains(v29);
										if (v30 == 0) {
											StringBuilder v31 = new StringBuilder();
											StringBuilder v33 = v31.append("Updating CEC setting '");
											StringBuilder v34 = v31.append(p1);
											StringBuilder v35 = v31.append("' to '");
											StringBuilder v36 = v31.append(p2);
											StringBuilder v37 = v31.append("'.");
											String v38 = v31.toString();
											Object v39 = new Object(0);
											HdmiLogger v41 = HdmiLogger.getLogger();
											String v42 = HdmiLogger.toLogString(v38, v39);
											v41.debugInternal(v42);
											String v44 = Integer.toString(p2);
											int v46 = HdmiCecConfig.getStorage(v8);
											String v47 = HdmiCecConfig.getStorageKey(v8);
											if (v46 != 0) {
												StringBuilder v48 = new StringBuilder();
												StringBuilder v50 = v48.append("Setting '");
												StringBuilder v51 = v48.append(v47);
												StringBuilder v52 = v48.append("' sysprop.");
												String v53 = v48.toString();
												Object v54 = new Object(0);
												HdmiLogger.debug(v53, v54);
												this.mStorageAdapter.storeSystemProperty(v47, v44);
												Binder.restoreCallingIdentity(v5);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setCecSettingIntValue(String p1, int p2){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			boolean v11 = this.mUserConfigurable;
			if (v11 == 0) {
				HdmiCecConfig$Value v13 = HdmiCecConfig$Setting.getDefaultValue();
				String v14 = v13.getStringValue();
				if (v14 == 0) {
					String v12 = ;
					boolean v15 = v12.equals("int");
					if (v15 == 0) {
						HdmiCecConfig$Setting v17 = HdmiCecConfig.getSetting(p1);
						if (v17 == 0) {
							String v18 = v17.getValueType();
							boolean v19 = v18.equals("int");
							if (v19 == 0) {
								ArrayList v20 = new ArrayList();
								List v22 = v17.getAllowedValues();
								Iterator v23 = v22.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									Integer v26 = v25.getIntValue();
									boolean v27 = v20.add(v26);
									boolean v28 = v23.hasNext();
									if (v28 == 0) {
										List v16 = v20;
										Integer v29 = Integer.valueOf(p2);
										boolean v30 = v16.contains(v29);
										if (v30 == 0) {
											StringBuilder v31 = new StringBuilder();
											StringBuilder v33 = v31.append("Updating CEC setting '");
											StringBuilder v34 = v31.append(p1);
											StringBuilder v35 = v31.append("' to '");
											StringBuilder v36 = v31.append(p2);
											StringBuilder v37 = v31.append("'.");
											String v38 = v31.toString();
											Object v39 = new Object(0);
											HdmiLogger v41 = HdmiLogger.getLogger();
											String v42 = HdmiLogger.toLogString(v38, v39);
											v41.debugInternal(v42);
											String v44 = Integer.toString(p2);
											int v46 = HdmiCecConfig.getStorage(v8);
											String v47 = HdmiCecConfig.getStorageKey(v8);
											if (v46 != 0) {
												if (v46 != 1) {
													StringBuilder v48 = new StringBuilder();
													StringBuilder v50 = v48.append("Setting '");
													StringBuilder v51 = v48.append(v47);
													StringBuilder v52 = v48.append("' global setting.");
													String v53 = v48.toString();
													Object v54 = new Object(0);
													HdmiLogger.debug(v53, v54);
													this.mStorageAdapter.storeGlobalSetting(v47, v44);
													Binder.restoreCallingIdentity(v5);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setCecSettingIntValue(String p1, int p2){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			boolean v11 = this.mUserConfigurable;
			if (v11 == 0) {
				HdmiCecConfig$Value v13 = HdmiCecConfig$Setting.getDefaultValue();
				String v14 = v13.getStringValue();
				if (v14 == 0) {
					String v12 = ;
					boolean v15 = v12.equals("int");
					if (v15 == 0) {
						HdmiCecConfig$Setting v17 = HdmiCecConfig.getSetting(p1);
						if (v17 == 0) {
							String v18 = v17.getValueType();
							boolean v19 = v18.equals("int");
							if (v19 == 0) {
								ArrayList v20 = new ArrayList();
								List v22 = v17.getAllowedValues();
								Iterator v23 = v22.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									Integer v26 = v25.getIntValue();
									boolean v27 = v20.add(v26);
									boolean v28 = v23.hasNext();
									if (v28 == 0) {
										List v16 = v20;
										Integer v29 = Integer.valueOf(p2);
										boolean v30 = v16.contains(v29);
										if (v30 == 0) {
											StringBuilder v31 = new StringBuilder();
											StringBuilder v33 = v31.append("Updating CEC setting '");
											StringBuilder v34 = v31.append(p1);
											StringBuilder v35 = v31.append("' to '");
											StringBuilder v36 = v31.append(p2);
											StringBuilder v37 = v31.append("'.");
											String v38 = v31.toString();
											Object v39 = new Object(0);
											HdmiLogger v41 = HdmiLogger.getLogger();
											String v42 = HdmiLogger.toLogString(v38, v39);
											v41.debugInternal(v42);
											String v44 = Integer.toString(p2);
											int v46 = HdmiCecConfig.getStorage(v8);
											String v47 = HdmiCecConfig.getStorageKey(v8);
											if (v46 != 0) {
												if (v46 != 1) {
													if (v46 != 2) {
														StringBuilder v48 = new StringBuilder();
														StringBuilder v50 = v48.append("Setting '");
														StringBuilder v51 = v48.append(v47);
														StringBuilder v52 = v48.append("' shared pref.");
														String v53 = v48.toString();
														Object v54 = new Object(0);
														HdmiLogger.debug(v53, v54);
														this.mStorageAdapter.storeSharedPref(v47, v44);
														HdmiCecConfig.notifySettingChanged(v8);
														Binder.restoreCallingIdentity(v5);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['HdmiCecConfig$Setting v8 = ;\nString v14 = v13.getStringValue();\nInteger v26 = v25.getIntValue();\nboolean v27 = v20.add(v26);\nStringBuilder v31 = new StringBuilder();\nthis.mStorageAdapter.storeSystemProperty(v47, v44);', 'HdmiCecConfig$Setting v6 = HdmiCecConfig.getSetting(p1);\nboolean v9 = v8.equals("int");\nList v10 = HdmiCecConfig.getAllowedIntValues(p1);\nStringBuilder v13 = new StringBuilder();\nHdmiCecConfig.storeValue(v6, v23);', 'v3.setIntValue(p1, p2);']

The method setCecSettingIntValue has the following similar APIs:

- API Name: setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9213095903396606
  - Access Control Level: SYS_OR_SIG and the following code:
HdmiCecConfig v6 = HdmiCecConfig.getSetting(p1);
if (v7 == 0) {
String v8 = v6.getValueType();
boolean v9 = v8.equals("string");
if (v9 == 0) {
List v10 = HdmiCecConfig.getAllowedStringValues(p1);
boolean v11 = v10.contains(p2);
if (v11 == 0) {
HdmiCecConfig.storeValue(v6, p2);

- API Name: getAllowedCecSettingStringValues(Ljava/lang/String;)Ljava/util/List; with Similarity Score: 0.9047023057937622
  - Access Control Level: SYS_OR_SIG and the following code:
HdmiCecConfig$Setting v6 = HdmiCecConfig.getSetting(p1);
String v7 = v6.getValueType();
ArrayList v9 = new ArrayList();
List v11 = v6.getAllowedValues();
Iterator v12 = v11.iterator();
Object v14 = v12.next();
String v15 = v14.getStringValue();
boolean v16 = v9.add(v15);
List v5 = v9;
return v5;

