The method getApexInfo has the following code snippet:

This is path 1 for the API with depth 2:
public Map getApexInfo(){
	HashMap v1 = new HashMap();
	int v5 = this.mBinaryHashes.size();
	if (v5 != 0) {
		BinaryTransparencyService.doFreshBinaryMeasurements();
		boolean v4 = 1;
		boolean v3 = v4;
		if (v3 != 0) {
			Context v8 = BinaryTransparencyService.-$$Nest$fgetmContext(this.this$0);
			PackageManager v9 = v8.getPackageManager();
			if (v9 != 0) {
				ArrayList v12 = new ArrayList();
				PackageManager v14 = this.mContext.getPackageManager();
				if (v14 != 0) {
					PackageManager$PackageInfoFlags v15 = PackageManager$PackageInfoFlags.of(1073741824);
					List v16 = v14.getInstalledPackages(v15);
					if (v16 != 0) {
						Stream v17 = v16.stream();
						BinaryTransparencyService$$ExternalSyntheticLambda0 v18 = new BinaryTransparencyService$$ExternalSyntheticLambda0();
						Stream v20 = v17.filter(v18);
						Collector v21 = Collectors.toList();
						Object v22 = v20.collect(v21);
						List v11 = v22;
						List v10 = v11;
						Iterator v23 = v10.iterator();
						boolean v24 = v23.hasNext();
						if (v24 == 0) {
							Object v25 = v23.next();
							HashMap v26 = BinaryTransparencyService.-$$Nest$fgetmBinaryHashes(this.this$0);
							Object v27 = v26.get(PackageInfo.packageName);
							Object v28 = v1.put(v25, v27);
							boolean v29 = v23.hasNext();
							if (v29 == 0) {
								return v1;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Map getApexInfo(){
	HashMap v1 = new HashMap();
	int v5 = this.mBinaryHashes.size();
	if (v5 != 0) {
		PackageManager v6 = this.mContext.getPackageManager();
		if (v6 != 0) {
			byte[] v7 = PackageUtils.createLargeFileBuffer();
			Set v8 = this.mBinaryLastUpdateTimes.entrySet();
			Iterator v9 = v8.iterator();
			boolean v10 = v9.hasNext();
			if (v10 == 0) {
				Object v11 = v9.next();
				Object v12 = v11.getKey();
				PackageManager$PackageInfoFlags v13 = PackageManager$PackageInfoFlags.of(1073741824);
				PackageInfo v14 = v6.getPackageInfo(v12, v13);
				Object v15 = v11.getValue();
				long v16 = v15.longValue();
				if ((PackageInfo.lastUpdateTime < v16) <= 0) {
					Long v23 = Long.valueOf(PackageInfo.lastUpdateTime);
					Object v24 = v11.setValue(v23);
					String v25 = PackageUtils.computeSha256DigestForLargeFile(ApplicationInfo.sourceDir, v7);
					if (v25 != 0) {
						Object v26 = this.mBinaryHashes.put(v12, v25);
						if (PackageInfo.isApex == 0) {
							boolean v27 = v9.hasNext();
							if (v27 == 0) {
								boolean v4 = 1;
								boolean v3 = v4;
								if (v3 != 0) {
									Context v28 = BinaryTransparencyService.-$$Nest$fgetmContext(this.this$0);
									PackageManager v29 = v28.getPackageManager();
									if (v29 != 0) {
										ArrayList v32 = new ArrayList();
										PackageManager v34 = this.mContext.getPackageManager();
										if (v34 != 0) {
											PackageManager$PackageInfoFlags v35 = PackageManager$PackageInfoFlags.of(1073741824);
											List v36 = v34.getInstalledPackages(v35);
											if (v36 != 0) {
												Stream v37 = v36.stream();
												BinaryTransparencyService$$ExternalSyntheticLambda0 v38 = new BinaryTransparencyService$$ExternalSyntheticLambda0();
												Stream v40 = v37.filter(v38);
												Collector v41 = Collectors.toList();
												Object v42 = v40.collect(v41);
												List v31 = v42;
												List v30 = v31;
												Iterator v43 = v30.iterator();
												boolean v44 = v43.hasNext();
												if (v44 == 0) {
													Object v45 = v43.next();
													HashMap v46 = BinaryTransparencyService.-$$Nest$fgetmBinaryHashes(this.this$0);
													Object v47 = v46.get(PackageInfo.packageName);
													Object v48 = v1.put(v45, v47);
													boolean v49 = v43.hasNext();
													if (v49 == 0) {
														return v1;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['HashMap v1 = new HashMap();\nObject v27 = v26.get(PackageInfo.packageName);\nObject v28 = v1.put(v25, v27);\nreturn v1;', 'HashMap v1 = new HashMap();\nObject v13 = v12.get(PackageInfo.packageName);\nObject v14 = v1.put(v11, v13);\nreturn v1;', 'HashMap v1 = new HashMap();\nObject v11 = v10.get(PackageInfo.packageName);\nObject v12 = v1.put(v9, v11);\nreturn v1;']

The method getApexInfo has the following similar APIs:

- API Name: getModuleMetadataPackageName()Ljava/lang/String; with Similarity Score: 0.7307078242301941
  - Access Control Level: NONE and the following code:
String v2 = this.mPackageName;
return v1;

- API Name: getModuleMetadataPackageName()Ljava/lang/String; with Similarity Score: 0.7281106114387512
  - Access Control Level: NONE and the following code:
String v2 = this.mPackageName;
return v1;

