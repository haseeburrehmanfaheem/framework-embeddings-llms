The method prepare has the following code snippet:

This is path 1 for the API with depth 2:
public void prepare(){
	if (this.mDexoptCommands != 0) {
		OtaDexoptService$$ExternalSyntheticLambda0 v1 = new OtaDexoptService$$ExternalSyntheticLambda0();
		boolean v4 = Thread.holdsLock(this.mLock);
		if (v4 == 0) {
			Object v5 = this.sSnapshot.get();
			int v6 = this.sSnapshotPendingVersion.get();
			if (v5 == 0) {
				int v7 = v5.getVersion();
				if (v7 != v6) {
					Object v8 = this.sSnapshot.get();
					int v9 = this.sSnapshotPendingVersion.get();
					if (v8 == 0) {
						int v10 = v8.getVersion();
						if (v10 != v9) {
							int v11 = this.sSnapshotPendingVersion.get();
							long v13 = SystemClock.currentTimeMicro();
							if (v8 != 0) {
								PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
								ComputerEngine v16 = new ComputerEngine(v14,v11);
								long v18 = SystemClock.currentTimeMicro();
								if (this.mSnapshotStatistics == 0) {
									this.mSnapshotStatistics.rebuild(v13, v18, );
									Computer v12 = v16;
									this.sSnapshot.set(v12);
									Computer v21 = v12.use();
									Computer v3 = v21;
									ArrayMap v22 = v3.getPackageStates();
									Collection v23 = v22.values();
									LinkedList v25 = new LinkedList();
									ArrayList v27 = new ArrayList(v23);
									boolean v29 = v27.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
									ArrayList v30 = new ArrayList(v31);
									int v31 = v27.size();
									boolean v34 = Thread.holdsLock(this.mLock);
									if (v34 == 0) {
										Object v35 = this.sSnapshot.get();
										int v36 = this.sSnapshotPendingVersion.get();
										if (v35 == 0) {
											int v37 = v35.getVersion();
											if (v37 != v36) {
												Object v38 = this.sSnapshot.get();
												int v39 = this.sSnapshotPendingVersion.get();
												if (v38 == 0) {
													int v40 = v38.getVersion();
													if (v40 != v39) {
														int v41 = this.sSnapshotPendingVersion.get();
														Computer v42 = PackageManagerService.rebuildSnapshot(v38, v41);
														this.sSnapshot.set(v42);
														Computer v44 = v42.use();
														Computer v33 = v44;
														DexOptHelper$$ExternalSyntheticLambda0 v45 = new DexOptHelper$$ExternalSyntheticLambda0();
														Iterator v48 = v27.iterator();
														boolean v49 = v48.hasNext();
														if (v49 == 0) {
															Object v50 = v48.next();
															boolean v51 = v45.test(v50);
															if (v51 == 0) {
																boolean v52 = v30.add(v50);
																boolean v53 = v48.hasNext();
																if (v53 == 0) {
																	DexOptHelper.sortPackagesByUsageDate(v30, p2);
																	boolean v55 = v27.removeAll(v30);
																	Iterator v56 = v30.iterator();
																	boolean v57 = v56.hasNext();
																	if (v57 == 0) {
																		Object v58 = v56.next();
																		boolean v59 = v25.add(v58);
																		List v60 = v33.findSharedNonSystemLibraries(v58);
																		boolean v61 = v60.isEmpty();
																		if (v61 != 0) {
																			boolean v62 = v60.removeAll(v25);
																			boolean v63 = v25.addAll(v60);
																			boolean v64 = v27.removeAll(v60);
																			boolean v65 = v56.hasNext();
																			if (v65 == 0) {
																				v30.clear();
																				Intent v67 = new Intent("android.intent.action.PRE_BOOT_COMPLETED");
																				IPackageManager v70 = AppGlobals.getPackageManager();
																				ParceledListSlice v71 = v70.queryIntentReceivers(v67, 0, 0, 0);
																				List v72 = v71.getList();
																				ArraySet v73 = new ArraySet();
																				if ( == 0) {
																					Iterator v75 = .iterator();
																					boolean v76 = v75.hasNext();
																					if (v76 == 0) {
																						Object v77 = v75.next();
																						boolean v78 = v73.add(ActivityInfo.packageName);
																						boolean v79 = v75.hasNext();
																						if (v79 == 0) {
																							ArraySet v69 = v73;
																							DexOptHelper$$ExternalSyntheticLambda1 v80 = new DexOptHelper$$ExternalSyntheticLambda1(v69);
																							Iterator v83 = v27.iterator();
																							boolean v84 = v83.hasNext();
																							if (v84 == 0) {
																								Object v85 = v83.next();
																								boolean v86 = v80.test(v85);
																								if (v86 == 0) {
																									boolean v87 = v30.add(v85);
																									boolean v88 = v83.hasNext();
																									if (v88 == 0) {
																										DexOptHelper.sortPackagesByUsageDate(v30, p2);
																										boolean v90 = v27.removeAll(v30);
																										Iterator v91 = v30.iterator();
																										boolean v92 = v91.hasNext();
																										if (v92 == 0) {
																											Object v93 = v91.next();
																											boolean v94 = v25.add(v93);
																											List v95 = v33.findSharedNonSystemLibraries(v93);
																											boolean v96 = v95.isEmpty();
																											if (v96 != 0) {
																												boolean v97 = v95.removeAll(v25);
																												boolean v98 = v25.addAll(v95);
																												boolean v99 = v27.removeAll(v95);
																												boolean v100 = v91.hasNext();
																												if (v100 == 0) {
																													v30.clear();
																													DexManager v102 = this.mDexManager;
																													DexOptHelper$$ExternalSyntheticLambda2 v103 = new DexOptHelper$$ExternalSyntheticLambda2(v102);
																													Iterator v106 = v27.iterator();
																													boolean v107 = v106.hasNext();
																													if (v107 == 0) {
																														Object v108 = v106.next();
																														boolean v109 = v103.test(v108);
																														if (v109 == 0) {
																															boolean v110 = v30.add(v108);
																															boolean v111 = v106.hasNext();
																															if (v111 == 0) {
																																DexOptHelper.sortPackagesByUsageDate(v30, p2);
																																boolean v113 = v27.removeAll(v30);
																																Iterator v114 = v30.iterator();
																																boolean v115 = v114.hasNext();
																																if (v115 == 0) {
																																	Object v116 = v114.next();
																																	boolean v117 = v25.add(v116);
																																	List v118 = v33.findSharedNonSystemLibraries(v116);
																																	boolean v119 = v118.isEmpty();
																																	if (v119 != 0) {
																																		boolean v120 = v118.removeAll(v25);
																																		boolean v121 = v25.addAll(v118);
																																		boolean v122 = v27.removeAll(v118);
																																		boolean v123 = v114.hasNext();
																																		if (v123 == 0) {
																																			v30.clear();
																																			boolean v125 = v27.isEmpty();
																																			if (v125 != 0) {
																																				boolean v127 = this.mPackageUsage.isHistoricalPackageUsageAvailable();
																																				boolean v126 = v127;
																																				if (v126 == 0) {
																																					DexOptHelper$$ExternalSyntheticLambda6 v128 = new DexOptHelper$$ExternalSyntheticLambda6();
																																					Iterator v131 = v27.iterator();
																																					boolean v132 = v131.hasNext();
																																					if (v132 == 0) {
																																						Object v133 = v131.next();
																																						boolean v134 = .test(v133);
																																						if (v134 == 0) {
																																							boolean v135 = v30.add(v133);
																																							boolean v136 = v131.hasNext();
																																							if (v136 == 0) {
																																								DexOptHelper.sortPackagesByUsageDate(v30, p2);
																																								boolean v138 = v27.removeAll(v30);
																																								Iterator v139 = v30.iterator();
																																								boolean v140 = v139.hasNext();
																																								if (v140 == 0) {
																																									Object v141 = v139.next();
																																									boolean v142 = v25.add(v141);
																																									List v143 = v33.findSharedNonSystemLibraries(v141);
																																									boolean v144 = v143.isEmpty();
																																									if (v144 != 0) {
																																										boolean v145 = v143.removeAll(v25);
																																										boolean v146 = v25.addAll(v143);
																																										boolean v147 = v27.removeAll(v143);
																																										boolean v148 = v139.hasNext();
																																										if (v148 == 0) {
																																											v30.clear();
																																											if (1 == 0) {
																																												StringBuilder v154 = new StringBuilder();
																																												int v156 = v25.size();
																																												if ( >= v156) {
																																													int v157 = v154.length();
																																													if (v157 <= 0) {
																																														StringBuilder v158 = v154.append(", ");
																																														Object v159 = v25.get();
																																														String v160 = v159.getPackageName();
																																														StringBuilder v161 = v154.append(v160);
																																														int v162 = v25.size();
																																														if ( >= v162) {
																																															String v163 = v154.toString();
																																															String v153 = v163;
																																															StringBuilder v171 = new StringBuilder();
																																															int v173 = v27.size();
																																															if ( >= v173) {
																																																int v174 = v171.length();
																																																if (v174 <= 0) {
																																																	StringBuilder v175 = v171.append(", ");
																																																	Object v176 = v27.get();
																																																	String v177 = v176.getPackageName();
																																																	StringBuilder v178 = v171.append(v177);
																																																	int v179 = v27.size();
																																																	if ( >= v179) {
																																																		String v180 = v171.toString();
																																																		String v170 = v180;
																																																		List v24 = v25;
																																																		boolean v184 = v24.removeIf(v1);
																																																		ArrayList v185 = new ArrayList(v23);
																																																		boolean v187 = v185.removeAll(v24);
																																																		boolean v188 = v185.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
																																																		boolean v189 = v185.removeIf(v1);
																																																		ArrayList v190 = new ArrayList(((v191 * 3) / 2));
																																																		int v191 = v23.size();
																																																		this.mDexoptCommands = v190;
																																																		Iterator v193 = v24.iterator();
																																																		boolean v194 = v193.hasNext();
																																																		if (v194 == 0) {
																																																			Iterator v195 = v185.iterator();
																																																			boolean v196 = v195.hasNext();
																																																			if (v196 == 0) {
																																																				int v197 = this.mDexoptCommands.size();
																																																				this.completeSize = v197;
																																																				File v200 = Environment.getDataDirectory();
																																																				StorageManager v201 = StorageManager.from(this.mContext);
																																																				long v202 = v201.getStorageLowBytes(v200);
																																																				if ((v202 < 0) == 0) {
																																																					long v199 = v202;
																																																					File v203 = Environment.getDataDirectory();
																																																					long v204 = v203.getUsableSpace();
																																																					long v198 = (v204 - v199);
																																																					if ((v198 < 1073741824) >= 0) {
																																																						File v207 = Environment.getDataDirectory();
																																																						StorageManager v208 = StorageManager.from(this.mContext);
																																																						long v209 = v208.getStorageLowBytes(v207);
																																																						if ((v209 < 0) == 0) {
																																																							long v206 = v209;
																																																							File v210 = Environment.getDataDirectory();
																																																							long v211 = v210.getUsableSpace();
																																																							long v205 = (v211 - v206);
																																																							int v212 = v24.size();
																																																							int v213 = v185.size();
																																																							p0.prepareMetricsLogging(v212, v213, v198, v205);
																																																							OtaDexoptService$$ExternalSyntheticLambda1 v215 = new OtaDexoptService$$ExternalSyntheticLambda1();
																																																							Comparator v217 = Comparator.comparingLong(v215);
																																																							Object v218 = Collections.max(v24, v217);
																																																							StringBuilder v219 = new StringBuilder();
																																																							StringBuilder v221 = v219.append("A/B OTA: lastUsed time = ");
																																																							return;
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void prepare(){
	if (this.mDexoptCommands != 0) {
		OtaDexoptService$$ExternalSyntheticLambda0 v1 = new OtaDexoptService$$ExternalSyntheticLambda0();
		boolean v4 = Thread.holdsLock(this.mLock);
		if (v4 == 0) {
			Object v5 = this.sSnapshot.get();
			int v6 = this.sSnapshotPendingVersion.get();
			if (v5 == 0) {
				int v7 = v5.getVersion();
				if (v7 != v6) {
					Object v8 = this.sSnapshot.get();
					int v9 = this.sSnapshotPendingVersion.get();
					if (v8 == 0) {
						int v10 = v8.getVersion();
						if (v10 != v9) {
							int v11 = this.sSnapshotPendingVersion.get();
							long v13 = SystemClock.currentTimeMicro();
							if (v8 != 0) {
								int v14 = v8.getUsed();
								PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2);
								ComputerEngine v17 = new ComputerEngine(v15,v11);
								long v19 = SystemClock.currentTimeMicro();
								if (this.mSnapshotStatistics == 0) {
									this.mSnapshotStatistics.rebuild(v13, v19, );
									Computer v12 = v17;
									this.sSnapshot.set(v12);
									Computer v22 = v12.use();
									Computer v3 = v22;
									ArrayMap v23 = v3.getPackageStates();
									Collection v24 = v23.values();
									LinkedList v26 = new LinkedList();
									ArrayList v28 = new ArrayList(v24);
									boolean v30 = v28.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
									ArrayList v31 = new ArrayList(v32);
									int v32 = v28.size();
									boolean v35 = Thread.holdsLock(this.mLock);
									if (v35 == 0) {
										Object v36 = this.sSnapshot.get();
										int v37 = this.sSnapshotPendingVersion.get();
										if (v36 == 0) {
											int v38 = v36.getVersion();
											if (v38 != v37) {
												Object v39 = this.sSnapshot.get();
												int v40 = this.sSnapshotPendingVersion.get();
												if (v39 == 0) {
													int v41 = v39.getVersion();
													if (v41 != v40) {
														int v42 = this.sSnapshotPendingVersion.get();
														Computer v43 = PackageManagerService.rebuildSnapshot(v39, v42);
														this.sSnapshot.set(v43);
														Computer v45 = v43.use();
														Computer v34 = v45;
														DexOptHelper$$ExternalSyntheticLambda0 v46 = new DexOptHelper$$ExternalSyntheticLambda0();
														Iterator v49 = v28.iterator();
														boolean v50 = v49.hasNext();
														if (v50 == 0) {
															Object v51 = v49.next();
															boolean v52 = v46.test(v51);
															if (v52 == 0) {
																boolean v53 = v31.add(v51);
																boolean v54 = v49.hasNext();
																if (v54 == 0) {
																	DexOptHelper.sortPackagesByUsageDate(v31, p2);
																	boolean v56 = v28.removeAll(v31);
																	Iterator v57 = v31.iterator();
																	boolean v58 = v57.hasNext();
																	if (v58 == 0) {
																		Object v59 = v57.next();
																		boolean v60 = v26.add(v59);
																		List v61 = v34.findSharedNonSystemLibraries(v59);
																		boolean v62 = v61.isEmpty();
																		if (v62 != 0) {
																			boolean v63 = v61.removeAll(v26);
																			boolean v64 = v26.addAll(v61);
																			boolean v65 = v28.removeAll(v61);
																			boolean v66 = v57.hasNext();
																			if (v66 == 0) {
																				v31.clear();
																				Intent v68 = new Intent("android.intent.action.PRE_BOOT_COMPLETED");
																				IPackageManager v71 = AppGlobals.getPackageManager();
																				ParceledListSlice v72 = v71.queryIntentReceivers(v68, 0, 0, 0);
																				List v73 = v72.getList();
																				ArraySet v74 = new ArraySet();
																				if ( == 0) {
																					Iterator v76 = .iterator();
																					boolean v77 = v76.hasNext();
																					if (v77 == 0) {
																						Object v78 = v76.next();
																						boolean v79 = v74.add(ActivityInfo.packageName);
																						boolean v80 = v76.hasNext();
																						if (v80 == 0) {
																							ArraySet v70 = v74;
																							DexOptHelper$$ExternalSyntheticLambda1 v81 = new DexOptHelper$$ExternalSyntheticLambda1(v70);
																							Iterator v84 = v28.iterator();
																							boolean v85 = v84.hasNext();
																							if (v85 == 0) {
																								Object v86 = v84.next();
																								boolean v87 = v81.test(v86);
																								if (v87 == 0) {
																									boolean v88 = v31.add(v86);
																									boolean v89 = v84.hasNext();
																									if (v89 == 0) {
																										DexOptHelper.sortPackagesByUsageDate(v31, p2);
																										boolean v91 = v28.removeAll(v31);
																										Iterator v92 = v31.iterator();
																										boolean v93 = v92.hasNext();
																										if (v93 == 0) {
																											Object v94 = v92.next();
																											boolean v95 = v26.add(v94);
																											List v96 = v34.findSharedNonSystemLibraries(v94);
																											boolean v97 = v96.isEmpty();
																											if (v97 != 0) {
																												boolean v98 = v96.removeAll(v26);
																												boolean v99 = v26.addAll(v96);
																												boolean v100 = v28.removeAll(v96);
																												boolean v101 = v92.hasNext();
																												if (v101 == 0) {
																													v31.clear();
																													DexManager v103 = this.mDexManager;
																													DexOptHelper$$ExternalSyntheticLambda2 v104 = new DexOptHelper$$ExternalSyntheticLambda2(v103);
																													Iterator v107 = v28.iterator();
																													boolean v108 = v107.hasNext();
																													if (v108 == 0) {
																														Object v109 = v107.next();
																														boolean v110 = v104.test(v109);
																														if (v110 == 0) {
																															boolean v111 = v31.add(v109);
																															boolean v112 = v107.hasNext();
																															if (v112 == 0) {
																																DexOptHelper.sortPackagesByUsageDate(v31, p2);
																																boolean v114 = v28.removeAll(v31);
																																Iterator v115 = v31.iterator();
																																boolean v116 = v115.hasNext();
																																if (v116 == 0) {
																																	Object v117 = v115.next();
																																	boolean v118 = v26.add(v117);
																																	List v119 = v34.findSharedNonSystemLibraries(v117);
																																	boolean v120 = v119.isEmpty();
																																	if (v120 != 0) {
																																		boolean v121 = v119.removeAll(v26);
																																		boolean v122 = v26.addAll(v119);
																																		boolean v123 = v28.removeAll(v119);
																																		boolean v124 = v115.hasNext();
																																		if (v124 == 0) {
																																			v31.clear();
																																			boolean v126 = v28.isEmpty();
																																			if (v126 != 0) {
																																				boolean v128 = this.mPackageUsage.isHistoricalPackageUsageAvailable();
																																				boolean v127 = v128;
																																				if (v127 == 0) {
																																					DexOptHelper$$ExternalSyntheticLambda6 v129 = new DexOptHelper$$ExternalSyntheticLambda6();
																																					Iterator v132 = v28.iterator();
																																					boolean v133 = v132.hasNext();
																																					if (v133 == 0) {
																																						Object v134 = v132.next();
																																						boolean v135 = .test(v134);
																																						if (v135 == 0) {
																																							boolean v136 = v31.add(v134);
																																							boolean v137 = v132.hasNext();
																																							if (v137 == 0) {
																																								DexOptHelper.sortPackagesByUsageDate(v31, p2);
																																								boolean v139 = v28.removeAll(v31);
																																								Iterator v140 = v31.iterator();
																																								boolean v141 = v140.hasNext();
																																								if (v141 == 0) {
																																									Object v142 = v140.next();
																																									boolean v143 = v26.add(v142);
																																									List v144 = v34.findSharedNonSystemLibraries(v142);
																																									boolean v145 = v144.isEmpty();
																																									if (v145 != 0) {
																																										boolean v146 = v144.removeAll(v26);
																																										boolean v147 = v26.addAll(v144);
																																										boolean v148 = v28.removeAll(v144);
																																										boolean v149 = v140.hasNext();
																																										if (v149 == 0) {
																																											v31.clear();
																																											if (1 == 0) {
																																												StringBuilder v155 = new StringBuilder();
																																												int v157 = v26.size();
																																												if ( >= v157) {
																																													int v158 = v155.length();
																																													if (v158 <= 0) {
																																														StringBuilder v159 = v155.append(", ");
																																														Object v160 = v26.get();
																																														String v161 = v160.getPackageName();
																																														StringBuilder v162 = v155.append(v161);
																																														int v163 = v26.size();
																																														if ( >= v163) {
																																															String v164 = v155.toString();
																																															String v154 = v164;
																																															StringBuilder v172 = new StringBuilder();
																																															int v174 = v28.size();
																																															if ( >= v174) {
																																																int v175 = v172.length();
																																																if (v175 <= 0) {
																																																	StringBuilder v176 = v172.append(", ");
																																																	Object v177 = v28.get();
																																																	String v178 = v177.getPackageName();
																																																	StringBuilder v179 = v172.append(v178);
																																																	int v180 = v28.size();
																																																	if ( >= v180) {
																																																		String v181 = v172.toString();
																																																		String v171 = v181;
																																																		List v25 = v26;
																																																		boolean v185 = v25.removeIf(v1);
																																																		ArrayList v186 = new ArrayList(v24);
																																																		boolean v188 = v186.removeAll(v25);
																																																		boolean v189 = v186.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
																																																		boolean v190 = v186.removeIf(v1);
																																																		ArrayList v191 = new ArrayList(((v192 * 3) / 2));
																																																		int v192 = v24.size();
																																																		this.mDexoptCommands = v191;
																																																		Iterator v194 = v25.iterator();
																																																		boolean v195 = v194.hasNext();
																																																		if (v195 == 0) {
																																																			Iterator v196 = v186.iterator();
																																																			boolean v197 = v196.hasNext();
																																																			if (v197 == 0) {
																																																				int v198 = this.mDexoptCommands.size();
																																																				this.completeSize = v198;
																																																				File v201 = Environment.getDataDirectory();
																																																				StorageManager v202 = StorageManager.from(this.mContext);
																																																				long v203 = v202.getStorageLowBytes(v201);
																																																				if ((v203 < 0) == 0) {
																																																					long v200 = v203;
																																																					File v204 = Environment.getDataDirectory();
																																																					long v205 = v204.getUsableSpace();
																																																					long v199 = (v205 - v200);
																																																					if ((v199 < 1073741824) >= 0) {
																																																						File v208 = Environment.getDataDirectory();
																																																						StorageManager v209 = StorageManager.from(this.mContext);
																																																						long v210 = v209.getStorageLowBytes(v208);
																																																						if ((v210 < 0) == 0) {
																																																							long v207 = v210;
																																																							File v211 = Environment.getDataDirectory();
																																																							long v212 = v211.getUsableSpace();
																																																							long v206 = (v212 - v207);
																																																							int v213 = v25.size();
																																																							int v214 = v186.size();
																																																							p0.prepareMetricsLogging(v213, v214, v199, v206);
																																																							OtaDexoptService$$ExternalSyntheticLambda1 v216 = new OtaDexoptService$$ExternalSyntheticLambda1();
																																																							Comparator v218 = Comparator.comparingLong(v216);
																																																							Object v219 = Collections.max(v25, v218);
																																																							StringBuilder v220 = new StringBuilder();
																																																							StringBuilder v222 = v220.append("A/B OTA: lastUsed time = ");
																																																							return;
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void prepare(){
	if (this.mDexoptCommands != 0) {
		OtaDexoptService$$ExternalSyntheticLambda0 v1 = new OtaDexoptService$$ExternalSyntheticLambda0();
		boolean v4 = Thread.holdsLock(this.mLock);
		if (v4 == 0) {
			Object v5 = this.sSnapshot.get();
			int v6 = this.sSnapshotPendingVersion.get();
			if (v5 == 0) {
				int v7 = v5.getVersion();
				if (v7 != v6) {
					Object v8 = this.sSnapshot.get();
					int v9 = this.sSnapshotPendingVersion.get();
					if (v8 == 0) {
						int v10 = v8.getVersion();
						if (v10 != v9) {
							int v11 = this.sSnapshotPendingVersion.get();
							long v13 = SystemClock.currentTimeMicro();
							if (v8 != 0) {
								PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
								ComputerEngine v16 = new ComputerEngine(v14,v11);
								long v18 = SystemClock.currentTimeMicro();
								if (this.mSnapshotStatistics == 0) {
									this.mSnapshotStatistics.rebuild(v13, v18, );
									Computer v12 = v16;
									this.sSnapshot.set(v12);
									Computer v21 = v12.use();
									Computer v3 = v21;
									ArrayMap v22 = v3.getPackageStates();
									Collection v23 = v22.values();
									LinkedList v25 = new LinkedList();
									ArrayList v27 = new ArrayList(v23);
									boolean v29 = v27.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
									ArrayList v30 = new ArrayList(v31);
									int v31 = v27.size();
									boolean v34 = Thread.holdsLock(this.mLock);
									if (v34 == 0) {
										Object v35 = this.sSnapshot.get();
										int v36 = this.sSnapshotPendingVersion.get();
										if (v35 == 0) {
											int v37 = v35.getVersion();
											if (v37 != v36) {
												Object v38 = this.sSnapshot.get();
												int v39 = this.sSnapshotPendingVersion.get();
												if (v38 == 0) {
													int v40 = v38.getVersion();
													if (v40 != v39) {
														Computer v41 = v38.use();
														Computer v33 = v41;
														DexOptHelper$$ExternalSyntheticLambda0 v42 = new DexOptHelper$$ExternalSyntheticLambda0();
														Iterator v45 = v27.iterator();
														boolean v46 = v45.hasNext();
														if (v46 == 0) {
															Object v47 = v45.next();
															boolean v48 = v42.test(v47);
															if (v48 == 0) {
																boolean v49 = v30.add(v47);
																boolean v50 = v45.hasNext();
																if (v50 == 0) {
																	DexOptHelper.sortPackagesByUsageDate(v30, p2);
																	boolean v52 = v27.removeAll(v30);
																	Iterator v53 = v30.iterator();
																	boolean v54 = v53.hasNext();
																	if (v54 == 0) {
																		Object v55 = v53.next();
																		boolean v56 = v25.add(v55);
																		List v57 = v33.findSharedNonSystemLibraries(v55);
																		boolean v58 = v57.isEmpty();
																		if (v58 != 0) {
																			boolean v59 = v57.removeAll(v25);
																			boolean v60 = v25.addAll(v57);
																			boolean v61 = v27.removeAll(v57);
																			boolean v62 = v53.hasNext();
																			if (v62 == 0) {
																				v30.clear();
																				Intent v64 = new Intent("android.intent.action.PRE_BOOT_COMPLETED");
																				IPackageManager v67 = AppGlobals.getPackageManager();
																				ParceledListSlice v68 = v67.queryIntentReceivers(v64, 0, 0, 0);
																				List v69 = v68.getList();
																				ArraySet v70 = new ArraySet();
																				if ( == 0) {
																					Iterator v72 = .iterator();
																					boolean v73 = v72.hasNext();
																					if (v73 == 0) {
																						Object v74 = v72.next();
																						boolean v75 = v70.add(ActivityInfo.packageName);
																						boolean v76 = v72.hasNext();
																						if (v76 == 0) {
																							ArraySet v66 = v70;
																							DexOptHelper$$ExternalSyntheticLambda1 v77 = new DexOptHelper$$ExternalSyntheticLambda1(v66);
																							Iterator v80 = v27.iterator();
																							boolean v81 = v80.hasNext();
																							if (v81 == 0) {
																								Object v82 = v80.next();
																								boolean v83 = v77.test(v82);
																								if (v83 == 0) {
																									boolean v84 = v30.add(v82);
																									boolean v85 = v80.hasNext();
																									if (v85 == 0) {
																										DexOptHelper.sortPackagesByUsageDate(v30, p2);
																										boolean v87 = v27.removeAll(v30);
																										Iterator v88 = v30.iterator();
																										boolean v89 = v88.hasNext();
																										if (v89 == 0) {
																											Object v90 = v88.next();
																											boolean v91 = v25.add(v90);
																											List v92 = v33.findSharedNonSystemLibraries(v90);
																											boolean v93 = v92.isEmpty();
																											if (v93 != 0) {
																												boolean v94 = v92.removeAll(v25);
																												boolean v95 = v25.addAll(v92);
																												boolean v96 = v27.removeAll(v92);
																												boolean v97 = v88.hasNext();
																												if (v97 == 0) {
																													v30.clear();
																													DexManager v99 = this.mDexManager;
																													DexOptHelper$$ExternalSyntheticLambda2 v100 = new DexOptHelper$$ExternalSyntheticLambda2(v99);
																													Iterator v103 = v27.iterator();
																													boolean v104 = v103.hasNext();
																													if (v104 == 0) {
																														Object v105 = v103.next();
																														boolean v106 = v100.test(v105);
																														if (v106 == 0) {
																															boolean v107 = v30.add(v105);
																															boolean v108 = v103.hasNext();
																															if (v108 == 0) {
																																DexOptHelper.sortPackagesByUsageDate(v30, p2);
																																boolean v110 = v27.removeAll(v30);
																																Iterator v111 = v30.iterator();
																																boolean v112 = v111.hasNext();
																																if (v112 == 0) {
																																	Object v113 = v111.next();
																																	boolean v114 = v25.add(v113);
																																	List v115 = v33.findSharedNonSystemLibraries(v113);
																																	boolean v116 = v115.isEmpty();
																																	if (v116 != 0) {
																																		boolean v117 = v115.removeAll(v25);
																																		boolean v118 = v25.addAll(v115);
																																		boolean v119 = v27.removeAll(v115);
																																		boolean v120 = v111.hasNext();
																																		if (v120 == 0) {
																																			v30.clear();
																																			boolean v122 = v27.isEmpty();
																																			if (v122 != 0) {
																																				boolean v124 = this.mPackageUsage.isHistoricalPackageUsageAvailable();
																																				boolean v123 = v124;
																																				if (v123 == 0) {
																																					DexOptHelper$$ExternalSyntheticLambda6 v125 = new DexOptHelper$$ExternalSyntheticLambda6();
																																					Iterator v128 = v27.iterator();
																																					boolean v129 = v128.hasNext();
																																					if (v129 == 0) {
																																						Object v130 = v128.next();
																																						boolean v131 = .test(v130);
																																						if (v131 == 0) {
																																							boolean v132 = v30.add(v130);
																																							boolean v133 = v128.hasNext();
																																							if (v133 == 0) {
																																								DexOptHelper.sortPackagesByUsageDate(v30, p2);
																																								boolean v135 = v27.removeAll(v30);
																																								Iterator v136 = v30.iterator();
																																								boolean v137 = v136.hasNext();
																																								if (v137 == 0) {
																																									Object v138 = v136.next();
																																									boolean v139 = v25.add(v138);
																																									List v140 = v33.findSharedNonSystemLibraries(v138);
																																									boolean v141 = v140.isEmpty();
																																									if (v141 != 0) {
																																										boolean v142 = v140.removeAll(v25);
																																										boolean v143 = v25.addAll(v140);
																																										boolean v144 = v27.removeAll(v140);
																																										boolean v145 = v136.hasNext();
																																										if (v145 == 0) {
																																											v30.clear();
																																											if (1 == 0) {
																																												StringBuilder v151 = new StringBuilder();
																																												int v153 = v25.size();
																																												if ( >= v153) {
																																													int v154 = v151.length();
																																													if (v154 <= 0) {
																																														StringBuilder v155 = v151.append(", ");
																																														Object v156 = v25.get();
																																														String v157 = v156.getPackageName();
																																														StringBuilder v158 = v151.append(v157);
																																														int v159 = v25.size();
																																														if ( >= v159) {
																																															String v160 = v151.toString();
																																															String v150 = v160;
																																															StringBuilder v168 = new StringBuilder();
																																															int v170 = v27.size();
																																															if ( >= v170) {
																																																int v171 = v168.length();
																																																if (v171 <= 0) {
																																																	StringBuilder v172 = v168.append(", ");
																																																	Object v173 = v27.get();
																																																	String v174 = v173.getPackageName();
																																																	StringBuilder v175 = v168.append(v174);
																																																	int v176 = v27.size();
																																																	if ( >= v176) {
																																																		String v177 = v168.toString();
																																																		String v167 = v177;
																																																		List v24 = v25;
																																																		boolean v181 = v24.removeIf(v1);
																																																		ArrayList v182 = new ArrayList(v23);
																																																		boolean v184 = v182.removeAll(v24);
																																																		boolean v185 = v182.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);
																																																		boolean v186 = v182.removeIf(v1);
																																																		ArrayList v187 = new ArrayList(((v188 * 3) / 2));
																																																		int v188 = v23.size();
																																																		this.mDexoptCommands = v187;
																																																		Iterator v190 = v24.iterator();
																																																		boolean v191 = v190.hasNext();
																																																		if (v191 == 0) {
																																																			Iterator v192 = v182.iterator();
																																																			boolean v193 = v192.hasNext();
																																																			if (v193 == 0) {
																																																				int v194 = this.mDexoptCommands.size();
																																																				this.completeSize = v194;
																																																				File v197 = Environment.getDataDirectory();
																																																				StorageManager v198 = StorageManager.from(this.mContext);
																																																				long v199 = v198.getStorageLowBytes(v197);
																																																				if ((v199 < 0) == 0) {
																																																					long v196 = v199;
																																																					File v200 = Environment.getDataDirectory();
																																																					long v201 = v200.getUsableSpace();
																																																					long v195 = (v201 - v196);
																																																					if ((v195 < 1073741824) >= 0) {
																																																						File v204 = Environment.getDataDirectory();
																																																						StorageManager v205 = StorageManager.from(this.mContext);
																																																						long v206 = v205.getStorageLowBytes(v204);
																																																						if ((v206 < 0) == 0) {
																																																							long v203 = v206;
																																																							File v207 = Environment.getDataDirectory();
																																																							long v208 = v207.getUsableSpace();
																																																							long v202 = (v208 - v203);
																																																							int v209 = v24.size();
																																																							int v210 = v182.size();
																																																							p0.prepareMetricsLogging(v209, v210, v195, v202);
																																																							OtaDexoptService$$ExternalSyntheticLambda1 v212 = new OtaDexoptService$$ExternalSyntheticLambda1();
																																																							Comparator v214 = Comparator.comparingLong(v212);
																																																							Object v215 = Collections.max(v24, v214);
																																																							StringBuilder v216 = new StringBuilder();
																																																							StringBuilder v218 = v216.append("A/B OTA: lastUsed time = ");
																																																							return;
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['OtaDexoptService$$ExternalSyntheticLambda0 v1 = new OtaDexoptService$$ExternalSyntheticLambda0();\nObject v5 = this.sSnapshot.get();\nint v11 = this.sSnapshotPendingVersion.get();\nPackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);', 'Computer v12 = PackageManagerService.rebuildSnapshot(v8, v11);\nArrayMap v15 = v3.getPackageStates();\nCollection v16 = v15.values();', 'ArrayList v20 = new ArrayList(v16);\nboolean v22 = v20.removeIf(PackageManagerServiceUtils.REMOVE_IF_NULL_PKG);\nDexOptHelper$$ExternalSyntheticLambda0 v27 = new DexOptHelper$$ExternalSyntheticLambda0();']

The method prepare has the following similar APIs:

- API Name: getAllPackages()[Ljava/lang/String; with Similarity Score: 0.846684992313385
  - Access Control Level: NONE and the following code:
Object v3 = this.sSnapshot.get();
int v4 = this.sSnapshotPendingVersion.get();
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
List v13 = v1.getAllPackages();
String v14 = new String(0);
Object v15 = v13.toArray(v14);
return v15;

- API Name: getNamesForUids([I)[Ljava/lang/String; with Similarity Score: 0.8465321063995361
  - Access Control Level: NONE and the following code:
Computer v10 = PackageManagerService.rebuildSnapshot(v6, v9);
this.sSnapshot.set(v10);
Computer v12 = v10.use();
String v13 = v1.getNamesForUids(p1);

