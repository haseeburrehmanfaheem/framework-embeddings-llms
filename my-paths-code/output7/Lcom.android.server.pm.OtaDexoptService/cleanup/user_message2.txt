The method cleanup has the following code snippet:

This is path 1 for the API with depth 2:
public void cleanup(){
	this.mDexoptCommands = 0;
	File v4 = Environment.getDataDirectory();
	StorageManager v5 = StorageManager.from(this.mContext);
	long v6 = v5.getStorageLowBytes(v4);
	if ((v6 < 0) == 0) {
		long v3 = v6;
		File v7 = Environment.getDataDirectory();
		long v8 = v7.getUsableSpace();
		long v2 = (v8 - v3);
		this.availableSpaceAfterDexopt = v2;
		long v10 = System.nanoTime();
		if (((this.availableSpaceBefore / 1048576) < 2147483647) <= 0) {
			int v11 = 2147483647;
			this.metricsLogger.histogram("ota_dexopt_available_space_before_mb", v11);
			if (((this.availableSpaceAfterBulkDelete / 1048576) < 2147483647) <= 0) {
				int v20 = 2147483647;
				this.metricsLogger.histogram("ota_dexopt_available_space_after_bulk_delete_mb", v20);
				if (((this.availableSpaceAfterDexopt / 1048576) < 2147483647) <= 0) {
					int v29 = 2147483647;
					this.metricsLogger.histogram("ota_dexopt_available_space_after_dexopt_mb", v29);
					this.metricsLogger.histogram("ota_dexopt_num_important_packages", this.importantPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_other_packages", this.otherPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_commands", this.dexoptCommandCountTotal);
					this.metricsLogger.histogram("ota_dexopt_num_commands_executed", this.dexoptCommandCountExecuted);
					long v42 = TimeUnit.NANOSECONDS.toSeconds((v10 - this.otaDexoptTimeStart));
					this.metricsLogger.histogram("ota_dexopt_time_s", v42);
					return;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void cleanup(){
	this.mDexoptCommands = 0;
	File v4 = Environment.getDataDirectory();
	StorageManager v5 = StorageManager.from(this.mContext);
	long v6 = v5.getStorageLowBytes(v4);
	if ((v6 < 0) == 0) {
		long v3 = v6;
		File v7 = Environment.getDataDirectory();
		long v8 = v7.getUsableSpace();
		long v2 = (v8 - v3);
		this.availableSpaceAfterDexopt = v2;
		long v10 = System.nanoTime();
		if (((this.availableSpaceBefore / 1048576) < 2147483647) <= 0) {
			int v11 = (this.availableSpaceBefore / 1048576);
			this.metricsLogger.histogram("ota_dexopt_available_space_before_mb", v11);
			if (((this.availableSpaceAfterBulkDelete / 1048576) < 2147483647) <= 0) {
				int v13 = 2147483647;
				this.metricsLogger.histogram("ota_dexopt_available_space_after_bulk_delete_mb", v13);
				if (((this.availableSpaceAfterDexopt / 1048576) < 2147483647) <= 0) {
					int v22 = 2147483647;
					this.metricsLogger.histogram("ota_dexopt_available_space_after_dexopt_mb", v22);
					this.metricsLogger.histogram("ota_dexopt_num_important_packages", this.importantPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_other_packages", this.otherPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_commands", this.dexoptCommandCountTotal);
					this.metricsLogger.histogram("ota_dexopt_num_commands_executed", this.dexoptCommandCountExecuted);
					long v35 = TimeUnit.NANOSECONDS.toSeconds((v10 - this.otaDexoptTimeStart));
					this.metricsLogger.histogram("ota_dexopt_time_s", v35);
					return;
				}
			}
		}
	}
}

and the following sink code:
['this.mDexoptCommands = 0;\nlong v6 = v5.getStorageLowBytes(v4);\nlong v8 = v7.getUsableSpace();\nlong v2 = (v8 - v3);\nthis.availableSpaceAfterDexopt = v2;', 'OtaDexoptService.getMainLowSpaceThreshold();\nFile v4 = Environment.getDataDirectory();\nlong v5 = v4.getUsableSpace();\nlong v2 = (v5 - v3);\nthis.availableSpaceAfterDexopt = v2;', 'long v2 = p0.getAvailableSpace();\nthis.availableSpaceAfterDexopt = v2;']

The method cleanup has the following similar APIs:

- API Name: nextDexoptCommand()Ljava/lang/String; with Similarity Score: 0.8210355639457703
  - Access Control Level: NONE and the following code:
Object v2 = this.mDexoptCommands.remove(0);
long v7 = v6.getStorageLowBytes(v5);
return "(no free space)";

- API Name: nextDexoptCommand()Ljava/lang/String; with Similarity Score: 0.7990810871124268
  - Access Control Level: NONE and the following code:
Object v2 = this.mDexoptCommands.remove(0);
long v4 = OtaDexoptService.getMainLowSpaceThreshold();
return "(no free space)";

