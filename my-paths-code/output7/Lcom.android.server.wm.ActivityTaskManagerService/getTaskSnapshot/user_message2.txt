The method getTaskSnapshot has the following code snippet:

This is path 1 for the API with depth 2:
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									if (p2 == 0) {
										boolean v22 = this.mEnableLowResSnapshots;
										if (v22 == 0) {
											WindowManagerService.boostPriorityForLockedSection();
											Integer v25 = Integer.valueOf(p1);
											Object v26 = this.mRunningCache.get(v25);
											if (v26 == 0) {
												WindowManagerService.resetPriorityAfterLockedSection();
												if (p3 != 0) {
													TaskSnapshot v28 = TaskSnapshotCache.tryRestoreFromDisk(p1, p2, );
													TaskSnapshot v23 = v28;
													TaskSnapshot v21 = v23;
													if (v21 != 0) {
														if (p3 == 0) {
															long v31 = Binder.clearCallingIdentity();
															this.sThreadPriorityBooster.boost();
															Task v35 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
															Task v34 = v35;
															if (v34 == 0) {
																int v37 = this.mChildren.size();
																if ( < 0) {
																	Object v38 = this.mChildren.get();
																	boolean v39 = v38.isVisible();
																	if (v39 == 0) {
																		if ( < 0) {
																			Object v40 = this.mChildren.get();
																			boolean v41 = v40.isVisible();
																			if (v41 == 0) {
																				boolean v36 = 1;
																				if (v36 != 0) {
																					if (0 == 0) {
																						int v43 = TaskSnapshotController.getSnapshotMode(v34);
																						if (v43 == 0) {
																							if (v43 == 1) {
																								if (v43 == 2) {
																									TaskSnapshot v42 = ;
																									this.sThreadPriorityBooster.reset();
																									Binder.restoreCallingIdentity(v31);
																									TaskSnapshot v29 = ;
																									Binder.restoreCallingIdentity(v2);
																									return ;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
			Integer v12 = Integer.valueOf(p1);
			PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
			Task v14 = RootWindowContainer.getTask(v13);
			v13.recycle();
			if (v14 == 0) {
				if (0 == 0) {
					Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
					if (v16 == 0) {
						Task v17 = v14.getRootTask();
						if (v17 == v16) {
							if (0 == 0) {
								boolean v18 = v14.reparent(v16, 0, , 1, 1, "anyTaskForId");
								Task v8 = v14;
								Task v7 = v8;
								if (v7 != 0) {
									if (p2 == 0) {
										boolean v23 = this.mEnableLowResSnapshots;
										if (v23 == 0) {
											WindowManagerService.boostPriorityForLockedSection();
											Integer v26 = Integer.valueOf(p1);
											Object v27 = this.mRunningCache.get(v26);
											if (v27 == 0) {
												WindowManagerService.resetPriorityAfterLockedSection();
												if (p3 != 0) {
													TaskSnapshot v29 = TaskSnapshotCache.tryRestoreFromDisk(p1, p2, );
													TaskSnapshot v24 = v29;
													TaskSnapshot v22 = v24;
													if (v22 != 0) {
														if (p3 == 0) {
															long v32 = Binder.clearCallingIdentity();
															this.sThreadPriorityBooster.boost();
															Task v36 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
															Task v35 = v36;
															if (v35 == 0) {
																int v38 = this.mChildren.size();
																if ( < 0) {
																	Object v39 = this.mChildren.get();
																	boolean v40 = v39.isVisible();
																	if (v40 == 0) {
																		if ( < 0) {
																			Object v41 = this.mChildren.get();
																			boolean v42 = v41.isVisible();
																			if (v42 == 0) {
																				boolean v37 = 1;
																				if (v37 != 0) {
																					if (0 == 0) {
																						int v44 = TaskSnapshotController.getSnapshotMode(v35);
																						if (v44 == 0) {
																							if (v44 == 1) {
																								if (v44 == 2) {
																									TaskSnapshot v43 = ;
																									this.sThreadPriorityBooster.reset();
																									Binder.restoreCallingIdentity(v32);
																									TaskSnapshot v30 = ;
																									Binder.restoreCallingIdentity(v2);
																									return ;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									WindowManagerThreadPriorityBooster.reset();
									if (p2 == 0) {
										boolean v23 = this.mEnableLowResSnapshots;
										if (v23 == 0) {
											WindowManagerService.boostPriorityForLockedSection();
											Integer v26 = Integer.valueOf(p1);
											Object v27 = this.mRunningCache.get(v26);
											if (v27 == 0) {
												WindowManagerService.resetPriorityAfterLockedSection();
												if (p3 != 0) {
													TaskSnapshot v29 = TaskSnapshotCache.tryRestoreFromDisk(p1, p2, );
													TaskSnapshot v24 = v29;
													TaskSnapshot v22 = v24;
													if (v22 != 0) {
														if (p3 == 0) {
															long v32 = Binder.clearCallingIdentity();
															this.sThreadPriorityBooster.boost();
															Task v36 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
															Task v35 = v36;
															if (v35 == 0) {
																int v38 = this.mChildren.size();
																if ( < 0) {
																	Object v39 = this.mChildren.get();
																	boolean v40 = v39.isVisible();
																	if (v40 == 0) {
																		if ( < 0) {
																			Object v41 = this.mChildren.get();
																			boolean v42 = v41.isVisible();
																			if (v42 == 0) {
																				boolean v37 = 1;
																				if (v37 != 0) {
																					if (0 == 0) {
																						int v44 = TaskSnapshotController.getSnapshotMode(v35);
																						if (v44 == 0) {
																							if (v44 == 1) {
																								if (v44 == 2) {
																									TaskSnapshot v43 = ;
																									this.sThreadPriorityBooster.reset();
																									Binder.restoreCallingIdentity(v32);
																									TaskSnapshot v30 = ;
																									Binder.restoreCallingIdentity(v2);
																									return ;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v11 = Integer.valueOf(p1);\nPooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);\nTask v13 = RootWindowContainer.getTask(v12);', 'Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);\nTaskSnapshot v11 = this.mCache.getSnapshot(p1, Task.mUserId, 1, );', 'Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);\nTaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.getSnapshot(p1, Task.mUserId, 1, p2);']

The method getTaskSnapshot has the following similar APIs:

- API Name: startSystemLockTaskMode(I)V with Similarity Score: 0.9915001392364502
  - Access Control Level: SYS_OR_SIG and the following code:
int v11 = Integer.valueOf(p1);
PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
Task v13 = RootWindowContainer.getTask(v12);

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; with Similarity Score: 0.8742475509643555
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);

