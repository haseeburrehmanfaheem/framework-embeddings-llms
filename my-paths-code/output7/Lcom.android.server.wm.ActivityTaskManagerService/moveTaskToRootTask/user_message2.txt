The method moveTaskToRootTask has the following code snippet:

This is path 1 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	long v5 = Binder.clearCallingIdentity();
	Task v8 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v7 = v8;
	Task v6 = v7;
	if (v6 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v9 = new Object(3);
			Long v10 = Long.valueOf(p1);
			Long v11 = Long.valueOf(p2);
			Boolean v12 = Boolean.valueOf(p3);
			if (this.sServiceInstance != 0) {
				ProtoLogImpl v15 = new ProtoLogImpl(v16,1048576,v18);
				File v16 = new File("/data/misc/wmtrace/wm_log.winscope");
				ProtoLogViewerConfigReader v18 = new ProtoLogViewerConfigReader();
				this.sServiceInstance = v15;
				ProtoLogImpl v14 = this.sServiceInstance;
				boolean v22 = p1.isLogToProto();
				if (v22 == 0) {
					BaseProtoLogImpl.logToProto(p2, p3, p5);
					boolean v24 = p1.isLogToLogcat();
					if (v24 == 0) {
						String v25 = p1.getTag();
						BaseProtoLogImpl.logToLogcat(v25, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
						int v29 = this.mChildren.size();
						int v28 = v29;
						if ( < 0) {
							Object v31 = this.mChildren.get();
							WindowContainer v30 = v31;
							DisplayContent$$ExternalSyntheticLambda6 v33 = new DisplayContent$$ExternalSyntheticLambda6(p1);
							Task v35 = DisplayContent.getRootTask(v33);
							Task v32 = v35;
							if (v32 == 0) {
								if ( < 0) {
									Object v37 = this.mChildren.get();
									WindowContainer v36 = v37;
									DisplayContent$$ExternalSyntheticLambda6 v39 = new DisplayContent$$ExternalSyntheticLambda6(p1);
									Task v41 = DisplayContent.getRootTask(v39);
									Task v38 = v41;
									if (v38 == 0) {
										Task v27 = v38;
										if (v27 == 0) {
											boolean v42 = v27.isActivityTypeStandardOrUndefined();
											if (v42 == 0) {
												if (p3 == 0) {
													Task v45 = Task.getRootTask();
													if ( != 2147483647) {
														Task v46 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, );
														if (v46 != v45) {
															int v47 = v46.getDisplayId();
															boolean v48 = Task.canBeLaunchedOnDisplay(v47);
															if (v48 != 0) {
																boolean v44 = 0;
																boolean v43 = v44;
																Binder.restoreCallingIdentity(v5);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	WindowManagerThreadPriorityBooster.boost();
	long v6 = Binder.clearCallingIdentity();
	Task v9 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v8 = v9;
	Task v7 = v8;
	if (v7 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v10 = new Object(3);
			Long v11 = Long.valueOf(p1);
			Long v12 = Long.valueOf(p2);
			Boolean v13 = Boolean.valueOf(p3);
			if (this.sServiceInstance != 0) {
				ProtoLogImpl v16 = new ProtoLogImpl(v17,1048576,v19);
				File v17 = new File("/data/misc/wmtrace/wm_log.winscope");
				ProtoLogViewerConfigReader v19 = new ProtoLogViewerConfigReader();
				this.sServiceInstance = v16;
				ProtoLogImpl v15 = this.sServiceInstance;
				boolean v23 = p1.isLogToProto();
				if (v23 == 0) {
					BaseProtoLogImpl.logToProto(p2, p3, p5);
					boolean v25 = p1.isLogToLogcat();
					if (v25 == 0) {
						String v26 = p1.getTag();
						BaseProtoLogImpl.logToLogcat(v26, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
						int v30 = this.mChildren.size();
						int v29 = v30;
						if ( < 0) {
							Object v32 = this.mChildren.get();
							WindowContainer v31 = v32;
							DisplayContent$$ExternalSyntheticLambda6 v34 = new DisplayContent$$ExternalSyntheticLambda6(p1);
							Task v36 = DisplayContent.getRootTask(v34);
							Task v33 = v36;
							if (v33 == 0) {
								if ( < 0) {
									Object v38 = this.mChildren.get();
									WindowContainer v37 = v38;
									DisplayContent$$ExternalSyntheticLambda6 v40 = new DisplayContent$$ExternalSyntheticLambda6(p1);
									Task v42 = DisplayContent.getRootTask(v40);
									Task v39 = v42;
									if (v39 == 0) {
										Task v28 = v39;
										if (v28 == 0) {
											boolean v43 = v28.isActivityTypeStandardOrUndefined();
											if (v43 == 0) {
												if (p3 == 0) {
													Task v46 = Task.getRootTask();
													if ( != 2147483647) {
														Task v47 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, );
														if (v47 != v46) {
															int v48 = v47.getDisplayId();
															boolean v49 = Task.canBeLaunchedOnDisplay(v48);
															if (v49 != 0) {
																boolean v45 = 0;
																boolean v44 = v45;
																Binder.restoreCallingIdentity(v6);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	long v5 = Binder.clearCallingIdentity();
	Task v8 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v7 = v8;
	Task v6 = v7;
	if (v6 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v9 = new Object(3);
			Long v10 = Long.valueOf(p1);
			Long v11 = Long.valueOf(p2);
			Boolean v12 = Boolean.valueOf(p3);
			if (this.sServiceInstance != 0) {
				ProtoLogImpl v15 = new ProtoLogImpl(v16,1048576,v18);
				File v16 = new File("/data/misc/wmtrace/wm_log.winscope");
				ProtoLogViewerConfigReader v18 = new ProtoLogViewerConfigReader();
				this.sServiceInstance = v15;
				ProtoLogImpl v14 = this.sServiceInstance;
				boolean v22 = p1.isLogToProto();
				if (v22 == 0) {
					BaseProtoLogImpl.logToProto(p2, p3, p5);
					boolean v24 = p1.isLogToLogcat();
					if (v24 == 0) {
						String v25 = p1.getTag();
						BaseProtoLogImpl.logToLogcat(v25, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
						int v29 = this.mChildren.size();
						int v28 = v29;
						if ( < 0) {
							Object v31 = this.mChildren.get();
							WindowContainer v30 = v31;
							DisplayContent$$ExternalSyntheticLambda6 v33 = new DisplayContent$$ExternalSyntheticLambda6(p1);
							Task v35 = DisplayContent.getRootTask(v33);
							Task v32 = v35;
							if (v32 == 0) {
								if ( < 0) {
									Object v37 = this.mChildren.get();
									WindowContainer v36 = v37;
									DisplayContent$$ExternalSyntheticLambda6 v39 = new DisplayContent$$ExternalSyntheticLambda6(p1);
									Task v41 = DisplayContent.getRootTask(v39);
									Task v38 = v41;
									if (v38 == 0) {
										Task v27 = v38;
										if (v27 == 0) {
											boolean v42 = v27.isActivityTypeStandardOrUndefined();
											if (v42 == 0) {
												if (p3 == 0) {
													Task v45 = Task.getRootTask();
													if ( != 2147483647) {
														Task v46 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, );
														if (v46 != v45) {
															int v47 = v46.getDisplayId();
															boolean v48 = Task.canBeLaunchedOnDisplay(v47);
															if (v48 != 0) {
																boolean v44 = 0;
																boolean v43 = v44;
																Binder.restoreCallingIdentity(v5);
																WindowManagerThreadPriorityBooster.reset();
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['WindowManagerService.boostPriorityForLockedSection();\nlong v3 = Binder.clearCallingIdentity();\nTask v4 = this.mRootWindowContainer.anyTaskForId(p1);', 'Object v5 = new Object(3);\nLong v6 = Long.valueOf(p1);\nLong v7 = Long.valueOf(p2);\nBoolean v8 = Boolean.valueOf(p3);', 'ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, -677449371, 53, 0, v5);', 'Task v10 = this.mRootWindowContainer.getRootTask(p2);\nboolean v11 = v10.isActivityTypeStandardOrUndefined();\nboolean v12 = v4.reparent(v10, p3, 1, 1, 0, "moveTaskToRootTask");']

The method moveTaskToRootTask has the following similar APIs:

- API Name: removeRootTasksWithActivityTypes([I)V with Similarity Score: 0.9164218902587891
  - Access Control Level: SYS_OR_SIG and the following code:
WindowManagerService.boostPriorityForLockedSection();
long v3 = Binder.clearCallingIdentity();
this.mRootWindowContainer.removeRootTasksWithActivityTypes(p1);

- API Name: moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V with Similarity Score: 0.9041211605072021
  - Access Control Level: SYS_OR_SIG and the following code:
ProtoLogImpl v6 = ProtoLogImpl.getSingleInstance();
v6.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_TASKS, 2117696413, 1, 0, v2);

