This is path 1 for the API with depth 2:
public int startAssistantActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, Bundle p7, int p8){
	int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
	int v3 = v4;
	long v5 = Binder.clearCallingIdentity();
	ActivityStartController v6 = this.mActivityStartController;
	ActivityStarter v8 = this.mFactory.obtain();
	ActivityStarter$Request.intent = p1;
	ActivityStarter v9 = ActivityStarter;
	ActivityStarter$Request.reason = p2;
	ActivityStarter v10 = ActivityStarter;
	ActivityStarter v7 = v10;
	ActivityStarter v11 = v7.setCallingUid(p4);
	ActivityStarter v12 = v11.setCallingPackage(p1);
	ActivityStarter v13 = v12.setCallingFeatureId(p2);
	ActivityStarter v14 = v13.setResolvedType(p6);
	if (p1 == 0) {
		SafeActivityOptions v17 = new SafeActivityOptions(v18);
		ActivityOptions v18 = ActivityOptions.fromBundle(p1);
		SafeActivityOptions v16 = ;
		ActivityStarter$Request.activityOptions = v16;
		ActivityStarter v20 = ActivityStarter;
		ActivityStarter v15 = v20;
		ActivityStarter v21 = v15.setUserId(v3);
		ActivityStarter v22 = v21.setAllowBackgroundActivityStart(1);
		this.mController.onExecutionStarted();
		if (ActivityStarter$Request.intent == 0) {
			this.sThreadPriorityBooster.boost();
			if (ActivityStarter$Request.resultTo != 0) {
				Object v29 = ActivityRecord$Token.mActivityRef.get();
				if (v29 == 0) {
					Task v30 = v29.getRootTask();
					if (v30 != 0) {
						ActivityRecord v28 = ;
						if (ActivityStarter$Request.realCallingUid != -1) {
							ActivityMetricsLogger v31 = this.mActivityMetricsLogger;
							if ( != 0) {
								ActivityMetricsLogger$LaunchingState v40 = new ActivityMetricsLogger$LaunchingState();
								ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v40, v33);
								ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v33);
								ActivityMetricsLogger$LaunchingState v32 = v40;
								this.sThreadPriorityBooster.reset();
								if (ActivityStarter$Request.activityInfo != 0) {
									if (this.realCallingPid != 0) {
										int v47 = Binder.getCallingPid();
										this.realCallingPid = v47;
										if (this.realCallingUid != -1) {
											int v48 = Binder.getCallingUid();
											this.realCallingUid = v48;
											if (this.callingUid < 0) {
												this.callingPid = -1;
												if (this.caller == 0) {
													Intent v49 = new Intent(this.intent);
													this.ephemeralIntent = v49;
													Intent v51 = new Intent(this.intent);
													this.intent = v51;
													ComponentName v53 = v51.getComponent();
													if (v53 == 0) {
														int v54 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
														ResolveInfo v55 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v54);
														this.resolveInfo = v55;
														if (v55 != 0) {
															UserInfo v56 = this.mSupervisor.getUserInfo(this.userId);
															if (v56 == 0) {
																boolean v57 = v56.isManagedProfile();
																if (v57 == 0) {
																	ActivityInfo v58 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																	this.activityInfo = v58;
																	if (v58 == 0) {
																		if (ActivityStarter$Request.intent == 0) {
																			this.sThreadPriorityBooster.boost();
																			if (ActivityStarter$Request.globalConfig == 0) {
																				int v62 = RootWindowContainer.getChildCount();
																				if ( < 0) {
																					WindowContainer v63 = RootWindowContainer.getChildAt();
																					Task v64 = v63.getFocusedRootTask();
																					if (v64 == 0) {
																						if ( < 0) {
																							WindowContainer v65 = RootWindowContainer.getChildAt();
																							Task v66 = v65.getFocusedRootTask();
																							if (v66 == 0) {
																								Task v61 = v66;
																								if (v61 == 0) {
																									if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																										long v67 = Binder.clearCallingIdentity();
																										int v68 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																										if (v68 == 0) {
																											this.sThreadPriorityBooster.reset();
																											this.mController.onExecutionComplete(ActivityStarter);
																											int v23 = v68;
																											Binder.restoreCallingIdentity(v5);
																											return v23;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startAssistantActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, Bundle p7, int p8){
	int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
	int v3 = v4;
	long v5 = Binder.clearCallingIdentity();
	ActivityStartController v6 = this.mActivityStartController;
	ActivityStarter v8 = this.mFactory.obtain();
	ActivityStarter v9 = v8.setIntent(p5);
	ActivityStarter v10 = v9.setReason("startAssistantActivity");
	ActivityStarter v7 = v10;
	ActivityStarter$Request.callingUid = p4;
	ActivityStarter v11 = ActivityStarter;
	ActivityStarter$Request.callingPackage = p1;
	ActivityStarter v12 = ActivityStarter;
	ActivityStarter$Request.callingFeatureId = p2;
	ActivityStarter v13 = ActivityStarter;
	ActivityStarter$Request.resolvedType = p6;
	ActivityStarter v14 = ActivityStarter;
	SafeActivityOptions v16 = SafeActivityOptions.fromBundle(p7);
	ActivityStarter v17 = ActivityStarter.setActivityOptions(v16);
	ActivityStarter v15 = v17;
	ActivityStarter$Request.userId = v3;
	ActivityStarter v18 = ActivityStarter;
	ActivityStarter$Request.allowBackgroundActivityStart = 1;
	ActivityStarter v19 = ActivityStarter;
	ActivityStarter.onExecutionStarted();
	if (ActivityStarter$Request.intent == 0) {
		WindowManagerService.boostPriorityForLockedSection();
		ActivityRecord v23 = ActivityRecord.forTokenLocked(ActivityStarter$Request.resultTo);
		if (ActivityStarter$Request.realCallingUid != -1) {
			int v24 = Binder.getCallingUid();
			ActivityMetricsLogger v25 = this.mSupervisor.getActivityMetricsLogger();
			ActivityMetricsLogger$LaunchingState v26 = v25.notifyActivityLaunching(ActivityStarter$Request.intent, v23, );
			WindowManagerService.resetPriorityAfterLockedSection();
			if (ActivityStarter$Request.activityInfo != 0) {
				if (ActivityStarter$Request.intent == 0) {
					WindowManagerService.boostPriorityForLockedSection();
					if (ActivityStarter$Request.globalConfig == 0) {
						Task v29 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
						if (v29 == 0) {
							Task.mConfigWillChange = ;
							if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
								long v30 = Binder.clearCallingIdentity();
								int v31 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
								if (v31 == 0) {
									WindowManagerService.resetPriorityAfterLockedSection();
									ActivityStarter.onExecutionComplete();
									int v20 = v31;
									Binder.restoreCallingIdentity(v5);
									return v20;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startAssistantActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, Bundle p7, int p8){
	int v3 = p0.handleIncomingUser(p3, p4, p8, "startAssistantActivity");
	long v4 = Binder.clearCallingIdentity();
	ActivityStartController v5 = p0.getActivityStartController();
	ActivityStarter v6 = v5.obtainStarter(p5, "startAssistantActivity");
	ActivityStarter v7 = v6.setCallingUid(p4);
	ActivityStarter v8 = v7.setCallingPackage(p1);
	ActivityStarter v9 = v8.setCallingFeatureId(p2);
	ActivityStarter v10 = v9.setResolvedType(p6);
	ActivityStarter v11 = v10.setActivityOptions(p7);
	ActivityStarter v12 = v11.setUserId(v3);
	ActivityStarter v13 = v12.setAllowBackgroundActivityStart(1);
	int v14 = v13.execute();
	Binder.restoreCallingIdentity(v4);
	return v14;
}
