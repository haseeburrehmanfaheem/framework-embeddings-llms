The method startActivityWithConfig has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivityWithConfig(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, Configuration p10, Bundle p11, int p12){
	if (v3 == 0) {
		if (v6 != 0) {
			int v7 = Binder.getCallingPid();
			int v8 = Binder.getCallingUid();
			int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p12, 0, 0, "startActivityWithConfig", 0);
			int v9 = v10;
			ActivityStartController v11 = this.mActivityStartController;
			ActivityStarter v13 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p1;
			ActivityStarter v14 = ActivityStarter;
			ActivityStarter$Request.reason = p2;
			ActivityStarter v15 = ActivityStarter;
			ActivityStarter v12 = v15;
			ActivityStarter v16 = v12.setCaller(p1);
			ActivityStarter v17 = v16.setCallingPackage(p2);
			ActivityStarter v18 = v17.setCallingFeatureId(p3);
			ActivityStarter v19 = v18.setResolvedType(p5);
			ActivityStarter v20 = v19.setResultTo(p6);
			ActivityStarter v21 = v20.setResultWho(p7);
			ActivityStarter v22 = v21.setRequestCode(p8);
			ActivityStarter v23 = v22.setStartFlags(p9);
			ActivityStarter v24 = v23.setGlobalConfiguration(p10);
			if (p1 == 0) {
				SafeActivityOptions v27 = new SafeActivityOptions(v28);
				ActivityOptions v28 = ActivityOptions.fromBundle(p1);
				SafeActivityOptions v26 = ;
				ActivityStarter$Request.activityOptions = v26;
				ActivityStarter v30 = ActivityStarter;
				ActivityStarter v25 = v30;
				ActivityStarter v31 = v25.setUserId(v9);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v38 = ActivityRecord$Token.mActivityRef.get();
						if (v38 == 0) {
							Task v39 = v38.getRootTask();
							if (v39 != 0) {
								ActivityRecord v37 = ;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v40 = this.mActivityMetricsLogger;
									if ( != 0) {
										ActivityMetricsLogger$LaunchingState v49 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v49, v42);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v42);
										ActivityMetricsLogger$LaunchingState v41 = v49;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v56 = Binder.getCallingPid();
												this.realCallingPid = v56;
												if (this.realCallingUid != -1) {
													int v57 = Binder.getCallingUid();
													this.realCallingUid = v57;
													if (this.callingUid < 0) {
														this.callingPid = -1;
														if (this.caller == 0) {
															Intent v58 = new Intent(this.intent);
															this.ephemeralIntent = v58;
															Intent v60 = new Intent(this.intent);
															this.intent = v60;
															ComponentName v62 = v60.getComponent();
															if (v62 == 0) {
																int v63 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																ResolveInfo v64 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v63);
																this.resolveInfo = v64;
																if (v64 != 0) {
																	UserInfo v65 = this.mSupervisor.getUserInfo(this.userId);
																	if (v65 == 0) {
																		boolean v66 = v65.isManagedProfile();
																		if (v66 == 0) {
																			ActivityInfo v67 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																			this.activityInfo = v67;
																			if (v67 == 0) {
																				if (ActivityStarter$Request.intent == 0) {
																					this.sThreadPriorityBooster.boost();
																					if (ActivityStarter$Request.globalConfig == 0) {
																						int v71 = RootWindowContainer.getChildCount();
																						if ( < 0) {
																							WindowContainer v72 = RootWindowContainer.getChildAt();
																							Task v73 = v72.getFocusedRootTask();
																							if (v73 == 0) {
																								if ( < 0) {
																									WindowContainer v74 = RootWindowContainer.getChildAt();
																									Task v75 = v74.getFocusedRootTask();
																									if (v75 == 0) {
																										Task v70 = v75;
																										if (v70 == 0) {
																											if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																												long v76 = Binder.clearCallingIdentity();
																												int v77 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																												if (v77 == 0) {
																													this.sThreadPriorityBooster.reset();
																													this.mController.onExecutionComplete(ActivityStarter);
																													int v32 = v77;
																													return v32;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int startActivityWithConfig(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, Configuration p10, Bundle p11, int p12){
	if (v3 == 0) {
		if (v6 != 0) {
			int v7 = Binder.getCallingPid();
			int v8 = Binder.getCallingUid();
			int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p12, 0, 0, "startActivityWithConfig", 0);
			int v9 = v10;
			ActivityStartController v11 = this.mActivityStartController;
			ActivityStarter v13 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p1;
			ActivityStarter v14 = ActivityStarter;
			ActivityStarter$Request.reason = p2;
			ActivityStarter v15 = ActivityStarter;
			ActivityStarter v12 = v15;
			ActivityStarter v16 = v12.setCaller(p1);
			ActivityStarter v17 = v16.setCallingPackage(p2);
			ActivityStarter v18 = v17.setCallingFeatureId(p3);
			ActivityStarter v19 = v18.setResolvedType(p5);
			ActivityStarter v20 = v19.setResultTo(p6);
			ActivityStarter v21 = v20.setResultWho(p7);
			ActivityStarter v22 = v21.setRequestCode(p8);
			ActivityStarter v23 = v22.setStartFlags(p9);
			ActivityStarter v24 = v23.setGlobalConfiguration(p10);
			if (p1 == 0) {
				SafeActivityOptions v27 = new SafeActivityOptions(v28);
				ActivityOptions v28 = ActivityOptions.fromBundle(p1);
				SafeActivityOptions v26 = ;
				ActivityStarter$Request.activityOptions = v26;
				ActivityStarter v30 = ActivityStarter;
				ActivityStarter v25 = v30;
				ActivityStarter v31 = v25.setUserId(v9);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v38 = ActivityRecord$Token.mActivityRef.get();
						if (v38 == 0) {
							Task v39 = v38.getRootTask();
							if (v39 != 0) {
								ActivityRecord v37 = ;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v40 = this.mActivityMetricsLogger;
									if ( != 0) {
										ActivityMetricsLogger$LaunchingState v49 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v49, v42);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v42);
										ActivityMetricsLogger$LaunchingState v41 = v49;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v56 = Binder.getCallingPid();
												this.realCallingPid = v56;
												if (this.realCallingUid != -1) {
													int v57 = Binder.getCallingUid();
													this.realCallingUid = v57;
													if (this.callingUid < 0) {
														if (this.caller != 0) {
															this.callingPid = this.realCallingPid;
															this.callingUid = this.realCallingUid;
															if (this.caller == 0) {
																Intent v58 = new Intent(this.intent);
																this.ephemeralIntent = v58;
																Intent v60 = new Intent(this.intent);
																this.intent = v60;
																ComponentName v62 = v60.getComponent();
																if (v62 == 0) {
																	int v63 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																	ResolveInfo v64 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v63);
																	this.resolveInfo = v64;
																	if (v64 != 0) {
																		ActivityInfo v65 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																		this.activityInfo = v65;
																		if (v65 == 0) {
																			if (ActivityStarter$Request.intent == 0) {
																				this.sThreadPriorityBooster.boost();
																				if (ActivityStarter$Request.globalConfig == 0) {
																					int v69 = RootWindowContainer.getChildCount();
																					if ( < 0) {
																						WindowContainer v70 = RootWindowContainer.getChildAt();
																						Task v71 = v70.getFocusedRootTask();
																						if (v71 == 0) {
																							if ( < 0) {
																								WindowContainer v72 = RootWindowContainer.getChildAt();
																								Task v73 = v72.getFocusedRootTask();
																								if (v73 == 0) {
																									Task v68 = v73;
																									if (v68 == 0) {
																										if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																											long v74 = Binder.clearCallingIdentity();
																											int v75 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																											if (v75 == 0) {
																												this.sThreadPriorityBooster.reset();
																												this.mController.onExecutionComplete(ActivityStarter);
																												int v32 = v75;
																												return v32;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p12, 0, 0, "startActivityWithConfig", 0);\nActivityStarter v13 = this.mFactory.obtain();\nActivityStarter$Request.intent = p1;\nActivityStarter v16 = v12.setCaller(p1);\nActivityStarter v17 = v16.setCallingPackage(p2);\nActivityStarter v18 = v17.setCallingFeatureId(p3);\nActivityStarter v19 = v18.setResolvedType(p5);\nActivityStarter v20 = v19.setResultTo(p6);\nActivityStarter v21 = v20.setResultWho(p7);\nActivityStarter v22 = v21.setRequestCode(p8);\nActivityStarter v23 = v22.setStartFlags(p9);\nActivityStarter v24 = v23.setGlobalConfiguration(p10);', 'int v56 = Binder.getCallingPid();\nthis.realCallingPid = v56;\nint v57 = Binder.getCallingUid();\nthis.realCallingUid = v57;', 'ActivityStarter v13 = this.mFactory.obtain();\nActivityStarter v14 = v13.setIntent(p4);\nActivityStarter v15 = v14.setReason("startActivityWithConfig");\nActivityStarter$Request.caller = p1;\nActivityStarter$Request.callingPackage = p2;\nActivityStarter$Request.callingFeatureId = p3;\nActivityStarter$Request.resolvedType = p5;\nActivityStarter$Request.resultTo = p6;\nActivityStarter$Request.resultWho = p7;\nActivityStarter$Request.requestCode = p8;\nActivityStarter$Request.startFlags = p9;\nActivityStarter$Request.globalConfig = p10;', 'ActivityStartController v6 = p0.getActivityStartController();\nActivityStarter v7 = v6.obtainStarter(p4, "startActivityWithConfig");\nActivityStarter v8 = v7.setCaller(p1);\nActivityStarter v9 = v8.setCallingPackage(p2);\nActivityStarter v10 = v9.setCallingFeatureId(p3);\nActivityStarter v11 = v10.setResolvedType(p5);\nActivityStarter v12 = v11.setResultTo(p6);\nActivityStarter v13 = v12.setResultWho(p7);\nActivityStarter v14 = v13.setRequestCode(p8);\nActivityStarter v15 = v14.setStartFlags(p9);\nActivityStarter v16 = v15.setGlobalConfiguration(p10);']

The method startActivityWithConfig has the following similar APIs:

- API Name: attachAsOriginator(Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/ISoundTriggerSession; with Similarity Score: 0.9134237766265869
  - Access Control Level: NONE and the following code:
int v3 = Binder.getCallingUid();
Identity.uid = v3;
int v4 = Binder.getCallingPid();
Identity.pid = v4;

- API Name: startActivityAsCaller(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;ZI)I with Similarity Score: 0.9091773629188538
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityStarter v17 = this.mFactory.obtain();
ActivityStarter v18 = v17.setIntent(p3);
ActivityStarter v19 = v18.setReason("startActivityAsCaller");
ActivityStarter$Request.callingUid = ActivityRecord.launchedFromUid;
ActivityStarter$Request.callingPackage = ActivityRecord.launchedFromPackage;
ActivityStarter$Request.callingFeatureId = ActivityRecord.launchedFromFeatureId;

