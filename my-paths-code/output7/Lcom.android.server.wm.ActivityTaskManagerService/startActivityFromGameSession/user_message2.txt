The method startActivityFromGameSession has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivityFromGameSession(IApplicationThread p1, String p2, String p3, int p4, int p5, Intent p6, int p7, int p8){
	if (v1 != 0) {
		if (v4 == 0) {
			ActivityOptions v6 = new ActivityOptions();
			ActivityOptions v5 = v6;
			this.mLaunchTaskId = p7;
			int v10 = this.mAmInternal.handleIncomingUser(p4, p5, p8, 0, 0, "startActivityFromGameSession", 0);
			int v9 = v10;
			long v11 = Binder.clearCallingIdentity();
			ActivityStartController v12 = this.mActivityStartController;
			ActivityStarter v14 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p1;
			ActivityStarter v15 = ActivityStarter;
			ActivityStarter$Request.reason = p2;
			ActivityStarter v16 = ActivityStarter;
			ActivityStarter v13 = v16;
			ActivityStarter v17 = v13.setCaller(p1);
			ActivityStarter v18 = v17.setCallingUid(p5);
			ActivityStarter v19 = v18.setCallingPid(p4);
			String v20 = p6.getPackage();
			ActivityStarter v21 = v19.setCallingPackage(v20);
			ActivityStarter v22 = v21.setCallingFeatureId(p3);
			ActivityStarter v23 = v22.setUserId(v9);
			Bundle v24 = v5.toBundle();
			if (p1 == 0) {
				SafeActivityOptions v27 = new SafeActivityOptions(v28);
				ActivityOptions v28 = ActivityOptions.fromBundle(p1);
				SafeActivityOptions v26 = ;
				ActivityStarter$Request.activityOptions = v26;
				ActivityStarter v30 = ActivityStarter;
				ActivityStarter v25 = v30;
				int v31 = Binder.getCallingUid();
				ActivityStarter v32 = v25.setRealCallingUid(v31);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v39 = ActivityRecord$Token.mActivityRef.get();
						if (v39 == 0) {
							Task v40 = v39.getRootTask();
							if (v40 != 0) {
								ActivityRecord v38 = ;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v41 = this.mActivityMetricsLogger;
									if ( != 0) {
										ActivityMetricsLogger$LaunchingState v50 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v50, v43);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v43);
										ActivityMetricsLogger$LaunchingState v42 = v50;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v57 = Binder.getCallingPid();
												this.realCallingPid = v57;
												if (this.realCallingUid != -1) {
													int v58 = Binder.getCallingUid();
													this.realCallingUid = v58;
													if (this.callingUid < 0) {
														this.callingPid = -1;
														if (this.caller == 0) {
															Intent v59 = new Intent(this.intent);
															this.ephemeralIntent = v59;
															Intent v61 = new Intent(this.intent);
															this.intent = v61;
															ComponentName v63 = v61.getComponent();
															if (v63 == 0) {
																int v64 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																ResolveInfo v65 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v64);
																this.resolveInfo = v65;
																if (v65 != 0) {
																	UserInfo v66 = this.mSupervisor.getUserInfo(this.userId);
																	if (v66 == 0) {
																		boolean v67 = v66.isManagedProfile();
																		if (v67 == 0) {
																			ActivityInfo v68 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																			this.activityInfo = v68;
																			if (v68 == 0) {
																				if (ActivityStarter$Request.intent == 0) {
																					this.sThreadPriorityBooster.boost();
																					if (ActivityStarter$Request.globalConfig == 0) {
																						int v72 = RootWindowContainer.getChildCount();
																						if ( < 0) {
																							WindowContainer v73 = RootWindowContainer.getChildAt();
																							Task v74 = v73.getFocusedRootTask();
																							if (v74 == 0) {
																								if ( < 0) {
																									WindowContainer v75 = RootWindowContainer.getChildAt();
																									Task v76 = v75.getFocusedRootTask();
																									if (v76 == 0) {
																										Task v71 = v76;
																										if (v71 == 0) {
																											if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																												long v77 = Binder.clearCallingIdentity();
																												int v78 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																												if (v78 == 0) {
																													this.sThreadPriorityBooster.reset();
																													this.mController.onExecutionComplete(ActivityStarter);
																													int v33 = v78;
																													Binder.restoreCallingIdentity(v11);
																													return v33;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int startActivityFromGameSession(IApplicationThread p1, String p2, String p3, int p4, int p5, Intent p6, int p7, int p8){
	if (v1 != 0) {
		if (v4 == 0) {
			ActivityOptions v6 = new ActivityOptions();
			ActivityOptions v5 = v6;
			this.mLaunchTaskId = p7;
			int v10 = this.mAmInternal.handleIncomingUser(p4, p5, p8, 0, 0, "startActivityFromGameSession", 0);
			int v9 = v10;
			long v11 = Binder.clearCallingIdentity();
			ActivityStartController v12 = this.mActivityStartController;
			ActivityStarter v14 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p1;
			ActivityStarter v15 = ActivityStarter;
			ActivityStarter$Request.reason = p2;
			ActivityStarter v16 = ActivityStarter;
			ActivityStarter v13 = v16;
			ActivityStarter v17 = v13.setCaller(p1);
			ActivityStarter v18 = v17.setCallingUid(p5);
			ActivityStarter v19 = v18.setCallingPid(p4);
			String v20 = p6.getPackage();
			ActivityStarter v21 = v19.setCallingPackage(v20);
			ActivityStarter v22 = v21.setCallingFeatureId(p3);
			ActivityStarter v23 = v22.setUserId(v9);
			Bundle v24 = v5.toBundle();
			if (p1 == 0) {
				SafeActivityOptions v27 = new SafeActivityOptions(v28);
				ActivityOptions v28 = ActivityOptions.fromBundle(p1);
				SafeActivityOptions v26 = ;
				ActivityStarter$Request.activityOptions = v26;
				ActivityStarter v30 = ActivityStarter;
				ActivityStarter v25 = v30;
				int v31 = Binder.getCallingUid();
				ActivityStarter v32 = v25.setRealCallingUid(v31);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v39 = ActivityRecord$Token.mActivityRef.get();
						if (v39 == 0) {
							Task v40 = v39.getRootTask();
							if (v40 != 0) {
								ActivityRecord v38 = ;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v41 = this.mActivityMetricsLogger;
									if ( != 0) {
										ActivityMetricsLogger$LaunchingState v50 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v50, v43);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v43);
										ActivityMetricsLogger$LaunchingState v42 = v50;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v57 = Binder.getCallingPid();
												this.realCallingPid = v57;
												if (this.realCallingUid != -1) {
													int v58 = Binder.getCallingUid();
													this.realCallingUid = v58;
													if (this.callingUid < 0) {
														if (this.caller != 0) {
															this.callingPid = this.realCallingPid;
															this.callingUid = this.realCallingUid;
															if (this.caller == 0) {
																Intent v59 = new Intent(this.intent);
																this.ephemeralIntent = v59;
																Intent v61 = new Intent(this.intent);
																this.intent = v61;
																ComponentName v63 = v61.getComponent();
																if (v63 == 0) {
																	int v64 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																	ResolveInfo v65 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v64);
																	this.resolveInfo = v65;
																	if (v65 != 0) {
																		ActivityInfo v66 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																		this.activityInfo = v66;
																		if (v66 == 0) {
																			if (ActivityStarter$Request.intent == 0) {
																				this.sThreadPriorityBooster.boost();
																				if (ActivityStarter$Request.globalConfig == 0) {
																					int v70 = RootWindowContainer.getChildCount();
																					if ( < 0) {
																						WindowContainer v71 = RootWindowContainer.getChildAt();
																						Task v72 = v71.getFocusedRootTask();
																						if (v72 == 0) {
																							if ( < 0) {
																								WindowContainer v73 = RootWindowContainer.getChildAt();
																								Task v74 = v73.getFocusedRootTask();
																								if (v74 == 0) {
																									Task v69 = v74;
																									if (v69 == 0) {
																										if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																											long v75 = Binder.clearCallingIdentity();
																											int v76 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																											if (v76 == 0) {
																												this.sThreadPriorityBooster.reset();
																												this.mController.onExecutionComplete(ActivityStarter);
																												int v33 = v76;
																												Binder.restoreCallingIdentity(v11);
																												return v33;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v10 = this.mAmInternal.handleIncomingUser(p4, p5, p8, 0, 0, "startActivityFromGameSession", 0);\nlong v11 = Binder.clearCallingIdentity();\nActivityStarter v14 = this.mFactory.obtain();\nActivityStarter v15 = v14.setIntent(p6);\nActivityStarter v16 = v15.setReason("startActivityFromGameSession");\nActivityStarter$Request.caller = p1;\nActivityStarter v17 = ActivityStarter;\nActivityStarter$Request.callingUid = p5;\nActivityStarter v18 = ActivityStarter;\nActivityStarter$Request.callingPid = p4;\nString v20 = p6.getPackage();\nActivityStarter$Request.callingPackage = v20;\nActivityStarter v21 = ActivityStarter;\nActivityStarter$Request.callingFeatureId = p3;\nActivityStarter v22 = ActivityStarter;\nActivityStarter$Request.userId = v9;\nBundle v24 = v5.toBundle();\nSafeActivityOptions v26 = SafeActivityOptions.fromBundle(v24);\nActivityStarter v27 = ActivityStarter.setActivityOptions(v26);\nint v28 = Binder.getCallingUid();\nActivityStarter$Request.realCallingUid = v28;\nreturn v30;', 'p0.assertPackageMatchesCallingUid(p2);\nActivityOptions v3 = ActivityOptions.makeBasic();\nv3.setLaunchTaskId(p7);\nint v5 = p0.handleIncomingUser(p4, p5, p8, "startActivityFromGameSession");\nlong v6 = Binder.clearCallingIdentity();\nActivityStartController v7 = p0.getActivityStartController();\nActivityStarter v8 = v7.obtainStarter(p6, "startActivityFromGameSession");\nActivityStarter v9 = v8.setCaller(p1);\nActivityStarter v10 = v9.setCallingUid(p5);\nActivityStarter v11 = v10.setCallingPid(p4);\nString v12 = p6.getPackage();\nActivityStarter v13 = v11.setCallingPackage(v12);\nActivityStarter v14 = v13.setCallingFeatureId(p3);\nActivityStarter v15 = v14.setUserId(v5);\nBundle v16 = v3.toBundle();\nActivityStarter v17 = v15.setActivityOptions(v16);\nint v18 = Binder.getCallingUid();\nActivityStarter v19 = v17.setRealCallingUid(v18);\nint v20 = v19.execute();', 'this.mLaunchTaskId = p7;\nint v10 = this.mAmInternal.handleIncomingUser(p4, p5, p8, 0, 0, "startActivityFromGameSession", 0);\nlong v11 = Binder.clearCallingIdentity();\nActivityStarter v12 = this.mActivityStartController;\nActivityStarter v14 = this.mFactory.obtain();']

The method startActivityFromGameSession has the following similar APIs:

- API Name: startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I with Similarity Score: 0.9073653221130371
  - Access Control Level: SYS_OR_SIG and the following code:
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p12, 0, 0, "startActivityWithConfig", 0);
ActivityStarter v13 = this.mFactory.obtain();
ActivityStarter$Request.intent = p1;
ActivityStarter v16 = v12.setCaller(p1);
ActivityStarter v17 = v16.setCallingPackage(p2);
ActivityStarter v18 = v17.setCallingFeatureId(p3);
ActivityStarter v19 = v18.setResolvedType(p5);
ActivityStarter v20 = v19.setResultTo(p6);
ActivityStarter v21 = v20.setResultWho(p7);
ActivityStarter v22 = v21.setRequestCode(p8);
ActivityStarter v23 = v22.setStartFlags(p9);
ActivityStarter v24 = v23.setGlobalConfiguration(p10);

- API Name: startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I with Similarity Score: 0.8924335241317749
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
ActivityStarter v8 = this.mFactory.obtain();
ActivityStarter$Request.intent = p1;
ActivityStarter v11 = v7.setCallingUid(p4);
ActivityStarter v12 = v11.setCallingPackage(p1);
ActivityStarter v13 = v12.setResolvedType(p6);
SafeActivityOptions v16 = new SafeActivityOptions(v18);
ActivityStarter$Request.activityOptions = v16;
return v23;

