The method setFocusedRootTask has the following code snippet:

This is path 1 for the API with depth 2:
public void setFocusedRootTask(int p1){
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					long v18 = Binder.clearCallingIdentity();
					int v24 = this.mChildren.size();
					int v23 = v24;
					if ( < 0) {
						Object v26 = this.mChildren.get();
						WindowContainer v25 = v26;
						DisplayContent$$ExternalSyntheticLambda6 v28 = new DisplayContent$$ExternalSyntheticLambda6(p1);
						Task v30 = DisplayContent.getRootTask(v28);
						Task v27 = v30;
						if (v27 == 0) {
							if ( < 0) {
								Object v32 = this.mChildren.get();
								WindowContainer v31 = v32;
								DisplayContent$$ExternalSyntheticLambda6 v34 = new DisplayContent$$ExternalSyntheticLambda6(p1);
								Task v36 = DisplayContent.getRootTask(v34);
								Task v33 = v36;
								if (v33 == 0) {
									Task v22 = v33;
									if (v22 != 0) {
										ActivityRecord v39 = TaskFragment.topRunningActivity(0, 1);
										ActivityRecord v38 = v39;
										ActivityRecord v37 = v38;
										if (v37 == 0) {
											boolean v42 = ActivityRecord.isFocusable();
											if (v42 == 0) {
												boolean v43 = ActivityRecord.canReceiveKeys();
												if (v43 != 0) {
													boolean v44 = ActivityRecord.isAlwaysFocusable();
													if (v44 == 0) {
														boolean v41 = ;
														if (v41 != 0) {
															if (this.task == 0) {
																Task v46 = this.task.getRootTask();
																Task v45 = ;
																if (v45 != 0) {
																	if (DisplayContent.mFocusedApp == 0) {
																		if (this.task != this.task) {
																			ActivityRecord$$ExternalSyntheticLambda4 v47 = new ActivityRecord$$ExternalSyntheticLambda4();
																			Task v49 = WindowContainer.mDisplayContent.getTask(v47, 1);
																			if (this.task != v49) {
																				if (DisplayContent.mFocusedApp != ActivityRecord) {
																					if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
																						String v50 = String.valueOf(ActivityRecord);
																						Object v51 = new Object(1);
																						ProtoLogImpl v53 = ProtoLogImpl.getSingleInstance();
																						v53.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v51);
																						if (p0 == 0) {
																							DisplayContent v56 = p0.getDisplayContent();
																							if (v56 == DisplayContent) {
																								TaskDisplayArea v57 = p0.getDisplayArea();
																								DisplayContent.onLastFocusedTaskDisplayAreaChanged(v57);
																								if (this.mFocusedApp != p0) {
																									if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																										String v59 = String.valueOf(p0);
																										int v60 = DisplayContent.getDisplayId();
																										String v61 = Debug.getCallers(4);
																										String v62 = String.valueOf(v61);
																										Object v63 = new Object(3);
																										Long v64 = Long.valueOf(v60);
																										ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v63);
																										if (this.mFocusedApp == 0) {
																											Task v66 = this.mFocusedApp.getTask();
																											if (p0 == 0) {
																												Task v67 = p0.getTask();
																												this.mFocusedApp = p0;
																												if ( == ) {
																													if ( == 0) {
																														.onAppFocusChanged(0);
																														if ( == 0) {
																															.onAppFocusChanged(1);
																															InputMonitor v70 = DisplayContent.getInputMonitor();
																															v70.setFocusedAppLw(p0);
																															DisplayContent.updateTouchExcludeRegion();
																															boolean v55 = 1;
																															Trace.traceBegin(32, "wmUpdateFocus");
																															boolean v75 = this.mRoot.updateFocusedWindowLocked(0, 1);
																															Trace.traceEnd(32);
																															boolean v73 = v75;
																															boolean v77 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
																															boolean v40 = (v77 ^ 1);
																															if (v40 == 0) {
																																boolean v80 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0, 0);
																																boolean v79 = v80;
																																boolean v78 = v79;
																																Binder.restoreCallingIdentity(v18);
																																return;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setFocusedRootTask(int p1){
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					long v18 = Binder.clearCallingIdentity();
					WindowManagerThreadPriorityBooster.boost();
					int v25 = this.mChildren.size();
					int v24 = v25;
					if ( < 0) {
						Object v27 = this.mChildren.get();
						WindowContainer v26 = v27;
						DisplayContent$$ExternalSyntheticLambda6 v29 = new DisplayContent$$ExternalSyntheticLambda6(p1);
						Task v31 = DisplayContent.getRootTask(v29);
						Task v28 = v31;
						if (v28 == 0) {
							if ( < 0) {
								Object v33 = this.mChildren.get();
								WindowContainer v32 = v33;
								DisplayContent$$ExternalSyntheticLambda6 v35 = new DisplayContent$$ExternalSyntheticLambda6(p1);
								Task v37 = DisplayContent.getRootTask(v35);
								Task v34 = v37;
								if (v34 == 0) {
									Task v23 = v34;
									if (v23 != 0) {
										ActivityRecord v40 = TaskFragment.topRunningActivity(0, 1);
										ActivityRecord v39 = v40;
										ActivityRecord v38 = v39;
										if (v38 == 0) {
											boolean v43 = ActivityRecord.isFocusable();
											if (v43 == 0) {
												boolean v44 = ActivityRecord.canReceiveKeys();
												if (v44 != 0) {
													boolean v45 = ActivityRecord.isAlwaysFocusable();
													if (v45 == 0) {
														boolean v42 = ;
														if (v42 != 0) {
															if (this.task == 0) {
																Task v47 = this.task.getRootTask();
																Task v46 = ;
																if (v46 != 0) {
																	if (DisplayContent.mFocusedApp == 0) {
																		if (this.task != this.task) {
																			ActivityRecord$$ExternalSyntheticLambda4 v48 = new ActivityRecord$$ExternalSyntheticLambda4();
																			Task v50 = WindowContainer.mDisplayContent.getTask(v48, 1);
																			if (this.task != v50) {
																				if (DisplayContent.mFocusedApp != ActivityRecord) {
																					if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
																						String v51 = String.valueOf(ActivityRecord);
																						Object v52 = new Object(1);
																						ProtoLogImpl v54 = ProtoLogImpl.getSingleInstance();
																						v54.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v52);
																						if (p0 == 0) {
																							DisplayContent v57 = p0.getDisplayContent();
																							if (v57 == DisplayContent) {
																								TaskDisplayArea v58 = p0.getDisplayArea();
																								DisplayContent.onLastFocusedTaskDisplayAreaChanged(v58);
																								if (this.mFocusedApp != p0) {
																									if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																										String v60 = String.valueOf(p0);
																										int v61 = DisplayContent.getDisplayId();
																										String v62 = Debug.getCallers(4);
																										String v63 = String.valueOf(v62);
																										Object v64 = new Object(3);
																										Long v65 = Long.valueOf(v61);
																										ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v64);
																										if (this.mFocusedApp == 0) {
																											Task v67 = this.mFocusedApp.getTask();
																											if (p0 == 0) {
																												Task v68 = p0.getTask();
																												this.mFocusedApp = p0;
																												if ( == ) {
																													if ( == 0) {
																														.onAppFocusChanged(0);
																														if ( == 0) {
																															.onAppFocusChanged(1);
																															InputMonitor v71 = DisplayContent.getInputMonitor();
																															v71.setFocusedAppLw(p0);
																															DisplayContent.updateTouchExcludeRegion();
																															boolean v56 = 1;
																															Trace.traceBegin(32, "wmUpdateFocus");
																															boolean v76 = this.mRoot.updateFocusedWindowLocked(0, 1);
																															Trace.traceEnd(32);
																															boolean v74 = v76;
																															boolean v78 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
																															boolean v41 = (v78 ^ 1);
																															if (v41 == 0) {
																																boolean v81 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0, 0);
																																boolean v80 = v81;
																																boolean v79 = v80;
																																Binder.restoreCallingIdentity(v18);
																																return;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setFocusedRootTask(int p1){
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					long v18 = Binder.clearCallingIdentity();
					int v24 = this.mChildren.size();
					int v23 = v24;
					if ( < 0) {
						Object v26 = this.mChildren.get();
						WindowContainer v25 = v26;
						DisplayContent$$ExternalSyntheticLambda6 v28 = new DisplayContent$$ExternalSyntheticLambda6(p1);
						Task v30 = DisplayContent.getRootTask(v28);
						Task v27 = v30;
						if (v27 == 0) {
							if ( < 0) {
								Object v32 = this.mChildren.get();
								WindowContainer v31 = v32;
								DisplayContent$$ExternalSyntheticLambda6 v34 = new DisplayContent$$ExternalSyntheticLambda6(p1);
								Task v36 = DisplayContent.getRootTask(v34);
								Task v33 = v36;
								if (v33 == 0) {
									Task v22 = v33;
									if (v22 != 0) {
										ActivityRecord v39 = TaskFragment.topRunningActivity(0, 1);
										ActivityRecord v38 = v39;
										ActivityRecord v37 = v38;
										if (v37 == 0) {
											boolean v42 = ActivityRecord.isFocusable();
											if (v42 == 0) {
												boolean v43 = ActivityRecord.canReceiveKeys();
												if (v43 != 0) {
													boolean v44 = ActivityRecord.isAlwaysFocusable();
													if (v44 == 0) {
														boolean v41 = ;
														if (v41 != 0) {
															if (this.task == 0) {
																Task v46 = this.task.getRootTask();
																Task v45 = ;
																if (v45 != 0) {
																	if (DisplayContent.mFocusedApp == 0) {
																		if (this.task != this.task) {
																			ActivityRecord$$ExternalSyntheticLambda4 v47 = new ActivityRecord$$ExternalSyntheticLambda4();
																			Task v49 = WindowContainer.mDisplayContent.getTask(v47, 1);
																			if (this.task != v49) {
																				if (DisplayContent.mFocusedApp != ActivityRecord) {
																					if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
																						String v50 = String.valueOf(ActivityRecord);
																						Object v51 = new Object(1);
																						ProtoLogImpl v53 = ProtoLogImpl.getSingleInstance();
																						v53.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v51);
																						if (p0 == 0) {
																							DisplayContent v56 = p0.getDisplayContent();
																							if (v56 == DisplayContent) {
																								TaskDisplayArea v57 = p0.getDisplayArea();
																								DisplayContent.onLastFocusedTaskDisplayAreaChanged(v57);
																								if (this.mFocusedApp != p0) {
																									if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																										String v59 = String.valueOf(p0);
																										int v60 = DisplayContent.getDisplayId();
																										String v61 = Debug.getCallers(4);
																										String v62 = String.valueOf(v61);
																										Object v63 = new Object(3);
																										Long v64 = Long.valueOf(v60);
																										ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v63);
																										if (this.mFocusedApp == 0) {
																											Task v66 = this.mFocusedApp.getTask();
																											if (p0 == 0) {
																												Task v67 = p0.getTask();
																												this.mFocusedApp = p0;
																												if ( == ) {
																													if ( == 0) {
																														.onAppFocusChanged(0);
																														if ( == 0) {
																															.onAppFocusChanged(1);
																															InputMonitor v70 = DisplayContent.getInputMonitor();
																															v70.setFocusedAppLw(p0);
																															DisplayContent.updateTouchExcludeRegion();
																															boolean v55 = 1;
																															Trace.traceBegin(32, "wmUpdateFocus");
																															boolean v75 = this.mRoot.updateFocusedWindowLocked(0, 1);
																															Trace.traceEnd(32);
																															boolean v73 = v75;
																															boolean v77 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
																															boolean v40 = (v77 ^ 1);
																															if (v40 == 0) {
																																boolean v80 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0, 0);
																																boolean v79 = v80;
																																boolean v78 = v79;
																																WindowManagerThreadPriorityBooster.reset();
																																Binder.restoreCallingIdentity(v18);
																																return;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v2 = new Object(1);\nLong v3 = Long.valueOf(p1);\nProtoLogImpl v5 = ProtoLogImpl.getSingleInstance();\nv5.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, 255339989, 1, 0, v2);', 'Task v7 = this.mRootWindowContainer.getRootTask(p1);']

The method setFocusedRootTask has the following similar APIs:

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; with Similarity Score: 0.9205875396728516
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);

- API Name: setTaskResizeable(II)V with Similarity Score: 0.9000228643417358
  - Access Control Level: SYS_OR_SIG and the following code:
Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);

