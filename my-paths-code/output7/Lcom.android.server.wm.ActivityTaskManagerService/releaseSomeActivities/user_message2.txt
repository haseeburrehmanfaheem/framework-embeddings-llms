The method releaseSomeActivities has the following code snippet:

This is path 1 for the API with depth 2:
public void releaseSomeActivities(IApplicationThread p1){
	long v4 = Binder.clearCallingIdentity();
	if (p1 != 0) {
		IBinder v6 = p1.asBinder();
		ArrayMap v7 = this.mMap;
		int v8 = v7.size();
		if ( < 0) {
			Object v9 = v7.valueAt();
			int v10 = v9.size();
			if ( < 0) {
				Object v11 = v9.valueAt();
				if (this.mThread == 0) {
					boolean v12 = ;
					if (v12 == 0) {
						IApplicationThread v13 = this.mThread;
						IBinder v14 = v13.asBinder();
						if (v14 != v6) {
							if ( < 0) {
								Object v15 = v9.valueAt();
								if (this.mThread == 0) {
									boolean v16 = ;
									if (v16 == 0) {
										IApplicationThread v17 = this.mThread;
										IBinder v18 = v17.asBinder();
										if (v18 != v6) {
											WindowProcessController v5 = v15;
											int v20 = this.mActivities.size();
											if ( >= v20) {
												Object v21 = this.mActivities.get();
												if (ActivityRecord.finishing != 0) {
													if (ActivityRecord$State.DESTROYING == this.mState) {
														if (ActivityRecord$State.DESTROYED != this.mState) {
															boolean v22 = ;
															if (v22 == 0) {
																if (ActivityRecord.mVisibleRequested != 0) {
																	if (ActivityRecord.stopped == 0) {
																		boolean v23 = this.mHaveState;
																		if (v23 == 0) {
																			if (this.finishing != 0) {
																				boolean v25 = ActivityRecord.hasProcess();
																				if (v25 != 0) {
																					boolean v24 = 0;
																					if (v24 == 0) {
																						if (ActivityRecord$State.STARTED == this.mState) {
																							if (ActivityRecord$State.RESUMED == this.mState) {
																								if (ActivityRecord$State.PAUSING == this.mState) {
																									if (ActivityRecord$State.PAUSED == this.mState) {
																										if (ActivityRecord$State.STOPPING != this.mState) {
																											boolean v26 = ;
																											if (v26 == 0) {
																												int v27 = this.mActivities.size();
																												if ( >= v27) {
																													Object v28 = this.mActivities.get();
																													if (ActivityRecord.finishing != 0) {
																														if (ActivityRecord$State.DESTROYING == this.mState) {
																															if (ActivityRecord$State.DESTROYED != this.mState) {
																																boolean v29 = ;
																																if (v29 == 0) {
																																	Binder.restoreCallingIdentity(v4);
																																	return;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void releaseSomeActivities(IApplicationThread p1){
	WindowManagerThreadPriorityBooster.boost();
	long v5 = Binder.clearCallingIdentity();
	if (p1 != 0) {
		IBinder v7 = p1.asBinder();
		ArrayMap v8 = this.mMap;
		int v9 = v8.size();
		if ( < 0) {
			Object v10 = v8.valueAt();
			int v11 = v10.size();
			if ( < 0) {
				Object v12 = v10.valueAt();
				if (this.mThread == 0) {
					boolean v13 = ;
					if (v13 == 0) {
						IApplicationThread v14 = this.mThread;
						IBinder v15 = v14.asBinder();
						if (v15 != v7) {
							if ( < 0) {
								Object v16 = v10.valueAt();
								if (this.mThread == 0) {
									boolean v17 = ;
									if (v17 == 0) {
										IApplicationThread v18 = this.mThread;
										IBinder v19 = v18.asBinder();
										if (v19 != v7) {
											WindowProcessController v6 = v16;
											int v21 = this.mActivities.size();
											if ( >= v21) {
												Object v22 = this.mActivities.get();
												if (ActivityRecord.finishing != 0) {
													if (ActivityRecord$State.DESTROYING == this.mState) {
														if (ActivityRecord$State.DESTROYED != this.mState) {
															boolean v23 = ;
															if (v23 == 0) {
																if (ActivityRecord.mVisibleRequested != 0) {
																	if (ActivityRecord.stopped == 0) {
																		boolean v24 = this.mHaveState;
																		if (v24 == 0) {
																			if (this.finishing != 0) {
																				boolean v26 = ActivityRecord.hasProcess();
																				if (v26 != 0) {
																					boolean v25 = 0;
																					if (v25 == 0) {
																						if (ActivityRecord$State.STARTED == this.mState) {
																							if (ActivityRecord$State.RESUMED == this.mState) {
																								if (ActivityRecord$State.PAUSING == this.mState) {
																									if (ActivityRecord$State.PAUSED == this.mState) {
																										if (ActivityRecord$State.STOPPING != this.mState) {
																											boolean v27 = ;
																											if (v27 == 0) {
																												int v28 = this.mActivities.size();
																												if ( >= v28) {
																													Object v29 = this.mActivities.get();
																													if (ActivityRecord.finishing != 0) {
																														if (ActivityRecord$State.DESTROYING == this.mState) {
																															if (ActivityRecord$State.DESTROYED != this.mState) {
																																boolean v30 = ;
																																if (v30 == 0) {
																																	Binder.restoreCallingIdentity(v5);
																																	return;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void releaseSomeActivities(IApplicationThread p1){
	long v4 = Binder.clearCallingIdentity();
	if (p1 != 0) {
		IBinder v6 = p1.asBinder();
		ArrayMap v7 = this.mMap;
		int v8 = v7.size();
		if ( < 0) {
			Object v9 = v7.valueAt();
			int v10 = v9.size();
			if ( < 0) {
				Object v11 = v9.valueAt();
				if (this.mThread == 0) {
					boolean v12 = ;
					if (v12 == 0) {
						IApplicationThread v13 = this.mThread;
						IBinder v14 = v13.asBinder();
						if (v14 != v6) {
							if ( < 0) {
								Object v15 = v9.valueAt();
								if (this.mThread == 0) {
									boolean v16 = ;
									if (v16 == 0) {
										IApplicationThread v17 = this.mThread;
										IBinder v18 = v17.asBinder();
										if (v18 != v6) {
											WindowProcessController v5 = v15;
											int v20 = this.mActivities.size();
											if ( >= v20) {
												Object v21 = this.mActivities.get();
												if (ActivityRecord.finishing != 0) {
													if (ActivityRecord$State.DESTROYING == this.mState) {
														if (ActivityRecord$State.DESTROYED != this.mState) {
															boolean v22 = ;
															if (v22 == 0) {
																if (ActivityRecord.mVisibleRequested != 0) {
																	if (ActivityRecord.stopped == 0) {
																		boolean v23 = this.mHaveState;
																		if (v23 == 0) {
																			if (this.finishing != 0) {
																				boolean v25 = ActivityRecord.hasProcess();
																				if (v25 != 0) {
																					boolean v24 = 0;
																					if (v24 == 0) {
																						if (ActivityRecord$State.STARTED == this.mState) {
																							if (ActivityRecord$State.RESUMED == this.mState) {
																								if (ActivityRecord$State.PAUSING == this.mState) {
																									if (ActivityRecord$State.PAUSED == this.mState) {
																										if (ActivityRecord$State.STOPPING != this.mState) {
																											boolean v26 = ;
																											if (v26 == 0) {
																												int v27 = this.mActivities.size();
																												if ( >= v27) {
																													Object v28 = this.mActivities.get();
																													if (ActivityRecord.finishing != 0) {
																														if (ActivityRecord$State.DESTROYING == this.mState) {
																															if (ActivityRecord$State.DESTROYED != this.mState) {
																																boolean v29 = ;
																																if (v29 == 0) {
																																	Binder.restoreCallingIdentity(v4);
																																	WindowManagerThreadPriorityBooster.reset();
																																	return;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v4 = Binder.clearCallingIdentity();\nBinder.restoreCallingIdentity(v4);', 'this.sThreadPriorityBooster.boost();\nthis.sThreadPriorityBooster.reset();', 'WindowProcessController v3 = p0.getProcessController(p1);\nv3.releaseSomeActivities("low-mem");']

The method releaseSomeActivities has the following similar APIs:

- API Name: setWifiMeteredOverride(Ljava/lang/String;I)V with Similarity Score: 0.995261549949646
  - Access Control Level: SYS_OR_SIG and the following code:
long v2 = Binder.clearCallingIdentity();
Binder.restoreCallingIdentity(v2);

- API Name: releaseSession(Landroid/os/IBinder;I)V with Similarity Score: 0.9950048327445984
  - Access Control Level: SYS_OR_SIG and the following code:
long v6 = Binder.clearCallingIdentity();
Binder.restoreCallingIdentity(v6);

