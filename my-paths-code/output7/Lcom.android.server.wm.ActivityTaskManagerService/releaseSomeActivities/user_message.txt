This is path 1 for the API with depth 2:
public void releaseSomeActivities(IApplicationThread p1){
	long v4 = Binder.clearCallingIdentity();
	if (p1 != 0) {
		IBinder v6 = p1.asBinder();
		ArrayMap v7 = this.mMap;
		int v8 = v7.size();
		if ( < 0) {
			Object v9 = v7.valueAt();
			int v10 = v9.size();
			if ( < 0) {
				Object v11 = v9.valueAt();
				if (this.mThread == 0) {
					boolean v12 = ;
					if (v12 == 0) {
						IApplicationThread v13 = this.mThread;
						IBinder v14 = v13.asBinder();
						if (v14 != v6) {
							if ( < 0) {
								Object v15 = v9.valueAt();
								if (this.mThread == 0) {
									boolean v16 = ;
									if (v16 == 0) {
										IApplicationThread v17 = this.mThread;
										IBinder v18 = v17.asBinder();
										if (v18 != v6) {
											WindowProcessController v5 = v15;
											int v20 = this.mActivities.size();
											if ( >= v20) {
												Object v21 = this.mActivities.get();
												if (ActivityRecord.finishing != 0) {
													if (ActivityRecord$State.DESTROYING == this.mState) {
														if (ActivityRecord$State.DESTROYED != this.mState) {
															boolean v22 = ;
															if (v22 == 0) {
																if (ActivityRecord.mVisibleRequested != 0) {
																	if (ActivityRecord.stopped == 0) {
																		boolean v23 = this.mHaveState;
																		if (v23 == 0) {
																			if (this.finishing != 0) {
																				boolean v25 = ActivityRecord.hasProcess();
																				if (v25 != 0) {
																					boolean v24 = 0;
																					if (v24 == 0) {
																						if (ActivityRecord$State.STARTED == this.mState) {
																							if (ActivityRecord$State.RESUMED == this.mState) {
																								if (ActivityRecord$State.PAUSING == this.mState) {
																									if (ActivityRecord$State.PAUSED == this.mState) {
																										if (ActivityRecord$State.STOPPING != this.mState) {
																											boolean v26 = ;
																											if (v26 == 0) {
																												int v27 = this.mActivities.size();
																												if ( >= v27) {
																													Object v28 = this.mActivities.get();
																													if (ActivityRecord.finishing != 0) {
																														if (ActivityRecord$State.DESTROYING == this.mState) {
																															if (ActivityRecord$State.DESTROYED != this.mState) {
																																boolean v29 = ;
																																if (v29 == 0) {
																																	Binder.restoreCallingIdentity(v4);
																																	return;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void releaseSomeActivities(IApplicationThread p1){
	this.sThreadPriorityBooster.boost();
	long v3 = Binder.clearCallingIdentity();
	if (p1 != 0) {
		IBinder v5 = p1.asBinder();
		ArrayMap v6 = this.mProcessNames.getMap();
		int v7 = v6.size();
		if ( < 0) {
			Object v8 = v6.valueAt();
			int v9 = v8.size();
			if ( < 0) {
				Object v10 = v8.valueAt();
				boolean v11 = v10.hasThread();
				if (v11 == 0) {
					IApplicationThread v12 = v10.getThread();
					IBinder v13 = v12.asBinder();
					if (v13 != v5) {
						if ( < 0) {
							Object v14 = v8.valueAt();
							boolean v15 = v14.hasThread();
							if (v15 == 0) {
								IApplicationThread v16 = v14.getThread();
								IBinder v17 = v16.asBinder();
								if (v17 != v5) {
									WindowProcessController v4 = v14;
									int v19 = this.mActivities.size();
									if ( >= v19) {
										Object v20 = this.mActivities.get();
										if (ActivityRecord.finishing != 0) {
											boolean v21 = v20.isState(ActivityRecord$State.DESTROYING, ActivityRecord$State.DESTROYED);
											if (v21 == 0) {
												if (ActivityRecord.mVisibleRequested != 0) {
													if (ActivityRecord.stopped == 0) {
														boolean v22 = v20.hasSavedState();
														if (v22 == 0) {
															boolean v23 = v20.isDestroyable();
															if (v23 == 0) {
																boolean v24 = v20.isState(ActivityRecord$State.STARTED, ActivityRecord$State.RESUMED, ActivityRecord$State.PAUSING, ActivityRecord$State.PAUSED, ActivityRecord$State.STOPPING);
																if (v24 == 0) {
																	WindowContainer v25 = v20.getParent();
																	if (v25 == 0) {
																		if ( != 0) {
																			ArrayList v26 = new ArrayList();
																			boolean v28 = .add(v20);
																			int v29 = this.mActivities.size();
																			if ( >= v29) {
																				Object v30 = this.mActivities.get();
																				if (ActivityRecord.finishing != 0) {
																					Binder.restoreCallingIdentity(v3);
																					this.sThreadPriorityBooster.reset();
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void releaseSomeActivities(IApplicationThread p1){
	WindowManagerService.boostPriorityForLockedSection();
	long v2 = Binder.clearCallingIdentity();
	WindowProcessController v3 = p0.getProcessController(p1);
	v3.releaseSomeActivities("low-mem");
	Binder.restoreCallingIdentity(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
