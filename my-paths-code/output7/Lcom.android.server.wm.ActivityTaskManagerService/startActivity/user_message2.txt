The method startActivity has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivity(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11){
	int v1 = UserHandle.getCallingUserId();
	SafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);
	if (v4 == 0) {
		ActivityOptions v5 = v4.getOriginalOptions();
		boolean v6 = v5.getTransientLaunch();
		if (v6 == 0) {
			int v7 = Binder.getCallingUid();
			boolean v8 = ActivityTaskManagerService.isCallerRecents(v7);
			if (v8 == 0) {
				long v9 = Binder.clearCallingIdentity();
				WindowManagerService.boostPriorityForLockedSection();
				Trace.traceBegin(32, "startExistingRecents");
				ActivityOptions v12 = v4.getOriginalOptions();
				boolean v13 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v12);
				if (v13 == 0) {
					WindowManagerService.resetPriorityAfterLockedSection();
					Trace.traceEnd(32);
					Binder.restoreCallingIdentity(v9);
					int v3 = 2;
					int v2 = v3;
					return v2;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int startActivity(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11){
	int v1 = UserHandle.getCallingUserId();
	SafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);
	if (v4 == 0) {
		ActivityOptions v5 = v4.getOriginalOptions();
		boolean v6 = v5.getTransientLaunch();
		if (v6 == 0) {
			int v7 = Binder.getCallingUid();
			boolean v8 = ActivityTaskManagerService.isCallerRecents(v7);
			if (v8 == 0) {
				long v9 = Binder.clearCallingIdentity();
				WindowManagerService.boostPriorityForLockedSection();
				Trace.traceBegin(32, "startExistingRecents");
				ActivityOptions v12 = v4.getOriginalOptions();
				boolean v13 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v12);
				if (v13 == 0) {
					WindowManagerService.resetPriorityAfterLockedSection();
					Trace.traceEnd(32);
					Binder.restoreCallingIdentity(v9);
					ActivityTaskManagerService.assertPackageMatchesCallingUid(p2);
					ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityAsUser");
					int v19 = Binder.getCallingUid();
					boolean v20 = Process.isSdkSandboxUid(v19);
					if (v20 == 0) {
						ActivityStartController v21 = ActivityTaskManagerService.getActivityStartController();
						int v22 = Binder.getCallingPid();
						int v23 = Binder.getCallingUid();
						int v24 = v21.checkTargetUser(p12, 1, v22, v23, "startActivityAsUser");
						ActivityStartController v25 = ActivityTaskManagerService.getActivityStartController();
						ActivityStarter v26 = v25.obtainStarter(p4, "startActivityAsUser");
						ActivityStarter v27 = v26.setCaller(p1);
						ActivityStarter v28 = v27.setCallingPackage(p2);
						ActivityStarter v29 = v28.setCallingFeatureId(p3);
						ActivityStarter v30 = v29.setResolvedType(p5);
						ActivityStarter v31 = v30.setResultTo(p6);
						ActivityStarter v32 = v31.setResultWho(p7);
						ActivityStarter v33 = v32.setRequestCode(p8);
						ActivityStarter v34 = v33.setStartFlags(p9);
						ActivityStarter v35 = v34.setProfilerInfo(p10);
						ActivityStarter v36 = v35.setActivityOptions(v4);
						ActivityStarter v37 = v36.setUserId(v24);
						int v38 = v37.execute();
						int v3 = v38;
						int v2 = v3;
						return v2;
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int startActivity(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11){
	int v1 = UserHandle.getCallingUserId();
	SafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);
	if (v4 == 0) {
		ActivityOptions v5 = v4.getOriginalOptions();
		boolean v6 = v5.getTransientLaunch();
		if (v6 == 0) {
			int v7 = Binder.getCallingUid();
			boolean v8 = ActivityTaskManagerService.isCallerRecents(v7);
			if (v8 == 0) {
				ActivityTaskManagerService.assertPackageMatchesCallingUid(p2);
				ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityAsUser");
				int v11 = Binder.getCallingUid();
				boolean v12 = Process.isSdkSandboxUid(v11);
				if (v12 == 0) {
					Object v13 = LocalManagerRegistry.getManager(SdkSandboxManagerLoca.class);
					if (v13 == 0) {
						v13.enforceAllowedToStartActivity(p4);
						ActivityStartController v15 = ActivityTaskManagerService.getActivityStartController();
						int v16 = Binder.getCallingPid();
						int v17 = Binder.getCallingUid();
						int v18 = v15.checkTargetUser(p12, 1, v16, v17, "startActivityAsUser");
						ActivityStartController v19 = ActivityTaskManagerService.getActivityStartController();
						ActivityStarter v20 = v19.obtainStarter(p4, "startActivityAsUser");
						ActivityStarter v21 = v20.setCaller(p1);
						ActivityStarter v22 = v21.setCallingPackage(p2);
						ActivityStarter v23 = v22.setCallingFeatureId(p3);
						ActivityStarter v24 = v23.setResolvedType(p5);
						ActivityStarter v25 = v24.setResultTo(p6);
						ActivityStarter v26 = v25.setResultWho(p7);
						ActivityStarter v27 = v26.setRequestCode(p8);
						ActivityStarter v28 = v27.setStartFlags(p9);
						ActivityStarter v29 = v28.setProfilerInfo(p10);
						ActivityStarter v30 = v29.setActivityOptions(v4);
						ActivityStarter v31 = v30.setUserId(v18);
						int v32 = v31.execute();
						int v3 = v32;
						int v2 = v3;
						return v2;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nSafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);\nif (v4 == 0) { ... }\nboolean v8 = ActivityTaskManagerService.isCallerRecents(v7);\nlong v9 = Binder.clearCallingIdentity();\nActivityOptions v12 = v4.getOriginalOptions();\nboolean v13 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v12);\nreturn v2;', 'int v3 = ActivityTaskManagerService.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, v1, 1);\nreturn v2;', 'int v2 = p0.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, v1);\nreturn v2;']

The method startActivity has the following similar APIs:

- API Name: sendCurrentChannelUri(Landroid/os/IBinder;Landroid/net/Uri;I)V with Similarity Score: 0.8755113482475281
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);

- API Name: startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I with Similarity Score: 0.8594492077827454
  - Access Control Level: SYS_OR_SIG and the following code:
int v7 = Binder.getCallingPid();
int v8 = Binder.getCallingUid();
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
ActivityStartController v11 = this.mActivityStartController;
SafeActivityOptions v13 = new SafeActivityOptions(v14);
int v18 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);

