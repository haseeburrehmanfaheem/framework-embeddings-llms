The method removeTask has the following code snippet:

This is path 1 for the API with depth 2:
public boolean removeTask(int p1){
	long v5 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									int v19 = WindowContainer.mChildren.size();
									if ( < 0) {
										Object v20 = WindowContainer.mChildren.get();
										Task v21 = 0;
										if (v21 == 0) {
											if ( < 0) {
												Object v22 = WindowContainer.mChildren.get();
												Task v23 = 0;
												if (v23 == 0) {
													boolean v18 = 0;
													if (v18 == 0) {
														if (Task.mInRemoveTask == 0) {
															if (this.mTransitionPlayer != 0) {
																boolean v26 = p1.isVisibleRequested();
																if (v26 == 0) {
																	boolean v27 = TransitionController.isCollecting();
																	if (v27 != 0) {
																		Transition v28 = TransitionController.createTransition(2, 0);
																		Task v29 = p1.asTask();
																		Transition v30 = TransitionController.requestStartTransition(v28, v29, 0, 0);
																		TransitionController.collectExistenceChange(p1);
																		Task.mInRemoveTask = 1;
																		Task.clearPinnedTaskIfNeed();
																		Task v34 = Task.getRootTask();
																		if (v34 != 0) {
																			Task$$ExternalSyntheticLambda2 v35 = new Task$$ExternalSyntheticLambda2(Task,0,p4);
																			Task.forAllActivities(v35);
																			if (p3 == 0) {
																				this.mRecentTasks.remove(p1);
																				Intent v40 = p1.getBaseIntent();
																				ComponentName v41 = v40.getComponent();
																				if (v41 != 0) {
																					ActivityTaskSupervisor$$ExternalSyntheticLambda1 v42 = new ActivityTaskSupervisor$$ExternalSyntheticLambda1();
																					Integer v44 = Integer.valueOf(Task.mUserId);
																					Intent v45 = new Intent(v46);
																					Intent v46 = p1.getBaseIntent();
																					Message v48 = PooledLambda.obtainMessage(v42, ActivityTaskManagerService.mAmInternal, v44, v41, v45);
																					boolean v49 = ActivityTaskManagerService.mH.sendMessage(v48);
																					if (p2 != 0) {
																						String v50 = v41.getPackageName();
																						ArrayList v51 = new ArrayList();
																						ArrayMap v53 = ActivityTaskManagerService.mProcessNames.getMap();
																						int v54 = v53.size();
																						if ( >= v54) {
																							Object v55 = v53.valueAt();
																							int v56 = v55.size();
																							if ( >= v56) {
																								Object v57 = v55.valueAt();
																								if (WindowProcessController.mUserId == Task.mUserId) {
																									if (v57 != ActivityTaskManagerService.mHomeProcess) {
																										boolean v58 = WindowProcessController.mPkgList.contains(v50);
																										if (v58 != 0) {
																											boolean v59 = v57.shouldKillProcessForRemovedTask(p1);
																											if (v59 != 0) {
																												LockTaskController v60 = this.mLockTaskController;
																												if (p1 == 0) {
																													boolean v62 = this.mLockTaskModeTasks.isEmpty();
																													if (v62 == 0) {
																														Object v63 = this.mLockTaskModeTasks.get(0);
																														if (p1 != v63) {
																															int v64 = this.mLockTaskModeTasks.size();
																															if ( <= 0) {
																																Object v65 = this.mLockTaskModeTasks.get();
																																LockTaskController.clearLockedTask(v65);
																																if ( <= 0) {
																																	LockTaskController.removeLockedTask(p1);
																																	boolean v68 = this.mLockTaskModeTasks.isEmpty();
																																	if (v68 == 0) {
																																		p1.performClearTaskForReuse(0);
																																		boolean v70 = ActivityTaskSupervisor.mRootWindowContainer.resumeFocusedTasksTopActivities();
																																		TaskChangeNotificationController v71 = this.mTaskChangeNotificationController;
																																		ActivityMetricsLogger v73 = this.mTaskSupervisor.getActivityMetricsLogger();
																																		v73.logWindowState();
																																		this.mHandler.removeMessages(2);
																																		Message v76 = this.mHandler.obtainMessage(2);
																																		TaskChangeNotificationController.forAllLocalListeners(this.mNotifyTaskStackChanged, v76);
																																		boolean v78 = this.mHandler.sendMessageDelayed(v76, 100);
																																		if (Task.isPersistable == 0) {
																																			this.mRecentTasks.notifyTaskPersisterLocked(0, 1);
																																			Task.mInRemoveTask = 0;
																																			Binder.restoreCallingIdentity(v5);
																																			return 1;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean removeTask(int p1){
	WindowManagerThreadPriorityBooster.boost();
	long v6 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
			Integer v12 = Integer.valueOf(p1);
			PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
			Task v14 = RootWindowContainer.getTask(v13);
			v13.recycle();
			if (v14 == 0) {
				if (0 == 0) {
					Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
					if (v16 == 0) {
						Task v17 = v14.getRootTask();
						if (v17 == v16) {
							if (0 == 0) {
								boolean v18 = v14.reparent(v16, 0, , 1, 1, "anyTaskForId");
								Task v8 = v14;
								Task v7 = v8;
								if (v7 != 0) {
									int v20 = WindowContainer.mChildren.size();
									if ( < 0) {
										Object v21 = WindowContainer.mChildren.get();
										Task v22 = 0;
										if (v22 == 0) {
											if ( < 0) {
												Object v23 = WindowContainer.mChildren.get();
												Task v24 = 0;
												if (v24 == 0) {
													boolean v19 = 0;
													if (v19 == 0) {
														if (Task.mInRemoveTask == 0) {
															if (this.mTransitionPlayer != 0) {
																boolean v27 = p1.isVisibleRequested();
																if (v27 == 0) {
																	boolean v28 = TransitionController.isCollecting();
																	if (v28 != 0) {
																		Transition v29 = TransitionController.createTransition(2, 0);
																		Task v30 = p1.asTask();
																		Transition v31 = TransitionController.requestStartTransition(v29, v30, 0, 0);
																		TransitionController.collectExistenceChange(p1);
																		Task.mInRemoveTask = 1;
																		Task.clearPinnedTaskIfNeed();
																		Task v35 = Task.getRootTask();
																		if (v35 != 0) {
																			Task$$ExternalSyntheticLambda2 v36 = new Task$$ExternalSyntheticLambda2(Task,0,p4);
																			Task.forAllActivities(v36);
																			if (p3 == 0) {
																				this.mRecentTasks.remove(p1);
																				Intent v41 = p1.getBaseIntent();
																				ComponentName v42 = v41.getComponent();
																				if (v42 != 0) {
																					ActivityTaskSupervisor$$ExternalSyntheticLambda1 v43 = new ActivityTaskSupervisor$$ExternalSyntheticLambda1();
																					Integer v45 = Integer.valueOf(Task.mUserId);
																					Intent v46 = new Intent(v47);
																					Intent v47 = p1.getBaseIntent();
																					Message v49 = PooledLambda.obtainMessage(v43, ActivityTaskManagerService.mAmInternal, v45, v42, v46);
																					boolean v50 = ActivityTaskManagerService.mH.sendMessage(v49);
																					if (p2 != 0) {
																						String v51 = v42.getPackageName();
																						ArrayList v52 = new ArrayList();
																						ArrayMap v54 = ActivityTaskManagerService.mProcessNames.getMap();
																						int v55 = v54.size();
																						if ( >= v55) {
																							Object v56 = v54.valueAt();
																							int v57 = v56.size();
																							if ( >= v57) {
																								Object v58 = v56.valueAt();
																								if (WindowProcessController.mUserId == Task.mUserId) {
																									if (v58 != ActivityTaskManagerService.mHomeProcess) {
																										boolean v59 = WindowProcessController.mPkgList.contains(v51);
																										if (v59 != 0) {
																											boolean v60 = v58.shouldKillProcessForRemovedTask(p1);
																											if (v60 != 0) {
																												LockTaskController v61 = this.mLockTaskController;
																												if (p1 == 0) {
																													boolean v63 = this.mLockTaskModeTasks.isEmpty();
																													if (v63 == 0) {
																														Object v64 = this.mLockTaskModeTasks.get(0);
																														if (p1 != v64) {
																															int v65 = this.mLockTaskModeTasks.size();
																															if ( <= 0) {
																																Object v66 = this.mLockTaskModeTasks.get();
																																LockTaskController.clearLockedTask(v66);
																																if ( <= 0) {
																																	LockTaskController.removeLockedTask(p1);
																																	boolean v69 = this.mLockTaskModeTasks.isEmpty();
																																	if (v69 == 0) {
																																		p1.performClearTaskForReuse(0);
																																		boolean v71 = ActivityTaskSupervisor.mRootWindowContainer.resumeFocusedTasksTopActivities();
																																		TaskChangeNotificationController v72 = this.mTaskChangeNotificationController;
																																		ActivityMetricsLogger v74 = this.mTaskSupervisor.getActivityMetricsLogger();
																																		v74.logWindowState();
																																		this.mHandler.removeMessages(2);
																																		Message v77 = this.mHandler.obtainMessage(2);
																																		TaskChangeNotificationController.forAllLocalListeners(this.mNotifyTaskStackChanged, v77);
																																		boolean v79 = this.mHandler.sendMessageDelayed(v77, 100);
																																		if (Task.isPersistable == 0) {
																																			this.mRecentTasks.notifyTaskPersisterLocked(0, 1);
																																			Task.mInRemoveTask = 0;
																																			Binder.restoreCallingIdentity(v6);
																																			return 1;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean removeTask(int p1){
	long v5 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									int v19 = WindowContainer.mChildren.size();
									if ( < 0) {
										Object v20 = WindowContainer.mChildren.get();
										Task v21 = 0;
										if (v21 == 0) {
											if ( < 0) {
												Object v22 = WindowContainer.mChildren.get();
												Task v23 = 0;
												if (v23 == 0) {
													boolean v18 = 0;
													if (v18 == 0) {
														if (Task.mInRemoveTask == 0) {
															if (this.mTransitionPlayer != 0) {
																boolean v26 = p1.isVisibleRequested();
																if (v26 == 0) {
																	boolean v27 = TransitionController.isCollecting();
																	if (v27 != 0) {
																		Transition v28 = TransitionController.createTransition(2, 0);
																		Task v29 = p1.asTask();
																		Transition v30 = TransitionController.requestStartTransition(v28, v29, 0, 0);
																		TransitionController.collectExistenceChange(p1);
																		Task.mInRemoveTask = 1;
																		Task.clearPinnedTaskIfNeed();
																		Task v34 = Task.getRootTask();
																		if (v34 != 0) {
																			Task$$ExternalSyntheticLambda2 v35 = new Task$$ExternalSyntheticLambda2(Task,0,p4);
																			Task.forAllActivities(v35);
																			if (p3 == 0) {
																				this.mRecentTasks.remove(p1);
																				Intent v40 = p1.getBaseIntent();
																				ComponentName v41 = v40.getComponent();
																				if (v41 != 0) {
																					ActivityTaskSupervisor$$ExternalSyntheticLambda1 v42 = new ActivityTaskSupervisor$$ExternalSyntheticLambda1();
																					Integer v44 = Integer.valueOf(Task.mUserId);
																					Intent v45 = new Intent(v46);
																					Intent v46 = p1.getBaseIntent();
																					Message v48 = PooledLambda.obtainMessage(v42, ActivityTaskManagerService.mAmInternal, v44, v41, v45);
																					boolean v49 = ActivityTaskManagerService.mH.sendMessage(v48);
																					if (p2 != 0) {
																						String v50 = v41.getPackageName();
																						ArrayList v51 = new ArrayList();
																						ArrayMap v53 = ActivityTaskManagerService.mProcessNames.getMap();
																						int v54 = v53.size();
																						if ( >= v54) {
																							Object v55 = v53.valueAt();
																							int v56 = v55.size();
																							if ( >= v56) {
																								int v57 = v53.size();
																								if ( >= v57) {
																									ActivityTaskSupervisor$$ExternalSyntheticLambda2 v58 = new ActivityTaskSupervisor$$ExternalSyntheticLambda2();
																									Message v60 = PooledLambda.obtainMessage(v58, ActivityTaskManagerService.mAmInternal, v51);
																									boolean v61 = ActivityTaskManagerService.mH.sendMessage(v60);
																									LockTaskController v62 = this.mLockTaskController;
																									if (p1 == 0) {
																										boolean v64 = this.mLockTaskModeTasks.isEmpty();
																										if (v64 == 0) {
																											Object v65 = this.mLockTaskModeTasks.get(0);
																											if (p1 != v65) {
																												int v66 = this.mLockTaskModeTasks.size();
																												if ( <= 0) {
																													Object v67 = this.mLockTaskModeTasks.get();
																													LockTaskController.clearLockedTask(v67);
																													if ( <= 0) {
																														LockTaskController.removeLockedTask(p1);
																														boolean v70 = this.mLockTaskModeTasks.isEmpty();
																														if (v70 == 0) {
																															p1.performClearTaskForReuse(0);
																															boolean v72 = ActivityTaskSupervisor.mRootWindowContainer.resumeFocusedTasksTopActivities();
																															TaskChangeNotificationController v73 = this.mTaskChangeNotificationController;
																															ActivityMetricsLogger v75 = this.mTaskSupervisor.getActivityMetricsLogger();
																															v75.logWindowState();
																															this.mHandler.removeMessages(2);
																															Message v78 = this.mHandler.obtainMessage(2);
																															TaskChangeNotificationController.forAllLocalListeners(this.mNotifyTaskStackChanged, v78);
																															boolean v80 = this.mHandler.sendMessageDelayed(v78, 100);
																															if (Task.isPersistable == 0) {
																																this.mRecentTasks.notifyTaskPersisterLocked(0, 1);
																																Task.mInRemoveTask = 0;
																																Binder.restoreCallingIdentity(v5);
																																return 1;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);\nif (v5 != 0) {\nint v8 = WindowContainer.mChildren.size();\nWindowContainer.mTransitionController.requestCloseTransitionIfNeeded(v5);\nv5.removeActivities("remove-task", 0);\nActivityTaskSupervisor.cleanUpRemovedTaskLocked(v5, 1, 1);\nLockTaskController v17 = this.mService.getLockTaskController();\nv17.clearLockedTask(v5);']

The method removeTask has the following similar APIs:

- API Name: moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V with Similarity Score: 0.8472442030906677
  - Access Control Level: SYS_OR_SIG and the following code:
Task v23 = this.mRootWindowContainer.anyTaskForId(p3);
LockTaskController v24 = ActivityTaskManagerService.getLockTaskController();
boolean v25 = v24.isLockTaskModeViolation(v23);

- API Name: startSystemLockTaskMode(I)V with Similarity Score: 0.8411778211593628
  - Access Control Level: SYS_OR_SIG and the following code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
LockTaskController v22 = ActivityTaskManagerService.getLockTaskController();
v22.startLockTaskMode(v5, 1, v18);

