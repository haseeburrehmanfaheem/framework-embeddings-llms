The method takeTaskSnapshot has the following code snippet:

This is path 1 for the API with depth 2:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 == 0) {
									int v19 = this.mChildren.size();
									if ( < 0) {
										Object v20 = this.mChildren.get();
										boolean v21 = v20.isVisible();
										int v22 = this.mChildren.size();
										if ( < 0) {
											Object v23 = this.mChildren.get();
											boolean v24 = v23.isVisible();
											if (v24 == 0) {
												if ( < 0) {
													Object v25 = this.mChildren.get();
													boolean v26 = v25.isVisible();
													if (v26 == 0) {
														boolean v18 = 1;
														if (v26 == 0) {
															if ( < 0) {
																Object v27 = this.mChildren.get();
																boolean v28 = v27.isVisible();
																int v29 = this.mChildren.size();
																if ( < 0) {
																	Object v30 = this.mChildren.get();
																	boolean v31 = v30.isVisible();
																	if (v31 == 0) {
																		if ( < 0) {
																			Object v32 = this.mChildren.get();
																			boolean v33 = v32.isVisible();
																			if (v33 == 0) {
																				return 1;
																				if (v33 == 0) {
																					return 1;
																					if (isVisible() != 0) {
																						if (0 == 0) {
																							ActivityRecord v36 = p1.getTopMostActivity();
																							boolean v37 = p1.isActivityTypeStandardOrUndefined();
																							if (v37 != 0) {
																								boolean v38 = p1.isActivityTypeAssistant();
																								if (v38 != 0) {
																									if (v36 == 0) {
																										boolean v39 = v36.shouldUseAppThemeSnapshot();
																										if (v39 == 0) {
																											int v35 = 1;
																											if (v35 == 0) {
																												if (v35 == 1) {
																													ActivityRecord v41 = p1.getTopMostActivity();
																													if (v41 != 0) {
																														WindowState v42 = v41.findMainWindow();
																														if (v42 != 0) {
																															ActivityManager$TaskDescription v43 = p1.getTaskDescription();
																															int v44 = v43.getBackgroundColor();
																															int v45 = ColorUtils.setAlphaComponent(v44, 255);
																															WindowManager$LayoutParams v46 = v42.getAttrs();
																															Rect v47 = p1.getBounds();
																															InsetsState v48 = v42.getInsetsStateWithVisibilityOverride();
																															Rect v49 = v42.getFrame();
																															Rect v50 = TaskSnapshotController.getSystemBarInsets(v49, v48);
																															TaskSnapshotController$SystemBarBackgroundPainter v51 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v52,this.mHighResTaskSnapshotScale,v48);
																															ActivityManager$TaskDescription v52 = p1.getTaskDescription();
																															int v54 = v47.width();
																															int v55 = v47.height();
																															RenderNode v56 = RenderNode.create("TaskSnapshotController", 0);
																															boolean v57 = v56.setLeftTopRightBottom(0, 0, (v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															boolean v58 = v56.setClipToBounds(0);
																															RecordingCanvas v59 = v56.start((v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															v59.drawColor(v45);
																															v51.setInsets(v50);
																															v51.drawDecors(v59);
																															v56.end(v59);
																															Bitmap v64 = ThreadedRenderer.createHardwareBitmap(v56, (v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															if (v64 != 0) {
																																TaskSnapshot v40 = 0;
																																TaskSnapshot v34 = ;
																																Binder.restoreCallingIdentity(v2);
																																return ;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
			Integer v12 = Integer.valueOf(p1);
			PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
			Task v14 = RootWindowContainer.getTask(v13);
			v13.recycle();
			if (v14 == 0) {
				if (0 == 0) {
					Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
					if (v16 == 0) {
						Task v17 = v14.getRootTask();
						if (v17 == v16) {
							if (0 == 0) {
								boolean v18 = v14.reparent(v16, 0, , 1, 1, "anyTaskForId");
								Task v8 = v14;
								Task v7 = v8;
								if (v7 == 0) {
									int v20 = this.mChildren.size();
									if ( < 0) {
										Object v21 = this.mChildren.get();
										boolean v22 = v21.isVisible();
										int v23 = this.mChildren.size();
										if ( < 0) {
											Object v24 = this.mChildren.get();
											boolean v25 = v24.isVisible();
											if (v25 == 0) {
												if ( < 0) {
													Object v26 = this.mChildren.get();
													boolean v27 = v26.isVisible();
													if (v27 == 0) {
														boolean v19 = 1;
														if (v27 == 0) {
															if ( < 0) {
																Object v28 = this.mChildren.get();
																boolean v29 = v28.isVisible();
																int v30 = this.mChildren.size();
																if ( < 0) {
																	Object v31 = this.mChildren.get();
																	boolean v32 = v31.isVisible();
																	if (v32 == 0) {
																		if ( < 0) {
																			Object v33 = this.mChildren.get();
																			boolean v34 = v33.isVisible();
																			if (v34 == 0) {
																				return 1;
																				if (v34 == 0) {
																					return 1;
																					if (isVisible() != 0) {
																						if (0 == 0) {
																							ActivityRecord v37 = p1.getTopMostActivity();
																							boolean v38 = p1.isActivityTypeStandardOrUndefined();
																							if (v38 != 0) {
																								boolean v39 = p1.isActivityTypeAssistant();
																								if (v39 != 0) {
																									if (v37 == 0) {
																										boolean v40 = v37.shouldUseAppThemeSnapshot();
																										if (v40 == 0) {
																											int v36 = 1;
																											if (v36 == 0) {
																												if (v36 == 1) {
																													ActivityRecord v42 = p1.getTopMostActivity();
																													if (v42 != 0) {
																														WindowState v43 = v42.findMainWindow();
																														if (v43 != 0) {
																															ActivityManager$TaskDescription v44 = p1.getTaskDescription();
																															int v45 = v44.getBackgroundColor();
																															int v46 = ColorUtils.setAlphaComponent(v45, 255);
																															WindowManager$LayoutParams v47 = v43.getAttrs();
																															Rect v48 = p1.getBounds();
																															InsetsState v49 = v43.getInsetsStateWithVisibilityOverride();
																															Rect v50 = v43.getFrame();
																															Rect v51 = TaskSnapshotController.getSystemBarInsets(v50, v49);
																															TaskSnapshotController$SystemBarBackgroundPainter v52 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v53,this.mHighResTaskSnapshotScale,v49);
																															ActivityManager$TaskDescription v53 = p1.getTaskDescription();
																															int v55 = v48.width();
																															int v56 = v48.height();
																															RenderNode v57 = RenderNode.create("TaskSnapshotController", 0);
																															boolean v58 = v57.setLeftTopRightBottom(0, 0, (v55 * this.mHighResTaskSnapshotScale), (v56 * this.mHighResTaskSnapshotScale));
																															boolean v59 = v57.setClipToBounds(0);
																															RecordingCanvas v60 = v57.start((v55 * this.mHighResTaskSnapshotScale), (v56 * this.mHighResTaskSnapshotScale));
																															v60.drawColor(v46);
																															v52.setInsets(v51);
																															v52.drawDecors(v60);
																															v57.end(v60);
																															Bitmap v65 = ThreadedRenderer.createHardwareBitmap(v57, (v55 * this.mHighResTaskSnapshotScale), (v56 * this.mHighResTaskSnapshotScale));
																															if (v65 != 0) {
																																TaskSnapshot v41 = 0;
																																TaskSnapshot v35 = ;
																																Binder.restoreCallingIdentity(v2);
																																return ;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 == 0) {
									int v19 = this.mChildren.size();
									if ( < 0) {
										Object v20 = this.mChildren.get();
										boolean v21 = v20.isVisible();
										int v22 = this.mChildren.size();
										if ( < 0) {
											Object v23 = this.mChildren.get();
											boolean v24 = v23.isVisible();
											if (v24 == 0) {
												if ( < 0) {
													Object v25 = this.mChildren.get();
													boolean v26 = v25.isVisible();
													if (v26 == 0) {
														boolean v18 = 1;
														if (v26 == 0) {
															if ( < 0) {
																Object v27 = this.mChildren.get();
																boolean v28 = v27.isVisible();
																int v29 = this.mChildren.size();
																if ( < 0) {
																	Object v30 = this.mChildren.get();
																	boolean v31 = v30.isVisible();
																	if (v31 == 0) {
																		if ( < 0) {
																			Object v32 = this.mChildren.get();
																			boolean v33 = v32.isVisible();
																			if (v33 == 0) {
																				return 1;
																				if (v33 == 0) {
																					return 1;
																					if (isVisible() != 0) {
																						if (0 == 0) {
																							ActivityRecord v36 = p1.getTopMostActivity();
																							boolean v37 = p1.isActivityTypeStandardOrUndefined();
																							if (v37 != 0) {
																								boolean v38 = p1.isActivityTypeAssistant();
																								if (v38 != 0) {
																									if (v36 == 0) {
																										boolean v39 = v36.shouldUseAppThemeSnapshot();
																										if (v39 == 0) {
																											int v35 = 0;
																											if (v35 == 0) {
																												if (v35 == 1) {
																													ActivityRecord v41 = p1.getTopMostActivity();
																													if (v41 != 0) {
																														WindowState v42 = v41.findMainWindow();
																														if (v42 != 0) {
																															ActivityManager$TaskDescription v43 = p1.getTaskDescription();
																															int v44 = v43.getBackgroundColor();
																															int v45 = ColorUtils.setAlphaComponent(v44, 255);
																															WindowManager$LayoutParams v46 = v42.getAttrs();
																															Rect v47 = p1.getBounds();
																															InsetsState v48 = v42.getInsetsStateWithVisibilityOverride();
																															Rect v49 = v42.getFrame();
																															Rect v50 = TaskSnapshotController.getSystemBarInsets(v49, v48);
																															TaskSnapshotController$SystemBarBackgroundPainter v51 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v52,this.mHighResTaskSnapshotScale,v48);
																															ActivityManager$TaskDescription v52 = p1.getTaskDescription();
																															int v54 = v47.width();
																															int v55 = v47.height();
																															RenderNode v56 = RenderNode.create("TaskSnapshotController", 0);
																															boolean v57 = v56.setLeftTopRightBottom(0, 0, (v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															boolean v58 = v56.setClipToBounds(0);
																															RecordingCanvas v59 = v56.start((v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															v59.drawColor(v45);
																															v51.setInsets(v50);
																															v51.drawDecors(v59);
																															v56.end(v59);
																															Bitmap v64 = ThreadedRenderer.createHardwareBitmap(v56, (v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));
																															if (v64 != 0) {
																																TaskSnapshot v40 = 0;
																																TaskSnapshot v34 = ;
																																Binder.restoreCallingIdentity(v2);
																																return ;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['TaskSnapshotController$SystemBarBackgroundPainter v51 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v52,this.mHighResTaskSnapshotScale,v48);\nv51.setInsets(v50);\nv51.drawDecors(v59);\nRenderNode v56 = RenderNode.create("TaskSnapshotController", 0);\nboolean v57 = v56.setLeftTopRightBottom(0, 0, (v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));\nRecordingCanvas v59 = v56.start((v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));\nBitmap v64 = ThreadedRenderer.createHardwareBitmap(v56, (v54 * this.mHighResTaskSnapshotScale), (v55 * this.mHighResTaskSnapshotScale));', 'Task v6 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);\nthis.sThreadPriorityBooster.boost();', 'Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);']

The method takeTaskSnapshot has the following similar APIs:

- API Name: setTaskResizeable(II)V with Similarity Score: 0.9817672967910767
  - Access Control Level: SYS_OR_SIG and the following code:
Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);

- API Name: setFocusedRootTask(I)V with Similarity Score: 0.9205875396728516
  - Access Control Level: SYS_OR_SIG and the following code:
Task v7 = this.mRootWindowContainer.getRootTask(p1);

