The method registerRemoteAnimationsForDisplay has the following code snippet:

This is path 1 for the API with depth 2:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ( < 0) {
		Object v6 = this.mTransitionAnimationMap.valueAt();
		RemoteAnimationDefinition$RemoteAnimationAdapterEntry.adapter.setCallingPidUid(v2, v3);
		if ( < 0) {
			int v13 = this.mChildren.size();
			int v12 = v13;
			if ( < 0) {
				DisplayContent v11 = 0;
				if (v11 != 0) {
					long v14 = Binder.clearCallingIdentity();
					this.mRemoteAnimationDefinition = p1;
					Binder.restoreCallingIdentity(v14);
					return;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ( < 0) {
		Object v6 = this.mTransitionAnimationMap.valueAt();
		RemoteAnimationDefinition$RemoteAnimationAdapterEntry.adapter.setCallingPidUid(v2, v3);
		if ( < 0) {
			WindowManagerThreadPriorityBooster.boost();
			int v14 = this.mChildren.size();
			int v13 = v14;
			if ( < 0) {
				DisplayContent v12 = 0;
				if (v12 != 0) {
					long v15 = Binder.clearCallingIdentity();
					this.mRemoteAnimationDefinition = p1;
					Binder.restoreCallingIdentity(v15);
					return;
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ( < 0) {
		Object v6 = this.mTransitionAnimationMap.valueAt();
		RemoteAnimationDefinition$RemoteAnimationAdapterEntry.adapter.setCallingPidUid(v2, v3);
		if ( < 0) {
			int v13 = this.mChildren.size();
			int v12 = v13;
			if ( < 0) {
				DisplayContent v11 = 0;
				if (v11 != 0) {
					long v14 = Binder.clearCallingIdentity();
					this.mRemoteAnimationDefinition = p1;
					Binder.restoreCallingIdentity(v14);
					WindowManagerThreadPriorityBooster.reset();
					return;
				}
			}
		}
	}
}

and the following sink code:
['RemoteAnimationDefinition$RemoteAnimationAdapterEntry.adapter.setCallingPidUid(v2, v3);\nthis.mAppTransitionController.registerRemoteAnimations(p2);', 'p2.setCallingPidUid(v2, v3);\nv6.registerRemoteAnimations(p2);']

The method registerRemoteAnimationsForDisplay has the following similar APIs:

- API Name: cancelRecentsAnimation(Z)V with Similarity Score: 0.735923707485199
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = Binder.getCallingUid();
StringBuilder v7 = new StringBuilder();
StringBuilder v9 = v7.append("cancelRecentsAnimation/uid=");
StringBuilder v10 = v7.append(v2);
String v11 = v7.toString();
RecentsAnimationController.cancelAnimation(p1, 0, p2);

- API Name: notifyBroadcastInfoResponse(Landroid/os/IBinder;Landroid/media/tv/BroadcastInfoResponse;I)V with Similarity Score: 0.7282169461250305
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v2 = Binder.getCallingPid();
ITvInteractiveAppSession v7 = TvInteractiveAppManagerService.getSessionStateLocked(p2, p3, v10);
ITvInteractiveAppSession v14 = TvInteractiveAppManagerService$SessionState.-$$Nest$fgetmSession(p2);
v12.notifyBroadcastInfoResponse(p2);

