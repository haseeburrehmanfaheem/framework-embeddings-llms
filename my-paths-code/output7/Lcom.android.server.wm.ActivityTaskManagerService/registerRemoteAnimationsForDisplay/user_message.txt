This is path 1 for the API with depth 2:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ( < 0) {
		Object v6 = this.mTransitionAnimationMap.valueAt();
		RemoteAnimationDefinition$RemoteAnimationAdapterEntry.adapter.setCallingPidUid(v2, v3);
		if ( < 0) {
			int v13 = this.mChildren.size();
			int v12 = v13;
			if ( < 0) {
				DisplayContent v11 = 0;
				if (v11 != 0) {
					long v14 = Binder.clearCallingIdentity();
					this.mRemoteAnimationDefinition = p1;
					Binder.restoreCallingIdentity(v14);
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ( < 0) {
		Object v6 = this.mTransitionAnimationMap.valueAt();
		RemoteAnimationDefinition$RemoteAnimationAdapterEntry.adapter.setCallingPidUid(v2, v3);
		if ( < 0) {
			this.sThreadPriorityBooster.boost();
			int v11 = RootWindowContainer.getChildCount();
			if ( < 0) {
				DisplayContent v10 = 0;
				if (v10 != 0) {
					long v12 = Binder.clearCallingIdentity();
					this.mAppTransitionController.registerRemoteAnimations(p2);
					Binder.restoreCallingIdentity(v12);
					this.sThreadPriorityBooster.reset();
					return;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	p2.setCallingPidUid(v2, v3);
	WindowManagerService.boostPriorityForLockedSection();
	DisplayContent v6 = this.mRootWindowContainer.getDisplayContent(p1);
	if (v6 != 0) {
		long v7 = Binder.clearCallingIdentity();
		v6.registerRemoteAnimations(p2);
		Binder.restoreCallingIdentity(v7);
		WindowManagerService.resetPriorityAfterLockedSection();
		return;
	}
}
