The method startActivityAndWait has the following code snippet:

This is path 1 for the API with depth 2:
public WaitResult startActivityAndWait(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (v3 == 0) {
		WaitResult v4 = new WaitResult();
		if (v8 != 0) {
			int v9 = Binder.getCallingPid();
			int v10 = Binder.getCallingUid();
			int v12 = this.mAmInternal.handleIncomingUser(v9, v10, p12, 0, 0, "startActivityAndWait", 0);
			int v11 = v12;
			ActivityStartController v13 = this.mActivityStartController;
			ActivityStarter v15 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p1;
			ActivityStarter v16 = ActivityStarter;
			ActivityStarter$Request.reason = p2;
			ActivityStarter v17 = ActivityStarter;
			ActivityStarter v14 = v17;
			ActivityStarter v18 = v14.setCaller(p1);
			ActivityStarter v19 = v18.setCallingPackage(p2);
			ActivityStarter v20 = v19.setCallingFeatureId(p3);
			ActivityStarter v21 = v20.setResolvedType(p5);
			ActivityStarter v22 = v21.setResultTo(p6);
			ActivityStarter v23 = v22.setResultWho(p7);
			ActivityStarter v24 = v23.setRequestCode(p8);
			ActivityStarter v25 = v24.setStartFlags(p9);
			if (p1 == 0) {
				SafeActivityOptions v28 = new SafeActivityOptions(v29);
				ActivityOptions v29 = ActivityOptions.fromBundle(p1);
				SafeActivityOptions v27 = ;
				ActivityStarter$Request.activityOptions = v27;
				ActivityStarter v31 = ActivityStarter;
				ActivityStarter v26 = v31;
				ActivityStarter v32 = v26.setUserId(v11);
				ActivityStarter v33 = v32.setProfilerInfo(p10);
				ActivityStarter v34 = v33.setWaitResult(v4);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v41 = ActivityRecord$Token.mActivityRef.get();
						if (v41 == 0) {
							Task v42 = v41.getRootTask();
							if (v42 != 0) {
								ActivityRecord v40 = ;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v43 = this.mActivityMetricsLogger;
									if ( != 0) {
										ActivityMetricsLogger$LaunchingState v52 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v52, v45);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v45);
										ActivityMetricsLogger$LaunchingState v44 = v52;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v59 = Binder.getCallingPid();
												this.realCallingPid = v59;
												if (this.realCallingUid != -1) {
													int v60 = Binder.getCallingUid();
													this.realCallingUid = v60;
													if (this.callingUid < 0) {
														this.callingPid = -1;
														if (this.caller == 0) {
															Intent v61 = new Intent(this.intent);
															this.ephemeralIntent = v61;
															Intent v63 = new Intent(this.intent);
															this.intent = v63;
															ComponentName v65 = v63.getComponent();
															if (v65 == 0) {
																int v66 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																ResolveInfo v67 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v66);
																this.resolveInfo = v67;
																if (v67 != 0) {
																	UserInfo v68 = this.mSupervisor.getUserInfo(this.userId);
																	if (v68 == 0) {
																		boolean v69 = v68.isManagedProfile();
																		if (v69 == 0) {
																			ActivityInfo v70 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																			this.activityInfo = v70;
																			if (v70 == 0) {
																				if (ActivityStarter$Request.intent == 0) {
																					this.sThreadPriorityBooster.boost();
																					if (ActivityStarter$Request.globalConfig == 0) {
																						int v74 = RootWindowContainer.getChildCount();
																						if ( < 0) {
																							WindowContainer v75 = RootWindowContainer.getChildAt();
																							Task v76 = v75.getFocusedRootTask();
																							if (v76 == 0) {
																								if ( < 0) {
																									WindowContainer v77 = RootWindowContainer.getChildAt();
																									Task v78 = v77.getFocusedRootTask();
																									if (v78 == 0) {
																										Task v73 = v78;
																										if (v73 == 0) {
																											if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																												long v79 = Binder.clearCallingIdentity();
																												int v80 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																												if (v80 == 0) {
																													this.sThreadPriorityBooster.reset();
																													this.mController.onExecutionComplete(ActivityStarter);
																													int v35 = v80;
																													return v4;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public WaitResult startActivityAndWait(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (v3 == 0) {
		WaitResult v4 = new WaitResult();
		if (v8 != 0) {
			int v9 = Binder.getCallingPid();
			int v10 = Binder.getCallingUid();
			int v12 = this.mAmInternal.handleIncomingUser(v9, v10, p12, 0, 0, "startActivityAndWait", 0);
			int v11 = v12;
			ActivityStartController v13 = this.mActivityStartController;
			ActivityStarter v15 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p1;
			ActivityStarter v16 = ActivityStarter;
			ActivityStarter$Request.reason = p2;
			ActivityStarter v17 = ActivityStarter;
			ActivityStarter v14 = v17;
			ActivityStarter v18 = v14.setCaller(p1);
			ActivityStarter v19 = v18.setCallingPackage(p2);
			ActivityStarter v20 = v19.setCallingFeatureId(p3);
			ActivityStarter v21 = v20.setResolvedType(p5);
			ActivityStarter v22 = v21.setResultTo(p6);
			ActivityStarter v23 = v22.setResultWho(p7);
			ActivityStarter v24 = v23.setRequestCode(p8);
			ActivityStarter v25 = v24.setStartFlags(p9);
			if (p1 == 0) {
				SafeActivityOptions v28 = new SafeActivityOptions(v29);
				ActivityOptions v29 = ActivityOptions.fromBundle(p1);
				SafeActivityOptions v27 = ;
				ActivityStarter$Request.activityOptions = v27;
				ActivityStarter v31 = ActivityStarter;
				ActivityStarter v26 = v31;
				ActivityStarter v32 = v26.setUserId(v11);
				ActivityStarter v33 = v32.setProfilerInfo(p10);
				ActivityStarter v34 = v33.setWaitResult(v4);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v41 = ActivityRecord$Token.mActivityRef.get();
						if (v41 == 0) {
							Task v42 = v41.getRootTask();
							if (v42 != 0) {
								ActivityRecord v40 = ;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v43 = this.mActivityMetricsLogger;
									if ( != 0) {
										ActivityMetricsLogger$LaunchingState v52 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v52, v45);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v45);
										ActivityMetricsLogger$LaunchingState v44 = v52;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v59 = Binder.getCallingPid();
												this.realCallingPid = v59;
												if (this.realCallingUid != -1) {
													int v60 = Binder.getCallingUid();
													this.realCallingUid = v60;
													if (this.callingUid < 0) {
														if (this.caller != 0) {
															this.callingPid = this.realCallingPid;
															this.callingUid = this.realCallingUid;
															if (this.caller == 0) {
																Intent v61 = new Intent(this.intent);
																this.ephemeralIntent = v61;
																Intent v63 = new Intent(this.intent);
																this.intent = v63;
																ComponentName v65 = v63.getComponent();
																if (v65 == 0) {
																	int v66 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																	ResolveInfo v67 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v66);
																	this.resolveInfo = v67;
																	if (v67 != 0) {
																		ActivityInfo v68 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																		this.activityInfo = v68;
																		if (v68 == 0) {
																			if (ActivityStarter$Request.intent == 0) {
																				this.sThreadPriorityBooster.boost();
																				if (ActivityStarter$Request.globalConfig == 0) {
																					int v72 = RootWindowContainer.getChildCount();
																					if ( < 0) {
																						WindowContainer v73 = RootWindowContainer.getChildAt();
																						Task v74 = v73.getFocusedRootTask();
																						if (v74 == 0) {
																							if ( < 0) {
																								WindowContainer v75 = RootWindowContainer.getChildAt();
																								Task v76 = v75.getFocusedRootTask();
																								if (v76 == 0) {
																									Task v71 = v76;
																									if (v71 == 0) {
																										if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																											long v77 = Binder.clearCallingIdentity();
																											int v78 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																											if (v78 == 0) {
																												this.sThreadPriorityBooster.reset();
																												this.mController.onExecutionComplete(ActivityStarter);
																												int v35 = v78;
																												return v4;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['WaitResult v4 = new WaitResult();\nint v9 = Binder.getCallingPid();\nint v10 = Binder.getCallingUid();\nActivityStarter v15 = this.mFactory.obtain();\nActivityStarter v16 = v15.setIntent(p4);\nActivityStarter v17 = v16.setReason("startActivityAndWait");\nActivityStarter$Request.caller = p1;\nActivityStarter$Request.callingPackage = p2;\nActivityStarter$Request.callingFeatureId = p3;\nActivityStarter$Request.resolvedType = p5;\nActivityStarter$Request.resultTo = p6;\nActivityStarter$Request.resultWho = p7;\nActivityStarter$Request.requestCode = p8;\nActivityStarter$Request.startFlags = p9;\nSafeActivityOptions v27 = SafeActivityOptions.fromBundle(p11);\nActivityStarter v28 = ActivityStarter.setActivityOptions(v27);\nActivityStarter$Request.userId = v11;\nActivityStarter$Request.profilerInfo = p10;\nActivityStarter$Request.waitResult = v4;', 'WaitResult v2 = new WaitResult();\nint v5 = Binder.getCallingPid();\nint v6 = Binder.getCallingUid();\nActivityStartController v8 = p0.getActivityStartController();\nActivityStarter v9 = v8.obtainStarter(p4, "startActivityAndWait");\nActivityStarter v10 = v9.setCaller(p1);\nActivityStarter v11 = v10.setCallingPackage(p2);\nActivityStarter v12 = v11.setCallingFeatureId(p3);\nActivityStarter v13 = v12.setResolvedType(p5);\nActivityStarter v14 = v13.setResultTo(p6);\nActivityStarter v15 = v14.setResultWho(p7);\nActivityStarter v16 = v15.setRequestCode(p8);\nActivityStarter v17 = v16.setStartFlags(p9);\nActivityStarter v18 = v17.setActivityOptions(p11);\nActivityStarter v19 = v18.setUserId(v7);\nActivityStarter v20 = v19.setProfilerInfo(p10);\nActivityStarter v21 = v20.setWaitResult(v2);', 'int v9 = Binder.getCallingPid();\nint v10 = Binder.getCallingUid();\nint v12 = this.mAmInternal.handleIncomingUser(v9, v10, p12, 0, 0, "startActivityAndWait", 0);']

The method startActivityAndWait has the following similar APIs:

- API Name: startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I with Similarity Score: 0.9199575781822205
  - Access Control Level: SYS_OR_SIG and the following code:
int v7 = Binder.getCallingPid();
int v8 = Binder.getCallingUid();
int v10 = this.mAmInternal.handleIncomingUser(v7, v8, p8, 0, 0, "startActivities", 0);
ActivityStartController v11 = this.mActivityStartController;
SafeActivityOptions v13 = new SafeActivityOptions(v14);
int v18 = v11.startActivities(p1, -1, 0, -1, p2, p3, p4, p5, p6, v12, v9, "startActivities", 0, 0);

- API Name: startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I with Similarity Score: 0.8706105351448059
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
ActivityStarter$Request.intent = p5;
v6.setCallingUid(p4);
v7.setCallingPackage(p1);
v8.setCallingFeatureId(p2);
return v17;

