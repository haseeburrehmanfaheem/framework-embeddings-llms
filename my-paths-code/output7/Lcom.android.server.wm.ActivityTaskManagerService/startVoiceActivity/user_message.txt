This is path 1 for the API with depth 2:
public int startVoiceActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, IVoiceInteractionSession p7, IVoiceInteractor p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (p7 == 0) {
		if (p8 == 0) {
			int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
			int v3 = v4;
			ActivityStartController v5 = this.mActivityStartController;
			ActivityStarter v7 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p1;
			ActivityStarter v8 = ActivityStarter;
			ActivityStarter$Request.reason = p2;
			ActivityStarter v9 = ActivityStarter;
			ActivityStarter v6 = v9;
			ActivityStarter v10 = v6.setCallingUid(p4);
			ActivityStarter v11 = v10.setCallingPackage(p1);
			ActivityStarter v12 = v11.setCallingFeatureId(p2);
			ActivityStarter v13 = v12.setResolvedType(p6);
			ActivityStarter v14 = v13.setVoiceSession(p7);
			ActivityStarter v15 = v14.setVoiceInteractor(p8);
			ActivityStarter v16 = v15.setStartFlags(p9);
			ActivityStarter v17 = v16.setProfilerInfo(p10);
			if (p1 == 0) {
				SafeActivityOptions v20 = new SafeActivityOptions(v21);
				ActivityOptions v21 = ActivityOptions.fromBundle(p1);
				SafeActivityOptions v19 = ;
				ActivityStarter$Request.activityOptions = v19;
				ActivityStarter v23 = ActivityStarter;
				ActivityStarter v18 = v23;
				ActivityStarter v24 = v18.setUserId(v3);
				ActivityStarter v25 = v24.setAllowBackgroundActivityStart(1);
				this.mController.onExecutionStarted();
				if (ActivityStarter$Request.intent == 0) {
					this.sThreadPriorityBooster.boost();
					if (ActivityStarter$Request.resultTo != 0) {
						Object v32 = ActivityRecord$Token.mActivityRef.get();
						if (v32 == 0) {
							Task v33 = v32.getRootTask();
							if (v33 != 0) {
								ActivityRecord v31 = ;
								if (ActivityStarter$Request.realCallingUid != -1) {
									ActivityMetricsLogger v34 = this.mActivityMetricsLogger;
									if ( != 0) {
										ActivityMetricsLogger$LaunchingState v43 = new ActivityMetricsLogger$LaunchingState();
										ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v43, v36);
										ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v36);
										ActivityMetricsLogger$LaunchingState v35 = v43;
										this.sThreadPriorityBooster.reset();
										if (ActivityStarter$Request.activityInfo != 0) {
											if (this.realCallingPid != 0) {
												int v50 = Binder.getCallingPid();
												this.realCallingPid = v50;
												if (this.realCallingUid != -1) {
													int v51 = Binder.getCallingUid();
													this.realCallingUid = v51;
													if (this.callingUid < 0) {
														this.callingPid = -1;
														if (this.caller == 0) {
															Intent v52 = new Intent(this.intent);
															this.ephemeralIntent = v52;
															Intent v54 = new Intent(this.intent);
															this.intent = v54;
															ComponentName v56 = v54.getComponent();
															if (v56 == 0) {
																int v57 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																ResolveInfo v58 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v57);
																this.resolveInfo = v58;
																if (v58 != 0) {
																	UserInfo v59 = this.mSupervisor.getUserInfo(this.userId);
																	if (v59 == 0) {
																		boolean v60 = v59.isManagedProfile();
																		if (v60 == 0) {
																			ActivityInfo v61 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																			this.activityInfo = v61;
																			if (v61 == 0) {
																				if (ActivityStarter$Request.intent == 0) {
																					this.sThreadPriorityBooster.boost();
																					if (ActivityStarter$Request.globalConfig == 0) {
																						int v65 = RootWindowContainer.getChildCount();
																						if ( < 0) {
																							WindowContainer v66 = RootWindowContainer.getChildAt();
																							Task v67 = v66.getFocusedRootTask();
																							if (v67 == 0) {
																								if ( < 0) {
																									WindowContainer v68 = RootWindowContainer.getChildAt();
																									Task v69 = v68.getFocusedRootTask();
																									if (v69 == 0) {
																										Task v64 = v69;
																										if (v64 == 0) {
																											if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																												long v70 = Binder.clearCallingIdentity();
																												int v71 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																												if (v71 == 0) {
																													this.sThreadPriorityBooster.reset();
																													this.mController.onExecutionComplete(ActivityStarter);
																													int v26 = v71;
																													return v26;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int startVoiceActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, IVoiceInteractionSession p7, IVoiceInteractor p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (p7 == 0) {
		if (p8 == 0) {
			int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
			int v3 = v4;
			ActivityStartController v5 = this.mActivityStartController;
			ActivityStarter v7 = this.mFactory.obtain();
			ActivityStarter v8 = v7.setIntent(p5);
			ActivityStarter v9 = v8.setReason("startVoiceActivity");
			ActivityStarter v6 = v9;
			ActivityStarter$Request.callingUid = p4;
			ActivityStarter v10 = ActivityStarter;
			ActivityStarter$Request.callingPackage = p1;
			ActivityStarter v11 = ActivityStarter;
			ActivityStarter$Request.callingFeatureId = p2;
			ActivityStarter v12 = ActivityStarter;
			ActivityStarter$Request.resolvedType = p6;
			ActivityStarter v13 = ActivityStarter;
			ActivityStarter$Request.voiceSession = p7;
			ActivityStarter v14 = ActivityStarter;
			ActivityStarter$Request.voiceInteractor = p8;
			ActivityStarter v15 = ActivityStarter;
			ActivityStarter$Request.startFlags = p9;
			ActivityStarter v16 = ActivityStarter;
			ActivityStarter$Request.profilerInfo = p10;
			ActivityStarter v17 = ActivityStarter;
			SafeActivityOptions v19 = SafeActivityOptions.fromBundle(p11);
			ActivityStarter v20 = ActivityStarter.setActivityOptions(v19);
			ActivityStarter v18 = v20;
			ActivityStarter$Request.userId = v3;
			ActivityStarter v21 = ActivityStarter;
			ActivityStarter$Request.allowBackgroundActivityStart = 1;
			ActivityStarter v22 = ActivityStarter;
			ActivityStarter.onExecutionStarted();
			if (ActivityStarter$Request.intent == 0) {
				WindowManagerService.boostPriorityForLockedSection();
				ActivityRecord v26 = ActivityRecord.forTokenLocked(ActivityStarter$Request.resultTo);
				if (ActivityStarter$Request.realCallingUid != -1) {
					int v27 = Binder.getCallingUid();
					ActivityMetricsLogger v28 = this.mSupervisor.getActivityMetricsLogger();
					ActivityMetricsLogger$LaunchingState v29 = v28.notifyActivityLaunching(ActivityStarter$Request.intent, v26, );
					WindowManagerService.resetPriorityAfterLockedSection();
					if (ActivityStarter$Request.activityInfo != 0) {
						if (ActivityStarter$Request.intent == 0) {
							WindowManagerService.boostPriorityForLockedSection();
							if (ActivityStarter$Request.globalConfig == 0) {
								Task v32 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
								if (v32 == 0) {
									Task.mConfigWillChange = ;
									if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
										long v33 = Binder.clearCallingIdentity();
										int v34 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
										if (v34 == 0) {
											WindowManagerService.resetPriorityAfterLockedSection();
											ActivityStarter.onExecutionComplete();
											int v23 = v34;
											return v23;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int startVoiceActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, IVoiceInteractionSession p7, IVoiceInteractor p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (p7 == 0) {
		if (p8 == 0) {
			int v3 = p0.handleIncomingUser(p3, p4, p12, "startVoiceActivity");
			ActivityStartController v4 = p0.getActivityStartController();
			ActivityStarter v5 = v4.obtainStarter(p5, "startVoiceActivity");
			ActivityStarter v6 = v5.setCallingUid(p4);
			ActivityStarter v7 = v6.setCallingPackage(p1);
			ActivityStarter v8 = v7.setCallingFeatureId(p2);
			ActivityStarter v9 = v8.setResolvedType(p6);
			ActivityStarter v10 = v9.setVoiceSession(p7);
			ActivityStarter v11 = v10.setVoiceInteractor(p8);
			ActivityStarter v12 = v11.setStartFlags(p9);
			ActivityStarter v13 = v12.setProfilerInfo(p10);
			ActivityStarter v14 = v13.setActivityOptions(p11);
			ActivityStarter v15 = v14.setUserId(v3);
			ActivityStarter v16 = v15.setAllowBackgroundActivityStart(1);
			int v17 = v16.execute();
			return v17;
		}
	}
}
