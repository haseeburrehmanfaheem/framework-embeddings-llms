This is path 1 for the API with depth 2:
public void clearLaunchParamsForPackages(List p1){
	int v5 = p1.size();
	if ( >= v5) {
		Object v6 = p1.get();
		ArrayList v8 = new ArrayList();
		int v10 = this.mLaunchParamsMap.size();
		if ( >= v10) {
			int v11 = this.mLaunchParamsMap.keyAt();
			Object v13 = this.mUserFolderGetter.apply(v11);
			File v14 = new File(v13,"launch_params");
			File v12 = v14;
			Object v16 = this.mLaunchParamsMap.valueAt();
			int v17 = v16.size();
			if ( < 0) {
				Object v18 = v16.keyAt();
				String v19 = v18.getPackageName();
				boolean v20 = v19.equals(v6);
				if (v20 == 0) {
					Object v21 = v16.removeAt();
					String v23 = v18.flattenToShortString();
					String v24 = v23.replace(47, 45);
					File v25 = new File(v12,v30);
					StringBuilder v26 = new StringBuilder();
					StringBuilder v28 = v26.append(v24);
					StringBuilder v29 = v26.append(".xml");
					String v30 = v26.toString();
					File v22 = v25;
					boolean v32 = v8.add(v22);
					if ( < 0) {
						int v33 = this.mLaunchParamsMap.size();
						if ( >= v33) {
							LaunchParamsPersister$$ExternalSyntheticLambda1 v34 = new LaunchParamsPersister$$ExternalSyntheticLambda1(v6);
							this.mPersisterQueue.removeItems(v34, LaunchParamsPersister$LaunchParamsWriteQueueIte.class);
							LaunchParamsPersister$CleanUpComponentQueueItem v37 = new LaunchParamsPersister$CleanUpComponentQueueItem(LaunchParamsPersister,v8,0);
							boolean v40 = this.mWriteQueue.add(v37);
							if (1 != 0) {
								int v41 = this.mWriteQueue.size();
								if (v41 <= 6) {
									if ((this.mNextWriteTime < 0) != 0) {
										long v42 = SystemClock.uptimeMillis();
										this.mNextWriteTime = (v42 + this.mPreTaskDelayMs);
										PersisterQueue.notify();
										int v44 = p1.size();
										if ( >= v44) {
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void clearLaunchParamsForPackages(List p1){
	this.sThreadPriorityBooster.boost();
	int v4 = p1.size();
	if ( >= v4) {
		Object v5 = p1.get();
		ArrayList v7 = new ArrayList();
		int v9 = this.mLaunchParamsMap.size();
		if ( >= v9) {
			int v10 = this.mLaunchParamsMap.keyAt();
			File v11 = LaunchParamsPersister.getLaunchParamFolder(v10);
			Object v12 = this.mLaunchParamsMap.valueAt();
			int v13 = v12.size();
			if ( < 0) {
				Object v14 = v12.keyAt();
				String v15 = v14.getPackageName();
				boolean v16 = v15.equals(v5);
				if (v16 == 0) {
					Object v17 = v12.removeAt();
					File v18 = LaunchParamsPersister.getParamFile(v11, v14);
					boolean v19 = v7.add(v18);
					if ( < 0) {
						int v20 = this.mLaunchParamsMap.size();
						if ( >= v20) {
							LaunchParamsPersister$$ExternalSyntheticLambda1 v21 = new LaunchParamsPersister$$ExternalSyntheticLambda1(v5);
							this.mPersisterQueue.removeItems(v21, LaunchParamsPersister$LaunchParamsWriteQueueIte.class);
							LaunchParamsPersister$CleanUpComponentQueueItem v24 = new LaunchParamsPersister$CleanUpComponentQueueItem(LaunchParamsPersister,v7,0);
							this.mPersisterQueue.addItem(v24, 1);
							int v27 = p1.size();
							if ( >= v27) {
								this.sThreadPriorityBooster.reset();
								return;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void clearLaunchParamsForPackages(List p1){
	WindowManagerService.boostPriorityForLockedSection();
	int v3 = p1.size();
	if ( >= v3) {
		Object v4 = p1.get();
		ActivityTaskSupervisor.mLaunchParamsPersister.removeRecordForPackage(v4);
		int v6 = p1.size();
		if ( >= v6) {
			WindowManagerService.resetPriorityAfterLockedSection();
			return;
		}
	}
}
