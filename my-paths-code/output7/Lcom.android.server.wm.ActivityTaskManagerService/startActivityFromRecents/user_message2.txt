The method startActivityFromRecents has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivityFromRecents(int p1, Bundle p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	if (p2 == 0) {
		SafeActivityOptions v5 = new SafeActivityOptions(v6);
		if (p1 == 0) {
			ActivityOptions v7 = new ActivityOptions(p1);
			ActivityOptions v6 = ;
			SafeActivityOptions v4 = ;
			long v10 = Binder.clearCallingIdentity();
			if (v4 == 0) {
				ActivityOptions v13 = SafeActivityOptions.getOptions(0, 0, 0, p0);
				ActivityOptions v12 = v13;
				this.sThreadPriorityBooster.boost();
				if ( == 0) {
					if ( == 2) {
						if ( == 3) {
							boolean v17 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
							if (v17 != 0) {
								this.mLayoutReasons = 0;
								WindowManagerService.mWindowPlacerLocked.deferLayout();
								if (2 == 2) {
									if ( != 0) {
										AppTransition$$ExternalSyntheticLambda2 v20 = new AppTransition$$ExternalSyntheticLambda2();
										ArgumentPlaceholder v22 = PooledLambda.__(Tas.class);
										Integer v23 = Integer.valueOf(p3);
										PooledPredicate v24 = PooledLambda.obtainPredicate(v20, v22, v23);
										Task v25 = RootWindowContainer.getTask(v24);
										v24.recycle();
										if (v25 == 0) {
											if ( == 0) {
												Task v27 = RootWindowContainer.getOrCreateRootTask(0, , v25, 1);
												if (v27 == 0) {
													Task v28 = v25.getRootTask();
													if (v28 == v27) {
														if (1 == 0) {
															boolean v29 = v25.reparent(v27, 1, , 1, 1, "anyTaskForId");
															Task v19 = v25;
															if (v19 == 0) {
																if ( == 0) {
																	TaskDisplayArea v31 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
																	TaskDisplayArea v30 = v31;
																	Task v33 = TaskDisplayArea.getOrCreateRootHomeTask();
																	if (v33 == 0) {
																		v33.moveToFront("startActivityFromRecents");
																		boolean v35 = ActivityTaskManagerService.mAmInternal.shouldConfirmCredentials(Task.mUserId);
																		if (v35 != 0) {
																			ActivityRecord v37 = Task.getRootActivity(1, 0);
																			ActivityRecord v36 = v37;
																			if (v36 == 0) {
																				Intent v38 = Task.intent.addFlags(1048576);
																				this.sThreadPriorityBooster.reset();
																				ActivityStartController v41 = this.mActivityStartController;
																				int v43 = ActivityStartController.checkTargetUser(Task.mUserId, 0, p1, p2, "startActivityFromRecents");
																				ActivityStarter v44 = ActivityStartController.obtainStarter(Task.intent, "startActivityFromRecents");
																				ActivityStarter v45 = v44.setCallingUid(Task.mCallingUid);
																				ActivityStarter v46 = v45.setRealCallingPid(p1);
																				ActivityStarter v47 = v46.setRealCallingUid(p2);
																				ActivityStarter v48 = v47.setCallingPackage(Task.mCallingPackage);
																				ActivityStarter v49 = v48.setCallingFeatureId(Task.mCallingFeatureId);
																				ActivityStarter v50 = v49.setResolvedType(0);
																				ActivityStarter v51 = v50.setResultTo(0);
																				ActivityStarter v52 = v51.setResultWho(0);
																				ActivityStarter v53 = v52.setRequestCode(0);
																				ActivityStarter v54 = v53.setStartFlags(0);
																				ActivityStarter v55 = v54.setActivityOptions(p4);
																				ActivityStarter v56 = v55.setUserId(v43);
																				ActivityStarter v57 = v56.setInTask(v19);
																				ActivityStarter v58 = v57.setOriginatingPendingIntent(0);
																				ActivityStarter v59 = v58.setAllowBackgroundActivityStart(0);
																				int v60 = v59.execute();
																				int v42 = v60;
																				this.sThreadPriorityBooster.boost();
																				if (this.mLayoutReasons == 0) {
																					WindowManagerService.mWindowPlacerLocked.continueLayout();
																					this.sThreadPriorityBooster.reset();
																					int v11 = v42;
																					Binder.restoreCallingIdentity(v10);
																					return v11;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int startActivityFromRecents(int p1, Bundle p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	if (p2 == 0) {
		SafeActivityOptions v5 = new SafeActivityOptions(v6);
		if (p1 == 0) {
			ActivityOptions v7 = new ActivityOptions(p1);
			ActivityOptions v6 = ;
			SafeActivityOptions v4 = ;
			long v10 = Binder.clearCallingIdentity();
			if (v4 == 0) {
				ActivityOptions v13 = SafeActivityOptions.getOptions(0, 0, 0, p0);
				ActivityOptions v12 = v13;
				this.sThreadPriorityBooster.boost();
				if ( == 0) {
					if ( == 2) {
						if ( == 3) {
							boolean v17 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
							if (v17 != 0) {
								this.mLayoutReasons = 0;
								WindowManagerService.mWindowPlacerLocked.deferLayout();
								if (2 == 2) {
									if ( != 0) {
										AppTransition$$ExternalSyntheticLambda2 v20 = new AppTransition$$ExternalSyntheticLambda2();
										ArgumentPlaceholder v22 = PooledLambda.__(Tas.class);
										Integer v23 = Integer.valueOf(p3);
										PooledPredicate v24 = PooledLambda.obtainPredicate(v20, v22, v23);
										Task v25 = RootWindowContainer.getTask(v24);
										v24.recycle();
										if (v25 == 0) {
											if (2 != 0) {
												Task v27 = ActivityTaskSupervisor.mRecentTasks.getTask(p3);
												if (v27 != 0) {
													Task v19 = 0;
													if (v19 == 0) {
														if ( == 0) {
															TaskDisplayArea v29 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
															TaskDisplayArea v28 = v29;
															Task v31 = TaskDisplayArea.getOrCreateRootHomeTask();
															if (v31 == 0) {
																v31.moveToFront("startActivityFromRecents");
																boolean v33 = ActivityTaskManagerService.mAmInternal.shouldConfirmCredentials(Task.mUserId);
																if (v33 != 0) {
																	ActivityRecord v35 = Task.getRootActivity(1, 0);
																	ActivityRecord v34 = v35;
																	if (v34 == 0) {
																		Intent v36 = Task.intent.addFlags(1048576);
																		this.sThreadPriorityBooster.reset();
																		ActivityStartController v39 = this.mActivityStartController;
																		int v41 = ActivityStartController.checkTargetUser(Task.mUserId, 0, p1, p2, "startActivityFromRecents");
																		ActivityStarter v42 = ActivityStartController.obtainStarter(Task.intent, "startActivityFromRecents");
																		ActivityStarter v43 = v42.setCallingUid(Task.mCallingUid);
																		ActivityStarter v44 = v43.setRealCallingPid(p1);
																		ActivityStarter v45 = v44.setRealCallingUid(p2);
																		ActivityStarter v46 = v45.setCallingPackage(Task.mCallingPackage);
																		ActivityStarter v47 = v46.setCallingFeatureId(Task.mCallingFeatureId);
																		ActivityStarter v48 = v47.setResolvedType(0);
																		ActivityStarter v49 = v48.setResultTo(0);
																		ActivityStarter v50 = v49.setResultWho(0);
																		ActivityStarter v51 = v50.setRequestCode(0);
																		ActivityStarter v52 = v51.setStartFlags(0);
																		ActivityStarter v53 = v52.setActivityOptions(p4);
																		ActivityStarter v54 = v53.setUserId(v41);
																		ActivityStarter v55 = v54.setInTask(v19);
																		ActivityStarter v56 = v55.setOriginatingPendingIntent(0);
																		ActivityStarter v57 = v56.setAllowBackgroundActivityStart(0);
																		int v58 = v57.execute();
																		int v40 = v58;
																		this.sThreadPriorityBooster.boost();
																		if (this.mLayoutReasons == 0) {
																			WindowManagerService.mWindowPlacerLocked.continueLayout();
																			this.sThreadPriorityBooster.reset();
																			int v11 = v40;
																			Binder.restoreCallingIdentity(v10);
																			return v11;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v6 = this.mTaskSupervisor.startActivityFromRecents(v2, v3, p1, v4);\nreturn v6;', 'ActivityOptions v10 = v4.getOptions(ActivityTaskSupervisor);\nthis.mService.deferWindowLayout();\nTask v13 = this.mRootWindowContainer.anyTaskForId(p1, 2, , 1);\nint v21 = v20.startActivityInPackage(Task.mCallingUid, v2, v3, Task.mCallingPackage, Task.mCallingFeatureId, Task.intent, 0, 0, 0, 0, 0, v4, Task.mUserId, v13, "startActivityFromRecents", 0, 0, 0);\nreturn v21;', 'int v42 = v60;\nthis.sThreadPriorityBooster.boost();\nif (this.mLayoutReasons == 0) {\nWindowManagerService.mWindowPlacerLocked.continueLayout();\nthis.sThreadPriorityBooster.reset();\nint v11 = v42;\nBinder.restoreCallingIdentity(v10);\nreturn v11;']

The method startActivityFromRecents has the following similar APIs:

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;IZLandroid/os/IBinder;Landroid/os/Bundle;)V with Similarity Score: 0.8593704104423523
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityOptions v23 = ActivityOptions.makeOpenCrossProfileAppsAnimation();
Bundle v24 = v23.toBundle();
ActivityTaskManagerInternal v27 = this.mInjector.getActivityTaskManagerInternal();
int v28 = v27.startActivityAsUser(p1, p2, p3, v16, p7, 0, , p5);

- API Name: setFrontActivityScreenCompatMode(I)V with Similarity Score: 0.8261332511901855
  - Access Control Level: SYS_OR_SIG and the following code:
int v7 = RootWindowContainer.getChildCount();
Task v9 = v8.getFocusedRootTask();
ActivityRecord v14 = TaskFragment.topRunningActivity(0, 1);
Object v17 = this.mPackages.get(ApplicationInfo.packageName);
CompatibilityInfo v23 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v20,v21);
this.mPackages.put(ApplicationInfo.packageName, v34);

