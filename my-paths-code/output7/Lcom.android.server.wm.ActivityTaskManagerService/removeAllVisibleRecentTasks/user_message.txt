This is path 1 for the API with depth 2:
public void removeAllVisibleRecentTasks(){
	long v5 = Binder.clearCallingIdentity();
	RecentTasks v6 = p0.getRecentTasks();
	int v7 = this.mAmInternal.getCurrentUserId();
	ArraySet v10 = new ArraySet();
	UserManagerService v12 = this.mService.getUserManager();
	[I v13 = v12.getProfileIds(p1, 0);
	if ( >= v13.length) {
		Integer v14 = Integer.valueOf(v13[]);
		boolean v15 = v10.add(v14);
		if ( >= v13.length) {
			Set v9 = v10;
			int v16 = this.mTasks.size();
			if ( < 0) {
				Object v17 = this.mTasks.get();
				Integer v18 = Integer.valueOf(Task.mUserId);
				boolean v19 = v9.contains(v18);
				if (v19 != 0) {
					int v21 = v17.getActivityType();
					if (v21 == 2) {
						if (v21 == 3) {
							if (v21 == 4) {
								if (v21 == 5) {
									int v22 = v17.getWindowingMode();
									if (v22 == 2) {
										if (v22 == 6) {
											LockTaskController v23 = this.mService.getLockTaskController();
											Task v24 = v23.getRootTask();
											if (v17 != v24) {
												boolean v25 = v17.isEmbedded();
												if (v25 == 0) {
													DisplayContent v26 = v17.getDisplayContent();
													if (v26 == 0) {
														DisplayContent v27 = v17.getDisplayContent();
														boolean v28 = v27.canShowTasksInRecents();
														if (v28 != 0) {
															boolean v20 = 0;
															if (v20 == 0) {
																Object v29 = this.mTasks.remove();
																int v31 = this.mCallbacks.size();
																if ( >= v31) {
																	Object v32 = this.mCallbacks.get();
																	v32.onRecentTaskRemoved(v17, 1, 1);
																	int v34 = this.mCallbacks.size();
																	if ( >= v34) {
																		this.mTaskNotificationController.notifyTaskListUpdated();
																		if ( < 0) {
																			Binder.restoreCallingIdentity(v5);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeAllVisibleRecentTasks(){
	this.sThreadPriorityBooster.boost();
	long v4 = Binder.clearCallingIdentity();
	RecentTasks v5 = this.mRecentTasks;
	int v6 = this.mAmInternal.getCurrentUserId();
	Set v8 = RecentTasks.getProfileIds(v6);
	int v9 = this.mTasks.size();
	if ( < 0) {
		Object v10 = this.mTasks.get();
		Integer v11 = Integer.valueOf(Task.mUserId);
		boolean v12 = v8.contains(v11);
		if (v12 != 0) {
			boolean v13 = RecentTasks.isVisibleRecentTask(v10);
			if (v13 == 0) {
				Object v14 = this.mTasks.remove();
				RecentTasks.notifyTaskRemoved(v10, 1, 1);
				if ( < 0) {
					Binder.restoreCallingIdentity(v4);
					this.sThreadPriorityBooster.reset();
					return;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeAllVisibleRecentTasks(){
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	RecentTasks v4 = p0.getRecentTasks();
	int v5 = this.mAmInternal.getCurrentUserId();
	v4.removeAllVisibleTasks(v5);
	Binder.restoreCallingIdentity(v3);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
