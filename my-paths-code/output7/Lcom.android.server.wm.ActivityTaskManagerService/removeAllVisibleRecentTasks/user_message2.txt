The method removeAllVisibleRecentTasks has the following code snippet:

This is path 1 for the API with depth 2:
public void removeAllVisibleRecentTasks(){
	long v5 = Binder.clearCallingIdentity();
	RecentTasks v6 = p0.getRecentTasks();
	int v7 = this.mAmInternal.getCurrentUserId();
	ArraySet v10 = new ArraySet();
	UserManagerService v12 = this.mService.getUserManager();
	[I v13 = v12.getProfileIds(p1, 0);
	if ( >= v13.length) {
		Integer v14 = Integer.valueOf(v13[]);
		boolean v15 = v10.add(v14);
		if ( >= v13.length) {
			Set v9 = v10;
			int v16 = this.mTasks.size();
			if ( < 0) {
				Object v17 = this.mTasks.get();
				Integer v18 = Integer.valueOf(Task.mUserId);
				boolean v19 = v9.contains(v18);
				if (v19 != 0) {
					int v21 = v17.getActivityType();
					if (v21 == 2) {
						if (v21 == 3) {
							if (v21 == 4) {
								if (v21 == 5) {
									int v22 = v17.getWindowingMode();
									if (v22 == 2) {
										if (v22 == 6) {
											LockTaskController v23 = this.mService.getLockTaskController();
											Task v24 = v23.getRootTask();
											if (v17 != v24) {
												boolean v25 = v17.isEmbedded();
												if (v25 == 0) {
													DisplayContent v26 = v17.getDisplayContent();
													if (v26 == 0) {
														DisplayContent v27 = v17.getDisplayContent();
														boolean v28 = v27.canShowTasksInRecents();
														if (v28 != 0) {
															boolean v20 = 0;
															if (v20 == 0) {
																Object v29 = this.mTasks.remove();
																int v31 = this.mCallbacks.size();
																if ( >= v31) {
																	Object v32 = this.mCallbacks.get();
																	v32.onRecentTaskRemoved(v17, 1, 1);
																	int v34 = this.mCallbacks.size();
																	if ( >= v34) {
																		this.mTaskNotificationController.notifyTaskListUpdated();
																		if ( < 0) {
																			Binder.restoreCallingIdentity(v5);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void removeAllVisibleRecentTasks(){
	WindowManagerThreadPriorityBooster.boost();
	long v6 = Binder.clearCallingIdentity();
	RecentTasks v7 = p0.getRecentTasks();
	int v8 = this.mAmInternal.getCurrentUserId();
	ArraySet v11 = new ArraySet();
	UserManagerService v13 = this.mService.getUserManager();
	[I v14 = v13.getProfileIds(p1, 0);
	if ( >= v14.length) {
		Integer v15 = Integer.valueOf(v14[]);
		boolean v16 = v11.add(v15);
		if ( >= v14.length) {
			Set v10 = v11;
			int v17 = this.mTasks.size();
			if ( < 0) {
				Object v18 = this.mTasks.get();
				Integer v19 = Integer.valueOf(Task.mUserId);
				boolean v20 = v10.contains(v19);
				if (v20 != 0) {
					int v22 = v18.getActivityType();
					if (v22 == 2) {
						if (v22 == 3) {
							if (v22 == 4) {
								if (v22 == 5) {
									int v23 = v18.getWindowingMode();
									if (v23 == 2) {
										if (v23 == 6) {
											LockTaskController v24 = this.mService.getLockTaskController();
											Task v25 = v24.getRootTask();
											if (v18 != v25) {
												boolean v26 = v18.isEmbedded();
												if (v26 == 0) {
													DisplayContent v27 = v18.getDisplayContent();
													if (v27 == 0) {
														DisplayContent v28 = v18.getDisplayContent();
														boolean v29 = v28.canShowTasksInRecents();
														if (v29 != 0) {
															boolean v21 = 0;
															if (v21 == 0) {
																Object v30 = this.mTasks.remove();
																int v32 = this.mCallbacks.size();
																if ( >= v32) {
																	Object v33 = this.mCallbacks.get();
																	v33.onRecentTaskRemoved(v18, 1, 1);
																	int v35 = this.mCallbacks.size();
																	if ( >= v35) {
																		this.mTaskNotificationController.notifyTaskListUpdated();
																		if ( < 0) {
																			Binder.restoreCallingIdentity(v6);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void removeAllVisibleRecentTasks(){
	long v5 = Binder.clearCallingIdentity();
	RecentTasks v6 = p0.getRecentTasks();
	int v7 = this.mAmInternal.getCurrentUserId();
	ArraySet v10 = new ArraySet();
	UserManagerService v12 = this.mService.getUserManager();
	[I v13 = v12.getProfileIds(p1, 0);
	if ( >= v13.length) {
		Integer v14 = Integer.valueOf(v13[]);
		boolean v15 = v10.add(v14);
		if ( >= v13.length) {
			Set v9 = v10;
			int v16 = this.mTasks.size();
			if ( < 0) {
				Object v17 = this.mTasks.get();
				Integer v18 = Integer.valueOf(Task.mUserId);
				boolean v19 = v9.contains(v18);
				if (v19 != 0) {
					int v21 = v17.getActivityType();
					if (v21 == 2) {
						if (v21 == 3) {
							if (v21 == 4) {
								if (v21 == 5) {
									int v22 = v17.getWindowingMode();
									if (v22 == 2) {
										if (v22 == 6) {
											LockTaskController v23 = this.mService.getLockTaskController();
											Task v24 = v23.getRootTask();
											if (v17 != v24) {
												boolean v25 = v17.isEmbedded();
												if (v25 == 0) {
													DisplayContent v26 = v17.getDisplayContent();
													if (v26 == 0) {
														DisplayContent v27 = v17.getDisplayContent();
														boolean v28 = v27.canShowTasksInRecents();
														if (v28 != 0) {
															boolean v20 = 1;
															if (v20 == 0) {
																Object v29 = this.mTasks.remove();
																int v31 = this.mCallbacks.size();
																if ( >= v31) {
																	Object v32 = this.mCallbacks.get();
																	v32.onRecentTaskRemoved(v17, 1, 1);
																	int v34 = this.mCallbacks.size();
																	if ( >= v34) {
																		this.mTaskNotificationController.notifyTaskListUpdated();
																		if ( < 0) {
																			Binder.restoreCallingIdentity(v5);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v29 = this.mTasks.remove();\nv32.onRecentTaskRemoved(v17, 1, 1);', 'Object v14 = this.mTasks.remove();\nRecentTasks.notifyTaskRemoved(v10, 1, 1);', 'v4.removeAllVisibleTasks(v5);']

The method removeAllVisibleRecentTasks has the following similar APIs:

- API Name: removeRootTasksInWindowingModes([I)V with Similarity Score: 0.7857130169868469
  - Access Control Level: SYS_OR_SIG and the following code:
v7.removeRootTasksInWindowingModes(p1);

- API Name: getAppTasks(Ljava/lang/String;)Ljava/util/List; with Similarity Score: 0.7405896782875061
  - Access Control Level: SYS_OR_SIG and the following code:
ArrayList v8 = this.mRecentTasks.getAppTasksList(v4, p1);
List v5 = v8;
return v5;

