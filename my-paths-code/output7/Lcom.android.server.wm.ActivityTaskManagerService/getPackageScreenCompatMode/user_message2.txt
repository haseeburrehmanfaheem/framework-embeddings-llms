The method getPackageScreenCompatMode has the following code snippet:

This is path 1 for the API with depth 2:
public int getPackageScreenCompatMode(String p1){
	if (v3 != 0) {
		IPackageManager v9 = ActivityThread.getPackageManager();
		IPackageManager v8 = v9;
		ApplicationInfo v10 = v8.getApplicationInfo(p1, 0, 0);
		if ( != 0) {
			CompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked();
			boolean v13 = v12.alwaysSupportsScreen();
			if (v13 == 0) {
				boolean v14 = v12.neverSupportsScreen();
				if (v14 == 0) {
					boolean v15 = CompatModePackages.getPackageCompatModeEnabledLocked();
					int v11 = v15;
					int v7 = v11;
					return v7;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int getPackageScreenCompatMode(String p1){
	if (v3 != 0) {
		WindowManagerThreadPriorityBooster.boost();
		IPackageManager v10 = ActivityThread.getPackageManager();
		IPackageManager v9 = v10;
		ApplicationInfo v11 = v9.getApplicationInfo(p1, 0, 0);
		if ( != 0) {
			CompatibilityInfo v13 = CompatModePackages.compatibilityInfoForPackageLocked();
			boolean v14 = v13.alwaysSupportsScreen();
			if (v14 == 0) {
				boolean v15 = v13.neverSupportsScreen();
				if (v15 == 0) {
					boolean v16 = CompatModePackages.getPackageCompatModeEnabledLocked();
					int v12 = v16;
					int v8 = v12;
					return v8;
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int getPackageScreenCompatMode(String p1){
	if (v3 != 0) {
		IPackageManager v9 = ActivityThread.getPackageManager();
		IPackageManager v8 = v9;
		ApplicationInfo v10 = v8.getApplicationInfo(p1, 0, 0);
		if ( != 0) {
			CompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked();
			boolean v13 = v12.alwaysSupportsScreen();
			if (v13 == 0) {
				boolean v14 = v12.neverSupportsScreen();
				if (v14 == 0) {
					boolean v15 = CompatModePackages.getPackageCompatModeEnabledLocked();
					int v11 = v15;
					int v7 = v11;
					WindowManagerThreadPriorityBooster.reset();
					return v7;
				}
			}
		}
	}
}

and the following sink code:
['ActivityTaskManagerService.enforceNotIsolatedCaller("getPackageScreenCompatMode");\nint v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1);\nreturn v3;', 'IPackageManager v7 = AppGlobals.getPackageManager();\nApplicationInfo v8 = v7.getApplicationInfo(p1, 0, 0);\nint v9 = CompatModePackages.computeCompatModeLocked();\nreturn v6;', 'IPackageManager v9 = ActivityThread.getPackageManager();\nApplicationInfo v10 = v8.getApplicationInfo(p1, 0, 0);\nCompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked();\nboolean v13 = v12.alwaysSupportsScreen();\nint v11 = v15;\nreturn v7;']

The method getPackageScreenCompatMode has the following similar APIs:

- API Name: getPackageAskScreenCompat(Ljava/lang/String;)Z with Similarity Score: 0.8842778205871582
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = this.mCompatModePackages.getPackageAskCompatModeLocked(p1);
return v3;

- API Name: setPackageScreenCompatMode(Ljava/lang/String;I)V with Similarity Score: 0.8822582960128784
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatModePackages.setPackageScreenCompatModeLocked(p1, p2);

