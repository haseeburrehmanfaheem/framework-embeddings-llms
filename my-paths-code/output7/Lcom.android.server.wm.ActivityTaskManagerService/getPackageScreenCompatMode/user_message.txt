This is path 1 for the API with depth 2:
public int getPackageScreenCompatMode(String p1){
	if (v3 != 0) {
		IPackageManager v9 = ActivityThread.getPackageManager();
		IPackageManager v8 = v9;
		ApplicationInfo v10 = v8.getApplicationInfo(p1, 0, 0);
		if ( != 0) {
			CompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked();
			boolean v13 = v12.alwaysSupportsScreen();
			if (v13 == 0) {
				boolean v14 = v12.neverSupportsScreen();
				if (v14 == 0) {
					boolean v15 = CompatModePackages.getPackageCompatModeEnabledLocked();
					int v11 = v15;
					int v7 = v11;
					return v7;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int getPackageScreenCompatMode(String p1){
	if (v3 != 0) {
		this.sThreadPriorityBooster.boost();
		IPackageManager v7 = AppGlobals.getPackageManager();
		ApplicationInfo v8 = v7.getApplicationInfo(p1, 0, 0);
		if ( != 0) {
			int v9 = CompatModePackages.computeCompatModeLocked();
			int v6 = v9;
			this.sThreadPriorityBooster.reset();
			return v6;
		}
	}
}


This is path 3 for the API with depth 0:
public int getPackageScreenCompatMode(String p1){
	ActivityTaskManagerService.enforceNotIsolatedCaller("getPackageScreenCompatMode");
	WindowManagerService.boostPriorityForLockedSection();
	int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v3;
}
