This is path 1 for the API with depth 2:
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v4 = this.mAmInternal.handleIncomingUser(v2, v1, p3, 0, 0, "getRecentTasks", 0);
	int v3 = v4;
	int v5 = Binder.getCallingPid();
	if (v9 != 0) {
		IPackageManager v11 = ActivityThread.getPackageManager();
		IPackageManager v10 = v11;
		boolean v12 = v10.isUidPrivileged(v1);
		if (v12 == 0) {
			if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
				String v13 = String.valueOf("getRecentTasks");
				Object v14 = new Object(2);
				Long v15 = Long.valueOf(v1);
				ProtoLogImpl v17 = ProtoLogImpl.getSingleInstance();
				v17.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v14);
				if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
					String v19 = String.valueOf("getRecentTasks");
					Object v20 = new Object(2);
					Long v21 = Long.valueOf(v1);
					ProtoLogImpl v23 = ProtoLogImpl.getSingleInstance();
					v23.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v20);
					boolean v6 = ;
					ParceledListSlice v29 = new ParceledListSlice(v30);
					if ((p2 & 1) == 0) {
						boolean v31 = RecentTasks.isUserRunning(p4, 4);
						if (v31 != 0) {
							RecentTasks.loadUserRecentsLocked(p4);
							Set v33 = RecentTasks.getProfileIds(p4);
							Integer v34 = Integer.valueOf(p4);
							boolean v35 = v33.add(v34);
							ArrayList v36 = new ArrayList();
							int v38 = this.mTasks.size();
							if ( >= v38) {
								Object v39 = this.mTasks.get();
								boolean v40 = RecentTasks.isVisibleRecentTask(v39);
								if (v40 == 0) {
									boolean v41 = RecentTasks.isInVisibleRange(v39, , ( + 1), );
									if (v41 == 0) {
										int v42 = v36.size();
										if (v42 < p1) {
											Integer v43 = Integer.valueOf(Task.mUserId);
											boolean v44 = v33.contains(v43);
											if (v44 != 0) {
												if (Task.realActivitySuspended == 0) {
													if (p3 != 0) {
														boolean v45 = v39.isActivityTypeHome();
														if (v45 != 0) {
															if (Task.effectiveUid == p5) {
																if (Task.autoRemoveRecents == 0) {
																	ActivityRecord v46 = v39.getTopNonFinishingActivity();
																	if (v46 != 0) {
																		if ( >= v38) {
																			ArrayList v30 = v36;
																			ParceledListSlice v28 = v29;
																			return v28;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v4 = this.mAmInternal.handleIncomingUser(v2, v1, p3, 0, 0, "getRecentTasks", 0);
	int v3 = v4;
	int v5 = Binder.getCallingPid();
	if (v9 != 0) {
		IPackageManager v10 = AppGlobals.getPackageManager();
		boolean v11 = v10.isUidPrivileged(v1);
		if (v11 == 0) {
			if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
				String v12 = String.valueOf("getRecentTasks");
				Object v13 = new Object(2);
				Long v14 = Long.valueOf(v1);
				ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v13);
				if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
					String v16 = String.valueOf("getRecentTasks");
					Object v17 = new Object(2);
					Long v18 = Long.valueOf(v1);
					ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v17);
					boolean v6 = ;
					this.sThreadPriorityBooster.boost();
					ParceledListSlice v23 = new ParceledListSlice(v24);
					ArrayList v24 = RecentTasks.getRecentTasksImpl(p1, p2, v6, v3, v1);
					ParceledListSlice v22 = v23;
					this.sThreadPriorityBooster.reset();
					return v22;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.handleIncomingUser(v2, v1, p3, "getRecentTasks");
	int v4 = Binder.getCallingPid();
	boolean v5 = p0.isGetTasksAllowed("getRecentTasks", v4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	ParceledListSlice v7 = this.mRecentTasks.getRecentTasks(p1, p2, v5, v3, v1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v7;
}
