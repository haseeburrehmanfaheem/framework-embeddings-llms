The method setFocusedTask has the following code snippet:

This is path 1 for the API with depth 2:
public void setFocusedTask(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		String v7 = String.valueOf(0);
		Object v8 = new Object(2);
		Long v9 = Long.valueOf(p1);
		ProtoLogImpl v11 = ProtoLogImpl.getSingleInstance();
		v11.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v8);
		Task v14 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
		Task v13 = v14;
		if (v13 != 0) {
			WindowContainer v16 = Task.getParent();
			if (v16 != 0) {
				Task$$ExternalSyntheticLambda6 v17 = new Task$$ExternalSyntheticLambda6();
				ActivityRecord v19 = Task.getActivity(v17);
				ActivityRecord v15 = v19;
				if (v15 != 0) {
					boolean v21 = ActivityRecord.isFocusable();
					if (v21 != 0) {
						Task v22 = ActivityRecord.getRootTask();
						if (v22 != 0) {
							if (DisplayContent.mFocusedApp == 0) {
								if (this.task != this.task) {
									ActivityRecord$$ExternalSyntheticLambda4 v23 = new ActivityRecord$$ExternalSyntheticLambda4();
									Task v25 = WindowContainer.mDisplayContent.getTask(v23, 1);
									if (this.task != v25) {
										if (DisplayContent.mFocusedApp != ActivityRecord) {
											if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
												String v26 = String.valueOf(ActivityRecord);
												Object v27 = new Object(1);
												ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v27);
												boolean v29 = WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
												boolean v30 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
												boolean v31 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
												boolean v20 = (v31 ^ 1);
												if (v20 == 0) {
													if (0 == 0) {
														boolean v33 = ActivityRecord.isFocusable();
														if (v33 == 0) {
															boolean v34 = ActivityRecord.canReceiveKeys();
															if (v34 != 0) {
																boolean v35 = ActivityRecord.isAlwaysFocusable();
																if (v35 == 0) {
																	boolean v32 = ;
																	if (v32 == 0) {
																		WindowContainer v37 = ActivityRecord.getParent();
																		if (v37 == 0) {
																			TaskFragment v38 = v37.asTaskFragment();
																			TaskFragment v36 = ;
																			if (v36 == 0) {
																				if (this.mIsEmbedded == 0) {
																					WindowContainer v40 = TaskFragment.getParent();
																					if (v40 == 0) {
																						TaskFragment v41 = v40.asTaskFragment();
																						if (v41 == 0) {
																							boolean v42 = v41.isEmbedded();
																							if (v42 == 0) {
																								boolean v39 = ;
																								if (v39 == 0) {
																									DisplayContent v43 = this.mDisplayContent;
																									if (p2 == 0) {
																										DisplayContent v45 = p2.getDisplayContent();
																										if (v45 == DisplayContent) {
																											TaskDisplayArea v46 = p2.getDisplayArea();
																											DisplayContent.onLastFocusedTaskDisplayAreaChanged(v46);
																											if (this.mFocusedApp != p2) {
																												if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																													String v48 = String.valueOf(p2);
																													int v49 = DisplayContent.getDisplayId();
																													String v50 = Debug.getCallers(4);
																													String v51 = String.valueOf(v50);
																													Object v52 = new Object(3);
																													Long v53 = Long.valueOf(v49);
																													ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v52);
																													if (this.mFocusedApp == 0) {
																														Task v55 = this.mFocusedApp.getTask();
																														if (p2 == 0) {
																															Task v56 = p2.getTask();
																															this.mFocusedApp = p2;
																															if ( == ) {
																																if ( == 0) {
																																	.onAppFocusChanged(0);
																																	if ( == 0) {
																																		.onAppFocusChanged(1);
																																		InputMonitor v59 = DisplayContent.getInputMonitor();
																																		v59.setFocusedAppLw(p2);
																																		DisplayContent.updateTouchExcludeRegion();
																																		boolean v44 = 1;
																																		Trace.traceBegin(32, "wmUpdateFocus");
																																		boolean v64 = this.mRoot.updateFocusedWindowLocked(0, 1);
																																		Trace.traceEnd(32);
																																		boolean v62 = v64;
																																		Binder.restoreCallingIdentity(v2);
																																		return;
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setFocusedTask(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		String v8 = String.valueOf(0);
		Object v9 = new Object(2);
		Long v10 = Long.valueOf(p1);
		ProtoLogImpl v12 = ProtoLogImpl.getSingleInstance();
		v12.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v9);
		Task v15 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
		Task v14 = v15;
		if (v14 != 0) {
			WindowContainer v17 = Task.getParent();
			if (v17 != 0) {
				Task$$ExternalSyntheticLambda6 v18 = new Task$$ExternalSyntheticLambda6();
				ActivityRecord v20 = Task.getActivity(v18);
				ActivityRecord v16 = v20;
				if (v16 != 0) {
					boolean v22 = ActivityRecord.isFocusable();
					if (v22 != 0) {
						Task v23 = ActivityRecord.getRootTask();
						if (v23 != 0) {
							if (DisplayContent.mFocusedApp == 0) {
								if (this.task != this.task) {
									ActivityRecord$$ExternalSyntheticLambda4 v24 = new ActivityRecord$$ExternalSyntheticLambda4();
									Task v26 = WindowContainer.mDisplayContent.getTask(v24, 1);
									if (this.task != v26) {
										if (DisplayContent.mFocusedApp != ActivityRecord) {
											if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
												String v27 = String.valueOf(ActivityRecord);
												Object v28 = new Object(1);
												ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v28);
												boolean v30 = WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
												boolean v31 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
												boolean v32 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
												boolean v21 = (v32 ^ 1);
												if (v21 == 0) {
													if (0 == 0) {
														boolean v34 = ActivityRecord.isFocusable();
														if (v34 == 0) {
															boolean v35 = ActivityRecord.canReceiveKeys();
															if (v35 != 0) {
																boolean v36 = ActivityRecord.isAlwaysFocusable();
																if (v36 == 0) {
																	boolean v33 = ;
																	if (v33 == 0) {
																		WindowContainer v38 = ActivityRecord.getParent();
																		if (v38 == 0) {
																			TaskFragment v39 = v38.asTaskFragment();
																			TaskFragment v37 = ;
																			if (v37 == 0) {
																				if (this.mIsEmbedded == 0) {
																					WindowContainer v41 = TaskFragment.getParent();
																					if (v41 == 0) {
																						TaskFragment v42 = v41.asTaskFragment();
																						if (v42 == 0) {
																							boolean v43 = v42.isEmbedded();
																							if (v43 == 0) {
																								boolean v40 = ;
																								if (v40 == 0) {
																									DisplayContent v44 = this.mDisplayContent;
																									if (p2 == 0) {
																										DisplayContent v46 = p2.getDisplayContent();
																										if (v46 == DisplayContent) {
																											TaskDisplayArea v47 = p2.getDisplayArea();
																											DisplayContent.onLastFocusedTaskDisplayAreaChanged(v47);
																											if (this.mFocusedApp != p2) {
																												if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																													String v49 = String.valueOf(p2);
																													int v50 = DisplayContent.getDisplayId();
																													String v51 = Debug.getCallers(4);
																													String v52 = String.valueOf(v51);
																													Object v53 = new Object(3);
																													Long v54 = Long.valueOf(v50);
																													ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v53);
																													if (this.mFocusedApp == 0) {
																														Task v56 = this.mFocusedApp.getTask();
																														if (p2 == 0) {
																															Task v57 = p2.getTask();
																															this.mFocusedApp = p2;
																															if ( == ) {
																																if ( == 0) {
																																	.onAppFocusChanged(0);
																																	if ( == 0) {
																																		.onAppFocusChanged(1);
																																		InputMonitor v60 = DisplayContent.getInputMonitor();
																																		v60.setFocusedAppLw(p2);
																																		DisplayContent.updateTouchExcludeRegion();
																																		boolean v45 = 1;
																																		Trace.traceBegin(32, "wmUpdateFocus");
																																		boolean v65 = this.mRoot.updateFocusedWindowLocked(0, 1);
																																		Trace.traceEnd(32);
																																		boolean v63 = v65;
																																		Binder.restoreCallingIdentity(v2);
																																		return;
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setFocusedTask(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		String v7 = String.valueOf(0);
		Object v8 = new Object(2);
		Long v9 = Long.valueOf(p1);
		ProtoLogImpl v11 = ProtoLogImpl.getSingleInstance();
		v11.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v8);
		Task v14 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
		Task v13 = v14;
		if (v13 != 0) {
			WindowContainer v16 = Task.getParent();
			if (v16 != 0) {
				Task$$ExternalSyntheticLambda6 v17 = new Task$$ExternalSyntheticLambda6();
				ActivityRecord v19 = Task.getActivity(v17);
				ActivityRecord v15 = v19;
				if (v15 != 0) {
					boolean v21 = ActivityRecord.isFocusable();
					if (v21 != 0) {
						Task v22 = ActivityRecord.getRootTask();
						if (v22 != 0) {
							if (DisplayContent.mFocusedApp == 0) {
								if (this.task != this.task) {
									ActivityRecord$$ExternalSyntheticLambda4 v23 = new ActivityRecord$$ExternalSyntheticLambda4();
									Task v25 = WindowContainer.mDisplayContent.getTask(v23, 1);
									if (this.task != v25) {
										if (DisplayContent.mFocusedApp != ActivityRecord) {
											if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
												String v26 = String.valueOf(ActivityRecord);
												Object v27 = new Object(1);
												ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v27);
												boolean v29 = WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
												boolean v30 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
												boolean v31 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
												boolean v20 = (v31 ^ 1);
												if (v20 == 0) {
													if (0 == 0) {
														boolean v33 = ActivityRecord.isFocusable();
														if (v33 == 0) {
															boolean v34 = ActivityRecord.canReceiveKeys();
															if (v34 != 0) {
																boolean v35 = ActivityRecord.isAlwaysFocusable();
																if (v35 == 0) {
																	boolean v32 = ;
																	if (v32 == 0) {
																		WindowContainer v37 = ActivityRecord.getParent();
																		if (v37 == 0) {
																			TaskFragment v38 = v37.asTaskFragment();
																			TaskFragment v36 = ;
																			if (v36 == 0) {
																				if (this.mIsEmbedded == 0) {
																					WindowContainer v40 = TaskFragment.getParent();
																					if (v40 == 0) {
																						TaskFragment v41 = v40.asTaskFragment();
																						if (v41 == 0) {
																							boolean v42 = v41.isEmbedded();
																							if (v42 == 0) {
																								boolean v39 = ;
																								if (v39 == 0) {
																									DisplayContent v43 = this.mDisplayContent;
																									if (p2 == 0) {
																										DisplayContent v45 = p2.getDisplayContent();
																										if (v45 == DisplayContent) {
																											TaskDisplayArea v46 = p2.getDisplayArea();
																											DisplayContent.onLastFocusedTaskDisplayAreaChanged(v46);
																											if (this.mFocusedApp != p2) {
																												if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																													String v48 = String.valueOf(p2);
																													int v49 = DisplayContent.getDisplayId();
																													String v50 = Debug.getCallers(4);
																													String v51 = String.valueOf(v50);
																													Object v52 = new Object(3);
																													Long v53 = Long.valueOf(v49);
																													ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v52);
																													if (this.mFocusedApp == 0) {
																														Task v55 = this.mFocusedApp.getTask();
																														if (p2 == 0) {
																															Task v56 = p2.getTask();
																															this.mFocusedApp = p2;
																															if ( == ) {
																																if ( == 0) {
																																	.onAppFocusChanged(0);
																																	if ( == 0) {
																																		.onAppFocusChanged(1);
																																		InputMonitor v59 = DisplayContent.getInputMonitor();
																																		v59.setFocusedAppLw(p2);
																																		DisplayContent.updateTouchExcludeRegion();
																																		boolean v44 = 1;
																																		Trace.traceBegin(32, "wmUpdateFocus");
																																		boolean v64 = this.mRoot.updateFocusedWindowLocked(0, 1);
																																		Trace.traceEnd(32);
																																		boolean v62 = v64;
																																		WindowManagerThreadPriorityBooster.reset();
																																		Binder.restoreCallingIdentity(v2);
																																		return;
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Task v14 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);\nint var2 = getStateLocked(par1, par2);\nTask$$ExternalSyntheticLambda6 v17 = new Task$$ExternalSyntheticLambda6();\nActivityRecord v19 = Task.getActivity(v17);', 'this.mRootWindowContainer.anyTaskForId(p1, 0);\nActivityRecord v11 = v10.topRunningActivityLocked();\nboolean v12 = v11.moveFocusableActivityToTop("setFocusedTask");', 'p0.setFocusedTask(p1, 0);']

The method setFocusedTask has the following similar APIs:

- API Name: getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo; with Similarity Score: 0.8815128207206726
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = p0.getTopDisplayFocusedRootTask();
ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);

- API Name: isTopActivityImmersive()Z with Similarity Score: 0.876052975654602
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityTaskManagerService.enforceNotIsolatedCaller("isTopActivityImmersive");
WindowManagerService.boostPriorityForLockedSection();
Task v3 = p0.getTopDisplayFocusedRootTask();
ActivityRecord v4 = v3.topRunningActivity();

