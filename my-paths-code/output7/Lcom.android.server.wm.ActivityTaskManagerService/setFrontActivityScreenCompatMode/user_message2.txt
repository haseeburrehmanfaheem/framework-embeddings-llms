The method setFrontActivityScreenCompatMode has the following code snippet:

This is path 1 for the API with depth 2:
public void setFrontActivityScreenCompatMode(int p1){
	int v7 = RootWindowContainer.getChildCount();
	if ( < 0) {
		WindowContainer v8 = RootWindowContainer.getChildAt();
		Task v9 = v8.getFocusedRootTask();
		if (v9 == 0) {
			if ( < 0) {
				WindowContainer v10 = RootWindowContainer.getChildAt();
				Task v11 = v10.getFocusedRootTask();
				if (v11 == 0) {
					Task v6 = v11;
					Task v5 = v6;
					if (v5 == 0) {
						ActivityRecord v14 = TaskFragment.topRunningActivity(0, 1);
						ActivityRecord v13 = v14;
						ActivityRecord v12 = v13;
						if ( != 0) {
							Object v17 = this.mPackages.get(ApplicationInfo.packageName);
							if (v17 == 0) {
								int v18 = v17.intValue();
								int v16 = ;
								if (p1 == 0) {
									if (p1 == 1) {
										if (p1 == 2) {
											if ((v16 & 2) != 0) {
												if ( == 0) {
													boolean v20 = CompatModePackages.getPackageCompatModeEnabledLocked(p1);
													float v21 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
													Configuration v22 = this.mService.getGlobalConfiguration();
													CompatibilityInfo v23 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v20,v21);
													CompatibilityInfo v19 = v23;
													boolean v25 = v19.alwaysSupportsScreen();
													if (v25 == 0) {
														boolean v33 = v19.neverSupportsScreen();
														if (v33 == 0) {
															if ( == v16) {
																if ( == 0) {
																	Integer v34 = Integer.valueOf();
																	Object v35 = this.mPackages.put(ApplicationInfo.packageName, v34);
																	boolean v37 = CompatModePackages.getPackageCompatModeEnabledLocked(p1);
																	float v38 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
																	Configuration v39 = this.mService.getGlobalConfiguration();
																	CompatibilityInfo v40 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v37,v38);
																	CompatibilityInfo v36 = v40;
																	this.mHandler.removeMessages(300);
																	Message v44 = this.mHandler.obtainMessage(300);
																	boolean v45 = this.mHandler.sendMessageDelayed(v44, 10000);
																	Task v47 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
																	Task v46 = v47;
																	ActivityRecord v49 = Task.topRunningActivity();
																	Task$$ExternalSyntheticLambda28 v50 = new Task$$ExternalSyntheticLambda28();
																	ArgumentPlaceholder v52 = PooledLambda.__(ActivityRecor.class);
																	PooledConsumer v53 = PooledLambda.obtainConsumer(v50, v52, v49, ApplicationInfo.packageName);
																	Task.forAllActivities(v53);
																	v53.recycle();
																	ActivityRecord v48 = v49;
																	SparseArray v56 = this.mPidMap;
																	int v57 = v56.size();
																	if ( < 0) {
																		if (v48 == 0) {
																			boolean v59 = ActivityRecord.ensureActivityConfiguration(0, 0, 0);
																			boolean v58 = v59;
																			Task.ensureActivitiesVisible(v48, 0, 0, 1);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setFrontActivityScreenCompatMode(int p1){
	WindowManagerThreadPriorityBooster.boost();
	int v8 = RootWindowContainer.getChildCount();
	if ( < 0) {
		WindowContainer v9 = RootWindowContainer.getChildAt();
		Task v10 = v9.getFocusedRootTask();
		if (v10 == 0) {
			if ( < 0) {
				WindowContainer v11 = RootWindowContainer.getChildAt();
				Task v12 = v11.getFocusedRootTask();
				if (v12 == 0) {
					Task v7 = v12;
					Task v6 = v7;
					if (v6 == 0) {
						ActivityRecord v15 = TaskFragment.topRunningActivity(0, 1);
						ActivityRecord v14 = v15;
						ActivityRecord v13 = v14;
						if ( != 0) {
							Object v18 = this.mPackages.get(ApplicationInfo.packageName);
							if (v18 == 0) {
								int v19 = v18.intValue();
								int v17 = ;
								if (p1 == 0) {
									if (p1 == 1) {
										if (p1 == 2) {
											if ((v17 & 2) != 0) {
												if ( == 0) {
													boolean v21 = CompatModePackages.getPackageCompatModeEnabledLocked(p1);
													float v22 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
													Configuration v23 = this.mService.getGlobalConfiguration();
													CompatibilityInfo v24 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v21,v22);
													CompatibilityInfo v20 = v24;
													boolean v26 = v20.alwaysSupportsScreen();
													if (v26 == 0) {
														boolean v34 = v20.neverSupportsScreen();
														if (v34 == 0) {
															if ( == v17) {
																if ( == 0) {
																	Integer v35 = Integer.valueOf();
																	Object v36 = this.mPackages.put(ApplicationInfo.packageName, v35);
																	boolean v38 = CompatModePackages.getPackageCompatModeEnabledLocked(p1);
																	float v39 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
																	Configuration v40 = this.mService.getGlobalConfiguration();
																	CompatibilityInfo v41 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v38,v39);
																	CompatibilityInfo v37 = v41;
																	this.mHandler.removeMessages(300);
																	Message v45 = this.mHandler.obtainMessage(300);
																	boolean v46 = this.mHandler.sendMessageDelayed(v45, 10000);
																	Task v48 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
																	Task v47 = v48;
																	ActivityRecord v50 = Task.topRunningActivity();
																	Task$$ExternalSyntheticLambda28 v51 = new Task$$ExternalSyntheticLambda28();
																	ArgumentPlaceholder v53 = PooledLambda.__(ActivityRecor.class);
																	PooledConsumer v54 = PooledLambda.obtainConsumer(v51, v53, v50, ApplicationInfo.packageName);
																	Task.forAllActivities(v54);
																	v54.recycle();
																	ActivityRecord v49 = v50;
																	SparseArray v57 = this.mPidMap;
																	int v58 = v57.size();
																	if ( < 0) {
																		if (v49 == 0) {
																			boolean v60 = ActivityRecord.ensureActivityConfiguration(0, 0, 0);
																			boolean v59 = v60;
																			Task.ensureActivitiesVisible(v49, 0, 0, 1);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setFrontActivityScreenCompatMode(int p1){
	int v7 = RootWindowContainer.getChildCount();
	if ( < 0) {
		WindowContainer v8 = RootWindowContainer.getChildAt();
		Task v9 = v8.getFocusedRootTask();
		if (v9 == 0) {
			if ( < 0) {
				WindowContainer v10 = RootWindowContainer.getChildAt();
				Task v11 = v10.getFocusedRootTask();
				if (v11 == 0) {
					Task v6 = v11;
					Task v5 = v6;
					if (v5 == 0) {
						ActivityRecord v14 = TaskFragment.topRunningActivity(0, 1);
						ActivityRecord v13 = v14;
						ActivityRecord v12 = v13;
						if ( != 0) {
							Object v17 = this.mPackages.get(ApplicationInfo.packageName);
							if (v17 == 0) {
								int v18 = v17.intValue();
								int v16 = ;
								if (p1 == 0) {
									if (p1 == 1) {
										if (p1 == 2) {
											if ((v16 & 2) != 0) {
												if ( == 0) {
													boolean v20 = CompatModePackages.getPackageCompatModeEnabledLocked(p1);
													float v21 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
													Configuration v22 = this.mService.getGlobalConfiguration();
													CompatibilityInfo v23 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v20,v21);
													CompatibilityInfo v19 = v23;
													boolean v25 = v19.alwaysSupportsScreen();
													if (v25 == 0) {
														boolean v33 = v19.neverSupportsScreen();
														if (v33 == 0) {
															if ( == v16) {
																if ( == 0) {
																	Integer v34 = Integer.valueOf();
																	Object v35 = this.mPackages.put(ApplicationInfo.packageName, v34);
																	boolean v37 = CompatModePackages.getPackageCompatModeEnabledLocked(p1);
																	float v38 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
																	Configuration v39 = this.mService.getGlobalConfiguration();
																	CompatibilityInfo v40 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v37,v38);
																	CompatibilityInfo v36 = v40;
																	this.mHandler.removeMessages(300);
																	Message v44 = this.mHandler.obtainMessage(300);
																	boolean v45 = this.mHandler.sendMessageDelayed(v44, 10000);
																	Task v47 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
																	Task v46 = v47;
																	ActivityRecord v49 = Task.topRunningActivity();
																	Task$$ExternalSyntheticLambda28 v50 = new Task$$ExternalSyntheticLambda28();
																	ArgumentPlaceholder v52 = PooledLambda.__(ActivityRecor.class);
																	PooledConsumer v53 = PooledLambda.obtainConsumer(v50, v52, v49, ApplicationInfo.packageName);
																	Task.forAllActivities(v53);
																	v53.recycle();
																	ActivityRecord v48 = v49;
																	SparseArray v56 = this.mPidMap;
																	int v57 = v56.size();
																	if ( < 0) {
																		if (v48 == 0) {
																			boolean v59 = ActivityRecord.ensureActivityConfiguration(0, 0, 0);
																			boolean v58 = v59;
																			Task.ensureActivitiesVisible(v48, 0, 0, 1);
																			WindowManagerThreadPriorityBooster.reset();
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v7 = RootWindowContainer.getChildCount();\nTask v9 = v8.getFocusedRootTask();\nActivityRecord v14 = TaskFragment.topRunningActivity(0, 1);\nObject v17 = this.mPackages.get(ApplicationInfo.packageName);\nCompatibilityInfo v23 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v20,v21);\nthis.mPackages.put(ApplicationInfo.packageName, v34);', 'Message v44 = this.mHandler.obtainMessage(300);\nboolean v45 = this.mHandler.sendMessageDelayed(v44, 10000);\nTask$$ExternalSyntheticLambda28 v50 = new Task$$ExternalSyntheticLambda28();\nPooledConsumer v53 = PooledLambda.obtainConsumer(v50, v52, v49, ApplicationInfo.packageName);', 'Task v5 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();\nActivityRecord v7 = TaskFragment.topRunningActivity(0);\nint v9 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);\nCompatibilityInfo v10 = CompatModePackages.compatibilityInfoForPackageLocked(ActivityInfo.applicationInfo);\nInteger v20 = Integer.valueOf();\nObject v21 = this.mPackages.put(ApplicationInfo.packageName, v20);', 'ActivityRecord v25 = v24.restartPackage(ApplicationInfo.packageName);\nCompatModePackages.scheduleWrite();', 'Task v3 = p0.getTopDisplayFocusedRootTask();\nActivityRecord v4 = v3.topRunningActivity();\nthis.mCompatModePackages.setPackageScreenCompatModeLocked(ActivityInfo.applicationInfo, p1);']

The method setFrontActivityScreenCompatMode has the following similar APIs:

- API Name: getFrontActivityScreenCompatMode()I with Similarity Score: 0.9038490653038025
  - Access Control Level: SYS_OR_SIG and the following code:
Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
CompatibilityInfo v11 = CompatModePackages.compatibilityInfoForPackageLocked(ActivityInfo.applicationInfo);
return v10;

- API Name: isTopActivityImmersive()Z with Similarity Score: 0.903368353843689
  - Access Control Level: SYS_OR_SIG and the following code:
int v9 = RootWindowContainer.getChildCount();
WindowContainer v10 = RootWindowContainer.getChildAt();
Task v11 = v10.getFocusedRootTask();
ActivityRecord v16 = TaskFragment.topRunningActivity(0, 1);

