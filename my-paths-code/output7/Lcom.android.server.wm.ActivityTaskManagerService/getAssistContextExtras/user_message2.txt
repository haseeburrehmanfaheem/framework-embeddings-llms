The method getAssistContextExtras has the following code snippet:

This is path 1 for the API with depth 2:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	this.sThreadPriorityBooster.boost();
	Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v6 = v7;
	if (v6 == 0) {
		ActivityRecord v9 = TaskFragment.getTopNonFinishingActivity(1);
		ActivityRecord v8 = v9;
		if ( != 0) {
			boolean v11 = ActivityRecord.hasProcess();
			if (v11 == 0) {
				boolean v12 = this.app.hasThread();
				if (v12 == 0) {
					boolean v10 = ;
					if (v10 != 0) {
						if (1 == 0) {
							if (0 == 0) {
								if (p6 != 0) {
									Object v14 = ActivityRecord$Token.mActivityRef.get();
									if (v14 == 0) {
										Task v15 = v14.getRootTask();
										if (v15 != 0) {
											ActivityRecord v13 = ;
											if ( == v13) {
												Bundle v16 = new Bundle();
												if (0 == 0) {
													v16.putAll(0);
													v16.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
													v16.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
													ActivityTaskManagerService$PendingAssistExtras v21 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,,v16,0,0,0,0,v1);
													boolean v23 = .isActivityTypeHome();
													ActivityTaskManagerService$PendingAssistExtras.isHome = v23;
													if (1 == 0) {
														this.mViSessionId = (this.mViSessionId + 1);
														IApplicationThread v24 = this.mThread;
														v24.requestAssistContextExtras(WindowToken.token, v21, p1, this.mViSessionId, 0);
														this.sThreadPriorityBooster.reset();
														ActivityTaskManagerService$PendingAssistExtras v2 = 0;
														if (v2 != 0) {
															if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																v2.wait();
																if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																	p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
																	boolean v39 = this.mPendingAssistExtras.remove(v2);
																	this.mUiHandler.removeCallbacks(v2);
																	return ActivityTaskManagerService$PendingAssistExtras.extras;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	this.sThreadPriorityBooster.boost();
	Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v6 = v7;
	if (v6 == 0) {
		ActivityRecord v9 = TaskFragment.getTopNonFinishingActivity(1);
		ActivityRecord v8 = v9;
		if ( != 0) {
			boolean v11 = ActivityRecord.hasProcess();
			if (v11 == 0) {
				boolean v12 = this.app.hasThread();
				if (v12 == 0) {
					boolean v10 = ;
					if (v10 != 0) {
						if (1 == 0) {
							if (0 == 0) {
								if (p6 != 0) {
									Object v14 = ActivityRecord$Token.mActivityRef.get();
									if (v14 == 0) {
										Task v15 = v14.getRootTask();
										if (v15 != 0) {
											ActivityRecord v13 = ;
											if ( == v13) {
												Bundle v16 = new Bundle();
												if (0 == 0) {
													v16.putAll(0);
													v16.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
													v16.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
													ActivityTaskManagerService$PendingAssistExtras v21 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,,v16,0,0,0,0,v1);
													boolean v23 = .isActivityTypeHome();
													ActivityTaskManagerService$PendingAssistExtras.isHome = v23;
													if (1 == 0) {
														this.mViSessionId = (this.mViSessionId + 1);
														IApplicationThread v24 = this.mThread;
														v24.requestAssistContextExtras(WindowToken.token, v21, p1, this.mViSessionId, 0);
														this.sThreadPriorityBooster.reset();
														ActivityTaskManagerService$PendingAssistExtras v2 = 0;
														if (v2 != 0) {
															if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																v2.wait();
																if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																	WindowManagerThreadPriorityBooster.boost();
																	p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
																	boolean v40 = this.mPendingAssistExtras.remove(v2);
																	this.mUiHandler.removeCallbacks(v2);
																	return ActivityTaskManagerService$PendingAssistExtras.extras;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	this.sThreadPriorityBooster.boost();
	Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v6 = v7;
	if (v6 == 0) {
		ActivityRecord v9 = TaskFragment.getTopNonFinishingActivity(1);
		ActivityRecord v8 = v9;
		if ( != 0) {
			boolean v11 = ActivityRecord.hasProcess();
			if (v11 == 0) {
				boolean v12 = this.app.hasThread();
				if (v12 == 0) {
					boolean v10 = ;
					if (v10 != 0) {
						if (1 == 0) {
							if (0 == 0) {
								if (p6 != 0) {
									Object v14 = ActivityRecord$Token.mActivityRef.get();
									if (v14 == 0) {
										Task v15 = v14.getRootTask();
										if (v15 != 0) {
											ActivityRecord v13 = ;
											if ( == v13) {
												Bundle v16 = new Bundle();
												if (0 == 0) {
													v16.putAll(0);
													v16.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
													v16.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
													ActivityTaskManagerService$PendingAssistExtras v21 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,,v16,0,0,0,0,v1);
													boolean v23 = .isActivityTypeHome();
													ActivityTaskManagerService$PendingAssistExtras.isHome = v23;
													if (1 == 0) {
														this.mViSessionId = (this.mViSessionId + 1);
														IApplicationThread v24 = this.mThread;
														v24.requestAssistContextExtras(WindowToken.token, v21, p1, this.mViSessionId, 0);
														this.sThreadPriorityBooster.reset();
														ActivityTaskManagerService$PendingAssistExtras v2 = 0;
														if (v2 != 0) {
															if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																v2.wait();
																if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																	p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
																	boolean v39 = this.mPendingAssistExtras.remove(v2);
																	this.mUiHandler.removeCallbacks(v2);
																	WindowManagerThreadPriorityBooster.reset();
																	return ActivityTaskManagerService$PendingAssistExtras.extras;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nActivityTaskManagerService$PendingAssistExtras v2 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,,v9,0,0,0,0,v1);\nIApplicationThread v17 = ActivityRecord.app.getThread();\nv17.requestAssistContextExtras(WindowToken.token, v14, p1, this.mViSessionId, 0);\nreturn ActivityTaskManagerService$PendingAssistExtras.extras;', 'Bundle v9 = new Bundle();\nv9.putAll(0);\nv9.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);\nv9.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);', 'ActivityTaskManagerService$PendingAssistExtras v2 = p0.enqueueAssistContext(p1, 0, 0, 0, 0, 0, 1, 1, v1, 0, 500, 0);\np0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);\nreturn ActivityTaskManagerService$PendingAssistExtras.extras;']

The method getAssistContextExtras has the following similar APIs:

- API Name: startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I with Similarity Score: 0.7768731713294983
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = UserHandle.getCallingUserId();
SafeActivityOptions v4 = SafeActivityOptions.fromBundle(p11);
if (v4 == 0) { ... }
boolean v8 = ActivityTaskManagerService.isCallerRecents(v7);
long v9 = Binder.clearCallingIdentity();
ActivityOptions v12 = v4.getOriginalOptions();
boolean v13 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v12);
return v2;

- API Name: startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I with Similarity Score: 0.7729724645614624
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p8, 0, 0, "startAssistantActivity", 0);
ActivityStarter v8 = this.mFactory.obtain();
ActivityStarter$Request.intent = p1;
ActivityStarter v11 = v7.setCallingUid(p4);
ActivityStarter v12 = v11.setCallingPackage(p1);
ActivityStarter v13 = v12.setResolvedType(p6);
SafeActivityOptions v16 = new SafeActivityOptions(v18);
ActivityStarter$Request.activityOptions = v16;
return v23;

