This is path 1 for the API with depth 2:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	this.sThreadPriorityBooster.boost();
	Task v7 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v6 = v7;
	if (v6 == 0) {
		ActivityRecord v9 = TaskFragment.getTopNonFinishingActivity(1);
		ActivityRecord v8 = v9;
		if ( != 0) {
			boolean v11 = ActivityRecord.hasProcess();
			if (v11 == 0) {
				boolean v12 = this.app.hasThread();
				if (v12 == 0) {
					boolean v10 = ;
					if (v10 != 0) {
						if (1 == 0) {
							if (0 == 0) {
								if (p6 != 0) {
									Object v14 = ActivityRecord$Token.mActivityRef.get();
									if (v14 == 0) {
										Task v15 = v14.getRootTask();
										if (v15 != 0) {
											ActivityRecord v13 = ;
											if ( == v13) {
												Bundle v16 = new Bundle();
												if (0 == 0) {
													v16.putAll(0);
													v16.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
													v16.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
													ActivityTaskManagerService$PendingAssistExtras v21 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,,v16,0,0,0,0,v1);
													boolean v23 = .isActivityTypeHome();
													ActivityTaskManagerService$PendingAssistExtras.isHome = v23;
													if (1 == 0) {
														this.mViSessionId = (this.mViSessionId + 1);
														IApplicationThread v24 = this.mThread;
														v24.requestAssistContextExtras(WindowToken.token, v21, p1, this.mViSessionId, 0);
														this.sThreadPriorityBooster.reset();
														ActivityTaskManagerService$PendingAssistExtras v2 = 0;
														if (v2 != 0) {
															if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																v2.wait();
																if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
																	p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
																	boolean v39 = this.mPendingAssistExtras.remove(v2);
																	this.mUiHandler.removeCallbacks(v2);
																	return ActivityTaskManagerService$PendingAssistExtras.extras;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	WindowManagerService.boostPriorityForLockedSection();
	Task v5 = ActivityTaskManagerService.getTopDisplayFocusedRootTask();
	if (v5 == 0) {
		ActivityRecord v6 = v5.getTopNonFinishingActivity();
		if ( != 0) {
			boolean v7 = .attachedToProcess();
			if (v7 != 0) {
				if (1 == 0) {
					if (0 == 0) {
						ActivityRecord v8 = ActivityRecord.forTokenLocked(0);
						if ( == v8) {
							Bundle v9 = new Bundle();
							if (0 == 0) {
								v9.putAll(0);
								v9.putString("android.intent.extra.ASSIST_PACKAGE", ActivityRecord.packageName);
								v9.putInt("android.intent.extra.ASSIST_UID", WindowProcessController.mUid);
								ActivityTaskManagerService$PendingAssistExtras v14 = new ActivityTaskManagerService$PendingAssistExtras(ActivityTaskManagerService,,v9,0,0,0,0,v1);
								boolean v16 = .isActivityTypeHome();
								ActivityTaskManagerService$PendingAssistExtras.isHome = v16;
								if (1 == 0) {
									this.mViSessionId = (this.mViSessionId + 1);
									IApplicationThread v17 = ActivityRecord.app.getThread();
									v17.requestAssistContextExtras(WindowToken.token, v14, p1, this.mViSessionId, 0);
									WindowManagerService.resetPriorityAfterLockedSection();
									ActivityTaskManagerService$PendingAssistExtras v2 = 0;
									if (v2 != 0) {
										if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
											v2.wait();
											if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
												this.sThreadPriorityBooster.boost();
												if (ActivityTaskManagerService$PendingAssistExtras.result == 0) {
													ActivityTaskManagerService$PendingAssistExtras.extras.putBundle("android.intent.extra.ASSIST_CONTEXT", ActivityTaskManagerService$PendingAssistExtras.result);
													if (ActivityTaskManagerService$PendingAssistExtras.hint == 0) {
														ActivityTaskManagerService$PendingAssistExtras.extras.putBoolean(ActivityTaskManagerService$PendingAssistExtras.hint, 1);
														boolean v32 = this.mPendingAssistExtras.remove(v2);
														this.mUiHandler.removeCallbacks(v2);
														this.sThreadPriorityBooster.reset();
														return ActivityTaskManagerService$PendingAssistExtras.extras;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	ActivityTaskManagerService$PendingAssistExtras v2 = p0.enqueueAssistContext(p1, 0, 0, 0, 0, 0, 1, 1, v1, 0, 500, 0);
	if (v2 != 0) {
		if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
			v2.wait();
			if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) {
				WindowManagerService.boostPriorityForLockedSection();
				p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
				boolean v6 = this.mPendingAssistExtras.remove(v2);
				this.mUiHandler.removeCallbacks(v2);
				WindowManagerService.resetPriorityAfterLockedSection();
				return ActivityTaskManagerService$PendingAssistExtras.extras;
			}
		}
	}
}
