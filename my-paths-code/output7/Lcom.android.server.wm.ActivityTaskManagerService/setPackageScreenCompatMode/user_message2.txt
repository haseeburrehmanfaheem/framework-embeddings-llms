The method setPackageScreenCompatMode has the following code snippet:

This is path 1 for the API with depth 2:
public void setPackageScreenCompatMode(String p1, int p2){
	IPackageManager v7 = ActivityThread.getPackageManager();
	IPackageManager v6 = v7;
	ApplicationInfo v8 = v6.getApplicationInfo(p1, 0, 0);
	if ( != 0) {
		int v10 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);
		if (p2 == 0) {
			if (p2 == 1) {
				if (p2 == 2) {
					if ((v10 & 2) != 0) {
						if ( == 0) {
							CompatibilityInfo v11 = CompatModePackages.compatibilityInfoForPackageLocked();
							boolean v12 = v11.alwaysSupportsScreen();
							if (v12 == 0) {
								boolean v20 = v11.neverSupportsScreen();
								if (v20 == 0) {
									if ( == v10) {
										if ( == 0) {
											Integer v21 = Integer.valueOf();
											Object v22 = this.mPackages.put(ApplicationInfo.packageName, v21);
											CompatibilityInfo v23 = CompatModePackages.compatibilityInfoForPackageLocked();
											CompatModePackages.scheduleWrite();
											Task v25 = this.mService.getTopDisplayFocusedRootTask();
											ActivityRecord v26 = v25.restartPackage(ApplicationInfo.packageName);
											SparseArray v27 = ActivityTaskManagerService.mProcessMap.getPidMap();
											int v28 = v27.size();
											if ( < 0) {
												if (v26 == 0) {
													boolean v29 = v26.ensureActivityConfiguration(0, 0);
													v25.ensureActivitiesVisible(v26, 0, 0);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setPackageScreenCompatMode(String p1, int p2){
	WindowManagerThreadPriorityBooster.boost();
	IPackageManager v8 = ActivityThread.getPackageManager();
	IPackageManager v7 = v8;
	ApplicationInfo v9 = v7.getApplicationInfo(p1, 0, 0);
	if ( != 0) {
		int v11 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);
		if (p2 == 0) {
			if (p2 == 1) {
				if (p2 == 2) {
					if ((v11 & 2) != 0) {
						if ( == 0) {
							CompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked();
							boolean v13 = v12.alwaysSupportsScreen();
							if (v13 == 0) {
								boolean v21 = v12.neverSupportsScreen();
								if (v21 == 0) {
									if ( == v11) {
										if ( == 0) {
											Integer v22 = Integer.valueOf();
											Object v23 = this.mPackages.put(ApplicationInfo.packageName, v22);
											CompatibilityInfo v24 = CompatModePackages.compatibilityInfoForPackageLocked();
											CompatModePackages.scheduleWrite();
											Task v26 = this.mService.getTopDisplayFocusedRootTask();
											ActivityRecord v27 = v26.restartPackage(ApplicationInfo.packageName);
											SparseArray v28 = ActivityTaskManagerService.mProcessMap.getPidMap();
											int v29 = v28.size();
											if ( < 0) {
												if (v27 == 0) {
													boolean v30 = v27.ensureActivityConfiguration(0, 0);
													v26.ensureActivitiesVisible(v27, 0, 0);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setPackageScreenCompatMode(String p1, int p2){
	IPackageManager v7 = ActivityThread.getPackageManager();
	IPackageManager v6 = v7;
	ApplicationInfo v8 = v6.getApplicationInfo(p1, 0, 0);
	if ( != 0) {
		int v10 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);
		if (p2 == 0) {
			if (p2 == 1) {
				if (p2 == 2) {
					if ((v10 & 2) != 0) {
						if ( == 0) {
							CompatibilityInfo v11 = CompatModePackages.compatibilityInfoForPackageLocked();
							boolean v12 = v11.alwaysSupportsScreen();
							if (v12 == 0) {
								boolean v20 = v11.neverSupportsScreen();
								if (v20 == 0) {
									if ( == v10) {
										if ( == 0) {
											Integer v21 = Integer.valueOf();
											Object v22 = this.mPackages.put(ApplicationInfo.packageName, v21);
											CompatibilityInfo v23 = CompatModePackages.compatibilityInfoForPackageLocked();
											CompatModePackages.scheduleWrite();
											Task v25 = this.mService.getTopDisplayFocusedRootTask();
											ActivityRecord v26 = v25.restartPackage(ApplicationInfo.packageName);
											SparseArray v27 = ActivityTaskManagerService.mProcessMap.getPidMap();
											int v28 = v27.size();
											if ( < 0) {
												if (v26 == 0) {
													boolean v29 = v26.ensureActivityConfiguration(0, 0);
													v25.ensureActivitiesVisible(v26, 0, 0);
													WindowManagerThreadPriorityBooster.reset();
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ApplicationInfo v8 = v6.getApplicationInfo(p1, 0, 0);\nint v10 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);\nInteger v21 = Integer.valueOf();\nObject v22 = this.mPackages.put(ApplicationInfo.packageName, v21);', 'ApplicationInfo v6 = v5.getApplicationInfo(p1, 0, 0);', 'this.mCompatModePackages.setPackageScreenCompatModeLocked(p1, p2);']

The method setPackageScreenCompatMode has the following similar APIs:

- API Name: setPackageAskScreenCompat(Ljava/lang/String;Z)V with Similarity Score: 0.9203457236289978
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatModePackages.setPackageAskCompatModeLocked(p1, p2);

- API Name: getPackageScreenCompatMode(Ljava/lang/String;)I with Similarity Score: 0.8822582960128784
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityTaskManagerService.enforceNotIsolatedCaller("getPackageScreenCompatMode");
int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1);
return v3;

