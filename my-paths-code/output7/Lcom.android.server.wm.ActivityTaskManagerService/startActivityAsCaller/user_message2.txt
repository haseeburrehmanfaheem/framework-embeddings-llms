The method startActivityAsCaller has the following code snippet:

This is path 1 for the API with depth 2:
public int startActivityAsCaller(IApplicationThread p1, String p2, Intent p3, String p4, IBinder p5, String p6, int p7, int p8, ProfilerInfo p9, Bundle p10, boolean p11, int p12){
	if (p11 == 0) {
		boolean v7 = "android".equals(this.packageName);
		if (v7 != 0) {
			ClassLoader v8 = Objec.class.getClassLoader();
			String v9 = this.mActivityComponent.getClassName();
			Class v10 = v8.loadClass(v9);
			boolean v11 = ResolverActivit.class.isAssignableFrom(v10);
			boolean v6 = v11;
			if (p12 != -10000) {
				int v15 = UserHandle.getUserId(WindowProcessController.mUid);
				ActivityStartController v16 = p0.getActivityStartController();
				ActivityStarter v18 = this.mFactory.obtain();
				ActivityStarter$Request.intent = p1;
				ActivityStarter v19 = ActivityStarter;
				ActivityStarter$Request.reason = p2;
				ActivityStarter v20 = ActivityStarter;
				ActivityStarter v17 = v20;
				ActivityStarter v21 = v17.setCallingUid(ActivityRecord.launchedFromUid);
				ActivityStarter v22 = v21.setCallingPackage(ActivityRecord.launchedFromPackage);
				ActivityStarter v23 = v22.setCallingFeatureId(ActivityRecord.launchedFromFeatureId);
				ActivityStarter v24 = v23.setResolvedType(p4);
				ActivityStarter v25 = v24.setResultTo(p5);
				ActivityStarter v26 = v25.setResultWho(p6);
				ActivityStarter v27 = v26.setRequestCode(p7);
				ActivityStarter v28 = v27.setStartFlags(p8);
				if (p1 == 0) {
					SafeActivityOptions v31 = new SafeActivityOptions(v32);
					ActivityOptions v32 = ActivityOptions.fromBundle(p1);
					SafeActivityOptions v30 = ;
					ActivityStarter$Request.activityOptions = v30;
					ActivityStarter v34 = ActivityStarter;
					ActivityStarter v29 = v34;
					ActivityStarter v35 = v29.setUserId();
					ActivityStarter v36 = v35.setIgnoreTargetSecurity(p11);
					if (v6 == 0) {
						ActivityStarter v37 = v36.setFilterCallingUid();
						ActivityStarter v38 = v37.setAllowBackgroundActivityStart(1);
						this.mController.onExecutionStarted();
						if (ActivityStarter$Request.intent == 0) {
							this.sThreadPriorityBooster.boost();
							if (ActivityStarter$Request.resultTo != 0) {
								Object v45 = ActivityRecord$Token.mActivityRef.get();
								if (v45 == 0) {
									Task v46 = v45.getRootTask();
									if (v46 != 0) {
										ActivityRecord v44 = ;
										if (ActivityStarter$Request.realCallingUid != -1) {
											ActivityMetricsLogger v47 = this.mActivityMetricsLogger;
											if ( != 0) {
												ActivityMetricsLogger$LaunchingState v56 = new ActivityMetricsLogger$LaunchingState();
												ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v56, v49);
												ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v49);
												ActivityMetricsLogger$LaunchingState v48 = v56;
												this.sThreadPriorityBooster.reset();
												if (ActivityStarter$Request.activityInfo != 0) {
													if (this.realCallingPid != 0) {
														int v63 = Binder.getCallingPid();
														this.realCallingPid = v63;
														if (this.realCallingUid != -1) {
															int v64 = Binder.getCallingUid();
															this.realCallingUid = v64;
															if (this.callingUid < 0) {
																this.callingPid = -1;
																if (this.caller == 0) {
																	Intent v65 = new Intent(this.intent);
																	this.ephemeralIntent = v65;
																	Intent v67 = new Intent(this.intent);
																	this.intent = v67;
																	ComponentName v69 = v67.getComponent();
																	if (v69 == 0) {
																		int v70 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																		ResolveInfo v71 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v70);
																		this.resolveInfo = v71;
																		if (v71 != 0) {
																			UserInfo v72 = this.mSupervisor.getUserInfo(this.userId);
																			if (v72 == 0) {
																				boolean v73 = v72.isManagedProfile();
																				if (v73 == 0) {
																					ActivityInfo v74 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																					this.activityInfo = v74;
																					if (v74 == 0) {
																						if (ActivityStarter$Request.intent == 0) {
																							this.sThreadPriorityBooster.boost();
																							if (ActivityStarter$Request.globalConfig == 0) {
																								int v78 = RootWindowContainer.getChildCount();
																								if ( < 0) {
																									WindowContainer v79 = RootWindowContainer.getChildAt();
																									Task v80 = v79.getFocusedRootTask();
																									if (v80 == 0) {
																										if ( < 0) {
																											WindowContainer v81 = RootWindowContainer.getChildAt();
																											Task v82 = v81.getFocusedRootTask();
																											if (v82 == 0) {
																												Task v77 = v82;
																												if (v77 == 0) {
																													if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																														long v83 = Binder.clearCallingIdentity();
																														int v84 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																														if (v84 == 0) {
																															this.sThreadPriorityBooster.reset();
																															this.mController.onExecutionComplete(ActivityStarter);
																															int v39 = v84;
																															return v39;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int startActivityAsCaller(IApplicationThread p1, String p2, Intent p3, String p4, IBinder p5, String p6, int p7, int p8, ProfilerInfo p9, Bundle p10, boolean p11, int p12){
	if (p11 == 0) {
		boolean v7 = "android".equals(this.packageName);
		if (v7 != 0) {
			ClassLoader v8 = Objec.class.getClassLoader();
			String v9 = this.mActivityComponent.getClassName();
			Class v10 = v8.loadClass(v9);
			boolean v11 = ResolverActivit.class.isAssignableFrom(v10);
			boolean v6 = v11;
			WindowManagerThreadPriorityBooster.reset();
			if (p12 != -10000) {
				int v16 = UserHandle.getUserId(WindowProcessController.mUid);
				ActivityStartController v17 = p0.getActivityStartController();
				ActivityStarter v19 = this.mFactory.obtain();
				ActivityStarter$Request.intent = p1;
				ActivityStarter v20 = ActivityStarter;
				ActivityStarter$Request.reason = p2;
				ActivityStarter v21 = ActivityStarter;
				ActivityStarter v18 = v21;
				ActivityStarter v22 = v18.setCallingUid(ActivityRecord.launchedFromUid);
				ActivityStarter v23 = v22.setCallingPackage(ActivityRecord.launchedFromPackage);
				ActivityStarter v24 = v23.setCallingFeatureId(ActivityRecord.launchedFromFeatureId);
				ActivityStarter v25 = v24.setResolvedType(p4);
				ActivityStarter v26 = v25.setResultTo(p5);
				ActivityStarter v27 = v26.setResultWho(p6);
				ActivityStarter v28 = v27.setRequestCode(p7);
				ActivityStarter v29 = v28.setStartFlags(p8);
				if (p1 == 0) {
					SafeActivityOptions v32 = new SafeActivityOptions(v33);
					ActivityOptions v33 = ActivityOptions.fromBundle(p1);
					SafeActivityOptions v31 = ;
					ActivityStarter$Request.activityOptions = v31;
					ActivityStarter v35 = ActivityStarter;
					ActivityStarter v30 = v35;
					ActivityStarter v36 = v30.setUserId();
					ActivityStarter v37 = v36.setIgnoreTargetSecurity(p11);
					if (v6 == 0) {
						ActivityStarter v38 = v37.setFilterCallingUid();
						ActivityStarter v39 = v38.setAllowBackgroundActivityStart(1);
						this.mController.onExecutionStarted();
						if (ActivityStarter$Request.intent == 0) {
							this.sThreadPriorityBooster.boost();
							if (ActivityStarter$Request.resultTo != 0) {
								Object v46 = ActivityRecord$Token.mActivityRef.get();
								if (v46 == 0) {
									Task v47 = v46.getRootTask();
									if (v47 != 0) {
										ActivityRecord v45 = ;
										if (ActivityStarter$Request.realCallingUid != -1) {
											ActivityMetricsLogger v48 = this.mActivityMetricsLogger;
											if ( != 0) {
												ActivityMetricsLogger$LaunchingState v57 = new ActivityMetricsLogger$LaunchingState();
												ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v57, v50);
												ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v50);
												ActivityMetricsLogger$LaunchingState v49 = v57;
												this.sThreadPriorityBooster.reset();
												if (ActivityStarter$Request.activityInfo != 0) {
													if (this.realCallingPid != 0) {
														int v64 = Binder.getCallingPid();
														this.realCallingPid = v64;
														if (this.realCallingUid != -1) {
															int v65 = Binder.getCallingUid();
															this.realCallingUid = v65;
															if (this.callingUid < 0) {
																this.callingPid = -1;
																if (this.caller == 0) {
																	Intent v66 = new Intent(this.intent);
																	this.ephemeralIntent = v66;
																	Intent v68 = new Intent(this.intent);
																	this.intent = v68;
																	ComponentName v70 = v68.getComponent();
																	if (v70 == 0) {
																		int v71 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																		ResolveInfo v72 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v71);
																		this.resolveInfo = v72;
																		if (v72 != 0) {
																			UserInfo v73 = this.mSupervisor.getUserInfo(this.userId);
																			if (v73 == 0) {
																				boolean v74 = v73.isManagedProfile();
																				if (v74 == 0) {
																					ActivityInfo v75 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																					this.activityInfo = v75;
																					if (v75 == 0) {
																						if (ActivityStarter$Request.intent == 0) {
																							this.sThreadPriorityBooster.boost();
																							if (ActivityStarter$Request.globalConfig == 0) {
																								int v79 = RootWindowContainer.getChildCount();
																								if ( < 0) {
																									WindowContainer v80 = RootWindowContainer.getChildAt();
																									Task v81 = v80.getFocusedRootTask();
																									if (v81 == 0) {
																										if ( < 0) {
																											WindowContainer v82 = RootWindowContainer.getChildAt();
																											Task v83 = v82.getFocusedRootTask();
																											if (v83 == 0) {
																												Task v78 = v83;
																												if (v78 == 0) {
																													if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																														long v84 = Binder.clearCallingIdentity();
																														int v85 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																														if (v85 == 0) {
																															this.sThreadPriorityBooster.reset();
																															this.mController.onExecutionComplete(ActivityStarter);
																															int v40 = v85;
																															return v40;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int startActivityAsCaller(IApplicationThread p1, String p2, Intent p3, String p4, IBinder p5, String p6, int p7, int p8, ProfilerInfo p9, Bundle p10, boolean p11, int p12){
	if (p11 == 0) {
		boolean v7 = "android".equals(this.packageName);
		if (v7 != 0) {
			ClassLoader v8 = Objec.class.getClassLoader();
			String v9 = this.mActivityComponent.getClassName();
			Class v10 = v8.loadClass(v9);
			boolean v11 = ResolverActivit.class.isAssignableFrom(v10);
			boolean v6 = v11;
			if (p12 != -10000) {
				int v15 = UserHandle.getUserId(WindowProcessController.mUid);
				ActivityStartController v16 = p0.getActivityStartController();
				ActivityStarter v18 = this.mFactory.obtain();
				ActivityStarter$Request.intent = p1;
				ActivityStarter v19 = ActivityStarter;
				ActivityStarter$Request.reason = p2;
				ActivityStarter v20 = ActivityStarter;
				ActivityStarter v17 = v20;
				ActivityStarter v21 = v17.setCallingUid(ActivityRecord.launchedFromUid);
				ActivityStarter v22 = v21.setCallingPackage(ActivityRecord.launchedFromPackage);
				ActivityStarter v23 = v22.setCallingFeatureId(ActivityRecord.launchedFromFeatureId);
				ActivityStarter v24 = v23.setResolvedType(p4);
				ActivityStarter v25 = v24.setResultTo(p5);
				ActivityStarter v26 = v25.setResultWho(p6);
				ActivityStarter v27 = v26.setRequestCode(p7);
				ActivityStarter v28 = v27.setStartFlags(p8);
				if (p1 == 0) {
					SafeActivityOptions v31 = new SafeActivityOptions(v32);
					ActivityOptions v32 = ActivityOptions.fromBundle(p1);
					SafeActivityOptions v30 = ;
					ActivityStarter$Request.activityOptions = v30;
					ActivityStarter v34 = ActivityStarter;
					ActivityStarter v29 = v34;
					ActivityStarter v35 = v29.setUserId();
					ActivityStarter v36 = v35.setIgnoreTargetSecurity(p11);
					if (v6 == 0) {
						ActivityStarter v37 = v36.setFilterCallingUid();
						ActivityStarter v38 = v37.setAllowBackgroundActivityStart(1);
						this.mController.onExecutionStarted();
						if (ActivityStarter$Request.intent == 0) {
							this.sThreadPriorityBooster.boost();
							if (ActivityStarter$Request.resultTo != 0) {
								Object v45 = ActivityRecord$Token.mActivityRef.get();
								if (v45 == 0) {
									Task v46 = v45.getRootTask();
									if (v46 != 0) {
										ActivityRecord v44 = ;
										if (ActivityStarter$Request.realCallingUid != -1) {
											ActivityMetricsLogger v47 = this.mActivityMetricsLogger;
											if ( != 0) {
												ActivityMetricsLogger$LaunchingState v56 = new ActivityMetricsLogger$LaunchingState();
												ActivityMetricsLogger$LaunchingState.-$$Nest$fputmCurrentTransitionStartTimeNs(v56, v49);
												ActivityMetricsLogger.launchObserverNotifyIntentStarted(ActivityStarter$Request.intent, v49);
												ActivityMetricsLogger$LaunchingState v48 = v56;
												this.sThreadPriorityBooster.reset();
												if (ActivityStarter$Request.activityInfo != 0) {
													if (this.realCallingPid != 0) {
														int v63 = Binder.getCallingPid();
														this.realCallingPid = v63;
														if (this.realCallingUid != -1) {
															int v64 = Binder.getCallingUid();
															this.realCallingUid = v64;
															if (this.callingUid < 0) {
																if (this.caller != 0) {
																	this.callingPid = this.realCallingPid;
																	this.callingUid = this.realCallingUid;
																	if (this.caller == 0) {
																		Intent v65 = new Intent(this.intent);
																		this.ephemeralIntent = v65;
																		Intent v67 = new Intent(this.intent);
																		this.intent = v67;
																		ComponentName v69 = v67.getComponent();
																		if (v69 == 0) {
																			int v70 = ActivityStarter.computeResolveFilterUid(this.callingUid, this.realCallingUid, this.filterCallingUid);
																			ResolveInfo v71 = this.mSupervisor.resolveIntent(this.intent, this.resolvedType, this.userId, 0, v70);
																			this.resolveInfo = v71;
																			if (v71 != 0) {
																				ActivityInfo v72 = this.mSupervisor.resolveActivity(this.intent, this.resolveInfo, this.startFlags, this.profilerInfo);
																				this.activityInfo = v72;
																				if (v72 == 0) {
																					if (ActivityStarter$Request.intent == 0) {
																						this.sThreadPriorityBooster.boost();
																						if (ActivityStarter$Request.globalConfig == 0) {
																							int v76 = RootWindowContainer.getChildCount();
																							if ( < 0) {
																								WindowContainer v77 = RootWindowContainer.getChildAt();
																								Task v78 = v77.getFocusedRootTask();
																								if (v78 == 0) {
																									if ( < 0) {
																										WindowContainer v79 = RootWindowContainer.getChildAt();
																										Task v80 = v79.getFocusedRootTask();
																										if (v80 == 0) {
																											Task v75 = v80;
																											if (v75 == 0) {
																												if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled == 0) {
																													long v81 = Binder.clearCallingIdentity();
																													int v82 = ActivityStarter.resolveToHeavyWeightSwitcherIfNeeded();
																													if (v82 == 0) {
																														this.sThreadPriorityBooster.reset();
																														this.mController.onExecutionComplete(ActivityStarter);
																														int v39 = v82;
																														return v39;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v7 = "android".equals(this.packageName);\nClassLoader v8 = Objec.class.getClassLoader();\nString v9 = this.mActivityComponent.getClassName();\nClass v10 = v8.loadClass(v9);\nboolean v11 = ResolverActivit.class.isAssignableFrom(v10);', 'ActivityStarter v17 = this.mFactory.obtain();\nActivityStarter v18 = v17.setIntent(p3);\nActivityStarter v19 = v18.setReason("startActivityAsCaller");\nActivityStarter$Request.callingUid = ActivityRecord.launchedFromUid;\nActivityStarter$Request.callingPackage = ActivityRecord.launchedFromPackage;\nActivityStarter$Request.callingFeatureId = ActivityRecord.launchedFromFeatureId;', 'int v14 = UserHandle.getUserId(WindowProcessController.mUid);\nActivityStartController v15 = this.mActivityStartController;\nActivityStarter v17 = this.mFactory.obtain();\nActivityStarter$Request.userId = ;', 'SafeActivityOptions v29 = SafeActivityOptions.fromBundle(p10);\nActivityStarter v30 = ActivityStarter.setActivityOptions(v29);', 'ActivityStarter$Request.intent = p1;\nActivityStarter v21 = v20.setIgnoreTargetSecurity(p11);']

The method startActivityAsCaller has the following similar APIs:

- API Name: moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V with Similarity Score: 0.9098467826843262
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityOptions v11 = ActivityOptions.fromBundle(p5);
SafeActivityOptions v10 = new SafeActivityOptions(v11);

- API Name: startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I with Similarity Score: 0.9091773629188538
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityStarter v13 = this.mFactory.obtain();
ActivityStarter v14 = v13.setIntent(p4);
ActivityStarter v15 = v14.setReason("startActivityWithConfig");
ActivityStarter$Request.caller = p1;
ActivityStarter$Request.callingPackage = p2;
ActivityStarter$Request.callingFeatureId = p3;
ActivityStarter$Request.resolvedType = p5;
ActivityStarter$Request.resultTo = p6;
ActivityStarter$Request.resultWho = p7;
ActivityStarter$Request.requestCode = p8;
ActivityStarter$Request.startFlags = p9;
ActivityStarter$Request.globalConfig = p10;

