The method cancelTaskWindowTransition has the following code snippet:

This is path 1 for the API with depth 2:
public void cancelTaskWindowTransition(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									int v19 = WindowContainer.mChildren.size();
									if ( < 0) {
										Object v20 = WindowContainer.mChildren.get();
										int v22 = this.mSurfaceAnimator.getAnimationType();
										AnimationAdapter v23 = this.mSurfaceAnimator.getAnimation();
										WindowContainer.doAnimationFinished(v22, v23);
										this.mSurfaceAnimator.cancelAnimation();
										SurfaceControl$Transaction v26 = WindowContainer.getSyncTransaction();
										this.mSurfaceFreezer.unfreeze(v26);
										if ( < 0) {
											Binder.restoreCallingIdentity(v2);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void cancelTaskWindowTransition(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
			Integer v12 = Integer.valueOf(p1);
			PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
			Task v14 = RootWindowContainer.getTask(v13);
			v13.recycle();
			if (v14 == 0) {
				if (0 == 0) {
					Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
					if (v16 == 0) {
						Task v17 = v14.getRootTask();
						if (v17 == v16) {
							if (0 == 0) {
								boolean v18 = v14.reparent(v16, 0, , 1, 1, "anyTaskForId");
								Task v8 = v14;
								Task v7 = v8;
								if (v7 != 0) {
									int v20 = WindowContainer.mChildren.size();
									if ( < 0) {
										Object v21 = WindowContainer.mChildren.get();
										int v23 = this.mSurfaceAnimator.getAnimationType();
										AnimationAdapter v24 = this.mSurfaceAnimator.getAnimation();
										WindowContainer.doAnimationFinished(v23, v24);
										this.mSurfaceAnimator.cancelAnimation();
										SurfaceControl$Transaction v27 = WindowContainer.getSyncTransaction();
										this.mSurfaceFreezer.unfreeze(v27);
										if ( < 0) {
											Binder.restoreCallingIdentity(v2);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void cancelTaskWindowTransition(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									int v19 = WindowContainer.mChildren.size();
									if ( < 0) {
										Object v20 = WindowContainer.mChildren.get();
										int v22 = this.mSurfaceAnimator.getAnimationType();
										AnimationAdapter v23 = this.mSurfaceAnimator.getAnimation();
										WindowContainer.doAnimationFinished(v22, v23);
										this.mSurfaceAnimator.cancelAnimation();
										SurfaceControl$Transaction v26 = WindowContainer.getSyncTransaction();
										this.mSurfaceFreezer.unfreeze(v26);
										if ( < 0) {
											WindowManagerThreadPriorityBooster.reset();
											Binder.restoreCallingIdentity(v2);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v2 = Binder.clearCallingIdentity();\nAppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();\nArgumentPlaceholder v10 = PooledLambda.__(Tas.class);\nInteger v11 = Integer.valueOf(p1);\nPooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);\nTask v13 = RootWindowContainer.getTask(v12);\nv12.recycle();\nif (v13 == 0) { ... }\nTask v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);\nboolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");\nthis.mSurfaceAnimator.cancelAnimation();', 'long v2 = Binder.clearCallingIdentity();\nTask v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);\nObject v9 = WindowContainer.mChildren.get();\nv9.cancelAnimation();', 'long v2 = Binder.clearCallingIdentity();\nTask v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);']

The method cancelTaskWindowTransition has the following similar APIs:

- API Name: moveTaskToRootTask(IIZ)V with Similarity Score: 0.8772950768470764
  - Access Control Level: SYS_OR_SIG and the following code:
WindowManagerService.boostPriorityForLockedSection();
long v3 = Binder.clearCallingIdentity();
Task v4 = this.mRootWindowContainer.anyTaskForId(p1);

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; with Similarity Score: 0.8438740372657776
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);

