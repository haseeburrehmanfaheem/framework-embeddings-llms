The method moveTaskToFront has the following code snippet:

This is path 1 for the API with depth 2:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					if (p5 == 0) {
						SafeActivityOptions v22 = new SafeActivityOptions(v23);
						if (p1 == 0) {
							ActivityOptions v24 = new ActivityOptions(p1);
							ActivityOptions v23 = ;
							SafeActivityOptions v21 = ;
							int v28 = Binder.getCallingPid();
							int v29 = Binder.getCallingUid();
							if (v32 == 0) {
								long v33 = Binder.clearCallingIdentity();
								if (p1 == 0) {
									if (p1 != 0) {
										IBinder v35 = p1.asBinder();
										ArrayMap v36 = this.mProcessNames.getMap();
										int v37 = v36.size();
										if ( < 0) {
											Object v38 = v36.valueAt();
											int v39 = v38.size();
											if ( < 0) {
												Object v40 = v38.valueAt();
												boolean v41 = v40.hasThread();
												if (v41 == 0) {
													IApplicationThread v42 = v40.getThread();
													IBinder v43 = v42.asBinder();
													if (v43 != v35) {
														if ( < 0) {
															Object v44 = v38.valueAt();
															boolean v45 = v44.hasThread();
															if (v45 == 0) {
																IApplicationThread v46 = v44.getThread();
																IBinder v47 = v46.asBinder();
																if (v47 != v35) {
																	WindowProcessController v34 = v44;
																	ActivityStartController v48 = this.mActivityStartController;
																	ActivityStarter v50 = this.mFactory.obtain();
																	ActivityStarter v51 = v50.setIntent(0);
																	ActivityStarter v52 = v51.setReason("moveTaskToFront");
																	ActivityStarter v49 = v52;
																	if (v58 == 2) {
																		if (v58 != 1) {
																			if ( != 0) {
																				boolean v61 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(v29);
																				if (v61 == 0) {
																					if ( == 0) {
																						if ( == 0) {
																							boolean v53 = 0;
																							if (v53 == 0) {
																								boolean v63 = this.mAmInternal.isBackgroundActivityStartsEnabled();
																								boolean v62 = v63;
																								if (v62 != 0) {
																									Task v65 = RootWindowContainer.anyTaskForId(p3, 2);
																									Task v64 = v65;
																									if (v64 != 0) {
																										LockTaskController v66 = this.mLockTaskController;
																										boolean v68 = LockTaskController.isLockTaskModeViolation(v64, 0);
																										boolean v67 = v68;
																										if (v67 == 0) {
																											if (v21 == 0) {
																												ActivityOptions v70 = SafeActivityOptions.getOptions(0, 0, 0, this.mTaskSupervisor);
																												ActivityOptions v69 = v70;
																												Task v72 = v64.getRootTask();
																												if (v72 != 0) {
																													if ((p4 & 2) != 0) {
																														this.mUserLeaving = 1;
																														boolean v73 = WindowContainer.mTransitionController.isShellTransitionsEnabled();
																														if (v73 == 0) {
																															boolean v74 = WindowContainer.mTransitionController.isCollecting();
																															if (v74 == 0) {
																																WindowContainer.mTransitionController.collect(v64);
																																StringBuilder v76 = new StringBuilder();
																																StringBuilder v78 = v76.append("moveTaskToFront");
																																StringBuilder v79 = v76.append(" findTaskToMoveToFront");
																																String v80 = v76.toString();
																																boolean v81 = v64.isResizeable();
																																if (v81 == 0) {
																																	boolean v82 = ActivityTaskSupervisor.canUseActivityOptionsLaunchBounds();
																																	if (v82 == 0) {
																																		Rect v83 = .getLaunchBounds();
																																		int v84 = v64.setBounds(v83);
																																		Task v85 = this.mRootWindowContainer.getOrCreateRootTask(0, , v64, 1);
																																		if (v85 == v72) {
																																			boolean v86 = v85.shouldResizeRootTaskWithLaunchBounds();
																																			if (v86 == 0) {
																																				v64.resize(0, 0);
																																				if ( != 0) {
																																					ActivityRecord v88 = v64.getTopNonFinishingActivity();
																																					if (v88 != 0) {
																																						.moveTaskToFront(v64, 0, , , v80);
																																						TaskDisplayArea v90 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
																																						ActivityTaskSupervisor.handleNonResizableTaskIfNeeded(v64, 0, v90, , 0);
																																						if (v88 == 0) {
																																							if ( == 0) {
																																								this.mUserLeaving = 0;
																																								Binder.restoreCallingIdentity(v33);
																																								return;
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					WindowManagerThreadPriorityBooster.boost();
					if (p5 == 0) {
						SafeActivityOptions v23 = new SafeActivityOptions(v24);
						if (p1 == 0) {
							ActivityOptions v25 = new ActivityOptions(p1);
							ActivityOptions v24 = ;
							SafeActivityOptions v22 = ;
							int v29 = Binder.getCallingPid();
							int v30 = Binder.getCallingUid();
							if (v33 == 0) {
								long v34 = Binder.clearCallingIdentity();
								if (p1 == 0) {
									if (p1 != 0) {
										IBinder v36 = p1.asBinder();
										ArrayMap v37 = this.mProcessNames.getMap();
										int v38 = v37.size();
										if ( < 0) {
											Object v39 = v37.valueAt();
											int v40 = v39.size();
											if ( < 0) {
												Object v41 = v39.valueAt();
												boolean v42 = v41.hasThread();
												if (v42 == 0) {
													IApplicationThread v43 = v41.getThread();
													IBinder v44 = v43.asBinder();
													if (v44 != v36) {
														if ( < 0) {
															Object v45 = v39.valueAt();
															boolean v46 = v45.hasThread();
															if (v46 == 0) {
																IApplicationThread v47 = v45.getThread();
																IBinder v48 = v47.asBinder();
																if (v48 != v36) {
																	WindowProcessController v35 = v45;
																	ActivityStartController v49 = this.mActivityStartController;
																	ActivityStarter v51 = this.mFactory.obtain();
																	ActivityStarter v52 = v51.setIntent(0);
																	ActivityStarter v53 = v52.setReason("moveTaskToFront");
																	ActivityStarter v50 = v53;
																	if (v59 == 2) {
																		if (v59 != 1) {
																			if ( != 0) {
																				boolean v62 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(v30);
																				if (v62 == 0) {
																					if ( == 0) {
																						if ( == 0) {
																							boolean v54 = 0;
																							if (v54 == 0) {
																								boolean v64 = this.mAmInternal.isBackgroundActivityStartsEnabled();
																								boolean v63 = v64;
																								if (v63 != 0) {
																									Task v66 = RootWindowContainer.anyTaskForId(p3, 2);
																									Task v65 = v66;
																									if (v65 != 0) {
																										LockTaskController v67 = this.mLockTaskController;
																										boolean v69 = LockTaskController.isLockTaskModeViolation(v65, 0);
																										boolean v68 = v69;
																										if (v68 == 0) {
																											if (v22 == 0) {
																												ActivityOptions v71 = SafeActivityOptions.getOptions(0, 0, 0, this.mTaskSupervisor);
																												ActivityOptions v70 = v71;
																												Task v73 = v65.getRootTask();
																												if (v73 != 0) {
																													if ((p4 & 2) != 0) {
																														this.mUserLeaving = 1;
																														boolean v74 = WindowContainer.mTransitionController.isShellTransitionsEnabled();
																														if (v74 == 0) {
																															boolean v75 = WindowContainer.mTransitionController.isCollecting();
																															if (v75 == 0) {
																																WindowContainer.mTransitionController.collect(v65);
																																StringBuilder v77 = new StringBuilder();
																																StringBuilder v79 = v77.append("moveTaskToFront");
																																StringBuilder v80 = v77.append(" findTaskToMoveToFront");
																																String v81 = v77.toString();
																																boolean v82 = v65.isResizeable();
																																if (v82 == 0) {
																																	boolean v83 = ActivityTaskSupervisor.canUseActivityOptionsLaunchBounds();
																																	if (v83 == 0) {
																																		Rect v84 = .getLaunchBounds();
																																		int v85 = v65.setBounds(v84);
																																		Task v86 = this.mRootWindowContainer.getOrCreateRootTask(0, , v65, 1);
																																		if (v86 == v73) {
																																			boolean v87 = v86.shouldResizeRootTaskWithLaunchBounds();
																																			if (v87 == 0) {
																																				v65.resize(0, 0);
																																				if ( != 0) {
																																					ActivityRecord v89 = v65.getTopNonFinishingActivity();
																																					if (v89 != 0) {
																																						.moveTaskToFront(v65, 0, , , v81);
																																						TaskDisplayArea v91 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
																																						ActivityTaskSupervisor.handleNonResizableTaskIfNeeded(v65, 0, v91, , 0);
																																						if (v89 == 0) {
																																							if ( == 0) {
																																								this.mUserLeaving = 0;
																																								Binder.restoreCallingIdentity(v34);
																																								return;
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					if (p5 == 0) {
						SafeActivityOptions v22 = new SafeActivityOptions(v23);
						if (p1 == 0) {
							ActivityOptions v24 = new ActivityOptions(p1);
							ActivityOptions v23 = ;
							SafeActivityOptions v21 = ;
							int v28 = Binder.getCallingPid();
							int v29 = Binder.getCallingUid();
							if (v32 == 0) {
								long v33 = Binder.clearCallingIdentity();
								if (p1 == 0) {
									if (p1 != 0) {
										IBinder v35 = p1.asBinder();
										ArrayMap v36 = this.mProcessNames.getMap();
										int v37 = v36.size();
										if ( < 0) {
											Object v38 = v36.valueAt();
											int v39 = v38.size();
											if ( < 0) {
												Object v40 = v38.valueAt();
												boolean v41 = v40.hasThread();
												if (v41 == 0) {
													IApplicationThread v42 = v40.getThread();
													IBinder v43 = v42.asBinder();
													if (v43 != v35) {
														if ( < 0) {
															Object v44 = v38.valueAt();
															boolean v45 = v44.hasThread();
															if (v45 == 0) {
																IApplicationThread v46 = v44.getThread();
																IBinder v47 = v46.asBinder();
																if (v47 != v35) {
																	WindowProcessController v34 = v44;
																	ActivityStartController v48 = this.mActivityStartController;
																	ActivityStarter v50 = this.mFactory.obtain();
																	ActivityStarter v51 = v50.setIntent(0);
																	ActivityStarter v52 = v51.setReason("moveTaskToFront");
																	ActivityStarter v49 = v52;
																	if (v58 == 2) {
																		if (v58 != 1) {
																			if ( != 0) {
																				boolean v61 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(v29);
																				if (v61 == 0) {
																					if ( == 0) {
																						if ( == 0) {
																							boolean v53 = 0;
																							if (v53 == 0) {
																								boolean v63 = this.mAmInternal.isBackgroundActivityStartsEnabled();
																								boolean v62 = v63;
																								if (v62 != 0) {
																									Task v65 = RootWindowContainer.anyTaskForId(p3, 2);
																									Task v64 = v65;
																									if (v64 != 0) {
																										LockTaskController v66 = this.mLockTaskController;
																										boolean v68 = LockTaskController.isLockTaskModeViolation(v64, 0);
																										boolean v67 = v68;
																										if (v67 == 0) {
																											if (v21 == 0) {
																												ActivityOptions v70 = SafeActivityOptions.getOptions(0, 0, 0, this.mTaskSupervisor);
																												ActivityOptions v69 = v70;
																												Task v72 = v64.getRootTask();
																												if (v72 != 0) {
																													if ((p4 & 2) != 0) {
																														this.mUserLeaving = 1;
																														boolean v73 = WindowContainer.mTransitionController.isShellTransitionsEnabled();
																														if (v73 == 0) {
																															boolean v74 = WindowContainer.mTransitionController.isCollecting();
																															if (v74 == 0) {
																																WindowContainer.mTransitionController.collect(v64);
																																StringBuilder v76 = new StringBuilder();
																																StringBuilder v78 = v76.append("moveTaskToFront");
																																StringBuilder v79 = v76.append(" findTaskToMoveToFront");
																																String v80 = v76.toString();
																																boolean v81 = v64.isResizeable();
																																if (v81 == 0) {
																																	boolean v82 = ActivityTaskSupervisor.canUseActivityOptionsLaunchBounds();
																																	if (v82 == 0) {
																																		Rect v83 = .getLaunchBounds();
																																		int v84 = v64.setBounds(v83);
																																		Task v85 = this.mRootWindowContainer.getOrCreateRootTask(0, , v64, 1);
																																		if (v85 == v72) {
																																			boolean v86 = v85.shouldResizeRootTaskWithLaunchBounds();
																																			if (v86 == 0) {
																																				v64.resize(0, 0);
																																				if ( != 0) {
																																					ActivityRecord v88 = v64.getTopNonFinishingActivity();
																																					if (v88 != 0) {
																																						.moveTaskToFront(v64, 0, , , v80);
																																						TaskDisplayArea v90 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
																																						ActivityTaskSupervisor.handleNonResizableTaskIfNeeded(v64, 0, v90, , 0);
																																						if (v88 == 0) {
																																							if ( == 0) {
																																								this.mUserLeaving = 0;
																																								Binder.restoreCallingIdentity(v33);
																																								return;
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Task v23 = this.mRootWindowContainer.anyTaskForId(p3);\nLockTaskController v24 = ActivityTaskManagerService.getLockTaskController();\nboolean v25 = v24.isLockTaskModeViolation(v23);', 'ActivityOptions v11 = ActivityOptions.fromBundle(p5);\nSafeActivityOptions v10 = new SafeActivityOptions(v11);', 'ProtoLogImpl v6 = ProtoLogImpl.getSingleInstance();\nv6.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_TASKS, 2117696413, 1, 0, v2);', 'p0.moveTaskToFrontLocked(p1, p2, p3, p4, v6);']

The method moveTaskToFront has the following similar APIs:

- API Name: startSystemLockTaskMode(I)V with Similarity Score: 0.9149845838546753
  - Access Control Level: SYS_OR_SIG and the following code:
Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
LockTaskController v22 = ActivityTaskManagerService.getLockTaskController();
v22.startLockTaskMode(v5, 1, v18);

- API Name: startActivityAsCaller(Landroid/app/IApplicationThread;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;ZI)I with Similarity Score: 0.9098467826843262
  - Access Control Level: SYS_OR_SIG and the following code:
SafeActivityOptions v29 = SafeActivityOptions.fromBundle(p10);
ActivityStarter v30 = ActivityStarter.setActivityOptions(v29);

