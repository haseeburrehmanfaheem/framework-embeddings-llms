This is path 1 for the API with depth 2:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		if (v5 != 0) {
			boolean v3 = ;
			if (v3 == 0) {
				UserManagerService v6 = p0.getUserManager();
				int v7 = UserHandle.getUserId(v1);
				StringBuilder v11 = new StringBuilder();
				StringBuilder v13 = v11.append("getting profiles related to user ");
				StringBuilder v14 = v11.append(p1);
				String v15 = v11.toString();
				long v17 = Binder.clearCallingIdentity();
				IntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);
				[I v19 = v18.toArray();
				Binder.restoreCallingIdentity(v17);
				[I v9 = v19;
				[I v8 = v9;
				ArraySet v21 = new ArraySet();
				if ( >= v8.length) {
					Integer v23 = Integer.valueOf(v8[]);
					boolean v24 = v21.add(v23);
					if ( >= v8.length) {
						ArrayList v25 = new ArrayList();
						if (v33 != 0) {
							IPackageManager v35 = ActivityThread.getPackageManager();
							IPackageManager v34 = v35;
							boolean v36 = v34.isUidPrivileged(v1);
							if (v36 == 0) {
								if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
									String v37 = String.valueOf("getTasks");
									Object v38 = new Object(2);
									Long v39 = Long.valueOf(v1);
									ProtoLogImpl v41 = ProtoLogImpl.getSingleInstance();
									v41.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v38);
									if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
										String v43 = String.valueOf("getTasks");
										Object v44 = new Object(2);
										Long v45 = Long.valueOf(v1);
										ProtoLogImpl v47 = ProtoLogImpl.getSingleInstance();
										v47.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v44);
										boolean v30 = ;
										if (v30 == 0) {
											if (p4 == -1) {
												int v51 = RootWindowContainer.getChildCount();
												if ( < 0) {
													DisplayContent v50 = 0;
													if (v50 != 0) {
														RunningTasks v52 = this.mRunningTasks;
														RecentTasks v53 = this.mRecentTasks;
														if (p1 > 0) {
															this.mTmpSortedSet.clear();
															this.mCallingUid = p4;
															int v56 = UserHandle.getUserId(p4);
															this.mUserId = v56;
															if ((p3 & 4) != 4) {
																this.mCrossUser = ;
																this.mProfileIds = p5;
																if ((p3 & 2) != 2) {
																	this.mAllowed = ;
																	if ((p3 & 1) != 1) {
																		this.mFilterOnlyVisibleRecents = ;
																		this.mRecentTasks = v53;
																		if ((p3 & 8) != 8) {
																			this.mKeepIntentExtra = ;
																			RunningTasks$$ExternalSyntheticLambda0 v57 = new RunningTasks$$ExternalSyntheticLambda0();
																			ArgumentPlaceholder v59 = PooledLambda.__(Tas.class);
																			PooledConsumer v60 = PooledLambda.obtainConsumer(v57, RunningTasks, v59);
																			.forAllLeafTasks(v60, 0);
																			v60.recycle();
																			Iterator v63 = this.mTmpSortedSet.iterator();
																			boolean v64 = v63.hasNext();
																			if (v64 == 0) {
																				if ( != 0) {
																					Object v65 = v63.next();
																					ActivityManager$RunningTaskInfo v66 = RunningTasks.createRunningTaskInfo(v65);
																					boolean v67 = p2.add(v66);
																					boolean v68 = v63.hasNext();
																					if (v68 == 0) {
																						return v25;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		if (v5 != 0) {
			boolean v3 = ;
			if (v3 == 0) {
				UserManagerService v6 = p0.getUserManager();
				int v7 = UserHandle.getUserId(v1);
				[I v9 = UserManagerService.getProfileIds(v7, 0, 1);
				[I v8 = v9;
				ArraySet v10 = new ArraySet();
				if ( >= v8.length) {
					Integer v12 = Integer.valueOf(v8[]);
					boolean v13 = v10.add(v12);
					if ( >= v8.length) {
						ArrayList v14 = new ArrayList();
						this.sThreadPriorityBooster.boost();
						if (v21 != 0) {
							IPackageManager v22 = AppGlobals.getPackageManager();
							boolean v23 = v22.isUidPrivileged(v1);
							if (v23 == 0) {
								if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
									String v24 = String.valueOf("getTasks");
									Object v25 = new Object(2);
									Long v26 = Long.valueOf(v1);
									ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v25);
									if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
										String v28 = String.valueOf("getTasks");
										Object v29 = new Object(2);
										Long v30 = Long.valueOf(v1);
										ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v29);
										boolean v18 = ;
										if (v18 == 0) {
											if (p4 == -1) {
												DisplayContent v33 = RootWindowContainer.getDisplayContent(p4);
												if (v33 != 0) {
													RunningTasks v34 = this.mTaskSupervisor.getRunningTasks();
													RecentTasks v35 = this.mService.getRecentTasks();
													v34.getTasks(p1, v14, (((p2 | ) | ) | ), v35, , v1, v10);
													this.sThreadPriorityBooster.reset();
													return v14;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		boolean v3 = p0.isCrossUserAllowed(v2, v1);
		if (v3 == 0) {
			UserManagerService v4 = p0.getUserManager();
			int v5 = UserHandle.getUserId(v1);
			[I v6 = v4.getProfileIds(v5, 1);
			ArraySet v7 = new ArraySet();
			if ( >= v6.length) {
				Integer v9 = Integer.valueOf(v6[]);
				boolean v10 = v7.add(v9);
				if ( >= v6.length) {
					ArrayList v11 = new ArrayList();
					WindowManagerService.boostPriorityForLockedSection();
					boolean v14 = p0.isGetTasksAllowed("getTasks", v2, v1);
					if (v14 == 0) {
						this.mRootWindowContainer.getRunningTasks(p1, v11, (((p2 | ) | ) | ), v1, v7, p4);
						WindowManagerService.resetPriorityAfterLockedSection();
						return v11;
					}
				}
			}
		}
	}
}
