The method isActivityStartAllowedOnDisplay has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	if (-10000 == -10000) {
		if (p4 < 0) {
			int v5 = ;
			ResolveInfo v7 = ActivityTaskSupervisor.resolveIntent(p1, p2, p3, 0, v5);
			ActivityInfo v8 = ActivityTaskSupervisor.resolveActivity(p1, v7, 0, 0);
			ActivityInfo v6 = v8;
			ActivityInfo v9 = this.mAmInternal.getActivityInfoForUser(v6, p4);
			ActivityInfo v4 = v9;
			if (p1 != 0) {
				if (ActivityTaskManagerService.mSupportsMultiDisplay != 0) {
					boolean v15 = ActivityTaskSupervisor.isCallerAllowedToLaunchOnDisplay(p2, p3, p1, p4);
					if (v15 != 0) {
						DisplayContent v16 = this.mRootWindowContainer.getDisplayContentOrCreate(p1);
						if (v16 == 0) {
							boolean v17 = DisplayContent.mDwpcHelper.hasController();
							if (v17 == 0) {
								ArrayList v18 = new ArrayList();
								if (p4 == 0) {
									boolean v20 = v18.add(p4);
									if (0 == 0) {
										ActivityTaskSupervisor$$ExternalSyntheticLambda6 v21 = new ActivityTaskSupervisor$$ExternalSyntheticLambda6(v18);
										0.forAllActivities(v21);
										int v24 = v16.getWindowingMode();
										boolean v25 = DisplayContent.mDwpcHelper.canContainActivities(v18, v24);
										if (v25 != 0) {
											boolean v14 = 0;
											boolean v13 = v14;
											Binder.restoreCallingIdentity(v3);
											return v13;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	if (-10000 == -10000) {
		if (p4 < 0) {
			int v5 = ;
			ResolveInfo v7 = ActivityTaskSupervisor.resolveIntent(p1, p2, p3, 0, v5);
			ActivityInfo v8 = ActivityTaskSupervisor.resolveActivity(p1, v7, 0, 0);
			ActivityInfo v6 = v8;
			ActivityInfo v9 = this.mAmInternal.getActivityInfoForUser(v6, p4);
			ActivityInfo v4 = v9;
			WindowManagerThreadPriorityBooster.boost();
			if (p1 != 0) {
				if (ActivityTaskManagerService.mSupportsMultiDisplay != 0) {
					boolean v16 = ActivityTaskSupervisor.isCallerAllowedToLaunchOnDisplay(p2, p3, p1, p4);
					if (v16 != 0) {
						DisplayContent v17 = this.mRootWindowContainer.getDisplayContentOrCreate(p1);
						if (v17 == 0) {
							boolean v18 = DisplayContent.mDwpcHelper.hasController();
							if (v18 == 0) {
								ArrayList v19 = new ArrayList();
								if (p4 == 0) {
									boolean v21 = v19.add(p4);
									if (0 == 0) {
										ActivityTaskSupervisor$$ExternalSyntheticLambda6 v22 = new ActivityTaskSupervisor$$ExternalSyntheticLambda6(v19);
										0.forAllActivities(v22);
										int v25 = v17.getWindowingMode();
										boolean v26 = DisplayContent.mDwpcHelper.canContainActivities(v19, v25);
										if (v26 != 0) {
											boolean v15 = 0;
											boolean v14 = v15;
											Binder.restoreCallingIdentity(v3);
											return v14;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	if (-10000 == -10000) {
		if (p4 < 0) {
			int v5 = ;
			ResolveInfo v7 = ActivityTaskSupervisor.resolveIntent(p1, p2, p3, 0, v5);
			ActivityInfo v8 = ActivityTaskSupervisor.resolveActivity(p1, v7, 0, 0);
			ActivityInfo v6 = v8;
			ActivityInfo v9 = this.mAmInternal.getActivityInfoForUser(v6, p4);
			ActivityInfo v4 = v9;
			if (p1 != 0) {
				if (ActivityTaskManagerService.mSupportsMultiDisplay != 0) {
					boolean v15 = ActivityTaskSupervisor.isCallerAllowedToLaunchOnDisplay(p2, p3, p1, p4);
					if (v15 != 0) {
						DisplayContent v16 = this.mRootWindowContainer.getDisplayContentOrCreate(p1);
						if (v16 == 0) {
							boolean v17 = DisplayContent.mDwpcHelper.hasController();
							if (v17 == 0) {
								ArrayList v18 = new ArrayList();
								if (p4 == 0) {
									boolean v20 = v18.add(p4);
									if (0 == 0) {
										ActivityTaskSupervisor$$ExternalSyntheticLambda6 v21 = new ActivityTaskSupervisor$$ExternalSyntheticLambda6(v18);
										0.forAllActivities(v21);
										int v24 = v16.getWindowingMode();
										boolean v25 = DisplayContent.mDwpcHelper.canContainActivities(v18, v24);
										if (v25 != 0) {
											boolean v14 = 1;
											boolean v13 = v14;
											Binder.restoreCallingIdentity(v3);
											return v13;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ActivityInfo v4 = p0.resolveActivityInfoForIntent(p2, p3, p4, v1);\nboolean v6 = this.mTaskSupervisor.canPlaceEntityOnDisplay(p1, v2, v1, v4);']

The method isActivityStartAllowedOnDisplay has the following similar APIs:

- API Name: startActivityAsUserByIntent(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;ILandroid/os/IBinder;Landroid/os/Bundle;)V with Similarity Score: 0.759148359298706
  - Access Control Level: SYS_OR_SIG and the following code:
p0.verifyActivityCanHandleIntent(v11, v7, p5);
ActivityTaskManagerInternal v19 = this.mInjector.getActivityTaskManagerInternal();
int v20 = v19.startActivityAsUser(p1, p2, p3, v11, p6, 0, p7, p5);

- API Name: getTvInteractiveAppServiceList(I)Ljava/util/List; with Similarity Score: 0.7524848580360413
  - Access Control Level: NONE and the following code:
int v5 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
TvInteractiveAppManagerService$UserState v11 = TvInteractiveAppManagerService.getOrCreateUserStateLocked(p2);
List v17 = v14.queryIntentServicesAsUser(v15, 132, p2);
ArrayList v18 = new ArrayList();

