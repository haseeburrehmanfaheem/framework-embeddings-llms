The method startSystemLockTaskMode has the following code snippet:

This is path 1 for the API with depth 2:
public void startSystemLockTaskMode(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									WindowContainer v20 = TaskFragment.getParent();
									if (v20 != 0) {
										TaskFragment v21 = v20.asTaskFragment();
										if (v21 != 0) {
											TaskFragment v19 = ;
											Task v22 = 0;
											Task v18 = v22;
											boolean v25 = Task.isAttached();
											if (v25 != 0) {
												TaskDisplayArea v26 = Task.getDisplayArea();
												boolean v27 = Task.isActivityTypeHome();
												if (v27 != 0) {
													boolean v28 = Task.returnsToHomeRootTask();
													if (v28 == 0) {
														StringBuilder v29 = new StringBuilder();
														StringBuilder v31 = v29.append(p1);
														StringBuilder v32 = v29.append(" returnToHome");
														String v33 = v29.toString();
														v26.moveHomeRootTaskToFront(v33);
														boolean v35 = Task.isRootTask();
														if (v35 == 0) {
															Task v36 = v26.getFocusedRootTask();
															if (0 != 0) {
																WindowContainer v37 = .getParent();
																v37.positionChildAt(2147483647, , 1);
																v26.updateLastFocusedRootTask(, p1);
																if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
																	String v41 = String.valueOf(v6);
																	Object v42 = new Object(1);
																	ProtoLogImpl v44 = ProtoLogImpl.getSingleInstance();
																	v44.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_LOCKTASK, 295861935, 0, 0, v42);
																	if (v6 == 0) {
																		if (Task.mLockTaskAuth != 0) {
																			int v47 = RootWindowContainer.getChildCount();
																			if ( < 0) {
																				WindowContainer v48 = RootWindowContainer.getChildAt();
																				Task v49 = v48.getFocusedRootTask();
																				if (v49 == 0) {
																					if ( < 0) {
																						WindowContainer v50 = RootWindowContainer.getChildAt();
																						Task v51 = v50.getFocusedRootTask();
																						if (v51 == 0) {
																							Task v46 = v51;
																							if (v46 == 0) {
																								WindowContainer$$ExternalSyntheticLambda1 v53 = new WindowContainer$$ExternalSyntheticLambda1();
																								Task v55 = WindowContainer.getTask(v53, 1);
																								Task v52 = v55;
																								if (v6 != v52) {
																									int v56 = Binder.getCallingUid();
																									long v57 = Binder.clearCallingIdentity();
																									[I v58 = new [I(1);
																									int v60 = RootWindowContainer.getChildCount();
																									if ( < 0) {
																										WindowContainer v61 = RootWindowContainer.getChildAt();
																										v61.removeRootTasksInWindowingModes(v58);
																										if ( < 0) {
																											LockTaskController v63 = this.mLockTaskController;
																											if (Task.mLockTaskAuth != 0) {
																												if (p2 != 0) {
																													Task.mLockTaskUid = v56;
																													if (Task.mLockTaskAuth != 1) {
																														if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
																															ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 1401295262, 0, 0, 0);
																															Object v66 = LocalServices.getService(StatusBarManagerInterna.class);
																															if (v66 == 0) {
																																v66.showScreenPinningRequest(Task.mTaskId);
																																Binder.restoreCallingIdentity(v57);
																																Binder.restoreCallingIdentity(v2);
																																return;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void startSystemLockTaskMode(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
			Integer v12 = Integer.valueOf(p1);
			PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
			Task v14 = RootWindowContainer.getTask(v13);
			v13.recycle();
			if (v14 == 0) {
				if (0 == 0) {
					Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
					if (v16 == 0) {
						Task v17 = v14.getRootTask();
						if (v17 == v16) {
							if (0 == 0) {
								boolean v18 = v14.reparent(v16, 0, , 1, 1, "anyTaskForId");
								Task v8 = v14;
								Task v7 = v8;
								if (v7 != 0) {
									WindowContainer v21 = TaskFragment.getParent();
									if (v21 != 0) {
										TaskFragment v22 = v21.asTaskFragment();
										if (v22 != 0) {
											TaskFragment v20 = ;
											Task v23 = 0;
											Task v19 = v23;
											boolean v26 = Task.isAttached();
											if (v26 != 0) {
												TaskDisplayArea v27 = Task.getDisplayArea();
												boolean v28 = Task.isActivityTypeHome();
												if (v28 != 0) {
													boolean v29 = Task.returnsToHomeRootTask();
													if (v29 == 0) {
														StringBuilder v30 = new StringBuilder();
														StringBuilder v32 = v30.append(p1);
														StringBuilder v33 = v30.append(" returnToHome");
														String v34 = v30.toString();
														v27.moveHomeRootTaskToFront(v34);
														boolean v36 = Task.isRootTask();
														if (v36 == 0) {
															Task v37 = v27.getFocusedRootTask();
															if (0 != 0) {
																WindowContainer v38 = .getParent();
																v38.positionChildAt(2147483647, , 1);
																v27.updateLastFocusedRootTask(, p1);
																if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
																	String v42 = String.valueOf(v7);
																	Object v43 = new Object(1);
																	ProtoLogImpl v45 = ProtoLogImpl.getSingleInstance();
																	v45.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_LOCKTASK, 295861935, 0, 0, v43);
																	if (v7 == 0) {
																		if (Task.mLockTaskAuth != 0) {
																			int v48 = RootWindowContainer.getChildCount();
																			if ( < 0) {
																				WindowContainer v49 = RootWindowContainer.getChildAt();
																				Task v50 = v49.getFocusedRootTask();
																				if (v50 == 0) {
																					if ( < 0) {
																						WindowContainer v51 = RootWindowContainer.getChildAt();
																						Task v52 = v51.getFocusedRootTask();
																						if (v52 == 0) {
																							Task v47 = v52;
																							if (v47 == 0) {
																								WindowContainer$$ExternalSyntheticLambda1 v54 = new WindowContainer$$ExternalSyntheticLambda1();
																								Task v56 = WindowContainer.getTask(v54, 1);
																								Task v53 = v56;
																								if (v7 != v53) {
																									int v57 = Binder.getCallingUid();
																									long v58 = Binder.clearCallingIdentity();
																									[I v59 = new [I(1);
																									int v61 = RootWindowContainer.getChildCount();
																									if ( < 0) {
																										WindowContainer v62 = RootWindowContainer.getChildAt();
																										v62.removeRootTasksInWindowingModes(v59);
																										if ( < 0) {
																											LockTaskController v64 = this.mLockTaskController;
																											if (Task.mLockTaskAuth != 0) {
																												if (p2 != 0) {
																													Task.mLockTaskUid = v57;
																													if (Task.mLockTaskAuth != 1) {
																														if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
																															ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 1401295262, 0, 0, 0);
																															Object v67 = LocalServices.getService(StatusBarManagerInterna.class);
																															if (v67 == 0) {
																																v67.showScreenPinningRequest(Task.mTaskId);
																																Binder.restoreCallingIdentity(v58);
																																Binder.restoreCallingIdentity(v2);
																																return;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void startSystemLockTaskMode(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									WindowContainer v20 = TaskFragment.getParent();
									if (v20 != 0) {
										TaskFragment v21 = v20.asTaskFragment();
										if (v21 != 0) {
											TaskFragment v22 = v21.getRootTaskFragment();
											TaskFragment v19 = ;
											Task v23 = 0;
											Task v18 = v23;
											boolean v26 = Task.isAttached();
											if (v26 != 0) {
												TaskDisplayArea v27 = Task.getDisplayArea();
												boolean v28 = Task.isActivityTypeHome();
												if (v28 != 0) {
													boolean v29 = Task.returnsToHomeRootTask();
													if (v29 == 0) {
														StringBuilder v30 = new StringBuilder();
														StringBuilder v32 = v30.append(p1);
														StringBuilder v33 = v30.append(" returnToHome");
														String v34 = v30.toString();
														v27.moveHomeRootTaskToFront(v34);
														boolean v36 = Task.isRootTask();
														if (v36 == 0) {
															Task v37 = v27.getFocusedRootTask();
															if (0 != 0) {
																WindowContainer v38 = .getParent();
																v38.positionChildAt(2147483647, , 1);
																v27.updateLastFocusedRootTask(, p1);
																if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
																	String v42 = String.valueOf(v6);
																	Object v43 = new Object(1);
																	ProtoLogImpl v45 = ProtoLogImpl.getSingleInstance();
																	v45.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_LOCKTASK, 295861935, 0, 0, v43);
																	if (v6 == 0) {
																		if (Task.mLockTaskAuth != 0) {
																			int v48 = RootWindowContainer.getChildCount();
																			if ( < 0) {
																				WindowContainer v49 = RootWindowContainer.getChildAt();
																				Task v50 = v49.getFocusedRootTask();
																				if (v50 == 0) {
																					if ( < 0) {
																						WindowContainer v51 = RootWindowContainer.getChildAt();
																						Task v52 = v51.getFocusedRootTask();
																						if (v52 == 0) {
																							Task v47 = v52;
																							if (v47 == 0) {
																								WindowContainer$$ExternalSyntheticLambda1 v54 = new WindowContainer$$ExternalSyntheticLambda1();
																								Task v56 = WindowContainer.getTask(v54, 1);
																								Task v53 = v56;
																								if (v6 != v53) {
																									int v57 = Binder.getCallingUid();
																									long v58 = Binder.clearCallingIdentity();
																									[I v59 = new [I(1);
																									int v61 = RootWindowContainer.getChildCount();
																									if ( < 0) {
																										WindowContainer v62 = RootWindowContainer.getChildAt();
																										v62.removeRootTasksInWindowingModes(v59);
																										if ( < 0) {
																											LockTaskController v64 = this.mLockTaskController;
																											if (Task.mLockTaskAuth != 0) {
																												if (p2 != 0) {
																													Task.mLockTaskUid = v57;
																													if (Task.mLockTaskAuth != 1) {
																														if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
																															ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 1401295262, 0, 0, 0);
																															Object v67 = LocalServices.getService(StatusBarManagerInterna.class);
																															if (v67 == 0) {
																																v67.showScreenPinningRequest(Task.mTaskId);
																																Binder.restoreCallingIdentity(v58);
																																Binder.restoreCallingIdentity(v2);
																																return;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v11 = Integer.valueOf(p1);\nPooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);\nTask v13 = RootWindowContainer.getTask(v12);', 'Task v6 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);\nLockTaskController v22 = ActivityTaskManagerService.getLockTaskController();\nv22.startLockTaskMode(v5, 1, v18);', 'Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);\np0.startLockTaskMode(v4, 1);']

The method startSystemLockTaskMode has the following similar APIs:

- API Name: getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot; with Similarity Score: 0.9915001392364502
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v11 = Integer.valueOf(p1);
PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
Task v13 = RootWindowContainer.getTask(v12);

- API Name: moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V with Similarity Score: 0.9149845838546753
  - Access Control Level: SYS_OR_SIG and the following code:
Task v23 = this.mRootWindowContainer.anyTaskForId(p3);
LockTaskController v24 = ActivityTaskManagerService.getLockTaskController();
boolean v25 = v24.isLockTaskModeViolation(v23);

