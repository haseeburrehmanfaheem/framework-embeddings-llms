The method startBackNavigation has the following code snippet:

This is path 1 for the API with depth 2:
public BackNavigationInfo startBackNavigation(boolean p1, IWindowFocusObserver p2, BackAnimationAdaptor p3){
	if (this.mBackNavigationController != 0) {
		Object v3 = WindowManagerService.mTransactionFactory.get();
		this.mFocusObserver = p2;
		BackNavigationInfo$Builder v4 = new BackNavigationInfo$Builder();
		this.sThreadPriorityBooster.boost();
		Object v9 = this.sLocalServiceObjects.get(WindowManagerInterna.class);
		Object v8 = v9;
		IBinder v10 = v8.getFocusedWindowToken();
		DisplayContent v12 = this.mRoot.getTopFocusedDisplayContent();
		WindowState v11 = DisplayContent.mCurrentFocus;
		if (v11 != 0) {
			Object v14 = this.mWindowsByFocusToken.get(v10);
			EmbeddedWindowController$EmbeddedWindow v13 = v14;
			if (v13 == 0) {
				if (v11 == 0) {
					if (ProtoLogCache.WM_DEBUG_BACK_PREVIEW_enabled == 0) {
						ProtoLogImpl v16 = ProtoLogImpl.getSingleInstance();
						v16.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_BACK_PREVIEW, -997565097, 0, "Focused window found using getFocusedWindowToken", 0);
						if (v11 == 0) {
							RecentsAnimationController v18 = this.mRecentsAnimationController;
							if (WindowState.mActivityRecord == 0) {
								boolean v19 = WindowState.mActivityRecord.isActivityTypeHomeOrRecents();
								if (v19 == 0) {
									if (this.mCollectingTransition == 0) {
										boolean v21 = this.mCollectingTransition.isTransientLaunch(WindowState.mActivityRecord);
										if (v21 == 0) {
											int v22 = this.mPlayingTransitions.size();
											if ( < 0) {
												Object v23 = this.mPlayingTransitions.get();
												boolean v24 = v23.isTransientLaunch(WindowState.mActivityRecord);
												if (v24 == 0) {
													if ( < 0) {
														Object v25 = this.mPlayingTransitions.get();
														boolean v26 = v25.isTransientLaunch(WindowState.mActivityRecord);
														if (v26 == 0) {
															boolean v20 = 1;
															if (v20 != 0) {
																if (v18 == 0) {
																	if (this.mInputConsumerEnabled == 0) {
																		if (WindowState.mActivityRecord == 0) {
																			boolean v28 = RecentsAnimationController.isTargetApp(WindowState.mActivityRecord);
																			if (v28 != 0) {
																				boolean v29 = RecentsAnimationController.isAnimatingApp(WindowState.mActivityRecord);
																				if (v29 == 0) {
																					boolean v27 = ;
																					if (v27 == 0) {
																						if (ProtoLogCache.WM_DEBUG_BACK_PREVIEW_enabled == 0) {
																							ProtoLogImpl v31 = ProtoLogImpl.getSingleInstance();
																							v31.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_BACK_PREVIEW, -451552570, 0, "Current focused window being animated by recents. Overriding back callback to recents controller callback.", 0);
																							this.sThreadPriorityBooster.reset();
																							BackNavigationInfo v2 = 0;
																							return v2;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public BackNavigationInfo startBackNavigation(boolean p1, IWindowFocusObserver p2, BackAnimationAdaptor p3){
	if (this.mBackNavigationController != 0) {
		Object v3 = WindowManagerService.mTransactionFactory.get();
		this.mFocusObserver = p2;
		BackNavigationInfo$Builder v4 = new BackNavigationInfo$Builder();
		this.sThreadPriorityBooster.boost();
		Object v9 = this.sLocalServiceObjects.get(WindowManagerInterna.class);
		Object v8 = v9;
		IBinder v10 = v8.getFocusedWindowToken();
		DisplayContent v12 = this.mRoot.getTopFocusedDisplayContent();
		WindowState v11 = DisplayContent.mCurrentFocus;
		if (v11 != 0) {
			Object v14 = this.mWindowsByFocusToken.get(v10);
			EmbeddedWindowController$EmbeddedWindow v13 = v14;
			if (v13 == 0) {
				if (v11 == 0) {
					if (ProtoLogCache.WM_DEBUG_BACK_PREVIEW_enabled == 0) {
						ProtoLogImpl v16 = ProtoLogImpl.getSingleInstance();
						v16.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_BACK_PREVIEW, -997565097, 0, "Focused window found using getFocusedWindowToken", 0);
						if (v11 == 0) {
							RecentsAnimationController v18 = this.mRecentsAnimationController;
							if (WindowState.mActivityRecord == 0) {
								boolean v19 = WindowState.mActivityRecord.isActivityTypeHomeOrRecents();
								if (v19 == 0) {
									if (this.mCollectingTransition == 0) {
										boolean v21 = this.mCollectingTransition.isTransientLaunch(WindowState.mActivityRecord);
										if (v21 == 0) {
											int v22 = this.mPlayingTransitions.size();
											if ( < 0) {
												Object v23 = this.mPlayingTransitions.get();
												boolean v24 = v23.isTransientLaunch(WindowState.mActivityRecord);
												if (v24 == 0) {
													if ( < 0) {
														boolean v20 = 0;
														if (v20 != 0) {
															if (v18 == 0) {
																if (this.mInputConsumerEnabled == 0) {
																	if (WindowState.mActivityRecord == 0) {
																		boolean v26 = RecentsAnimationController.isTargetApp(WindowState.mActivityRecord);
																		if (v26 != 0) {
																			boolean v27 = RecentsAnimationController.isAnimatingApp(WindowState.mActivityRecord);
																			if (v27 == 0) {
																				boolean v25 = ;
																				if (v25 == 0) {
																					if (ProtoLogCache.WM_DEBUG_BACK_PREVIEW_enabled == 0) {
																						ProtoLogImpl v29 = ProtoLogImpl.getSingleInstance();
																						v29.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_BACK_PREVIEW, -451552570, 0, "Current focused window being animated by recents. Overriding back callback to recents controller callback.", 0);
																						this.sThreadPriorityBooster.reset();
																						BackNavigationInfo v2 = 0;
																						return v2;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['this.mFocusObserver = p2;\nBackNavigationInfo$Builder v4 = new BackNavigationInfo$Builder();\nObject v10 = this.sLocalServiceObjects.get(WindowManagerInterna.class);\nIBinder v8 = v9.getFocusedWindowToken();\nDisplayContent v12 = this.mRoot.getTopFocusedDisplayContent();', 'this.sThreadPriorityBooster.boost();\nObject v3 = WindowManagerService.mTransactionFactory.get();', 'boostPriorityForLockedSection();', 'BackNavigationInfo v2 = this.mBackNavigationController.startBackNavigation(p1, p2, p3);\nreturn v2;']

The method startBackNavigation has the following similar APIs:

- API Name: setRunningRemoteTransitionDelegate(Landroid/app/IApplicationThread;)V with Similarity Score: 0.8623384237289429
  - Access Control Level: SYS_OR_SIG and the following code:
this.sThreadPriorityBooster.boost();

- API Name: releaseSomeActivities(Landroid/app/IApplicationThread;)V with Similarity Score: 0.8164511322975159
  - Access Control Level: NONE and the following code:
this.sThreadPriorityBooster.boost();
this.sThreadPriorityBooster.reset();

