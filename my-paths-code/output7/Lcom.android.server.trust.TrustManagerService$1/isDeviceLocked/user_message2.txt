The method isDeviceLocked has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isDeviceLocked(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	if (v3 == 0) {
		VirtualDeviceManagerInternal v4 = this.mVirtualDeviceManager;
		if (v4 != 0) {
			Object v6 = this.sLocalServiceObjects.get(VirtualDeviceManagerInterna.class);
			Object v5 = v6;
			this.mVirtualDeviceManager = v5;
			VirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;
			if (v8 != 0) {
				if (p2 == -1) {
					if (p2 == 0) {
						VirtualDeviceManagerInternal v9 = this.mVirtualDeviceManager;
						boolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);
						if (v10 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								int v11 = ITrustManager$Stub.getCallingPid();
								int v12 = ActivityManager.handleIncomingUser(v11, v1, p1, 0, 1, "isDeviceLocked", 0);
								long v13 = Binder.clearCallingIdentity();
								LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
								boolean v15 = v14.isSeparateProfileChallengeEnabled(v12);
								if (v15 != 0) {
									long v18 = Binder.clearCallingIdentity();
									UserInfo v19 = this.mUserManager.getProfileParent(p2);
									if (v19 == 0) {
										UserHandle v20 = v19.getUserHandle();
										int v21 = v20.getIdentifier();
										Binder.restoreCallingIdentity(v18);
										int v17 = v21;
										int v16 = v17;
										boolean v23 = this.this$0.isDeviceLockedInner();
										Binder.restoreCallingIdentity(v13);
										return v23;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isDeviceLocked(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	if (v3 == 0) {
		VirtualDeviceManagerInternal v4 = this.mVirtualDeviceManager;
		if (v4 != 0) {
			Object v6 = this.sLocalServiceObjects.get(VirtualDeviceManagerInterna.class);
			Object v5 = v6;
			this.mVirtualDeviceManager = v5;
			VirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;
			if (v8 != 0) {
				if (p2 == -1) {
					if (p2 == 0) {
						VirtualDeviceManagerInternal v9 = this.mVirtualDeviceManager;
						boolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);
						if (v10 == 0) {
							boolean v2 = 0;
							if (v2 == 0) {
								int v11 = ITrustManager$Stub.getCallingPid();
								int v12 = ActivityManager.handleIncomingUser(v11, v1, p1, 0, 1, "isDeviceLocked", 0);
								long v13 = Binder.clearCallingIdentity();
								LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
								boolean v15 = v14.isSeparateProfileChallengeEnabled(v12);
								if (v15 != 0) {
									long v18 = Binder.clearCallingIdentity();
									UserInfo v19 = this.mUserManager.getProfileParent(p2);
									if (v19 == 0) {
										UserHandle v20 = v19.getUserHandle();
										int v21 = v20.getIdentifier();
										Binder.restoreCallingIdentity(v18);
										int v17 = v21;
										int v16 = v17;
										boolean v23 = this.this$0.isDeviceLockedInner();
										Binder.restoreCallingIdentity(v13);
										return v23;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean isDeviceLocked(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	if (v3 == 0) {
		VirtualDeviceManagerInternal v4 = this.mVirtualDeviceManager;
		if (v4 != 0) {
			Object v6 = this.sLocalServiceObjects.get(VirtualDeviceManagerInterna.class);
			Object v5 = v6;
			this.mVirtualDeviceManager = v5;
			VirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;
			if (v8 != 0) {
				if (p2 == -1) {
					if (p2 == 0) {
						VirtualDeviceManagerInternal v9 = this.mVirtualDeviceManager;
						boolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);
						if (v10 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								int v11 = ITrustManager$Stub.getCallingPid();
								int v12 = ActivityManager.handleIncomingUser(v11, v1, p1, 0, 1, "isDeviceLocked", 0);
								long v13 = Binder.clearCallingIdentity();
								LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
								boolean v15 = v14.isSeparateProfileChallengeEnabled(v12);
								if (v15 != 0) {
									long v18 = Binder.clearCallingIdentity();
									UserInfo v19 = this.mUserManager.getProfileParent(p2);
									if (v19 == 0) {
										Binder.restoreCallingIdentity(v18);
										int v17 = p2;
										int v16 = v17;
										boolean v21 = this.this$0.isDeviceLockedInner();
										Binder.restoreCallingIdentity(v13);
										return v21;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = ITrustManager$Stub.getCallingUid();\nVirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;\nboolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);\nLockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);\nboolean v15 = v14.isSeparateProfileChallengeEnabled(v12);\nreturn this.this$0.isDeviceLockedInner();', 'TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);\nboolean v9 = v8.isDisplayOwnedByAnyVirtualDevice(p2);\nLockPatternUtils v13 = this.mLockPatternUtils;\nboolean v14 = v13.isSeparateProfileChallengeEnabled(v11);\nreturn this.mDeviceLockedForUser.get(, 1);', 'int v1 = ITrustManager$Stub.getCallingUid();\nboolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);\nLockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);\nboolean v7 = v6.isSeparateProfileChallengeEnabled(v4);\nreturn this.this$0.isDeviceLockedInner();']

The method isDeviceLocked has the following similar APIs:

- API Name: isDeviceSecure(II)Z with Similarity Score: 0.8796044588088989
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = ITrustManager$Stub.getCallingUid();
boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
int v3 = ITrustManager$Stub.getCallingPid();
int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceSecure", 0);
LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);

- API Name: isDeviceSecure(II)Z with Similarity Score: 0.848404586315155
  - Access Control Level: SYS_OR_SIG and the following code:
VirtualDeviceManagerInternal v8 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
boolean v9 = v8.isDisplayOwnedByAnyVirtualDevice(p2);
UserInfo v19 = this.mUserManager.getProfileParent(p2);

