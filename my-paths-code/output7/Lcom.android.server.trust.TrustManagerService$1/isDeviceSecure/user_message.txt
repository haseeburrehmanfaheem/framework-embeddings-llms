This is path 1 for the API with depth 2:
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	if (v3 == 0) {
		VirtualDeviceManagerInternal v4 = this.mVirtualDeviceManager;
		if (v4 != 0) {
			Object v6 = this.sLocalServiceObjects.get(VirtualDeviceManagerInterna.class);
			Object v5 = v6;
			this.mVirtualDeviceManager = v5;
			VirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;
			if (v8 != 0) {
				if (p2 == -1) {
					if (p2 == 0) {
						VirtualDeviceManagerInternal v9 = this.mVirtualDeviceManager;
						boolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);
						if (v10 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								int v11 = ITrustManager$Stub.getCallingPid();
								int v12 = ActivityManager.handleIncomingUser(v11, v1, p1, 0, 1, "isDeviceSecure", 0);
								long v13 = Binder.clearCallingIdentity();
								LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
								boolean v15 = v14.isSeparateProfileChallengeEnabled(v12);
								if (v15 != 0) {
									long v18 = Binder.clearCallingIdentity();
									UserInfo v19 = this.mUserManager.getProfileParent(p2);
									if (v19 == 0) {
										UserHandle v20 = v19.getUserHandle();
										int v21 = v20.getIdentifier();
										Binder.restoreCallingIdentity(v18);
										int v17 = v21;
										int v16 = v17;
										LockPatternUtils v23 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
										boolean v24 = v23.isSecure();
										Binder.restoreCallingIdentity(v13);
										return v24;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	if (v3 == 0) {
		VirtualDeviceManagerInternal v4 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
		if (v4 != 0) {
			Object v5 = LocalServices.getService(VirtualDeviceManagerInterna.class);
			TrustManagerService.-$$Nest$fputmVirtualDeviceManager(this.this$0, v5);
			VirtualDeviceManagerInternal v7 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
			if (v7 != 0) {
				if (p2 == -1) {
					if (p2 == 0) {
						VirtualDeviceManagerInternal v8 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
						boolean v9 = v8.isDisplayOwnedByAnyVirtualDevice(p2);
						if (v9 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								int v10 = ITrustManager$Stub.getCallingPid();
								int v11 = ActivityManager.handleIncomingUser(v10, v1, p1, 0, 1, "isDeviceSecure", 0);
								long v12 = Binder.clearCallingIdentity();
								LockPatternUtils v13 = this.mLockPatternUtils;
								boolean v14 = v13.isSeparateProfileChallengeEnabled(v11);
								if (v14 != 0) {
									int v16 = this.this$0.resolveProfileParent(v11);
									int v15 = v16;
									LockPatternUtils v17 = this.mLockPatternUtils;
									boolean v18 = v17.isSecure();
									Binder.restoreCallingIdentity(v12);
									return v18;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
	if (v2 == 0) {
		int v3 = ITrustManager$Stub.getCallingPid();
		int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceSecure", 0);
		long v5 = Binder.clearCallingIdentity();
		LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
		boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);
		if (v7 != 0) {
			int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);
			LockPatternUtils v9 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
			boolean v10 = v9.isSecure();
			Binder.restoreCallingIdentity(v5);
			return v10;
		}
	}
}
