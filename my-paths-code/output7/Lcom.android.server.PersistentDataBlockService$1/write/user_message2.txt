The method write has the following code snippet:

This is path 1 for the API with depth 2:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		long v6 = PersistentDataBlockService.getBlockDeviceSize();
		if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) {
			long v5 = ;
			long v4 = v5;
			if ((p1.length < v4) <= 0) {
				RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
				FileChannel v11 = v9.getChannel();
				FileChannel v8 = v11;
				FileChannel v7 = v8;
				ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
				[B v13 = new [B(32);
				ByteBuffer v14 = v12.put(v13);
				ByteBuffer v15 = v12.putInt(428873843);
				ByteBuffer v16 = v12.putInt(p1.length);
				ByteBuffer v17 = v12.put(p1);
				Buffer v18 = v12.flip();
				Object v19 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				boolean v20 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
				if (v20 != 0) {
					int v21 = v7.write(v12);
					v7.force(1);
					byte[] v25 = PersistentDataBlockService.computeDigestLocked(0);
					if (v25 == 0) {
						FileChannel v26 = PersistentDataBlockService.getBlockOutputChannel();
						ByteBuffer v27 = ByteBuffer.allocate(32);
						ByteBuffer v28 = v27.put(v25);
						Buffer v29 = v27.flip();
						int v30 = v26.write(v27);
						v26.force(1);
						boolean v24 = 1;
						boolean v23 = v24;
						if (v23 == 0) {
							return p1.length;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		long v6 = PersistentDataBlockService.getBlockDeviceSize();
		if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) {
			long v5 = ;
			long v4 = v5;
			if ((p1.length < v4) <= 0) {
				RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
				FileChannel v11 = v9.getChannel();
				FileChannel v8 = v11;
				FileChannel v7 = v8;
				ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
				[B v13 = new [B(32);
				ByteBuffer v14 = v12.put(v13);
				ByteBuffer v15 = v12.putInt(428873843);
				ByteBuffer v16 = v12.putInt(p1.length);
				ByteBuffer v17 = v12.put(p1);
				Buffer v18 = v12.flip();
				Object v19 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				boolean v20 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
				if (v20 != 0) {
					int v21 = v7.write(v12);
					v7.force(1);
					byte[] v25 = PersistentDataBlockService.computeDigestLocked(0);
					if (v25 == 0) {
						FileChannel v26 = PersistentDataBlockService.getBlockOutputChannel();
						ByteBuffer v27 = ByteBuffer.allocate(32);
						ByteBuffer v28 = v27.put(v25);
						Buffer v29 = v27.flip();
						int v30 = v26.write(v27);
						v26.force(1);
						boolean v24 = 1;
						boolean v23 = v24;
						if (v23 == 0) {
							return -1;
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		long v6 = PersistentDataBlockService.getBlockDeviceSize();
		if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) {
			long v5 = ;
			long v4 = v5;
			if ((p1.length < v4) <= 0) {
				RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
				FileChannel v11 = v9.getChannel();
				FileChannel v8 = v11;
				FileChannel v7 = v8;
				ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
				[B v13 = new [B(32);
				ByteBuffer v14 = v12.put(v13);
				ByteBuffer v15 = v12.putInt(428873843);
				ByteBuffer v16 = v12.putInt(p1.length);
				ByteBuffer v17 = v12.put(p1);
				Buffer v18 = v12.flip();
				Object v19 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				boolean v20 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
				if (v20 != 0) {
					int v21 = v7.write(v12);
					v7.force(1);
					byte[] v25 = PersistentDataBlockService.computeDigestLocked(0);
					if (v25 == 0) {
						boolean v24 = 0;
						boolean v23 = v24;
						if (v23 == 0) {
							return p1.length;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['FileChannel v7 = this.this$0.getBlockOutputChannel();\nByteBuffer v8 = ByteBuffer.allocate(((p1.length + 8) + 32));\n[B v9 = new [B(32);\nByteBuffer v10 = v8.put(v9);\nByteBuffer v11 = v8.putInt(428873843);\nByteBuffer v12 = v8.putInt(p1.length);\nByteBuffer v13 = v8.put(p1);\nBuffer v14 = v8.flip();\nint v17 = v6.write(v8);', 'RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");\nFileChannel v11 = v9.getChannel();\nByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));\n[B v13 = new [B(32);\nByteBuffer v14 = v12.put(v13);\nByteBuffer v15 = v12.putInt(428873843);\nByteBuffer v16 = v12.putInt(p1.length);\nByteBuffer v17 = v12.put(p1);\nBuffer v18 = v12.flip();\nint v21 = v7.write(v12);', 'FileChannel v4 = PersistentDataBlockService.-$$Nest$mgetBlockOutputChannel(this.this$0);\nByteBuffer v5 = ByteBuffer.allocate(((p1.length + 8) + 32));\n[B v6 = new [B(32);\nByteBuffer v7 = v5.put(v6);\nByteBuffer v8 = v5.putInt(428873843);\nByteBuffer v9 = v5.putInt(p1.length);\nByteBuffer v10 = v5.put(p1);\nBuffer v11 = v5.flip();\nint v14 = v4.write(v5);']

The method write has the following similar APIs:

- API Name: getOemUnlockEnabled()Z with Similarity Score: 0.7622536420822144
  - Access Control Level: SYS_OR_SIG and the following code:
File v6 = new File(this.mDataBlockFile);
long v10 = PersistentDataBlockService.getBlockDeviceSize();
byte v12 = v4.readByte();

- API Name: setOemUnlockEnabled(Z)V with Similarity Score: 0.7030603885650635
  - Access Control Level: SYS_OR_SIG and the following code:
FileChannel v19 = PersistentDataBlockService.getBlockOutputChannel();
long v20 = PersistentDataBlockService.getBlockDeviceSize();
ByteBuffer v22 = ByteBuffer.allocate(1);
SystemProperties.set("sys.oem_unlock_allowed", );

