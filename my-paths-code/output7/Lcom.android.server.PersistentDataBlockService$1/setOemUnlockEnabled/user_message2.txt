The method setOemUnlockEnabled has the following code snippet:

This is path 1 for the API with depth 2:
public void setOemUnlockEnabled(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		UserManager v6 = UserManager.get(this.mContext);
		boolean v7 = v6.isUserAdmin(v5);
		if (v7 == 0) {
			if (p1 == 0) {
				Object v16 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				FileChannel v19 = PersistentDataBlockService.getBlockOutputChannel();
				long v20 = PersistentDataBlockService.getBlockDeviceSize();
				FileChannel v21 = v19.position((v20 - 1));
				ByteBuffer v22 = ByteBuffer.allocate(1);
				if (p2 == 0) {
					ByteBuffer v23 = v22.put();
					Buffer v24 = v22.flip();
					int v25 = v19.write(v22);
					v19.force(1);
					if (p2 == 0) {
						SystemProperties.set("sys.oem_unlock_allowed", );
						byte[] v30 = PersistentDataBlockService.computeDigestLocked(0);
						if (v30 == 0) {
							FileChannel v31 = PersistentDataBlockService.getBlockOutputChannel();
							ByteBuffer v32 = ByteBuffer.allocate(32);
							ByteBuffer v33 = v32.put(v30);
							Buffer v34 = v32.flip();
							int v35 = v31.write(v32);
							v31.force(1);
							boolean v29 = 1;
							boolean v28 = v29;
							return;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setOemUnlockEnabled(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		UserManager v6 = UserManager.get(this.mContext);
		boolean v7 = v6.isUserAdmin(v5);
		if (v7 == 0) {
			if (p1 == 0) {
				Object v16 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				FileChannel v19 = PersistentDataBlockService.getBlockOutputChannel();
				long v20 = PersistentDataBlockService.getBlockDeviceSize();
				FileChannel v21 = v19.position((v20 - 1));
				ByteBuffer v22 = ByteBuffer.allocate(1);
				if (p2 == 0) {
					ByteBuffer v23 = v22.put();
					Buffer v24 = v22.flip();
					int v25 = v19.write(v22);
					v19.force(1);
					if (p2 == 0) {
						SystemProperties.set("sys.oem_unlock_allowed", );
						byte[] v30 = PersistentDataBlockService.computeDigestLocked(0);
						if (v30 == 0) {
							boolean v29 = 0;
							boolean v28 = v29;
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['UserManager v6 = UserManager.get(this.mContext);\nboolean v7 = v6.isUserAdmin(v5);\nthis.this$0.enforceIsAdmin();\nif (p1 == 0) { this.this$0.enforceUserRestriction("no_oem_unlock"); }\nthis.this$0.doSetOemUnlockEnabledLocked(p1);', 'FileChannel v19 = PersistentDataBlockService.getBlockOutputChannel();\nlong v20 = PersistentDataBlockService.getBlockDeviceSize();\nByteBuffer v22 = ByteBuffer.allocate(1);\nSystemProperties.set("sys.oem_unlock_allowed", );']

The method setOemUnlockEnabled has the following similar APIs:

- API Name: setOemUnlockAllowedByUser(Z)V with Similarity Score: 0.85132896900177
  - Access Control Level: SYS_OR_SIG and the following code:
this.this$0.enforceUserIsAdmin();
boolean v7 = this.this$0.isOemUnlockAllowedByAdmin();
v10.setOemUnlockAllowedByDevice(p1);

- API Name: setOemUnlockAllowedByCarrier(Z[B)V with Similarity Score: 0.7844693064689636
  - Access Control Level: SYS_OR_SIG and the following code:
this.this$0.enforceUserIsAdmin();
long v4 = Binder.clearCallingIdentity();
OemLock v5 = this.mOemLock;
v5.setOemUnlockAllowedByCarrier(p1, p2);
Binder.restoreCallingIdentity(v4);

