This is path 1 for the API with depth 2:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		[B v6 = new [B(32);
		byte[] v7 = PersistentDataBlockService.computeDigestLocked(v6);
		if (v7 == 0) {
			boolean v8 = Arrays.equals(v6, v7);
			if (v8 != 0) {
				PersistentDataBlockService.formatPartitionLocked(0);
				boolean v5 = 0;
				boolean v4 = v5;
				if (v4 != 0) {
					DataInputStream v11 = new DataInputStream(v12);
					FileInputStream v12 = new FileInputStream(v13);
					File v13 = new File(v14);
					String v14 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
					Object v18 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
					int v19 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v11);
					if (v19 != 0) {
						[B v20 = new [B(v19);
						int v21 = v11.read(v20, 0, v19);
						if (v21 >= v19) {
							v11.close();
							return v20;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	this.this$0.enforceUid(v1);
	boolean v5 = this.this$0.enforceChecksumValidity();
	boolean v4 = v5;
	if (v4 != 0) {
		DataInputStream v6 = new DataInputStream(v7);
		FileInputStream v7 = new FileInputStream(v8);
		File v8 = new File(v9);
		String v9 = this.mDataBlockFile;
		Object v13 = this.mLock;
		int v15 = this.this$0.getTotalDataSizeLocked(v6);
		int v14 = v15;
		if (v14 != 0) {
			[B v16 = new [B(v14);
			int v17 = v6.read(v16, 0, v14);
			if (v17 >= v14) {
				v6.close();
				return v16;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	boolean v3 = PersistentDataBlockService.-$$Nest$menforceChecksumValidity(this.this$0);
	if (v3 != 0) {
		DataInputStream v4 = new DataInputStream(v5);
		FileInputStream v5 = new FileInputStream(v6);
		File v6 = new File(v7);
		String v7 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
		Object v11 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
		int v12 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v4);
		if (v12 != 0) {
			[B v13 = new [B(v12);
			int v14 = v4.read(v13, 0, v12);
			if (v14 >= v12) {
				v4.close();
				return v13;
			}
		}
	}
}
