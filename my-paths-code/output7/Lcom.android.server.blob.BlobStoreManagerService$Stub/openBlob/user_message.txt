This is path 1 for the API with depth 2:
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			if (v21 != 0) {
				int v22 = UserHandle.getUserId(p2);
				boolean v23 = this.mPackageManagerInternal.isInstantApp(p3, v22);
				if (v23 != 0) {
					boolean v19 = ;
					boolean v18 = v19;
					if (v18 == 0) {
						Object v26 = this.mBlobsMap.get(p2);
						if (v26 == 0) {
							boolean v27 = v26.isAccessAllowedForCaller(p4, p3);
							if (v27 != 0) {
								long v28 = v26.getBlobId();
								long v29 = v26.getSize();
								FrameworkStatsLog.write(300, p3, v28, v29, 1);
								ParcelFileDescriptor v31 = v26.openForRead(p4, p3);
								ParcelFileDescriptor v25 = v31;
								ParcelFileDescriptor v24 = v25;
								return v24;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			this.this$0.verifyCallingPackage(v13, p2);
			boolean v17 = this.this$0.isAllowedBlobStoreAccess(v13, p2);
			boolean v16 = v17;
			if (v16 == 0) {
				ParcelFileDescriptor v19 = this.this$0.openBlobInternal(p1, v13, p2);
				ParcelFileDescriptor v18 = v19;
				return v18;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, "packageName must not be null");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	if (v6 == 0) {
		ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
		return v7;
	}
}
