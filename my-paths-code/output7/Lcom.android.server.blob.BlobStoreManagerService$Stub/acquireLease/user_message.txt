This is path 1 for the API with depth 2:
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(, "tag too long");
			boolean v12 = ResourceId.isValid(p2);
			if (v12 != 0) {
				if (p3 == 0) {
					StringBuilder v13 = new StringBuilder();
					StringBuilder v15 = v13.append("Description must be valid; descriptionId=");
					StringBuilder v16 = v13.append(p2);
					StringBuilder v17 = v13.append(", description=");
					StringBuilder v18 = v13.append(p3);
					String v19 = v13.toString();
					Preconditions.checkArgument(, v19);
					long v21 = Preconditions.checkArgumentNonnegative(p4, "leaseExpiryTimeMillis must not be negative");
					Object v22 = Objects.requireNonNull(p5, "packageName must not be null");
					boolean v24 = TextUtils.isEmpty(p3);
					if (v24 == 0) {
						CharSequence v25 = TextUtils.trimToLengthWithEllipsis(p3, BlobStoreConfig$DeviceConfigProperties.LEASE_DESC_CHAR_LIMIT);
						CharSequence v23 = v25;
						int v26 = Binder.getCallingUid();
						if (v34 != 0) {
							int v35 = UserHandle.getUserId(p2);
							boolean v36 = this.mPackageManagerInternal.isInstantApp(p3, v35);
							if (v36 != 0) {
								boolean v32 = ;
								boolean v31 = v32;
								if (v31 == 0) {
									int v39 = BlobStoreManagerService.getLeasedBlobsCountLocked(p6, p7);
									int v40 = BlobStoreConfig.getMaxLeasedBlobs();
									if (v39 >= v40) {
										if ((p5 < 0) == 0) {
											if ((BlobHandle.expiryTimeMillis < 0) == 0) {
												if ((p5 < BlobHandle.expiryTimeMillis) > 0) {
													Object v41 = this.mBlobsMap.get(p2);
													if (v41 == 0) {
														boolean v42 = v41.isAccessAllowedForCaller(p7, p6);
														if (v42 != 0) {
															long v43 = v41.getSize();
															long v44 = BlobStoreManagerService.getRemainingLeaseQuotaBytesInternal(p6, p7);
															if ((v43 < v44) > 0) {
																long v45 = v41.getBlobId();
																long v46 = v41.getSize();
																FrameworkStatsLog.write(299, p6, v45, v46, 1);
																v41.addOrReplaceLeasee(p7, p6, p3, p4, p5);
																if (BlobStoreConfig.LOGV == 0) {
																	BlobStoreManagerService.writeBlobsInfoAsync();
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(, "tag too long");
			boolean v12 = ResourceId.isValid(p2);
			if (v12 != 0) {
				if (p3 == 0) {
					StringBuilder v13 = new StringBuilder();
					StringBuilder v15 = v13.append("Description must be valid; descriptionId=");
					StringBuilder v16 = v13.append(p2);
					StringBuilder v17 = v13.append(", description=");
					StringBuilder v18 = v13.append(p3);
					String v19 = v13.toString();
					Preconditions.checkArgument(, v19);
					long v21 = Preconditions.checkArgumentNonnegative(p4, "leaseExpiryTimeMillis must not be negative");
					Object v22 = Objects.requireNonNull(p5, "packageName must not be null");
					boolean v24 = TextUtils.isEmpty(p3);
					if (v24 == 0) {
						CharSequence v25 = TextUtils.trimToLengthWithEllipsis(p3, BlobStoreConfig$DeviceConfigProperties.LEASE_DESC_CHAR_LIMIT);
						CharSequence v23 = v25;
						int v26 = Binder.getCallingUid();
						this.this$0.verifyCallingPackage(v26, p5);
						boolean v30 = this.this$0.isAllowedBlobStoreAccess(v26, p5);
						boolean v29 = v30;
						if (v29 == 0) {
							this.this$0.acquireLeaseInternal(p1, p2, v23, p4, v26, p5);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	p1.assertIsValid();
	boolean v3 = ResourceId.isValid(p2);
	if (v3 != 0) {
		if (p3 == 0) {
			StringBuilder v4 = new StringBuilder();
			StringBuilder v6 = v4.append("Description must be valid; descriptionId=");
			StringBuilder v7 = v4.append(p2);
			StringBuilder v8 = v4.append(", description=");
			StringBuilder v9 = v4.append(p3);
			String v10 = v4.toString();
			Preconditions.checkArgument(, v10);
			long v12 = Preconditions.checkArgumentNonnegative(p4, "leaseExpiryTimeMillis must not be negative");
			Object v13 = Objects.requireNonNull(p5, "packageName must not be null");
			CharSequence v14 = BlobStoreConfig.getTruncatedLeaseDescription(p3);
			int v15 = Binder.getCallingUid();
			BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v15, p5);
			boolean v17 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v15, p5);
			if (v17 == 0) {
				BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v14, p4, v15, p5);
				return;
			}
		}
	}
}
