This is path 1 for the API with depth 2:
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, "packageName must not be null");
	int v2 = Binder.getCallingUid();
	if (v10 != 0) {
		int v11 = UserHandle.getUserId(p2);
		boolean v12 = this.mPackageManagerInternal.isInstantApp(p3, v11);
		if (v12 != 0) {
			boolean v8 = ;
			boolean v7 = v8;
			if (v7 == 0) {
				BlobStoreManagerService$$ExternalSyntheticLambda12 v15 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p3,p2);
				this.mBlobsMap.forEach(v15);
				BlobStoreManagerService.writeBlobsInfoAsync();
				if (BlobStoreConfig.LOGV == 0) {
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, "packageName must not be null");
	int v2 = Binder.getCallingUid();
	this.this$0.verifyCallingPackage(v2, p1);
	boolean v6 = this.this$0.isAllowedBlobStoreAccess(v2, p1);
	boolean v5 = v6;
	if (v5 == 0) {
		this.this$0.releaseAllLeasesInternal(v2, p1);
		return;
	}
}


This is path 3 for the API with depth 0:
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, "packageName must not be null");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
	if (v4 == 0) {
		BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1);
		return;
	}
}
