The method isUidNetworkingBlocked has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isUidNetworkingBlocked(int p1, boolean p2){
	Object v3 = this.mUidBlockedState.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			if (this.LOGD != 0) {
				if (p1 != this.mDebugUid) {
					String v11 = NetworkPolicyManagerService$UidBlockedState.toString(this.blockedReasons, this.allowedReasons, this.effectiveBlockedReasons);
					String v10 = v11;
					if (v3 != 0) {
						Object v16 = NetworkPolicyLogger$LogBuffer.getNextSlot();
						if (v16 != 0) {
							v16.reset();
							NetworkPolicyLogger$Data.type = 1;
							NetworkPolicyLogger$Data.ifield1 = p1;
							NetworkPolicyLogger$Data.ifield2 = NetworkPolicyManagerService$UidBlockedState.blockedReasons;
							NetworkPolicyLogger$Data.ifield3 = NetworkPolicyManagerService$UidBlockedState.allowedReasons;
							NetworkPolicyLogger$Data.ifield4 = NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons;
							long v18 = System.currentTimeMillis();
							NetworkPolicyLogger$Data.timeStamp = v18;
							long v21 = SystemClock.uptimeNanos();
							long v20 = (v21 / 1000);
							if (1 < 0) {
								if (1 >= this.SIZE) {
									if ((this.mMaxDurationStats[1] < (v20 - v1)) >= 0) {
										long v22 = SystemClock.elapsedRealtime();
										if ((v22 < this.mNextTickTime) <= 0) {
											if (this.mMaxCallsPerSecond[1] >= this.mCallsPerSecond[1]) {
												if ((this.mMaxDurationPerSecond[1] < this.mDurationPerSecond[1]) >= 0) {
													this.mNextTickTime = (1000 + v22);
													long v19 = (v20 - v1);
													if ( == 0) {
														return ;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isUidNetworkingBlocked(int p1, boolean p2){
	Object v3 = this.mUidBlockedState.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			if (this.LOGD != 0) {
				if (p1 != this.mDebugUid) {
					String v11 = NetworkPolicyManagerService$UidBlockedState.toString(this.blockedReasons, this.allowedReasons, this.effectiveBlockedReasons);
					String v10 = v11;
					if (v3 != 0) {
						Object v16 = NetworkPolicyLogger$LogBuffer.getNextSlot();
						if (v16 != 0) {
							v16.reset();
							NetworkPolicyLogger$Data.type = 1;
							NetworkPolicyLogger$Data.ifield1 = p1;
							NetworkPolicyLogger$Data.ifield2 = NetworkPolicyManagerService$UidBlockedState.blockedReasons;
							NetworkPolicyLogger$Data.ifield3 = NetworkPolicyManagerService$UidBlockedState.allowedReasons;
							NetworkPolicyLogger$Data.ifield4 = NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons;
							long v18 = System.currentTimeMillis();
							NetworkPolicyLogger$Data.timeStamp = v18;
							long v21 = SystemClock.uptimeNanos();
							long v20 = (v21 / 1000);
							if (1 < 0) {
								if (1 >= this.SIZE) {
									if ((this.mMaxDurationStats[1] < (v20 - v1)) >= 0) {
										long v22 = SystemClock.elapsedRealtime();
										if ((v22 < this.mNextTickTime) <= 0) {
											if (this.mMaxCallsPerSecond[1] >= this.mCallsPerSecond[1]) {
												if ((this.mMaxDurationPerSecond[1] < this.mDurationPerSecond[1]) >= 0) {
													this.mNextTickTime = (1000 + v22);
													long v19 = (v20 - v1);
													if ( == 0) {
														return ;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean isUidNetworkingBlocked(int p1, boolean p2){
	Object v3 = this.mUidBlockedState.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			if (this.LOGD != 0) {
				if (p1 != this.mDebugUid) {
					String v11 = NetworkPolicyManagerService$UidBlockedState.toString(this.blockedReasons, this.allowedReasons, this.effectiveBlockedReasons);
					String v10 = v11;
					if (v3 != 0) {
						Object v16 = NetworkPolicyLogger$LogBuffer.getNextSlot();
						if (v16 != 0) {
							v16.reset();
							NetworkPolicyLogger$Data.type = 1;
							NetworkPolicyLogger$Data.ifield1 = p1;
							NetworkPolicyLogger$Data.ifield2 = 0;
							NetworkPolicyLogger$Data.ifield3 = 0;
							NetworkPolicyLogger$Data.ifield4 = 0;
							long v18 = System.currentTimeMillis();
							NetworkPolicyLogger$Data.timeStamp = v18;
							long v21 = SystemClock.uptimeNanos();
							long v20 = (v21 / 1000);
							if (1 < 0) {
								if (1 >= this.SIZE) {
									if ((this.mMaxDurationStats[1] < (v20 - v1)) >= 0) {
										long v22 = SystemClock.elapsedRealtime();
										if ((v22 < this.mNextTickTime) <= 0) {
											if (this.mMaxCallsPerSecond[1] >= this.mCallsPerSecond[1]) {
												if ((this.mMaxDurationPerSecond[1] < this.mDurationPerSecond[1]) >= 0) {
													this.mNextTickTime = (1000 + v22);
													long v19 = (v20 - v1);
													if ( == 0) {
														return ;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mUidBlockedState.get(p1);\nif (p2 != 0) {\nthis.mLogger.networkBlocked(p1, v3);', 'Object v3 = this.mUidBlockedState.get(p1);\nif (v3 != 0) {\nString v10 = v3.toString();\nthis.mNetworkBlockedBuffer.networkBlocked(p1, NetworkPolicyManagerService$UidBlockedState.blockedReasons, NetworkPolicyManagerService$UidBlockedState.allowedReasons, NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons);', 'Object v3 = this.mUidBlockedState.get(p1);\nif (v3 != 0) {\nString v11 = NetworkPolicyManagerService$UidBlockedState.toString(this.blockedReasons, this.allowedReasons, this.effectiveBlockedReasons);\nObject v16 = NetworkPolicyLogger$LogBuffer.getNextSlot();\nNetworkPolicyLogger$Data.type = 1;\nNetworkPolicyLogger$Data.ifield1 = p1;']

The method isUidNetworkingBlocked has the following similar APIs:

- API Name: isUidRestrictedOnMeteredNetworks(I)Z with Similarity Score: 0.8485963344573975
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = this.mUidBlockedState.get(p1);
if (v2 != 0) {

- API Name: isUidRestrictedOnMeteredNetworks(I)Z with Similarity Score: 0.8249478340148926
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = this.mUidBlockedState.get(p1);
if (v2 != 0) {

