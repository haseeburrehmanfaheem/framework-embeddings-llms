The method setSubscriptionPlans has the following code snippet:

This is path 1 for the API with depth 2:
public void setSubscriptionPlans(int p1, SubscriptionPlan p2, long p3, String p4){
	int v1 = Binder.getCallingUid();
	if (p2.length != 0) {
		[I v33 = TelephonyManager.getAllNetworkTypes();
		ArraySet v34 = new ArraySet();
		if ( >= v33.length) {
			Integer v37 = Integer.valueOf(v33[]);
			boolean v38 = v34.add(v37);
			if ( >= v33.length) {
				boolean v36 = ;
				ArraySet v39 = new ArraySet();
				if ( >= p2.length) {
					[I v42 = Arrays.copyOf(this.networkTypes, this.networkTypes.length);
					[I v41 = v42;
					ArraySet v43 = new ArraySet();
					if ( >= v41.length) {
						Integer v45 = Integer.valueOf(v41[]);
						boolean v46 = v34.contains(v45);
						if (v46 == 0) {
							Integer v47 = Integer.valueOf(v41[]);
							boolean v48 = v43.add(v47);
							if (v48 == 0) {
								if ( >= v41.length) {
									if (v41.length != v33.length) {
										if ( >= v41.length) {
											Integer v50 = Integer.valueOf(v41[]);
											boolean v51 = v39.add(v50);
											if ( >= v41.length) {
												boolean v49 = ;
												if (v49 == 0) {
													if ( >= p2.length) {
														if ( == 0) {
															if ( >= p2.length) {
																Object v52 = Objects.requireNonNull(p2[]);
																if ( >= p2.length) {
																	long v53 = Binder.clearCallingIdentity();
																	this.mSubscriptionPlans.put(p1, p2);
																	this.mSubscriptionPlansOwner.put(p1, p4);
																	Object v57 = this.mSubIdToSubscriberId.get(p1, 0);
																	if (v57 == 0) {
																		NetworkIdentity$Builder v59 = new NetworkIdentity$Builder();
																		NetworkIdentity$Builder v61 = v59.setType(0);
																		NetworkIdentity$Builder v62 = v61.setSubscriberId(v57);
																		NetworkIdentity$Builder v63 = v62.setMetered(1);
																		NetworkIdentity$Builder v64 = v63.setDefaultNetwork(1);
																		NetworkIdentity$Builder v65 = v64.setSubId(p1);
																		NetworkIdentity v66 = v65.build();
																		int v67 = this.mNetworkPolicy.size();
																		if ( < 0) {
																			Object v68 = this.mNetworkPolicy.keyAt();
																			boolean v69 = v68.matches(v66);
																			if (v69 == 0) {
																				if ( < 0) {
																					Object v70 = this.mNetworkPolicy.keyAt();
																					boolean v71 = v70.matches(v66);
																					if (v71 == 0) {
																						if (this.LOGD == 0) {
																							String v77 = NetworkIdentityUtils.scrubSubscriberId(v57);
																							boolean v58 = 0;
																							if (this.LOGV == 0) {
																								NetworkIdentity$Builder v83 = new NetworkIdentity$Builder();
																								NetworkIdentity$Builder v85 = v83.setType(0);
																								NetworkIdentity$Builder v86 = v85.setSubscriberId(v57);
																								NetworkIdentity$Builder v87 = v86.setMetered(1);
																								NetworkIdentity$Builder v88 = v87.setDefaultNetwork(1);
																								NetworkIdentity$Builder v89 = v88.setSubId(p1);
																								NetworkIdentity v90 = v89.build();
																								int v91 = this.mNetworkPolicy.size();
																								if ( < 0) {
																									Object v92 = this.mNetworkPolicy.keyAt();
																									boolean v93 = v92.matches(v90);
																									if (v93 == 0) {
																										Object v94 = this.mNetworkPolicy.valueAt();
																										boolean v95 = NetworkPolicyManagerService.updateDefaultCarrierPolicyAL(p1, v94);
																										if ( < 0) {
																											boolean v81 = ;
																											if (1 == 0) {
																												NetworkPolicyManagerService.normalizePoliciesNL();
																												NetworkPolicyManagerService.updateNetworkEnabledNL();
																												NetworkPolicyManagerService.updateNetworkRulesNL();
																												NetworkPolicyManagerService.updateNotificationsNL();
																												NetworkPolicyManagerService.writePolicyAL();
																												Intent v102 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");
																												Intent v104 = v102.addFlags(1073741824);
																												Intent v105 = v102.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);
																												this.mContext.sendBroadcast(v102, "android.permission.MANAGE_SUBSCRIPTION_PLANS");
																												Message v107 = this.mHandler.obtainMessage(19, p1, 0, p2);
																												boolean v108 = this.mHandler.sendMessage(v107);
																												this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);
																												this.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);
																												if ((p3 < 0) <= 0) {
																													Message v110 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);
																													boolean v111 = this.mHandler.sendMessageDelayed(v110, p3);
																													Binder.restoreCallingIdentity(v53);
																													return;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setSubscriptionPlans(int p1, SubscriptionPlan p2, long p3, String p4){
	int v1 = Binder.getCallingUid();
	if (p2.length != 0) {
		[I v33 = TelephonyManager.getAllNetworkTypes();
		ArraySet v34 = new ArraySet();
		if ( >= v33.length) {
			Integer v37 = Integer.valueOf(v33[]);
			boolean v38 = v34.add(v37);
			if ( >= v33.length) {
				boolean v36 = ;
				ArraySet v39 = new ArraySet();
				if ( >= p2.length) {
					[I v42 = Arrays.copyOf(this.networkTypes, this.networkTypes.length);
					[I v41 = v42;
					ArraySet v43 = new ArraySet();
					if ( >= v41.length) {
						Integer v45 = Integer.valueOf(v41[]);
						boolean v46 = v34.contains(v45);
						if (v46 == 0) {
							Integer v47 = Integer.valueOf(v41[]);
							boolean v48 = v43.add(v47);
							if (v48 == 0) {
								if ( >= v41.length) {
									if (v41.length != v33.length) {
										if ( >= v41.length) {
											Integer v50 = Integer.valueOf(v41[]);
											boolean v51 = v39.add(v50);
											if ( >= v41.length) {
												boolean v49 = ;
												if (v49 == 0) {
													if ( >= p2.length) {
														if ( == 0) {
															if ( >= p2.length) {
																Object v52 = Objects.requireNonNull(p2[]);
																if ( >= p2.length) {
																	long v53 = Binder.clearCallingIdentity();
																	this.mSubscriptionPlans.put(p1, p2);
																	this.mSubscriptionPlansOwner.put(p1, p4);
																	Object v57 = this.mSubIdToSubscriberId.get(p1, 0);
																	if (v57 == 0) {
																		NetworkIdentity$Builder v59 = new NetworkIdentity$Builder();
																		NetworkIdentity$Builder v61 = v59.setType(0);
																		NetworkIdentity$Builder v62 = v61.setSubscriberId(v57);
																		NetworkIdentity$Builder v63 = v62.setMetered(1);
																		NetworkIdentity$Builder v64 = v63.setDefaultNetwork(1);
																		NetworkIdentity$Builder v65 = v64.setSubId(p1);
																		NetworkIdentity v66 = v65.build();
																		int v67 = this.mNetworkPolicy.size();
																		if ( < 0) {
																			Object v68 = this.mNetworkPolicy.keyAt();
																			boolean v69 = v68.matches(v66);
																			if (v69 == 0) {
																				if ( < 0) {
																					String v73 = NetworkIdentityUtils.scrubSubscriberId(v57);
																					NetworkPolicy v78 = NetworkPolicyManagerService.buildDefaultCarrierPolicy(p1, v57);
																					NetworkPolicyManagerService.addNetworkPolicyAL(v78);
																					boolean v58 = 1;
																					if (this.LOGV == 0) {
																						NetworkIdentity$Builder v82 = new NetworkIdentity$Builder();
																						NetworkIdentity$Builder v84 = v82.setType(0);
																						NetworkIdentity$Builder v85 = v84.setSubscriberId(v57);
																						NetworkIdentity$Builder v86 = v85.setMetered(1);
																						NetworkIdentity$Builder v87 = v86.setDefaultNetwork(1);
																						NetworkIdentity$Builder v88 = v87.setSubId(p1);
																						NetworkIdentity v89 = v88.build();
																						int v90 = this.mNetworkPolicy.size();
																						if ( < 0) {
																							Object v91 = this.mNetworkPolicy.keyAt();
																							boolean v92 = v91.matches(v89);
																							if (v92 == 0) {
																								Object v93 = this.mNetworkPolicy.valueAt();
																								boolean v94 = NetworkPolicyManagerService.updateDefaultCarrierPolicyAL(p1, v93);
																								if ( < 0) {
																									boolean v80 = ;
																									if (1 == 0) {
																										NetworkPolicyManagerService.normalizePoliciesNL();
																										NetworkPolicyManagerService.updateNetworkEnabledNL();
																										NetworkPolicyManagerService.updateNetworkRulesNL();
																										NetworkPolicyManagerService.updateNotificationsNL();
																										NetworkPolicyManagerService.writePolicyAL();
																										Intent v101 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");
																										Intent v103 = v101.addFlags(1073741824);
																										Intent v104 = v101.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);
																										this.mContext.sendBroadcast(v101, "android.permission.MANAGE_SUBSCRIPTION_PLANS");
																										Message v106 = this.mHandler.obtainMessage(19, p1, 0, p2);
																										boolean v107 = this.mHandler.sendMessage(v106);
																										this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);
																										this.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);
																										if ((p3 < 0) <= 0) {
																											Message v109 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);
																											boolean v110 = this.mHandler.sendMessageDelayed(v109, p3);
																											Binder.restoreCallingIdentity(v53);
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setSubscriptionPlans(int p1, SubscriptionPlan p2, long p3, String p4){
	int v1 = Binder.getCallingUid();
	if (p2.length != 0) {
		[I v33 = TelephonyManager.getAllNetworkTypes();
		ArraySet v34 = new ArraySet();
		if ( >= v33.length) {
			Integer v37 = Integer.valueOf(v33[]);
			boolean v38 = v34.add(v37);
			if ( >= v33.length) {
				boolean v36 = ;
				ArraySet v39 = new ArraySet();
				if ( >= p2.length) {
					[I v42 = Arrays.copyOf(this.networkTypes, this.networkTypes.length);
					[I v41 = v42;
					ArraySet v43 = new ArraySet();
					if ( >= v41.length) {
						Integer v45 = Integer.valueOf(v41[]);
						boolean v46 = v34.contains(v45);
						if (v46 == 0) {
							Integer v47 = Integer.valueOf(v41[]);
							boolean v48 = v43.add(v47);
							if (v48 == 0) {
								if ( >= v41.length) {
									if (v41.length != v33.length) {
										if ( >= p2.length) {
											if ( == 0) {
												if ( >= p2.length) {
													Object v49 = Objects.requireNonNull(p2[]);
													if ( >= p2.length) {
														long v50 = Binder.clearCallingIdentity();
														this.mSubscriptionPlans.put(p1, p2);
														this.mSubscriptionPlansOwner.put(p1, p4);
														Object v54 = this.mSubIdToSubscriberId.get(p1, 0);
														if (v54 == 0) {
															NetworkIdentity$Builder v56 = new NetworkIdentity$Builder();
															NetworkIdentity$Builder v58 = v56.setType(0);
															NetworkIdentity$Builder v59 = v58.setSubscriberId(v54);
															NetworkIdentity$Builder v60 = v59.setMetered(1);
															NetworkIdentity$Builder v61 = v60.setDefaultNetwork(1);
															NetworkIdentity$Builder v62 = v61.setSubId(p1);
															NetworkIdentity v63 = v62.build();
															int v64 = this.mNetworkPolicy.size();
															if ( < 0) {
																Object v65 = this.mNetworkPolicy.keyAt();
																boolean v66 = v65.matches(v63);
																if (v66 == 0) {
																	if ( < 0) {
																		Object v67 = this.mNetworkPolicy.keyAt();
																		boolean v68 = v67.matches(v63);
																		if (v68 == 0) {
																			if (this.LOGD == 0) {
																				String v74 = NetworkIdentityUtils.scrubSubscriberId(v54);
																				boolean v55 = 0;
																				if (this.LOGV == 0) {
																					NetworkIdentity$Builder v80 = new NetworkIdentity$Builder();
																					NetworkIdentity$Builder v82 = v80.setType(0);
																					NetworkIdentity$Builder v83 = v82.setSubscriberId(v54);
																					NetworkIdentity$Builder v84 = v83.setMetered(1);
																					NetworkIdentity$Builder v85 = v84.setDefaultNetwork(1);
																					NetworkIdentity$Builder v86 = v85.setSubId(p1);
																					NetworkIdentity v87 = v86.build();
																					int v88 = this.mNetworkPolicy.size();
																					if ( < 0) {
																						Object v89 = this.mNetworkPolicy.keyAt();
																						boolean v90 = v89.matches(v87);
																						if (v90 == 0) {
																							Object v91 = this.mNetworkPolicy.valueAt();
																							boolean v92 = NetworkPolicyManagerService.updateDefaultCarrierPolicyAL(p1, v91);
																							if ( < 0) {
																								boolean v78 = ;
																								if (1 == 0) {
																									NetworkPolicyManagerService.normalizePoliciesNL();
																									NetworkPolicyManagerService.updateNetworkEnabledNL();
																									NetworkPolicyManagerService.updateNetworkRulesNL();
																									NetworkPolicyManagerService.updateNotificationsNL();
																									NetworkPolicyManagerService.writePolicyAL();
																									Intent v99 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");
																									Intent v101 = v99.addFlags(1073741824);
																									Intent v102 = v99.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);
																									this.mContext.sendBroadcast(v99, "android.permission.MANAGE_SUBSCRIPTION_PLANS");
																									Message v104 = this.mHandler.obtainMessage(19, p1, 0, p2);
																									boolean v105 = this.mHandler.sendMessage(v104);
																									this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);
																									this.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);
																									if ((p3 < 0) <= 0) {
																										Message v107 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);
																										boolean v108 = this.mHandler.sendMessageDelayed(v107, p3);
																										Binder.restoreCallingIdentity(v50);
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v53 = Binder.clearCallingIdentity();\nthis.mSubscriptionPlans.put(p1, p2);\nthis.mSubscriptionPlansOwner.put(p1, p4);', 'Intent v102 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");\nIntent v104 = v102.addFlags(1073741824);\nIntent v105 = v102.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);\nthis.mContext.sendBroadcast(v102, "android.permission.MANAGE_SUBSCRIPTION_PLANS");', 'Message v107 = this.mHandler.obtainMessage(19, p1, 0, p2);\nboolean v108 = this.mHandler.sendMessage(v107);', 'this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);\nthis.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);', 'Message v110 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);\nboolean v111 = this.mHandler.sendMessageDelayed(v110, p3);']

The method setSubscriptionPlans has the following similar APIs:

- API Name: unpairDevice(Ljava/lang/String;)V with Similarity Score: 0.9317505359649658
  - Access Control Level: SYS_OR_SIG and the following code:
Message v4 = Message.obtain(this.mHandler, 17, p1);
boolean v5 = this.mHandler.sendMessage(v4);

- API Name: setSaturationLevel(I)Z with Similarity Score: 0.9206414818763733
  - Access Control Level: SYS_OR_SIG and the following code:
Message v7 = this.mHandler.obtainMessage(4);
Message.arg1 = p1;
boolean v8 = this.mHandler.sendMessage(v7);

