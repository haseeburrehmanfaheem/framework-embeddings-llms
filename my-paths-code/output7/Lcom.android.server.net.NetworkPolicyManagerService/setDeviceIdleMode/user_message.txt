This is path 1 for the API with depth 2:
public void setDeviceIdleMode(boolean p1){
	Trace.traceBegin(2097152, "setDeviceIdleMode");
	if (this.mDeviceIdleMode != p1) {
		this.mDeviceIdleMode = p1;
		if (this.LOGD != 0) {
			if (this.mDebugUid == -1) {
				StringBuilder v5 = new StringBuilder();
				StringBuilder v7 = v5.append("DeviceIdleMode enabled: ");
				StringBuilder v8 = v5.append(p1);
				String v9 = v5.toString();
				String v4 = v9;
				Object v12 = NetworkPolicyLogger$LogBuffer.getNextSlot();
				if (v12 != 0) {
					v12.reset();
					NetworkPolicyLogger$Data.type = 7;
					NetworkPolicyLogger$Data.bfield1 = p1;
					long v14 = System.currentTimeMillis();
					NetworkPolicyLogger$Data.timeStamp = v14;
					if (this.mSystemReady == 0) {
						Trace.traceBegin(2097152, "updateRulesForRestrictPowerUL");
						Trace.traceBegin(2097152, "updateRulesForDeviceIdleUL");
						NetworkPolicyManagerService.updateRulesForWhitelistedPowerSaveUL(this.mDeviceIdleMode, 1, this.mUidFirewallDozableRules);
						Trace.traceEnd(2097152);
						if (p1 == 0) {
							Trace.traceBegin(2097152, "handleDeviceIdleModeDisabledUL");
							SparseArray v23 = new SparseArray();
							int v25 = this.mUidBlockedState.size();
							if ( >= v25) {
								int v26 = this.mUidBlockedState.keyAt();
								Object v27 = this.mUidBlockedState.valueAt();
								if ((NetworkPolicyManagerService$UidBlockedState.blockedReasons & 2) != 0) {
									NetworkPolicyManagerService$UidBlockedState.blockedReasons = (NetworkPolicyManagerService$UidBlockedState.blockedReasons & -3);
									v27.updateEffectiveBlockedReasons();
									if (this.LOGV == 0) {
										if (NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons == NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons) {
											if ( >= v25) {
												int v39 = v23.size();
												if (v39 == 0) {
													Message v40 = this.mHandler.obtainMessage(23, v23);
													v40.sendToTarget();
													Trace.traceEnd(2097152);
													Trace.traceEnd(2097152);
													if (p1 == 0) {
														EventLogTags.writeDeviceIdleOnPhase("net");
														Trace.traceEnd(2097152);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setDeviceIdleMode(boolean p1){
	Trace.traceBegin(2097152, "setDeviceIdleMode");
	if (this.mDeviceIdleMode != p1) {
		this.mDeviceIdleMode = p1;
		if (this.LOGD != 0) {
			if (this.mDebugUid == -1) {
				this.mEventsBuffer.deviceIdleModeEnabled(p1);
				if (this.mSystemReady == 0) {
					Trace.traceBegin(2097152, "updateRulesForRestrictPowerUL");
					NetworkPolicyManagerService.updateRulesForDeviceIdleUL();
					if (p1 == 0) {
						NetworkPolicyManagerService$$ExternalSyntheticLambda4 v10 = new NetworkPolicyManagerService$$ExternalSyntheticLambda4(NetworkPolicyManagerService);
						NetworkPolicyManagerService.forEachUid("updateRulesForRestrictPower", v10);
						Trace.traceEnd(2097152);
						if (p1 == 0) {
							int v15 = EventLog.writeEvent(34004, "net");
							Trace.traceEnd(2097152);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setDeviceIdleMode(boolean p1){
	Trace.traceBegin(2097152, "setDeviceIdleMode");
	if (this.mDeviceIdleMode != p1) {
		this.mDeviceIdleMode = p1;
		this.mLogger.deviceIdleModeEnabled(p1);
		if (this.mSystemReady == 0) {
			p0.handleDeviceIdleModeChangedUL(p1);
			if (p1 == 0) {
				EventLogTags.writeDeviceIdleOnPhase("net");
				Trace.traceEnd(2097152);
				return;
			}
		}
	}
}
