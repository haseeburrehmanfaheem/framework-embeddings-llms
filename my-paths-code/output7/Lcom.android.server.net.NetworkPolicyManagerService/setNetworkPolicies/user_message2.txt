The method setNetworkPolicies has the following code snippet:

This is path 1 for the API with depth 2:
public void setNetworkPolicies(NetworkPolicy p1){
	long v2 = Binder.clearCallingIdentity();
	this.mNetworkPolicy.clear();
	if ( >= p1.length) {
		if (p1[] != 0) {
			Set v6 = NetworkPolicy.template.getSubscriberIds();
			boolean v7 = v6.isEmpty();
			if (v7 == 0) {
				Iterator v8 = this.mMergedSubscriberIds.iterator();
				boolean v9 = v8.hasNext();
				if (v9 == 0) {
					Object v10 = v8.next();
					Set v11 = NetworkPolicy.template.getSubscriberIds();
					Iterator v12 = v11.iterator();
					boolean v13 = v12.hasNext();
					if (v13 == 0) {
						boolean v14 = v8.hasNext();
						if (v14 == 0) {
							Object v15 = v8.next();
							Set v16 = NetworkPolicy.template.getSubscriberIds();
							Iterator v17 = v16.iterator();
							boolean v18 = v17.hasNext();
							if (v18 == 0) {
								Object v19 = v17.next();
								boolean v20 = CollectionUtils.contains(v15, v19);
								if (v20 == 0) {
									NetworkTemplate$Builder v21 = new NetworkTemplate$Builder(v22);
									int v22 = NetworkPolicy.template.getMatchRule();
									Set v24 = NetworkPolicy.template.getWifiNetworkKeys();
									NetworkTemplate$Builder v25 = v21.setWifiNetworkKeys(v24);
									Set v26 = Set.of(v15);
									NetworkTemplate$Builder v27 = v25.setSubscriberIds(v26);
									int v28 = NetworkPolicy.template.getMeteredness();
									NetworkTemplate$Builder v29 = v27.setMeteredness(v28);
									NetworkTemplate v30 = v29.build();
									NetworkTemplate v5 = ;
									NetworkPolicy.template = v5;
									Object v31 = this.mNetworkPolicy.get(v5);
									if (v31 == 0) {
										if (p1[] == 0) {
											if ((this.limitBytes < -1) != 0) {
												if ((this.limitBytes < -1) == 0) {
													if ((this.limitBytes < this.limitBytes) >= 0) {
														int v32 = 1;
														if (v32 <= 0) {
															if (v31 == 0) {
																Object v41 = this.mNetworkPolicy.put(NetworkPolicy.template, p1[]);
																if ( >= p1.length) {
																	if (0 == 0) {
																		String v44 = this.mContext.getOpPackageName();
																		NetworkPolicy v45 = NetworkPolicyManagerService.getNetworkPolicies(v44);
																		NetworkPolicyManagerService.normalizePoliciesNL(v45);
																		if (this.LOGV == 0) {
																			Trace.traceBegin(2097152, "updateNetworkEnabledNL");
																			long v50 = this.mStatLogger.getTime();
																			int v51 = this.mNetworkPolicy.size();
																			if ( < 0) {
																				Object v52 = this.mNetworkPolicy.valueAt();
																				if ((NetworkPolicy.limitBytes < -1) == 0) {
																					boolean v53 = v52.hasCycle();
																					if (v53 != 0) {
																						Iterator v54 = NetworkPolicyManager.cycleIterator(v52);
																						Object v55 = v54.next();
																						Instant v56 = Pair.first.toInstant();
																						long v57 = v56.toEpochMilli();
																						Instant v58 = Pair.second.toInstant();
																						long v59 = v58.toEpochMilli();
																						long v60 = NetworkPolicyManagerService.getTotalBytes(NetworkPolicy.template, v57, v59);
																						boolean v61 = v52.isOverLimit(v60);
																						if (v61 == 0) {
																							if ((NetworkPolicy.lastLimitSnooze < v57) >= 0) {
																								NetworkPolicyManagerService.setNetworkTemplateEnabled(NetworkPolicy.template, ( ^ 1));
																								if ( < 0) {
																									long v63 = this.mStatLogger.logDurationStat(0, v50);
																									Trace.traceEnd(2097152);
																									NetworkPolicyManagerService.updateNetworkRulesNL();
																									if (this.LOGV == 0) {
																										Trace.traceBegin(2097152, "updateNotificationsNL");
																										ArraySet v69 = new ArraySet(this.mActiveNotifs);
																										this.mActiveNotifs.clear();
																										long v72 = this.mClock.millis();
																										int v73 = this.mNetworkPolicy.size();
																										if ( < 0) {
																											Object v74 = this.mNetworkPolicy.valueAt();
																											int v75 = NetworkPolicyManagerService.findRelevantSubIdNL(NetworkPolicy.template);
																											if (v75 != -1) {
																												boolean v76 = v74.hasCycle();
																												if (v76 != 0) {
																													if ( < 0) {
																														int v77 = v69.size();
																														if ( < 0) {
																															Object v78 = v69.valueAt();
																															boolean v79 = this.mActiveNotifs.contains(v78);
																															if (v79 != 0) {
																																NetworkPolicyManagerService.cancelNotification(v78);
																																if ( < 0) {
																																	Trace.traceEnd(2097152);
																																	if (this.LOGV == 0) {
																																		FileOutputStream v84 = this.mPolicyFile.startWrite();
																																		TypedXmlSerializer v85 = Xml.resolveSerializer(v84);
																																		if ( == 0) {
																																			this.mPolicyFile.failWrite();
																																			Binder.restoreCallingIdentity(v2);
																																			return;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setNetworkPolicies(NetworkPolicy p1){
	long v2 = Binder.clearCallingIdentity();
	this.mNetworkPolicy.clear();
	if ( >= p1.length) {
		if (p1[] != 0) {
			Set v6 = NetworkPolicy.template.getSubscriberIds();
			boolean v7 = v6.isEmpty();
			if (v7 == 0) {
				Iterator v8 = this.mMergedSubscriberIds.iterator();
				boolean v9 = v8.hasNext();
				if (v9 == 0) {
					Object v10 = v8.next();
					Set v11 = NetworkPolicy.template.getSubscriberIds();
					Iterator v12 = v11.iterator();
					boolean v13 = v12.hasNext();
					if (v13 == 0) {
						boolean v14 = v8.hasNext();
						if (v14 == 0) {
							Object v15 = v8.next();
							Set v16 = NetworkPolicy.template.getSubscriberIds();
							Iterator v17 = v16.iterator();
							boolean v18 = v17.hasNext();
							if (v18 == 0) {
								Object v19 = v17.next();
								boolean v20 = CollectionUtils.contains(v15, v19);
								if (v20 == 0) {
									NetworkTemplate$Builder v21 = new NetworkTemplate$Builder(v22);
									int v22 = NetworkPolicy.template.getMatchRule();
									Set v24 = NetworkPolicy.template.getWifiNetworkKeys();
									NetworkTemplate$Builder v25 = v21.setWifiNetworkKeys(v24);
									Set v26 = Set.of(v15);
									NetworkTemplate$Builder v27 = v25.setSubscriberIds(v26);
									int v28 = NetworkPolicy.template.getMeteredness();
									NetworkTemplate$Builder v29 = v27.setMeteredness(v28);
									NetworkTemplate v30 = v29.build();
									NetworkTemplate v5 = ;
									NetworkPolicy.template = v5;
									Object v31 = this.mNetworkPolicy.get(v5);
									if (v31 == 0) {
										if (p1[] == 0) {
											if ((this.limitBytes < -1) != 0) {
												if ((this.limitBytes < -1) == 0) {
													if ((this.limitBytes < this.limitBytes) >= 0) {
														int v32 = 1;
														if (v32 <= 0) {
															if (v31 == 0) {
																Object v41 = this.mNetworkPolicy.put(NetworkPolicy.template, p1[]);
																if ( >= p1.length) {
																	if (0 == 0) {
																		String v44 = this.mContext.getOpPackageName();
																		NetworkPolicy v45 = NetworkPolicyManagerService.getNetworkPolicies(v44);
																		NetworkPolicyManagerService.normalizePoliciesNL(v45);
																		if (this.LOGV == 0) {
																			Trace.traceBegin(2097152, "updateNetworkEnabledNL");
																			long v50 = this.mStatLogger.getTime();
																			int v51 = this.mNetworkPolicy.size();
																			if ( < 0) {
																				Object v52 = this.mNetworkPolicy.valueAt();
																				if ((NetworkPolicy.limitBytes < -1) == 0) {
																					boolean v53 = v52.hasCycle();
																					if (v53 != 0) {
																						Iterator v54 = NetworkPolicyManager.cycleIterator(v52);
																						Object v55 = v54.next();
																						Instant v56 = Pair.first.toInstant();
																						long v57 = v56.toEpochMilli();
																						Instant v58 = Pair.second.toInstant();
																						long v59 = v58.toEpochMilli();
																						long v60 = NetworkPolicyManagerService.getTotalBytes(NetworkPolicy.template, v57, v59);
																						boolean v61 = v52.isOverLimit(v60);
																						if (v61 == 0) {
																							if ((NetworkPolicy.lastLimitSnooze < v57) >= 0) {
																								NetworkPolicyManagerService.setNetworkTemplateEnabled(NetworkPolicy.template, ( ^ 1));
																								if ( < 0) {
																									long v63 = this.mStatLogger.logDurationStat(0, v50);
																									Trace.traceEnd(2097152);
																									NetworkPolicyManagerService.updateNetworkRulesNL();
																									if (this.LOGV == 0) {
																										Trace.traceBegin(2097152, "updateNotificationsNL");
																										ArraySet v69 = new ArraySet(this.mActiveNotifs);
																										this.mActiveNotifs.clear();
																										long v72 = this.mClock.millis();
																										int v73 = this.mNetworkPolicy.size();
																										if ( < 0) {
																											Object v74 = this.mNetworkPolicy.valueAt();
																											int v75 = NetworkPolicyManagerService.findRelevantSubIdNL(NetworkPolicy.template);
																											if (v75 != -1) {
																												if ( < 0) {
																													int v76 = v69.size();
																													if ( < 0) {
																														Object v77 = v69.valueAt();
																														boolean v78 = this.mActiveNotifs.contains(v77);
																														if (v78 != 0) {
																															NetworkPolicyManagerService.cancelNotification(v77);
																															if ( < 0) {
																																Trace.traceEnd(2097152);
																																if (this.LOGV == 0) {
																																	FileOutputStream v83 = this.mPolicyFile.startWrite();
																																	TypedXmlSerializer v84 = Xml.resolveSerializer(v83);
																																	if ( == 0) {
																																		this.mPolicyFile.failWrite();
																																		Binder.restoreCallingIdentity(v2);
																																		return;
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setNetworkPolicies(NetworkPolicy p1){
	long v2 = Binder.clearCallingIdentity();
	this.mNetworkPolicy.clear();
	if ( >= p1.length) {
		if (p1[] != 0) {
			Set v6 = NetworkPolicy.template.getSubscriberIds();
			boolean v7 = v6.isEmpty();
			if (v7 == 0) {
				Iterator v8 = this.mMergedSubscriberIds.iterator();
				boolean v9 = v8.hasNext();
				if (v9 == 0) {
					Object v10 = v8.next();
					Set v11 = NetworkPolicy.template.getSubscriberIds();
					Iterator v12 = v11.iterator();
					boolean v13 = v12.hasNext();
					if (v13 == 0) {
						boolean v14 = v8.hasNext();
						if (v14 == 0) {
							Object v15 = v8.next();
							Set v16 = NetworkPolicy.template.getSubscriberIds();
							Iterator v17 = v16.iterator();
							boolean v18 = v17.hasNext();
							if (v18 == 0) {
								Object v19 = v17.next();
								boolean v20 = CollectionUtils.contains(v15, v19);
								if (v20 == 0) {
									NetworkTemplate$Builder v21 = new NetworkTemplate$Builder(v22);
									int v22 = NetworkPolicy.template.getMatchRule();
									Set v24 = NetworkPolicy.template.getWifiNetworkKeys();
									NetworkTemplate$Builder v25 = v21.setWifiNetworkKeys(v24);
									Set v26 = Set.of(v15);
									NetworkTemplate$Builder v27 = v25.setSubscriberIds(v26);
									int v28 = NetworkPolicy.template.getMeteredness();
									NetworkTemplate$Builder v29 = v27.setMeteredness(v28);
									NetworkTemplate v30 = v29.build();
									NetworkTemplate v5 = ;
									NetworkPolicy.template = v5;
									Object v31 = this.mNetworkPolicy.get(v5);
									if (v31 == 0) {
										if (p1[] == 0) {
											if ((this.limitBytes < -1) != 0) {
												if ((this.limitBytes < -1) == 0) {
													if ((this.limitBytes < this.limitBytes) >= 0) {
														int v32 = 1;
														if (v32 <= 0) {
															if (v31 == 0) {
																Object v41 = this.mNetworkPolicy.put(NetworkPolicy.template, p1[]);
																if ( >= p1.length) {
																	if (0 == 0) {
																		String v44 = this.mContext.getOpPackageName();
																		NetworkPolicy v45 = NetworkPolicyManagerService.getNetworkPolicies(v44);
																		NetworkPolicyManagerService.normalizePoliciesNL(v45);
																		if (this.LOGV == 0) {
																			Trace.traceBegin(2097152, "updateNetworkEnabledNL");
																			long v50 = this.mStatLogger.getTime();
																			int v51 = this.mNetworkPolicy.size();
																			if ( < 0) {
																				Object v52 = this.mNetworkPolicy.valueAt();
																				if ((NetworkPolicy.limitBytes < -1) == 0) {
																					boolean v53 = v52.hasCycle();
																					if (v53 != 0) {
																						NetworkPolicyManagerService.setNetworkTemplateEnabled(NetworkPolicy.template, 1);
																						if ( < 0) {
																							long v55 = this.mStatLogger.logDurationStat(0, v50);
																							Trace.traceEnd(2097152);
																							NetworkPolicyManagerService.updateNetworkRulesNL();
																							if (this.LOGV == 0) {
																								Trace.traceBegin(2097152, "updateNotificationsNL");
																								ArraySet v61 = new ArraySet(this.mActiveNotifs);
																								this.mActiveNotifs.clear();
																								long v64 = this.mClock.millis();
																								int v65 = this.mNetworkPolicy.size();
																								if ( < 0) {
																									Object v66 = this.mNetworkPolicy.valueAt();
																									int v67 = NetworkPolicyManagerService.findRelevantSubIdNL(NetworkPolicy.template);
																									if (v67 != -1) {
																										boolean v68 = v66.hasCycle();
																										if (v68 != 0) {
																											if ( < 0) {
																												int v69 = v61.size();
																												if ( < 0) {
																													Object v70 = v61.valueAt();
																													boolean v71 = this.mActiveNotifs.contains(v70);
																													if (v71 != 0) {
																														NetworkPolicyManagerService.cancelNotification(v70);
																														if ( < 0) {
																															Trace.traceEnd(2097152);
																															if (this.LOGV == 0) {
																																FileOutputStream v76 = this.mPolicyFile.startWrite();
																																TypedXmlSerializer v77 = Xml.resolveSerializer(v76);
																																if ( == 0) {
																																	this.mPolicyFile.failWrite();
																																	Binder.restoreCallingIdentity(v2);
																																	return;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['NetworkTemplate$Builder v21 = new NetworkTemplate$Builder(v22);\nSet v24 = NetworkPolicy.template.getWifiNetworkKeys();\nNetworkTemplate$Builder v25 = v21.setWifiNetworkKeys(v24);\nSet v26 = Set.of(v15);\nNetworkTemplate$Builder v27 = v25.setSubscriberIds(v26);\nint v28 = NetworkPolicy.template.getMeteredness();\nNetworkTemplate$Builder v29 = v27.setMeteredness(v28);\nNetworkTemplate v30 = v29.build();', 'Object v31 = this.mNetworkPolicy.get(v5);\nif (v31 == 0) { Object v41 = this.mNetworkPolicy.put(NetworkPolicy.template, p1[]); }', 'NetworkTemplate v5 = NetworkPolicyManagerService.normalizeTemplate(NetworkPolicy.template, this.mMergedSubscriberIds);\nObject v6 = this.mNetworkPolicy.get(v5);\nif (v6 == 0) { Object v16 = this.mNetworkPolicy.put(NetworkPolicy.template, p1[]); }', 'p0.normalizePoliciesNL(p1);\np0.handleNetworkPoliciesUpdateAL(0);']

The method setNetworkPolicies has the following similar APIs:

- API Name: getNetworkPolicies(Ljava/lang/String;)[Landroid/net/NetworkPolicy; with Similarity Score: 0.7764323353767395
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = this.mNetworkPolicy.size();
NetworkPolicy v4 = new NetworkPolicy(v3);
return v4;

- API Name: getNetworkPolicies(Ljava/lang/String;)[Landroid/net/NetworkPolicy; with Similarity Score: 0.768135666847229
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = this.mNetworkPolicy.size();
NetworkPolicy v7 = new NetworkPolicy(v6);
return v7;

