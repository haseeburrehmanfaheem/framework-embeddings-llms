The method setRestrictBackground has the following code snippet:

This is path 1 for the API with depth 2:
public void setRestrictBackground(boolean p1){
	int v3 = Binder.getCallingUid();
	long v4 = Binder.clearCallingIdentity();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("uid:");
	StringBuilder v8 = v5.append(v3);
	String v9 = v5.toString();
	Trace.traceBegin(2097152, "setRestrictBackgroundUL");
	if (p1 != this.mRestrictBackground) {
		this.mRestrictBackground = p1;
		Trace.traceBegin(2097152, "updateRulesForRestrictBackgroundUL");
		NetworkPolicyManagerService$$ExternalSyntheticLambda5 v22 = new NetworkPolicyManagerService$$ExternalSyntheticLambda5(NetworkPolicyManagerService);
		NetworkPolicyManagerService.forEachUid("updateRulesForRestrictBackground", v22);
		Trace.traceEnd(2097152);
		boolean v26 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground);
		if (v26 != 0) {
			this.mHandler.removeMessages(6);
			Message v29 = this.mHandler.obtainMessage(6, this.mRestrictBackground, 0);
			v29.sendToTarget();
			if (this.LOGD != 0) {
				if (this.mDebugUid == -1) {
					this.mEventsBuffer.restrictBackgroundChanged(this.mRestrictBackground, this.mRestrictBackground);
					if (this.mRestrictBackgroundLowPowerMode == 0) {
						this.mRestrictBackgroundChangedInBsm = 1;
						if (this.LOGV == 0) {
							Trace.traceBegin(2097152, "updateNotificationsNL");
							ArraySet v38 = new ArraySet(this.mActiveNotifs);
							this.mActiveNotifs.clear();
							long v41 = this.mClock.millis();
							int v42 = this.mNetworkPolicy.size();
							if ( < 0) {
								Object v43 = this.mNetworkPolicy.valueAt();
								int v44 = NetworkPolicyManagerService.findRelevantSubIdNL(NetworkPolicy.template);
								if (v44 != -1) {
									if ( < 0) {
										int v45 = v38.size();
										if ( < 0) {
											Object v46 = v38.valueAt();
											boolean v47 = this.mActiveNotifs.contains(v46);
											if (v47 != 0) {
												NetworkPolicyManagerService.cancelNotification(v46);
												if ( < 0) {
													Trace.traceEnd(2097152);
													if (this.LOGV == 0) {
														FileOutputStream v52 = this.mPolicyFile.startWrite();
														TypedXmlSerializer v53 = Xml.resolveSerializer(v52);
														if ( == 0) {
															this.mPolicyFile.failWrite();
															Trace.traceEnd(2097152);
															Binder.restoreCallingIdentity(v4);
															Trace.traceEnd(2097152);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setRestrictBackground(boolean p1){
	int v3 = Binder.getCallingUid();
	long v4 = Binder.clearCallingIdentity();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("uid:");
	StringBuilder v8 = v5.append(v3);
	String v9 = v5.toString();
	Trace.traceBegin(2097152, "setRestrictBackgroundUL");
	if (p1 != this.mRestrictBackground) {
		this.mRestrictBackground = p1;
		Trace.traceBegin(2097152, "updateRulesForRestrictBackgroundUL");
		NetworkPolicyManagerService$$ExternalSyntheticLambda5 v22 = new NetworkPolicyManagerService$$ExternalSyntheticLambda5(NetworkPolicyManagerService);
		NetworkPolicyManagerService.forEachUid("updateRulesForRestrictBackground", v22);
		Trace.traceEnd(2097152);
		boolean v26 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground);
		if (v26 != 0) {
			this.mHandler.removeMessages(6);
			Message v29 = this.mHandler.obtainMessage(6, this.mRestrictBackground, 0);
			v29.sendToTarget();
			if (this.LOGD != 0) {
				if (this.mDebugUid == -1) {
					this.mEventsBuffer.restrictBackgroundChanged(this.mRestrictBackground, this.mRestrictBackground);
					if (this.mRestrictBackgroundLowPowerMode == 0) {
						this.mRestrictBackgroundChangedInBsm = 1;
						if (this.LOGV == 0) {
							Trace.traceBegin(2097152, "updateNotificationsNL");
							ArraySet v38 = new ArraySet(this.mActiveNotifs);
							this.mActiveNotifs.clear();
							long v41 = this.mClock.millis();
							int v42 = this.mNetworkPolicy.size();
							if ( < 0) {
								Object v43 = this.mNetworkPolicy.valueAt();
								int v44 = NetworkPolicyManagerService.findRelevantSubIdNL(NetworkPolicy.template);
								if (v44 != -1) {
									boolean v45 = v43.hasCycle();
									if (v45 != 0) {
										if ( < 0) {
											int v46 = v38.size();
											if ( < 0) {
												Object v47 = v38.valueAt();
												boolean v48 = this.mActiveNotifs.contains(v47);
												if (v48 != 0) {
													NetworkPolicyManagerService.cancelNotification(v47);
													if ( < 0) {
														Trace.traceEnd(2097152);
														if (this.LOGV == 0) {
															FileOutputStream v53 = this.mPolicyFile.startWrite();
															TypedXmlSerializer v54 = Xml.resolveSerializer(v53);
															if ( == 0) {
																this.mPolicyFile.failWrite();
																Trace.traceEnd(2097152);
																Binder.restoreCallingIdentity(v4);
																Trace.traceEnd(2097152);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = Binder.getCallingUid();\nlong v4 = Binder.clearCallingIdentity();\nthis.mRestrictBackground = p1;\nNetworkPolicyManagerService$$ExternalSyntheticLambda5 v22 = new NetworkPolicyManagerService$$ExternalSyntheticLambda5(NetworkPolicyManagerService);\nNetworkPolicyManagerService.forEachUid("updateRulesForRestrictBackground", v22);\nboolean v26 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground);', 'Message v29 = this.mHandler.obtainMessage(6, this.mRestrictBackground, 0);\nv29.sendToTarget();', 'int v3 = Binder.getCallingUid();\nlong v4 = Binder.clearCallingIdentity();\nthis.mRestrictBackground = p1;\nNetworkPolicyManagerService.updateRulesForRestrictBackgroundUL();\nboolean v21 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground);', 'int v3 = Binder.getCallingUid();\nlong v4 = Binder.clearCallingIdentity();\np0.setRestrictBackgroundUL(p1, v9);']

The method setRestrictBackground has the following similar APIs:

- API Name: getRestrictBackgroundByCaller()I with Similarity Score: 0.8366760611534119
  - Access Control Level: NORMAL and the following code:
int v2 = Binder.getCallingUid();
int v3 = p0.getRestrictBackgroundStatusInternal(v2);
return v3;

- API Name: createRestrictedProfileWithThrow(Ljava/lang/String;I)Landroid/content/pm/UserInfo; with Similarity Score: 0.8060312867164612
  - Access Control Level: SYS_OR_SIG and the following code:
long v10 = Binder.clearCallingIdentity();
boolean v14 = this.USER_RESTRICTIONS.contains(p1);
int v15 = Binder.getCallingUid();

