The method setSubscriptionOverride has the following code snippet:

This is path 1 for the API with depth 2:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	ArraySet v32 = new ArraySet();
	[I v34 = TelephonyManager.getAllNetworkTypes();
	if ( >= v34.length) {
		Integer v36 = Integer.valueOf(v34[]);
		boolean v37 = v32.add(v36);
		if ( >= v34.length) {
			boolean v35 = ;
			IntArray v38 = new IntArray();
			if ( >= p4.length) {
				Integer v40 = Integer.valueOf(p4[]);
				boolean v41 = v32.contains(v40);
				if (v41 == 0) {
					v38.add(p4[]);
					if ( >= p4.length) {
						Object v44 = this.mSubscriptionPlans.get(p1);
						boolean v45 = ArrayUtils.isEmpty(v44);
						if (v45 != 0) {
							if ( >= v44.length) {
								RecurrenceRule v46 = this.cycleRule;
								boolean v47 = v46.isRecurring();
								if (v47 == 0) {
									Iterator v49 = this.cycleRule.cycleIterator();
									Iterator v48 = v49;
									Object v50 = v48.next();
									ZonedDateTime v51 = ZonedDateTime.now(this.mClock);
									boolean v52 = v50.contains(v51);
									if (v52 == 0) {
										if ( >= v44.length) {
											RecurrenceRule v53 = this.cycleRule;
											boolean v54 = v53.isRecurring();
											if (v54 == 0) {
												Iterator v56 = this.cycleRule.cycleIterator();
												Iterator v55 = v56;
												Object v57 = v55.next();
												ZonedDateTime v58 = ZonedDateTime.now(this.mClock);
												boolean v59 = v57.contains(v58);
												if (v59 == 0) {
													SubscriptionPlan v43 = v44[];
													if (p2 == 1) {
														if (v43 == 0) {
															int v60 = v43.getDataLimitBehavior();
															if (v60 == -1) {
																ContentResolver v61 = this.mContext.getContentResolver();
																int v62 = Settings$Global.getInt(v61, "netpolicy_override_enabled", 1);
																if (v62 == 0) {
																	if ( != 0) {
																		SomeArgs v63 = SomeArgs.obtain();
																		Integer v64 = Integer.valueOf(p1);
																		SomeArgs.arg1 = v64;
																		Integer v65 = Integer.valueOf(p2);
																		SomeArgs.arg2 = v65;
																		Integer v66 = Integer.valueOf(p3);
																		SomeArgs.arg3 = v66;
																		[I v67 = v38.toArray();
																		SomeArgs.arg4 = v67;
																		Message v68 = this.mHandler.obtainMessage(16, v63);
																		boolean v69 = this.mHandler.sendMessage(v68);
																		if ((p5 < 0) <= 0) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	ArraySet v32 = new ArraySet();
	[I v34 = TelephonyManager.getAllNetworkTypes();
	if ( >= v34.length) {
		Integer v36 = Integer.valueOf(v34[]);
		boolean v37 = v32.add(v36);
		if ( >= v34.length) {
			boolean v35 = ;
			IntArray v38 = new IntArray();
			if ( >= p4.length) {
				Integer v40 = Integer.valueOf(p4[]);
				boolean v41 = v32.contains(v40);
				if (v41 == 0) {
					v38.add(p4[]);
					if ( >= p4.length) {
						Object v44 = this.mSubscriptionPlans.get(p1);
						boolean v45 = ArrayUtils.isEmpty(v44);
						if (v45 != 0) {
							if ( >= v44.length) {
								RecurrenceRule v46 = this.cycleRule;
								boolean v47 = v46.isRecurring();
								if (v47 == 0) {
									Iterator v49 = this.cycleRule.cycleIterator();
									Iterator v48 = v49;
									Object v50 = v48.next();
									ZonedDateTime v51 = ZonedDateTime.now(this.mClock);
									boolean v52 = v50.contains(v51);
									if (v52 == 0) {
										if ( >= v44.length) {
											RecurrenceRule v53 = this.cycleRule;
											boolean v54 = v53.isRecurring();
											if (v54 == 0) {
												Iterator v56 = this.cycleRule.cycleIterator();
												Iterator v55 = v56;
												Object v57 = v55.next();
												ZonedDateTime v58 = ZonedDateTime.now(this.mClock);
												boolean v59 = v57.contains(v58);
												if (v59 == 0) {
													SubscriptionPlan v43 = v44[];
													if (p2 == 1) {
														int v60 = v43.getDataLimitBehavior();
														if (v60 == -1) {
															ContentResolver v61 = this.mContext.getContentResolver();
															int v62 = Settings$Global.getInt(v61, "netpolicy_override_enabled", 1);
															if (v62 == 0) {
																if ( != 0) {
																	SomeArgs v63 = SomeArgs.obtain();
																	Integer v64 = Integer.valueOf(p1);
																	SomeArgs.arg1 = v64;
																	Integer v65 = Integer.valueOf(p2);
																	SomeArgs.arg2 = v65;
																	Integer v66 = Integer.valueOf(p3);
																	SomeArgs.arg3 = v66;
																	[I v67 = v38.toArray();
																	SomeArgs.arg4 = v67;
																	Message v68 = this.mHandler.obtainMessage(16, v63);
																	boolean v69 = this.mHandler.sendMessage(v68);
																	if ((p5 < 0) <= 0) {
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	ArraySet v32 = new ArraySet();
	[I v34 = TelephonyManager.getAllNetworkTypes();
	if ( >= v34.length) {
		Integer v36 = Integer.valueOf(v34[]);
		boolean v37 = v32.add(v36);
		if ( >= v34.length) {
			boolean v35 = ;
			IntArray v38 = new IntArray();
			if ( >= p4.length) {
				Integer v40 = Integer.valueOf(p4[]);
				boolean v41 = v32.contains(v40);
				if (v41 == 0) {
					v38.add(p4[]);
					if ( >= p4.length) {
						Object v44 = this.mSubscriptionPlans.get(p1);
						boolean v45 = ArrayUtils.isEmpty(v44);
						if (v45 != 0) {
							if ( >= v44.length) {
								RecurrenceRule v46 = this.cycleRule;
								boolean v47 = v46.isRecurring();
								if (v47 == 0) {
									Iterator v49 = this.cycleRule.cycleIterator();
									Iterator v48 = v49;
									Object v50 = v48.next();
									ZonedDateTime v51 = ZonedDateTime.now(this.mClock);
									boolean v52 = v50.contains(v51);
									if (v52 == 0) {
										if ( >= v44.length) {
											RecurrenceRule v53 = this.cycleRule;
											boolean v54 = v53.isRecurring();
											if (v54 == 0) {
												Iterator v56 = this.cycleRule.cycleIterator();
												Iterator v55 = v56;
												Object v57 = v55.next();
												ZonedDateTime v58 = ZonedDateTime.now(this.mClock);
												boolean v59 = v57.contains(v58);
												if (v59 == 0) {
													SubscriptionPlan v43 = v44[];
													if (p2 == 1) {
														int v60 = v43.getDataLimitBehavior();
														if (v60 == -1) {
															ContentResolver v61 = this.mContext.getContentResolver();
															int v62 = Settings$Global.getInt(v61, "netpolicy_override_enabled", 1);
															if (v62 == 0) {
																if ( != 0) {
																	if (p3 != 0) {
																		SomeArgs v63 = SomeArgs.obtain();
																		Integer v64 = Integer.valueOf(p1);
																		SomeArgs.arg1 = v64;
																		Integer v65 = Integer.valueOf(p2);
																		SomeArgs.arg2 = v65;
																		Integer v66 = Integer.valueOf(p3);
																		SomeArgs.arg3 = v66;
																		[I v67 = v38.toArray();
																		SomeArgs.arg4 = v67;
																		Message v68 = this.mHandler.obtainMessage(16, v63);
																		boolean v69 = this.mHandler.sendMessage(v68);
																		if ((p5 < 0) <= 0) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nObject v44 = this.mSubscriptionPlans.get(p1);\nSomeArgs v63 = SomeArgs.obtain();\nMessage v68 = this.mHandler.obtainMessage(16, v63);\nboolean v69 = this.mHandler.sendMessage(v68);', 'ArraySet v32 = new ArraySet();\n[I v34 = TelephonyManager.getAllNetworkTypes();\nInteger v36 = Integer.valueOf(v34[]);\nboolean v37 = v32.add(v36);', 'SubscriptionPlan v43 = v44[];\nif (p2 == 1) {\nint v60 = v43.getDataLimitBehavior();\nContentResolver v61 = this.mContext.getContentResolver();\nint v62 = Settings$Global.getInt(v61, "netpolicy_override_enabled", 1);']

The method setSubscriptionOverride has the following similar APIs:

- API Name: setSubscriptionPlans(I[Landroid/telephony/SubscriptionPlan;JLjava/lang/String;)V with Similarity Score: 0.8026845455169678
  - Access Control Level: SYS_OR_SIG and the following code:
Message v110 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);
boolean v111 = this.mHandler.sendMessageDelayed(v110, p3);

- API Name: notifyBroadcastInfoResponse(Landroid/os/IBinder;Landroid/media/tv/BroadcastInfoResponse;I)V with Similarity Score: 0.7820610404014587
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
int v4 = this.this$0.resolveCallingUserId(v2, v1, p3, "notifyBroadcastInfoResponse");
TvInteractiveAppManagerService$SessionState v8 = this.this$0.getSessionStateLocked(p1, v1, v3);
ITvInteractiveAppSession v10 = this.this$0.getSessionLocked(v7);
v9.notifyBroadcastInfoResponse(p2);

