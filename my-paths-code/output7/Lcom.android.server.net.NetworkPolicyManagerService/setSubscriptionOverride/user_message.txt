This is path 1 for the API with depth 2:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	ArraySet v32 = new ArraySet();
	[I v34 = TelephonyManager.getAllNetworkTypes();
	if ( >= v34.length) {
		Integer v36 = Integer.valueOf(v34[]);
		boolean v37 = v32.add(v36);
		if ( >= v34.length) {
			boolean v35 = ;
			IntArray v38 = new IntArray();
			if ( >= p4.length) {
				Integer v40 = Integer.valueOf(p4[]);
				boolean v41 = v32.contains(v40);
				if (v41 == 0) {
					v38.add(p4[]);
					if ( >= p4.length) {
						Object v44 = this.mSubscriptionPlans.get(p1);
						boolean v45 = ArrayUtils.isEmpty(v44);
						if (v45 != 0) {
							if ( >= v44.length) {
								RecurrenceRule v46 = this.cycleRule;
								boolean v47 = v46.isRecurring();
								if (v47 == 0) {
									Iterator v49 = this.cycleRule.cycleIterator();
									Iterator v48 = v49;
									Object v50 = v48.next();
									ZonedDateTime v51 = ZonedDateTime.now(this.mClock);
									boolean v52 = v50.contains(v51);
									if (v52 == 0) {
										if ( >= v44.length) {
											RecurrenceRule v53 = this.cycleRule;
											boolean v54 = v53.isRecurring();
											if (v54 == 0) {
												Iterator v56 = this.cycleRule.cycleIterator();
												Iterator v55 = v56;
												Object v57 = v55.next();
												ZonedDateTime v58 = ZonedDateTime.now(this.mClock);
												boolean v59 = v57.contains(v58);
												if (v59 == 0) {
													SubscriptionPlan v43 = v44[];
													if (p2 == 1) {
														if (v43 == 0) {
															int v60 = v43.getDataLimitBehavior();
															if (v60 == -1) {
																ContentResolver v61 = this.mContext.getContentResolver();
																int v62 = Settings$Global.getInt(v61, "netpolicy_override_enabled", 1);
																if (v62 == 0) {
																	if ( != 0) {
																		SomeArgs v63 = SomeArgs.obtain();
																		Integer v64 = Integer.valueOf(p1);
																		SomeArgs.arg1 = v64;
																		Integer v65 = Integer.valueOf(p2);
																		SomeArgs.arg2 = v65;
																		Integer v66 = Integer.valueOf(p3);
																		SomeArgs.arg3 = v66;
																		[I v67 = v38.toArray();
																		SomeArgs.arg4 = v67;
																		Message v68 = this.mHandler.obtainMessage(16, v63);
																		boolean v69 = this.mHandler.sendMessage(v68);
																		if ((p5 < 0) <= 0) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	ArraySet v32 = new ArraySet();
	[I v34 = TelephonyManager.getAllNetworkTypes();
	if ( >= v34.length) {
		Integer v36 = Integer.valueOf(v34[]);
		boolean v37 = v32.add(v36);
		if ( >= v34.length) {
			boolean v35 = ;
			IntArray v38 = new IntArray();
			if ( >= p4.length) {
				Integer v40 = Integer.valueOf(p4[]);
				boolean v41 = v32.contains(v40);
				if (v41 == 0) {
					v38.add(p4[]);
					if ( >= p4.length) {
						Object v44 = this.mSubscriptionPlans.get(p1);
						boolean v45 = ArrayUtils.isEmpty(v44);
						if (v45 != 0) {
							if ( >= v44.length) {
								RecurrenceRule v46 = v44[].getCycleRule();
								boolean v47 = v46.isRecurring();
								if (v47 == 0) {
									Iterator v48 = v44[].cycleIterator();
									Object v49 = v48.next();
									ZonedDateTime v50 = ZonedDateTime.now(this.mClock);
									boolean v51 = v49.contains(v50);
									if (v51 == 0) {
										if ( >= v44.length) {
											RecurrenceRule v52 = v44[].getCycleRule();
											boolean v53 = v52.isRecurring();
											if (v53 == 0) {
												Iterator v54 = v44[].cycleIterator();
												Object v55 = v54.next();
												ZonedDateTime v56 = ZonedDateTime.now(this.mClock);
												boolean v57 = v55.contains(v56);
												if (v57 == 0) {
													SubscriptionPlan v43 = v44[];
													if (p2 == 1) {
														if (v43 == 0) {
															int v58 = this.dataLimitBehavior;
															if (v58 == -1) {
																ContentResolver v59 = this.mContext.getContentResolver();
																int v60 = Settings$Global.getInt(v59, "netpolicy_override_enabled", 1);
																if (v60 == 0) {
																	if ( != 0) {
																		SomeArgs v61 = SomeArgs.obtain();
																		Integer v62 = Integer.valueOf(p1);
																		SomeArgs.arg1 = v62;
																		Integer v63 = Integer.valueOf(p2);
																		SomeArgs.arg2 = v63;
																		Integer v64 = Integer.valueOf(p3);
																		SomeArgs.arg3 = v64;
																		[I v65 = v38.toArray();
																		SomeArgs.arg4 = v65;
																		Message v66 = this.mHandler.obtainMessage(16, v61);
																		boolean v67 = this.mHandler.sendMessage(v66);
																		if ((p5 < 0) <= 0) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	p0.enforceSubscriptionPlanAccess(p1, v1, p6);
	ArraySet v3 = new ArraySet();
	[I v5 = TelephonyManager.getAllNetworkTypes();
	boolean v6 = NetworkPolicyManagerService.addAll(v3, v5);
	IntArray v7 = new IntArray();
	if ( >= p4.length) {
		Integer v9 = Integer.valueOf(p4[]);
		boolean v10 = v3.contains(v9);
		if (v10 == 0) {
			v7.add(p4[]);
			if ( >= p4.length) {
				SubscriptionPlan v12 = p0.getPrimarySubscriptionPlanLocked(p1);
				if (p2 == 1) {
					if (v12 == 0) {
						int v13 = v12.getDataLimitBehavior();
						if (v13 == -1) {
							ContentResolver v14 = this.mContext.getContentResolver();
							int v15 = Settings$Global.getInt(v14, "netpolicy_override_enabled", 1);
							if (v15 == 0) {
								if ( != 0) {
									SomeArgs v16 = SomeArgs.obtain();
									Integer v17 = Integer.valueOf(p1);
									SomeArgs.arg1 = v17;
									Integer v18 = Integer.valueOf(p2);
									SomeArgs.arg2 = v18;
									Integer v19 = Integer.valueOf(p3);
									SomeArgs.arg3 = v19;
									[I v20 = v7.toArray();
									SomeArgs.arg4 = v20;
									Message v21 = this.mHandler.obtainMessage(16, v16);
									boolean v22 = this.mHandler.sendMessage(v21);
									if ((p5 < 0) <= 0) {
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
