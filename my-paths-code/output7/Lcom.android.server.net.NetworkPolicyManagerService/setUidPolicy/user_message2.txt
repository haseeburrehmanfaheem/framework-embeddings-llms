The method setUidPolicy has the following code snippet:

This is path 1 for the API with depth 2:
public void setUidPolicy(int p1, int p2){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		int v4 = this.mUidPolicy.get(p1, 0);
		if (v4 == p2) {
			if (p3 != 0) {
				this.mUidPolicy.delete(p1);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v11 == 0) {
						if (v12 == 0) {
							boolean v10 = ;
							if (v10 != 0) {
								if (v4 != 1) {
									if (p2 != 1) {
										if (v4 != 4) {
											if (p2 != 4) {
												if ( != 0) {
													if (this.mRestrictBackground == 0) {
														if ( != 0) {
															if ( != 0) {
																if (this.mRestrictBackground == 0) {
																	if ( != 0) {
																		if ( == 0) {
																			if ( == 0) {
																				if ( == 0) {
																					boolean v13 = this.mDefaultRestrictBackgroundAllowlistUids.get(p1);
																					if (v13 == 0) {
																						boolean v14 = this.mRestrictBackgroundAllowlistRevokedUids.get(p1);
																						if (v14 != 0) {
																							if ( == ) {
																								Boolean v15 = Boolean.valueOf();
																								Message v16 = this.mHandler.obtainMessage(13, p1, p2, v15);
																								v16.sendToTarget();
																								if (1 == 0) {
																									if (this.LOGV == 0) {
																										FileOutputStream v20 = this.mPolicyFile.startWrite();
																										TypedXmlSerializer v21 = Xml.resolveSerializer(v20);
																										if ( == 0) {
																											this.mPolicyFile.failWrite();
																											if (this.LOGV != 0) {
																												if (p1 != this.mDebugUid) {
																													StringBuilder v25 = new StringBuilder();
																													StringBuilder v27 = v25.append("Policy for ");
																													StringBuilder v28 = v25.append(p1);
																													StringBuilder v29 = v25.append(" changed from ");
																													String v30 = NetworkPolicyManager.uidPoliciesToString(p2);
																													StringBuilder v31 = v25.append(v30);
																													StringBuilder v32 = v25.append(" to ");
																													String v33 = NetworkPolicyManager.uidPoliciesToString(p3);
																													StringBuilder v34 = v25.append(v33);
																													String v35 = v25.toString();
																													String v24 = v35;
																													Object v38 = NetworkPolicyLogger$LogBuffer.getNextSlot();
																													if (v38 != 0) {
																														v38.reset();
																														NetworkPolicyLogger$Data.type = 3;
																														NetworkPolicyLogger$Data.ifield1 = p1;
																														NetworkPolicyLogger$Data.ifield2 = p2;
																														NetworkPolicyLogger$Data.ifield3 = p3;
																														long v40 = System.currentTimeMillis();
																														NetworkPolicyLogger$Data.timeStamp = v40;
																														Binder.restoreCallingIdentity(v3);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setUidPolicy(int p1, int p2){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		int v4 = this.mUidPolicy.get(p1, 0);
		if (v4 == p2) {
			if (p3 != 0) {
				this.mUidPolicy.put(p1, p3);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v11 == 0) {
						if (v12 == 0) {
							boolean v10 = ;
							if (v10 != 0) {
								if (v4 != 1) {
									if (p2 != 1) {
										if (v4 != 4) {
											if (p2 != 4) {
												if ( != 0) {
													if (this.mRestrictBackground == 0) {
														if ( != 0) {
															if ( != 0) {
																if (this.mRestrictBackground == 0) {
																	if ( != 0) {
																		if ( == 0) {
																			if ( == 0) {
																				if ( == 0) {
																					boolean v13 = this.mDefaultRestrictBackgroundAllowlistUids.get(p1);
																					if (v13 == 0) {
																						boolean v14 = this.mRestrictBackgroundAllowlistRevokedUids.get(p1);
																						if (v14 != 0) {
																							if ( == ) {
																								Boolean v15 = Boolean.valueOf();
																								Message v16 = this.mHandler.obtainMessage(13, p1, p2, v15);
																								v16.sendToTarget();
																								if (1 == 0) {
																									if (this.LOGV == 0) {
																										FileOutputStream v20 = this.mPolicyFile.startWrite();
																										TypedXmlSerializer v21 = Xml.resolveSerializer(v20);
																										if ( == 0) {
																											this.mPolicyFile.failWrite();
																											if (this.LOGV != 0) {
																												if (p1 != this.mDebugUid) {
																													StringBuilder v25 = new StringBuilder();
																													StringBuilder v27 = v25.append("Policy for ");
																													StringBuilder v28 = v25.append(p1);
																													StringBuilder v29 = v25.append(" changed from ");
																													String v30 = NetworkPolicyManager.uidPoliciesToString(p2);
																													StringBuilder v31 = v25.append(v30);
																													StringBuilder v32 = v25.append(" to ");
																													String v33 = NetworkPolicyManager.uidPoliciesToString(p3);
																													StringBuilder v34 = v25.append(v33);
																													String v35 = v25.toString();
																													String v24 = v35;
																													Object v38 = NetworkPolicyLogger$LogBuffer.getNextSlot();
																													if (v38 != 0) {
																														v38.reset();
																														NetworkPolicyLogger$Data.type = 3;
																														NetworkPolicyLogger$Data.ifield1 = p1;
																														NetworkPolicyLogger$Data.ifield2 = p2;
																														NetworkPolicyLogger$Data.ifield3 = p3;
																														long v40 = System.currentTimeMillis();
																														NetworkPolicyLogger$Data.timeStamp = v40;
																														Binder.restoreCallingIdentity(v3);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setUidPolicy(int p1, int p2){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		int v4 = this.mUidPolicy.get(p1, 0);
		if (v4 == p2) {
			if (p3 != 0) {
				this.mUidPolicy.delete(p1);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v11 == 0) {
						if (v12 == 0) {
							boolean v10 = ;
							if (v10 != 0) {
								if (v4 != 1) {
									if (p2 != 1) {
										if (v4 != 4) {
											if (p2 != 4) {
												if ( != 0) {
													if (this.mRestrictBackground == 0) {
														if ( != 0) {
															if ( != 0) {
																if (this.mRestrictBackground == 0) {
																	if ( != 0) {
																		if ( == 0) {
																			if ( == 0) {
																				if ( == 0) {
																					boolean v13 = this.mDefaultRestrictBackgroundAllowlistUids.get(p1);
																					if (v13 == 0) {
																						boolean v14 = this.mRestrictBackgroundAllowlistRevokedUids.get(p1);
																						if (v14 != 0) {
																							if ( == ) {
																								Boolean v15 = Boolean.valueOf();
																								Message v16 = this.mHandler.obtainMessage(13, p1, p2, v15);
																								v16.sendToTarget();
																								if (1 == 0) {
																									if (this.LOGV == 0) {
																										FileOutputStream v20 = this.mPolicyFile.startWrite();
																										TypedXmlSerializer v21 = Xml.resolveSerializer(v20);
																										if ( == 0) {
																											this.mPolicyFile.failWrite();
																											if (this.LOGV != 0) {
																												if (p1 != this.mDebugUid) {
																													StringBuilder v25 = new StringBuilder();
																													StringBuilder v27 = v25.append("Policy for ");
																													StringBuilder v28 = v25.append(p1);
																													StringBuilder v29 = v25.append(" changed from ");
																													String v30 = NetworkPolicyManager.uidPoliciesToString(p2);
																													StringBuilder v31 = v25.append(v30);
																													StringBuilder v32 = v25.append(" to ");
																													String v33 = NetworkPolicyManager.uidPoliciesToString(p3);
																													StringBuilder v34 = v25.append(v33);
																													String v35 = v25.toString();
																													String v24 = v35;
																													Object v38 = NetworkPolicyLogger$LogBuffer.getNextSlot();
																													if (v38 != 0) {
																														Binder.restoreCallingIdentity(v3);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v4 = this.mUidPolicy.get(p1, 0);\nthis.mUidPolicy.delete(p1);\nNetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);\nMessage v16 = this.mHandler.obtainMessage(13, p1, p2, v15);', 'int v4 = this.mUidPolicy.get(p1, 0);\nNetworkPolicyManagerService.setUidPolicyUncheckedUL(p1, p2, 0);\nMessage v11 = this.mHandler.obtainMessage(13, p1, p2, v10);', 'p0.setUidPolicyUncheckedUL(p1, v4, p2, 1);\nthis.mLogger.uidPolicyChanged(p1, v4, p2);']

The method setUidPolicy has the following similar APIs:

- API Name: addUidPolicy(II)V with Similarity Score: 0.9806172847747803
  - Access Control Level: SYS_OR_SIG and the following code:
p0.setUidPolicyUncheckedUL(p1, v3, (p2 | v3), 1);
this.mLogger.uidPolicyChanged(p1, v3, (p2 | v3));

- API Name: removeUidPolicy(II)V with Similarity Score: 0.9700804948806763
  - Access Control Level: SYS_OR_SIG and the following code:
p0.setUidPolicyUncheckedUL(p1, v3, ((~p2) & v3), 1);
this.mLogger.uidPolicyChanged(p1, v3, ((~p2) & v3));

