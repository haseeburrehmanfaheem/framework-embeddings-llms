This is path 1 for the API with depth 2:
public void addUidPolicy(int p1, int p2){
	if (v2 == 0) {
		int v3 = this.mUidPolicy.get(p1, 0);
		if (v3 == (p2 | v3)) {
			if (p3 != 0) {
				this.mUidPolicy.delete(p1);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v10 == 0) {
						if (v11 == 0) {
							boolean v9 = ;
							if (v9 != 0) {
								if (v3 != 1) {
									if ((p2 | v3) != 1) {
										if (v3 != 4) {
											if ((p2 | v3) != 4) {
												if ( != 0) {
													if (this.mRestrictBackground == 0) {
														if ( != 0) {
															if ( != 0) {
																if (this.mRestrictBackground == 0) {
																	if ( != 0) {
																		if ( == 0) {
																			if ( == 0) {
																				if ( == 0) {
																					boolean v12 = this.mDefaultRestrictBackgroundAllowlistUids.get(p1);
																					if (v12 == 0) {
																						boolean v13 = this.mRestrictBackgroundAllowlistRevokedUids.get(p1);
																						if (v13 != 0) {
																							if ( == ) {
																								Boolean v14 = Boolean.valueOf();
																								Message v15 = this.mHandler.obtainMessage(13, p1, (p2 | v3), v14);
																								v15.sendToTarget();
																								if (1 == 0) {
																									if (this.LOGV == 0) {
																										FileOutputStream v19 = this.mPolicyFile.startWrite();
																										TypedXmlSerializer v20 = Xml.resolveSerializer(v19);
																										if ( == 0) {
																											this.mPolicyFile.failWrite();
																											if (this.LOGV != 0) {
																												if (p1 != this.mDebugUid) {
																													StringBuilder v24 = new StringBuilder();
																													StringBuilder v26 = v24.append("Policy for ");
																													StringBuilder v27 = v24.append(p1);
																													StringBuilder v28 = v24.append(" changed from ");
																													String v29 = NetworkPolicyManager.uidPoliciesToString(p2);
																													StringBuilder v30 = v24.append(v29);
																													StringBuilder v31 = v24.append(" to ");
																													String v32 = NetworkPolicyManager.uidPoliciesToString(p3);
																													StringBuilder v33 = v24.append(v32);
																													String v34 = v24.toString();
																													String v23 = v34;
																													Object v37 = NetworkPolicyLogger$LogBuffer.getNextSlot();
																													if (v37 != 0) {
																														v37.reset();
																														NetworkPolicyLogger$Data.type = 3;
																														NetworkPolicyLogger$Data.ifield1 = p1;
																														NetworkPolicyLogger$Data.ifield2 = p2;
																														NetworkPolicyLogger$Data.ifield3 = p3;
																														long v39 = System.currentTimeMillis();
																														NetworkPolicyLogger$Data.timeStamp = v39;
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void addUidPolicy(int p1, int p2){
	if (v2 == 0) {
		int v3 = this.mUidPolicy.get(p1, 0);
		if (v3 == (p2 | v3)) {
			NetworkPolicyManagerService.setUidPolicyUncheckedUL(p1, (p2 | v3), 0);
			boolean v6 = NetworkPolicyManagerService.isUidValidForAllowlistRulesUL(p1);
			if (v6 != 0) {
				if (v3 != 1) {
					if ((p2 | v3) != 1) {
						if (v3 != 4) {
							if ((p2 | v3) != 4) {
								if ( != 0) {
									if (this.mRestrictBackground == 0) {
										if ( != 0) {
											if ( != 0) {
												if (this.mRestrictBackground == 0) {
													if ( != 0) {
														if ( == 0) {
															if ( == 0) {
																if ( == 0) {
																	boolean v7 = this.mDefaultRestrictBackgroundAllowlistUids.get(p1);
																	if (v7 == 0) {
																		boolean v8 = this.mRestrictBackgroundAllowlistRevokedUids.get(p1);
																		if (v8 != 0) {
																			if ( == ) {
																				Boolean v9 = Boolean.valueOf();
																				Message v10 = this.mHandler.obtainMessage(13, p1, (p2 | v3), v9);
																				v10.sendToTarget();
																				if (1 == 0) {
																					NetworkPolicyManagerService.writePolicyAL();
																					if (this.LOGV != 0) {
																						if (p1 != this.mDebugUid) {
																							this.mEventsBuffer.uidPolicyChanged(p1, v3, (p2 | v3));
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void addUidPolicy(int p1, int p2){
	if (v2 == 0) {
		int v3 = this.mUidPolicy.get(p1, 0);
		if (v3 == (p2 | v3)) {
			p0.setUidPolicyUncheckedUL(p1, v3, (p2 | v3), 1);
			this.mLogger.uidPolicyChanged(p1, v3, (p2 | v3));
			return;
		}
	}
}
