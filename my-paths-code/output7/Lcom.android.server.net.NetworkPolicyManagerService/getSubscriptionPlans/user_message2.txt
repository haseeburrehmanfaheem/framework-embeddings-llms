The method getSubscriptionPlans has the following code snippet:

This is path 1 for the API with depth 2:
public SubscriptionPlan getSubscriptionPlans(int p1, String p2){
	int v1 = Binder.getCallingUid();
	String v32 = SystemProperties.get("fw.fake_plan");
	boolean v33 = TextUtils.isEmpty(v32);
	if (v33 != 0) {
		ArrayList v34 = new ArrayList();
		boolean v36 = "month_hard".equals(v32);
		if (v36 == 0) {
			boolean v37 = "month_soft".equals(v32);
			if (v37 == 0) {
				boolean v38 = "month_over".equals(v32);
				if (v38 == 0) {
					boolean v39 = "month_none".equals(v32);
					if (v39 == 0) {
						boolean v40 = "prepaid".equals(v32);
						if (v40 == 0) {
							boolean v41 = "prepaid_crazy".equals(v32);
							if (v41 == 0) {
								boolean v42 = "unlimited".equals(v32);
								if (v42 == 0) {
									ZonedDateTime v43 = ZonedDateTime.now();
									ZonedDateTime v44 = v43.minusDays(20);
									ZonedDateTime v45 = ZonedDateTime.now();
									ZonedDateTime v46 = v45.plusDays(10);
									boolean v48 = v46.isAfter(v44);
									if (v48 == 0) {
										SubscriptionPlan$Builder v49 = new SubscriptionPlan$Builder(v44,v46,0);
										SubscriptionPlan$Builder v47 = v49;
										this.title = p1;
										SubscriptionPlan$Builder v51 = SubscriptionPlan$Builder;
										if ((9223372036854775807 < 0) < 0) {
											if (2 < 0) {
												this.dataLimitBytes = p1;
												this.dataLimitBehavior = p2;
												SubscriptionPlan$Builder v53 = SubscriptionPlan$Builder;
												long v56 = DataUnit.MEBIBYTES.toBytes(50);
												ZonedDateTime v57 = ZonedDateTime.now();
												ZonedDateTime v58 = v57.minusHours(3);
												Instant v59 = v58.toInstant();
												long v60 = v59.toEpochMilli();
												if ((v56 < 0) < 0) {
													if ((v60 < 0) < 0) {
														this.dataUsageBytes = p1;
														this.dataUsageTime = p2;
														SubscriptionPlan$Builder v61 = SubscriptionPlan$Builder;
														SubscriptionPlan v64 = v61.build();
														boolean v65 = v34.add(v64);
														int v66 = v34.size();
														SubscriptionPlan v67 = new SubscriptionPlan(v66);
														Object v68 = v34.toArray(v67);
														return v68;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public SubscriptionPlan getSubscriptionPlans(int p1, String p2){
	int v1 = Binder.getCallingUid();
	String v32 = SystemProperties.get("fw.fake_plan");
	boolean v33 = TextUtils.isEmpty(v32);
	if (v33 != 0) {
		ArrayList v34 = new ArrayList();
		boolean v36 = "month_hard".equals(v32);
		if (v36 == 0) {
			boolean v37 = "month_soft".equals(v32);
			if (v37 == 0) {
				boolean v38 = "month_over".equals(v32);
				if (v38 == 0) {
					boolean v39 = "month_none".equals(v32);
					if (v39 == 0) {
						boolean v40 = "prepaid".equals(v32);
						if (v40 == 0) {
							ZonedDateTime v41 = ZonedDateTime.now();
							ZonedDateTime v42 = v41.minusDays(20);
							ZonedDateTime v43 = ZonedDateTime.now();
							ZonedDateTime v44 = v43.plusDays(10);
							boolean v46 = v44.isAfter(v42);
							if (v46 == 0) {
								SubscriptionPlan$Builder v47 = new SubscriptionPlan$Builder(v42,v44,0);
								SubscriptionPlan$Builder v45 = v47;
								this.title = p1;
								SubscriptionPlan$Builder v49 = SubscriptionPlan$Builder;
								long v51 = DataUnit.MEBIBYTES.toBytes(512);
								if ((v51 < 0) < 0) {
									if (0 < 0) {
										this.dataLimitBytes = p1;
										this.dataLimitBehavior = p2;
										SubscriptionPlan$Builder v52 = SubscriptionPlan$Builder;
										long v55 = DataUnit.MEBIBYTES.toBytes(100);
										ZonedDateTime v56 = ZonedDateTime.now();
										ZonedDateTime v57 = v56.minusHours(3);
										Instant v58 = v57.toInstant();
										long v59 = v58.toEpochMilli();
										if ((v55 < 0) < 0) {
											if ((v59 < 0) < 0) {
												this.dataUsageBytes = p1;
												this.dataUsageTime = p2;
												SubscriptionPlan$Builder v60 = SubscriptionPlan$Builder;
												SubscriptionPlan v63 = v60.build();
												boolean v64 = v34.add(v63);
												int v65 = v34.size();
												SubscriptionPlan v66 = new SubscriptionPlan(v65);
												Object v67 = v34.toArray(v66);
												return v67;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public SubscriptionPlan getSubscriptionPlans(int p1, String p2){
	int v1 = Binder.getCallingUid();
	String v32 = SystemProperties.get("fw.fake_plan");
	boolean v33 = TextUtils.isEmpty(v32);
	if (v33 != 0) {
		ArrayList v34 = new ArrayList();
		boolean v36 = "month_hard".equals(v32);
		if (v36 == 0) {
			boolean v37 = "month_soft".equals(v32);
			if (v37 == 0) {
				boolean v38 = "month_over".equals(v32);
				if (v38 == 0) {
					boolean v39 = "month_none".equals(v32);
					if (v39 == 0) {
						ZonedDateTime v40 = ZonedDateTime.parse("2007-03-14T00:00:00.000Z");
						SubscriptionPlan$Builder v42 = new SubscriptionPlan$Builder(v40,0,v43);
						Period v43 = Period.ofMonths(1);
						SubscriptionPlan$Builder v41 = v42;
						this.title = p1;
						SubscriptionPlan$Builder v45 = SubscriptionPlan$Builder;
						SubscriptionPlan v47 = v45.build();
						boolean v48 = v34.add(v47);
						int v49 = v34.size();
						SubscriptionPlan v50 = new SubscriptionPlan(v49);
						Object v51 = v34.toArray(v50);
						return v51;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nString v32 = SystemProperties.get("fw.fake_plan");\nboolean v33 = TextUtils.isEmpty(v32);\nif (v33 != 0) {\nArrayList v34 = new ArrayList();\nZonedDateTime v43 = ZonedDateTime.now();\nZonedDateTime v44 = v43.minusDays(20);\nZonedDateTime v45 = ZonedDateTime.now();\nZonedDateTime v46 = v45.plusDays(10);\nSubscriptionPlan$Builder v49 = new SubscriptionPlan$Builder(v44,v46,0);\nthis.title = p1;\nthis.dataLimitBytes = p1;\nthis.dataLimitBehavior = p2;\nlong v56 = DataUnit.MEBIBYTES.toBytes(50);\nZonedDateTime v57 = ZonedDateTime.now();\nZonedDateTime v58 = v57.minusHours(3);\nInstant v59 = v58.toInstant();\nlong v60 = v59.toEpochMilli();\nthis.dataUsageBytes = p1;\nthis.dataUsageTime = p2;\nSubscriptionPlan v64 = v61.build();\nreturn v68;', 'p0.enforceSubscriptionPlanAccess(p1, v1, p2);\nZonedDateTime v14 = ZonedDateTime.now();\nZonedDateTime v15 = v14.minusDays(20);\nZonedDateTime v16 = ZonedDateTime.now();\nZonedDateTime v17 = v16.plusDays(10);\nSubscriptionPlan$Builder v18 = SubscriptionPlan$Builder.createNonrecurring(v15, v17);\nSubscriptionPlan$Builder v19 = v18.setTitle("G-Mobile Awesome");\nSubscriptionPlan$Builder v20 = v19.setDataLimit(9223372036854775807, 2);\nlong v21 = DataUnit.MEBIBYTES.toBytes(50);\nZonedDateTime v22 = ZonedDateTime.now();\nZonedDateTime v23 = v22.minusHours(3);\nInstant v24 = v23.toInstant();\nlong v25 = v24.toEpochMilli();\nSubscriptionPlan$Builder v26 = v20.setDataUsage(v21, v25);\nSubscriptionPlan v27 = v26.build();\nreturn v31;']

The method getSubscriptionPlans has the following similar APIs:

- API Name: setSubscriptionOverride(III[IJLjava/lang/String;)V with Similarity Score: 0.7539182305335999
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
Object v44 = this.mSubscriptionPlans.get(p1);
SomeArgs v63 = SomeArgs.obtain();
Message v68 = this.mHandler.obtainMessage(16, v63);
boolean v69 = this.mHandler.sendMessage(v68);

