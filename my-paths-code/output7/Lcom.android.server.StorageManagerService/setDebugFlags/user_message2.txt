The method setDebugFlags has the following code snippet:

This is path 1 for the API with depth 0:
public void setDebugFlags(int p1, int p2){
	if ((p2 & 4) == 0) {
		boolean v2 = StorageManager.isFileEncryptedNativeOnly();
		if (v2 != 0) {
			boolean v3 = this.mLockPatternUtils.isCredentialRequiredToDecrypt(0);
			if (v3 != 0) {
				long v4 = Binder.clearCallingIdentity();
				if ((p1 & 4) == 0) {
					String v5 = Boolean.toString();
					SystemProperties.set("persist.sys.emulate_fbe", v5);
					Object v7 = this.mContext.getSystemService(PowerManage.class);
					v7.reboot(0);
					Binder.restoreCallingIdentity(v4);
					if ((p2 & 3) == 0) {
						if ((p1 & 1) == 0) {
							long v10 = Binder.clearCallingIdentity();
							SystemProperties.set("persist.sys.adoptable", );
							Message v12 = this.mHandler.obtainMessage(10);
							v12.sendToTarget();
							Binder.restoreCallingIdentity(v10);
							if ((p2 & 24) == 0) {
								if ((p2 & 32) == 0) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 0:
public void setDebugFlags(int p1, int p2){
	if ((p2 & 4) == 0) {
		boolean v2 = StorageManager.isFileEncryptedNativeOnly();
		if (v2 != 0) {
			boolean v3 = this.mLockPatternUtils.isCredentialRequiredToDecrypt(0);
			if (v3 != 0) {
				long v4 = Binder.clearCallingIdentity();
				if ((p1 & 4) == 0) {
					String v5 = Boolean.toString();
					SystemProperties.set("persist.sys.emulate_fbe", v5);
					Object v7 = this.mContext.getSystemService(PowerManage.class);
					v7.reboot(0);
					Binder.restoreCallingIdentity(v4);
					if ((p2 & 3) == 0) {
						if ((p1 & 1) == 0) {
							if ((p1 & 2) == 0) {
								long v10 = Binder.clearCallingIdentity();
								SystemProperties.set("persist.sys.adoptable", );
								Message v12 = this.mHandler.obtainMessage(10);
								v12.sendToTarget();
								Binder.restoreCallingIdentity(v10);
								if ((p2 & 24) == 0) {
									if ((p2 & 32) == 0) {
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 0:
public void setDebugFlags(int p1, int p2){
	if ((p2 & 4) == 0) {
		boolean v2 = StorageManager.isFileEncryptedNativeOnly();
		if (v2 != 0) {
			boolean v3 = this.mLockPatternUtils.isCredentialRequiredToDecrypt(0);
			if (v3 != 0) {
				long v4 = Binder.clearCallingIdentity();
				if ((p1 & 4) == 0) {
					String v5 = Boolean.toString();
					SystemProperties.set("persist.sys.emulate_fbe", v5);
					Object v7 = this.mContext.getSystemService(PowerManage.class);
					v7.reboot(0);
					Binder.restoreCallingIdentity(v4);
					if ((p2 & 3) == 0) {
						if ((p2 & 24) == 0) {
							if ((p1 & 8) == 0) {
								long v10 = Binder.clearCallingIdentity();
								SystemProperties.set("persist.sys.sdcardfs", );
								Message v12 = this.mHandler.obtainMessage(10);
								v12.sendToTarget();
								Binder.restoreCallingIdentity(v10);
								if ((p2 & 32) == 0) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 4 for the API with depth 0:
public void setDebugFlags(int p1, int p2){
	if ((p2 & 4) == 0) {
		boolean v2 = StorageManager.isFileEncryptedNativeOnly();
		if (v2 != 0) {
			boolean v3 = this.mLockPatternUtils.isCredentialRequiredToDecrypt(0);
			if (v3 != 0) {
				long v4 = Binder.clearCallingIdentity();
				if ((p1 & 4) == 0) {
					String v5 = Boolean.toString();
					SystemProperties.set("persist.sys.emulate_fbe", v5);
					Object v7 = this.mContext.getSystemService(PowerManage.class);
					v7.reboot(0);
					Binder.restoreCallingIdentity(v4);
					if ((p2 & 3) == 0) {
						if ((p2 & 24) == 0) {
							if ((p1 & 8) == 0) {
								if ((p1 & 16) == 0) {
									long v10 = Binder.clearCallingIdentity();
									SystemProperties.set("persist.sys.sdcardfs", );
									Message v12 = this.mHandler.obtainMessage(10);
									v12.sendToTarget();
									Binder.restoreCallingIdentity(v10);
									if ((p2 & 32) == 0) {
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v2 = StorageManager.isFileEncryptedNativeOnly();\nif (v2 != 0) {\nboolean v3 = this.mLockPatternUtils.isCredentialRequiredToDecrypt(0);\nif (v3 != 0) {\nlong v4 = Binder.clearCallingIdentity();', 'String v5 = Boolean.toString();\nSystemProperties.set("persist.sys.emulate_fbe", v5);\nObject v7 = this.mContext.getSystemService(PowerManage.class);\nv7.reboot(0);\nBinder.restoreCallingIdentity(v4);', 'long v10 = Binder.clearCallingIdentity();\nSystemProperties.set("persist.sys.adoptable", );\nMessage v12 = this.mHandler.obtainMessage(10);\nv12.sendToTarget();\nBinder.restoreCallingIdentity(v10);', 'long v10 = Binder.clearCallingIdentity();\nSystemProperties.set("persist.sys.sdcardfs", );\nMessage v12 = this.mHandler.obtainMessage(10);\nv12.sendToTarget();\nBinder.restoreCallingIdentity(v10);']

The method setDebugFlags has the following similar APIs:

- API Name: requestSetVolume(Landroid/media/IMediaRouterClient;Ljava/lang/String;I)V with Similarity Score: 0.8317893743515015
  - Access Control Level: NONE and the following code:
long v1 = Binder.clearCallingIdentity();
Message v5 = MediaRouterService$UserRecord.mHandler.obtainMessage(6, p3, 0, p2);
v5.sendToTarget();
Binder.restoreCallingIdentity(v1);

- API Name: requestSetVolume(Landroid/media/IMediaRouterClient;Ljava/lang/String;I)V with Similarity Score: 0.7858180999755859
  - Access Control Level: NONE and the following code:
long v1 = Binder.clearCallingIdentity();
Message v5 = MediaRouterService$UserRecord.mHandler.obtainMessage(6, p3, 0, p2);
v5.sendToTarget();
Binder.restoreCallingIdentity(v1);

