The method setPrimaryStorageUuid has the following code snippet:

This is path 1 for the API with depth 2:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				Object v7 = v5.next();
				boolean v8 = StorageManager.isFileEncryptedNativeOrEmulated();
				if (v8 == 0) {
					boolean v11 = ArrayUtils.contains(this.users, p1);
					boolean v10 = v11;
					boolean v9 = v10;
					if (v9 != 0) {
						boolean v12 = v5.hasNext();
						if (v12 == 0) {
							boolean v13 = "primary_physical".equals(this.mPrimaryStorageUuid);
							if (v13 != 0) {
								boolean v14 = "primary_physical".equals(p1);
								if (v14 == 0) {
									if (this.mMoveCallback != 0) {
										this.mMoveCallback.onStatusChanged(-1, 82, -1);
										if (82 != 82) {
											this.mPrimaryStorageUuid = this.mMoveTargetUuid;
											FileOutputStream v26 = this.mSettingsFile.startWrite();
											TypedXmlSerializer v27 = Xml.resolveSerializer(v26);
											if ( == 0) {
												this.mSettingsFile.failWrite();
												boolean v29 = PackageManager.isMoveStatusFinished(82);
												if (v29 == 0) {
													this.mMoveCallback = 0;
													this.mMoveTargetUuid = 0;
													if (this.mMoveCallback != 0) {
														this.mMoveCallback.onStatusChanged(-1, -100, -1);
														if (-100 != 82) {
															this.mPrimaryStorageUuid = this.mMoveTargetUuid;
															FileOutputStream v48 = this.mSettingsFile.startWrite();
															TypedXmlSerializer v49 = Xml.resolveSerializer(v48);
															if ( == 0) {
																this.mSettingsFile.failWrite();
																boolean v51 = PackageManager.isMoveStatusFinished(-100);
																if (v51 == 0) {
																	this.mMoveCallback = 0;
																	this.mMoveTargetUuid = 0;
																	Message v60 = this.mHandler.obtainMessage(10);
																	v60.sendToTarget();
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				Object v7 = v5.next();
				boolean v8 = StorageManager.isFileEncryptedNativeOrEmulated();
				if (v8 == 0) {
					boolean v11 = ArrayUtils.contains(this.users, p1);
					boolean v10 = v11;
					boolean v9 = v10;
					if (v9 != 0) {
						boolean v12 = v5.hasNext();
						if (v12 == 0) {
							Object v13 = v5.next();
							boolean v14 = StorageManager.isFileEncryptedNativeOrEmulated();
							if (v14 == 0) {
								boolean v17 = ArrayUtils.contains(this.users, p1);
								boolean v16 = v17;
								boolean v15 = v16;
								if (v15 != 0) {
									if (this.mMoveCallback != 0) {
										this.mMoveCallback.onStatusChanged(-1, -10, -1);
										if (-10 != 82) {
											this.mPrimaryStorageUuid = this.mMoveTargetUuid;
											FileOutputStream v34 = this.mSettingsFile.startWrite();
											TypedXmlSerializer v35 = Xml.resolveSerializer(v34);
											if ( == 0) {
												this.mSettingsFile.failWrite();
												boolean v37 = PackageManager.isMoveStatusFinished(-10);
												if (v37 == 0) {
													this.mMoveCallback = 0;
													this.mMoveTargetUuid = 0;
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				Object v7 = v5.next();
				boolean v8 = StorageManager.isFileEncryptedNativeOrEmulated();
				if (v8 == 0) {
					boolean v11 = ArrayUtils.contains(this.users, p1);
					boolean v10 = v11;
					boolean v9 = v10;
					if (v9 != 0) {
						boolean v12 = v5.hasNext();
						if (v12 == 0) {
							boolean v13 = "primary_physical".equals(this.mPrimaryStorageUuid);
							if (v13 != 0) {
								boolean v14 = "primary_physical".equals(p1);
								if (v14 == 0) {
									VolumeInfo v15 = p0.findStorageForUuidAsUser(this.mPrimaryStorageUuid, this.mCurrentUserId);
									VolumeInfo v16 = p0.findStorageForUuidAsUser(p1, this.mCurrentUserId);
									if (v15 != 0) {
										if (this.mMoveCallback != 0) {
											this.mMoveCallback.onStatusChanged(-1, -6, -1);
											if (-6 != 82) {
												this.mPrimaryStorageUuid = this.mMoveTargetUuid;
												FileOutputStream v33 = this.mSettingsFile.startWrite();
												TypedXmlSerializer v34 = Xml.resolveSerializer(v33);
												if ( == 0) {
													this.mSettingsFile.failWrite();
													boolean v36 = PackageManager.isMoveStatusFinished(-6);
													if (v36 == 0) {
														this.mMoveCallback = 0;
														this.mMoveTargetUuid = 0;
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['this.mMoveCallback = p2;\nthis.mMoveTargetUuid = p1;\nObject v3 = this.mContext.getSystemService(UserManage.class);\nList v4 = v3.getUsers();\nIterator v5 = v4.iterator();', 'VolumeInfo v18 = v15.findVolumeByUuid(this.mPrimaryStorageUuid);\nStringBuilder v19 = new StringBuilder();\nString v21 = v18.getId();\nString v22 = v21.replace("private", "emulated");\nStringBuilder v23 = v19.append(v22);\nStringBuilder v24 = v19.append(";");\nStringBuilder v25 = v19.append(this.mCurrentUserId);\nString v26 = v19.toString();\nVolumeInfo v27 = v15.findVolumeById(v26);', 'VolumeInfo v32 = v29.findVolumeByUuid(p1);\nStringBuilder v33 = new StringBuilder();\nString v35 = v32.getId();\nString v36 = v35.replace("private", "emulated");\nStringBuilder v37 = v33.append(v36);\nStringBuilder v38 = v33.append(";");\nStringBuilder v39 = v33.append(this.mCurrentUserId);\nString v40 = v33.toString();\nVolumeInfo v41 = v29.findVolumeById(v40);', 'this.mPrimaryStorageUuid = this.mMoveTargetUuid;\nStorageManagerService.writeSettingsLocked();']

The method setPrimaryStorageUuid has the following similar APIs:

- API Name: mount(Ljava/lang/String;)V with Similarity Score: 0.8084377646446228
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVolumes.get(p1);
VolumeInfo v2 = v3;
Object v5 = this.mContext.getSystemService(UserManage.class);

- API Name: forgetAllVolumes()V with Similarity Score: 0.7988835573196411
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v12 = Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, this.mPrimaryStorageUuid);
if (v12 != 0) {
String v13 = p0.getDefaultPrimaryStorageUuid();
this.mPrimaryStorageUuid = v13;
p0.writeSettingsLocked();

