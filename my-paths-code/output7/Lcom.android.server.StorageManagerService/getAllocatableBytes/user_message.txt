This is path 1 for the API with depth 2:
public long getAllocatableBytes(String p1, int p2, String p3){
	int v1 = Binder.getCallingUid();
	Object v4 = this.mContext.getSystemService(AppOpsManage.class);
	long v5 = Binder.clearCallingIdentity();
	boolean v6 = v4.isOperationActive(26, v1, p3);
	if (v6 == 0) {
		Binder.restoreCallingIdentity(v5);
		int v2 = ;
		Object v15 = this.mContext.getSystemService(StorageManage.class);
		Object v16 = this.mContext.getSystemService(StorageStatsManage.class);
		long v17 = Binder.clearCallingIdentity();
		File v18 = v15.findPathForUuid(p1);
		if ((v2 & 16) != 0) {
			long v19 = v18.getUsableSpace();
			long v20 = v15.getStorageLowBytes(v18);
			long v21 = v15.getStorageFullBytes(v18);
			if ((v2 & 8) != 0) {
				UUID v23 = StorageManager.convert(p1);
				String v25 = StorageManager.convert(v23);
				String v26 = this.mContext.getOpPackageName();
				boolean v27 = this.mService.isQuotaSupported(v25, v26);
				boolean v24 = v27;
				boolean v22 = v24;
				if (v22 == 0) {
					UUID v29 = StorageManager.convert(p1);
					String v31 = StorageManager.convert(v29);
					String v32 = this.mContext.getOpPackageName();
					long v33 = this.mService.getCacheBytes(v31, v32);
					long v30 = v33;
					long v28 = v30;
					long v34 = v15.getStorageCacheBytes(v18, v2);
					long v35 = Math.max(0, (v28 - v34));
					if ((v2 & 1) == 0) {
						long v36 = Math.max(0, (( + ) - ));
						Binder.restoreCallingIdentity(v17);
						return v36;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public long getAllocatableBytes(String p1, int p2, String p3){
	int v1 = Binder.getCallingUid();
	Object v4 = this.mContext.getSystemService(AppOpsManage.class);
	long v5 = Binder.clearCallingIdentity();
	boolean v6 = v4.isOperationActive(26, v1, p3);
	if (v6 == 0) {
		Binder.restoreCallingIdentity(v5);
		int v2 = ;
		Object v15 = this.mContext.getSystemService(StorageManage.class);
		Object v16 = this.mContext.getSystemService(StorageStatsManage.class);
		long v17 = Binder.clearCallingIdentity();
		File v18 = v15.findPathForUuid(p1);
		if ((v2 & 16) != 0) {
			long v19 = v18.getUsableSpace();
			long v20 = v15.getStorageLowBytes(v18);
			long v21 = v15.getStorageFullBytes(v18);
			if ((v2 & 8) != 0) {
				UUID v23 = StorageManager.convert(p1);
				boolean v24 = StorageStatsManager.isQuotaSupported(v23);
				boolean v22 = v24;
				if (v22 == 0) {
					UUID v26 = StorageManager.convert(p1);
					long v27 = StorageStatsManager.getCacheBytes(v26);
					long v25 = v27;
					long v28 = v15.getStorageCacheBytes(v18, v2);
					long v29 = Math.max(0, (v25 - v28));
					if ((v2 & 1) == 0) {
						long v30 = Math.max(0, (( + ) - ));
						Binder.restoreCallingIdentity(v17);
						return v30;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public long getAllocatableBytes(String p1, int p2, String p3){
	int v1 = Binder.getCallingUid();
	int v2 = p0.adjustAllocateFlags(p2, v1, p3);
	Object v3 = this.mContext.getSystemService(StorageManage.class);
	Object v4 = this.mContext.getSystemService(StorageStatsManage.class);
	long v5 = Binder.clearCallingIdentity();
	File v6 = v3.findPathForUuid(p1);
	if ((v2 & 16) != 0) {
		long v7 = v6.getUsableSpace();
		long v8 = v3.getStorageLowBytes(v6);
		long v9 = v3.getStorageFullBytes(v6);
		if ((v2 & 8) != 0) {
			boolean v10 = v4.isQuotaSupported(p1);
			if (v10 == 0) {
				long v11 = v4.getCacheBytes(p1);
				long v12 = v3.getStorageCacheBytes(v6, v2);
				long v13 = Math.max(0, (v11 - v12));
				if ((v2 & 1) == 0) {
					long v14 = Math.max(0, (( + ) - ));
					Binder.restoreCallingIdentity(v5);
					return v14;
				}
			}
		}
	}
}
