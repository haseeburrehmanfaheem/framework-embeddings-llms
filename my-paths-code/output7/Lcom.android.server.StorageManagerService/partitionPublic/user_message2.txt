The method partitionPublic has the following code snippet:

This is path 1 for the API with depth 1:
public void partitionPublic(String p1){
	Object v3 = this.mDiskScanLatches.get(p1);
	if (v3 != 0) {
		CountDownLatch v4 = new CountDownLatch(1);
		Object v6 = this.mDiskScanLatches.put(p1, v4);
		CountDownLatch v2 = ;
		this.mVold.partition(p1, 0, -1);
		long v9 = SystemClock.elapsedRealtime();
		boolean v10 = v2.await(5000, TimeUnit.MILLISECONDS);
		if (v10 == 0) {
			Thread v14 = Thread.currentThread();
			String v15 = v14.getName();
			if ((180000 < 0) <= 0) {
				long v28 = SystemClock.elapsedRealtime();
				if ((v28 < (v9 + 180000)) > 0) {
					boolean v29 = v2.await(5000, TimeUnit.MILLISECONDS);
					if (v29 == 0) {
						return;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 1:
public void partitionPublic(String p1){
	Object v3 = this.mDiskScanLatches.get(p1);
	if (v3 != 0) {
		CountDownLatch v4 = new CountDownLatch(1);
		Object v6 = this.mDiskScanLatches.put(p1, v4);
		CountDownLatch v2 = ;
		this.mVold.partition(p1, 0, -1);
		long v9 = SystemClock.elapsedRealtime();
		boolean v10 = v2.await(5000, TimeUnit.MILLISECONDS);
		if (v10 == 0) {
			Thread v14 = Thread.currentThread();
			String v15 = v14.getName();
			if ((180000 < 0) <= 0) {
				long v28 = SystemClock.elapsedRealtime();
				if ((v28 < (v9 + 180000)) > 0) {
					boolean v29 = v2.await(5000, TimeUnit.MILLISECONDS);
					if (v29 == 0) {
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mDiskScanLatches.get(p1);\nCountDownLatch v4 = new CountDownLatch(1);\nObject v6 = this.mDiskScanLatches.put(p1, v4);\nthis.mVold.partition(p1, 0, -1);', 'CountDownLatch v2 = p0.findOrCreateDiskScanLatch(p1);\nthis.mVold.partition(p1, 0, -1);\np0.waitForLatch(v2, "partitionPublic", 180000);']

The method partitionPublic has the following similar APIs:

- API Name: partitionPrivate(Ljava/lang/String;)V with Similarity Score: 0.9928895235061646
  - Access Control Level: SYS_OR_SIG and the following code:
CountDownLatch v3 = p0.findOrCreateDiskScanLatch(p1);
this.mVold.partition(p1, 1, -1);
p0.waitForLatch(v3, "partitionPrivate", 180000);

- API Name: partitionPrivate(Ljava/lang/String;)V with Similarity Score: 0.9700137972831726
  - Access Control Level: SYS_OR_SIG and the following code:
Object v10 = this.mDiskScanLatches.get(p1);
CountDownLatch v11 = new CountDownLatch(1);
this.mVold.partition(p1, 1, -1);

