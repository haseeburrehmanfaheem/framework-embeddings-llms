This is path 1 for the API with depth 2:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
						List v19 = v20;
						boolean v21 = v19.contains(Account.type);
						boolean v18 = v21;
						if (v18 == 0) {
							long v22 = IAccountManager$Stub.clearCallingIdentity();
							Object v25 = this.mUsers.get(p1);
							if (v25 != 0) {
								boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v26 != 0) {
									boolean v27 = this.mLocalUnlockedUsers.get(p1);
									if (v27 == 0) {
										File v35 = new File(v36);
										String v36 = this.mInjector.getCeDatabaseName(p1);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
										AccountManagerService.syncDeCeAccountsLocked();
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v24 = ;
											AccountManagerService$UserAccounts v23 = v24;
											Account v41 = p0.renameAccountInternal(v23, p2, p3);
											Bundle v42 = new Bundle();
											v42.putString("authAccount", Account.name);
											v42.putString("accountType", Account.type);
											String v46 = v41.getAccessId();
											v42.putString("accountAccessId", v46);
											p1.onResult(v42);
											IAccountManager$Stub.restoreCallingIdentity(v22);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v19 = AccountManagerService.getTypesManagedByCaller(v1, v17);
						boolean v20 = v19.contains(Account.type);
						boolean v18 = v20;
						if (v18 == 0) {
							long v21 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v17);
							AccountManagerService$UserAccounts v22 = v23;
							Account v24 = p0.renameAccountInternal(v22, p2, p3);
							Bundle v25 = new Bundle();
							v25.putString("authAccount", Account.name);
							v25.putString("accountType", Account.type);
							String v29 = v24.getAccessId();
							v25.putString("accountAccessId", v29);
							p1.onResult(v25);
							IAccountManager$Stub.restoreCallingIdentity(v21);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					boolean v18 = p0.isAccountManagedByCaller(Account.type, v1, v17);
					if (v18 == 0) {
						long v19 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);
						Account v21 = p0.renameAccountInternal(v20, p2, p3);
						Bundle v22 = new Bundle();
						v22.putString("authAccount", Account.name);
						v22.putString("accountType", Account.type);
						String v26 = v21.getAccessId();
						v22.putString("accountAccessId", v26);
						p1.onResult(v22);
						IAccountManager$Stub.restoreCallingIdentity(v19);
						return;
					}
				}
			}
		}
	}
}
