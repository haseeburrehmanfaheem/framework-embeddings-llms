The method renameAccount has the following code snippet:

This is path 1 for the API with depth 2:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
						List v19 = v20;
						boolean v21 = v19.contains(Account.type);
						boolean v18 = v21;
						if (v18 == 0) {
							long v22 = IAccountManager$Stub.clearCallingIdentity();
							Object v25 = this.mUsers.get(p1);
							if (v25 != 0) {
								boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v26 != 0) {
									boolean v27 = this.mLocalUnlockedUsers.get(p1);
									if (v27 == 0) {
										File v35 = new File(v36);
										String v36 = this.mInjector.getCeDatabaseName(p1);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
										AccountManagerService.syncDeCeAccountsLocked();
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v24 = ;
											AccountManagerService$UserAccounts v23 = v24;
											Account v41 = p0.renameAccountInternal(v23, p2, p3);
											Bundle v42 = new Bundle();
											v42.putString("authAccount", Account.name);
											v42.putString("accountType", Account.type);
											String v46 = v41.getAccessId();
											v42.putString("accountAccessId", v46);
											p1.onResult(v42);
											IAccountManager$Stub.restoreCallingIdentity(v22);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
						List v19 = v20;
						boolean v21 = v19.contains(Account.type);
						boolean v18 = v21;
						if (v18 == 0) {
							long v22 = IAccountManager$Stub.clearCallingIdentity();
							Object v25 = this.mUsers.get(p1);
							if (v25 != 0) {
								boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v26 != 0) {
									boolean v27 = this.mLocalUnlockedUsers.get(p1);
									if (v27 == 0) {
										File v35 = new File(v36);
										String v36 = this.mInjector.getCeDatabaseName(p1);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
										AccountManagerService.syncDeCeAccountsLocked();
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v24 = ;
											AccountManagerService$UserAccounts v23 = v24;
											Account v41 = p0.renameAccountInternal(v23, p2, p3);
											Bundle v42 = new Bundle();
											v42.putString("authAccount", Account.name);
											v42.putString("accountType", Account.type);
											String v46 = v41.getAccessId();
											v42.putString("accountAccessId", v46);
											p1.onResult(v42);
											IAccountManager$Stub.restoreCallingIdentity(v22);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
						List v19 = v20;
						boolean v21 = v19.contains(Account.type);
						boolean v18 = v21;
						if (v18 == 0) {
							long v22 = IAccountManager$Stub.clearCallingIdentity();
							Object v25 = this.mUsers.get(p1);
							if (v25 != 0) {
								File v26 = new File(v27);
								String v27 = this.mInjector.getPreNDatabaseName(p1);
								File v29 = new File(v30);
								String v30 = this.mInjector.getDeDatabaseName(p1);
								AccountManagerService$UserAccounts v32 = new AccountManagerService$UserAccounts(this.mContext,p1,v26,v29);
								this.mUsers.append(p1, v32);
								AccountManagerService.purgeOldGrants(v32);
								AccountManager.invalidateLocalAccountsDataCaches();
								boolean v37 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v37 != 0) {
									boolean v38 = this.mLocalUnlockedUsers.get(p1);
									if (v38 == 0) {
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v24 = ;
											AccountManagerService$UserAccounts v23 = v24;
											Account v40 = p0.renameAccountInternal(v23, p2, p3);
											Bundle v41 = new Bundle();
											v41.putString("authAccount", Account.name);
											v41.putString("accountType", Account.type);
											String v45 = v40.getAccessId();
											v41.putString("accountAccessId", v45);
											p1.onResult(v41);
											IAccountManager$Stub.restoreCallingIdentity(v22);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Account v41 = p0.renameAccountInternal(v23, p2, p3);\nBundle v42 = new Bundle();\nv42.putString("authAccount", Account.name);\nv42.putString("accountType", Account.type);\nString v46 = v41.getAccessId();\nv42.putString("accountAccessId", v46);\np1.onResult(v42);', 'AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v17);\nAccount v24 = p0.renameAccountInternal(v22, p2, p3);\nBundle v25 = new Bundle();\nv25.putString("authAccount", Account.name);\nv25.putString("accountType", Account.type);\nString v29 = v24.getAccessId();\nv25.putString("accountAccessId", v29);\np1.onResult(v25);', 'AccountManagerService$UserAccounts v20 = p0.getUserAccounts(v17);\nAccount v21 = p0.renameAccountInternal(v20, p2, p3);\nBundle v22 = new Bundle();\nv22.putString("authAccount", Account.name);\nv22.putString("accountType", Account.type);\nString v26 = v21.getAccessId();\nv22.putString("accountAccessId", v26);\np1.onResult(v22);']

The method renameAccount has the following similar APIs:

- API Name: getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8619351387023926
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
Iterator v29 = v28.iterator();
Object v31 = v29.next();
Account v33 = new Account();
System.arraycopy(v37, 0, v33, , v37.length);
Bundle v43 = new Bundle();
v43.putString("authAccount", Account.name);
v43.putString("accountType", Account.type);
AccountManagerService.onResult(p1, v43);

- API Name: getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8518513441085815
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
Iterator v29 = v28.iterator();
Object v31 = v29.next();
Account v33 = new Account();
System.arraycopy(v37, 0, v33, , v37.length);
Bundle v43 = new Bundle();
v43.putString("authAccount", Account.name);
v43.putString("accountType", Account.type);
AccountManagerService.onResult(p1, v43);

