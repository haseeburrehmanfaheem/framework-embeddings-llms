The method getUserData has the following code snippet:

This is path 1 for the API with depth 2:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		int v5 = Binder.getCallingPid();
		Integer v6 = Integer.valueOf(v5);
		Object v9 = Objects.requireNonNull(p1, "account cannot be null");
		Object v10 = Objects.requireNonNull(p2, "key cannot be null");
		int v11 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v13 = v14;
			boolean v15 = v13.contains(Account.type);
			boolean v12 = v15;
			if (v12 == 0) {
				boolean v16 = p0.isLocalUnlockedUser(v11);
				if (v16 != 0) {
					long v17 = IAccountManager$Stub.clearCallingIdentity();
					Object v20 = this.mUsers.get(p1);
					if (v20 != 0) {
						boolean v21 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v21 != 0) {
							boolean v22 = this.mLocalUnlockedUsers.get(p1);
							if (v22 == 0) {
								File v30 = new File(v31);
								String v31 = this.mInjector.getCeDatabaseName(p1);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v30);
								AccountManagerService.syncDeCeAccountsLocked();
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v19 = ;
									AccountManagerService$UserAccounts v18 = v19;
									boolean v36 = p0.accountExistsCache(v18, p1);
									if (v36 != 0) {
										Map v38 = this.userDataCache;
										Object v39 = v38.get(p1);
										if (v39 != 0) {
											Map v40 = this.userDataCache;
											Object v41 = v40.get(p1);
											if (v41 != 0) {
												SQLiteDatabase v43 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
												HashMap v44 = new HashMap();
												String v46 = new String(2);
												Cursor v47 = v43.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v46, 0, 0, 0);
												boolean v48 = v47.moveToNext();
												if (v48 == 0) {
													String v49 = v47.getString(0);
													String v50 = v47.getString(1);
													Object v51 = v44.put(v49, v50);
													boolean v52 = v47.moveToNext();
													if (v52 == 0) {
														v47.close();
														Map v42 = v44;
														Map v54 = this.userDataCache;
														Object v55 = v54.put(p1, v42);
														Object v56 = .get(p2);
														String v37 = v56;
														IAccountManager$Stub.restoreCallingIdentity(v17);
														return v37;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		int v5 = Binder.getCallingPid();
		Integer v6 = Integer.valueOf(v5);
		Object v9 = Objects.requireNonNull(p1, "account cannot be null");
		Object v10 = Objects.requireNonNull(p2, "key cannot be null");
		int v11 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v13 = v14;
			boolean v15 = v13.contains(Account.type);
			boolean v12 = v15;
			if (v12 == 0) {
				boolean v16 = p0.isLocalUnlockedUser(v11);
				if (v16 != 0) {
					long v17 = IAccountManager$Stub.clearCallingIdentity();
					Object v20 = this.mUsers.get(p1);
					if (v20 != 0) {
						File v21 = new File(v22);
						String v22 = this.mInjector.getPreNDatabaseName(p1);
						File v24 = new File(v25);
						String v25 = this.mInjector.getDeDatabaseName(p1);
						AccountManagerService$UserAccounts v27 = new AccountManagerService$UserAccounts(this.mContext,p1,v21,v24);
						this.mUsers.append(p1, v27);
						AccountManagerService.purgeOldGrants(v27);
						AccountManager.invalidateLocalAccountsDataCaches();
						boolean v32 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v32 != 0) {
							boolean v33 = this.mLocalUnlockedUsers.get(p1);
							if (v33 == 0) {
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v19 = ;
									AccountManagerService$UserAccounts v18 = v19;
									boolean v35 = p0.accountExistsCache(v18, p1);
									if (v35 != 0) {
										Map v37 = this.userDataCache;
										Object v38 = v37.get(p1);
										if (v38 != 0) {
											Map v39 = this.userDataCache;
											Object v40 = v39.get(p1);
											if (v40 != 0) {
												SQLiteDatabase v42 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
												HashMap v43 = new HashMap();
												String v45 = new String(2);
												Cursor v46 = v42.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v45, 0, 0, 0);
												boolean v47 = v46.moveToNext();
												if (v47 == 0) {
													String v48 = v46.getString(0);
													String v49 = v46.getString(1);
													Object v50 = v43.put(v48, v49);
													boolean v51 = v46.moveToNext();
													if (v51 == 0) {
														v46.close();
														Map v41 = v43;
														Map v53 = this.userDataCache;
														Object v54 = v53.put(p1, v41);
														Object v55 = .get(p2);
														String v36 = v55;
														IAccountManager$Stub.restoreCallingIdentity(v17);
														return v36;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		int v5 = Binder.getCallingPid();
		Integer v6 = Integer.valueOf(v5);
		Object v9 = Objects.requireNonNull(p1, "account cannot be null");
		Object v10 = Objects.requireNonNull(p2, "key cannot be null");
		int v11 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v13 = v14;
			boolean v15 = v13.contains(Account.type);
			boolean v12 = v15;
			if (v12 == 0) {
				boolean v16 = p0.isLocalUnlockedUser(v11);
				if (v16 != 0) {
					long v17 = IAccountManager$Stub.clearCallingIdentity();
					Object v20 = this.mUsers.get(p1);
					if (v20 != 0) {
						boolean v21 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v21 != 0) {
							boolean v22 = this.mLocalUnlockedUsers.get(p1);
							if (v22 == 0) {
								File v30 = new File(v31);
								String v31 = this.mInjector.getCeDatabaseName(p1);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v30);
								AccountManagerService.syncDeCeAccountsLocked();
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v19 = ;
									AccountManagerService$UserAccounts v18 = v19;
									boolean v36 = p0.accountExistsCache(v18, p1);
									if (v36 != 0) {
										IAccountManager$Stub.restoreCallingIdentity(v17);
										return 0;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v9 = Objects.requireNonNull(p1, "account cannot be null");\nObject v10 = Objects.requireNonNull(p2, "key cannot be null");\nList v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nboolean v15 = v13.contains(Account.type);\nSQLiteDatabase v43 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();\nCursor v47 = v43.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v46, 0, 0, 0);\nMap v44 = new HashMap();\nString v49 = v47.getString(0);\nString v50 = v47.getString(1);\nObject v51 = v44.put(v49, v50);\nreturn v37;', 'int v1 = Binder.getCallingUid();\nInteger v4 = Integer.valueOf(v1);\nint v5 = Binder.getCallingPid();\nInteger v6 = Integer.valueOf(v5);\nboolean v12 = p0.isAccountManagedByCaller(Account.type, v1, v11);', 'Map v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);\nObject v27 = v26.get(p1);\nMap v30 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p1);\nObject v32 = v31.put(p1, v30);']

The method getUserData has the following similar APIs:

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z with Similarity Score: 0.9038185477256775
  - Access Control Level: SYS_OR_SIG and the following code:
Object v16 = Objects.requireNonNull(p1, "account cannot be null");
List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
boolean v20 = v18.contains(Account.type);
Account v68 = new Account(v67,v66);
SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
v48.beginTransaction();

- API Name: peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.8897857069969177
  - Access Control Level: SYS_OR_SIG and the following code:
Map v28 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);
Object v29 = v28.get(p1);
Map v32 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p1);
Object v34 = v33.put(p1, v32);
String v27 = v35;
return v27;

