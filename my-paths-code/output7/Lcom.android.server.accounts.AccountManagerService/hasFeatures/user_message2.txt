The method hasFeatures has the following code snippet:

This is path 1 for the API with depth 2:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					if (p2 != 0) {
						List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
						boolean v27 = v26.contains(p2);
						boolean v25 = v27;
						if (v25 == 0) {
							long v28 = IAccountManager$Stub.clearCallingIdentity();
							Object v31 = this.mUsers.get(p1);
							if (v31 != 0) {
								boolean v32 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v32 != 0) {
									boolean v33 = this.mLocalUnlockedUsers.get(p1);
									if (v33 == 0) {
										File v41 = new File(v42);
										String v42 = this.mInjector.getCeDatabaseName(p1);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v41);
										AccountManagerService.syncDeCeAccountsLocked();
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v30 = ;
											AccountManagerService$UserAccounts v29 = v30;
											AccountManagerService$TestFeaturesSession v47 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
											if (v50 == 0) {
												IAccountAuthenticatorCache v58 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
												AuthenticatorDescription v59 = AuthenticatorDescription.newKey(this.mAccountType);
												int v60 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												RegisteredServicesCache$ServiceInfo v61 = v58.getServiceInfo(v59, v60);
												if (v61 != 0) {
													int v62 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v63 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v62);
													if (v63 != 0) {
														if (ComponentInfo.directBootAware != 0) {
															Intent v64 = new Intent();
															Intent v66 = v64.setAction("android.accounts.AccountAuthenticator");
															Intent v67 = v64.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
															if (v68 == 0) {
																IAccountAuthenticatorCache v75 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																int v76 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																boolean v77 = v75.getBindInstantServiceAllowed(v76);
																if (v77 == 0) {
																	int v78 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	UserHandle v79 = UserHandle.of(v78);
																	boolean v80 = AccountManagerService.mContext.bindServiceAsUser(v64, AccountManagerService$Session, , v79);
																	if (v80 != 0) {
																		if (v81 == 0) {
																			boolean v57 = 0;
																			if (v57 != 0) {
																				long v86 = SystemClock.elapsedRealtime();
																				String v87 = AccountManagerService$Session.toDebugString(v86);
																				String v85 = v87;
																				this.mNumErrors = (this.mNumErrors + 1);
																				IAccountManagerResponse v92 = AccountManagerService$Session.getResponseAndClose();
																				if (v92 == 0) {
																					if (v93 == 0) {
																						Class v96 = AccountManagerService$Session.getClass();
																						String v97 = v96.getSimpleName();
																						v92.onError(1, "bind failure");
																						if (v104 == 0) {
																							IAccountManager$Stub.restoreCallingIdentity(v28);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					if (p2 != 0) {
						List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
						boolean v27 = v26.contains(p2);
						boolean v25 = v27;
						if (v25 == 0) {
							long v28 = IAccountManager$Stub.clearCallingIdentity();
							Object v31 = this.mUsers.get(p1);
							if (v31 != 0) {
								boolean v32 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v32 != 0) {
									boolean v33 = this.mLocalUnlockedUsers.get(p1);
									if (v33 == 0) {
										File v41 = new File(v42);
										String v42 = this.mInjector.getCeDatabaseName(p1);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v41);
										AccountManagerService.syncDeCeAccountsLocked();
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v30 = ;
											AccountManagerService$UserAccounts v29 = v30;
											AccountManagerService$TestFeaturesSession v47 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
											if (v50 == 0) {
												IAccountAuthenticatorCache v58 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
												AuthenticatorDescription v59 = AuthenticatorDescription.newKey(this.mAccountType);
												int v60 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												RegisteredServicesCache$ServiceInfo v61 = v58.getServiceInfo(v59, v60);
												if (v61 != 0) {
													int v62 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v63 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v62);
													if (v63 != 0) {
														if (ComponentInfo.directBootAware != 0) {
															Intent v64 = new Intent();
															Intent v66 = v64.setAction("android.accounts.AccountAuthenticator");
															Intent v67 = v64.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
															if (v68 == 0) {
																IAccountAuthenticatorCache v75 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																int v76 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																boolean v77 = v75.getBindInstantServiceAllowed(v76);
																if (v77 == 0) {
																	int v78 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	UserHandle v79 = UserHandle.of(v78);
																	boolean v80 = AccountManagerService.mContext.bindServiceAsUser(v64, AccountManagerService$Session, , v79);
																	if (v80 != 0) {
																		boolean v57 = 1;
																		if (v57 != 0) {
																			long v85 = SystemClock.elapsedRealtime();
																			String v86 = AccountManagerService$Session.toDebugString(v85);
																			String v84 = v86;
																			this.mNumErrors = (this.mNumErrors + 1);
																			IAccountManagerResponse v91 = AccountManagerService$Session.getResponseAndClose();
																			if (v91 == 0) {
																				if (v92 == 0) {
																					Class v95 = AccountManagerService$Session.getClass();
																					String v96 = v95.getSimpleName();
																					v91.onError(1, "bind failure");
																					if (v103 == 0) {
																						IAccountManager$Stub.restoreCallingIdentity(v28);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					if (p2 != 0) {
						List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
						boolean v27 = v26.contains(p2);
						boolean v25 = v27;
						if (v25 == 0) {
							long v28 = IAccountManager$Stub.clearCallingIdentity();
							Object v31 = this.mUsers.get(p1);
							if (v31 != 0) {
								File v32 = new File(v33);
								String v33 = this.mInjector.getPreNDatabaseName(p1);
								File v35 = new File(v36);
								String v36 = this.mInjector.getDeDatabaseName(p1);
								AccountManagerService$UserAccounts v38 = new AccountManagerService$UserAccounts(this.mContext,p1,v32,v35);
								this.mUsers.append(p1, v38);
								AccountManagerService.purgeOldGrants(v38);
								AccountManager.invalidateLocalAccountsDataCaches();
								boolean v43 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v43 != 0) {
									boolean v44 = this.mLocalUnlockedUsers.get(p1);
									if (v44 == 0) {
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v30 = ;
											AccountManagerService$UserAccounts v29 = v30;
											AccountManagerService$TestFeaturesSession v46 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
											if (v49 == 0) {
												IAccountAuthenticatorCache v57 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
												AuthenticatorDescription v58 = AuthenticatorDescription.newKey(this.mAccountType);
												int v59 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												RegisteredServicesCache$ServiceInfo v60 = v57.getServiceInfo(v58, v59);
												if (v60 != 0) {
													int v61 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v62 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v61);
													if (v62 != 0) {
														if (ComponentInfo.directBootAware != 0) {
															Intent v63 = new Intent();
															Intent v65 = v63.setAction("android.accounts.AccountAuthenticator");
															Intent v66 = v63.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
															if (v67 == 0) {
																IAccountAuthenticatorCache v74 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																int v75 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																boolean v76 = v74.getBindInstantServiceAllowed(v75);
																if (v76 == 0) {
																	int v77 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	UserHandle v78 = UserHandle.of(v77);
																	boolean v79 = AccountManagerService.mContext.bindServiceAsUser(v63, AccountManagerService$Session, , v78);
																	if (v79 != 0) {
																		if (v80 == 0) {
																			boolean v56 = 0;
																			if (v56 != 0) {
																				long v85 = SystemClock.elapsedRealtime();
																				String v86 = AccountManagerService$Session.toDebugString(v85);
																				String v84 = v86;
																				this.mNumErrors = (this.mNumErrors + 1);
																				IAccountManagerResponse v91 = AccountManagerService$Session.getResponseAndClose();
																				if (v91 == 0) {
																					if (v92 == 0) {
																						Class v95 = AccountManagerService$Session.getClass();
																						String v96 = v95.getSimpleName();
																						v91.onError(1, "bind failure");
																						if (v103 == 0) {
																							IAccountManager$Stub.restoreCallingIdentity(v28);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$TestFeaturesSession v47 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);\nIAccountAuthenticatorCache v58 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nAuthenticatorDescription v59 = AuthenticatorDescription.newKey(this.mAccountType);\nRegisteredServicesCache$ServiceInfo v61 = v58.getServiceInfo(v59, v60);\nif (v63 != 0) {\nIntent v64 = new Intent();\nIntent v66 = v64.setAction("android.accounts.AccountAuthenticator");\nIntent v67 = v64.setComponent(RegisteredServicesCache$ServiceInfo.componentName);', 'AccountManagerService$TestFeaturesSession v29 = new AccountManagerService$TestFeaturesSession(p0,v27,p1,p2,p3);\nboolean v39 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);\nString v43 = AccountManagerService$Session.toDebugString();', 'AccountManagerService$UserAccounts v26 = p0.getUserAccounts(v23);\nAccountManagerService$TestFeaturesSession v27 = new AccountManagerService$TestFeaturesSession(p0,v26,p1,p2,p3);\nv27.bind();']

The method hasFeatures has the following similar APIs:

- API Name: getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8910849094390869
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
AccountManagerService$18 v24 = new AccountManagerService$18(p0,p1,p4);
AccountManagerService$GetAccountsByTypeAndFeatureSession v26 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v22,v24,p2,p3,v1,p4,1);
v26.bind();

- API Name: getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8370497226715088
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$GetAccountsByTypeAndFeatureSession v55 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v37,p1,p2,p3,v1,p4,0);
IAccountAuthenticatorCache v66 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
RegisteredServicesCache$ServiceInfo v69 = v66.getServiceInfo(v67, v68);

