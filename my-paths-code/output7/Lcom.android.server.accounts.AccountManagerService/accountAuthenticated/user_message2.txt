The method accountAuthenticated has the following code snippet:

This is path 1 for the API with depth 2:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v10 = v11;
			boolean v12 = v10.contains(Account.type);
			boolean v9 = v12;
			if (v9 == 0) {
				Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v15 == 0) {
					boolean v16 = v15.isActiveProfileOwner(p2);
					if (v16 != 0) {
						boolean v17 = v15.isActiveDeviceOwner(p2);
						if (v17 == 0) {
							boolean v14 = ;
							if (v14 == 0) {
								UserManager v18 = AccountManagerService.getUserManager();
								UserHandle v19 = new UserHandle(v8);
								Bundle v21 = v18.getUserRestrictions(v19);
								boolean v22 = v21.getBoolean("no_modify_accounts");
								if (v22 == 0) {
									boolean v13 = 0;
									if (v13 == 0) {
										Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v25 == 0) {
											boolean v26 = v25.isActiveProfileOwner(p3);
											if (v26 != 0) {
												boolean v27 = v25.isActiveDeviceOwner(p3);
												if (v27 == 0) {
													boolean v24 = ;
													if (v24 == 0) {
														Object v28 = this.mContext.getSystemService("device_policy");
														String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
														if (v29 != 0) {
															if ( >= v29.length) {
																boolean v30 = v29[].equals(Account.type);
																if (v30 == 0) {
																	if ( >= v29.length) {
																		boolean v31 = v29[].equals(Account.type);
																		if (v31 == 0) {
																			boolean v23 = 0;
																			if (v23 != 0) {
																				long v32 = IAccountManager$Stub.clearCallingIdentity();
																				Object v35 = this.mUsers.get(p1);
																				if (v35 != 0) {
																					boolean v36 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
																					if (v36 != 0) {
																						boolean v37 = this.mLocalUnlockedUsers.get(p1);
																						if (v37 == 0) {
																							File v45 = new File(v46);
																							String v46 = this.mInjector.getCeDatabaseName(p1);
																							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v45);
																							AccountManagerService.syncDeCeAccountsLocked();
																							if ( == 0) {
																								AccountManagerService.validateAccountsInternal(, 1);
																								AccountManagerService$UserAccounts v34 = ;
																								AccountManagerService$UserAccounts v33 = v34;
																								int v53 = UserHandle.getCallingUserId();
																								AccountManagerService$UserAccounts v54 = AccountManagerService.getUserAccounts(v53);
																								AccountManagerService$UserAccounts v52 = v54;
																								SQLiteDatabase v56 = this.mDeDatabase.getWritableDatabase();
																								ContentValues v57 = new ContentValues();
																								long v59 = System.currentTimeMillis();
																								Long v60 = Long.valueOf(v59);
																								v57.put("last_password_entry_time_millis_epoch", v60);
																								String v62 = new String(2);
																								int v63 = v56.update("accounts", v57, "name=? AND type=?", v62);
																								if (v63 <= 0) {
																									boolean v55 = ;
																									boolean v51 = v55;
																									IAccountManager$Stub.restoreCallingIdentity(v32);
																									return v51;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v10 = v11;
			boolean v12 = v10.contains(Account.type);
			boolean v9 = v12;
			if (v9 == 0) {
				Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v15 == 0) {
					boolean v16 = v15.isActiveProfileOwner(p2);
					if (v16 != 0) {
						boolean v17 = v15.isActiveDeviceOwner(p2);
						if (v17 == 0) {
							boolean v14 = ;
							if (v14 == 0) {
								UserManager v18 = AccountManagerService.getUserManager();
								UserHandle v19 = new UserHandle(v8);
								Bundle v21 = v18.getUserRestrictions(v19);
								boolean v22 = v21.getBoolean("no_modify_accounts");
								if (v22 == 0) {
									boolean v13 = 1;
									if (v13 == 0) {
										Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v25 == 0) {
											boolean v26 = v25.isActiveProfileOwner(p3);
											if (v26 != 0) {
												boolean v27 = v25.isActiveDeviceOwner(p3);
												if (v27 == 0) {
													boolean v24 = ;
													if (v24 == 0) {
														Object v28 = this.mContext.getSystemService("device_policy");
														String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
														if (v29 != 0) {
															if ( >= v29.length) {
																boolean v30 = v29[].equals(Account.type);
																if (v30 == 0) {
																	if ( >= v29.length) {
																		boolean v31 = v29[].equals(Account.type);
																		if (v31 == 0) {
																			boolean v23 = 0;
																			if (v23 != 0) {
																				long v32 = IAccountManager$Stub.clearCallingIdentity();
																				Object v35 = this.mUsers.get(p1);
																				if (v35 != 0) {
																					boolean v36 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
																					if (v36 != 0) {
																						boolean v37 = this.mLocalUnlockedUsers.get(p1);
																						if (v37 == 0) {
																							File v45 = new File(v46);
																							String v46 = this.mInjector.getCeDatabaseName(p1);
																							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v45);
																							AccountManagerService.syncDeCeAccountsLocked();
																							if ( == 0) {
																								AccountManagerService.validateAccountsInternal(, 1);
																								AccountManagerService$UserAccounts v34 = ;
																								AccountManagerService$UserAccounts v33 = v34;
																								int v53 = UserHandle.getCallingUserId();
																								AccountManagerService$UserAccounts v54 = AccountManagerService.getUserAccounts(v53);
																								AccountManagerService$UserAccounts v52 = v54;
																								SQLiteDatabase v56 = this.mDeDatabase.getWritableDatabase();
																								ContentValues v57 = new ContentValues();
																								long v59 = System.currentTimeMillis();
																								Long v60 = Long.valueOf(v59);
																								v57.put("last_password_entry_time_millis_epoch", v60);
																								String v62 = new String(2);
																								int v63 = v56.update("accounts", v57, "name=? AND type=?", v62);
																								if (v63 <= 0) {
																									boolean v55 = ;
																									boolean v51 = v55;
																									IAccountManager$Stub.restoreCallingIdentity(v32);
																									return v51;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v10 = v11;
			boolean v12 = v10.contains(Account.type);
			boolean v9 = v12;
			if (v9 == 0) {
				Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v15 == 0) {
					boolean v16 = v15.isActiveProfileOwner(p2);
					if (v16 != 0) {
						boolean v17 = v15.isActiveDeviceOwner(p2);
						if (v17 == 0) {
							boolean v14 = ;
							if (v14 == 0) {
								UserManager v18 = AccountManagerService.getUserManager();
								UserHandle v19 = new UserHandle(v8);
								Bundle v21 = v18.getUserRestrictions(v19);
								boolean v22 = v21.getBoolean("no_modify_accounts");
								if (v22 == 0) {
									boolean v13 = 0;
									if (v13 == 0) {
										Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v25 == 0) {
											boolean v26 = v25.isActiveProfileOwner(p3);
											if (v26 != 0) {
												boolean v27 = v25.isActiveDeviceOwner(p3);
												if (v27 == 0) {
													boolean v24 = ;
													if (v24 == 0) {
														Object v28 = this.mContext.getSystemService("device_policy");
														String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
														if (v29 != 0) {
															if ( >= v29.length) {
																boolean v30 = v29[].equals(Account.type);
																if (v30 == 0) {
																	if ( >= v29.length) {
																		boolean v23 = 1;
																		if (v23 != 0) {
																			long v31 = IAccountManager$Stub.clearCallingIdentity();
																			Object v34 = this.mUsers.get(p1);
																			if (v34 != 0) {
																				boolean v35 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
																				if (v35 != 0) {
																					boolean v36 = this.mLocalUnlockedUsers.get(p1);
																					if (v36 == 0) {
																						File v44 = new File(v45);
																						String v45 = this.mInjector.getCeDatabaseName(p1);
																						AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v44);
																						AccountManagerService.syncDeCeAccountsLocked();
																						if ( == 0) {
																							AccountManagerService.validateAccountsInternal(, 1);
																							AccountManagerService$UserAccounts v33 = ;
																							AccountManagerService$UserAccounts v32 = v33;
																							int v52 = UserHandle.getCallingUserId();
																							AccountManagerService$UserAccounts v53 = AccountManagerService.getUserAccounts(v52);
																							AccountManagerService$UserAccounts v51 = v53;
																							SQLiteDatabase v55 = this.mDeDatabase.getWritableDatabase();
																							ContentValues v56 = new ContentValues();
																							long v58 = System.currentTimeMillis();
																							Long v59 = Long.valueOf(v58);
																							v56.put("last_password_entry_time_millis_epoch", v59);
																							String v61 = new String(2);
																							int v62 = v55.update("accounts", v56, "name=? AND type=?", v61);
																							if (v62 <= 0) {
																								boolean v54 = ;
																								boolean v50 = v54;
																								IAccountManager$Stub.restoreCallingIdentity(v31);
																								return v50;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nSQLiteDatabase v56 = this.mDeDatabase.getWritableDatabase();\nContentValues v57 = new ContentValues();\nlong v59 = System.currentTimeMillis();\nLong v60 = Long.valueOf(v59);\nv57.put("last_password_entry_time_millis_epoch", v60);\nString v62 = new String(2);\nint v63 = v56.update("accounts", v57, "name=? AND type=?", v62);', 'int v8 = UserHandle.getCallingUserId();\nAccountManagerService$UserAccounts v27 = AccountManagerService.getUserAccountsNotChecked(v8);\nboolean v30 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);', 'long v12 = IAccountManager$Stub.clearCallingIdentity();\nboolean v14 = p0.updateLastAuthenticatedTime(p1);']

The method accountAuthenticated has the following similar APIs:

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9156598448753357
  - Access Control Level: SYS_OR_SIG and the following code:
int v17 = UserHandle.getCallingUserId();
AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);

- API Name: clearPassword(Landroid/accounts/Account;)V with Similarity Score: 0.8913862109184265
  - Access Control Level: SYS_OR_SIG and the following code:
Object v14 = Objects.requireNonNull(p1, "account cannot be null");
int v15 = UserHandle.getCallingUserId();
if (Account.type != 0) {
List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
boolean v18 = v17.contains(Account.type);
long v19 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, 0);

