This is path 1 for the API with depth 2:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v10 = v11;
			boolean v12 = v10.contains(Account.type);
			boolean v9 = v12;
			if (v9 == 0) {
				Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v15 == 0) {
					boolean v16 = v15.isActiveProfileOwner(p2);
					if (v16 != 0) {
						boolean v17 = v15.isActiveDeviceOwner(p2);
						if (v17 == 0) {
							boolean v14 = ;
							if (v14 == 0) {
								UserManager v18 = AccountManagerService.getUserManager();
								UserHandle v19 = new UserHandle(v8);
								Bundle v21 = v18.getUserRestrictions(v19);
								boolean v22 = v21.getBoolean("no_modify_accounts");
								if (v22 == 0) {
									boolean v13 = 0;
									if (v13 == 0) {
										Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v25 == 0) {
											boolean v26 = v25.isActiveProfileOwner(p3);
											if (v26 != 0) {
												boolean v27 = v25.isActiveDeviceOwner(p3);
												if (v27 == 0) {
													boolean v24 = ;
													if (v24 == 0) {
														Object v28 = this.mContext.getSystemService("device_policy");
														String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
														if (v29 != 0) {
															if ( >= v29.length) {
																boolean v30 = v29[].equals(Account.type);
																if (v30 == 0) {
																	if ( >= v29.length) {
																		boolean v31 = v29[].equals(Account.type);
																		if (v31 == 0) {
																			boolean v23 = 0;
																			if (v23 != 0) {
																				long v32 = IAccountManager$Stub.clearCallingIdentity();
																				Object v35 = this.mUsers.get(p1);
																				if (v35 != 0) {
																					boolean v36 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
																					if (v36 != 0) {
																						boolean v37 = this.mLocalUnlockedUsers.get(p1);
																						if (v37 == 0) {
																							File v45 = new File(v46);
																							String v46 = this.mInjector.getCeDatabaseName(p1);
																							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v45);
																							AccountManagerService.syncDeCeAccountsLocked();
																							if ( == 0) {
																								AccountManagerService.validateAccountsInternal(, 1);
																								AccountManagerService$UserAccounts v34 = ;
																								AccountManagerService$UserAccounts v33 = v34;
																								int v53 = UserHandle.getCallingUserId();
																								AccountManagerService$UserAccounts v54 = AccountManagerService.getUserAccounts(v53);
																								AccountManagerService$UserAccounts v52 = v54;
																								SQLiteDatabase v56 = this.mDeDatabase.getWritableDatabase();
																								ContentValues v57 = new ContentValues();
																								long v59 = System.currentTimeMillis();
																								Long v60 = Long.valueOf(v59);
																								v57.put("last_password_entry_time_millis_epoch", v60);
																								String v62 = new String(2);
																								int v63 = v56.update("accounts", v57, "name=? AND type=?", v62);
																								if (v63 <= 0) {
																									boolean v55 = ;
																									boolean v51 = v55;
																									IAccountManager$Stub.restoreCallingIdentity(v32);
																									return v51;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v10 = AccountManagerService.getTypesManagedByCaller(v1, v8);
			boolean v11 = v10.contains(Account.type);
			boolean v9 = v11;
			if (v9 == 0) {
				boolean v13 = AccountManagerService.isProfileOwner(v1);
				if (v13 == 0) {
					UserManager v14 = AccountManagerService.getUserManager();
					UserHandle v15 = new UserHandle(v8);
					Bundle v17 = v14.getUserRestrictions(v15);
					boolean v18 = v17.getBoolean("no_modify_accounts");
					if (v18 == 0) {
						boolean v12 = 0;
						if (v12 == 0) {
							boolean v20 = AccountManagerService.isProfileOwner(v1);
							if (v20 == 0) {
								Object v21 = this.mContext.getSystemService("device_policy");
								String v22 = v21.getAccountTypesWithManagementDisabledAsUser(v8);
								if (v22 != 0) {
									if ( >= v22.length) {
										boolean v23 = v22[].equals(Account.type);
										if (v23 == 0) {
											if ( >= v22.length) {
												boolean v24 = v22[].equals(Account.type);
												if (v24 == 0) {
													boolean v19 = 0;
													if (v19 != 0) {
														long v25 = IAccountManager$Stub.clearCallingIdentity();
														AccountManagerService$UserAccounts v27 = AccountManagerService.getUserAccountsNotChecked(v8);
														AccountManagerService$UserAccounts v26 = v27;
														AccountManagerService$UserAccounts v29 = AccountManagerService.getUserAccountsForCaller();
														boolean v30 = AccountManagerService$UserAccounts.accountsDb.updateAccountLastAuthenticatedTime(p1);
														boolean v28 = v30;
														IAccountManager$Stub.restoreCallingIdentity(v25);
														return v28;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		Integer v4 = Integer.valueOf(v1);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		boolean v9 = p0.isAccountManagedByCaller(Account.type, v1, v8);
		if (v9 == 0) {
			boolean v10 = p0.canUserModifyAccounts(v8, v1);
			if (v10 == 0) {
				boolean v11 = p0.canUserModifyAccountsForType(v8, Account.type, v1);
				if (v11 != 0) {
					long v12 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v13 = p0.getUserAccounts(v8);
					boolean v14 = p0.updateLastAuthenticatedTime(p1);
					IAccountManager$Stub.restoreCallingIdentity(v12);
					return v14;
				}
			}
		}
	}
}
