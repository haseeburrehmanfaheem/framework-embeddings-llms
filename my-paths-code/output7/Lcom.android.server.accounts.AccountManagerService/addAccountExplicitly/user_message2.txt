The method addAccountExplicitly has the following code snippet:

This is path 1 for the API with depth 2:
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		int v13 = Binder.getCallingPid();
		Object v17 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
			boolean v20 = v19.contains(Account.type);
			boolean v18 = v20;
			if (v18 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
				AccountManagerService$UserAccounts v22 = v23;
				Bundle v25 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v26 = Account.name.length();
						if (v26 <= 200) {
							if (Account.type == 0) {
								int v27 = Account.type.length();
								if (v27 <= 200) {
									int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
									boolean v29 = AccountManagerService.isLocalUnlockedUser(v28);
									if (v29 != 0) {
										String v33 = p1.toSafeString();
										int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
										boolean v24 = 0;
										IAccountManager$Stub.restoreCallingIdentity(v21);
										boolean v1 = v24;
										return v1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		int v13 = Binder.getCallingPid();
		Object v17 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
			boolean v20 = v19.contains(Account.type);
			boolean v18 = v20;
			if (v18 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
				AccountManagerService$UserAccounts v22 = v23;
				Bundle v25 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v26 = Account.name.length();
						if (v26 <= 200) {
							if (Account.type == 0) {
								int v27 = Account.type.length();
								if (v27 <= 200) {
									int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
									boolean v29 = AccountManagerService.isLocalUnlockedUser(v28);
									if (v29 != 0) {
										AccountManagerService$UserAccounts.accountsDb.beginTransaction();
										long v31 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
										if ((v31 < 0) < 0) {
											String v35 = p1.toSafeString();
											AccountManagerService$UserAccounts.accountsDb.endTransaction();
											boolean v24 = 0;
											IAccountManager$Stub.restoreCallingIdentity(v21);
											boolean v1 = v24;
											return v1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		int v13 = Binder.getCallingPid();
		Object v17 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
			boolean v20 = v19.contains(Account.type);
			boolean v18 = v20;
			if (v18 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
				AccountManagerService$UserAccounts v22 = v23;
				Bundle v25 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v26 = Account.name.length();
						if (v26 <= 200) {
							if (Account.type == 0) {
								int v27 = Account.type.length();
								if (v27 <= 200) {
									int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
									boolean v29 = AccountManagerService.isLocalUnlockedUser(v28);
									if (v29 != 0) {
										AccountManagerService$UserAccounts.accountsDb.beginTransaction();
										long v31 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
										if ((v31 < 0) < 0) {
											Map v32 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
											int v33 = v32.size();
											if (v33 <= 100) {
												String v37 = p1.toSafeString();
												AccountManagerService$UserAccounts.accountsDb.endTransaction();
												boolean v24 = 0;
												IAccountManager$Stub.restoreCallingIdentity(v21);
												boolean v1 = v24;
												return v1;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v21 = AccountManagerService.addAccountInternal(v20, p1, p2, p3, v3, 0, p4);\nIAccountManager$Stub.restoreCallingIdentity(v19);\nboolean v1 = v21;\nreturn v1;', 'boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);\nreturn v1;']

The method addAccountExplicitly has the following similar APIs:

- API Name: setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z with Similarity Score: 0.8915383815765381
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);

- API Name: editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V with Similarity Score: 0.8335015177726746
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v19 = p0.isAccountManagedByCaller(p2, v1, v18);
AccountManagerService$16 v23 = new AccountManagerService$16(p0,v22,p1,p2,p3,1,0,0,p2);
v23.bind();

