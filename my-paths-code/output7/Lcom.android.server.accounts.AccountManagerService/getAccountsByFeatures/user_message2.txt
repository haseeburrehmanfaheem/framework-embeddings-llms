The method getAccountsByFeatures has the following code snippet:

This is path 1 for the API with depth 2:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				ArrayList v23 = new ArrayList();
				long v25 = Binder.clearCallingIdentity();
				Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
				Binder.restoreCallingIdentity(v25);
				Object v28 = LocalServices.getService(PackageManagerInterna.class);
				Iterator v29 = v26.iterator();
				boolean v30 = v29.hasNext();
				if (v30 == 0) {
					Object v31 = v29.next();
					if (1 != 0) {
						boolean v32 = v28.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, p1, 16);
						if (v32 == 0) {
							boolean v33 = v23.add(AuthenticatorDescription.type);
							boolean v34 = v29.hasNext();
							if (v34 == 0) {
								List v22 = v23;
								List v21 = v22;
								boolean v35 = v21.contains(p2);
								if (v35 != 0) {
									long v36 = IAccountManager$Stub.clearCallingIdentity();
									Object v39 = this.mUsers.get(p1);
									if (v39 != 0) {
										boolean v40 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
										if (v40 != 0) {
											boolean v41 = this.mLocalUnlockedUsers.get(p1);
											if (v41 == 0) {
												File v49 = new File(v50);
												String v50 = this.mInjector.getCeDatabaseName(p1);
												AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v49);
												AccountManagerService.syncDeCeAccountsLocked();
												if ( == 0) {
													AccountManagerService.validateAccountsInternal(, 1);
													AccountManagerService$UserAccounts v38 = ;
													AccountManagerService$UserAccounts v37 = v38;
													if (p3 == 0) {
														if (p3.length != 0) {
															AccountManagerService$GetAccountsByTypeAndFeatureSession v55 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v37,p1,p2,p3,v1,p4,0);
															if (v58 == 0) {
																IAccountAuthenticatorCache v66 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																AuthenticatorDescription v67 = AuthenticatorDescription.newKey(this.mAccountType);
																int v68 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																RegisteredServicesCache$ServiceInfo v69 = v66.getServiceInfo(v67, v68);
																if (v69 != 0) {
																	int v70 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	boolean v71 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v70);
																	if (v71 != 0) {
																		if (ComponentInfo.directBootAware != 0) {
																			Intent v72 = new Intent();
																			Intent v74 = v72.setAction("android.accounts.AccountAuthenticator");
																			Intent v75 = v72.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
																			if (v76 == 0) {
																				IAccountAuthenticatorCache v83 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																				int v84 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																				boolean v85 = v83.getBindInstantServiceAllowed(v84);
																				if (v85 == 0) {
																					int v86 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																					UserHandle v87 = UserHandle.of(v86);
																					boolean v88 = AccountManagerService.mContext.bindServiceAsUser(v72, AccountManagerService$Session, , v87);
																					if (v88 != 0) {
																						if (v89 == 0) {
																							boolean v65 = 0;
																							if (v65 != 0) {
																								long v94 = SystemClock.elapsedRealtime();
																								String v95 = AccountManagerService$Session.toDebugString(v94);
																								String v93 = v95;
																								this.mNumErrors = (this.mNumErrors + 1);
																								IAccountManagerResponse v100 = AccountManagerService$Session.getResponseAndClose();
																								if (v100 == 0) {
																									if (v101 == 0) {
																										Class v104 = AccountManagerService$Session.getClass();
																										String v105 = v104.getSimpleName();
																										v100.onError(1, "bind failure");
																										if (v112 == 0) {
																											IAccountManager$Stub.restoreCallingIdentity(v36);
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				ArrayList v23 = new ArrayList();
				long v25 = Binder.clearCallingIdentity();
				Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
				Binder.restoreCallingIdentity(v25);
				Object v28 = LocalServices.getService(PackageManagerInterna.class);
				Iterator v29 = v26.iterator();
				boolean v30 = v29.hasNext();
				if (v30 == 0) {
					Object v31 = v29.next();
					if (1 != 0) {
						boolean v32 = v28.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, p1, 16);
						if (v32 == 0) {
							boolean v33 = v23.add(AuthenticatorDescription.type);
							boolean v34 = v29.hasNext();
							if (v34 == 0) {
								List v22 = v23;
								List v21 = v22;
								boolean v35 = v21.contains(p2);
								if (v35 != 0) {
									long v36 = IAccountManager$Stub.clearCallingIdentity();
									Object v39 = this.mUsers.get(p1);
									if (v39 != 0) {
										boolean v40 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
										if (v40 != 0) {
											boolean v41 = this.mLocalUnlockedUsers.get(p1);
											if (v41 == 0) {
												File v49 = new File(v50);
												String v50 = this.mInjector.getCeDatabaseName(p1);
												AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v49);
												AccountManagerService.syncDeCeAccountsLocked();
												if ( == 0) {
													AccountManagerService.validateAccountsInternal(, 1);
													AccountManagerService$UserAccounts v38 = ;
													AccountManagerService$UserAccounts v37 = v38;
													if (p3 == 0) {
														if (p3.length != 0) {
															AccountManagerService$GetAccountsByTypeAndFeatureSession v55 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v37,p1,p2,p3,v1,p4,0);
															if (v58 == 0) {
																IAccountAuthenticatorCache v66 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																AuthenticatorDescription v67 = AuthenticatorDescription.newKey(this.mAccountType);
																int v68 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																RegisteredServicesCache$ServiceInfo v69 = v66.getServiceInfo(v67, v68);
																if (v69 != 0) {
																	int v70 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	boolean v71 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v70);
																	if (v71 != 0) {
																		if (ComponentInfo.directBootAware != 0) {
																			Intent v72 = new Intent();
																			Intent v74 = v72.setAction("android.accounts.AccountAuthenticator");
																			Intent v75 = v72.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
																			if (v76 == 0) {
																				IAccountAuthenticatorCache v83 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																				int v84 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																				boolean v85 = v83.getBindInstantServiceAllowed(v84);
																				if (v85 == 0) {
																					int v86 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																					UserHandle v87 = UserHandle.of(v86);
																					boolean v88 = AccountManagerService.mContext.bindServiceAsUser(v72, AccountManagerService$Session, , v87);
																					if (v88 != 0) {
																						boolean v65 = 1;
																						if (v65 != 0) {
																							long v93 = SystemClock.elapsedRealtime();
																							String v94 = AccountManagerService$Session.toDebugString(v93);
																							String v92 = v94;
																							this.mNumErrors = (this.mNumErrors + 1);
																							IAccountManagerResponse v99 = AccountManagerService$Session.getResponseAndClose();
																							if (v99 == 0) {
																								if (v100 == 0) {
																									Class v103 = AccountManagerService$Session.getClass();
																									String v104 = v103.getSimpleName();
																									v99.onError(1, "bind failure");
																									if (v111 == 0) {
																										IAccountManager$Stub.restoreCallingIdentity(v36);
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				ArrayList v23 = new ArrayList();
				long v25 = Binder.clearCallingIdentity();
				Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
				Binder.restoreCallingIdentity(v25);
				Object v28 = LocalServices.getService(PackageManagerInterna.class);
				Iterator v29 = v26.iterator();
				boolean v30 = v29.hasNext();
				if (v30 == 0) {
					Object v31 = v29.next();
					if (1 != 0) {
						boolean v32 = v28.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, p1, 16);
						if (v32 == 0) {
							boolean v33 = v23.add(AuthenticatorDescription.type);
							boolean v34 = v29.hasNext();
							if (v34 == 0) {
								List v22 = v23;
								List v21 = v22;
								boolean v35 = v21.contains(p2);
								if (v35 != 0) {
									long v36 = IAccountManager$Stub.clearCallingIdentity();
									Object v39 = this.mUsers.get(p1);
									if (v39 != 0) {
										File v40 = new File(v41);
										String v41 = this.mInjector.getPreNDatabaseName(p1);
										File v43 = new File(v44);
										String v44 = this.mInjector.getDeDatabaseName(p1);
										AccountManagerService$UserAccounts v46 = new AccountManagerService$UserAccounts(this.mContext,p1,v40,v43);
										this.mUsers.append(p1, v46);
										AccountManagerService.purgeOldGrants(v46);
										AccountManager.invalidateLocalAccountsDataCaches();
										boolean v51 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
										if (v51 != 0) {
											boolean v52 = this.mLocalUnlockedUsers.get(p1);
											if (v52 == 0) {
												if ( == 0) {
													AccountManagerService.validateAccountsInternal(, 1);
													AccountManagerService$UserAccounts v38 = ;
													AccountManagerService$UserAccounts v37 = v38;
													if (p3 == 0) {
														if (p3.length != 0) {
															AccountManagerService$GetAccountsByTypeAndFeatureSession v54 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v37,p1,p2,p3,v1,p4,0);
															if (v57 == 0) {
																IAccountAuthenticatorCache v65 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																AuthenticatorDescription v66 = AuthenticatorDescription.newKey(this.mAccountType);
																int v67 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																RegisteredServicesCache$ServiceInfo v68 = v65.getServiceInfo(v66, v67);
																if (v68 != 0) {
																	int v69 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	boolean v70 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v69);
																	if (v70 != 0) {
																		if (ComponentInfo.directBootAware != 0) {
																			Intent v71 = new Intent();
																			Intent v73 = v71.setAction("android.accounts.AccountAuthenticator");
																			Intent v74 = v71.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
																			if (v75 == 0) {
																				IAccountAuthenticatorCache v82 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																				int v83 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																				boolean v84 = v82.getBindInstantServiceAllowed(v83);
																				if (v84 == 0) {
																					int v85 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																					UserHandle v86 = UserHandle.of(v85);
																					boolean v87 = AccountManagerService.mContext.bindServiceAsUser(v71, AccountManagerService$Session, , v86);
																					if (v87 != 0) {
																						if (v88 == 0) {
																							boolean v64 = 0;
																							if (v64 != 0) {
																								long v93 = SystemClock.elapsedRealtime();
																								String v94 = AccountManagerService$Session.toDebugString(v93);
																								String v92 = v94;
																								this.mNumErrors = (this.mNumErrors + 1);
																								IAccountManagerResponse v99 = AccountManagerService$Session.getResponseAndClose();
																								if (v99 == 0) {
																									if (v100 == 0) {
																										Class v103 = AccountManagerService$Session.getClass();
																										String v104 = v103.getSimpleName();
																										v99.onError(1, "bind failure");
																										if (v111 == 0) {
																											IAccountManager$Stub.restoreCallingIdentity(v36);
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$GetAccountsByTypeAndFeatureSession v55 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v37,p1,p2,p3,v1,p4,0);\nIAccountAuthenticatorCache v66 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nRegisteredServicesCache$ServiceInfo v69 = v66.getServiceInfo(v67, v68);', 'Account v35 = new Account();\nSystem.arraycopy(v39, 0, v35, , v39.length);\nBundle v43 = new Bundle();\nv43.putParcelableArray("accounts", v27);\np1.onResult(v43);', 'Account v25 = p0.getAccountsFromCache(v24, p2, v1, p4, 0);\nBundle v26 = new Bundle();\nv26.putParcelableArray("accounts", v25);\np0.onResult(p1, v26);']

The method getAccountsByFeatures has the following similar APIs:

- API Name: getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8867081999778748
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
AccountManagerService$18 v24 = new AccountManagerService$18(p0,p1,p4);
AccountManagerService$GetAccountsByTypeAndFeatureSession v26 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v22,v24,p2,p3,v1,p4,1);
v26.bind();

- API Name: updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.8376770615577698
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
boolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);

