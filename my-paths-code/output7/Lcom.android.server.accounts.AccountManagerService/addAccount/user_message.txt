This is path 1 for the API with depth 2:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v28 == 0) {
					boolean v29 = v28.isActiveProfileOwner(p2);
					if (v29 != 0) {
						boolean v30 = v28.isActiveDeviceOwner(p2);
						if (v30 == 0) {
							boolean v27 = ;
							if (v27 == 0) {
								UserManager v31 = AccountManagerService.getUserManager();
								UserHandle v32 = new UserHandle(v25);
								Bundle v34 = v31.getUserRestrictions(v32);
								boolean v35 = v34.getBoolean("no_modify_accounts");
								if (v35 == 0) {
									boolean v26 = 0;
									if (v26 != 0) {
										Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v38 == 0) {
											boolean v39 = v38.isActiveProfileOwner(p3);
											if (v39 != 0) {
												boolean v40 = v38.isActiveDeviceOwner(p3);
												if (v40 == 0) {
													boolean v37 = ;
													if (v37 == 0) {
														Object v41 = this.mContext.getSystemService("device_policy");
														String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
														if (v42 != 0) {
															if ( >= v42.length) {
																boolean v43 = v42[].equals(p2);
																if (v43 == 0) {
																	if ( >= v42.length) {
																		boolean v44 = v42[].equals(p2);
																		if (v44 == 0) {
																			boolean v36 = 0;
																			if (v36 != 0) {
																				int v46 = Binder.getCallingPid();
																				int v47 = Binder.getCallingUid();
																				if (p6 != 0) {
																					Bundle v48 = new Bundle();
																					.putInt("callerUid", v47);
																					.putInt("callerPid", v46);
																					long v52 = IAccountManager$Stub.clearCallingIdentity();
																					AccountManagerService$UserAccounts v54 = AccountManagerService.getUserAccountsNotChecked(p7);
																					AccountManagerService$UserAccounts v53 = v54;
																					AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v53, v47);
																					AccountManagerService$9 v57 = new AccountManagerService$9(AccountManagerService,v53,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																					if (v60 == 0) {
																						boolean v67 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																						if (v67 != 0) {
																							String v71 = AccountManagerService$Session.toDebugString();
																							AccountManagerService$Session.onError(1, "bind failure");
																							IAccountManager$Stub.restoreCallingIdentity(v52);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				boolean v27 = AccountManagerService.isProfileOwner(v24);
				if (v27 == 0) {
					UserManager v28 = AccountManagerService.getUserManager();
					UserHandle v29 = new UserHandle(v25);
					Bundle v31 = v28.getUserRestrictions(v29);
					boolean v32 = v31.getBoolean("no_modify_accounts");
					if (v32 == 0) {
						boolean v26 = 0;
						if (v26 != 0) {
							boolean v34 = AccountManagerService.isProfileOwner(v24);
							if (v34 == 0) {
								Object v35 = this.mContext.getSystemService("device_policy");
								String v36 = v35.getAccountTypesWithManagementDisabledAsUser(v25);
								if (v36 != 0) {
									if ( >= v36.length) {
										boolean v37 = v36[].equals(p2);
										if (v37 == 0) {
											if ( >= v36.length) {
												boolean v38 = v36[].equals(p2);
												if (v38 == 0) {
													boolean v33 = 0;
													if (v33 != 0) {
														p1.onError(101, "User cannot modify accounts of this type (policy).");
														Object v41 = LocalServices.getService(DevicePolicyManagerInterna.class);
														if (v41 != 0) {
															if (101 != 100) {
																if (101 != 101) {
																	Intent v42 = v41.createShowAdminSupportIntent(v25, 0);
																	if ( != 0) {
																		Intent v43 = AccountManagerService.getDefaultCantAddAccountIntent(101);
																		long v44 = IAccountManager$Stub.clearCallingIdentity();
																		UserHandle v45 = new UserHandle(v25);
																		this.mContext.startActivityAsUser(, v45);
																		IAccountManager$Stub.restoreCallingIdentity(v44);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				boolean v26 = p0.canUserModifyAccounts(v25, v24);
				if (v26 != 0) {
					boolean v27 = p0.canUserModifyAccountsForType(v25, p2, v24);
					if (v27 != 0) {
						p1.onError(101, "User cannot modify accounts of this type (policy).");
						p0.showCantAddAccount(101, v25);
						return;
					}
				}
			}
		}
	}
}
