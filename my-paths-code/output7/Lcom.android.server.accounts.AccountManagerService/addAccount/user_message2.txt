The method addAccount has the following code snippet:

This is path 1 for the API with depth 2:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v28 == 0) {
					boolean v29 = v28.isActiveProfileOwner(p2);
					if (v29 != 0) {
						boolean v30 = v28.isActiveDeviceOwner(p2);
						if (v30 == 0) {
							boolean v27 = ;
							if (v27 == 0) {
								UserManager v31 = AccountManagerService.getUserManager();
								UserHandle v32 = new UserHandle(v25);
								Bundle v34 = v31.getUserRestrictions(v32);
								boolean v35 = v34.getBoolean("no_modify_accounts");
								if (v35 == 0) {
									boolean v26 = 0;
									if (v26 != 0) {
										Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v38 == 0) {
											boolean v39 = v38.isActiveProfileOwner(p3);
											if (v39 != 0) {
												boolean v40 = v38.isActiveDeviceOwner(p3);
												if (v40 == 0) {
													boolean v37 = ;
													if (v37 == 0) {
														Object v41 = this.mContext.getSystemService("device_policy");
														String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
														if (v42 != 0) {
															if ( >= v42.length) {
																boolean v43 = v42[].equals(p2);
																if (v43 == 0) {
																	if ( >= v42.length) {
																		boolean v44 = v42[].equals(p2);
																		if (v44 == 0) {
																			boolean v36 = 0;
																			if (v36 != 0) {
																				int v46 = Binder.getCallingPid();
																				int v47 = Binder.getCallingUid();
																				if (p6 != 0) {
																					Bundle v48 = new Bundle();
																					.putInt("callerUid", v47);
																					.putInt("callerPid", v46);
																					long v52 = IAccountManager$Stub.clearCallingIdentity();
																					AccountManagerService$UserAccounts v54 = AccountManagerService.getUserAccountsNotChecked(p7);
																					AccountManagerService$UserAccounts v53 = v54;
																					AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v53, v47);
																					AccountManagerService$9 v57 = new AccountManagerService$9(AccountManagerService,v53,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																					if (v60 == 0) {
																						boolean v67 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																						if (v67 != 0) {
																							String v71 = AccountManagerService$Session.toDebugString();
																							AccountManagerService$Session.onError(1, "bind failure");
																							IAccountManager$Stub.restoreCallingIdentity(v52);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v28 == 0) {
					boolean v29 = v28.isActiveProfileOwner(p2);
					if (v29 != 0) {
						boolean v30 = v28.isActiveDeviceOwner(p2);
						if (v30 == 0) {
							boolean v27 = ;
							if (v27 == 0) {
								UserManager v31 = AccountManagerService.getUserManager();
								UserHandle v32 = new UserHandle(v25);
								Bundle v34 = v31.getUserRestrictions(v32);
								boolean v35 = v34.getBoolean("no_modify_accounts");
								if (v35 == 0) {
									boolean v26 = 1;
									if (v26 != 0) {
										Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v38 == 0) {
											boolean v39 = v38.isActiveProfileOwner(p3);
											if (v39 != 0) {
												boolean v40 = v38.isActiveDeviceOwner(p3);
												if (v40 == 0) {
													boolean v37 = ;
													if (v37 == 0) {
														Object v41 = this.mContext.getSystemService("device_policy");
														String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
														if (v42 != 0) {
															if ( >= v42.length) {
																boolean v43 = v42[].equals(p2);
																if (v43 == 0) {
																	if ( >= v42.length) {
																		boolean v44 = v42[].equals(p2);
																		if (v44 == 0) {
																			boolean v36 = 0;
																			if (v36 != 0) {
																				int v46 = Binder.getCallingPid();
																				int v47 = Binder.getCallingUid();
																				if (p6 != 0) {
																					Bundle v48 = new Bundle();
																					.putInt("callerUid", v47);
																					.putInt("callerPid", v46);
																					long v52 = IAccountManager$Stub.clearCallingIdentity();
																					AccountManagerService$UserAccounts v54 = AccountManagerService.getUserAccountsNotChecked(p7);
																					AccountManagerService$UserAccounts v53 = v54;
																					AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v53, v47);
																					AccountManagerService$9 v57 = new AccountManagerService$9(AccountManagerService,v53,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																					if (v60 == 0) {
																						boolean v67 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																						if (v67 != 0) {
																							String v71 = AccountManagerService$Session.toDebugString();
																							AccountManagerService$Session.onError(1, "bind failure");
																							IAccountManager$Stub.restoreCallingIdentity(v52);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v28 == 0) {
					boolean v29 = v28.isActiveProfileOwner(p2);
					if (v29 != 0) {
						boolean v30 = v28.isActiveDeviceOwner(p2);
						if (v30 == 0) {
							boolean v27 = ;
							if (v27 == 0) {
								UserManager v31 = AccountManagerService.getUserManager();
								UserHandle v32 = new UserHandle(v25);
								Bundle v34 = v31.getUserRestrictions(v32);
								boolean v35 = v34.getBoolean("no_modify_accounts");
								if (v35 == 0) {
									boolean v26 = 0;
									if (v26 != 0) {
										Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v38 == 0) {
											boolean v39 = v38.isActiveProfileOwner(p3);
											if (v39 != 0) {
												boolean v40 = v38.isActiveDeviceOwner(p3);
												if (v40 == 0) {
													boolean v37 = ;
													if (v37 == 0) {
														Object v41 = this.mContext.getSystemService("device_policy");
														String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
														if (v42 != 0) {
															if ( >= v42.length) {
																boolean v43 = v42[].equals(p2);
																if (v43 == 0) {
																	if ( >= v42.length) {
																		boolean v36 = 1;
																		if (v36 != 0) {
																			int v45 = Binder.getCallingPid();
																			int v46 = Binder.getCallingUid();
																			if (p6 != 0) {
																				Bundle v47 = new Bundle();
																				.putInt("callerUid", v46);
																				.putInt("callerPid", v45);
																				long v51 = IAccountManager$Stub.clearCallingIdentity();
																				AccountManagerService$UserAccounts v53 = AccountManagerService.getUserAccountsNotChecked(p7);
																				AccountManagerService$UserAccounts v52 = v53;
																				AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v52, v46);
																				AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																				if (v59 == 0) {
																					boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																					if (v66 != 0) {
																						String v70 = AccountManagerService$Session.toDebugString();
																						AccountManagerService$Session.onError(1, "bind failure");
																						IAccountManager$Stub.restoreCallingIdentity(v51);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Bundle v1 = Bundle.setDefusable(p6, 1);\nString v12 = Arrays.toString(p4);\nint v17 = Binder.getCallingUid();\nAccountManagerService$UserAccounts v54 = AccountManagerService.getUserAccountsNotChecked(p7);\nAccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v53, v47);\nAccountManagerService$9 v57 = new AccountManagerService$9(AccountManagerService,v53,p1,p2,p5,1,0,0,1,p3,p4,,p2);', 'Bundle v1 = Bundle.setDefusable(p6, 1);\nString v12 = Arrays.toString(p4);\nint v17 = Binder.getCallingUid();\nUserManager v28 = AccountManagerService.getUserManager();\nUserHandle v29 = new UserHandle(v25);\nBundle v31 = v28.getUserRestrictions(v29);', 'Bundle v1 = Bundle.setDefusable(p6, 1);\nString v12 = Arrays.toString(p4);\nint v17 = Binder.getCallingUid();\nboolean v26 = p0.canUserModifyAccounts(v25, v24);\np1.onError(101, "User cannot modify accounts of this type (policy).");']

The method addAccount has the following similar APIs:

- API Name: startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.8925549983978271
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v1 = Bundle.setDefusable(p5, 1);
AccountManagerService$UserAccounts v27 = p0.getUserAccounts(v22);
AccountManagerService$14 v28 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);

- API Name: startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.8917831182479858
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v1 = Bundle.setDefusable(p5, 1);
AccountManagerService$14 v29 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);

