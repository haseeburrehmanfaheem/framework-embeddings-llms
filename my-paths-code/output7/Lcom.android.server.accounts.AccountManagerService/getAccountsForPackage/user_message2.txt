The method getAccountsForPackage has the following code snippet:

This is path 1 for the API with depth 2:
public Account getAccountsForPackage(String p1, int p2, String p3){
	if (v2 == 0) {
		int v3 = UserHandle.getCallingUserId();
		if (v23 != 0) {
			if (0 == 0) {
				boolean v24 = v22.contains(0);
				if (v24 == 0) {
					List v26 = AccountManagerService.getTypesForCaller(, p2, 1);
					List v25 = v26;
					boolean v27 = v25.isEmpty();
					if (v27 != 0) {
						if (0 == 0) {
							boolean v28 = v25.contains(0);
							if (v28 != 0) {
								Account v4 = this.EMPTY_ACCOUNT_ARRAY;
								return v4;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Account getAccountsForPackage(String p1, int p2, String p3){
	if (v2 == 0) {
		int v3 = UserHandle.getCallingUserId();
		if (v23 != 0) {
			if (0 == 0) {
				boolean v24 = v22.contains(0);
				if (v24 == 0) {
					List v26 = AccountManagerService.getTypesForCaller(, p2, 1);
					List v25 = v26;
					boolean v27 = v25.isEmpty();
					if (v27 != 0) {
						if (0 == 0) {
							boolean v28 = v25.contains(0);
							if (v28 != 0) {
								boolean v29 = v25.contains(0);
								if (v29 == 0) {
									ArrayList v30 = new ArrayList();
									boolean v32 = v30.add(0);
									long v33 = IAccountManager$Stub.clearCallingIdentity();
									AccountManagerService$UserAccounts v35 = AccountManagerService.getUserAccountsNotChecked(p2);
									AccountManagerService$UserAccounts v34 = v35;
									ArrayList v37 = new ArrayList();
									Iterator v39 = .iterator();
									boolean v40 = v39.hasNext();
									if (v40 == 0) {
										Object v41 = v39.next();
										Account v42 = AccountManagerService.getAccountsFromCache(v34, v41, , , p6);
										if (v42 == 0) {
											List v43 = Arrays.asList(v42);
											boolean v44 = v37.addAll(v43);
											boolean v45 = v39.hasNext();
											if (v45 == 0) {
												int v46 = v37.size();
												Account v47 = new Account(v46);
												int v48 = v37.size();
												if ( >= v48) {
													Object v49 = v37.get();
													int v50 = v37.size();
													if ( >= v50) {
														Account v36 = v47;
														IAccountManager$Stub.restoreCallingIdentity(v33);
														Account v4 = v36;
														return v4;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = UserHandle.getCallingUserId();\nAccount v4 = p0.getAccountsAsUserForPackage(0, v3, p1, p2, p3, 1);\nreturn v4;']

The method getAccountsForPackage has the following similar APIs:

- API Name: getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.8383013606071472
  - Access Control Level: SYS_OR_SIG and the following code:
Account v8 = p0.getAccountsAsUserForPackage(p1, v2, p2, v4, p3, 0);
return v8;

- API Name: getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.7988088726997375
  - Access Control Level: SYS_OR_SIG and the following code:
Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);

