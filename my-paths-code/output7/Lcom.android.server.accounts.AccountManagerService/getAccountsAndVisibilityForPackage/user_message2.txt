The method getAccountsAndVisibilityForPackage has the following code snippet:

This is path 1 for the API with depth 2:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	if (v13 == 0) {
		Object v14 = v12.next();
		if (v3 != 0) {
			boolean v15 = v10.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v1, 16);
			if (v15 == 0) {
				boolean v16 = v5.add(AuthenticatorDescription.type);
				boolean v17 = v12.hasNext();
				if (v17 == 0) {
					List v4 = v5;
					if (p2 == 0) {
						boolean v18 = v4.contains(p2);
						if (v18 == 0) {
							if (p2 != 0) {
								if (v3 == 0) {
									if (p2 == 0) {
										ArrayList v19 = new ArrayList();
										boolean v21 = v19.add(p2);
										long v22 = IAccountManager$Stub.clearCallingIdentity();
										Object v25 = this.mUsers.get(p1);
										if (v25 != 0) {
											boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
											if (v26 != 0) {
												boolean v27 = this.mLocalUnlockedUsers.get(p1);
												if (v27 == 0) {
													File v35 = new File(v36);
													String v36 = this.mInjector.getCeDatabaseName(p1);
													AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
													AccountManagerService.syncDeCeAccountsLocked();
													if ( == 0) {
														AccountManagerService.validateAccountsInternal(, 1);
														AccountManagerService$UserAccounts v24 = ;
														AccountManagerService$UserAccounts v23 = v24;
														Integer v41 = Integer.valueOf(v1);
														int v43 = this.userId;
														long v45 = IAccountManager$Stub.clearCallingIdentity();
														int v46 = this.mPackageManager.getPackageUidAsUser(p1, v43);
														IAccountManager$Stub.restoreCallingIdentity(v45);
														boolean v44 = 0;
														if (v44 != 0) {
															LinkedHashMap v48 = new LinkedHashMap();
															Iterator v50 = .iterator();
															boolean v51 = v50.hasNext();
															if (v51 == 0) {
																Object v52 = v50.next();
																Object v53 = AccountManagerService$UserAccounts.accountCache.get(v52);
																if (v53 == 0) {
																	if ( >= v53.length) {
																		Object v55 = Objects.requireNonNull(p1, "packageName cannot be null");
																		long v56 = IAccountManager$Stub.clearCallingIdentity();
																		int v57 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																		int v58 = this.mPackageManager.getPackageUidAsUser(p1, v57);
																		IAccountManager$Stub.restoreCallingIdentity(v56);
																		String v63 = caughtException.getMessage();
																		Integer v67 = Integer.valueOf(3);
																		Integer v54 = v67;
																		Object v68 = v48.put(v53[], v54);
																		if ( >= v53.length) {
																			boolean v69 = v50.hasNext();
																			if (v69 == 0) {
																				int v70 = v41.intValue();
																				UserManager v72 = AccountManagerService.getUserManager();
																				if (v72 == 0) {
																					if (p4 == 0) {
																						int v73 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																						if (v73 < 0) {
																							if (v70 != 1000) {
																								UserManager v74 = AccountManagerService.getUserManager();
																								int v75 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																								UserInfo v76 = v74.getUserInfo(v75);
																								if (v76 == 0) {
																									boolean v77 = v76.isRestricted();
																									if (v77 == 0) {
																										String v78 = this.mPackageManager.getPackagesForUid(v70);
																										if (v78 != 0) {
																											String v79 = new String(0);
																											Resources v80 = this.mContext.getResources();
																											String v81 = v80.getString(17039884);
																											if ( >= .length) {
																												StringBuilder v82 = new StringBuilder();
																												StringBuilder v84 = v82.append(";");
																												StringBuilder v85 = v82.append([]);
																												StringBuilder v86 = v82.append(";");
																												String v87 = v82.toString();
																												boolean v88 = v81.contains(v87);
																												if (v88 == 0) {
																													if ( >= .length) {
																														StringBuilder v89 = new StringBuilder();
																														StringBuilder v91 = v89.append(";");
																														StringBuilder v92 = v89.append([]);
																														StringBuilder v93 = v89.append(";");
																														String v94 = v89.toString();
																														boolean v95 = v81.contains(v94);
																														if (v95 == 0) {
																															Map v71 = v48;
																															Map v42 = v71;
																															IAccountManager$Stub.restoreCallingIdentity(v22);
																															return v42;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	if (v13 == 0) {
		Object v14 = v12.next();
		if (v3 != 0) {
			boolean v15 = v10.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v1, 16);
			if (v15 == 0) {
				boolean v16 = v5.add(AuthenticatorDescription.type);
				boolean v17 = v12.hasNext();
				if (v17 == 0) {
					List v4 = v5;
					if (p2 == 0) {
						boolean v18 = v4.contains(p2);
						if (v18 == 0) {
							if (p2 != 0) {
								if (v3 == 0) {
									if (p2 == 0) {
										ArrayList v19 = new ArrayList();
										boolean v21 = v19.add(p2);
										long v22 = IAccountManager$Stub.clearCallingIdentity();
										Object v25 = this.mUsers.get(p1);
										if (v25 != 0) {
											boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
											if (v26 != 0) {
												boolean v27 = this.mLocalUnlockedUsers.get(p1);
												if (v27 == 0) {
													File v35 = new File(v36);
													String v36 = this.mInjector.getCeDatabaseName(p1);
													AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
													AccountManagerService.syncDeCeAccountsLocked();
													if ( == 0) {
														AccountManagerService.validateAccountsInternal(, 1);
														AccountManagerService$UserAccounts v24 = ;
														AccountManagerService$UserAccounts v23 = v24;
														Integer v41 = Integer.valueOf(v1);
														int v43 = this.userId;
														long v45 = IAccountManager$Stub.clearCallingIdentity();
														int v46 = this.mPackageManager.getPackageUidAsUser(p1, v43);
														IAccountManager$Stub.restoreCallingIdentity(v45);
														boolean v44 = 0;
														if (v44 != 0) {
															LinkedHashMap v48 = new LinkedHashMap();
															Iterator v50 = .iterator();
															boolean v51 = v50.hasNext();
															if (v51 == 0) {
																Object v52 = v50.next();
																Object v53 = AccountManagerService$UserAccounts.accountCache.get(v52);
																if (v53 == 0) {
																	if ( >= v53.length) {
																		Object v55 = Objects.requireNonNull(p1, "packageName cannot be null");
																		long v56 = IAccountManager$Stub.clearCallingIdentity();
																		int v57 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																		int v58 = this.mPackageManager.getPackageUidAsUser(p1, v57);
																		IAccountManager$Stub.restoreCallingIdentity(v56);
																		String v63 = caughtException.getMessage();
																		Integer v67 = Integer.valueOf(3);
																		Integer v54 = v67;
																		Object v68 = v48.put(v53[], v54);
																		if ( >= v53.length) {
																			boolean v69 = v50.hasNext();
																			if (v69 == 0) {
																				int v70 = v41.intValue();
																				UserManager v72 = AccountManagerService.getUserManager();
																				if (v72 == 0) {
																					if (p4 == 0) {
																						int v73 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																						if (v73 < 0) {
																							if (v70 != 1000) {
																								UserManager v74 = AccountManagerService.getUserManager();
																								int v75 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																								UserInfo v76 = v74.getUserInfo(v75);
																								if (v76 == 0) {
																									boolean v77 = v76.isRestricted();
																									if (v77 == 0) {
																										String v78 = this.mPackageManager.getPackagesForUid(v70);
																										if (v78 != 0) {
																											String v79 = new String(0);
																											Resources v80 = this.mContext.getResources();
																											String v81 = v80.getString(17039884);
																											if ( >= .length) {
																												int v82 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																												Account v83 = AccountManagerService.getSharedAccountsAsUser(v82);
																												boolean v84 = ArrayUtils.isEmpty(v83);
																												if (v84 == 0) {
																													if (p1 == 0) {
																														PackageInfo v85 = this.mPackageManager.getPackageInfo(p1, 0);
																														String v89 = caughtException.getMessage();
																														LinkedHashMap v93 = new LinkedHashMap();
																														Set v95 = v48.entrySet();
																														Iterator v96 = v95.iterator();
																														boolean v97 = v96.hasNext();
																														if (v97 == 0) {
																															Map v71 = v93;
																															Map v42 = v71;
																															IAccountManager$Stub.restoreCallingIdentity(v22);
																															return v42;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	if (v13 == 0) {
		Object v14 = v12.next();
		if (v3 != 0) {
			boolean v15 = v10.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v1, 16);
			if (v15 == 0) {
				boolean v16 = v5.add(AuthenticatorDescription.type);
				boolean v17 = v12.hasNext();
				if (v17 == 0) {
					List v4 = v5;
					if (p2 == 0) {
						boolean v18 = v4.contains(p2);
						if (v18 == 0) {
							if (p2 != 0) {
								if (v3 == 0) {
									if (p2 == 0) {
										ArrayList v19 = new ArrayList();
										boolean v21 = v19.add(p2);
										long v22 = IAccountManager$Stub.clearCallingIdentity();
										Object v25 = this.mUsers.get(p1);
										if (v25 != 0) {
											File v26 = new File(v27);
											String v27 = this.mInjector.getPreNDatabaseName(p1);
											File v29 = new File(v30);
											String v30 = this.mInjector.getDeDatabaseName(p1);
											AccountManagerService$UserAccounts v32 = new AccountManagerService$UserAccounts(this.mContext,p1,v26,v29);
											this.mUsers.append(p1, v32);
											AccountManagerService.purgeOldGrants(v32);
											AccountManager.invalidateLocalAccountsDataCaches();
											boolean v37 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
											if (v37 != 0) {
												boolean v38 = this.mLocalUnlockedUsers.get(p1);
												if (v38 == 0) {
													if ( == 0) {
														AccountManagerService.validateAccountsInternal(, 1);
														AccountManagerService$UserAccounts v24 = ;
														AccountManagerService$UserAccounts v23 = v24;
														Integer v40 = Integer.valueOf(v1);
														int v42 = this.userId;
														long v44 = IAccountManager$Stub.clearCallingIdentity();
														int v45 = this.mPackageManager.getPackageUidAsUser(p1, v42);
														IAccountManager$Stub.restoreCallingIdentity(v44);
														boolean v43 = 0;
														if (v43 != 0) {
															LinkedHashMap v47 = new LinkedHashMap();
															Iterator v49 = .iterator();
															boolean v50 = v49.hasNext();
															if (v50 == 0) {
																Object v51 = v49.next();
																Object v52 = AccountManagerService$UserAccounts.accountCache.get(v51);
																if (v52 == 0) {
																	if ( >= v52.length) {
																		Object v54 = Objects.requireNonNull(p1, "packageName cannot be null");
																		long v55 = IAccountManager$Stub.clearCallingIdentity();
																		int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																		int v57 = this.mPackageManager.getPackageUidAsUser(p1, v56);
																		IAccountManager$Stub.restoreCallingIdentity(v55);
																		String v62 = caughtException.getMessage();
																		Integer v66 = Integer.valueOf(3);
																		Integer v53 = v66;
																		Object v67 = v47.put(v52[], v53);
																		if ( >= v52.length) {
																			boolean v68 = v49.hasNext();
																			if (v68 == 0) {
																				int v69 = v40.intValue();
																				UserManager v71 = AccountManagerService.getUserManager();
																				if (v71 == 0) {
																					if (p4 == 0) {
																						int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																						if (v72 < 0) {
																							if (v69 != 1000) {
																								UserManager v73 = AccountManagerService.getUserManager();
																								int v74 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
																								UserInfo v75 = v73.getUserInfo(v74);
																								if (v75 == 0) {
																									boolean v76 = v75.isRestricted();
																									if (v76 == 0) {
																										String v77 = this.mPackageManager.getPackagesForUid(v69);
																										if (v77 != 0) {
																											String v78 = new String(0);
																											Resources v79 = this.mContext.getResources();
																											String v80 = v79.getString(17039884);
																											if ( >= .length) {
																												StringBuilder v81 = new StringBuilder();
																												StringBuilder v83 = v81.append(";");
																												StringBuilder v84 = v81.append([]);
																												StringBuilder v85 = v81.append(";");
																												String v86 = v81.toString();
																												boolean v87 = v80.contains(v86);
																												if (v87 == 0) {
																													if ( >= .length) {
																														StringBuilder v88 = new StringBuilder();
																														StringBuilder v90 = v88.append(";");
																														StringBuilder v91 = v88.append([]);
																														StringBuilder v92 = v88.append(";");
																														String v93 = v88.toString();
																														boolean v94 = v80.contains(v93);
																														if (v94 == 0) {
																															Map v70 = v47;
																															Map v41 = v70;
																															IAccountManager$Stub.restoreCallingIdentity(v22);
																															return v41;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Collection v8 = this.mAuthenticatorCache.getAllServices(v2);\nArrayList v5 = new ArrayList();\nboolean v15 = v5.add(AuthenticatorDescription.type);', 'AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v2);\nInteger v24 = Integer.valueOf(v1);\nMap v28 = new LinkedHashMap();', 'List v4 = p0.getTypesForCaller(v1, v2, v3);\nAccountManagerService$UserAccounts v10 = p0.getUserAccounts(v2);\nMap v12 = p0.getAccountsAndVisibilityForPackage(p1, , v11, v10);']

The method getAccountsAndVisibilityForPackage has the following similar APIs:

- API Name: getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8605039715766907
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
Iterator v29 = v28.iterator();
Object v31 = v29.next();
Account v33 = new Account();
System.arraycopy(v37, 0, v33, , v37.length);
Bundle v43 = new Bundle();
v43.putString("authAccount", Account.name);
v43.putString("accountType", Account.type);
AccountManagerService.onResult(p1, v43);

- API Name: onAccountAccessed(Ljava/lang/String;)V with Similarity Score: 0.8588724732398987
  - Access Control Level: SYS_OR_SIG and the following code:
List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1);
Account v21 = AccountManagerService.getAccountsFromCache(v13, v20, v7, p2, 0);
ArrayList v16 = new ArrayList();

