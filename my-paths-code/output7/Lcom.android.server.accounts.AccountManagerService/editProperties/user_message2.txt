The method editProperties has the following code snippet:

This is path 1 for the API with depth 2:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v14 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				if (p2 != 0) {
					List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v20 = v21;
					boolean v22 = v20.contains(p2);
					boolean v19 = v22;
					if (v19 != 0) {
						boolean v23 = p0.isSystemUid(v1);
						if (v23 == 0) {
							long v24 = IAccountManager$Stub.clearCallingIdentity();
							Object v27 = this.mUsers.get(p1);
							if (v27 != 0) {
								boolean v28 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v28 != 0) {
									boolean v29 = this.mLocalUnlockedUsers.get(p1);
									if (v29 == 0) {
										File v37 = new File(v38);
										String v38 = this.mInjector.getCeDatabaseName(p1);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v37);
										AccountManagerService.syncDeCeAccountsLocked();
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v26 = ;
											AccountManagerService$UserAccounts v25 = v26;
											AccountManagerService$16 v43 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
											if (v46 == 0) {
												IAccountAuthenticatorCache v54 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
												AuthenticatorDescription v55 = AuthenticatorDescription.newKey(this.mAccountType);
												int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												RegisteredServicesCache$ServiceInfo v57 = v54.getServiceInfo(v55, v56);
												if (v57 != 0) {
													int v58 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v59 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v58);
													if (v59 != 0) {
														if (ComponentInfo.directBootAware != 0) {
															Intent v60 = new Intent();
															Intent v62 = v60.setAction("android.accounts.AccountAuthenticator");
															Intent v63 = v60.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
															if (v64 == 0) {
																IAccountAuthenticatorCache v71 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																boolean v73 = v71.getBindInstantServiceAllowed(v72);
																if (v73 == 0) {
																	int v74 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	UserHandle v75 = UserHandle.of(v74);
																	boolean v76 = AccountManagerService.mContext.bindServiceAsUser(v60, AccountManagerService$Session, , v75);
																	if (v76 != 0) {
																		if (v77 == 0) {
																			boolean v53 = 0;
																			if (v53 != 0) {
																				long v82 = SystemClock.elapsedRealtime();
																				String v83 = AccountManagerService$Session.toDebugString(v82);
																				String v81 = v83;
																				this.mNumErrors = (this.mNumErrors + 1);
																				IAccountManagerResponse v88 = AccountManagerService$Session.getResponseAndClose();
																				if (v88 == 0) {
																					if (v89 == 0) {
																						Class v92 = AccountManagerService$Session.getClass();
																						String v93 = v92.getSimpleName();
																						v88.onError(1, "bind failure");
																						if (v100 == 0) {
																							IAccountManager$Stub.restoreCallingIdentity(v24);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v14 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				if (p2 != 0) {
					List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v20 = v21;
					boolean v22 = v20.contains(p2);
					boolean v19 = v22;
					if (v19 != 0) {
						boolean v23 = p0.isSystemUid(v1);
						if (v23 == 0) {
							long v24 = IAccountManager$Stub.clearCallingIdentity();
							Object v27 = this.mUsers.get(p1);
							if (v27 != 0) {
								boolean v28 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v28 != 0) {
									boolean v29 = this.mLocalUnlockedUsers.get(p1);
									if (v29 == 0) {
										File v37 = new File(v38);
										String v38 = this.mInjector.getCeDatabaseName(p1);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v37);
										AccountManagerService.syncDeCeAccountsLocked();
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v26 = ;
											AccountManagerService$UserAccounts v25 = v26;
											AccountManagerService$16 v43 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
											if (v46 == 0) {
												IAccountAuthenticatorCache v54 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
												AuthenticatorDescription v55 = AuthenticatorDescription.newKey(this.mAccountType);
												int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												RegisteredServicesCache$ServiceInfo v57 = v54.getServiceInfo(v55, v56);
												if (v57 != 0) {
													int v58 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v59 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v58);
													if (v59 != 0) {
														if (ComponentInfo.directBootAware != 0) {
															Intent v60 = new Intent();
															Intent v62 = v60.setAction("android.accounts.AccountAuthenticator");
															Intent v63 = v60.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
															if (v64 == 0) {
																IAccountAuthenticatorCache v71 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																boolean v73 = v71.getBindInstantServiceAllowed(v72);
																if (v73 == 0) {
																	int v74 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	UserHandle v75 = UserHandle.of(v74);
																	boolean v76 = AccountManagerService.mContext.bindServiceAsUser(v60, AccountManagerService$Session, , v75);
																	if (v76 != 0) {
																		boolean v53 = 1;
																		if (v53 != 0) {
																			long v81 = SystemClock.elapsedRealtime();
																			String v82 = AccountManagerService$Session.toDebugString(v81);
																			String v80 = v82;
																			this.mNumErrors = (this.mNumErrors + 1);
																			IAccountManagerResponse v87 = AccountManagerService$Session.getResponseAndClose();
																			if (v87 == 0) {
																				if (v88 == 0) {
																					Class v91 = AccountManagerService$Session.getClass();
																					String v92 = v91.getSimpleName();
																					v87.onError(1, "bind failure");
																					if (v99 == 0) {
																						IAccountManager$Stub.restoreCallingIdentity(v24);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v14 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				if (p2 != 0) {
					List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v20 = v21;
					boolean v22 = v20.contains(p2);
					boolean v19 = v22;
					if (v19 != 0) {
						boolean v23 = p0.isSystemUid(v1);
						if (v23 == 0) {
							long v24 = IAccountManager$Stub.clearCallingIdentity();
							Object v27 = this.mUsers.get(p1);
							if (v27 != 0) {
								File v28 = new File(v29);
								String v29 = this.mInjector.getPreNDatabaseName(p1);
								File v31 = new File(v32);
								String v32 = this.mInjector.getDeDatabaseName(p1);
								AccountManagerService$UserAccounts v34 = new AccountManagerService$UserAccounts(this.mContext,p1,v28,v31);
								this.mUsers.append(p1, v34);
								AccountManagerService.purgeOldGrants(v34);
								AccountManager.invalidateLocalAccountsDataCaches();
								boolean v39 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v39 != 0) {
									boolean v40 = this.mLocalUnlockedUsers.get(p1);
									if (v40 == 0) {
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v26 = ;
											AccountManagerService$UserAccounts v25 = v26;
											AccountManagerService$16 v42 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
											if (v45 == 0) {
												IAccountAuthenticatorCache v53 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
												AuthenticatorDescription v54 = AuthenticatorDescription.newKey(this.mAccountType);
												int v55 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
												RegisteredServicesCache$ServiceInfo v56 = v53.getServiceInfo(v54, v55);
												if (v56 != 0) {
													int v57 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v58 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v57);
													if (v58 != 0) {
														if (ComponentInfo.directBootAware != 0) {
															Intent v59 = new Intent();
															Intent v61 = v59.setAction("android.accounts.AccountAuthenticator");
															Intent v62 = v59.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
															if (v63 == 0) {
																IAccountAuthenticatorCache v70 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																int v71 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																boolean v72 = v70.getBindInstantServiceAllowed(v71);
																if (v72 == 0) {
																	int v73 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																	UserHandle v74 = UserHandle.of(v73);
																	boolean v75 = AccountManagerService.mContext.bindServiceAsUser(v59, AccountManagerService$Session, , v74);
																	if (v75 != 0) {
																		if (v76 == 0) {
																			boolean v52 = 0;
																			if (v52 != 0) {
																				long v81 = SystemClock.elapsedRealtime();
																				String v82 = AccountManagerService$Session.toDebugString(v81);
																				String v80 = v82;
																				this.mNumErrors = (this.mNumErrors + 1);
																				IAccountManagerResponse v87 = AccountManagerService$Session.getResponseAndClose();
																				if (v87 == 0) {
																					if (v88 == 0) {
																						Class v91 = AccountManagerService$Session.getClass();
																						String v92 = v91.getSimpleName();
																						v87.onError(1, "bind failure");
																						if (v99 == 0) {
																							IAccountManager$Stub.restoreCallingIdentity(v24);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nAccountManagerService$16 v43 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);\nsyncDeCeAccountsLocked();\nvalidateAccountsInternal();', 'List v20 = AccountManagerService.getTypesManagedByCaller(v1, v18);\nAccountManagerService$16 v34 = new AccountManagerService$16(p0,v32,p1,p2,p3,1,0,0,p2);', 'boolean v19 = p0.isAccountManagedByCaller(p2, v1, v18);\nAccountManagerService$16 v23 = new AccountManagerService$16(p0,v22,p1,p2,p3,1,0,0,p2);\nv23.bind();']

The method editProperties has the following similar APIs:

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V with Similarity Score: 0.8725858330726624
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
v22.bind();

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.8609672784805298
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v17);
AccountManagerService$15 v20 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
v20.bind();

