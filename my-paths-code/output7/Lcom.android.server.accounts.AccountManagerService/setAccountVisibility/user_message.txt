This is path 1 for the API with depth 2:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(p1);
				if (v13 != 0) {
					boolean v14 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v14 != 0) {
						boolean v15 = this.mLocalUnlockedUsers.get(p1);
						if (v15 == 0) {
							File v23 = new File(v24);
							String v24 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v23);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v12 = ;
								AccountManagerService$UserAccounts v11 = v12;
								if (1 == 0) {
									boolean v31 = "android:accounts:key_legacy_visible".equals(p2);
									if (v31 != 0) {
										boolean v32 = "android:accounts:key_legacy_not_visible".equals(p2);
										if (v32 == 0) {
											boolean v30 = ;
											if (v30 == 0) {
												HashSet v34 = new HashSet();
												Map v36 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p5);
												String v37 = new String(2);
												if ( >= 2) {
													Map v38 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p5);
													Object v39 = v38.get(v37[]);
													if (v39 == 0) {
														Set v40 = v39.keySet();
														boolean v41 = v34.addAll(v40);
														if ( >= 2) {
															HashMap v42 = new HashMap();
															Iterator v44 = v34.iterator();
															boolean v45 = v44.hasNext();
															if (v45 == 0) {
																Object v46 = v44.next();
																Integer v47 = AccountManagerService.resolveAccountVisibility(p1, v46, p5);
																Object v48 = v42.put(v46, v47);
																boolean v49 = v44.hasNext();
																if (v49 == 0) {
																	Map v33 = v42;
																	Intent v51 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																	Intent v53 = v51.setFlags(16777216);
																	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																	List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
																	ArrayList v56 = new ArrayList();
																	if (v55 != 0) {
																		Iterator v58 = v55.iterator();
																		boolean v59 = v58.hasNext();
																		if (v59 == 0) {
																			Object v60 = v58.next();
																			Integer v61 = AccountManagerService.resolveAccountVisibility(p1, ApplicationInfo.packageName, p5);
																			int v62 = v61.intValue();
																			if (v62 == 1) {
																				if (v62 != 2) {
																					boolean v63 = v56.add(ApplicationInfo.packageName);
																					boolean v64 = v58.hasNext();
																					if (v64 == 0) {
																						List v50 = v56;
																						long v66 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
																						if ((v66 < 0) >= 0) {
																							StrictMode$ThreadPolicy v67 = StrictMode.allowThreadDiskWrites();
																							boolean v68 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v66, p2, p3);
																							if (v68 != 0) {
																								StrictMode.setThreadPolicy(v67);
																								Map v70 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
																								Integer v71 = Integer.valueOf(p3);
																								Object v72 = v70.put(p2, v71);
																								AccountManager.invalidateLocalAccountsDataCaches();
																								boolean v65 = 1;
																								if (v65 != 0) {
																									if (1 == 0) {
																										Set v74 = .entrySet();
																										Iterator v75 = v74.iterator();
																										boolean v76 = v75.hasNext();
																										if (v76 == 0) {
																											Object v77 = v75.next();
																											Object v78 = v77.getValue();
																											int v79 = v78.intValue();
																											Object v81 = Objects.requireNonNull(p2, "packageName cannot be null");
																											long v82 = IAccountManager$Stub.clearCallingIdentity();
																											int v83 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																											int v84 = this.mPackageManager.getPackageUidAsUser(p2, v83);
																											IAccountManager$Stub.restoreCallingIdentity(v82);
																											String v89 = caughtException.getMessage();
																											Integer v93 = Integer.valueOf(3);
																											Integer v80 = v93;
																											int v94 = v80.intValue();
																											if (v79 == 1) {
																												if (v79 != 2) {
																													boolean v95 = ;
																													if (v94 == 1) {
																														if (v94 != 2) {
																															boolean v96 = ;
																															if (v95 == v96) {
																																Object v97 = v77.getKey();
																																Intent v99 = new Intent("android.accounts.action.VISIBLE_ACCOUNTS_CHANGED");
																																Intent v101 = v99.setPackage(v97);
																																Intent v102 = v99.setFlags(1073741824);
																																UserHandle v103 = new UserHandle(v104);
																																int v104 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																																this.mContext.sendBroadcastAsUser(v99, v103);
																																boolean v107 = v75.hasNext();
																																if (v107 == 0) {
																																	Iterator v108 = .iterator();
																																	boolean v109 = v108.hasNext();
																																	if (v109 == 0) {
																																		Object v110 = v108.next();
																																		int v111 = this.userId;
																																		Intent v113 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																																		Intent v115 = v113.setFlags(16777216);
																																		Intent v116 = v113.setPackage(v110);
																																		Intent v117 = v113.putExtra("authAccount", Account.name);
																																		Intent v118 = v113.putExtra("accountType", Account.type);
																																		UserHandle v119 = new UserHandle(v111);
																																		this.mContext.sendBroadcastAsUser(v113, v119);
																																		boolean v122 = v108.hasNext();
																																		if (v122 == 0) {
																																			int v123 = this.userId;
																																			String v128 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																																			UserHandle v132 = new UserHandle(v123);
																																			this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v132);
																																			boolean v29 = 1;
																																			IAccountManager$Stub.restoreCallingIdentity(v10);
																																			return v29;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v6 = AccountManagerService.getTypesManagedByCaller(v3, v4);
		boolean v7 = v6.contains(Account.type);
		boolean v5 = v7;
		if (v5 != 0) {
			long v9 = Binder.clearCallingIdentity();
			String v10 = this.mPackageManager.getPackagesForUid(v3);
			if (v10 == 0) {
				if ( >= v10.length) {
					PackageInfo v11 = this.mPackageManager.getPackageInfo(v10[], 0);
					if ( >= v10.length) {
						PackageInfo v15 = this.mPackageManager.getPackageInfo(v10[], 0);
						if (v15 == 0) {
							if ((ApplicationInfo.flags & 1) == 0) {
								Binder.restoreCallingIdentity(v9);
								boolean v8 = 1;
								if (v8 == 0) {
									long v17 = IAccountManager$Stub.clearCallingIdentity();
									AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v4);
									AccountManagerService$UserAccounts v18 = v19;
									if (1 == 0) {
										boolean v21 = AccountManagerService.isSpecialPackageKey(p2);
										if (v21 == 0) {
											Map v22 = AccountManagerService.getRequestingPackages(p1, v18);
											List v23 = AccountManagerService.getAccountRemovedReceivers(p1, v18);
											boolean v24 = AccountManagerService.updateAccountVisibilityLocked(p1, p2, p3, v18);
											if (v24 != 0) {
												if (1 == 0) {
													Set v25 = .entrySet();
													Iterator v26 = v25.iterator();
													boolean v27 = v26.hasNext();
													if (v27 == 0) {
														Object v28 = v26.next();
														Object v29 = v28.getValue();
														int v30 = v29.intValue();
														Integer v31 = AccountManagerService.resolveAccountVisibility(p1, p2, v18);
														int v32 = v31.intValue();
														boolean v33 = AccountManagerService.isVisible(v30);
														boolean v34 = AccountManagerService.isVisible(v32);
														if (v33 == v34) {
															Object v35 = v28.getKey();
															AccountManagerService.notifyPackage(v35, v18);
															boolean v37 = v26.hasNext();
															if (v37 == 0) {
																Iterator v38 = .iterator();
																boolean v39 = v38.hasNext();
																if (v39 == 0) {
																	Object v40 = v38.next();
																	int v41 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v18);
																	AccountManagerService.sendAccountRemovedBroadcast(p1, v40, v41);
																	boolean v43 = v38.hasNext();
																	if (v43 == 0) {
																		int v44 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v18);
																		AccountManagerService.sendAccountsChangedBroadcast(v44);
																		boolean v20 = 1;
																		IAccountManager$Stub.restoreCallingIdentity(v17);
																		return v20;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);
	if (v5 != 0) {
		boolean v6 = p0.isSystemUid(v3);
		if (v6 == 0) {
			long v7 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);
			boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);
			IAccountManager$Stub.restoreCallingIdentity(v7);
			return v9;
		}
	}
}
