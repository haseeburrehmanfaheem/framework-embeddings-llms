The method setAccountVisibility has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(p1);
				if (v13 != 0) {
					boolean v14 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v14 != 0) {
						boolean v15 = this.mLocalUnlockedUsers.get(p1);
						if (v15 == 0) {
							File v23 = new File(v24);
							String v24 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v23);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v12 = ;
								AccountManagerService$UserAccounts v11 = v12;
								if (1 == 0) {
									boolean v31 = "android:accounts:key_legacy_visible".equals(p2);
									if (v31 != 0) {
										boolean v32 = "android:accounts:key_legacy_not_visible".equals(p2);
										if (v32 == 0) {
											boolean v30 = ;
											if (v30 == 0) {
												HashSet v34 = new HashSet();
												Map v36 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p5);
												String v37 = new String(2);
												if ( >= 2) {
													Map v38 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p5);
													Object v39 = v38.get(v37[]);
													if (v39 == 0) {
														Set v40 = v39.keySet();
														boolean v41 = v34.addAll(v40);
														if ( >= 2) {
															HashMap v42 = new HashMap();
															Iterator v44 = v34.iterator();
															boolean v45 = v44.hasNext();
															if (v45 == 0) {
																Object v46 = v44.next();
																Integer v47 = AccountManagerService.resolveAccountVisibility(p1, v46, p5);
																Object v48 = v42.put(v46, v47);
																boolean v49 = v44.hasNext();
																if (v49 == 0) {
																	Map v33 = v42;
																	Intent v51 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																	Intent v53 = v51.setFlags(16777216);
																	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																	List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
																	ArrayList v56 = new ArrayList();
																	if (v55 != 0) {
																		Iterator v58 = v55.iterator();
																		boolean v59 = v58.hasNext();
																		if (v59 == 0) {
																			Object v60 = v58.next();
																			Integer v61 = AccountManagerService.resolveAccountVisibility(p1, ApplicationInfo.packageName, p5);
																			int v62 = v61.intValue();
																			if (v62 == 1) {
																				if (v62 != 2) {
																					boolean v63 = v56.add(ApplicationInfo.packageName);
																					boolean v64 = v58.hasNext();
																					if (v64 == 0) {
																						List v50 = v56;
																						long v66 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
																						if ((v66 < 0) >= 0) {
																							StrictMode$ThreadPolicy v67 = StrictMode.allowThreadDiskWrites();
																							boolean v68 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v66, p2, p3);
																							if (v68 != 0) {
																								StrictMode.setThreadPolicy(v67);
																								Map v70 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
																								Integer v71 = Integer.valueOf(p3);
																								Object v72 = v70.put(p2, v71);
																								AccountManager.invalidateLocalAccountsDataCaches();
																								boolean v65 = 1;
																								if (v65 != 0) {
																									if (1 == 0) {
																										Set v74 = .entrySet();
																										Iterator v75 = v74.iterator();
																										boolean v76 = v75.hasNext();
																										if (v76 == 0) {
																											Object v77 = v75.next();
																											Object v78 = v77.getValue();
																											int v79 = v78.intValue();
																											Object v81 = Objects.requireNonNull(p2, "packageName cannot be null");
																											long v82 = IAccountManager$Stub.clearCallingIdentity();
																											int v83 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																											int v84 = this.mPackageManager.getPackageUidAsUser(p2, v83);
																											IAccountManager$Stub.restoreCallingIdentity(v82);
																											String v89 = caughtException.getMessage();
																											Integer v93 = Integer.valueOf(3);
																											Integer v80 = v93;
																											int v94 = v80.intValue();
																											if (v79 == 1) {
																												if (v79 != 2) {
																													boolean v95 = ;
																													if (v94 == 1) {
																														if (v94 != 2) {
																															boolean v96 = ;
																															if (v95 == v96) {
																																Object v97 = v77.getKey();
																																Intent v99 = new Intent("android.accounts.action.VISIBLE_ACCOUNTS_CHANGED");
																																Intent v101 = v99.setPackage(v97);
																																Intent v102 = v99.setFlags(1073741824);
																																UserHandle v103 = new UserHandle(v104);
																																int v104 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																																this.mContext.sendBroadcastAsUser(v99, v103);
																																boolean v107 = v75.hasNext();
																																if (v107 == 0) {
																																	Iterator v108 = .iterator();
																																	boolean v109 = v108.hasNext();
																																	if (v109 == 0) {
																																		Object v110 = v108.next();
																																		int v111 = this.userId;
																																		Intent v113 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																																		Intent v115 = v113.setFlags(16777216);
																																		Intent v116 = v113.setPackage(v110);
																																		Intent v117 = v113.putExtra("authAccount", Account.name);
																																		Intent v118 = v113.putExtra("accountType", Account.type);
																																		UserHandle v119 = new UserHandle(v111);
																																		this.mContext.sendBroadcastAsUser(v113, v119);
																																		boolean v122 = v108.hasNext();
																																		if (v122 == 0) {
																																			int v123 = this.userId;
																																			String v128 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																																			UserHandle v132 = new UserHandle(v123);
																																			this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v132);
																																			boolean v29 = 1;
																																			IAccountManager$Stub.restoreCallingIdentity(v10);
																																			return v29;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(p1);
				if (v13 != 0) {
					boolean v14 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v14 != 0) {
						boolean v15 = this.mLocalUnlockedUsers.get(p1);
						if (v15 == 0) {
							File v23 = new File(v24);
							String v24 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v23);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v12 = ;
								AccountManagerService$UserAccounts v11 = v12;
								if (1 == 0) {
									boolean v31 = "android:accounts:key_legacy_visible".equals(p2);
									if (v31 != 0) {
										boolean v32 = "android:accounts:key_legacy_not_visible".equals(p2);
										if (v32 == 0) {
											boolean v30 = ;
											if (v30 == 0) {
												HashSet v34 = new HashSet();
												Map v36 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p5);
												String v37 = new String(2);
												if ( >= 2) {
													Map v38 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p5);
													Object v39 = v38.get(v37[]);
													if (v39 == 0) {
														Set v40 = v39.keySet();
														boolean v41 = v34.addAll(v40);
														if ( >= 2) {
															HashMap v42 = new HashMap();
															Iterator v44 = v34.iterator();
															boolean v45 = v44.hasNext();
															if (v45 == 0) {
																Object v46 = v44.next();
																Integer v47 = AccountManagerService.resolveAccountVisibility(p1, v46, p5);
																Object v48 = v42.put(v46, v47);
																boolean v49 = v44.hasNext();
																if (v49 == 0) {
																	Map v33 = v42;
																	Intent v51 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																	Intent v53 = v51.setFlags(16777216);
																	int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																	List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
																	ArrayList v56 = new ArrayList();
																	if (v55 != 0) {
																		Iterator v58 = v55.iterator();
																		boolean v59 = v58.hasNext();
																		if (v59 == 0) {
																			Object v60 = v58.next();
																			Integer v61 = AccountManagerService.resolveAccountVisibility(p1, ApplicationInfo.packageName, p5);
																			int v62 = v61.intValue();
																			if (v62 == 1) {
																				if (v62 != 2) {
																					boolean v63 = v56.add(ApplicationInfo.packageName);
																					boolean v64 = v58.hasNext();
																					if (v64 == 0) {
																						List v50 = v56;
																						long v66 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
																						if ((v66 < 0) >= 0) {
																							StrictMode$ThreadPolicy v67 = StrictMode.allowThreadDiskWrites();
																							boolean v68 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v66, p2, p3);
																							if (v68 != 0) {
																								StrictMode.setThreadPolicy(v67);
																								Map v70 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
																								Integer v71 = Integer.valueOf(p3);
																								Object v72 = v70.put(p2, v71);
																								AccountManager.invalidateLocalAccountsDataCaches();
																								boolean v65 = 1;
																								if (v65 != 0) {
																									if (1 == 0) {
																										Set v74 = .entrySet();
																										Iterator v75 = v74.iterator();
																										boolean v76 = v75.hasNext();
																										if (v76 == 0) {
																											Object v77 = v75.next();
																											Object v78 = v77.getValue();
																											int v79 = v78.intValue();
																											Object v81 = Objects.requireNonNull(p2, "packageName cannot be null");
																											long v82 = IAccountManager$Stub.clearCallingIdentity();
																											int v83 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																											int v84 = this.mPackageManager.getPackageUidAsUser(p2, v83);
																											IAccountManager$Stub.restoreCallingIdentity(v82);
																											String v89 = caughtException.getMessage();
																											Integer v93 = Integer.valueOf(3);
																											Integer v80 = v93;
																											int v94 = v80.intValue();
																											if (v79 == 1) {
																												if (v79 != 2) {
																													boolean v95 = ;
																													if (v94 == 1) {
																														if (v94 != 2) {
																															boolean v96 = ;
																															if (v95 == v96) {
																																Object v97 = v77.getKey();
																																Intent v99 = new Intent("android.accounts.action.VISIBLE_ACCOUNTS_CHANGED");
																																Intent v101 = v99.setPackage(v97);
																																Intent v102 = v99.setFlags(1073741824);
																																UserHandle v103 = new UserHandle(v104);
																																int v104 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																																this.mContext.sendBroadcastAsUser(v99, v103);
																																boolean v107 = v75.hasNext();
																																if (v107 == 0) {
																																	Iterator v108 = .iterator();
																																	boolean v109 = v108.hasNext();
																																	if (v109 == 0) {
																																		Object v110 = v108.next();
																																		int v111 = this.userId;
																																		Intent v113 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																																		Intent v115 = v113.setFlags(16777216);
																																		Intent v116 = v113.setPackage(v110);
																																		Intent v117 = v113.putExtra("authAccount", Account.name);
																																		Intent v118 = v113.putExtra("accountType", Account.type);
																																		UserHandle v119 = new UserHandle(v111);
																																		this.mContext.sendBroadcastAsUser(v113, v119);
																																		boolean v122 = v108.hasNext();
																																		if (v122 == 0) {
																																			int v123 = this.userId;
																																			String v128 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																																			UserHandle v132 = new UserHandle(v123);
																																			this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v132);
																																			boolean v29 = 1;
																																			IAccountManager$Stub.restoreCallingIdentity(v10);
																																			return v29;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(p1);
				if (v13 != 0) {
					File v14 = new File(v15);
					String v15 = this.mInjector.getPreNDatabaseName(p1);
					File v17 = new File(v18);
					String v18 = this.mInjector.getDeDatabaseName(p1);
					AccountManagerService$UserAccounts v20 = new AccountManagerService$UserAccounts(this.mContext,p1,v14,v17);
					this.mUsers.append(p1, v20);
					AccountManagerService.purgeOldGrants(v20);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v25 != 0) {
						boolean v26 = this.mLocalUnlockedUsers.get(p1);
						if (v26 == 0) {
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v12 = ;
								AccountManagerService$UserAccounts v11 = v12;
								if (1 == 0) {
									boolean v30 = "android:accounts:key_legacy_visible".equals(p2);
									if (v30 != 0) {
										boolean v31 = "android:accounts:key_legacy_not_visible".equals(p2);
										if (v31 == 0) {
											boolean v29 = ;
											if (v29 == 0) {
												HashSet v33 = new HashSet();
												Map v35 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p5);
												String v36 = new String(2);
												if ( >= 2) {
													Map v37 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p5);
													Object v38 = v37.get(v36[]);
													if (v38 == 0) {
														Set v39 = v38.keySet();
														boolean v40 = v33.addAll(v39);
														if ( >= 2) {
															HashMap v41 = new HashMap();
															Iterator v43 = v33.iterator();
															boolean v44 = v43.hasNext();
															if (v44 == 0) {
																Object v45 = v43.next();
																Integer v46 = AccountManagerService.resolveAccountVisibility(p1, v45, p5);
																Object v47 = v41.put(v45, v46);
																boolean v48 = v43.hasNext();
																if (v48 == 0) {
																	Map v32 = v41;
																	Intent v50 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																	Intent v52 = v50.setFlags(16777216);
																	int v53 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																	List v54 = this.mPackageManager.queryBroadcastReceiversAsUser(v50, 0, v53);
																	ArrayList v55 = new ArrayList();
																	if (v54 != 0) {
																		Iterator v57 = v54.iterator();
																		boolean v58 = v57.hasNext();
																		if (v58 == 0) {
																			Object v59 = v57.next();
																			Integer v60 = AccountManagerService.resolveAccountVisibility(p1, ApplicationInfo.packageName, p5);
																			int v61 = v60.intValue();
																			if (v61 == 1) {
																				if (v61 != 2) {
																					boolean v62 = v55.add(ApplicationInfo.packageName);
																					boolean v63 = v57.hasNext();
																					if (v63 == 0) {
																						List v49 = v55;
																						long v65 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
																						if ((v65 < 0) >= 0) {
																							StrictMode$ThreadPolicy v66 = StrictMode.allowThreadDiskWrites();
																							boolean v67 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v65, p2, p3);
																							if (v67 != 0) {
																								StrictMode.setThreadPolicy(v66);
																								Map v69 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
																								Integer v70 = Integer.valueOf(p3);
																								Object v71 = v69.put(p2, v70);
																								AccountManager.invalidateLocalAccountsDataCaches();
																								boolean v64 = 1;
																								if (v64 != 0) {
																									if (1 == 0) {
																										Set v73 = .entrySet();
																										Iterator v74 = v73.iterator();
																										boolean v75 = v74.hasNext();
																										if (v75 == 0) {
																											Object v76 = v74.next();
																											Object v77 = v76.getValue();
																											int v78 = v77.intValue();
																											Object v80 = Objects.requireNonNull(p2, "packageName cannot be null");
																											long v81 = IAccountManager$Stub.clearCallingIdentity();
																											int v82 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																											int v83 = this.mPackageManager.getPackageUidAsUser(p2, v82);
																											IAccountManager$Stub.restoreCallingIdentity(v81);
																											String v88 = caughtException.getMessage();
																											Integer v92 = Integer.valueOf(3);
																											Integer v79 = v92;
																											int v93 = v79.intValue();
																											if (v78 == 1) {
																												if (v78 != 2) {
																													boolean v94 = ;
																													if (v93 == 1) {
																														if (v93 != 2) {
																															boolean v95 = ;
																															if (v94 == v95) {
																																Object v96 = v76.getKey();
																																Intent v98 = new Intent("android.accounts.action.VISIBLE_ACCOUNTS_CHANGED");
																																Intent v100 = v98.setPackage(v96);
																																Intent v101 = v98.setFlags(1073741824);
																																UserHandle v102 = new UserHandle(v103);
																																int v103 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
																																this.mContext.sendBroadcastAsUser(v98, v102);
																																boolean v106 = v74.hasNext();
																																if (v106 == 0) {
																																	Iterator v107 = .iterator();
																																	boolean v108 = v107.hasNext();
																																	if (v108 == 0) {
																																		Object v109 = v107.next();
																																		int v110 = this.userId;
																																		Intent v112 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
																																		Intent v114 = v112.setFlags(16777216);
																																		Intent v115 = v112.setPackage(v109);
																																		Intent v116 = v112.putExtra("authAccount", Account.name);
																																		Intent v117 = v112.putExtra("accountType", Account.type);
																																		UserHandle v118 = new UserHandle(v110);
																																		this.mContext.sendBroadcastAsUser(v112, v118);
																																		boolean v121 = v107.hasNext();
																																		if (v121 == 0) {
																																			int v122 = this.userId;
																																			String v127 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																																			UserHandle v131 = new UserHandle(v122);
																																			this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v131);
																																			boolean v28 = 1;
																																			IAccountManager$Stub.restoreCallingIdentity(v10);
																																			return v28;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v66 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);\nAccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v66, p2, p3);', 'Intent v51 = new Intent("android.accounts.action.ACCOUNT_REMOVED");\nthis.mContext.sendBroadcastAsUser(v51, UserHandle.v103);', 'boolean v24 = AccountManagerService.updateAccountVisibilityLocked(p1, p2, p3, v18);', 'String v10 = this.mPackageManager.getPackagesForUid(v3);\nPackageInfo v11 = this.mPackageManager.getPackageInfo(v10[], 0);', 'boolean v9 = p0.setAccountVisibility(p1, p2, p3, 1, v8);']

The method setAccountVisibility has the following similar APIs:

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z with Similarity Score: 0.8915383815765381
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v1 = p0.addAccountExplicitlyWithVisibility(p1, p2, p3, 0, p4);
return v1;

- API Name: removeAccountExplicitly(Landroid/accounts/Account;)Z with Similarity Score: 0.8385875225067139
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v21 = p0.removeAccountInternal(v17, p1, v1);

