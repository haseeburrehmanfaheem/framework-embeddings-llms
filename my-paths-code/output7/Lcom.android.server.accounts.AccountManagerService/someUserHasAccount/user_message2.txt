The method someUserHasAccount has the following code snippet:

This is path 1 for the API with depth 2:
public boolean someUserHasAccount(Account p1){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		UserManager v5 = AccountManagerService.getUserManager();
		List v6 = v5.getAliveUsers();
		int v7 = v6.size();
		[I v8 = new [I(v7);
		if ( >= v7) {
			Object v9 = v6.get();
			if ( >= v7) {
				ArrayList v11 = Lists.newArrayList();
				if ( >= v8.length) {
					AccountManagerService$UserAccounts v12 = AccountManagerService.getUserAccounts(v8[]);
					if (v12 != 0) {
						int v13 = Binder.getCallingUid();
						Account v14 = AccountManagerService.getAccountsFromCache(v12, 0, v13, 0, 0);
						if ( >= v14.length) {
							AccountAndUser v15 = new AccountAndUser(v14[],v8[]);
							boolean v17 = v11.add(v15);
							if ( >= v14.length) {
								if ( >= v8.length) {
									int v18 = v11.size();
									AccountAndUser v19 = new AccountAndUser(v18);
									Object v20 = v11.toArray(v19);
									AccountAndUser v10 = v20;
									AccountAndUser v4 = v10;
									if ( < 0) {
										boolean v21 = AccountAndUser.account.equals(p1);
										if (v21 == 0) {
											if ( < 0) {
												boolean v22 = AccountAndUser.account.equals(p1);
												if (v22 == 0) {
													Binder.restoreCallingIdentity(v3);
													return 1;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean someUserHasAccount(Account p1){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		UserManager v5 = AccountManagerService.getUserManager();
		List v6 = v5.getAliveUsers();
		int v7 = v6.size();
		[I v8 = new [I(v7);
		if ( >= v7) {
			Object v9 = v6.get();
			if ( >= v7) {
				ArrayList v11 = Lists.newArrayList();
				if ( >= v8.length) {
					AccountManagerService$UserAccounts v12 = AccountManagerService.getUserAccounts(v8[]);
					if (v12 != 0) {
						int v13 = Binder.getCallingUid();
						Account v14 = AccountManagerService.getAccountsFromCache(v12, 0, v13, 0, 0);
						if ( >= v14.length) {
							AccountAndUser v15 = new AccountAndUser(v14[],v8[]);
							boolean v17 = v11.add(v15);
							if ( >= v14.length) {
								if ( >= v8.length) {
									int v18 = v11.size();
									AccountAndUser v19 = new AccountAndUser(v18);
									Object v20 = v11.toArray(v19);
									AccountAndUser v10 = v20;
									AccountAndUser v4 = v10;
									if ( < 0) {
										boolean v21 = AccountAndUser.account.equals(p1);
										if (v21 == 0) {
											if ( < 0) {
												Binder.restoreCallingIdentity(v3);
												return 0;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean someUserHasAccount(Account p1){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		UserManager v5 = AccountManagerService.getUserManager();
		List v6 = v5.getAliveUsers();
		int v7 = v6.size();
		[I v8 = new [I(v7);
		if ( >= v7) {
			Object v9 = v6.get();
			if ( >= v7) {
				ArrayList v11 = Lists.newArrayList();
				if ( >= v8.length) {
					AccountManagerService$UserAccounts v12 = AccountManagerService.getUserAccounts(v8[]);
					if (v12 != 0) {
						if ( >= v8.length) {
							int v13 = v11.size();
							AccountAndUser v14 = new AccountAndUser(v13);
							Object v15 = v11.toArray(v14);
							AccountAndUser v10 = v15;
							AccountAndUser v4 = v10;
							if ( < 0) {
								boolean v16 = AccountAndUser.account.equals(p1);
								if (v16 == 0) {
									if ( < 0) {
										boolean v17 = AccountAndUser.account.equals(p1);
										if (v17 == 0) {
											Binder.restoreCallingIdentity(v3);
											return 1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v6 = v5.getAliveUsers();\nint v7 = v6.size();\n[I v8 = new [I(v7);\nAccountManagerService$UserAccounts v12 = AccountManagerService.getUserAccounts(v8[]);\nAccount v14 = AccountManagerService.getAccountsFromCache(v12, 0, v13, 0, 0);\nAccountAndUser v15 = new AccountAndUser(v14[],v8[]);', 'List v6 = v5.getAliveUsers();\nint v7 = v6.size();\n[I v8 = new [I(v7);\nAccountAndUser v10 = AccountManagerService.getAccounts(v8);', 'AccountAndUser v4 = p0.getAllAccounts();']

The method someUserHasAccount has the following similar APIs:

- API Name: getUsers(ZZZ)Ljava/util/List; with Similarity Score: 0.7944056987762451
  - Access Control Level: SYS_OR_SIG and the following code:
ArrayList v3 = new ArrayList(v4);
int v4 = this.mUsers.size();
Object v7 = this.mUsers.valueAt();
UserInfo v9 = UserManagerService.userWithName(UserManagerService$UserData.info);
boolean v10 = v3.add(v9);
List v2 = v3;
return v2;

- API Name: addSharedAccountsFromParentUser(IILjava/lang/String;)V with Similarity Score: 0.7824704647064209
  - Access Control Level: SYS_OR_SIG and the following code:
Account v2 = p0.getAccountsAsUser(0, p1, p3);
boolean v3 = p0.addSharedAccountAsUser(v2[], p2);

