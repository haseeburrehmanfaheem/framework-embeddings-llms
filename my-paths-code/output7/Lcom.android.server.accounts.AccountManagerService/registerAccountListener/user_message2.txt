The method registerAccountListener has the following code snippet:

This is path 1 for the API with depth 2:
public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	Object v7 = this.mUsers.get(p1);
	if (v7 != 0) {
		File v8 = new File(v9);
		String v9 = this.mInjector.getPreNDatabaseName(p1);
		File v11 = new File(v12);
		String v12 = this.mInjector.getDeDatabaseName(p1);
		AccountManagerService$UserAccounts v14 = new AccountManagerService$UserAccounts(this.mContext,p1,v8,v11);
		this.mUsers.append(p1, v14);
		AccountManagerService.purgeOldGrants(v14);
		AccountManager.invalidateLocalAccountsDataCaches();
		boolean v19 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
		if (v19 != 0) {
			boolean v20 = this.mLocalUnlockedUsers.get(p1);
			if (v20 == 0) {
				if ( == 0) {
					AccountManagerService.validateAccountsInternal(, 1);
					AccountManagerService$UserAccounts v6 = ;
					AccountManagerService$UserAccounts v5 = v6;
					Map v23 = this.mReceiversForType;
					if (p1 != 0) {
						String v24 = new String(1);
						if ( >= .length) {
							Map v25 = this.mReceiversForType;
							Object v26 = v25.get([]);
							if (v26 != 0) {
								HashMap v27 = new HashMap();
								Map v29 = this.mReceiversForType;
								Object v30 = v29.put([], v27);
								Object v31 = .get(p2);
								if (v31 == 0) {
									int v32 = v31.intValue();
									Integer v33 = Integer.valueOf();
									Object v34 = .put(p2, v33);
									if ( >= .length) {
										IAccountManager$Stub.restoreCallingIdentity(v4);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void registerAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	Object v7 = this.mUsers.get(p1);
	if (v7 != 0) {
		boolean v8 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
		if (v8 != 0) {
			boolean v9 = this.mLocalUnlockedUsers.get(p1);
			if (v9 == 0) {
				File v17 = new File(v18);
				String v18 = this.mInjector.getCeDatabaseName(p1);
				AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v17);
				AccountManagerService.syncDeCeAccountsLocked();
				if ( == 0) {
					AccountManagerService.validateAccountsInternal(, 1);
					AccountManagerService$UserAccounts v6 = ;
					AccountManagerService$UserAccounts v5 = v6;
					Map v24 = this.mReceiversForType;
					if (p1 != 0) {
						String v25 = new String(1);
						if ( >= .length) {
							Map v26 = this.mReceiversForType;
							Object v27 = v26.get([]);
							if (v27 != 0) {
								HashMap v28 = new HashMap();
								Map v30 = this.mReceiversForType;
								Object v31 = v30.put([], v28);
								Object v32 = .get(p2);
								if (v32 == 0) {
									int v33 = v32.intValue();
									Integer v34 = Integer.valueOf();
									Object v35 = .put(p2, v34);
									if ( >= .length) {
										IAccountManager$Stub.restoreCallingIdentity(v4);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v7 = this.mUsers.get(p1);\nAccountManagerService$UserAccounts v14 = new AccountManagerService$UserAccounts(this.mContext,p1,v8,v11);\nthis.mUsers.append(p1, v14);\nAccountManagerService.purgeOldGrants(v14);\nAccountManager.invalidateLocalAccountsDataCaches();', 'Map v8 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(v5);\nObject v11 = v10.get([]);\nObject v15 = v14.put([], v12);\nObject v16 = .get(p2);\nObject v19 = .put(p2, v18);', 'AccountManagerService$UserAccounts v5 = p0.getUserAccounts(v3);\np0.registerAccountListener(p1, p2, v5);']

The method registerAccountListener has the following similar APIs:

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.8318878412246704
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v17);
AccountManagerService$15 v20 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
v20.bind();

- API Name: getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8120485544204712
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);
AccountManagerService$18 v24 = new AccountManagerService$18(p0,p1,p4);
AccountManagerService$GetAccountsByTypeAndFeatureSession v26 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v22,v24,p2,p3,v1,p4,1);
v26.bind();

