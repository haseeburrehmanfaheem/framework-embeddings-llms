The method getPassword has the following code snippet:

This is path 1 for the API with depth 2:
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v8 = Binder.getCallingUid();
		int v11 = Binder.getCallingPid();
		if (p1 == 0) {
			int v15 = UserHandle.getCallingUserId();
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					long v20 = IAccountManager$Stub.clearCallingIdentity();
					Object v23 = this.mUsers.get(p1);
					if (v23 != 0) {
						boolean v24 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v24 != 0) {
							boolean v25 = this.mLocalUnlockedUsers.get(p1);
							if (v25 == 0) {
								File v33 = new File(v34);
								String v34 = this.mInjector.getCeDatabaseName(p1);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v33);
								AccountManagerService.syncDeCeAccountsLocked();
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v22 = ;
									AccountManagerService$UserAccounts v21 = v22;
									if (p1 != 0) {
										int v40 = this.userId;
										boolean v42 = this.mLocalUnlockedUsers.get(v40);
										boolean v41 = v42;
										if (v41 != 0) {
											SQLiteDatabase v44 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											String v45 = new String(2);
											String v46 = new String(1);
											Cursor v47 = v44.query("ceDb.accounts", v46, "name=? AND type=?", v45, 0, 0, 0);
											boolean v48 = v47.moveToNext();
											if (v48 == 0) {
												String v49 = v47.getString(0);
												v47.close();
												String v43 = v49;
												String v39 = v43;
												IAccountManager$Stub.restoreCallingIdentity(v20);
												return v39;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v8 = Binder.getCallingUid();
		int v11 = Binder.getCallingPid();
		if (p1 == 0) {
			int v15 = UserHandle.getCallingUserId();
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					long v20 = IAccountManager$Stub.clearCallingIdentity();
					Object v23 = this.mUsers.get(p1);
					if (v23 != 0) {
						boolean v24 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v24 != 0) {
							boolean v25 = this.mLocalUnlockedUsers.get(p1);
							if (v25 == 0) {
								File v33 = new File(v34);
								String v34 = this.mInjector.getCeDatabaseName(p1);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v33);
								AccountManagerService.syncDeCeAccountsLocked();
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v22 = ;
									AccountManagerService$UserAccounts v21 = v22;
									if (p1 != 0) {
										int v40 = this.userId;
										boolean v42 = this.mLocalUnlockedUsers.get(v40);
										boolean v41 = v42;
										if (v41 != 0) {
											SQLiteDatabase v44 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											String v45 = new String(2);
											String v46 = new String(1);
											Cursor v47 = v44.query("ceDb.accounts", v46, "name=? AND type=?", v45, 0, 0, 0);
											boolean v48 = v47.moveToNext();
											if (v48 == 0) {
												v47.close();
												String v43 = 0;
												String v39 = v43;
												IAccountManager$Stub.restoreCallingIdentity(v20);
												return v39;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getPassword(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v8 = Binder.getCallingUid();
		int v11 = Binder.getCallingPid();
		if (p1 == 0) {
			int v15 = UserHandle.getCallingUserId();
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					long v20 = IAccountManager$Stub.clearCallingIdentity();
					Object v23 = this.mUsers.get(p1);
					if (v23 != 0) {
						File v24 = new File(v25);
						String v25 = this.mInjector.getPreNDatabaseName(p1);
						File v27 = new File(v28);
						String v28 = this.mInjector.getDeDatabaseName(p1);
						AccountManagerService$UserAccounts v30 = new AccountManagerService$UserAccounts(this.mContext,p1,v24,v27);
						this.mUsers.append(p1, v30);
						AccountManagerService.purgeOldGrants(v30);
						AccountManager.invalidateLocalAccountsDataCaches();
						boolean v35 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v35 != 0) {
							boolean v36 = this.mLocalUnlockedUsers.get(p1);
							if (v36 == 0) {
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v22 = ;
									AccountManagerService$UserAccounts v21 = v22;
									if (p1 != 0) {
										int v39 = this.userId;
										boolean v41 = this.mLocalUnlockedUsers.get(v39);
										boolean v40 = v41;
										if (v40 != 0) {
											SQLiteDatabase v43 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											String v44 = new String(2);
											String v45 = new String(1);
											Cursor v46 = v43.query("ceDb.accounts", v45, "name=? AND type=?", v44, 0, 0, 0);
											boolean v47 = v46.moveToNext();
											if (v47 == 0) {
												String v48 = v46.getString(0);
												v46.close();
												String v42 = v48;
												String v38 = v42;
												IAccountManager$Stub.restoreCallingIdentity(v20);
												return v38;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nboolean v19 = v17.contains(Account.type);\nlong v20 = IAccountManager$Stub.clearCallingIdentity();\nObject v23 = this.mUsers.get(p1);\nSQLiteDatabase v44 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();\nCursor v47 = v44.query("ceDb.accounts", v46, "name=? AND type=?", v45, 0, 0, 0);\nString v49 = v47.getString(0);\nv47.close();\nString v43 = v49;\nIAccountManager$Stub.restoreCallingIdentity(v20);\nreturn v39;', 'List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);\nboolean v18 = v17.contains(Account.type);\nlong v19 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);\nString v25 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);\nIAccountManager$Stub.restoreCallingIdentity(v19);\nreturn v22;', 'boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);\nlong v17 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);\nString v19 = p0.readPasswordInternal(v18, p1);\nIAccountManager$Stub.restoreCallingIdentity(v17);\nreturn v19;']

The method getPassword has the following similar APIs:

- API Name: clearPassword(Landroid/accounts/Account;)V with Similarity Score: 0.9078810214996338
  - Access Control Level: SYS_OR_SIG and the following code:
Object v14 = Objects.requireNonNull(p1, "account cannot be null");
int v15 = UserHandle.getCallingUserId();
if (Account.type != 0) {
List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
boolean v19 = v17.contains(Account.type);
long v20 = IAccountManager$Stub.clearCallingIdentity();
Object v23 = this.mUsers.get(p1);
SQLiteDatabase v41 = this.mDeDatabase.getWritableDatabase();
v41.beginTransaction();
Cursor v47 = v44.query("accounts", v45, "name=? AND type=?", v46, 0, 0, 0);
boolean v48 = v47.moveToNext();
long v49 = v47.getLong(0);
v47.close();
SQLiteDatabase v52 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
ContentValues v53 = new ContentValues();
v53.put("password", p3);
int v58 = v52.update("ceDb.accounts", v53, "_id=?", v56);

- API Name: clearPassword(Landroid/accounts/Account;)V with Similarity Score: 0.889928936958313
  - Access Control Level: SYS_OR_SIG and the following code:
Object v14 = Objects.requireNonNull(p1, "account cannot be null");
int v15 = UserHandle.getCallingUserId();
if (Account.type != 0) {
List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
boolean v18 = v17.contains(Account.type);
long v19 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, 0);

