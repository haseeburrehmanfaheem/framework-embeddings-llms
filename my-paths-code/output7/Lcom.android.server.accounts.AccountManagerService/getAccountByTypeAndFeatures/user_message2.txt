The method getAccountByTypeAndFeatures has the following code snippet:

This is path 1 for the API with depth 2:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(p1);
				if (v24 != 0) {
					boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v25 != 0) {
						boolean v26 = this.mLocalUnlockedUsers.get(p1);
						if (v26 == 0) {
							File v34 = new File(v35);
							String v35 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v23 = ;
								AccountManagerService$UserAccounts v22 = v23;
								boolean v40 = ArrayUtils.isEmpty(p3);
								if (v40 == 0) {
									boolean v42 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
									Preconditions.checkState((v42 ^ 1), "Method should not be called with cacheLock");
									if (p2 == 0) {
										Collection v44 = AccountManagerService$UserAccounts.accountCache.values();
										Iterator v45 = v44.iterator();
										boolean v46 = v45.hasNext();
										if (v46 == 0) {
											Object v47 = v45.next();
											boolean v48 = v45.hasNext();
											if (v48 == 0) {
												if ( != 0) {
													Account v49 = new Account();
													Collection v50 = AccountManagerService$UserAccounts.accountCache.values();
													Iterator v51 = v50.iterator();
													boolean v52 = v51.hasNext();
													if (v52 == 0) {
														Object v53 = v51.next();
														System.arraycopy(v53, 0, v49, , v53.length);
														boolean v55 = v51.hasNext();
														if (v55 == 0) {
															if (p4 != 0) {
																String v57 = AccountManagerService.getPackageNameForUid(p3);
																LinkedHashMap v58 = new LinkedHashMap();
																if ( >= v49.length) {
																	Integer v60 = AccountManagerService.resolveAccountVisibility(v49[], , p1);
																	int v61 = v60.intValue();
																	if (v61 == 1) {
																		if (v61 == 2) {
																			if (p5 == 0) {
																				if (v61 != 4) {
																					Integer v62 = Integer.valueOf(v61);
																					Object v63 = v58.put(v49[], v62);
																					if ( >= v49.length) {
																						Map v64 = AccountManagerService.filterSharedAccounts(p1, v58, p3, p4);
																						int v65 = v64.size();
																						Account v66 = new Account(v65);
																						Set v67 = v64.keySet();
																						Object v68 = v67.toArray(v66);
																						Account v56 = v68;
																						Account v41 = v56;
																						if (p2.length >= 1) {
																							if (p2.length <= 1) {
																								int v71 = UserHandle.getCallingUserId();
																								AccountManagerService$UserAccounts v72 = AccountManagerService.getUserAccounts(v71);
																								Integer v73 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v72);
																								int v74 = v73.intValue();
																								if (v74 != 4) {
																									boolean v70 = 1;
																									if (v70 == 0) {
																										if (v41.length != 1) {
																											Bundle v75 = new Bundle();
																											v75.putString("authAccount", Account.name);
																											v75.putString("accountType", Account.type);
																											if (v75 != 0) {
																												if (v80 == 0) {
																													Class v83 = AccountManagerService.getClass();
																													String v84 = v83.getSimpleName();
																													p1.onResult(v75);
																													if (v91 == 0) {
																														IAccountManager$Stub.restoreCallingIdentity(v21);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(p1);
				if (v24 != 0) {
					boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v25 != 0) {
						boolean v26 = this.mLocalUnlockedUsers.get(p1);
						if (v26 == 0) {
							File v34 = new File(v35);
							String v35 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v23 = ;
								AccountManagerService$UserAccounts v22 = v23;
								boolean v40 = ArrayUtils.isEmpty(p3);
								if (v40 == 0) {
									boolean v42 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
									Preconditions.checkState((v42 ^ 1), "Method should not be called with cacheLock");
									if (p2 == 0) {
										Collection v44 = AccountManagerService$UserAccounts.accountCache.values();
										Iterator v45 = v44.iterator();
										boolean v46 = v45.hasNext();
										if (v46 == 0) {
											Object v47 = v45.next();
											boolean v48 = v45.hasNext();
											if (v48 == 0) {
												if ( != 0) {
													Account v49 = new Account();
													Collection v50 = AccountManagerService$UserAccounts.accountCache.values();
													Iterator v51 = v50.iterator();
													boolean v52 = v51.hasNext();
													if (v52 == 0) {
														Object v53 = v51.next();
														System.arraycopy(v53, 0, v49, , v53.length);
														boolean v55 = v51.hasNext();
														if (v55 == 0) {
															if (p4 != 0) {
																String v57 = AccountManagerService.getPackageNameForUid(p3);
																LinkedHashMap v58 = new LinkedHashMap();
																if ( >= v49.length) {
																	Integer v60 = AccountManagerService.resolveAccountVisibility(v49[], , p1);
																	int v61 = v60.intValue();
																	if (v61 == 1) {
																		if (v61 == 2) {
																			if (p5 == 0) {
																				if (v61 != 4) {
																					Integer v62 = Integer.valueOf(v61);
																					Object v63 = v58.put(v49[], v62);
																					if ( >= v49.length) {
																						Map v64 = AccountManagerService.filterSharedAccounts(p1, v58, p3, p4);
																						int v65 = v64.size();
																						Account v66 = new Account(v65);
																						Set v67 = v64.keySet();
																						Object v68 = v67.toArray(v66);
																						Account v56 = v68;
																						Account v41 = v56;
																						if (p2.length >= 1) {
																							if (p2.length <= 1) {
																								int v71 = UserHandle.getCallingUserId();
																								AccountManagerService$UserAccounts v72 = AccountManagerService.getUserAccounts(v71);
																								Integer v73 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v72);
																								int v74 = v73.intValue();
																								if (v74 != 4) {
																									boolean v70 = 0;
																									if (v70 == 0) {
																										if (v41.length != 1) {
																											Bundle v75 = new Bundle();
																											v75.putString("authAccount", Account.name);
																											v75.putString("accountType", Account.type);
																											if (v75 != 0) {
																												if (v80 == 0) {
																													Class v83 = AccountManagerService.getClass();
																													String v84 = v83.getSimpleName();
																													p1.onResult(v75);
																													if (v91 == 0) {
																														IAccountManager$Stub.restoreCallingIdentity(v21);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	if (v3 == 0) {
		String v11 = Arrays.toString(p3);
		int v16 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(p1);
				if (v24 != 0) {
					File v25 = new File(v26);
					String v26 = this.mInjector.getPreNDatabaseName(p1);
					File v28 = new File(v29);
					String v29 = this.mInjector.getDeDatabaseName(p1);
					AccountManagerService$UserAccounts v31 = new AccountManagerService$UserAccounts(this.mContext,p1,v25,v28);
					this.mUsers.append(p1, v31);
					AccountManagerService.purgeOldGrants(v31);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v36 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v36 != 0) {
						boolean v37 = this.mLocalUnlockedUsers.get(p1);
						if (v37 == 0) {
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v23 = ;
								AccountManagerService$UserAccounts v22 = v23;
								boolean v39 = ArrayUtils.isEmpty(p3);
								if (v39 == 0) {
									boolean v41 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
									Preconditions.checkState((v41 ^ 1), "Method should not be called with cacheLock");
									if (p2 == 0) {
										Collection v43 = AccountManagerService$UserAccounts.accountCache.values();
										Iterator v44 = v43.iterator();
										boolean v45 = v44.hasNext();
										if (v45 == 0) {
											Object v46 = v44.next();
											boolean v47 = v44.hasNext();
											if (v47 == 0) {
												if ( != 0) {
													Account v48 = new Account();
													Collection v49 = AccountManagerService$UserAccounts.accountCache.values();
													Iterator v50 = v49.iterator();
													boolean v51 = v50.hasNext();
													if (v51 == 0) {
														Object v52 = v50.next();
														System.arraycopy(v52, 0, v48, , v52.length);
														boolean v54 = v50.hasNext();
														if (v54 == 0) {
															if (p4 != 0) {
																String v56 = AccountManagerService.getPackageNameForUid(p3);
																LinkedHashMap v57 = new LinkedHashMap();
																if ( >= v48.length) {
																	Integer v59 = AccountManagerService.resolveAccountVisibility(v48[], , p1);
																	int v60 = v59.intValue();
																	if (v60 == 1) {
																		if (v60 == 2) {
																			if (p5 == 0) {
																				if (v60 != 4) {
																					Integer v61 = Integer.valueOf(v60);
																					Object v62 = v57.put(v48[], v61);
																					if ( >= v48.length) {
																						Map v63 = AccountManagerService.filterSharedAccounts(p1, v57, p3, p4);
																						int v64 = v63.size();
																						Account v65 = new Account(v64);
																						Set v66 = v63.keySet();
																						Object v67 = v66.toArray(v65);
																						Account v55 = v67;
																						Account v40 = v55;
																						if (p2.length >= 1) {
																							if (p2.length <= 1) {
																								int v70 = UserHandle.getCallingUserId();
																								AccountManagerService$UserAccounts v71 = AccountManagerService.getUserAccounts(v70);
																								Integer v72 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v71);
																								int v73 = v72.intValue();
																								if (v73 != 4) {
																									boolean v69 = 1;
																									if (v69 == 0) {
																										if (v40.length != 1) {
																											Bundle v74 = new Bundle();
																											v74.putString("authAccount", Account.name);
																											v74.putString("accountType", Account.type);
																											if (v74 != 0) {
																												if (v79 == 0) {
																													Class v82 = AccountManagerService.getClass();
																													String v83 = v82.getSimpleName();
																													p1.onResult(v74);
																													if (v90 == 0) {
																														IAccountManager$Stub.restoreCallingIdentity(v21);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v24 = this.mUsers.get(p1);\nFile v34 = new File(v35);\nString v35 = this.mInjector.getCeDatabaseName(p1);\nAccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);\nAccountManagerService.syncDeCeAccountsLocked();\nAccountManagerService.validateAccountsInternal(, 1);\nCollection v50 = AccountManagerService$UserAccounts.accountCache.values();\nIterator v51 = v50.iterator();\nObject v53 = v51.next();\nSystem.arraycopy(v53, 0, v49, , v53.length);\nAccount v49 = new Account()', 'AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);\nCollection v28 = AccountManagerService$UserAccounts.accountCache.values();\nIterator v29 = v28.iterator();\nObject v31 = v29.next();\nAccount v33 = new Account();\nSystem.arraycopy(v37, 0, v33, , v37.length);\nBundle v43 = new Bundle();\nv43.putString("authAccount", Account.name);\nv43.putString("accountType", Account.type);\nAccountManagerService.onResult(p1, v43);', 'AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v20);\nAccountManagerService$18 v24 = new AccountManagerService$18(p0,p1,p4);\nAccountManagerService$GetAccountsByTypeAndFeatureSession v26 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v22,v24,p2,p3,v1,p4,1);\nv26.bind();']

The method getAccountByTypeAndFeatures has the following similar APIs:

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9221407771110535
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v17);
AccountManagerService$15 v20 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
v20.bind();

- API Name: getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.8984764218330383
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v39 = AccountManagerService.getUserAccountsNotChecked(p2);
ArrayList v41 = new ArrayList();
Iterator v43 = .iterator();
Object v45 = v43.next();
Account v46 = AccountManagerService.getAccountsFromCache(v38, v45, , , p6);
List v47 = Arrays.asList(v46);
boolean v48 = v41.addAll(v47);
Account v51 = new Account(v50);
IAccountManager$Stub.restoreCallingIdentity(v37);
Account v8 = v40;
return v8;

