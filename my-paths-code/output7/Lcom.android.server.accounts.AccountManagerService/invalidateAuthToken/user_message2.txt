The method invalidateAuthToken has the following code snippet:

This is path 1 for the API with depth 2:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		int v16 = UserHandle.getCallingUserId();
		long v17 = IAccountManager$Stub.clearCallingIdentity();
		Object v20 = this.mUsers.get(p1);
		if (v20 != 0) {
			boolean v21 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v21 != 0) {
				boolean v22 = this.mLocalUnlockedUsers.get(p1);
				if (v22 == 0) {
					File v30 = new File(v31);
					String v31 = this.mInjector.getCeDatabaseName(p1);
					AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v30);
					AccountManagerService.syncDeCeAccountsLocked();
					if ( == 0) {
						AccountManagerService.validateAccountsInternal(, 1);
						AccountManagerService$UserAccounts v19 = ;
						AccountManagerService$UserAccounts v18 = v19;
						AccountManagerService$UserAccounts.accountsDb.beginTransaction();
						ArrayList v38 = new ArrayList();
						SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
						String v42 = new String(2);
						Cursor v43 = v41.rawQuery("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", v42);
						Cursor v40 = v43;
						boolean v44 = v40.moveToNext();
						if (v44 == 0) {
							String v45 = v40.getString(0);
							String v46 = v40.getString(1);
							String v47 = v40.getString(2);
							SQLiteDatabase v49 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							String v50 = new String(1);
							int v51 = v49.delete("ceDb.authtokens", "_id= ?", v50);
							if (v51 <= 0) {
								boolean v48 = ;
								Account v52 = new Account(v46,p1);
								Pair v54 = Pair.create(v52, v47);
								boolean v55 = v38.add(v54);
								boolean v56 = v40.moveToNext();
								if (v56 == 0) {
									v40.close();
									List v37 = v38;
									AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
									AccountManagerService$UserAccounts.accountsDb.endTransaction();
									Iterator v60 = v37.iterator();
									boolean v61 = v60.hasNext();
									if (v61 == 0) {
										Object v62 = v60.next();
										Map v64 = this.authTokenCache;
										Object v65 = v64.get(Pair.first);
										if (v65 != 0) {
											SQLiteDatabase v67 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											HashMap v68 = new HashMap();
											String v70 = new String(2);
											Cursor v71 = v67.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v70, 0, 0, 0);
											boolean v72 = v71.moveToNext();
											if (v72 == 0) {
												String v73 = v71.getString(0);
												String v74 = v71.getString(1);
												Object v75 = v68.put(v73, v74);
												boolean v76 = v71.moveToNext();
												if (v76 == 0) {
													v71.close();
													Map v66 = v68;
													Map v78 = this.authTokenCache;
													Object v79 = v78.put(Pair.first, v66);
													if (0 != 0) {
														Object v80 = .remove(Pair.second);
														boolean v81 = v60.hasNext();
														if (v81 == 0) {
															TokenCache v82 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
															Pair v85 = new Pair(p1,p2);
															Object v87 = this.mTokenEvictors.get(v85);
															if (v87 == 0) {
																v87.evict();
																IAccountManager$Stub.restoreCallingIdentity(v17);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		int v16 = UserHandle.getCallingUserId();
		long v17 = IAccountManager$Stub.clearCallingIdentity();
		Object v20 = this.mUsers.get(p1);
		if (v20 != 0) {
			boolean v21 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v21 != 0) {
				boolean v22 = this.mLocalUnlockedUsers.get(p1);
				if (v22 == 0) {
					File v30 = new File(v31);
					String v31 = this.mInjector.getCeDatabaseName(p1);
					AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v30);
					AccountManagerService.syncDeCeAccountsLocked();
					if ( == 0) {
						AccountManagerService.validateAccountsInternal(, 1);
						AccountManagerService$UserAccounts v19 = ;
						AccountManagerService$UserAccounts v18 = v19;
						AccountManagerService$UserAccounts.accountsDb.beginTransaction();
						ArrayList v38 = new ArrayList();
						SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
						String v42 = new String(2);
						Cursor v43 = v41.rawQuery("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", v42);
						Cursor v40 = v43;
						boolean v44 = v40.moveToNext();
						if (v44 == 0) {
							String v45 = v40.getString(0);
							String v46 = v40.getString(1);
							String v47 = v40.getString(2);
							SQLiteDatabase v49 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							String v50 = new String(1);
							int v51 = v49.delete("ceDb.authtokens", "_id= ?", v50);
							if (v51 <= 0) {
								boolean v48 = ;
								Account v52 = new Account(v46,p1);
								Pair v54 = Pair.create(v52, v47);
								boolean v55 = v38.add(v54);
								boolean v56 = v40.moveToNext();
								if (v56 == 0) {
									v40.close();
									List v37 = v38;
									AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
									AccountManagerService$UserAccounts.accountsDb.endTransaction();
									Iterator v60 = v37.iterator();
									boolean v61 = v60.hasNext();
									if (v61 == 0) {
										Object v62 = v60.next();
										Map v64 = this.authTokenCache;
										Object v65 = v64.get(Pair.first);
										if (v65 != 0) {
											SQLiteDatabase v67 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											HashMap v68 = new HashMap();
											String v70 = new String(2);
											Cursor v71 = v67.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v70, 0, 0, 0);
											boolean v72 = v71.moveToNext();
											if (v72 == 0) {
												String v73 = v71.getString(0);
												String v74 = v71.getString(1);
												Object v75 = v68.put(v73, v74);
												boolean v76 = v71.moveToNext();
												if (v76 == 0) {
													v71.close();
													Map v66 = v68;
													Map v78 = this.authTokenCache;
													Object v79 = v78.put(Pair.first, v66);
													if (0 != 0) {
														Object v80 = .put(Pair.second, 0);
														boolean v81 = v60.hasNext();
														if (v81 == 0) {
															TokenCache v82 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
															Pair v85 = new Pair(p1,p2);
															Object v87 = this.mTokenEvictors.get(v85);
															if (v87 == 0) {
																v87.evict();
																IAccountManager$Stub.restoreCallingIdentity(v17);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		int v16 = UserHandle.getCallingUserId();
		long v17 = IAccountManager$Stub.clearCallingIdentity();
		Object v20 = this.mUsers.get(p1);
		if (v20 != 0) {
			File v21 = new File(v22);
			String v22 = this.mInjector.getPreNDatabaseName(p1);
			File v24 = new File(v25);
			String v25 = this.mInjector.getDeDatabaseName(p1);
			AccountManagerService$UserAccounts v27 = new AccountManagerService$UserAccounts(this.mContext,p1,v21,v24);
			this.mUsers.append(p1, v27);
			AccountManagerService.purgeOldGrants(v27);
			AccountManager.invalidateLocalAccountsDataCaches();
			boolean v32 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v32 != 0) {
				boolean v33 = this.mLocalUnlockedUsers.get(p1);
				if (v33 == 0) {
					if ( == 0) {
						AccountManagerService.validateAccountsInternal(, 1);
						AccountManagerService$UserAccounts v19 = ;
						AccountManagerService$UserAccounts v18 = v19;
						AccountManagerService$UserAccounts.accountsDb.beginTransaction();
						ArrayList v37 = new ArrayList();
						SQLiteDatabase v40 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
						String v41 = new String(2);
						Cursor v42 = v40.rawQuery("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", v41);
						Cursor v39 = v42;
						boolean v43 = v39.moveToNext();
						if (v43 == 0) {
							String v44 = v39.getString(0);
							String v45 = v39.getString(1);
							String v46 = v39.getString(2);
							SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							String v49 = new String(1);
							int v50 = v48.delete("ceDb.authtokens", "_id= ?", v49);
							if (v50 <= 0) {
								boolean v47 = ;
								Account v51 = new Account(v45,p1);
								Pair v53 = Pair.create(v51, v46);
								boolean v54 = v37.add(v53);
								boolean v55 = v39.moveToNext();
								if (v55 == 0) {
									v39.close();
									List v36 = v37;
									AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
									AccountManagerService$UserAccounts.accountsDb.endTransaction();
									Iterator v59 = v36.iterator();
									boolean v60 = v59.hasNext();
									if (v60 == 0) {
										Object v61 = v59.next();
										Map v63 = this.authTokenCache;
										Object v64 = v63.get(Pair.first);
										if (v64 != 0) {
											SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											HashMap v67 = new HashMap();
											String v69 = new String(2);
											Cursor v70 = v66.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v69, 0, 0, 0);
											boolean v71 = v70.moveToNext();
											if (v71 == 0) {
												String v72 = v70.getString(0);
												String v73 = v70.getString(1);
												Object v74 = v67.put(v72, v73);
												boolean v75 = v70.moveToNext();
												if (v75 == 0) {
													v70.close();
													Map v65 = v67;
													Map v77 = this.authTokenCache;
													Object v78 = v77.put(Pair.first, v65);
													if (0 != 0) {
														Object v79 = .remove(Pair.second);
														boolean v80 = v59.hasNext();
														if (v80 == 0) {
															TokenCache v81 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
															Pair v84 = new Pair(p1,p2);
															Object v86 = this.mTokenEvictors.get(v84);
															if (v86 == 0) {
																v86.evict();
																IAccountManager$Stub.restoreCallingIdentity(v17);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v30);\nCursor v43 = v41.rawQuery(...);\nAccount v52 = new Account(v46,p1);\nv28.remove(p1, p2);', 'SQLiteDatabase v21 = this.mDeDatabase.getWritableDatabase();\nCursor v26 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p1, p2);\nAccount v32 = new Account(v29,p1);', 'List v20 = p0.invalidateAuthTokenLocked(v18, p1, p2);\np0.writeAuthTokenIntoCacheLocked(v18, Pair.first, Pair.second, 0);']

The method invalidateAuthToken has the following similar APIs:

- API Name: removeAccountExplicitly(Landroid/accounts/Account;)Z with Similarity Score: 0.8751429915428162
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v79 = this.mDeDatabase.getWritableDatabase();
v79.beginTransaction();
int v96 = v90.delete("accounts", v95, 0);

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V with Similarity Score: 0.8352370858192444
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v25 = this.mUsers.get(p1);
boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();

