This is path 1 for the API with depth 2:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v30 == 0) {
					boolean v31 = v30.isActiveProfileOwner(p2);
					if (v31 != 0) {
						boolean v32 = v30.isActiveDeviceOwner(p2);
						if (v32 == 0) {
							boolean v29 = ;
							if (v29 == 0) {
								UserManager v33 = AccountManagerService.getUserManager();
								UserHandle v34 = new UserHandle(v27);
								Bundle v36 = v33.getUserRestrictions(v34);
								boolean v37 = v36.getBoolean("no_modify_accounts");
								if (v37 == 0) {
									boolean v28 = 0;
									if (v28 != 0) {
										Object v40 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v40 == 0) {
											boolean v41 = v40.isActiveProfileOwner(p3);
											if (v41 != 0) {
												boolean v42 = v40.isActiveDeviceOwner(p3);
												if (v42 == 0) {
													boolean v39 = ;
													if (v39 == 0) {
														Object v43 = this.mContext.getSystemService("device_policy");
														String v44 = v43.getAccountTypesWithManagementDisabledAsUser(v27);
														if (v44 != 0) {
															if ( >= v44.length) {
																boolean v45 = v44[].equals(p2);
																if (v45 == 0) {
																	if ( >= v44.length) {
																		boolean v46 = v44[].equals(p2);
																		if (v46 == 0) {
																			boolean v38 = 0;
																			if (v38 != 0) {
																				p1.onError(101, "User cannot modify accounts of this type (policy).");
																				Object v50 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
																				Object v49 = v50;
																				if (v49 != 0) {
																					Intent v52 = new Intent(this.mContext,CantAddAccountActivit.class);
																					Intent v54 = v52.putExtra("android.accounts.extra.ERROR_CODE", p1);
																					Intent v55 = v52.addFlags(268435456);
																					Intent v51 = v52;
																					if ( != 0) {
																						Intent v57 = new Intent(this.mContext,CantAddAccountActivit.class);
																						Intent v59 = v57.putExtra("android.accounts.extra.ERROR_CODE", p1);
																						Intent v60 = v57.addFlags(268435456);
																						Intent v56 = v57;
																						long v61 = IAccountManager$Stub.clearCallingIdentity();
																						UserHandle v62 = new UserHandle(v27);
																						this.mContext.startActivityAsUser(, v62);
																						IAccountManager$Stub.restoreCallingIdentity(v61);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				boolean v29 = AccountManagerService.isProfileOwner(v26);
				if (v29 == 0) {
					UserManager v30 = AccountManagerService.getUserManager();
					UserHandle v31 = new UserHandle(v27);
					Bundle v33 = v30.getUserRestrictions(v31);
					boolean v34 = v33.getBoolean("no_modify_accounts");
					if (v34 == 0) {
						boolean v28 = 0;
						if (v28 != 0) {
							boolean v36 = AccountManagerService.isProfileOwner(v26);
							if (v36 == 0) {
								Object v37 = this.mContext.getSystemService("device_policy");
								String v38 = v37.getAccountTypesWithManagementDisabledAsUser(v27);
								if (v38 != 0) {
									if ( >= v38.length) {
										boolean v39 = v38[].equals(p2);
										if (v39 == 0) {
											if ( >= v38.length) {
												boolean v40 = v38[].equals(p2);
												if (v40 == 0) {
													boolean v35 = 0;
													if (v35 != 0) {
														p1.onError(101, "User cannot modify accounts of this type (policy).");
														Object v43 = LocalServices.getService(DevicePolicyManagerInterna.class);
														if (v43 != 0) {
															if (101 != 100) {
																if (101 != 101) {
																	Intent v44 = v43.createShowAdminSupportIntent(v27, 0);
																	if ( != 0) {
																		Intent v45 = AccountManagerService.getDefaultCantAddAccountIntent(101);
																		long v46 = IAccountManager$Stub.clearCallingIdentity();
																		UserHandle v47 = new UserHandle(v27);
																		this.mContext.startActivityAsUser(, v47);
																		IAccountManager$Stub.restoreCallingIdentity(v46);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	if (v2 == 0) {
		String v12 = Arrays.toString(p4);
		int v17 = Binder.getCallingUid();
		int v20 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				boolean v28 = p0.canUserModifyAccounts(v27, v26);
				if (v28 != 0) {
					boolean v29 = p0.canUserModifyAccountsForType(v27, p2, v26);
					if (v29 != 0) {
						p1.onError(101, "User cannot modify accounts of this type (policy).");
						p0.showCantAddAccount(101, v27);
						return;
					}
				}
			}
		}
	}
}
