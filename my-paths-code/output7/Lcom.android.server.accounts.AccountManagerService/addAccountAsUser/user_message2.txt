The method addAccountAsUser has the following code snippet:

This is path 1 for the API with depth 2:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		String v13 = Arrays.toString(p4);
		int v18 = Binder.getCallingUid();
		int v21 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				if (v31 == 0) {
					boolean v29 = ;
					if (v29 != 0) {
						Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
						if (v34 == 0) {
							boolean v35 = v34.isActiveProfileOwner(p2);
							if (v35 != 0) {
								boolean v36 = v34.isActiveDeviceOwner(p2);
								if (v36 == 0) {
									boolean v33 = ;
									if (v33 == 0) {
										UserManager v37 = AccountManagerService.getUserManager();
										UserHandle v38 = new UserHandle(p7);
										Bundle v40 = v37.getUserRestrictions(v38);
										boolean v41 = v40.getBoolean("no_modify_accounts");
										if (v41 == 0) {
											boolean v32 = 0;
											if (v32 != 0) {
												Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
												if (v44 == 0) {
													boolean v45 = v44.isActiveProfileOwner(p3);
													if (v45 != 0) {
														boolean v46 = v44.isActiveDeviceOwner(p3);
														if (v46 == 0) {
															boolean v43 = ;
															if (v43 == 0) {
																Object v47 = this.mContext.getSystemService("device_policy");
																String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
																if (v48 != 0) {
																	if ( >= v48.length) {
																		boolean v49 = v48[].equals(p2);
																		if (v49 == 0) {
																			if ( >= v48.length) {
																				boolean v50 = v48[].equals(p2);
																				if (v50 == 0) {
																					boolean v42 = 0;
																					if (v42 != 0) {
																						int v52 = Binder.getCallingPid();
																						int v53 = Binder.getCallingUid();
																						if (p6 != 0) {
																							Bundle v54 = new Bundle();
																							.putInt("callerUid", v53);
																							.putInt("callerPid", v52);
																							long v58 = IAccountManager$Stub.clearCallingIdentity();
																							AccountManagerService$UserAccounts v60 = AccountManagerService.getUserAccountsNotChecked(p7);
																							AccountManagerService$UserAccounts v59 = v60;
																							AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v59, v53);
																							AccountManagerService$9 v63 = new AccountManagerService$9(AccountManagerService,v59,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																							if (v66 == 0) {
																								boolean v73 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																								if (v73 != 0) {
																									String v77 = AccountManagerService$Session.toDebugString();
																									AccountManagerService$Session.onError(1, "bind failure");
																									IAccountManager$Stub.restoreCallingIdentity(v58);
																									return;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		String v13 = Arrays.toString(p4);
		int v18 = Binder.getCallingUid();
		int v21 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				if (v31 == 0) {
					boolean v29 = ;
					if (v29 != 0) {
						Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
						if (v34 == 0) {
							boolean v35 = v34.isActiveProfileOwner(p2);
							if (v35 != 0) {
								boolean v36 = v34.isActiveDeviceOwner(p2);
								if (v36 == 0) {
									boolean v33 = ;
									if (v33 == 0) {
										UserManager v37 = AccountManagerService.getUserManager();
										UserHandle v38 = new UserHandle(p7);
										Bundle v40 = v37.getUserRestrictions(v38);
										boolean v41 = v40.getBoolean("no_modify_accounts");
										if (v41 == 0) {
											boolean v32 = 1;
											if (v32 != 0) {
												Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
												if (v44 == 0) {
													boolean v45 = v44.isActiveProfileOwner(p3);
													if (v45 != 0) {
														boolean v46 = v44.isActiveDeviceOwner(p3);
														if (v46 == 0) {
															boolean v43 = ;
															if (v43 == 0) {
																Object v47 = this.mContext.getSystemService("device_policy");
																String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
																if (v48 != 0) {
																	if ( >= v48.length) {
																		boolean v49 = v48[].equals(p2);
																		if (v49 == 0) {
																			if ( >= v48.length) {
																				boolean v50 = v48[].equals(p2);
																				if (v50 == 0) {
																					boolean v42 = 0;
																					if (v42 != 0) {
																						int v52 = Binder.getCallingPid();
																						int v53 = Binder.getCallingUid();
																						if (p6 != 0) {
																							Bundle v54 = new Bundle();
																							.putInt("callerUid", v53);
																							.putInt("callerPid", v52);
																							long v58 = IAccountManager$Stub.clearCallingIdentity();
																							AccountManagerService$UserAccounts v60 = AccountManagerService.getUserAccountsNotChecked(p7);
																							AccountManagerService$UserAccounts v59 = v60;
																							AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v59, v53);
																							AccountManagerService$9 v63 = new AccountManagerService$9(AccountManagerService,v59,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																							if (v66 == 0) {
																								boolean v73 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																								if (v73 != 0) {
																									String v77 = AccountManagerService$Session.toDebugString();
																									AccountManagerService$Session.onError(1, "bind failure");
																									IAccountManager$Stub.restoreCallingIdentity(v58);
																									return;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	if (v3 == 0) {
		String v13 = Arrays.toString(p4);
		int v18 = Binder.getCallingUid();
		int v21 = Binder.getCallingPid();
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				if (v31 == 0) {
					boolean v29 = ;
					if (v29 != 0) {
						Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
						if (v34 == 0) {
							boolean v35 = v34.isActiveProfileOwner(p2);
							if (v35 != 0) {
								boolean v36 = v34.isActiveDeviceOwner(p2);
								if (v36 == 0) {
									boolean v33 = ;
									if (v33 == 0) {
										UserManager v37 = AccountManagerService.getUserManager();
										UserHandle v38 = new UserHandle(p7);
										Bundle v40 = v37.getUserRestrictions(v38);
										boolean v41 = v40.getBoolean("no_modify_accounts");
										if (v41 == 0) {
											boolean v32 = 0;
											if (v32 != 0) {
												Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
												if (v44 == 0) {
													boolean v45 = v44.isActiveProfileOwner(p3);
													if (v45 != 0) {
														boolean v46 = v44.isActiveDeviceOwner(p3);
														if (v46 == 0) {
															boolean v43 = ;
															if (v43 == 0) {
																Object v47 = this.mContext.getSystemService("device_policy");
																String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
																if (v48 != 0) {
																	if ( >= v48.length) {
																		boolean v49 = v48[].equals(p2);
																		if (v49 == 0) {
																			if ( >= v48.length) {
																				boolean v42 = 1;
																				if (v42 != 0) {
																					int v51 = Binder.getCallingPid();
																					int v52 = Binder.getCallingUid();
																					if (p6 != 0) {
																						Bundle v53 = new Bundle();
																						.putInt("callerUid", v52);
																						.putInt("callerPid", v51);
																						long v57 = IAccountManager$Stub.clearCallingIdentity();
																						AccountManagerService$UserAccounts v59 = AccountManagerService.getUserAccountsNotChecked(p7);
																						AccountManagerService$UserAccounts v58 = v59;
																						AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v58, v52);
																						AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																						if (v65 == 0) {
																							boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																							if (v72 != 0) {
																								String v76 = AccountManagerService$Session.toDebugString();
																								AccountManagerService$Session.onError(1, "bind failure");
																								IAccountManager$Stub.restoreCallingIdentity(v57);
																								return;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$9 v63 = new AccountManagerService$9(AccountManagerService,v59,p1,p2,p5,1,0,0,1,p3,p4,,p2);']

The method addAccountAsUser has the following similar APIs:

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V with Similarity Score: 0.8555852174758911
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
v22.bind();

- API Name: updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.8396380543708801
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$13 v24 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
v24.bind();

