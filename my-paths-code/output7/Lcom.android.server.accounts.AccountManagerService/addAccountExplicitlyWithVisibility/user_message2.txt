The method addAccountExplicitlyWithVisibility has the following code snippet:

This is path 1 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v18 = v19;
			boolean v20 = v18.contains(Account.type);
			boolean v17 = v20;
			if (v17 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(p1);
				if (v24 != 0) {
					boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v25 != 0) {
						boolean v26 = this.mLocalUnlockedUsers.get(p1);
						if (v26 == 0) {
							File v34 = new File(v35);
							String v35 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v23 = ;
								AccountManagerService$UserAccounts v22 = v23;
								Bundle v41 = Bundle.setDefusable(p3, 1);
								if (p1 != 0) {
									if (Account.name == 0) {
										int v42 = Account.name.length();
										if (v42 <= 200) {
											if (Account.type == 0) {
												int v43 = Account.type.length();
												if (v43 <= 200) {
													int v44 = this.userId;
													boolean v46 = this.mLocalUnlockedUsers.get(v44);
													boolean v45 = v46;
													if (v45 != 0) {
														SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
														v48.beginTransaction();
														SQLiteDatabase v51 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
														String v52 = new String(1);
														String v53 = new String(2);
														Cursor v54 = v51.query("ceDb.accounts", v52, "name=? AND type=?", v53, 0, 0, 0);
														boolean v55 = v54.moveToNext();
														if (v55 == 0) {
															long v56 = v54.getLong(0);
															v54.close();
															long v50 = v56;
															if ((v50 < 0) < 0) {
																SQLiteDatabase v59 = this.mDeDatabase.getReadableDatabase();
																LinkedHashMap v60 = new LinkedHashMap();
																String v62 = new String(3);
																Cursor v63 = v59.query("accounts", v62, 0, 0, 0, 0, "_id");
																boolean v64 = v63.moveToNext();
																if (v64 == 0) {
																	long v65 = v63.getLong(0);
																	String v66 = v63.getString(1);
																	String v67 = v63.getString(2);
																	Account v68 = new Account(v67,v66);
																	Long v70 = Long.valueOf(v65);
																	Object v71 = v60.put(v70, v68);
																	boolean v72 = v63.moveToNext();
																	if (v72 == 0) {
																		v63.close();
																		Map v58 = v60;
																		int v74 = v58.size();
																		if (v74 <= 100) {
																			String v78 = p1.toSafeString();
																			SQLiteDatabase v84 = this.mDeDatabase.getWritableDatabase();
																			v84.endTransaction();
																			boolean v40 = 0;
																			IAccountManager$Stub.restoreCallingIdentity(v21);
																			return v40;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v18 = v19;
			boolean v20 = v18.contains(Account.type);
			boolean v17 = v20;
			if (v17 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(p1);
				if (v24 != 0) {
					boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v25 != 0) {
						boolean v26 = this.mLocalUnlockedUsers.get(p1);
						if (v26 == 0) {
							File v34 = new File(v35);
							String v35 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v23 = ;
								AccountManagerService$UserAccounts v22 = v23;
								Bundle v41 = Bundle.setDefusable(p3, 1);
								if (p1 != 0) {
									if (Account.name == 0) {
										int v42 = Account.name.length();
										if (v42 <= 200) {
											if (Account.type == 0) {
												int v43 = Account.type.length();
												if (v43 <= 200) {
													int v44 = this.userId;
													boolean v46 = this.mLocalUnlockedUsers.get(v44);
													boolean v45 = v46;
													if (v45 != 0) {
														SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
														v48.beginTransaction();
														SQLiteDatabase v51 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
														String v52 = new String(1);
														String v53 = new String(2);
														Cursor v54 = v51.query("ceDb.accounts", v52, "name=? AND type=?", v53, 0, 0, 0);
														boolean v55 = v54.moveToNext();
														if (v55 == 0) {
															v54.close();
															long v50 = -1;
															if ((v50 < 0) < 0) {
																SQLiteDatabase v58 = this.mDeDatabase.getReadableDatabase();
																LinkedHashMap v59 = new LinkedHashMap();
																String v61 = new String(3);
																Cursor v62 = v58.query("accounts", v61, 0, 0, 0, 0, "_id");
																boolean v63 = v62.moveToNext();
																if (v63 == 0) {
																	long v64 = v62.getLong(0);
																	String v65 = v62.getString(1);
																	String v66 = v62.getString(2);
																	Account v67 = new Account(v66,v65);
																	Long v69 = Long.valueOf(v64);
																	Object v70 = v59.put(v69, v67);
																	boolean v71 = v62.moveToNext();
																	if (v71 == 0) {
																		v62.close();
																		Map v57 = v59;
																		int v73 = v57.size();
																		if (v73 <= 100) {
																			String v77 = p1.toSafeString();
																			SQLiteDatabase v83 = this.mDeDatabase.getWritableDatabase();
																			v83.endTransaction();
																			boolean v40 = 0;
																			IAccountManager$Stub.restoreCallingIdentity(v21);
																			return v40;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v18 = v19;
			boolean v20 = v18.contains(Account.type);
			boolean v17 = v20;
			if (v17 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(p1);
				if (v24 != 0) {
					File v25 = new File(v26);
					String v26 = this.mInjector.getPreNDatabaseName(p1);
					File v28 = new File(v29);
					String v29 = this.mInjector.getDeDatabaseName(p1);
					AccountManagerService$UserAccounts v31 = new AccountManagerService$UserAccounts(this.mContext,p1,v25,v28);
					this.mUsers.append(p1, v31);
					AccountManagerService.purgeOldGrants(v31);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v36 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v36 != 0) {
						boolean v37 = this.mLocalUnlockedUsers.get(p1);
						if (v37 == 0) {
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v23 = ;
								AccountManagerService$UserAccounts v22 = v23;
								Bundle v40 = Bundle.setDefusable(p3, 1);
								if (p1 != 0) {
									if (Account.name == 0) {
										int v41 = Account.name.length();
										if (v41 <= 200) {
											if (Account.type == 0) {
												int v42 = Account.type.length();
												if (v42 <= 200) {
													int v43 = this.userId;
													boolean v45 = this.mLocalUnlockedUsers.get(v43);
													boolean v44 = v45;
													if (v44 != 0) {
														SQLiteDatabase v47 = this.mDeDatabase.getWritableDatabase();
														v47.beginTransaction();
														SQLiteDatabase v50 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
														String v51 = new String(1);
														String v52 = new String(2);
														Cursor v53 = v50.query("ceDb.accounts", v51, "name=? AND type=?", v52, 0, 0, 0);
														boolean v54 = v53.moveToNext();
														if (v54 == 0) {
															long v55 = v53.getLong(0);
															v53.close();
															long v49 = v55;
															if ((v49 < 0) < 0) {
																SQLiteDatabase v58 = this.mDeDatabase.getReadableDatabase();
																LinkedHashMap v59 = new LinkedHashMap();
																String v61 = new String(3);
																Cursor v62 = v58.query("accounts", v61, 0, 0, 0, 0, "_id");
																boolean v63 = v62.moveToNext();
																if (v63 == 0) {
																	long v64 = v62.getLong(0);
																	String v65 = v62.getString(1);
																	String v66 = v62.getString(2);
																	Account v67 = new Account(v66,v65);
																	Long v69 = Long.valueOf(v64);
																	Object v70 = v59.put(v69, v67);
																	boolean v71 = v62.moveToNext();
																	if (v71 == 0) {
																		v62.close();
																		Map v57 = v59;
																		int v73 = v57.size();
																		if (v73 <= 100) {
																			String v77 = p1.toSafeString();
																			SQLiteDatabase v83 = this.mDeDatabase.getWritableDatabase();
																			v83.endTransaction();
																			boolean v39 = 0;
																			IAccountManager$Stub.restoreCallingIdentity(v21);
																			return v39;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v16 = Objects.requireNonNull(p1, "account cannot be null");\nList v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nboolean v20 = v18.contains(Account.type);\nAccount v68 = new Account(v67,v66);\nSQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();\nv48.beginTransaction();', 'Object v16 = Objects.requireNonNull(p1, "account cannot be null");\nList v18 = AccountManagerService.getTypesManagedByCaller(v2, v3);\nboolean v19 = v18.contains(Account.type);\nAccountManagerService$UserAccounts.accountsDb.beginTransaction();\nlong v30 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);', 'Object v16 = Objects.requireNonNull(p1, "account cannot be null");\nboolean v17 = p0.isAccountManagedByCaller(Account.type, v2, v3);\np0.addAccountInternal(v19, p1, p2, p3, v2, p4, p5);']

The method addAccountExplicitlyWithVisibility has the following similar APIs:

- API Name: getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.9038185477256775
  - Access Control Level: SYS_OR_SIG and the following code:
Object v9 = Objects.requireNonNull(p1, "account cannot be null");
Object v10 = Objects.requireNonNull(p2, "key cannot be null");
List v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);
boolean v15 = v13.contains(Account.type);
SQLiteDatabase v43 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
Cursor v47 = v43.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v46, 0, 0, 0);
Map v44 = new HashMap();
String v49 = v47.getString(0);
String v50 = v47.getString(1);
Object v51 = v44.put(v49, v50);
return v37;

- API Name: clearPassword(Landroid/accounts/Account;)V with Similarity Score: 0.9036723971366882
  - Access Control Level: SYS_OR_SIG and the following code:
Object v14 = Objects.requireNonNull(p1, "account cannot be null");
int v15 = UserHandle.getCallingUserId();
if (Account.type != 0) {
List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
boolean v18 = v17.contains(Account.type);
long v19 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
AccountManagerService$UserAccounts.accountsDb.beginTransaction();
long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
int v25 = AccountManagerService$UserAccounts.accountsDb.updateCeAccountPassword(v24, 0);

