This is path 1 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v18 = v19;
			boolean v20 = v18.contains(Account.type);
			boolean v17 = v20;
			if (v17 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				Object v24 = this.mUsers.get(p1);
				if (v24 != 0) {
					boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v25 != 0) {
						boolean v26 = this.mLocalUnlockedUsers.get(p1);
						if (v26 == 0) {
							File v34 = new File(v35);
							String v35 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v23 = ;
								AccountManagerService$UserAccounts v22 = v23;
								Bundle v41 = Bundle.setDefusable(p3, 1);
								if (p1 != 0) {
									if (Account.name == 0) {
										int v42 = Account.name.length();
										if (v42 <= 200) {
											if (Account.type == 0) {
												int v43 = Account.type.length();
												if (v43 <= 200) {
													int v44 = this.userId;
													boolean v46 = this.mLocalUnlockedUsers.get(v44);
													boolean v45 = v46;
													if (v45 != 0) {
														SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
														v48.beginTransaction();
														SQLiteDatabase v51 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
														String v52 = new String(1);
														String v53 = new String(2);
														Cursor v54 = v51.query("ceDb.accounts", v52, "name=? AND type=?", v53, 0, 0, 0);
														boolean v55 = v54.moveToNext();
														if (v55 == 0) {
															long v56 = v54.getLong(0);
															v54.close();
															long v50 = v56;
															if ((v50 < 0) < 0) {
																SQLiteDatabase v59 = this.mDeDatabase.getReadableDatabase();
																LinkedHashMap v60 = new LinkedHashMap();
																String v62 = new String(3);
																Cursor v63 = v59.query("accounts", v62, 0, 0, 0, 0, "_id");
																boolean v64 = v63.moveToNext();
																if (v64 == 0) {
																	long v65 = v63.getLong(0);
																	String v66 = v63.getString(1);
																	String v67 = v63.getString(2);
																	Account v68 = new Account(v67,v66);
																	Long v70 = Long.valueOf(v65);
																	Object v71 = v60.put(v70, v68);
																	boolean v72 = v63.moveToNext();
																	if (v72 == 0) {
																		v63.close();
																		Map v58 = v60;
																		int v74 = v58.size();
																		if (v74 <= 100) {
																			String v78 = p1.toSafeString();
																			SQLiteDatabase v84 = this.mDeDatabase.getWritableDatabase();
																			v84.endTransaction();
																			boolean v40 = 0;
																			IAccountManager$Stub.restoreCallingIdentity(v21);
																			return v40;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v18 = AccountManagerService.getTypesManagedByCaller(v2, v3);
			boolean v19 = v18.contains(Account.type);
			boolean v17 = v19;
			if (v17 == 0) {
				long v20 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v22 = AccountManagerService.getUserAccountsNotChecked(v3);
				AccountManagerService$UserAccounts v21 = v22;
				Bundle v24 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v25 = Account.name.length();
						if (v25 <= 200) {
							if (Account.type == 0) {
								int v26 = Account.type.length();
								if (v26 <= 200) {
									int v27 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v21);
									boolean v28 = AccountManagerService.isLocalUnlockedUser(v27);
									if (v28 != 0) {
										AccountManagerService$UserAccounts.accountsDb.beginTransaction();
										long v30 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
										if ((v30 < 0) < 0) {
											Map v31 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
											int v32 = v31.size();
											if (v32 <= 100) {
												String v36 = p1.toSafeString();
												AccountManagerService$UserAccounts.accountsDb.endTransaction();
												boolean v23 = 0;
												IAccountManager$Stub.restoreCallingIdentity(v20);
												return v23;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (v4 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		boolean v17 = p0.isAccountManagedByCaller(Account.type, v2, v3);
		if (v17 == 0) {
			long v18 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v3);
			boolean v20 = p0.addAccountInternal(v19, p1, p2, p3, v2, p4, p5);
			IAccountManager$Stub.restoreCallingIdentity(v18);
			return v20;
		}
	}
}
