The method isCredentialsUpdateSuggested has the following code snippet:

This is path 1 for the API with depth 2:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	if (v1 == 0) {
		int v9 = Binder.getCallingUid();
		int v12 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v16 = TextUtils.isEmpty(p3);
				if (v16 != 0) {
					int v17 = UserHandle.getCallingUserId();
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					Object v21 = this.mUsers.get(p1);
					if (v21 != 0) {
						boolean v22 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v22 != 0) {
							boolean v23 = this.mLocalUnlockedUsers.get(p1);
							if (v23 == 0) {
								File v31 = new File(v32);
								String v32 = this.mInjector.getCeDatabaseName(p1);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v31);
								AccountManagerService.syncDeCeAccountsLocked();
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v20 = ;
									AccountManagerService$UserAccounts v19 = v20;
									AccountManagerService$15 v37 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
									if (v40 == 0) {
										IAccountAuthenticatorCache v48 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
										AuthenticatorDescription v49 = AuthenticatorDescription.newKey(this.mAccountType);
										int v50 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										RegisteredServicesCache$ServiceInfo v51 = v48.getServiceInfo(v49, v50);
										if (v51 != 0) {
											int v52 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
											boolean v53 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v52);
											if (v53 != 0) {
												if (ComponentInfo.directBootAware != 0) {
													Intent v54 = new Intent();
													Intent v56 = v54.setAction("android.accounts.AccountAuthenticator");
													Intent v57 = v54.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
													if (v58 == 0) {
														IAccountAuthenticatorCache v65 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
														int v66 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														boolean v67 = v65.getBindInstantServiceAllowed(v66);
														if (v67 == 0) {
															int v68 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
															UserHandle v69 = UserHandle.of(v68);
															boolean v70 = AccountManagerService.mContext.bindServiceAsUser(v54, AccountManagerService$Session, , v69);
															if (v70 != 0) {
																if (v71 == 0) {
																	boolean v47 = 0;
																	if (v47 != 0) {
																		long v76 = SystemClock.elapsedRealtime();
																		String v77 = AccountManagerService$Session.toDebugString(v76);
																		String v75 = v77;
																		this.mNumErrors = (this.mNumErrors + 1);
																		IAccountManagerResponse v82 = AccountManagerService$Session.getResponseAndClose();
																		if (v82 == 0) {
																			if (v83 == 0) {
																				Class v86 = AccountManagerService$Session.getClass();
																				String v87 = v86.getSimpleName();
																				v82.onError(1, "bind failure");
																				if (v94 == 0) {
																					IAccountManager$Stub.restoreCallingIdentity(v18);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	if (v1 == 0) {
		int v9 = Binder.getCallingUid();
		int v12 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v16 = TextUtils.isEmpty(p3);
				if (v16 != 0) {
					int v17 = UserHandle.getCallingUserId();
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					Object v21 = this.mUsers.get(p1);
					if (v21 != 0) {
						boolean v22 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v22 != 0) {
							boolean v23 = this.mLocalUnlockedUsers.get(p1);
							if (v23 == 0) {
								File v31 = new File(v32);
								String v32 = this.mInjector.getCeDatabaseName(p1);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v31);
								AccountManagerService.syncDeCeAccountsLocked();
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v20 = ;
									AccountManagerService$UserAccounts v19 = v20;
									AccountManagerService$15 v37 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
									if (v40 == 0) {
										IAccountAuthenticatorCache v48 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
										AuthenticatorDescription v49 = AuthenticatorDescription.newKey(this.mAccountType);
										int v50 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										RegisteredServicesCache$ServiceInfo v51 = v48.getServiceInfo(v49, v50);
										if (v51 != 0) {
											int v52 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
											boolean v53 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v52);
											if (v53 != 0) {
												if (ComponentInfo.directBootAware != 0) {
													Intent v54 = new Intent();
													Intent v56 = v54.setAction("android.accounts.AccountAuthenticator");
													Intent v57 = v54.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
													if (v58 == 0) {
														IAccountAuthenticatorCache v65 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
														int v66 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														boolean v67 = v65.getBindInstantServiceAllowed(v66);
														if (v67 == 0) {
															int v68 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
															UserHandle v69 = UserHandle.of(v68);
															boolean v70 = AccountManagerService.mContext.bindServiceAsUser(v54, AccountManagerService$Session, , v69);
															if (v70 != 0) {
																boolean v47 = 1;
																if (v47 != 0) {
																	long v75 = SystemClock.elapsedRealtime();
																	String v76 = AccountManagerService$Session.toDebugString(v75);
																	String v74 = v76;
																	this.mNumErrors = (this.mNumErrors + 1);
																	IAccountManagerResponse v81 = AccountManagerService$Session.getResponseAndClose();
																	if (v81 == 0) {
																		if (v82 == 0) {
																			Class v85 = AccountManagerService$Session.getClass();
																			String v86 = v85.getSimpleName();
																			v81.onError(1, "bind failure");
																			if (v93 == 0) {
																				IAccountManager$Stub.restoreCallingIdentity(v18);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	if (v1 == 0) {
		int v9 = Binder.getCallingUid();
		int v12 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v16 = TextUtils.isEmpty(p3);
				if (v16 != 0) {
					int v17 = UserHandle.getCallingUserId();
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					Object v21 = this.mUsers.get(p1);
					if (v21 != 0) {
						File v22 = new File(v23);
						String v23 = this.mInjector.getPreNDatabaseName(p1);
						File v25 = new File(v26);
						String v26 = this.mInjector.getDeDatabaseName(p1);
						AccountManagerService$UserAccounts v28 = new AccountManagerService$UserAccounts(this.mContext,p1,v22,v25);
						this.mUsers.append(p1, v28);
						AccountManagerService.purgeOldGrants(v28);
						AccountManager.invalidateLocalAccountsDataCaches();
						boolean v33 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v33 != 0) {
							boolean v34 = this.mLocalUnlockedUsers.get(p1);
							if (v34 == 0) {
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v20 = ;
									AccountManagerService$UserAccounts v19 = v20;
									AccountManagerService$15 v36 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
									if (v39 == 0) {
										IAccountAuthenticatorCache v47 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
										AuthenticatorDescription v48 = AuthenticatorDescription.newKey(this.mAccountType);
										int v49 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										RegisteredServicesCache$ServiceInfo v50 = v47.getServiceInfo(v48, v49);
										if (v50 != 0) {
											int v51 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
											boolean v52 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v51);
											if (v52 != 0) {
												if (ComponentInfo.directBootAware != 0) {
													Intent v53 = new Intent();
													Intent v55 = v53.setAction("android.accounts.AccountAuthenticator");
													Intent v56 = v53.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
													if (v57 == 0) {
														IAccountAuthenticatorCache v64 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
														int v65 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														boolean v66 = v64.getBindInstantServiceAllowed(v65);
														if (v66 == 0) {
															int v67 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
															UserHandle v68 = UserHandle.of(v67);
															boolean v69 = AccountManagerService.mContext.bindServiceAsUser(v53, AccountManagerService$Session, , v68);
															if (v69 != 0) {
																if (v70 == 0) {
																	boolean v46 = 0;
																	if (v46 != 0) {
																		long v75 = SystemClock.elapsedRealtime();
																		String v76 = AccountManagerService$Session.toDebugString(v75);
																		String v74 = v76;
																		this.mNumErrors = (this.mNumErrors + 1);
																		IAccountManagerResponse v81 = AccountManagerService$Session.getResponseAndClose();
																		if (v81 == 0) {
																			if (v82 == 0) {
																				Class v85 = AccountManagerService$Session.getClass();
																				String v86 = v85.getSimpleName();
																				v81.onError(1, "bind failure");
																				if (v93 == 0) {
																					IAccountManager$Stub.restoreCallingIdentity(v18);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v9 = Binder.getCallingUid();\nAccountManagerService$15 v37 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);\nAccountManagerService.validateAccountsInternal();', 'int v17 = UserHandle.getCallingUserId();\nAccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);\nAccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);', 'AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v17);\nAccountManagerService$15 v20 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);\nv20.bind();']

The method isCredentialsUpdateSuggested has the following similar APIs:

- API Name: getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9429931044578552
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = UserHandle.getUserId(v3);
long v7 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);

- API Name: getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9349410533905029
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = UserHandle.getUserId(v3);
long v7 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);
AccountManagerService$7 v9 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);

