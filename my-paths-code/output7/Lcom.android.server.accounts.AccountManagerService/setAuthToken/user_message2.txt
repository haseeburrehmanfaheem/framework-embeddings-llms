The method setAuthToken has the following code snippet:

This is path 1 for the API with depth 2:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				long v23 = IAccountManager$Stub.clearCallingIdentity();
				Object v26 = this.mUsers.get(p1);
				if (v26 != 0) {
					boolean v27 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v27 != 0) {
						boolean v28 = this.mLocalUnlockedUsers.get(p1);
						if (v28 == 0) {
							File v36 = new File(v37);
							String v37 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v36);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v25 = ;
								AccountManagerService$UserAccounts v24 = v25;
								if (p1 == 0) {
									if (p2 != 0) {
										HashMap v44 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
										HashMap v45 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
										Object v46 = v45.get(p2);
										if (v46 != 0) {
											StringBuilder v47 = new StringBuilder();
											StringBuilder v49 = v47.append("AccountManagerService:37:");
											int v50 = p2.hashCode();
											StringBuilder v51 = v47.append(v50);
											String v52 = v47.toString();
											AccountManagerService$NotificationId v53 = new AccountManagerService$NotificationId(v52,37);
											HashMap v55 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
											Object v56 = v55.put(p2, v53);
											AccountManagerService$NotificationId v43 = ;
											int v57 = this.userId;
											UserHandle v58 = UserHandle.of(v57);
											String v60 = this.mContext.getPackageName();
											AccountManagerService.cancelNotification(v43, v60, v58);
											SQLiteDatabase v63 = this.mDeDatabase.getWritableDatabase();
											v63.beginTransaction();
											SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabase();
											String v67 = new String(1);
											String v68 = new String(2);
											Cursor v69 = v66.query("accounts", v67, "name=? AND type=?", v68, 0, 0, 0);
											boolean v70 = v69.moveToNext();
											if (v70 == 0) {
												long v71 = v69.getLong(0);
												v69.close();
												long v65 = v71;
												if ((v65 < 0) >= 0) {
													SQLiteDatabase v74 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
													String v75 = new String(2);
													String v76 = String.valueOf(v65);
													int v77 = v74.delete("ceDb.authtokens", "accounts_id=? AND type=?", v75);
													if (v77 <= 0) {
														boolean v73 = ;
														SQLiteDatabase v79 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
														ContentValues v80 = new ContentValues();
														Long v82 = Long.valueOf(v65);
														v80.put("accounts_id", v82);
														v80.put("type", p3);
														v80.put("authtoken", p4);
														long v86 = v79.insert("ceDb.authtokens", "authtoken", v80);
														long v78 = v86;
														if ((v78 < 0) < 0) {
															SQLiteDatabase v88 = this.mDeDatabase.getWritableDatabase();
															v88.setTransactionSuccessful();
															SQLiteDatabase v91 = this.mDeDatabase.getWritableDatabase();
															v91.endTransaction();
															AccountManagerService.writeAuthTokenIntoCacheLocked(v24, p1, p2, p3);
															boolean v42 = 1;
															IAccountManager$Stub.restoreCallingIdentity(v23);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				long v23 = IAccountManager$Stub.clearCallingIdentity();
				Object v26 = this.mUsers.get(p1);
				if (v26 != 0) {
					boolean v27 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v27 != 0) {
						boolean v28 = this.mLocalUnlockedUsers.get(p1);
						if (v28 == 0) {
							File v36 = new File(v37);
							String v37 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v36);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v25 = ;
								AccountManagerService$UserAccounts v24 = v25;
								if (p1 == 0) {
									if (p2 != 0) {
										HashMap v44 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
										HashMap v45 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
										Object v46 = v45.get(p2);
										if (v46 != 0) {
											StringBuilder v47 = new StringBuilder();
											StringBuilder v49 = v47.append("AccountManagerService:37:");
											int v50 = p2.hashCode();
											StringBuilder v51 = v47.append(v50);
											String v52 = v47.toString();
											AccountManagerService$NotificationId v53 = new AccountManagerService$NotificationId(v52,37);
											HashMap v55 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
											Object v56 = v55.put(p2, v53);
											AccountManagerService$NotificationId v43 = ;
											int v57 = this.userId;
											UserHandle v58 = UserHandle.of(v57);
											String v60 = this.mContext.getPackageName();
											AccountManagerService.cancelNotification(v43, v60, v58);
											SQLiteDatabase v63 = this.mDeDatabase.getWritableDatabase();
											v63.beginTransaction();
											SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabase();
											String v67 = new String(1);
											String v68 = new String(2);
											Cursor v69 = v66.query("accounts", v67, "name=? AND type=?", v68, 0, 0, 0);
											boolean v70 = v69.moveToNext();
											if (v70 == 0) {
												v69.close();
												long v65 = -1;
												if ((v65 < 0) >= 0) {
													SQLiteDatabase v73 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
													String v74 = new String(2);
													String v75 = String.valueOf(v65);
													int v76 = v73.delete("ceDb.authtokens", "accounts_id=? AND type=?", v74);
													if (v76 <= 0) {
														boolean v72 = ;
														SQLiteDatabase v78 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
														ContentValues v79 = new ContentValues();
														Long v81 = Long.valueOf(v65);
														v79.put("accounts_id", v81);
														v79.put("type", p3);
														v79.put("authtoken", p4);
														long v85 = v78.insert("ceDb.authtokens", "authtoken", v79);
														long v77 = v85;
														if ((v77 < 0) < 0) {
															SQLiteDatabase v87 = this.mDeDatabase.getWritableDatabase();
															v87.setTransactionSuccessful();
															SQLiteDatabase v90 = this.mDeDatabase.getWritableDatabase();
															v90.endTransaction();
															AccountManagerService.writeAuthTokenIntoCacheLocked(v24, p1, p2, p3);
															boolean v42 = 1;
															IAccountManager$Stub.restoreCallingIdentity(v23);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				long v23 = IAccountManager$Stub.clearCallingIdentity();
				Object v26 = this.mUsers.get(p1);
				if (v26 != 0) {
					File v27 = new File(v28);
					String v28 = this.mInjector.getPreNDatabaseName(p1);
					File v30 = new File(v31);
					String v31 = this.mInjector.getDeDatabaseName(p1);
					AccountManagerService$UserAccounts v33 = new AccountManagerService$UserAccounts(this.mContext,p1,v27,v30);
					this.mUsers.append(p1, v33);
					AccountManagerService.purgeOldGrants(v33);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v38 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v38 != 0) {
						boolean v39 = this.mLocalUnlockedUsers.get(p1);
						if (v39 == 0) {
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v25 = ;
								AccountManagerService$UserAccounts v24 = v25;
								if (p1 == 0) {
									if (p2 != 0) {
										HashMap v43 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
										HashMap v44 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
										Object v45 = v44.get(p2);
										if (v45 != 0) {
											StringBuilder v46 = new StringBuilder();
											StringBuilder v48 = v46.append("AccountManagerService:37:");
											int v49 = p2.hashCode();
											StringBuilder v50 = v46.append(v49);
											String v51 = v46.toString();
											AccountManagerService$NotificationId v52 = new AccountManagerService$NotificationId(v51,37);
											HashMap v54 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
											Object v55 = v54.put(p2, v52);
											AccountManagerService$NotificationId v42 = ;
											int v56 = this.userId;
											UserHandle v57 = UserHandle.of(v56);
											String v59 = this.mContext.getPackageName();
											AccountManagerService.cancelNotification(v42, v59, v57);
											SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabase();
											v62.beginTransaction();
											SQLiteDatabase v65 = this.mDeDatabase.getReadableDatabase();
											String v66 = new String(1);
											String v67 = new String(2);
											Cursor v68 = v65.query("accounts", v66, "name=? AND type=?", v67, 0, 0, 0);
											boolean v69 = v68.moveToNext();
											if (v69 == 0) {
												long v70 = v68.getLong(0);
												v68.close();
												long v64 = v70;
												if ((v64 < 0) >= 0) {
													SQLiteDatabase v73 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
													String v74 = new String(2);
													String v75 = String.valueOf(v64);
													int v76 = v73.delete("ceDb.authtokens", "accounts_id=? AND type=?", v74);
													if (v76 <= 0) {
														boolean v72 = ;
														SQLiteDatabase v78 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
														ContentValues v79 = new ContentValues();
														Long v81 = Long.valueOf(v64);
														v79.put("accounts_id", v81);
														v79.put("type", p3);
														v79.put("authtoken", p4);
														long v85 = v78.insert("ceDb.authtokens", "authtoken", v79);
														long v77 = v85;
														if ((v77 < 0) < 0) {
															SQLiteDatabase v87 = this.mDeDatabase.getWritableDatabase();
															v87.setTransactionSuccessful();
															SQLiteDatabase v90 = this.mDeDatabase.getWritableDatabase();
															v90.endTransaction();
															AccountManagerService.writeAuthTokenIntoCacheLocked(v24, p1, p2, p3);
															boolean v41 = 1;
															IAccountManager$Stub.restoreCallingIdentity(v23);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nObject v26 = this.mUsers.get(p1);\nHashMap v44 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);\nSQLiteDatabase v63 = this.mDeDatabase.getWritableDatabase();\nCursor v69 = v66.query("accounts", v67, "name=? AND type=?", v68, 0, 0, 0);', 'AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v18);\nAccountManagerService$NotificationId v26 = AccountManagerService.getSigninRequiredNotificationId(v23, p1);\nAccountManagerService.cancelNotification(v26, v28);\nAccountManagerService$UserAccounts.accountsDb.beginTransaction();', 'p0.isAccountManagedByCaller(Account.type, v1, v18);\nAccountManagerService$UserAccounts v21 = p0.getUserAccounts(v18);\nboolean v22 = p0.saveAuthTokenToDatabase(v21, p1, p2, p3);']

The method setAuthToken has the following similar APIs:

- API Name: getPassword(Landroid/accounts/Account;)Ljava/lang/String; with Similarity Score: 0.8753952980041504
  - Access Control Level: SYS_OR_SIG and the following code:
List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
boolean v19 = v17.contains(Account.type);
long v20 = IAccountManager$Stub.clearCallingIdentity();
Object v23 = this.mUsers.get(p1);
SQLiteDatabase v44 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
Cursor v47 = v44.query("ceDb.accounts", v46, "name=? AND type=?", v45, 0, 0, 0);
String v49 = v47.getString(0);
v47.close();
String v43 = v49;
IAccountManager$Stub.restoreCallingIdentity(v20);
return v39;

- API Name: removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V with Similarity Score: 0.8505976796150208
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v20 = p0.isCrossUser(v1, p4);
boolean v23 = p0.isAccountManagedByCaller(Account.type, v1, v22);

