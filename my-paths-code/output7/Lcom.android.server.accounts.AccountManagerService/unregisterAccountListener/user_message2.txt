The method unregisterAccountListener has the following code snippet:

This is path 1 for the API with depth 2:
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	Object v7 = this.mUsers.get(p1);
	if (v7 != 0) {
		boolean v8 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
		if (v8 != 0) {
			boolean v9 = this.mLocalUnlockedUsers.get(p1);
			if (v9 == 0) {
				File v17 = new File(v18);
				String v18 = this.mInjector.getCeDatabaseName(p1);
				AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v17);
				AccountManagerService.syncDeCeAccountsLocked();
				if ( == 0) {
					AccountManagerService.validateAccountsInternal(, 1);
					AccountManagerService$UserAccounts v6 = ;
					AccountManagerService$UserAccounts v5 = v6;
					Map v24 = this.mReceiversForType;
					if (p1 != 0) {
						String v25 = new String(1);
						if ( >= .length) {
							Map v26 = this.mReceiversForType;
							Object v27 = v26.get([]);
							if (v27 == 0) {
								Object v28 = v27.get(p2);
								if (v28 == 0) {
									Object v29 = v27.get(p2);
									int v30 = v29.intValue();
									if (v30 != 1) {
										int v31 = v29.intValue();
										Integer v32 = Integer.valueOf((v31 - 1));
										Object v33 = v27.put(p2, v32);
										if ( >= .length) {
											IAccountManager$Stub.restoreCallingIdentity(v4);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	Object v7 = this.mUsers.get(p1);
	if (v7 != 0) {
		boolean v8 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
		if (v8 != 0) {
			boolean v9 = this.mLocalUnlockedUsers.get(p1);
			if (v9 == 0) {
				File v17 = new File(v18);
				String v18 = this.mInjector.getCeDatabaseName(p1);
				AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v17);
				AccountManagerService.syncDeCeAccountsLocked();
				if ( == 0) {
					AccountManagerService.validateAccountsInternal(, 1);
					AccountManagerService$UserAccounts v6 = ;
					AccountManagerService$UserAccounts v5 = v6;
					Map v24 = this.mReceiversForType;
					if (p1 != 0) {
						String v25 = new String(1);
						if ( >= .length) {
							Map v26 = this.mReceiversForType;
							Object v27 = v26.get([]);
							if (v27 == 0) {
								Object v28 = v27.get(p2);
								if (v28 == 0) {
									Object v29 = v27.get(p2);
									int v30 = v29.intValue();
									if (v30 != 1) {
										Object v31 = v27.remove(p2);
										if ( >= .length) {
											IAccountManager$Stub.restoreCallingIdentity(v4);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void unregisterAccountListener(String p1, String p2){
	int v3 = UserHandle.getCallingUserId();
	long v4 = IAccountManager$Stub.clearCallingIdentity();
	Object v7 = this.mUsers.get(p1);
	if (v7 != 0) {
		File v8 = new File(v9);
		String v9 = this.mInjector.getPreNDatabaseName(p1);
		File v11 = new File(v12);
		String v12 = this.mInjector.getDeDatabaseName(p1);
		AccountManagerService$UserAccounts v14 = new AccountManagerService$UserAccounts(this.mContext,p1,v8,v11);
		this.mUsers.append(p1, v14);
		AccountManagerService.purgeOldGrants(v14);
		AccountManager.invalidateLocalAccountsDataCaches();
		boolean v19 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
		if (v19 != 0) {
			boolean v20 = this.mLocalUnlockedUsers.get(p1);
			if (v20 == 0) {
				if ( == 0) {
					AccountManagerService.validateAccountsInternal(, 1);
					AccountManagerService$UserAccounts v6 = ;
					AccountManagerService$UserAccounts v5 = v6;
					Map v23 = this.mReceiversForType;
					if (p1 != 0) {
						String v24 = new String(1);
						if ( >= .length) {
							Map v25 = this.mReceiversForType;
							Object v26 = v25.get([]);
							if (v26 == 0) {
								Object v27 = v26.get(p2);
								if (v27 == 0) {
									Object v28 = v26.get(p2);
									int v29 = v28.intValue();
									if (v29 != 1) {
										int v30 = v28.intValue();
										Integer v31 = Integer.valueOf((v30 - 1));
										Object v32 = v26.put(p2, v31);
										if ( >= .length) {
											IAccountManager$Stub.restoreCallingIdentity(v4);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v17);\nAccountManagerService.syncDeCeAccountsLocked();\nAccountManagerService.validateAccountsInternal(, 1);', 'Object v7 = this.mUsers.get(p1);\nMap v24 = this.mReceiversForType;\nObject v28 = v27.get(p2);\nObject v33 = v27.put(p2, v32);', 'File v17 = new File(v18);']

The method unregisterAccountListener has the following similar APIs:

- API Name: getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8361170887947083
  - Access Control Level: SYS_OR_SIG and the following code:
Object v24 = this.mUsers.get(p1);
File v34 = new File(v35);
String v35 = this.mInjector.getCeDatabaseName(p1);
AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
AccountManagerService.syncDeCeAccountsLocked();
AccountManagerService.validateAccountsInternal(, 1);
Collection v50 = AccountManagerService$UserAccounts.accountCache.values();
Iterator v51 = v50.iterator();
Object v53 = v51.next();
System.arraycopy(v53, 0, v49, , v53.length);
Account v49 = new Account()

- API Name: getPreviousName(Landroid/accounts/Account;)Ljava/lang/String; with Similarity Score: 0.8101780414581299
  - Access Control Level: SYS_OR_SIG and the following code:
File v29 = new File(v30);
this.mInjector.getCeDatabaseName(p1);
AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v29);

