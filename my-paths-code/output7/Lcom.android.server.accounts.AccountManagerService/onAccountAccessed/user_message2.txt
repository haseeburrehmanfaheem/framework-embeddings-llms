The method onAccountAccessed has the following code snippet:

This is path 1 for the API with depth 2:
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1);
	List v9 = v10;
	boolean v11 = v9.isEmpty();
	if (v11 == 0) {
		long v12 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v14 = AccountManagerService.getUserAccountsNotChecked(p1);
		AccountManagerService$UserAccounts v13 = v14;
		ArrayList v16 = new ArrayList();
		Iterator v18 = v9.iterator();
		boolean v19 = v18.hasNext();
		if (v19 == 0) {
			Object v20 = v18.next();
			Account v21 = AccountManagerService.getAccountsFromCache(v13, v20, v7, p2, 0);
			if (v21 == 0) {
				List v22 = Arrays.asList(v21);
				boolean v23 = v16.addAll(v22);
				boolean v24 = v18.hasNext();
				if (v24 == 0) {
					int v25 = v16.size();
					Account v26 = new Account(v25);
					int v27 = v16.size();
					if ( >= v27) {
						Object v28 = v16.get();
						int v29 = v16.size();
						if ( >= v29) {
							Account v15 = v26;
							IAccountManager$Stub.restoreCallingIdentity(v12);
							Account v6 = v15;
							if ( >= v6.length) {
								String v31 = v6[].getAccessId();
								boolean v32 = Objects.equals(v31, p1);
								if (v32 == 0) {
									int v35 = UserHandle.getUserId(v1);
									if (v36 == 0) {
										int v37 = UserHandle.getUserId(v1);
										AccountManagerService$UserAccounts v39 = AccountManagerService.getUserAccountsNotChecked(v37);
										AccountManagerService$UserAccounts v38 = v39;
										Object v41 = Objects.requireNonNull(, "packageName cannot be null");
										long v42 = IAccountManager$Stub.clearCallingIdentity();
										int v43 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v38);
										int v44 = this.mPackageManager.getPackageUidAsUser(, v43);
										IAccountManager$Stub.restoreCallingIdentity(v42);
										String v49 = caughtException.getMessage();
										Integer v53 = Integer.valueOf(3);
										Integer v40 = v53;
										int v54 = v40.intValue();
										if (v54 == 1) {
											if (v54 != 2) {
												boolean v33 = ;
												if (v33 != 0) {
													if ( >= v6.length) {
														Binder.restoreCallingIdentity(v4);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1);
	List v9 = v10;
	boolean v11 = v9.isEmpty();
	if (v11 == 0) {
		long v12 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v14 = AccountManagerService.getUserAccountsNotChecked(p1);
		AccountManagerService$UserAccounts v13 = v14;
		ArrayList v16 = new ArrayList();
		Iterator v18 = v9.iterator();
		boolean v19 = v18.hasNext();
		if (v19 == 0) {
			Object v20 = v18.next();
			Account v21 = AccountManagerService.getAccountsFromCache(v13, v20, v7, p2, 0);
			if (v21 == 0) {
				List v22 = Arrays.asList(v21);
				boolean v23 = v16.addAll(v22);
				boolean v24 = v18.hasNext();
				if (v24 == 0) {
					int v25 = v16.size();
					Account v26 = new Account(v25);
					int v27 = v16.size();
					if ( >= v27) {
						Object v28 = v16.get();
						int v29 = v16.size();
						if ( >= v29) {
							Account v15 = v26;
							IAccountManager$Stub.restoreCallingIdentity(v12);
							Account v6 = v15;
							if ( >= v6.length) {
								String v31 = v6[].getAccessId();
								boolean v32 = Objects.equals(v31, p1);
								if (v32 == 0) {
									int v35 = UserHandle.getUserId(v1);
									if (v36 == 0) {
										int v37 = UserHandle.getUserId(v1);
										AccountManagerService$UserAccounts v39 = AccountManagerService.getUserAccountsNotChecked(v37);
										AccountManagerService$UserAccounts v38 = v39;
										if (v46 == 0) {
											int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v38);
											int v48 = AccountManagerService.checkPackageSignature(Account.type, v44, v47);
											if (v48 != 2) {
												int v49 = AccountManagerService.getAccountVisibilityFromCache(p1, , v38);
												if (v49 == 0) {
													Integer v50 = Integer.valueOf(v49);
													Integer v40 = v50;
													int v51 = v40.intValue();
													if (v51 == 1) {
														if (v51 != 2) {
															boolean v33 = ;
															if (v33 != 0) {
																if ( >= v6.length) {
																	Binder.restoreCallingIdentity(v4);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void onAccountAccessed(String p1){
	int v3 = UserHandle.getCallingUserId();
	long v4 = Binder.clearCallingIdentity();
	String v5 = this.mContext.getOpPackageName();
	List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1);
	List v9 = v10;
	boolean v11 = v9.isEmpty();
	if (v11 == 0) {
		Account v6 = this.EMPTY_ACCOUNT_ARRAY;
		if ( >= v6.length) {
			String v12 = v6[].getAccessId();
			boolean v13 = Objects.equals(v12, p1);
			if (v13 == 0) {
				int v16 = UserHandle.getUserId(v1);
				if (v17 == 0) {
					int v18 = UserHandle.getUserId(v1);
					AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v18);
					AccountManagerService$UserAccounts v19 = v20;
					Object v22 = Objects.requireNonNull(, "packageName cannot be null");
					long v23 = IAccountManager$Stub.clearCallingIdentity();
					int v24 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v19);
					int v25 = this.mPackageManager.getPackageUidAsUser(, v24);
					IAccountManager$Stub.restoreCallingIdentity(v23);
					String v30 = caughtException.getMessage();
					Integer v34 = Integer.valueOf(3);
					Integer v21 = v34;
					int v35 = v21.intValue();
					if (v35 == 1) {
						if (v35 != 2) {
							boolean v14 = ;
							if (v14 != 0) {
								if ( >= v6.length) {
									Binder.restoreCallingIdentity(v4);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1);\nAccount v21 = AccountManagerService.getAccountsFromCache(v13, v20, v7, p2, 0);\nArrayList v16 = new ArrayList();', 'List v9 = AccountManagerService.getTypesVisibleToCaller(v7, v3, v5);\nAccount v13 = AccountManagerService.getAccountsInternal(v12, v7, v5, v9, 0);', 'Account v6 = p0.getAccounts(v3, v5);\nboolean v9 = p0.hasAccountAccess(v6[], 0, v1);']

The method onAccountAccessed has the following similar APIs:

- API Name: getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.9177314043045044
  - Access Control Level: SYS_OR_SIG and the following code:
List v25 = AccountManagerService.getTypesForCaller(, p2, 1);
ArrayList v29 = new ArrayList();
boolean v31 = v29.add(p1);
Account v41 = AccountManagerService.getAccountsFromCache(v33, v40, , , p6);
Account v46 = new Account(v45);

- API Name: getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.9016778469085693
  - Access Control Level: SYS_OR_SIG and the following code:
List v29 = AccountManagerService.getTypesVisibleToCaller(, v2, );
boolean v30 = v29.isEmpty();
ArrayList v33 = new ArrayList();
boolean v35 = v33.add(p1);
Account v38 = AccountManagerService.getAccountsInternal(v37, , , , 0);
IAccountManager$Stub.restoreCallingIdentity(v36);
Account v8 = v38;
return v8;

