The method addSharedAccountsFromParentUser has the following code snippet:

This is path 1 for the API with depth 2:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	if (v24 != 0) {
		if (p1 == 0) {
			boolean v25 = v23.contains(p1);
			if (v25 == 0) {
				List v26 = AccountManagerService.getTypesVisibleToCaller(, p2, );
				boolean v27 = v26.isEmpty();
				if (v27 != 0) {
					if (p1 == 0) {
						boolean v28 = v26.contains(p1);
						if (v28 != 0) {
							boolean v29 = v26.contains(p1);
							if (v29 == 0) {
								ArrayList v30 = new ArrayList();
								boolean v32 = v30.add(p1);
								long v33 = IAccountManager$Stub.clearCallingIdentity();
								AccountManagerService$UserAccounts v34 = AccountManagerService.getUserAccounts(p2);
								Account v35 = AccountManagerService.getAccountsInternal(v34, , , , 0);
								IAccountManager$Stub.restoreCallingIdentity(v33);
								Account v5 = v35;
								Account v2 = v5;
								if ( >= v2.length) {
									IActivityManager v39 = ActivityManager.getService();
									int v40 = Binder.getCallingPid();
									int v41 = Binder.getCallingUid();
									int v42 = v39.handleIncomingUser(v40, v41, p2, 1, 1, "", 0);
									int v38 = p2;
									AccountManagerService$UserAccounts v44 = AccountManagerService.getUserAccountsNotChecked(v38);
									AccountManagerService$UserAccounts v43 = v44;
									SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();
									String v47 = new String(2);
									int v48 = v46.delete("shared_accounts", "name=? AND type=?", v47);
									if (v48 <= 0) {
										boolean v45 = ;
										SQLiteDatabase v50 = this.mDeDatabase.getWritableDatabase();
										ContentValues v51 = new ContentValues();
										v51.put("name", Account.name);
										v51.put("type", Account.type);
										long v55 = v50.insert("shared_accounts", "name", v51);
										long v49 = v55;
										if ((v49 < 0) >= 0) {
											String v59 = v2[].toSafeString();
											boolean v37 = 0;
											if ( >= v2.length) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	if (v24 != 0) {
		if (p1 == 0) {
			boolean v25 = v23.contains(p1);
			if (v25 == 0) {
				List v26 = AccountManagerService.getTypesVisibleToCaller(, p2, );
				boolean v27 = v26.isEmpty();
				if (v27 != 0) {
					if (p1 == 0) {
						boolean v28 = v26.contains(p1);
						if (v28 != 0) {
							boolean v29 = v26.contains(p1);
							if (v29 == 0) {
								ArrayList v30 = new ArrayList();
								boolean v32 = v30.add(p1);
								long v33 = IAccountManager$Stub.clearCallingIdentity();
								AccountManagerService$UserAccounts v34 = AccountManagerService.getUserAccounts(p2);
								Account v35 = AccountManagerService.getAccountsInternal(v34, , , , 0);
								IAccountManager$Stub.restoreCallingIdentity(v33);
								Account v5 = v35;
								Account v2 = v5;
								if ( >= v2.length) {
									IActivityManager v39 = ActivityManager.getService();
									int v40 = Binder.getCallingPid();
									int v41 = Binder.getCallingUid();
									int v42 = v39.handleIncomingUser(v40, v41, p2, 1, 1, "", 0);
									int v38 = v42;
									AccountManagerService$UserAccounts v44 = AccountManagerService.getUserAccountsNotChecked(v38);
									AccountManagerService$UserAccounts v43 = v44;
									SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();
									String v47 = new String(2);
									int v48 = v46.delete("shared_accounts", "name=? AND type=?", v47);
									if (v48 <= 0) {
										boolean v45 = ;
										SQLiteDatabase v50 = this.mDeDatabase.getWritableDatabase();
										ContentValues v51 = new ContentValues();
										v51.put("name", Account.name);
										v51.put("type", Account.type);
										long v55 = v50.insert("shared_accounts", "name", v51);
										long v49 = v55;
										if ((v49 < 0) >= 0) {
											String v59 = v2[].toSafeString();
											boolean v37 = 0;
											if ( >= v2.length) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void addSharedAccountsFromParentUser(int p1, int p2, String p3){
	if (v24 != 0) {
		if (p1 == 0) {
			boolean v25 = v23.contains(p1);
			if (v25 == 0) {
				List v26 = AccountManagerService.getTypesVisibleToCaller(, p2, );
				boolean v27 = v26.isEmpty();
				if (v27 != 0) {
					if (p1 == 0) {
						boolean v28 = v26.contains(p1);
						if (v28 != 0) {
							Account v5 = this.EMPTY_ACCOUNT_ARRAY;
							Account v2 = v5;
							if ( >= v2.length) {
								IActivityManager v31 = ActivityManager.getService();
								int v32 = Binder.getCallingPid();
								int v33 = Binder.getCallingUid();
								int v34 = v31.handleIncomingUser(v32, v33, p2, 1, 1, "", 0);
								int v30 = p2;
								AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccountsNotChecked(v30);
								AccountManagerService$UserAccounts v35 = v36;
								SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase();
								String v39 = new String(2);
								int v40 = v38.delete("shared_accounts", "name=? AND type=?", v39);
								if (v40 <= 0) {
									boolean v37 = ;
									SQLiteDatabase v42 = this.mDeDatabase.getWritableDatabase();
									ContentValues v43 = new ContentValues();
									v43.put("name", Account.name);
									v43.put("type", Account.type);
									long v47 = v42.insert("shared_accounts", "name", v43);
									long v41 = v47;
									if ((v41 < 0) >= 0) {
										String v51 = v2[].toSafeString();
										boolean v29 = 0;
										if ( >= v2.length) {
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v26 = AccountManagerService.getTypesVisibleToCaller(, p2, );\nArrayList v30 = new ArrayList();\nboolean v32 = v30.add(p1);\nSQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();\nint v48 = v46.delete("shared_accounts", "name=? AND type=?", v47);', 'Account v5 = AccountManagerService.getAccountsAsUserForPackage(0, p1, p3, -1, p3, 0);\nAccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccounts(v7);\nboolean v9 = AccountManagerService$UserAccounts.accountsDb.deleteSharedAccount(v2[]);\nlong v10 = AccountManagerService$UserAccounts.accountsDb.insertSharedAccount(v2[]);', 'Account v2 = p0.getAccountsAsUser(0, p1, p3);\nboolean v3 = p0.addSharedAccountAsUser(v2[], p2);']

The method addSharedAccountsFromParentUser has the following similar APIs:

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z with Similarity Score: 0.8527511358261108
  - Access Control Level: SYS_OR_SIG and the following code:
Object v16 = Objects.requireNonNull(p1, "account cannot be null");
List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
boolean v20 = v18.contains(Account.type);
Account v68 = new Account(v67,v66);
SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
v48.beginTransaction();

- API Name: getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.8379017114639282
  - Access Control Level: SYS_OR_SIG and the following code:
List v24 = AccountManagerService.getTypesVisibleToCaller(, p2, );
ArrayList v28 = new ArrayList();
boolean v30 = v28.add(p1);
Account v33 = AccountManagerService.getAccountsInternal(v32, , , , 0);

