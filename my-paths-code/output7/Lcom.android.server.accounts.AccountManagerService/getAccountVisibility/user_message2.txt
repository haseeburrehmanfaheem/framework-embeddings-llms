The method getAccountVisibility has the following code snippet:

This is path 1 for the API with depth 2:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(p1);
				if (v13 != 0) {
					boolean v14 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v14 != 0) {
						boolean v15 = this.mLocalUnlockedUsers.get(p1);
						if (v15 == 0) {
							File v23 = new File(v24);
							String v24 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v23);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v12 = ;
								AccountManagerService$UserAccounts v11 = v12;
								boolean v29 = "android:accounts:key_legacy_visible".equals(p2);
								if (v29 == 0) {
									boolean v30 = "android:accounts:key_legacy_not_visible".equals(p2);
									if (v30 == 0) {
										if (v37 == 0) {
											int v38 = this.userId;
											if (Account.type != 0) {
												long v40 = Binder.clearCallingIdentity();
												Collection v41 = this.mAuthenticatorCache.getAllServices(v38);
												Binder.restoreCallingIdentity(v40);
												Object v43 = LocalServices.getService(PackageManagerInterna.class);
												Iterator v44 = v41.iterator();
												boolean v45 = v44.hasNext();
												if (v45 == 0) {
													Object v46 = v44.next();
													boolean v47 = Account.type.equals(AuthenticatorDescription.type);
													if (v47 == 0) {
														if (RegisteredServicesCache$ServiceInfo.uid != v35) {
															boolean v48 = v43.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v35, 16);
															if (v48 == 0) {
																boolean v49 = v44.hasNext();
																if (v49 == 0) {
																	Object v50 = v44.next();
																	boolean v51 = Account.type.equals(AuthenticatorDescription.type);
																	if (v51 == 0) {
																		if (RegisteredServicesCache$ServiceInfo.uid != v35) {
																			boolean v52 = v43.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v35, 16);
																			if (v52 == 0) {
																				int v39 = 1;
																				if (v39 != 2) {
																					Map v54 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);
																					Object v55 = v54.get(p2);
																					if (v55 == 0) {
																						int v56 = v55.intValue();
																						int v53 = ;
																						if (v53 == 0) {
																							Integer v57 = Integer.valueOf(v53);
																							Integer v31 = v57;
																							int v58 = v31.intValue();
																							IAccountManager$Stub.restoreCallingIdentity(v10);
																							return v58;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(p1);
				if (v13 != 0) {
					boolean v14 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v14 != 0) {
						boolean v15 = this.mLocalUnlockedUsers.get(p1);
						if (v15 == 0) {
							File v23 = new File(v24);
							String v24 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v23);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v12 = ;
								AccountManagerService$UserAccounts v11 = v12;
								boolean v29 = "android:accounts:key_legacy_visible".equals(p2);
								if (v29 == 0) {
									boolean v30 = "android:accounts:key_legacy_not_visible".equals(p2);
									if (v30 == 0) {
										if (v37 == 0) {
											int v38 = this.userId;
											if (Account.type != 0) {
												long v40 = Binder.clearCallingIdentity();
												Collection v41 = this.mAuthenticatorCache.getAllServices(v38);
												Binder.restoreCallingIdentity(v40);
												Object v43 = LocalServices.getService(PackageManagerInterna.class);
												Iterator v44 = v41.iterator();
												boolean v45 = v44.hasNext();
												if (v45 == 0) {
													Object v46 = v44.next();
													boolean v47 = Account.type.equals(AuthenticatorDescription.type);
													if (v47 == 0) {
														if (RegisteredServicesCache$ServiceInfo.uid != v35) {
															boolean v48 = v43.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v35, 16);
															if (v48 == 0) {
																boolean v49 = v44.hasNext();
																if (v49 == 0) {
																	Object v50 = v44.next();
																	boolean v51 = Account.type.equals(AuthenticatorDescription.type);
																	if (v51 == 0) {
																		if (RegisteredServicesCache$ServiceInfo.uid != v35) {
																			int v39 = 2;
																			if (v39 != 2) {
																				Map v53 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);
																				Object v54 = v53.get(p2);
																				if (v54 == 0) {
																					int v55 = v54.intValue();
																					int v52 = ;
																					if (v52 == 0) {
																						Integer v56 = Integer.valueOf(v52);
																						Integer v31 = v56;
																						int v57 = v31.intValue();
																						IAccountManager$Stub.restoreCallingIdentity(v10);
																						return v57;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				Object v13 = this.mUsers.get(p1);
				if (v13 != 0) {
					File v14 = new File(v15);
					String v15 = this.mInjector.getPreNDatabaseName(p1);
					File v17 = new File(v18);
					String v18 = this.mInjector.getDeDatabaseName(p1);
					AccountManagerService$UserAccounts v20 = new AccountManagerService$UserAccounts(this.mContext,p1,v14,v17);
					this.mUsers.append(p1, v20);
					AccountManagerService.purgeOldGrants(v20);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v25 != 0) {
						boolean v26 = this.mLocalUnlockedUsers.get(p1);
						if (v26 == 0) {
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v12 = ;
								AccountManagerService$UserAccounts v11 = v12;
								boolean v28 = "android:accounts:key_legacy_visible".equals(p2);
								if (v28 == 0) {
									boolean v29 = "android:accounts:key_legacy_not_visible".equals(p2);
									if (v29 == 0) {
										if (v36 == 0) {
											int v37 = this.userId;
											if (Account.type != 0) {
												long v39 = Binder.clearCallingIdentity();
												Collection v40 = this.mAuthenticatorCache.getAllServices(v37);
												Binder.restoreCallingIdentity(v39);
												Object v42 = LocalServices.getService(PackageManagerInterna.class);
												Iterator v43 = v40.iterator();
												boolean v44 = v43.hasNext();
												if (v44 == 0) {
													Object v45 = v43.next();
													boolean v46 = Account.type.equals(AuthenticatorDescription.type);
													if (v46 == 0) {
														if (RegisteredServicesCache$ServiceInfo.uid != v34) {
															boolean v47 = v42.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v34, 16);
															if (v47 == 0) {
																boolean v48 = v43.hasNext();
																if (v48 == 0) {
																	Object v49 = v43.next();
																	boolean v50 = Account.type.equals(AuthenticatorDescription.type);
																	if (v50 == 0) {
																		if (RegisteredServicesCache$ServiceInfo.uid != v34) {
																			boolean v51 = v42.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v34, 16);
																			if (v51 == 0) {
																				int v38 = 1;
																				if (v38 != 2) {
																					Map v53 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);
																					Object v54 = v53.get(p2);
																					if (v54 == 0) {
																						int v55 = v54.intValue();
																						int v52 = ;
																						if (v52 == 0) {
																							Integer v56 = Integer.valueOf(v52);
																							Integer v30 = v56;
																							int v57 = v30.intValue();
																							IAccountManager$Stub.restoreCallingIdentity(v10);
																							return v57;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = Binder.getCallingUid();\nint v4 = UserHandle.getCallingUserId();\nList v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nboolean v8 = v6.contains(Account.type);\nlong v10 = IAccountManager$Stub.clearCallingIdentity();\nObject v13 = this.mUsers.get(p1);\nMap v54 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);\nObject v55 = v54.get(p2);\nInteger v57 = Integer.valueOf(v53);\nint v58 = v31.intValue();\nIAccountManager$Stub.restoreCallingIdentity(v10);\nreturn v58;', 'List v6 = AccountManagerService.getTypesManagedByCaller(v3, v4);\nboolean v7 = v6.contains(Account.type);\nlong v9 = Binder.clearCallingIdentity();\nString v10 = this.mPackageManager.getPackagesForUid(v3);\nPackageInfo v11 = this.mPackageManager.getPackageInfo(v10[], 0);\nInteger v35 = Integer.valueOf(3);\nint v36 = v22.intValue();\nIAccountManager$Stub.restoreCallingIdentity(v17);\nreturn v36;', 'boolean v5 = p0.isAccountManagedByCaller(Account.type, v3, v4);\nlong v7 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v8 = p0.getUserAccounts(v4);\nint v11 = p0.getAccountVisibilityFromCache(p1, p2, v8);\nIAccountManager$Stub.restoreCallingIdentity(v7);\nreturn v11;']

The method getAccountVisibility has the following similar APIs:

- API Name: getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.8892933130264282
  - Access Control Level: SYS_OR_SIG and the following code:
List v29 = AccountManagerService.getTypesVisibleToCaller(, v2, );
boolean v30 = v29.isEmpty();
ArrayList v33 = new ArrayList();
boolean v35 = v33.add(p1);
Account v38 = AccountManagerService.getAccountsInternal(v37, , , , 0);
IAccountManager$Stub.restoreCallingIdentity(v36);
Account v8 = v38;
return v8;

- API Name: getPassword(Landroid/accounts/Account;)Ljava/lang/String; with Similarity Score: 0.8702291250228882
  - Access Control Level: SYS_OR_SIG and the following code:
List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);
boolean v18 = v17.contains(Account.type);
long v19 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v21 = AccountManagerService.getUserAccountsNotChecked(v15);
String v25 = AccountManagerService$UserAccounts.accountsDb.findAccountPasswordByNameAndType(Account.name, Account.type);
IAccountManager$Stub.restoreCallingIdentity(v19);
return v22;

