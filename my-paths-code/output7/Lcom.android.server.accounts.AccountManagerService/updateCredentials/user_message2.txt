The method updateCredentials has the following code snippet:

This is path 1 for the API with depth 2:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = UserHandle.getCallingUserId();
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				Object v25 = this.mUsers.get(p1);
				if (v25 != 0) {
					boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v26 != 0) {
						boolean v27 = this.mLocalUnlockedUsers.get(p1);
						if (v27 == 0) {
							File v35 = new File(v36);
							String v36 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v24 = ;
								AccountManagerService$UserAccounts v23 = v24;
								AccountManagerService$13 v41 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
								if (v44 == 0) {
									IAccountAuthenticatorCache v52 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
									AuthenticatorDescription v53 = AuthenticatorDescription.newKey(this.mAccountType);
									int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									RegisteredServicesCache$ServiceInfo v55 = v52.getServiceInfo(v53, v54);
									if (v55 != 0) {
										int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v57 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v56);
										if (v57 != 0) {
											if (ComponentInfo.directBootAware != 0) {
												Intent v58 = new Intent();
												Intent v60 = v58.setAction("android.accounts.AccountAuthenticator");
												Intent v61 = v58.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
												if (v62 == 0) {
													IAccountAuthenticatorCache v69 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
													int v70 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v71 = v69.getBindInstantServiceAllowed(v70);
													if (v71 == 0) {
														int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														UserHandle v73 = UserHandle.of(v72);
														boolean v74 = AccountManagerService.mContext.bindServiceAsUser(v58, AccountManagerService$Session, , v73);
														if (v74 != 0) {
															if (v75 == 0) {
																boolean v51 = 0;
																if (v51 != 0) {
																	long v80 = SystemClock.elapsedRealtime();
																	String v81 = AccountManagerService$Session.toDebugString(v80);
																	String v79 = v81;
																	this.mNumErrors = (this.mNumErrors + 1);
																	IAccountManagerResponse v86 = AccountManagerService$Session.getResponseAndClose();
																	if (v86 == 0) {
																		if (v87 == 0) {
																			Class v90 = AccountManagerService$Session.getClass();
																			String v91 = v90.getSimpleName();
																			v86.onError(1, "bind failure");
																			if (v98 == 0) {
																				IAccountManager$Stub.restoreCallingIdentity(v22);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = UserHandle.getCallingUserId();
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				Object v25 = this.mUsers.get(p1);
				if (v25 != 0) {
					boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v26 != 0) {
						boolean v27 = this.mLocalUnlockedUsers.get(p1);
						if (v27 == 0) {
							File v35 = new File(v36);
							String v36 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v24 = ;
								AccountManagerService$UserAccounts v23 = v24;
								AccountManagerService$13 v41 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
								if (v44 == 0) {
									IAccountAuthenticatorCache v52 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
									AuthenticatorDescription v53 = AuthenticatorDescription.newKey(this.mAccountType);
									int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									RegisteredServicesCache$ServiceInfo v55 = v52.getServiceInfo(v53, v54);
									if (v55 != 0) {
										int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v57 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v56);
										if (v57 != 0) {
											if (ComponentInfo.directBootAware != 0) {
												Intent v58 = new Intent();
												Intent v60 = v58.setAction("android.accounts.AccountAuthenticator");
												Intent v61 = v58.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
												if (v62 == 0) {
													IAccountAuthenticatorCache v69 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
													int v70 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v71 = v69.getBindInstantServiceAllowed(v70);
													if (v71 == 0) {
														int v72 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														UserHandle v73 = UserHandle.of(v72);
														boolean v74 = AccountManagerService.mContext.bindServiceAsUser(v58, AccountManagerService$Session, , v73);
														if (v74 != 0) {
															boolean v51 = 1;
															if (v51 != 0) {
																long v79 = SystemClock.elapsedRealtime();
																String v80 = AccountManagerService$Session.toDebugString(v79);
																String v78 = v80;
																this.mNumErrors = (this.mNumErrors + 1);
																IAccountManagerResponse v85 = AccountManagerService$Session.getResponseAndClose();
																if (v85 == 0) {
																	if (v86 == 0) {
																		Class v89 = AccountManagerService$Session.getClass();
																		String v90 = v89.getSimpleName();
																		v85.onError(1, "bind failure");
																		if (v97 == 0) {
																			IAccountManager$Stub.restoreCallingIdentity(v22);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = UserHandle.getCallingUserId();
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				Object v25 = this.mUsers.get(p1);
				if (v25 != 0) {
					File v26 = new File(v27);
					String v27 = this.mInjector.getPreNDatabaseName(p1);
					File v29 = new File(v30);
					String v30 = this.mInjector.getDeDatabaseName(p1);
					AccountManagerService$UserAccounts v32 = new AccountManagerService$UserAccounts(this.mContext,p1,v26,v29);
					this.mUsers.append(p1, v32);
					AccountManagerService.purgeOldGrants(v32);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v37 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v37 != 0) {
						boolean v38 = this.mLocalUnlockedUsers.get(p1);
						if (v38 == 0) {
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v24 = ;
								AccountManagerService$UserAccounts v23 = v24;
								AccountManagerService$13 v40 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
								if (v43 == 0) {
									IAccountAuthenticatorCache v51 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
									AuthenticatorDescription v52 = AuthenticatorDescription.newKey(this.mAccountType);
									int v53 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									RegisteredServicesCache$ServiceInfo v54 = v51.getServiceInfo(v52, v53);
									if (v54 != 0) {
										int v55 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v56 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v55);
										if (v56 != 0) {
											if (ComponentInfo.directBootAware != 0) {
												Intent v57 = new Intent();
												Intent v59 = v57.setAction("android.accounts.AccountAuthenticator");
												Intent v60 = v57.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
												if (v61 == 0) {
													IAccountAuthenticatorCache v68 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
													int v69 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v70 = v68.getBindInstantServiceAllowed(v69);
													if (v70 == 0) {
														int v71 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														UserHandle v72 = UserHandle.of(v71);
														boolean v73 = AccountManagerService.mContext.bindServiceAsUser(v57, AccountManagerService$Session, , v72);
														if (v73 != 0) {
															if (v74 == 0) {
																boolean v50 = 0;
																if (v50 != 0) {
																	long v79 = SystemClock.elapsedRealtime();
																	String v80 = AccountManagerService$Session.toDebugString(v79);
																	String v78 = v80;
																	this.mNumErrors = (this.mNumErrors + 1);
																	IAccountManagerResponse v85 = AccountManagerService$Session.getResponseAndClose();
																	if (v85 == 0) {
																		if (v86 == 0) {
																			Class v89 = AccountManagerService$Session.getClass();
																			String v90 = v89.getSimpleName();
																			v85.onError(1, "bind failure");
																			if (v97 == 0) {
																				IAccountManager$Stub.restoreCallingIdentity(v22);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$13 v41 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);\nIAccountAuthenticatorCache v52 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nRegisteredServicesCache$ServiceInfo v55 = v52.getServiceInfo(v53, v54);', 'AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);\nboolean v35 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);', 'AccountManagerService$13 v24 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);\nv24.bind();']

The method updateCredentials has the following similar APIs:

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V with Similarity Score: 0.9468272924423218
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$12 v41 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
v22.bind();

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.8959386348724365
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v17);
AccountManagerService$15 v20 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
v20.bind();

