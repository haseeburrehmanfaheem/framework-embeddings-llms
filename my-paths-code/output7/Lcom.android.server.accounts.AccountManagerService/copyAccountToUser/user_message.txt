This is path 1 for the API with depth 2:
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v4 == 0) {
		boolean v2 = ;
		if (v2 != 0) {
			Object v7 = this.mUsers.get(p1);
			if (v7 != 0) {
				boolean v8 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
				if (v8 != 0) {
					boolean v9 = this.mLocalUnlockedUsers.get(p1);
					if (v9 == 0) {
						File v17 = new File(v18);
						String v18 = this.mInjector.getCeDatabaseName(p1);
						AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v17);
						AccountManagerService.syncDeCeAccountsLocked();
						if ( == 0) {
							AccountManagerService.validateAccountsInternal(, 1);
							AccountManagerService$UserAccounts v6 = ;
							AccountManagerService$UserAccounts v5 = v6;
							Object v25 = this.mUsers.get(p1);
							if (v25 != 0) {
								boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
								if (v26 != 0) {
									boolean v27 = this.mLocalUnlockedUsers.get(p1);
									if (v27 == 0) {
										File v35 = new File(v36);
										String v36 = this.mInjector.getCeDatabaseName(p1);
										AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v35);
										AccountManagerService.syncDeCeAccountsLocked();
										if ( == 0) {
											AccountManagerService.validateAccountsInternal(, 1);
											AccountManagerService$UserAccounts v24 = ;
											AccountManagerService$UserAccounts v23 = v24;
											if (v5 == 0) {
												if (v23 != 0) {
													String v44 = p2.toSafeString();
													long v52 = IAccountManager$Stub.clearCallingIdentity();
													AccountManagerService$5 v53 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v23,p3);
													if (v56 == 0) {
														IAccountAuthenticatorCache v64 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
														AuthenticatorDescription v65 = AuthenticatorDescription.newKey(this.mAccountType);
														int v66 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														RegisteredServicesCache$ServiceInfo v67 = v64.getServiceInfo(v65, v66);
														if (v67 != 0) {
															int v68 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
															boolean v69 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v68);
															if (v69 != 0) {
																if (ComponentInfo.directBootAware != 0) {
																	Intent v70 = new Intent();
																	Intent v72 = v70.setAction("android.accounts.AccountAuthenticator");
																	Intent v73 = v70.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
																	if (v74 == 0) {
																		IAccountAuthenticatorCache v81 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
																		int v82 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																		boolean v83 = v81.getBindInstantServiceAllowed(v82);
																		if (v83 == 0) {
																			int v84 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
																			UserHandle v85 = UserHandle.of(v84);
																			boolean v86 = AccountManagerService.mContext.bindServiceAsUser(v70, AccountManagerService$Session, , v85);
																			if (v86 != 0) {
																				if (v87 == 0) {
																					boolean v63 = 0;
																					if (v63 != 0) {
																						long v92 = SystemClock.elapsedRealtime();
																						String v93 = AccountManagerService$Session.toDebugString(v92);
																						String v91 = v93;
																						this.mNumErrors = (this.mNumErrors + 1);
																						IAccountManagerResponse v98 = AccountManagerService$Session.getResponseAndClose();
																						if (v98 == 0) {
																							if (v99 == 0) {
																								Class v102 = AccountManagerService$Session.getClass();
																								String v103 = v102.getSimpleName();
																								v98.onError(1, "bind failure");
																								if (v110 == 0) {
																									IAccountManager$Stub.restoreCallingIdentity(v52);
																									return;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v4 == 0) {
		boolean v2 = ;
		if (v2 != 0) {
			AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);
			AccountManagerService$UserAccounts v5 = v6;
			AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);
			AccountManagerService$UserAccounts v7 = v8;
			if (v5 == 0) {
				if (v7 != 0) {
					String v12 = p2.toSafeString();
					long v20 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);
					if (v24 == 0) {
						boolean v31 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
						if (v31 != 0) {
							String v35 = AccountManagerService$Session.toDebugString();
							AccountManagerService$Session.onError(1, "bind failure");
							IAccountManager$Stub.restoreCallingIdentity(v20);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.isCrossUser(v1, -1);
	if (v2 != 0) {
		AccountManagerService$UserAccounts v3 = p0.getUserAccounts(p3);
		AccountManagerService$UserAccounts v4 = p0.getUserAccounts(p4);
		if (v3 == 0) {
			if (v4 != 0) {
				String v8 = p2.toSafeString();
				long v16 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$5 v17 = new AccountManagerService$5(p0,v3,p1,Account.type,0,0,Account.name,0,p2,p1,v4,p3);
				v17.bind();
				IAccountManager$Stub.restoreCallingIdentity(v16);
				return;
			}
		}
	}
}
