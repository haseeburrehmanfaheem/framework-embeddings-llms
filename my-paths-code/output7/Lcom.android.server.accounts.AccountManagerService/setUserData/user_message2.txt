The method setUserData has the following code snippet:

This is path 1 for the API with depth 2:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p1 == 0) {
				int v16 = UserHandle.getCallingUserId();
				if (Account.type != 0) {
					List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v18 = v19;
					boolean v20 = v18.contains(Account.type);
					boolean v17 = v20;
					if (v17 == 0) {
						long v21 = IAccountManager$Stub.clearCallingIdentity();
						Object v24 = this.mUsers.get(p1);
						if (v24 != 0) {
							boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
							if (v25 != 0) {
								boolean v26 = this.mLocalUnlockedUsers.get(p1);
								if (v26 == 0) {
									File v34 = new File(v35);
									String v35 = this.mInjector.getCeDatabaseName(p1);
									AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
									AccountManagerService.syncDeCeAccountsLocked();
									if ( == 0) {
										AccountManagerService.validateAccountsInternal(, 1);
										AccountManagerService$UserAccounts v23 = ;
										AccountManagerService$UserAccounts v22 = v23;
										boolean v40 = p0.accountExistsCache(v22, p1);
										if (v40 != 0) {
											SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabase();
											v43.beginTransaction();
											SQLiteDatabase v46 = this.mDeDatabase.getReadableDatabase();
											String v47 = new String(1);
											String v48 = new String(2);
											Cursor v49 = v46.query("accounts", v47, "name=? AND type=?", v48, 0, 0, 0);
											boolean v50 = v49.moveToNext();
											if (v50 == 0) {
												long v51 = v49.getLong(0);
												v49.close();
												long v45 = v51;
												if ((v45 < 0) >= 0) {
													SQLiteDatabase v54 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
													String v55 = new String(1);
													StringBuilder v56 = new StringBuilder();
													StringBuilder v58 = v56.append("accounts_id=");
													StringBuilder v59 = v56.append(v45);
													StringBuilder v60 = v56.append(" AND ");
													StringBuilder v61 = v56.append("key");
													StringBuilder v62 = v56.append("=?");
													String v63 = v56.toString();
													String v64 = new String(1);
													Cursor v65 = v54.query("ceDb.extras", v55, v63, v64, 0, 0, 0);
													boolean v66 = v65.moveToNext();
													if (v66 == 0) {
														long v67 = v65.getLong(0);
														v65.close();
														long v53 = v67;
														if ((v53 < 0) >= 0) {
															SQLiteDatabase v70 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
															ContentValues v71 = new ContentValues();
															v71.put("value", p4);
															String v74 = new String(1);
															String v75 = String.valueOf(v53);
															int v76 = v70.update("extras", v71, "_id=?", v74);
															if (v76 != 1) {
																boolean v69 = ;
																if (v69 != 0) {
																	SQLiteDatabase v78 = this.mDeDatabase.getWritableDatabase();
																	v78.setTransactionSuccessful();
																	SQLiteDatabase v81 = this.mDeDatabase.getWritableDatabase();
																	v81.endTransaction();
																	AccountManagerService.writeUserDataIntoCacheLocked(v22, p1, p2, p3);
																	AccountManager.invalidateLocalAccountUserDataCaches();
																	IAccountManager$Stub.restoreCallingIdentity(v21);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p1 == 0) {
				int v16 = UserHandle.getCallingUserId();
				if (Account.type != 0) {
					List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v18 = v19;
					boolean v20 = v18.contains(Account.type);
					boolean v17 = v20;
					if (v17 == 0) {
						long v21 = IAccountManager$Stub.clearCallingIdentity();
						Object v24 = this.mUsers.get(p1);
						if (v24 != 0) {
							boolean v25 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
							if (v25 != 0) {
								boolean v26 = this.mLocalUnlockedUsers.get(p1);
								if (v26 == 0) {
									File v34 = new File(v35);
									String v35 = this.mInjector.getCeDatabaseName(p1);
									AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v34);
									AccountManagerService.syncDeCeAccountsLocked();
									if ( == 0) {
										AccountManagerService.validateAccountsInternal(, 1);
										AccountManagerService$UserAccounts v23 = ;
										AccountManagerService$UserAccounts v22 = v23;
										boolean v40 = p0.accountExistsCache(v22, p1);
										if (v40 != 0) {
											SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabase();
											v43.beginTransaction();
											SQLiteDatabase v46 = this.mDeDatabase.getReadableDatabase();
											String v47 = new String(1);
											String v48 = new String(2);
											Cursor v49 = v46.query("accounts", v47, "name=? AND type=?", v48, 0, 0, 0);
											boolean v50 = v49.moveToNext();
											if (v50 == 0) {
												v49.close();
												long v45 = -1;
												if ((v45 < 0) >= 0) {
													SQLiteDatabase v53 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
													String v54 = new String(1);
													StringBuilder v55 = new StringBuilder();
													StringBuilder v57 = v55.append("accounts_id=");
													StringBuilder v58 = v55.append(v45);
													StringBuilder v59 = v55.append(" AND ");
													StringBuilder v60 = v55.append("key");
													StringBuilder v61 = v55.append("=?");
													String v62 = v55.toString();
													String v63 = new String(1);
													Cursor v64 = v53.query("ceDb.extras", v54, v62, v63, 0, 0, 0);
													boolean v65 = v64.moveToNext();
													if (v65 == 0) {
														long v66 = v64.getLong(0);
														v64.close();
														long v52 = v66;
														if ((v52 < 0) >= 0) {
															SQLiteDatabase v69 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
															ContentValues v70 = new ContentValues();
															v70.put("value", p4);
															String v73 = new String(1);
															String v74 = String.valueOf(v52);
															int v75 = v69.update("extras", v70, "_id=?", v73);
															if (v75 != 1) {
																boolean v68 = ;
																if (v68 != 0) {
																	SQLiteDatabase v77 = this.mDeDatabase.getWritableDatabase();
																	v77.setTransactionSuccessful();
																	SQLiteDatabase v80 = this.mDeDatabase.getWritableDatabase();
																	v80.endTransaction();
																	AccountManagerService.writeUserDataIntoCacheLocked(v22, p1, p2, p3);
																	AccountManager.invalidateLocalAccountUserDataCaches();
																	IAccountManager$Stub.restoreCallingIdentity(v21);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			if (p1 == 0) {
				int v16 = UserHandle.getCallingUserId();
				if (Account.type != 0) {
					List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v18 = v19;
					boolean v20 = v18.contains(Account.type);
					boolean v17 = v20;
					if (v17 == 0) {
						long v21 = IAccountManager$Stub.clearCallingIdentity();
						Object v24 = this.mUsers.get(p1);
						if (v24 != 0) {
							File v25 = new File(v26);
							String v26 = this.mInjector.getPreNDatabaseName(p1);
							File v28 = new File(v29);
							String v29 = this.mInjector.getDeDatabaseName(p1);
							AccountManagerService$UserAccounts v31 = new AccountManagerService$UserAccounts(this.mContext,p1,v25,v28);
							this.mUsers.append(p1, v31);
							AccountManagerService.purgeOldGrants(v31);
							AccountManager.invalidateLocalAccountsDataCaches();
							boolean v36 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
							if (v36 != 0) {
								boolean v37 = this.mLocalUnlockedUsers.get(p1);
								if (v37 == 0) {
									if ( == 0) {
										AccountManagerService.validateAccountsInternal(, 1);
										AccountManagerService$UserAccounts v23 = ;
										AccountManagerService$UserAccounts v22 = v23;
										boolean v39 = p0.accountExistsCache(v22, p1);
										if (v39 != 0) {
											SQLiteDatabase v42 = this.mDeDatabase.getWritableDatabase();
											v42.beginTransaction();
											SQLiteDatabase v45 = this.mDeDatabase.getReadableDatabase();
											String v46 = new String(1);
											String v47 = new String(2);
											Cursor v48 = v45.query("accounts", v46, "name=? AND type=?", v47, 0, 0, 0);
											boolean v49 = v48.moveToNext();
											if (v49 == 0) {
												long v50 = v48.getLong(0);
												v48.close();
												long v44 = v50;
												if ((v44 < 0) >= 0) {
													SQLiteDatabase v53 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
													String v54 = new String(1);
													StringBuilder v55 = new StringBuilder();
													StringBuilder v57 = v55.append("accounts_id=");
													StringBuilder v58 = v55.append(v44);
													StringBuilder v59 = v55.append(" AND ");
													StringBuilder v60 = v55.append("key");
													StringBuilder v61 = v55.append("=?");
													String v62 = v55.toString();
													String v63 = new String(1);
													Cursor v64 = v53.query("ceDb.extras", v54, v62, v63, 0, 0, 0);
													boolean v65 = v64.moveToNext();
													if (v65 == 0) {
														long v66 = v64.getLong(0);
														v64.close();
														long v52 = v66;
														if ((v52 < 0) >= 0) {
															SQLiteDatabase v69 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
															ContentValues v70 = new ContentValues();
															v70.put("value", p4);
															String v73 = new String(1);
															String v74 = String.valueOf(v52);
															int v75 = v69.update("extras", v70, "_id=?", v73);
															if (v75 != 1) {
																boolean v68 = ;
																if (v68 != 0) {
																	SQLiteDatabase v77 = this.mDeDatabase.getWritableDatabase();
																	v77.setTransactionSuccessful();
																	SQLiteDatabase v80 = this.mDeDatabase.getWritableDatabase();
																	v80.endTransaction();
																	AccountManagerService.writeUserDataIntoCacheLocked(v22, p1, p2, p3);
																	AccountManager.invalidateLocalAccountUserDataCaches();
																	IAccountManager$Stub.restoreCallingIdentity(v21);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v17 = p0.isAccountManagedByCaller(Account.type, v1, v16);\nlong v18 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v19 = p0.getUserAccounts(v16);\nboolean v20 = p0.accountExistsCache(v19, p1);\np0.setUserdataInternal(v19, p1, p2, p3);']

The method setUserData has the following similar APIs:

- API Name: clearPassword(Landroid/accounts/Account;)V with Similarity Score: 0.8456308245658875
  - Access Control Level: SYS_OR_SIG and the following code:
Object v14 = Objects.requireNonNull(p1, "account cannot be null");
int v15 = UserHandle.getCallingUserId();
boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
p0.setPasswordInternal(v18, p1, 0, v1);

- API Name: getPassword(Landroid/accounts/Account;)Ljava/lang/String; with Similarity Score: 0.8443267345428467
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
String v19 = p0.readPasswordInternal(v18, p1);
IAccountManager$Stub.restoreCallingIdentity(v17);
return v19;

