This is path 1 for the API with depth 2:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (v22 == 0) {
					boolean v20 = ;
					if (v20 != 0) {
						UserHandle v23 = UserHandle.of(p4);
						int v24 = v23.getIdentifier();
						if (Account.type != 0) {
							List v27 = AccountManagerService.getTypesForCaller(p2, p3, 0);
							List v26 = v27;
							boolean v28 = v26.contains(Account.type);
							boolean v25 = v28;
							if (v25 != 0) {
								boolean v29 = p0.isSystemUid(v1);
								if (v29 != 0) {
									Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
									Object v31 = v32;
									if (v31 == 0) {
										boolean v33 = v31.isActiveProfileOwner(v1);
										if (v33 != 0) {
											boolean v34 = v31.isActiveDeviceOwner(v1);
											if (v34 == 0) {
												boolean v30 = ;
												if (v30 == 0) {
													Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
													if (v37 == 0) {
														boolean v38 = v37.isActiveProfileOwner(p2);
														if (v38 != 0) {
															boolean v39 = v37.isActiveDeviceOwner(p2);
															if (v39 == 0) {
																boolean v36 = ;
																if (v36 == 0) {
																	UserManager v40 = AccountManagerService.getUserManager();
																	UserHandle v41 = new UserHandle(p4);
																	Bundle v43 = v40.getUserRestrictions(v41);
																	boolean v44 = v43.getBoolean("no_modify_accounts");
																	if (v44 == 0) {
																		boolean v35 = 0;
																		if (v35 != 0) {
																			Object v47 = LocalServices.getService(DevicePolicyManagerInterna.class);
																			if (v47 == 0) {
																				boolean v48 = v47.isActiveProfileOwner(p3);
																				if (v48 != 0) {
																					boolean v49 = v47.isActiveDeviceOwner(p3);
																					if (v49 == 0) {
																						boolean v46 = ;
																						if (v46 == 0) {
																							Object v50 = this.mContext.getSystemService("device_policy");
																							String v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);
																							if (v51 != 0) {
																								if ( >= v51.length) {
																									boolean v52 = v51[].equals(Account.type);
																									if (v52 == 0) {
																										if ( >= v51.length) {
																											boolean v53 = v51[].equals(Account.type);
																											if (v53 == 0) {
																												boolean v45 = 0;
																												if (v45 != 0) {
																													p1.onError(101, "User cannot modify accounts of this type (policy).");
																													return;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (v22 == 0) {
					boolean v20 = ;
					if (v20 != 0) {
						UserHandle v23 = UserHandle.of(p4);
						int v24 = v23.getIdentifier();
						if (Account.type != 0) {
							List v26 = AccountManagerService.getTypesManagedByCaller(v1, v24);
							boolean v27 = v26.contains(Account.type);
							boolean v25 = v27;
							if (v25 != 0) {
								long v29 = Binder.clearCallingIdentity();
								String v30 = this.mPackageManager.getPackagesForUid(v1);
								if (v30 == 0) {
									if ( >= v30.length) {
										PackageInfo v31 = this.mPackageManager.getPackageInfo(v30[], 0);
										if ( >= v30.length) {
											PackageInfo v35 = this.mPackageManager.getPackageInfo(v30[], 0);
											if (v35 == 0) {
												if ((ApplicationInfo.flags & 1) == 0) {
													Binder.restoreCallingIdentity(v29);
													boolean v28 = 1;
													if (v28 != 0) {
														Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
														if (v38 == 0) {
															boolean v39 = v38.isActiveProfileOwner(v1);
															if (v39 != 0) {
																boolean v40 = v38.isActiveDeviceOwner(v1);
																if (v40 == 0) {
																	boolean v37 = ;
																	if (v37 == 0) {
																		boolean v42 = AccountManagerService.isProfileOwner(v1);
																		if (v42 == 0) {
																			UserManager v43 = AccountManagerService.getUserManager();
																			UserHandle v44 = new UserHandle(p4);
																			Bundle v46 = v43.getUserRestrictions(v44);
																			boolean v47 = v46.getBoolean("no_modify_accounts");
																			if (v47 == 0) {
																				boolean v41 = 0;
																				if (v41 != 0) {
																					boolean v49 = AccountManagerService.isProfileOwner(v1);
																					if (v49 == 0) {
																						Object v50 = this.mContext.getSystemService("device_policy");
																						String v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);
																						if (v51 != 0) {
																							if ( >= v51.length) {
																								boolean v52 = v51[].equals(Account.type);
																								if (v52 == 0) {
																									if ( >= v51.length) {
																										boolean v53 = v51[].equals(Account.type);
																										if (v53 == 0) {
																											boolean v48 = 0;
																											if (v48 != 0) {
																												p1.onError(101, "User cannot modify accounts of this type (policy).");
																												return;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				boolean v20 = p0.isCrossUser(v1, p4);
				if (v20 != 0) {
					UserHandle v21 = UserHandle.of(p4);
					int v22 = v21.getIdentifier();
					boolean v23 = p0.isAccountManagedByCaller(Account.type, v1, v22);
					if (v23 != 0) {
						boolean v24 = p0.isSystemUid(v1);
						if (v24 != 0) {
							boolean v25 = p0.isProfileOwner(v1);
							if (v25 == 0) {
								boolean v26 = p0.canUserModifyAccounts(p4, v1);
								if (v26 != 0) {
									boolean v27 = p0.canUserModifyAccountsForType(p4, Account.type, v1);
									if (v27 != 0) {
										p1.onError(101, "User cannot modify accounts of this type (policy).");
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
