The method peekAuthToken has the following code snippet:

This is path 1 for the API with depth 2:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				boolean v23 = p0.isLocalUnlockedUser(v18);
				if (v23 != 0) {
					long v24 = IAccountManager$Stub.clearCallingIdentity();
					Object v27 = this.mUsers.get(p1);
					if (v27 != 0) {
						boolean v28 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v28 != 0) {
							boolean v29 = this.mLocalUnlockedUsers.get(p1);
							if (v29 == 0) {
								File v37 = new File(v38);
								String v38 = this.mInjector.getCeDatabaseName(p1);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v37);
								AccountManagerService.syncDeCeAccountsLocked();
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v26 = ;
									AccountManagerService$UserAccounts v25 = v26;
									Map v44 = this.authTokenCache;
									Object v45 = v44.get(p1);
									if (v45 == 0) {
										Map v46 = this.authTokenCache;
										Object v47 = v46.get(p1);
										if (v47 != 0) {
											SQLiteDatabase v49 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											HashMap v50 = new HashMap();
											String v52 = new String(2);
											Cursor v53 = v49.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v52, 0, 0, 0);
											boolean v54 = v53.moveToNext();
											if (v54 == 0) {
												String v55 = v53.getString(0);
												String v56 = v53.getString(1);
												Object v57 = v50.put(v55, v56);
												boolean v58 = v53.moveToNext();
												if (v58 == 0) {
													v53.close();
													Map v48 = v50;
													Map v60 = this.authTokenCache;
													Object v61 = v60.put(p1, v48);
													Object v62 = .get(p2);
													String v43 = v62;
													IAccountManager$Stub.restoreCallingIdentity(v24);
													return v43;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				boolean v23 = p0.isLocalUnlockedUser(v18);
				if (v23 != 0) {
					long v24 = IAccountManager$Stub.clearCallingIdentity();
					Object v27 = this.mUsers.get(p1);
					if (v27 != 0) {
						File v28 = new File(v29);
						String v29 = this.mInjector.getPreNDatabaseName(p1);
						File v31 = new File(v32);
						String v32 = this.mInjector.getDeDatabaseName(p1);
						AccountManagerService$UserAccounts v34 = new AccountManagerService$UserAccounts(this.mContext,p1,v28,v31);
						this.mUsers.append(p1, v34);
						AccountManagerService.purgeOldGrants(v34);
						AccountManager.invalidateLocalAccountsDataCaches();
						boolean v39 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v39 != 0) {
							boolean v40 = this.mLocalUnlockedUsers.get(p1);
							if (v40 == 0) {
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v26 = ;
									AccountManagerService$UserAccounts v25 = v26;
									Map v43 = this.authTokenCache;
									Object v44 = v43.get(p1);
									if (v44 == 0) {
										Map v45 = this.authTokenCache;
										Object v46 = v45.get(p1);
										if (v46 != 0) {
											SQLiteDatabase v48 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											HashMap v49 = new HashMap();
											String v51 = new String(2);
											Cursor v52 = v48.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v51, 0, 0, 0);
											boolean v53 = v52.moveToNext();
											if (v53 == 0) {
												String v54 = v52.getString(0);
												String v55 = v52.getString(1);
												Object v56 = v49.put(v54, v55);
												boolean v57 = v52.moveToNext();
												if (v57 == 0) {
													v52.close();
													Map v47 = v49;
													Map v59 = this.authTokenCache;
													Object v60 = v59.put(p1, v47);
													Object v61 = .get(p2);
													String v42 = v61;
													IAccountManager$Stub.restoreCallingIdentity(v24);
													return v42;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v12 = Binder.getCallingPid();
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				boolean v23 = p0.isLocalUnlockedUser(v18);
				if (v23 != 0) {
					long v24 = IAccountManager$Stub.clearCallingIdentity();
					Object v27 = this.mUsers.get(p1);
					if (v27 != 0) {
						boolean v28 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
						if (v28 != 0) {
							boolean v29 = this.mLocalUnlockedUsers.get(p1);
							if (v29 == 0) {
								File v37 = new File(v38);
								String v38 = this.mInjector.getCeDatabaseName(p1);
								AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v37);
								AccountManagerService.syncDeCeAccountsLocked();
								if ( == 0) {
									AccountManagerService.validateAccountsInternal(, 1);
									AccountManagerService$UserAccounts v26 = ;
									AccountManagerService$UserAccounts v25 = v26;
									Map v44 = this.authTokenCache;
									Object v45 = v44.get(p1);
									if (v45 == 0) {
										Object v46 = v45.get(p2);
										String v43 = v46;
										IAccountManager$Stub.restoreCallingIdentity(v24);
										return v43;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Map v44 = this.authTokenCache;\nObject v45 = v44.get(p1);\nHashMap v50 = new HashMap();\nCursor v53 = v49.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v52, 0, 0, 0);\nString v43 = v62;\nreturn v43;', 'Map v28 = AccountManagerService$UserAccounts.-$$Nest$fgetauthTokenCache(v25);\nObject v29 = v28.get(p1);\nMap v32 = AccountManagerService$UserAccounts.accountsDb.findAuthTokensByAccount(p1);\nObject v34 = v33.put(p1, v32);\nString v27 = v35;\nreturn v27;']

The method peekAuthToken has the following similar APIs:

- API Name: getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.8897857069969177
  - Access Control Level: SYS_OR_SIG and the following code:
Map v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserDataCache(v18);
Object v27 = v26.get(p1);
Map v30 = AccountManagerService$UserAccounts.accountsDb.findUserExtrasForAccount(p1);
Object v32 = v31.put(p1, v30);

- API Name: getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map; with Similarity Score: 0.8008102178573608
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v2);
Integer v24 = Integer.valueOf(v1);
Map v28 = new LinkedHashMap();

