The method getAccountsAsUser has the following code snippet:

This is path 1 for the API with depth 2:
public Account getAccountsAsUser(String p1, int p2, String p3){
	if (v22 != 0) {
		if (p1 == 0) {
			boolean v23 = v21.contains(p1);
			if (v23 == 0) {
				List v25 = AccountManagerService.getTypesForCaller(, p2, 1);
				List v24 = v25;
				boolean v26 = v24.isEmpty();
				if (v26 != 0) {
					if (p1 == 0) {
						boolean v27 = v24.contains(p1);
						if (v27 != 0) {
							boolean v28 = v24.contains(p1);
							if (v28 == 0) {
								ArrayList v29 = new ArrayList();
								boolean v31 = v29.add(p1);
								long v32 = IAccountManager$Stub.clearCallingIdentity();
								AccountManagerService$UserAccounts v34 = AccountManagerService.getUserAccountsNotChecked(p2);
								AccountManagerService$UserAccounts v33 = v34;
								ArrayList v36 = new ArrayList();
								Iterator v38 = .iterator();
								boolean v39 = v38.hasNext();
								if (v39 == 0) {
									Object v40 = v38.next();
									Account v41 = AccountManagerService.getAccountsFromCache(v33, v40, , , p6);
									if (v41 == 0) {
										List v42 = Arrays.asList(v41);
										boolean v43 = v36.addAll(v42);
										boolean v44 = v38.hasNext();
										if (v44 == 0) {
											int v45 = v36.size();
											Account v46 = new Account(v45);
											int v47 = v36.size();
											if ( >= v47) {
												Object v48 = v36.get();
												int v49 = v36.size();
												if ( >= v49) {
													Account v35 = v46;
													IAccountManager$Stub.restoreCallingIdentity(v32);
													Account v3 = v35;
													return v3;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Account getAccountsAsUser(String p1, int p2, String p3){
	if (v22 != 0) {
		if (p1 == 0) {
			boolean v23 = v21.contains(p1);
			if (v23 == 0) {
				List v25 = AccountManagerService.getTypesForCaller(, p2, 1);
				List v24 = v25;
				boolean v26 = v24.isEmpty();
				if (v26 != 0) {
					Account v3 = this.EMPTY_ACCOUNT_ARRAY;
					return v3;
				}
			}
		}
	}
}

and the following sink code:
['List v25 = AccountManagerService.getTypesForCaller(, p2, 1);\nArrayList v29 = new ArrayList();\nboolean v31 = v29.add(p1);\nAccount v41 = AccountManagerService.getAccountsFromCache(v33, v40, , , p6);\nAccount v46 = new Account(v45);', 'List v24 = AccountManagerService.getTypesVisibleToCaller(, p2, );\nArrayList v28 = new ArrayList();\nboolean v30 = v28.add(p1);\nAccount v33 = AccountManagerService.getAccountsInternal(v32, , , , 0);', 'Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0);']

The method getAccountsAsUser has the following similar APIs:

- API Name: getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.9425328969955444
  - Access Control Level: SYS_OR_SIG and the following code:
Account v8 = p0.getAccountsAsUserForPackage(p1, v2, p2, v4, p3, 0);
return v8;

- API Name: onAccountAccessed(Ljava/lang/String;)V with Similarity Score: 0.9177314043045044
  - Access Control Level: SYS_OR_SIG and the following code:
List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1);
Account v21 = AccountManagerService.getAccountsFromCache(v13, v20, v7, p2, 0);
ArrayList v16 = new ArrayList();

