The method getAuthTokenLabel has the following code snippet:

This is path 1 for the API with depth 2:
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	Object v10 = this.mUsers.get(p1);
	if (v10 != 0) {
		boolean v11 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
		if (v11 != 0) {
			boolean v12 = this.mLocalUnlockedUsers.get(p1);
			if (v12 == 0) {
				File v20 = new File(v21);
				String v21 = this.mInjector.getCeDatabaseName(p1);
				AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v20);
				AccountManagerService.syncDeCeAccountsLocked();
				if ( == 0) {
					AccountManagerService.validateAccountsInternal(, 1);
					AccountManagerService$UserAccounts v9 = ;
					AccountManagerService$UserAccounts v8 = v9;
					AccountManagerService$7 v26 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
					if (v29 == 0) {
						IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
						AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType);
						int v39 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);
						if (v40 != 0) {
							int v41 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							boolean v42 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v41);
							if (v42 != 0) {
								if (ComponentInfo.directBootAware != 0) {
									Intent v43 = new Intent();
									Intent v45 = v43.setAction("android.accounts.AccountAuthenticator");
									Intent v46 = v43.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
									if (v47 == 0) {
										IAccountAuthenticatorCache v54 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
										int v55 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v56 = v54.getBindInstantServiceAllowed(v55);
										if (v56 == 0) {
											int v57 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
											UserHandle v58 = UserHandle.of(v57);
											boolean v59 = AccountManagerService.mContext.bindServiceAsUser(v43, AccountManagerService$Session, , v58);
											if (v59 != 0) {
												if (v60 == 0) {
													boolean v36 = 0;
													if (v36 != 0) {
														long v65 = SystemClock.elapsedRealtime();
														String v66 = AccountManagerService$Session.toDebugString(v65);
														String v64 = v66;
														this.mNumErrors = (this.mNumErrors + 1);
														IAccountManagerResponse v71 = AccountManagerService$Session.getResponseAndClose();
														if (v71 == 0) {
															if (v72 == 0) {
																Class v75 = AccountManagerService$Session.getClass();
																String v76 = v75.getSimpleName();
																v71.onError(1, "bind failure");
																if (v83 == 0) {
																	IAccountManager$Stub.restoreCallingIdentity(v7);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	Object v10 = this.mUsers.get(p1);
	if (v10 != 0) {
		boolean v11 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
		if (v11 != 0) {
			boolean v12 = this.mLocalUnlockedUsers.get(p1);
			if (v12 == 0) {
				File v20 = new File(v21);
				String v21 = this.mInjector.getCeDatabaseName(p1);
				AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v20);
				AccountManagerService.syncDeCeAccountsLocked();
				if ( == 0) {
					AccountManagerService.validateAccountsInternal(, 1);
					AccountManagerService$UserAccounts v9 = ;
					AccountManagerService$UserAccounts v8 = v9;
					AccountManagerService$7 v26 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
					if (v29 == 0) {
						IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
						AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType);
						int v39 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);
						if (v40 != 0) {
							int v41 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							boolean v42 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v41);
							if (v42 != 0) {
								if (ComponentInfo.directBootAware != 0) {
									Intent v43 = new Intent();
									Intent v45 = v43.setAction("android.accounts.AccountAuthenticator");
									Intent v46 = v43.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
									if (v47 == 0) {
										IAccountAuthenticatorCache v54 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
										int v55 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v56 = v54.getBindInstantServiceAllowed(v55);
										if (v56 == 0) {
											int v57 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
											UserHandle v58 = UserHandle.of(v57);
											boolean v59 = AccountManagerService.mContext.bindServiceAsUser(v43, AccountManagerService$Session, , v58);
											if (v59 != 0) {
												boolean v36 = 1;
												if (v36 != 0) {
													long v64 = SystemClock.elapsedRealtime();
													String v65 = AccountManagerService$Session.toDebugString(v64);
													String v63 = v65;
													this.mNumErrors = (this.mNumErrors + 1);
													IAccountManagerResponse v70 = AccountManagerService$Session.getResponseAndClose();
													if (v70 == 0) {
														if (v71 == 0) {
															Class v74 = AccountManagerService$Session.getClass();
															String v75 = v74.getSimpleName();
															v70.onError(1, "bind failure");
															if (v82 == 0) {
																IAccountManager$Stub.restoreCallingIdentity(v7);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	Object v10 = this.mUsers.get(p1);
	if (v10 != 0) {
		File v11 = new File(v12);
		String v12 = this.mInjector.getPreNDatabaseName(p1);
		File v14 = new File(v15);
		String v15 = this.mInjector.getDeDatabaseName(p1);
		AccountManagerService$UserAccounts v17 = new AccountManagerService$UserAccounts(this.mContext,p1,v11,v14);
		this.mUsers.append(p1, v17);
		AccountManagerService.purgeOldGrants(v17);
		AccountManager.invalidateLocalAccountsDataCaches();
		boolean v22 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
		if (v22 != 0) {
			boolean v23 = this.mLocalUnlockedUsers.get(p1);
			if (v23 == 0) {
				if ( == 0) {
					AccountManagerService.validateAccountsInternal(, 1);
					AccountManagerService$UserAccounts v9 = ;
					AccountManagerService$UserAccounts v8 = v9;
					AccountManagerService$7 v25 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
					if (v28 == 0) {
						IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
						AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
						int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
						if (v39 != 0) {
							int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
							if (v41 != 0) {
								if (ComponentInfo.directBootAware != 0) {
									Intent v42 = new Intent();
									Intent v44 = v42.setAction("android.accounts.AccountAuthenticator");
									Intent v45 = v42.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
									if (v46 == 0) {
										IAccountAuthenticatorCache v53 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
										int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v55 = v53.getBindInstantServiceAllowed(v54);
										if (v55 == 0) {
											int v56 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
											UserHandle v57 = UserHandle.of(v56);
											boolean v58 = AccountManagerService.mContext.bindServiceAsUser(v42, AccountManagerService$Session, , v57);
											if (v58 != 0) {
												if (v59 == 0) {
													boolean v35 = 0;
													if (v35 != 0) {
														long v64 = SystemClock.elapsedRealtime();
														String v65 = AccountManagerService$Session.toDebugString(v64);
														String v63 = v65;
														this.mNumErrors = (this.mNumErrors + 1);
														IAccountManagerResponse v70 = AccountManagerService$Session.getResponseAndClose();
														if (v70 == 0) {
															if (v71 == 0) {
																Class v74 = AccountManagerService$Session.getClass();
																String v75 = v74.getSimpleName();
																v70.onError(1, "bind failure");
																if (v82 == 0) {
																	IAccountManager$Stub.restoreCallingIdentity(v7);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v10 = this.mUsers.get(p1);\nint v6 = UserHandle.getUserId(v3);\nlong v7 = IAccountManager$Stub.clearCallingIdentity();\nboolean v11 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();\nAccountManagerService$7 v26 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);', 'int v6 = UserHandle.getUserId(v3);\nlong v7 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);\nAccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);', 'int v6 = UserHandle.getUserId(v3);\nlong v7 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v8 = p0.getUserAccounts(v6);\nAccountManagerService$7 v9 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);']

The method getAuthTokenLabel has the following similar APIs:

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9429931044578552
  - Access Control Level: SYS_OR_SIG and the following code:
int v17 = UserHandle.getCallingUserId();
AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9349410533905029
  - Access Control Level: SYS_OR_SIG and the following code:
int v17 = UserHandle.getCallingUserId();
AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);

