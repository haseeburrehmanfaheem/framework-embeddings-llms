This is path 1 for the API with depth 2:
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v5 = v6;
		boolean v7 = v5.contains(Account.type);
		boolean v4 = v7;
		if (v4 != 0) {
			boolean v8 = p0.isSystemUid(v2);
			if (v8 == 0) {
				long v9 = IAccountManager$Stub.clearCallingIdentity();
				Object v12 = this.mUsers.get(p1);
				if (v12 != 0) {
					boolean v13 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v13 != 0) {
						boolean v14 = this.mLocalUnlockedUsers.get(p1);
						if (v14 == 0) {
							File v22 = new File(v23);
							String v23 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v22);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v11 = ;
								AccountManagerService$UserAccounts v10 = v11;
								Map v29 = this.visibilityCache;
								Object v30 = v29.get(p1);
								if (v30 != 0) {
									HashMap v32 = new HashMap();
									Map v34 = this.visibilityCache;
									Object v35 = v34.put(p1, v32);
									AccountManager.invalidateLocalAccountsDataCaches();
									Map v28 = ;
									IAccountManager$Stub.restoreCallingIdentity(v9);
									return v28;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v5 = AccountManagerService.getTypesManagedByCaller(v2, v3);
		boolean v6 = v5.contains(Account.type);
		boolean v4 = v6;
		if (v4 != 0) {
			long v8 = Binder.clearCallingIdentity();
			String v9 = this.mPackageManager.getPackagesForUid(v2);
			if (v9 == 0) {
				if ( >= v9.length) {
					PackageInfo v10 = this.mPackageManager.getPackageInfo(v9[], 0);
					if ( >= v9.length) {
						PackageInfo v14 = this.mPackageManager.getPackageInfo(v9[], 0);
						if (v14 == 0) {
							if ((ApplicationInfo.flags & 1) == 0) {
								Binder.restoreCallingIdentity(v8);
								boolean v7 = 1;
								if (v7 == 0) {
									long v16 = IAccountManager$Stub.clearCallingIdentity();
									AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v3);
									AccountManagerService$UserAccounts v17 = v18;
									Map v20 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v17);
									Object v21 = v20.get(p1);
									if (v21 != 0) {
										HashMap v23 = new HashMap();
										Map v25 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v17);
										Object v26 = v25.put(p1, v23);
										AccountManager.invalidateLocalAccountsDataCaches();
										Map v19 = ;
										IAccountManager$Stub.restoreCallingIdentity(v16);
										return v19;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = p0.isAccountManagedByCaller(Account.type, v2, v3);
	if (v4 != 0) {
		boolean v5 = p0.isSystemUid(v2);
		if (v5 == 0) {
			long v6 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v7 = p0.getUserAccounts(v3);
			Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);
			IAccountManager$Stub.restoreCallingIdentity(v6);
			return v8;
		}
	}
}
