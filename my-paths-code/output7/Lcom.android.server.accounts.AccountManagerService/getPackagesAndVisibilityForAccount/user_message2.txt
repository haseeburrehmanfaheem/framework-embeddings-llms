The method getPackagesAndVisibilityForAccount has the following code snippet:

This is path 1 for the API with depth 2:
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v5 = v6;
		boolean v7 = v5.contains(Account.type);
		boolean v4 = v7;
		if (v4 != 0) {
			boolean v8 = p0.isSystemUid(v2);
			if (v8 == 0) {
				long v9 = IAccountManager$Stub.clearCallingIdentity();
				Object v12 = this.mUsers.get(p1);
				if (v12 != 0) {
					boolean v13 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v13 != 0) {
						boolean v14 = this.mLocalUnlockedUsers.get(p1);
						if (v14 == 0) {
							File v22 = new File(v23);
							String v23 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v22);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v11 = ;
								AccountManagerService$UserAccounts v10 = v11;
								Map v29 = this.visibilityCache;
								Object v30 = v29.get(p1);
								if (v30 != 0) {
									HashMap v32 = new HashMap();
									Map v34 = this.visibilityCache;
									Object v35 = v34.put(p1, v32);
									AccountManager.invalidateLocalAccountsDataCaches();
									Map v28 = ;
									IAccountManager$Stub.restoreCallingIdentity(v9);
									return v28;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Map getPackagesAndVisibilityForAccount(Account p1){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v5 = v6;
		boolean v7 = v5.contains(Account.type);
		boolean v4 = v7;
		if (v4 != 0) {
			boolean v8 = p0.isSystemUid(v2);
			if (v8 == 0) {
				long v9 = IAccountManager$Stub.clearCallingIdentity();
				Object v12 = this.mUsers.get(p1);
				if (v12 != 0) {
					File v13 = new File(v14);
					String v14 = this.mInjector.getPreNDatabaseName(p1);
					File v16 = new File(v17);
					String v17 = this.mInjector.getDeDatabaseName(p1);
					AccountManagerService$UserAccounts v19 = new AccountManagerService$UserAccounts(this.mContext,p1,v13,v16);
					this.mUsers.append(p1, v19);
					AccountManagerService.purgeOldGrants(v19);
					AccountManager.invalidateLocalAccountsDataCaches();
					boolean v24 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v24 != 0) {
						boolean v25 = this.mLocalUnlockedUsers.get(p1);
						if (v25 == 0) {
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v11 = ;
								AccountManagerService$UserAccounts v10 = v11;
								Map v28 = this.visibilityCache;
								Object v29 = v28.get(p1);
								if (v29 != 0) {
									HashMap v31 = new HashMap();
									Map v33 = this.visibilityCache;
									Object v34 = v33.put(p1, v31);
									AccountManager.invalidateLocalAccountsDataCaches();
									Map v27 = ;
									IAccountManager$Stub.restoreCallingIdentity(v9);
									return v27;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Map v8 = p0.getPackagesAndVisibilityForAccountLocked(p1, v7);\nreturn v8;', 'Object v12 = this.mUsers.get(p1);\nboolean v13 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();\nFile v22 = new File(v23);\nAccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v22);\nMap v29 = this.visibilityCache;\nObject v30 = v29.get(p1);\nMap v34 = this.visibilityCache;\nObject v35 = v34.put(p1, v32);', 'Map v20 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v17);\nObject v21 = v20.get(p1);\nMap v25 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(v17);\nObject v26 = v25.put(p1, v23);']

The method getPackagesAndVisibilityForAccount has the following similar APIs:

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V with Similarity Score: 0.8308970928192139
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v25 = this.mUsers.get(p1);
boolean v26 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();

- API Name: getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map; with Similarity Score: 0.8062859773635864
  - Access Control Level: SYS_OR_SIG and the following code:
List v4 = p0.getTypesForCaller(v1, v2, v3);
AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v2);
Map v12 = p0.getAccountsAndVisibilityForPackage(p1, , v11, v10);

