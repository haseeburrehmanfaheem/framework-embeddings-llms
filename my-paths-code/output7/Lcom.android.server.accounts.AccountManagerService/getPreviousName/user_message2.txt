The method getPreviousName has the following code snippet:

This is path 1 for the API with depth 2:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		Object v19 = this.mUsers.get(p1);
		if (v19 != 0) {
			boolean v20 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v20 != 0) {
				boolean v21 = this.mLocalUnlockedUsers.get(p1);
				if (v21 == 0) {
					File v29 = new File(v30);
					String v30 = this.mInjector.getCeDatabaseName(p1);
					AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v29);
					AccountManagerService.syncDeCeAccountsLocked();
					if ( == 0) {
						AccountManagerService.validateAccountsInternal(, 1);
						AccountManagerService$UserAccounts v18 = ;
						AccountManagerService$UserAccounts v17 = v18;
						if (p1 != 0) {
							HashMap v36 = this.previousNameCache;
							Object v37 = v36.get(p1);
							if (v37 != 0) {
								SQLiteDatabase v39 = this.mDeDatabase.getReadableDatabase();
								String v40 = new String(1);
								String v41 = new String(2);
								Cursor v42 = v39.query("accounts", v40, "name=? AND type=?", v41, 0, 0, 0);
								boolean v43 = v42.moveToNext();
								if (v43 == 0) {
									String v44 = v42.getString(0);
									v42.close();
									String v38 = v44;
									AtomicReference v46 = new AtomicReference(v38);
									HashMap v48 = this.previousNameCache;
									Object v49 = v48.put(p1, v46);
									String v35 = v38;
									IAccountManager$Stub.restoreCallingIdentity(v16);
									return v35;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		Object v19 = this.mUsers.get(p1);
		if (v19 != 0) {
			boolean v20 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v20 != 0) {
				boolean v21 = this.mLocalUnlockedUsers.get(p1);
				if (v21 == 0) {
					File v29 = new File(v30);
					String v30 = this.mInjector.getCeDatabaseName(p1);
					AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v29);
					AccountManagerService.syncDeCeAccountsLocked();
					if ( == 0) {
						AccountManagerService.validateAccountsInternal(, 1);
						AccountManagerService$UserAccounts v18 = ;
						AccountManagerService$UserAccounts v17 = v18;
						if (p1 != 0) {
							HashMap v36 = this.previousNameCache;
							Object v37 = v36.get(p1);
							if (v37 != 0) {
								SQLiteDatabase v39 = this.mDeDatabase.getReadableDatabase();
								String v40 = new String(1);
								String v41 = new String(2);
								Cursor v42 = v39.query("accounts", v40, "name=? AND type=?", v41, 0, 0, 0);
								boolean v43 = v42.moveToNext();
								if (v43 == 0) {
									v42.close();
									String v38 = 0;
									AtomicReference v45 = new AtomicReference(v38);
									HashMap v47 = this.previousNameCache;
									Object v48 = v47.put(p1, v45);
									String v35 = v38;
									IAccountManager$Stub.restoreCallingIdentity(v16);
									return v35;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getPreviousName(Account p1){
	if (v1 == 0) {
		int v7 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		Object v19 = this.mUsers.get(p1);
		if (v19 != 0) {
			File v20 = new File(v21);
			String v21 = this.mInjector.getPreNDatabaseName(p1);
			File v23 = new File(v24);
			String v24 = this.mInjector.getDeDatabaseName(p1);
			AccountManagerService$UserAccounts v26 = new AccountManagerService$UserAccounts(this.mContext,p1,v20,v23);
			this.mUsers.append(p1, v26);
			AccountManagerService.purgeOldGrants(v26);
			AccountManager.invalidateLocalAccountsDataCaches();
			boolean v31 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
			if (v31 != 0) {
				boolean v32 = this.mLocalUnlockedUsers.get(p1);
				if (v32 == 0) {
					if ( == 0) {
						AccountManagerService.validateAccountsInternal(, 1);
						AccountManagerService$UserAccounts v18 = ;
						AccountManagerService$UserAccounts v17 = v18;
						if (p1 != 0) {
							HashMap v35 = this.previousNameCache;
							Object v36 = v35.get(p1);
							if (v36 != 0) {
								SQLiteDatabase v38 = this.mDeDatabase.getReadableDatabase();
								String v39 = new String(1);
								String v40 = new String(2);
								Cursor v41 = v38.query("accounts", v39, "name=? AND type=?", v40, 0, 0, 0);
								boolean v42 = v41.moveToNext();
								if (v42 == 0) {
									String v43 = v41.getString(0);
									v41.close();
									String v37 = v43;
									AtomicReference v45 = new AtomicReference(v37);
									HashMap v47 = this.previousNameCache;
									Object v48 = v47.put(p1, v45);
									String v34 = v37;
									IAccountManager$Stub.restoreCallingIdentity(v16);
									return v34;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v14 = Objects.requireNonNull(p1, "account cannot be null");\nAccountManagerService$UserAccounts v19 = this.mUsers.get(p1);\nString v18 = p0.readPreviousNameInternal(v17, p1);\nIAccountManager$Stub.restoreCallingIdentity(v16);\nreturn v18;', 'HashMap v36 = this.previousNameCache;\nObject v37 = v36.get(p1);\nString v22 = AccountManagerService$UserAccounts.accountsDb.findDeAccountPreviousName(p1);\nAtomicReference v23 = new AtomicReference(v22);\nHashMap v25 = AccountManagerService$UserAccounts.-$$Nest$fgetpreviousNameCache(v17);\nObject v26 = v25.put(p1, v23);', 'File v29 = new File(v30);\nthis.mInjector.getCeDatabaseName(p1);\nAccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v29);']

The method getPreviousName has the following similar APIs:

- API Name: getPassword(Landroid/accounts/Account;)Ljava/lang/String; with Similarity Score: 0.8303722739219666
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
String v19 = p0.readPasswordInternal(v18, p1);
IAccountManager$Stub.restoreCallingIdentity(v17);
return v19;

- API Name: clearPassword(Landroid/accounts/Account;)V with Similarity Score: 0.8247441053390503
  - Access Control Level: SYS_OR_SIG and the following code:
Object v14 = Objects.requireNonNull(p1, "account cannot be null");
int v15 = UserHandle.getCallingUserId();
boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);
long v17 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v15);
p0.setPasswordInternal(v18, p1, 0, v1);

