This is path 1 for the API with depth 2:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = Binder.getCallingUid();
				int v22 = UserHandle.getCallingUserId();
				String v23 = p5.getString("androidPackageName");
				String v24 = new String(1);
				long v26 = IAccountManager$Stub.clearCallingIdentity();
				Object v29 = this.mUsers.get(p1);
				if (v29 != 0) {
					boolean v30 = AccountManagerService$UserAccounts.accountsDb.isCeDatabaseAttached();
					if (v30 != 0) {
						boolean v31 = this.mLocalUnlockedUsers.get(p1);
						if (v31 == 0) {
							File v39 = new File(v40);
							String v40 = this.mInjector.getCeDatabaseName(p1);
							AccountManagerService$UserAccounts.accountsDb.attachCeDatabase(v39);
							AccountManagerService.syncDeCeAccountsLocked();
							if ( == 0) {
								AccountManagerService.validateAccountsInternal(, 1);
								AccountManagerService$UserAccounts v28 = ;
								AccountManagerService$UserAccounts v27 = v28;
								AccountManagerService$14 v45 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
								if (v48 == 0) {
									IAccountAuthenticatorCache v56 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
									AuthenticatorDescription v57 = AuthenticatorDescription.newKey(this.mAccountType);
									int v58 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									RegisteredServicesCache$ServiceInfo v59 = v56.getServiceInfo(v57, v58);
									if (v59 != 0) {
										int v60 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v61 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v60);
										if (v61 != 0) {
											if (ComponentInfo.directBootAware != 0) {
												Intent v62 = new Intent();
												Intent v64 = v62.setAction("android.accounts.AccountAuthenticator");
												Intent v65 = v62.setComponent(RegisteredServicesCache$ServiceInfo.componentName);
												if (v66 == 0) {
													IAccountAuthenticatorCache v73 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
													int v74 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
													boolean v75 = v73.getBindInstantServiceAllowed(v74);
													if (v75 == 0) {
														int v76 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
														UserHandle v77 = UserHandle.of(v76);
														boolean v78 = AccountManagerService.mContext.bindServiceAsUser(v62, AccountManagerService$Session, , v77);
														if (v78 != 0) {
															if (v79 == 0) {
																boolean v55 = 0;
																if (v55 != 0) {
																	long v84 = SystemClock.elapsedRealtime();
																	String v85 = AccountManagerService$Session.toDebugString(v84);
																	String v83 = v85;
																	this.mNumErrors = (this.mNumErrors + 1);
																	IAccountManagerResponse v90 = AccountManagerService$Session.getResponseAndClose();
																	if (v90 == 0) {
																		if (v91 == 0) {
																			Class v94 = AccountManagerService$Session.getClass();
																			String v95 = v94.getSimpleName();
																			v90.onError(1, "bind failure");
																			if (v102 == 0) {
																				IAccountManager$Stub.restoreCallingIdentity(v26);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = Binder.getCallingUid();
				int v22 = UserHandle.getCallingUserId();
				String v23 = p5.getString("androidPackageName");
				String v24 = new String(1);
				long v26 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v28 = AccountManagerService.getUserAccountsNotChecked(v22);
				AccountManagerService$UserAccounts v27 = v28;
				AccountManagerService$14 v29 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
				if (v32 == 0) {
					boolean v39 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
					if (v39 != 0) {
						String v43 = AccountManagerService$Session.toDebugString();
						AccountManagerService$Session.onError(1, "bind failure");
						IAccountManager$Stub.restoreCallingIdentity(v26);
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	if (v2 == 0) {
		int v14 = Binder.getCallingUid();
		int v17 = Binder.getCallingPid();
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = Binder.getCallingUid();
				int v22 = UserHandle.getCallingUserId();
				String v23 = p5.getString("androidPackageName");
				String v24 = new String(1);
				long v26 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v27 = p0.getUserAccounts(v22);
				AccountManagerService$14 v28 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
				v28.bind();
				IAccountManager$Stub.restoreCallingIdentity(v26);
				return;
			}
		}
	}
}
