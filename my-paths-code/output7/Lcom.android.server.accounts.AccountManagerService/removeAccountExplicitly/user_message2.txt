The method removeAccountExplicitly has the following code snippet:

This is path 1 for the API with depth 2:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		UserHandle v14 = Binder.getCallingUserHandle();
		int v15 = v14.getIdentifier();
		if (p1 != 0) {
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					int v21 = UserHandle.getCallingUserId();
					AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v21);
					AccountManagerService$UserAccounts v22 = v23;
					AccountManagerService$UserAccounts v20 = v22;
					long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
					if ((this.mDebugDbInsertionPoint < -1) != 0) {
						this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
						long v26 = this.mDebugDbInsertionPoint;
						if ((v26 < -1) == 0) {
							AccountManagerService$1LogRecordTask v27 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v24,v20,v1,v26);
							boolean v29 = this.mHandler.post(v27);
							long v30 = IAccountManager$Stub.clearCallingIdentity();
							int v32 = this.userId;
							boolean v34 = this.mLocalUnlockedUsers.get(v32);
							boolean v33 = v34;
							if (v33 != 0) {
								String v38 = p1.toSafeString();
								int v41 = this.userId;
								HashSet v47 = new HashSet();
								Map v49 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p1);
								String v50 = new String(2);
								if ( >= 2) {
									Map v51 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p1);
									Object v52 = v51.get(v50[]);
									if (v52 == 0) {
										Set v53 = v52.keySet();
										boolean v54 = v47.addAll(v53);
										if ( >= 2) {
											HashMap v55 = new HashMap();
											Iterator v57 = v47.iterator();
											boolean v58 = v57.hasNext();
											if (v58 == 0) {
												Object v59 = v57.next();
												Integer v60 = AccountManagerService.resolveAccountVisibility(p2, v59, p1);
												Object v61 = v55.put(v59, v60);
												boolean v62 = v57.hasNext();
												if (v62 == 0) {
													Map v46 = v55;
													Intent v64 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
													Intent v66 = v64.setFlags(16777216);
													int v67 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
													List v68 = this.mPackageManager.queryBroadcastReceiversAsUser(v64, 0, v67);
													ArrayList v69 = new ArrayList();
													if (v68 != 0) {
														Iterator v71 = v68.iterator();
														boolean v72 = v71.hasNext();
														if (v72 == 0) {
															Object v73 = v71.next();
															Integer v74 = AccountManagerService.resolveAccountVisibility(p2, ApplicationInfo.packageName, p1);
															int v75 = v74.intValue();
															if (v75 == 1) {
																if (v75 != 2) {
																	boolean v76 = v69.add(ApplicationInfo.packageName);
																	boolean v77 = v71.hasNext();
																	if (v77 == 0) {
																		List v63 = v69;
																		SQLiteDatabase v79 = this.mDeDatabase.getWritableDatabase();
																		v79.beginTransaction();
																		SQLiteDatabase v82 = this.mDeDatabase.getReadableDatabase();
																		String v83 = new String(1);
																		String v84 = new String(2);
																		Cursor v85 = v82.query("accounts", v83, "name=? AND type=?", v84, 0, 0, 0);
																		boolean v86 = v85.moveToNext();
																		if (v86 == 0) {
																			long v87 = v85.getLong(0);
																			v85.close();
																			long v81 = v87;
																			if ((v81 < 0) < 0) {
																				SQLiteDatabase v90 = this.mDeDatabase.getWritableDatabase();
																				StringBuilder v91 = new StringBuilder();
																				StringBuilder v93 = v91.append("_id=");
																				StringBuilder v94 = v91.append(v81);
																				String v95 = v91.toString();
																				int v96 = v90.delete("accounts", v95, 0);
																				if (v96 <= 0) {
																					boolean v89 = ;
																					if (v33 == 0) {
																						SQLiteDatabase v98 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
																						String v99 = new String(1);
																						String v100 = new String(2);
																						Cursor v101 = v98.query("ceDb.accounts", v99, "name=? AND type=?", v100, 0, 0, 0);
																						boolean v102 = v101.moveToNext();
																						if (v102 == 0) {
																							long v103 = v101.getLong(0);
																							v101.close();
																							long v97 = v103;
																							if ((v97 < 0) < 0) {
																								SQLiteDatabase v106 = this.mDeDatabase.getWritableDatabase();
																								v106.setTransactionSuccessful();
																								SQLiteDatabase v109 = this.mDeDatabase.getWritableDatabase();
																								v109.endTransaction();
																								if ( == 0) {
																									long v111 = Binder.clearCallingIdentity();
																									int v112 = this.userId;
																									UserManager v114 = AccountManagerService.getUserManager();
																									UserInfo v115 = v114.getUserInfo(v112);
																									if (v115 == 0) {
																										boolean v116 = v115.canHaveProfile();
																										if (v116 == 0) {
																											boolean v113 = ;
																											if (v113 == 0) {
																												Binder.restoreCallingIdentity(v111);
																												if ( == 0) {
																													AccountManager.invalidateLocalAccountUserDataCaches();
																													boolean v31 = ;
																													IAccountManager$Stub.restoreCallingIdentity(v30);
																													return v31;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		UserHandle v14 = Binder.getCallingUserHandle();
		int v15 = v14.getIdentifier();
		if (p1 != 0) {
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					int v21 = UserHandle.getCallingUserId();
					AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v21);
					AccountManagerService$UserAccounts v22 = v23;
					AccountManagerService$UserAccounts v20 = v22;
					long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
					if ((this.mDebugDbInsertionPoint < -1) != 0) {
						this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
						long v26 = this.mDebugDbInsertionPoint;
						if ((v26 < -1) == 0) {
							AccountManagerService$1LogRecordTask v27 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v24,v20,v1,v26);
							boolean v29 = this.mHandler.post(v27);
							long v30 = IAccountManager$Stub.clearCallingIdentity();
							int v32 = this.userId;
							boolean v34 = this.mLocalUnlockedUsers.get(v32);
							boolean v33 = v34;
							if (v33 != 0) {
								String v38 = p1.toSafeString();
								int v41 = this.userId;
								HashSet v47 = new HashSet();
								Map v49 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p1);
								String v50 = new String(2);
								if ( >= 2) {
									Map v51 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p1);
									Object v52 = v51.get(v50[]);
									if (v52 == 0) {
										Set v53 = v52.keySet();
										boolean v54 = v47.addAll(v53);
										if ( >= 2) {
											HashMap v55 = new HashMap();
											Iterator v57 = v47.iterator();
											boolean v58 = v57.hasNext();
											if (v58 == 0) {
												Object v59 = v57.next();
												Integer v60 = AccountManagerService.resolveAccountVisibility(p2, v59, p1);
												Object v61 = v55.put(v59, v60);
												boolean v62 = v57.hasNext();
												if (v62 == 0) {
													Map v46 = v55;
													Intent v64 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
													Intent v66 = v64.setFlags(16777216);
													int v67 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
													List v68 = this.mPackageManager.queryBroadcastReceiversAsUser(v64, 0, v67);
													ArrayList v69 = new ArrayList();
													if (v68 != 0) {
														Iterator v71 = v68.iterator();
														boolean v72 = v71.hasNext();
														if (v72 == 0) {
															Object v73 = v71.next();
															Integer v74 = AccountManagerService.resolveAccountVisibility(p2, ApplicationInfo.packageName, p1);
															int v75 = v74.intValue();
															if (v75 == 1) {
																if (v75 != 2) {
																	boolean v76 = v69.add(ApplicationInfo.packageName);
																	boolean v77 = v71.hasNext();
																	if (v77 == 0) {
																		List v63 = v69;
																		SQLiteDatabase v79 = this.mDeDatabase.getWritableDatabase();
																		v79.beginTransaction();
																		SQLiteDatabase v82 = this.mDeDatabase.getReadableDatabase();
																		String v83 = new String(1);
																		String v84 = new String(2);
																		Cursor v85 = v82.query("accounts", v83, "name=? AND type=?", v84, 0, 0, 0);
																		boolean v86 = v85.moveToNext();
																		if (v86 == 0) {
																			v85.close();
																			long v81 = -1;
																			if ((v81 < 0) < 0) {
																				SQLiteDatabase v89 = this.mDeDatabase.getWritableDatabase();
																				StringBuilder v90 = new StringBuilder();
																				StringBuilder v92 = v90.append("_id=");
																				StringBuilder v93 = v90.append(v81);
																				String v94 = v90.toString();
																				int v95 = v89.delete("accounts", v94, 0);
																				if (v95 <= 0) {
																					boolean v88 = ;
																					if (v33 == 0) {
																						SQLiteDatabase v97 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
																						String v98 = new String(1);
																						String v99 = new String(2);
																						Cursor v100 = v97.query("ceDb.accounts", v98, "name=? AND type=?", v99, 0, 0, 0);
																						boolean v101 = v100.moveToNext();
																						if (v101 == 0) {
																							long v102 = v100.getLong(0);
																							v100.close();
																							long v96 = v102;
																							if ((v96 < 0) < 0) {
																								SQLiteDatabase v105 = this.mDeDatabase.getWritableDatabase();
																								v105.setTransactionSuccessful();
																								SQLiteDatabase v108 = this.mDeDatabase.getWritableDatabase();
																								v108.endTransaction();
																								if ( == 0) {
																									long v110 = Binder.clearCallingIdentity();
																									int v111 = this.userId;
																									UserManager v113 = AccountManagerService.getUserManager();
																									UserInfo v114 = v113.getUserInfo(v111);
																									if (v114 == 0) {
																										boolean v115 = v114.canHaveProfile();
																										if (v115 == 0) {
																											boolean v112 = ;
																											if (v112 == 0) {
																												Binder.restoreCallingIdentity(v110);
																												if ( == 0) {
																													AccountManager.invalidateLocalAccountUserDataCaches();
																													boolean v31 = ;
																													IAccountManager$Stub.restoreCallingIdentity(v30);
																													return v31;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	if (v2 == 0) {
		int v10 = Binder.getCallingPid();
		UserHandle v14 = Binder.getCallingUserHandle();
		int v15 = v14.getIdentifier();
		if (p1 != 0) {
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					int v21 = UserHandle.getCallingUserId();
					AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v21);
					AccountManagerService$UserAccounts v22 = v23;
					AccountManagerService$UserAccounts v20 = v22;
					long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
					if ((this.mDebugDbInsertionPoint < -1) != 0) {
						long v27 = AccountsDb.calculateDebugTableInsertionPoint();
						this.mDebugDbInsertionPoint = v27;
						long v26 = this.mDebugDbInsertionPoint;
						if ((v26 < -1) == 0) {
							AccountManagerService$1LogRecordTask v28 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v24,v20,v1,v26);
							boolean v30 = this.mHandler.post(v28);
							long v31 = IAccountManager$Stub.clearCallingIdentity();
							int v33 = this.userId;
							boolean v35 = this.mLocalUnlockedUsers.get(v33);
							boolean v34 = v35;
							if (v34 != 0) {
								String v39 = p1.toSafeString();
								int v42 = this.userId;
								HashSet v48 = new HashSet();
								Map v50 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p1);
								String v51 = new String(2);
								if ( >= 2) {
									Map v52 = AccountManagerService$UserAccounts.-$$Nest$fgetmReceiversForType(p1);
									Object v53 = v52.get(v51[]);
									if (v53 == 0) {
										Set v54 = v53.keySet();
										boolean v55 = v48.addAll(v54);
										if ( >= 2) {
											HashMap v56 = new HashMap();
											Iterator v58 = v48.iterator();
											boolean v59 = v58.hasNext();
											if (v59 == 0) {
												Object v60 = v58.next();
												Integer v61 = AccountManagerService.resolveAccountVisibility(p2, v60, p1);
												Object v62 = v56.put(v60, v61);
												boolean v63 = v58.hasNext();
												if (v63 == 0) {
													Map v47 = v56;
													Intent v65 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
													Intent v67 = v65.setFlags(16777216);
													int v68 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
													List v69 = this.mPackageManager.queryBroadcastReceiversAsUser(v65, 0, v68);
													ArrayList v70 = new ArrayList();
													if (v69 != 0) {
														Iterator v72 = v69.iterator();
														boolean v73 = v72.hasNext();
														if (v73 == 0) {
															Object v74 = v72.next();
															Integer v75 = AccountManagerService.resolveAccountVisibility(p2, ApplicationInfo.packageName, p1);
															int v76 = v75.intValue();
															if (v76 == 1) {
																if (v76 != 2) {
																	boolean v77 = v70.add(ApplicationInfo.packageName);
																	boolean v78 = v72.hasNext();
																	if (v78 == 0) {
																		List v64 = v70;
																		SQLiteDatabase v80 = this.mDeDatabase.getWritableDatabase();
																		v80.beginTransaction();
																		SQLiteDatabase v83 = this.mDeDatabase.getReadableDatabase();
																		String v84 = new String(1);
																		String v85 = new String(2);
																		Cursor v86 = v83.query("accounts", v84, "name=? AND type=?", v85, 0, 0, 0);
																		boolean v87 = v86.moveToNext();
																		if (v87 == 0) {
																			long v88 = v86.getLong(0);
																			v86.close();
																			long v82 = v88;
																			if ((v82 < 0) < 0) {
																				SQLiteDatabase v91 = this.mDeDatabase.getWritableDatabase();
																				StringBuilder v92 = new StringBuilder();
																				StringBuilder v94 = v92.append("_id=");
																				StringBuilder v95 = v92.append(v82);
																				String v96 = v92.toString();
																				int v97 = v91.delete("accounts", v96, 0);
																				if (v97 <= 0) {
																					boolean v90 = ;
																					if (v34 == 0) {
																						SQLiteDatabase v99 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
																						String v100 = new String(1);
																						String v101 = new String(2);
																						Cursor v102 = v99.query("ceDb.accounts", v100, "name=? AND type=?", v101, 0, 0, 0);
																						boolean v103 = v102.moveToNext();
																						if (v103 == 0) {
																							long v104 = v102.getLong(0);
																							v102.close();
																							long v98 = v104;
																							if ((v98 < 0) < 0) {
																								SQLiteDatabase v107 = this.mDeDatabase.getWritableDatabase();
																								v107.setTransactionSuccessful();
																								SQLiteDatabase v110 = this.mDeDatabase.getWritableDatabase();
																								v110.endTransaction();
																								if ( == 0) {
																									long v112 = Binder.clearCallingIdentity();
																									int v113 = this.userId;
																									UserManager v115 = AccountManagerService.getUserManager();
																									UserInfo v116 = v115.getUserInfo(v113);
																									if (v116 == 0) {
																										boolean v117 = v116.canHaveProfile();
																										if (v117 == 0) {
																											boolean v114 = ;
																											if (v114 == 0) {
																												Binder.restoreCallingIdentity(v112);
																												if ( == 0) {
																													AccountManager.invalidateLocalAccountUserDataCaches();
																													boolean v32 = ;
																													IAccountManager$Stub.restoreCallingIdentity(v31);
																													return v32;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SQLiteDatabase v79 = this.mDeDatabase.getWritableDatabase();\nv79.beginTransaction();\nint v96 = v90.delete("accounts", v95, 0);', 'List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nlong v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);\nAccountManagerService$1LogRecordTask v27 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v24,v20,v1,v26);', 'List v17 = AccountManagerService.getTypesManagedByCaller(v1, v15);\nlong v22 = v28;\nAccountManagerService$1LogRecordTask v32 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v22,v19,v1,v31);', 'boolean v16 = p0.isAccountManagedByCaller(Account.type, v1, v15);\nlong v18 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);\np0.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE, "accounts", v18, v17, v1);', 'boolean v21 = p0.removeAccountInternal(v17, p1, v1);']

The method removeAccountExplicitly has the following similar APIs:

- API Name: setPassword(Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.8804906606674194
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v41 = this.mDeDatabase.getWritableDatabase();
v41.beginTransaction();
ContentValues v53 = new ContentValues();
v53.put("password", p3);
int v58 = v52.update("ceDb.accounts", v53, "_id=?", v56);

- API Name: invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.8751429915428162
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v21 = this.mDeDatabase.getWritableDatabase();
Cursor v26 = AccountManagerService$UserAccounts.accountsDb.findAuthtokenForAllAccounts(p1, p2);
Account v32 = new Account(v29,p1);

