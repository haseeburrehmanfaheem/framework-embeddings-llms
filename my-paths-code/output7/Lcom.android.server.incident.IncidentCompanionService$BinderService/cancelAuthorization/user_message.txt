This is path 1 for the API with depth 2:
public void cancelAuthorization(IIncidentAuthListener p1){
	long v2 = Binder.clearCallingIdentity();
	PendingReports v3 = this.mPendingReports;
	IBinder v5 = p1.asBinder();
	PendingReports$$ExternalSyntheticLambda1 v6 = new PendingReports$$ExternalSyntheticLambda1(PendingReports,p1);
	if (0 != 0) {
		int v9 = this.mPending.size();
		if ( < 0) {
			Object v10 = this.mPending.get();
			if (RequestQueue$Rec.key != v5) {
				if (RequestQueue$Rec.value == 0) {
					if ( < 0) {
						Object v11 = this.mPending.get();
						if (RequestQueue$Rec.key != v5) {
							if (RequestQueue$Rec.value == 0) {
								Object v12 = this.mPending.remove();
								if ( != 0) {
									RequestQueue$Rec v13 = new RequestQueue$Rec(RequestQueue,v5,0,v6);
									boolean v15 = this.mPending.add(v13);
									if (this.mStarted == 0) {
										boolean v16 = this.mHandler.post(this.mWorker);
										Binder.restoreCallingIdentity(v2);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void cancelAuthorization(IIncidentAuthListener p1){
	long v2 = Binder.clearCallingIdentity();
	PendingReports v3 = this.mPendingReports;
	IBinder v5 = p1.asBinder();
	PendingReports$$ExternalSyntheticLambda1 v6 = new PendingReports$$ExternalSyntheticLambda1(PendingReports,p1);
	this.mRequestQueue.enqueue(v5, 0, v6);
	Binder.restoreCallingIdentity(v2);
	return;
}


This is path 3 for the API with depth 0:
public void cancelAuthorization(IIncidentAuthListener p1){
	long v2 = Binder.clearCallingIdentity();
	PendingReports v3 = IncidentCompanionService.-$$Nest$fgetmPendingReports(this.this$0);
	v3.cancelAuthorization(p1);
	Binder.restoreCallingIdentity(v2);
	return;
}
