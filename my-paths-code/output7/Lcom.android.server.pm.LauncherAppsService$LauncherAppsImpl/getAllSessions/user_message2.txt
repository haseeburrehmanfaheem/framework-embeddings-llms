The method getAllSessions has the following code snippet:

This is path 1 for the API with depth 2:
public ParceledListSlice getAllSessions(String p1){
	int v3 = ILauncherApps$Stub.getCallingUid();
	int v2 = v3;
	int v5 = UserHandle.getUserId(v2);
	int v6 = this.mIPM.getPackageUid(p1, 794624, v5);
	if ( >= 0) {
		if ( != v2) {
			ArrayList v7 = new ArrayList();
			int v11 = ILauncherApps$Stub.getCallingUid();
			int v10 = v11;
			int v12 = UserHandle.getUserId(v10);
			int v9 = v12;
			[I v13 = this.mUm.getEnabledProfileIds(v9);
			int v14 = Binder.getCallingUid();
			long v15 = Binder.clearCallingIdentity();
			if ( >= v13.length) {
				PackageInstallerService v16 = p0.getPackageInstallerService();
				ArrayList v21 = new ArrayList();
				int v23 = this.mSessions.size();
				if ( >= v23) {
					Object v24 = this.mSessions.valueAt();
					if (PackageInstallerSession.userId != v13[]) {
						if (this.mParentSessionId == -1) {
							boolean v25 = ;
							if (v25 != 0) {
								boolean v26 = PackageInstaller$SessionParams.isStaged;
								if (v26 == 0) {
									boolean v27 = this.mDestroyed;
									if (v27 != 0) {
										boolean v29 = PackageInstallerSession.shouldScrubData(v18);
										PackageInstaller$SessionInfo v30 = PackageInstallerSession.generateInfoInternal(0, v29);
										PackageInstaller$SessionInfo v28 = v30;
										boolean v31 = v21.add(v28);
										int v32 = this.mSessions.size();
										if ( >= v32) {
											PackageInstallerService$$ExternalSyntheticLambda1 v33 = new PackageInstallerService$$ExternalSyntheticLambda1(PackageInstallerService,v19,v18);
											boolean v35 = v21.removeIf(v33);
											ParceledListSlice v36 = new ParceledListSlice(v21);
											ParceledListSlice v17 = v36;
											List v38 = v17.getList();
											boolean v39 = v7.addAll(v38);
											if ( >= v13.length) {
												Binder.restoreCallingIdentity(v15);
												LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda3 v41 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda3(p0,v14);
												boolean v43 = v7.removeIf(v41);
												ParceledListSlice v44 = new ParceledListSlice(v7);
												return v44;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = ILauncherApps$Stub.getCallingUid();\nint v2 = v3;\nint v5 = UserHandle.getUserId(v2);\nint v6 = this.mIPM.getPackageUid(p1, 794624, v5);\n...\nParceledListSlice v36 = new ParceledListSlice(v21);\nreturn v44;', 'int v7 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();\nint v8 = UserHandle.getUserId(v7);\n[I v9 = this.mUm.getEnabledProfileIds(v6);\n...\nParceledListSlice v33 = new ParceledListSlice(v20);\nreturn v41;', 'p0.verifyCallingPackage(p1);\n[I v5 = this.mUm.getEnabledProfileIds(v4);\nParceledListSlice v9 = v8.getAllSessions(v5[]);\nreturn v16;']

The method getAllSessions has the following similar APIs:

- API Name: hasShortcutHostPermission(Ljava/lang/String;)Z with Similarity Score: 0.8811948299407959
  - Access Control Level: NONE and the following code:
int v3 = ILauncherApps$Stub.getCallingUid();
int v2 = v3;
int v5 = UserHandle.getUserId(v2);
int v6 = this.mIPM.getPackageUid(p1, 794624, v5);
if (v6 >= 0) {
    if (v6 != v2) {
        int v9 = ILauncherApps$Stub.getCallingUid();
        int v8 = v9;
        int v10 = UserHandle.getUserId(v8);
        int v7 = v10;
        int v11 = p0.injectBinderCallingPid();
        int v12 = p0.injectBinderCallingUid();
        boolean v13 = this.mShortcutServiceInternal.hasShortcutHostPermission(v7, p1, v11, v12);
        return v13;

- API Name: canRequestInteractAcrossProfiles(Ljava/lang/String;)Z with Similarity Score: 0.8229992389678955
  - Access Control Level: NONE and the following code:
UserManager v7 = this.mInjector.getUserManager();
int v8 = this.mInjector.getCallingUserId();
[I v9 = v7.getEnabledProfileIds(v8);
boolean v11 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[]);

