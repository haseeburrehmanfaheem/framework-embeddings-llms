The method registerShortcutChangeCallback has the following code snippet:

This is path 1 for the API with depth 2:
public void registerShortcutChangeCallback(String p1, ShortcutQueryWrapper p2, IShortcutChangeCallback p3){
	List v2 = this.mShortcutIds;
	if (v2 == 0) {
		String v3 = this.mPackage;
		if (v3 == 0) {
			List v4 = this.mLocusIds;
			if (v4 == 0) {
				String v5 = this.mPackage;
				if (v5 == 0) {
					int v8 = ILauncherApps$Stub.getCallingUid();
					int v7 = v8;
					int v9 = UserHandle.getUserId(v7);
					int v6 = v9;
					UserHandle v10 = UserHandle.of(v6);
					int v11 = p0.injectBinderCallingPid();
					int v12 = p0.injectBinderCallingUid();
					if (v13 == 0) {
						this.mShortcutChangeHandler.addShortcutChangeCallback(p3, p2, );
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v8 = ILauncherApps$Stub.getCallingUid();\nUserHandle v10 = UserHandle.of(v6);\nthis.mShortcutChangeHandler.addShortcutChangeCallback(p3, p2, );', 'int v7 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();\nUserHandle v9 = UserHandle.of(v6);\nthis.mShortcutChangeHandler.addShortcutChangeCallback(p3, p2, );', 'int v6 = p0.injectCallingUserId();\nUserHandle v7 = UserHandle.of(v6);\nthis.mShortcutChangeHandler.addShortcutChangeCallback(p3, p2, );']

The method registerShortcutChangeCallback has the following similar APIs:

- API Name: getShortcutIconFd(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Landroid/os/ParcelFileDescriptor; with Similarity Score: 0.8695200681686401
  - Access Control Level: SYS_OR_SIG and the following code:
int v10 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
int v11 = UserHandle.getUserId(v10);
this.mShortcutServiceInternal.getShortcutIconFdAsync(v9, p1, p2, p3, p4, v7);
Object v13 = v7.get();
return v13;

- API Name: hasShortcutHostPermission(Ljava/lang/String;)Z with Similarity Score: 0.8579704761505127
  - Access Control Level: NONE and the following code:
int v2 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
LauncherAppsService$LauncherAppsImpl.verifyCallingPackage(p1, v2);
int v5 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
int v6 = UserHandle.getUserId(v5);
int v4 = v6;
int v8 = ILauncherApps$Stub.getCallingPid();
int v7 = v8;
int v10 = ILauncherApps$Stub.getCallingUid();
int v9 = v10;
boolean v11 = this.mShortcutServiceInternal.hasShortcutHostPermission(v4, p1, v7, v9);
return v11;

