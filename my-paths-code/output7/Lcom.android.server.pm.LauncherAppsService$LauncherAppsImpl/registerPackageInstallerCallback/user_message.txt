This is path 1 for the API with depth 2:
public void registerPackageInstallerCallback(String p1, IPackageInstallerCallback p2){
	int v3 = ILauncherApps$Stub.getCallingUid();
	int v2 = v3;
	int v5 = UserHandle.getUserId(v2);
	int v6 = this.mIPM.getPackageUid(p1, 794624, v5);
	if ( >= 0) {
		if ( != v2) {
			UserHandle v7 = new UserHandle(v8);
			int v10 = ILauncherApps$Stub.getCallingUid();
			int v9 = v10;
			int v11 = UserHandle.getUserId(v9);
			int v8 = v11;
			PackageInstallerService v13 = p0.getPackageInstallerService();
			LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v14 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v7);
			v13.registerCallback(p2, v14);
			return;
		}
	}
}


This is path 2 for the API with depth 1:
public void registerPackageInstallerCallback(String p1, IPackageInstallerCallback p2){
	int v2 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
	LauncherAppsService$LauncherAppsImpl.verifyCallingPackage(p1, v2);
	UserHandle v4 = new UserHandle(v5);
	int v6 = LauncherAppsService$LauncherAppsImpl.injectBinderCallingUid();
	int v7 = UserHandle.getUserId(v6);
	int v5 = v7;
	if (this.mPackageInstallerService != 0) {
		IBinder v10 = ServiceManager.getService("package");
		IPackageInstaller v11 = v10.getPackageInstaller();
		PackageInstallerService v9 = this.mPackageInstallerService;
		LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v13 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v4);
		v9.registerCallback(p2, v13);
		return;
	}
}


This is path 3 for the API with depth 0:
public void registerPackageInstallerCallback(String p1, IPackageInstallerCallback p2){
	p0.verifyCallingPackage(p1);
	UserHandle v2 = new UserHandle(v3);
	int v3 = p0.getCallingUserId();
	PackageInstallerService v5 = p0.getPackageInstallerService();
	LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1 v6 = new LauncherAppsService$LauncherAppsImpl$$ExternalSyntheticLambda1(p0,v2);
	v5.registerCallback(p2, v6);
	return;
}
