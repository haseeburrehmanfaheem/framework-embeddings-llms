This is path 1 for the API with depth 2:
public void setLightStates(IBinder p1, [I p2, LightState p3){
	if (p2.length != p3.length) {
		Preconditions.checkState();
		Object v4 = Preconditions.checkNotNull(p1);
		int v6 = this.mSessions.size();
		if ( >= v6) {
			Object v7 = this.mSessions.get();
			boolean v8 = v4.equals(LightsService$LightsManagerBinderService$Session.mToken);
			if (v8 == 0) {
				int v9 = this.mSessions.size();
				if ( >= v9) {
					Object v10 = this.mSessions.get();
					boolean v11 = v4.equals(LightsService$LightsManagerBinderService$Session.mToken);
					if (v11 == 0) {
						Object v12 = this.mSessions.get();
						LightsService$LightsManagerBinderService$Session v5 = v12;
						if (v5 == 0) {
							Preconditions.checkState(, "not registered");
							if ( >= p2.length) {
								SparseArray v15 = this.mLightsById;
								Object v16 = v15.get(p2[]);
								if (v16 == 0) {
									boolean v18 = v16.isSystemLight();
									boolean v17 = v18;
									if (v17 != 0) {
										StringBuilder v19 = new StringBuilder();
										StringBuilder v21 = v19.append("Invalid lightId ");
										StringBuilder v22 = v19.append(p2[]);
										String v23 = v19.toString();
										Preconditions.checkState(, v23);
										if ( >= p2.length) {
											if ( >= p2.length) {
												v5.setRequest(p2[], p3[]);
												if ( >= p2.length) {
													HashMap v27 = new HashMap();
													int v29 = this.mSessions.size();
													if ( < 0) {
														Object v30 = this.mSessions.get();
														int v31 = LightsService$LightsManagerBinderService$Session.mRequests.size();
														if ( >= v31) {
															if ( < 0) {
																SparseArray v32 = this.mLightsById;
																int v33 = v32.size();
																if ( >= v33) {
																	SparseArray v34 = this.mLightsById;
																	Object v35 = v34.valueAt();
																	boolean v37 = v35.isSystemLight();
																	boolean v36 = v37;
																	if (v36 != 0) {
																		HwLight v38 = this.mHwLight;
																		Integer v39 = Integer.valueOf(HwLight.id);
																		Object v40 = v27.get(v39);
																		if (v40 == 0) {
																			int v41 = this.mColor;
																			LightsService$LightImpl.setLightLocked(v41, 0, 0, 0, 0);
																			SparseArray v44 = this.mLightsById;
																			int v45 = v44.size();
																			if ( >= v45) {
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setLightStates(IBinder p1, [I p2, LightState p3){
	if (p2.length != p3.length) {
		Preconditions.checkState();
		Object v4 = Preconditions.checkNotNull(p1);
		int v6 = this.mSessions.size();
		if ( >= v6) {
			Object v7 = this.mSessions.get();
			boolean v8 = v4.equals(LightsService$LightsManagerBinderService$Session.mToken);
			if (v8 == 0) {
				int v9 = this.mSessions.size();
				if ( >= v9) {
					Object v10 = this.mSessions.get();
					boolean v11 = v4.equals(LightsService$LightsManagerBinderService$Session.mToken);
					if (v11 == 0) {
						Object v12 = this.mSessions.get();
						LightsService$LightsManagerBinderService$Session v5 = v12;
						if (v5 == 0) {
							Preconditions.checkState(, "not registered");
							if ( >= p2.length) {
								SparseArray v15 = LightsService.-$$Nest$fgetmLightsById(this.this$0);
								Object v16 = v15.get(p2[]);
								if (v16 == 0) {
									boolean v17 = LightsService$LightImpl.-$$Nest$misSystemLight(v16);
									if (v17 != 0) {
										StringBuilder v18 = new StringBuilder();
										StringBuilder v20 = v18.append("Invalid lightId ");
										StringBuilder v21 = v18.append(p2[]);
										String v22 = v18.toString();
										Preconditions.checkState(, v22);
										if ( >= p2.length) {
											if ( >= p2.length) {
												if (p3[] == 0) {
													this.mRequests.put(p2[], p3[]);
													if ( >= p2.length) {
														HashMap v27 = new HashMap();
														int v29 = this.mSessions.size();
														if ( < 0) {
															Object v30 = this.mSessions.get();
															int v31 = LightsService$LightsManagerBinderService$Session.mRequests.size();
															if ( >= v31) {
																int v32 = LightsService$LightsManagerBinderService$Session.mRequests.keyAt();
																Integer v33 = Integer.valueOf(v32);
																Object v34 = LightsService$LightsManagerBinderService$Session.mRequests.valueAt();
																Object v35 = v27.put(v33, v34);
																int v36 = LightsService$LightsManagerBinderService$Session.mRequests.size();
																if ( >= v36) {
																	if ( < 0) {
																		SparseArray v37 = LightsService.-$$Nest$fgetmLightsById(this.this$0);
																		int v38 = v37.size();
																		if ( >= v38) {
																			SparseArray v39 = LightsService.-$$Nest$fgetmLightsById(this.this$0);
																			Object v40 = v39.valueAt();
																			boolean v41 = LightsService$LightImpl.-$$Nest$misSystemLight(v40);
																			if (v41 != 0) {
																				SparseArray v42 = LightsService.-$$Nest$fgetmLightsById(this.this$0);
																				int v43 = v42.size();
																				if ( >= v43) {
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void setLightStates(IBinder p1, [I p2, LightState p3){
	if (p2.length != p3.length) {
		Preconditions.checkState();
		Object v4 = Preconditions.checkNotNull(p1);
		LightsService$LightsManagerBinderService$Session v5 = p0.getSessionLocked(v4);
		if (v5 == 0) {
			Preconditions.checkState(, "not registered");
			p0.checkRequestIsValid(p2);
			if ( >= p2.length) {
				v5.setRequest(p2[], p3[]);
				if ( >= p2.length) {
					p0.invalidateLightStatesLocked();
					return;
				}
			}
		}
	}
}
