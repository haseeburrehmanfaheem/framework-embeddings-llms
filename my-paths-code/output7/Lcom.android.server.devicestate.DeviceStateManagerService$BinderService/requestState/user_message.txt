This is path 1 for the API with depth 2:
public void requestState(IBinder p1, int p2, int p3){
	int v1 = Binder.getCallingPid();
	if (p1 == 0) {
		long v9 = Binder.clearCallingIdentity();
		Object v12 = this.mProcessRecords.get(p4);
		if (v12 == 0) {
			boolean v13 = this.mOverrideRequestController.hasRequest(p5, 0);
			if (v13 != 0) {
				Optional v14 = DeviceStateManagerService.getStateLocked(p2);
				boolean v15 = v14.isPresent();
				if (v15 == 0) {
					OverrideRequest v16 = new OverrideRequest(p5,p4,p2,p3,0);
					this.mOverrideRequestController.addRequest(v16);
					Binder.restoreCallingIdentity(v9);
					return;
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void requestState(IBinder p1, int p2, int p3){
	int v1 = Binder.getCallingPid();
	this.this$0.assertCanRequestDeviceState(v1, p2);
	if (p1 == 0) {
		long v4 = Binder.clearCallingIdentity();
		this.this$0.requestStateInternal(p2, p3, v1, p1);
		Binder.restoreCallingIdentity(v4);
		return;
	}
}


This is path 3 for the API with depth 0:
public void requestState(IBinder p1, int p2, int p3){
	int v1 = Binder.getCallingPid();
	DeviceStateManagerService.-$$Nest$massertCanRequestDeviceState(this.this$0, v1, p2);
	if (p1 == 0) {
		long v3 = Binder.clearCallingIdentity();
		DeviceStateManagerService.-$$Nest$mrequestStateInternal(this.this$0, p2, p3, v1, p1);
		Binder.restoreCallingIdentity(v3);
		return;
	}
}
