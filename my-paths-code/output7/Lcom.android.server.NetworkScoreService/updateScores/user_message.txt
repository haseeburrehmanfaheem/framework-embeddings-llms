This is path 1 for the API with depth 1:
public boolean updateScores(ScoredNetwork p1){
	int v1 = INetworkScoreService$Stub.getCallingUid();
	boolean v2 = ;
	if (v2 == 0) {
		long v4 = Binder.clearCallingIdentity();
		ArrayMap v5 = new ArrayMap();
		if ( >= p1.length) {
			Integer v7 = Integer.valueOf(NetworkKey.type);
			Object v8 = v5.get(v7);
			if (v8 != 0) {
				ArrayList v9 = new ArrayList();
				Integer v11 = Integer.valueOf(NetworkKey.type);
				Object v12 = v5.put(v11, v9);
				boolean v13 = .add(p1[]);
				if ( >= p1.length) {
					Set v14 = v5.entrySet();
					Iterator v15 = v14.iterator();
					boolean v16 = v15.hasNext();
					if (v16 == 0) {
						Object v17 = v15.next();
						Object v18 = v17.getKey();
						Object v19 = this.mScoreCaches.get(v18);
						if (v19 == 0) {
							if ( == 0) {
								if (v20 == 0) {
									boolean v21 = v15.hasNext();
									if (v21 == 0) {
										Binder.restoreCallingIdentity(v4);
										return 1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 0:
public boolean updateScores(ScoredNetwork p1){
	int v1 = INetworkScoreService$Stub.getCallingUid();
	boolean v2 = p0.isCallerActiveScorer(v1);
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		ArrayMap v4 = new ArrayMap();
		if ( >= p1.length) {
			Integer v6 = Integer.valueOf(NetworkKey.type);
			Object v7 = v4.get(v6);
			if (v7 != 0) {
				ArrayList v8 = new ArrayList();
				Integer v10 = Integer.valueOf(NetworkKey.type);
				Object v11 = v4.put(v10, v8);
				boolean v12 = .add(p1[]);
				if ( >= p1.length) {
					Set v13 = v4.entrySet();
					Iterator v14 = v13.iterator();
					boolean v15 = v14.hasNext();
					if (v15 == 0) {
						Object v16 = v14.next();
						Object v17 = v16.getKey();
						Object v18 = this.mScoreCaches.get(v17);
						if (v18 == 0) {
							if ( == 0) {
								if (v19 == 0) {
									boolean v20 = v14.hasNext();
									if (v20 == 0) {
										Binder.restoreCallingIdentity(v3);
										return 1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean updateScores(ScoredNetwork p1){
	int v1 = INetworkScoreService$Stub.getCallingUid();
	boolean v2 = p0.isCallerActiveScorer(v1);
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		ArrayMap v4 = new ArrayMap();
		if ( >= p1.length) {
			Integer v6 = Integer.valueOf(NetworkKey.type);
			Object v7 = v4.get(v6);
			if (v7 != 0) {
				boolean v8 = .add(p1[]);
				if ( >= p1.length) {
					Set v9 = v4.entrySet();
					Iterator v10 = v9.iterator();
					boolean v11 = v10.hasNext();
					if (v11 == 0) {
						Object v12 = v10.next();
						Object v13 = v12.getKey();
						Object v14 = this.mScoreCaches.get(v13);
						if (v14 == 0) {
							int v15 = v14.getRegisteredCallbackCount();
							if (v15 != 0) {
								if ( == 0) {
									if (v16 == 0) {
										boolean v17 = v10.hasNext();
										if (v17 == 0) {
											Binder.restoreCallingIdentity(v3);
											return 1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
