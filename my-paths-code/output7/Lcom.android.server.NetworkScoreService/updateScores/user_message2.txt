The method updateScores has the following code snippet:

This is path 1 for the API with depth 1:
public boolean updateScores(ScoredNetwork p1){
	int v1 = INetworkScoreService$Stub.getCallingUid();
	boolean v2 = ;
	if (v2 == 0) {
		long v4 = Binder.clearCallingIdentity();
		ArrayMap v5 = new ArrayMap();
		if ( >= p1.length) {
			Integer v7 = Integer.valueOf(NetworkKey.type);
			Object v8 = v5.get(v7);
			if (v8 != 0) {
				ArrayList v9 = new ArrayList();
				Integer v11 = Integer.valueOf(NetworkKey.type);
				Object v12 = v5.put(v11, v9);
				boolean v13 = .add(p1[]);
				if ( >= p1.length) {
					Set v14 = v5.entrySet();
					Iterator v15 = v14.iterator();
					boolean v16 = v15.hasNext();
					if (v16 == 0) {
						Object v17 = v15.next();
						Object v18 = v17.getKey();
						Object v19 = this.mScoreCaches.get(v18);
						if (v19 == 0) {
							if ( == 0) {
								if (v20 == 0) {
									boolean v21 = v15.hasNext();
									if (v21 == 0) {
										Binder.restoreCallingIdentity(v4);
										return 1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 1:
public boolean updateScores(ScoredNetwork p1){
	int v1 = INetworkScoreService$Stub.getCallingUid();
	boolean v2 = ;
	if (v2 == 0) {
		long v4 = Binder.clearCallingIdentity();
		ArrayMap v5 = new ArrayMap();
		if ( >= p1.length) {
			Integer v7 = Integer.valueOf(NetworkKey.type);
			Object v8 = v5.get(v7);
			if (v8 != 0) {
				boolean v9 = .add(p1[]);
				if ( >= p1.length) {
					Set v10 = v5.entrySet();
					Iterator v11 = v10.iterator();
					boolean v12 = v11.hasNext();
					if (v12 == 0) {
						Object v13 = v11.next();
						Object v14 = v13.getKey();
						Object v15 = this.mScoreCaches.get(v14);
						if (v15 == 0) {
							int v16 = v15.getRegisteredCallbackCount();
							if (v16 != 0) {
								if ( == 0) {
									if (v17 == 0) {
										boolean v18 = v11.hasNext();
										if (v18 == 0) {
											Binder.restoreCallingIdentity(v4);
											return 1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v18 = this.mScoreCaches.get(v17);', 'ArrayMap v4 = new ArrayMap();\nInteger v6 = Integer.valueOf(NetworkKey.type);\nObject v7 = v4.get(v6);\nArrayList v8 = new ArrayList();\nObject v11 = v4.put(v10, v8);', 'boolean v12 = .add(p1[]);\nSet v13 = v4.entrySet();\nIterator v14 = v13.iterator();\nboolean v15 = v14.hasNext();\nObject v16 = v14.next();\nObject v17 = v16.getKey();']

The method updateScores has the following similar APIs:

- API Name: unregisterNetworkScoreCache(ILandroid/net/INetworkScoreCache;)V with Similarity Score: 0.8416696786880493
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v3 = Integer.valueOf(p1);
Object v4 = this.mScoreCaches.get(v3);
boolean v5 = v4.unregister(p2);
int v6 = v4.getRegisteredCallbackCount();
Object v8 = this.mScoreCaches.remove(v7);

- API Name: registerNetworkScoreCache(ILandroid/net/INetworkScoreCache;I)V with Similarity Score: 0.8265492916107178
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v4 = Integer.valueOf(p1);
Object v5 = this.mScoreCaches.get(v4);
RemoteCallbackList v6 = new RemoteCallbackList();
Integer v8 = Integer.valueOf(p1);
Object v9 = this.mScoreCaches.put(v8, v6);
Integer v10 = Integer.valueOf(p3);
boolean v11 = .register(p2, v10);

