The method getAllValidScorers has the following code snippet:

This is path 1 for the API with depth 2:
public List getAllValidScorers(){
	if (this.VERBOSE == 0) {
		PackageManager v5 = this.mContext.getPackageManager();
		Intent v6 = new Intent("android.net.action.RECOMMEND_NETWORKS");
		List v8 = v5.queryIntentServices(v6, 128);
		if (v8 == 0) {
			boolean v9 = v8.isEmpty();
			if (v9 == 0) {
				ArrayList v10 = new ArrayList();
				int v12 = v8.size();
				if ( >= v12) {
					Object v13 = v8.get();
					if (v14 == 0) {
						if (this.VERBOSE == 0) {
							ComponentName v15 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
							if (ServiceInfo.metaData == 0) {
								String v18 = ServiceInfo.metaData.getString("android.net.scoring.recommendation_service_label");
								boolean v19 = TextUtils.isEmpty(v18);
								if (v19 != 0) {
									CharSequence v20 = ResolveInfo.serviceInfo.loadLabel(v5);
									if (v20 != 0) {
										String v17 = ;
										if (ServiceInfo.metaData != 0) {
											String v22 = ServiceInfo.metaData.getString("android.net.wifi.use_open_wifi_package");
											boolean v23 = TextUtils.isEmpty(v22);
											if (v23 == 0) {
												Intent v24 = new Intent("android.net.scoring.CUSTOM_ENABLE");
												Intent v26 = v24.setPackage(v22);
												PackageManager v27 = this.mContext.getPackageManager();
												ResolveInfo v28 = v27.resolveActivity(v26, 0);
												if (this.VERBOSE == 0) {
													if (v28 == 0) {
														if (ResolveInfo.activityInfo == 0) {
															ComponentName v37 = ResolveInfo.activityInfo.getComponentName();
															ComponentName v21 = v37;
															if (ServiceInfo.metaData != 0) {
																if (this.DEBUG == 0) {
																	ComponentName v42 = ResolveInfo.serviceInfo.getComponentName();
																	String v38 = 0;
																	NetworkScorerAppData v46 = new NetworkScorerAppData(ApplicationInfo.uid,v15,v17,v21,v38);
																	boolean v48 = v10.add(v46);
																	int v49 = v8.size();
																	if ( >= v49) {
																		List v3 = v10;
																		return v3;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public List getAllValidScorers(){
	if (this.VERBOSE == 0) {
		PackageManager v5 = this.mContext.getPackageManager();
		Intent v6 = new Intent("android.net.action.RECOMMEND_NETWORKS");
		List v8 = v5.queryIntentServices(v6, 128);
		if (v8 == 0) {
			boolean v9 = v8.isEmpty();
			if (v9 == 0) {
				ArrayList v10 = new ArrayList();
				int v12 = v8.size();
				if ( >= v12) {
					Object v13 = v8.get();
					if (v14 == 0) {
						if (this.VERBOSE == 0) {
							ComponentName v15 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
							if (ServiceInfo.metaData == 0) {
								String v18 = ServiceInfo.metaData.getString("android.net.scoring.recommendation_service_label");
								boolean v19 = TextUtils.isEmpty(v18);
								if (v19 != 0) {
									CharSequence v20 = ResolveInfo.serviceInfo.loadLabel(v5);
									if (v20 != 0) {
										String v21 = v20.toString();
										String v17 = ;
										if (ServiceInfo.metaData != 0) {
											String v23 = ServiceInfo.metaData.getString("android.net.wifi.use_open_wifi_package");
											boolean v24 = TextUtils.isEmpty(v23);
											if (v24 == 0) {
												Intent v25 = new Intent("android.net.scoring.CUSTOM_ENABLE");
												Intent v27 = v25.setPackage(v23);
												PackageManager v28 = this.mContext.getPackageManager();
												ResolveInfo v29 = v28.resolveActivity(v27, 0);
												if (this.VERBOSE == 0) {
													if (v29 == 0) {
														if (ResolveInfo.activityInfo == 0) {
															ComponentName v38 = ResolveInfo.activityInfo.getComponentName();
															ComponentName v22 = v38;
															if (ServiceInfo.metaData != 0) {
																if (this.DEBUG == 0) {
																	ComponentName v43 = ResolveInfo.serviceInfo.getComponentName();
																	String v39 = 0;
																	NetworkScorerAppData v47 = new NetworkScorerAppData(ApplicationInfo.uid,v15,v17,v22,v39);
																	boolean v49 = v10.add(v47);
																	int v50 = v8.size();
																	if ( >= v50) {
																		List v3 = v10;
																		return v3;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['PackageManager v5 = this.mContext.getPackageManager();\nIntent v6 = new Intent("android.net.action.RECOMMEND_NETWORKS");\nList v8 = v5.queryIntentServices(v6, 128);\nNetworkScorerAppData v46 = new NetworkScorerAppData(ApplicationInfo.uid,v15,v17,v21,v38);\nreturn v3;', 'PackageManager v5 = this.mContext.getPackageManager();\nIntent v6 = new Intent("android.net.action.RECOMMEND_NETWORKS");\nList v8 = v5.queryIntentServices(v6, 128);\nNetworkScorerAppData v20 = new NetworkScorerAppData(ApplicationInfo.uid,v15,v17,v18,v19);\nreturn v3;']

The method getAllValidScorers has the following similar APIs:

- API Name: getActiveScorerPackage()Ljava/lang/String; with Similarity Score: 0.7730317711830139
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = NetworkScorerAppManager.getNetworkRecommendationsEnabledSetting();
String v6 = NetworkScorerAppManager.getNetworkRecommendationsPackage();
NetworkScorerAppData v7 = NetworkScorerAppManager.getScorer(v6);
String v9 = this.mRecommendationService.getPackageName();
return v8;

- API Name: getActiveScorerPackage()Ljava/lang/String; with Similarity Score: 0.7697828412055969
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = NetworkScorerAppManager.getNetworkRecommendationsEnabledSetting();
String v6 = NetworkScorerAppManager.getNetworkRecommendationsPackage();
NetworkScorerAppData v7 = NetworkScorerAppManager.getScorer(v6);
String v9 = this.mRecommendationService.getPackageName();
return v8;

