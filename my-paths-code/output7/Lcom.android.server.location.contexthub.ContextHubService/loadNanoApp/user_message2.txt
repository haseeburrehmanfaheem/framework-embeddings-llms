The method loadNanoApp has the following code snippet:

This is path 1 for the API with depth 2:
public int loadNanoApp(int p1, NanoApp p2){
	if (this.mContextHubWrapper != 0) {
		Integer v3 = Integer.valueOf(p1);
		boolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);
		boolean v2 = v4;
		if (v2 != 0) {
			if (p2 != 0) {
				NanoAppBinary v5 = new NanoAppBinary(v6);
				byte[] v6 = this.mAppBinary;
				ContextHubService$7 v9 = new ContextHubService$7(ContextHubService,p1,v5);
				IContextHubTransactionCallback v8 = v9;
				PackageManager v12 = this.mContext.getPackageManager();
				int v13 = Binder.getCallingUid();
				String v14 = v12.getNameForUid(v13);
				String v11 = v14;
				ContextHubTransactionManager$1 v16 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v17,0,v18,v11,p1,v5,v8);
				int v17 = this.mNextAvailableId.getAndIncrement();
				long v18 = this.mNanoAppId;
				ContextHubServiceTransaction v15 = v16;
				int v21 = this.mTransactionQueue.size();
				if (v21 == 10000) {
					boolean v22 = this.mTransactionQueue.add(v15);
					ContextHubTransactionManager$TransactionRecord v23 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v24);
					String v24 = v15.toString();
					boolean v26 = this.mTransactionRecordDeque.add(v23);
					int v27 = this.mTransactionQueue.size();
					if (v27 != 1) {
						if ( == 0) {
							boolean v29 = this.mTransactionQueue.isEmpty();
							if (v29 != 0) {
								Object v30 = this.mTransactionQueue.peek();
								int v31 = v30.onTransact();
								if (v31 != 0) {
									ContextHubTransactionManager$$ExternalSyntheticLambda0 v32 = new ContextHubTransactionManager$$ExternalSyntheticLambda0(ContextHubTransactionManager,v30);
									long v34 = v30.getTimeout(TimeUnit.SECONDS);
									ScheduledFuture v35 = this.mTimeoutExecutor.schedule(v32, v34, TimeUnit.SECONDS);
									this.mTimeoutFuture = v35;
									if ( == 0) {
										boolean v36 = this.mTransactionQueue.isEmpty();
										if (v36 != 0) {
											return 0;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int loadNanoApp(int p1, NanoApp p2){
	if (this.mContextHubWrapper != 0) {
		Integer v3 = Integer.valueOf(p1);
		boolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);
		boolean v2 = v4;
		if (v2 != 0) {
			if (p2 != 0) {
				NanoAppBinary v5 = new NanoAppBinary(v6);
				byte[] v6 = this.mAppBinary;
				ContextHubService$7 v9 = new ContextHubService$7(ContextHubService,p1,v5);
				IContextHubTransactionCallback v8 = v9;
				PackageManager v12 = this.mContext.getPackageManager();
				int v13 = Binder.getCallingUid();
				String v14 = v12.getNameForUid(v13);
				String v11 = v14;
				ContextHubTransactionManager$1 v16 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v17,0,v18,v11,p1,v5,v8);
				int v17 = this.mNextAvailableId.getAndIncrement();
				long v18 = this.mNanoAppId;
				ContextHubServiceTransaction v15 = v16;
				int v21 = this.mTransactionQueue.size();
				if (v21 == 10000) {
					boolean v22 = this.mTransactionQueue.add(v15);
					ContextHubTransactionManager$TransactionRecord v23 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v24);
					String v24 = v15.toString();
					boolean v26 = this.mTransactionRecordDeque.add(v23);
					int v27 = this.mTransactionQueue.size();
					if (v27 != 1) {
						if ( == 0) {
							boolean v29 = this.mTransactionQueue.isEmpty();
							if (v29 != 0) {
								Object v30 = this.mTransactionQueue.peek();
								int v31 = v30.onTransact();
								if (v31 != 0) {
									int v32 = ContextHubServiceUtil.toTransactionResult(v31);
									v30.onTransactionComplete(v32);
									Object v34 = this.mTransactionQueue.remove();
									if ( == 0) {
										boolean v35 = this.mTransactionQueue.isEmpty();
										if (v35 != 0) {
											return 0;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v3 = Integer.valueOf(p1);\nboolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);\nNanoAppBinary v5 = new NanoAppBinary(v6);\nContextHubService$7 v9 = new ContextHubService$7(ContextHubService,p1,v5);\nContextHubTransactionManager$1 v16 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v17,0,v18,v11,p1,v5,v8);', 'NanoAppBinary v5 = new NanoAppBinary(v6);\nbyte[] v6 = this.mAppBinary;\nContextHubService$7 v9 = new ContextHubService$7(ContextHubService,p1,v5);\nContextHubTransactionManager$1 v16 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v17,0,v18,v11,p1,v5,v8);', 'NanoAppBinary v3 = new NanoAppBinary(v4);\nbyte[] v4 = p2.getAppBinary();\nIContextHubTransactionCallback v6 = p0.createLoadTransactionCallback(p1, v3);\nString v7 = p0.getCallingPackageName();\nContextHubServiceTransaction v8 = this.mTransactionManager.createLoadTransaction(p1, v3, v6, v7);']

The method loadNanoApp has the following similar APIs:

- API Name: createClient(ILandroid/hardware/location/IContextHubClientCallback;Ljava/lang/String;Ljava/lang/String;)Landroid/hardware/location/IContextHubClient; with Similarity Score: 0.8185481429100037
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v3 = Integer.valueOf(p1);
boolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);
ContextHubClientBroker v14 = new ContextHubClientBroker(this.mContext,this.mContextHubProxy,ContextHubClientManager,v6,v8,p2,p3,this.mTransactionManager,p4);
Object v17 = this.mHostEndPointIdToClientMap.put(v16, v14);
return v7;

- API Name: createPendingIntentClient(ILandroid/app/PendingIntent;JLjava/lang/String;)Landroid/hardware/location/IContextHubClient; with Similarity Score: 0.8078688383102417
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v3 = Integer.valueOf(p1);
boolean v4 = this.mContextHubIdToInfoMap.containsKey(v3);
Object v6 = this.mContextHubIdToInfoMap.get(v5);
ContextHubClientBroker v26 = new ContextHubClientBroker(this.mContext, this.mContextHubProxy, ContextHubClientManager, v6, v20, p2, p3, p4, this.mTransactionManager);
Short v28 = Short.valueOf(v20);
Object v29 = this.mHostEndPointIdToClientMap.put(v28, v26);

