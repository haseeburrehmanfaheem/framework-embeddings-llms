The method loadNanoAppOnHub has the following code snippet:

This is path 1 for the API with depth 2:
public void loadNanoAppOnHub(int p1, IContextHubTransactionCallback p2, NanoAppBinary p3){
	if (this.mContextHubWrapper != 0) {
		Integer v4 = Integer.valueOf(p1);
		boolean v5 = this.mContextHubIdToInfoMap.containsKey(v4);
		boolean v3 = v5;
		if (v3 != 0) {
			boolean v2 = 1;
			if (v2 != 0) {
				if (p3 != 0) {
					String v6 = p0.getCallingPackageName();
					ContextHubTransactionManager$1 v8 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v9,0,v10,v6,p1,p3,p2);
					int v9 = this.mNextAvailableId.getAndIncrement();
					long v10 = this.mNanoAppId;
					ContextHubServiceTransaction v7 = v8;
					int v13 = this.mTransactionQueue.size();
					if (v13 == 10000) {
						boolean v14 = this.mTransactionQueue.add(v7);
						ContextHubTransactionManager$TransactionRecord v15 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v16);
						String v16 = v7.toString();
						boolean v18 = this.mTransactionRecordDeque.add(v15);
						int v19 = this.mTransactionQueue.size();
						if (v19 != 1) {
							if ( == 0) {
								boolean v21 = this.mTransactionQueue.isEmpty();
								if (v21 != 0) {
									Object v22 = this.mTransactionQueue.peek();
									int v23 = v22.onTransact();
									if (v23 != 0) {
										ContextHubTransactionManager$$ExternalSyntheticLambda0 v24 = new ContextHubTransactionManager$$ExternalSyntheticLambda0(ContextHubTransactionManager,v22);
										long v26 = v22.getTimeout(TimeUnit.SECONDS);
										ScheduledFuture v27 = this.mTimeoutExecutor.schedule(v24, v26, TimeUnit.SECONDS);
										this.mTimeoutFuture = v27;
										if ( == 0) {
											boolean v28 = this.mTransactionQueue.isEmpty();
											if (v28 != 0) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void loadNanoAppOnHub(int p1, IContextHubTransactionCallback p2, NanoAppBinary p3){
	if (this.mContextHubWrapper != 0) {
		Integer v4 = Integer.valueOf(p1);
		boolean v5 = this.mContextHubIdToInfoMap.containsKey(v4);
		boolean v3 = v5;
		if (v3 != 0) {
			boolean v2 = 1;
			if (v2 != 0) {
				if (p3 != 0) {
					String v6 = p0.getCallingPackageName();
					ContextHubTransactionManager$1 v8 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v9,0,v10,v6,p1,p3,p2);
					int v9 = this.mNextAvailableId.getAndIncrement();
					long v10 = this.mNanoAppId;
					ContextHubServiceTransaction v7 = v8;
					int v13 = this.mTransactionQueue.size();
					if (v13 == 10000) {
						boolean v14 = this.mTransactionQueue.add(v7);
						ContextHubTransactionManager$TransactionRecord v15 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v16);
						String v16 = v7.toString();
						boolean v18 = this.mTransactionRecordDeque.add(v15);
						int v19 = this.mTransactionQueue.size();
						if (v19 != 1) {
							if ( == 0) {
								boolean v21 = this.mTransactionQueue.isEmpty();
								if (v21 != 0) {
									Object v22 = this.mTransactionQueue.peek();
									int v23 = v22.onTransact();
									if (v23 != 0) {
										int v24 = ContextHubServiceUtil.toTransactionResult(v23);
										v22.onTransactionComplete(v24);
										Object v26 = this.mTransactionQueue.remove();
										if ( == 0) {
											boolean v27 = this.mTransactionQueue.isEmpty();
											if (v27 != 0) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void loadNanoAppOnHub(int p1, IContextHubTransactionCallback p2, NanoAppBinary p3){
	if (this.mContextHubWrapper != 0) {
		Integer v4 = Integer.valueOf(p1);
		boolean v5 = this.mContextHubIdToInfoMap.containsKey(v4);
		boolean v3 = v5;
		if (v3 != 0) {
			boolean v2 = 1;
			if (v2 != 0) {
				return;
			}
		}
	}
}

and the following sink code:
['String v6 = p0.getCallingPackageName();\nContextHubTransactionManager$1 v8 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v9,0,v10,v6,p1,p3,p2);', 'int v10 = this.mNextAvailableId.getAndIncrement();\nlong v11 = p3.getNanoAppId();\nContextHubServiceTransaction v8 = v9;', 'String v3 = p0.getCallingPackageName();\nContextHubServiceTransaction v4 = this.mTransactionManager.createLoadTransaction(p1, p3, p2, v3);\nthis.mTransactionManager.addTransaction(v4);']

The method loadNanoAppOnHub has the following similar APIs:

- API Name: enableNanoApp(ILandroid/hardware/location/IContextHubTransactionCallback;J)V with Similarity Score: 0.9016346335411072
  - Access Control Level: SYS_OR_SIG and the following code:
String v3 = p0.getCallingPackageName();
ContextHubServiceTransaction v4 = this.mTransactionManager.createEnableTransaction(p1, p3, p2, v3);
this.mTransactionManager.addTransaction(v4);

- API Name: unloadNanoAppFromHub(ILandroid/hardware/location/IContextHubTransactionCallback;J)V with Similarity Score: 0.892737865447998
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v2 = p0.checkHalProxyAndContextHubId(p1, p2, 1);
String v3 = p0.getCallingPackageName();
ContextHubServiceTransaction v4 = this.mTransactionManager.createUnloadTransaction(p1, p3, p2, v3);
this.mTransactionManager.addTransaction(v4);

