This is path 1 for the API with depth 2:
public void deselectRouteWithRouter2(IMediaRouter2 p1, String p2, MediaRoute2Info p3){
	Object v2 = Objects.requireNonNull(p1, "router must not be null");
	Object v3 = Objects.requireNonNull(p3, "route must not be null");
	boolean v4 = TextUtils.isEmpty(p2);
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		IBinder v7 = p1.asBinder();
		Object v8 = this.mAllRouterRecords.get(v7);
		if (v8 != 0) {
			Binder.restoreCallingIdentity(v5);
			return;
		}
	}
}


This is path 2 for the API with depth 1:
public void deselectRouteWithRouter2(IMediaRouter2 p1, String p2, MediaRoute2Info p3){
	Object v2 = Objects.requireNonNull(p1, "router must not be null");
	Object v3 = Objects.requireNonNull(p3, "route must not be null");
	boolean v4 = TextUtils.isEmpty(p2);
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		MediaRouter2ServiceImpl.deselectRouteWithRouter2Locked(p1, p2, p3);
		Binder.restoreCallingIdentity(v5);
		return;
	}
}


This is path 3 for the API with depth 0:
public void deselectRouteWithRouter2(IMediaRouter2 p1, String p2, MediaRoute2Info p3){
	this.mService2.deselectRouteWithRouter2(p1, p2, p3);
	return;
}
