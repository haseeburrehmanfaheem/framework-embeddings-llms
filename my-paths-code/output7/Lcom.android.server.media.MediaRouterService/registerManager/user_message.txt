This is path 1 for the API with depth 2:
public void registerManager(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	if (p2 == 0) {
		PackageManager v3 = this.mContext.getPackageManager();
		String v4 = v3.getPackagesForUid(v1);
		if (v4 == 0) {
			if ( >= v4.length) {
				boolean v5 = v4[].equals(p2);
				if (v5 == 0) {
					if ( >= v4.length) {
						boolean v6 = v4[].equals(p2);
						if (v6 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								Object v8 = Objects.requireNonNull(p1, "manager must not be null");
								boolean v9 = TextUtils.isEmpty(p2);
								if (v9 != 0) {
									int v10 = Binder.getCallingUid();
									int v11 = Binder.getCallingPid();
									UserHandle v12 = UserHandle.getUserHandleForUid(v10);
									int v13 = v12.getIdentifier();
									long v14 = Binder.clearCallingIdentity();
									MediaRouter2ServiceImpl$UserRecord v19 = MediaRouter2ServiceImpl.getOrCreateUserRecordLocked(v13);
									MediaRouter2ServiceImpl$ManagerRecord v20 = new MediaRouter2ServiceImpl$ManagerRecord(MediaRouter2ServiceImpl,v19,p1,v10,v11,p2);
									v16.linkToDeath(v20, 0);
									boolean v23 = MediaRouter2ServiceImpl$UserRecord.mManagerRecords.add(v20);
									Object v24 = this.mAllManagerRecords.put(v16, v20);
									Iterator v25 = MediaRouter2ServiceImpl$UserRecord.mRouterRecords.iterator();
									boolean v26 = v25.hasNext();
									if (v26 == 0) {
										Object v27 = v25.next();
										MediaRouter2ServiceImpl$$ExternalSyntheticLambda13 v28 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda13();
										Message v30 = PooledLambda.obtainMessage(v28, MediaRouter2ServiceImpl$UserRecord.mHandler, v27, p1);
										boolean v31 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v30);
										boolean v32 = v25.hasNext();
										if (v32 == 0) {
											MediaRouter2ServiceImpl$$ExternalSyntheticLambda14 v33 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda14();
											Message v35 = PooledLambda.obtainMessage(v33, MediaRouter2ServiceImpl$UserRecord.mHandler, p1);
											boolean v36 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v35);
											Binder.restoreCallingIdentity(v14);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void registerManager(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	if (p2 == 0) {
		PackageManager v3 = this.mContext.getPackageManager();
		String v4 = v3.getPackagesForUid(v1);
		if (v4 == 0) {
			if ( >= v4.length) {
				boolean v5 = v4[].equals(p2);
				if (v5 == 0) {
					if ( >= v4.length) {
						boolean v6 = v4[].equals(p2);
						if (v6 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								Object v8 = Objects.requireNonNull(p1, "manager must not be null");
								boolean v9 = TextUtils.isEmpty(p2);
								if (v9 != 0) {
									int v10 = Binder.getCallingUid();
									int v11 = Binder.getCallingPid();
									UserHandle v12 = UserHandle.getUserHandleForUid(v10);
									int v13 = v12.getIdentifier();
									long v14 = Binder.clearCallingIdentity();
									MediaRouter2ServiceImpl.registerManagerLocked(p1, v10, v11, p2, v13);
									Binder.restoreCallingIdentity(v14);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void registerManager(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = p0.validatePackageName(v1, p2);
	if (v2 == 0) {
		this.mService2.registerManager(p1, p2);
		return;
	}
}
