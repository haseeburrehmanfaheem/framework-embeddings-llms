The method registerManager has the following code snippet:

This is path 1 for the API with depth 2:
public void registerManager(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	if (p2 == 0) {
		PackageManager v3 = this.mContext.getPackageManager();
		String v4 = v3.getPackagesForUid(v1);
		if (v4 == 0) {
			if ( >= v4.length) {
				boolean v5 = v4[].equals(p2);
				if (v5 == 0) {
					if ( >= v4.length) {
						boolean v6 = v4[].equals(p2);
						if (v6 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								Object v8 = Objects.requireNonNull(p1, "manager must not be null");
								boolean v9 = TextUtils.isEmpty(p2);
								if (v9 != 0) {
									int v10 = Binder.getCallingUid();
									int v11 = Binder.getCallingPid();
									UserHandle v12 = UserHandle.getUserHandleForUid(v10);
									int v13 = v12.getIdentifier();
									long v14 = Binder.clearCallingIdentity();
									MediaRouter2ServiceImpl$UserRecord v19 = MediaRouter2ServiceImpl.getOrCreateUserRecordLocked(v13);
									MediaRouter2ServiceImpl$ManagerRecord v20 = new MediaRouter2ServiceImpl$ManagerRecord(MediaRouter2ServiceImpl,v19,p1,v10,v11,p2);
									v16.linkToDeath(v20, 0);
									boolean v23 = MediaRouter2ServiceImpl$UserRecord.mManagerRecords.add(v20);
									Object v24 = this.mAllManagerRecords.put(v16, v20);
									Iterator v25 = MediaRouter2ServiceImpl$UserRecord.mRouterRecords.iterator();
									boolean v26 = v25.hasNext();
									if (v26 == 0) {
										Object v27 = v25.next();
										MediaRouter2ServiceImpl$$ExternalSyntheticLambda13 v28 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda13();
										Message v30 = PooledLambda.obtainMessage(v28, MediaRouter2ServiceImpl$UserRecord.mHandler, v27, p1);
										boolean v31 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v30);
										boolean v32 = v25.hasNext();
										if (v32 == 0) {
											MediaRouter2ServiceImpl$$ExternalSyntheticLambda14 v33 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda14();
											Message v35 = PooledLambda.obtainMessage(v33, MediaRouter2ServiceImpl$UserRecord.mHandler, p1);
											boolean v36 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v35);
											Binder.restoreCallingIdentity(v14);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void registerManager(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	if (p2 == 0) {
		PackageManager v3 = this.mContext.getPackageManager();
		String v4 = v3.getPackagesForUid(v1);
		if (v4 == 0) {
			if ( >= v4.length) {
				boolean v5 = v4[].equals(p2);
				if (v5 == 0) {
					if ( >= v4.length) {
						boolean v2 = 0;
						if (v2 == 0) {
							Object v7 = Objects.requireNonNull(p1, "manager must not be null");
							boolean v8 = TextUtils.isEmpty(p2);
							if (v8 != 0) {
								int v9 = Binder.getCallingUid();
								int v10 = Binder.getCallingPid();
								UserHandle v11 = UserHandle.getUserHandleForUid(v9);
								int v12 = v11.getIdentifier();
								long v13 = Binder.clearCallingIdentity();
								MediaRouter2ServiceImpl$UserRecord v18 = MediaRouter2ServiceImpl.getOrCreateUserRecordLocked(v12);
								MediaRouter2ServiceImpl$ManagerRecord v19 = new MediaRouter2ServiceImpl$ManagerRecord(MediaRouter2ServiceImpl,v18,p1,v9,v10,p2);
								v15.linkToDeath(v19, 0);
								boolean v22 = MediaRouter2ServiceImpl$UserRecord.mManagerRecords.add(v19);
								Object v23 = this.mAllManagerRecords.put(v15, v19);
								Iterator v24 = MediaRouter2ServiceImpl$UserRecord.mRouterRecords.iterator();
								boolean v25 = v24.hasNext();
								if (v25 == 0) {
									Object v26 = v24.next();
									MediaRouter2ServiceImpl$$ExternalSyntheticLambda13 v27 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda13();
									Message v29 = PooledLambda.obtainMessage(v27, MediaRouter2ServiceImpl$UserRecord.mHandler, v26, p1);
									boolean v30 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v29);
									boolean v31 = v24.hasNext();
									if (v31 == 0) {
										MediaRouter2ServiceImpl$$ExternalSyntheticLambda14 v32 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda14();
										Message v34 = PooledLambda.obtainMessage(v32, MediaRouter2ServiceImpl$UserRecord.mHandler, p1);
										boolean v35 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v34);
										Binder.restoreCallingIdentity(v13);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void registerManager(IMediaRouter2Manager p1, String p2){
	int v1 = Binder.getCallingUid();
	if (p2 == 0) {
		PackageManager v3 = this.mContext.getPackageManager();
		String v4 = v3.getPackagesForUid(v1);
		if (v4 == 0) {
			if ( >= v4.length) {
				boolean v5 = v4[].equals(p2);
				if (v5 == 0) {
					if ( >= v4.length) {
						boolean v6 = v4[].equals(p2);
						if (v6 == 0) {
							boolean v2 = 1;
							if (v2 == 0) {
								Object v8 = Objects.requireNonNull(p1, "manager must not be null");
								boolean v9 = TextUtils.isEmpty(p2);
								if (v9 != 0) {
									int v10 = Binder.getCallingUid();
									int v11 = Binder.getCallingPid();
									UserHandle v12 = UserHandle.getUserHandleForUid(v10);
									int v13 = v12.getIdentifier();
									long v14 = Binder.clearCallingIdentity();
									IBinder v16 = p1.asBinder();
									Object v17 = this.mAllManagerRecords.get(v16);
									if (v17 == 0) {
										Binder.restoreCallingIdentity(v14);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v10 = Binder.getCallingUid();\nint v11 = Binder.getCallingPid();\nUserHandle v12 = UserHandle.getUserHandleForUid(v10);\nMediaRouter2ServiceImpl$ManagerRecord v20 = new MediaRouter2ServiceImpl$ManagerRecord(MediaRouter2ServiceImpl, v19, p1, v10, v11, p2);', 'int v10 = Binder.getCallingUid();\nMediaRouter2ServiceImpl.registerManagerLocked(p1, v10, v11, p2, v13);', 'boolean v2 = p0.validatePackageName(v1, p2);\nthis.mService2.registerManager(p1, p2);']

The method registerManager has the following similar APIs:

- API Name: registerRouter2(Landroid/media/IMediaRouter2;Ljava/lang/String;)V with Similarity Score: 0.9089766144752502
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = Binder.getCallingUid();
PackageManager v3 = this.mContext.getPackageManager();
String v4 = v3.getPackagesForUid(v1);
MediaRouter2ServiceImpl$RouterRecord v21 = new MediaRouter2ServiceImpl$RouterRecord(MediaRouter2ServiceImpl,v20,p1,v10,v11,p2,,);

- API Name: dispatchAdjustVolume(Ljava/lang/String;Ljava/lang/String;III)V with Similarity Score: 0.8623754382133484
  - Access Control Level: NONE and the following code:
int v1 = Binder.getCallingPid();
int v2 = Binder.getCallingUid();
long v3 = Binder.clearCallingIdentity();
MediaSessionService$SessionManagerImpl$3 v27 = new MediaSessionService$SessionManagerImpl$3(MediaSessionService$SessionManagerImpl,0,p2,v2,v1,p3,p4,p5,p1);
boolean v29 = v26.post(v27);

