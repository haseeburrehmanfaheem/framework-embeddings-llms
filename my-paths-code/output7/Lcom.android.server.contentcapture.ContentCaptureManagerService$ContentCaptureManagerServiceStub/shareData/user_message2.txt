The method shareData has the following code snippet:

This is path 1 for the API with depth 2:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = this.mPackageName;
	Context v10 = this.mContext;
	PackageManager v11 = v10.getPackageManager();
	int v12 = this.mOwnerUid;
	String v13 = v11.getPackagesForUid(v12);
	if (v13 == 0) {
		if ( >= v13.length) {
			boolean v14 = v3.equals(v13[]);
			if (v14 == 0) {
				if ( >= v13.length) {
					boolean v15 = v3.equals(v13[]);
					if (v15 == 0) {
						int v16 = UserHandle.getCallingUserId();
						Object v17 = ContentCaptureManagerService.access$800(this.this$0);
						AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$900(this.this$0, v16);
						Set v19 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
						int v20 = v19.size();
						if (v20 >= 10) {
							Set v21 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
							String v22 = p1.getPackageName();
							boolean v23 = v21.contains(v22);
							if (v23 == 0) {
								ContentCaptureManagerService$DataShareCallbackDelegate v24 = new ContentCaptureManagerService$DataShareCallbackDelegate(p1,p2,this.this$0);
								boolean v27 = ContentCapturePerUserService.isEnabledLocked();
								if (v27 != 0) {
									String v28 = this.mPackageName;
									if ( != 0) {
										RemoteContentCaptureService$$ExternalSyntheticLambda4 v42 = new RemoteContentCaptureService$$ExternalSyntheticLambda4(p1,p2);
										RemoteContentCaptureService.scheduleAsyncRequest(v42);
										ContentCaptureMetricsLogger.writeServiceEvent(6, AbstractMultiplePendingRequestsRemoteService.mComponentName);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = this.mPackageName;
	Object v11 = Objects.requireNonNull(p1);
	int v12 = Binder.getCallingUid();
	Context v13 = AbstractMasterSystemService.getContext();
	PackageManager v14 = v13.getPackageManager();
	String v15 = v14.getPackagesForUid(v12);
	if (v15 == 0) {
		if ( >= v15.length) {
			boolean v16 = p1.equals(v15[]);
			if (v16 == 0) {
				if ( >= v15.length) {
					boolean v17 = p1.equals(v15[]);
					if (v17 == 0) {
						int v18 = UserHandle.getCallingUserId();
						Object v19 = ContentCaptureManagerService.access$800(this.this$0);
						AbstractPerUserSystemService v20 = ContentCaptureManagerService.access$900(this.this$0, v18);
						Set v21 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
						int v22 = v21.size();
						if (v22 >= 10) {
							Set v23 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
							String v24 = p1.getPackageName();
							boolean v25 = v23.contains(v24);
							if (v25 == 0) {
								ContentCaptureManagerService$DataShareCallbackDelegate v26 = new ContentCaptureManagerService$DataShareCallbackDelegate(p1,p2,this.this$0);
								boolean v29 = ContentCapturePerUserService.isEnabledLocked();
								if (v29 != 0) {
									String v30 = this.mPackageName;
									if ( != 0) {
										RemoteContentCaptureService$$ExternalSyntheticLambda4 v44 = new RemoteContentCaptureService$$ExternalSyntheticLambda4(p1,p2);
										RemoteContentCaptureService.scheduleAsyncRequest(v44);
										ContentCaptureMetricsLogger.writeServiceEvent(6, AbstractMultiplePendingRequestsRemoteService.mComponentName);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = this.mPackageName;
	Context v10 = this.mContext;
	PackageManager v11 = v10.getPackageManager();
	int v12 = this.mOwnerUid;
	String v13 = v11.getPackagesForUid(v12);
	if (v13 == 0) {
		if ( >= v13.length) {
			boolean v14 = v3.equals(v13[]);
			if (v14 == 0) {
				if ( >= v13.length) {
					boolean v15 = v3.equals(v13[]);
					if (v15 == 0) {
						int v16 = UserHandle.getCallingUserId();
						Object v17 = ContentCaptureManagerService.access$800(this.this$0);
						AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$900(this.this$0, v16);
						Set v19 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
						int v20 = v19.size();
						if (v20 >= 10) {
							Set v21 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
							String v22 = p1.getPackageName();
							boolean v23 = v21.contains(v22);
							if (v23 == 0) {
								ServiceNameResolver v24 = ContentCaptureManagerService.access$1000(this.this$0);
								String v25 = v24.getServiceName(v16);
								StatsEvent$Builder v28 = StatsEvent.newBuilder();
								StatsEvent$Builder v29 = v28.setAtomId(207);
								StatsEvent$Builder v30 = v28.writeInt(p1);
								if (80 != 207) {
									StatsEvent$Builder v31 = v28.addBooleanAnnotation(1, 1);
									StatsEvent$Builder v32 = v28.writeString(p2);
									StatsEvent$Builder v33 = v28.writeString(0);
									StatsEvent$Builder v34 = v28.writeInt(0);
									StatsEvent$Builder v35 = v28.writeInt(0);
									StatsEvent$Builder v36 = v28.usePooledBuffer();
									StatsEvent v37 = v28.build();
									StatsLog.write(v37);
									p2.error(2);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p1);\nObject v2 = Objects.requireNonNull(p2);\nContentCaptureManagerService$DataShareCallbackDelegate v24 = new ContentCaptureManagerService$DataShareCallbackDelegate(p1,p2,this.this$0);', 'RemoteContentCaptureService$$ExternalSyntheticLambda4 v42 = new RemoteContentCaptureService$$ExternalSyntheticLambda4(p1,p2);\nRemoteContentCaptureService.scheduleAsyncRequest(v42);', 'Set v19 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);\nint v20 = v19.size();\nif (v20 >= 10) {\nSet v21 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);\nString v22 = p1.getPackageName();\nboolean v23 = v21.contains(v22);', 'Object v6 = ContentCaptureManagerService.access$800(this.this$0);\nAbstractPerUserSystemService v7 = ContentCaptureManagerService.access$900(this.this$0, v5);\nSet v8 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);']

The method shareData has the following similar APIs:

- API Name: removeData(Landroid/view/contentcapture/DataRemovalRequest;)V with Similarity Score: 0.9307658672332764
  - Access Control Level: NONE and the following code:
Object v1 = Objects.requireNonNull(p1);
RemoteContentCaptureService$$ExternalSyntheticLambda2 v34 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);
RemoteContentCaptureService.scheduleAsyncRequest(v34);

- API Name: getContentCaptureConditions(Ljava/lang/String;Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.814939558506012
  - Access Control Level: NONE and the following code:
ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda0 v1 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda0(p0,p1);
int v16 = UserHandle.getCallingUserId();
AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$1500(this.this$0, v16);
ArraySet v19 = v18.getContentCaptureConditionsLocked(p1);
ArrayList v20 = ContentCaptureHelper.toList(v19);
Bundle v21 = SyncResultReceiver.bundleFor();
p2.send(0, v21);

