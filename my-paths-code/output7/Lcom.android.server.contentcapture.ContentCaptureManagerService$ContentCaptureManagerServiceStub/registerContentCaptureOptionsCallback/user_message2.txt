The method registerContentCaptureOptionsCallback has the following code snippet:

This is path 1 for the API with depth 2:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	Context v7 = this.mContext;
	PackageManager v8 = v7.getPackageManager();
	int v9 = this.mOwnerUid;
	String v10 = v8.getPackagesForUid(v9);
	if (v10 == 0) {
		if ( >= v10.length) {
			boolean v11 = p1.equals(v10[]);
			if (v11 == 0) {
				if ( >= v10.length) {
					boolean v12 = p1.equals(v10[]);
					if (v12 == 0) {
						RemoteCallbackList v13 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);
						boolean v14 = v13.register(p2, p1);
						int v15 = UserHandle.getCallingUserId();
						if (this.mWhitelisterHelpers != 0) {
							Object v18 = this.mWhitelisterHelpers.get(p1);
							if (v18 != 0) {
								boolean v19 = v18.isWhitelisted(p2);
								boolean v17 = ;
								if (v17 != 0) {
									if (this.mWhitelisterHelpers != 0) {
										Object v21 = this.mWhitelisterHelpers.get(p1);
										if (v21 != 0) {
											ArraySet v22 = v21.getWhitelistedComponents(p2);
											ArraySet v20 = ;
											if (v20 != 0) {
												Object v23 = this.mServicePackages.get(v15);
												boolean v24 = p1.equals(v23);
												if (v24 == 0) {
													if (Build.IS_USER == 0) {
														ServiceNameResolver v25 = AbstractMasterSystemService.mServiceNameResolver;
														boolean v26 = v25.isTemporary(v15);
														if (v26 == 0) {
															Object v27 = this.mServicePackages.get(v15);
															boolean v28 = p1.equals(v27);
															if (v28 != 0) {
																if (v17 != 0) {
																	if ( != 0) {
																		ContentCaptureOptions v29 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,);
																		if (AbstractMasterSystemService.verbose == 0) {
																			String v31 = this.TAG;
																			ContentCaptureOptions v16 = v29;
																			if (v16 == 0) {
																				p2.setContentCaptureOptions(v16);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	Object v8 = Objects.requireNonNull(p1);
	int v9 = Binder.getCallingUid();
	Context v10 = AbstractMasterSystemService.getContext();
	PackageManager v11 = v10.getPackageManager();
	String v12 = v11.getPackagesForUid(v9);
	if (v12 == 0) {
		if ( >= v12.length) {
			boolean v13 = p1.equals(v12[]);
			if (v13 == 0) {
				if ( >= v12.length) {
					boolean v14 = p1.equals(v12[]);
					if (v14 == 0) {
						RemoteCallbackList v15 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);
						boolean v16 = v15.register(p2, p1);
						int v17 = UserHandle.getCallingUserId();
						if (this.mWhitelisterHelpers != 0) {
							Object v20 = this.mWhitelisterHelpers.get(p1);
							if (v20 != 0) {
								boolean v21 = v20.isWhitelisted(p2);
								boolean v19 = ;
								if (v19 != 0) {
									if (this.mWhitelisterHelpers != 0) {
										Object v23 = this.mWhitelisterHelpers.get(p1);
										if (v23 != 0) {
											ArraySet v24 = v23.getWhitelistedComponents(p2);
											ArraySet v22 = ;
											if (v22 != 0) {
												Object v25 = this.mServicePackages.get(v17);
												boolean v26 = p1.equals(v25);
												if (v26 == 0) {
													if (Build.IS_USER == 0) {
														ServiceNameResolver v27 = AbstractMasterSystemService.mServiceNameResolver;
														boolean v28 = v27.isTemporary(v17);
														if (v28 == 0) {
															Object v29 = this.mServicePackages.get(v17);
															boolean v30 = p1.equals(v29);
															if (v30 != 0) {
																if (v19 != 0) {
																	if ( != 0) {
																		ContentCaptureOptions v31 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,);
																		if (AbstractMasterSystemService.verbose == 0) {
																			String v33 = this.TAG;
																			ContentCaptureOptions v18 = v31;
																			if (v18 == 0) {
																				p2.setContentCaptureOptions(v18);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	Context v7 = this.mContext;
	PackageManager v8 = v7.getPackageManager();
	int v9 = this.mOwnerUid;
	String v10 = v8.getPackagesForUid(v9);
	if (v10 == 0) {
		if ( >= v10.length) {
			boolean v11 = p1.equals(v10[]);
			if (v11 == 0) {
				if ( >= v10.length) {
					boolean v12 = p1.equals(v10[]);
					if (v12 == 0) {
						RemoteCallbackList v13 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);
						boolean v14 = v13.register(p2, p1);
						int v15 = UserHandle.getCallingUserId();
						if (this.mWhitelisterHelpers != 0) {
							Object v18 = this.mWhitelisterHelpers.get(p1);
							if (v18 != 0) {
								boolean v19 = v18.isWhitelisted(p2);
								boolean v17 = ;
								if (v17 != 0) {
									if (this.mWhitelisterHelpers != 0) {
										Object v21 = this.mWhitelisterHelpers.get(p1);
										if (v21 != 0) {
											ArraySet v22 = v21.getWhitelistedComponents(p2);
											ArraySet v20 = ;
											if (v20 != 0) {
												Object v23 = this.mServicePackages.get(v15);
												boolean v24 = p1.equals(v23);
												if (v24 == 0) {
													if (Build.IS_USER == 0) {
														ServiceNameResolver v25 = AbstractMasterSystemService.mServiceNameResolver;
														boolean v26 = v25.isTemporary(v15);
														if (v26 == 0) {
															Object v27 = this.mServicePackages.get(v15);
															boolean v28 = p1.equals(v27);
															if (v28 != 0) {
																if (v17 != 0) {
																	if ( != 0) {
																		ContentCaptureOptions v29 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,);
																		if (AbstractMasterSystemService.verbose == 0) {
																			String v31 = this.TAG;
																			ContentCaptureOptions v16 = v29;
																			if (v16 == 0) {
																				p2.setContentCaptureOptions(v16);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['RemoteCallbackList v13 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);\nboolean v14 = v13.register(p2, p1);\nContentCaptureOptions v29 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,);\np2.setContentCaptureOptions(v16);', 'RemoteCallbackList v2 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);\nboolean v3 = v2.register(p2, p1);\nContentCaptureOptions v5 = ContentCaptureManagerService.mGlobalContentCaptureOptions.getOptions(v4, p1);\np2.setContentCaptureOptions(v5);']

The method registerContentCaptureOptionsCallback has the following similar APIs:

- API Name: unregisterCallback(Landroid/media/tv/interactive/ITvInteractiveAppManagerCallback;I)V with Similarity Score: 0.8278621435165405
  - Access Control Level: NONE and the following code:
RemoteCallbackList v14 = TvInteractiveAppManagerService$UserState.-$$Nest$fgetmCallbacks(v8);
RemoteCallbackList v9 = this.mCallbacks;
RemoteCallbackList v7 = TvInteractiveAppManagerService$UserState.-$$Nest$fgetmCallbacks(v6);

- API Name: registerCallback(Landroid/media/tv/ITvInputManagerCallback;I)V with Similarity Score: 0.827479898929596
  - Access Control Level: NONE and the following code:
RemoteCallbackList v14 = TvInputManagerService$UserState.-$$Nest$fgetmCallbacks(v8);
boolean v15 = v14.register(p1);
Map v16 = TvInputManagerService$UserState.-$$Nest$fgetcallbackPidUidMap(v8);
Object v20 = v16.put(p1, v19);

