This is path 1 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	if (this.mAm != 0) {
		Object v8 = LocalServices.getService(ActivityManagerInterna.class);
		this.mAm = v8;
		ActivityManagerInternal v7 = this.mAm;
		ActivityManagerInternal v6 = v7;
		ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);
		Object v10 = ContentCaptureManagerService.access$000(this.this$0);
		AbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);
		String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v14 != 0) {
			String v15 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
			boolean v16 = v14.equals(v15);
			boolean v13 = v16;
			boolean v12 = v13;
			if (v12 != 0) {
				int v19 = UserHandle.getCallingUserId();
				int v20 = Binder.getCallingUid();
				String v21 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(v19);
				if (v21 != 0) {
					ComponentName v22 = ComponentName.unflattenFromString(v21);
					if (v22 != 0) {
						String v23 = v22.getPackageName();
						Context v24 = ContentCaptureManagerService.getContext();
						PackageManager v25 = v24.getPackageManager();
						int v26 = UserHandle.getCallingUserId();
						int v27 = v25.getPackageUidAsUser(v23, v26);
						boolean v18 = 0;
						boolean v17 = v18;
						if (v17 != 0) {
							int v35 = Binder.getCallingUid();
							if (v9 != 0) {
								if (this.mWhitelisterHelpers != 0) {
									Object v38 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
									if (v38 != 0) {
										boolean v39 = v38.isWhitelisted(ActivityPresentationInfo.componentName);
										boolean v37 = ;
										if (v37 != 0) {
											String v40 = ActivityPresentationInfo.componentName.getPackageName();
											if (this.mWhitelisterHelpers != 0) {
												Object v42 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
												if (v42 != 0) {
													boolean v43 = v42.isWhitelisted(v40);
													boolean v41 = ;
													if (v41 == 0) {
														if (this.mServiceInfo != 0) {
															ComponentName v45 = this.mServiceInfo.getComponentName();
															ComponentName v44 = ;
															boolean v46 = ContentCapturePerUserService.isEnabledLocked();
															if (ContentCaptureManagerService.mRequestsHistory == 0) {
																if (v46 != 0) {
																	if (v44 != 0) {
																		if ( != 0) {
																			if (AbstractMasterSystemService.debug == 0) {
																				if (0 == 0) {
																					Bundle v55 = new Bundle();
																					v55.putBinder("binder", 0);
																					p7.send(516, );
																					String v66 = ComponentName.flattenToShortString(v44);
																					FrameworkStatsLog.write(208, p4, 3, 516, v66, 0, 0);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	ActivityManagerInternal v7 = this.this$0.getAmInternal();
	ActivityManagerInternal v6 = v7;
	ActivityPresentationInfo v8 = v6.getActivityPresentationInfo(p1);
	Object v9 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v11 = this.this$0.getServiceForUserLocked(v5);
	AbstractPerUserSystemService v10 = v11;
	boolean v13 = this.this$0.isDefaultServiceLocked(v5);
	boolean v12 = v13;
	if (v12 != 0) {
		boolean v15 = this.this$0.isCalledByServiceLocked("startSession()");
		boolean v14 = v15;
		if (v14 != 0) {
			int v16 = Binder.getCallingUid();
			if (v8 != 0) {
				boolean v18 = ContentCaptureManagerService.mGlobalContentCaptureOptions.isWhitelisted(AbstractPerUserSystemService.mUserId, ActivityPresentationInfo.componentName);
				if (v18 != 0) {
					String v19 = ActivityPresentationInfo.componentName.getPackageName();
					boolean v20 = ContentCaptureManagerService.mGlobalContentCaptureOptions.isWhitelisted(AbstractPerUserSystemService.mUserId, v19);
					if (v20 == 0) {
						ComponentName v21 = ContentCapturePerUserService.getServiceComponentName();
						boolean v22 = ContentCapturePerUserService.isEnabledLocked();
						if (ContentCaptureManagerService.mRequestsHistory == 0) {
							if (v22 != 0) {
								if (v21 != 0) {
									if ( != 0) {
										if (AbstractMasterSystemService.debug == 0) {
											ContentCaptureService.setClientState(p6, 516, 0);
											ContentCaptureMetricsLogger.writeSessionEvent(p4, 3, 516, v21, 0);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	ActivityManagerInternal v6 = ContentCaptureManagerService.-$$Nest$mgetAmInternal(this.this$0);
	ActivityPresentationInfo v7 = v6.getActivityPresentationInfo(p1);
	Object v8 = ContentCaptureManagerService.access$000(this.this$0);
	AbstractPerUserSystemService v9 = ContentCaptureManagerService.access$100(this.this$0, v5);
	boolean v10 = ContentCaptureManagerService.-$$Nest$misDefaultServiceLocked(this.this$0, v5);
	if (v10 != 0) {
		boolean v11 = ContentCaptureManagerService.-$$Nest$misCalledByServiceLocked(this.this$0, "startSession()");
		if (v11 != 0) {
			int v12 = Binder.getCallingUid();
			v9.startSessionLocked(p1, p2, v7, p4, v12, p5, p6);
			return;
		}
	}
}
