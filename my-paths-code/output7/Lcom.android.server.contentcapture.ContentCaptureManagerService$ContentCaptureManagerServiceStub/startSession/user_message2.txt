The method startSession has the following code snippet:

This is path 1 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	if (this.mAm != 0) {
		Object v8 = LocalServices.getService(ActivityManagerInterna.class);
		this.mAm = v8;
		ActivityManagerInternal v7 = this.mAm;
		ActivityManagerInternal v6 = v7;
		ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);
		Object v10 = ContentCaptureManagerService.access$000(this.this$0);
		AbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);
		String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v14 != 0) {
			String v15 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
			boolean v16 = v14.equals(v15);
			boolean v13 = v16;
			boolean v12 = v13;
			if (v12 != 0) {
				int v19 = UserHandle.getCallingUserId();
				int v20 = Binder.getCallingUid();
				String v21 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(v19);
				if (v21 != 0) {
					ComponentName v22 = ComponentName.unflattenFromString(v21);
					if (v22 != 0) {
						String v23 = v22.getPackageName();
						Context v24 = ContentCaptureManagerService.getContext();
						PackageManager v25 = v24.getPackageManager();
						int v26 = UserHandle.getCallingUserId();
						int v27 = v25.getPackageUidAsUser(v23, v26);
						boolean v18 = 0;
						boolean v17 = v18;
						if (v17 != 0) {
							int v35 = Binder.getCallingUid();
							if (v9 != 0) {
								if (this.mWhitelisterHelpers != 0) {
									Object v38 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
									if (v38 != 0) {
										boolean v39 = v38.isWhitelisted(ActivityPresentationInfo.componentName);
										boolean v37 = ;
										if (v37 != 0) {
											String v40 = ActivityPresentationInfo.componentName.getPackageName();
											if (this.mWhitelisterHelpers != 0) {
												Object v42 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
												if (v42 != 0) {
													boolean v43 = v42.isWhitelisted(v40);
													boolean v41 = ;
													if (v41 == 0) {
														if (this.mServiceInfo != 0) {
															ComponentName v45 = this.mServiceInfo.getComponentName();
															ComponentName v44 = ;
															boolean v46 = ContentCapturePerUserService.isEnabledLocked();
															if (ContentCaptureManagerService.mRequestsHistory == 0) {
																if (v46 != 0) {
																	if (v44 != 0) {
																		if ( != 0) {
																			if (AbstractMasterSystemService.debug == 0) {
																				if (0 == 0) {
																					Bundle v55 = new Bundle();
																					v55.putBinder("binder", 0);
																					p7.send(516, );
																					String v66 = ComponentName.flattenToShortString(v44);
																					FrameworkStatsLog.write(208, p4, 3, 516, v66, 0, 0);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	if (this.mAm != 0) {
		Object v8 = LocalServices.getService(ActivityManagerInterna.class);
		this.mAm = v8;
		ActivityManagerInternal v7 = this.mAm;
		ActivityManagerInternal v6 = v7;
		ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);
		Object v10 = ContentCaptureManagerService.access$000(this.this$0);
		AbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);
		String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v14 != 0) {
			boolean v13 = 0;
			boolean v12 = v13;
			if (v12 != 0) {
				int v17 = UserHandle.getCallingUserId();
				int v18 = Binder.getCallingUid();
				String v19 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(v17);
				if (v19 != 0) {
					ComponentName v20 = ComponentName.unflattenFromString(v19);
					if (v20 != 0) {
						String v21 = v20.getPackageName();
						Context v22 = ContentCaptureManagerService.getContext();
						PackageManager v23 = v22.getPackageManager();
						int v24 = UserHandle.getCallingUserId();
						int v25 = v23.getPackageUidAsUser(v21, v24);
						boolean v16 = 0;
						boolean v15 = v16;
						if (v15 != 0) {
							int v33 = Binder.getCallingUid();
							if (v9 != 0) {
								if (this.mWhitelisterHelpers != 0) {
									Object v36 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
									if (v36 != 0) {
										boolean v37 = v36.isWhitelisted(ActivityPresentationInfo.componentName);
										boolean v35 = ;
										if (v35 != 0) {
											String v38 = ActivityPresentationInfo.componentName.getPackageName();
											if (this.mWhitelisterHelpers != 0) {
												Object v40 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
												if (v40 != 0) {
													boolean v41 = v40.isWhitelisted(v38);
													boolean v39 = ;
													if (v39 == 0) {
														if (this.mServiceInfo != 0) {
															ComponentName v43 = this.mServiceInfo.getComponentName();
															ComponentName v42 = ;
															boolean v44 = ContentCapturePerUserService.isEnabledLocked();
															if (ContentCaptureManagerService.mRequestsHistory == 0) {
																if (v44 != 0) {
																	if (v42 != 0) {
																		if ( != 0) {
																			if (AbstractMasterSystemService.debug == 0) {
																				if (0 == 0) {
																					Bundle v53 = new Bundle();
																					v53.putBinder("binder", 0);
																					p7.send(516, );
																					String v64 = ComponentName.flattenToShortString(v42);
																					FrameworkStatsLog.write(208, p4, 3, 516, v64, 0, 0);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	if (this.mAm != 0) {
		Object v8 = LocalServices.getService(ActivityManagerInterna.class);
		this.mAm = v8;
		ActivityManagerInternal v7 = this.mAm;
		ActivityManagerInternal v6 = v7;
		ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);
		Object v10 = ContentCaptureManagerService.access$000(this.this$0);
		AbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);
		String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v14 != 0) {
			String v15 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
			boolean v16 = v14.equals(v15);
			boolean v13 = v16;
			boolean v12 = v13;
			if (v12 != 0) {
				int v19 = UserHandle.getCallingUserId();
				int v20 = Binder.getCallingUid();
				String v21 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(v19);
				if (v21 != 0) {
					ComponentName v22 = ComponentName.unflattenFromString(v21);
					if (v22 != 0) {
						boolean v18 = 0;
						boolean v17 = v18;
						if (v17 != 0) {
							int v30 = Binder.getCallingUid();
							if (v9 != 0) {
								if (this.mWhitelisterHelpers != 0) {
									Object v33 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
									if (v33 != 0) {
										boolean v34 = v33.isWhitelisted(ActivityPresentationInfo.componentName);
										boolean v32 = ;
										if (v32 != 0) {
											String v35 = ActivityPresentationInfo.componentName.getPackageName();
											if (this.mWhitelisterHelpers != 0) {
												Object v37 = this.mWhitelisterHelpers.get(AbstractPerUserSystemService.mUserId);
												if (v37 != 0) {
													boolean v38 = v37.isWhitelisted(v35);
													boolean v36 = ;
													if (v36 == 0) {
														if (this.mServiceInfo != 0) {
															ComponentName v40 = this.mServiceInfo.getComponentName();
															ComponentName v39 = ;
															boolean v41 = ContentCapturePerUserService.isEnabledLocked();
															if (ContentCaptureManagerService.mRequestsHistory == 0) {
																if (v41 != 0) {
																	if (v39 != 0) {
																		if ( != 0) {
																			if (AbstractMasterSystemService.debug == 0) {
																				if (0 == 0) {
																					Bundle v50 = new Bundle();
																					v50.putBinder("binder", 0);
																					p7.send(516, );
																					String v61 = ComponentName.flattenToShortString(v39);
																					FrameworkStatsLog.write(208, p4, 3, 516, v61, 0, 0);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);\nString v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);', 'v9.startSessionLocked(p1, p2, v7, p4, v12, p5, p6);', 'ContentCaptureMetricsLogger.writeSessionEvent(p4, 3, 516, v21, 0);']

The method startSession has the following similar APIs:

- API Name: startOneTimePermissionSession(Ljava/lang/String;IJJII)V with Similarity Score: 0.8518499732017517
  - Access Control Level: SYS_OR_SIG and the following code:
v4.startPackageOneTimeSession(p1, p3, p4, p5, p6);

- API Name: finishSession(I)V with Similarity Score: 0.8317221403121948
  - Access Control Level: NONE and the following code:
v5.finishSessionLocked(p1);

