The method removeData has the following code snippet:

This is path 1 for the API with depth 2:
public void removeData(DataRemovalRequest p1){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = this.mPackageName;
	Context v9 = this.mContext;
	PackageManager v10 = v9.getPackageManager();
	int v11 = this.mOwnerUid;
	String v12 = v10.getPackagesForUid(v11);
	if (v12 == 0) {
		if ( >= v12.length) {
			boolean v13 = v2.equals(v12[]);
			if (v13 == 0) {
				if ( >= v12.length) {
					boolean v14 = v2.equals(v12[]);
					if (v14 == 0) {
						int v15 = UserHandle.getCallingUserId();
						Object v16 = ContentCaptureManagerService.access$600(this.this$0);
						AbstractPerUserSystemService v17 = ContentCaptureManagerService.access$700(this.this$0, v15);
						boolean v19 = ContentCapturePerUserService.isEnabledLocked();
						if (v19 != 0) {
							String v20 = this.mPackageName;
							if ( != 0) {
								RemoteContentCaptureService$$ExternalSyntheticLambda2 v34 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);
								RemoteContentCaptureService.scheduleAsyncRequest(v34);
								ContentCaptureMetricsLogger.writeServiceEvent(5, AbstractMultiplePendingRequestsRemoteService.mComponentName);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void removeData(DataRemovalRequest p1){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = this.mPackageName;
	Object v10 = Objects.requireNonNull(p1);
	int v11 = Binder.getCallingUid();
	Context v12 = AbstractMasterSystemService.getContext();
	PackageManager v13 = v12.getPackageManager();
	String v14 = v13.getPackagesForUid(v11);
	if (v14 == 0) {
		if ( >= v14.length) {
			boolean v15 = p1.equals(v14[]);
			if (v15 == 0) {
				if ( >= v14.length) {
					boolean v16 = p1.equals(v14[]);
					if (v16 == 0) {
						int v17 = UserHandle.getCallingUserId();
						Object v18 = ContentCaptureManagerService.access$600(this.this$0);
						AbstractPerUserSystemService v19 = ContentCaptureManagerService.access$700(this.this$0, v17);
						boolean v21 = ContentCapturePerUserService.isEnabledLocked();
						if (v21 != 0) {
							String v22 = this.mPackageName;
							if ( != 0) {
								RemoteContentCaptureService$$ExternalSyntheticLambda2 v36 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);
								RemoteContentCaptureService.scheduleAsyncRequest(v36);
								ContentCaptureMetricsLogger.writeServiceEvent(5, AbstractMultiplePendingRequestsRemoteService.mComponentName);
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['String v2 = p1.getPackageName();\nthis.this$0.assertCalledByPackageOwner(v2);\nAbstractPerUserSystemService v6 = ContentCaptureManagerService.access$700(this.this$0, v4);\nv6.removeDataLocked(p1);', 'Object v1 = Objects.requireNonNull(p1);\nRemoteContentCaptureService$$ExternalSyntheticLambda2 v34 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);\nRemoteContentCaptureService.scheduleAsyncRequest(v34);']

The method removeData has the following similar APIs:

- API Name: shareData(Landroid/view/contentcapture/DataShareRequest;Landroid/view/contentcapture/IDataShareWriteAdapter;)V with Similarity Score: 0.9307658672332764
  - Access Control Level: NONE and the following code:
RemoteContentCaptureService$$ExternalSyntheticLambda4 v42 = new RemoteContentCaptureService$$ExternalSyntheticLambda4(p1,p2);
RemoteContentCaptureService.scheduleAsyncRequest(v42);

- API Name: getContentCaptureConditions(Ljava/lang/String;Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.7720252871513367
  - Access Control Level: NONE and the following code:
ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda0 v1 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda0(p0,p1);
int v16 = UserHandle.getCallingUserId();
AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$1500(this.this$0, v16);
ArraySet v19 = v18.getContentCaptureConditionsLocked(p1);
ArrayList v20 = ContentCaptureHelper.toList(v19);
Bundle v21 = SyncResultReceiver.bundleFor();
p2.send(0, v21);

