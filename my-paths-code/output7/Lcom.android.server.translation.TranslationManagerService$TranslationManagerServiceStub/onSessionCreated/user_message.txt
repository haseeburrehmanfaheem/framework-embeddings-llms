This is path 1 for the API with depth 2:
public void onSessionCreated(TranslationContext p1, int p2, IResultReceiver p3, int p4){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p4);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		String v6 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v6 != 0) {
			String v7 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
			boolean v8 = v6.equals(v7);
			boolean v5 = v8;
			boolean v4 = v5;
			if (v4 != 0) {
				int v11 = Binder.getCallingUid();
				String v12 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
				if (v12 != 0) {
					ComponentName v13 = ComponentName.unflattenFromString(v12);
					if (v13 != 0) {
						String v14 = v13.getPackageName();
						Context v15 = TranslationManagerService.getContext();
						PackageManager v16 = v15.getPackageManager();
						int v17 = v16.getPackageUidAsUser(v14, p2);
						boolean v10 = 0;
						boolean v9 = v10;
						if (v9 == 0) {
							if (this.mRemoteTranslationService != 0) {
								String v27 = TranslationManagerServiceImpl.getComponentNameLocked();
								if (v27 != 0) {
									ComponentName v28 = ComponentName.unflattenFromString(v27);
									RemoteTranslationService v29 = new RemoteTranslationService(v30,v28,AbstractPerUserSystemService.mUserId,0,this.mRemoteServiceCallback);
									Context v30 = TranslationManagerServiceImpl.getContext();
									this.mRemoteTranslationService = v29;
									RemoteTranslationService v26 = this.mRemoteTranslationService;
									if (v26 == 0) {
										RemoteTranslationService$$ExternalSyntheticLambda1 v33 = new RemoteTranslationService$$ExternalSyntheticLambda1(p1,p2,p3);
										boolean v35 = RemoteTranslationService.run(v33);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void onSessionCreated(TranslationContext p1, int p2, IResultReceiver p3, int p4){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p4);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		boolean v5 = this.this$0.isDefaultServiceLocked(p4);
		boolean v4 = v5;
		if (v4 != 0) {
			boolean v7 = this.this$0.isCalledByServiceAppLocked(p4, "onSessionCreated");
			boolean v6 = v7;
			if (v6 == 0) {
				RemoteTranslationService v9 = TranslationManagerServiceImpl.ensureRemoteServiceLocked();
				if (v9 == 0) {
					v9.onSessionCreated(p1, p2, p3);
					return;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void onSessionCreated(TranslationContext p1, int p2, IResultReceiver p3, int p4){
	Object v1 = TranslationManagerService.access$600(this.this$0);
	AbstractPerUserSystemService v2 = TranslationManagerService.access$700(this.this$0, p4);
	if (v2 == 0) {
		boolean v3 = TranslationManagerService.-$$Nest$misDefaultServiceLocked(this.this$0, p4);
		if (v3 != 0) {
			boolean v4 = TranslationManagerService.-$$Nest$misCalledByServiceAppLocked(this.this$0, p4, "onSessionCreated");
			if (v4 == 0) {
				p3.send(2, 0);
				return;
			}
		}
	}
}
