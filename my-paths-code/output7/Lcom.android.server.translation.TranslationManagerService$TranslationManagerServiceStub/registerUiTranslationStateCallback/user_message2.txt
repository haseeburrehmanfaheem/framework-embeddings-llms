The method registerUiTranslationStateCallback has the following code snippet:

This is path 1 for the API with depth 2:
public void registerUiTranslationStateCallback(IRemoteCallback p1, int p2){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		int v4 = Binder.getCallingUid();
		Integer v6 = Integer.valueOf(v4);
		boolean v7 = this.mCallbacks.register(p1, v6);
		int v8 = this.mActiveTranslations.size();
		if (v8 != 0) {
			Object v10 = LocalServices.getService(InputMethodManagerInterna.class);
			List v11 = v10.getEnabledInputMethodListAsUser(AbstractPerUserSystemService.mUserId);
			List v9 = v11;
			int v12 = this.mActiveTranslations.size();
			if ( >= v12) {
				Object v13 = this.mActiveTranslations.valueAt();
				if (this.DEBUG == 0) {
					Bundle v27 = new Bundle();
					v27.putInt("state", 0);
					if (TranslationManagerServiceImpl$ActiveTranslation.sourceSpec == 0) {
						ULocale v30 = TranslationManagerServiceImpl$ActiveTranslation.sourceSpec.getLocale();
						v27.putSerializable("source_locale", v30);
						ULocale v32 = TranslationManagerServiceImpl$ActiveTranslation.targetSpec.getLocale();
						v27.putSerializable("target_locale", v32);
						v27.putString("package_name", TranslationManagerServiceImpl$ActiveTranslation.packageName);
						Bundle v26 = v27;
						TranslationManagerServiceImpl.invokeCallback(v4, TranslationManagerServiceImpl$ActiveTranslation.translatedAppUid, p1, v26, v9);
						if (TranslationManagerServiceImpl$ActiveTranslation.isPaused == 0) {
							Bundle v37 = new Bundle();
							v37.putInt("state", 1);
							if (TranslationManagerServiceImpl$ActiveTranslation.sourceSpec == 0) {
								ULocale v40 = TranslationManagerServiceImpl$ActiveTranslation.sourceSpec.getLocale();
								v37.putSerializable("source_locale", v40);
								ULocale v42 = TranslationManagerServiceImpl$ActiveTranslation.targetSpec.getLocale();
								v37.putSerializable("target_locale", v42);
								v37.putString("package_name", TranslationManagerServiceImpl$ActiveTranslation.packageName);
								Bundle v36 = v37;
								TranslationManagerServiceImpl.invokeCallback(v4, TranslationManagerServiceImpl$ActiveTranslation.translatedAppUid, p1, v36, v9);
								int v46 = this.mActiveTranslations.size();
								if ( >= v46) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v4 = Binder.getCallingUid();\nInteger v6 = Integer.valueOf(v4);\nboolean v7 = this.mCallbacks.register(p1, v6);', 'Bundle v27 = new Bundle();\nv27.putInt("state", 0);\nTranslationManagerServiceImpl.invokeCallback(v4, TranslationManagerServiceImpl$ActiveTranslation.translatedAppUid, p1, v26, v9);', 'Bundle v37 = new Bundle();\nv37.putInt("state", 1);\nTranslationManagerServiceImpl.invokeCallback(v4, TranslationManagerServiceImpl$ActiveTranslation.translatedAppUid, p1, v36, v9);']

The method registerUiTranslationStateCallback has the following similar APIs:

- API Name: registerCallback(Landroid/hardware/display/IDisplayManagerCallback;)V with Similarity Score: 0.865150511264801
  - Access Control Level: NONE and the following code:
int v2 = Binder.getCallingPid();
int v3 = Binder.getCallingUid();
long v4 = Binder.clearCallingIdentity();
this.this$0.registerCallbackInternal(p1, v2, v3, p2);

- API Name: registerCallback(Landroid/debug/IAdbCallback;)V with Similarity Score: 0.8012748956680298
  - Access Control Level: NONE and the following code:
boolean v1 = this.mCallbacks.register(p1);
return;

