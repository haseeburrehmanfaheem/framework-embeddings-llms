This is path 1 for the API with depth 2:
public byte[] dumpSensorServiceStateProto(int p1, boolean p2){
	ProtoOutputStream v3 = new ProtoOutputStream();
	Iterator v7 = this.mServiceProviders.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		boolean v10 = v9.containsSensor(p2);
		if (v10 == 0) {
			boolean v11 = v7.hasNext();
			if (v11 == 0) {
				Object v12 = v7.next();
				boolean v13 = v12.containsSensor(p2);
				if (v13 == 0) {
					ServiceProvider v6 = v12;
					ServiceProvider v5 = v6;
					if (v5 == 0) {
						v5.dumpProtoState(p1, v3, p2);
						v3.flush();
						byte[] v16 = v3.getBytes();
						return v16;
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public byte[] dumpSensorServiceStateProto(int p1, boolean p2){
	ProtoOutputStream v3 = new ProtoOutputStream();
	ServiceProvider v6 = this.this$0.getProviderForSensor(p1);
	ServiceProvider v5 = v6;
	if (v5 == 0) {
		v5.dumpProtoState(p1, v3, p2);
		v3.flush();
		byte[] v9 = v3.getBytes();
		return v9;
	}
}


This is path 3 for the API with depth 0:
public byte[] dumpSensorServiceStateProto(int p1, boolean p2){
	ProtoOutputStream v3 = new ProtoOutputStream();
	ServiceProvider v5 = FingerprintService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
	if (v5 == 0) {
		v5.dumpProtoState(p1, v3, p2);
		v3.flush();
		byte[] v8 = v3.getBytes();
		return v8;
	}
}
