The method cancelAuthentication has the following code snippet:

This is path 1 for the API with depth 2:
public void cancelAuthentication(IBinder p1, String p2, String p3, long p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							List v26 = FingerprintService.getSensorProperties();
							boolean v27 = v26.isEmpty();
							if (v27 == 0) {
								Object v28 = v26.get(0);
								Iterator v29 = this.mServiceProviders.iterator();
								boolean v30 = v29.hasNext();
								if (v30 == 0) {
									Object v31 = v29.next();
									boolean v32 = v31.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v32 == 0) {
										boolean v33 = v29.hasNext();
										if (v33 == 0) {
											Object v34 = v29.next();
											boolean v35 = v34.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
											if (v35 == 0) {
												Pair v36 = new Pair(v37,v34);
												Integer v37 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
												Pair v25 = v36;
												Pair v24 = v25;
												if (v24 != 0) {
													int v39 = Pair.first.intValue();
													Pair.second.cancelAuthentication(v39, p1, p4);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void cancelAuthentication(IBinder p1, String p2, String p3, long p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							List v26 = FingerprintService.getSensorProperties();
							boolean v27 = v26.isEmpty();
							if (v27 == 0) {
								Object v28 = v26.get(0);
								Iterator v29 = this.mServiceProviders.iterator();
								boolean v30 = v29.hasNext();
								if (v30 == 0) {
									Object v31 = v29.next();
									boolean v32 = v31.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v32 == 0) {
										boolean v33 = v29.hasNext();
										if (v33 == 0) {
											Object v34 = v29.next();
											boolean v35 = v34.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
											if (v35 == 0) {
												Pair v36 = new Pair(v37,v34);
												Integer v37 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
												Pair v25 = v36;
												Pair v24 = v25;
												if (v24 != 0) {
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void cancelAuthentication(IBinder p1, String p2, String p3, long p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v5 = this.this$0.canUseFingerprint(p2, p3, 1, v1, v2, v3);\nPair v7 = this.this$0.getSingleProvider();\nint v8 = Pair.first.intValue();\nPair.second.cancelAuthentication(v8, p1, p4);', 'boolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p2, p3, 1, v1, v2, v3);\nPair v5 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);\nint v6 = Pair.first.intValue();\nPair.second.cancelAuthentication(v6, p1, p4);']

The method cancelAuthentication has the following similar APIs:

- API Name: cancelFingerprintDetect(Landroid/os/IBinder;Ljava/lang/String;J)V with Similarity Score: 0.9103081226348877
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v4 = Utils.isKeyguard(v3, p2);
Pair v5 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
int v6 = Pair.first.intValue();
Pair.second.cancelAuthentication(v6, p1, p3);

- API Name: isHardwareDetectedDeprecated(Ljava/lang/String;Ljava/lang/String;)Z with Similarity Score: 0.9002416133880615
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p1, p2, 0, v1, v2, v3);
Pair v6 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);

