The method isHardwareDetectedDeprecated has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							long v24 = Binder.clearCallingIdentity();
							List v27 = FingerprintService.getSensorProperties();
							boolean v28 = v27.isEmpty();
							if (v28 == 0) {
								Object v29 = v27.get(0);
								Iterator v30 = this.mServiceProviders.iterator();
								boolean v31 = v30.hasNext();
								if (v31 == 0) {
									Object v32 = v30.next();
									boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v33 == 0) {
										boolean v34 = v30.hasNext();
										if (v34 == 0) {
											Object v35 = v30.next();
											boolean v36 = v35.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
											if (v36 == 0) {
												Pair v37 = new Pair(v38,v35);
												Integer v38 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
												Pair v26 = v37;
												Pair v25 = v26;
												if (v25 != 0) {
													Binder.restoreCallingIdentity(v24);
													return 0;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							long v24 = Binder.clearCallingIdentity();
							List v27 = FingerprintService.getSensorProperties();
							boolean v28 = v27.isEmpty();
							if (v28 == 0) {
								Object v29 = v27.get(0);
								Iterator v30 = this.mServiceProviders.iterator();
								boolean v31 = v30.hasNext();
								if (v31 == 0) {
									Object v32 = v30.next();
									boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v33 == 0) {
										boolean v34 = v30.hasNext();
										if (v34 == 0) {
											Object v35 = v30.next();
											boolean v36 = v35.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
											if (v36 == 0) {
												Pair v37 = new Pair(v38,v35);
												Integer v38 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
												Pair v26 = v37;
												Pair v25 = v26;
												if (v25 != 0) {
													int v40 = Pair.first.intValue();
													boolean v41 = Pair.second.isHardwareDetected(v40);
													Binder.restoreCallingIdentity(v24);
													return v41;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v5 = this.this$0.canUseFingerprint(p1, p2, 0, v1, v2, v3);\nPair v8 = this.this$0.getSingleProvider();', 'boolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p1, p2, 0, v1, v2, v3);\nPair v6 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);']

The method isHardwareDetectedDeprecated has the following similar APIs:

- API Name: cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;Ljava/lang/String;J)V with Similarity Score: 0.9002416133880615
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p2, p3, 1, v1, v2, v3);
Pair v5 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
int v6 = Pair.first.intValue();
Pair.second.cancelAuthentication(v6, p1, p4);

- API Name: cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;Ljava/lang/String;J)V with Similarity Score: 0.8661051392555237
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v5 = this.this$0.canUseFingerprint(p2, p3, 1, v1, v2, v3);
Pair v7 = this.this$0.getSingleProvider();
int v8 = Pair.first.intValue();
Pair.second.cancelAuthentication(v8, p1, p4);

