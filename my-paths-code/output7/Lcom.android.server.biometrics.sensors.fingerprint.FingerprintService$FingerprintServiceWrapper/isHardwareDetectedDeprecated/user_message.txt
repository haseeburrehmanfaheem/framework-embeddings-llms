This is path 1 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							long v24 = Binder.clearCallingIdentity();
							List v27 = FingerprintService.getSensorProperties();
							boolean v28 = v27.isEmpty();
							if (v28 == 0) {
								Object v29 = v27.get(0);
								Iterator v30 = this.mServiceProviders.iterator();
								boolean v31 = v30.hasNext();
								if (v31 == 0) {
									Object v32 = v30.next();
									boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v33 == 0) {
										boolean v34 = v30.hasNext();
										if (v34 == 0) {
											Object v35 = v30.next();
											boolean v36 = v35.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
											if (v36 == 0) {
												Pair v37 = new Pair(v38,v35);
												Integer v38 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
												Pair v26 = v37;
												Pair v25 = v26;
												if (v25 != 0) {
													Binder.restoreCallingIdentity(v24);
													return 0;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	boolean v5 = this.this$0.canUseFingerprint(p1, p2, 0, v1, v2, v3);
	boolean v4 = v5;
	if (v4 != 0) {
		long v6 = Binder.clearCallingIdentity();
		Pair v8 = this.this$0.getSingleProvider();
		Pair v7 = v8;
		if (v7 != 0) {
			Binder.restoreCallingIdentity(v6);
			return 0;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p1, p2, 0, v1, v2, v3);
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		Pair v6 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
		if (v6 != 0) {
			Binder.restoreCallingIdentity(v5);
			return 0;
		}
	}
}
