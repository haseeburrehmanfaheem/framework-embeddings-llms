The method authenticate has the following code snippet:

This is path 1 for the API with depth 2:
public long authenticate(IBinder p1, long p2, int p3, int p4, IFingerprintServiceReceiver p5, String p6, String p7, boolean p8){
	if (v12 == 0) {
		if (p3 != -1) {
			List v15 = FingerprintService.getSensorProperties();
			boolean v16 = v15.isEmpty();
			if (v16 == 0) {
				Object v17 = v15.get(0);
				Iterator v18 = this.mServiceProviders.iterator();
				boolean v19 = v18.hasNext();
				if (v19 == 0) {
					Object v20 = v18.next();
					boolean v21 = v20.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
					if (v21 == 0) {
						boolean v22 = v18.hasNext();
						if (v22 == 0) {
							Object v23 = v18.next();
							boolean v24 = v23.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
							if (v24 == 0) {
								Pair v25 = new Pair(v26,v23);
								Integer v26 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
								Pair v14 = v25;
								Pair v13 = v14;
								if ( != 0) {
									FingerprintSensorPropertiesInternal v28 = Pair.second.getSensorProperties(p3);
									if (v6 != 0) {
										Context v29 = this.this$0.getContext();
										boolean v30 = Utils.isSettings(v29, p6);
										if (v30 != 0) {
											if (v28 == 0) {
												boolean v31 = v28.isAnyUdfpsType();
												if (v31 == 0) {
													Context v33 = this.this$0.getUiContext();
													UserHandle v34 = UserHandle.getUserHandleForUid(v1);
													Context v35 = v33.createPackageContextAsUser(p6, 0, v34);
													Executor v36 = v33.getMainExecutor();
													BiometricPrompt$Builder v37 = new BiometricPrompt$Builder(v35);
													String v39 = v33.getString(17039805);
													this.mPromptInfo.setTitle(v39);
													BiometricPrompt$Builder v40 = BiometricPrompt$Builder;
													String v42 = v33.getString(17040346);
													this.mPromptInfo.setSubtitle(v42);
													BiometricPrompt$Builder v43 = BiometricPrompt$Builder;
													String v45 = v33.getString(17039360);
													FingerprintService$FingerprintServiceWrapper$$ExternalSyntheticLambda1 v46 = new FingerprintService$FingerprintServiceWrapper$$ExternalSyntheticLambda1(p5);
													boolean v49 = TextUtils.isEmpty(v45);
													if (v49 != 0) {
														if (v36 == 0) {
															if (v46 == 0) {
																this.mPromptInfo.setNegativeButtonText(v45);
																BiometricPrompt$ButtonInfo v51 = new BiometricPrompt$ButtonInfo(v36,v46);
																this.mNegativeButtonInfo = v51;
																BiometricPrompt$Builder v48 = BiometricPrompt$Builder;
																this.mPromptInfo.setIsForLegacyFingerprintManager(FingerprintSensorPropertiesInternal.sensorId);
																BiometricPrompt$Builder v53 = BiometricPrompt$Builder;
																this.mPromptInfo.setIgnoreEnrollmentState(p7);
																BiometricPrompt$Builder v55 = BiometricPrompt$Builder;
																CharSequence v58 = this.mPromptInfo.getTitle();
																CharSequence v59 = this.mPromptInfo.getNegativeButtonText();
																boolean v60 = this.mPromptInfo.isUseDefaultTitle();
																boolean v61 = this.mPromptInfo.isDeviceCredentialAllowed();
																int v62 = this.mPromptInfo.getAuthenticators();
																if (v61 != 0) {
																	boolean v63 = BiometricPrompt.-$$Nest$smisCredentialAllowed(v62);
																	if (v63 == 0) {
																		boolean v64 = TextUtils.isEmpty(v58);
																		if (v64 == 0) {
																			if (v60 == 0) {
																				boolean v65 = TextUtils.isEmpty(v59);
																				if (v65 == 0) {
																					if ( == 0) {
																						boolean v66 = TextUtils.isEmpty(v59);
																						if (v66 != 0) {
																							if ( != 0) {
																								BiometricPrompt v67 = new BiometricPrompt(this.mContext,this.mPromptInfo,this.mNegativeButtonInfo,0);
																								BiometricPrompt v57 = v67;
																								FingerprintService$FingerprintServiceWrapper$1 v69 = new FingerprintService$FingerprintServiceWrapper$1(FingerprintService$FingerprintServiceWrapper,p5,v28,v3);
																								CancellationSignal v71 = new CancellationSignal();
																								if (v71 == 0) {
																									if (v36 == 0) {
																										if (v69 == 0) {
																											int v74 = this.mContext.getUserId();
																											long v75 = BiometricPrompt.authenticateInternal(p1, v71, v36, v69, v74);
																											long v73 = v75;
																											long v32 = v73;
																											return v32;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public long authenticate(IBinder p1, long p2, int p3, int p4, IFingerprintServiceReceiver p5, String p6, String p7, boolean p8){
	if (v12 == 0) {
		if (p3 != -1) {
			List v15 = FingerprintService.getSensorProperties();
			boolean v16 = v15.isEmpty();
			if (v16 == 0) {
				Object v17 = v15.get(0);
				Iterator v18 = this.mServiceProviders.iterator();
				boolean v19 = v18.hasNext();
				if (v19 == 0) {
					Object v20 = v18.next();
					boolean v21 = v20.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
					if (v21 == 0) {
						boolean v22 = v18.hasNext();
						if (v22 == 0) {
							Object v23 = v18.next();
							boolean v24 = v23.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
							if (v24 == 0) {
								Pair v25 = new Pair(v26,v23);
								Integer v26 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
								Pair v14 = v25;
								Pair v13 = v14;
								if ( != 0) {
									FingerprintSensorPropertiesInternal v28 = Pair.second.getSensorProperties(p3);
									if (v6 != 0) {
										Context v29 = this.this$0.getContext();
										boolean v30 = Utils.isSettings(v29, p6);
										if (v30 != 0) {
											if (v28 == 0) {
												int v31 = Pair.first.intValue();
												ClientMonitorCallbackConverter v32 = new ClientMonitorCallbackConverter(p5);
												long v34 = Pair.second.scheduleAuthenticate(v31, p1, p2, p4, 0, v32, p6, , , v6);
												return v34;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public long authenticate(IBinder p1, long p2, int p3, int p4, IFingerprintServiceReceiver p5, String p6, String p7, boolean p8){
	if (v12 == 0) {
		if (p3 != -1) {
			List v15 = FingerprintService.getSensorProperties();
			boolean v16 = v15.isEmpty();
			if (v16 == 0) {
				Object v17 = v15.get(0);
				Iterator v18 = this.mServiceProviders.iterator();
				boolean v19 = v18.hasNext();
				if (v19 == 0) {
					Object v20 = v18.next();
					boolean v21 = v20.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
					if (v21 == 0) {
						boolean v22 = v18.hasNext();
						if (v22 == 0) {
							Object v23 = v18.next();
							boolean v24 = v23.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
							if (v24 == 0) {
								Pair v25 = new Pair(v26,v23);
								Integer v26 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
								Pair v14 = v25;
								Pair v13 = v14;
								if ( != 0) {
									return -1;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Pair v14 = this.this$0.getSingleProvider();\nFingerprintSensorPropertiesInternal v15 = Pair.second.getSensorProperties(p3);\nContext v16 = this.this$0.getContext();\nUserHandle v23 = UserHandle.getUserHandleForUid(v1);\nContext v24 = v22.createPackageContextAsUser(p6, 0, v23);\nExecutor v25 = v22.getMainExecutor();\nBiometricPrompt$Builder v26 = new BiometricPrompt$Builder(v24);\nBiometricPrompt v38 = v37.build();\nFingerprintService$FingerprintServiceWrapper$1 v39 = new FingerprintService$FingerprintServiceWrapper$1(FingerprintService$FingerprintServiceWrapper,p5,v15,v3);\nlong v43 = v38.authenticateForOperation(v41, v25, v39, p2);\nreturn v21;', 'List v15 = FingerprintService.getSensorProperties();\nObject v17 = v15.get(0);\nIterator v18 = this.mServiceProviders.iterator();\nPair v25 = new Pair(v26,v23);\nFingerprintSensorPropertiesInternal v28 = Pair.second.getSensorProperties(p3);\nContext v29 = this.this$0.getContext();\nboolean v30 = Utils.isSettings(v29, p6);\nBiometricPrompt v67 = new BiometricPrompt(this.mContext,this.mPromptInfo,this.mNegativeButtonInfo,0);\nFingerprintService$FingerprintServiceWrapper$1 v69 = new FingerprintService$FingerprintServiceWrapper$1(FingerprintService$FingerprintServiceWrapper,p5,v28,v3);\nlong v75 = BiometricPrompt.authenticateInternal(p1, v71, v36, v69, v74);\nreturn v32;', 'Pair v13 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);\nFingerprintSensorPropertiesInternal v14 = Pair.second.getSensorProperties(p3);\nContext v15 = this.this$0.getContext();\nboolean v16 = Utils.isSettings(v15, p6);\nClientMonitorCallbackConverter v18 = new ClientMonitorCallbackConverter(p5);\nlong v20 = Pair.second.scheduleAuthenticate(v17, p1, p2, p4, 0, v18, p6, , , v6);\nreturn v20;']

The method authenticate has the following similar APIs:

- API Name: rename(IILjava/lang/String;)V with Similarity Score: 0.8041956424713135
  - Access Control Level: NORMAL and the following code:
Pair v5 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
int v6 = Pair.first.intValue();
Pair.second.rename(v6, p1, p2, p3);

- API Name: cancelFingerprintDetect(Landroid/os/IBinder;Ljava/lang/String;J)V with Similarity Score: 0.7815799117088318
  - Access Control Level: SYS_OR_SIG and the following code:
List v13 = FingerprintService.getSensorProperties();
Object v15 = v13.get(0);
Iterator v16 = this.mServiceProviders.iterator();
...
Pair v23 = new Pair(v24,v21);
int v26 = Pair.first.intValue();
Pair.second.cancelAuthentication(v26, p1, p3);

