The method detectFingerprint has the following code snippet:

This is path 1 for the API with depth 2:
public long detectFingerprint(IBinder p1, int p2, IFingerprintServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if ( == 0) {
				boolean v10 = .equals(p4);
				if (v10 == 0) {
					boolean v4 = ;
					if (v4 != 0) {
						LockPatternUtils v11 = this.mLockPatternUtils;
						int v13 = v11.getStrongAuthForUser(p2);
						if ((v13 & 1) == 0) {
							boolean v14 = ;
							if ((v13 & 2) == 0) {
								boolean v15 = ;
								if (v15 != 0) {
									if ((v13 & 32) == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (v14 != 0) {
												if ( == 0) {
													boolean v12 = ;
													if (v12 != 0) {
														List v27 = FingerprintService.getSensorProperties();
														boolean v28 = v27.isEmpty();
														if (v28 == 0) {
															Object v29 = v27.get(0);
															Iterator v30 = this.mServiceProviders.iterator();
															boolean v31 = v30.hasNext();
															if (v31 == 0) {
																Object v32 = v30.next();
																boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																if (v33 == 0) {
																	boolean v34 = v30.hasNext();
																	if (v34 == 0) {
																		Object v35 = v30.next();
																		boolean v36 = v35.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																		if (v36 == 0) {
																			Pair v37 = new Pair(v38,v35);
																			Integer v38 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
																			Pair v26 = v37;
																			Pair v25 = v26;
																			if (v25 != 0) {
																				int v40 = Pair.first.intValue();
																				ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
																				long v43 = Pair.second.scheduleFingerDetect(v40, p1, p2, v41, p4, 1);
																				return v43;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public long detectFingerprint(IBinder p1, int p2, IFingerprintServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if ( == 0) {
				boolean v10 = .equals(p4);
				if (v10 == 0) {
					boolean v4 = ;
					if (v4 != 0) {
						LockPatternUtils v11 = this.mLockPatternUtils;
						int v13 = v11.getStrongAuthForUser(p2);
						if ((v13 & 1) == 0) {
							boolean v14 = ;
							if ((v13 & 2) == 0) {
								boolean v15 = ;
								if (v15 != 0) {
									if ((v13 & 32) == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (v14 != 0) {
												if ( == 0) {
													boolean v12 = ;
													if (v12 != 0) {
														List v27 = FingerprintService.getSensorProperties();
														boolean v28 = v27.isEmpty();
														if (v28 == 0) {
															Object v29 = v27.get(0);
															Iterator v30 = this.mServiceProviders.iterator();
															boolean v31 = v30.hasNext();
															if (v31 == 0) {
																Object v32 = v30.next();
																boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																if (v33 == 0) {
																	boolean v34 = v30.hasNext();
																	if (v34 == 0) {
																		Object v35 = v30.next();
																		boolean v36 = v35.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																		if (v36 == 0) {
																			Pair v37 = new Pair(v38,v35);
																			Integer v38 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
																			Pair v26 = v37;
																			Pair v25 = v26;
																			if (v25 != 0) {
																				int v40 = Pair.first.intValue();
																				ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
																				long v43 = Pair.second.scheduleFingerDetect(v40, p1, p2, v41, p4, 1);
																				return v43;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public long detectFingerprint(IBinder p1, int p2, IFingerprintServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if ( == 0) {
				boolean v10 = .equals(p4);
				if (v10 == 0) {
					boolean v4 = ;
					if (v4 != 0) {
						LockPatternUtils v11 = this.mLockPatternUtils;
						int v13 = v11.getStrongAuthForUser(p2);
						if ((v13 & 1) == 0) {
							boolean v14 = ;
							if ((v13 & 2) == 0) {
								boolean v15 = ;
								if (v15 != 0) {
									if ((v13 & 32) == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (v14 != 0) {
												if ( == 0) {
													boolean v12 = ;
													if (v12 != 0) {
														List v27 = FingerprintService.getSensorProperties();
														boolean v28 = v27.isEmpty();
														if (v28 == 0) {
															Object v29 = v27.get(0);
															Iterator v30 = this.mServiceProviders.iterator();
															boolean v31 = v30.hasNext();
															if (v31 == 0) {
																Object v32 = v30.next();
																boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																if (v33 == 0) {
																	boolean v34 = v30.hasNext();
																	if (v34 == 0) {
																		Object v35 = v30.next();
																		boolean v36 = v35.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																		if (v36 == 0) {
																			Pair v37 = new Pair(v38,v35);
																			Integer v38 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
																			Pair v26 = v37;
																			Pair v25 = v26;
																			if (v25 != 0) {
																				return -1;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v13 = v11.getStrongAuthForUser(p2);\nClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);\nlong v43 = Pair.second.scheduleFingerDetect(v40, p1, p2, v41, p4, 1);', 'int v13 = v11.getStrongAuthForUser(p2);\nClientMonitorCallbackConverter v28 = new ClientMonitorCallbackConverter(p3);\nlong v30 = Pair.second.scheduleFingerDetect(v27, p1, p2, v28, p4, 1);', 'boolean v6 = Utils.isUserEncryptedOrLockdown(v5, p2);\nClientMonitorCallbackConverter v9 = new ClientMonitorCallbackConverter(p3);\nlong v11 = Pair.second.scheduleFingerDetect(v8, p1, p2, v9, p4, 1);']

The method detectFingerprint has the following similar APIs:

- API Name: detectFace(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)J with Similarity Score: 0.7946902513504028
  - Access Control Level: SYS_OR_SIG and the following code:
LockPatternUtils v11 = this.mLockPatternUtils;
int v13 = v11.getStrongAuthForUser(p2);
ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
long v43 = Pair.second.scheduleFaceDetect(v40, p1, p2, v41, p4, 1);
return v43;

- API Name: detectFace(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)J with Similarity Score: 0.7924197912216187
  - Access Control Level: SYS_OR_SIG and the following code:
LockPatternUtils v11 = this.mLockPatternUtils;
int v13 = v11.getStrongAuthForUser(p2);
ClientMonitorCallbackConverter v41 = new ClientMonitorCallbackConverter(p3);
long v43 = Pair.second.scheduleFaceDetect(v40, p1, p2, v41, p4, 1);
return v43;

