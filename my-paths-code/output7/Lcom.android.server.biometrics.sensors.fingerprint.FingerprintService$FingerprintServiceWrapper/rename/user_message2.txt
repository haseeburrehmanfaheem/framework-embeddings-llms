The method rename has the following code snippet:

This is path 1 for the API with depth 2:
public void rename(int p1, int p2, String p3){
	Context v3 = this.this$0.getContext();
	UserManager v5 = UserManager.get(v3);
	if (v5 != 0) {
		long v6 = Binder.clearCallingIdentity();
		int v7 = ActivityManager.getCurrentUser();
		[I v8 = v5.getEnabledProfileIds(v7);
		if ( >= v8.length) {
			Binder.restoreCallingIdentity(v6);
			boolean v4 = 0;
			if (v4 != 0) {
				List v12 = FingerprintService.getSensorProperties();
				boolean v13 = v12.isEmpty();
				if (v13 == 0) {
					Object v14 = v12.get(0);
					Iterator v15 = this.mServiceProviders.iterator();
					boolean v16 = v15.hasNext();
					if (v16 == 0) {
						Object v17 = v15.next();
						boolean v18 = v17.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
						if (v18 == 0) {
							boolean v19 = v15.hasNext();
							if (v19 == 0) {
								Object v20 = v15.next();
								boolean v21 = v20.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
								if (v21 == 0) {
									Pair v22 = new Pair(v23,v20);
									Integer v23 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
									Pair v11 = v22;
									Pair v10 = v11;
									if (v10 != 0) {
										int v25 = Pair.first.intValue();
										Pair.second.rename(v25, p1, p2, p3);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void rename(int p1, int p2, String p3){
	Context v3 = this.this$0.getContext();
	UserManager v5 = UserManager.get(v3);
	if (v5 != 0) {
		long v6 = Binder.clearCallingIdentity();
		int v7 = ActivityManager.getCurrentUser();
		[I v8 = v5.getEnabledProfileIds(v7);
		if ( >= v8.length) {
			Binder.restoreCallingIdentity(v6);
			boolean v4 = 0;
			if (v4 != 0) {
				List v12 = FingerprintService.getSensorProperties();
				boolean v13 = v12.isEmpty();
				if (v13 == 0) {
					Object v14 = v12.get(0);
					Iterator v15 = this.mServiceProviders.iterator();
					boolean v16 = v15.hasNext();
					if (v16 == 0) {
						Object v17 = v15.next();
						boolean v18 = v17.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
						if (v18 == 0) {
							boolean v19 = v15.hasNext();
							if (v19 == 0) {
								Object v20 = v15.next();
								boolean v21 = v20.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
								if (v21 == 0) {
									Pair v22 = new Pair(v23,v20);
									Integer v23 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
									Pair v11 = v22;
									Pair v10 = v11;
									if (v10 != 0) {
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v7 = ActivityManager.getCurrentUser();\n[I v8 = v5.getEnabledProfileIds(v7);\nIterator v15 = this.mServiceProviders.iterator();\nPair v22 = new Pair(v23,v20);\nPair.second.rename(v25, p1, p2, p3);', 'Pair v11 = this.this$0.getSingleProvider();\nint v12 = Pair.first.intValue();\nPair.second.rename(v12, p1, p2, p3);', 'Pair v5 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);\nint v6 = Pair.first.intValue();\nPair.second.rename(v6, p1, p2, p3);']

The method rename has the following similar APIs:

- API Name: remove(Landroid/os/IBinder;IILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;)V with Similarity Score: 0.8866872787475586
  - Access Control Level: NORMAL and the following code:
Pair v3 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);
int v4 = Pair.first.intValue();
Pair.second.scheduleRemove(v4, p1, p4, p2, p3, p5);

- API Name: isHardwareDetectedDeprecated(Ljava/lang/String;Ljava/lang/String;)Z with Similarity Score: 0.8413593173027039
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v4 = FingerprintService.-$$Nest$mcanUseFingerprint(this.this$0, p1, p2, 0, v1, v2, v3);
Pair v6 = FingerprintService.-$$Nest$mgetSingleProvider(this.this$0);

