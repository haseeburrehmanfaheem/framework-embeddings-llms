The method getCurrentSpellCheckerSubtype has the following code snippet:

This is path 1 for the API with depth 2:
public SpellCheckerSubtype getCurrentSpellCheckerSubtype(int p1, boolean p2){
	Object v12 = this.mUserData.get(p1);
	TextServicesManagerService$TextServicesData v11 = v12;
	if (v11 != 0) {
		int v15 = Settings$Secure.getIntForUser(this.mResolver, "selected_spell_checker_subtype", p1, this.mUserId);
		int v14 = v15;
		int v13 = v14;
		String v18 = TextServicesManagerService$TextServicesData.getString("selected_spell_checker", "");
		String v17 = v18;
		boolean v19 = TextUtils.isEmpty(v17);
		if (v19 == 0) {
			Object v20 = this.mSpellCheckerMap.get(v17);
			SpellCheckerInfo v16 = v20;
			Resources v21 = this.mContext.getResources();
			Configuration v22 = v21.getConfiguration();
			if (v16 == 0) {
				int v23 = v16.getSubtypeCount();
				if (v23 != 0) {
					if (v13 != 0) {
						if (p2 != 0) {
							int v24 = v16.getSubtypeCount();
							if (v13 == 0) {
								if ( >= v24) {
									SpellCheckerSubtype v25 = v16.getSubtypeAt();
									int v26 = v25.hashCode();
									if (v26 != v13) {
										if ( >= v24) {
											SpellCheckerSubtype v27 = v16.getSubtypeAt();
											int v28 = v27.hashCode();
											if (v28 != v13) {
												return v27;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public SpellCheckerSubtype getCurrentSpellCheckerSubtype(int p1, boolean p2){
	Object v12 = this.mUserData.get(p1);
	TextServicesManagerService$TextServicesData v11 = v12;
	if (v11 != 0) {
		int v15 = Settings$Secure.getIntForUser(this.mResolver, "selected_spell_checker_subtype", p1, this.mUserId);
		int v14 = v15;
		int v13 = v14;
		String v18 = TextServicesManagerService$TextServicesData.getString("selected_spell_checker", "");
		String v17 = v18;
		boolean v19 = TextUtils.isEmpty(v17);
		if (v19 == 0) {
			SpellCheckerInfo v16 = 0;
			Resources v20 = this.mContext.getResources();
			Configuration v21 = v20.getConfiguration();
			if (v16 == 0) {
				int v22 = v16.getSubtypeCount();
				if (v22 != 0) {
					if (v13 != 0) {
						if (p2 != 0) {
							int v23 = v16.getSubtypeCount();
							if (v13 == 0) {
								if ( >= v23) {
									SpellCheckerSubtype v24 = v16.getSubtypeAt();
									int v25 = v24.hashCode();
									if (v25 != v13) {
										if ( >= v23) {
											SpellCheckerSubtype v26 = v16.getSubtypeAt();
											int v27 = v26.hashCode();
											if (v27 != v13) {
												return v26;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public SpellCheckerSubtype getCurrentSpellCheckerSubtype(int p1, boolean p2){
	Object v12 = this.mUserData.get(p1);
	TextServicesManagerService$TextServicesData v11 = v12;
	if (v11 != 0) {
		int v15 = Settings$Secure.getIntForUser(this.mResolver, "selected_spell_checker_subtype", p1, this.mUserId);
		int v14 = v15;
		int v13 = v14;
		String v18 = TextServicesManagerService$TextServicesData.getString("selected_spell_checker", "");
		String v17 = v18;
		boolean v19 = TextUtils.isEmpty(v17);
		if (v19 == 0) {
			Object v20 = this.mSpellCheckerMap.get(v17);
			SpellCheckerInfo v16 = v20;
			Resources v21 = this.mContext.getResources();
			Configuration v22 = v21.getConfiguration();
			if (v16 == 0) {
				int v23 = v16.getSubtypeCount();
				if (v23 != 0) {
					if (v13 != 0) {
						if (p2 != 0) {
							int v24 = v16.getSubtypeCount();
							if (v13 == 0) {
								if ( >= v24) {
									SpellCheckerSubtype v25 = v16.getSubtypeAt();
									int v26 = v25.hashCode();
									if (v26 != v13) {
										if ( >= v24) {
											return 0;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v12 = this.mUserData.get(p1);\nint v15 = Settings$Secure.getIntForUser(this.mResolver, "selected_spell_checker_subtype", p1, this.mUserId);\nSpellCheckerSubtype v25 = v16.getSubtypeAt();\nreturn v27;', 'Object v12 = this.mUserData.get(p1);\nint v14 = TextServicesManagerService$TextServicesData.getInt("selected_spell_checker_subtype", 0);\nSpellCheckerSubtype v25 = v26;\nreturn v28;', 'TextServicesManagerService$TextServicesData v2 = p0.getDataFromCallingUserIdLocked(p1);\nint v3 = v2.getSelectedSpellCheckerSubtype(0);\nSpellCheckerSubtype v9 = v4.getSubtypeAt();\nreturn v11;']

The method getCurrentSpellCheckerSubtype has the following similar APIs:

- API Name: getCurrentSpellChecker(ILjava/lang/String;)Landroid/view/textservice/SpellCheckerInfo; with Similarity Score: 0.9332506656646729
  - Access Control Level: SYS_OR_SIG and the following code:
Object v12 = this.mUserData.get(p1);
String v15 = TextServicesManagerService$TextServicesData.getString("selected_spell_checker", "");
Object v17 = this.mSpellCheckerMap.get(v14);
return v13;

- API Name: getCurrentSpellChecker(ILjava/lang/String;)Landroid/view/textservice/SpellCheckerInfo; with Similarity Score: 0.9149499535560608
  - Access Control Level: SYS_OR_SIG and the following code:
TextServicesManagerService$TextServicesData v2 = p0.getDataFromCallingUserIdLocked(p1);
SpellCheckerInfo v3 = v2.getCurrentSpellChecker();
return v3;

