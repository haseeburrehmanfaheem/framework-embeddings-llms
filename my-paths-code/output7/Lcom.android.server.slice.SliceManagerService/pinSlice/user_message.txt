This is path 1 for the API with depth 2:
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
			String v30 = p0.getProviderPkg(v29, v28);
			Object v32 = this.mPinnedSlicesByUri.get(v29);
			if (v32 != 0) {
				PinnedSliceState v34 = new PinnedSliceState(SliceManagerService,p1,p2);
				PinnedSliceState v33 = v34;
				Object v36 = this.mPinnedSlicesByUri.put(v29, v33);
				PinnedSliceState v31 = ;
				PinnedSliceState$ListenerInfo v38 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v39,v40);
				int v39 = Binder.getCallingUid();
				int v40 = Binder.getCallingPid();
				Object v42 = this.mListeners.put(p4, v38);
				p4.linkToDeath(this.mDeathRecipient, 0);
				if (this.mSupportedSpecs != 0) {
					List v45 = Arrays.asList(this.mSupportedSpecs);
					Stream v46 = v45.stream();
					PinnedSliceState$$ExternalSyntheticLambda1 v47 = new PinnedSliceState$$ExternalSyntheticLambda1(PinnedSliceState,p2);
					Stream v49 = v46.map(v47);
					PinnedSliceState$$ExternalSyntheticLambda2 v50 = new PinnedSliceState$$ExternalSyntheticLambda2();
					Stream v52 = v49.filter(v50);
					PinnedSliceState$$ExternalSyntheticLambda3 v53 = new PinnedSliceState$$ExternalSyntheticLambda3();
					Object v55 = v52.toArray(v53);
					this.mSupportedSpecs = v55;
					if (this.mSlicePinned != 1) {
						this.mSlicePinned = 1;
						if (1 == 0) {
							Handler v57 = this.mService.getHandler();
							PinnedSliceState$$ExternalSyntheticLambda4 v58 = new PinnedSliceState$$ExternalSyntheticLambda4(PinnedSliceState);
							boolean v60 = v57.post(v58);
							SliceManagerService$$ExternalSyntheticLambda0 v61 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v30,p1,v28);
							boolean v63 = this.mHandler.post(v61);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = SliceManagerService.checkAccess(p1, p2, v5, v6);
	if (v7 == 0) {
		UserHandle v8 = Binder.getCallingUserHandle();
		int v9 = v8.getIdentifier();
		int v10 = ContentProvider.getUserIdFromUri(p2, v9);
		String v11 = SliceManagerService.getProviderPkg(p2, v10);
		boolean v12 = Objects.equals(p1, v11);
		if (v12 == 0) {
			SliceManagerService.enforceCrossUser(p1, p2);
			UserHandle v14 = Binder.getCallingUserHandle();
			int v15 = v14.getIdentifier();
			Uri v16 = ContentProvider.maybeAddUserId(p2, v15);
			long v18 = Binder.clearCallingIdentity();
			Uri v19 = ContentProvider.getUriWithoutUserId(v16);
			String v20 = v19.getAuthority();
			PackageManager v21 = this.mContext.getPackageManager();
			int v22 = ContentProvider.getUserIdFromUri(v16, v15);
			ProviderInfo v23 = v21.resolveContentProviderAsUser(v20, 0, v22);
			Binder.restoreCallingIdentity(v18);
			String v17 = ProviderInfo.packageName;
			Object v26 = this.mPinnedSlicesByUri.get(v16);
			if (v26 != 0) {
				PinnedSliceState v27 = SliceManagerService.createPinnedSlice(v16, v17);
				Object v28 = this.mPinnedSlicesByUri.put(v16, v27);
				PinnedSliceState v25 = ;
				PinnedSliceState$ListenerInfo v30 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v31,v32);
				int v31 = Binder.getCallingUid();
				int v32 = Binder.getCallingPid();
				Object v34 = this.mListeners.put(p4, v30);
				p4.linkToDeath(this.mDeathRecipient, 0);
				PinnedSliceState.mergeSpecs(p3);
				PinnedSliceState.setSlicePinned(1);
				SliceManagerService$$ExternalSyntheticLambda0 v38 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v17,p1,v15);
				boolean v40 = this.mHandler.post(v38);
				return;
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	p0.verifyCaller(p1);
	p0.enforceAccess(p1, p2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p2, v4);
	String v6 = p0.getProviderPkg(v5, v4);
	PinnedSliceState v7 = p0.getOrCreatePinnedSlice(v5, v6);
	v7.pin(p1, p3, p4);
	SliceManagerService$$ExternalSyntheticLambda0 v9 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v6,p1,v4);
	boolean v11 = this.mHandler.post(v9);
	return;
}
