The method pinSlice has the following code snippet:

This is path 1 for the API with depth 2:
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
			String v30 = p0.getProviderPkg(v29, v28);
			Object v32 = this.mPinnedSlicesByUri.get(v29);
			if (v32 != 0) {
				PinnedSliceState v34 = new PinnedSliceState(SliceManagerService,p1,p2);
				PinnedSliceState v33 = v34;
				Object v36 = this.mPinnedSlicesByUri.put(v29, v33);
				PinnedSliceState v31 = ;
				PinnedSliceState$ListenerInfo v38 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v39,v40);
				int v39 = Binder.getCallingUid();
				int v40 = Binder.getCallingPid();
				Object v42 = this.mListeners.put(p4, v38);
				p4.linkToDeath(this.mDeathRecipient, 0);
				if (this.mSupportedSpecs != 0) {
					List v45 = Arrays.asList(this.mSupportedSpecs);
					Stream v46 = v45.stream();
					PinnedSliceState$$ExternalSyntheticLambda1 v47 = new PinnedSliceState$$ExternalSyntheticLambda1(PinnedSliceState,p2);
					Stream v49 = v46.map(v47);
					PinnedSliceState$$ExternalSyntheticLambda2 v50 = new PinnedSliceState$$ExternalSyntheticLambda2();
					Stream v52 = v49.filter(v50);
					PinnedSliceState$$ExternalSyntheticLambda3 v53 = new PinnedSliceState$$ExternalSyntheticLambda3();
					Object v55 = v52.toArray(v53);
					this.mSupportedSpecs = v55;
					if (this.mSlicePinned != 1) {
						this.mSlicePinned = 1;
						if (1 == 0) {
							Handler v57 = this.mService.getHandler();
							PinnedSliceState$$ExternalSyntheticLambda4 v58 = new PinnedSliceState$$ExternalSyntheticLambda4(PinnedSliceState);
							boolean v60 = v57.post(v58);
							SliceManagerService$$ExternalSyntheticLambda0 v61 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v30,p1,v28);
							boolean v63 = this.mHandler.post(v61);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
			String v30 = p0.getProviderPkg(v29, v28);
			Object v32 = this.mPinnedSlicesByUri.get(v29);
			if (v32 != 0) {
				PinnedSliceState v34 = new PinnedSliceState(SliceManagerService,p1,p2);
				PinnedSliceState v33 = v34;
				Object v36 = this.mPinnedSlicesByUri.put(v29, v33);
				PinnedSliceState v31 = ;
				PinnedSliceState$ListenerInfo v38 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v39,v40);
				int v39 = Binder.getCallingUid();
				int v40 = Binder.getCallingPid();
				Object v42 = this.mListeners.put(p4, v38);
				p4.linkToDeath(this.mDeathRecipient, 0);
				if (this.mSupportedSpecs != 0) {
					List v45 = Arrays.asList(this.mSupportedSpecs);
					Stream v46 = v45.stream();
					PinnedSliceState$$ExternalSyntheticLambda1 v47 = new PinnedSliceState$$ExternalSyntheticLambda1(PinnedSliceState,p2);
					Stream v49 = v46.map(v47);
					PinnedSliceState$$ExternalSyntheticLambda2 v50 = new PinnedSliceState$$ExternalSyntheticLambda2();
					Stream v52 = v49.filter(v50);
					PinnedSliceState$$ExternalSyntheticLambda3 v53 = new PinnedSliceState$$ExternalSyntheticLambda3();
					Object v55 = v52.toArray(v53);
					this.mSupportedSpecs = v55;
					if (this.mSlicePinned != 1) {
						this.mSlicePinned = 1;
						if (1 == 0) {
							Handler v57 = this.mService.getHandler();
							PinnedSliceState$$ExternalSyntheticLambda5 v58 = new PinnedSliceState$$ExternalSyntheticLambda5(PinnedSliceState);
							boolean v60 = v57.post(v58);
							SliceManagerService$$ExternalSyntheticLambda0 v61 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v30,p1,v28);
							boolean v63 = this.mHandler.post(v61);
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['PinnedSliceState v34 = new PinnedSliceState(SliceManagerService,p1,p2);\nObject v36 = this.mPinnedSlicesByUri.put(v29, v33);\nPinnedSliceState$ListenerInfo v38 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v39,v40);\nObject v42 = this.mListeners.put(p4, v38);', 'PinnedSliceState v27 = SliceManagerService.createPinnedSlice(v16, v17);\nObject v28 = this.mPinnedSlicesByUri.put(v16, v27);\nPinnedSliceState$ListenerInfo v30 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v31,v32);\nObject v34 = this.mListeners.put(p4, v30);', 'PinnedSliceState v7 = p0.getOrCreatePinnedSlice(v5, v6);\nv7.pin(p1, p3, p4);']

The method pinSlice has the following similar APIs:

- API Name: unpinSlice(Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)V with Similarity Score: 0.928024411201477
  - Access Control Level: SYS_OR_SIG and the following code:
PinnedSliceState v6 = p0.getPinnedSlice(v5);
if (v6 == 0) {
boolean v7 = v6.unpin(p1, p3);
if (v7 == 0) {
p0.removePinnedSlice(v5);

- API Name: unpinSlice(Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)V with Similarity Score: 0.7992796301841736
  - Access Control Level: SYS_OR_SIG and the following code:
Object v18 = this.mPinnedSlicesByUri.get(v16);
if (v18 == 0) {
boolean v20 = p3.unlinkToDeath(this.mDeathRecipient, 0);
Object v21 = this.mListeners.remove(p3);
Object v24 = this.mPinnedSlicesByUri.remove(v16);
v24.destroy();

