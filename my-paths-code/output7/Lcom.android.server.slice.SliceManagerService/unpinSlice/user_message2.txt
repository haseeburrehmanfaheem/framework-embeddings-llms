The method unpinSlice has the following code snippet:

This is path 1 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
			PinnedSliceState v30 = p0.getPinnedSlice(v29);
			if (v30 == 0) {
				boolean v32 = p3.unlinkToDeath(this.mDeathRecipient, 0);
				Object v33 = this.mListeners.remove(p3);
				boolean v35 = this.mPinnedPkgs.isEmpty();
				if (v35 == 0) {
					boolean v36 = this.mListeners.isEmpty();
					if (v36 != 0) {
						boolean v34 = ;
						boolean v31 = (v34 ^ 1);
						if (v31 == 0) {
							Object v38 = this.mPinnedSlicesByUri.remove(v29);
							PinnedSliceState.setSlicePinned(0);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
			PinnedSliceState v30 = p0.getPinnedSlice(v29);
			if (v30 == 0) {
				boolean v32 = p3.unlinkToDeath(this.mDeathRecipient, 0);
				Object v33 = this.mListeners.remove(p3);
				boolean v35 = this.mPinnedPkgs.isEmpty();
				if (v35 == 0) {
					boolean v36 = this.mListeners.isEmpty();
					if (v36 != 0) {
						boolean v34 = ;
						boolean v31 = (v34 ^ 1);
						if (v31 == 0) {
							Object v38 = this.mPinnedSlicesByUri.remove(v29);
							PinnedSliceState.setSlicePinned(0);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
			PinnedSliceState v30 = p0.getPinnedSlice(v29);
			if (v30 == 0) {
				boolean v32 = p3.unlinkToDeath(this.mDeathRecipient, 0);
				Object v33 = this.mListeners.remove(p3);
				boolean v35 = this.mPinnedPkgs.isEmpty();
				if (v35 == 0) {
					boolean v36 = this.mListeners.isEmpty();
					if (v36 != 0) {
						boolean v34 = ;
						boolean v31 = (v34 ^ 1);
						if (v31 == 0) {
							Object v38 = this.mPinnedSlicesByUri.remove(v29);
							PinnedSliceState.setSlicePinned(0);
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['PinnedSliceState v6 = p0.getPinnedSlice(v5);\nif (v6 == 0) {\nboolean v7 = v6.unpin(p1, p3);\nif (v7 == 0) {\np0.removePinnedSlice(v5);', 'Object v18 = this.mPinnedSlicesByUri.get(v16);\nif (v18 == 0) {\nboolean v20 = p3.unlinkToDeath(this.mDeathRecipient, 0);\nObject v21 = this.mListeners.remove(p3);\nObject v24 = this.mPinnedSlicesByUri.remove(v16);\nv24.destroy();', 'int v11 = ContentProvider.getUserIdFromUri(p2, v10);\nString v15 = v14.getAuthority();\nPackageManager v16 = this.mContext.getPackageManager();\nProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);\nBinder.restoreCallingIdentity(v13);']

The method unpinSlice has the following similar APIs:

- API Name: pinSlice(Ljava/lang/String;Landroid/net/Uri;[Landroid/app/slice/SliceSpec;Landroid/os/IBinder;)V with Similarity Score: 0.928024411201477
  - Access Control Level: SYS_OR_SIG and the following code:
PinnedSliceState v7 = p0.getOrCreatePinnedSlice(v5, v6);
v7.pin(p1, p3, p4);

- API Name: pinSlice(Ljava/lang/String;Landroid/net/Uri;[Landroid/app/slice/SliceSpec;Landroid/os/IBinder;)V with Similarity Score: 0.7992796301841736
  - Access Control Level: SYS_OR_SIG and the following code:
PinnedSliceState v27 = SliceManagerService.createPinnedSlice(v16, v17);
Object v28 = this.mPinnedSlicesByUri.put(v16, v27);
PinnedSliceState$ListenerInfo v30 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v31,v32);
Object v34 = this.mListeners.put(p4, v30);

