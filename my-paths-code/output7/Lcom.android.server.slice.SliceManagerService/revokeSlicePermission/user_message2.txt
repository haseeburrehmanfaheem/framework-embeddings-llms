The method revokeSlicePermission has the following code snippet:

This is path 1 for the API with depth 2:
public void revokeSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	if (v13 != 0) {
		String v14 = SliceClientPermissions.getFileName(v8);
		SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
		XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
		if (v15 == 0) {
			v15.close();
			caughtException.addSuppressed(caughtException);
			SliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);
			Object v21 = this.mCachedClients.put(v8, v19);
			SliceClientPermissions v12 = ;
			SlicePermissionManager$PkgUser v23 = new SlicePermissionManager$PkgUser(v24,v25);
			String v24 = p5.getAuthority();
			int v25 = v10.getUserId();
			SliceClientPermissions$SliceAuthority v27 = SliceClientPermissions.getOrCreateAuthority(v23, v10);
			List v28 = p5.getPathSegments();
			v27.removePath(v28);
			return;
		}
	}
}
This is path 2 for the API with depth 2:
public void revokeSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	if (v13 != 0) {
		String v14 = SliceClientPermissions.getFileName(v8);
		SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
		XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
		if (v15 == 0) {
			v15.close();
			SliceClientPermissions v18 = new SliceClientPermissions(v8,SlicePermissionManager);
			Object v20 = this.mCachedClients.put(v8, v18);
			SliceClientPermissions v12 = ;
			SlicePermissionManager$PkgUser v22 = new SlicePermissionManager$PkgUser(v23,v24);
			String v23 = p5.getAuthority();
			int v24 = v10.getUserId();
			SliceClientPermissions$SliceAuthority v26 = SliceClientPermissions.getOrCreateAuthority(v22, v10);
			List v27 = p5.getPathSegments();
			v26.removePath(v27);
			return;
		}
	}
}

and the following sink code:
['UserHandle v4 = Binder.getCallingUserHandle();\nint v5 = v4.getIdentifier();\np0.enforceOwner(p1, p3, v5);\nSlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);', 'SliceClientPermissions v12 = SlicePermissionManager.getClient(v8);\nv12.revokeUri(p3, v10);', 'this.mPermissions.revokeSliceAccess(p2, v3, p1, v3, p3);']

The method revokeSlicePermission has the following similar APIs:

- API Name: grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.9185382127761841
  - Access Control Level: NONE and the following code:
this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);

- API Name: grantPermissionFromUser(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V with Similarity Score: 0.9070230722427368
  - Access Control Level: SYS_OR_SIG and the following code:
SliceClientPermissions v23 = SlicePermissionManager.getClient(v19);
v23.grantUri(v8, v21);

