This is path 1 for the API with depth 2:
public void revokeSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	if (v13 != 0) {
		String v14 = SliceClientPermissions.getFileName(v8);
		SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
		XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
		if (v15 == 0) {
			v15.close();
			caughtException.addSuppressed(caughtException);
			SliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);
			Object v21 = this.mCachedClients.put(v8, v19);
			SliceClientPermissions v12 = ;
			SlicePermissionManager$PkgUser v23 = new SlicePermissionManager$PkgUser(v24,v25);
			String v24 = p5.getAuthority();
			int v25 = v10.getUserId();
			SliceClientPermissions$SliceAuthority v27 = SliceClientPermissions.getOrCreateAuthority(v23, v10);
			List v28 = p5.getPathSegments();
			v27.removePath(v28);
			return;
		}
	}
}


This is path 2 for the API with depth 1:
public void revokeSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	SliceClientPermissions v12 = SlicePermissionManager.getClient(v8);
	v12.revokeUri(p3, v10);
	return;
}


This is path 3 for the API with depth 0:
public void revokeSlicePermission(String p1, String p2, Uri p3){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	p0.enforceOwner(p1, p3, v3);
	this.mPermissions.revokeSliceAccess(p2, v3, p1, v3, p3);
	return;
}
