The method getPinnedSpecs has the following code snippet:

This is path 1 for the API with depth 2:
public SliceSpec getPinnedSpecs(Uri p1, String p2){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p1, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p2, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p1, v28);
			PinnedSliceState v30 = p0.getPinnedSlice(v29);
			SliceSpec v31 = v30.getSpecs();
			return v31;
		}
	}
}

and the following sink code:
['UserHandle v3 = Binder.getCallingUserHandle();\nint v4 = v3.getIdentifier();\nUri v5 = ContentProvider.maybeAddUserId(p1, v4);\nPinnedSliceState v6 = p0.getPinnedSlice(v5);\nSliceSpec v7 = v6.getSpecs();\nreturn v7;', 'UserHandle v27 = Binder.getCallingUserHandle();\nint v28 = v27.getIdentifier();\nUri v29 = ContentProvider.maybeAddUserId(p1, v28);\nPinnedSliceState v30 = p0.getPinnedSlice(v29);\nSliceSpec v31 = v30.getSpecs();\nreturn v31;', 'Object v18 = this.mPinnedSlicesByUri.get(v16);\nif (v18 == 0) {\n    SliceSpec v19 = this.mSupportedSpecs;\n    return v19;']

The method getPinnedSpecs has the following similar APIs:

- API Name: pinSlice(Ljava/lang/String;Landroid/net/Uri;[Landroid/app/slice/SliceSpec;Landroid/os/IBinder;)V with Similarity Score: 0.7376947402954102
  - Access Control Level: SYS_OR_SIG and the following code:
PinnedSliceState v27 = SliceManagerService.createPinnedSlice(v16, v17);
Object v28 = this.mPinnedSlicesByUri.put(v16, v27);
PinnedSliceState$ListenerInfo v30 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v31,v32);
Object v34 = this.mListeners.put(p4, v30);

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I with Similarity Score: 0.718921959400177
  - Access Control Level: NORMAL and the following code:
int v1 = UserHandle.getUserId(p5);
if (p3 != 0) {
long v3 = Binder.clearCallingIdentity();
SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(p2);
boolean v6 = v5.matches(p1);

