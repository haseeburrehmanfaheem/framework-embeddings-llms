This is path 1 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		long v3 = Binder.clearCallingIdentity();
		SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(p2);
		boolean v6 = v5.matches(p1);
		boolean v4 = v6;
		if (v4 != 0) {
			SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(p2);
			boolean v9 = v8.matches(p1);
			boolean v7 = v9;
			if (v7 != 0) {
				boolean v11 = this.mPermissions.hasFullAccess(p1, p2);
				boolean v10 = v11;
				if (v10 == 0) {
					Binder.restoreCallingIdentity(v3);
					boolean v2 = ;
					if (v2 == 0) {
						if (v13 == 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		long v3 = Binder.clearCallingIdentity();
		boolean v4 = SliceManagerService.isDefaultHomeApp(p3, v1);
		if (v4 != 0) {
			boolean v5 = SliceManagerService.isAssistant(p3, v1);
			if (v5 != 0) {
				boolean v6 = SliceManagerService.isGrantedFullAccess(p3, v1);
				if (v6 == 0) {
					Binder.restoreCallingIdentity(v3);
					boolean v2 = ;
					if (v2 == 0) {
						if (v8 == 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		PackageManager v2 = this.mContext.getPackageManager();
		String v3 = v2.getPackagesForUid(p5);
		if ( >= v3.length) {
			if (v4 != 0) {
				if ( >= v3.length) {
					if (v5 != 0) {
						return 0;
					}
				}
			}
		}
	}
}
