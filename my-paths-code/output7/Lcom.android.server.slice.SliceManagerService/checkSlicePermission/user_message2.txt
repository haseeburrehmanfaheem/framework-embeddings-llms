The method checkSlicePermission has the following code snippet:

This is path 1 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		long v3 = Binder.clearCallingIdentity();
		SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(p2);
		boolean v6 = v5.matches(p1);
		boolean v4 = v6;
		if (v4 != 0) {
			SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(p2);
			boolean v9 = v8.matches(p1);
			boolean v7 = v9;
			if (v7 != 0) {
				boolean v11 = this.mPermissions.hasFullAccess(p1, p2);
				boolean v10 = v11;
				if (v10 == 0) {
					Binder.restoreCallingIdentity(v3);
					boolean v2 = ;
					if (v2 == 0) {
						if (v13 == 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		long v3 = Binder.clearCallingIdentity();
		SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(p2);
		boolean v6 = v5.matches(p1);
		boolean v4 = v6;
		if (v4 != 0) {
			SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(p2);
			boolean v9 = v8.matches(p1);
			boolean v7 = v9;
			if (v7 != 0) {
				boolean v11 = this.mPermissions.hasFullAccess(p1, p2);
				boolean v10 = v11;
				if (v10 == 0) {
					Binder.restoreCallingIdentity(v3);
					boolean v2 = ;
					if (v2 == 0) {
						if (v13 == 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v1 = UserHandle.getUserId(p5);
	if (p3 != 0) {
		long v3 = Binder.clearCallingIdentity();
		SliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(p2);
		boolean v6 = v5.matches(p1);
		boolean v4 = v6;
		if (v4 != 0) {
			SliceManagerService$PackageMatchingCache v8 = SliceManagerService.getAssistantMatcher(p2);
			boolean v9 = v8.matches(p1);
			boolean v7 = v9;
			if (v7 != 0) {
				boolean v11 = this.mPermissions.hasFullAccess(p1, p2);
				boolean v10 = v11;
				if (v10 == 0) {
					Binder.restoreCallingIdentity(v3);
					boolean v2 = ;
					if (v2 == 0) {
						return 0;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getUserId(p5);\nif (p3 != 0) {\nlong v3 = Binder.clearCallingIdentity();\nSliceManagerService$PackageMatchingCache v5 = SliceManagerService.getHomeMatcher(p2);\nboolean v6 = v5.matches(p1);', 'int v1 = UserHandle.getUserId(p5);\nif (p3 != 0) {\nlong v3 = Binder.clearCallingIdentity();\nboolean v4 = SliceManagerService.isDefaultHomeApp(p3, v1);\nboolean v5 = SliceManagerService.isAssistant(p3, v1);', 'int v1 = UserHandle.getUserId(p5);\nPackageManager v2 = this.mContext.getPackageManager();\nString v3 = v2.getPackagesForUid(p5);']

The method checkSlicePermission has the following similar APIs:

- API Name: getVersionCodeForPackage(Ljava/lang/String;)J with Similarity Score: 0.8051058053970337
  - Access Control Level: NONE and the following code:
int v1 = Binder.getCallingUid();
int v2 = UserHandle.getUserId(v1);
Computer v3 = this.mPm.snapshotComputer();
PackageInfo v4 = v3.getPackageInfo(p1, 0, v2);
return v4.getLongVersionCode();

- API Name: hasSliceAccess(Ljava/lang/String;)Z with Similarity Score: 0.8002482652664185
  - Access Control Level: NONE and the following code:
boolean v8 = SliceManagerService.isDefaultHomeApp(p1, v5);
boolean v9 = SliceManagerService.isAssistant(p1, v5);
boolean v10 = SliceManagerService.isGrantedFullAccess(p1, v5);

