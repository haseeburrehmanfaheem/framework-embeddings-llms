The method grantPermissionFromUser has the following code snippet:

This is path 1 for the API with depth 2:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	if (p4 == 0) {
		Uri$Builder v6 = p1.buildUpon();
		Uri$Builder v7 = v6.path("");
		Uri v8 = v7.build();
		int v9 = ContentProvider.getUserIdFromUri(v8, v5);
		long v11 = Binder.clearCallingIdentity();
		Uri v12 = ContentProvider.getUriWithoutUserId(v8);
		String v13 = v12.getAuthority();
		PackageManager v14 = this.mContext.getPackageManager();
		int v15 = ContentProvider.getUserIdFromUri(v8, v9);
		ProviderInfo v16 = v14.resolveContentProviderAsUser(v13, 0, v15);
		Binder.restoreCallingIdentity(v11);
		String v10 = ProviderInfo.packageName;
		SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
		SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
		Object v24 = this.mCachedClients.get(v19);
		if (v24 != 0) {
			String v25 = SliceClientPermissions.getFileName(v19);
			SlicePermissionManager$ParserHolder v26 = SlicePermissionManager.getParser(v25);
			XmlPullParser v27 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v26);
			if (v26 == 0) {
				v26.close();
				caughtException.addSuppressed(caughtException);
				SliceClientPermissions v30 = new SliceClientPermissions(v19,SlicePermissionManager);
				Object v32 = this.mCachedClients.put(v19, v30);
				SliceClientPermissions v23 = ;
				SlicePermissionManager$PkgUser v34 = new SlicePermissionManager$PkgUser(v35,v36);
				String v35 = p5.getAuthority();
				int v36 = v21.getUserId();
				SliceClientPermissions$SliceAuthority v38 = SliceClientPermissions.getOrCreateAuthority(v34, v21);
				List v39 = p5.getPathSegments();
				v38.addPath(v39);
				Object v42 = this.mCachedProviders.get(v21);
				if (v42 != 0) {
					String v43 = SliceProviderPermissions.getFileName(v21);
					SlicePermissionManager$ParserHolder v44 = SlicePermissionManager.getParser(v43);
					XmlPullParser v45 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v44);
					if (v44 == 0) {
						v44.close();
						caughtException.addSuppressed(caughtException);
						SliceProviderPermissions v48 = new SliceProviderPermissions(v21,SlicePermissionManager);
						Object v50 = this.mCachedProviders.put(v21, v48);
						SliceProviderPermissions v41 = ;
						Uri v51 = ContentProvider.getUriWithoutUserId(v8);
						String v52 = v51.getAuthority();
						Object v54 = this.mAuths.get(v52);
						if (v54 != 0) {
							SliceProviderPermissions$SliceAuthority v55 = new SliceProviderPermissions$SliceAuthority(v52,SliceProviderPermissions);
							Object v57 = this.mAuths.put(v52, v55);
							SliceProviderPermissions.onPersistableDirty(v55);
							SliceProviderPermissions$SliceAuthority v53 = ;
							boolean v60 = this.mPkgs.add(v19);
							if (v60 == 0) {
								this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
								long v62 = Binder.clearCallingIdentity();
								ContentResolver v63 = this.mContext.getContentResolver();
								v63.notifyChange(p1, 0);
								Binder.restoreCallingIdentity(v62);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	if (p4 == 0) {
		Uri$Builder v6 = p1.buildUpon();
		Uri$Builder v7 = v6.path("");
		Uri v8 = v7.build();
		int v9 = ContentProvider.getUserIdFromUri(v8, v5);
		long v11 = Binder.clearCallingIdentity();
		Uri v12 = ContentProvider.getUriWithoutUserId(v8);
		String v13 = v12.getAuthority();
		PackageManager v14 = this.mContext.getPackageManager();
		int v15 = ContentProvider.getUserIdFromUri(v8, v9);
		ProviderInfo v16 = v14.resolveContentProviderAsUser(v13, 0, v15);
		Binder.restoreCallingIdentity(v11);
		String v10 = ProviderInfo.packageName;
		SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
		SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
		Object v24 = this.mCachedClients.get(v19);
		if (v24 != 0) {
			String v25 = SliceClientPermissions.getFileName(v19);
			SlicePermissionManager$ParserHolder v26 = SlicePermissionManager.getParser(v25);
			XmlPullParser v27 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v26);
			if (v26 == 0) {
				v26.close();
				SliceClientPermissions v29 = new SliceClientPermissions(v19,SlicePermissionManager);
				Object v31 = this.mCachedClients.put(v19, v29);
				SliceClientPermissions v23 = ;
				SlicePermissionManager$PkgUser v33 = new SlicePermissionManager$PkgUser(v34,v35);
				String v34 = p5.getAuthority();
				int v35 = v21.getUserId();
				SliceClientPermissions$SliceAuthority v37 = SliceClientPermissions.getOrCreateAuthority(v33, v21);
				List v38 = p5.getPathSegments();
				v37.addPath(v38);
				Object v41 = this.mCachedProviders.get(v21);
				if (v41 != 0) {
					String v42 = SliceProviderPermissions.getFileName(v21);
					SlicePermissionManager$ParserHolder v43 = SlicePermissionManager.getParser(v42);
					XmlPullParser v44 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v43);
					if (v43 == 0) {
						v43.close();
						caughtException.addSuppressed(caughtException);
						SliceProviderPermissions v47 = new SliceProviderPermissions(v21,SlicePermissionManager);
						Object v49 = this.mCachedProviders.put(v21, v47);
						SliceProviderPermissions v40 = ;
						Uri v50 = ContentProvider.getUriWithoutUserId(v8);
						String v51 = v50.getAuthority();
						Object v53 = this.mAuths.get(v51);
						if (v53 != 0) {
							SliceProviderPermissions$SliceAuthority v54 = new SliceProviderPermissions$SliceAuthority(v51,SliceProviderPermissions);
							Object v56 = this.mAuths.put(v51, v54);
							SliceProviderPermissions.onPersistableDirty(v54);
							SliceProviderPermissions$SliceAuthority v52 = ;
							boolean v59 = this.mPkgs.add(v19);
							if (v59 == 0) {
								this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
								long v61 = Binder.clearCallingIdentity();
								ContentResolver v62 = this.mContext.getContentResolver();
								v62.notifyChange(p1, 0);
								Binder.restoreCallingIdentity(v61);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	if (p4 == 0) {
		Uri$Builder v6 = p1.buildUpon();
		Uri$Builder v7 = v6.path("");
		Uri v8 = v7.build();
		int v9 = ContentProvider.getUserIdFromUri(v8, v5);
		long v11 = Binder.clearCallingIdentity();
		Uri v12 = ContentProvider.getUriWithoutUserId(v8);
		String v13 = v12.getAuthority();
		PackageManager v14 = this.mContext.getPackageManager();
		int v15 = ContentProvider.getUserIdFromUri(v8, v9);
		ProviderInfo v16 = v14.resolveContentProviderAsUser(v13, 0, v15);
		Binder.restoreCallingIdentity(v11);
		String v10 = ProviderInfo.packageName;
		SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
		SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
		Object v24 = this.mCachedClients.get(v19);
		if (v24 != 0) {
			String v25 = SliceClientPermissions.getFileName(v19);
			SlicePermissionManager$ParserHolder v26 = SlicePermissionManager.getParser(v25);
			XmlPullParser v27 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v26);
			if (v26 == 0) {
				v26.close();
				caughtException.addSuppressed(caughtException);
				SliceClientPermissions v30 = new SliceClientPermissions(v19,SlicePermissionManager);
				Object v32 = this.mCachedClients.put(v19, v30);
				SliceClientPermissions v23 = ;
				SlicePermissionManager$PkgUser v34 = new SlicePermissionManager$PkgUser(v35,v36);
				String v35 = p5.getAuthority();
				int v36 = v21.getUserId();
				SliceClientPermissions$SliceAuthority v38 = SliceClientPermissions.getOrCreateAuthority(v34, v21);
				List v39 = p5.getPathSegments();
				v38.addPath(v39);
				Object v42 = this.mCachedProviders.get(v21);
				if (v42 != 0) {
					String v43 = SliceProviderPermissions.getFileName(v21);
					SlicePermissionManager$ParserHolder v44 = SlicePermissionManager.getParser(v43);
					XmlPullParser v45 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v44);
					if (v44 == 0) {
						v44.close();
						SliceProviderPermissions v47 = new SliceProviderPermissions(v21,SlicePermissionManager);
						Object v49 = this.mCachedProviders.put(v21, v47);
						SliceProviderPermissions v41 = ;
						Uri v50 = ContentProvider.getUriWithoutUserId(v8);
						String v51 = v50.getAuthority();
						Object v53 = this.mAuths.get(v51);
						if (v53 != 0) {
							SliceProviderPermissions$SliceAuthority v54 = new SliceProviderPermissions$SliceAuthority(v51,SliceProviderPermissions);
							Object v56 = this.mAuths.put(v51, v54);
							SliceProviderPermissions.onPersistableDirty(v54);
							SliceProviderPermissions$SliceAuthority v52 = ;
							boolean v59 = this.mPkgs.add(v19);
							if (v59 == 0) {
								this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
								long v61 = Binder.clearCallingIdentity();
								ContentResolver v62 = this.mContext.getContentResolver();
								v62.notifyChange(p1, 0);
								Binder.restoreCallingIdentity(v61);
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);\nSliceClientPermissions v30 = new SliceClientPermissions(v19, SlicePermissionManager);\nObject v32 = this.mCachedClients.put(v19, v30);', 'SliceClientPermissions v23 = SlicePermissionManager.getClient(v19);\nv23.grantUri(v8, v21);', 'this.mPermissions.grantSliceAccess(p2, v5, v10, v9, v8);']

The method grantPermissionFromUser has the following similar APIs:

- API Name: grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.9787062406539917
  - Access Control Level: NONE and the following code:
SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
Object v13 = this.mCachedClients.get(v8);
SliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);

- API Name: grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.9200751185417175
  - Access Control Level: NONE and the following code:
this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);

