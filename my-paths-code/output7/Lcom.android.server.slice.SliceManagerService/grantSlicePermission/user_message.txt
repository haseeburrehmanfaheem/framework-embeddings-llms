This is path 1 for the API with depth 2:
public void grantSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	if (v13 != 0) {
		String v14 = SliceClientPermissions.getFileName(v8);
		SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
		XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
		if (v15 == 0) {
			v15.close();
			caughtException.addSuppressed(caughtException);
			SliceClientPermissions v19 = new SliceClientPermissions(v8,SlicePermissionManager);
			Object v21 = this.mCachedClients.put(v8, v19);
			SliceClientPermissions v12 = ;
			SlicePermissionManager$PkgUser v23 = new SlicePermissionManager$PkgUser(v24,v25);
			String v24 = p5.getAuthority();
			int v25 = v10.getUserId();
			SliceClientPermissions$SliceAuthority v27 = SliceClientPermissions.getOrCreateAuthority(v23, v10);
			List v28 = p5.getPathSegments();
			v27.addPath(v28);
			Object v31 = this.mCachedProviders.get(v10);
			if (v31 != 0) {
				String v32 = SliceProviderPermissions.getFileName(v10);
				SlicePermissionManager$ParserHolder v33 = SlicePermissionManager.getParser(v32);
				XmlPullParser v34 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v33);
				if (v33 == 0) {
					v33.close();
					caughtException.addSuppressed(caughtException);
					SliceProviderPermissions v37 = new SliceProviderPermissions(v10,SlicePermissionManager);
					Object v39 = this.mCachedProviders.put(v10, v37);
					SliceProviderPermissions v30 = ;
					Uri v40 = ContentProvider.getUriWithoutUserId(p3);
					String v41 = v40.getAuthority();
					Object v43 = this.mAuths.get(v41);
					if (v43 != 0) {
						SliceProviderPermissions$SliceAuthority v44 = new SliceProviderPermissions$SliceAuthority(v41,SliceProviderPermissions);
						Object v46 = this.mAuths.put(v41, v44);
						SliceProviderPermissions.onPersistableDirty(v44);
						SliceProviderPermissions$SliceAuthority v42 = ;
						boolean v49 = this.mPkgs.add(v8);
						if (v49 == 0) {
							this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
							return;
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void grantSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	SliceClientPermissions v12 = SlicePermissionManager.getClient(v8);
	v12.grantUri(p3, v10);
	SliceProviderPermissions v14 = SlicePermissionManager.getProvider(v10);
	Uri v15 = ContentProvider.getUriWithoutUserId(p3);
	String v16 = v15.getAuthority();
	SliceProviderPermissions$SliceAuthority v17 = v14.getOrCreateAuthority(v16);
	v17.addPkg(v8);
	return;
}


This is path 3 for the API with depth 0:
public void grantSlicePermission(String p1, String p2, Uri p3){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	p0.enforceOwner(p1, p3, v3);
	this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);
	return;
}
