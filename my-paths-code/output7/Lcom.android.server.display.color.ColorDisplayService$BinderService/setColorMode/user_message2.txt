The method setColorMode has the following code snippet:

This is path 1 for the API with depth 2:
public void setColorMode(int p1){
	long v3 = Binder.clearCallingIdentity();
	boolean v6 = ColorDisplayService.isColorModeAvailable(p2);
	if (v6 == 0) {
		Context v7 = ColorDisplayService.getContext();
		ContentResolver v8 = v7.getContentResolver();
		boolean v9 = Settings$System.putIntForUser(v8, "display_color_mode", p2, this.mCurrentUser);
		Binder.restoreCallingIdentity(v3);
		return;
	}
}

and the following sink code:
['boolean v6 = ColorDisplayService.isColorModeAvailable(p2);\nContext v7 = ColorDisplayService.getContext();\nContentResolver v8 = v7.getContentResolver();\nboolean v9 = Settings$System.putIntForUser(v8, "display_color_mode", p2, this.mCurrentUser);', 'this.this$0.setColorModeInternal(p1);', 'ColorDisplayService.-$$Nest$msetColorModeInternal(this.this$0, p1);']

The method setColorMode has the following similar APIs:

- API Name: requestColorMode(II)V with Similarity Score: 0.8298827409744263
  - Access Control Level: SYS_OR_SIG and the following code:
this.this$0.requestColorModeInternal(p1, p2);
DisplayManagerService.-$$Nest$mrequestColorModeInternal(this.this$0, p1, p2);

- API Name: setReduceBrightColorsStrength(I)Z with Similarity Score: 0.7728851437568665
  - Access Control Level: SYS_OR_SIG and the following code:
long v3 = Binder.clearCallingIdentity();
if (this.mCurrentUser != -10000) {
ContentResolver v7 = v6.getContentResolver();
boolean v8 = Settings$Secure.putIntForUser(v7, "reduce_bright_colors_level", p1, this.mCurrentUser);
Binder.restoreCallingIdentity(v3);

