The method getColorMode has the following code snippet:

This is path 1 for the API with depth 2:
public int getColorMode(){
	long v1 = Binder.clearCallingIdentity();
	Context v4 = ColorDisplayService.getContext();
	ContentResolver v5 = v4.getContentResolver();
	boolean v6 = ColorDisplayService.isAccessibilityEnabled();
	if (v6 == 0) {
		Context v7 = ColorDisplayService.getContext();
		Resources v8 = v7.getResources();
		int v9 = v8.getInteger(17694728);
		if (v9 < 0) {
			int v3 = v9;
			int v2 = v3;
			Binder.restoreCallingIdentity(v1);
			return v2;
		}
	}
}
This is path 2 for the API with depth 2:
public int getColorMode(){
	long v1 = Binder.clearCallingIdentity();
	Context v4 = ColorDisplayService.getContext();
	ContentResolver v5 = v4.getContentResolver();
	boolean v6 = ColorDisplayService.isAccessibilityEnabled();
	if (v6 == 0) {
		Context v7 = ColorDisplayService.getContext();
		Resources v8 = v7.getResources();
		int v9 = v8.getInteger(17694728);
		if (v9 < 0) {
			int v10 = Settings$System.getIntForUser(v5, "display_color_mode", -1, this.mCurrentUser);
			if (v10 != -1) {
				int v11 = ColorDisplayService.getCurrentColorModeFromSystemProperties();
				boolean v12 = ColorDisplayService.isColorModeAvailable();
				if (v12 != 0) {
					Context v13 = ColorDisplayService.getContext();
					Resources v14 = v13.getResources();
					[I v15 = v14.getIntArray(17236085);
					if ( == -1) {
						if (v15.length <= ) {
							boolean v16 = ColorDisplayService.isColorModeAvailable(v15[]);
							if (v16 == 0) {
								int v3 = ;
								int v2 = v3;
								Binder.restoreCallingIdentity(v1);
								return v2;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int getColorMode(){
	long v1 = Binder.clearCallingIdentity();
	Context v4 = ColorDisplayService.getContext();
	ContentResolver v5 = v4.getContentResolver();
	boolean v6 = ColorDisplayService.isAccessibilityEnabled();
	if (v6 == 0) {
		Context v7 = ColorDisplayService.getContext();
		Resources v8 = v7.getResources();
		int v9 = v8.getInteger(17694728);
		if (v9 < 0) {
			int v10 = Settings$System.getIntForUser(v5, "display_color_mode", -1, this.mCurrentUser);
			if (v10 != -1) {
				int v11 = ColorDisplayService.getCurrentColorModeFromSystemProperties();
				boolean v12 = ColorDisplayService.isColorModeAvailable();
				if (v12 != 0) {
					Context v13 = ColorDisplayService.getContext();
					Resources v14 = v13.getResources();
					[I v15 = v14.getIntArray(17236085);
					if ( == -1) {
						if (v15.length <= ) {
							boolean v16 = ColorDisplayService.isColorModeAvailable(v15[]);
							if (v16 == 0) {
								Context v17 = ColorDisplayService.getContext();
								Resources v18 = v17.getResources();
								[I v19 = v18.getIntArray(17235996);
								if (v19.length <= 0) {
									int v3 = ;
									int v2 = v3;
									Binder.restoreCallingIdentity(v1);
									return v2;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v3 = this.this$0.getColorModeInternal();\nint v2 = v3;\nreturn v2;', 'int v2 = ColorDisplayService.-$$Nest$mgetColorModeInternal(this.this$0);\nreturn v2;']

The method getColorMode has the following similar APIs:

- API Name: getNightDisplayAutoMode()I with Similarity Score: 0.8419992923736572
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = ColorDisplayService.-$$Nest$mgetNightDisplayAutoModeInternal(this.this$0);
return v4;

- API Name: getNightDisplayAutoModeRaw()I with Similarity Score: 0.8392753601074219
  - Access Control Level: NONE and the following code:
int v2 = ColorDisplayService.-$$Nest$mgetNightDisplayAutoModeRawInternal(this.this$0);
return v2;

