This is path 1 for the API with depth 2:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			long v6 = Binder.clearCallingIdentity();
			boolean v8 = this.mDeps.isCallerSystem();
			if (v8 != 0) {
				VpnProfileStore v9 = Vpn.getVpnProfileStore();
				String v10 = Vpn.getProfileNameForPackage(p1);
				byte[] v11 = v9.get(v10);
				if (v11 != 0) {
					VpnProfile v12 = VpnProfile.decode("", v11);
					VpnProfile v7 = v12;
					if (v7 == 0) {
						Binder.restoreCallingIdentity(v6);
						PackageManager v14 = this.mContext.getPackageManager();
						ApplicationInfo v15 = v14.getApplicationInfoAsUser(p2, 0, this.mUserId);
						if ( == 0) {
							if (ApplicationInfo.targetSdkVersion >= 24) {
								Intent v23 = new Intent("android.net.VpnService");
								Intent v25 = v23.setPackage(p2);
								List v26 = v14.queryIntentServicesAsUser(v23, 128, this.mUserId);
								if (v26 == 0) {
									int v27 = v26.size();
									if (v27 != 0) {
										Iterator v28 = v26.iterator();
										boolean v29 = v28.hasNext();
										if (v29 == 0) {
											Object v30 = v28.next();
											if (ServiceInfo.metaData == 0) {
												boolean v31 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
												if (v31 != 0) {
													boolean v32 = v28.hasNext();
													if (v32 == 0) {
														Object v33 = v28.next();
														if (ServiceInfo.metaData == 0) {
															boolean v34 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
															if (v34 != 0) {
																boolean v4 = 0;
																return v4;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			long v6 = Binder.clearCallingIdentity();
			VpnProfile v7 = Vpn.getVpnProfilePrivileged(p2);
			if (v7 == 0) {
				Binder.restoreCallingIdentity(v6);
				PackageManager v9 = this.mContext.getPackageManager();
				ApplicationInfo v10 = v9.getApplicationInfoAsUser(p2, 0, this.mUserId);
				if ( == 0) {
					if (ApplicationInfo.targetSdkVersion >= 24) {
						Intent v18 = new Intent("android.net.VpnService");
						Intent v20 = v18.setPackage(p2);
						List v21 = v9.queryIntentServicesAsUser(v18, 128, this.mUserId);
						if (v21 == 0) {
							int v22 = v21.size();
							if (v22 != 0) {
								Iterator v23 = v21.iterator();
								boolean v24 = v23.hasNext();
								if (v24 == 0) {
									Object v25 = v23.next();
									if (ServiceInfo.metaData == 0) {
										boolean v26 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
										if (v26 != 0) {
											boolean v27 = v23.hasNext();
											if (v27 == 0) {
												Object v28 = v23.next();
												if (ServiceInfo.metaData == 0) {
													boolean v29 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
													if (v29 != 0) {
														boolean v4 = 0;
														return v4;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("User ");
		StringBuilder v7 = v4.append(p1);
		StringBuilder v8 = v4.append(" has no Vpn configuration");
		String v9 = v4.toString();
		VpnManagerService.logw(v9);
		return 0;
	}
}
