The method isAlwaysOnVpnPackageSupported has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			long v6 = Binder.clearCallingIdentity();
			boolean v8 = this.mDeps.isCallerSystem();
			if (v8 != 0) {
				VpnProfileStore v9 = Vpn.getVpnProfileStore();
				String v10 = Vpn.getProfileNameForPackage(p1);
				byte[] v11 = v9.get(v10);
				if (v11 != 0) {
					VpnProfile v12 = VpnProfile.decode("", v11);
					VpnProfile v7 = v12;
					if (v7 == 0) {
						Binder.restoreCallingIdentity(v6);
						PackageManager v14 = this.mContext.getPackageManager();
						ApplicationInfo v15 = v14.getApplicationInfoAsUser(p2, 0, this.mUserId);
						if ( == 0) {
							if (ApplicationInfo.targetSdkVersion >= 24) {
								Intent v23 = new Intent("android.net.VpnService");
								Intent v25 = v23.setPackage(p2);
								List v26 = v14.queryIntentServicesAsUser(v23, 128, this.mUserId);
								if (v26 == 0) {
									int v27 = v26.size();
									if (v27 != 0) {
										Iterator v28 = v26.iterator();
										boolean v29 = v28.hasNext();
										if (v29 == 0) {
											Object v30 = v28.next();
											if (ServiceInfo.metaData == 0) {
												boolean v31 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
												if (v31 != 0) {
													boolean v32 = v28.hasNext();
													if (v32 == 0) {
														Object v33 = v28.next();
														if (ServiceInfo.metaData == 0) {
															boolean v34 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
															if (v34 != 0) {
																boolean v4 = 0;
																return v4;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			long v6 = Binder.clearCallingIdentity();
			boolean v8 = this.mDeps.isCallerSystem();
			if (v8 != 0) {
				VpnProfileStore v9 = Vpn.getVpnProfileStore();
				String v10 = Vpn.getProfileNameForPackage(p1);
				byte[] v11 = v9.get(v10);
				if (v11 != 0) {
					VpnProfile v7 = 0;
					if (v7 == 0) {
						Binder.restoreCallingIdentity(v6);
						PackageManager v13 = this.mContext.getPackageManager();
						ApplicationInfo v14 = v13.getApplicationInfoAsUser(p2, 0, this.mUserId);
						if ( == 0) {
							if (ApplicationInfo.targetSdkVersion >= 24) {
								Intent v22 = new Intent("android.net.VpnService");
								Intent v24 = v22.setPackage(p2);
								List v25 = v13.queryIntentServicesAsUser(v22, 128, this.mUserId);
								if (v25 == 0) {
									int v26 = v25.size();
									if (v26 != 0) {
										Iterator v27 = v25.iterator();
										boolean v28 = v27.hasNext();
										if (v28 == 0) {
											Object v29 = v27.next();
											if (ServiceInfo.metaData == 0) {
												boolean v30 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
												if (v30 != 0) {
													boolean v31 = v27.hasNext();
													if (v31 == 0) {
														Object v32 = v27.next();
														if (ServiceInfo.metaData == 0) {
															boolean v33 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
															if (v33 != 0) {
																boolean v4 = 0;
																return v4;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mVpns.get(p1);\nlong v6 = Binder.clearCallingIdentity();\nboolean v8 = this.mDeps.isCallerSystem();\nVpnProfileStore v9 = Vpn.getVpnProfileStore();\nString v10 = Vpn.getProfileNameForPackage(p1);\nbyte[] v11 = v9.get(v10);\nVpnProfile v12 = VpnProfile.decode("", v11);\nPackageManager v14 = this.mContext.getPackageManager();\nApplicationInfo v15 = v14.getApplicationInfoAsUser(p2, 0, this.mUserId);\nIntent v23 = new Intent("android.net.VpnService");\nList v26 = v14.queryIntentServicesAsUser(v23, 128, this.mUserId);', 'Object v3 = this.mVpns.get(p1);\nVpnProfile v7 = Vpn.getVpnProfilePrivileged(p2);\nPackageManager v9 = this.mContext.getPackageManager();\nApplicationInfo v10 = v9.getApplicationInfoAsUser(p2, 0, this.mUserId);\nIntent v18 = new Intent("android.net.VpnService");\nList v21 = v9.queryIntentServicesAsUser(v18, 128, this.mUserId);']

The method isAlwaysOnVpnPackageSupported has the following similar APIs:

- API Name: getAppExclusionList(ILjava/lang/String;)Ljava/util/List; with Similarity Score: 0.8743772506713867
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
long v5 = Binder.clearCallingIdentity();
VpnProfileStore v6 = Vpn.getVpnProfileStore();
String v7 = Vpn.getVpnAppExcludedForPackage(p2);
byte[] v8 = v6.get(v7);
ArrayList v9 = new ArrayList();
Binder.restoreCallingIdentity(v5);
return v4;

- API Name: getAppExclusionList(ILjava/lang/String;)Ljava/util/List; with Similarity Score: 0.8669793009757996
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
long v5 = Binder.clearCallingIdentity();
VpnProfileStore v6 = Vpn.getVpnProfileStore();
String v7 = Vpn.getVpnAppExcludedForPackage(p2);
byte[] v8 = v6.get(v7);
ArrayList v9 = new ArrayList();
Binder.restoreCallingIdentity(v5);
return v4;

