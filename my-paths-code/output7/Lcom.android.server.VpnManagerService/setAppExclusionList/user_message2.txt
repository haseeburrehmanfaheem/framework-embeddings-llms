The method setAppExclusionList has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setAppExclusionList(int p1, String p2, List p3){
	Object v3 = this.mVpns.get(p1);
	if (v3 == 0) {
		long v6 = Binder.clearCallingIdentity();
		UserInfo v7 = this.mUserManager.getUserInfo(this.mUserId);
		boolean v8 = v7.isRestricted();
		if (v8 != 0) {
			Binder.restoreCallingIdentity(v6);
			PersistableBundle v11 = PersistableBundleUtils.fromList(p2, PersistableBundleUtils.STRING_SERIALIZER);
			byte[] v12 = PersistableBundleUtils.toDiskStableBytes(v11);
			long v13 = Binder.clearCallingIdentity();
			VpnProfileStore v14 = Vpn.getVpnProfileStore();
			String v15 = Vpn.getVpnAppExcludedForPackage(p1);
			boolean v16 = v14.put(v15, v12);
			Binder.restoreCallingIdentity(v13);
			boolean v10 = 1;
			if (v10 != 0) {
				boolean v4 = 0;
				return v4;
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean setAppExclusionList(int p1, String p2, List p3){
	Object v3 = this.mVpns.get(p1);
	if (v3 == 0) {
		long v6 = Binder.clearCallingIdentity();
		UserInfo v7 = this.mUserManager.getUserInfo(this.mUserId);
		boolean v8 = v7.isRestricted();
		if (v8 != 0) {
			Binder.restoreCallingIdentity(v6);
			PersistableBundle v11 = PersistableBundleUtils.fromList(p2, PersistableBundleUtils.STRING_SERIALIZER);
			byte[] v12 = PersistableBundleUtils.toDiskStableBytes(v11);
			long v13 = Binder.clearCallingIdentity();
			VpnProfileStore v14 = Vpn.getVpnProfileStore();
			String v15 = Vpn.getVpnAppExcludedForPackage(p1);
			boolean v16 = v14.put(v15, v12);
			Binder.restoreCallingIdentity(v13);
			boolean v10 = 1;
			if (v10 != 0) {
				if (this.mNetworkAgent == 0) {
					boolean v19 = Vpn.isIkev2VpnRunner();
					if (v19 == 0) {
						List v20 = List.copyOf(p2);
						VpnConfig.disallowedApplications = v20;
						NetworkCapabilities$Builder v21 = new NetworkCapabilities$Builder(this.mNetworkCapabilities);
						Set v23 = Vpn.createUserAndRestrictedProfilesRanges(this.mUserId, 0, p2);
						NetworkCapabilities$Builder v24 = v21.setUids(v23);
						NetworkCapabilities v25 = v24.build();
						this.mNetworkCapabilities = v25;
						Vpn.doSendNetworkCapabilities(this.mNetworkAgent, v25);
						boolean v4 = 1;
						return v4;
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mVpns.get(p1);\nPersistableBundle v11 = PersistableBundleUtils.fromList(p2, PersistableBundleUtils.STRING_SERIALIZER);\nbyte[] v12 = PersistableBundleUtils.toDiskStableBytes(v11);\nVpnProfileStore v14 = Vpn.getVpnProfileStore();\nString v15 = Vpn.getVpnAppExcludedForPackage(p1);\nboolean v16 = v14.put(v15, v12);', 'boolean v6 = Vpn.storeAppExclusionList(p2, p3);', 'boolean v4 = v3.setAppExclusionList(p2, p3);']

The method setAppExclusionList has the following similar APIs:

- API Name: getAppExclusionList(ILjava/lang/String;)Ljava/util/List; with Similarity Score: 0.8562611937522888
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
long v5 = Binder.clearCallingIdentity();
VpnProfileStore v6 = Vpn.getVpnProfileStore();
String v7 = Vpn.getVpnAppExcludedForPackage(p2);
byte[] v8 = v6.get(v7);
ArrayList v9 = new ArrayList();
Binder.restoreCallingIdentity(v5);
return v4;

- API Name: isAlwaysOnVpnPackageSupported(ILjava/lang/String;)Z with Similarity Score: 0.8327597379684448
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
VpnProfile v7 = Vpn.getVpnProfilePrivileged(p2);
PackageManager v9 = this.mContext.getPackageManager();
ApplicationInfo v10 = v9.getApplicationInfoAsUser(p2, 0, this.mUserId);
Intent v18 = new Intent("android.net.VpnService");
List v21 = v9.queryIntentServicesAsUser(v18, 128, this.mUserId);

