This is path 1 for the API with depth 2:
public void deleteVpnProfile(String p1){
	int v2 = Binder.getCallingUid();
	int v1 = v2;
	int v3 = UserHandle.getUserId(v1);
	Object v4 = this.mVpns.get(v3);
	Object v6 = Objects.requireNonNull(p1, "No package name provided");
	long v11 = Binder.clearCallingIdentity();
	UserInfo v12 = this.mUserManager.getUserInfo(this.mUserId);
	boolean v13 = v12.isRestricted();
	if (v13 != 0) {
		Binder.restoreCallingIdentity(v11);
		long v15 = Binder.clearCallingIdentity();
		boolean v17 = Vpn.isCurrentPreparedPackage(p1);
		if (v17 == 0) {
			boolean v18 = Vpn.isIkev2VpnRunner();
			if (v18 == 0) {
				boolean v16 = ;
				if (v16 == 0) {
					if (this.mAlwaysOn == 0) {
						long v20 = Binder.clearCallingIdentity();
						if (this.mInterface == 0) {
							this.mStatusIntent = 0;
							Vpn.agentDisconnect();
							Vpn.jniReset(this.mInterface);
							this.mInterface = 0;
							Vpn.resetNetworkCapabilities();
							if (this.mConnection == 0) {
								if (this.mVpnRunner == 0) {
									this.mPackage = "[Legacy VPN]";
									int v40 = Vpn.getAppUid("[Legacy VPN]", this.mUserId);
									this.mOwnerUID = v40;
									boolean v41 = Vpn.doesPackageTargetAtLeastQ("[Legacy VPN]");
									this.mIsPackageTargetingAtLeastQ = v41;
									this.mNms.allowProtect(this.mOwnerUID);
									this.mConfig = 0;
									Vpn.updateState(NetworkInfo$DetailedState.DISCONNECTED, "prepare");
									Vpn.setVpnForcedLocked(this.mLockdown);
									Binder.restoreCallingIdentity(v20);
									VpnProfileStore v46 = this.mVpnProfileStore;
									StringBuilder v48 = new StringBuilder();
									StringBuilder v50 = v48.append("PLATFORM_VPN_");
									StringBuilder v51 = v48.append(this.mUserId);
									StringBuilder v52 = v48.append("_");
									StringBuilder v53 = v48.append(p1);
									String v54 = v48.toString();
									String v47 = v54;
									boolean v56 = LegacyVpnProfileStore.remove(v47);
									boolean v55 = v56;
									Binder.restoreCallingIdentity(v15);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void deleteVpnProfile(String p1){
	int v2 = Binder.getCallingUid();
	int v1 = v2;
	int v3 = UserHandle.getUserId(v1);
	Object v4 = this.mVpns.get(v3);
	Object v6 = Objects.requireNonNull(p1, "No package name provided");
	Vpn.verifyCallingUidAndPackage(p1);
	Vpn.enforceNotRestrictedUser();
	long v9 = Binder.clearCallingIdentity();
	boolean v10 = Vpn.isCurrentIkev2VpnLocked(p1);
	if (v10 == 0) {
		if (this.mAlwaysOn == 0) {
			boolean v11 = Vpn.setAlwaysOnPackage(0, 0, 0);
			VpnProfileStore v12 = Vpn.getVpnProfileStore();
			String v13 = Vpn.getProfileNameForPackage(p1);
			boolean v14 = v12.remove(v13);
			Binder.restoreCallingIdentity(v9);
			return;
		}
	}
}


This is path 3 for the API with depth 0:
public void deleteVpnProfile(String p1){
	int v1 = this.mDeps.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	Object v3 = this.mVpns.get(v2);
	v3.deleteVpnProfile(p1);
	return;
}
