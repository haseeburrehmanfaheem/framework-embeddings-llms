The method factoryReset has the following code snippet:

This is path 1 for the API with depth 2:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	ILegacyKeystore v11 = LegacyVpnProfileStore.getService();
	v11.remove(p1, -1);
	if (ServiceSpecificException.errorCode == 7) {
		boolean v10 = 0;
		boolean v9 = v10;
		this.mLockdownEnabled = 0;
		this.mLockdownTracker = 0;
		if (this.mLockdownTracker == 0) {
			LockdownVpnTracker.shutdownLocked();
			if (0 == 0) {
				this.mLockdownTracker = 0;
				LockdownVpnTracker.initLocked();
				Binder.restoreCallingIdentity(v8);
				Object v21 = this.mVpns.get(v4);
				if (v21 == 0) {
					VpnConfig v22 = this.mConfig;
					VpnConfig v19 = v22;
					if (v19 == 0) {
						if (VpnConfig.legacy == 0) {
							Object v26 = this.mVpns.get(v4);
							if (v26 == 0) {
								int v29 = Vpn.getAppUid(p1, this.mUserId);
								if (v29 == -1) {
									boolean v30 = "[Legacy VPN]".equals(p1);
									if (v30 == 0) {
										boolean v27 = 0;
										VpnManagerService.throwIfLockdownEnabled();
										Object v34 = this.mVpns.get(v4);
										if (v34 == 0) {
											if (v36 == 0) {
												if (p1 == 0) {
													Vpn.verifyCallingUidAndPackage(p1);
													if (p2 == 0) {
														Vpn.verifyCallingUidAndPackage(p2);
														if (p1 == 0) {
															if (this.mAlwaysOn == 0) {
																boolean v39 = Vpn.isCurrentPreparedPackage(p1);
																if (v39 != 0) {
																	boolean v40 = Vpn.isCurrentPreparedPackage(p1);
																	if (v40 != 0) {
																		boolean v41 = p1.equals("[Legacy VPN]");
																		if (v41 != 0) {
																			boolean v42 = Vpn.isVpnPreConsented(this.mContext, p1, 1);
																			if (v42 != 0) {
																				if (p2 == 0) {
																					boolean v43 = p2.equals("[Legacy VPN]");
																					if (v43 != 0) {
																						boolean v44 = Vpn.isCurrentPreparedPackage(p2);
																						if (v44 == 0) {
																							boolean v35 = 1;
																							boolean v31 = v35;
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	ILegacyKeystore v11 = LegacyVpnProfileStore.getService();
	v11.remove(p1, -1);
	boolean v10 = 1;
	boolean v9 = v10;
	this.mLockdownEnabled = 0;
	this.mLockdownTracker = 0;
	if (this.mLockdownTracker == 0) {
		LockdownVpnTracker.shutdownLocked();
		if (0 == 0) {
			this.mLockdownTracker = 0;
			LockdownVpnTracker.initLocked();
			Binder.restoreCallingIdentity(v8);
			Object v21 = this.mVpns.get(v4);
			if (v21 == 0) {
				VpnConfig v22 = this.mConfig;
				VpnConfig v19 = v22;
				if (v19 == 0) {
					if (VpnConfig.legacy == 0) {
						Object v26 = this.mVpns.get(v4);
						if (v26 == 0) {
							int v29 = Vpn.getAppUid(p1, this.mUserId);
							if (v29 == -1) {
								boolean v30 = "[Legacy VPN]".equals(p1);
								if (v30 == 0) {
									boolean v27 = 0;
									VpnManagerService.throwIfLockdownEnabled();
									Object v34 = this.mVpns.get(v4);
									if (v34 == 0) {
										if (v36 == 0) {
											if (p1 == 0) {
												Vpn.verifyCallingUidAndPackage(p1);
												if (p2 == 0) {
													Vpn.verifyCallingUidAndPackage(p2);
													if (p1 == 0) {
														if (this.mAlwaysOn == 0) {
															boolean v39 = Vpn.isCurrentPreparedPackage(p1);
															if (v39 != 0) {
																boolean v40 = Vpn.isCurrentPreparedPackage(p1);
																if (v40 != 0) {
																	boolean v41 = p1.equals("[Legacy VPN]");
																	if (v41 != 0) {
																		boolean v42 = Vpn.isVpnPreConsented(this.mContext, p1, 1);
																		if (v42 != 0) {
																			if (p2 == 0) {
																				boolean v43 = p2.equals("[Legacy VPN]");
																				if (v43 != 0) {
																					boolean v44 = Vpn.isCurrentPreparedPackage(p2);
																					if (v44 == 0) {
																						boolean v35 = 1;
																						boolean v31 = v35;
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	ILegacyKeystore v11 = LegacyVpnProfileStore.getService();
	v11.remove(p1, -1);
	if (ServiceSpecificException.errorCode == 7) {
		boolean v10 = 0;
		boolean v9 = v10;
		this.mLockdownEnabled = 0;
		this.mLockdownTracker = 0;
		if (this.mLockdownTracker == 0) {
			LockdownVpnTracker.shutdownLocked();
			if (0 == 0) {
				this.mLockdownTracker = 0;
				LockdownVpnTracker.initLocked();
				Binder.restoreCallingIdentity(v8);
				Object v21 = this.mVpns.get(v4);
				if (v21 == 0) {
					VpnConfig v22 = this.mConfig;
					VpnConfig v19 = v22;
					if (v19 == 0) {
						if (VpnConfig.legacy == 0) {
							Object v26 = this.mVpns.get(v4);
							if (v26 == 0) {
								int v29 = Vpn.getAppUid(p1, this.mUserId);
								if (v29 == -1) {
									boolean v30 = "[Legacy VPN]".equals(p1);
									if (v30 == 0) {
										boolean v27 = 0;
										VpnManagerService.throwIfLockdownEnabled();
										Object v34 = this.mVpns.get(v4);
										if (v34 == 0) {
											if (v36 == 0) {
												if (p1 == 0) {
													Vpn.verifyCallingUidAndPackage(p1);
													if (p2 == 0) {
														Vpn.verifyCallingUidAndPackage(p2);
														if (p1 == 0) {
															if (this.mAlwaysOn == 0) {
																boolean v39 = Vpn.isCurrentPreparedPackage(p1);
																if (v39 != 0) {
																	boolean v40 = Vpn.isCurrentPreparedPackage(p1);
																	if (v40 != 0) {
																		boolean v41 = p1.equals("[Legacy VPN]");
																		if (v41 != 0) {
																			boolean v42 = Vpn.isVpnPreConsented(this.mContext, p1, 1);
																			if (v42 == 0) {
																				Vpn.prepareInternal(p1);
																				boolean v35 = 1;
																				boolean v31 = v35;
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['LegacyVpnProfileStore.getService().remove(p1, -1);\nthis.mLockdownEnabled = 0;\nthis.mLockdownTracker = 0;\nLockdownVpnTracker.shutdownLocked();\nLockdownVpnTracker.initLocked();', 'LegacyVpnProfileStore.remove("LOCKDOWN_VPN");\nthis.mLockdownEnabled = 0;\nthis.mLockdownTracker = 0;', 'this.mVpnProfileStore.remove("LOCKDOWN_VPN");\np0.setLockdownTracker(0);']

The method factoryReset has the following similar APIs:

- API Name: deleteVpnProfile(Ljava/lang/String;)V with Similarity Score: 0.8306940197944641
  - Access Control Level: SYS_OR_SIG and the following code:
LegacyVpnProfileStore.remove(v47);
Vpn.agentDisconnect();
Vpn.jniReset(this.mInterface);
this.mInterface = 0;
Vpn.resetNetworkCapabilities();

- API Name: deleteVpnProfile(Ljava/lang/String;)V with Similarity Score: 0.8208674788475037
  - Access Control Level: SYS_OR_SIG and the following code:
LegacyVpnProfileStore.remove(v47);
Vpn.agentDisconnect();
Vpn.jniReset(this.mInterface);
this.mInterface = 0;
Vpn.resetNetworkCapabilities();

