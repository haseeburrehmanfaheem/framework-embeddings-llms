The method prepareVpn has the following code snippet:

This is path 1 for the API with depth 2:
public boolean prepareVpn(String p1, String p2, int p3){
	p0.throwIfLockdownEnabled();
	Object v3 = this.mVpns.get(p3);
	if (v3 == 0) {
		if (v5 == 0) {
			if (p1 == 0) {
				if (p2 == 0) {
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v12 = Vpn.isCurrentPreparedPackage(p1);
							if (v12 != 0) {
								boolean v13 = Vpn.isCurrentPreparedPackage(p1);
								if (v13 != 0) {
									boolean v14 = p1.equals("[Legacy VPN]");
									if (v14 != 0) {
										if (p3 == 1) {
											if (p3 == 2) {
												boolean v16 = Vpn.isVpnProfilePreConsented(this.mContext, p1);
												boolean v15 = v16;
												if (v15 == 0) {
													long v18 = Binder.clearCallingIdentity();
													if (this.mInterface == 0) {
														this.mStatusIntent = 0;
														Vpn.agentDisconnect();
														Vpn.jniReset(this.mInterface);
														this.mInterface = 0;
														Vpn.resetNetworkCapabilities();
														if (this.mConnection == 0) {
															if (this.mVpnRunner == 0) {
																this.mPackage = p1;
																int v38 = Vpn.getAppUid(p1, this.mUserId);
																this.mOwnerUID = v38;
																boolean v39 = Vpn.doesPackageTargetAtLeastQ(p1);
																this.mIsPackageTargetingAtLeastQ = v39;
																this.mNms.allowProtect(this.mOwnerUID);
																this.mConfig = 0;
																Vpn.updateState(NetworkInfo$DetailedState.DISCONNECTED, "prepare");
																Vpn.setVpnForcedLocked(this.mLockdown);
																Binder.restoreCallingIdentity(v18);
																boolean v4 = 1;
																return v4;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean prepareVpn(String p1, String p2, int p3){
	p0.throwIfLockdownEnabled();
	Object v3 = this.mVpns.get(p3);
	if (v3 == 0) {
		if (v5 == 0) {
			if (p1 == 0) {
				if (p2 == 0) {
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v12 = Vpn.isCurrentPreparedPackage(p1);
							if (v12 != 0) {
								boolean v13 = Vpn.isCurrentPreparedPackage(p1);
								if (v13 != 0) {
									boolean v14 = p1.equals("[Legacy VPN]");
									if (v14 != 0) {
										if (p3 == 1) {
											if (p3 == 2) {
												boolean v16 = Vpn.isVpnProfilePreConsented(this.mContext, p1);
												boolean v15 = v16;
												if (v15 == 0) {
													long v18 = Binder.clearCallingIdentity();
													if (this.mInterface == 0) {
														this.mStatusIntent = 0;
														Vpn.agentDisconnect();
														Vpn.jniReset(this.mInterface);
														this.mInterface = 0;
														Vpn.resetNetworkCapabilities();
														if (this.mConnection == 0) {
															if (this.mVpnRunner == 0) {
																this.mNms.denyProtect(this.mOwnerUID);
																this.mPackage = p1;
																int v31 = Vpn.getAppUid(p1, this.mUserId);
																this.mOwnerUID = v31;
																boolean v32 = Vpn.doesPackageTargetAtLeastQ(p1);
																this.mIsPackageTargetingAtLeastQ = v32;
																this.mConfig = 0;
																Vpn.updateState(NetworkInfo$DetailedState.DISCONNECTED, "prepare");
																Vpn.setVpnForcedLocked(this.mLockdown);
																Binder.restoreCallingIdentity(v18);
																boolean v4 = 1;
																return v4;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mVpns.get(p3);\nboolean v12 = Vpn.isCurrentPreparedPackage(p1);\nboolean v13 = Vpn.isCurrentPreparedPackage(p1);\nthis.mPackage = p1;\nint v38 = Vpn.getAppUid(p1, this.mUserId);\nthis.mOwnerUID = v38;\nthis.mNms.allowProtect(this.mOwnerUID);\nreturn v4;']

The method prepareVpn has the following similar APIs:

- API Name: isAlwaysOnVpnPackageSupported(ILjava/lang/String;)Z with Similarity Score: 0.8378762006759644
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
long v6 = Binder.clearCallingIdentity();
boolean v8 = this.mDeps.isCallerSystem();
VpnProfileStore v9 = Vpn.getVpnProfileStore();
String v10 = Vpn.getProfileNameForPackage(p1);
byte[] v11 = v9.get(v10);
VpnProfile v12 = VpnProfile.decode("", v11);
PackageManager v14 = this.mContext.getPackageManager();
ApplicationInfo v15 = v14.getApplicationInfoAsUser(p2, 0, this.mUserId);
Intent v23 = new Intent("android.net.VpnService");
List v26 = v14.queryIntentServicesAsUser(v23, 128, this.mUserId);

- API Name: isAlwaysOnVpnPackageSupported(ILjava/lang/String;)Z with Similarity Score: 0.8030730485916138
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
VpnProfile v7 = Vpn.getVpnProfilePrivileged(p2);
PackageManager v9 = this.mContext.getPackageManager();
ApplicationInfo v10 = v9.getApplicationInfoAsUser(p2, 0, this.mUserId);
Intent v18 = new Intent("android.net.VpnService");
List v21 = v9.queryIntentServicesAsUser(v18, 128, this.mUserId);

