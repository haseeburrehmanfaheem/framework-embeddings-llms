The method startActivityAsUser has the following code snippet:

This is path 1 for the API with depth 2:
public void startActivityAsUser(IApplicationThread p1, String p2, String p3, ComponentName p4, int p5, boolean p6, IBinder p7, Bundle p8){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p4);
	DevicePolicyEventLogger v8 = new DevicePolicyEventLogger(126);
	DevicePolicyEventLogger v7 = v8;
	String v10 = new String(1);
	this.mStringArrayValue = v10;
	DevicePolicyEventLogger v11 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		StringList v14 = new StringList();
		StringList.stringValue = this.mStringArrayValue;
		byte[] v16 = MessageNano.toByteArray(v14);
		byte[] v13 = v16;
		StatsEvent$Builder v18 = StatsEvent.newBuilder();
		StatsEvent$Builder v19 = v18.setAtomId(103);
		StatsEvent$Builder v20 = v18.writeInt(this.mEventId);
		StatsEvent$Builder v21 = v18.writeString(this.mAdminPackageName);
		StatsEvent$Builder v22 = v18.writeInt(this.mIntValue);
		StatsEvent$Builder v23 = v18.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v24 = v18.writeLong(this.mTimePeriodMs);
		if (v13 != 0) {
			[B v25 = new [B(0);
			StatsEvent$Builder v26 = v18.writeByteArray();
			StatsEvent$Builder v27 = v18.usePooledBuffer();
			StatsEvent v28 = v18.build();
			StatsLog.write(v28);
			int v30 = this.mInjector.getCallingUserId();
			int v31 = this.mInjector.getCallingUid();
			int v32 = this.mInjector.getCallingPid();
			List v33 = p0.getTargetUserProfilesUnchecked(p2, v30);
			UserHandle v34 = UserHandle.of(p5);
			boolean v35 = v33.contains(v34);
			if (v35 == 0) {
				String v36 = p4.getPackageName();
				boolean v37 = p2.equals(v36);
				if (v37 == 0) {
					Intent v38 = new Intent();
					if (p6 == 0) {
						Intent v40 = v38.setAction("android.intent.action.MAIN");
						Intent v41 = v38.addCategory("android.intent.category.LAUNCHER");
						if (p7 != 0) {
							Intent v42 = v38.addFlags(270532608);
							String v43 = p4.getPackageName();
							Intent v44 = v38.setPackage(v43);
							p0.verifyActivityCanHandleIntentAndExported(v38, p4, v31, p5);
							if (p8 != 0) {
								ActivityOptions v46 = ActivityOptions.makeOpenCrossProfileAppsAnimation();
								Bundle v47 = v46.toBundle();
								Intent v48 = v38.setPackage(0);
								Intent v49 = v38.setComponent(p4);
								ActivityTaskManagerInternal v50 = this.mInjector.getActivityTaskManagerInternal();
								int v51 = v50.startActivityAsUser(p1, p2, p3, v38, p7, 0, , p5);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void startActivityAsUser(IApplicationThread p1, String p2, String p3, ComponentName p4, int p5, boolean p6, IBinder p7, Bundle p8){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p4);
	DevicePolicyEventLogger v8 = new DevicePolicyEventLogger(126);
	DevicePolicyEventLogger v7 = v8;
	String v10 = new String(1);
	this.mStringArrayValue = v10;
	DevicePolicyEventLogger v11 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		StringList v14 = new StringList();
		StringList.stringValue = this.mStringArrayValue;
		byte[] v16 = MessageNano.toByteArray(v14);
		byte[] v13 = v16;
		StatsEvent$Builder v18 = StatsEvent.newBuilder();
		StatsEvent$Builder v19 = v18.setAtomId(103);
		StatsEvent$Builder v20 = v18.writeInt(this.mEventId);
		StatsEvent$Builder v21 = v18.writeString(this.mAdminPackageName);
		StatsEvent$Builder v22 = v18.writeInt(this.mIntValue);
		StatsEvent$Builder v23 = v18.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v24 = v18.writeLong(this.mTimePeriodMs);
		if (v13 != 0) {
			[B v25 = new [B(0);
			StatsEvent$Builder v26 = v18.writeByteArray();
			StatsEvent$Builder v27 = v18.usePooledBuffer();
			StatsEvent v28 = v18.build();
			StatsLog.write(v28);
			int v30 = this.mInjector.getCallingUserId();
			int v31 = this.mInjector.getCallingUid();
			int v32 = this.mInjector.getCallingPid();
			List v33 = p0.getTargetUserProfilesUnchecked(p2, v30);
			UserHandle v34 = UserHandle.of(p5);
			boolean v35 = v33.contains(v34);
			if (v35 == 0) {
				String v36 = p4.getPackageName();
				boolean v37 = p2.equals(v36);
				if (v37 == 0) {
					Intent v38 = new Intent();
					if (p6 == 0) {
						Intent v40 = v38.setAction("android.intent.action.MAIN");
						Intent v41 = v38.addCategory("android.intent.category.LAUNCHER");
						if (p7 != 0) {
							Intent v42 = v38.addFlags(270532608);
							String v43 = p4.getPackageName();
							Intent v44 = v38.setPackage(v43);
							p0.verifyActivityCanHandleIntentAndExported(v38, p4, v31, p5);
							if (p8 != 0) {
								ActivityOptions v46 = ActivityOptions.makeOpenCrossProfileAppsAnimation();
								Bundle v47 = v46.toBundle();
								p8.putAll(v47);
								Intent v49 = v38.setPackage(0);
								Intent v50 = v38.setComponent(p4);
								ActivityTaskManagerInternal v51 = this.mInjector.getActivityTaskManagerInternal();
								int v52 = v51.startActivityAsUser(p1, p2, p3, v38, p7, 0, , p5);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void startActivityAsUser(IApplicationThread p1, String p2, String p3, ComponentName p4, int p5, boolean p6, IBinder p7, Bundle p8){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p4);
	DevicePolicyEventLogger v8 = new DevicePolicyEventLogger(126);
	DevicePolicyEventLogger v7 = v8;
	String v10 = new String(1);
	this.mStringArrayValue = v10;
	DevicePolicyEventLogger v11 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		StringList v14 = new StringList();
		StringList.stringValue = this.mStringArrayValue;
		byte[] v16 = MessageNano.toByteArray(v14);
		byte[] v13 = v16;
		StatsEvent$Builder v18 = StatsEvent.newBuilder();
		StatsEvent$Builder v19 = v18.setAtomId(103);
		StatsEvent$Builder v20 = v18.writeInt(this.mEventId);
		StatsEvent$Builder v21 = v18.writeString(this.mAdminPackageName);
		StatsEvent$Builder v22 = v18.writeInt(this.mIntValue);
		StatsEvent$Builder v23 = v18.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v24 = v18.writeLong(this.mTimePeriodMs);
		if (v13 != 0) {
			[B v25 = new [B(0);
			StatsEvent$Builder v26 = v18.writeByteArray();
			StatsEvent$Builder v27 = v18.usePooledBuffer();
			StatsEvent v28 = v18.build();
			StatsLog.write(v28);
			int v30 = this.mInjector.getCallingUserId();
			int v31 = this.mInjector.getCallingUid();
			int v32 = this.mInjector.getCallingPid();
			List v33 = p0.getTargetUserProfilesUnchecked(p2, v30);
			UserHandle v34 = UserHandle.of(p5);
			boolean v35 = v33.contains(v34);
			if (v35 == 0) {
				String v36 = p4.getPackageName();
				boolean v37 = p2.equals(v36);
				if (v37 == 0) {
					Intent v38 = new Intent();
					if (p6 == 0) {
						Intent v40 = v38.setAction("android.intent.action.MAIN");
						Intent v41 = v38.addCategory("android.intent.category.LAUNCHER");
						if (p7 != 0) {
							Intent v42 = v38.addFlags(2097152);
							String v43 = p4.getPackageName();
							Intent v44 = v38.setPackage(v43);
							p0.verifyActivityCanHandleIntentAndExported(v38, p4, v31, p5);
							if (p8 != 0) {
								ActivityOptions v46 = ActivityOptions.makeOpenCrossProfileAppsAnimation();
								Bundle v47 = v46.toBundle();
								Intent v48 = v38.setPackage(0);
								Intent v49 = v38.setComponent(p4);
								ActivityTaskManagerInternal v50 = this.mInjector.getActivityTaskManagerInternal();
								int v51 = v50.startActivityAsUser(p1, p2, p3, v38, p7, 0, , p5);
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p2);\nObject v2 = Objects.requireNonNull(p4);\nStatsEvent$Builder v18 = StatsEvent.newBuilder();\nStatsEvent$Builder v19 = v18.setAtomId(103);\nStatsEvent$Builder v20 = v18.writeInt(this.mEventId);\nStatsEvent v28 = v18.build();\nStatsLog.write(v28);', 'FrameworkStatsLog.write(103, this.mEventId, this.mAdminPackageName, this.mIntValue, this.mBooleanValue, this.mTimePeriodMs, v13);', 'Intent v26 = new Intent();\nIntent v28 = v26.setAction("android.intent.action.MAIN");\nIntent v29 = v26.addCategory("android.intent.category.LAUNCHER");\np0.verifyActivityCanHandleIntentAndExported(v16, p4, v9, p5);', 'ActivityOptions v23 = ActivityOptions.makeOpenCrossProfileAppsAnimation();\nBundle v24 = v23.toBundle();\nActivityTaskManagerInternal v27 = this.mInjector.getActivityTaskManagerInternal();\nint v28 = v27.startActivityAsUser(p1, p2, p3, v16, p7, 0, , p5);']

The method startActivityAsUser has the following similar APIs:

- API Name: startActivityFromRecents(ILandroid/os/Bundle;)I with Similarity Score: 0.8593704104423523
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityOptions v10 = v4.getOptions(ActivityTaskSupervisor);
this.mService.deferWindowLayout();
Task v13 = this.mRootWindowContainer.anyTaskForId(p1, 2, , 1);
int v21 = v20.startActivityInPackage(Task.mCallingUid, v2, v3, Task.mCallingPackage, Task.mCallingFeatureId, Task.intent, 0, 0, 0, 0, 0, v4, Task.mUserId, v13, "startActivityFromRecents", 0, 0, 0);
return v21;

- API Name: startNextMatchingActivity(Landroid/os/IBinder;Landroid/content/Intent;Landroid/os/Bundle;)Z with Similarity Score: 0.840126097202301
  - Access Control Level: NONE and the following code:
Intent v6 = new Intent(p2);
Uri v8 = ActivityRecord.intent.getData();
String v9 = ActivityRecord.intent.getType();
Intent v10 = v6.setDataAndType(v8, v9);

