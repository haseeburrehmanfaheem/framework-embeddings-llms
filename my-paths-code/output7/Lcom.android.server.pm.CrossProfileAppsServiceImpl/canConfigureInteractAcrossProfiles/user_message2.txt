The method canConfigureInteractAcrossProfiles has the following code snippet:

This is path 1 for the API with depth 2:
public boolean canConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	UserManager v4 = this.mInjector.getUserManager();
	[I v5 = v4.getProfileIds(p2, 0);
	if (v5.length >= 2) {
		boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v5);
		if (v6 == 0) {
			String v7 = AppOpsManager.opToPermission(93);
			if (v8 != 0) {
				boolean v3 = (v9 ^ 1);
				if (v3 != 0) {
					CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10 v11 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10(CrossProfileAppsServiceImpl,p2,p1);
					Object v13 = this.mInjector.withCleanCallingIdentity(v11);
					boolean v14 = v13.booleanValue();
					boolean v10 = v14;
					if (v10 != 0) {
						String v15 = AppOpsManager.opToPermission(93);
						if (v16 != 0) {
							CrossProfileAppsServiceImpl$$ExternalSyntheticLambda9 v18 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda9(CrossProfileAppsServiceImpl,p1);
							Object v20 = this.mInjector.withCleanCallingIdentity(v18);
							boolean v21 = v20.booleanValue();
							boolean v17 = v21;
							boolean v2 = v17;
							return v2;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean canConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	UserManager v4 = this.mInjector.getUserManager();
	[I v5 = v4.getProfileIds(p2, 0);
	if (v5.length >= 2) {
		boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v5);
		if (v6 == 0) {
			String v7 = AppOpsManager.opToPermission(93);
			if (v8 != 0) {
				boolean v3 = 0;
				if (v3 != 0) {
					CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10 v10 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10(CrossProfileAppsServiceImpl,p2,p1);
					Object v12 = this.mInjector.withCleanCallingIdentity(v10);
					boolean v13 = v12.booleanValue();
					boolean v9 = v13;
					if (v9 != 0) {
						String v14 = AppOpsManager.opToPermission(93);
						if (v15 != 0) {
							CrossProfileAppsServiceImpl$$ExternalSyntheticLambda9 v17 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda9(CrossProfileAppsServiceImpl,p1);
							Object v19 = this.mInjector.withCleanCallingIdentity(v17);
							boolean v20 = v19.booleanValue();
							boolean v16 = v20;
							boolean v2 = v16;
							return v2;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = this.mInjector.getCallingUserId();\nboolean v3 = CrossProfileAppsServiceImpl.canUserAttemptToConfigureInteractAcrossProfiles(p1, v1);\nboolean v4 = CrossProfileAppsServiceImpl.hasOtherProfileWithPackageInstalled(p1, v1);\nString v5 = AppOpsManager.opToPermission(93);\nboolean v7 = CrossProfileAppsServiceImpl.isCrossProfilePackageAllowlisted(p1);\nreturn v2;', 'int v1 = this.mInjector.getCallingUserId();\nboolean v2 = p0.canConfigureInteractAcrossProfiles(p1, v1);\nreturn v2;']

The method canConfigureInteractAcrossProfiles has the following similar APIs:

- API Name: canUserAttemptToConfigureInteractAcrossProfiles(Ljava/lang/String;)Z with Similarity Score: 0.9119925498962402
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v2 = p0.canUserAttemptToConfigureInteractAcrossProfiles(p1, v1);
return v2;

- API Name: canUserAttemptToConfigureInteractAcrossProfiles(Ljava/lang/String;)Z with Similarity Score: 0.8688115477561951
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = this.mInjector.getCallingUserId();
I v4 = v3.getProfileIds(v1, 0);
boolean v5 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4);

