The method captureFrame has the following code snippet:

This is path 1 for the API with depth 2:
public boolean captureFrame(String p1, Surface p2, TvStreamConfig p3, int p4){
	long v2 = Binder.clearCallingIdentity();
	int v3 = Binder.getCallingUid();
	int v4 = Binder.getCallingPid();
	int v7 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v6 = v7;
	int v5 = v6;
	Object v8 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
	if (v11 != 0) {
		TvInputManagerService$UserState v12 = new TvInputManagerService$UserState(this.mContext,p2,0);
		this.mUserStates.put(p2, v12);
		TvInputManagerService$UserState v10 = ;
		TvInputManagerService$UserState v9 = v10;
		Map v15 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);
		Object v16 = v15.get(p1);
		if (v16 != 0) {
			Map v17 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
			Collection v18 = v17.values();
			Iterator v19 = v18.iterator();
			boolean v20 = v19.hasNext();
			if (v20 == 0) {
				Object v21 = v19.next();
				String v22 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v21);
				boolean v23 = v22.equals(p1);
				if (v23 == 0) {
					IBinder v24 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v21);
					if (v24 == 0) {
						boolean v25 = v19.hasNext();
						if (v25 == 0) {
							Object v26 = v19.next();
							String v27 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v26);
							boolean v28 = v27.equals(p1);
							if (v28 == 0) {
								IBinder v29 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v26);
								if (v29 == 0) {
									Map v30 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
									IBinder v31 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v26);
									Object v32 = v30.get(v31);
									String v33 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v32);
									TvInputHardwareManager v34 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
									if ( == 0) {
										int v37 = this.mConnections.size();
										if ( >= v37) {
											Object v38 = this.mConnections.get();
											TvInputInfo v39 = v38.getInfoLocked();
											String v40 = v39.getId();
											boolean v41 = v40.equals(p1);
											if (v41 == 0) {
												int v42 = this.mConnections.size();
												if ( >= v42) {
													Object v43 = this.mConnections.get();
													TvInputInfo v44 = v43.getInfoLocked();
													String v45 = v44.getId();
													boolean v46 = v45.equals(p1);
													if (v46 == 0) {
														int v36 = ;
														if (v36 >= 0) {
															Object v47 = this.mConnections.get(v36);
															TvInputHardwareManager$TvInputHardwareImpl v48 = this.mHardware;
															if (v48 == 0) {
																Runnable v49 = this.mOnFirstFrameCaptured;
																if (v49 == 0) {
																	v49.run();
																	this.mOnFirstFrameCaptured = 0;
																	boolean v53 = v48.startCapture(p2, p3);
																	boolean v52 = v53;
																	if (v52 == 0) {
																		TvInputHardwareManager$2 v54 = new TvInputHardwareManager$2(TvInputHardwareManager,v48,p3);
																		this.mOnFirstFrameCaptured = v54;
																		boolean v35 = v52;
																		Binder.restoreCallingIdentity(v2);
																		return v35;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean captureFrame(String p1, Surface p2, TvStreamConfig p3, int p4){
	long v2 = Binder.clearCallingIdentity();
	int v3 = Binder.getCallingUid();
	int v4 = Binder.getCallingPid();
	int v7 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v6 = v7;
	int v5 = v6;
	Object v8 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
	if (v11 != 0) {
		TvInputManagerService$UserState v12 = new TvInputManagerService$UserState(this.mContext,p2,0);
		this.mUserStates.put(p2, v12);
		TvInputManagerService$UserState v10 = ;
		TvInputManagerService$UserState v9 = v10;
		Map v15 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);
		Object v16 = v15.get(p1);
		if (v16 != 0) {
			Map v17 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
			Collection v18 = v17.values();
			Iterator v19 = v18.iterator();
			boolean v20 = v19.hasNext();
			if (v20 == 0) {
				Object v21 = v19.next();
				String v22 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v21);
				boolean v23 = v22.equals(p1);
				if (v23 == 0) {
					IBinder v24 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v21);
					if (v24 == 0) {
						boolean v25 = v19.hasNext();
						if (v25 == 0) {
							Object v26 = v19.next();
							String v27 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v26);
							boolean v28 = v27.equals(p1);
							if (v28 == 0) {
								IBinder v29 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v26);
								if (v29 == 0) {
									Map v30 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
									IBinder v31 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v26);
									Object v32 = v30.get(v31);
									String v33 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v32);
									TvInputHardwareManager v34 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
									if ( == 0) {
										int v37 = this.mConnections.size();
										if ( >= v37) {
											Object v38 = this.mConnections.get();
											TvInputInfo v39 = v38.getInfoLocked();
											String v40 = v39.getId();
											boolean v41 = v40.equals(p1);
											if (v41 == 0) {
												int v42 = this.mConnections.size();
												if ( >= v42) {
													int v36 = -1;
													if (v36 >= 0) {
														Object v43 = this.mConnections.get(v36);
														TvInputHardwareManager$TvInputHardwareImpl v44 = this.mHardware;
														if (v44 == 0) {
															Runnable v45 = this.mOnFirstFrameCaptured;
															if (v45 == 0) {
																v45.run();
																this.mOnFirstFrameCaptured = 0;
																boolean v49 = v44.startCapture(p2, p3);
																boolean v48 = v49;
																if (v48 == 0) {
																	TvInputHardwareManager$2 v50 = new TvInputHardwareManager$2(TvInputHardwareManager,v44,p3);
																	this.mOnFirstFrameCaptured = v50;
																	boolean v35 = v48;
																	Binder.restoreCallingIdentity(v2);
																	return v35;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['TvInputHardwareManager$TvInputHardwareImpl v48 = this.mHardware;\nboolean v53 = v48.startCapture(p2, p3);\nRunnable v49 = this.mOnFirstFrameCaptured;', 'TvInputManagerService$UserState v12 = new TvInputManagerService$UserState(this.mContext,p2,0);', 'Map v15 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);\nObject v16 = v15.get(p1);']

The method captureFrame has the following similar APIs:

- API Name: getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo; with Similarity Score: 0.9111542701721191
  - Access Control Level: NONE and the following code:
Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
TvInputManagerService$UserState v10 = TvInputManagerService.getUserStateLocked(p2);
Map v14 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v8);
Object v15 = v14.get(p1);

- API Name: getAvailableExtensionInterfaceNames(Ljava/lang/String;I)Ljava/util/List; with Similarity Score: 0.9069873094558716
  - Access Control Level: SYS_OR_SIG and the following code:
TvInputManagerService$UserState v12 = new TvInputManagerService$UserState(this.mContext,p2,0);
this.mUserStates.put(p2, v12);

