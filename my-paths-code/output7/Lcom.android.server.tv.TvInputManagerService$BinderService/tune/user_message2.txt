The method tune has the following code snippet:

This is path 1 for the API with depth 2:
public void tune(IBinder p1, Uri p2, Bundle p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v5 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v4 = v5;
	int v3 = v4;
	long v6 = Binder.clearCallingIdentity();
	Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p2, p3, p4);
	ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
	ITvInputSession v9 = v11;
	ITvInputSession v8 = v9;
	v8.tune(p2, p3);
	TvInputManagerService$UserState v15 = TvInputManagerService.getUserStateLocked(p2);
	if (v15 != 0) {
		TvInputManagerService$UserState v16 = new TvInputManagerService$UserState(this.mContext,p2,0);
		this.mUserStates.put(p2, v16);
		TvInputManagerService$UserState v14 = ;
		TvInputManagerService$UserState v13 = v14;
		Map v21 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(p4);
		Object v22 = v21.get(p2);
		if (v22 == 0) {
			if (p3 == 1000) {
				int v23 = TvInputManagerService$SessionState.-$$Nest$fgetcallingUid(v22);
				if (p3 != v23) {
					TvInputManagerService$SessionState v20 = v22;
					TvInputManagerService$SessionState v19 = v20;
					boolean v24 = TvInputManagerService$SessionState.-$$Nest$fgetisCurrent(v19);
					if (v24 == 0) {
						Uri v25 = TvInputManagerService$SessionState.-$$Nest$fgetcurrentChannel(v19);
						boolean v26 = Objects.equals(v25, p2);
						if (v26 != 0) {
							if (p1 == 0) {
								String v29 = p1.getScheme();
								boolean v30 = "content".equals(v29);
								if (v30 == 0) {
									String v31 = p1.getAuthority();
									boolean v32 = "android.media.tv".equals(v31);
									if (v32 == 0) {
										boolean v28 = ;
										if (v28 == 0) {
											List v34 = p1.getPathSegments();
											int v35 = v34.size();
											if (v35 != 2) {
												Object v36 = v34.get(0);
												boolean v37 = "passthrough".equals(v36);
												if (v37 == 0) {
													boolean v33 = ;
													if (v33 == 0) {
														boolean v27 = ;
														if (v27 == 0) {
															boolean v38 = TvInputManagerService$SessionState.-$$Nest$fgetisRecordingSession(v19);
															if (v38 == 0) {
																if (p2 == 0) {
																	Map v41 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(p2);
																	String v42 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(p1);
																	Object v43 = v41.get(v42);
																	TvInputManagerService$TvInputState v40 = v43;
																	TvInputManagerService$TvInputState v39 = v40;
																	if (p4 == 0) {
																		int v46 = TvInputManagerService$TvInputState.-$$Nest$fgetuid(p4);
																		TvInputInfo v47 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
																		int v48 = v47.getType();
																		if (v48 != 0) {
																			int v49 = TvInputManagerService$TvInputState.-$$Nest$fgetinputNumber(p4);
																			TvInputInfo v50 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
																			HdmiDeviceInfo v51 = v50.getHdmiDeviceInfo();
																			if (v51 == 0) {
																				int v52 = v51.getPortId();
																				[I v53 = new [I(2);
																				int v54 = TvInputManagerService$SessionState.-$$Nest$fgetcallingUid(p3);
																				String v55 = new String(2);
																				String v56 = TvInputManagerService$SessionState.-$$Nest$fgetsessionId(p3);
																				FrameworkStatsLog.write(327, v53, v55, p2, v56, , , );
																				SomeArgs v58 = SomeArgs.obtain();
																				ComponentName v59 = TvInputManagerService$SessionState.-$$Nest$fgetcomponentName(v19);
																				String v60 = v59.getPackageName();
																				SomeArgs.arg1 = v60;
																				long v61 = System.currentTimeMillis();
																				Long v62 = Long.valueOf(v61);
																				SomeArgs.arg2 = v62;
																				long v63 = ContentUris.parseId(p2);
																				Long v64 = Long.valueOf(v63);
																				SomeArgs.arg3 = v64;
																				SomeArgs.arg4 = p3;
																				SomeArgs.arg5 = p1;
																				TvInputManagerService$WatchLogHandler v65 = TvInputManagerService.-$$Nest$fgetmWatchLogHandler(this.this$0);
																				Message v66 = v65.obtainMessage(1, v58);
																				v66.sendToTarget();
																				Binder.restoreCallingIdentity(v6);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void tune(IBinder p1, Uri p2, Bundle p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v5 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v4 = v5;
	int v3 = v4;
	long v6 = Binder.clearCallingIdentity();
	Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p2, p3, p4);
	ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
	ITvInputSession v9 = v11;
	ITvInputSession v8 = v9;
	v8.tune(p2, p3);
	TvInputManagerService$UserState v15 = TvInputManagerService.getUserStateLocked(p2);
	if (v15 != 0) {
		TvInputManagerService$UserState v16 = new TvInputManagerService$UserState(this.mContext,p2,0);
		this.mUserStates.put(p2, v16);
		TvInputManagerService$UserState v14 = ;
		TvInputManagerService$UserState v13 = v14;
		Map v21 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(p4);
		Object v22 = v21.get(p2);
		if (v22 == 0) {
			if (p3 == 1000) {
				int v23 = TvInputManagerService$SessionState.-$$Nest$fgetcallingUid(v22);
				if (p3 != v23) {
					TvInputManagerService$SessionState v20 = v22;
					TvInputManagerService$SessionState v19 = v20;
					boolean v24 = TvInputManagerService$SessionState.-$$Nest$fgetisCurrent(v19);
					if (v24 == 0) {
						Uri v25 = TvInputManagerService$SessionState.-$$Nest$fgetcurrentChannel(v19);
						boolean v26 = Objects.equals(v25, p2);
						if (v26 != 0) {
							if (p1 == 0) {
								String v29 = p1.getScheme();
								boolean v30 = "content".equals(v29);
								if (v30 == 0) {
									String v31 = p1.getAuthority();
									boolean v32 = "android.media.tv".equals(v31);
									if (v32 == 0) {
										boolean v28 = ;
										if (v28 == 0) {
											List v34 = p1.getPathSegments();
											int v35 = v34.size();
											if (v35 != 2) {
												Object v36 = v34.get(0);
												boolean v37 = "passthrough".equals(v36);
												if (v37 == 0) {
													boolean v33 = ;
													if (v33 == 0) {
														boolean v27 = ;
														if (v27 == 0) {
															boolean v38 = TvInputManagerService$SessionState.-$$Nest$fgetisRecordingSession(v19);
															if (v38 == 0) {
																if (p2 == 0) {
																	TvInputManagerService$TvInputState v40 = 0;
																	TvInputManagerService$TvInputState v39 = v40;
																	if (p4 == 0) {
																		int v43 = TvInputManagerService$TvInputState.-$$Nest$fgetuid(p4);
																		TvInputInfo v44 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
																		int v45 = v44.getType();
																		if (v45 != 0) {
																			int v46 = TvInputManagerService$TvInputState.-$$Nest$fgetinputNumber(p4);
																			TvInputInfo v47 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
																			HdmiDeviceInfo v48 = v47.getHdmiDeviceInfo();
																			if (v48 == 0) {
																				int v49 = v48.getPortId();
																				[I v50 = new [I(2);
																				int v51 = TvInputManagerService$SessionState.-$$Nest$fgetcallingUid(p3);
																				String v52 = new String(2);
																				String v53 = TvInputManagerService$SessionState.-$$Nest$fgetsessionId(p3);
																				FrameworkStatsLog.write(327, v50, v52, p2, v53, , , );
																				SomeArgs v55 = SomeArgs.obtain();
																				ComponentName v56 = TvInputManagerService$SessionState.-$$Nest$fgetcomponentName(v19);
																				String v57 = v56.getPackageName();
																				SomeArgs.arg1 = v57;
																				long v58 = System.currentTimeMillis();
																				Long v59 = Long.valueOf(v58);
																				SomeArgs.arg2 = v59;
																				long v60 = ContentUris.parseId(p2);
																				Long v61 = Long.valueOf(v60);
																				SomeArgs.arg3 = v61;
																				SomeArgs.arg4 = p3;
																				SomeArgs.arg5 = p1;
																				TvInputManagerService$WatchLogHandler v62 = TvInputManagerService.-$$Nest$fgetmWatchLogHandler(this.this$0);
																				Message v63 = v62.obtainMessage(1, v55);
																				v63.sendToTarget();
																				Binder.restoreCallingIdentity(v6);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void tune(IBinder p1, Uri p2, Bundle p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v5 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v4 = v5;
	int v3 = v4;
	long v6 = Binder.clearCallingIdentity();
	Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p2, p3, p4);
	ITvInputSession v11 = TvInputManagerService.getSessionLocked(v10);
	ITvInputSession v9 = v11;
	ITvInputSession v8 = v9;
	v8.tune(p2, p3);
	TvInputManagerService$UserState v15 = TvInputManagerService.getUserStateLocked(p2);
	if (v15 != 0) {
		TvInputManagerService$UserState v16 = new TvInputManagerService$UserState(this.mContext,p2,0);
		this.mUserStates.put(p2, v16);
		TvInputManagerService$UserState v14 = ;
		TvInputManagerService$UserState v13 = v14;
		Map v21 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(p4);
		Object v22 = v21.get(p2);
		if (v22 == 0) {
			if (p3 == 1000) {
				int v23 = TvInputManagerService$SessionState.-$$Nest$fgetcallingUid(v22);
				if (p3 != v23) {
					TvInputManagerService$SessionState v20 = v22;
					TvInputManagerService$SessionState v19 = v20;
					boolean v24 = TvInputManagerService$SessionState.-$$Nest$fgetisCurrent(v19);
					if (v24 == 0) {
						Uri v25 = TvInputManagerService$SessionState.-$$Nest$fgetcurrentChannel(v19);
						boolean v26 = Objects.equals(v25, p2);
						if (v26 != 0) {
							TvInputManagerService$SessionState.-$$Nest$fputisCurrent(v19, 1);
							TvInputManagerService$SessionState.-$$Nest$fputcurrentChannel(v19, p2);
							if (v39 == 0) {
								int v40 = Pair.first.intValue();
								int v41 = Pair.second.intValue();
								List v42 = TvInputManagerService.getCurrentTunedInfosInternalLocked(p2, v40, v41);
								v34.onCurrentTunedInfosUpdated(v42);
								RemoteCallbackList v44 = TvInputManagerService$UserState.-$$Nest$fgetmCallbacks(p2);
								v44.finishBroadcast();
								if (p1 == 0) {
									String v48 = p1.getScheme();
									boolean v49 = "content".equals(v48);
									if (v49 == 0) {
										String v50 = p1.getAuthority();
										boolean v51 = "android.media.tv".equals(v50);
										if (v51 == 0) {
											boolean v47 = ;
											if (v47 == 0) {
												List v53 = p1.getPathSegments();
												int v54 = v53.size();
												if (v54 != 2) {
													Object v55 = v53.get(0);
													boolean v56 = "passthrough".equals(v55);
													if (v56 == 0) {
														boolean v52 = ;
														if (v52 == 0) {
															boolean v46 = ;
															if (v46 == 0) {
																boolean v57 = TvInputManagerService$SessionState.-$$Nest$fgetisRecordingSession(v19);
																if (v57 == 0) {
																	Binder.restoreCallingIdentity(v6);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ITvInputSession v8 = TvInputManagerService.getSessionLocked(p1, v1, v3);\nv8.tune(p2, p3);', 'TvInputManagerService$UserState v11 = this.this$0.getOrCreateUserStateLocked(v3);\nTvInputManagerService$SessionState v13 = this.this$0.getSessionStateLocked(p1, v1, v10);\nboolean v14 = this.isCurrent;\nif (v14 == 0) { ... }', 'SomeArgs v25 = SomeArgs.obtain();\nComponentName v26 = this.componentName;\nString v27 = v26.getPackageName();\nSomeArgs.arg1 = v27;\nlong v28 = System.currentTimeMillis();\nLong v29 = Long.valueOf(v28);\nSomeArgs.arg2 = v29;\nlong v30 = ContentUris.parseId(p2);\nLong v31 = Long.valueOf(v30);\nSomeArgs.arg3 = v31;\nSomeArgs.arg4 = p3;\nSomeArgs.arg5 = p1;\nTvInputManagerService$WatchLogHandler v32 = this.mWatchLogHandler;\nMessage v33 = v32.obtainMessage(1, v25);\nv33.sendToTarget();']

The method tune has the following similar APIs:

- API Name: isSingleSessionActive(I)Z with Similarity Score: 0.898233950138092
  - Access Control Level: SYS_OR_SIG and the following code:
TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
Map v15 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
TvInputManagerService$UserState v12 = new TvInputManagerService$UserState(this.mContext,p2,0);

- API Name: isParentalControlsEnabled(I)Z with Similarity Score: 0.8596069812774658
  - Access Control Level: NONE and the following code:
TvInputManagerService$UserState v8 = this.this$0.getOrCreateUserStateLocked(v3);
PersistentDataStore v9 = this.persistentDataStore;
boolean v10 = this.mParentalControlsEnabled;
return v10;

