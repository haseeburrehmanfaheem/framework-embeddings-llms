This is path 1 for the API with depth 2:
public void setVirtualDisplaySurface(IVirtualDisplayCallback p1, Surface p2){
	if (p2 == 0) {
		boolean v1 = p2.isSingleBuffered();
		if (v1 != 0) {
			long v2 = Binder.clearCallingIdentity();
			IBinder v3 = p1.asBinder();
			if (this.mVirtualDisplayAdapter != 0) {
				this.mVirtualDisplayAdapter.setVirtualDisplaySurfaceLocked(p2, p3);
				Binder.restoreCallingIdentity(v2);
				return;
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void setVirtualDisplaySurface(IVirtualDisplayCallback p1, Surface p2){
	if (p2 == 0) {
		boolean v1 = p2.isSingleBuffered();
		if (v1 != 0) {
			long v2 = Binder.clearCallingIdentity();
			IBinder v3 = p1.asBinder();
			this.this$0.setVirtualDisplaySurfaceInternal(v3, p2);
			Binder.restoreCallingIdentity(v2);
			return;
		}
	}
}


This is path 3 for the API with depth 0:
public void setVirtualDisplaySurface(IVirtualDisplayCallback p1, Surface p2){
	if (p2 == 0) {
		boolean v1 = p2.isSingleBuffered();
		if (v1 != 0) {
			long v2 = Binder.clearCallingIdentity();
			IBinder v3 = p1.asBinder();
			DisplayManagerService.-$$Nest$msetVirtualDisplaySurfaceInternal(this.this$0, v3, p2);
			Binder.restoreCallingIdentity(v2);
			return;
		}
	}
}
