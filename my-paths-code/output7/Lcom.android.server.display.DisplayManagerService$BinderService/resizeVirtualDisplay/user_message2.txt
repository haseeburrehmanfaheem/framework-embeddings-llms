The method resizeVirtualDisplay has the following code snippet:

This is path 1 for the API with depth 2:
public void resizeVirtualDisplay(IVirtualDisplayCallback p1, int p2, int p3, int p4){
	if (p2 <= 0) {
		if (p3 <= 0) {
			if (p4 <= 0) {
				long v1 = Binder.clearCallingIdentity();
				IBinder v2 = p1.asBinder();
				if (this.mVirtualDisplayAdapter != 0) {
					this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(p2, p3, p4, p5);
					Binder.restoreCallingIdentity(v1);
					return;
				}
			}
		}
	}
}

and the following sink code:
['this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(p2, p3, p4, p5);', 'this.this$0.resizeVirtualDisplayInternal(v2, p2, p3, p4);', 'DisplayManagerService.-$$Nest$mresizeVirtualDisplayInternal(this.this$0, v2, p2, p3, p4);']

The method resizeVirtualDisplay has the following similar APIs:

- API Name: releaseVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;)V with Similarity Score: 0.817607045173645
  - Access Control Level: NONE and the following code:
DisplayManagerService.-$$Nest$mreleaseVirtualDisplayInternal(this.this$0, v2);

- API Name: createVirtualDisplay(Landroid/hardware/display/VirtualDisplayConfig;Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;Ljava/lang/String;)I with Similarity Score: 0.8127937316894531
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = DisplayManagerService.-$$Nest$mcreateVirtualDisplayInternal(this.this$0, p1, p2, p3, 0, 0, p4);
return v1;

