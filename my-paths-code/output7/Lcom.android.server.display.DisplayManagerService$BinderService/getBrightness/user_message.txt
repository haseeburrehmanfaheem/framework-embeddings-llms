This is path 1 for the API with depth 2:
public float getBrightness(int p1){
	long v3 = Binder.clearCallingIdentity();
	DisplayManagerService$SyncRoot v4 = this.mSyncRoot;
	SparseArray v5 = this.mDisplayPowerControllers;
	Object v6 = v5.get(p1);
	if (v6 == 0) {
		float v8 = this.mBrightness;
		boolean v9 = Float.isNaN(v8);
		if (v9 == 0) {
			float v11 = MathUtils.constrain(, 0, 1065353216);
			float v10 = v11;
			float v7 = v10;
			Binder.restoreCallingIdentity(v3);
			return ;
		}
	}
}


This is path 2 for the API with depth 1:
public float getBrightness(int p1){
	long v3 = Binder.clearCallingIdentity();
	DisplayManagerService$SyncRoot v4 = this.mSyncRoot;
	SparseArray v5 = this.mDisplayPowerControllers;
	Object v6 = v5.get(p1);
	if (v6 == 0) {
		float v8 = this.mBrightnessSetting.getBrightness();
		boolean v9 = Float.isNaN(v8);
		if (v9 == 0) {
			float v10 = DisplayPowerController.clampAbsoluteBrightness();
			float v7 = v10;
			Binder.restoreCallingIdentity(v3);
			return ;
		}
	}
}


This is path 3 for the API with depth 0:
public float getBrightness(int p1){
	long v3 = Binder.clearCallingIdentity();
	DisplayManagerService$SyncRoot v4 = DisplayManagerService.-$$Nest$fgetmSyncRoot(this.this$0);
	SparseArray v5 = DisplayManagerService.-$$Nest$fgetmDisplayPowerControllers(this.this$0);
	Object v6 = v5.get(p1);
	if (v6 == 0) {
		float v7 = v6.getScreenBrightnessSetting();
		Binder.restoreCallingIdentity(v3);
		return ;
	}
}
