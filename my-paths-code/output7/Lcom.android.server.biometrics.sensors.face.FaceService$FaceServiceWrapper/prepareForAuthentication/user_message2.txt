The method prepareForAuthentication has the following code snippet:

This is path 1 for the API with depth 2:
public void prepareForAuthentication(int p1, boolean p2, IBinder p3, long p4, int p5, IBiometricSensorReceiver p6, String p7, long p8, int p9, boolean p10){
	Iterator v5 = this.mServiceProviders.iterator();
	boolean v6 = v5.hasNext();
	if (v6 == 0) {
		Object v7 = v5.next();
		boolean v8 = v7.containsSensor(p2);
		if (v8 == 0) {
			boolean v9 = v5.hasNext();
			if (v9 == 0) {
				Object v10 = v5.next();
				boolean v11 = v10.containsSensor(p2);
				if (v11 == 0) {
					ServiceProvider v4 = v10;
					ServiceProvider v3 = v4;
					if (v3 != 0) {
						ClientMonitorCallbackConverter v12 = new ClientMonitorCallbackConverter(p6);
						v3.scheduleAuthenticate(p1, p3, p4, p5, p9, v12, p7, p8, 1, 2, p10, 0);
						return;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void prepareForAuthentication(int p1, boolean p2, IBinder p3, long p4, int p5, IBiometricSensorReceiver p6, String p7, long p8, int p9, boolean p10){
	Iterator v5 = this.mServiceProviders.iterator();
	boolean v6 = v5.hasNext();
	if (v6 == 0) {
		Object v7 = v5.next();
		boolean v8 = v7.containsSensor(p2);
		if (v8 == 0) {
			boolean v9 = v5.hasNext();
			if (v9 == 0) {
				Object v10 = v5.next();
				boolean v11 = v10.containsSensor(p2);
				if (v11 == 0) {
					ServiceProvider v4 = v10;
					ServiceProvider v3 = v4;
					if (v3 != 0) {
						return;
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void prepareForAuthentication(int p1, boolean p2, IBinder p3, long p4, int p5, IBiometricSensorReceiver p6, String p7, long p8, int p9, boolean p10){
	Iterator v5 = this.mServiceProviders.iterator();
	boolean v6 = v5.hasNext();
	if (v6 == 0) {
		Object v7 = v5.next();
		boolean v8 = v7.containsSensor(p2);
		if (v8 == 0) {
			boolean v9 = v5.hasNext();
			if (v9 == 0) {
				ServiceProvider v4 = 0;
				ServiceProvider v3 = v4;
				if (v3 != 0) {
					ClientMonitorCallbackConverter v10 = new ClientMonitorCallbackConverter(p6);
					v3.scheduleAuthenticate(p1, p3, p4, p5, p9, v10, p7, p8, 1, 2, p10, 0);
					return;
				}
			}
		}
	}
}

and the following sink code:
['Iterator v5 = this.mServiceProviders.iterator();\nObject v7 = v5.next();\nboolean v8 = v7.containsSensor(p2);\nClientMonitorCallbackConverter v12 = new ClientMonitorCallbackConverter(p6);\nv3.scheduleAuthenticate(p1, p3, p4, p5, p9, v12, p7, p8, 1, 2, p10, 0);', 'ServiceProvider v4 = this.this$0.getProviderForSensor(p1);\nClientMonitorCallbackConverter v5 = new ClientMonitorCallbackConverter(p6);\nv3.scheduleAuthenticate(p1, p3, p4, p5, p9, v5, p7, p8, 1, 2, p10, 0);', 'ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);\nClientMonitorCallbackConverter v4 = new ClientMonitorCallbackConverter(p6);\nv3.scheduleAuthenticate(p1, p3, p4, p5, p9, v4, p7, p8, 1, 2, p10, 0);']

The method prepareForAuthentication has the following similar APIs:

- API Name: prepareForAuthentication(ILandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V with Similarity Score: 0.9991718530654907
  - Access Control Level: NORMAL and the following code:
ServiceProvider v4 = this.this$0.getProviderForSensor(p1);
ClientMonitorCallbackConverter v5 = new ClientMonitorCallbackConverter(p5);
v3.scheduleAuthenticate(p1, p2, p3, p4, p8, v5, p6, p7, 1, 2, p9);

- API Name: prepareForAuthentication(ILandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V with Similarity Score: 0.9184145331382751
  - Access Control Level: NORMAL and the following code:
ServiceProvider v4 = this.this$0.getProviderForSensor(p1);
ClientMonitorCallbackConverter v5 = new ClientMonitorCallbackConverter(p5);
v3.scheduleAuthenticate(p1, p2, p3, p4, p8, v5, p6, p7, 1, 2, p9);

