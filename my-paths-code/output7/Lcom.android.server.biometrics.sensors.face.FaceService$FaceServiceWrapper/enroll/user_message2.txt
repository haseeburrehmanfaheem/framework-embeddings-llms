The method enroll has the following code snippet:

This is path 1 for the API with depth 2:
public long enroll(int p1, IBinder p2, byte[] p3, IFaceServiceReceiver p4, String p5, [I p6, Surface p7, boolean p8){
	List v5 = FaceService.getSensorProperties();
	int v6 = v5.size();
	if (v6 == 1) {
		Object v7 = v5.get(0);
		Iterator v8 = this.mServiceProviders.iterator();
		boolean v9 = v8.hasNext();
		if (v9 == 0) {
			Object v10 = v8.next();
			boolean v11 = v10.containsSensor(FaceSensorPropertiesInternal.sensorId);
			if (v11 == 0) {
				boolean v12 = v8.hasNext();
				if (v12 == 0) {
					Object v13 = v8.next();
					boolean v14 = v13.containsSensor(FaceSensorPropertiesInternal.sensorId);
					if (v14 == 0) {
						Pair v15 = new Pair(v16,v13);
						Integer v16 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
						Pair v4 = v15;
						Pair v3 = v4;
						if (v3 != 0) {
							int v18 = Pair.first.intValue();
							long v19 = Pair.second.scheduleEnroll(v18, p2, p3, p1, p4, p5, p6, p7, p8);
							return v19;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public long enroll(int p1, IBinder p2, byte[] p3, IFaceServiceReceiver p4, String p5, [I p6, Surface p7, boolean p8){
	List v5 = FaceService.getSensorProperties();
	int v6 = v5.size();
	if (v6 == 1) {
		Object v7 = v5.get(0);
		Iterator v8 = this.mServiceProviders.iterator();
		boolean v9 = v8.hasNext();
		if (v9 == 0) {
			Object v10 = v8.next();
			boolean v11 = v10.containsSensor(FaceSensorPropertiesInternal.sensorId);
			if (v11 == 0) {
				boolean v12 = v8.hasNext();
				if (v12 == 0) {
					Object v13 = v8.next();
					boolean v14 = v13.containsSensor(FaceSensorPropertiesInternal.sensorId);
					if (v14 == 0) {
						Pair v15 = new Pair(v16,v13);
						Integer v16 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
						Pair v4 = v15;
						Pair v3 = v4;
						if (v3 != 0) {
							return -1;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v5 = FaceService.getSensorProperties();\nObject v10 = v8.next();\nPair v15 = new Pair(v16,v13);\nlong v19 = Pair.second.scheduleEnroll(v18, p2, p3, p1, p4, p5, p6, p7, p8);\nreturn v19;', 'Pair v4 = this.this$0.getSingleProvider();\nint v5 = Pair.first.intValue();\nlong v6 = Pair.second.scheduleEnroll(v5, p2, p3, p1, p4, p5, p6, p7, p8);\nreturn v6;', 'Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);\nint v4 = Pair.first.intValue();\nlong v5 = Pair.second.scheduleEnroll(v4, p2, p3, p1, p4, p5, p6, p7, p8);\nreturn v5;']

The method enroll has the following similar APIs:

- API Name: enroll(Landroid/os/IBinder;[BILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;I)J with Similarity Score: 0.9952419996261597
  - Access Control Level: NORMAL and the following code:
Pair v4 = this.this$0.getSingleProvider();
int v5 = Pair.first.intValue();
long v6 = Pair.second.scheduleEnroll(v5, p1, p2, p3, p4, p5, p6);

- API Name: enroll(Landroid/os/IBinder;[BILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;I)J with Similarity Score: 0.8902691602706909
  - Access Control Level: NORMAL and the following code:
Pair v4 = this.this$0.getSingleProvider();
int v5 = Pair.first.intValue();
long v6 = Pair.second.scheduleEnroll(v5, p1, p2, p3, p4, p5, p6);

