The method getPrintJobInfos has the following code snippet:

This is path 1 for the API with depth 2:
public List getPrintJobInfos(int p1, int p2){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					Object v16 = UserState.-$$Nest$fgetmLock(this.this$0);
					if (p1 != -2) {
						int v17 = this.mPrintJobsForRunningApp.size();
						if ( >= v17) {
							Object v18 = this.mPrintJobsForRunningApp.valueAt();
							if ( != 0) {
								ArrayList v19 = new ArrayList();
								boolean v21 = .addAll(v18);
								if ( >= v17) {
									if ( == 0) {
										List v15 = ;
										ArrayMap v22 = new ArrayMap();
										int v24 = v15.size();
										if ( >= v24) {
											Object v25 = v15.get();
											PrintJobId v26 = this.mId;
											Object v27 = v22.put(v26, v25);
											this.mTag = 0;
											this.mAdvancedOptions = 0;
											if ( >= v24) {
												RemotePrintSpooler.throwIfCalledOnMainThread();
												RemotePrintSpooler.throwIfDestroyedLocked();
												this.mCanUnbind = 0;
												IPrintSpooler v33 = RemotePrintSpooler.getRemoteInstanceLazy();
												List v34 = this.mGetPrintJobInfosCaller.getPrintJobInfos(v33, 0, -1, p1);
												this.mCanUnbind = 1;
												this.mLock.notifyAll();
												List v30 = v34;
												if (v30 == 0) {
													int v36 = v30.size();
													if ( >= v36) {
														Object v37 = v30.get();
														PrintJobId v38 = this.mId;
														Object v39 = v22.put(v38, v37);
														this.mTag = 0;
														this.mAdvancedOptions = 0;
														if ( >= v36) {
															ArrayList v42 = new ArrayList(v43);
															Collection v43 = v22.values();
															List v14 = v42;
															Binder.restoreCallingIdentity(v13);
															return v14;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public List getPrintJobInfos(int p1, int p2){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					Object v16 = UserState.-$$Nest$fgetmLock(this.this$0);
					if (p1 != -2) {
						int v17 = this.mPrintJobsForRunningApp.size();
						if ( >= v17) {
							Object v18 = this.mPrintJobsForRunningApp.valueAt();
							if ( != 0) {
								ArrayList v19 = new ArrayList();
								boolean v21 = .addAll(v18);
								if ( >= v17) {
									if ( == 0) {
										List v22 = Collections.emptyList();
										List v15 = v22;
										ArrayMap v23 = new ArrayMap();
										int v25 = v15.size();
										if ( >= v25) {
											Object v26 = v15.get();
											PrintJobId v27 = this.mId;
											Object v28 = v23.put(v27, v26);
											this.mTag = 0;
											this.mAdvancedOptions = 0;
											if ( >= v25) {
												RemotePrintSpooler.throwIfCalledOnMainThread();
												RemotePrintSpooler.throwIfDestroyedLocked();
												this.mCanUnbind = 0;
												IPrintSpooler v34 = RemotePrintSpooler.getRemoteInstanceLazy();
												List v35 = this.mGetPrintJobInfosCaller.getPrintJobInfos(v34, 0, -1, p1);
												this.mCanUnbind = 1;
												this.mLock.notifyAll();
												List v31 = v35;
												if (v31 == 0) {
													int v37 = v31.size();
													if ( >= v37) {
														Object v38 = v31.get();
														PrintJobId v39 = this.mId;
														Object v40 = v23.put(v39, v38);
														this.mTag = 0;
														this.mAdvancedOptions = 0;
														if ( >= v37) {
															ArrayList v43 = new ArrayList(v44);
															Collection v44 = v23.values();
															List v14 = v43;
															Binder.restoreCallingIdentity(v13);
															return v14;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v9 = this.mPrintJobForAppCache.getPrintJobs(v4);\nArrayMap v10 = new ArrayMap();\nObject v13 = v9.get();\nPrintJobId v14 = v13.getId();\nObject v15 = v10.put(v14, v13);\nreturn v8;', 'UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);\nthis.mUserStates.put(p1, v9);']

The method getPrintJobInfos has the following similar APIs:

- API Name: validatePrinters(Ljava/util/List;I)V with Similarity Score: 1.0
  - Access Control Level: NONE and the following code:
UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
this.mUserStates.put(p1, v9);

- API Name: stopPrinterStateTracking(Landroid/print/PrinterId;I)V with Similarity Score: 1.0
  - Access Control Level: NONE and the following code:
UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
this.mUserStates.put(p1, v9);

