The method restartPrintJob has the following code snippet:

This is path 1 for the API with depth 2:
public void restartPrintJob(PrintJobId p1, int p2, int p3){
	if (1 == 0) {
		boolean v8 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v8 == 0) {
			Object v9 = this.mUserStates.get(p1);
			if (v9 != 0) {
				UserState v10 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v10);
				if (p2 != 0) {
					.increasePriority();
					UserState v7 = ;
					UserState v6 = v7;
					long v14 = Binder.clearCallingIdentity();
					PrintJobInfo v17 = this.mPrintJobForAppCache.getPrintJob(p1, p2);
					if (v17 != 0) {
						PrintJobInfo v18 = this.mSpooler.getPrintJobInfo(p1, p2);
						if ( == 0) {
							.setTag(0);
							.setAdvancedOptions(0);
							PrintJobInfo v16 = ;
							if (v16 == 0) {
								int v21 = this.mState;
								if (v21 == 6) {
									RemotePrintSpooler.throwIfCalledOnMainThread();
									RemotePrintSpooler.throwIfDestroyedLocked();
									this.mCanUnbind = 0;
									IPrintSpooler v25 = RemotePrintSpooler.getRemoteInstanceLazy();
									boolean v26 = this.mSetPrintJobStatusCaller.setPrintJobState(v25, p1, 2, 0);
									this.mCanUnbind = 1;
									this.mLock.notifyAll();
									boolean v22 = v26;
									Binder.restoreCallingIdentity(v14);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void restartPrintJob(PrintJobId p1, int p2, int p3){
	if (1 == 0) {
		boolean v8 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v8 == 0) {
			Object v9 = this.mUserStates.get(p1);
			if (v9 != 0) {
				UserState v10 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v10);
				if (p2 != 0) {
					.increasePriority();
					UserState v7 = ;
					UserState v6 = v7;
					long v14 = Binder.clearCallingIdentity();
					PrintJobInfo v17 = this.mPrintJobForAppCache.getPrintJob(p1, p2);
					if (v17 != 0) {
						PrintJobInfo v18 = this.mSpooler.getPrintJobInfo(p1, p2);
						if ( == 0) {
							.setTag(0);
							.setAdvancedOptions(0);
							PrintJobInfo v16 = ;
							if (v16 == 0) {
								int v21 = this.mState;
								if (v21 == 6) {
									Binder.restoreCallingIdentity(v14);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['UserState v10 = new UserState(this.mContext,p1,this.mLock,p2);\nthis.mPrintJobForAppCache.getPrintJob(p1, p2);\nthis.mSpooler.getPrintJobInfo(p1, p2);', 'UserState v7 = PrintManagerService$PrintManagerImpl.getOrCreateUserStateLocked(v2, 0, 1);\nUserState v6 = v7;\nPrintJobInfo v10 = UserState.getPrintJobInfo(p1, v5);\nthis.mSpooler.setPrintJobState(p1, 2, 0);', 'UserState v6 = p0.getOrCreateUserStateLocked(v2, 0);\nv6.restartPrintJob(p1, v5);']

The method restartPrintJob has the following similar APIs:

- API Name: cancelPrintJob(Landroid/print/PrintJobId;II)V with Similarity Score: 0.9529328942298889
  - Access Control Level: SYS_OR_SIG and the following code:
UserState v6 = PrintManagerService$PrintManagerImpl.getOrCreateUserStateLocked(v1, 0, 1);
long v7 = Binder.clearCallingIdentity();
PrintJobInfo v9 = this.mSpooler.getPrintJobInfo(p1, v4);
this.mSpooler.setPrintJobCancelling(p1, 1);

- API Name: removePrintJobStateChangeListener(Landroid/print/IPrintJobStateChangeListener;I)V with Similarity Score: 0.8934059143066406
  - Access Control Level: NONE and the following code:
UserState v5 = p0.getOrCreateUserStateLocked(v2, 0);
v5.removePrintJobStateChangeListener(p1);

