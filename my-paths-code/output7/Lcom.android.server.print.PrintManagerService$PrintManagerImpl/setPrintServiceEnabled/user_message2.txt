The method setPrintServiceEnabled has the following code snippet:

This is path 1 for the API with depth 2:
public void setPrintServiceEnabled(ComponentName p1, boolean p2, int p3){
	if (1 == 0) {
		boolean v12 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v12 == 0) {
			Object v13 = this.mUserStates.get(p1);
			if (v13 != 0) {
				UserState v14 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v14);
				if (p2 != 0) {
					.increasePriority();
					UserState v11 = ;
					UserState v10 = v11;
					long v18 = Binder.clearCallingIdentity();
					if (p2 == 0) {
						int v20 = this.mInstalledServices.size();
						if ( >= v20) {
							Object v21 = this.mInstalledServices.get();
							ComponentName v23 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
							ComponentName v22 = v23;
							boolean v25 = v22.equals(p1);
							if (v25 == 0) {
								if ( >= v20) {
									Object v26 = this.mInstalledServices.get();
									ComponentName v28 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
									ComponentName v27 = v28;
									boolean v30 = v27.equals(p1);
									if (v30 == 0) {
										boolean v31 = this.mDisabledServices.add(p1);
										if ( == 0) {
											StringBuilder v33 = new StringBuilder();
											Iterator v35 = this.mDisabledServices.iterator();
											boolean v36 = v35.hasNext();
											if (v36 == 0) {
												Object v37 = v35.next();
												int v38 = v33.length();
												if (v38 <= 0) {
													StringBuilder v39 = v33.append(58);
													String v40 = v37.flattenToShortString();
													StringBuilder v41 = v33.append(v40);
													boolean v42 = v35.hasNext();
													if (v42 == 0) {
														ContentResolver v43 = this.mContext.getContentResolver();
														String v44 = v33.toString();
														boolean v45 = Settings$Secure.putStringForUser(v43, "disabled_print_services", v44, this.mUserId);
														if (p2 == 0) {
															MetricsLogger.action(this.mContext, 511, );
															ArrayList v48 = UserState.getInstalledComponents();
															int v49 = v48.size();
															if ( >= v49) {
																Object v50 = v48.get();
																boolean v51 = this.mDisabledServices.contains(v50);
																if (v51 != 0) {
																	boolean v52 = this.mActiveServices.containsKey(v50);
																	if (v52 != 0) {
																		RemotePrintService v53 = new RemotePrintService(this.mContext,v50,this.mUserId,this.mSpooler,UserState);
																		UserState.addServiceLocked(v53);
																		if ( >= v49) {
																			Set v56 = this.mActiveServices.entrySet();
																			Iterator v57 = v56.iterator();
																			boolean v58 = v57.hasNext();
																			if (v58 == 0) {
																				Object v59 = v57.next();
																				Object v60 = v59.getKey();
																				Object v61 = v59.getValue();
																				boolean v62 = v48.contains(v60);
																				if (v62 != 0) {
																					UserState.removeServiceLocked(v61);
																					v57.remove();
																					boolean v65 = v57.hasNext();
																					if (v65 == 0) {
																						UserState.onPrintServicesChanged();
																						Binder.restoreCallingIdentity(v18);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setPrintServiceEnabled(ComponentName p1, boolean p2, int p3){
	if (1 == 0) {
		boolean v12 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v12 == 0) {
			Object v13 = this.mUserStates.get(p1);
			if (v13 != 0) {
				UserState v14 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v14);
				if (p2 != 0) {
					.increasePriority();
					UserState v11 = ;
					UserState v10 = v11;
					long v18 = Binder.clearCallingIdentity();
					if (p2 == 0) {
						boolean v20 = this.mDisabledServices.remove(p1);
						if ( == 0) {
							StringBuilder v22 = new StringBuilder();
							Iterator v24 = this.mDisabledServices.iterator();
							boolean v25 = v24.hasNext();
							if (v25 == 0) {
								Object v26 = v24.next();
								int v27 = v22.length();
								if (v27 <= 0) {
									StringBuilder v28 = v22.append(58);
									String v29 = v26.flattenToShortString();
									StringBuilder v30 = v22.append(v29);
									boolean v31 = v24.hasNext();
									if (v31 == 0) {
										ContentResolver v32 = this.mContext.getContentResolver();
										String v33 = v22.toString();
										boolean v34 = Settings$Secure.putStringForUser(v32, "disabled_print_services", v33, this.mUserId);
										if (p2 == 0) {
											MetricsLogger.action(this.mContext, 511, );
											ArrayList v37 = UserState.getInstalledComponents();
											int v38 = v37.size();
											if ( >= v38) {
												Object v39 = v37.get();
												boolean v40 = this.mDisabledServices.contains(v39);
												if (v40 != 0) {
													boolean v41 = this.mActiveServices.containsKey(v39);
													if (v41 != 0) {
														RemotePrintService v42 = new RemotePrintService(this.mContext,v39,this.mUserId,this.mSpooler,UserState);
														UserState.addServiceLocked(v42);
														if ( >= v38) {
															Set v45 = this.mActiveServices.entrySet();
															Iterator v46 = v45.iterator();
															boolean v47 = v46.hasNext();
															if (v47 == 0) {
																Object v48 = v46.next();
																Object v49 = v48.getKey();
																Object v50 = v48.getValue();
																boolean v51 = v37.contains(v49);
																if (v51 != 0) {
																	UserState.removeServiceLocked(v50);
																	v46.remove();
																	boolean v54 = v46.hasNext();
																	if (v54 == 0) {
																		UserState.onPrintServicesChanged();
																		Binder.restoreCallingIdentity(v18);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v12 = this.mUserManager.isUserUnlockingOrUnlocked(p1);\nObject v13 = this.mUserStates.get(p1);\nUserState v14 = new UserState(this.mContext, p1, this.mLock, p2);\nthis.mUserStates.put(p1, v14);', 'UserState v11 = PrintManagerService$PrintManagerImpl.getOrCreateUserStateLocked(v1, 0, 1);\nboolean v21 = this.mDisabledServices.add(p1);\nUserState.writeDisabledPrintServicesLocked(this.mDisabledServices);', 'v10.setPrintServiceEnabled(p1, p2);']

The method setPrintServiceEnabled has the following similar APIs:

- API Name: stopPrinterDiscovery(Landroid/print/IPrinterDiscoveryObserver;I)V with Similarity Score: 0.9859659671783447
  - Access Control Level: NONE and the following code:
boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
Object v8 = this.mUserStates.get(p1);
UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
this.mUserStates.put(p1, v9);

- API Name: destroyPrinterDiscoverySession(Landroid/print/IPrinterDiscoveryObserver;I)V with Similarity Score: 0.9859659671783447
  - Access Control Level: NONE and the following code:
boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
Object v8 = this.mUserStates.get(p1);
UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
this.mUserStates.put(p1, v9);

