The method getPrintJobInfo has the following code snippet:

This is path 1 for the API with depth 2:
public PrintJobInfo getPrintJobInfo(PrintJobId p1, int p2, int p3){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					Object v16 = UserState.-$$Nest$fgetmLock(this.this$0);
					Object v17 = this.mPrintJobsForRunningApp.get(p2);
					if (v17 != 0) {
						int v18 = v17.size();
						if ( >= v18) {
							Object v19 = v17.get();
							PrintJobId v20 = v19.getId();
							boolean v21 = v20.equals(p1);
							if (v21 == 0) {
								if ( >= v18) {
									Object v22 = v17.get();
									PrintJobId v23 = v22.getId();
									boolean v24 = v23.equals(p1);
									if (v24 == 0) {
										PrintJobInfo v15 = v22;
										if (v15 != 0) {
											RemotePrintSpooler.throwIfCalledOnMainThread();
											RemotePrintSpooler.throwIfDestroyedLocked();
											this.mCanUnbind = 0;
											IPrintSpooler v28 = RemotePrintSpooler.getRemoteInstanceLazy();
											PrintJobInfo v29 = this.mGetPrintJobInfoCaller.getPrintJobInfo(v28, p1, p2);
											this.mCanUnbind = 1;
											this.mLock.notifyAll();
											PrintJobInfo v25 = v29;
											if ( == 0) {
												this.mTag = 0;
												this.mAdvancedOptions = 0;
												PrintJobInfo v14 = ;
												Binder.restoreCallingIdentity(v13);
												return v14;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public PrintJobInfo getPrintJobInfo(PrintJobId p1, int p2, int p3){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					Object v16 = UserState.-$$Nest$fgetmLock(this.this$0);
					Object v17 = this.mPrintJobsForRunningApp.get(p2);
					if (v17 != 0) {
						int v18 = v17.size();
						if ( >= v18) {
							Object v19 = v17.get();
							PrintJobId v20 = v19.getId();
							boolean v21 = v20.equals(p1);
							if (v21 == 0) {
								if ( >= v18) {
									PrintJobInfo v15 = 0;
									if (v15 != 0) {
										RemotePrintSpooler.throwIfCalledOnMainThread();
										RemotePrintSpooler.throwIfDestroyedLocked();
										this.mCanUnbind = 0;
										IPrintSpooler v25 = RemotePrintSpooler.getRemoteInstanceLazy();
										PrintJobInfo v26 = this.mGetPrintJobInfoCaller.getPrintJobInfo(v25, p1, p2);
										this.mCanUnbind = 1;
										this.mLock.notifyAll();
										PrintJobInfo v22 = v26;
										if ( == 0) {
											this.mTag = 0;
											this.mAdvancedOptions = 0;
											PrintJobInfo v14 = ;
											Binder.restoreCallingIdentity(v13);
											return v14;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public PrintJobInfo getPrintJobInfo(PrintJobId p1, int p2, int p3){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					Object v16 = UserState.-$$Nest$fgetmLock(this.this$0);
					Object v17 = this.mPrintJobsForRunningApp.get(p2);
					if (v17 != 0) {
						PrintJobInfo v15 = 0;
						if (v15 != 0) {
							RemotePrintSpooler.throwIfCalledOnMainThread();
							RemotePrintSpooler.throwIfDestroyedLocked();
							this.mCanUnbind = 0;
							IPrintSpooler v21 = RemotePrintSpooler.getRemoteInstanceLazy();
							PrintJobInfo v22 = this.mGetPrintJobInfoCaller.getPrintJobInfo(v21, p1, p2);
							this.mCanUnbind = 1;
							this.mLock.notifyAll();
							PrintJobInfo v18 = v22;
							if ( == 0) {
								this.mTag = 0;
								this.mAdvancedOptions = 0;
								PrintJobInfo v14 = ;
								Binder.restoreCallingIdentity(v13);
								return v14;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['PrintJobInfo v29 = this.mGetPrintJobInfoCaller.getPrintJobInfo(v28, p1, p2);\nthis.mCanUnbind = 0;\nIPrintSpooler v28 = RemotePrintSpooler.getRemoteInstanceLazy();\nthis.mLock.notifyAll();', 'PrintJobInfo v9 = this.mPrintJobForAppCache.getPrintJob(p1, v4);\nPrintJobInfo v10 = this.mSpooler.getPrintJobInfo(p1, v4);\n.setTag(0);\n.setAdvancedOptions(0);', 'UserState v5 = p0.getOrCreateUserStateLocked(v1, 0);\nlong v6 = Binder.clearCallingIdentity();\nPrintJobInfo v7 = v5.getPrintJobInfo(p1, v4);\nBinder.restoreCallingIdentity(v6);']

The method getPrintJobInfo has the following similar APIs:

- API Name: getPrintJobInfos(II)Ljava/util/List; with Similarity Score: 0.8601506948471069
  - Access Control Level: SYS_OR_SIG and the following code:
List v9 = this.mPrintJobForAppCache.getPrintJobs(v4);
ArrayMap v10 = new ArrayMap();
Object v13 = v9.get();
PrintJobId v14 = v13.getId();
Object v15 = v10.put(v14, v13);
return v8;

- API Name: cancelPrintJob(Landroid/print/PrintJobId;II)V with Similarity Score: 0.8255113959312439
  - Access Control Level: SYS_OR_SIG and the following code:
UserState v6 = PrintManagerService$PrintManagerImpl.getOrCreateUserStateLocked(v1, 0, 1);
long v7 = Binder.clearCallingIdentity();
PrintJobInfo v9 = this.mSpooler.getPrintJobInfo(p1, v4);
this.mSpooler.setPrintJobCancelling(p1, 1);

