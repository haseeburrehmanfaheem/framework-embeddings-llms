This is path 1 for the API with depth 2:
public void createSession(ComponentName p1, IBinder p2, boolean p3, IRecognitionServiceManagerCallback p4){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.getServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (AbstractMasterSystemService.debug == 0) {
		Boolean v7 = Boolean.valueOf(p3);
		if (p3 == 0) {
			String v11 = SpeechRecognitionManagerServiceImpl.getComponentNameLocked();
			if (AbstractMasterSystemService.debug == 0) {
				if (v11 != 0) {
					ComponentName v18 = ComponentName.unflattenFromString(v11);
					ComponentName v10 = v18;
					if ( != 0) {
						int v19 = Binder.getCallingUid();
						Integer v21 = Integer.valueOf(v19);
						Object v22 = this.mRemoteServicesByUid.get(v21);
						if (v22 == 0) {
							int v23 = v22.size();
							if (v23 < 10) {
								if (v22 == 0) {
									Stream v24 = v22.stream();
									SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda2 v25 = new SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda2();
									Stream v27 = v24.filter(v25);
									Optional v28 = v27.findFirst();
									boolean v29 = v28.isPresent();
									if (v29 == 0) {
										if ( == 0) {
											boolean v30 = SpeechRecognitionManagerServiceImpl.componentMapsToRecognitionService();
											if (v30 != 0) {
												RemoteSpeechRecognitionService v20 = 0;
												if (v20 != 0) {
													SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda0 v31 = new SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda0(SpeechRecognitionManagerServiceImpl,v19,v20);
													p2.linkToDeath(v31, 0);
													if (this.mServiceConnectionFutureCache != 0) {
														ServiceConnector$Impl$CompletionAwareJob v35 = new ServiceConnector$Impl$CompletionAwareJob(ServiceConnector$Impl);
														this.mServiceConnectionFutureCache = v35;
														ServiceConnector$Impl$$ExternalSyntheticLambda0 v37 = new ServiceConnector$Impl$$ExternalSyntheticLambda0();
														ServiceConnector$Impl$CompletionAwareJob.mDelegate = v37;
														if (this.mService == 0) {
															boolean v39 = this.mServiceConnectionFutureCache.complete(this.mService);
															AndroidFuture v34 = this.mServiceConnectionFutureCache;
															SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda1 v40 = new SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda1(SpeechRecognitionManagerServiceImpl,p4,v20,v19,p2,v31);
															CompletableFuture v42 = v34.thenAccept(v40);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void createSession(ComponentName p1, IBinder p2, boolean p3, IRecognitionServiceManagerCallback p4){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.getServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (AbstractMasterSystemService.debug == 0) {
		Boolean v7 = Boolean.valueOf(p3);
		if (p3 == 0) {
			ComponentName v10 = SpeechRecognitionManagerServiceImpl.getOnDeviceComponentNameLocked();
			if ( != 0) {
				int v11 = Binder.getCallingUid();
				RemoteSpeechRecognitionService v12 = SpeechRecognitionManagerServiceImpl.createService(v11, );
				if (v12 != 0) {
					SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda0 v13 = new SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda0(SpeechRecognitionManagerServiceImpl,v11,v12);
					p2.linkToDeath(v13, 0);
					AndroidFuture v16 = v12.connect();
					SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda1 v17 = new SpeechRecognitionManagerServiceImpl$$ExternalSyntheticLambda1(SpeechRecognitionManagerServiceImpl,p4,v12,v11,p2,v13);
					CompletableFuture v19 = v16.thenAccept(v17);
					return;
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void createSession(ComponentName p1, IBinder p2, boolean p3, IRecognitionServiceManagerCallback p4){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = SpeechRecognitionManagerService.access$000(this.this$0);
	AbstractPerUserSystemService v3 = SpeechRecognitionManagerService.access$100(this.this$0, v1);
	v3.createSessionLocked(p1, p2, p3, p4);
	return;
}
