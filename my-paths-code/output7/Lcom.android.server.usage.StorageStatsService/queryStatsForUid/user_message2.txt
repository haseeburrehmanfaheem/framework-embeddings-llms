The method queryStatsForUid has the following code snippet:

This is path 1 for the API with depth 2:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if ( >= v9.length) {
			PackageStats v12 = new PackageStats("StorageStatsService");
			boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
			if (v15 == 0) {
				int v14 = 0;
				if (this.mWarnIfHeld == 0) {
					boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
					if (v18 == 0) {
						Thread v22 = Thread.currentThread();
						String v23 = v22.getName();
						int v26 = System.identityHashCode(this.mWarnIfHeld);
						String v27 = Integer.toHexString(v26);
						if (this.mIsolated == 0) {
							boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
							if (v33 == 0) {
								Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
								boolean v17 = 1;
								if (v17 != 0) {
									if ( == 0) {
										if ( >= .length) {
											BlockGuard$VmPolicy v36 = BlockGuard.getVmPolicy();
											v36.onPathAccess([]);
											if ( >= .length) {
												[J v38 = this.mInstalld.getAppSize(p1, v9, v1, v14, v2, v10, );
												PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
												PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
												PackageStats.cacheSize = (PackageStats.cacheSize + v38[2]);
												PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v38[3]);
												PackageStats.externalDataSize = (PackageStats.externalDataSize + v38[4]);
												PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v38[5]);
												boolean v39 = SystemProperties.getBoolean("fw.verify_storage", 0);
												if (v39 == 0) {
													PackageStats v40 = new PackageStats("StorageStatsService");
													if (this.mWarnIfHeld == 0) {
														boolean v44 = Thread.holdsLock(this.mWarnIfHeld);
														if (v44 == 0) {
															Thread v48 = Thread.currentThread();
															String v49 = v48.getName();
															int v52 = System.identityHashCode(this.mWarnIfHeld);
															String v53 = Integer.toHexString(v52);
															if (this.mIsolated == 0) {
																boolean v59 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
																if (v59 == 0) {
																	Installer$InstallerException v60 = new Installer$InstallerException("time out waiting for the installer to be ready");
																	boolean v43 = 1;
																	if (v43 != 0) {
																		if ( == 0) {
																			if ( >= .length) {
																				BlockGuard$VmPolicy v62 = BlockGuard.getVmPolicy();
																				v62.onPathAccess([]);
																				if ( >= .length) {
																					[J v64 = this.mInstalld.getAppSize(p1, v9, v1, 0, v2, v10, );
																					PackageStats.codeSize = (PackageStats.codeSize + v64[0]);
																					PackageStats.dataSize = (PackageStats.dataSize + v64[1]);
																					PackageStats.cacheSize = (PackageStats.cacheSize + v64[2]);
																					PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v64[3]);
																					PackageStats.externalDataSize = (PackageStats.externalDataSize + v64[4]);
																					PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v64[5]);
																					StringBuilder v65 = new StringBuilder();
																					StringBuilder v67 = v65.append("UID ");
																					StringBuilder v68 = v65.append(p2);
																					String v69 = v65.toString();
																					StringBuilder v71 = new StringBuilder();
																					StringBuilder v73 = v71.append(v69);
																					StringBuilder v74 = v71.append(" codeSize");
																					String v75 = v71.toString();
																					if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																						StringBuilder v77 = new StringBuilder();
																						StringBuilder v79 = v77.append(v69);
																						StringBuilder v80 = v77.append(" dataSize");
																						String v81 = v77.toString();
																						if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																							StringBuilder v83 = new StringBuilder();
																							StringBuilder v85 = v83.append(v69);
																							StringBuilder v86 = v83.append(" cacheSize");
																							String v87 = v83.toString();
																							if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																								StringBuilder v89 = new StringBuilder();
																								StringBuilder v91 = v89.append(v69);
																								StringBuilder v92 = v89.append(" externalCodeSize");
																								String v93 = v89.toString();
																								if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																									StringBuilder v95 = new StringBuilder();
																									StringBuilder v97 = v95.append(v69);
																									StringBuilder v98 = v95.append(" externalDataSize");
																									String v99 = v95.toString();
																									if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																										StringBuilder v101 = new StringBuilder();
																										StringBuilder v103 = v101.append(v69);
																										StringBuilder v104 = v101.append(" externalCacheSize");
																										String v105 = v101.toString();
																										if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																											if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																												StorageStatsService$$ExternalSyntheticLambda2 v107 = new StorageStatsService$$ExternalSyntheticLambda2(v12,p2,);
																												p0.forEachStorageStatsAugmenter(v107, "queryStatsForUid");
																												StorageStats v110 = StorageStatsService.translate(v12);
																												return v110;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if ( >= v9.length) {
			PackageStats v12 = new PackageStats("StorageStatsService");
			boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
			if (v15 == 0) {
				int v14 = 4096;
				if (this.mWarnIfHeld == 0) {
					boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
					if (v18 == 0) {
						Thread v22 = Thread.currentThread();
						String v23 = v22.getName();
						int v26 = System.identityHashCode(this.mWarnIfHeld);
						String v27 = Integer.toHexString(v26);
						if (this.mIsolated == 0) {
							boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
							if (v33 == 0) {
								Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
								boolean v17 = 1;
								if (v17 != 0) {
									if ( == 0) {
										if ( >= .length) {
											BlockGuard$VmPolicy v36 = BlockGuard.getVmPolicy();
											v36.onPathAccess([]);
											if ( >= .length) {
												[J v38 = this.mInstalld.getAppSize(p1, v9, v1, v14, v2, v10, );
												PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
												PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
												PackageStats.cacheSize = (PackageStats.cacheSize + v38[2]);
												PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v38[3]);
												PackageStats.externalDataSize = (PackageStats.externalDataSize + v38[4]);
												PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v38[5]);
												boolean v39 = SystemProperties.getBoolean("fw.verify_storage", 0);
												if (v39 == 0) {
													PackageStats v40 = new PackageStats("StorageStatsService");
													if (this.mWarnIfHeld == 0) {
														boolean v44 = Thread.holdsLock(this.mWarnIfHeld);
														if (v44 == 0) {
															Thread v48 = Thread.currentThread();
															String v49 = v48.getName();
															int v52 = System.identityHashCode(this.mWarnIfHeld);
															String v53 = Integer.toHexString(v52);
															if (this.mIsolated == 0) {
																boolean v59 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
																if (v59 == 0) {
																	Installer$InstallerException v60 = new Installer$InstallerException("time out waiting for the installer to be ready");
																	boolean v43 = 1;
																	if (v43 != 0) {
																		if ( == 0) {
																			if ( >= .length) {
																				BlockGuard$VmPolicy v62 = BlockGuard.getVmPolicy();
																				v62.onPathAccess([]);
																				if ( >= .length) {
																					[J v64 = this.mInstalld.getAppSize(p1, v9, v1, 0, v2, v10, );
																					PackageStats.codeSize = (PackageStats.codeSize + v64[0]);
																					PackageStats.dataSize = (PackageStats.dataSize + v64[1]);
																					PackageStats.cacheSize = (PackageStats.cacheSize + v64[2]);
																					PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v64[3]);
																					PackageStats.externalDataSize = (PackageStats.externalDataSize + v64[4]);
																					PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v64[5]);
																					StringBuilder v65 = new StringBuilder();
																					StringBuilder v67 = v65.append("UID ");
																					StringBuilder v68 = v65.append(p2);
																					String v69 = v65.toString();
																					StringBuilder v71 = new StringBuilder();
																					StringBuilder v73 = v71.append(v69);
																					StringBuilder v74 = v71.append(" codeSize");
																					String v75 = v71.toString();
																					if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																						StringBuilder v77 = new StringBuilder();
																						StringBuilder v79 = v77.append(v69);
																						StringBuilder v80 = v77.append(" dataSize");
																						String v81 = v77.toString();
																						if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																							StringBuilder v83 = new StringBuilder();
																							StringBuilder v85 = v83.append(v69);
																							StringBuilder v86 = v83.append(" cacheSize");
																							String v87 = v83.toString();
																							if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																								StringBuilder v89 = new StringBuilder();
																								StringBuilder v91 = v89.append(v69);
																								StringBuilder v92 = v89.append(" externalCodeSize");
																								String v93 = v89.toString();
																								if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																									StringBuilder v95 = new StringBuilder();
																									StringBuilder v97 = v95.append(v69);
																									StringBuilder v98 = v95.append(" externalDataSize");
																									String v99 = v95.toString();
																									if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																										StringBuilder v101 = new StringBuilder();
																										StringBuilder v103 = v101.append(v69);
																										StringBuilder v104 = v101.append(" externalCacheSize");
																										String v105 = v101.toString();
																										if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																											if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																												StorageStatsService$$ExternalSyntheticLambda2 v107 = new StorageStatsService$$ExternalSyntheticLambda2(v12,p2,);
																												p0.forEachStorageStatsAugmenter(v107, "queryStatsForUid");
																												StorageStats v110 = StorageStatsService.translate(v12);
																												return v110;
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if ( >= v9.length) {
			PackageStats v12 = new PackageStats("StorageStatsService");
			boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
			if (v15 == 0) {
				int v14 = 0;
				if (this.mWarnIfHeld == 0) {
					boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
					if (v18 == 0) {
						Thread v22 = Thread.currentThread();
						String v23 = v22.getName();
						int v26 = System.identityHashCode(this.mWarnIfHeld);
						String v27 = Integer.toHexString(v26);
						if (this.mIsolated == 0) {
							boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
							if (v33 == 0) {
								Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
								boolean v17 = 1;
								if (v17 != 0) {
									if ( == 0) {
										if ( >= .length) {
											BlockGuard$VmPolicy v36 = BlockGuard.getVmPolicy();
											v36.onPathAccess([]);
											if ( >= .length) {
												[J v38 = this.mInstalld.getAppSize(p1, v9, v1, v14, v2, v10, );
												PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
												PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
												PackageStats.cacheSize = (PackageStats.cacheSize + v38[2]);
												PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v38[3]);
												PackageStats.externalDataSize = (PackageStats.externalDataSize + v38[4]);
												PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v38[5]);
												boolean v39 = SystemProperties.getBoolean("fw.verify_storage", 0);
												if (v39 == 0) {
													PackageStats v40 = new PackageStats("StorageStatsService");
													if (this.mWarnIfHeld == 0) {
														boolean v44 = Thread.holdsLock(this.mWarnIfHeld);
														if (v44 == 0) {
															Thread v48 = Thread.currentThread();
															String v49 = v48.getName();
															int v52 = System.identityHashCode(this.mWarnIfHeld);
															String v53 = Integer.toHexString(v52);
															if (this.mIsolated == 0) {
																boolean v59 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
																if (v59 == 0) {
																	Installer$InstallerException v60 = new Installer$InstallerException("time out waiting for the installer to be ready");
																	boolean v43 = 1;
																	if (v43 != 0) {
																		StringBuilder v62 = new StringBuilder();
																		StringBuilder v64 = v62.append("UID ");
																		StringBuilder v65 = v62.append(p2);
																		String v66 = v62.toString();
																		StringBuilder v68 = new StringBuilder();
																		StringBuilder v70 = v68.append(v66);
																		StringBuilder v71 = v68.append(" codeSize");
																		String v72 = v68.toString();
																		if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																			StringBuilder v74 = new StringBuilder();
																			StringBuilder v76 = v74.append(v66);
																			StringBuilder v77 = v74.append(" dataSize");
																			String v78 = v74.toString();
																			if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																				StringBuilder v80 = new StringBuilder();
																				StringBuilder v82 = v80.append(v66);
																				StringBuilder v83 = v80.append(" cacheSize");
																				String v84 = v80.toString();
																				if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																					StringBuilder v86 = new StringBuilder();
																					StringBuilder v88 = v86.append(v66);
																					StringBuilder v89 = v86.append(" externalCodeSize");
																					String v90 = v86.toString();
																					if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																						StringBuilder v92 = new StringBuilder();
																						StringBuilder v94 = v92.append(v66);
																						StringBuilder v95 = v92.append(" externalDataSize");
																						String v96 = v92.toString();
																						if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																							StringBuilder v98 = new StringBuilder();
																							StringBuilder v100 = v98.append(v66);
																							StringBuilder v101 = v98.append(" externalCacheSize");
																							String v102 = v98.toString();
																							if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																								if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																									StorageStatsService$$ExternalSyntheticLambda2 v104 = new StorageStatsService$$ExternalSyntheticLambda2(v12,p2,);
																									p0.forEachStorageStatsAugmenter(v104, "queryStatsForUid");
																									StorageStats v107 = StorageStatsService.translate(v12);
																									return v107;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['String v8 = this.mPackage.getPackagesForUid(p2);\nString v9 = ArrayUtils.defeatNullable(v8);\n[J v10 = new [J(v9.length);\nPackageStats v12 = new PackageStats("StorageStatsService");\n[J v38 = this.mInstalld.getAppSize(p1, v9, v1, v14, v2, v10, );\nPackageStats.codeSize = (PackageStats.codeSize + v38[0]);\nPackageStats.dataSize = (PackageStats.dataSize + v38[1]);\nStorageStats v110 = StorageStatsService.translate(v12);\nreturn v110;', 'int v6 = Binder.getCallingUid();\nApplicationInfo v12 = this.mPackage.getApplicationInfoAsUser(v9[], 8192, v1);\nthis.mInstaller.getAppSize(p1, v9, v1, v18, v2, v10, , v16);\nStorageStats v21 = StorageStatsService.translate(v16);\nreturn v21;']

The method queryStatsForUid has the following similar APIs:

- API Name: queryStatsForUser(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.9168801307678223
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = Binder.getCallingUid();
[I v5 = p0.getAppIds(p2);
this.mInstaller.getUserSize(p1, p2, v8, v5, v6);
StorageStats v24 = StorageStatsService.translate(v6);
return v24;

- API Name: queryStatsForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.8500140905380249
  - Access Control Level: SYS_OR_SIG and the following code:
PackageStats v17 = new PackageStats("StorageStatsService");
[J v23 = this.mInstalld.getAppSize(p1, v10, p3, 0, v9, v11, );
PackageStats.codeSize = (PackageStats.codeSize + v23[0]);
PackageStats.dataSize = (PackageStats.dataSize + v23[1]);
PackageStats.cacheSize = (PackageStats.cacheSize + v23[2]);
PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v23[3]);
PackageStats.externalDataSize = (PackageStats.externalDataSize + v23[4]);
PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v23[5]);

