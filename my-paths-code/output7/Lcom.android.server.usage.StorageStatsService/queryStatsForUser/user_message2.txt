The method queryStatsForUser has the following code snippet:

This is path 1 for the API with depth 2:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(, v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(, v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = ;
				PackageStats v14 = new PackageStats("StorageStatsService");
				boolean v17 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v17 == 0) {
					int v16 = 0;
					if (this.mWarnIfHeld == 0) {
						boolean v20 = Thread.holdsLock(this.mWarnIfHeld);
						if (v20 == 0) {
							Thread v24 = Thread.currentThread();
							String v25 = v24.getName();
							int v28 = System.identityHashCode(this.mWarnIfHeld);
							String v29 = Integer.toHexString(v28);
							if (this.mIsolated == 0) {
								boolean v35 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v35 == 0) {
									Installer$InstallerException v36 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v19 = 1;
									if (v19 != 0) {
										[J v38 = this.mInstalld.getUserSize(p1, p2, v16, v5);
										PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
										PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
										PackageStats.cacheSize = (PackageStats.cacheSize + v38[2]);
										PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v38[3]);
										PackageStats.externalDataSize = (PackageStats.externalDataSize + v38[4]);
										PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v38[5]);
										boolean v39 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v39 == 0) {
											PackageStats v40 = new PackageStats("StorageStatsService");
											if (this.mWarnIfHeld == 0) {
												boolean v44 = Thread.holdsLock(this.mWarnIfHeld);
												if (v44 == 0) {
													Thread v48 = Thread.currentThread();
													String v49 = v48.getName();
													int v52 = System.identityHashCode(this.mWarnIfHeld);
													String v53 = Integer.toHexString(v52);
													if (this.mIsolated == 0) {
														boolean v59 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
														if (v59 == 0) {
															Installer$InstallerException v60 = new Installer$InstallerException("time out waiting for the installer to be ready");
															boolean v43 = 1;
															if (v43 != 0) {
																[J v62 = this.mInstalld.getUserSize(p1, p2, 0, v5);
																PackageStats.codeSize = (PackageStats.codeSize + v62[0]);
																PackageStats.dataSize = (PackageStats.dataSize + v62[1]);
																PackageStats.cacheSize = (PackageStats.cacheSize + v62[2]);
																PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v62[3]);
																PackageStats.externalDataSize = (PackageStats.externalDataSize + v62[4]);
																PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v62[5]);
																StringBuilder v63 = new StringBuilder();
																StringBuilder v65 = v63.append("User ");
																StringBuilder v66 = v63.append(p2);
																String v67 = v63.toString();
																StringBuilder v69 = new StringBuilder();
																StringBuilder v71 = v69.append(v67);
																StringBuilder v72 = v69.append(" codeSize");
																String v73 = v69.toString();
																if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																	StringBuilder v75 = new StringBuilder();
																	StringBuilder v77 = v75.append(v67);
																	StringBuilder v78 = v75.append(" dataSize");
																	String v79 = v75.toString();
																	if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																		StringBuilder v81 = new StringBuilder();
																		StringBuilder v83 = v81.append(v67);
																		StringBuilder v84 = v81.append(" cacheSize");
																		String v85 = v81.toString();
																		if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																			StringBuilder v87 = new StringBuilder();
																			StringBuilder v89 = v87.append(v67);
																			StringBuilder v90 = v87.append(" externalCodeSize");
																			String v91 = v87.toString();
																			if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																				StringBuilder v93 = new StringBuilder();
																				StringBuilder v95 = v93.append(v67);
																				StringBuilder v96 = v93.append(" externalDataSize");
																				String v97 = v93.toString();
																				if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																					StringBuilder v99 = new StringBuilder();
																					StringBuilder v101 = v99.append(v67);
																					StringBuilder v102 = v99.append(" externalCacheSize");
																					String v103 = v99.toString();
																					if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																						if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																							UserHandle v105 = UserHandle.of(p2);
																							StorageStatsService$$ExternalSyntheticLambda1 v106 = new StorageStatsService$$ExternalSyntheticLambda1(v14,v105);
																							p0.forEachStorageStatsAugmenter(v106, "queryStatsForUser");
																							StorageStats v109 = StorageStatsService.translate(v14);
																							return v109;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(, v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(, v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = ;
				PackageStats v14 = new PackageStats("StorageStatsService");
				boolean v17 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v17 == 0) {
					int v16 = 4096;
					if (this.mWarnIfHeld == 0) {
						boolean v20 = Thread.holdsLock(this.mWarnIfHeld);
						if (v20 == 0) {
							Thread v24 = Thread.currentThread();
							String v25 = v24.getName();
							int v28 = System.identityHashCode(this.mWarnIfHeld);
							String v29 = Integer.toHexString(v28);
							if (this.mIsolated == 0) {
								boolean v35 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v35 == 0) {
									Installer$InstallerException v36 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v19 = 1;
									if (v19 != 0) {
										[J v38 = this.mInstalld.getUserSize(p1, p2, v16, v5);
										PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
										PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
										PackageStats.cacheSize = (PackageStats.cacheSize + v38[2]);
										PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v38[3]);
										PackageStats.externalDataSize = (PackageStats.externalDataSize + v38[4]);
										PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v38[5]);
										boolean v39 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v39 == 0) {
											PackageStats v40 = new PackageStats("StorageStatsService");
											if (this.mWarnIfHeld == 0) {
												boolean v44 = Thread.holdsLock(this.mWarnIfHeld);
												if (v44 == 0) {
													Thread v48 = Thread.currentThread();
													String v49 = v48.getName();
													int v52 = System.identityHashCode(this.mWarnIfHeld);
													String v53 = Integer.toHexString(v52);
													if (this.mIsolated == 0) {
														boolean v59 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
														if (v59 == 0) {
															Installer$InstallerException v60 = new Installer$InstallerException("time out waiting for the installer to be ready");
															boolean v43 = 1;
															if (v43 != 0) {
																[J v62 = this.mInstalld.getUserSize(p1, p2, 0, v5);
																PackageStats.codeSize = (PackageStats.codeSize + v62[0]);
																PackageStats.dataSize = (PackageStats.dataSize + v62[1]);
																PackageStats.cacheSize = (PackageStats.cacheSize + v62[2]);
																PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v62[3]);
																PackageStats.externalDataSize = (PackageStats.externalDataSize + v62[4]);
																PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v62[5]);
																StringBuilder v63 = new StringBuilder();
																StringBuilder v65 = v63.append("User ");
																StringBuilder v66 = v63.append(p2);
																String v67 = v63.toString();
																StringBuilder v69 = new StringBuilder();
																StringBuilder v71 = v69.append(v67);
																StringBuilder v72 = v69.append(" codeSize");
																String v73 = v69.toString();
																if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																	StringBuilder v75 = new StringBuilder();
																	StringBuilder v77 = v75.append(v67);
																	StringBuilder v78 = v75.append(" dataSize");
																	String v79 = v75.toString();
																	if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																		StringBuilder v81 = new StringBuilder();
																		StringBuilder v83 = v81.append(v67);
																		StringBuilder v84 = v81.append(" cacheSize");
																		String v85 = v81.toString();
																		if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																			StringBuilder v87 = new StringBuilder();
																			StringBuilder v89 = v87.append(v67);
																			StringBuilder v90 = v87.append(" externalCodeSize");
																			String v91 = v87.toString();
																			if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																				StringBuilder v93 = new StringBuilder();
																				StringBuilder v95 = v93.append(v67);
																				StringBuilder v96 = v93.append(" externalDataSize");
																				String v97 = v93.toString();
																				if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																					StringBuilder v99 = new StringBuilder();
																					StringBuilder v101 = v99.append(v67);
																					StringBuilder v102 = v99.append(" externalCacheSize");
																					String v103 = v99.toString();
																					if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																						if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																							UserHandle v105 = UserHandle.of(p2);
																							StorageStatsService$$ExternalSyntheticLambda1 v106 = new StorageStatsService$$ExternalSyntheticLambda1(v14,v105);
																							p0.forEachStorageStatsAugmenter(v106, "queryStatsForUser");
																							StorageStats v109 = StorageStatsService.translate(v14);
																							return v109;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(, v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(, v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = ;
				PackageStats v14 = new PackageStats("StorageStatsService");
				boolean v17 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v17 == 0) {
					int v16 = 0;
					if (this.mWarnIfHeld == 0) {
						boolean v20 = Thread.holdsLock(this.mWarnIfHeld);
						if (v20 == 0) {
							Thread v24 = Thread.currentThread();
							String v25 = v24.getName();
							int v28 = System.identityHashCode(this.mWarnIfHeld);
							String v29 = Integer.toHexString(v28);
							if (this.mIsolated == 0) {
								boolean v35 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v35 == 0) {
									Installer$InstallerException v36 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v19 = 1;
									if (v19 != 0) {
										[J v38 = this.mInstalld.getUserSize(p1, p2, v16, v5);
										PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
										PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
										PackageStats.cacheSize = (PackageStats.cacheSize + v38[2]);
										PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v38[3]);
										PackageStats.externalDataSize = (PackageStats.externalDataSize + v38[4]);
										PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v38[5]);
										boolean v39 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v39 == 0) {
											PackageStats v40 = new PackageStats("StorageStatsService");
											if (this.mWarnIfHeld == 0) {
												boolean v44 = Thread.holdsLock(this.mWarnIfHeld);
												if (v44 == 0) {
													Thread v48 = Thread.currentThread();
													String v49 = v48.getName();
													int v52 = System.identityHashCode(this.mWarnIfHeld);
													String v53 = Integer.toHexString(v52);
													if (this.mIsolated == 0) {
														boolean v59 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
														if (v59 == 0) {
															Installer$InstallerException v60 = new Installer$InstallerException("time out waiting for the installer to be ready");
															boolean v43 = 1;
															if (v43 != 0) {
																StringBuilder v62 = new StringBuilder();
																StringBuilder v64 = v62.append("User ");
																StringBuilder v65 = v62.append(p2);
																String v66 = v62.toString();
																StringBuilder v68 = new StringBuilder();
																StringBuilder v70 = v68.append(v66);
																StringBuilder v71 = v68.append(" codeSize");
																String v72 = v68.toString();
																if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																	StringBuilder v74 = new StringBuilder();
																	StringBuilder v76 = v74.append(v66);
																	StringBuilder v77 = v74.append(" dataSize");
																	String v78 = v74.toString();
																	if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																		StringBuilder v80 = new StringBuilder();
																		StringBuilder v82 = v80.append(v66);
																		StringBuilder v83 = v80.append(" cacheSize");
																		String v84 = v80.toString();
																		if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																			StringBuilder v86 = new StringBuilder();
																			StringBuilder v88 = v86.append(v66);
																			StringBuilder v89 = v86.append(" externalCodeSize");
																			String v90 = v86.toString();
																			if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																				StringBuilder v92 = new StringBuilder();
																				StringBuilder v94 = v92.append(v66);
																				StringBuilder v95 = v92.append(" externalDataSize");
																				String v96 = v92.toString();
																				if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																					StringBuilder v98 = new StringBuilder();
																					StringBuilder v100 = v98.append(v66);
																					StringBuilder v101 = v98.append(" externalCacheSize");
																					String v102 = v98.toString();
																					if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																						if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																							UserHandle v104 = UserHandle.of(p2);
																							StorageStatsService$$ExternalSyntheticLambda1 v105 = new StorageStatsService$$ExternalSyntheticLambda1(v14,v104);
																							p0.forEachStorageStatsAugmenter(v105, "queryStatsForUser");
																							StorageStats v108 = StorageStatsService.translate(v14);
																							return v108;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);\nIterator v7 = v6.iterator();\nPackageStats v14 = new PackageStats("StorageStatsService");\n[J v38 = this.mInstalld.getUserSize(p1, p2, v16, v5);\nPackageStats.codeSize = (PackageStats.codeSize + v38[0]);\nStorageStats v109 = StorageStatsService.translate(v14);\nreturn v109;', 'int v3 = Binder.getCallingUid();\n[I v5 = p0.getAppIds(p2);\nthis.mInstaller.getUserSize(p1, p2, v8, v5, v6);\nStorageStats v24 = StorageStatsService.translate(v6);\nreturn v24;']

The method queryStatsForUser has the following similar APIs:

- API Name: getCacheBytes(Ljava/lang/String;Ljava/lang/String;)J with Similarity Score: 0.9442228078842163
  - Access Control Level: SYS_OR_SIG and the following code:
List v3 = this.mUser.getUsers();
Iterator v4 = v3.iterator();
int v10 = Binder.getCallingUid();
List v13 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
Iterator v14 = v13.iterator();
boolean v18 = ArrayUtils.contains(, v17);
PackageStats v21 = new PackageStats("StorageStatsService");
this.mInstalld.getUserSize(p1, p2, v23, v12);
PackageStats.codeSize = (PackageStats.codeSize + v27[0]);
return ;

- API Name: queryStatsForUid(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.9168801307678223
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = Binder.getCallingUid();
ApplicationInfo v12 = this.mPackage.getApplicationInfoAsUser(v9[], 8192, v1);
this.mInstaller.getAppSize(p1, v9, v1, v18, v2, v10, , v16);
StorageStats v21 = StorageStatsService.translate(v16);
return v21;

