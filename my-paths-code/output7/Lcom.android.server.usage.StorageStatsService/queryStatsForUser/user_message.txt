This is path 1 for the API with depth 2:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(, v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(, v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = ;
				PackageStats v14 = new PackageStats("StorageStatsService");
				boolean v17 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v17 == 0) {
					int v16 = 0;
					if (this.mWarnIfHeld == 0) {
						boolean v20 = Thread.holdsLock(this.mWarnIfHeld);
						if (v20 == 0) {
							Thread v24 = Thread.currentThread();
							String v25 = v24.getName();
							int v28 = System.identityHashCode(this.mWarnIfHeld);
							String v29 = Integer.toHexString(v28);
							if (this.mIsolated == 0) {
								boolean v35 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v35 == 0) {
									Installer$InstallerException v36 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v19 = 1;
									if (v19 != 0) {
										[J v38 = this.mInstalld.getUserSize(p1, p2, v16, v5);
										PackageStats.codeSize = (PackageStats.codeSize + v38[0]);
										PackageStats.dataSize = (PackageStats.dataSize + v38[1]);
										PackageStats.cacheSize = (PackageStats.cacheSize + v38[2]);
										PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v38[3]);
										PackageStats.externalDataSize = (PackageStats.externalDataSize + v38[4]);
										PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v38[5]);
										boolean v39 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v39 == 0) {
											PackageStats v40 = new PackageStats("StorageStatsService");
											if (this.mWarnIfHeld == 0) {
												boolean v44 = Thread.holdsLock(this.mWarnIfHeld);
												if (v44 == 0) {
													Thread v48 = Thread.currentThread();
													String v49 = v48.getName();
													int v52 = System.identityHashCode(this.mWarnIfHeld);
													String v53 = Integer.toHexString(v52);
													if (this.mIsolated == 0) {
														boolean v59 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
														if (v59 == 0) {
															Installer$InstallerException v60 = new Installer$InstallerException("time out waiting for the installer to be ready");
															boolean v43 = 1;
															if (v43 != 0) {
																[J v62 = this.mInstalld.getUserSize(p1, p2, 0, v5);
																PackageStats.codeSize = (PackageStats.codeSize + v62[0]);
																PackageStats.dataSize = (PackageStats.dataSize + v62[1]);
																PackageStats.cacheSize = (PackageStats.cacheSize + v62[2]);
																PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v62[3]);
																PackageStats.externalDataSize = (PackageStats.externalDataSize + v62[4]);
																PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v62[5]);
																StringBuilder v63 = new StringBuilder();
																StringBuilder v65 = v63.append("User ");
																StringBuilder v66 = v63.append(p2);
																String v67 = v63.toString();
																StringBuilder v69 = new StringBuilder();
																StringBuilder v71 = v69.append(v67);
																StringBuilder v72 = v69.append(" codeSize");
																String v73 = v69.toString();
																if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																	StringBuilder v75 = new StringBuilder();
																	StringBuilder v77 = v75.append(v67);
																	StringBuilder v78 = v75.append(" dataSize");
																	String v79 = v75.toString();
																	if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																		StringBuilder v81 = new StringBuilder();
																		StringBuilder v83 = v81.append(v67);
																		StringBuilder v84 = v81.append(" cacheSize");
																		String v85 = v81.toString();
																		if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																			StringBuilder v87 = new StringBuilder();
																			StringBuilder v89 = v87.append(v67);
																			StringBuilder v90 = v87.append(" externalCodeSize");
																			String v91 = v87.toString();
																			if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																				StringBuilder v93 = new StringBuilder();
																				StringBuilder v95 = v93.append(v67);
																				StringBuilder v96 = v93.append(" externalDataSize");
																				String v97 = v93.toString();
																				if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																					StringBuilder v99 = new StringBuilder();
																					StringBuilder v101 = v99.append(v67);
																					StringBuilder v102 = v99.append(" externalCacheSize");
																					String v103 = v99.toString();
																					if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																						if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																							UserHandle v105 = UserHandle.of(p2);
																							StorageStatsService$$ExternalSyntheticLambda1 v106 = new StorageStatsService$$ExternalSyntheticLambda1(v14,v105);
																							p0.forEachStorageStatsAugmenter(v106, "queryStatsForUser");
																							StorageStats v109 = StorageStatsService.translate(v14);
																							return v109;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(, v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(, v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = ;
				PackageStats v14 = new PackageStats("StorageStatsService");
				boolean v17 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v17 == 0) {
					int v16 = 0;
					boolean v19 = Installer.checkBeforeRemote();
					if (v19 != 0) {
						[J v20 = this.mInstalld.getUserSize(p1, p2, v16, v5);
						PackageStats.codeSize = (PackageStats.codeSize + v20[0]);
						PackageStats.dataSize = (PackageStats.dataSize + v20[1]);
						PackageStats.cacheSize = (PackageStats.cacheSize + v20[2]);
						PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v20[3]);
						PackageStats.externalDataSize = (PackageStats.externalDataSize + v20[4]);
						PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v20[5]);
						boolean v21 = SystemProperties.getBoolean("fw.verify_storage", 0);
						if (v21 == 0) {
							PackageStats v22 = new PackageStats("StorageStatsService");
							boolean v25 = Installer.checkBeforeRemote();
							if (v25 != 0) {
								[J v26 = this.mInstalld.getUserSize(p1, p2, 0, v5);
								PackageStats.codeSize = (PackageStats.codeSize + v26[0]);
								PackageStats.dataSize = (PackageStats.dataSize + v26[1]);
								PackageStats.cacheSize = (PackageStats.cacheSize + v26[2]);
								PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v26[3]);
								PackageStats.externalDataSize = (PackageStats.externalDataSize + v26[4]);
								PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v26[5]);
								StringBuilder v27 = new StringBuilder();
								StringBuilder v29 = v27.append("User ");
								StringBuilder v30 = v27.append(p2);
								String v31 = v27.toString();
								StringBuilder v33 = new StringBuilder();
								StringBuilder v35 = v33.append(v31);
								StringBuilder v36 = v33.append(" codeSize");
								String v37 = v33.toString();
								StorageStatsService.checkEquals(v37, PackageStats.codeSize, PackageStats.codeSize);
								StringBuilder v39 = new StringBuilder();
								StringBuilder v41 = v39.append(v31);
								StringBuilder v42 = v39.append(" dataSize");
								String v43 = v39.toString();
								StorageStatsService.checkEquals(v43, PackageStats.dataSize, PackageStats.dataSize);
								StringBuilder v45 = new StringBuilder();
								StringBuilder v47 = v45.append(v31);
								StringBuilder v48 = v45.append(" cacheSize");
								String v49 = v45.toString();
								StorageStatsService.checkEquals(v49, PackageStats.cacheSize, PackageStats.cacheSize);
								StringBuilder v51 = new StringBuilder();
								StringBuilder v53 = v51.append(v31);
								StringBuilder v54 = v51.append(" externalCodeSize");
								String v55 = v51.toString();
								StorageStatsService.checkEquals(v55, PackageStats.externalCodeSize, PackageStats.externalCodeSize);
								StringBuilder v57 = new StringBuilder();
								StringBuilder v59 = v57.append(v31);
								StringBuilder v60 = v57.append(" externalDataSize");
								String v61 = v57.toString();
								StorageStatsService.checkEquals(v61, PackageStats.externalDataSize, PackageStats.externalDataSize);
								StringBuilder v63 = new StringBuilder();
								StringBuilder v65 = v63.append(v31);
								StringBuilder v66 = v63.append(" externalCacheSize");
								String v67 = v63.toString();
								StorageStatsService.checkEquals(v67, PackageStats.externalCacheSize, PackageStats.externalCacheSize);
								if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
									UserHandle v69 = UserHandle.of(p2);
									StorageStatsService$$ExternalSyntheticLambda1 v70 = new StorageStatsService$$ExternalSyntheticLambda1(v14,v69);
									int v73 = this.mStorageStatsAugmenters.size();
									if ( >= v73) {
										Object v74 = this.mStorageStatsAugmenters.get();
										StringBuilder v75 = new StringBuilder();
										StringBuilder v77 = v75.append("queryStatsForUser");
										StringBuilder v78 = v75.append(":");
										StringBuilder v79 = v75.append(Pair.first);
										String v80 = v75.toString();
										Trace.traceBegin(524288, v80);
										v70.accept(Pair.second);
										Trace.traceEnd(524288);
										if ( >= v73) {
											StorageStats v85 = new StorageStats();
											StorageStats.codeBytes = (PackageStats.codeSize + PackageStats.externalCodeSize);
											StorageStats.dataBytes = (PackageStats.dataSize + PackageStats.externalDataSize);
											StorageStats.cacheBytes = (PackageStats.cacheSize + PackageStats.externalCacheSize);
											StorageStats.externalCacheBytes = PackageStats.externalCacheSize;
											StorageStats v84 = v85;
											return v84;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	[I v5 = p0.getAppIds(p2);
	PackageStats v6 = new PackageStats("StorageStatsService");
	int v8 = StorageStatsService.getDefaultFlags();
	this.mInstaller.getUserSize(p1, p2, v8, v5, v6);
	boolean v10 = SystemProperties.getBoolean("fw.verify_storage", 0);
	if (v10 == 0) {
		PackageStats v11 = new PackageStats("StorageStatsService");
		this.mInstaller.getUserSize(p1, p2, 0, v5, v11);
		StringBuilder v14 = new StringBuilder();
		StringBuilder v16 = v14.append("User ");
		StringBuilder v17 = v14.append(p2);
		String v18 = v14.toString();
		StorageStatsService.checkEquals(v18, v11, v6);
		if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
			UserHandle v20 = UserHandle.of(p2);
			StorageStatsService$$ExternalSyntheticLambda1 v21 = new StorageStatsService$$ExternalSyntheticLambda1(v6,v20);
			p0.forEachStorageStatsAugmenter(v21, "queryStatsForUser");
			StorageStats v24 = StorageStatsService.translate(v6);
			return v24;
		}
	}
}
