This is path 1 for the API with depth 2:
public StorageStats queryStatsForPackage(String p1, String p2, int p3, String p4){
	int v5 = Binder.getCallingUid();
	if (v6 != 0) {
		String v7 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
		String v8 = ArrayUtils.defeatNullable(v7);
		if (v8.length != 1) {
			int v15 = Binder.getCallingUid();
			if (v16 != 0) {
				String v17 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
				String v18 = ArrayUtils.defeatNullable(v17);
				[J v19 = new [J(v18.length);
				String v20 = new String(0);
				if ( >= v18.length) {
					PackageStats v21 = new PackageStats("StorageStatsService");
					boolean v24 = SystemProperties.getBoolean("fw.disable_quota", 0);
					if (v24 == 0) {
						int v23 = 0;
						boolean v26 = Installer.checkBeforeRemote();
						if (v26 != 0) {
							if ( == 0) {
								if ( >= .length) {
									BlockGuard$VmPolicy v27 = BlockGuard.getVmPolicy();
									v27.onPathAccess([]);
									if ( >= .length) {
										[J v29 = this.mInstalld.getAppSize(p1, v18, v10, v23, v11, v19, );
										PackageStats.codeSize = (PackageStats.codeSize + v29[0]);
										PackageStats.dataSize = (PackageStats.dataSize + v29[1]);
										PackageStats.cacheSize = (PackageStats.cacheSize + v29[2]);
										PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v29[3]);
										PackageStats.externalDataSize = (PackageStats.externalDataSize + v29[4]);
										PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v29[5]);
										boolean v30 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v30 == 0) {
											PackageStats v31 = new PackageStats("StorageStatsService");
											boolean v34 = Installer.checkBeforeRemote();
											if (v34 != 0) {
												if ( == 0) {
													if ( >= .length) {
														BlockGuard$VmPolicy v35 = BlockGuard.getVmPolicy();
														v35.onPathAccess([]);
														if ( >= .length) {
															[J v37 = this.mInstalld.getAppSize(p1, v18, v10, 0, v11, v19, );
															PackageStats.codeSize = (PackageStats.codeSize + v37[0]);
															PackageStats.dataSize = (PackageStats.dataSize + v37[1]);
															PackageStats.cacheSize = (PackageStats.cacheSize + v37[2]);
															PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v37[3]);
															PackageStats.externalDataSize = (PackageStats.externalDataSize + v37[4]);
															PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v37[5]);
															StringBuilder v38 = new StringBuilder();
															StringBuilder v40 = v38.append("UID ");
															StringBuilder v41 = v38.append(ApplicationInfo.uid);
															String v42 = v38.toString();
															StringBuilder v44 = new StringBuilder();
															StringBuilder v46 = v44.append(v42);
															StringBuilder v47 = v44.append(" codeSize");
															String v48 = v44.toString();
															StorageStatsService.checkEquals(v48, PackageStats.codeSize, PackageStats.codeSize);
															StringBuilder v50 = new StringBuilder();
															StringBuilder v52 = v50.append(v42);
															StringBuilder v53 = v50.append(" dataSize");
															String v54 = v50.toString();
															StorageStatsService.checkEquals(v54, PackageStats.dataSize, PackageStats.dataSize);
															StringBuilder v56 = new StringBuilder();
															StringBuilder v58 = v56.append(v42);
															StringBuilder v59 = v56.append(" cacheSize");
															String v60 = v56.toString();
															StorageStatsService.checkEquals(v60, PackageStats.cacheSize, PackageStats.cacheSize);
															StringBuilder v62 = new StringBuilder();
															StringBuilder v64 = v62.append(v42);
															StringBuilder v65 = v62.append(" externalCodeSize");
															String v66 = v62.toString();
															StorageStatsService.checkEquals(v66, PackageStats.externalCodeSize, PackageStats.externalCodeSize);
															StringBuilder v68 = new StringBuilder();
															StringBuilder v70 = v68.append(v42);
															StringBuilder v71 = v68.append(" externalDataSize");
															String v72 = v68.toString();
															StorageStatsService.checkEquals(v72, PackageStats.externalDataSize, PackageStats.externalDataSize);
															StringBuilder v74 = new StringBuilder();
															StringBuilder v76 = v74.append(v42);
															StringBuilder v77 = v74.append(" externalCacheSize");
															String v78 = v74.toString();
															StorageStatsService.checkEquals(v78, PackageStats.externalCacheSize, PackageStats.externalCacheSize);
															if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																StorageStatsService$$ExternalSyntheticLambda2 v80 = new StorageStatsService$$ExternalSyntheticLambda2(v21,ApplicationInfo.uid,);
																int v83 = this.mStorageStatsAugmenters.size();
																if ( >= v83) {
																	Object v84 = this.mStorageStatsAugmenters.get();
																	StringBuilder v85 = new StringBuilder();
																	StringBuilder v87 = v85.append("queryStatsForUid");
																	StringBuilder v88 = v85.append(":");
																	StringBuilder v89 = v85.append(Pair.first);
																	String v90 = v85.toString();
																	Trace.traceBegin(524288, v90);
																	v80.accept(Pair.second);
																	Trace.traceEnd(524288);
																	if ( >= v83) {
																		StorageStats v95 = new StorageStats();
																		StorageStats.codeBytes = (PackageStats.codeSize + PackageStats.externalCodeSize);
																		StorageStats.dataBytes = (PackageStats.dataSize + PackageStats.externalDataSize);
																		StorageStats.cacheBytes = (PackageStats.cacheSize + PackageStats.externalCacheSize);
																		StorageStats.externalCacheBytes = PackageStats.externalCacheSize;
																		StorageStats v94 = v95;
																		StorageStats v9 = v94;
																		return v9;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public StorageStats queryStatsForPackage(String p1, String p2, int p3, String p4){
	int v5 = Binder.getCallingUid();
	if (v6 != 0) {
		String v7 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
		String v8 = ArrayUtils.defeatNullable(v7);
		if (v8.length != 1) {
			int v9 = UserHandle.getUserId(ApplicationInfo.uid);
			String v10 = new String(1);
			[J v11 = new [J(1);
			String v12 = new String(0);
			boolean v13 = v3.isSystemApp();
			if (v13 == 0) {
				boolean v14 = v3.isUpdatedSystemApp();
				if (v14 != 0) {
					String v15 = v3.getCodePath();
					Object v16 = ArrayUtils.appendElement(Strin.class, v12, v15);
					PackageStats v17 = new PackageStats("StorageStatsService");
					boolean v20 = Installer.checkBeforeRemote();
					if (v20 != 0) {
						if ( == 0) {
							if ( >= .length) {
								BlockGuard$VmPolicy v21 = BlockGuard.getVmPolicy();
								v21.onPathAccess([]);
								if ( >= .length) {
									[J v23 = this.mInstalld.getAppSize(p1, v10, p3, 0, v9, v11, );
									PackageStats.codeSize = (PackageStats.codeSize + v23[0]);
									PackageStats.dataSize = (PackageStats.dataSize + v23[1]);
									PackageStats.cacheSize = (PackageStats.cacheSize + v23[2]);
									PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v23[3]);
									PackageStats.externalDataSize = (PackageStats.externalDataSize + v23[4]);
									PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v23[5]);
									if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
										UserHandle v24 = UserHandle.of(p3);
										StorageStatsService$$ExternalSyntheticLambda0 v25 = new StorageStatsService$$ExternalSyntheticLambda0(v17,p2,v24,);
										int v28 = this.mStorageStatsAugmenters.size();
										if ( >= v28) {
											Object v29 = this.mStorageStatsAugmenters.get();
											StringBuilder v30 = new StringBuilder();
											StringBuilder v32 = v30.append("queryStatsForPackage");
											StringBuilder v33 = v30.append(":");
											StringBuilder v34 = v30.append(Pair.first);
											String v35 = v30.toString();
											Trace.traceBegin(524288, v35);
											v25.accept(Pair.second);
											Trace.traceEnd(524288);
											if ( >= v28) {
												StorageStats v40 = new StorageStats();
												StorageStats.codeBytes = (PackageStats.codeSize + PackageStats.externalCodeSize);
												StorageStats.dataBytes = (PackageStats.dataSize + PackageStats.externalDataSize);
												StorageStats.cacheBytes = (PackageStats.cacheSize + PackageStats.externalCacheSize);
												StorageStats.externalCacheBytes = PackageStats.externalCacheSize;
												StorageStats v39 = v40;
												return v39;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public StorageStats queryStatsForPackage(String p1, String p2, int p3, String p4){
	int v5 = Binder.getCallingUid();
	if (v6 != 0) {
		String v7 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
		String v8 = ArrayUtils.defeatNullable(v7);
		if (v8.length != 1) {
			int v9 = UserHandle.getUserId(ApplicationInfo.uid);
			String v10 = new String(1);
			[J v11 = new [J(1);
			String v12 = new String(0);
			boolean v13 = v3.isSystemApp();
			if (v13 == 0) {
				boolean v14 = v3.isUpdatedSystemApp();
				if (v14 != 0) {
					String v15 = v3.getCodePath();
					Object v16 = ArrayUtils.appendElement(Strin.class, v12, v15);
					PackageStats v17 = new PackageStats("StorageStatsService");
					this.mInstaller.getAppSize(p1, v10, p3, 0, v9, v11, , v17);
					if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
						UserHandle v20 = UserHandle.of(p3);
						StorageStatsService$$ExternalSyntheticLambda0 v21 = new StorageStatsService$$ExternalSyntheticLambda0(v17,p2,v20,);
						p0.forEachStorageStatsAugmenter(v21, "queryStatsForPackage");
						StorageStats v24 = StorageStatsService.translate(v17);
						return v24;
					}
				}
			}
		}
	}
}
