The method queryExternalStatsForUser has the following code snippet:

This is path 1 for the API with depth 2:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(, v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(, v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = ;
				boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v15 == 0) {
					int v14 = 0;
					if (this.mWarnIfHeld == 0) {
						boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
						if (v18 == 0) {
							Thread v22 = Thread.currentThread();
							String v23 = v22.getName();
							int v26 = System.identityHashCode(this.mWarnIfHeld);
							String v27 = Integer.toHexString(v26);
							if (this.mIsolated == 0) {
								boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v33 == 0) {
									Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v17 = 1;
									if (v17 != 0) {
										[J v36 = this.mInstalld.getExternalSize(p1, p2, v14, v5);
										[J v16 = v36;
										boolean v37 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v37 == 0) {
											if (this.mWarnIfHeld == 0) {
												boolean v40 = Thread.holdsLock(this.mWarnIfHeld);
												if (v40 == 0) {
													Thread v44 = Thread.currentThread();
													String v45 = v44.getName();
													int v48 = System.identityHashCode(this.mWarnIfHeld);
													String v49 = Integer.toHexString(v48);
													if (this.mIsolated == 0) {
														boolean v55 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
														if (v55 == 0) {
															Installer$InstallerException v56 = new Installer$InstallerException("time out waiting for the installer to be ready");
															boolean v39 = 1;
															if (v39 != 0) {
																[J v58 = this.mInstalld.getExternalSize(p1, p2, 0, v5);
																[J v38 = v58;
																StringBuilder v59 = new StringBuilder();
																StringBuilder v61 = v59.append("External ");
																StringBuilder v62 = v59.append(p2);
																String v63 = v59.toString();
																if ( >= v38.length) {
																	StringBuilder v65 = new StringBuilder();
																	StringBuilder v67 = v65.append(v63);
																	StringBuilder v68 = v65.append("[");
																	StringBuilder v69 = v65.append();
																	StringBuilder v70 = v65.append("]");
																	String v71 = v65.toString();
																	if ((p2[] < p3[]) == 0) {
																		if ( >= v38.length) {
																			ExternalStorageStats v73 = new ExternalStorageStats();
																			ExternalStorageStats.totalBytes = v16[0];
																			ExternalStorageStats.audioBytes = v16[1];
																			ExternalStorageStats.videoBytes = v16[2];
																			ExternalStorageStats.imageBytes = v16[3];
																			ExternalStorageStats.appBytes = v16[4];
																			ExternalStorageStats.obbBytes = v16[5];
																			return v73;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(, v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(, v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = ;
				boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v15 == 0) {
					int v14 = 4096;
					if (this.mWarnIfHeld == 0) {
						boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
						if (v18 == 0) {
							Thread v22 = Thread.currentThread();
							String v23 = v22.getName();
							int v26 = System.identityHashCode(this.mWarnIfHeld);
							String v27 = Integer.toHexString(v26);
							if (this.mIsolated == 0) {
								boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v33 == 0) {
									Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v17 = 1;
									if (v17 != 0) {
										[J v36 = this.mInstalld.getExternalSize(p1, p2, v14, v5);
										[J v16 = v36;
										boolean v37 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v37 == 0) {
											if (this.mWarnIfHeld == 0) {
												boolean v40 = Thread.holdsLock(this.mWarnIfHeld);
												if (v40 == 0) {
													Thread v44 = Thread.currentThread();
													String v45 = v44.getName();
													int v48 = System.identityHashCode(this.mWarnIfHeld);
													String v49 = Integer.toHexString(v48);
													if (this.mIsolated == 0) {
														boolean v55 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
														if (v55 == 0) {
															Installer$InstallerException v56 = new Installer$InstallerException("time out waiting for the installer to be ready");
															boolean v39 = 1;
															if (v39 != 0) {
																[J v58 = this.mInstalld.getExternalSize(p1, p2, 0, v5);
																[J v38 = v58;
																StringBuilder v59 = new StringBuilder();
																StringBuilder v61 = v59.append("External ");
																StringBuilder v62 = v59.append(p2);
																String v63 = v59.toString();
																if ( >= v38.length) {
																	StringBuilder v65 = new StringBuilder();
																	StringBuilder v67 = v65.append(v63);
																	StringBuilder v68 = v65.append("[");
																	StringBuilder v69 = v65.append();
																	StringBuilder v70 = v65.append("]");
																	String v71 = v65.toString();
																	if ((p2[] < p3[]) == 0) {
																		if ( >= v38.length) {
																			ExternalStorageStats v73 = new ExternalStorageStats();
																			ExternalStorageStats.totalBytes = v16[0];
																			ExternalStorageStats.audioBytes = v16[1];
																			ExternalStorageStats.videoBytes = v16[2];
																			ExternalStorageStats.imageBytes = v16[3];
																			ExternalStorageStats.appBytes = v16[4];
																			ExternalStorageStats.obbBytes = v16[5];
																			return v73;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		int v10 = UserHandle.getAppId(ApplicationInfo.uid);
		boolean v11 = ArrayUtils.contains(, v10);
		if (v11 != 0) {
			[I v12 = ArrayUtils.appendInt(, v10);
			boolean v13 = v7.hasNext();
			if (v13 == 0) {
				[I v5 = ;
				boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
				if (v15 == 0) {
					int v14 = 0;
					if (this.mWarnIfHeld == 0) {
						boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
						if (v18 == 0) {
							Thread v22 = Thread.currentThread();
							String v23 = v22.getName();
							int v26 = System.identityHashCode(this.mWarnIfHeld);
							String v27 = Integer.toHexString(v26);
							if (this.mIsolated == 0) {
								boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v33 == 0) {
									Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v17 = 1;
									if (v17 != 0) {
										[J v36 = this.mInstalld.getExternalSize(p1, p2, v14, v5);
										[J v16 = v36;
										boolean v37 = SystemProperties.getBoolean("fw.verify_storage", 0);
										if (v37 == 0) {
											if (this.mWarnIfHeld == 0) {
												boolean v40 = Thread.holdsLock(this.mWarnIfHeld);
												if (v40 == 0) {
													Thread v44 = Thread.currentThread();
													String v45 = v44.getName();
													int v48 = System.identityHashCode(this.mWarnIfHeld);
													String v49 = Integer.toHexString(v48);
													if (this.mIsolated == 0) {
														boolean v55 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
														if (v55 == 0) {
															Installer$InstallerException v56 = new Installer$InstallerException("time out waiting for the installer to be ready");
															boolean v39 = 1;
															if (v39 != 0) {
																[J v58 = new [J(6);
																[J v38 = v58;
																StringBuilder v59 = new StringBuilder();
																StringBuilder v61 = v59.append("External ");
																StringBuilder v62 = v59.append(p2);
																String v63 = v59.toString();
																if ( >= v38.length) {
																	StringBuilder v65 = new StringBuilder();
																	StringBuilder v67 = v65.append(v63);
																	StringBuilder v68 = v65.append("[");
																	StringBuilder v69 = v65.append();
																	StringBuilder v70 = v65.append("]");
																	String v71 = v65.toString();
																	if ((p2[] < p3[]) == 0) {
																		if ( >= v38.length) {
																			ExternalStorageStats v73 = new ExternalStorageStats();
																			ExternalStorageStats.totalBytes = v16[0];
																			ExternalStorageStats.audioBytes = v16[1];
																			ExternalStorageStats.videoBytes = v16[2];
																			ExternalStorageStats.imageBytes = v16[3];
																			ExternalStorageStats.appBytes = v16[4];
																			ExternalStorageStats.obbBytes = v16[5];
																			return v73;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v6 = StorageStatsService.getDefaultFlags();\n[J v7 = this.mInstaller.getExternalSize(p1, p2, v6, v5);\nExternalStorageStats v16 = new ExternalStorageStats();\nExternalStorageStats.totalBytes = v7[0];\nExternalStorageStats.audioBytes = v7[1];\nExternalStorageStats.videoBytes = v7[2];\nExternalStorageStats.imageBytes = v7[3];\nExternalStorageStats.appBytes = v7[4];\nExternalStorageStats.obbBytes = v7[5];\nreturn v16;']

The method queryExternalStatsForUser has the following similar APIs:

- API Name: queryStatsForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.8103983402252197
  - Access Control Level: SYS_OR_SIG and the following code:
PackageStats v17 = new PackageStats("StorageStatsService");
[J v23 = this.mInstalld.getAppSize(p1, v10, p3, 0, v9, v11, );
PackageStats.codeSize = (PackageStats.codeSize + v23[0]);
PackageStats.dataSize = (PackageStats.dataSize + v23[1]);
PackageStats.cacheSize = (PackageStats.cacheSize + v23[2]);
PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v23[3]);
PackageStats.externalDataSize = (PackageStats.externalDataSize + v23[4]);
PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v23[5]);

- API Name: queryStatsForUser(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.7619129419326782
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = Binder.getCallingUid();
[I v5 = p0.getAppIds(p2);
this.mInstaller.getUserSize(p1, p2, v8, v5, v6);
StorageStats v24 = StorageStatsService.translate(v6);
return v24;

