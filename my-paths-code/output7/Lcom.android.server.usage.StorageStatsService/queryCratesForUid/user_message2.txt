The method queryCratesForUid has the following code snippet:

This is path 1 for the API with depth 2:
public ParceledListSlice queryCratesForUid(String p1, int p2, String p3){
	String v6 = this.mPackage.getPackagesForUid(p2);
	String v7 = ArrayUtils.defeatNullable(v6);
	String v8 = new String(0);
	if ( >= v7.length) {
		boolean v9 = TextUtils.isEmpty(v7[]);
		if (v9 == 0) {
			ApplicationInfo v10 = this.mPackage.getApplicationInfoAsUser(v7[], 8192, v2);
			if (v10 != 0) {
				Object v11 = ArrayUtils.appendElement(Strin.class, , v7[]);
				if ( >= v7.length) {
					boolean v14 = Installer.checkBeforeRemote();
					if (v14 != 0) {
						CrateMetadata v15 = this.mInstalld.getAppCrates(p1, p2, p3);
						CrateMetadata v13 = v15;
						ParceledListSlice v16 = new ParceledListSlice(v17);
						boolean v18 = ArrayUtils.isEmpty(v13);
						if (v18 == 0) {
							ArrayList v19 = new ArrayList();
							if ( >= v13.length) {
								if (v13[] == 0) {
									boolean v21 = TextUtils.isEmpty(CrateMetadata.id);
									if (v21 != 0) {
										boolean v22 = TextUtils.isEmpty(CrateMetadata.packageName);
										if (v22 == 0) {
											CrateInfo v23 = CrateInfo.copyFrom(CrateMetadata.uid, CrateMetadata.packageName, CrateMetadata.id);
											if (v23 != 0) {
												if ( >= v13.length) {
													List v17 = v19;
													ParceledListSlice v12 = v16;
													return v12;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public ParceledListSlice queryCratesForUid(String p1, int p2, String p3){
	String v6 = this.mPackage.getPackagesForUid(p2);
	String v7 = ArrayUtils.defeatNullable(v6);
	String v8 = new String(0);
	if ( >= v7.length) {
		boolean v9 = TextUtils.isEmpty(v7[]);
		if (v9 == 0) {
			ApplicationInfo v10 = this.mPackage.getApplicationInfoAsUser(v7[], 8192, v2);
			if (v10 != 0) {
				Object v11 = ArrayUtils.appendElement(Strin.class, , v7[]);
				if ( >= v7.length) {
					boolean v14 = Installer.checkBeforeRemote();
					if (v14 != 0) {
						CrateMetadata v15 = this.mInstalld.getAppCrates(p1, p2, p3);
						CrateMetadata v13 = v15;
						ParceledListSlice v16 = new ParceledListSlice(v17);
						boolean v18 = ArrayUtils.isEmpty(v13);
						if (v18 == 0) {
							ArrayList v19 = new ArrayList();
							if ( >= v13.length) {
								if (v13[] == 0) {
									boolean v21 = TextUtils.isEmpty(CrateMetadata.id);
									if (v21 != 0) {
										boolean v22 = TextUtils.isEmpty(CrateMetadata.packageName);
										if (v22 == 0) {
											CrateInfo v23 = CrateInfo.copyFrom(CrateMetadata.uid, CrateMetadata.packageName, CrateMetadata.id);
											if (v23 != 0) {
												boolean v24 = v19.add(v23);
												if ( >= v13.length) {
													List v17 = v19;
													ParceledListSlice v12 = v16;
													return v12;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public ParceledListSlice queryCratesForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	String v8 = this.mPackage.getPackagesForUid(p2);
	String v9 = ArrayUtils.defeatNullable(v8);
	String v10 = new String(0);
	if ( >= v9.length) {
		boolean v11 = TextUtils.isEmpty(v9[]);
		if (v11 == 0) {
			ApplicationInfo v12 = this.mPackage.getApplicationInfoAsUser(v9[], 8192, v2);
			if (v12 != 0) {
				if ( >= v9.length) {
					boolean v15 = Installer.checkBeforeRemote();
					if (v15 != 0) {
						CrateMetadata v16 = this.mInstalld.getAppCrates(p1, p2, p3);
						CrateMetadata v14 = v16;
						ParceledListSlice v17 = new ParceledListSlice(v18);
						boolean v19 = ArrayUtils.isEmpty(v14);
						if (v19 == 0) {
							ArrayList v20 = new ArrayList();
							if ( >= v14.length) {
								if (v14[] == 0) {
									boolean v22 = TextUtils.isEmpty(CrateMetadata.id);
									if (v22 != 0) {
										boolean v23 = TextUtils.isEmpty(CrateMetadata.packageName);
										if (v23 == 0) {
											CrateInfo v24 = CrateInfo.copyFrom(CrateMetadata.uid, CrateMetadata.packageName, CrateMetadata.id);
											if (v24 != 0) {
												if ( >= v14.length) {
													List v18 = v20;
													ParceledListSlice v13 = v17;
													return v13;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['String v6 = this.mPackage.getPackagesForUid(p2);\nCrateMetadata v15 = this.mInstalld.getAppCrates(p1, p2, p3);\nParceledListSlice v16 = new ParceledListSlice(v17);\nreturn v12;', 'String v6 = this.mPackage.getPackagesForUid(p2);\nCrateMetadata v13 = this.mInstaller.getAppCrates(p1, , v2);\nParceledListSlice v14 = new ParceledListSlice(v15);\nreturn v12;', 'String v6 = this.mPackage.getPackagesForUid(p2);\nParceledListSlice v12 = p0.getAppCrates(p1, , v2);\nreturn v12;']

The method queryCratesForUid has the following similar APIs:

- API Name: queryCratesForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/content/pm/ParceledListSlice; with Similarity Score: 0.8696037530899048
  - Access Control Level: SYS_OR_SIG and the following code:
CrateMetadata v12 = this.mInstalld.getAppCrates(p1, p2, p3);
ParceledListSlice v13 = new ParceledListSlice(v14);
return v9;

- API Name: queryCratesForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/content/pm/ParceledListSlice; with Similarity Score: 0.8531951904296875
  - Access Control Level: SYS_OR_SIG and the following code:
CrateMetadata v12 = this.mInstalld.getAppCrates(p1, p2, p3);
ParceledListSlice v13 = new ParceledListSlice(v14);
return v9;

