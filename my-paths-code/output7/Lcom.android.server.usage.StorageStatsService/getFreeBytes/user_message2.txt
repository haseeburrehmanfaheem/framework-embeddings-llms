The method getFreeBytes has the following code snippet:

This is path 1 for the API with depth 2:
public long getFreeBytes(String p1, String p2){
	long v1 = Binder.clearCallingIdentity();
	File v2 = this.mStorage.findPathForUuid(p1);
	boolean v5 = Installer.checkBeforeRemote();
	if (v5 != 0) {
		boolean v6 = this.mInstalld.isQuotaSupported(p1);
		boolean v4 = v6;
		boolean v3 = v4;
		if (v3 == 0) {
			int v8 = Binder.getCallingUid();
			List v10 = this.mUser.getUsers();
			Iterator v11 = v10.iterator();
			boolean v12 = v11.hasNext();
			if (v12 == 0) {
				Object v13 = v11.next();
				int v17 = Binder.getCallingUid();
				[I v19 = StorageStatsService.getAppIds(UserInfo.id);
				PackageStats v20 = new PackageStats("StorageStatsService");
				int v22 = StorageStatsService.getDefaultFlags();
				this.mInstaller.getUserSize(p1, UserInfo.id, v22, v19, v20);
				boolean v24 = SystemProperties.getBoolean("fw.verify_storage", 0);
				if (v24 == 0) {
					PackageStats v25 = new PackageStats("StorageStatsService");
					this.mInstaller.getUserSize(p1, UserInfo.id, 0, v19, v25);
					StringBuilder v28 = new StringBuilder();
					StringBuilder v30 = v28.append("User ");
					StringBuilder v31 = v28.append(UserInfo.id);
					String v32 = v28.toString();
					StorageStatsService.checkEquals(v32, v25, v20);
					if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
						UserHandle v34 = UserHandle.of(UserInfo.id);
						StorageStatsService$$ExternalSyntheticLambda1 v35 = new StorageStatsService$$ExternalSyntheticLambda1(v20,v34);
						StorageStatsService.forEachStorageStatsAugmenter(v35, "queryStatsForUser");
						StorageStats v38 = StorageStatsService.translate(v20);
						StorageStats v14 = v38;
						boolean v39 = v11.hasNext();
						if (v39 == 0) {
							long v7 = ;
							long v40 = this.mStorage.getStorageCacheBytes(v2, 0);
							long v41 = Math.max(0, (v7 - v40));
							long v42 = v2.getUsableSpace();
							Binder.restoreCallingIdentity(v1);
							return (v42 + v41);
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public long getFreeBytes(String p1, String p2){
	long v1 = Binder.clearCallingIdentity();
	File v2 = this.mStorage.findPathForUuid(p1);
	boolean v5 = Installer.checkBeforeRemote();
	if (v5 != 0) {
		boolean v4 = 0;
		boolean v3 = v4;
		if (v3 == 0) {
			int v7 = Binder.getCallingUid();
			List v9 = this.mUser.getUsers();
			Iterator v10 = v9.iterator();
			boolean v11 = v10.hasNext();
			if (v11 == 0) {
				Object v12 = v10.next();
				int v16 = Binder.getCallingUid();
				[I v18 = StorageStatsService.getAppIds(UserInfo.id);
				PackageStats v19 = new PackageStats("StorageStatsService");
				int v21 = StorageStatsService.getDefaultFlags();
				this.mInstaller.getUserSize(p1, UserInfo.id, v21, v18, v19);
				boolean v23 = SystemProperties.getBoolean("fw.verify_storage", 0);
				if (v23 == 0) {
					PackageStats v24 = new PackageStats("StorageStatsService");
					this.mInstaller.getUserSize(p1, UserInfo.id, 0, v18, v24);
					StringBuilder v27 = new StringBuilder();
					StringBuilder v29 = v27.append("User ");
					StringBuilder v30 = v27.append(UserInfo.id);
					String v31 = v27.toString();
					StorageStatsService.checkEquals(v31, v24, v19);
					if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
						UserHandle v33 = UserHandle.of(UserInfo.id);
						StorageStatsService$$ExternalSyntheticLambda1 v34 = new StorageStatsService$$ExternalSyntheticLambda1(v19,v33);
						StorageStatsService.forEachStorageStatsAugmenter(v34, "queryStatsForUser");
						StorageStats v37 = StorageStatsService.translate(v19);
						StorageStats v13 = v37;
						boolean v38 = v10.hasNext();
						if (v38 == 0) {
							long v6 = ;
							long v39 = this.mStorage.getStorageCacheBytes(v2, 0);
							long v40 = Math.max(0, (v6 - v39));
							long v41 = v2.getUsableSpace();
							Binder.restoreCallingIdentity(v1);
							return (v41 + v40);
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public long getFreeBytes(String p1, String p2){
	long v1 = Binder.clearCallingIdentity();
	File v2 = this.mStorage.findPathForUuid(p1);
	boolean v5 = Installer.checkBeforeRemote();
	if (v5 != 0) {
		boolean v6 = this.mInstalld.isQuotaSupported(p1);
		boolean v4 = v6;
		boolean v3 = v4;
		if (v3 == 0) {
			long v7 = v2.getUsableSpace();
			Binder.restoreCallingIdentity(v1);
			return v7;
		}
	}
}

and the following sink code:
['File v2 = this.mStorage.findPathForUuid(p1);\nboolean v4 = this.mInstaller.isQuotaSupported(p1);\nint v8 = Binder.getCallingUid();\nList v10 = this.mUser.getUsers();\nIterator v11 = v10.iterator();\nPackageStats v20 = new PackageStats("StorageStatsService");\nthis.mInstaller.getUserSize(p1, UserInfo.id, v22, v19, v20);\nlong v40 = this.mStorage.getStorageCacheBytes(v2, 0);\nlong v41 = Math.max(0, (v7 - v40));\nlong v42 = v2.getUsableSpace();\nreturn (v42 + v41);', 'File v2 = this.mStorage.findPathForUuid(p1);\nboolean v4 = this.mInstaller.isQuotaSupported(p1);\nStorageStats v12 = StorageStatsService.queryStatsForUser(p1, UserInfo.id, 0);\nlong v14 = this.mStorage.getStorageCacheBytes(v2, 0);\nlong v15 = Math.max(0, (v5 - v14));\nlong v16 = v2.getUsableSpace();\nreturn (v16 + v15);', 'File v2 = this.mStorage.findPathForUuid(p1);\nboolean v3 = p0.isQuotaSupported(p1, "android");\nlong v4 = p0.getCacheBytes(p1, "android");\nlong v5 = this.mStorage.getStorageCacheBytes(v2, 0);\nlong v6 = Math.max(0, (v4 - v5));\nlong v7 = v2.getUsableSpace();\nreturn (v7 + v6);']

The method getFreeBytes has the following similar APIs:

- API Name: getAllocatableBytes(Ljava/lang/String;ILjava/lang/String;)J with Similarity Score: 0.8378491401672363
  - Access Control Level: SYS_OR_SIG and the following code:
Object v15 = this.mContext.getSystemService(StorageManage.class);
File v18 = v15.findPathForUuid(p1);
long v19 = v18.getUsableSpace();
long v20 = v15.getStorageLowBytes(v18);
long v21 = v15.getStorageFullBytes(v18);
return Math.max(0, (( + ) - ));

- API Name: getAllocatableBytes(Ljava/lang/String;ILjava/lang/String;)J with Similarity Score: 0.8278688192367554
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = p0.adjustAllocateFlags(p2, v1, p3);
Object v3 = this.mContext.getSystemService(StorageManage.class);
File v6 = v3.findPathForUuid(p1);
long v7 = v6.getUsableSpace();
return Math.max(0, (( + ) - ));

