The method setupBcb has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setupBcb(String p1){
	if ( >= 30) {
		String v4 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
		String v5 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
		String v6 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
		boolean v7 = "running".equals(v4);
		if (v7 != 0) {
			boolean v8 = "running".equals(v5);
			if (v8 != 0) {
				boolean v9 = "running".equals(v6);
				if (v9 == 0) {
					if ( != 0) {
						this.mInjector.threadSleep(1000);
						if ( >= 30) {
							String v12 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
							String v13 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
							String v14 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
							boolean v15 = "running".equals(v12);
							if (v15 != 0) {
								boolean v16 = "running".equals(v13);
								if (v16 != 0) {
									boolean v17 = "running".equals(v14);
									if (v17 == 0) {
										if ( != 0) {
											boolean v3 = 1;
											if (v3 != 0) {
												if (1 == 0) {
													SystemProperties.set("ctl.start", "setup-bcb");
													RecoverySystemService$UncryptSocket v21 = new RecoverySystemService$UncryptSocket();
													boolean v23 = v21.connectService();
													if (v23 != 0) {
														v21.close();
														RecoverySystemService$UncryptSocket v20 = ;
														if (v20 != 0) {
															if (1 == 0) {
																byte[] v26 = p2.getBytes(StandardCharsets.UTF_8);
																this.mOutputStream.writeInt(v26.length);
																this.mOutputStream.write(v26, 0, v26.length);
																int v30 = this.mInputStream.readInt();
																int v29 = v30;
																this.mOutputStream.writeInt(0);
																if (v29 != 100) {
																	if (1 == 0) {
																		IoUtils.closeQuietly(this.mInputStream);
																		IoUtils.closeQuietly(this.mOutputStream);
																		IoUtils.closeQuietly(this.mLocalSocket);
																		boolean v1 = 1;
																		return v1;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean setupBcb(String p1){
	if ( >= 30) {
		String v4 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
		String v5 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
		String v6 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
		boolean v7 = "running".equals(v4);
		if (v7 != 0) {
			boolean v8 = "running".equals(v5);
			if (v8 != 0) {
				boolean v9 = "running".equals(v6);
				if (v9 == 0) {
					if ( != 0) {
						this.mInjector.threadSleep(1000);
						if ( >= 30) {
							String v12 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
							String v13 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
							String v14 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
							boolean v15 = "running".equals(v12);
							if (v15 != 0) {
								boolean v16 = "running".equals(v13);
								if (v16 != 0) {
									boolean v17 = "running".equals(v14);
									if (v17 == 0) {
										if ( != 0) {
											boolean v3 = 1;
											if (v3 != 0) {
												if (1 == 0) {
													SystemProperties.set("ctl.start", "setup-bcb");
													RecoverySystemService$UncryptSocket v21 = new RecoverySystemService$UncryptSocket();
													boolean v23 = v21.connectService();
													if (v23 != 0) {
														v21.close();
														RecoverySystemService$UncryptSocket v20 = ;
														if (v20 != 0) {
															if (1 == 0) {
																byte[] v26 = p2.getBytes(StandardCharsets.UTF_8);
																this.mOutputStream.writeInt(v26.length);
																this.mOutputStream.write(v26, 0, v26.length);
																int v30 = this.mInputStream.readInt();
																int v29 = v30;
																this.mOutputStream.writeInt(0);
																if (v29 != 100) {
																	if (1 == 0) {
																		IoUtils.closeQuietly(this.mInputStream);
																		IoUtils.closeQuietly(this.mOutputStream);
																		IoUtils.closeQuietly(this.mLocalSocket);
																		boolean v1 = 1;
																		return v1;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v3 = RecoverySystemService.checkAndWaitForUncryptService();\nRecoverySystemService$UncryptSocket v5 = this.mInjector.connectService();\nv5.sendCommand(p1);', 'boolean v1 = p0.setupOrClearBcb(1, p1);']

The method setupBcb has the following similar APIs:

- API Name: rebootRecoveryWithCommand(Ljava/lang/String;)V with Similarity Score: 1.0
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = RecoverySystemService.checkAndWaitForUncryptService();
RecoverySystemService$UncryptSocket v5 = this.mInjector.connectService();
v5.sendCommand(p1);

- API Name: clearBcb()Z with Similarity Score: 0.9526994228363037
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v1 = p0.setupOrClearBcb(0, 0);
return v1;

