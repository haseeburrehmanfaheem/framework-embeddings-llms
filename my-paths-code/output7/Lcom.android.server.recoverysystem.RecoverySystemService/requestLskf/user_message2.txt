The method requestLskf has the following code snippet:

This is path 1 for the API with depth 2:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPendingRequest.isEmpty();
			boolean v5 = this.mCallerPendingRequest.containsKey(p1);
			if (v5 == 0) {
				Object v12 = this.mCallerPendingRequest.put(p1, p2);
				if (v4 == 0) {
					int v2 = ;
					PackageManager v15 = this.mContext.getPackageManager();
					int v16 = v15.getPackageUidAsUser(p1, 0);
					int v14 = -1;
					int v23 = this.mCallerPendingRequest.size();
					RecoverySystemService$PreferencesManager v24 = this.mPrefs;
					StringBuilder v25 = new StringBuilder();
					StringBuilder v27 = v25.append(p1);
					StringBuilder v28 = v25.append("_request_lskf_timestamp");
					String v29 = v25.toString();
					long v31 = System.currentTimeMillis();
					long v30 = v31;
					SharedPreferences$Editor v33 = this.mSharedPreferences.edit();
					SharedPreferences$Editor v34 = v33.putLong(v29, v30);
					boolean v35 = v34.commit();
					StringBuilder v36 = new StringBuilder();
					StringBuilder v38 = v36.append(p1);
					StringBuilder v39 = v36.append("_request_lskf_count");
					String v40 = v36.toString();
					int v42 = RecoverySystemService$PreferencesManager.getInt(v40, 0);
					RecoverySystemService$PreferencesManager.putInt(v40, (v42 + 1));
					FrameworkStatsLog.write(339, v14, p2, v23);
					if (v2 == 0) {
						long v46 = Binder.clearCallingIdentity();
						Object v49 = this.sLocalServiceObjects.get(LockSettingsInterna.class);
						Object v48 = v49;
						LockSettingsInternal v47 = v48;
						if (v47 != 0) {
							boolean v50 = v47.prepareRebootEscrow();
							if (v50 != 0) {
								p0.clearRoRPreparationState();
								Binder.restoreCallingIdentity(v46);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPendingRequest.isEmpty();
			boolean v5 = this.mCallerPendingRequest.containsKey(p1);
			if (v5 == 0) {
				Object v12 = this.mCallerPendingRequest.put(p1, p2);
				if (v4 == 0) {
					int v2 = ;
					PackageManager v15 = this.mContext.getPackageManager();
					int v16 = v15.getPackageUidAsUser(p1, 0);
					int v14 = -1;
					int v23 = this.mCallerPendingRequest.size();
					RecoverySystemService$PreferencesManager v24 = this.mPrefs;
					StringBuilder v25 = new StringBuilder();
					StringBuilder v27 = v25.append(p1);
					StringBuilder v28 = v25.append("_request_lskf_timestamp");
					String v29 = v25.toString();
					long v31 = System.currentTimeMillis();
					long v30 = v31;
					SharedPreferences$Editor v33 = this.mSharedPreferences.edit();
					SharedPreferences$Editor v34 = v33.putLong(v29, v30);
					boolean v35 = v34.commit();
					StringBuilder v36 = new StringBuilder();
					StringBuilder v38 = v36.append(p1);
					StringBuilder v39 = v36.append("_request_lskf_count");
					String v40 = v36.toString();
					int v42 = RecoverySystemService$PreferencesManager.getInt(v40, 0);
					RecoverySystemService$PreferencesManager.putInt(v40, (v42 + 1));
					FrameworkStatsLog.write(339, v14, p2, v23);
					if (v2 == 0) {
						long v46 = Binder.clearCallingIdentity();
						Object v49 = this.sLocalServiceObjects.get(LockSettingsInterna.class);
						Object v48 = v49;
						LockSettingsInternal v47 = v48;
						if (v47 != 0) {
							boolean v50 = v47.prepareRebootEscrow();
							if (v50 != 0) {
								Binder.restoreCallingIdentity(v46);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPreparedForReboot.contains(p1);
			if (v4 == 0) {
				boolean v11 = this.mCallerPreparedForReboot.add(p1);
				int v2 = 1;
				PackageManager v14 = this.mContext.getPackageManager();
				int v15 = v14.getPackageUidAsUser(p1, 0);
				int v13 = -1;
				int v22 = this.mCallerPendingRequest.size();
				RecoverySystemService$PreferencesManager v23 = this.mPrefs;
				StringBuilder v24 = new StringBuilder();
				StringBuilder v26 = v24.append(p1);
				StringBuilder v27 = v24.append("_request_lskf_timestamp");
				String v28 = v24.toString();
				long v30 = System.currentTimeMillis();
				long v29 = v30;
				SharedPreferences$Editor v32 = this.mSharedPreferences.edit();
				SharedPreferences$Editor v33 = v32.putLong(v28, v29);
				boolean v34 = v33.commit();
				StringBuilder v35 = new StringBuilder();
				StringBuilder v37 = v35.append(p1);
				StringBuilder v38 = v35.append("_request_lskf_count");
				String v39 = v35.toString();
				int v41 = RecoverySystemService$PreferencesManager.getInt(v39, 0);
				RecoverySystemService$PreferencesManager.putInt(v39, (v41 + 1));
				FrameworkStatsLog.write(339, v13, p2, v22);
				if (v2 == 0) {
					long v45 = Binder.clearCallingIdentity();
					Object v48 = this.sLocalServiceObjects.get(LockSettingsInterna.class);
					Object v47 = v48;
					LockSettingsInternal v46 = v47;
					if (v46 != 0) {
						boolean v49 = v46.prepareRebootEscrow();
						if (v49 != 0) {
							p0.clearRoRPreparationState();
							Binder.restoreCallingIdentity(v45);
							return 0;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v12 = this.mCallerPendingRequest.put(p1, p2);\nSharedPreferences$Editor v33 = this.mSharedPreferences.edit();\nSharedPreferences$Editor v34 = v33.putLong(v29, v30);\nboolean v35 = v34.commit();', 'int v14 = this.mInjector.getUidFromPackageName(p1);\nRecoverySystemService$PreferencesManager v16 = this.mInjector.getMetricsPrefs();\nv16.putLong(v21, v22);\nv16.incrementIntKey(v28, 0);', 'long v4 = Binder.clearCallingIdentity();\nLockSettingsInternal v5 = this.mInjector.getLockSettingsService();\nboolean v6 = v5.prepareRebootEscrow();']

The method requestLskf has the following similar APIs:

- API Name: clearLskf(Ljava/lang/String;)Z with Similarity Score: 0.8709185123443604
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = p0.updateRoRPreparationStateOnClear(p1);
long v3 = Binder.clearCallingIdentity();
LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
boolean v5 = v4.clearRebootEscrow();

- API Name: getCapabilitiesAndConfig()Landroid/app/time/TimeZoneCapabilitiesAndConfig; with Similarity Score: 0.7943603992462158
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = this.mCallerIdentityInjector.getCallingUserId();
long v4 = this.mCallerIdentityInjector.clearCallingIdentity();
ConfigurationInternal v5 = this.mServiceConfigAccessor.getConfigurationInternal(v1);
TimeZoneCapabilitiesAndConfig v6 = v5.createCapabilitiesAndConfig();
return v2;

