This is path 1 for the API with depth 2:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPendingRequest.isEmpty();
			boolean v5 = this.mCallerPendingRequest.containsKey(p1);
			if (v5 == 0) {
				Object v12 = this.mCallerPendingRequest.put(p1, p2);
				if (v4 == 0) {
					int v2 = ;
					PackageManager v15 = this.mContext.getPackageManager();
					int v16 = v15.getPackageUidAsUser(p1, 0);
					int v14 = -1;
					int v23 = this.mCallerPendingRequest.size();
					RecoverySystemService$PreferencesManager v24 = this.mPrefs;
					StringBuilder v25 = new StringBuilder();
					StringBuilder v27 = v25.append(p1);
					StringBuilder v28 = v25.append("_request_lskf_timestamp");
					String v29 = v25.toString();
					long v31 = System.currentTimeMillis();
					long v30 = v31;
					SharedPreferences$Editor v33 = this.mSharedPreferences.edit();
					SharedPreferences$Editor v34 = v33.putLong(v29, v30);
					boolean v35 = v34.commit();
					StringBuilder v36 = new StringBuilder();
					StringBuilder v38 = v36.append(p1);
					StringBuilder v39 = v36.append("_request_lskf_count");
					String v40 = v36.toString();
					int v42 = RecoverySystemService$PreferencesManager.getInt(v40, 0);
					RecoverySystemService$PreferencesManager.putInt(v40, (v42 + 1));
					FrameworkStatsLog.write(339, v14, p2, v23);
					if (v2 == 0) {
						long v46 = Binder.clearCallingIdentity();
						Object v49 = this.sLocalServiceObjects.get(LockSettingsInterna.class);
						Object v48 = v49;
						LockSettingsInternal v47 = v48;
						if (v47 != 0) {
							boolean v50 = v47.prepareRebootEscrow();
							if (v50 != 0) {
								p0.clearRoRPreparationState();
								Binder.restoreCallingIdentity(v46);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		boolean v3 = this.mCallerPreparedForReboot.isEmpty();
		if (v3 != 0) {
			boolean v4 = this.mCallerPendingRequest.isEmpty();
			boolean v5 = this.mCallerPendingRequest.containsKey(p1);
			if (v5 == 0) {
				Object v12 = this.mCallerPendingRequest.put(p1, p2);
				if (v4 == 0) {
					int v2 = ;
					int v14 = this.mInjector.getUidFromPackageName(p1);
					int v15 = this.mCallerPendingRequest.size();
					RecoverySystemService$PreferencesManager v16 = this.mInjector.getMetricsPrefs();
					StringBuilder v17 = new StringBuilder();
					StringBuilder v19 = v17.append(p1);
					StringBuilder v20 = v17.append("_request_lskf_timestamp");
					String v21 = v17.toString();
					long v22 = this.mInjector.getCurrentTimeMillis();
					v16.putLong(v21, v22);
					StringBuilder v24 = new StringBuilder();
					StringBuilder v26 = v24.append(p1);
					StringBuilder v27 = v24.append("_request_lskf_count");
					String v28 = v24.toString();
					v16.incrementIntKey(v28, 0);
					this.mInjector.reportRebootEscrowPreparationMetrics(v14, v2, v15);
					if (v2 == 0) {
						long v31 = Binder.clearCallingIdentity();
						Object v33 = LocalServices.getService(LockSettingsInterna.class);
						LockSettingsInternal v32 = v33;
						if (v32 != 0) {
							boolean v34 = v32.prepareRebootEscrow();
							if (v34 != 0) {
								this.mCallerPendingRequest.clear();
								this.mCallerPreparedForReboot.clear();
								Binder.restoreCallingIdentity(v31);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean requestLskf(String p1, IntentSender p2){
	if (p1 != 0) {
		int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
		p0.reportMetricsOnRequestLskf(p1, v2);
		if (v2 == 0) {
			long v4 = Binder.clearCallingIdentity();
			LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
			if (v5 != 0) {
				boolean v6 = v5.prepareRebootEscrow();
				if (v6 != 0) {
					p0.clearRoRPreparationState();
					Binder.restoreCallingIdentity(v4);
					return 0;
				}
			}
		}
	}
}
