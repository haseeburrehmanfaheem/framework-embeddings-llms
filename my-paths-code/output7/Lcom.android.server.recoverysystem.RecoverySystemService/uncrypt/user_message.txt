This is path 1 for the API with depth 2:
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	if ( >= 30) {
		String v4 = SystemProperties.get("init.svc.uncrypt");
		String v3 = v4;
		String v6 = SystemProperties.get("init.svc.setup-bcb");
		String v5 = v6;
		String v8 = SystemProperties.get("init.svc.clear-bcb");
		String v7 = v8;
		boolean v9 = "running".equals(v3);
		if (v9 != 0) {
			boolean v10 = "running".equals(v5);
			if (v10 != 0) {
				boolean v11 = "running".equals(v7);
				if (v11 == 0) {
					if ( != 0) {
						Thread.sleep(1000);
						if ( >= 30) {
							String v16 = SystemProperties.get("init.svc.uncrypt");
							String v15 = v16;
							String v18 = SystemProperties.get("init.svc.setup-bcb");
							String v17 = v18;
							String v20 = SystemProperties.get("init.svc.clear-bcb");
							String v19 = v20;
							boolean v21 = "running".equals(v15);
							if (v21 != 0) {
								boolean v22 = "running".equals(v17);
								if (v22 != 0) {
									boolean v23 = "running".equals(v19);
									if (v23 == 0) {
										if ( != 0) {
											boolean v2 = 1;
											if (v2 != 0) {
												boolean v24 = this.mInjector.uncryptPackageFileDelete();
												FileWriter v25 = this.mInjector.getUncryptPackageFileWriter();
												StringBuilder v26 = new StringBuilder();
												StringBuilder v28 = v26.append(p1);
												StringBuilder v29 = v26.append("
");
												String v30 = v26.toString();
												v25.write(v30);
												v25.close();
												this.mInjector.systemPropertiesSet("ctl.start", "uncrypt");
												RecoverySystemService$UncryptSocket v35 = new RecoverySystemService$UncryptSocket();
												LocalSocket v38 = new LocalSocket();
												this.mLocalSocket = v38;
												if ( >= 30) {
													Thread.sleep(1000);
													if ( >= 30) {
														LocalSocketAddress v42 = new LocalSocketAddress("uncrypt",LocalSocketAddress$Namespace.RESERVED);
														this.mLocalSocket.connect(v42);
														if ( != 0) {
															DataInputStream v45 = new DataInputStream(v46);
															InputStream v46 = this.mLocalSocket.getInputStream();
															this.mInputStream = v45;
															DataOutputStream v48 = new DataOutputStream;
															RecoverySystemService$UncryptSocket.close();
															boolean v37 = 0;
															if (v37 != 0) {
																IoUtils.closeQuietly(this.mInputStream);
																IoUtils.closeQuietly(this.mOutputStream);
																IoUtils.closeQuietly(this.mLocalSocket);
																RecoverySystemService$UncryptSocket v34 = ;
																if (v34 != 0) {
																	int v54 = v34.getPercentageUncrypted();
																	if (v54 != ) {
																		if ( == -2147483648) {
																			int v55 = v34.getPercentageUncrypted();
																			if (v55 != ) {
																				if ( == -2147483648) {
																					if (v55 < 0) {
																						if (v55 > 100) {
																							if (p2 == 0) {
																								p2.onProgress(v55);
																								if (v55 != 100) {
																									v34.sendAck();
																									v34.close();
																									return 1;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	if ( >= 30) {
		String v3 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
		String v4 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
		String v5 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
		boolean v6 = "running".equals(v3);
		if (v6 != 0) {
			boolean v7 = "running".equals(v4);
			if (v7 != 0) {
				boolean v8 = "running".equals(v5);
				if (v8 == 0) {
					if ( != 0) {
						this.mInjector.threadSleep(1000);
						if ( >= 30) {
							String v11 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
							String v12 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
							String v13 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
							boolean v14 = "running".equals(v11);
							if (v14 != 0) {
								boolean v15 = "running".equals(v12);
								if (v15 != 0) {
									boolean v16 = "running".equals(v13);
									if (v16 == 0) {
										if ( != 0) {
											boolean v2 = 1;
											if (v2 != 0) {
												boolean v18 = RecoverySystem.UNCRYPT_PACKAGE_FILE.delete();
												boolean v17 = v18;
												FileWriter v20 = new FileWriter(RecoverySystem.UNCRYPT_PACKAGE_FILE);
												FileWriter v19 = v20;
												StringBuilder v22 = new StringBuilder();
												StringBuilder v24 = v22.append(p1);
												StringBuilder v25 = v22.append("
");
												String v26 = v22.toString();
												v19.write(v26);
												v19.close();
												SystemProperties.set("ctl.start", "uncrypt");
												RecoverySystemService$UncryptSocket v32 = new RecoverySystemService$UncryptSocket();
												boolean v34 = v32.connectService();
												if (v34 != 0) {
													v32.close();
													RecoverySystemService$UncryptSocket v31 = ;
													if (v31 != 0) {
														int v37 = this.mInputStream.readInt();
														int v36 = v37;
														if (v36 != ) {
															if ( == -2147483648) {
																int v39 = this.mInputStream.readInt();
																int v38 = v39;
																if (v38 != ) {
																	if ( == -2147483648) {
																		if (v38 < 0) {
																			if (v38 > 100) {
																				if (p2 == 0) {
																					p2.onProgress(v38);
																					if (v38 != 100) {
																						this.mOutputStream.writeInt(0);
																						IoUtils.closeQuietly(this.mInputStream);
																						IoUtils.closeQuietly(this.mOutputStream);
																						IoUtils.closeQuietly(this.mLocalSocket);
																						return 1;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	if (v2 != 0) {
		boolean v3 = this.mInjector.uncryptPackageFileDelete();
		FileWriter v4 = this.mInjector.getUncryptPackageFileWriter();
		StringBuilder v5 = new StringBuilder();
		StringBuilder v7 = v5.append(p1);
		StringBuilder v8 = v5.append("
");
		String v9 = v5.toString();
		v4.write(v9);
		v4.close();
		this.mInjector.systemPropertiesSet("ctl.start", "uncrypt");
		RecoverySystemService$UncryptSocket v13 = this.mInjector.connectService();
		if (v13 != 0) {
			int v14 = v13.getPercentageUncrypted();
			if (v14 != ) {
				if ( == -2147483648) {
					int v15 = v13.getPercentageUncrypted();
					if (v15 != ) {
						if ( == -2147483648) {
							if (v15 < 0) {
								if (v15 > 100) {
									if (p2 == 0) {
										p2.onProgress(v15);
										if (v15 != 100) {
											v13.sendAck();
											v13.close();
											return 1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
