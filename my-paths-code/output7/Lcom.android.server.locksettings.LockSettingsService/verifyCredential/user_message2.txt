The method verifyCredential has the following code snippet:

This is path 1 for the API with depth 2:
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	if (v1 != 0) {
		if (v2 == 0) {
			long v3 = Binder.clearCallingIdentity();
			if (p1 == 0) {
				boolean v5 = p1.isNone();
				if (v5 != 0) {
					if (p2 != -9999) {
						ContentResolver v6 = this.mContext.getContentResolver();
						int v8 = Settings$Global.getInt(v6, "device_provisioned", 0);
						int v7 = v8;
						if (v7 == 0) {
							boolean v10 = this.mInjector.hasEnrolledBiometrics(p2);
							if ((p4 & 1) == 0) {
								boolean v19 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
								if (v19 != 0) {
									if (p2 != -9999) {
										long v20 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
										IGateKeeperService v21 = LockSettingsService.getGateKeeperService();
										SyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v20, p1, p2, p3);
										int v23 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
										if (v23 != 0) {
											byte[] v24 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
											this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v24);
											IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
											VerifyCredentialResponse v27 = this.mSpManager.verifyChallenge(v26, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
											int v28 = v27.getResponseCode();
											if (v28 == 0) {
												int v29 = .getResponseCode();
												if (v29 != 0) {
													int v30 = .getResponseCode();
													if (v30 != 1) {
														int v31 = .getTimeout();
														if (v31 <= 0) {
															LockSettingsService.requireStrongAuth(8, p2);
															boolean v33 = .isMatched();
															if (v33 == 0) {
																if ( == 0) {
																	VerifyCredentialResponse v9 = ;
																	if (v9 == 0) {
																		if (p2 != -9999) {
																			LockSettingsStorage$CredentialHash v35 = LockSettingsStorage.readPasswordHashIfExists(p2);
																			if (v35 == 0) {
																				LockSettingsStorage$CredentialHash v36 = LockSettingsStorage.readPatternHashIfExists(p2);
																				if (v36 == 0) {
																					LockSettingsStorage$CredentialHash v37 = LockSettingsStorage$CredentialHash.createEmptyHash();
																					LockSettingsStorage$CredentialHash v34 = v37;
																					if (LockSettingsStorage$CredentialHash.type != 2) {
																						int v39 = LockscreenCredential.getType();
																						if (v39 == 4) {
																							int v40 = LockscreenCredential.getType();
																							if (v40 != 3) {
																								boolean v38 = ;
																								if (v38 != 0) {
																									if (v34 == 0) {
																										if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																											boolean v42 = p1.isNone();
																											if (v42 == 0) {
																												if (v34 == 0) {
																													if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																														boolean v43 = p1.isNone();
																														if (v43 == 0) {
																															StrictMode.noteDiskRead();
																															IGateKeeperService v45 = LockSettingsService.getGateKeeperService();
																															byte[] v46 = p1.getCredential();
																															GateKeeperResponse v47 = v45.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v46);
																															VerifyCredentialResponse v48 = LockSettingsService.convertResponse();
																															boolean v49 = .getShouldReEnroll();
																															int v50 = v48.getResponseCode();
																															if (v50 != 0) {
																																if (p3 == 0) {
																																	p3.onCredentialVerified();
																																	LockSettingsService.setUserPasswordMetrics(p1, p2);
																																	byte[] v54 = p1.getCredential();
																																	LockSettingsService.unlockKeystore(v54, p2);
																																	byte[] v62 = LockSettingsService.secretFromCredential(p1);
																																	LockSettingsService.unlockUser(p2, v62);
																																	boolean v64 = LockSettingsService.isProfileWithSeparatedLock(p2);
																																	if (v64 == 0) {
																																		LockSettingsService.setDeviceUnlockedForUser(p2);
																																		if (v49 == 0) {
																																			boolean v66 = LockSettingsService.shouldMigrateToSyntheticPasswordLocked(p2);
																																			if (v66 == 0) {
																																				LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																																				VerifyCredentialResponse v41 = v48;
																																				int v68 = this.mResponseCode;
																																				if (v68 != 0) {
																																					Message v70 = this.mHandler.obtainMessage(5, p2, 0);
																																					v70.sendToTarget();
																																					VerifyCredentialResponse v4 = v41;
																																					Binder.restoreCallingIdentity(v3);
																																					p0.scheduleGc();
																																					return v4;
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	if (v1 != 0) {
		if (v2 == 0) {
			long v3 = Binder.clearCallingIdentity();
			if (p1 == 0) {
				boolean v5 = p1.isNone();
				if (v5 != 0) {
					if (p2 != -9999) {
						ContentResolver v6 = this.mContext.getContentResolver();
						int v8 = Settings$Global.getInt(v6, "device_provisioned", 0);
						int v7 = v8;
						if (v7 == 0) {
							boolean v10 = this.mInjector.hasEnrolledBiometrics(p2);
							if ((p4 & 1) == 0) {
								boolean v19 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
								if (v19 != 0) {
									if (p2 != -9999) {
										long v20 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
										IGateKeeperService v21 = LockSettingsService.getGateKeeperService();
										SyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v20, p1, p2, p3);
										int v23 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
										if (v23 != 0) {
											byte[] v24 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
											this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v24);
											IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
											VerifyCredentialResponse v27 = this.mSpManager.verifyChallenge(v26, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
											int v28 = v27.getResponseCode();
											if (v28 == 0) {
												int v29 = .getResponseCode();
												if (v29 != 0) {
													int v30 = .getResponseCode();
													if (v30 != 1) {
														int v31 = .getTimeout();
														if (v31 <= 0) {
															LockSettingsService.requireStrongAuth(8, p2);
															boolean v33 = .isMatched();
															if (v33 == 0) {
																if ( == 0) {
																	VerifyCredentialResponse v9 = ;
																	if (v9 == 0) {
																		if (p2 != -9999) {
																			LockSettingsStorage$CredentialHash v35 = LockSettingsStorage.readPasswordHashIfExists(p2);
																			if (v35 == 0) {
																				LockSettingsStorage$CredentialHash v36 = LockSettingsStorage.readPatternHashIfExists(p2);
																				if (v36 == 0) {
																					LockSettingsStorage$CredentialHash v34 = v36;
																					if (LockSettingsStorage$CredentialHash.type != 2) {
																						int v38 = LockscreenCredential.getType();
																						if (v38 == 4) {
																							int v39 = LockscreenCredential.getType();
																							if (v39 != 3) {
																								boolean v37 = ;
																								if (v37 != 0) {
																									if (v34 == 0) {
																										if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																											boolean v41 = p1.isNone();
																											if (v41 == 0) {
																												if (v34 == 0) {
																													if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																														boolean v42 = p1.isNone();
																														if (v42 == 0) {
																															StrictMode.noteDiskRead();
																															IGateKeeperService v44 = LockSettingsService.getGateKeeperService();
																															byte[] v45 = p1.getCredential();
																															GateKeeperResponse v46 = v44.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v45);
																															VerifyCredentialResponse v47 = LockSettingsService.convertResponse();
																															boolean v48 = .getShouldReEnroll();
																															int v49 = v47.getResponseCode();
																															if (v49 != 0) {
																																if (p3 == 0) {
																																	p3.onCredentialVerified();
																																	LockSettingsService.setUserPasswordMetrics(p1, p2);
																																	byte[] v53 = p1.getCredential();
																																	LockSettingsService.unlockKeystore(v53, p2);
																																	byte[] v61 = LockSettingsService.secretFromCredential(p1);
																																	LockSettingsService.unlockUser(p2, v61);
																																	boolean v63 = LockSettingsService.isProfileWithSeparatedLock(p2);
																																	if (v63 == 0) {
																																		LockSettingsService.setDeviceUnlockedForUser(p2);
																																		if (v48 == 0) {
																																			boolean v65 = LockSettingsService.shouldMigrateToSyntheticPasswordLocked(p2);
																																			if (v65 == 0) {
																																				LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																																				VerifyCredentialResponse v40 = v47;
																																				int v67 = this.mResponseCode;
																																				if (v67 != 0) {
																																					Message v69 = this.mHandler.obtainMessage(5, p2, 0);
																																					v69.sendToTarget();
																																					VerifyCredentialResponse v4 = v40;
																																					Binder.restoreCallingIdentity(v3);
																																					p0.scheduleGc();
																																					return v4;
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v23 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();\nIGateKeeperService v21 = LockSettingsService.getGateKeeperService();\nSyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v20, p1, p2, p3);\nVerifyCredentialResponse v27 = this.mSpManager.verifyChallenge(v26, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);', 'LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);\nthis.mStorage.readCredentialHash(p2);', 'p0.doVerifyCredential(p1, p2, 0, p3);']

The method verifyCredential has the following similar APIs:

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9292989373207092
  - Access Control Level: SYS_OR_SIG and the following code:
VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9167026281356812
  - Access Control Level: SYS_OR_SIG and the following code:
VerifyCredentialResponse v6 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, p3, 0);
LockSettingsStorage$CredentialHash v7 = this.mStorage.readCredentialHash(p2);

