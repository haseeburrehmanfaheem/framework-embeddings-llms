The method getCredentialType has the following code snippet:

This is path 1 for the API with depth 2:
public int getCredentialType(int p1){
	if (p1 != -9999) {
		if (p1 != -9999) {
			LockSettingsStorage$PersistentData v4 = this.mStorage.readPersistentDataBlock();
			if (LockSettingsStorage$PersistentData.type == 1) {
				if (LockSettingsStorage$PersistentData.type != 2) {
					boolean v3 = ;
					if (v3 == 0) {
						long v6 = LockSettingsService.getLong("sp-handle", 0, p1);
						long v5 = v6;
						byte[] v8 = SyntheticPasswordManager.loadState("pwd", v5, p1);
						if (v8 != 0) {
							int v7 = -1;
							if (v7 == 2) {
								long v16 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
								int v15 = v16;
								boolean v18 = LockPatternUtils.isQualityAlphabeticPassword(v15);
								if (v18 == 0) {
									boolean v19 = LockPatternUtils.isQualityNumericPin(v15);
									if (v19 == 0) {
										int v17 = 3;
										int v2 = v17;
										return v2;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int getCredentialType(int p1){
	if (p1 != -9999) {
		if (p1 != -9999) {
			LockSettingsStorage$PersistentData v4 = this.mStorage.readPersistentDataBlock();
			if (LockSettingsStorage$PersistentData.type == 1) {
				if (LockSettingsStorage$PersistentData.type != 2) {
					boolean v3 = ;
					if (v3 == 0) {
						long v6 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
						int v5 = v6;
						if (v5 != 65536) {
							String v8 = LockSettingsStorage.getLockPatternFilename(p1);
							boolean v9 = LockSettingsStorage.hasFile(v8);
							boolean v7 = v9;
							if (v7 == 0) {
								if (v5 < 131072) {
									String v11 = LockSettingsStorage.getLockPasswordFilename(p1);
									boolean v12 = LockSettingsStorage.hasFile(v11);
									boolean v10 = v12;
									if (v10 == 0) {
										boolean v14 = LockPatternUtils.isQualityAlphabeticPassword(v5);
										if (v14 == 0) {
											boolean v15 = LockPatternUtils.isQualityNumericPin(v5);
											if (v15 == 0) {
												int v13 = 3;
												int v2 = v13;
												return v2;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v6 = LockSettingsService.getLong("sp-handle", 0, p1);\nbyte[] v8 = SyntheticPasswordManager.loadState("pwd", v5, p1);\nlong v16 = this.mStorage.getLong("lockscreen.password_type", 0, p1);\nint v2 = v17; return v2;', 'boolean v3 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p1);\nint v4 = LockSettingsService.getKeyguardStoredQuality(p1);\nboolean v5 = this.mStorage.hasPattern(p1);\nint v7 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4); int v2 = v7; return v2;', 'int v2 = p0.getCredentialTypeInternal(p1); return v2;']

The method getCredentialType has the following similar APIs:

- API Name: getBoolean(Ljava/lang/String;ZI)Z with Similarity Score: 0.9588590264320374
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = p0.getCredentialTypeInternal(p3);

- API Name: getBoolean(Ljava/lang/String;ZI)Z with Similarity Score: 0.9276578426361084
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v4 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
int v5 = LockSettingsService.getKeyguardStoredQuality(p3);
boolean v6 = this.mStorage.hasPattern(p3);
boolean v7 = this.mStorage.hasPassword(p3);

