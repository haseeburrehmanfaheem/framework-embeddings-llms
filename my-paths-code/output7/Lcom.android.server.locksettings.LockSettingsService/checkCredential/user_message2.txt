The method checkCredential has the following code snippet:

This is path 1 for the API with depth 2:
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	if (p1 == 0) {
		boolean v3 = p1.isNone();
		if (v3 != 0) {
			if (p2 != -9999) {
				ContentResolver v4 = this.mContext.getContentResolver();
				int v6 = Settings$Global.getInt(v4, "device_provisioned", 0);
				int v5 = v6;
				if (v5 == 0) {
					boolean v8 = this.mInjector.hasEnrolledBiometrics(p2);
					if ((p4 & 1) == 0) {
						boolean v17 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
						if (v17 != 0) {
							if (p2 != -9999) {
								long v18 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
								IGateKeeperService v19 = LockSettingsService.getGateKeeperService();
								SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);
								int v21 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
								if (v21 != 0) {
									byte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
									this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);
									IGateKeeperService v24 = LockSettingsService.getGateKeeperService();
									VerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
									int v26 = v25.getResponseCode();
									if (v26 == 0) {
										int v27 = .getResponseCode();
										if (v27 != 0) {
											int v28 = .getResponseCode();
											if (v28 != 1) {
												int v29 = .getTimeout();
												if (v29 <= 0) {
													LockSettingsService.requireStrongAuth(8, p2);
													boolean v31 = .isMatched();
													if (v31 == 0) {
														if ( == 0) {
															VerifyCredentialResponse v7 = ;
															if (v7 == 0) {
																if (p2 != -9999) {
																	LockSettingsStorage$CredentialHash v33 = LockSettingsStorage.readPasswordHashIfExists(p2);
																	if (v33 == 0) {
																		LockSettingsStorage$CredentialHash v34 = LockSettingsStorage.readPatternHashIfExists(p2);
																		if (v34 == 0) {
																			LockSettingsStorage$CredentialHash v35 = LockSettingsStorage$CredentialHash.createEmptyHash();
																			LockSettingsStorage$CredentialHash v32 = v35;
																			if (LockSettingsStorage$CredentialHash.type != 2) {
																				int v37 = LockscreenCredential.getType();
																				if (v37 == 4) {
																					int v38 = LockscreenCredential.getType();
																					if (v38 != 3) {
																						boolean v36 = ;
																						if (v36 != 0) {
																							if (v32 == 0) {
																								if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																									boolean v40 = p1.isNone();
																									if (v40 == 0) {
																										if (v32 == 0) {
																											if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																												boolean v41 = p1.isNone();
																												if (v41 == 0) {
																													StrictMode.noteDiskRead();
																													IGateKeeperService v43 = LockSettingsService.getGateKeeperService();
																													byte[] v44 = p1.getCredential();
																													GateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);
																													VerifyCredentialResponse v46 = LockSettingsService.convertResponse();
																													boolean v47 = .getShouldReEnroll();
																													int v48 = v46.getResponseCode();
																													if (v48 != 0) {
																														if (p3 == 0) {
																															p3.onCredentialVerified();
																															LockSettingsService.setUserPasswordMetrics(p1, p2);
																															byte[] v52 = p1.getCredential();
																															LockSettingsService.unlockKeystore(v52, p2);
																															byte[] v60 = LockSettingsService.secretFromCredential(p1);
																															LockSettingsService.unlockUser(p2, v60);
																															boolean v62 = LockSettingsService.isProfileWithSeparatedLock(p2);
																															if (v62 == 0) {
																																LockSettingsService.setDeviceUnlockedForUser(p2);
																																if (v47 == 0) {
																																	boolean v64 = LockSettingsService.shouldMigrateToSyntheticPasswordLocked(p2);
																																	if (v64 == 0) {
																																		LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																																		VerifyCredentialResponse v39 = v46;
																																		int v66 = this.mResponseCode;
																																		if (v66 != 0) {
																																			Message v68 = this.mHandler.obtainMessage(5, p2, 0);
																																			v68.sendToTarget();
																																			VerifyCredentialResponse v2 = v39;
																																			p0.scheduleGc();
																																			return v2;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	if (p1 == 0) {
		boolean v3 = p1.isNone();
		if (v3 != 0) {
			if (p2 != -9999) {
				ContentResolver v4 = this.mContext.getContentResolver();
				int v6 = Settings$Global.getInt(v4, "device_provisioned", 0);
				int v5 = v6;
				if (v5 == 0) {
					boolean v8 = this.mInjector.hasEnrolledBiometrics(p2);
					if ((p4 & 1) == 0) {
						boolean v17 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
						if (v17 != 0) {
							if (p2 != -9999) {
								long v18 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
								IGateKeeperService v19 = LockSettingsService.getGateKeeperService();
								SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);
								int v21 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
								if (v21 != 0) {
									byte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
									this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);
									IGateKeeperService v24 = LockSettingsService.getGateKeeperService();
									VerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
									int v26 = v25.getResponseCode();
									if (v26 == 0) {
										int v27 = .getResponseCode();
										if (v27 != 0) {
											int v28 = .getResponseCode();
											if (v28 != 1) {
												int v29 = .getTimeout();
												if (v29 <= 0) {
													LockSettingsService.requireStrongAuth(8, p2);
													boolean v31 = .isMatched();
													if (v31 == 0) {
														if ( == 0) {
															VerifyCredentialResponse v7 = ;
															if (v7 == 0) {
																if (p2 != -9999) {
																	LockSettingsStorage$CredentialHash v33 = LockSettingsStorage.readPasswordHashIfExists(p2);
																	if (v33 == 0) {
																		LockSettingsStorage$CredentialHash v34 = LockSettingsStorage.readPatternHashIfExists(p2);
																		if (v34 == 0) {
																			LockSettingsStorage$CredentialHash v32 = v34;
																			if (LockSettingsStorage$CredentialHash.type != 2) {
																				int v36 = LockscreenCredential.getType();
																				if (v36 == 4) {
																					int v37 = LockscreenCredential.getType();
																					if (v37 != 3) {
																						boolean v35 = ;
																						if (v35 != 0) {
																							if (v32 == 0) {
																								if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																									boolean v39 = p1.isNone();
																									if (v39 == 0) {
																										if (v32 == 0) {
																											if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																												boolean v40 = p1.isNone();
																												if (v40 == 0) {
																													StrictMode.noteDiskRead();
																													IGateKeeperService v42 = LockSettingsService.getGateKeeperService();
																													byte[] v43 = p1.getCredential();
																													GateKeeperResponse v44 = v42.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v43);
																													VerifyCredentialResponse v45 = LockSettingsService.convertResponse();
																													boolean v46 = .getShouldReEnroll();
																													int v47 = v45.getResponseCode();
																													if (v47 != 0) {
																														if (p3 == 0) {
																															p3.onCredentialVerified();
																															LockSettingsService.setUserPasswordMetrics(p1, p2);
																															byte[] v51 = p1.getCredential();
																															LockSettingsService.unlockKeystore(v51, p2);
																															byte[] v59 = LockSettingsService.secretFromCredential(p1);
																															LockSettingsService.unlockUser(p2, v59);
																															boolean v61 = LockSettingsService.isProfileWithSeparatedLock(p2);
																															if (v61 == 0) {
																																LockSettingsService.setDeviceUnlockedForUser(p2);
																																if (v46 == 0) {
																																	boolean v63 = LockSettingsService.shouldMigrateToSyntheticPasswordLocked(p2);
																																	if (v63 == 0) {
																																		LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																																		VerifyCredentialResponse v38 = v45;
																																		int v65 = this.mResponseCode;
																																		if (v65 != 0) {
																																			Message v67 = this.mHandler.obtainMessage(5, p2, 0);
																																			v67.sendToTarget();
																																			VerifyCredentialResponse v2 = v38;
																																			p0.scheduleGc();
																																			return v2;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['IGateKeeperService v19 = LockSettingsService.getGateKeeperService();\nSyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);\nVerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);\nLockSettingsService.unlockKeystore(v52, p2);\nLockSettingsService.unlockUser(p2, v60);', 'VerifyCredentialResponse v6 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, p3, 0);\nLockSettingsStorage$CredentialHash v7 = this.mStorage.readCredentialHash(p2);', 'VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);']

The method checkCredential has the following similar APIs:

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9860289096832275
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, p2, p3);
VerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9497015476226807
  - Access Control Level: SYS_OR_SIG and the following code:
VerifyCredentialResponse v10 = LockSettingsService.spBasedDoVerifyCredential(p1, UserInfo.id, 0, p3);
LockSettingsStorage$CredentialHash v11 = this.mStorage.readCredentialHash(UserInfo.id);

