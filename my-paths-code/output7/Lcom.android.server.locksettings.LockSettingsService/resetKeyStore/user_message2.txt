The method resetKeyStore has the following code snippet:

This is path 1 for the API with depth 2:
public void resetKeyStore(int p1){
	ArrayList v2 = new ArrayList();
	ArrayList v4 = new ArrayList();
	List v6 = this.mUserManager.getProfiles(p1);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		UserHandle v12 = UserHandle.of(p1);
		boolean v13 = this.mUserManagerCache.containsKey(v12);
		if (v13 == 0) {
			Context v14 = this.mContext.createPackageContextAsUser("system", 0, v12);
			Object v15 = v14.getSystemService(UserManage.class);
			Object v16 = this.mUserManagerCache.put(v12, v15);
			UserManager v11 = v15;
			boolean v17 = v11.isCredentialSharableWithParent();
			boolean v10 = v17;
			if (v10 == 0) {
				String v20 = LockSettingsStorage.getString("lockscreen.profilechallenge", 0, p1);
				boolean v21 = TextUtils.isEmpty(v20);
				if (v21 == 0) {
					boolean v22 = v20.equals("1");
					if (v22 != 0) {
						boolean v23 = v20.equals("true");
						if (v23 == 0) {
							boolean v19 = ;
							boolean v18 = v19;
							if (v18 != 0) {
								String v26 = LockSettingsStorage.getLockCredentialFilePathForUser(p1, "gatekeeper.profile.key");
								String v25 = v26;
								byte[] v28 = LockSettingsStorage.readFile(v25);
								if (v28 == 0) {
									if (v28.length <= 0) {
										boolean v27 = ;
										boolean v24 = v27;
										if (v24 == 0) {
											String v31 = LockSettingsStorage.getChildProfileLockFile(p1);
											byte[] v32 = LockSettingsStorage.readFile(v31);
											byte[] v30 = v32;
											if (v30 == 0) {
												byte[] v33 = Arrays.copyOfRange(v30, 0, 12);
												byte[] v34 = Arrays.copyOfRange(v30, 12, v30.length);
												StringBuilder v35 = new StringBuilder();
												StringBuilder v37 = v35.append("profile_key_name_decrypt_");
												StringBuilder v38 = v35.append(UserInfo.id);
												String v39 = v35.toString();
												Key v40 = this.mJavaKeyStore.getKey(v39, 0);
												Cipher v41 = Cipher.getInstance("AES/GCM/NoPadding");
												GCMParameterSpec v42 = new GCMParameterSpec(128,v33);
												v41.init(2, v40, v42);
												byte[] v45 = v41.doFinal(v34);
												LockscreenCredential v47 = new LockscreenCredential(4,v48);
												byte[] v48 = Arrays.copyOf(v45, v45.length);
												LockscreenCredential v46 = v47;
												Arrays.fill(v45, 0);
												boolean v52 = this.mEncryptedPasswords.contains(p1);
												if (v52 == 0) {
													UserInfo v53 = this.mUserManager.getProfileParent(p1);
													if (v53 == 0) {
														if (UserInfo.id == 0) {
															String v54 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
															Provider v55 = this.mKeyStore.getProvider();
															KeyGenerator v56 = KeyGenerator.getInstance("AES", v55);
															KeyGenParameterSpec$Builder v57 = new KeyGenParameterSpec$Builder(v54,3);
															KeyGenParameterSpec$Builder v59 = v57.setKeySize(256);
															String v60 = new String(1);
															KeyGenParameterSpec$Builder v61 = v59.setBlockModes(v60);
															int v62 = SyntheticPasswordCrypto.keyNamespace();
															KeyGenParameterSpec$Builder v63 = v61.setNamespace(v62);
															String v64 = new String(1);
															KeyGenParameterSpec$Builder v65 = v63.setEncryptionPaddings(v64);
															KeyGenParameterSpec$Builder v66 = v65.setUserAuthenticationRequired(1);
															KeyGenParameterSpec$Builder v67 = v66.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
															KeyGenParameterSpec v68 = v67.build();
															v56.init(v68);
															SecretKey v70 = v56.generateKey();
															Cipher v71 = Cipher.getInstance("AES/GCM/NoPadding");
															v71.init(1, v70);
															byte[] v73 = v46.getCredential();
															byte[] v74 = v71.doFinal(v73);
															byte[] v75 = v71.getIV();
															LockscreenCredential v29 = v46;
															boolean v77 = v4.add(v29);
															Integer v78 = Integer.valueOf(UserInfo.id);
															boolean v79 = v2.add(v78);
															boolean v80 = v7.hasNext();
															if (v80 == 0) {
																[I v81 = this.mUserManager.getProfileIdsWithDisabled(p1);
																if ( >= v81.length) {
																	UserInfo v82 = this.mUserManager.getUserInfo(p1);
																	boolean v83 = v82.isPrimary();
																	if (v83 == 0) {
																		IBinder v86 = ServiceManager.checkService("android.security.maintenance");
																		IKeystoreMaintenance v87 = IKeystoreMaintenance$Stub.asInterface(v86);
																		IKeystoreMaintenance v85 = v87;
																		v85.clearNamespace(2, 102);
																		int v84 = 0;
																		int v89 = v2.size();
																		if ( >= v89) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void resetKeyStore(int p1){
	ArrayList v2 = new ArrayList();
	ArrayList v4 = new ArrayList();
	List v6 = this.mUserManager.getProfiles(p1);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		UserHandle v12 = UserHandle.of(p1);
		boolean v13 = this.mUserManagerCache.containsKey(v12);
		if (v13 == 0) {
			Context v14 = this.mContext.createPackageContextAsUser("system", 0, v12);
			Object v15 = v14.getSystemService(UserManage.class);
			Object v16 = this.mUserManagerCache.put(v12, v15);
			UserManager v11 = v15;
			boolean v17 = v11.isCredentialSharableWithParent();
			boolean v10 = v17;
			if (v10 == 0) {
				String v20 = LockSettingsStorage.getString("lockscreen.profilechallenge", 0, p1);
				boolean v21 = TextUtils.isEmpty(v20);
				if (v21 == 0) {
					boolean v22 = v20.equals("1");
					if (v22 != 0) {
						boolean v23 = v20.equals("true");
						if (v23 == 0) {
							boolean v19 = ;
							boolean v18 = v19;
							if (v18 != 0) {
								String v26 = LockSettingsStorage.getLockCredentialFilePathForUser(p1, "gatekeeper.profile.key");
								String v25 = v26;
								byte[] v28 = LockSettingsStorage.readFile(v25);
								if (v28 == 0) {
									if (v28.length <= 0) {
										boolean v27 = ;
										boolean v24 = v27;
										if (v24 == 0) {
											String v31 = LockSettingsStorage.getChildProfileLockFile(p1);
											byte[] v32 = LockSettingsStorage.readFile(v31);
											byte[] v30 = v32;
											if (v30 == 0) {
												byte[] v33 = Arrays.copyOfRange(v30, 0, 12);
												byte[] v34 = Arrays.copyOfRange(v30, 12, v30.length);
												StringBuilder v35 = new StringBuilder();
												StringBuilder v37 = v35.append("profile_key_name_decrypt_");
												StringBuilder v38 = v35.append(UserInfo.id);
												String v39 = v35.toString();
												Key v40 = this.mJavaKeyStore.getKey(v39, 0);
												Cipher v41 = Cipher.getInstance("AES/GCM/NoPadding");
												GCMParameterSpec v42 = new GCMParameterSpec(128,v33);
												v41.init(2, v40, v42);
												byte[] v45 = v41.doFinal(v34);
												LockscreenCredential v47 = new LockscreenCredential(4,v48);
												byte[] v48 = Arrays.copyOf(v45, v45.length);
												LockscreenCredential v46 = v47;
												Arrays.fill(v45, 0);
												boolean v52 = this.mEncryptedPasswords.contains(p1);
												if (v52 == 0) {
													UserInfo v53 = this.mUserManager.getProfileParent(p1);
													if (v53 == 0) {
														if (UserInfo.id == 0) {
															String v54 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
															Provider v55 = this.mKeyStore.getProvider();
															KeyGenerator v56 = KeyGenerator.getInstance("AES", v55);
															KeyGenParameterSpec$Builder v57 = new KeyGenParameterSpec$Builder(v54,3);
															KeyGenParameterSpec$Builder v59 = v57.setKeySize(256);
															String v60 = new String(1);
															KeyGenParameterSpec$Builder v61 = v59.setBlockModes(v60);
															int v62 = SyntheticPasswordCrypto.keyNamespace();
															KeyGenParameterSpec$Builder v63 = v61.setNamespace(v62);
															String v64 = new String(1);
															KeyGenParameterSpec$Builder v65 = v63.setEncryptionPaddings(v64);
															KeyGenParameterSpec$Builder v66 = v65.setUserAuthenticationRequired(1);
															KeyGenParameterSpec$Builder v67 = v66.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
															KeyGenParameterSpec v68 = v67.build();
															v56.init(v68);
															SecretKey v70 = v56.generateKey();
															Cipher v71 = Cipher.getInstance("AES/GCM/NoPadding");
															v71.init(1, v70);
															byte[] v73 = v46.getCredential();
															byte[] v74 = v71.doFinal(v73);
															byte[] v75 = v71.getIV();
															LockscreenCredential v29 = v46;
															boolean v77 = v4.add(v29);
															Integer v78 = Integer.valueOf(UserInfo.id);
															boolean v79 = v2.add(v78);
															boolean v80 = v7.hasNext();
															if (v80 == 0) {
																[I v81 = this.mUserManager.getProfileIdsWithDisabled(p1);
																if ( >= v81.length) {
																	UserInfo v82 = this.mUserManager.getUserInfo(p1);
																	boolean v83 = v82.isPrimary();
																	if (v83 == 0) {
																		IBinder v86 = ServiceManager.checkService("android.security.maintenance");
																		IKeystoreMaintenance v87 = IKeystoreMaintenance$Stub.asInterface(v86);
																		IKeystoreMaintenance v85 = v87;
																		v85.clearNamespace(2, 102);
																		int v84 = 0;
																		int v89 = v2.size();
																		if ( >= v89) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void resetKeyStore(int p1){
	ArrayList v2 = new ArrayList();
	ArrayList v4 = new ArrayList();
	List v6 = this.mUserManager.getProfiles(p1);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		UserHandle v12 = UserHandle.of(p1);
		boolean v13 = this.mUserManagerCache.containsKey(v12);
		if (v13 == 0) {
			Context v14 = this.mContext.createPackageContextAsUser("system", 0, v12);
			Object v15 = v14.getSystemService(UserManage.class);
			Object v16 = this.mUserManagerCache.put(v12, v15);
			UserManager v11 = v15;
			boolean v17 = v11.isCredentialSharableWithParent();
			boolean v10 = v17;
			if (v10 == 0) {
				String v20 = LockSettingsStorage.getString("lockscreen.profilechallenge", 0, p1);
				boolean v21 = TextUtils.isEmpty(v20);
				if (v21 == 0) {
					boolean v19 = ;
					boolean v18 = v19;
					if (v18 != 0) {
						String v24 = LockSettingsStorage.getLockCredentialFilePathForUser(p1, "gatekeeper.profile.key");
						String v23 = v24;
						byte[] v26 = LockSettingsStorage.readFile(v23);
						if (v26 == 0) {
							if (v26.length <= 0) {
								boolean v25 = ;
								boolean v22 = v25;
								if (v22 == 0) {
									String v29 = LockSettingsStorage.getChildProfileLockFile(p1);
									byte[] v30 = LockSettingsStorage.readFile(v29);
									byte[] v28 = v30;
									if (v28 == 0) {
										byte[] v31 = Arrays.copyOfRange(v28, 0, 12);
										byte[] v32 = Arrays.copyOfRange(v28, 12, v28.length);
										StringBuilder v33 = new StringBuilder();
										StringBuilder v35 = v33.append("profile_key_name_decrypt_");
										StringBuilder v36 = v33.append(UserInfo.id);
										String v37 = v33.toString();
										Key v38 = this.mJavaKeyStore.getKey(v37, 0);
										Cipher v39 = Cipher.getInstance("AES/GCM/NoPadding");
										GCMParameterSpec v40 = new GCMParameterSpec(128,v31);
										v39.init(2, v38, v40);
										byte[] v43 = v39.doFinal(v32);
										LockscreenCredential v45 = new LockscreenCredential(4,v46);
										byte[] v46 = Arrays.copyOf(v43, v43.length);
										LockscreenCredential v44 = v45;
										Arrays.fill(v43, 0);
										boolean v50 = this.mEncryptedPasswords.contains(p1);
										if (v50 == 0) {
											UserInfo v51 = this.mUserManager.getProfileParent(p1);
											if (v51 == 0) {
												if (UserInfo.id == 0) {
													String v52 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
													Provider v53 = this.mKeyStore.getProvider();
													KeyGenerator v54 = KeyGenerator.getInstance("AES", v53);
													KeyGenParameterSpec$Builder v55 = new KeyGenParameterSpec$Builder(v52,3);
													KeyGenParameterSpec$Builder v57 = v55.setKeySize(256);
													String v58 = new String(1);
													KeyGenParameterSpec$Builder v59 = v57.setBlockModes(v58);
													int v60 = SyntheticPasswordCrypto.keyNamespace();
													KeyGenParameterSpec$Builder v61 = v59.setNamespace(v60);
													String v62 = new String(1);
													KeyGenParameterSpec$Builder v63 = v61.setEncryptionPaddings(v62);
													KeyGenParameterSpec$Builder v64 = v63.setUserAuthenticationRequired(1);
													KeyGenParameterSpec$Builder v65 = v64.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
													KeyGenParameterSpec v66 = v65.build();
													v54.init(v66);
													SecretKey v68 = v54.generateKey();
													Cipher v69 = Cipher.getInstance("AES/GCM/NoPadding");
													v69.init(1, v68);
													byte[] v71 = v44.getCredential();
													byte[] v72 = v69.doFinal(v71);
													byte[] v73 = v69.getIV();
													LockscreenCredential v27 = v44;
													boolean v75 = v4.add(v27);
													Integer v76 = Integer.valueOf(UserInfo.id);
													boolean v77 = v2.add(v76);
													boolean v78 = v7.hasNext();
													if (v78 == 0) {
														[I v79 = this.mUserManager.getProfileIdsWithDisabled(p1);
														if ( >= v79.length) {
															UserInfo v80 = this.mUserManager.getUserInfo(p1);
															boolean v81 = v80.isPrimary();
															if (v81 == 0) {
																IBinder v84 = ServiceManager.checkService("android.security.maintenance");
																IKeystoreMaintenance v85 = IKeystoreMaintenance$Stub.asInterface(v84);
																IKeystoreMaintenance v83 = v85;
																v83.clearNamespace(2, 102);
																int v82 = 0;
																int v87 = v2.size();
																if ( >= v87) {
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v6 = this.mUserManager.getProfiles(p1);\nIterator v7 = v6.iterator();', 'UserHandle v12 = UserHandle.of(p1);\nboolean v13 = this.mUserManagerCache.containsKey(v12);', 'String v26 = LockSettingsStorage.getLockCredentialFilePathForUser(p1, "gatekeeper.profile.key");\nbyte[] v28 = LockSettingsStorage.readFile(v25);']

The method resetKeyStore has the following similar APIs:

- API Name: getLong(Ljava/lang/String;JI)J with Similarity Score: 0.7892988920211792
  - Access Control Level: SYS_OR_SIG and the following code:
String v5 = LockSettingsStorage.readKeyValue(, 0, p3);
long v2 = ;
return v2;

- API Name: getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String; with Similarity Score: 0.7778667211532593
  - Access Control Level: SYS_OR_SIG and the following code:
String v4 = LockSettingsStorage.readKeyValue(, p2, p3);
String v2 = v4;
return v2;

