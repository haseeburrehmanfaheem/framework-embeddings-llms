This is path 1 for the API with depth 2:
public void resetKeyStore(int p1){
	ArrayList v2 = new ArrayList();
	ArrayList v4 = new ArrayList();
	List v6 = this.mUserManager.getProfiles(p1);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		UserHandle v12 = UserHandle.of(p1);
		boolean v13 = this.mUserManagerCache.containsKey(v12);
		if (v13 == 0) {
			Context v14 = this.mContext.createPackageContextAsUser("system", 0, v12);
			Object v15 = v14.getSystemService(UserManage.class);
			Object v16 = this.mUserManagerCache.put(v12, v15);
			UserManager v11 = v15;
			boolean v17 = v11.isCredentialSharableWithParent();
			boolean v10 = v17;
			if (v10 == 0) {
				String v20 = LockSettingsStorage.getString("lockscreen.profilechallenge", 0, p1);
				boolean v21 = TextUtils.isEmpty(v20);
				if (v21 == 0) {
					boolean v22 = v20.equals("1");
					if (v22 != 0) {
						boolean v23 = v20.equals("true");
						if (v23 == 0) {
							boolean v19 = ;
							boolean v18 = v19;
							if (v18 != 0) {
								String v26 = LockSettingsStorage.getLockCredentialFilePathForUser(p1, "gatekeeper.profile.key");
								String v25 = v26;
								byte[] v28 = LockSettingsStorage.readFile(v25);
								if (v28 == 0) {
									if (v28.length <= 0) {
										boolean v27 = ;
										boolean v24 = v27;
										if (v24 == 0) {
											String v31 = LockSettingsStorage.getChildProfileLockFile(p1);
											byte[] v32 = LockSettingsStorage.readFile(v31);
											byte[] v30 = v32;
											if (v30 == 0) {
												byte[] v33 = Arrays.copyOfRange(v30, 0, 12);
												byte[] v34 = Arrays.copyOfRange(v30, 12, v30.length);
												StringBuilder v35 = new StringBuilder();
												StringBuilder v37 = v35.append("profile_key_name_decrypt_");
												StringBuilder v38 = v35.append(UserInfo.id);
												String v39 = v35.toString();
												Key v40 = this.mJavaKeyStore.getKey(v39, 0);
												Cipher v41 = Cipher.getInstance("AES/GCM/NoPadding");
												GCMParameterSpec v42 = new GCMParameterSpec(128,v33);
												v41.init(2, v40, v42);
												byte[] v45 = v41.doFinal(v34);
												LockscreenCredential v47 = new LockscreenCredential(4,v48);
												byte[] v48 = Arrays.copyOf(v45, v45.length);
												LockscreenCredential v46 = v47;
												Arrays.fill(v45, 0);
												boolean v52 = this.mEncryptedPasswords.contains(p1);
												if (v52 == 0) {
													UserInfo v53 = this.mUserManager.getProfileParent(p1);
													if (v53 == 0) {
														if (UserInfo.id == 0) {
															String v54 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
															Provider v55 = this.mKeyStore.getProvider();
															KeyGenerator v56 = KeyGenerator.getInstance("AES", v55);
															KeyGenParameterSpec$Builder v57 = new KeyGenParameterSpec$Builder(v54,3);
															KeyGenParameterSpec$Builder v59 = v57.setKeySize(256);
															String v60 = new String(1);
															KeyGenParameterSpec$Builder v61 = v59.setBlockModes(v60);
															int v62 = SyntheticPasswordCrypto.keyNamespace();
															KeyGenParameterSpec$Builder v63 = v61.setNamespace(v62);
															String v64 = new String(1);
															KeyGenParameterSpec$Builder v65 = v63.setEncryptionPaddings(v64);
															KeyGenParameterSpec$Builder v66 = v65.setUserAuthenticationRequired(1);
															KeyGenParameterSpec$Builder v67 = v66.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
															KeyGenParameterSpec v68 = v67.build();
															v56.init(v68);
															SecretKey v70 = v56.generateKey();
															Cipher v71 = Cipher.getInstance("AES/GCM/NoPadding");
															v71.init(1, v70);
															byte[] v73 = v46.getCredential();
															byte[] v74 = v71.doFinal(v73);
															byte[] v75 = v71.getIV();
															LockscreenCredential v29 = v46;
															boolean v77 = v4.add(v29);
															Integer v78 = Integer.valueOf(UserInfo.id);
															boolean v79 = v2.add(v78);
															boolean v80 = v7.hasNext();
															if (v80 == 0) {
																[I v81 = this.mUserManager.getProfileIdsWithDisabled(p1);
																if ( >= v81.length) {
																	UserInfo v82 = this.mUserManager.getUserInfo(p1);
																	boolean v83 = v82.isPrimary();
																	if (v83 == 0) {
																		IBinder v86 = ServiceManager.checkService("android.security.maintenance");
																		IKeystoreMaintenance v87 = IKeystoreMaintenance$Stub.asInterface(v86);
																		IKeystoreMaintenance v85 = v87;
																		v85.clearNamespace(2, 102);
																		int v84 = 0;
																		int v89 = v2.size();
																		if ( >= v89) {
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void resetKeyStore(int p1){
	ArrayList v2 = new ArrayList();
	ArrayList v4 = new ArrayList();
	List v6 = this.mUserManager.getProfiles(p1);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		UserManager v11 = LockSettingsService.getUserManagerFromCache(UserInfo.id);
		boolean v12 = v11.isCredentialSharableWithParent();
		boolean v10 = v12;
		if (v10 == 0) {
			boolean v14 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, UserInfo.id);
			boolean v13 = v14;
			if (v13 != 0) {
				String v16 = LockSettingsStorage.getChildProfileLockFile(UserInfo.id);
				boolean v17 = LockSettingsStorage.hasFile(v16);
				boolean v15 = v17;
				if (v15 == 0) {
					byte[] v19 = this.mStorage.readChildProfileLock(UserInfo.id);
					if (v19 == 0) {
						byte[] v20 = Arrays.copyOfRange(v19, 0, 12);
						byte[] v21 = Arrays.copyOfRange(v19, 12, v19.length);
						StringBuilder v22 = new StringBuilder();
						StringBuilder v24 = v22.append("profile_key_name_decrypt_");
						StringBuilder v25 = v22.append(UserInfo.id);
						String v26 = v22.toString();
						Key v27 = this.mJavaKeyStore.getKey(v26, 0);
						Cipher v28 = Cipher.getInstance("AES/GCM/NoPadding");
						GCMParameterSpec v29 = new GCMParameterSpec(128,v20);
						v28.init(2, v27, v29);
						byte[] v32 = v28.doFinal(v21);
						LockscreenCredential v33 = LockscreenCredential.createManagedPassword(v32);
						Arrays.fill(v32, 0);
						this.mManagedProfilePasswordCache.storePassword(UserInfo.id, v33);
						LockscreenCredential v18 = v33;
						boolean v36 = v4.add(v18);
						Integer v37 = Integer.valueOf(UserInfo.id);
						boolean v38 = v2.add(v37);
						boolean v39 = v7.hasNext();
						if (v39 == 0) {
							[I v40 = this.mUserManager.getProfileIdsWithDisabled(p1);
							if ( >= v40.length) {
								UserInfo v41 = this.mUserManager.getUserInfo(p1);
								if ((this.flags & 1) != 1) {
									boolean v42 = ;
									if (v42 == 0) {
										IKeystoreMaintenance v44 = AndroidKeyStoreMaintenance.getService();
										v44.clearNamespace(2, 102);
										int v43 = 0;
										int v46 = v2.size();
										if ( >= v46) {
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void resetKeyStore(int p1){
	ArrayList v2 = new ArrayList();
	ArrayList v4 = new ArrayList();
	List v6 = this.mUserManager.getProfiles(p1);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		Object v9 = v7.next();
		boolean v10 = p0.isCredentialSharableWithParent(UserInfo.id);
		if (v10 == 0) {
			boolean v11 = p0.getSeparateProfileChallengeEnabledInternal(UserInfo.id);
			if (v11 != 0) {
				boolean v12 = this.mStorage.hasChildProfileLock(UserInfo.id);
				if (v12 == 0) {
					boolean v13 = v7.hasNext();
					if (v13 == 0) {
						[I v14 = this.mUserManager.getProfileIdsWithDisabled(p1);
						if ( >= v14.length) {
							UserInfo v15 = this.mUserManager.getUserInfo(p1);
							boolean v16 = v15.isPrimary();
							if (v16 == 0) {
								int v17 = AndroidKeyStoreMaintenance.clearNamespace(2, 102);
								int v18 = v2.size();
								if ( >= v18) {
									Object v19 = v2.get();
									int v20 = v19.intValue();
									Object v21 = v4.get();
									if (v20 == -1) {
										if (v21 == 0) {
											int v22 = v2.size();
											if ( >= v22) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
