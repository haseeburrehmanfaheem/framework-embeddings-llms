The method setSeparateProfileChallengeEnabled has the following code snippet:

This is path 1 for the API with depth 2:
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p3 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v2 = this.mType;
				if (v2 != -1) {
					if (p3 == 0) {
						boolean v8 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
						if (v8 == 0) {
							int v9 = LockSettingsService.getCredentialTypeInternal(p1);
							if (v9 != 1) {
								boolean v6 = ;
								this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
								if (p2 == 0) {
									String v14 = LockSettingsStorage.getChildProfileLockFile(p1);
									LockSettingsStorage.deleteFile(v14);
									caughtException.printStackTrace();
									StringBuilder v24 = new StringBuilder();
									StringBuilder v26 = v24.append("profile_key_name_encrypt_");
									StringBuilder v27 = v24.append(p1);
									String v28 = v24.toString();
									this.mJavaKeyStore.deleteEntry(v28);
									StringBuilder v30 = new StringBuilder();
									StringBuilder v32 = v30.append("profile_key_name_decrypt_");
									StringBuilder v33 = v30.append(p1);
									String v34 = v30.toString();
									this.mJavaKeyStore.deleteEntry(v34);
									p0.notifySeparateProfileChallengeChanged(p1);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p3 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v2 = this.mType;
				if (v2 != -1) {
					if (p3 == 0) {
						LockscreenCredential v5 = LockscreenCredential.createNone();
						boolean v9 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
						if (v9 == 0) {
							int v10 = LockSettingsService.getCredentialTypeInternal(p1);
							if (v10 != 1) {
								boolean v7 = ;
								this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
								if (p2 == 0) {
									String v15 = LockSettingsStorage.getChildProfileLockFile(p1);
									LockSettingsStorage.deleteFile(v15);
									caughtException.printStackTrace();
									StringBuilder v25 = new StringBuilder();
									StringBuilder v27 = v25.append("profile_key_name_encrypt_");
									StringBuilder v28 = v25.append(p1);
									String v29 = v25.toString();
									this.mJavaKeyStore.deleteEntry(v29);
									StringBuilder v31 = new StringBuilder();
									StringBuilder v33 = v31.append("profile_key_name_decrypt_");
									StringBuilder v34 = v31.append(p1);
									String v35 = v31.toString();
									this.mJavaKeyStore.deleteEntry(v35);
									p0.notifySeparateProfileChallengeChanged(p1);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p3 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v2 = this.mType;
				if (v2 != -1) {
					if (p3 == 0) {
						boolean v8 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
						if (v8 == 0) {
							int v9 = LockSettingsService.getCredentialTypeInternal(p1);
							if (v9 != 1) {
								boolean v6 = ;
								this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
								if (p2 == 0) {
									String v14 = LockSettingsStorage.getChildProfileLockFile(p1);
									LockSettingsStorage.deleteFile(v14);
									StringBuilder v23 = new StringBuilder();
									StringBuilder v25 = v23.append("profile_key_name_encrypt_");
									StringBuilder v26 = v23.append(p1);
									String v27 = v23.toString();
									this.mJavaKeyStore.deleteEntry(v27);
									StringBuilder v29 = new StringBuilder();
									StringBuilder v31 = v29.append("profile_key_name_decrypt_");
									StringBuilder v32 = v29.append(p1);
									String v33 = v29.toString();
									this.mJavaKeyStore.deleteEntry(v33);
									p0.notifySeparateProfileChallengeChanged(p1);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['if (this.mHasSecureLockScreen != 0) {\nthis.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);\nString v28 = v24.toString();\nthis.mJavaKeyStore.deleteEntry(v28);', 'int v2 = this.mType;\nLockscreenCredential v5 = new LockscreenCredential(-1,v6);\nLockSettingsService.setBoolean("lockscreen.profilechallenge", p2, p1);\nthis.mStorage.removeChildProfileLock(p1);', 'p0.setSeparateProfileChallengeEnabledLocked(p1, p2, );\np0.notifySeparateProfileChallengeChanged(p1);']

The method setSeparateProfileChallengeEnabled has the following similar APIs:

- API Name: setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z with Similarity Score: 0.9247453212738037
  - Access Control Level: SYS_OR_SIG and the following code:
int v1 = this.mType;
VerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
LockscreenCredential v93 = LockscreenCredential.createNone();
this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);

- API Name: getSeparateProfileChallengeEnabled(I)Z with Similarity Score: 0.8892765641212463
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
return v2;

