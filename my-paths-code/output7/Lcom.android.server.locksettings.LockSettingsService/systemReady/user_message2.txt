The method systemReady has the following code snippet:

This is path 1 for the API with depth 2:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		String v12 = this.mStorage.getString("migrated", 0, 0);
		String v10 = v12;
		if (v10 != 0) {
			ContentResolver v13 = this.mContext.getContentResolver();
			if ( >= this.VALID_SETTINGS.length) {
				int v14 = v13.getUserId();
				String v15 = Settings$Secure.getStringForUser(v13, this.VALID_SETTINGS[], v14);
				if (v15 == 0) {
					this.mStorage.setString(this.VALID_SETTINGS[], v15, 0);
					if ( >= this.VALID_SETTINGS.length) {
						this.mStorage.setString("migrated", "true", 0);
						String v25 = this.mStorage.getString("migrated_user_specific", 0, 0);
						String v23 = v25;
						if (v23 != 0) {
							ContentResolver v26 = this.mContext.getContentResolver();
							List v27 = this.mUserManager.getUsers();
							int v28 = v27.size();
							if ( >= v28) {
								this.mStorage.setString("migrated_user_specific", "true", 0);
								String v35 = this.mStorage.getString("migrated_biometric_weak", 0, 0);
								String v33 = v35;
								if (v33 != 0) {
									List v36 = this.mUserManager.getUsers();
									int v37 = v36.size();
									if ( >= v37) {
										this.mStorage.setString("migrated_biometric_weak", "true", 0);
										String v44 = this.mStorage.getString("migrated_lockscreen_disabled", 0, 0);
										String v42 = v44;
										if (v42 != 0) {
											PackageManager v45 = this.mContext.getPackageManager();
											boolean v46 = v45.hasSystemFeature("android.hardware.type.watch");
											if (v46 == 0) {
												String v49 = this.mStorage.getString("migrated_wear_lockscreen_disabled", 0, 0);
												String v47 = v49;
												if (v47 != 0) {
													String v52 = this.mStorage.getString("migrated_keystore_namespace", 0, 0);
													String v50 = v52;
													if (v50 != 0) {
														if (this.mGateKeeperService == 0) {
															IBinder v54 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
															if (v54 == 0) {
																LockSettingsService$GateKeeperDiedRecipient v55 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
																v54.linkToDeath(v55, 0);
																if (v54 != 0) {
																	IInterface v60 = v54.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
																	if (v60 == 0) {
																		if (v60 instanceof IGateKeeperService == 0) {
																			IGateKeeperService$Stub$Proxy v61 = new IGateKeeperService$Stub$Proxy(v54);
																			IGateKeeperService v59 = v61;
																			this.mGateKeeperService = v59;
																			IGateKeeperService v53 = v59;
																			if (this.mWeaver == 0) {
																				this.mWeaverConfig = 0;
																				IWeaver v65 = IWeaver.getService(1);
																				IWeaver v64 = 0;
																				this.mWeaver = v64;
																				if (v64 == 0) {
																					SyntheticPasswordManager$$ExternalSyntheticLambda0 v67 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
																					v64.getConfig(v67);
																					Map v71 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
																					HashSet v72 = new HashSet();
																					Set v74 = v71.entrySet();
																					Iterator v75 = v74.iterator();
																					boolean v76 = v75.hasNext();
																					if (v76 == 0) {
																						Object v77 = v75.next();
																						Object v78 = v77.getValue();
																						Iterator v79 = v78.iterator();
																						boolean v80 = v79.hasNext();
																						if (v80 == 0) {
																							Object v81 = v79.next();
																							long v82 = v81.longValue();
																							Object v83 = v77.getKey();
																							int v84 = v83.intValue();
																							int v85 = SyntheticPasswordManager.loadWeaverSlot(v82, v84);
																							Integer v86 = Integer.valueOf(v85);
																							boolean v87 = v72.add(v86);
																							boolean v88 = v79.hasNext();
																							if (v88 == 0) {
																								boolean v89 = v75.hasNext();
																								if (v89 == 0) {
																									Set v70 = v72;
																									if (this.mSlotMap != 0) {
																										HashSet v91 = new HashSet();
																										Set v93 = this.mSlotMap.entrySet();
																										Iterator v94 = v93.iterator();
																										boolean v95 = v94.hasNext();
																										if (v95 == 0) {
																											Object v96 = v94.next();
																											Object v97 = v96.getValue();
																											String v98 = PasswordSlotManager.getMode();
																											boolean v99 = v97.equals(v98);
																											if (v99 == 0) {
																												Object v100 = v96.getKey();
																												boolean v101 = v91.add(v100);
																												boolean v102 = v94.hasNext();
																												if (v102 == 0) {
																													Iterator v103 = v91.iterator();
																													boolean v104 = v103.hasNext();
																													if (v104 == 0) {
																														Object v105 = v103.next();
																														Object v106 = this.mSlotMap.remove(v105);
																														boolean v107 = v103.hasNext();
																														if (v107 == 0) {
																															Iterator v108 = v70.iterator();
																															boolean v109 = v108.hasNext();
																															if (v109 == 0) {
																																Object v110 = v108.next();
																																String v111 = PasswordSlotManager.getMode();
																																Object v112 = this.mSlotMap.put(v110, v111);
																																boolean v113 = v108.hasNext();
																																if (v113 == 0) {
																																	PasswordSlotManager.saveSlotMap();
																																	p0.getAuthSecretHal();
																																	Context v117 = this.mContext;
																																	boolean v118 = LockPatternUtils.frpCredentialEnabled(v117);
																																	if (v118 == 0) {
																																		Context v120 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
																																		ContentResolver v121 = v120.getContentResolver();
																																		int v122 = Settings$Global.getInt(v121, "device_provisioned", 0);
																																		if (v122 == 0) {
																																			boolean v119 = ;
																																			if (v119 != 0) {
																																				IGateKeeperService v125 = this.this$0.getGateKeeperService();
																																				v125.reportDeviceSetupComplete();
																																				boolean v129 = LockSettingsStorage$Cache.contains(2, "", p1);
																																				boolean v128 = v129;
																																				if (v128 == 0) {
																																					LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
																																					int v133 = this.mCache.getVersion();
																																					int v132 = v133;
																																					SQLiteDatabase v134 = this.mOpenHelper.getReadableDatabase();
																																					String v135 = new String(1);
																																					String v136 = Integer.toString(0);
																																					Cursor v137 = v134.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v135, 0, 0, 0);
																																					if (v137 == 0) {
																																						boolean v138 = v137.moveToNext();
																																						if (v138 == 0) {
																																							String v139 = v137.getString(0);
																																							String v140 = v137.getString(1);
																																							LockSettingsStorage$Cache.putIfUnchanged(0, v139, v140, p1, v132);
																																							boolean v143 = v137.moveToNext();
																																							if (v143 == 0) {
																																								v137.close();
																																								LockSettingsStorage$CredentialHash v146 = LockSettingsStorage.readPasswordHashIfExists(p1);
																																								if (v146 == 0) {
																																									LockSettingsStorage$CredentialHash v147 = LockSettingsStorage.readPatternHashIfExists(p1);
																																									if (v147 == 0) {
																																										LockSettingsStorage$CredentialHash v148 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																										LockSettingsStorage$CredentialHash v145 = v148;
																																										FingerprintManager v149 = this.mInjector.getFingerprintManager();
																																										FaceManager v150 = this.mInjector.getFaceManager();
																																										this.mBiometricDeferredQueue.systemReady(v149, v150);
																																										return;
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		String v12 = this.mStorage.getString("migrated", 0, 0);
		String v10 = v12;
		if (v10 != 0) {
			ContentResolver v13 = this.mContext.getContentResolver();
			if ( >= this.VALID_SETTINGS.length) {
				int v14 = v13.getUserId();
				String v15 = Settings$Secure.getStringForUser(v13, this.VALID_SETTINGS[], v14);
				if (v15 == 0) {
					this.mStorage.setString(this.VALID_SETTINGS[], v15, 0);
					if ( >= this.VALID_SETTINGS.length) {
						this.mStorage.setString("migrated", "true", 0);
						String v25 = this.mStorage.getString("migrated_user_specific", 0, 0);
						String v23 = v25;
						if (v23 != 0) {
							ContentResolver v26 = this.mContext.getContentResolver();
							List v27 = this.mUserManager.getUsers();
							int v28 = v27.size();
							if ( >= v28) {
								this.mStorage.setString("migrated_user_specific", "true", 0);
								String v35 = this.mStorage.getString("migrated_biometric_weak", 0, 0);
								String v33 = v35;
								if (v33 != 0) {
									String v38 = this.mStorage.getString("migrated_lockscreen_disabled", 0, 0);
									String v36 = v38;
									if (v36 != 0) {
										PackageManager v39 = this.mContext.getPackageManager();
										boolean v40 = v39.hasSystemFeature("android.hardware.type.watch");
										if (v40 == 0) {
											String v43 = this.mStorage.getString("migrated_wear_lockscreen_disabled", 0, 0);
											String v41 = v43;
											if (v41 != 0) {
												List v44 = this.mUserManager.getUsers();
												int v45 = v44.size();
												if ( >= v45) {
													this.mStorage.setString("migrated_wear_lockscreen_disabled", "true", 0);
													String v52 = this.mStorage.getString("migrated_keystore_namespace", 0, 0);
													String v50 = v52;
													if (v50 != 0) {
														if (this.mGateKeeperService == 0) {
															IBinder v54 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
															if (v54 == 0) {
																LockSettingsService$GateKeeperDiedRecipient v55 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
																v54.linkToDeath(v55, 0);
																if (v54 != 0) {
																	IInterface v60 = v54.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
																	if (v60 == 0) {
																		if (v60 instanceof IGateKeeperService == 0) {
																			IGateKeeperService$Stub$Proxy v61 = new IGateKeeperService$Stub$Proxy(v54);
																			IGateKeeperService v59 = v61;
																			this.mGateKeeperService = v59;
																			IGateKeeperService v53 = v59;
																			if (this.mWeaver == 0) {
																				this.mWeaverConfig = 0;
																				IWeaver v65 = IWeaver.getService(1);
																				IWeaver v64 = 0;
																				this.mWeaver = v64;
																				if (v64 == 0) {
																					SyntheticPasswordManager$$ExternalSyntheticLambda0 v67 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
																					v64.getConfig(v67);
																					Map v71 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
																					HashSet v72 = new HashSet();
																					Set v74 = v71.entrySet();
																					Iterator v75 = v74.iterator();
																					boolean v76 = v75.hasNext();
																					if (v76 == 0) {
																						Object v77 = v75.next();
																						Object v78 = v77.getValue();
																						Iterator v79 = v78.iterator();
																						boolean v80 = v79.hasNext();
																						if (v80 == 0) {
																							Object v81 = v79.next();
																							long v82 = v81.longValue();
																							Object v83 = v77.getKey();
																							int v84 = v83.intValue();
																							int v85 = SyntheticPasswordManager.loadWeaverSlot(v82, v84);
																							Integer v86 = Integer.valueOf(v85);
																							boolean v87 = v72.add(v86);
																							boolean v88 = v79.hasNext();
																							if (v88 == 0) {
																								boolean v89 = v75.hasNext();
																								if (v89 == 0) {
																									Set v70 = v72;
																									if (this.mSlotMap != 0) {
																										HashSet v91 = new HashSet();
																										Set v93 = this.mSlotMap.entrySet();
																										Iterator v94 = v93.iterator();
																										boolean v95 = v94.hasNext();
																										if (v95 == 0) {
																											Object v96 = v94.next();
																											Object v97 = v96.getValue();
																											String v98 = PasswordSlotManager.getMode();
																											boolean v99 = v97.equals(v98);
																											if (v99 == 0) {
																												Object v100 = v96.getKey();
																												boolean v101 = v91.add(v100);
																												boolean v102 = v94.hasNext();
																												if (v102 == 0) {
																													Iterator v103 = v91.iterator();
																													boolean v104 = v103.hasNext();
																													if (v104 == 0) {
																														Object v105 = v103.next();
																														Object v106 = this.mSlotMap.remove(v105);
																														boolean v107 = v103.hasNext();
																														if (v107 == 0) {
																															Iterator v108 = v70.iterator();
																															boolean v109 = v108.hasNext();
																															if (v109 == 0) {
																																Object v110 = v108.next();
																																String v111 = PasswordSlotManager.getMode();
																																Object v112 = this.mSlotMap.put(v110, v111);
																																boolean v113 = v108.hasNext();
																																if (v113 == 0) {
																																	PasswordSlotManager.saveSlotMap();
																																	p0.getAuthSecretHal();
																																	Context v117 = this.mContext;
																																	boolean v118 = LockPatternUtils.frpCredentialEnabled(v117);
																																	if (v118 == 0) {
																																		Context v120 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
																																		ContentResolver v121 = v120.getContentResolver();
																																		int v122 = Settings$Global.getInt(v121, "device_provisioned", 0);
																																		if (v122 == 0) {
																																			boolean v119 = ;
																																			if (v119 != 0) {
																																				IGateKeeperService v125 = this.this$0.getGateKeeperService();
																																				v125.reportDeviceSetupComplete();
																																				boolean v129 = LockSettingsStorage$Cache.contains(2, "", p1);
																																				boolean v128 = v129;
																																				if (v128 == 0) {
																																					LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
																																					int v133 = this.mCache.getVersion();
																																					int v132 = v133;
																																					SQLiteDatabase v134 = this.mOpenHelper.getReadableDatabase();
																																					String v135 = new String(1);
																																					String v136 = Integer.toString(0);
																																					Cursor v137 = v134.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v135, 0, 0, 0);
																																					if (v137 == 0) {
																																						boolean v138 = v137.moveToNext();
																																						if (v138 == 0) {
																																							String v139 = v137.getString(0);
																																							String v140 = v137.getString(1);
																																							LockSettingsStorage$Cache.putIfUnchanged(0, v139, v140, p1, v132);
																																							boolean v143 = v137.moveToNext();
																																							if (v143 == 0) {
																																								v137.close();
																																								LockSettingsStorage$CredentialHash v146 = LockSettingsStorage.readPasswordHashIfExists(p1);
																																								if (v146 == 0) {
																																									LockSettingsStorage$CredentialHash v147 = LockSettingsStorage.readPatternHashIfExists(p1);
																																									if (v147 == 0) {
																																										LockSettingsStorage$CredentialHash v148 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																										LockSettingsStorage$CredentialHash v145 = v148;
																																										FingerprintManager v149 = this.mInjector.getFingerprintManager();
																																										FaceManager v150 = this.mInjector.getFaceManager();
																																										this.mBiometricDeferredQueue.systemReady(v149, v150);
																																										return;
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		String v12 = this.mStorage.getString("migrated", 0, 0);
		String v10 = v12;
		if (v10 != 0) {
			ContentResolver v13 = this.mContext.getContentResolver();
			if ( >= this.VALID_SETTINGS.length) {
				int v14 = v13.getUserId();
				String v15 = Settings$Secure.getStringForUser(v13, this.VALID_SETTINGS[], v14);
				if (v15 == 0) {
					this.mStorage.setString(this.VALID_SETTINGS[], v15, 0);
					if ( >= this.VALID_SETTINGS.length) {
						this.mStorage.setString("migrated", "true", 0);
						String v25 = this.mStorage.getString("migrated_user_specific", 0, 0);
						String v23 = v25;
						if (v23 != 0) {
							ContentResolver v26 = this.mContext.getContentResolver();
							List v27 = this.mUserManager.getUsers();
							int v28 = v27.size();
							if ( >= v28) {
								this.mStorage.setString("migrated_user_specific", "true", 0);
								String v35 = this.mStorage.getString("migrated_biometric_weak", 0, 0);
								String v33 = v35;
								if (v33 != 0) {
									List v36 = this.mUserManager.getUsers();
									int v37 = v36.size();
									if ( >= v37) {
										this.mStorage.setString("migrated_biometric_weak", "true", 0);
										String v44 = this.mStorage.getString("migrated_lockscreen_disabled", 0, 0);
										String v42 = v44;
										if (v42 != 0) {
											PackageManager v45 = this.mContext.getPackageManager();
											boolean v46 = v45.hasSystemFeature("android.hardware.type.watch");
											if (v46 == 0) {
												String v49 = this.mStorage.getString("migrated_wear_lockscreen_disabled", 0, 0);
												String v47 = v49;
												if (v47 != 0) {
													String v52 = this.mStorage.getString("migrated_keystore_namespace", 0, 0);
													String v50 = v52;
													if (v50 != 0) {
														if (this.mGateKeeperService == 0) {
															IBinder v54 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
															if (v54 == 0) {
																LockSettingsService$GateKeeperDiedRecipient v55 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
																v54.linkToDeath(v55, 0);
																if (v54 != 0) {
																	IInterface v60 = v54.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
																	if (v60 == 0) {
																		if (v60 instanceof IGateKeeperService == 0) {
																			IGateKeeperService v59 = v60;
																			this.mGateKeeperService = v59;
																			IGateKeeperService v53 = v59;
																			if (this.mWeaver == 0) {
																				this.mWeaverConfig = 0;
																				IWeaver v63 = IWeaver.getService(1);
																				IWeaver v62 = 0;
																				this.mWeaver = v62;
																				if (v62 == 0) {
																					SyntheticPasswordManager$$ExternalSyntheticLambda0 v65 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
																					v62.getConfig(v65);
																					Map v69 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
																					HashSet v70 = new HashSet();
																					Set v72 = v69.entrySet();
																					Iterator v73 = v72.iterator();
																					boolean v74 = v73.hasNext();
																					if (v74 == 0) {
																						Object v75 = v73.next();
																						Object v76 = v75.getValue();
																						Iterator v77 = v76.iterator();
																						boolean v78 = v77.hasNext();
																						if (v78 == 0) {
																							Object v79 = v77.next();
																							long v80 = v79.longValue();
																							Object v81 = v75.getKey();
																							int v82 = v81.intValue();
																							int v83 = SyntheticPasswordManager.loadWeaverSlot(v80, v82);
																							Integer v84 = Integer.valueOf(v83);
																							boolean v85 = v70.add(v84);
																							boolean v86 = v77.hasNext();
																							if (v86 == 0) {
																								boolean v87 = v73.hasNext();
																								if (v87 == 0) {
																									Set v68 = v70;
																									if (this.mSlotMap != 0) {
																										HashSet v89 = new HashSet();
																										Set v91 = this.mSlotMap.entrySet();
																										Iterator v92 = v91.iterator();
																										boolean v93 = v92.hasNext();
																										if (v93 == 0) {
																											Object v94 = v92.next();
																											Object v95 = v94.getValue();
																											String v96 = PasswordSlotManager.getMode();
																											boolean v97 = v95.equals(v96);
																											if (v97 == 0) {
																												Object v98 = v94.getKey();
																												boolean v99 = v89.add(v98);
																												boolean v100 = v92.hasNext();
																												if (v100 == 0) {
																													Iterator v101 = v89.iterator();
																													boolean v102 = v101.hasNext();
																													if (v102 == 0) {
																														Object v103 = v101.next();
																														Object v104 = this.mSlotMap.remove(v103);
																														boolean v105 = v101.hasNext();
																														if (v105 == 0) {
																															Iterator v106 = v68.iterator();
																															boolean v107 = v106.hasNext();
																															if (v107 == 0) {
																																Object v108 = v106.next();
																																String v109 = PasswordSlotManager.getMode();
																																Object v110 = this.mSlotMap.put(v108, v109);
																																boolean v111 = v106.hasNext();
																																if (v111 == 0) {
																																	PasswordSlotManager.saveSlotMap();
																																	p0.getAuthSecretHal();
																																	Context v115 = this.mContext;
																																	boolean v116 = LockPatternUtils.frpCredentialEnabled(v115);
																																	if (v116 == 0) {
																																		Context v118 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
																																		ContentResolver v119 = v118.getContentResolver();
																																		int v120 = Settings$Global.getInt(v119, "device_provisioned", 0);
																																		if (v120 == 0) {
																																			boolean v117 = ;
																																			if (v117 != 0) {
																																				IGateKeeperService v123 = this.this$0.getGateKeeperService();
																																				v123.reportDeviceSetupComplete();
																																				boolean v127 = LockSettingsStorage$Cache.contains(2, "", p1);
																																				boolean v126 = v127;
																																				if (v126 == 0) {
																																					LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
																																					int v131 = this.mCache.getVersion();
																																					int v130 = v131;
																																					SQLiteDatabase v132 = this.mOpenHelper.getReadableDatabase();
																																					String v133 = new String(1);
																																					String v134 = Integer.toString(0);
																																					Cursor v135 = v132.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v133, 0, 0, 0);
																																					if (v135 == 0) {
																																						boolean v136 = v135.moveToNext();
																																						if (v136 == 0) {
																																							String v137 = v135.getString(0);
																																							String v138 = v135.getString(1);
																																							LockSettingsStorage$Cache.putIfUnchanged(0, v137, v138, p1, v130);
																																							boolean v141 = v135.moveToNext();
																																							if (v141 == 0) {
																																								v135.close();
																																								LockSettingsStorage$CredentialHash v144 = LockSettingsStorage.readPasswordHashIfExists(p1);
																																								if (v144 == 0) {
																																									LockSettingsStorage$CredentialHash v145 = LockSettingsStorage.readPatternHashIfExists(p1);
																																									if (v145 == 0) {
																																										LockSettingsStorage$CredentialHash v146 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																										LockSettingsStorage$CredentialHash v143 = v146;
																																										FingerprintManager v147 = this.mInjector.getFingerprintManager();
																																										FaceManager v148 = this.mInjector.getFaceManager();
																																										this.mBiometricDeferredQueue.systemReady(v147, v148);
																																										return;
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['IGateKeeperService$Stub$Proxy v61 = new IGateKeeperService$Stub$Proxy(v54);\nLockSettingsStorage$Cache.put(2, "isFetched", "true", p1);\nSQLiteDatabase v134 = this.mOpenHelper.getReadableDatabase();\nLockSettingsStorage$CredentialHash v146 = LockSettingsStorage.readPasswordHashIfExists(p1);', 'IGateKeeperService v39 = IGateKeeperService$Stub.asInterface(v34);\nSyntheticPasswordManager$$ExternalSyntheticLambda0 v42 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);\nSQLiteDatabase v60 = this.mOpenHelper.getReadableDatabase();', 'p0.migrateOldData();\nIGateKeeperService v10 = p0.getGateKeeperService();\nthis.mSpManager.initWeaverService();']

The method systemReady has the following similar APIs:

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.7786737680435181
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v19 = LockSettingsService.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);
VerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
LockSettingsService.unlockKeystore(v52, p2);
LockSettingsService.unlockUser(p2, v60);

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.7752712965011597
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, p2, p3);
VerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);

