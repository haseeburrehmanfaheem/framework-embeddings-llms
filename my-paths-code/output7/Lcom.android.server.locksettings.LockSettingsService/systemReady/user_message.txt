This is path 1 for the API with depth 2:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		String v12 = this.mStorage.getString("migrated", 0, 0);
		String v10 = v12;
		if (v10 != 0) {
			ContentResolver v13 = this.mContext.getContentResolver();
			if ( >= this.VALID_SETTINGS.length) {
				int v14 = v13.getUserId();
				String v15 = Settings$Secure.getStringForUser(v13, this.VALID_SETTINGS[], v14);
				if (v15 == 0) {
					this.mStorage.setString(this.VALID_SETTINGS[], v15, 0);
					if ( >= this.VALID_SETTINGS.length) {
						this.mStorage.setString("migrated", "true", 0);
						String v25 = this.mStorage.getString("migrated_user_specific", 0, 0);
						String v23 = v25;
						if (v23 != 0) {
							ContentResolver v26 = this.mContext.getContentResolver();
							List v27 = this.mUserManager.getUsers();
							int v28 = v27.size();
							if ( >= v28) {
								this.mStorage.setString("migrated_user_specific", "true", 0);
								String v35 = this.mStorage.getString("migrated_biometric_weak", 0, 0);
								String v33 = v35;
								if (v33 != 0) {
									List v36 = this.mUserManager.getUsers();
									int v37 = v36.size();
									if ( >= v37) {
										this.mStorage.setString("migrated_biometric_weak", "true", 0);
										String v44 = this.mStorage.getString("migrated_lockscreen_disabled", 0, 0);
										String v42 = v44;
										if (v42 != 0) {
											PackageManager v45 = this.mContext.getPackageManager();
											boolean v46 = v45.hasSystemFeature("android.hardware.type.watch");
											if (v46 == 0) {
												String v49 = this.mStorage.getString("migrated_wear_lockscreen_disabled", 0, 0);
												String v47 = v49;
												if (v47 != 0) {
													String v52 = this.mStorage.getString("migrated_keystore_namespace", 0, 0);
													String v50 = v52;
													if (v50 != 0) {
														if (this.mGateKeeperService == 0) {
															IBinder v54 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
															if (v54 == 0) {
																LockSettingsService$GateKeeperDiedRecipient v55 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
																v54.linkToDeath(v55, 0);
																if (v54 != 0) {
																	IInterface v60 = v54.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
																	if (v60 == 0) {
																		if (v60 instanceof IGateKeeperService == 0) {
																			IGateKeeperService$Stub$Proxy v61 = new IGateKeeperService$Stub$Proxy(v54);
																			IGateKeeperService v59 = v61;
																			this.mGateKeeperService = v59;
																			IGateKeeperService v53 = v59;
																			if (this.mWeaver == 0) {
																				this.mWeaverConfig = 0;
																				IWeaver v65 = IWeaver.getService(1);
																				IWeaver v64 = 0;
																				this.mWeaver = v64;
																				if (v64 == 0) {
																					SyntheticPasswordManager$$ExternalSyntheticLambda0 v67 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
																					v64.getConfig(v67);
																					Map v71 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
																					HashSet v72 = new HashSet();
																					Set v74 = v71.entrySet();
																					Iterator v75 = v74.iterator();
																					boolean v76 = v75.hasNext();
																					if (v76 == 0) {
																						Object v77 = v75.next();
																						Object v78 = v77.getValue();
																						Iterator v79 = v78.iterator();
																						boolean v80 = v79.hasNext();
																						if (v80 == 0) {
																							Object v81 = v79.next();
																							long v82 = v81.longValue();
																							Object v83 = v77.getKey();
																							int v84 = v83.intValue();
																							int v85 = SyntheticPasswordManager.loadWeaverSlot(v82, v84);
																							Integer v86 = Integer.valueOf(v85);
																							boolean v87 = v72.add(v86);
																							boolean v88 = v79.hasNext();
																							if (v88 == 0) {
																								boolean v89 = v75.hasNext();
																								if (v89 == 0) {
																									Set v70 = v72;
																									if (this.mSlotMap != 0) {
																										HashSet v91 = new HashSet();
																										Set v93 = this.mSlotMap.entrySet();
																										Iterator v94 = v93.iterator();
																										boolean v95 = v94.hasNext();
																										if (v95 == 0) {
																											Object v96 = v94.next();
																											Object v97 = v96.getValue();
																											String v98 = PasswordSlotManager.getMode();
																											boolean v99 = v97.equals(v98);
																											if (v99 == 0) {
																												Object v100 = v96.getKey();
																												boolean v101 = v91.add(v100);
																												boolean v102 = v94.hasNext();
																												if (v102 == 0) {
																													Iterator v103 = v91.iterator();
																													boolean v104 = v103.hasNext();
																													if (v104 == 0) {
																														Object v105 = v103.next();
																														Object v106 = this.mSlotMap.remove(v105);
																														boolean v107 = v103.hasNext();
																														if (v107 == 0) {
																															Iterator v108 = v70.iterator();
																															boolean v109 = v108.hasNext();
																															if (v109 == 0) {
																																Object v110 = v108.next();
																																String v111 = PasswordSlotManager.getMode();
																																Object v112 = this.mSlotMap.put(v110, v111);
																																boolean v113 = v108.hasNext();
																																if (v113 == 0) {
																																	PasswordSlotManager.saveSlotMap();
																																	p0.getAuthSecretHal();
																																	Context v117 = this.mContext;
																																	boolean v118 = LockPatternUtils.frpCredentialEnabled(v117);
																																	if (v118 == 0) {
																																		Context v120 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
																																		ContentResolver v121 = v120.getContentResolver();
																																		int v122 = Settings$Global.getInt(v121, "device_provisioned", 0);
																																		if (v122 == 0) {
																																			boolean v119 = ;
																																			if (v119 != 0) {
																																				IGateKeeperService v125 = this.this$0.getGateKeeperService();
																																				v125.reportDeviceSetupComplete();
																																				boolean v129 = LockSettingsStorage$Cache.contains(2, "", p1);
																																				boolean v128 = v129;
																																				if (v128 == 0) {
																																					LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
																																					int v133 = this.mCache.getVersion();
																																					int v132 = v133;
																																					SQLiteDatabase v134 = this.mOpenHelper.getReadableDatabase();
																																					String v135 = new String(1);
																																					String v136 = Integer.toString(0);
																																					Cursor v137 = v134.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v135, 0, 0, 0);
																																					if (v137 == 0) {
																																						boolean v138 = v137.moveToNext();
																																						if (v138 == 0) {
																																							String v139 = v137.getString(0);
																																							String v140 = v137.getString(1);
																																							LockSettingsStorage$Cache.putIfUnchanged(0, v139, v140, p1, v132);
																																							boolean v143 = v137.moveToNext();
																																							if (v143 == 0) {
																																								v137.close();
																																								LockSettingsStorage$CredentialHash v146 = LockSettingsStorage.readPasswordHashIfExists(p1);
																																								if (v146 == 0) {
																																									LockSettingsStorage$CredentialHash v147 = LockSettingsStorage.readPatternHashIfExists(p1);
																																									if (v147 == 0) {
																																										LockSettingsStorage$CredentialHash v148 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																										LockSettingsStorage$CredentialHash v145 = v148;
																																										FingerprintManager v149 = this.mInjector.getFingerprintManager();
																																										FaceManager v150 = this.mInjector.getFaceManager();
																																										this.mBiometricDeferredQueue.systemReady(v149, v150);
																																										return;
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		String v10 = LockSettingsService.getString("migrated", 0, 0);
		if (v10 != 0) {
			ContentResolver v11 = this.mContext.getContentResolver();
			if ( >= this.VALID_SETTINGS.length) {
				int v12 = v11.getUserId();
				String v13 = Settings$Secure.getStringForUser(v11, this.VALID_SETTINGS[], v12);
				if (v13 == 0) {
					LockSettingsService.setString(this.VALID_SETTINGS[], v13, 0);
					if ( >= this.VALID_SETTINGS.length) {
						LockSettingsService.setString("migrated", "true", 0);
						String v17 = LockSettingsService.getString("migrated_user_specific", 0, 0);
						if (v17 != 0) {
							ContentResolver v18 = this.mContext.getContentResolver();
							List v19 = this.mUserManager.getUsers();
							int v20 = v19.size();
							if ( >= v20) {
								LockSettingsService.setString("migrated_user_specific", "true", 0);
								String v23 = LockSettingsService.getString("migrated_biometric_weak", 0, 0);
								if (v23 != 0) {
									List v24 = this.mUserManager.getUsers();
									int v25 = v24.size();
									if ( >= v25) {
										LockSettingsService.setString("migrated_biometric_weak", "true", 0);
										String v28 = LockSettingsService.getString("migrated_lockscreen_disabled", 0, 0);
										if (v28 != 0) {
											PackageManager v29 = this.mContext.getPackageManager();
											boolean v30 = v29.hasSystemFeature("android.hardware.type.watch");
											if (v30 == 0) {
												String v31 = LockSettingsService.getString("migrated_wear_lockscreen_disabled", 0, 0);
												if (v31 != 0) {
													String v32 = LockSettingsService.getString("migrated_keystore_namespace", 0, 0);
													if (v32 != 0) {
														if (this.mGateKeeperService == 0) {
															IBinder v34 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
															if (v34 == 0) {
																LockSettingsService$GateKeeperDiedRecipient v35 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
																v34.linkToDeath(v35, 0);
																IGateKeeperService v39 = IGateKeeperService$Stub.asInterface(v34);
																this.mGateKeeperService = v39;
																IGateKeeperService v33 = v39;
																if (this.mWeaver == 0) {
																	this.mWeaverConfig = 0;
																	IWeaver v41 = SyntheticPasswordManager.getWeaverService();
																	this.mWeaver = v41;
																	if (v41 == 0) {
																		SyntheticPasswordManager$$ExternalSyntheticLambda0 v42 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
																		v41.getConfig(v42);
																		Set v45 = SyntheticPasswordManager.getUsedWeaverSlots();
																		this.mPasswordSlotManager.refreshActiveSlots(v45);
																		IAuthSecret v48 = IAuthSecret.getService(1);
																		Context v51 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
																		boolean v52 = LockPatternUtils.frpCredentialEnabled(v51);
																		if (v52 == 0) {
																			boolean v53 = LockSettingsService$DeviceProvisionedObserver.isProvisioned();
																			if (v53 != 0) {
																				LockSettingsService$DeviceProvisionedObserver.reportDeviceSetupComplete();
																				boolean v57 = this.mCache.isFetched(0);
																				if (v57 == 0) {
																					this.mCache.setFetched(0);
																					int v59 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache);
																					SQLiteDatabase v60 = this.mOpenHelper.getReadableDatabase();
																					String v61 = new String(1);
																					String v62 = Integer.toString(0);
																					Cursor v63 = v60.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v61, 0, 0, 0);
																					if (v63 == 0) {
																						boolean v64 = v63.moveToNext();
																						if (v64 == 0) {
																							String v65 = v63.getString(0);
																							String v66 = v63.getString(1);
																							this.mCache.putKeyValueIfUnchanged(v65, v66, 0, v59);
																							boolean v68 = v63.moveToNext();
																							if (v68 == 0) {
																								v63.close();
																								LockSettingsStorage$CredentialHash v70 = LockSettingsStorage.readCredentialHash(0);
																								PackageManager v72 = this.mContext.getPackageManager();
																								boolean v73 = v72.hasSystemFeature("android.hardware.fingerprint");
																								if (v73 == 0) {
																									Object v74 = this.mContext.getSystemService("fingerprint");
																									FingerprintManager v71 = v74;
																									PackageManager v76 = this.mContext.getPackageManager();
																									boolean v77 = v76.hasSystemFeature("android.hardware.biometrics.face");
																									if (v77 == 0) {
																										Object v78 = this.mContext.getSystemService("face");
																										FaceManager v75 = v78;
																										this.mBiometricDeferredQueue.systemReady(v71, v75);
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		p0.migrateOldData();
		IGateKeeperService v10 = p0.getGateKeeperService();
		this.mSpManager.initWeaverService();
		p0.getAuthSecretHal();
		this.mDeviceProvisionedObserver.onSystemReady();
		this.mStorage.prefetchUser(0);
		FingerprintManager v15 = this.mInjector.getFingerprintManager();
		FaceManager v16 = this.mInjector.getFaceManager();
		this.mBiometricDeferredQueue.systemReady(v15, v16);
		return;
	}
}
