The method getHashFactor has the following code snippet:

This is path 1 for the API with depth 2:
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	UserManager v4 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v5 = v4.isCredentialSharableWithParent();
	boolean v3 = v5;
	if (v3 == 0) {
		boolean v7 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
		boolean v6 = v7;
		if (v6 != 0) {
			boolean v2 = ;
			if (v2 == 0) {
				String v10 = LockSettingsStorage.getChildProfileLockFile(p1);
				byte[] v11 = LockSettingsStorage.readFile(v10);
				byte[] v9 = v11;
				if (v9 == 0) {
					byte[] v12 = Arrays.copyOfRange(v9, 0, 12);
					byte[] v13 = Arrays.copyOfRange(v9, 12, v9.length);
					StringBuilder v14 = new StringBuilder();
					StringBuilder v16 = v14.append("profile_key_name_decrypt_");
					StringBuilder v17 = v14.append(p2);
					String v18 = v14.toString();
					Key v19 = this.mJavaKeyStore.getKey(v18, 0);
					Cipher v20 = Cipher.getInstance("AES/GCM/NoPadding");
					GCMParameterSpec v21 = new GCMParameterSpec(128,v12);
					v20.init(2, v19, v21);
					byte[] v24 = v20.doFinal(v13);
					LockscreenCredential v26 = new LockscreenCredential(4,v27);
					byte[] v27 = Arrays.copyOf(v24, v24.length);
					LockscreenCredential v25 = v26;
					Arrays.fill(v24, 0);
					boolean v31 = this.mEncryptedPasswords.contains(p1);
					if (v31 == 0) {
						UserInfo v32 = this.mUserManager.getProfileParent(p1);
						if (v32 == 0) {
							if (UserInfo.id == 0) {
								String v33 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
								Provider v34 = this.mKeyStore.getProvider();
								KeyGenerator v35 = KeyGenerator.getInstance("AES", v34);
								KeyGenParameterSpec$Builder v36 = new KeyGenParameterSpec$Builder(v33,3);
								KeyGenParameterSpec$Builder v38 = v36.setKeySize(256);
								String v39 = new String(1);
								KeyGenParameterSpec$Builder v40 = v38.setBlockModes(v39);
								int v41 = SyntheticPasswordCrypto.keyNamespace();
								KeyGenParameterSpec$Builder v42 = v40.setNamespace(v41);
								String v43 = new String(1);
								KeyGenParameterSpec$Builder v44 = v42.setEncryptionPaddings(v43);
								KeyGenParameterSpec$Builder v45 = v44.setUserAuthenticationRequired(1);
								KeyGenParameterSpec$Builder v46 = v45.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
								KeyGenParameterSpec v47 = v46.build();
								v35.init(v47);
								SecretKey v49 = v35.generateKey();
								Cipher v50 = Cipher.getInstance("AES/GCM/NoPadding");
								v50.init(1, v49);
								byte[] v52 = v25.getCredential();
								byte[] v53 = v50.doFinal(v52);
								byte[] v54 = v50.getIV();
								LockscreenCredential v8 = v25;
								if (p2 != -9999) {
									PersistentDataBlockManagerInternal v58 = LockSettingsStorage.getPersistentDataBlockManager();
									if (v58 != 0) {
										byte[] v59 = v58.getFrpCredentialHandle();
										LockSettingsStorage$PersistentData v60 = LockSettingsStorage$PersistentData.fromBytes(v59);
										LockSettingsStorage$PersistentData v57 = v60;
										if (LockSettingsStorage$PersistentData.type == 1) {
											if (LockSettingsStorage$PersistentData.type != 2) {
												boolean v56 = ;
												if (v56 != 0) {
													long v64 = this.mStorage.getLong("sp-handle", 0, p1);
													long v62 = v64;
													long v61 = v62;
													if (this.mGateKeeperService == 0) {
														IBinder v66 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
														if (v66 == 0) {
															LockSettingsService$GateKeeperDiedRecipient v67 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
															v66.linkToDeath(v67, 0);
															if (v66 != 0) {
																IInterface v72 = v66.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
																if (v72 == 0) {
																	if (v72 instanceof IGateKeeperService == 0) {
																		IGateKeeperService$Stub$Proxy v73 = new IGateKeeperService$Stub$Proxy(v66);
																		IGateKeeperService v71 = v73;
																		this.mGateKeeperService = v71;
																		IGateKeeperService v65 = v71;
																		SyntheticPasswordManager$AuthenticationResult v76 = new SyntheticPasswordManager$AuthenticationResult();
																		byte[] v79 = this.mStorage.readSyntheticPasswordState(p4, p2, "pwd");
																		byte[] v78 = v79;
																		SyntheticPasswordManager$PasswordData v81 = new SyntheticPasswordManager$PasswordData();
																		ByteBuffer v83 = ByteBuffer.allocate(v78.length);
																		ByteBuffer v84 = v83.put(v78, 0, v78.length);
																		Buffer v85 = v83.flip();
																		int v86 = v83.getInt();
																		this.credentialType = v86;
																		byte v87 = v83.get();
																		this.scryptN = v87;
																		byte v88 = v83.get();
																		this.scryptR = v88;
																		byte v89 = v83.get();
																		this.scryptP = v89;
																		int v90 = v83.getInt();
																		[B v91 = new [B(v90);
																		this.salt = v91;
																		ByteBuffer v92 = v83.get(v91);
																		int v93 = v83.getInt();
																		if (v93 <= 0) {
																			[B v94 = new [B(v93);
																			this.passwordHandle = v94;
																			ByteBuffer v95 = v83.get(v94);
																			SyntheticPasswordManager$PasswordData v80 = v81;
																			if (SyntheticPasswordManager$PasswordData.credentialType != 2) {
																				int v97 = LockscreenCredential.getType();
																				if (v97 == 4) {
																					int v98 = LockscreenCredential.getType();
																					if (v98 != 3) {
																						boolean v96 = ;
																						if (v96 != 0) {
																							boolean v100 = p3.isNone();
																							if (v100 == 0) {
																								byte[] v101 = SyntheticPasswordManager.scrypt(, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
																								byte[] v99 = v101;
																								byte[] v103 = SyntheticPasswordManager.loadState("weaver", p2, p4);
																								if (v103 == 0) {
																									if (v103.length == 5) {
																										ByteBuffer v104 = ByteBuffer.allocate(5);
																										ByteBuffer v105 = v104.put(v103, 0, v103.length);
																										Buffer v106 = v104.flip();
																										byte v107 = v104.get();
																										if (v107 == 1) {
																											int v108 = v104.getInt();
																											int v102 = v108;
																											if (v102 == -1) {
																												boolean v109 = SyntheticPasswordManager.isWeaverAvailable();
																												if (v109 != 0) {
																													byte[] v110 = SyntheticPasswordManager.passwordTokenToWeaverKey(v99);
																													if (v102 == -1) {
																														if (v102 >= WeaverConfig.slots) {
																															if (v110 != 0) {
																																[B v112 = new [B(WeaverConfig.keySize);
																																VerifyCredentialResponse v113 = new VerifyCredentialResponse(1);
																																ArrayList v114 = SyntheticPasswordManager.toByteArrayList();
																																SyntheticPasswordManager$$ExternalSyntheticLambda1 v115 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v113,v102);
																																this.mWeaver.read(v102, v114, v115);
																																VerifyCredentialResponse v111 = v113[0];
																																SyntheticPasswordManager$AuthenticationResult.gkResponse = v111;
																																int v118 = this.mResponseCode;
																																if (v118 == 0) {
																																	byte[] v119 = this.mGatekeeperHAT;
																																	[[B v121 = new [[B(1);
																																	byte[] v122 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v121);
																																	[B v123 = new [B((v99.length + v122.length));
																																	System.arraycopy(v99, 0, v123, 0, v99.length);
																																	System.arraycopy(v122, 0, v123, v99.length, v122.length);
																																	byte[] v120 = v123;
																																	if (0 == 0) {
																																		0.onCredentialVerified();
																																		byte[] v129 = SyntheticPasswordManager.loadState("spblob", p2, p4);
																																		if (v129 != 0) {
																																			SyntheticPasswordManager$SyntheticPasswordBlob v130 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v129);
																																			if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion == 3) {
																																				if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion == 2) {
																																					if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																						if (SyntheticPasswordManager$SyntheticPasswordBlob.mType != 0) {
																																							if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																								String v131 = SyntheticPasswordManager.getKeyName(p2);
																																								byte[] v132 = SyntheticPasswordCrypto.decryptBlobV1(v131, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, );
																																								if ( != 0) {
																																									SyntheticPasswordManager$AuthenticationToken v133 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
																																									if (0 == 1) {
																																										if (0 != 2) {
																																											boolean v135 = SyntheticPasswordManager.loadEscrowData(v133, p4);
																																											if (v135 != 0) {
																																												v133.recreateFromEscrow();
																																												if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																													SyntheticPasswordManager.createSyntheticPasswordBlob(p2, 0, v133, , , p4);
																																													SyntheticPasswordManager$AuthenticationToken v128 = v133;
																																													SyntheticPasswordManager$AuthenticationResult.authToken = v128;
																																													byte[] v147 = v128.deriveGkPassword();
																																													VerifyCredentialResponse v148 = SyntheticPasswordManager.verifyChallengeInternal(p1, v147, 0, p4);
																																													VerifyCredentialResponse v146 = v148;
																																													SyntheticPasswordManager$AuthenticationResult.gkResponse = v146;
																																													if (SyntheticPasswordManager$AuthenticationResult.authToken == 0) {
																																														boolean v150 = SyntheticPasswordManager.hasState("metrics", p2, p4);
																																														boolean v149 = v150;
																																														if (v149 != 0) {
																																															byte[] v152 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveMetricsKey();
																																															[B v153 = new [B(0);
																																															VersionedPasswordMetrics v154 = new VersionedPasswordMetrics(p3);
																																															byte[] v156 = v154.serialize();
																																															byte[] v157 = SyntheticPasswordCrypto.encrypt(v152, v153, v156);
																																															SyntheticPasswordManager.saveState("metrics", v157, p2, p4);
																																															SyntheticPasswordManager$AuthenticationResult v75 = v76;
																																															if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																																																byte[] v160 = this.PERSONALIZATION_PASSWORD_HASH;
																																																if (this.mVersion != 3) {
																																																	SP800Derive v162 = new SP800Derive(this.mSyntheticPassword);
																																																	byte[] v164 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
																																																	byte[] v165 = v162.withContext(v160, v164);
																																																	byte[] v161 = v165;
																																																	byte[] v159 = v161;
																																																	p0.scheduleGc();
																																																	return v159;
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	UserManager v4 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v5 = v4.isCredentialSharableWithParent();
	boolean v3 = v5;
	if (v3 == 0) {
		boolean v7 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
		boolean v6 = v7;
		if (v6 != 0) {
			boolean v2 = ;
			if (v2 == 0) {
				String v10 = LockSettingsStorage.getChildProfileLockFile(p1);
				byte[] v11 = LockSettingsStorage.readFile(v10);
				byte[] v9 = v11;
				if (v9 == 0) {
					byte[] v12 = Arrays.copyOfRange(v9, 0, 12);
					byte[] v13 = Arrays.copyOfRange(v9, 12, v9.length);
					StringBuilder v14 = new StringBuilder();
					StringBuilder v16 = v14.append("profile_key_name_decrypt_");
					StringBuilder v17 = v14.append(p2);
					String v18 = v14.toString();
					Key v19 = this.mJavaKeyStore.getKey(v18, 0);
					Cipher v20 = Cipher.getInstance("AES/GCM/NoPadding");
					GCMParameterSpec v21 = new GCMParameterSpec(128,v12);
					v20.init(2, v19, v21);
					byte[] v24 = v20.doFinal(v13);
					LockscreenCredential v26 = new LockscreenCredential(4,v27);
					byte[] v27 = Arrays.copyOf(v24, v24.length);
					LockscreenCredential v25 = v26;
					Arrays.fill(v24, 0);
					boolean v31 = this.mEncryptedPasswords.contains(p1);
					if (v31 == 0) {
						UserInfo v32 = this.mUserManager.getProfileParent(p1);
						if (v32 == 0) {
							if (UserInfo.id == 0) {
								String v33 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
								Provider v34 = this.mKeyStore.getProvider();
								KeyGenerator v35 = KeyGenerator.getInstance("AES", v34);
								KeyGenParameterSpec$Builder v36 = new KeyGenParameterSpec$Builder(v33,3);
								KeyGenParameterSpec$Builder v38 = v36.setKeySize(256);
								String v39 = new String(1);
								KeyGenParameterSpec$Builder v40 = v38.setBlockModes(v39);
								int v41 = SyntheticPasswordCrypto.keyNamespace();
								KeyGenParameterSpec$Builder v42 = v40.setNamespace(v41);
								String v43 = new String(1);
								KeyGenParameterSpec$Builder v44 = v42.setEncryptionPaddings(v43);
								KeyGenParameterSpec$Builder v45 = v44.setUserAuthenticationRequired(1);
								KeyGenParameterSpec$Builder v46 = v45.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
								KeyGenParameterSpec v47 = v46.build();
								v35.init(v47);
								SecretKey v49 = v35.generateKey();
								Cipher v50 = Cipher.getInstance("AES/GCM/NoPadding");
								v50.init(1, v49);
								byte[] v52 = v25.getCredential();
								byte[] v53 = v50.doFinal(v52);
								byte[] v54 = v50.getIV();
								LockscreenCredential v8 = v25;
								if (p2 != -9999) {
									PersistentDataBlockManagerInternal v58 = LockSettingsStorage.getPersistentDataBlockManager();
									if (v58 != 0) {
										byte[] v59 = v58.getFrpCredentialHandle();
										LockSettingsStorage$PersistentData v60 = LockSettingsStorage$PersistentData.fromBytes(v59);
										LockSettingsStorage$PersistentData v57 = v60;
										if (LockSettingsStorage$PersistentData.type == 1) {
											if (LockSettingsStorage$PersistentData.type != 2) {
												boolean v56 = ;
												if (v56 != 0) {
													long v64 = this.mStorage.getLong("sp-handle", 0, p1);
													long v62 = v64;
													long v61 = v62;
													if (this.mGateKeeperService == 0) {
														IBinder v66 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
														if (v66 == 0) {
															LockSettingsService$GateKeeperDiedRecipient v67 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
															v66.linkToDeath(v67, 0);
															if (v66 != 0) {
																IInterface v72 = v66.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
																if (v72 == 0) {
																	if (v72 instanceof IGateKeeperService == 0) {
																		IGateKeeperService$Stub$Proxy v73 = new IGateKeeperService$Stub$Proxy(v66);
																		IGateKeeperService v71 = v73;
																		this.mGateKeeperService = v71;
																		IGateKeeperService v65 = v71;
																		SyntheticPasswordManager$AuthenticationResult v76 = new SyntheticPasswordManager$AuthenticationResult();
																		byte[] v79 = this.mStorage.readSyntheticPasswordState(p4, p2, "pwd");
																		byte[] v78 = v79;
																		SyntheticPasswordManager$PasswordData v81 = new SyntheticPasswordManager$PasswordData();
																		ByteBuffer v83 = ByteBuffer.allocate(v78.length);
																		ByteBuffer v84 = v83.put(v78, 0, v78.length);
																		Buffer v85 = v83.flip();
																		int v86 = v83.getInt();
																		this.credentialType = v86;
																		byte v87 = v83.get();
																		this.scryptN = v87;
																		byte v88 = v83.get();
																		this.scryptR = v88;
																		byte v89 = v83.get();
																		this.scryptP = v89;
																		int v90 = v83.getInt();
																		[B v91 = new [B(v90);
																		this.salt = v91;
																		ByteBuffer v92 = v83.get(v91);
																		int v93 = v83.getInt();
																		if (v93 <= 0) {
																			[B v94 = new [B(v93);
																			this.passwordHandle = v94;
																			ByteBuffer v95 = v83.get(v94);
																			SyntheticPasswordManager$PasswordData v80 = v81;
																			if (SyntheticPasswordManager$PasswordData.credentialType != 2) {
																				int v97 = LockscreenCredential.getType();
																				if (v97 == 4) {
																					int v98 = LockscreenCredential.getType();
																					if (v98 != 3) {
																						boolean v96 = ;
																						if (v96 != 0) {
																							boolean v100 = p3.isNone();
																							if (v100 == 0) {
																								byte[] v101 = SyntheticPasswordManager.scrypt(, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
																								byte[] v99 = v101;
																								byte[] v103 = SyntheticPasswordManager.loadState("weaver", p2, p4);
																								if (v103 == 0) {
																									if (v103.length == 5) {
																										ByteBuffer v104 = ByteBuffer.allocate(5);
																										ByteBuffer v105 = v104.put(v103, 0, v103.length);
																										Buffer v106 = v104.flip();
																										byte v107 = v104.get();
																										if (v107 == 1) {
																											int v108 = v104.getInt();
																											int v102 = v108;
																											if (v102 == -1) {
																												boolean v109 = SyntheticPasswordManager.isWeaverAvailable();
																												if (v109 != 0) {
																													byte[] v110 = SyntheticPasswordManager.passwordTokenToWeaverKey(v99);
																													if (v102 == -1) {
																														if (v102 >= WeaverConfig.slots) {
																															if (v110 != 0) {
																																if (v110.length != WeaverConfig.keySize) {
																																	VerifyCredentialResponse v112 = new VerifyCredentialResponse(1);
																																	ArrayList v113 = SyntheticPasswordManager.toByteArrayList();
																																	SyntheticPasswordManager$$ExternalSyntheticLambda1 v114 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v112,v102);
																																	this.mWeaver.read(v102, v113, v114);
																																	VerifyCredentialResponse v111 = v112[0];
																																	SyntheticPasswordManager$AuthenticationResult.gkResponse = v111;
																																	int v117 = this.mResponseCode;
																																	if (v117 == 0) {
																																		byte[] v118 = this.mGatekeeperHAT;
																																		[[B v120 = new [[B(1);
																																		byte[] v121 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v120);
																																		[B v122 = new [B((v99.length + v121.length));
																																		System.arraycopy(v99, 0, v122, 0, v99.length);
																																		System.arraycopy(v121, 0, v122, v99.length, v121.length);
																																		byte[] v119 = v122;
																																		if (0 == 0) {
																																			0.onCredentialVerified();
																																			byte[] v128 = SyntheticPasswordManager.loadState("spblob", p2, p4);
																																			if (v128 != 0) {
																																				SyntheticPasswordManager$SyntheticPasswordBlob v129 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v128);
																																				if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion == 3) {
																																					if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion == 2) {
																																						if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																							if (SyntheticPasswordManager$SyntheticPasswordBlob.mType != 0) {
																																								if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																									String v130 = SyntheticPasswordManager.getKeyName(p2);
																																									byte[] v131 = SyntheticPasswordCrypto.decryptBlobV1(v130, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, );
																																									if ( != 0) {
																																										SyntheticPasswordManager$AuthenticationToken v132 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
																																										if (0 == 1) {
																																											if (0 != 2) {
																																												boolean v134 = SyntheticPasswordManager.loadEscrowData(v132, p4);
																																												if (v134 != 0) {
																																													v132.recreateFromEscrow();
																																													if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																														SyntheticPasswordManager.createSyntheticPasswordBlob(p2, 0, v132, , , p4);
																																														SyntheticPasswordManager$AuthenticationToken v127 = v132;
																																														SyntheticPasswordManager$AuthenticationResult.authToken = v127;
																																														byte[] v146 = v127.deriveGkPassword();
																																														VerifyCredentialResponse v147 = SyntheticPasswordManager.verifyChallengeInternal(p1, v146, 0, p4);
																																														VerifyCredentialResponse v145 = v147;
																																														SyntheticPasswordManager$AuthenticationResult.gkResponse = v145;
																																														if (SyntheticPasswordManager$AuthenticationResult.authToken == 0) {
																																															boolean v149 = SyntheticPasswordManager.hasState("metrics", p2, p4);
																																															boolean v148 = v149;
																																															if (v148 != 0) {
																																																byte[] v151 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveMetricsKey();
																																																[B v152 = new [B(0);
																																																VersionedPasswordMetrics v153 = new VersionedPasswordMetrics(p3);
																																																byte[] v155 = v153.serialize();
																																																byte[] v156 = SyntheticPasswordCrypto.encrypt(v151, v152, v155);
																																																SyntheticPasswordManager.saveState("metrics", v156, p2, p4);
																																																SyntheticPasswordManager$AuthenticationResult v75 = v76;
																																																if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																																																	byte[] v159 = this.PERSONALIZATION_PASSWORD_HASH;
																																																	if (this.mVersion != 3) {
																																																		SP800Derive v161 = new SP800Derive(this.mSyntheticPassword);
																																																		byte[] v163 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
																																																		byte[] v164 = v161.withContext(v159, v163);
																																																		byte[] v160 = v164;
																																																		byte[] v158 = v160;
																																																		p0.scheduleGc();
																																																		return v158;
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	UserManager v4 = LockSettingsService.getUserManagerFromCache(p1);
	boolean v5 = v4.isCredentialSharableWithParent();
	boolean v3 = v5;
	if (v3 == 0) {
		boolean v7 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
		boolean v6 = v7;
		if (v6 != 0) {
			boolean v2 = ;
			if (v2 == 0) {
				String v10 = LockSettingsStorage.getChildProfileLockFile(p1);
				byte[] v11 = LockSettingsStorage.readFile(v10);
				byte[] v9 = v11;
				if (v9 == 0) {
					byte[] v12 = Arrays.copyOfRange(v9, 0, 12);
					byte[] v13 = Arrays.copyOfRange(v9, 12, v9.length);
					StringBuilder v14 = new StringBuilder();
					StringBuilder v16 = v14.append("profile_key_name_decrypt_");
					StringBuilder v17 = v14.append(p2);
					String v18 = v14.toString();
					Key v19 = this.mJavaKeyStore.getKey(v18, 0);
					Cipher v20 = Cipher.getInstance("AES/GCM/NoPadding");
					GCMParameterSpec v21 = new GCMParameterSpec(128,v12);
					v20.init(2, v19, v21);
					byte[] v24 = v20.doFinal(v13);
					LockscreenCredential v26 = new LockscreenCredential(4,v27);
					byte[] v27 = Arrays.copyOf(v24, v24.length);
					LockscreenCredential v25 = v26;
					Arrays.fill(v24, 0);
					boolean v31 = this.mEncryptedPasswords.contains(p1);
					if (v31 == 0) {
						UserInfo v32 = this.mUserManager.getProfileParent(p1);
						if (v32 == 0) {
							if (UserInfo.id == 0) {
								String v33 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
								Provider v34 = this.mKeyStore.getProvider();
								KeyGenerator v35 = KeyGenerator.getInstance("AES", v34);
								KeyGenParameterSpec$Builder v36 = new KeyGenParameterSpec$Builder(v33,3);
								KeyGenParameterSpec$Builder v38 = v36.setKeySize(256);
								String v39 = new String(1);
								KeyGenParameterSpec$Builder v40 = v38.setBlockModes(v39);
								int v41 = SyntheticPasswordCrypto.keyNamespace();
								KeyGenParameterSpec$Builder v42 = v40.setNamespace(v41);
								String v43 = new String(1);
								KeyGenParameterSpec$Builder v44 = v42.setEncryptionPaddings(v43);
								KeyGenParameterSpec$Builder v45 = v44.setUserAuthenticationRequired(1);
								KeyGenParameterSpec$Builder v46 = v45.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
								KeyGenParameterSpec v47 = v46.build();
								v35.init(v47);
								SecretKey v49 = v35.generateKey();
								Cipher v50 = Cipher.getInstance("AES/GCM/NoPadding");
								v50.init(1, v49);
								byte[] v52 = v25.getCredential();
								byte[] v53 = v50.doFinal(v52);
								byte[] v54 = v50.getIV();
								LockscreenCredential v8 = v25;
								if (p2 != -9999) {
									PersistentDataBlockManagerInternal v58 = LockSettingsStorage.getPersistentDataBlockManager();
									if (v58 != 0) {
										LockSettingsStorage$PersistentData v57 = LockSettingsStorage$PersistentData.NONE;
										if (LockSettingsStorage$PersistentData.type == 1) {
											if (LockSettingsStorage$PersistentData.type != 2) {
												boolean v56 = ;
												if (v56 != 0) {
													long v62 = this.mStorage.getLong("sp-handle", 0, p1);
													long v60 = v62;
													long v59 = v60;
													if (this.mGateKeeperService == 0) {
														IBinder v64 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
														if (v64 == 0) {
															LockSettingsService$GateKeeperDiedRecipient v65 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
															v64.linkToDeath(v65, 0);
															if (v64 != 0) {
																IInterface v70 = v64.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
																if (v70 == 0) {
																	if (v70 instanceof IGateKeeperService == 0) {
																		IGateKeeperService$Stub$Proxy v71 = new IGateKeeperService$Stub$Proxy(v64);
																		IGateKeeperService v69 = v71;
																		this.mGateKeeperService = v69;
																		IGateKeeperService v63 = v69;
																		SyntheticPasswordManager$AuthenticationResult v74 = new SyntheticPasswordManager$AuthenticationResult();
																		byte[] v77 = this.mStorage.readSyntheticPasswordState(p4, p2, "pwd");
																		byte[] v76 = v77;
																		SyntheticPasswordManager$PasswordData v79 = new SyntheticPasswordManager$PasswordData();
																		ByteBuffer v81 = ByteBuffer.allocate(v76.length);
																		ByteBuffer v82 = v81.put(v76, 0, v76.length);
																		Buffer v83 = v81.flip();
																		int v84 = v81.getInt();
																		this.credentialType = v84;
																		byte v85 = v81.get();
																		this.scryptN = v85;
																		byte v86 = v81.get();
																		this.scryptR = v86;
																		byte v87 = v81.get();
																		this.scryptP = v87;
																		int v88 = v81.getInt();
																		[B v89 = new [B(v88);
																		this.salt = v89;
																		ByteBuffer v90 = v81.get(v89);
																		int v91 = v81.getInt();
																		if (v91 <= 0) {
																			[B v92 = new [B(v91);
																			this.passwordHandle = v92;
																			ByteBuffer v93 = v81.get(v92);
																			SyntheticPasswordManager$PasswordData v78 = v79;
																			if (SyntheticPasswordManager$PasswordData.credentialType != 2) {
																				int v95 = LockscreenCredential.getType();
																				if (v95 == 4) {
																					int v96 = LockscreenCredential.getType();
																					if (v96 != 3) {
																						boolean v94 = ;
																						if (v94 != 0) {
																							boolean v98 = p3.isNone();
																							if (v98 == 0) {
																								byte[] v99 = SyntheticPasswordManager.scrypt(, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
																								byte[] v97 = v99;
																								byte[] v101 = SyntheticPasswordManager.loadState("weaver", p2, p4);
																								if (v101 == 0) {
																									if (v101.length == 5) {
																										ByteBuffer v102 = ByteBuffer.allocate(5);
																										ByteBuffer v103 = v102.put(v101, 0, v101.length);
																										Buffer v104 = v102.flip();
																										byte v105 = v102.get();
																										if (v105 == 1) {
																											int v106 = v102.getInt();
																											int v100 = v106;
																											if (v100 == -1) {
																												boolean v107 = SyntheticPasswordManager.isWeaverAvailable();
																												if (v107 != 0) {
																													byte[] v108 = SyntheticPasswordManager.passwordTokenToWeaverKey(v97);
																													if (v100 == -1) {
																														if (v100 >= WeaverConfig.slots) {
																															if (v108 != 0) {
																																[B v110 = new [B(WeaverConfig.keySize);
																																VerifyCredentialResponse v111 = new VerifyCredentialResponse(1);
																																ArrayList v112 = SyntheticPasswordManager.toByteArrayList();
																																SyntheticPasswordManager$$ExternalSyntheticLambda1 v113 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v111,v100);
																																this.mWeaver.read(v100, v112, v113);
																																VerifyCredentialResponse v109 = v111[0];
																																SyntheticPasswordManager$AuthenticationResult.gkResponse = v109;
																																int v116 = this.mResponseCode;
																																if (v116 == 0) {
																																	byte[] v117 = this.mGatekeeperHAT;
																																	[[B v119 = new [[B(1);
																																	byte[] v120 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v119);
																																	[B v121 = new [B((v97.length + v120.length));
																																	System.arraycopy(v97, 0, v121, 0, v97.length);
																																	System.arraycopy(v120, 0, v121, v97.length, v120.length);
																																	byte[] v118 = v121;
																																	if (0 == 0) {
																																		0.onCredentialVerified();
																																		byte[] v127 = SyntheticPasswordManager.loadState("spblob", p2, p4);
																																		if (v127 != 0) {
																																			SyntheticPasswordManager$SyntheticPasswordBlob v128 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v127);
																																			if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion == 3) {
																																				if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion == 2) {
																																					if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																						if (SyntheticPasswordManager$SyntheticPasswordBlob.mType != 0) {
																																							if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																								String v129 = SyntheticPasswordManager.getKeyName(p2);
																																								byte[] v130 = SyntheticPasswordCrypto.decryptBlobV1(v129, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, );
																																								if ( != 0) {
																																									SyntheticPasswordManager$AuthenticationToken v131 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
																																									if (0 == 1) {
																																										if (0 != 2) {
																																											boolean v133 = SyntheticPasswordManager.loadEscrowData(v131, p4);
																																											if (v133 != 0) {
																																												v131.recreateFromEscrow();
																																												if (SyntheticPasswordManager$SyntheticPasswordBlob.mVersion != 1) {
																																													SyntheticPasswordManager.createSyntheticPasswordBlob(p2, 0, v131, , , p4);
																																													SyntheticPasswordManager$AuthenticationToken v126 = v131;
																																													SyntheticPasswordManager$AuthenticationResult.authToken = v126;
																																													byte[] v145 = v126.deriveGkPassword();
																																													VerifyCredentialResponse v146 = SyntheticPasswordManager.verifyChallengeInternal(p1, v145, 0, p4);
																																													VerifyCredentialResponse v144 = v146;
																																													SyntheticPasswordManager$AuthenticationResult.gkResponse = v144;
																																													if (SyntheticPasswordManager$AuthenticationResult.authToken == 0) {
																																														boolean v148 = SyntheticPasswordManager.hasState("metrics", p2, p4);
																																														boolean v147 = v148;
																																														if (v147 != 0) {
																																															byte[] v150 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveMetricsKey();
																																															[B v151 = new [B(0);
																																															VersionedPasswordMetrics v152 = new VersionedPasswordMetrics(p3);
																																															byte[] v154 = v152.serialize();
																																															byte[] v155 = SyntheticPasswordCrypto.encrypt(v150, v151, v154);
																																															SyntheticPasswordManager.saveState("metrics", v155, p2, p4);
																																															SyntheticPasswordManager$AuthenticationResult v73 = v74;
																																															if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																																																byte[] v158 = this.PERSONALIZATION_PASSWORD_HASH;
																																																if (this.mVersion != 3) {
																																																	SP800Derive v160 = new SP800Derive(this.mSyntheticPassword);
																																																	byte[] v162 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
																																																	byte[] v163 = v160.withContext(v158, v162);
																																																	byte[] v159 = v163;
																																																	byte[] v157 = v159;
																																																	p0.scheduleGc();
																																																	return v157;
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SyntheticPasswordManager$AuthenticationToken v50 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v25, 0, , , p2);\nbyte[] v47 = SyntheticPasswordManager.transformUnderWeaverSecret(v40, v46);\nVerifyCredentialResponse v51 = SyntheticPasswordManager.verifyChallenge(v27, v50, 0, p2);', 'LockscreenCredential v20 = LockscreenCredential.createManagedPassword(v19);\nIGateKeeperService v33 = IGateKeeperService$Stub.asInterface(v28);\nbyte[] v54 = SyntheticPasswordManager$AuthenticationToken.derivePassword(v55);', 'LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);\nSyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, , p2, 0);']

The method getHashFactor has the following similar APIs:

- API Name: isWeakEscrowTokenValid(J[BI)Z with Similarity Score: 0.9134637117385864
  - Access Control Level: SYS_OR_SIG and the following code:
SyntheticPasswordManager$AuthenticationResult v25 = new SyntheticPasswordManager$AuthenticationResult();
byte[] v27 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
int v28 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0);
SyntheticPasswordManager$AuthenticationToken v36 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v35, 0, p4);

- API Name: tryUnlockWithCachedUnifiedChallenge(I)Z with Similarity Score: 0.8895607590675354
  - Access Control Level: SYS_OR_SIG and the following code:
LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);

