The method initRecoveryServiceWithSigFile has the following code snippet:

This is path 1 for the API with depth 2:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	if (p1 == 0) {
		boolean v4 = p1.isEmpty();
		if (v4 == 0) {
			String v3 = ;
			Object v5 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
			Object v6 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
			Element v8 = CertUtils.getXmlRootNode(p3);
			SigXml v9 = new SigXml(v10,v11,v12);
			List v10 = SigXml.parseIntermediateCerts(v8);
			X509Certificate v11 = SigXml.parseSignerCert(v8);
			byte[] v12 = SigXml.parseFileSignature(v8);
			SigXml v7 = v9;
			String v15 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v16 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v15);
			if (v16 == 0) {
				X509Certificate v17 = TrustedRootCertificates.getRootCertificate(v15);
				if (v17 == 0) {
					X509Certificate v14 = v17;
					SigXml.verifyFileSignature(v14, p2, 0);
					int v22 = UserHandle.getCallingUserId();
					int v23 = Binder.getCallingUid();
					String v24 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v3);
					boolean v25 = this.mTestCertHelper.isValidRootCertificateAlias(v24);
					if (v25 == 0) {
						String v26 = this.mDatabase.getActiveRootOfTrust(v22, v23);
						if (v26 != 0) {
							long v35 = this.mDatabase.setActiveRootOfTrust(v22, v23, v24);
							if ((v35 < 0) < 0) {
								CertXml v36 = CertXml.parse(p2);
								long v37 = v36.getSerial();
								Long v38 = this.mDatabase.getRecoveryServiceCertSerial(v22, v23, v24);
								if (v38 == 0) {
									long v39 = v38.longValue();
									if ((v39 < v37) < 0) {
										X509Certificate v46 = this.mTestCertHelper.getRootCertificate(v24);
										CertPath v48 = v36.getRandomEndpointCert(v46);
										long v50 = this.mDatabase.setRecoveryServiceCertPath(v22, v23, v24, v48);
										if ((v50 < 0) <= 0) {
											if ((v50 < 0) < 0) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	if (p1 == 0) {
		boolean v4 = p1.isEmpty();
		if (v4 == 0) {
			String v3 = ;
			Object v5 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
			Object v6 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
			Element v8 = CertUtils.getXmlRootNode(p3);
			SigXml v9 = new SigXml(v10,v11,v12);
			List v10 = SigXml.parseIntermediateCerts(v8);
			X509Certificate v11 = SigXml.parseSignerCert(v8);
			byte[] v12 = SigXml.parseFileSignature(v8);
			SigXml v7 = v9;
			String v15 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v16 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v15);
			if (v16 == 0) {
				X509Certificate v17 = TrustedRootCertificates.getRootCertificate(v15);
				if (v17 == 0) {
					X509Certificate v14 = v17;
					SigXml.verifyFileSignature(v14, p2, 0);
					int v22 = UserHandle.getCallingUserId();
					int v23 = Binder.getCallingUid();
					String v24 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v3);
					boolean v25 = this.mTestCertHelper.isValidRootCertificateAlias(v24);
					if (v25 == 0) {
						String v26 = this.mDatabase.getActiveRootOfTrust(v22, v23);
						if (v26 != 0) {
							boolean v27 = v26.equals(v24);
							if (v27 != 0) {
								long v38 = this.mDatabase.setActiveRootOfTrust(v22, v23, v24);
								if ((v38 < 0) < 0) {
									CertXml v39 = CertXml.parse(p2);
									long v40 = v39.getSerial();
									Long v41 = this.mDatabase.getRecoveryServiceCertSerial(v22, v23, v24);
									if (v41 == 0) {
										X509Certificate v48 = this.mTestCertHelper.getRootCertificate(v24);
										CertPath v50 = v39.getRandomEndpointCert(v48);
										long v52 = this.mDatabase.setRecoveryServiceCertPath(v22, v23, v24, v50);
										if ((v52 < 0) <= 0) {
											if ((v52 < 0) < 0) {
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v5 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");\nObject v6 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");\nElement v8 = CertUtils.getXmlRootNode(p3);\nList v10 = SigXml.parseIntermediateCerts(v8);\nX509Certificate v11 = SigXml.parseSignerCert(v8);\nbyte[] v12 = SigXml.parseFileSignature(v8);\nSigXml v9 = new SigXml(v10,v11,v12);', 'Object v4 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");\nObject v5 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");\nSigXml v6 = SigXml.parse(p3);\nX509Certificate v7 = this.mTestCertHelper.getRootCertificate(v3);\nv6.verifyFileSignature(v7, p2);\nRecoverableKeyStoreManager.initRecoveryService(v3, p2);', 'this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);']

The method initRecoveryServiceWithSigFile has the following similar APIs:

- API Name: setRecoveryStatus(Ljava/lang/String;I)V with Similarity Score: 0.8353334665298462
  - Access Control Level: SYS_OR_SIG and the following code:
this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);

- API Name: setRecoverySecretTypes([I)V with Similarity Score: 0.8189637660980225
  - Access Control Level: SYS_OR_SIG and the following code:
this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);

