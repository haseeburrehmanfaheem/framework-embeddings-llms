The method setLockCredential has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p1 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v1 = this.mType;
				if (v1 != -1) {
					if (v4 != 0) {
						if (v5 != 0) {
							if (v6 == 0) {
								boolean v7 = p2.isNone();
								if (v7 == 0) {
									long v8 = Binder.clearCallingIdentity();
									ContentResolver v10 = this.mContext.getContentResolver();
									int v12 = Settings$Secure.getIntForUser(v10, "user_setup_complete", 0, 0);
									int v11 = v12;
									if (v11 != 0) {
										int v14 = Settings$Secure.getIntForUser(v10, "secure_frp_mode", 0, 0);
										int v13 = v14;
										if (v13 != 1) {
											if ( == 0) {
												if ( != 0) {
													boolean v15 = p2.isNone();
													if (v15 != 0) {
														UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
														boolean v19 = v18.isCredentialSharableWithParent();
														boolean v17 = v19;
														if (v17 == 0) {
															boolean v21 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
															boolean v20 = v21;
															if (v20 != 0) {
																boolean v16 = ;
																if (v16 == 0) {
																	UserInfo v22 = this.mUserManager.getProfileParent(p3);
																	if (v24 != 0) {
																		if (v25 == 0) {
																			long v26 = Binder.clearCallingIdentity();
																			if (p1 == 0) {
																				boolean v28 = p1.isNone();
																				if (v28 != 0) {
																					if (p2 != -9999) {
																						ContentResolver v29 = this.mContext.getContentResolver();
																						int v30 = this.mInjector.settingsGlobalGetInt(v29, "device_provisioned", 0);
																						if (v30 == 0) {
																							VerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
																							if (v31 == 0) {
																								if (p2 != -9999) {
																									LockSettingsStorage$CredentialHash v32 = this.mStorage.readCredentialHash(p2);
																									boolean v33 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
																									if (v33 != 0) {
																										int v39 = p1.getType();
																										VerifyCredentialResponse v27 = VerifyCredentialResponse.ERROR;
																										Binder.restoreCallingIdentity(v26);
																										LockSettingsService$$ExternalSyntheticLambda3 v45 = new LockSettingsService$$ExternalSyntheticLambda3();
																										boolean v47 = this.mHandler.postDelayed(v45, 2000);
																										VerifyCredentialResponse v23 = v27;
																										p2.zeroize();
																										LockscreenCredential v49 = LockscreenCredential.createNone();
																										Object v51 = Objects.requireNonNull(p1);
																										Object v52 = Objects.requireNonNull();
																										if (p3 != -9999) {
																											LockSettingsStorage$PersistentData v54 = this.mStorage.readPersistentDataBlock();
																											if (LockSettingsStorage$PersistentData.type == 1) {
																												if (LockSettingsStorage$PersistentData.type != 2) {
																													boolean v53 = ;
																													if (v53 == 0) {
																														boolean v55 = p1.isNone();
																														if (v55 == 0) {
																															UserInfo v57 = this.mUserManager.getUserInfo(p3);
																															long v58 = Binder.clearCallingIdentity();
																															this.mStorageManager.clearUserKeyAuth(p3, UserInfo.serialNumber, 0);
																															Binder.restoreCallingIdentity(v58);
																															IGateKeeperService v62 = LockSettingsService.getGateKeeperService();
																															v62.clearSecureUserId(p3);
																															LockSettingsStorage$CredentialHash v66 = new LockSettingsStorage$CredentialHash(0,-1);
																															LockSettingsStorage$CredentialHash v65 = v66;
																															if (LockSettingsStorage$CredentialHash.type == 2) {
																																if (LockSettingsStorage$CredentialHash.type == 4) {
																																	if (LockSettingsStorage$CredentialHash.type != 3) {
																																		if (LockSettingsStorage$CredentialHash.type != 1) {
																																			if (LockSettingsStorage$CredentialHash.type != -1) {
																																				Preconditions.checkArgument(, "Unknown credential type");
																																				String v70 = LockSettingsStorage.getLockPasswordFilename(p3);
																																				LockSettingsStorage.writeFile(v70, );
																																				String v72 = LockSettingsStorage.getLockPatternFilename(p3);
																																				LockSettingsStorage.writeFile(v72, );
																																				this.mStorage.setLong("lockscreen.password_type", 0, p3);
																																				int v77 = AndroidKeyStoreMaintenance.onUserPasswordChanged(p3, 0);
																																				long v79 = Binder.clearCallingIdentity();
																																				this.mStorageManager.fixateNewestUserKeyAuth(p3);
																																				Binder.restoreCallingIdentity(v79);
																																				boolean v84 = LockSettingsService.isCredentialSharableWithParent(p3);
																																				if (v84 == 0) {
																																					boolean v85 = LockSettingsService.isUserSecure(p3);
																																					List v86 = this.mUserManager.getProfiles(p3);
																																					int v87 = v86.size();
																																					if ( >= v87) {
																																						Object v88 = v86.get();
																																						boolean v89 = LockSettingsService.isCredentialSharableWithParent(UserInfo.id);
																																						if (v89 == 0) {
																																							boolean v90 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(UserInfo.id);
																																							if (v90 == 0) {
																																								if (v85 == 0) {
																																									if (0 == 0) {
																																										Integer v91 = Integer.valueOf(UserInfo.id);
																																										boolean v92 = 0.containsKey(v91);
																																										if (v92 == 0) {
																																											LockscreenCredential v93 = LockscreenCredential.createNone();
																																											Integer v94 = Integer.valueOf(UserInfo.id);
																																											Object v95 = 0.get(v94);
																																											boolean v96 = LockSettingsService.setLockCredentialInternal(v93, v95, UserInfo.id, 1);
																																											this.mStorage.removeChildProfileLock(UserInfo.id);
																																											LockSettingsService.removeKeystoreProfileKey(UserInfo.id);
																																											if ( >= v87) {
																																												LockscreenCredential v100 = new LockscreenCredential(-1,v101);
																																												[B v101 = new [B(0);
																																												LockscreenCredential v99 = v100;
																																												PasswordMetrics v104 = PasswordMetrics.computeForCredential(v99);
																																												this.mUserPasswordMetrics.put(p3, v104);
																																												if (p4 == 0) {
																																													boolean v107 = p1.isNone();
																																													if (v107 == 0) {
																																														Set v108 = LockSettingsService.getProfilesWithSameLockScreen(p3);
																																														Iterator v109 = v108.iterator();
																																														boolean v110 = v109.hasNext();
																																														if (v110 == 0) {
																																															Object v111 = v109.next();
																																															int v112 = v111.intValue();
																																															int v113 = p1.getType();
																																															this.mRecoverableKeyStoreManager.lockScreenSecretChanged(v113, , v112);
																																															boolean v115 = v109.hasNext();
																																															if (v115 == 0) {
																																																boolean v50 = 1;
																																																if (v50 != 0) {
																																																	boolean v119 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
																																																	if (v119 == 0) {
																																																		int v120 = LockSettingsService.getCredentialTypeInternal(p1);
																																																		if (v120 != 1) {
																																																			boolean v117 = ;
																																																			this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
																																																			if (1 == 0) {
																																																				String v125 = LockSettingsStorage.getChildProfileLockFile(p1);
																																																				LockSettingsStorage.deleteFile(v125);
																																																				caughtException.printStackTrace();
																																																				StringBuilder v135 = new StringBuilder();
																																																				StringBuilder v137 = v135.append("profile_key_name_encrypt_");
																																																				StringBuilder v138 = v135.append(p1);
																																																				String v139 = v135.toString();
																																																				this.mJavaKeyStore.deleteEntry(v139);
																																																				StringBuilder v141 = new StringBuilder();
																																																				StringBuilder v143 = v141.append("profile_key_name_decrypt_");
																																																				StringBuilder v144 = v141.append(p1);
																																																				String v145 = v141.toString();
																																																				this.mJavaKeyStore.deleteEntry(v145);
																																																				p0.notifyPasswordChanged(p1, p3);
																																																				UserHandle v150 = UserHandle.of(p1);
																																																				boolean v151 = this.mUserManagerCache.containsKey(v150);
																																																				if (v151 == 0) {
																																																					Context v152 = this.mContext.createPackageContextAsUser("system", 0, v150);
																																																					Object v153 = v152.getSystemService(UserManage.class);
																																																					Object v154 = this.mUserManagerCache.put(v150, v153);
																																																					UserManager v149 = v153;
																																																					boolean v155 = v149.isCredentialSharableWithParent();
																																																					boolean v148 = v155;
																																																					if (v148 == 0) {
																																																						Object v157 = this.mContext.getSystemService(TrustManage.class);
																																																						this.mService.setDeviceLockedForUser(p1, 0);
																																																						p0.notifySeparateProfileChallengeChanged(p3);
																																																						if (p3 != 0) {
																																																							boolean v163 = StorageManager.isEncrypted();
																																																							boolean v162 = v163;
																																																							if (v162 == 0) {
																																																								boolean v165 = LockSettingsService.isCredentialRequiredToDecrypt();
																																																								if (v165 == 0) {
																																																									boolean v166 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
																																																									if (v166 != 0) {
																																																										boolean v164 = ;
																																																										if (v164 == 0) {
																																																											boolean v167 = p1.isNone();
																																																											if (v167 == 0) {
																																																												boolean v169 = LockSettingsService.isDeviceEncryptionEnabled();
																																																												if (v169 == 0) {
																																																													ContentResolver v170 = this.mContext.getContentResolver();
																																																													boolean v171 = Settings$Global.putInt(v170, "require_password_to_decrypt", 0);
																																																													boolean v172 = p1.isPattern();
																																																													if (v172 == 0) {
																																																														this.mStorage.setBoolean("lockscreen.patterneverchosen", 1, p2);
																																																														boolean v177 = p1.isNone();
																																																														if (v177 == 0) {
																																																															boolean v178 = p1.isPattern();
																																																															if (v178 == 0) {
																																																																String v179 = LockSettingsService.getString("lockscreen.passwordhistory", 0, p2);
																																																																if (v179 != 0) {
																																																																	int v180 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
																																																																	if (v180 != 0) {
																																																																		byte[] v181 = LockSettingsService.getHashFactor(p1, p2);
																																																																		String v182 = LockSettingsService.getSalt(p2);
																																																																		byte[] v183 = v182.getBytes();
																																																																		String v184 = p1.passwordToHistoryHash(v183, v181);
																																																																		if (v184 != 0) {
																																																																			boolean v185 = TextUtils.isEmpty();
																																																																			if (v185 == 0) {
																																																																				String v186 = .split(",");
																																																																				StringJoiner v187 = new StringJoiner(",");
																																																																				StringJoiner v189 = v187.add();
																																																																				if ( >= (v180 + -1)) {
																																																																					if ( >= v186.length) {
																																																																						StringJoiner v190 = v187.add(v186[]);
																																																																						if ( >= (v180 + -1)) {
																																																																							if ( >= v186.length) {
																																																																								String v191 = v187.toString();
																																																																								LockSettingsService.setString("lockscreen.passwordhistory", , p2);
																																																																								Object v193 = this.mContext.getSystemService(TrustManage.class);
																																																																								this.mService.reportEnabledTrustAgentsChanged(p2);
																																																																								p0.scheduleGc();
																																																																								Binder.restoreCallingIdentity(v8);
																																																																								return 1;
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p1 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v1 = this.mType;
				if (v1 != -1) {
					if (v4 != 0) {
						if (v5 != 0) {
							if (v6 == 0) {
								boolean v7 = p2.isNone();
								if (v7 == 0) {
									long v8 = Binder.clearCallingIdentity();
									ContentResolver v10 = this.mContext.getContentResolver();
									int v12 = Settings$Secure.getIntForUser(v10, "user_setup_complete", 0, 0);
									int v11 = v12;
									if (v11 != 0) {
										int v14 = Settings$Secure.getIntForUser(v10, "secure_frp_mode", 0, 0);
										int v13 = v14;
										if (v13 != 1) {
											if ( == 0) {
												if ( != 0) {
													boolean v15 = p2.isNone();
													if (v15 != 0) {
														UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
														boolean v19 = v18.isCredentialSharableWithParent();
														boolean v17 = v19;
														if (v17 == 0) {
															boolean v21 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
															boolean v20 = v21;
															if (v20 != 0) {
																boolean v16 = ;
																if (v16 == 0) {
																	UserInfo v22 = this.mUserManager.getProfileParent(p3);
																	if (v24 != 0) {
																		if (v25 == 0) {
																			long v26 = Binder.clearCallingIdentity();
																			if (p1 == 0) {
																				boolean v28 = p1.isNone();
																				if (v28 != 0) {
																					if (p2 != -9999) {
																						ContentResolver v29 = this.mContext.getContentResolver();
																						int v30 = this.mInjector.settingsGlobalGetInt(v29, "device_provisioned", 0);
																						if (v30 == 0) {
																							VerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
																							if (v31 == 0) {
																								if (p2 != -9999) {
																									LockSettingsStorage$CredentialHash v32 = this.mStorage.readCredentialHash(p2);
																									boolean v33 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
																									if (v33 != 0) {
																										int v39 = p1.getType();
																										VerifyCredentialResponse v27 = VerifyCredentialResponse.ERROR;
																										Binder.restoreCallingIdentity(v26);
																										LockSettingsService$$ExternalSyntheticLambda3 v45 = new LockSettingsService$$ExternalSyntheticLambda3();
																										boolean v47 = this.mHandler.postDelayed(v45, 2000);
																										VerifyCredentialResponse v23 = v27;
																										p2.zeroize();
																										LockscreenCredential v49 = LockscreenCredential.createNone();
																										Object v51 = Objects.requireNonNull(p1);
																										Object v52 = Objects.requireNonNull();
																										if (p3 != -9999) {
																											LockSettingsStorage$PersistentData v54 = this.mStorage.readPersistentDataBlock();
																											if (LockSettingsStorage$PersistentData.type == 1) {
																												if (LockSettingsStorage$PersistentData.type != 2) {
																													boolean v53 = ;
																													if (v53 == 0) {
																														boolean v55 = p1.isNone();
																														if (v55 == 0) {
																															UserInfo v57 = this.mUserManager.getUserInfo(p3);
																															long v58 = Binder.clearCallingIdentity();
																															this.mStorageManager.clearUserKeyAuth(p3, UserInfo.serialNumber, 0);
																															Binder.restoreCallingIdentity(v58);
																															IGateKeeperService v62 = LockSettingsService.getGateKeeperService();
																															v62.clearSecureUserId(p3);
																															LockSettingsStorage$CredentialHash v66 = new LockSettingsStorage$CredentialHash(0,-1);
																															LockSettingsStorage$CredentialHash v65 = v66;
																															if (LockSettingsStorage$CredentialHash.type == 2) {
																																if (LockSettingsStorage$CredentialHash.type == 4) {
																																	if (LockSettingsStorage$CredentialHash.type != 3) {
																																		if (LockSettingsStorage$CredentialHash.type != 1) {
																																			if (LockSettingsStorage$CredentialHash.type != -1) {
																																				Preconditions.checkArgument(, "Unknown credential type");
																																				String v70 = LockSettingsStorage.getLockPasswordFilename(p3);
																																				LockSettingsStorage.writeFile(v70, );
																																				String v72 = LockSettingsStorage.getLockPatternFilename(p3);
																																				LockSettingsStorage.writeFile(v72, );
																																				this.mStorage.setLong("lockscreen.password_type", 0, p3);
																																				int v77 = AndroidKeyStoreMaintenance.onUserPasswordChanged(p3, 0);
																																				long v79 = Binder.clearCallingIdentity();
																																				this.mStorageManager.fixateNewestUserKeyAuth(p3);
																																				Binder.restoreCallingIdentity(v79);
																																				boolean v84 = LockSettingsService.isCredentialSharableWithParent(p3);
																																				if (v84 == 0) {
																																					boolean v85 = LockSettingsService.isUserSecure(p3);
																																					List v86 = this.mUserManager.getProfiles(p3);
																																					int v87 = v86.size();
																																					if ( >= v87) {
																																						Object v88 = v86.get();
																																						boolean v89 = LockSettingsService.isCredentialSharableWithParent(UserInfo.id);
																																						if (v89 == 0) {
																																							boolean v90 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(UserInfo.id);
																																							if (v90 == 0) {
																																								if (v85 == 0) {
																																									if (0 == 0) {
																																										Integer v91 = Integer.valueOf(UserInfo.id);
																																										boolean v92 = 0.containsKey(v91);
																																										if (v92 == 0) {
																																											LockscreenCredential v93 = LockscreenCredential.createNone();
																																											Integer v94 = Integer.valueOf(UserInfo.id);
																																											Object v95 = 0.get(v94);
																																											boolean v96 = LockSettingsService.setLockCredentialInternal(v93, v95, UserInfo.id, 1);
																																											this.mStorage.removeChildProfileLock(UserInfo.id);
																																											LockSettingsService.removeKeystoreProfileKey(UserInfo.id);
																																											if ( >= v87) {
																																												LockscreenCredential v100 = new LockscreenCredential(-1,v101);
																																												[B v101 = new [B(0);
																																												LockscreenCredential v99 = v100;
																																												PasswordMetrics v104 = PasswordMetrics.computeForCredential(v99);
																																												this.mUserPasswordMetrics.put(p3, v104);
																																												if (p4 == 0) {
																																													boolean v107 = p1.isNone();
																																													if (v107 == 0) {
																																														byte[] v108 = p1.getCredential();
																																														Set v109 = LockSettingsService.getProfilesWithSameLockScreen(p3);
																																														Iterator v110 = v109.iterator();
																																														boolean v111 = v110.hasNext();
																																														if (v111 == 0) {
																																															Object v112 = v110.next();
																																															int v113 = v112.intValue();
																																															int v114 = p1.getType();
																																															this.mRecoverableKeyStoreManager.lockScreenSecretChanged(v114, , v113);
																																															boolean v116 = v110.hasNext();
																																															if (v116 == 0) {
																																																boolean v50 = 1;
																																																if (v50 != 0) {
																																																	boolean v120 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
																																																	if (v120 == 0) {
																																																		int v121 = LockSettingsService.getCredentialTypeInternal(p1);
																																																		if (v121 != 1) {
																																																			boolean v118 = ;
																																																			this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
																																																			if (1 == 0) {
																																																				String v126 = LockSettingsStorage.getChildProfileLockFile(p1);
																																																				LockSettingsStorage.deleteFile(v126);
																																																				caughtException.printStackTrace();
																																																				StringBuilder v136 = new StringBuilder();
																																																				StringBuilder v138 = v136.append("profile_key_name_encrypt_");
																																																				StringBuilder v139 = v136.append(p1);
																																																				String v140 = v136.toString();
																																																				this.mJavaKeyStore.deleteEntry(v140);
																																																				StringBuilder v142 = new StringBuilder();
																																																				StringBuilder v144 = v142.append("profile_key_name_decrypt_");
																																																				StringBuilder v145 = v142.append(p1);
																																																				String v146 = v142.toString();
																																																				this.mJavaKeyStore.deleteEntry(v146);
																																																				p0.notifyPasswordChanged(p1, p3);
																																																				UserHandle v151 = UserHandle.of(p1);
																																																				boolean v152 = this.mUserManagerCache.containsKey(v151);
																																																				if (v152 == 0) {
																																																					Context v153 = this.mContext.createPackageContextAsUser("system", 0, v151);
																																																					Object v154 = v153.getSystemService(UserManage.class);
																																																					Object v155 = this.mUserManagerCache.put(v151, v154);
																																																					UserManager v150 = v154;
																																																					boolean v156 = v150.isCredentialSharableWithParent();
																																																					boolean v149 = v156;
																																																					if (v149 == 0) {
																																																						Object v158 = this.mContext.getSystemService(TrustManage.class);
																																																						this.mService.setDeviceLockedForUser(p1, 0);
																																																						p0.notifySeparateProfileChallengeChanged(p3);
																																																						if (p3 != 0) {
																																																							boolean v164 = StorageManager.isEncrypted();
																																																							boolean v163 = v164;
																																																							if (v163 == 0) {
																																																								boolean v166 = LockSettingsService.isCredentialRequiredToDecrypt();
																																																								if (v166 == 0) {
																																																									boolean v167 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
																																																									if (v167 != 0) {
																																																										boolean v165 = ;
																																																										if (v165 == 0) {
																																																											boolean v168 = p1.isNone();
																																																											if (v168 == 0) {
																																																												boolean v170 = LockSettingsService.isDeviceEncryptionEnabled();
																																																												if (v170 == 0) {
																																																													ContentResolver v171 = this.mContext.getContentResolver();
																																																													boolean v172 = Settings$Global.putInt(v171, "require_password_to_decrypt", 0);
																																																													boolean v173 = p1.isPattern();
																																																													if (v173 == 0) {
																																																														this.mStorage.setBoolean("lockscreen.patterneverchosen", 1, p2);
																																																														boolean v178 = p1.isNone();
																																																														if (v178 == 0) {
																																																															boolean v179 = p1.isPattern();
																																																															if (v179 == 0) {
																																																																String v180 = LockSettingsService.getString("lockscreen.passwordhistory", 0, p2);
																																																																if (v180 != 0) {
																																																																	int v181 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
																																																																	if (v181 != 0) {
																																																																		byte[] v182 = LockSettingsService.getHashFactor(p1, p2);
																																																																		String v183 = LockSettingsService.getSalt(p2);
																																																																		byte[] v184 = v183.getBytes();
																																																																		String v185 = p1.passwordToHistoryHash(v184, v182);
																																																																		if (v185 != 0) {
																																																																			boolean v186 = TextUtils.isEmpty();
																																																																			if (v186 == 0) {
																																																																				String v187 = .split(",");
																																																																				StringJoiner v188 = new StringJoiner(",");
																																																																				StringJoiner v190 = v188.add();
																																																																				if ( >= (v181 + -1)) {
																																																																					if ( >= v187.length) {
																																																																						StringJoiner v191 = v188.add(v187[]);
																																																																						if ( >= (v181 + -1)) {
																																																																							if ( >= v187.length) {
																																																																								String v192 = v188.toString();
																																																																								LockSettingsService.setString("lockscreen.passwordhistory", , p2);
																																																																								Object v194 = this.mContext.getSystemService(TrustManage.class);
																																																																								this.mService.reportEnabledTrustAgentsChanged(p2);
																																																																								p0.scheduleGc();
																																																																								Binder.restoreCallingIdentity(v8);
																																																																								return 1;
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p1 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v1 = this.mType;
				if (v1 != -1) {
					if (v4 != 0) {
						if (v5 != 0) {
							if (v6 == 0) {
								boolean v7 = p2.isNone();
								if (v7 == 0) {
									long v8 = Binder.clearCallingIdentity();
									ContentResolver v10 = this.mContext.getContentResolver();
									int v12 = Settings$Secure.getIntForUser(v10, "user_setup_complete", 0, 0);
									int v11 = v12;
									if (v11 != 0) {
										int v14 = Settings$Secure.getIntForUser(v10, "secure_frp_mode", 0, 0);
										int v13 = v14;
										if (v13 != 1) {
											if ( == 0) {
												if ( != 0) {
													boolean v15 = p2.isNone();
													if (v15 != 0) {
														UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
														boolean v19 = v18.isCredentialSharableWithParent();
														boolean v17 = v19;
														if (v17 == 0) {
															boolean v21 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
															boolean v20 = v21;
															if (v20 != 0) {
																boolean v16 = ;
																if (v16 == 0) {
																	UserInfo v22 = this.mUserManager.getProfileParent(p3);
																	if (v24 != 0) {
																		if (v25 == 0) {
																			long v26 = Binder.clearCallingIdentity();
																			if (p1 == 0) {
																				boolean v28 = p1.isNone();
																				if (v28 != 0) {
																					if (p2 != -9999) {
																						ContentResolver v29 = this.mContext.getContentResolver();
																						int v30 = this.mInjector.settingsGlobalGetInt(v29, "device_provisioned", 0);
																						if (v30 == 0) {
																							VerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
																							if (v31 == 0) {
																								if (p2 != -9999) {
																									LockSettingsStorage$CredentialHash v32 = this.mStorage.readCredentialHash(p2);
																									boolean v33 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
																									if (v33 != 0) {
																										int v39 = p1.getType();
																										VerifyCredentialResponse v27 = VerifyCredentialResponse.ERROR;
																										Binder.restoreCallingIdentity(v26);
																										LockSettingsService$$ExternalSyntheticLambda3 v45 = new LockSettingsService$$ExternalSyntheticLambda3();
																										boolean v47 = this.mHandler.postDelayed(v45, 2000);
																										VerifyCredentialResponse v23 = v27;
																										p2.zeroize();
																										LockscreenCredential v49 = LockscreenCredential.createNone();
																										Object v51 = Objects.requireNonNull(p1);
																										Object v52 = Objects.requireNonNull();
																										if (p3 != -9999) {
																											LockSettingsStorage$PersistentData v54 = this.mStorage.readPersistentDataBlock();
																											if (LockSettingsStorage$PersistentData.type == 1) {
																												if (LockSettingsStorage$PersistentData.type != 2) {
																													boolean v53 = ;
																													if (v53 == 0) {
																														boolean v55 = p1.isNone();
																														if (v55 == 0) {
																															UserInfo v57 = this.mUserManager.getUserInfo(p3);
																															long v58 = Binder.clearCallingIdentity();
																															this.mStorageManager.clearUserKeyAuth(p3, UserInfo.serialNumber, 0);
																															Binder.restoreCallingIdentity(v58);
																															IGateKeeperService v62 = LockSettingsService.getGateKeeperService();
																															v62.clearSecureUserId(p3);
																															LockSettingsStorage$CredentialHash v66 = new LockSettingsStorage$CredentialHash(0,-1);
																															LockSettingsStorage$CredentialHash v65 = v66;
																															if (LockSettingsStorage$CredentialHash.type == 2) {
																																if (LockSettingsStorage$CredentialHash.type == 4) {
																																	if (LockSettingsStorage$CredentialHash.type != 3) {
																																		if (LockSettingsStorage$CredentialHash.type != 1) {
																																			if (LockSettingsStorage$CredentialHash.type != -1) {
																																				Preconditions.checkArgument(, "Unknown credential type");
																																				String v70 = LockSettingsStorage.getLockPasswordFilename(p3);
																																				LockSettingsStorage.writeFile(v70, );
																																				String v72 = LockSettingsStorage.getLockPatternFilename(p3);
																																				LockSettingsStorage.writeFile(v72, );
																																				this.mStorage.setLong("lockscreen.password_type", 0, p3);
																																				int v77 = AndroidKeyStoreMaintenance.onUserPasswordChanged(p3, 0);
																																				long v79 = Binder.clearCallingIdentity();
																																				this.mStorageManager.fixateNewestUserKeyAuth(p3);
																																				Binder.restoreCallingIdentity(v79);
																																				boolean v84 = LockSettingsService.isCredentialSharableWithParent(p3);
																																				if (v84 == 0) {
																																					boolean v85 = LockSettingsService.isUserSecure(p3);
																																					List v86 = this.mUserManager.getProfiles(p3);
																																					int v87 = v86.size();
																																					if ( >= v87) {
																																						Object v88 = v86.get();
																																						boolean v89 = LockSettingsService.isCredentialSharableWithParent(UserInfo.id);
																																						if (v89 == 0) {
																																							boolean v90 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(UserInfo.id);
																																							if (v90 == 0) {
																																								if (v85 == 0) {
																																									if (0 == 0) {
																																										Integer v91 = Integer.valueOf(UserInfo.id);
																																										boolean v92 = 0.containsKey(v91);
																																										if (v92 == 0) {
																																											LockscreenCredential v93 = LockscreenCredential.createNone();
																																											Integer v94 = Integer.valueOf(UserInfo.id);
																																											Object v95 = 0.get(v94);
																																											boolean v96 = LockSettingsService.setLockCredentialInternal(v93, v95, UserInfo.id, 1);
																																											this.mStorage.removeChildProfileLock(UserInfo.id);
																																											LockSettingsService.removeKeystoreProfileKey(UserInfo.id);
																																											if ( >= v87) {
																																												LockscreenCredential v100 = new LockscreenCredential(-1,v101);
																																												[B v101 = new [B(0);
																																												LockscreenCredential v99 = v100;
																																												PasswordMetrics v104 = PasswordMetrics.computeForCredential(v99);
																																												this.mUserPasswordMetrics.put(p3, v104);
																																												if (p4 == 0) {
																																													boolean v107 = p1.isNone();
																																													if (v107 == 0) {
																																														Set v108 = LockSettingsService.getProfilesWithSameLockScreen(p3);
																																														Iterator v109 = v108.iterator();
																																														boolean v110 = v109.hasNext();
																																														if (v110 == 0) {
																																															Object v111 = v109.next();
																																															int v112 = v111.intValue();
																																															int v113 = p1.getType();
																																															this.mRecoverableKeyStoreManager.lockScreenSecretChanged(v113, , v112);
																																															boolean v115 = v109.hasNext();
																																															if (v115 == 0) {
																																																boolean v50 = 1;
																																																if (v50 != 0) {
																																																	boolean v119 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
																																																	if (v119 == 0) {
																																																		int v120 = LockSettingsService.getCredentialTypeInternal(p1);
																																																		if (v120 != 1) {
																																																			boolean v117 = ;
																																																			this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
																																																			if (1 == 0) {
																																																				String v125 = LockSettingsStorage.getChildProfileLockFile(p1);
																																																				LockSettingsStorage.deleteFile(v125);
																																																				StringBuilder v134 = new StringBuilder();
																																																				StringBuilder v136 = v134.append("profile_key_name_encrypt_");
																																																				StringBuilder v137 = v134.append(p1);
																																																				String v138 = v134.toString();
																																																				this.mJavaKeyStore.deleteEntry(v138);
																																																				StringBuilder v140 = new StringBuilder();
																																																				StringBuilder v142 = v140.append("profile_key_name_decrypt_");
																																																				StringBuilder v143 = v140.append(p1);
																																																				String v144 = v140.toString();
																																																				this.mJavaKeyStore.deleteEntry(v144);
																																																				p0.notifyPasswordChanged(p1, p3);
																																																				UserHandle v149 = UserHandle.of(p1);
																																																				boolean v150 = this.mUserManagerCache.containsKey(v149);
																																																				if (v150 == 0) {
																																																					Context v151 = this.mContext.createPackageContextAsUser("system", 0, v149);
																																																					Object v152 = v151.getSystemService(UserManage.class);
																																																					Object v153 = this.mUserManagerCache.put(v149, v152);
																																																					UserManager v148 = v152;
																																																					boolean v154 = v148.isCredentialSharableWithParent();
																																																					boolean v147 = v154;
																																																					if (v147 == 0) {
																																																						Object v156 = this.mContext.getSystemService(TrustManage.class);
																																																						this.mService.setDeviceLockedForUser(p1, 0);
																																																						p0.notifySeparateProfileChallengeChanged(p3);
																																																						if (p3 != 0) {
																																																							boolean v162 = StorageManager.isEncrypted();
																																																							boolean v161 = v162;
																																																							if (v161 == 0) {
																																																								boolean v164 = LockSettingsService.isCredentialRequiredToDecrypt();
																																																								if (v164 == 0) {
																																																									boolean v165 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
																																																									if (v165 != 0) {
																																																										boolean v163 = ;
																																																										if (v163 == 0) {
																																																											boolean v166 = p1.isNone();
																																																											if (v166 == 0) {
																																																												boolean v168 = LockSettingsService.isDeviceEncryptionEnabled();
																																																												if (v168 == 0) {
																																																													ContentResolver v169 = this.mContext.getContentResolver();
																																																													boolean v170 = Settings$Global.putInt(v169, "require_password_to_decrypt", 0);
																																																													boolean v171 = p1.isPattern();
																																																													if (v171 == 0) {
																																																														this.mStorage.setBoolean("lockscreen.patterneverchosen", 1, p2);
																																																														boolean v176 = p1.isNone();
																																																														if (v176 == 0) {
																																																															boolean v177 = p1.isPattern();
																																																															if (v177 == 0) {
																																																																String v178 = LockSettingsService.getString("lockscreen.passwordhistory", 0, p2);
																																																																if (v178 != 0) {
																																																																	int v179 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
																																																																	if (v179 != 0) {
																																																																		byte[] v180 = LockSettingsService.getHashFactor(p1, p2);
																																																																		String v181 = LockSettingsService.getSalt(p2);
																																																																		byte[] v182 = v181.getBytes();
																																																																		String v183 = p1.passwordToHistoryHash(v182, v180);
																																																																		if (v183 != 0) {
																																																																			boolean v184 = TextUtils.isEmpty();
																																																																			if (v184 == 0) {
																																																																				String v185 = .split(",");
																																																																				StringJoiner v186 = new StringJoiner(",");
																																																																				StringJoiner v188 = v186.add();
																																																																				if ( >= (v179 + -1)) {
																																																																					if ( >= v185.length) {
																																																																						StringJoiner v189 = v186.add(v185[]);
																																																																						if ( >= (v179 + -1)) {
																																																																							if ( >= v185.length) {
																																																																								String v190 = v186.toString();
																																																																								LockSettingsService.setString("lockscreen.passwordhistory", , p2);
																																																																								Object v192 = this.mContext.getSystemService(TrustManage.class);
																																																																								this.mService.reportEnabledTrustAgentsChanged(p2);
																																																																								p0.scheduleGc();
																																																																								Binder.restoreCallingIdentity(v8);
																																																																								return 1;
																																																																							}
																																																																						}
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = this.mType;\nVerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);\nLockscreenCredential v93 = LockscreenCredential.createNone();\nthis.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);', 'VerifyCredentialResponse v21 = LockSettingsService.doVerifyCredential(p2, UserInfo.id, 0, 0);\nSyntheticPasswordManager$AuthenticationToken v40 = LockSettingsService.initializeSyntheticPasswordLocked(LockSettingsStorage$CredentialHash.hash, , p3);\nboolean v41 = LockSettingsService.spBasedSetLockCredentialInternalLocked(p1, , p3, 0);', 'VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0);\nboolean v14 = p0.setLockCredentialInternal(p1, , p3, 0);']

The method setLockCredential has the following similar APIs:

- API Name: setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V with Similarity Score: 0.9247453212738037
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = this.mType;
LockscreenCredential v5 = new LockscreenCredential(-1,v6);
LockSettingsService.setBoolean("lockscreen.profilechallenge", p2, p1);
this.mStorage.removeChildProfileLock(p1);

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9036388397216797
  - Access Control Level: SYS_OR_SIG and the following code:
VerifyCredentialResponse v10 = LockSettingsService.spBasedDoVerifyCredential(p1, UserInfo.id, 0, p3);
LockSettingsStorage$CredentialHash v11 = this.mStorage.readCredentialHash(UserInfo.id);

