The method startRecoverySessionWithCertPath has the following code snippet:

This is path 1 for the API with depth 2:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	if (p2 == 0) {
		boolean v4 = p2.isEmpty();
		if (v4 == 0) {
			String v3 = ;
			Object v5 = Objects.requireNonNull(p1, "invalid session");
			Object v6 = Objects.requireNonNull(p3, "verifierCertPath is null");
			Object v7 = Objects.requireNonNull(p4, "vaultParams is null");
			Object v8 = Objects.requireNonNull(p5, "vaultChallenge is null");
			Object v9 = Objects.requireNonNull(p6, "secrets is null");
			CertPath v11 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
			CertPath v10 = v11;
			String v13 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v14 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v13);
			if (v14 == 0) {
				X509Certificate v15 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
				X509Certificate v12 = v15;
				CertUtils.validateCertPath(0, v12, v10);
				List v18 = v10.getCertificates();
				Object v19 = v18.get(0);
				PublicKey v20 = v19.getPublicKey();
				byte[] v21 = v20.getEncoded();
				if (v21 == 0) {
					int v24 = Binder.getCallingUid();
					int v25 = p6.size();
					if (v25 != 1) {
						PublicKey v26 = KeySyncUtils.deserializePublicKey(v21);
						boolean v27 = RecoverableKeyStoreManager.publicKeysMatch(v26, p4);
						if (v27 == 0) {
							byte[] v28 = KeySyncUtils.generateKeyClaimant();
							Object v29 = p6.get(0);
							byte[] v30 = v29.getSecret();
							RecoverySessionStorage$Entry v31 = new RecoverySessionStorage$Entry(p1,v30,v28,p4);
							this.mRecoverySessionStorage.add(v24, v31);
							String v37 = HexDump.toHexString(p4);
							byte[] v41 = KeySyncUtils.calculateThmKfHash(v30);
							byte[] v42 = KeySyncUtils.encryptRecoveryClaim(v26, p4, p5, v41, v28);
							byte[] v22 = v42;
							byte[] v1 = v22;
							return v1;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	if (p2 == 0) {
		boolean v4 = p2.isEmpty();
		if (v4 == 0) {
			String v3 = ;
			Object v5 = Objects.requireNonNull(p1, "invalid session");
			Object v6 = Objects.requireNonNull(p3, "verifierCertPath is null");
			Object v7 = Objects.requireNonNull(p4, "vaultParams is null");
			Object v8 = Objects.requireNonNull(p5, "vaultChallenge is null");
			Object v9 = Objects.requireNonNull(p6, "secrets is null");
			CertPath v11 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
			CertPath v10 = v11;
			String v13 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v14 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v13);
			if (v14 == 0) {
				X509Certificate v15 = TrustedRootCertificates.getRootCertificate(v13);
				if (v15 == 0) {
					X509Certificate v12 = v15;
					CertUtils.validateCertPath(0, v12, v10);
					List v18 = v10.getCertificates();
					Object v19 = v18.get(0);
					PublicKey v20 = v19.getPublicKey();
					byte[] v21 = v20.getEncoded();
					if (v21 == 0) {
						int v24 = Binder.getCallingUid();
						int v25 = p6.size();
						if (v25 != 1) {
							PublicKey v26 = KeySyncUtils.deserializePublicKey(v21);
							boolean v27 = RecoverableKeyStoreManager.publicKeysMatch(v26, p4);
							if (v27 == 0) {
								byte[] v28 = KeySyncUtils.generateKeyClaimant();
								Object v29 = p6.get(0);
								byte[] v30 = v29.getSecret();
								RecoverySessionStorage$Entry v31 = new RecoverySessionStorage$Entry(p1,v30,v28,p4);
								this.mRecoverySessionStorage.add(v24, v31);
								String v37 = HexDump.toHexString(p4);
								byte[] v41 = KeySyncUtils.calculateThmKfHash(v30);
								byte[] v42 = KeySyncUtils.encryptRecoveryClaim(v26, p4, p5, v41, v28);
								byte[] v22 = v42;
								byte[] v1 = v22;
								return v1;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v5 = Objects.requireNonNull(p3, "verifierCertPath is null");\nObject v6 = Objects.requireNonNull(p4, "vaultParams is null");\nCertPath v11 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);\nRecoverySessionStorage$Entry v31 = new RecoverySessionStorage$Entry(p1,v30,v28,p4);\nthis.mRecoverySessionStorage.add(v24, v31);\nbyte[] v42 = KeySyncUtils.encryptRecoveryClaim(v26, p4, p5, v41, v28);\nreturn v1;', 'CertPath v9 = p3.getCertPath();\nX509Certificate v10 = this.mTestCertHelper.getRootCertificate(v3);\nList v12 = v9.getCertificates();\nbyte[] v15 = v14.getEncoded();\nbyte[] v16 = RecoverableKeyStoreManager.startRecoverySession(p1, v15, p4, p5, p6);\nreturn v1;', 'byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);\nreturn v1;']

The method startRecoverySessionWithCertPath has the following similar APIs:

- API Name: initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V with Similarity Score: 0.8092695474624634
  - Access Control Level: SYS_OR_SIG and the following code:
this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);

- API Name: initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V with Similarity Score: 0.7922632694244385
  - Access Control Level: SYS_OR_SIG and the following code:
Object v4 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
Object v5 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
SigXml v6 = SigXml.parse(p3);
X509Certificate v7 = this.mTestCertHelper.getRootCertificate(v3);
v6.verifyFileSignature(v7, p2);
RecoverableKeyStoreManager.initRecoveryService(v3, p2);

