The method generateKeyWithMetadata has the following code snippet:

This is path 1 for the API with depth 2:
public String generateKeyWithMetadata(String p1, byte[] p2){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v5);
	PlatformDecryptionKey v8 = PlatformKeyManager.getDecryptKeyInternal(v5);
	PlatformEncryptionKey v9 = PlatformKeyManager.getEncryptKeyInternal(v5);
	Integer v11 = Integer.valueOf(v5);
	PlatformKeyManager.regenerate(v5);
	PlatformEncryptionKey v15 = PlatformKeyManager.getEncryptKeyInternal(v5);
	PlatformEncryptionKey v6 = v15;
	this.mKeyGenerator.init(256);
	SecretKey v18 = this.mKeyGenerator.generateKey();
	WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);
	long v20 = this.mDatabase.insertKey(v5, v4, p1, v19);
	if ((v20 < -1) == 0) {
		long v21 = this.mDatabase.setShouldCreateSnapshot(v5, v4, 1);
		if ((v21 < 0) >= 0) {
			byte[] v22 = v18.getEncoded();
			byte[] v16 = v22;
			Integer v25 = Integer.valueOf(v5);
			Integer v26 = Integer.valueOf(v4);
			Integer v27 = Integer.valueOf(v16.length);
			String v30 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);
			KeyStore$SecretKeyEntry v31 = new KeyStore$SecretKeyEntry(v32);
			SecretKeySpec v32 = new SecretKeySpec(v16,"AES");
			KeyProtection$Builder v35 = new KeyProtection$Builder(3);
			String v37 = new String(1);
			KeyProtection$Builder v38 = v35.setBlockModes(v37);
			String v39 = new String(1);
			KeyProtection$Builder v40 = v38.setEncryptionPaddings(v39);
			KeyProtection v41 = v40.build();
			this.mKeyStore.setEntry(v30, v31, v41);
			String v44 = this.mApplicationKeyStorage.getGrantAlias(v5, v4, p1);
			String v43 = v44;
			String v1 = v43;
			return v1;
		}
	}
}
This is path 2 for the API with depth 2:
public String generateKeyWithMetadata(String p1, byte[] p2){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v5);
	PlatformDecryptionKey v8 = PlatformKeyManager.getDecryptKeyInternal(v5);
	PlatformEncryptionKey v9 = PlatformKeyManager.getEncryptKeyInternal(v5);
	PlatformEncryptionKey v6 = v9;
	this.mKeyGenerator.init(256);
	SecretKey v12 = this.mKeyGenerator.generateKey();
	WrappedKey v13 = WrappedKey.fromSecretKey(v6, v12, p2);
	long v14 = this.mDatabase.insertKey(v5, v4, p1, v13);
	if ((v14 < -1) == 0) {
		long v15 = this.mDatabase.setShouldCreateSnapshot(v5, v4, 1);
		if ((v15 < 0) >= 0) {
			byte[] v16 = v12.getEncoded();
			byte[] v10 = v16;
			Integer v19 = Integer.valueOf(v5);
			Integer v20 = Integer.valueOf(v4);
			Integer v21 = Integer.valueOf(v10.length);
			String v24 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);
			KeyStore$SecretKeyEntry v25 = new KeyStore$SecretKeyEntry(v26);
			SecretKeySpec v26 = new SecretKeySpec(v10,"AES");
			KeyProtection$Builder v29 = new KeyProtection$Builder(3);
			String v31 = new String(1);
			KeyProtection$Builder v32 = v29.setBlockModes(v31);
			String v33 = new String(1);
			KeyProtection$Builder v34 = v32.setEncryptionPaddings(v33);
			KeyProtection v35 = v34.build();
			this.mKeyStore.setEntry(v24, v25, v35);
			String v38 = this.mApplicationKeyStorage.getGrantAlias(v5, v4, p1);
			String v37 = v38;
			String v1 = v37;
			return v1;
		}
	}
}

and the following sink code:
['Object v3 = Objects.requireNonNull(p1, "alias is null");\nint v4 = Binder.getCallingUid();\nint v5 = UserHandle.getCallingUserId();\nPlatformKeyManager.init(v5);\nPlatformDecryptionKey v8 = PlatformKeyManager.getDecryptKeyInternal(v5);\nPlatformEncryptionKey v9 = PlatformKeyManager.getEncryptKeyInternal(v5);\nInteger v11 = Integer.valueOf(v5);\nPlatformKeyManager.regenerate(v5);\nPlatformEncryptionKey v15 = PlatformKeyManager.getEncryptKeyInternal(v5);\nthis.mKeyGenerator.init(256);\nSecretKey v18 = this.mKeyGenerator.generateKey();\nWrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);\nlong v20 = this.mDatabase.insertKey(v5, v4, p1, v19);', 'PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);\nbyte[] v7 = this.mRecoverableKeyGenerator.generateAndStoreKey(v6, v5, v4, p1, p2);\nthis.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, v7);', 'String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2);\nreturn v1;']

The method generateKeyWithMetadata has the following similar APIs:

- API Name: generateKey(Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.970183253288269
  - Access Control Level: SYS_OR_SIG and the following code:
PlatformEncryptionKey v7 = this.mPlatformKeyManager.getEncryptKey(v6);
byte[] v8 = this.mRecoverableKeyGenerator.generateAndStoreKey(v7, v6, v5, p1, 0);
this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, v8);
String v10 = RecoverableKeyStoreManager.getAlias(v6, v5, p1);
String v2 = v10;
String v1 = v2;
return v1;

- API Name: importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; with Similarity Score: 0.9693164229393005
  - Access Control Level: SYS_OR_SIG and the following code:
PlatformEncryptionKey v7 = this.mPlatformKeyManager.getEncryptKey(v6);
this.mRecoverableKeyGenerator.importKey(v7, v6, v5, p1, p2, p3);
this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, p2);

