The method getHibernationStatsForUser has the following code snippet:

This is path 1 for the API with depth 2:
public Map getHibernationStatsForUser(List p1, int p2){
	if (p1 == 0) {
		ArraySet v1 = new ArraySet(p1);
		int v9 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, "getHibernationStatsForUser", 0);
		int v8 = v11;
		boolean v13 = this.mUserManager.isUserUnlockingOrUnlocked(v8);
		if (v13 != 0) {
			boolean v14 = this.mUserStates.contains(v8);
			if (v14 != 0) {
				if (1 == 0) {
					boolean v12 = 0;
					if (v12 != 0) {
						Object v18 = this.mUserStates.get(v8);
						if ( == 0) {
							Iterator v19 = .iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = v19.next();
								int v22 = Binder.getCallingUid();
								boolean v23 = this.mPackageManagerInternal.canQueryPackage(v22, v21);
								if (v23 != 0) {
									boolean v24 = this.mGlobalHibernationStates.containsKey(v21);
									if (v24 == 0) {
										boolean v25 = v18.containsKey(v21);
										if (v25 != 0) {
											Object v26 = this.mGlobalHibernationStates.get(v21);
											Object v27 = v18.get(v21);
											HibernationStats v28 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));
											Object v30 = v4.put(v21, v28);
											boolean v31 = v19.hasNext();
											if (v31 == 0) {
												Map v3 = v4;
												return v3;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Map getHibernationStatsForUser(List p1, int p2){
	if (p1 == 0) {
		ArraySet v1 = new ArraySet(p1);
		int v9 = Binder.getCallingUid();
		int v10 = Binder.getCallingPid();
		int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, "getHibernationStatsForUser", 0);
		int v8 = v11;
		boolean v13 = this.mUserManager.isUserUnlockingOrUnlocked(v8);
		if (v13 != 0) {
			if (1 == 0) {
				Integer v15 = Integer.valueOf(v8);
				boolean v12 = 0;
				if (v12 != 0) {
					Object v18 = this.mUserStates.get(v8);
					if ( == 0) {
						Iterator v19 = .iterator();
						boolean v20 = v19.hasNext();
						if (v20 == 0) {
							Object v21 = v19.next();
							int v22 = Binder.getCallingUid();
							boolean v23 = this.mPackageManagerInternal.canQueryPackage(v22, v21);
							if (v23 != 0) {
								boolean v24 = this.mGlobalHibernationStates.containsKey(v21);
								if (v24 == 0) {
									boolean v25 = v18.containsKey(v21);
									if (v25 != 0) {
										Object v26 = this.mGlobalHibernationStates.get(v21);
										Object v27 = v18.get(v21);
										HibernationStats v28 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));
										Object v30 = v4.put(v21, v28);
										boolean v31 = v19.hasNext();
										if (v31 == 0) {
											Map v3 = v4;
											return v3;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, "getHibernationStatsForUser", 0);\nboolean v13 = this.mUserManager.isUserUnlockingOrUnlocked(v8);\nIterator v19 = .iterator();\nHibernationStats v28 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));\nObject v30 = v4.put(v21, v28);', 'int v8 = AppHibernationService.handleIncomingUser(p2, "getHibernationStatsForUser");\nboolean v9 = AppHibernationService.checkUserStatesExist(v8, "getHibernationStatsForUser", 1);\nIterator v11 = .iterator();\nHibernationStats v20 = new HibernationStats((GlobalLevelState.savedByte + UserLevelState.savedByte));\nObject v22 = v4.put(v13, v20);', 'Map v3 = this.mService.getHibernationStatsForUser(, p2);\nreturn v3;']

The method getHibernationStatsForUser has the following similar APIs:

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z with Similarity Score: 0.8706682920455933
  - Access Control Level: SYS_OR_SIG and the following code:
int v9 = AppHibernationService.handleIncomingUser(p2, "isHibernatingForUser");
boolean v10 = AppHibernationService.checkUserStatesExist(v9, "isHibernatingForUser", 0);
Object v11 = this.mUserStates.get(v9);
Object v12 = v11.get(p1);

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z with Similarity Score: 0.864905595779419
  - Access Control Level: SYS_OR_SIG and the following code:
int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
if (v14 != 0) {
boolean v15 = this.mUserStates.contains(v9);
Object v19 = this.mUserStates.get(v9);
Object v20 = v19.get(p1);

