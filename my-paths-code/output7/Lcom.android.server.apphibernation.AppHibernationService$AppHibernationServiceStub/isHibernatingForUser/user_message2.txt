The method isHibernatingForUser has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isHibernatingForUser(String p1, int p2){
	int v10 = Binder.getCallingUid();
	int v11 = Binder.getCallingPid();
	int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
	int v9 = v12;
	boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
	if (v14 != 0) {
		boolean v15 = this.mUserStates.contains(v9);
		if (v15 != 0) {
			if (0 == 0) {
				boolean v13 = 0;
				if (v13 != 0) {
					Object v19 = this.mUserStates.get(v9);
					Object v20 = v19.get(p1);
					if (v20 == 0) {
						int v21 = Binder.getCallingUid();
						boolean v22 = this.mPackageManagerInternal.canQueryPackage(v21, p1);
						if (v22 != 0) {
							boolean v1 = 0;
							return v1;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isHibernatingForUser(String p1, int p2){
	int v10 = Binder.getCallingUid();
	int v11 = Binder.getCallingPid();
	int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
	int v9 = v12;
	boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
	if (v14 != 0) {
		boolean v15 = this.mUserStates.contains(v9);
		if (v15 != 0) {
			if (0 == 0) {
				boolean v13 = 0;
				if (v13 != 0) {
					Object v19 = this.mUserStates.get(v9);
					Object v20 = v19.get(p1);
					if (v20 == 0) {
						int v21 = Binder.getCallingUid();
						boolean v22 = this.mPackageManagerInternal.canQueryPackage(v21, p1);
						if (v22 != 0) {
							boolean v1 = UserLevelState.hibernated;
							return v1;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);\nboolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);\nif (v14 != 0) {\nboolean v15 = this.mUserStates.contains(v9);\nObject v19 = this.mUserStates.get(v9);\nObject v20 = v19.get(p1);', 'int v9 = AppHibernationService.handleIncomingUser(p2, "isHibernatingForUser");\nboolean v10 = AppHibernationService.checkUserStatesExist(v9, "isHibernatingForUser", 0);\nObject v11 = this.mUserStates.get(v9);\nObject v12 = v11.get(p1);', 'boolean v1 = this.mService.isHibernatingForUser(p1, p2);']

The method isHibernatingForUser has the following similar APIs:

- API Name: setHibernatingForUser(Ljava/lang/String;IZ)V with Similarity Score: 0.9130855798721313
  - Access Control Level: SYS_OR_SIG and the following code:
this.mService.setHibernatingForUser(p1, p2, p3);

- API Name: getHibernatingPackagesForUser(I)Ljava/util/List; with Similarity Score: 0.8858093023300171
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = AppHibernationService.handleIncomingUser(p1, "getHibernatingPackagesForUser");
Object v8 = this.mUserStates.get(v6);
Collection v9 = v8.values();
Iterator v10 = v9.iterator();
boolean v11 = v10.hasNext();
if (v11 == 0) { Object v12 = v10.next(); }
int v13 = Binder.getCallingUid();
boolean v14 = this.mPackageManagerInternal.canQueryPackage(v13, UserLevelState.packageName);
boolean v15 = v2.add(UserLevelState.packageName);

