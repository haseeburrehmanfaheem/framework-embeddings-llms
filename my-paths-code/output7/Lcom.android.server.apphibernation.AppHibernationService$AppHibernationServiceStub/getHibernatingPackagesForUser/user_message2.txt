The method getHibernatingPackagesForUser has the following code snippet:

This is path 1 for the API with depth 2:
public List getHibernatingPackagesForUser(int p1){
	int v7 = Binder.getCallingUid();
	int v8 = Binder.getCallingPid();
	int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);
	int v6 = v9;
	boolean v11 = this.mUserManager.isUserUnlockingOrUnlocked(v6);
	if (v11 != 0) {
		boolean v12 = this.mUserStates.contains(v6);
		if (v12 != 0) {
			if (1 == 0) {
				boolean v10 = 0;
				if (v10 != 0) {
					Object v16 = this.mUserStates.get(v6);
					Collection v17 = v16.values();
					Iterator v18 = v17.iterator();
					boolean v19 = v18.hasNext();
					if (v19 == 0) {
						Object v20 = v18.next();
						int v21 = Binder.getCallingUid();
						boolean v22 = this.mPackageManagerInternal.canQueryPackage(v21, UserLevelState.packageName);
						if (v22 != 0) {
							if (UserLevelState.hibernated == 0) {
								boolean v23 = v2.add(UserLevelState.packageName);
								boolean v24 = v18.hasNext();
								if (v24 == 0) {
									List v1 = v2;
									return v1;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public List getHibernatingPackagesForUser(int p1){
	int v7 = Binder.getCallingUid();
	int v8 = Binder.getCallingPid();
	int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);
	int v6 = v9;
	boolean v11 = this.mUserManager.isUserUnlockingOrUnlocked(v6);
	if (v11 != 0) {
		if (1 == 0) {
			Integer v13 = Integer.valueOf(v6);
			boolean v10 = 0;
			if (v10 != 0) {
				Object v16 = this.mUserStates.get(v6);
				Collection v17 = v16.values();
				Iterator v18 = v17.iterator();
				boolean v19 = v18.hasNext();
				if (v19 == 0) {
					Object v20 = v18.next();
					int v21 = Binder.getCallingUid();
					boolean v22 = this.mPackageManagerInternal.canQueryPackage(v21, UserLevelState.packageName);
					if (v22 != 0) {
						if (UserLevelState.hibernated == 0) {
							boolean v23 = v2.add(UserLevelState.packageName);
							boolean v24 = v18.hasNext();
							if (v24 == 0) {
								List v1 = v2;
								return v1;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v1 = this.mService.getHibernatingPackagesForUser(p1);\nreturn v1;', 'int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);\nObject v16 = this.mUserStates.get(v6);\nCollection v17 = v16.values();\nIterator v18 = v17.iterator();\nboolean v19 = v18.hasNext();\nif (v19 == 0) { Object v20 = v18.next(); }\nboolean v22 = this.mPackageManagerInternal.canQueryPackage(v21, UserLevelState.packageName);\nboolean v23 = v2.add(UserLevelState.packageName);', 'int v6 = AppHibernationService.handleIncomingUser(p1, "getHibernatingPackagesForUser");\nObject v8 = this.mUserStates.get(v6);\nCollection v9 = v8.values();\nIterator v10 = v9.iterator();\nboolean v11 = v10.hasNext();\nif (v11 == 0) { Object v12 = v10.next(); }\nint v13 = Binder.getCallingUid();\nboolean v14 = this.mPackageManagerInternal.canQueryPackage(v13, UserLevelState.packageName);\nboolean v15 = v2.add(UserLevelState.packageName);']

The method getHibernatingPackagesForUser has the following similar APIs:

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z with Similarity Score: 0.8858093023300171
  - Access Control Level: SYS_OR_SIG and the following code:
int v9 = AppHibernationService.handleIncomingUser(p2, "isHibernatingForUser");
boolean v10 = AppHibernationService.checkUserStatesExist(v9, "isHibernatingForUser", 0);
Object v11 = this.mUserStates.get(v9);
Object v12 = v11.get(p1);

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z with Similarity Score: 0.8819732666015625
  - Access Control Level: SYS_OR_SIG and the following code:
int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
if (v14 != 0) {
boolean v15 = this.mUserStates.contains(v9);
Object v19 = this.mUserStates.get(v9);
Object v20 = v19.get(p1);

