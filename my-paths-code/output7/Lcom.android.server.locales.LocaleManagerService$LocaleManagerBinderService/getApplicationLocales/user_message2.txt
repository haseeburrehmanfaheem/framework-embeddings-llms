The method getApplicationLocales has the following code snippet:

This is path 1 for the API with depth 2:
public LocaleList getApplicationLocales(String p1, int p2){
	Object v2 = Objects.requireNonNull(p1);
	int v3 = Binder.getCallingPid();
	int v4 = Binder.getCallingUid();
	int v5 = this.mActivityManagerInternal.handleIncomingUser(v3, v4, p2, 0, 0, "getApplicationLocales", 0);
	boolean v7 = LocaleManagerService.isPackageOwnedByCaller(p1, v5, 0);
	boolean v6 = v7;
	if (v6 != 0) {
		if (v12 == 0) {
			boolean v8 = ;
			if (v8 != 0) {
				long v14 = Binder.clearCallingIdentity();
				ActivityTaskManagerInternal$PackageConfig v16 = this.mActivityTaskManagerInternal.getApplicationConfig(p1, v5);
				if (v16 != 0) {
					LocaleList v17 = LocaleList.getEmptyLocaleList();
					LocaleList v15 = v17;
					Binder.restoreCallingIdentity(v14);
					LocaleList v1 = v15;
					return v1;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public LocaleList getApplicationLocales(String p1, int p2){
	Object v2 = Objects.requireNonNull(p1);
	int v3 = Binder.getCallingPid();
	int v4 = Binder.getCallingUid();
	int v5 = this.mActivityManagerInternal.handleIncomingUser(v3, v4, p2, 0, 0, "getApplicationLocales", 0);
	boolean v7 = LocaleManagerService.isPackageOwnedByCaller(p1, v5, 0);
	boolean v6 = v7;
	if (v6 != 0) {
		if (v12 == 0) {
			boolean v8 = ;
			if (v8 != 0) {
				long v14 = Binder.clearCallingIdentity();
				ActivityTaskManagerInternal$PackageConfig v16 = this.mActivityTaskManagerInternal.getApplicationConfig(p1, v5);
				if (v16 != 0) {
					if (ActivityTaskManagerInternal$PackageConfig.mLocales == 0) {
						LocaleList v15 = ;
						Binder.restoreCallingIdentity(v14);
						LocaleList v1 = v15;
						return v1;
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public LocaleList getApplicationLocales(String p1, int p2){
	Object v2 = Objects.requireNonNull(p1);
	int v3 = Binder.getCallingPid();
	int v4 = Binder.getCallingUid();
	int v5 = this.mActivityManagerInternal.handleIncomingUser(v3, v4, p2, 0, 0, "getApplicationLocales", 0);
	boolean v7 = LocaleManagerService.isPackageOwnedByCaller(p1, v5, 0);
	boolean v6 = v7;
	if (v6 != 0) {
		if (v12 == 0) {
			boolean v8 = ;
			if (v8 != 0) {
				long v14 = Binder.clearCallingIdentity();
				ActivityTaskManagerInternal$PackageConfig v16 = this.mActivityTaskManagerInternal.getApplicationConfig(p1, v5);
				if (v16 != 0) {
					if (ActivityTaskManagerInternal$PackageConfig.mLocales == 0) {
						LocaleList v17 = LocaleList.getEmptyLocaleList();
						LocaleList v15 = ;
						Binder.restoreCallingIdentity(v14);
						LocaleList v1 = v15;
						return v1;
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v7 = LocaleManagerService.isCallerInstaller(p1, v5);\nlong v9 = Binder.clearCallingIdentity();\nLocaleList v10 = LocaleManagerService.getApplicationLocalesUnchecked(p1, v5);\nBinder.restoreCallingIdentity(v9);\nLocaleList v1 = v10;\nreturn v1;']

The method getApplicationLocales has the following similar APIs:

- API Name: getPackageScreenCompatMode(Ljava/lang/String;)I with Similarity Score: 0.7523915767669678
  - Access Control Level: SYS_OR_SIG and the following code:
IPackageManager v9 = ActivityThread.getPackageManager();
ApplicationInfo v10 = v8.getApplicationInfo(p1, 0, 0);
CompatibilityInfo v12 = CompatModePackages.compatibilityInfoForPackageLocked();
boolean v13 = v12.alwaysSupportsScreen();
int v11 = v15;
return v7;

- API Name: setAdditionalInputMethodSubtypes(Ljava/lang/String;[Landroid/view/inputmethod/InputMethodSubtype;)V with Similarity Score: 0.7505342960357666
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v6 = 1;
if (v6 != 0) {
Object v11 = this.mMethodMap.get(p1);
int v12 = Binder.getCallingUid();
String v13 = this.mIPackageManager.getPackagesForUid(v12);

