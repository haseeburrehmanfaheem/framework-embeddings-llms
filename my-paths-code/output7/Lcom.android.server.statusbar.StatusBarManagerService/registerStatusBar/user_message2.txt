The method registerStatusBar has the following code snippet:

This is path 1 for the API with depth 2:
public RegisterStatusBarResult registerStatusBar(IStatusBar p1){
	this.mBar = p1;
	IStatusBar v10 = this.mBar;
	IBinder v11 = v10.asBinder();
	StatusBarManagerService$DeathRecipient v12 = this.mDeathRecipient;
	v11.linkToDeath(v12, 0);
	UiThread.ensureThreadLocked();
	Handler v15 = this.sHandler;
	StatusBarManagerService$$ExternalSyntheticLambda4 v17 = new StatusBarManagerService$$ExternalSyntheticLambda4(StatusBarManagerService);
	boolean v19 = v15.post(v17);
	StatusBarManagerService$$ExternalSyntheticLambda5 v20 = new StatusBarManagerService$$ExternalSyntheticLambda5(StatusBarManagerService);
	boolean v22 = this.mHandler.post(v20);
	ArrayMap v23 = new ArrayMap(this.mIcons);
	Object v25 = this.mDisplayUiState.get(0);
	ArraySet v26 = StatusBarManagerService$UiState.-$$Nest$fgetmTransientBarTypes(v25);
	int v27 = v26.size();
	[I v28 = new [I(v27);
	if ( >= v27) {
		RegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v40,v41,v42,v43,v44,v45,v55,v56,v57,v58,v59,v28,v60);
		int v31 = this.mDisableRecords.size();
		if ( >= v31) {
			Object v32 = this.mDisableRecords.get();
			if (StatusBarManagerService$DisableRecord.userId != this.mCurrentUserId) {
				if (p2 == 1) {
					if (p2 == 2) {
						int v33 = 0;
						if ( >= v31) {
							int v30 = ;
							int v40 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25);
							AppearanceRegion v41 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v25);
							int v42 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v25);
							int v43 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v25);
							boolean v44 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v25);
							int v46 = this.mDisableRecords.size();
							if ( >= v46) {
								Object v47 = this.mDisableRecords.get();
								if (StatusBarManagerService$DisableRecord.userId != this.mCurrentUserId) {
									if (p2 == 1) {
										if (p2 == 2) {
											int v48 = 0;
											if ( >= v46) {
												int v45 = ;
												IBinder v55 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v25);
												boolean v56 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v25);
												int v57 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v25);
												InsetsVisibilities v58 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v25);
												String v59 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v25);
												LetterboxDetails v60 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v25);
												return v29;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['this.mBar = p1;\nArrayMap v10 = new ArrayMap(this.mIcons);\nObject v12 = this.mDisplayUiState.get(0);\nRegisterStatusBarResult v16 = new RegisterStatusBarResult(v10,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v15,v29);\nreturn v16;']

The method registerStatusBar has the following similar APIs:

- API Name: setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V with Similarity Score: 0.7864807844161987
  - Access Control Level: SYS_OR_SIG and the following code:
StatusBarIcon v3 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5);
Object v5 = this.mIcons.put(p1, v3);
this.mBar.setIcon(p1, v3);

- API Name: setIconVisibility(Ljava/lang/String;Z)V with Similarity Score: 0.7660832405090332
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = this.mIcons.get(p1);
if (v2 != 0) {
if (StatusBarIcon.visible == p2) {
StatusBarIcon.visible = p2;
this.mBar.setIcon(p1, v2);

