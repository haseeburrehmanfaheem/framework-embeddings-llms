This is path 1 for the API with depth 2:
public void removeAllDynamicShortcuts(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		ArrayList v15 = new ArrayList();
		boolean v19 = this.mUnlockedUsers.get(p1);
		if (v19 == 0) {
			boolean v20 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v18 = v20;
			if (v18 == 0) {
				boolean v23 = ShortcutService.isUserUnlockedL(p2);
				if (v23 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v25 = this.mUsers.get(p2);
						if (v25 != 0) {
							ShortcutUser v26 = ShortcutService.loadUserLocked(p2);
							if (v26 != 0) {
								ShortcutUser v27 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v22 = ;
								ShortcutPackage v32 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v32 != 0) {
									ShortcutPackage v33 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v35 = this.mPackages.put(p1, v33);
									ShortcutPackage v31 = ;
									ShortcutUser v36 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v21 = v31;
									ShortcutService$$ExternalSyntheticLambda17 v40 = new ShortcutService$$ExternalSyntheticLambda17();
									ShortcutPackageInfo v44 = ShortcutPackage.getPackageInfo();
									boolean v45 = v44.isShadow();
									if (v45 == 0) {
										if (0 != 0) {
											int v46 = ShortcutPackage.getPackageUserId();
											ShortcutLauncher v47 = ShortcutUser.mService.getLauncherShortcutsLocked(0, v46, 0);
											String v48 = ShortcutPackage.getPackageName();
											int v49 = ShortcutPackage.getPackageUserId();
											ArraySet v50 = v47.getPinnedShortcutIds(v48, v49);
											ShortcutPackage$$ExternalSyntheticLambda2 v51 = new ShortcutPackage$$ExternalSyntheticLambda2(ShortcutPackage,p1,p2,p3,0,,0);
											ShortcutPackage.forEachShortcut(v51);
											long v56 = System.currentTimeMillis();
											long v55 = v56;
											int v57 = this.mShortcuts.size();
											if ( < 0) {
												Object v58 = this.mShortcuts.valueAt();
												boolean v60 = ShortcutInfo.hasFlags(1);
												boolean v59 = v60;
												if (v59 == 0) {
													boolean v62 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
													boolean v61 = (v62 ^ 1);
													if (v61 == 0) {
														this.mLastChangedTimestamp = v55;
														this.mFlags = (this.mFlags & (~1));
														this.mRank = 0;
														if ( < 0) {
															boolean v67 = ShortcutPackage.isAppSearchEnabled();
															if (v67 != 0) {
																ShortcutPackage$$ExternalSyntheticLambda17 v68 = new ShortcutPackage$$ExternalSyntheticLambda17(ShortcutPackage);
																ShortcutPackage.runAsSystem(v68);
																if ( == 0) {
																	ArrayList v72 = new ArrayList(1);
																	ShortcutPackage$$ExternalSyntheticLambda35 v74 = new ShortcutPackage$$ExternalSyntheticLambda35(v72);
																	ShortcutPackage.forEachShortcut(v74);
																	boolean v77 = v72.isEmpty();
																	if (v77 != 0) {
																		int v78 = v72.size();
																		if ( < 0) {
																			Object v79 = v72.get();
																			String v80 = v79.getId();
																			ShortcutInfo v81 = ShortcutPackage.forceDeleteShortcutInner(v80);
																			if ( < 0) {
																				List v71 = v72;
																				List v54 = v71;
																				ArraySet v83 = new ArraySet();
																				boolean v86 = CollectionUtils.isEmpty(p1);
																				if (v86 == 0) {
																					int v87 = p1.size();
																					if ( >= v87) {
																						Object v88 = p1.get();
																						String v89 = v88.getId();
																						boolean v90 = v83.add(v89);
																						if ( >= v87) {
																							ArraySet v91 = new ArraySet();
																							boolean v94 = CollectionUtils.isEmpty(p2);
																							if (v94 == 0) {
																								int v95 = p2.size();
																								if ( >= v95) {
																									Object v96 = p2.get();
																									String v97 = v96.getId();
																									boolean v98 = v91.add(v97);
																									if ( >= v95) {
																										if (p4 != 0) {
																											boolean v100 = CollectionUtils.isEmpty(v83);
																											if (v100 == 0) {
																												boolean v101 = CollectionUtils.isEmpty(v91);
																												if (v101 == 0) {
																													ArraySet v102 = new ArraySet();
																													boolean v104 = CollectionUtils.isEmpty(v83);
																													if (v104 != 0) {
																														v102.addAll(v83);
																														boolean v106 = CollectionUtils.isEmpty(v91);
																														if (v106 != 0) {
																															v102.addAll(v91);
																															boolean v108 = CollectionUtils.isEmpty(p3);
																															if (v108 != 0) {
																																ShortcutService$$ExternalSyntheticLambda23 v109 = new ShortcutService$$ExternalSyntheticLambda23(v102);
																																boolean v111 = p3.removeIf(v109);
																																ArrayList v112 = new ArrayList();
																																ShortcutService$$ExternalSyntheticLambda24 v114 = new ShortcutService$$ExternalSyntheticLambda24(v102);
																																p4.findAll(v112, v114, 4);
																																List v99 = v112;
																																List v82 = v99;
																																Object v118 = Objects.requireNonNull(v21);
																																String v119 = this.mPackageName;
																																int v120 = this.mPackageUserId;
																																ShortcutService$$ExternalSyntheticLambda28 v122 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v120,v119);
																																Runnable v121 = v122;
																																Object v125 = Objects.requireNonNull(p1);
																																Object v126 = Objects.requireNonNull(v121);
																																this.mHandler.removeCallbacksAndMessages(p1);
																																boolean v128 = this.mHandler.postDelayed(v121, p1, 100);
																																List v130 = ShortcutService.removeNonKeyFields(p2);
																																List v131 = ShortcutService.removeNonKeyFields(p3);
																																UserHandle v132 = UserHandle.of(v120);
																																ShortcutService$$ExternalSyntheticLambda26 v133 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v120,v130,v119,v132,v131);
																																ShortcutService.injectPostToHandler(v133);
																																ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																boolean v139 = 0;
																																if (v139 == 0) {
																																	ShortcutService$$ExternalSyntheticLambda25 v141 = new ShortcutService$$ExternalSyntheticLambda25();
																																	ShortcutService.forEachLoadedUserLocked(v141);
																																	return;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeAllDynamicShortcuts(String p1, int p2){
	int v6 = ShortcutService.injectGetPackageUid(p1, p2);
	if (v6 != v4) {
		boolean v7 = ShortcutService.isEphemeralApp(p1, p2);
		Preconditions.checkState((v7 ^ 1), "Ephemeral apps can't use ShortcutManager");
		ArrayList v9 = new ArrayList();
		boolean v12 = ShortcutService.isUserUnlockedL(p2);
		if (v12 == 0) {
			ShortcutUser v14 = ShortcutService.getUserShortcutsLocked(p2);
			ShortcutPackage v15 = v14.getPackageShortcuts(p1);
			ShortcutUser v16 = v15.getUser();
			v16.onCalledByPublisher(p1);
			ShortcutPackage v13 = v15;
			ShortcutService$$ExternalSyntheticLambda17 v18 = new ShortcutService$$ExternalSyntheticLambda17();
			ShortcutPackage.findAll(v9, v18, 4, 0, 0, 0);
			long v23 = ShortcutUser.mService.injectCurrentTimeMillis();
			int v24 = this.mShortcuts.size();
			if ( < 0) {
				Object v25 = this.mShortcuts.valueAt();
				boolean v26 = v25.isDynamic();
				if (v26 == 0) {
					boolean v27 = v25.isVisibleToPublisher();
					if (v27 == 0) {
						v25.setTimestamp(v23);
						v25.clearFlags(1);
						v25.setRank(0);
						if ( < 0) {
							ShortcutPackage.removeAllShortcutsAsync();
							if ( == 0) {
								List v32 = ShortcutPackage.removeOrphans();
								List v22 = v32;
								ArraySet v34 = new ArraySet();
								ShortcutService.addShortcutIdsToSet(v34, v9);
								ArraySet v37 = new ArraySet();
								ShortcutService.addShortcutIdsToSet(v37, 0);
								List v40 = ShortcutService.prepareChangedShortcuts(v34, v37, v22, v13);
								List v33 = v40;
								Object v42 = Objects.requireNonNull(v13);
								String v43 = v13.getPackageName();
								int v44 = v13.getPackageUserId();
								Runnable v45 = ShortcutService.notifyListenerRunnable(v43, v44);
								ShortcutService.injectPostToHandlerDebounced(v13, v45);
								ShortcutService.notifyShortcutChangeCallbacks(v43, v44, v33, v22);
								v13.scheduleSave();
								boolean v50 = ShortcutService.injectShouldPerformVerification();
								if (v50 == 0) {
									ShortcutService.verifyStatesInner();
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeAllDynamicShortcuts(String p1, int p2){
	p0.verifyCaller(p1, p2);
	ArrayList v2 = new ArrayList();
	p0.throwIfUserLockedL(p2);
	ShortcutPackage v5 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
	ShortcutService$$ExternalSyntheticLambda17 v6 = new ShortcutService$$ExternalSyntheticLambda17();
	v5.findAll(v2, v6, 4);
	List v9 = v5.deleteAllDynamicShortcuts();
	List v10 = p0.prepareChangedShortcuts(v2, 0, v9, v5);
	p0.packageShortcutsChanged(v5, v10, v9);
	p0.verifyStates();
	return;
}
