The method onApplicationActive has the following code snippet:

This is path 1 for the API with depth 2:
public void onApplicationActive(String p1, int p2){
	boolean v3 = this.mUnlockedUsers.get(p2);
	if (v3 == 0) {
		boolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
		boolean v2 = v4;
		if (v2 != 0) {
			boolean v7 = ShortcutService.isUserUnlockedL(p2);
			if (v7 != 0) {
				if (p2 == this.mLastLockedUser) {
					ShortcutService.wtf("User still locked");
					this.mLastLockedUser = p2;
					Object v9 = this.mUsers.get(p2);
					if (v9 != 0) {
						ShortcutUser v10 = ShortcutService.loadUserLocked(p2);
						if (v10 != 0) {
							ShortcutUser v11 = new ShortcutUser(ShortcutService,p2);
							this.mUsers.put(p2, );
							ShortcutService.checkPackageChanges(p2);
							ShortcutUser v6 = ;
							ShortcutPackage v16 = ShortcutUser.getPackageShortcutsIfExists(p1);
							if (v16 != 0) {
								ShortcutPackage v17 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
								Object v19 = this.mPackages.put(p1, v17);
								ShortcutPackage v15 = ;
								ShortcutPackage v5 = v15;
								v5.resetRateLimitingForCommandLineNoSaving();
								File v23 = new File(v24,"shortcuts.xml");
								File v24 = ShortcutService.injectUserDataPath(p1);
								File v22 = v23;
								File v26 = v22.getParentFile();
								boolean v27 = v26.mkdirs();
								AtomicFile v28 = new AtomicFile(v22);
								FileOutputStream v30 = v28.startWrite();
								if (0 == 0) {
									TypedXmlSerializer v32 = Xml.newFastSerializer();
									String v33 = StandardCharsets.UTF_8.name();
									v32.setOutput(v30, v33);
									.startDocument(0, Boolean.TRUE);
									ShortcutUser v36 = ShortcutService.getUserShortcutsLocked(p1);
									v36.saveToXml(, 0);
									.endDocument();
									v30.flush();
									v28.finishWrite(v30);
									long v42 = ShortcutService.getStatStartTime();
									ShortcutUser v43 = ShortcutService.getUserShortcutsLocked(p1);
									File v44 = ShortcutService.getUserBitmapFilePath(p1);
									File v45 = v44.listFiles();
									if (v45 != 0) {
										if ( >= v45.length) {
											boolean v46 = v45[].isDirectory();
											if (v46 != 0) {
												String v47 = v45[].getName();
												boolean v48 = v43.hasPackage(v47);
												if (v48 != 0) {
													ShortcutService.cleanupBitmapsForPackage(p1, v47);
													if ( >= v45.length) {
														ShortcutService.logDurationStat(5, v42);
														boolean v52 = ShortcutService.isUserUnlockedL(p1);
														if (v52 != 0) {
															if (p1 == this.mLastLockedUser) {
																ShortcutService.wtf("User still locked");
																this.mLastLockedUser = p1;
																Object v54 = this.mUsers.get(p1);
																if (v54 != 0) {
																	ShortcutUser v55 = ShortcutService.loadUserLocked(p1);
																	if (v55 != 0) {
																		ShortcutUser v56 = new ShortcutUser(ShortcutService,p1);
																		this.mUsers.put(p1, );
																		ShortcutService.checkPackageChanges(p1);
																		ShortcutUser v51 = ;
																		int v61 = this.mPackages.size();
																		if ( >= v61) {
																			Object v62 = this.mPackages.valueAt();
																			boolean v63 = v62.hasShareTargets();
																			if (v63 == 0) {
																				Object v64 = this.mPackages.valueAt();
																				int v65 = v64.getSharingShortcutCount();
																				int v66 = this.mPackages.size();
																				if ( >= v66) {
																					LogMaker v67 = new LogMaker(1717);
																					LogMaker v69 = v67.setType(1);
																					LogMaker v70 = v69.setSubtype(this.mUserId);
																					this.mMetricsLogger.write(v70);
																					LogMaker v72 = v67.setType(2);
																					LogMaker v73 = v72.setSubtype();
																					this.mMetricsLogger.write(v73);
																					LogMaker v75 = v67.setType(3);
																					LogMaker v76 = v75.setSubtype();
																					this.mMetricsLogger.write(v76);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void onApplicationActive(String p1, int p2){
	boolean v3 = this.mUnlockedUsers.get(p2);
	if (v3 == 0) {
		boolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
		boolean v2 = v4;
		if (v2 != 0) {
			boolean v7 = ShortcutService.isUserUnlockedL(p2);
			if (v7 != 0) {
				if (p2 == this.mLastLockedUser) {
					ShortcutService.wtf("User still locked");
					this.mLastLockedUser = p2;
					Object v9 = this.mUsers.get(p2);
					if (v9 != 0) {
						ShortcutUser v10 = ShortcutService.loadUserLocked(p2);
						if (v10 != 0) {
							ShortcutUser v11 = new ShortcutUser(ShortcutService,p2);
							this.mUsers.put(p2, );
							ShortcutService.checkPackageChanges(p2);
							ShortcutUser v6 = ;
							ShortcutPackage v16 = ShortcutUser.getPackageShortcutsIfExists(p1);
							if (v16 != 0) {
								ShortcutPackage v17 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
								Object v19 = this.mPackages.put(p1, v17);
								ShortcutPackage v15 = ;
								ShortcutPackage v5 = v15;
								v5.resetRateLimitingForCommandLineNoSaving();
								File v23 = new File(v24,"shortcuts.xml");
								File v24 = ShortcutService.injectUserDataPath(p1);
								File v22 = v23;
								File v26 = v22.getParentFile();
								boolean v27 = v26.mkdirs();
								AtomicFile v28 = new AtomicFile(v22);
								FileOutputStream v30 = v28.startWrite();
								if (0 == 0) {
									TypedXmlSerializer v32 = Xml.newFastSerializer();
									String v33 = StandardCharsets.UTF_8.name();
									v32.setOutput(v30, v33);
									.startDocument(0, Boolean.TRUE);
									ShortcutUser v36 = ShortcutService.getUserShortcutsLocked(p1);
									v36.saveToXml(, 0);
									.endDocument();
									v30.flush();
									v28.finishWrite(v30);
									long v42 = ShortcutService.getStatStartTime();
									ShortcutUser v43 = ShortcutService.getUserShortcutsLocked(p1);
									File v44 = ShortcutService.getUserBitmapFilePath(p1);
									File v45 = v44.listFiles();
									if (v45 != 0) {
										if ( >= v45.length) {
											boolean v46 = v45[].isDirectory();
											if (v46 != 0) {
												String v47 = v45[].getName();
												boolean v48 = v43.hasPackage(v47);
												if (v48 != 0) {
													ShortcutPackage v49 = v43.getPackageShortcuts(v47);
													v49.cleanupDanglingBitmapFiles(v45[]);
													if ( >= v45.length) {
														ShortcutService.logDurationStat(5, v42);
														boolean v53 = ShortcutService.isUserUnlockedL(p1);
														if (v53 != 0) {
															if (p1 == this.mLastLockedUser) {
																ShortcutService.wtf("User still locked");
																this.mLastLockedUser = p1;
																Object v55 = this.mUsers.get(p1);
																if (v55 != 0) {
																	ShortcutUser v56 = ShortcutService.loadUserLocked(p1);
																	if (v56 != 0) {
																		ShortcutUser v57 = new ShortcutUser(ShortcutService,p1);
																		this.mUsers.put(p1, );
																		ShortcutService.checkPackageChanges(p1);
																		ShortcutUser v52 = ;
																		int v62 = this.mPackages.size();
																		if ( >= v62) {
																			Object v63 = this.mPackages.valueAt();
																			boolean v64 = v63.hasShareTargets();
																			if (v64 == 0) {
																				Object v65 = this.mPackages.valueAt();
																				int v66 = v65.getSharingShortcutCount();
																				int v67 = this.mPackages.size();
																				if ( >= v67) {
																					LogMaker v68 = new LogMaker(1717);
																					LogMaker v70 = v68.setType(1);
																					LogMaker v71 = v70.setSubtype(this.mUserId);
																					this.mMetricsLogger.write(v71);
																					LogMaker v73 = v68.setType(2);
																					LogMaker v74 = v73.setSubtype();
																					this.mMetricsLogger.write(v74);
																					LogMaker v76 = v68.setType(3);
																					LogMaker v77 = v76.setSubtype();
																					this.mMetricsLogger.write(v77);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void onApplicationActive(String p1, int p2){
	boolean v3 = this.mUnlockedUsers.get(p2);
	if (v3 == 0) {
		boolean v2 = 1;
		if (v2 != 0) {
			boolean v6 = ShortcutService.isUserUnlockedL(p2);
			if (v6 != 0) {
				if (p2 == this.mLastLockedUser) {
					ShortcutService.wtf("User still locked");
					this.mLastLockedUser = p2;
					Object v8 = this.mUsers.get(p2);
					if (v8 != 0) {
						ShortcutUser v9 = ShortcutService.loadUserLocked(p2);
						if (v9 != 0) {
							ShortcutUser v10 = new ShortcutUser(ShortcutService,p2);
							this.mUsers.put(p2, );
							ShortcutService.checkPackageChanges(p2);
							ShortcutUser v5 = ;
							ShortcutPackage v15 = ShortcutUser.getPackageShortcutsIfExists(p1);
							if (v15 != 0) {
								ShortcutPackage v16 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
								Object v18 = this.mPackages.put(p1, v16);
								ShortcutPackage v14 = ;
								ShortcutPackage v4 = v14;
								v4.resetRateLimitingForCommandLineNoSaving();
								File v22 = new File(v23,"shortcuts.xml");
								File v23 = ShortcutService.injectUserDataPath(p1);
								File v21 = v22;
								File v25 = v21.getParentFile();
								boolean v26 = v25.mkdirs();
								AtomicFile v27 = new AtomicFile(v21);
								FileOutputStream v29 = v27.startWrite();
								if (0 == 0) {
									TypedXmlSerializer v31 = Xml.newFastSerializer();
									String v32 = StandardCharsets.UTF_8.name();
									v31.setOutput(v29, v32);
									.startDocument(0, Boolean.TRUE);
									ShortcutUser v35 = ShortcutService.getUserShortcutsLocked(p1);
									v35.saveToXml(, 0);
									.endDocument();
									v29.flush();
									v27.finishWrite(v29);
									long v41 = ShortcutService.getStatStartTime();
									ShortcutUser v42 = ShortcutService.getUserShortcutsLocked(p1);
									File v43 = ShortcutService.getUserBitmapFilePath(p1);
									File v44 = v43.listFiles();
									if (v44 != 0) {
										if ( >= v44.length) {
											boolean v45 = v44[].isDirectory();
											if (v45 != 0) {
												String v46 = v44[].getName();
												boolean v47 = v42.hasPackage(v46);
												if (v47 != 0) {
													ShortcutService.cleanupBitmapsForPackage(p1, v46);
													if ( >= v44.length) {
														ShortcutService.logDurationStat(5, v41);
														boolean v51 = ShortcutService.isUserUnlockedL(p1);
														if (v51 != 0) {
															if (p1 == this.mLastLockedUser) {
																ShortcutService.wtf("User still locked");
																this.mLastLockedUser = p1;
																Object v53 = this.mUsers.get(p1);
																if (v53 != 0) {
																	ShortcutUser v54 = ShortcutService.loadUserLocked(p1);
																	if (v54 != 0) {
																		ShortcutUser v55 = new ShortcutUser(ShortcutService,p1);
																		this.mUsers.put(p1, );
																		ShortcutService.checkPackageChanges(p1);
																		ShortcutUser v50 = ;
																		int v60 = this.mPackages.size();
																		if ( >= v60) {
																			Object v61 = this.mPackages.valueAt();
																			boolean v62 = v61.hasShareTargets();
																			if (v62 == 0) {
																				Object v63 = this.mPackages.valueAt();
																				int v64 = v63.getSharingShortcutCount();
																				int v65 = this.mPackages.size();
																				if ( >= v65) {
																					LogMaker v66 = new LogMaker(1717);
																					LogMaker v68 = v66.setType(1);
																					LogMaker v69 = v68.setSubtype(this.mUserId);
																					this.mMetricsLogger.write(v69);
																					LogMaker v71 = v66.setType(2);
																					LogMaker v72 = v71.setSubtype();
																					this.mMetricsLogger.write(v72);
																					LogMaker v74 = v66.setType(3);
																					LogMaker v75 = v74.setSubtype();
																					this.mMetricsLogger.write(v75);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v3 = this.mUnlockedUsers.get(p2);\nboolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);\nShortcutPackage v16 = ShortcutUser.getPackageShortcutsIfExists(p1);\nShortcutPackage v17 = new ShortcutPackage(ShortcutUser, this.mUserId, p1);\nObject v19 = this.mPackages.put(p1, v17);\nv5.resetRateLimitingForCommandLineNoSaving();\nFileOutputStream v30 = v28.startWrite();\nTypedXmlSerializer v32 = Xml.newFastSerializer();\nv36.saveToXml(, 0);', 'ShortcutUser v6 = ShortcutService.getUserShortcutsLocked(p2);\nShortcutPackage v7 = v6.getPackageShortcuts(p1);\nthis.mApiCallCount = 0;\nthis.mLastResetTime = 0;\nFileOutputStream v15 = v13.startWrite();\nShortcutService.saveUserInternalLocked(p2, v15, 0);', 'ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2);\nv3.resetRateLimitingForCommandLineNoSaving();\np0.saveUserLocked(p2);']

The method onApplicationActive has the following similar APIs:

- API Name: getBackupPayload(I)[B with Similarity Score: 0.863103985786438
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutUser v3 = p0.getUserShortcutsLocked(p1);
v3.forAllPackageItems(v4);
v3.forAllPackages(v7);
v3.forAllLaunchers(v10);
ByteArrayOutputStream v15 = new ByteArrayOutputStream(32768);
p0.saveUserInternalLocked(p1, v15, 1);
byte[] v18 = v15.toByteArray();
return v18;

- API Name: removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.8411745429039001
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = ShortcutService.injectGetPackageUid(p1, p3);
ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);
ShortcutPackage v14 = v13.getPackageShortcuts(p1);

