The method enableShortcuts has the following code snippet:

This is path 1 for the API with depth 2:
public void enableShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p2);
				if (v22 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v24 = this.mUsers.get(p2);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p2);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v21 = ;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = ;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									int v40 = p2.size();
									if ( < 0) {
										Object v41 = p2.get();
										ShortcutInfo v43 = ShortcutPackage.findShortcutById(v41);
										ShortcutPackage.ensureNotImmutable(v43, p2);
										if ( < 0) {
											int v45 = p2.size();
											if ( < 0) {
												Object v46 = p2.get();
												CharSequence v47 = Preconditions.checkStringNotEmpty(v46);
												if (p1 != 0) {
													Object v50 = this.mShortcuts.get(p1);
													ShortcutInfo v49 = v50;
													if (v49 == 0) {
														boolean v52 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v51 = (v52 ^ 1);
														if (v51 == 0) {
															boolean v48 = ;
															if (v48 != 0) {
																ShortcutPackage$$ExternalSyntheticLambda21 v54 = new ShortcutPackage$$ExternalSyntheticLambda21(ShortcutPackage);
																Object v57 = Objects.requireNonNull(p1);
																Object v58 = Objects.requireNonNull(v54);
																if (0 == 0) {
																	v54.accept(0);
																	ShortcutInfo v60 = ShortcutPackage.findShortcutById(p1);
																	if (v60 != 0) {
																		v54.accept(v60);
																		ShortcutInfo v62 = new ShortcutInfo(1);
																		ShortcutPackage.saveShortcut(v62);
																		if ( != 0) {
																			ArrayList v64 = new ArrayList(1);
																			ShortcutInfo v66 = v20.findShortcutById(v47);
																			boolean v67 = .add(v66);
																			if ( < 0) {
																				Object v69 = Objects.requireNonNull(v20);
																				String v70 = this.mPackageName;
																				int v71 = this.mPackageUserId;
																				ShortcutService$$ExternalSyntheticLambda28 v73 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v71,v70);
																				Runnable v72 = v73;
																				Object v76 = Objects.requireNonNull(p1);
																				Object v77 = Objects.requireNonNull(v72);
																				this.mHandler.removeCallbacksAndMessages(p1);
																				boolean v79 = this.mHandler.postDelayed(v72, p1, 100);
																				List v81 = ShortcutService.removeNonKeyFields(p2);
																				List v82 = ShortcutService.removeNonKeyFields(p3);
																				UserHandle v83 = UserHandle.of(v71);
																				ShortcutService$$ExternalSyntheticLambda26 v84 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v71,v81,v70,v83,v82);
																				ShortcutService.injectPostToHandler(v84);
																				ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																				boolean v90 = 0;
																				if (v90 == 0) {
																					ShortcutService$$ExternalSyntheticLambda25 v92 = new ShortcutService$$ExternalSyntheticLambda25();
																					ShortcutService.forEachLoadedUserLocked(v92);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void enableShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v17 = 1;
			if (v17 == 0) {
				boolean v21 = ShortcutService.isUserUnlockedL(p2);
				if (v21 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v23 = this.mUsers.get(p2);
						if (v23 != 0) {
							ShortcutUser v24 = ShortcutService.loadUserLocked(p2);
							if (v24 != 0) {
								ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v20 = ;
								ShortcutPackage v30 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v30 != 0) {
									ShortcutPackage v31 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v33 = this.mPackages.put(p1, v31);
									ShortcutPackage v29 = ;
									ShortcutUser v34 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v19 = v29;
									int v39 = p2.size();
									if ( < 0) {
										Object v40 = p2.get();
										ShortcutInfo v42 = ShortcutPackage.findShortcutById(v40);
										ShortcutPackage.ensureNotImmutable(v42, p2);
										if ( < 0) {
											int v44 = p2.size();
											if ( < 0) {
												Object v45 = p2.get();
												CharSequence v46 = Preconditions.checkStringNotEmpty(v45);
												if (p1 != 0) {
													Object v49 = this.mShortcuts.get(p1);
													ShortcutInfo v48 = v49;
													if (v48 == 0) {
														boolean v51 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v50 = (v51 ^ 1);
														if (v50 == 0) {
															boolean v47 = ;
															if (v47 != 0) {
																ShortcutPackage$$ExternalSyntheticLambda21 v53 = new ShortcutPackage$$ExternalSyntheticLambda21(ShortcutPackage);
																Object v56 = Objects.requireNonNull(p1);
																Object v57 = Objects.requireNonNull(v53);
																if (0 == 0) {
																	v53.accept(0);
																	ShortcutInfo v59 = ShortcutPackage.findShortcutById(p1);
																	if (v59 != 0) {
																		v53.accept(v59);
																		ShortcutInfo v61 = new ShortcutInfo(1);
																		ShortcutPackage.saveShortcut(v61);
																		if ( != 0) {
																			ArrayList v63 = new ArrayList(1);
																			ShortcutInfo v65 = v19.findShortcutById(v46);
																			boolean v66 = .add(v65);
																			if ( < 0) {
																				Object v68 = Objects.requireNonNull(v19);
																				String v69 = this.mPackageName;
																				int v70 = this.mPackageUserId;
																				ShortcutService$$ExternalSyntheticLambda28 v72 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v70,v69);
																				Runnable v71 = v72;
																				Object v75 = Objects.requireNonNull(p1);
																				Object v76 = Objects.requireNonNull(v71);
																				this.mHandler.removeCallbacksAndMessages(p1);
																				boolean v78 = this.mHandler.postDelayed(v71, p1, 100);
																				List v80 = ShortcutService.removeNonKeyFields(p2);
																				List v81 = ShortcutService.removeNonKeyFields(p3);
																				UserHandle v82 = UserHandle.of(v70);
																				ShortcutService$$ExternalSyntheticLambda26 v83 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v70,v80,v69,v82,v81);
																				ShortcutService.injectPostToHandler(v83);
																				ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																				boolean v89 = 0;
																				if (v89 == 0) {
																					ShortcutService$$ExternalSyntheticLambda25 v91 = new ShortcutService$$ExternalSyntheticLambda25();
																					ShortcutService.forEachLoadedUserLocked(v91);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void enableShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = v8;
	if (v6 != v4) {
		ApplicationInfo v11 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v12 = ShortcutService.isEphemeralApp(v11);
		boolean v10 = v12;
		Preconditions.checkState((v10 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v14 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v17 = this.mUnlockedUsers.get(p1);
		if (v17 == 0) {
			boolean v18 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v16 = v18;
			if (v16 == 0) {
				boolean v21 = ShortcutService.isUserUnlockedL(p2);
				if (v21 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v23 = this.mUsers.get(p2);
						if (v23 != 0) {
							ShortcutUser v24 = ShortcutService.loadUserLocked(p2);
							if (v24 != 0) {
								ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v20 = ;
								ShortcutPackage v30 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v30 != 0) {
									ShortcutPackage v31 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v33 = this.mPackages.put(p1, v31);
									ShortcutPackage v29 = ;
									ShortcutUser v34 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v19 = v29;
									int v39 = p2.size();
									if ( < 0) {
										Object v40 = p2.get();
										ShortcutInfo v42 = ShortcutPackage.findShortcutById(v40);
										ShortcutPackage.ensureNotImmutable(v42, p2);
										if ( < 0) {
											int v44 = p2.size();
											if ( < 0) {
												Object v45 = p2.get();
												CharSequence v46 = Preconditions.checkStringNotEmpty(v45);
												if (p1 != 0) {
													Object v49 = this.mShortcuts.get(p1);
													ShortcutInfo v48 = v49;
													if (v48 == 0) {
														boolean v51 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v50 = (v51 ^ 1);
														if (v50 == 0) {
															boolean v47 = ;
															if (v47 != 0) {
																ShortcutPackage$$ExternalSyntheticLambda21 v53 = new ShortcutPackage$$ExternalSyntheticLambda21(ShortcutPackage);
																Object v56 = Objects.requireNonNull(p1);
																Object v57 = Objects.requireNonNull(v53);
																if (0 == 0) {
																	v53.accept(0);
																	ShortcutInfo v59 = ShortcutPackage.findShortcutById(p1);
																	if (v59 != 0) {
																		v53.accept(v59);
																		ShortcutInfo v61 = new ShortcutInfo(1);
																		ShortcutPackage.saveShortcut(v61);
																		if ( != 0) {
																			ArrayList v63 = new ArrayList(1);
																			ShortcutInfo v65 = v19.findShortcutById(v46);
																			boolean v66 = .add(v65);
																			if ( < 0) {
																				Object v68 = Objects.requireNonNull(v19);
																				String v69 = this.mPackageName;
																				int v70 = this.mPackageUserId;
																				ShortcutService$$ExternalSyntheticLambda28 v72 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v70,v69);
																				Runnable v71 = v72;
																				Object v75 = Objects.requireNonNull(p1);
																				Object v76 = Objects.requireNonNull(v71);
																				this.mHandler.removeCallbacksAndMessages(p1);
																				boolean v78 = this.mHandler.postDelayed(v71, p1, 100);
																				List v80 = ShortcutService.removeNonKeyFields(p2);
																				List v81 = ShortcutService.removeNonKeyFields(p3);
																				UserHandle v82 = UserHandle.of(v70);
																				ShortcutService$$ExternalSyntheticLambda26 v83 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v70,v80,v69,v82,v81);
																				ShortcutService.injectPostToHandler(v83);
																				ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																				boolean v89 = 0;
																				if (v89 == 0) {
																					ShortcutService$$ExternalSyntheticLambda25 v91 = new ShortcutService$$ExternalSyntheticLambda25();
																					ShortcutService.forEachLoadedUserLocked(v91);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v7 = ShortcutService.injectClearCallingIdentity();\nint v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);\nApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);\nboolean v13 = ShortcutService.isEphemeralApp(v12);\nShortcutUser v25 = new ShortcutUser(ShortcutService,p2);\nthis.mUsers.put(p2, );\nShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);\nif (v31 != 0) {\n  ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);\n  this.mPackages.put(p1, v32);', 'int v6 = ShortcutService.injectGetPackageUid(p1, p3);\nboolean v7 = ShortcutService.isEphemeralApp(p1, p3);\nShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);\nShortcutPackage v14 = v13.getPackageShortcuts(p1);\nv15.onCalledByPublisher(p1);\nShortcutPackage v12 = v14;', 'p0.verifyCaller(p1, p3);\nObject v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");\np0.throwIfUserLockedL(p3);\nShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);\nv4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);']

The method enableShortcuts has the following similar APIs:

- API Name: reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.9683862328529358
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = ShortcutService.injectGetPackageUid(p1, p3);
boolean v7 = ShortcutService.isEphemeralApp(p1, p3);
ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);
ShortcutPackage v14 = v13.getPackageShortcuts(p1);
ShortcutInfo v17 = v12.findShortcutById(p2);

- API Name: disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V with Similarity Score: 0.9652961492538452
  - Access Control Level: SYS_OR_SIG and the following code:
p0.verifyCaller(p1, p5);
Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5);

