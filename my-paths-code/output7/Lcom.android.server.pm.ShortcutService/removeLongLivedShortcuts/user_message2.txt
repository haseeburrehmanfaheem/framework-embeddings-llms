The method removeLongLivedShortcuts has the following code snippet:

This is path 1 for the API with depth 2:
public void removeLongLivedShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p2);
				if (v22 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v24 = this.mUsers.get(p2);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p2);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v21 = ;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = ;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									int v40 = p2.size();
									if ( < 0) {
										Object v41 = p2.get();
										ShortcutInfo v43 = ShortcutPackage.findShortcutById(v41);
										ShortcutPackage.ensureNotImmutable(v43, p2);
										if ( < 0) {
											int v45 = p2.size();
											if ( < 0) {
												Object v46 = p2.get();
												CharSequence v47 = Preconditions.checkStringNotEmpty(v46);
												if (p1 != 0) {
													Object v50 = this.mShortcuts.get(p1);
													ShortcutInfo v49 = v50;
													if (v49 == 0) {
														boolean v52 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v51 = (v52 ^ 1);
														if (v51 == 0) {
															boolean v48 = ;
															if (v48 != 0) {
																if (p1 != 0) {
																	Object v55 = this.mShortcuts.get(p1);
																	ShortcutInfo v54 = v55;
																	if (v54 == 0) {
																		ShortcutPackage$$ExternalSyntheticLambda3 v56 = new ShortcutPackage$$ExternalSyntheticLambda3();
																		Object v59 = Objects.requireNonNull(p1);
																		Object v60 = Objects.requireNonNull(v56);
																		if (0 == 0) {
																			v56.accept(0);
																			ShortcutInfo v62 = ShortcutPackage.findShortcutById(p1);
																			if (v62 != 0) {
																				v56.accept(v62);
																				ShortcutInfo v64 = new ShortcutInfo(1);
																				ShortcutPackage.saveShortcut(v64);
																				if (0 == 0) {
																					if (0 != ) {
																						StringBuilder v67 = new StringBuilder();
																						StringBuilder v69 = v67.append("disable and disabledReason disagree: ");
																						StringBuilder v70 = v67.append(0);
																						StringBuilder v71 = v67.append(" vs ");
																						StringBuilder v72 = v67.append(0);
																						String v73 = v67.toString();
																						Preconditions.checkState(, v73);
																						ShortcutInfo v75 = ShortcutPackage.findShortcutById(p1);
																						if (v75 == 0) {
																							boolean v76 = v75.isEnabled();
																							if (v76 != 0) {
																								if (p2 == 0) {
																									boolean v77 = v75.isVisibleToPublisher();
																									if (v77 != 0) {
																										if (0 != 0) {
																											ShortcutPackage.ensureNotImmutable(v75, 1);
																											if (0 != 0) {
																												String v79 = new String(1);
																												ShortcutPackage.removeShortcutAsync(v79);
																												boolean v81 = v75.isPinned();
																												if (v81 != 0) {
																													boolean v82 = v75.isCached();
																													if (v82 == 0) {
																														String v83 = v75.getId();
																														ShortcutPackage$$ExternalSyntheticLambda38 v84 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,0,0);
																														ShortcutPackage.mutateShortcut(v83, v75, v84);
																														ShortcutInfo v66 = 0;
																														ShortcutInfo v53 = v66;
																														if (v53 == 0) {
																															if ( != 0) {
																																ArrayList v87 = new ArrayList(1);
																																boolean v89 = .add(v53);
																																if ( < 0) {
																																	long v92 = System.currentTimeMillis();
																																	long v91 = v92;
																																	ShortcutPackage$$ExternalSyntheticLambda4 v93 = new ShortcutPackage$$ExternalSyntheticLambda4(v91);
																																	int v96 = this.mShortcuts.size();
																																	if ( < 0) {
																																		Object v97 = this.mShortcuts.valueAt();
																																		v93.accept(v97);
																																		if ( < 0) {
																																			ArrayMap v100 = new ArrayMap();
																																			ShortcutPackage$$ExternalSyntheticLambda40 v102 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v100);
																																			ShortcutPackage.forEachShortcut(v102);
																																			ArrayMap v99 = v100;
																																			int v105 = v99.size();
																																			if ( < 0) {
																																				Object v106 = v99.valueAt();
																																				Collections.sort(v106, this.mShortcutRankComparator);
																																				int v108 = v106.size();
																																				if ( >= v108) {
																																					Object v109 = v106.get();
																																					boolean v111 = ShortcutInfo.isDeclaredInManifest();
																																					boolean v110 = v111;
																																					if (v110 == 0) {
																																						boolean v113 = ShortcutInfo.hasFlags(1);
																																						boolean v112 = v113;
																																						if (v112 != 0) {
																																							int v114 = this.mRank;
																																							if (v114 == ) {
																																								String v115 = this.mId;
																																								ShortcutPackage$$ExternalSyntheticLambda5 v116 = new ShortcutPackage$$ExternalSyntheticLambda5(v91,);
																																								Object v119 = Objects.requireNonNull(v115);
																																								Object v120 = Objects.requireNonNull(v116);
																																								if (v109 == 0) {
																																									v116.accept(v109);
																																									ShortcutInfo v122 = ShortcutPackage.findShortcutById(v115);
																																									if (v122 != 0) {
																																										v116.accept(v122);
																																										ShortcutInfo v124 = new ShortcutInfo(1);
																																										ShortcutPackage.saveShortcut(v124);
																																										if ( >= v108) {
																																											if ( < 0) {
																																												Object v127 = Objects.requireNonNull(v20);
																																												String v128 = this.mPackageName;
																																												int v129 = this.mPackageUserId;
																																												ShortcutService$$ExternalSyntheticLambda28 v131 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v129,v128);
																																												Runnable v130 = v131;
																																												Object v134 = Objects.requireNonNull(p1);
																																												Object v135 = Objects.requireNonNull(v130);
																																												this.mHandler.removeCallbacksAndMessages(p1);
																																												boolean v137 = this.mHandler.postDelayed(v130, p1, 100);
																																												List v139 = ShortcutService.removeNonKeyFields(p2);
																																												List v140 = ShortcutService.removeNonKeyFields(p3);
																																												UserHandle v141 = UserHandle.of(v129);
																																												ShortcutService$$ExternalSyntheticLambda26 v142 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v129,v139,v128,v141,v140);
																																												ShortcutService.injectPostToHandler(v142);
																																												ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																												boolean v148 = 0;
																																												if (v148 == 0) {
																																													ShortcutService$$ExternalSyntheticLambda25 v150 = new ShortcutService$$ExternalSyntheticLambda25();
																																													ShortcutService.forEachLoadedUserLocked(v150);
																																													return;
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void removeLongLivedShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p2);
				if (v22 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v24 = this.mUsers.get(p2);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p2);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v21 = ;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = ;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									int v40 = p2.size();
									if ( < 0) {
										Object v41 = p2.get();
										ShortcutInfo v43 = ShortcutPackage.findShortcutById(v41);
										ShortcutPackage.ensureNotImmutable(v43, p2);
										if ( < 0) {
											int v45 = p2.size();
											if ( < 0) {
												Object v46 = p2.get();
												CharSequence v47 = Preconditions.checkStringNotEmpty(v46);
												if (p1 != 0) {
													Object v50 = this.mShortcuts.get(p1);
													ShortcutInfo v49 = v50;
													if (v49 == 0) {
														boolean v52 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v51 = (v52 ^ 1);
														if (v51 == 0) {
															boolean v48 = ;
															if (v48 != 0) {
																if (p1 != 0) {
																	Object v55 = this.mShortcuts.get(p1);
																	ShortcutInfo v54 = v55;
																	if (v54 == 0) {
																		ShortcutPackage$$ExternalSyntheticLambda3 v56 = new ShortcutPackage$$ExternalSyntheticLambda3();
																		Object v59 = Objects.requireNonNull(p1);
																		Object v60 = Objects.requireNonNull(v56);
																		if (0 == 0) {
																			v56.accept(0);
																			ShortcutInfo v62 = ShortcutPackage.findShortcutById(p1);
																			if (v62 != 0) {
																				v56.accept(v62);
																				ShortcutInfo v64 = new ShortcutInfo(1);
																				ShortcutPackage.saveShortcut(v64);
																				if (0 == 0) {
																					if (0 != ) {
																						StringBuilder v67 = new StringBuilder();
																						StringBuilder v69 = v67.append("disable and disabledReason disagree: ");
																						StringBuilder v70 = v67.append(0);
																						StringBuilder v71 = v67.append(" vs ");
																						StringBuilder v72 = v67.append(0);
																						String v73 = v67.toString();
																						Preconditions.checkState(, v73);
																						ShortcutInfo v75 = ShortcutPackage.findShortcutById(p1);
																						if (v75 == 0) {
																							boolean v76 = v75.isEnabled();
																							if (v76 != 0) {
																								if (p2 == 0) {
																									boolean v77 = v75.isVisibleToPublisher();
																									if (v77 != 0) {
																										if (0 != 0) {
																											ShortcutPackage.ensureNotImmutable(v75, 1);
																											if (0 != 0) {
																												String v79 = new String(1);
																												ShortcutPackage.removeShortcutAsync(v79);
																												boolean v81 = v75.isPinned();
																												if (v81 != 0) {
																													boolean v82 = v75.isCached();
																													if (v82 == 0) {
																														String v83 = v75.getId();
																														ShortcutPackage$$ExternalSyntheticLambda38 v84 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,0,0);
																														ShortcutPackage.mutateShortcut(v83, v75, v84);
																														ShortcutInfo v66 = 0;
																														ShortcutInfo v53 = v66;
																														if (v53 == 0) {
																															if ( != 0) {
																																ArrayList v87 = new ArrayList(1);
																																ShortcutInfo v89 = v20.findShortcutById(v47);
																																boolean v90 = .add(v89);
																																if ( < 0) {
																																	long v93 = System.currentTimeMillis();
																																	long v92 = v93;
																																	ShortcutPackage$$ExternalSyntheticLambda4 v94 = new ShortcutPackage$$ExternalSyntheticLambda4(v92);
																																	int v97 = this.mShortcuts.size();
																																	if ( < 0) {
																																		Object v98 = this.mShortcuts.valueAt();
																																		v94.accept(v98);
																																		if ( < 0) {
																																			ArrayMap v101 = new ArrayMap();
																																			ShortcutPackage$$ExternalSyntheticLambda40 v103 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v101);
																																			ShortcutPackage.forEachShortcut(v103);
																																			ArrayMap v100 = v101;
																																			int v106 = v100.size();
																																			if ( < 0) {
																																				Object v107 = v100.valueAt();
																																				Collections.sort(v107, this.mShortcutRankComparator);
																																				int v109 = v107.size();
																																				if ( >= v109) {
																																					Object v110 = v107.get();
																																					boolean v112 = ShortcutInfo.isDeclaredInManifest();
																																					boolean v111 = v112;
																																					if (v111 == 0) {
																																						boolean v114 = ShortcutInfo.hasFlags(1);
																																						boolean v113 = v114;
																																						if (v113 != 0) {
																																							int v115 = this.mRank;
																																							if (v115 == ) {
																																								String v116 = this.mId;
																																								ShortcutPackage$$ExternalSyntheticLambda5 v117 = new ShortcutPackage$$ExternalSyntheticLambda5(v92,);
																																								Object v120 = Objects.requireNonNull(v116);
																																								Object v121 = Objects.requireNonNull(v117);
																																								if (v110 == 0) {
																																									v117.accept(v110);
																																									ShortcutInfo v123 = ShortcutPackage.findShortcutById(v116);
																																									if (v123 != 0) {
																																										v117.accept(v123);
																																										ShortcutInfo v125 = new ShortcutInfo(1);
																																										ShortcutPackage.saveShortcut(v125);
																																										if ( >= v109) {
																																											if ( < 0) {
																																												Object v128 = Objects.requireNonNull(v20);
																																												String v129 = this.mPackageName;
																																												int v130 = this.mPackageUserId;
																																												ShortcutService$$ExternalSyntheticLambda28 v132 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v130,v129);
																																												Runnable v131 = v132;
																																												Object v135 = Objects.requireNonNull(p1);
																																												Object v136 = Objects.requireNonNull(v131);
																																												this.mHandler.removeCallbacksAndMessages(p1);
																																												boolean v138 = this.mHandler.postDelayed(v131, p1, 100);
																																												List v140 = ShortcutService.removeNonKeyFields(p2);
																																												List v141 = ShortcutService.removeNonKeyFields(p3);
																																												UserHandle v142 = UserHandle.of(v130);
																																												ShortcutService$$ExternalSyntheticLambda26 v143 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v130,v140,v129,v142,v141);
																																												ShortcutService.injectPostToHandler(v143);
																																												ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																												boolean v149 = 0;
																																												if (v149 == 0) {
																																													ShortcutService$$ExternalSyntheticLambda25 v151 = new ShortcutService$$ExternalSyntheticLambda25();
																																													ShortcutService.forEachLoadedUserLocked(v151);
																																													return;
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void removeLongLivedShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v17 = 1;
			if (v17 == 0) {
				boolean v21 = ShortcutService.isUserUnlockedL(p2);
				if (v21 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v23 = this.mUsers.get(p2);
						if (v23 != 0) {
							ShortcutUser v24 = ShortcutService.loadUserLocked(p2);
							if (v24 != 0) {
								ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v20 = ;
								ShortcutPackage v30 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v30 != 0) {
									ShortcutPackage v31 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v33 = this.mPackages.put(p1, v31);
									ShortcutPackage v29 = ;
									ShortcutUser v34 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v19 = v29;
									int v39 = p2.size();
									if ( < 0) {
										Object v40 = p2.get();
										ShortcutInfo v42 = ShortcutPackage.findShortcutById(v40);
										ShortcutPackage.ensureNotImmutable(v42, p2);
										if ( < 0) {
											int v44 = p2.size();
											if ( < 0) {
												Object v45 = p2.get();
												CharSequence v46 = Preconditions.checkStringNotEmpty(v45);
												if (p1 != 0) {
													Object v49 = this.mShortcuts.get(p1);
													ShortcutInfo v48 = v49;
													if (v48 == 0) {
														boolean v51 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v50 = (v51 ^ 1);
														if (v50 == 0) {
															boolean v47 = ;
															if (v47 != 0) {
																if (p1 != 0) {
																	Object v54 = this.mShortcuts.get(p1);
																	ShortcutInfo v53 = v54;
																	if (v53 == 0) {
																		ShortcutPackage$$ExternalSyntheticLambda3 v55 = new ShortcutPackage$$ExternalSyntheticLambda3();
																		Object v58 = Objects.requireNonNull(p1);
																		Object v59 = Objects.requireNonNull(v55);
																		if (0 == 0) {
																			v55.accept(0);
																			ShortcutInfo v61 = ShortcutPackage.findShortcutById(p1);
																			if (v61 != 0) {
																				v55.accept(v61);
																				ShortcutInfo v63 = new ShortcutInfo(1);
																				ShortcutPackage.saveShortcut(v63);
																				if (0 == 0) {
																					if (0 != ) {
																						StringBuilder v66 = new StringBuilder();
																						StringBuilder v68 = v66.append("disable and disabledReason disagree: ");
																						StringBuilder v69 = v66.append(0);
																						StringBuilder v70 = v66.append(" vs ");
																						StringBuilder v71 = v66.append(0);
																						String v72 = v66.toString();
																						Preconditions.checkState(, v72);
																						ShortcutInfo v74 = ShortcutPackage.findShortcutById(p1);
																						if (v74 == 0) {
																							boolean v75 = v74.isEnabled();
																							if (v75 != 0) {
																								if (p2 == 0) {
																									boolean v76 = v74.isVisibleToPublisher();
																									if (v76 != 0) {
																										if (0 != 0) {
																											ShortcutPackage.ensureNotImmutable(v74, 1);
																											if (0 != 0) {
																												String v78 = new String(1);
																												ShortcutPackage.removeShortcutAsync(v78);
																												boolean v80 = v74.isPinned();
																												if (v80 != 0) {
																													boolean v81 = v74.isCached();
																													if (v81 == 0) {
																														String v82 = v74.getId();
																														ShortcutPackage$$ExternalSyntheticLambda38 v83 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,0,0);
																														ShortcutPackage.mutateShortcut(v82, v74, v83);
																														ShortcutInfo v65 = 0;
																														ShortcutInfo v52 = v65;
																														if (v52 == 0) {
																															if ( != 0) {
																																ArrayList v86 = new ArrayList(1);
																																boolean v88 = .add(v52);
																																if ( < 0) {
																																	long v91 = System.currentTimeMillis();
																																	long v90 = v91;
																																	ShortcutPackage$$ExternalSyntheticLambda4 v92 = new ShortcutPackage$$ExternalSyntheticLambda4(v90);
																																	int v95 = this.mShortcuts.size();
																																	if ( < 0) {
																																		Object v96 = this.mShortcuts.valueAt();
																																		v92.accept(v96);
																																		if ( < 0) {
																																			ArrayMap v99 = new ArrayMap();
																																			ShortcutPackage$$ExternalSyntheticLambda40 v101 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v99);
																																			ShortcutPackage.forEachShortcut(v101);
																																			ArrayMap v98 = v99;
																																			int v104 = v98.size();
																																			if ( < 0) {
																																				Object v105 = v98.valueAt();
																																				Collections.sort(v105, this.mShortcutRankComparator);
																																				int v107 = v105.size();
																																				if ( >= v107) {
																																					Object v108 = v105.get();
																																					boolean v110 = ShortcutInfo.isDeclaredInManifest();
																																					boolean v109 = v110;
																																					if (v109 == 0) {
																																						boolean v112 = ShortcutInfo.hasFlags(1);
																																						boolean v111 = v112;
																																						if (v111 != 0) {
																																							int v113 = this.mRank;
																																							if (v113 == ) {
																																								String v114 = this.mId;
																																								ShortcutPackage$$ExternalSyntheticLambda5 v115 = new ShortcutPackage$$ExternalSyntheticLambda5(v90,);
																																								Object v118 = Objects.requireNonNull(v114);
																																								Object v119 = Objects.requireNonNull(v115);
																																								if (v108 == 0) {
																																									v115.accept(v108);
																																									ShortcutInfo v121 = ShortcutPackage.findShortcutById(v114);
																																									if (v121 != 0) {
																																										v115.accept(v121);
																																										ShortcutInfo v123 = new ShortcutInfo(1);
																																										ShortcutPackage.saveShortcut(v123);
																																										if ( >= v107) {
																																											if ( < 0) {
																																												Object v126 = Objects.requireNonNull(v19);
																																												String v127 = this.mPackageName;
																																												int v128 = this.mPackageUserId;
																																												ShortcutService$$ExternalSyntheticLambda28 v130 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v128,v127);
																																												Runnable v129 = v130;
																																												Object v133 = Objects.requireNonNull(p1);
																																												Object v134 = Objects.requireNonNull(v129);
																																												this.mHandler.removeCallbacksAndMessages(p1);
																																												boolean v136 = this.mHandler.postDelayed(v129, p1, 100);
																																												List v138 = ShortcutService.removeNonKeyFields(p2);
																																												List v139 = ShortcutService.removeNonKeyFields(p3);
																																												UserHandle v140 = UserHandle.of(v128);
																																												ShortcutService$$ExternalSyntheticLambda26 v141 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v128,v138,v127,v140,v139);
																																												ShortcutService.injectPostToHandler(v141);
																																												ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																												boolean v147 = 0;
																																												if (v147 == 0) {
																																													ShortcutService$$ExternalSyntheticLambda25 v149 = new ShortcutService$$ExternalSyntheticLambda25();
																																													ShortcutService.forEachLoadedUserLocked(v149);
																																													return;
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v7 = ShortcutService.injectClearCallingIdentity();\nint v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);\nShortcutUser v26 = new ShortcutUser(ShortcutService,p2);', 'v4.deleteLongLivedWithId(v8, 1);']

The method removeLongLivedShortcuts has the following similar APIs:

- API Name: removeAllDynamicShortcuts(Ljava/lang/String;I)V with Similarity Score: 0.9975000619888306
  - Access Control Level: SYS_OR_SIG and the following code:
long v7 = ShortcutService.injectClearCallingIdentity();
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ShortcutUser v27 = new ShortcutUser(ShortcutService,p2);

- API Name: removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.9325729608535767
  - Access Control Level: SYS_OR_SIG and the following code:
long v7 = ShortcutService.injectClearCallingIdentity();
int var1 = this.mNative.getPackageUid(p1, 795136, p2);
ShortcutUser v26 = new ShortcutUser(ShortcutService,p2);
ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);

