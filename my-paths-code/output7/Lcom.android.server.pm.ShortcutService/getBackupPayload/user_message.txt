This is path 1 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p1);
		if (v5 != 0) {
			boolean v8 = this.mUnlockedUsers.get(p1);
			if (v8 == 0) {
				boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v7 = v9;
				if (v7 != 0) {
					if (p1 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p1;
						Object v12 = this.mUsers.get(p1);
						if (v12 != 0) {
							File v14 = ShortcutService.getUserFile(p1);
							AtomicFile v15 = new AtomicFile(v14);
							FileInputStream v17 = v15.openRead();
							ShortcutUser v18 = ShortcutService.loadUserInternal(p1, v17, 0);
							IoUtils.closeQuietly(v17);
							ShortcutUser v13 = v18;
							if (v13 != 0) {
								ShortcutUser v20 = new ShortcutUser(ShortcutService,p1);
								this.mUsers.put(p1, );
								boolean v24 = ShortcutService.injectIsSafeModeEnabled();
								if (v24 == 0) {
									long v25 = ShortcutService.getStatStartTime();
									ArrayList v26 = new ArrayList();
									ShortcutUser v28 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v29 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v26);
									v28.forAllPackageItems(v29);
									int v32 = v26.size();
									if (v32 <= 0) {
										int v33 = v26.size();
										if ( < 0) {
											Object v34 = v26.get();
											ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p1, ShortcutUser$PackageWithUser.userId, 0);
											if ( < 0) {
												long v36 = v28.getLastAppScanTime();
												ShortcutService.rescanUpdatedPackagesLocked(p1, v36);
												ShortcutService.logDurationStat(8, v25);
												ShortcutService.verifyStates();
												ShortcutUser v6 = ;
												if (v6 != 0) {
													ShortcutService$$ExternalSyntheticLambda1 v40 = new ShortcutService$$ExternalSyntheticLambda1();
													int v44 = this.mLaunchers.size();
													if ( >= v44) {
														Object v45 = this.mLaunchers.valueAt();
														p1.accept(v45);
														if ( >= v44) {
															int v48 = this.mPackages.size();
															if ( >= v48) {
																Object v49 = this.mPackages.valueAt();
																p1.accept(v49);
																if ( >= v48) {
																	ShortcutService$$ExternalSyntheticLambda2 v51 = new ShortcutService$$ExternalSyntheticLambda2();
																	v6.forAllPackages(v51);
																	ShortcutService$$ExternalSyntheticLambda3 v54 = new ShortcutService$$ExternalSyntheticLambda3();
																	v6.forAllLaunchers(v54);
																	Integer v59 = Integer.valueOf(p1);
																	boolean v60 = this.mDirtyUserIds.contains(v59);
																	if (v60 != 0) {
																		Integer v61 = Integer.valueOf(p1);
																		boolean v62 = this.mDirtyUserIds.add(v61);
																		this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
																		boolean v64 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
																		boolean v66 = this.mShutdown.get();
																		if (v66 == 0) {
																			Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
																			if (caughtException != 0) {
																				this.mWtfCount = (this.mWtfCount + 1);
																				Exception v71 = new Exception("Last failure was logged here:");
																				this.mLastWtfStacktrace = v71;
																				Trace.traceEnd(524288);
																				ByteArrayOutputStream v75 = new ByteArrayOutputStream(32768);
																				if (1 == 0) {
																					TypedXmlSerializer v78 = Xml.newFastSerializer();
																					String v79 = StandardCharsets.UTF_8.name();
																					v78.setOutput(v75, v79);
																					.startDocument(0, Boolean.TRUE);
																					boolean v83 = ShortcutService.isUserUnlockedL(p1);
																					if (v83 != 0) {
																						if (p1 == this.mLastLockedUser) {
																							ShortcutService.wtf("User still locked");
																							this.mLastLockedUser = p1;
																							Object v85 = this.mUsers.get(p1);
																							if (v85 != 0) {
																								ShortcutUser v86 = ShortcutService.loadUserLocked(p1);
																								if (v86 != 0) {
																									ShortcutUser v87 = new ShortcutUser(ShortcutService,p1);
																									this.mUsers.put(p1, );
																									ShortcutService.checkPackageChanges(p1);
																									ShortcutUser v82 = ;
																									XmlSerializer v92 = .startTag(0, "user");
																									if (p3 != 0) {
																										ShortcutService.writeAttr(, "locales", this.mKnownLocales);
																										ShortcutService.writeAttr(, "last-app-scan-time2", this.mLastAppScanTime);
																										ShortcutService.writeAttr(, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
																										ShortcutService.writeAttr(, "restore-from-fp", this.mRestoreFromOsFingerprint);
																										if (p3 != 0) {
																											File v97 = this.mService.injectUserDataPath(this.mUserId);
																											File v98 = new File(v97,"packages");
																											boolean v100 = FileUtils.deleteContents(v98);
																											File v101 = new File(v97,"launchers");
																											boolean v103 = FileUtils.deleteContents(v101);
																											int v104 = this.mLaunchers.size();
																											if ( >= v104) {
																												Object v105 = this.mLaunchers.valueAt();
																												ShortcutUser.saveShortcutPackageItem(, v105, p3);
																												if ( >= v104) {
																													int v107 = this.mPackages.size();
																													if ( >= v107) {
																														Object v108 = this.mPackages.valueAt();
																														ShortcutUser.saveShortcutPackageItem(, v108, p3);
																														if ( >= v107) {
																															XmlSerializer v110 = .endTag(0, "user");
																															.endDocument();
																															v75.flush();
																															byte[] v113 = v75.toByteArray();
																															ShortcutDumpFiles$$ExternalSyntheticLambda0 v115 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v113);
																															File v118 = this.mService.getDumpPath();
																															boolean v119 = v118.mkdirs();
																															boolean v120 = v118.exists();
																															if (v120 != 0) {
																																StringBuilder v121 = new StringBuilder();
																																boolean v117 = 0;
																																boolean v114 = v117;
																																return v113;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public byte[] getBackupPayload(int p1){
	boolean v2 = ShortcutService.isCallerSystem();
	if (v2 == 0) {
		boolean v4 = this.mUnlockedUsers.get(p1);
		if (v4 == 0) {
			boolean v5 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v3 = v5;
			if (v3 != 0) {
				boolean v7 = ShortcutService.isUserUnlockedL(p1);
				if (v7 != 0) {
					if (p1 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p1;
						Object v9 = this.mUsers.get(p1);
						if (v9 != 0) {
							ShortcutUser v10 = ShortcutService.loadUserLocked(p1);
							if (v10 != 0) {
								ShortcutUser v11 = new ShortcutUser(ShortcutService,p1);
								this.mUsers.put(p1, );
								ShortcutService.checkPackageChanges(p1);
								ShortcutUser v6 = ;
								if (v6 != 0) {
									ShortcutService$$ExternalSyntheticLambda1 v15 = new ShortcutService$$ExternalSyntheticLambda1();
									ShortcutUser.forAllLaunchers(v15);
									ShortcutUser.forAllPackages(v15);
									ShortcutService$$ExternalSyntheticLambda2 v20 = new ShortcutService$$ExternalSyntheticLambda2();
									int v23 = this.mPackages.size();
									if ( >= v23) {
										Object v24 = this.mPackages.valueAt();
										v20.accept(v24);
										if ( >= v23) {
											ShortcutService$$ExternalSyntheticLambda3 v26 = new ShortcutService$$ExternalSyntheticLambda3();
											int v29 = this.mLaunchers.size();
											if ( >= v29) {
												Object v30 = this.mLaunchers.valueAt();
												v26.accept(v30);
												if ( >= v29) {
													ShortcutService.scheduleSaveInner(p1);
													boolean v35 = this.mShutdown.get();
													if (v35 == 0) {
														Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
														ShortcutService.wtf("Exception in saveDirtyInfo", caughtException);
														Trace.traceEnd(524288);
														ByteArrayOutputStream v39 = new ByteArrayOutputStream(32768);
														if (1 == 0) {
															TypedXmlSerializer v42 = Xml.newFastSerializer();
															String v43 = StandardCharsets.UTF_8.name();
															v42.setOutput(v39, v43);
															.startDocument(0, Boolean.TRUE);
															ShortcutUser v46 = ShortcutService.getUserShortcutsLocked(p1);
															v46.saveToXml(, 1);
															.endDocument();
															v39.flush();
															byte[] v50 = v39.toByteArray();
															ShortcutDumpFiles$$ExternalSyntheticLambda0 v52 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v50);
															boolean v54 = ShortcutDumpFiles.save("backup-1-payload.txt", v52);
															boolean v51 = v54;
															return v50;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public byte[] getBackupPayload(int p1){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p1);
	if (v2 != 0) {
		ShortcutUser v3 = p0.getUserShortcutsLocked(p1);
		if (v3 != 0) {
			ShortcutService$$ExternalSyntheticLambda1 v4 = new ShortcutService$$ExternalSyntheticLambda1();
			v3.forAllPackageItems(v4);
			ShortcutService$$ExternalSyntheticLambda2 v7 = new ShortcutService$$ExternalSyntheticLambda2();
			v3.forAllPackages(v7);
			ShortcutService$$ExternalSyntheticLambda3 v10 = new ShortcutService$$ExternalSyntheticLambda3();
			v3.forAllLaunchers(v10);
			p0.scheduleSaveUser(p1);
			p0.saveDirtyInfo();
			ByteArrayOutputStream v15 = new ByteArrayOutputStream(32768);
			p0.saveUserInternalLocked(p1, v15, 1);
			byte[] v18 = v15.toByteArray();
			boolean v19 = this.mShortcutDumpFiles.save("backup-1-payload.txt", v18);
			return v18;
		}
	}
}
