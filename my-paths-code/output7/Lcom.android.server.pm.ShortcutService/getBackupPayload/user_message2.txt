The method getBackupPayload has the following code snippet:

This is path 1 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p1);
		if (v5 != 0) {
			boolean v8 = this.mUnlockedUsers.get(p1);
			if (v8 == 0) {
				boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v7 = v9;
				if (v7 != 0) {
					if (p1 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p1;
						Object v12 = this.mUsers.get(p1);
						if (v12 != 0) {
							File v14 = ShortcutService.getUserFile(p1);
							AtomicFile v15 = new AtomicFile(v14);
							FileInputStream v17 = v15.openRead();
							ShortcutUser v18 = ShortcutService.loadUserInternal(p1, v17, 0);
							IoUtils.closeQuietly(v17);
							ShortcutUser v13 = v18;
							if (v13 != 0) {
								ShortcutUser v20 = new ShortcutUser(ShortcutService,p1);
								this.mUsers.put(p1, );
								boolean v24 = ShortcutService.injectIsSafeModeEnabled();
								if (v24 == 0) {
									long v25 = ShortcutService.getStatStartTime();
									ArrayList v26 = new ArrayList();
									ShortcutUser v28 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v29 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v26);
									v28.forAllPackageItems(v29);
									int v32 = v26.size();
									if (v32 <= 0) {
										int v33 = v26.size();
										if ( < 0) {
											Object v34 = v26.get();
											ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p1, ShortcutUser$PackageWithUser.userId, 0);
											if ( < 0) {
												long v36 = v28.getLastAppScanTime();
												ShortcutService.rescanUpdatedPackagesLocked(p1, v36);
												ShortcutService.logDurationStat(8, v25);
												ShortcutService.verifyStates();
												ShortcutUser v6 = ;
												if (v6 != 0) {
													ShortcutService$$ExternalSyntheticLambda1 v40 = new ShortcutService$$ExternalSyntheticLambda1();
													int v44 = this.mLaunchers.size();
													if ( >= v44) {
														Object v45 = this.mLaunchers.valueAt();
														p1.accept(v45);
														if ( >= v44) {
															int v48 = this.mPackages.size();
															if ( >= v48) {
																Object v49 = this.mPackages.valueAt();
																p1.accept(v49);
																if ( >= v48) {
																	ShortcutService$$ExternalSyntheticLambda2 v51 = new ShortcutService$$ExternalSyntheticLambda2();
																	v6.forAllPackages(v51);
																	ShortcutService$$ExternalSyntheticLambda3 v54 = new ShortcutService$$ExternalSyntheticLambda3();
																	v6.forAllLaunchers(v54);
																	Integer v59 = Integer.valueOf(p1);
																	boolean v60 = this.mDirtyUserIds.contains(v59);
																	if (v60 != 0) {
																		Integer v61 = Integer.valueOf(p1);
																		boolean v62 = this.mDirtyUserIds.add(v61);
																		this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
																		boolean v64 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
																		boolean v66 = this.mShutdown.get();
																		if (v66 == 0) {
																			Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
																			if (caughtException != 0) {
																				this.mWtfCount = (this.mWtfCount + 1);
																				Exception v71 = new Exception("Last failure was logged here:");
																				this.mLastWtfStacktrace = v71;
																				Trace.traceEnd(524288);
																				ByteArrayOutputStream v75 = new ByteArrayOutputStream(32768);
																				if (1 == 0) {
																					TypedXmlSerializer v78 = Xml.newFastSerializer();
																					String v79 = StandardCharsets.UTF_8.name();
																					v78.setOutput(v75, v79);
																					.startDocument(0, Boolean.TRUE);
																					boolean v83 = ShortcutService.isUserUnlockedL(p1);
																					if (v83 != 0) {
																						if (p1 == this.mLastLockedUser) {
																							ShortcutService.wtf("User still locked");
																							this.mLastLockedUser = p1;
																							Object v85 = this.mUsers.get(p1);
																							if (v85 != 0) {
																								ShortcutUser v86 = ShortcutService.loadUserLocked(p1);
																								if (v86 != 0) {
																									ShortcutUser v87 = new ShortcutUser(ShortcutService,p1);
																									this.mUsers.put(p1, );
																									ShortcutService.checkPackageChanges(p1);
																									ShortcutUser v82 = ;
																									XmlSerializer v92 = .startTag(0, "user");
																									if (p3 != 0) {
																										ShortcutService.writeAttr(, "locales", this.mKnownLocales);
																										ShortcutService.writeAttr(, "last-app-scan-time2", this.mLastAppScanTime);
																										ShortcutService.writeAttr(, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
																										ShortcutService.writeAttr(, "restore-from-fp", this.mRestoreFromOsFingerprint);
																										if (p3 != 0) {
																											File v97 = this.mService.injectUserDataPath(this.mUserId);
																											File v98 = new File(v97,"packages");
																											boolean v100 = FileUtils.deleteContents(v98);
																											File v101 = new File(v97,"launchers");
																											boolean v103 = FileUtils.deleteContents(v101);
																											int v104 = this.mLaunchers.size();
																											if ( >= v104) {
																												Object v105 = this.mLaunchers.valueAt();
																												ShortcutUser.saveShortcutPackageItem(, v105, p3);
																												if ( >= v104) {
																													int v107 = this.mPackages.size();
																													if ( >= v107) {
																														Object v108 = this.mPackages.valueAt();
																														ShortcutUser.saveShortcutPackageItem(, v108, p3);
																														if ( >= v107) {
																															XmlSerializer v110 = .endTag(0, "user");
																															.endDocument();
																															v75.flush();
																															byte[] v113 = v75.toByteArray();
																															ShortcutDumpFiles$$ExternalSyntheticLambda0 v115 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v113);
																															File v118 = this.mService.getDumpPath();
																															boolean v119 = v118.mkdirs();
																															boolean v120 = v118.exists();
																															if (v120 != 0) {
																																StringBuilder v121 = new StringBuilder();
																																boolean v117 = 0;
																																boolean v114 = v117;
																																return v113;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p1);
		if (v5 != 0) {
			boolean v8 = this.mUnlockedUsers.get(p1);
			if (v8 == 0) {
				boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v7 = v9;
				if (v7 != 0) {
					if (p1 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p1;
						Object v12 = this.mUsers.get(p1);
						if (v12 != 0) {
							File v14 = ShortcutService.getUserFile(p1);
							AtomicFile v15 = new AtomicFile(v14);
							FileInputStream v17 = v15.openRead();
							ShortcutUser v13 = 0;
							if (v13 != 0) {
								ShortcutUser v18 = new ShortcutUser(ShortcutService,p1);
								this.mUsers.put(p1, );
								boolean v22 = ShortcutService.injectIsSafeModeEnabled();
								if (v22 == 0) {
									long v23 = ShortcutService.getStatStartTime();
									ArrayList v24 = new ArrayList();
									ShortcutUser v26 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v27 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v24);
									v26.forAllPackageItems(v27);
									int v30 = v24.size();
									if (v30 <= 0) {
										int v31 = v24.size();
										if ( < 0) {
											Object v32 = v24.get();
											ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p1, ShortcutUser$PackageWithUser.userId, 0);
											if ( < 0) {
												long v34 = v26.getLastAppScanTime();
												ShortcutService.rescanUpdatedPackagesLocked(p1, v34);
												ShortcutService.logDurationStat(8, v23);
												ShortcutService.verifyStates();
												ShortcutUser v6 = ;
												if (v6 != 0) {
													ShortcutService$$ExternalSyntheticLambda1 v38 = new ShortcutService$$ExternalSyntheticLambda1();
													int v42 = this.mLaunchers.size();
													if ( >= v42) {
														Object v43 = this.mLaunchers.valueAt();
														p1.accept(v43);
														if ( >= v42) {
															int v46 = this.mPackages.size();
															if ( >= v46) {
																Object v47 = this.mPackages.valueAt();
																p1.accept(v47);
																if ( >= v46) {
																	ShortcutService$$ExternalSyntheticLambda2 v49 = new ShortcutService$$ExternalSyntheticLambda2();
																	v6.forAllPackages(v49);
																	ShortcutService$$ExternalSyntheticLambda3 v52 = new ShortcutService$$ExternalSyntheticLambda3();
																	v6.forAllLaunchers(v52);
																	Integer v57 = Integer.valueOf(p1);
																	boolean v58 = this.mDirtyUserIds.contains(v57);
																	if (v58 != 0) {
																		Integer v59 = Integer.valueOf(p1);
																		boolean v60 = this.mDirtyUserIds.add(v59);
																		this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
																		boolean v62 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
																		boolean v64 = this.mShutdown.get();
																		if (v64 == 0) {
																			Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
																			if (caughtException != 0) {
																				this.mWtfCount = (this.mWtfCount + 1);
																				Exception v69 = new Exception("Last failure was logged here:");
																				this.mLastWtfStacktrace = v69;
																				Trace.traceEnd(524288);
																				ByteArrayOutputStream v73 = new ByteArrayOutputStream(32768);
																				if (1 == 0) {
																					TypedXmlSerializer v76 = Xml.newFastSerializer();
																					String v77 = StandardCharsets.UTF_8.name();
																					v76.setOutput(v73, v77);
																					.startDocument(0, Boolean.TRUE);
																					boolean v81 = ShortcutService.isUserUnlockedL(p1);
																					if (v81 != 0) {
																						if (p1 == this.mLastLockedUser) {
																							ShortcutService.wtf("User still locked");
																							this.mLastLockedUser = p1;
																							Object v83 = this.mUsers.get(p1);
																							if (v83 != 0) {
																								ShortcutUser v84 = ShortcutService.loadUserLocked(p1);
																								if (v84 != 0) {
																									ShortcutUser v85 = new ShortcutUser(ShortcutService,p1);
																									this.mUsers.put(p1, );
																									ShortcutService.checkPackageChanges(p1);
																									ShortcutUser v80 = ;
																									XmlSerializer v90 = .startTag(0, "user");
																									if (p3 != 0) {
																										ShortcutService.writeAttr(, "locales", this.mKnownLocales);
																										ShortcutService.writeAttr(, "last-app-scan-time2", this.mLastAppScanTime);
																										ShortcutService.writeAttr(, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
																										ShortcutService.writeAttr(, "restore-from-fp", this.mRestoreFromOsFingerprint);
																										if (p3 != 0) {
																											File v95 = this.mService.injectUserDataPath(this.mUserId);
																											File v96 = new File(v95,"packages");
																											boolean v98 = FileUtils.deleteContents(v96);
																											File v99 = new File(v95,"launchers");
																											boolean v101 = FileUtils.deleteContents(v99);
																											int v102 = this.mLaunchers.size();
																											if ( >= v102) {
																												Object v103 = this.mLaunchers.valueAt();
																												ShortcutUser.saveShortcutPackageItem(, v103, p3);
																												if ( >= v102) {
																													int v105 = this.mPackages.size();
																													if ( >= v105) {
																														Object v106 = this.mPackages.valueAt();
																														ShortcutUser.saveShortcutPackageItem(, v106, p3);
																														if ( >= v105) {
																															XmlSerializer v108 = .endTag(0, "user");
																															.endDocument();
																															v73.flush();
																															byte[] v111 = v73.toByteArray();
																															ShortcutDumpFiles$$ExternalSyntheticLambda0 v113 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v111);
																															File v116 = this.mService.getDumpPath();
																															boolean v117 = v116.mkdirs();
																															boolean v118 = v116.exists();
																															if (v118 != 0) {
																																StringBuilder v119 = new StringBuilder();
																																boolean v115 = 0;
																																boolean v112 = v115;
																																return v111;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p1);
		if (v5 != 0) {
			boolean v8 = this.mUnlockedUsers.get(p1);
			if (v8 == 0) {
				boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v7 = v9;
				if (v7 != 0) {
					if (p1 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p1;
						Object v12 = this.mUsers.get(p1);
						if (v12 != 0) {
							File v14 = ShortcutService.getUserFile(p1);
							AtomicFile v15 = new AtomicFile(v14);
							FileInputStream v17 = v15.openRead();
							ShortcutUser v18 = ShortcutService.loadUserInternal(p1, v17, 0);
							IoUtils.closeQuietly(v17);
							ShortcutUser v13 = v18;
							if (v13 != 0) {
								ShortcutUser v20 = new ShortcutUser(ShortcutService,p1);
								this.mUsers.put(p1, );
								boolean v24 = ShortcutService.injectIsSafeModeEnabled();
								if (v24 == 0) {
									long v25 = ShortcutService.getStatStartTime();
									ArrayList v26 = new ArrayList();
									ShortcutUser v28 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v29 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v26);
									v28.forAllPackageItems(v29);
									int v32 = v26.size();
									if (v32 <= 0) {
										int v33 = v26.size();
										if ( < 0) {
											Object v34 = v26.get();
											ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p1, ShortcutUser$PackageWithUser.userId, 0);
											if ( < 0) {
												long v36 = v28.getLastAppScanTime();
												ShortcutService.rescanUpdatedPackagesLocked(p1, v36);
												ShortcutService.logDurationStat(8, v25);
												ShortcutService.verifyStates();
												ShortcutUser v6 = ;
												if (v6 != 0) {
													ShortcutService$$ExternalSyntheticLambda1 v40 = new ShortcutService$$ExternalSyntheticLambda1();
													int v44 = this.mLaunchers.size();
													if ( >= v44) {
														Object v45 = this.mLaunchers.valueAt();
														p1.accept(v45);
														if ( >= v44) {
															int v48 = this.mPackages.size();
															if ( >= v48) {
																Object v49 = this.mPackages.valueAt();
																p1.accept(v49);
																if ( >= v48) {
																	ShortcutService$$ExternalSyntheticLambda2 v51 = new ShortcutService$$ExternalSyntheticLambda2();
																	v6.forAllPackages(v51);
																	ShortcutService$$ExternalSyntheticLambda3 v54 = new ShortcutService$$ExternalSyntheticLambda3();
																	v6.forAllLaunchers(v54);
																	Integer v59 = Integer.valueOf(p1);
																	boolean v60 = this.mDirtyUserIds.contains(v59);
																	if (v60 != 0) {
																		Integer v61 = Integer.valueOf(p1);
																		boolean v62 = this.mDirtyUserIds.add(v61);
																		this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
																		boolean v64 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
																		boolean v66 = this.mShutdown.get();
																		if (v66 == 0) {
																			Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
																			if (caughtException != 0) {
																				this.mWtfCount = (this.mWtfCount + 1);
																				Exception v71 = new Exception("Last failure was logged here:");
																				this.mLastWtfStacktrace = v71;
																				Trace.traceEnd(524288);
																				ByteArrayOutputStream v75 = new ByteArrayOutputStream(32768);
																				if (1 == 0) {
																					TypedXmlSerializer v78 = Xml.resolveSerializer(v75);
																					.startDocument(0, Boolean.TRUE);
																					boolean v81 = ShortcutService.isUserUnlockedL(p1);
																					if (v81 != 0) {
																						if (p1 == this.mLastLockedUser) {
																							ShortcutService.wtf("User still locked");
																							this.mLastLockedUser = p1;
																							Object v83 = this.mUsers.get(p1);
																							if (v83 != 0) {
																								ShortcutUser v84 = ShortcutService.loadUserLocked(p1);
																								if (v84 != 0) {
																									ShortcutUser v85 = new ShortcutUser(ShortcutService,p1);
																									this.mUsers.put(p1, );
																									ShortcutService.checkPackageChanges(p1);
																									ShortcutUser v80 = ;
																									XmlSerializer v90 = .startTag(0, "user");
																									if (p3 != 0) {
																										ShortcutService.writeAttr(, "locales", this.mKnownLocales);
																										ShortcutService.writeAttr(, "last-app-scan-time2", this.mLastAppScanTime);
																										ShortcutService.writeAttr(, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
																										ShortcutService.writeAttr(, "restore-from-fp", this.mRestoreFromOsFingerprint);
																										if (p3 != 0) {
																											File v95 = this.mService.injectUserDataPath(this.mUserId);
																											File v96 = new File(v95,"packages");
																											boolean v98 = FileUtils.deleteContents(v96);
																											File v99 = new File(v95,"launchers");
																											boolean v101 = FileUtils.deleteContents(v99);
																											int v102 = this.mLaunchers.size();
																											if ( >= v102) {
																												Object v103 = this.mLaunchers.valueAt();
																												ShortcutUser.saveShortcutPackageItem(, v103, p3);
																												if ( >= v102) {
																													int v105 = this.mPackages.size();
																													if ( >= v105) {
																														Object v106 = this.mPackages.valueAt();
																														ShortcutUser.saveShortcutPackageItem(, v106, p3);
																														if ( >= v105) {
																															XmlSerializer v108 = .endTag(0, "user");
																															.endDocument();
																															v75.flush();
																															byte[] v111 = v75.toByteArray();
																															ShortcutDumpFiles$$ExternalSyntheticLambda0 v113 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v111);
																															File v116 = this.mService.getDumpPath();
																															boolean v117 = v116.mkdirs();
																															boolean v118 = v116.exists();
																															if (v118 != 0) {
																																StringBuilder v119 = new StringBuilder();
																																boolean v115 = 0;
																																boolean v112 = v115;
																																return v111;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ShortcutUser v10 = ShortcutService.loadUserLocked(p1);\nShortcutUser v11 = new ShortcutUser(ShortcutService,p1);\nthis.mUsers.put(p1, );\nByteArrayOutputStream v75 = new ByteArrayOutputStream(32768);\nbyte[] v113 = v75.toByteArray();\nreturn v113;', 'ShortcutUser v3 = p0.getUserShortcutsLocked(p1);\nv3.forAllPackageItems(v4);\nv3.forAllPackages(v7);\nv3.forAllLaunchers(v10);\nByteArrayOutputStream v15 = new ByteArrayOutputStream(32768);\np0.saveUserInternalLocked(p1, v15, 1);\nbyte[] v18 = v15.toByteArray();\nreturn v18;', 'ShortcutUser v46 = ShortcutService.getUserShortcutsLocked(p1);\nv46.saveToXml(, 1);\nByteArrayOutputStream v39 = new ByteArrayOutputStream(32768);\nbyte[] v50 = v39.toByteArray();\nreturn v50;']

The method getBackupPayload has the following similar APIs:

- API Name: applyRestore([BI)V with Similarity Score: 0.8172004222869873
  - Access Control Level: SYS_OR_SIG and the following code:
ByteArrayInputStream v24 = new ByteArrayInputStream(p1);
TypedXmlPullParser v27 = Xml.newFastPullParser();
String v28 = StandardCharsets.UTF_8.name();
v27.setInput(v24, v28);

