This is path 1 for the API with depth 2:
public boolean hasShareTargets(String p1, String p2, int p3){
	boolean v5 = this.mUnlockedUsers.get(p1);
	if (v5 == 0) {
		boolean v4 = 1;
		if (v4 == 0) {
			boolean v8 = ShortcutService.isUserUnlockedL(p2);
			if (v8 != 0) {
				if (p2 == this.mLastLockedUser) {
					ShortcutService.wtf("User still locked");
					this.mLastLockedUser = p2;
					Object v10 = this.mUsers.get(p2);
					if (v10 != 0) {
						ShortcutUser v11 = ShortcutService.loadUserLocked(p2);
						if (v11 != 0) {
							ShortcutUser v12 = new ShortcutUser(ShortcutService,p2);
							this.mUsers.put(p2, );
							ShortcutService.checkPackageChanges(p2);
							ShortcutUser v7 = ;
							ShortcutPackage v17 = ShortcutUser.getPackageShortcutsIfExists(p1);
							if (v17 != 0) {
								ShortcutPackage v18 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
								Object v20 = this.mPackages.put(p1, v18);
								ShortcutPackage v16 = ;
								ShortcutPackage v6 = v16;
								boolean v21 = v6.hasShareTargets();
								return v21;
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public boolean hasShareTargets(String p1, String p2, int p3){
	boolean v4 = ShortcutService.isUserUnlockedL(p3);
	if (v4 == 0) {
		ShortcutUser v6 = ShortcutService.getUserShortcutsLocked(p3);
		ShortcutPackage v7 = v6.getPackageShortcuts(p2);
		ShortcutPackage v5 = v7;
		boolean v9 = this.mShareTargets.isEmpty();
		if (v9 != 0) {
			boolean v8 = ;
			return v8;
		}
	}
}


This is path 3 for the API with depth 0:
public boolean hasShareTargets(String p1, String p2, int p3){
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsLocked(p2, p3);
	boolean v5 = v4.hasShareTargets();
	return v5;
}
