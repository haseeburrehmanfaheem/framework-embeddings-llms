The method disableShortcuts has the following code snippet:

This is path 1 for the API with depth 2:
public void disableShortcuts(String p1, List p2, CharSequence p3, int p4, int p5){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p2);
				if (v22 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v24 = this.mUsers.get(p2);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p2);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v21 = ;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = ;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									int v40 = p2.size();
									if ( < 0) {
										Object v41 = p2.get();
										ShortcutInfo v43 = ShortcutPackage.findShortcutById(v41);
										ShortcutPackage.ensureNotImmutable(v43, p2);
										if ( < 0) {
											if (p3 != 0) {
												int v45 = p2.size();
												if ( < 0) {
													Object v46 = p2.get();
													CharSequence v47 = Preconditions.checkStringNotEmpty(v46);
													if (p1 != 0) {
														Object v50 = this.mShortcuts.get(p1);
														ShortcutInfo v49 = v50;
														if (v49 == 0) {
															boolean v52 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
															boolean v51 = (v52 ^ 1);
															if (v51 == 0) {
																boolean v48 = ;
																if (v48 != 0) {
																	if (p6 == 0) {
																		if (1 != ) {
																			StringBuilder v55 = new StringBuilder();
																			StringBuilder v57 = v55.append("disable and disabledReason disagree: ");
																			StringBuilder v58 = v55.append(1);
																			StringBuilder v59 = v55.append(" vs ");
																			StringBuilder v60 = v55.append(p6);
																			String v61 = v55.toString();
																			Preconditions.checkState(, v61);
																			ShortcutInfo v63 = ShortcutPackage.findShortcutById(p1);
																			if (v63 == 0) {
																				boolean v64 = v63.isEnabled();
																				if (v64 != 0) {
																					if (p5 == 0) {
																						boolean v65 = v63.isVisibleToPublisher();
																						if (v65 != 0) {
																							if (p4 != 0) {
																								ShortcutPackage.ensureNotImmutable(v63, 1);
																								if (0 != 0) {
																									String v67 = new String(1);
																									ShortcutPackage.removeShortcutAsync(v67);
																									boolean v69 = v63.isPinned();
																									if (v69 != 0) {
																										boolean v70 = v63.isCached();
																										if (v70 == 0) {
																											String v71 = v63.getId();
																											ShortcutPackage$$ExternalSyntheticLambda38 v72 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,1,p6);
																											ShortcutPackage.mutateShortcut(v71, v63, v72);
																											ShortcutInfo v54 = 0;
																											ShortcutPackage$$ExternalSyntheticLambda6 v75 = new ShortcutPackage$$ExternalSyntheticLambda6(ShortcutPackage,,p4);
																											Object v78 = Objects.requireNonNull(p1);
																											Object v79 = Objects.requireNonNull(v75);
																											if (0 == 0) {
																												v75.accept(0);
																												ShortcutInfo v81 = ShortcutPackage.findShortcutById(p1);
																												if (v81 != 0) {
																													v75.accept(v81);
																													ShortcutInfo v83 = new ShortcutInfo(1);
																													ShortcutPackage.saveShortcut(v83);
																													ShortcutInfo v53 = v54;
																													if (v53 != 0) {
																														if ( != 0) {
																															ArrayList v85 = new ArrayList(1);
																															ShortcutInfo v87 = v20.findShortcutById(v47);
																															boolean v88 = .add(v87);
																															if ( < 0) {
																																long v91 = System.currentTimeMillis();
																																long v90 = v91;
																																ShortcutPackage$$ExternalSyntheticLambda4 v92 = new ShortcutPackage$$ExternalSyntheticLambda4(v90);
																																int v95 = this.mShortcuts.size();
																																if ( < 0) {
																																	Object v96 = this.mShortcuts.valueAt();
																																	v92.accept(v96);
																																	if ( < 0) {
																																		ArrayMap v99 = new ArrayMap();
																																		ShortcutPackage$$ExternalSyntheticLambda40 v101 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v99);
																																		ShortcutPackage.forEachShortcut(v101);
																																		ArrayMap v98 = v99;
																																		int v104 = v98.size();
																																		if ( < 0) {
																																			Object v105 = v98.valueAt();
																																			Collections.sort(v105, this.mShortcutRankComparator);
																																			int v107 = v105.size();
																																			if ( >= v107) {
																																				Object v108 = v105.get();
																																				boolean v110 = ShortcutInfo.isDeclaredInManifest();
																																				boolean v109 = v110;
																																				if (v109 == 0) {
																																					boolean v112 = ShortcutInfo.hasFlags(1);
																																					boolean v111 = v112;
																																					if (v111 != 0) {
																																						int v113 = this.mRank;
																																						if (v113 == ) {
																																							String v114 = this.mId;
																																							ShortcutPackage$$ExternalSyntheticLambda5 v115 = new ShortcutPackage$$ExternalSyntheticLambda5(v90,);
																																							Object v118 = Objects.requireNonNull(v114);
																																							Object v119 = Objects.requireNonNull(v115);
																																							if (v108 == 0) {
																																								v115.accept(v108);
																																								ShortcutInfo v121 = ShortcutPackage.findShortcutById(v114);
																																								if (v121 != 0) {
																																									v115.accept(v121);
																																									ShortcutInfo v123 = new ShortcutInfo(1);
																																									ShortcutPackage.saveShortcut(v123);
																																									if ( >= v107) {
																																										if ( < 0) {
																																											Object v126 = Objects.requireNonNull(v20);
																																											String v127 = this.mPackageName;
																																											int v128 = this.mPackageUserId;
																																											ShortcutService$$ExternalSyntheticLambda28 v130 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v128,v127);
																																											Runnable v129 = v130;
																																											Object v133 = Objects.requireNonNull(p1);
																																											Object v134 = Objects.requireNonNull(v129);
																																											this.mHandler.removeCallbacksAndMessages(p1);
																																											boolean v136 = this.mHandler.postDelayed(v129, p1, 100);
																																											List v138 = ShortcutService.removeNonKeyFields(p2);
																																											List v139 = ShortcutService.removeNonKeyFields(p3);
																																											UserHandle v140 = UserHandle.of(v128);
																																											ShortcutService$$ExternalSyntheticLambda26 v141 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v128,v138,v127,v140,v139);
																																											ShortcutService.injectPostToHandler(v141);
																																											ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																											boolean v147 = 0;
																																											if (v147 == 0) {
																																												ShortcutService$$ExternalSyntheticLambda25 v149 = new ShortcutService$$ExternalSyntheticLambda25();
																																												ShortcutService.forEachLoadedUserLocked(v149);
																																												return;
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void disableShortcuts(String p1, List p2, CharSequence p3, int p4, int p5){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v17 = 1;
			if (v17 == 0) {
				boolean v21 = ShortcutService.isUserUnlockedL(p2);
				if (v21 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v23 = this.mUsers.get(p2);
						if (v23 != 0) {
							ShortcutUser v24 = ShortcutService.loadUserLocked(p2);
							if (v24 != 0) {
								ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v20 = ;
								ShortcutPackage v30 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v30 != 0) {
									ShortcutPackage v31 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v33 = this.mPackages.put(p1, v31);
									ShortcutPackage v29 = ;
									ShortcutUser v34 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v19 = v29;
									int v39 = p2.size();
									if ( < 0) {
										Object v40 = p2.get();
										ShortcutInfo v42 = ShortcutPackage.findShortcutById(v40);
										ShortcutPackage.ensureNotImmutable(v42, p2);
										if ( < 0) {
											if (p3 != 0) {
												int v44 = p2.size();
												if ( < 0) {
													Object v45 = p2.get();
													CharSequence v46 = Preconditions.checkStringNotEmpty(v45);
													if (p1 != 0) {
														Object v49 = this.mShortcuts.get(p1);
														ShortcutInfo v48 = v49;
														if (v48 == 0) {
															boolean v51 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
															boolean v50 = (v51 ^ 1);
															if (v50 == 0) {
																boolean v47 = ;
																if (v47 != 0) {
																	if (p6 == 0) {
																		if (1 != ) {
																			StringBuilder v54 = new StringBuilder();
																			StringBuilder v56 = v54.append("disable and disabledReason disagree: ");
																			StringBuilder v57 = v54.append(1);
																			StringBuilder v58 = v54.append(" vs ");
																			StringBuilder v59 = v54.append(p6);
																			String v60 = v54.toString();
																			Preconditions.checkState(, v60);
																			ShortcutInfo v62 = ShortcutPackage.findShortcutById(p1);
																			if (v62 == 0) {
																				boolean v63 = v62.isEnabled();
																				if (v63 != 0) {
																					if (p5 == 0) {
																						boolean v64 = v62.isVisibleToPublisher();
																						if (v64 != 0) {
																							if (p4 != 0) {
																								ShortcutPackage.ensureNotImmutable(v62, 1);
																								if (0 != 0) {
																									String v66 = new String(1);
																									ShortcutPackage.removeShortcutAsync(v66);
																									boolean v68 = v62.isPinned();
																									if (v68 != 0) {
																										boolean v69 = v62.isCached();
																										if (v69 == 0) {
																											String v70 = v62.getId();
																											ShortcutPackage$$ExternalSyntheticLambda38 v71 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,1,p6);
																											ShortcutPackage.mutateShortcut(v70, v62, v71);
																											ShortcutInfo v53 = 0;
																											ShortcutPackage$$ExternalSyntheticLambda6 v74 = new ShortcutPackage$$ExternalSyntheticLambda6(ShortcutPackage,,p4);
																											Object v77 = Objects.requireNonNull(p1);
																											Object v78 = Objects.requireNonNull(v74);
																											if (0 == 0) {
																												v74.accept(0);
																												ShortcutInfo v80 = ShortcutPackage.findShortcutById(p1);
																												if (v80 != 0) {
																													v74.accept(v80);
																													ShortcutInfo v82 = new ShortcutInfo(1);
																													ShortcutPackage.saveShortcut(v82);
																													ShortcutInfo v52 = v53;
																													if (v52 != 0) {
																														if ( != 0) {
																															ArrayList v84 = new ArrayList(1);
																															ShortcutInfo v86 = v19.findShortcutById(v46);
																															boolean v87 = .add(v86);
																															if ( < 0) {
																																long v90 = System.currentTimeMillis();
																																long v89 = v90;
																																ShortcutPackage$$ExternalSyntheticLambda4 v91 = new ShortcutPackage$$ExternalSyntheticLambda4(v89);
																																int v94 = this.mShortcuts.size();
																																if ( < 0) {
																																	Object v95 = this.mShortcuts.valueAt();
																																	v91.accept(v95);
																																	if ( < 0) {
																																		ArrayMap v98 = new ArrayMap();
																																		ShortcutPackage$$ExternalSyntheticLambda40 v100 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v98);
																																		ShortcutPackage.forEachShortcut(v100);
																																		ArrayMap v97 = v98;
																																		int v103 = v97.size();
																																		if ( < 0) {
																																			Object v104 = v97.valueAt();
																																			Collections.sort(v104, this.mShortcutRankComparator);
																																			int v106 = v104.size();
																																			if ( >= v106) {
																																				Object v107 = v104.get();
																																				boolean v109 = ShortcutInfo.isDeclaredInManifest();
																																				boolean v108 = v109;
																																				if (v108 == 0) {
																																					boolean v111 = ShortcutInfo.hasFlags(1);
																																					boolean v110 = v111;
																																					if (v110 != 0) {
																																						int v112 = this.mRank;
																																						if (v112 == ) {
																																							String v113 = this.mId;
																																							ShortcutPackage$$ExternalSyntheticLambda5 v114 = new ShortcutPackage$$ExternalSyntheticLambda5(v89,);
																																							Object v117 = Objects.requireNonNull(v113);
																																							Object v118 = Objects.requireNonNull(v114);
																																							if (v107 == 0) {
																																								v114.accept(v107);
																																								ShortcutInfo v120 = ShortcutPackage.findShortcutById(v113);
																																								if (v120 != 0) {
																																									v114.accept(v120);
																																									ShortcutInfo v122 = new ShortcutInfo(1);
																																									ShortcutPackage.saveShortcut(v122);
																																									if ( >= v106) {
																																										if ( < 0) {
																																											Object v125 = Objects.requireNonNull(v19);
																																											String v126 = this.mPackageName;
																																											int v127 = this.mPackageUserId;
																																											ShortcutService$$ExternalSyntheticLambda28 v129 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v127,v126);
																																											Runnable v128 = v129;
																																											Object v132 = Objects.requireNonNull(p1);
																																											Object v133 = Objects.requireNonNull(v128);
																																											this.mHandler.removeCallbacksAndMessages(p1);
																																											boolean v135 = this.mHandler.postDelayed(v128, p1, 100);
																																											List v137 = ShortcutService.removeNonKeyFields(p2);
																																											List v138 = ShortcutService.removeNonKeyFields(p3);
																																											UserHandle v139 = UserHandle.of(v127);
																																											ShortcutService$$ExternalSyntheticLambda26 v140 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v127,v137,v126,v139,v138);
																																											ShortcutService.injectPostToHandler(v140);
																																											ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																											boolean v146 = 0;
																																											if (v146 == 0) {
																																												ShortcutService$$ExternalSyntheticLambda25 v148 = new ShortcutService$$ExternalSyntheticLambda25();
																																												ShortcutService.forEachLoadedUserLocked(v148);
																																												return;
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void disableShortcuts(String p1, List p2, CharSequence p3, int p4, int p5){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = v8;
	if (v6 != v4) {
		ApplicationInfo v11 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v12 = ShortcutService.isEphemeralApp(v11);
		boolean v10 = v12;
		Preconditions.checkState((v10 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v14 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v17 = this.mUnlockedUsers.get(p1);
		if (v17 == 0) {
			boolean v18 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v16 = v18;
			if (v16 == 0) {
				boolean v21 = ShortcutService.isUserUnlockedL(p2);
				if (v21 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v23 = this.mUsers.get(p2);
						if (v23 != 0) {
							ShortcutUser v24 = ShortcutService.loadUserLocked(p2);
							if (v24 != 0) {
								ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v20 = ;
								ShortcutPackage v30 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v30 != 0) {
									ShortcutPackage v31 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v33 = this.mPackages.put(p1, v31);
									ShortcutPackage v29 = ;
									ShortcutUser v34 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v19 = v29;
									int v39 = p2.size();
									if ( < 0) {
										Object v40 = p2.get();
										ShortcutInfo v42 = ShortcutPackage.findShortcutById(v40);
										ShortcutPackage.ensureNotImmutable(v42, p2);
										if ( < 0) {
											if (p3 != 0) {
												int v44 = p2.size();
												if ( < 0) {
													Object v45 = p2.get();
													CharSequence v46 = Preconditions.checkStringNotEmpty(v45);
													if (p1 != 0) {
														Object v49 = this.mShortcuts.get(p1);
														ShortcutInfo v48 = v49;
														if (v48 == 0) {
															boolean v51 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
															boolean v50 = (v51 ^ 1);
															if (v50 == 0) {
																boolean v47 = ;
																if (v47 != 0) {
																	if (p6 == 0) {
																		if (1 != ) {
																			StringBuilder v54 = new StringBuilder();
																			StringBuilder v56 = v54.append("disable and disabledReason disagree: ");
																			StringBuilder v57 = v54.append(1);
																			StringBuilder v58 = v54.append(" vs ");
																			StringBuilder v59 = v54.append(p6);
																			String v60 = v54.toString();
																			Preconditions.checkState(, v60);
																			ShortcutInfo v62 = ShortcutPackage.findShortcutById(p1);
																			if (v62 == 0) {
																				boolean v63 = v62.isEnabled();
																				if (v63 != 0) {
																					if (p5 == 0) {
																						boolean v64 = v62.isVisibleToPublisher();
																						if (v64 != 0) {
																							if (p4 != 0) {
																								ShortcutPackage.ensureNotImmutable(v62, 1);
																								if (0 != 0) {
																									String v66 = new String(1);
																									ShortcutPackage.removeShortcutAsync(v66);
																									boolean v68 = v62.isPinned();
																									if (v68 != 0) {
																										boolean v69 = v62.isCached();
																										if (v69 == 0) {
																											String v70 = v62.getId();
																											ShortcutPackage$$ExternalSyntheticLambda38 v71 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,1,p6);
																											ShortcutPackage.mutateShortcut(v70, v62, v71);
																											ShortcutInfo v53 = 0;
																											ShortcutPackage$$ExternalSyntheticLambda6 v74 = new ShortcutPackage$$ExternalSyntheticLambda6(ShortcutPackage,,p4);
																											Object v77 = Objects.requireNonNull(p1);
																											Object v78 = Objects.requireNonNull(v74);
																											if (0 == 0) {
																												v74.accept(0);
																												ShortcutInfo v80 = ShortcutPackage.findShortcutById(p1);
																												if (v80 != 0) {
																													v74.accept(v80);
																													ShortcutInfo v82 = new ShortcutInfo(1);
																													ShortcutPackage.saveShortcut(v82);
																													ShortcutInfo v52 = v53;
																													if (v52 != 0) {
																														if ( != 0) {
																															ArrayList v84 = new ArrayList(1);
																															ShortcutInfo v86 = v19.findShortcutById(v46);
																															boolean v87 = .add(v86);
																															if ( < 0) {
																																long v90 = System.currentTimeMillis();
																																long v89 = v90;
																																ShortcutPackage$$ExternalSyntheticLambda4 v91 = new ShortcutPackage$$ExternalSyntheticLambda4(v89);
																																int v94 = this.mShortcuts.size();
																																if ( < 0) {
																																	Object v95 = this.mShortcuts.valueAt();
																																	v91.accept(v95);
																																	if ( < 0) {
																																		ArrayMap v98 = new ArrayMap();
																																		ShortcutPackage$$ExternalSyntheticLambda40 v100 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v98);
																																		ShortcutPackage.forEachShortcut(v100);
																																		ArrayMap v97 = v98;
																																		int v103 = v97.size();
																																		if ( < 0) {
																																			Object v104 = v97.valueAt();
																																			Collections.sort(v104, this.mShortcutRankComparator);
																																			int v106 = v104.size();
																																			if ( >= v106) {
																																				Object v107 = v104.get();
																																				boolean v109 = ShortcutInfo.isDeclaredInManifest();
																																				boolean v108 = v109;
																																				if (v108 == 0) {
																																					boolean v111 = ShortcutInfo.hasFlags(1);
																																					boolean v110 = v111;
																																					if (v110 != 0) {
																																						int v112 = this.mRank;
																																						if (v112 == ) {
																																							String v113 = this.mId;
																																							ShortcutPackage$$ExternalSyntheticLambda5 v114 = new ShortcutPackage$$ExternalSyntheticLambda5(v89,);
																																							Object v117 = Objects.requireNonNull(v113);
																																							Object v118 = Objects.requireNonNull(v114);
																																							if (v107 == 0) {
																																								v114.accept(v107);
																																								ShortcutInfo v120 = ShortcutPackage.findShortcutById(v113);
																																								if (v120 != 0) {
																																									v114.accept(v120);
																																									ShortcutInfo v122 = new ShortcutInfo(1);
																																									ShortcutPackage.saveShortcut(v122);
																																									if ( >= v106) {
																																										if ( < 0) {
																																											Object v125 = Objects.requireNonNull(v19);
																																											String v126 = this.mPackageName;
																																											int v127 = this.mPackageUserId;
																																											ShortcutService$$ExternalSyntheticLambda28 v129 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v127,v126);
																																											Runnable v128 = v129;
																																											Object v132 = Objects.requireNonNull(p1);
																																											Object v133 = Objects.requireNonNull(v128);
																																											this.mHandler.removeCallbacksAndMessages(p1);
																																											boolean v135 = this.mHandler.postDelayed(v128, p1, 100);
																																											List v137 = ShortcutService.removeNonKeyFields(p2);
																																											List v138 = ShortcutService.removeNonKeyFields(p3);
																																											UserHandle v139 = UserHandle.of(v127);
																																											ShortcutService$$ExternalSyntheticLambda26 v140 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v127,v137,v126,v139,v138);
																																											ShortcutService.injectPostToHandler(v140);
																																											ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																											boolean v146 = 0;
																																											if (v146 == 0) {
																																												ShortcutService$$ExternalSyntheticLambda25 v148 = new ShortcutService$$ExternalSyntheticLambda25();
																																												ShortcutService.forEachLoadedUserLocked(v148);
																																												return;
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['p0.verifyCaller(p1, p5);\nObject v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");\nShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5);', 'v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);\nboolean v9 = v4.isShortcutExistsAndVisibleToPublisher(v8);']

The method disableShortcuts has the following similar APIs:

- API Name: enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.9652961492538452
  - Access Control Level: SYS_OR_SIG and the following code:
p0.verifyCaller(p1, p3);
Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
p0.throwIfUserLockedL(p3);
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);

- API Name: pushDynamicShortcut(Ljava/lang/String;Landroid/content/pm/ShortcutInfo;I)V with Similarity Score: 0.9184985160827637
  - Access Control Level: SYS_OR_SIG and the following code:
p0.verifyCaller(p1, p3);
ArrayList v3 = new ArrayList();
ShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
String v7 = p2.getId();
v6.ensureNotImmutable(v7, 1);

