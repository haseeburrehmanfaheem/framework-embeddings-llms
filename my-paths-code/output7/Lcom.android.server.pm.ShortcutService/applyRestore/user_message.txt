This is path 1 for the API with depth 2:
public void applyRestore(byte[] p1, int p2){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p2);
		if (v5 != 0) {
			ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);
			boolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);
			ShortcutDumpFiles$$ExternalSyntheticLambda0 v10 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p1);
			File v13 = this.mService.getDumpPath();
			boolean v14 = v13.mkdirs();
			boolean v15 = v13.exists();
			if (v15 != 0) {
				StringBuilder v16 = new StringBuilder();
				boolean v12 = 0;
				boolean v9 = v12;
				ByteArrayInputStream v24 = new ByteArrayInputStream(p1);
				if (1 == 0) {
					TypedXmlPullParser v27 = Xml.newFastPullParser();
					String v28 = StandardCharsets.UTF_8.name();
					v27.setInput(v24, v28);
					int v30 = .next();
					if (v30 == 1) {
						if (v30 == 2) {
							int v31 = .getDepth();
							String v32 = .getName();
							if (v31 != 1) {
								boolean v33 = "user".equals(v32);
								if (v33 == 0) {
									ShortcutUser v35 = new ShortcutUser(p0,p1);
									String v37 = ShortcutService.parseStringAttribute(, "locales");
									this.mKnownLocales = v37;
									long v38 = ShortcutService.parseLongAttribute(, "last-app-scan-time2");
									long v39 = p0.injectCurrentTimeMillis();
									if ((v38 < v39) >= 0) {
										this.mLastAppScanTime = ;
										String v40 = ShortcutService.parseStringAttribute(, "last-app-scan-fp");
										this.mLastAppScanOsFingerprint = v40;
										String v41 = ShortcutService.parseStringAttribute(, "restore-from-fp");
										this.mRestoreFromOsFingerprint = v41;
										int v42 = .getDepth();
										int v43 = .next();
										if (v43 == 1) {
											if (v43 != 3) {
												int v44 = .getDepth();
												if (v44 <= v42) {
													if (v43 == 2) {
														int v45 = .getDepth();
														String v46 = .getName();
														if (v45 != (v42 + 1)) {
															int v47 = v46.hashCode();
															if (v47 == -1146595445) {
																if (v47 == -807062458) {
																	if ( == 0) {
																		if ( == 1) {
																			ShortcutService.warnForInvalidTag(v45, v46);
																			int v49 = .next();
																			if (v49 == 1) {
																				if (v49 != 3) {
																					int v50 = .getDepth();
																					if (v50 <= v42) {
																						if ( == 0) {
																							p0.scheduleSaveUser(p1);
																							ShortcutUser v34 = v35;
																							int v52 = .next();
																							if (v52 == 1) {
																								ShortcutUser v26 = ;
																								ShortcutService$$ExternalSyntheticLambda7 v53 = new ShortcutService$$ExternalSyntheticLambda7(p0);
																								boolean v55 = this.mShortcutDumpFiles.save("restore-2.txt", v53);
																								boolean v58 = this.mUnlockedUsers.get(p1);
																								if (v58 == 0) {
																									boolean v59 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
																									boolean v57 = v59;
																									if (v57 != 0) {
																										if (p2 == this.mLastLockedUser) {
																											ShortcutService.wtf("User still locked", 0);
																											this.mLastLockedUser = p2;
																											Object v62 = this.mUsers.get(p2);
																											if (v62 != 0) {
																												File v64 = ShortcutService.getUserFile(p1);
																												AtomicFile v65 = new AtomicFile(v64);
																												FileInputStream v67 = v65.openRead();
																												ShortcutUser v68 = ShortcutService.loadUserInternal(p1, v67, 0);
																												IoUtils.closeQuietly(v67);
																												ShortcutUser v63 = v68;
																												if (v63 != 0) {
																													ShortcutUser v70 = new ShortcutUser(ShortcutService,p2);
																													this.mUsers.put(p2, );
																													boolean v74 = ShortcutService.injectIsSafeModeEnabled();
																													if (v74 == 0) {
																														long v75 = ShortcutService.getStatStartTime();
																														ArrayList v76 = new ArrayList();
																														ShortcutUser v78 = ShortcutService.getUserShortcutsLocked(p1);
																														ShortcutService$$ExternalSyntheticLambda18 v79 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v76);
																														v78.forAllPackageItems(v79);
																														int v82 = v76.size();
																														if (v82 <= 0) {
																															int v83 = v76.size();
																															if ( < 0) {
																																Object v84 = v76.get();
																																ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p1, ShortcutUser$PackageWithUser.userId, 0);
																																if ( < 0) {
																																	long v86 = v78.getLastAppScanTime();
																																	ShortcutService.rescanUpdatedPackagesLocked(p1, v86);
																																	ShortcutService.logDurationStat(8, v75);
																																	ShortcutService.verifyStates();
																																	ShortcutUser v56 = ;
																																	[I v91 = new [I(1);
																																	[I v92 = new [I(1);
																																	[I v93 = new [I(1);
																																	this.mLaunchers.clear();
																																	ShortcutUser$$ExternalSyntheticLambda3 v95 = new ShortcutUser$$ExternalSyntheticLambda3(ShortcutUser,this.mService,v91);
																																	int v98 = this.mLaunchers.size();
																																	if ( >= v98) {
																																		Object v99 = this.mLaunchers.valueAt();
																																		v95.accept(v99);
																																		if ( >= v98) {
																																			ShortcutUser$$ExternalSyntheticLambda4 v101 = new ShortcutUser$$ExternalSyntheticLambda4(ShortcutUser,this.mService,v92,v93);
																																			int v104 = this.mPackages.size();
																																			if ( >= v104) {
																																				Object v105 = this.mPackages.valueAt();
																																				v101.accept(v105);
																																				if ( >= v104) {
																																					this.mLaunchers.clear();
																																					this.mPackages.clear();
																																					this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
																																					ShortcutService$$ExternalSyntheticLambda7 v119 = new ShortcutService$$ExternalSyntheticLambda7(p0);
																																					boolean v121 = this.mShortcutDumpFiles.save("restore-3.txt", v119);
																																					boolean v124 = ShortcutService.isUserUnlockedL(p1);
																																					if (v124 != 0) {
																																						if (p1 == this.mLastLockedUser) {
																																							ShortcutService.wtf("User still locked");
																																							this.mLastLockedUser = p1;
																																							Object v126 = this.mUsers.get(p1);
																																							if (v126 != 0) {
																																								ShortcutUser v127 = ShortcutService.loadUserLocked(p1);
																																								if (v127 != 0) {
																																									ShortcutUser v128 = new ShortcutUser(ShortcutService,p1);
																																									this.mUsers.put(p1, );
																																									ShortcutService.checkPackageChanges(p1);
																																									ShortcutUser v123 = ;
																																									long v133 = System.currentTimeMillis();
																																									long v132 = v133;
																																									String v134 = Build.FINGERPRINT;
																																									String v135 = this.mLastAppScanOsFingerprint;
																																									boolean v136 = v134.equals(v135);
																																									ShortcutService$$ExternalSyntheticLambda21 v137 = new ShortcutService$$ExternalSyntheticLambda21(ShortcutService,v123,p2);
																																									List v140 = ShortcutService.getInstalledPackages(p1);
																																									int v141 = v140.size();
																																									if ( < 0) {
																																										Object v142 = v140.get();
																																										if ((v136 ^ 1) != 0) {
																																											if ((PackageInfo.lastUpdateTime < p2) < 0) {
																																												v137.accept(PackageInfo.applicationInfo);
																																												if ( < 0) {
																																													this.mLastAppScanTime = v132;
																																													String v145 = Build.FINGERPRINT;
																																													this.mLastAppScanOsFingerprint = v145;
																																													ShortcutService.scheduleSaveInner(p1);
																																													ShortcutService$$ExternalSyntheticLambda7 v149 = new ShortcutService$$ExternalSyntheticLambda7(p0);
																																													boolean v151 = this.mShortcutDumpFiles.save("restore-4.txt", v149);
																																													ShortcutService$$ExternalSyntheticLambda8 v152 = new ShortcutService$$ExternalSyntheticLambda8(p0);
																																													boolean v154 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v152);
																																													File v157 = new File(v158,"shortcuts.xml");
																																													File v158 = ShortcutService.injectUserDataPath(p1);
																																													File v156 = v157;
																																													File v160 = v156.getParentFile();
																																													boolean v161 = v160.mkdirs();
																																													AtomicFile v162 = new AtomicFile(v156);
																																													FileOutputStream v164 = v162.startWrite();
																																													if (0 == 0) {
																																														TypedXmlSerializer v166 = Xml.newFastSerializer();
																																														String v167 = StandardCharsets.UTF_8.name();
																																														v166.setOutput(v164, v167);
																																														.startDocument(0, Boolean.TRUE);
																																														ShortcutUser v170 = ShortcutService.getUserShortcutsLocked(p1);
																																														v170.saveToXml(, 0);
																																														.endDocument();
																																														v164.flush();
																																														v162.finishWrite(v164);
																																														long v176 = ShortcutService.getStatStartTime();
																																														ShortcutUser v177 = ShortcutService.getUserShortcutsLocked(p1);
																																														File v178 = ShortcutService.getUserBitmapFilePath(p1);
																																														File v179 = v178.listFiles();
																																														if (v179 != 0) {
																																															if ( >= v179.length) {
																																																boolean v180 = v179[].isDirectory();
																																																if (v180 != 0) {
																																																	String v181 = v179[].getName();
																																																	boolean v182 = v177.hasPackage(v181);
																																																	if (v182 != 0) {
																																																		ShortcutService.cleanupBitmapsForPackage(p1, v181);
																																																		if ( >= v179.length) {
																																																			ShortcutService.logDurationStat(5, v176);
																																																			boolean v186 = ShortcutService.isUserUnlockedL(p1);
																																																			if (v186 != 0) {
																																																				if (p1 == this.mLastLockedUser) {
																																																					ShortcutService.wtf("User still locked");
																																																					this.mLastLockedUser = p1;
																																																					Object v188 = this.mUsers.get(p1);
																																																					if (v188 != 0) {
																																																						ShortcutUser v189 = ShortcutService.loadUserLocked(p1);
																																																						if (v189 != 0) {
																																																							ShortcutUser v190 = new ShortcutUser(ShortcutService,p1);
																																																							this.mUsers.put(p1, );
																																																							ShortcutService.checkPackageChanges(p1);
																																																							ShortcutUser v185 = ;
																																																							int v195 = this.mPackages.size();
																																																							if ( >= v195) {
																																																								Object v196 = this.mPackages.valueAt();
																																																								boolean v197 = v196.hasShareTargets();
																																																								if (v197 == 0) {
																																																									Object v198 = this.mPackages.valueAt();
																																																									int v199 = v198.getSharingShortcutCount();
																																																									int v200 = this.mPackages.size();
																																																									if ( >= v200) {
																																																										LogMaker v201 = new LogMaker(1717);
																																																										LogMaker v203 = v201.setType(1);
																																																										LogMaker v204 = v203.setSubtype(this.mUserId);
																																																										this.mMetricsLogger.write(v204);
																																																										LogMaker v206 = v201.setType(2);
																																																										LogMaker v207 = v206.setSubtype();
																																																										this.mMetricsLogger.write(v207);
																																																										LogMaker v209 = v201.setType(3);
																																																										LogMaker v210 = v209.setSubtype();
																																																										this.mMetricsLogger.write(v210);
																																																										return;
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void applyRestore(byte[] p1, int p2){
	boolean v2 = ShortcutService.isCallerSystem();
	if (v2 == 0) {
		boolean v4 = this.mUnlockedUsers.get(p2);
		if (v4 == 0) {
			boolean v5 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
			boolean v3 = v5;
			if (v3 != 0) {
				ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);
				boolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);
				ShortcutDumpFiles$$ExternalSyntheticLambda0 v10 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p1);
				boolean v12 = ShortcutDumpFiles.save("restore-1-payload.xml", v10);
				boolean v9 = v12;
				ByteArrayInputStream v13 = new ByteArrayInputStream(p1);
				if (1 == 0) {
					TypedXmlPullParser v16 = Xml.newFastPullParser();
					String v17 = StandardCharsets.UTF_8.name();
					v16.setInput(v13, v17);
					int v19 = .next();
					if (v19 == 1) {
						if (v19 == 2) {
							int v20 = .getDepth();
							String v21 = .getName();
							if (v20 != 1) {
								boolean v22 = "user".equals(v21);
								if (v22 == 0) {
									ShortcutUser v23 = ShortcutUser.loadFromXml(ShortcutService, , p2, 1);
									int v24 = .next();
									if (v24 == 1) {
										ShortcutUser v15 = ;
										ShortcutService$$ExternalSyntheticLambda7 v25 = new ShortcutService$$ExternalSyntheticLambda7(p0);
										boolean v27 = this.mShortcutDumpFiles.save("restore-2.txt", v25);
										boolean v29 = ShortcutService.isUserUnlockedL(p2);
										if (v29 != 0) {
											if (p2 == this.mLastLockedUser) {
												ShortcutService.wtf("User still locked");
												this.mLastLockedUser = p2;
												Object v31 = this.mUsers.get(p2);
												if (v31 != 0) {
													ShortcutUser v32 = ShortcutService.loadUserLocked(p2);
													if (v32 != 0) {
														ShortcutUser v33 = new ShortcutUser(ShortcutService,p2);
														this.mUsers.put(p2, );
														ShortcutService.checkPackageChanges(p2);
														ShortcutUser v28 = ;
														[I v38 = new [I(1);
														[I v39 = new [I(1);
														[I v40 = new [I(1);
														this.mLaunchers.clear();
														ShortcutUser$$ExternalSyntheticLambda3 v42 = new ShortcutUser$$ExternalSyntheticLambda3(ShortcutUser,this.mService,v38);
														v15.forAllLaunchers(v42);
														ShortcutUser$$ExternalSyntheticLambda4 v45 = new ShortcutUser$$ExternalSyntheticLambda4(ShortcutUser,this.mService,v39,v40);
														v15.forAllPackages(v45);
														this.mLaunchers.clear();
														this.mPackages.clear();
														this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
														ShortcutService$$ExternalSyntheticLambda7 v60 = new ShortcutService$$ExternalSyntheticLambda7(p0);
														boolean v62 = this.mShortcutDumpFiles.save("restore-3.txt", v60);
														ShortcutUser v64 = ShortcutService.getUserShortcutsLocked(p2);
														long v65 = ShortcutService.injectCurrentTimeMillis();
														String v66 = ShortcutService.injectBuildFingerprint();
														String v67 = v64.getLastAppScanOsFingerprint();
														boolean v68 = v66.equals(v67);
														ShortcutService$$ExternalSyntheticLambda21 v69 = new ShortcutService$$ExternalSyntheticLambda21(ShortcutService,v64,p2);
														ShortcutService.forUpdatedPackages(p2, 0, (v68 ^ 1), v69);
														v64.setLastAppScanTime(v65);
														String v73 = ShortcutService.injectBuildFingerprint();
														v64.setLastAppScanOsFingerprint(v73);
														ShortcutService.scheduleSaveUser(p2);
														ShortcutService$$ExternalSyntheticLambda7 v76 = new ShortcutService$$ExternalSyntheticLambda7(p0);
														boolean v78 = this.mShortcutDumpFiles.save("restore-4.txt", v76);
														ShortcutService$$ExternalSyntheticLambda8 v79 = new ShortcutService$$ExternalSyntheticLambda8(p0);
														boolean v81 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v79);
														File v83 = ShortcutService.getUserFile(p2);
														File v84 = v83.getParentFile();
														boolean v85 = v84.mkdirs();
														AtomicFile v86 = new AtomicFile(v83);
														FileOutputStream v88 = v86.startWrite();
														ShortcutService.saveUserInternalLocked(p2, v88, 0);
														v86.finishWrite(v88);
														ShortcutService.cleanupDanglingBitmapDirectoriesLocked(p2);
														ShortcutUser v92 = ShortcutService.getUserShortcutsLocked(p2);
														v92.logSharingShortcutStats(this.mMetricsLogger);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void applyRestore(byte[] p1, int p2){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p2);
	if (v2 != 0) {
		ShortcutService$$ExternalSyntheticLambda6 v3 = new ShortcutService$$ExternalSyntheticLambda6(p0);
		boolean v5 = this.mShortcutDumpFiles.save("restore-0-start.txt", v3);
		boolean v6 = this.mShortcutDumpFiles.save("restore-1-payload.xml", p1);
		ByteArrayInputStream v7 = new ByteArrayInputStream(p1);
		ShortcutUser v9 = p0.loadUserInternal(p2, v7, 1);
		ShortcutService$$ExternalSyntheticLambda7 v10 = new ShortcutService$$ExternalSyntheticLambda7(p0);
		boolean v12 = this.mShortcutDumpFiles.save("restore-2.txt", v10);
		ShortcutUser v13 = p0.getUserShortcutsLocked(p2);
		v13.mergeRestoredFile(v9);
		ShortcutService$$ExternalSyntheticLambda7 v15 = new ShortcutService$$ExternalSyntheticLambda7(p0);
		boolean v17 = this.mShortcutDumpFiles.save("restore-3.txt", v15);
		p0.rescanUpdatedPackagesLocked(p2, 0);
		ShortcutService$$ExternalSyntheticLambda7 v19 = new ShortcutService$$ExternalSyntheticLambda7(p0);
		boolean v21 = this.mShortcutDumpFiles.save("restore-4.txt", v19);
		ShortcutService$$ExternalSyntheticLambda8 v22 = new ShortcutService$$ExternalSyntheticLambda8(p0);
		boolean v24 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v22);
		p0.saveUserLocked(p2);
		return;
	}
}
