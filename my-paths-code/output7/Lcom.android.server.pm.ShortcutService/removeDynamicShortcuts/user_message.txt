This is path 1 for the API with depth 2:
public void removeDynamicShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p2);
				if (v22 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v24 = this.mUsers.get(p2);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p2);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v21 = ;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = ;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									int v40 = p2.size();
									if ( < 0) {
										Object v41 = p2.get();
										ShortcutInfo v43 = ShortcutPackage.findShortcutById(v41);
										ShortcutPackage.ensureNotImmutable(v43, p2);
										if ( < 0) {
											int v45 = p2.size();
											if ( < 0) {
												Object v46 = p2.get();
												CharSequence v47 = Preconditions.checkStringNotEmpty(v46);
												if (p1 != 0) {
													Object v50 = this.mShortcuts.get(p1);
													ShortcutInfo v49 = v50;
													if (v49 == 0) {
														boolean v52 = ShortcutInfo.isDisabledForRestoreIssue(this.mDisabledReason);
														boolean v51 = (v52 ^ 1);
														if (v51 == 0) {
															boolean v48 = ;
															if (v48 != 0) {
																if (0 == 0) {
																	if (0 != ) {
																		StringBuilder v55 = new StringBuilder();
																		StringBuilder v57 = v55.append("disable and disabledReason disagree: ");
																		StringBuilder v58 = v55.append(0);
																		StringBuilder v59 = v55.append(" vs ");
																		StringBuilder v60 = v55.append(0);
																		String v61 = v55.toString();
																		Preconditions.checkState(, v61);
																		ShortcutInfo v63 = ShortcutPackage.findShortcutById(p1);
																		if (v63 == 0) {
																			boolean v64 = v63.isEnabled();
																			if (v64 != 0) {
																				if (p2 == 0) {
																					boolean v65 = v63.isVisibleToPublisher();
																					if (v65 != 0) {
																						if (0 != 0) {
																							ShortcutPackage.ensureNotImmutable(v63, 1);
																							if (p3 != 0) {
																								String v67 = new String(1);
																								ShortcutPackage.removeShortcutAsync(v67);
																								boolean v69 = v63.isPinned();
																								if (v69 != 0) {
																									boolean v70 = v63.isCached();
																									if (v70 == 0) {
																										String v71 = v63.getId();
																										ShortcutPackage$$ExternalSyntheticLambda38 v72 = new ShortcutPackage$$ExternalSyntheticLambda38(ShortcutPackage,0,0);
																										ShortcutPackage.mutateShortcut(v71, v63, v72);
																										ShortcutInfo v54 = 0;
																										ShortcutInfo v53 = v54;
																										if (v53 != 0) {
																											if ( != 0) {
																												ArrayList v75 = new ArrayList(1);
																												ShortcutInfo v77 = v20.findShortcutById(v47);
																												boolean v78 = .add(v77);
																												if ( < 0) {
																													long v81 = System.currentTimeMillis();
																													long v80 = v81;
																													ShortcutPackage$$ExternalSyntheticLambda4 v82 = new ShortcutPackage$$ExternalSyntheticLambda4(v80);
																													int v85 = this.mShortcuts.size();
																													if ( < 0) {
																														Object v86 = this.mShortcuts.valueAt();
																														v82.accept(v86);
																														if ( < 0) {
																															ArrayMap v89 = new ArrayMap();
																															ShortcutPackage$$ExternalSyntheticLambda40 v91 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v89);
																															ShortcutPackage.forEachShortcut(v91);
																															ArrayMap v88 = v89;
																															int v94 = v88.size();
																															if ( < 0) {
																																Object v95 = v88.valueAt();
																																Collections.sort(v95, this.mShortcutRankComparator);
																																int v97 = v95.size();
																																if ( >= v97) {
																																	Object v98 = v95.get();
																																	boolean v100 = ShortcutInfo.isDeclaredInManifest();
																																	boolean v99 = v100;
																																	if (v99 == 0) {
																																		boolean v102 = ShortcutInfo.hasFlags(1);
																																		boolean v101 = v102;
																																		if (v101 != 0) {
																																			int v103 = this.mRank;
																																			if (v103 == ) {
																																				String v104 = this.mId;
																																				ShortcutPackage$$ExternalSyntheticLambda5 v105 = new ShortcutPackage$$ExternalSyntheticLambda5(v80,);
																																				Object v108 = Objects.requireNonNull(v104);
																																				Object v109 = Objects.requireNonNull(v105);
																																				if (v98 == 0) {
																																					v105.accept(v98);
																																					ShortcutInfo v111 = ShortcutPackage.findShortcutById(v104);
																																					if (v111 != 0) {
																																						v105.accept(v111);
																																						ShortcutInfo v113 = new ShortcutInfo(1);
																																						ShortcutPackage.saveShortcut(v113);
																																						if ( >= v97) {
																																							if ( < 0) {
																																								Object v116 = Objects.requireNonNull(v20);
																																								String v117 = this.mPackageName;
																																								int v118 = this.mPackageUserId;
																																								ShortcutService$$ExternalSyntheticLambda28 v120 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v118,v117);
																																								Runnable v119 = v120;
																																								Object v123 = Objects.requireNonNull(p1);
																																								Object v124 = Objects.requireNonNull(v119);
																																								this.mHandler.removeCallbacksAndMessages(p1);
																																								boolean v126 = this.mHandler.postDelayed(v119, p1, 100);
																																								List v128 = ShortcutService.removeNonKeyFields(p2);
																																								List v129 = ShortcutService.removeNonKeyFields(p3);
																																								UserHandle v130 = UserHandle.of(v118);
																																								ShortcutService$$ExternalSyntheticLambda26 v131 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v118,v128,v117,v130,v129);
																																								ShortcutService.injectPostToHandler(v131);
																																								ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																								boolean v137 = 0;
																																								if (v137 == 0) {
																																									ShortcutService$$ExternalSyntheticLambda25 v139 = new ShortcutService$$ExternalSyntheticLambda25();
																																									ShortcutService.forEachLoadedUserLocked(v139);
																																									return;
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void removeDynamicShortcuts(String p1, List p2, int p3){
	int v6 = ShortcutService.injectGetPackageUid(p1, p3);
	if (v6 != v4) {
		boolean v7 = ShortcutService.isEphemeralApp(p1, p3);
		Preconditions.checkState((v7 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v9 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v11 = ShortcutService.isUserUnlockedL(p3);
		if (v11 == 0) {
			ShortcutUser v13 = ShortcutService.getUserShortcutsLocked(p3);
			ShortcutPackage v14 = v13.getPackageShortcuts(p1);
			ShortcutUser v15 = v14.getUser();
			v15.onCalledByPublisher(p1);
			ShortcutPackage v12 = v14;
			int v18 = p2.size();
			if ( < 0) {
				Object v19 = p2.get();
				ShortcutPackage.ensureNotImmutable(v19, 1);
				if ( < 0) {
					int v21 = p2.size();
					if ( < 0) {
						Object v22 = p2.get();
						CharSequence v23 = Preconditions.checkStringNotEmpty(v22);
						ShortcutInfo v25 = ShortcutPackage.findShortcutById(v23);
						if (v25 == 0) {
							boolean v26 = v25.isVisibleToPublisher();
							if (v26 == 0) {
								boolean v24 = ;
								if (v24 != 0) {
									ShortcutInfo v28 = ShortcutPackage.deleteOrDisableWithId(v23, 0, 0, 1, 0, 0);
									ShortcutInfo v27 = v28;
									if (v27 != 0) {
										if ( != 0) {
											ArrayList v29 = new ArrayList(1);
											if (v23 != 0) {
												Object v32 = this.mShortcuts.get(v23);
												ShortcutInfo v31 = v32;
												boolean v33 = .add(v31);
												if ( < 0) {
													long v35 = ShortcutUser.mService.injectCurrentTimeMillis();
													ShortcutPackage$$ExternalSyntheticLambda4 v36 = new ShortcutPackage$$ExternalSyntheticLambda4(v35);
													ShortcutPackage.forEachShortcutMutate(v36);
													ArrayMap v39 = ShortcutPackage.sortShortcutsToActivities();
													int v40 = v39.size();
													if ( < 0) {
														Object v41 = v39.valueAt();
														Collections.sort(v41, this.mShortcutRankComparator);
														int v43 = v41.size();
														if ( >= v43) {
															Object v44 = v41.get();
															boolean v45 = v44.isManifestShortcut();
															if (v45 == 0) {
																boolean v46 = v44.isDynamic();
																if (v46 != 0) {
																	StringBuilder v47 = new StringBuilder();
																	StringBuilder v49 = v47.append("Non-dynamic shortcut found. ");
																	String v50 = v44.toInsecureString();
																	StringBuilder v51 = v47.append(v50);
																	String v52 = v47.toString();
																	ShortcutUser.mService.wtf(v52);
																	if ( >= v43) {
																		if ( < 0) {
																			Object v55 = Objects.requireNonNull(v12);
																			String v56 = v12.getPackageName();
																			int v57 = v12.getPackageUserId();
																			Runnable v58 = ShortcutService.notifyListenerRunnable(v56, v57);
																			ShortcutService.injectPostToHandlerDebounced(v12, v58);
																			ShortcutService.notifyShortcutChangeCallbacks(v56, v57, , );
																			v12.scheduleSave();
																			boolean v63 = ShortcutService.injectShouldPerformVerification();
																			if (v63 == 0) {
																				ShortcutService.verifyStatesInner();
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void removeDynamicShortcuts(String p1, List p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
	int v6 = p2.size();
	if ( < 0) {
		Object v7 = p2.get();
		CharSequence v8 = Preconditions.checkStringNotEmpty(v7);
		boolean v9 = v4.isShortcutExistsAndVisibleToPublisher(v8);
		if (v9 != 0) {
			ShortcutInfo v10 = v4.deleteDynamicWithId(v8, 1, 0);
			if (v10 != 0) {
				if ( != 0) {
					ArrayList v11 = new ArrayList(1);
					ShortcutInfo v13 = v4.findShortcutById(v8);
					boolean v14 = .add(v13);
					if ( < 0) {
						v4.adjustRanks();
						p0.packageShortcutsChanged(v4, , );
						p0.verifyStates();
						return;
					}
				}
			}
		}
	}
}
