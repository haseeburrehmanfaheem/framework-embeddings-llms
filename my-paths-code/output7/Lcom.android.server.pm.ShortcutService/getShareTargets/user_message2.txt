The method getShareTargets has the following code snippet:

This is path 1 for the API with depth 2:
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	boolean v8 = this.mUnlockedUsers.get(p1);
	if (v8 == 0) {
		boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
		boolean v7 = v9;
		if (v7 == 0) {
			ArrayList v10 = new ArrayList();
			boolean v14 = this.mUnlockedUsers.get(p1);
			if (v14 == 0) {
				boolean v15 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v13 = v15;
				if (v13 != 0) {
					if (p3 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p3;
						Object v18 = this.mUsers.get(p3);
						if (v18 != 0) {
							File v20 = ShortcutService.getUserFile(p1);
							AtomicFile v21 = new AtomicFile(v20);
							FileInputStream v23 = v21.openRead();
							ShortcutUser v24 = ShortcutService.loadUserInternal(p1, v23, 0);
							IoUtils.closeQuietly(v23);
							ShortcutUser v19 = v24;
							if (v19 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p3);
								this.mUsers.put(p3, );
								boolean v30 = ShortcutService.injectIsSafeModeEnabled();
								if (v30 == 0) {
									long v31 = ShortcutService.getStatStartTime();
									ArrayList v32 = new ArrayList();
									ShortcutUser v34 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v35 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v32);
									v34.forAllPackageItems(v35);
									int v38 = v32.size();
									if (v38 <= 0) {
										int v39 = v32.size();
										if ( < 0) {
											Object v40 = v32.get();
											ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p1, ShortcutUser$PackageWithUser.userId, 0);
											if ( < 0) {
												long v42 = v34.getLastAppScanTime();
												ShortcutService.rescanUpdatedPackagesLocked(p1, v42);
												ShortcutService.logDurationStat(8, v31);
												ShortcutService.verifyStates();
												ShortcutUser v12 = ;
												ShortcutService$$ExternalSyntheticLambda12 v46 = new ShortcutService$$ExternalSyntheticLambda12(v10,p2);
												v12.forAllPackages(v46);
												ParceledListSlice v49 = new ParceledListSlice(v10);
												return v49;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	boolean v8 = this.mUnlockedUsers.get(p1);
	if (v8 == 0) {
		boolean v7 = 1;
		if (v7 == 0) {
			ArrayList v9 = new ArrayList();
			boolean v13 = this.mUnlockedUsers.get(p1);
			if (v13 == 0) {
				boolean v14 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v12 = v14;
				if (v12 != 0) {
					if (p3 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p3;
						Object v17 = this.mUsers.get(p3);
						if (v17 != 0) {
							File v19 = ShortcutService.getUserFile(p1);
							AtomicFile v20 = new AtomicFile(v19);
							FileInputStream v22 = v20.openRead();
							ShortcutUser v23 = ShortcutService.loadUserInternal(p1, v22, 0);
							IoUtils.closeQuietly(v22);
							ShortcutUser v18 = v23;
							if (v18 != 0) {
								ShortcutUser v25 = new ShortcutUser(ShortcutService,p3);
								this.mUsers.put(p3, );
								boolean v29 = ShortcutService.injectIsSafeModeEnabled();
								if (v29 == 0) {
									long v30 = ShortcutService.getStatStartTime();
									ArrayList v31 = new ArrayList();
									ShortcutUser v33 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v34 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v31);
									v33.forAllPackageItems(v34);
									int v37 = v31.size();
									if (v37 <= 0) {
										int v38 = v31.size();
										if ( < 0) {
											Object v39 = v31.get();
											ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p1, ShortcutUser$PackageWithUser.userId, 0);
											if ( < 0) {
												long v41 = v33.getLastAppScanTime();
												ShortcutService.rescanUpdatedPackagesLocked(p1, v41);
												ShortcutService.logDurationStat(8, v30);
												ShortcutService.verifyStates();
												ShortcutUser v11 = ;
												ShortcutService$$ExternalSyntheticLambda12 v45 = new ShortcutService$$ExternalSyntheticLambda12(v9,p2);
												v11.forAllPackages(v45);
												ParceledListSlice v48 = new ParceledListSlice(v9);
												return v48;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	boolean v8 = this.mUnlockedUsers.get(p1);
	if (v8 == 0) {
		boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
		boolean v7 = v9;
		if (v7 == 0) {
			ArrayList v10 = new ArrayList();
			boolean v14 = this.mUnlockedUsers.get(p1);
			if (v14 == 0) {
				boolean v15 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v13 = v15;
				if (v13 != 0) {
					if (p3 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p3;
						Object v18 = this.mUsers.get(p3);
						if (v18 != 0) {
							File v20 = ShortcutService.getUserFile(p1);
							AtomicFile v21 = new AtomicFile(v20);
							FileInputStream v23 = v21.openRead();
							ShortcutUser v19 = 0;
							if (v19 != 0) {
								ShortcutUser v24 = new ShortcutUser(ShortcutService,p3);
								this.mUsers.put(p3, );
								boolean v28 = ShortcutService.injectIsSafeModeEnabled();
								if (v28 == 0) {
									long v29 = ShortcutService.getStatStartTime();
									ArrayList v30 = new ArrayList();
									ShortcutUser v32 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v33 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v30);
									v32.forAllPackageItems(v33);
									int v36 = v30.size();
									if (v36 <= 0) {
										int v37 = v30.size();
										if ( < 0) {
											Object v38 = v30.get();
											ShortcutService.cleanUpPackageLocked(ShortcutUser$PackageWithUser.packageName, p1, ShortcutUser$PackageWithUser.userId, 0);
											if ( < 0) {
												long v40 = v32.getLastAppScanTime();
												ShortcutService.rescanUpdatedPackagesLocked(p1, v40);
												ShortcutService.logDurationStat(8, v29);
												ShortcutService.verifyStates();
												ShortcutUser v12 = ;
												ShortcutService$$ExternalSyntheticLambda12 v44 = new ShortcutService$$ExternalSyntheticLambda12(v10,p2);
												v12.forAllPackages(v44);
												ParceledListSlice v47 = new ParceledListSlice(v10);
												return v47;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v8 = this.mUnlockedUsers.get(p1);\nShortcutUser v24 = ShortcutService.loadUserInternal(p1, v23, 0);\nShortcutUser v26 = new ShortcutUser(ShortcutService,p3);\nParceledListSlice v49 = new ParceledListSlice(v10);\nreturn v49;', 'boolean v7 = ShortcutService.isUserUnlockedL(p3);\nShortcutUser v14 = ShortcutService.loadUserLocked(p3);\nShortcutUser v15 = new ShortcutUser(ShortcutService,p3);\nParceledListSlice v25 = new ParceledListSlice(v8);\nreturn v25;', 'ShortcutUser v9 = p0.getUserShortcutsLocked(p3);\nParceledListSlice v13 = new ParceledListSlice(v7);\nreturn v13;']

The method getShareTargets has the following similar APIs:

- API Name: hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z with Similarity Score: 0.885279655456543
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v5 = this.mUnlockedUsers.get(p1);
if (v5 == 0) {
boolean v8 = ShortcutService.isUserUnlockedL(p2);
ShortcutUser v12 = new ShortcutUser(ShortcutService, p2);
this.mUsers.put(p2, );
ShortcutPackage v18 = new ShortcutPackage(ShortcutUser, this.mUserId, p1);
Object v20 = this.mPackages.put(p1, v18);
boolean v21 = v6.hasShareTargets();
return v21;

- API Name: getBackupPayload(I)[B with Similarity Score: 0.8709359169006348
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutUser v10 = ShortcutService.loadUserLocked(p1);
ShortcutUser v11 = new ShortcutUser(ShortcutService,p1);
this.mUsers.put(p1, );
ByteArrayOutputStream v75 = new ByteArrayOutputStream(32768);
byte[] v113 = v75.toByteArray();
return v113;

