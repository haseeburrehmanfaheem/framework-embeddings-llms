The method requestNotificationAccess has the following code snippet:

This is path 1 for the API with depth 2:
public PendingIntent requestNotificationAccess(ComponentName p1, int p2){
	String v1 = p1.getPackageName();
	Context v6 = this.this$0.getContext();
	PackageInfo v8 = PackageUtils.getPackageInfo(v6, v3, p1);
	if (PackageInfo.reqFeatures == 0) {
		if ( >= PackageInfo.reqFeatures.length) {
			boolean v9 = "android.software.companion_device_setup".equals(FeatureInfo.name);
			if (v9 == 0) {
				if ( >= PackageInfo.reqFeatures.length) {
					boolean v10 = "android.software.companion_device_setup".equals(FeatureInfo.name);
					if (v10 == 0) {
						AssociationStoreImpl v11 = this.mAssociationStore;
						List v13 = AssociationStoreImpl.getAssociationsForUser(v3);
						AssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);
						List v16 = CollectionUtils.filter(v13, v14);
						List v17 = Collections.unmodifiableList(v16);
						List v12 = v17;
						boolean v18 = ArrayUtils.isEmpty(v12);
						Preconditions.checkState((v18 ^ 1), "App must have an association before calling this API");
						long v20 = Binder.clearCallingIdentity();
						Context v21 = this.this$0.getContext();
						Context v22 = this.this$0.getContext();
						Intent v23 = NotificationAccessConfirmationActivityContract.launcherIntent(v22, p2, p1);
						UserHandle v24 = new UserHandle(p2);
						PendingIntent v26 = PendingIntent.getActivityAsUser(v21, 0, v23, 1409286144, 0, v24);
						Binder.restoreCallingIdentity(v20);
						return v26;
					}
				}
			}
		}
	}
}

and the following sink code:
['List v13 = AssociationStoreImpl.getAssociationsForUser(v3);\nAssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);\nList v16 = CollectionUtils.filter(v13, v14);\nIntent v23 = NotificationAccessConfirmationActivityContract.launcherIntent(v22, p2, p1);\nPendingIntent v26 = PendingIntent.getActivityAsUser(v21, 0, v23, 1409286144, 0, v24);', 'String v12 = v8.getString(17040008);\nComponentName v13 = ComponentName.unflattenFromString(v12);\nIntent v14 = v10.setComponent(v13);\nIntent v15 = v14.putExtra("user_id", p2);\nIntent v16 = v15.putExtra("component_name", p1);\nPendingIntent v19 = PendingIntent.getActivityAsUser(v7, 0, v9, 1409286144, 0, v17);', 'p0.checkCanCallNotificationApi(v1);\nIntent v6 = NotificationAccessConfirmationActivityContract.launcherIntent(v5, p2, p1);\nPendingIntent v9 = PendingIntent.getActivityAsUser(v4, 0, v6, 1409286144, 0, v7);']

The method requestNotificationAccess has the following similar APIs:

- API Name: hasNotificationAccess(Landroid/content/ComponentName;)Z with Similarity Score: 0.8227246999740601
  - Access Control Level: SYS_OR_SIG and the following code:
AssociationStoreImpl v11 = this.mAssociationStore;
List v13 = AssociationStoreImpl.getAssociationsForUser(v3);
AssociationStoreImpl$$ExternalSyntheticLambda0 v14 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);
Object v21 = v20.getSystemService(NotificationManage.class);
boolean v22 = v21.isNotificationListenerAccessGranted(p1);
return v22;

- API Name: startNextMatchingActivity(Landroid/os/IBinder;Landroid/content/Intent;Landroid/os/Bundle;)Z with Similarity Score: 0.822419285774231
  - Access Control Level: NONE and the following code:
Intent v22 = new Intent(p2);
Uri v24 = ActivityRecord.intent.getData();
String v25 = ActivityRecord.intent.getType();
Intent v26 = v22.setDataAndType(v24, v25);
Intent v27 = v22.setComponent(0);

