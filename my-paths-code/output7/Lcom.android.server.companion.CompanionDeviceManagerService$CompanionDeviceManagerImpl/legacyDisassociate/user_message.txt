This is path 1 for the API with depth 2:
public void legacyDisassociate(String p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	List v5 = AssociationStoreImpl.getAssociationsByAddress(p3);
	AssociationStoreImpl$$ExternalSyntheticLambda2 v6 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p1,p2);
	Object v8 = CollectionUtils.find(v5, v6);
	AssociationInfo v4 = v8;
	Context v9 = this.mContext;
	if (v4 != 0) {
		int v11 = v4.getUserId();
		String v12 = v4.getPackageName();
		boolean v13 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v9, v11, v12);
		if (v13 != 0) {
			AssociationInfo v10 = 0;
			AssociationInfo v3 = v10;
			if (v3 == 0) {
				int v14 = v3.getId();
				Integer v17 = Integer.valueOf(p1);
				Object v18 = this.mIdMap.get(v17);
				AssociationInfo v16 = v18;
				int v19 = this.mUserId;
				String v20 = this.mPackageName;
				String v21 = this.mDeviceProfile;
				String v23 = v16.getDeviceProfile();
				if (v23 != 0) {
					int v24 = v16.getId();
					int v25 = v16.getUserId();
					String v26 = v16.getPackageName();
					List v27 = this.mAssociationStore.getAssociationsForPackage(v25, v26);
					CompanionDeviceManagerService$$ExternalSyntheticLambda3 v28 = new CompanionDeviceManagerService$$ExternalSyntheticLambda3(v23,v24);
					boolean v30 = CollectionUtils.any(v27, v28);
					if (v30 == 0) {
						int v31 = CompanionDeviceManagerService.getPackageProcessImportance(v25, v26);
						if (v31 > 200) {
							boolean v22 = 0;
							if (v22 != 0) {
								AssociationInfo$NonActionableBuilder v40 = AssociationInfo.builder(v16);
								AssociationInfo$Builder v41 = v40.setRevoked(1);
								AssociationInfo v42 = v41.build();
								String v43 = v42.getPackageName();
								int v44 = v42.getUserId();
								int v45 = this.mPackageManagerInternal.getPackageUid(v43, 0, v44);
								int v46 = v42.getUserId();
								Object v47 = this.mRevokedAssociationsPendingRoleHolderRemoval.forUser(v46);
								boolean v48 = v47.add(v42);
								Integer v49 = Integer.valueOf(v45);
								boolean v50 = this.mUidsPendingRoleHolderRemoval.containsKey(v49);
								if (v50 != 0) {
									Integer v51 = Integer.valueOf(v45);
									Object v52 = this.mUidsPendingRoleHolderRemoval.put(v51, v43);
									int v53 = this.mUidsPendingRoleHolderRemoval.size();
									if (v53 != 1) {
										this.mOnPackageVisibilityChangeListener.startListening();
										Integer v56 = Integer.valueOf(p1);
										boolean v57 = this.mReportedSelfManagedDevices.contains(v56);
										if (v57 != 0) {
											Integer v58 = Integer.valueOf(p1);
											boolean v59 = this.mConnectedBtDevices.contains(v58);
											if (v59 != 0) {
												Integer v60 = Integer.valueOf(p1);
												boolean v61 = this.mNearbyBleDevices.contains(v60);
												if (v61 != 0) {
													Integer v62 = Integer.valueOf(p1);
													boolean v63 = this.mSimulated.contains(v62);
													if (v63 == 0) {
														boolean v55 = ;
														Integer v65 = Integer.valueOf(p1);
														Object v66 = this.mIdMap.remove(v65);
														if (v66 != 0) {
															MacAddress v67 = v66.getDeviceMacAddress();
															if (v67 == 0) {
																Object v68 = this.mAddressMap.get(v67);
																Integer v69 = Integer.valueOf(p1);
																boolean v70 = v68.remove(v69);
																int v71 = v66.getUserId();
																AssociationStoreImpl.invalidateCacheForUserLocked(v71);
																AssociationStoreImpl.broadcastChange(1, v66);
																Object v75 = this.METRIC_DEVICE_PROFILE.get(v21);
																int v76 = v75.intValue();
																FrameworkStatsLog.write(451, 2, v76);
																if (v55 == 0) {
																	boolean v78 = this.mNotifyOnDeviceNearby;
																	if (v78 != 0) {
																		List v80 = AssociationStoreImpl.getAssociationsForUser(v19);
																		AssociationStoreImpl$$ExternalSyntheticLambda0 v81 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v20);
																		List v83 = CollectionUtils.filter(v80, v81);
																		List v84 = Collections.unmodifiableList(v83);
																		List v79 = v84;
																		CompanionDeviceManagerService$$ExternalSyntheticLambda0 v85 = new CompanionDeviceManagerService$$ExternalSyntheticLambda0(CompanionDeviceManagerService);
																		Object v88 = CollectionUtils.find(v79, v85);
																		if (v88 == 0) {
																			boolean v87 = ;
																			if (v87 == 0) {
																				Object v90 = this.mBoundCompanionApplications.removePackage(v19, v20);
																				if (v90 != 0) {
																					Iterator v91 = v90.iterator();
																					boolean v92 = v91.hasNext();
																					if (v92 == 0) {
																						Object v93 = v91.next();
																						v93.postUnbind();
																						boolean v95 = v91.hasNext();
																						if (v95 == 0) {
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


This is path 2 for the API with depth 1:
public void legacyDisassociate(String p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	AssociationInfo v4 = this.mAssociationStore.getAssociationsForPackageWithAddress(p3, p2, p1);
	Context v5 = CompanionDeviceManagerService.getContext();
	AssociationInfo v6 = PermissionsUtils.sanitizeWithCallerChecks(v5, v4);
	AssociationInfo v3 = v6;
	if (v3 == 0) {
		int v7 = this.mId;
		AssociationInfo v9 = this.mAssociationStore.getAssociationById(v7);
		int v10 = v9.getUserId();
		String v11 = v9.getPackageName();
		String v12 = v9.getDeviceProfile();
		boolean v13 = CompanionDeviceManagerService.maybeRemoveRoleHolderForAssociation(v9);
		if (v13 != 0) {
			CompanionDeviceManagerService.addToPendingRoleHolderRemoval(v9);
			boolean v15 = this.mDevicePresenceMonitor.isDevicePresent(v7);
			this.mAssociationStore.removeAssociation(v7);
			MetricUtils.logRemoveAssociation(v12);
			if (v15 == 0) {
				boolean v18 = v9.isNotifyOnDeviceNearby();
				if (v18 != 0) {
					List v19 = this.mAssociationStore.getAssociationsForPackage(v10, v11);
					CompanionDeviceManagerService$$ExternalSyntheticLambda0 v20 = new CompanionDeviceManagerService$$ExternalSyntheticLambda0(CompanionDeviceManagerService);
					boolean v22 = CollectionUtils.any(v19, v20);
					if (v22 == 0) {
						this.mCompanionAppController.unbindCompanionApplication(v10, v11);
						return;
					}
				}
			}
		}
	}
}


This is path 3 for the API with depth 0:
public void legacyDisassociate(String p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	AssociationInfo v3 = this.this$0.getAssociationWithCallerChecks(p3, p2, p1);
	if (v3 == 0) {
		int v4 = v3.getId();
		this.this$0.disassociateInternal(v4);
		return;
	}
}
