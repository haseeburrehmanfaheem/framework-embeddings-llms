The method disassociate has the following code snippet:

This is path 1 for the API with depth 2:
public void disassociate(int p1){
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mIdMap.get(v3);
	AssociationInfo v2 = v4;
	Context v5 = this.mContext;
	if (v2 != 0) {
		int v7 = v2.getUserId();
		String v8 = v2.getPackageName();
		boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);
		if (v9 != 0) {
			AssociationInfo v6 = 0;
			AssociationInfo v1 = v6;
			if (v1 == 0) {
				Integer v12 = Integer.valueOf(p1);
				Object v13 = this.mIdMap.get(v12);
				AssociationInfo v11 = v13;
				int v14 = this.mUserId;
				String v15 = this.mPackageName;
				String v16 = this.mDeviceProfile;
				String v18 = v11.getDeviceProfile();
				if (v18 != 0) {
					int v19 = v11.getId();
					int v20 = v11.getUserId();
					String v21 = v11.getPackageName();
					List v22 = this.mAssociationStore.getAssociationsForPackage(v20, v21);
					CompanionDeviceManagerService$$ExternalSyntheticLambda3 v23 = new CompanionDeviceManagerService$$ExternalSyntheticLambda3(v18,v19);
					boolean v25 = CollectionUtils.any(v22, v23);
					if (v25 == 0) {
						int v26 = CompanionDeviceManagerService.getPackageProcessImportance(v20, v21);
						if (v26 > 200) {
							boolean v17 = 0;
							if (v17 != 0) {
								AssociationInfo$NonActionableBuilder v35 = AssociationInfo.builder(v11);
								AssociationInfo$Builder v36 = v35.setRevoked(1);
								AssociationInfo v37 = v36.build();
								String v38 = v37.getPackageName();
								int v39 = v37.getUserId();
								int v40 = this.mPackageManagerInternal.getPackageUid(v38, 0, v39);
								int v41 = v37.getUserId();
								Object v42 = this.mRevokedAssociationsPendingRoleHolderRemoval.forUser(v41);
								boolean v43 = v42.add(v37);
								Integer v44 = Integer.valueOf(v40);
								boolean v45 = this.mUidsPendingRoleHolderRemoval.containsKey(v44);
								if (v45 != 0) {
									Integer v46 = Integer.valueOf(v40);
									Object v47 = this.mUidsPendingRoleHolderRemoval.put(v46, v38);
									int v48 = this.mUidsPendingRoleHolderRemoval.size();
									if (v48 != 1) {
										this.mOnPackageVisibilityChangeListener.startListening();
										Integer v51 = Integer.valueOf(p1);
										boolean v52 = this.mReportedSelfManagedDevices.contains(v51);
										if (v52 != 0) {
											Integer v53 = Integer.valueOf(p1);
											boolean v54 = this.mConnectedBtDevices.contains(v53);
											if (v54 != 0) {
												Integer v55 = Integer.valueOf(p1);
												boolean v56 = this.mNearbyBleDevices.contains(v55);
												if (v56 != 0) {
													Integer v57 = Integer.valueOf(p1);
													boolean v58 = this.mSimulated.contains(v57);
													if (v58 == 0) {
														boolean v50 = ;
														Integer v60 = Integer.valueOf(p1);
														Object v61 = this.mIdMap.remove(v60);
														if (v61 != 0) {
															MacAddress v62 = v61.getDeviceMacAddress();
															if (v62 == 0) {
																Object v63 = this.mAddressMap.get(v62);
																Integer v64 = Integer.valueOf(p1);
																boolean v65 = v63.remove(v64);
																int v66 = v61.getUserId();
																AssociationStoreImpl.invalidateCacheForUserLocked(v66);
																AssociationStoreImpl.broadcastChange(1, v61);
																Object v70 = this.METRIC_DEVICE_PROFILE.get(v16);
																int v71 = v70.intValue();
																FrameworkStatsLog.write(451, 2, v71);
																if (v50 == 0) {
																	boolean v73 = this.mNotifyOnDeviceNearby;
																	if (v73 != 0) {
																		List v75 = AssociationStoreImpl.getAssociationsForUser(v14);
																		AssociationStoreImpl$$ExternalSyntheticLambda0 v76 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v15);
																		List v78 = CollectionUtils.filter(v75, v76);
																		List v79 = Collections.unmodifiableList(v78);
																		List v74 = v79;
																		CompanionDeviceManagerService$$ExternalSyntheticLambda0 v80 = new CompanionDeviceManagerService$$ExternalSyntheticLambda0(CompanionDeviceManagerService);
																		Object v83 = CollectionUtils.find(v74, v80);
																		if (v83 == 0) {
																			boolean v82 = ;
																			if (v82 == 0) {
																				Object v85 = this.mBoundCompanionApplications.removePackage(v14, v15);
																				if (v85 != 0) {
																					Iterator v86 = v85.iterator();
																					boolean v87 = v86.hasNext();
																					if (v87 == 0) {
																						Object v88 = v86.next();
																						v88.postUnbind();
																						boolean v90 = v86.hasNext();
																						if (v90 == 0) {
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void disassociate(int p1){
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mIdMap.get(v3);
	AssociationInfo v2 = v4;
	Context v5 = this.mContext;
	if (v2 != 0) {
		int v7 = v2.getUserId();
		String v8 = v2.getPackageName();
		boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);
		if (v9 != 0) {
			AssociationInfo v6 = v2;
			AssociationInfo v1 = v6;
			if (v1 == 0) {
				Integer v12 = Integer.valueOf(p1);
				Object v13 = this.mIdMap.get(v12);
				AssociationInfo v11 = v13;
				int v14 = this.mUserId;
				String v15 = this.mPackageName;
				String v16 = this.mDeviceProfile;
				String v18 = v11.getDeviceProfile();
				if (v18 != 0) {
					int v19 = v11.getId();
					int v20 = v11.getUserId();
					String v21 = v11.getPackageName();
					List v22 = this.mAssociationStore.getAssociationsForPackage(v20, v21);
					CompanionDeviceManagerService$$ExternalSyntheticLambda3 v23 = new CompanionDeviceManagerService$$ExternalSyntheticLambda3(v18,v19);
					boolean v25 = CollectionUtils.any(v22, v23);
					if (v25 == 0) {
						int v26 = CompanionDeviceManagerService.getPackageProcessImportance(v20, v21);
						if (v26 > 200) {
							boolean v17 = 0;
							if (v17 != 0) {
								AssociationInfo$NonActionableBuilder v35 = AssociationInfo.builder(v11);
								AssociationInfo$Builder v36 = v35.setRevoked(1);
								AssociationInfo v37 = v36.build();
								String v38 = v37.getPackageName();
								int v39 = v37.getUserId();
								int v40 = this.mPackageManagerInternal.getPackageUid(v38, 0, v39);
								int v41 = v37.getUserId();
								Object v42 = this.mRevokedAssociationsPendingRoleHolderRemoval.forUser(v41);
								boolean v43 = v42.add(v37);
								Integer v44 = Integer.valueOf(v40);
								boolean v45 = this.mUidsPendingRoleHolderRemoval.containsKey(v44);
								if (v45 != 0) {
									Integer v46 = Integer.valueOf(v40);
									Object v47 = this.mUidsPendingRoleHolderRemoval.put(v46, v38);
									int v48 = this.mUidsPendingRoleHolderRemoval.size();
									if (v48 != 1) {
										this.mOnPackageVisibilityChangeListener.startListening();
										Integer v51 = Integer.valueOf(p1);
										boolean v52 = this.mReportedSelfManagedDevices.contains(v51);
										if (v52 != 0) {
											Integer v53 = Integer.valueOf(p1);
											boolean v54 = this.mConnectedBtDevices.contains(v53);
											if (v54 != 0) {
												Integer v55 = Integer.valueOf(p1);
												boolean v56 = this.mNearbyBleDevices.contains(v55);
												if (v56 != 0) {
													Integer v57 = Integer.valueOf(p1);
													boolean v58 = this.mSimulated.contains(v57);
													if (v58 == 0) {
														boolean v50 = ;
														Integer v60 = Integer.valueOf(p1);
														Object v61 = this.mIdMap.remove(v60);
														if (v61 != 0) {
															MacAddress v62 = v61.getDeviceMacAddress();
															if (v62 == 0) {
																Object v63 = this.mAddressMap.get(v62);
																Integer v64 = Integer.valueOf(p1);
																boolean v65 = v63.remove(v64);
																int v66 = v61.getUserId();
																AssociationStoreImpl.invalidateCacheForUserLocked(v66);
																AssociationStoreImpl.broadcastChange(1, v61);
																Object v70 = this.METRIC_DEVICE_PROFILE.get(v16);
																int v71 = v70.intValue();
																FrameworkStatsLog.write(451, 2, v71);
																if (v50 == 0) {
																	boolean v73 = this.mNotifyOnDeviceNearby;
																	if (v73 != 0) {
																		List v75 = AssociationStoreImpl.getAssociationsForUser(v14);
																		AssociationStoreImpl$$ExternalSyntheticLambda0 v76 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v15);
																		List v78 = CollectionUtils.filter(v75, v76);
																		List v79 = Collections.unmodifiableList(v78);
																		List v74 = v79;
																		CompanionDeviceManagerService$$ExternalSyntheticLambda0 v80 = new CompanionDeviceManagerService$$ExternalSyntheticLambda0(CompanionDeviceManagerService);
																		Object v83 = CollectionUtils.find(v74, v80);
																		if (v83 == 0) {
																			boolean v82 = ;
																			if (v82 == 0) {
																				Object v85 = this.mBoundCompanionApplications.removePackage(v14, v15);
																				if (v85 != 0) {
																					Iterator v86 = v85.iterator();
																					boolean v87 = v86.hasNext();
																					if (v87 == 0) {
																						Object v88 = v86.next();
																						v88.postUnbind();
																						boolean v90 = v86.hasNext();
																						if (v90 == 0) {
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void disassociate(int p1){
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mIdMap.get(v3);
	AssociationInfo v2 = v4;
	Context v5 = this.mContext;
	if (v2 != 0) {
		int v7 = v2.getUserId();
		String v8 = v2.getPackageName();
		boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);
		if (v9 != 0) {
			AssociationInfo v6 = 0;
			AssociationInfo v1 = v6;
			if (v1 == 0) {
				Integer v12 = Integer.valueOf(p1);
				Object v13 = this.mIdMap.get(v12);
				AssociationInfo v11 = v13;
				int v14 = this.mUserId;
				String v15 = this.mPackageName;
				String v16 = this.mDeviceProfile;
				String v18 = v11.getDeviceProfile();
				if (v18 != 0) {
					int v19 = v11.getId();
					int v20 = v11.getUserId();
					String v21 = v11.getPackageName();
					List v22 = this.mAssociationStore.getAssociationsForPackage(v20, v21);
					CompanionDeviceManagerService$$ExternalSyntheticLambda3 v23 = new CompanionDeviceManagerService$$ExternalSyntheticLambda3(v18,v19);
					boolean v25 = CollectionUtils.any(v22, v23);
					if (v25 == 0) {
						int v26 = CompanionDeviceManagerService.getPackageProcessImportance(v20, v21);
						if (v26 > 200) {
							boolean v17 = 0;
							if (v17 != 0) {
								AssociationInfo$NonActionableBuilder v35 = AssociationInfo.builder(v11);
								AssociationInfo$Builder v36 = v35.setRevoked(1);
								AssociationInfo v37 = v36.build();
								String v38 = v37.getPackageName();
								int v39 = v37.getUserId();
								int v40 = this.mPackageManagerInternal.getPackageUid(v38, 0, v39);
								int v41 = v37.getUserId();
								Object v42 = this.mRevokedAssociationsPendingRoleHolderRemoval.forUser(v41);
								boolean v43 = v42.add(v37);
								Integer v44 = Integer.valueOf(v40);
								boolean v45 = this.mUidsPendingRoleHolderRemoval.containsKey(v44);
								if (v45 != 0) {
									Integer v46 = Integer.valueOf(v40);
									Object v47 = this.mUidsPendingRoleHolderRemoval.put(v46, v38);
									int v48 = this.mUidsPendingRoleHolderRemoval.size();
									if (v48 != 1) {
										this.mOnPackageVisibilityChangeListener.startListening();
										Integer v51 = Integer.valueOf(p1);
										boolean v52 = this.mReportedSelfManagedDevices.contains(v51);
										if (v52 != 0) {
											Integer v53 = Integer.valueOf(p1);
											boolean v54 = this.mConnectedBtDevices.contains(v53);
											if (v54 != 0) {
												Integer v55 = Integer.valueOf(p1);
												boolean v56 = this.mNearbyBleDevices.contains(v55);
												if (v56 != 0) {
													Integer v57 = Integer.valueOf(p1);
													boolean v58 = this.mSimulated.contains(v57);
													if (v58 == 0) {
														boolean v50 = ;
														Integer v60 = Integer.valueOf(p1);
														Object v61 = this.mIdMap.remove(v60);
														if (v61 != 0) {
															MacAddress v62 = v61.getDeviceMacAddress();
															if (v62 == 0) {
																Object v63 = this.mAddressMap.get(v62);
																Integer v64 = Integer.valueOf(p1);
																boolean v65 = v63.remove(v64);
																int v66 = v61.getUserId();
																AssociationStoreImpl.invalidateCacheForUserLocked(v66);
																AssociationStoreImpl.broadcastChange(1, v61);
																Object v70 = this.METRIC_DEVICE_PROFILE.get(v16);
																int v71 = v70.intValue();
																FrameworkStatsLog.write(451, 2, v71);
																if (v50 == 0) {
																	boolean v73 = this.mNotifyOnDeviceNearby;
																	if (v73 != 0) {
																		List v75 = AssociationStoreImpl.getAssociationsForUser(v14);
																		AssociationStoreImpl$$ExternalSyntheticLambda0 v76 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v15);
																		List v78 = CollectionUtils.filter(v75, v76);
																		List v79 = Collections.unmodifiableList(v78);
																		List v74 = v79;
																		CompanionDeviceManagerService$$ExternalSyntheticLambda0 v80 = new CompanionDeviceManagerService$$ExternalSyntheticLambda0(CompanionDeviceManagerService);
																		Object v83 = CollectionUtils.find(v74, v80);
																		if (v83 == 0) {
																			boolean v82 = ;
																			if (v82 == 0) {
																				Object v85 = this.mBoundCompanionApplications.removePackage(v14, v15);
																				if (v85 != 0) {
																					Iterator v86 = v85.iterator();
																					boolean v87 = v86.hasNext();
																					if (v87 == 0) {
																						Object v88 = v86.next();
																						v88.postUnbind();
																						boolean v90 = v86.hasNext();
																						if (v90 == 0) {
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v3 = Integer.valueOf(p1);\nObject v4 = this.mIdMap.get(v3);\nAssociationInfo v2 = v4;\nint v7 = v2.getUserId();\nString v8 = v2.getPackageName();\nboolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);', 'AssociationInfo v6 = this.mAssociationStore.getAssociationById(p1);\nint v7 = v6.getUserId();\nString v8 = v6.getPackageName();\nboolean v10 = CompanionDeviceManagerService.maybeRemoveRoleHolderForAssociation(v6);', 'AssociationInfo v1 = this.this$0.getAssociationWithCallerChecks(p1);\nthis.this$0.disassociateInternal(p1);']

The method disassociate has the following similar APIs:

- API Name: notifyDeviceDisappeared(I)V with Similarity Score: 0.9592111706733704
  - Access Control Level: SYS_OR_SIG and the following code:
Object v4 = this.mIdMap.get(v3);
AssociationInfo v2 = v4;
int v7 = v2.getUserId();
String v8 = v2.getPackageName();
boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);

- API Name: notifyDeviceAppeared(I)V with Similarity Score: 0.9099335670471191
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v3 = Integer.valueOf(p1);
Object v4 = this.mIdMap.get(v3);
AssociationInfo v2 = v4;
int v7 = v2.getUserId();
String v8 = v2.getPackageName();
boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);
AssociationInfo$NonActionableBuilder v11 = AssociationInfo.builder(v1);
long v12 = System.currentTimeMillis();
AssociationInfo$Builder v13 = v11.setLastTimeConnected(v12);
AssociationInfo v15 = new AssociationInfo(v16,v17,v18,v19,v20,v21,v22,this.mNotifyOnDeviceNearby,this.mRevoked,v23,this.mLastTimeConnectedMs);

