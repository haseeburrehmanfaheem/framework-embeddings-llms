The method registerDevicePresenceListenerService has the following code snippet:

This is path 1 for the API with depth 2:
public void registerDevicePresenceListenerService(String p1, String p2, int p3){
	int v4 = UserHandle.getCallingUserId();
	if (v9 == 0) {
		AssociationStoreImpl v10 = this.mAssociationStore;
		List v12 = AssociationStoreImpl.getAssociationsByAddress(p2);
		AssociationStoreImpl$$ExternalSyntheticLambda2 v13 = new AssociationStoreImpl$$ExternalSyntheticLambda2(v4,p1);
		Object v15 = CollectionUtils.find(v12, v13);
		AssociationInfo v11 = v15;
		if (v11 == 0) {
			boolean v16 = this.mNotifyOnDeviceNearby;
			if (1 != v16) {
				AssociationInfo$Builder v18 = new AssociationInfo$Builder(v11,0);
				AssociationInfo$NonActionableBuilder v17 = v18;
				AssociationInfo$Builder v20 = v17.setNotifyOnDeviceNearby(1);
				AssociationInfo v22 = new AssociationInfo(v23,v24,v25,v26,v27,v28,v29,this.mNotifyOnDeviceNearby,this.mRevoked,v30,this.mLastTimeConnectedMs);
				int v23 = AssociationInfo.-$$Nest$fgetmId(this.mOriginalInfo);
				int v24 = AssociationInfo.-$$Nest$fgetmUserId(this.mOriginalInfo);
				String v25 = AssociationInfo.-$$Nest$fgetmPackageName(this.mOriginalInfo);
				MacAddress v26 = AssociationInfo.-$$Nest$fgetmDeviceMacAddress(this.mOriginalInfo);
				CharSequence v27 = AssociationInfo.-$$Nest$fgetmDisplayName(this.mOriginalInfo);
				String v28 = AssociationInfo.-$$Nest$fgetmDeviceProfile(this.mOriginalInfo);
				boolean v29 = AssociationInfo.-$$Nest$fgetmSelfManaged(this.mOriginalInfo);
				long v30 = AssociationInfo.-$$Nest$fgetmTimeApprovedMs(this.mOriginalInfo);
				AssociationInfo v21 = v22;
				AssociationStoreImpl v32 = this.mAssociationStore;
				AssociationStoreImpl.checkNotRevoked(v21);
				int v35 = v21.getId();
				Integer v36 = Integer.valueOf(v35);
				Object v37 = this.mIdMap.get(v36);
				if (v37 != 0) {
					boolean v38 = v37.equals(v21);
					if (v38 == 0) {
						Integer v39 = Integer.valueOf(v35);
						Object v40 = this.mIdMap.put(v39, v21);
						int v41 = v37.getUserId();
						AssociationStoreImpl.invalidateCacheForUserLocked(v41);
						MacAddress v43 = v21.getDeviceMacAddress();
						MacAddress v44 = v37.getDeviceMacAddress();
						boolean v45 = Objects.equals(v44, v43);
						if ((v45 ^ 1) == 0) {
							if (v44 == 0) {
								Object v46 = this.mAddressMap.get(v44);
								Integer v47 = Integer.valueOf(v35);
								boolean v48 = v46.remove(v47);
								if (v43 == 0) {
									AssociationStoreImpl$$ExternalSyntheticLambda3 v49 = new AssociationStoreImpl$$ExternalSyntheticLambda3();
									Object v51 = this.mAddressMap.computeIfAbsent(v43, v49);
									Integer v52 = Integer.valueOf(v35);
									boolean v53 = v51.add(v52);
									if ((v45 ^ 1) == 0) {
										AssociationStoreImpl.broadcastChange(, v21);
										if (1 == 0) {
											CompanionDevicePresenceMonitor v55 = this.mDevicePresenceMonitor;
											int v56 = this.mId;
											Integer v58 = Integer.valueOf(v56);
											boolean v59 = this.mReportedSelfManagedDevices.contains(v58);
											if (v59 != 0) {
												Integer v60 = Integer.valueOf(v56);
												boolean v61 = this.mConnectedBtDevices.contains(v60);
												if (v61 != 0) {
													Integer v62 = Integer.valueOf(v56);
													boolean v63 = this.mNearbyBleDevices.contains(v62);
													if (v63 != 0) {
														Integer v64 = Integer.valueOf(v56);
														boolean v65 = this.mSimulated.contains(v64);
														if (v65 == 0) {
															boolean v57 = ;
															if (v57 == 0) {
																int v66 = this.mId;
																this.this$0.onDeviceAppearedInternal(v66);
																if (1 != 0) {
																	boolean v70 = this.this$0.shouldBindPackage(v4, p1);
																	boolean v69 = v70;
																	if (v69 != 0) {
																		CompanionApplicationController v71 = this.mCompanionAppController;
																		Object v73 = this.mBoundCompanionApplications.removePackage(v4, p1);
																		if (v73 != 0) {
																			Iterator v74 = v73.iterator();
																			boolean v75 = v74.hasNext();
																			if (v75 == 0) {
																				Object v76 = v74.next();
																				v76.postUnbind();
																				boolean v78 = v74.hasNext();
																				if (v78 == 0) {
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void registerDevicePresenceListenerService(String p1, String p2, int p3){
	int v4 = UserHandle.getCallingUserId();
	if (v9 == 0) {
		AssociationStoreImpl v10 = this.mAssociationStore;
		List v12 = AssociationStoreImpl.getAssociationsByAddress(p2);
		AssociationStoreImpl$$ExternalSyntheticLambda2 v13 = new AssociationStoreImpl$$ExternalSyntheticLambda2(v4,p1);
		Object v15 = CollectionUtils.find(v12, v13);
		AssociationInfo v11 = v15;
		if (v11 == 0) {
			boolean v16 = this.mNotifyOnDeviceNearby;
			if (1 != v16) {
				AssociationInfo$Builder v18 = new AssociationInfo$Builder(v11,0);
				AssociationInfo$NonActionableBuilder v17 = v18;
				AssociationInfo$Builder v20 = v17.setNotifyOnDeviceNearby(1);
				AssociationInfo v22 = new AssociationInfo(v23,v24,v25,v26,v27,v28,v29,this.mNotifyOnDeviceNearby,this.mRevoked,v30,this.mLastTimeConnectedMs);
				int v23 = AssociationInfo.-$$Nest$fgetmId(this.mOriginalInfo);
				int v24 = AssociationInfo.-$$Nest$fgetmUserId(this.mOriginalInfo);
				String v25 = AssociationInfo.-$$Nest$fgetmPackageName(this.mOriginalInfo);
				MacAddress v26 = AssociationInfo.-$$Nest$fgetmDeviceMacAddress(this.mOriginalInfo);
				CharSequence v27 = AssociationInfo.-$$Nest$fgetmDisplayName(this.mOriginalInfo);
				String v28 = AssociationInfo.-$$Nest$fgetmDeviceProfile(this.mOriginalInfo);
				boolean v29 = AssociationInfo.-$$Nest$fgetmSelfManaged(this.mOriginalInfo);
				long v30 = AssociationInfo.-$$Nest$fgetmTimeApprovedMs(this.mOriginalInfo);
				AssociationInfo v21 = v22;
				AssociationStoreImpl v32 = this.mAssociationStore;
				AssociationStoreImpl.checkNotRevoked(v21);
				int v35 = v21.getId();
				Integer v36 = Integer.valueOf(v35);
				Object v37 = this.mIdMap.get(v36);
				if (v37 != 0) {
					boolean v38 = v37.equals(v21);
					if (v38 == 0) {
						Integer v39 = Integer.valueOf(v35);
						Object v40 = this.mIdMap.put(v39, v21);
						int v41 = v37.getUserId();
						AssociationStoreImpl.invalidateCacheForUserLocked(v41);
						MacAddress v43 = v21.getDeviceMacAddress();
						MacAddress v44 = v37.getDeviceMacAddress();
						boolean v45 = Objects.equals(v44, v43);
						if ((v45 ^ 1) == 0) {
							if (v44 == 0) {
								Object v46 = this.mAddressMap.get(v44);
								Integer v47 = Integer.valueOf(v35);
								boolean v48 = v46.remove(v47);
								if (v43 == 0) {
									AssociationStoreImpl$$ExternalSyntheticLambda3 v49 = new AssociationStoreImpl$$ExternalSyntheticLambda3();
									Object v51 = this.mAddressMap.computeIfAbsent(v43, v49);
									Integer v52 = Integer.valueOf(v35);
									boolean v53 = v51.add(v52);
									if ((v45 ^ 1) == 0) {
										AssociationStoreImpl.broadcastChange(, v21);
										if (1 == 0) {
											CompanionDevicePresenceMonitor v55 = this.mDevicePresenceMonitor;
											int v56 = this.mId;
											Integer v58 = Integer.valueOf(v56);
											boolean v59 = this.mReportedSelfManagedDevices.contains(v58);
											if (v59 != 0) {
												Integer v60 = Integer.valueOf(v56);
												boolean v61 = this.mConnectedBtDevices.contains(v60);
												if (v61 != 0) {
													Integer v62 = Integer.valueOf(v56);
													boolean v63 = this.mNearbyBleDevices.contains(v62);
													if (v63 != 0) {
														Integer v64 = Integer.valueOf(v56);
														boolean v65 = this.mSimulated.contains(v64);
														if (v65 == 0) {
															boolean v57 = ;
															if (v57 == 0) {
																int v66 = this.mId;
																this.this$0.onDeviceAppearedInternal(v66);
																if (1 != 0) {
																	boolean v70 = this.this$0.shouldBindPackage(v4, p1);
																	boolean v69 = v70;
																	if (v69 != 0) {
																		CompanionApplicationController v71 = this.mCompanionAppController;
																		Object v73 = this.mBoundCompanionApplications.removePackage(v4, p1);
																		if (v73 != 0) {
																			Iterator v74 = v73.iterator();
																			boolean v75 = v74.hasNext();
																			if (v75 == 0) {
																				Object v76 = v74.next();
																				v76.postUnbind();
																				boolean v78 = v74.hasNext();
																				if (v78 == 0) {
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AssociationStoreImpl v10 = this.mAssociationStore;\nList v12 = AssociationStoreImpl.getAssociationsByAddress(p2);\nAssociationStoreImpl$$ExternalSyntheticLambda2 v13 = new AssociationStoreImpl$$ExternalSyntheticLambda2(v4,p1);\nObject v15 = CollectionUtils.find(v12, v13);\nAssociationInfo$Builder v18 = new AssociationInfo$Builder(v11,0);\nAssociationInfo$NonActionableBuilder v17 = v18;\nAssociationInfo$Builder v20 = v17.setNotifyOnDeviceNearby(1);\nAssociationInfo v22 = new AssociationInfo(v23,v24,v25,v26,v27,v28,v29,this.mNotifyOnDeviceNearby,this.mRevoked,v30);', 'int v4 = UserHandle.getCallingUserId();\nPermissionsUtils.enforceCallerIsSystemOr(v4, p2);\nAssociationStoreImpl v6 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);\nAssociationInfo v7 = v6.getAssociationsForPackageWithAddress(v4, p2, p1);', 'p0.registerDevicePresenceListenerActive(p2, p1, 1);']

The method registerDevicePresenceListenerService has the following similar APIs:

- API Name: unregisterDevicePresenceListenerService(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.9981452226638794
  - Access Control Level: SYS_OR_SIG and the following code:
p0.registerDevicePresenceListenerActive(p2, p1, 0);

- API Name: getAssociations(Ljava/lang/String;I)Ljava/util/List; with Similarity Score: 0.8715858459472656
  - Access Control Level: SYS_OR_SIG and the following code:
AssociationStoreImpl v19 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);
List v22 = AssociationStoreImpl.getAssociationsForUserLocked(p1);
List v21 = v22;
AssociationStoreImpl$$ExternalSyntheticLambda0 v23 = new AssociationStoreImpl$$ExternalSyntheticLambda0(p1);
int v26 = CollectionUtils.size(v21);
Object v27 = v21.get();
boolean v28 = v23.test(v27);
ArrayList v29 = ArrayUtils.add(, v27);
List v31 = CollectionUtils.emptyIfNull();
List v25 = v31;
List v32 = Collections.unmodifiableList(v25);
List v20 = v32;
return v20;

