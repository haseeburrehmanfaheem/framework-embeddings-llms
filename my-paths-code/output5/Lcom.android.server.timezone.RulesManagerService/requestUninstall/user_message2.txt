The method requestUninstall has the following code snippet:

This is path 1 for the API with depth 2:
public int requestUninstall(byte[] p1, ICallback p2){
	this.mPermissionHelper.enforceCallerHasPermission("android.permission.UPDATE_TIME_ZONE_RULES");
	if (p1 == 0) {
		ByteArrayInputStream v4 = new ByteArrayInputStream(p1);
		DataInputStream v6 = new DataInputStream(v4);
		int v8 = v6.readInt();
		long v9 = v6.readLong();
		long v10 = v6.readLong();
		CheckToken v11 = new CheckToken(v8,v12);
		PackageVersions v12 = new PackageVersions(v9,v10);
		v6.close();
		CheckToken v3 = v11;
		CheckToken v2 = v3;
		String v16 = RulesManagerService.toStringOrNull();
		EventLogTags.writeTimezoneRequestUninstall(v16);
		if (p2 == 0) {
			boolean v18 = this.mOperationInProgress.get();
			if (v18 == 0) {
				this.mOperationInProgress.set(1);
				RulesManagerService$UninstallRunnable v20 = new RulesManagerService$UninstallRunnable(p0,,p2);
				this.mExecutor.execute(v20);
				return 0;
			}
		}
	}
}

and the following sink code:
['ByteArrayInputStream v4 = new ByteArrayInputStream(p1);\nDataInputStream v6 = new DataInputStream(v4);\nint v8 = v6.readInt();\nlong v9 = v6.readLong();\nlong v10 = v6.readLong();\nCheckToken v11 = new CheckToken(v8,v12);\nPackageVersions v12 = new PackageVersions(v9,v10);']

The method requestUninstall has the following similar APIs:

- API Name: requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I with Similarity Score: 1.0000001192092896
  - Access Control Level: NONE and the following code:
ByteArrayInputStream v4 = new ByteArrayInputStream(p1);
DataInputStream v6 = new DataInputStream(v4);
int v8 = v6.readInt();
long v9 = v6.readLong();
long v10 = v6.readLong();
CheckToken v11 = new CheckToken(v8,v12);
PackageVersions v12 = new PackageVersions(v9,v10);

- API Name: requestNothing([BZ)V with Similarity Score: 0.8893887996673584
  - Access Control Level: NONE and the following code:
ByteArrayInputStream v4 = new ByteArrayInputStream(p1);
DataInputStream v6 = new DataInputStream(v4);
int v8 = v6.readInt();
long v9 = v6.readLong();
long v10 = v6.readLong();
CheckToken v11 = new CheckToken(v8,v12);
PackageVersions v12 = new PackageVersions(v9,v10);
boolean v29 = PackageStatusStorage.writePackageStatusWithOptimisticLockCheck(CheckToken.mOptimisticLockId, (CheckToken.mOptimisticLockId + 1), v28, CheckToken.mPackageVersions);

