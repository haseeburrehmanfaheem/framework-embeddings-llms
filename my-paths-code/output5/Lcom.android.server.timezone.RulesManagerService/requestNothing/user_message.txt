This is path 1 for the API with depth 2:
public void requestNothing(byte[] p1, boolean p2){
	this.mPermissionHelper.enforceCallerHasPermission("android.permission.UPDATE_TIME_ZONE_RULES");
	if (p1 == 0) {
		ByteArrayInputStream v4 = new ByteArrayInputStream(p1);
		DataInputStream v6 = new DataInputStream(v4);
		int v8 = v6.readInt();
		long v9 = v6.readLong();
		long v10 = v6.readLong();
		CheckToken v11 = new CheckToken(v8,v12);
		PackageVersions v12 = new PackageVersions(v9,v10);
		v6.close();
		CheckToken v3 = v11;
		CheckToken v2 = v3;
		String v16 = RulesManagerService.toStringOrNull();
		EventLogTags.writeTimezoneRequestNothing(v16);
		if (this.mTrackingEnabled != 0) {
			if ( != 0) {
				if (p2 == 0) {
					Integer v28 = Integer.valueOf();
					boolean v29 = PackageStatusStorage.writePackageStatusWithOptimisticLockCheck(CheckToken.mOptimisticLockId, (CheckToken.mOptimisticLockId + 1), v28, CheckToken.mPackageVersions);
					boolean v27 = v29;
					if (v27 == 0) {
						this.mIntentHelper.scheduleReliabilityTrigger(this.mDelayBeforeReliabilityCheckMillis);
						this.mCheckFailureCount = (this.mCheckFailureCount + 1);
						String v40 = RulesManagerService.toStringOrNull();
						EventLogTags.writeTimezoneNothingComplete(v40);
						return;
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void requestNothing(byte[] p1, boolean p2){
	this.mPermissionHelper.enforceCallerHasPermission("android.permission.UPDATE_TIME_ZONE_RULES");
	if (p1 == 0) {
		ByteArrayInputStream v4 = new ByteArrayInputStream(p1);
		DataInputStream v6 = new DataInputStream(v4);
		int v8 = v6.readInt();
		long v9 = v6.readLong();
		long v10 = v6.readLong();
		CheckToken v11 = new CheckToken(v8,v12);
		PackageVersions v12 = new PackageVersions(v9,v10);
		v6.close();
		CheckToken v3 = v11;
		CheckToken v2 = v3;
		String v16 = RulesManagerService.toStringOrNull();
		EventLogTags.writeTimezoneRequestNothing(v16);
		if (this.mTrackingEnabled != 0) {
			if ( != 0) {
				if (p2 == 0) {
					Integer v28 = Integer.valueOf();
					boolean v29 = PackageStatusStorage.writePackageStatusWithOptimisticLockCheck(CheckToken.mOptimisticLockId, (CheckToken.mOptimisticLockId + 1), v28, CheckToken.mPackageVersions);
					boolean v27 = v29;
					if (v27 == 0) {
						this.mIntentHelper.scheduleReliabilityTrigger(this.mDelayBeforeReliabilityCheckMillis);
						this.mCheckFailureCount = (this.mCheckFailureCount + 1);
						String v40 = RulesManagerService.toStringOrNull();
						EventLogTags.writeTimezoneNothingComplete(v40);
						return;
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void requestNothing(byte[] p1, boolean p2){
	this.mPermissionHelper.enforceCallerHasPermission("android.permission.UPDATE_TIME_ZONE_RULES");
	if (p1 == 0) {
		if ( != 0) {
			String v2 = ;
			int v4 = EventLog.writeEvent(51630, v2);
			if (this.mTrackingEnabled != 0) {
				if ( != 0) {
					if (p2 == 0) {
						Integer v15 = Integer.valueOf();
						boolean v16 = PackageStatusStorage.writePackageStatusWithOptimisticLockCheck(CheckToken.mOptimisticLockId, (CheckToken.mOptimisticLockId + 1), v15, CheckToken.mPackageVersions);
						boolean v14 = v16;
						if (v14 == 0) {
							this.mIntentHelper.scheduleReliabilityTrigger(this.mDelayBeforeReliabilityCheckMillis);
							this.mCheckFailureCount = (this.mCheckFailureCount + 1);
							String v27 = RulesManagerService.toStringOrNull();
							EventLogTags.writeTimezoneNothingComplete(v27);
							return;
						}
					}
				}
			}
		}
	}
}
