The method rebootWithLskfAssumeSlotSwitch has the following code snippet:

This is path 1 for the API with depth 2:
public int rebootWithLskfAssumeSlotSwitch(String p1, String p2){
	if (p1 != 0) {
		boolean v4 = RecoverySystemService.isLskfCaptured(p1);
		if (v4 != 0) {
			boolean v5 = RecoverySystemService.verifySlotForNextBoot(p3);
			if (v5 != 0) {
				long v6 = Binder.clearCallingIdentity();
				LockSettingsInternal v7 = this.mInjector.getLockSettingsService();
				if (v7 != 0) {
					int v8 = v7.armRebootEscrow();
					Binder.restoreCallingIdentity(v6);
					if (v8 == 0) {
						RecoverySystemService$RebootPreparationError v16 = new RecoverySystemService$RebootPreparationError(5000,v8);
						RecoverySystemService$RebootPreparationError v3 = v16;
						int v19 = this.mInjector.getUidFromPackageName(p1);
						boolean v20 = RecoverySystemService.useServerBasedRoR();
						int v21 = this.mCallerPreparedForReboot.size();
						long v22 = this.mInjector.getCurrentTimeMillis();
						RecoverySystemService$PreferencesManager v23 = this.mInjector.getMetricsPrefs();
						long v24 = v23.getLong("lskf_captured_timestamp", -1);
						if ((v24 < -1) == 0) {
							if ((v22 < v24) <= 0) {
								StringBuilder v25 = new StringBuilder();
								StringBuilder v27 = v25.append(p1);
								StringBuilder v28 = v25.append("_request_lskf_count");
								String v29 = v25.toString();
								int v30 = v23.getInt(v29, -1);
								int v31 = v23.getInt("lskf_captured_count", -1);
								Integer v33 = Integer.valueOf(v21);
								Integer v34 = Integer.valueOf(v30);
								Integer v35 = Integer.valueOf(v31);
								Integer v36 = Integer.valueOf();
								int v39 = v3.getErrorCodeForMetrics();
								this.mInjector.reportRebootEscrowRebootMetrics(v39, v19, v21, v30, p3, v20, , v31);
								Integer v42 = Integer.valueOf(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
								boolean v43 = this.FATAL_ARM_ESCROW_ERRORS.contains(v42);
								if (v43 != 0) {
									RecoverySystemService.clearRoRPreparationState();
									if (RecoverySystemService$RebootPreparationError.mRebootErrorCode == 0) {
										RecoverySystemService$PreferencesManager v51 = this.mPrefs;
										boolean v53 = this.mMetricsPrefsFile.delete();
										if (v53 != 0) {
											Object v56 = this.mContext.getSystemService("power");
											PowerManager v55 = v56;
											v55.reboot(p2);
											int v2 = 1000;
											return v2;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int rebootWithLskfAssumeSlotSwitch(String p1, String p2){
	if (p1 != 0) {
		boolean v4 = RecoverySystemService.isLskfCaptured(p1);
		if (v4 != 0) {
			boolean v5 = RecoverySystemService.verifySlotForNextBoot(p3);
			if (v5 != 0) {
				long v6 = Binder.clearCallingIdentity();
				LockSettingsInternal v7 = this.mInjector.getLockSettingsService();
				if (v7 != 0) {
					int v8 = v7.armRebootEscrow();
					Binder.restoreCallingIdentity(v6);
					if (v8 == 0) {
						RecoverySystemService$RebootPreparationError v16 = new RecoverySystemService$RebootPreparationError(5000,v8);
						RecoverySystemService$RebootPreparationError v3 = v16;
						int v19 = this.mInjector.getUidFromPackageName(p1);
						boolean v20 = RecoverySystemService.useServerBasedRoR();
						int v21 = this.mCallerPreparedForReboot.size();
						long v22 = this.mInjector.getCurrentTimeMillis();
						RecoverySystemService$PreferencesManager v23 = this.mInjector.getMetricsPrefs();
						long v24 = v23.getLong("lskf_captured_timestamp", -1);
						if ((v24 < -1) == 0) {
							if ((v22 < v24) <= 0) {
								StringBuilder v25 = new StringBuilder();
								StringBuilder v27 = v25.append(p1);
								StringBuilder v28 = v25.append("_request_lskf_count");
								String v29 = v25.toString();
								int v30 = v23.getInt(v29, -1);
								int v31 = v23.getInt("lskf_captured_count", -1);
								Integer v33 = Integer.valueOf(v21);
								Integer v34 = Integer.valueOf(v30);
								Integer v35 = Integer.valueOf(v31);
								Integer v36 = Integer.valueOf();
								int v39 = v3.getErrorCodeForMetrics();
								this.mInjector.reportRebootEscrowRebootMetrics(v39, v19, v21, v30, p3, v20, , v31);
								Integer v42 = Integer.valueOf(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
								boolean v43 = this.FATAL_ARM_ESCROW_ERRORS.contains(v42);
								if (v43 != 0) {
									RecoverySystemService.clearRoRPreparationState();
									if (RecoverySystemService$RebootPreparationError.mRebootErrorCode == 0) {
										RecoverySystemService$PreferencesManager v51 = this.mPrefs;
										boolean v53 = this.mMetricsPrefsFile.delete();
										if (v53 != 0) {
											Object v55 = this.mContext.getSystemService("power");
											PowerManager v54 = v55;
											v54.reboot(p2);
											int v2 = 1000;
											return v2;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v4 = RecoverySystemService.isLskfCaptured(p1);\nif (v4 != 0) {\nint v19 = this.mInjector.getUidFromPackageName(p1);', 'LockSettingsInternal v7 = this.mInjector.getLockSettingsService();\nif (v7 != 0) {\nint v8 = v7.armRebootEscrow();', 'Object v56 = this.mContext.getSystemService("power");\nPowerManager v55 = v56;\nv55.reboot(p2);', 'RecoverySystemService$RebootPreparationError v16 = new RecoverySystemService$RebootPreparationError(5000,v8);\nthis.mInjector.reportRebootEscrowRebootMetrics(v39, v19, v21, v30, p3, v20, , v31);']

The method rebootWithLskfAssumeSlotSwitch has the following similar APIs:

- API Name: requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z with Similarity Score: 0.8752274513244629
  - Access Control Level: NONE and the following code:
LockSettingsInternal v47 = v48;
boolean v50 = v47.prepareRebootEscrow();

- API Name: rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I with Similarity Score: 0.8531615734100342
  - Access Control Level: SYS_OR_SIG and the following code:
LockSettingsInternal v7 = this.mInjector.getLockSettingsService();
int v8 = v7.armRebootEscrow();
this.mInjector.reportRebootEscrowRebootMetrics(v39, v19, v21, v30, p3, v20, , v31);

