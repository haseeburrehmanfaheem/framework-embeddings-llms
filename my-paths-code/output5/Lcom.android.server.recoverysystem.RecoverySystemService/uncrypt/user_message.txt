This is path 1 for the API with depth 2:
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	if ( >= 30) {
		String v4 = SystemProperties.get("init.svc.uncrypt");
		String v3 = v4;
		String v6 = SystemProperties.get("init.svc.setup-bcb");
		String v5 = v6;
		String v8 = SystemProperties.get("init.svc.clear-bcb");
		String v7 = v8;
		boolean v9 = "running".equals(v3);
		if (v9 != 0) {
			boolean v10 = "running".equals(v5);
			if (v10 != 0) {
				boolean v11 = "running".equals(v7);
				if (v11 == 0) {
					if ( != 0) {
						boolean v2 = 1;
						if (v2 != 0) {
							boolean v12 = this.mInjector.uncryptPackageFileDelete();
							FileWriter v13 = this.mInjector.getUncryptPackageFileWriter();
							StringBuilder v14 = new StringBuilder();
							StringBuilder v16 = v14.append(p1);
							StringBuilder v17 = v14.append("
");
							String v18 = v14.toString();
							v13.write(v18);
							v13.close();
							this.mInjector.systemPropertiesSet("ctl.start", "uncrypt");
							RecoverySystemService$UncryptSocket v23 = new RecoverySystemService$UncryptSocket();
							LocalSocket v26 = new LocalSocket();
							this.mLocalSocket = v26;
							if ( >= 30) {
								LocalSocketAddress v28 = new LocalSocketAddress("uncrypt",LocalSocketAddress$Namespace.RESERVED);
								this.mLocalSocket.connect(v28);
								if ( != 0) {
									DataInputStream v31 = new DataInputStream(v32);
									InputStream v32 = this.mLocalSocket.getInputStream();
									this.mInputStream = v31;
									DataOutputStream v34 = new DataOutputStream;
									RecoverySystemService$UncryptSocket.close();
									boolean v25 = 0;
									if (v25 != 0) {
										IoUtils.closeQuietly(this.mInputStream);
										IoUtils.closeQuietly(this.mOutputStream);
										IoUtils.closeQuietly(this.mLocalSocket);
										RecoverySystemService$UncryptSocket v22 = ;
										if (v22 != 0) {
											int v40 = v22.getPercentageUncrypted();
											if (v40 != ) {
												if ( == -2147483648) {
													if (v40 < 0) {
														if (v40 > 100) {
															if (p2 == 0) {
																p2.onProgress(v40);
																if (v40 != 100) {
																	v22.sendAck();
																	v22.close();
																	return 1;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	if ( >= 30) {
		String v4 = SystemProperties.get("init.svc.uncrypt");
		String v3 = v4;
		String v6 = SystemProperties.get("init.svc.setup-bcb");
		String v5 = v6;
		String v8 = SystemProperties.get("init.svc.clear-bcb");
		String v7 = v8;
		boolean v9 = "running".equals(v3);
		if (v9 != 0) {
			boolean v10 = "running".equals(v5);
			if (v10 != 0) {
				boolean v11 = "running".equals(v7);
				if (v11 == 0) {
					if ( != 0) {
						boolean v2 = 1;
						if (v2 != 0) {
							boolean v12 = this.mInjector.uncryptPackageFileDelete();
							FileWriter v13 = this.mInjector.getUncryptPackageFileWriter();
							StringBuilder v14 = new StringBuilder();
							StringBuilder v16 = v14.append(p1);
							StringBuilder v17 = v14.append("
");
							String v18 = v14.toString();
							v13.write(v18);
							v13.close();
							this.mInjector.systemPropertiesSet("ctl.start", "uncrypt");
							RecoverySystemService$UncryptSocket v23 = new RecoverySystemService$UncryptSocket();
							LocalSocket v26 = new LocalSocket();
							this.mLocalSocket = v26;
							if ( >= 30) {
								LocalSocketAddress v28 = new LocalSocketAddress("uncrypt",LocalSocketAddress$Namespace.RESERVED);
								this.mLocalSocket.connect(v28);
								if ( != 0) {
									DataInputStream v31 = new DataInputStream(v32);
									InputStream v32 = this.mLocalSocket.getInputStream();
									this.mInputStream = v31;
									DataOutputStream v34 = new DataOutputStream;
									RecoverySystemService$UncryptSocket.close();
									boolean v25 = 0;
									if (v25 != 0) {
										IoUtils.closeQuietly(this.mInputStream);
										IoUtils.closeQuietly(this.mOutputStream);
										IoUtils.closeQuietly(this.mLocalSocket);
										RecoverySystemService$UncryptSocket v22 = ;
										if (v22 != 0) {
											int v40 = v22.getPercentageUncrypted();
											if (v40 != ) {
												if ( == -2147483648) {
													if (v40 < 0) {
														if (v40 > 100) {
															if (p2 == 0) {
																p2.onProgress(v40);
																if (v40 != 100) {
																	v22.sendAck();
																	v22.close();
																	return 1;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	if ( >= 30) {
		String v4 = SystemProperties.get("init.svc.uncrypt");
		String v3 = v4;
		String v6 = SystemProperties.get("init.svc.setup-bcb");
		String v5 = v6;
		String v8 = SystemProperties.get("init.svc.clear-bcb");
		String v7 = v8;
		boolean v9 = "running".equals(v3);
		if (v9 != 0) {
			boolean v10 = "running".equals(v5);
			if (v10 != 0) {
				boolean v11 = "running".equals(v7);
				if (v11 == 0) {
					if ( != 0) {
						boolean v2 = 1;
						if (v2 != 0) {
							boolean v12 = this.mInjector.uncryptPackageFileDelete();
							FileWriter v13 = this.mInjector.getUncryptPackageFileWriter();
							StringBuilder v14 = new StringBuilder();
							StringBuilder v16 = v14.append(p1);
							StringBuilder v17 = v14.append("
");
							String v18 = v14.toString();
							v13.write(v18);
							v13.close();
							this.mInjector.systemPropertiesSet("ctl.start", "uncrypt");
							RecoverySystemService$UncryptSocket v23 = new RecoverySystemService$UncryptSocket();
							LocalSocket v26 = new LocalSocket();
							this.mLocalSocket = v26;
							if ( >= 30) {
								LocalSocketAddress v28 = new LocalSocketAddress("uncrypt",LocalSocketAddress$Namespace.RESERVED);
								this.mLocalSocket.connect(v28);
								if ( != 0) {
									DataInputStream v31 = new DataInputStream(v32);
									InputStream v32 = this.mLocalSocket.getInputStream();
									this.mInputStream = v31;
									DataOutputStream v34 = new DataOutputStream;
									RecoverySystemService$UncryptSocket.close();
									boolean v25 = 0;
									if (v25 != 0) {
										IoUtils.closeQuietly(this.mInputStream);
										IoUtils.closeQuietly(this.mOutputStream);
										IoUtils.closeQuietly(this.mLocalSocket);
										RecoverySystemService$UncryptSocket v22 = ;
										if (v22 != 0) {
											int v40 = v22.getPercentageUncrypted();
											if (v40 != ) {
												if ( == -2147483648) {
													if (v40 < 0) {
														if (v40 > 100) {
															if (p2 == 0) {
																p2.onProgress(v40);
																if (v40 != 100) {
																	v22.sendAck();
																	v22.close();
																	return 1;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
