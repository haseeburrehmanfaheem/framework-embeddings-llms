The method hideSoftInput has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hideSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	int v1 = Binder.getCallingUid();
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingServerImpl v5 = new ImeTracingServerImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");
			boolean v8 = p0.calledFromValidUserLocked();
			if (v8 != 0) {
				long v9 = Binder.clearCallingIdentity();
				Trace.traceBegin(32, "IMMS.hideSoftInput");
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v11 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v12 = p1.asBinder();
						if (v11 == v12) {
							IBinder v13 = p1.asBinder();
							Object v14 = this.mClients.get(v13);
							if (v14 == 0) {
								boolean v15 = p0.isImeClientFocused(p2, v14);
								if (v15 != 0) {
									if ((p3 & 1) == 0) {
										if (this.mShowExplicitlyRequested != 0) {
											if (this.mShowForced == 0) {
												if (this.mShowForced == 0) {
													if ((p3 & 2) == 0) {
														IInputMethodInvoker v18 = this.mBindingController.getCurMethod();
														IInputMethodInvoker v17 = v18;
														if (v17 == 0) {
															if (this.mInputShown != 0) {
																if ((this.mImeWindowVis & 1) == 0) {
																	if ( == 0) {
																		Binder v19 = new Binder();
																		Object v21 = this.mHideRequestWindowMap.put(v19, p2);
																		this.mTarget.hideSoftInput(v19, 0, p3);
																		IInputMethodInvoker.logRemoteException(caughtException);
																		boolean v22 = 0;
																		if (v22 == 0) {
																			WindowManagerInternal$ImeTargetInfo v26 = this.mWindowManagerInternal.onToggleImeRequested(0, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);
																			InputMethodManagerService$SoftInputShowHideHistory$Entry v27 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
																			this.mSoftInputShowHideHistory.addEntry(v27);
																			if (this.mVisibleBound == 0) {
																				InputMethodBindingController.unbindVisibleConnection();
																				this.mInputShown = 0;
																				this.mShowRequested = 0;
																				this.mShowExplicitlyRequested = 0;
																				this.mShowForced = 0;
																				boolean v16 = ;
																				Binder.restoreCallingIdentity(v9);
																				Trace.traceEnd(32);
																				return v16;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean hideSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	int v1 = Binder.getCallingUid();
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingClientImpl v5 = new ImeTracingClientImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");
			boolean v8 = p0.calledFromValidUserLocked();
			if (v8 != 0) {
				long v9 = Binder.clearCallingIdentity();
				Trace.traceBegin(32, "IMMS.hideSoftInput");
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v11 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v12 = p1.asBinder();
						if (v11 == v12) {
							IBinder v13 = p1.asBinder();
							Object v14 = this.mClients.get(v13);
							if (v14 == 0) {
								boolean v15 = p0.isImeClientFocused(p2, v14);
								if (v15 != 0) {
									if ((p3 & 1) == 0) {
										if (this.mShowExplicitlyRequested != 0) {
											if (this.mShowForced == 0) {
												if (this.mShowForced == 0) {
													if ((p3 & 2) == 0) {
														IInputMethodInvoker v18 = this.mBindingController.getCurMethod();
														IInputMethodInvoker v17 = v18;
														if (v17 == 0) {
															if (this.mInputShown != 0) {
																if ((this.mImeWindowVis & 1) == 0) {
																	if ( == 0) {
																		Binder v19 = new Binder();
																		Object v21 = this.mHideRequestWindowMap.put(v19, p2);
																		this.mTarget.hideSoftInput(v19, 0, p3);
																		IInputMethodInvoker.logRemoteException(caughtException);
																		boolean v22 = 0;
																		if (v22 == 0) {
																			WindowManagerInternal$ImeTargetInfo v26 = this.mWindowManagerInternal.onToggleImeRequested(0, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);
																			InputMethodManagerService$SoftInputShowHideHistory$Entry v27 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
																			this.mSoftInputShowHideHistory.addEntry(v27);
																			if (this.mVisibleBound == 0) {
																				InputMethodBindingController.unbindVisibleConnection();
																				this.mInputShown = 0;
																				this.mShowRequested = 0;
																				this.mShowExplicitlyRequested = 0;
																				this.mShowForced = 0;
																				boolean v16 = ;
																				Binder.restoreCallingIdentity(v9);
																				Trace.traceEnd(32);
																				return v16;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean hideSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	int v1 = Binder.getCallingUid();
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingServerImpl v5 = new ImeTracingServerImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#hideSoftInput");
			boolean v8 = p0.calledFromValidUserLocked();
			if (v8 != 0) {
				long v9 = Binder.clearCallingIdentity();
				Trace.traceBegin(32, "IMMS.hideSoftInput");
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v11 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v12 = p1.asBinder();
						if (v11 == v12) {
							IBinder v13 = p1.asBinder();
							Object v14 = this.mClients.get(v13);
							if (v14 == 0) {
								boolean v15 = p0.isImeClientFocused(p2, v14);
								if (v15 != 0) {
									if ((p3 & 1) == 0) {
										if (this.mShowExplicitlyRequested != 0) {
											if (this.mShowForced == 0) {
												if (this.mShowForced == 0) {
													if ((p3 & 2) == 0) {
														IInputMethodInvoker v18 = this.mBindingController.getCurMethod();
														IInputMethodInvoker v17 = v18;
														if (v17 == 0) {
															if (this.mInputShown != 0) {
																if ((this.mImeWindowVis & 1) == 0) {
																	if ( == 0) {
																		Binder v19 = new Binder();
																		Object v21 = this.mHideRequestWindowMap.put(v19, p2);
																		this.mTarget.hideSoftInput(v19, 0, p3);
																		IInputMethodInvoker.logRemoteException(caughtException);
																		boolean v22 = 0;
																		if (v22 == 0) {
																			WindowManagerInternal$ImeTargetInfo v26 = this.mWindowManagerInternal.onToggleImeRequested(0, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);
																			InputMethodManagerService$SoftInputShowHideHistory$Entry v27 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
																			this.mSoftInputShowHideHistory.addEntry(v27);
																			if (this.mVisibleBound == 0) {
																				InputMethodBindingController.unbindVisibleConnection();
																				this.mInputShown = 0;
																				this.mShowRequested = 0;
																				this.mShowExplicitlyRequested = 0;
																				this.mShowForced = 0;
																				boolean v16 = ;
																				Binder.restoreCallingIdentity(v9);
																				Trace.traceEnd(32);
																				return v16;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nthis.mTarget.hideSoftInput(v19, 0, p3);\nWindowManagerInternal$ImeTargetInfo v26 = this.mWindowManagerInternal.onToggleImeRequested(0, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);', 'Object v21 = this.mHideRequestWindowMap.put(v19, p2);\nInputMethodManagerService$SoftInputShowHideHistory$Entry v27 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(...)']

The method hideSoftInput has the following similar APIs:

- API Name: showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z with Similarity Score: 0.7828916907310486
  - Access Control Level: SYS_OR_SIG and the following code:
Object v37 = this.mShowRequestWindowMap.put(v35, p2);
int v38 = InputMethodManagerService.getImeShowFlagsLocked();
IInputMethodInvoker v34 = this.mBindingController.getCurMethod();
boolean v32 = InputMethodBindingController.bindCurrentInputMethodServiceMainConnection();

- API Name: reportPerceptibleAsync(Landroid/os/IBinder;Z)V with Similarity Score: 0.7484958171844482
  - Access Control Level: SYS_OR_SIG and the following code:
Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
int v2 = Binder.getCallingUid();
this.mCurPerceptible = p2;
IBinder v18 = this.mBindingController.getCurToken();
long v19 = Binder.clearCallingIdentity();
StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v29, , p2, v20, v25);
boolean v33 = this.mHandler.post(v31);
Notification v56 = this.mImeSwitcherNotification.build();
this.mNotificationManager.notifyAsUser(0, 8, v56, UserHandle.ALL);

