The method setAdditionalInputMethodSubtypes has the following code snippet:

This is path 1 for the API with depth 2:
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	if (v1 != 0) {
		if (p2 != 0) {
			ArrayList v2 = new ArrayList();
			if ( >= p2.length) {
				if (v8 != 0) {
					String v12 = Debug.getCallers(10);
					boolean v4 = 0;
					if (v4 != 0) {
						if (this.mSystemReady != 0) {
							Object v16 = this.mMethodMap.get(p1);
							if (v16 != 0) {
								int v17 = Binder.getCallingUid();
								String v18 = this.mIPackageManager.getPackagesForUid(v17);
								if (v18 == 0) {
									if ( >= v18.length) {
										String v19 = v16.getPackageName();
										boolean v20 = v18[].equals(v19);
										if (v20 == 0) {
											if (p2.length <= 0) {
												String v21 = v16.getId();
												Object v22 = this.mAdditionalSubtypeMap.put(v21, v2);
												int v23 = this.mCurrentUserId;
												if (p3 != 0) {
													File v26 = new File(v27,"system");
													File v27 = Environment.getDataDirectory();
													File v29 = new File(,"inputmethod");
													File v25 = v29;
													boolean v31 = this.mAdditionalSubtypeMap.isEmpty();
													if (v31 == 0) {
														boolean v32 = v25.exists();
														if (v32 != 0) {
															boolean v33 = v25.mkdirs();
															if (v33 != 0) {
																if (this.mMethodMap == 0) {
																	int v34 = this.mMethodMap.size();
																	if (v34 <= 0) {
																		File v36 = new File(v25,"subtypes.xml");
																		AtomicFile v38 = new AtomicFile(v36,"input-subtypes");
																		AtomicFile v35 = v38;
																		FileOutputStream v40 = v35.startWrite();
																		if ( == 0) {
																			v35.failWrite();
																			long v43 = Binder.clearCallingIdentity();
																			p0.buildInputMethodListLocked(0);
																			Binder.restoreCallingIdentity(v43);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	if (v1 != 0) {
		if (p2 != 0) {
			ArrayList v2 = new ArrayList();
			if ( >= p2.length) {
				if (v8 != 0) {
					String v12 = Debug.getCallers(10);
					boolean v4 = 0;
					if (v4 != 0) {
						if (this.mSystemReady != 0) {
							Object v16 = this.mMethodMap.get(p1);
							if (v16 != 0) {
								int v17 = Binder.getCallingUid();
								String v18 = this.mIPackageManager.getPackagesForUid(v17);
								if (v18 == 0) {
									if ( >= v18.length) {
										String v19 = v16.getPackageName();
										boolean v20 = v18[].equals(v19);
										if (v20 == 0) {
											if (p2.length <= 0) {
												String v21 = v16.getId();
												Object v22 = this.mAdditionalSubtypeMap.remove(v21);
												int v23 = this.mCurrentUserId;
												if (p3 != 0) {
													File v26 = new File(v27,"system");
													File v27 = Environment.getDataDirectory();
													File v29 = new File(,"inputmethod");
													File v25 = v29;
													boolean v31 = this.mAdditionalSubtypeMap.isEmpty();
													if (v31 == 0) {
														boolean v32 = v25.exists();
														if (v32 != 0) {
															boolean v33 = v25.mkdirs();
															if (v33 != 0) {
																if (this.mMethodMap == 0) {
																	int v34 = this.mMethodMap.size();
																	if (v34 <= 0) {
																		File v36 = new File(v25,"subtypes.xml");
																		AtomicFile v38 = new AtomicFile(v36,"input-subtypes");
																		AtomicFile v35 = v38;
																		FileOutputStream v40 = v35.startWrite();
																		if ( == 0) {
																			v35.failWrite();
																			long v43 = Binder.clearCallingIdentity();
																			p0.buildInputMethodListLocked(0);
																			Binder.restoreCallingIdentity(v43);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	if (v1 != 0) {
		if (p2 != 0) {
			ArrayList v2 = new ArrayList();
			if ( >= p2.length) {
				if (v8 != 0) {
					String v12 = Debug.getCallers(10);
					boolean v4 = 0;
					if (v4 != 0) {
						if (this.mSystemReady != 0) {
							Object v16 = this.mMethodMap.get(p1);
							if (v16 != 0) {
								int v17 = Binder.getCallingUid();
								String v18 = this.mIPackageManager.getPackagesForUid(v17);
								if (v18 == 0) {
									if ( >= v18.length) {
										String v19 = v16.getPackageName();
										boolean v20 = v18[].equals(v19);
										if (v20 == 0) {
											if (p2.length <= 0) {
												String v21 = v16.getId();
												Object v22 = this.mAdditionalSubtypeMap.put(v21, v2);
												int v23 = this.mCurrentUserId;
												if (p3 != 0) {
													File v26 = Environment.getUserSystemDirectory(p3);
													File v27 = new File(,"inputmethod");
													File v25 = v27;
													boolean v29 = this.mAdditionalSubtypeMap.isEmpty();
													if (v29 == 0) {
														boolean v30 = v25.exists();
														if (v30 != 0) {
															boolean v31 = v25.mkdirs();
															if (v31 != 0) {
																if (this.mMethodMap == 0) {
																	int v32 = this.mMethodMap.size();
																	if (v32 <= 0) {
																		File v34 = new File(v25,"subtypes.xml");
																		AtomicFile v36 = new AtomicFile(v34,"input-subtypes");
																		AtomicFile v33 = v36;
																		FileOutputStream v38 = v33.startWrite();
																		if ( == 0) {
																			v33.failWrite();
																			long v41 = Binder.clearCallingIdentity();
																			p0.buildInputMethodListLocked(0);
																			Binder.restoreCallingIdentity(v41);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ArrayList v2 = new ArrayList();\nObject v16 = this.mMethodMap.get(p1);\nint v17 = Binder.getCallingUid();\nString v18 = this.mIPackageManager.getPackagesForUid(v17);\nString v19 = v16.getPackageName();\nboolean v20 = v18[].equals(v19);\nObject v22 = this.mAdditionalSubtypeMap.put(v21, v2);', 'File v25 = new File(,"inputmethod");\nboolean v31 = this.mAdditionalSubtypeMap.isEmpty();\nboolean v32 = v25.exists();\nboolean v33 = v25.mkdirs();', 'AtomicFile v38 = new AtomicFile(v36,"input-subtypes");\nFileOutputStream v40 = v35.startWrite();']

The method setAdditionalInputMethodSubtypes has the following similar APIs:

- API Name: getInputMethodList(I)Ljava/util/List; with Similarity Score: 0.7677111029624939
  - Access Control Level: SYS_OR_SIG and the following code:
ArrayMap v15 = new ArrayMap();
ArrayList v17 = new ArrayList();
ArrayMap v19 = new ArrayMap();
AdditionalSubtypeUtils.load(v19, v5[0]);
InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2);
List v1 = v13;
return v1;

- API Name: getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype; with Similarity Score: 0.7303505539894104
  - Access Control Level: SYS_OR_SIG and the following code:
List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
Iterator v17 = v16.iterator();
Object v19 = v17.next();
String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
Pair v23 = new Pair(Pair.first,v21);
Object v27 = this.mMethodMap.get(Pair.first);
int v28 = Integer.parseInt(Pair.second);
InputMethodSubtype v31 = v27.getSubtypeAt();

