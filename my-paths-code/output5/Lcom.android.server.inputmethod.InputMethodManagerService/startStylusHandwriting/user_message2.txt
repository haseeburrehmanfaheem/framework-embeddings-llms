The method startStylusHandwriting has the following code snippet:

This is path 1 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingServerImpl v5 = new ImeTracingServerImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
			int v8 = Binder.getCallingUid();
			boolean v9 = p0.calledFromValidUserLocked();
			if (v9 != 0) {
				long v10 = Binder.clearCallingIdentity();
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v13 = p1.asBinder();
						if (v12 == v13) {
							IBinder v14 = p1.asBinder();
							Object v15 = this.mClients.get(v14);
							if (v15 == 0) {
								int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
								if (v17 != 0) {
									boolean v16 = ;
									if (v16 != 0) {
										Integer v19 = Integer.valueOf(v8);
										boolean v11 = 0;
										if (v11 != 0) {
											boolean v22 = this.mBindingController.supportsStylusHandwriting();
											if (v22 != 0) {
												OptionalInt v23 = this.mHwController.getCurrentRequestId();
												boolean v24 = v23.isPresent();
												if (v24 != 0) {
													boolean v25 = this.mHwController.isStylusGestureOngoing();
													if (v25 != 0) {
														IInputMethodInvoker v27 = this.mCurMethod;
														IInputMethodInvoker v26 = v27;
														if (v26 == 0) {
															int v28 = v23.getAsInt();
															this.mTarget.canStartStylusHandwriting(v28);
															if (caughtException instanceof DeadObjectException != 0) {
																String v35 = IInputMethodInvoker.getCallerMethodName();
																Binder.restoreCallingIdentity(v10);
																Trace.traceEnd(32);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingClientImpl v5 = new ImeTracingClientImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
			int v8 = Binder.getCallingUid();
			boolean v9 = p0.calledFromValidUserLocked();
			if (v9 != 0) {
				long v10 = Binder.clearCallingIdentity();
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v13 = p1.asBinder();
						if (v12 == v13) {
							IBinder v14 = p1.asBinder();
							Object v15 = this.mClients.get(v14);
							if (v15 == 0) {
								int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
								if (v17 != 0) {
									boolean v16 = ;
									if (v16 != 0) {
										Integer v19 = Integer.valueOf(v8);
										boolean v11 = 0;
										if (v11 != 0) {
											boolean v22 = this.mBindingController.supportsStylusHandwriting();
											if (v22 != 0) {
												OptionalInt v23 = this.mHwController.getCurrentRequestId();
												boolean v24 = v23.isPresent();
												if (v24 != 0) {
													boolean v25 = this.mHwController.isStylusGestureOngoing();
													if (v25 != 0) {
														IInputMethodInvoker v27 = this.mCurMethod;
														IInputMethodInvoker v26 = v27;
														if (v26 == 0) {
															int v28 = v23.getAsInt();
															this.mTarget.canStartStylusHandwriting(v28);
															if (caughtException instanceof DeadObjectException != 0) {
																String v35 = IInputMethodInvoker.getCallerMethodName();
																Binder.restoreCallingIdentity(v10);
																Trace.traceEnd(32);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	if (this.sInstance != 0) {
		boolean v4 = ActivityThread.isSystem();
		boolean v3 = v4;
		if (v3 == 0) {
			ImeTracingServerImpl v5 = new ImeTracingServerImpl();
			this.sInstance = ;
			ImeTracing v2 = this.sInstance;
			v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
			int v8 = Binder.getCallingUid();
			boolean v9 = p0.calledFromValidUserLocked();
			if (v9 != 0) {
				long v10 = Binder.clearCallingIdentity();
				if (this.mCurClient == 0) {
					if (p1 == 0) {
						IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
						IBinder v13 = p1.asBinder();
						if (v12 == v13) {
							IBinder v14 = p1.asBinder();
							Object v15 = this.mClients.get(v14);
							if (v15 == 0) {
								int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
								if (v17 != 0) {
									boolean v16 = ;
									if (v16 != 0) {
										Integer v19 = Integer.valueOf(v8);
										boolean v11 = 0;
										if (v11 != 0) {
											boolean v22 = this.mBindingController.supportsStylusHandwriting();
											if (v22 != 0) {
												OptionalInt v23 = this.mHwController.getCurrentRequestId();
												boolean v24 = v23.isPresent();
												if (v24 != 0) {
													boolean v25 = this.mHwController.isStylusGestureOngoing();
													if (v25 != 0) {
														IInputMethodInvoker v27 = this.mCurMethod;
														IInputMethodInvoker v26 = v27;
														if (v26 == 0) {
															int v28 = v23.getAsInt();
															this.mTarget.canStartStylusHandwriting(v28);
															if (caughtException instanceof DeadObjectException != 0) {
																String v35 = IInputMethodInvoker.getCallerMethodName();
																Binder.restoreCallingIdentity(v10);
																Trace.traceEnd(32);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ImeTracingServerImpl v5 = new ImeTracingServerImpl();\nv2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");', 'boolean v22 = this.mBindingController.supportsStylusHandwriting();\nOptionalInt v23 = this.mHwController.getCurrentRequestId();\nthis.mTarget.canStartStylusHandwriting(v28);']

The method startStylusHandwriting has the following similar APIs:

- API Name: startInputOrWindowGainedFocus(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;Lcom/android/internal/inputmethod/IRemoteAccessibilityInputConnection;ILandroid/window/ImeOnBackInvokedDispatcher;)Lcom/android/internal/inputmethod/InputBindResult; with Similarity Score: 0.7811880111694336
  - Access Control Level: SYS_OR_SIG and the following code:
ImeTracingServerImpl v5 = new ImeTracingServerImpl();
this.sInstance = ;
ImeTracing v3 = this.sInstance;
v3.triggerManagerServiceDump("InputMethodManagerService#startInputOrWindowGainedFocus");

- API Name: startImeTrace()V with Similarity Score: 0.7038089036941528
  - Access Control Level: NONE and the following code:
ImeTracingServerImpl v4 = new ImeTracingServerImpl();
this.sInstance = ;
ImeTracing v1 = this.sInstance;
v1.startTrace(0);

