The method importKeyWithMetadata has the following code snippet:

This is path 1 for the API with depth 2:
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	Object v4 = Objects.requireNonNull(p2, "keyBytes is null");
	if (p2.length != 32) {
		int v5 = Binder.getCallingUid();
		int v6 = UserHandle.getCallingUserId();
		PlatformKeyManager.init(v6);
		PlatformDecryptionKey v9 = PlatformKeyManager.getDecryptKeyInternal(v6);
		Object v10 = new Object(1);
		Integer v11 = Integer.valueOf(v6);
		String v12 = String.format(Locale.US, "Regenerating permanently invalid Platform key for user %d.", v10);
		int v13 = Log.i("PlatformKeyManager", v12);
		PlatformKeyManager.regenerate(v6);
		PlatformEncryptionKey v15 = PlatformKeyManager.getEncryptKeyInternal(v6);
		PlatformEncryptionKey v7 = v15;
		SecretKeySpec v17 = new SecretKeySpec(p2,"AES");
		WrappedKey v19 = WrappedKey.fromSecretKey(v7, v17, p3);
		long v20 = this.mDatabase.insertKey(v6, v5, p1, v19);
		if ((v20 < -1) == 0) {
			long v21 = this.mDatabase.setShouldCreateSnapshot(v6, v5, 1);
			Object v23 = new Object(4);
			Integer v24 = Integer.valueOf(v6);
			Integer v25 = Integer.valueOf(v5);
			Integer v26 = Integer.valueOf(p2.length);
			String v27 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v23);
			int v28 = Log.i("RecoverableAppKeyStore", v27);
			String v29 = ApplicationKeyStorage.getInternalAlias(v6, v5, p1);
			KeyStore$SecretKeyEntry v30 = new KeyStore$SecretKeyEntry(v31);
			SecretKeySpec v31 = new SecretKeySpec(p2,"AES");
			KeyProtection$Builder v34 = new KeyProtection$Builder(3);
			String v36 = new String(1);
			KeyProtection$Builder v37 = v34.setBlockModes(v36);
			String v38 = new String(1);
			KeyProtection$Builder v39 = v37.setEncryptionPaddings(v38);
			KeyProtection v40 = v39.build();
			this.mKeyStore.setEntry(v29, v30, v40);
			String v43 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);
			String v42 = v43;
			String v1 = v42;
			return v1;
		}
	}
}
This is path 2 for the API with depth 2:
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	Object v4 = Objects.requireNonNull(p2, "keyBytes is null");
	if (p2.length != 32) {
		int v5 = Binder.getCallingUid();
		int v6 = UserHandle.getCallingUserId();
		PlatformKeyManager.init(v6);
		PlatformDecryptionKey v9 = PlatformKeyManager.getDecryptKeyInternal(v6);
		PlatformEncryptionKey v10 = PlatformKeyManager.getEncryptKeyInternal(v6);
		Object v11 = new Object(1);
		Integer v12 = Integer.valueOf(v6);
		String v13 = String.format(Locale.US, "Regenerating permanently invalid Platform key for user %d.", v11);
		int v14 = Log.i("PlatformKeyManager", v13);
		PlatformKeyManager.regenerate(v6);
		PlatformEncryptionKey v16 = PlatformKeyManager.getEncryptKeyInternal(v6);
		PlatformEncryptionKey v7 = v16;
		SecretKeySpec v18 = new SecretKeySpec(p2,"AES");
		WrappedKey v20 = WrappedKey.fromSecretKey(v7, v18, p3);
		long v21 = this.mDatabase.insertKey(v6, v5, p1, v20);
		if ((v21 < -1) == 0) {
			long v22 = this.mDatabase.setShouldCreateSnapshot(v6, v5, 1);
			Object v24 = new Object(4);
			Integer v25 = Integer.valueOf(v6);
			Integer v26 = Integer.valueOf(v5);
			Integer v27 = Integer.valueOf(p2.length);
			String v28 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v24);
			int v29 = Log.i("RecoverableAppKeyStore", v28);
			String v30 = ApplicationKeyStorage.getInternalAlias(v6, v5, p1);
			KeyStore$SecretKeyEntry v31 = new KeyStore$SecretKeyEntry(v32);
			SecretKeySpec v32 = new SecretKeySpec(p2,"AES");
			KeyProtection$Builder v35 = new KeyProtection$Builder(3);
			String v37 = new String(1);
			KeyProtection$Builder v38 = v35.setBlockModes(v37);
			String v39 = new String(1);
			KeyProtection$Builder v40 = v38.setEncryptionPaddings(v39);
			KeyProtection v41 = v40.build();
			this.mKeyStore.setEntry(v30, v31, v41);
			String v44 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);
			String v43 = v44;
			String v1 = v43;
			return v1;
		}
	}
}
This is path 3 for the API with depth 2:
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	Object v4 = Objects.requireNonNull(p2, "keyBytes is null");
	if (p2.length != 32) {
		int v5 = Binder.getCallingUid();
		int v6 = UserHandle.getCallingUserId();
		PlatformKeyManager.init(v6);
		PlatformDecryptionKey v9 = PlatformKeyManager.getDecryptKeyInternal(v6);
		PlatformEncryptionKey v10 = PlatformKeyManager.getEncryptKeyInternal(v6);
		PlatformEncryptionKey v7 = v10;
		SecretKeySpec v12 = new SecretKeySpec(p2,"AES");
		WrappedKey v14 = WrappedKey.fromSecretKey(v7, v12, p3);
		long v15 = this.mDatabase.insertKey(v6, v5, p1, v14);
		if ((v15 < -1) == 0) {
			long v16 = this.mDatabase.setShouldCreateSnapshot(v6, v5, 1);
			Object v18 = new Object(4);
			Integer v19 = Integer.valueOf(v6);
			Integer v20 = Integer.valueOf(v5);
			Integer v21 = Integer.valueOf(p2.length);
			String v22 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v18);
			int v23 = Log.i("RecoverableAppKeyStore", v22);
			String v24 = ApplicationKeyStorage.getInternalAlias(v6, v5, p1);
			KeyStore$SecretKeyEntry v25 = new KeyStore$SecretKeyEntry(v26);
			SecretKeySpec v26 = new SecretKeySpec(p2,"AES");
			KeyProtection$Builder v29 = new KeyProtection$Builder(3);
			String v31 = new String(1);
			KeyProtection$Builder v32 = v29.setBlockModes(v31);
			String v33 = new String(1);
			KeyProtection$Builder v34 = v32.setEncryptionPaddings(v33);
			KeyProtection v35 = v34.build();
			this.mKeyStore.setEntry(v24, v25, v35);
			String v38 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);
			String v37 = v38;
			String v1 = v37;
			return v1;
		}
	}
}

and the following sink code:
['SecretKeySpec v12 = new SecretKeySpec(p2,"AES");\nWrappedKey v14 = WrappedKey.fromSecretKey(v7, v12, p3);\nlong v15 = this.mDatabase.insertKey(v6, v5, p1, v14);\nthis.mKeyStore.setEntry(v24, v25, v35);', 'PlatformDecryptionKey v9 = PlatformKeyManager.getDecryptKeyInternal(v6);\nPlatformEncryptionKey v10 = PlatformKeyManager.getEncryptKeyInternal(v6);\nString v1 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);']

The method importKeyWithMetadata has the following similar APIs:

- API Name: generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; with Similarity Score: 0.8884230852127075
  - Access Control Level: SYS_OR_SIG and the following code:
PlatformDecryptionKey v8 = PlatformKeyManager.getDecryptKeyInternal(v5);
PlatformEncryptionKey v9 = PlatformKeyManager.getEncryptKeyInternal(v5);
PlatformEncryptionKey v15 = PlatformKeyManager.getEncryptKeyInternal(v5);
WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);

- API Name: generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String; with Similarity Score: 0.8455150127410889
  - Access Control Level: SYS_OR_SIG and the following code:
SecretKey v18 = this.mKeyGenerator.generateKey();
WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);
long v20 = this.mDatabase.insertKey(v5, v4, p1, v19);

