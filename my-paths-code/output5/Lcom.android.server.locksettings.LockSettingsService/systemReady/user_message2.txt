The method systemReady has the following code snippet:

This is path 1 for the API with depth 2:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		p0.migrateOldData();
		if (this.mGateKeeperService == 0) {
			IBinder v11 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
			if (v11 == 0) {
				LockSettingsService$GateKeeperDiedRecipient v12 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
				v11.linkToDeath(v12, 0);
				if (v11 != 0) {
					IInterface v17 = v11.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
					if (v17 == 0) {
						if (v17 instanceof IGateKeeperService == 0) {
							IGateKeeperService$Stub$Proxy v18 = new IGateKeeperService$Stub$Proxy(v11);
							IGateKeeperService v16 = v18;
							this.mGateKeeperService = v16;
							IGateKeeperService v10 = v16;
							if (this.mWeaver == 0) {
								this.mWeaverConfig = 0;
								IWeaver v22 = IWeaver.getService(1);
								IWeaver v21 = 0;
								this.mWeaver = v21;
								if (v21 == 0) {
									SyntheticPasswordManager$$ExternalSyntheticLambda0 v24 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
									v21.getConfig(v24);
									Map v28 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
									HashSet v29 = new HashSet();
									Set v31 = v28.entrySet();
									Iterator v32 = v31.iterator();
									boolean v33 = v32.hasNext();
									if (v33 == 0) {
										Set v27 = v29;
										if (this.mSlotMap != 0) {
											HashSet v35 = new HashSet();
											Set v37 = this.mSlotMap.entrySet();
											Iterator v38 = v37.iterator();
											boolean v39 = v38.hasNext();
											if (v39 == 0) {
												Iterator v40 = v35.iterator();
												boolean v41 = v40.hasNext();
												if (v41 == 0) {
													Iterator v42 = v27.iterator();
													boolean v43 = v42.hasNext();
													if (v43 == 0) {
														PasswordSlotManager.saveSlotMap();
														p0.getAuthSecretHal();
														Context v47 = this.mContext;
														boolean v48 = LockPatternUtils.frpCredentialEnabled(v47);
														if (v48 == 0) {
															Context v50 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
															ContentResolver v51 = v50.getContentResolver();
															int v52 = Settings$Global.getInt(v51, "device_provisioned", 0);
															if (v52 == 0) {
																boolean v49 = ;
																if (v49 != 0) {
																	IGateKeeperService v55 = this.this$0.getGateKeeperService();
																	v55.reportDeviceSetupComplete();
																	boolean v59 = LockSettingsStorage$Cache.contains(2, "", p1);
																	boolean v58 = v59;
																	if (v58 == 0) {
																		LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
																		int v63 = this.mCache.getVersion();
																		int v62 = v63;
																		SQLiteDatabase v64 = this.mOpenHelper.getReadableDatabase();
																		String v65 = new String(1);
																		String v66 = Integer.toString(0);
																		Cursor v67 = v64.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v65, 0, 0, 0);
																		if (v67 == 0) {
																			boolean v68 = v67.moveToNext();
																			if (v68 == 0) {
																				v67.close();
																				LockSettingsStorage$CredentialHash v71 = LockSettingsStorage.readPasswordHashIfExists(p1);
																				if (v71 == 0) {
																					LockSettingsStorage$CredentialHash v72 = LockSettingsStorage.readPatternHashIfExists(p1);
																					if (v72 == 0) {
																						LockSettingsStorage$CredentialHash v73 = LockSettingsStorage$CredentialHash.createEmptyHash();
																						LockSettingsStorage$CredentialHash v70 = v73;
																						FingerprintManager v74 = this.mInjector.getFingerprintManager();
																						FaceManager v75 = this.mInjector.getFaceManager();
																						this.mBiometricDeferredQueue.systemReady(v74, v75);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		p0.migrateOldData();
		if (this.mGateKeeperService == 0) {
			IBinder v11 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
			if (v11 == 0) {
				LockSettingsService$GateKeeperDiedRecipient v12 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
				v11.linkToDeath(v12, 0);
				if (v11 != 0) {
					IInterface v17 = v11.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
					if (v17 == 0) {
						if (v17 instanceof IGateKeeperService == 0) {
							IGateKeeperService v16 = v17;
							this.mGateKeeperService = v16;
							IGateKeeperService v10 = v16;
							if (this.mWeaver == 0) {
								this.mWeaverConfig = 0;
								IWeaver v20 = IWeaver.getService(1);
								IWeaver v19 = 0;
								this.mWeaver = v19;
								if (v19 == 0) {
									SyntheticPasswordManager$$ExternalSyntheticLambda0 v22 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
									v19.getConfig(v22);
									Map v26 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
									HashSet v27 = new HashSet();
									Set v29 = v26.entrySet();
									Iterator v30 = v29.iterator();
									boolean v31 = v30.hasNext();
									if (v31 == 0) {
										Set v25 = v27;
										if (this.mSlotMap != 0) {
											HashSet v33 = new HashSet();
											Set v35 = this.mSlotMap.entrySet();
											Iterator v36 = v35.iterator();
											boolean v37 = v36.hasNext();
											if (v37 == 0) {
												Iterator v38 = v33.iterator();
												boolean v39 = v38.hasNext();
												if (v39 == 0) {
													Iterator v40 = v25.iterator();
													boolean v41 = v40.hasNext();
													if (v41 == 0) {
														PasswordSlotManager.saveSlotMap();
														p0.getAuthSecretHal();
														Context v45 = this.mContext;
														boolean v46 = LockPatternUtils.frpCredentialEnabled(v45);
														if (v46 == 0) {
															Context v48 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
															ContentResolver v49 = v48.getContentResolver();
															int v50 = Settings$Global.getInt(v49, "device_provisioned", 0);
															if (v50 == 0) {
																boolean v47 = ;
																if (v47 != 0) {
																	IGateKeeperService v53 = this.this$0.getGateKeeperService();
																	v53.reportDeviceSetupComplete();
																	boolean v57 = LockSettingsStorage$Cache.contains(2, "", p1);
																	boolean v56 = v57;
																	if (v56 == 0) {
																		LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
																		int v61 = this.mCache.getVersion();
																		int v60 = v61;
																		SQLiteDatabase v62 = this.mOpenHelper.getReadableDatabase();
																		String v63 = new String(1);
																		String v64 = Integer.toString(0);
																		Cursor v65 = v62.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v63, 0, 0, 0);
																		if (v65 == 0) {
																			boolean v66 = v65.moveToNext();
																			if (v66 == 0) {
																				v65.close();
																				LockSettingsStorage$CredentialHash v69 = LockSettingsStorage.readPasswordHashIfExists(p1);
																				if (v69 == 0) {
																					LockSettingsStorage$CredentialHash v70 = LockSettingsStorage.readPatternHashIfExists(p1);
																					if (v70 == 0) {
																						LockSettingsStorage$CredentialHash v71 = LockSettingsStorage$CredentialHash.createEmptyHash();
																						LockSettingsStorage$CredentialHash v68 = v71;
																						FingerprintManager v72 = this.mInjector.getFingerprintManager();
																						FaceManager v73 = this.mInjector.getFaceManager();
																						this.mBiometricDeferredQueue.systemReady(v72, v73);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void systemReady(){
	if (v1 == 0) {
		Object v2 = new Object(3);
		int v3 = ILockSettings$Stub.getCallingUid();
		Integer v4 = Integer.valueOf(v3);
		int v5 = EventLog.writeEvent(1397638484, v2);
		PackageManager v7 = this.mContext.getPackageManager();
		boolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");
		this.mHasSecureLockScreen = v8;
		p0.migrateOldData();
		if (this.mGateKeeperService == 0) {
			IBinder v11 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
			if (v11 == 0) {
				LockSettingsService$GateKeeperDiedRecipient v12 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
				v11.linkToDeath(v12, 0);
				if (v11 != 0) {
					IInterface v17 = v11.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
					if (v17 == 0) {
						if (v17 instanceof IGateKeeperService == 0) {
							IGateKeeperService$Stub$Proxy v18 = new IGateKeeperService$Stub$Proxy(v11);
							IGateKeeperService v16 = v18;
							this.mGateKeeperService = v16;
							IGateKeeperService v10 = v16;
							if (this.mWeaver == 0) {
								this.mWeaverConfig = 0;
								IWeaver v22 = IWeaver.getService(1);
								IWeaver v21 = v22;
								this.mWeaver = v21;
								if (v21 == 0) {
									SyntheticPasswordManager$$ExternalSyntheticLambda0 v23 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
									v21.getConfig(v23);
									Map v27 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
									HashSet v28 = new HashSet();
									Set v30 = v27.entrySet();
									Iterator v31 = v30.iterator();
									boolean v32 = v31.hasNext();
									if (v32 == 0) {
										Set v26 = v28;
										if (this.mSlotMap != 0) {
											HashSet v34 = new HashSet();
											Set v36 = this.mSlotMap.entrySet();
											Iterator v37 = v36.iterator();
											boolean v38 = v37.hasNext();
											if (v38 == 0) {
												Iterator v39 = v34.iterator();
												boolean v40 = v39.hasNext();
												if (v40 == 0) {
													Iterator v41 = v26.iterator();
													boolean v42 = v41.hasNext();
													if (v42 == 0) {
														PasswordSlotManager.saveSlotMap();
														p0.getAuthSecretHal();
														Context v46 = this.mContext;
														boolean v47 = LockPatternUtils.frpCredentialEnabled(v46);
														if (v47 == 0) {
															Context v49 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
															ContentResolver v50 = v49.getContentResolver();
															int v51 = Settings$Global.getInt(v50, "device_provisioned", 0);
															if (v51 == 0) {
																boolean v48 = ;
																if (v48 != 0) {
																	IGateKeeperService v54 = this.this$0.getGateKeeperService();
																	v54.reportDeviceSetupComplete();
																	boolean v58 = LockSettingsStorage$Cache.contains(2, "", p1);
																	boolean v57 = v58;
																	if (v57 == 0) {
																		LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
																		int v62 = this.mCache.getVersion();
																		int v61 = v62;
																		SQLiteDatabase v63 = this.mOpenHelper.getReadableDatabase();
																		String v64 = new String(1);
																		String v65 = Integer.toString(0);
																		Cursor v66 = v63.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v64, 0, 0, 0);
																		if (v66 == 0) {
																			boolean v67 = v66.moveToNext();
																			if (v67 == 0) {
																				v66.close();
																				LockSettingsStorage$CredentialHash v70 = LockSettingsStorage.readPasswordHashIfExists(p1);
																				if (v70 == 0) {
																					LockSettingsStorage$CredentialHash v71 = LockSettingsStorage.readPatternHashIfExists(p1);
																					if (v71 == 0) {
																						LockSettingsStorage$CredentialHash v72 = LockSettingsStorage$CredentialHash.createEmptyHash();
																						LockSettingsStorage$CredentialHash v69 = v72;
																						FingerprintManager v73 = this.mInjector.getFingerprintManager();
																						FaceManager v74 = this.mInjector.getFaceManager();
																						this.mBiometricDeferredQueue.systemReady(v73, v74);
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['PackageManager v7 = this.mContext.getPackageManager();\nboolean v8 = v7.hasSystemFeature("android.software.secure_lock_screen");\nthis.mHasSecureLockScreen = v8;', 'IGateKeeperService$Stub$Proxy v18 = new IGateKeeperService$Stub$Proxy(v11);\nIGateKeeperService v16 = v18;\nthis.mGateKeeperService = v16;\nIGateKeeperService v10 = v16;', 'IWeaver v22 = IWeaver.getService(1);\nIWeaver v21 = v22;\nthis.mWeaver = v21;', 'LockSettingsStorage$CredentialHash v71 = LockSettingsStorage.readPasswordHashIfExists(p1);\nif (v71 == 0) {\n    LockSettingsStorage$CredentialHash v72 = LockSettingsStorage.readPatternHashIfExists(p1);']

The method systemReady has the following similar APIs:

- API Name: isWeakEscrowTokenValid(J[BI)Z with Similarity Score: 0.9845106601715088
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService$Stub$Proxy v21 = new IGateKeeperService$Stub$Proxy(v14);
IGateKeeperService v19 = v21;
this.mGateKeeperService = v19;

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.8911954164505005
  - Access Control Level: SYS_OR_SIG and the following code:
LockSettingsStorage$CredentialHash v36 = LockSettingsStorage.readPasswordHashIfExists(p2);
LockSettingsStorage$CredentialHash v37 = LockSettingsStorage.readPatternHashIfExists(p2);
VerifyCredentialResponse v48 = LockSettingsService.convertResponse();

