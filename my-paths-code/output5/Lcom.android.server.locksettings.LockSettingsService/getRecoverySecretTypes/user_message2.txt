The method getRecoverySecretTypes has the following code snippet:

This is path 1 for the API with depth 2:
public [I getRecoverySecretTypes(){
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	SQLiteDatabase v6 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v7 = new String(4);
	String v8 = new String(2);
	String v9 = Integer.toString(v3);
	String v10 = Integer.toString(v4);
	Cursor v11 = v6.query("recovery_service_metadata", v7, "user_id = ? AND uid = ?", v8, 0, 0, 0);
	int v12 = v11.getCount();
	if (v12 != 0) {
		if (v12 <= 1) {
			boolean v13 = v11.moveToFirst();
			int v14 = v11.getColumnIndexOrThrow("secret_types");
			boolean v15 = v11.isNull(v14);
			if (v15 == 0) {
				String v16 = v11.getString(v14);
				boolean v17 = TextUtils.isEmpty(v16);
				if (v17 == 0) {
					String v18 = v16.split(",");
					[I v19 = new [I(v18.length);
					if ( >= v18.length) {
						v11.close();
						[I v5 = v19;
						[I v1 = v5;
						return v1;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public [I getRecoverySecretTypes(){
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	SQLiteDatabase v6 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v7 = new String(4);
	String v8 = new String(2);
	String v9 = Integer.toString(v3);
	String v10 = Integer.toString(v4);
	Cursor v11 = v6.query("recovery_service_metadata", v7, "user_id = ? AND uid = ?", v8, 0, 0, 0);
	int v12 = v11.getCount();
	if (v12 != 0) {
		if (v12 <= 1) {
			Object v13 = new Object(3);
			Integer v14 = Integer.valueOf(v12);
			Integer v15 = Integer.valueOf(v3);
			Integer v16 = Integer.valueOf(v4);
			String v17 = String.format(Locale.US, "%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1.", v13);
			int v18 = Log.wtf("RecoverableKeyStoreDb", v17);
			[I v19 = new [I(0);
			v11.close();
			[I v5 = v19;
			[I v1 = v5;
			return v1;
		}
	}
}

and the following sink code:
['SQLiteDatabase v6 = this.mKeyStoreDbHelper.getReadableDatabase();\nCursor v11 = v6.query("recovery_service_metadata", v7, "user_id = ? AND uid = ?", v8, 0, 0, 0);\nint v12 = v11.getCount();\nif (v12 != 0) { ... }\n[I v19 = new [I(v18.length);\nreturn v1;', 'Object v13 = new Object(3);\nInteger v14 = Integer.valueOf(v12);\nInteger v15 = Integer.valueOf(v3);\nInteger v16 = Integer.valueOf(v4);\nString v17 = String.format(Locale.US, "%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1.", v13);\n[I v19 = new [I(0);\nreturn v1;']

The method getRecoverySecretTypes has the following similar APIs:

- API Name: setRecoverySecretTypes([I)V with Similarity Score: 0.9039772152900696
  - Access Control Level: NONE and the following code:
SQLiteDatabase v7 = this.mKeyStoreDbHelper.getReadableDatabase();
Cursor v12 = v7.query("recovery_service_metadata", v8, "user_id = ? AND uid = ?", v9, 0, 0, 0);
String v17 = v12.getString(v15);
SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase();
v25.put("secret_types", v33);
int v39 = v24.update("recovery_service_metadata", v25, "user_id = ? AND uid = ?", v36);

- API Name: setRecoverySecretTypes([I)V with Similarity Score: 0.8471571803092957
  - Access Control Level: NONE and the following code:
SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase();
ContentValues v25 = new ContentValues();
RecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v4, v5);

