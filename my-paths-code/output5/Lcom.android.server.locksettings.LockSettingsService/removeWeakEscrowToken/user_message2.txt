The method removeWeakEscrowToken has the following code snippet:

This is path 1 for the API with depth 2:
public boolean removeWeakEscrowToken(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		long v5 = Binder.clearCallingIdentity();
		long v8 = LockSettingsService.getLong("sp-handle", 0, p2);
		long v7 = v8;
		if ((p1 < v7) != 0) {
			Integer v10 = Integer.valueOf(p2);
			boolean v11 = this.tokenMap.containsKey(v10);
			if (v11 != 0) {
				Integer v12 = Integer.valueOf(p2);
				Object v13 = this.tokenMap.get(v12);
				Long v14 = Long.valueOf(p1);
				Object v15 = v13.remove(v14);
				if (v15 == 0) {
					boolean v9 = ;
					if (v9 == 0) {
						boolean v17 = SyntheticPasswordManager.hasState("spblob", p1, p2);
						boolean v16 = v17;
						if (v16 == 0) {
							byte[] v19 = SyntheticPasswordManager.loadState("spblob", p1, p2);
							SyntheticPasswordManager$SyntheticPasswordBlob v20 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v19);
							SyntheticPasswordManager.destroySyntheticPassword(p1, p2);
							SyntheticPasswordManager.destroyState("secdis", p1, p2);
							if (SyntheticPasswordManager$SyntheticPasswordBlob.mType != 2) {
								SyntheticPasswordManager.notifyWeakEscrowTokenRemovedListeners(p1, p2);
								boolean v6 = 1;
								Binder.restoreCallingIdentity(v5);
								return v6;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean removeWeakEscrowToken(long p1, int p2){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		long v5 = Binder.clearCallingIdentity();
		long v8 = LockSettingsService.getLong("sp-handle", 0, p2);
		long v7 = v8;
		if ((p1 < v7) != 0) {
			Integer v10 = Integer.valueOf(p2);
			boolean v11 = this.tokenMap.containsKey(v10);
			if (v11 != 0) {
				Integer v12 = Integer.valueOf(p2);
				Object v13 = this.tokenMap.get(v12);
				Long v14 = Long.valueOf(p1);
				Object v15 = v13.remove(v14);
				if (v15 == 0) {
					boolean v9 = ;
					if (v9 == 0) {
						boolean v17 = SyntheticPasswordManager.hasState("spblob", p1, p2);
						boolean v16 = v17;
						if (v16 == 0) {
							byte[] v19 = SyntheticPasswordManager.loadState("spblob", p1, p2);
							SyntheticPasswordManager$SyntheticPasswordBlob v20 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v19);
							SyntheticPasswordManager.destroySyntheticPassword(p1, p2);
							SyntheticPasswordManager.destroyState("secdis", p1, p2);
							if (SyntheticPasswordManager$SyntheticPasswordBlob.mType != 2) {
								boolean v6 = 1;
								Binder.restoreCallingIdentity(v5);
								return v6;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v10 = Integer.valueOf(p2);\nObject v13 = this.tokenMap.get(v12);\nLong v14 = Long.valueOf(p1);\nObject v15 = v13.remove(v14);', 'boolean v17 = SyntheticPasswordManager.hasState("spblob", p1, p2);\nbyte[] v19 = SyntheticPasswordManager.loadState("spblob", p1, p2);\nSyntheticPasswordManager$SyntheticPasswordBlob v20 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v19);\nSyntheticPasswordManager.destroySyntheticPassword(p1, p2);\nSyntheticPasswordManager.destroyState("secdis", p1, p2);', 'long v8 = LockSettingsService.getLong("sp-handle", 0, p2);\nif ((p1 < v7) != 0) {']

The method removeWeakEscrowToken has the following similar APIs:

- API Name: hasPendingEscrowToken(I)Z with Similarity Score: 0.9095367789268494
  - Access Control Level: NONE and the following code:
Integer v3 = Integer.valueOf(p1);
boolean v4 = this.tokenMap.containsKey(v3);
ArraySet v5 = new ArraySet(v8);
Integer v6 = Integer.valueOf(p1);
Object v7 = this.tokenMap.get(v6);

- API Name: addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J with Similarity Score: 0.8659842014312744
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v83 = Integer.valueOf(p3);
Object v84 = this.tokenMap.get(v83);
Long v85 = Long.valueOf(v69);
Object v86 = v84.put(v85, v76);
long v68 = v69;

