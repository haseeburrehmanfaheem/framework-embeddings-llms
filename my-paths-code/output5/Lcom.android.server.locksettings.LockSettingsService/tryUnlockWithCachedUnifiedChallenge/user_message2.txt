The method tryUnlockWithCachedUnifiedChallenge has the following code snippet:

This is path 1 for the API with depth 2:
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	if (v2 != 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("com.android.server.locksettings.unified_profile_cache_v2_");
		StringBuilder v7 = v4.append(p1);
		String v8 = v4.toString();
		String v3 = v8;
		Key v9 = this.mKeyStore.getKey(v3, 0);
		if (v9 != 0) {
			byte[] v10 = Arrays.copyOf(v2, 12);
			byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
			Cipher v12 = Cipher.getInstance("AES/GCM/NoPadding");
			GCMParameterSpec v13 = new GCMParameterSpec(128,v10);
			LockscreenCredential v1 = 0;
			if (v1 != 0) {
				if (v1 == 0) {
					LockscreenCredential.ensureNotZeroized();
					if (this.mType != -1) {
						boolean v17 = ;
						if (v17 != 0) {
							if (p1 != -9999) {
								ContentResolver v19 = this.mContext.getContentResolver();
								int v21 = Settings$Global.getInt(v19, "device_provisioned", 0);
								int v20 = v21;
								if (v20 == 0) {
									boolean v23 = this.mInjector.hasEnrolledBiometrics(p2);
									if ((p4 & 1) == 0) {
										boolean v32 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
										if (v32 != 0) {
											if (p2 != -9999) {
												long v33 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
												IGateKeeperService v34 = LockSettingsService.getGateKeeperService();
												SyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v33, p1, p2, p3);
												int v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
												if (v36 != 0) {
													byte[] v37 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
													this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v37);
													IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
													VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
													int v41 = v40.getResponseCode();
													if (v41 == 0) {
														VerifyCredentialResponse v22 = VerifyCredentialResponse.ERROR;
														if (v22 == 0) {
															if (p1 != -9999) {
																LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);
																if (v44 == 0) {
																	LockSettingsStorage$CredentialHash v45 = LockSettingsStorage.readPatternHashIfExists(p2);
																	if (v45 == 0) {
																		LockSettingsStorage$CredentialHash v46 = LockSettingsStorage$CredentialHash.createEmptyHash();
																		LockSettingsStorage$CredentialHash v43 = v46;
																		if (LockSettingsStorage$CredentialHash.type != 2) {
																			int v48 = LockscreenCredential.getType();
																			if (v48 == 4) {
																				int v49 = LockscreenCredential.getType();
																				if (v49 != 3) {
																					boolean v47 = ;
																					if (v47 != 0) {
																						if (v43 == 0) {
																							if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																								boolean v51 = p1.isNone();
																								if (v51 == 0) {
																									if (v43 == 0) {
																										if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																											boolean v52 = p1.isNone();
																											if (v52 == 0) {
																												StrictMode.noteDiskRead();
																												IGateKeeperService v54 = LockSettingsService.getGateKeeperService();
																												byte[] v55 = p1.getCredential();
																												GateKeeperResponse v56 = v54.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v55);
																												VerifyCredentialResponse v57 = LockSettingsService.convertResponse();
																												boolean v58 = .getShouldReEnroll();
																												int v59 = v57.getResponseCode();
																												if (v59 != 0) {
																													if (p3 == 0) {
																														p3.onCredentialVerified();
																														LockSettingsService.setUserPasswordMetrics(p1, p2);
																														byte[] v63 = p1.getCredential();
																														LockSettingsService.unlockKeystore(v63, p2);
																														byte[] v71 = LockSettingsService.secretFromCredential(p1);
																														LockSettingsService.unlockUser(p2, v71);
																														boolean v73 = LockSettingsService.isProfileWithSeparatedLock(p2);
																														if (v73 == 0) {
																															LockSettingsService.setDeviceUnlockedForUser(p2);
																															if (v58 == 0) {
																																boolean v75 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
																																LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																																VerifyCredentialResponse v50 = v57;
																																int v77 = this.mResponseCode;
																																if (v77 != 0) {
																																	Message v79 = this.mHandler.obtainMessage(5, p2, 0);
																																	v79.sendToTarget();
																																	VerifyCredentialResponse v16 = v50;
																																	int v81 = v16.getResponseCode();
																																	if (v81 != 0) {
																																		if (this.mCredential == 0) {
																																			Arrays.fill(this.mCredential, 0);
																																			this.mCredential = 0;
																																			return ;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	if (v2 != 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("com.android.server.locksettings.unified_profile_cache_v2_");
		StringBuilder v7 = v4.append(p1);
		String v8 = v4.toString();
		String v3 = v8;
		Key v9 = this.mKeyStore.getKey(v3, 0);
		if (v9 != 0) {
			byte[] v10 = Arrays.copyOf(v2, 12);
			byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
			Cipher v12 = Cipher.getInstance("AES/GCM/NoPadding");
			GCMParameterSpec v13 = new GCMParameterSpec(128,v10);
			LockscreenCredential v1 = 0;
			if (v1 != 0) {
				if (v1 == 0) {
					LockscreenCredential.ensureNotZeroized();
					if (this.mType != -1) {
						boolean v17 = ;
						if (v17 != 0) {
							if (p1 != -9999) {
								ContentResolver v19 = this.mContext.getContentResolver();
								int v21 = Settings$Global.getInt(v19, "device_provisioned", 0);
								int v20 = v21;
								if (v20 == 0) {
									boolean v23 = this.mInjector.hasEnrolledBiometrics(p2);
									if ((p4 & 1) == 0) {
										boolean v32 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
										if (v32 != 0) {
											if (p2 != -9999) {
												long v33 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
												IGateKeeperService v34 = LockSettingsService.getGateKeeperService();
												SyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v33, p1, p2, p3);
												int v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
												if (v36 != 0) {
													byte[] v37 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
													this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v37);
													IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
													VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
													int v41 = v40.getResponseCode();
													if (v41 == 0) {
														VerifyCredentialResponse v22 = VerifyCredentialResponse.ERROR;
														if (v22 == 0) {
															if (p1 != -9999) {
																LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);
																if (v44 == 0) {
																	LockSettingsStorage$CredentialHash v45 = LockSettingsStorage.readPatternHashIfExists(p2);
																	if (v45 == 0) {
																		LockSettingsStorage$CredentialHash v43 = v45;
																		if (LockSettingsStorage$CredentialHash.type != 2) {
																			int v47 = LockscreenCredential.getType();
																			if (v47 == 4) {
																				int v48 = LockscreenCredential.getType();
																				if (v48 != 3) {
																					boolean v46 = ;
																					if (v46 != 0) {
																						if (v43 == 0) {
																							if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																								boolean v50 = p1.isNone();
																								if (v50 == 0) {
																									if (v43 == 0) {
																										if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																											boolean v51 = p1.isNone();
																											if (v51 == 0) {
																												StrictMode.noteDiskRead();
																												IGateKeeperService v53 = LockSettingsService.getGateKeeperService();
																												byte[] v54 = p1.getCredential();
																												GateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);
																												VerifyCredentialResponse v56 = LockSettingsService.convertResponse();
																												boolean v57 = .getShouldReEnroll();
																												int v58 = v56.getResponseCode();
																												if (v58 != 0) {
																													if (p3 == 0) {
																														p3.onCredentialVerified();
																														LockSettingsService.setUserPasswordMetrics(p1, p2);
																														byte[] v62 = p1.getCredential();
																														LockSettingsService.unlockKeystore(v62, p2);
																														byte[] v70 = LockSettingsService.secretFromCredential(p1);
																														LockSettingsService.unlockUser(p2, v70);
																														boolean v72 = LockSettingsService.isProfileWithSeparatedLock(p2);
																														if (v72 == 0) {
																															LockSettingsService.setDeviceUnlockedForUser(p2);
																															if (v57 == 0) {
																																boolean v74 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
																																LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																																VerifyCredentialResponse v49 = v56;
																																int v76 = this.mResponseCode;
																																if (v76 != 0) {
																																	Message v78 = this.mHandler.obtainMessage(5, p2, 0);
																																	v78.sendToTarget();
																																	VerifyCredentialResponse v16 = v49;
																																	int v80 = v16.getResponseCode();
																																	if (v80 != 0) {
																																		if (this.mCredential == 0) {
																																			Arrays.fill(this.mCredential, 0);
																																			this.mCredential = 0;
																																			return ;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	if (v2 != 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("com.android.server.locksettings.unified_profile_cache_v2_");
		StringBuilder v7 = v4.append(p1);
		String v8 = v4.toString();
		String v3 = v8;
		Key v9 = this.mKeyStore.getKey(v3, 0);
		if (v9 != 0) {
			byte[] v10 = Arrays.copyOf(v2, 12);
			byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
			Cipher v12 = Cipher.getInstance("AES/GCM/NoPadding");
			LockscreenCredential v1 = 0;
			if (v1 != 0) {
				if (v1 == 0) {
					LockscreenCredential.ensureNotZeroized();
					if (this.mType != -1) {
						boolean v15 = ;
						if (v15 != 0) {
							if (p1 != -9999) {
								ContentResolver v17 = this.mContext.getContentResolver();
								int v19 = Settings$Global.getInt(v17, "device_provisioned", 0);
								int v18 = v19;
								if (v18 == 0) {
									boolean v21 = this.mInjector.hasEnrolledBiometrics(p2);
									if ((p4 & 1) == 0) {
										boolean v30 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
										if (v30 != 0) {
											if (p2 != -9999) {
												long v31 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
												IGateKeeperService v32 = LockSettingsService.getGateKeeperService();
												SyntheticPasswordManager$AuthenticationResult v33 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v32, v31, p1, p2, p3);
												int v34 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
												if (v34 != 0) {
													byte[] v35 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
													this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v35);
													IGateKeeperService v37 = LockSettingsService.getGateKeeperService();
													VerifyCredentialResponse v38 = this.mSpManager.verifyChallenge(v37, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
													int v39 = v38.getResponseCode();
													if (v39 == 0) {
														VerifyCredentialResponse v20 = VerifyCredentialResponse.ERROR;
														if (v20 == 0) {
															if (p1 != -9999) {
																LockSettingsStorage$CredentialHash v42 = LockSettingsStorage.readPasswordHashIfExists(p2);
																if (v42 == 0) {
																	LockSettingsStorage$CredentialHash v43 = LockSettingsStorage.readPatternHashIfExists(p2);
																	if (v43 == 0) {
																		LockSettingsStorage$CredentialHash v44 = LockSettingsStorage$CredentialHash.createEmptyHash();
																		LockSettingsStorage$CredentialHash v41 = v44;
																		if (LockSettingsStorage$CredentialHash.type != 2) {
																			int v46 = LockscreenCredential.getType();
																			if (v46 == 4) {
																				int v47 = LockscreenCredential.getType();
																				if (v47 != 3) {
																					boolean v45 = ;
																					if (v45 != 0) {
																						if (v41 == 0) {
																							if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																								boolean v49 = p1.isNone();
																								if (v49 == 0) {
																									if (v41 == 0) {
																										if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																											boolean v50 = p1.isNone();
																											if (v50 == 0) {
																												StrictMode.noteDiskRead();
																												IGateKeeperService v52 = LockSettingsService.getGateKeeperService();
																												byte[] v53 = p1.getCredential();
																												GateKeeperResponse v54 = v52.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v53);
																												VerifyCredentialResponse v55 = LockSettingsService.convertResponse();
																												boolean v56 = .getShouldReEnroll();
																												int v57 = v55.getResponseCode();
																												if (v57 != 0) {
																													if (p3 == 0) {
																														p3.onCredentialVerified();
																														LockSettingsService.setUserPasswordMetrics(p1, p2);
																														byte[] v61 = p1.getCredential();
																														LockSettingsService.unlockKeystore(v61, p2);
																														byte[] v69 = LockSettingsService.secretFromCredential(p1);
																														LockSettingsService.unlockUser(p2, v69);
																														boolean v71 = LockSettingsService.isProfileWithSeparatedLock(p2);
																														if (v71 == 0) {
																															LockSettingsService.setDeviceUnlockedForUser(p2);
																															if (v56 == 0) {
																																boolean v73 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
																																LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																																VerifyCredentialResponse v48 = v55;
																																int v75 = this.mResponseCode;
																																if (v75 != 0) {
																																	Message v77 = this.mHandler.obtainMessage(5, p2, 0);
																																	v77.sendToTarget();
																																	VerifyCredentialResponse v14 = v48;
																																	int v79 = v14.getResponseCode();
																																	if (v79 != 0) {
																																		if (this.mCredential == 0) {
																																			Arrays.fill(this.mCredential, 0);
																																			this.mCredential = 0;
																																			return ;
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v2 = this.mEncryptedPasswords.get(p1);\nKey v9 = this.mKeyStore.getKey(v3, 0);\nbyte[] v10 = Arrays.copyOf(v2, 12);\nbyte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);', 'SyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v31, p1, p2, p3);\nint v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();\nbyte[] v37 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();', 'VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);\nint v41 = v40.getResponseCode();\nLockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);', 'IGateKeeperService v53 = LockSettingsService.getGateKeeperService();\nbyte[] v54 = p1.getCredential();\nGateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);', 'LockSettingsService.unlockKeystore(v61, p2);\nbyte[] v69 = LockSettingsService.secretFromCredential(p1);\nLockSettingsService.unlockUser(p2, v69);']

The method tryUnlockWithCachedUnifiedChallenge has the following similar APIs:

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9933100938796997
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v38 = LockSettingsService.getGateKeeperService();
byte[] v39 = p1.getCredential();
GateKeeperResponse v40 = v38.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v39);

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9522138237953186
  - Access Control Level: SYS_OR_SIG and the following code:
SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);
byte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);

