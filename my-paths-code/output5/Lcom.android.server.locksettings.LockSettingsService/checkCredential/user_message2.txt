The method checkCredential has the following code snippet:

This is path 1 for the API with depth 2:
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	if (p1 == 0) {
		boolean v3 = p1.isNone();
		if (v3 != 0) {
			if (p2 != -9999) {
				ContentResolver v4 = this.mContext.getContentResolver();
				int v6 = Settings$Global.getInt(v4, "device_provisioned", 0);
				int v5 = v6;
				if (v5 == 0) {
					boolean v8 = this.mInjector.hasEnrolledBiometrics(p2);
					if ((p4 & 1) == 0) {
						boolean v17 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
						if (v17 != 0) {
							if (p2 != -9999) {
								long v18 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
								IGateKeeperService v19 = LockSettingsService.getGateKeeperService();
								SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);
								int v21 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
								if (v21 != 0) {
									byte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
									this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);
									IGateKeeperService v24 = LockSettingsService.getGateKeeperService();
									VerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
									int v26 = v25.getResponseCode();
									if (v26 == 0) {
										VerifyCredentialResponse v7 = VerifyCredentialResponse.ERROR;
										if (v7 == 0) {
											if (p2 != -9999) {
												LockSettingsStorage$CredentialHash v29 = LockSettingsStorage.readPasswordHashIfExists(p2);
												if (v29 == 0) {
													LockSettingsStorage$CredentialHash v30 = LockSettingsStorage.readPatternHashIfExists(p2);
													if (v30 == 0) {
														LockSettingsStorage$CredentialHash v31 = LockSettingsStorage$CredentialHash.createEmptyHash();
														LockSettingsStorage$CredentialHash v28 = v31;
														if (LockSettingsStorage$CredentialHash.type != 2) {
															int v33 = LockscreenCredential.getType();
															if (v33 == 4) {
																int v34 = LockscreenCredential.getType();
																if (v34 != 3) {
																	boolean v32 = ;
																	if (v32 != 0) {
																		if (v28 == 0) {
																			if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																				boolean v36 = p1.isNone();
																				if (v36 == 0) {
																					if (v28 == 0) {
																						if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																							boolean v37 = p1.isNone();
																							if (v37 == 0) {
																								StrictMode.noteDiskRead();
																								IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
																								byte[] v40 = p1.getCredential();
																								GateKeeperResponse v41 = v39.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v40);
																								VerifyCredentialResponse v42 = LockSettingsService.convertResponse();
																								boolean v43 = .getShouldReEnroll();
																								int v44 = v42.getResponseCode();
																								if (v44 != 0) {
																									if (p3 == 0) {
																										p3.onCredentialVerified();
																										LockSettingsService.setUserPasswordMetrics(p1, p2);
																										byte[] v48 = p1.getCredential();
																										LockSettingsService.unlockKeystore(v48, p2);
																										byte[] v56 = LockSettingsService.secretFromCredential(p1);
																										LockSettingsService.unlockUser(p2, v56);
																										boolean v58 = LockSettingsService.isProfileWithSeparatedLock(p2);
																										if (v58 == 0) {
																											LockSettingsService.setDeviceUnlockedForUser(p2);
																											if (v43 == 0) {
																												boolean v60 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
																												LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																												VerifyCredentialResponse v35 = v42;
																												int v62 = this.mResponseCode;
																												if (v62 != 0) {
																													Message v64 = this.mHandler.obtainMessage(5, p2, 0);
																													v64.sendToTarget();
																													VerifyCredentialResponse v2 = v35;
																													p0.scheduleGc();
																													return v2;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public VerifyCredentialResponse checkCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3){
	if (p1 == 0) {
		boolean v3 = p1.isNone();
		if (v3 != 0) {
			if (p2 != -9999) {
				ContentResolver v4 = this.mContext.getContentResolver();
				int v6 = Settings$Global.getInt(v4, "device_provisioned", 0);
				int v5 = v6;
				if (v5 == 0) {
					boolean v8 = this.mInjector.hasEnrolledBiometrics(p2);
					if ((p4 & 1) == 0) {
						boolean v17 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
						if (v17 != 0) {
							if (p2 != -9999) {
								long v18 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
								IGateKeeperService v19 = LockSettingsService.getGateKeeperService();
								SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);
								int v21 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
								if (v21 != 0) {
									byte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
									this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);
									IGateKeeperService v24 = LockSettingsService.getGateKeeperService();
									VerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
									int v26 = v25.getResponseCode();
									if (v26 == 0) {
										VerifyCredentialResponse v7 = VerifyCredentialResponse.ERROR;
										if (v7 == 0) {
											if (p2 != -9999) {
												LockSettingsStorage$CredentialHash v29 = LockSettingsStorage.readPasswordHashIfExists(p2);
												if (v29 == 0) {
													LockSettingsStorage$CredentialHash v30 = LockSettingsStorage.readPatternHashIfExists(p2);
													if (v30 == 0) {
														LockSettingsStorage$CredentialHash v28 = v30;
														if (LockSettingsStorage$CredentialHash.type != 2) {
															int v32 = LockscreenCredential.getType();
															if (v32 == 4) {
																int v33 = LockscreenCredential.getType();
																if (v33 != 3) {
																	boolean v31 = ;
																	if (v31 != 0) {
																		if (v28 == 0) {
																			if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																				boolean v35 = p1.isNone();
																				if (v35 == 0) {
																					if (v28 == 0) {
																						if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																							boolean v36 = p1.isNone();
																							if (v36 == 0) {
																								StrictMode.noteDiskRead();
																								IGateKeeperService v38 = LockSettingsService.getGateKeeperService();
																								byte[] v39 = p1.getCredential();
																								GateKeeperResponse v40 = v38.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v39);
																								VerifyCredentialResponse v41 = LockSettingsService.convertResponse();
																								boolean v42 = .getShouldReEnroll();
																								int v43 = v41.getResponseCode();
																								if (v43 != 0) {
																									if (p3 == 0) {
																										p3.onCredentialVerified();
																										LockSettingsService.setUserPasswordMetrics(p1, p2);
																										byte[] v47 = p1.getCredential();
																										LockSettingsService.unlockKeystore(v47, p2);
																										byte[] v55 = LockSettingsService.secretFromCredential(p1);
																										LockSettingsService.unlockUser(p2, v55);
																										boolean v57 = LockSettingsService.isProfileWithSeparatedLock(p2);
																										if (v57 == 0) {
																											LockSettingsService.setDeviceUnlockedForUser(p2);
																											if (v42 == 0) {
																												boolean v59 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
																												LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																												VerifyCredentialResponse v34 = v41;
																												int v61 = this.mResponseCode;
																												if (v61 != 0) {
																													Message v63 = this.mHandler.obtainMessage(5, p2, 0);
																													v63.sendToTarget();
																													VerifyCredentialResponse v2 = v34;
																													p0.scheduleGc();
																													return v2;
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);\nbyte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();\nthis.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);', 'IGateKeeperService v24 = LockSettingsService.getGateKeeperService();\nVerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);\nint v26 = v25.getResponseCode();', 'IGateKeeperService v38 = LockSettingsService.getGateKeeperService();\nbyte[] v39 = p1.getCredential();\nGateKeeperResponse v40 = v38.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v39);', 'LockSettingsService.setUserPasswordMetrics(p1, p2);\nbyte[] v47 = p1.getCredential();\nLockSettingsService.unlockKeystore(v47, p2);\nbyte[] v55 = LockSettingsService.secretFromCredential(p1);\nLockSettingsService.unlockUser(p2, v55);', 'boolean v59 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);\nLockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);']

The method checkCredential has the following similar APIs:

- API Name: verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.996372640132904
  - Access Control Level: NONE and the following code:
LockSettingsService.setUserPasswordMetrics(p1, p2);
byte[] v49 = p1.getCredential();
LockSettingsService.unlockKeystore(v49, p2);
byte[] v57 = LockSettingsService.secretFromCredential(p1);
LockSettingsService.unlockUser(p2, v57);

- API Name: tryUnlockWithCachedUnifiedChallenge(I)Z with Similarity Score: 0.9933100938796997
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v53 = LockSettingsService.getGateKeeperService();
byte[] v54 = p1.getCredential();
GateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);

