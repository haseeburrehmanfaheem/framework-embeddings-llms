The method setRecoverySecretTypes has the following code snippet:

This is path 1 for the API with depth 2:
public void setRecoverySecretTypes([I p1){
	Object v3 = Objects.requireNonNull(p1, "secretTypes is null");
	int v4 = UserHandle.getCallingUserId();
	int v5 = Binder.getCallingUid();
	SQLiteDatabase v7 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v8 = new String(4);
	String v9 = new String(2);
	String v10 = Integer.toString(v4);
	String v11 = Integer.toString(v5);
	Cursor v12 = v7.query("recovery_service_metadata", v8, "user_id = ? AND uid = ?", v9, 0, 0, 0);
	int v13 = v12.getCount();
	if (v13 != 0) {
		if (v13 <= 1) {
			boolean v14 = v12.moveToFirst();
			int v15 = v12.getColumnIndexOrThrow("secret_types");
			boolean v16 = v12.isNull(v15);
			if (v16 == 0) {
				String v17 = v12.getString(v15);
				boolean v18 = TextUtils.isEmpty(v17);
				if (v18 == 0) {
					String v19 = v17.split(",");
					[I v20 = new [I(v19.length);
					if ( >= v19.length) {
						v12.close();
						[I v6 = v20;
						boolean v22 = Arrays.equals(p1, v6);
						if (v22 == 0) {
							SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase();
							ContentValues v25 = new ContentValues();
							StringJoiner v27 = new StringJoiner(",");
							IntStream v29 = Arrays.stream(p1);
							RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v30 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v27);
							v29.forEach(v30);
							String v33 = v27.toString();
							v25.put("secret_types", v33);
							RecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v4, v5);
							String v36 = new String(2);
							String v37 = String.valueOf(v4);
							String v38 = String.valueOf(v5);
							int v39 = v24.update("recovery_service_metadata", v25, "user_id = ? AND uid = ?", v36);
							long v23 = v39;
							if ((v23 < 0) < 0) {
								if (v6.length != 0) {
									int v40 = Log.i("RecoverableKeyStoreMgr", "Updated secret types. Snapshot pending.");
									Long v42 = RecoverableKeyStoreDb.getLong(v4, v5, "snapshot_version");
									Long v41 = v42;
									if (v41 == 0) {
										if (1 == 0) {
											long v44 = RecoverableKeyStoreDb.setLong(v4, v5, "should_create_snapshot", );
											long v43 = v44;
											int v45 = Log.i("RecoverableKeyStoreMgr", "Updated secret types. Snapshot must be updated");
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setRecoverySecretTypes([I p1){
	Object v3 = Objects.requireNonNull(p1, "secretTypes is null");
	int v4 = UserHandle.getCallingUserId();
	int v5 = Binder.getCallingUid();
	SQLiteDatabase v7 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v8 = new String(4);
	String v9 = new String(2);
	String v10 = Integer.toString(v4);
	String v11 = Integer.toString(v5);
	Cursor v12 = v7.query("recovery_service_metadata", v8, "user_id = ? AND uid = ?", v9, 0, 0, 0);
	int v13 = v12.getCount();
	if (v13 != 0) {
		if (v13 <= 1) {
			boolean v14 = v12.moveToFirst();
			int v15 = v12.getColumnIndexOrThrow("secret_types");
			boolean v16 = v12.isNull(v15);
			if (v16 == 0) {
				String v17 = v12.getString(v15);
				boolean v18 = TextUtils.isEmpty(v17);
				if (v18 == 0) {
					String v19 = v17.split(",");
					[I v20 = new [I(v19.length);
					if ( >= v19.length) {
						v12.close();
						[I v6 = v20;
						boolean v22 = Arrays.equals(p1, v6);
						if (v22 == 0) {
							SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase();
							ContentValues v25 = new ContentValues();
							StringJoiner v27 = new StringJoiner(",");
							IntStream v29 = Arrays.stream(p1);
							RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v30 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v27);
							v29.forEach(v30);
							String v33 = v27.toString();
							v25.put("secret_types", v33);
							RecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v4, v5);
							String v36 = new String(2);
							String v37 = String.valueOf(v4);
							String v38 = String.valueOf(v5);
							int v39 = v24.update("recovery_service_metadata", v25, "user_id = ? AND uid = ?", v36);
							long v23 = v39;
							if ((v23 < 0) < 0) {
								if (v6.length != 0) {
									int v40 = Log.i("RecoverableKeyStoreMgr", "Updated secret types. Snapshot pending.");
									Long v42 = RecoverableKeyStoreDb.getLong(v4, v5, "snapshot_version");
									Long v41 = v42;
									if (v41 == 0) {
										if (1 == 0) {
											long v44 = RecoverableKeyStoreDb.setLong(v4, v5, "should_create_snapshot", );
											long v43 = v44;
											int v45 = Log.i("RecoverableKeyStoreMgr", "Updated secret types. Snapshot must be updated");
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SQLiteDatabase v7 = this.mKeyStoreDbHelper.getReadableDatabase();\nCursor v12 = v7.query("recovery_service_metadata", v8, "user_id = ? AND uid = ?", v9, 0, 0, 0);\nString v17 = v12.getString(v15);\nSQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase();\nv25.put("secret_types", v33);\nint v39 = v24.update("recovery_service_metadata", v25, "user_id = ? AND uid = ?", v36);', 'IntStream v29 = Arrays.stream(p1);\nRecoverableKeyStoreDb$$ExternalSyntheticLambda0 v30 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v27);\nv29.forEach(v30);\nString v33 = v27.toString();', 'SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase();\nContentValues v25 = new ContentValues();\nRecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v4, v5);']

The method setRecoverySecretTypes has the following similar APIs:

- API Name: getRecoverySecretTypes()[I with Similarity Score: 0.9039772152900696
  - Access Control Level: NONE and the following code:
SQLiteDatabase v6 = this.mKeyStoreDbHelper.getReadableDatabase();
Cursor v11 = v6.query("recovery_service_metadata", v7, "user_id = ? AND uid = ?", v8, 0, 0, 0);
int v12 = v11.getCount();
if (v12 != 0) { ... }
[I v19 = new [I(v18.length);
return v1;

- API Name: setRecoveryStatus(Ljava/lang/String;I)V with Similarity Score: 0.8856967687606812
  - Access Control Level: NONE and the following code:
SQLiteDatabase v6 = this.mKeyStoreDbHelper.getWritableDatabase();
ContentValues v7 = new ContentValues();
Integer v9 = Integer.valueOf(p2);
v7.put("recovery_status", v9);
int v13 = v6.update("keys", v7, "uid = ? AND alias = ?", new String[]{String.valueOf(v4), p1});

