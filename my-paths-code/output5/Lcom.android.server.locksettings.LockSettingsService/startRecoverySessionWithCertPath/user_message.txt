This is path 1 for the API with depth 2:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	if (p2 == 0) {
		boolean v4 = p2.isEmpty();
		if (v4 == 0) {
			int v5 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
			String v3 = ;
			Object v6 = Objects.requireNonNull(p1, "invalid session");
			Object v7 = Objects.requireNonNull(p3, "verifierCertPath is null");
			Object v8 = Objects.requireNonNull(p4, "vaultParams is null");
			Object v9 = Objects.requireNonNull(p5, "vaultChallenge is null");
			Object v10 = Objects.requireNonNull(p6, "secrets is null");
			CertPath v12 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
			CertPath v11 = v12;
			String v14 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v15 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v14);
			if (v15 == 0) {
				X509Certificate v16 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
				X509Certificate v13 = v16;
				CertUtils.validateCertPath(0, v13, v11);
				List v19 = v11.getCertificates();
				Object v20 = v19.get(0);
				PublicKey v21 = v20.getPublicKey();
				byte[] v22 = v21.getEncoded();
				if (v22 == 0) {
					int v25 = Binder.getCallingUid();
					int v26 = p6.size();
					if (v26 != 1) {
						PublicKey v27 = KeySyncUtils.deserializePublicKey(v22);
						boolean v28 = RecoverableKeyStoreManager.publicKeysMatch(v27, p4);
						if (v28 == 0) {
							byte[] v29 = KeySyncUtils.generateKeyClaimant();
							Object v30 = p6.get(0);
							byte[] v31 = v30.getSecret();
							RecoverySessionStorage$Entry v32 = new RecoverySessionStorage$Entry(p1,v31,v29,p4);
							this.mRecoverySessionStorage.add(v25, v32);
							StringBuilder v35 = new StringBuilder();
							StringBuilder v37 = v35.append("Received VaultParams for recovery: ");
							String v38 = HexDump.toHexString(p4);
							StringBuilder v39 = v35.append(v38);
							String v40 = v35.toString();
							int v41 = Log.i("RecoverableKeyStoreMgr", v40);
							byte[] v42 = KeySyncUtils.calculateThmKfHash(v31);
							byte[] v43 = KeySyncUtils.encryptRecoveryClaim(v27, p4, p5, v42, v29);
							byte[] v23 = v43;
							byte[] v1 = v23;
							return v1;
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	if (p2 == 0) {
		boolean v4 = p2.isEmpty();
		if (v4 == 0) {
			int v5 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
			String v3 = ;
			Object v6 = Objects.requireNonNull(p1, "invalid session");
			Object v7 = Objects.requireNonNull(p3, "verifierCertPath is null");
			Object v8 = Objects.requireNonNull(p4, "vaultParams is null");
			Object v9 = Objects.requireNonNull(p5, "vaultChallenge is null");
			Object v10 = Objects.requireNonNull(p6, "secrets is null");
			CertPath v12 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
			CertPath v11 = v12;
			String v14 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v15 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v14);
			if (v15 == 0) {
				X509Certificate v16 = TrustedRootCertificates.getRootCertificate(v14);
				if (v16 == 0) {
					X509Certificate v13 = v16;
					CertUtils.validateCertPath(0, v13, v11);
					List v19 = v11.getCertificates();
					Object v20 = v19.get(0);
					PublicKey v21 = v20.getPublicKey();
					byte[] v22 = v21.getEncoded();
					if (v22 == 0) {
						int v25 = Binder.getCallingUid();
						int v26 = p6.size();
						if (v26 != 1) {
							PublicKey v27 = KeySyncUtils.deserializePublicKey(v22);
							boolean v28 = RecoverableKeyStoreManager.publicKeysMatch(v27, p4);
							if (v28 == 0) {
								byte[] v29 = KeySyncUtils.generateKeyClaimant();
								Object v30 = p6.get(0);
								byte[] v31 = v30.getSecret();
								RecoverySessionStorage$Entry v32 = new RecoverySessionStorage$Entry(p1,v31,v29,p4);
								this.mRecoverySessionStorage.add(v25, v32);
								StringBuilder v35 = new StringBuilder();
								StringBuilder v37 = v35.append("Received VaultParams for recovery: ");
								String v38 = HexDump.toHexString(p4);
								StringBuilder v39 = v35.append(v38);
								String v40 = v35.toString();
								int v41 = Log.i("RecoverableKeyStoreMgr", v40);
								byte[] v42 = KeySyncUtils.calculateThmKfHash(v31);
								byte[] v43 = KeySyncUtils.encryptRecoveryClaim(v27, p4, p5, v42, v29);
								byte[] v23 = v43;
								byte[] v1 = v23;
								return v1;
							}
						}
					}
				}
			}
		}
	}
}
