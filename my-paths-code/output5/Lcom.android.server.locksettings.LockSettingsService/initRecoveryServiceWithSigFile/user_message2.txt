The method initRecoveryServiceWithSigFile has the following code snippet:

This is path 1 for the API with depth 2:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	if (p1 == 0) {
		boolean v4 = p1.isEmpty();
		if (v4 == 0) {
			int v5 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
			String v3 = ;
			Object v6 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
			Object v7 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
			Element v9 = CertUtils.getXmlRootNode(p3);
			SigXml v10 = new SigXml(v11,v12,v13);
			List v11 = SigXml.parseIntermediateCerts(v9);
			X509Certificate v12 = SigXml.parseSignerCert(v9);
			byte[] v13 = SigXml.parseFileSignature(v9);
			SigXml v8 = v10;
			String v16 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v17 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v16);
			if (v17 == 0) {
				X509Certificate v18 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
				X509Certificate v15 = v18;
				SigXml.verifyFileSignature(v15, p2, 0);
				int v23 = UserHandle.getCallingUserId();
				int v24 = Binder.getCallingUid();
				String v25 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v3);
				boolean v26 = this.mTestCertHelper.isValidRootCertificateAlias(v25);
				if (v26 == 0) {
					String v27 = this.mDatabase.getActiveRootOfTrust(v23, v24);
					if (v27 != 0) {
						StringBuilder v28 = new StringBuilder();
						StringBuilder v30 = v28.append("Root of trust for recovery agent + ");
						StringBuilder v31 = v28.append(v24);
						StringBuilder v32 = v28.append(" is assigned for the first time to ");
						StringBuilder v33 = v28.append(v25);
						String v34 = v28.toString();
						int v35 = Log.d("RecoverableKeyStoreMgr", v34);
						long v36 = this.mDatabase.setActiveRootOfTrust(v23, v24, v25);
						if ((v36 < 0) < 0) {
							CertXml v37 = CertXml.parse(p2);
							long v38 = v37.getSerial();
							Long v39 = this.mDatabase.getRecoveryServiceCertSerial(v23, v24, v25);
							if (v39 == 0) {
								long v40 = v39.longValue();
								if ((v40 < v38) < 0) {
									boolean v41 = this.mTestCertHelper.isTestOnlyCertificateAlias(v25);
									if (v41 != 0) {
										long v42 = v39.longValue();
										if ((v42 < v38) != 0) {
											int v43 = Log.i("RecoverableKeyStoreMgr", "The cert file serial number is the same, so skip updating.");
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	if (p1 == 0) {
		boolean v4 = p1.isEmpty();
		if (v4 == 0) {
			int v5 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
			String v3 = ;
			Object v6 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
			Object v7 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
			Element v9 = CertUtils.getXmlRootNode(p3);
			SigXml v10 = new SigXml(v11,v12,v13);
			List v11 = SigXml.parseIntermediateCerts(v9);
			X509Certificate v12 = SigXml.parseSignerCert(v9);
			byte[] v13 = SigXml.parseFileSignature(v9);
			SigXml v8 = v10;
			String v16 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);
			boolean v17 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v16);
			if (v17 == 0) {
				X509Certificate v18 = TrustedRootCertificates.getRootCertificate(v16);
				if (v18 == 0) {
					X509Certificate v15 = v18;
					SigXml.verifyFileSignature(v15, p2, 0);
					int v23 = UserHandle.getCallingUserId();
					int v24 = Binder.getCallingUid();
					String v25 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v3);
					boolean v26 = this.mTestCertHelper.isValidRootCertificateAlias(v25);
					if (v26 == 0) {
						String v27 = this.mDatabase.getActiveRootOfTrust(v23, v24);
						if (v27 != 0) {
							StringBuilder v28 = new StringBuilder();
							StringBuilder v30 = v28.append("Root of trust for recovery agent + ");
							StringBuilder v31 = v28.append(v24);
							StringBuilder v32 = v28.append(" is assigned for the first time to ");
							StringBuilder v33 = v28.append(v25);
							String v34 = v28.toString();
							int v35 = Log.d("RecoverableKeyStoreMgr", v34);
							long v36 = this.mDatabase.setActiveRootOfTrust(v23, v24, v25);
							if ((v36 < 0) < 0) {
								CertXml v37 = CertXml.parse(p2);
								long v38 = v37.getSerial();
								Long v39 = this.mDatabase.getRecoveryServiceCertSerial(v23, v24, v25);
								if (v39 == 0) {
									long v40 = v39.longValue();
									if ((v40 < v38) < 0) {
										boolean v41 = this.mTestCertHelper.isTestOnlyCertificateAlias(v25);
										if (v41 != 0) {
											long v42 = v39.longValue();
											if ((v42 < v38) != 0) {
												int v43 = Log.i("RecoverableKeyStoreMgr", "The cert file serial number is the same, so skip updating.");
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v6 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");\nObject v7 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");\nElement v9 = CertUtils.getXmlRootNode(p3);\nList v11 = SigXml.parseIntermediateCerts(v9);\nX509Certificate v12 = SigXml.parseSignerCert(v9);\nbyte[] v13 = SigXml.parseFileSignature(v9);\nSigXml v10 = new SigXml(v11,v12,v13);', 'String v16 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v3);\nboolean v17 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v16);\nX509Certificate v18 = TrustedRootCertificates.getTestOnlyInsecureCertificate();', 'String v25 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v3);\nboolean v26 = this.mTestCertHelper.isValidRootCertificateAlias(v25);\nlong v36 = this.mDatabase.setActiveRootOfTrust(v23, v24, v25);', 'int v23 = UserHandle.getCallingUserId();\nint v24 = Binder.getCallingUid();']

The method initRecoveryServiceWithSigFile has the following similar APIs:

- API Name: startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.90987229347229
  - Access Control Level: NONE and the following code:
int v20 = Binder.getCallingUid();
int v25 = v23.getPackageUidAsUser(v21, v24);
int v33 = Binder.getCallingUid();

- API Name: getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V with Similarity Score: 0.8664305210113525
  - Access Control Level: NONE and the following code:
int v19 = Binder.getCallingPid();
StringBuilder v20 = v3.append(v19);

