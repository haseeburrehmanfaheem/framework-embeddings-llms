The method startSession has the following code snippet:

This is path 1 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	if (this.mAm != 0) {
		Object v8 = LocalServices.getService(ActivityManagerInterna.class);
		this.mAm = v8;
		ActivityManagerInternal v7 = this.mAm;
		ActivityManagerInternal v6 = v7;
		ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);
		Object v10 = ContentCaptureManagerService.access$000(this.this$0);
		AbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);
		String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v14 != 0) {
			String v15 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
			boolean v16 = v14.equals(v15);
			boolean v13 = v16;
			boolean v12 = v13;
			if (v12 != 0) {
				int v19 = UserHandle.getCallingUserId();
				int v20 = Binder.getCallingUid();
				String v21 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(v19);
				if (v21 != 0) {
					ComponentName v22 = ComponentName.unflattenFromString(v21);
					if (v22 != 0) {
						String v23 = v22.getPackageName();
						Context v24 = ContentCaptureManagerService.getContext();
						PackageManager v25 = v24.getPackageManager();
						int v26 = UserHandle.getCallingUserId();
						int v27 = v25.getPackageUidAsUser(v23, v26);
						boolean v18 = 0;
						boolean v17 = v18;
						if (v17 != 0) {
							int v35 = Binder.getCallingUid();
							if (v9 != 0) {
								if (0 == 0) {
									Bundle v39 = new Bundle();
									v39.putBinder("binder", 0);
									p7.send(260, );
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	if (this.mAm != 0) {
		Object v8 = LocalServices.getService(ActivityManagerInterna.class);
		this.mAm = v8;
		ActivityManagerInternal v7 = this.mAm;
		ActivityManagerInternal v6 = v7;
		ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);
		Object v10 = ContentCaptureManagerService.access$000(this.this$0);
		AbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);
		String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v14 != 0) {
			String v15 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
			boolean v16 = v14.equals(v15);
			boolean v13 = v16;
			boolean v12 = v13;
			if (v12 != 0) {
				int v19 = UserHandle.getCallingUserId();
				int v20 = Binder.getCallingUid();
				String v21 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(v19);
				if (v21 != 0) {
					ComponentName v22 = ComponentName.unflattenFromString(v21);
					if (v22 != 0) {
						String v23 = v22.getPackageName();
						Context v24 = ContentCaptureManagerService.getContext();
						PackageManager v25 = v24.getPackageManager();
						int v26 = UserHandle.getCallingUserId();
						boolean v18 = 0;
						boolean v17 = v18;
						if (v17 != 0) {
							int v34 = Binder.getCallingUid();
							if (v9 != 0) {
								if (0 == 0) {
									Bundle v38 = new Bundle();
									v38.putBinder("binder", 0);
									p7.send(260, );
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, ComponentName p3, int p4, int p5, IResultReceiver p6){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Integer v3 = Integer.valueOf(p4);
	Object v4 = Objects.requireNonNull(v3);
	int v5 = UserHandle.getCallingUserId();
	if (this.mAm != 0) {
		Object v8 = LocalServices.getService(ActivityManagerInterna.class);
		this.mAm = v8;
		ActivityManagerInternal v7 = this.mAm;
		ActivityManagerInternal v6 = v7;
		ActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);
		Object v10 = ContentCaptureManagerService.access$000(this.this$0);
		AbstractPerUserSystemService v11 = ContentCaptureManagerService.access$100(this.this$0, v5);
		String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v14 != 0) {
			boolean v13 = 0;
			boolean v12 = v13;
			if (v12 != 0) {
				int v17 = UserHandle.getCallingUserId();
				int v18 = Binder.getCallingUid();
				String v19 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(v17);
				if (v19 != 0) {
					ComponentName v20 = ComponentName.unflattenFromString(v19);
					if (v20 != 0) {
						String v21 = v20.getPackageName();
						Context v22 = ContentCaptureManagerService.getContext();
						PackageManager v23 = v22.getPackageManager();
						int v24 = UserHandle.getCallingUserId();
						int v25 = v23.getPackageUidAsUser(v21, v24);
						boolean v16 = 0;
						boolean v15 = v16;
						if (v15 != 0) {
							int v33 = Binder.getCallingUid();
							if (v9 != 0) {
								if (0 == 0) {
									Bundle v37 = new Bundle();
									v37.putBinder("binder", 0);
									p7.send(260, );
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p1);\nObject v2 = Objects.requireNonNull(p2);\nInteger v3 = Integer.valueOf(p4);\nActivityPresentationInfo v9 = v6.getActivityPresentationInfo(p1);', 'String v14 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);\nString v15 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);\nboolean v16 = v14.equals(v15);\nComponentName v22 = ComponentName.unflattenFromString(v21);', 'int v20 = Binder.getCallingUid();\nint v25 = v23.getPackageUidAsUser(v21, v24);\nint v33 = Binder.getCallingUid();']

The method startSession has the following similar APIs:

- API Name: initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V with Similarity Score: 0.90987229347229
  - Access Control Level: NONE and the following code:
int v23 = UserHandle.getCallingUserId();
int v24 = Binder.getCallingUid();

- API Name: getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V with Similarity Score: 0.8408126831054688
  - Access Control Level: NONE and the following code:
int v19 = Binder.getCallingPid();
StringBuilder v20 = v3.append(v19);

