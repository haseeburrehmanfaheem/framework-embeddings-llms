The method getDataBlockSize has the following code snippet:

This is path 1 for the API with depth 2:
public int getDataBlockSize(){
	if (v3 == 0) {
		int v4 = Binder.getCallingUid();
		this.this$0.enforceUid(v4);
		DataInputStream v7 = new DataInputStream(v8);
		FileInputStream v8 = new FileInputStream(v9);
		File v9 = new File(v10);
		String v10 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
		Object v14 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
		int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7);
		IoUtils.closeQuietly(v7);
		return v15;
	}
}

and the following sink code:
['int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7);\nreturn v15;']

The method getDataBlockSize has the following similar APIs:

- API Name: read()[B with Similarity Score: 0.8875020742416382
  - Access Control Level: NONE and the following code:
int v19 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v11);
[B v20 = new [B(v19);
int v21 = v11.read(v20, 0, v19);
return v20;

- API Name: getMaximumDataBlockSize()J with Similarity Score: 0.7424176931381226
  - Access Control Level: NONE and the following code:
long v6 = PersistentDataBlockService.getBlockDeviceSize();
if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0)
long v5 = ;
long v4 = v5;
return v4;

