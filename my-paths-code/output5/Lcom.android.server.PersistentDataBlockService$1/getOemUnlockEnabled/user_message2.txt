The method getOemUnlockEnabled has the following code snippet:

This is path 1 for the API with depth 2:
public boolean getOemUnlockEnabled(){
	DataInputStream v4 = new DataInputStream(v5);
	FileInputStream v5 = new FileInputStream(v6);
	File v6 = new File(this.mDataBlockFile);
	long v10 = PersistentDataBlockService.getBlockDeviceSize();
	long v11 = v4.skip((v10 - 1));
	byte v12 = v4.readByte();
	if (v12 == 0) {
		IoUtils.closeQuietly(v4);
		boolean v3 = ;
		boolean v2 = v3;
		return v2;
	}
}
This is path 2 for the API with depth 2:
public boolean getOemUnlockEnabled(){
	DataInputStream v4 = new DataInputStream(v5);
	FileInputStream v5 = new FileInputStream(v6);
	File v6 = new File(this.mDataBlockFile);
	long v10 = PersistentDataBlockService.getBlockDeviceSize();
	long v11 = v4.skip((v10 - 1));
	byte v12 = v4.readByte();
	if (v12 == 0) {
		IoUtils.closeQuietly(v4);
		boolean v3 = ;
		boolean v2 = v3;
		return v2;
	}
}

and the following sink code:
['File v6 = new File(this.mDataBlockFile);\nFileInputStream v5 = new FileInputStream(v6);\nDataInputStream v4 = new DataInputStream(v5);\nlong v10 = PersistentDataBlockService.getBlockDeviceSize();\nlong v11 = v4.skip((v10 - 1));\nbyte v12 = v4.readByte();\nif (v12 == 0) {']

The method getOemUnlockEnabled has the following similar APIs:

- API Name: getMaximumDataBlockSize()J with Similarity Score: 0.8419801592826843
  - Access Control Level: NONE and the following code:
long v6 = PersistentDataBlockService.getBlockDeviceSize();
if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0)
long v5 = ;
long v4 = v5;
return v4;

- API Name: write([B)I with Similarity Score: 0.7786517143249512
  - Access Control Level: NONE and the following code:
RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
ByteBuffer v14 = v12.put(v13);
ByteBuffer v15 = v12.putInt(428873843);
ByteBuffer v16 = v12.putInt(p1.length);
ByteBuffer v17 = v12.put(p1);
int v21 = v7.write(v12);
v7.force(1);

