This is path 1 for the API with depth 2:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		[B v6 = new [B(32);
		byte[] v7 = PersistentDataBlockService.computeDigestLocked(v6);
		if (v7 == 0) {
			boolean v8 = Arrays.equals(v6, v7);
			if (v8 != 0) {
				PersistentDataBlockService.formatPartitionLocked(0);
				boolean v5 = 0;
				boolean v4 = v5;
				if (v4 != 0) {
					DataInputStream v11 = new DataInputStream(v12);
					FileInputStream v12 = new FileInputStream(v13);
					File v13 = new File(v14);
					String v14 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
					Object v18 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
					int v19 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v11);
					if (v19 != 0) {
						[B v20 = new [B(v19);
						int v21 = v11.read(v20, 0, v19);
						if (v21 >= v19) {
							v11.close();
							return v20;
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		[B v6 = new [B(32);
		byte[] v7 = PersistentDataBlockService.computeDigestLocked(v6);
		if (v7 == 0) {
			boolean v8 = Arrays.equals(v6, v7);
			if (v8 != 0) {
				PersistentDataBlockService.formatPartitionLocked(0);
				boolean v5 = 0;
				boolean v4 = v5;
				if (v4 != 0) {
					DataInputStream v11 = new DataInputStream(v12);
					FileInputStream v12 = new FileInputStream(v13);
					File v13 = new File(v14);
					String v14 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
					Object v18 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
					int v19 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v11);
					if (v19 != 0) {
						[B v20 = new [B(0);
						v11.close();
						return v20;
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public byte[] read(){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		[B v6 = new [B(32);
		byte[] v7 = PersistentDataBlockService.computeDigestLocked(v6);
		if (v7 == 0) {
			PersistentDataBlockService.formatPartitionLocked(0);
			boolean v5 = 0;
			boolean v4 = v5;
			if (v4 != 0) {
				DataInputStream v10 = new DataInputStream(v11);
				FileInputStream v11 = new FileInputStream(v12);
				File v12 = new File(v13);
				String v13 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
				Object v17 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				int v18 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v10);
				if (v18 != 0) {
					[B v19 = new [B(v18);
					int v20 = v10.read(v19, 0, v18);
					if (v20 >= v18) {
						v10.close();
						return v19;
					}
				}
			}
		}
	}
}
