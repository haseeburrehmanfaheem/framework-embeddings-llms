This is path 1 for the API with depth 2:
public void abandonSession(long p1, String p2){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("sessionId must be positive: ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	float v6 = Preconditions.checkArgumentPositive(p1, v5);
	Object v7 = Objects.requireNonNull(p2, "packageName must not be null");
	int v8 = Binder.getCallingUid();
	BlobStoreSession v15 = BlobStoreManagerService.openSessionInternal(p2, p3, p4);
	v15.open();
	v15.abandon();
	if (BlobStoreConfig.LOGV == 0) {
		BlobStoreManagerService.writeBlobSessionsAsync();
		return;
	}
}

This is path 2 for the API with depth 2:
public void abandonSession(long p1, String p2){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("sessionId must be positive: ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	float v6 = Preconditions.checkArgumentPositive(p1, v5);
	Object v7 = Objects.requireNonNull(p2, "packageName must not be null");
	int v8 = Binder.getCallingUid();
	BlobStoreSession v15 = BlobStoreManagerService.openSessionInternal(p2, p3, p4);
	v15.open();
	v15.abandon();
	if (BlobStoreConfig.LOGV == 0) {
		BlobStoreManagerService.writeBlobSessionsAsync();
		return;
	}
}
