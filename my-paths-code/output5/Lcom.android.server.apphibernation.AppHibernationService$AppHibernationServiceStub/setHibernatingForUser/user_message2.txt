The method setHibernatingForUser has the following code snippet:

This is path 1 for the API with depth 2:
public void setHibernatingForUser(String p1, int p2, boolean p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, "setHibernatingForUser", 0);
	int v4 = v7;
	boolean v9 = this.mUserManager.isUserUnlockingOrUnlocked(v4);
	if (v9 != 0) {
		boolean v10 = this.mUserStates.contains(v4);
		if (v10 != 0) {
			if (1 == 0) {
				boolean v8 = 0;
				if (v8 != 0) {
					Object v14 = this.mUserStates.get(v4);
					Object v15 = v14.get(p1);
					if (v15 == 0) {
						int v16 = Binder.getCallingUid();
						boolean v17 = this.mPackageManagerInternal.canQueryPackage(v16, p1);
						if (v17 != 0) {
							if (UserLevelState.hibernated != p3) {
								UserLevelState.hibernated = p3;
								if (p3 == 0) {
									AppHibernationService$$ExternalSyntheticLambda3 v18 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4);
									this.mBackgroundExecutor.execute(v18);
									long v21 = System.currentTimeMillis();
									UserLevelState.lastUnhibernatedMs = v21;
									UserLevelState v22 = new UserLevelState(v15);
									AppHibernationService$$ExternalSyntheticLambda4 v24 = new AppHibernationService$$ExternalSyntheticLambda4(v22,v4);
									this.mBackgroundExecutor.execute(v24);
									ArrayList v27 = new ArrayList(v29);
									Object v28 = this.mUserStates.get(v4);
									Collection v29 = v28.values();
									Object v31 = this.mUserDiskStores.get(v4);
									this.mScheduledStatesToWrite = v27;
									boolean v33 = this.mExecutorService.isShutdown();
									if (v33 == 0) {
										if (this.mFuture == 0) {
											HibernationStateDiskStore$$ExternalSyntheticLambda0 v34 = new HibernationStateDiskStore$$ExternalSyntheticLambda0(HibernationStateDiskStore);
											ScheduledFuture v36 = this.mExecutorService.schedule(v34, 60000, TimeUnit.MILLISECONDS);
											this.mFuture = v36;
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setHibernatingForUser(String p1, int p2, boolean p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, "setHibernatingForUser", 0);
	int v4 = v7;
	boolean v9 = this.mUserManager.isUserUnlockingOrUnlocked(v4);
	if (v9 != 0) {
		boolean v10 = this.mUserStates.contains(v4);
		if (v10 != 0) {
			if (1 == 0) {
				boolean v8 = 0;
				if (v8 != 0) {
					Object v14 = this.mUserStates.get(v4);
					Object v15 = v14.get(p1);
					if (v15 == 0) {
						int v16 = Binder.getCallingUid();
						boolean v17 = this.mPackageManagerInternal.canQueryPackage(v16, p1);
						if (v17 != 0) {
							if (UserLevelState.hibernated != p3) {
								UserLevelState.hibernated = p3;
								if (p3 == 0) {
									AppHibernationService$$ExternalSyntheticLambda2 v18 = new AppHibernationService$$ExternalSyntheticLambda2(AppHibernationService,p1,v4,v15);
									this.mBackgroundExecutor.execute(v18);
									UserLevelState v21 = new UserLevelState(v15);
									AppHibernationService$$ExternalSyntheticLambda4 v23 = new AppHibernationService$$ExternalSyntheticLambda4(v21,v4);
									this.mBackgroundExecutor.execute(v23);
									ArrayList v26 = new ArrayList(v28);
									Object v27 = this.mUserStates.get(v4);
									Collection v28 = v27.values();
									Object v30 = this.mUserDiskStores.get(v4);
									this.mScheduledStatesToWrite = v26;
									boolean v32 = this.mExecutorService.isShutdown();
									if (v32 == 0) {
										if (this.mFuture == 0) {
											HibernationStateDiskStore$$ExternalSyntheticLambda0 v33 = new HibernationStateDiskStore$$ExternalSyntheticLambda0(HibernationStateDiskStore);
											ScheduledFuture v35 = this.mExecutorService.schedule(v33, 60000, TimeUnit.MILLISECONDS);
											this.mFuture = v35;
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, "setHibernatingForUser", 0);\nboolean v17 = this.mPackageManagerInternal.canQueryPackage(v16, p1);\nUserLevelState.hibernated = p3;\nAppHibernationService$$ExternalSyntheticLambda3 v18 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4);\nthis.mBackgroundExecutor.execute(v18);', 'UserLevelState v22 = new UserLevelState(v15);\nAppHibernationService$$ExternalSyntheticLambda4 v24 = new AppHibernationService$$ExternalSyntheticLambda4(v22,v4);\nthis.mBackgroundExecutor.execute(v24);', 'ArrayList v27 = new ArrayList(v29);\nObject v28 = this.mUserStates.get(v4);\nCollection v29 = v28.values();\nthis.mScheduledStatesToWrite = v26;']

The method setHibernatingForUser has the following similar APIs:

- API Name: isHibernatingForUser(Ljava/lang/String;I)Z with Similarity Score: 0.8305026888847351
  - Access Control Level: SYS_OR_SIG and the following code:
int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
boolean v15 = this.mUserStates.contains(v9);
Object v19 = this.mUserStates.get(v9);
Object v20 = v19.get(p1);
boolean v1 = UserLevelState.hibernated;
return v1;

- API Name: getHibernatingPackagesForUser(I)Ljava/util/List; with Similarity Score: 0.7883841395378113
  - Access Control Level: SYS_OR_SIG and the following code:
int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);

