EP1_ID,EP2_ID,EP1_Code,EP2_Code,Similarity
stopImeTrace()V,startImeTrace()V,ImeTracing v1 = this.sInstance; v1.stopTrace(0);,ImeTracingServerImpl v4 = new ImeTracingServerImpl(); this.sInstance = ; ImeTracing v1 = this.sInstance; v1.startTrace(0);,0.7690266966819763
stopImeTrace()V,startImeTrace()V,ImeTracing v1 = this.sInstance; v1.stopTrace(0);,ImeTracingClientImpl v4 = new ImeTracingClientImpl(); this.sInstance = ; ImeTracing v1 = this.sInstance; v1.startTrace(0);,0.7688401341438293
removeImeSurface()V,notifyStatsProviderWarningOrLimitReached()V,Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,Message v3 = this.mHandler.obtainMessage(20); v3.sendToTarget();,0.9672578573226929
removeImeSurface()V,removeImeSurfaceFromWindowAsync(Landroid/os/IBinder;)V,Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,"Message v1 = this.mHandler.obtainMessage(1061, p1); v1.sendToTarget();",0.9407423734664917
getInputMethodList(I)Ljava/util/List;,getAwareLockedInputMethodList(II)Ljava/util/List;,"ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;","Object v6 = LocalServices.getService(UserManagerInterna.class); boolean v7 = v6.exists(p1); [I v11 = new [I(0); [I v5 = v11; ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.8248907923698425
getInputMethodList(I)Ljava/util/List;,getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,"ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;","List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked(); List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked(); Iterator v17 = v16.iterator(); Object v19 = v17.next(); String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second); Pair v23 = new Pair(Pair.first,v21); Object v27 = this.mMethodMap.get(Pair.first); int v28 = Integer.parseInt(Pair.second); InputMethodSubtype v31 = v27.getSubtypeAt();",0.8056173324584961
getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,getInputMethodList(I)Ljava/util/List;,"List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked(); List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked(); Iterator v17 = v16.iterator(); Object v19 = v17.next(); String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second); Pair v23 = new Pair(Pair.first,v21); Object v27 = this.mMethodMap.get(Pair.first); int v28 = Integer.parseInt(Pair.second); InputMethodSubtype v31 = v27.getSubtypeAt();","ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.8056173324584961
getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,"List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked(); List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked(); Iterator v17 = v16.iterator(); Object v19 = v17.next(); String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second); Pair v23 = new Pair(Pair.first,v21); Object v27 = this.mMethodMap.get(Pair.first); int v28 = Integer.parseInt(Pair.second); InputMethodSubtype v31 = v27.getSubtypeAt();",String v15 = this.mBindingController.getSelectedMethodId(); int v17 = InputMethodUtils$InputMethodSettings.getSelectedInputMethodSubtypeHashCode(); Object v18 = this.mMethodMap.get(v14); int v19 = v18.getSubtypeCount(); this.mCurrentSubtype = v35; return this.mCurrentSubtype;,0.7647733688354492
startStylusHandwriting(Lcom/android/internal/view/IInputMethodClient;)V,startInputOrWindowGainedFocus(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;Lcom/android/internal/inputmethod/IRemoteAccessibilityInputConnection;ILandroid/window/ImeOnBackInvokedDispatcher;)Lcom/android/internal/inputmethod/InputBindResult;,"ImeTracingServerImpl v5 = new ImeTracingServerImpl(); v2.triggerManagerServiceDump(""InputMethodManagerService#startStylusHandwriting"");","ImeTracingServerImpl v5 = new ImeTracingServerImpl(); this.sInstance = ; ImeTracing v3 = this.sInstance; v3.triggerManagerServiceDump(""InputMethodManagerService#startInputOrWindowGainedFocus"");",0.7811880111694336
startStylusHandwriting(Lcom/android/internal/view/IInputMethodClient;)V,startImeTrace()V,"ImeTracingServerImpl v5 = new ImeTracingServerImpl(); v2.triggerManagerServiceDump(""InputMethodManagerService#startStylusHandwriting"");",ImeTracingServerImpl v4 = new ImeTracingServerImpl(); this.sInstance = ; ImeTracing v1 = this.sInstance; v1.startTrace(0);,0.7038089036941528
showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z,hideSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z,"Object v37 = this.mShowRequestWindowMap.put(v35, p2); int v38 = InputMethodManagerService.getImeShowFlagsLocked(); IInputMethodInvoker v34 = this.mBindingController.getCurMethod(); boolean v32 = InputMethodBindingController.bindCurrentInputMethodServiceMainConnection();","Object v21 = this.mHideRequestWindowMap.put(v19, p2); InputMethodManagerService$SoftInputShowHideHistory$Entry v27 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(...)",0.7828916907310486
showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z,hideSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z,"boolean v9 = p0.calledFromValidUserLocked(); long v10 = Binder.clearCallingIdentity(); if (this.mCurClient == 0) { if (p1 == 0) { IBinder v14 = p1.asBinder(); Object v15 = this.mClients.get(v14); int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId); if (v17 != 0) { Integer v19 = Integer.valueOf(v2); this.mShowRequested = 1; this.mTarget.showSoftInput(v35, v38, p3); WindowManagerInternal$ImeTargetInfo v43 = this.mWindowManagerInternal.onToggleImeRequested(1, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId); InputMethodManagerService$SoftInputShowHideHistory$Entry v44 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName); this.mSoftInputShowHideHistory.addEntry(v44);","int v1 = Binder.getCallingUid(); this.mTarget.hideSoftInput(v19, 0, p3); WindowManagerInternal$ImeTargetInfo v26 = this.mWindowManagerInternal.onToggleImeRequested(0, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);",0.727075457572937
startInputOrWindowGainedFocus(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;Lcom/android/internal/inputmethod/IRemoteAccessibilityInputConnection;ILandroid/window/ImeOnBackInvokedDispatcher;)Lcom/android/internal/inputmethod/InputBindResult;,startStylusHandwriting(Lcom/android/internal/view/IInputMethodClient;)V,"ImeTracingServerImpl v5 = new ImeTracingServerImpl(); this.sInstance = ; ImeTracing v3 = this.sInstance; v3.triggerManagerServiceDump(""InputMethodManagerService#startInputOrWindowGainedFocus"");","ImeTracingServerImpl v5 = new ImeTracingServerImpl(); v2.triggerManagerServiceDump(""InputMethodManagerService#startStylusHandwriting"");",0.7811880111694336
startInputOrWindowGainedFocus(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;Lcom/android/internal/inputmethod/IRemoteAccessibilityInputConnection;ILandroid/window/ImeOnBackInvokedDispatcher;)Lcom/android/internal/inputmethod/InputBindResult;,startImeTrace()V,"ImeTracingServerImpl v5 = new ImeTracingServerImpl(); this.sInstance = ; ImeTracing v3 = this.sInstance; v3.triggerManagerServiceDump(""InputMethodManagerService#startInputOrWindowGainedFocus"");",ImeTracingServerImpl v4 = new ImeTracingServerImpl(); this.sInstance = ; ImeTracing v1 = this.sInstance; v1.startTrace(0);,0.7188156843185425
getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;,getAwareLockedInputMethodList(II)Ljava/util/List;,"int v1 = UserHandle.getCallingUserId(); Object v5 = this.sLocalServiceObjects.get(UserManagerInterna.class); boolean v6 = v4.exists(v1); [I v7 = new [I(1); long v8 = Binder.clearCallingIdentity(); String v12 = this.mBindingController.getSelectedMethodId(); List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked(); Resources v17 = this.mContext.getResources(); ArrayList v18 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v17, ); List v19 = InputMethodSubtype.sort(this.mContext, 0, , ); return v9;","Object v6 = LocalServices.getService(UserManagerInterna.class); boolean v7 = v6.exists(p1); [I v11 = new [I(0); [I v5 = v11; ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.7732148766517639
getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;,startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)V,"int v1 = UserHandle.getCallingUserId(); Object v5 = this.sLocalServiceObjects.get(UserManagerInterna.class); boolean v6 = v4.exists(v1); [I v7 = new [I(1); long v8 = Binder.clearCallingIdentity(); String v12 = this.mBindingController.getSelectedMethodId(); List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked(); Resources v17 = this.mContext.getResources(); ArrayList v18 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v17, ); List v19 = InputMethodSubtype.sort(this.mContext, 0, , ); return v9;","int v20 = Binder.getCallingUid(); int v25 = v23.getPackageUidAsUser(v21, v24); int v33 = Binder.getCallingUid();",0.7571644186973572
showInputMethodPickerFromSystem(Lcom/android/internal/view/IInputMethodClient;II)V,requireStrongAuth(II)V,"Message v2 = this.mHandler.obtainMessage(1, p2, p3); v2.sendToTarget();","Message v3 = this.mHandler.obtainMessage(1, p1, p2); v3.sendToTarget();",0.9864439368247986
showInputMethodPickerFromSystem(Lcom/android/internal/view/IInputMethodClient;II)V,registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,"Message v2 = this.mHandler.obtainMessage(1, p2, p3); v2.sendToTarget();","Message v3 = this.mHandler.obtainMessage(2, p1); v3.sendToTarget();",0.9731729030609131
getAwareLockedInputMethodList(II)Ljava/util/List;,getInputMethodList(I)Ljava/util/List;,"Object v6 = LocalServices.getService(UserManagerInterna.class); boolean v7 = v6.exists(p1); [I v11 = new [I(0); [I v5 = v11; ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;","ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.8248907923698425
getAwareLockedInputMethodList(II)Ljava/util/List;,getEnabledInputMethodList(I)Ljava/util/List;,"Object v6 = LocalServices.getService(UserManagerInterna.class); boolean v7 = v6.exists(p1); [I v11 = new [I(0); [I v5 = v11; ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;","[I v8 = new [I(1); ArrayMap v13 = new ArrayMap(); ArrayList v15 = new ArrayList(); InputMethodUtils$InputMethodSettings v21 = new InputMethodUtils$InputMethodSettings(v22,v23,v12,v4[0],1); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, p1, v17, v13, v15, 0); ArrayList v26 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodListWithFilterLocked(0); return v10;",0.7813187837600708
isInputMethodPickerShownForTest()Z,getRefreshRateSwitchingType()I,if (this.mSwitchingDialog != 0) { boolean v2 = this.mSwitchingDialog.isShowing(); boolean v1 = v2; return v1;,int v3 = this.mModeSwitchingType; int v2 = v3; return v2;,0.6624464392662048
isInputMethodPickerShownForTest()Z,togglePanel()V,if (this.mSwitchingDialog != 0) { boolean v2 = this.mSwitchingDialog.isShowing(); boolean v1 = v2; return v1;,Object v11 = this.mDisplayUiState.get(0); int v13 = v11.getDisabled2();,0.6331994533538818
getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,String v15 = this.mBindingController.getSelectedMethodId(); int v17 = InputMethodUtils$InputMethodSettings.getSelectedInputMethodSubtypeHashCode(); Object v18 = this.mMethodMap.get(v14); int v19 = v18.getSubtypeCount(); this.mCurrentSubtype = v35; return this.mCurrentSubtype;,"List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked(); List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked(); Iterator v17 = v16.iterator(); Object v19 = v17.next(); String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second); Pair v23 = new Pair(Pair.first,v21); Object v27 = this.mMethodMap.get(Pair.first); int v28 = Integer.parseInt(Pair.second); InputMethodSubtype v31 = v27.getSubtypeAt();",0.7647733688354492
getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,getInputMethodList(I)Ljava/util/List;,String v15 = this.mBindingController.getSelectedMethodId(); int v17 = InputMethodUtils$InputMethodSettings.getSelectedInputMethodSubtypeHashCode(); Object v18 = this.mMethodMap.get(v14); int v19 = v18.getSubtypeCount(); this.mCurrentSubtype = v35; return this.mCurrentSubtype;,"ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.7177156209945679
reportPerceptibleAsync(Landroid/os/IBinder;Z)V,disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,"StatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v25,,p2,v20); boolean v33 = this.mHandler.post(v31);","StatusBarManagerService$$ExternalSyntheticLambda6 v25 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v12); boolean v27 = this.mHandler.post(v25);",0.904991865158081
reportPerceptibleAsync(Landroid/os/IBinder;Z)V,restart()V,"StatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v25,,p2,v20); boolean v33 = this.mHandler.post(v31);",long v3 = Binder.clearCallingIdentity(); StatusBarManagerService$$ExternalSyntheticLambda0 v4 = new StatusBarManagerService$$ExternalSyntheticLambda0(p0); boolean v6 = this.mHandler.post(v4);,0.8054584264755249
reportVirtualDisplayGeometryAsync(Lcom/android/internal/view/IInputMethodClient;I[F)V,releaseVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;)V,DisplayInfo v1 = this.mDisplayManagerInternal.getDisplayInfo(p2);,DisplayDevice v5 = this.mVirtualDisplayAdapter.releaseVirtualDisplayLocked(p2);,0.7498762011528015
reportVirtualDisplayGeometryAsync(Lcom/android/internal/view/IInputMethodClient;I[F)V,getDisplayInfo(I)Landroid/view/DisplayInfo;,DisplayInfo v1 = this.mDisplayManagerInternal.getDisplayInfo(p2);,"LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2); DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides(); DisplayInfo v7 = v5.getDisplayInfoLocked(); DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3); boolean v9 = v8.hasAccess(p3); if (v10 == 0) {     DisplayInfo v4 = v8;     DisplayInfo v3 = v4;     return v3;",0.6969121694564819
showInputMethodPickerFromClient(Lcom/android/internal/view/IInputMethodClient;I)V,No similar EPs with similarity > 0.8,,,
addClient(Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;I)V,openBluetoothDevice(Landroid/os/IBinder;Landroid/bluetooth/BluetoothDevice;Landroid/media/midi/IMidiDeviceOpenCallback;)V,"int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); InputMethodManagerService$ClientDeathRecipient v4 = new InputMethodManagerService$ClientDeathRecipient(p0,p1); IBinder v6 = p1.asBinder(); v6.linkToDeath(v4, 0); InputMethodManagerService$ClientState v9 = new InputMethodManagerService$ClientState(p1,p2,v1,v2,p3,v4); Object v11 = this.mClients.put(v8, v9);","MidiService$Client v4 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v4, 0); Object v7 = this.mClients.put(p1, v4);",0.711127519607544
addClient(Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;I)V,openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V,"int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); InputMethodManagerService$ClientDeathRecipient v4 = new InputMethodManagerService$ClientDeathRecipient(p0,p1); IBinder v6 = p1.asBinder(); v6.linkToDeath(v4, 0); InputMethodManagerService$ClientState v9 = new InputMethodManagerService$ClientState(p1,p2,v1,v2,p3,v4); Object v11 = this.mClients.put(v8, v9);","MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);",0.7079041004180908
startImeTrace()V,isImeTraceEnabled()Z,ImeTracingClientImpl v4 = new ImeTracingClientImpl(); this.sInstance = ; ImeTracing v1 = this.sInstance; v1.startTrace(0);,ImeTracingClientImpl v4 = new ImeTracingClientImpl(); this.sInstance = v4; ImeTracing v1 = this.sInstance; boolean v6 = v1.isEnabled(); return v6;,0.9122803211212158
startImeTrace()V,isImeTraceEnabled()Z,ImeTracingServerImpl v4 = new ImeTracingServerImpl(); this.sInstance = ; ImeTracing v1 = this.sInstance; v1.startTrace(0);,ImeTracingServerImpl v4 = new ImeTracingServerImpl(); this.sInstance = v4; ImeTracing v1 = this.sInstance; boolean v6 = v1.isEnabled(); return v6;,0.8969278335571289
removeImeSurfaceFromWindowAsync(Landroid/os/IBinder;)V,scheduleNonStrongBiometricIdleTimeout(I)V,"Message v1 = this.mHandler.obtainMessage(1061, p1); v1.sendToTarget();","Message v3 = this.mHandler.obtainMessage(9, p1, 0); v3.sendToTarget();",0.9586388468742371
removeImeSurfaceFromWindowAsync(Landroid/os/IBinder;)V,reportSuccessfulBiometricUnlock(ZI)V,"Message v1 = this.mHandler.obtainMessage(1061, p1); v1.sendToTarget();","Message v3 = this.mHandler.obtainMessage(8, p2, 0); v3.sendToTarget();",0.9559781551361084
startProtoDump([BILjava/lang/String;)V,clearBcb()Z,"ProtoOutputStream v8 = new ProtoOutputStream(); long v10 = v8.start(2246267895810); long v11 = SystemClock.elapsedRealtimeNanos(); v8.write(1125281431553, v11); v8.write(1138166333442, p3); p0.dumpDebug(v8, 1146756268035); v8.end(v10); v1.addToBuffer(v8, p2);","byte[] v18 = p2.getBytes(StandardCharsets.UTF_8); this.mOutputStream.writeInt(v18.length); this.mOutputStream.write(v18, 0, v18.length); int v22 = this.mInputStream.readInt(); this.mOutputStream.writeInt(0);",0.6348519921302795
startProtoDump([BILjava/lang/String;)V,setupBcb(Ljava/lang/String;)Z,"ProtoOutputStream v8 = new ProtoOutputStream(); long v10 = v8.start(2246267895810); long v11 = SystemClock.elapsedRealtimeNanos(); v8.write(1125281431553, v11); v8.write(1138166333442, p3); p0.dumpDebug(v8, 1146756268035); v8.end(v10); v1.addToBuffer(v8, p2);","byte[] v18 = p2.getBytes(StandardCharsets.UTF_8); this.mOutputStream.writeInt(v18.length); this.mOutputStream.write(v18, 0, v18.length); int v22 = this.mInputStream.readInt(); this.mOutputStream.writeInt(0);",0.6348519921302795
getInputMethodWindowVisibleHeight(Lcom/android/internal/view/IInputMethodClient;)I,setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V,"InputMethodManagerService$$ExternalSyntheticLambda4 v2 = new InputMethodManagerService$$ExternalSyntheticLambda4(p0,v1,p1); Object v4 = Binder.withCleanCallingIdentity(v2); int v5 = v4.intValue(); return v5;","DisplayManagerService$BinderService$$ExternalSyntheticLambda0 v9 = new DisplayManagerService$BinderService$$ExternalSyntheticLambda0(p0,p1,p2,p3); v8.forEachLocked(v9);",0.8068190217018127
getInputMethodWindowVisibleHeight(Lcom/android/internal/view/IInputMethodClient;)I,notifySmartspaceEvent(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/SmartspaceTargetEvent;)V,"InputMethodManagerService$$ExternalSyntheticLambda4 v2 = new InputMethodManagerService$$ExternalSyntheticLambda4(p0,v1,p1); Object v4 = Binder.withCleanCallingIdentity(v2); int v5 = v4.intValue(); return v5;","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2(p1,p2); v1.accept(v19);",0.7623727321624756
setAdditionalInputMethodSubtypes(Ljava/lang/String;[Landroid/view/inputmethod/InputMethodSubtype;)V,getInputMethodList(I)Ljava/util/List;,"File v25 = new File(,""inputmethod""); boolean v31 = this.mAdditionalSubtypeMap.isEmpty(); boolean v32 = v25.exists(); boolean v33 = v25.mkdirs();","ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.7677111029624939
setAdditionalInputMethodSubtypes(Ljava/lang/String;[Landroid/view/inputmethod/InputMethodSubtype;)V,getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,"File v25 = new File(,""inputmethod""); boolean v31 = this.mAdditionalSubtypeMap.isEmpty(); boolean v32 = v25.exists(); boolean v33 = v25.mkdirs();","List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked(); List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked(); Iterator v17 = v16.iterator(); Object v19 = v17.next(); String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second); Pair v23 = new Pair(Pair.first,v21); Object v27 = this.mMethodMap.get(Pair.first); int v28 = Integer.parseInt(Pair.second); InputMethodSubtype v31 = v27.getSubtypeAt();",0.7303505539894104
showInputMethodAndSubtypeEnablerFromClient(Lcom/android/internal/view/IInputMethodClient;Ljava/lang/String;)V,finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V,"Intent v14 = new Intent(""android.settings.INPUT_METHOD_SUBTYPE_SETTINGS""); Intent v16 = v14.setFlags(337641472); boolean v17 = TextUtils.isEmpty(p2); if (v17 != 0) {     Intent v18 = v14.putExtra(""input_method_id"", p2);     int v19 = this.mCurrentUserId;     UserHandle v20 = UserHandle.of(v19);     this.mContext.startActivityAsUser(v14, 0, v20);","Intent v42 = new Intent(this.mContext,CantAddAccountActivit.class); this.mContext.startActivityAsUser(, v52);",0.6668441295623779
showInputMethodAndSubtypeEnablerFromClient(Lcom/android/internal/view/IInputMethodClient;Ljava/lang/String;)V,startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,"Intent v14 = new Intent(""android.settings.INPUT_METHOD_SUBTYPE_SETTINGS""); Intent v16 = v14.setFlags(337641472); boolean v17 = TextUtils.isEmpty(p2); if (v17 != 0) {     Intent v18 = v14.putExtra(""input_method_id"", p2);     int v19 = this.mCurrentUserId;     UserHandle v20 = UserHandle.of(v19);     this.mContext.startActivityAsUser(v14, 0, v20);","Intent v51 = new Intent(this.mContext, CantAddAccountActivit.class); Intent v53 = v51.putExtra(""android.accounts.extra.ERROR_CODE"", p1); Intent v54 = v51.addFlags(268435456);",0.6621160507202148
isImeTraceEnabled()Z,startImeTrace()V,ImeTracingClientImpl v4 = new ImeTracingClientImpl(); this.sInstance = v4; ImeTracing v1 = this.sInstance; boolean v6 = v1.isEnabled(); return v6;,ImeTracingClientImpl v4 = new ImeTracingClientImpl(); this.sInstance = ; ImeTracing v1 = this.sInstance; v1.startTrace(0);,0.9122803211212158
isImeTraceEnabled()Z,startImeTrace()V,ImeTracingServerImpl v4 = new ImeTracingServerImpl(); this.sInstance = v4; ImeTracing v1 = this.sInstance; boolean v6 = v1.isEnabled(); return v6;,ImeTracingServerImpl v4 = new ImeTracingServerImpl(); this.sInstance = ; ImeTracing v1 = this.sInstance; v1.startTrace(0);,0.8969278335571289
getEnabledInputMethodList(I)Ljava/util/List;,getAwareLockedInputMethodList(II)Ljava/util/List;,"[I v8 = new [I(1); ArrayMap v13 = new ArrayMap(); ArrayList v15 = new ArrayList(); InputMethodUtils$InputMethodSettings v21 = new InputMethodUtils$InputMethodSettings(v22,v23,v12,v4[0],1); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, p1, v17, v13, v15, 0); ArrayList v26 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodListWithFilterLocked(0); return v10;","Object v6 = LocalServices.getService(UserManagerInterna.class); boolean v7 = v6.exists(p1); [I v11 = new [I(0); [I v5 = v11; ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.7813187837600708
getEnabledInputMethodList(I)Ljava/util/List;,getInputMethodList(I)Ljava/util/List;,"[I v8 = new [I(1); ArrayMap v13 = new ArrayMap(); ArrayList v15 = new ArrayList(); InputMethodUtils$InputMethodSettings v21 = new InputMethodUtils$InputMethodSettings(v22,v23,v12,v4[0],1); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, p1, v17, v13, v15, 0); ArrayList v26 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodListWithFilterLocked(0); return v10;","ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.7693122625350952
hideSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z,showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z,"Object v21 = this.mHideRequestWindowMap.put(v19, p2); InputMethodManagerService$SoftInputShowHideHistory$Entry v27 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(...)","Object v37 = this.mShowRequestWindowMap.put(v35, p2); int v38 = InputMethodManagerService.getImeShowFlagsLocked(); IInputMethodInvoker v34 = this.mBindingController.getCurMethod(); boolean v32 = InputMethodBindingController.bindCurrentInputMethodServiceMainConnection();",0.7828916907310486
hideSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z,reportPerceptibleAsync(Landroid/os/IBinder;Z)V,"int v1 = Binder.getCallingUid(); this.mTarget.hideSoftInput(v19, 0, p3); WindowManagerInternal$ImeTargetInfo v26 = this.mWindowManagerInternal.onToggleImeRequested(0, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);","Object v1 = Objects.requireNonNull(p1, ""windowToken must not be null""); int v2 = Binder.getCallingUid(); this.mCurPerceptible = p2; IBinder v18 = this.mBindingController.getCurToken(); long v19 = Binder.clearCallingIdentity(); StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v29, , p2, v20, v25); boolean v33 = this.mHandler.post(v31); Notification v56 = this.mImeSwitcherNotification.build(); this.mNotificationManager.notifyAsUser(0, 8, v56, UserHandle.ALL);",0.7484958171844482
requestUninstall([BLandroid/app/timezone/ICallback;)I,requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I,"ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10);","ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10);",1.0000001192092896
requestUninstall([BLandroid/app/timezone/ICallback;)I,requestNothing([BZ)V,"ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10);","ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10); boolean v29 = PackageStatusStorage.writePackageStatusWithOptimisticLockCheck(CheckToken.mOptimisticLockId, (CheckToken.mOptimisticLockId + 1), v28, CheckToken.mPackageVersions);",0.8893887996673584
requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I,requestUninstall([BLandroid/app/timezone/ICallback;)I,"ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10);","ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10);",1.0000001192092896
requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I,requestNothing([BZ)V,"ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10);","ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10); boolean v29 = PackageStatusStorage.writePackageStatusWithOptimisticLockCheck(CheckToken.mOptimisticLockId, (CheckToken.mOptimisticLockId + 1), v28, CheckToken.mPackageVersions);",0.8893887996673584
requestNothing([BZ)V,requestUninstall([BLandroid/app/timezone/ICallback;)I,"ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10); boolean v29 = PackageStatusStorage.writePackageStatusWithOptimisticLockCheck(CheckToken.mOptimisticLockId, (CheckToken.mOptimisticLockId + 1), v28, CheckToken.mPackageVersions);","ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10);",0.8893887996673584
requestNothing([BZ)V,requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I,"ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10); boolean v29 = PackageStatusStorage.writePackageStatusWithOptimisticLockCheck(CheckToken.mOptimisticLockId, (CheckToken.mOptimisticLockId + 1), v28, CheckToken.mPackageVersions);","ByteArrayInputStream v4 = new ByteArrayInputStream(p1); DataInputStream v6 = new DataInputStream(v4); int v8 = v6.readInt(); long v9 = v6.readLong(); long v10 = v6.readLong(); CheckToken v11 = new CheckToken(v8,v12); PackageVersions v12 = new PackageVersions(v9,v10);",0.8893887996673584
getRulesState()Landroid/app/timezone/RulesState;,suggestManualTimeZone(Landroid/app/timezonedetector/ManualTimeZoneSuggestion;)Z,"TzDataSetVersion v4 = TimeZoneDistroInstaller.readBaseVersion(this.baseVersionFile); TzDataSetVersion v3 = v4; String v16 = v3.getRulesVersion(); RulesState v15 = new RulesState(v16,this.DISTRO_FORMAT_VERSION_SUPPORTED,v6,,,,); return v2;","boolean v5 = this.mTimeZoneDetectorStrategy.suggestManualTimeZone(v3, p1); return v5;",0.6088340878486633
getRulesState()Landroid/app/timezone/RulesState;,getCapabilitiesAndConfig()Landroid/app/time/TimeZoneCapabilitiesAndConfig;,"TzDataSetVersion v4 = TimeZoneDistroInstaller.readBaseVersion(this.baseVersionFile); TzDataSetVersion v3 = v4; String v16 = v3.getRulesVersion(); RulesState v15 = new RulesState(v16,this.DISTRO_FORMAT_VERSION_SUPPORTED,v6,,,,); return v2;","ConfigurationInternal v5 = this.mServiceConfigAccessor.getConfigurationInternal(v1); TimeZoneCapabilities v8 = ConfigurationInternal.asCapabilities(); TimeZoneConfiguration v9 = ConfigurationInternal.asConfiguration(); TimeZoneCapabilitiesAndConfig v7 = new TimeZoneCapabilitiesAndConfig(v8,v9); return v2;",0.5457907319068909
notifyResourceGranted(II)V,createLocalApprovalIntent()Landroid/content/Intent;,"Intent v20 = new Intent(""android.intent.action.MEDIA_RESOURCE_GRANTED""); Intent v22 = v20.putExtra(""android.intent.extra.PACKAGES"", v12); Intent v23 = v20.putExtra(""android.intent.extra.MEDIA_RESOURCE_TYPE"", p2);","Intent v5 = new Intent(""android.content.action.REQUEST_LOCAL_APPROVAL""); String v4 = v3.getPackageName(); Intent v7 = v5.setPackage(v4); ComponentName v11 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name); Intent v13 = v5.setComponent(v11); return v5;",0.8355318307876587
notifyResourceGranted(II)V,startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,Object v17 = v16.getSystemService(UserManage.class); List v18 = v17.getEnabledProfiles();,Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class); boolean v31 = v30.isActiveProfileOwner(p2); boolean v32 = v30.isActiveDeviceOwner(p2);,0.7890938520431519
setOemUnlockEnabled(Z)V,getServiceSettingsActivity(Lcom/android/internal/os/IResultReceiver;)V,int v5 = UserHandle.getCallingUserId(); UserManager v6 = UserManager.get(this.mContext); boolean v7 = v6.isUserAdmin(v5); if (p1 == 0) { Object v8 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0); FileChannel v11 = PersistentDataBlockService.getBlockOutputChannel(); long v12 = PersistentDataBlockService.getBlockDeviceSize(); FileChannel v13 = v11.position((v12 - 1)); ByteBuffer v14 = ByteBuffer.allocate(1); if (p2 == 0) { int v17 = v11.write(v14); v11.force(1);,"int v16 = UserHandle.getCallingUserId(); AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$1300(this.this$0, v16); String v20 = this.mSettingsActivity; ComponentName v22 = new ComponentName(ServiceInfo.packageName,v20); Bundle v24 = SyncResultReceiver.bundleFor(v19); p1.send(0, v24);",0.7558488845825195
setOemUnlockEnabled(Z)V,accountAuthenticated(Landroid/accounts/Account;)Z,int v5 = UserHandle.getCallingUserId(); UserManager v6 = UserManager.get(this.mContext); boolean v7 = v6.isUserAdmin(v5); if (p1 == 0) { Object v8 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0); FileChannel v11 = PersistentDataBlockService.getBlockOutputChannel(); long v12 = PersistentDataBlockService.getBlockDeviceSize(); FileChannel v13 = v11.position((v12 - 1)); ByteBuffer v14 = ByteBuffer.allocate(1); if (p2 == 0) { int v17 = v11.write(v14); v11.force(1);,AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8); int v35 = UserHandle.getCallingUserId(); AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35); AccountManagerService$UserAccounts v34 = v36;,0.7496145963668823
getMaximumDataBlockSize()J,getOemUnlockEnabled()Z,long v6 = PersistentDataBlockService.getBlockDeviceSize(); if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) long v5 = ; long v4 = v5; return v4;,File v6 = new File(this.mDataBlockFile); FileInputStream v5 = new FileInputStream(v6); DataInputStream v4 = new DataInputStream(v5); long v10 = PersistentDataBlockService.getBlockDeviceSize(); long v11 = v4.skip((v10 - 1)); byte v12 = v4.readByte(); if (v12 == 0) {,0.8419801592826843
getMaximumDataBlockSize()J,getDataBlockSize()I,long v6 = PersistentDataBlockService.getBlockDeviceSize(); if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) long v5 = ; long v4 = v5; return v4;,"int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7); return v15;",0.7424176931381226
write([B)I,getOemUnlockEnabled()Z,"RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,""rw""); ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32)); ByteBuffer v14 = v12.put(v13); ByteBuffer v15 = v12.putInt(428873843); ByteBuffer v16 = v12.putInt(p1.length); ByteBuffer v17 = v12.put(p1); int v21 = v7.write(v12); v7.force(1);",File v6 = new File(this.mDataBlockFile); FileInputStream v5 = new FileInputStream(v6); DataInputStream v4 = new DataInputStream(v5); long v10 = PersistentDataBlockService.getBlockDeviceSize(); long v11 = v4.skip((v10 - 1)); byte v12 = v4.readByte(); if (v12 == 0) {,0.7786517143249512
write([B)I,setOemUnlockEnabled(Z)V,"RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,""rw""); ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32)); ByteBuffer v14 = v12.put(v13); ByteBuffer v15 = v12.putInt(428873843); ByteBuffer v16 = v12.putInt(p1.length); ByteBuffer v17 = v12.put(p1); int v21 = v7.write(v12); v7.force(1);",int v5 = UserHandle.getCallingUserId(); UserManager v6 = UserManager.get(this.mContext); boolean v7 = v6.isUserAdmin(v5); if (p1 == 0) { Object v8 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0); FileChannel v11 = PersistentDataBlockService.getBlockOutputChannel(); long v12 = PersistentDataBlockService.getBlockDeviceSize(); FileChannel v13 = v11.position((v12 - 1)); ByteBuffer v14 = ByteBuffer.allocate(1); if (p2 == 0) { int v17 = v11.write(v14); v11.force(1);,0.660524845123291
getDataBlockSize()I,read()[B,"int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7); return v15;","int v19 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v11); [B v20 = new [B(v19); int v21 = v11.read(v20, 0, v19); return v20;",0.8875020742416382
getDataBlockSize()I,getMaximumDataBlockSize()J,"int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7); return v15;",long v6 = PersistentDataBlockService.getBlockDeviceSize(); if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) long v5 = ; long v4 = v5; return v4;,0.7424176931381226
getOemUnlockEnabled()Z,getMaximumDataBlockSize()J,File v6 = new File(this.mDataBlockFile); FileInputStream v5 = new FileInputStream(v6); DataInputStream v4 = new DataInputStream(v5); long v10 = PersistentDataBlockService.getBlockDeviceSize(); long v11 = v4.skip((v10 - 1)); byte v12 = v4.readByte(); if (v12 == 0) {,long v6 = PersistentDataBlockService.getBlockDeviceSize(); if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) long v5 = ; long v4 = v5; return v4;,0.8419801592826843
getOemUnlockEnabled()Z,write([B)I,File v6 = new File(this.mDataBlockFile); FileInputStream v5 = new FileInputStream(v6); DataInputStream v4 = new DataInputStream(v5); long v10 = PersistentDataBlockService.getBlockDeviceSize(); long v11 = v4.skip((v10 - 1)); byte v12 = v4.readByte(); if (v12 == 0) {,"RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,""rw""); ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32)); ByteBuffer v14 = v12.put(v13); ByteBuffer v15 = v12.putInt(428873843); ByteBuffer v16 = v12.putInt(p1.length); ByteBuffer v17 = v12.put(p1); int v21 = v7.write(v12); v7.force(1);",0.7786517143249512
getPersistentDataPackageName()Ljava/lang/String;,startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,int v4 = Binder.getCallingUid(); this.this$0.enforceUid(v4); Context v7 = PersistentDataBlockService.-$$Nest$fgetmContext(this.this$0); String v8 = v7.getString(17040017); return v8;,"int v21 = Binder.getCallingUid(); AccountManagerService$14 v29 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);",0.7614018321037292
getPersistentDataPackageName()Ljava/lang/String;,setOemUnlockEnabled(Z)V,int v4 = Binder.getCallingUid(); this.this$0.enforceUid(v4); Context v7 = PersistentDataBlockService.-$$Nest$fgetmContext(this.this$0); String v8 = v7.getString(17040017); return v8;,int v5 = UserHandle.getCallingUserId(); UserManager v6 = UserManager.get(this.mContext); boolean v7 = v6.isUserAdmin(v5); if (p1 == 0) { Object v8 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0); FileChannel v11 = PersistentDataBlockService.getBlockOutputChannel(); long v12 = PersistentDataBlockService.getBlockDeviceSize(); FileChannel v13 = v11.position((v12 - 1)); ByteBuffer v14 = ByteBuffer.allocate(1); if (p2 == 0) { int v17 = v11.write(v14); v11.force(1);,0.7493399381637573
wipe()V,getPhysicalAddress()I,int v5 = this.this$0.nativeWipe(v3); if (v4 >= 0) { this.mIsWritable = 0;,int v10 = this.mNativeWrapperImpl.nativeGetPhysicalAddress(); int v8 = v10; int v7 = v8; return v7;,0.5238713622093201
hasFrpCredentialHandle()Z,tryUnlockWithCachedUnifiedChallenge(I)Z,byte[] v8 = v7.getFrpCredentialHandle(); if (v8 == 0) { return ; },"VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2); int v41 = v40.getResponseCode(); LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);",0.6543628573417664
hasFrpCredentialHandle()Z,isWeakEscrowTokenValid(J[BI)Z,byte[] v8 = v7.getFrpCredentialHandle(); if (v8 == 0) { return ; },"VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0); int v31 = v30.getResponseCode();",0.6260076761245728
read()[B,getDataBlockSize()I,"int v19 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v11); [B v20 = new [B(v19); int v21 = v11.read(v20, 0, v19); return v20;","int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7); return v15;",0.8875020742416382
read()[B,getMaximumDataBlockSize()J,"int v19 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v11); [B v20 = new [B(v19); int v21 = v11.read(v20, 0, v19); return v20;",long v6 = PersistentDataBlockService.getBlockDeviceSize(); if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) long v5 = ; long v4 = v5; return v4;,0.737346887588501
getFlashLockState()I,getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,"String v2 = SystemProperties.get(""ro.boot.flash.locked""); int v3 = v2.hashCode(); boolean v4 = v2.equals(""0""); if (v4 != 0) {     return 0; }","byte[] v11 = LockSettingsStorage.readFile(v10); String v10 = LockSettingsStorage.getChildProfileLockFile(p1); Key v19 = this.mJavaKeyStore.getKey(v18, 0); Cipher v20 = Cipher.getInstance(""AES/GCM/NoPadding""); byte[] v24 = v20.doFinal(v13);",0.6306805610656738
getFlashLockState()I,getCredentialType(I)I,"String v2 = SystemProperties.get(""ro.boot.flash.locked""); int v3 = v2.hashCode(); boolean v4 = v2.equals(""0""); if (v4 != 0) {     return 0; }","long v6 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v8 = SyntheticPasswordManager.loadState(""pwd"", v5, p1); long v16 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1); int v15 = v16; boolean v18 = LockPatternUtils.isQualityAlphabeticPassword(v15); boolean v19 = LockPatternUtils.isQualityNumericPin(v15); int v17 = 3; int v2 = v17; return v2;",0.616331160068512
stopTracing()V,startTracing()V,this.mBar.stopTracing();,this.mBar.startTracing();,0.9318675994873047
stopTracing()V,startTracing()V,this.mBar.stopTracing();,this.mBar.startTracing(); this.mTracingEnabled = 1;,0.8546141386032104
onBiometricError(III)V,onBiometricHelp(ILjava/lang/String;)V,"this.mBar.onBiometricError(p1, p2, p3);","this.mBar.onBiometricHelp(p1, p2);",0.8220215439796448
onBiometricError(III)V,suppressAmbientDisplay(Z)V,"this.mBar.onBiometricError(p1, p2, p3);",this.mBar.suppressAmbientDisplay(p1);,0.7486917972564697
onBubbleMetadataFlagChanged(Ljava/lang/String;I)V,onNotificationBubbleChanged(Ljava/lang/String;ZI)V,"this.mNotificationDelegate.onBubbleMetadataFlagChanged(p1, p2);","this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3);",0.8483753800392151
onBubbleMetadataFlagChanged(Ljava/lang/String;I)V,onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onBubbleMetadataFlagChanged(p1, p2);","this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",0.7609658241271973
onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,"int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationClick(v3, v4, p1, p2);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationError(v3, v4, p1, p2, p3, p4, p5, p6, p7); Binder.restoreCallingIdentity(v5);",0.924689531326294
onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,onClearAllNotifications(I)V,"int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationClick(v3, v4, p1, p2);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); this.mNotificationDelegate.onClearAll(v3, v4, p1);",0.8905962705612183
disable2(ILandroid/os/IBinder;Ljava/lang/String;)V,disable(ILandroid/os/IBinder;Ljava/lang/String;)V,"StatusBarManagerService.manageDisableListLocked(p4, p1, p2, p3, 2); int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v8, v6, v7); StatusBarManagerService$$ExternalSyntheticLambda6 v11 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v6); this.mBar.disable(0, v6, v7);","StatusBarManagerService.manageDisableListLocked(p4, p1, p2, p3, 1); int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v8 = StatusBarManagerService.getUiState(0); boolean v9 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v8, v6, v7); if (v9 != 0) {     StatusBarManagerService$UiState.-$$Nest$msetDisabled(v8, v6, v7);     StatusBarManagerService$$ExternalSyntheticLambda6 v11 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v6);     boolean v13 = this.mHandler.post(v11);     if (this.mBar == 0) {         this.mBar.disable(0, v6, v7);",0.9719688296318054
disable2(ILandroid/os/IBinder;Ljava/lang/String;)V,disable(ILandroid/os/IBinder;Ljava/lang/String;)V,"StatusBarManagerService.manageDisableListLocked(p4, p1, p2, p3, 2); int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v8, v6, v7); StatusBarManagerService$$ExternalSyntheticLambda6 v11 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v6); this.mBar.disable(0, v6, v7);","StatusBarManagerService.manageDisableListLocked(p4, p1, p2, p3, 1); int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2);",0.9348148703575134
clickTile(Landroid/content/ComponentName;)V,addTile(Landroid/content/ComponentName;)V,if (this.mBar == 0) { this.mBar.clickQsTile(p1);,if (this.mBar == 0) { this.mBar.addQsTile(p1);,0.9066877961158752
clickTile(Landroid/content/ComponentName;)V,remTile(Landroid/content/ComponentName;)V,if (this.mBar == 0) { this.mBar.clickQsTile(p1);,if (this.mBar == 0) { this.mBar.remQsTile(p1);,0.8948527574539185
onNotificationDirectReplied(Ljava/lang/String;)V,onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,this.mNotificationDelegate.onNotificationDirectReplied(p1);,"this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);",0.8068280816078186
onNotificationDirectReplied(Ljava/lang/String;)V,onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,this.mNotificationDelegate.onNotificationDirectReplied(p1);,"this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",0.8028278946876526
registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;)Lcom/android/internal/statusbar/RegisterStatusBarResult;,disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,"this.mBar = p1; IStatusBar v10 = this.mBar; ArrayMap v23 = new ArrayMap(this.mIcons); Object v25 = this.mDisplayUiState.get(0); int v30 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v31 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25); AppearanceRegion v32 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v25); int v33 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v25); int v34 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v25); boolean v35 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v25); int v36 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); IBinder v37 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v25); boolean v38 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v25); int v39 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v25); InsetsVisibilities v40 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v25); String v41 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v25); LetterboxDetails v42 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v25); [I v28 = new [I(v27); RegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v28,v42); return v29;","Object v17 = this.mDisplayUiState.get(p1); StatusBarManagerService$UiState v18 = new StatusBarManagerService$UiState(0); this.mDisplayUiState.put(p1, v18); v16.setDisabled(v12, v14);",0.7824409604072571
registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;)Lcom/android/internal/statusbar/RegisterStatusBarResult;,setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V,"this.mBar = p1; IStatusBar v10 = this.mBar; ArrayMap v23 = new ArrayMap(this.mIcons); Object v25 = this.mDisplayUiState.get(0); int v30 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v31 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25); AppearanceRegion v32 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v25); int v33 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v25); int v34 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v25); boolean v35 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v25); int v36 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); IBinder v37 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v25); boolean v38 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v25); int v39 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v25); InsetsVisibilities v40 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v25); String v41 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v25); LetterboxDetails v42 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v25); [I v28 = new [I(v27); RegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v28,v42); return v29;","StatusBarIcon v3 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5); Object v5 = this.mIcons.put(p1, v3); this.mBar.setIcon(p1, v3);",0.7683153748512268
registerSessionListener(ILcom/android/internal/statusbar/ISessionListener;)V,onSessionStarted(ILcom/android/internal/logging/InstanceId;)V,Iterator v3 = StatusBarManager.ALL_SESSIONS.iterator(); boolean v4 = v3.hasNext();,Integer v6 = Integer.valueOf(p1); Object v7 = this.mSessionToListeners.get(v6); Iterator v8 = v7.iterator();,0.6026342511177063
registerSessionListener(ILcom/android/internal/statusbar/ISessionListener;)V,recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;,Iterator v3 = StatusBarManager.ALL_SESSIONS.iterator(); boolean v4 = v3.hasNext();,Object v6 = this.mSessionsByUid.get(v4); Iterator v7 = v6.iterator(); this.mSessionsByUid.remove(v4);,0.5618195533752441
onGlobalActionsHidden()V,onGlobalActionsShown()V,if (this.mGlobalActionListener != 0) { this.mGlobalActionListener.onGlobalActionsDismissed();,if (this.mGlobalActionListener != 0) { this.mGlobalActionListener.onGlobalActionsShown();,0.8765063285827637
onGlobalActionsHidden()V,onNotificationSettingsViewed(Ljava/lang/String;)V,if (this.mGlobalActionListener != 0) { this.mGlobalActionListener.onGlobalActionsDismissed();,this.mNotificationDelegate.onNotificationSettingsViewed(p1);,0.5849283933639526
onNotificationClear(Ljava/lang/String;ILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V,onNotificationBubbleChanged(Ljava/lang/String;ZI)V,"this.mNotificationDelegate.onNotificationClear(v3, v4, p1, p2, p3, p4, p5, p6);","this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3);",0.8299651741981506
onNotificationClear(Ljava/lang/String;ILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V,onNotificationActionClick(Ljava/lang/String;ILandroid/app/Notification$Action;Lcom/android/internal/statusbar/NotificationVisibility;Z)V,"this.mNotificationDelegate.onNotificationClear(v3, v4, p1, p2, p3, p4, p5, p6);","this.mNotificationDelegate.onNotificationActionClick(v3, v4, p1, p2, p3, p4, p5);",0.8043651580810547
isTracing()Z,startTracing()V,return this.mTracingEnabled;,this.mBar.startTracing(); this.mTracingEnabled = 1;,0.6084908246994019
isTracing()Z,getTargetSdkVersionForPackage(Ljava/lang/String;)I,return this.mTracingEnabled;,int v20 = v1.getTargetSdkVersion(p1); return v20;,0.5890645384788513
setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V,setIconVisibility(Ljava/lang/String;Z)V,"StatusBarIcon v3 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5); Object v5 = this.mIcons.put(p1, v3); this.mBar.setIcon(p1, v3);","Object v3 = this.mIcons.get(p1); if (StatusBarIcon.visible == p2) StatusBarIcon.visible = p2; this.mBar.setIcon(p1, v3);",0.890093207359314
setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V,registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;)Lcom/android/internal/statusbar/RegisterStatusBarResult;,"StatusBarIcon v3 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5); Object v5 = this.mIcons.put(p1, v3); this.mBar.setIcon(p1, v3);","this.mBar = p1; IStatusBar v10 = this.mBar; ArrayMap v23 = new ArrayMap(this.mIcons); Object v25 = this.mDisplayUiState.get(0); int v30 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v31 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25); AppearanceRegion v32 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v25); int v33 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v25); int v34 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v25); boolean v35 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v25); int v36 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); IBinder v37 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v25); boolean v38 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v25); int v39 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v25); InsetsVisibilities v40 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v25); String v41 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v25); LetterboxDetails v42 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v25); [I v28 = new [I(v27); RegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v28,v42); return v29;",0.7683153748512268
unregisterNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,registerNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,this.mBar.unregisterNearbyMediaDevicesProvider(p1);,this.mBar.registerNearbyMediaDevicesProvider(p1);,0.9452614188194275
unregisterNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,remTile(Landroid/content/ComponentName;)V,this.mBar.unregisterNearbyMediaDevicesProvider(p1);,if (this.mBar == 0) { this.mBar.remQsTile(p1);,0.6450470089912415
onClearAllNotifications(I)V,onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,"int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); this.mNotificationDelegate.onClearAll(v3, v4, p1);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationClick(v3, v4, p1, p2);",0.8905962705612183
onClearAllNotifications(I)V,onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,"int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); this.mNotificationDelegate.onClearAll(v3, v4, p1);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationError(v3, v4, p1, p2, p3, p4, p5, p6, p7); Binder.restoreCallingIdentity(v5);",0.8642908930778503
onNotificationActionClick(Ljava/lang/String;ILandroid/app/Notification$Action;Lcom/android/internal/statusbar/NotificationVisibility;Z)V,onNotificationClear(Ljava/lang/String;ILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onNotificationActionClick(v3, v4, p1, p2, p3, p4, p5);","this.mNotificationDelegate.onNotificationClear(v3, v4, p1, p2, p3, p4, p5, p6);",0.8043651580810547
onNotificationActionClick(Ljava/lang/String;ILandroid/app/Notification$Action;Lcom/android/internal/statusbar/NotificationVisibility;Z)V,onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onNotificationActionClick(v3, v4, p1, p2, p3, p4, p5);","this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",0.79246586561203
onNotificationSmartReplySent(Ljava/lang/String;ILjava/lang/CharSequence;IZ)V,onNotificationSmartSuggestionsAdded(Ljava/lang/String;IIZZ)V,"this.mNotificationDelegate.onNotificationSmartReplySent(p1, p2, p3, p4, p5);","this.mNotificationDelegate.onNotificationSmartSuggestionsAdded(p1, p2, p3, p4, p5);",0.7888226509094238
onNotificationSmartReplySent(Ljava/lang/String;ILjava/lang/CharSequence;IZ)V,onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,"this.mNotificationDelegate.onNotificationSmartReplySent(p1, p2, p3, p4, p5);","this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);",0.7868006229400635
onPanelRevealed(ZI)V,onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onPanelRevealed(p1, p2);","this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",0.8230757117271423
onPanelRevealed(ZI)V,onNotificationBubbleChanged(Ljava/lang/String;ZI)V,"this.mNotificationDelegate.onPanelRevealed(p1, p2);","this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3);",0.8101367950439453
disable2ForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,"Pair v5 = StatusBarManagerService.findMatchingRecordLocked(p4, p2); int v6 = Pair.first.intValue(); Object v10 = this.mDisableRecords.remove(v6); StatusBarManagerService$UiState v18 = new StatusBarManagerService$UiState(0); this.mDisplayUiState.put(p1, v18); v16.setDisabled(v12, v14);","Pair v5 = StatusBarManagerService.findMatchingRecordLocked(p4, p2); int v6 = Pair.first.intValue(); StatusBarManagerService$DisableRecord v8 = new StatusBarManagerService$DisableRecord(StatusBarManagerService,p2,p4); v8.setFlags(p3, p6, p5);",0.8937627673149109
disable2ForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,"StatusBarManagerService$DisableRecord v8 = new StatusBarManagerService$DisableRecord(StatusBarManagerService,p2,p4); v8.setFlags(p3, p6, p5); boolean v11 = this.mDisableRecords.add(v8); Object v17 = this.mDisplayUiState.get(p1); StatusBarManagerService$UiState v18 = new StatusBarManagerService$UiState(0); this.mDisplayUiState.put(p1, v18); v16.setDisabled(v12, v14);","Object v17 = this.mDisplayUiState.get(p1); StatusBarManagerService$UiState v18 = new StatusBarManagerService$UiState(0); this.mDisplayUiState.put(p1, v18); v16.setDisabled(v12, v14);",0.7566298246383667
setImeWindowStatus(ILandroid/os/IBinder;IIZ)V,reportPerceptibleAsync(Landroid/os/IBinder;Z)V,"Object v4 = this.mDisplayUiState.get(p1); this.mImeWindowVis = p2; this.mImeBackDisposition = p3; this.mShowImeSwitcher = p4; this.mImeToken = p5; StatusBarManagerService$$ExternalSyntheticLambda1 v10 = new StatusBarManagerService$$ExternalSyntheticLambda1(p0,p1,p2,p3,p4,p5); boolean v12 = this.mHandler.post(v10);","Object v1 = Objects.requireNonNull(p1, ""windowToken must not be null""); int v2 = Binder.getCallingUid(); this.mCurPerceptible = p2; IBinder v18 = this.mBindingController.getCurToken(); long v19 = Binder.clearCallingIdentity(); StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v29, , p2, v20, v25); boolean v33 = this.mHandler.post(v31); Notification v56 = this.mImeSwitcherNotification.build(); this.mNotificationManager.notifyAsUser(0, 8, v56, UserHandle.ALL);",0.7810568809509277
setImeWindowStatus(ILandroid/os/IBinder;IIZ)V,registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;)Lcom/android/internal/statusbar/RegisterStatusBarResult;,"Object v4 = this.mDisplayUiState.get(p1); this.mImeWindowVis = p2; this.mImeBackDisposition = p3; this.mShowImeSwitcher = p4; this.mImeToken = p5; StatusBarManagerService$$ExternalSyntheticLambda1 v10 = new StatusBarManagerService$$ExternalSyntheticLambda1(p0,p1,p2,p3,p4,p5); boolean v12 = this.mHandler.post(v10);","this.mBar = p1; IStatusBar v10 = this.mBar; ArrayMap v23 = new ArrayMap(this.mIcons); Object v25 = this.mDisplayUiState.get(0); int v30 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v31 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25); AppearanceRegion v32 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v25); int v33 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v25); int v34 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v25); boolean v35 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v25); int v36 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); IBinder v37 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v25); boolean v38 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v25); int v39 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v25); InsetsVisibilities v40 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v25); String v41 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v25); LetterboxDetails v42 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v25); [I v28 = new [I(v27); RegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v28,v42); return v29;",0.7427012920379639
onBiometricAuthenticated(I)V,onBiometricError(III)V,if (this.mBar == 0) { this.mBar.onBiometricAuthenticated(p1);,"this.mBar.onBiometricError(p1, p2, p3);",0.7142602205276489
onBiometricAuthenticated(I)V,hideAuthenticationDialog(J)V,if (this.mBar == 0) { this.mBar.onBiometricAuthenticated(p1);,if (this.mBar == 0) { this.mBar.hideAuthenticationDialog(p1);,0.691996157169342
setUdfpsHbmListener(Landroid/hardware/fingerprint/IUdfpsHbmListener;)V,dismissInattentiveSleepWarning(Z)V,if (this.mBar == 0) { this.mBar.setUdfpsHbmListener(p1);,if (this.mBar == 0) { this.mBar.dismissInattentiveSleepWarning(p1);,0.6933973431587219
setUdfpsHbmListener(Landroid/hardware/fingerprint/IUdfpsHbmListener;)V,addTile(Landroid/content/ComponentName;)V,if (this.mBar == 0) { this.mBar.setUdfpsHbmListener(p1);,if (this.mBar == 0) { this.mBar.addQsTile(p1);,0.6919219493865967
showPinningEscapeToast()V,showPinningEnterExitToast(Z)V,if (this.mBar == 0) { this.mBar.showPinningEscapeToast();,if (this.mBar == 0) { this.mBar.showPinningEnterExitToast(p1);,0.8706645369529724
showPinningEscapeToast()V,suppressAmbientDisplay(Z)V,if (this.mBar == 0) { this.mBar.showPinningEscapeToast();,this.mBar.suppressAmbientDisplay(p1);,0.6897494792938232
showAuthenticationDialog(Landroid/hardware/biometrics/PromptInfo;Landroid/hardware/biometrics/IBiometricSysuiReceiver;[IZZIJLjava/lang/String;JI)V,hideAuthenticationDialog(J)V,"if (this.mBar == 0) { this.mBar.showAuthenticationDialog(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);",if (this.mBar == 0) { this.mBar.hideAuthenticationDialog(p1);,0.928627610206604
showAuthenticationDialog(Landroid/hardware/biometrics/PromptInfo;Landroid/hardware/biometrics/IBiometricSysuiReceiver;[IZZIJLjava/lang/String;JI)V,onBiometricAuthenticated(I)V,"if (this.mBar == 0) { this.mBar.showAuthenticationDialog(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);",if (this.mBar == 0) { this.mBar.onBiometricAuthenticated(p1);,0.6896947026252747
showInattentiveSleepWarning()V,dismissInattentiveSleepWarning(Z)V,if (this.mBar == 0) { this.mBar.showInattentiveSleepWarning();,if (this.mBar == 0) { this.mBar.dismissInattentiveSleepWarning(p1);,0.9451526403427124
showInattentiveSleepWarning()V,pauseWifiDisplay()V,if (this.mBar == 0) { this.mBar.showInattentiveSleepWarning();,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestPauseLocked();,0.6892983913421631
dismissInattentiveSleepWarning(Z)V,showInattentiveSleepWarning()V,if (this.mBar == 0) { this.mBar.dismissInattentiveSleepWarning(p1);,if (this.mBar == 0) { this.mBar.showInattentiveSleepWarning();,0.9451526403427124
dismissInattentiveSleepWarning(Z)V,showPinningEnterExitToast(Z)V,if (this.mBar == 0) { this.mBar.dismissInattentiveSleepWarning(p1);,if (this.mBar == 0) { this.mBar.showPinningEnterExitToast(p1);,0.7147905230522156
onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);","this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",0.8190553188323975
onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,onNotificationDirectReplied(Ljava/lang/String;)V,"this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);",this.mNotificationDelegate.onNotificationDirectReplied(p1);,0.8068280816078186
onNotificationExpansionChanged(Ljava/lang/String;ZZI)V,onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onNotificationExpansionChanged(p1, p2, p3, p4);","this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",0.8060353398323059
onNotificationExpansionChanged(Ljava/lang/String;ZZI)V,onNotificationBubbleChanged(Ljava/lang/String;ZI)V,"this.mNotificationDelegate.onNotificationExpansionChanged(p1, p2, p3, p4);","this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3);",0.7915826439857483
onNotificationSmartSuggestionsAdded(Ljava/lang/String;IIZZ)V,onNotificationSmartReplySent(Ljava/lang/String;ILjava/lang/CharSequence;IZ)V,"this.mNotificationDelegate.onNotificationSmartSuggestionsAdded(p1, p2, p3, p4, p5);","this.mNotificationDelegate.onNotificationSmartReplySent(p1, p2, p3, p4, p5);",0.7888226509094238
onNotificationSmartSuggestionsAdded(Ljava/lang/String;IIZZ)V,onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,"this.mNotificationDelegate.onNotificationSmartSuggestionsAdded(p1, p2, p3, p4, p5);","this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);",0.717984139919281
onNotificationSettingsViewed(Ljava/lang/String;)V,onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,this.mNotificationDelegate.onNotificationSettingsViewed(p1);,"this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",0.8364088535308838
onNotificationSettingsViewed(Ljava/lang/String;)V,onNotificationDirectReplied(Ljava/lang/String;)V,this.mNotificationDelegate.onNotificationSettingsViewed(p1);,this.mNotificationDelegate.onNotificationDirectReplied(p1);,0.7672251462936401
disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,reportPerceptibleAsync(Landroid/os/IBinder;Z)V,"StatusBarManagerService$$ExternalSyntheticLambda6 v25 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v12); boolean v27 = this.mHandler.post(v25);","StatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v25,,p2,v20); boolean v33 = this.mHandler.post(v31);",0.904991865158081
disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,disable2ForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,"Pair v5 = StatusBarManagerService.findMatchingRecordLocked(p4, p2); int v6 = Pair.first.intValue(); StatusBarManagerService$DisableRecord v8 = new StatusBarManagerService$DisableRecord(StatusBarManagerService,p2,p4); v8.setFlags(p3, p6, p5);","Pair v5 = StatusBarManagerService.findMatchingRecordLocked(p4, p2); int v6 = Pair.first.intValue(); Object v10 = this.mDisableRecords.remove(v6); StatusBarManagerService$UiState v18 = new StatusBarManagerService$UiState(0); this.mDisplayUiState.put(p1, v18); v16.setDisabled(v12, v14);",0.8937627673149109
requestTileServiceListeningState(Landroid/content/ComponentName;I)V,collapsePanels()V,"ChangeIdStateQuery v5 = new ChangeIdStateQuery(1,p1,0,p2,0); ChangeIdStateQuery v4 = v5; boolean v10 = PropertyInvalidatedCache.bypass(v4);","int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5);",0.778121829032898
requestTileServiceListeningState(Landroid/content/ComponentName;I)V,clickTile(Landroid/content/ComponentName;)V,this.mBar.requestTileServiceListeningState(p1);,if (this.mBar == 0) { this.mBar.clickQsTile(p1);,0.7325623631477356
shutdown()V,reboot(Z)V,"int v3 = Binder.getCallingPid(); ShutdownCheckPoints$SystemServerCheckPoint v7 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,p2); ShutdownCheckPoints$BinderCheckPoint v7 = new ShutdownCheckPoints$BinderCheckPoint(this.mInjector,p1,p2); ShutdownCheckPoints.recordCheckPointInternal(); this.mNotificationDelegate.prepareForPossibleShutdown();","int v3 = Binder.getCallingPid(); ShutdownCheckPoints$SystemServerCheckPoint v7 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,p2); ShutdownCheckPoints$BinderCheckPoint v7 = new ShutdownCheckPoints$BinderCheckPoint(this.mInjector,p1,p2); ShutdownCheckPoints.recordCheckPointInternal(); this.mNotificationDelegate.prepareForPossibleShutdown(); StatusBarManagerService$$ExternalSyntheticLambda2 v18 = new StatusBarManagerService$$ExternalSyntheticLambda2(p1,);",0.9350626468658447
shutdown()V,onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,"int v3 = Binder.getCallingPid(); ShutdownCheckPoints$SystemServerCheckPoint v7 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,p2); ShutdownCheckPoints$BinderCheckPoint v7 = new ShutdownCheckPoints$BinderCheckPoint(this.mInjector,p1,p2); ShutdownCheckPoints.recordCheckPointInternal(); this.mNotificationDelegate.prepareForPossibleShutdown();","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationClick(v3, v4, p1, p2);",0.6693934202194214
onGlobalActionsShown()V,onGlobalActionsHidden()V,if (this.mGlobalActionListener != 0) { this.mGlobalActionListener.onGlobalActionsShown();,if (this.mGlobalActionListener != 0) { this.mGlobalActionListener.onGlobalActionsDismissed();,0.8765063285827637
onGlobalActionsShown()V,onNotificationSettingsViewed(Ljava/lang/String;)V,if (this.mGlobalActionListener != 0) { this.mGlobalActionListener.onGlobalActionsShown();,this.mNotificationDelegate.onNotificationSettingsViewed(p1);,0.5357843637466431
onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,"int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationError(v3, v4, p1, p2, p3, p4, p5, p6, p7); Binder.restoreCallingIdentity(v5);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationClick(v3, v4, p1, p2);",0.924689531326294
onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,onClearAllNotifications(I)V,"int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationError(v3, v4, p1, p2, p3, p4, p5, p6, p7); Binder.restoreCallingIdentity(v5);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); this.mNotificationDelegate.onClearAll(v3, v4, p1);",0.8642908930778503
unregisterSessionListener(ILcom/android/internal/statusbar/ISessionListener;)V,No similar EPs with similarity > 0.8,,,
setBiometicContextListener(Landroid/hardware/biometrics/IBiometricContextListener;)V,onBiometricError(III)V,this.mBiometricContextListener = p1; this.mBar.setBiometicContextListener(p1);,"this.mBar.onBiometricError(p1, p2, p3);",0.6993138790130615
setBiometicContextListener(Landroid/hardware/biometrics/IBiometricContextListener;)V,suppressAmbientDisplay(Z)V,this.mBiometricContextListener = p1; this.mBar.setBiometicContextListener(p1);,this.mBar.suppressAmbientDisplay(p1);,0.6800815463066101
setNavBarMode(I)V,getNavBarMode()I,"boolean v5 = Settings$Secure.putIntForUser(v4, ""nav_bar_kids_mode"", p1, this.mCurrentUserId); boolean v7 = Settings$Secure.putIntForUser(v6, ""nav_bar_force_visible"", p1, this.mCurrentUserId);","ContentResolver v4 = this.mContext.getContentResolver(); int v5 = Settings$Secure.getIntForUser(v4, ""nav_bar_kids_mode"", this.mCurrentUserId); return v5;",0.7664647102355957
setNavBarMode(I)V,systemReady()V,"PackageManager v13 = this.mContext.getPackageManager(); PackageInfo v17 = v13.getPackageInfo(""com.android.internal.systemui.navbar.threebutton"", v14);","PackageManager v7 = this.mContext.getPackageManager(); boolean v8 = v7.hasSystemFeature(""android.software.secure_lock_screen""); this.mHasSecureLockScreen = v8;",0.7048718929290771
startTracing()V,stopTracing()V,this.mBar.startTracing();,this.mBar.stopTracing();,0.9318675994873047
startTracing()V,stopTracing()V,this.mBar.startTracing(); this.mTracingEnabled = 1;,this.mBar.stopTracing();,0.8546141386032104
onNotificationBubbleChanged(Ljava/lang/String;ZI)V,onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3);","this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",0.8622195720672607
onNotificationBubbleChanged(Ljava/lang/String;ZI)V,onBubbleMetadataFlagChanged(Ljava/lang/String;I)V,"this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3);","this.mNotificationDelegate.onBubbleMetadataFlagChanged(p1, p2);",0.8483753800392151
reboot(Z)V,shutdown()V,"int v3 = Binder.getCallingPid(); ShutdownCheckPoints$SystemServerCheckPoint v7 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,p2); ShutdownCheckPoints$BinderCheckPoint v7 = new ShutdownCheckPoints$BinderCheckPoint(this.mInjector,p1,p2); ShutdownCheckPoints.recordCheckPointInternal(); this.mNotificationDelegate.prepareForPossibleShutdown(); StatusBarManagerService$$ExternalSyntheticLambda2 v18 = new StatusBarManagerService$$ExternalSyntheticLambda2(p1,);","int v3 = Binder.getCallingPid(); ShutdownCheckPoints$SystemServerCheckPoint v7 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,p2); ShutdownCheckPoints$BinderCheckPoint v7 = new ShutdownCheckPoints$BinderCheckPoint(this.mInjector,p1,p2); ShutdownCheckPoints.recordCheckPointInternal(); this.mNotificationDelegate.prepareForPossibleShutdown();",0.9350626468658447
reboot(Z)V,restart()V,"int v3 = Binder.getCallingPid(); ShutdownCheckPoints$SystemServerCheckPoint v7 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,p2); ShutdownCheckPoints$BinderCheckPoint v7 = new ShutdownCheckPoints$BinderCheckPoint(this.mInjector,p1,p2); ShutdownCheckPoints.recordCheckPointInternal(); this.mNotificationDelegate.prepareForPossibleShutdown(); StatusBarManagerService$$ExternalSyntheticLambda2 v18 = new StatusBarManagerService$$ExternalSyntheticLambda2(p1,);",long v3 = Binder.clearCallingIdentity(); StatusBarManagerService$$ExternalSyntheticLambda0 v4 = new StatusBarManagerService$$ExternalSyntheticLambda0(p0); boolean v6 = this.mHandler.post(v4);,0.7509879469871521
removeIcon(Ljava/lang/String;)V,setIconVisibility(Ljava/lang/String;Z)V,Object v3 = this.mIcons.remove(p1); if (this.mBar == 0) { this.mBar.removeIcon(p1);,"Object v3 = this.mIcons.get(p1); if (StatusBarIcon.visible == p2) StatusBarIcon.visible = p2; this.mBar.setIcon(p1, v3);",0.7931897640228271
removeIcon(Ljava/lang/String;)V,remTile(Landroid/content/ComponentName;)V,Object v3 = this.mIcons.remove(p1); if (this.mBar == 0) { this.mBar.removeIcon(p1);,if (this.mBar == 0) { this.mBar.remQsTile(p1);,0.751244068145752
expandNotificationsPanel()V,togglePanel()V,Object v4 = this.mDisplayUiState.get(0); int v6 = v4.getDisabled2(); if ((v5 & 4) != 4) { this.mBar.animateExpandNotificationsPanel();,Object v11 = this.mDisplayUiState.get(0); int v13 = v11.getDisabled2();,0.7500996589660645
expandNotificationsPanel()V,disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,Object v4 = this.mDisplayUiState.get(0); int v6 = v4.getDisabled2(); if ((v5 & 4) != 4) { this.mBar.animateExpandNotificationsPanel();,"Object v17 = this.mDisplayUiState.get(p1); StatusBarManagerService$UiState v18 = new StatusBarManagerService$UiState(0); this.mDisplayUiState.put(p1, v18); v16.setDisabled(v12, v14);",0.6615706086158752
expandSettingsPanel(Ljava/lang/String;)V,collapsePanels()V,if (this.mBar == 0) { this.mBar.animateExpandSettingsPanel(p1);,this.mBar.animateCollapsePanels();,0.7604423761367798
expandSettingsPanel(Ljava/lang/String;)V,showPinningEscapeToast()V,if (this.mBar == 0) { this.mBar.animateExpandSettingsPanel(p1);,if (this.mBar == 0) { this.mBar.showPinningEscapeToast();,0.6310954093933105
suppressAmbientDisplay(Z)V,onBiometricError(III)V,this.mBar.suppressAmbientDisplay(p1);,"this.mBar.onBiometricError(p1, p2, p3);",0.7486917972564697
suppressAmbientDisplay(Z)V,onBiometricHelp(ILjava/lang/String;)V,this.mBar.suppressAmbientDisplay(p1);,"this.mBar.onBiometricHelp(p1, p2);",0.7158387303352356
clearInlineReplyUriPermissions(Ljava/lang/String;)V,onClearAllNotifications(I)V,"int v3 = Binder.getCallingUid(); this.mNotificationDelegate.clearInlineReplyUriPermissions(p1, v3);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); this.mNotificationDelegate.onClearAll(v3, v4, p1);",0.7507379055023193
clearInlineReplyUriPermissions(Ljava/lang/String;)V,onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,"int v3 = Binder.getCallingUid(); this.mNotificationDelegate.clearInlineReplyUriPermissions(p1, v3);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationClick(v3, v4, p1, p2);",0.7147014141082764
hideCurrentInputMethodForBubbles()V,getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,Object v6 = this.sLocalServiceObjects.get(InputMethodManagerInterna.class); if (v5 == 0) { InputMethodManagerInternal v4 = ; v4.hideCurrentInputMethod(19);,"List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked(); List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked(); Iterator v17 = v16.iterator(); Object v19 = v17.next(); String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second); Pair v23 = new Pair(Pair.first,v21); Object v27 = this.mMethodMap.get(Pair.first); int v28 = Integer.parseInt(Pair.second); InputMethodSubtype v31 = v27.getSubtypeAt();",0.6987873315811157
hideCurrentInputMethodForBubbles()V,getAwareLockedInputMethodList(II)Ljava/util/List;,Object v6 = this.sLocalServiceObjects.get(InputMethodManagerInterna.class); if (v5 == 0) { InputMethodManagerInternal v4 = ; v4.hideCurrentInputMethod(19);,"Object v6 = LocalServices.getService(UserManagerInterna.class); boolean v7 = v6.exists(p1); [I v11 = new [I(0); [I v5 = v11; ArrayMap v15 = new ArrayMap(); ArrayList v17 = new ArrayList(); ArrayMap v19 = new ArrayMap(); AdditionalSubtypeUtils.load(v19, v5[0]); InputMethodManagerService.queryInputMethodServicesInternal(this.mContext, v5[0], v19, v15, v17, p2); List v1 = v13; return v1;",0.688901424407959
onPanelHidden()V,onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,long v3 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onPanelHidden(); Binder.restoreCallingIdentity(v3);,"int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationClick(v3, v4, p1, p2);",0.8254530429840088
onPanelHidden()V,onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,long v3 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onPanelHidden(); Binder.restoreCallingIdentity(v3);,"int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationError(v3, v4, p1, p2, p3, p4, p5, p6, p7); Binder.restoreCallingIdentity(v5);",0.8199527859687805
remTile(Landroid/content/ComponentName;)V,addTile(Landroid/content/ComponentName;)V,if (this.mBar == 0) { this.mBar.remQsTile(p1);,if (this.mBar == 0) { this.mBar.addQsTile(p1);,0.9209095239639282
remTile(Landroid/content/ComponentName;)V,clickTile(Landroid/content/ComponentName;)V,if (this.mBar == 0) { this.mBar.remQsTile(p1);,if (this.mBar == 0) { this.mBar.clickQsTile(p1);,0.8948527574539185
restart()V,disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,long v3 = Binder.clearCallingIdentity(); StatusBarManagerService$$ExternalSyntheticLambda0 v4 = new StatusBarManagerService$$ExternalSyntheticLambda0(p0); boolean v6 = this.mHandler.post(v4);,"StatusBarManagerService$$ExternalSyntheticLambda6 v25 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v12); boolean v27 = this.mHandler.post(v25);",0.8468891978263855
restart()V,reportPerceptibleAsync(Landroid/os/IBinder;Z)V,long v3 = Binder.clearCallingIdentity(); StatusBarManagerService$$ExternalSyntheticLambda0 v4 = new StatusBarManagerService$$ExternalSyntheticLambda0(p0); boolean v6 = this.mHandler.post(v4);,"StatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v25,,p2,v20); boolean v33 = this.mHandler.post(v31);",0.8054584264755249
showPinningEnterExitToast(Z)V,showPinningEscapeToast()V,if (this.mBar == 0) { this.mBar.showPinningEnterExitToast(p1);,if (this.mBar == 0) { this.mBar.showPinningEscapeToast();,0.8706645369529724
showPinningEnterExitToast(Z)V,dismissInattentiveSleepWarning(Z)V,if (this.mBar == 0) { this.mBar.showPinningEnterExitToast(p1);,if (this.mBar == 0) { this.mBar.dismissInattentiveSleepWarning(p1);,0.7147905230522156
updateMediaTapToTransferSenderDisplay(ILandroid/media/MediaRoute2Info;Lcom/android/internal/statusbar/IUndoMediaTransferCallback;)V,clickTile(Landroid/content/ComponentName;)V,"this.mBar.updateMediaTapToTransferSenderDisplay(p1, p2, p3);",if (this.mBar == 0) { this.mBar.clickQsTile(p1);,0.6705996990203857
updateMediaTapToTransferSenderDisplay(ILandroid/media/MediaRoute2Info;Lcom/android/internal/statusbar/IUndoMediaTransferCallback;)V,remTile(Landroid/content/ComponentName;)V,"this.mBar.updateMediaTapToTransferSenderDisplay(p1, p2, p3);",if (this.mBar == 0) { this.mBar.remQsTile(p1);,0.6473522782325745
onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,onNotificationBubbleChanged(Ljava/lang/String;ZI)V,"this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);","this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3);",0.8622195720672607
onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,onNotificationSettingsViewed(Ljava/lang/String;)V,"this.mNotificationDelegate.onNotificationVisibilityChanged(p1, p2);",this.mNotificationDelegate.onNotificationSettingsViewed(p1);,0.8364088535308838
togglePanel()V,handleSystemKey(I)V,"int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5); boolean v7 = v6.booleanValue(); if (v4 == 0) { ... } this.mBar.togglePanel();","int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5); boolean v7 = v6.booleanValue(); if (this.mBar == 0) {     this.mBar.handleSystemKey(p1);",0.8658450841903687
togglePanel()V,disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,Object v11 = this.mDisplayUiState.get(0); int v13 = v11.getDisabled2();,"Object v17 = this.mDisplayUiState.get(p1); StatusBarManagerService$UiState v18 = new StatusBarManagerService$UiState(0); this.mDisplayUiState.put(p1, v18); v16.setDisabled(v12, v14);",0.8433873653411865
collapsePanels()V,handleSystemKey(I)V,"int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5);","int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5); boolean v7 = v6.booleanValue(); if (this.mBar == 0) {     this.mBar.handleSystemKey(p1);",0.8918778896331787
collapsePanels()V,togglePanel()V,"int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5);","int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5); boolean v7 = v6.booleanValue(); if (v4 == 0) { ... } this.mBar.togglePanel();",0.7957907915115356
handleSystemKey(I)V,collapsePanels()V,"int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5); boolean v7 = v6.booleanValue(); if (this.mBar == 0) {     this.mBar.handleSystemKey(p1);","int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5);",0.8918778896331787
handleSystemKey(I)V,togglePanel()V,"int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5); boolean v7 = v6.booleanValue(); if (this.mBar == 0) {     this.mBar.handleSystemKey(p1);","int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5); boolean v7 = v6.booleanValue(); if (v4 == 0) { ... } this.mBar.togglePanel();",0.8658450841903687
onSessionEnded(ILcom/android/internal/logging/InstanceId;)V,No similar EPs with similarity > 0.8,,,
disable(ILandroid/os/IBinder;Ljava/lang/String;)V,disable2(ILandroid/os/IBinder;Ljava/lang/String;)V,"StatusBarManagerService.manageDisableListLocked(p4, p1, p2, p3, 1); int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v8 = StatusBarManagerService.getUiState(0); boolean v9 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v8, v6, v7); if (v9 != 0) {     StatusBarManagerService$UiState.-$$Nest$msetDisabled(v8, v6, v7);     StatusBarManagerService$$ExternalSyntheticLambda6 v11 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v6);     boolean v13 = this.mHandler.post(v11);     if (this.mBar == 0) {         this.mBar.disable(0, v6, v7);","StatusBarManagerService.manageDisableListLocked(p4, p1, p2, p3, 2); int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v8, v6, v7); StatusBarManagerService$$ExternalSyntheticLambda6 v11 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v6); this.mBar.disable(0, v6, v7);",0.9719688296318054
disable(ILandroid/os/IBinder;Ljava/lang/String;)V,disable2(ILandroid/os/IBinder;Ljava/lang/String;)V,"StatusBarManagerService.manageDisableListLocked(p4, p1, p2, p3, 1); int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2);","StatusBarManagerService.manageDisableListLocked(p4, p1, p2, p3, 2); int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v8, v6, v7); StatusBarManagerService$$ExternalSyntheticLambda6 v11 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v6); this.mBar.disable(0, v6, v7);",0.9348148703575134
getNavBarMode()I,setNavBarMode(I)V,"ContentResolver v4 = this.mContext.getContentResolver(); int v5 = Settings$Secure.getIntForUser(v4, ""nav_bar_kids_mode"", this.mCurrentUserId); return v5;","boolean v5 = Settings$Secure.putIntForUser(v4, ""nav_bar_kids_mode"", p1, this.mCurrentUserId); boolean v7 = Settings$Secure.putIntForUser(v6, ""nav_bar_force_visible"", p1, this.mCurrentUserId);",0.7664647102355957
getNavBarMode()I,handleSystemKey(I)V,"ContentResolver v4 = this.mContext.getContentResolver(); int v5 = Settings$Secure.getIntForUser(v4, ""nav_bar_kids_mode"", this.mCurrentUserId); return v5;","boolean v8 = this.mActivityTaskManager.canCloseSystemDialogs(v3, v2); if (v8 != 0) {     if (this.mBar == 0) {         this.mBar.handleSystemKey(p1);",0.5777708888053894
onSessionStarted(ILcom/android/internal/logging/InstanceId;)V,recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;,Integer v6 = Integer.valueOf(p1); Object v7 = this.mSessionToListeners.get(v6); Iterator v8 = v7.iterator();,Object v6 = this.mSessionsByUid.get(v4); Iterator v7 = v6.iterator(); this.mSessionsByUid.remove(v4);,0.6493337750434875
onSessionStarted(ILcom/android/internal/logging/InstanceId;)V,startOneTimePermissionSession(Ljava/lang/String;IJJII)V,Integer v6 = Integer.valueOf(p1); Object v7 = this.mSessionToListeners.get(v6); Iterator v8 = v7.iterator();,Object v8 = this.mListeners.get(v7);,0.6237490773200989
registerNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,unregisterNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,this.mBar.registerNearbyMediaDevicesProvider(p1);,this.mBar.unregisterNearbyMediaDevicesProvider(p1);,0.9452614188194275
registerNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,setUdfpsHbmListener(Landroid/hardware/fingerprint/IUdfpsHbmListener;)V,this.mBar.registerNearbyMediaDevicesProvider(p1);,if (this.mBar == 0) { this.mBar.setUdfpsHbmListener(p1);,0.6594630479812622
clearNotificationEffects()V,addOnPermissionsChangeListener(Landroid/permission/IOnPermissionsChangeListener;)V,,,1.0000001192092896
clearNotificationEffects()V,isPermissionRevokedByPolicy(Ljava/lang/String;Ljava/lang/String;I)Z,,,1.0000001192092896
onBiometricHelp(ILjava/lang/String;)V,onBiometricError(III)V,"this.mBar.onBiometricHelp(p1, p2);","this.mBar.onBiometricError(p1, p2, p3);",0.8220215439796448
onBiometricHelp(ILjava/lang/String;)V,suppressAmbientDisplay(Z)V,"this.mBar.onBiometricHelp(p1, p2);",this.mBar.suppressAmbientDisplay(p1);,0.7158387303352356
cancelRequestAddTile(Ljava/lang/String;)V,remTile(Landroid/content/ComponentName;)V,Object v5 = this.mCurrentRequestAddTilePackages.remove(p1); this.mBar.cancelRequestAddTile(p1);,if (this.mBar == 0) { this.mBar.remQsTile(p1);,0.6921015977859497
cancelRequestAddTile(Ljava/lang/String;)V,addTile(Landroid/content/ComponentName;)V,Object v5 = this.mCurrentRequestAddTilePackages.remove(p1); this.mBar.cancelRequestAddTile(p1);,if (this.mBar == 0) { this.mBar.addQsTile(p1);,0.6690988540649414
getDisableFlags(Landroid/os/IBinder;I)[I,getDisplayIds()[I,"Pair v5 = new Pair(v6,); Integer v6 = Integer.valueOf(); Pair v3 = v5; [I v8 = new [I(2); return v8;",[I v7 = new [I(v6); return v5;,0.7120689749717712
getDisableFlags(Landroid/os/IBinder;I)[I,getStableDisplaySize()Landroid/graphics/Point;,"Pair v5 = new Pair(v6,); Integer v6 = Integer.valueOf(); Pair v3 = v5; [I v8 = new [I(2); return v8;","Point v4 = new Point(); v4.set(Point.x, Point.y); return v2;",0.6568422913551331
hideAuthenticationDialog(J)V,showAuthenticationDialog(Landroid/hardware/biometrics/PromptInfo;Landroid/hardware/biometrics/IBiometricSysuiReceiver;[IZZIJLjava/lang/String;JI)V,if (this.mBar == 0) { this.mBar.hideAuthenticationDialog(p1);,"if (this.mBar == 0) { this.mBar.showAuthenticationDialog(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);",0.928627610206604
hideAuthenticationDialog(J)V,onBiometricAuthenticated(I)V,if (this.mBar == 0) { this.mBar.hideAuthenticationDialog(p1);,if (this.mBar == 0) { this.mBar.onBiometricAuthenticated(p1);,0.691996157169342
addTile(Landroid/content/ComponentName;)V,remTile(Landroid/content/ComponentName;)V,if (this.mBar == 0) { this.mBar.addQsTile(p1);,if (this.mBar == 0) { this.mBar.remQsTile(p1);,0.9209095239639282
addTile(Landroid/content/ComponentName;)V,clickTile(Landroid/content/ComponentName;)V,if (this.mBar == 0) { this.mBar.addQsTile(p1);,if (this.mBar == 0) { this.mBar.clickQsTile(p1);,0.9066877961158752
setIconVisibility(Ljava/lang/String;Z)V,setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V,"Object v3 = this.mIcons.get(p1); if (StatusBarIcon.visible == p2) StatusBarIcon.visible = p2; this.mBar.setIcon(p1, v3);","StatusBarIcon v3 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5); Object v5 = this.mIcons.put(p1, v3); this.mBar.setIcon(p1, v3);",0.890093207359314
setIconVisibility(Ljava/lang/String;Z)V,removeIcon(Ljava/lang/String;)V,"Object v3 = this.mIcons.get(p1); if (StatusBarIcon.visible == p2) StatusBarIcon.visible = p2; this.mBar.setIcon(p1, v3);",Object v3 = this.mIcons.remove(p1); if (this.mBar == 0) { this.mBar.removeIcon(p1);,0.7931897640228271
scheduleUpdate()V,removeImeSurface()V,HealthServiceWrapper v1 = this.mHealthServiceWrapper; v1.scheduleUpdate();,Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,0.6202242970466614
scheduleUpdate()V,notifyStatsProviderWarningOrLimitReached()V,HealthServiceWrapper v1 = this.mHealthServiceWrapper; v1.scheduleUpdate();,Message v3 = this.mHandler.obtainMessage(20); v3.sendToTarget();,0.6037749648094177
getProperty(ILandroid/os/BatteryProperty;)I,unbindFromDataLoader(I)V,"int v2 = v1.getProperty(p1, p2); return v2;","Object v3 = v2.get(p1, 0); if (v3 != 0) {",0.7676628828048706
getProperty(ILandroid/os/BatteryProperty;)I,getRestrictBackgroundStatus(I)I,"int v2 = v1.getProperty(p1, p2); return v2;",int v2 = 3; return v2;,0.7090473175048828
clearBcb()Z,setupBcb(Ljava/lang/String;)Z,"byte[] v18 = p2.getBytes(StandardCharsets.UTF_8); this.mOutputStream.writeInt(v18.length); this.mOutputStream.write(v18, 0, v18.length); int v22 = this.mInputStream.readInt(); this.mOutputStream.writeInt(0);","byte[] v18 = p2.getBytes(StandardCharsets.UTF_8); this.mOutputStream.writeInt(v18.length); this.mOutputStream.write(v18, 0, v18.length); int v22 = this.mInputStream.readInt(); this.mOutputStream.writeInt(0);",1.000000238418579
clearBcb()Z,rebootRecoveryWithCommand(Ljava/lang/String;)V,"String v4 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt""); String v5 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb""); String v6 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");","String v4 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt""); String v5 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb""); String v6 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");",0.9999999403953552
rebootRecoveryWithCommand(Ljava/lang/String;)V,clearBcb()Z,"String v4 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt""); String v5 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb""); String v6 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");","String v4 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt""); String v5 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb""); String v6 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");",0.9999999403953552
rebootRecoveryWithCommand(Ljava/lang/String;)V,setupBcb(Ljava/lang/String;)Z,"String v4 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt""); String v5 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb""); String v6 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");","String v4 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt""); String v5 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb""); String v6 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");",0.9999999403953552
rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I,rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I,"LockSettingsInternal v7 = this.mInjector.getLockSettingsService(); int v8 = v7.armRebootEscrow(); this.mInjector.reportRebootEscrowRebootMetrics(v39, v19, v21, v30, p3, v20, , v31);",LockSettingsInternal v7 = this.mInjector.getLockSettingsService(); if (v7 != 0) { int v8 = v7.armRebootEscrow();,0.8531615734100342
rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I,requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z,"LockSettingsInternal v7 = this.mInjector.getLockSettingsService(); int v8 = v7.armRebootEscrow(); this.mInjector.reportRebootEscrowRebootMetrics(v39, v19, v21, v30, p3, v20, , v31);",LockSettingsInternal v47 = v48; boolean v50 = v47.prepareRebootEscrow();,0.8097140789031982
rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I,requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z,LockSettingsInternal v7 = this.mInjector.getLockSettingsService(); if (v7 != 0) { int v8 = v7.armRebootEscrow();,LockSettingsInternal v47 = v48; boolean v50 = v47.prepareRebootEscrow();,0.8752274513244629
rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I,rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I,LockSettingsInternal v7 = this.mInjector.getLockSettingsService(); if (v7 != 0) { int v8 = v7.armRebootEscrow();,"LockSettingsInternal v7 = this.mInjector.getLockSettingsService(); int v8 = v7.armRebootEscrow(); this.mInjector.reportRebootEscrowRebootMetrics(v39, v19, v21, v30, p3, v20, , v31);",0.8531615734100342
allocateSpaceForUpdate(Ljava/lang/String;)Z,rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I,CompressedApexInfoList v10 = RecoverySystemService.getCompressedApexInfoList(p1); ApexManager v11 = ApexManager.getInstance(); v11.reserveSpaceForCompressedApex(v10);,boolean v4 = RecoverySystemService.isLskfCaptured(p1); if (v4 != 0) { int v19 = this.mInjector.getUidFromPackageName(p1);,0.626065731048584
allocateSpaceForUpdate(Ljava/lang/String;)Z,getStagedApexInfo(Ljava/lang/String;)Landroid/content/pm/StagedApexInfo;,CompressedApexInfoList v10 = RecoverySystemService.getCompressedApexInfoList(p1); ApexManager v11 = ApexManager.getInstance(); v11.reserveSpaceForCompressedApex(v10);,ApexSessionParams v29 = new ApexSessionParams(); int v31 = v4.sessionId(); ApexSessionParams.sessionId = v31; ApexInfo v39 = this.mApexManager.getStagedApexInfos(v29); Object v42 = v9.get(p1); if (v42 == 0) {     StagedApexInfo v43 = new StagedApexInfo();     StagedApexInfo.moduleName = ApexInfo.moduleName;     StagedApexInfo.diskImagePath = ApexInfo.modulePath;     StagedApexInfo.versionCode = ApexInfo.versionCode;     StagedApexInfo.versionName = ApexInfo.versionName;     StagedApexInfo.hasClassPathJars = ApexInfo.hasClassPathJars;     return v43; },0.6232527494430542
uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z,clearBcb()Z,"RecoverySystemService$UncryptSocket v23 = new RecoverySystemService$UncryptSocket(); LocalSocket v26 = new LocalSocket(); this.mLocalSocket = v26; LocalSocketAddress v28 = new LocalSocketAddress(""uncrypt"",LocalSocketAddress$Namespace.RESERVED); this.mLocalSocket.connect(v28);","SystemProperties.set(""ctl.start"", ""setup-bcb""); RecoverySystemService$UncryptSocket v13 = new RecoverySystemService$UncryptSocket(); boolean v15 = v13.connectService();",0.8259515762329102
uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z,setupBcb(Ljava/lang/String;)Z,"RecoverySystemService$UncryptSocket v23 = new RecoverySystemService$UncryptSocket(); LocalSocket v26 = new LocalSocket(); this.mLocalSocket = v26; LocalSocketAddress v28 = new LocalSocketAddress(""uncrypt"",LocalSocketAddress$Namespace.RESERVED); this.mLocalSocket.connect(v28);","SystemProperties.set(""ctl.start"", ""setup-bcb""); RecoverySystemService$UncryptSocket v13 = new RecoverySystemService$UncryptSocket(); boolean v15 = v13.connectService(); v13.close();",0.8252070546150208
clearLskf(Ljava/lang/String;)Z,isLskfCaptured(Ljava/lang/String;)Z,boolean v3 = this.mCallerPreparedForReboot.contains(p1); boolean v4 = this.mCallerPendingRequest.containsKey(p1); Object v5 = this.mCallerPendingRequest.remove(p1); boolean v6 = this.mCallerPreparedForReboot.remove(p1); long v9 = Binder.clearCallingIdentity(); LockSettingsInternal v10 = (LockSettingsInternal) this.sLocalServiceObjects.get(LockSettingsInternal.class); boolean v13 = v10.clearRebootEscrow(); Binder.restoreCallingIdentity(v9);,boolean v2 = this.mCallerPreparedForReboot.contains(p1); if (v2 != 0) { return 0; },0.7613519430160522
clearLskf(Ljava/lang/String;)Z,isLskfCaptured(Ljava/lang/String;)Z,boolean v3 = this.mCallerPreparedForReboot.contains(p1); boolean v4 = this.mCallerPendingRequest.containsKey(p1); Object v5 = this.mCallerPendingRequest.remove(p1); boolean v6 = this.mCallerPreparedForReboot.remove(p1); long v9 = Binder.clearCallingIdentity(); LockSettingsInternal v10 = (LockSettingsInternal) this.sLocalServiceObjects.get(LockSettingsInternal.class); boolean v13 = v10.clearRebootEscrow(); Binder.restoreCallingIdentity(v9);,boolean v2 = this.mCallerPreparedForReboot.contains(p1); if (v2 != 0) { return 1; },0.7597912549972534
isLskfCaptured(Ljava/lang/String;)Z,clearLskf(Ljava/lang/String;)Z,boolean v2 = this.mCallerPreparedForReboot.contains(p1); if (v2 != 0) { return 0; },boolean v3 = this.mCallerPreparedForReboot.contains(p1); boolean v4 = this.mCallerPendingRequest.containsKey(p1); Object v5 = this.mCallerPendingRequest.remove(p1); boolean v6 = this.mCallerPreparedForReboot.remove(p1); long v9 = Binder.clearCallingIdentity(); LockSettingsInternal v10 = (LockSettingsInternal) this.sLocalServiceObjects.get(LockSettingsInternal.class); boolean v13 = v10.clearRebootEscrow(); Binder.restoreCallingIdentity(v9);,0.7613519430160522
isLskfCaptured(Ljava/lang/String;)Z,clearLskf(Ljava/lang/String;)Z,boolean v2 = this.mCallerPreparedForReboot.contains(p1); if (v2 != 0) { return 1; },boolean v3 = this.mCallerPreparedForReboot.contains(p1); boolean v4 = this.mCallerPendingRequest.containsKey(p1); Object v5 = this.mCallerPendingRequest.remove(p1); boolean v6 = this.mCallerPreparedForReboot.remove(p1); long v9 = Binder.clearCallingIdentity(); LockSettingsInternal v10 = (LockSettingsInternal) this.sLocalServiceObjects.get(LockSettingsInternal.class); boolean v13 = v10.clearRebootEscrow(); Binder.restoreCallingIdentity(v9);,0.7597912549972534
requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z,rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I,LockSettingsInternal v47 = v48; boolean v50 = v47.prepareRebootEscrow();,LockSettingsInternal v7 = this.mInjector.getLockSettingsService(); if (v7 != 0) { int v8 = v7.armRebootEscrow();,0.8752274513244629
requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z,rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I,LockSettingsInternal v47 = v48; boolean v50 = v47.prepareRebootEscrow();,"LockSettingsInternal v7 = this.mInjector.getLockSettingsService(); int v8 = v7.armRebootEscrow(); this.mInjector.reportRebootEscrowRebootMetrics(v39, v19, v21, v30, p3, v20, , v31);",0.8097140789031982
setupBcb(Ljava/lang/String;)Z,clearBcb()Z,"byte[] v18 = p2.getBytes(StandardCharsets.UTF_8); this.mOutputStream.writeInt(v18.length); this.mOutputStream.write(v18, 0, v18.length); int v22 = this.mInputStream.readInt(); this.mOutputStream.writeInt(0);","byte[] v18 = p2.getBytes(StandardCharsets.UTF_8); this.mOutputStream.writeInt(v18.length); this.mOutputStream.write(v18, 0, v18.length); int v22 = this.mInputStream.readInt(); this.mOutputStream.writeInt(0);",1.000000238418579
setupBcb(Ljava/lang/String;)Z,clearBcb()Z,"String v4 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt""); String v5 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb""); String v6 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");","String v4 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt""); String v5 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb""); String v6 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");",0.9999999403953552
acquireUpdateLock(Landroid/os/IBinder;Ljava/lang/String;)V,getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V,"StringBuilder v3 = new StringBuilder(); StringBuilder v5 = v3.append(""{tag=""); StringBuilder v6 = v3.append(p2); StringBuilder v7 = v3.append("" uid=""); int v8 = Binder.getCallingUid(); StringBuilder v9 = v3.append(v8); StringBuilder v10 = v3.append("" pid=""); int v11 = Binder.getCallingPid(); StringBuilder v12 = v3.append(v11); StringBuilder v13 = v3.append(125); String v14 = v3.toString(); String v2 = v14; this.mLocks.acquire(p1, v2);",int v19 = Binder.getCallingPid(); StringBuilder v20 = v3.append(v19);,0.6665010452270508
acquireUpdateLock(Landroid/os/IBinder;Ljava/lang/String;)V,attachAsOriginator(Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/ISoundTriggerSession;,"StringBuilder v3 = new StringBuilder(); StringBuilder v5 = v3.append(""{tag=""); StringBuilder v6 = v3.append(p2); StringBuilder v7 = v3.append("" uid=""); int v8 = Binder.getCallingUid(); StringBuilder v9 = v3.append(v8); StringBuilder v10 = v3.append("" pid=""); int v11 = Binder.getCallingPid(); StringBuilder v12 = v3.append(v11); StringBuilder v13 = v3.append(125); String v14 = v3.toString(); String v2 = v14; this.mLocks.acquire(p1, v2);",int v3 = Binder.getCallingUid(); Identity.uid = v3; int v4 = Binder.getCallingPid(); Identity.pid = v4;,0.6529182195663452
releaseUpdateLock(Landroid/os/IBinder;)V,setPassword(Landroid/accounts/Account;Ljava/lang/String;)V,this.mLocks.release(p1);,Map v47 = this.authTokenCache; Object v48 = v47.remove(p1); TokenCache v49 = this.accountTokenCaches; this.mCachedTokens.evict(p2);,0.6367878913879395
releaseUpdateLock(Landroid/os/IBinder;)V,tryUnlockWithCachedUnifiedChallenge(I)Z,this.mLocks.release(p1);,"Object v2 = this.mEncryptedPasswords.get(p1); Key v9 = this.mKeyStore.getKey(v3, 0); byte[] v10 = Arrays.copyOf(v2, 12); byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);",0.6360495090484619
createLocalApprovalIntent()Landroid/content/Intent;,notifyResourceGranted(II)V,"Intent v5 = new Intent(""android.content.action.REQUEST_LOCAL_APPROVAL""); String v4 = v3.getPackageName(); Intent v7 = v5.setPackage(v4); ComponentName v11 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name); Intent v13 = v5.setComponent(v11); return v5;","Intent v20 = new Intent(""android.intent.action.MEDIA_RESOURCE_GRANTED""); Intent v22 = v20.putExtra(""android.intent.extra.PACKAGES"", v12); Intent v23 = v20.putExtra(""android.intent.extra.MEDIA_RESOURCE_TYPE"", p2);",0.8355318307876587
createLocalApprovalIntent()Landroid/content/Intent;,startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,"Intent v5 = new Intent(""android.content.action.REQUEST_LOCAL_APPROVAL""); String v4 = v3.getPackageName(); Intent v7 = v5.setPackage(v4); ComponentName v11 = new ComponentName(ActivityInfo.packageName,ActivityInfo.name); Intent v13 = v5.setComponent(v11); return v5;","Intent v51 = new Intent(this.mContext, CantAddAccountActivit.class); Intent v53 = v51.putExtra(""android.accounts.extra.ERROR_CODE"", p1); Intent v54 = v51.addFlags(268435456);",0.7756575345993042
hasRestrictionsProvider()Z,getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,int v1 = UserHandle.getCallingUserId(); ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);,Bundle v1 = this.mUm.getApplicationRestrictions(p1); return v1;,0.6537714004516602
hasRestrictionsProvider()Z,getHibernatingPackagesForUser(I)Ljava/util/List;,int v1 = UserHandle.getCallingUserId(); ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);,"int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, ""getHibernatingPackagesForUser"", 0);",0.6450591683387756
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,hasRestrictionsProvider()Z,Bundle v1 = this.mUm.getApplicationRestrictions(p1); return v1;,int v1 = UserHandle.getCallingUserId(); ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);,0.6537714004516602
getApplicationRestrictions(Ljava/lang/String;)Landroid/os/Bundle;,getKey(Ljava/lang/String;)Ljava/lang/String;,Bundle v1 = this.mUm.getApplicationRestrictions(p1); return v1;,"String v7 = this.mApplicationKeyStorage.getGrantAlias(v5, v4, p1); String v6 = v7; String v1 = v6; return v1;",0.5733709931373596
cancelBugreport(ILjava/lang/String;)V,togglePanel()V,"IBinder v4 = ServiceManager.getService(""dumpstate""); IInterface v6 = v4.queryLocalInterface(""android.os.IDumpstate""); IDumpstate$Stub$Proxy v7 = new IDumpstate$Stub$Proxy(v4); IDumpstate v5 = v7; IDumpstate v3 = v5; if (v3 != 0) { v3.cancelBugreport(p1, p2);","int v2 = Binder.getCallingUid(); ChangeIdStateQuery v5 = ChangeIdStateQuery.byUid(173031413, v2); Object v6 = this.QUERY_CACHE.query(v5); boolean v7 = v6.booleanValue(); if (v4 == 0) { ... } this.mBar.togglePanel();",0.5309091806411743
cancelBugreport(ILjava/lang/String;)V,resetKeyStore(I)V,"IBinder v4 = ServiceManager.getService(""dumpstate""); IInterface v6 = v4.queryLocalInterface(""android.os.IDumpstate""); IDumpstate$Stub$Proxy v7 = new IDumpstate$Stub$Proxy(v4); IDumpstate v5 = v7; IDumpstate v3 = v5; if (v3 != 0) { v3.cancelBugreport(p1, p2);","List v6 = this.mUserManager.getProfiles(p1); UserInfo v10 = this.mUserManager.getUserInfo(p1); IBinder v14 = ServiceManager.checkService(""android.security.maintenance""); IKeystoreMaintenance v15 = IKeystoreMaintenance$Stub.asInterface(v14); IKeystoreMaintenance v13 = v15; v13.clearNamespace(2, 102);",0.5231045484542847
getHibernatingPackagesForUser(I)Ljava/util/List;,getHibernationStatsForUser(Ljava/util/List;I)Ljava/util/Map;,"int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, ""getHibernatingPackagesForUser"", 0);","int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, ""getHibernationStatsForUser"", 0); ArraySet v1 = new ArraySet(p1);",0.8659131526947021
getHibernatingPackagesForUser(I)Ljava/util/List;,setHibernatingForUser(Ljava/lang/String;IZ)V,"int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, ""getHibernatingPackagesForUser"", 0);","int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, ""setHibernatingForUser"", 0); boolean v17 = this.mPackageManagerInternal.canQueryPackage(v16, p1); UserLevelState.hibernated = p3; AppHibernationService$$ExternalSyntheticLambda3 v18 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4); this.mBackgroundExecutor.execute(v18);",0.7883841395378113
isHibernatingForUser(Ljava/lang/String;I)Z,setHibernatingForUser(Ljava/lang/String;IZ)V,"int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, ""isHibernatingForUser"", 0); boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9); boolean v15 = this.mUserStates.contains(v9); Object v19 = this.mUserStates.get(v9); Object v20 = v19.get(p1); boolean v1 = UserLevelState.hibernated; return v1;","int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, ""setHibernatingForUser"", 0); boolean v17 = this.mPackageManagerInternal.canQueryPackage(v16, p1); UserLevelState.hibernated = p3; AppHibernationService$$ExternalSyntheticLambda3 v18 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4); this.mBackgroundExecutor.execute(v18);",0.8305026888847351
isHibernatingForUser(Ljava/lang/String;I)Z,getHibernatingPackagesForUser(I)Ljava/util/List;,"int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, ""isHibernatingForUser"", 0); boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9); boolean v15 = this.mUserStates.contains(v9); Object v19 = this.mUserStates.get(v9); Object v20 = v19.get(p1); boolean v1 = UserLevelState.hibernated; return v1;","int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, ""getHibernatingPackagesForUser"", 0);",0.7715206742286682
getHibernationStatsForUser(Ljava/util/List;I)Ljava/util/Map;,getHibernatingPackagesForUser(I)Ljava/util/List;,"int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, ""getHibernationStatsForUser"", 0); ArraySet v1 = new ArraySet(p1);","int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, ""getHibernatingPackagesForUser"", 0);",0.8659131526947021
getHibernationStatsForUser(Ljava/util/List;I)Ljava/util/Map;,isHibernatingForUser(Ljava/lang/String;I)Z,"int v11 = this.mIActivityManager.handleIncomingUser(v10, v9, p2, 0, 1, ""getHibernationStatsForUser"", 0); ArraySet v1 = new ArraySet(p1);","int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, ""isHibernatingForUser"", 0); boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9); boolean v15 = this.mUserStates.contains(v9); Object v19 = this.mUserStates.get(v9); Object v20 = v19.get(p1); boolean v1 = UserLevelState.hibernated; return v1;",0.7204920053482056
setHibernatingForUser(Ljava/lang/String;IZ)V,isHibernatingForUser(Ljava/lang/String;I)Z,"int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, ""setHibernatingForUser"", 0); boolean v17 = this.mPackageManagerInternal.canQueryPackage(v16, p1); UserLevelState.hibernated = p3; AppHibernationService$$ExternalSyntheticLambda3 v18 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4); this.mBackgroundExecutor.execute(v18);","int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, ""isHibernatingForUser"", 0); boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9); boolean v15 = this.mUserStates.contains(v9); Object v19 = this.mUserStates.get(v9); Object v20 = v19.get(p1); boolean v1 = UserLevelState.hibernated; return v1;",0.8305026888847351
setHibernatingForUser(Ljava/lang/String;IZ)V,getHibernatingPackagesForUser(I)Ljava/util/List;,"int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, ""setHibernatingForUser"", 0); boolean v17 = this.mPackageManagerInternal.canQueryPackage(v16, p1); UserLevelState.hibernated = p3; AppHibernationService$$ExternalSyntheticLambda3 v18 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4); this.mBackgroundExecutor.execute(v18);","int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, ""getHibernatingPackagesForUser"", 0);",0.7883841395378113
isHibernatingGlobally(Ljava/lang/String;)Z,setHibernatingGlobally(Ljava/lang/String;Z)V,"Object v4 = this.mGlobalHibernationStates.get(p1); if (v4 == 0) { int v5 = Binder.getCallingUid(); boolean v6 = this.mPackageManagerInternal.canQueryPackage(v5, p1); if (v6 != 0) { boolean v1 = GlobalLevelState.hibernated; return v1;",Object v4 = this.mGlobalHibernationStates.get(p1); GlobalLevelState.hibernated = p2; GlobalLevelState.savedByte = 0; long v7 = System.currentTimeMillis(); GlobalLevelState.lastUnhibernatedMs = v7;,0.775216817855835
isHibernatingGlobally(Ljava/lang/String;)Z,setHibernatingForUser(Ljava/lang/String;IZ)V,"Object v4 = this.mGlobalHibernationStates.get(p1); if (v4 == 0) { int v5 = Binder.getCallingUid(); boolean v6 = this.mPackageManagerInternal.canQueryPackage(v5, p1); if (v6 != 0) { boolean v1 = GlobalLevelState.hibernated; return v1;","int v7 = this.mIActivityManager.handleIncomingUser(v6, v5, p2, 0, 1, ""setHibernatingForUser"", 0); boolean v17 = this.mPackageManagerInternal.canQueryPackage(v16, p1); UserLevelState.hibernated = p3; AppHibernationService$$ExternalSyntheticLambda3 v18 = new AppHibernationService$$ExternalSyntheticLambda3(AppHibernationService,p1,v4); this.mBackgroundExecutor.execute(v18);",0.7508787512779236
setHibernatingGlobally(Ljava/lang/String;Z)V,isHibernatingGlobally(Ljava/lang/String;)Z,Object v4 = this.mGlobalHibernationStates.get(p1); GlobalLevelState.hibernated = p2; GlobalLevelState.savedByte = 0; long v7 = System.currentTimeMillis(); GlobalLevelState.lastUnhibernatedMs = v7;,"Object v4 = this.mGlobalHibernationStates.get(p1); if (v4 == 0) { int v5 = Binder.getCallingUid(); boolean v6 = this.mPackageManagerInternal.canQueryPackage(v5, p1); if (v6 != 0) { boolean v1 = GlobalLevelState.hibernated; return v1;",0.775216817855835
setHibernatingGlobally(Ljava/lang/String;Z)V,setHibernatingForUser(Ljava/lang/String;IZ)V,"Object v4 = this.mGlobalHibernationStates.get(p1); AppHibernationService$$ExternalSyntheticLambda0 v7 = new AppHibernationService$$ExternalSyntheticLambda0(AppHibernationService,p1,v4); this.mBackgroundExecutor.execute(v7);","UserLevelState v22 = new UserLevelState(v15); AppHibernationService$$ExternalSyntheticLambda4 v24 = new AppHibernationService$$ExternalSyntheticLambda4(v22,v4); this.mBackgroundExecutor.execute(v24);",0.7708228826522827
onReceive(Landroid/content/Context;Landroid/content/Intent;)V,onReceive(Landroid/content/Context;Landroid/content/Intent;)V,"ConfigUpdateInstallReceiver$1 v1 = new ConfigUpdateInstallReceiver$1(p0,p2,p1); v1.start();","ConfigUpdateInstallReceiver$1 v1 = new ConfigUpdateInstallReceiver$1(p0,p2,p1); v1.start();",1.0
onReceive(Landroid/content/Context;Landroid/content/Intent;)V,onReceive(Landroid/content/Context;Landroid/content/Intent;)V,"ConfigUpdateInstallReceiver$1 v1 = new ConfigUpdateInstallReceiver$1(p0,p2,p1); v1.start();","ConfigUpdateInstallReceiver$1 v1 = new ConfigUpdateInstallReceiver$1(p0,p2,p1); v1.start();",1.0
removeNetdEventCallback(I)Z,No similar EPs with similarity > 0.8,,,
logDefaultNetworkValidity(Z)V,logEvent(Landroid/net/ConnectivityMetricsEvent;)I,DefaultNetworkEvent.validatedMs = (DefaultNetworkEvent.validatedMs + (p1 - this.mLastValidationTimeMs));,this.mEventLog.append(p2); boolean v7 = IpConnectivityMetrics.isRateLimited(p2);,0.6396764516830444
logDefaultNetworkValidity(Z)V,startWatchlistLogging()Z,DefaultNetworkEvent.validatedMs = (DefaultNetworkEvent.validatedMs + (p1 - this.mLastValidationTimeMs));,"boolean v3 = this.mIpConnectivityMetrics.addNetdEventCallback(2, this.mNetdEventCallback); if (v3 == 0) { this.mIsLoggingEnabled = 1; boolean v2 = 1; return v2;",0.6277862787246704
addNetdEventCallback(ILandroid/net/INetdEventCallback;)Z,No similar EPs with similarity > 0.8,,,
logEvent(Landroid/net/ConnectivityMetricsEvent;)I,startWatchlistLogging()Z,this.mEventLog.append(p2); boolean v7 = IpConnectivityMetrics.isRateLimited(p2); boolean v8 = this.mBuffer.add(p2);,"boolean v3 = this.mIpConnectivityMetrics.addNetdEventCallback(2, this.mNetdEventCallback); if (v3 == 0) { this.mIsLoggingEnabled = 1; boolean v2 = 1; return v2;",0.7264237999916077
logEvent(Landroid/net/ConnectivityMetricsEvent;)I,startWatchlistLogging()Z,this.mEventLog.append(p2); boolean v7 = IpConnectivityMetrics.isRateLimited(p2);,"boolean v3 = this.mIpConnectivityMetrics.addNetdEventCallback(2, this.mNetdEventCallback); if (v3 == 0) { this.mIsLoggingEnabled = 1; boolean v2 = 1; return v2;",0.7204201221466064
addOnPermissionsChangeListener(Landroid/permission/IOnPermissionsChangeListener;)V,clearNotificationEffects()V,,,1.0000001192092896
addOnPermissionsChangeListener(Landroid/permission/IOnPermissionsChangeListener;)V,isPermissionRevokedByPolicy(Ljava/lang/String;Ljava/lang/String;I)Z,,,1.0000001192092896
updatePermissionFlags(Ljava/lang/String;Ljava/lang/String;IIZI)V,No similar EPs with similarity > 0.8,,,
getPermissionGroupInfo(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;,getSplitPermissions()Ljava/util/List;,return v1;,return v1;,1.0
getPermissionGroupInfo(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;,getAllowlistedRestrictedPermissions(Ljava/lang/String;II)Ljava/util/List;,return v1;,return v1;,1.0
getSplitPermissions()Ljava/util/List;,getPermissionGroupInfo(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;,return v1;,return v1;,1.0
getSplitPermissions()Ljava/util/List;,getAllowlistedRestrictedPermissions(Ljava/lang/String;II)Ljava/util/List;,return v1;,return v1;,1.0
queryPermissionsByGroup(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;,getAllPermissionGroups(I)Landroid/content/pm/ParceledListSlice;,ParceledListSlice v2 = new ParceledListSlice(v1); return v2;,ParceledListSlice v1 = new ParceledListSlice(v2); return v1;,0.9941756725311279
queryPermissionsByGroup(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;,getAllPendingJobs()Landroid/content/pm/ParceledListSlice;,ParceledListSlice v2 = new ParceledListSlice(v1); return v2;,ParceledListSlice v3 = new ParceledListSlice(v4); return v3;,0.9794100522994995
revokeRuntimePermission(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V,No similar EPs with similarity > 0.8,,,
addPermission(Landroid/content/pm/PermissionInfo;Z)Z,No similar EPs with similarity > 0.8,,,
updatePermissionFlagsForAllApps(III)V,No similar EPs with similarity > 0.8,,,
revokePostNotificationPermissionWithoutKillForTest(Ljava/lang/String;I)V,No similar EPs with similarity > 0.8,,,
startOneTimePermissionSession(Ljava/lang/String;IJJII)V,registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,Object v8 = this.mListeners.get(v7);,boolean v7 = this.mListeners.register(p1); return v6;,0.7549411058425903
startOneTimePermissionSession(Ljava/lang/String;IJJII)V,registerListener(Landroid/net/INetworkPolicyListener;)V,Object v8 = this.mListeners.get(v7);,boolean v4 = this.mListeners.register(p1);,0.7360106706619263
removePermission(Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
setAutoRevokeExempted(Ljava/lang/String;ZI)Z,isAutoRevokeExempted(Ljava/lang/String;I)Z,"Object v1 = Objects.requireNonNull(p1); AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1); int v3 = Binder.getCallingUid(); boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3); int v8 = v2.getUid(); int v9 = UserHandle.getUid(p3, v8); String v10 = v2.getPackageName(); int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10); this.mAppOpsManager.setMode(97, v9, v13, );","AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1); int v3 = Binder.getCallingUid(); boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2); boolean v7 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3); int v11 = this.mAppOpsManager.checkOpNoThrow(97, v9, p1);",0.9149790406227112
setAutoRevokeExempted(Ljava/lang/String;ZI)Z,getVersionCodeForPackage(Ljava/lang/String;)J,"Object v1 = Objects.requireNonNull(p1); AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1); int v3 = Binder.getCallingUid(); boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3); int v8 = v2.getUid(); int v9 = UserHandle.getUid(p3, v8); String v10 = v2.getPackageName(); int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10); this.mAppOpsManager.setMode(97, v9, v13, );","int v1 = Binder.getCallingUid(); int v2 = UserHandle.getUserId(v1); Object v5 = this.sSnapshot.get(); int v6 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v16 = new ComputerEngine(v14,v11); this.sSnapshot.set(v12); PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);",0.7676598429679871
getAllPermissionGroups(I)Landroid/content/pm/ParceledListSlice;,queryPermissionsByGroup(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;,ParceledListSlice v1 = new ParceledListSlice(v2); return v1;,ParceledListSlice v2 = new ParceledListSlice(v1); return v2;,0.9941756725311279
getAllPermissionGroups(I)Landroid/content/pm/ParceledListSlice;,getAllPendingJobs()Landroid/content/pm/ParceledListSlice;,ParceledListSlice v1 = new ParceledListSlice(v2); return v1;,ParceledListSlice v3 = new ParceledListSlice(v4); return v3;,0.9771069288253784
getAllowlistedRestrictedPermissions(Ljava/lang/String;II)Ljava/util/List;,getPermissionGroupInfo(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;,return v1;,return v1;,1.0
getAllowlistedRestrictedPermissions(Ljava/lang/String;II)Ljava/util/List;,getSplitPermissions()Ljava/util/List;,return v1;,return v1;,1.0
shouldShowRequestPermissionRationale(Ljava/lang/String;Ljava/lang/String;I)Z,No similar EPs with similarity > 0.8,,,
grantRuntimePermission(Ljava/lang/String;Ljava/lang/String;I)V,No similar EPs with similarity > 0.8,,,
isAutoRevokeExempted(Ljava/lang/String;I)Z,setAutoRevokeExempted(Ljava/lang/String;ZI)Z,"AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1); int v3 = Binder.getCallingUid(); boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2); boolean v7 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3); int v11 = this.mAppOpsManager.checkOpNoThrow(97, v9, p1);","Object v1 = Objects.requireNonNull(p1); AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1); int v3 = Binder.getCallingUid(); boolean v6 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3); int v8 = v2.getUid(); int v9 = UserHandle.getUid(p3, v8); String v10 = v2.getPackageName(); int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10); this.mAppOpsManager.setMode(97, v9, v13, );",0.9149790406227112
isAutoRevokeExempted(Ljava/lang/String;I)Z,getVersionCodeForPackage(Ljava/lang/String;)J,"AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1); int v3 = Binder.getCallingUid(); boolean v4 = this.mPackageManagerInt.filterAppAccess(p1, v3, p2); boolean v7 = this.mPackageManagerInt.isCallerInstallerOfRecord(v2, v3); int v11 = this.mAppOpsManager.checkOpNoThrow(97, v9, p1);","int v1 = Binder.getCallingUid(); int v2 = UserHandle.getUserId(v1); Object v5 = this.sSnapshot.get(); int v6 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v16 = new ComputerEngine(v14,v11); this.sSnapshot.set(v12); PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);",0.7603491544723511
addAllowlistedRestrictedPermission(Ljava/lang/String;Ljava/lang/String;II)Z,No similar EPs with similarity > 0.8,,,
getAutoRevokeExemptionGrantedPackages(I)Ljava/util/List;,getAutoRevokeExemptionRequestedPackages(I)Ljava/util/List;,"ArrayList v3 = new ArrayList(); PermissionManagerService$$ExternalSyntheticLambda0 v5 = new PermissionManagerService$$ExternalSyntheticLambda0(2,v3); this.mPackageManagerInt.forEachInstalledPackage(v5, p1); List v1 = v3; return v1;","ArrayList v3 = new ArrayList(); PermissionManagerService$$ExternalSyntheticLambda0 v5 = new PermissionManagerService$$ExternalSyntheticLambda0(1,v3); this.mPackageManagerInt.forEachInstalledPackage(v5, p1); List v1 = v3; return v1;",0.9997791051864624
getAutoRevokeExemptionGrantedPackages(I)Ljava/util/List;,setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V,"ArrayList v3 = new ArrayList(); PermissionManagerService$$ExternalSyntheticLambda0 v5 = new PermissionManagerService$$ExternalSyntheticLambda0(2,v3); this.mPackageManagerInt.forEachInstalledPackage(v5, p1); List v1 = v3; return v1;","DisplayManagerService$BinderService$$ExternalSyntheticLambda0 v9 = new DisplayManagerService$BinderService$$ExternalSyntheticLambda0(p0,p1,p2,p3); v8.forEachLocked(v9);",0.6902026534080505
getPermissionFlags(Ljava/lang/String;Ljava/lang/String;I)I,No similar EPs with similarity > 0.8,,,
getPermissionInfo(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;,getPermissionGroupInfo(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;,return v1;,return v1;,1.0
getPermissionInfo(Ljava/lang/String;Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;,getSplitPermissions()Ljava/util/List;,return v1;,return v1;,1.0
isPermissionRevokedByPolicy(Ljava/lang/String;Ljava/lang/String;I)Z,clearNotificationEffects()V,,,1.0000001192092896
isPermissionRevokedByPolicy(Ljava/lang/String;Ljava/lang/String;I)Z,addOnPermissionsChangeListener(Landroid/permission/IOnPermissionsChangeListener;)V,,,1.0000001192092896
registerAttributionSource(Landroid/content/AttributionSourceState;)V,isRegisteredAttributionSource(Landroid/content/AttributionSourceState;)Z,"AttributionSource v1 = new AttributionSource(p1); IBinder v23 = AttributionSourceState.token; Object v24 = this.mAttributions.put(v23, v1);",IBinder v4 = AttributionSourceState.token; Object v5 = this.mAttributions.get(v4);,0.8926868438720703
registerAttributionSource(Landroid/content/AttributionSourceState;)V,isRegisteredAttributionSource(Landroid/content/AttributionSourceState;)Z,"AttributionSource v1 = new AttributionSource(p1); IBinder v23 = AttributionSourceState.token; Object v24 = this.mAttributions.put(v23, v1);",AttributionSource v1 = new AttributionSource(p1);,0.8639198541641235
isRegisteredAttributionSource(Landroid/content/AttributionSourceState;)Z,registerAttributionSource(Landroid/content/AttributionSourceState;)V,IBinder v4 = AttributionSourceState.token; Object v5 = this.mAttributions.get(v4);,"AttributionSource v1 = new AttributionSource(p1); IBinder v23 = AttributionSourceState.token; Object v24 = this.mAttributions.put(v23, v1);",0.8926868438720703
isRegisteredAttributionSource(Landroid/content/AttributionSourceState;)Z,registerAttributionSource(Landroid/content/AttributionSourceState;)V,AttributionSource v1 = new AttributionSource(p1);,"AttributionSource v1 = new AttributionSource(p1); IBinder v23 = AttributionSourceState.token; Object v24 = this.mAttributions.put(v23, v1);",0.8639198541641235
removeAllowlistedRestrictedPermission(Ljava/lang/String;Ljava/lang/String;II)Z,No similar EPs with similarity > 0.8,,,
stopOneTimePermissionSession(Ljava/lang/String;I)V,unregisterPackageChangeObserver(Landroid/content/pm/IPackageChangeObserver;)V,"int v7 = v6.getPackageUid(p1, 0); Object v8 = this.mListeners.get(v7); this.mListeners.remove(v7); v8.cancel();",boolean v1 = PackageManagerService.mPackageChangeObservers.remove(p1);,0.6545306444168091
stopOneTimePermissionSession(Ljava/lang/String;I)V,unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,"int v7 = v6.getPackageUid(p1, 0); Object v8 = this.mListeners.get(v7); this.mListeners.remove(v7); v8.cancel();",boolean v7 = this.mListeners.unregister(p1); boolean v6 = v7; return v6;,0.6486349105834961
removeOnPermissionsChangeListener(Landroid/permission/IOnPermissionsChangeListener;)V,No similar EPs with similarity > 0.8,,,
getAutoRevokeExemptionRequestedPackages(I)Ljava/util/List;,getAutoRevokeExemptionGrantedPackages(I)Ljava/util/List;,"ArrayList v3 = new ArrayList(); PermissionManagerService$$ExternalSyntheticLambda0 v5 = new PermissionManagerService$$ExternalSyntheticLambda0(1,v3); this.mPackageManagerInt.forEachInstalledPackage(v5, p1); List v1 = v3; return v1;","ArrayList v3 = new ArrayList(); PermissionManagerService$$ExternalSyntheticLambda0 v5 = new PermissionManagerService$$ExternalSyntheticLambda0(2,v3); this.mPackageManagerInt.forEachInstalledPackage(v5, p1); List v1 = v3; return v1;",0.9997791051864624
getAutoRevokeExemptionRequestedPackages(I)Ljava/util/List;,setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V,"ArrayList v3 = new ArrayList(); PermissionManagerService$$ExternalSyntheticLambda0 v5 = new PermissionManagerService$$ExternalSyntheticLambda0(1,v3); this.mPackageManagerInt.forEachInstalledPackage(v5, p1); List v1 = v3; return v1;","DisplayManagerService$BinderService$$ExternalSyntheticLambda0 v9 = new DisplayManagerService$BinderService$$ExternalSyntheticLambda0(p0,p1,p2,p3); v8.forEachLocked(v9);",0.6910086870193481
getDataLoader(I)Landroid/content/pm/IDataLoader;,unbindFromDataLoader(I)V,"Object v3 = v2.get(p1, 0); IDataLoader v4 = this.mDataLoader; return v4;","Object v3 = v2.get(p1, 0); if (v3 != 0) {",0.7166467308998108
getDataLoader(I)Landroid/content/pm/IDataLoader;,getProperty(ILandroid/os/BatteryProperty;)I,"Object v3 = v2.get(p1, 0); IDataLoader v4 = this.mDataLoader; return v4;","int v2 = v1.getProperty(p1, p2); return v2;",0.6238129734992981
unbindFromDataLoader(I)V,getProperty(ILandroid/os/BatteryProperty;)I,"Object v3 = v2.get(p1, 0); if (v3 != 0) {","int v2 = v1.getProperty(p1, p2); return v2;",0.7676628828048706
unbindFromDataLoader(I)V,getDataLoader(I)Landroid/content/pm/IDataLoader;,"Object v3 = v2.get(p1, 0); if (v3 != 0) {","Object v3 = v2.get(p1, 0); IDataLoader v4 = this.mDataLoader; return v4;",0.7166467308998108
bindToDataLoader(ILandroid/content/pm/DataLoaderParamsParcel;JLandroid/content/pm/IDataLoaderStatusListener;)Z,startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,"DataLoaderManagerService$DataLoaderServiceConnection v19 = new DataLoaderManagerService$DataLoaderServiceConnection(this.this$0,p1,p4); Intent v21 = new Intent(); Intent v23 = v21.setComponent(v6); Handler v24 = DataLoaderManagerService.-$$Nest$fgetmHandler(this.this$0); DataLoaderManagerService$DataLoaderManagerBinderService$$ExternalSyntheticLambda0 v25 = new DataLoaderManagerService$DataLoaderManagerBinderService$$ExternalSyntheticLambda0(p0,v21,v19,v6,p1); boolean v27 = v24.postDelayed(v25, p3);","int v21 = Binder.getCallingUid(); AccountManagerService$14 v29 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);",0.7154226899147034
bindToDataLoader(ILandroid/content/pm/DataLoaderParamsParcel;JLandroid/content/pm/IDataLoaderStatusListener;)Z,registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,"DataLoaderManagerService$DataLoaderServiceConnection v19 = new DataLoaderManagerService$DataLoaderServiceConnection(this.this$0,p1,p4); Intent v21 = new Intent(); Intent v23 = v21.setComponent(v6); Handler v24 = DataLoaderManagerService.-$$Nest$fgetmHandler(this.this$0); DataLoaderManagerService$DataLoaderManagerBinderService$$ExternalSyntheticLambda0 v25 = new DataLoaderManagerService$DataLoaderManagerBinderService$$ExternalSyntheticLambda0(p0,v21,v19,v6,p1); boolean v27 = v24.postDelayed(v25, p3);","this.this$0.assertCalledByPackageOwner(p2); RemoteCallback v27 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3); AmbientContextManagerService$ClientRequest v40 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);",0.6979773640632629
addListener(Landroid/app/time/ITimeZoneDetectorListener;)V,removeListener(Landroid/app/time/ITimeZoneDetectorListener;)V,"IBinder v3 = p1.asBinder(); boolean v4 = this.mListeners.containsKey(v3); v3.linkToDeath(p0, 0); Object v6 = this.mListeners.put(v3, p1);","IBinder v3 = p1.asBinder(); Object v4 = this.mListeners.remove(v3); boolean v5 = v3.unlinkToDeath(p0, 0);",0.9216269254684448
addListener(Landroid/app/time/ITimeZoneDetectorListener;)V,setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,"IBinder v3 = p1.asBinder(); boolean v4 = this.mListeners.containsKey(v3); v3.linkToDeath(p0, 0); Object v6 = this.mListeners.put(v3, p1);","IBinder v9 = p2.asBinder(); v9.linkToDeath(this.mInputChangeListenerRecord, 0);",0.7244930863380432
getCapabilitiesAndConfig()Landroid/app/time/TimeZoneCapabilitiesAndConfig;,updateConfiguration(Landroid/app/time/TimeZoneConfiguration;)Z,"ConfigurationInternal v5 = this.mServiceConfigAccessor.getConfigurationInternal(v1); TimeZoneCapabilities v8 = ConfigurationInternal.asCapabilities(); TimeZoneConfiguration v9 = ConfigurationInternal.asConfiguration(); TimeZoneCapabilitiesAndConfig v7 = new TimeZoneCapabilitiesAndConfig(v8,v9); return v2;","boolean v9 = this.mServiceConfigAccessor.updateConfiguration(v5, p1); return v2;",0.6925112009048462
getCapabilitiesAndConfig()Landroid/app/time/TimeZoneCapabilitiesAndConfig;,getFontConfig()Landroid/text/FontConfig;,"ConfigurationInternal v5 = this.mServiceConfigAccessor.getConfigurationInternal(v1); TimeZoneCapabilities v8 = ConfigurationInternal.asCapabilities(); TimeZoneConfiguration v9 = ConfigurationInternal.asConfiguration(); TimeZoneCapabilitiesAndConfig v7 = new TimeZoneCapabilitiesAndConfig(v8,v9); return v2;","Object v6 = this.mConfigSupplier.apply(v5); List v9 = v6.getFontFamilies(); ArrayList v8 = new ArrayList((v10 + v11)); FontConfig v16 = new FontConfig(v8, v17, this.mLastModifiedMillis, this.mConfigVersion); return v3;",0.5938806533813477
suggestTelephonyTimeZone(Landroid/app/timezonedetector/TelephonyTimeZoneSuggestion;)V,disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,"Object v2 = Objects.requireNonNull(p1); TimeZoneDetectorService$$ExternalSyntheticLambda1 v3 = new TimeZoneDetectorService$$ExternalSyntheticLambda1(p0,p1); boolean v5 = this.mHandler.post(v3);","StatusBarManagerService$$ExternalSyntheticLambda6 v25 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v12); boolean v27 = this.mHandler.post(v25);",0.6975958347320557
suggestTelephonyTimeZone(Landroid/app/timezonedetector/TelephonyTimeZoneSuggestion;)V,removeData(Landroid/view/contentcapture/DataRemovalRequest;)V,"Object v2 = Objects.requireNonNull(p1); TimeZoneDetectorService$$ExternalSyntheticLambda1 v3 = new TimeZoneDetectorService$$ExternalSyntheticLambda1(p0,p1); boolean v5 = this.mHandler.post(v3);",Object v1 = Objects.requireNonNull(p1); RemoteContentCaptureService$$ExternalSyntheticLambda2 v22 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1); RemoteContentCaptureService.scheduleAsyncRequest(v22);,0.6856722235679626
updateConfiguration(Landroid/app/time/TimeZoneConfiguration;)Z,getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;,"boolean v9 = this.mServiceConfigAccessor.updateConfiguration(v5, p1); return v2;","Collection v8 = this.mAuthenticatorCache.getAllServices(v2); AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2); Integer v20 = Integer.valueOf(v1); int v25 = this.mPackageManager.getPackageUidAsUser(p1, v22);",0.7006297707557678
updateConfiguration(Landroid/app/time/TimeZoneConfiguration;)Z,getCapabilitiesAndConfig()Landroid/app/time/TimeZoneCapabilitiesAndConfig;,"boolean v9 = this.mServiceConfigAccessor.updateConfiguration(v5, p1); return v2;","ConfigurationInternal v5 = this.mServiceConfigAccessor.getConfigurationInternal(v1); TimeZoneCapabilities v8 = ConfigurationInternal.asCapabilities(); TimeZoneConfiguration v9 = ConfigurationInternal.asConfiguration(); TimeZoneCapabilitiesAndConfig v7 = new TimeZoneCapabilitiesAndConfig(v8,v9); return v2;",0.6925112009048462
removeListener(Landroid/app/time/ITimeZoneDetectorListener;)V,addListener(Landroid/app/time/ITimeZoneDetectorListener;)V,"IBinder v3 = p1.asBinder(); Object v4 = this.mListeners.remove(v3); boolean v5 = v3.unlinkToDeath(p0, 0);","IBinder v3 = p1.asBinder(); boolean v4 = this.mListeners.containsKey(v3); v3.linkToDeath(p0, 0); Object v6 = this.mListeners.put(v3, p1);",0.9216269254684448
removeListener(Landroid/app/time/ITimeZoneDetectorListener;)V,unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,"IBinder v3 = p1.asBinder(); Object v4 = this.mListeners.remove(v3); boolean v5 = v3.unlinkToDeath(p0, 0);",boolean v7 = this.mListeners.unregister(p1); boolean v6 = v7; return v6;,0.753650963306427
suggestManualTimeZone(Landroid/app/timezonedetector/ManualTimeZoneSuggestion;)Z,suggestTelephonyTimeZone(Landroid/app/timezonedetector/TelephonyTimeZoneSuggestion;)V,"boolean v5 = this.mTimeZoneDetectorStrategy.suggestManualTimeZone(v3, p1); return v5;","Object v2 = Objects.requireNonNull(p1); TimeZoneDetectorService$$ExternalSyntheticLambda1 v3 = new TimeZoneDetectorService$$ExternalSyntheticLambda1(p0,p1); boolean v5 = this.mHandler.post(v3);",0.6685349345207214
suggestManualTimeZone(Landroid/app/timezonedetector/ManualTimeZoneSuggestion;)Z,shouldAlwaysRespectAppRequestedMode()Z,"boolean v5 = this.mTimeZoneDetectorStrategy.suggestManualTimeZone(v3, p1); return v5;",boolean v5 = this.mAlwaysRespectAppRequest; boolean v4 = v5; return v4;,0.6150032877922058
destroySmartspaceSession(Landroid/app/smartspace/SmartspaceSessionId;)V,requestSmartspaceUpdate(Landroid/app/smartspace/SmartspaceSessionId;)V,SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda5 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda5(p1); AbstractPerUserSystemService v17 = this.this$0.getServiceForUserLocked(v9); v1.accept(v17);,SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda4 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda4(p1); AbstractPerUserSystemService v20 = this.this$0.getServiceForUserLocked(v9); v1.accept(v19);,0.9955012798309326
destroySmartspaceSession(Landroid/app/smartspace/SmartspaceSessionId;)V,registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda5 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda5(p1); AbstractPerUserSystemService v17 = this.this$0.getServiceForUserLocked(v9); v1.accept(v17);,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v19);",0.8247140645980835
registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,notifySmartspaceEvent(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/SmartspaceTargetEvent;)V,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v19);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2(p1,p2); v1.accept(v19);",0.9933181405067444
registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,unregisterSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v19);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0(p1,p2); v1.accept(v19);",0.9921393990516663
requestSmartspaceUpdate(Landroid/app/smartspace/SmartspaceSessionId;)V,destroySmartspaceSession(Landroid/app/smartspace/SmartspaceSessionId;)V,SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda4 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda4(p1); AbstractPerUserSystemService v20 = this.this$0.getServiceForUserLocked(v9); v1.accept(v19);,SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda5 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda5(p1); AbstractPerUserSystemService v17 = this.this$0.getServiceForUserLocked(v9); v1.accept(v17);,0.9955012798309326
requestSmartspaceUpdate(Landroid/app/smartspace/SmartspaceSessionId;)V,registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda4 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda4(p1); AbstractPerUserSystemService v20 = this.this$0.getServiceForUserLocked(v9); v1.accept(v19);,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v19);",0.8495935201644897
notifySmartspaceEvent(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/SmartspaceTargetEvent;)V,registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2(p1,p2); v1.accept(v19);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v19);",0.9933181405067444
notifySmartspaceEvent(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/SmartspaceTargetEvent;)V,registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2(p1,p2); v1.accept(v19);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v16);",0.9919213652610779
createSmartspaceSession(Landroid/app/smartspace/SmartspaceConfig;Landroid/app/smartspace/SmartspaceSessionId;Landroid/os/IBinder;)V,notifySmartspaceEvent(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/SmartspaceTargetEvent;)V,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda3 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda3(p1,p2,p3); v1.accept(v19);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2(p1,p2); v1.accept(v19);",0.9907661080360413
createSmartspaceSession(Landroid/app/smartspace/SmartspaceConfig;Landroid/app/smartspace/SmartspaceSessionId;Landroid/os/IBinder;)V,registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda3 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda3(p1,p2,p3); v1.accept(v19);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v19);",0.9839060306549072
unregisterSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0(p1,p2); v1.accept(v19);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v19);",0.9921393990516663
unregisterSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0(p1,p2); v1.accept(v19);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v16);",0.9911811351776123
getDeviceStateInfo()Landroid/hardware/devicestate/DeviceStateInfo;,requestBaseStateOverride(Landroid/os/IBinder;II)V,"I v6 = DeviceStateManagerService.getSupportedStateIdentifiersLocked(); Object v7 = this.mBaseState.get(); int v8 = v7.getIdentifier(); Object v9 = this.mCommittedState.get(); int v10 = v9.getIdentifier(); DeviceStateInfo v11 = new DeviceStateInfo(v6, v8, v10); return v2;","Optional v7 = DeviceStateManagerService.getStateLocked(p2); boolean v8 = v7.isPresent(); Object v9 = this.mProcessRecords.get(p4); boolean v10 = this.mOverrideRequestController.hasRequest(p5, 1); OverrideRequest v11 = new OverrideRequest(p5, p4, p2, p3, 1); this.mOverrideRequestController.addBaseStateRequest(v11);",0.6561840176582336
getDeviceStateInfo()Landroid/hardware/devicestate/DeviceStateInfo;,getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;,"I v6 = DeviceStateManagerService.getSupportedStateIdentifiersLocked(); Object v7 = this.mBaseState.get(); int v8 = v7.getIdentifier(); Object v9 = this.mCommittedState.get(); int v10 = v9.getIdentifier(); DeviceStateInfo v11 = new DeviceStateInfo(v6, v8, v10); return v2;","int v18 = this.mHdmiCecNetwork.physicalAddressToPortId(HdmiCecLocalDevice$ActiveSource.physicalAddress); HdmiDeviceInfo$Builder v20 = new HdmiDeviceInfo$Builder(2,0); HdmiDeviceInfo$Builder v22 = v20.setPhysicalAddress(HdmiCecLocalDevice$ActiveSource.physicalAddress); HdmiDeviceInfo$Builder v23 = v22.setPortId(v17); HdmiDeviceInfo$Builder v24 = v23.setVendorId(0); StringBuilder v25 = new StringBuilder(); StringBuilder v27 = v25.append(""HDMI""); StringBuilder v28 = v27.append(v17); String v29 = v28.toString(); HdmiDeviceInfo$Builder v30 = v24.setDisplayName(v29); HdmiDeviceInfo v31 = v30.build();",0.624690592288971
requestBaseStateOverride(Landroid/os/IBinder;II)V,requestState(Landroid/os/IBinder;II)V,"Optional v7 = DeviceStateManagerService.getStateLocked(p2); boolean v8 = v7.isPresent(); Object v9 = this.mProcessRecords.get(p4); boolean v10 = this.mOverrideRequestController.hasRequest(p5, 1); OverrideRequest v11 = new OverrideRequest(p5, p4, p2, p3, 1); this.mOverrideRequestController.addBaseStateRequest(v11);","if (p1 == 0) { Object v12 = this.mProcessRecords.get(p4); boolean v13 = this.mOverrideRequestController.hasRequest(p5, 0); Optional v14 = DeviceStateManagerService.getStateLocked(p2); OverrideRequest v16 = new OverrideRequest(p5,p4,p2,p3,0); this.mOverrideRequestController.addRequest(v16);",0.8763479590415955
requestBaseStateOverride(Landroid/os/IBinder;II)V,cancelStateRequest()V,"Optional v7 = DeviceStateManagerService.getStateLocked(p2); boolean v8 = v7.isPresent(); Object v9 = this.mProcessRecords.get(p4); boolean v10 = this.mOverrideRequestController.hasRequest(p5, 1); OverrideRequest v11 = new OverrideRequest(p5, p4, p2, p3, 1); this.mOverrideRequestController.addBaseStateRequest(v11);",Object v11 = this.mProcessRecords.get(p2); DeviceStateManagerService$$ExternalSyntheticLambda3 v13 = new DeviceStateManagerService$$ExternalSyntheticLambda3(this.mOverrideRequestController); this.mActiveOverride.ifPresent(v13);,0.7262283563613892
cancelBaseStateOverride()V,registerCallback(Landroid/hardware/devicestate/IDeviceStateManagerCallback;)V,Object v7 = this.mProcessRecords.get(p2); if (v7 == 0) { DeviceStateManagerService.setBaseState(DeviceStateManagerService$DeviceStateProviderListener.mCurrentBaseState);,"DeviceStateManagerService$ProcessRecord v6 = new DeviceStateManagerService$ProcessRecord(p3,p2,v7,this.mHandler); this.mProcessRecords.put(p2, v6);",0.812744677066803
cancelBaseStateOverride()V,requestBaseStateOverride(Landroid/os/IBinder;II)V,Object v7 = this.mProcessRecords.get(p2); if (v7 == 0) { DeviceStateManagerService.setBaseState(DeviceStateManagerService$DeviceStateProviderListener.mCurrentBaseState);,"Optional v7 = DeviceStateManagerService.getStateLocked(p2); boolean v8 = v7.isPresent(); Object v9 = this.mProcessRecords.get(p4); boolean v10 = this.mOverrideRequestController.hasRequest(p5, 1); OverrideRequest v11 = new OverrideRequest(p5, p4, p2, p3, 1); this.mOverrideRequestController.addBaseStateRequest(v11);",0.691165030002594
cancelStateRequest()V,requestState(Landroid/os/IBinder;II)V,Object v11 = this.mProcessRecords.get(p2); DeviceStateManagerService$$ExternalSyntheticLambda3 v13 = new DeviceStateManagerService$$ExternalSyntheticLambda3(this.mOverrideRequestController); this.mActiveOverride.ifPresent(v13);,"if (p1 == 0) { Object v12 = this.mProcessRecords.get(p4); boolean v13 = this.mOverrideRequestController.hasRequest(p5, 0); Optional v14 = DeviceStateManagerService.getStateLocked(p2); OverrideRequest v16 = new OverrideRequest(p5,p4,p2,p3,0); this.mOverrideRequestController.addRequest(v16);",0.7636900544166565
cancelStateRequest()V,requestBaseStateOverride(Landroid/os/IBinder;II)V,Object v11 = this.mProcessRecords.get(p2); DeviceStateManagerService$$ExternalSyntheticLambda3 v13 = new DeviceStateManagerService$$ExternalSyntheticLambda3(this.mOverrideRequestController); this.mActiveOverride.ifPresent(v13);,"Optional v7 = DeviceStateManagerService.getStateLocked(p2); boolean v8 = v7.isPresent(); Object v9 = this.mProcessRecords.get(p4); boolean v10 = this.mOverrideRequestController.hasRequest(p5, 1); OverrideRequest v11 = new OverrideRequest(p5, p4, p2, p3, 1); this.mOverrideRequestController.addBaseStateRequest(v11);",0.7262283563613892
registerCallback(Landroid/hardware/devicestate/IDeviceStateManagerCallback;)V,cancelBaseStateOverride()V,"DeviceStateManagerService$ProcessRecord v6 = new DeviceStateManagerService$ProcessRecord(p3,p2,v7,this.mHandler); this.mProcessRecords.put(p2, v6);",Object v7 = this.mProcessRecords.get(p2); if (v7 == 0) { DeviceStateManagerService.setBaseState(DeviceStateManagerService$DeviceStateProviderListener.mCurrentBaseState);,0.812744677066803
registerCallback(Landroid/hardware/devicestate/IDeviceStateManagerCallback;)V,addHdmiMhlVendorCommandListener(Landroid/hardware/hdmi/IHdmiMhlVendorCommandListener;)V,"DeviceStateManagerService$ProcessRecord v6 = new DeviceStateManagerService$ProcessRecord(p3,p2,v7,this.mHandler); this.mProcessRecords.put(p2, v6);","HdmiControlService$HdmiMhlVendorCommandListenerRecord v7 = new HdmiControlService$HdmiMhlVendorCommandListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mMhlVendorCommandListenerRecords.add(v7);",0.7077206373214722
requestState(Landroid/os/IBinder;II)V,requestBaseStateOverride(Landroid/os/IBinder;II)V,"if (p1 == 0) { Object v12 = this.mProcessRecords.get(p4); boolean v13 = this.mOverrideRequestController.hasRequest(p5, 0); Optional v14 = DeviceStateManagerService.getStateLocked(p2); OverrideRequest v16 = new OverrideRequest(p5,p4,p2,p3,0); this.mOverrideRequestController.addRequest(v16);","Optional v7 = DeviceStateManagerService.getStateLocked(p2); boolean v8 = v7.isPresent(); Object v9 = this.mProcessRecords.get(p4); boolean v10 = this.mOverrideRequestController.hasRequest(p5, 1); OverrideRequest v11 = new OverrideRequest(p5, p4, p2, p3, 1); this.mOverrideRequestController.addBaseStateRequest(v11);",0.8763479590415955
requestState(Landroid/os/IBinder;II)V,cancelStateRequest()V,"if (p1 == 0) { Object v12 = this.mProcessRecords.get(p4); boolean v13 = this.mOverrideRequestController.hasRequest(p5, 0); Optional v14 = DeviceStateManagerService.getStateLocked(p2); OverrideRequest v16 = new OverrideRequest(p5,p4,p2,p3,0); this.mOverrideRequestController.addRequest(v16);",Object v11 = this.mProcessRecords.get(p2); DeviceStateManagerService$$ExternalSyntheticLambda3 v13 = new DeviceStateManagerService$$ExternalSyntheticLambda3(this.mOverrideRequestController); this.mActiveOverride.ifPresent(v13);,0.7636900544166565
getDisplayInfo(I)Landroid/view/DisplayInfo;,getSystemPreferredDisplayMode(I)Landroid/view/Display$Mode;,"LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2); DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides(); DisplayInfo v7 = v5.getDisplayInfoLocked(); DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3); boolean v9 = v8.hasAccess(p3); if (v10 == 0) {     DisplayInfo v4 = v8;     DisplayInfo v3 = v4;     return v3;",LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); Display$Mode v5 = v3.getSystemPreferredDisplayModeLocked(); Display$Mode v2 = v5; return v2;,0.8737112879753113
getDisplayInfo(I)Landroid/view/DisplayInfo;,getUserPreferredDisplayMode(I)Landroid/view/Display$Mode;,"LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2); DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides(); DisplayInfo v7 = v5.getDisplayInfoLocked(); DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3); boolean v9 = v8.hasAccess(p3); if (v10 == 0) {     DisplayInfo v4 = v8;     DisplayInfo v3 = v4;     return v3;",LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); Display$Mode v5 = v3.getUserPreferredDisplayModeLocked(); Display$Mode v2 = v5; return v2;,0.8691758513450623
isMinimalPostProcessingRequested(I)Z,shouldAlwaysRespectAppRequestedMode()Z,boolean v5 = this.mRequestedMinimalPostProcessing; return v5;,boolean v5 = this.mAlwaysRespectAppRequest; boolean v4 = v5; return v4;,0.6963605284690857
isMinimalPostProcessingRequested(I)Z,isTracing()Z,boolean v5 = this.mRequestedMinimalPostProcessing; return v5;,return this.mTracingEnabled;,0.5840650200843811
pauseWifiDisplay()V,resumeWifiDisplay()V,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestPauseLocked();,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestResumeLocked();,0.897769033908844
pauseWifiDisplay()V,forgetWifiDisplay(Ljava/lang/String;)V,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestPauseLocked();,this.mWifiDisplayAdapter.requestForgetLocked(p1);,0.7718464136123657
getUserDisabledHdrTypes()[I,areUserDisabledHdrTypesAllowed()Z,[I v1 = this.mUserDisabledHdrTypes; return v1;,boolean v2 = this.mAreUserDisabledHdrTypesAllowed; return v2;,0.87247633934021
getUserDisabledHdrTypes()[I,setAreUserDisabledHdrTypesAllowed(Z)V,[I v1 = this.mUserDisabledHdrTypes; return v1;,"if (this.mAreUserDisabledHdrTypesAllowed != p2) { this.mAreUserDisabledHdrTypesAllowed = p2; boolean v7 = Settings$Global.putInt(v6, ""are_user_disabled_hdr_formats_allowed"", );",0.732030987739563
getWifiDisplayStatus()Landroid/hardware/display/WifiDisplayStatus;,pauseWifiDisplay()V,WifiDisplayStatus v4 = this.mWifiDisplayAdapter.getWifiDisplayStatusLocked(); WifiDisplayStatus v3 = v4; WifiDisplayStatus v2 = v3; return v2;,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestPauseLocked();,0.7488903999328613
getWifiDisplayStatus()Landroid/hardware/display/WifiDisplayStatus;,stopWifiDisplayScan()V,WifiDisplayStatus v4 = this.mWifiDisplayAdapter.getWifiDisplayStatusLocked(); WifiDisplayStatus v3 = v4; WifiDisplayStatus v2 = v3; return v2;,Object v7 = this.mCallbacks.get(p2); DisplayManagerService.stopWifiDisplayScanLocked(v7);,0.7099830508232117
getSystemPreferredDisplayMode(I)Landroid/view/Display$Mode;,getUserPreferredDisplayMode(I)Landroid/view/Display$Mode;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); DisplayDevice v5 = v4.getPrimaryDisplayDeviceLocked(); Display$Mode v6 = v3.getSystemPreferredDisplayModeLocked(); Display$Mode v2 = v6; return v2;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); DisplayDevice v5 = v4.getPrimaryDisplayDeviceLocked(); Display$Mode v6 = v3.getUserPreferredDisplayModeLocked(); Display$Mode v2 = v6; return v2;,0.9964209198951721
getSystemPreferredDisplayMode(I)Landroid/view/Display$Mode;,getUserPreferredDisplayMode(I)Landroid/view/Display$Mode;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); Display$Mode v5 = v3.getSystemPreferredDisplayModeLocked(); Display$Mode v2 = v5; return v2;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); Display$Mode v5 = v3.getUserPreferredDisplayModeLocked(); Display$Mode v2 = v5; return v2;,0.9890502691268921
createVirtualDisplay(Landroid/hardware/display/VirtualDisplayConfig;Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;Ljava/lang/String;)I,resizeVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;III)V,"int v2 = this.this$0.createVirtualDisplayInternal(p1, p2, p3, 0, 0, p4); int v1 = v2; return v1;","this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(p2, p3, p4, p5);",0.732944905757904
createVirtualDisplay(Landroid/hardware/display/VirtualDisplayConfig;Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;Ljava/lang/String;)I,setVirtualDisplaySurface(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/view/Surface;)V,"int v2 = this.this$0.createVirtualDisplayInternal(p1, p2, p3, 0, 0, p4); int v1 = v2; return v1;","this.mVirtualDisplayAdapter.setVirtualDisplaySurfaceLocked(p2, p3); IBinder v2 = p1.asBinder();",0.7135237455368042
requestColorMode(II)V,uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z,int v7 = v6.getRequestedColorModeLocked(); v6.setRequestedColorModeLocked(p3);,int v40 = v22.getPercentageUncrypted(); p2.onProgress(v40);,0.7499505281448364
requestColorMode(II)V,setTemporaryBrightness(IF)V,int v7 = v6.getRequestedColorModeLocked(); v6.setRequestedColorModeLocked(p3);,"int v8 = Float.floatToIntBits(p2); Message v9 = this.mHandler.obtainMessage(6, v8, 0); v9.sendToTarget();",0.7096865177154541
getMinimumBrightnessCurve()Landroid/hardware/display/Curve;,getBrightness(I)F,Curve v2 = this.mMinimumBrightnessCurve; return v2;,"float v8 = this.mBrightness; boolean v9 = Float.isNaN(v8); float v11 = MathUtils.constrain(v8, 0, 1065353216); float v10 = v11; float v7 = v10; return v7;",0.7480529546737671
getMinimumBrightnessCurve()Landroid/hardware/display/Curve;,getDefaultBrightnessConfiguration()Landroid/hardware/display/BrightnessConfiguration;,Curve v2 = this.mMinimumBrightnessCurve; return v2;,BrightnessConfiguration v9 = this.mInteractiveModeBrightnessMapper.getDefaultConfig(); BrightnessConfiguration v8 = v9; BrightnessConfiguration v7 = v8; return v7;,0.5860577821731567
releaseVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;)V,setVirtualDisplayState(Landroid/hardware/display/IVirtualDisplayCallback;Z)V,DisplayDevice v5 = this.mVirtualDisplayAdapter.releaseVirtualDisplayLocked(p2);,"if (this.mVirtualDisplayAdapter != 0) { this.mVirtualDisplayAdapter.setVirtualDisplayStateLocked(p2, p3);",0.8648682236671448
releaseVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;)V,resizeVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;III)V,DisplayDevice v5 = this.mVirtualDisplayAdapter.releaseVirtualDisplayLocked(p2);,"this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(p2, p3, p4, p5);",0.814288318157196
resumeWifiDisplay()V,pauseWifiDisplay()V,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestResumeLocked();,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestPauseLocked();,0.897769033908844
resumeWifiDisplay()V,forgetWifiDisplay(Ljava/lang/String;)V,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestResumeLocked();,this.mWifiDisplayAdapter.requestForgetLocked(p1);,0.7464790940284729
getBrightness(I)F,getMinimumBrightnessCurve()Landroid/hardware/display/Curve;,"float v8 = this.mBrightness; boolean v9 = Float.isNaN(v8); float v11 = MathUtils.constrain(v8, 0, 1065353216); float v10 = v11; float v7 = v10; return v7;",Curve v2 = this.mMinimumBrightnessCurve; return v2;,0.7480529546737671
getBrightness(I)F,getBrightnessInfo(I)Landroid/hardware/display/BrightnessInfo;,"float v8 = this.mBrightness; boolean v9 = Float.isNaN(v8); float v11 = MathUtils.constrain(v8, 0, 1065353216); float v10 = v11; float v7 = v10; return v7;","BrightnessInfo v8 = new BrightnessInfo(MutableFloat.value,MutableFloat.value,MutableFloat.value,MutableFloat.value,MutableInt.value,MutableFloat.value,MutableFloat.value); BrightnessInfo v7 = v8; return v7;",0.7394512295722961
resizeVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;III)V,setVirtualDisplayState(Landroid/hardware/display/IVirtualDisplayCallback;Z)V,"this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(p2, p3, p4, p5);","if (this.mVirtualDisplayAdapter != 0) { this.mVirtualDisplayAdapter.setVirtualDisplayStateLocked(p2, p3);",0.8353826403617859
resizeVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;III)V,releaseVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;)V,"this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(p2, p3, p4, p5);",DisplayDevice v5 = this.mVirtualDisplayAdapter.releaseVirtualDisplayLocked(p2);,0.814288318157196
connectWifiDisplay(Ljava/lang/String;)V,disconnectWifiDisplay()V,this.mWifiDisplayAdapter.requestConnectLocked(p1);,this.mWifiDisplayAdapter.requestDisconnectLocked();,0.7874729037284851
connectWifiDisplay(Ljava/lang/String;)V,forgetWifiDisplay(Ljava/lang/String;)V,this.mWifiDisplayAdapter.requestConnectLocked(p1);,this.mWifiDisplayAdapter.requestForgetLocked(p1);,0.7682276368141174
setTemporaryBrightness(IF)V,setTemporaryAutoBrightnessAdjustment(F)V,"int v8 = Float.floatToIntBits(p2); Message v9 = this.mHandler.obtainMessage(6, v8, 0); v9.sendToTarget();","int v8 = Float.floatToIntBits(p1); Message v9 = this.mHandler.obtainMessage(7, v8, 0); v9.sendToTarget();",0.9914495348930359
setTemporaryBrightness(IF)V,reportSuccessfulBiometricUnlock(ZI)V,"int v8 = Float.floatToIntBits(p2); Message v9 = this.mHandler.obtainMessage(6, v8, 0); v9.sendToTarget();","Message v3 = this.mHandler.obtainMessage(8, p2, 0); v3.sendToTarget();",0.8572558164596558
disconnectWifiDisplay()V,connectWifiDisplay(Ljava/lang/String;)V,this.mWifiDisplayAdapter.requestDisconnectLocked();,this.mWifiDisplayAdapter.requestConnectLocked(p1);,0.7874729037284851
disconnectWifiDisplay()V,forgetWifiDisplay(Ljava/lang/String;)V,this.mWifiDisplayAdapter.requestDisconnectLocked();,this.mWifiDisplayAdapter.requestForgetLocked(p1);,0.7790471315383911
getStableDisplaySize()Landroid/graphics/Point;,getStagedApexModuleNames()[Ljava/lang/String;,"Point v4 = new Point(); v4.set(Point.x, Point.y); return v2;",List v2 = v3; String v6 = new String(0); Object v7 = v2.toArray(v6); return v7;,0.6921213865280151
getStableDisplaySize()Landroid/graphics/Point;,getRestrictBackgroundStatus(I)I,"Point v4 = new Point(); v4.set(Point.x, Point.y); return v2;",int v2 = 3; return v2;,0.675500214099884
registerCallbackWithEventMask(Landroid/hardware/display/IDisplayManagerCallback;J)V,registerContentCaptureOptionsCallback(Ljava/lang/String;Landroid/view/contentcapture/IContentCaptureOptionsCallback;)V,"Object v6 = this.mCallbacks.get(p3); DisplayManagerService$CallbackRecord v7 = new DisplayManagerService$CallbackRecord(DisplayManagerService,p3,p4,p2,p5); this.mCallbacks.put(p3, v7);","RemoteCallbackList v12 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0); boolean v13 = v12.register(p2, p1);",0.7079261541366577
registerCallbackWithEventMask(Landroid/hardware/display/IDisplayManagerCallback;J)V,addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,"Object v6 = this.mCallbacks.get(p3); DisplayManagerService$CallbackRecord v7 = new DisplayManagerService$CallbackRecord(DisplayManagerService,p3,p4,p2,p5); this.mCallbacks.put(p3, v7);","RemoteCallbackList v5 = new RemoteCallbackList(); Object v7 = this.mHdmiCecSettingChangeListenerRecords.put(p2, v5); this.mHdmiCecConfig.registerChangeListener(p2, this.mSettingChangeListener); Object v9 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v10 = v9.register(p2);",0.6793206334114075
setTemporaryAutoBrightnessAdjustment(F)V,setTemporaryBrightness(IF)V,"int v8 = Float.floatToIntBits(p1); Message v9 = this.mHandler.obtainMessage(7, v8, 0); v9.sendToTarget();","int v8 = Float.floatToIntBits(p2); Message v9 = this.mHandler.obtainMessage(6, v8, 0); v9.sendToTarget();",0.9914495348930359
setTemporaryAutoBrightnessAdjustment(F)V,reportSuccessfulBiometricUnlock(ZI)V,"int v8 = Float.floatToIntBits(p1); Message v9 = this.mHandler.obtainMessage(7, v8, 0); v9.sendToTarget();","Message v3 = this.mHandler.obtainMessage(8, p2, 0); v3.sendToTarget();",0.846314013004303
forgetWifiDisplay(Ljava/lang/String;)V,disconnectWifiDisplay()V,this.mWifiDisplayAdapter.requestForgetLocked(p1);,this.mWifiDisplayAdapter.requestDisconnectLocked();,0.7790471315383911
forgetWifiDisplay(Ljava/lang/String;)V,pauseWifiDisplay()V,this.mWifiDisplayAdapter.requestForgetLocked(p1);,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestPauseLocked();,0.7718464136123657
setVirtualDisplaySurface(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/view/Surface;)V,setVirtualDisplayState(Landroid/hardware/display/IVirtualDisplayCallback;Z)V,"this.mVirtualDisplayAdapter.setVirtualDisplaySurfaceLocked(p2, p3); IBinder v2 = p1.asBinder();","if (this.mVirtualDisplayAdapter != 0) { this.mVirtualDisplayAdapter.setVirtualDisplayStateLocked(p2, p3);",0.812437117099762
setVirtualDisplaySurface(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/view/Surface;)V,resizeVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;III)V,"this.mVirtualDisplayAdapter.setVirtualDisplaySurfaceLocked(p2, p3); IBinder v2 = p1.asBinder();","this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(p2, p3, p4, p5);",0.8039339780807495
getPreferredWideGamutColorSpaceId()I,requestColorMode(II)V,int v3 = this.mWideColorSpace.getId(); int v2 = v3; return v2;,int v7 = v6.getRequestedColorModeLocked(); v6.setRequestedColorModeLocked(p3);,0.6411534547805786
getPreferredWideGamutColorSpaceId()I,getRefreshRateSwitchingType()I,int v3 = this.mWideColorSpace.getId(); int v2 = v3; return v2;,int v3 = this.mModeSwitchingType; int v2 = v3; return v2;,0.6264829635620117
registerCallback(Landroid/hardware/display/IDisplayManagerCallback;)V,registerContentCaptureOptionsCallback(Ljava/lang/String;Landroid/view/contentcapture/IContentCaptureOptionsCallback;)V,"this.this$0.registerCallbackInternal(p1, v2, v3, p2);","RemoteCallbackList v12 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0); boolean v13 = v12.register(p2, p1);",0.7105394005775452
registerCallback(Landroid/hardware/display/IDisplayManagerCallback;)V,registerListener(Landroid/net/INetworkPolicyListener;)V,"this.this$0.registerCallbackInternal(p1, v2, v3, p2);",boolean v4 = this.mListeners.register(p1);,0.6227923035621643
renameWifiDisplay(Ljava/lang/String;Ljava/lang/String;)V,forgetWifiDisplay(Ljava/lang/String;)V,"this.mWifiDisplayAdapter.requestRenameLocked(p2, p1);",this.mWifiDisplayAdapter.requestForgetLocked(p1);,0.7167024612426758
renameWifiDisplay(Ljava/lang/String;Ljava/lang/String;)V,connectWifiDisplay(Ljava/lang/String;)V,"this.mWifiDisplayAdapter.requestRenameLocked(p2, p1);",this.mWifiDisplayAdapter.requestConnectLocked(p1);,0.6900551319122314
startWifiDisplayScan()V,stopWifiDisplayScan()V,Object v7 = this.mCallbacks.get(p2); if (v7 == 0) { DisplayManagerService.startWifiDisplayScanLocked(v7);,Object v7 = this.mCallbacks.get(p2); DisplayManagerService.stopWifiDisplayScanLocked(v7);,0.9560672044754028
startWifiDisplayScan()V,pauseWifiDisplay()V,Object v7 = this.mCallbacks.get(p2); if (v7 == 0) { DisplayManagerService.startWifiDisplayScanLocked(v7);,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestPauseLocked();,0.7281269431114197
getBrightnessConfigurationForUser(I)Landroid/hardware/display/BrightnessConfiguration;,getBrightnessConfigurationForDisplay(Ljava/lang/String;I)Landroid/hardware/display/BrightnessConfiguration;,"BrightnessConfiguration v19 = this.this$0.getBrightnessConfigForDisplayWithPdsFallbackLocked(p1, v16); if (v18 == 0) { if (this.mAutomaticBrightnessController != 0) { BrightnessConfiguration v23 = this.mAutomaticBrightnessController.getDefaultConfig();","BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3); if (v14 != 0) { BrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);",0.8237547278404236
getBrightnessConfigurationForUser(I)Landroid/hardware/display/BrightnessConfiguration;,setBrightnessConfigurationForDisplay(Landroid/hardware/display/BrightnessConfiguration;Ljava/lang/String;ILjava/lang/String;)V,"BrightnessConfiguration v19 = this.this$0.getBrightnessConfigForDisplayWithPdsFallbackLocked(p1, v16); if (v18 == 0) { if (this.mAutomaticBrightnessController != 0) { BrightnessConfiguration v23 = this.mAutomaticBrightnessController.getDefaultConfig();","boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5); this.mPersistentDataStore.saveIfNeeded();",0.7954863905906677
getRefreshRateSwitchingType()I,notifyGraphicsEnvironmentSetup(Ljava/lang/String;I)V,int v3 = this.mModeSwitchingType; int v2 = v3; return v2;,"int v38 = GameManagerService.getGameModeFromSettings(p1, v34); Object v39 = this.mConfigs.get(p1); Integer v41 = Integer.valueOf(v31); Object v42 = this.mModeConfigs.get(v41);",0.728627622127533
getRefreshRateSwitchingType()I,requestColorMode(II)V,int v3 = this.mModeSwitchingType; int v2 = v3; return v2;,int v7 = v6.getRequestedColorModeLocked(); v6.setRequestedColorModeLocked(p3);,0.6876533031463623
setRefreshRateSwitchingType(I)V,No similar EPs with similarity > 0.8,,,
setShouldAlwaysRespectAppRequestedMode(Z)V,shouldAlwaysRespectAppRequestedMode()Z,if (this.mAlwaysRespectAppRequest == p1) { this.mAlwaysRespectAppRequest = p1; DisplayModeDirector.notifyDesiredDisplayModeSpecsChangedLocked();,boolean v5 = this.mAlwaysRespectAppRequest; boolean v4 = v5; return v4;,0.6540003418922424
setShouldAlwaysRespectAppRequestedMode(Z)V,resumeWifiDisplay()V,if (this.mAlwaysRespectAppRequest == p1) { this.mAlwaysRespectAppRequest = p1; DisplayModeDirector.notifyDesiredDisplayModeSpecsChangedLocked();,if (this.mWifiDisplayAdapter == 0) { this.mWifiDisplayAdapter.requestResumeLocked();,0.6512081623077393
stopWifiDisplayScan()V,startWifiDisplayScan()V,Object v7 = this.mCallbacks.get(p2); DisplayManagerService.stopWifiDisplayScanLocked(v7);,Object v7 = this.mCallbacks.get(p2); if (v7 == 0) { DisplayManagerService.startWifiDisplayScanLocked(v7);,0.9560672044754028
stopWifiDisplayScan()V,disconnectWifiDisplay()V,Object v7 = this.mCallbacks.get(p2); DisplayManagerService.stopWifiDisplayScanLocked(v7);,this.mWifiDisplayAdapter.requestDisconnectLocked();,0.7346751689910889
isUidPresentOnDisplay(II)Z,getRestrictBackgroundStatus(I)I,boolean v3 = ; boolean v2 = v3; return v2;,int v2 = 3; return v2;,0.7805536985397339
isUidPresentOnDisplay(II)Z,getNamesForUids([I)[Ljava/lang/String;,boolean v3 = ; boolean v2 = v3; return v2;,int v5 = v3.getVersion(); if (v5 != v4) { ... } Computer v10 = v14; this.sSnapshot.set(v10); return v20;,0.6747708916664124
setUserDisabledHdrTypes([I)V,setAreUserDisabledHdrTypesAllowed(Z)V,"DisplayManagerService$$ExternalSyntheticLambda5 v11 = new DisplayManagerService$$ExternalSyntheticLambda5(DisplayManagerService,p2); this.mLogicalDisplayMapper.forEachLocked(v11);","DisplayManagerService$$ExternalSyntheticLambda3 v9 = new DisplayManagerService$$ExternalSyntheticLambda3(DisplayManagerService,); this.mLogicalDisplayMapper.forEachLocked(v9);",0.9810978174209595
setUserDisabledHdrTypes([I)V,setAreUserDisabledHdrTypesAllowed(Z)V,"boolean v6 = DisplayManagerService.isSubsetOf(Display$HdrCapabilities.HDR_TYPES, p2); Arrays.sort(p2); this.mUserDisabledHdrTypes = p2; ContentResolver v9 = this.mContext.getContentResolver(); boolean v10 = Settings$Global.putString(v9, ""user_disabled_hdr_formats"", );","if (this.mAreUserDisabledHdrTypesAllowed != p2) { this.mAreUserDisabledHdrTypesAllowed = p2; boolean v7 = Settings$Global.putInt(v6, ""are_user_disabled_hdr_formats_allowed"", );",0.8673056364059448
areUserDisabledHdrTypesAllowed()Z,getUserDisabledHdrTypes()[I,boolean v2 = this.mAreUserDisabledHdrTypesAllowed; return v2;,[I v1 = this.mUserDisabledHdrTypes; return v1;,0.87247633934021
areUserDisabledHdrTypesAllowed()Z,setAreUserDisabledHdrTypesAllowed(Z)V,boolean v2 = this.mAreUserDisabledHdrTypesAllowed; return v2;,"if (this.mAreUserDisabledHdrTypesAllowed != p2) { this.mAreUserDisabledHdrTypesAllowed = p2; boolean v7 = Settings$Global.putInt(v6, ""are_user_disabled_hdr_formats_allowed"", );",0.8581590056419373
getDefaultBrightnessConfiguration()Landroid/hardware/display/BrightnessConfiguration;,getBrightnessConfigurationForUser(I)Landroid/hardware/display/BrightnessConfiguration;,BrightnessConfiguration v9 = this.mInteractiveModeBrightnessMapper.getDefaultConfig(); BrightnessConfiguration v8 = v9; BrightnessConfiguration v7 = v8; return v7;,"BrightnessConfiguration v19 = this.this$0.getBrightnessConfigForDisplayWithPdsFallbackLocked(p1, v16); if (v18 == 0) { if (this.mAutomaticBrightnessController != 0) { BrightnessConfiguration v23 = this.mAutomaticBrightnessController.getDefaultConfig();",0.7832662463188171
getDefaultBrightnessConfiguration()Landroid/hardware/display/BrightnessConfiguration;,getBrightnessConfigurationForDisplay(Ljava/lang/String;I)Landroid/hardware/display/BrightnessConfiguration;,BrightnessConfiguration v9 = this.mInteractiveModeBrightnessMapper.getDefaultConfig(); BrightnessConfiguration v8 = v9; BrightnessConfiguration v7 = v8; return v7;,"BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3); if (v14 != 0) { BrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);",0.6783510446548462
setVirtualDisplayState(Landroid/hardware/display/IVirtualDisplayCallback;Z)V,releaseVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;)V,"if (this.mVirtualDisplayAdapter != 0) { this.mVirtualDisplayAdapter.setVirtualDisplayStateLocked(p2, p3);",DisplayDevice v5 = this.mVirtualDisplayAdapter.releaseVirtualDisplayLocked(p2);,0.8648682236671448
setVirtualDisplayState(Landroid/hardware/display/IVirtualDisplayCallback;Z)V,resizeVirtualDisplay(Landroid/hardware/display/IVirtualDisplayCallback;III)V,"if (this.mVirtualDisplayAdapter != 0) { this.mVirtualDisplayAdapter.setVirtualDisplayStateLocked(p2, p3);","this.mVirtualDisplayAdapter.resizeVirtualDisplayLocked(p2, p3, p4, p5);",0.8353826403617859
setBrightnessConfigurationForDisplay(Landroid/hardware/display/BrightnessConfiguration;Ljava/lang/String;ILjava/lang/String;)V,getBrightnessConfigurationForDisplay(Ljava/lang/String;I)Landroid/hardware/display/BrightnessConfiguration;,"boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5); this.mPersistentDataStore.saveIfNeeded();","BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3); if (v14 != 0) { BrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);",0.9060478210449219
setBrightnessConfigurationForDisplay(Landroid/hardware/display/BrightnessConfiguration;Ljava/lang/String;ILjava/lang/String;)V,setBrightness(IF)V,"boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5); this.mPersistentDataStore.saveIfNeeded();","boolean v14 = this.mPersistentDataStore.setBrightness(v13, p1); this.mBrightness = p1; int v15 = Float.floatToIntBits(p1); Message v16 = this.mHandler.obtainMessage(1, v15, 0); boolean v17 = this.mHandler.sendMessage(v16);",0.7996939420700073
getDisplayIds()[I,getDisableFlags(Landroid/os/IBinder;I)[I,[I v7 = new [I(v6); return v5;,"Pair v5 = new Pair(v6,); Integer v6 = Integer.valueOf(); Pair v3 = v5; [I v8 = new [I(2); return v8;",0.7120689749717712
getDisplayIds()[I,isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z,[I v7 = new [I(v6); return v5;,[Z v23 = new [Z(p1.length); return v23;,0.6042832136154175
getAmbientBrightnessStats()Landroid/content/pm/ParceledListSlice;,getAllPendingJobs()Landroid/content/pm/ParceledListSlice;,ParceledListSlice v12 = ParceledListSlice.emptyList(); return v9;,ParceledListSlice v3 = new ParceledListSlice(v4); return v3;,0.9391226768493652
getAmbientBrightnessStats()Landroid/content/pm/ParceledListSlice;,getAllPermissionGroups(I)Landroid/content/pm/ParceledListSlice;,ParceledListSlice v12 = ParceledListSlice.emptyList(); return v9;,ParceledListSlice v1 = new ParceledListSlice(v2); return v1;,0.9338488578796387
setBrightness(IF)V,setBrightnessConfigurationForDisplay(Landroid/hardware/display/BrightnessConfiguration;Ljava/lang/String;ILjava/lang/String;)V,"boolean v14 = this.mPersistentDataStore.setBrightness(v13, p1); this.mBrightness = p1; int v15 = Float.floatToIntBits(p1); Message v16 = this.mHandler.obtainMessage(1, v15, 0); boolean v17 = this.mHandler.sendMessage(v16);","boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5); this.mPersistentDataStore.saveIfNeeded();",0.7996939420700073
setBrightness(IF)V,getBrightnessConfigurationForDisplay(Ljava/lang/String;I)Landroid/hardware/display/BrightnessConfiguration;,"boolean v14 = this.mPersistentDataStore.setBrightness(v13, p1); this.mBrightness = p1; int v15 = Float.floatToIntBits(p1); Message v16 = this.mHandler.obtainMessage(1, v15, 0); boolean v17 = this.mHandler.sendMessage(v16);","BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3); if (v14 != 0) { BrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);",0.7673203349113464
getBrightnessInfo(I)Landroid/hardware/display/BrightnessInfo;,getBrightness(I)F,"BrightnessInfo v8 = new BrightnessInfo(MutableFloat.value,MutableFloat.value,MutableFloat.value,MutableFloat.value,MutableInt.value,MutableFloat.value,MutableFloat.value); BrightnessInfo v7 = v8; return v7;","float v8 = this.mBrightness; boolean v9 = Float.isNaN(v8); float v11 = MathUtils.constrain(v8, 0, 1065353216); float v10 = v11; float v7 = v10; return v7;",0.7394512295722961
getBrightnessInfo(I)Landroid/hardware/display/BrightnessInfo;,setBrightness(IF)V,"BrightnessInfo v8 = new BrightnessInfo(MutableFloat.value,MutableFloat.value,MutableFloat.value,MutableFloat.value,MutableInt.value,MutableFloat.value,MutableFloat.value); BrightnessInfo v7 = v8; return v7;","boolean v14 = this.mPersistentDataStore.setBrightness(v13, p1); this.mBrightness = p1; int v15 = Float.floatToIntBits(p1); Message v16 = this.mHandler.obtainMessage(1, v15, 0); boolean v17 = this.mHandler.sendMessage(v16);",0.6275392174720764
getBrightnessConfigurationForDisplay(Ljava/lang/String;I)Landroid/hardware/display/BrightnessConfiguration;,setBrightnessConfigurationForDisplay(Landroid/hardware/display/BrightnessConfiguration;Ljava/lang/String;ILjava/lang/String;)V,"BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3); if (v14 != 0) { BrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);","boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5); this.mPersistentDataStore.saveIfNeeded();",0.9060478210449219
getBrightnessConfigurationForDisplay(Ljava/lang/String;I)Landroid/hardware/display/BrightnessConfiguration;,getBrightnessConfigurationForUser(I)Landroid/hardware/display/BrightnessConfiguration;,"BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3); if (v14 != 0) { BrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);","BrightnessConfiguration v19 = this.this$0.getBrightnessConfigForDisplayWithPdsFallbackLocked(p1, v16); if (v18 == 0) { if (this.mAutomaticBrightnessController != 0) { BrightnessConfiguration v23 = this.mAutomaticBrightnessController.getDefaultConfig();",0.8237547278404236
getUserPreferredDisplayMode(I)Landroid/view/Display$Mode;,getSystemPreferredDisplayMode(I)Landroid/view/Display$Mode;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); DisplayDevice v5 = v4.getPrimaryDisplayDeviceLocked(); Display$Mode v6 = v3.getUserPreferredDisplayModeLocked(); Display$Mode v2 = v6; return v2;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); DisplayDevice v5 = v4.getPrimaryDisplayDeviceLocked(); Display$Mode v6 = v3.getSystemPreferredDisplayModeLocked(); Display$Mode v2 = v6; return v2;,0.9964209198951721
getUserPreferredDisplayMode(I)Landroid/view/Display$Mode;,getSystemPreferredDisplayMode(I)Landroid/view/Display$Mode;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); Display$Mode v5 = v3.getUserPreferredDisplayModeLocked(); Display$Mode v2 = v5; return v2;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); Display$Mode v5 = v3.getSystemPreferredDisplayModeLocked(); Display$Mode v2 = v5; return v2;,0.9890502691268921
getBrightnessEvents(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;,notifyResourceGranted(II)V,"Object v14 = this.mEvents.toArray(); [I v15 = this.mInjector.getProfileIds(this.mUserManager, p1); ArrayList v18 = new ArrayList(v14.length); ParceledListSlice v20 = new ParceledListSlice(v18); return v12;",Object v17 = v16.getSystemService(UserManage.class); List v18 = v17.getEnabledProfiles();,0.6569495797157288
getBrightnessEvents(Ljava/lang/String;)Landroid/content/pm/ParceledListSlice;,startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,"Object v14 = this.mEvents.toArray(); [I v15 = this.mInjector.getProfileIds(this.mUserManager, p1); ArrayList v18 = new ArrayList(v14.length); ParceledListSlice v20 = new ParceledListSlice(v18); return v12;",Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class); boolean v31 = v30.isActiveProfileOwner(p2); boolean v32 = v30.isActiveDeviceOwner(p2);,0.6487743258476257
setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V,getInputMethodWindowVisibleHeight(Lcom/android/internal/view/IInputMethodClient;)I,"DisplayManagerService$BinderService$$ExternalSyntheticLambda0 v9 = new DisplayManagerService$BinderService$$ExternalSyntheticLambda0(p0,p1,p2,p3); v8.forEachLocked(v9);","InputMethodManagerService$$ExternalSyntheticLambda4 v2 = new InputMethodManagerService$$ExternalSyntheticLambda4(p0,v1,p1); Object v4 = Binder.withCleanCallingIdentity(v2); int v5 = v4.intValue(); return v5;",0.8068190217018127
setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V,unregisterSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"DisplayManagerService$BinderService$$ExternalSyntheticLambda0 v9 = new DisplayManagerService$BinderService$$ExternalSyntheticLambda0(p0,p1,p2,p3); v8.forEachLocked(v9);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0(p1,p2); v1.accept(v19);",0.8022795915603638
getDisplayDecorationSupport(I)Landroid/hardware/graphics/common/DisplayDecorationSupport;,setVirtualDisplaySurface(Landroid/hardware/display/IVirtualDisplayCallback;Landroid/view/Surface;)V,IBinder v4 = DisplayManagerService.getDisplayToken(p2); DisplayDecorationSupport v5 = SurfaceControl.getDisplayDecorationSupport(v4); DisplayDecorationSupport v3 = v5; DisplayDecorationSupport v2 = v3; return v2;,"this.mVirtualDisplayAdapter.setVirtualDisplaySurfaceLocked(p2, p3); IBinder v2 = p1.asBinder();",0.7314626574516296
getDisplayDecorationSupport(I)Landroid/hardware/graphics/common/DisplayDecorationSupport;,getSystemPreferredDisplayMode(I)Landroid/view/Display$Mode;,IBinder v4 = DisplayManagerService.getDisplayToken(p2); DisplayDecorationSupport v5 = SurfaceControl.getDisplayDecorationSupport(v4); DisplayDecorationSupport v3 = v5; DisplayDecorationSupport v2 = v3; return v2;,LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1); Display$Mode v5 = v3.getSystemPreferredDisplayModeLocked(); Display$Mode v2 = v5; return v2;,0.5958794355392456
setAreUserDisabledHdrTypesAllowed(Z)V,setUserDisabledHdrTypes([I)V,"DisplayManagerService$$ExternalSyntheticLambda3 v9 = new DisplayManagerService$$ExternalSyntheticLambda3(DisplayManagerService,); this.mLogicalDisplayMapper.forEachLocked(v9);","DisplayManagerService$$ExternalSyntheticLambda5 v11 = new DisplayManagerService$$ExternalSyntheticLambda5(DisplayManagerService,p2); this.mLogicalDisplayMapper.forEachLocked(v11);",0.9810978174209595
setAreUserDisabledHdrTypesAllowed(Z)V,setUserDisabledHdrTypes([I)V,"if (this.mAreUserDisabledHdrTypesAllowed != p2) { this.mAreUserDisabledHdrTypesAllowed = p2; boolean v7 = Settings$Global.putInt(v6, ""are_user_disabled_hdr_formats_allowed"", );","boolean v6 = DisplayManagerService.isSubsetOf(Display$HdrCapabilities.HDR_TYPES, p2); Arrays.sort(p2); this.mUserDisabledHdrTypes = p2; ContentResolver v9 = this.mContext.getContentResolver(); boolean v10 = Settings$Global.putString(v9, ""user_disabled_hdr_formats"", );",0.8673056364059448
shouldAlwaysRespectAppRequestedMode()Z,isMinimalPostProcessingRequested(I)Z,boolean v5 = this.mAlwaysRespectAppRequest; boolean v4 = v5; return v4;,boolean v5 = this.mRequestedMinimalPostProcessing; return v5;,0.6963605284690857
shouldAlwaysRespectAppRequestedMode()Z,getStagedApexInfo(Ljava/lang/String;)Landroid/content/pm/StagedApexInfo;,boolean v5 = this.mAlwaysRespectAppRequest; boolean v4 = v5; return v4;,ApexSessionParams v29 = new ApexSessionParams(); int v31 = v4.sessionId(); ApexSessionParams.sessionId = v31; ApexInfo v39 = this.mApexManager.getStagedApexInfos(v29); Object v42 = v9.get(p1); if (v42 == 0) {     StagedApexInfo v43 = new StagedApexInfo();     StagedApexInfo.moduleName = ApexInfo.moduleName;     StagedApexInfo.diskImagePath = ApexInfo.modulePath;     StagedApexInfo.versionCode = ApexInfo.versionCode;     StagedApexInfo.versionName = ApexInfo.versionName;     StagedApexInfo.hasClassPathJars = ApexInfo.hasClassPathJars;     return v43; },0.682904839515686
getFontConfig()Landroid/text/FontConfig;,updateFontFamily(Ljava/util/List;I)I,"FontConfig v5 = SystemFonts.getSystemFontConfigInternal(""/system/etc/fonts.xml"", ""/system/fonts/"", ""/product/etc/fonts_customization.xml"", ""/product/fonts/"", 0, 0, 0); FontConfig v4 = v5; FontConfig v3 = v4; return v3;",FontConfig v32 = FontManagerService.getSystemFontConfig(); SharedMemory v33 = FontManagerService.serializeFontMap(v32);,0.7665905952453613
getFontConfig()Landroid/text/FontConfig;,updateFontFamily(Ljava/util/List;I)I,"FontConfig v5 = SystemFonts.getSystemFontConfigInternal(""/system/etc/fonts.xml"", ""/system/fonts/"", ""/product/etc/fonts_customization.xml"", ""/product/fonts/"", 0, 0, 0); FontConfig v4 = v5; FontConfig v3 = v4; return v3;",PersistentSystemFontConfig$Config v12 = UpdatableFontDir.readPersistentConfig(); HashMap v13 = new HashMap(); Collection v28 = v13.values(); boolean v29 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v28); UpdatableFontDir.writePersistentConfig(v23);,0.7275027632713318
updateFontFamily(Ljava/util/List;I)I,getFontConfig()Landroid/text/FontConfig;,FontConfig v32 = FontManagerService.getSystemFontConfig(); SharedMemory v33 = FontManagerService.serializeFontMap(v32);,"FontConfig v5 = SystemFonts.getSystemFontConfigInternal(""/system/etc/fonts.xml"", ""/system/fonts/"", ""/product/etc/fonts_customization.xml"", ""/product/fonts/"", 0, 0, 0); FontConfig v4 = v5; FontConfig v3 = v4; return v3;",0.7665905952453613
updateFontFamily(Ljava/util/List;I)I,getFontConfig()Landroid/text/FontConfig;,PersistentSystemFontConfig$Config v12 = UpdatableFontDir.readPersistentConfig(); HashMap v13 = new HashMap(); Collection v28 = v13.values(); boolean v29 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v28); UpdatableFontDir.writePersistentConfig(v23);,"FontConfig v5 = SystemFonts.getSystemFontConfigInternal(""/system/etc/fonts.xml"", ""/system/fonts/"", ""/product/etc/fonts_customization.xml"", ""/product/fonts/"", 0, 0, 0); FontConfig v4 = v5; FontConfig v3 = v4; return v3;",0.7275027632713318
attachAsMiddleman(Landroid/media/permission/Identity;Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/ISoundTriggerSession;,attachAsOriginator(Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/ISoundTriggerSession;,"CompositeSafeCloseable v11 = new CompositeSafeCloseable(v12); SafeCloseable v12 = new SafeCloseable(2); SoundTriggerService$SoundTriggerSessionStub v20 = new SoundTriggerService$SoundTriggerSessionStub(this.this$0,p3); return v20;","SoundTriggerService$SoundTriggerSessionStub v14 = new SoundTriggerService$SoundTriggerSessionStub(this.this$0,p2); return v14;",0.7557412385940552
attachAsMiddleman(Landroid/media/permission/Identity;Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/ISoundTriggerSession;,copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V,"CompositeSafeCloseable v11 = new CompositeSafeCloseable(v12); SafeCloseable v12 = new SafeCloseable(2); SoundTriggerService$SoundTriggerSessionStub v20 = new SoundTriggerService$SoundTriggerSessionStub(this.this$0,p3); return v20;","AccountManagerService$UserAccounts v5 = AccountManagerService.getUserAccountsNotChecked(p3); AccountManagerService$UserAccounts v7 = AccountManagerService.getUserAccountsNotChecked(p4); AccountManagerService$5 v20 = new AccountManagerService$5(p0,v4,p1,Account.type,0,0,Account.name,0,p2,p1,v6,p3);",0.5919277667999268
attachAsOriginator(Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/ISoundTriggerSession;,initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V,int v3 = Binder.getCallingUid(); Identity.uid = v3; int v4 = Binder.getCallingPid(); Identity.pid = v4;,int v23 = UserHandle.getCallingUserId(); int v24 = Binder.getCallingUid();,0.8624586462974548
attachAsOriginator(Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/ISoundTriggerSession;,getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V,int v3 = Binder.getCallingUid(); Identity.uid = v3; int v4 = Binder.getCallingPid(); Identity.pid = v4;,int v19 = Binder.getCallingPid(); StringBuilder v20 = v3.append(v19);,0.8530624508857727
createSearchSession(Landroid/app/search/SearchContext;Landroid/app/search/SearchSessionId;Landroid/os/IBinder;)V,query(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/ISearchCallback;)V,"SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda0 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda0(p1,p2,p3); v1.accept(v17);","SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1(p1,p2,p3); v1.accept(v17);",0.9917318820953369
createSearchSession(Landroid/app/search/SearchContext;Landroid/app/search/SearchSessionId;Landroid/os/IBinder;)V,notifyEvent(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/SearchTargetEvent;)V,"SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda0 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda0(p1,p2,p3); v1.accept(v17);","SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3(p1, p2, p3); v1.accept(v17);",0.9759692549705505
query(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/ISearchCallback;)V,createSearchSession(Landroid/app/search/SearchContext;Landroid/app/search/SearchSessionId;Landroid/os/IBinder;)V,"SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1(p1,p2,p3); v1.accept(v17);","SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda0 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda0(p1,p2,p3); v1.accept(v17);",0.9917318820953369
query(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/ISearchCallback;)V,notifyEvent(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/SearchTargetEvent;)V,"SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1(p1,p2,p3); v1.accept(v17);","SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3(p1, p2, p3); v1.accept(v17);",0.9881028532981873
notifyEvent(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/SearchTargetEvent;)V,query(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/ISearchCallback;)V,"SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3(p1, p2, p3); v1.accept(v17);","SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1(p1,p2,p3); v1.accept(v17);",0.9881028532981873
notifyEvent(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/SearchTargetEvent;)V,createSearchSession(Landroid/app/search/SearchContext;Landroid/app/search/SearchSessionId;Landroid/os/IBinder;)V,"SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3(p1, p2, p3); v1.accept(v17);","SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda0 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda0(p1,p2,p3); v1.accept(v17);",0.9759692549705505
destroySearchSession(Landroid/app/search/SearchSessionId;)V,query(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/ISearchCallback;)V,"SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda2 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda2(p1); int v9 = v4.handleIncomingUser(v6, v7, v8, 0, 0, 0, 0); AbstractPerUserSystemService v18 = this.this$0.getServiceForUserLocked(v9); v1.accept(v17);","SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda1(p1,p2,p3); v1.accept(v17);",0.8156088590621948
destroySearchSession(Landroid/app/search/SearchSessionId;)V,notifyEvent(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/SearchTargetEvent;)V,"SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda2 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda2(p1); int v9 = v4.handleIncomingUser(v6, v7, v8, 0, 0, 0, 0); AbstractPerUserSystemService v18 = this.this$0.getServiceForUserLocked(v9); v1.accept(v17);","SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3 v1 = new SearchUiManagerService$SearchUiManagerStub$$ExternalSyntheticLambda3(p1, p2, p3); v1.accept(v17);",0.811592161655426
getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String;,getCecSettingIntValue(Ljava/lang/String;)I,"Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); String v13 = v12.getStringValue(); int v29 = HdmiCecConfig.getStorage(v8); String v30 = HdmiCecConfig.getStorageKey(v8); String v39 = this.mStorageAdapter.retrieveGlobalSetting(v30, v27); String v28 = v39; String v7 = v28; return v7;","boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; int v31 = HdmiCecConfig.getStorage(v8); String v32 = HdmiCecConfig.getStorageKey(v8); String v41 = this.mStorageAdapter.retrieveSharedPref(v32, v29); String v41 = this.mStorageAdapter.retrieveGlobalSetting(v32, v29);",0.9196377992630005
getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String;,getCecSettingIntValue(Ljava/lang/String;)I,"Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); String v13 = v12.getStringValue(); int v29 = HdmiCecConfig.getStorage(v8); String v30 = HdmiCecConfig.getStorageKey(v8); String v39 = this.mStorageAdapter.retrieveSharedPref(v30, v27); String v7 = v28; return v7;","boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; int v31 = HdmiCecConfig.getStorage(v8); String v32 = HdmiCecConfig.getStorageKey(v8); String v41 = this.mStorageAdapter.retrieveSharedPref(v32, v29); String v41 = this.mStorageAdapter.retrieveGlobalSetting(v32, v29);",0.9126318693161011
getPhysicalAddress()I,startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,int v10 = this.mNativeWrapperImpl.nativeGetPhysicalAddress(); int v8 = v10; int v7 = v8; return v7;,"int v21 = Binder.getCallingUid(); AccountManagerService$14 v29 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);",0.7115090489387512
getPhysicalAddress()I,getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V,int v10 = this.mNativeWrapperImpl.nativeGetPhysicalAddress(); int v8 = v10; int v7 = v8; return v7;,int v19 = Binder.getCallingPid(); StringBuilder v20 = v3.append(v19);,0.7051236629486084
removeCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,"boolean v4 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p2); Object v5 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v6 = v5.unregister(p3); int v8 = v7.getRegisteredCallbackCount(); Object v9 = this.mHdmiCecSettingChangeListenerRecords.remove(p2); this.mHdmiCecConfig.removeChangeListener(p2, this.mSettingChangeListener);",Object v5 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v6 = v5.register(p2);,0.8819841146469116
removeCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,"boolean v4 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p2); Object v5 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v6 = v5.unregister(p3); int v8 = v7.getRegisteredCallbackCount(); Object v9 = this.mHdmiCecSettingChangeListenerRecords.remove(p2); this.mHdmiCecConfig.removeChangeListener(p2, this.mSettingChangeListener);","RemoteCallbackList v5 = new RemoteCallbackList(); Object v7 = this.mHdmiCecSettingChangeListenerRecords.put(p2, v5); this.mHdmiCecConfig.registerChangeListener(p2, this.mSettingChangeListener); Object v9 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v10 = v9.register(p2);",0.8619851469993591
removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,clearNotificationEffects()V,,,1.0000001192092896
removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,addOnPermissionsChangeListener(Landroid/permission/IOnPermissionsChangeListener;)V,,,1.0000001192092896
getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;,canChangeSystemAudioMode()Z,"int v18 = this.mHdmiCecNetwork.physicalAddressToPortId(HdmiCecLocalDevice$ActiveSource.physicalAddress); HdmiDeviceInfo$Builder v20 = new HdmiDeviceInfo$Builder(2,0); HdmiDeviceInfo$Builder v22 = v20.setPhysicalAddress(HdmiCecLocalDevice$ActiveSource.physicalAddress); HdmiDeviceInfo$Builder v23 = v22.setPortId(v17); HdmiDeviceInfo$Builder v24 = v23.setVendorId(0); StringBuilder v25 = new StringBuilder(); StringBuilder v27 = v25.append(""HDMI""); StringBuilder v28 = v27.append(v17); String v29 = v28.toString(); HdmiDeviceInfo$Builder v30 = v24.setDisplayName(v29); HdmiDeviceInfo v31 = v30.build();",HdmiControlService.setWorkSourceUidToCallingUid(); Object v7 = this.mLocalDevices.get(0); HdmiCecLocalDevice v6 = v7; HdmiCecLocalDeviceTv v5 = v6;,0.7915666699409485
getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;,canChangeSystemAudioMode()Z,"int v18 = this.mHdmiCecNetwork.physicalAddressToPortId(HdmiCecLocalDevice$ActiveSource.physicalAddress); HdmiDeviceInfo$Builder v20 = new HdmiDeviceInfo$Builder(2,0); HdmiDeviceInfo$Builder v22 = v20.setPhysicalAddress(HdmiCecLocalDevice$ActiveSource.physicalAddress); HdmiDeviceInfo$Builder v23 = v22.setPortId(v17); HdmiDeviceInfo$Builder v24 = v23.setVendorId(0); StringBuilder v25 = new StringBuilder(); StringBuilder v27 = v25.append(""HDMI""); StringBuilder v28 = v27.append(v17); String v29 = v28.toString(); HdmiDeviceInfo$Builder v30 = v24.setDisplayName(v29); HdmiDeviceInfo v31 = v30.build();",HdmiCecNetwork v10 = HdmiCecLocalDevice.mService.getHdmiCecNetwork(); HdmiDeviceInfo v11 = v10.getSafeCecDeviceInfo(5);,0.7670490741729736
getSystemAudioMode()Z,canChangeSystemAudioMode()Z,Object v7 = this.mLocalDevices.get(0); HdmiCecLocalDevice v6 = v7; HdmiCecLocalDeviceTv v5 = v6; if (v5 == 0) { HdmiDeviceInfo v13 = HdmiCecLocalDeviceTv.getSafeAvrDeviceInfo(); boolean v14 = this.mSystemAudioActivated; return ;,HdmiCecNetwork v10 = HdmiCecLocalDevice.mService.getHdmiCecNetwork(); HdmiDeviceInfo v11 = v10.getSafeCecDeviceInfo(5);,0.8033626675605774
getSystemAudioMode()Z,canChangeSystemAudioMode()Z,Object v7 = this.mLocalDevices.get(0); HdmiCecLocalDevice v6 = v7; HdmiCecLocalDeviceTv v5 = v6; if (v5 == 0) { HdmiDeviceInfo v13 = HdmiCecLocalDeviceTv.getSafeAvrDeviceInfo(); boolean v14 = this.mSystemAudioActivated; return ;,HdmiControlService.setWorkSourceUidToCallingUid(); Object v7 = this.mLocalDevices.get(0); HdmiCecLocalDevice v6 = v7; HdmiCecLocalDeviceTv v5 = v6;,0.8032131195068359
getSupportedTypes()[I,canChangeSystemAudioMode()Z,List v5 = HdmiControlService.-$$Nest$fgetmLocalDevices(this.this$0); int v6 = v5.size(); [I v7 = new [I(v6);,HdmiControlService.setWorkSourceUidToCallingUid(); Object v7 = this.mLocalDevices.get(0); HdmiCecLocalDevice v6 = v7; HdmiCecLocalDeviceTv v5 = v6;,0.7466012239456177
getSupportedTypes()[I,getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;,List v5 = HdmiControlService.-$$Nest$fgetmLocalDevices(this.this$0); int v6 = v5.size(); [I v7 = new [I(v6);,"HdmiDeviceInfo$Builder v26 = new HdmiDeviceInfo$Builder(2,0); HdmiDeviceInfo$Builder v28 = v26.setPhysicalAddress(v18); HdmiDeviceInfo$Builder v29 = v28.setPortId(v24); HdmiDeviceInfo$Builder v30 = v29.setVendorId(0); StringBuilder v31 = new StringBuilder(); StringBuilder v33 = v31.append(""HDMI""); StringBuilder v34 = v33.append(v24); String v35 = v34.toString(); HdmiDeviceInfo$Builder v36 = v30.setDisplayName(v35); HdmiDeviceInfo v37 = v36.build();",0.7045977115631104
removeHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,addVendorCommandListener(Landroid/hardware/hdmi/IHdmiVendorCommandListener;I)V,HdmiControlService.setWorkSourceUidToCallingUid(); this.this$0.removeHdmiControlVolumeControlStatusChangeListener(p1);,"HdmiControlService.setWorkSourceUidToCallingUid(); this.this$0.addVendorCommandListener(p1, p2);",0.8716962933540344
removeHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,HdmiControlService.setWorkSourceUidToCallingUid(); this.this$0.removeHdmiControlVolumeControlStatusChangeListener(p1);,HdmiControlService.setWorkSourceUidToCallingUid();,0.8426467180252075
getMessageHistorySize()I,setMessageHistorySize(I)Z,int v5 = this.mMessageHistory.size(); int v6 = this.mMessageHistory.remainingCapacity(); int v4 = (v5 + v6); return v4;,ArrayBlockingQueue v5 = new ArrayBlockingQueue(p1); int v7 = this.mMessageHistory.size(); if (p1 >= v7) { int v8 = this.mMessageHistory.size(); if ( /* condition */ ) { boolean v9 = v5.addAll(this.mMessageHistory); this.mMessageHistory = v5; return true;,0.7155780792236328
getMessageHistorySize()I,startOneTimePermissionSession(Ljava/lang/String;IJJII)V,int v5 = this.mMessageHistory.size(); int v6 = this.mMessageHistory.remainingCapacity(); int v4 = (v5 + v6); return v4;,"long v10 = Math.min(this.mTimeout, p2); this.mTimeout = v10; int v12 = Math.min(p4, this.mImportanceToResetTimer); this.mImportanceToResetTimer = v12; int v13 = Math.min(p5, this.mImportanceToKeepSessionAlive); this.mImportanceToKeepSessionAlive = v13;",0.6768907904624939
setSystemAudioMute(Z)V,startOneTouchRecord(I[B)V,"HdmiControlService$BinderService$13 v5 = new HdmiControlService$BinderService$13(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$17 v5 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9893936514854431
setSystemAudioMute(Z)V,setSystemAudioVolume(III)V,"HdmiControlService$BinderService$13 v5 = new HdmiControlService$BinderService$13(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.98871248960495
removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V,HdmiControlService.setWorkSourceUidToCallingUid();,HdmiControlService.setWorkSourceUidToCallingUid();,1.000000238418579
removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,shouldHandleTvPowerKey()Z,HdmiControlService.setWorkSourceUidToCallingUid();,HdmiControlService.setWorkSourceUidToCallingUid();,1.000000238418579
getAllowedCecSettingStringValues(Ljava/lang/String;)Ljava/util/List;,getAllowedCecSettingIntValues(Ljava/lang/String;)[I,boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); ArrayList v15 = new ArrayList(); List v7 = v14; return v7;,boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); ArrayList v15 = new ArrayList(); List v17 = this.mAllowedValues; Stream v20 = v7.stream(); HdmiControlService$BinderService$$ExternalSyntheticLambda0 v21 = new HdmiControlService$BinderService$$ExternalSyntheticLambda0(); IntStream v23 = v20.mapToInt(v21); [I v24 = v23.toArray(); return v24;,0.8072180151939392
getAllowedCecSettingStringValues(Ljava/lang/String;)Ljava/util/List;,getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String;,boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); ArrayList v15 = new ArrayList(); List v7 = v14; return v7;,"Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); String v13 = v12.getStringValue(); int v29 = HdmiCecConfig.getStorage(v8); String v30 = HdmiCecConfig.getStorageKey(v8); String v39 = this.mStorageAdapter.retrieveGlobalSetting(v30, v27); String v28 = v39; String v7 = v28; return v7;",0.7696590423583984
powerOffRemoteDevice(II)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$9 v5 = new HdmiControlService$BinderService$9(p0,p1,p2); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9955384135246277
powerOffRemoteDevice(II)V,setSystemAudioMode(ZLandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$9 v5 = new HdmiControlService$BinderService$9(p0,p1,p2); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$8 v5 = new HdmiControlService$BinderService$8(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.9933114051818848
setProhibitMode(Z)V,suppressAmbientDisplay(Z)V,this.this$0.setProhibitMode(p1);,this.mBar.suppressAmbientDisplay(p1);,0.6045954823493958
setProhibitMode(Z)V,showPinningEnterExitToast(Z)V,this.this$0.setProhibitMode(p1);,if (this.mBar == 0) { this.mBar.showPinningEnterExitToast(p1);,0.5480737090110779
oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V,removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,HdmiControlService.setWorkSourceUidToCallingUid();,HdmiControlService.setWorkSourceUidToCallingUid();,1.000000238418579
oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V,shouldHandleTvPowerKey()Z,HdmiControlService.setWorkSourceUidToCallingUid();,HdmiControlService.setWorkSourceUidToCallingUid();,1.000000238418579
startTimerRecording(II[B)V,clearTimerRecording(II[B)V,"HdmiControlService$BinderService$19 v5 = new HdmiControlService$BinderService$19(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$20 v5 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9918963313102722
startTimerRecording(II[B)V,setSystemAudioVolume(III)V,"HdmiControlService$BinderService$19 v5 = new HdmiControlService$BinderService$19(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.991866409778595
powerOnRemoteDevice(II)V,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$1 v5 = new HdmiControlService$BinderService$1(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.9957216382026672
powerOnRemoteDevice(II)V,powerOffRemoteDevice(II)V,"HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$9 v5 = new HdmiControlService$BinderService$9(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9955384135246277
portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$2 v5 = new HdmiControlService$BinderService$2(p0,p2,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$1 v5 = new HdmiControlService$BinderService$1(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.9971352219581604
portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$2 v5 = new HdmiControlService$BinderService$2(p0,p2,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9949215054512024
shouldHandleTvPowerKey()Z,removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,HdmiControlService.setWorkSourceUidToCallingUid();,HdmiControlService.setWorkSourceUidToCallingUid();,1.000000238418579
shouldHandleTvPowerKey()Z,oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V,HdmiControlService.setWorkSourceUidToCallingUid();,HdmiControlService.setWorkSourceUidToCallingUid();,1.000000238418579
sendStandby(II)V,setSystemAudioMode(ZLandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$16 v5 = new HdmiControlService$BinderService$16(p0,p2,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$8 v5 = new HdmiControlService$BinderService$8(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.9932556748390198
sendStandby(II)V,portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$16 v5 = new HdmiControlService$BinderService$16(p0,p2,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$2 v5 = new HdmiControlService$BinderService$2(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.988505482673645
setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,getCecSettingIntValue(Ljava/lang/String;)I,"HdmiCecConfig$Setting v8 = ; int v40 = HdmiCecConfig.getStorage(v8); String v41 = HdmiCecConfig.getStorageKey(v8); if (v40 != 0) { if (v40 != 1) { this.mStorageAdapter.storeGlobalSetting(v41, p2);","boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; int v31 = HdmiCecConfig.getStorage(v8); String v32 = HdmiCecConfig.getStorageKey(v8); String v41 = this.mStorageAdapter.retrieveSharedPref(v32, v29); String v41 = this.mStorageAdapter.retrieveGlobalSetting(v32, v29);",0.8628014326095581
setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,getCecSettingIntValue(Ljava/lang/String;)I,"HdmiCecConfig$Setting v8 = ; int v40 = HdmiCecConfig.getStorage(v8); String v41 = HdmiCecConfig.getStorageKey(v8); if (v40 != 0) { if (v40 != 1) { if (v40 != 2) { this.mStorageAdapter.storeSharedPref(v41, p2);","boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; int v31 = HdmiCecConfig.getStorage(v8); String v32 = HdmiCecConfig.getStorageKey(v8); String v41 = this.mStorageAdapter.retrieveSharedPref(v32, v29); String v41 = this.mStorageAdapter.retrieveGlobalSetting(v32, v29);",0.8605197072029114
setSystemAudioModeOnForAudioOnlySource()V,stopOneTouchRecord(I)V,HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$BinderService$24 v5 = new HdmiControlService$BinderService$24(p0); this.this$0.runOnServiceThread(v5);,"HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$BinderService$18 v5 = new HdmiControlService$BinderService$18(p0,p1); this.this$0.runOnServiceThread(v5);",0.9951607584953308
setSystemAudioModeOnForAudioOnlySource()V,oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V,HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$BinderService$24 v5 = new HdmiControlService$BinderService$24(p0); this.this$0.runOnServiceThread(v5);,"int v5 = Binder.getCallingPid(); HdmiControlService$BinderService$5 v13 = new HdmiControlService$BinderService$5(p0,p1); this.this$0.runOnServiceThread(v13);",0.8734294176101685
sendVendorCommand(II[BZ)V,clearTimerRecording(II[B)V,"HdmiControlService$BinderService$15 v5 = new HdmiControlService$BinderService$15(p0,p1,p4,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$20 v5 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9937217831611633
sendVendorCommand(II[BZ)V,setSystemAudioVolume(III)V,"HdmiControlService$BinderService$15 v5 = new HdmiControlService$BinderService$15(p0,p1,p4,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9933525323867798
getAllowedCecSettingIntValues(Ljava/lang/String;)[I,getAllowedCecSettingStringValues(Ljava/lang/String;)Ljava/util/List;,boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); ArrayList v15 = new ArrayList(); List v17 = this.mAllowedValues; Stream v20 = v7.stream(); HdmiControlService$BinderService$$ExternalSyntheticLambda0 v21 = new HdmiControlService$BinderService$$ExternalSyntheticLambda0(); IntStream v23 = v20.mapToInt(v21); [I v24 = v23.toArray(); return v24;,boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); ArrayList v15 = new ArrayList(); List v7 = v14; return v7;,0.8072180151939392
getAllowedCecSettingIntValues(Ljava/lang/String;)[I,getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String;,boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); ArrayList v15 = new ArrayList(); List v17 = this.mAllowedValues; Stream v20 = v7.stream(); HdmiControlService$BinderService$$ExternalSyntheticLambda0 v21 = new HdmiControlService$BinderService$$ExternalSyntheticLambda0(); IntStream v23 = v20.mapToInt(v21); [I v24 = v23.toArray(); return v24;,"Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); String v13 = v12.getStringValue(); int v29 = HdmiCecConfig.getStorage(v8); String v30 = HdmiCecConfig.getStorageKey(v8); String v39 = this.mStorageAdapter.retrieveGlobalSetting(v30, v27); String v28 = v39; String v7 = v28; return v7;",0.7481485605239868
toggleAndFollowTvPower()V,setArcMode(Z)V,HdmiControlService$BinderService$6 v13 = new HdmiControlService$BinderService$6(p0); this.this$0.runOnServiceThread(v13);,HdmiControlService$BinderService$14 v5 = new HdmiControlService$BinderService$14(p0); this.this$0.runOnServiceThread(v5);,0.9787666201591492
toggleAndFollowTvPower()V,setSystemAudioMute(Z)V,HdmiControlService$BinderService$6 v13 = new HdmiControlService$BinderService$6(p0); this.this$0.runOnServiceThread(v13);,"HdmiControlService$BinderService$13 v5 = new HdmiControlService$BinderService$13(p0,p1); this.this$0.runOnServiceThread(v5);",0.9740546345710754
addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,addHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,"HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$HotplugEventListenerRecord v7 = new HdmiControlService$HotplugEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mHotplugEventListenerRecords.add(v7); HdmiControlService$11 v12 = new HdmiControlService$11(HdmiControlService,v7,p2); HdmiControlService.runOnServiceThread(v12);","HdmiControlService$HdmiControlStatusChangeListenerRecord v6 = new HdmiControlService$HdmiControlStatusChangeListenerRecord(HdmiControlService, p1); IBinder v8 = p1.asBinder(); v8.linkToDeath(v6, 0); HdmiControlService$9 v11 = new HdmiControlService$9(HdmiControlService, v6, p1); WorkSourceUidPreservingRunnable v14 = new WorkSourceUidPreservingRunnable(v11);",0.8774884939193726
addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,addDeviceEventListener(Landroid/hardware/hdmi/IHdmiDeviceEventListener;)V,"HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$HotplugEventListenerRecord v7 = new HdmiControlService$HotplugEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mHotplugEventListenerRecords.add(v7); HdmiControlService$11 v12 = new HdmiControlService$11(HdmiControlService,v7,p2); HdmiControlService.runOnServiceThread(v12);","HdmiControlService$DeviceEventListenerRecord v7 = new HdmiControlService$DeviceEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mDeviceEventListenerRecords.add(v7);",0.8493276834487915
setSystemAudioVolume(III)V,clearTimerRecording(II[B)V,"HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$20 v5 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9948232769966125
setSystemAudioVolume(III)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.994709312915802
clearTimerRecording(II[B)V,setSystemAudioVolume(III)V,"HdmiControlService$BinderService$20 v5 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9948232769966125
clearTimerRecording(II[B)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$20 v5 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9943892359733582
removeHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"Iterator v7 = this.mHdmiControlStatusChangeListenerRecords.iterator(); Object v9 = v7.next(); IHdmiControlStatusChangeListener v10 = HdmiControlService$HdmiControlStatusChangeListenerRecord.-$$Nest$fgetmListener(v9); IBinder v11 = v10.asBinder(); boolean v14 = p1.asBinder().unlinkToDeath(v9, 0); boolean v15 = this.mHdmiControlStatusChangeListenerRecords.remove(v9);","Iterator v7 = this.mSystemAudioModeChangeListenerRecords.iterator(); boolean v8 = v7.hasNext(); Object v9 = v7.next(); IHdmiSystemAudioModeChangeListener v10 = HdmiControlService$SystemAudioModeChangeListenerRecord.-$$Nest$fgetmListener(v9); IBinder v11 = v10.asBinder(); if (v11 != p1) {     IBinder v12 = p1.asBinder();     boolean v13 = v12.unlinkToDeath(v9, 0);     boolean v14 = this.mSystemAudioModeChangeListenerRecords.remove(v9);",0.8892349600791931
removeHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"Iterator v7 = this.mHdmiControlStatusChangeListenerRecords.iterator(); Object v9 = v7.next(); IHdmiControlStatusChangeListener v10 = HdmiControlService$HdmiControlStatusChangeListenerRecord.-$$Nest$fgetmListener(v9); IBinder v11 = v10.asBinder(); boolean v14 = p1.asBinder().unlinkToDeath(v9, 0); boolean v15 = this.mHdmiControlStatusChangeListenerRecords.remove(v9);","HdmiControlService$SystemAudioModeChangeListenerRecord v7 = new HdmiControlService$SystemAudioModeChangeListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mSystemAudioModeChangeListenerRecords.add(v7);",0.7935953736305237
deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$1 v5 = new HdmiControlService$BinderService$1(p0,p2,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$2 v5 = new HdmiControlService$BinderService$2(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.9971352219581604
deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$1 v5 = new HdmiControlService$BinderService$1(p0,p2,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9957216382026672
addDeviceEventListener(Landroid/hardware/hdmi/IHdmiDeviceEventListener;)V,setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V,"HdmiControlService$DeviceEventListenerRecord v7 = new HdmiControlService$DeviceEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mDeviceEventListenerRecords.add(v7);","HdmiControlService$HdmiRecordListenerRecord v7 = new HdmiControlService$HdmiRecordListenerRecord(HdmiControlService,p2); this.mRecordListenerRecord = v7; IBinder v9 = p2.asBinder(); v9.linkToDeath(this.mRecordListenerRecord, 0);",0.868493914604187
addDeviceEventListener(Landroid/hardware/hdmi/IHdmiDeviceEventListener;)V,addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,"HdmiControlService$DeviceEventListenerRecord v7 = new HdmiControlService$DeviceEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mDeviceEventListenerRecords.add(v7);","HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$HotplugEventListenerRecord v7 = new HdmiControlService$HotplugEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mHotplugEventListenerRecords.add(v7); HdmiControlService$11 v12 = new HdmiControlService$11(HdmiControlService,v7,p2); HdmiControlService.runOnServiceThread(v12);",0.8493276834487915
setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V,addDeviceEventListener(Landroid/hardware/hdmi/IHdmiDeviceEventListener;)V,"HdmiControlService$HdmiRecordListenerRecord v7 = new HdmiControlService$HdmiRecordListenerRecord(HdmiControlService,p2); this.mRecordListenerRecord = v7; IBinder v9 = p2.asBinder(); v9.linkToDeath(this.mRecordListenerRecord, 0);","HdmiControlService$DeviceEventListenerRecord v7 = new HdmiControlService$DeviceEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mDeviceEventListenerRecords.add(v7);",0.868493914604187
setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V,addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"HdmiControlService$HdmiRecordListenerRecord v7 = new HdmiControlService$HdmiRecordListenerRecord(HdmiControlService,p2); this.mRecordListenerRecord = v7; IBinder v9 = p2.asBinder(); v9.linkToDeath(this.mRecordListenerRecord, 0);","HdmiControlService$SystemAudioModeChangeListenerRecord v7 = new HdmiControlService$SystemAudioModeChangeListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mSystemAudioModeChangeListenerRecords.add(v7);",0.847469687461853
askRemoteDeviceToBecomeActiveSource(I)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$11 v5 = new HdmiControlService$BinderService$11(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9936370253562927
askRemoteDeviceToBecomeActiveSource(I)V,powerOffRemoteDevice(II)V,"HdmiControlService$BinderService$11 v5 = new HdmiControlService$BinderService$11(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$9 v5 = new HdmiControlService$BinderService$9(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9930645227432251
reportAudioStatus(IIIZ)V,startOneTouchRecord(I[B)V,"HdmiControlService$BinderService$23 v5 = new HdmiControlService$BinderService$23(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$17 v5 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.990506649017334
reportAudioStatus(IIIZ)V,setStandbyMode(Z)V,"HdmiControlService$BinderService$23 v5 = new HdmiControlService$BinderService$23(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$22 v5 = new HdmiControlService$BinderService$22(p0,p1); this.this$0.runOnServiceThread(v5);",0.9891722202301025
setMessageHistorySize(I)Z,getMessageHistorySize()I,ArrayBlockingQueue v5 = new ArrayBlockingQueue(p1); int v7 = this.mMessageHistory.size(); if (p1 >= v7) { int v8 = this.mMessageHistory.size(); if ( /* condition */ ) { boolean v9 = v5.addAll(this.mMessageHistory); this.mMessageHistory = v5; return true;,int v5 = this.mMessageHistory.size(); int v6 = this.mMessageHistory.remainingCapacity(); int v4 = (v5 + v6); return v4;,0.7155780792236328
setMessageHistorySize(I)Z,startOneTimePermissionSession(Ljava/lang/String;IJJII)V,ArrayBlockingQueue v5 = new ArrayBlockingQueue(p1); int v7 = this.mMessageHistory.size(); if (p1 >= v7) { int v8 = this.mMessageHistory.size(); if ( /* condition */ ) { boolean v9 = v5.addAll(this.mMessageHistory); this.mMessageHistory = v5; return true;,"long v10 = Math.min(this.mTimeout, p2); this.mTimeout = v10; int v12 = Math.min(p4, this.mImportanceToResetTimer); this.mImportanceToResetTimer = v12; int v13 = Math.min(p5, this.mImportanceToKeepSessionAlive); this.mImportanceToKeepSessionAlive = v13;",0.5813384056091309
addVendorCommandListener(Landroid/hardware/hdmi/IHdmiVendorCommandListener;I)V,removeHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,"HdmiControlService.setWorkSourceUidToCallingUid(); this.this$0.addVendorCommandListener(p1, p2);",HdmiControlService.setWorkSourceUidToCallingUid(); this.this$0.removeHdmiControlVolumeControlStatusChangeListener(p1);,0.8716962933540344
addVendorCommandListener(Landroid/hardware/hdmi/IHdmiVendorCommandListener;I)V,removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"HdmiControlService.setWorkSourceUidToCallingUid(); this.this$0.addVendorCommandListener(p1, p2);",HdmiControlService.setWorkSourceUidToCallingUid();,0.8553122282028198
canChangeSystemAudioMode()Z,removeHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,HdmiControlService.setWorkSourceUidToCallingUid(); Object v7 = this.mLocalDevices.get(0); HdmiCecLocalDevice v6 = v7; HdmiCecLocalDeviceTv v5 = v6;,HdmiControlService.setWorkSourceUidToCallingUid(); this.this$0.removeHdmiControlVolumeControlStatusChangeListener(p1);,0.8243894577026367
canChangeSystemAudioMode()Z,removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,HdmiControlService.setWorkSourceUidToCallingUid(); Object v7 = this.mLocalDevices.get(0); HdmiCecLocalDevice v6 = v7; HdmiCecLocalDeviceTv v5 = v6;,HdmiControlService.setWorkSourceUidToCallingUid();,0.8175085783004761
sendVolumeKeyEvent(IIZ)V,sendKeyEvent(IIZ)V,"HdmiControlService$BinderService$4 v5 = new HdmiControlService$BinderService$4(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$3 v5 = new HdmiControlService$BinderService$3(p0,p2,p3,p1); this.this$0.runOnServiceThread(v5);",0.9913397431373596
sendVolumeKeyEvent(IIZ)V,setSystemAudioVolume(III)V,"HdmiControlService$BinderService$4 v5 = new HdmiControlService$BinderService$4(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9883415102958679
setCecSettingIntValue(Ljava/lang/String;I)V,No similar EPs with similarity > 0.8,,,
addHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,"HdmiControlService$HdmiControlStatusChangeListenerRecord v6 = new HdmiControlService$HdmiControlStatusChangeListenerRecord(HdmiControlService, p1); IBinder v8 = p1.asBinder(); v8.linkToDeath(v6, 0); HdmiControlService$9 v11 = new HdmiControlService$9(HdmiControlService, v6, p1); WorkSourceUidPreservingRunnable v14 = new WorkSourceUidPreservingRunnable(v11);","HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$HotplugEventListenerRecord v7 = new HdmiControlService$HotplugEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mHotplugEventListenerRecords.add(v7); HdmiControlService$11 v12 = new HdmiControlService$11(HdmiControlService,v7,p2); HdmiControlService.runOnServiceThread(v12);",0.8774884939193726
addHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"HdmiControlService$HdmiControlStatusChangeListenerRecord v6 = new HdmiControlService$HdmiControlStatusChangeListenerRecord(HdmiControlService, p1); IBinder v8 = p1.asBinder(); v8.linkToDeath(v6, 0); HdmiControlService$9 v11 = new HdmiControlService$9(HdmiControlService, v6, p1); WorkSourceUidPreservingRunnable v14 = new WorkSourceUidPreservingRunnable(v11);","HdmiControlService$SystemAudioModeChangeListenerRecord v7 = new HdmiControlService$SystemAudioModeChangeListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mSystemAudioModeChangeListenerRecords.add(v7);",0.8513946533203125
setArcMode(Z)V,powerOffRemoteDevice(II)V,HdmiControlService$BinderService$14 v5 = new HdmiControlService$BinderService$14(p0); this.this$0.runOnServiceThread(v5);,"HdmiControlService$BinderService$9 v5 = new HdmiControlService$BinderService$9(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.98524010181427
setArcMode(Z)V,queryDisplayStatus(Landroid/hardware/hdmi/IHdmiControlCallback;)V,HdmiControlService$BinderService$14 v5 = new HdmiControlService$BinderService$14(p0); this.this$0.runOnServiceThread(v5);,"HdmiControlService$BinderService$7 v5 = new HdmiControlService$BinderService$7(p0,p1); this.this$0.runOnServiceThread(v5);",0.9848431348800659
addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,removeCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,Object v5 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v6 = v5.register(p2);,"boolean v4 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p2); Object v5 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v6 = v5.unregister(p3); int v8 = v7.getRegisteredCallbackCount(); Object v9 = this.mHdmiCecSettingChangeListenerRecords.remove(p2); this.mHdmiCecConfig.removeChangeListener(p2, this.mSettingChangeListener);",0.8819841146469116
addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,removeCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,"RemoteCallbackList v5 = new RemoteCallbackList(); Object v7 = this.mHdmiCecSettingChangeListenerRecords.put(p2, v5); this.mHdmiCecConfig.registerChangeListener(p2, this.mSettingChangeListener); Object v9 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v10 = v9.register(p2);","boolean v4 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p2); Object v5 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v6 = v5.unregister(p3); int v8 = v7.getRegisteredCallbackCount(); Object v9 = this.mHdmiCecSettingChangeListenerRecords.remove(p2); this.mHdmiCecConfig.removeChangeListener(p2, this.mSettingChangeListener);",0.8619851469993591
setStandbyMode(Z)V,setSystemAudioVolume(III)V,"HdmiControlService$BinderService$22 v5 = new HdmiControlService$BinderService$22(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9904412627220154
setStandbyMode(Z)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$22 v5 = new HdmiControlService$BinderService$22(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.990365743637085
addHdmiMhlVendorCommandListener(Landroid/hardware/hdmi/IHdmiMhlVendorCommandListener;)V,setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V,"HdmiControlService$HdmiMhlVendorCommandListenerRecord v7 = new HdmiControlService$HdmiMhlVendorCommandListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mMhlVendorCommandListenerRecords.add(v7);","HdmiControlService$HdmiRecordListenerRecord v7 = new HdmiControlService$HdmiRecordListenerRecord(HdmiControlService,p2); this.mRecordListenerRecord = v7; IBinder v9 = p2.asBinder(); v9.linkToDeath(this.mRecordListenerRecord, 0);",0.8255738019943237
addHdmiMhlVendorCommandListener(Landroid/hardware/hdmi/IHdmiMhlVendorCommandListener;)V,addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"HdmiControlService$HdmiMhlVendorCommandListenerRecord v7 = new HdmiControlService$HdmiMhlVendorCommandListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mMhlVendorCommandListenerRecords.add(v7);","HdmiControlService$SystemAudioModeChangeListenerRecord v7 = new HdmiControlService$SystemAudioModeChangeListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mSystemAudioModeChangeListenerRecords.add(v7);",0.8249390721321106
stopOneTouchRecord(I)V,setSystemAudioModeOnForAudioOnlySource()V,"HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$BinderService$18 v5 = new HdmiControlService$BinderService$18(p0,p1); this.this$0.runOnServiceThread(v5);",HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$BinderService$24 v5 = new HdmiControlService$BinderService$24(p0); this.this$0.runOnServiceThread(v5);,0.9951607584953308
stopOneTouchRecord(I)V,startOneTouchRecord(I[B)V,"HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$BinderService$18 v5 = new HdmiControlService$BinderService$18(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$17 v5 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.8811576962471008
getPortInfo()Ljava/util/List;,getStagedApexModuleNames()[Ljava/lang/String;,List v7 = Collections.emptyList();,List v2 = v3; String v6 = new String(0); Object v7 = v2.toArray(v6); return v7;,0.7000049948692322
getPortInfo()Ljava/util/List;,setDeviceStatus(Landroid/media/midi/IMidiDeviceServer;Landroid/media/midi/MidiDeviceStatus;)V,List v6 = this.mPortInfo; List v5 = v6;,this.mDeviceStatus = p2;,0.6950962543487549
getUserCecSettings()Ljava/util/List;,getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;,long v5 = Binder.clearCallingIdentity(); HdmiCecConfig v6 = this.this$0.getHdmiCecConfig(); List v7 = v6.getUserSettings(); return v7;,"int v18 = this.mHdmiCecNetwork.physicalAddressToPortId(HdmiCecLocalDevice$ActiveSource.physicalAddress); HdmiDeviceInfo$Builder v20 = new HdmiDeviceInfo$Builder(2,0); HdmiDeviceInfo$Builder v22 = v20.setPhysicalAddress(HdmiCecLocalDevice$ActiveSource.physicalAddress); HdmiDeviceInfo$Builder v23 = v22.setPortId(v17); HdmiDeviceInfo$Builder v24 = v23.setVendorId(0); StringBuilder v25 = new StringBuilder(); StringBuilder v27 = v25.append(""HDMI""); StringBuilder v28 = v27.append(v17); String v29 = v28.toString(); HdmiDeviceInfo$Builder v30 = v24.setDisplayName(v29); HdmiDeviceInfo v31 = v30.build();",0.7293392419815063
getUserCecSettings()Ljava/util/List;,accountAuthenticated(Landroid/accounts/Account;)Z,long v5 = Binder.clearCallingIdentity(); HdmiCecConfig v6 = this.this$0.getHdmiCecConfig(); List v7 = v6.getUserSettings(); return v7;,AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8); int v35 = UserHandle.getCallingUserId(); AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35); AccountManagerService$UserAccounts v34 = v36;,0.7067455053329468
sendKeyEvent(IIZ)V,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$3 v5 = new HdmiControlService$BinderService$3(p0,p2,p3,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$1 v5 = new HdmiControlService$BinderService$1(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.9916067123413086
sendKeyEvent(IIZ)V,portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$3 v5 = new HdmiControlService$BinderService$3(p0,p2,p3,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$2 v5 = new HdmiControlService$BinderService$2(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.9913446307182312
startOneTouchRecord(I[B)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$17 v5 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9930823445320129
startOneTouchRecord(I[B)V,setSystemAudioVolume(III)V,"HdmiControlService$BinderService$17 v5 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9923079013824463
setSystemAudioMode(ZLandroid/hardware/hdmi/IHdmiControlCallback;)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$8 v5 = new HdmiControlService$BinderService$8(p0,p2,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9948439002037048
setSystemAudioMode(ZLandroid/hardware/hdmi/IHdmiControlCallback;)V,portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$8 v5 = new HdmiControlService$BinderService$8(p0,p2,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$2 v5 = new HdmiControlService$BinderService$2(p0,p2,p1); this.this$0.runOnServiceThread(v5);",0.9938791990280151
getDeviceList()Ljava/util/List;,canChangeSystemAudioMode()Z,List v6 = v5.getSafeCecDevicesLocked(); return v6;,HdmiCecNetwork v10 = HdmiCecLocalDevice.mService.getHdmiCecNetwork(); HdmiDeviceInfo v11 = v10.getSafeCecDeviceInfo(5);,0.7463483214378357
getDeviceList()Ljava/util/List;,getInputDevices()Ljava/util/List;,List v6 = v5.getSafeCecDevicesLocked(); return v6;,"HdmiCecNetwork v5 = HdmiControlService.-$$Nest$fgetmHdmiCecNetwork(this.this$0); List v6 = v5.getSafeExternalInputsLocked(); List v8 = this.mMhlDevices; List v9 = HdmiUtils.mergeToUnmodifiableList(v6, v8); return v9;",0.6699472665786743
getCecSettingIntValue(Ljava/lang/String;)I,getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String;,"boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; int v31 = HdmiCecConfig.getStorage(v8); String v32 = HdmiCecConfig.getStorageKey(v8); String v41 = this.mStorageAdapter.retrieveSharedPref(v32, v29); String v41 = this.mStorageAdapter.retrieveGlobalSetting(v32, v29);","Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); String v13 = v12.getStringValue(); int v29 = HdmiCecConfig.getStorage(v8); String v30 = HdmiCecConfig.getStorageKey(v8); String v39 = this.mStorageAdapter.retrieveGlobalSetting(v30, v27); String v28 = v39; String v7 = v28; return v7;",0.9196377992630005
getCecSettingIntValue(Ljava/lang/String;)I,getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String;,"boolean v9 = this.mSettings.containsKey(p1); Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; int v31 = HdmiCecConfig.getStorage(v8); String v32 = HdmiCecConfig.getStorageKey(v8); String v41 = this.mStorageAdapter.retrieveSharedPref(v32, v29); String v41 = this.mStorageAdapter.retrieveGlobalSetting(v32, v29);","Object v10 = this.mSettings.get(p1); HdmiCecConfig$Setting v8 = ; HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue(); String v13 = v12.getStringValue(); int v29 = HdmiCecConfig.getStorage(v8); String v30 = HdmiCecConfig.getStorageKey(v8); String v39 = this.mStorageAdapter.retrieveSharedPref(v30, v27); String v7 = v28; return v7;",0.9126318693161011
setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V,"HdmiControlService$InputChangeListenerRecord v7 = new HdmiControlService$InputChangeListenerRecord(HdmiControlService,p2); this.mInputChangeListenerRecord = v7;","HdmiControlService$HdmiRecordListenerRecord v7 = new HdmiControlService$HdmiRecordListenerRecord(HdmiControlService,p2); this.mRecordListenerRecord = v7; IBinder v9 = p2.asBinder(); v9.linkToDeath(this.mRecordListenerRecord, 0);",0.8435847759246826
setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"HdmiControlService$InputChangeListenerRecord v7 = new HdmiControlService$InputChangeListenerRecord(HdmiControlService,p2); this.mInputChangeListenerRecord = v7;","HdmiControlService$SystemAudioModeChangeListenerRecord v7 = new HdmiControlService$SystemAudioModeChangeListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mSystemAudioModeChangeListenerRecords.add(v7);",0.7868474721908569
sendMhlVendorCommand(III[B)V,setSystemAudioVolume(III)V,"HdmiControlService$BinderService$21 v5 = new HdmiControlService$BinderService$21(p0,p1,p2,p3,p4); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$12 v5 = new HdmiControlService$BinderService$12(p0,p1,p2,p3); this.this$0.runOnServiceThread(v5);",0.9819787740707397
sendMhlVendorCommand(III[B)V,sendVendorCommand(II[BZ)V,"HdmiControlService$BinderService$21 v5 = new HdmiControlService$BinderService$21(p0,p1,p2,p3,p4); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$15 v5 = new HdmiControlService$BinderService$15(p0,p1,p4,p2,p3); this.this$0.runOnServiceThread(v5);",0.9814647436141968
addHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,addHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,"boolean v6 = this.mHdmiCecVolumeControlFeatureListenerRecords.register(p1); HdmiControlService$10 v7 = new HdmiControlService$10(HdmiControlService, p1); WorkSourceUidPreservingRunnable v10 = new WorkSourceUidPreservingRunnable(v7); boolean v12 = this.mHandler.post(v10);","HdmiControlService$HdmiControlStatusChangeListenerRecord v6 = new HdmiControlService$HdmiControlStatusChangeListenerRecord(HdmiControlService, p1); IBinder v8 = p1.asBinder(); v8.linkToDeath(v6, 0); HdmiControlService$9 v11 = new HdmiControlService$9(HdmiControlService, v6, p1); WorkSourceUidPreservingRunnable v14 = new WorkSourceUidPreservingRunnable(v11);",0.7855923175811768
addHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,"boolean v6 = this.mHdmiCecVolumeControlFeatureListenerRecords.register(p1); HdmiControlService$10 v7 = new HdmiControlService$10(HdmiControlService, p1); WorkSourceUidPreservingRunnable v10 = new WorkSourceUidPreservingRunnable(v7); boolean v12 = this.mHandler.post(v10);","HdmiControlService.setWorkSourceUidToCallingUid(); HdmiControlService$HotplugEventListenerRecord v7 = new HdmiControlService$HotplugEventListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mHotplugEventListenerRecords.add(v7); HdmiControlService$11 v12 = new HdmiControlService$11(HdmiControlService,v7,p2); HdmiControlService.runOnServiceThread(v12);",0.7774310111999512
addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"HdmiControlService$SystemAudioModeChangeListenerRecord v7 = new HdmiControlService$SystemAudioModeChangeListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mSystemAudioModeChangeListenerRecords.add(v7);","Iterator v7 = this.mSystemAudioModeChangeListenerRecords.iterator(); boolean v8 = v7.hasNext(); Object v9 = v7.next(); IHdmiSystemAudioModeChangeListener v10 = HdmiControlService$SystemAudioModeChangeListenerRecord.-$$Nest$fgetmListener(v9); IBinder v11 = v10.asBinder(); if (v11 != p1) {     IBinder v12 = p1.asBinder();     boolean v13 = v12.unlinkToDeath(v9, 0);     boolean v14 = this.mSystemAudioModeChangeListenerRecords.remove(v9);",0.8518655300140381
addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,addHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,"HdmiControlService$SystemAudioModeChangeListenerRecord v7 = new HdmiControlService$SystemAudioModeChangeListenerRecord(HdmiControlService,p2); IBinder v9 = p2.asBinder(); v9.linkToDeath(v7, 0); boolean v11 = this.mSystemAudioModeChangeListenerRecords.add(v7);","HdmiControlService$HdmiControlStatusChangeListenerRecord v6 = new HdmiControlService$HdmiControlStatusChangeListenerRecord(HdmiControlService, p1); IBinder v8 = p1.asBinder(); v8.linkToDeath(v6, 0); HdmiControlService$9 v11 = new HdmiControlService$9(HdmiControlService, v6, p1); WorkSourceUidPreservingRunnable v14 = new WorkSourceUidPreservingRunnable(v11);",0.8513946533203125
getInputDevices()Ljava/util/List;,canChangeSystemAudioMode()Z,"HdmiCecNetwork v5 = HdmiControlService.-$$Nest$fgetmHdmiCecNetwork(this.this$0); List v6 = v5.getSafeExternalInputsLocked(); List v8 = this.mMhlDevices; List v9 = HdmiUtils.mergeToUnmodifiableList(v6, v8); return v9;",HdmiCecNetwork v10 = HdmiCecLocalDevice.mService.getHdmiCecNetwork(); HdmiDeviceInfo v11 = v10.getSafeCecDeviceInfo(5);,0.7947716116905212
getInputDevices()Ljava/util/List;,getSystemAudioMode()Z,"HdmiCecNetwork v5 = HdmiControlService.-$$Nest$fgetmHdmiCecNetwork(this.this$0); List v6 = v5.getSafeExternalInputsLocked(); List v8 = this.mMhlDevices; List v9 = HdmiUtils.mergeToUnmodifiableList(v6, v8); return v9;",Object v7 = this.mLocalDevices.get(0); HdmiCecLocalDevice v6 = v7; HdmiCecLocalDeviceTv v5 = v6; if (v5 == 0) { HdmiDeviceInfo v13 = HdmiCecLocalDeviceTv.getSafeAvrDeviceInfo(); boolean v14 = this.mSystemAudioActivated; return ;,0.6987283825874329
queryDisplayStatus(Landroid/hardware/hdmi/IHdmiControlCallback;)V,powerOffRemoteDevice(II)V,"HdmiControlService$BinderService$7 v5 = new HdmiControlService$BinderService$7(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$9 v5 = new HdmiControlService$BinderService$9(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9925961494445801
queryDisplayStatus(Landroid/hardware/hdmi/IHdmiControlCallback;)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$7 v5 = new HdmiControlService$BinderService$7(p0,p1); this.this$0.runOnServiceThread(v5);","HdmiControlService$BinderService$10 v5 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v5);",0.9921060800552368
getServiceComponentName(Lcom/android/internal/os/IResultReceiver;)V,getServiceSettingsActivity(Lcom/android/internal/os/IResultReceiver;)V,"int v1 = UserHandle.getCallingUserId(); AbstractPerUserSystemService v4 = this.this$0.getServiceForUserLocked(v1); ComponentName v5 = v3.getServiceComponentName(); Bundle v7 = new Bundle(); v7.putParcelable(""EXTRA"", v5); p1.send(0, v6);","int v16 = UserHandle.getCallingUserId(); AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$1300(this.this$0, v16); String v20 = this.mSettingsActivity; ComponentName v22 = new ComponentName(ServiceInfo.packageName,v20); Bundle v24 = SyncResultReceiver.bundleFor(v19); p1.send(0, v24);",0.8272825479507446
getServiceComponentName(Lcom/android/internal/os/IResultReceiver;)V,query(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/ISearchCallback;)V,"int v1 = UserHandle.getCallingUserId(); AbstractPerUserSystemService v4 = this.this$0.getServiceForUserLocked(v1); ComponentName v5 = v3.getServiceComponentName(); Bundle v7 = new Bundle(); v7.putParcelable(""EXTRA"", v5); p1.send(0, v6);",AbstractPerUserSystemService v18 = this.this$0.getServiceForUserLocked(v9); v1.accept(v17);,0.7470802664756775
getServiceSettingsActivity(Lcom/android/internal/os/IResultReceiver;)V,getServiceComponentName(Lcom/android/internal/os/IResultReceiver;)V,"int v16 = UserHandle.getCallingUserId(); AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$1300(this.this$0, v16); String v20 = this.mSettingsActivity; ComponentName v22 = new ComponentName(ServiceInfo.packageName,v20); Bundle v24 = SyncResultReceiver.bundleFor(v19); p1.send(0, v24);","int v1 = UserHandle.getCallingUserId(); AbstractPerUserSystemService v4 = this.this$0.getServiceForUserLocked(v1); ComponentName v5 = v3.getServiceComponentName(); Bundle v7 = new Bundle(); v7.putParcelable(""EXTRA"", v5); p1.send(0, v6);",0.8272825479507446
getServiceSettingsActivity(Lcom/android/internal/os/IResultReceiver;)V,isContentCaptureFeatureEnabled(Lcom/android/internal/os/IResultReceiver;)V,"int v16 = UserHandle.getCallingUserId(); AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$1300(this.this$0, v16); String v20 = this.mSettingsActivity; ComponentName v22 = new ComponentName(ServiceInfo.packageName,v20); Bundle v24 = SyncResultReceiver.bundleFor(v19); p1.send(0, v24);","boolean v5 = 1; boolean v4 = v5; if (v4 == 0) { int v17 = UserHandle.getCallingUserId(); boolean v18 = ContentCaptureManagerService.-$$Nest$fgetmDisabledByDeviceConfig(this.this$0); if (v18 != 0) { if (this.mDisabledBySettings == 0) { boolean v21 = this.mDisabledBySettings.get(p2); if (v21 == 0) { p1.send(, 0);",0.7590092420578003
resetTemporaryService(I)V,setTemporaryService(ILjava/lang/String;I)V,this.this$0.resetTemporaryService(p1);,"this.this$0.setTemporaryService(p1, p2, p3);",0.8328460454940796
resetTemporaryService(I)V,unregisterObserver(Ljava/lang/String;)V,this.this$0.resetTemporaryService(p1);,this.this$0.assertCalledByPackageOwner(p1); this.mRemoteService.stopDetection(p1);,0.6931043863296509
startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)V,initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V,"int v20 = Binder.getCallingUid(); int v25 = v23.getPackageUidAsUser(v21, v24); int v33 = Binder.getCallingUid();",int v23 = UserHandle.getCallingUserId(); int v24 = Binder.getCallingUid();,0.90987229347229
startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)V,getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V,"int v20 = Binder.getCallingUid(); int v25 = v23.getPackageUidAsUser(v21, v24); int v33 = Binder.getCallingUid();",int v19 = Binder.getCallingPid(); StringBuilder v20 = v3.append(v19);,0.8408126831054688
isContentCaptureFeatureEnabled(Lcom/android/internal/os/IResultReceiver;)V,removeData(Landroid/view/contentcapture/DataRemovalRequest;)V,"ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1 v2 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1(p0); p3.run(); String v7 = caughtException.getMessage(); Bundle v8 = SyncResultReceiver.bundleFor(v7); p2.send(-1, v8);",Object v1 = Objects.requireNonNull(p1); RemoteContentCaptureService$$ExternalSyntheticLambda2 v22 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1); RemoteContentCaptureService.scheduleAsyncRequest(v22);,0.7959104180335999
isContentCaptureFeatureEnabled(Lcom/android/internal/os/IResultReceiver;)V,removeData(Landroid/view/contentcapture/DataRemovalRequest;)V,"ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1 v2 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1(p0); p3.run(); String v7 = caughtException.getMessage(); Bundle v8 = SyncResultReceiver.bundleFor(v7); p2.send(-1, v8);",Object v10 = Objects.requireNonNull(p1); RemoteContentCaptureService$$ExternalSyntheticLambda2 v24 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1); RemoteContentCaptureService.scheduleAsyncRequest(v24);,0.7950029373168945
removeData(Landroid/view/contentcapture/DataRemovalRequest;)V,isContentCaptureFeatureEnabled(Lcom/android/internal/os/IResultReceiver;)V,Object v1 = Objects.requireNonNull(p1); RemoteContentCaptureService$$ExternalSyntheticLambda2 v22 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1); RemoteContentCaptureService.scheduleAsyncRequest(v22);,"ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1 v2 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1(p0); p3.run(); String v7 = caughtException.getMessage(); Bundle v8 = SyncResultReceiver.bundleFor(v7); p2.send(-1, v8);",0.7959104180335999
removeData(Landroid/view/contentcapture/DataRemovalRequest;)V,isContentCaptureFeatureEnabled(Lcom/android/internal/os/IResultReceiver;)V,Object v10 = Objects.requireNonNull(p1); RemoteContentCaptureService$$ExternalSyntheticLambda2 v24 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1); RemoteContentCaptureService.scheduleAsyncRequest(v24);,"ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1 v2 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1(p0); p3.run(); String v7 = caughtException.getMessage(); Bundle v8 = SyncResultReceiver.bundleFor(v7); p2.send(-1, v8);",0.7950029373168945
setDefaultServiceEnabled(IZ)V,setTemporaryService(ILjava/lang/String;I)V,"boolean v1 = this.this$0.setDefaultServiceEnabled(p1, p2); return;","this.this$0.setTemporaryService(p1, p2, p3);",0.6757531762123108
setDefaultServiceEnabled(IZ)V,updateConfiguration(Landroid/app/time/TimeZoneConfiguration;)Z,"boolean v1 = this.this$0.setDefaultServiceEnabled(p1, p2); return;","boolean v9 = this.mServiceConfigAccessor.updateConfiguration(v5, p1); return v2;",0.6738887429237366
setTemporaryService(ILjava/lang/String;I)V,resetTemporaryService(I)V,"this.this$0.setTemporaryService(p1, p2, p3);",this.this$0.resetTemporaryService(p1);,0.8328460454940796
setTemporaryService(ILjava/lang/String;I)V,setDefaultServiceEnabled(IZ)V,"this.this$0.setTemporaryService(p1, p2, p3);","boolean v1 = this.this$0.setDefaultServiceEnabled(p1, p2); return;",0.6757531762123108
registerContentCaptureOptionsCallback(Ljava/lang/String;Landroid/view/contentcapture/IContentCaptureOptionsCallback;)V,addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,"RemoteCallbackList v12 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0); boolean v13 = v12.register(p2, p1);","RemoteCallbackList v5 = new RemoteCallbackList(); Object v7 = this.mHdmiCecSettingChangeListenerRecords.put(p2, v5); this.mHdmiCecConfig.registerChangeListener(p2, this.mSettingChangeListener); Object v9 = this.mHdmiCecSettingChangeListenerRecords.get(p2); boolean v10 = v9.register(p2);",0.7514176964759827
registerContentCaptureOptionsCallback(Ljava/lang/String;Landroid/view/contentcapture/IContentCaptureOptionsCallback;)V,registerCallback(Landroid/hardware/display/IDisplayManagerCallback;)V,"RemoteCallbackList v12 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0); boolean v13 = v12.register(p2, p1);","this.this$0.registerCallbackInternal(p1, v2, v3, p2);",0.7105394005775452
finishSession(I)V,query(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/ISearchCallback;)V,AbstractPerUserSystemService v6 = this.this$0.getServiceForUserLocked(v3); Object v9 = this.mSessions.get(p1);,AbstractPerUserSystemService v18 = this.this$0.getServiceForUserLocked(v9); v1.accept(v17);,0.8708576560020447
finishSession(I)V,createSession(Ljava/lang/String;Landroid/speech/tts/ITextToSpeechSessionCallback;)V,AbstractPerUserSystemService v6 = this.this$0.getServiceForUserLocked(v3); Object v9 = this.mSessions.get(p1);,"AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(v2); if (v3 == 0) { TextToSpeechManagerPerUserService$TextToSpeechSessionConnection v9 = new TextToSpeechManagerPerUserService$TextToSpeechSessionConnection(v6,AbstractPerUserSystemService.mUserId,p1,p2); v9.start();",0.7952120900154114
getContentCaptureConditions(Ljava/lang/String;Lcom/android/internal/os/IResultReceiver;)V,registerContentCaptureOptionsCallback(Ljava/lang/String;Landroid/view/contentcapture/IContentCaptureOptionsCallback;)V,"ArraySet v19 = v18.getContentCaptureConditionsLocked(p1); ArrayList v20 = ContentCaptureHelper.toList(v19); Bundle v21 = SyncResultReceiver.bundleFor(); p2.send(0, v21);","ContentCaptureOptions v28 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,); p2.setContentCaptureOptions(v28);",0.7090306878089905
getContentCaptureConditions(Ljava/lang/String;Lcom/android/internal/os/IResultReceiver;)V,removeData(Landroid/view/contentcapture/DataRemovalRequest;)V,"ArraySet v19 = v18.getContentCaptureConditionsLocked(p1); ArrayList v20 = ContentCaptureHelper.toList(v19); Bundle v21 = SyncResultReceiver.bundleFor(); p2.send(0, v21);",Object v10 = Objects.requireNonNull(p1); RemoteContentCaptureService$$ExternalSyntheticLambda2 v24 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1); RemoteContentCaptureService.scheduleAsyncRequest(v24);,0.6858845949172974
shareData(Landroid/view/contentcapture/DataShareRequest;Landroid/view/contentcapture/IDataShareWriteAdapter;)V,startProtoDump([BILjava/lang/String;)V,"StatsEvent$Builder v27 = StatsEvent.newBuilder(); v28 = v27.setAtomId(207); v29 = v27.writeInt(p1); if (80 != 207) { v30 = v27.addBooleanAnnotation(1, 1); v31 = v27.writeString(p2); v32 = v27.writeString(0); v33 = v27.writeInt(0); v34 = v27.writeInt(0); v35 = v27.usePooledBuffer(); StatsEvent v36 = v27.build(); StatsLog.write(v36);","ProtoOutputStream v8 = new ProtoOutputStream(); long v10 = v8.start(2246267895810); long v11 = SystemClock.elapsedRealtimeNanos(); v8.write(1125281431553, v11); v8.write(1138166333442, p3); p0.dumpDebug(v8, 1146756268035); v8.end(v10); v1.addToBuffer(v8, p2);",0.6258808970451355
shareData(Landroid/view/contentcapture/DataShareRequest;Landroid/view/contentcapture/IDataShareWriteAdapter;)V,startProtoDump([BILjava/lang/String;)V,"StatsEvent$Builder v27 = StatsEvent.newBuilder(); v28 = v27.setAtomId(207); v29 = v27.writeInt(p1); if (80 != 207) { v30 = v27.addBooleanAnnotation(1, 1); v31 = v27.writeString(p2); v32 = v27.writeString(0); v33 = v27.writeInt(0); v34 = v27.writeInt(0); v35 = v27.usePooledBuffer(); StatsEvent v36 = v27.build(); StatsLog.write(v36);","ProtoOutputStream v8 = new ProtoOutputStream(); long v10 = v8.start(2246267895810); long v11 = SystemClock.elapsedRealtimeNanos(); v8.write(1125281431553, v11); v8.write(1138166333442, p3); v8.write(1146756268035, p1); v8.end(v10); v1.addToBuffer(v8, p2);",0.6248643398284912
startConsentActivity([ILjava/lang/String;)V,onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,"this.mService.onStartConsentActivity(p1, p2);","this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);",0.576076328754425
startConsentActivity([ILjava/lang/String;)V,requestTileServiceListeningState(Landroid/content/ComponentName;I)V,"this.mService.onStartConsentActivity(p1, p2);",this.mBar.requestTileServiceListeningState(p1);,0.5627273917198181
registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,unregisterObserver(Ljava/lang/String;)V,"this.mRemoteService.startDetection(p1, p2, v26, v29);",this.this$0.assertCalledByPackageOwner(p1); this.mRemoteService.stopDetection(p1);,0.7890547513961792
registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,"this.mRemoteService.startDetection(p1, p2, v26, v29);","AmbientContextManagerPerUserService.startDetection(p1, p2, p3); AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, p2, p3);",0.7417061924934387
unregisterObserver(Ljava/lang/String;)V,registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,this.this$0.assertCalledByPackageOwner(p1); this.mRemoteService.stopDetection(p1);,"this.mRemoteService.startDetection(p1, p2, v26, v29);",0.7890547513961792
unregisterObserver(Ljava/lang/String;)V,finishSession(I)V,this.this$0.assertCalledByPackageOwner(p1); this.mRemoteService.stopDetection(p1);,ContentCaptureServerSession.destroyLocked(1); this.mService.removeSessionLocked(this.mId);,0.6962905526161194
registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,"AmbientContextManagerPerUserService.startDetection(p1, p2, p3); AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, p2, p3);","this.mRemoteService.startDetection(p1, p2, v26, v29);",0.7417061924934387
registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,"AmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3); this.this$0.assertCalledByPackageOwner(p2);","this.this$0.assertCalledByPackageOwner(p2); RemoteCallback v27 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3); AmbientContextManagerService$ClientRequest v40 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);",0.7399452924728394
queryServiceStatus([ILjava/lang/String;Landroid/os/RemoteCallback;)V,registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,"ComponentName v20 = AmbientContextManagerPerUserService.updateServiceInfoLocked(); this.mComponentName = v20; IPackageManager v21 = AppGlobals.getPackageManager(); ServiceInfo v22 = v21.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId); RemoteAmbientContextDetectionService v25 = new RemoteAmbientContextDetectionService(v26,this.mComponentName,v27); this.mRemoteService = v25; AmbientContextManagerPerUserService$$ExternalSyntheticLambda0 v29 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda0(p3); RemoteCallback v32 = new RemoteCallback(v33); RemoteAmbientContextDetectionService$$ExternalSyntheticLambda3 v43 = new RemoteAmbientContextDetectionService$$ExternalSyntheticLambda3(p1,p2,v31); AndroidFuture v45 = RemoteAmbientContextDetectionService.post(v43);","this.this$0.assertCalledByPackageOwner(p2); RemoteCallback v27 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3); AmbientContextManagerService$ClientRequest v40 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);",0.7242887616157532
queryServiceStatus([ILjava/lang/String;Landroid/os/RemoteCallback;)V,registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,"ComponentName v20 = AmbientContextManagerPerUserService.updateServiceInfoLocked(); this.mComponentName = v20; IPackageManager v21 = AppGlobals.getPackageManager(); ServiceInfo v22 = v21.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId); RemoteAmbientContextDetectionService v25 = new RemoteAmbientContextDetectionService(v26,this.mComponentName,v27); this.mRemoteService = v25; AmbientContextManagerPerUserService$$ExternalSyntheticLambda0 v29 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda0(p3); RemoteCallback v32 = new RemoteCallback(v33); RemoteAmbientContextDetectionService$$ExternalSyntheticLambda3 v43 = new RemoteAmbientContextDetectionService$$ExternalSyntheticLambda3(p1,p2,v31); AndroidFuture v45 = RemoteAmbientContextDetectionService.post(v43);","AmbientContextManagerService$AmbientContextManagerInternal$1 v4 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3); this.this$0.assertCalledByPackageOwner(p2);",0.6830028891563416
accountAuthenticated(Landroid/accounts/Account;)Z,getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;,"List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v10 = v11; boolean v12 = v10.contains(Account.type);","List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v7 = v8; boolean v9 = v7.contains(p1);",0.9343306422233582
accountAuthenticated(Landroid/accounts/Account;)Z,setPassword(Landroid/accounts/Account;Ljava/lang/String;)V,"SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase(); ContentValues v39 = new ContentValues(); long v41 = System.currentTimeMillis(); Long v42 = Long.valueOf(v41); v39.put(""last_password_entry_time_millis_epoch"", v42); String v44 = new String(2); int v45 = v38.update(""accounts"", v39, ""name=? AND type=?"", v44);","SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase(); v24.beginTransaction(); ContentValues v36 = new ContentValues(); v36.put(""password"", p3); int v41 = v35.update(""ceDb.accounts"", v36, ""_id=?"", v39);",0.9243442416191101
getAccountByTypeAndFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;,accountAuthenticated(Landroid/accounts/Account;)Z,"List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0); boolean v22 = v20.contains(Account.type); long v24 = IAccountManager$Stub.clearCallingIdentity(); AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);","List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v10 = v11; boolean v12 = v10.contains(Account.type);",0.9074503183364868
peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;,getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;,"List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0); boolean v22 = v20.contains(Account.type); long v24 = IAccountManager$Stub.clearCallingIdentity(); AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);","List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v7 = v8; boolean v9 = v7.contains(p1);",0.8638461828231812
getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V,startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,"IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);","IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);",0.9935157895088196
getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V,hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V,"IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);","IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);",0.9932807683944702
removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V,startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,"UserManager v40 = AccountManagerService.getUserManager(); UserHandle v41 = new UserHandle(p4); Bundle v43 = v40.getUserRestrictions(v41); boolean v44 = v43.getBoolean(""no_modify_accounts""); if (v44 == 0) {","UserManager v33 = AccountManagerService.getUserManager(); Bundle v36 = v33.getUserRestrictions(v34); boolean v37 = v36.getBoolean(""no_modify_accounts"");",0.9247952103614807
removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V,startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class); Object v31 = v32; if (v31 == 0) { boolean v33 = v31.isActiveProfileOwner(v1); if (v33 != 0) {,Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class); boolean v31 = v30.isActiveProfileOwner(p2); boolean v32 = v30.isActiveDeviceOwner(p2);,0.8844497799873352
setPassword(Landroid/accounts/Account;Ljava/lang/String;)V,addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z,"SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase(); v24.beginTransaction(); ContentValues v36 = new ContentValues(); v36.put(""password"", p3); int v41 = v35.update(""ceDb.accounts"", v36, ""_id=?"", v39);","SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase(); v31.beginTransaction(); Cursor v37 = v34.query(""ceDb.accounts"", v35, ""name=? AND type=?"", v36, 0, 0, 0); boolean v38 = v37.moveToNext();",0.9295524954795837
setPassword(Landroid/accounts/Account;Ljava/lang/String;)V,accountAuthenticated(Landroid/accounts/Account;)Z,"SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase(); v24.beginTransaction(); ContentValues v36 = new ContentValues(); v36.put(""password"", p3); int v41 = v35.update(""ceDb.accounts"", v36, ""_id=?"", v39);","SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase(); ContentValues v39 = new ContentValues(); long v41 = System.currentTimeMillis(); Long v42 = Long.valueOf(v41); v39.put(""last_password_entry_time_millis_epoch"", v42); String v44 = new String(2); int v45 = v38.update(""accounts"", v39, ""name=? AND type=?"", v44);",0.9243442416191101
setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V,accountAuthenticated(Landroid/accounts/Account;)Z,"List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0); HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1); Object v29 = v28.get(p2); AccountManagerService$NotificationId v36 = new AccountManagerService$NotificationId(v35,37); SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase(); v46.beginTransaction(); ContentValues v63 = new ContentValues(); v63.put(""accounts_id"", v65); v63.put(""type"", p3); v63.put(""authtoken"", p4); long v69 = v62.insert(""ceDb.authtokens"", ""authtoken"", v63);","List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v10 = v11; boolean v12 = v10.contains(Account.type);",0.7795722484588623
setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V,setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z,"List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0); HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1); Object v29 = v28.get(p2); AccountManagerService$NotificationId v36 = new AccountManagerService$NotificationId(v35,37); SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase(); v46.beginTransaction(); ContentValues v63 = new ContentValues(); v63.put(""accounts_id"", v65); v63.put(""type"", p3); v63.put(""authtoken"", p4); long v69 = v62.insert(""ceDb.authtokens"", ""authtoken"", v63);","List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5); Object v58 = v56.put(p2, v57);",0.7743594646453857
updateAppPermission(Landroid/accounts/Account;Ljava/lang/String;IZ)V,No similar EPs with similarity > 0.8,,,
addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z,setPassword(Landroid/accounts/Account;Ljava/lang/String;)V,"SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase(); v31.beginTransaction(); Cursor v37 = v34.query(""ceDb.accounts"", v35, ""name=? AND type=?"", v36, 0, 0, 0); boolean v38 = v37.moveToNext();","SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase(); v24.beginTransaction(); ContentValues v36 = new ContentValues(); v36.put(""password"", p3); int v41 = v35.update(""ceDb.accounts"", v36, ""_id=?"", v39);",0.9295524954795837
addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z,setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V,"SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabase(); LinkedHashMap v42 = new LinkedHashMap(); Cursor v45 = v41.query(""accounts"", v44, 0, 0, 0, 0, ""_id""); boolean v46 = v45.moveToNext();","SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase(); v26.beginTransaction(); SQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase(); Cursor v32 = v29.query(""accounts"", v30, ""name=? AND type=?"", v31, 0, 0, 0); boolean v33 = v32.moveToNext(); ... subsequent database operations ...",0.9186528325080872
startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V,"IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);","IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);",0.9979748725891113
startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V,"IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);","IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);",0.9935157895088196
updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,"AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5); IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);","AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3); IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);",0.9773016571998596
updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,"AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5); IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);","AccountManagerService$15 v7 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3); IAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);",0.971174955368042
addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z,addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V,"Bundle v2 = Bundle.setDefusable(p3, 1); List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4); Object v17 = Objects.requireNonNull(p1, ""account cannot be null""); long v31 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);","Bundle v1 = Bundle.setDefusable(p6, 1); AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,,p2);",0.8717346787452698
addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z,copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V,"AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4); Bundle v25 = Bundle.setDefusable(p3, 1); int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);","AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3); AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4); AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);",0.8223166465759277
getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V,isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,"AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3); IAccountManagerResponse v44 = AccountManagerService$Session.getResponseAndClose(); v44.onError(1, ""bind failure"");","IAccountManagerResponse v41 = AccountManagerService$Session.getResponseAndClose(); v41.onError(1, ""bind failure"");",0.9005793929100037
getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V,isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,"AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3); IAccountManagerResponse v44 = AccountManagerService$Session.getResponseAndClose(); v44.onError(1, ""bind failure"");","IAccountManagerResponse v55 = AccountManagerService$Session.getResponseAndClose(); v55.onError(1, ""bind failure"");",0.8916366696357727
getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;,accountAuthenticated(Landroid/accounts/Account;)Z,"List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v7 = v8; boolean v9 = v7.contains(p1);","List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v10 = v11; boolean v12 = v10.contains(Account.type);",0.9343306422233582
getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;,onAccountAccessed(Ljava/lang/String;)V,"List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v7 = v8; boolean v9 = v7.contains(p1);","List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1); ArrayList v16 = new ArrayList(); Iterator v18 = v9.iterator()",0.921151876449585
getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;,getAuthTokenLabel(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;)V,"Collection v8 = this.mAuthenticatorCache.getAllServices(v2); AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2); Integer v20 = Integer.valueOf(v1); int v25 = this.mPackageManager.getPackageUidAsUser(p1, v22);","int v6 = UserHandle.getUserId(v3); AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6); IAccountAuthenticatorCache v21 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v22 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v24 = v21.getServiceInfo(v22, v23);",0.8369933366775513
getAccountsAndVisibilityForPackage(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;,isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,"Collection v8 = this.mAuthenticatorCache.getAllServices(v2); AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2); Integer v20 = Integer.valueOf(v1); int v25 = this.mPackageManager.getPackageUidAsUser(p1, v22);","AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3); IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);",0.7782500982284546
getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;,setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z,"Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0); return v3;","List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5); Object v58 = v56.put(p2, v57);",0.6926561594009399
getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;,getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I,"Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0); return v3;","Object v1 = Objects.requireNonNull(p1, ""account cannot be null""); Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null""); List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); boolean v8 = v6.contains(Account.type); long v10 = IAccountManager$Stub.clearCallingIdentity(); Map v33 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3); Object v34 = v33.get(p2);",0.6827389597892761
addSharedAccountsFromParentUser(IILjava/lang/String;)V,hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V,"List v26 = AccountManagerService.getTypesVisibleToCaller(, p2, ); boolean v27 = v26.isEmpty();","List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4); boolean v27 = v26.contains(p2);",0.8878005146980286
addSharedAccountsFromParentUser(IILjava/lang/String;)V,getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;,"List v26 = AccountManagerService.getTypesVisibleToCaller(, p2, ); boolean v27 = v26.isEmpty();","List v26 = AccountManagerService.getTypesForCaller(, p2, 1); List v25 = v26; Account v4 = this.EMPTY_ACCOUNT_ARRAY; return v4;",0.8818674087524414
getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;,setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z,"Object v1 = Objects.requireNonNull(p1, ""account cannot be null""); List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0); HashMap v15 = new HashMap(); Map v17 = this.visibilityCache; Object v18 = v17.put(p1, v15);","List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5); Object v58 = v56.put(p2, v57);",0.8720960021018982
getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;,setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z,"Object v1 = Objects.requireNonNull(p1, ""account cannot be null""); List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0); HashMap v14 = new HashMap(); Map v16 = this.visibilityCache; Object v17 = v16.put(p1, v14);","List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5); Object v58 = v56.put(p2, v57);",0.8708713054656982
setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V,addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z,"SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase(); v26.beginTransaction(); SQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase(); Cursor v32 = v29.query(""accounts"", v30, ""name=? AND type=?"", v31, 0, 0, 0); boolean v33 = v32.moveToNext(); ... subsequent database operations ...","SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabase(); LinkedHashMap v42 = new LinkedHashMap(); Cursor v45 = v41.query(""accounts"", v44, 0, 0, 0, 0, ""_id""); boolean v46 = v45.moveToNext();",0.9186528325080872
setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V,addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z,"SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase(); v26.beginTransaction(); SQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase(); Cursor v32 = v29.query(""accounts"", v30, ""name=? AND type=?"", v31, 0, 0, 0); boolean v33 = v32.moveToNext(); ... subsequent database operations ...","SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase(); v31.beginTransaction(); Cursor v37 = v34.query(""ceDb.accounts"", v35, ""name=? AND type=?"", v36, 0, 0, 0); boolean v38 = v37.moveToNext();",0.9140776991844177
addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V,"boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType); if (v66 != 0) { AccountManagerService$Session.onError(1, ""bind failure"");",boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);,0.9231756925582886
addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V,"AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,,p2);","AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3); IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);",0.8600518703460693
onAccountAccessed(Ljava/lang/String;)V,getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;,"List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1); ArrayList v16 = new ArrayList(); Iterator v18 = v9.iterator()","List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v7 = v8; boolean v9 = v7.contains(p1);",0.921151876449585
onAccountAccessed(Ljava/lang/String;)V,getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;,"List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1); ArrayList v16 = new ArrayList(); Iterator v18 = v9.iterator()","List v26 = AccountManagerService.getTypesForCaller(, p2, 1); List v25 = v26; Account v4 = this.EMPTY_ACCOUNT_ARRAY; return v4;",0.8931812047958374
getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V,initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V,int v19 = Binder.getCallingPid(); StringBuilder v20 = v3.append(v19);,int v23 = UserHandle.getCallingUserId(); int v24 = Binder.getCallingUid();,0.8664305210113525
getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V,addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,"Bundle v1 = Bundle.setDefusable(p6, 1); int v16 = Binder.getCallingUid(); StringBuilder v17 = v3.append(v16);","Bundle v1 = Bundle.setDefusable(p6, 1); if (p6 != 0) { Bundle v47 = new Bundle(); v47.putInt(""callerUid"", v46); v47.putInt(""callerPid"", v45);",0.8556541800498962
getPassword(Landroid/accounts/Account;)Ljava/lang/String;,getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;,"SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); String v28 = new String(2); String v29 = new String(1); Cursor v30 = v27.query(""ceDb.accounts"", v29, ""name=? AND type=?"", v28, 0, 0, 0); boolean v31 = v30.moveToNext(); if (v31 == 0) { String v32 = v30.getString(0); v30.close(); String v26 = v32; String v22 = v26; IAccountManager$Stub.restoreCallingIdentity(v20); return v22;","SQLiteDatabase v26 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); HashMap v27 = new HashMap(); Cursor v30 = v26.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v29, 0, 0, 0); Map v21 = new HashMap(); Map v19 = v21; Object v28 = v27.put(p1, v19);",0.9161712527275085
getPassword(Landroid/accounts/Account;)Ljava/lang/String;,addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z,"SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); String v28 = new String(2); String v29 = new String(1); Cursor v30 = v27.query(""ceDb.accounts"", v29, ""name=? AND type=?"", v28, 0, 0, 0); boolean v31 = v30.moveToNext(); if (v31 == 0) { String v32 = v30.getString(0); v30.close(); String v26 = v32; String v22 = v26; IAccountManager$Stub.restoreCallingIdentity(v20); return v22;","SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase(); v31.beginTransaction(); Cursor v37 = v34.query(""ceDb.accounts"", v35, ""name=? AND type=?"", v36, 0, 0, 0); boolean v38 = v37.moveToNext();",0.8572540283203125
registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V,copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V,AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3); AccountManagerService$UserAccounts v5 = v6;,"AccountManagerService$UserAccounts v5 = AccountManagerService.getUserAccountsNotChecked(p3); AccountManagerService$UserAccounts v7 = AccountManagerService.getUserAccountsNotChecked(p4); AccountManagerService$5 v20 = new AccountManagerService$5(p0,v4,p1,Account.type,0,0,Account.name,0,p2,p1,v6,p3);",0.9068511724472046
registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V,copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V,AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3); AccountManagerService$UserAccounts v5 = v6;,"AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3); AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4); AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);",0.9065111875534058
someUserHasAccount(Landroid/accounts/Account;)Z,removeAccountExplicitly(Landroid/accounts/Account;)Z,boolean v14 = AccountAndUser.account.equals(p1); return 1;,"boolean v31 = p0.removeAccountInternal(v20, p1, v1); return v31;",0.7376168966293335
someUserHasAccount(Landroid/accounts/Account;)Z,accountAuthenticated(Landroid/accounts/Account;)Z,boolean v14 = AccountAndUser.account.equals(p1); return 1;,"List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v10 = v11; boolean v12 = v10.contains(Account.type);",0.715580940246582
getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;,getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V,this.mAuthenticatorCache.updateServices(p1); Collection v20 = this.mAuthenticatorCache.getAllServices(p1); int v21 = v20.size(); AuthenticatorDescription v22 = new AuthenticatorDescription(v21); return v18;,"IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);",0.780201256275177
getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription;,startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,this.mAuthenticatorCache.updateServices(p1); Collection v20 = this.mAuthenticatorCache.getAllServices(p1); int v21 = v20.size(); AuthenticatorDescription v22 = new AuthenticatorDescription(v21); return v18;,"IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);",0.7707201242446899
clearPassword(Landroid/accounts/Account;)V,getPassword(Landroid/accounts/Account;)Ljava/lang/String;,"int v1 = Binder.getCallingUid(); long v20 = IAccountManager$Stub.clearCallingIdentity(); SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked(); ContentValues v25 = new ContentValues(); v25.put(""password"", p3); int v30 = v24.update(""ceDb.accounts"", v25, ""_id=?"", v28);","SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); String v28 = new String(2); String v29 = new String(1); Cursor v30 = v27.query(""ceDb.accounts"", v29, ""name=? AND type=?"", v28, 0, 0, 0); boolean v31 = v30.moveToNext(); if (v31 == 0) { String v32 = v30.getString(0); v30.close(); String v26 = v32; String v22 = v26; IAccountManager$Stub.restoreCallingIdentity(v20); return v22;",0.8509145379066467
clearPassword(Landroid/accounts/Account;)V,peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;,"int v1 = Binder.getCallingUid(); long v20 = IAccountManager$Stub.clearCallingIdentity(); SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked(); ContentValues v25 = new ContentValues(); v25.put(""password"", p3); int v30 = v24.update(""ceDb.accounts"", v25, ""_id=?"", v28);","List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0); boolean v22 = v20.contains(Account.type); long v24 = IAccountManager$Stub.clearCallingIdentity(); AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);",0.7827116250991821
getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;,getPassword(Landroid/accounts/Account;)Ljava/lang/String;,"SQLiteDatabase v26 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); HashMap v27 = new HashMap(); Cursor v30 = v26.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v29, 0, 0, 0); Map v21 = new HashMap(); Map v19 = v21; Object v28 = v27.put(p1, v19);","SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); String v28 = new String(2); String v29 = new String(1); Cursor v30 = v27.query(""ceDb.accounts"", v29, ""name=? AND type=?"", v28, 0, 0, 0); boolean v31 = v30.moveToNext(); if (v31 == 0) { String v32 = v30.getString(0); v30.close(); String v26 = v32; String v22 = v26; IAccountManager$Stub.restoreCallingIdentity(v20); return v22;",0.9161712527275085
getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;,addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z,"SQLiteDatabase v26 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); HashMap v27 = new HashMap(); Cursor v30 = v26.query(""ceDb.extras"", this.COLUMNS_EXTRAS_KEY_AND_VALUE, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v29, 0, 0, 0); Map v21 = new HashMap(); Map v19 = v21; Object v28 = v27.put(p1, v19);","SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase(); v31.beginTransaction(); Cursor v37 = v34.query(""ceDb.accounts"", v35, ""name=? AND type=?"", v36, 0, 0, 0); boolean v38 = v37.moveToNext();",0.8880590200424194
removeAccountExplicitly(Landroid/accounts/Account;)Z,someUserHasAccount(Landroid/accounts/Account;)Z,"boolean v31 = p0.removeAccountInternal(v20, p1, v1); return v31;",boolean v14 = AccountAndUser.account.equals(p1); return 1;,0.7376168966293335
removeAccountExplicitly(Landroid/accounts/Account;)Z,getAccountsAsUser(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;,"boolean v31 = p0.removeAccountInternal(v20, p1, v1); return v31;","Account v3 = p0.getAccountsAsUserForPackage(p1, p2, p3, -1, p3, 0); return v3;",0.6809849739074707
editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V,isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,"AccountManagerService$16 v26 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2); IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);","AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3); IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);",0.9707134962081909
editProperties(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Z)V,updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,"AccountManagerService$16 v26 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2); IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);","AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5); IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);",0.9690839052200317
renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,accountAuthenticated(Landroid/accounts/Account;)Z,"List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0); Account v63 = new Account(p3, Account.type); List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);","List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v10 = v11; boolean v12 = v10.contains(Account.type);",0.8092622756958008
renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z,"List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0); Account v63 = new Account(p3, Account.type); List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);","List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5); Object v58 = v56.put(p2, v57);",0.8001607060432434
copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V,registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V,"AccountManagerService$UserAccounts v5 = AccountManagerService.getUserAccountsNotChecked(p3); AccountManagerService$UserAccounts v7 = AccountManagerService.getUserAccountsNotChecked(p4); AccountManagerService$5 v20 = new AccountManagerService$5(p0,v4,p1,Account.type,0,0,Account.name,0,p2,p1,v6,p3);",AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3); AccountManagerService$UserAccounts v5 = v6;,0.9068511724472046
copyAccountToUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;II)V,registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V,"AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3); AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4); AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);",AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3); AccountManagerService$UserAccounts v5 = v6;,0.9065111875534058
setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z,getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I,"List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5); Object v58 = v56.put(p2, v57);","Object v1 = Objects.requireNonNull(p1, ""account cannot be null""); Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null""); List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); boolean v8 = v6.contains(Account.type); long v10 = IAccountManager$Stub.clearCallingIdentity(); Map v33 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3); Object v34 = v33.get(p2);",0.8933985829353333
setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z,accountAuthenticated(Landroid/accounts/Account;)Z,"List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5); Object v58 = v56.put(p2, v57);","List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v10 = v11; boolean v12 = v10.contains(Account.type);",0.892977774143219
getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;,getPassword(Landroid/accounts/Account;)Ljava/lang/String;,"HashMap v20 = this.previousNameCache; Object v21 = v20.get(p1); SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabase(); Cursor v26 = v23.query(""accounts"", new String(1), ""name=? AND type=?"", new String(2), 0, 0, 0); String v28 = v26.getString(0); v26.close(); AtomicReference v30 = new AtomicReference(v28); Object v33 = this.previousNameCache.put(p1, v30); return v19;","SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); String v28 = new String(2); String v29 = new String(1); Cursor v30 = v27.query(""ceDb.accounts"", v29, ""name=? AND type=?"", v28, 0, 0, 0); boolean v31 = v30.moveToNext(); if (v31 == 0) { String v32 = v30.getString(0); v30.close(); String v26 = v32; String v22 = v26; IAccountManager$Stub.restoreCallingIdentity(v20); return v22;",0.8070842027664185
getPreviousName(Landroid/accounts/Account;)Ljava/lang/String;,getPassword(Landroid/accounts/Account;)Ljava/lang/String;,"HashMap v8 = this.previousNameCache; Object v9 = v8.get(p1); SQLiteDatabase v11 = this.mDeDatabase.getReadableDatabase(); Cursor v14 = v11.query(""accounts"", new String(1), ""name=? AND type=?"", new String(2), 0, 0, 0); String v16 = v14.getString(0); v14.close(); AtomicReference v18 = new AtomicReference(v16); Object v21 = this.previousNameCache.put(p1, v18); return v7;","SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); String v28 = new String(2); String v29 = new String(1); Cursor v30 = v27.query(""ceDb.accounts"", v29, ""name=? AND type=?"", v28, 0, 0, 0); boolean v31 = v30.moveToNext(); if (v31 == 0) { String v32 = v30.getString(0); v30.close(); String v26 = v32; String v22 = v26; IAccountManager$Stub.restoreCallingIdentity(v20); return v22;",0.7852664589881897
isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V,"IAccountManagerResponse v55 = AccountManagerService$Session.getResponseAndClose(); v55.onError(1, ""bind failure"");","IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose(); v64.onError(1, ""bind failure"");",0.9853508472442627
isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V,"IAccountManagerResponse v41 = AccountManagerService$Session.getResponseAndClose(); v41.onError(1, ""bind failure"");","IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose(); v64.onError(1, ""bind failure"");",0.9810796976089478
invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V,peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;,"Cursor v29 = v27.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v28); Pair v39 = new Pair(p1,p2); Object v41 = this.mTokenEvictors.get(v39); if (v41 == 0) { v41.evict(); }","Map v27 = this.authTokenCache; Object v28 = v27.get(p1); SQLiteDatabase v32 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked(); Cursor v36 = v32.query(""ceDb.authtokens"", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, ""accounts_id=(select _id FROM accounts WHERE name=? AND type=?)"", v35, 0, 0, 0); Map v31 = v33; Object v40 = v39.put(p1, v31); String v26 = v41;",0.6760793328285217
invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V,setPassword(Landroid/accounts/Account;Ljava/lang/String;)V,"Cursor v29 = v27.rawQuery(""SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?"", v28); Pair v39 = new Pair(p1,p2); Object v41 = this.mTokenEvictors.get(v39); if (v41 == 0) { v41.evict(); }",Map v47 = this.authTokenCache; Object v48 = v47.remove(p1); TokenCache v49 = this.accountTokenCaches; this.mCachedTokens.evict(p2);,0.6444270014762878
confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V,isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,"AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3); IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);","AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3); IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);",0.9281232357025146
confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V,isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V,"AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3); IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);","AccountManagerService$15 v7 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3); IAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);",0.9269542694091797
finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V,startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,"Intent v42 = new Intent(this.mContext,CantAddAccountActivit.class); this.mContext.startActivityAsUser(, v52);","Intent v51 = new Intent(this.mContext, CantAddAccountActivit.class); Intent v53 = v51.putExtra(""android.accounts.extra.ERROR_CODE"", p1); Intent v54 = v51.addFlags(268435456);",0.8708549737930298
finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V,getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,"Cipher v49 = Cipher.getInstance(""AES/CBC/PKCS5Padding""); v49.init(2, this.mEncryptionKey, v47); byte[] v51 = v49.doFinal(v42);","SecretKey v49 = v35.generateKey(); Cipher v50 = Cipher.getInstance(""AES/GCM/NoPadding""); v50.init(1, v49); byte[] v53 = v50.doFinal(v52);",0.816369891166687
addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V,addAccount(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);,"boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType); if (v66 != 0) { AccountManagerService$Session.onError(1, ""bind failure"");",0.9231756925582886
addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V,addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z,"Bundle v1 = Bundle.setDefusable(p6, 1); AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,,p2);","Bundle v2 = Bundle.setDefusable(p3, 1); List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4); Object v17 = Objects.requireNonNull(p1, ""account cannot be null""); long v31 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);",0.8717346787452698
getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I,setAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;I)Z,"Object v1 = Objects.requireNonNull(p1, ""account cannot be null""); Object v2 = Objects.requireNonNull(p2, ""packageName cannot be null""); List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); boolean v8 = v6.contains(Account.type); long v10 = IAccountManager$Stub.clearCallingIdentity(); Map v33 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3); Object v34 = v33.get(p2);","List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0); Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5); Object v58 = v56.put(p2, v57);",0.8933985829353333
getAccountVisibility(Landroid/accounts/Account;Ljava/lang/String;)I,getPackagesAndVisibilityForAccount(Landroid/accounts/Account;)Ljava/util/Map;,"Map v16 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p3); Object v17 = v16.get(p1); HashMap v19 = new HashMap(); Map v21 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p3); Object v22 = v21.put(p1, v19);","Object v1 = Objects.requireNonNull(p1, ""account cannot be null""); List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0); HashMap v14 = new HashMap(); Map v16 = this.visibilityCache; Object v17 = v16.put(p1, v14);",0.8176345229148865
unregisterAccountListener([Ljava/lang/String;Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;,onAccountAccessed(Ljava/lang/String;)V,"List v26 = AccountManagerService.getTypesForCaller(, p2, 1); List v25 = v26; Account v4 = this.EMPTY_ACCOUNT_ARRAY; return v4;","List v10 = AccountManagerService.getTypesForCaller(v7, p1, 1); ArrayList v16 = new ArrayList(); Iterator v18 = v9.iterator()",0.8931812047958374
getAccountsForPackage(Ljava/lang/String;ILjava/lang/String;)[Landroid/accounts/Account;,accountAuthenticated(Landroid/accounts/Account;)Z,"List v26 = AccountManagerService.getTypesForCaller(, p2, 1); List v25 = v26; Account v4 = this.EMPTY_ACCOUNT_ARRAY; return v4;","List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0); List v10 = v11; boolean v12 = v10.contains(Account.type);",0.8929115533828735
startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V,"UserManager v33 = AccountManagerService.getUserManager(); Bundle v36 = v33.getUserRestrictions(v34); boolean v37 = v36.getBoolean(""no_modify_accounts"");","UserManager v40 = AccountManagerService.getUserManager(); UserHandle v41 = new UserHandle(p4); Bundle v43 = v40.getUserRestrictions(v41); boolean v44 = v43.getBoolean(""no_modify_accounts""); if (v44 == 0) {",0.9247952103614807
startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,removeAccountAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;ZI)V,Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class); boolean v31 = v30.isActiveProfileOwner(p2); boolean v32 = v30.isActiveDeviceOwner(p2);,Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class); Object v31 = v32; if (v31 == 0) { boolean v33 = v31.isActiveProfileOwner(v1); if (v33 != 0) {,0.8844497799873352
hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V,startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V,"IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);","IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);",0.9979748725891113
hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V,getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V,"IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);","IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0); AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType); RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);",0.9932807683944702
createSession(Ljava/lang/String;Landroid/speech/tts/ITextToSpeechSessionCallback;)V,finishSession(I)V,"AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(v2); if (v3 == 0) { TextToSpeechManagerPerUserService$TextToSpeechSessionConnection v9 = new TextToSpeechManagerPerUserService$TextToSpeechSessionConnection(v6,AbstractPerUserSystemService.mUserId,p1,p2); v9.start();",AbstractPerUserSystemService v6 = this.this$0.getServiceForUserLocked(v3); Object v9 = this.mSessions.get(p1);,0.7952120900154114
createSession(Ljava/lang/String;Landroid/speech/tts/ITextToSpeechSessionCallback;)V,query(Landroid/app/search/SearchSessionId;Landroid/app/search/Query;Landroid/app/search/ISearchCallback;)V,"AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(v2); if (v3 == 0) { TextToSpeechManagerPerUserService$TextToSpeechSessionConnection v9 = new TextToSpeechManagerPerUserService$TextToSpeechSessionConnection(v6,AbstractPerUserSystemService.mUserId,p1,p2); v9.start();",AbstractPerUserSystemService v18 = this.this$0.getServiceForUserLocked(v9); v1.accept(v17);,0.7620382308959961
getGameMode(Ljava/lang/String;I)I,getGameModeInfo(Ljava/lang/String;I)Landroid/app/GameModeInfo;,"ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v10 = Integer.valueOf(v3); boolean v11 = this.mSettings.containsKey(v10); Object v16 = this.mGameModes.get(p1); int v17 = v16.intValue(); int v14 = v17; int v9 = v14; return v9;","ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v8 = Integer.valueOf(v3); boolean v9 = this.mSettings.containsKey(v8); Object v11 = this.mSettings.get(v10); int v20 = GameManagerService$GamePackageConfiguration.getAvailableGameModesBitfield(); int v21 = Integer.bitCount(v20); [I v22 = new [I(v21); int v23 = Integer.highestOneBit(v20); int v24 = Integer.numberOfTrailingZeros(v23); GameModeInfo v25 = new GameModeInfo(v7,v16); return v25;",0.9637267589569092
getGameMode(Ljava/lang/String;I)I,getGameModeInfo(Ljava/lang/String;I)Landroid/app/GameModeInfo;,"ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v10 = Integer.valueOf(v3); boolean v11 = this.mSettings.containsKey(v10); Object v16 = this.mGameModes.get(p1); int v17 = v16.intValue(); int v14 = v17; int v9 = v14; return v9;","ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v8 = Integer.valueOf(v3); boolean v9 = this.mSettings.containsKey(v8); Object v11 = this.mSettings.get(v10); int v20 = GameManagerService$GamePackageConfiguration.getAvailableGameModesBitfield(); int v21 = Integer.bitCount(v20); [I v22 = new [I(v21); int v23 = Integer.highestOneBit(v20); int v24 = Integer.numberOfTrailingZeros(v23); GameModeInfo v25 = new GameModeInfo(v7,v16); return v25;",0.9637267589569092
notifyGraphicsEnvironmentSetup(Ljava/lang/String;I)V,getGameModeInfo(Ljava/lang/String;I)Landroid/app/GameModeInfo;,"ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v19 = Integer.valueOf(v12); boolean v20 = this.mSettings.containsKey(v19);","ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v8 = Integer.valueOf(v3); boolean v9 = this.mSettings.containsKey(v8); Object v11 = this.mSettings.get(v10); int v20 = GameManagerService$GamePackageConfiguration.getAvailableGameModesBitfield(); int v21 = Integer.bitCount(v20); [I v22 = new [I(v21); int v23 = Integer.highestOneBit(v20); int v24 = Integer.numberOfTrailingZeros(v23); GameModeInfo v25 = new GameModeInfo(v7,v16); return v25;",0.8913300037384033
notifyGraphicsEnvironmentSetup(Ljava/lang/String;I)V,getGameMode(Ljava/lang/String;I)I,"ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v19 = Integer.valueOf(v12); boolean v20 = this.mSettings.containsKey(v19);","ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); int v7 = this.mPackageManager.getPackageUidAsUser(p1, v3); Integer v9 = Integer.valueOf(v3); boolean v10 = this.mSettings.containsKey(v9); Object v15 = this.mGameModes.get(p1); int v16 = v15.intValue(); int v13 = v16; int v8 = v13; return v8;",0.8874912261962891
setGameState(Ljava/lang/String;Landroid/app/GameState;I)V,notifyGraphicsEnvironmentSetup(Ljava/lang/String;I)V,"ApplicationInfo v2 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, p3); Message v3 = this.mHandler.obtainMessage(4); Bundle v4 = new Bundle(); v4.putString(""packageName"", p1); v4.putInt(""userId"", p3); v3.setData(v4); Message.obj = p2; boolean v9 = this.mHandler.sendMessage(v3);","ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v19 = Integer.valueOf(v12); boolean v20 = this.mSettings.containsKey(v19);",0.798623263835907
setGameState(Ljava/lang/String;Landroid/app/GameState;I)V,getGameMode(Ljava/lang/String;I)I,"ApplicationInfo v2 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, p3); Message v3 = this.mHandler.obtainMessage(4); Bundle v4 = new Bundle(); v4.putString(""packageName"", p1); v4.putInt(""userId"", p3); v3.setData(v4); Message.obj = p2; boolean v9 = this.mHandler.sendMessage(v3);","ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); int v7 = this.mPackageManager.getPackageUidAsUser(p1, v3); Integer v9 = Integer.valueOf(v3); boolean v10 = this.mSettings.containsKey(v9); Object v15 = this.mGameModes.get(p1); int v16 = v15.intValue(); int v13 = v16; int v8 = v13; return v8;",0.7847448587417603
setGameMode(Ljava/lang/String;II)V,getGameMode(Ljava/lang/String;I)I,"ApplicationInfo v3 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, p3); Integer v7 = Integer.valueOf(v6); Object v13 = this.mGameModes.put(p1, v12);","ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); int v7 = this.mPackageManager.getPackageUidAsUser(p1, v3); Integer v9 = Integer.valueOf(v3); boolean v10 = this.mSettings.containsKey(v9); Object v15 = this.mGameModes.get(p1); int v16 = v15.intValue(); int v13 = v16; int v8 = v13; return v8;",0.8925955891609192
setGameMode(Ljava/lang/String;II)V,getGameMode(Ljava/lang/String;I)I,"ApplicationInfo v3 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, p3); Integer v7 = Integer.valueOf(v6); Object v13 = this.mGameModes.put(p1, v12);","ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v10 = Integer.valueOf(v3); boolean v11 = this.mSettings.containsKey(v10); Object v16 = this.mGameModes.get(p1); int v17 = v16.intValue(); int v14 = v17; int v9 = v14; return v9;",0.8896832466125488
setGameServiceProvider(Ljava/lang/String;)V,setHibernatingGlobally(Ljava/lang/String;Z)V,"boolean v3 = Objects.equals(this.mGameServiceProviderOverride, p1); if ((v3 ^ 1) != 0) { this.mGameServiceProviderOverride = p1; GameServiceController$$ExternalSyntheticLambda0 v4 = new GameServiceController$$ExternalSyntheticLambda0(GameServiceController); this.mBackgroundExecutor.execute(v4);","HibernationStateDiskStore$$ExternalSyntheticLambda0 v13 = new HibernationStateDiskStore$$ExternalSyntheticLambda0(HibernationStateDiskStore); ScheduledFuture v15 = this.mExecutorService.schedule(v13, 60000, TimeUnit.MILLISECONDS);",0.6679735779762268
setGameServiceProvider(Ljava/lang/String;)V,setHibernatingGlobally(Ljava/lang/String;Z)V,"boolean v3 = Objects.equals(this.mGameServiceProviderOverride, p1); if ((v3 ^ 1) != 0) { this.mGameServiceProviderOverride = p1; GameServiceController$$ExternalSyntheticLambda0 v4 = new GameServiceController$$ExternalSyntheticLambda0(GameServiceController); this.mBackgroundExecutor.execute(v4);","Object v4 = this.mGlobalHibernationStates.get(p1); AppHibernationService$$ExternalSyntheticLambda0 v7 = new AppHibernationService$$ExternalSyntheticLambda0(AppHibernationService,p1,v4); this.mBackgroundExecutor.execute(v7);",0.6609565615653992
getGameModeInfo(Ljava/lang/String;I)Landroid/app/GameModeInfo;,getGameMode(Ljava/lang/String;I)I,"ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v8 = Integer.valueOf(v3); boolean v9 = this.mSettings.containsKey(v8); Object v11 = this.mSettings.get(v10); int v20 = GameManagerService$GamePackageConfiguration.getAvailableGameModesBitfield(); int v21 = Integer.bitCount(v20); [I v22 = new [I(v21); int v23 = Integer.highestOneBit(v20); int v24 = Integer.numberOfTrailingZeros(v23); GameModeInfo v25 = new GameModeInfo(v7,v16); return v25;","ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v10 = Integer.valueOf(v3); boolean v11 = this.mSettings.containsKey(v10); Object v16 = this.mGameModes.get(p1); int v17 = v16.intValue(); int v14 = v17; int v9 = v14; return v9;",0.9637267589569092
getGameModeInfo(Ljava/lang/String;I)Landroid/app/GameModeInfo;,getGameMode(Ljava/lang/String;I)I,"ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v8 = Integer.valueOf(v3); boolean v9 = this.mSettings.containsKey(v8); Object v11 = this.mSettings.get(v10); int v20 = GameManagerService$GamePackageConfiguration.getAvailableGameModesBitfield(); int v21 = Integer.bitCount(v20); [I v22 = new [I(v21); int v23 = Integer.highestOneBit(v20); int v24 = Integer.numberOfTrailingZeros(v23); GameModeInfo v25 = new GameModeInfo(v7,v16); return v25;","ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v10 = Integer.valueOf(v3); boolean v11 = this.mSettings.containsKey(v10); Object v16 = this.mGameModes.get(p1); int v17 = v16.intValue(); int v14 = v17; int v9 = v14; return v9;",0.9637267589569092
getAvailableGameModes(Ljava/lang/String;)[I,notifyGraphicsEnvironmentSetup(Ljava/lang/String;I)V,Object v3 = this.mOverrideConfigs.get(p1); int v5 = GameManagerService$GamePackageConfiguration.getAvailableGameModesBitfield(); int v6 = Integer.bitCount(v5); [I v7 = new [I(v6); return v2;,"int v38 = GameManagerService.getGameModeFromSettings(p1, v34); Object v39 = this.mConfigs.get(p1); Integer v41 = Integer.valueOf(v31); Object v42 = this.mModeConfigs.get(v41);",0.7491791248321533
getAvailableGameModes(Ljava/lang/String;)[I,notifyGraphicsEnvironmentSetup(Ljava/lang/String;I)V,Object v3 = this.mOverrideConfigs.get(p1); int v6 = GameManagerService$GamePackageConfiguration.getAvailableGameModesBitfield(); int v7 = Integer.bitCount(v6); [I v8 = new [I(v7); return v2;,"int v38 = GameManagerService.getGameModeFromSettings(p1, v34); Object v39 = this.mConfigs.get(p1); Integer v41 = Integer.valueOf(v31); Object v42 = this.mModeConfigs.get(v41);",0.7426463961601257
isAngleEnabled(Ljava/lang/String;I)Z,notifyGraphicsEnvironmentSetup(Ljava/lang/String;I)V,"int v4 = ActivityManager.handleIncomingUser(v2, v3, p2, 0, 1, ""getGameMode"", ""com.android.server.app.GameManagerService""); ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v4); Integer v11 = Integer.valueOf(v4); boolean v12 = this.mSettings.containsKey(v11); Object v22 = this.mConfigs.get(p1); GameManagerService$GamePackageConfiguration$GameModeConfiguration v23 = v22.getGameModeConfiguration(v1); boolean v24 = v23.getUseAngle(); return v24;","int v38 = GameManagerService.getGameModeFromSettings(p1, v34); Object v39 = this.mConfigs.get(p1); Integer v41 = Integer.valueOf(v31); Object v42 = this.mModeConfigs.get(v41);",0.8351975679397583
isAngleEnabled(Ljava/lang/String;I)Z,getGameMode(Ljava/lang/String;I)I,"int v4 = ActivityManager.handleIncomingUser(v2, v3, p2, 0, 1, ""getGameMode"", ""com.android.server.app.GameManagerService""); ApplicationInfo v6 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v4); Integer v11 = Integer.valueOf(v4); boolean v12 = this.mSettings.containsKey(v11); Object v22 = this.mConfigs.get(p1); GameManagerService$GamePackageConfiguration$GameModeConfiguration v23 = v22.getGameModeConfiguration(v1); boolean v24 = v23.getUseAngle(); return v24;","ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v10 = Integer.valueOf(v3); boolean v11 = this.mSettings.containsKey(v10); Object v16 = this.mGameModes.get(p1); int v17 = v16.intValue(); int v14 = v17; int v9 = v14; return v9;",0.831812858581543
stopWatchlistLogging()Z,startWatchlistLogging()Z,if (this.mIsLoggingEnabled != 0) { this.mIsLoggingEnabled = 0; boolean v3 = this.mIpConnectivityMetrics.removeNetdEventCallback(2); boolean v2 = v3; return v2;,"boolean v3 = this.mIpConnectivityMetrics.addNetdEventCallback(2, this.mNetdEventCallback); if (v3 == 0) { this.mIsLoggingEnabled = 1; boolean v2 = 1; return v2;",0.9361504912376404
stopWatchlistLogging()Z,logEvent(Landroid/net/ConnectivityMetricsEvent;)I,if (this.mIsLoggingEnabled != 0) { this.mIsLoggingEnabled = 0; boolean v3 = this.mIpConnectivityMetrics.removeNetdEventCallback(2); boolean v2 = v3; return v2;,this.mEventLog.append(p2); boolean v7 = IpConnectivityMetrics.isRateLimited(p2); boolean v8 = this.mBuffer.add(p2);,0.67902010679245
getWatchlistConfigHash()[B,setNetworkPolicies([Landroid/net/NetworkPolicy;)V,FileInputStream v4 = new FileInputStream(this.mXmlFile); byte[] v6 = DigestUtils.getSha256Hash(v4); byte[] v3 = v6; byte[] v1 = v3; return v1;,FileOutputStream v21 = this.mPolicyFile.startWrite(); TypedXmlSerializer v22 = Xml.resolveSerializer(v21);,0.6586775779724121
getWatchlistConfigHash()[B,clearBcb()Z,FileInputStream v4 = new FileInputStream(this.mXmlFile); byte[] v6 = DigestUtils.getSha256Hash(v4); byte[] v3 = v6; byte[] v1 = v3; return v1;,"byte[] v18 = p2.getBytes(StandardCharsets.UTF_8); this.mOutputStream.writeInt(v18.length); this.mOutputStream.write(v18, 0, v18.length); int v22 = this.mInputStream.readInt(); this.mOutputStream.writeInt(0);",0.6538218259811401
reloadWatchlist()V,hasSha256SigningCertificate(Ljava/lang/String;[B)Z,"ArrayList v7 = new ArrayList(); ArrayList v9 = new ArrayList(); WatchlistConfig$CrcShaDigests v22 = new WatchlistConfig$CrcShaDigests(v23,v25); HarmfulCrcs v23 = new HarmfulCrcs(v7); HarmfulDigests v25 = new HarmfulDigests(v9); this.mDomainDigests = v22;","PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v9); this.mSnapshotStatistics.rebuild(v11, v17, ); Computer v10 = v15; this.sSnapshot.set(v10); Computer v20 = v10.use(); Computer v1 = v20; boolean v21 = v1.hasSigningCertificate(p1, p2, 1); return v21;",0.5565169453620911
reloadWatchlist()V,isPackageDebuggable(Ljava/lang/String;)Z,"ArrayList v7 = new ArrayList(); ArrayList v9 = new ArrayList(); WatchlistConfig$CrcShaDigests v22 = new WatchlistConfig$CrcShaDigests(v23,v25); HarmfulCrcs v23 = new HarmfulCrcs(v7); HarmfulDigests v25 = new HarmfulDigests(v9); this.mDomainDigests = v22;","PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v10); this.mSnapshotStatistics.rebuild(v12, v17, ); Computer v11 = v15; this.sSnapshot.set(v11);",0.5487220287322998
reportWatchlistIfNecessary()V,removeImeSurface()V,Message v2 = WatchlistLoggingHandler.obtainMessage(2); boolean v3 = WatchlistLoggingHandler.sendMessage(v2);,Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,0.6453065872192383
reportWatchlistIfNecessary()V,notifyStatsProviderWarningOrLimitReached()V,Message v2 = WatchlistLoggingHandler.obtainMessage(2); boolean v3 = WatchlistLoggingHandler.sendMessage(v2);,Message v3 = this.mHandler.obtainMessage(20); v3.sendToTarget();,0.6431974172592163
startWatchlistLogging()Z,stopWatchlistLogging()Z,"boolean v3 = this.mIpConnectivityMetrics.addNetdEventCallback(2, this.mNetdEventCallback); if (v3 == 0) { this.mIsLoggingEnabled = 1; boolean v2 = 1; return v2;",if (this.mIsLoggingEnabled != 0) { this.mIsLoggingEnabled = 0; boolean v3 = this.mIpConnectivityMetrics.removeNetdEventCallback(2); boolean v2 = v3; return v2;,0.9361504912376404
startWatchlistLogging()Z,logEvent(Landroid/net/ConnectivityMetricsEvent;)I,"boolean v3 = this.mIpConnectivityMetrics.addNetdEventCallback(2, this.mNetdEventCallback); if (v3 == 0) { this.mIsLoggingEnabled = 1; boolean v2 = 1; return v2;",this.mEventLog.append(p2); boolean v7 = IpConnectivityMetrics.isRateLimited(p2); boolean v8 = this.mBuffer.add(p2);,0.7264237999916077
cancelAll()V,No similar EPs with similarity > 0.8,,,
getStartedJobs()Ljava/util/List;,getAllPendingJobs()Landroid/content/pm/ParceledListSlice;,ArraySet v2 = this.mRunningJobs; int v4 = v2.size(); ArrayList v3 = new ArrayList(v4);,List v6 = this.mJobSet.getJobsByUid(p1); List v5 = v6; int v8 = v5.size();,0.7921075820922852
getStartedJobs()Ljava/util/List;,getAllJobSnapshots()Landroid/content/pm/ParceledListSlice;,ArraySet v2 = this.mRunningJobs; int v4 = v2.size(); ArrayList v3 = new ArrayList(v4);,"ArrayList v2 = new ArrayList(v3); JobSchedulerService$JobSchedulerStub$$ExternalSyntheticLambda0 v7 = new JobSchedulerService$JobSchedulerStub$$ExternalSyntheticLambda0(p0,v2); JobSchedulerService.mJobs.forEachJob(v7); ParceledListSlice v10 = new ParceledListSlice(v2); return v10;",0.7261872291564941
cancel(I)V,onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,"int v1 = Binder.getCallingUid(); long v2 = Binder.clearCallingIdentity(); JobStatus v5 = this.mJobs.getJobByUidAndJobId(p2, p3); StringBuilder v6 = new StringBuilder(); String v14 = v6.toString(); JobSchedulerService.cancelJobImplLocked(v5, 0, p5, 0, v14);","int v3 = Binder.getCallingUid(); int v4 = Binder.getCallingPid(); long v5 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationError(v3, v4, p1, p2, p3, p4, p5, p6, p7); Binder.restoreCallingIdentity(v5);",0.7553552985191345
cancel(I)V,getPendingJob(I)Landroid/app/job/JobInfo;,"int v1 = Binder.getCallingUid(); long v2 = Binder.clearCallingIdentity(); JobStatus v5 = this.mJobs.getJobByUidAndJobId(p2, p3); StringBuilder v6 = new StringBuilder(); String v14 = v6.toString(); JobSchedulerService.cancelJobImplLocked(v5, 0, p5, 0, v14);",List v5 = this.mJobSet.getJobsByUid(p1); int v6 = v4.size(); Object v7 = v4.get(); int v9 = this.job.getId(); if (v8 != p1) {   JobInfo v10 = this.job;   JobInfo v3 = v10;   Binder.restoreCallingIdentity(v2);   return v3;,0.7506136894226074
getAllJobSnapshots()Landroid/content/pm/ParceledListSlice;,getStartedJobs()Ljava/util/List;,"ArrayList v2 = new ArrayList(v3); JobSchedulerService$JobSchedulerStub$$ExternalSyntheticLambda0 v7 = new JobSchedulerService$JobSchedulerStub$$ExternalSyntheticLambda0(p0,v2); JobSchedulerService.mJobs.forEachJob(v7); ParceledListSlice v10 = new ParceledListSlice(v2); return v10;",ArraySet v2 = this.mRunningJobs; int v4 = v2.size(); ArrayList v3 = new ArrayList(v4);,0.7261872291564941
getAllJobSnapshots()Landroid/content/pm/ParceledListSlice;,getAllPendingJobs()Landroid/content/pm/ParceledListSlice;,"ArrayList v2 = new ArrayList(v3); JobSchedulerService$JobSchedulerStub$$ExternalSyntheticLambda0 v7 = new JobSchedulerService$JobSchedulerStub$$ExternalSyntheticLambda0(p0,v2); JobSchedulerService.mJobs.forEachJob(v7); ParceledListSlice v10 = new ParceledListSlice(v2); return v10;",List v6 = this.mJobSet.getJobsByUid(p1); List v5 = v6; int v8 = v5.size();,0.7200014591217041
getPendingJob(I)Landroid/app/job/JobInfo;,getAllPendingJobs()Landroid/content/pm/ParceledListSlice;,List v5 = this.mJobSet.getJobsByUid(p1); int v6 = v4.size(); Object v7 = v4.get(); int v9 = this.job.getId(); if (v8 != p1) {   JobInfo v10 = this.job;   JobInfo v3 = v10;   Binder.restoreCallingIdentity(v2);   return v3;,List v6 = this.mJobSet.getJobsByUid(p1); List v5 = v6; int v8 = v5.size();,0.812524676322937
getPendingJob(I)Landroid/app/job/JobInfo;,setNetworkPolicies([Landroid/net/NetworkPolicy;)V,JobInfo v3 = 0; Binder.restoreCallingIdentity(v2); return v3;,long v2 = Binder.clearCallingIdentity(); Binder.restoreCallingIdentity(v2);,0.7545623779296875
getAllPendingJobs()Landroid/content/pm/ParceledListSlice;,queryPermissionsByGroup(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;,ParceledListSlice v3 = new ParceledListSlice(v4); return v3;,ParceledListSlice v2 = new ParceledListSlice(v1); return v2;,0.9794100522994995
getAllPendingJobs()Landroid/content/pm/ParceledListSlice;,getAllPermissionGroups(I)Landroid/content/pm/ParceledListSlice;,ParceledListSlice v3 = new ParceledListSlice(v4); return v3;,ParceledListSlice v1 = new ParceledListSlice(v2); return v1;,0.9771069288253784
isUidNetworkingBlocked(IZ)Z,isUidRestrictedOnMeteredNetworks(I)Z,"Object v3 = this.mUidBlockedState.get(p1); String v11 = NetworkPolicyManagerService$UidBlockedState.toString(this.blockedReasons, this.allowedReasons, this.effectiveBlockedReasons); NetworkPolicyLogger$Data.type = 1; NetworkPolicyLogger$Data.ifield1 = p1; NetworkPolicyLogger$Data.ifield2 = NetworkPolicyManagerService$UidBlockedState.blockedReasons; NetworkPolicyLogger$Data.ifield3 = NetworkPolicyManagerService$UidBlockedState.allowedReasons; NetworkPolicyLogger$Data.ifield4 = NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons;",Object v2 = this.mUidBlockedState.get(p1);,0.7377870082855225
isUidNetworkingBlocked(IZ)Z,getNetworkPolicies(Ljava/lang/String;)[Landroid/net/NetworkPolicy;,"Object v3 = this.mUidBlockedState.get(p1); String v11 = NetworkPolicyManagerService$UidBlockedState.toString(this.blockedReasons, this.allowedReasons, this.effectiveBlockedReasons); NetworkPolicyLogger$Data.type = 1; NetworkPolicyLogger$Data.ifield1 = p1; NetworkPolicyLogger$Data.ifield2 = NetworkPolicyManagerService$UidBlockedState.blockedReasons; NetworkPolicyLogger$Data.ifield3 = NetworkPolicyManagerService$UidBlockedState.allowedReasons; NetworkPolicyLogger$Data.ifield4 = NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons;",int v6 = this.mNetworkPolicy.size(); NetworkPolicy v7 = new NetworkPolicy(v6); return v7;,0.6696358919143677
setUidPolicy(II)V,removeUidPolicy(II)V,"int v4 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1); Message v14 = this.mHandler.obtainMessage(13, p1, p2, v13); v14.sendToTarget();","int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);",0.90189129114151
setUidPolicy(II)V,addUidPolicy(II)V,"int v4 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1); Message v14 = this.mHandler.obtainMessage(13, p1, p2, v13); v14.sendToTarget();","int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); Message v13 = this.mHandler.obtainMessage(13, p1, (p2 | v3), v12); v13.sendToTarget();",0.8801884651184082
getRestrictBackground()Z,setRestrictBackground(Z)V,return this.mRestrictBackground;,"this.mEventsBuffer.restrictBackgroundChanged(this.mRestrictBackground, this.mRestrictBackground);",0.7393928170204163
getRestrictBackground()Z,setRestrictBackground(Z)V,return this.mRestrictBackground;,"this.mRestrictBackground = p1; boolean v26 = this.mNetworkManager.setDataSaverModeEnabled(this.mRestrictBackground); Message v29 = this.mHandler.obtainMessage(6, this.mRestrictBackground, 0); v29.sendToTarget();",0.6025345921516418
setDeviceIdleMode(Z)V,removeUidPolicy(II)V,"this.mDeviceIdleMode = p1; NetworkPolicyLogger$Data.bfield1 = p1; NetworkPolicyManagerService.updateRulesForWhitelistedPowerSaveUL(this.mDeviceIdleMode, 1, this.mUidFirewallDozableRules);","this.mUidPolicy.put(p1, p3); NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);",0.6753883361816406
setDeviceIdleMode(Z)V,isUidNetworkingBlocked(IZ)Z,"this.mDeviceIdleMode = p1; NetworkPolicyLogger$Data.bfield1 = p1; NetworkPolicyManagerService.updateRulesForWhitelistedPowerSaveUL(this.mDeviceIdleMode, 1, this.mUidFirewallDozableRules);","Object v3 = this.mUidBlockedState.get(p1); String v11 = NetworkPolicyManagerService$UidBlockedState.toString(this.blockedReasons, this.allowedReasons, this.effectiveBlockedReasons); NetworkPolicyLogger$Data.type = 1; NetworkPolicyLogger$Data.ifield1 = p1; NetworkPolicyLogger$Data.ifield2 = NetworkPolicyManagerService$UidBlockedState.blockedReasons; NetworkPolicyLogger$Data.ifield3 = NetworkPolicyManagerService$UidBlockedState.allowedReasons; NetworkPolicyLogger$Data.ifield4 = NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons;",0.667521595954895
setWifiMeteredOverride(Ljava/lang/String;I)V,No similar EPs with similarity > 0.8,,,
registerListener(Landroid/net/INetworkPolicyListener;)V,registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,boolean v4 = this.mListeners.register(p1);,boolean v7 = this.mListeners.register(p1); return v6;,0.9575901031494141
registerListener(Landroid/net/INetworkPolicyListener;)V,unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,boolean v4 = this.mListeners.register(p1);,boolean v7 = this.mListeners.unregister(p1); boolean v6 = v7; return v6;,0.8885239362716675
getNetworkPolicies(Ljava/lang/String;)[Landroid/net/NetworkPolicy;,setNetworkPolicies([Landroid/net/NetworkPolicy;)V,int v6 = this.mNetworkPolicy.size(); NetworkPolicy v7 = new NetworkPolicy(v6); return v7;,this.mNetworkPolicy.clear(); String v7 = this.mContext.getOpPackageName(); NetworkPolicy v8 = NetworkPolicyManagerService.getNetworkPolicies(v7); NetworkPolicyManagerService.normalizePoliciesNL(v8);,0.7721526622772217
getNetworkPolicies(Ljava/lang/String;)[Landroid/net/NetworkPolicy;,setNetworkPolicies([Landroid/net/NetworkPolicy;)V,int v3 = this.mNetworkPolicy.size(); NetworkPolicy v4 = new NetworkPolicy(v3); return v4;,this.mNetworkPolicy.clear(); String v7 = this.mContext.getOpPackageName(); NetworkPolicy v8 = NetworkPolicyManagerService.getNetworkPolicies(v7); NetworkPolicyManagerService.normalizePoliciesNL(v8);,0.7656533122062683
getUidsWithPolicy(I)[I,getUidPolicy(I)I,[I v2 = new [I(0); int v3 = this.mUidPolicy.size();,"int v2 = this.mUidPolicy.get(p1, 0); return v2;",0.7757844924926758
getUidsWithPolicy(I)[I,addUidPolicy(II)V,[I v2 = new [I(0); int v3 = this.mUidPolicy.size();,"int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.put(p1, p3);",0.7541227340698242
setSubscriptionOverride(III[IJLjava/lang/String;)V,removeImeSurface()V,"Message v56 = this.mHandler.obtainMessage(16, v51); boolean v57 = this.mHandler.sendMessage(v56);",Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,0.8362504243850708
setSubscriptionOverride(III[IJLjava/lang/String;)V,setGameMode(Ljava/lang/String;II)V,"Message v56 = this.mHandler.obtainMessage(16, v51); boolean v57 = this.mHandler.sendMessage(v56);",Message v14 = this.mHandler.obtainMessage(1); Integer v15 = Integer.valueOf(v6); Message.obj = v15;,0.826108455657959
factoryReset(Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
getRestrictBackgroundByCaller()I,No similar EPs with similarity > 0.8,,,
unregisterListener(Landroid/net/INetworkPolicyListener;)V,unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,public void unregisterListener(INetworkPolicyListener p1){ boolean v4 = this.mListeners.unregister(p1); return;,boolean v7 = this.mListeners.unregister(p1); boolean v6 = v7; return v6;,0.703244149684906
unregisterListener(Landroid/net/INetworkPolicyListener;)V,registerListener(Landroid/net/INetworkPolicyListener;)V,public void unregisterListener(INetworkPolicyListener p1){ boolean v4 = this.mListeners.unregister(p1); return;,boolean v4 = this.mListeners.register(p1);,0.6524847745895386
getSubscriptionPlansOwner(I)Ljava/lang/String;,setSubscriptionPlans(I[Landroid/telephony/SubscriptionPlan;JLjava/lang/String;)V,Object v2 = this.mSubscriptionPlansOwner.get(p1); return v2;,"this.mSubscriptionPlans.put(p1, p2); this.mSubscriptionPlansOwner.put(p1, p4);",0.799209713935852
getSubscriptionPlansOwner(I)Ljava/lang/String;,setSubscriptionOverride(III[IJLjava/lang/String;)V,Object v2 = this.mSubscriptionPlansOwner.get(p1); return v2;,Object v39 = this.mSubscriptionPlans.get(p1); boolean v40 = ArrayUtils.isEmpty(v39); if (v40 != 0) { SubscriptionPlan v38 = v39[]; int v48 = v38.getDataLimitBehavior();,0.7769036293029785
setNetworkPolicies([Landroid/net/NetworkPolicy;)V,setRestrictBackground(Z)V,FileOutputStream v21 = this.mPolicyFile.startWrite(); TypedXmlSerializer v22 = Xml.resolveSerializer(v21);,FileOutputStream v38 = this.mPolicyFile.startWrite(); TypedXmlSerializer v39 = Xml.resolveSerializer(v38);,0.9881182909011841
setNetworkPolicies([Landroid/net/NetworkPolicy;)V,attachAsOriginator(Landroid/media/permission/Identity;Landroid/os/IBinder;)Lcom/android/internal/app/ISoundTriggerSession;,long v2 = Binder.clearCallingIdentity(); Binder.restoreCallingIdentity(v2);,int v3 = Binder.getCallingUid(); Identity.uid = v3; int v4 = Binder.getCallingPid(); Identity.pid = v4;,0.8090217113494873
getRestrictBackgroundStatus(I)I,isUidPresentOnDisplay(II)Z,int v2 = 3; return v2;,boolean v3 = ; boolean v2 = v3; return v2;,0.7805536985397339
getRestrictBackgroundStatus(I)I,getHibernationStatsForUser(Ljava/util/List;I)Ljava/util/Map;,int v2 = 3; return v2;,Integer v15 = Integer.valueOf(v8);,0.713753879070282
setRestrictBackground(Z)V,setNetworkPolicies([Landroid/net/NetworkPolicy;)V,FileOutputStream v38 = this.mPolicyFile.startWrite(); TypedXmlSerializer v39 = Xml.resolveSerializer(v38);,FileOutputStream v21 = this.mPolicyFile.startWrite(); TypedXmlSerializer v22 = Xml.resolveSerializer(v21);,0.9881182909011841
setRestrictBackground(Z)V,getRestrictBackground()Z,"this.mEventsBuffer.restrictBackgroundChanged(this.mRestrictBackground, this.mRestrictBackground);",return this.mRestrictBackground;,0.7393928170204163
removeUidPolicy(II)V,setUidPolicy(II)V,"int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);","int v4 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1); Message v14 = this.mHandler.obtainMessage(13, p1, p2, v13); v14.sendToTarget();",0.90189129114151
removeUidPolicy(II)V,reportSuccessfulBiometricUnlock(ZI)V,"Boolean v12 = Boolean.valueOf(); Message v13 = this.mHandler.obtainMessage(13, p1, ((~p2) & v3), v12); v13.sendToTarget();","Message v3 = this.mHandler.obtainMessage(8, p2, 0); v3.sendToTarget();",0.8743917942047119
isUidRestrictedOnMeteredNetworks(I)Z,isUidNetworkingBlocked(IZ)Z,Object v2 = this.mUidBlockedState.get(p1);,"Object v3 = this.mUidBlockedState.get(p1); String v11 = NetworkPolicyManagerService$UidBlockedState.toString(this.blockedReasons, this.allowedReasons, this.effectiveBlockedReasons); NetworkPolicyLogger$Data.type = 1; NetworkPolicyLogger$Data.ifield1 = p1; NetworkPolicyLogger$Data.ifield2 = NetworkPolicyManagerService$UidBlockedState.blockedReasons; NetworkPolicyLogger$Data.ifield3 = NetworkPolicyManagerService$UidBlockedState.allowedReasons; NetworkPolicyLogger$Data.ifield4 = NetworkPolicyManagerService$UidBlockedState.effectiveBlockedReasons;",0.7377870082855225
isUidRestrictedOnMeteredNetworks(I)Z,addUidPolicy(II)V,Object v2 = this.mUidBlockedState.get(p1);,"int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.put(p1, p3);",0.6734745502471924
setSubscriptionPlans(I[Landroid/telephony/SubscriptionPlan;JLjava/lang/String;)V,reportSuccessfulBiometricUnlock(ZI)V,"Message v86 = this.mHandler.obtainMessage(19, p1, 0, p2); boolean v87 = this.mHandler.sendMessage(v86);","Message v3 = this.mHandler.obtainMessage(8, p2, 0); v3.sendToTarget();",0.8353339433670044
setSubscriptionPlans(I[Landroid/telephony/SubscriptionPlan;JLjava/lang/String;)V,scheduleNonStrongBiometricIdleTimeout(I)V,"Message v86 = this.mHandler.obtainMessage(19, p1, 0, p2); boolean v87 = this.mHandler.sendMessage(v86);","Message v3 = this.mHandler.obtainMessage(9, p1, 0); v3.sendToTarget();",0.8142722845077515
notifyStatsProviderWarningOrLimitReached()V,removeImeSurface()V,Message v3 = this.mHandler.obtainMessage(20); v3.sendToTarget();,Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,0.9672578573226929
notifyStatsProviderWarningOrLimitReached()V,scheduleNonStrongBiometricIdleTimeout(I)V,Message v3 = this.mHandler.obtainMessage(20); v3.sendToTarget();,"Message v3 = this.mHandler.obtainMessage(9, p1, 0); v3.sendToTarget();",0.9567487239837646
addUidPolicy(II)V,getUidPolicy(I)I,"int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.put(p1, p3);","int v2 = this.mUidPolicy.get(p1, 0); return v2;",0.9060342311859131
addUidPolicy(II)V,setUidPolicy(II)V,"int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); Message v13 = this.mHandler.obtainMessage(13, p1, (p2 | v3), v12); v13.sendToTarget();","int v4 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1); Message v14 = this.mHandler.obtainMessage(13, p1, p2, v13); v14.sendToTarget();",0.8801884651184082
getUidPolicy(I)I,addUidPolicy(II)V,"int v2 = this.mUidPolicy.get(p1, 0); return v2;","int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.put(p1, p3);",0.9060342311859131
getUidPolicy(I)I,addUidPolicy(II)V,"int v2 = this.mUidPolicy.get(p1, 0); return v2;","int v3 = this.mUidPolicy.get(p1, 0); this.mUidPolicy.delete(p1); Message v13 = this.mHandler.obtainMessage(13, p1, (p2 | v3), v12); v13.sendToTarget();",0.8106454610824585
closeDevice(Landroid/os/IBinder;Landroid/os/IBinder;)V,registerListener(Landroid/os/IBinder;Landroid/media/midi/IMidiDeviceListener;)V,"Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);","Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0);",0.9736638069152832
closeDevice(Landroid/os/IBinder;Landroid/os/IBinder;)V,openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V,"Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);","MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);",0.9570119976997375
unregisterDeviceServer(Landroid/media/midi/IMidiDeviceServer;)V,getDeviceStatus(Landroid/media/midi/MidiDeviceInfo;)Landroid/media/midi/MidiDeviceStatus;,MidiDeviceStatus v11 = new MidiDeviceStatus(this.mDeviceInfo); this.mDeviceStatus = v11;,Object v1 = this.mDevicesByInfo.get(p1); MidiDeviceStatus v5 = v1.getDeviceStatus(); return v5;,0.8351675868034363
unregisterDeviceServer(Landroid/media/midi/IMidiDeviceServer;)V,registerDeviceServer(Landroid/media/midi/IMidiDeviceServer;II[Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;II)Landroid/media/midi/MidiDeviceInfo;,MidiDeviceStatus v11 = new MidiDeviceStatus(this.mDeviceInfo); this.mDeviceStatus = v11;,"this.mNextDeviceId = (this.mNextDeviceId + 1); MidiDeviceInfo v6 = new MidiDeviceInfo(p7,this.mNextDeviceId,p2,p3,p4,p5,p6,0,p8); return v2;",0.8006251454353333
getDevicesForTransport(I)[Landroid/media/midi/MidiDeviceInfo;,getDevices()[Landroid/media/midi/MidiDeviceInfo;,ArrayList v1 = new ArrayList(); Object v7 = v1.toArray(this.EMPTY_DEVICE_INFO_ARRAY); return v7;,ArrayList v2 = new ArrayList(); Collection v5 = this.mDevicesByInfo.values(); Iterator v6 = v5.iterator(); boolean v7 = v6.hasNext(); Object v8 = v2.toArray(this.EMPTY_DEVICE_INFO_ARRAY); MidiDeviceInfo v1 = v8; return v1;,0.7667969465255737
getDevicesForTransport(I)[Landroid/media/midi/MidiDeviceInfo;,getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;,ArrayList v1 = new ArrayList(); Object v7 = v1.toArray(this.EMPTY_DEVICE_INFO_ARRAY); return v7;,"HdmiDeviceInfo$Builder v26 = new HdmiDeviceInfo$Builder(2,0); HdmiDeviceInfo$Builder v28 = v26.setPhysicalAddress(v18); HdmiDeviceInfo$Builder v29 = v28.setPortId(v24); HdmiDeviceInfo$Builder v30 = v29.setVendorId(0); StringBuilder v31 = new StringBuilder(); StringBuilder v33 = v31.append(""HDMI""); StringBuilder v34 = v33.append(v24); String v35 = v34.toString(); HdmiDeviceInfo$Builder v36 = v30.setDisplayName(v35); HdmiDeviceInfo v37 = v36.build();",0.7007831931114197
unregisterListener(Landroid/os/IBinder;Landroid/media/midi/IMidiDeviceListener;)V,registerListener(Landroid/os/IBinder;Landroid/media/midi/IMidiDeviceListener;)V,"Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); IBinder v8 = p2.asBinder(); Object v9 = this.mListeners.remove(v8);","Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0);",0.8962827324867249
unregisterListener(Landroid/os/IBinder;Landroid/media/midi/IMidiDeviceListener;)V,closeDevice(Landroid/os/IBinder;Landroid/os/IBinder;)V,"Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); IBinder v8 = p2.asBinder(); Object v9 = this.mListeners.remove(v8);","Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);",0.8850826025009155
getDeviceStatus(Landroid/media/midi/MidiDeviceInfo;)Landroid/media/midi/MidiDeviceStatus;,getDevices()[Landroid/media/midi/MidiDeviceInfo;,Object v1 = this.mDevicesByInfo.get(p1); MidiDeviceStatus v5 = v1.getDeviceStatus(); return v5;,ArrayList v2 = new ArrayList(); Collection v5 = this.mDevicesByInfo.values(); Iterator v6 = v5.iterator(); boolean v7 = v6.hasNext(); Object v8 = v2.toArray(this.EMPTY_DEVICE_INFO_ARRAY); MidiDeviceInfo v1 = v8; return v1;,0.8426576852798462
getDeviceStatus(Landroid/media/midi/MidiDeviceInfo;)Landroid/media/midi/MidiDeviceStatus;,unregisterDeviceServer(Landroid/media/midi/IMidiDeviceServer;)V,Object v1 = this.mDevicesByInfo.get(p1); MidiDeviceStatus v5 = v1.getDeviceStatus(); return v5;,MidiDeviceStatus v11 = new MidiDeviceStatus(this.mDeviceInfo); this.mDeviceStatus = v11;,0.8351675868034363
setDeviceStatus(Landroid/media/midi/IMidiDeviceServer;Landroid/media/midi/MidiDeviceStatus;)V,registerDeviceServer(Landroid/media/midi/IMidiDeviceServer;II[Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;II)Landroid/media/midi/MidiDeviceInfo;,this.mDeviceStatus = p2;,p1.setDeviceInfo(v6);,0.838458776473999
setDeviceStatus(Landroid/media/midi/IMidiDeviceServer;Landroid/media/midi/MidiDeviceStatus;)V,unregisterDeviceServer(Landroid/media/midi/IMidiDeviceServer;)V,this.mDeviceStatus = p2;,MidiDeviceStatus v11 = new MidiDeviceStatus(this.mDeviceInfo); this.mDeviceStatus = v11;,0.776714563369751
registerListener(Landroid/os/IBinder;Landroid/media/midi/IMidiDeviceListener;)V,closeDevice(Landroid/os/IBinder;Landroid/os/IBinder;)V,"Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0);","Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);",0.9736638069152832
registerListener(Landroid/os/IBinder;Landroid/media/midi/IMidiDeviceListener;)V,openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V,"Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0);","MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);",0.9590201377868652
registerDeviceServer(Landroid/media/midi/IMidiDeviceServer;II[Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;II)Landroid/media/midi/MidiDeviceInfo;,openBluetoothDevice(Landroid/os/IBinder;Landroid/bluetooth/BluetoothDevice;Landroid/media/midi/IMidiDeviceOpenCallback;)V,"MidiService$Device v12 = new MidiService$Device(MidiService,p1,v6,0,v1);","MidiService$Device v10 = new MidiService$Device(p0,p2); MidiService$DeviceConnection v34 = new MidiService$DeviceConnection(this.this$0,,MidiService$Client,p3);",0.8895291090011597
registerDeviceServer(Landroid/media/midi/IMidiDeviceServer;II[Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;II)Landroid/media/midi/MidiDeviceInfo;,setDeviceStatus(Landroid/media/midi/IMidiDeviceServer;Landroid/media/midi/MidiDeviceStatus;)V,p1.setDeviceInfo(v6);,this.mDeviceStatus = p2;,0.838458776473999
getServiceDeviceInfo(Ljava/lang/String;Ljava/lang/String;)Landroid/media/midi/MidiDeviceInfo;,getDeviceStatus(Landroid/media/midi/MidiDeviceInfo;)Landroid/media/midi/MidiDeviceStatus;,Object v5 = v3.next(); MidiDeviceInfo v11 = v5.getDeviceInfo(); return v11;,Object v1 = this.mDevicesByInfo.get(p1); MidiDeviceStatus v5 = v1.getDeviceStatus(); return v5;,0.7828118205070496
getServiceDeviceInfo(Ljava/lang/String;Ljava/lang/String;)Landroid/media/midi/MidiDeviceInfo;,registerDeviceServer(Landroid/media/midi/IMidiDeviceServer;II[Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;II)Landroid/media/midi/MidiDeviceInfo;,Object v5 = v3.next(); MidiDeviceInfo v11 = v5.getDeviceInfo(); return v11;,"this.mNextDeviceId = (this.mNextDeviceId + 1); MidiDeviceInfo v6 = new MidiDeviceInfo(p7,this.mNextDeviceId,p2,p3,p4,p5,p6,0,p8); return v2;",0.769971489906311
getDevices()[Landroid/media/midi/MidiDeviceInfo;,getDeviceStatus(Landroid/media/midi/MidiDeviceInfo;)Landroid/media/midi/MidiDeviceStatus;,ArrayList v2 = new ArrayList(); Collection v5 = this.mDevicesByInfo.values(); Iterator v6 = v5.iterator(); boolean v7 = v6.hasNext(); Object v8 = v2.toArray(this.EMPTY_DEVICE_INFO_ARRAY); MidiDeviceInfo v1 = v8; return v1;,Object v1 = this.mDevicesByInfo.get(p1); MidiDeviceStatus v5 = v1.getDeviceStatus(); return v5;,0.8426576852798462
getDevices()[Landroid/media/midi/MidiDeviceInfo;,registerDeviceServer(Landroid/media/midi/IMidiDeviceServer;II[Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;II)Landroid/media/midi/MidiDeviceInfo;,ArrayList v2 = new ArrayList(); Collection v5 = this.mDevicesByInfo.values(); Iterator v6 = v5.iterator(); boolean v7 = v6.hasNext(); Object v8 = v2.toArray(this.EMPTY_DEVICE_INFO_ARRAY); MidiDeviceInfo v1 = v8; return v1;,"this.mNextDeviceId = (this.mNextDeviceId + 1); MidiDeviceInfo v6 = new MidiDeviceInfo(p7,this.mNextDeviceId,p2,p3,p4,p5,p6,0,p8); return v2;",0.8257999420166016
openBluetoothDevice(Landroid/os/IBinder;Landroid/bluetooth/BluetoothDevice;Landroid/media/midi/IMidiDeviceOpenCallback;)V,openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V,"MidiService$Client v4 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v4, 0); Object v7 = this.mClients.put(p1, v4);","MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);",0.991223156452179
openBluetoothDevice(Landroid/os/IBinder;Landroid/bluetooth/BluetoothDevice;Landroid/media/midi/IMidiDeviceOpenCallback;)V,closeDevice(Landroid/os/IBinder;Landroid/os/IBinder;)V,"MidiService$Client v4 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v4, 0); Object v7 = this.mClients.put(p1, v4);","Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);",0.9525349736213684
openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V,openBluetoothDevice(Landroid/os/IBinder;Landroid/bluetooth/BluetoothDevice;Landroid/media/midi/IMidiDeviceOpenCallback;)V,"MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);","MidiService$Client v4 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v4, 0); Object v7 = this.mClients.put(p1, v4);",0.991223156452179
openDevice(Landroid/os/IBinder;Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/IMidiDeviceOpenCallback;)V,registerListener(Landroid/os/IBinder;Landroid/media/midi/IMidiDeviceListener;)V,"MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0); Object v6 = this.mClients.put(p1, v3);","Object v2 = this.mClients.get(p1); MidiService$Client v3 = new MidiService$Client(MidiService,p1); p1.linkToDeath(v3, 0);",0.9590201377868652
releaseAllLeases(Ljava/lang/String;)V,deleteBlob(J)V,"BlobStoreManagerService$$ExternalSyntheticLambda12 v15 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p3,p2); this.mBlobsMap.forEach(v15);","Set v4 = this.mBlobsMap.entrySet(); BlobStoreManagerService$$ExternalSyntheticLambda8 v5 = new BlobStoreManagerService$$ExternalSyntheticLambda8(BlobStoreManagerService,p2); boolean v7 = v4.removeIf(v5);",0.8950232267379761
releaseAllLeases(Ljava/lang/String;)V,getLeasedBlobs(Ljava/lang/String;)Ljava/util/List;,"BlobStoreManagerService$$ExternalSyntheticLambda12 v15 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p3,p2); this.mBlobsMap.forEach(v15);","ArrayList v9 = new ArrayList(); BlobStoreManagerService$$ExternalSyntheticLambda13 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda13(p3,p2,v9); BlobStoreManagerService.forEachBlobLocked(v11); List v8 = v9; List v7 = v8; return v7;",0.8488451838493347
waitForIdle(Landroid/os/RemoteCallback;)V,unregisterSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"BlobStoreManagerService$Stub$$ExternalSyntheticLambda0 v11 = new BlobStoreManagerService$Stub$$ExternalSyntheticLambda0(p0,p1); boolean v13 = v10.post(v11);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0(p1,p2); v1.accept(v19);",0.8350940942764282
waitForIdle(Landroid/os/RemoteCallback;)V,registerSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,"BlobStoreManagerService$Stub$$ExternalSyntheticLambda0 v11 = new BlobStoreManagerService$Stub$$ExternalSyntheticLambda0(p0,p1); boolean v13 = v10.post(v11);","SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda1(p1,p2); v1.accept(v19);",0.8240183591842651
openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;,getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;,"Object v26 = this.mBlobsMap.get(p2); if (v26 == 0) { boolean v27 = v26.isAccessAllowedForCaller(p4, p3); if (v27 != 0) { long v28 = v26.getBlobId(); long v29 = v26.getSize(); FrameworkStatsLog.write(300, p3, v28, v29, 1); ParcelFileDescriptor v31 = v26.openForRead(p4, p3); ParcelFileDescriptor v25 = v31; ParcelFileDescriptor v24 = v25; return v24;","Object v26 = this.mBlobsMap.get(p2); if (v26 == 0) {     boolean v27 = v26.isAccessAllowedForCaller(p4, p3);     if (v27 == 0) {         LeaseInfo v28 = v26.getLeaseInfo(p4, p3);         LeaseInfo v25 = v28;         LeaseInfo v24 = v25;         return v24;",0.9044580459594727
openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;,acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V,"Object v26 = this.mBlobsMap.get(p2); if (v26 == 0) { boolean v27 = v26.isAccessAllowedForCaller(p4, p3); if (v27 != 0) { long v28 = v26.getBlobId(); long v29 = v26.getSize(); FrameworkStatsLog.write(300, p3, v28, v29, 1); ParcelFileDescriptor v31 = v26.openForRead(p4, p3); ParcelFileDescriptor v25 = v31; ParcelFileDescriptor v24 = v25; return v24;","Object v41 = this.mBlobsMap.get(p2); if (v41 == 0) { boolean v42 = v41.isAccessAllowedForCaller(p7, p6); long v43 = v41.getSize(); long v44 = BlobStoreManagerService.getRemainingLeaseQuotaBytesInternal(p6, p7);",0.8080915212631226
openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession;,createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J,"LongSparseArray v16 = BlobStoreManagerService.getUserSessionsLocked(v15); Object v17 = v16.get(p2); boolean v18 = v17.hasAccess(p3, p4); boolean v19 = v17.isFinalized(); v17.open(); BlobStoreSession v14 = v17; BlobStoreSession v13 = v14; return v13;","long v28 = BlobStoreManagerService.generateNextSessionIdLocked(); BlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p2,p3,p4,this.mSessionStateChangeListener); int v31 = UserHandle.getUserId(p3); BlobStoreManagerService.addSessionForUserLocked(v29, v31); if (BlobStoreConfig.LOGV == 0) {     BlobStoreManagerService.writeBlobSessionsAsync(); long v25 = v28; long v24 = v25; return v24;",0.7769609689712524
openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession;,finishSession(I)V,"LongSparseArray v16 = BlobStoreManagerService.getUserSessionsLocked(v15); Object v17 = v16.get(p2); boolean v18 = v17.hasAccess(p3, p4); boolean v19 = v17.isFinalized(); v17.open(); BlobStoreSession v14 = v17; BlobStoreSession v13 = v14; return v13;",AbstractPerUserSystemService v6 = this.this$0.getServiceForUserLocked(v3); Object v9 = this.mSessions.get(p1);,0.7266759872436523
queryBlobsForUser(I)Ljava/util/List;,getLeasedBlobs(Ljava/lang/String;)Ljava/util/List;,"ArrayList v7 = new ArrayList(); ArrayMap v9 = new ArrayMap(); BlobStoreManagerService$$ExternalSyntheticLambda9 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda9(BlobStoreManagerService,v9,p2); BlobStoreManagerService$$ExternalSyntheticLambda10 v13 = new BlobStoreManagerService$$ExternalSyntheticLambda10(p2,v11,v7); BlobStoreManagerService.forEachBlobLocked(v13); List v6 = v7; List v5 = v6; return v5;","ArrayList v9 = new ArrayList(); BlobStoreManagerService$$ExternalSyntheticLambda13 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda13(p3,p2,v9); BlobStoreManagerService.forEachBlobLocked(v11); List v8 = v9; List v7 = v8; return v7;",0.9632422924041748
queryBlobsForUser(I)Ljava/util/List;,getLeasedBlobs(Ljava/lang/String;)Ljava/util/List;,"ArrayList v8 = new ArrayList(); ArrayMap v10 = new ArrayMap(); BlobStoreManagerService$$ExternalSyntheticLambda9 v12 = new BlobStoreManagerService$$ExternalSyntheticLambda9(BlobStoreManagerService,v10,p2); BlobStoreManagerService$$ExternalSyntheticLambda10 v14 = new BlobStoreManagerService$$ExternalSyntheticLambda10(p2,v12,v8); BlobStoreManagerService.forEachBlobLocked(v14); List v7 = v8; List v6 = v7; return v6;","ArrayList v9 = new ArrayList(); BlobStoreManagerService$$ExternalSyntheticLambda13 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda13(p3,p2,v9); BlobStoreManagerService.forEachBlobLocked(v11); List v8 = v9; List v7 = v8; return v7;",0.9605683088302612
abandonSession(JLjava/lang/String;)V,openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession;,"BlobStoreSession v15 = BlobStoreManagerService.openSessionInternal(p2, p3, p4); v15.abandon();","LongSparseArray v16 = BlobStoreManagerService.getUserSessionsLocked(v15); Object v17 = v16.get(p2); boolean v18 = v17.hasAccess(p3, p4); boolean v19 = v17.isFinalized(); v17.open(); BlobStoreSession v14 = v17; BlobStoreSession v13 = v14; return v13;",0.7221829891204834
abandonSession(JLjava/lang/String;)V,createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J,"BlobStoreSession v15 = BlobStoreManagerService.openSessionInternal(p2, p3, p4); v15.abandon();","long v28 = BlobStoreManagerService.generateNextSessionIdLocked(); BlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p2,p3,p4,this.mSessionStateChangeListener); int v31 = UserHandle.getUserId(p3); BlobStoreManagerService.addSessionForUserLocked(v29, v31); if (BlobStoreConfig.LOGV == 0) {     BlobStoreManagerService.writeBlobSessionsAsync(); long v25 = v28; long v24 = v25; return v24;",0.7076511383056641
releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V,acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V,"Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null""); v26.removeLeasee(p4, p3);","v41.addOrReplaceLeasee(p7, p6, p3, p4, p5); FrameworkStatsLog.write(299, p6, v45, v46, 1); BlobStoreManagerService.writeBlobsInfoAsync();",0.6988826990127563
releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V,removeData(Landroid/view/contentcapture/DataRemovalRequest;)V,"Object v12 = Objects.requireNonNull(p2, ""packageName must not be null""); int v13 = Binder.getCallingUid(); BlobStoreManagerService$$ExternalSyntheticLambda7 v40 = new BlobStoreManagerService$$ExternalSyntheticLambda7(BlobStoreManagerService,p2,v26); boolean v43 = this.mHandler.postDelayed(v40, v42);",Object v10 = Objects.requireNonNull(p1); RemoteContentCaptureService$$ExternalSyntheticLambda2 v24 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1); RemoteContentCaptureService.scheduleAsyncRequest(v24);,0.6919047832489014
getLeasedBlobs(Ljava/lang/String;)Ljava/util/List;,queryBlobsForUser(I)Ljava/util/List;,"ArrayList v9 = new ArrayList(); BlobStoreManagerService$$ExternalSyntheticLambda13 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda13(p3,p2,v9); BlobStoreManagerService.forEachBlobLocked(v11); List v8 = v9; List v7 = v8; return v7;","ArrayList v7 = new ArrayList(); ArrayMap v9 = new ArrayMap(); BlobStoreManagerService$$ExternalSyntheticLambda9 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda9(BlobStoreManagerService,v9,p2); BlobStoreManagerService$$ExternalSyntheticLambda10 v13 = new BlobStoreManagerService$$ExternalSyntheticLambda10(p2,v11,v7); BlobStoreManagerService.forEachBlobLocked(v13); List v6 = v7; List v5 = v6; return v5;",0.9632422924041748
getLeasedBlobs(Ljava/lang/String;)Ljava/util/List;,queryBlobsForUser(I)Ljava/util/List;,"ArrayList v9 = new ArrayList(); BlobStoreManagerService$$ExternalSyntheticLambda13 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda13(p3,p2,v9); BlobStoreManagerService.forEachBlobLocked(v11); List v8 = v9; List v7 = v8; return v7;","ArrayList v8 = new ArrayList(); ArrayMap v10 = new ArrayMap(); BlobStoreManagerService$$ExternalSyntheticLambda9 v12 = new BlobStoreManagerService$$ExternalSyntheticLambda9(BlobStoreManagerService,v10,p2); BlobStoreManagerService$$ExternalSyntheticLambda10 v14 = new BlobStoreManagerService$$ExternalSyntheticLambda10(p2,v12,v8); BlobStoreManagerService.forEachBlobLocked(v14); List v7 = v8; List v6 = v7; return v6;",0.9605683088302612
createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J,openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession;,"long v28 = BlobStoreManagerService.generateNextSessionIdLocked(); BlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p2,p3,p4,this.mSessionStateChangeListener); int v31 = UserHandle.getUserId(p3); BlobStoreManagerService.addSessionForUserLocked(v29, v31); if (BlobStoreConfig.LOGV == 0) {     BlobStoreManagerService.writeBlobSessionsAsync(); long v25 = v28; long v24 = v25; return v24;","LongSparseArray v16 = BlobStoreManagerService.getUserSessionsLocked(v15); Object v17 = v16.get(p2); boolean v18 = v17.hasAccess(p3, p4); boolean v19 = v17.isFinalized(); v17.open(); BlobStoreSession v14 = v17; BlobStoreSession v13 = v14; return v13;",0.7769609689712524
createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J,abandonSession(JLjava/lang/String;)V,"long v28 = BlobStoreManagerService.generateNextSessionIdLocked(); BlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p2,p3,p4,this.mSessionStateChangeListener); int v31 = UserHandle.getUserId(p3); BlobStoreManagerService.addSessionForUserLocked(v29, v31); if (BlobStoreConfig.LOGV == 0) {     BlobStoreManagerService.writeBlobSessionsAsync(); long v25 = v28; long v24 = v25; return v24;","BlobStoreSession v15 = BlobStoreManagerService.openSessionInternal(p2, p3, p4); v15.abandon();",0.7076511383056641
acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V,getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;,"Object v41 = this.mBlobsMap.get(p2); if (v41 == 0) { boolean v42 = v41.isAccessAllowedForCaller(p7, p6); long v43 = v41.getSize(); long v44 = BlobStoreManagerService.getRemainingLeaseQuotaBytesInternal(p6, p7);","Object v26 = this.mBlobsMap.get(p2); if (v26 == 0) {     boolean v27 = v26.isAccessAllowedForCaller(p4, p3);     if (v27 == 0) {         LeaseInfo v28 = v26.getLeaseInfo(p4, p3);         LeaseInfo v25 = v28;         LeaseInfo v24 = v25;         return v24;",0.8687344789505005
acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V,releaseAllLeases(Ljava/lang/String;)V,"boolean v12 = ResourceId.isValid(p2); if (v12 != 0) { int v26 = Binder.getCallingUid(); int v35 = UserHandle.getUserId(p2); boolean v36 = this.mPackageManagerInternal.isInstantApp(p3, v35);","int v11 = UserHandle.getUserId(p2); boolean v12 = this.mPackageManagerInternal.isInstantApp(p3, v11);",0.825467586517334
getRemainingLeaseQuotaBytes(Ljava/lang/String;)J,getDataBlockSize()I,"long v8 = BlobStoreConfig.getAppDataBytesLimit(); long v9 = BlobStoreManagerService.getTotalUsageBytesLocked(p2, p3); if (((v8 - v9) < 0) <= 0) { long v7 = ; long v6 = v7; return v6;","int v15 = PersistentDataBlockService.-$$Nest$mgetTotalDataSizeLocked(this.this$0, v7); return v15;",0.7283201813697815
getRemainingLeaseQuotaBytes(Ljava/lang/String;)J,acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V,"long v8 = BlobStoreConfig.getAppDataBytesLimit(); long v9 = BlobStoreManagerService.getTotalUsageBytesLocked(p2, p3); if (((v8 - v9) < 0) <= 0) { long v7 = ; long v6 = v7; return v6;","Object v41 = this.mBlobsMap.get(p2); if (v41 == 0) { boolean v42 = v41.isAccessAllowedForCaller(p7, p6); long v43 = v41.getSize(); long v44 = BlobStoreManagerService.getRemainingLeaseQuotaBytesInternal(p6, p7);",0.7040026187896729
deleteBlob(J)V,releaseAllLeases(Ljava/lang/String;)V,"Set v4 = this.mBlobsMap.entrySet(); BlobStoreManagerService$$ExternalSyntheticLambda8 v5 = new BlobStoreManagerService$$ExternalSyntheticLambda8(BlobStoreManagerService,p2); boolean v7 = v4.removeIf(v5);","BlobStoreManagerService$$ExternalSyntheticLambda12 v15 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p3,p2); this.mBlobsMap.forEach(v15);",0.8950232267379761
deleteBlob(J)V,queryBlobsForUser(I)Ljava/util/List;,"Set v4 = this.mBlobsMap.entrySet(); BlobStoreManagerService$$ExternalSyntheticLambda8 v5 = new BlobStoreManagerService$$ExternalSyntheticLambda8(BlobStoreManagerService,p2); boolean v7 = v4.removeIf(v5);","ArrayList v7 = new ArrayList(); ArrayMap v9 = new ArrayMap(); BlobStoreManagerService$$ExternalSyntheticLambda9 v11 = new BlobStoreManagerService$$ExternalSyntheticLambda9(BlobStoreManagerService,v9,p2); BlobStoreManagerService$$ExternalSyntheticLambda10 v13 = new BlobStoreManagerService$$ExternalSyntheticLambda10(p2,v11,v7); BlobStoreManagerService.forEachBlobLocked(v13); List v6 = v7; List v5 = v6; return v5;",0.7894003391265869
getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;,openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;,"Object v26 = this.mBlobsMap.get(p2); if (v26 == 0) {     boolean v27 = v26.isAccessAllowedForCaller(p4, p3);     if (v27 == 0) {         LeaseInfo v28 = v26.getLeaseInfo(p4, p3);         LeaseInfo v25 = v28;         LeaseInfo v24 = v25;         return v24;","Object v26 = this.mBlobsMap.get(p2); if (v26 == 0) { boolean v27 = v26.isAccessAllowedForCaller(p4, p3); if (v27 != 0) { long v28 = v26.getBlobId(); long v29 = v26.getSize(); FrameworkStatsLog.write(300, p3, v28, v29, 1); ParcelFileDescriptor v31 = v26.openForRead(p4, p3); ParcelFileDescriptor v25 = v31; ParcelFileDescriptor v24 = v25; return v24;",0.9044580459594727
getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;,acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V,"Object v26 = this.mBlobsMap.get(p2); if (v26 == 0) {     boolean v27 = v26.isAccessAllowedForCaller(p4, p3);     if (v27 == 0) {         LeaseInfo v28 = v26.getLeaseInfo(p4, p3);         LeaseInfo v25 = v28;         LeaseInfo v24 = v25;         return v24;","Object v41 = this.mBlobsMap.get(p2); if (v41 == 0) { boolean v42 = v41.isAccessAllowedForCaller(p7, p6); long v43 = v41.getSize(); long v44 = BlobStoreManagerService.getRemainingLeaseQuotaBytesInternal(p6, p7);",0.8687344789505005
checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"LockSettingsService.setUserPasswordMetrics(p1, p2); byte[] v47 = p1.getCredential(); LockSettingsService.unlockKeystore(v47, p2); byte[] v55 = LockSettingsService.secretFromCredential(p1); LockSettingsService.unlockUser(p2, v55);","LockSettingsService.setUserPasswordMetrics(p1, p2); byte[] v49 = p1.getCredential(); LockSettingsService.unlockKeystore(v49, p2); byte[] v57 = LockSettingsService.secretFromCredential(p1); LockSettingsService.unlockUser(p2, v57);",0.996372640132904
checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,tryUnlockWithCachedUnifiedChallenge(I)Z,"IGateKeeperService v38 = LockSettingsService.getGateKeeperService(); byte[] v39 = p1.getCredential(); GateKeeperResponse v40 = v38.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v39);","IGateKeeperService v53 = LockSettingsService.getGateKeeperService(); byte[] v54 = p1.getCredential(); GateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);",0.9933100938796997
getLong(Ljava/lang/String;JI)J,getBoolean(Ljava/lang/String;ZI)Z,"boolean v4 = ""legacy_lock_pattern_enabled"".equals(p1); String v5 = LockSettingsStorage.readKeyValue(, 0, p3); long v7 = Long.parseLong(v3);","boolean v2 = ""lock_pattern_autolock"".equals(p1); if (p3 != -9999) { LockSettingsStorage$PersistentData v5 = this.mStorage.readPersistentDataBlock(); long v7 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v9 = SyntheticPasswordManager.loadState(""pwd"", v6, p1);",0.817334771156311
getLong(Ljava/lang/String;JI)J,getCredentialType(I)I,"boolean v4 = ""legacy_lock_pattern_enabled"".equals(p1); String v5 = LockSettingsStorage.readKeyValue(, 0, p3); long v7 = Long.parseLong(v3);","long v6 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v8 = SyntheticPasswordManager.loadState(""pwd"", v5, p1); long v16 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1); int v15 = v16; boolean v18 = LockPatternUtils.isQualityAlphabeticPassword(v15); boolean v19 = LockPatternUtils.isQualityNumericPin(v15); int v17 = 3; int v2 = v17; return v2;",0.7706642150878906
setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"SyntheticPasswordManager$AuthenticationToken v93 = this.mSpManager.newSyntheticPasswordAndSid(v92, LockSettingsStorage$CredentialHash.hash, , p3); IGateKeeperService v94 = LockSettingsService.getGateKeeperService(); long v95 = this.mSpManager.createPasswordBasedSyntheticPassword(v94, , v93, p3);","SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3); byte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword(); this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);",0.8709307909011841
setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z,getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,"byte[] v65 = this.mStorage.readChildProfileLock(p3); Key v73 = this.mJavaKeyStore.getKey(v72, 0); Cipher v74 = Cipher.getInstance(""AES/GCM/NoPadding"");","byte[] v11 = LockSettingsStorage.readFile(v10); String v10 = LockSettingsStorage.getChildProfileLockFile(p1); Key v19 = this.mJavaKeyStore.getKey(v18, 0); Cipher v20 = Cipher.getInstance(""AES/GCM/NoPadding""); byte[] v24 = v20.doFinal(v13);",0.8634452819824219
generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;,"PlatformDecryptionKey v8 = PlatformKeyManager.getDecryptKeyInternal(v5); PlatformEncryptionKey v9 = PlatformKeyManager.getEncryptKeyInternal(v5); PlatformEncryptionKey v15 = PlatformKeyManager.getEncryptKeyInternal(v5); WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);","PlatformDecryptionKey v9 = PlatformKeyManager.getDecryptKeyInternal(v6); PlatformEncryptionKey v10 = PlatformKeyManager.getEncryptKeyInternal(v6); String v1 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);",0.8884230852127075
generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;,"SecretKey v18 = this.mKeyGenerator.generateKey(); WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2); long v20 = this.mDatabase.insertKey(v5, v4, p1, v19);","SecretKeySpec v12 = new SecretKeySpec(p2,""AES""); WrappedKey v14 = WrappedKey.fromSecretKey(v7, v12, p3); long v15 = this.mDatabase.insertKey(v6, v5, p1, v14); this.mKeyStore.setEntry(v24, v25, v35);",0.8455150127410889
getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;,getCredentialType(I)I,"boolean v5 = this.mCache.hasKeyValue(, p3); int v6 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache); SQLiteDatabase v7 = this.mOpenHelper.getReadableDatabase(); Cursor v10 = v7.query(""locksettings"", this.COLUMNS_FOR_QUERY, ""user=? AND name=?"", new String[]{""android.lockscreen.password_type""}, 0, 0, 0); String v12 = v10.getString(0); this.mCache.putKeyValueIfUnchanged(, , p3, v6); if ( != this.DEFAULT) { String v4 = ; String v2 = v4; return v2;","long v6 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v8 = SyntheticPasswordManager.loadState(""pwd"", v5, p1); long v16 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1); int v15 = v16; boolean v18 = LockPatternUtils.isQualityAlphabeticPassword(v15); boolean v19 = LockPatternUtils.isQualityNumericPin(v15); int v17 = 3; int v2 = v17; return v2;",0.7833727598190308
getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;,getBoolean(Ljava/lang/String;ZI)Z,"boolean v5 = this.mCache.hasKeyValue(, p3); int v6 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache); SQLiteDatabase v7 = this.mOpenHelper.getReadableDatabase(); Cursor v10 = v7.query(""locksettings"", this.COLUMNS_FOR_QUERY, ""user=? AND name=?"", new String[]{""android.lockscreen.password_type""}, 0, 0, 0); String v12 = v10.getString(0); this.mCache.putKeyValueIfUnchanged(, , p3, v6); if ( != this.DEFAULT) { String v4 = ; String v2 = v4; return v2;","boolean v2 = ""lock_pattern_autolock"".equals(p1); if (p3 != -9999) { LockSettingsStorage$PersistentData v5 = this.mStorage.readPersistentDataBlock(); long v7 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v9 = SyntheticPasswordManager.loadState(""pwd"", v6, p1);",0.7748932838439941
registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,registerListener(Landroid/net/INetworkPolicyListener;)V,boolean v7 = this.mListeners.register(p1); return v6;,boolean v4 = this.mListeners.register(p1);,0.9575901031494141
registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,boolean v7 = this.mListeners.register(p1); return v6;,boolean v7 = this.mListeners.unregister(p1); boolean v6 = v7; return v6;,0.9382041096687317
removeGatekeeperPasswordHandle(J)V,tryUnlockWithCachedUnifiedChallenge(I)Z,this.mGatekeeperPasswords.remove(p1);,"Object v2 = this.mEncryptedPasswords.get(p1); Key v9 = this.mKeyStore.getKey(v3, 0); byte[] v10 = Arrays.copyOf(v2, 12); byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);",0.6563742160797119
removeGatekeeperPasswordHandle(J)V,verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;,this.mGatekeeperPasswords.remove(p1);,"Object v2 = this.mGatekeeperPasswords.get(p1); IGateKeeperService v3 = this.mGateKeeperService; byte[] v15 = SyntheticPasswordManager.loadState(""handle"", 0, p4); GateKeeperResponse v16 = v3.verifyChallenge(p3, p2, v14, v2); VerifyCredentialResponse v23 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0); return v29;",0.6561630964279175
setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V,setSubscriptionPlans(I[Landroid/telephony/SubscriptionPlan;JLjava/lang/String;)V,"this.mAgentIntents.put(v3, p1); RecoverySnapshotListenersStorage.tryToSendIntent(v3, p1);","this.mSubscriptionPlans.put(p1, p2); this.mSubscriptionPlansOwner.put(p1, p4);",0.6268749833106995
setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V,setSubscriptionPlans(I[Landroid/telephony/SubscriptionPlan;JLjava/lang/String;)V,"this.mAgentIntents.put(v3, p1); RecoverySnapshotListenersStorage.tryToSendIntent(v3, p1);","Intent v81 = new Intent(""android.telephony.action.SUBSCRIPTION_PLANS_CHANGED""); Intent v83 = v81.addFlags(1073741824); Intent v84 = v81.putExtra(""android.telephony.extra.SUBSCRIPTION_INDEX"", p1); this.mContext.sendBroadcast(v81, ""android.permission.MANAGE_SUBSCRIPTION_PLANS"");",0.6184007525444031
startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B,recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;,"Object v7 = Objects.requireNonNull(p3, ""verifierCertPath is null""); X509Certificate v16 = TrustedRootCertificates.getTestOnlyInsecureCertificate(); CertUtils.validateCertPath(0, v13, v11); PublicKey v21 = v20.getPublicKey(); byte[] v22 = v21.getEncoded(); RecoverySessionStorage$Entry v32 = new RecoverySessionStorage$Entry(p1,v31,v29,p4); this.mRecoverySessionStorage.add(v25, v32); byte[] v43 = KeySyncUtils.encryptRecoveryClaim(v27, p4, p5, v42, v29); return v43;","byte[] v15 = KeySyncUtils.decryptRecoveryClaimResponse(v13, v14, p2); byte[] v17 = KeySyncUtils.decryptRecoveryKey(v16, v15); HashMap v19 = new HashMap(); Map v18 = v19;",0.7691601514816284
startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B,tryUnlockWithCachedUnifiedChallenge(I)Z,"Object v7 = Objects.requireNonNull(p3, ""verifierCertPath is null""); X509Certificate v16 = TrustedRootCertificates.getTestOnlyInsecureCertificate(); CertUtils.validateCertPath(0, v13, v11); PublicKey v21 = v20.getPublicKey(); byte[] v22 = v21.getEncoded(); RecoverySessionStorage$Entry v32 = new RecoverySessionStorage$Entry(p1,v31,v29,p4); this.mRecoverySessionStorage.add(v25, v32); byte[] v43 = KeySyncUtils.encryptRecoveryClaim(v27, p4, p5, v42, v29); return v43;","VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2); int v41 = v40.getResponseCode(); LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);",0.6821780204772949
addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;,"LockSettingsService$GateKeeperDiedRecipient v18 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0); v17.linkToDeath(v18, 0); IGateKeeperService v22 = IGateKeeperService$Stub.asInterface(v17);","LockSettingsService$GateKeeperDiedRecipient v5 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0); v4.linkToDeath(v5, 0);",0.9493652582168579
addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,removeWeakEscrowToken(JI)Z,"Integer v83 = Integer.valueOf(p3); Object v84 = this.tokenMap.get(v83); Long v85 = Long.valueOf(v69); Object v86 = v84.put(v85, v76); long v68 = v69;",Integer v10 = Integer.valueOf(p2); Object v13 = this.tokenMap.get(v12); Long v14 = Long.valueOf(p1); Object v15 = v13.remove(v14);,0.8659842014312744
hasPendingEscrowToken(I)Z,removeWeakEscrowToken(JI)Z,Integer v3 = Integer.valueOf(p1); boolean v4 = this.tokenMap.containsKey(v3); ArraySet v5 = new ArraySet(v8); Integer v6 = Integer.valueOf(p1); Object v7 = this.tokenMap.get(v6);,Integer v10 = Integer.valueOf(p2); Object v13 = this.tokenMap.get(v12); Long v14 = Long.valueOf(p1); Object v15 = v13.remove(v14);,0.9095367789268494
hasPendingEscrowToken(I)Z,addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,Integer v3 = Integer.valueOf(p1); boolean v4 = this.tokenMap.containsKey(v3); ArraySet v5 = new ArraySet(v8); Integer v6 = Integer.valueOf(p1); Object v7 = this.tokenMap.get(v6);,"Integer v83 = Integer.valueOf(p3); Object v84 = this.tokenMap.get(v83); Long v85 = Long.valueOf(v69); Object v86 = v84.put(v85, v76); long v68 = v69;",0.8559879064559937
isWeakEscrowTokenValid(J[BI)Z,systemReady()V,IGateKeeperService$Stub$Proxy v21 = new IGateKeeperService$Stub$Proxy(v14); IGateKeeperService v19 = v21; this.mGateKeeperService = v19;,IGateKeeperService$Stub$Proxy v18 = new IGateKeeperService$Stub$Proxy(v11); IGateKeeperService v16 = v18; this.mGateKeeperService = v16; IGateKeeperService v10 = v16;,0.9845106601715088
isWeakEscrowTokenValid(J[BI)Z,tryUnlockWithCachedUnifiedChallenge(I)Z,"VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0); int v31 = v30.getResponseCode();","VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2); int v41 = v40.getResponseCode(); LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);",0.8712068200111389
getStrongAuthForUser(I)I,userPresent(I)V,"int v4 = this.mStrongAuthRequiredForUser.get(p1, this.mDefaultStrongAuthFlags); int v3 = v4; int v2 = v3; return v2;","LockSettingsStrongAuth.requireStrongAuth(0, p1);",0.6703147292137146
getStrongAuthForUser(I)I,isHibernatingForUser(Ljava/lang/String;I)Z,"int v4 = this.mStrongAuthRequiredForUser.get(p1, this.mDefaultStrongAuthFlags); int v3 = v4; int v2 = v3; return v2;","int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, ""isHibernatingForUser"", 0); boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9); boolean v15 = this.mUserStates.contains(v9); Object v19 = this.mUserStates.get(v9); Object v20 = v19.get(p1); boolean v1 = UserLevelState.hibernated; return v1;",0.6065439581871033
hasSecureLockScreen()Z,systemReady()V,return this.mHasSecureLockScreen;,"PackageManager v7 = this.mContext.getPackageManager(); boolean v8 = v7.hasSystemFeature(""android.software.secure_lock_screen""); this.mHasSecureLockScreen = v8;",0.8062154650688171
hasSecureLockScreen()Z,hideAuthenticationDialog(J)V,return this.mHasSecureLockScreen;,if (this.mBar == 0) { this.mBar.hideAuthenticationDialog(p1);,0.6216830015182495
initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V,startSession(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/content/ComponentName;IILcom/android/internal/os/IResultReceiver;)V,int v23 = UserHandle.getCallingUserId(); int v24 = Binder.getCallingUid();,"int v20 = Binder.getCallingUid(); int v25 = v23.getPackageUidAsUser(v21, v24); int v33 = Binder.getCallingUid();",0.90987229347229
initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V,getAuthToken(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZZLandroid/os/Bundle;)V,int v23 = UserHandle.getCallingUserId(); int v24 = Binder.getCallingUid();,int v19 = Binder.getCallingPid(); StringBuilder v20 = v3.append(v19);,0.8664305210113525
getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z,"byte[] v11 = LockSettingsStorage.readFile(v10); String v10 = LockSettingsStorage.getChildProfileLockFile(p1); Key v19 = this.mJavaKeyStore.getKey(v18, 0); Cipher v20 = Cipher.getInstance(""AES/GCM/NoPadding""); byte[] v24 = v20.doFinal(v13);","byte[] v65 = this.mStorage.readChildProfileLock(p3); Key v73 = this.mJavaKeyStore.getKey(v72, 0); Cipher v74 = Cipher.getInstance(""AES/GCM/NoPadding"");",0.8634452819824219
getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"SyntheticPasswordManager$AuthenticationResult v76 = new SyntheticPasswordManager$AuthenticationResult(); byte[] v79 = this.mStorage.readSyntheticPasswordState(p4, p2, ""pwd""); v83.getInt(); v87 = v83.get(); v88 = v83.get(); v89 = v83.get();","SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3); byte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword(); this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);",0.849744975566864
requireStrongAuth(II)V,showInputMethodPickerFromSystem(Lcom/android/internal/view/IInputMethodClient;II)V,"Message v3 = this.mHandler.obtainMessage(1, p1, p2); v3.sendToTarget();","Message v2 = this.mHandler.obtainMessage(1, p2, p3); v2.sendToTarget();",0.9864439368247986
requireStrongAuth(II)V,registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,"Message v3 = this.mHandler.obtainMessage(1, p1, p2); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(2, p1); v3.sendToTarget();",0.9846469759941101
resetKeyStore(I)V,notifyResourceGranted(II)V,"List v6 = this.mUserManager.getProfiles(p1); UserInfo v10 = this.mUserManager.getUserInfo(p1); IBinder v14 = ServiceManager.checkService(""android.security.maintenance""); IKeystoreMaintenance v15 = IKeystoreMaintenance$Stub.asInterface(v14); IKeystoreMaintenance v13 = v15; v13.clearNamespace(2, 102);",Object v17 = v16.getSystemService(UserManage.class); List v18 = v17.getEnabledProfiles();,0.6946941614151001
resetKeyStore(I)V,startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V,"List v6 = this.mUserManager.getProfiles(p1); UserInfo v10 = this.mUserManager.getUserInfo(p1); IBinder v14 = ServiceManager.checkService(""android.security.maintenance""); IKeystoreMaintenance v15 = IKeystoreMaintenance$Stub.asInterface(v14); IKeystoreMaintenance v13 = v15; v13.clearNamespace(2, 102);","UserManager v33 = AccountManagerService.getUserManager(); Bundle v36 = v33.getUserRestrictions(v34); boolean v37 = v36.getBoolean(""no_modify_accounts"");",0.6686994433403015
removeCachedUnifiedChallenge(I)V,setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V,"StringBuilder v3 = new StringBuilder(); StringBuilder v5 = v3.append(""com.android.server.locksettings.unified_profile_cache_v2_""); StringBuilder v6 = v3.append(p1); String v7 = v3.toString(); String v2 = v7; boolean v14 = this.mKeyStore.containsAlias(v2); this.mKeyStore.deleteEntry(v2); Object v19 = this.mEncryptedPasswords.get(p1); Arrays.fill(v19, 0); this.mEncryptedPasswords.remove(p1);","StringBuilder v30 = new StringBuilder(); StringBuilder v32 = v30.append(""profile_key_name_decrypt_""); StringBuilder v33 = v30.append(p1); String v34 = v30.toString(); this.mJavaKeyStore.deleteEntry(v34);",0.8262602686882019
removeCachedUnifiedChallenge(I)V,setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V,"StringBuilder v3 = new StringBuilder(); StringBuilder v5 = v3.append(""com.android.server.locksettings.unified_profile_cache_v2_""); StringBuilder v6 = v3.append(p1); String v7 = v3.toString(); String v2 = v7; boolean v14 = this.mKeyStore.containsAlias(v2); this.mKeyStore.deleteEntry(v2); Object v19 = this.mEncryptedPasswords.get(p1); Arrays.fill(v19, 0); this.mEncryptedPasswords.remove(p1);","StringBuilder v24 = new StringBuilder(); StringBuilder v26 = v24.append(""profile_key_name_encrypt_""); StringBuilder v27 = v24.append(p1); String v28 = v24.toString(); this.mJavaKeyStore.deleteEntry(v28);",0.822930097579956
systemReady()V,isWeakEscrowTokenValid(J[BI)Z,IGateKeeperService$Stub$Proxy v18 = new IGateKeeperService$Stub$Proxy(v11); IGateKeeperService v16 = v18; this.mGateKeeperService = v16; IGateKeeperService v10 = v16;,IGateKeeperService$Stub$Proxy v21 = new IGateKeeperService$Stub$Proxy(v14); IGateKeeperService v19 = v21; this.mGateKeeperService = v19;,0.9845106601715088
systemReady()V,verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,LockSettingsStorage$CredentialHash v71 = LockSettingsStorage.readPasswordHashIfExists(p1); if (v71 == 0) {     LockSettingsStorage$CredentialHash v72 = LockSettingsStorage.readPatternHashIfExists(p1);,LockSettingsStorage$CredentialHash v36 = LockSettingsStorage.readPasswordHashIfExists(p2); LockSettingsStorage$CredentialHash v37 = LockSettingsStorage.readPatternHashIfExists(p2); VerifyCredentialResponse v48 = LockSettingsService.convertResponse();,0.8911954164505005
getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;,startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B,int v3 = Binder.getCallingUid(); KeyChainSnapshot v6 = RecoverySnapshotStorage.readFromDisk(v3); KeyChainSnapshot v4 = v6; return v1;,"Object v7 = Objects.requireNonNull(p3, ""verifierCertPath is null""); X509Certificate v16 = TrustedRootCertificates.getTestOnlyInsecureCertificate(); CertUtils.validateCertPath(0, v13, v11); PublicKey v21 = v20.getPublicKey(); byte[] v22 = v21.getEncoded(); RecoverySessionStorage$Entry v32 = new RecoverySessionStorage$Entry(p1,v31,v29,p4); this.mRecoverySessionStorage.add(v25, v32); byte[] v43 = KeySyncUtils.encryptRecoveryClaim(v27, p4, p5, v42, v29); return v43;",0.6684561967849731
getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;,getPersistentDataPackageName()Ljava/lang/String;,int v3 = Binder.getCallingUid(); KeyChainSnapshot v6 = RecoverySnapshotStorage.readFromDisk(v3); KeyChainSnapshot v4 = v6; return v1;,int v4 = Binder.getCallingUid(); this.this$0.enforceUid(v4); Context v7 = PersistentDataBlockService.-$$Nest$fgetmContext(this.this$0); String v8 = v7.getString(17040017); return v8;,0.6621803641319275
importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,"PlatformDecryptionKey v9 = PlatformKeyManager.getDecryptKeyInternal(v6); PlatformEncryptionKey v10 = PlatformKeyManager.getEncryptKeyInternal(v6); String v1 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);","PlatformDecryptionKey v8 = PlatformKeyManager.getDecryptKeyInternal(v5); PlatformEncryptionKey v9 = PlatformKeyManager.getEncryptKeyInternal(v5); PlatformEncryptionKey v15 = PlatformKeyManager.getEncryptKeyInternal(v5); WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);",0.8884230852127075
importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,"SecretKeySpec v12 = new SecretKeySpec(p2,""AES""); WrappedKey v14 = WrappedKey.fromSecretKey(v7, v12, p3); long v15 = this.mDatabase.insertKey(v6, v5, p1, v14); this.mKeyStore.setEntry(v24, v25, v35);","SecretKey v18 = this.mKeyGenerator.generateKey(); WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2); long v20 = this.mDatabase.insertKey(v5, v4, p1, v19);",0.8455150127410889
getRecoveryStatus()Ljava/util/Map;,setRecoveryStatus(Ljava/lang/String;I)V,"SQLiteDatabase v5 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v9 = v5.query(""keys"", v6, ""uid = ?"", v7, 0, 0, 0); HashMap v10 = new HashMap(); boolean v12 = v9.moveToNext(); Map v4 = v10; Map v1 = v4; return v1;","SQLiteDatabase v6 = this.mKeyStoreDbHelper.getWritableDatabase(); ContentValues v7 = new ContentValues(); Integer v9 = Integer.valueOf(p2); v7.put(""recovery_status"", v9); int v13 = v6.update(""keys"", v7, ""uid = ? AND alias = ?"", new String[]{String.valueOf(v4), p1});",0.8149332404136658
getRecoveryStatus()Ljava/util/Map;,removeKey(Ljava/lang/String;)V,"SQLiteDatabase v5 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v9 = v5.query(""keys"", v6, ""uid = ?"", v7, 0, 0, 0); HashMap v10 = new HashMap(); boolean v12 = v9.moveToNext(); Map v4 = v10; Map v1 = v4; return v1;","SQLiteDatabase v7 = this.mKeyStoreDbHelper.getWritableDatabase(); int v10 = v7.delete(""keys"", ""uid = ? AND alias = ?"", v8); String v19 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1); this.mKeyStore.deleteEntry(v19);",0.8037410378456116
importKey(Ljava/lang/String;[B)Ljava/lang/String;,generateKey(Ljava/lang/String;)Ljava/lang/String;,"this.mPlatformKeyManager.getEncryptKey(v7); this.mRecoverableKeyGenerator.importKey(v8, v7, v6, p1, p2, 0); this.mApplicationKeyStorage.setSymmetricKeyEntry(v7, v6, p1, p2);","byte[] v8 = this.mRecoverableKeyGenerator.generateAndStoreKey(v7, v6, v5, p1, 0); this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, v8);",0.8281166553497314
importKey(Ljava/lang/String;[B)Ljava/lang/String;,importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;,"this.mPlatformKeyManager.getEncryptKey(v7); this.mRecoverableKeyGenerator.importKey(v8, v7, v6, p1, p2, 0); this.mApplicationKeyStorage.setSymmetricKeyEntry(v7, v6, p1, p2);","PlatformDecryptionKey v9 = PlatformKeyManager.getDecryptKeyInternal(v6); PlatformEncryptionKey v10 = PlatformKeyManager.getEncryptKeyInternal(v6); String v1 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);",0.7887172102928162
setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V,getSeparateProfileChallengeEnabled(I)Z,"int v9 = LockSettingsService.getCredentialTypeInternal(p1); this.mStorage.setBoolean(""lockscreen.profilechallenge"", p2, p1);","String v4 = LockSettingsStorage.getString(""lockscreen.profilechallenge"", 0, p1); return v2;",0.8729046583175659
setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V,removeCachedUnifiedChallenge(I)V,"StringBuilder v30 = new StringBuilder(); StringBuilder v32 = v30.append(""profile_key_name_decrypt_""); StringBuilder v33 = v30.append(p1); String v34 = v30.toString(); this.mJavaKeyStore.deleteEntry(v34);","StringBuilder v3 = new StringBuilder(); StringBuilder v5 = v3.append(""com.android.server.locksettings.unified_profile_cache_v2_""); StringBuilder v6 = v3.append(p1); String v7 = v3.toString(); String v2 = v7; boolean v14 = this.mKeyStore.containsAlias(v2); this.mKeyStore.deleteEntry(v2); Object v19 = this.mEncryptedPasswords.get(p1); Arrays.fill(v19, 0); this.mEncryptedPasswords.remove(p1);",0.8262602686882019
getKey(Ljava/lang/String;)Ljava/lang/String;,importKey(Ljava/lang/String;[B)Ljava/lang/String;,"String v7 = this.mApplicationKeyStorage.getGrantAlias(v5, v4, p1); String v6 = v7; String v1 = v6; return v1;","String v11 = RecoverableKeyStoreManager.getAlias(v7, v6, p1); String v2 = v11; String v1 = v2; return v1;",0.7046636939048767
getKey(Ljava/lang/String;)Ljava/lang/String;,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,"String v7 = this.mApplicationKeyStorage.getGrantAlias(v5, v4, p1); String v6 = v7; String v1 = v6; return v1;","String v31 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1); this.mKeyStore.setEntry(v31, v32, v42);",0.6884957551956177
registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,"Message v3 = this.mHandler.obtainMessage(2, p1); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(3, p1); v3.sendToTarget();",0.9896624088287354
registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,scheduleNonStrongBiometricIdleTimeout(I)V,"Message v3 = this.mHandler.obtainMessage(2, p1); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(9, p1, 0); v3.sendToTarget();",0.9882265329360962
isWeakEscrowTokenActive(JI)Z,removeWeakEscrowToken(JI)Z,"boolean v8 = SyntheticPasswordManager.hasState(""spblob"", p1, p2); boolean v7 = v8; boolean v6 = v7; return v6;","boolean v17 = SyntheticPasswordManager.hasState(""spblob"", p1, p2); byte[] v19 = SyntheticPasswordManager.loadState(""spblob"", p1, p2); SyntheticPasswordManager$SyntheticPasswordBlob v20 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v19); SyntheticPasswordManager.destroySyntheticPassword(p1, p2); SyntheticPasswordManager.destroyState(""secdis"", p1, p2);",0.8566054701805115
isWeakEscrowTokenActive(JI)Z,isWeakEscrowTokenValid(J[BI)Z,"boolean v8 = SyntheticPasswordManager.hasState(""spblob"", p1, p2); boolean v7 = v8; boolean v6 = v7; return v6;","byte[] v8 = SyntheticPasswordManager.loadState(""e0"", 0, p1); boolean v9 = ArrayUtils.isEmpty(v8); boolean v7 = (v9 ^ 1);",0.7777785062789917
setBoolean(Ljava/lang/String;ZI)V,setLong(Ljava/lang/String;JI)V,"LockSettingsStorage.writeKeyValue(p1, , p3);","String v3 = Long.toString(p2); LockSettingsStorage.writeKeyValue(p1, v3, p3);",0.9195499420166016
setBoolean(Ljava/lang/String;ZI)V,setString(Ljava/lang/String;Ljava/lang/String;I)V,"LockSettingsStorage.writeKeyValue(p1, , p3);","SQLiteDatabase v5 = this.mOpenHelper.getWritableDatabase(); LockSettingsStorage.writeKeyValue(v5, p1, p2, p3);",0.7701042890548706
verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"LockSettingsService.setUserPasswordMetrics(p1, p2); byte[] v49 = p1.getCredential(); LockSettingsService.unlockKeystore(v49, p2); byte[] v57 = LockSettingsService.secretFromCredential(p1); LockSettingsService.unlockUser(p2, v57);","LockSettingsService.setUserPasswordMetrics(p1, p2); byte[] v47 = p1.getCredential(); LockSettingsService.unlockKeystore(v47, p2); byte[] v55 = LockSettingsService.secretFromCredential(p1); LockSettingsService.unlockUser(p2, v55);",0.996372640132904
verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"boolean v61 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0); LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);","boolean v59 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0); LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);",0.9904534816741943
getSeparateProfileChallengeEnabled(I)Z,setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V,"String v4 = LockSettingsStorage.getString(""lockscreen.profilechallenge"", 0, p1); return v2;","int v9 = LockSettingsService.getCredentialTypeInternal(p1); this.mStorage.setBoolean(""lockscreen.profilechallenge"", p2, p1);",0.8729046583175659
getSeparateProfileChallengeEnabled(I)Z,setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V,"String v4 = LockSettingsStorage.getString(""lockscreen.profilechallenge"", 0, p1); return v2;",String v14 = LockSettingsStorage.getChildProfileLockFile(p1); LockSettingsStorage.deleteFile(v14);,0.7108533382415771
removeWeakEscrowToken(JI)Z,hasPendingEscrowToken(I)Z,Integer v10 = Integer.valueOf(p2); Object v13 = this.tokenMap.get(v12); Long v14 = Long.valueOf(p1); Object v15 = v13.remove(v14);,Integer v3 = Integer.valueOf(p1); boolean v4 = this.tokenMap.containsKey(v3); ArraySet v5 = new ArraySet(v8); Integer v6 = Integer.valueOf(p1); Object v7 = this.tokenMap.get(v6);,0.9095367789268494
removeWeakEscrowToken(JI)Z,addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,Integer v10 = Integer.valueOf(p2); Object v13 = this.tokenMap.get(v12); Long v14 = Long.valueOf(p1); Object v15 = v13.remove(v14);,"Integer v83 = Integer.valueOf(p3); Object v84 = this.tokenMap.get(v83); Long v85 = Long.valueOf(v69); Object v86 = v84.put(v85, v76); long v68 = v69;",0.8659842014312744
getBoolean(Ljava/lang/String;ZI)Z,getCredentialType(I)I,"boolean v2 = ""lock_pattern_autolock"".equals(p1); if (p3 != -9999) { LockSettingsStorage$PersistentData v5 = this.mStorage.readPersistentDataBlock(); long v7 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v9 = SyntheticPasswordManager.loadState(""pwd"", v6, p1);","long v6 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v8 = SyntheticPasswordManager.loadState(""pwd"", v5, p1); long v16 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1); int v15 = v16; boolean v18 = LockPatternUtils.isQualityAlphabeticPassword(v15); boolean v19 = LockPatternUtils.isQualityNumericPin(v15); int v17 = 3; int v2 = v17; return v2;",0.8876374959945679
getBoolean(Ljava/lang/String;ZI)Z,getLong(Ljava/lang/String;JI)J,"boolean v2 = ""lock_pattern_autolock"".equals(p1); if (p3 != -9999) { LockSettingsStorage$PersistentData v5 = this.mStorage.readPersistentDataBlock(); long v7 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v9 = SyntheticPasswordManager.loadState(""pwd"", v6, p1);","boolean v4 = ""legacy_lock_pattern_enabled"".equals(p1); String v5 = LockSettingsStorage.readKeyValue(, 0, p3); long v7 = Long.parseLong(v3);",0.817334771156311
getRecoverySecretTypes()[I,setRecoverySecretTypes([I)V,"SQLiteDatabase v6 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v11 = v6.query(""recovery_service_metadata"", v7, ""user_id = ? AND uid = ?"", v8, 0, 0, 0); int v12 = v11.getCount(); if (v12 != 0) { ... } [I v19 = new [I(v18.length); return v1;","SQLiteDatabase v7 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v12 = v7.query(""recovery_service_metadata"", v8, ""user_id = ? AND uid = ?"", v9, 0, 0, 0); String v17 = v12.getString(v15); SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase(); v25.put(""secret_types"", v33); int v39 = v24.update(""recovery_service_metadata"", v25, ""user_id = ? AND uid = ?"", v36);",0.9039772152900696
getRecoverySecretTypes()[I,setRecoverySecretTypes([I)V,"SQLiteDatabase v6 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v11 = v6.query(""recovery_service_metadata"", v7, ""user_id = ? AND uid = ?"", v8, 0, 0, 0); int v12 = v11.getCount(); if (v12 != 0) { ... } [I v19 = new [I(v18.length); return v1;","SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase(); ContentValues v25 = new ContentValues(); RecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v4, v5);",0.8471571803092957
userPresent(I)V,getStrongAuthForUser(I)I,"LockSettingsStrongAuth.requireStrongAuth(0, p1);","int v4 = this.mStrongAuthRequiredForUser.get(p1, this.mDefaultStrongAuthFlags); int v3 = v4; int v2 = v3; return v2;",0.6703147292137146
userPresent(I)V,setBoolean(Ljava/lang/String;ZI)V,"LockSettingsStrongAuth.requireStrongAuth(0, p1);","LockSettingsStorage.writeKeyValue(p1, , p3);",0.6629199981689453
closeSession(Ljava/lang/String;)V,unregisterSmartspaceUpdates(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/ISmartspaceCallback;)V,RecoverySessionStorage$$ExternalSyntheticLambda0 v8 = new RecoverySessionStorage$$ExternalSyntheticLambda0(p1); boolean v10 = v7.removeIf(v8);,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda0(p1,p2); v1.accept(v19);",0.7748105525970459
closeSession(Ljava/lang/String;)V,notifySmartspaceEvent(Landroid/app/smartspace/SmartspaceSessionId;Landroid/app/smartspace/SmartspaceTargetEvent;)V,RecoverySessionStorage$$ExternalSyntheticLambda0 v8 = new RecoverySessionStorage$$ExternalSyntheticLambda0(p1); boolean v10 = v7.removeIf(v8);,"SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2 v1 = new SmartspaceManagerService$SmartspaceManagerStub$$ExternalSyntheticLambda2(p1,p2); v1.accept(v19);",0.766709566116333
scheduleNonStrongBiometricIdleTimeout(I)V,registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,"Message v3 = this.mHandler.obtainMessage(9, p1, 0); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(2, p1); v3.sendToTarget();",0.9882265329360962
scheduleNonStrongBiometricIdleTimeout(I)V,reportSuccessfulBiometricUnlock(ZI)V,"Message v3 = this.mHandler.obtainMessage(9, p1, 0); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(8, p2, 0); v3.sendToTarget();",0.9873375296592712
reportSuccessfulBiometricUnlock(ZI)V,scheduleNonStrongBiometricIdleTimeout(I)V,"Message v3 = this.mHandler.obtainMessage(8, p2, 0); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(9, p1, 0); v3.sendToTarget();",0.9873375296592712
reportSuccessfulBiometricUnlock(ZI)V,registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,"Message v3 = this.mHandler.obtainMessage(8, p2, 0); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(2, p1); v3.sendToTarget();",0.984853208065033
setRecoveryStatus(Ljava/lang/String;I)V,setRecoverySecretTypes([I)V,"SQLiteDatabase v6 = this.mKeyStoreDbHelper.getWritableDatabase(); ContentValues v7 = new ContentValues(); Integer v9 = Integer.valueOf(p2); v7.put(""recovery_status"", v9); int v13 = v6.update(""keys"", v7, ""uid = ? AND alias = ?"", new String[]{String.valueOf(v4), p1});","SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase(); ContentValues v25 = new ContentValues(); RecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v4, v5);",0.8856967687606812
setRecoveryStatus(Ljava/lang/String;I)V,setRecoverySecretTypes([I)V,"SQLiteDatabase v6 = this.mKeyStoreDbHelper.getWritableDatabase(); ContentValues v7 = new ContentValues(); Integer v9 = Integer.valueOf(p2); v7.put(""recovery_status"", v9); int v13 = v6.update(""keys"", v7, ""uid = ? AND alias = ?"", new String[]{String.valueOf(v4), p1});","SQLiteDatabase v7 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v12 = v7.query(""recovery_service_metadata"", v8, ""user_id = ? AND uid = ?"", v9, 0, 0, 0); String v17 = v12.getString(v15); SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase(); v25.put(""secret_types"", v33); int v39 = v24.update(""recovery_service_metadata"", v25, ""user_id = ? AND uid = ?"", v36);",0.8606226444244385
setServerParams([B)V,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,"byte[] v6 = RecoverableKeyStoreDb.getBytes(v3, v4, ""server_params""); boolean v7 = Arrays.equals(p1, v5); long v9 = RecoverableKeyStoreDb.setBytes(v3, v4, ""server_params"", p1);","String v31 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1); this.mKeyStore.setEntry(v31, v32, v42);",0.693939208984375
setServerParams([B)V,importKey(Ljava/lang/String;[B)Ljava/lang/String;,"byte[] v6 = RecoverableKeyStoreDb.getBytes(v3, v4, ""server_params""); boolean v7 = Arrays.equals(p1, v5); long v9 = RecoverableKeyStoreDb.setBytes(v3, v4, ""server_params"", p1);","String v11 = RecoverableKeyStoreManager.getAlias(v7, v6, p1); String v2 = v11; String v1 = v2; return v1;",0.6916095018386841
verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"IGateKeeperService v26 = LockSettingsService.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, p2, p3); VerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);","IGateKeeperService v21 = LockSettingsService.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v19, p1, p2, p3); byte[] v23 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword(); this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v23); IGateKeeperService v25 = LockSettingsService.getGateKeeperService(); VerifyCredentialResponse v26 = this.mSpManager.verifyChallenge(v25, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);",0.9582789540290833
verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"IGateKeeperService v26 = LockSettingsService.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v27 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v26, v25, p1, p2, p3); VerifyCredentialResponse v32 = this.mSpManager.verifyChallenge(v31, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);","IGateKeeperService v24 = LockSettingsService.getGateKeeperService(); VerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2); int v26 = v25.getResponseCode();",0.9019229412078857
tryUnlockWithCachedUnifiedChallenge(I)Z,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"IGateKeeperService v53 = LockSettingsService.getGateKeeperService(); byte[] v54 = p1.getCredential(); GateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);","IGateKeeperService v38 = LockSettingsService.getGateKeeperService(); byte[] v39 = p1.getCredential(); GateKeeperResponse v40 = v38.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v39);",0.9933100938796997
tryUnlockWithCachedUnifiedChallenge(I)Z,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"SyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v31, p1, p2, p3); int v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode(); byte[] v37 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();","SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3); byte[] v22 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword(); this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v22);",0.9522138237953186
generateKey(Ljava/lang/String;)Ljava/lang/String;,importKey(Ljava/lang/String;[B)Ljava/lang/String;,"byte[] v8 = this.mRecoverableKeyGenerator.generateAndStoreKey(v7, v6, v5, p1, 0); this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, v8);","this.mPlatformKeyManager.getEncryptKey(v7); this.mRecoverableKeyGenerator.importKey(v8, v7, v6, p1, p2, 0); this.mApplicationKeyStorage.setSymmetricKeyEntry(v7, v6, p1, p2);",0.8281166553497314
generateKey(Ljava/lang/String;)Ljava/lang/String;,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,"byte[] v8 = this.mRecoverableKeyGenerator.generateAndStoreKey(v7, v6, v5, p1, 0); this.mApplicationKeyStorage.setSymmetricKeyEntry(v6, v5, p1, v8);","String v31 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1); this.mKeyStore.setEntry(v31, v32, v42);",0.767428994178772
setLong(Ljava/lang/String;JI)V,setBoolean(Ljava/lang/String;ZI)V,"String v3 = Long.toString(p2); LockSettingsStorage.writeKeyValue(p1, v3, p3);","LockSettingsStorage.writeKeyValue(p1, , p3);",0.9195499420166016
setLong(Ljava/lang/String;JI)V,getLong(Ljava/lang/String;JI)J,"String v3 = Long.toString(p2); LockSettingsStorage.writeKeyValue(p1, v3, p3);","boolean v4 = ""legacy_lock_pattern_enabled"".equals(p1); String v5 = LockSettingsStorage.readKeyValue(, 0, p3); long v7 = Long.parseLong(v3);",0.7616387605667114
removeKey(Ljava/lang/String;)V,setRecoveryStatus(Ljava/lang/String;I)V,"SQLiteDatabase v7 = this.mKeyStoreDbHelper.getWritableDatabase(); int v10 = v7.delete(""keys"", ""uid = ? AND alias = ?"", v8); String v19 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1); this.mKeyStore.deleteEntry(v19);","SQLiteDatabase v6 = this.mKeyStoreDbHelper.getWritableDatabase(); ContentValues v7 = new ContentValues(); Integer v9 = Integer.valueOf(p2); v7.put(""recovery_status"", v9); int v13 = v6.update(""keys"", v7, ""uid = ? AND alias = ?"", new String[]{String.valueOf(v4), p1});",0.814795970916748
removeKey(Ljava/lang/String;)V,getRecoveryStatus()Ljava/util/Map;,"SQLiteDatabase v7 = this.mKeyStoreDbHelper.getWritableDatabase(); int v10 = v7.delete(""keys"", ""uid = ? AND alias = ?"", v8); String v19 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1); this.mKeyStore.deleteEntry(v19);","SQLiteDatabase v5 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v9 = v5.query(""keys"", v6, ""uid = ?"", v7, 0, 0, 0); HashMap v10 = new HashMap(); boolean v12 = v9.moveToNext(); Map v4 = v10; Map v1 = v4; return v1;",0.8037410378456116
unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,boolean v7 = this.mListeners.unregister(p1); boolean v6 = v7; return v6;,boolean v7 = this.mListeners.register(p1); return v6;,0.9382041096687317
unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,registerListener(Landroid/net/INetworkPolicyListener;)V,boolean v7 = this.mListeners.unregister(p1); boolean v6 = v7; return v6;,boolean v4 = this.mListeners.register(p1);,0.8885239362716675
setString(Ljava/lang/String;Ljava/lang/String;I)V,setBoolean(Ljava/lang/String;ZI)V,"SQLiteDatabase v5 = this.mOpenHelper.getWritableDatabase(); LockSettingsStorage.writeKeyValue(v5, p1, p2, p3);","LockSettingsStorage.writeKeyValue(p1, , p3);",0.7701042890548706
setString(Ljava/lang/String;Ljava/lang/String;I)V,setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V,"SQLiteDatabase v5 = this.mOpenHelper.getWritableDatabase(); LockSettingsStorage.writeKeyValue(v5, p1, p2, p3);","SQLiteDatabase v40 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked(); ContentValues v41 = new ContentValues(); v41.put(""value"", p4); String v44 = new String(1); String v45 = String.valueOf(v23); int v46 = v40.update(""extras"", v41, ""_id=?"", v44);",0.7566998600959778
setRecoverySecretTypes([I)V,getRecoverySecretTypes()[I,"SQLiteDatabase v7 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v12 = v7.query(""recovery_service_metadata"", v8, ""user_id = ? AND uid = ?"", v9, 0, 0, 0); String v17 = v12.getString(v15); SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase(); v25.put(""secret_types"", v33); int v39 = v24.update(""recovery_service_metadata"", v25, ""user_id = ? AND uid = ?"", v36);","SQLiteDatabase v6 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v11 = v6.query(""recovery_service_metadata"", v7, ""user_id = ? AND uid = ?"", v8, 0, 0, 0); int v12 = v11.getCount(); if (v12 != 0) { ... } [I v19 = new [I(v18.length); return v1;",0.9039772152900696
setRecoverySecretTypes([I)V,setRecoveryStatus(Ljava/lang/String;I)V,"SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase(); ContentValues v25 = new ContentValues(); RecoverableKeyStoreDb.ensureRecoveryServiceMetadataEntryExists(v4, v5);","SQLiteDatabase v6 = this.mKeyStoreDbHelper.getWritableDatabase(); ContentValues v7 = new ContentValues(); Integer v9 = Integer.valueOf(p2); v7.put(""recovery_status"", v9); int v13 = v6.update(""keys"", v7, ""uid = ? AND alias = ?"", new String[]{String.valueOf(v4), p1});",0.8856967687606812
getCredentialType(I)I,getBoolean(Ljava/lang/String;ZI)Z,"long v6 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v8 = SyntheticPasswordManager.loadState(""pwd"", v5, p1); long v16 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1); int v15 = v16; boolean v18 = LockPatternUtils.isQualityAlphabeticPassword(v15); boolean v19 = LockPatternUtils.isQualityNumericPin(v15); int v17 = 3; int v2 = v17; return v2;","boolean v2 = ""lock_pattern_autolock"".equals(p1); if (p3 != -9999) { LockSettingsStorage$PersistentData v5 = this.mStorage.readPersistentDataBlock(); long v7 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v9 = SyntheticPasswordManager.loadState(""pwd"", v6, p1);",0.8876374959945679
getCredentialType(I)I,getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;,"long v6 = LockSettingsService.getLong(""sp-handle"", 0, p1); byte[] v8 = SyntheticPasswordManager.loadState(""pwd"", v5, p1); long v16 = this.mStorage.getLong(""lockscreen.password_type"", 0, p1); int v15 = v16; boolean v18 = LockPatternUtils.isQualityAlphabeticPassword(v15); boolean v19 = LockPatternUtils.isQualityNumericPin(v15); int v17 = 3; int v2 = v17; return v2;","boolean v5 = this.mCache.hasKeyValue(, p3); int v6 = LockSettingsStorage$Cache.-$$Nest$mgetVersion(this.mCache); SQLiteDatabase v7 = this.mOpenHelper.getReadableDatabase(); Cursor v10 = v7.query(""locksettings"", this.COLUMNS_FOR_QUERY, ""user=? AND name=?"", new String[]{""android.lockscreen.password_type""}, 0, 0, 0); String v12 = v10.getString(0); this.mCache.putKeyValueIfUnchanged(, , p3, v6); if ( != this.DEFAULT) { String v4 = ; String v2 = v4; return v2;",0.7833727598190308
recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;,startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B,"byte[] v15 = KeySyncUtils.decryptRecoveryClaimResponse(v13, v14, p2); byte[] v17 = KeySyncUtils.decryptRecoveryKey(v16, v15); HashMap v19 = new HashMap(); Map v18 = v19;","Object v7 = Objects.requireNonNull(p3, ""verifierCertPath is null""); X509Certificate v16 = TrustedRootCertificates.getTestOnlyInsecureCertificate(); CertUtils.validateCertPath(0, v13, v11); PublicKey v21 = v20.getPublicKey(); byte[] v22 = v21.getEncoded(); RecoverySessionStorage$Entry v32 = new RecoverySessionStorage$Entry(p1,v31,v29,p4); this.mRecoverySessionStorage.add(v25, v32); byte[] v43 = KeySyncUtils.encryptRecoveryClaim(v27, p4, p5, v42, v29); return v43;",0.7691601514816284
recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;,removeAccountExplicitly(Landroid/accounts/Account;)Z,"byte[] v15 = KeySyncUtils.decryptRecoveryClaimResponse(v13, v14, p2); byte[] v17 = KeySyncUtils.decryptRecoveryKey(v16, v15); HashMap v19 = new HashMap(); Map v18 = v19;","boolean v31 = p0.removeAccountInternal(v20, p1, v1); return v31;",0.6548953056335449
unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,"Message v3 = this.mHandler.obtainMessage(3, p1); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(2, p1); v3.sendToTarget();",0.9896624088287354
unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,scheduleNonStrongBiometricIdleTimeout(I)V,"Message v3 = this.mHandler.obtainMessage(3, p1); v3.sendToTarget();","Message v3 = this.mHandler.obtainMessage(9, p1, 0); v3.sendToTarget();",0.9773554801940918
verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;,addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,"LockSettingsService$GateKeeperDiedRecipient v5 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0); v4.linkToDeath(v5, 0);","LockSettingsService$GateKeeperDiedRecipient v18 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0); v17.linkToDeath(v18, 0); IGateKeeperService v22 = IGateKeeperService$Stub.asInterface(v17);",0.9493652582168579
verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;,verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"Object v2 = this.mGatekeeperPasswords.get(p1); IGateKeeperService v3 = this.mGateKeeperService; byte[] v15 = SyntheticPasswordManager.loadState(""handle"", 0, p4); GateKeeperResponse v16 = v3.verifyChallenge(p3, p2, v14, v2); VerifyCredentialResponse v23 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0); return v29;","IGateKeeperService v21 = LockSettingsService.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v19, p1, p2, p3); byte[] v23 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword(); this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v23); IGateKeeperService v25 = LockSettingsService.getGateKeeperService(); VerifyCredentialResponse v26 = this.mSpManager.verifyChallenge(v25, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);",0.8351491093635559
getStagedApexModuleNames()[Ljava/lang/String;,getRestrictBackgroundStatus(I)I,List v2 = v3; String v6 = new String(0); Object v7 = v2.toArray(v6); return v7;,int v2 = 3; return v2;,0.71002197265625
getStagedApexModuleNames()[Ljava/lang/String;,getPortInfo()Ljava/util/List;,List v2 = v3; String v6 = new String(0); Object v7 = v2.toArray(v6); return v7;,List v7 = Collections.emptyList();,0.7000049948692322
getVersionCodeForPackage(Ljava/lang/String;)J,getAllPackages()[Ljava/lang/String;,"int v1 = Binder.getCallingUid(); int v2 = UserHandle.getUserId(v1); Object v5 = this.sSnapshot.get(); int v6 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v16 = new ComputerEngine(v14,v11); this.sSnapshot.set(v12); PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);","Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); List v20 = v1.getAllPackages(); Object v22 = v20.toArray(v21); return v22;",0.8278232216835022
getVersionCodeForPackage(Ljava/lang/String;)J,getAllPackages()[Ljava/lang/String;,"int v1 = Binder.getCallingUid(); int v2 = UserHandle.getUserId(v1); Object v5 = this.sSnapshot.get(); int v6 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v16 = new ComputerEngine(v14,v11); this.sSnapshot.set(v12); PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);","Object v6 = this.sSnapshot.get(); int v7 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v9); List v21 = v1.getAllPackages(); Object v23 = v21.toArray(v22); return v23;",0.8152779340744019
isPackageDebuggable(Ljava/lang/String;)Z,isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z,"PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v10); this.mSnapshotStatistics.rebuild(v12, v17, ); Computer v11 = v15; this.sSnapshot.set(v11);","PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v17 = new ComputerEngine(v15,v11); this.sSnapshot.set(v12);",0.9353311061859131
isPackageDebuggable(Ljava/lang/String;)Z,hasSha256SigningCertificate(Ljava/lang/String;[B)Z,"PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v10); this.mSnapshotStatistics.rebuild(v12, v17, ); Computer v11 = v15; this.sSnapshot.set(v11);","PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v9); this.mSnapshotStatistics.rebuild(v11, v17, ); Computer v10 = v15; this.sSnapshot.set(v10); Computer v20 = v10.use(); Computer v1 = v20; boolean v21 = v1.hasSigningCertificate(p1, p2, 1); return v21;",0.9301361441612244
getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String;,getAllPackages()[Ljava/lang/String;,"Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); String v20 = v1.getInstallerPackageName(p1);","Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); List v20 = v1.getAllPackages(); Object v22 = v20.toArray(v21); return v22;",0.9337387681007385
getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String;,getAllPackages()[Ljava/lang/String;,"Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); String v20 = v1.getInstallerPackageName(p1);","Object v6 = this.sSnapshot.get(); int v7 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v9); List v21 = v1.getAllPackages(); Object v23 = v21.toArray(v22); return v23;",0.9284423589706421
hasSha256SigningCertificate(Ljava/lang/String;[B)Z,isPackageDebuggable(Ljava/lang/String;)Z,"PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v9); this.mSnapshotStatistics.rebuild(v11, v17, ); Computer v10 = v15; this.sSnapshot.set(v10); Computer v20 = v10.use(); Computer v1 = v20; boolean v21 = v1.hasSigningCertificate(p1, p2, 1); return v21;","PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v10); this.mSnapshotStatistics.rebuild(v12, v17, ); Computer v11 = v15; this.sSnapshot.set(v11);",0.9301361441612244
hasSha256SigningCertificate(Ljava/lang/String;[B)Z,isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z,"PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v9); this.mSnapshotStatistics.rebuild(v11, v17, ); Computer v10 = v15; this.sSnapshot.set(v10); Computer v20 = v10.use(); Computer v1 = v20; boolean v21 = v1.hasSigningCertificate(p1, p2, 1); return v21;","PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v17 = new ComputerEngine(v15,v11); this.sSnapshot.set(v12);",0.8688129186630249
registerStagedApexObserver(Landroid/content/pm/IStagedApexObserver;)V,unregisterPackageChangeObserver(Landroid/content/pm/IPackageChangeObserver;)V,boolean v7 = this.mStagedApexObservers.add(p1);,boolean v1 = PackageManagerService.mPackageChangeObservers.remove(p1);,0.6541405916213989
registerStagedApexObserver(Landroid/content/pm/IStagedApexObserver;)V,registerListener(Landroid/net/INetworkPolicyListener;)V,boolean v4 = this.mStagedApexObservers.add(p1);,boolean v4 = this.mListeners.register(p1);,0.6539407968521118
unregisterPackageChangeObserver(Landroid/content/pm/IPackageChangeObserver;)V,registerPackageChangeObserver(Landroid/content/pm/IPackageChangeObserver;)V,boolean v1 = PackageManagerService.mPackageChangeObservers.remove(p1);,"IBinder v1 = p1.asBinder(); PackageManagerNative$PackageChangeObserverDeathRecipient v2 = new PackageManagerNative$PackageChangeObserverDeathRecipient(p0,p1); boolean v5 = PackageManagerService.mPackageChangeObservers.add(p1);",0.7477705478668213
unregisterPackageChangeObserver(Landroid/content/pm/IPackageChangeObserver;)V,stopOneTimePermissionSession(Ljava/lang/String;I)V,boolean v1 = PackageManagerService.mPackageChangeObservers.remove(p1);,"int v7 = v6.getPackageUid(p1, 0); Object v8 = this.mListeners.get(v7); this.mListeners.remove(v7); v8.cancel();",0.6545306444168091
isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z,isPackageDebuggable(Ljava/lang/String;)Z,"PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v17 = new ComputerEngine(v15,v11); this.sSnapshot.set(v12);","PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v10); this.mSnapshotStatistics.rebuild(v12, v17, ); Computer v11 = v15; this.sSnapshot.set(v11);",0.9353311061859131
isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z,getLocationFlags(Ljava/lang/String;)I,"PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v17 = new ComputerEngine(v15,v11); this.sSnapshot.set(v12);","PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v16 = new ComputerEngine(v14,v11);",0.934021532535553
getNamesForUids([I)[Ljava/lang/String;,getAllPackages()[Ljava/lang/String;,"Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); this.mSnapshotStatistics.rebuild(v11, v16, ); String v20 = v1.getNamesForUids(p1);","Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); List v20 = v1.getAllPackages(); Object v22 = v20.toArray(v21); return v22;",0.8798879384994507
getNamesForUids([I)[Ljava/lang/String;,getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String;,"Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); this.mSnapshotStatistics.rebuild(v11, v16, ); String v20 = v1.getNamesForUids(p1);","Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); String v20 = v1.getInstallerPackageName(p1);",0.8744762539863586
getAllPackages()[Ljava/lang/String;,getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String;,"Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); List v20 = v1.getAllPackages(); Object v22 = v20.toArray(v21); return v22;","Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); String v20 = v1.getInstallerPackageName(p1);",0.9337387681007385
getAllPackages()[Ljava/lang/String;,getInstallerForPackage(Ljava/lang/String;)Ljava/lang/String;,"Object v6 = this.sSnapshot.get(); int v7 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v15 = new ComputerEngine(v13,v9); List v21 = v1.getAllPackages(); Object v23 = v21.toArray(v22); return v23;","Object v3 = this.sSnapshot.get(); int v4 = this.sSnapshotPendingVersion.get(); PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9); String v20 = v1.getInstallerPackageName(p1);",0.9284423589706421
getStagedApexInfo(Ljava/lang/String;)Landroid/content/pm/StagedApexInfo;,shouldAlwaysRespectAppRequestedMode()Z,ApexSessionParams v29 = new ApexSessionParams(); int v31 = v4.sessionId(); ApexSessionParams.sessionId = v31; ApexInfo v39 = this.mApexManager.getStagedApexInfos(v29); Object v42 = v9.get(p1); if (v42 == 0) {     StagedApexInfo v43 = new StagedApexInfo();     StagedApexInfo.moduleName = ApexInfo.moduleName;     StagedApexInfo.diskImagePath = ApexInfo.modulePath;     StagedApexInfo.versionCode = ApexInfo.versionCode;     StagedApexInfo.versionName = ApexInfo.versionName;     StagedApexInfo.hasClassPathJars = ApexInfo.hasClassPathJars;     return v43; },boolean v5 = this.mAlwaysRespectAppRequest; boolean v4 = v5; return v4;,0.682904839515686
getStagedApexInfo(Ljava/lang/String;)Landroid/content/pm/StagedApexInfo;,notifyGraphicsEnvironmentSetup(Ljava/lang/String;I)V,ApexSessionParams v29 = new ApexSessionParams(); int v31 = v4.sessionId(); ApexSessionParams.sessionId = v31; ApexInfo v39 = this.mApexManager.getStagedApexInfos(v29); Object v42 = v9.get(p1); if (v42 == 0) {     StagedApexInfo v43 = new StagedApexInfo();     StagedApexInfo.moduleName = ApexInfo.moduleName;     StagedApexInfo.diskImagePath = ApexInfo.modulePath;     StagedApexInfo.versionCode = ApexInfo.versionCode;     StagedApexInfo.versionName = ApexInfo.versionName;     StagedApexInfo.hasClassPathJars = ApexInfo.hasClassPathJars;     return v43; },"ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3); Integer v19 = Integer.valueOf(v12); boolean v20 = this.mSettings.containsKey(v19);",0.6789029836654663
getTargetSdkVersionForPackage(Ljava/lang/String;)I,getLocationFlags(Ljava/lang/String;)I,"PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9);","PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v16 = new ComputerEngine(v14,v11);",0.9935967326164246
getTargetSdkVersionForPackage(Ljava/lang/String;)I,isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z,"PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9);","PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v17 = new ComputerEngine(v15,v11); this.sSnapshot.set(v12);",0.9328964352607727
registerPackageChangeObserver(Landroid/content/pm/IPackageChangeObserver;)V,unregisterPackageChangeObserver(Landroid/content/pm/IPackageChangeObserver;)V,"IBinder v1 = p1.asBinder(); PackageManagerNative$PackageChangeObserverDeathRecipient v2 = new PackageManagerNative$PackageChangeObserverDeathRecipient(p0,p1); boolean v5 = PackageManagerService.mPackageChangeObservers.add(p1);",boolean v1 = PackageManagerService.mPackageChangeObservers.remove(p1);,0.7477705478668213
registerPackageChangeObserver(Landroid/content/pm/IPackageChangeObserver;)V,setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,"IBinder v1 = p1.asBinder(); PackageManagerNative$PackageChangeObserverDeathRecipient v2 = new PackageManagerNative$PackageChangeObserverDeathRecipient(p0,p1); boolean v5 = PackageManagerService.mPackageChangeObservers.add(p1);","IBinder v9 = p2.asBinder(); v9.linkToDeath(this.mInputChangeListenerRecord, 0);",0.7246956825256348
getLocationFlags(Ljava/lang/String;)I,getTargetSdkVersionForPackage(Ljava/lang/String;)I,"PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v16 = new ComputerEngine(v14,v11);","PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v14 = new ComputerEngine(v12,v9);",0.9935967326164246
getLocationFlags(Ljava/lang/String;)I,isAudioPlaybackCaptureAllowed([Ljava/lang/String;)[Z,"PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v16 = new ComputerEngine(v14,v11);","PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2); ComputerEngine v17 = new ComputerEngine(v15,v11); this.sSnapshot.set(v12);",0.934021532535553
getModuleMetadataPackageName()Ljava/lang/String;,abandonSession(JLjava/lang/String;)V,String v2 = this.mPackageName; String v1 = v2; return v1;,"Object v7 = Objects.requireNonNull(p2, ""packageName must not be null""); StringBuilder v1 = new StringBuilder(); StringBuilder v3 = v1.append(""sessionId must be positive: ""); StringBuilder v4 = v1.append(p1);",0.6506266593933105
getModuleMetadataPackageName()Ljava/lang/String;,getTargetSdkVersionForPackage(Ljava/lang/String;)I,String v2 = this.mPackageName; String v1 = v2; return v1;,int v20 = v1.getTargetSdkVersion(p1); return v20;,0.6364781856536865
hasSystemFeature(Ljava/lang/String;I)Z,unbindFromDataLoader(I)V,Object v2 = this.mAvailableFeatures.get(p1); if (v2 != 0) { boolean v1 = 0; return v1;,"Object v3 = v2.get(p1, 0); if (v3 != 0) {",0.623615562915802
hasSystemFeature(Ljava/lang/String;I)Z,getAvailableGameModes(Ljava/lang/String;)[I,Object v2 = this.mAvailableFeatures.get(p1); if (v2 != 0) { boolean v1 = 0; return v1;,Object v3 = this.mOverrideConfigs.get(p1); int v6 = GameManagerService$GamePackageConfiguration.getAvailableGameModesBitfield(); int v7 = Integer.bitCount(v6); [I v8 = new [I(v7); return v2;,0.6083617806434631
