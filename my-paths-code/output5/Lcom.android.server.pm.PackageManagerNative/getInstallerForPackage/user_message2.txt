The method getInstallerForPackage has the following code snippet:

This is path 1 for the API with depth 2:
public String getInstallerForPackage(String p1){
	boolean v2 = Thread.holdsLock(this.mLock);
	if (v2 == 0) {
		Object v3 = this.sSnapshot.get();
		int v4 = this.sSnapshotPendingVersion.get();
		if (v3 == 0) {
			int v5 = v3.getVersion();
			if (v5 != v4) {
				Object v6 = this.sSnapshot.get();
				int v7 = this.sSnapshotPendingVersion.get();
				if (v6 == 0) {
					int v8 = v6.getVersion();
					if (v8 != v7) {
						int v9 = this.sSnapshotPendingVersion.get();
						long v11 = SystemClock.currentTimeMicro();
						if (v6 != 0) {
							PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v14 = new ComputerEngine(v12,v9);
							long v16 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v11, v16, );
								Computer v10 = v14;
								this.sSnapshot.set(v10);
								Computer v19 = v10.use();
								Computer v1 = v19;
								String v20 = v1.getInstallerPackageName(p1);
								boolean v21 = TextUtils.isEmpty(v20);
								if (v21 != 0) {
									int v22 = Binder.getCallingUid();
									int v23 = UserHandle.getUserId(v22);
									ApplicationInfo v24 = v1.getApplicationInfo(p1, 0, v23);
									if (v24 == 0) {
										if ((ApplicationInfo.flags & 1) == 0) {
											return "preload";
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getInstallerForPackage(String p1){
	boolean v2 = Thread.holdsLock(this.mLock);
	if (v2 == 0) {
		Object v3 = this.sSnapshot.get();
		int v4 = this.sSnapshotPendingVersion.get();
		if (v3 == 0) {
			int v5 = v3.getVersion();
			if (v5 != v4) {
				Object v6 = this.sSnapshot.get();
				int v7 = this.sSnapshotPendingVersion.get();
				if (v6 == 0) {
					int v8 = v6.getVersion();
					if (v8 != v7) {
						int v9 = this.sSnapshotPendingVersion.get();
						long v11 = SystemClock.currentTimeMicro();
						if (v6 != 0) {
							int v12 = v6.getUsed();
							PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v15 = new ComputerEngine(v13,v9);
							long v17 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v11, v17, );
								Computer v10 = v15;
								this.sSnapshot.set(v10);
								Computer v20 = v10.use();
								Computer v1 = v20;
								String v21 = v1.getInstallerPackageName(p1);
								boolean v22 = TextUtils.isEmpty(v21);
								if (v22 != 0) {
									int v23 = Binder.getCallingUid();
									int v24 = UserHandle.getUserId(v23);
									ApplicationInfo v25 = v1.getApplicationInfo(p1, 0, v24);
									if (v25 == 0) {
										if ((ApplicationInfo.flags & 1) == 0) {
											return "preload";
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getInstallerForPackage(String p1){
	boolean v2 = Thread.holdsLock(this.mLock);
	if (v2 == 0) {
		Object v3 = this.sSnapshot.get();
		int v4 = this.sSnapshotPendingVersion.get();
		if (v3 == 0) {
			int v5 = v3.getVersion();
			if (v5 != v4) {
				Object v6 = this.sSnapshot.get();
				int v7 = this.sSnapshotPendingVersion.get();
				if (v6 == 0) {
					int v8 = v6.getVersion();
					if (v8 != v7) {
						int v9 = this.sSnapshotPendingVersion.get();
						long v11 = SystemClock.currentTimeMicro();
						if (v6 != 0) {
							PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v14 = new ComputerEngine(v12,v9);
							long v16 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v11, v16, );
								Computer v10 = v14;
								this.sSnapshot.set(v10);
								Computer v19 = v10.use();
								Computer v1 = v19;
								String v20 = v1.getInstallerPackageName(p1);
								boolean v21 = TextUtils.isEmpty(v20);
								if (v21 != 0) {
									int v22 = Binder.getCallingUid();
									int v23 = UserHandle.getUserId(v22);
									ApplicationInfo v24 = v1.getApplicationInfo(p1, 0, v23);
									if (v24 == 0) {
										if ((ApplicationInfo.flags & 1) == 0) {
											return "";
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.sSnapshot.get();\nint v4 = this.sSnapshotPendingVersion.get();\nPackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);\nComputerEngine v14 = new ComputerEngine(v12,v9);\nString v20 = v1.getInstallerPackageName(p1);', 'ApplicationInfo v24 = v1.getApplicationInfo(p1, 0, v23);\nif (v24 == 0) { if ((ApplicationInfo.flags & 1) == 0) { return "preload"; } }']

The method getInstallerForPackage has the following similar APIs:

- API Name: getAllPackages()[Ljava/lang/String; with Similarity Score: 0.9337387681007385
  - Access Control Level: NONE and the following code:
Object v3 = this.sSnapshot.get();
int v4 = this.sSnapshotPendingVersion.get();
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v14 = new ComputerEngine(v12,v9);
List v20 = v1.getAllPackages();
Object v22 = v20.toArray(v21);
return v22;

- API Name: getAllPackages()[Ljava/lang/String; with Similarity Score: 0.9284423589706421
  - Access Control Level: NONE and the following code:
Object v6 = this.sSnapshot.get();
int v7 = this.sSnapshotPendingVersion.get();
PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v15 = new ComputerEngine(v13,v9);
List v21 = v1.getAllPackages();
Object v23 = v21.toArray(v22);
return v23;

