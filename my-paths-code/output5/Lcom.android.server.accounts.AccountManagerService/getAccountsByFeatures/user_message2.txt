The method getAccountsByFeatures has the following code snippet:

This is path 1 for the API with depth 2:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("getAccounts: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				ArrayList v23 = new ArrayList();
				long v25 = Binder.clearCallingIdentity();
				Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
				Binder.restoreCallingIdentity(v25);
				Object v28 = LocalServices.getService(PackageManagerInterna.class);
				Iterator v29 = v26.iterator();
				boolean v30 = v29.hasNext();
				if (v30 == 0) {
					List v22 = v23;
					List v21 = v22;
					boolean v31 = v21.contains(p2);
					if (v31 != 0) {
						long v32 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v33 = p0.getUserAccounts(v20);
						if (p3 == 0) {
							if (p3.length != 0) {
								AccountManagerService$GetAccountsByTypeAndFeatureSession v34 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v33,p1,p2,p3,v1,p4,0);
								boolean v37 = Log.isLoggable("AccountManagerService", 2);
								if (v37 == 0) {
									StringBuilder v38 = new StringBuilder();
									StringBuilder v40 = v38.append("initiating bind to authenticator type ");
									StringBuilder v41 = v38.append(this.mAccountType);
									String v42 = v38.toString();
									int v43 = Log.v("AccountManagerService", v42);
									IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
									AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType);
									int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);
									if (v48 != 0) {
										int v49 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
										boolean v50 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v49);
										if (v50 != 0) {
											if (ComponentInfo.directBootAware != 0) {
												boolean v44 = 0;
												if (v44 != 0) {
													StringBuilder v58 = new StringBuilder();
													StringBuilder v60 = v58.append("bind attempt failed for ");
													long v62 = SystemClock.elapsedRealtime();
													String v63 = AccountManagerService$Session.toDebugString(v62);
													String v61 = v63;
													StringBuilder v64 = v58.append(v61);
													String v65 = v58.toString();
													int v66 = Log.d("AccountManagerService", v65);
													this.mNumErrors = (this.mNumErrors + 1);
													IAccountManagerResponse v68 = AccountManagerService$Session.getResponseAndClose();
													if (v68 == 0) {
														boolean v69 = Log.isLoggable("AccountManagerService", 2);
														if (v69 == 0) {
															StringBuilder v70 = new StringBuilder();
															Class v72 = AccountManagerService$Session.getClass();
															String v73 = v72.getSimpleName();
															StringBuilder v74 = v70.append(v73);
															StringBuilder v75 = v70.append(" calling onError() on response ");
															StringBuilder v76 = v70.append(v68);
															String v77 = v70.toString();
															int v78 = Log.v("AccountManagerService", v77);
															v68.onError(1, "bind failure");
															boolean v80 = Log.isLoggable("AccountManagerService", 2);
															if (v80 == 0) {
																int v81 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
																IAccountManager$Stub.restoreCallingIdentity(v32);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("getAccounts: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				ArrayList v23 = new ArrayList();
				long v25 = Binder.clearCallingIdentity();
				Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
				Binder.restoreCallingIdentity(v25);
				Object v28 = LocalServices.getService(PackageManagerInterna.class);
				Iterator v29 = v26.iterator();
				boolean v30 = v29.hasNext();
				if (v30 == 0) {
					List v22 = v23;
					List v21 = v22;
					boolean v31 = v21.contains(p2);
					if (v31 != 0) {
						long v32 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v33 = p0.getUserAccounts(v20);
						if (p3 == 0) {
							if (p3.length != 0) {
								AccountManagerService$GetAccountsByTypeAndFeatureSession v34 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v33,p1,p2,p3,v1,p4,0);
								boolean v37 = Log.isLoggable("AccountManagerService", 2);
								if (v37 == 0) {
									StringBuilder v38 = new StringBuilder();
									StringBuilder v40 = v38.append("initiating bind to authenticator type ");
									StringBuilder v41 = v38.append(this.mAccountType);
									String v42 = v38.toString();
									int v43 = Log.v("AccountManagerService", v42);
									IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
									AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType);
									int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);
									if (v48 != 0) {
										boolean v49 = Log.isLoggable("AccountManagerService", 2);
										if (v49 == 0) {
											StringBuilder v50 = new StringBuilder();
											StringBuilder v52 = v50.append("there is no authenticator for ");
											StringBuilder v53 = v50.append(this.mAccountType);
											StringBuilder v54 = v50.append(", bailing out");
											String v55 = v50.toString();
											int v56 = Log.v("AccountManagerService", v55);
											boolean v44 = 0;
											if (v44 != 0) {
												StringBuilder v57 = new StringBuilder();
												StringBuilder v59 = v57.append("bind attempt failed for ");
												long v61 = SystemClock.elapsedRealtime();
												String v62 = AccountManagerService$Session.toDebugString(v61);
												String v60 = v62;
												StringBuilder v63 = v57.append(v60);
												String v64 = v57.toString();
												int v65 = Log.d("AccountManagerService", v64);
												this.mNumErrors = (this.mNumErrors + 1);
												IAccountManagerResponse v67 = AccountManagerService$Session.getResponseAndClose();
												if (v67 == 0) {
													boolean v68 = Log.isLoggable("AccountManagerService", 2);
													if (v68 == 0) {
														StringBuilder v69 = new StringBuilder();
														Class v71 = AccountManagerService$Session.getClass();
														String v72 = v71.getSimpleName();
														StringBuilder v73 = v69.append(v72);
														StringBuilder v74 = v69.append(" calling onError() on response ");
														StringBuilder v75 = v69.append(v67);
														String v76 = v69.toString();
														int v77 = Log.v("AccountManagerService", v76);
														v67.onError(1, "bind failure");
														boolean v79 = Log.isLoggable("AccountManagerService", 2);
														if (v79 == 0) {
															int v80 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
															IAccountManager$Stub.restoreCallingIdentity(v32);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void getAccountsByFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("getAccounts: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				ArrayList v23 = new ArrayList();
				long v25 = Binder.clearCallingIdentity();
				Collection v26 = this.mAuthenticatorCache.getAllServices(p2);
				Binder.restoreCallingIdentity(v25);
				Object v28 = LocalServices.getService(PackageManagerInterna.class);
				Iterator v29 = v26.iterator();
				boolean v30 = v29.hasNext();
				if (v30 == 0) {
					List v22 = v23;
					List v21 = v22;
					boolean v31 = v21.contains(p2);
					if (v31 != 0) {
						long v32 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v33 = p0.getUserAccounts(v20);
						if (p3 == 0) {
							if (p3.length != 0) {
								boolean v35 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
								Preconditions.checkState((v35 ^ 1), "Method should not be called with cacheLock");
								if (p2 == 0) {
									Collection v37 = AccountManagerService$UserAccounts.accountCache.values();
									Iterator v38 = v37.iterator();
									boolean v39 = v38.hasNext();
									if (v39 == 0) {
										if ( != 0) {
											Account v40 = new Account();
											Collection v41 = AccountManagerService$UserAccounts.accountCache.values();
											Iterator v42 = v41.iterator();
											boolean v43 = v42.hasNext();
											if (v43 == 0) {
												if (p4 != 0) {
													String v45 = AccountManagerService.getPackageNameForUid(p3);
													LinkedHashMap v46 = new LinkedHashMap();
													if ( >= v40.length) {
														Map v48 = AccountManagerService.filterSharedAccounts(p1, v46, p3, p4);
														int v49 = v48.size();
														Account v50 = new Account(v49);
														Set v51 = v48.keySet();
														Object v52 = v51.toArray(v50);
														Account v44 = v52;
														Account v34 = v44;
														Bundle v53 = new Bundle();
														v53.putParcelableArray("accounts", v34);
														p0.onResult(p1, v53);
														IAccountManager$Stub.restoreCallingIdentity(v32);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nAuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType);\nRegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);', 'AccountManagerService$GetAccountsByTypeAndFeatureSession v34 = new AccountManagerService$GetAccountsByTypeAndFeatureSession(p0,v33,p1,p2,p3,v1,p4,0);\nboolean v35 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);\nPreconditions.checkState((v35 ^ 1), "Method should not be called with cacheLock");', 'Collection v37 = AccountManagerService$UserAccounts.accountCache.values();\nMap v48 = AccountManagerService.filterSharedAccounts(p1, v46, p3, p4);\nBundle v53 = new Bundle();\nv53.putParcelableArray("accounts", v34);\np0.onResult(p1, v53);']

The method getAccountsByFeatures has the following similar APIs:

- API Name: startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.9935157895088196
  - Access Control Level: SYS_OR_SIG and the following code:
IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);

- API Name: hasFeatures(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9932807683944702
  - Access Control Level: SYS_OR_SIG and the following code:
IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);

