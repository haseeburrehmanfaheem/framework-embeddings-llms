The method editProperties has the following code snippet:

This is path 1 for the API with depth 2:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("editProperties: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", expectActivityLaunch ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", caller's uid ");
		StringBuilder v12 = v3.append(v1);
		StringBuilder v13 = v3.append(", pid ");
		int v14 = Binder.getCallingPid();
		StringBuilder v15 = v3.append(v14);
		String v16 = v3.toString();
		int v17 = Log.v("AccountManagerService", v16);
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				if (p2 != 0) {
					List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v20 = v21;
					boolean v22 = v20.contains(p2);
					boolean v19 = v22;
					if (v19 != 0) {
						boolean v23 = p0.isSystemUid(v1);
						if (v23 == 0) {
							long v24 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);
							AccountManagerService$16 v26 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
							boolean v29 = Log.isLoggable("AccountManagerService", 2);
							if (v29 == 0) {
								StringBuilder v30 = new StringBuilder();
								StringBuilder v32 = v30.append("initiating bind to authenticator type ");
								StringBuilder v33 = v30.append(this.mAccountType);
								String v34 = v30.toString();
								int v35 = Log.v("AccountManagerService", v34);
								IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
								AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType);
								int v39 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
								RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);
								if (v40 != 0) {
									int v41 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									boolean v42 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v41);
									if (v42 != 0) {
										if (ComponentInfo.directBootAware != 0) {
											boolean v36 = 0;
											if (v36 != 0) {
												StringBuilder v50 = new StringBuilder();
												StringBuilder v52 = v50.append("bind attempt failed for ");
												long v54 = SystemClock.elapsedRealtime();
												String v55 = AccountManagerService$Session.toDebugString(v54);
												String v53 = v55;
												StringBuilder v56 = v50.append(v53);
												String v57 = v50.toString();
												int v58 = Log.d("AccountManagerService", v57);
												this.mNumErrors = (this.mNumErrors + 1);
												IAccountManagerResponse v60 = AccountManagerService$Session.getResponseAndClose();
												if (v60 == 0) {
													boolean v61 = Log.isLoggable("AccountManagerService", 2);
													if (v61 == 0) {
														StringBuilder v62 = new StringBuilder();
														Class v64 = AccountManagerService$Session.getClass();
														String v65 = v64.getSimpleName();
														StringBuilder v66 = v62.append(v65);
														StringBuilder v67 = v62.append(" calling onError() on response ");
														StringBuilder v68 = v62.append(v60);
														String v69 = v62.toString();
														int v70 = Log.v("AccountManagerService", v69);
														v60.onError(1, "bind failure");
														boolean v72 = Log.isLoggable("AccountManagerService", 2);
														if (v72 == 0) {
															int v73 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
															IAccountManager$Stub.restoreCallingIdentity(v24);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("editProperties: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", expectActivityLaunch ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", caller's uid ");
		StringBuilder v12 = v3.append(v1);
		StringBuilder v13 = v3.append(", pid ");
		int v14 = Binder.getCallingPid();
		StringBuilder v15 = v3.append(v14);
		String v16 = v3.toString();
		int v17 = Log.v("AccountManagerService", v16);
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				if (p2 != 0) {
					List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v20 = v21;
					boolean v22 = v20.contains(p2);
					boolean v19 = v22;
					if (v19 != 0) {
						long v23 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v24 = p0.getUserAccounts(v18);
						AccountManagerService$16 v25 = new AccountManagerService$16(p0,v24,p1,p2,p3,1,0,0,p2);
						boolean v28 = Log.isLoggable("AccountManagerService", 2);
						if (v28 == 0) {
							StringBuilder v29 = new StringBuilder();
							StringBuilder v31 = v29.append("initiating bind to authenticator type ");
							StringBuilder v32 = v29.append(this.mAccountType);
							String v33 = v29.toString();
							int v34 = Log.v("AccountManagerService", v33);
							IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
							AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
							int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
							if (v39 != 0) {
								int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
								boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
								if (v41 != 0) {
									if (ComponentInfo.directBootAware != 0) {
										boolean v35 = 0;
										if (v35 != 0) {
											StringBuilder v49 = new StringBuilder();
											StringBuilder v51 = v49.append("bind attempt failed for ");
											long v53 = SystemClock.elapsedRealtime();
											String v54 = AccountManagerService$Session.toDebugString(v53);
											String v52 = v54;
											StringBuilder v55 = v49.append(v52);
											String v56 = v49.toString();
											int v57 = Log.d("AccountManagerService", v56);
											this.mNumErrors = (this.mNumErrors + 1);
											IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
											if (v59 == 0) {
												boolean v60 = Log.isLoggable("AccountManagerService", 2);
												if (v60 == 0) {
													StringBuilder v61 = new StringBuilder();
													Class v63 = AccountManagerService$Session.getClass();
													String v64 = v63.getSimpleName();
													StringBuilder v65 = v61.append(v64);
													StringBuilder v66 = v61.append(" calling onError() on response ");
													StringBuilder v67 = v61.append(v59);
													String v68 = v61.toString();
													int v69 = Log.v("AccountManagerService", v68);
													v59.onError(1, "bind failure");
													boolean v71 = Log.isLoggable("AccountManagerService", 2);
													if (v71 == 0) {
														int v72 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
														IAccountManager$Stub.restoreCallingIdentity(v23);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void editProperties(IAccountManagerResponse p1, String p2, boolean p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("editProperties: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", expectActivityLaunch ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", caller's uid ");
		StringBuilder v12 = v3.append(v1);
		StringBuilder v13 = v3.append(", pid ");
		int v14 = Binder.getCallingPid();
		StringBuilder v15 = v3.append(v14);
		String v16 = v3.toString();
		int v17 = Log.v("AccountManagerService", v16);
		if (p1 == 0) {
			if (p2 == 0) {
				int v18 = UserHandle.getCallingUserId();
				if (p2 != 0) {
					List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v20 = v21;
					boolean v22 = v20.contains(p2);
					boolean v19 = v22;
					if (v19 != 0) {
						boolean v23 = p0.isSystemUid(v1);
						if (v23 == 0) {
							long v24 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);
							AccountManagerService$16 v26 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);
							boolean v29 = Log.isLoggable("AccountManagerService", 2);
							if (v29 == 0) {
								StringBuilder v30 = new StringBuilder();
								StringBuilder v32 = v30.append("initiating bind to authenticator type ");
								StringBuilder v33 = v30.append(this.mAccountType);
								String v34 = v30.toString();
								int v35 = Log.v("AccountManagerService", v34);
								IAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
								AuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType);
								int v39 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
								RegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);
								if (v40 != 0) {
									boolean v41 = Log.isLoggable("AccountManagerService", 2);
									if (v41 == 0) {
										StringBuilder v42 = new StringBuilder();
										StringBuilder v44 = v42.append("there is no authenticator for ");
										StringBuilder v45 = v42.append(this.mAccountType);
										StringBuilder v46 = v42.append(", bailing out");
										String v47 = v42.toString();
										int v48 = Log.v("AccountManagerService", v47);
										boolean v36 = 0;
										if (v36 != 0) {
											StringBuilder v49 = new StringBuilder();
											StringBuilder v51 = v49.append("bind attempt failed for ");
											long v53 = SystemClock.elapsedRealtime();
											String v54 = AccountManagerService$Session.toDebugString(v53);
											String v52 = v54;
											StringBuilder v55 = v49.append(v52);
											String v56 = v49.toString();
											int v57 = Log.d("AccountManagerService", v56);
											this.mNumErrors = (this.mNumErrors + 1);
											IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
											if (v59 == 0) {
												boolean v60 = Log.isLoggable("AccountManagerService", 2);
												if (v60 == 0) {
													StringBuilder v61 = new StringBuilder();
													Class v63 = AccountManagerService$Session.getClass();
													String v64 = v63.getSimpleName();
													StringBuilder v65 = v61.append(v64);
													StringBuilder v66 = v61.append(" calling onError() on response ");
													StringBuilder v67 = v61.append(v59);
													String v68 = v61.toString();
													int v69 = Log.v("AccountManagerService", v68);
													v59.onError(1, "bind failure");
													boolean v71 = Log.isLoggable("AccountManagerService", 2);
													if (v71 == 0) {
														int v72 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
														IAccountManager$Stub.restoreCallingIdentity(v24);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$16 v26 = new AccountManagerService$16(p0,v25,p1,p2,p3,1,0,0,p2);\nIAccountAuthenticatorCache v37 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nAuthenticatorDescription v38 = AuthenticatorDescription.newKey(this.mAccountType);\nRegisteredServicesCache$ServiceInfo v40 = v37.getServiceInfo(v38, v39);', 'boolean v23 = p0.isSystemUid(v1);\nlong v24 = IAccountManager$Stub.clearCallingIdentity();\nIAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();\nv59.onError(1, "bind failure");']

The method editProperties has the following similar APIs:

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9707134962081909
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);

- API Name: updateCredentials(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.9690839052200317
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);

