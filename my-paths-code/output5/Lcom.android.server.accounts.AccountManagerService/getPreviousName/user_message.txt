This is path 1 for the API with depth 2:
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable("AccountManagerService", 2);
	if (v1 == 0) {
		StringBuilder v2 = new StringBuilder();
		StringBuilder v4 = v2.append("getPreviousName: ");
		StringBuilder v5 = v2.append(p1);
		StringBuilder v6 = v2.append(", caller's uid ");
		int v7 = Binder.getCallingUid();
		StringBuilder v8 = v2.append(v7);
		StringBuilder v9 = v2.append(", pid ");
		int v10 = Binder.getCallingPid();
		StringBuilder v11 = v2.append(v10);
		String v12 = v2.toString();
		int v13 = Log.v("AccountManagerService", v12);
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v15);
		AccountManagerService$UserAccounts v17 = v18;
		if (p1 != 0) {
			HashMap v20 = this.previousNameCache;
			Object v21 = v20.get(p1);
			if (v21 != 0) {
				SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabase();
				String v24 = new String(1);
				String v25 = new String(2);
				Cursor v26 = v23.query("accounts", v24, "name=? AND type=?", v25, 0, 0, 0);
				boolean v27 = v26.moveToNext();
				if (v27 == 0) {
					String v28 = v26.getString(0);
					v26.close();
					String v22 = v28;
					AtomicReference v30 = new AtomicReference(v22);
					HashMap v32 = this.previousNameCache;
					Object v33 = v32.put(p1, v30);
					String v19 = v22;
					IAccountManager$Stub.restoreCallingIdentity(v16);
					return v19;
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable("AccountManagerService", 2);
	if (v1 == 0) {
		StringBuilder v2 = new StringBuilder();
		StringBuilder v4 = v2.append("getPreviousName: ");
		StringBuilder v5 = v2.append(p1);
		StringBuilder v6 = v2.append(", caller's uid ");
		int v7 = Binder.getCallingUid();
		StringBuilder v8 = v2.append(v7);
		StringBuilder v9 = v2.append(", pid ");
		int v10 = Binder.getCallingPid();
		StringBuilder v11 = v2.append(v10);
		String v12 = v2.toString();
		int v13 = Log.v("AccountManagerService", v12);
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		long v16 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v18 = AccountManagerService.getUserAccountsNotChecked(v15);
		AccountManagerService$UserAccounts v17 = v18;
		if (p1 != 0) {
			HashMap v20 = this.previousNameCache;
			Object v21 = v20.get(p1);
			if (v21 != 0) {
				SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabase();
				String v24 = new String(1);
				String v25 = new String(2);
				Cursor v26 = v23.query("accounts", v24, "name=? AND type=?", v25, 0, 0, 0);
				boolean v27 = v26.moveToNext();
				if (v27 == 0) {
					v26.close();
					String v22 = 0;
					AtomicReference v29 = new AtomicReference(v22);
					HashMap v31 = this.previousNameCache;
					Object v32 = v31.put(p1, v29);
					String v19 = v22;
					IAccountManager$Stub.restoreCallingIdentity(v16);
					return v19;
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public String getPreviousName(Account p1){
	boolean v1 = Log.isLoggable("AccountManagerService", 2);
	if (v1 == 0) {
		Object v2 = Objects.requireNonNull(p1, "account cannot be null");
		int v3 = UserHandle.getCallingUserId();
		long v4 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
		AccountManagerService$UserAccounts v5 = v6;
		if (p1 != 0) {
			HashMap v8 = this.previousNameCache;
			Object v9 = v8.get(p1);
			if (v9 != 0) {
				SQLiteDatabase v11 = this.mDeDatabase.getReadableDatabase();
				String v12 = new String(1);
				String v13 = new String(2);
				Cursor v14 = v11.query("accounts", v12, "name=? AND type=?", v13, 0, 0, 0);
				boolean v15 = v14.moveToNext();
				if (v15 == 0) {
					String v16 = v14.getString(0);
					v14.close();
					String v10 = v16;
					AtomicReference v18 = new AtomicReference(v10);
					HashMap v20 = this.previousNameCache;
					Object v21 = v20.put(p1, v18);
					String v7 = v10;
					IAccountManager$Stub.restoreCallingIdentity(v4);
					return v7;
				}
			}
		}
	}
}
