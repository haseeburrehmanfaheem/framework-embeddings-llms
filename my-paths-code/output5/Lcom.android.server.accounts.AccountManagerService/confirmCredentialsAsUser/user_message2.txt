The method confirmCredentialsAsUser has the following code snippet:

This is path 1 for the API with depth 2:
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("confirmCredentials: ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", expectActivityLaunch ");
		StringBuilder v11 = v4.append(p4);
		StringBuilder v12 = v4.append(", caller's uid ");
		StringBuilder v13 = v4.append(v2);
		StringBuilder v14 = v4.append(", pid ");
		int v15 = Binder.getCallingPid();
		StringBuilder v16 = v4.append(v15);
		String v17 = v4.toString();
		int v18 = Log.v("AccountManagerService", v17);
		if (v21 == 0) {
			boolean v19 = ;
			if (v19 != 0) {
				if (p1 == 0) {
					if (p2 == 0) {
						long v22 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
						AccountManagerService$UserAccounts v23 = v24;
						AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
						boolean v28 = Log.isLoggable("AccountManagerService", 2);
						if (v28 == 0) {
							StringBuilder v29 = new StringBuilder();
							StringBuilder v31 = v29.append("initiating bind to authenticator type ");
							StringBuilder v32 = v29.append(this.mAccountType);
							String v33 = v29.toString();
							int v34 = Log.v("AccountManagerService", v33);
							IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
							AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
							int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
							if (v39 != 0) {
								int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
								boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
								if (v41 != 0) {
									if (ComponentInfo.directBootAware != 0) {
										boolean v35 = 0;
										if (v35 != 0) {
											StringBuilder v49 = new StringBuilder();
											StringBuilder v51 = v49.append("bind attempt failed for ");
											long v53 = SystemClock.elapsedRealtime();
											String v54 = AccountManagerService$Session.toDebugString(v53);
											String v52 = v54;
											StringBuilder v55 = v49.append(v52);
											String v56 = v49.toString();
											int v57 = Log.d("AccountManagerService", v56);
											this.mNumErrors = (this.mNumErrors + 1);
											IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
											if (v59 == 0) {
												boolean v60 = Log.isLoggable("AccountManagerService", 2);
												if (v60 == 0) {
													StringBuilder v61 = new StringBuilder();
													Class v63 = AccountManagerService$Session.getClass();
													String v64 = v63.getSimpleName();
													StringBuilder v65 = v61.append(v64);
													StringBuilder v66 = v61.append(" calling onError() on response ");
													StringBuilder v67 = v61.append(v59);
													String v68 = v61.toString();
													int v69 = Log.v("AccountManagerService", v68);
													v59.onError(1, "bind failure");
													boolean v71 = Log.isLoggable("AccountManagerService", 2);
													if (v71 == 0) {
														int v72 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
														IAccountManager$Stub.restoreCallingIdentity(v22);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("confirmCredentials: ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", expectActivityLaunch ");
		StringBuilder v11 = v4.append(p4);
		StringBuilder v12 = v4.append(", caller's uid ");
		StringBuilder v13 = v4.append(v2);
		StringBuilder v14 = v4.append(", pid ");
		int v15 = Binder.getCallingPid();
		StringBuilder v16 = v4.append(v15);
		String v17 = v4.toString();
		int v18 = Log.v("AccountManagerService", v17);
		if (v21 == 0) {
			boolean v19 = ;
			if (v19 != 0) {
				if (p1 == 0) {
					if (p2 == 0) {
						long v22 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
						AccountManagerService$UserAccounts v23 = v24;
						AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
						boolean v28 = Log.isLoggable("AccountManagerService", 2);
						if (v28 == 0) {
							StringBuilder v29 = new StringBuilder();
							StringBuilder v31 = v29.append("initiating bind to authenticator type ");
							StringBuilder v32 = v29.append(this.mAccountType);
							String v33 = v29.toString();
							int v34 = Log.v("AccountManagerService", v33);
							IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
							AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
							int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
							if (v39 != 0) {
								int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
								boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
								if (v41 != 0) {
									if (ComponentInfo.directBootAware != 0) {
										boolean v35 = 0;
										if (v35 != 0) {
											StringBuilder v49 = new StringBuilder();
											StringBuilder v51 = v49.append("bind attempt failed for ");
											long v53 = SystemClock.elapsedRealtime();
											String v54 = AccountManagerService$Session.toDebugString(v53);
											String v52 = v54;
											StringBuilder v55 = v49.append(v52);
											String v56 = v49.toString();
											int v57 = Log.d("AccountManagerService", v56);
											this.mNumErrors = (this.mNumErrors + 1);
											IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
											if (v59 == 0) {
												boolean v60 = Log.isLoggable("AccountManagerService", 2);
												if (v60 == 0) {
													StringBuilder v61 = new StringBuilder();
													Class v63 = AccountManagerService$Session.getClass();
													String v64 = v63.getSimpleName();
													StringBuilder v65 = v61.append(v64);
													StringBuilder v66 = v61.append(" calling onError() on response ");
													StringBuilder v67 = v61.append(v59);
													String v68 = v61.toString();
													int v69 = Log.v("AccountManagerService", v68);
													v59.onError(1, "bind failure");
													boolean v71 = Log.isLoggable("AccountManagerService", 2);
													if (v71 == 0) {
														int v72 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
														IAccountManager$Stub.restoreCallingIdentity(v22);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void confirmCredentialsAsUser(IAccountManagerResponse p1, Account p2, Bundle p3, boolean p4, int p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("confirmCredentials: ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", expectActivityLaunch ");
		StringBuilder v11 = v4.append(p4);
		StringBuilder v12 = v4.append(", caller's uid ");
		StringBuilder v13 = v4.append(v2);
		StringBuilder v14 = v4.append(", pid ");
		int v15 = Binder.getCallingPid();
		StringBuilder v16 = v4.append(v15);
		String v17 = v4.toString();
		int v18 = Log.v("AccountManagerService", v17);
		if (v21 == 0) {
			boolean v19 = ;
			if (v19 != 0) {
				if (p1 == 0) {
					if (p2 == 0) {
						long v22 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
						AccountManagerService$UserAccounts v23 = v24;
						AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);
						boolean v28 = Log.isLoggable("AccountManagerService", 2);
						if (v28 == 0) {
							StringBuilder v29 = new StringBuilder();
							StringBuilder v31 = v29.append("initiating bind to authenticator type ");
							StringBuilder v32 = v29.append(this.mAccountType);
							String v33 = v29.toString();
							int v34 = Log.v("AccountManagerService", v33);
							IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
							AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
							int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
							if (v39 != 0) {
								boolean v40 = Log.isLoggable("AccountManagerService", 2);
								if (v40 == 0) {
									StringBuilder v41 = new StringBuilder();
									StringBuilder v43 = v41.append("there is no authenticator for ");
									StringBuilder v44 = v41.append(this.mAccountType);
									StringBuilder v45 = v41.append(", bailing out");
									String v46 = v41.toString();
									int v47 = Log.v("AccountManagerService", v46);
									boolean v35 = 0;
									if (v35 != 0) {
										StringBuilder v48 = new StringBuilder();
										StringBuilder v50 = v48.append("bind attempt failed for ");
										long v52 = SystemClock.elapsedRealtime();
										String v53 = AccountManagerService$Session.toDebugString(v52);
										String v51 = v53;
										StringBuilder v54 = v48.append(v51);
										String v55 = v48.toString();
										int v56 = Log.d("AccountManagerService", v55);
										this.mNumErrors = (this.mNumErrors + 1);
										IAccountManagerResponse v58 = AccountManagerService$Session.getResponseAndClose();
										if (v58 == 0) {
											boolean v59 = Log.isLoggable("AccountManagerService", 2);
											if (v59 == 0) {
												StringBuilder v60 = new StringBuilder();
												Class v62 = AccountManagerService$Session.getClass();
												String v63 = v62.getSimpleName();
												StringBuilder v64 = v60.append(v63);
												StringBuilder v65 = v60.append(" calling onError() on response ");
												StringBuilder v66 = v60.append(v58);
												String v67 = v60.toString();
												int v68 = Log.v("AccountManagerService", v67);
												v58.onError(1, "bind failure");
												boolean v70 = Log.isLoggable("AccountManagerService", 2);
												if (v70 == 0) {
													int v71 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
													IAccountManager$Stub.restoreCallingIdentity(v22);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);\nIAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nAccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);']

The method confirmCredentialsAsUser has the following similar APIs:

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9281232357025146
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9269542694091797
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$15 v7 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
IAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);

