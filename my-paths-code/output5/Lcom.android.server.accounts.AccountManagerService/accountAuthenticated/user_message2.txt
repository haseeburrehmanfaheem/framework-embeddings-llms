The method accountAuthenticated has the following code snippet:

This is path 1 for the API with depth 2:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = new Object(2);
		Integer v4 = Integer.valueOf(v1);
		String v5 = String.format("accountAuthenticated( account: %s, callerUid: %s)", v3);
		int v6 = Log.v("AccountManagerService", v5);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v10 = v11;
			boolean v12 = v10.contains(Account.type);
			boolean v9 = v12;
			if (v9 == 0) {
				Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v15 == 0) {
					boolean v16 = v15.isActiveProfileOwner(p2);
					if (v16 != 0) {
						boolean v17 = v15.isActiveDeviceOwner(p2);
						if (v17 == 0) {
							boolean v14 = ;
							if (v14 == 0) {
								UserManager v18 = AccountManagerService.getUserManager();
								UserHandle v19 = new UserHandle(v8);
								Bundle v21 = v18.getUserRestrictions(v19);
								boolean v22 = v21.getBoolean("no_modify_accounts");
								if (v22 == 0) {
									boolean v13 = 0;
									if (v13 == 0) {
										Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v25 == 0) {
											boolean v26 = v25.isActiveProfileOwner(p3);
											if (v26 != 0) {
												boolean v27 = v25.isActiveDeviceOwner(p3);
												if (v27 == 0) {
													boolean v24 = ;
													if (v24 == 0) {
														Object v28 = this.mContext.getSystemService("device_policy");
														String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
														if (v29 != 0) {
															if ( >= v29.length) {
																boolean v30 = v29[].equals(Account.type);
																if (v30 == 0) {
																	boolean v23 = 0;
																	if (v23 != 0) {
																		long v31 = IAccountManager$Stub.clearCallingIdentity();
																		AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8);
																		int v35 = UserHandle.getCallingUserId();
																		AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35);
																		AccountManagerService$UserAccounts v34 = v36;
																		SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase();
																		ContentValues v39 = new ContentValues();
																		long v41 = System.currentTimeMillis();
																		Long v42 = Long.valueOf(v41);
																		v39.put("last_password_entry_time_millis_epoch", v42);
																		String v44 = new String(2);
																		int v45 = v38.update("accounts", v39, "name=? AND type=?", v44);
																		if (v45 <= 0) {
																			boolean v37 = ;
																			boolean v33 = v37;
																			IAccountManager$Stub.restoreCallingIdentity(v31);
																			return v33;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = new Object(2);
		Integer v4 = Integer.valueOf(v1);
		String v5 = String.format("accountAuthenticated( account: %s, callerUid: %s)", v3);
		int v6 = Log.v("AccountManagerService", v5);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v10 = v11;
			boolean v12 = v10.contains(Account.type);
			boolean v9 = v12;
			if (v9 == 0) {
				Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v15 == 0) {
					boolean v16 = v15.isActiveProfileOwner(p2);
					if (v16 != 0) {
						boolean v17 = v15.isActiveDeviceOwner(p2);
						if (v17 == 0) {
							boolean v14 = ;
							if (v14 == 0) {
								UserManager v18 = AccountManagerService.getUserManager();
								UserHandle v19 = new UserHandle(v8);
								Bundle v21 = v18.getUserRestrictions(v19);
								boolean v22 = v21.getBoolean("no_modify_accounts");
								if (v22 == 0) {
									boolean v13 = 1;
									if (v13 == 0) {
										Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v25 == 0) {
											boolean v26 = v25.isActiveProfileOwner(p3);
											if (v26 != 0) {
												boolean v27 = v25.isActiveDeviceOwner(p3);
												if (v27 == 0) {
													boolean v24 = ;
													if (v24 == 0) {
														Object v28 = this.mContext.getSystemService("device_policy");
														String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
														if (v29 != 0) {
															if ( >= v29.length) {
																boolean v30 = v29[].equals(Account.type);
																if (v30 == 0) {
																	boolean v23 = 0;
																	if (v23 != 0) {
																		long v31 = IAccountManager$Stub.clearCallingIdentity();
																		AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8);
																		int v35 = UserHandle.getCallingUserId();
																		AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35);
																		AccountManagerService$UserAccounts v34 = v36;
																		SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase();
																		ContentValues v39 = new ContentValues();
																		long v41 = System.currentTimeMillis();
																		Long v42 = Long.valueOf(v41);
																		v39.put("last_password_entry_time_millis_epoch", v42);
																		String v44 = new String(2);
																		int v45 = v38.update("accounts", v39, "name=? AND type=?", v44);
																		if (v45 <= 0) {
																			boolean v37 = ;
																			boolean v33 = v37;
																			IAccountManager$Stub.restoreCallingIdentity(v31);
																			return v33;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean accountAuthenticated(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = new Object(2);
		Integer v4 = Integer.valueOf(v1);
		String v5 = String.format("accountAuthenticated( account: %s, callerUid: %s)", v3);
		int v6 = Log.v("AccountManagerService", v5);
		Object v7 = Objects.requireNonNull(p1, "account cannot be null");
		int v8 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v10 = v11;
			boolean v12 = v10.contains(Account.type);
			boolean v9 = v12;
			if (v9 == 0) {
				Object v15 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v15 == 0) {
					boolean v16 = v15.isActiveProfileOwner(p2);
					if (v16 != 0) {
						boolean v17 = v15.isActiveDeviceOwner(p2);
						if (v17 == 0) {
							boolean v14 = ;
							if (v14 == 0) {
								UserManager v18 = AccountManagerService.getUserManager();
								UserHandle v19 = new UserHandle(v8);
								Bundle v21 = v18.getUserRestrictions(v19);
								boolean v22 = v21.getBoolean("no_modify_accounts");
								if (v22 == 0) {
									boolean v13 = 0;
									if (v13 == 0) {
										Object v25 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v25 == 0) {
											boolean v26 = v25.isActiveProfileOwner(p3);
											if (v26 != 0) {
												boolean v27 = v25.isActiveDeviceOwner(p3);
												if (v27 == 0) {
													boolean v24 = ;
													if (v24 == 0) {
														Object v28 = this.mContext.getSystemService("device_policy");
														String v29 = v28.getAccountTypesWithManagementDisabledAsUser(v8);
														if (v29 != 0) {
															if ( >= v29.length) {
																boolean v30 = v29[].equals(Account.type);
																if (v30 == 0) {
																	boolean v23 = 0;
																	if (v23 != 0) {
																		long v31 = IAccountManager$Stub.clearCallingIdentity();
																		AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8);
																		int v35 = UserHandle.getCallingUserId();
																		AccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35);
																		AccountManagerService$UserAccounts v34 = v36;
																		SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase();
																		ContentValues v39 = new ContentValues();
																		long v41 = System.currentTimeMillis();
																		Long v42 = Long.valueOf(v41);
																		v39.put("last_password_entry_time_millis_epoch", v42);
																		String v44 = new String(2);
																		int v45 = v38.update("accounts", v39, "name=? AND type=?", v44);
																		if (v45 <= 0) {
																			boolean v37 = ;
																			boolean v33 = v37;
																			IAccountManager$Stub.restoreCallingIdentity(v31);
																			return v33;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SQLiteDatabase v38 = this.mDeDatabase.getWritableDatabase();\nContentValues v39 = new ContentValues();\nlong v41 = System.currentTimeMillis();\nLong v42 = Long.valueOf(v41);\nv39.put("last_password_entry_time_millis_epoch", v42);\nString v44 = new String(2);\nint v45 = v38.update("accounts", v39, "name=? AND type=?", v44);', 'AccountManagerService$UserAccounts v32 = p0.getUserAccounts(v8);\nint v35 = UserHandle.getCallingUserId();\nAccountManagerService$UserAccounts v36 = AccountManagerService.getUserAccounts(v35);\nAccountManagerService$UserAccounts v34 = v36;', 'List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nList v10 = v11;\nboolean v12 = v10.contains(Account.type);']

The method accountAuthenticated has the following similar APIs:

- API Name: getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.9343306422233582
  - Access Control Level: SYS_OR_SIG and the following code:
List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
List v7 = v8;
boolean v9 = v7.contains(p1);

- API Name: setPassword(Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9243442416191101
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
v24.beginTransaction();
ContentValues v36 = new ContentValues();
v36.put("password", p3);
int v41 = v35.update("ceDb.accounts", v36, "_id=?", v39);

