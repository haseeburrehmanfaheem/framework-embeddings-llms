The method addAccountExplicitlyWithVisibility has the following code snippet:

This is path 1 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable("AccountManagerService", 2);
	if (v4 == 0) {
		StringBuilder v5 = new StringBuilder();
		StringBuilder v7 = v5.append("addAccountExplicitly: ");
		StringBuilder v8 = v5.append(p1);
		StringBuilder v9 = v5.append(", caller's uid ");
		StringBuilder v10 = v5.append(v2);
		StringBuilder v11 = v5.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v5.append(v12);
		String v14 = v5.toString();
		int v15 = Log.v("AccountManagerService", v14);
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v18 = v19;
			boolean v20 = v18.contains(Account.type);
			boolean v17 = v20;
			if (v17 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v3);
				Bundle v24 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v25 = Account.name.length();
						if (v25 <= 200) {
							if (Account.type == 0) {
								int v26 = Account.type.length();
								if (v26 <= 200) {
									int v27 = this.userId;
									boolean v29 = this.mLocalUnlockedUsers.get(v27);
									boolean v28 = v29;
									if (v28 != 0) {
										SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase();
										v31.beginTransaction();
										SQLiteDatabase v34 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
										String v35 = new String(1);
										String v36 = new String(2);
										Cursor v37 = v34.query("ceDb.accounts", v35, "name=? AND type=?", v36, 0, 0, 0);
										boolean v38 = v37.moveToNext();
										if (v38 == 0) {
											long v39 = v37.getLong(0);
											v37.close();
											long v33 = v39;
											if ((v33 < 0) < 0) {
												SQLiteDatabase v42 = this.mDeDatabase.getReadableDatabase();
												LinkedHashMap v43 = new LinkedHashMap();
												String v45 = new String(3);
												Cursor v46 = v42.query("accounts", v45, 0, 0, 0, 0, "_id");
												boolean v47 = v46.moveToNext();
												if (v47 == 0) {
													v46.close();
													Map v41 = v43;
													int v49 = v41.size();
													if (v49 <= 100) {
														StringBuilder v50 = new StringBuilder();
														StringBuilder v52 = v50.append("insertAccountIntoDatabase: ");
														String v53 = p1.toSafeString();
														StringBuilder v54 = v50.append(v53);
														StringBuilder v55 = v50.append(", skipping since more than 50 accounts on device exist");
														String v56 = v50.toString();
														int v57 = Log.w("AccountManagerService", v56);
														SQLiteDatabase v59 = this.mDeDatabase.getWritableDatabase();
														v59.endTransaction();
														boolean v23 = 0;
														IAccountManager$Stub.restoreCallingIdentity(v21);
														return v23;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable("AccountManagerService", 2);
	if (v4 == 0) {
		StringBuilder v5 = new StringBuilder();
		StringBuilder v7 = v5.append("addAccountExplicitly: ");
		StringBuilder v8 = v5.append(p1);
		StringBuilder v9 = v5.append(", caller's uid ");
		StringBuilder v10 = v5.append(v2);
		StringBuilder v11 = v5.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v5.append(v12);
		String v14 = v5.toString();
		int v15 = Log.v("AccountManagerService", v14);
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v18 = v19;
			boolean v20 = v18.contains(Account.type);
			boolean v17 = v20;
			if (v17 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v3);
				Bundle v24 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v25 = Account.name.length();
						if (v25 <= 200) {
							if (Account.type == 0) {
								int v26 = Account.type.length();
								if (v26 <= 200) {
									int v27 = this.userId;
									boolean v29 = this.mLocalUnlockedUsers.get(v27);
									boolean v28 = v29;
									if (v28 != 0) {
										SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase();
										v31.beginTransaction();
										SQLiteDatabase v34 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
										String v35 = new String(1);
										String v36 = new String(2);
										Cursor v37 = v34.query("ceDb.accounts", v35, "name=? AND type=?", v36, 0, 0, 0);
										boolean v38 = v37.moveToNext();
										if (v38 == 0) {
											v37.close();
											long v33 = -1;
											if ((v33 < 0) < 0) {
												SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabase();
												LinkedHashMap v42 = new LinkedHashMap();
												String v44 = new String(3);
												Cursor v45 = v41.query("accounts", v44, 0, 0, 0, 0, "_id");
												boolean v46 = v45.moveToNext();
												if (v46 == 0) {
													v45.close();
													Map v40 = v42;
													int v48 = v40.size();
													if (v48 <= 100) {
														StringBuilder v49 = new StringBuilder();
														StringBuilder v51 = v49.append("insertAccountIntoDatabase: ");
														String v52 = p1.toSafeString();
														StringBuilder v53 = v49.append(v52);
														StringBuilder v54 = v49.append(", skipping since more than 50 accounts on device exist");
														String v55 = v49.toString();
														int v56 = Log.w("AccountManagerService", v55);
														SQLiteDatabase v58 = this.mDeDatabase.getWritableDatabase();
														v58.endTransaction();
														boolean v23 = 0;
														IAccountManager$Stub.restoreCallingIdentity(v21);
														return v23;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean addAccountExplicitlyWithVisibility(Account p1, String p2, Bundle p3, Map p4, String p5){
	Bundle v1 = Bundle.setDefusable(p3, 1);
	int v2 = Binder.getCallingUid();
	int v3 = UserHandle.getCallingUserId();
	boolean v4 = Log.isLoggable("AccountManagerService", 2);
	if (v4 == 0) {
		Object v5 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v7 = v8;
			boolean v9 = v7.contains(Account.type);
			boolean v6 = v9;
			if (v6 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v3);
				Bundle v13 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v14 = Account.name.length();
						if (v14 <= 200) {
							if (Account.type == 0) {
								int v15 = Account.type.length();
								if (v15 <= 200) {
									int v16 = this.userId;
									boolean v18 = this.mLocalUnlockedUsers.get(v16);
									boolean v17 = v18;
									if (v17 != 0) {
										SQLiteDatabase v20 = this.mDeDatabase.getWritableDatabase();
										v20.beginTransaction();
										SQLiteDatabase v23 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
										String v24 = new String(1);
										String v25 = new String(2);
										Cursor v26 = v23.query("ceDb.accounts", v24, "name=? AND type=?", v25, 0, 0, 0);
										boolean v27 = v26.moveToNext();
										if (v27 == 0) {
											long v28 = v26.getLong(0);
											v26.close();
											long v22 = v28;
											if ((v22 < 0) < 0) {
												SQLiteDatabase v31 = this.mDeDatabase.getReadableDatabase();
												LinkedHashMap v32 = new LinkedHashMap();
												String v34 = new String(3);
												Cursor v35 = v31.query("accounts", v34, 0, 0, 0, 0, "_id");
												boolean v36 = v35.moveToNext();
												if (v36 == 0) {
													v35.close();
													Map v30 = v32;
													int v38 = v30.size();
													if (v38 <= 100) {
														StringBuilder v39 = new StringBuilder();
														StringBuilder v41 = v39.append("insertAccountIntoDatabase: ");
														String v42 = p1.toSafeString();
														StringBuilder v43 = v39.append(v42);
														StringBuilder v44 = v39.append(", skipping since more than 50 accounts on device exist");
														String v45 = v39.toString();
														int v46 = Log.w("AccountManagerService", v45);
														SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
														v48.endTransaction();
														boolean v12 = 0;
														IAccountManager$Stub.restoreCallingIdentity(v10);
														return v12;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase();\nv31.beginTransaction();\nCursor v37 = v34.query("ceDb.accounts", v35, "name=? AND type=?", v36, 0, 0, 0);\nboolean v38 = v37.moveToNext();', 'SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabase();\nLinkedHashMap v42 = new LinkedHashMap();\nCursor v45 = v41.query("accounts", v44, 0, 0, 0, 0, "_id");\nboolean v46 = v45.moveToNext();']

The method addAccountExplicitlyWithVisibility has the following similar APIs:

- API Name: setPassword(Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9295524954795837
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
v24.beginTransaction();
ContentValues v36 = new ContentValues();
v36.put("password", p3);
int v41 = v35.update("ceDb.accounts", v36, "_id=?", v39);

- API Name: setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9186528325080872
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase();
v26.beginTransaction();
SQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase();
Cursor v32 = v29.query("accounts", v30, "name=? AND type=?", v31, 0, 0, 0);
boolean v33 = v32.moveToNext();
... subsequent database operations ...

