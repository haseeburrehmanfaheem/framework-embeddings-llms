The method copyAccountToUser has the following code snippet:

This is path 1 for the API with depth 2:
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v4 == 0) {
		boolean v2 = ;
		if (v2 != 0) {
			AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);
			AccountManagerService$UserAccounts v5 = v6;
			AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);
			AccountManagerService$UserAccounts v7 = v8;
			if (v5 == 0) {
				if (v7 != 0) {
					String v12 = p2.toSafeString();
					long v20 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);
					boolean v24 = Log.isLoggable("AccountManagerService", 2);
					if (v24 == 0) {
						StringBuilder v25 = new StringBuilder();
						StringBuilder v27 = v25.append("initiating bind to authenticator type ");
						StringBuilder v28 = v25.append(this.mAccountType);
						String v29 = v25.toString();
						int v30 = Log.v("AccountManagerService", v29);
						IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
						AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
						int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);
						if (v35 != 0) {
							int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							boolean v37 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v36);
							if (v37 != 0) {
								if (ComponentInfo.directBootAware != 0) {
									boolean v31 = 0;
									if (v31 != 0) {
										StringBuilder v45 = new StringBuilder();
										StringBuilder v47 = v45.append("bind attempt failed for ");
										long v49 = SystemClock.elapsedRealtime();
										String v50 = AccountManagerService$Session.toDebugString(v49);
										String v48 = v50;
										StringBuilder v51 = v45.append(v48);
										String v52 = v45.toString();
										int v53 = Log.d("AccountManagerService", v52);
										this.mNumErrors = (this.mNumErrors + 1);
										IAccountManagerResponse v55 = AccountManagerService$Session.getResponseAndClose();
										if (v55 == 0) {
											boolean v56 = Log.isLoggable("AccountManagerService", 2);
											if (v56 == 0) {
												StringBuilder v57 = new StringBuilder();
												Class v59 = AccountManagerService$Session.getClass();
												String v60 = v59.getSimpleName();
												StringBuilder v61 = v57.append(v60);
												StringBuilder v62 = v57.append(" calling onError() on response ");
												StringBuilder v63 = v57.append(v55);
												String v64 = v57.toString();
												int v65 = Log.v("AccountManagerService", v64);
												v55.onError(1, "bind failure");
												boolean v67 = Log.isLoggable("AccountManagerService", 2);
												if (v67 == 0) {
													int v68 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
													IAccountManager$Stub.restoreCallingIdentity(v20);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	if (v4 == 0) {
		boolean v2 = ;
		if (v2 != 0) {
			AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);
			AccountManagerService$UserAccounts v5 = v6;
			AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);
			AccountManagerService$UserAccounts v7 = v8;
			if (v5 == 0) {
				if (v7 != 0) {
					String v12 = p2.toSafeString();
					long v20 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);
					boolean v24 = Log.isLoggable("AccountManagerService", 2);
					if (v24 == 0) {
						StringBuilder v25 = new StringBuilder();
						StringBuilder v27 = v25.append("initiating bind to authenticator type ");
						StringBuilder v28 = v25.append(this.mAccountType);
						String v29 = v25.toString();
						int v30 = Log.v("AccountManagerService", v29);
						IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
						AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
						int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);
						if (v35 != 0) {
							int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							boolean v37 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v36);
							if (v37 != 0) {
								if (ComponentInfo.directBootAware != 0) {
									boolean v31 = 0;
									if (v31 != 0) {
										StringBuilder v45 = new StringBuilder();
										StringBuilder v47 = v45.append("bind attempt failed for ");
										long v49 = SystemClock.elapsedRealtime();
										String v50 = AccountManagerService$Session.toDebugString(v49);
										String v48 = v50;
										StringBuilder v51 = v45.append(v48);
										String v52 = v45.toString();
										int v53 = Log.d("AccountManagerService", v52);
										this.mNumErrors = (this.mNumErrors + 1);
										IAccountManagerResponse v55 = AccountManagerService$Session.getResponseAndClose();
										if (v55 == 0) {
											boolean v56 = Log.isLoggable("AccountManagerService", 2);
											if (v56 == 0) {
												StringBuilder v57 = new StringBuilder();
												Class v59 = AccountManagerService$Session.getClass();
												String v60 = v59.getSimpleName();
												StringBuilder v61 = v57.append(v60);
												StringBuilder v62 = v57.append(" calling onError() on response ");
												StringBuilder v63 = v57.append(v55);
												String v64 = v57.toString();
												int v65 = Log.v("AccountManagerService", v64);
												v55.onError(1, "bind failure");
												boolean v67 = Log.isLoggable("AccountManagerService", 2);
												if (v67 == 0) {
													int v68 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
													IAccountManager$Stub.restoreCallingIdentity(v20);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void copyAccountToUser(IAccountManagerResponse p1, Account p2, int p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = ;
	if (v2 != 0) {
		AccountManagerService$UserAccounts v5 = AccountManagerService.getUserAccountsNotChecked(p3);
		AccountManagerService$UserAccounts v4 = v5;
		AccountManagerService$UserAccounts v7 = AccountManagerService.getUserAccountsNotChecked(p4);
		AccountManagerService$UserAccounts v6 = v7;
		if (v4 == 0) {
			if (v6 != 0) {
				String v11 = p2.toSafeString();
				long v19 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$5 v20 = new AccountManagerService$5(p0,v4,p1,Account.type,0,0,Account.name,0,p2,p1,v6,p3);
				boolean v23 = Log.isLoggable("AccountManagerService", 2);
				if (v23 == 0) {
					StringBuilder v24 = new StringBuilder();
					StringBuilder v26 = v24.append("initiating bind to authenticator type ");
					StringBuilder v27 = v24.append(this.mAccountType);
					String v28 = v24.toString();
					int v29 = Log.v("AccountManagerService", v28);
					IAccountAuthenticatorCache v31 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
					AuthenticatorDescription v32 = AuthenticatorDescription.newKey(this.mAccountType);
					int v33 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
					RegisteredServicesCache$ServiceInfo v34 = v31.getServiceInfo(v32, v33);
					if (v34 != 0) {
						int v35 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						boolean v36 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v35);
						if (v36 != 0) {
							if (ComponentInfo.directBootAware != 0) {
								boolean v30 = 0;
								if (v30 != 0) {
									StringBuilder v44 = new StringBuilder();
									StringBuilder v46 = v44.append("bind attempt failed for ");
									long v48 = SystemClock.elapsedRealtime();
									String v49 = AccountManagerService$Session.toDebugString(v48);
									String v47 = v49;
									StringBuilder v50 = v44.append(v47);
									String v51 = v44.toString();
									int v52 = Log.d("AccountManagerService", v51);
									this.mNumErrors = (this.mNumErrors + 1);
									IAccountManagerResponse v54 = AccountManagerService$Session.getResponseAndClose();
									if (v54 == 0) {
										boolean v55 = Log.isLoggable("AccountManagerService", 2);
										if (v55 == 0) {
											StringBuilder v56 = new StringBuilder();
											Class v58 = AccountManagerService$Session.getClass();
											String v59 = v58.getSimpleName();
											StringBuilder v60 = v56.append(v59);
											StringBuilder v61 = v56.append(" calling onError() on response ");
											StringBuilder v62 = v56.append(v54);
											String v63 = v56.toString();
											int v64 = Log.v("AccountManagerService", v63);
											v54.onError(1, "bind failure");
											boolean v66 = Log.isLoggable("AccountManagerService", 2);
											if (v66 == 0) {
												int v67 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
												IAccountManager$Stub.restoreCallingIdentity(v19);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(p3);\nAccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(p4);\nAccountManagerService$5 v21 = new AccountManagerService$5(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p1,v7,p3);', 'AccountManagerService$UserAccounts v5 = AccountManagerService.getUserAccountsNotChecked(p3);\nAccountManagerService$UserAccounts v7 = AccountManagerService.getUserAccountsNotChecked(p4);\nAccountManagerService$5 v20 = new AccountManagerService$5(p0,v4,p1,Account.type,0,0,Account.name,0,p2,p1,v6,p3);']

The method copyAccountToUser has the following similar APIs:

- API Name: registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9068511724472046
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
AccountManagerService$UserAccounts v5 = v6;

- API Name: registerAccountListener([Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9065111875534058
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
AccountManagerService$UserAccounts v5 = v6;

