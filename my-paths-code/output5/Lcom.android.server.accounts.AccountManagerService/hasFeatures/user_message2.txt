The method hasFeatures has the following code snippet:

This is path 1 for the API with depth 2:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("hasFeatures: ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					if (p2 != 0) {
						List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
						boolean v27 = v26.contains(p2);
						boolean v25 = v27;
						if (v25 == 0) {
							long v28 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v29 = p0.getUserAccounts(v23);
							AccountManagerService$TestFeaturesSession v30 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
							boolean v33 = Log.isLoggable("AccountManagerService", 2);
							if (v33 == 0) {
								StringBuilder v34 = new StringBuilder();
								StringBuilder v36 = v34.append("initiating bind to authenticator type ");
								StringBuilder v37 = v34.append(this.mAccountType);
								String v38 = v34.toString();
								int v39 = Log.v("AccountManagerService", v38);
								IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
								AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType);
								int v43 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
								RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);
								if (v44 != 0) {
									int v45 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									boolean v46 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v45);
									if (v46 != 0) {
										if (ComponentInfo.directBootAware != 0) {
											boolean v40 = 0;
											if (v40 != 0) {
												StringBuilder v54 = new StringBuilder();
												StringBuilder v56 = v54.append("bind attempt failed for ");
												long v58 = SystemClock.elapsedRealtime();
												String v59 = AccountManagerService$Session.toDebugString(v58);
												String v57 = v59;
												StringBuilder v60 = v54.append(v57);
												String v61 = v54.toString();
												int v62 = Log.d("AccountManagerService", v61);
												this.mNumErrors = (this.mNumErrors + 1);
												IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose();
												if (v64 == 0) {
													boolean v65 = Log.isLoggable("AccountManagerService", 2);
													if (v65 == 0) {
														StringBuilder v66 = new StringBuilder();
														Class v68 = AccountManagerService$Session.getClass();
														String v69 = v68.getSimpleName();
														StringBuilder v70 = v66.append(v69);
														StringBuilder v71 = v66.append(" calling onError() on response ");
														StringBuilder v72 = v66.append(v64);
														String v73 = v66.toString();
														int v74 = Log.v("AccountManagerService", v73);
														v64.onError(1, "bind failure");
														boolean v76 = Log.isLoggable("AccountManagerService", 2);
														if (v76 == 0) {
															int v77 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
															IAccountManager$Stub.restoreCallingIdentity(v28);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("hasFeatures: ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					if (p2 != 0) {
						List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
						boolean v27 = v26.contains(p2);
						boolean v25 = v27;
						if (v25 == 0) {
							long v28 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v29 = p0.getUserAccounts(v23);
							AccountManagerService$TestFeaturesSession v30 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
							boolean v33 = Log.isLoggable("AccountManagerService", 2);
							if (v33 == 0) {
								StringBuilder v34 = new StringBuilder();
								StringBuilder v36 = v34.append("initiating bind to authenticator type ");
								StringBuilder v37 = v34.append(this.mAccountType);
								String v38 = v34.toString();
								int v39 = Log.v("AccountManagerService", v38);
								IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
								AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType);
								int v43 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
								RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);
								if (v44 != 0) {
									int v45 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									boolean v46 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v45);
									if (v46 != 0) {
										if (ComponentInfo.directBootAware != 0) {
											boolean v40 = 0;
											if (v40 != 0) {
												StringBuilder v54 = new StringBuilder();
												StringBuilder v56 = v54.append("bind attempt failed for ");
												long v58 = SystemClock.elapsedRealtime();
												String v59 = AccountManagerService$Session.toDebugString(v58);
												String v57 = v59;
												StringBuilder v60 = v54.append(v57);
												String v61 = v54.toString();
												int v62 = Log.d("AccountManagerService", v61);
												this.mNumErrors = (this.mNumErrors + 1);
												IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose();
												if (v64 == 0) {
													boolean v65 = Log.isLoggable("AccountManagerService", 2);
													if (v65 == 0) {
														StringBuilder v66 = new StringBuilder();
														Class v68 = AccountManagerService$Session.getClass();
														String v69 = v68.getSimpleName();
														StringBuilder v70 = v66.append(v69);
														StringBuilder v71 = v66.append(" calling onError() on response ");
														StringBuilder v72 = v66.append(v64);
														String v73 = v66.toString();
														int v74 = Log.v("AccountManagerService", v73);
														v64.onError(1, "bind failure");
														boolean v76 = Log.isLoggable("AccountManagerService", 2);
														if (v76 == 0) {
															int v77 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
															IAccountManager$Stub.restoreCallingIdentity(v28);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void hasFeatures(IAccountManagerResponse p1, Account p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("hasFeatures: ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (p3 == 0) {
					Preconditions.checkArgument(, "features cannot be null");
					int v23 = UserHandle.getCallingUserId();
					if (p2 != 0) {
						List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);
						boolean v27 = v26.contains(p2);
						boolean v25 = v27;
						if (v25 == 0) {
							long v28 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v29 = p0.getUserAccounts(v23);
							AccountManagerService$TestFeaturesSession v30 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);
							boolean v33 = Log.isLoggable("AccountManagerService", 2);
							if (v33 == 0) {
								StringBuilder v34 = new StringBuilder();
								StringBuilder v36 = v34.append("initiating bind to authenticator type ");
								StringBuilder v37 = v34.append(this.mAccountType);
								String v38 = v34.toString();
								int v39 = Log.v("AccountManagerService", v38);
								IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
								AuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType);
								int v43 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
								RegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);
								if (v44 != 0) {
									int v45 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
									boolean v46 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v45);
									if (v46 != 0) {
										if (ComponentInfo.directBootAware != 0) {
											boolean v40 = 0;
											if (v40 != 0) {
												StringBuilder v54 = new StringBuilder();
												StringBuilder v56 = v54.append("bind attempt failed for ");
												long v58 = SystemClock.elapsedRealtime();
												String v59 = AccountManagerService$Session.toDebugString(v58);
												String v57 = v59;
												StringBuilder v60 = v54.append(v57);
												String v61 = v54.toString();
												int v62 = Log.d("AccountManagerService", v61);
												this.mNumErrors = (this.mNumErrors + 1);
												IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose();
												if (v64 == 0) {
													boolean v65 = Log.isLoggable("AccountManagerService", 2);
													if (v65 == 0) {
														StringBuilder v66 = new StringBuilder();
														Class v68 = AccountManagerService$Session.getClass();
														String v69 = v68.getSimpleName();
														StringBuilder v70 = v66.append(v69);
														StringBuilder v71 = v66.append(" calling onError() on response ");
														StringBuilder v72 = v66.append(v64);
														String v73 = v66.toString();
														int v74 = Log.v("AccountManagerService", v73);
														v64.onError(1, "bind failure");
														boolean v76 = Log.isLoggable("AccountManagerService", 2);
														if (v76 == 0) {
															int v77 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
															IAccountManager$Stub.restoreCallingIdentity(v28);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v26 = AccountManagerService.getTypesVisibleToCaller(p1, p3, p4);\nboolean v27 = v26.contains(p2);', 'AccountManagerService$TestFeaturesSession v30 = new AccountManagerService$TestFeaturesSession(p0,v29,p1,p2,p3);', 'IAccountAuthenticatorCache v41 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nAuthenticatorDescription v42 = AuthenticatorDescription.newKey(this.mAccountType);\nRegisteredServicesCache$ServiceInfo v44 = v41.getServiceInfo(v42, v43);', 'IAccountManagerResponse v64 = AccountManagerService$Session.getResponseAndClose();\nv64.onError(1, "bind failure");']

The method hasFeatures has the following similar APIs:

- API Name: startUpdateCredentialsSession(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.9979748725891113
  - Access Control Level: SYS_OR_SIG and the following code:
IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);

- API Name: getAccountsByFeatures(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V with Similarity Score: 0.9932807683944702
  - Access Control Level: SYS_OR_SIG and the following code:
IAccountAuthenticatorCache v45 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v46 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v48 = v45.getServiceInfo(v46, v47);

