The method peekAuthToken has the following code snippet:

This is path 1 for the API with depth 2:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("peekAuthToken: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", authTokenType ");
		StringBuilder v8 = v3.append(p2);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				boolean v23 = p0.isLocalUnlockedUser(v18);
				if (v23 != 0) {
					long v24 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);
					Map v27 = this.authTokenCache;
					Object v28 = v27.get(p1);
					if (v28 == 0) {
						Map v29 = this.authTokenCache;
						Object v30 = v29.get(p1);
						if (v30 != 0) {
							SQLiteDatabase v32 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
							HashMap v33 = new HashMap();
							String v35 = new String(2);
							Cursor v36 = v32.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v35, 0, 0, 0);
							boolean v37 = v36.moveToNext();
							if (v37 == 0) {
								v36.close();
								Map v31 = v33;
								Map v39 = this.authTokenCache;
								Object v40 = v39.put(p1, v31);
								Object v41 = .get(p2);
								String v26 = v41;
								IAccountManager$Stub.restoreCallingIdentity(v24);
								return v26;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = Objects.requireNonNull(p1, "account cannot be null");
		Object v4 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v5 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v7 = v8;
			boolean v9 = v7.contains(Account.type);
			boolean v6 = v9;
			if (v6 == 0) {
				boolean v10 = p0.isLocalUnlockedUser(v5);
				if (v10 != 0) {
					long v11 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v5);
					Map v14 = this.authTokenCache;
					Object v15 = v14.get(p1);
					if (v15 == 0) {
						Map v16 = this.authTokenCache;
						Object v17 = v16.get(p1);
						if (v17 != 0) {
							SQLiteDatabase v19 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
							HashMap v20 = new HashMap();
							String v22 = new String(2);
							Cursor v23 = v19.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v22, 0, 0, 0);
							boolean v24 = v23.moveToNext();
							if (v24 == 0) {
								v23.close();
								Map v18 = v20;
								Map v26 = this.authTokenCache;
								Object v27 = v26.put(p1, v18);
								Object v28 = .get(p2);
								String v13 = v28;
								IAccountManager$Stub.restoreCallingIdentity(v11);
								return v13;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String peekAuthToken(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("peekAuthToken: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", authTokenType ");
		StringBuilder v8 = v3.append(p2);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				boolean v23 = p0.isLocalUnlockedUser(v18);
				if (v23 != 0) {
					long v24 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);
					Map v27 = this.authTokenCache;
					Object v28 = v27.get(p1);
					if (v28 == 0) {
						Map v29 = this.authTokenCache;
						Object v30 = v29.get(p1);
						if (v30 != 0) {
							Object v31 = .get(p2);
							String v26 = v31;
							IAccountManager$Stub.restoreCallingIdentity(v24);
							return v26;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Map v27 = this.authTokenCache;\nObject v28 = v27.get(p1);\nSQLiteDatabase v32 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();\nCursor v36 = v32.query("ceDb.authtokens", this.COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v35, 0, 0, 0);\nMap v31 = v33;\nObject v40 = v39.put(p1, v31);\nString v26 = v41;', 'List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nboolean v22 = v20.contains(Account.type);\nlong v24 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v25 = p0.getUserAccounts(v18);']

The method peekAuthToken has the following similar APIs:

- API Name: accountAuthenticated(Landroid/accounts/Account;)Z with Similarity Score: 0.9074503183364868
  - Access Control Level: SYS_OR_SIG and the following code:
List v11 = AccountManagerService.getTypesForCaller(p2, p3, 0);
List v10 = v11;
boolean v12 = v10.contains(Account.type);

- API Name: getAccountsByTypeForPackage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account; with Similarity Score: 0.8638461828231812
  - Access Control Level: SYS_OR_SIG and the following code:
List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
List v7 = v8;
boolean v9 = v7.contains(p1);

