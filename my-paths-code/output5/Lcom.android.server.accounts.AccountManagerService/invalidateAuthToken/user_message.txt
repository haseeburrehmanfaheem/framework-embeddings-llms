This is path 1 for the API with depth 2:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	boolean v4 = Log.isLoggable("AccountManagerService", 2);
	if (v4 == 0) {
		StringBuilder v5 = new StringBuilder();
		StringBuilder v7 = v5.append("invalidateAuthToken: accountType ");
		StringBuilder v8 = v5.append(p1);
		StringBuilder v9 = v5.append(", caller's uid ");
		StringBuilder v10 = v5.append(v1);
		StringBuilder v11 = v5.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v5.append(v12);
		String v14 = v5.toString();
		int v15 = Log.v("AccountManagerService", v14);
		int v16 = UserHandle.getCallingUserId();
		long v17 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v16);
		AccountManagerService$UserAccounts v18 = v19;
		SQLiteDatabase v21 = this.mDeDatabase.getWritableDatabase();
		v21.beginTransaction();
		ArrayList v24 = new ArrayList();
		SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
		String v28 = new String(2);
		Cursor v29 = v27.rawQuery("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", v28);
		Cursor v26 = v29;
		boolean v30 = v26.moveToNext();
		if (v30 == 0) {
			v26.close();
			List v23 = v24;
			AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
			AccountManagerService$UserAccounts.accountsDb.endTransaction();
			Iterator v34 = v23.iterator();
			boolean v35 = v34.hasNext();
			if (v35 == 0) {
				TokenCache v36 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
				Pair v39 = new Pair(p1,p2);
				Object v41 = this.mTokenEvictors.get(v39);
				if (v41 == 0) {
					v41.evict();
					IAccountManager$Stub.restoreCallingIdentity(v17);
					return;
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	boolean v4 = Log.isLoggable("AccountManagerService", 2);
	if (v4 == 0) {
		StringBuilder v5 = new StringBuilder();
		StringBuilder v7 = v5.append("invalidateAuthToken: accountType ");
		StringBuilder v8 = v5.append(p1);
		StringBuilder v9 = v5.append(", caller's uid ");
		StringBuilder v10 = v5.append(v1);
		StringBuilder v11 = v5.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v5.append(v12);
		String v14 = v5.toString();
		int v15 = Log.v("AccountManagerService", v14);
		int v16 = UserHandle.getCallingUserId();
		long v17 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v19 = AccountManagerService.getUserAccountsNotChecked(v16);
		AccountManagerService$UserAccounts v18 = v19;
		SQLiteDatabase v21 = this.mDeDatabase.getWritableDatabase();
		v21.beginTransaction();
		ArrayList v24 = new ArrayList();
		SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
		String v28 = new String(2);
		Cursor v29 = v27.rawQuery("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", v28);
		Cursor v26 = v29;
		boolean v30 = v26.moveToNext();
		if (v30 == 0) {
			v26.close();
			List v23 = v24;
			AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
			AccountManagerService$UserAccounts.accountsDb.endTransaction();
			Iterator v34 = v23.iterator();
			boolean v35 = v34.hasNext();
			if (v35 == 0) {
				TokenCache v36 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v18);
				Pair v39 = new Pair(p1,p2);
				Object v41 = this.mTokenEvictors.get(v39);
				if (v41 == 0) {
					IAccountManager$Stub.restoreCallingIdentity(v17);
					return;
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void invalidateAuthToken(String p1, String p2){
	int v1 = Binder.getCallingUid();
	Object v2 = Objects.requireNonNull(p1, "accountType cannot be null");
	Object v3 = Objects.requireNonNull(p2, "authToken cannot be null");
	boolean v4 = Log.isLoggable("AccountManagerService", 2);
	if (v4 == 0) {
		int v5 = UserHandle.getCallingUserId();
		long v6 = IAccountManager$Stub.clearCallingIdentity();
		AccountManagerService$UserAccounts v8 = AccountManagerService.getUserAccountsNotChecked(v5);
		AccountManagerService$UserAccounts v7 = v8;
		SQLiteDatabase v10 = this.mDeDatabase.getWritableDatabase();
		v10.beginTransaction();
		ArrayList v13 = new ArrayList();
		SQLiteDatabase v16 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
		String v17 = new String(2);
		Cursor v18 = v16.rawQuery("SELECT ceDb.authtokens._id, ceDb.accounts.name, ceDb.authtokens.type FROM ceDb.accounts JOIN ceDb.authtokens ON ceDb.accounts._id = ceDb.authtokens.accounts_id WHERE ceDb.authtokens.authtoken = ? AND ceDb.accounts.type = ?", v17);
		Cursor v15 = v18;
		boolean v19 = v15.moveToNext();
		if (v19 == 0) {
			v15.close();
			List v12 = v13;
			AccountManagerService$UserAccounts.accountsDb.setTransactionSuccessful();
			AccountManagerService$UserAccounts.accountsDb.endTransaction();
			Iterator v23 = v12.iterator();
			boolean v24 = v23.hasNext();
			if (v24 == 0) {
				TokenCache v25 = AccountManagerService$UserAccounts.-$$Nest$fgetaccountTokenCaches(v7);
				Pair v28 = new Pair(p1,p2);
				Object v30 = this.mTokenEvictors.get(v28);
				if (v30 == 0) {
					v30.evict();
					IAccountManager$Stub.restoreCallingIdentity(v6);
					return;
				}
			}
		}
	}
}
