The method updateCredentials has the following code snippet:

This is path 1 for the API with depth 2:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("updateCredentials: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", expectActivityLaunch ");
		StringBuilder v12 = v3.append(p4);
		StringBuilder v13 = v3.append(", caller's uid ");
		int v14 = Binder.getCallingUid();
		StringBuilder v15 = v3.append(v14);
		StringBuilder v16 = v3.append(", pid ");
		int v17 = Binder.getCallingPid();
		StringBuilder v18 = v3.append(v17);
		String v19 = v3.toString();
		int v20 = Log.v("AccountManagerService", v19);
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = UserHandle.getCallingUserId();
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
				AccountManagerService$UserAccounts v23 = v24;
				AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
				boolean v28 = Log.isLoggable("AccountManagerService", 2);
				if (v28 == 0) {
					StringBuilder v29 = new StringBuilder();
					StringBuilder v31 = v29.append("initiating bind to authenticator type ");
					StringBuilder v32 = v29.append(this.mAccountType);
					String v33 = v29.toString();
					int v34 = Log.v("AccountManagerService", v33);
					IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
					AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
					int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
					RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
					if (v39 != 0) {
						int v40 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						boolean v41 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v40);
						if (v41 != 0) {
							if (ComponentInfo.directBootAware != 0) {
								boolean v35 = 0;
								if (v35 != 0) {
									StringBuilder v49 = new StringBuilder();
									StringBuilder v51 = v49.append("bind attempt failed for ");
									long v53 = SystemClock.elapsedRealtime();
									String v54 = AccountManagerService$Session.toDebugString(v53);
									String v52 = v54;
									StringBuilder v55 = v49.append(v52);
									String v56 = v49.toString();
									int v57 = Log.d("AccountManagerService", v56);
									this.mNumErrors = (this.mNumErrors + 1);
									IAccountManagerResponse v59 = AccountManagerService$Session.getResponseAndClose();
									if (v59 == 0) {
										boolean v60 = Log.isLoggable("AccountManagerService", 2);
										if (v60 == 0) {
											StringBuilder v61 = new StringBuilder();
											Class v63 = AccountManagerService$Session.getClass();
											String v64 = v63.getSimpleName();
											StringBuilder v65 = v61.append(v64);
											StringBuilder v66 = v61.append(" calling onError() on response ");
											StringBuilder v67 = v61.append(v59);
											String v68 = v61.toString();
											int v69 = Log.v("AccountManagerService", v68);
											v59.onError(1, "bind failure");
											boolean v71 = Log.isLoggable("AccountManagerService", 2);
											if (v71 == 0) {
												int v72 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
												IAccountManager$Stub.restoreCallingIdentity(v22);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("updateCredentials: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", expectActivityLaunch ");
		StringBuilder v12 = v3.append(p4);
		StringBuilder v13 = v3.append(", caller's uid ");
		int v14 = Binder.getCallingUid();
		StringBuilder v15 = v3.append(v14);
		StringBuilder v16 = v3.append(", pid ");
		int v17 = Binder.getCallingPid();
		StringBuilder v18 = v3.append(v17);
		String v19 = v3.toString();
		int v20 = Log.v("AccountManagerService", v19);
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = UserHandle.getCallingUserId();
				long v22 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(v21);
				AccountManagerService$UserAccounts v23 = v24;
				AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
				boolean v28 = Log.isLoggable("AccountManagerService", 2);
				if (v28 == 0) {
					StringBuilder v29 = new StringBuilder();
					StringBuilder v31 = v29.append("initiating bind to authenticator type ");
					StringBuilder v32 = v29.append(this.mAccountType);
					String v33 = v29.toString();
					int v34 = Log.v("AccountManagerService", v33);
					IAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
					AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
					int v38 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
					RegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);
					if (v39 != 0) {
						boolean v40 = Log.isLoggable("AccountManagerService", 2);
						if (v40 == 0) {
							StringBuilder v41 = new StringBuilder();
							StringBuilder v43 = v41.append("there is no authenticator for ");
							StringBuilder v44 = v41.append(this.mAccountType);
							StringBuilder v45 = v41.append(", bailing out");
							String v46 = v41.toString();
							int v47 = Log.v("AccountManagerService", v46);
							boolean v35 = 0;
							if (v35 != 0) {
								StringBuilder v48 = new StringBuilder();
								StringBuilder v50 = v48.append("bind attempt failed for ");
								long v52 = SystemClock.elapsedRealtime();
								String v53 = AccountManagerService$Session.toDebugString(v52);
								String v51 = v53;
								StringBuilder v54 = v48.append(v51);
								String v55 = v48.toString();
								int v56 = Log.d("AccountManagerService", v55);
								this.mNumErrors = (this.mNumErrors + 1);
								IAccountManagerResponse v58 = AccountManagerService$Session.getResponseAndClose();
								if (v58 == 0) {
									boolean v59 = Log.isLoggable("AccountManagerService", 2);
									if (v59 == 0) {
										StringBuilder v60 = new StringBuilder();
										Class v62 = AccountManagerService$Session.getClass();
										String v63 = v62.getSimpleName();
										StringBuilder v64 = v60.append(v63);
										StringBuilder v65 = v60.append(" calling onError() on response ");
										StringBuilder v66 = v60.append(v58);
										String v67 = v60.toString();
										int v68 = Log.v("AccountManagerService", v67);
										v58.onError(1, "bind failure");
										boolean v70 = Log.isLoggable("AccountManagerService", 2);
										if (v70 == 0) {
											int v71 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
											IAccountManager$Stub.restoreCallingIdentity(v22);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void updateCredentials(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		if (p1 == 0) {
			if (p2 == 0) {
				int v3 = UserHandle.getCallingUserId();
				long v4 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
				AccountManagerService$UserAccounts v5 = v6;
				AccountManagerService$13 v7 = new AccountManagerService$13(p0,v5,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);
				boolean v10 = Log.isLoggable("AccountManagerService", 2);
				if (v10 == 0) {
					StringBuilder v11 = new StringBuilder();
					StringBuilder v13 = v11.append("initiating bind to authenticator type ");
					StringBuilder v14 = v11.append(this.mAccountType);
					String v15 = v11.toString();
					int v16 = Log.v("AccountManagerService", v15);
					IAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
					AuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType);
					int v20 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
					RegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);
					if (v21 != 0) {
						int v22 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						boolean v23 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v22);
						if (v23 != 0) {
							if (ComponentInfo.directBootAware != 0) {
								boolean v17 = 0;
								if (v17 != 0) {
									StringBuilder v31 = new StringBuilder();
									StringBuilder v33 = v31.append("bind attempt failed for ");
									long v35 = SystemClock.elapsedRealtime();
									String v36 = AccountManagerService$Session.toDebugString(v35);
									String v34 = v36;
									StringBuilder v37 = v31.append(v34);
									String v38 = v31.toString();
									int v39 = Log.d("AccountManagerService", v38);
									this.mNumErrors = (this.mNumErrors + 1);
									IAccountManagerResponse v41 = AccountManagerService$Session.getResponseAndClose();
									if (v41 == 0) {
										boolean v42 = Log.isLoggable("AccountManagerService", 2);
										if (v42 == 0) {
											StringBuilder v43 = new StringBuilder();
											Class v45 = AccountManagerService$Session.getClass();
											String v46 = v45.getSimpleName();
											StringBuilder v47 = v43.append(v46);
											StringBuilder v48 = v43.append(" calling onError() on response ");
											StringBuilder v49 = v43.append(v41);
											String v50 = v43.toString();
											int v51 = Log.v("AccountManagerService", v50);
											v41.onError(1, "bind failure");
											boolean v53 = Log.isLoggable("AccountManagerService", 2);
											if (v53 == 0) {
												int v54 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
												IAccountManager$Stub.restoreCallingIdentity(v4);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AccountManagerService$13 v25 = new AccountManagerService$13(p0,v23,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);\nIAccountAuthenticatorCache v36 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nAuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);\nRegisteredServicesCache$ServiceInfo v39 = v36.getServiceInfo(v37, v38);', 'AccountManagerService$13 v7 = new AccountManagerService$13(p0,v5,p1,Account.type,p4,1,Account.name,0,1,p2,p3,p5);\nIAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);\nAuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType);\nRegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);']

The method updateCredentials has the following similar APIs:

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.9773016571998596
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);

- API Name: isCredentialsUpdateSuggested(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.971174955368042
  - Access Control Level: SYS_OR_SIG and the following code:
AccountManagerService$15 v7 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
IAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
AuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType);
RegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);

