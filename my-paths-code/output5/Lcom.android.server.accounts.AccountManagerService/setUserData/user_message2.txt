The method setUserData has the following code snippet:

This is path 1 for the API with depth 2:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("setUserData: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", key ");
		StringBuilder v8 = v3.append(p2);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		if (p2 == 0) {
			if (p1 == 0) {
				int v16 = UserHandle.getCallingUserId();
				if (Account.type != 0) {
					List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v18 = v19;
					boolean v20 = v18.contains(Account.type);
					boolean v17 = v20;
					if (v17 == 0) {
						long v21 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v16);
						boolean v23 = p0.accountExistsCache(v22, p1);
						if (v23 != 0) {
							SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase();
							v26.beginTransaction();
							SQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase();
							String v30 = new String(1);
							String v31 = new String(2);
							Cursor v32 = v29.query("accounts", v30, "name=? AND type=?", v31, 0, 0, 0);
							boolean v33 = v32.moveToNext();
							if (v33 == 0) {
								long v34 = v32.getLong(0);
								v32.close();
								long v28 = v34;
								if ((v28 < 0) >= 0) {
									SQLiteDatabase v37 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
									String v38 = new String(1);
									StringBuilder v39 = new StringBuilder();
									StringBuilder v41 = v39.append("accounts_id=");
									StringBuilder v42 = v39.append(v28);
									StringBuilder v43 = v39.append(" AND ");
									StringBuilder v44 = v39.append("key");
									StringBuilder v45 = v39.append("=?");
									String v46 = v39.toString();
									String v47 = new String(1);
									Cursor v48 = v37.query("ceDb.extras", v38, v46, v47, 0, 0, 0);
									boolean v49 = v48.moveToNext();
									if (v49 == 0) {
										long v50 = v48.getLong(0);
										v48.close();
										long v36 = v50;
										if ((v36 < 0) >= 0) {
											SQLiteDatabase v53 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
											ContentValues v54 = new ContentValues();
											v54.put("value", p4);
											String v57 = new String(1);
											String v58 = String.valueOf(v36);
											int v59 = v53.update("extras", v54, "_id=?", v57);
											if (v59 != 1) {
												boolean v52 = ;
												if (v52 != 0) {
													SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
													v61.setTransactionSuccessful();
													SQLiteDatabase v64 = this.mDeDatabase.getWritableDatabase();
													v64.endTransaction();
													AccountManagerService.writeUserDataIntoCacheLocked(v22, p1, p2, p3);
													AccountManager.invalidateLocalAccountUserDataCaches();
													IAccountManager$Stub.restoreCallingIdentity(v21);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("setUserData: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", key ");
		StringBuilder v8 = v3.append(p2);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		if (p2 == 0) {
			if (p1 == 0) {
				int v16 = UserHandle.getCallingUserId();
				if (Account.type != 0) {
					List v19 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v18 = v19;
					boolean v20 = v18.contains(Account.type);
					boolean v17 = v20;
					if (v17 == 0) {
						long v21 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v22 = p0.getUserAccounts(v16);
						boolean v23 = p0.accountExistsCache(v22, p1);
						if (v23 != 0) {
							SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase();
							v26.beginTransaction();
							SQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase();
							String v30 = new String(1);
							String v31 = new String(2);
							Cursor v32 = v29.query("accounts", v30, "name=? AND type=?", v31, 0, 0, 0);
							boolean v33 = v32.moveToNext();
							if (v33 == 0) {
								v32.close();
								long v28 = -1;
								if ((v28 < 0) >= 0) {
									SQLiteDatabase v36 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
									String v37 = new String(1);
									StringBuilder v38 = new StringBuilder();
									StringBuilder v40 = v38.append("accounts_id=");
									StringBuilder v41 = v38.append(v28);
									StringBuilder v42 = v38.append(" AND ");
									StringBuilder v43 = v38.append("key");
									StringBuilder v44 = v38.append("=?");
									String v45 = v38.toString();
									String v46 = new String(1);
									Cursor v47 = v36.query("ceDb.extras", v37, v45, v46, 0, 0, 0);
									boolean v48 = v47.moveToNext();
									if (v48 == 0) {
										long v49 = v47.getLong(0);
										v47.close();
										long v35 = v49;
										if ((v35 < 0) >= 0) {
											SQLiteDatabase v52 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
											ContentValues v53 = new ContentValues();
											v53.put("value", p4);
											String v56 = new String(1);
											String v57 = String.valueOf(v35);
											int v58 = v52.update("extras", v53, "_id=?", v56);
											if (v58 != 1) {
												boolean v51 = ;
												if (v51 != 0) {
													SQLiteDatabase v60 = this.mDeDatabase.getWritableDatabase();
													v60.setTransactionSuccessful();
													SQLiteDatabase v63 = this.mDeDatabase.getWritableDatabase();
													v63.endTransaction();
													AccountManagerService.writeUserDataIntoCacheLocked(v22, p1, p2, p3);
													AccountManager.invalidateLocalAccountUserDataCaches();
													IAccountManager$Stub.restoreCallingIdentity(v21);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setUserData(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		if (p2 == 0) {
			if (p1 == 0) {
				int v3 = UserHandle.getCallingUserId();
				if (Account.type != 0) {
					List v6 = AccountManagerService.getTypesForCaller(p2, p3, 0);
					List v5 = v6;
					boolean v7 = v5.contains(Account.type);
					boolean v4 = v7;
					if (v4 == 0) {
						long v8 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v9 = p0.getUserAccounts(v3);
						boolean v10 = p0.accountExistsCache(v9, p1);
						if (v10 != 0) {
							SQLiteDatabase v13 = this.mDeDatabase.getWritableDatabase();
							v13.beginTransaction();
							SQLiteDatabase v16 = this.mDeDatabase.getReadableDatabase();
							String v17 = new String(1);
							String v18 = new String(2);
							Cursor v19 = v16.query("accounts", v17, "name=? AND type=?", v18, 0, 0, 0);
							boolean v20 = v19.moveToNext();
							if (v20 == 0) {
								long v21 = v19.getLong(0);
								v19.close();
								long v15 = v21;
								if ((v15 < 0) >= 0) {
									SQLiteDatabase v24 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
									String v25 = new String(1);
									StringBuilder v26 = new StringBuilder();
									StringBuilder v28 = v26.append("accounts_id=");
									StringBuilder v29 = v26.append(v15);
									StringBuilder v30 = v26.append(" AND ");
									StringBuilder v31 = v26.append("key");
									StringBuilder v32 = v26.append("=?");
									String v33 = v26.toString();
									String v34 = new String(1);
									Cursor v35 = v24.query("ceDb.extras", v25, v33, v34, 0, 0, 0);
									boolean v36 = v35.moveToNext();
									if (v36 == 0) {
										long v37 = v35.getLong(0);
										v35.close();
										long v23 = v37;
										if ((v23 < 0) >= 0) {
											SQLiteDatabase v40 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
											ContentValues v41 = new ContentValues();
											v41.put("value", p4);
											String v44 = new String(1);
											String v45 = String.valueOf(v23);
											int v46 = v40.update("extras", v41, "_id=?", v44);
											if (v46 != 1) {
												boolean v39 = ;
												if (v39 != 0) {
													SQLiteDatabase v48 = this.mDeDatabase.getWritableDatabase();
													v48.setTransactionSuccessful();
													SQLiteDatabase v51 = this.mDeDatabase.getWritableDatabase();
													v51.endTransaction();
													AccountManagerService.writeUserDataIntoCacheLocked(v9, p1, p2, p3);
													AccountManager.invalidateLocalAccountUserDataCaches();
													IAccountManager$Stub.restoreCallingIdentity(v8);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SQLiteDatabase v40 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();\nContentValues v41 = new ContentValues();\nv41.put("value", p4);\nString v44 = new String(1);\nString v45 = String.valueOf(v23);\nint v46 = v40.update("extras", v41, "_id=?", v44);', 'SQLiteDatabase v26 = this.mDeDatabase.getWritableDatabase();\nv26.beginTransaction();\nSQLiteDatabase v29 = this.mDeDatabase.getReadableDatabase();\nCursor v32 = v29.query("accounts", v30, "name=? AND type=?", v31, 0, 0, 0);\nboolean v33 = v32.moveToNext();\n... subsequent database operations ...']

The method setUserData has the following similar APIs:

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z with Similarity Score: 0.9186528325080872
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v41 = this.mDeDatabase.getReadableDatabase();
LinkedHashMap v42 = new LinkedHashMap();
Cursor v45 = v41.query("accounts", v44, 0, 0, 0, 0, "_id");
boolean v46 = v45.moveToNext();

- API Name: addAccountExplicitlyWithVisibility(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;Ljava/lang/String;)Z with Similarity Score: 0.9140776991844177
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v31 = this.mDeDatabase.getWritableDatabase();
v31.beginTransaction();
Cursor v37 = v34.query("ceDb.accounts", v35, "name=? AND type=?", v36, 0, 0, 0);
boolean v38 = v37.moveToNext();

