This is path 1 for the API with depth 2:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("setAuthToken: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", authTokenType ");
		StringBuilder v8 = v3.append(p2);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				long v23 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v24 = p0.getUserAccounts(v18);
				if (p1 == 0) {
					if (p2 != 0) {
						HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
						HashMap v28 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
						Object v29 = v28.get(p2);
						if (v29 != 0) {
							StringBuilder v30 = new StringBuilder();
							StringBuilder v32 = v30.append("AccountManagerService:37:");
							int v33 = p2.hashCode();
							StringBuilder v34 = v30.append(v33);
							String v35 = v30.toString();
							AccountManagerService$NotificationId v36 = new AccountManagerService$NotificationId(v35,37);
							HashMap v38 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							Object v39 = v38.put(p2, v36);
							AccountManagerService$NotificationId v26 = ;
							int v40 = this.userId;
							UserHandle v41 = UserHandle.of(v40);
							String v43 = this.mContext.getPackageName();
							AccountManagerService.cancelNotification(v26, v43, v41);
							SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();
							v46.beginTransaction();
							SQLiteDatabase v49 = this.mDeDatabase.getReadableDatabase();
							String v50 = new String(1);
							String v51 = new String(2);
							Cursor v52 = v49.query("accounts", v50, "name=? AND type=?", v51, 0, 0, 0);
							boolean v53 = v52.moveToNext();
							if (v53 == 0) {
								long v54 = v52.getLong(0);
								v52.close();
								long v48 = v54;
								if ((v48 < 0) >= 0) {
									SQLiteDatabase v57 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
									String v58 = new String(2);
									String v59 = String.valueOf(v48);
									int v60 = v57.delete("ceDb.authtokens", "accounts_id=? AND type=?", v58);
									if (v60 <= 0) {
										boolean v56 = ;
										SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
										ContentValues v63 = new ContentValues();
										Long v65 = Long.valueOf(v48);
										v63.put("accounts_id", v65);
										v63.put("type", p3);
										v63.put("authtoken", p4);
										long v69 = v62.insert("ceDb.authtokens", "authtoken", v63);
										long v61 = v69;
										if ((v61 < 0) < 0) {
											SQLiteDatabase v71 = this.mDeDatabase.getWritableDatabase();
											v71.setTransactionSuccessful();
											SQLiteDatabase v74 = this.mDeDatabase.getWritableDatabase();
											v74.endTransaction();
											AccountManagerService.writeAuthTokenIntoCacheLocked(v24, p1, p2, p3);
											boolean v25 = 1;
											IAccountManager$Stub.restoreCallingIdentity(v23);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("setAuthToken: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", authTokenType ");
		StringBuilder v8 = v3.append(p2);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		Object v16 = Objects.requireNonNull(p1, "account cannot be null");
		Object v17 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v18 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v21 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v20 = v21;
			boolean v22 = v20.contains(Account.type);
			boolean v19 = v22;
			if (v19 == 0) {
				long v23 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v24 = p0.getUserAccounts(v18);
				if (p1 == 0) {
					if (p2 != 0) {
						HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
						HashMap v28 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
						Object v29 = v28.get(p2);
						if (v29 != 0) {
							StringBuilder v30 = new StringBuilder();
							StringBuilder v32 = v30.append("AccountManagerService:37:");
							int v33 = p2.hashCode();
							StringBuilder v34 = v30.append(v33);
							String v35 = v30.toString();
							AccountManagerService$NotificationId v36 = new AccountManagerService$NotificationId(v35,37);
							HashMap v38 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							Object v39 = v38.put(p2, v36);
							AccountManagerService$NotificationId v26 = ;
							int v40 = this.userId;
							UserHandle v41 = UserHandle.of(v40);
							String v43 = this.mContext.getPackageName();
							AccountManagerService.cancelNotification(v26, v43, v41);
							SQLiteDatabase v46 = this.mDeDatabase.getWritableDatabase();
							v46.beginTransaction();
							SQLiteDatabase v49 = this.mDeDatabase.getReadableDatabase();
							String v50 = new String(1);
							String v51 = new String(2);
							Cursor v52 = v49.query("accounts", v50, "name=? AND type=?", v51, 0, 0, 0);
							boolean v53 = v52.moveToNext();
							if (v53 == 0) {
								v52.close();
								long v48 = -1;
								if ((v48 < 0) >= 0) {
									SQLiteDatabase v56 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
									String v57 = new String(2);
									String v58 = String.valueOf(v48);
									int v59 = v56.delete("ceDb.authtokens", "accounts_id=? AND type=?", v57);
									if (v59 <= 0) {
										boolean v55 = ;
										SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
										ContentValues v62 = new ContentValues();
										Long v64 = Long.valueOf(v48);
										v62.put("accounts_id", v64);
										v62.put("type", p3);
										v62.put("authtoken", p4);
										long v68 = v61.insert("ceDb.authtokens", "authtoken", v62);
										long v60 = v68;
										if ((v60 < 0) < 0) {
											SQLiteDatabase v70 = this.mDeDatabase.getWritableDatabase();
											v70.setTransactionSuccessful();
											SQLiteDatabase v73 = this.mDeDatabase.getWritableDatabase();
											v73.endTransaction();
											AccountManagerService.writeAuthTokenIntoCacheLocked(v24, p1, p2, p3);
											boolean v25 = 1;
											IAccountManager$Stub.restoreCallingIdentity(v23);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setAuthToken(Account p1, String p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = Objects.requireNonNull(p1, "account cannot be null");
		Object v4 = Objects.requireNonNull(p2, "authTokenType cannot be null");
		int v5 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v7 = v8;
			boolean v9 = v7.contains(Account.type);
			boolean v6 = v9;
			if (v6 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v5);
				if (p1 == 0) {
					if (p2 != 0) {
						HashMap v14 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
						HashMap v15 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
						Object v16 = v15.get(p2);
						if (v16 != 0) {
							StringBuilder v17 = new StringBuilder();
							StringBuilder v19 = v17.append("AccountManagerService:37:");
							int v20 = p2.hashCode();
							StringBuilder v21 = v17.append(v20);
							String v22 = v17.toString();
							AccountManagerService$NotificationId v23 = new AccountManagerService$NotificationId(v22,37);
							HashMap v25 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							Object v26 = v25.put(p2, v23);
							AccountManagerService$NotificationId v13 = ;
							int v27 = this.userId;
							UserHandle v28 = UserHandle.of(v27);
							String v30 = this.mContext.getPackageName();
							AccountManagerService.cancelNotification(v13, v30, v28);
							SQLiteDatabase v33 = this.mDeDatabase.getWritableDatabase();
							v33.beginTransaction();
							SQLiteDatabase v36 = this.mDeDatabase.getReadableDatabase();
							String v37 = new String(1);
							String v38 = new String(2);
							Cursor v39 = v36.query("accounts", v37, "name=? AND type=?", v38, 0, 0, 0);
							boolean v40 = v39.moveToNext();
							if (v40 == 0) {
								long v41 = v39.getLong(0);
								v39.close();
								long v35 = v41;
								if ((v35 < 0) >= 0) {
									SQLiteDatabase v44 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
									String v45 = new String(2);
									String v46 = String.valueOf(v35);
									int v47 = v44.delete("ceDb.authtokens", "accounts_id=? AND type=?", v45);
									if (v47 <= 0) {
										boolean v43 = ;
										SQLiteDatabase v49 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
										ContentValues v50 = new ContentValues();
										Long v52 = Long.valueOf(v35);
										v50.put("accounts_id", v52);
										v50.put("type", p3);
										v50.put("authtoken", p4);
										long v56 = v49.insert("ceDb.authtokens", "authtoken", v50);
										long v48 = v56;
										if ((v48 < 0) < 0) {
											SQLiteDatabase v58 = this.mDeDatabase.getWritableDatabase();
											v58.setTransactionSuccessful();
											SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
											v61.endTransaction();
											AccountManagerService.writeAuthTokenIntoCacheLocked(v11, p1, p2, p3);
											boolean v12 = 1;
											IAccountManager$Stub.restoreCallingIdentity(v10);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
