This is path 1 for the API with depth 2:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
				boolean v12 = "android:accounts:key_legacy_visible".equals(p2);
				if (v12 == 0) {
					boolean v13 = "android:accounts:key_legacy_not_visible".equals(p2);
					if (v13 == 0) {
						if (v20 == 0) {
							int v21 = this.userId;
							if (Account.type != 0) {
								long v23 = Binder.clearCallingIdentity();
								Collection v24 = this.mAuthenticatorCache.getAllServices(v21);
								Binder.restoreCallingIdentity(v23);
								Object v26 = LocalServices.getService(PackageManagerInterna.class);
								Iterator v27 = v24.iterator();
								boolean v28 = v27.hasNext();
								if (v28 == 0) {
									Object v29 = v27.next();
									boolean v30 = Account.type.equals(AuthenticatorDescription.type);
									if (v30 == 0) {
										if (RegisteredServicesCache$ServiceInfo.uid != v18) {
											boolean v31 = v26.hasSignatureCapability(RegisteredServicesCache$ServiceInfo.uid, v18, 16);
											if (v31 == 0) {
												int v22 = 1;
												if (v22 != 2) {
													Map v33 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);
													Object v34 = v33.get(p2);
													if (v34 == 0) {
														int v35 = v34.intValue();
														int v32 = ;
														if (v32 == 0) {
															Integer v36 = Integer.valueOf(v32);
															Integer v14 = v36;
															int v37 = v14.intValue();
															IAccountManager$Stub.restoreCallingIdentity(v10);
															return v37;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
				boolean v12 = "android:accounts:key_legacy_visible".equals(p2);
				if (v12 == 0) {
					boolean v13 = "android:accounts:key_legacy_not_visible".equals(p2);
					if (v13 == 0) {
						if (v20 == 0) {
							int v21 = this.userId;
							if (Account.type != 0) {
								long v23 = Binder.clearCallingIdentity();
								Collection v24 = this.mAuthenticatorCache.getAllServices(v21);
								Binder.restoreCallingIdentity(v23);
								Object v26 = LocalServices.getService(PackageManagerInterna.class);
								Iterator v27 = v24.iterator();
								boolean v28 = v27.hasNext();
								if (v28 == 0) {
									Object v29 = v27.next();
									boolean v30 = Account.type.equals(AuthenticatorDescription.type);
									if (v30 == 0) {
										if (RegisteredServicesCache$ServiceInfo.uid != v18) {
											int v22 = 2;
											if (v22 != 2) {
												Map v32 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p3);
												Object v33 = v32.get(p2);
												if (v33 == 0) {
													int v34 = v33.intValue();
													int v31 = ;
													if (v31 == 0) {
														Integer v35 = Integer.valueOf(v31);
														Integer v14 = v35;
														int v36 = v14.intValue();
														IAccountManager$Stub.restoreCallingIdentity(v10);
														return v36;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public int getAccountVisibility(Account p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
				boolean v12 = "android:accounts:key_legacy_visible".equals(p2);
				if (v12 == 0) {
					boolean v13 = "android:accounts:key_legacy_not_visible".equals(p2);
					if (v13 == 0) {
						Map v16 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p3);
						Object v17 = v16.get(p1);
						if (v17 != 0) {
							int v18 = Log.d("AccountManagerService", "Visibility was not initialized");
							HashMap v19 = new HashMap();
							Map v21 = AccountManagerService$UserAccounts.-$$Nest$fgetvisibilityCache(p3);
							Object v22 = v21.put(p1, v19);
							AccountManager.invalidateLocalAccountsDataCaches();
							Map v15 = ;
							Object v24 = v15.get(p2);
							if (v24 == 0) {
								int v25 = v24.intValue();
								int v14 = ;
								if (v14 == 0) {
									IAccountManager$Stub.restoreCallingIdentity(v10);
									return v14;
								}
							}
						}
					}
				}
			}
		}
	}
}
