This is path 1 for the API with depth 2:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("addAccount: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", authTokenType ");
		StringBuilder v11 = v4.append(p3);
		StringBuilder v12 = v4.append(", requiredFeatures ");
		String v13 = Arrays.toString(p4);
		StringBuilder v14 = v4.append(v13);
		StringBuilder v15 = v4.append(", expectActivityLaunch ");
		StringBuilder v16 = v4.append(p5);
		StringBuilder v17 = v4.append(", caller's uid ");
		int v18 = Binder.getCallingUid();
		StringBuilder v19 = v4.append(v18);
		StringBuilder v20 = v4.append(", pid ");
		int v21 = Binder.getCallingPid();
		StringBuilder v22 = v4.append(v21);
		StringBuilder v23 = v4.append(", for user id ");
		StringBuilder v24 = v4.append(p7);
		String v25 = v4.toString();
		int v26 = Log.v("AccountManagerService", v25);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				if (v31 == 0) {
					boolean v29 = ;
					if (v29 != 0) {
						Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
						if (v34 == 0) {
							boolean v35 = v34.isActiveProfileOwner(p2);
							if (v35 != 0) {
								boolean v36 = v34.isActiveDeviceOwner(p2);
								if (v36 == 0) {
									boolean v33 = ;
									if (v33 == 0) {
										UserManager v37 = AccountManagerService.getUserManager();
										UserHandle v38 = new UserHandle(p7);
										Bundle v40 = v37.getUserRestrictions(v38);
										boolean v41 = v40.getBoolean("no_modify_accounts");
										if (v41 == 0) {
											boolean v32 = 0;
											if (v32 != 0) {
												Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
												if (v44 == 0) {
													boolean v45 = v44.isActiveProfileOwner(p3);
													if (v45 != 0) {
														boolean v46 = v44.isActiveDeviceOwner(p3);
														if (v46 == 0) {
															boolean v43 = ;
															if (v43 == 0) {
																Object v47 = this.mContext.getSystemService("device_policy");
																String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
																if (v48 != 0) {
																	if ( >= v48.length) {
																		boolean v49 = v48[].equals(p2);
																		if (v49 == 0) {
																			boolean v42 = 0;
																			if (v42 != 0) {
																				int v51 = Binder.getCallingPid();
																				int v52 = Binder.getCallingUid();
																				if (p6 != 0) {
																					Bundle v53 = new Bundle();
																					.putInt("callerUid", v52);
																					.putInt("callerPid", v51);
																					long v57 = IAccountManager$Stub.clearCallingIdentity();
																					AccountManagerService$UserAccounts v59 = AccountManagerService.getUserAccountsNotChecked(p7);
																					AccountManagerService$UserAccounts v58 = v59;
																					AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v58, v52);
																					AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																					boolean v65 = Log.isLoggable("AccountManagerService", 2);
																					if (v65 == 0) {
																						StringBuilder v66 = new StringBuilder();
																						StringBuilder v68 = v66.append("initiating bind to authenticator type ");
																						StringBuilder v69 = v66.append(this.mAccountType);
																						String v70 = v66.toString();
																						int v71 = Log.v("AccountManagerService", v70);
																						boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																						if (v72 != 0) {
																							StringBuilder v73 = new StringBuilder();
																							StringBuilder v75 = v73.append("bind attempt failed for ");
																							String v76 = AccountManagerService$Session.toDebugString();
																							StringBuilder v77 = v73.append(v76);
																							String v78 = v73.toString();
																							int v79 = Log.d("AccountManagerService", v78);
																							AccountManagerService$Session.onError(1, "bind failure");
																							IAccountManager$Stub.restoreCallingIdentity(v57);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("addAccount: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", authTokenType ");
		StringBuilder v11 = v4.append(p3);
		StringBuilder v12 = v4.append(", requiredFeatures ");
		String v13 = Arrays.toString(p4);
		StringBuilder v14 = v4.append(v13);
		StringBuilder v15 = v4.append(", expectActivityLaunch ");
		StringBuilder v16 = v4.append(p5);
		StringBuilder v17 = v4.append(", caller's uid ");
		int v18 = Binder.getCallingUid();
		StringBuilder v19 = v4.append(v18);
		StringBuilder v20 = v4.append(", pid ");
		int v21 = Binder.getCallingPid();
		StringBuilder v22 = v4.append(v21);
		StringBuilder v23 = v4.append(", for user id ");
		StringBuilder v24 = v4.append(p7);
		String v25 = v4.toString();
		int v26 = Log.v("AccountManagerService", v25);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				if (v31 == 0) {
					boolean v29 = ;
					if (v29 != 0) {
						Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
						if (v34 == 0) {
							boolean v35 = v34.isActiveProfileOwner(p2);
							if (v35 != 0) {
								boolean v36 = v34.isActiveDeviceOwner(p2);
								if (v36 == 0) {
									boolean v33 = ;
									if (v33 == 0) {
										UserManager v37 = AccountManagerService.getUserManager();
										UserHandle v38 = new UserHandle(p7);
										Bundle v40 = v37.getUserRestrictions(v38);
										boolean v41 = v40.getBoolean("no_modify_accounts");
										if (v41 == 0) {
											boolean v32 = 1;
											if (v32 != 0) {
												Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
												if (v44 == 0) {
													boolean v45 = v44.isActiveProfileOwner(p3);
													if (v45 != 0) {
														boolean v46 = v44.isActiveDeviceOwner(p3);
														if (v46 == 0) {
															boolean v43 = ;
															if (v43 == 0) {
																Object v47 = this.mContext.getSystemService("device_policy");
																String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
																if (v48 != 0) {
																	if ( >= v48.length) {
																		boolean v49 = v48[].equals(p2);
																		if (v49 == 0) {
																			boolean v42 = 0;
																			if (v42 != 0) {
																				int v51 = Binder.getCallingPid();
																				int v52 = Binder.getCallingUid();
																				if (p6 != 0) {
																					Bundle v53 = new Bundle();
																					.putInt("callerUid", v52);
																					.putInt("callerPid", v51);
																					long v57 = IAccountManager$Stub.clearCallingIdentity();
																					AccountManagerService$UserAccounts v59 = AccountManagerService.getUserAccountsNotChecked(p7);
																					AccountManagerService$UserAccounts v58 = v59;
																					AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v58, v52);
																					AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																					boolean v65 = Log.isLoggable("AccountManagerService", 2);
																					if (v65 == 0) {
																						StringBuilder v66 = new StringBuilder();
																						StringBuilder v68 = v66.append("initiating bind to authenticator type ");
																						StringBuilder v69 = v66.append(this.mAccountType);
																						String v70 = v66.toString();
																						int v71 = Log.v("AccountManagerService", v70);
																						boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																						if (v72 != 0) {
																							StringBuilder v73 = new StringBuilder();
																							StringBuilder v75 = v73.append("bind attempt failed for ");
																							String v76 = AccountManagerService$Session.toDebugString();
																							StringBuilder v77 = v73.append(v76);
																							String v78 = v73.toString();
																							int v79 = Log.d("AccountManagerService", v78);
																							AccountManagerService$Session.onError(1, "bind failure");
																							IAccountManager$Stub.restoreCallingIdentity(v57);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void addAccountAsUser(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6, int p7){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("addAccount: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", authTokenType ");
		StringBuilder v11 = v4.append(p3);
		StringBuilder v12 = v4.append(", requiredFeatures ");
		String v13 = Arrays.toString(p4);
		StringBuilder v14 = v4.append(v13);
		StringBuilder v15 = v4.append(", expectActivityLaunch ");
		StringBuilder v16 = v4.append(p5);
		StringBuilder v17 = v4.append(", caller's uid ");
		int v18 = Binder.getCallingUid();
		StringBuilder v19 = v4.append(v18);
		StringBuilder v20 = v4.append(", pid ");
		int v21 = Binder.getCallingPid();
		StringBuilder v22 = v4.append(v21);
		StringBuilder v23 = v4.append(", for user id ");
		StringBuilder v24 = v4.append(p7);
		String v25 = v4.toString();
		int v26 = Log.v("AccountManagerService", v25);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				if (v31 == 0) {
					boolean v29 = ;
					if (v29 != 0) {
						Object v34 = LocalServices.getService(DevicePolicyManagerInterna.class);
						if (v34 == 0) {
							boolean v35 = v34.isActiveProfileOwner(p2);
							if (v35 != 0) {
								boolean v36 = v34.isActiveDeviceOwner(p2);
								if (v36 == 0) {
									boolean v33 = ;
									if (v33 == 0) {
										UserManager v37 = AccountManagerService.getUserManager();
										UserHandle v38 = new UserHandle(p7);
										Bundle v40 = v37.getUserRestrictions(v38);
										boolean v41 = v40.getBoolean("no_modify_accounts");
										if (v41 == 0) {
											boolean v32 = 0;
											if (v32 != 0) {
												Object v44 = LocalServices.getService(DevicePolicyManagerInterna.class);
												if (v44 == 0) {
													boolean v45 = v44.isActiveProfileOwner(p3);
													if (v45 != 0) {
														boolean v46 = v44.isActiveDeviceOwner(p3);
														if (v46 == 0) {
															boolean v43 = ;
															if (v43 == 0) {
																Object v47 = this.mContext.getSystemService("device_policy");
																String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);
																if (v48 != 0) {
																	if ( >= v48.length) {
																		boolean v49 = v48[].equals(p2);
																		if (v49 == 0) {
																			boolean v42 = 0;
																			if (v42 != 0) {
																				int v51 = Binder.getCallingPid();
																				int v52 = Binder.getCallingUid();
																				if (p6 != 0) {
																					Bundle v53 = new Bundle();
																					.putInt("callerUid", v52);
																					.putInt("callerPid", v51);
																					long v57 = IAccountManager$Stub.clearCallingIdentity();
																					AccountManagerService$UserAccounts v59 = AccountManagerService.getUserAccountsNotChecked(p7);
																					AccountManagerService$UserAccounts v58 = v59;
																					AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v58, v52);
																					AccountManagerService$9 v62 = new AccountManagerService$9(AccountManagerService,v58,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																					boolean v65 = Log.isLoggable("AccountManagerService", 2);
																					if (v65 == 0) {
																						StringBuilder v66 = new StringBuilder();
																						StringBuilder v68 = v66.append("initiating bind to authenticator type ");
																						StringBuilder v69 = v66.append(this.mAccountType);
																						String v70 = v66.toString();
																						int v71 = Log.v("AccountManagerService", v70);
																						boolean v72 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																						if (v72 != 0) {
																							StringBuilder v73 = new StringBuilder();
																							StringBuilder v75 = v73.append("bind attempt failed for ");
																							String v76 = AccountManagerService$Session.toDebugString();
																							StringBuilder v77 = v73.append(v76);
																							String v78 = v73.toString();
																							int v79 = Log.d("AccountManagerService", v78);
																							AccountManagerService$Session.onError(1, "bind failure");
																							IAccountManager$Stub.restoreCallingIdentity(v57);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
