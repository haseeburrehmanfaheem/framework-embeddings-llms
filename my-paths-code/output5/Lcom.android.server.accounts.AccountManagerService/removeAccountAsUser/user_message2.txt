The method removeAccountAsUser has the following code snippet:

This is path 1 for the API with depth 2:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("removeAccount: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", for user id ");
		StringBuilder v15 = v3.append(p4);
		String v16 = v3.toString();
		int v17 = Log.v("AccountManagerService", v16);
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (v22 == 0) {
					boolean v20 = ;
					if (v20 != 0) {
						UserHandle v23 = UserHandle.of(p4);
						int v24 = v23.getIdentifier();
						if (Account.type != 0) {
							List v27 = AccountManagerService.getTypesForCaller(p2, p3, 0);
							List v26 = v27;
							boolean v28 = v26.contains(Account.type);
							boolean v25 = v28;
							if (v25 != 0) {
								boolean v29 = p0.isSystemUid(v1);
								if (v29 != 0) {
									Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
									Object v31 = v32;
									if (v31 == 0) {
										boolean v33 = v31.isActiveProfileOwner(v1);
										if (v33 != 0) {
											boolean v34 = v31.isActiveDeviceOwner(v1);
											if (v34 == 0) {
												boolean v30 = ;
												if (v30 == 0) {
													Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
													if (v37 == 0) {
														boolean v38 = v37.isActiveProfileOwner(p2);
														if (v38 != 0) {
															boolean v39 = v37.isActiveDeviceOwner(p2);
															if (v39 == 0) {
																boolean v36 = ;
																if (v36 == 0) {
																	UserManager v40 = AccountManagerService.getUserManager();
																	UserHandle v41 = new UserHandle(p4);
																	Bundle v43 = v40.getUserRestrictions(v41);
																	boolean v44 = v43.getBoolean("no_modify_accounts");
																	if (v44 == 0) {
																		boolean v35 = 0;
																		if (v35 != 0) {
																			Object v47 = LocalServices.getService(DevicePolicyManagerInterna.class);
																			if (v47 == 0) {
																				boolean v48 = v47.isActiveProfileOwner(p3);
																				if (v48 != 0) {
																					boolean v49 = v47.isActiveDeviceOwner(p3);
																					if (v49 == 0) {
																						boolean v46 = ;
																						if (v46 == 0) {
																							Object v50 = this.mContext.getSystemService("device_policy");
																							String v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);
																							if (v51 != 0) {
																								if ( >= v51.length) {
																									boolean v52 = v51[].equals(Account.type);
																									if (v52 == 0) {
																										boolean v45 = 0;
																										if (v45 != 0) {
																											p1.onError(101, "User cannot modify accounts of this type (policy).");
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("removeAccount: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", for user id ");
		StringBuilder v15 = v3.append(p4);
		String v16 = v3.toString();
		int v17 = Log.v("AccountManagerService", v16);
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (v22 == 0) {
					boolean v20 = ;
					if (v20 != 0) {
						UserHandle v23 = UserHandle.of(p4);
						int v24 = v23.getIdentifier();
						if (Account.type != 0) {
							List v27 = AccountManagerService.getTypesForCaller(p2, p3, 0);
							List v26 = v27;
							boolean v28 = v26.contains(Account.type);
							boolean v25 = v28;
							if (v25 != 0) {
								boolean v29 = p0.isSystemUid(v1);
								if (v29 != 0) {
									Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
									Object v31 = v32;
									if (v31 == 0) {
										boolean v33 = v31.isActiveProfileOwner(v1);
										if (v33 != 0) {
											boolean v34 = v31.isActiveDeviceOwner(v1);
											if (v34 == 0) {
												boolean v30 = ;
												if (v30 == 0) {
													Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
													if (v37 == 0) {
														boolean v38 = v37.isActiveProfileOwner(p2);
														if (v38 != 0) {
															boolean v39 = v37.isActiveDeviceOwner(p2);
															if (v39 == 0) {
																boolean v36 = ;
																if (v36 == 0) {
																	UserManager v40 = AccountManagerService.getUserManager();
																	UserHandle v41 = new UserHandle(p4);
																	Bundle v43 = v40.getUserRestrictions(v41);
																	boolean v44 = v43.getBoolean("no_modify_accounts");
																	if (v44 == 0) {
																		boolean v35 = 1;
																		if (v35 != 0) {
																			Object v47 = LocalServices.getService(DevicePolicyManagerInterna.class);
																			if (v47 == 0) {
																				boolean v48 = v47.isActiveProfileOwner(p3);
																				if (v48 != 0) {
																					boolean v49 = v47.isActiveDeviceOwner(p3);
																					if (v49 == 0) {
																						boolean v46 = ;
																						if (v46 == 0) {
																							Object v50 = this.mContext.getSystemService("device_policy");
																							String v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);
																							if (v51 != 0) {
																								if ( >= v51.length) {
																									boolean v52 = v51[].equals(Account.type);
																									if (v52 == 0) {
																										boolean v45 = 0;
																										if (v45 != 0) {
																											p1.onError(101, "User cannot modify accounts of this type (policy).");
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void removeAccountAsUser(IAccountManagerResponse p1, Account p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("removeAccount: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", for user id ");
		StringBuilder v15 = v3.append(p4);
		String v16 = v3.toString();
		int v17 = Log.v("AccountManagerService", v16);
		if (p2 == 0) {
			Preconditions.checkArgument(, "account cannot be null");
			if (p1 == 0) {
				Preconditions.checkArgument(, "response cannot be null");
				if (v22 == 0) {
					boolean v20 = ;
					if (v20 != 0) {
						UserHandle v23 = UserHandle.of(p4);
						int v24 = v23.getIdentifier();
						if (Account.type != 0) {
							List v27 = AccountManagerService.getTypesForCaller(p2, p3, 0);
							List v26 = v27;
							boolean v28 = v26.contains(Account.type);
							boolean v25 = v28;
							if (v25 != 0) {
								boolean v29 = p0.isSystemUid(v1);
								if (v29 != 0) {
									Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
									Object v31 = v32;
									if (v31 == 0) {
										boolean v33 = v31.isActiveProfileOwner(v1);
										if (v33 != 0) {
											boolean v34 = v31.isActiveDeviceOwner(v1);
											if (v34 == 0) {
												boolean v30 = ;
												if (v30 == 0) {
													Object v37 = LocalServices.getService(DevicePolicyManagerInterna.class);
													if (v37 == 0) {
														boolean v38 = v37.isActiveProfileOwner(p2);
														if (v38 != 0) {
															boolean v39 = v37.isActiveDeviceOwner(p2);
															if (v39 == 0) {
																boolean v36 = ;
																if (v36 == 0) {
																	UserManager v40 = AccountManagerService.getUserManager();
																	UserHandle v41 = new UserHandle(p4);
																	Bundle v43 = v40.getUserRestrictions(v41);
																	boolean v44 = v43.getBoolean("no_modify_accounts");
																	if (v44 == 0) {
																		boolean v35 = 0;
																		if (v35 != 0) {
																			Object v47 = LocalServices.getService(DevicePolicyManagerInterna.class);
																			if (v47 == 0) {
																				boolean v48 = v47.isActiveProfileOwner(p3);
																				if (v48 != 0) {
																					boolean v49 = v47.isActiveDeviceOwner(p3);
																					if (v49 == 0) {
																						boolean v46 = ;
																						if (v46 == 0) {
																							Object v50 = this.mContext.getSystemService("device_policy");
																							String v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);
																							if (v51 != 0) {
																								if ( >= v51.length) {
																									boolean v52 = v51[].equals(Account.type);
																									if (v52 == 0) {
																										boolean v45 = 0;
																										if (v45 != 0) {
																											p1.onError(101, "User cannot modify accounts of this type (policy).");
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = Binder.getCallingUid();\nboolean v2 = Log.isLoggable("AccountManagerService", 2);\nif (v2 == 0) {\nStringBuilder v3 = new StringBuilder();\nStringBuilder v5 = v3.append("removeAccount: ");\nStringBuilder v6 = v3.append(p2);\nStringBuilder v7 = v3.append(", response ");\nStringBuilder v8 = v3.append(p1);\nStringBuilder v9 = v3.append(", caller\'s uid ");\nStringBuilder v10 = v3.append(v1);\nStringBuilder v11 = v3.append(", pid ");\nint v12 = Binder.getCallingPid();\nStringBuilder v13 = v3.append(v12);\nStringBuilder v14 = v3.append(", for user id ");\nStringBuilder v15 = v3.append(p4);\nString v16 = v3.toString();\nint v17 = Log.v("AccountManagerService", v16);', 'UserHandle v23 = UserHandle.of(p4);\nint v24 = v23.getIdentifier();\nList v27 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nList v26 = v27;\nboolean v28 = v26.contains(Account.type);\nboolean v25 = v28;\nif (v25 != 0) {', 'Object v32 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);\nObject v31 = v32;\nif (v31 == 0) {\nboolean v33 = v31.isActiveProfileOwner(v1);\nif (v33 != 0) {', 'UserManager v40 = AccountManagerService.getUserManager();\nUserHandle v41 = new UserHandle(p4);\nBundle v43 = v40.getUserRestrictions(v41);\nboolean v44 = v43.getBoolean("no_modify_accounts");\nif (v44 == 0) {', 'Object v50 = this.mContext.getSystemService("device_policy");\nString v51 = v50.getAccountTypesWithManagementDisabledAsUser(p4);\nif (v51 != 0) {']

The method removeAccountAsUser has the following similar APIs:

- API Name: startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.9247952103614807
  - Access Control Level: SYS_OR_SIG and the following code:
UserManager v33 = AccountManagerService.getUserManager();
Bundle v36 = v33.getUserRestrictions(v34);
boolean v37 = v36.getBoolean("no_modify_accounts");

- API Name: startAddAccountSession(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;)V with Similarity Score: 0.8844497799873352
  - Access Control Level: SYS_OR_SIG and the following code:
Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
boolean v31 = v30.isActiveProfileOwner(p2);
boolean v32 = v30.isActiveDeviceOwner(p2);

