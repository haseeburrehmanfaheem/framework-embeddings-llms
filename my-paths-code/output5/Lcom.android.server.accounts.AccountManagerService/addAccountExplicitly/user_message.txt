This is path 1 for the API with depth 2:
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = Log.isLoggable("AccountManagerService", 2);
	if (v5 == 0) {
		StringBuilder v6 = new StringBuilder();
		StringBuilder v8 = v6.append("addAccountExplicitly: ");
		StringBuilder v9 = v6.append(p1);
		StringBuilder v10 = v6.append(", caller's uid ");
		StringBuilder v11 = v6.append(v3);
		StringBuilder v12 = v6.append(", pid ");
		int v13 = Binder.getCallingPid();
		StringBuilder v14 = v6.append(v13);
		String v15 = v6.toString();
		int v16 = Log.v("AccountManagerService", v15);
		Object v17 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
			boolean v20 = v19.contains(Account.type);
			boolean v18 = v20;
			if (v18 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
				AccountManagerService$UserAccounts v22 = v23;
				Bundle v25 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v26 = Account.name.length();
						if (v26 <= 200) {
							if (Account.type == 0) {
								int v27 = Account.type.length();
								if (v27 <= 200) {
									int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
									boolean v29 = AccountManagerService.isLocalUnlockedUser(v28);
									if (v29 != 0) {
										AccountManagerService$UserAccounts.accountsDb.beginTransaction();
										long v31 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
										if ((v31 < 0) < 0) {
											Map v32 = AccountManagerService$UserAccounts.accountsDb.findAllDeAccounts();
											int v33 = v32.size();
											if (v33 <= 100) {
												StringBuilder v34 = new StringBuilder();
												StringBuilder v36 = v34.append("insertAccountIntoDatabase: ");
												String v37 = p1.toSafeString();
												StringBuilder v38 = v34.append(v37);
												StringBuilder v39 = v34.append(", skipping since more than 50 accounts on device exist");
												String v40 = v34.toString();
												int v41 = Log.w("AccountManagerService", v40);
												AccountManagerService$UserAccounts.accountsDb.endTransaction();
												boolean v24 = 0;
												IAccountManager$Stub.restoreCallingIdentity(v21);
												boolean v1 = v24;
												return v1;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean addAccountExplicitly(Account p1, String p2, Bundle p3, String p4){
	Bundle v2 = Bundle.setDefusable(p3, 1);
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = Log.isLoggable("AccountManagerService", 2);
	if (v5 == 0) {
		StringBuilder v6 = new StringBuilder();
		StringBuilder v8 = v6.append("addAccountExplicitly: ");
		StringBuilder v9 = v6.append(p1);
		StringBuilder v10 = v6.append(", caller's uid ");
		StringBuilder v11 = v6.append(v3);
		StringBuilder v12 = v6.append(", pid ");
		int v13 = Binder.getCallingPid();
		StringBuilder v14 = v6.append(v13);
		String v15 = v6.toString();
		int v16 = Log.v("AccountManagerService", v15);
		Object v17 = Objects.requireNonNull(p1, "account cannot be null");
		if (Account.type != 0) {
			List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
			boolean v20 = v19.contains(Account.type);
			boolean v18 = v20;
			if (v18 == 0) {
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
				AccountManagerService$UserAccounts v22 = v23;
				Bundle v25 = Bundle.setDefusable(p3, 1);
				if (p1 != 0) {
					if (Account.name == 0) {
						int v26 = Account.name.length();
						if (v26 <= 200) {
							if (Account.type == 0) {
								int v27 = Account.type.length();
								if (v27 <= 200) {
									int v28 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(v22);
									boolean v29 = AccountManagerService.isLocalUnlockedUser(v28);
									if (v29 != 0) {
										AccountManagerService$UserAccounts.accountsDb.beginTransaction();
										long v31 = AccountManagerService$UserAccounts.accountsDb.findCeAccountId(p1);
										if ((v31 < 0) < 0) {
											StringBuilder v32 = new StringBuilder();
											StringBuilder v34 = v32.append("insertAccountIntoDatabase: ");
											String v35 = p1.toSafeString();
											StringBuilder v36 = v32.append(v35);
											StringBuilder v37 = v32.append(", skipping since the account already exists");
											String v38 = v32.toString();
											int v39 = Log.w("AccountManagerService", v38);
											AccountManagerService$UserAccounts.accountsDb.endTransaction();
											boolean v24 = 0;
											IAccountManager$Stub.restoreCallingIdentity(v21);
											boolean v1 = v24;
											return v1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
