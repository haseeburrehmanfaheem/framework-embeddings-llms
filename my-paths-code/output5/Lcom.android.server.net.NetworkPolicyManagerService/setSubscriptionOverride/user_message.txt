This is path 1 for the API with depth 2:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	ArraySet v32 = new ArraySet();
	[I v34 = TelephonyManager.getAllNetworkTypes();
	if ( >= v34.length) {
		boolean v35 = ;
		IntArray v36 = new IntArray();
		if ( >= p4.length) {
			Object v39 = this.mSubscriptionPlans.get(p1);
			boolean v40 = ArrayUtils.isEmpty(v39);
			if (v40 != 0) {
				if ( >= v39.length) {
					RecurrenceRule v41 = this.cycleRule;
					boolean v42 = v41.isRecurring();
					if (v42 == 0) {
						Iterator v44 = this.cycleRule.cycleIterator();
						Iterator v43 = v44;
						Object v45 = v43.next();
						ZonedDateTime v46 = ZonedDateTime.now(this.mClock);
						boolean v47 = v45.contains(v46);
						if (v47 == 0) {
							SubscriptionPlan v38 = v39[];
							if (p2 == 1) {
								if (v38 == 0) {
									int v48 = v38.getDataLimitBehavior();
									if (v48 == -1) {
										ContentResolver v49 = this.mContext.getContentResolver();
										int v50 = Settings$Global.getInt(v49, "netpolicy_override_enabled", 1);
										if (v50 == 0) {
											if ( != 0) {
												if (p3 != 0) {
													SomeArgs v51 = SomeArgs.obtain();
													Integer v52 = Integer.valueOf(p1);
													SomeArgs.arg1 = v52;
													Integer v53 = Integer.valueOf(p2);
													SomeArgs.arg2 = v53;
													Integer v54 = Integer.valueOf(p3);
													SomeArgs.arg3 = v54;
													[I v55 = v36.toArray();
													SomeArgs.arg4 = v55;
													Message v56 = this.mHandler.obtainMessage(16, v51);
													boolean v57 = this.mHandler.sendMessage(v56);
													if ((p5 < 0) <= 0) {
														Integer v58 = Integer.valueOf(0);
														SomeArgs.arg3 = v58;
														Message v59 = this.mHandler.obtainMessage(16, v51);
														boolean v60 = this.mHandler.sendMessageDelayed(v59, p5);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	ArraySet v32 = new ArraySet();
	[I v34 = TelephonyManager.getAllNetworkTypes();
	if ( >= v34.length) {
		boolean v35 = ;
		IntArray v36 = new IntArray();
		if ( >= p4.length) {
			Object v39 = this.mSubscriptionPlans.get(p1);
			boolean v40 = ArrayUtils.isEmpty(v39);
			if (v40 != 0) {
				if ( >= v39.length) {
					RecurrenceRule v41 = this.cycleRule;
					boolean v42 = v41.isRecurring();
					if (v42 == 0) {
						Iterator v44 = this.cycleRule.cycleIterator();
						Iterator v43 = v44;
						Object v45 = v43.next();
						ZonedDateTime v46 = ZonedDateTime.now(this.mClock);
						boolean v47 = v45.contains(v46);
						if (v47 == 0) {
							SubscriptionPlan v38 = v39[];
							if (p2 == 1) {
								if (v38 == 0) {
									int v48 = v38.getDataLimitBehavior();
									if (v48 == -1) {
										ContentResolver v49 = this.mContext.getContentResolver();
										int v50 = Settings$Global.getInt(v49, "netpolicy_override_enabled", 1);
										if (v50 == 0) {
											if ( != 0) {
												SomeArgs v51 = SomeArgs.obtain();
												Integer v52 = Integer.valueOf(p1);
												SomeArgs.arg1 = v52;
												Integer v53 = Integer.valueOf(p2);
												SomeArgs.arg2 = v53;
												Integer v54 = Integer.valueOf(p3);
												SomeArgs.arg3 = v54;
												[I v55 = v36.toArray();
												SomeArgs.arg4 = v55;
												Message v56 = this.mHandler.obtainMessage(16, v51);
												boolean v57 = this.mHandler.sendMessage(v56);
												if ((p5 < 0) <= 0) {
													Integer v58 = Integer.valueOf(0);
													SomeArgs.arg3 = v58;
													Message v59 = this.mHandler.obtainMessage(16, v51);
													boolean v60 = this.mHandler.sendMessageDelayed(v59, p5);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setSubscriptionOverride(int p1, int p2, int p3, [I p4, long p5, String p6){
	int v1 = Binder.getCallingUid();
	ArraySet v32 = new ArraySet();
	[I v34 = TelephonyManager.getAllNetworkTypes();
	if ( >= v34.length) {
		boolean v35 = ;
		IntArray v36 = new IntArray();
		if ( >= p4.length) {
			Object v39 = this.mSubscriptionPlans.get(p1);
			boolean v40 = ArrayUtils.isEmpty(v39);
			if (v40 != 0) {
				if ( >= v39.length) {
					RecurrenceRule v41 = this.cycleRule;
					boolean v42 = v41.isRecurring();
					if (v42 == 0) {
						Iterator v44 = this.cycleRule.cycleIterator();
						Iterator v43 = v44;
						Object v45 = v43.next();
						ZonedDateTime v46 = ZonedDateTime.now(this.mClock);
						boolean v47 = v45.contains(v46);
						if (v47 == 0) {
							SubscriptionPlan v38 = v39[];
							if (p2 == 1) {
								if (v38 == 0) {
									int v48 = v38.getDataLimitBehavior();
									if (v48 == -1) {
										ContentResolver v49 = this.mContext.getContentResolver();
										int v50 = Settings$Global.getInt(v49, "netpolicy_override_enabled", 1);
										if (v50 == 0) {
											if ( != 0) {
												if (p3 != 0) {
													SomeArgs v51 = SomeArgs.obtain();
													Integer v52 = Integer.valueOf(p1);
													SomeArgs.arg1 = v52;
													Integer v53 = Integer.valueOf(p2);
													SomeArgs.arg2 = v53;
													Integer v54 = Integer.valueOf(p3);
													SomeArgs.arg3 = v54;
													[I v55 = v36.toArray();
													SomeArgs.arg4 = v55;
													Message v56 = this.mHandler.obtainMessage(16, v51);
													boolean v57 = this.mHandler.sendMessage(v56);
													if ((p5 < 0) <= 0) {
														Integer v58 = Integer.valueOf(0);
														SomeArgs.arg3 = v58;
														Message v59 = this.mHandler.obtainMessage(16, v51);
														boolean v60 = this.mHandler.sendMessageDelayed(v59, p5);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
