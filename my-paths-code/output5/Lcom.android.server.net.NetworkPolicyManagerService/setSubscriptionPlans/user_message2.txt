The method setSubscriptionPlans has the following code snippet:

This is path 1 for the API with depth 2:
public void setSubscriptionPlans(int p1, SubscriptionPlan p2, long p3, String p4){
	int v1 = Binder.getCallingUid();
	if (p2.length != 0) {
		[I v33 = TelephonyManager.getAllNetworkTypes();
		ArraySet v34 = new ArraySet();
		if ( >= v33.length) {
			boolean v36 = ;
			ArraySet v37 = new ArraySet();
			if ( >= p2.length) {
				if ( == 0) {
					if ( >= p2.length) {
						long v39 = Binder.clearCallingIdentity();
						this.mSubscriptionPlans.put(p1, p2);
						this.mSubscriptionPlansOwner.put(p1, p4);
						Object v43 = this.mSubIdToSubscriberId.get(p1, 0);
						if (v43 == 0) {
							NetworkIdentity$Builder v45 = new NetworkIdentity$Builder();
							NetworkIdentity$Builder v47 = v45.setType(0);
							NetworkIdentity$Builder v48 = v47.setSubscriberId(v43);
							NetworkIdentity$Builder v49 = v48.setMetered(1);
							NetworkIdentity$Builder v50 = v49.setDefaultNetwork(1);
							NetworkIdentity$Builder v51 = v50.setSubId(p1);
							NetworkIdentity v52 = v51.build();
							int v53 = this.mNetworkPolicy.size();
							if ( < 0) {
								Object v54 = this.mNetworkPolicy.keyAt();
								boolean v55 = v54.matches(v52);
								if (v55 == 0) {
									if (this.LOGD == 0) {
										String v61 = NetworkIdentityUtils.scrubSubscriberId(v43);
										boolean v44 = 0;
										if (this.LOGV == 0) {
											NetworkIdentity$Builder v67 = new NetworkIdentity$Builder();
											NetworkIdentity$Builder v69 = v67.setType(0);
											NetworkIdentity$Builder v70 = v69.setSubscriberId(v43);
											NetworkIdentity$Builder v71 = v70.setMetered(1);
											NetworkIdentity$Builder v72 = v71.setDefaultNetwork(1);
											NetworkIdentity$Builder v73 = v72.setSubId(p1);
											NetworkIdentity v74 = v73.build();
											int v75 = this.mNetworkPolicy.size();
											if ( < 0) {
												boolean v65 = ;
												if (1 == 0) {
													NetworkPolicyManagerService.normalizePoliciesNL();
													NetworkPolicyManagerService.updateNetworkEnabledNL();
													NetworkPolicyManagerService.updateNetworkRulesNL();
													NetworkPolicyManagerService.updateNotificationsNL();
													NetworkPolicyManagerService.writePolicyAL();
													Intent v82 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");
													Intent v84 = v82.addFlags(1073741824);
													Intent v85 = v82.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);
													this.mContext.sendBroadcast(v82, "android.permission.MANAGE_SUBSCRIPTION_PLANS");
													Message v87 = this.mHandler.obtainMessage(19, p1, 0, p2);
													boolean v88 = this.mHandler.sendMessage(v87);
													this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);
													this.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);
													if ((p3 < 0) <= 0) {
														Message v90 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);
														boolean v91 = this.mHandler.sendMessageDelayed(v90, p3);
														Binder.restoreCallingIdentity(v39);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setSubscriptionPlans(int p1, SubscriptionPlan p2, long p3, String p4){
	int v1 = Binder.getCallingUid();
	if (p2.length != 0) {
		[I v33 = TelephonyManager.getAllNetworkTypes();
		ArraySet v34 = new ArraySet();
		if ( >= v33.length) {
			boolean v36 = ;
			ArraySet v37 = new ArraySet();
			if ( >= p2.length) {
				if ( == 0) {
					if ( >= p2.length) {
						long v39 = Binder.clearCallingIdentity();
						this.mSubscriptionPlans.put(p1, p2);
						this.mSubscriptionPlansOwner.put(p1, p4);
						Object v43 = this.mSubIdToSubscriberId.get(p1, 0);
						if (v43 == 0) {
							NetworkIdentity$Builder v45 = new NetworkIdentity$Builder();
							NetworkIdentity$Builder v47 = v45.setType(0);
							NetworkIdentity$Builder v48 = v47.setSubscriberId(v43);
							NetworkIdentity$Builder v49 = v48.setMetered(1);
							NetworkIdentity$Builder v50 = v49.setDefaultNetwork(1);
							NetworkIdentity$Builder v51 = v50.setSubId(p1);
							NetworkIdentity v52 = v51.build();
							int v53 = this.mNetworkPolicy.size();
							if ( < 0) {
								Object v54 = this.mNetworkPolicy.keyAt();
								boolean v55 = v54.matches(v52);
								if (v55 == 0) {
									if (this.LOGD == 0) {
										String v61 = NetworkIdentityUtils.scrubSubscriberId(v43);
										boolean v44 = 0;
										if (this.LOGV == 0) {
											NetworkIdentity$Builder v66 = new NetworkIdentity$Builder();
											NetworkIdentity$Builder v68 = v66.setType(0);
											NetworkIdentity$Builder v69 = v68.setSubscriberId(v43);
											NetworkIdentity$Builder v70 = v69.setMetered(1);
											NetworkIdentity$Builder v71 = v70.setDefaultNetwork(1);
											NetworkIdentity$Builder v72 = v71.setSubId(p1);
											NetworkIdentity v73 = v72.build();
											int v74 = this.mNetworkPolicy.size();
											if ( < 0) {
												boolean v65 = ;
												if (1 == 0) {
													NetworkPolicyManagerService.normalizePoliciesNL();
													NetworkPolicyManagerService.updateNetworkEnabledNL();
													NetworkPolicyManagerService.updateNetworkRulesNL();
													NetworkPolicyManagerService.updateNotificationsNL();
													NetworkPolicyManagerService.writePolicyAL();
													Intent v81 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");
													Intent v83 = v81.addFlags(1073741824);
													Intent v84 = v81.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);
													this.mContext.sendBroadcast(v81, "android.permission.MANAGE_SUBSCRIPTION_PLANS");
													Message v86 = this.mHandler.obtainMessage(19, p1, 0, p2);
													boolean v87 = this.mHandler.sendMessage(v86);
													this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);
													this.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);
													if ((p3 < 0) <= 0) {
														Message v89 = this.mHandler.obtainMessage(22, p1, this.mSetSubscriptionPlansIdCounter, p4);
														boolean v90 = this.mHandler.sendMessageDelayed(v89, p3);
														Binder.restoreCallingIdentity(v39);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['this.mSubscriptionPlans.put(p1, p2);\nthis.mSubscriptionPlansOwner.put(p1, p4);', 'NetworkIdentity$Builder v45 = new NetworkIdentity$Builder();\nNetworkIdentity$Builder v47 = v45.setType(0);\nNetworkIdentity$Builder v48 = v47.setSubscriberId(v43);\nNetworkIdentity$Builder v49 = v48.setMetered(1);\nNetworkIdentity$Builder v50 = v49.setDefaultNetwork(1);\nNetworkIdentity$Builder v51 = v50.setSubId(p1);\nNetworkIdentity v52 = v51.build();', 'Intent v81 = new Intent("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");\nIntent v83 = v81.addFlags(1073741824);\nIntent v84 = v81.putExtra("android.telephony.extra.SUBSCRIPTION_INDEX", p1);\nthis.mContext.sendBroadcast(v81, "android.permission.MANAGE_SUBSCRIPTION_PLANS");', 'Message v86 = this.mHandler.obtainMessage(19, p1, 0, p2);\nboolean v87 = this.mHandler.sendMessage(v86);', 'this.mSetSubscriptionPlansIdCounter = (this.mSetSubscriptionPlansIdCounter + 1);\nthis.mSetSubscriptionPlansIds.put(p1, this.mSetSubscriptionPlansIdCounter);']

The method setSubscriptionPlans has the following similar APIs:

- API Name: reportSuccessfulBiometricUnlock(ZI)V with Similarity Score: 0.8353339433670044
  - Access Control Level: NONE and the following code:
Message v3 = this.mHandler.obtainMessage(8, p2, 0);
v3.sendToTarget();

- API Name: scheduleNonStrongBiometricIdleTimeout(I)V with Similarity Score: 0.8142722845077515
  - Access Control Level: NONE and the following code:
Message v3 = this.mHandler.obtainMessage(9, p1, 0);
v3.sendToTarget();

