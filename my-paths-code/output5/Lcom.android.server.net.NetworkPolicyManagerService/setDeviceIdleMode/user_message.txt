This is path 1 for the API with depth 2:
public void setDeviceIdleMode(boolean p1){
	Trace.traceBegin(2097152, "setDeviceIdleMode");
	if (this.mDeviceIdleMode != p1) {
		this.mDeviceIdleMode = p1;
		if (this.LOGD != 0) {
			if (this.mDebugUid == -1) {
				StringBuilder v5 = new StringBuilder();
				StringBuilder v7 = v5.append("DeviceIdleMode enabled: ");
				StringBuilder v8 = v5.append(p1);
				String v9 = v5.toString();
				String v4 = v9;
				Object v12 = NetworkPolicyLogger$LogBuffer.getNextSlot();
				if (v12 != 0) {
					v12.reset();
					NetworkPolicyLogger$Data.type = 7;
					NetworkPolicyLogger$Data.bfield1 = p1;
					long v14 = System.currentTimeMillis();
					NetworkPolicyLogger$Data.timeStamp = v14;
					if (this.mSystemReady == 0) {
						Trace.traceBegin(2097152, "updateRulesForRestrictPowerUL");
						Trace.traceBegin(2097152, "updateRulesForDeviceIdleUL");
						NetworkPolicyManagerService.updateRulesForWhitelistedPowerSaveUL(this.mDeviceIdleMode, 1, this.mUidFirewallDozableRules);
						Trace.traceEnd(2097152);
						if (p1 == 0) {
							NetworkPolicyManagerService$$ExternalSyntheticLambda4 v21 = new NetworkPolicyManagerService$$ExternalSyntheticLambda4(NetworkPolicyManagerService);
							boolean v24 = Trace.isTagEnabled(2097152);
							if (v24 == 0) {
								StringBuilder v25 = new StringBuilder();
								StringBuilder v27 = v25.append("forEachUid-");
								StringBuilder v28 = v25.append("updateRulesForRestrictPower");
								String v29 = v25.toString();
								Trace.traceBegin(2097152, v29);
								Trace.traceBegin(2097152, "list-users");
								List v32 = this.mUserManager.getUsers();
								Trace.traceEnd(2097152);
								Trace.traceBegin(2097152, "iterate-uids");
								Object v35 = LocalServices.getService(PackageManagerInterna.class);
								int v36 = v32.size();
								if ( >= v36) {
									Trace.traceEnd(2097152);
									Trace.traceEnd(2097152);
									Trace.traceEnd(2097152);
									if (p1 == 0) {
										EventLogTags.writeDeviceIdleOnPhase("net");
										Trace.traceEnd(2097152);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setDeviceIdleMode(boolean p1){
	Trace.traceBegin(2097152, "setDeviceIdleMode");
	if (this.mDeviceIdleMode != p1) {
		this.mDeviceIdleMode = p1;
		if (this.LOGD != 0) {
			if (this.mDebugUid == -1) {
				StringBuilder v5 = new StringBuilder();
				StringBuilder v7 = v5.append("DeviceIdleMode enabled: ");
				StringBuilder v8 = v5.append(p1);
				String v9 = v5.toString();
				String v4 = v9;
				Object v12 = NetworkPolicyLogger$LogBuffer.getNextSlot();
				if (v12 != 0) {
					v12.reset();
					NetworkPolicyLogger$Data.type = 7;
					NetworkPolicyLogger$Data.bfield1 = p1;
					long v14 = System.currentTimeMillis();
					NetworkPolicyLogger$Data.timeStamp = v14;
					if (this.mSystemReady == 0) {
						Trace.traceBegin(2097152, "updateRulesForRestrictPowerUL");
						Trace.traceBegin(2097152, "updateRulesForDeviceIdleUL");
						NetworkPolicyManagerService.updateRulesForWhitelistedPowerSaveUL(this.mDeviceIdleMode, 1, this.mUidFirewallDozableRules);
						Trace.traceEnd(2097152);
						if (p1 == 0) {
							NetworkPolicyManagerService$$ExternalSyntheticLambda4 v21 = new NetworkPolicyManagerService$$ExternalSyntheticLambda4(NetworkPolicyManagerService);
							boolean v24 = Trace.isTagEnabled(2097152);
							if (v24 == 0) {
								StringBuilder v25 = new StringBuilder();
								StringBuilder v27 = v25.append("forEachUid-");
								StringBuilder v28 = v25.append("updateRulesForRestrictPower");
								String v29 = v25.toString();
								Trace.traceBegin(2097152, v29);
								Trace.traceBegin(2097152, "list-users");
								List v32 = this.mUserManager.getUsers();
								Trace.traceEnd(2097152);
								Trace.traceBegin(2097152, "iterate-uids");
								Object v35 = LocalServices.getService(PackageManagerInterna.class);
								int v36 = v32.size();
								if ( >= v36) {
									Trace.traceEnd(2097152);
									Trace.traceEnd(2097152);
									Trace.traceEnd(2097152);
									if (p1 == 0) {
										EventLogTags.writeDeviceIdleOffPhase("net");
										Trace.traceEnd(2097152);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setDeviceIdleMode(boolean p1){
	Trace.traceBegin(2097152, "setDeviceIdleMode");
	if (this.mDeviceIdleMode != p1) {
		this.mDeviceIdleMode = p1;
		if (this.LOGD != 0) {
			StringBuilder v5 = new StringBuilder();
			StringBuilder v7 = v5.append("DeviceIdleMode enabled: ");
			StringBuilder v8 = v5.append(p1);
			String v9 = v5.toString();
			String v4 = v9;
			Object v12 = NetworkPolicyLogger$LogBuffer.getNextSlot();
			if (v12 != 0) {
				v12.reset();
				NetworkPolicyLogger$Data.type = 7;
				NetworkPolicyLogger$Data.bfield1 = p1;
				long v14 = System.currentTimeMillis();
				NetworkPolicyLogger$Data.timeStamp = v14;
				if (this.mSystemReady == 0) {
					Trace.traceBegin(2097152, "updateRulesForRestrictPowerUL");
					Trace.traceBegin(2097152, "updateRulesForDeviceIdleUL");
					NetworkPolicyManagerService.updateRulesForWhitelistedPowerSaveUL(this.mDeviceIdleMode, 1, this.mUidFirewallDozableRules);
					Trace.traceEnd(2097152);
					if (p1 == 0) {
						NetworkPolicyManagerService$$ExternalSyntheticLambda4 v21 = new NetworkPolicyManagerService$$ExternalSyntheticLambda4(NetworkPolicyManagerService);
						boolean v24 = Trace.isTagEnabled(2097152);
						if (v24 == 0) {
							StringBuilder v25 = new StringBuilder();
							StringBuilder v27 = v25.append("forEachUid-");
							StringBuilder v28 = v25.append("updateRulesForRestrictPower");
							String v29 = v25.toString();
							Trace.traceBegin(2097152, v29);
							Trace.traceBegin(2097152, "list-users");
							List v32 = this.mUserManager.getUsers();
							Trace.traceEnd(2097152);
							Trace.traceBegin(2097152, "iterate-uids");
							Object v35 = LocalServices.getService(PackageManagerInterna.class);
							int v36 = v32.size();
							if ( >= v36) {
								Trace.traceEnd(2097152);
								Trace.traceEnd(2097152);
								Trace.traceEnd(2097152);
								if (p1 == 0) {
									EventLogTags.writeDeviceIdleOnPhase("net");
									Trace.traceEnd(2097152);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
