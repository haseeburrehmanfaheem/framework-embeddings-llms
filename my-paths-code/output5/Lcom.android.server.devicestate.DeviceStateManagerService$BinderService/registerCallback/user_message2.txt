The method registerCallback has the following code snippet:

This is path 1 for the API with depth 2:
public void registerCallback(IDeviceStateManagerCallback p1){
	if (p1 == 0) {
		int v1 = Binder.getCallingPid();
		long v2 = Binder.clearCallingIdentity();
		boolean v5 = this.mProcessRecords.contains(p2);
		if (v5 != 0) {
			DeviceStateManagerService$ProcessRecord v6 = new DeviceStateManagerService$ProcessRecord(p3,p2,v7,this.mHandler);
			DeviceStateManagerService$$ExternalSyntheticLambda2 v7 = new DeviceStateManagerService$$ExternalSyntheticLambda2(DeviceStateManagerService);
			IBinder v10 = p3.asBinder();
			v10.linkToDeath(v6, 0);
			this.mProcessRecords.put(p2, v6);
			boolean v13 = this.mCommittedState.isPresent();
			if (v13 == 0) {
				DeviceStateInfo v14 = DeviceStateManagerService.getDeviceStateInfoLocked();
				if ( == 0) {
					v6.notifyDeviceStateInfoAsync();
					Binder.restoreCallingIdentity(v2);
					return;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void registerCallback(IDeviceStateManagerCallback p1){
	if (p1 == 0) {
		int v1 = Binder.getCallingPid();
		long v2 = Binder.clearCallingIdentity();
		boolean v5 = this.mProcessRecords.contains(p2);
		if (v5 != 0) {
			DeviceStateManagerService$ProcessRecord v6 = new DeviceStateManagerService$ProcessRecord(p3,p2,v7,this.mHandler);
			DeviceStateManagerService$$ExternalSyntheticLambda2 v7 = new DeviceStateManagerService$$ExternalSyntheticLambda2(DeviceStateManagerService);
			IBinder v10 = p3.asBinder();
			v10.linkToDeath(v6, 0);
			this.mProcessRecords.put(p2, v6);
			boolean v13 = this.mCommittedState.isPresent();
			if (v13 == 0) {
				DeviceStateInfo v14 = DeviceStateManagerService.getDeviceStateInfoLocked();
				if ( == 0) {
					Binder.restoreCallingIdentity(v2);
					return;
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void registerCallback(IDeviceStateManagerCallback p1){
	if (p1 == 0) {
		int v1 = Binder.getCallingPid();
		long v2 = Binder.clearCallingIdentity();
		boolean v5 = this.mProcessRecords.contains(p2);
		if (v5 != 0) {
			DeviceStateManagerService$ProcessRecord v6 = new DeviceStateManagerService$ProcessRecord(p3,p2,v7,this.mHandler);
			DeviceStateManagerService$$ExternalSyntheticLambda2 v7 = new DeviceStateManagerService$$ExternalSyntheticLambda2(DeviceStateManagerService);
			IBinder v10 = p3.asBinder();
			v10.linkToDeath(v6, 0);
			this.mProcessRecords.put(p2, v6);
			boolean v13 = this.mCommittedState.isPresent();
			if (v13 == 0) {
				if ( == 0) {
					v6.notifyDeviceStateInfoAsync();
					Binder.restoreCallingIdentity(v2);
					return;
				}
			}
		}
	}
}

and the following sink code:
['DeviceStateManagerService$ProcessRecord v6 = new DeviceStateManagerService$ProcessRecord(p3,p2,v7,this.mHandler);\nthis.mProcessRecords.put(p2, v6);']

The method registerCallback has the following similar APIs:

- API Name: cancelBaseStateOverride()V with Similarity Score: 0.812744677066803
  - Access Control Level: SYS_OR_SIG and the following code:
Object v7 = this.mProcessRecords.get(p2);
if (v7 == 0) {
DeviceStateManagerService.setBaseState(DeviceStateManagerService$DeviceStateProviderListener.mCurrentBaseState);

- API Name: addHdmiMhlVendorCommandListener(Landroid/hardware/hdmi/IHdmiMhlVendorCommandListener;)V with Similarity Score: 0.7077206373214722
  - Access Control Level: NONE and the following code:
HdmiControlService$HdmiMhlVendorCommandListenerRecord v7 = new HdmiControlService$HdmiMhlVendorCommandListenerRecord(HdmiControlService,p2);
IBinder v9 = p2.asBinder();
v9.linkToDeath(v7, 0);
boolean v11 = this.mMhlVendorCommandListenerRecords.add(v7);

