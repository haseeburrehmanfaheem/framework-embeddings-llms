The method requestState has the following code snippet:

This is path 1 for the API with depth 2:
public void requestState(IBinder p1, int p2, int p3){
	int v1 = Binder.getCallingPid();
	if (p1 == 0) {
		long v9 = Binder.clearCallingIdentity();
		Object v12 = this.mProcessRecords.get(p4);
		if (v12 == 0) {
			boolean v13 = this.mOverrideRequestController.hasRequest(p5, 0);
			if (v13 != 0) {
				Optional v14 = DeviceStateManagerService.getStateLocked(p2);
				boolean v15 = v14.isPresent();
				if (v15 == 0) {
					OverrideRequest v16 = new OverrideRequest(p5,p4,p2,p3,0);
					this.mOverrideRequestController.addRequest(v16);
					Binder.restoreCallingIdentity(v9);
					return;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void requestState(IBinder p1, int p2, int p3){
	int v1 = Binder.getCallingPid();
	boolean v6 = DeviceStateManagerService.isStateAvailableForAppRequests(p3);
	if (v6 != 0) {
		if (p1 == 0) {
			long v7 = Binder.clearCallingIdentity();
			Object v10 = this.mProcessRecords.get(p4);
			if (v10 == 0) {
				boolean v11 = this.mOverrideRequestController.hasRequest(p5, 0);
				if (v11 != 0) {
					Optional v12 = DeviceStateManagerService.getStateLocked(p2);
					boolean v13 = v12.isPresent();
					if (v13 == 0) {
						OverrideRequest v14 = new OverrideRequest(p5,p4,p2,p3,0);
						this.mOverrideRequestController.addRequest(v14);
						Binder.restoreCallingIdentity(v7);
						return;
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void requestState(IBinder p1, int p2, int p3){
	int v1 = Binder.getCallingPid();
	if (p1 == 0) {
		long v8 = Binder.clearCallingIdentity();
		Object v11 = this.mProcessRecords.get(p4);
		if (v11 == 0) {
			boolean v12 = this.mOverrideRequestController.hasRequest(p5, 0);
			if (v12 != 0) {
				Optional v13 = DeviceStateManagerService.getStateLocked(p2);
				boolean v14 = v13.isPresent();
				if (v14 == 0) {
					OverrideRequest v15 = new OverrideRequest(p5,p4,p2,p3,0);
					this.mOverrideRequestController.addRequest(v15);
					Binder.restoreCallingIdentity(v8);
					return;
				}
			}
		}
	}
}

and the following sink code:
['if (p1 == 0) {\nObject v12 = this.mProcessRecords.get(p4);\nboolean v13 = this.mOverrideRequestController.hasRequest(p5, 0);\nOptional v14 = DeviceStateManagerService.getStateLocked(p2);\nOverrideRequest v16 = new OverrideRequest(p5,p4,p2,p3,0);\nthis.mOverrideRequestController.addRequest(v16);']

The method requestState has the following similar APIs:

- API Name: requestBaseStateOverride(Landroid/os/IBinder;II)V with Similarity Score: 0.8763479590415955
  - Access Control Level: SYS_OR_SIG and the following code:
Optional v7 = DeviceStateManagerService.getStateLocked(p2);
boolean v8 = v7.isPresent();
Object v9 = this.mProcessRecords.get(p4);
boolean v10 = this.mOverrideRequestController.hasRequest(p5, 1);
OverrideRequest v11 = new OverrideRequest(p5, p4, p2, p3, 1);
this.mOverrideRequestController.addBaseStateRequest(v11);

- API Name: cancelStateRequest()V with Similarity Score: 0.7636900544166565
  - Access Control Level: SYS_OR_SIG and the following code:
Object v11 = this.mProcessRecords.get(p2);
DeviceStateManagerService$$ExternalSyntheticLambda3 v13 = new DeviceStateManagerService$$ExternalSyntheticLambda3(this.mOverrideRequestController);
this.mActiveOverride.ifPresent(v13);

