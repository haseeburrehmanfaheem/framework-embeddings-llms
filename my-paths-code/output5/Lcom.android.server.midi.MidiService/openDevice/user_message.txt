This is path 1 for the API with depth 2:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	Object v2 = this.mClients.get(p1);
	if (v2 != 0) {
		MidiService$Client v3 = new MidiService$Client(MidiService,p1);
		p1.linkToDeath(v3, 0);
		Object v6 = this.mClients.put(p1, v3);
		MidiService$Client v1 = ;
		StringBuilder v7 = new StringBuilder();
		StringBuilder v9 = v7.append("openDevice() client:");
		StringBuilder v10 = v7.append(v1);
		String v11 = v7.toString();
		int v12 = Log.d("MidiService", v11);
		if (v1 != 0) {
			Object v13 = this.mDevicesByInfo.get(p2);
			StringBuilder v14 = new StringBuilder();
			StringBuilder v16 = v14.append("  device:");
			StringBuilder v17 = v14.append(v13);
			String v18 = v14.toString();
			int v19 = Log.d("MidiService", v18);
			if (v13 == 0) {
				int v20 = Binder.getCallingUid();
				boolean v22 = this.mIsPrivate;
				if (v22 == 0) {
					boolean v21 = ;
					if (v21 == 0) {
						int v23 = p2.getType();
						if (v23 != 1) {
							Bundle v25 = this.mProperties;
							String v26 = v25.getString("name");
							int v27 = v26.length();
							if (v27 >= 8) {
								int v29 = v26.length();
								String v30 = v26.substring(0, (v29 + -8));
								String v28 = v30;
								int v32 = v26.length();
								String v33 = v26.substring((v32 + -8));
								String v31 = v33;
								StringBuilder v34 = new StringBuilder();
								StringBuilder v36 = v34.append("Checking ");
								StringBuilder v37 = v34.append(v28);
								StringBuilder v38 = v34.append(" ");
								StringBuilder v39 = v34.append(v31);
								String v40 = v34.toString();
								int v41 = Log.i("MidiService", v40);
								boolean v42 = this.mUsbMidiUniversalDeviceInUse.contains(v28);
								if (v42 != 0) {
									boolean v43 = v31.equals("MIDI 2.0");
									if (v43 == 0) {
										boolean v44 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v28);
										if (v44 == 0) {
											boolean v24 = 1;
											if (v24 != 0) {
												Bundle v46 = this.mProperties;
												String v47 = v46.getString("name");
												int v48 = v47.length();
												if (v48 >= 8) {
													int v50 = v47.length();
													String v51 = v47.substring(0, (v50 + -8));
													String v49 = v51;
													int v53 = v47.length();
													String v54 = v47.substring((v53 + -8));
													String v52 = v54;
													StringBuilder v55 = new StringBuilder();
													StringBuilder v57 = v55.append("Adding ");
													StringBuilder v58 = v55.append(v49);
													StringBuilder v59 = v55.append(" ");
													StringBuilder v60 = v55.append(v52);
													String v61 = v55.toString();
													int v62 = Log.i("MidiService", v61);
													boolean v63 = v52.equals("MIDI 2.0");
													if (v63 == 0) {
														boolean v64 = v52.equals("MIDI 1.0");
														if (v64 == 0) {
															Integer v65 = Integer.valueOf(0);
															Object v66 = this.mUsbMidiLegacyDeviceOpenCount.getOrDefault(v49, v65);
															int v67 = v66.intValue();
															Integer v68 = Integer.valueOf((v67 + 1));
															Object v69 = this.mUsbMidiLegacyDeviceOpenCount.put(v49, v68);
															long v70 = Binder.clearCallingIdentity();
															StringBuilder v71 = new StringBuilder();
															StringBuilder v73 = v71.append("addDeviceConnection() [B] device:");
															StringBuilder v74 = v71.append(v13);
															String v75 = v71.toString();
															int v76 = Log.i("MidiService", v75);
															StringBuilder v78 = new StringBuilder();
															StringBuilder v80 = v78.append("addDeviceConnection() device:");
															StringBuilder v81 = v78.append(v13);
															String v82 = v78.toString();
															int v83 = Log.d("MidiService.Client", v82);
															int v84 = this.mDeviceConnections.size();
															if (v84 >= 64) {
																MidiService$DeviceConnection v85 = new MidiService$DeviceConnection(this.this$0,v13,MidiService$Client,p3);
																IBinder v87 = this.mToken;
																Object v88 = this.mDeviceConnections.put(v87, v85);
																StringBuilder v90 = new StringBuilder();
																StringBuilder v92 = v90.append("addDeviceConnection() [A] connection:");
																StringBuilder v93 = v90.append(v85);
																String v94 = v90.toString();
																int v95 = Log.d("MidiService.Device", v94);
																StringBuilder v96 = new StringBuilder();
																StringBuilder v98 = v96.append("  mServer:");
																StringBuilder v99 = v96.append(this.mServer);
																String v100 = v96.toString();
																int v101 = Log.d("MidiService.Device", v100);
																if (this.mServer == 0) {
																	int v102 = Log.i("MidiService.Device", "++++ A");
																	boolean v103 = this.mDeviceConnections.add(v85);
																	v85.notifyClient(this.mServer);
																	Binder.restoreCallingIdentity(v70);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	Object v2 = this.mClients.get(p1);
	if (v2 != 0) {
		MidiService$Client v3 = new MidiService$Client(MidiService,p1);
		p1.linkToDeath(v3, 0);
		Object v6 = this.mClients.put(p1, v3);
		MidiService$Client v1 = ;
		StringBuilder v7 = new StringBuilder();
		StringBuilder v9 = v7.append("openDevice() client:");
		StringBuilder v10 = v7.append(v1);
		String v11 = v7.toString();
		int v12 = Log.d("MidiService", v11);
		if (v1 != 0) {
			Object v13 = this.mDevicesByInfo.get(p2);
			StringBuilder v14 = new StringBuilder();
			StringBuilder v16 = v14.append("  device:");
			StringBuilder v17 = v14.append(v13);
			String v18 = v14.toString();
			int v19 = Log.d("MidiService", v18);
			if (v13 == 0) {
				int v20 = Binder.getCallingUid();
				boolean v22 = this.mIsPrivate;
				if (v22 == 0) {
					boolean v21 = ;
					if (v21 == 0) {
						int v23 = p2.getType();
						if (v23 != 1) {
							Bundle v25 = this.mProperties;
							String v26 = v25.getString("name");
							int v27 = v26.length();
							if (v27 >= 8) {
								int v29 = v26.length();
								String v30 = v26.substring(0, (v29 + -8));
								String v28 = v30;
								int v32 = v26.length();
								String v33 = v26.substring((v32 + -8));
								String v31 = v33;
								StringBuilder v34 = new StringBuilder();
								StringBuilder v36 = v34.append("Checking ");
								StringBuilder v37 = v34.append(v28);
								StringBuilder v38 = v34.append(" ");
								StringBuilder v39 = v34.append(v31);
								String v40 = v34.toString();
								int v41 = Log.i("MidiService", v40);
								boolean v42 = this.mUsbMidiUniversalDeviceInUse.contains(v28);
								if (v42 != 0) {
									boolean v43 = v31.equals("MIDI 2.0");
									if (v43 == 0) {
										boolean v44 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v28);
										if (v44 == 0) {
											boolean v24 = 0;
											if (v24 != 0) {
												Bundle v46 = this.mProperties;
												String v47 = v46.getString("name");
												int v48 = v47.length();
												if (v48 >= 8) {
													int v50 = v47.length();
													String v51 = v47.substring(0, (v50 + -8));
													String v49 = v51;
													int v53 = v47.length();
													String v54 = v47.substring((v53 + -8));
													String v52 = v54;
													StringBuilder v55 = new StringBuilder();
													StringBuilder v57 = v55.append("Adding ");
													StringBuilder v58 = v55.append(v49);
													StringBuilder v59 = v55.append(" ");
													StringBuilder v60 = v55.append(v52);
													String v61 = v55.toString();
													int v62 = Log.i("MidiService", v61);
													boolean v63 = v52.equals("MIDI 2.0");
													if (v63 == 0) {
														boolean v64 = v52.equals("MIDI 1.0");
														if (v64 == 0) {
															Integer v65 = Integer.valueOf(0);
															Object v66 = this.mUsbMidiLegacyDeviceOpenCount.getOrDefault(v49, v65);
															int v67 = v66.intValue();
															Integer v68 = Integer.valueOf((v67 + 1));
															Object v69 = this.mUsbMidiLegacyDeviceOpenCount.put(v49, v68);
															long v70 = Binder.clearCallingIdentity();
															StringBuilder v71 = new StringBuilder();
															StringBuilder v73 = v71.append("addDeviceConnection() [B] device:");
															StringBuilder v74 = v71.append(v13);
															String v75 = v71.toString();
															int v76 = Log.i("MidiService", v75);
															StringBuilder v78 = new StringBuilder();
															StringBuilder v80 = v78.append("addDeviceConnection() device:");
															StringBuilder v81 = v78.append(v13);
															String v82 = v78.toString();
															int v83 = Log.d("MidiService.Client", v82);
															int v84 = this.mDeviceConnections.size();
															if (v84 >= 64) {
																MidiService$DeviceConnection v85 = new MidiService$DeviceConnection(this.this$0,v13,MidiService$Client,p3);
																IBinder v87 = this.mToken;
																Object v88 = this.mDeviceConnections.put(v87, v85);
																StringBuilder v90 = new StringBuilder();
																StringBuilder v92 = v90.append("addDeviceConnection() [A] connection:");
																StringBuilder v93 = v90.append(v85);
																String v94 = v90.toString();
																int v95 = Log.d("MidiService.Device", v94);
																StringBuilder v96 = new StringBuilder();
																StringBuilder v98 = v96.append("  mServer:");
																StringBuilder v99 = v96.append(this.mServer);
																String v100 = v96.toString();
																int v101 = Log.d("MidiService.Device", v100);
																if (this.mServer == 0) {
																	int v102 = Log.i("MidiService.Device", "++++ A");
																	boolean v103 = this.mDeviceConnections.add(v85);
																	v85.notifyClient(this.mServer);
																	Binder.restoreCallingIdentity(v70);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void openDevice(IBinder p1, MidiDeviceInfo p2, IMidiDeviceOpenCallback p3){
	Object v2 = this.mClients.get(p1);
	if (v2 != 0) {
		MidiService$Client v3 = new MidiService$Client(MidiService,p1);
		p1.linkToDeath(v3, 0);
		MidiService$Client v1 = 0;
		StringBuilder v6 = new StringBuilder();
		StringBuilder v8 = v6.append("openDevice() client:");
		StringBuilder v9 = v6.append(v1);
		String v10 = v6.toString();
		int v11 = Log.d("MidiService", v10);
		if (v1 != 0) {
			Object v12 = this.mDevicesByInfo.get(p2);
			StringBuilder v13 = new StringBuilder();
			StringBuilder v15 = v13.append("  device:");
			StringBuilder v16 = v13.append(v12);
			String v17 = v13.toString();
			int v18 = Log.d("MidiService", v17);
			if (v12 == 0) {
				int v19 = Binder.getCallingUid();
				boolean v21 = this.mIsPrivate;
				if (v21 == 0) {
					boolean v20 = ;
					if (v20 == 0) {
						int v22 = p2.getType();
						if (v22 != 1) {
							Bundle v24 = this.mProperties;
							String v25 = v24.getString("name");
							int v26 = v25.length();
							if (v26 >= 8) {
								int v28 = v25.length();
								String v29 = v25.substring(0, (v28 + -8));
								String v27 = v29;
								int v31 = v25.length();
								String v32 = v25.substring((v31 + -8));
								String v30 = v32;
								StringBuilder v33 = new StringBuilder();
								StringBuilder v35 = v33.append("Checking ");
								StringBuilder v36 = v33.append(v27);
								StringBuilder v37 = v33.append(" ");
								StringBuilder v38 = v33.append(v30);
								String v39 = v33.toString();
								int v40 = Log.i("MidiService", v39);
								boolean v41 = this.mUsbMidiUniversalDeviceInUse.contains(v27);
								if (v41 != 0) {
									boolean v42 = v30.equals("MIDI 2.0");
									if (v42 == 0) {
										boolean v43 = this.mUsbMidiLegacyDeviceOpenCount.containsKey(v27);
										if (v43 == 0) {
											boolean v23 = 1;
											if (v23 != 0) {
												Bundle v45 = this.mProperties;
												String v46 = v45.getString("name");
												int v47 = v46.length();
												if (v47 >= 8) {
													int v49 = v46.length();
													String v50 = v46.substring(0, (v49 + -8));
													String v48 = v50;
													int v52 = v46.length();
													String v53 = v46.substring((v52 + -8));
													String v51 = v53;
													StringBuilder v54 = new StringBuilder();
													StringBuilder v56 = v54.append("Adding ");
													StringBuilder v57 = v54.append(v48);
													StringBuilder v58 = v54.append(" ");
													StringBuilder v59 = v54.append(v51);
													String v60 = v54.toString();
													int v61 = Log.i("MidiService", v60);
													boolean v62 = v51.equals("MIDI 2.0");
													if (v62 == 0) {
														boolean v63 = v51.equals("MIDI 1.0");
														if (v63 == 0) {
															Integer v64 = Integer.valueOf(0);
															Object v65 = this.mUsbMidiLegacyDeviceOpenCount.getOrDefault(v48, v64);
															int v66 = v65.intValue();
															Integer v67 = Integer.valueOf((v66 + 1));
															Object v68 = this.mUsbMidiLegacyDeviceOpenCount.put(v48, v67);
															long v69 = Binder.clearCallingIdentity();
															StringBuilder v70 = new StringBuilder();
															StringBuilder v72 = v70.append("addDeviceConnection() [B] device:");
															StringBuilder v73 = v70.append(v12);
															String v74 = v70.toString();
															int v75 = Log.i("MidiService", v74);
															StringBuilder v77 = new StringBuilder();
															StringBuilder v79 = v77.append("addDeviceConnection() device:");
															StringBuilder v80 = v77.append(v12);
															String v81 = v77.toString();
															int v82 = Log.d("MidiService.Client", v81);
															int v83 = this.mDeviceConnections.size();
															if (v83 >= 64) {
																MidiService$DeviceConnection v84 = new MidiService$DeviceConnection(this.this$0,v12,MidiService$Client,p3);
																IBinder v86 = this.mToken;
																Object v87 = this.mDeviceConnections.put(v86, v84);
																StringBuilder v89 = new StringBuilder();
																StringBuilder v91 = v89.append("addDeviceConnection() [A] connection:");
																StringBuilder v92 = v89.append(v84);
																String v93 = v89.toString();
																int v94 = Log.d("MidiService.Device", v93);
																StringBuilder v95 = new StringBuilder();
																StringBuilder v97 = v95.append("  mServer:");
																StringBuilder v98 = v95.append(this.mServer);
																String v99 = v95.toString();
																int v100 = Log.d("MidiService.Device", v99);
																if (this.mServer == 0) {
																	int v101 = Log.i("MidiService.Device", "++++ A");
																	boolean v102 = this.mDeviceConnections.add(v84);
																	v84.notifyClient(this.mServer);
																	Binder.restoreCallingIdentity(v69);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
