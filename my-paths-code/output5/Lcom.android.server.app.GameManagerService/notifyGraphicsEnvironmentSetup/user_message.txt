This is path 1 for the API with depth 2:
public void notifyGraphicsEnvironmentSetup(String p1, int p2){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	int v3 = ActivityManager.handleIncomingUser(v1, v2, p2, 0, 1, "notifyGraphicsEnvironmentSetup", "com.android.server.app.GameManagerService");
	ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3);
	if (ApplicationInfo.category != 0) {
		boolean v4 = ;
		if (v4 != 0) {
			boolean v6 = ;
			if (v6 != 0) {
				ApplicationInfo v14 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v12);
				if (ApplicationInfo.category != 0) {
					boolean v13 = ;
					boolean v15 = ;
					Integer v19 = Integer.valueOf(v12);
					boolean v20 = this.mSettings.containsKey(v19);
					if (v20 != 0) {
						int v18 = 0;
						int v9 = v18;
						if (v9 != 0) {
							int v38 = GameManagerService.getGameModeFromSettings(p1, v34);
							int v31 = v38;
							if (v31 != 0) {
								Object v39 = this.mConfigs.get(p1);
								if (v39 != 0) {
									Integer v41 = Integer.valueOf(v31);
									Object v42 = this.mModeConfigs.get(v41);
									GameManagerService$GamePackageConfiguration$GameModeConfiguration v40 = v42;
									if (v40 != 0) {
										int v43 = this.mLoadingBoostDuration;
										int v30 = v43;
										if (v30 == -1) {
											if (v30 == 0) {
												if (v30 <= 5000) {
													boolean v44 = this.mHandler.hasMessages(5);
													if (v44 == 0) {
														this.mHandler.removeMessages(5);
														Message v46 = this.mHandler.obtainMessage(5);
														boolean v47 = this.mHandler.sendMessageDelayed(v46, );
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void notifyGraphicsEnvironmentSetup(String p1, int p2){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	int v3 = ActivityManager.handleIncomingUser(v1, v2, p2, 0, 1, "notifyGraphicsEnvironmentSetup", "com.android.server.app.GameManagerService");
	ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3);
	if (ApplicationInfo.category != 0) {
		boolean v4 = ;
		if (v4 != 0) {
			boolean v6 = ;
			if (v6 != 0) {
				int v10 = Binder.getCallingPid();
				int v11 = Binder.getCallingUid();
				int v12 = ActivityManager.handleIncomingUser(v10, v11, v3, 0, 1, "getGameMode", "com.android.server.app.GameManagerService");
				ApplicationInfo v14 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v12);
				if (ApplicationInfo.category != 0) {
					boolean v13 = ;
					if (v13 != 0) {
						boolean v15 = ;
						if (v15 == 0) {
							Integer v19 = Integer.valueOf(v12);
							boolean v20 = this.mSettings.containsKey(v19);
							if (v20 != 0) {
								int v18 = 0;
								int v9 = v18;
								if (v9 != 0) {
									int v32 = Binder.getCallingPid();
									int v33 = Binder.getCallingUid();
									int v34 = ActivityManager.handleIncomingUser(v32, v33, p2, 0, 1, "getGameMode", "com.android.server.app.GameManagerService");
									boolean v35 = GameManagerService.isPackageGame(p1, v34);
									if (v35 != 0) {
										boolean v36 = GameManagerService.isValidPackageName(p1, v34);
										if (v36 == 0) {
											int v37 = GameManagerService.getGameModeFromSettings(p1, v34);
											int v31 = v37;
											if (v31 != 0) {
												Object v38 = this.mConfigs.get(p1);
												if (v38 != 0) {
													Integer v40 = Integer.valueOf(v31);
													Object v41 = this.mModeConfigs.get(v40);
													GameManagerService$GamePackageConfiguration$GameModeConfiguration v39 = v41;
													if (v39 != 0) {
														int v42 = this.mLoadingBoostDuration;
														int v30 = v42;
														if (v30 == -1) {
															if (v30 == 0) {
																if (v30 <= 5000) {
																	boolean v43 = this.mHandler.hasMessages(5);
																	if (v43 == 0) {
																		this.mHandler.removeMessages(5);
																		Message v45 = this.mHandler.obtainMessage(5);
																		boolean v46 = this.mHandler.sendMessageDelayed(v45, );
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void notifyGraphicsEnvironmentSetup(String p1, int p2){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	int v3 = ActivityManager.handleIncomingUser(v1, v2, p2, 0, 1, "notifyGraphicsEnvironmentSetup", "com.android.server.app.GameManagerService");
	ApplicationInfo v5 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v3);
	if (ApplicationInfo.category != 0) {
		boolean v4 = ;
		if (v4 != 0) {
			boolean v6 = ;
			if (v6 != 0) {
				ApplicationInfo v14 = this.mPackageManager.getApplicationInfoAsUser(p1, 131072, v12);
				if (ApplicationInfo.category != 0) {
					boolean v13 = ;
					boolean v15 = ;
					Integer v19 = Integer.valueOf(v12);
					boolean v20 = this.mSettings.containsKey(v19);
					if (v20 != 0) {
						int v18 = 0;
						int v9 = v18;
						if (v9 != 0) {
							int v38 = GameManagerService.getGameModeFromSettings(p1, v34);
							int v31 = v38;
							if (v31 != 0) {
								Object v39 = this.mConfigs.get(p1);
								if (v39 != 0) {
									Integer v41 = Integer.valueOf(v31);
									Object v42 = this.mModeConfigs.get(v41);
									GameManagerService$GamePackageConfiguration$GameModeConfiguration v40 = v42;
									if (v40 != 0) {
										int v43 = this.mLoadingBoostDuration;
										int v30 = v43;
										if (v30 == -1) {
											if (v30 == 0) {
												if (v30 <= 5000) {
													boolean v44 = this.mHandler.hasMessages(5);
													if (v44 == 0) {
														this.mPowerManagerInternal.setPowerMode(16, 1);
														Message v46 = this.mHandler.obtainMessage(5);
														boolean v47 = this.mHandler.sendMessageDelayed(v46, );
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
