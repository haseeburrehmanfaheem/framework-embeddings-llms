The method getBrightnessConfigurationForDisplay has the following code snippet:

This is path 1 for the API with depth 2:
public BrightnessConfiguration getBrightnessConfigurationForDisplay(String p1, int p2){
	long v6 = Binder.clearCallingIdentity();
	Object v9 = this.mContext.getSystemService(UserManage.class);
	UserManager v8 = v9;
	UserManager v7 = v8;
	int v10 = v7.getUserSerialNumber(p2);
	DisplayManagerService$SyncRoot v11 = DisplayManagerService.-$$Nest$fgetmSyncRoot(this.this$0);
	BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3);
	if (v14 != 0) {
		BrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);
		BrightnessConfiguration v13 = ;
		BrightnessConfiguration v12 = v13;
		if (v12 != 0) {
			DisplayDevice v18 = this.mDisplayDeviceRepo.getByUniqueIdLocked(p2);
			LogicalDisplay v19 = this.mLogicalDisplayMapper.getDisplayLocked(v18);
			if (v19 == 0) {
				int v20 = v19.getDisplayIdLocked();
				Object v21 = this.mDisplayPowerControllers.get(v20);
				DisplayPowerController v17 = v21;
				DisplayPowerController v16 = v17;
				if (v16 == 0) {
					if (this.mAutomaticBrightnessController != 0) {
						BrightnessConfiguration v24 = this.mInteractiveModeBrightnessMapper.getDefaultConfig();
						BrightnessConfiguration v23 = v24;
						BrightnessConfiguration v22 = v23;
						Binder.restoreCallingIdentity(v6);
						return ;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public BrightnessConfiguration getBrightnessConfigurationForDisplay(String p1, int p2){
	long v6 = Binder.clearCallingIdentity();
	Object v9 = this.mContext.getSystemService(UserManage.class);
	UserManager v8 = v9;
	UserManager v7 = v8;
	int v10 = v7.getUserSerialNumber(p2);
	DisplayManagerService$SyncRoot v11 = DisplayManagerService.-$$Nest$fgetmSyncRoot(this.this$0);
	BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3);
	if (v14 != 0) {
		BrightnessConfiguration v13 = ;
		BrightnessConfiguration v12 = v13;
		if (v12 != 0) {
			DisplayDevice v17 = this.mDisplayDeviceRepo.getByUniqueIdLocked(p2);
			LogicalDisplay v18 = this.mLogicalDisplayMapper.getDisplayLocked(v17);
			if (v18 == 0) {
				int v19 = v18.getDisplayIdLocked();
				Object v20 = this.mDisplayPowerControllers.get(v19);
				DisplayPowerController v16 = v20;
				DisplayPowerController v15 = v16;
				if (v15 == 0) {
					if (this.mAutomaticBrightnessController != 0) {
						BrightnessConfiguration v23 = this.mInteractiveModeBrightnessMapper.getDefaultConfig();
						BrightnessConfiguration v22 = v23;
						BrightnessConfiguration v21 = v22;
						Binder.restoreCallingIdentity(v6);
						return ;
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public BrightnessConfiguration getBrightnessConfigurationForDisplay(String p1, int p2){
	long v4 = Binder.clearCallingIdentity();
	Object v7 = this.mContext.getSystemService(UserManage.class);
	UserManager v6 = v7;
	UserManager v5 = v6;
	int v8 = v5.getUserSerialNumber(p2);
	DisplayManagerService$SyncRoot v9 = DisplayManagerService.-$$Nest$fgetmSyncRoot(this.this$0);
	BrightnessConfiguration v12 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3);
	if (v12 != 0) {
		BrightnessConfiguration v13 = this.mPersistentDataStore.getBrightnessConfiguration(p3);
		BrightnessConfiguration v11 = ;
		BrightnessConfiguration v10 = v11;
		if (v10 != 0) {
			DisplayDevice v16 = this.mDisplayDeviceRepo.getByUniqueIdLocked(p2);
			LogicalDisplay v17 = this.mLogicalDisplayMapper.getDisplayLocked(v16);
			if (v17 == 0) {
				int v18 = v17.getDisplayIdLocked();
				Object v19 = this.mDisplayPowerControllers.get(v18);
				DisplayPowerController v15 = v19;
				DisplayPowerController v14 = v15;
				if (v14 == 0) {
					if (this.mAutomaticBrightnessController != 0) {
						BrightnessConfiguration v22 = this.mInteractiveModeBrightnessMapper.getDefaultConfig();
						BrightnessConfiguration v21 = v22;
						BrightnessConfiguration v20 = v21;
						Binder.restoreCallingIdentity(v4);
						return ;
					}
				}
			}
		}
	}
}

and the following sink code:
['BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3);\nif (v14 != 0) {\nBrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);', 'int v10 = v7.getUserSerialNumber(p2);']

The method getBrightnessConfigurationForDisplay has the following similar APIs:

- API Name: setBrightnessConfigurationForDisplay(Landroid/hardware/display/BrightnessConfiguration;Ljava/lang/String;ILjava/lang/String;)V with Similarity Score: 0.9060478210449219
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5);
this.mPersistentDataStore.saveIfNeeded();

- API Name: getBrightnessConfigurationForUser(I)Landroid/hardware/display/BrightnessConfiguration; with Similarity Score: 0.8237547278404236
  - Access Control Level: SYS_OR_SIG and the following code:
BrightnessConfiguration v19 = this.this$0.getBrightnessConfigForDisplayWithPdsFallbackLocked(p1, v16);
if (v18 == 0) {
if (this.mAutomaticBrightnessController != 0) {
BrightnessConfiguration v23 = this.mAutomaticBrightnessController.getDefaultConfig();

