The method getDisplayInfo has the following code snippet:

This is path 1 for the API with depth 2:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2);
	if (v5 == 0) {
		DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();
		DisplayInfo v7 = v5.getDisplayInfoLocked();
		DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3);
		boolean v9 = v8.hasAccess(p3);
		if (v9 != 0) {
			boolean v10 = DisplayManagerService.isUidPresentOnDisplayInternal(p3, p2);
			if (v10 == 0) {
				DisplayInfo v4 = v8;
				DisplayInfo v3 = v4;
				Binder.restoreCallingIdentity(v2);
				return v3;
			}
		}
	}
}
This is path 2 for the API with depth 2:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2);
	if (v5 == 0) {
		DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();
		DisplayInfo v7 = v5.getDisplayInfoLocked();
		DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3);
		boolean v9 = v8.hasAccess(p3);
		if (v9 != 0) {
			boolean v10 = DisplayManagerService.isUidPresentOnDisplayInternal(p3, p2);
			if (v10 == 0) {
				DisplayInfo v4 = 0;
				DisplayInfo v3 = v4;
				Binder.restoreCallingIdentity(v2);
				return v3;
			}
		}
	}
}
This is path 3 for the API with depth 2:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2);
	if (v5 == 0) {
		DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();
		DisplayInfo v7 = v5.getDisplayInfoLocked();
		DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3);
		boolean v9 = v8.hasAccess(p3);
		if (v9 != 0) {
			DisplayInfo v4 = v8;
			DisplayInfo v3 = v4;
			Binder.restoreCallingIdentity(v2);
			return v3;
		}
	}
}

and the following sink code:
['LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2);\nDisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();\nDisplayInfo v7 = v5.getDisplayInfoLocked();\nDisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3);\nboolean v9 = v8.hasAccess(p3);\nif (v10 == 0) {\n    DisplayInfo v4 = v8;\n    DisplayInfo v3 = v4;\n    return v3;']

The method getDisplayInfo has the following similar APIs:

- API Name: getSystemPreferredDisplayMode(I)Landroid/view/Display$Mode; with Similarity Score: 0.8737112879753113
  - Access Control Level: NONE and the following code:
LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1);
Display$Mode v5 = v3.getSystemPreferredDisplayModeLocked();
Display$Mode v2 = v5;
return v2;

- API Name: getUserPreferredDisplayMode(I)Landroid/view/Display$Mode; with Similarity Score: 0.8691758513450623
  - Access Control Level: NONE and the following code:
LogicalDisplay v4 = this.mLogicalDisplayMapper.getDisplayLocked(p1);
Display$Mode v5 = v3.getUserPreferredDisplayModeLocked();
Display$Mode v2 = v5;
return v2;

