This is path 1 for the API with depth 2:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2);
	if (v5 == 0) {
		DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();
		DisplayInfo v7 = v5.getDisplayInfoLocked();
		DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3);
		boolean v9 = v8.hasAccess(p3);
		if (v9 != 0) {
			boolean v10 = DisplayManagerService.isUidPresentOnDisplayInternal(p3, p2);
			if (v10 == 0) {
				DisplayInfo v4 = v8;
				DisplayInfo v3 = v4;
				Binder.restoreCallingIdentity(v2);
				return v3;
			}
		}
	}
}

This is path 2 for the API with depth 2:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2);
	if (v5 == 0) {
		DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();
		DisplayInfo v7 = v5.getDisplayInfoLocked();
		DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3);
		boolean v9 = v8.hasAccess(p3);
		if (v9 != 0) {
			boolean v10 = DisplayManagerService.isUidPresentOnDisplayInternal(p3, p2);
			if (v10 == 0) {
				DisplayInfo v4 = 0;
				DisplayInfo v3 = v4;
				Binder.restoreCallingIdentity(v2);
				return v3;
			}
		}
	}
}

This is path 3 for the API with depth 2:
public DisplayInfo getDisplayInfo(int p1){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	LogicalDisplay v5 = this.mLogicalDisplayMapper.getDisplayLocked(p2);
	if (v5 == 0) {
		DisplayEventReceiver$FrameRateOverride v6 = v5.getFrameRateOverrides();
		DisplayInfo v7 = v5.getDisplayInfoLocked();
		DisplayInfo v8 = DisplayManagerService.getDisplayInfoForFrameRateOverride(v6, v7, p3);
		boolean v9 = v8.hasAccess(p3);
		if (v9 != 0) {
			DisplayInfo v4 = v8;
			DisplayInfo v3 = v4;
			Binder.restoreCallingIdentity(v2);
			return v3;
		}
	}
}
