The method setBrightnessConfigurationForDisplay has the following code snippet:

This is path 1 for the API with depth 2:
public void setBrightnessConfigurationForDisplay(BrightnessConfiguration p1, String p2, int p3, String p4){
	long v6 = Binder.clearCallingIdentity();
	DisplayManagerService.validateBrightnessConfiguration(p2);
	UserManager v10 = DisplayManagerService.getUserManager();
	int v11 = v10.getUserSerialNumber(p4);
	DisplayDevice v12 = this.mDisplayDeviceRepo.getByUniqueIdLocked(p3);
	if (v12 != 0) {
		boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5);
		this.mPersistentDataStore.saveIfNeeded();
		if (p4 == this.mCurrentUserId) {
			DisplayPowerController v15 = DisplayManagerService.getDpcFromUniqueIdLocked(p3);
			if (v15 == 0) {
				v15.setBrightnessConfiguration(p2);
				Binder.restoreCallingIdentity(v6);
				return;
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setBrightnessConfigurationForDisplay(BrightnessConfiguration p1, String p2, int p3, String p4){
	long v6 = Binder.clearCallingIdentity();
	DisplayManagerService.validateBrightnessConfiguration(p2);
	UserManager v10 = DisplayManagerService.getUserManager();
	int v11 = v10.getUserSerialNumber(p4);
	DisplayDevice v12 = this.mDisplayDeviceRepo.getByUniqueIdLocked(p3);
	if (v12 != 0) {
		boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5);
		this.mPersistentDataStore.saveIfNeeded();
		if (p4 == this.mCurrentUserId) {
			DisplayPowerController v15 = DisplayManagerService.getDpcFromUniqueIdLocked(p3);
			if (v15 == 0) {
				Binder.restoreCallingIdentity(v6);
				return;
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setBrightnessConfigurationForDisplay(BrightnessConfiguration p1, String p2, int p3, String p4){
	long v4 = Binder.clearCallingIdentity();
	DisplayManagerService.validateBrightnessConfiguration(p2);
	UserManager v8 = DisplayManagerService.getUserManager();
	int v9 = v8.getUserSerialNumber(p4);
	DisplayDevice v10 = this.mDisplayDeviceRepo.getByUniqueIdLocked(p3);
	if (v10 != 0) {
		boolean v11 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v10, v9, p5);
		this.mPersistentDataStore.saveIfNeeded();
		if (p4 == this.mCurrentUserId) {
			DisplayPowerController v13 = DisplayManagerService.getDpcFromUniqueIdLocked(p3);
			if (v13 == 0) {
				v13.setBrightnessConfiguration(p2);
				Binder.restoreCallingIdentity(v4);
				return;
			}
		}
	}
}

and the following sink code:
['boolean v13 = this.mPersistentDataStore.setBrightnessConfigurationForDisplayLocked(p2, v12, v11, p5);\nthis.mPersistentDataStore.saveIfNeeded();', 'DisplayPowerController v15 = DisplayManagerService.getDpcFromUniqueIdLocked(p3);\nv15.setBrightnessConfiguration(p2);']

The method setBrightnessConfigurationForDisplay has the following similar APIs:

- API Name: getBrightnessConfigurationForDisplay(Ljava/lang/String;I)Landroid/hardware/display/BrightnessConfiguration; with Similarity Score: 0.9060478210449219
  - Access Control Level: SYS_OR_SIG and the following code:
BrightnessConfiguration v14 = this.mPersistentDataStore.getBrightnessConfigurationForDisplayLocked(p2, p3);
if (v14 != 0) {
BrightnessConfiguration v15 = this.mPersistentDataStore.getBrightnessConfiguration(p3);

- API Name: setBrightness(IF)V with Similarity Score: 0.7996939420700073
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v14 = this.mPersistentDataStore.setBrightness(v13, p1);
this.mBrightness = p1;
int v15 = Float.floatToIntBits(p1);
Message v16 = this.mHandler.obtainMessage(1, v15, 0);
boolean v17 = this.mHandler.sendMessage(v16);

