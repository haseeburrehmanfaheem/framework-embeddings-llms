This is path 1 for the API with depth 2:
depth : 0
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	ArrayList v1 = new ArrayList();
	boolean v3 = p0.calledFromValidUserLocked();
	Object v4 = this.mMethodMap.get(p1);
	int v5 = Binder.getCallingUid();
	String v6 = this.mIPackageManager.getPackagesForUid(v5);
	String v7 = v4.getPackageName();
	boolean v8 = v6[phiInstruction].equals(v7);
	String v9 = v4.getId();
	Object v10 = this.mAdditionalSubtypeMap.put(v9, v1);
	int v11 = this.mSettings.getCurrentUserId();
	AdditionalSubtypeUtils.save(this.mAdditionalSubtypeMap, this.mMethodMap, v11);
	long v13 = Binder.clearCallingIdentity();
	p0.buildInputMethodListLocked(0);
	Binder.restoreCallingIdentity(v13);
	return;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public int getCurrentUserId(){
	return this.mCurrentUserId;
}
-----
depth : 1
public void save(ArrayMap p1, ArrayMap p2, int p3){
	File v1 = AdditionalSubtypeUtils.getInputMethodDir(p3);
	boolean v2 = p1.isEmpty();
	boolean v3 = v1.exists();
	AtomicFile v4 = AdditionalSubtypeUtils.getAdditionalSubtypeFile(v1);
	boolean v5 = v4.exists();
	v4.delete();
	File v7 = FileUtils.listFilesOrEmpty(v1);
	boolean v8 = v1.delete();
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Failed to delete the empty parent directory ");
	StringBuilder v11 = v8.append(v1);
	String v12 = v8.toString();
	int v13 = Slog.e("AdditionalSubtypeUtils", v12);
	return;
}
-----
depth : 2
public File getInputMethodDir(int p1){
	File v0 = new File(v1,"system");
	File v1 = Environment.getDataDirectory();
	File v2 = new File(phiInstruction,"inputmethod");
	return v2;
}
-----
depth : 2
public AtomicFile getAdditionalSubtypeFile(File p1){
	File v0 = new File(p1,"subtypes.xml");
	AtomicFile v1 = new AtomicFile(v0,"input-subtypes");
	return v1;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	ArrayList v1 = new ArrayList();
	boolean v3 = p0.calledFromValidUserLocked();
	Object v4 = this.mMethodMap.get(p1);
	int v5 = Binder.getCallingUid();
	String v6 = this.mIPackageManager.getPackagesForUid(v5);
	String v7 = v4.getPackageName();
	boolean v8 = v6[phiInstruction].equals(v7);
	String v9 = v4.getId();
	Object v10 = this.mAdditionalSubtypeMap.put(v9, v1);
	int v11 = this.mSettings.getCurrentUserId();
	AdditionalSubtypeUtils.save(this.mAdditionalSubtypeMap, this.mMethodMap, v11);
	long v13 = Binder.clearCallingIdentity();
	p0.buildInputMethodListLocked(0);
	Binder.restoreCallingIdentity(v13);
	return;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public int getCurrentUserId(){
	return this.mCurrentUserId;
}
-----
depth : 1
public void save(ArrayMap p1, ArrayMap p2, int p3){
	File v1 = AdditionalSubtypeUtils.getInputMethodDir(p3);
	boolean v2 = p1.isEmpty();
	boolean v3 = v1.exists();
	AtomicFile v4 = AdditionalSubtypeUtils.getAdditionalSubtypeFile(v1);
	boolean v5 = v4.exists();
	File v6 = FileUtils.listFilesOrEmpty(v1);
	boolean v7 = v1.delete();
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Failed to delete the empty parent directory ");
	StringBuilder v10 = v7.append(v1);
	String v11 = v7.toString();
	int v12 = Slog.e("AdditionalSubtypeUtils", v11);
	return;
}
-----
depth : 2
public File getInputMethodDir(int p1){
	File v0 = new File(v1,"system");
	File v1 = Environment.getDataDirectory();
	File v2 = new File(phiInstruction,"inputmethod");
	return v2;
}
-----
depth : 2
public AtomicFile getAdditionalSubtypeFile(File p1){
	File v0 = new File(p1,"subtypes.xml");
	AtomicFile v1 = new AtomicFile(v0,"input-subtypes");
	return v1;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	ArrayList v1 = new ArrayList();
	boolean v3 = p0.calledFromValidUserLocked();
	Object v4 = this.mMethodMap.get(p1);
	int v5 = Binder.getCallingUid();
	String v6 = this.mIPackageManager.getPackagesForUid(v5);
	String v7 = v4.getPackageName();
	boolean v8 = v6[phiInstruction].equals(v7);
	String v9 = v4.getId();
	Object v10 = this.mAdditionalSubtypeMap.put(v9, v1);
	int v11 = this.mSettings.getCurrentUserId();
	AdditionalSubtypeUtils.save(this.mAdditionalSubtypeMap, this.mMethodMap, v11);
	long v13 = Binder.clearCallingIdentity();
	p0.buildInputMethodListLocked(0);
	Binder.restoreCallingIdentity(v13);
	return;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	return 1;
}
-----
depth : 1
public int getCurrentUserId(){
	return this.mCurrentUserId;
}
-----
depth : 1
public void save(ArrayMap p1, ArrayMap p2, int p3){
	File v1 = AdditionalSubtypeUtils.getInputMethodDir(p3);
	boolean v2 = p1.isEmpty();
	boolean v3 = v1.exists();
	AtomicFile v4 = AdditionalSubtypeUtils.getAdditionalSubtypeFile(v1);
	boolean v5 = v4.exists();
	v4.delete();
	File v7 = FileUtils.listFilesOrEmpty(v1);
	boolean v8 = v1.delete();
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Failed to delete the empty parent directory ");
	StringBuilder v11 = v8.append(v1);
	String v12 = v8.toString();
	int v13 = Slog.e("AdditionalSubtypeUtils", v12);
	return;
}
-----
depth : 2
public File getInputMethodDir(int p1){
	File v0 = new File(v1,"system");
	File v1 = Environment.getDataDirectory();
	File v2 = new File(phiInstruction,"inputmethod");
	return v2;
}
-----
depth : 2
public AtomicFile getAdditionalSubtypeFile(File p1){
	File v0 = new File(p1,"subtypes.xml");
	AtomicFile v1 = new AtomicFile(v0,"input-subtypes");
	return v1;
}
-----
