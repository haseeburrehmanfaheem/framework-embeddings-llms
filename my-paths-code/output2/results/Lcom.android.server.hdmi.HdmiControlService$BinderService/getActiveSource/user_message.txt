This is path 1 for the API with depth 2:
depth : 0
public HdmiDeviceInfo getActiveSource(){
	HdmiControlService.-$$Nest$minitBinderCall(this.this$0);
	HdmiDeviceInfo v2 = this.this$0.getActiveSource();
	return v2;
}
-----
depth : 1
public void -$$Nest$minitBinderCall(HdmiControlService p1){
	p1.initBinderCall();
	return;
}
-----
depth : 2
public void initBinderCall(){
	p0.enforceAccessPermission();
	p0.setWorkSourceUidToCallingUid();
	return;
}
-----
depth : 1
public HdmiDeviceInfo getActiveSource(){
	HdmiCecLocalDevicePlayback v1 = p0.playback();
	HdmiCecLocalDevicePlayback v2 = p0.playback();
	boolean v3 = v2.isActiveSource();
	HdmiCecLocalDevice$ActiveSource v4 = p0.getLocalActiveSource();
	boolean v5 = v4.isValid();
	HdmiCecLocalDeviceTv v6 = p0.tv();
	HdmiCecLocalDeviceTv v7 = p0.tv();
	int v8 = v7.getActivePath();
	HdmiDeviceInfo v9 = this.mHdmiCecNetwork.getSafeDeviceInfoByPath(v8);
	HdmiCecLocalDeviceTv v10 = p0.tv();
	int v11 = v10.getActivePortId();
	HdmiDeviceInfo v12 = HdmiDeviceInfo.hardwarePort(v8, v11);
	return phiInstruction;
}
-----
depth : 2
public HdmiCecLocalDevicePlayback playback(){
	HdmiCecLocalDevice v1 = this.mHdmiCecNetwork.getLocalDevice(4);
	return v1;
}
-----
depth : 2
public HdmiCecLocalDevicePlayback playback(){
	HdmiCecLocalDevice v1 = this.mHdmiCecNetwork.getLocalDevice(4);
	return v1;
}
-----
depth : 2
public HdmiCecLocalDevice$ActiveSource getLocalActiveSource(){
	return this.mActiveSource;
}
-----
depth : 2
public boolean isValid(){
	boolean v1 = HdmiUtils.isValidAddress(this.logicalAddress);
	return v1;
}
-----
depth : 2
public HdmiCecLocalDeviceTv tv(){
	HdmiCecLocalDevice v1 = this.mHdmiCecNetwork.getLocalDevice(0);
	return v1;
}
-----
depth : 2
public HdmiCecLocalDeviceTv tv(){
	HdmiCecLocalDevice v1 = this.mHdmiCecNetwork.getLocalDevice(0);
	return v1;
}
-----
depth : 2
public HdmiDeviceInfo getSafeDeviceInfoByPath(int p1){
	Iterator v1 = this.mSafeAllDeviceInfos.iterator();
	boolean v2 = v1.hasNext();
	return 0;
}
-----
depth : 2
public HdmiCecLocalDeviceTv tv(){
	HdmiCecLocalDevice v1 = this.mHdmiCecNetwork.getLocalDevice(0);
	return v1;
}
-----
depth : 2
public HdmiDeviceInfo hardwarePort(int p1, int p2){
	HdmiDeviceInfo$Builder v0 = new HdmiDeviceInfo$Builder(2,0);
	HdmiDeviceInfo$Builder v2 = v0.setPhysicalAddress(p1);
	HdmiDeviceInfo$Builder v3 = v2.setPortId(p2);
	HdmiDeviceInfo$Builder v4 = v3.setVendorId(0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("HDMI");
	StringBuilder v7 = v6.append(p2);
	String v8 = v7.toString();
	HdmiDeviceInfo$Builder v9 = v4.setDisplayName(v8);
	HdmiDeviceInfo v10 = v9.build();
	return v10;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public HdmiDeviceInfo getActiveSource(){
	HdmiControlService.-$$Nest$minitBinderCall(this.this$0);
	HdmiDeviceInfo v2 = this.this$0.getActiveSource();
	return v2;
}
-----
depth : 1
public void -$$Nest$minitBinderCall(HdmiControlService p1){
	p1.initBinderCall();
	return;
}
-----
depth : 2
public void initBinderCall(){
	p0.enforceAccessPermission();
	p0.setWorkSourceUidToCallingUid();
	return;
}
-----
depth : 1
public HdmiDeviceInfo getActiveSource(){
	HdmiCecLocalDevicePlayback v1 = p0.playback();
	HdmiCecLocalDevicePlayback v2 = p0.playback();
	boolean v3 = v2.isActiveSource();
	HdmiCecLocalDevice$ActiveSource v4 = p0.getLocalActiveSource();
	boolean v5 = v4.isValid();
	HdmiDeviceInfo v6 = this.mHdmiCecNetwork.getSafeCecDeviceInfo(HdmiCecLocalDevice$ActiveSource.logicalAddress);
	int v7 = p0.pathToPortId(HdmiCecLocalDevice$ActiveSource.physicalAddress);
	HdmiDeviceInfo v8 = HdmiDeviceInfo.hardwarePort(HdmiCecLocalDevice$ActiveSource.physicalAddress, v7);
	return v8;
}
-----
depth : 2
public HdmiCecLocalDevicePlayback playback(){
	HdmiCecLocalDevice v1 = this.mHdmiCecNetwork.getLocalDevice(4);
	return v1;
}
-----
depth : 2
public HdmiCecLocalDevicePlayback playback(){
	HdmiCecLocalDevice v1 = this.mHdmiCecNetwork.getLocalDevice(4);
	return v1;
}
-----
depth : 2
public HdmiCecLocalDevice$ActiveSource getLocalActiveSource(){
	return this.mActiveSource;
}
-----
depth : 2
public boolean isValid(){
	boolean v1 = HdmiUtils.isValidAddress(this.logicalAddress);
	return v1;
}
-----
depth : 2
public HdmiDeviceInfo getSafeCecDeviceInfo(int p1){
	Iterator v1 = this.mSafeAllDeviceInfos.iterator();
	boolean v2 = v1.hasNext();
	return 0;
}
-----
depth : 2
public int pathToPortId(int p1){
	int v1 = this.mHdmiCecNetwork.physicalAddressToPortId(p1);
	return v1;
}
-----
depth : 2
public HdmiDeviceInfo hardwarePort(int p1, int p2){
	HdmiDeviceInfo$Builder v0 = new HdmiDeviceInfo$Builder(2,0);
	HdmiDeviceInfo$Builder v2 = v0.setPhysicalAddress(p1);
	HdmiDeviceInfo$Builder v3 = v2.setPortId(p2);
	HdmiDeviceInfo$Builder v4 = v3.setVendorId(0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("HDMI");
	StringBuilder v7 = v6.append(p2);
	String v8 = v7.toString();
	HdmiDeviceInfo$Builder v9 = v4.setDisplayName(v8);
	HdmiDeviceInfo v10 = v9.build();
	return v10;
}
-----
