This is path 1 for the API with depth 2:
depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = "lock_pattern_autolock".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState("pwd", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getCredentialType: encountered empty password data for user ");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w("SyntheticPasswordManager", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = "lock_pattern_autolock".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState("pwd", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getCredentialType: encountered empty password data for user ");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w("SyntheticPasswordManager", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = "lock_pattern_autolock".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 1
public void checkReadPermission(String p1, int p2){
	int v1 = Binder.getCallingUid();
	return;
}
-----
depth : 1
public int getCredentialTypeInternal(int p1){
	boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	long v2 = p0.getSyntheticPasswordHandleLocked(p1);
	int v3 = this.mSpManager.getCredentialType(v2, p1);
	int v4 = p0.getKeyguardStoredQuality(p1);
	int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4);
	return v5;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public int getCredentialType(long p1, int p2){
	byte[] v1 = p0.loadState("pwd", p1, p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getCredentialType: encountered empty password data for user ");
	StringBuilder v4 = v1.append(p2);
	String v5 = v1.toString();
	int v6 = Slog.w("SyntheticPasswordManager", v5);
	return -1;
}
-----
depth : 2
public int getKeyguardStoredQuality(int p1){
	long v1 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
	return v1;
}
-----
depth : 2
public int pinOrPasswordQualityToCredentialType(int p1){
	boolean v1 = LockPatternUtils.isQualityAlphabeticPassword(p1);
	boolean v2 = LockPatternUtils.isQualityNumericPin(p1);
	return 3;
}
-----
