This is path 1 for the API with depth 2:
depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
depth : 1
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v3 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
	Object v4 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
	SigXml v5 = SigXml.parse(p3);
	X509Certificate v6 = this.mTestCertHelper.getRootCertificate(v2);
	v5.verifyFileSignature(v6, p2);
	p0.initRecoveryService(v2, p2);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
	return phiInstruction;
}
-----
depth : 2
public SigXml parse(byte[] p1){
	Element v1 = CertUtils.getXmlRootNode(p1);
	SigXml v1 = new SigXml(v2,v3,v4);
	List v2 = SigXml.parseIntermediateCerts(v1);
	X509Certificate v3 = SigXml.parseSignerCert(v1);
	byte[] v4 = SigXml.parseFileSignature(v1);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	return v3;
}
-----
depth : 2
public void verifyFileSignature(X509Certificate p1, byte[] p2){
	p0.verifyFileSignature(p1, p2, 0);
	return;
}
-----
depth : 2
public void initRecoveryService(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	String v4 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	boolean v5 = this.mTestCertHelper.isValidRootCertificateAlias(v4);
	String v6 = this.mDatabase.getActiveRootOfTrust(v2, v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append("Root of trust for recovery agent + ");
	StringBuilder v9 = v6.append(v3);
	StringBuilder v10 = v6.append(" is assigned for the first time to ");
	StringBuilder v11 = v6.append(v4);
	String v12 = v6.toString();
	int v13 = Log.d("RecoverableKeyStoreMgr", v12);
	long v14 = this.mDatabase.setActiveRootOfTrust(v2, v3, v4);
	CertXml v15 = CertXml.parse(p2);
	long v16 = v15.getSerial();
	Long v17 = this.mDatabase.getRecoveryServiceCertSerial(v2, v3, v4);
	long v18 = v17.longValue();
	boolean v19 = this.mTestCertHelper.isTestOnlyCertificateAlias(v4);
	long v20 = v17.longValue();
	int v21 = Log.i("RecoverableKeyStoreMgr", "The cert file serial number is the same, so skip updating.");
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	this.mRecoverableKeyStoreManager.initRecoveryServiceWithSigFile(p1, p2, p3);
	return;
}
-----
depth : 1
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	Object v3 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
	Object v4 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
	SigXml v5 = SigXml.parse(p3);
	X509Certificate v6 = this.mTestCertHelper.getRootCertificate(v2);
	v5.verifyFileSignature(v6, p2);
	p0.initRecoveryService(v2, p2);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
	return phiInstruction;
}
-----
depth : 2
public SigXml parse(byte[] p1){
	Element v1 = CertUtils.getXmlRootNode(p1);
	SigXml v1 = new SigXml(v2,v3,v4);
	List v2 = SigXml.parseIntermediateCerts(v1);
	X509Certificate v3 = SigXml.parseSignerCert(v1);
	byte[] v4 = SigXml.parseFileSignature(v1);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getRootCertificate(v1);
	return v3;
}
-----
depth : 2
public void verifyFileSignature(X509Certificate p1, byte[] p2){
	p0.verifyFileSignature(p1, p2, 0);
	return;
}
-----
depth : 2
public void initRecoveryService(String p1, byte[] p2){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	String v4 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p1);
	boolean v5 = this.mTestCertHelper.isValidRootCertificateAlias(v4);
	String v6 = this.mDatabase.getActiveRootOfTrust(v2, v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append("Root of trust for recovery agent + ");
	StringBuilder v9 = v6.append(v3);
	StringBuilder v10 = v6.append(" is assigned for the first time to ");
	StringBuilder v11 = v6.append(v4);
	String v12 = v6.toString();
	int v13 = Log.d("RecoverableKeyStoreMgr", v12);
	long v14 = this.mDatabase.setActiveRootOfTrust(v2, v3, v4);
	CertXml v15 = CertXml.parse(p2);
	long v16 = v15.getSerial();
	Long v17 = this.mDatabase.getRecoveryServiceCertSerial(v2, v3, v4);
	long v18 = v17.longValue();
	boolean v19 = this.mTestCertHelper.isTestOnlyCertificateAlias(v4);
	long v20 = v17.longValue();
	int v21 = Log.i("RecoverableKeyStoreMgr", "The cert file serial number is the same, so skip updating.");
	return;
}
-----
