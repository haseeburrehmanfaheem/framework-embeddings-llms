This is path 1 for the API with depth 2:
depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature("android.hardware.type.automotive");
	return;
}
-----
depth : 1
public boolean removeEscrowToken(long p1, int p2){
	long v1 = p0.getSyntheticPasswordHandleLocked(p2);
	boolean v2 = this.mSpManager.removePendingToken(p1, p2);
	boolean v3 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	return 1;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public boolean removePendingToken(long p1, int p2){
	Integer v1 = Integer.valueOf(p2);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p2);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.remove(v5);
	return phiInstruction;
}
-----
depth : 2
public boolean existsHandle(long p1, int p2){
	boolean v1 = p0.hasState("spblob", p1, p2);
	return v1;
}
-----
depth : 2
public void destroyTokenBasedSyntheticPassword(long p1, int p2){
	byte[] v1 = p0.loadState("spblob", p1, p2);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	p0.destroySyntheticPassword(p1, p2);
	p0.destroyState("secdis", p1, p2);
	p0.notifyWeakEscrowTokenRemovedListeners(p1, p2);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean removeWeakEscrowToken(long p1, int p2){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.removeEscrowToken(p1, p2);
	Binder.restoreCallingIdentity(v2);
	return v3;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature("android.hardware.type.automotive");
	return;
}
-----
depth : 1
public boolean removeEscrowToken(long p1, int p2){
	long v1 = p0.getSyntheticPasswordHandleLocked(p2);
	boolean v2 = this.mSpManager.removePendingToken(p1, p2);
	boolean v3 = this.mSpManager.existsHandle(p1, p2);
	this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);
	return 1;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public boolean removePendingToken(long p1, int p2){
	Integer v1 = Integer.valueOf(p2);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p2);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.remove(v5);
	return phiInstruction;
}
-----
depth : 2
public boolean existsHandle(long p1, int p2){
	boolean v1 = p0.hasState("spblob", p1, p2);
	return v1;
}
-----
depth : 2
public void destroyTokenBasedSyntheticPassword(long p1, int p2){
	byte[] v1 = p0.loadState("spblob", p1, p2);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	p0.destroySyntheticPassword(p1, p2);
	p0.destroyState("secdis", p1, p2);
	return;
}
-----
