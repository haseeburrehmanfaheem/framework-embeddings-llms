This is path 1 for the API with depth 2:
depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
depth : 1
public void setRecoverySecretTypes([I p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, "secretTypes is null");
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);
	int v8 = Log.i("RecoverableKeyStoreMgr", "Updated secret types. Snapshot pending.");
	Long v9 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v10 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v11 = Log.i("RecoverableKeyStoreMgr", "Updated secret types. Snapshot must be updated");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query("recovery_service_metadata", v1, "user_id = ? AND uid = ?", v1, 0, 0, 0);
	int v5 = v4.getCount();
	boolean v6 = v4.moveToFirst();
	int v7 = v4.getColumnIndexOrThrow("secret_types");
	boolean v8 = v4.isNull(v7);
	String v9 = v4.getString(v7);
	boolean v10 = TextUtils.isEmpty(v9);
	String v11 = v9.split(",");
	[I v11 = new [I(v11.length);
	v4.close();
	return v11;
}
-----
depth : 2
public long setRecoverySecretTypes(int p1, int p2, [I p3){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	StringJoiner v2 = new StringJoiner(",");
	IntStream v4 = Arrays.stream(p3);
	RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v4 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v2);
	v4.forEach(v4);
	String v7 = v2.toString();
	v1.put("secret_types", v7);
	p0.ensureRecoveryServiceMetadataEntryExists(p1, p2);
	String v9 = new String(2);
	String v10 = String.valueOf(p1);
	String v11 = String.valueOf(p2);
	int v12 = v1.update("recovery_service_metadata", v1, "user_id = ? AND uid = ?", v9);
	return v12;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, "snapshot_version");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, "should_create_snapshot", phiInstruction);
	return v1;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setRecoverySecretTypes([I p1){
	this.mRecoverableKeyStoreManager.setRecoverySecretTypes(p1);
	return;
}
-----
depth : 1
public void setRecoverySecretTypes([I p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, "secretTypes is null");
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
	boolean v6 = Arrays.equals(p1, v5);
	long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);
	int v8 = Log.i("RecoverableKeyStoreMgr", "Updated secret types. Snapshot pending.");
	Long v9 = this.mDatabase.getSnapshotVersion(v3, v4);
	long v10 = this.mDatabase.setShouldCreateSnapshot(v3, v4, 1);
	int v11 = Log.i("RecoverableKeyStoreMgr", "Updated secret types. Snapshot must be updated");
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query("recovery_service_metadata", v1, "user_id = ? AND uid = ?", v1, 0, 0, 0);
	int v5 = v4.getCount();
	boolean v6 = v4.moveToFirst();
	int v7 = v4.getColumnIndexOrThrow("secret_types");
	boolean v8 = v4.isNull(v7);
	String v9 = v4.getString(v7);
	boolean v10 = TextUtils.isEmpty(v9);
	String v11 = v9.split(",");
	[I v11 = new [I(v11.length);
	v4.close();
	return v11;
}
-----
depth : 2
public long setRecoverySecretTypes(int p1, int p2, [I p3){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	ContentValues v1 = new ContentValues();
	StringJoiner v2 = new StringJoiner(",");
	IntStream v4 = Arrays.stream(p3);
	RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v4 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v2);
	v4.forEach(v4);
	String v7 = v2.toString();
	v1.put("secret_types", v7);
	p0.ensureRecoveryServiceMetadataEntryExists(p1, p2);
	String v9 = new String(2);
	String v10 = String.valueOf(p1);
	String v11 = String.valueOf(p2);
	int v12 = v1.update("recovery_service_metadata", v1, "user_id = ? AND uid = ?", v9);
	return v12;
}
-----
depth : 2
public Long getSnapshotVersion(int p1, int p2){
	Long v1 = p0.getLong(p1, p2, "snapshot_version");
	return v1;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, "should_create_snapshot", phiInstruction);
	return v1;
}
-----
