This is path 1 for the API with depth 2:
depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
depth : 1
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v4 = this.mRecoverySessionStorage.get(v3, p1);
	byte[] v5 = p0.decryptRecoveryKey(v4, p2);
	Map v6 = p0.recoverApplicationKeys(v5, p3);
	Map v7 = p0.importKeyMaterials(v2, v3, v6);
	v4.destroy();
	this.mRecoverySessionStorage.remove(v3);
	return v7;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public RecoverySessionStorage$Entry get(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	Object v4 = v2.next();
	String v5 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v4);
	boolean v6 = p2.equals(v5);
	return v4;
}
-----
depth : 2
public byte[] decryptRecoveryKey(RecoverySessionStorage$Entry p1, byte[] p2){
	byte[] v1 = p1.getKeyClaimant();
	byte[] v2 = p1.getVaultParams();
	byte[] v3 = KeySyncUtils.decryptRecoveryClaimResponse(v1, v2, p2);
	byte[] v4 = p1.getLskfHash();
	byte[] v5 = KeySyncUtils.decryptRecoveryKey(v4, v3);
	return v5;
}
-----
depth : 2
public Map recoverApplicationKeys(byte[] p1, List p2){
	HashMap v0 = new HashMap();
	Iterator v2 = p2.iterator();
	boolean v3 = v2.hasNext();
	boolean v4 = p2.isEmpty();
	boolean v5 = v0.isEmpty();
	return v0;
}
-----
depth : 2
public Map importKeyMaterials(int p1, int p2, Map p3){
	ArrayMap v0 = new ArrayMap(v1);
	int v1 = p3.size();
	Set v3 = p3.keySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v0;
}
-----
depth : 2
public void destroy(){
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	return;
}
-----
depth : 2
public void remove(int p1){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	this.mSessionsByUid.remove(p1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	Map v1 = this.mRecoverableKeyStoreManager.recoverKeyChainSnapshot(p1, p2, p3);
	return v1;
}
-----
depth : 1
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	RecoverySessionStorage$Entry v4 = this.mRecoverySessionStorage.get(v3, p1);
	byte[] v5 = p0.decryptRecoveryKey(v4, p2);
	Map v6 = p0.recoverApplicationKeys(v5, p3);
	Map v7 = p0.importKeyMaterials(v2, v3, v6);
	v4.destroy();
	this.mRecoverySessionStorage.remove(v3);
	return v7;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public RecoverySessionStorage$Entry get(int p1, String p2){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	Object v4 = v2.next();
	String v5 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v4);
	boolean v6 = p2.equals(v5);
	return v4;
}
-----
depth : 2
public byte[] decryptRecoveryKey(RecoverySessionStorage$Entry p1, byte[] p2){
	byte[] v1 = p1.getKeyClaimant();
	byte[] v2 = p1.getVaultParams();
	byte[] v3 = KeySyncUtils.decryptRecoveryClaimResponse(v1, v2, p2);
	byte[] v4 = p1.getLskfHash();
	byte[] v5 = KeySyncUtils.decryptRecoveryKey(v4, v3);
	return v5;
}
-----
depth : 2
public Map recoverApplicationKeys(byte[] p1, List p2){
	HashMap v0 = new HashMap();
	Iterator v2 = p2.iterator();
	boolean v3 = v2.hasNext();
	boolean v4 = p2.isEmpty();
	return v0;
}
-----
depth : 2
public Map importKeyMaterials(int p1, int p2, Map p3){
	ArrayMap v0 = new ArrayMap(v1);
	int v1 = p3.size();
	Set v3 = p3.keySet();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	return v0;
}
-----
depth : 2
public void destroy(){
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	return;
}
-----
depth : 2
public void remove(int p1){
	Object v1 = this.mSessionsByUid.get(p1);
	Iterator v2 = v1.iterator();
	boolean v3 = v2.hasNext();
	this.mSessionsByUid.remove(p1);
	return;
}
-----
