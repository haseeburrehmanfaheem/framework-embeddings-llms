This is path 1 for the API with depth 2:
depth : 0
public void applyRestore(byte[] p1, int p2){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p2);
	ShortcutService$$ExternalSyntheticLambda6 v2 = new ShortcutService$$ExternalSyntheticLambda6(p0);
	boolean v4 = this.mShortcutDumpFiles.save("restore-0-start.txt", v2);
	boolean v5 = this.mShortcutDumpFiles.save("restore-1-payload.xml", p1);
	ByteArrayInputStream v5 = new ByteArrayInputStream(p1);
	ShortcutUser v7 = p0.loadUserInternal(p2, v5, 1);
	ShortcutService$$ExternalSyntheticLambda7 v7 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v9 = this.mShortcutDumpFiles.save("restore-2.txt", v7);
	ShortcutUser v10 = p0.getUserShortcutsLocked(p2);
	v10.mergeRestoredFile(v7);
	ShortcutService$$ExternalSyntheticLambda7 v11 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v13 = this.mShortcutDumpFiles.save("restore-3.txt", v11);
	p0.rescanUpdatedPackagesLocked(p2, 0);
	ShortcutService$$ExternalSyntheticLambda7 v14 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v16 = this.mShortcutDumpFiles.save("restore-4.txt", v14);
	ShortcutService$$ExternalSyntheticLambda8 v16 = new ShortcutService$$ExternalSyntheticLambda8(p0);
	boolean v18 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v16);
	p0.saveUserLocked(p2);
	return;
}
-----
depth : 1
public void enforceSystem(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public boolean save(String p1, byte[] p2){
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v0 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p2);
	boolean v2 = p0.save(p1, v0);
	return v2;
}
-----
depth : 2
public boolean save(String p1, Consumer p2){
	File v1 = this.mService.getDumpPath();
	boolean v2 = v1.mkdirs();
	boolean v3 = v1.exists();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to create dump file: ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.w("ShortcutService", v8, caughtException);
	return 0;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void mergeRestoredFile(ShortcutUser p1){
	[I v0 = new [I(1);
	[I v0 = new [I(1);
	[I v0 = new [I(1);
	this.mLaunchers.clear();
	ShortcutUser$$ExternalSyntheticLambda3 v1 = new ShortcutUser$$ExternalSyntheticLambda3(p0,this.mService,v0);
	p1.forAllLaunchers(v1);
	ShortcutUser$$ExternalSyntheticLambda4 v3 = new ShortcutUser$$ExternalSyntheticLambda4(p0,this.mService,v0,v0);
	p1.forAllPackages(v3);
	this.mLaunchers.clear();
	this.mPackages.clear();
	this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Restored: L=");
	StringBuilder v10 = v7.append(v0[0]);
	StringBuilder v11 = v7.append(" P=");
	StringBuilder v12 = v7.append(v0[0]);
	StringBuilder v13 = v7.append(" S=");
	StringBuilder v14 = v7.append(v0[0]);
	String v15 = v7.toString();
	int v16 = Slog.i("ShortcutService", v15);
	return;
}
-----
depth : 2
public void forAllLaunchers(Consumer p1){
	int v1 = this.mLaunchers.size();
	return;
}
-----
depth : 2
public void forAllPackages(Consumer p1){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 1
public void rescanUpdatedPackagesLocked(int p1, long p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p1);
	long v2 = p0.injectCurrentTimeMillis();
	String v3 = p0.injectBuildFingerprint();
	String v4 = v1.getLastAppScanOsFingerprint();
	boolean v5 = v3.equals(v4);
	ShortcutService$$ExternalSyntheticLambda21 v5 = new ShortcutService$$ExternalSyntheticLambda21(p0,v1,p1);
	p0.forUpdatedPackages(p1, p2, (v5 ^ 1), v5);
	v1.setLastAppScanTime(v2);
	String v9 = p0.injectBuildFingerprint();
	v1.setLastAppScanOsFingerprint(v9);
	p0.scheduleSaveUser(p1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public String injectBuildFingerprint(){
	return Build.FINGERPRINT;
}
-----
depth : 2
public String getLastAppScanOsFingerprint(){
	return this.mLastAppScanOsFingerprint;
}
-----
depth : 2
public void forUpdatedPackages(int p1, long p2, boolean p3, Consumer p4){
	List v1 = p0.getInstalledPackages(p1);
	int v2 = v1.size();
	return;
}
-----
depth : 2
public void setLastAppScanTime(long p1){
	this.mLastAppScanTime = p1;
	return;
}
-----
depth : 2
public String injectBuildFingerprint(){
	return Build.FINGERPRINT;
}
-----
depth : 2
public void setLastAppScanOsFingerprint(String p1){
	this.mLastAppScanOsFingerprint = p1;
	return;
}
-----
depth : 2
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----
depth : 1
public void saveUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	File v2 = v1.getParentFile();
	boolean v3 = v2.mkdirs();
	AtomicFile v3 = new AtomicFile(v1);
	FileOutputStream v5 = v3.startWrite();
	p0.saveUserInternalLocked(p1, v5, 0);
	v3.finishWrite(v5);
	p0.cleanupDanglingBitmapDirectoriesLocked(p1);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Failed to write to file ");
	File v11 = v3.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.e("ShortcutService", v13, caughtException);
	v3.failWrite(phiInstruction);
	ShortcutUser v16 = p0.getUserShortcutsLocked(p1);
	v16.logSharingShortcutStats(this.mMetricsLogger);
	return;
}
-----
depth : 2
public File getUserFile(int p1){
	File v0 = new File(v1,"shortcuts.xml");
	File v1 = p0.injectUserDataPath(p1);
	return v0;
}
-----
depth : 2
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public void cleanupDanglingBitmapDirectoriesLocked(int p1){
	long v1 = p0.getStatStartTime();
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	File v3 = p0.getUserBitmapFilePath(p1);
	File v4 = v3.listFiles();
	p0.logDurationStat(5, v1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void logSharingShortcutStats(MetricsLogger p1){
	int v1 = this.mPackages.size();
	LogMaker v1 = new LogMaker(1717);
	LogMaker v3 = v1.setType(1);
	LogMaker v4 = v3.setSubtype(this.mUserId);
	p1.write(v4);
	LogMaker v6 = v1.setType(2);
	LogMaker v7 = v6.setSubtype(phiInstruction);
	p1.write(v7);
	LogMaker v9 = v1.setType(3);
	LogMaker v10 = v9.setSubtype(phiInstruction);
	p1.write(v10);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void applyRestore(byte[] p1, int p2){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p2);
	ShortcutService$$ExternalSyntheticLambda6 v2 = new ShortcutService$$ExternalSyntheticLambda6(p0);
	boolean v4 = this.mShortcutDumpFiles.save("restore-0-start.txt", v2);
	boolean v5 = this.mShortcutDumpFiles.save("restore-1-payload.xml", p1);
	ByteArrayInputStream v5 = new ByteArrayInputStream(p1);
	ShortcutUser v7 = p0.loadUserInternal(p2, v5, 1);
	ShortcutService$$ExternalSyntheticLambda7 v7 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v9 = this.mShortcutDumpFiles.save("restore-2.txt", v7);
	ShortcutUser v10 = p0.getUserShortcutsLocked(p2);
	v10.mergeRestoredFile(v7);
	ShortcutService$$ExternalSyntheticLambda7 v11 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v13 = this.mShortcutDumpFiles.save("restore-3.txt", v11);
	p0.rescanUpdatedPackagesLocked(p2, 0);
	ShortcutService$$ExternalSyntheticLambda7 v14 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v16 = this.mShortcutDumpFiles.save("restore-4.txt", v14);
	ShortcutService$$ExternalSyntheticLambda8 v16 = new ShortcutService$$ExternalSyntheticLambda8(p0);
	boolean v18 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v16);
	p0.saveUserLocked(p2);
	return;
}
-----
depth : 1
public void enforceSystem(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public boolean save(String p1, byte[] p2){
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v0 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p2);
	boolean v2 = p0.save(p1, v0);
	return v2;
}
-----
depth : 2
public boolean save(String p1, Consumer p2){
	File v1 = this.mService.getDumpPath();
	boolean v2 = v1.mkdirs();
	boolean v3 = v1.exists();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to create dump file: ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.w("ShortcutService", v8, caughtException);
	return 0;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	return 1;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void mergeRestoredFile(ShortcutUser p1){
	[I v0 = new [I(1);
	[I v0 = new [I(1);
	[I v0 = new [I(1);
	this.mLaunchers.clear();
	ShortcutUser$$ExternalSyntheticLambda3 v1 = new ShortcutUser$$ExternalSyntheticLambda3(p0,this.mService,v0);
	p1.forAllLaunchers(v1);
	ShortcutUser$$ExternalSyntheticLambda4 v3 = new ShortcutUser$$ExternalSyntheticLambda4(p0,this.mService,v0,v0);
	p1.forAllPackages(v3);
	this.mLaunchers.clear();
	this.mPackages.clear();
	this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Restored: L=");
	StringBuilder v10 = v7.append(v0[0]);
	StringBuilder v11 = v7.append(" P=");
	StringBuilder v12 = v7.append(v0[0]);
	StringBuilder v13 = v7.append(" S=");
	StringBuilder v14 = v7.append(v0[0]);
	String v15 = v7.toString();
	int v16 = Slog.i("ShortcutService", v15);
	return;
}
-----
depth : 2
public void forAllLaunchers(Consumer p1){
	int v1 = this.mLaunchers.size();
	return;
}
-----
depth : 2
public void forAllPackages(Consumer p1){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 1
public void rescanUpdatedPackagesLocked(int p1, long p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p1);
	long v2 = p0.injectCurrentTimeMillis();
	String v3 = p0.injectBuildFingerprint();
	String v4 = v1.getLastAppScanOsFingerprint();
	boolean v5 = v3.equals(v4);
	ShortcutService$$ExternalSyntheticLambda21 v5 = new ShortcutService$$ExternalSyntheticLambda21(p0,v1,p1);
	p0.forUpdatedPackages(p1, p2, (v5 ^ 1), v5);
	v1.setLastAppScanTime(v2);
	String v9 = p0.injectBuildFingerprint();
	v1.setLastAppScanOsFingerprint(v9);
	p0.scheduleSaveUser(p1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public String injectBuildFingerprint(){
	return Build.FINGERPRINT;
}
-----
depth : 2
public String getLastAppScanOsFingerprint(){
	return this.mLastAppScanOsFingerprint;
}
-----
depth : 2
public void forUpdatedPackages(int p1, long p2, boolean p3, Consumer p4){
	List v1 = p0.getInstalledPackages(p1);
	int v2 = v1.size();
	return;
}
-----
depth : 2
public void setLastAppScanTime(long p1){
	this.mLastAppScanTime = p1;
	return;
}
-----
depth : 2
public String injectBuildFingerprint(){
	return Build.FINGERPRINT;
}
-----
depth : 2
public void setLastAppScanOsFingerprint(String p1){
	this.mLastAppScanOsFingerprint = p1;
	return;
}
-----
depth : 2
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----
depth : 1
public void saveUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	File v2 = v1.getParentFile();
	boolean v3 = v2.mkdirs();
	AtomicFile v3 = new AtomicFile(v1);
	FileOutputStream v5 = v3.startWrite();
	p0.saveUserInternalLocked(p1, v5, 0);
	v3.finishWrite(v5);
	p0.cleanupDanglingBitmapDirectoriesLocked(p1);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Failed to write to file ");
	File v11 = v3.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.e("ShortcutService", v13, caughtException);
	v3.failWrite(phiInstruction);
	ShortcutUser v16 = p0.getUserShortcutsLocked(p1);
	v16.logSharingShortcutStats(this.mMetricsLogger);
	return;
}
-----
depth : 2
public File getUserFile(int p1){
	File v0 = new File(v1,"shortcuts.xml");
	File v1 = p0.injectUserDataPath(p1);
	return v0;
}
-----
depth : 2
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public void cleanupDanglingBitmapDirectoriesLocked(int p1){
	long v1 = p0.getStatStartTime();
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	File v3 = p0.getUserBitmapFilePath(p1);
	File v4 = v3.listFiles();
	p0.logDurationStat(5, v1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void logSharingShortcutStats(MetricsLogger p1){
	int v1 = this.mPackages.size();
	LogMaker v1 = new LogMaker(1717);
	LogMaker v3 = v1.setType(1);
	LogMaker v4 = v3.setSubtype(this.mUserId);
	p1.write(v4);
	LogMaker v6 = v1.setType(2);
	LogMaker v7 = v6.setSubtype(phiInstruction);
	p1.write(v7);
	LogMaker v9 = v1.setType(3);
	LogMaker v10 = v9.setSubtype(phiInstruction);
	p1.write(v10);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void applyRestore(byte[] p1, int p2){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p2);
	ShortcutService$$ExternalSyntheticLambda6 v2 = new ShortcutService$$ExternalSyntheticLambda6(p0);
	boolean v4 = this.mShortcutDumpFiles.save("restore-0-start.txt", v2);
	boolean v5 = this.mShortcutDumpFiles.save("restore-1-payload.xml", p1);
	ByteArrayInputStream v5 = new ByteArrayInputStream(p1);
	ShortcutUser v7 = p0.loadUserInternal(p2, v5, 1);
	ShortcutService$$ExternalSyntheticLambda7 v7 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v9 = this.mShortcutDumpFiles.save("restore-2.txt", v7);
	ShortcutUser v10 = p0.getUserShortcutsLocked(p2);
	v10.mergeRestoredFile(v7);
	ShortcutService$$ExternalSyntheticLambda7 v11 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v13 = this.mShortcutDumpFiles.save("restore-3.txt", v11);
	p0.rescanUpdatedPackagesLocked(p2, 0);
	ShortcutService$$ExternalSyntheticLambda7 v14 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v16 = this.mShortcutDumpFiles.save("restore-4.txt", v14);
	ShortcutService$$ExternalSyntheticLambda8 v16 = new ShortcutService$$ExternalSyntheticLambda8(p0);
	boolean v18 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v16);
	p0.saveUserLocked(p2);
	return;
}
-----
depth : 1
public void enforceSystem(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public boolean save(String p1, byte[] p2){
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v0 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p2);
	boolean v2 = p0.save(p1, v0);
	return v2;
}
-----
depth : 2
public boolean save(String p1, Consumer p2){
	File v1 = this.mService.getDumpPath();
	boolean v2 = v1.mkdirs();
	boolean v3 = v1.exists();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to create dump file: ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.w("ShortcutService", v8, caughtException);
	return 0;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void mergeRestoredFile(ShortcutUser p1){
	[I v0 = new [I(1);
	[I v0 = new [I(1);
	[I v0 = new [I(1);
	this.mLaunchers.clear();
	ShortcutUser$$ExternalSyntheticLambda3 v1 = new ShortcutUser$$ExternalSyntheticLambda3(p0,this.mService,v0);
	p1.forAllLaunchers(v1);
	ShortcutUser$$ExternalSyntheticLambda4 v3 = new ShortcutUser$$ExternalSyntheticLambda4(p0,this.mService,v0,v0);
	p1.forAllPackages(v3);
	this.mLaunchers.clear();
	this.mPackages.clear();
	this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Restored: L=");
	StringBuilder v10 = v7.append(v0[0]);
	StringBuilder v11 = v7.append(" P=");
	StringBuilder v12 = v7.append(v0[0]);
	StringBuilder v13 = v7.append(" S=");
	StringBuilder v14 = v7.append(v0[0]);
	String v15 = v7.toString();
	int v16 = Slog.i("ShortcutService", v15);
	return;
}
-----
depth : 2
public void forAllLaunchers(Consumer p1){
	int v1 = this.mLaunchers.size();
	return;
}
-----
depth : 2
public void forAllPackages(Consumer p1){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 1
public void rescanUpdatedPackagesLocked(int p1, long p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p1);
	long v2 = p0.injectCurrentTimeMillis();
	String v3 = p0.injectBuildFingerprint();
	String v4 = v1.getLastAppScanOsFingerprint();
	boolean v5 = v3.equals(v4);
	ShortcutService$$ExternalSyntheticLambda21 v5 = new ShortcutService$$ExternalSyntheticLambda21(p0,v1,p1);
	p0.forUpdatedPackages(p1, p2, (v5 ^ 1), v5);
	v1.setLastAppScanTime(v2);
	String v9 = p0.injectBuildFingerprint();
	v1.setLastAppScanOsFingerprint(v9);
	p0.scheduleSaveUser(p1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public String injectBuildFingerprint(){
	return Build.FINGERPRINT;
}
-----
depth : 2
public String getLastAppScanOsFingerprint(){
	return this.mLastAppScanOsFingerprint;
}
-----
depth : 2
public void forUpdatedPackages(int p1, long p2, boolean p3, Consumer p4){
	List v1 = p0.getInstalledPackages(p1);
	int v2 = v1.size();
	return;
}
-----
depth : 2
public void setLastAppScanTime(long p1){
	this.mLastAppScanTime = p1;
	return;
}
-----
depth : 2
public String injectBuildFingerprint(){
	return Build.FINGERPRINT;
}
-----
depth : 2
public void setLastAppScanOsFingerprint(String p1){
	this.mLastAppScanOsFingerprint = p1;
	return;
}
-----
depth : 2
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----
depth : 1
public void saveUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	File v2 = v1.getParentFile();
	boolean v3 = v2.mkdirs();
	AtomicFile v3 = new AtomicFile(v1);
	FileOutputStream v5 = v3.startWrite();
	p0.saveUserInternalLocked(p1, v5, 0);
	v3.finishWrite(v5);
	p0.cleanupDanglingBitmapDirectoriesLocked(p1);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Failed to write to file ");
	File v11 = v3.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.e("ShortcutService", v13, caughtException);
	v3.failWrite(phiInstruction);
	ShortcutUser v16 = p0.getUserShortcutsLocked(p1);
	v16.logSharingShortcutStats(this.mMetricsLogger);
	return;
}
-----
depth : 2
public File getUserFile(int p1){
	File v0 = new File(v1,"shortcuts.xml");
	File v1 = p0.injectUserDataPath(p1);
	return v0;
}
-----
depth : 2
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public void cleanupDanglingBitmapDirectoriesLocked(int p1){
	long v1 = p0.getStatStartTime();
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	File v3 = p0.getUserBitmapFilePath(p1);
	File v4 = v3.listFiles();
	p0.logDurationStat(5, v1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void logSharingShortcutStats(MetricsLogger p1){
	int v1 = this.mPackages.size();
	LogMaker v1 = new LogMaker(1717);
	LogMaker v3 = v1.setType(1);
	LogMaker v4 = v3.setSubtype(this.mUserId);
	p1.write(v4);
	LogMaker v6 = v1.setType(2);
	LogMaker v7 = v6.setSubtype(phiInstruction);
	p1.write(v7);
	LogMaker v9 = v1.setType(3);
	LogMaker v10 = v9.setSubtype(phiInstruction);
	p1.write(v10);
	return;
}
-----
