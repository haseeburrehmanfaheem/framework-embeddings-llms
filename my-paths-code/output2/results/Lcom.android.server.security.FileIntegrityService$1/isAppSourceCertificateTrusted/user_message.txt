This is path 1 for the API with depth 2:
depth : 0
public boolean isAppSourceCertificateTrusted(byte[] p1, String p2){
	p0.checkCallerPermission(p2);
	boolean v2 = VerityUtils.isFsVeritySupported();
	Collection v3 = FileIntegrityService.-$$Nest$fgetmTrustedCertificates(this.this$0);
	X509Certificate v4 = FileIntegrityService.-$$Nest$smtoCertificate(p1);
	boolean v5 = v3.contains(v4);
	return v5;
}
-----
depth : 1
public void checkCallerPermission(String p1){
	Context v7 = this.this$0.getContext();
	Object v8 = v7.getSystemService(AppOpsManage.class);
	int v9 = v8.checkOpNoThrow(66, v1, p1);
	return;
}
-----
depth : 1
public boolean isFsVeritySupported(){
	int v1 = SystemProperties.getInt("ro.apk_verity.mode", 0);
	return phiInstruction;
}
-----
depth : 1
public Collection -$$Nest$fgetmTrustedCertificates(FileIntegrityService p1){
	return this.mTrustedCertificates;
}
-----
depth : 1
public X509Certificate -$$Nest$smtoCertificate(byte[] p1){
	X509Certificate v1 = FileIntegrityService.toCertificate(p1);
	return v1;
}
-----
depth : 2
public X509Certificate toCertificate(byte[] p1){
	ByteArrayInputStream v0 = new ByteArrayInputStream(p1);
	Certificate v2 = this.sCertFactory.generateCertificate(v0);
	return v2;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean isAppSourceCertificateTrusted(byte[] p1, String p2){
	p0.checkCallerPermission(p2);
	boolean v2 = VerityUtils.isFsVeritySupported();
	Collection v3 = FileIntegrityService.-$$Nest$fgetmTrustedCertificates(this.this$0);
	X509Certificate v4 = FileIntegrityService.-$$Nest$smtoCertificate(p1);
	boolean v5 = v3.contains(v4);
	return v5;
}
-----
depth : 1
public void checkCallerPermission(String p1){
	Context v7 = this.this$0.getContext();
	Object v8 = v7.getSystemService(AppOpsManage.class);
	int v9 = v8.checkOpNoThrow(66, v1, p1);
	return;
}
-----
depth : 1
public boolean isFsVeritySupported(){
	return phiInstruction;
}
-----
depth : 1
public Collection -$$Nest$fgetmTrustedCertificates(FileIntegrityService p1){
	return this.mTrustedCertificates;
}
-----
depth : 1
public X509Certificate -$$Nest$smtoCertificate(byte[] p1){
	X509Certificate v1 = FileIntegrityService.toCertificate(p1);
	return v1;
}
-----
depth : 2
public X509Certificate toCertificate(byte[] p1){
	ByteArrayInputStream v0 = new ByteArrayInputStream(p1);
	Certificate v2 = this.sCertFactory.generateCertificate(v0);
	return v2;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean isAppSourceCertificateTrusted(byte[] p1, String p2){
	p0.checkCallerPermission(p2);
	boolean v2 = VerityUtils.isFsVeritySupported();
	Collection v3 = FileIntegrityService.-$$Nest$fgetmTrustedCertificates(this.this$0);
	X509Certificate v4 = FileIntegrityService.-$$Nest$smtoCertificate(p1);
	boolean v5 = v3.contains(v4);
	return v5;
}
-----
depth : 1
public void checkCallerPermission(String p1){
	return;
}
-----
depth : 1
public boolean isFsVeritySupported(){
	int v1 = SystemProperties.getInt("ro.apk_verity.mode", 0);
	return phiInstruction;
}
-----
depth : 1
public Collection -$$Nest$fgetmTrustedCertificates(FileIntegrityService p1){
	return this.mTrustedCertificates;
}
-----
depth : 1
public X509Certificate -$$Nest$smtoCertificate(byte[] p1){
	X509Certificate v1 = FileIntegrityService.toCertificate(p1);
	return v1;
}
-----
depth : 2
public X509Certificate toCertificate(byte[] p1){
	ByteArrayInputStream v0 = new ByteArrayInputStream(p1);
	Certificate v2 = this.sCertFactory.generateCertificate(v0);
	return v2;
}
-----
