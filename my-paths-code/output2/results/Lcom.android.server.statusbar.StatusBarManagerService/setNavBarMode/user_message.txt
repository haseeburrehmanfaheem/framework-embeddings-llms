This is path 1 for the API with depth 2:
depth : 0
public void setNavBarMode(int p1){
	p0.enforceStatusBar();
	long v2 = Binder.clearCallingIdentity();
	ContentResolver v3 = this.mContext.getContentResolver();
	boolean v4 = Settings$Secure.putIntForUser(v3, "nav_bar_kids_mode", p1, this.mCurrentUserId);
	ContentResolver v5 = this.mContext.getContentResolver();
	boolean v6 = Settings$Secure.putIntForUser(v5, "nav_bar_force_visible", p1, this.mCurrentUserId);
	IOverlayManager v7 = p0.getOverlayManager();
	boolean v8 = p0.isPackageSupported("com.android.internal.systemui.navbar.threebutton");
	boolean v9 = v7.setEnabledExclusiveInCategory("com.android.internal.systemui.navbar.threebutton", this.mCurrentUserId);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceStatusBar(){
	return;
}
-----
depth : 1
public IOverlayManager getOverlayManager(){
	IBinder v1 = ServiceManager.getService("overlay");
	IOverlayManager v2 = IOverlayManager$Stub.asInterface(v1);
	this.mOverlayManager = v2;
	int v3 = Slog.w("StatusBarManager", "warning: no OVERLAY_SERVICE");
	return this.mOverlayManager;
}
-----
depth : 1
public boolean isPackageSupported(String p1){
	PackageManager v1 = this.mContext.getPackageManager();
	PackageManager$PackageInfoFlags v2 = PackageManager$PackageInfoFlags.of(0);
	PackageInfo v3 = v1.getPackageInfo(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public PackageManager$PackageInfoFlags of(long p1){
	PackageManager$PackageInfoFlags v0 = new PackageManager$PackageInfoFlags(p1);
	return v0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setNavBarMode(int p1){
	p0.enforceStatusBar();
	long v2 = Binder.clearCallingIdentity();
	ContentResolver v3 = this.mContext.getContentResolver();
	boolean v4 = Settings$Secure.putIntForUser(v3, "nav_bar_kids_mode", p1, this.mCurrentUserId);
	ContentResolver v5 = this.mContext.getContentResolver();
	boolean v6 = Settings$Secure.putIntForUser(v5, "nav_bar_force_visible", p1, this.mCurrentUserId);
	IOverlayManager v7 = p0.getOverlayManager();
	boolean v8 = p0.isPackageSupported("com.android.internal.systemui.navbar.threebutton");
	boolean v9 = v7.setEnabledExclusiveInCategory("com.android.internal.systemui.navbar.threebutton", this.mCurrentUserId);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceStatusBar(){
	return;
}
-----
depth : 1
public IOverlayManager getOverlayManager(){
	IBinder v1 = ServiceManager.getService("overlay");
	IOverlayManager v2 = IOverlayManager$Stub.asInterface(v1);
	this.mOverlayManager = v2;
	int v3 = Slog.w("StatusBarManager", "warning: no OVERLAY_SERVICE");
	return this.mOverlayManager;
}
-----
depth : 1
public boolean isPackageSupported(String p1){
	PackageManager v1 = this.mContext.getPackageManager();
	PackageManager$PackageInfoFlags v2 = PackageManager$PackageInfoFlags.of(0);
	PackageInfo v3 = v1.getPackageInfo(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public PackageManager$PackageInfoFlags of(long p1){
	PackageManager$PackageInfoFlags v0 = new PackageManager$PackageInfoFlags(p1);
	return v0;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setNavBarMode(int p1){
	p0.enforceStatusBar();
	long v2 = Binder.clearCallingIdentity();
	ContentResolver v3 = this.mContext.getContentResolver();
	boolean v4 = Settings$Secure.putIntForUser(v3, "nav_bar_kids_mode", p1, this.mCurrentUserId);
	ContentResolver v5 = this.mContext.getContentResolver();
	boolean v6 = Settings$Secure.putIntForUser(v5, "nav_bar_force_visible", p1, this.mCurrentUserId);
	IOverlayManager v7 = p0.getOverlayManager();
	boolean v8 = p0.isPackageSupported("com.android.internal.systemui.navbar.threebutton");
	boolean v9 = v7.setEnabledExclusiveInCategory("com.android.internal.systemui.navbar.threebutton", this.mCurrentUserId);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceStatusBar(){
	return;
}
-----
depth : 1
public IOverlayManager getOverlayManager(){
	IBinder v1 = ServiceManager.getService("overlay");
	IOverlayManager v2 = IOverlayManager$Stub.asInterface(v1);
	this.mOverlayManager = v2;
	return this.mOverlayManager;
}
-----
depth : 1
public boolean isPackageSupported(String p1){
	PackageManager v1 = this.mContext.getPackageManager();
	PackageManager$PackageInfoFlags v2 = PackageManager$PackageInfoFlags.of(0);
	PackageInfo v3 = v1.getPackageInfo(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public PackageManager$PackageInfoFlags of(long p1){
	PackageManager$PackageInfoFlags v0 = new PackageManager$PackageInfoFlags(p1);
	return v0;
}
-----
