This is path 1 for the API with depth 2:
depth : 0
public ParceledListSlice getCurrentRules(){
	List v1 = Collections.emptyList();
	List v2 = this.mIntegrityFileManager.readRules(0);
	int v3 = Slog.e("AppIntegrityManagerServiceImpl", "Error getting current rules", caughtException);
	ParceledListSlice v3 = new ParceledListSlice(phiInstruction);
	return v3;
}
-----
depth : 1
public List readRules(AppInstallMetadata p1){
	List v1 = Collections.emptyList();
	List v2 = this.mRuleIndexingController.identifyRulesToEvaluate(p1);
	int v3 = Slog.w("IntegrityFileManager", "Error identifying the rule indexes. Trying unindexed.", caughtException);
	File v3 = new File(this.mRulesDir,"rules");
	RandomAccessObject v5 = RandomAccessObject.ofFile(v3);
	List v6 = this.mRuleParser.parse(v5, phiInstruction);
	return v6;
}
-----
depth : 2
public List identifyRulesToEvaluate(AppInstallMetadata p1){
	ArrayList v0 = new ArrayList();
	String v2 = p1.getPackageName();
	RuleIndexRange v3 = RuleIndexingController.searchIndexingKeysRangeContainingKey(this.sPackageNameBasedIndexes, v2);
	boolean v4 = v0.add(v3);
	List v5 = p1.getAppCertificates();
	Iterator v6 = v5.iterator();
	boolean v7 = v6.hasNext();
	RuleIndexRange v7 = new RuleIndexRange(v9,v11);
	Object v8 = this.sUnindexedRuleIndexes.get("START_KEY");
	int v9 = v8.intValue();
	Object v10 = this.sUnindexedRuleIndexes.get("END_KEY");
	int v11 = v10.intValue();
	boolean v13 = v0.add(v7);
	return v0;
}
-----
depth : 2
public RandomAccessObject ofFile(File p1){
	RandomAccessObject$RandomAccessFileObject v0 = new RandomAccessObject$RandomAccessFileObject(p1);
	return v0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public ParceledListSlice getCurrentRules(){
	List v1 = Collections.emptyList();
	List v2 = this.mIntegrityFileManager.readRules(0);
	int v3 = Slog.e("AppIntegrityManagerServiceImpl", "Error getting current rules", caughtException);
	ParceledListSlice v3 = new ParceledListSlice(phiInstruction);
	return v3;
}
-----
depth : 1
public List readRules(AppInstallMetadata p1){
	List v1 = Collections.emptyList();
	List v2 = this.mRuleIndexingController.identifyRulesToEvaluate(p1);
	File v2 = new File(this.mRulesDir,"rules");
	RandomAccessObject v4 = RandomAccessObject.ofFile(v2);
	List v5 = this.mRuleParser.parse(v4, phiInstruction);
	return v5;
}
-----
depth : 2
public List identifyRulesToEvaluate(AppInstallMetadata p1){
	ArrayList v0 = new ArrayList();
	String v2 = p1.getPackageName();
	RuleIndexRange v3 = RuleIndexingController.searchIndexingKeysRangeContainingKey(this.sPackageNameBasedIndexes, v2);
	boolean v4 = v0.add(v3);
	List v5 = p1.getAppCertificates();
	Iterator v6 = v5.iterator();
	boolean v7 = v6.hasNext();
	RuleIndexRange v7 = new RuleIndexRange(v9,v11);
	Object v8 = this.sUnindexedRuleIndexes.get("START_KEY");
	int v9 = v8.intValue();
	Object v10 = this.sUnindexedRuleIndexes.get("END_KEY");
	int v11 = v10.intValue();
	boolean v13 = v0.add(v7);
	return v0;
}
-----
depth : 2
public RandomAccessObject ofFile(File p1){
	RandomAccessObject$RandomAccessFileObject v0 = new RandomAccessObject$RandomAccessFileObject(p1);
	return v0;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public ParceledListSlice getCurrentRules(){
	List v1 = Collections.emptyList();
	List v2 = this.mIntegrityFileManager.readRules(0);
	ParceledListSlice v2 = new ParceledListSlice(phiInstruction);
	return v2;
}
-----
depth : 1
public List readRules(AppInstallMetadata p1){
	List v1 = Collections.emptyList();
	List v2 = this.mRuleIndexingController.identifyRulesToEvaluate(p1);
	int v3 = Slog.w("IntegrityFileManager", "Error identifying the rule indexes. Trying unindexed.", caughtException);
	File v3 = new File(this.mRulesDir,"rules");
	RandomAccessObject v5 = RandomAccessObject.ofFile(v3);
	List v6 = this.mRuleParser.parse(v5, phiInstruction);
	return v6;
}
-----
depth : 2
public List identifyRulesToEvaluate(AppInstallMetadata p1){
	ArrayList v0 = new ArrayList();
	String v2 = p1.getPackageName();
	RuleIndexRange v3 = RuleIndexingController.searchIndexingKeysRangeContainingKey(this.sPackageNameBasedIndexes, v2);
	boolean v4 = v0.add(v3);
	List v5 = p1.getAppCertificates();
	Iterator v6 = v5.iterator();
	boolean v7 = v6.hasNext();
	RuleIndexRange v7 = new RuleIndexRange(v9,v11);
	Object v8 = this.sUnindexedRuleIndexes.get("START_KEY");
	int v9 = v8.intValue();
	Object v10 = this.sUnindexedRuleIndexes.get("END_KEY");
	int v11 = v10.intValue();
	boolean v13 = v0.add(v7);
	return v0;
}
-----
depth : 2
public RandomAccessObject ofFile(File p1){
	RandomAccessObject$RandomAccessFileObject v0 = new RandomAccessObject$RandomAccessFileObject(p1);
	return v0;
}
-----
