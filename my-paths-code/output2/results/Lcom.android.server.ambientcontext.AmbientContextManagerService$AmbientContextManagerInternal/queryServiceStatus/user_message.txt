This is path 1 for the API with depth 2:
depth : 0
public void queryServiceStatus([I p1, String p2, RemoteCallback p3){
	AmbientContextManagerService.access$300(this.this$0, p2);
	this.mService.onQueryServiceStatus(p1, p2, p3);
	return;
}
-----
depth : 1
public void access$300(AmbientContextManagerService p1, String p2){
	p1.assertCalledByPackageOwner(p2);
	return;
}
-----
depth : 1
public void onQueryServiceStatus([I p1, String p2, RemoteCallback p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Query event status of ");
	String v3 = Arrays.toString(p1);
	StringBuilder v4 = v0.append(v3);
	StringBuilder v5 = v0.append(" for ");
	StringBuilder v6 = v0.append(p2);
	String v7 = v0.toString();
	int v8 = Slog.d(this.TAG, v7);
	boolean v9 = p0.setUpServiceIfNeeded();
	p0.ensureRemoteServiceInitiated();
	AmbientContextManagerPerUserService$$ExternalSyntheticLambda0 v10 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda0(p3);
	RemoteCallback v12 = p0.getServerStatusCallback(v10);
	this.mRemoteService.queryServiceStatus(p1, p2, v12);
	return;
}
-----
depth : 2
public boolean setUpServiceIfNeeded(){
	ComponentName v1 = p0.updateServiceInfoLocked();
	this.mComponentName = v1;
	IPackageManager v2 = AppGlobals.getPackageManager();
	ServiceInfo v3 = v2.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId);
	int v4 = Slog.w(this.TAG, "RemoteException while setting up service");
	return 0;
}
-----
depth : 2
public void ensureRemoteServiceInitiated(){
	RemoteAmbientContextDetectionService v0 = new RemoteAmbientContextDetectionService(v1,this.mComponentName,v2);
	Context v1 = p0.getContext();
	int v2 = p0.getUserId();
	this.mRemoteService = v0;
	return;
}
-----
depth : 2
public RemoteCallback getServerStatusCallback(Consumer p1){
	RemoteCallback v0 = new RemoteCallback(v0);
	AmbientContextManagerPerUserService$$ExternalSyntheticLambda2 v0 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda2(p1);
	return v0;
}
-----
depth : 2
public void queryServiceStatus([I p1, String p2, RemoteCallback p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Query status for ");
	StringBuilder v3 = v0.append(p2);
	String v4 = v0.toString();
	int v5 = Slog.i(this.TAG, v4);
	RemoteAmbientContextDetectionService$$ExternalSyntheticLambda3 v5 = new RemoteAmbientContextDetectionService$$ExternalSyntheticLambda3(p1,p2,p3);
	AndroidFuture v7 = p0.post(v5);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void queryServiceStatus([I p1, String p2, RemoteCallback p3){
	AmbientContextManagerService.access$300(this.this$0, p2);
	this.mService.onQueryServiceStatus(p1, p2, p3);
	return;
}
-----
depth : 1
public void access$300(AmbientContextManagerService p1, String p2){
	p1.assertCalledByPackageOwner(p2);
	return;
}
-----
depth : 1
public void onQueryServiceStatus([I p1, String p2, RemoteCallback p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Query event status of ");
	String v3 = Arrays.toString(p1);
	StringBuilder v4 = v0.append(v3);
	StringBuilder v5 = v0.append(" for ");
	StringBuilder v6 = v0.append(p2);
	String v7 = v0.toString();
	int v8 = Slog.d(this.TAG, v7);
	boolean v9 = p0.setUpServiceIfNeeded();
	p0.ensureRemoteServiceInitiated();
	AmbientContextManagerPerUserService$$ExternalSyntheticLambda0 v10 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda0(p3);
	RemoteCallback v12 = p0.getServerStatusCallback(v10);
	this.mRemoteService.queryServiceStatus(p1, p2, v12);
	return;
}
-----
depth : 2
public boolean setUpServiceIfNeeded(){
	ComponentName v1 = p0.updateServiceInfoLocked();
	this.mComponentName = v1;
	IPackageManager v2 = AppGlobals.getPackageManager();
	ServiceInfo v3 = v2.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId);
	return phiInstruction;
}
-----
depth : 2
public void ensureRemoteServiceInitiated(){
	RemoteAmbientContextDetectionService v0 = new RemoteAmbientContextDetectionService(v1,this.mComponentName,v2);
	Context v1 = p0.getContext();
	int v2 = p0.getUserId();
	this.mRemoteService = v0;
	return;
}
-----
depth : 2
public RemoteCallback getServerStatusCallback(Consumer p1){
	RemoteCallback v0 = new RemoteCallback(v0);
	AmbientContextManagerPerUserService$$ExternalSyntheticLambda2 v0 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda2(p1);
	return v0;
}
-----
depth : 2
public void queryServiceStatus([I p1, String p2, RemoteCallback p3){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Query status for ");
	StringBuilder v3 = v0.append(p2);
	String v4 = v0.toString();
	int v5 = Slog.i(this.TAG, v4);
	RemoteAmbientContextDetectionService$$ExternalSyntheticLambda3 v5 = new RemoteAmbientContextDetectionService$$ExternalSyntheticLambda3(p1,p2,p3);
	AndroidFuture v7 = p0.post(v5);
	return;
}
-----
