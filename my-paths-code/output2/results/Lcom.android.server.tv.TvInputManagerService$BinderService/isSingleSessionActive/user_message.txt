This is path 1 for the API with depth 2:
depth : 0
public boolean isSingleSessionActive(int p1){
	p0.ensureCaptureTvInputPermission();
	long v2 = Binder.clearCallingIdentity();
	int v3 = Binder.getCallingUid();
	int v4 = Binder.getCallingPid();
	int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, "isSingleSessionActive");
	Object v6 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5);
	Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	int v9 = v8.size();
	Map v10 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	int v11 = v10.size();
	Map v12 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	Collection v13 = v12.values();
	TvInputManagerService$SessionState v13 = new TvInputManagerService$SessionState(2);
	Object v14 = v13.toArray(v13);
	IBinder v15 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v14[0]);
	IBinder v16 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v14[1]);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void ensureCaptureTvInputPermission(){
	return;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0);
	this.mUserStates.put(p1, v1);
	return phiInstruction;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean isSingleSessionActive(int p1){
	p0.ensureCaptureTvInputPermission();
	long v2 = Binder.clearCallingIdentity();
	int v3 = Binder.getCallingUid();
	int v4 = Binder.getCallingPid();
	int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, "isSingleSessionActive");
	Object v6 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5);
	Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	int v9 = v8.size();
	Map v10 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	int v11 = v10.size();
	Map v12 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	Collection v13 = v12.values();
	TvInputManagerService$SessionState v13 = new TvInputManagerService$SessionState(2);
	Object v14 = v13.toArray(v13);
	IBinder v15 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v14[0]);
	IBinder v16 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v14[1]);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void ensureCaptureTvInputPermission(){
	return;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0);
	this.mUserStates.put(p1, v1);
	return phiInstruction;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean isSingleSessionActive(int p1){
	p0.ensureCaptureTvInputPermission();
	long v2 = Binder.clearCallingIdentity();
	int v3 = Binder.getCallingUid();
	int v4 = Binder.getCallingPid();
	int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, "isSingleSessionActive");
	Object v6 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5);
	Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	int v9 = v8.size();
	Map v10 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	int v11 = v10.size();
	Map v12 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);
	Collection v13 = v12.values();
	TvInputManagerService$SessionState v13 = new TvInputManagerService$SessionState(2);
	Object v14 = v13.toArray(v13);
	IBinder v15 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v14[0]);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void ensureCaptureTvInputPermission(){
	return;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0);
	this.mUserStates.put(p1, v1);
	return phiInstruction;
}
-----
