This is path 1 for the API with depth 2:
depth : 0
public void clearVcnConfig(ParcelUuid p1, String p2){
	p0.enforceCarrierPrivilegeOrProvisioningPackage(p1, p2);
	VcnManagementService$$ExternalSyntheticLambda5 v11 = new VcnManagementService$$ExternalSyntheticLambda5(p0,p1);
	Binder.withCleanCallingIdentity(v11);
	return;
}
-----
depth : 1
public void enforceCarrierPrivilegeOrProvisioningPackage(ParcelUuid p1, String p2){
	p0.enforcePrimaryUser();
	boolean v2 = p0.isProvisioningPackageForConfig(p1, p2);
	p0.enforceCallingUserAndCarrierPrivilege(p1, p2);
	return;
}
-----
depth : 2
public void enforcePrimaryUser(){
	int v1 = this.mDeps.getBinderCallingUid();
	UserHandle v2 = UserHandle.getUserHandleForUid(v1);
	boolean v3 = v2.isSystem();
	return;
}
-----
depth : 2
public boolean isProvisioningPackageForConfig(ParcelUuid p1, String p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mConfigs.get(p1);
	String v3 = v2.getProvisioningPackageName();
	boolean v4 = p2.equals(v3);
	Binder.restoreCallingIdentity(v1);
	return 1;
}
-----
depth : 2
public void enforceCallingUserAndCarrierPrivilege(ParcelUuid p1, String p2){
	p0.enforcePrimaryUser();
	Object v2 = this.mContext.getSystemService(SubscriptionManage.class);
	ArrayList v2 = new ArrayList();
	VcnManagementService$$ExternalSyntheticLambda11 v3 = new VcnManagementService$$ExternalSyntheticLambda11(v2,v2,p1);
	Binder.withCleanCallingIdentity(v3);
	Iterator v6 = v2.iterator();
	boolean v7 = v6.hasNext();
	Object v8 = v6.next();
	Object v9 = this.mContext.getSystemService(TelephonyManage.class);
	int v10 = v8.getSubscriptionId();
	TelephonyManager v11 = v9.createForSubscriptionId(v10);
	int v12 = v8.getSimSlotIndex();
	boolean v13 = SubscriptionManager.isValidSlotIndex(v12);
	int v14 = v11.checkCarrierPrivilegesForPackage(p2);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void clearVcnConfig(ParcelUuid p1, String p2){
	p0.enforceCarrierPrivilegeOrProvisioningPackage(p1, p2);
	VcnManagementService$$ExternalSyntheticLambda5 v11 = new VcnManagementService$$ExternalSyntheticLambda5(p0,p1);
	Binder.withCleanCallingIdentity(v11);
	return;
}
-----
depth : 1
public void enforceCarrierPrivilegeOrProvisioningPackage(ParcelUuid p1, String p2){
	p0.enforcePrimaryUser();
	boolean v2 = p0.isProvisioningPackageForConfig(p1, p2);
	p0.enforceCallingUserAndCarrierPrivilege(p1, p2);
	return;
}
-----
depth : 2
public void enforcePrimaryUser(){
	int v1 = this.mDeps.getBinderCallingUid();
	UserHandle v2 = UserHandle.getUserHandleForUid(v1);
	boolean v3 = v2.isSystem();
	return;
}
-----
depth : 2
public boolean isProvisioningPackageForConfig(ParcelUuid p1, String p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mConfigs.get(p1);
	String v3 = v2.getProvisioningPackageName();
	boolean v4 = p2.equals(v3);
	Binder.restoreCallingIdentity(v1);
	return 0;
}
-----
depth : 2
public void enforceCallingUserAndCarrierPrivilege(ParcelUuid p1, String p2){
	p0.enforcePrimaryUser();
	Object v2 = this.mContext.getSystemService(SubscriptionManage.class);
	ArrayList v2 = new ArrayList();
	VcnManagementService$$ExternalSyntheticLambda11 v3 = new VcnManagementService$$ExternalSyntheticLambda11(v2,v2,p1);
	Binder.withCleanCallingIdentity(v3);
	Iterator v6 = v2.iterator();
	boolean v7 = v6.hasNext();
	Object v8 = v6.next();
	Object v9 = this.mContext.getSystemService(TelephonyManage.class);
	int v10 = v8.getSubscriptionId();
	TelephonyManager v11 = v9.createForSubscriptionId(v10);
	int v12 = v8.getSimSlotIndex();
	boolean v13 = SubscriptionManager.isValidSlotIndex(v12);
	int v14 = v11.checkCarrierPrivilegesForPackage(p2);
	return;
}
-----
