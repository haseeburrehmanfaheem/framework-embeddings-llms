This is path 1 for the API with depth 2:
depth : 0
public void registerVcnStatusCallback(ParcelUuid p1, IVcnStatusCallback p2, String p3){
	IBinder v8 = p2.asBinder();
	VcnManagementService$VcnStatusCallbackInfo v8 = new VcnManagementService$VcnStatusCallbackInfo(p0,p1,p2,p3,v1,0);
	v8.linkToDeath(v8, 0);
	boolean v11 = this.mRegisteredStatusCallbacks.containsKey(v8);
	Object v12 = this.mRegisteredStatusCallbacks.put(v8, v8);
	Object v13 = this.mConfigs.get(p1);
	Object v14 = this.mVcns.get(p1);
	boolean v15 = p0.isCallbackPermissioned(v8, p1);
	VcnManagementService$VcnStatusCallbackInfo.mCallback.onVcnStatusChanged(phiInstruction);
	p0.logDbg("VcnStatusCallback threw on VCN status change", caughtException);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public boolean isCallbackPermissioned(VcnManagementService$VcnStatusCallbackInfo p1, ParcelUuid p2){
	boolean v1 = p2.equals(VcnManagementService$VcnStatusCallbackInfo.mSubGroup);
	boolean v2 = this.mLastSnapshot.packageHasPermissionsForSubscriptionGroup(p2, VcnManagementService$VcnStatusCallbackInfo.mPkgName);
	return 0;
}
-----
depth : 2
public boolean packageHasPermissionsForSubscriptionGroup(ParcelUuid p1, String p2){
	Object v1 = this.mPrivilegedPackages.get(p1);
	boolean v2 = v1.contains(p2);
	return phiInstruction;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void registerVcnStatusCallback(ParcelUuid p1, IVcnStatusCallback p2, String p3){
	IBinder v8 = p2.asBinder();
	VcnManagementService$VcnStatusCallbackInfo v8 = new VcnManagementService$VcnStatusCallbackInfo(p0,p1,p2,p3,v1,0);
	v8.linkToDeath(v8, 0);
	boolean v11 = this.mRegisteredStatusCallbacks.containsKey(v8);
	Object v12 = this.mRegisteredStatusCallbacks.put(v8, v8);
	Object v13 = this.mConfigs.get(p1);
	Object v14 = this.mVcns.get(p1);
	boolean v15 = p0.isCallbackPermissioned(v8, p1);
	VcnManagementService$VcnStatusCallbackInfo.mCallback.onVcnStatusChanged(phiInstruction);
	p0.logDbg("VcnStatusCallback threw on VCN status change", caughtException);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public boolean isCallbackPermissioned(VcnManagementService$VcnStatusCallbackInfo p1, ParcelUuid p2){
	boolean v1 = p2.equals(VcnManagementService$VcnStatusCallbackInfo.mSubGroup);
	boolean v2 = this.mLastSnapshot.packageHasPermissionsForSubscriptionGroup(p2, VcnManagementService$VcnStatusCallbackInfo.mPkgName);
	return 1;
}
-----
depth : 2
public boolean packageHasPermissionsForSubscriptionGroup(ParcelUuid p1, String p2){
	Object v1 = this.mPrivilegedPackages.get(p1);
	boolean v2 = v1.contains(p2);
	return phiInstruction;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void registerVcnStatusCallback(ParcelUuid p1, IVcnStatusCallback p2, String p3){
	IBinder v8 = p2.asBinder();
	VcnManagementService$VcnStatusCallbackInfo v8 = new VcnManagementService$VcnStatusCallbackInfo(p0,p1,p2,p3,v1,0);
	v8.linkToDeath(v8, 0);
	boolean v11 = this.mRegisteredStatusCallbacks.containsKey(v8);
	Object v12 = this.mRegisteredStatusCallbacks.put(v8, v8);
	Object v13 = this.mConfigs.get(p1);
	Object v14 = this.mVcns.get(p1);
	boolean v15 = p0.isCallbackPermissioned(v8, p1);
	VcnManagementService$VcnStatusCallbackInfo.mCallback.onVcnStatusChanged(phiInstruction);
	p0.logDbg("VcnStatusCallback threw on VCN status change", caughtException);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public boolean isCallbackPermissioned(VcnManagementService$VcnStatusCallbackInfo p1, ParcelUuid p2){
	boolean v1 = p2.equals(VcnManagementService$VcnStatusCallbackInfo.mSubGroup);
	boolean v2 = this.mLastSnapshot.packageHasPermissionsForSubscriptionGroup(p2, VcnManagementService$VcnStatusCallbackInfo.mPkgName);
	return 0;
}
-----
depth : 2
public boolean packageHasPermissionsForSubscriptionGroup(ParcelUuid p1, String p2){
	Object v1 = this.mPrivilegedPackages.get(p1);
	boolean v2 = v1.contains(p2);
	return phiInstruction;
}
-----
