This is path 1 for the API with depth 2:
depth : 0
public boolean hasEnrolledFaces(int p1, int p2, String p3){
	ServiceProvider v6 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append("Null provider for hasEnrolledFaces, caller: ");
	StringBuilder v9 = v6.append(p3);
	String v10 = v6.toString();
	int v11 = Slog.w("FaceService", v10);
	return 0;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	Object v3 = v1.next();
	boolean v4 = v3.containsSensor(p1);
	return v3;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean hasEnrolledFaces(int p1, int p2, String p3){
	ServiceProvider v6 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
	List v7 = v6.getEnrolledFaces(p1, p2);
	int v8 = v7.size();
	return phiInstruction;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	Object v3 = v1.next();
	boolean v4 = v3.containsSensor(p1);
	return v3;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean hasEnrolledFaces(int p1, int p2, String p3){
	ServiceProvider v4 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Null provider for hasEnrolledFaces, caller: ");
	StringBuilder v7 = v4.append(p3);
	String v8 = v4.toString();
	int v9 = Slog.w("FaceService", v8);
	return 0;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	Object v3 = v1.next();
	boolean v4 = v3.containsSensor(p1);
	return v3;
}
-----
