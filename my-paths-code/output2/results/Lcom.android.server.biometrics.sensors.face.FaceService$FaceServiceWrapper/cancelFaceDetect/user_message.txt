This is path 1 for the API with depth 2:
depth : 0
public void cancelFaceDetect(IBinder p1, String p2, long p3){
	Context v3 = this.this$0.getContext();
	boolean v4 = Utils.isKeyguard(v3, p2);
	Pair v5 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);
	int v6 = Pair.first.intValue();
	Pair.second.cancelFaceDetect(v6, p1, p3);
	return;
}
-----
depth : 1
public boolean isKeyguard(Context p1, String p2){
	boolean v1 = Utils.hasInternalPermission(p1);
	Resources v2 = p1.getResources();
	String v3 = v2.getString(17039993);
	ComponentName v4 = ComponentName.unflattenFromString(v3);
	String v5 = v4.getPackageName();
	boolean v6 = phiInstruction.equals(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasInternalPermission(Context p1){
	return phiInstruction;
}
-----
depth : 1
public Pair -$$Nest$mgetSingleProvider(FaceService p1){
	Pair v1 = p1.getSingleProvider();
	return v1;
}
-----
depth : 2
public Pair getSingleProvider(){
	List v1 = p0.getSensorProperties();
	int v2 = v1.size();
	Object v3 = v1.get(0);
	Iterator v4 = this.mServiceProviders.iterator();
	boolean v5 = v4.hasNext();
	Object v6 = v4.next();
	boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId);
	Pair v7 = new Pair(v8,v6);
	Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
	return v7;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void cancelFaceDetect(IBinder p1, String p2, long p3){
	Context v3 = this.this$0.getContext();
	boolean v4 = Utils.isKeyguard(v3, p2);
	Pair v5 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);
	int v6 = Pair.first.intValue();
	Pair.second.cancelFaceDetect(v6, p1, p3);
	return;
}
-----
depth : 1
public boolean isKeyguard(Context p1, String p2){
	boolean v1 = Utils.hasInternalPermission(p1);
	Resources v2 = p1.getResources();
	String v3 = v2.getString(17039993);
	ComponentName v4 = ComponentName.unflattenFromString(v3);
	String v5 = v4.getPackageName();
	boolean v6 = phiInstruction.equals(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasInternalPermission(Context p1){
	return phiInstruction;
}
-----
depth : 1
public Pair -$$Nest$mgetSingleProvider(FaceService p1){
	Pair v1 = p1.getSingleProvider();
	return v1;
}
-----
depth : 2
public Pair getSingleProvider(){
	List v1 = p0.getSensorProperties();
	int v2 = v1.size();
	Object v3 = v1.get(0);
	Iterator v4 = this.mServiceProviders.iterator();
	boolean v5 = v4.hasNext();
	Object v6 = v4.next();
	boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId);
	Pair v7 = new Pair(v8,v6);
	Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
	return v7;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void cancelFaceDetect(IBinder p1, String p2, long p3){
	Context v3 = this.this$0.getContext();
	boolean v4 = Utils.isKeyguard(v3, p2);
	Pair v5 = FaceService.-$$Nest$mgetSingleProvider(this.this$0);
	int v6 = Slog.w("FaceService", "Null provider for cancelFaceDetect");
	return;
}
-----
depth : 1
public boolean isKeyguard(Context p1, String p2){
	boolean v1 = Utils.hasInternalPermission(p1);
	Resources v2 = p1.getResources();
	String v3 = v2.getString(17039993);
	ComponentName v4 = ComponentName.unflattenFromString(v3);
	String v5 = v4.getPackageName();
	boolean v6 = phiInstruction.equals(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasInternalPermission(Context p1){
	return phiInstruction;
}
-----
depth : 1
public Pair -$$Nest$mgetSingleProvider(FaceService p1){
	Pair v1 = p1.getSingleProvider();
	return v1;
}
-----
depth : 2
public Pair getSingleProvider(){
	List v1 = p0.getSensorProperties();
	int v2 = v1.size();
	Object v3 = v1.get(0);
	Iterator v4 = this.mServiceProviders.iterator();
	boolean v5 = v4.hasNext();
	Object v6 = v4.next();
	boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId);
	Pair v7 = new Pair(v8,v6);
	Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
	return v7;
}
-----
