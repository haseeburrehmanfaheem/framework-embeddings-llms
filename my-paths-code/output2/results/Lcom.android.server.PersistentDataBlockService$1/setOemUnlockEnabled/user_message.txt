This is path 1 for the API with depth 2:
depth : 0
public void setOemUnlockEnabled(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	PersistentDataBlockService.-$$Nest$menforceOemUnlockWritePermission(this.this$0);
	PersistentDataBlockService.-$$Nest$menforceIsAdmin(this.this$0);
	PersistentDataBlockService.-$$Nest$menforceUserRestriction(this.this$0, "no_oem_unlock");
	PersistentDataBlockService.-$$Nest$menforceUserRestriction(this.this$0, "no_factory_reset");
	Object v6 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
	PersistentDataBlockService.-$$Nest$mdoSetOemUnlockEnabledLocked(this.this$0, p1);
	boolean v8 = PersistentDataBlockService.-$$Nest$mcomputeAndWriteDigestLocked(this.this$0);
	return;
}
-----
depth : 1
public void -$$Nest$menforceOemUnlockWritePermission(PersistentDataBlockService p1){
	p1.enforceOemUnlockWritePermission();
	return;
}
-----
depth : 2
public void enforceOemUnlockWritePermission(){
	return;
}
-----
depth : 1
public void -$$Nest$menforceIsAdmin(PersistentDataBlockService p1){
	p1.enforceIsAdmin();
	return;
}
-----
depth : 2
public void enforceIsAdmin(){
	int v1 = UserHandle.getCallingUserId();
	UserManager v2 = UserManager.get(this.mContext);
	boolean v3 = v2.isUserAdmin(v1);
	return;
}
-----
depth : 1
public void -$$Nest$menforceUserRestriction(PersistentDataBlockService p1, String p2){
	p1.enforceUserRestriction(p2);
	return;
}
-----
depth : 2
public void enforceUserRestriction(String p1){
	return;
}
-----
depth : 1
public void -$$Nest$menforceUserRestriction(PersistentDataBlockService p1, String p2){
	p1.enforceUserRestriction(p2);
	return;
}
-----
depth : 2
public void enforceUserRestriction(String p1){
	return;
}
-----
depth : 1
public void -$$Nest$mdoSetOemUnlockEnabledLocked(PersistentDataBlockService p1, boolean p2){
	p1.doSetOemUnlockEnabledLocked(p2);
	return;
}
-----
depth : 2
public void doSetOemUnlockEnabledLocked(boolean p1){
	FileChannel v1 = p0.getBlockOutputChannel();
	long v2 = p0.getBlockDeviceSize();
	FileChannel v3 = v1.position((v2 - 1));
	int v4 = Slog.e(this.TAG, "unable to access persistent partition", caughtException);
	SystemProperties.set("sys.oem_unlock_allowed", phiInstruction);
	return;
}
-----
depth : 1
public boolean -$$Nest$mcomputeAndWriteDigestLocked(PersistentDataBlockService p1){
	boolean v1 = p1.computeAndWriteDigestLocked();
	return v1;
}
-----
depth : 2
public boolean computeAndWriteDigestLocked(){
	byte[] v1 = p0.computeDigestLocked(0);
	FileChannel v2 = p0.getBlockOutputChannel();
	ByteBuffer v3 = ByteBuffer.allocate(32);
	ByteBuffer v4 = v3.put(v1);
	Buffer v5 = v3.flip();
	int v6 = v2.write(v3);
	v2.force(1);
	int v8 = Slog.e(this.TAG, "failed to write block checksum", caughtException);
	return 0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setOemUnlockEnabled(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	PersistentDataBlockService.-$$Nest$menforceOemUnlockWritePermission(this.this$0);
	PersistentDataBlockService.-$$Nest$menforceIsAdmin(this.this$0);
	Object v4 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
	PersistentDataBlockService.-$$Nest$mdoSetOemUnlockEnabledLocked(this.this$0, p1);
	boolean v6 = PersistentDataBlockService.-$$Nest$mcomputeAndWriteDigestLocked(this.this$0);
	return;
}
-----
depth : 1
public void -$$Nest$menforceOemUnlockWritePermission(PersistentDataBlockService p1){
	p1.enforceOemUnlockWritePermission();
	return;
}
-----
depth : 2
public void enforceOemUnlockWritePermission(){
	return;
}
-----
depth : 1
public void -$$Nest$menforceIsAdmin(PersistentDataBlockService p1){
	p1.enforceIsAdmin();
	return;
}
-----
depth : 2
public void enforceIsAdmin(){
	int v1 = UserHandle.getCallingUserId();
	UserManager v2 = UserManager.get(this.mContext);
	boolean v3 = v2.isUserAdmin(v1);
	return;
}
-----
depth : 1
public void -$$Nest$mdoSetOemUnlockEnabledLocked(PersistentDataBlockService p1, boolean p2){
	p1.doSetOemUnlockEnabledLocked(p2);
	return;
}
-----
depth : 2
public void doSetOemUnlockEnabledLocked(boolean p1){
	FileChannel v1 = p0.getBlockOutputChannel();
	long v2 = p0.getBlockDeviceSize();
	FileChannel v3 = v1.position((v2 - 1));
	int v4 = Slog.e(this.TAG, "unable to access persistent partition", caughtException);
	SystemProperties.set("sys.oem_unlock_allowed", phiInstruction);
	return;
}
-----
depth : 1
public boolean -$$Nest$mcomputeAndWriteDigestLocked(PersistentDataBlockService p1){
	boolean v1 = p1.computeAndWriteDigestLocked();
	return v1;
}
-----
depth : 2
public boolean computeAndWriteDigestLocked(){
	byte[] v1 = p0.computeDigestLocked(0);
	FileChannel v2 = p0.getBlockOutputChannel();
	ByteBuffer v3 = ByteBuffer.allocate(32);
	ByteBuffer v4 = v3.put(v1);
	Buffer v5 = v3.flip();
	int v6 = v2.write(v3);
	v2.force(1);
	int v8 = Slog.e(this.TAG, "failed to write block checksum", caughtException);
	return 0;
}
-----
