This is path 1 for the API with depth 2:
depth : 0
public byte[] read(){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	boolean v3 = PersistentDataBlockService.-$$Nest$menforceChecksumValidity(this.this$0);
	DataInputStream v3 = new DataInputStream;
	FileInputStream v3 = new FileInputStream;
	File v3 = new File;
	String v4 = PersistentDataBlockService.-$$Nest$fgetmDataBlockFile(this.this$0);
	String v5 = PersistentDataBlockService.-$$Nest$sfgetTAG();
	int v6 = Slog.e(v5, "partition not available?", caughtException);
	return 0;
}
-----
depth : 1
public void -$$Nest$menforceUid(PersistentDataBlockService p1, int p2){
	p1.enforceUid(p2);
	return;
}
-----
depth : 2
public void enforceUid(int p1){
	return;
}
-----
depth : 1
public boolean -$$Nest$menforceChecksumValidity(PersistentDataBlockService p1){
	boolean v1 = p1.enforceChecksumValidity();
	return v1;
}
-----
depth : 2
public boolean enforceChecksumValidity(){
	[B v0 = new [B(32);
	byte[] v1 = p0.computeDigestLocked(v0);
	boolean v2 = Arrays.equals(v0, v1);
	int v3 = Slog.i(this.TAG, "Formatting FRP partition...");
	p0.formatPartitionLocked(0);
	return 0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public byte[] read(){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	boolean v3 = PersistentDataBlockService.-$$Nest$menforceChecksumValidity(this.this$0);
	DataInputStream v3 = new DataInputStream;
	FileInputStream v3 = new FileInputStream;
	File v3 = new File;
	String v4 = PersistentDataBlockService.-$$Nest$sfgetTAG();
	int v5 = Slog.e(v4, "partition not available?", caughtException);
	return 0;
}
-----
depth : 1
public void -$$Nest$menforceUid(PersistentDataBlockService p1, int p2){
	p1.enforceUid(p2);
	return;
}
-----
depth : 2
public void enforceUid(int p1){
	return;
}
-----
depth : 1
public boolean -$$Nest$menforceChecksumValidity(PersistentDataBlockService p1){
	boolean v1 = p1.enforceChecksumValidity();
	return v1;
}
-----
depth : 2
public boolean enforceChecksumValidity(){
	[B v0 = new [B(32);
	byte[] v1 = p0.computeDigestLocked(v0);
	boolean v2 = Arrays.equals(v0, v1);
	int v3 = Slog.i(this.TAG, "Formatting FRP partition...");
	p0.formatPartitionLocked(0);
	return 0;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public byte[] read(){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	boolean v3 = PersistentDataBlockService.-$$Nest$menforceChecksumValidity(this.this$0);
	DataInputStream v3 = new DataInputStream;
	FileInputStream v3 = new FileInputStream;
	File v3 = new File;
	String v4 = PersistentDataBlockService.-$$Nest$sfgetTAG();
	int v5 = Slog.e(v4, "partition not available?", caughtException);
	return 0;
}
-----
depth : 1
public void -$$Nest$menforceUid(PersistentDataBlockService p1, int p2){
	p1.enforceUid(p2);
	return;
}
-----
depth : 2
public void enforceUid(int p1){
	return;
}
-----
depth : 1
public boolean -$$Nest$menforceChecksumValidity(PersistentDataBlockService p1){
	boolean v1 = p1.enforceChecksumValidity();
	return v1;
}
-----
depth : 2
public boolean enforceChecksumValidity(){
	[B v0 = new [B(32);
	byte[] v1 = p0.computeDigestLocked(v0);
	boolean v2 = Arrays.equals(v0, v1);
	int v3 = Slog.i(this.TAG, "Formatting FRP partition...");
	p0.formatPartitionLocked(0);
	return 0;
}
-----
