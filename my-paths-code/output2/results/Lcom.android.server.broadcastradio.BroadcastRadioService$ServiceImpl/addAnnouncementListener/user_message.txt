This is path 1 for the API with depth 1:
depth : 0
public ICloseHandle addAnnouncementListener([I p1, IAnnouncementListener p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Adding announcement listener for ");
	String v3 = Arrays.toString(p1);
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Slog.v("BcRadioSrv", v5);
	Object v7 = Objects.requireNonNull(p1);
	Object v8 = Objects.requireNonNull(p2);
	p0.enforcePolicyAccess();
	Object v10 = BroadcastRadioService.-$$Nest$fgetmLock(this.this$0);
	BroadcastRadioService v11 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	boolean v12 = v11.hasAnyModules();
	BroadcastRadioService v13 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	ICloseHandle v14 = v13.addAnnouncementListener(p1, p2);
	return v14;
}
-----
depth : 1
public void enforcePolicyAccess(){
	return;
}
-----
depth : 1
public Object -$$Nest$fgetmLock(BroadcastRadioService p1){
	return this.mLock;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public boolean hasAnyModules(){
	boolean v1 = this.mModules.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public ICloseHandle addAnnouncementListener([I p1, IAnnouncementListener p2){
	int v1 = Slog.v("BcRadio2Srv", "Add announcementListener");
	AnnouncementAggregator v1 = new AnnouncementAggregator(p2,this.mLock);
	Collection v3 = this.mModules.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	int v6 = Slog.i("BcRadio2Srv", "There are no HAL modules that support announcements");
	return v1;
}
-----

This is path 2 for the API with depth 1:
depth : 0
public ICloseHandle addAnnouncementListener([I p1, IAnnouncementListener p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Adding announcement listener for ");
	String v3 = Arrays.toString(p1);
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Slog.v("BcRadioSrv", v5);
	Object v7 = Objects.requireNonNull(p1);
	Object v8 = Objects.requireNonNull(p2);
	p0.enforcePolicyAccess();
	Object v10 = BroadcastRadioService.-$$Nest$fgetmLock(this.this$0);
	BroadcastRadioService v11 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	boolean v12 = v11.hasAnyModules();
	BroadcastRadioService v13 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	ICloseHandle v14 = v13.addAnnouncementListener(p1, p2);
	return v14;
}
-----
depth : 1
public void enforcePolicyAccess(){
	return;
}
-----
depth : 1
public Object -$$Nest$fgetmLock(BroadcastRadioService p1){
	return this.mLock;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public boolean hasAnyModules(){
	boolean v1 = this.mModules.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public ICloseHandle addAnnouncementListener([I p1, IAnnouncementListener p2){
	int v1 = Slog.v("BcRadio2Srv", "Add announcementListener");
	AnnouncementAggregator v1 = new AnnouncementAggregator(p2,this.mLock);
	Collection v3 = this.mModules.values();
	Iterator v4 = v3.iterator();
	boolean v5 = v4.hasNext();
	int v6 = Slog.i("BcRadio2Srv", "There are no HAL modules that support announcements");
	return v1;
}
-----
