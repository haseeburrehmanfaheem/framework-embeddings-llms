This is path 1 for the API with depth 2:
depth : 0
public void setVrThread(int p1){
	p0.enforceSystemHasVrFeature();
	WindowManagerService.boostPriorityForLockedSection();
	int v3 = Binder.getCallingPid();
	WindowProcessController v4 = this.mProcessMap.getProcess(v3);
	this.mVrController.setVrThreadLocked(p1, v3, v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceSystemHasVrFeature(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature("android.hardware.vr.high_performance");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void setVrThreadLocked(int p1, int p2, WindowProcessController p3){
	boolean v1 = p0.hasPersistentVrFlagSet();
	int v2 = Slog.w("VrController", "VR thread cannot be set in persistent VR mode!");
	return;
}
-----
depth : 2
public boolean hasPersistentVrFlagSet(){
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setVrThread(int p1){
	p0.enforceSystemHasVrFeature();
	WindowManagerService.boostPriorityForLockedSection();
	int v3 = Binder.getCallingPid();
	WindowProcessController v4 = this.mProcessMap.getProcess(v3);
	this.mVrController.setVrThreadLocked(p1, v3, v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceSystemHasVrFeature(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature("android.hardware.vr.high_performance");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void setVrThreadLocked(int p1, int p2, WindowProcessController p3){
	boolean v1 = p0.hasPersistentVrFlagSet();
	int v2 = Slog.w("VrController", "VR thread cannot be set in persistent VR mode!");
	return;
}
-----
depth : 2
public boolean hasPersistentVrFlagSet(){
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setVrThread(int p1){
	p0.enforceSystemHasVrFeature();
	WindowManagerService.boostPriorityForLockedSection();
	int v3 = Binder.getCallingPid();
	WindowProcessController v4 = this.mProcessMap.getProcess(v3);
	this.mVrController.setVrThreadLocked(p1, v3, v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceSystemHasVrFeature(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature("android.hardware.vr.high_performance");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void setVrThreadLocked(int p1, int p2, WindowProcessController p3){
	boolean v1 = p0.hasPersistentVrFlagSet();
	int v2 = Slog.w("VrController", "VR thread cannot be set in persistent VR mode!");
	return;
}
-----
depth : 2
public boolean hasPersistentVrFlagSet(){
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
