This is path 1 for the API with depth 2:
depth : 0
public List getAllRootTaskInfos(){
	ActivityTaskManagerService.enforceTaskPermission("getAllRootTaskInfos()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(-1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return v4;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public ArrayList getAllRootTaskInfos(int p1){
	ArrayList v0 = new ArrayList();
	DisplayContent v2 = p0.getDisplayContent(p1);
	RootWindowContainer$$ExternalSyntheticLambda12 v2 = new RootWindowContainer$$ExternalSyntheticLambda12(p0,v0);
	v2.forAllRootTasks(v2);
	return v0;
}
-----
depth : 2
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public void forAllRootTasks(Consumer p1){
	p0.forAllRootTasks(p1, 1);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public List getAllRootTaskInfos(){
	ActivityTaskManagerService.enforceTaskPermission("getAllRootTaskInfos()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(-1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return v4;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public ArrayList getAllRootTaskInfos(int p1){
	ArrayList v0 = new ArrayList();
	DisplayContent v2 = p0.getDisplayContent(p1);
	RootWindowContainer$$ExternalSyntheticLambda12 v2 = new RootWindowContainer$$ExternalSyntheticLambda12(p0,v0);
	v2.forAllRootTasks(v2);
	return v0;
}
-----
depth : 2
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public void forAllRootTasks(Consumer p1){
	p0.forAllRootTasks(p1, 1);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public List getAllRootTaskInfos(){
	ActivityTaskManagerService.enforceTaskPermission("getAllRootTaskInfos()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(-1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return v4;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public ArrayList getAllRootTaskInfos(int p1){
	ArrayList v0 = new ArrayList();
	DisplayContent v2 = p0.getDisplayContent(p1);
	RootWindowContainer$$ExternalSyntheticLambda12 v2 = new RootWindowContainer$$ExternalSyntheticLambda12(p0,v0);
	v2.forAllRootTasks(v2);
	return v0;
}
-----
depth : 2
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public void forAllRootTasks(Consumer p1){
	p0.forAllRootTasks(p1, 1);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
