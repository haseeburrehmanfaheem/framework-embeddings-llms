This is path 1 for the API with depth 2:
depth : 0
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	ActivityTaskManagerService$PendingAssistExtras v2 = p0.enqueueAssistContext(p1, 0, 0, 0, 0, 0, 1, 1, v1, 0, 500, 0);
	WindowManagerService.boostPriorityForLockedSection();
	p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
	boolean v5 = this.mPendingAssistExtras.remove(v2);
	this.mUiHandler.removeCallbacks(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return ActivityTaskManagerService$PendingAssistExtras.extras;
}
-----
depth : 1
public ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int p1, Intent p2, String p3, IAssistDataReceiver p4, Bundle p5, IBinder p6, boolean p7, boolean p8, int p9, Bundle p10, long p11, int p12){
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v4 = v3.getTopNonFinishingActivity();
	boolean v5 = phiInstruction.attachedToProcess();
	ActivityRecord v6 = ActivityRecord.forTokenLocked(p6);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append("enqueueAssistContext failed: caller ");
	StringBuilder v9 = v6.append(v6);
	StringBuilder v10 = v6.append(" is not current top ");
	StringBuilder v11 = v6.append(phiInstruction);
	String v12 = v6.toString();
	int v13 = Slog.w("ActivityTaskManager", v12);
	WindowManagerService.resetPriorityAfterLockedSection();
	return 0;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public ActivityRecord getTopNonFinishingActivity(){
	ActivityRecord v1 = p0.getTopNonFinishingActivity(1);
	return v1;
}
-----
depth : 2
public boolean attachedToProcess(){
	boolean v1 = p0.hasProcess();
	boolean v2 = this.app.hasThread();
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	ActivityTaskManagerService$PendingAssistExtras v2 = p0.enqueueAssistContext(p1, 0, 0, 0, 0, 0, 1, 1, v1, 0, 500, 0);
	WindowManagerService.boostPriorityForLockedSection();
	p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
	boolean v5 = this.mPendingAssistExtras.remove(v2);
	this.mUiHandler.removeCallbacks(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return ActivityTaskManagerService$PendingAssistExtras.extras;
}
-----
depth : 1
public ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int p1, Intent p2, String p3, IAssistDataReceiver p4, Bundle p5, IBinder p6, boolean p7, boolean p8, int p9, Bundle p10, long p11, int p12){
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v4 = v3.getTopNonFinishingActivity();
	boolean v5 = phiInstruction.attachedToProcess();
	ActivityRecord v6 = ActivityRecord.forTokenLocked(p6);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append("enqueueAssistContext failed: caller ");
	StringBuilder v9 = v6.append(v6);
	StringBuilder v10 = v6.append(" is not current top ");
	StringBuilder v11 = v6.append(phiInstruction);
	String v12 = v6.toString();
	int v13 = Slog.w("ActivityTaskManager", v12);
	WindowManagerService.resetPriorityAfterLockedSection();
	return 0;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public ActivityRecord getTopNonFinishingActivity(){
	ActivityRecord v1 = p0.getTopNonFinishingActivity(1);
	return v1;
}
-----
depth : 2
public boolean attachedToProcess(){
	boolean v1 = p0.hasProcess();
	boolean v2 = this.app.hasThread();
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public Bundle getAssistContextExtras(int p1){
	int v1 = UserHandle.getCallingUserId();
	ActivityTaskManagerService$PendingAssistExtras v2 = p0.enqueueAssistContext(p1, 0, 0, 0, 0, 0, 1, 1, v1, 0, 500, 0);
	WindowManagerService.boostPriorityForLockedSection();
	p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
	boolean v5 = this.mPendingAssistExtras.remove(v2);
	this.mUiHandler.removeCallbacks(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return ActivityTaskManagerService$PendingAssistExtras.extras;
}
-----
depth : 1
public ActivityTaskManagerService$PendingAssistExtras enqueueAssistContext(int p1, Intent p2, String p3, IAssistDataReceiver p4, Bundle p5, IBinder p6, boolean p7, boolean p8, int p9, Bundle p10, long p11, int p12){
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v4 = v3.getTopNonFinishingActivity();
	boolean v5 = phiInstruction.attachedToProcess();
	ActivityRecord v6 = ActivityRecord.forTokenLocked(p6);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append("enqueueAssistContext failed: caller ");
	StringBuilder v9 = v6.append(v6);
	StringBuilder v10 = v6.append(" is not current top ");
	StringBuilder v11 = v6.append(phiInstruction);
	String v12 = v6.toString();
	int v13 = Slog.w("ActivityTaskManager", v12);
	WindowManagerService.resetPriorityAfterLockedSection();
	return 0;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public ActivityRecord getTopNonFinishingActivity(){
	ActivityRecord v1 = p0.getTopNonFinishingActivity(1);
	return v1;
}
-----
depth : 2
public boolean attachedToProcess(){
	boolean v1 = p0.hasProcess();
	boolean v2 = this.app.hasThread();
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
