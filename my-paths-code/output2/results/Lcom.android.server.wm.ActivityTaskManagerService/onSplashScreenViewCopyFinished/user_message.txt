This is path 1 for the API with depth 2:
depth : 0
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	ActivityRecord v4 = v3.getTopWaitSplashScreenActivity();
	v4.onCopySplashScreenFinish(p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public ActivityRecord getTopWaitSplashScreenActivity(){
	Task$$ExternalSyntheticLambda8 v0 = new Task$$ExternalSyntheticLambda8();
	ActivityRecord v2 = p0.getActivity(v0);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1){
	ActivityRecord v1 = p0.getActivity(p1, 1);
	return v1;
}
-----
depth : 1
public void onCopySplashScreenFinish(SplashScreenView$SplashScreenViewParcelable p1){
	p0.removeTransferSplashScreenTimeout();
	SurfaceControl v2 = TaskOrganizerController.applyStartingWindowAnimation(this.mStartingWindow);
	this.mTransferringSplashScreenState = 2;
	ClientLifecycleManager v3 = this.mAtmService.getLifecycleManager();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("onCopySplashScreenComplete fail: ");
	StringBuilder v6 = v3.append(p0);
	String v7 = v3.toString();
	int v8 = Slog.w("ActivityTaskManager", v7);
	this.mStartingWindow.cancelAnimation();
	p1.clearIfNeeded();
	this.mTransferringSplashScreenState = 3;
	return;
}
-----
depth : 2
public void removeTransferSplashScreenTimeout(){
	ActivityTaskManagerService.mH.removeCallbacks(this.mTransferSplashScreenTimeoutRunnable);
	return;
}
-----
depth : 2
public SurfaceControl applyStartingWindowAnimation(WindowState p1){
	SurfaceControl$Transaction v1 = p1.getPendingTransaction();
	Rect v2 = p1.getRelativeFrame();
	TaskOrganizerController$StartingWindowAnimationAdaptor v2 = new TaskOrganizerController$StartingWindowAnimationAdaptor();
	p1.startAnimation(v1, v2, 0, 128);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Cannot start starting window animation, the window ");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append(" was removed");
	String v9 = v4.toString();
	int v10 = Slog.e("TaskOrganizerController", v9);
	return 0;
}
-----
depth : 2
public ClientLifecycleManager getLifecycleManager(){
	return this.mLifecycleManager;
}
-----
depth : 2
public void cancelAnimation(){
	int v1 = this.mSurfaceAnimator.getAnimationType();
	AnimationAdapter v2 = this.mSurfaceAnimator.getAnimation();
	p0.doAnimationFinished(v1, v2);
	this.mSurfaceAnimator.cancelAnimation();
	SurfaceControl$Transaction v5 = p0.getSyncTransaction();
	this.mSurfaceFreezer.unfreeze(v5);
	return;
}
-----
depth : 2
public void clearIfNeeded(){
	this.mIconBitmap.recycle();
	this.mIconBitmap = 0;
	this.mBrandingBitmap.recycle();
	this.mBrandingBitmap = 0;
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	ActivityRecord v4 = v3.getTopWaitSplashScreenActivity();
	v4.onCopySplashScreenFinish(p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public ActivityRecord getTopWaitSplashScreenActivity(){
	Task$$ExternalSyntheticLambda8 v0 = new Task$$ExternalSyntheticLambda8();
	ActivityRecord v2 = p0.getActivity(v0);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1){
	ActivityRecord v1 = p0.getActivity(p1, 1);
	return v1;
}
-----
depth : 1
public void onCopySplashScreenFinish(SplashScreenView$SplashScreenViewParcelable p1){
	p0.removeTransferSplashScreenTimeout();
	SurfaceControl v2 = TaskOrganizerController.applyStartingWindowAnimation(this.mStartingWindow);
	this.mTransferringSplashScreenState = 2;
	ClientLifecycleManager v3 = this.mAtmService.getLifecycleManager();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("onCopySplashScreenComplete fail: ");
	StringBuilder v6 = v3.append(p0);
	String v7 = v3.toString();
	int v8 = Slog.w("ActivityTaskManager", v7);
	this.mStartingWindow.cancelAnimation();
	p1.clearIfNeeded();
	this.mTransferringSplashScreenState = 3;
	return;
}
-----
depth : 2
public void removeTransferSplashScreenTimeout(){
	ActivityTaskManagerService.mH.removeCallbacks(this.mTransferSplashScreenTimeoutRunnable);
	return;
}
-----
depth : 2
public SurfaceControl applyStartingWindowAnimation(WindowState p1){
	SurfaceControl$Transaction v1 = p1.getPendingTransaction();
	Rect v2 = p1.getRelativeFrame();
	TaskOrganizerController$StartingWindowAnimationAdaptor v2 = new TaskOrganizerController$StartingWindowAnimationAdaptor();
	p1.startAnimation(v1, v2, 0, 128);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Cannot start starting window animation, the window ");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append(" was removed");
	String v9 = v4.toString();
	int v10 = Slog.e("TaskOrganizerController", v9);
	return 0;
}
-----
depth : 2
public ClientLifecycleManager getLifecycleManager(){
	return this.mLifecycleManager;
}
-----
depth : 2
public void cancelAnimation(){
	int v1 = this.mSurfaceAnimator.getAnimationType();
	AnimationAdapter v2 = this.mSurfaceAnimator.getAnimation();
	p0.doAnimationFinished(v1, v2);
	this.mSurfaceAnimator.cancelAnimation();
	SurfaceControl$Transaction v5 = p0.getSyncTransaction();
	this.mSurfaceFreezer.unfreeze(v5);
	return;
}
-----
depth : 2
public void clearIfNeeded(){
	this.mIconBitmap.recycle();
	this.mIconBitmap = 0;
	this.mBrandingBitmap.recycle();
	this.mBrandingBitmap = 0;
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	ActivityRecord v4 = v3.getTopWaitSplashScreenActivity();
	v4.onCopySplashScreenFinish(p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public ActivityRecord getTopWaitSplashScreenActivity(){
	Task$$ExternalSyntheticLambda8 v0 = new Task$$ExternalSyntheticLambda8();
	ActivityRecord v2 = p0.getActivity(v0);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1){
	ActivityRecord v1 = p0.getActivity(p1, 1);
	return v1;
}
-----
depth : 1
public void onCopySplashScreenFinish(SplashScreenView$SplashScreenViewParcelable p1){
	p0.removeTransferSplashScreenTimeout();
	SurfaceControl v2 = TaskOrganizerController.applyStartingWindowAnimation(this.mStartingWindow);
	this.mTransferringSplashScreenState = 2;
	ClientLifecycleManager v3 = this.mAtmService.getLifecycleManager();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("onCopySplashScreenComplete fail: ");
	StringBuilder v6 = v3.append(p0);
	String v7 = v3.toString();
	int v8 = Slog.w("ActivityTaskManager", v7);
	this.mStartingWindow.cancelAnimation();
	p1.clearIfNeeded();
	this.mTransferringSplashScreenState = 3;
	return;
}
-----
depth : 2
public void removeTransferSplashScreenTimeout(){
	ActivityTaskManagerService.mH.removeCallbacks(this.mTransferSplashScreenTimeoutRunnable);
	return;
}
-----
depth : 2
public SurfaceControl applyStartingWindowAnimation(WindowState p1){
	SurfaceControl$Transaction v1 = p1.getPendingTransaction();
	Rect v2 = p1.getRelativeFrame();
	TaskOrganizerController$StartingWindowAnimationAdaptor v2 = new TaskOrganizerController$StartingWindowAnimationAdaptor();
	p1.startAnimation(v1, v2, 0, 128);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Cannot start starting window animation, the window ");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append(" was removed");
	String v9 = v4.toString();
	int v10 = Slog.e("TaskOrganizerController", v9);
	return 0;
}
-----
depth : 2
public ClientLifecycleManager getLifecycleManager(){
	return this.mLifecycleManager;
}
-----
depth : 2
public void cancelAnimation(){
	int v1 = this.mSurfaceAnimator.getAnimationType();
	AnimationAdapter v2 = this.mSurfaceAnimator.getAnimation();
	p0.doAnimationFinished(v1, v2);
	this.mSurfaceAnimator.cancelAnimation();
	SurfaceControl$Transaction v5 = p0.getSyncTransaction();
	this.mSurfaceFreezer.unfreeze(v5);
	return;
}
-----
depth : 2
public void clearIfNeeded(){
	this.mIconBitmap.recycle();
	this.mIconBitmap = 0;
	this.mBrandingBitmap.recycle();
	this.mBrandingBitmap = 0;
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
