This is path 1 for the API with depth 2:
depth : 0
public void setPersistentVrThread(int p1){
	p0.enforceSystemHasVrFeature();
	WindowManagerService.boostPriorityForLockedSection();
	int v4 = Binder.getCallingPid();
	WindowProcessController v5 = this.mProcessMap.getProcess(v4);
	this.mVrController.setPersistentVrThreadLocked(p1, v4, v5);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceSystemHasVrFeature(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature("android.hardware.vr.high_performance");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void setPersistentVrThreadLocked(int p1, int p2, WindowProcessController p3){
	boolean v1 = p0.hasPersistentVrFlagSet();
	p0.enforceThreadInProcess(p1, p2);
	int v3 = p0.setPersistentVrRenderThreadLocked(p1, 0);
	return;
}
-----
depth : 2
public boolean hasPersistentVrFlagSet(){
	return phiInstruction;
}
-----
depth : 2
public void enforceThreadInProcess(int p1, int p2){
	boolean v1 = Process.isThreadInProcess(p2, p1);
	return;
}
-----
depth : 2
public int setPersistentVrRenderThreadLocked(int p1, boolean p2){
	boolean v1 = p0.hasPersistentVrFlagSet();
	int v2 = Slog.w("VrController", "Failed to set persistent VR thread, system not in persistent VR mode.");
	return this.mVrRenderThreadTid;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setPersistentVrThread(int p1){
	p0.enforceSystemHasVrFeature();
	WindowManagerService.boostPriorityForLockedSection();
	int v4 = Binder.getCallingPid();
	WindowProcessController v5 = this.mProcessMap.getProcess(v4);
	this.mVrController.setPersistentVrThreadLocked(p1, v4, v5);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceSystemHasVrFeature(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature("android.hardware.vr.high_performance");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void setPersistentVrThreadLocked(int p1, int p2, WindowProcessController p3){
	boolean v1 = p0.hasPersistentVrFlagSet();
	p0.enforceThreadInProcess(p1, p2);
	int v3 = p0.setPersistentVrRenderThreadLocked(p1, 0);
	return;
}
-----
depth : 2
public boolean hasPersistentVrFlagSet(){
	return phiInstruction;
}
-----
depth : 2
public void enforceThreadInProcess(int p1, int p2){
	boolean v1 = Process.isThreadInProcess(p2, p1);
	return;
}
-----
depth : 2
public int setPersistentVrRenderThreadLocked(int p1, boolean p2){
	boolean v1 = p0.hasPersistentVrFlagSet();
	int v2 = Slog.w("VrController", "Failed to set persistent VR thread, system not in persistent VR mode.");
	return this.mVrRenderThreadTid;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setPersistentVrThread(int p1){
	p0.enforceSystemHasVrFeature();
	WindowManagerService.boostPriorityForLockedSection();
	int v4 = Binder.getCallingPid();
	WindowProcessController v5 = this.mProcessMap.getProcess(v4);
	this.mVrController.setPersistentVrThreadLocked(p1, v4, v5);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceSystemHasVrFeature(){
	PackageManager v1 = this.mContext.getPackageManager();
	boolean v2 = v1.hasSystemFeature("android.hardware.vr.high_performance");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void setPersistentVrThreadLocked(int p1, int p2, WindowProcessController p3){
	boolean v1 = p0.hasPersistentVrFlagSet();
	p0.enforceThreadInProcess(p1, p2);
	int v3 = p0.setPersistentVrRenderThreadLocked(p1, 0);
	return;
}
-----
depth : 2
public boolean hasPersistentVrFlagSet(){
	return phiInstruction;
}
-----
depth : 2
public void enforceThreadInProcess(int p1, int p2){
	boolean v1 = Process.isThreadInProcess(p2, p1);
	return;
}
-----
depth : 2
public int setPersistentVrRenderThreadLocked(int p1, boolean p2){
	boolean v1 = p0.hasPersistentVrFlagSet();
	int v2 = Slog.w("VrController", "Failed to set persistent VR thread, system not in persistent VR mode.");
	return this.mVrRenderThreadTid;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
