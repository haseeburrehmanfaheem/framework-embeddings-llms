This is path 1 for the API with depth 2:
depth : 0
public ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo(){
	ActivityTaskManagerService.enforceTaskPermission("getFocusedRootTaskInfo()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = p0.getTopDisplayFocusedRootTask();
	ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityTaskManager$RootTaskInfo getRootTaskInfo(int p1){
	Task v1 = p0.getRootTask(p1);
	ActivityTaskManager$RootTaskInfo v2 = p0.getRootTaskInfo(v1);
	return v2;
}
-----
depth : 2
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public ActivityTaskManager$RootTaskInfo getRootTaskInfo(Task p1){
	ActivityTaskManager$RootTaskInfo v0 = new ActivityTaskManager$RootTaskInfo();
	p1.fillTaskInfo(v0);
	DisplayContent v3 = p1.getDisplayContent();
	[I v3 = new [I(1);
	[Z v3 = new [Z(1);
	RootWindowContainer$$ExternalSyntheticLambda21 v3 = new RootWindowContainer$$ExternalSyntheticLambda21(p1,v3,v3);
	boolean v5 = v3.forAllRootTasks(v3, 0);
	ActivityTaskManager$RootTaskInfo.position = phiInstruction;
	boolean v6 = p1.shouldBeVisible(0);
	ActivityTaskManager$RootTaskInfo.visible = v6;
	p1.getBounds(ActivityTaskManager$RootTaskInfo.bounds);
	int v8 = p1.getDescendantTaskCount();
	[I v8 = new [I(v8);
	ActivityTaskManager$RootTaskInfo.childTaskIds = v8;
	String v8 = new String(v8);
	ActivityTaskManager$RootTaskInfo.childTaskNames = v8;
	Rect v8 = new Rect(v8);
	ActivityTaskManager$RootTaskInfo.childTaskBounds = v8;
	[I v8 = new [I(v8);
	ActivityTaskManager$RootTaskInfo.childTaskUserIds = v8;
	[I v8 = new [I(1);
	RootWindowContainer$$ExternalSyntheticLambda22 v8 = new RootWindowContainer$$ExternalSyntheticLambda22();
	ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
	PooledConsumer v11 = PooledLambda.obtainConsumer(v8, v10, v0, v8);
	p1.forAllLeafTasks(v11, 0);
	v11.recycle();
	ActivityRecord v14 = p1.topRunningActivity();
	ComponentName v15 = ActivityRecord.intent.getComponent();
	ActivityTaskManager$RootTaskInfo.topActivity = phiInstruction;
	return v0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo(){
	ActivityTaskManagerService.enforceTaskPermission("getFocusedRootTaskInfo()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = p0.getTopDisplayFocusedRootTask();
	ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityTaskManager$RootTaskInfo getRootTaskInfo(int p1){
	Task v1 = p0.getRootTask(p1);
	ActivityTaskManager$RootTaskInfo v2 = p0.getRootTaskInfo(v1);
	return v2;
}
-----
depth : 2
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public ActivityTaskManager$RootTaskInfo getRootTaskInfo(Task p1){
	ActivityTaskManager$RootTaskInfo v0 = new ActivityTaskManager$RootTaskInfo();
	p1.fillTaskInfo(v0);
	DisplayContent v3 = p1.getDisplayContent();
	[I v3 = new [I(1);
	[Z v3 = new [Z(1);
	RootWindowContainer$$ExternalSyntheticLambda21 v3 = new RootWindowContainer$$ExternalSyntheticLambda21(p1,v3,v3);
	boolean v5 = v3.forAllRootTasks(v3, 0);
	ActivityTaskManager$RootTaskInfo.position = phiInstruction;
	boolean v6 = p1.shouldBeVisible(0);
	ActivityTaskManager$RootTaskInfo.visible = v6;
	p1.getBounds(ActivityTaskManager$RootTaskInfo.bounds);
	int v8 = p1.getDescendantTaskCount();
	[I v8 = new [I(v8);
	ActivityTaskManager$RootTaskInfo.childTaskIds = v8;
	String v8 = new String(v8);
	ActivityTaskManager$RootTaskInfo.childTaskNames = v8;
	Rect v8 = new Rect(v8);
	ActivityTaskManager$RootTaskInfo.childTaskBounds = v8;
	[I v8 = new [I(v8);
	ActivityTaskManager$RootTaskInfo.childTaskUserIds = v8;
	[I v8 = new [I(1);
	RootWindowContainer$$ExternalSyntheticLambda22 v8 = new RootWindowContainer$$ExternalSyntheticLambda22();
	ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
	PooledConsumer v11 = PooledLambda.obtainConsumer(v8, v10, v0, v8);
	p1.forAllLeafTasks(v11, 0);
	v11.recycle();
	ActivityRecord v14 = p1.topRunningActivity();
	ComponentName v15 = ActivityRecord.intent.getComponent();
	ActivityTaskManager$RootTaskInfo.topActivity = phiInstruction;
	return v0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo(){
	ActivityTaskManagerService.enforceTaskPermission("getFocusedRootTaskInfo()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = p0.getTopDisplayFocusedRootTask();
	ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityTaskManager$RootTaskInfo getRootTaskInfo(int p1){
	Task v1 = p0.getRootTask(p1);
	ActivityTaskManager$RootTaskInfo v2 = p0.getRootTaskInfo(v1);
	return v2;
}
-----
depth : 2
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public ActivityTaskManager$RootTaskInfo getRootTaskInfo(Task p1){
	ActivityTaskManager$RootTaskInfo v0 = new ActivityTaskManager$RootTaskInfo();
	p1.fillTaskInfo(v0);
	DisplayContent v3 = p1.getDisplayContent();
	[I v3 = new [I(1);
	[Z v3 = new [Z(1);
	RootWindowContainer$$ExternalSyntheticLambda21 v3 = new RootWindowContainer$$ExternalSyntheticLambda21(p1,v3,v3);
	boolean v5 = v3.forAllRootTasks(v3, 0);
	ActivityTaskManager$RootTaskInfo.position = phiInstruction;
	boolean v6 = p1.shouldBeVisible(0);
	ActivityTaskManager$RootTaskInfo.visible = v6;
	p1.getBounds(ActivityTaskManager$RootTaskInfo.bounds);
	int v8 = p1.getDescendantTaskCount();
	[I v8 = new [I(v8);
	ActivityTaskManager$RootTaskInfo.childTaskIds = v8;
	String v8 = new String(v8);
	ActivityTaskManager$RootTaskInfo.childTaskNames = v8;
	Rect v8 = new Rect(v8);
	ActivityTaskManager$RootTaskInfo.childTaskBounds = v8;
	[I v8 = new [I(v8);
	ActivityTaskManager$RootTaskInfo.childTaskUserIds = v8;
	[I v8 = new [I(1);
	RootWindowContainer$$ExternalSyntheticLambda22 v8 = new RootWindowContainer$$ExternalSyntheticLambda22();
	ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
	PooledConsumer v11 = PooledLambda.obtainConsumer(v8, v10, v0, v8);
	p1.forAllLeafTasks(v11, 0);
	v11.recycle();
	ActivityRecord v14 = p1.topRunningActivity();
	ComponentName v15 = ActivityRecord.intent.getComponent();
	ActivityTaskManager$RootTaskInfo.topActivity = phiInstruction;
	return v0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
