This is path 1 for the API with depth 2:
depth : 0
public boolean startNextMatchingActivity(IBinder p1, Intent p2, Bundle p3){
	boolean v1 = p2.hasFileDescriptors();
	SafeActivityOptions v2 = SafeActivityOptions.fromBundle(p3);
	WindowManagerService.boostPriorityForLockedSection();
	ActivityRecord v4 = ActivityRecord.isInRootTaskLocked(p1);
	boolean v5 = v4.attachedToProcess();
	Intent v5 = new Intent(p2);
	Uri v7 = ActivityRecord.intent.getData();
	String v8 = ActivityRecord.intent.getType();
	Intent v9 = v5.setDataAndType(v7, v8);
	Intent v10 = v5.setComponent(0);
	int v11 = v5.getFlags();
	IPackageManager v12 = AppGlobals.getPackageManager();
	int v13 = UserHandle.getCallingUserId();
	SafeActivityOptions.abort(v2);
	int v15 = Slog.d("ActivityTaskManager", "Next matching activity: nothing found");
	WindowManagerService.resetPriorityAfterLockedSection();
	return 0;
}
-----
depth : 1
public SafeActivityOptions fromBundle(Bundle p1){
	SafeActivityOptions v0 = new SafeActivityOptions(v1);
	ActivityOptions v1 = ActivityOptions.fromBundle(p1);
	return phiInstruction;
}
-----
depth : 2
public ActivityOptions fromBundle(Bundle p1){
	ActivityOptions v0 = new ActivityOptions(p1);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public ActivityRecord isInRootTaskLocked(IBinder p1){
	ActivityRecord v1 = ActivityRecord.forTokenLocked(p1);
	Task v2 = v1.getRootTask();
	ActivityRecord v3 = v2.isInTask(v1);
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public Task getRootTask(){
	Task v1 = this.task.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord isInTask(ActivityRecord p1){
	boolean v1 = p1.isDescendantOf(p0);
	return p1;
}
-----
depth : 1
public boolean attachedToProcess(){
	boolean v1 = p0.hasProcess();
	boolean v2 = this.app.hasThread();
	return phiInstruction;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 1
public void abort(SafeActivityOptions p1){
	p1.abort();
	return;
}
-----
depth : 2
public void abort(){
	ActivityOptions.abort(this.mOriginalOptions);
	ActivityOptions.abort(this.mCallerOptions);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean startNextMatchingActivity(IBinder p1, Intent p2, Bundle p3){
	boolean v1 = p2.hasFileDescriptors();
	SafeActivityOptions v2 = SafeActivityOptions.fromBundle(p3);
	WindowManagerService.boostPriorityForLockedSection();
	ActivityRecord v4 = ActivityRecord.isInRootTaskLocked(p1);
	boolean v5 = v4.attachedToProcess();
	Intent v5 = new Intent(p2);
	Uri v7 = ActivityRecord.intent.getData();
	String v8 = ActivityRecord.intent.getType();
	Intent v9 = v5.setDataAndType(v7, v8);
	Intent v10 = v5.setComponent(0);
	int v11 = v5.getFlags();
	IPackageManager v12 = AppGlobals.getPackageManager();
	int v13 = UserHandle.getCallingUserId();
	SafeActivityOptions.abort(v2);
	int v15 = Slog.d("ActivityTaskManager", "Next matching activity: nothing found");
	WindowManagerService.resetPriorityAfterLockedSection();
	return 0;
}
-----
depth : 1
public SafeActivityOptions fromBundle(Bundle p1){
	SafeActivityOptions v0 = new SafeActivityOptions(v1);
	ActivityOptions v1 = ActivityOptions.fromBundle(p1);
	return phiInstruction;
}
-----
depth : 2
public ActivityOptions fromBundle(Bundle p1){
	ActivityOptions v0 = new ActivityOptions(p1);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public ActivityRecord isInRootTaskLocked(IBinder p1){
	ActivityRecord v1 = ActivityRecord.forTokenLocked(p1);
	Task v2 = v1.getRootTask();
	ActivityRecord v3 = v2.isInTask(v1);
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public Task getRootTask(){
	Task v1 = this.task.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord isInTask(ActivityRecord p1){
	boolean v1 = p1.isDescendantOf(p0);
	return p1;
}
-----
depth : 1
public boolean attachedToProcess(){
	boolean v1 = p0.hasProcess();
	boolean v2 = this.app.hasThread();
	return phiInstruction;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 1
public void abort(SafeActivityOptions p1){
	p1.abort();
	return;
}
-----
depth : 2
public void abort(){
	ActivityOptions.abort(this.mOriginalOptions);
	ActivityOptions.abort(this.mCallerOptions);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean startNextMatchingActivity(IBinder p1, Intent p2, Bundle p3){
	boolean v1 = p2.hasFileDescriptors();
	SafeActivityOptions v2 = SafeActivityOptions.fromBundle(p3);
	WindowManagerService.boostPriorityForLockedSection();
	ActivityRecord v4 = ActivityRecord.isInRootTaskLocked(p1);
	boolean v5 = v4.attachedToProcess();
	Intent v5 = new Intent(p2);
	Uri v7 = ActivityRecord.intent.getData();
	String v8 = ActivityRecord.intent.getType();
	Intent v9 = v5.setDataAndType(v7, v8);
	Intent v10 = v5.setComponent(0);
	int v11 = v5.getFlags();
	IPackageManager v12 = AppGlobals.getPackageManager();
	int v13 = UserHandle.getCallingUserId();
	SafeActivityOptions.abort(v2);
	int v15 = Slog.d("ActivityTaskManager", "Next matching activity: nothing found");
	WindowManagerService.resetPriorityAfterLockedSection();
	return 0;
}
-----
depth : 1
public SafeActivityOptions fromBundle(Bundle p1){
	SafeActivityOptions v0 = new SafeActivityOptions(v1);
	ActivityOptions v1 = ActivityOptions.fromBundle(p1);
	return phiInstruction;
}
-----
depth : 2
public ActivityOptions fromBundle(Bundle p1){
	ActivityOptions v0 = new ActivityOptions(p1);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public ActivityRecord isInRootTaskLocked(IBinder p1){
	ActivityRecord v1 = ActivityRecord.forTokenLocked(p1);
	Task v2 = v1.getRootTask();
	ActivityRecord v3 = v2.isInTask(v1);
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public Task getRootTask(){
	Task v1 = this.task.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public ActivityRecord isInTask(ActivityRecord p1){
	boolean v1 = p1.isDescendantOf(p0);
	return 0;
}
-----
depth : 1
public boolean attachedToProcess(){
	boolean v1 = p0.hasProcess();
	boolean v2 = this.app.hasThread();
	return phiInstruction;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 1
public void abort(SafeActivityOptions p1){
	p1.abort();
	return;
}
-----
depth : 2
public void abort(){
	ActivityOptions.abort(this.mOriginalOptions);
	ActivityOptions.abort(this.mCallerOptions);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
