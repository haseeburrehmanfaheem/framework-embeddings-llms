This is path 1 for the API with depth 2:
depth : 0
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	boolean v3 = p0.isCrossUserAllowed(v2, v1);
	UserManagerService v4 = p0.getUserManager();
	int v5 = UserHandle.getUserId(v1);
	[I v6 = v4.getProfileIds(v5, 1);
	ArraySet v6 = new ArraySet();
	ArrayList v7 = new ArrayList();
	WindowManagerService.boostPriorityForLockedSection();
	boolean v10 = p0.isGetTasksAllowed("getTasks", v2, v1);
	this.mRootWindowContainer.getRunningTasks(p1, v7, (((p2 | phiInstruction) | phiInstruction) | phiInstruction), v1, v6, p4);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v7;
}
-----
depth : 1
public boolean isCrossUserAllowed(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public [I getProfileIds(int p1, boolean p2){
	[I v1 = p0.getProfileIds(p1, 0, p2);
	return v1;
}
-----
depth : 2
public [I getProfileIds(int p1, String p2, boolean p3){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getting profiles related to user ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v5);
	long v7 = Binder.clearCallingIdentity();
	IntArray v8 = p0.getProfileIdsLU(p1, p2, p3);
	[I v9 = v8.toArray();
	Binder.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public boolean isGetTasksAllowed(String p1, int p2, int p3){
	IPackageManager v4 = AppGlobals.getPackageManager();
	boolean v5 = v4.isUidPrivileged(p3);
	String v6 = String.valueOf(p1);
	Object v6 = new Object(2);
	Long v7 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v6);
	String v9 = String.valueOf(p1);
	Object v9 = new Object(2);
	Long v10 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v9);
	return phiInstruction;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 1
public void getRunningTasks(int p1, List p2, int p3, int p4, ArraySet p5, int p6){
	DisplayContent v1 = p0.getDisplayContent(p6);
	RunningTasks v2 = this.mTaskSupervisor.getRunningTasks();
	RecentTasks v3 = this.mService.getRecentTasks();
	v2.getTasks(p1, p2, p3, v3, phiInstruction, p4, p5);
	return;
}
-----
depth : 2
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public RunningTasks getRunningTasks(){
	return this.mRunningTasks;
}
-----
depth : 2
public RecentTasks getRecentTasks(){
	return this.mRecentTasks;
}
-----
depth : 2
public void getTasks(int p1, List p2, int p3, RecentTasks p4, WindowContainer p5, int p6, ArraySet p7){
	this.mTmpSortedSet.clear();
	this.mCallingUid = p6;
	int v2 = UserHandle.getUserId(p6);
	this.mUserId = v2;
	this.mCrossUser = phiInstruction;
	this.mProfileIds = p7;
	this.mAllowed = phiInstruction;
	this.mFilterOnlyVisibleRecents = phiInstruction;
	this.mRecentTasks = p4;
	this.mKeepIntentExtra = phiInstruction;
	RunningTasks$$ExternalSyntheticLambda0 v2 = new RunningTasks$$ExternalSyntheticLambda0();
	ArgumentPlaceholder v4 = PooledLambda.__(Tas.class);
	PooledConsumer v5 = PooledLambda.obtainConsumer(v2, p0, v4);
	p5.forAllLeafTasks(v5, 0);
	v5.recycle();
	Iterator v8 = this.mTmpSortedSet.iterator();
	boolean v9 = v8.hasNext();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	boolean v3 = p0.isCrossUserAllowed(v2, v1);
	UserManagerService v4 = p0.getUserManager();
	int v5 = UserHandle.getUserId(v1);
	[I v6 = v4.getProfileIds(v5, 1);
	ArraySet v6 = new ArraySet();
	ArrayList v7 = new ArrayList();
	WindowManagerService.boostPriorityForLockedSection();
	boolean v10 = p0.isGetTasksAllowed("getTasks", v2, v1);
	this.mRootWindowContainer.getRunningTasks(p1, v7, (((p2 | phiInstruction) | phiInstruction) | phiInstruction), v1, v6, p4);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v7;
}
-----
depth : 1
public boolean isCrossUserAllowed(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public [I getProfileIds(int p1, boolean p2){
	[I v1 = p0.getProfileIds(p1, 0, p2);
	return v1;
}
-----
depth : 2
public [I getProfileIds(int p1, String p2, boolean p3){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getting profiles related to user ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v5);
	long v7 = Binder.clearCallingIdentity();
	IntArray v8 = p0.getProfileIdsLU(p1, p2, p3);
	[I v9 = v8.toArray();
	Binder.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public boolean isGetTasksAllowed(String p1, int p2, int p3){
	IPackageManager v4 = AppGlobals.getPackageManager();
	boolean v5 = v4.isUidPrivileged(p3);
	String v6 = String.valueOf(p1);
	Object v6 = new Object(2);
	Long v7 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v6);
	String v9 = String.valueOf(p1);
	Object v9 = new Object(2);
	Long v10 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v9);
	return phiInstruction;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 1
public void getRunningTasks(int p1, List p2, int p3, int p4, ArraySet p5, int p6){
	DisplayContent v1 = p0.getDisplayContent(p6);
	RunningTasks v2 = this.mTaskSupervisor.getRunningTasks();
	RecentTasks v3 = this.mService.getRecentTasks();
	v2.getTasks(p1, p2, p3, v3, phiInstruction, p4, p5);
	return;
}
-----
depth : 2
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public RunningTasks getRunningTasks(){
	return this.mRunningTasks;
}
-----
depth : 2
public RecentTasks getRecentTasks(){
	return this.mRecentTasks;
}
-----
depth : 2
public void getTasks(int p1, List p2, int p3, RecentTasks p4, WindowContainer p5, int p6, ArraySet p7){
	this.mTmpSortedSet.clear();
	this.mCallingUid = p6;
	int v2 = UserHandle.getUserId(p6);
	this.mUserId = v2;
	this.mCrossUser = phiInstruction;
	this.mProfileIds = p7;
	this.mAllowed = phiInstruction;
	this.mFilterOnlyVisibleRecents = phiInstruction;
	this.mRecentTasks = p4;
	this.mKeepIntentExtra = phiInstruction;
	RunningTasks$$ExternalSyntheticLambda0 v2 = new RunningTasks$$ExternalSyntheticLambda0();
	ArgumentPlaceholder v4 = PooledLambda.__(Tas.class);
	PooledConsumer v5 = PooledLambda.obtainConsumer(v2, p0, v4);
	p5.forAllLeafTasks(v5, 0);
	v5.recycle();
	Iterator v8 = this.mTmpSortedSet.iterator();
	boolean v9 = v8.hasNext();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	boolean v3 = p0.isCrossUserAllowed(v2, v1);
	UserManagerService v4 = p0.getUserManager();
	int v5 = UserHandle.getUserId(v1);
	[I v6 = v4.getProfileIds(v5, 1);
	ArraySet v6 = new ArraySet();
	ArrayList v7 = new ArrayList();
	WindowManagerService.boostPriorityForLockedSection();
	boolean v10 = p0.isGetTasksAllowed("getTasks", v2, v1);
	this.mRootWindowContainer.getRunningTasks(p1, v7, (((p2 | phiInstruction) | phiInstruction) | phiInstruction), v1, v6, p4);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v7;
}
-----
depth : 1
public boolean isCrossUserAllowed(int p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public [I getProfileIds(int p1, boolean p2){
	[I v1 = p0.getProfileIds(p1, 0, p2);
	return v1;
}
-----
depth : 2
public [I getProfileIds(int p1, String p2, boolean p3){
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("getting profiles related to user ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v5);
	long v7 = Binder.clearCallingIdentity();
	IntArray v8 = p0.getProfileIdsLU(p1, p2, p3);
	[I v9 = v8.toArray();
	Binder.restoreCallingIdentity(v7);
	return v9;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public boolean isGetTasksAllowed(String p1, int p2, int p3){
	IPackageManager v4 = AppGlobals.getPackageManager();
	boolean v5 = v4.isUidPrivileged(p3);
	String v6 = String.valueOf(p1);
	Object v6 = new Object(2);
	Long v7 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v6);
	String v9 = String.valueOf(p1);
	Object v9 = new Object(2);
	Long v10 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v9);
	return phiInstruction;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 1
public void getRunningTasks(int p1, List p2, int p3, int p4, ArraySet p5, int p6){
	DisplayContent v1 = p0.getDisplayContent(p6);
	RunningTasks v2 = this.mTaskSupervisor.getRunningTasks();
	RecentTasks v3 = this.mService.getRecentTasks();
	v2.getTasks(p1, p2, p3, v3, phiInstruction, p4, p5);
	return;
}
-----
depth : 2
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public RunningTasks getRunningTasks(){
	return this.mRunningTasks;
}
-----
depth : 2
public RecentTasks getRecentTasks(){
	return this.mRecentTasks;
}
-----
depth : 2
public void getTasks(int p1, List p2, int p3, RecentTasks p4, WindowContainer p5, int p6, ArraySet p7){
	this.mTmpSortedSet.clear();
	this.mCallingUid = p6;
	int v2 = UserHandle.getUserId(p6);
	this.mUserId = v2;
	this.mCrossUser = phiInstruction;
	this.mProfileIds = p7;
	this.mAllowed = phiInstruction;
	this.mFilterOnlyVisibleRecents = phiInstruction;
	this.mRecentTasks = p4;
	this.mKeepIntentExtra = phiInstruction;
	RunningTasks$$ExternalSyntheticLambda0 v2 = new RunningTasks$$ExternalSyntheticLambda0();
	ArgumentPlaceholder v4 = PooledLambda.__(Tas.class);
	PooledConsumer v5 = PooledLambda.obtainConsumer(v2, p0, v4);
	p5.forAllLeafTasks(v5, 0);
	v5.recycle();
	Iterator v8 = this.mTmpSortedSet.iterator();
	boolean v9 = v8.hasNext();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
