This is path 1 for the API with depth 2:
depth : 0
public void onPictureInPictureStateChanged(PictureInPictureUiState p1){
	ActivityTaskManagerService.enforceTaskPermission("onPictureInPictureStateChanged");
	TaskDisplayArea v2 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v3 = v2.getRootPinnedTask();
	ActivityRecord v4 = v3.getTopMostActivity();
	ActivityRecord v5 = v3.getTopMostActivity();
	this.mActivityClientController.onPictureInPictureStateChanged(v5, p1);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDisplayAreaPolicy.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 1
public ActivityRecord getTopMostActivity(){
	WindowContainer$$ExternalSyntheticLambda2 v0 = new WindowContainer$$ExternalSyntheticLambda2();
	ActivityRecord v2 = p0.getActivity(v0, 1);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1, boolean p2){
	ActivityRecord v1 = p0.getActivity(p1, p2, 0);
	return v1;
}
-----
depth : 1
public ActivityRecord getTopMostActivity(){
	WindowContainer$$ExternalSyntheticLambda2 v0 = new WindowContainer$$ExternalSyntheticLambda2();
	ActivityRecord v2 = p0.getActivity(v0, 1);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1, boolean p2){
	ActivityRecord v1 = p0.getActivity(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void onPictureInPictureStateChanged(ActivityRecord p1, PictureInPictureUiState p2){
	boolean v1 = p1.inPinnedWindowingMode();
	IApplicationThread v2 = ActivityRecord.app.getThread();
	ClientTransaction v3 = ClientTransaction.obtain(v2, WindowToken.token);
	PipStateTransactionItem v4 = PipStateTransactionItem.obtain(p2);
	v3.addCallback(v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Failed to send pip state transaction item: ");
	ComponentName v8 = ActivityRecord.intent.getComponent();
	StringBuilder v9 = v5.append(v8);
	String v10 = v5.toString();
	int v11 = Slog.w("ActivityTaskManager", v10, caughtException);
	return;
}
-----
depth : 2
public boolean inPinnedWindowingMode(){
	int v1 = Configuration.windowConfiguration.getWindowingMode();
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 2
public ClientTransaction obtain(IApplicationThread p1, IBinder p2){
	ObjectPoolItem v1 = ObjectPool.obtain(ClientTransactio.class);
	ClientTransaction v1 = new ClientTransaction();
	this.mClient = p1;
	this.mActivityToken = p2;
	return phiInstruction;
}
-----
depth : 2
public PipStateTransactionItem obtain(PictureInPictureUiState p1){
	ObjectPoolItem v1 = ObjectPool.obtain(PipStateTransactionIte.class);
	PipStateTransactionItem v1 = new PipStateTransactionItem();
	this.mPipState = p1;
	return phiInstruction;
}
-----
depth : 2
public void addCallback(ClientTransactionItem p1){
	ArrayList v0 = new ArrayList();
	this.mActivityCallbacks = v0;
	boolean v2 = this.mActivityCallbacks.add(p1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void onPictureInPictureStateChanged(PictureInPictureUiState p1){
	ActivityTaskManagerService.enforceTaskPermission("onPictureInPictureStateChanged");
	TaskDisplayArea v2 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v3 = v2.getRootPinnedTask();
	ActivityRecord v4 = v3.getTopMostActivity();
	ActivityRecord v5 = v3.getTopMostActivity();
	this.mActivityClientController.onPictureInPictureStateChanged(v5, p1);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDisplayAreaPolicy.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 1
public ActivityRecord getTopMostActivity(){
	WindowContainer$$ExternalSyntheticLambda2 v0 = new WindowContainer$$ExternalSyntheticLambda2();
	ActivityRecord v2 = p0.getActivity(v0, 1);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1, boolean p2){
	ActivityRecord v1 = p0.getActivity(p1, p2, 0);
	return v1;
}
-----
depth : 1
public ActivityRecord getTopMostActivity(){
	WindowContainer$$ExternalSyntheticLambda2 v0 = new WindowContainer$$ExternalSyntheticLambda2();
	ActivityRecord v2 = p0.getActivity(v0, 1);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1, boolean p2){
	ActivityRecord v1 = p0.getActivity(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void onPictureInPictureStateChanged(ActivityRecord p1, PictureInPictureUiState p2){
	boolean v1 = p1.inPinnedWindowingMode();
	IApplicationThread v2 = ActivityRecord.app.getThread();
	ClientTransaction v3 = ClientTransaction.obtain(v2, WindowToken.token);
	PipStateTransactionItem v4 = PipStateTransactionItem.obtain(p2);
	v3.addCallback(v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Failed to send pip state transaction item: ");
	ComponentName v8 = ActivityRecord.intent.getComponent();
	StringBuilder v9 = v5.append(v8);
	String v10 = v5.toString();
	int v11 = Slog.w("ActivityTaskManager", v10, caughtException);
	return;
}
-----
depth : 2
public boolean inPinnedWindowingMode(){
	int v1 = Configuration.windowConfiguration.getWindowingMode();
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 2
public ClientTransaction obtain(IApplicationThread p1, IBinder p2){
	ObjectPoolItem v1 = ObjectPool.obtain(ClientTransactio.class);
	ClientTransaction v1 = new ClientTransaction();
	this.mClient = p1;
	this.mActivityToken = p2;
	return phiInstruction;
}
-----
depth : 2
public PipStateTransactionItem obtain(PictureInPictureUiState p1){
	ObjectPoolItem v1 = ObjectPool.obtain(PipStateTransactionIte.class);
	PipStateTransactionItem v1 = new PipStateTransactionItem();
	this.mPipState = p1;
	return phiInstruction;
}
-----
depth : 2
public void addCallback(ClientTransactionItem p1){
	ArrayList v0 = new ArrayList();
	this.mActivityCallbacks = v0;
	boolean v2 = this.mActivityCallbacks.add(p1);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void onPictureInPictureStateChanged(PictureInPictureUiState p1){
	ActivityTaskManagerService.enforceTaskPermission("onPictureInPictureStateChanged");
	TaskDisplayArea v2 = this.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v3 = v2.getRootPinnedTask();
	ActivityRecord v4 = v3.getTopMostActivity();
	ActivityRecord v5 = v3.getTopMostActivity();
	this.mActivityClientController.onPictureInPictureStateChanged(v5, p1);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	return;
}
-----
depth : 1
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDisplayAreaPolicy.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 1
public ActivityRecord getTopMostActivity(){
	WindowContainer$$ExternalSyntheticLambda2 v0 = new WindowContainer$$ExternalSyntheticLambda2();
	ActivityRecord v2 = p0.getActivity(v0, 1);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1, boolean p2){
	ActivityRecord v1 = p0.getActivity(p1, p2, 0);
	return v1;
}
-----
depth : 1
public ActivityRecord getTopMostActivity(){
	WindowContainer$$ExternalSyntheticLambda2 v0 = new WindowContainer$$ExternalSyntheticLambda2();
	ActivityRecord v2 = p0.getActivity(v0, 1);
	return v2;
}
-----
depth : 2
public ActivityRecord getActivity(Predicate p1, boolean p2){
	ActivityRecord v1 = p0.getActivity(p1, p2, 0);
	return v1;
}
-----
depth : 1
public void onPictureInPictureStateChanged(ActivityRecord p1, PictureInPictureUiState p2){
	boolean v1 = p1.inPinnedWindowingMode();
	IApplicationThread v2 = ActivityRecord.app.getThread();
	ClientTransaction v3 = ClientTransaction.obtain(v2, WindowToken.token);
	PipStateTransactionItem v4 = PipStateTransactionItem.obtain(p2);
	v3.addCallback(v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Failed to send pip state transaction item: ");
	ComponentName v8 = ActivityRecord.intent.getComponent();
	StringBuilder v9 = v5.append(v8);
	String v10 = v5.toString();
	int v11 = Slog.w("ActivityTaskManager", v10, caughtException);
	return;
}
-----
depth : 2
public boolean inPinnedWindowingMode(){
	int v1 = Configuration.windowConfiguration.getWindowingMode();
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 2
public ClientTransaction obtain(IApplicationThread p1, IBinder p2){
	ObjectPoolItem v1 = ObjectPool.obtain(ClientTransactio.class);
	ClientTransaction v1 = new ClientTransaction();
	this.mClient = p1;
	this.mActivityToken = p2;
	return phiInstruction;
}
-----
depth : 2
public PipStateTransactionItem obtain(PictureInPictureUiState p1){
	ObjectPoolItem v1 = ObjectPool.obtain(PipStateTransactionIte.class);
	PipStateTransactionItem v1 = new PipStateTransactionItem();
	this.mPipState = p1;
	return phiInstruction;
}
-----
depth : 2
public void addCallback(ClientTransactionItem p1){
	ArrayList v0 = new ArrayList();
	this.mActivityCallbacks = v0;
	boolean v2 = this.mActivityCallbacks.add(p1);
	return;
}
-----
