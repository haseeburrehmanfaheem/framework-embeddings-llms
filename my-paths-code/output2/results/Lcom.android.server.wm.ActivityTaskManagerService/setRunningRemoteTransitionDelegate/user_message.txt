This is path 1 for the API with depth 2:
depth : 0
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	WindowManagerService.boostPriorityForLockedSection();
	WindowProcessController v7 = p0.getProcessController(v4, v5);
	boolean v8 = v7.isRunningRemoteTransition();
	WindowProcessController v9 = p0.getProcessController(p1);
	TransitionController.mRemotePlayer.update(v9, 1, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public WindowProcessController getProcessController(int p1, int p2){
	WindowProcessController v1 = this.mProcessMap.getProcess(p1);
	return 0;
}
-----
depth : 2
public WindowProcessController getProcess(int p1){
	Object v1 = this.mPidMap.get(p1);
	return v1;
}
-----
depth : 1
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ArrayMap getMap(){
	return this.mMap;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void update(WindowProcessController p1, boolean p2, boolean p3){
	boolean v1 = p1.isRunningRemoteTransition();
	boolean v2 = p1.hasThread();
	p1.setRunningRemoteAnimation(1);
	TransitionController$RemotePlayer$DelegateProcess v3 = new TransitionController$RemotePlayer$DelegateProcess(p0,p1);
	TransitionController$RemotePlayer$DelegateProcess.mNeedReport = 1;
	boolean v5 = ActivityTaskManagerService.mH.postDelayed(v3, 100);
	IApplicationThread v6 = p1.getThread();
	IBinder v7 = v6.asBinder();
	Object v8 = this.mDelegateProcesses.put(v7, v3);
	return;
}
-----
depth : 2
public void setRunningRemoteAnimation(boolean p1){
	this.mRunningRemoteAnimation = p1;
	p0.updateRunningRemoteOrRecentsAnimation();
	return;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	WindowManagerService.boostPriorityForLockedSection();
	WindowProcessController v7 = p0.getProcessController(v4, v5);
	boolean v8 = v7.isRunningRemoteTransition();
	WindowProcessController v9 = p0.getProcessController(p1);
	TransitionController.mRemotePlayer.update(v9, 1, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public WindowProcessController getProcessController(int p1, int p2){
	WindowProcessController v1 = this.mProcessMap.getProcess(p1);
	return 0;
}
-----
depth : 2
public WindowProcessController getProcess(int p1){
	Object v1 = this.mPidMap.get(p1);
	return v1;
}
-----
depth : 1
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ArrayMap getMap(){
	return this.mMap;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void update(WindowProcessController p1, boolean p2, boolean p3){
	boolean v1 = p1.isRunningRemoteTransition();
	boolean v2 = p1.hasThread();
	p1.setRunningRemoteAnimation(1);
	TransitionController$RemotePlayer$DelegateProcess v3 = new TransitionController$RemotePlayer$DelegateProcess(p0,p1);
	TransitionController$RemotePlayer$DelegateProcess.mNeedReport = 1;
	boolean v5 = ActivityTaskManagerService.mH.postDelayed(v3, 100);
	IApplicationThread v6 = p1.getThread();
	IBinder v7 = v6.asBinder();
	Object v8 = this.mDelegateProcesses.put(v7, v3);
	return;
}
-----
depth : 2
public void setRunningRemoteAnimation(boolean p1){
	this.mRunningRemoteAnimation = p1;
	p0.updateRunningRemoteOrRecentsAnimation();
	return;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	WindowManagerService.boostPriorityForLockedSection();
	WindowProcessController v7 = p0.getProcessController(v4, v5);
	boolean v8 = v7.isRunningRemoteTransition();
	WindowProcessController v9 = p0.getProcessController(p1);
	TransitionController.mRemotePlayer.update(v9, 1, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public WindowProcessController getProcessController(int p1, int p2){
	WindowProcessController v1 = this.mProcessMap.getProcess(p1);
	return 0;
}
-----
depth : 2
public WindowProcessController getProcess(int p1){
	Object v1 = this.mPidMap.get(p1);
	return v1;
}
-----
depth : 1
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ArrayMap getMap(){
	return this.mMap;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void update(WindowProcessController p1, boolean p2, boolean p3){
	boolean v1 = p1.isRunningRemoteTransition();
	boolean v2 = p1.hasThread();
	p1.setRunningRemoteAnimation(1);
	TransitionController$RemotePlayer$DelegateProcess v3 = new TransitionController$RemotePlayer$DelegateProcess(p0,p1);
	TransitionController$RemotePlayer$DelegateProcess.mNeedReport = 1;
	boolean v5 = ActivityTaskManagerService.mH.postDelayed(v3, 100);
	IApplicationThread v6 = p1.getThread();
	IBinder v7 = v6.asBinder();
	Object v8 = this.mDelegateProcesses.put(v7, v3);
	return;
}
-----
depth : 2
public void setRunningRemoteAnimation(boolean p1){
	this.mRunningRemoteAnimation = p1;
	p0.updateRunningRemoteOrRecentsAnimation();
	return;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
