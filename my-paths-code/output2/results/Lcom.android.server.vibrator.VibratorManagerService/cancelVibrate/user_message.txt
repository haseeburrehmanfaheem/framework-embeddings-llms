This is path 1 for the API with depth 2:
depth : 0
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v2 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v4 = Binder.clearCallingIdentity();
	Vibration v5 = this.mNextVibration.getVibration();
	boolean v6 = p0.shouldCancelVibration(v5, p1, p2);
	p0.clearNextVibrationLocked(v2);
	Vibration v8 = this.mCurrentVibration.getVibration();
	boolean v9 = p0.shouldCancelVibration(v8, p1, p2);
	this.mCurrentVibration.notifyCancelled(v2, 0);
	VibrationAttributes v11 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
	boolean v12 = p0.shouldCancelVibration(v11, p1);
	this.mCurrentExternalVibration.mute();
	p0.endExternalVibrateLocked(v2, 0);
	Binder.restoreCallingIdentity(v4);
	Trace.traceEnd(8388608);
	return;
}
-----
depth : 1
public Vibration getVibration(){
	return this.mVibration;
}
-----
depth : 1
public boolean shouldCancelVibration(Vibration p1, int p2, IBinder p3){
	boolean v1 = p0.shouldCancelVibration(Vibration.attrs, p2);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 1
public void clearNextVibrationLocked(Vibration$EndInfo p1){
	Vibration v1 = this.mNextVibration.getVibration();
	p0.endVibrationLocked(v1, p1, 1);
	this.mNextVibration = 0;
	return;
}
-----
depth : 2
public Vibration getVibration(){
	return this.mVibration;
}
-----
depth : 2
public void endVibrationLocked(Vibration p1, Vibration$EndInfo p2, boolean p3){
	p1.end(p2);
	p0.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
	this.mVibratorManagerRecords.record(p1);
	long v4 = SystemClock.uptimeMillis();
	VibrationStats$StatsInfo v5 = p1.getStatsInfo(v4);
	this.mFrameworkStatsLogger.writeVibrationReportedAsync(v5);
	return;
}
-----
depth : 1
public boolean shouldCancelVibration(Vibration p1, int p2, IBinder p3){
	boolean v1 = p0.shouldCancelVibration(Vibration.attrs, p2);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 1
public void notifyCancelled(Vibration$EndInfo p1, boolean p2){
	VibrationStepConductor.expectIsVibrationThread(0);
	String v2 = Vibration$EndInfo.status.name();
	boolean v3 = v2.startsWith("CANCEL");
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("Vibration cancel requested with bad signal=");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append(", using CANCELLED_UNKNOWN_REASON to ensure cancellation.");
	String v8 = v3.toString();
	int v9 = Slog.w("VibrationThread", v8);
	Vibration$EndInfo v9 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_UNKNOWN_REASON);
	this.mSignalCancelImmediate = (p2 | this.mSignalCancelImmediate);
	this.mSignalCancel = phiInstruction;
	this.mLock.notify();
	return;
}
-----
depth : 2
public void expectIsVibrationThread(boolean p1){
	Thread v1 = Thread.currentThread();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Thread caller assertion failed, expected isVibrationThread=");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.wtfStack("VibrationStepConductor", v5);
	return;
}
-----
depth : 1
public VibrationAttributes getVibrationAttributes(){
	VibrationAttributes$Builder v0 = new VibrationAttributes$Builder(this.mAttrs);
	VibrationAttributes v2 = v0.build();
	return v2;
}
-----
depth : 2
public VibrationAttributes build(){
	VibrationAttributes v0 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	return v0;
}
-----
depth : 1
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 1
public void mute(){
	boolean v1 = this.externalVibration.mute();
	return;
}
-----
depth : 2
public boolean mute(){
	boolean v1 = this.mController.mute();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Failed to mute vibration stream: ");
	StringBuilder v4 = v3.append(p0);
	String v5 = v4.toString();
	int v6 = Slog.wtf("ExternalVibration", v5, caughtException);
	return 0;
}
-----
depth : 1
public void endExternalVibrateLocked(Vibration$EndInfo p1, boolean p2){
	Trace.traceBegin(8388608, "endExternalVibrateLocked");
	this.mCurrentExternalVibration.unlinkToDeath();
	p0.setExternalControl(0, VibratorManagerService$ExternalVibrationHolder.stats);
	p0.endVibrationAndWriteStatsLocked(this.mCurrentExternalVibration, p1);
	this.mCurrentExternalVibration = 0;
	Trace.traceEnd(8388608);
	return;
}
-----
depth : 2
public void unlinkToDeath(){
	this.externalVibration.unlinkToDeath(p0);
	return;
}
-----
depth : 2
public void setExternalControl(boolean p1, VibrationStats p2){
	int v1 = this.mVibrators.size();
	return;
}
-----
depth : 2
public void endVibrationAndWriteStatsLocked(VibratorManagerService$ExternalVibrationHolder p1, Vibration$EndInfo p2){
	p1.end(p2);
	int v2 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getUid();
	VibrationAttributes v3 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
	p0.logVibrationStatus(v2, v3, Vibration$EndInfo.status);
	this.mVibratorManagerRecords.record(p1);
	long v6 = SystemClock.uptimeMillis();
	VibrationStats$StatsInfo v7 = p1.getStatsInfo(v6);
	this.mFrameworkStatsLogger.writeVibrationReportedAsync(v7);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v2 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v4 = Binder.clearCallingIdentity();
	Vibration v5 = this.mNextVibration.getVibration();
	boolean v6 = p0.shouldCancelVibration(v5, p1, p2);
	p0.clearNextVibrationLocked(v2);
	Vibration v8 = this.mCurrentVibration.getVibration();
	boolean v9 = p0.shouldCancelVibration(v8, p1, p2);
	this.mCurrentVibration.notifyCancelled(v2, 0);
	VibrationAttributes v11 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
	boolean v12 = p0.shouldCancelVibration(v11, p1);
	this.mCurrentExternalVibration.mute();
	p0.endExternalVibrateLocked(v2, 0);
	Binder.restoreCallingIdentity(v4);
	Trace.traceEnd(8388608);
	return;
}
-----
depth : 1
public Vibration getVibration(){
	return this.mVibration;
}
-----
depth : 1
public boolean shouldCancelVibration(Vibration p1, int p2, IBinder p3){
	boolean v1 = p0.shouldCancelVibration(Vibration.attrs, p2);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 1
public void clearNextVibrationLocked(Vibration$EndInfo p1){
	Vibration v1 = this.mNextVibration.getVibration();
	p0.endVibrationLocked(v1, p1, 1);
	this.mNextVibration = 0;
	return;
}
-----
depth : 2
public Vibration getVibration(){
	return this.mVibration;
}
-----
depth : 2
public void endVibrationLocked(Vibration p1, Vibration$EndInfo p2, boolean p3){
	p1.end(p2);
	p0.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
	this.mVibratorManagerRecords.record(p1);
	long v4 = SystemClock.uptimeMillis();
	VibrationStats$StatsInfo v5 = p1.getStatsInfo(v4);
	this.mFrameworkStatsLogger.writeVibrationReportedAsync(v5);
	return;
}
-----
depth : 1
public boolean shouldCancelVibration(Vibration p1, int p2, IBinder p3){
	boolean v1 = p0.shouldCancelVibration(Vibration.attrs, p2);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 1
public void notifyCancelled(Vibration$EndInfo p1, boolean p2){
	VibrationStepConductor.expectIsVibrationThread(0);
	String v2 = Vibration$EndInfo.status.name();
	boolean v3 = v2.startsWith("CANCEL");
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("Vibration cancel requested with bad signal=");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append(", using CANCELLED_UNKNOWN_REASON to ensure cancellation.");
	String v8 = v3.toString();
	int v9 = Slog.w("VibrationThread", v8);
	Vibration$EndInfo v9 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_UNKNOWN_REASON);
	this.mSignalCancelImmediate = (p2 | this.mSignalCancelImmediate);
	this.mSignalCancel = phiInstruction;
	this.mLock.notify();
	return;
}
-----
depth : 2
public void expectIsVibrationThread(boolean p1){
	Thread v1 = Thread.currentThread();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Thread caller assertion failed, expected isVibrationThread=");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.wtfStack("VibrationStepConductor", v5);
	return;
}
-----
depth : 1
public VibrationAttributes getVibrationAttributes(){
	VibrationAttributes$Builder v0 = new VibrationAttributes$Builder(this.mAttrs);
	VibrationAttributes v2 = v0.build();
	return v2;
}
-----
depth : 2
public VibrationAttributes build(){
	VibrationAttributes v0 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	return v0;
}
-----
depth : 1
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 1
public void mute(){
	boolean v1 = this.externalVibration.mute();
	return;
}
-----
depth : 2
public boolean mute(){
	boolean v1 = this.mController.mute();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Failed to mute vibration stream: ");
	StringBuilder v4 = v3.append(p0);
	String v5 = v4.toString();
	int v6 = Slog.wtf("ExternalVibration", v5, caughtException);
	return 0;
}
-----
depth : 1
public void endExternalVibrateLocked(Vibration$EndInfo p1, boolean p2){
	Trace.traceBegin(8388608, "endExternalVibrateLocked");
	this.mCurrentExternalVibration.unlinkToDeath();
	p0.setExternalControl(0, VibratorManagerService$ExternalVibrationHolder.stats);
	p0.endVibrationAndWriteStatsLocked(this.mCurrentExternalVibration, p1);
	this.mCurrentExternalVibration = 0;
	Trace.traceEnd(8388608);
	return;
}
-----
depth : 2
public void unlinkToDeath(){
	this.externalVibration.unlinkToDeath(p0);
	return;
}
-----
depth : 2
public void setExternalControl(boolean p1, VibrationStats p2){
	int v1 = this.mVibrators.size();
	return;
}
-----
depth : 2
public void endVibrationAndWriteStatsLocked(VibratorManagerService$ExternalVibrationHolder p1, Vibration$EndInfo p2){
	p1.end(p2);
	int v2 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getUid();
	VibrationAttributes v3 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
	p0.logVibrationStatus(v2, v3, Vibration$EndInfo.status);
	this.mVibratorManagerRecords.record(p1);
	long v6 = SystemClock.uptimeMillis();
	VibrationStats$StatsInfo v7 = p1.getStatsInfo(v6);
	this.mFrameworkStatsLogger.writeVibrationReportedAsync(v7);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v2 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v4 = Binder.clearCallingIdentity();
	Vibration v5 = this.mNextVibration.getVibration();
	boolean v6 = p0.shouldCancelVibration(v5, p1, p2);
	p0.clearNextVibrationLocked(v2);
	Vibration v8 = this.mCurrentVibration.getVibration();
	boolean v9 = p0.shouldCancelVibration(v8, p1, p2);
	this.mCurrentVibration.notifyCancelled(v2, 0);
	VibrationAttributes v11 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
	boolean v12 = p0.shouldCancelVibration(v11, p1);
	this.mCurrentExternalVibration.mute();
	p0.endExternalVibrateLocked(v2, 0);
	Binder.restoreCallingIdentity(v4);
	Trace.traceEnd(8388608);
	return;
}
-----
depth : 1
public Vibration getVibration(){
	return this.mVibration;
}
-----
depth : 1
public boolean shouldCancelVibration(Vibration p1, int p2, IBinder p3){
	boolean v1 = p0.shouldCancelVibration(Vibration.attrs, p2);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 1
public void clearNextVibrationLocked(Vibration$EndInfo p1){
	Vibration v1 = this.mNextVibration.getVibration();
	p0.endVibrationLocked(v1, p1, 1);
	this.mNextVibration = 0;
	return;
}
-----
depth : 2
public Vibration getVibration(){
	return this.mVibration;
}
-----
depth : 2
public void endVibrationLocked(Vibration p1, Vibration$EndInfo p2, boolean p3){
	p1.end(p2);
	p0.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
	this.mVibratorManagerRecords.record(p1);
	long v4 = SystemClock.uptimeMillis();
	VibrationStats$StatsInfo v5 = p1.getStatsInfo(v4);
	this.mFrameworkStatsLogger.writeVibrationReportedAsync(v5);
	return;
}
-----
depth : 1
public boolean shouldCancelVibration(Vibration p1, int p2, IBinder p3){
	boolean v1 = p0.shouldCancelVibration(Vibration.attrs, p2);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 1
public void notifyCancelled(Vibration$EndInfo p1, boolean p2){
	VibrationStepConductor.expectIsVibrationThread(0);
	String v2 = Vibration$EndInfo.status.name();
	boolean v3 = v2.startsWith("CANCEL");
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("Vibration cancel requested with bad signal=");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append(", using CANCELLED_UNKNOWN_REASON to ensure cancellation.");
	String v8 = v3.toString();
	int v9 = Slog.w("VibrationThread", v8);
	Vibration$EndInfo v9 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_UNKNOWN_REASON);
	this.mSignalCancelImmediate = (p2 | this.mSignalCancelImmediate);
	this.mSignalCancel = phiInstruction;
	this.mLock.notify();
	return;
}
-----
depth : 2
public void expectIsVibrationThread(boolean p1){
	Thread v1 = Thread.currentThread();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Thread caller assertion failed, expected isVibrationThread=");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.wtfStack("VibrationStepConductor", v5);
	return;
}
-----
depth : 1
public VibrationAttributes getVibrationAttributes(){
	VibrationAttributes$Builder v0 = new VibrationAttributes$Builder(this.mAttrs);
	VibrationAttributes v2 = v0.build();
	return v2;
}
-----
depth : 2
public VibrationAttributes build(){
	VibrationAttributes v0 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	return v0;
}
-----
depth : 1
public boolean shouldCancelVibration(VibrationAttributes p1, int p2){
	int v1 = p1.getUsage();
	int v2 = p1.getUsage();
	int v3 = p1.getUsage();
	return phiInstruction;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 1
public void mute(){
	boolean v1 = this.externalVibration.mute();
	return;
}
-----
depth : 2
public boolean mute(){
	boolean v1 = this.mController.mute();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Failed to mute vibration stream: ");
	StringBuilder v4 = v3.append(p0);
	String v5 = v4.toString();
	int v6 = Slog.wtf("ExternalVibration", v5, caughtException);
	return 0;
}
-----
depth : 1
public void endExternalVibrateLocked(Vibration$EndInfo p1, boolean p2){
	Trace.traceBegin(8388608, "endExternalVibrateLocked");
	this.mCurrentExternalVibration.unlinkToDeath();
	p0.setExternalControl(0, VibratorManagerService$ExternalVibrationHolder.stats);
	p0.endVibrationAndWriteStatsLocked(this.mCurrentExternalVibration, p1);
	this.mCurrentExternalVibration = 0;
	Trace.traceEnd(8388608);
	return;
}
-----
depth : 2
public void unlinkToDeath(){
	this.externalVibration.unlinkToDeath(p0);
	return;
}
-----
depth : 2
public void setExternalControl(boolean p1, VibrationStats p2){
	int v1 = this.mVibrators.size();
	return;
}
-----
depth : 2
public void endVibrationAndWriteStatsLocked(VibratorManagerService$ExternalVibrationHolder p1, Vibration$EndInfo p2){
	p1.end(p2);
	int v2 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getUid();
	VibrationAttributes v3 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
	p0.logVibrationStatus(v2, v3, Vibration$EndInfo.status);
	this.mVibratorManagerRecords.record(p1);
	long v6 = SystemClock.uptimeMillis();
	VibrationStats$StatsInfo v7 = p1.getStatsInfo(v6);
	this.mFrameworkStatsLogger.writeVibrationReportedAsync(v7);
	return;
}
-----
