The method setDeviceLockedForUser has the following code snippet:

This is path 1 for the API with depth 2:
public void setDeviceLockedForUser(int p1, boolean p2){
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = this.mLockPatternUtils;
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	if (v4 == 0) {
		LockPatternUtils v5 = this.mLockPatternUtils;
		boolean v6 = v5.isSecure(p1);
		if (v6 == 0) {
			SparseBooleanArray v7 = this.mDeviceLockedForUser;
			SparseBooleanArray v8 = this.mDeviceLockedForUser;
			v8.put(p1, p2);
			Object v12 = this.mContext.getSystemService(BiometricManage.class);
			if (v12 != 0) {
				[J v13 = v12.getAuthenticatorIds(p2);
				[J v11 = v13;
				[J v10 = v11;
				if (p2 == 0) {
					IBinder v16 = ServiceManager.checkService("android.security.authorization");
					IKeystoreAuthorization v17 = IKeystoreAuthorization$Stub.asInterface(v16);
					IKeystoreAuthorization v15 = v17;
					v15.onLockScreenEvent(1, p1, 0, v10);
					int v14 = ServiceSpecificException.errorCode;
					if (p2 == 0) {
						IActivityManager v19 = ActivityManager.getService();
						v19.notifyLockedProfile(p1);
						Intent v21 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
						Intent v23 = v21.addFlags(1073741824);
						Intent v24 = v21.putExtra("android.intent.extra.user_handle", p1);
						Context v25 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);
						v25.sendBroadcastAsUser(v21, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
						Binder.restoreCallingIdentity(v2);
						return;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setDeviceLockedForUser(int p1, boolean p2){
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = this.mLockPatternUtils;
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	if (v4 == 0) {
		LockPatternUtils v5 = this.mLockPatternUtils;
		boolean v6 = v5.isSecure(p1);
		if (v6 == 0) {
			SparseBooleanArray v7 = this.mDeviceLockedForUser;
			SparseBooleanArray v8 = this.mDeviceLockedForUser;
			v8.put(p1, p2);
			Object v12 = this.mContext.getSystemService(BiometricManage.class);
			if (v12 != 0) {
				[J v13 = v12.getAuthenticatorIds(p2);
				[J v11 = v13;
				[J v10 = v11;
				if (p2 == 0) {
					IBinder v16 = ServiceManager.checkService("android.security.authorization");
					IKeystoreAuthorization v17 = IKeystoreAuthorization$Stub.asInterface(v16);
					IKeystoreAuthorization v15 = v17;
					v15.onLockScreenEvent(1, p1, 0, v10);
					int v19 = Log.w("KeystoreAuthorization", "Can not connect to keystore", caughtException);
					int v14 = 4;
					if (p2 == 0) {
						IActivityManager v20 = ActivityManager.getService();
						v20.notifyLockedProfile(p1);
						Intent v22 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
						Intent v24 = v22.addFlags(1073741824);
						Intent v25 = v22.putExtra("android.intent.extra.user_handle", p1);
						Context v26 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);
						v26.sendBroadcastAsUser(v22, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
						Binder.restoreCallingIdentity(v2);
						return;
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setDeviceLockedForUser(int p1, boolean p2){
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = this.mLockPatternUtils;
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	if (v4 == 0) {
		LockPatternUtils v5 = this.mLockPatternUtils;
		boolean v6 = v5.isSecure(p1);
		if (v6 == 0) {
			SparseBooleanArray v7 = this.mDeviceLockedForUser;
			SparseBooleanArray v8 = this.mDeviceLockedForUser;
			v8.put(p1, p2);
			Object v12 = this.mContext.getSystemService(BiometricManage.class);
			if (v12 != 0) {
				[J v13 = v12.getAuthenticatorIds(p2);
				[J v11 = v13;
				[J v10 = v11;
				if (p2 == 0) {
					IBinder v16 = ServiceManager.checkService("android.security.authorization");
					IKeystoreAuthorization v17 = IKeystoreAuthorization$Stub.asInterface(v16);
					IKeystoreAuthorization v15 = v17;
					v15.onLockScreenEvent(1, p1, 0, v10);
					int v14 = ServiceSpecificException.errorCode;
					if (p2 == 0) {
						IActivityManager v19 = ActivityManager.getService();
						Intent v20 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
						Intent v22 = v20.addFlags(1073741824);
						Intent v23 = v20.putExtra("android.intent.extra.user_handle", p1);
						Context v24 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);
						v24.sendBroadcastAsUser(v20, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
						Binder.restoreCallingIdentity(v2);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['SparseBooleanArray v7 = this.mDeviceLockedForUser;\nSparseBooleanArray v8 = this.mDeviceLockedForUser;\nv8.put(p1, p2);\nObject v12 = this.mContext.getSystemService(BiometricManage.class);\n[J v13 = v12.getAuthenticatorIds(p2);', 'LockPatternUtils v3 = this.mLockPatternUtils;\nboolean v4 = v3.isSeparateProfileChallengeEnabled(p1);\nLockPatternUtils v5 = this.mLockPatternUtils;\nboolean v6 = v5.isSecure(p1);', 'IBinder v16 = ServiceManager.checkService("android.security.authorization");\nIKeystoreAuthorization v17 = IKeystoreAuthorization$Stub.asInterface(v16);\nIKeystoreAuthorization v15 = v17;\nv15.onLockScreenEvent(1, p1, 0, v10);', 'Intent v21 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");\nIntent v23 = v21.addFlags(1073741824);\nIntent v24 = v21.putExtra("android.intent.extra.user_handle", p1);\nContext v25 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);\nv25.sendBroadcastAsUser(v21, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);']

The method setDeviceLockedForUser has the following similar APIs:

- API Name: getCredentialOwnerProfile(I)I with Similarity Score: 0.8236311674118042
  - Access Control Level: NONE and the following code:
boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);
Object v5 = this.mUsers.get(p1);
return p1;

- API Name: getCredentialOwnerProfile(I)I with Similarity Score: 0.8168919086456299
  - Access Control Level: NONE and the following code:
boolean v2 = this.mLockPatternUtils.isSeparateProfileChallengeEnabled(p1);
Object v5 = this.mUsers.get(p1);
return UserInfo.id;

