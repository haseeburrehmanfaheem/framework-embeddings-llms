The method createVirtualDisplay has the following code snippet:

This is path 1 for the API with depth 2:
public int createVirtualDisplay(VirtualDisplayConfig p1, IVirtualDisplayCallback p2, IVirtualDevice p3, String p4){
	long v9 = Binder.clearCallingIdentity();
	GenericWindowPolicyController v11 = new GenericWindowPolicyController(8192,524288,v12,v20,v22,v24,v26,v28,v29,v32,v34,v36);
	ArraySet v13 = new ArraySet();
	Object v15 = this.mContext.getSystemService(DevicePolicyManage.class);
	Object v16 = this.mContext.getSystemService(UserManage.class);
	List v17 = v16.getAllProfiles();
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	if (v19 == 0) {
		ArraySet v12 = v13;
		Set v21 = Collections.unmodifiableSet(this.mAllowedCrossTaskNavigations);
		Set v20 = v21;
		Set v23 = Collections.unmodifiableSet(this.mBlockedCrossTaskNavigations);
		Set v22 = v23;
		Set v25 = Collections.unmodifiableSet(this.mAllowedActivities);
		Set v24 = v25;
		Set v27 = Collections.unmodifiableSet(this.mBlockedActivities);
		Set v26 = v27;
		int v28 = this.mDefaultActivityPolicy;
		VirtualDeviceImpl$1 v30 = new VirtualDeviceImpl$1(VirtualDeviceImpl);
		VirtualDeviceManager$ActivityListener v29 = v30;
		VirtualDeviceImpl$$ExternalSyntheticLambda2 v32 = new VirtualDeviceImpl$$ExternalSyntheticLambda2(VirtualDeviceImpl);
		VirtualDeviceImpl$$ExternalSyntheticLambda3 v34 = new VirtualDeviceImpl$$ExternalSyntheticLambda3(VirtualDeviceImpl);
		String v36 = this.mDeviceProfile;
		boolean v39 = this.mRunningAppsChangedListener.add(p0);
		GenericWindowPolicyController v10 = v11;
		Binder.restoreCallingIdentity(v9);
		Object v41 = VirtualDeviceManagerService.access$000(this.this$0, DisplayManagerInterna.class);
		int v42 = v41.createVirtualDisplay(p1, p2, p3, v10, p4);
		long v43 = Binder.clearCallingIdentity();
		if (v42 != -1) {
			Integer v45 = Integer.valueOf(v42);
			boolean v46 = this.mVirtualDisplayIds.contains(v45);
			if (v46 != 0) {
				Integer v47 = Integer.valueOf(v42);
				boolean v48 = this.mVirtualDisplayIds.add(v47);
				this.mDisplayId = p2;
				this.mWindowPolicyControllers.put(v42, v10);
				this.mInputManagerInternal.setPointerIconVisible(this.mDefaultShowPointerIcon, p2);
				this.mInputManagerInternal.setPointerAcceleration(1065353216, p2);
				this.mInputManagerInternal.setDisplayEligibilityForPointerCapture(p2, 0);
				DisplayInfo v58 = this.mDisplayManagerInternal.getDisplayInfo(p2);
				if ((DisplayInfo.flags & 128) != 128) {
					this.mWindowManager.setDisplayImePolicy(p2, 0);
					Integer v60 = Integer.valueOf(v42);
					boolean v61 = this.mPerDisplayWakelocks.containsKey(v60);
					if (v61 == 0) {
						Object v62 = this.mContext.getSystemService(PowerManage.class);
						StringBuilder v63 = new StringBuilder();
						StringBuilder v65 = v63.append("VirtualDeviceImpl:");
						StringBuilder v66 = v63.append(v42);
						String v67 = v63.toString();
						PowerManager$WakeLock v68 = v62.newWakeLock(10, v67, v42);
						Integer v69 = Integer.valueOf(v42);
						Object v70 = this.mPerDisplayWakelocks.put(v69, v68);
						v68.acquire();
						Binder.restoreCallingIdentity(v43);
						VirtualDeviceManagerInternal v73 = VirtualDeviceManagerService.-$$Nest$fgetmLocalService(this.this$0);
						v73.onVirtualDisplayCreated(v42);
						return v42;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int createVirtualDisplay(VirtualDisplayConfig p1, IVirtualDisplayCallback p2, IVirtualDevice p3, String p4){
	long v9 = Binder.clearCallingIdentity();
	GenericWindowPolicyController v11 = new GenericWindowPolicyController(8192,524288,v12,v20,v22,v24,v26,v28,v29,v32,v34,v36);
	ArraySet v13 = new ArraySet();
	Object v15 = this.mContext.getSystemService(DevicePolicyManage.class);
	Object v16 = this.mContext.getSystemService(UserManage.class);
	List v17 = v16.getAllProfiles();
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	if (v19 == 0) {
		ArraySet v12 = v13;
		Set v21 = Collections.unmodifiableSet(this.mAllowedCrossTaskNavigations);
		Set v20 = v21;
		Set v23 = Collections.unmodifiableSet(this.mBlockedCrossTaskNavigations);
		Set v22 = v23;
		Set v25 = Collections.unmodifiableSet(this.mAllowedActivities);
		Set v24 = v25;
		Set v27 = Collections.unmodifiableSet(this.mBlockedActivities);
		Set v26 = v27;
		int v28 = this.mDefaultActivityPolicy;
		VirtualDeviceImpl$1 v30 = new VirtualDeviceImpl$1(VirtualDeviceImpl);
		VirtualDeviceManager$ActivityListener v29 = v30;
		VirtualDeviceImpl$$ExternalSyntheticLambda2 v32 = new VirtualDeviceImpl$$ExternalSyntheticLambda2(VirtualDeviceImpl);
		VirtualDeviceImpl$$ExternalSyntheticLambda3 v34 = new VirtualDeviceImpl$$ExternalSyntheticLambda3(VirtualDeviceImpl);
		String v36 = this.mDeviceProfile;
		boolean v39 = this.mRunningAppsChangedListener.add(p0);
		GenericWindowPolicyController v10 = v11;
		Binder.restoreCallingIdentity(v9);
		Object v41 = VirtualDeviceManagerService.access$000(this.this$0, DisplayManagerInterna.class);
		int v42 = v41.createVirtualDisplay(p1, p2, p3, v10, p4);
		long v43 = Binder.clearCallingIdentity();
		if (v42 != -1) {
			Integer v45 = Integer.valueOf(v42);
			boolean v46 = this.mVirtualDisplayIds.contains(v45);
			if (v46 != 0) {
				Integer v47 = Integer.valueOf(v42);
				boolean v48 = this.mVirtualDisplayIds.add(v47);
				this.mDisplayId = p2;
				this.mWindowPolicyControllers.put(v42, v10);
				this.mInputManagerInternal.setPointerIconVisible(this.mDefaultShowPointerIcon, p2);
				this.mInputManagerInternal.setPointerAcceleration(1065353216, p2);
				this.mInputManagerInternal.setDisplayEligibilityForPointerCapture(p2, 0);
				DisplayInfo v58 = this.mDisplayManagerInternal.getDisplayInfo(p2);
				if ((DisplayInfo.flags & 128) != 128) {
					Integer v59 = Integer.valueOf(v42);
					boolean v60 = this.mPerDisplayWakelocks.containsKey(v59);
					if (v60 == 0) {
						Object v61 = this.mContext.getSystemService(PowerManage.class);
						StringBuilder v62 = new StringBuilder();
						StringBuilder v64 = v62.append("VirtualDeviceImpl:");
						StringBuilder v65 = v62.append(v42);
						String v66 = v62.toString();
						PowerManager$WakeLock v67 = v61.newWakeLock(10, v66, v42);
						Integer v68 = Integer.valueOf(v42);
						Object v69 = this.mPerDisplayWakelocks.put(v68, v67);
						v67.acquire();
						Binder.restoreCallingIdentity(v43);
						VirtualDeviceManagerInternal v72 = VirtualDeviceManagerService.-$$Nest$fgetmLocalService(this.this$0);
						v72.onVirtualDisplayCreated(v42);
						return v42;
					}
				}
			}
		}
	}
}

and the following sink code:
['int v42 = v41.createVirtualDisplay(p1, p2, p3, v10, p4);\nthis.mWindowPolicyControllers.put(v42, v10);\nreturn v42;', 'GenericWindowPolicyController v11 = new GenericWindowPolicyController(8192,524288,v12,v20,v22,v24,v26,v28,v29,v32,v34,v36);\nthis.mInputManagerInternal.setPointerIconVisible(this.mDefaultShowPointerIcon, p2);\nthis.mInputManagerInternal.setPointerAcceleration(1065353216, p2);\nthis.mInputManagerInternal.setDisplayEligibilityForPointerCapture(p2, 0);', 'PowerManager$WakeLock v67 = v61.newWakeLock(10, v66, v42);\nv67.acquire();']

The method createVirtualDisplay has the following similar APIs:

- API Name: createVirtualDisplay(Landroid/hardware/display/VirtualDisplayConfig;Landroid/hardware/display/IVirtualDisplayCallback;Landroid/media/projection/IMediaProjection;Ljava/lang/String;)I with Similarity Score: 0.7814877033233643
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = this.this$0.createVirtualDisplayInternal(p1, p2, p3, 0, 0, p4);
int v1 = v2;
return v1;

- API Name: rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I with Similarity Score: 0.7134722471237183
  - Access Control Level: SYS_OR_SIG and the following code:
Object v55 = this.mContext.getSystemService("power");
PowerManager v54 = v55;
v54.reboot(p2);

