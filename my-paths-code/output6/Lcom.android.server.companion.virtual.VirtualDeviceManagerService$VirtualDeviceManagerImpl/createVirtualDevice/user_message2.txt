The method createVirtualDevice has the following code snippet:

This is path 1 for the API with depth 2:
public IVirtualDevice createVirtualDevice(IBinder p1, String p2, int p3, VirtualDeviceParams p4, IVirtualDeviceActivityListener p5){
	int v3 = IVirtualDeviceManager$Stub.getCallingUid();
	Context v4 = this.this$0.getContext();
	Binder.restoreCallingIdentity(v7);
	boolean v5 = 1;
	if (v5 == 0) {
		UserHandle v13 = IVirtualDeviceManager$Stub.getCallingUserHandle();
		int v14 = v13.getIdentifier();
		ConcurrentHashMap v15 = this.mAllAssociations;
		Integer v16 = Integer.valueOf(v14);
		Object v17 = v15.get(v16);
		if (v17 == 0) {
			AssociationInfo v12 = 0;
			if (v12 == 0) {
				Object v24 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);
				SparseArray v25 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
				boolean v26 = v25.contains(p3);
				if (v26 != 0) {
					int v27 = UserHandle.getUserId(v3);
					SparseArray v28 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);
					Object v29 = v28.get(v27);
					VirtualDeviceImpl v30 = new VirtualDeviceImpl(v31,v12,p1,v3,v32,p0,p5,v34,p4);
					Context v31 = this.this$0.getContext();
					VirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v32 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v29,v27);
					VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v34 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v29,v12);
					if (v29 == 0) {
						if (this.mObserverCount != 0) {
							Executor v38 = this.mContext.getMainExecutor();
							if (v38 == 0) {
								CameraManager$CameraManagerGlobal v40 = CameraManager$CameraManagerGlobal.get();
								v40.registerAvailabilityCallback(p0, v38, this.mHasOpenCloseListenerPermission);
								this.mObserverCount = (this.mObserverCount + 1);
								SparseArray v42 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
								int v43 = v12.getId();
								v42.put(v43, v30);
								return v30;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public IVirtualDevice createVirtualDevice(IBinder p1, String p2, int p3, VirtualDeviceParams p4, IVirtualDeviceActivityListener p5){
	int v3 = IVirtualDeviceManager$Stub.getCallingUid();
	Context v4 = this.this$0.getContext();
	Binder.restoreCallingIdentity(v7);
	boolean v5 = 1;
	if (v5 == 0) {
		UserHandle v13 = IVirtualDeviceManager$Stub.getCallingUserHandle();
		int v14 = v13.getIdentifier();
		ConcurrentHashMap v15 = this.mAllAssociations;
		Integer v16 = Integer.valueOf(v14);
		Object v17 = v15.get(v16);
		if (v17 == 0) {
			int v18 = v17.size();
			if ( >= v18) {
				AssociationInfo v12 = 0;
				if (v12 == 0) {
					Object v19 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);
					SparseArray v20 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
					boolean v21 = v20.contains(p3);
					if (v21 != 0) {
						int v22 = UserHandle.getUserId(v3);
						SparseArray v23 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);
						Object v24 = v23.get(v22);
						VirtualDeviceImpl v25 = new VirtualDeviceImpl(v26,v12,p1,v3,v27,p0,p5,v29,p4);
						Context v26 = this.this$0.getContext();
						VirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v27 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v24,v22);
						VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v29 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v24,v12);
						if (v24 == 0) {
							if (this.mObserverCount != 0) {
								Executor v33 = this.mContext.getMainExecutor();
								if (v33 == 0) {
									CameraManager$CameraManagerGlobal v35 = CameraManager$CameraManagerGlobal.get();
									v35.registerAvailabilityCallback(p0, v33, this.mHasOpenCloseListenerPermission);
									this.mObserverCount = (this.mObserverCount + 1);
									SparseArray v37 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
									int v38 = v12.getId();
									v37.put(v38, v25);
									return v25;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public IVirtualDevice createVirtualDevice(IBinder p1, String p2, int p3, VirtualDeviceParams p4, IVirtualDeviceActivityListener p5){
	int v3 = IVirtualDeviceManager$Stub.getCallingUid();
	Context v4 = this.this$0.getContext();
	Binder.restoreCallingIdentity(v7);
	boolean v5 = 1;
	if (v5 == 0) {
		UserHandle v13 = IVirtualDeviceManager$Stub.getCallingUserHandle();
		int v14 = v13.getIdentifier();
		ConcurrentHashMap v15 = this.mAllAssociations;
		Integer v16 = Integer.valueOf(v14);
		Object v17 = v15.get(v16);
		if (v17 == 0) {
			AssociationInfo v12 = 0;
			if (v12 == 0) {
				Object v24 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);
				SparseArray v25 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
				boolean v26 = v25.contains(p3);
				if (v26 != 0) {
					int v27 = UserHandle.getUserId(v3);
					SparseArray v28 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);
					Object v29 = v28.get(v27);
					VirtualDeviceImpl v30 = new VirtualDeviceImpl(v31,v12,p1,v3,v32,p0,p5,v34,p4);
					Context v31 = this.this$0.getContext();
					VirtualDeviceManagerService$VirtualDeviceManagerImpl$1 v32 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$1(p0,v29,v27);
					VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0 v34 = new VirtualDeviceManagerService$VirtualDeviceManagerImpl$$ExternalSyntheticLambda0(p0,v29,v12);
					if (v29 == 0) {
						SparseArray v43 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);
						int v44 = v12.getId();
						v43.put(v44, v30);
						return v30;
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v24 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDeviceManagerLock(this.this$0);\nSparseArray v25 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);\nboolean v26 = v25.contains(p3);\nint v27 = UserHandle.getUserId(v3);\nSparseArray v28 = VirtualDeviceManagerService.-$$Nest$fgetmCameraAccessControllers(this.this$0);\nObject v29 = v28.get(v27);\nVirtualDeviceImpl v30 = new VirtualDeviceImpl(v31,v12,p1,v3,v32,p0,p5,v34,p4);\nSparseArray v43 = VirtualDeviceManagerService.-$$Nest$fgetmVirtualDevices(this.this$0);\nint v44 = v12.getId();\nv43.put(v44, v30);\nreturn v30;']

The method createVirtualDevice has the following similar APIs:

- API Name: getSupportedTypes()[I with Similarity Score: 0.7020276784896851
  - Access Control Level: NONE and the following code:
List v5 = HdmiControlService.-$$Nest$fgetmLocalDevices(this.this$0);
int v6 = v5.size();
[I v7 = new [I(v6);
return v7;

