This is path 1 for the API with depth 2:
public void classifyContentSelections(int p1, ClassificationsRequest p2, IClassificationsCallback p3){
	int v1 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		boolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(p2);
		if (v6 != 0) {
			int v7 = Binder.getCallingUid();
			boolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);
			if (v8 == 0) {
				Object v9 = ContentSuggestionsManagerService.access$600(this.this$0);
				AbstractPerUserSystemService v10 = ContentSuggestionsManagerService.access$700(this.this$0, p1);
				if (v10 == 0) {
					if (this.mRemoteService != 0) {
						String v13 = ContentSuggestionsPerUserService.getComponentNameLocked();
						if (v13 != 0) {
							ComponentName v14 = ComponentName.unflattenFromString(v13);
							RemoteContentSuggestionsService v15 = new RemoteContentSuggestionsService(v16,v14,AbstractPerUserSystemService.mUserId,v17,v19,AbstractMasterSystemService.verbose);
							Context v16 = ContentSuggestionsPerUserService.getContext();
							ContentSuggestionsPerUserService$1 v17 = new ContentSuggestionsPerUserService$1(ContentSuggestionsPerUserService);
							boolean v19 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
							this.mRemoteService = v15;
							RemoteContentSuggestionsService v12 = this.mRemoteService;
							if (v12 == 0) {
								RemoteContentSuggestionsService$$ExternalSyntheticLambda0 v22 = new RemoteContentSuggestionsService$$ExternalSyntheticLambda0(p1,p2);
								RemoteContentSuggestionsService.scheduleAsyncRequest(v22);
								return;
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void classifyContentSelections(int p1, ClassificationsRequest p2, IClassificationsCallback p3){
	int v1 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		boolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(p2);
		if (v6 != 0) {
			Object v7 = ContentSuggestionsManagerService.access$600(this.this$0);
			AbstractPerUserSystemService v8 = ContentSuggestionsManagerService.access$700(this.this$0, p1);
			if (v8 == 0) {
				if (this.mRemoteService != 0) {
					String v11 = ContentSuggestionsPerUserService.getComponentNameLocked();
					if (v11 != 0) {
						ComponentName v12 = ComponentName.unflattenFromString(v11);
						RemoteContentSuggestionsService v13 = new RemoteContentSuggestionsService(v14,v12,AbstractPerUserSystemService.mUserId,v15,v17,AbstractMasterSystemService.verbose);
						Context v14 = ContentSuggestionsPerUserService.getContext();
						ContentSuggestionsPerUserService$1 v15 = new ContentSuggestionsPerUserService$1(ContentSuggestionsPerUserService);
						boolean v17 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
						this.mRemoteService = v13;
						RemoteContentSuggestionsService v10 = this.mRemoteService;
						if (v10 == 0) {
							RemoteContentSuggestionsService$$ExternalSyntheticLambda0 v20 = new RemoteContentSuggestionsService$$ExternalSyntheticLambda0(p1,p2);
							RemoteContentSuggestionsService.scheduleAsyncRequest(v20);
							return;
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void classifyContentSelections(int p1, ClassificationsRequest p2, IClassificationsCallback p3){
	int v1 = UserHandle.getCallingUserId();
	if (v5 == 0) {
		boolean v6 = AbstractMasterSystemService.mServiceNameResolver.isTemporary(p2);
		if (v6 != 0) {
			int v7 = Binder.getCallingUid();
			boolean v8 = this.mActivityTaskManagerInternal.isCallerRecents(v7);
			if (v8 == 0) {
				Object v9 = ContentSuggestionsManagerService.access$600(this.this$0);
				AbstractPerUserSystemService v10 = ContentSuggestionsManagerService.access$700(this.this$0, p1);
				if (v10 == 0) {
					if (this.mRemoteService != 0) {
						String v13 = ContentSuggestionsPerUserService.getComponentNameLocked();
						if (v13 != 0) {
							ComponentName v14 = ComponentName.unflattenFromString(v13);
							RemoteContentSuggestionsService v15 = new RemoteContentSuggestionsService(v16,v14,AbstractPerUserSystemService.mUserId,v17,v19,AbstractMasterSystemService.verbose);
							Context v16 = ContentSuggestionsPerUserService.getContext();
							ContentSuggestionsPerUserService$1 v17 = new ContentSuggestionsPerUserService$1(ContentSuggestionsPerUserService);
							boolean v19 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
							this.mRemoteService = v15;
							RemoteContentSuggestionsService v12 = this.mRemoteService;
							if (v12 == 0) {
								return;
							}
						}
					}
				}
			}
		}
	}
}
