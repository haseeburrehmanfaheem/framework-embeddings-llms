The method unpinSlice has the following code snippet:

This is path 1 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
			PinnedSliceState v30 = p0.getPinnedSlice(v29);
			if (v30 == 0) {
				boolean v32 = p3.unlinkToDeath(this.mDeathRecipient, 0);
				Object v33 = this.mListeners.remove(p3);
				boolean v35 = this.mPinnedPkgs.isEmpty();
				if (v35 == 0) {
					boolean v36 = this.mListeners.isEmpty();
					if (v36 != 0) {
						boolean v34 = ;
						boolean v31 = (v34 ^ 1);
						if (v31 == 0) {
							Object v38 = this.mPinnedSlicesByUri.remove(v29);
							PinnedSliceState.setSlicePinned(0);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v27 = Binder.getCallingUserHandle();
			int v28 = v27.getIdentifier();
			Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
			PinnedSliceState v30 = p0.getPinnedSlice(v29);
			if (v30 == 0) {
				boolean v32 = p3.unlinkToDeath(this.mDeathRecipient, 0);
				Object v33 = this.mListeners.remove(p3);
				boolean v35 = this.mPinnedPkgs.isEmpty();
				if (v35 == 0) {
					boolean v36 = this.mListeners.isEmpty();
					if (v36 != 0) {
						boolean v34 = ;
						boolean v31 = (v34 ^ 1);
						if (v31 == 0) {
							Object v38 = this.mPinnedSlicesByUri.remove(v29);
							PinnedSliceState.setSlicePinned(0);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v7 = v8;
	if (v7 == 0) {
		UserHandle v9 = Binder.getCallingUserHandle();
		int v10 = v9.getIdentifier();
		int v11 = ContentProvider.getUserIdFromUri(p2, v10);
		long v13 = Binder.clearCallingIdentity();
		Uri v14 = ContentProvider.getUriWithoutUserId(p2);
		String v15 = v14.getAuthority();
		PackageManager v16 = this.mContext.getPackageManager();
		int v17 = ContentProvider.getUserIdFromUri(p2, v11);
		ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
		Binder.restoreCallingIdentity(v13);
		String v12 = ProviderInfo.packageName;
		boolean v20 = Objects.equals(p1, v12);
		if (v20 == 0) {
			UserHandle v25 = Binder.getCallingUserHandle();
			int v26 = v25.getIdentifier();
			Uri v27 = ContentProvider.maybeAddUserId(p2, v26);
			PinnedSliceState v28 = p0.getPinnedSlice(v27);
			if (v28 == 0) {
				boolean v30 = p3.unlinkToDeath(this.mDeathRecipient, 0);
				Object v31 = this.mListeners.remove(p3);
				boolean v33 = this.mPinnedPkgs.isEmpty();
				if (v33 == 0) {
					boolean v34 = this.mListeners.isEmpty();
					if (v34 != 0) {
						boolean v32 = ;
						boolean v29 = (v32 ^ 1);
						if (v29 == 0) {
							Object v36 = this.mPinnedSlicesByUri.remove(v27);
							PinnedSliceState.setSlicePinned(0);
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Uri v29 = ContentProvider.maybeAddUserId(p2, v28);\nPinnedSliceState v30 = p0.getPinnedSlice(v29);\nObject v38 = this.mPinnedSlicesByUri.remove(v29);', 'Uri v14 = ContentProvider.getUriWithoutUserId(p2);\nString v15 = v14.getAuthority();\nProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);', 'boolean v32 = p3.unlinkToDeath(this.mDeathRecipient, 0);\nObject v33 = this.mListeners.remove(p3);']

The method unpinSlice has the following similar APIs:

- API Name: getPinnedSpecs(Landroid/net/Uri;Ljava/lang/String;)[Landroid/app/slice/SliceSpec; with Similarity Score: 0.9140397906303406
  - Access Control Level: SYS_OR_SIG and the following code:
Uri v27 = ContentProvider.maybeAddUserId(p1, v26);
PinnedSliceState v30 = p0.getPinnedSlice(v27);
SliceSpec v31 = v30.getSpecs();
return v31;

- API Name: pinSlice(Ljava/lang/String;Landroid/net/Uri;[Landroid/app/slice/SliceSpec;Landroid/os/IBinder;)V with Similarity Score: 0.8464053869247437
  - Access Control Level: SYS_OR_SIG and the following code:
PinnedSliceState v34 = new PinnedSliceState(SliceManagerService,p1,p2);
Object v36 = this.mPinnedSlicesByUri.put(v29, v33);

