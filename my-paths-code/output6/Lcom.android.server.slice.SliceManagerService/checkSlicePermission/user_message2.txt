The method checkSlicePermission has the following code snippet:

This is path 1 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	if (v6 != 0) {
		int v7 = ContentProvider.getUserIdFromUri(p1, v1);
		long v9 = Binder.clearCallingIdentity();
		Uri v10 = ContentProvider.getUriWithoutUserId(p1);
		String v11 = v10.getAuthority();
		PackageManager v12 = this.mContext.getPackageManager();
		int v13 = ContentProvider.getUserIdFromUri(p1, v7);
		ProviderInfo v14 = v12.resolveContentProviderAsUser(v11, 0, v13);
		Binder.restoreCallingIdentity(v9);
		String v8 = ProviderInfo.packageName;
		SlicePermissionManager$PkgUser v17 = new SlicePermissionManager$PkgUser(p3,v1);
		SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(v8,v7);
		Object v22 = this.mCachedClients.get(v17);
		if (v22 != 0) {
			String v23 = SliceClientPermissions.getFileName(v17);
			SlicePermissionManager$ParserHolder v24 = SlicePermissionManager.getParser(v23);
			XmlPullParser v25 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v24);
			if (v24 == 0) {
				v24.close();
				caughtException.addSuppressed(caughtException);
				int v28 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
				SliceClientPermissions v29 = new SliceClientPermissions(v17,SlicePermissionManager);
				Object v31 = this.mCachedClients.put(v17, v29);
				SliceClientPermissions v21 = ;
				SlicePermissionManager$PkgUser v33 = new SlicePermissionManager$PkgUser(v34,v35);
				String v34 = p5.getAuthority();
				int v35 = v19.getUserId();
				SliceClientPermissions$SliceAuthority v37 = SliceClientPermissions.getOrCreateAuthority(v33, v19);
				List v38 = p5.getPathSegments();
				v37.addPath(v38);
				Object v41 = this.mCachedProviders.get(v19);
				if (v41 != 0) {
					String v42 = SliceProviderPermissions.getFileName(v19);
					SlicePermissionManager$ParserHolder v43 = SlicePermissionManager.getParser(v42);
					XmlPullParser v44 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v43);
					if (v43 == 0) {
						v43.close();
						caughtException.addSuppressed(caughtException);
						int v47 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
						SliceProviderPermissions v48 = new SliceProviderPermissions(v19,SlicePermissionManager);
						Object v50 = this.mCachedProviders.put(v19, v48);
						SliceProviderPermissions v40 = ;
						Uri v51 = ContentProvider.getUriWithoutUserId(p1);
						String v52 = v51.getAuthority();
						Object v54 = this.mAuths.get(v52);
						if (v54 != 0) {
							SliceProviderPermissions$SliceAuthority v55 = new SliceProviderPermissions$SliceAuthority(v52,SliceProviderPermissions);
							Object v57 = this.mAuths.put(v52, v55);
							SliceProviderPermissions.onPersistableDirty(v55);
							SliceProviderPermissions$SliceAuthority v53 = ;
							boolean v60 = this.mPkgs.add(v17);
							if (v60 == 0) {
								this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	if (v6 != 0) {
		int v7 = ContentProvider.getUserIdFromUri(p1, v1);
		long v9 = Binder.clearCallingIdentity();
		Uri v10 = ContentProvider.getUriWithoutUserId(p1);
		String v11 = v10.getAuthority();
		PackageManager v12 = this.mContext.getPackageManager();
		int v13 = ContentProvider.getUserIdFromUri(p1, v7);
		ProviderInfo v14 = v12.resolveContentProviderAsUser(v11, 0, v13);
		Binder.restoreCallingIdentity(v9);
		String v8 = ProviderInfo.packageName;
		SlicePermissionManager$PkgUser v17 = new SlicePermissionManager$PkgUser(p3,v1);
		SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(v8,v7);
		Object v22 = this.mCachedClients.get(v17);
		if (v22 != 0) {
			String v23 = SliceClientPermissions.getFileName(v17);
			SlicePermissionManager$ParserHolder v24 = SlicePermissionManager.getParser(v23);
			XmlPullParser v25 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v24);
			if (v24 == 0) {
				v24.close();
				caughtException.addSuppressed(caughtException);
				int v28 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
				SliceClientPermissions v29 = new SliceClientPermissions(v17,SlicePermissionManager);
				Object v31 = this.mCachedClients.put(v17, v29);
				SliceClientPermissions v21 = ;
				SlicePermissionManager$PkgUser v33 = new SlicePermissionManager$PkgUser(v34,v35);
				String v34 = p5.getAuthority();
				int v35 = v19.getUserId();
				SliceClientPermissions$SliceAuthority v37 = SliceClientPermissions.getOrCreateAuthority(v33, v19);
				List v38 = p5.getPathSegments();
				v37.addPath(v38);
				Object v41 = this.mCachedProviders.get(v19);
				if (v41 != 0) {
					String v42 = SliceProviderPermissions.getFileName(v19);
					SlicePermissionManager$ParserHolder v43 = SlicePermissionManager.getParser(v42);
					XmlPullParser v44 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v43);
					if (v43 == 0) {
						v43.close();
						caughtException.addSuppressed(caughtException);
						int v47 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
						SliceProviderPermissions v48 = new SliceProviderPermissions(v19,SlicePermissionManager);
						Object v50 = this.mCachedProviders.put(v19, v48);
						SliceProviderPermissions v40 = ;
						Uri v51 = ContentProvider.getUriWithoutUserId(p1);
						String v52 = v51.getAuthority();
						Object v54 = this.mAuths.get(v52);
						if (v54 != 0) {
							SliceProviderPermissions$SliceAuthority v55 = new SliceProviderPermissions$SliceAuthority(v52,SliceProviderPermissions);
							Object v57 = this.mAuths.put(v52, v55);
							SliceProviderPermissions.onPersistableDirty(v55);
							SliceProviderPermissions$SliceAuthority v53 = ;
							boolean v60 = this.mPkgs.add(v17);
							if (v60 == 0) {
								return 0;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	if (v6 != 0) {
		int v7 = ContentProvider.getUserIdFromUri(p1, v1);
		long v9 = Binder.clearCallingIdentity();
		Uri v10 = ContentProvider.getUriWithoutUserId(p1);
		String v11 = v10.getAuthority();
		PackageManager v12 = this.mContext.getPackageManager();
		int v13 = ContentProvider.getUserIdFromUri(p1, v7);
		ProviderInfo v14 = v12.resolveContentProviderAsUser(v11, 0, v13);
		Binder.restoreCallingIdentity(v9);
		String v8 = ProviderInfo.packageName;
		SlicePermissionManager$PkgUser v17 = new SlicePermissionManager$PkgUser(p3,v1);
		SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(v8,v7);
		Object v22 = this.mCachedClients.get(v17);
		if (v22 != 0) {
			String v23 = SliceClientPermissions.getFileName(v17);
			SlicePermissionManager$ParserHolder v24 = SlicePermissionManager.getParser(v23);
			XmlPullParser v25 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v24);
			if (v24 == 0) {
				v24.close();
				caughtException.addSuppressed(caughtException);
				int v28 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
				SliceClientPermissions v29 = new SliceClientPermissions(v17,SlicePermissionManager);
				Object v31 = this.mCachedClients.put(v17, v29);
				SliceClientPermissions v21 = ;
				SlicePermissionManager$PkgUser v33 = new SlicePermissionManager$PkgUser(v34,v35);
				String v34 = p5.getAuthority();
				int v35 = v19.getUserId();
				SliceClientPermissions$SliceAuthority v37 = SliceClientPermissions.getOrCreateAuthority(v33, v19);
				List v38 = p5.getPathSegments();
				v37.addPath(v38);
				Object v41 = this.mCachedProviders.get(v19);
				if (v41 != 0) {
					String v42 = SliceProviderPermissions.getFileName(v19);
					SlicePermissionManager$ParserHolder v43 = SlicePermissionManager.getParser(v42);
					XmlPullParser v44 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v43);
					if (v43 == 0) {
						v43.close();
						caughtException.addSuppressed(caughtException);
						int v47 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
						SliceProviderPermissions v48 = new SliceProviderPermissions(v19,SlicePermissionManager);
						Object v50 = this.mCachedProviders.put(v19, v48);
						SliceProviderPermissions v40 = ;
						Uri v51 = ContentProvider.getUriWithoutUserId(p1);
						String v52 = v51.getAuthority();
						Object v54 = this.mAuths.get(v52);
						if (v54 != 0) {
							SliceProviderPermissions$SliceAuthority v53 = ;
							boolean v56 = this.mPkgs.add(v17);
							if (v56 == 0) {
								this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v7 = ContentProvider.getUserIdFromUri(p1, v1);\nProviderInfo v14 = v12.resolveContentProviderAsUser(v11, 0, v13);\nSlicePermissionManager$PkgUser v17 = new SlicePermissionManager$PkgUser(p3, v1);', 'Object v22 = this.mCachedClients.get(v17);\nObject v41 = this.mCachedProviders.get(v19);\nObject v54 = this.mAuths.get(v52);']

The method checkSlicePermission has the following similar APIs:

- API Name: grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.8109978437423706
  - Access Control Level: NONE and the following code:
SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
Object v32 = this.mCachedProviders.get(v10);
SliceProviderPermissions v39 = new SliceProviderPermissions(v10,SlicePermissionManager);
Object v41 = this.mCachedProviders.put(v10, v39);

- API Name: grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.8102656602859497
  - Access Control Level: NONE and the following code:
Uri v42 = ContentProvider.getUriWithoutUserId(p3);
String v43 = v42.getAuthority();
Object v45 = this.mAuths.get(v43);
SliceProviderPermissions$SliceAuthority v46 = new SliceProviderPermissions$SliceAuthority(v43,SlicePermissionPermissions);

