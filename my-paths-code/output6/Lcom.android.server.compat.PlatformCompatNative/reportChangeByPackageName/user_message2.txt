The method reportChangeByPackageName has the following code snippet:

This is path 1 for the API with depth 2:
public void reportChangeByPackageName(long p1, String p2, int p3){
	Object v4 = LocalServices.getService(PackageManagerInterna.class);
	int v5 = Process.myUid();
	ApplicationInfo v6 = v4.getApplicationInfo(p2, 0, v5, p3);
	ApplicationInfo v3 = v6;
	if (v3 == 0) {
		this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, 3);
		return;
	}
}
This is path 2 for the API with depth 2:
public void reportChangeByPackageName(long p1, String p2, int p3){
	Object v4 = LocalServices.getService(PackageManagerInterna.class);
	int v5 = Process.myUid();
	ApplicationInfo v6 = v4.getApplicationInfo(p2, 0, v5, p3);
	ApplicationInfo v3 = v6;
	if (v3 == 0) {
		return;
	}
}

and the following sink code:
['Object v4 = LocalServices.getService(PackageManagerInterna.class);\nint v5 = Process.myUid();\nApplicationInfo v6 = v4.getApplicationInfo(p2, 0, v5, p3);\nApplicationInfo v3 = v6;\nif (v3 == 0) { this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, 3); return; }']

The method reportChangeByPackageName has the following similar APIs:

- API Name: isChangeEnabledByPackageName(JLjava/lang/String;I)Z with Similarity Score: 0.804976224899292
  - Access Control Level: NONE and the following code:
ApplicationInfo v6 = v4.getApplicationInfo(p2, 0, v5, p3);
boolean v8 = PlatformCompat.isChangeEnabledInternalNoLogging(p1, v3);
PlatformCompat.reportChangeInternal(p1, ApplicationInfo.uid);
return v1;

- API Name: reportChangeByUid(JI)V with Similarity Score: 0.7848610281944275
  - Access Control Level: NONE and the following code:
boolean v4 = ChangeReporter.shouldWriteToStatsLog(p2, p1, p3);
FrameworkStatsLog.write(228, p2, p1, p3, this.mSource);
ChangeReporter$ChangeReport v7/v8 = new ChangeReporter$ChangeReport(p1,p3);
ChangeReporter.markAsReported(p2, v7/v8);

