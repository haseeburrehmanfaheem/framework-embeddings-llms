This is path 1 for the API with depth 2:
public void allocateBytes(String p1, long p2, int p3, String p4){
	int v1 = Binder.getCallingUid();
	Object v4 = this.mContext.getSystemService(AppOpsManage.class);
	long v5 = Binder.clearCallingIdentity();
	boolean v6 = v4.isOperationActive(26, v1, p4);
	if (v6 == 0) {
		Binder.restoreCallingIdentity(v5);
		int v2 = ;
		int v16 = Binder.getCallingUid();
		Object v19 = this.mContext.getSystemService(AppOpsManage.class);
		long v20 = Binder.clearCallingIdentity();
		boolean v21 = v19.isOperationActive(26, v16, p3);
		if (v21 == 0) {
			Binder.restoreCallingIdentity(v20);
			int v17 = ;
			Object v30 = this.mContext.getSystemService(StorageManage.class);
			Object v31 = this.mContext.getSystemService(StorageStatsManage.class);
			long v32 = Binder.clearCallingIdentity();
			File v33 = v30.findPathForUuid(p1);
			if ((v17 & 16) != 0) {
				long v34 = v33.getUsableSpace();
				long v35 = v30.getStorageLowBytes(v33);
				long v36 = v30.getStorageFullBytes(v33);
				if ((v17 & 8) != 0) {
					UUID v38 = StorageManager.convert(p1);
					boolean v39 = StorageStatsManager.isQuotaSupported(v38);
					boolean v37 = v39;
					if (v37 == 0) {
						UUID v41 = StorageManager.convert(p1);
						long v42 = StorageStatsManager.getCacheBytes(v41);
						long v40 = v42;
						long v43 = v30.getStorageCacheBytes(v33, v17);
						long v44 = Math.max(0, (v40 - v43));
						if ((v17 & 1) == 0) {
							long v45 = Math.max(0, (( + ) - ));
							Binder.restoreCallingIdentity(v32);
							long v15 = v45;
							if ((p2 < v15) <= 0) {
								int v48 = Binder.getCallingUid();
								Object v51 = this.mContext.getSystemService(AppOpsManage.class);
								long v52 = Binder.clearCallingIdentity();
								boolean v53 = v51.isOperationActive(26, v48, p3);
								if (v53 == 0) {
									Binder.restoreCallingIdentity(v52);
									int v49 = ;
									Object v62 = this.mContext.getSystemService(StorageManage.class);
									Object v63 = this.mContext.getSystemService(StorageStatsManage.class);
									long v64 = Binder.clearCallingIdentity();
									File v65 = v62.findPathForUuid(p1);
									if ((v49 & 16) != 0) {
										long v66 = v65.getUsableSpace();
										long v67 = v62.getStorageLowBytes(v65);
										long v68 = v62.getStorageFullBytes(v65);
										if ((v49 & 8) != 0) {
											UUID v70 = StorageManager.convert(p1);
											boolean v71 = StorageStatsManager.isQuotaSupported(v70);
											boolean v69 = v71;
											if (v69 == 0) {
												UUID v73 = StorageManager.convert(p1);
												long v74 = StorageStatsManager.getCacheBytes(v73);
												long v72 = v74;
												long v75 = v62.getStorageCacheBytes(v65, v49);
												long v76 = Math.max(0, (v72 - v75));
												if ((v49 & 1) == 0) {
													long v77 = Math.max(0, (( + ) - ));
													Binder.restoreCallingIdentity(v64);
													long v47 = v77;
													if ((p2 < (v15 + v47)) > 0) {
														Object v79 = this.mContext.getSystemService(StorageManage.class);
														long v80 = Binder.clearCallingIdentity();
														File v81 = v79.findPathForUuid(p1);
														if ((v2 & 1) == 0) {
															long v82 = v79.getStorageLowBytes(v81);
															this.mPmInternal.freeStorage(p1, (p2 + ), v2);
															Binder.restoreCallingIdentity(v80);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void allocateBytes(String p1, long p2, int p3, String p4){
	int v1 = Binder.getCallingUid();
	Object v4 = this.mContext.getSystemService(AppOpsManage.class);
	long v5 = Binder.clearCallingIdentity();
	boolean v6 = v4.isOperationActive(26, v1, p4);
	if (v6 == 0) {
		Binder.restoreCallingIdentity(v5);
		int v2 = ;
		int v16 = Binder.getCallingUid();
		Object v19 = this.mContext.getSystemService(AppOpsManage.class);
		long v20 = Binder.clearCallingIdentity();
		boolean v21 = v19.isOperationActive(26, v16, p3);
		if (v21 == 0) {
			Binder.restoreCallingIdentity(v20);
			int v17 = ;
			Object v30 = this.mContext.getSystemService(StorageManage.class);
			Object v31 = this.mContext.getSystemService(StorageStatsManage.class);
			long v32 = Binder.clearCallingIdentity();
			File v33 = v30.findPathForUuid(p1);
			if ((v17 & 16) != 0) {
				long v34 = v33.getUsableSpace();
				long v35 = v30.getStorageLowBytes(v33);
				long v36 = v30.getStorageFullBytes(v33);
				if ((v17 & 8) != 0) {
					UUID v38 = StorageManager.convert(p1);
					boolean v39 = StorageStatsManager.isQuotaSupported(v38);
					boolean v37 = v39;
					if (v37 == 0) {
						UUID v41 = StorageManager.convert(p1);
						long v42 = StorageStatsManager.getCacheBytes(v41);
						long v40 = v42;
						long v43 = v30.getStorageCacheBytes(v33, v17);
						long v44 = Math.max(0, (v40 - v43));
						if ((v17 & 1) == 0) {
							long v45 = Math.max(0, (( + ) - ));
							Binder.restoreCallingIdentity(v32);
							long v15 = v45;
							if ((p2 < v15) <= 0) {
								int v48 = Binder.getCallingUid();
								Object v51 = this.mContext.getSystemService(AppOpsManage.class);
								long v52 = Binder.clearCallingIdentity();
								boolean v53 = v51.isOperationActive(26, v48, p3);
								if (v53 == 0) {
									Binder.restoreCallingIdentity(v52);
									int v49 = ;
									Object v62 = this.mContext.getSystemService(StorageManage.class);
									Object v63 = this.mContext.getSystemService(StorageStatsManage.class);
									long v64 = Binder.clearCallingIdentity();
									File v65 = v62.findPathForUuid(p1);
									if ((v49 & 16) != 0) {
										long v66 = v65.getUsableSpace();
										long v67 = v62.getStorageLowBytes(v65);
										long v68 = v62.getStorageFullBytes(v65);
										if ((v49 & 8) != 0) {
											UUID v70 = StorageManager.convert(p1);
											boolean v71 = StorageStatsManager.isQuotaSupported(v70);
											boolean v69 = v71;
											if (v69 == 0) {
												UUID v73 = StorageManager.convert(p1);
												long v74 = StorageStatsManager.getCacheBytes(v73);
												long v72 = v74;
												long v75 = v62.getStorageCacheBytes(v65, v49);
												long v76 = Math.max(0, (v72 - v75));
												if ((v49 & 1) == 0) {
													long v77 = Math.max(0, (( + ) - ));
													Binder.restoreCallingIdentity(v64);
													long v47 = v77;
													if ((p2 < (v15 + v47)) > 0) {
														Object v79 = this.mContext.getSystemService(StorageManage.class);
														long v80 = Binder.clearCallingIdentity();
														File v81 = v79.findPathForUuid(p1);
														if ((v2 & 1) == 0) {
															long v82 = v79.getStorageLowBytes(v81);
															this.mPmInternal.freeStorage(p1, (p2 + ), v2);
															Binder.restoreCallingIdentity(v80);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void allocateBytes(String p1, long p2, int p3, String p4){
	int v1 = Binder.getCallingUid();
	Object v4 = this.mContext.getSystemService(AppOpsManage.class);
	long v5 = Binder.clearCallingIdentity();
	boolean v6 = v4.isOperationActive(26, v1, p4);
	if (v6 == 0) {
		Binder.restoreCallingIdentity(v5);
		int v2 = ;
		int v16 = Binder.getCallingUid();
		Object v19 = this.mContext.getSystemService(AppOpsManage.class);
		long v20 = Binder.clearCallingIdentity();
		boolean v21 = v19.isOperationActive(26, v16, p3);
		if (v21 == 0) {
			Binder.restoreCallingIdentity(v20);
			int v17 = ;
			Object v30 = this.mContext.getSystemService(StorageManage.class);
			Object v31 = this.mContext.getSystemService(StorageStatsManage.class);
			long v32 = Binder.clearCallingIdentity();
			File v33 = v30.findPathForUuid(p1);
			if ((v17 & 16) != 0) {
				long v34 = v33.getUsableSpace();
				long v35 = v30.getStorageLowBytes(v33);
				long v36 = v30.getStorageFullBytes(v33);
				if ((v17 & 8) != 0) {
					UUID v38 = StorageManager.convert(p1);
					boolean v39 = StorageStatsManager.isQuotaSupported(v38);
					boolean v37 = v39;
					if (v37 == 0) {
						UUID v41 = StorageManager.convert(p1);
						long v42 = StorageStatsManager.getCacheBytes(v41);
						long v40 = v42;
						long v43 = v30.getStorageCacheBytes(v33, v17);
						long v44 = Math.max(0, (v40 - v43));
						if ((v17 & 1) == 0) {
							long v45 = Math.max(0, (( + ) - ));
							Binder.restoreCallingIdentity(v32);
							long v15 = v45;
							if ((p2 < v15) <= 0) {
								int v48 = Binder.getCallingUid();
								Object v51 = this.mContext.getSystemService(AppOpsManage.class);
								long v52 = Binder.clearCallingIdentity();
								boolean v53 = v51.isOperationActive(26, v48, p3);
								if (v53 == 0) {
									Binder.restoreCallingIdentity(v52);
									int v49 = ;
									Object v62 = this.mContext.getSystemService(StorageManage.class);
									Object v63 = this.mContext.getSystemService(StorageStatsManage.class);
									long v64 = Binder.clearCallingIdentity();
									File v65 = v62.findPathForUuid(p1);
									if ((v49 & 16) != 0) {
										long v66 = v65.getUsableSpace();
										long v67 = v62.getStorageLowBytes(v65);
										long v68 = v62.getStorageFullBytes(v65);
										if ((v49 & 8) != 0) {
											UUID v70 = StorageManager.convert(p1);
											boolean v71 = StorageStatsManager.isQuotaSupported(v70);
											boolean v69 = v71;
											if (v69 == 0) {
												UUID v73 = StorageManager.convert(p1);
												long v74 = StorageStatsManager.getCacheBytes(v73);
												long v72 = v74;
												long v75 = v62.getStorageCacheBytes(v65, v49);
												long v76 = Math.max(0, (v72 - v75));
												if ((v49 & 1) == 0) {
													long v77 = Math.max(0, (( + ) - ));
													Binder.restoreCallingIdentity(v64);
													long v47 = v77;
													if ((p2 < (v15 + v47)) > 0) {
														Object v79 = this.mContext.getSystemService(StorageManage.class);
														long v80 = Binder.clearCallingIdentity();
														File v81 = v79.findPathForUuid(p1);
														if ((v2 & 1) == 0) {
															long v82 = v79.getStorageLowBytes(v81);
															this.mPmInternal.freeStorage(p1, (p2 + ), v2);
															Binder.restoreCallingIdentity(v80);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
