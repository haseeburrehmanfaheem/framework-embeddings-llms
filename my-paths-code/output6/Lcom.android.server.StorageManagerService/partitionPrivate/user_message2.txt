The method partitionPrivate has the following code snippet:

This is path 1 for the API with depth 2:
public void partitionPrivate(String p1){
	Object v3 = this.mContext.getSystemService("user");
	int v4 = UserHandle.getCallingUserId();
	long v5 = Binder.clearCallingIdentity();
	UserInfo v6 = v3.getUserInfo(v4);
	if ((this.flags & 2) != 2) {
		boolean v7 = ;
		Binder.restoreCallingIdentity(v5);
		if (v7 == 0) {
			CountDownLatch v9 = p0.findOrCreateDiskScanLatch(p1);
			this.mVold.partition(p1, 1, -1);
			p0.waitForLatch(v9, "partitionPrivate", 180000);
			return;
		}
	}
}
This is path 2 for the API with depth 2:
public void partitionPrivate(String p1){
	Object v3 = this.mContext.getSystemService("user");
	int v4 = UserHandle.getCallingUserId();
	long v5 = Binder.clearCallingIdentity();
	UserInfo v6 = v3.getUserInfo(v4);
	if ((this.flags & 2) != 2) {
		boolean v7 = ;
		Binder.restoreCallingIdentity(v5);
		if (v7 == 0) {
			CountDownLatch v9 = p0.findOrCreateDiskScanLatch(p1);
			this.mVold.partition(p1, 1, -1);
			return;
		}
	}
}
This is path 3 for the API with depth 2:
public void partitionPrivate(String p1){
	Object v3 = this.mContext.getSystemService("user");
	int v4 = UserHandle.getCallingUserId();
	long v5 = Binder.clearCallingIdentity();
	UserInfo v6 = v3.getUserInfo(v4);
	if ((this.flags & 2) != 2) {
		boolean v7 = ;
		Binder.restoreCallingIdentity(v5);
		if (v7 == 0) {
			CountDownLatch v9 = p0.findOrCreateDiskScanLatch(p1);
			this.mVold.partition(p1, 1, -1);
			p0.waitForLatch(v9, "partitionPrivate", 180000);
			return;
		}
	}
}

and the following sink code:
['UserInfo v6 = v3.getUserInfo(v4);\nCountDownLatch v9 = p0.findOrCreateDiskScanLatch(p1);\nthis.mVold.partition(p1, 1, -1);\np0.waitForLatch(v9, "partitionPrivate", 180000);']

The method partitionPrivate has the following similar APIs:

- API Name: partitionMixed(Ljava/lang/String;I)V with Similarity Score: 0.7943829894065857
  - Access Control Level: SYS_OR_SIG and the following code:
CountDownLatch v9 = p0.findOrCreateDiskScanLatch(p1);
this.mVold.partition(p1, 2, p2);

