This is path 1 for the API with depth 2:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				boolean v7 = "primary_physical".equals(this.mPrimaryStorageUuid);
				if (v7 != 0) {
					boolean v8 = "primary_physical".equals(p1);
					if (v8 == 0) {
						Object v10 = this.mContext.getSystemService(StorageManage.class);
						boolean v11 = Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, this.mPrimaryStorageUuid);
						if (v11 == 0) {
							boolean v12 = "primary_physical".equals(this.mPrimaryStorageUuid);
							if (v12 == 0) {
								VolumeInfo v13 = v10.findVolumeByUuid(this.mPrimaryStorageUuid);
								if (v13 != 0) {
									StringBuilder v14 = new StringBuilder();
									String v16 = v13.getId();
									String v17 = v16.replace("private", "emulated");
									StringBuilder v18 = v14.append(v17);
									StringBuilder v19 = v14.append(";");
									StringBuilder v20 = v14.append(this.mCurrentUserId);
									String v21 = v14.toString();
									VolumeInfo v22 = v10.findVolumeById(v21);
									VolumeInfo v9 = v22;
									Object v24 = this.mContext.getSystemService(StorageManage.class);
									boolean v25 = Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, p1);
									if (v25 == 0) {
										boolean v26 = "primary_physical".equals(p1);
										if (v26 == 0) {
											VolumeInfo v27 = v24.findVolumeByUuid(p1);
											if (v27 != 0) {
												StringBuilder v28 = new StringBuilder();
												String v30 = v27.getId();
												String v31 = v30.replace("private", "emulated");
												StringBuilder v32 = v28.append(v31);
												StringBuilder v33 = v28.append(";");
												StringBuilder v34 = v28.append(this.mCurrentUserId);
												String v35 = v28.toString();
												VolumeInfo v36 = v24.findVolumeById(v35);
												VolumeInfo v23 = v36;
												if (v9 != 0) {
													if (this.mMoveCallback != 0) {
														this.mMoveCallback.onStatusChanged(-1, -6, -1);
														if (-6 != 82) {
															this.mPrimaryStorageUuid = this.mMoveTargetUuid;
															FileOutputStream v53 = this.mSettingsFile.startWrite();
															TypedXmlSerializer v54 = Xml.resolveSerializer(v53);
															if ( == 0) {
																this.mSettingsFile.failWrite();
																boolean v56 = PackageManager.isMoveStatusFinished(-6);
																if (v56 == 0) {
																	this.mMoveCallback = 0;
																	this.mMoveTargetUuid = 0;
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				boolean v7 = "primary_physical".equals(this.mPrimaryStorageUuid);
				if (v7 != 0) {
					boolean v8 = "primary_physical".equals(p1);
					if (v8 == 0) {
						Object v10 = this.mContext.getSystemService(StorageManage.class);
						boolean v11 = Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, this.mPrimaryStorageUuid);
						if (v11 == 0) {
							boolean v12 = "primary_physical".equals(this.mPrimaryStorageUuid);
							if (v12 == 0) {
								VolumeInfo v13 = v10.findVolumeByUuid(this.mPrimaryStorageUuid);
								if (v13 != 0) {
									StringBuilder v14 = new StringBuilder();
									String v16 = v13.getId();
									String v17 = v16.replace("private", "emulated");
									StringBuilder v18 = v14.append(v17);
									StringBuilder v19 = v14.append(";");
									StringBuilder v20 = v14.append(this.mCurrentUserId);
									String v21 = v14.toString();
									VolumeInfo v22 = v10.findVolumeById(v21);
									VolumeInfo v9 = v22;
									Object v24 = this.mContext.getSystemService(StorageManage.class);
									boolean v25 = Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, p1);
									if (v25 == 0) {
										boolean v26 = "primary_physical".equals(p1);
										if (v26 == 0) {
											VolumeInfo v27 = v24.findVolumeByUuid(p1);
											if (v27 != 0) {
												StringBuilder v28 = new StringBuilder();
												String v30 = v27.getId();
												String v31 = v30.replace("private", "emulated");
												StringBuilder v32 = v28.append(v31);
												StringBuilder v33 = v28.append(";");
												StringBuilder v34 = v28.append(this.mCurrentUserId);
												String v35 = v28.toString();
												VolumeInfo v36 = v24.findVolumeById(v35);
												VolumeInfo v23 = v36;
												if (v9 != 0) {
													if (v23 != 0) {
														if (this.mMoveCallback != 0) {
															this.mMoveCallback.onStatusChanged(-1, -6, -1);
															if (-6 != 82) {
																this.mPrimaryStorageUuid = this.mMoveTargetUuid;
																FileOutputStream v53 = this.mSettingsFile.startWrite();
																TypedXmlSerializer v54 = Xml.resolveSerializer(v53);
																if ( == 0) {
																	this.mSettingsFile.failWrite();
																	boolean v56 = PackageManager.isMoveStatusFinished(-6);
																	if (v56 == 0) {
																		this.mMoveCallback = 0;
																		this.mMoveTargetUuid = 0;
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setPrimaryStorageUuid(String p1, IPackageMoveObserver p2){
	boolean v2 = Objects.equals(this.mPrimaryStorageUuid, p1);
	if (v2 != 0) {
		if (this.mMoveCallback != 0) {
			this.mMoveCallback = p2;
			this.mMoveTargetUuid = p1;
			Object v3 = this.mContext.getSystemService(UserManage.class);
			List v4 = v3.getUsers();
			Iterator v5 = v4.iterator();
			boolean v6 = v5.hasNext();
			if (v6 == 0) {
				boolean v7 = "primary_physical".equals(this.mPrimaryStorageUuid);
				if (v7 != 0) {
					boolean v8 = "primary_physical".equals(p1);
					if (v8 == 0) {
						Object v10 = this.mContext.getSystemService(StorageManage.class);
						boolean v11 = Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, this.mPrimaryStorageUuid);
						if (v11 == 0) {
							boolean v12 = "primary_physical".equals(this.mPrimaryStorageUuid);
							if (v12 == 0) {
								VolumeInfo v13 = v10.findVolumeByUuid(this.mPrimaryStorageUuid);
								if (v13 != 0) {
									StringBuilder v14 = new StringBuilder();
									String v16 = v13.getId();
									String v17 = v16.replace("private", "emulated");
									StringBuilder v18 = v14.append(v17);
									StringBuilder v19 = v14.append(";");
									StringBuilder v20 = v14.append(this.mCurrentUserId);
									String v21 = v14.toString();
									VolumeInfo v22 = v10.findVolumeById(v21);
									VolumeInfo v9 = v22;
									Object v24 = this.mContext.getSystemService(StorageManage.class);
									boolean v25 = Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, p1);
									if (v25 == 0) {
										boolean v26 = "primary_physical".equals(p1);
										if (v26 == 0) {
											VolumeInfo v27 = v24.findVolumeByUuid(p1);
											if (v27 != 0) {
												VolumeInfo v23 = 0;
												if (v9 != 0) {
													if (this.mMoveCallback != 0) {
														this.mMoveCallback.onStatusChanged(-1, -6, -1);
														if (-6 != 82) {
															this.mPrimaryStorageUuid = this.mMoveTargetUuid;
															FileOutputStream v50 = this.mSettingsFile.startWrite();
															TypedXmlSerializer v51 = Xml.resolveSerializer(v50);
															if ( == 0) {
																this.mSettingsFile.failWrite();
																boolean v53 = PackageManager.isMoveStatusFinished(-6);
																if (v53 == 0) {
																	this.mMoveCallback = 0;
																	this.mMoveTargetUuid = 0;
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
