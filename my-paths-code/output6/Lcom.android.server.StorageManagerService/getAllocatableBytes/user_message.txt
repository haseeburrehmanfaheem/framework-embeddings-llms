This is path 1 for the API with depth 2:
public long getAllocatableBytes(String p1, int p2, String p3){
	int v1 = Binder.getCallingUid();
	Object v4 = this.mContext.getSystemService(AppOpsManage.class);
	long v5 = Binder.clearCallingIdentity();
	boolean v6 = v4.isOperationActive(26, v1, p3);
	if (v6 == 0) {
		Binder.restoreCallingIdentity(v5);
		int v2 = ;
		Object v15 = this.mContext.getSystemService(StorageManage.class);
		Object v16 = this.mContext.getSystemService(StorageStatsManage.class);
		long v17 = Binder.clearCallingIdentity();
		File v18 = v15.findPathForUuid(p1);
		if ((v2 & 16) != 0) {
			long v19 = v18.getUsableSpace();
			long v20 = v15.getStorageLowBytes(v18);
			long v21 = v15.getStorageFullBytes(v18);
			if ((v2 & 8) != 0) {
				UUID v23 = StorageManager.convert(p1);
				String v25 = StorageManager.convert(v23);
				String v26 = this.mContext.getOpPackageName();
				boolean v27 = this.mService.isQuotaSupported(v25, v26);
				boolean v24 = v27;
				boolean v22 = v24;
				if (v22 == 0) {
					UUID v29 = StorageManager.convert(p1);
					String v31 = StorageManager.convert(v29);
					String v32 = this.mContext.getOpPackageName();
					long v33 = this.mService.getCacheBytes(v31, v32);
					long v30 = v33;
					long v28 = v30;
					long v34 = v15.getStorageCacheBytes(v18, v2);
					long v35 = Math.max(0, (v28 - v34));
					if ((v2 & 1) == 0) {
						long v36 = Math.max(0, (( + ) - ));
						Binder.restoreCallingIdentity(v17);
						return v36;
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public long getAllocatableBytes(String p1, int p2, String p3){
	int v1 = Binder.getCallingUid();
	Object v4 = this.mContext.getSystemService(AppOpsManage.class);
	long v5 = Binder.clearCallingIdentity();
	boolean v6 = v4.isOperationActive(26, v1, p3);
	if (v6 == 0) {
		Binder.restoreCallingIdentity(v5);
		int v2 = ;
		Object v15 = this.mContext.getSystemService(StorageManage.class);
		Object v16 = this.mContext.getSystemService(StorageStatsManage.class);
		long v17 = Binder.clearCallingIdentity();
		File v18 = v15.findPathForUuid(p1);
		if ((v2 & 16) != 0) {
			long v19 = v18.getUsableSpace();
			long v20 = v15.getStorageLowBytes(v18);
			long v21 = v15.getStorageFullBytes(v18);
			if ((v2 & 8) != 0) {
				UUID v23 = StorageManager.convert(p1);
				String v25 = StorageManager.convert(v23);
				String v26 = this.mContext.getOpPackageName();
				boolean v27 = this.mService.isQuotaSupported(v25, v26);
				boolean v24 = v27;
				boolean v22 = v24;
				if (v22 == 0) {
					UUID v29 = StorageManager.convert(p1);
					String v31 = StorageManager.convert(v29);
					String v32 = this.mContext.getOpPackageName();
					long v33 = this.mService.getCacheBytes(v31, v32);
					long v30 = v33;
					long v28 = v30;
					long v34 = v15.getStorageCacheBytes(v18, v2);
					long v35 = Math.max(0, (v28 - v34));
					if ((v2 & 1) == 0) {
						long v36 = Math.max(0, (( + ) - ));
						Binder.restoreCallingIdentity(v17);
						return v36;
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public long getAllocatableBytes(String p1, int p2, String p3){
	int v1 = Binder.getCallingUid();
	if ((p2 & 1) == 0) {
		Object v3 = this.mContext.getSystemService(AppOpsManage.class);
		long v4 = Binder.clearCallingIdentity();
		boolean v5 = v3.isOperationActive(26, v1, p3);
		if (v5 == 0) {
			Binder.restoreCallingIdentity(v4);
			int v2 = ;
			Object v14 = this.mContext.getSystemService(StorageManage.class);
			Object v15 = this.mContext.getSystemService(StorageStatsManage.class);
			long v16 = Binder.clearCallingIdentity();
			File v17 = v14.findPathForUuid(p1);
			if ((v2 & 16) != 0) {
				long v18 = v17.getUsableSpace();
				long v19 = v14.getStorageLowBytes(v17);
				long v20 = v14.getStorageFullBytes(v17);
				if ((v2 & 8) != 0) {
					UUID v22 = StorageManager.convert(p1);
					String v24 = StorageManager.convert(v22);
					String v25 = this.mContext.getOpPackageName();
					boolean v26 = this.mService.isQuotaSupported(v24, v25);
					boolean v23 = v26;
					boolean v21 = v23;
					if (v21 == 0) {
						UUID v28 = StorageManager.convert(p1);
						String v30 = StorageManager.convert(v28);
						String v31 = this.mContext.getOpPackageName();
						long v32 = this.mService.getCacheBytes(v30, v31);
						long v29 = v32;
						long v27 = v29;
						long v33 = v14.getStorageCacheBytes(v17, v2);
						long v34 = Math.max(0, (v27 - v33));
						if ((v2 & 1) == 0) {
							long v35 = Math.max(0, (( + ) - ));
							Binder.restoreCallingIdentity(v16);
							return v35;
						}
					}
				}
			}
		}
	}
}
