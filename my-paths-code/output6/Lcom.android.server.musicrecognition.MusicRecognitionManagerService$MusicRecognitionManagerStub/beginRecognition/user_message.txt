This is path 1 for the API with depth 2:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	if (v4 != 0) {
		Object v5 = MusicRecognitionManagerService.access$000(this.this$0);
		int v6 = UserHandle.getCallingUserId();
		AbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);
		if (v7 == 0) {
			ServiceNameResolver v9 = AbstractMasterSystemService.mServiceNameResolver;
			String v10 = v9.getDefaultServiceName(v6);
			if (v10 != 0) {
				ServiceNameResolver v11 = AbstractMasterSystemService.mServiceNameResolver;
				String v12 = v11.getServiceName(v6);
				boolean v13 = v10.equals(v12);
				boolean v8 = v13;
				if (v8 != 0) {
					int v15 = UserHandle.getCallingUserId();
					int v16 = Binder.getCallingUid();
					ServiceNameResolver v17 = AbstractMasterSystemService.mServiceNameResolver;
					String v18 = v17.getServiceName(v15);
					if (v18 != 0) {
						ComponentName v19 = ComponentName.unflattenFromString(v18);
						if (v19 != 0) {
							String v20 = v19.getPackageName();
							Context v21 = this.this$0.getContext();
							PackageManager v22 = v21.getPackageManager();
							int v23 = UserHandle.getCallingUserId();
							int v24 = v22.getPackageUidAsUser(v20, v23);
							String v25 = this.TAG;
							boolean v14 = 0;
							if (v14 == 0) {
								if (p2 != 0) {
									IInterface v35 = p2.queryLocalInterface("android.media.musicrecognition.IMusicRecognitionManagerCallback");
									if (v35 == 0) {
										if (v35 instanceof IMusicRecognitionManagerCallback == 0) {
											IMusicRecognitionManagerCallback$Stub$Proxy v36 = new IMusicRecognitionManagerCallback$Stub$Proxy(p2);
											IMusicRecognitionManagerCallback v34 = v36;
											if (this.mRemoteService != 0) {
												String v39 = MusicRecognitionManagerPerUserService.getComponentNameLocked();
												if (v39 != 0) {
													ComponentName v40 = ComponentName.unflattenFromString(v39);
													RemoteMusicRecognitionService v41 = new RemoteMusicRecognitionService(v42,v40,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v43,v45,AbstractMasterSystemService.verbose);
													Context v42 = MusicRecognitionManagerPerUserService.getContext();
													MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback v43 = new MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback(MusicRecognitionManagerPerUserService,v34,0);
													boolean v45 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
													this.mRemoteService = v41;
													Context v47 = MusicRecognitionManagerPerUserService.getContext();
													PackageManager v48 = v47.getPackageManager();
													ComponentName v49 = this.mRemoteService.getComponentName();
													ServiceInfo v50 = v48.getServiceInfo(v49, 128);
													this.mServiceInfo = v50;
													CompletableFuture v51 = this.mRemoteService.getAttributionTag();
													this.mAttributionTagFuture = v51;
													ComponentName v55 = this.mRemoteService.getComponentName();
													RemoteMusicRecognitionService v38 = this.mRemoteService;
													this.mRemoteService = v38;
													if (v38 != 0) {
														ParcelFileDescriptor v60 = ParcelFileDescriptor.createPipe();
														if (v60.length == 2) {
															FileDescriptor v61 = v60[0].getFileDescriptor();
															boolean v62 = v61.valid();
															if (v62 == 0) {
																FileDescriptor v63 = v60[1].getFileDescriptor();
																boolean v64 = v63.valid();
																if (v64 != 0) {
																	Pair v65 = Pair.create(v60[0], v60[1]);
																	Pair v59 = v65;
																	if (v59 != 0) {
																		MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v66 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v34,Pair.second);
																		CompletableFuture v68 = this.mAttributionTagFuture.thenAcceptAsync(v66, MusicRecognitionManagerService.mExecutorService);
																		AudioFormat v69 = this.mAudioFormat;
																		RemoteMusicRecognitionService$$ExternalSyntheticLambda0 v71 = new RemoteMusicRecognitionService$$ExternalSyntheticLambda0(RemoteMusicRecognitionService,Pair.first,v69);
																		RemoteMusicRecognitionService.scheduleAsyncRequest(v71);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	if (v4 != 0) {
		Object v5 = MusicRecognitionManagerService.access$000(this.this$0);
		int v6 = UserHandle.getCallingUserId();
		AbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);
		if (v7 == 0) {
			ServiceNameResolver v9 = AbstractMasterSystemService.mServiceNameResolver;
			String v10 = v9.getDefaultServiceName(v6);
			if (v10 != 0) {
				ServiceNameResolver v11 = AbstractMasterSystemService.mServiceNameResolver;
				String v12 = v11.getServiceName(v6);
				boolean v13 = v10.equals(v12);
				boolean v8 = v13;
				if (v8 != 0) {
					int v15 = UserHandle.getCallingUserId();
					int v16 = Binder.getCallingUid();
					ServiceNameResolver v17 = AbstractMasterSystemService.mServiceNameResolver;
					String v18 = v17.getServiceName(v15);
					if (v18 != 0) {
						ComponentName v19 = ComponentName.unflattenFromString(v18);
						if (v19 != 0) {
							String v20 = v19.getPackageName();
							Context v21 = this.this$0.getContext();
							PackageManager v22 = v21.getPackageManager();
							int v23 = UserHandle.getCallingUserId();
							String v24 = this.TAG;
							boolean v14 = 0;
							if (v14 == 0) {
								if (p2 != 0) {
									IInterface v34 = p2.queryLocalInterface("android.media.musicrecognition.IMusicRecognitionManagerCallback");
									if (v34 == 0) {
										if (v34 instanceof IMusicRecognitionManagerCallback == 0) {
											IMusicRecognitionManagerCallback$Stub$Proxy v35 = new IMusicRecognitionManagerCallback$Stub$Proxy(p2);
											IMusicRecognitionManagerCallback v33 = v35;
											if (this.mRemoteService != 0) {
												String v38 = MusicRecognitionManagerPerUserService.getComponentNameLocked();
												if (v38 != 0) {
													ComponentName v39 = ComponentName.unflattenFromString(v38);
													RemoteMusicRecognitionService v40 = new RemoteMusicRecognitionService(v41,v39,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v42,v44,AbstractMasterSystemService.verbose);
													Context v41 = MusicRecognitionManagerPerUserService.getContext();
													MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback v42 = new MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback(MusicRecognitionManagerPerUserService,v33,0);
													boolean v44 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
													this.mRemoteService = v40;
													Context v46 = MusicRecognitionManagerPerUserService.getContext();
													PackageManager v47 = v46.getPackageManager();
													ComponentName v48 = this.mRemoteService.getComponentName();
													ServiceInfo v49 = v47.getServiceInfo(v48, 128);
													this.mServiceInfo = v49;
													CompletableFuture v50 = this.mRemoteService.getAttributionTag();
													this.mAttributionTagFuture = v50;
													ComponentName v54 = this.mRemoteService.getComponentName();
													RemoteMusicRecognitionService v37 = this.mRemoteService;
													this.mRemoteService = v37;
													if (v37 != 0) {
														ParcelFileDescriptor v59 = ParcelFileDescriptor.createPipe();
														if (v59.length == 2) {
															FileDescriptor v60 = v59[0].getFileDescriptor();
															boolean v61 = v60.valid();
															if (v61 == 0) {
																FileDescriptor v62 = v59[1].getFileDescriptor();
																boolean v63 = v62.valid();
																if (v63 != 0) {
																	Pair v64 = Pair.create(v59[0], v59[1]);
																	Pair v58 = v64;
																	if (v58 != 0) {
																		MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v65 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v33,Pair.second);
																		CompletableFuture v67 = this.mAttributionTagFuture.thenAcceptAsync(v65, MusicRecognitionManagerService.mExecutorService);
																		AudioFormat v68 = this.mAudioFormat;
																		RemoteMusicRecognitionService$$ExternalSyntheticLambda0 v70 = new RemoteMusicRecognitionService$$ExternalSyntheticLambda0(RemoteMusicRecognitionService,Pair.first,v68);
																		RemoteMusicRecognitionService.scheduleAsyncRequest(v70);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	if (v4 != 0) {
		Object v5 = MusicRecognitionManagerService.access$000(this.this$0);
		int v6 = UserHandle.getCallingUserId();
		AbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);
		if (v7 == 0) {
			ServiceNameResolver v9 = AbstractMasterSystemService.mServiceNameResolver;
			String v10 = v9.getDefaultServiceName(v6);
			if (v10 != 0) {
				ServiceNameResolver v11 = AbstractMasterSystemService.mServiceNameResolver;
				String v12 = v11.getServiceName(v6);
				boolean v13 = v10.equals(v12);
				boolean v8 = v13;
				if (v8 != 0) {
					int v15 = UserHandle.getCallingUserId();
					int v16 = Binder.getCallingUid();
					ServiceNameResolver v17 = AbstractMasterSystemService.mServiceNameResolver;
					String v18 = v17.getServiceName(v15);
					if (v18 != 0) {
						ComponentName v19 = ComponentName.unflattenFromString(v18);
						if (v19 != 0) {
							String v20 = v19.getPackageName();
							Context v21 = this.this$0.getContext();
							PackageManager v22 = v21.getPackageManager();
							int v23 = UserHandle.getCallingUserId();
							int v24 = v22.getPackageUidAsUser(v20, v23);
							String v25 = this.TAG;
							boolean v14 = 0;
							if (v14 == 0) {
								if (p2 != 0) {
									IInterface v35 = p2.queryLocalInterface("android.media.musicrecognition.IMusicRecognitionManagerCallback");
									if (v35 == 0) {
										IMusicRecognitionManagerCallback$Stub$Proxy v36 = new IMusicRecognitionManagerCallback$Stub$Proxy(p2);
										IMusicRecognitionManagerCallback v34 = v36;
										if (this.mRemoteService != 0) {
											String v39 = MusicRecognitionManagerPerUserService.getComponentNameLocked();
											if (v39 != 0) {
												ComponentName v40 = ComponentName.unflattenFromString(v39);
												RemoteMusicRecognitionService v41 = new RemoteMusicRecognitionService(v42,v40,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v43,v45,AbstractMasterSystemService.verbose);
												Context v42 = MusicRecognitionManagerPerUserService.getContext();
												MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback v43 = new MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback(MusicRecognitionManagerPerUserService,v34,0);
												boolean v45 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
												this.mRemoteService = v41;
												Context v47 = MusicRecognitionManagerPerUserService.getContext();
												PackageManager v48 = v47.getPackageManager();
												ComponentName v49 = this.mRemoteService.getComponentName();
												ServiceInfo v50 = v48.getServiceInfo(v49, 128);
												this.mServiceInfo = v50;
												CompletableFuture v51 = this.mRemoteService.getAttributionTag();
												this.mAttributionTagFuture = v51;
												ComponentName v55 = this.mRemoteService.getComponentName();
												RemoteMusicRecognitionService v38 = this.mRemoteService;
												this.mRemoteService = v38;
												if (v38 != 0) {
													ParcelFileDescriptor v60 = ParcelFileDescriptor.createPipe();
													if (v60.length == 2) {
														FileDescriptor v61 = v60[0].getFileDescriptor();
														boolean v62 = v61.valid();
														if (v62 == 0) {
															FileDescriptor v63 = v60[1].getFileDescriptor();
															boolean v64 = v63.valid();
															if (v64 != 0) {
																Pair v65 = Pair.create(v60[0], v60[1]);
																Pair v59 = v65;
																if (v59 != 0) {
																	MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v66 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v34,Pair.second);
																	CompletableFuture v68 = this.mAttributionTagFuture.thenAcceptAsync(v66, MusicRecognitionManagerService.mExecutorService);
																	AudioFormat v69 = this.mAudioFormat;
																	RemoteMusicRecognitionService$$ExternalSyntheticLambda0 v71 = new RemoteMusicRecognitionService$$ExternalSyntheticLambda0(RemoteMusicRecognitionService,Pair.first,v69);
																	RemoteMusicRecognitionService.scheduleAsyncRequest(v71);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
