This is path 1 for the API with depth 2:
public List getHibernatingPackagesForUser(int p1){
	int v7 = Binder.getCallingUid();
	int v8 = Binder.getCallingPid();
	int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);
	int v6 = v9;
	boolean v11 = this.mUserManager.isUserUnlockingOrUnlocked(v6);
	if (v11 != 0) {
		boolean v12 = this.mUserStates.contains(v6);
		if (v12 != 0) {
			if (1 == 0) {
				boolean v10 = 0;
				if (v10 != 0) {
					Object v16 = this.mUserStates.get(v6);
					Collection v17 = v16.values();
					Iterator v18 = v17.iterator();
					boolean v19 = v18.hasNext();
					if (v19 == 0) {
						List v1 = v2;
						return v1;
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public List getHibernatingPackagesForUser(int p1){
	int v7 = Binder.getCallingUid();
	int v8 = Binder.getCallingPid();
	int v9 = this.mIActivityManager.handleIncomingUser(v8, v7, p1, 0, 1, "getHibernatingPackagesForUser", 0);
	int v6 = v9;
	boolean v11 = this.mUserManager.isUserUnlockingOrUnlocked(v6);
	if (v11 != 0) {
		if (1 == 0) {
			Integer v13 = Integer.valueOf(v6);
			boolean v10 = 0;
			if (v10 != 0) {
				Object v16 = this.mUserStates.get(v6);
				Collection v17 = v16.values();
				Iterator v18 = v17.iterator();
				boolean v19 = v18.hasNext();
				if (v19 == 0) {
					List v1 = v2;
					return v1;
				}
			}
		}
	}
}
