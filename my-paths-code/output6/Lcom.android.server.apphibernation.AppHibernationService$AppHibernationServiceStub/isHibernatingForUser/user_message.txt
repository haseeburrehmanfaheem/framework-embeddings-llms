This is path 1 for the API with depth 2:
public boolean isHibernatingForUser(String p1, int p2){
	int v10 = Binder.getCallingUid();
	int v11 = Binder.getCallingPid();
	int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
	int v9 = v12;
	boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
	if (v14 != 0) {
		boolean v15 = this.mUserStates.contains(v9);
		if (v15 != 0) {
			if (0 == 0) {
				boolean v13 = 0;
				if (v13 != 0) {
					Object v19 = this.mUserStates.get(v9);
					Object v20 = v19.get(p1);
					if (v20 == 0) {
						int v21 = Binder.getCallingUid();
						boolean v22 = this.mPackageManagerInternal.canQueryPackage(v21, p1);
						if (v22 != 0) {
							boolean v1 = 0;
							return v1;
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean isHibernatingForUser(String p1, int p2){
	int v10 = Binder.getCallingUid();
	int v11 = Binder.getCallingPid();
	int v12 = this.mIActivityManager.handleIncomingUser(v11, v10, p2, 0, 1, "isHibernatingForUser", 0);
	int v9 = v12;
	boolean v14 = this.mUserManager.isUserUnlockingOrUnlocked(v9);
	if (v14 != 0) {
		boolean v15 = this.mUserStates.contains(v9);
		if (v15 != 0) {
			if (0 == 0) {
				boolean v13 = 0;
				if (v13 != 0) {
					Object v19 = this.mUserStates.get(v9);
					Object v20 = v19.get(p1);
					if (v20 == 0) {
						int v21 = Binder.getCallingUid();
						boolean v22 = this.mPackageManagerInternal.canQueryPackage(v21, p1);
						if (v22 != 0) {
							boolean v1 = UserLevelState.hibernated;
							return v1;
						}
					}
				}
			}
		}
	}
}
