This is path 1 for the API with depth 2:
public void setHibernatingGlobally(String p1, boolean p2){
	Object v4 = this.mGlobalHibernationStates.get(p1);
	if (v4 == 0) {
		int v5 = Binder.getCallingUid();
		boolean v6 = this.mPackageManagerInternal.canQueryPackage(v5, p1);
		if (v6 != 0) {
			if (GlobalLevelState.hibernated == p2) {
				GlobalLevelState.hibernated = p2;
				if (p2 == 0) {
					AppHibernationService$$ExternalSyntheticLambda0 v7 = new AppHibernationService$$ExternalSyntheticLambda0(AppHibernationService,p1,v4);
					this.mBackgroundExecutor.execute(v7);
					ArrayList v10 = new ArrayList(v11);
					Collection v11 = this.mGlobalHibernationStates.values();
					this.mScheduledStatesToWrite = v10;
					boolean v14 = this.mExecutorService.isShutdown();
					if (v14 == 0) {
						if (this.mFuture == 0) {
							HibernationStateDiskStore$$ExternalSyntheticLambda0 v15 = new HibernationStateDiskStore$$ExternalSyntheticLambda0(HibernationStateDiskStore);
							ScheduledFuture v17 = this.mExecutorService.schedule(v15, 60000, TimeUnit.MILLISECONDS);
							this.mFuture = v17;
							return;
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setHibernatingGlobally(String p1, boolean p2){
	Object v4 = this.mGlobalHibernationStates.get(p1);
	if (v4 == 0) {
		int v5 = Binder.getCallingUid();
		boolean v6 = this.mPackageManagerInternal.canQueryPackage(v5, p1);
		if (v6 != 0) {
			if (GlobalLevelState.hibernated == p2) {
				GlobalLevelState.hibernated = p2;
				if (p2 == 0) {
					GlobalLevelState.savedByte = 0;
					long v7 = System.currentTimeMillis();
					GlobalLevelState.lastUnhibernatedMs = v7;
					ArrayList v8 = new ArrayList(v9);
					Collection v9 = this.mGlobalHibernationStates.values();
					this.mScheduledStatesToWrite = v8;
					boolean v12 = this.mExecutorService.isShutdown();
					if (v12 == 0) {
						if (this.mFuture == 0) {
							HibernationStateDiskStore$$ExternalSyntheticLambda0 v13 = new HibernationStateDiskStore$$ExternalSyntheticLambda0(HibernationStateDiskStore);
							ScheduledFuture v15 = this.mExecutorService.schedule(v13, 60000, TimeUnit.MILLISECONDS);
							this.mFuture = v15;
							return;
						}
					}
				}
			}
		}
	}
}
