This is path 1 for the API with depth 2:
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			if (v21 != 0) {
				int v22 = UserHandle.getUserId(p2);
				boolean v23 = this.mPackageManagerInternal.isInstantApp(p3, v22);
				if (v23 != 0) {
					boolean v19 = ;
					boolean v18 = v19;
					if (v18 == 0) {
						int v26 = BlobStoreManagerService.getSessionsCountLocked(p3, p4);
						int v27 = BlobStoreConfig.getMaxActiveSessions();
						if (v26 >= v27) {
							long v28 = BlobStoreManagerService.generateNextSessionIdLocked();
							BlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p2,p3,p4,this.mSessionStateChangeListener);
							int v31 = UserHandle.getUserId(p3);
							BlobStoreManagerService.addSessionForUserLocked(v29, v31);
							if (BlobStoreConfig.LOGV == 0) {
								BlobStoreManagerService.writeBlobSessionsAsync();
								long v25 = v28;
								long v24 = v25;
								return v24;
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			if (v21 != 0) {
				int v22 = UserHandle.getUserId(p2);
				boolean v23 = this.mPackageManagerInternal.isInstantApp(p3, v22);
				if (v23 != 0) {
					boolean v19 = ;
					boolean v18 = v19;
					if (v18 == 0) {
						int v26 = BlobStoreManagerService.getSessionsCountLocked(p3, p4);
						int v27 = BlobStoreConfig.getMaxActiveSessions();
						if (v26 >= v27) {
							long v28 = BlobStoreManagerService.generateNextSessionIdLocked();
							BlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p2,p3,p4,this.mSessionStateChangeListener);
							int v31 = UserHandle.getUserId(p3);
							BlobStoreManagerService.addSessionForUserLocked(v29, v31);
							if (BlobStoreConfig.LOGV == 0) {
								BlobStoreManagerService.writeBlobSessionsAsync();
								long v25 = v28;
								long v24 = v25;
								return v24;
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, "blobHandle must not be null");
	String v3 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v4 = Preconditions.checkByteArrayNotEmpty(this.digest, "digest");
	CharSequence v5 = Preconditions.checkStringNotEmpty(this.label, "label must not be null");
	int v6 = this.label.length();
	if (v6 > 100) {
		Preconditions.checkArgument(, "label too long");
		long v8 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, "expiryTimeMillis must not be negative");
		CharSequence v9 = Preconditions.checkStringNotEmpty(this.tag, "tag must not be null");
		int v10 = this.tag.length();
		if (v10 > 128) {
			Preconditions.checkArgument(, "tag too long");
			Object v12 = Objects.requireNonNull(p2, "packageName must not be null");
			int v13 = Binder.getCallingUid();
			if (v21 != 0) {
				int v22 = UserHandle.getUserId(p2);
				boolean v23 = this.mPackageManagerInternal.isInstantApp(p3, v22);
				if (v23 != 0) {
					boolean v19 = ;
					boolean v18 = v19;
					if (v18 == 0) {
						int v26 = BlobStoreManagerService.getSessionsCountLocked(p3, p4);
						int v27 = BlobStoreConfig.getMaxActiveSessions();
						if (v26 >= v27) {
							long v28 = BlobStoreManagerService.generateNextSessionIdLocked();
							BlobStoreSession v29 = new BlobStoreSession(this.mContext,v28,p2,p3,p4,this.mSessionStateChangeListener);
							int v31 = UserHandle.getUserId(p3);
							BlobStoreManagerService.addSessionForUserLocked(v29, v31);
							if (BlobStoreConfig.LOGV == 0) {
								BlobStoreManagerService.writeBlobSessionsAsync();
								long v25 = v28;
								long v24 = v25;
								return v24;
							}
						}
					}
				}
			}
		}
	}
}
