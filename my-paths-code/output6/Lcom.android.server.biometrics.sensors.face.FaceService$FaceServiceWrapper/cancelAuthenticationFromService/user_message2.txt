The method cancelAuthenticationFromService has the following code snippet:

This is path 1 for the API with depth 2:
public void cancelAuthenticationFromService(int p1, IBinder p2, String p3, long p4){
	Iterator v5 = this.mServiceProviders.iterator();
	boolean v6 = v5.hasNext();
	if (v6 == 0) {
		Object v7 = v5.next();
		boolean v8 = v7.containsSensor(p2);
		if (v8 == 0) {
			ServiceProvider v4 = v7;
			ServiceProvider v3 = v4;
			if (v3 != 0) {
				return;
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void cancelAuthenticationFromService(int p1, IBinder p2, String p3, long p4){
	Iterator v5 = this.mServiceProviders.iterator();
	boolean v6 = v5.hasNext();
	if (v6 == 0) {
		Object v7 = v5.next();
		boolean v8 = v7.containsSensor(p2);
		if (v8 == 0) {
			ServiceProvider v4 = v7;
			ServiceProvider v3 = v4;
			if (v3 != 0) {
				v3.cancelAuthentication(p1, p2, p4);
				return;
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void cancelAuthenticationFromService(int p1, IBinder p2, String p3, long p4){
	Iterator v5 = this.mServiceProviders.iterator();
	boolean v6 = v5.hasNext();
	if (v6 == 0) {
		ServiceProvider v4 = 0;
		ServiceProvider v3 = v4;
		if (v3 != 0) {
			return;
		}
	}
}

and the following sink code:
['Object v7 = v5.next();\nboolean v8 = v7.containsSensor(p2);\nv3.cancelAuthentication(p1, p2, p4);']

The method cancelAuthenticationFromService has the following similar APIs:

- API Name: revokeChallenge(Landroid/os/IBinder;IILjava/lang/String;J)V with Similarity Score: 0.85163414478302
  - Access Control Level: NORMAL and the following code:
Iterator v5 = this.mServiceProviders.iterator();
boolean v6 = v5.hasNext();
if (v6 == 0) {
Object v7 = v5.next();
boolean v8 = v7.containsSensor(p2);
if (v8 == 0) {
ServiceProvider v4 = v7;
ServiceProvider v3 = v4;
if (v3 != 0) {
v3.scheduleRevokeChallenge(p2, p3, p1, p4, p5);
return;

- API Name: getLockoutModeForUser(II)I with Similarity Score: 0.8379178047180176
  - Access Control Level: NORMAL and the following code:
Iterator v5 = this.mServiceProviders.iterator();
boolean v6 = v5.hasNext();
if (v6 == 0) {
Object v7 = v5.next();
boolean v8 = v7.containsSensor(p2);
if (v8 == 0) {
ServiceProvider v4 = v7;
ServiceProvider v3 = v4;
if (v3 != 0) {
int v9 = v3.getLockoutModeForUser(p1, p2);
return v9;

