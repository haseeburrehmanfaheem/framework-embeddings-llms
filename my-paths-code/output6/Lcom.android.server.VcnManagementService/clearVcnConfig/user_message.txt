This is path 1 for the API with depth 2:
public void clearVcnConfig(ParcelUuid p1, String p2){
	int v14 = this.mDeps.getBinderCallingUid();
	if (v14 == 1000) {
		UserHandle v15 = UserHandle.getUserHandleForUid(v14);
		boolean v16 = v15.isSystem();
		if (v16 == 0) {
			long v18 = Binder.clearCallingIdentity();
			Object v19 = this.mConfigs.get(p1);
			if (v19 == 0) {
				String v20 = v19.getProvisioningPackageName();
				boolean v21 = p2.equals(v20);
				if (v21 == 0) {
					Binder.restoreCallingIdentity(v18);
					boolean v17 = 1;
					if (v17 == 0) {
						VcnManagementService.enforcePrimaryUser();
						Object v25 = this.mContext.getSystemService(SubscriptionManage.class);
						ArrayList v26 = new ArrayList();
						VcnManagementService$$ExternalSyntheticLambda11 v28 = new VcnManagementService$$ExternalSyntheticLambda11(v26,v25,p1);
						Binder.withCleanCallingIdentity(v28);
						Iterator v31 = v26.iterator();
						boolean v32 = v31.hasNext();
						if (v32 == 0) {
							Object v33 = v31.next();
							Object v34 = this.mContext.getSystemService(TelephonyManage.class);
							int v35 = v33.getSubscriptionId();
							TelephonyManager v36 = v34.createForSubscriptionId(v35);
							int v37 = v33.getSimSlotIndex();
							boolean v38 = SubscriptionManager.isValidSlotIndex(v37);
							if (v38 == 0) {
								int v39 = v36.checkCarrierPrivilegesForPackage(p2);
								if (v39 != 1) {
									VcnManagementService$$ExternalSyntheticLambda5 v40 = new VcnManagementService$$ExternalSyntheticLambda5(p0,p1);
									Binder.withCleanCallingIdentity(v40);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void clearVcnConfig(ParcelUuid p1, String p2){
	int v14 = this.mDeps.getBinderCallingUid();
	if (v14 == 1000) {
		UserHandle v15 = UserHandle.getUserHandleForUid(v14);
		boolean v16 = v15.isSystem();
		if (v16 == 0) {
			long v18 = Binder.clearCallingIdentity();
			Object v19 = this.mConfigs.get(p1);
			if (v19 == 0) {
				String v20 = v19.getProvisioningPackageName();
				boolean v21 = p2.equals(v20);
				if (v21 == 0) {
					Binder.restoreCallingIdentity(v18);
					boolean v17 = 0;
					if (v17 == 0) {
						VcnManagementService.enforcePrimaryUser();
						Object v25 = this.mContext.getSystemService(SubscriptionManage.class);
						ArrayList v26 = new ArrayList();
						VcnManagementService$$ExternalSyntheticLambda11 v28 = new VcnManagementService$$ExternalSyntheticLambda11(v26,v25,p1);
						Binder.withCleanCallingIdentity(v28);
						Iterator v31 = v26.iterator();
						boolean v32 = v31.hasNext();
						if (v32 == 0) {
							Object v33 = v31.next();
							Object v34 = this.mContext.getSystemService(TelephonyManage.class);
							int v35 = v33.getSubscriptionId();
							TelephonyManager v36 = v34.createForSubscriptionId(v35);
							int v37 = v33.getSimSlotIndex();
							boolean v38 = SubscriptionManager.isValidSlotIndex(v37);
							if (v38 == 0) {
								int v39 = v36.checkCarrierPrivilegesForPackage(p2);
								if (v39 != 1) {
									VcnManagementService$$ExternalSyntheticLambda5 v40 = new VcnManagementService$$ExternalSyntheticLambda5(p0,p1);
									Binder.withCleanCallingIdentity(v40);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
