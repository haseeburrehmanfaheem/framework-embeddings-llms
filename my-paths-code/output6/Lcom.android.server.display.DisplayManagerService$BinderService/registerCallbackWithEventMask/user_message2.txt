The method registerCallbackWithEventMask has the following code snippet:

This is path 1 for the API with depth 2:
public void registerCallbackWithEventMask(IDisplayManagerCallback p1, long p2){
	if (p1 == 0) {
		int v1 = Binder.getCallingPid();
		int v2 = Binder.getCallingUid();
		long v3 = Binder.clearCallingIdentity();
		Object v6 = this.mCallbacks.get(p3);
		if (v6 == 0) {
			v6.updateEventsMask(p5);
			Binder.restoreCallingIdentity(v3);
			return;
		}
	}
}
This is path 2 for the API with depth 2:
public void registerCallbackWithEventMask(IDisplayManagerCallback p1, long p2){
	if (p1 == 0) {
		int v1 = Binder.getCallingPid();
		int v2 = Binder.getCallingUid();
		long v3 = Binder.clearCallingIdentity();
		Object v6 = this.mCallbacks.get(p3);
		if (v6 == 0) {
			DisplayManagerService$CallbackRecord v7 = new DisplayManagerService$CallbackRecord(DisplayManagerService,p3,p4,p2,p5);
			IBinder v9 = p2.asBinder();
			v9.linkToDeath(v7, 0);
			this.mCallbacks.put(p3, v7);
			Binder.restoreCallingIdentity(v3);
			return;
		}
	}
}

and the following sink code:
['Object v6 = this.mCallbacks.get(p3);\nv6.updateEventsMask(p5);', 'DisplayManagerService$CallbackRecord v7 = new DisplayManagerService$CallbackRecord(DisplayManagerService,p3,p4,p2,p5);\nIBinder v9 = p2.asBinder();\nv9.linkToDeath(v7, 0);\nthis.mCallbacks.put(p3, v7);']

The method registerCallbackWithEventMask has the following similar APIs:

- API Name: registerVcnStatusCallback(Landroid/os/ParcelUuid;Landroid/net/vcn/IVcnStatusCallback;Ljava/lang/String;)V with Similarity Score: 0.7491801977157593
  - Access Control Level: NONE and the following code:
VcnManagementService$VcnStatusCallbackInfo v9 = new VcnManagementService$VcnStatusCallbackInfo(p0,p1,p2,p3,v1,0);
v8.linkToDeath(v9, 0);
Object v13 = this.mRegisteredStatusCallbacks.put(v8, v9);

- API Name: removeClientActiveCallback(Landroid/hardware/fingerprint/IFingerprintClientActiveCallback;)V with Similarity Score: 0.7394239902496338
  - Access Control Level: NORMAL and the following code:
boolean v5 = this.mClientActiveCallbacks.remove(p1);

