The method setAreUserDisabledHdrTypesAllowed has the following code snippet:

This is path 1 for the API with depth 2:
public void setAreUserDisabledHdrTypesAllowed(boolean p1){
	long v3 = Binder.clearCallingIdentity();
	if (this.mAreUserDisabledHdrTypesAllowed != p2) {
		this.mAreUserDisabledHdrTypesAllowed = p2;
		if (this.mUserDisabledHdrTypes.length != 0) {
			ContentResolver v6 = this.mContext.getContentResolver();
			if (p2 == 0) {
				boolean v7 = Settings$Global.putInt(v6, "are_user_disabled_hdr_formats_allowed", );
				[I v8 = new [I(0);
				if (this.mAreUserDisabledHdrTypesAllowed != 0) {
					DisplayManagerService$$ExternalSyntheticLambda3 v9 = new DisplayManagerService$$ExternalSyntheticLambda3(DisplayManagerService,);
					this.mLogicalDisplayMapper.forEachLocked(v9);
					Binder.restoreCallingIdentity(v3);
					return;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setAreUserDisabledHdrTypesAllowed(boolean p1){
	long v3 = Binder.clearCallingIdentity();
	if (this.mAreUserDisabledHdrTypesAllowed != p2) {
		this.mAreUserDisabledHdrTypesAllowed = p2;
		if (this.mUserDisabledHdrTypes.length != 0) {
			ContentResolver v6 = this.mContext.getContentResolver();
			if (p2 == 0) {
				boolean v7 = Settings$Global.putInt(v6, "are_user_disabled_hdr_formats_allowed", );
				[I v8 = new [I(0);
				if (this.mAreUserDisabledHdrTypesAllowed != 0) {
					DisplayManagerService$$ExternalSyntheticLambda3 v9 = new DisplayManagerService$$ExternalSyntheticLambda3(DisplayManagerService,);
					this.mLogicalDisplayMapper.forEachLocked(v9);
					Binder.restoreCallingIdentity(v3);
					return;
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setAreUserDisabledHdrTypesAllowed(boolean p1){
	long v3 = Binder.clearCallingIdentity();
	if (this.mAreUserDisabledHdrTypesAllowed != p2) {
		this.mAreUserDisabledHdrTypesAllowed = p2;
		if (this.mUserDisabledHdrTypes.length != 0) {
			ContentResolver v6 = this.mContext.getContentResolver();
			if (p2 == 0) {
				boolean v7 = Settings$Global.putInt(v6, "are_user_disabled_hdr_formats_allowed", );
				[I v8 = new [I(0);
				if (this.mAreUserDisabledHdrTypesAllowed != 0) {
					DisplayManagerService$$ExternalSyntheticLambda3 v9 = new DisplayManagerService$$ExternalSyntheticLambda3(DisplayManagerService,);
					this.mLogicalDisplayMapper.forEachLocked(v9);
					Binder.restoreCallingIdentity(v3);
					return;
				}
			}
		}
	}
}

and the following sink code:
['if (this.mAreUserDisabledHdrTypesAllowed != p2) {\nthis.mAreUserDisabledHdrTypesAllowed = p2;\nboolean v7 = Settings$Global.putInt(v6, "are_user_disabled_hdr_formats_allowed", );', 'DisplayManagerService$$ExternalSyntheticLambda3 v9 = new DisplayManagerService$$ExternalSyntheticLambda3(DisplayManagerService,);\nthis.mLogicalDisplayMapper.forEachLocked(v9);']

The method setAreUserDisabledHdrTypesAllowed has the following similar APIs:

- API Name: areUserDisabledHdrTypesAllowed()Z with Similarity Score: 0.8581590056419373
  - Access Control Level: NONE and the following code:
boolean v2 = this.mAreUserDisabledHdrTypesAllowed;
return v2;

- API Name: setBrightnessConfigurationForUser(Landroid/hardware/display/BrightnessConfiguration;ILjava/lang/String;)V with Similarity Score: 0.7766275405883789
  - Access Control Level: SYS_OR_SIG and the following code:
DisplayManagerService$BinderService$$ExternalSyntheticLambda0 v9 = new DisplayManagerService$BinderService$$ExternalSyntheticLambda0(p0,p1,p2,p3);
v8.forEachLocked(v9);

