This is path 1 for the API with depth 2:
public void setBrightness(int p1, float p2){
	boolean v5 = Float.isNaN(p1);
	if (v5 != 0) {
		if ((p1 < 0) < 0) {
			if ((p1 > 1065353216) > 0) {
				boolean v4 = ;
				boolean v3 = v4;
				if (v3 != 0) {
					long v6 = Binder.clearCallingIdentity();
					DisplayManagerService$SyncRoot v7 = DisplayManagerService.-$$Nest$fgetmSyncRoot(this.this$0);
					SparseArray v8 = DisplayManagerService.-$$Nest$fgetmDisplayPowerControllers(this.this$0);
					Object v9 = v8.get(p1);
					if (v9 == 0) {
						boolean v12 = Float.isNaN(p1);
						if (v12 == 0) {
							if ((p1 < this.mBrightness) == 0) {
								DisplayDevice v13 = this.mLogicalDisplay.getPrimaryDisplayDeviceLocked();
								boolean v14 = this.mPersistentDataStore.setBrightness(v13, p1);
								this.mBrightness = p1;
								int v15 = Float.floatToIntBits(p1);
								Message v16 = this.mHandler.obtainMessage(1, v15, 0);
								boolean v17 = this.mHandler.sendMessage(v16);
								PersistentDataStore v18 = DisplayManagerService.-$$Nest$fgetmPersistentDataStore(this.this$0);
								if (this.mDirty == 0) {
									ByteArrayOutputStream v21 = new ByteArrayOutputStream();
									TypedXmlSerializer v23 = Xml.resolveSerializer(v21);
									PersistentDataStore.saveToXml(v23);
									v23.flush();
									this.mDirty = 0;
									Binder.restoreCallingIdentity(v6);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setBrightness(int p1, float p2){
	boolean v5 = Float.isNaN(p1);
	if (v5 != 0) {
		if ((p1 < 0) < 0) {
			if ((p1 > 1065353216) > 0) {
				boolean v4 = ;
				boolean v3 = v4;
				if (v3 != 0) {
					long v6 = Binder.clearCallingIdentity();
					DisplayManagerService$SyncRoot v7 = DisplayManagerService.-$$Nest$fgetmSyncRoot(this.this$0);
					SparseArray v8 = DisplayManagerService.-$$Nest$fgetmDisplayPowerControllers(this.this$0);
					Object v9 = v8.get(p1);
					if (v9 == 0) {
						boolean v12 = Float.isNaN(p1);
						if (v12 == 0) {
							if ((p1 < this.mBrightness) == 0) {
								DisplayDevice v13 = this.mLogicalDisplay.getPrimaryDisplayDeviceLocked();
								boolean v14 = this.mPersistentDataStore.setBrightness(v13, p1);
								this.mBrightness = p1;
								int v15 = Float.floatToIntBits(p1);
								Message v16 = this.mHandler.obtainMessage(1, v15, 0);
								boolean v17 = this.mHandler.sendMessage(v16);
								PersistentDataStore v18 = DisplayManagerService.-$$Nest$fgetmPersistentDataStore(this.this$0);
								if (this.mDirty == 0) {
									ByteArrayOutputStream v21 = new ByteArrayOutputStream();
									TypedXmlSerializer v23 = Xml.resolveSerializer(v21);
									PersistentDataStore.saveToXml(v23);
									v23.flush();
									this.mDirty = 0;
									Binder.restoreCallingIdentity(v6);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setBrightness(int p1, float p2){
	boolean v5 = Float.isNaN(p1);
	if (v5 != 0) {
		if ((p1 < 0) < 0) {
			boolean v4 = ;
			boolean v3 = v4;
			if (v3 != 0) {
				long v6 = Binder.clearCallingIdentity();
				DisplayManagerService$SyncRoot v7 = DisplayManagerService.-$$Nest$fgetmSyncRoot(this.this$0);
				SparseArray v8 = DisplayManagerService.-$$Nest$fgetmDisplayPowerControllers(this.this$0);
				Object v9 = v8.get(p1);
				if (v9 == 0) {
					boolean v12 = Float.isNaN(p1);
					if (v12 == 0) {
						if ((p1 < this.mBrightness) == 0) {
							DisplayDevice v13 = this.mLogicalDisplay.getPrimaryDisplayDeviceLocked();
							boolean v14 = this.mPersistentDataStore.setBrightness(v13, p1);
							this.mBrightness = p1;
							int v15 = Float.floatToIntBits(p1);
							Message v16 = this.mHandler.obtainMessage(1, v15, 0);
							boolean v17 = this.mHandler.sendMessage(v16);
							PersistentDataStore v18 = DisplayManagerService.-$$Nest$fgetmPersistentDataStore(this.this$0);
							if (this.mDirty == 0) {
								ByteArrayOutputStream v21 = new ByteArrayOutputStream();
								TypedXmlSerializer v23 = Xml.resolveSerializer(v21);
								PersistentDataStore.saveToXml(v23);
								v23.flush();
								this.mDirty = 0;
								Binder.restoreCallingIdentity(v6);
								return;
							}
						}
					}
				}
			}
		}
	}
}
