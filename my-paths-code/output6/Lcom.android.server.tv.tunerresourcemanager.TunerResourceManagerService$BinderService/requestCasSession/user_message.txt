This is path 1 for the API with depth 2:
public boolean requestCasSession(CasSessionRequest p1, [I p2){
	if (p2 == 0) {
		Object v2 = this.mLock;
		Set v4 = this.mClientProfiles.keySet();
		Integer v5 = Integer.valueOf(CasSessionRequest.clientId);
		boolean v6 = v4.contains(v5);
		boolean v3 = v6;
		if (v3 == 0) {
			if (this.DEBUG == 0) {
				Integer v16 = Integer.valueOf(CasSessionRequest.casSystemId);
				Object v17 = this.mCasResources.get(v16);
				CasResource v15 = v17;
				if (v15 != 0) {
					CasResource$Builder v18 = new CasResource$Builder(CasSessionRequest.casSystemId);
					this.mMaxSessionNum = 2147483647;
					CasResource$Builder v20 = CasResource$Builder;
					CasResource v22 = new CasResource(CasResource$Builder);
					CasResource v21 = v22;
					int v25 = v21.getSystemId();
					Integer v26 = Integer.valueOf(v25);
					Object v27 = this.mCasResources.put(v26, v21);
					Integer v29 = Integer.valueOf(CasSessionRequest.clientId);
					Object v30 = this.mClientProfiles.get(v29);
					ClientProfile v28 = v30;
					boolean v32 = v28.isPriorityOverwritten();
					if (v32 == 0) {
						int v33 = v28.getProcessId();
						boolean v34 = TunerResourceManagerService.checkIsForeground(v33);
						int v35 = v28.getUseCase();
						int v36 = TunerResourceManagerService.getClientPriority(v35, v34);
						v28.setPriority(v36);
						if (this.mAvailableSessionNum != 0) {
							boolean v38 = ;
							if (v38 != 0) {
								Set v40 = this.mOwnerClientIdsToSessionNum.keySet();
								Set v39 = v40;
								Iterator v41 = v39.iterator();
								boolean v42 = v41.hasNext();
								if (v42 == 0) {
									if ( <= -1) {
										int v43 = (this.mPriority - this.mNiceValue);
										if (v43 <= ) {
											Binder.allowBlockingForCurrentThread();
											ClientProfile v46 = TunerResourceManagerService.getClientProfile();
											if (v46 != 0) {
												Set v47 = v46.getShareFeClientIds();
												Iterator v48 = v47.iterator();
												boolean v49 = v48.hasNext();
												if (v49 == 0) {
													if (this.DEBUG == 0) {
														Integer v58 = Integer.valueOf();
														Object v59 = this.mListeners.get(v58);
														IResourcesReclaimListener v60 = v59.getListener();
														v60.onReclaimResources();
														TunerResourceManagerService.clearAllResourcesAndClientMapping(v46);
														boolean v44 = 1;
														if (v44 != 0) {
															int v63 = this.mSystemId;
															this.mResourceRequestCount = (this.mResourceRequestCount + 1);
															int v64 = ((65535 & this.mResourceRequestCount) | (((4 & 255) << 24) | (v63 << 16)));
															CasResource v66 = TunerResourceManagerService.getCasResource(CasSessionRequest.casSystemId);
															ClientProfile v67 = TunerResourceManagerService.getClientProfile(CasSessionRequest.clientId);
															v66.setOwner(CasSessionRequest.clientId);
															v67.useCas(CasSessionRequest.casSystemId);
															boolean v7 = 1;
															return v7;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean requestCasSession(CasSessionRequest p1, [I p2){
	if (p2 == 0) {
		Object v2 = this.mLock;
		Set v4 = this.mClientProfiles.keySet();
		Integer v5 = Integer.valueOf(CasSessionRequest.clientId);
		boolean v6 = v4.contains(v5);
		boolean v3 = v6;
		if (v3 == 0) {
			if (this.DEBUG == 0) {
				Integer v16 = Integer.valueOf(CasSessionRequest.casSystemId);
				Object v17 = this.mCasResources.get(v16);
				CasResource v15 = v17;
				if (v15 != 0) {
					CasResource$Builder v18 = new CasResource$Builder(CasSessionRequest.casSystemId);
					this.mMaxSessionNum = 2147483647;
					CasResource$Builder v20 = CasResource$Builder;
					CasResource v22 = new CasResource(CasResource$Builder);
					CasResource v21 = v22;
					int v25 = v21.getSystemId();
					Integer v26 = Integer.valueOf(v25);
					Object v27 = this.mCasResources.put(v26, v21);
					Integer v29 = Integer.valueOf(CasSessionRequest.clientId);
					Object v30 = this.mClientProfiles.get(v29);
					ClientProfile v28 = v30;
					boolean v32 = v28.isPriorityOverwritten();
					if (v32 == 0) {
						int v33 = v28.getProcessId();
						boolean v34 = TunerResourceManagerService.checkIsForeground(v33);
						int v35 = v28.getUseCase();
						int v36 = TunerResourceManagerService.getClientPriority(v35, v34);
						v28.setPriority(v36);
						if (this.mAvailableSessionNum != 0) {
							boolean v38 = ;
							if (v38 != 0) {
								Set v40 = this.mOwnerClientIdsToSessionNum.keySet();
								Set v39 = v40;
								Iterator v41 = v39.iterator();
								boolean v42 = v41.hasNext();
								if (v42 == 0) {
									if ( <= -1) {
										int v43 = (this.mPriority - this.mNiceValue);
										if (v43 <= ) {
											Binder.allowBlockingForCurrentThread();
											ClientProfile v46 = TunerResourceManagerService.getClientProfile();
											if (v46 != 0) {
												Set v47 = v46.getShareFeClientIds();
												Iterator v48 = v47.iterator();
												boolean v49 = v48.hasNext();
												if (v49 == 0) {
													if (this.DEBUG == 0) {
														Integer v58 = Integer.valueOf();
														Object v59 = this.mListeners.get(v58);
														IResourcesReclaimListener v60 = v59.getListener();
														v60.onReclaimResources();
														TunerResourceManagerService.clearAllResourcesAndClientMapping(v46);
														boolean v44 = 1;
														if (v44 != 0) {
															int v63 = this.mSystemId;
															this.mResourceRequestCount = (this.mResourceRequestCount + 1);
															int v64 = ((65535 & this.mResourceRequestCount) | (((4 & 255) << 24) | (v63 << 16)));
															CasResource v66 = TunerResourceManagerService.getCasResource(CasSessionRequest.casSystemId);
															ClientProfile v67 = TunerResourceManagerService.getClientProfile(CasSessionRequest.clientId);
															v66.setOwner(CasSessionRequest.clientId);
															v67.useCas(CasSessionRequest.casSystemId);
															boolean v7 = 1;
															return v7;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
