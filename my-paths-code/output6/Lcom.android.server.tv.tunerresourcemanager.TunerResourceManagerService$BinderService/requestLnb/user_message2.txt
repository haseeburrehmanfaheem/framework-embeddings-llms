The method requestLnb has the following code snippet:

This is path 1 for the API with depth 2:
public boolean requestLnb(TunerLnbRequest p1, [I p2){
	if (p2 == 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerLnbRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 == 0) {
			if (this.DEBUG == 0) {
				Integer v17 = Integer.valueOf(TunerLnbRequest.clientId);
				Object v18 = this.mClientProfiles.get(v17);
				ClientProfile v16 = v18;
				boolean v20 = v16.isPriorityOverwritten();
				if (v20 == 0) {
					int v21 = v16.getProcessId();
					boolean v22 = TunerResourceManagerService.checkIsForeground(v21);
					int v23 = v16.getUseCase();
					int v24 = TunerResourceManagerService.getClientPriority(v23, v22);
					v16.setPriority(v24);
					Map v26 = this.mLnbResources;
					Collection v27 = v26.values();
					Iterator v28 = v27.iterator();
					boolean v29 = v28.hasNext();
					if (v29 == 0) {
						Object v30 = v28.next();
						boolean v31 = this.mIsInUse;
						if (v31 != 0) {
							int v32 = this.mHandle;
							if ( <= -1) {
								if ( <= -1) {
									int v33 = (this.mPriority - this.mNiceValue);
									if (v33 <= ) {
										Integer v35 = Integer.valueOf();
										Object v36 = this.mLnbResources.get(v35);
										LnbResource v34 = v36;
										int v37 = this.mOwnerClientId;
										Binder.allowBlockingForCurrentThread();
										ClientProfile v40 = TunerResourceManagerService.getClientProfile(v37);
										if (v40 != 0) {
											Set v41 = v40.getShareFeClientIds();
											Iterator v42 = v41.iterator();
											boolean v43 = v42.hasNext();
											if (v43 == 0) {
												if (this.DEBUG == 0) {
													Integer v52 = Integer.valueOf(v37);
													Object v53 = this.mListeners.get(v52);
													IResourcesReclaimListener v54 = v53.getListener();
													v54.onReclaimResources();
													TunerResourceManagerService.clearAllResourcesAndClientMapping(v40);
													boolean v38 = 1;
													if (v38 != 0) {
														LnbResource v58 = TunerResourceManagerService.getLnbResource();
														ClientProfile v59 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);
														v58.setOwner(TunerLnbRequest.clientId);
														v59.useLnb();
														boolean v8 = 1;
														return v8;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean requestLnb(TunerLnbRequest p1, [I p2){
	if (p2 == 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerLnbRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 == 0) {
			if (this.DEBUG == 0) {
				Integer v17 = Integer.valueOf(TunerLnbRequest.clientId);
				Object v18 = this.mClientProfiles.get(v17);
				ClientProfile v16 = v18;
				boolean v20 = v16.isPriorityOverwritten();
				if (v20 == 0) {
					Map v21 = this.mLnbResources;
					Collection v22 = v21.values();
					Iterator v23 = v22.iterator();
					boolean v24 = v23.hasNext();
					if (v24 == 0) {
						Object v25 = v23.next();
						boolean v26 = this.mIsInUse;
						if (v26 != 0) {
							int v27 = this.mHandle;
							if ( <= -1) {
								if ( <= -1) {
									int v28 = (this.mPriority - this.mNiceValue);
									if (v28 <= ) {
										Integer v30 = Integer.valueOf();
										Object v31 = this.mLnbResources.get(v30);
										LnbResource v29 = v31;
										int v32 = this.mOwnerClientId;
										Binder.allowBlockingForCurrentThread();
										ClientProfile v35 = TunerResourceManagerService.getClientProfile(v32);
										if (v35 != 0) {
											Set v36 = v35.getShareFeClientIds();
											Iterator v37 = v36.iterator();
											boolean v38 = v37.hasNext();
											if (v38 == 0) {
												if (this.DEBUG == 0) {
													Integer v47 = Integer.valueOf(v32);
													Object v48 = this.mListeners.get(v47);
													IResourcesReclaimListener v49 = v48.getListener();
													v49.onReclaimResources();
													TunerResourceManagerService.clearAllResourcesAndClientMapping(v35);
													boolean v33 = 1;
													if (v33 != 0) {
														LnbResource v53 = TunerResourceManagerService.getLnbResource();
														ClientProfile v54 = TunerResourceManagerService.getClientProfile(TunerLnbRequest.clientId);
														v53.setOwner(TunerLnbRequest.clientId);
														v54.useLnb();
														boolean v8 = 1;
														return v8;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v17 = Integer.valueOf(TunerLnbRequest.clientId);\nObject v18 = this.mClientProfiles.get(v17);\nboolean v20 = v16.isPriorityOverwritten();\nv16.setPriority(v24);', 'Map v21 = this.mLnbResources;\nCollection v22 = v21.values();\nIterator v23 = v22.iterator();\nObject v25 = v23.next();\nLnbResource v29 = v31;', 'ClientProfile v35 = TunerResourceManagerService.getClientProfile(v32);\nv49.onReclaimResources();\nTunerResourceManagerService.clearAllResourcesAndClientMapping(v35);', 'LnbResource v53 = TunerResourceManagerService.getLnbResource();\nv53.setOwner(TunerLnbRequest.clientId);\nv54.useLnb();']

The method requestLnb has the following similar APIs:

- API Name: releaseCasSession(II)V with Similarity Score: 0.8750555515289307
  - Access Control Level: NONE and the following code:
ClientProfile v14 = TunerResourceManagerService.getClientProfile(p2);
p1.removeOwner(p2);
v14.releaseCas();

- API Name: isLowestPriority(II)Z with Similarity Score: 0.872096061706543
  - Access Control Level: NONE and the following code:
Integer v9 = Integer.valueOf(p1);
Object v10 = this.mClientProfiles.get(v9);
ClientProfile v8 = v10;
boolean v12 = v8.isPriorityOverwritten();
int v13 = v8.getProcessId();
boolean v14 = TunerResourceManagerService.checkIsForeground(v13);
int v15 = v8.getUseCase();
int v16 = TunerResourceManagerService.getClientPriority(v15, v14);
v8.setPriority(v16);

