This is path 1 for the API with depth 2:
public boolean requestFrontend(TunerFrontendRequest p1, [I p2){
	if (p2 != 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerFrontendRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 != 0) {
			Integer v9 = Integer.valueOf(TunerFrontendRequest.clientId);
			Object v10 = this.mClientProfiles.get(v9);
			ClientProfile v8 = v10;
			Set v11 = this.mUsingFrontendHandles;
			boolean v12 = v11.isEmpty();
			if (v12 != 0) {
				if (this.DEBUG == 0) {
					Integer v22 = Integer.valueOf(TunerFrontendRequest.clientId);
					Object v23 = this.mClientProfiles.get(v22);
					ClientProfile v21 = v23;
					if (v21 != 0) {
						boolean v25 = v21.isPriorityOverwritten();
						if (v25 == 0) {
							int v26 = v21.getProcessId();
							boolean v27 = TunerResourceManagerService.checkIsForeground(v26);
							int v28 = v21.getUseCase();
							int v29 = TunerResourceManagerService.getClientPriority(v28, v27);
							v21.setPriority(v29);
							Map v31 = this.mFrontendResources;
							Collection v32 = v31.values();
							Iterator v33 = v32.iterator();
							boolean v34 = v33.hasNext();
							if (v34 == 0) {
								Object v35 = v33.next();
								int v36 = this.mType;
								if (v36 != TunerFrontendRequest.frontendType) {
									boolean v37 = this.mIsInUse;
									if (v37 != 0) {
										int v39 = this.mFrontendMaxUsableNums.get(TunerFrontendRequest.frontendType, -1);
										if (v39 != -1) {
											int v40 = this.mFrontendUsedNums.get(TunerFrontendRequest.frontendType, -1);
											if (v40 != -1) {
												if ( < v39) {
													boolean v38 = ;
													if (v38 == 0) {
														Set v41 = this.mExclusiveGroupMemberHandles;
														boolean v42 = v41.isEmpty();
														if (v42 == 0) {
															int v43 = this.mHandle;
															if ( == -1) {
																if ( == -1) {
																	int v44 = (this.mPriority - this.mNiceValue);
																	if (v44 <= ) {
																		Integer v46 = Integer.valueOf();
																		Object v47 = this.mFrontendResources.get(v46);
																		FrontendResource v45 = v47;
																		int v48 = this.mOwnerClientId;
																		Binder.allowBlockingForCurrentThread();
																		ClientProfile v51 = TunerResourceManagerService.getClientProfile(v48);
																		if (v51 != 0) {
																			Set v52 = v51.getShareFeClientIds();
																			Iterator v53 = v52.iterator();
																			boolean v54 = v53.hasNext();
																			if (v54 == 0) {
																				if (this.DEBUG == 0) {
																					Integer v63 = Integer.valueOf(v48);
																					Object v64 = this.mListeners.get(v63);
																					IResourcesReclaimListener v65 = v64.getListener();
																					v65.onReclaimResources();
																					TunerResourceManagerService.clearAllResourcesAndClientMapping(v51);
																					boolean v49 = 1;
																					if (v49 != 0) {
																						FrontendResource v69 = TunerResourceManagerService.getFrontendResource();
																						ClientProfile v70 = TunerResourceManagerService.getClientProfile(TunerFrontendRequest.clientId);
																						v69.setOwner(TunerFrontendRequest.clientId);
																						int v72 = v69.getType();
																						TunerResourceManagerService.increFrontendNum(this.mFrontendUsedNums, v72);
																						v70.useFrontend();
																						Set v75 = v69.getExclusiveGroupMemberFeHandles();
																						Iterator v76 = v75.iterator();
																						boolean v77 = v76.hasNext();
																						if (v77 == 0) {
																							v70.setPrimaryFrontend();
																							boolean v13 = 1;
																							return v13;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean requestFrontend(TunerFrontendRequest p1, [I p2){
	if (p2 != 0) {
		Object v3 = this.mLock;
		Set v5 = this.mClientProfiles.keySet();
		Integer v6 = Integer.valueOf(TunerFrontendRequest.clientId);
		boolean v7 = v5.contains(v6);
		boolean v4 = v7;
		if (v4 != 0) {
			Integer v9 = Integer.valueOf(TunerFrontendRequest.clientId);
			Object v10 = this.mClientProfiles.get(v9);
			ClientProfile v8 = v10;
			Set v11 = this.mUsingFrontendHandles;
			boolean v12 = v11.isEmpty();
			if (v12 != 0) {
				if (this.DEBUG == 0) {
					Integer v22 = Integer.valueOf(TunerFrontendRequest.clientId);
					Object v23 = this.mClientProfiles.get(v22);
					ClientProfile v21 = v23;
					if (v21 != 0) {
						boolean v25 = v21.isPriorityOverwritten();
						if (v25 == 0) {
							Map v26 = this.mFrontendResources;
							Collection v27 = v26.values();
							Iterator v28 = v27.iterator();
							boolean v29 = v28.hasNext();
							if (v29 == 0) {
								Object v30 = v28.next();
								int v31 = this.mType;
								if (v31 != TunerFrontendRequest.frontendType) {
									boolean v32 = this.mIsInUse;
									if (v32 != 0) {
										int v34 = this.mFrontendMaxUsableNums.get(TunerFrontendRequest.frontendType, -1);
										if (v34 != -1) {
											int v35 = this.mFrontendUsedNums.get(TunerFrontendRequest.frontendType, -1);
											if (v35 != -1) {
												if ( < v34) {
													boolean v33 = ;
													if (v33 == 0) {
														Set v36 = this.mExclusiveGroupMemberHandles;
														boolean v37 = v36.isEmpty();
														if (v37 == 0) {
															int v38 = this.mHandle;
															if ( == -1) {
																if ( == -1) {
																	int v39 = (this.mPriority - this.mNiceValue);
																	if (v39 <= ) {
																		Integer v41 = Integer.valueOf();
																		Object v42 = this.mFrontendResources.get(v41);
																		FrontendResource v40 = v42;
																		int v43 = this.mOwnerClientId;
																		Binder.allowBlockingForCurrentThread();
																		ClientProfile v46 = TunerResourceManagerService.getClientProfile(v43);
																		if (v46 != 0) {
																			Set v47 = v46.getShareFeClientIds();
																			Iterator v48 = v47.iterator();
																			boolean v49 = v48.hasNext();
																			if (v49 == 0) {
																				if (this.DEBUG == 0) {
																					Integer v58 = Integer.valueOf(v43);
																					Object v59 = this.mListeners.get(v58);
																					IResourcesReclaimListener v60 = v59.getListener();
																					v60.onReclaimResources();
																					TunerResourceManagerService.clearAllResourcesAndClientMapping(v46);
																					boolean v44 = 1;
																					if (v44 != 0) {
																						FrontendResource v64 = TunerResourceManagerService.getFrontendResource();
																						ClientProfile v65 = TunerResourceManagerService.getClientProfile(TunerFrontendRequest.clientId);
																						v64.setOwner(TunerFrontendRequest.clientId);
																						int v67 = v64.getType();
																						TunerResourceManagerService.increFrontendNum(this.mFrontendUsedNums, v67);
																						v65.useFrontend();
																						Set v70 = v64.getExclusiveGroupMemberFeHandles();
																						Iterator v71 = v70.iterator();
																						boolean v72 = v71.hasNext();
																						if (v72 == 0) {
																							v65.setPrimaryFrontend();
																							boolean v13 = 1;
																							return v13;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
