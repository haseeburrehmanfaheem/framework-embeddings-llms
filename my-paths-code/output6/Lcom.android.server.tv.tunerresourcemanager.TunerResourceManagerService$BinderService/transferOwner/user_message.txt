This is path 1 for the API with depth 2:
public boolean transferOwner(int p1, int p2, int p3){
	Object v3 = this.mLock;
	Set v5 = this.mClientProfiles.keySet();
	Integer v6 = Integer.valueOf(p2);
	boolean v7 = v5.contains(v6);
	boolean v4 = v7;
	if (v4 != 0) {
		Set v9 = this.mClientProfiles.keySet();
		Integer v10 = Integer.valueOf(p3);
		boolean v11 = v9.contains(v10);
		boolean v8 = v11;
		if (v8 != 0) {
			if (p1 == 0) {
				ClientProfile v14 = TunerResourceManagerService.getClientProfile(p2);
				ClientProfile v15 = TunerResourceManagerService.getClientProfile(p3);
				v15.shareFrontend(p2);
				v14.stopSharingFrontend(p3);
				Set v18 = v15.getInUseFrontendHandles();
				Iterator v19 = v18.iterator();
				boolean v20 = v19.hasNext();
				if (v20 == 0) {
					int v21 = v14.getPrimaryFrontend();
					v15.setPrimaryFrontend(v21);
					v14.setPrimaryFrontend(-1);
					Set v24 = v14.getInUseFrontendHandles();
					Iterator v25 = v24.iterator();
					boolean v26 = v25.hasNext();
					if (v26 == 0) {
						boolean v13 = 1;
						boolean v12 = v13;
						return v12;
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean transferOwner(int p1, int p2, int p3){
	Object v3 = this.mLock;
	Set v5 = this.mClientProfiles.keySet();
	Integer v6 = Integer.valueOf(p2);
	boolean v7 = v5.contains(v6);
	boolean v4 = v7;
	if (v4 != 0) {
		Set v9 = this.mClientProfiles.keySet();
		Integer v10 = Integer.valueOf(p3);
		boolean v11 = v9.contains(v10);
		boolean v8 = v11;
		if (v8 != 0) {
			if (p1 == 0) {
				if (p1 == 3) {
					ClientProfile v14 = TunerResourceManagerService.getClientProfile(p2);
					ClientProfile v15 = TunerResourceManagerService.getClientProfile(p3);
					HashSet v16 = new HashSet();
					Set v18 = v14.getInUseLnbHandles();
					Iterator v19 = v18.iterator();
					boolean v20 = v19.hasNext();
					if (v20 == 0) {
						Iterator v21 = v16.iterator();
						boolean v22 = v21.hasNext();
						if (v22 == 0) {
							boolean v13 = 1;
							boolean v12 = v13;
							return v12;
						}
					}
				}
			}
		}
	}
}
