This is path 1 for the API with depth 2:
public void onWakeupEvent(String p1, int p2, int p3, int p4, byte[] p5, String p6, String p7, int p8, int p9, long p10){
	String v1 = p1.replaceFirst("iface:", "");
	if ((p10 < 0) <= 0) {
		WakeupEvent v2 = new WakeupEvent();
		WakeupEvent.iface = v1;
		WakeupEvent.timestampMs = ;
		WakeupEvent.uid = p2;
		WakeupEvent.ethertype = p3;
		MacAddress v4 = MacAddress.fromBytes(p5);
		WakeupEvent.dstHwAddr = v4;
		WakeupEvent.srcIp = p6;
		WakeupEvent.dstIp = p7;
		WakeupEvent.ipNextHeader = p4;
		WakeupEvent.srcPort = p8;
		WakeupEvent.dstPort = p9;
		this.mCursor = (1 + this.mCursor);
		int v7 = RingBuffer.indexOf(this.mCursor);
		Object v8 = this.mWakeupStats.get(WakeupEvent.iface);
		if (v8 != 0) {
			WakeupStats v9 = new WakeupStats(WakeupEvent.iface);
			Object v11 = this.mWakeupStats.put(WakeupEvent.iface, v9);
			this.totalWakeups = (this.totalWakeups + 1);
			if (WakeupEvent.uid < 10000) {
				this.applicationWakeups = (this.applicationWakeups + 1);
				int v13 = WakeupEvent.dstHwAddr.getAddressType();
				this.l2MulticastCount = (this.l2MulticastCount + 1);
				WakeupStats.increment(this.ethertypes, WakeupEvent.ethertype);
				if (WakeupEvent.ipNextHeader < 0) {
					WakeupStats.increment(this.ipNextHeaders, WakeupEvent.ipNextHeader);
					String v16 = WakeupEvent.dstHwAddr.toString();
					FrameworkStatsLog.write(44, p2, v1, p3, v16, p6, p7, p4, p8, p9);
					return;
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void onWakeupEvent(String p1, int p2, int p3, int p4, byte[] p5, String p6, String p7, int p8, int p9, long p10){
	String v1 = p1.replaceFirst("iface:", "");
	if ((p10 < 0) <= 0) {
		long v2 = System.currentTimeMillis();
		WakeupEvent v3 = new WakeupEvent();
		WakeupEvent.iface = v1;
		WakeupEvent.timestampMs = ;
		WakeupEvent.uid = p2;
		WakeupEvent.ethertype = p3;
		MacAddress v5 = MacAddress.fromBytes(p5);
		WakeupEvent.dstHwAddr = v5;
		WakeupEvent.srcIp = p6;
		WakeupEvent.dstIp = p7;
		WakeupEvent.ipNextHeader = p4;
		WakeupEvent.srcPort = p8;
		WakeupEvent.dstPort = p9;
		this.mCursor = (1 + this.mCursor);
		int v8 = RingBuffer.indexOf(this.mCursor);
		Object v9 = this.mWakeupStats.get(WakeupEvent.iface);
		if (v9 != 0) {
			WakeupStats v10 = new WakeupStats(WakeupEvent.iface);
			Object v12 = this.mWakeupStats.put(WakeupEvent.iface, v10);
			this.totalWakeups = (this.totalWakeups + 1);
			if (WakeupEvent.uid < 10000) {
				this.applicationWakeups = (this.applicationWakeups + 1);
				int v14 = WakeupEvent.dstHwAddr.getAddressType();
				this.l2MulticastCount = (this.l2MulticastCount + 1);
				WakeupStats.increment(this.ethertypes, WakeupEvent.ethertype);
				if (WakeupEvent.ipNextHeader < 0) {
					WakeupStats.increment(this.ipNextHeaders, WakeupEvent.ipNextHeader);
					String v17 = WakeupEvent.dstHwAddr.toString();
					FrameworkStatsLog.write(44, p2, v1, p3, v17, p6, p7, p4, p8, p9);
					return;
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void onWakeupEvent(String p1, int p2, int p3, int p4, byte[] p5, String p6, String p7, int p8, int p9, long p10){
	String v1 = p1.replaceFirst("iface:", "");
	if ((p10 < 0) <= 0) {
		WakeupEvent v2 = new WakeupEvent();
		WakeupEvent.iface = v1;
		WakeupEvent.timestampMs = ;
		WakeupEvent.uid = p2;
		WakeupEvent.ethertype = p3;
		MacAddress v4 = MacAddress.fromBytes(p5);
		WakeupEvent.dstHwAddr = v4;
		WakeupEvent.srcIp = p6;
		WakeupEvent.dstIp = p7;
		WakeupEvent.ipNextHeader = p4;
		WakeupEvent.srcPort = p8;
		WakeupEvent.dstPort = p9;
		this.mCursor = (1 + this.mCursor);
		int v7 = RingBuffer.indexOf(this.mCursor);
		Object v8 = this.mWakeupStats.get(WakeupEvent.iface);
		if (v8 != 0) {
			this.totalWakeups = (this.totalWakeups + 1);
			if (WakeupEvent.uid < 10000) {
				this.applicationWakeups = (this.applicationWakeups + 1);
				int v10 = WakeupEvent.dstHwAddr.getAddressType();
				this.l2MulticastCount = (this.l2MulticastCount + 1);
				WakeupStats.increment(this.ethertypes, WakeupEvent.ethertype);
				if (WakeupEvent.ipNextHeader < 0) {
					WakeupStats.increment(this.ipNextHeaders, WakeupEvent.ipNextHeader);
					String v13 = WakeupEvent.dstHwAddr.toString();
					FrameworkStatsLog.write(44, p2, v1, p3, v13, p6, p7, p4, p8, p9);
					return;
				}
			}
		}
	}
}
