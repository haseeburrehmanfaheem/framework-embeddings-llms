The method clearOverride has the following code snippet:

This is path 1 for the API with depth 2:
public boolean clearOverride(long p1, String p2){
	Long v4 = CompatConfig.getVersionCodeOrNull(p2);
	Long v5 = Long.valueOf(p1);
	Object v6 = this.mChanges.get(v5);
	if (v6 == 0) {
		boolean v7 = CompatConfig.removeOverrideUnsafe(v6, p2, v4);
		boolean v3 = v7;
		if (v3 == 0) {
			if (this.mOverridesFile == 0) {
				if (this.mBackupOverridesFile != 0) {
					Overrides v9 = new Overrides();
					List v11 = v9.getChangeOverrides();
					Collection v12 = this.mChanges.values();
					Iterator v13 = v12.iterator();
					boolean v14 = v13.hasNext();
					if (v14 == 0) {
						boolean v15 = this.mOverridesFile.exists();
						if (v15 == 0) {
							boolean v16 = this.mBackupOverridesFile.exists();
							if (v16 == 0) {
								boolean v17 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
								if (v17 != 0) {
									boolean v18 = this.mOverridesFile.createNewFile();
									PrintWriter v19 = new PrintWriter(this.mOverridesFile);
									XmlWriter v21 = new XmlWriter(v19);
									XmlWriter.write(v21, v9);
									v19.close();
									boolean v25 = this.mBackupOverridesFile.delete();
									ChangeIdStateCache.invalidate();
									boolean v2 = v3;
									int v41 = UserHandle.getAppId(v31);
									long v43 = Binder.clearCallingIdentity();
									IActivityManager v44 = ActivityManager.getService();
									if (v44 == 0) {
										v44.killUid(v41, -1, "PlatformCompat overrides");
										Binder.restoreCallingIdentity(v43);
										return v2;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean clearOverride(long p1, String p2){
	Long v4 = CompatConfig.getVersionCodeOrNull(p2);
	Long v5 = Long.valueOf(p1);
	Object v6 = this.mChanges.get(v5);
	if (v6 == 0) {
		boolean v7 = CompatConfig.removeOverrideUnsafe(v6, p2, v4);
		boolean v3 = v7;
		if (v3 == 0) {
			if (this.mOverridesFile == 0) {
				if (this.mBackupOverridesFile != 0) {
					Overrides v9 = new Overrides();
					List v11 = v9.getChangeOverrides();
					Collection v12 = this.mChanges.values();
					Iterator v13 = v12.iterator();
					boolean v14 = v13.hasNext();
					if (v14 == 0) {
						boolean v15 = this.mOverridesFile.exists();
						if (v15 == 0) {
							boolean v16 = this.mBackupOverridesFile.exists();
							if (v16 == 0) {
								boolean v17 = this.mOverridesFile.delete();
								boolean v18 = this.mOverridesFile.createNewFile();
								PrintWriter v19 = new PrintWriter(this.mOverridesFile);
								XmlWriter v21 = new XmlWriter(v19);
								XmlWriter.write(v21, v9);
								v19.close();
								boolean v25 = this.mBackupOverridesFile.delete();
								ChangeIdStateCache.invalidate();
								boolean v2 = v3;
								int v41 = UserHandle.getAppId(v31);
								long v43 = Binder.clearCallingIdentity();
								IActivityManager v44 = ActivityManager.getService();
								if (v44 == 0) {
									v44.killUid(v41, -1, "PlatformCompat overrides");
									Binder.restoreCallingIdentity(v43);
									return v2;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean clearOverride(long p1, String p2){
	Long v4 = CompatConfig.getVersionCodeOrNull(p2);
	Long v5 = Long.valueOf(p1);
	Object v6 = this.mChanges.get(v5);
	if (v6 == 0) {
		boolean v7 = CompatConfig.removeOverrideUnsafe(v6, p2, v4);
		boolean v3 = v7;
		if (v3 == 0) {
			if (this.mOverridesFile == 0) {
				if (this.mBackupOverridesFile != 0) {
					Overrides v9 = new Overrides();
					List v11 = v9.getChangeOverrides();
					Collection v12 = this.mChanges.values();
					Iterator v13 = v12.iterator();
					boolean v14 = v13.hasNext();
					if (v14 == 0) {
						boolean v15 = this.mOverridesFile.exists();
						if (v15 == 0) {
							boolean v16 = this.mBackupOverridesFile.exists();
							if (v16 == 0) {
								boolean v17 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
								if (v17 != 0) {
									boolean v18 = this.mOverridesFile.createNewFile();
									PrintWriter v19 = new PrintWriter(this.mOverridesFile);
									XmlWriter v21 = new XmlWriter(v19);
									XmlWriter.write(v21, v9);
									v19.close();
									boolean v25 = this.mBackupOverridesFile.delete();
									ChangeIdStateCache.invalidate();
									boolean v2 = v3;
									int v41 = UserHandle.getAppId(v31);
									long v43 = Binder.clearCallingIdentity();
									IActivityManager v44 = ActivityManager.getService();
									if (v44 == 0) {
										v44.killUid(v41, -1, "PlatformCompat overrides");
										Binder.restoreCallingIdentity(v43);
										return v2;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Long v4 = CompatConfig.getVersionCodeOrNull(p2);\nLong v5 = Long.valueOf(p1);\nObject v6 = this.mChanges.get(v5);\nboolean v7 = CompatConfig.removeOverrideUnsafe(v6, p2, v4);', 'Overrides v9 = new Overrides();\nList v11 = v9.getChangeOverrides();\nPrintWriter v19 = new PrintWriter(this.mOverridesFile);\nXmlWriter v21 = new XmlWriter(v19);\nXmlWriter.write(v21, v9);', 'int v41 = UserHandle.getAppId(v31);\nlong v43 = Binder.clearCallingIdentity();\nIActivityManager v44 = ActivityManager.getService();\nv44.killUid(v41, -1, "PlatformCompat overrides");\nBinder.restoreCallingIdentity(v43);']

The method clearOverride has the following similar APIs:

- API Name: clearOverrideForTest(JLjava/lang/String;)Z with Similarity Score: 1.0000001192092896
  - Access Control Level: SYS_OR_SIG and the following code:
Overrides v9 = new Overrides();
List v11 = v9.getChangeOverrides();
PrintWriter v19 = new PrintWriter(this.mOverridesFile);
XmlWriter v21 = new XmlWriter(v19);
XmlWriter.write(v21, v9);

- API Name: putOverridesOnReleaseBuilds(Lcom/android/internal/compat/CompatibilityOverrideConfig;Ljava/lang/String;)V with Similarity Score: 0.9789665937423706
  - Access Control Level: NONE and the following code:
Overrides v12 = new Overrides();
List v14 = v12.getChangeOverrides();
PrintWriter v22 = new PrintWriter(this.mOverridesFile);
XmlWriter v24 = new XmlWriter(v22);
XmlWriter.write(v24, v12);

