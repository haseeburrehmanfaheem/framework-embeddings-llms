This is path 1 for the API with depth 2:
public void setOverrides(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v5 = this.mChangeConfig.getEnabledSet();
	Set v4 = v5;
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		Set v9 = this.mChangeConfig.getDisabledSet();
		Set v8 = v9;
		Iterator v10 = v8.iterator();
		boolean v11 = v10.hasNext();
		if (v11 == 0) {
			CompatibilityOverrideConfig v12 = new CompatibilityOverrideConfig(v2);
			Set v16 = CompatibilityOverrideConfig.overrides.keySet();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				if (this.mOverridesFile == 0) {
					if (this.mBackupOverridesFile != 0) {
						Overrides v20 = new Overrides();
						List v22 = v20.getChangeOverrides();
						Collection v23 = this.mChanges.values();
						Iterator v24 = v23.iterator();
						boolean v25 = v24.hasNext();
						if (v25 == 0) {
							boolean v26 = this.mOverridesFile.exists();
							if (v26 == 0) {
								boolean v27 = this.mBackupOverridesFile.exists();
								if (v27 == 0) {
									boolean v28 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
									if (v28 != 0) {
										boolean v29 = this.mOverridesFile.createNewFile();
										PrintWriter v30 = new PrintWriter(this.mOverridesFile);
										XmlWriter v32 = new XmlWriter(v30);
										XmlWriter.write(v32, v20);
										v30.close();
										boolean v36 = this.mBackupOverridesFile.delete();
										ChangeIdStateCache.invalidate();
										int v52 = UserHandle.getAppId(v42);
										long v54 = Binder.clearCallingIdentity();
										IActivityManager v55 = ActivityManager.getService();
										if (v55 == 0) {
											v55.killUid(v52, -1, "PlatformCompat overrides");
											Binder.restoreCallingIdentity(v54);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setOverrides(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v5 = this.mChangeConfig.getEnabledSet();
	Set v4 = v5;
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		Set v9 = this.mChangeConfig.getDisabledSet();
		Set v8 = v9;
		Iterator v10 = v8.iterator();
		boolean v11 = v10.hasNext();
		if (v11 == 0) {
			CompatibilityOverrideConfig v12 = new CompatibilityOverrideConfig(v2);
			Set v16 = CompatibilityOverrideConfig.overrides.keySet();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				if (this.mOverridesFile == 0) {
					if (this.mBackupOverridesFile != 0) {
						Overrides v20 = new Overrides();
						List v22 = v20.getChangeOverrides();
						Collection v23 = this.mChanges.values();
						Iterator v24 = v23.iterator();
						boolean v25 = v24.hasNext();
						if (v25 == 0) {
							boolean v26 = this.mOverridesFile.exists();
							if (v26 == 0) {
								boolean v27 = this.mBackupOverridesFile.exists();
								if (v27 == 0) {
									boolean v28 = this.mOverridesFile.delete();
									boolean v29 = this.mOverridesFile.createNewFile();
									PrintWriter v30 = new PrintWriter(this.mOverridesFile);
									XmlWriter v32 = new XmlWriter(v30);
									XmlWriter.write(v32, v20);
									v30.close();
									boolean v36 = this.mBackupOverridesFile.delete();
									ChangeIdStateCache.invalidate();
									int v52 = UserHandle.getAppId(v42);
									long v54 = Binder.clearCallingIdentity();
									IActivityManager v55 = ActivityManager.getService();
									if (v55 == 0) {
										v55.killUid(v52, -1, "PlatformCompat overrides");
										Binder.restoreCallingIdentity(v54);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setOverrides(CompatibilityChangeConfig p1, String p2){
	HashMap v2 = new HashMap();
	Set v5 = this.mChangeConfig.getEnabledSet();
	Set v4 = v5;
	Iterator v6 = v4.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		Set v9 = this.mChangeConfig.getDisabledSet();
		Set v8 = v9;
		Iterator v10 = v8.iterator();
		boolean v11 = v10.hasNext();
		if (v11 == 0) {
			CompatibilityOverrideConfig v12 = new CompatibilityOverrideConfig(v2);
			Set v16 = CompatibilityOverrideConfig.overrides.keySet();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				if (this.mOverridesFile == 0) {
					if (this.mBackupOverridesFile != 0) {
						Overrides v20 = new Overrides();
						List v22 = v20.getChangeOverrides();
						Collection v23 = this.mChanges.values();
						Iterator v24 = v23.iterator();
						boolean v25 = v24.hasNext();
						if (v25 == 0) {
							boolean v26 = this.mOverridesFile.exists();
							if (v26 == 0) {
								boolean v27 = this.mBackupOverridesFile.exists();
								if (v27 == 0) {
									boolean v28 = this.mOverridesFile.renameTo(this.mBackupOverridesFile);
									if (v28 != 0) {
										boolean v29 = this.mOverridesFile.createNewFile();
										PrintWriter v30 = new PrintWriter(this.mOverridesFile);
										XmlWriter v32 = new XmlWriter(v30);
										XmlWriter.write(v32, v20);
										v30.close();
										boolean v36 = this.mBackupOverridesFile.delete();
										ChangeIdStateCache.invalidate();
										int v52 = UserHandle.getAppId(v42);
										long v54 = Binder.clearCallingIdentity();
										IActivityManager v55 = ActivityManager.getService();
										if (v55 == 0) {
											v55.killUid(v52, -1, "PlatformCompat overrides");
											Binder.restoreCallingIdentity(v54);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
