The method isChangeEnabled has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isChangeEnabled(long p1, ApplicationInfo p2){
	boolean v4 = this.mCompatConfig.isChangeEnabled(p1, p2);
	boolean v3 = v4;
	if (p2 == 0) {
		if (v3 == 0) {
			this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, );
			boolean v2 = v3;
			return v2;
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isChangeEnabled(long p1, ApplicationInfo p2){
	boolean v4 = this.mCompatConfig.isChangeEnabled(p1, p2);
	boolean v3 = v4;
	if (p2 == 0) {
		if (v3 == 0) {
			this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, );
			boolean v2 = v3;
			return v2;
		}
	}
}

and the following sink code:
['boolean v4 = this.mCompatConfig.isChangeEnabled(p1, p2);\nreturn v2;', 'this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, );']

The method isChangeEnabled has the following similar APIs:

- API Name: reportChangeByUid(JI)V with Similarity Score: 0.8430641889572144
  - Access Control Level: NONE and the following code:
this.mChangeReporter.reportChange(p2, p1, 3);

- API Name: setOverrides(Lcom/android/internal/compat/CompatibilityChangeConfig;Ljava/lang/String;)V with Similarity Score: 0.7636662721633911
  - Access Control Level: SYS_OR_SIG and the following code:
HashMap v2 = new HashMap();
Set v5 = this.mChangeConfig.getEnabledSet();
CompatibilityOverrideConfig v12 = new CompatibilityOverrideConfig(v2);

