The method isChangeEnabledByPackageName has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isChangeEnabledByPackageName(long p1, String p2, int p3){
	Object v4 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v3 = v4;
	int v5 = Process.myUid();
	ApplicationInfo v6 = v3.getApplicationInfo(p2, 0, v5, p3);
	ApplicationInfo v2 = v6;
	if (v2 != 0) {
		Long v8 = Long.valueOf(p1);
		Object v9 = this.mChanges.get(v8);
		if (v9 != 0) {
			if (p2 != 0) {
				Object v11 = this.mRawOverrides.get(p2);
				if (v11 == 0) {
					int v12 = v11.evaluateForAllVersions();
					if (v12 == 0) {
						if (v12 == 1) {
							if (v12 == 2) {
								boolean v13 = CompatChange.defaultValue();
								boolean v10 = v13;
								boolean v7 = v10;
								return v7;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isChangeEnabledByPackageName(long p1, String p2, int p3){
	Object v4 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v3 = v4;
	int v5 = Process.myUid();
	ApplicationInfo v6 = v3.getApplicationInfo(p2, 0, v5, p3);
	ApplicationInfo v2 = v6;
	if (v2 != 0) {
		boolean v9 = this.mCompatConfig.isChangeEnabled(p1, p2);
		boolean v8 = v9;
		if (v2 == 0) {
			if (v8 == 0) {
				this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, );
				boolean v7 = v8;
				return v7;
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean isChangeEnabledByPackageName(long p1, String p2, int p3){
	Object v4 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v3 = v4;
	int v5 = Process.myUid();
	ApplicationInfo v6 = v3.getApplicationInfo(p2, 0, v5, p3);
	ApplicationInfo v2 = v6;
	if (v2 != 0) {
		boolean v9 = this.mCompatConfig.isChangeEnabled(p1, p2);
		boolean v8 = v9;
		if (v2 == 0) {
			if (v8 == 0) {
				this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, );
				boolean v7 = v8;
				return v7;
			}
		}
	}
}

and the following sink code:
['Object v4 = this.sLocalServiceObjects.get(PackageManagerInterna.class);\nApplicationInfo v6 = v3.getApplicationInfo(p2, 0, v5, p3);\nboolean v9 = this.mCompatConfig.isChangeEnabled(p1, p2);\nreturn v7;']

The method isChangeEnabledByPackageName has the following similar APIs:

- API Name: reportChangeByPackageName(JLjava/lang/String;I)V with Similarity Score: 0.7726044058799744
  - Access Control Level: NONE and the following code:
Object v4 = LocalServices.getService(PackageManagerInterna.class);
int v5 = Process.myUid();
ApplicationInfo v6 = v4.getApplicationInfo(p2, 0, v5, p3);
ApplicationInfo v3 = v6;
if (v3 == 0) { this.mChangeReporter.reportChange(ApplicationInfo.uid, p1, 3); return; }

- API Name: getFrontActivityScreenCompatMode()I with Similarity Score: 0.7620401978492737
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v17 = CompatModePackages.getPackageCompatModeEnabledLocked(p1);
float v18 = CompatModePackages.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
Configuration v19 = this.mService.getGlobalConfiguration();
CompatibilityInfo v20 = new CompatibilityInfo(p1, Configuration.screenLayout, Configuration.smallestScreenWidthDp, v17, v18);
boolean v22 = v16.alwaysSupportsScreen();
if (v22 == 0) { boolean v23 = v16.neverSupportsScreen(); }
int v25 = CompatModePackages.getPackageFlags(ApplicationInfo.packageName);
return v15;

