The method setupBcb has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setupBcb(String p1){
	if ( >= 30) {
		String v4 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
		String v5 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
		String v6 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
		boolean v7 = "running".equals(v4);
		if (v7 != 0) {
			boolean v8 = "running".equals(v5);
			if (v8 != 0) {
				boolean v9 = "running".equals(v6);
				if (v9 == 0) {
					if ( != 0) {
						boolean v3 = 1;
						if (v3 != 0) {
							if (1 == 0) {
								SystemProperties.set("ctl.start", "setup-bcb");
								RecoverySystemService$UncryptSocket v13 = new RecoverySystemService$UncryptSocket();
								boolean v15 = v13.connectService();
								if (v15 != 0) {
									v13.close();
									RecoverySystemService$UncryptSocket v12 = ;
									if (v12 != 0) {
										if (1 == 0) {
											byte[] v18 = p2.getBytes(StandardCharsets.UTF_8);
											this.mOutputStream.writeInt(v18.length);
											this.mOutputStream.write(v18, 0, v18.length);
											int v22 = this.mInputStream.readInt();
											int v21 = v22;
											this.mOutputStream.writeInt(0);
											if (v21 != 100) {
												if (1 == 0) {
													IoUtils.closeQuietly(this.mInputStream);
													IoUtils.closeQuietly(this.mOutputStream);
													IoUtils.closeQuietly(this.mLocalSocket);
													boolean v1 = 1;
													return v1;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean setupBcb(String p1){
	if ( >= 30) {
		String v4 = this.mInjector.systemPropertiesGet("init.svc.uncrypt");
		String v5 = this.mInjector.systemPropertiesGet("init.svc.setup-bcb");
		String v6 = this.mInjector.systemPropertiesGet("init.svc.clear-bcb");
		boolean v7 = "running".equals(v4);
		if (v7 != 0) {
			boolean v8 = "running".equals(v5);
			if (v8 != 0) {
				boolean v9 = "running".equals(v6);
				if (v9 == 0) {
					if ( != 0) {
						boolean v3 = 1;
						if (v3 != 0) {
							if (1 == 0) {
								SystemProperties.set("ctl.start", "setup-bcb");
								RecoverySystemService$UncryptSocket v13 = new RecoverySystemService$UncryptSocket();
								boolean v15 = v13.connectService();
								if (v15 != 0) {
									v13.close();
									RecoverySystemService$UncryptSocket v12 = ;
									if (v12 != 0) {
										if (1 == 0) {
											byte[] v18 = p2.getBytes(StandardCharsets.UTF_8);
											this.mOutputStream.writeInt(v18.length);
											this.mOutputStream.write(v18, 0, v18.length);
											int v22 = this.mInputStream.readInt();
											int v21 = v22;
											this.mOutputStream.writeInt(0);
											if (v21 != 100) {
												if (1 == 0) {
													IoUtils.closeQuietly(this.mInputStream);
													IoUtils.closeQuietly(this.mOutputStream);
													IoUtils.closeQuietly(this.mLocalSocket);
													boolean v1 = 1;
													return v1;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['SystemProperties.set("ctl.start", "setup-bcb");\nRecoverySystemService$UncryptSocket v13 = new RecoverySystemService$UncryptSocket();\nboolean v15 = v13.connectService();', 'this.mOutputStream.writeInt(v18.length);\nthis.mOutputStream.write(v18, 0, v18.length);\nint v22 = this.mInputStream.readInt();']

The method setupBcb has the following similar APIs:

- API Name: clearBcb()Z with Similarity Score: 0.8758226633071899
  - Access Control Level: SYS_OR_SIG and the following code:
RecoverySystemService$UncryptSocket v13 = new RecoverySystemService$UncryptSocket();
boolean v15 = v13.connectService();

- API Name: rebootRecoveryWithCommand(Ljava/lang/String;)V with Similarity Score: 0.8758226633071899
  - Access Control Level: SYS_OR_SIG and the following code:
RecoverySystemService$UncryptSocket v13 = new RecoverySystemService$UncryptSocket();
boolean v15 = v13.connectService();

