This is path 1 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		boolean v3 = VibratorManagerService.isEffectValid(p4);
		if (v3 != 0) {
			if (p5 != 0) {
				int v5 = this.mUsage;
				if (v5 != 0) {
					if (p4 == 0) {
						boolean v6 = p4.isHapticFeedbackCandidate();
						if (v6 == 0) {
							int v7 = this.mFlags;
							if ((v7 & 3) == 0) {
								if (v8 != 0) {
									if (v9 != 0) {
										if (v10 != 0) {
											int v11 = this.mUsage;
											if ( != v11) {
												int v12 = this.mFlags;
												if ( != v12) {
													VibrationAttributes$Builder v13 = new VibrationAttributes$Builder();
													this.mOriginalAudioUsage = 0;
													this.mUsage = ;
													VibrationAttributes$Builder v15 = VibrationAttributes$Builder;
													int v16 = this.mFlags;
													this.mFlags = ((this.mFlags & (~(v16 & 3))) | ( & (v16 & 3)));
													VibrationAttributes$Builder v17 = VibrationAttributes$Builder;
													VibrationAttributes v19 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
													VibrationAttributes v18 = v19;
													VibrationAttributes v4 = v18;
													Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
													if (p4 instanceof CombinedVibration$Mono == 0) {
														VibrationEffect v23 = this.mEffect;
														VibratorManagerService$$ExternalSyntheticLambda2 v24 = new VibratorManagerService$$ExternalSyntheticLambda2(v23);
														SparseArray v27 = new SparseArray(v28);
														int v28 = this.mVibrators.size();
														int v30 = this.mVibrators.size();
														if ( >= v30) {
															SparseArray v26 = v27;
															SparseArray v31 = new SparseArray();
															int v33 = .size();
															if ( >= v33) {
																int v34 = v31.size();
																if (v34 != 0) {
																	Trace.traceEnd(8388608);
																	SparseArray v21 = 0;
																	if (v21 != 0) {
																		VibratorManagerService$AlwaysOnVibration v36 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v21);
																		this.mAlwaysOnEffects.put(p3, v36);
																		p0.updateAlwaysOnLocked(v36);
																		Trace.traceEnd(8388608);
																		return 1;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		boolean v3 = VibratorManagerService.isEffectValid(p4);
		if (v3 != 0) {
			if (p5 != 0) {
				int v5 = this.mUsage;
				if (v5 != 0) {
					if (p4 == 0) {
						boolean v6 = p4.isHapticFeedbackCandidate();
						if (v6 == 0) {
							int v7 = this.mFlags;
							if ((v7 & 3) == 0) {
								if (v8 != 0) {
									if (v9 != 0) {
										if (v10 != 0) {
											int v11 = this.mUsage;
											if ( != v11) {
												int v12 = this.mFlags;
												if ( != v12) {
													VibrationAttributes$Builder v13 = new VibrationAttributes$Builder();
													this.mOriginalAudioUsage = 0;
													this.mUsage = ;
													VibrationAttributes$Builder v15 = VibrationAttributes$Builder;
													int v16 = this.mFlags;
													this.mFlags = ((this.mFlags & (~(v16 & 3))) | ( & (v16 & 3)));
													VibrationAttributes$Builder v17 = VibrationAttributes$Builder;
													VibrationAttributes v19 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
													VibrationAttributes v18 = v19;
													VibrationAttributes v4 = v18;
													Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
													if (p4 instanceof CombinedVibration$Mono == 0) {
														VibrationEffect v23 = this.mEffect;
														VibratorManagerService$$ExternalSyntheticLambda2 v24 = new VibratorManagerService$$ExternalSyntheticLambda2(v23);
														SparseArray v27 = new SparseArray(v28);
														int v28 = this.mVibrators.size();
														int v30 = this.mVibrators.size();
														if ( >= v30) {
															SparseArray v26 = v27;
															SparseArray v31 = new SparseArray();
															int v33 = .size();
															if ( >= v33) {
																int v34 = v31.size();
																if (v34 != 0) {
																	Trace.traceEnd(8388608);
																	SparseArray v21 = v31;
																	if (v21 != 0) {
																		VibratorManagerService$AlwaysOnVibration v36 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v21);
																		this.mAlwaysOnEffects.put(p3, v36);
																		p0.updateAlwaysOnLocked(v36);
																		Trace.traceEnd(8388608);
																		return 1;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	if (p4 != 0) {
		boolean v3 = VibratorManagerService.isEffectValid(p4);
		if (v3 != 0) {
			if (p5 != 0) {
				int v5 = this.mUsage;
				if (v5 != 0) {
					if (p4 == 0) {
						boolean v6 = p4.isHapticFeedbackCandidate();
						if (v6 == 0) {
							int v7 = this.mFlags;
							if ((v7 & 3) == 0) {
								if (v8 != 0) {
									if (v9 != 0) {
										if (v10 != 0) {
											int v11 = this.mUsage;
											if ( != v11) {
												int v12 = this.mFlags;
												if ( != v12) {
													VibrationAttributes$Builder v13 = new VibrationAttributes$Builder();
													this.mOriginalAudioUsage = 0;
													this.mUsage = ;
													VibrationAttributes$Builder v15 = VibrationAttributes$Builder;
													int v16 = this.mFlags;
													this.mFlags = ((this.mFlags & (~(v16 & 3))) | ( & (v16 & 3)));
													VibrationAttributes$Builder v17 = VibrationAttributes$Builder;
													VibrationAttributes v19 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
													VibrationAttributes v18 = v19;
													VibrationAttributes v4 = v18;
													Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
													if (p4 instanceof CombinedVibration$Mono == 0) {
														VibrationEffect v23 = this.mEffect;
														VibratorManagerService$$ExternalSyntheticLambda2 v24 = new VibratorManagerService$$ExternalSyntheticLambda2(v23);
														SparseArray v27 = new SparseArray(v28);
														int v28 = this.mVibrators.size();
														int v30 = this.mVibrators.size();
														if ( >= v30) {
															SparseArray v26 = v27;
															SparseArray v31 = new SparseArray();
															int v33 = .size();
															if ( >= v33) {
																int v34 = v31.size();
																if (v34 != 0) {
																	Trace.traceEnd(8388608);
																	SparseArray v21 = 0;
																	if (v21 != 0) {
																		VibratorManagerService$AlwaysOnVibration v36 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v21);
																		this.mAlwaysOnEffects.put(p3, v36);
																		p0.updateAlwaysOnLocked(v36);
																		Trace.traceEnd(8388608);
																		return 1;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
