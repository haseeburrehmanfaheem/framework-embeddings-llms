The method cancelVibrate has the following code snippet:

This is path 1 for the API with depth 2:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mVibration;
		if (Vibration.token != p2) {
			int v9 = Vibration.attrs.getUsage();
			if (v9 != 0) {
				int v10 = Vibration.attrs.getUsage();
				int v11 = Vibration.attrs.getUsage();
				if ((v10 & p2) != v11) {
					boolean v8 = ;
					if (v8 == 0) {
						boolean v7 = ;
						if (v7 == 0) {
							if (this.mNextVibration == 0) {
								Vibration v13 = this.mVibration;
								v13.end(p1);
								VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
								this.mVibratorManagerRecords.record(v13);
								if (1 == 0) {
									long v18 = SystemClock.uptimeMillis();
									VibrationStats$StatsInfo v19 = v13.getStatsInfo(v18);
									this.mFrameworkStatsLogger.writeVibrationReportedAsync(v19);
									this.mNextVibration = 0;
									if (this.mCurrentVibration == 0) {
										Vibration v21 = this.mCurrentVibration.getVibration();
										if (Vibration.token != p2) {
											int v24 = Vibration.attrs.getUsage();
											if (v24 != 0) {
												int v25 = Vibration.attrs.getUsage();
												int v26 = Vibration.attrs.getUsage();
												if ((v25 & p2) != v26) {
													boolean v23 = ;
													if (v23 == 0) {
														boolean v22 = ;
														if (v22 == 0) {
															if (Build.IS_DEBUGGABLE == 0) {
																Thread v29 = Thread.currentThread();
																if (v29 instanceof VibrationThread == 0) {
																	if (v3 == 0) {
																		String v36 = Vibration$EndInfo.status.name();
																		boolean v37 = v36.startsWith("CANCEL");
																		if (v37 != 0) {
																			Vibration$EndInfo v45 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_UNKNOWN_REASON);
																			if (0 == 0) {
																				if (this.mSignalCancelImmediate != 0) {
																					if (this.mSignalCancel == 0) {
																						this.mSignalCancelImmediate = (0 | this.mSignalCancelImmediate);
																						if (this.mSignalCancel != 0) {
																							this.mSignalCancel = ;
																							this.mLock.notify();
																							if (this.mCurrentExternalVibration == 0) {
																								VibrationAttributes$Builder v49 = new VibrationAttributes$Builder(this.mAttrs);
																								VibrationAttributes v52 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
																								VibrationAttributes v51 = v52;
																								VibrationAttributes v48 = v51;
																								int v55 = this.mUsage;
																								if (v55 != 0) {
																									int v56 = this.mUsage;
																									int v57 = this.mUsage;
																									if ((v56 & p1) != v57) {
																										boolean v54 = ;
																										if (v54 == 0) {
																											boolean v60 = this.mController.mute();
																											boolean v59 = 0;
																											Trace.traceBegin(8388608, "endExternalVibrateLocked");
																											if (this.mCurrentExternalVibration != 0) {
																												this.externalVibration.unlinkToDeath(VibratorManagerService$ExternalVibrationHolder);
																												if (0 != 0) {
																													int v72 = this.mVibrators.size();
																													if ( >= v72) {
																														this.mCurrentExternalVibration.end(p1);
																														int v75 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getUid();
																														VibrationAttributes v76 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
																														VibratorManagerService.logVibrationStatus(v75, v76, Vibration$EndInfo.status);
																														this.mVibratorManagerRecords.record(this.mCurrentExternalVibration);
																														long v79 = SystemClock.uptimeMillis();
																														VibrationStats$StatsInfo v80 = this.mCurrentExternalVibration.getStatsInfo(v79);
																														this.mFrameworkStatsLogger.writeVibrationReportedAsync(v80);
																														this.mCurrentExternalVibration = 0;
																														Trace.traceEnd(8388608);
																														Binder.restoreCallingIdentity(v5);
																														Trace.traceEnd(8388608);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mVibration;
		if (Vibration.token != p2) {
			int v9 = Vibration.attrs.getUsage();
			if (v9 != 0) {
				int v10 = Vibration.attrs.getUsage();
				int v11 = Vibration.attrs.getUsage();
				if ((v10 & p2) != v11) {
					boolean v8 = ;
					if (v8 == 0) {
						boolean v7 = ;
						if (v7 == 0) {
							if (this.mNextVibration == 0) {
								Vibration v13 = this.mVibration;
								v13.end(p1);
								VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
								this.mVibratorManagerRecords.record(v13);
								if (1 == 0) {
									long v18 = SystemClock.uptimeMillis();
									VibrationStats$StatsInfo v19 = v13.getStatsInfo(v18);
									this.mFrameworkStatsLogger.writeVibrationReportedAsync(v19);
									this.mNextVibration = 0;
									if (this.mCurrentVibration == 0) {
										Vibration v21 = this.mCurrentVibration.getVibration();
										if (Vibration.token != p2) {
											int v24 = Vibration.attrs.getUsage();
											if (v24 != 0) {
												int v25 = Vibration.attrs.getUsage();
												int v26 = Vibration.attrs.getUsage();
												if ((v25 & p2) != v26) {
													boolean v23 = ;
													if (v23 == 0) {
														boolean v22 = ;
														if (v22 == 0) {
															if (Build.IS_DEBUGGABLE == 0) {
																Thread v29 = Thread.currentThread();
																if (v29 instanceof VibrationThread == 0) {
																	if (v3 == 0) {
																		String v36 = Vibration$EndInfo.status.name();
																		boolean v37 = v36.startsWith("CANCEL");
																		if (v37 != 0) {
																			Vibration$EndInfo v45 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_UNKNOWN_REASON);
																			if (0 == 0) {
																				if (this.mSignalCancelImmediate != 0) {
																					if (this.mSignalCancel == 0) {
																						this.mSignalCancelImmediate = (0 | this.mSignalCancelImmediate);
																						if (this.mSignalCancel != 0) {
																							this.mSignalCancel = ;
																							this.mLock.notify();
																							if (this.mCurrentExternalVibration == 0) {
																								VibrationAttributes$Builder v49 = new VibrationAttributes$Builder(this.mAttrs);
																								VibrationAttributes v52 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
																								VibrationAttributes v51 = v52;
																								VibrationAttributes v48 = v51;
																								int v55 = this.mUsage;
																								if (v55 != 0) {
																									int v56 = this.mUsage;
																									int v57 = this.mUsage;
																									if ((v56 & p1) != v57) {
																										boolean v54 = ;
																										if (v54 == 0) {
																											boolean v60 = this.mController.mute();
																											boolean v59 = 0;
																											Trace.traceBegin(8388608, "endExternalVibrateLocked");
																											if (this.mCurrentExternalVibration != 0) {
																												this.externalVibration.unlinkToDeath(VibratorManagerService$ExternalVibrationHolder);
																												if (0 != 0) {
																													int v72 = this.mVibrators.size();
																													if ( >= v72) {
																														this.mCurrentExternalVibration.end(p1);
																														int v75 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getUid();
																														VibrationAttributes v76 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
																														VibratorManagerService.logVibrationStatus(v75, v76, Vibration$EndInfo.status);
																														this.mVibratorManagerRecords.record(this.mCurrentExternalVibration);
																														long v79 = SystemClock.uptimeMillis();
																														VibrationStats$StatsInfo v80 = this.mCurrentExternalVibration.getStatsInfo(v79);
																														this.mFrameworkStatsLogger.writeVibrationReportedAsync(v80);
																														this.mCurrentExternalVibration = 0;
																														Trace.traceEnd(8388608);
																														Binder.restoreCallingIdentity(v5);
																														Trace.traceEnd(8388608);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void cancelVibrate(int p1, IBinder p2){
	Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);
	long v5 = Binder.clearCallingIdentity();
	if (this.mNextVibration == 0) {
		Vibration v6 = this.mVibration;
		if (Vibration.token != p2) {
			int v9 = Vibration.attrs.getUsage();
			if (v9 != 0) {
				int v10 = Vibration.attrs.getUsage();
				int v11 = Vibration.attrs.getUsage();
				if ((v10 & p2) != v11) {
					boolean v8 = ;
					if (v8 == 0) {
						boolean v7 = ;
						if (v7 == 0) {
							if (this.mNextVibration == 0) {
								Vibration v13 = this.mVibration;
								v13.end(p1);
								VibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);
								this.mVibratorManagerRecords.record(v13);
								if (1 == 0) {
									long v18 = SystemClock.uptimeMillis();
									VibrationStats$StatsInfo v19 = v13.getStatsInfo(v18);
									this.mFrameworkStatsLogger.writeVibrationReportedAsync(v19);
									this.mNextVibration = 0;
									if (this.mCurrentVibration == 0) {
										Vibration v21 = this.mCurrentVibration.getVibration();
										if (Vibration.token != p2) {
											int v24 = Vibration.attrs.getUsage();
											if (v24 != 0) {
												int v25 = Vibration.attrs.getUsage();
												int v26 = Vibration.attrs.getUsage();
												if ((v25 & p2) != v26) {
													boolean v23 = ;
													if (v23 == 0) {
														boolean v22 = ;
														if (v22 == 0) {
															if (Build.IS_DEBUGGABLE == 0) {
																Thread v29 = Thread.currentThread();
																if (v29 instanceof VibrationThread == 0) {
																	if (v3 == 0) {
																		String v36 = Vibration$EndInfo.status.name();
																		boolean v37 = v36.startsWith("CANCEL");
																		if (v37 != 0) {
																			Vibration$EndInfo v45 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_UNKNOWN_REASON);
																			if (0 == 0) {
																				if (this.mSignalCancelImmediate != 0) {
																					if (this.mSignalCancel == 0) {
																						this.mSignalCancelImmediate = (0 | this.mSignalCancelImmediate);
																						if (this.mSignalCancel != 0) {
																							this.mSignalCancel = ;
																							this.mLock.notify();
																							if (this.mCurrentExternalVibration == 0) {
																								VibrationAttributes$Builder v49 = new VibrationAttributes$Builder(this.mAttrs);
																								VibrationAttributes v52 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
																								VibrationAttributes v51 = v52;
																								VibrationAttributes v48 = v51;
																								int v55 = this.mUsage;
																								if (v55 != 0) {
																									int v56 = this.mUsage;
																									int v57 = this.mUsage;
																									if ((v56 & p1) != v57) {
																										boolean v54 = ;
																										if (v54 == 0) {
																											boolean v60 = this.mController.mute();
																											boolean v59 = 0;
																											Trace.traceBegin(8388608, "endExternalVibrateLocked");
																											if (this.mCurrentExternalVibration != 0) {
																												this.externalVibration.unlinkToDeath(VibratorManagerService$ExternalVibrationHolder);
																												if (0 != 0) {
																													int v72 = this.mVibrators.size();
																													if ( >= v72) {
																														this.mCurrentExternalVibration.end(p1);
																														int v75 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getUid();
																														VibrationAttributes v76 = VibratorManagerService$ExternalVibrationHolder.externalVibration.getVibrationAttributes();
																														VibratorManagerService.logVibrationStatus(v75, v76, Vibration$EndInfo.status);
																														this.mVibratorManagerRecords.record(this.mCurrentExternalVibration);
																														long v79 = SystemClock.uptimeMillis();
																														VibrationStats$StatsInfo v80 = this.mCurrentExternalVibration.getStatsInfo(v79);
																														this.mFrameworkStatsLogger.writeVibrationReportedAsync(v80);
																														this.mCurrentExternalVibration = 0;
																														Trace.traceEnd(8388608);
																														Binder.restoreCallingIdentity(v5);
																														Trace.traceEnd(8388608);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Vibration v13 = this.mVibration;\nv13.end(p1);\nVibratorManagerService.logVibrationStatus(Vibration.uid, Vibration.attrs, Vibration$EndInfo.status);\nthis.mVibratorManagerRecords.record(v13);', 'Vibration$EndInfo v3 = new Vibration$EndInfo(Vibration$Status.CANCELLED_BY_USER);\nif (v3 == 0) { ... }']

The method cancelVibrate has the following similar APIs:

- API Name: setAlwaysOnEffect(ILjava/lang/String;ILandroid/os/CombinedVibration;Landroid/os/VibrationAttributes;)Z with Similarity Score: 0.7229877710342407
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = this.mUsage;
this.mOriginalAudioUsage = 0;
this.mUsage = ;
VibrationAttributes$Builder v13 = new VibrationAttributes$Builder();
VibrationAttributes v19 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
VibratorManagerService$AlwaysOnVibration v36 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v21);

