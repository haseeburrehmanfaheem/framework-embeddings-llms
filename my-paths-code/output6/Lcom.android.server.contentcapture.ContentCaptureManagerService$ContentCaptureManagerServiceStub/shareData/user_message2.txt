The method shareData has the following code snippet:

This is path 1 for the API with depth 2:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = this.mPackageName;
	Context v10 = this.mContext;
	PackageManager v11 = v10.getPackageManager();
	int v12 = this.mOwnerUid;
	String v13 = v11.getPackagesForUid(v12);
	if (v13 == 0) {
		if ( >= v13.length) {
			boolean v14 = v3.equals(v13[]);
			if (v14 == 0) {
				int v15 = UserHandle.getCallingUserId();
				Object v16 = ContentCaptureManagerService.access$800(this.this$0);
				AbstractPerUserSystemService v17 = ContentCaptureManagerService.access$900(this.this$0, v15);
				Set v18 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
				int v19 = v18.size();
				if (v19 >= 10) {
					Set v20 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
					String v21 = p1.getPackageName();
					boolean v22 = v20.contains(v21);
					if (v22 == 0) {
						ServiceNameResolver v23 = ContentCaptureManagerService.access$1000(this.this$0);
						String v24 = v23.getServiceName(v15);
						StatsEvent$Builder v27 = StatsEvent.newBuilder();
						StatsEvent$Builder v28 = v27.setAtomId(207);
						StatsEvent$Builder v29 = v27.writeInt(p1);
						if (80 != 207) {
							StatsEvent$Builder v30 = v27.addBooleanAnnotation(1, 1);
							StatsEvent$Builder v31 = v27.writeString(p2);
							StatsEvent$Builder v32 = v27.writeString(0);
							StatsEvent$Builder v33 = v27.writeInt(0);
							StatsEvent$Builder v34 = v27.writeInt(0);
							StatsEvent$Builder v35 = v27.usePooledBuffer();
							StatsEvent v36 = v27.build();
							StatsLog.write(v36);
							p2.error(2);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = this.mPackageName;
	Context v10 = this.mContext;
	PackageManager v11 = v10.getPackageManager();
	int v12 = this.mOwnerUid;
	String v13 = v11.getPackagesForUid(v12);
	if (v13 == 0) {
		if ( >= v13.length) {
			boolean v14 = v3.equals(v13[]);
			if (v14 == 0) {
				int v15 = UserHandle.getCallingUserId();
				Object v16 = ContentCaptureManagerService.access$800(this.this$0);
				AbstractPerUserSystemService v17 = ContentCaptureManagerService.access$900(this.this$0, v15);
				Set v18 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
				int v19 = v18.size();
				if (v19 >= 10) {
					Set v20 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
					String v21 = p1.getPackageName();
					boolean v22 = v20.contains(v21);
					if (v22 == 0) {
						ServiceNameResolver v23 = ContentCaptureManagerService.access$1000(this.this$0);
						String v24 = v23.getServiceName(v15);
						StatsEvent$Builder v27 = StatsEvent.newBuilder();
						StatsEvent$Builder v28 = v27.setAtomId(207);
						StatsEvent$Builder v29 = v27.writeInt(p1);
						if (80 != 207) {
							StatsEvent$Builder v30 = v27.writeString(p2);
							StatsEvent$Builder v31 = v27.writeString(0);
							StatsEvent$Builder v32 = v27.writeInt(0);
							StatsEvent$Builder v33 = v27.writeInt(0);
							StatsEvent$Builder v34 = v27.usePooledBuffer();
							StatsEvent v35 = v27.build();
							StatsLog.write(v35);
							p2.error(2);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void shareData(DataShareRequest p1, IDataShareWriteAdapter p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	String v3 = this.mPackageName;
	Object v11 = Objects.requireNonNull(p1);
	int v12 = Binder.getCallingUid();
	Context v13 = AbstractMasterSystemService.getContext();
	PackageManager v14 = v13.getPackageManager();
	String v15 = v14.getPackagesForUid(v12);
	if (v15 == 0) {
		if ( >= v15.length) {
			boolean v16 = p1.equals(v15[]);
			if (v16 == 0) {
				int v17 = UserHandle.getCallingUserId();
				Object v18 = ContentCaptureManagerService.access$800(this.this$0);
				AbstractPerUserSystemService v19 = ContentCaptureManagerService.access$900(this.this$0, v17);
				Set v20 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
				int v21 = v20.size();
				if (v21 >= 10) {
					Set v22 = ContentCaptureManagerService.-$$Nest$fgetmPackagesWithShareRequests(this.this$0);
					String v23 = p1.getPackageName();
					boolean v24 = v22.contains(v23);
					if (v24 == 0) {
						ServiceNameResolver v25 = ContentCaptureManagerService.access$1000(this.this$0);
						String v26 = v25.getServiceName(v17);
						StatsEvent$Builder v29 = StatsEvent.newBuilder();
						StatsEvent$Builder v30 = v29.setAtomId(207);
						StatsEvent$Builder v31 = v29.writeInt(p1);
						if (80 != 207) {
							StatsEvent$Builder v32 = v29.addBooleanAnnotation(1, 1);
							StatsEvent$Builder v33 = v29.writeString(p2);
							StatsEvent$Builder v34 = v29.writeString(0);
							StatsEvent$Builder v35 = v29.writeInt(0);
							StatsEvent$Builder v36 = v29.writeInt(0);
							StatsEvent$Builder v37 = v29.usePooledBuffer();
							StatsEvent v38 = v29.build();
							StatsLog.write(v38);
							p2.error(2);
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['StatsEvent$Builder v27 = StatsEvent.newBuilder();\nStatsEvent$Builder v28 = v27.setAtomId(207);\nStatsEvent$Builder v29 = v27.writeInt(p1);\nif (80 != 207) {\nStatsEvent$Builder v30 = v27.addBooleanAnnotation(1, 1);\nStatsEvent$Builder v31 = v27.writeString(p2);\nStatsEvent v36 = v27.build();\nStatsLog.write(v36);']

The method shareData has the following similar APIs:

- API Name: reportNetworkEvent(Ljava/lang/String;Landroid/media/metrics/NetworkEvent;I)V with Similarity Score: 0.8975561261177063
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v27 = StatsEvent.newBuilder();
StatsEvent$Builder v28 = v27.setAtomId(321);
StatsEvent$Builder v29 = v28.writeString(p1);
int v30 = p2.getNetworkType();
StatsEvent$Builder v31 = v29.writeInt(v30);
long v32 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v33 = v31.writeLong(v32);
StatsEvent$Builder v34 = v33.usePooledBuffer();
StatsEvent v35 = v34.build();
StatsLog.write(v35);

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/ComponentName;IZLandroid/os/IBinder;Landroid/os/Bundle;)V with Similarity Score: 0.8965268731117249
  - Access Control Level: SYS_OR_SIG and the following code:
StatsEvent$Builder v18 = StatsEvent.newBuilder();
StatsEvent$Builder v19 = v18.setAtomId(103);
StatsEvent$Builder v20 = v18.writeInt(this.mEventId);
StatsEvent$Builder v21 = v18.writeString(this.mAdminPackageName);
StatsEvent v27 = v18.build();
StatsLog.write(v27);

