The method registerContentCaptureOptionsCallback has the following code snippet:

This is path 1 for the API with depth 2:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	Context v7 = this.mContext;
	PackageManager v8 = v7.getPackageManager();
	int v9 = this.mOwnerUid;
	String v10 = v8.getPackagesForUid(v9);
	if (v10 == 0) {
		if ( >= v10.length) {
			boolean v11 = p1.equals(v10[]);
			if (v11 == 0) {
				RemoteCallbackList v12 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);
				boolean v13 = v12.register(p2, p1);
				int v14 = UserHandle.getCallingUserId();
				if (this.mWhitelisterHelpers != 0) {
					Object v17 = this.mWhitelisterHelpers.get(p1);
					if (v17 != 0) {
						boolean v18 = v17.isWhitelisted(p2);
						boolean v16 = ;
						if (v16 != 0) {
							if (this.mWhitelisterHelpers != 0) {
								Object v20 = this.mWhitelisterHelpers.get(p1);
								if (v20 != 0) {
									ArraySet v21 = v20.getWhitelistedComponents(p2);
									ArraySet v19 = ;
									if (v19 != 0) {
										Object v22 = this.mServicePackages.get(v14);
										boolean v23 = p1.equals(v22);
										if (v23 == 0) {
											if (Build.IS_USER == 0) {
												ServiceNameResolver v24 = AbstractMasterSystemService.mServiceNameResolver;
												boolean v25 = v24.isTemporary(v14);
												if (v25 == 0) {
													Object v26 = this.mServicePackages.get(v14);
													boolean v27 = p1.equals(v26);
													if (v27 != 0) {
														if (v16 != 0) {
															if ( != 0) {
																ContentCaptureOptions v28 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,);
																if (AbstractMasterSystemService.verbose == 0) {
																	String v30 = this.TAG;
																	ContentCaptureOptions v15 = v28;
																	if (v15 == 0) {
																		p2.setContentCaptureOptions(v15);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	Object v8 = Objects.requireNonNull(p1);
	int v9 = Binder.getCallingUid();
	Context v10 = AbstractMasterSystemService.getContext();
	PackageManager v11 = v10.getPackageManager();
	String v12 = v11.getPackagesForUid(v9);
	if (v12 == 0) {
		if ( >= v12.length) {
			boolean v13 = p1.equals(v12[]);
			if (v13 == 0) {
				RemoteCallbackList v14 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);
				boolean v15 = v14.register(p2, p1);
				int v16 = UserHandle.getCallingUserId();
				if (this.mWhitelisterHelpers != 0) {
					Object v19 = this.mWhitelisterHelpers.get(p1);
					if (v19 != 0) {
						boolean v20 = v19.isWhitelisted(p2);
						boolean v18 = ;
						if (v18 != 0) {
							if (this.mWhitelisterHelpers != 0) {
								Object v22 = this.mWhitelisterHelpers.get(p1);
								if (v22 != 0) {
									ArraySet v23 = v22.getWhitelistedComponents(p2);
									ArraySet v21 = ;
									if (v21 != 0) {
										Object v24 = this.mServicePackages.get(v16);
										boolean v25 = p1.equals(v24);
										if (v25 == 0) {
											if (Build.IS_USER == 0) {
												ServiceNameResolver v26 = AbstractMasterSystemService.mServiceNameResolver;
												boolean v27 = v26.isTemporary(v16);
												if (v27 == 0) {
													Object v28 = this.mServicePackages.get(v16);
													boolean v29 = p1.equals(v28);
													if (v29 != 0) {
														if (v18 != 0) {
															if ( != 0) {
																ContentCaptureOptions v30 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,);
																if (AbstractMasterSystemService.verbose == 0) {
																	String v32 = this.TAG;
																	ContentCaptureOptions v17 = v30;
																	if (v17 == 0) {
																		p2.setContentCaptureOptions(v17);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void registerContentCaptureOptionsCallback(String p1, IContentCaptureOptionsCallback p2){
	Context v7 = this.mContext;
	PackageManager v8 = v7.getPackageManager();
	int v9 = this.mOwnerUid;
	String v10 = v8.getPackagesForUid(v9);
	if (v10 == 0) {
		if ( >= v10.length) {
			boolean v11 = p1.equals(v10[]);
			if (v11 == 0) {
				RemoteCallbackList v12 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);
				boolean v13 = v12.register(p2, p1);
				int v14 = UserHandle.getCallingUserId();
				if (this.mWhitelisterHelpers != 0) {
					Object v17 = this.mWhitelisterHelpers.get(p1);
					if (v17 != 0) {
						boolean v18 = v17.isWhitelisted(p2);
						boolean v16 = ;
						if (v16 != 0) {
							if (this.mWhitelisterHelpers != 0) {
								Object v20 = this.mWhitelisterHelpers.get(p1);
								if (v20 != 0) {
									ArraySet v21 = v20.getWhitelistedComponents(p2);
									ArraySet v19 = ;
									if (v19 != 0) {
										Object v22 = this.mServicePackages.get(v14);
										boolean v23 = p1.equals(v22);
										if (v23 == 0) {
											if (Build.IS_USER == 0) {
												ServiceNameResolver v24 = AbstractMasterSystemService.mServiceNameResolver;
												boolean v25 = v24.isTemporary(v14);
												if (v25 == 0) {
													Object v26 = this.mServicePackages.get(v14);
													boolean v27 = p1.equals(v26);
													if (v27 != 0) {
														if (v16 != 0) {
															if ( != 0) {
																ContentCaptureOptions v28 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,);
																if (AbstractMasterSystemService.verbose == 0) {
																	String v30 = this.TAG;
																	ContentCaptureOptions v15 = v28;
																	if (v15 == 0) {
																		p2.setContentCaptureOptions(v15);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['RemoteCallbackList v12 = ContentCaptureManagerService.-$$Nest$fgetmCallbacks(this.this$0);\nboolean v13 = v12.register(p2, p1);', 'ContentCaptureOptions v28 = new ContentCaptureOptions(ContentCaptureManagerService.mDevCfgLoggingLevel,ContentCaptureManagerService.mDevCfgMaxBufferSize,ContentCaptureManagerService.mDevCfgIdleFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgTextChangeFlushingFrequencyMs,ContentCaptureManagerService.mDevCfgLogHistorySize,);\np2.setContentCaptureOptions(v15);']

The method registerContentCaptureOptionsCallback has the following similar APIs:

- API Name: addOnAssociationsChangedListener(Landroid/companion/IOnAssociationsChangedListener;I)V with Similarity Score: 0.8696787357330322
  - Access Control Level: SYS_OR_SIG and the following code:
RemoteCallbackList v9 = CompanionDeviceManagerService.-$$Nest$fgetmListeners(this.this$0);
Integer v10 = Integer.valueOf(p2);
boolean v11 = v9.register(p1, v10);

- API Name: removeOnAssociationsChangedListener(Landroid/companion/IOnAssociationsChangedListener;I)V with Similarity Score: 0.8593307137489319
  - Access Control Level: SYS_OR_SIG and the following code:
RemoteCallbackList v9 = CompanionDeviceManagerService.-$$Nest$fgetmListeners(this.this$0);
boolean v10 = v9.unregister(p1);

