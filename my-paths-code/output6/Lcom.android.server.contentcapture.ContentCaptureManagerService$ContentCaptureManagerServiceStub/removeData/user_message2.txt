The method removeData has the following code snippet:

This is path 1 for the API with depth 2:
public void removeData(DataRemovalRequest p1){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = this.mPackageName;
	Context v9 = this.mContext;
	PackageManager v10 = v9.getPackageManager();
	int v11 = this.mOwnerUid;
	String v12 = v10.getPackagesForUid(v11);
	if (v12 == 0) {
		if ( >= v12.length) {
			boolean v13 = v2.equals(v12[]);
			if (v13 == 0) {
				int v14 = UserHandle.getCallingUserId();
				Object v15 = ContentCaptureManagerService.access$600(this.this$0);
				AbstractPerUserSystemService v16 = ContentCaptureManagerService.access$700(this.this$0, v14);
				boolean v18 = ContentCapturePerUserService.isEnabledLocked();
				if (v18 != 0) {
					String v19 = this.mPackageName;
					ContentCapturePerUserService.assertCallerLocked(v19);
					RemoteContentCaptureService$$ExternalSyntheticLambda2 v22 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);
					RemoteContentCaptureService.scheduleAsyncRequest(v22);
					ContentCaptureMetricsLogger.writeServiceEvent(5, AbstractMultiplePendingRequestsRemoteService.mComponentName);
					return;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void removeData(DataRemovalRequest p1){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = this.mPackageName;
	Object v10 = Objects.requireNonNull(p1);
	int v11 = Binder.getCallingUid();
	Context v12 = AbstractMasterSystemService.getContext();
	PackageManager v13 = v12.getPackageManager();
	String v14 = v13.getPackagesForUid(v11);
	if (v14 == 0) {
		if ( >= v14.length) {
			boolean v15 = p1.equals(v14[]);
			if (v15 == 0) {
				int v16 = UserHandle.getCallingUserId();
				Object v17 = ContentCaptureManagerService.access$600(this.this$0);
				AbstractPerUserSystemService v18 = ContentCaptureManagerService.access$700(this.this$0, v16);
				boolean v20 = ContentCapturePerUserService.isEnabledLocked();
				if (v20 != 0) {
					String v21 = this.mPackageName;
					ContentCapturePerUserService.assertCallerLocked(v21);
					RemoteContentCaptureService$$ExternalSyntheticLambda2 v24 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);
					RemoteContentCaptureService.scheduleAsyncRequest(v24);
					ContentCaptureMetricsLogger.writeServiceEvent(5, AbstractMultiplePendingRequestsRemoteService.mComponentName);
					return;
				}
			}
		}
	}
}

and the following sink code:
['Object v1 = Objects.requireNonNull(p1);\nRemoteContentCaptureService$$ExternalSyntheticLambda2 v22 = new RemoteContentCaptureService$$ExternalSyntheticLambda2(p1);\nRemoteContentCaptureService.scheduleAsyncRequest(v22);', 'String v19 = this.mPackageName;\nContentCapturePerUserService.assertCallerLocked(v19);']

The method removeData has the following similar APIs:

- API Name: isContentCaptureFeatureEnabled(Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.8111996054649353
  - Access Control Level: NONE and the following code:
ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1 v2 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda1(p0);
p3.run();

- API Name: getContentCaptureConditions(Ljava/lang/String;Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.7885315418243408
  - Access Control Level: NONE and the following code:
ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda0 v1 = new ContentCaptureManagerService$ContentCaptureManagerServiceStub$$ExternalSyntheticLambda0(p0,p1);
String v6 = caughtException.getMessage();
Bundle v7 = SyncResultReceiver.bundleFor(v6);
p2.send(-1, v7);

