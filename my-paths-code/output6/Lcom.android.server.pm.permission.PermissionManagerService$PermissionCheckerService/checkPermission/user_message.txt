This is path 1 for the API with depth 2:
public int checkPermission(String p1, AttributionSourceState p2, String p3, boolean p4, boolean p5, boolean p6, int p7){
	if (p5 == 0) {
		if (v5 == 0) {
			if (v5 == 1) {
				if (p7 != -1) {
					int v6 = AppOpsManager.permissionToOpCode(p1);
					AttributionSourceState v7 = this.mAttributionSourceState;
					Object v10 = Objects.requireNonNull(p2);
					Object v11 = this.mContext.getSystemService(AppOpsManage.class);
					if (p1 != -1) {
						AttributionSource v12 = new AttributionSource(p2);
						if (p3 != 0) {
							if ( == 0) {
								AttributionSource v14 = .getNext();
								if (p3 == 0) {
									AttributionSourceState v15 = .asState();
									if (v15 == p2) {
										if (v14 == 0) {
											boolean v16 = .isTrusted(this.mContext);
											if (v16 != 0) {
												if (p3 == 0) {
													AttributionSourceState v17 = .asState();
													if (v17 != p2) {
														if (v14 == 0) {
															AttributionSource v18 = v14.getNext();
															if (v18 != 0) {
																if ( != 0) {
																	if (v14 != 0) {
																		if ( != 0) {
																			if ( == 0) {
																				String v19 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, );
																				if (v19 != 0) {
																					return v5;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public int checkPermission(String p1, AttributionSourceState p2, String p3, boolean p4, boolean p5, boolean p6, int p7){
	if (p5 == 0) {
		if (v5 == 0) {
			if (v5 == 1) {
				if (p7 != -1) {
					AttributionSourceState v6 = this.mAttributionSourceState;
					Object v9 = Objects.requireNonNull(p2);
					Object v10 = this.mContext.getSystemService(AppOpsManage.class);
					if (p1 != -1) {
						AttributionSource v11 = new AttributionSource(p2);
						if (p3 != 0) {
							if ( == 0) {
								AttributionSource v13 = .getNext();
								if (p3 == 0) {
									AttributionSourceState v14 = .asState();
									if (v14 == p2) {
										if (v13 == 0) {
											boolean v15 = .isTrusted(this.mContext);
											if (v15 != 0) {
												if (p3 == 0) {
													AttributionSourceState v16 = .asState();
													if (v16 != p2) {
														if (v13 == 0) {
															AttributionSource v17 = v13.getNext();
															if (v17 != 0) {
																if ( != 0) {
																	if (v13 != 0) {
																		if ( != 0) {
																			if ( == 0) {
																				String v18 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, );
																				if (v18 != 0) {
																					return v5;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public int checkPermission(String p1, AttributionSourceState p2, String p3, boolean p4, boolean p5, boolean p6, int p7){
	if (p5 == 0) {
		if (v5 == 0) {
			if (v5 == 1) {
				if (p7 != -1) {
					int v6 = AppOpsManager.permissionToOpCode(p1);
					AttributionSourceState v7 = this.mAttributionSourceState;
					Object v10 = Objects.requireNonNull(p2);
					Object v11 = this.mContext.getSystemService(AppOpsManage.class);
					if (p1 != -1) {
						AttributionSource v12 = new AttributionSource(p2);
						if (p3 != 0) {
							if ( == 0) {
								AttributionSource v14 = .getNext();
								if (p3 == 0) {
									AttributionSourceState v15 = .asState();
									if (v15 == p2) {
										if (v14 == 0) {
											boolean v16 = .isTrusted(this.mContext);
											if (v16 != 0) {
												return v5;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
