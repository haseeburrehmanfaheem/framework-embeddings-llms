The method checkOp has the following code snippet:

This is path 1 for the API with depth 2:
public int checkOp(int p1, AttributionSourceState p2, String p3, boolean p4, boolean p5){
	if (v3 == 0) {
		if (p5 == 0) {
			Object v6 = Objects.requireNonNull(p2);
			Object v7 = this.mContext.getSystemService(AppOpsManage.class);
			if (p1 != -1) {
				AttributionSource v8 = new AttributionSource(p2);
				if (p3 != 0) {
					if ( == 0) {
						AttributionSource v10 = .getNext();
						if (p3 == 0) {
							AttributionSourceState v11 = .asState();
							if (v11 == p2) {
								if (v10 == 0) {
									boolean v12 = .isTrusted(this.mContext);
									if (v12 != 0) {
										return v3;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int checkOp(int p1, AttributionSourceState p2, String p3, boolean p4, boolean p5){
	if (v3 == 0) {
		if (p5 == 0) {
			Object v6 = Objects.requireNonNull(p2);
			Object v7 = this.mContext.getSystemService(AppOpsManage.class);
			if (p1 != -1) {
				AttributionSource v8 = new AttributionSource(p2);
				if (p3 != 0) {
					if ( == 0) {
						AttributionSource v10 = .getNext();
						if (p3 == 0) {
							AttributionSourceState v11 = .asState();
							if (v11 == p2) {
								if (v10 == 0) {
									boolean v12 = .isTrusted(this.mContext);
									if (v12 != 0) {
										if (p3 == 0) {
											AttributionSourceState v13 = .asState();
											if (v13 != p2) {
												if (v10 == 0) {
													AttributionSource v14 = v10.getNext();
													if (v14 != 0) {
														if ( != 0) {
															if (v10 != 0) {
																if ( != 0) {
																	if ( == 0) {
																		String v15 = PermissionManagerService$PermissionCheckerService.resolvePackageName(this.mContext, );
																		if (v15 != 0) {
																			return v3;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v6 = Objects.requireNonNull(p2);\nAttributionSource v8 = new AttributionSource(p2);', 'Other potential sink instructions if identified...']

The method checkOp has the following similar APIs:

- API Name: isRegisteredAttributionSource(Landroid/content/AttributionSourceState;)Z with Similarity Score: 0.9051709175109863
  - Access Control Level: NONE and the following code:
AttributionSource v1 = new AttributionSource(p1);

- API Name: finishDataDelivery(ILandroid/content/AttributionSourceState;Z)V with Similarity Score: 0.8583099842071533
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = Objects.requireNonNull(p2);
AttributionSource v4 = new AttributionSource(p2);
if (p1 != -1) {
AttributionSource v7 = new AttributionSource(AttributionSourceState.next[0]);
this.mNextCached = v7;
AttributionSource v6 = this.mNextCached;

