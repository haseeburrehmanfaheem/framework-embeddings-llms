The method finishDataDelivery has the following code snippet:

This is path 1 for the API with depth 2:
public void finishDataDelivery(int p1, AttributionSourceState p2, boolean p3){
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = this.mContext.getSystemService(AppOpsManage.class);
	if (p1 != -1) {
		AttributionSource v4 = new AttributionSource(p2);
		if (p3 != 0) {
			if ( == 0) {
				if (this.mNextCached != 0) {
					if (AttributionSourceState.next == 0) {
						if (AttributionSourceState.next.length <= 0) {
							AttributionSource v7 = new AttributionSource(AttributionSourceState.next[0]);
							this.mNextCached = v7;
							AttributionSource v6 = this.mNextCached;
							if (p3 == 0) {
								AttributionSourceState v9 = this.mAttributionSourceState;
								if (v9 == p2) {
									if (v6 == 0) {
										if (AttributionSourceState.token == 0) {
											Object v11 = p1.getSystemService(PermissionManage.class);
											boolean v12 = v11.isRegisteredAttributionSource(AttributionSource);
											if (v12 == 0) {
												boolean v10 = ;
												if (v10 != 0) {
													if (p3 == 0) {
														AttributionSourceState v13 = this.mAttributionSourceState;
														if (v13 != p2) {
															if (v6 == 0) {
																if (this.mNextCached != 0) {
																	if (AttributionSourceState.next == 0) {
																		if (AttributionSourceState.next.length <= 0) {
																			AttributionSource v15 = new AttributionSource(AttributionSourceState.next[0]);
																			this.mNextCached = v15;
																			AttributionSource v14 = this.mNextCached;
																			if (v14 != 0) {
																				if ( != 0) {
																					if (v6 != 0) {
																						if ( != 0) {
																							if ( == 0) {
																								PackageManager v19 = p1.getPackageManager();
																								int v20 = .getUid();
																								String v21 = v19.getPackagesForUid(v20);
																								if (v21 == 0) {
																									int v22 = .getUid();
																									String v23 = .getPackageName();
																									String v24 = AppOpsManager.resolvePackageName(v22, v23);
																									String v17 = v24;
																									if (v17 != 0) {
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void finishDataDelivery(int p1, AttributionSourceState p2, boolean p3){
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = this.mContext.getSystemService(AppOpsManage.class);
	if (p1 != -1) {
		AttributionSource v4 = new AttributionSource(p2);
		if (p3 != 0) {
			if ( == 0) {
				if (this.mNextCached != 0) {
					if (AttributionSourceState.next == 0) {
						if (AttributionSourceState.next.length <= 0) {
							AttributionSource v7 = new AttributionSource(AttributionSourceState.next[0]);
							this.mNextCached = v7;
							AttributionSource v6 = this.mNextCached;
							if (p3 == 0) {
								AttributionSourceState v9 = this.mAttributionSourceState;
								if (v9 == p2) {
									if (v6 == 0) {
										if (AttributionSourceState.token == 0) {
											Object v11 = p1.getSystemService(PermissionManage.class);
											boolean v12 = v11.isRegisteredAttributionSource(AttributionSource);
											if (v12 == 0) {
												boolean v10 = ;
												if (v10 != 0) {
													if (p3 == 0) {
														AttributionSourceState v13 = this.mAttributionSourceState;
														if (v13 != p2) {
															if (v6 == 0) {
																if (this.mNextCached != 0) {
																	if (AttributionSourceState.next == 0) {
																		if (AttributionSourceState.next.length <= 0) {
																			AttributionSource v15 = new AttributionSource(AttributionSourceState.next[0]);
																			this.mNextCached = v15;
																			AttributionSource v14 = this.mNextCached;
																			if (v14 != 0) {
																				if ( != 0) {
																					if (v6 != 0) {
																						if ( != 0) {
																							if ( == 0) {
																								PackageManager v19 = p1.getPackageManager();
																								int v20 = .getUid();
																								String v21 = v19.getPackagesForUid(v20);
																								if (v21 == 0) {
																									int v22 = .getUid();
																									String v23 = .getPackageName();
																									String v24 = AppOpsManager.resolvePackageName(v22, v23);
																									String v17 = v24;
																									if (v17 != 0) {
																										return;
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v2 = Objects.requireNonNull(p2);\nAttributionSource v4 = new AttributionSource(p2);\nif (p1 != -1) {\nAttributionSource v7 = new AttributionSource(AttributionSourceState.next[0]);\nthis.mNextCached = v7;\nAttributionSource v6 = this.mNextCached;', 'Object v3 = this.mContext.getSystemService(AppOpsManage.class);\nObject v11 = p1.getSystemService(PermissionManage.class);\nboolean v12 = v11.isRegisteredAttributionSource(AttributionSource);']

The method finishDataDelivery has the following similar APIs:

- API Name: registerAttributionSource(Landroid/content/AttributionSourceState;)V with Similarity Score: 0.8777706027030945
  - Access Control Level: SYS_OR_SIG and the following code:
AttributionSource v1 = new AttributionSource(p1);
if (this.mNextCached != 0) {
AttributionSource v14 = new AttributionSource(AttributionSourceState.next[0]);
this.mNextCached = v14;
IBinder v20 = v13.getToken();
Object v21 = this.mAttributions.get(v20);
IBinder v22 = AttributionSourceState.token;
Object v23 = this.mAttributions.put(v22, v1);

- API Name: checkOp(ILandroid/content/AttributionSourceState;Ljava/lang/String;ZZ)I with Similarity Score: 0.8583099842071533
  - Access Control Level: SYS_OR_SIG and the following code:
Object v6 = Objects.requireNonNull(p2);
AttributionSource v8 = new AttributionSource(p2);

