This is path 1 for the API with depth 2:
public void cleanup(){
	int v1 = Log.i("OTADexopt", "Cleaning up OTA Dexopt state.");
	this.mDexoptCommands = 0;
	File v4 = Environment.getDataDirectory();
	StorageManager v5 = StorageManager.from(this.mContext);
	long v6 = v5.getStorageLowBytes(v4);
	if ((v6 < 0) == 0) {
		long v3 = v6;
		File v7 = Environment.getDataDirectory();
		long v8 = v7.getUsableSpace();
		long v2 = (v8 - v3);
		this.availableSpaceAfterDexopt = v2;
		long v10 = System.nanoTime();
		if (((this.availableSpaceBefore / 1048576) < 2147483647) <= 0) {
			StringBuilder v12 = new StringBuilder();
			StringBuilder v14 = v12.append("Recording ");
			StringBuilder v15 = v12.append((this.availableSpaceBefore / 1048576));
			StringBuilder v16 = v12.append("MB of free space, overflowing range");
			String v17 = v12.toString();
			int v18 = Log.w("OTADexopt", v17);
			int v11 = 2147483647;
			this.metricsLogger.histogram("ota_dexopt_available_space_before_mb", v11);
			if (((this.availableSpaceAfterBulkDelete / 1048576) < 2147483647) <= 0) {
				StringBuilder v21 = new StringBuilder();
				StringBuilder v23 = v21.append("Recording ");
				StringBuilder v24 = v21.append((this.availableSpaceAfterBulkDelete / 1048576));
				StringBuilder v25 = v21.append("MB of free space, overflowing range");
				String v26 = v21.toString();
				int v27 = Log.w("OTADexopt", v26);
				int v20 = 2147483647;
				this.metricsLogger.histogram("ota_dexopt_available_space_after_bulk_delete_mb", v20);
				if (((this.availableSpaceAfterDexopt / 1048576) < 2147483647) <= 0) {
					StringBuilder v30 = new StringBuilder();
					StringBuilder v32 = v30.append("Recording ");
					StringBuilder v33 = v30.append((this.availableSpaceAfterDexopt / 1048576));
					StringBuilder v34 = v30.append("MB of free space, overflowing range");
					String v35 = v30.toString();
					int v36 = Log.w("OTADexopt", v35);
					int v29 = 2147483647;
					this.metricsLogger.histogram("ota_dexopt_available_space_after_dexopt_mb", v29);
					this.metricsLogger.histogram("ota_dexopt_num_important_packages", this.importantPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_other_packages", this.otherPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_commands", this.dexoptCommandCountTotal);
					this.metricsLogger.histogram("ota_dexopt_num_commands_executed", this.dexoptCommandCountExecuted);
					long v42 = TimeUnit.NANOSECONDS.toSeconds((v10 - this.otaDexoptTimeStart));
					this.metricsLogger.histogram("ota_dexopt_time_s", v42);
					return;
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void cleanup(){
	int v1 = Log.i("OTADexopt", "Cleaning up OTA Dexopt state.");
	this.mDexoptCommands = 0;
	File v4 = Environment.getDataDirectory();
	StorageManager v5 = StorageManager.from(this.mContext);
	long v6 = v5.getStorageLowBytes(v4);
	if ((v6 < 0) == 0) {
		long v3 = v6;
		File v7 = Environment.getDataDirectory();
		long v8 = v7.getUsableSpace();
		long v2 = (v8 - v3);
		this.availableSpaceAfterDexopt = v2;
		long v10 = System.nanoTime();
		if (((this.availableSpaceBefore / 1048576) < 2147483647) <= 0) {
			int v11 = (this.availableSpaceBefore / 1048576);
			this.metricsLogger.histogram("ota_dexopt_available_space_before_mb", v11);
			if (((this.availableSpaceAfterBulkDelete / 1048576) < 2147483647) <= 0) {
				StringBuilder v14 = new StringBuilder();
				StringBuilder v16 = v14.append("Recording ");
				StringBuilder v17 = v14.append((this.availableSpaceAfterBulkDelete / 1048576));
				StringBuilder v18 = v14.append("MB of free space, overflowing range");
				String v19 = v14.toString();
				int v20 = Log.w("OTADexopt", v19);
				int v13 = 2147483647;
				this.metricsLogger.histogram("ota_dexopt_available_space_after_bulk_delete_mb", v13);
				if (((this.availableSpaceAfterDexopt / 1048576) < 2147483647) <= 0) {
					StringBuilder v23 = new StringBuilder();
					StringBuilder v25 = v23.append("Recording ");
					StringBuilder v26 = v23.append((this.availableSpaceAfterDexopt / 1048576));
					StringBuilder v27 = v23.append("MB of free space, overflowing range");
					String v28 = v23.toString();
					int v29 = Log.w("OTADexopt", v28);
					int v22 = 2147483647;
					this.metricsLogger.histogram("ota_dexopt_available_space_after_dexopt_mb", v22);
					this.metricsLogger.histogram("ota_dexopt_num_important_packages", this.importantPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_other_packages", this.otherPackageCount);
					this.metricsLogger.histogram("ota_dexopt_num_commands", this.dexoptCommandCountTotal);
					this.metricsLogger.histogram("ota_dexopt_num_commands_executed", this.dexoptCommandCountExecuted);
					long v35 = TimeUnit.NANOSECONDS.toSeconds((v10 - this.otaDexoptTimeStart));
					this.metricsLogger.histogram("ota_dexopt_time_s", v35);
					return;
				}
			}
		}
	}
}
