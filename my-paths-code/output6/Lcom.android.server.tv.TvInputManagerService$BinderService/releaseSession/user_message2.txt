The method releaseSession has the following code snippet:

This is path 1 for the API with depth 2:
public void releaseSession(IBinder p1, int p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v5 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v4 = v5;
	int v3 = v4;
	long v6 = Binder.clearCallingIdentity();
	Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p2, p3, p4);
	TvInputManagerService$UserState v11 = TvInputManagerService.getOrCreateUserStateLocked(p4);
	ITvInputSession v12 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
	if (v12 == 0) {
		IBinder v13 = TvInputManagerService$UserState.-$$Nest$fgetmainSessionToken(v11);
		if (p2 != v13) {
			TvInputManagerService.setMainLocked(p2, 0, p3, p4);
			ITvInputSession v15 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
			IBinder v16 = v15.asBinder();
			boolean v17 = v16.unlinkToDeath(v10, 0);
			ITvInputSession v18 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
			v18.release();
			TvInputManagerService$SessionState.-$$Nest$fputcurrentChannel(v10, 0);
			boolean v21 = TvInputManagerService$SessionState.-$$Nest$fgetisCurrent(v10);
			if (v21 == 0) {
				TvInputManagerService$SessionState.-$$Nest$fputisCurrent(v10, 0);
				TvInputManagerService.notifyCurrentChannelInfosUpdatedLocked(v11);
				if (v10 == 0) {
					TvInputManagerService$SessionState.-$$Nest$fputsession(, 0);
					TvInputManagerService.removeSessionStateLocked(p2, p4);
					TvInputManagerService$SessionState v9 = ;
					TvInputManagerService$SessionState v8 = v9;
					Object v28 = this.mUserStates.get(p2);
					TvInputManagerService$UserState v27 = v28;
					TvInputManagerService$UserState v26 = v27;
					if (v8 == 0) {
						if (p2 == 0) {
							Map v31 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(p2);
							String v32 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(p1);
							Object v33 = v31.get(v32);
							TvInputManagerService$TvInputState v30 = v33;
							TvInputManagerService$TvInputState v29 = v30;
							if (p4 == 0) {
								int v36 = TvInputManagerService$TvInputState.-$$Nest$fgetuid(p4);
								TvInputInfo v37 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
								int v38 = v37.getType();
								if (v38 != 0) {
									int v39 = TvInputManagerService$TvInputState.-$$Nest$fgetinputNumber(p4);
									TvInputInfo v40 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
									HdmiDeviceInfo v41 = v40.getHdmiDeviceInfo();
									if (v41 == 0) {
										int v42 = v41.getPortId();
										[I v43 = new [I(2);
										int v44 = TvInputManagerService$SessionState.-$$Nest$fgetcallingUid(p3);
										String v45 = new String(2);
										String v46 = TvInputManagerService$SessionState.-$$Nest$fgetsessionId(p3);
										FrameworkStatsLog.write(327, v43, v45, p2, v46, , , );
										Binder.restoreCallingIdentity(v6);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void releaseSession(IBinder p1, int p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v5 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v4 = v5;
	int v3 = v4;
	long v6 = Binder.clearCallingIdentity();
	Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p2, p3, p4);
	TvInputManagerService$UserState v11 = TvInputManagerService.getOrCreateUserStateLocked(p4);
	ITvInputSession v12 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
	if (v12 == 0) {
		IBinder v13 = TvInputManagerService$UserState.-$$Nest$fgetmainSessionToken(v11);
		if (p2 != v13) {
			TvInputManagerService.setMainLocked(p2, 0, p3, p4);
			ITvInputSession v15 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
			IBinder v16 = v15.asBinder();
			boolean v17 = v16.unlinkToDeath(v10, 0);
			ITvInputSession v18 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
			v18.release();
			TvInputManagerService$SessionState.-$$Nest$fputcurrentChannel(v10, 0);
			boolean v21 = TvInputManagerService$SessionState.-$$Nest$fgetisCurrent(v10);
			if (v21 == 0) {
				TvInputManagerService$SessionState.-$$Nest$fputisCurrent(v10, 0);
				TvInputManagerService.notifyCurrentChannelInfosUpdatedLocked(v11);
				if (v10 == 0) {
					TvInputManagerService$SessionState.-$$Nest$fputsession(, 0);
					TvInputManagerService.removeSessionStateLocked(p2, p4);
					TvInputManagerService$SessionState v9 = ;
					TvInputManagerService$SessionState v8 = v9;
					Object v28 = this.mUserStates.get(p2);
					TvInputManagerService$UserState v27 = v28;
					TvInputManagerService$UserState v26 = v27;
					if (v8 == 0) {
						if (p2 == 0) {
							Map v31 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(p2);
							String v32 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(p1);
							Object v33 = v31.get(v32);
							TvInputManagerService$TvInputState v30 = v33;
							TvInputManagerService$TvInputState v29 = v30;
							if (p4 == 0) {
								int v36 = TvInputManagerService$TvInputState.-$$Nest$fgetuid(p4);
								TvInputInfo v37 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
								int v38 = v37.getType();
								if (v38 != 0) {
									int v39 = TvInputManagerService$TvInputState.-$$Nest$fgetinputNumber(p4);
									TvInputInfo v40 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
									HdmiDeviceInfo v41 = v40.getHdmiDeviceInfo();
									if (v41 == 0) {
										[I v42 = new [I(2);
										int v43 = TvInputManagerService$SessionState.-$$Nest$fgetcallingUid(p3);
										String v44 = new String(2);
										String v45 = TvInputManagerService$SessionState.-$$Nest$fgetsessionId(p3);
										FrameworkStatsLog.write(327, v42, v44, p2, v45, , , );
										Binder.restoreCallingIdentity(v6);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void releaseSession(IBinder p1, int p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v5 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v4 = v5;
	int v3 = v4;
	long v6 = Binder.clearCallingIdentity();
	Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$SessionState v10 = TvInputManagerService.getSessionStateLocked(p2, p3, p4);
	TvInputManagerService$UserState v11 = TvInputManagerService.getOrCreateUserStateLocked(p4);
	ITvInputSession v12 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
	if (v12 == 0) {
		IBinder v13 = TvInputManagerService$UserState.-$$Nest$fgetmainSessionToken(v11);
		if (p2 != v13) {
			TvInputManagerService.setMainLocked(p2, 0, p3, p4);
			ITvInputSession v15 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
			IBinder v16 = v15.asBinder();
			boolean v17 = v16.unlinkToDeath(v10, 0);
			ITvInputSession v18 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);
			v18.release();
			TvInputManagerService$SessionState.-$$Nest$fputcurrentChannel(v10, 0);
			boolean v21 = TvInputManagerService$SessionState.-$$Nest$fgetisCurrent(v10);
			if (v21 == 0) {
				TvInputManagerService$SessionState.-$$Nest$fputisCurrent(v10, 0);
				TvInputManagerService.notifyCurrentChannelInfosUpdatedLocked(v11);
				if (v10 == 0) {
					TvInputManagerService$SessionState.-$$Nest$fputsession(, 0);
					TvInputManagerService.removeSessionStateLocked(p2, p4);
					TvInputManagerService$SessionState v9 = ;
					TvInputManagerService$SessionState v8 = v9;
					Object v28 = this.mUserStates.get(p2);
					TvInputManagerService$UserState v27 = v28;
					TvInputManagerService$UserState v26 = v27;
					if (v8 == 0) {
						if (p2 == 0) {
							TvInputManagerService$TvInputState v30 = 0;
							TvInputManagerService$TvInputState v29 = v30;
							if (p4 == 0) {
								int v33 = TvInputManagerService$TvInputState.-$$Nest$fgetuid(p4);
								TvInputInfo v34 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
								int v35 = v34.getType();
								if (v35 != 0) {
									int v36 = TvInputManagerService$TvInputState.-$$Nest$fgetinputNumber(p4);
									TvInputInfo v37 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(p4);
									HdmiDeviceInfo v38 = v37.getHdmiDeviceInfo();
									if (v38 == 0) {
										int v39 = v38.getPortId();
										[I v40 = new [I(2);
										int v41 = TvInputManagerService$SessionState.-$$Nest$fgetcallingUid(p3);
										String v42 = new String(2);
										String v43 = TvInputManagerService$SessionState.-$$Nest$fgetsessionId(p3);
										FrameworkStatsLog.write(327, v40, v42, p2, v43, , , );
										Binder.restoreCallingIdentity(v6);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ITvInputSession v18 = TvInputManagerService$SessionState.-$$Nest$fgetsession(v10);\nv18.release();', 'TvInputManagerService.setMainLocked(p2, 0, p3, p4);', 'TvInputManagerService$SessionState.-$$Nest$fputcurrentChannel(v10, 0);\nTvInputManagerService$SessionState.-$$Nest$fputisCurrent(v10, 0);', 'FrameworkStatsLog.write(327, v42, v44, p2, v45, , , );']

The method releaseSession has the following similar APIs:

- API Name: requestAd(Landroid/os/IBinder;Landroid/media/tv/AdRequest;I)V with Similarity Score: 0.9083752632141113
  - Access Control Level: SYS_OR_SIG and the following code:
ITvInputSession v14 = TvInputManagerService$SessionState.-$$Nest$fgetsession(p2);
if (v14 == 0) { ... } else { ... }

- API Name: setVolume(Landroid/os/IBinder;FI)V with Similarity Score: 0.8885737657546997
  - Access Control Level: SYS_OR_SIG and the following code:
ITvInputSession v14 = TvInputManagerService$SessionState.-$$Nest$fgetsession(p2);
v18.setVolume();

