This is path 1 for the API with depth 2:
public void removeBlockedRating(String p1, int p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v6 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v5 = v6;
	int v4 = v5;
	long v7 = Binder.clearCallingIdentity();
	Object v8 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
	if (v11 != 0) {
		TvInputManagerService$UserState v12 = new TvInputManagerService$UserState(this.mContext,p2,0);
		this.mUserStates.put(p2, v12);
		TvInputManagerService$UserState v10 = ;
		TvInputManagerService$UserState v9 = v10;
		PersistentDataStore v15 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v9);
		TvContentRating v16 = TvContentRating.unflattenFromString(p1);
		if (this.mLoaded != 0) {
			PersistentDataStore.load();
			this.mLoaded = 1;
			if (v16 == 0) {
				boolean v20 = this.mBlockedRatings.contains(v16);
				if (v20 == 0) {
					boolean v21 = this.mBlockedRatings.remove(v16);
					this.mBlockedRatingsChanged = 1;
					this.mHandler.removeCallbacks(this.mSaveRunnable);
					boolean v24 = this.mHandler.post(this.mSaveRunnable);
					Binder.restoreCallingIdentity(v7);
					return;
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void removeBlockedRating(String p1, int p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v6 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v5 = v6;
	int v4 = v5;
	long v7 = Binder.clearCallingIdentity();
	Object v8 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
	if (v11 != 0) {
		TvInputManagerService$UserState v10 = ;
		TvInputManagerService$UserState v9 = v10;
		PersistentDataStore v12 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v9);
		TvContentRating v13 = TvContentRating.unflattenFromString(p1);
		if (this.mLoaded != 0) {
			PersistentDataStore.load();
			this.mLoaded = 1;
			if (v13 == 0) {
				boolean v17 = this.mBlockedRatings.contains(v13);
				if (v17 == 0) {
					boolean v18 = this.mBlockedRatings.remove(v13);
					this.mBlockedRatingsChanged = 1;
					this.mHandler.removeCallbacks(this.mSaveRunnable);
					boolean v21 = this.mHandler.post(this.mSaveRunnable);
					Binder.restoreCallingIdentity(v7);
					return;
				}
			}
		}
	}
}
