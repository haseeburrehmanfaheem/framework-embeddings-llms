This is path 1 for the API with depth 2:
public void releaseTvInputHardware(int p1, ITvInputHardware p2, int p3){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		int v4 = Binder.getCallingUid();
		int v5 = Binder.getCallingPid();
		int v8 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
		int v7 = v8;
		int v6 = v7;
		TvInputHardwareManager v9 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
		Object v11 = this.mConnections.get(p1);
		if (v11 != 0) {
			ITvInputHardware v12 = this.mHardware;
			if (v12 != p2) {
				if (v15 == 0) {
					boolean v13 = ;
					if (v13 == 0) {
						ITvInputHardwareCallback v16 = this.mCallback;
						if (v16 == 0) {
							IBinder v17 = v16.asBinder();
							boolean v18 = v17.unlinkToDeath(v11, 0);
							v11.resetLocked(0, 0, 0, 0, 0, 0);
							Binder.restoreCallingIdentity(v3);
							return;
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void releaseTvInputHardware(int p1, ITvInputHardware p2, int p3){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		int v4 = Binder.getCallingUid();
		int v5 = Binder.getCallingPid();
		int v8 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
		int v7 = v8;
		int v6 = v7;
		TvInputHardwareManager v9 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
		Object v11 = this.mConnections.get(p1);
		if (v11 != 0) {
			ITvInputHardware v12 = this.mHardware;
			if (v12 != p2) {
				boolean v13 = ;
				if (v13 == 0) {
					ITvInputHardwareCallback v16 = this.mCallback;
					if (v16 == 0) {
						IBinder v17 = v16.asBinder();
						boolean v18 = v17.unlinkToDeath(v11, 0);
						v11.resetLocked(0, 0, 0, 0, 0, 0);
						Binder.restoreCallingIdentity(v3);
						return;
					}
				}
			}
		}
	}
}
