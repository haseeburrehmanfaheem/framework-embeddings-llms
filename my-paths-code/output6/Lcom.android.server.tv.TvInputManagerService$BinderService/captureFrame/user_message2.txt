The method captureFrame has the following code snippet:

This is path 1 for the API with depth 2:
public boolean captureFrame(String p1, Surface p2, TvStreamConfig p3, int p4){
	long v2 = Binder.clearCallingIdentity();
	int v3 = Binder.getCallingUid();
	int v4 = Binder.getCallingPid();
	int v7 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v6 = v7;
	int v5 = v6;
	Object v8 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
	if (v11 != 0) {
		TvInputManagerService$UserState v12 = new TvInputManagerService$UserState(this.mContext,p2,0);
		this.mUserStates.put(p2, v12);
		TvInputManagerService$UserState v10 = ;
		TvInputManagerService$UserState v9 = v10;
		Map v15 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);
		Object v16 = v15.get(p1);
		if (v16 != 0) {
			Map v17 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
			Collection v18 = v17.values();
			Iterator v19 = v18.iterator();
			boolean v20 = v19.hasNext();
			if (v20 == 0) {
				Object v21 = v19.next();
				String v22 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v21);
				boolean v23 = v22.equals(p1);
				if (v23 == 0) {
					IBinder v24 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v21);
					if (v24 == 0) {
						Map v25 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
						IBinder v26 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v21);
						Object v27 = v25.get(v26);
						String v28 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v27);
						TvInputHardwareManager v29 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
						if ( == 0) {
							int v32 = this.mConnections.size();
							if ( >= v32) {
								Object v33 = this.mConnections.get();
								TvInputInfo v34 = v33.getInfoLocked();
								String v35 = v34.getId();
								boolean v36 = v35.equals(p1);
								if (v36 == 0) {
									int v31 = ;
									if (v31 >= 0) {
										Object v37 = this.mConnections.get(v31);
										TvInputHardwareManager$TvInputHardwareImpl v38 = this.mHardware;
										if (v38 == 0) {
											Runnable v39 = this.mOnFirstFrameCaptured;
											if (v39 == 0) {
												v39.run();
												this.mOnFirstFrameCaptured = 0;
												boolean v43 = v38.startCapture(p2, p3);
												boolean v42 = v43;
												if (v42 == 0) {
													TvInputHardwareManager$2 v44 = new TvInputHardwareManager$2(TvInputHardwareManager,v38,p3);
													this.mOnFirstFrameCaptured = v44;
													boolean v30 = v42;
													Binder.restoreCallingIdentity(v2);
													return v30;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean captureFrame(String p1, Surface p2, TvStreamConfig p3, int p4){
	long v2 = Binder.clearCallingIdentity();
	int v3 = Binder.getCallingUid();
	int v4 = Binder.getCallingPid();
	int v7 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v6 = v7;
	int v5 = v6;
	Object v8 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
	if (v11 != 0) {
		TvInputManagerService$UserState v12 = new TvInputManagerService$UserState(this.mContext,p2,0);
		this.mUserStates.put(p2, v12);
		TvInputManagerService$UserState v10 = ;
		TvInputManagerService$UserState v9 = v10;
		Map v15 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);
		Object v16 = v15.get(p1);
		if (v16 != 0) {
			Map v17 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
			Collection v18 = v17.values();
			Iterator v19 = v18.iterator();
			boolean v20 = v19.hasNext();
			if (v20 == 0) {
				Object v21 = v19.next();
				String v22 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v21);
				boolean v23 = v22.equals(p1);
				if (v23 == 0) {
					IBinder v24 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v21);
					if (v24 == 0) {
						Map v25 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
						IBinder v26 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v21);
						Object v27 = v25.get(v26);
						String v28 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v27);
						TvInputHardwareManager v29 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
						if ( == 0) {
							int v32 = this.mConnections.size();
							if ( >= v32) {
								Object v33 = this.mConnections.get();
								TvInputInfo v34 = v33.getInfoLocked();
								String v35 = v34.getId();
								boolean v36 = v35.equals(p1);
								if (v36 == 0) {
									int v31 = ;
									if (v31 >= 0) {
										Object v37 = this.mConnections.get(v31);
										TvInputHardwareManager$TvInputHardwareImpl v38 = this.mHardware;
										if (v38 == 0) {
											Runnable v39 = this.mOnFirstFrameCaptured;
											if (v39 == 0) {
												v39.run();
												this.mOnFirstFrameCaptured = 0;
												boolean v43 = v38.startCapture(p2, p3);
												boolean v42 = v43;
												if (v42 == 0) {
													TvInputHardwareManager$2 v44 = new TvInputHardwareManager$2(TvInputHardwareManager,v38,p3);
													this.mOnFirstFrameCaptured = v44;
													boolean v30 = v42;
													Binder.restoreCallingIdentity(v2);
													return v30;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean captureFrame(String p1, Surface p2, TvStreamConfig p3, int p4){
	long v2 = Binder.clearCallingIdentity();
	int v3 = Binder.getCallingUid();
	int v4 = Binder.getCallingPid();
	int v7 = ActivityManager.handleIncomingUser(p2, p3, p4, 0, 0, p5, 0);
	int v6 = v7;
	int v5 = v6;
	Object v8 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
	if (v11 != 0) {
		TvInputManagerService$UserState v10 = ;
		TvInputManagerService$UserState v9 = v10;
		Map v12 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);
		Object v13 = v12.get(p1);
		if (v13 != 0) {
			Map v14 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
			Collection v15 = v14.values();
			Iterator v16 = v15.iterator();
			boolean v17 = v16.hasNext();
			if (v17 == 0) {
				Object v18 = v16.next();
				String v19 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v18);
				boolean v20 = v19.equals(p1);
				if (v20 == 0) {
					IBinder v21 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v18);
					if (v21 == 0) {
						Map v22 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v9);
						IBinder v23 = TvInputManagerService$SessionState.-$$Nest$fgethardwareSessionToken(v18);
						Object v24 = v22.get(v23);
						String v25 = TvInputManagerService$SessionState.-$$Nest$fgetinputId(v24);
						TvInputHardwareManager v26 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
						if ( == 0) {
							int v29 = this.mConnections.size();
							if ( >= v29) {
								Object v30 = this.mConnections.get();
								TvInputInfo v31 = v30.getInfoLocked();
								String v32 = v31.getId();
								boolean v33 = v32.equals(p1);
								if (v33 == 0) {
									int v28 = ;
									if (v28 >= 0) {
										Object v34 = this.mConnections.get(v28);
										TvInputHardwareManager$TvInputHardwareImpl v35 = this.mHardware;
										if (v35 == 0) {
											Runnable v36 = this.mOnFirstFrameCaptured;
											if (v36 == 0) {
												v36.run();
												this.mOnFirstFrameCaptured = 0;
												boolean v40 = v35.startCapture(p2, p3);
												boolean v39 = v40;
												if (v39 == 0) {
													TvInputHardwareManager$2 v41 = new TvInputHardwareManager$2(TvInputHardwareManager,v35,p3);
													this.mOnFirstFrameCaptured = v41;
													boolean v27 = v39;
													Binder.restoreCallingIdentity(v2);
													return v27;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v8 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);\nTvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);\nMap v12 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);\nObject v13 = v12.get(p1);', 'TvInputHardwareManager v26 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);\nint v29 = this.mConnections.size();\nif ( >= v29) {\nObject v30 = this.mConnections.get();\nTvInputInfo v31 = v30.getInfoLocked();\nString v32 = v31.getId();', 'Runnable v36 = this.mOnFirstFrameCaptured;\nif (v36 == 0) {\nv36.run();\nthis.mOnFirstFrameCaptured = 0;\nboolean v40 = v35.startCapture(p2, p3);', 'TvInputHardwareManager$2 v41 = new TvInputHardwareManager$2(TvInputHardwareManager,v35,p3);\nthis.mOnFirstFrameCaptured = v41;']

The method captureFrame has the following similar APIs:

- API Name: getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo; with Similarity Score: 0.955672562122345
  - Access Control Level: NONE and the following code:
Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
TvInputManagerService$UserState v10 = TvInputManagerService.getUserStateLocked(p2);
Map v14 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v8);
Object v15 = v14.get(p1);
if (v15 != 0) {
TvInputInfo v16 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v15);
return ;

- API Name: getAvailableExtensionInterfaceNames(Ljava/lang/String;I)Ljava/util/List; with Similarity Score: 0.9484491944313049
  - Access Control Level: NONE and the following code:
TvInputManagerService$UserState v11 = TvInputManagerService.getUserStateLocked(p2);
Map v15 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v9);
Object v16 = v15.get(p1);

