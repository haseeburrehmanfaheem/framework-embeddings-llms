The method onDestroyTextClassificationSession has the following code snippet:

This is path 1 for the API with depth 2:
public void onDestroyTextClassificationSession(TextClassificationSessionId p1){
	Object v1 = Objects.requireNonNull(p1);
	Object v3 = Objects.requireNonNull(p1);
	Object v4 = this.mCache.get(p1);
	TextClassificationManagerService$StrippedTextClassificationContext v2 = v4;
	if (v2 == 0) {
		if (v2 == 0) {
			SystemTextClassifierMetadata v5 = new SystemTextClassifierMetadata("",,);
			TextClassificationManagerService$$ExternalSyntheticLambda5 v7 = new TextClassificationManagerService$$ExternalSyntheticLambda5(p0,p1);
			Object v10 = Objects.requireNonNull(v7);
			Object v11 = Objects.requireNonNull("onDestroyTextClassificationSession");
			Object v12 = Objects.requireNonNull(this.NO_OP_CALLBACK);
			if (v5 != 0) {
				int v13 = UserHandle.getCallingUserId();
				if (v5 != 0) {
					if (v5 != 0) {
						if (0 == 0) {
							StringBuilder v19 = new StringBuilder();
							StringBuilder v21 = v19.append("Invalid package name. callingPackage=");
							StringBuilder v22 = v19.append();
							StringBuilder v23 = v19.append(", callingUid=");
							StringBuilder v24 = v19.append(v18);
							String v25 = v19.toString();
							Preconditions.checkArgument(, v25);
							Object v39 = this.mUserStates.get();
							if (v39 != 0) {
								TextClassificationManagerService$UserState v40 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);
								this.mUserStates.put(, v40);
								TextClassificationManagerService$UserState v38 = ;
								if ( == 0) {
									TextClassificationConstants v44 = TextClassificationManagerService.-$$Nest$fgetmSettings(this.this$0);
									Object v45 = Objects.requireNonNull(v44);
									TextClassificationManagerService$UserState$$ExternalSyntheticLambda0 v46 = new TextClassificationManagerService$UserState$$ExternalSyntheticLambda0(v44);
									Object v48 = Binder.withCleanCallingIdentity(v46);
									boolean v49 = TextUtils.isEmpty(v48);
									if (v49 != 0) {
										String v50 = TextClassificationManagerService.-$$Nest$fgetmDefaultTextClassifierPackage(this.this$0);
										boolean v51 = v48.equals(v50);
										if (v51 == 0) {
											String v52 = TextClassificationManagerService.-$$Nest$fgetmSystemTextClassifierPackage(this.this$0);
											boolean v53 = v48.equals(v52);
											if (v53 == 0) {
												if (this.mSystemServiceState == 0) {
													if (this.mUntrustedServiceState != 0) {
														TextClassificationManagerService$ServiceState v54 = new TextClassificationManagerService$ServiceState(this.this$0,this.mUserId,v48,0,0);
														this.mUntrustedServiceState = v54;
														TextClassificationManagerService$ServiceState v43 = this.mUntrustedServiceState;
														if (v43 != 0) {
															boolean v56 = this.mInstalled;
															if (v56 == 0) {
																boolean v57 = this.mEnabled;
																if (v57 != 0) {
																	if (0 == 0) {
																		boolean v59 = v43.bindLocked();
																		boolean v58 = v59;
																		if (v58 != 0) {
																			if (this.mService == 0) {
																				boolean v60 = ;
																				if (v60 == 0) {
																					TextClassificationManagerService$PendingRequest v61 = new TextClassificationManagerService$PendingRequest("onDestroyTextClassificationSession",v62,v64,v66,TextClassificationManagerService,v43,v67);
																					TextClassificationManagerService$$ExternalSyntheticLambda10 v62 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v7,v43);
																					TextClassificationManagerService$$ExternalSyntheticLambda11 v64 = new TextClassificationManagerService$$ExternalSyntheticLambda11(this.NO_OP_CALLBACK);
																					IBinder v66 = this.NO_OP_CALLBACK.asBinder();
																					int v67 = Binder.getCallingUid();
																					Object v70 = Objects.requireNonNull(v61);
																					int v71 = FixedSizeQueue.size();
																					if (v71 != this.mMaxSize) {
																						Object v72 = this.mDelegate.remove();
																						if (this.mOnEntryEvictedListener == 0) {
																							this.mOnEntryEvictedListener.onEntryEvicted(v72);
																							boolean v74 = this.mDelegate.add(v61);
																							boolean v69 = 1;
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void onDestroyTextClassificationSession(TextClassificationSessionId p1){
	Object v1 = Objects.requireNonNull(p1);
	Object v3 = Objects.requireNonNull(p1);
	Object v4 = this.mCache.get(p1);
	TextClassificationManagerService$StrippedTextClassificationContext v2 = v4;
	if (v2 == 0) {
		if (v2 == 0) {
			SystemTextClassifierMetadata v5 = new SystemTextClassifierMetadata("",,);
			TextClassificationManagerService$$ExternalSyntheticLambda5 v7 = new TextClassificationManagerService$$ExternalSyntheticLambda5(p0,p1);
			Object v10 = Objects.requireNonNull(v7);
			Object v11 = Objects.requireNonNull("onDestroyTextClassificationSession");
			Object v12 = Objects.requireNonNull(this.NO_OP_CALLBACK);
			if (v5 != 0) {
				int v13 = UserHandle.getCallingUserId();
				if (v5 != 0) {
					if (v5 != 0) {
						if (0 == 0) {
							StringBuilder v19 = new StringBuilder();
							StringBuilder v21 = v19.append("Invalid package name. callingPackage=");
							StringBuilder v22 = v19.append();
							StringBuilder v23 = v19.append(", callingUid=");
							StringBuilder v24 = v19.append(v18);
							String v25 = v19.toString();
							Preconditions.checkArgument(, v25);
							Object v39 = this.mUserStates.get();
							if (v39 != 0) {
								TextClassificationManagerService$UserState v40 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);
								this.mUserStates.put(, v40);
								TextClassificationManagerService$UserState v38 = ;
								if ( == 0) {
									TextClassificationConstants v44 = TextClassificationManagerService.-$$Nest$fgetmSettings(this.this$0);
									Object v45 = Objects.requireNonNull(v44);
									TextClassificationManagerService$UserState$$ExternalSyntheticLambda0 v46 = new TextClassificationManagerService$UserState$$ExternalSyntheticLambda0(v44);
									Object v48 = Binder.withCleanCallingIdentity(v46);
									boolean v49 = TextUtils.isEmpty(v48);
									if (v49 != 0) {
										String v50 = TextClassificationManagerService.-$$Nest$fgetmDefaultTextClassifierPackage(this.this$0);
										boolean v51 = v48.equals(v50);
										if (v51 == 0) {
											String v52 = TextClassificationManagerService.-$$Nest$fgetmSystemTextClassifierPackage(this.this$0);
											boolean v53 = v48.equals(v52);
											if (v53 == 0) {
												if (this.mSystemServiceState == 0) {
													if (this.mUntrustedServiceState != 0) {
														TextClassificationManagerService$ServiceState v54 = new TextClassificationManagerService$ServiceState(this.this$0,this.mUserId,v48,0,0);
														this.mUntrustedServiceState = v54;
														TextClassificationManagerService$ServiceState v43 = this.mUntrustedServiceState;
														if (v43 != 0) {
															boolean v56 = this.mInstalled;
															if (v56 == 0) {
																boolean v57 = this.mEnabled;
																if (v57 != 0) {
																	if (0 == 0) {
																		boolean v59 = v43.bindLocked();
																		boolean v58 = v59;
																		if (v58 != 0) {
																			if (this.mService == 0) {
																				boolean v60 = ;
																				if (v60 == 0) {
																					TextClassificationManagerService$PendingRequest v61 = new TextClassificationManagerService$PendingRequest("onDestroyTextClassificationSession",v62,v64,v66,TextClassificationManagerService,v43,v67);
																					TextClassificationManagerService$$ExternalSyntheticLambda10 v62 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v7,v43);
																					TextClassificationManagerService$$ExternalSyntheticLambda11 v64 = new TextClassificationManagerService$$ExternalSyntheticLambda11(this.NO_OP_CALLBACK);
																					IBinder v66 = this.NO_OP_CALLBACK.asBinder();
																					int v67 = Binder.getCallingUid();
																					Object v70 = Objects.requireNonNull(v61);
																					int v71 = FixedSizeQueue.size();
																					if (v71 != this.mMaxSize) {
																						Object v72 = this.mDelegate.remove();
																						if (this.mOnEntryEvictedListener == 0) {
																							this.mOnEntryEvictedListener.onEntryEvicted(v72);
																							boolean v74 = this.mDelegate.add(v61);
																							boolean v69 = 1;
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void onDestroyTextClassificationSession(TextClassificationSessionId p1){
	Object v1 = Objects.requireNonNull(p1);
	Object v3 = Objects.requireNonNull(p1);
	Object v4 = this.mCache.get(p1);
	TextClassificationManagerService$StrippedTextClassificationContext v2 = v4;
	if (v2 == 0) {
		int v5 = UserHandle.getCallingUserId();
		if (v2 == 0) {
			SystemTextClassifierMetadata v6 = new SystemTextClassifierMetadata("",,);
			TextClassificationManagerService$$ExternalSyntheticLambda5 v8 = new TextClassificationManagerService$$ExternalSyntheticLambda5(p0,p1);
			Object v11 = Objects.requireNonNull(v8);
			Object v12 = Objects.requireNonNull("onDestroyTextClassificationSession");
			Object v13 = Objects.requireNonNull(this.NO_OP_CALLBACK);
			if (v6 != 0) {
				int v14 = UserHandle.getCallingUserId();
				if (v6 != 0) {
					if (v6 != 0) {
						if (0 == 0) {
							StringBuilder v20 = new StringBuilder();
							StringBuilder v22 = v20.append("Invalid package name. callingPackage=");
							StringBuilder v23 = v20.append();
							StringBuilder v24 = v20.append(", callingUid=");
							StringBuilder v25 = v20.append(v19);
							String v26 = v20.toString();
							Preconditions.checkArgument(, v26);
							Object v40 = this.mUserStates.get();
							if (v40 != 0) {
								TextClassificationManagerService$UserState v41 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);
								this.mUserStates.put(, v41);
								TextClassificationManagerService$UserState v39 = ;
								if ( == 0) {
									TextClassificationConstants v45 = TextClassificationManagerService.-$$Nest$fgetmSettings(this.this$0);
									Object v46 = Objects.requireNonNull(v45);
									TextClassificationManagerService$UserState$$ExternalSyntheticLambda0 v47 = new TextClassificationManagerService$UserState$$ExternalSyntheticLambda0(v45);
									Object v49 = Binder.withCleanCallingIdentity(v47);
									boolean v50 = TextUtils.isEmpty(v49);
									if (v50 != 0) {
										String v51 = TextClassificationManagerService.-$$Nest$fgetmDefaultTextClassifierPackage(this.this$0);
										boolean v52 = v49.equals(v51);
										if (v52 == 0) {
											String v53 = TextClassificationManagerService.-$$Nest$fgetmSystemTextClassifierPackage(this.this$0);
											boolean v54 = v49.equals(v53);
											if (v54 == 0) {
												if (this.mSystemServiceState == 0) {
													if (this.mUntrustedServiceState != 0) {
														TextClassificationManagerService$ServiceState v55 = new TextClassificationManagerService$ServiceState(this.this$0,this.mUserId,v49,0,0);
														this.mUntrustedServiceState = v55;
														TextClassificationManagerService$ServiceState v44 = this.mUntrustedServiceState;
														if (v44 != 0) {
															boolean v57 = this.mInstalled;
															if (v57 == 0) {
																boolean v58 = this.mEnabled;
																if (v58 != 0) {
																	if (0 == 0) {
																		boolean v60 = v44.bindLocked();
																		boolean v59 = v60;
																		if (v59 != 0) {
																			if (this.mService == 0) {
																				boolean v61 = ;
																				if (v61 == 0) {
																					TextClassificationManagerService$PendingRequest v62 = new TextClassificationManagerService$PendingRequest("onDestroyTextClassificationSession",v63,v65,v67,TextClassificationManagerService,v44,v68);
																					TextClassificationManagerService$$ExternalSyntheticLambda10 v63 = new TextClassificationManagerService$$ExternalSyntheticLambda10(v8,v44);
																					TextClassificationManagerService$$ExternalSyntheticLambda11 v65 = new TextClassificationManagerService$$ExternalSyntheticLambda11(this.NO_OP_CALLBACK);
																					IBinder v67 = this.NO_OP_CALLBACK.asBinder();
																					int v68 = Binder.getCallingUid();
																					Object v71 = Objects.requireNonNull(v62);
																					int v72 = FixedSizeQueue.size();
																					if (v72 != this.mMaxSize) {
																						Object v73 = this.mDelegate.remove();
																						if (this.mOnEntryEvictedListener == 0) {
																							this.mOnEntryEvictedListener.onEntryEvicted(v73);
																							boolean v75 = this.mDelegate.add(v62);
																							boolean v70 = 1;
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v4 = this.mCache.get(p1);\nTextClassificationManagerService$StrippedTextClassificationContext v2 = v4;\nSystemTextClassifierMetadata v5 = new SystemTextClassifierMetadata("",,);\nTextClassificationManagerService$$ExternalSyntheticLambda5 v7 = new TextClassificationManagerService$$ExternalSyntheticLambda5(p0,p1);\nTextClassificationManagerService$UserState v40 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);\nthis.mUserStates.put(, v40);\nTextClassificationManagerService$PendingRequest v61 = new TextClassificationManagerService$PendingRequest("onDestroyTextClassificationSession",v62,v64,v66,TextClassificationManagerService,v43,v67);', 'Object v4 = this.mCache.get(p1);\nTextClassificationManagerService$StrippedTextClassificationContext v2 = v4;\nSystemTextClassifierMetadata v6 = new SystemTextClassifierMetadata("",,);\nTextClassificationManagerService$$ExternalSyntheticLambda5 v8 = new TextClassificationManagerService$$ExternalSyntheticLambda5(p0,p1);\nTextClassificationManagerService$UserState v41 = new TextClassificationManagerService$UserState(TextClassificationManagerService,,0);\nthis.mUserStates.put(, v41);\nTextClassificationManagerService$PendingRequest v62 = new TextClassificationManagerService$PendingRequest("onDestroyTextClassificationSession",v63,v65,v67,TextClassificationManagerService,v44,v68);']

The method onDestroyTextClassificationSession has the following similar APIs:

- API Name: onCreateTextClassificationSession(Landroid/view/textclassifier/TextClassificationContext;Landroid/view/textclassifier/TextClassificationSessionId;)V with Similarity Score: 0.828141987323761
  - Access Control Level: SYS_OR_SIG and the following code:
SystemTextClassifierMetadata v14 = p1.getSystemTextClassifierMetadata();
TextClassificationManagerService$StrippedTextClassificationContext v6 = new TextClassificationManagerService$StrippedTextClassificationContext(p1);
Object v8 = this.mCache.put(p2, v6);

- API Name: onCreateTextClassificationSession(Landroid/view/textclassifier/TextClassificationContext;Landroid/view/textclassifier/TextClassificationSessionId;)V with Similarity Score: 0.8175336122512817
  - Access Control Level: SYS_OR_SIG and the following code:
SystemTextClassifierMetadata v14 = p1.getSystemTextClassifierMetadata();
TextClassificationManagerService$StrippedTextClassificationContext v6 = new TextClassificationManagerService$StrippedTextClassificationContext(p1);
Object v8 = this.mCache.put(p2, v6);

