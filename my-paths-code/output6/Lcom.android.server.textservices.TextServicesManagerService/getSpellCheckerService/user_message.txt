This is path 1 for the API with depth 2:
public void getSpellCheckerService(int p1, String p2, String p3, ITextServicesSessionListener p4, ISpellCheckerSessionListener p5, Bundle p6, int p7){
	boolean v11 = TextUtils.isEmpty(p2);
	if (v11 != 0) {
		if (p4 == 0) {
			if (p5 != 0) {
				Object v13 = this.mUserData.get(p1);
				TextServicesManagerService$TextServicesData v12 = v13;
				if (v12 != 0) {
					HashMap v14 = this.mSpellCheckerMap;
					boolean v15 = v14.containsKey(p2);
					if (v15 != 0) {
						Object v16 = v14.get(p2);
						HashMap v17 = this.mSpellCheckerBindGroups;
						Object v18 = v17.get(p2);
						int v19 = Binder.getCallingUid();
						if (v18 != 0) {
							long v20 = Binder.clearCallingIdentity();
							String v22 = this.mId;
							TextServicesManagerService$InternalServiceConnection v23 = new TextServicesManagerService$InternalServiceConnection(TextServicesManagerService,v22,v24);
							HashMap v24 = this.mSpellCheckerBindGroups;
							Intent v26 = new Intent("android.service.textservice.SpellCheckerService");
							ComponentName v29 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
							ComponentName v28 = v29;
							Intent v31 = v26.setComponent(v28);
							int v32 = this.mUserId;
							if (v26 == 0) {
								if (v23 != 0) {
									UserHandle v34 = UserHandle.of(v32);
									boolean v35 = this.mContext.bindServiceAsUser(v26, v23, 8388609, v34);
									boolean v33 = v35;
									if (v33 != 0) {
										TextServicesManagerService$SpellCheckerBindGroup v36 = new TextServicesManagerService$SpellCheckerBindGroup(TextServicesManagerService,v23);
										HashMap v38 = this.mSpellCheckerBindGroups;
										Object v39 = v38.put(v22, v36);
										TextServicesManagerService$SpellCheckerBindGroup v21 = v36;
										Binder.restoreCallingIdentity(v20);
										if (v21 != 0) {
											TextServicesManagerService$SessionRequest v41 = new TextServicesManagerService$SessionRequest(v19,p3,p4,p5,p6,p7);
											if (this.mUnbindCalled == 0) {
												boolean v44 = this.mListeners.register(TextServicesManagerService$SessionRequest.mScListener);
												if (this.mConnected != 0) {
													TextServicesManagerService$ISpellCheckerServiceCallbackBinder v45 = new TextServicesManagerService$ISpellCheckerServiceCallbackBinder(TextServicesManagerService$SpellCheckerBindGroup,v41);
													this.mSpellChecker.getISpellCheckerSession(TextServicesManagerService$SessionRequest.mLocale, TextServicesManagerService$SessionRequest.mScListener, TextServicesManagerService$SessionRequest.mBundle, TextServicesManagerService$SessionRequest.mSupportedAttributes, v45);
													boolean v48 = this.mOnGoingSessionRequests.add(v41);
													if (this.mUnbindCalled == 0) {
														int v50 = this.mListeners.getRegisteredCallbackCount();
														if (v50 <= 0) {
															boolean v51 = this.mPendingSessionRequests.isEmpty();
															if (v51 != 0) {
																boolean v52 = this.mOnGoingSessionRequests.isEmpty();
																if (v52 != 0) {
																	String v53 = TextServicesManagerService$InternalServiceConnection.-$$Nest$fgetmSciId(this.mInternalConnection);
																	Object v54 = this.mSpellCheckerBindGroups.get(v53);
																	if (v54 != TextServicesManagerService$SpellCheckerBindGroup) {
																		Object v55 = this.mSpellCheckerBindGroups.remove(v53);
																		Context v56 = TextServicesManagerService.-$$Nest$fgetmContext(this.this$0);
																		v56.unbindService(this.mInternalConnection);
																		this.mUnbindCalled = 1;
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void getSpellCheckerService(int p1, String p2, String p3, ITextServicesSessionListener p4, ISpellCheckerSessionListener p5, Bundle p6, int p7){
	boolean v11 = TextUtils.isEmpty(p2);
	if (v11 != 0) {
		if (p4 == 0) {
			if (p5 != 0) {
				Object v13 = this.mUserData.get(p1);
				TextServicesManagerService$TextServicesData v12 = v13;
				if (v12 != 0) {
					HashMap v14 = this.mSpellCheckerMap;
					boolean v15 = v14.containsKey(p2);
					if (v15 != 0) {
						Object v16 = v14.get(p2);
						HashMap v17 = this.mSpellCheckerBindGroups;
						Object v18 = v17.get(p2);
						int v19 = Binder.getCallingUid();
						if (v18 != 0) {
							long v20 = Binder.clearCallingIdentity();
							String v22 = this.mId;
							TextServicesManagerService$InternalServiceConnection v23 = new TextServicesManagerService$InternalServiceConnection(TextServicesManagerService,v22,v24);
							HashMap v24 = this.mSpellCheckerBindGroups;
							Intent v26 = new Intent("android.service.textservice.SpellCheckerService");
							ComponentName v29 = new ComponentName(ServiceInfo.packageName,ServiceInfo.name);
							ComponentName v28 = v29;
							Intent v31 = v26.setComponent(v28);
							int v32 = this.mUserId;
							if (v26 == 0) {
								if (v23 != 0) {
									UserHandle v34 = UserHandle.of(v32);
									boolean v35 = this.mContext.bindServiceAsUser(v26, v23, 8388609, v34);
									boolean v33 = v35;
									if (v33 != 0) {
										TextServicesManagerService$SpellCheckerBindGroup v36 = new TextServicesManagerService$SpellCheckerBindGroup(TextServicesManagerService,v23);
										HashMap v38 = this.mSpellCheckerBindGroups;
										Object v39 = v38.put(v22, v36);
										TextServicesManagerService$SpellCheckerBindGroup v21 = v36;
										Binder.restoreCallingIdentity(v20);
										if (v21 != 0) {
											TextServicesManagerService$SessionRequest v41 = new TextServicesManagerService$SessionRequest(v19,p3,p4,p5,p6,p7);
											if (this.mUnbindCalled == 0) {
												boolean v44 = this.mListeners.register(TextServicesManagerService$SessionRequest.mScListener);
												if (this.mConnected != 0) {
													TextServicesManagerService$ISpellCheckerServiceCallbackBinder v45 = new TextServicesManagerService$ISpellCheckerServiceCallbackBinder(TextServicesManagerService$SpellCheckerBindGroup,v41);
													this.mSpellChecker.getISpellCheckerSession(TextServicesManagerService$SessionRequest.mLocale, TextServicesManagerService$SessionRequest.mScListener, TextServicesManagerService$SessionRequest.mBundle, TextServicesManagerService$SessionRequest.mSupportedAttributes, v45);
													TextServicesManagerService$SpellCheckerBindGroup.removeAllLocked();
													if (this.mUnbindCalled == 0) {
														int v50 = this.mListeners.getRegisteredCallbackCount();
														if (v50 <= 0) {
															boolean v51 = this.mPendingSessionRequests.isEmpty();
															if (v51 != 0) {
																boolean v52 = this.mOnGoingSessionRequests.isEmpty();
																if (v52 != 0) {
																	String v53 = TextServicesManagerService$InternalServiceConnection.-$$Nest$fgetmSciId(this.mInternalConnection);
																	Object v54 = this.mSpellCheckerBindGroups.get(v53);
																	if (v54 != TextServicesManagerService$SpellCheckerBindGroup) {
																		Object v55 = this.mSpellCheckerBindGroups.remove(v53);
																		Context v56 = TextServicesManagerService.-$$Nest$fgetmContext(this.this$0);
																		v56.unbindService(this.mInternalConnection);
																		this.mUnbindCalled = 1;
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void getSpellCheckerService(int p1, String p2, String p3, ITextServicesSessionListener p4, ISpellCheckerSessionListener p5, Bundle p6, int p7){
	boolean v11 = TextUtils.isEmpty(p2);
	if (v11 != 0) {
		if (p4 == 0) {
			if (p5 != 0) {
				Object v13 = this.mUserData.get(p1);
				TextServicesManagerService$TextServicesData v12 = v13;
				if (v12 != 0) {
					HashMap v14 = this.mSpellCheckerMap;
					boolean v15 = v14.containsKey(p2);
					if (v15 != 0) {
						Object v16 = v14.get(p2);
						HashMap v17 = this.mSpellCheckerBindGroups;
						Object v18 = v17.get(p2);
						int v19 = Binder.getCallingUid();
						if (v18 != 0) {
							TextServicesManagerService$SessionRequest v20 = new TextServicesManagerService$SessionRequest(v19,p3,p4,p5,p6,p7);
							if (this.mUnbindCalled == 0) {
								boolean v23 = this.mListeners.register(TextServicesManagerService$SessionRequest.mScListener);
								if (this.mConnected != 0) {
									TextServicesManagerService$ISpellCheckerServiceCallbackBinder v24 = new TextServicesManagerService$ISpellCheckerServiceCallbackBinder(TextServicesManagerService$SpellCheckerBindGroup,v20);
									this.mSpellChecker.getISpellCheckerSession(TextServicesManagerService$SessionRequest.mLocale, TextServicesManagerService$SessionRequest.mScListener, TextServicesManagerService$SessionRequest.mBundle, TextServicesManagerService$SessionRequest.mSupportedAttributes, v24);
									boolean v27 = this.mOnGoingSessionRequests.add(v20);
									if (this.mUnbindCalled == 0) {
										int v29 = this.mListeners.getRegisteredCallbackCount();
										if (v29 <= 0) {
											boolean v30 = this.mPendingSessionRequests.isEmpty();
											if (v30 != 0) {
												boolean v31 = this.mOnGoingSessionRequests.isEmpty();
												if (v31 != 0) {
													String v32 = TextServicesManagerService$InternalServiceConnection.-$$Nest$fgetmSciId(this.mInternalConnection);
													Object v33 = this.mSpellCheckerBindGroups.get(v32);
													if (v33 != TextServicesManagerService$SpellCheckerBindGroup) {
														Object v34 = this.mSpellCheckerBindGroups.remove(v32);
														Context v35 = TextServicesManagerService.-$$Nest$fgetmContext(this.this$0);
														v35.unbindService(this.mInternalConnection);
														this.mUnbindCalled = 1;
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
