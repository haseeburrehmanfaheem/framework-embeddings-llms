The method preCreateUserWithThrow has the following code snippet:

This is path 1 for the API with depth 2:
public UserInfo preCreateUserWithThrow(String p1){
	Object v1 = this.mUserTypes.get(p1);
	if (v1 == 0) {
		int v2 = (this.mBaseType | this.mDefaultUserInfoPropertyFlags);
		if (v1 != 0) {
			if ((this.mBaseType & 4096) == 0) {
				boolean v5 = ;
				if (v5 != 0) {
					String v6 = this.mName;
					boolean v7 = v6.equals("android.os.usertype.full.RESTRICTED");
					if (v7 != 0) {
						boolean v4 = ;
						StringBuilder v8 = new StringBuilder();
						StringBuilder v10 = v8.append("cannot pre-create user of type ");
						StringBuilder v11 = v8.append(p1);
						String v12 = v8.toString();
						Preconditions.checkArgument(v4, v12);
						int v22 = UserManagerService.scanNextAvailableIdLocked();
						if (v22 < 0) {
							int v23 = this.mRemovingUserIds.size();
							if (v23 <= 0) {
								this.mRemovingUserIds.clear();
								Iterator v26 = this.mRecentlyRemovedIds.iterator();
								boolean v27 = v26.hasNext();
								if (v27 == 0) {
									int v28 = UserManagerService.scanNextAvailableIdLocked();
									UserManager.invalidateStaticUserProperties();
									if ( < 0) {
										int v21 = ;
										StringBuilder v32 = new StringBuilder();
										StringBuilder v34 = v32.append("createUser-");
										StringBuilder v35 = v32.append();
										String v36 = v32.toString();
										TimingsTraceAndSlog.traceBegin(v36);
										long v41 = UserManagerService.logUserJourneyBegin(4, v21, p2, p3);
										long v40 = v41;
										Object v43 = this.mUserTypes.get(p2);
										if (v43 != 0) {
											String v44 = p2.intern();
											int v45 = v43.getDefaultUserInfoFlags();
											boolean v46 = UserManagerService.checkUserTypeConsistency((p3 | v45));
											if (v46 != 0) {
												if (((p3 | v45) & 2048) == 0) {
													boolean v47 = v43.isEnabled();
													if (v47 != 0) {
														StringBuilder v48 = new StringBuilder();
														StringBuilder v50 = v48.append("Cannot add a user of disabled type ");
														StringBuilder v51 = v48.append(v44);
														StringBuilder v52 = v48.append(".");
														String v53 = v48.toString();
														UserManagerService.throwCheckedUserOperationException(v53, 6);
														if (this.mForceEphemeralUsers == 0) {
															if (p5 != 0) {
																if (p4 >= 0) {
																	boolean v55 = UserManagerService.isUserTypeEligibleForPreCreation(v43);
																	if (v55 == 0) {
																		UserInfo v56 = UserManagerService.convertPreCreatedUserIfPossible(v44, , p1, p7);
																		if (v56 == 0) {
																			UserInfo v42 = v56;
																			if (v42 == 0) {
																				if ( == 0) {
																					FrameworkStatsLog.write(265, v40, v21, 3, );
																					v30.traceEnd();
																					UserInfo v20 = v42;
																					return v20;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public UserInfo preCreateUserWithThrow(String p1){
	Object v1 = this.mUserTypes.get(p1);
	if (v1 == 0) {
		int v2 = (this.mBaseType | this.mDefaultUserInfoPropertyFlags);
		if (v1 != 0) {
			if ((this.mBaseType & 4096) == 0) {
				boolean v5 = ;
				if (v5 != 0) {
					String v6 = this.mName;
					boolean v7 = v6.equals("android.os.usertype.full.RESTRICTED");
					if (v7 != 0) {
						boolean v4 = ;
						StringBuilder v8 = new StringBuilder();
						StringBuilder v10 = v8.append("cannot pre-create user of type ");
						StringBuilder v11 = v8.append(p1);
						String v12 = v8.toString();
						Preconditions.checkArgument(v4, v12);
						int v22 = UserManagerService.scanNextAvailableIdLocked();
						if (v22 < 0) {
							int v23 = this.mRemovingUserIds.size();
							if (v23 <= 0) {
								this.mRemovingUserIds.clear();
								Iterator v26 = this.mRecentlyRemovedIds.iterator();
								boolean v27 = v26.hasNext();
								if (v27 == 0) {
									int v28 = UserManagerService.scanNextAvailableIdLocked();
									UserManager.invalidateStaticUserProperties();
									if ( < 0) {
										int v21 = ;
										StringBuilder v32 = new StringBuilder();
										StringBuilder v34 = v32.append("createUser-");
										StringBuilder v35 = v32.append();
										String v36 = v32.toString();
										TimingsTraceAndSlog.traceBegin(v36);
										long v41 = UserManagerService.logUserJourneyBegin(4, v21, p2, p3);
										long v40 = v41;
										Object v43 = this.mUserTypes.get(p2);
										if (v43 != 0) {
											String v44 = p2.intern();
											int v45 = v43.getDefaultUserInfoFlags();
											boolean v46 = UserManagerService.checkUserTypeConsistency((p3 | v45));
											if (v46 != 0) {
												if (((p3 | v45) & 2048) == 0) {
													boolean v47 = v43.isEnabled();
													if (v47 != 0) {
														StringBuilder v48 = new StringBuilder();
														StringBuilder v50 = v48.append("Cannot add a user of disabled type ");
														StringBuilder v51 = v48.append(v44);
														StringBuilder v52 = v48.append(".");
														String v53 = v48.toString();
														UserManagerService.throwCheckedUserOperationException(v53, 6);
														if (this.mForceEphemeralUsers == 0) {
															if (p5 != 0) {
																if (p4 >= 0) {
																	boolean v55 = UserManagerService.isUserTypeEligibleForPreCreation(v43);
																	if (v55 == 0) {
																		UserInfo v56 = UserManagerService.convertPreCreatedUserIfPossible(v44, , p1, p7);
																		if (v56 == 0) {
																			UserInfo v42 = v56;
																			if (v42 == 0) {
																				if ( == 0) {
																					FrameworkStatsLog.write(265, v40, v21, 3, );
																					v30.traceEnd();
																					UserInfo v20 = v42;
																					return v20;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public UserInfo preCreateUserWithThrow(String p1){
	Object v1 = this.mUserTypes.get(p1);
	if (v1 == 0) {
		int v2 = (this.mBaseType | this.mDefaultUserInfoPropertyFlags);
		if (v1 != 0) {
			if ((this.mBaseType & 4096) == 0) {
				boolean v5 = ;
				if (v5 != 0) {
					String v6 = this.mName;
					boolean v7 = v6.equals("android.os.usertype.full.RESTRICTED");
					if (v7 != 0) {
						boolean v4 = ;
						StringBuilder v8 = new StringBuilder();
						StringBuilder v10 = v8.append("cannot pre-create user of type ");
						StringBuilder v11 = v8.append(p1);
						String v12 = v8.toString();
						Preconditions.checkArgument(v4, v12);
						int v22 = UserManagerService.scanNextAvailableIdLocked();
						if (v22 < 0) {
							int v23 = this.mRemovingUserIds.size();
							if (v23 <= 0) {
								this.mRemovingUserIds.clear();
								Iterator v26 = this.mRecentlyRemovedIds.iterator();
								boolean v27 = v26.hasNext();
								if (v27 == 0) {
									int v28 = UserManagerService.scanNextAvailableIdLocked();
									UserManager.invalidateStaticUserProperties();
									if ( < 0) {
										int v21 = ;
										StringBuilder v32 = new StringBuilder();
										StringBuilder v34 = v32.append("createUser-");
										StringBuilder v35 = v32.append();
										String v36 = v32.toString();
										TimingsTraceAndSlog.traceBegin(v36);
										long v41 = UserManagerService.logUserJourneyBegin(4, v21, p2, p3);
										long v40 = v41;
										Object v43 = this.mUserTypes.get(p2);
										if (v43 != 0) {
											String v44 = p2.intern();
											int v45 = v43.getDefaultUserInfoFlags();
											boolean v46 = UserManagerService.checkUserTypeConsistency((p3 | v45));
											if (v46 != 0) {
												if (((p3 | v45) & 2048) == 0) {
													boolean v47 = v43.isEnabled();
													if (v47 != 0) {
														StringBuilder v48 = new StringBuilder();
														StringBuilder v50 = v48.append("Cannot add a user of disabled type ");
														StringBuilder v51 = v48.append(v44);
														StringBuilder v52 = v48.append(".");
														String v53 = v48.toString();
														UserManagerService.throwCheckedUserOperationException(v53, 6);
														if (this.mForceEphemeralUsers == 0) {
															if (p5 != 0) {
																if (p4 >= 0) {
																	boolean v55 = UserManagerService.isUserTypeEligibleForPreCreation(v43);
																	if (v55 == 0) {
																		UserInfo v56 = UserManagerService.convertPreCreatedUserIfPossible(v44, , p1, p7);
																		if (v56 == 0) {
																			UserInfo v42 = v56;
																			if (v42 == 0) {
																				if ( == 0) {
																					FrameworkStatsLog.write(265, v40, v21, 3, );
																					v30.traceEnd();
																					UserInfo v20 = v42;
																					return v20;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v1 = this.mUserTypes.get(p1);\nint v2 = (this.mBaseType | this.mDefaultUserInfoPropertyFlags);\nString v6 = this.mName;\nboolean v7 = v6.equals("android.os.usertype.full.RESTRICTED");\nStringBuilder v8 = new StringBuilder();\nStringBuilder v10 = v8.append("cannot pre-create user of type ");\nStringBuilder v11 = v8.append(p1);\nString v12 = v8.toString();\nPreconditions.checkArgument(v4, v12);', 'int v22 = UserManagerService.scanNextAvailableIdLocked();\nthis.mRemovingUserIds.clear();\nIterator v26 = this.mRecentlyRemovedIds.iterator();\nboolean v27 = v26.hasNext();\nif (v27 == 0) {', 'int v28 = UserManagerService.scanNextAvailableIdLocked();\nUserManager.invalidateStaticUserProperties();\nlong v41 = UserManagerService.logUserJourneyBegin(4, v21, p2, p3);\nlong v40 = v41;', 'Object v43 = this.mUserTypes.get(p2);\nString v44 = p2.intern();\nint v45 = v43.getDefaultUserInfoFlags();\nboolean v46 = UserManagerService.checkUserTypeConsistency((p3 | v45));', 'StringBuilder v48 = new StringBuilder();\nStringBuilder v50 = v48.append("Cannot add a user of disabled type ");\nStringBuilder v51 = v48.append(v44);\nStringBuilder v52 = v48.append(".");\nString v53 = v48.toString();\nUserManagerService.throwCheckedUserOperationException(v53, 6);', 'boolean v55 = UserManagerService.isUserTypeEligibleForPreCreation(v43);\nUserInfo v56 = UserManagerService.convertPreCreatedUserIfPossible(v44, , p1, p7);\nif (v56 == 0) {\nUserInfo v42 = v56;\nif (v42 == 0) {', 'FrameworkStatsLog.write(265, v40, v21, 3, );\nv30.traceEnd();\nUserInfo v20 = v42;\nreturn v20;']

The method preCreateUserWithThrow has the following similar APIs:

- API Name: createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo; with Similarity Score: 0.9730060696601868
  - Access Control Level: NONE and the following code:
Object v25 = this.mUserTypes.get(p2);
String v26 = p2.intern();
int v27 = v25.getDefaultUserInfoFlags();
boolean v28 = UserManagerService.checkUserTypeConsistency((p3 | v27));

- API Name: createProfileForUserEvenWhenDisallowedWithThrow(Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)Landroid/content/pm/UserInfo; with Similarity Score: 0.9630390405654907
  - Access Control Level: NONE and the following code:
StringBuilder v30 = new StringBuilder();
StringBuilder v32 = v30.append("Cannot add a user of disabled type ");
StringBuilder v33 = v30.append(v26);
StringBuilder v34 = v30.append(".");
String v35 = v30.toString();
UserManagerService.throwCheckedUserOperationException(v35, 6);

