The method markGuestForDeletion has the following code snippet:

This is path 1 for the API with depth 2:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v6 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	if (v6 != 0) {
		Bundle v7 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
		boolean v8 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v7);
		Bundle v5 = ;
		Bundle v10 = new Bundle(v5);
		if (v5 == 0) {
			Bundle v9 = v10;
			Bundle v3 = v9;
			boolean v12 = v3.getBoolean("no_remove_user", 0);
			if (v12 == 0) {
				long v13 = Binder.clearCallingIdentity();
				Object v14 = this.mUsers.get(p1);
				if (p1 == 0) {
					if (v14 == 0) {
						boolean v15 = this.mRemovingUserIds.get(p1);
						if (v15 == 0) {
							boolean v16 = UserManagerService$UserData.info.isGuest();
							if (v16 != 0) {
								UserInfo.guestToRemove = 1;
								UserInfo.flags = (UserInfo.flags | 64);
								p0.writeUserLP(v14);
								Binder.restoreCallingIdentity(v13);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v6 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	if (v6 != 0) {
		Bundle v7 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
		boolean v8 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v7);
		Bundle v5 = ;
		Bundle v10 = new Bundle();
		if (v5 == 0) {
			Bundle v9 = v10;
			Bundle v3 = v9;
			boolean v12 = v3.getBoolean("no_remove_user", 0);
			if (v12 == 0) {
				long v13 = Binder.clearCallingIdentity();
				Object v14 = this.mUsers.get(p1);
				if (p1 == 0) {
					if (v14 == 0) {
						boolean v15 = this.mRemovingUserIds.get(p1);
						if (v15 == 0) {
							boolean v16 = UserManagerService$UserData.info.isGuest();
							if (v16 != 0) {
								UserInfo.guestToRemove = 1;
								UserInfo.flags = (UserInfo.flags | 64);
								p0.writeUserLP(v14);
								Binder.restoreCallingIdentity(v13);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean markGuestForDeletion(int p1){
	int v2 = UserHandle.getCallingUserId();
	Bundle v6 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	if (v6 != 0) {
		Bundle v5 = ;
		Bundle v8 = new Bundle(v5);
		if (v5 == 0) {
			Bundle v7 = v8;
			Bundle v3 = v7;
			boolean v10 = v3.getBoolean("no_remove_user", 0);
			if (v10 == 0) {
				long v11 = Binder.clearCallingIdentity();
				Object v12 = this.mUsers.get(p1);
				if (p1 == 0) {
					if (v12 == 0) {
						boolean v13 = this.mRemovingUserIds.get(p1);
						if (v13 == 0) {
							boolean v14 = UserManagerService$UserData.info.isGuest();
							if (v14 != 0) {
								UserInfo.guestToRemove = 1;
								UserInfo.flags = (UserInfo.flags | 64);
								p0.writeUserLP(v12);
								Binder.restoreCallingIdentity(v11);
								return 1;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Bundle v6 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);\nboolean v8 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v7);\nboolean v12 = v3.getBoolean("no_remove_user", 0);\nUserInfo.guestToRemove = 1;\nUserInfo.flags = (UserInfo.flags | 64);']

The method markGuestForDeletion has the following similar APIs:

- API Name: setUserRestriction(Ljava/lang/String;ZI)V with Similarity Score: 0.8499943017959595
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v56 = BundleUtils.clone(v51);
UserRestrictionsUtils.merge(v56, v52);
Bundle v58 = v53.mergeAll();
UserRestrictionsUtils.merge(v56, v58);
this.mUserRestrictions.put(p2, v49);

- API Name: setUserRestriction(Ljava/lang/String;ZI)V with Similarity Score: 0.8324339389801025
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v25 = this.mBaseUserRestrictions.getRestrictions(p3);
Bundle v26 = BundleUtils.clone(v25);
v26.putBoolean(p1, p2);
Object v30 = this.mUserRestrictions.get(p2);
this.mUserRestrictions.put(p2, p1);

