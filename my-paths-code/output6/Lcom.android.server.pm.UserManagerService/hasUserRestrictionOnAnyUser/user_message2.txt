The method hasUserRestrictionOnAnyUser has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v2 = this.USER_RESTRICTIONS.contains(p1);
	if (v2 != 0) {
		int v3 = Binder.getCallingUid();
		IPackageManager v5 = ActivityThread.getPackageManager();
		IPackageManager v4 = v5;
		String v6 = v4.getPackagesForUid(v3);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v17 == 0) {
							if ( != 0) {
								IPackageManager v18 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v19 = UserHandle.getUserId(v3);
									ApplicationInfo v20 = v18.getApplicationInfo([], 794624, v19);
									if (v20 == 0) {
										boolean v21 = v20.isSystemApp();
										if (v21 == 0) {
											boolean v16 = 1;
											if (v16 == 0) {
												boolean v1 = 0;
												if (v1 != 0) {
													List v27 = UserManagerService.getUsersInternal(1, p1, 1);
													List v25 = v27;
													List v24 = v25;
													int v28 = v24.size();
													if ( >= v28) {
														Object v29 = v24.get();
														Object v32 = this.mUserRestrictions.get(p1);
														Bundle v31 = v32;
														if (v31 != 0) {
															Bundle v34 = this.mBaseUserRestrictions.getRestrictions(p1);
															Bundle v35 = UserRestrictionsUtils.nonNull(v34);
															Bundle v36 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
															RestrictionsSet v37 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
															boolean v38 = BundleUtils.isEmpty(v36);
															if (v38 == 0) {
																boolean v39 = v37.isEmpty();
																if (v39 == 0) {
																	Bundle v40 = BundleUtils.clone(v35);
																	UserRestrictionsUtils.merge(v40, v36);
																	Bundle v42 = v37.mergeAll();
																	UserRestrictionsUtils.merge(v40, v42);
																	Bundle v33 = v40;
																	Object v45 = this.mUserRestrictions.get(p1);
																	boolean v46 = UserRestrictionsUtils.areEqual(v45, v33);
																	if ((v46 ^ 1) != 0) {
																		boolean v47 = BundleUtils.isEmpty(v33);
																		if (v47 != 0) {
																			this.mUserRestrictions.put(p1, v33);
																			boolean v44 = 1;
																			Bundle v30 = ;
																			if (v30 == 0) {
																				boolean v49 = v30.getBoolean(p1);
																				if (v49 == 0) {
																					return 1;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v2 = this.USER_RESTRICTIONS.contains(p1);
	if (v2 != 0) {
		int v3 = Binder.getCallingUid();
		IPackageManager v5 = ActivityThread.getPackageManager();
		IPackageManager v4 = v5;
		String v6 = v4.getPackagesForUid(v3);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v16 == 0) {
							if ( != 0) {
								IPackageManager v17 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v18 = UserHandle.getUserId(v3);
									ApplicationInfo v19 = v17.getApplicationInfo([], 794624, v18);
									if (v19 == 0) {
										boolean v20 = v19.isSystemApp();
										if (v20 == 0) {
											boolean v15 = 1;
											if (v15 == 0) {
												boolean v1 = 0;
												if (v1 != 0) {
													List v26 = UserManagerService.getUsersInternal(1, p1, 1);
													List v24 = v26;
													List v23 = v24;
													int v27 = v23.size();
													if ( >= v27) {
														Object v28 = v23.get();
														Object v31 = this.mUserRestrictions.get(p1);
														Bundle v30 = v31;
														if (v30 != 0) {
															Bundle v33 = this.mBaseUserRestrictions.getRestrictions(p1);
															Bundle v34 = UserRestrictionsUtils.nonNull(v33);
															Bundle v35 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
															RestrictionsSet v36 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
															boolean v37 = BundleUtils.isEmpty(v35);
															if (v37 == 0) {
																boolean v38 = v36.isEmpty();
																if (v38 == 0) {
																	Bundle v39 = BundleUtils.clone(v34);
																	UserRestrictionsUtils.merge(v39, v35);
																	Bundle v41 = v36.mergeAll();
																	UserRestrictionsUtils.merge(v39, v41);
																	Bundle v32 = v39;
																	Object v44 = this.mUserRestrictions.get(p1);
																	boolean v45 = UserRestrictionsUtils.areEqual(v44, v32);
																	if ((v45 ^ 1) != 0) {
																		boolean v46 = BundleUtils.isEmpty(v32);
																		if (v46 != 0) {
																			this.mUserRestrictions.put(p1, v32);
																			boolean v43 = 1;
																			Bundle v29 = ;
																			if (v29 == 0) {
																				boolean v48 = v29.getBoolean(p1);
																				if (v48 == 0) {
																					return 1;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean hasUserRestrictionOnAnyUser(String p1){
	boolean v2 = this.USER_RESTRICTIONS.contains(p1);
	if (v2 != 0) {
		int v3 = Binder.getCallingUid();
		IPackageManager v5 = ActivityThread.getPackageManager();
		IPackageManager v4 = v5;
		String v6 = v4.getPackagesForUid(v3);
		if ( == 0) {
			if (.length <= 0) {
				if (.length <= 1) {
					if (p1 == 0) {
						if (v17 == 0) {
							if ( != 0) {
								IPackageManager v18 = AppGlobals.getPackageManager();
								if ( >= .length) {
									int v19 = UserHandle.getUserId(v3);
									ApplicationInfo v20 = v18.getApplicationInfo([], 794624, v19);
									if (v20 == 0) {
										boolean v21 = v20.isSystemApp();
										if (v21 == 0) {
											boolean v16 = 1;
											if (v16 == 0) {
												boolean v1 = 0;
												if (v1 != 0) {
													List v27 = UserManagerService.getUsersInternal(1, p1, 1);
													List v25 = v27;
													List v24 = v25;
													int v28 = v24.size();
													if ( >= v28) {
														Object v29 = v24.get();
														Object v32 = this.mUserRestrictions.get(p1);
														Bundle v31 = v32;
														if (v31 != 0) {
															Bundle v34 = this.mBaseUserRestrictions.getRestrictions(p1);
															Bundle v35 = UserRestrictionsUtils.nonNull(v34);
															Bundle v36 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();
															RestrictionsSet v37 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);
															boolean v38 = BundleUtils.isEmpty(v36);
															if (v38 == 0) {
																boolean v39 = v37.isEmpty();
																if (v39 == 0) {
																	Bundle v40 = BundleUtils.clone(v35);
																	UserRestrictionsUtils.merge(v40, v36);
																	Bundle v42 = v37.mergeAll();
																	UserRestrictionsUtils.merge(v40, v42);
																	Bundle v33 = v40;
																	Object v45 = this.mUserRestrictions.get(p1);
																	boolean v46 = UserRestrictionsUtils.areEqual(v45, v33);
																	if ((v46 ^ 1) != 0) {
																		boolean v47 = BundleUtils.isEmpty(v33);
																		if (v47 != 0) {
																			this.mUserRestrictions.delete(p1);
																			boolean v44 = 1;
																			Bundle v30 = ;
																			if (v30 == 0) {
																				boolean v49 = v30.getBoolean(p1);
																				if (v49 == 0) {
																					return 1;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v2 = this.USER_RESTRICTIONS.contains(p1);\nif (v2 != 0) {\nint v3 = Binder.getCallingUid();\nIPackageManager v5 = ActivityThread.getPackageManager();\nString v6 = v4.getPackagesForUid(v3);\nBundle v31 = this.mUserRestrictions.get(p1);\nif (v31 != 0) {\nBundle v33 = this.mBaseUserRestrictions.getRestrictions(p1);\nBundle v35 = this.mDevicePolicyGlobalUserRestrictions.mergeAll();\nRestrictionsSet v37 = UserManagerService.getDevicePolicyLocalRestrictionsForTargetUserLR(p1);\nif ((v46 ^ 1) != 0) {\nthis.mUserRestrictions.put(p1, v33);', 'List v27 = UserManagerService.getUsersInternal(1, p1, 1);\nObject v29 = v24.get();\nBundle v31 = this.mUserRestrictions.get(p1);\nif (v31 != 0) {\nBundle v33 = this.mBaseUserRestrictions.getRestrictions(p1);', 'int v3 = Binder.getCallingUid();\nIPackageManager v5 = ActivityThread.getPackageManager();\nString v6 = v4.getPackagesForUid(v3);\nApplicationInfo v20 = v18.getApplicationInfo([], 794624, v19);']

The method hasUserRestrictionOnAnyUser has the following similar APIs:

- API Name: hasUserRestriction(Ljava/lang/String;I)Z with Similarity Score: 0.8958089351654053
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = Binder.getCallingUid();
IPackageManager v6 = AppGlobals.getPackageManager();
String v7 = v6.getPackagesForUid(v5);

- API Name: getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List; with Similarity Score: 0.8874971866607666
  - Access Control Level: SYS_OR_SIG and the following code:
Object v25 = this.mUserRestrictions.get(p2);
Bundle v24 = v25;
boolean v26 = v24.getBoolean(p1, 0);

