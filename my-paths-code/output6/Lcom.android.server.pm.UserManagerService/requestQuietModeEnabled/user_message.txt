This is path 1 for the API with depth 2:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if ( == 0) {
						if ( != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								if (v8 == 0) {
									Object v10 = this.sLocalServiceObjects.get(ShortcutServiceInterna.class);
									Object v9 = v10;
									if (v9 == 0) {
										boolean v11 = v9.isForegroundDefaultLauncher(p1, v2);
										if (v11 == 0) {
											if ( == 0) {
												if (this.mPmInternal != 0) {
													Object v14 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
													Object v13 = v14;
													this.mPmInternal = v13;
													PackageManagerInternal v12 = this.mPmInternal;
													ComponentName v15 = v12.getSystemUiServiceComponent();
													String v16 = v15.getPackageName();
													boolean v17 = p1.equals(v16);
													if (v17 != 0) {
														long v18 = Binder.clearCallingIdentity();
														if (p2 == 0) {
															Object v21 = this.mUsers.get(p1);
															if (v21 == 0) {
																if (UserInfo.partial == 0) {
																	boolean v22 = this.mRemovingUserIds.get(p1);
																	if (v22 != 0) {
																		UserInfo v20 = 0;
																		UserInfo v30 = UserManagerService.getUserInfoLU(p1);
																		if (v30 != 0) {
																			if (UserInfo.profileGroupId == p1) {
																				if (UserInfo.profileGroupId != -10000) {
																					UserInfo v31 = UserManagerService.getUserInfoLU(UserInfo.profileGroupId);
																					UserInfo v29 = v31;
																					if (v20 == 0) {
																						boolean v33 = UserManager.isUserTypeManagedProfile(this.userType);
																						boolean v32 = v33;
																						if (v32 == 0) {
																							if ((this.flags & 128) != 128) {
																								boolean v34 = ;
																								if (v34 != 1) {
																									UserInfo.flags = (UserInfo.flags ^ 128);
																									Object v36 = this.mUsers.get(UserInfo.id);
																									if (v36 == 0) {
																										if (UserInfo.partial == 0) {
																											boolean v37 = this.mRemovingUserIds.get(UserInfo.id);
																											if (v37 != 0) {
																												UserManagerService$UserData v35 = 0;
																												AtomicFile v39 = new AtomicFile(v40);
																												File v40 = new File(this.mUsersDir,v45);
																												StringBuilder v41 = new StringBuilder();
																												StringBuilder v43 = v41.append(UserInfo.id);
																												StringBuilder v44 = v41.append(".xml");
																												String v45 = v41.toString();
																												FileOutputStream v48 = v39.startWrite();
																												UserManagerService.writeUserLP(v35, v48);
																												v39.finishWrite(v48);
																												if (1 == 0) {
																													IActivityManager v51 = ActivityManager.getService();
																													int v52 = v51.stopUser(p3, 1, 0);
																													Object v54 = this.sLocalServiceObjects.get(ActivityManagerInterna.class);
																													Object v53 = v54;
																													v53.killForegroundAppsForUser(p3);
																													Boolean v58 = Boolean.valueOf(p2);
																													UserManagerService$UserData v60 = UserManagerService.getUserDataLU(p1);
																													if (v60 != 0) {
																														long v61 = System.currentTimeMillis();
																														long v62 = v60.getLastRequestQuietModeEnabledMillis();
																														if ((v62 < 0) == 0) {
																															long v63 = v60.getLastRequestQuietModeEnabledMillis();
																															DevicePolicyEventLogger v64 = DevicePolicyEventLogger.createEvent(55);
																															String v65 = new String(1);
																															DevicePolicyEventLogger v66 = v64.setStrings(v65);
																															DevicePolicyEventLogger v67 = v66.setBoolean(p2);
																															DevicePolicyEventLogger v68 = v67.setTimePeriod((v61 - ));
																															v68.write();
																															v60.setLastRequestQuietModeEnabledMillis(v61);
																															UserHandle v72 = UserHandle.of(this.id);
																															UserHandle v71 = v72;
																															UserHandle v74 = UserHandle.of(this.id);
																															UserHandle v73 = v74;
																															Intent v76 = new Intent();
																															if (p2 == 0) {
																																Intent v78 = v76.setAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
																																Intent v79 = v76.putExtra("android.intent.extra.QUIET_MODE", p2);
																																Intent v80 = v76.putExtra("android.intent.extra.USER", v71);
																																int v81 = v71.getIdentifier();
																																Intent v82 = v76.putExtra("android.intent.extra.user_handle", v81);
																																DevicePolicyManagerInternal v83 = UserManagerService.getDevicePolicyManagerInternal();
																																v83.broadcastIntentToManifestReceivers(v76, v73, 1);
																																Intent v85 = v76.addFlags(1073741824);
																																this.mContext.sendBroadcastAsUser(v76, v73);
																																Binder.restoreCallingIdentity(v18);
																																return 1;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if ( == 0) {
						if ( != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								if (v8 == 0) {
									Object v10 = this.sLocalServiceObjects.get(ShortcutServiceInterna.class);
									Object v9 = v10;
									if (v9 == 0) {
										boolean v11 = v9.isForegroundDefaultLauncher(p1, v2);
										if (v11 == 0) {
											if ( == 0) {
												if (this.mPmInternal != 0) {
													Object v14 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
													Object v13 = v14;
													this.mPmInternal = v13;
													PackageManagerInternal v12 = this.mPmInternal;
													ComponentName v15 = v12.getSystemUiServiceComponent();
													String v16 = v15.getPackageName();
													boolean v17 = p1.equals(v16);
													if (v17 != 0) {
														long v18 = Binder.clearCallingIdentity();
														if (p2 == 0) {
															Object v21 = this.mUsers.get(p1);
															if (v21 == 0) {
																if (UserInfo.partial == 0) {
																	boolean v22 = this.mRemovingUserIds.get(p1);
																	if (v22 != 0) {
																		UserInfo v20 = 0;
																		UserInfo v30 = UserManagerService.getUserInfoLU(p1);
																		if (v30 != 0) {
																			if (UserInfo.profileGroupId == p1) {
																				if (UserInfo.profileGroupId != -10000) {
																					UserInfo v31 = UserManagerService.getUserInfoLU(UserInfo.profileGroupId);
																					UserInfo v29 = v31;
																					if (v20 == 0) {
																						boolean v33 = UserManager.isUserTypeManagedProfile(this.userType);
																						boolean v32 = v33;
																						if (v32 == 0) {
																							if ((this.flags & 128) != 128) {
																								boolean v34 = ;
																								if (v34 != 1) {
																									UserInfo.flags = (UserInfo.flags ^ 128);
																									Object v36 = this.mUsers.get(UserInfo.id);
																									if (v36 == 0) {
																										if (UserInfo.partial == 0) {
																											boolean v37 = this.mRemovingUserIds.get(UserInfo.id);
																											if (v37 != 0) {
																												UserManagerService$UserData v35 = v36;
																												AtomicFile v39 = new AtomicFile(v40);
																												File v40 = new File(this.mUsersDir,v45);
																												StringBuilder v41 = new StringBuilder();
																												StringBuilder v43 = v41.append(UserInfo.id);
																												StringBuilder v44 = v41.append(".xml");
																												String v45 = v41.toString();
																												FileOutputStream v48 = v39.startWrite();
																												UserManagerService.writeUserLP(v35, v48);
																												v39.finishWrite(v48);
																												if (1 == 0) {
																													IActivityManager v51 = ActivityManager.getService();
																													int v52 = v51.stopUser(p3, 1, 0);
																													Object v54 = this.sLocalServiceObjects.get(ActivityManagerInterna.class);
																													Object v53 = v54;
																													v53.killForegroundAppsForUser(p3);
																													Boolean v58 = Boolean.valueOf(p2);
																													UserManagerService$UserData v60 = UserManagerService.getUserDataLU(p1);
																													if (v60 != 0) {
																														long v61 = System.currentTimeMillis();
																														long v62 = v60.getLastRequestQuietModeEnabledMillis();
																														if ((v62 < 0) == 0) {
																															long v63 = v60.getLastRequestQuietModeEnabledMillis();
																															DevicePolicyEventLogger v64 = DevicePolicyEventLogger.createEvent(55);
																															String v65 = new String(1);
																															DevicePolicyEventLogger v66 = v64.setStrings(v65);
																															DevicePolicyEventLogger v67 = v66.setBoolean(p2);
																															DevicePolicyEventLogger v68 = v67.setTimePeriod((v61 - ));
																															v68.write();
																															v60.setLastRequestQuietModeEnabledMillis(v61);
																															UserHandle v72 = UserHandle.of(this.id);
																															UserHandle v71 = v72;
																															UserHandle v74 = UserHandle.of(this.id);
																															UserHandle v73 = v74;
																															Intent v76 = new Intent();
																															if (p2 == 0) {
																																Intent v78 = v76.setAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
																																Intent v79 = v76.putExtra("android.intent.extra.QUIET_MODE", p2);
																																Intent v80 = v76.putExtra("android.intent.extra.USER", v71);
																																int v81 = v71.getIdentifier();
																																Intent v82 = v76.putExtra("android.intent.extra.user_handle", v81);
																																DevicePolicyManagerInternal v83 = UserManagerService.getDevicePolicyManagerInternal();
																																v83.broadcastIntentToManifestReceivers(v76, v73, 1);
																																Intent v85 = v76.addFlags(1073741824);
																																this.mContext.sendBroadcastAsUser(v76, v73);
																																Binder.restoreCallingIdentity(v18);
																																return 1;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	if (p2 == 0) {
		if (p4 != 0) {
			if ((p5 & 2) == 0) {
				if ((p5 & 1) == 0) {
					if ( == 0) {
						if ( != 0) {
							int v2 = Binder.getCallingUid();
							if (p4 == 0) {
								if (v8 == 0) {
									if ( == 0) {
										if (this.mPmInternal != 0) {
											Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
											Object v10 = v11;
											this.mPmInternal = v10;
											PackageManagerInternal v9 = this.mPmInternal;
											ComponentName v12 = v9.getSystemUiServiceComponent();
											String v13 = v12.getPackageName();
											boolean v14 = p1.equals(v13);
											if (v14 != 0) {
												long v15 = Binder.clearCallingIdentity();
												if (p2 == 0) {
													Object v18 = this.mUsers.get(p1);
													if (v18 == 0) {
														if (UserInfo.partial == 0) {
															boolean v19 = this.mRemovingUserIds.get(p1);
															if (v19 != 0) {
																UserInfo v17 = 0;
																UserInfo v27 = UserManagerService.getUserInfoLU(p1);
																if (v27 != 0) {
																	if (UserInfo.profileGroupId == p1) {
																		if (UserInfo.profileGroupId != -10000) {
																			UserInfo v28 = UserManagerService.getUserInfoLU(UserInfo.profileGroupId);
																			UserInfo v26 = v28;
																			if (v17 == 0) {
																				boolean v30 = UserManager.isUserTypeManagedProfile(this.userType);
																				boolean v29 = v30;
																				if (v29 == 0) {
																					if ((this.flags & 128) != 128) {
																						boolean v31 = ;
																						if (v31 != 1) {
																							UserInfo.flags = (UserInfo.flags ^ 128);
																							Object v33 = this.mUsers.get(UserInfo.id);
																							if (v33 == 0) {
																								if (UserInfo.partial == 0) {
																									boolean v34 = this.mRemovingUserIds.get(UserInfo.id);
																									if (v34 != 0) {
																										UserManagerService$UserData v32 = 0;
																										AtomicFile v36 = new AtomicFile(v37);
																										File v37 = new File(this.mUsersDir,v42);
																										StringBuilder v38 = new StringBuilder();
																										StringBuilder v40 = v38.append(UserInfo.id);
																										StringBuilder v41 = v38.append(".xml");
																										String v42 = v38.toString();
																										FileOutputStream v45 = v36.startWrite();
																										UserManagerService.writeUserLP(v32, v45);
																										v36.finishWrite(v45);
																										if (1 == 0) {
																											IActivityManager v48 = ActivityManager.getService();
																											int v49 = v48.stopUser(p3, 1, 0);
																											Object v51 = this.sLocalServiceObjects.get(ActivityManagerInterna.class);
																											Object v50 = v51;
																											v50.killForegroundAppsForUser(p3);
																											Boolean v55 = Boolean.valueOf(p2);
																											UserManagerService$UserData v57 = UserManagerService.getUserDataLU(p1);
																											if (v57 != 0) {
																												long v58 = System.currentTimeMillis();
																												long v59 = v57.getLastRequestQuietModeEnabledMillis();
																												if ((v59 < 0) == 0) {
																													long v60 = v57.getLastRequestQuietModeEnabledMillis();
																													DevicePolicyEventLogger v61 = DevicePolicyEventLogger.createEvent(55);
																													String v62 = new String(1);
																													DevicePolicyEventLogger v63 = v61.setStrings(v62);
																													DevicePolicyEventLogger v64 = v63.setBoolean(p2);
																													DevicePolicyEventLogger v65 = v64.setTimePeriod((v58 - ));
																													v65.write();
																													v57.setLastRequestQuietModeEnabledMillis(v58);
																													UserHandle v69 = UserHandle.of(this.id);
																													UserHandle v68 = v69;
																													UserHandle v71 = UserHandle.of(this.id);
																													UserHandle v70 = v71;
																													Intent v73 = new Intent();
																													if (p2 == 0) {
																														Intent v75 = v73.setAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
																														Intent v76 = v73.putExtra("android.intent.extra.QUIET_MODE", p2);
																														Intent v77 = v73.putExtra("android.intent.extra.USER", v68);
																														int v78 = v68.getIdentifier();
																														Intent v79 = v73.putExtra("android.intent.extra.user_handle", v78);
																														DevicePolicyManagerInternal v80 = UserManagerService.getDevicePolicyManagerInternal();
																														v80.broadcastIntentToManifestReceivers(v73, v70, 1);
																														Intent v82 = v73.addFlags(1073741824);
																														this.mContext.sendBroadcastAsUser(v73, v70);
																														Binder.restoreCallingIdentity(v15);
																														return 1;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
