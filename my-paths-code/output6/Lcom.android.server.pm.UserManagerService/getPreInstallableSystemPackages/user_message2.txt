The method getPreInstallableSystemPackages has the following code snippet:

This is path 1 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Set v12 = v14;
												ArraySet v18 = new ArraySet();
												Object v21 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
												Object v20 = v21;
												UserSystemPackageInstaller$$ExternalSyntheticLambda0 v22 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v18);
												v20.forEachPackage(v22);
												Set v2 = v18;
												if (v2 != 0) {
													int v25 = v2.size();
													String v26 = new String(v25);
													Object v27 = v2.toArray(v26);
													return v27;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Set v12 = v14;
												ArraySet v18 = new ArraySet();
												Object v21 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
												Object v20 = v21;
												UserSystemPackageInstaller$$ExternalSyntheticLambda0 v22 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v18);
												v20.forEachPackage(v22);
												Set v2 = v18;
												if (v2 != 0) {
													int v25 = v2.size();
													String v26 = new String(v25);
													Object v27 = v2.toArray(v26);
													return v27;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Set v12 = v14;
												ArraySet v18 = new ArraySet();
												Object v21 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
												Object v20 = v21;
												UserSystemPackageInstaller$$ExternalSyntheticLambda0 v22 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v18);
												v20.forEachPackage(v22);
												Set v2 = v18;
												if (v2 != 0) {
													return 0;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();\nObject v10 = this.mUserTypes.get(p1);\nlong v13 = UserSystemPackageInstaller.getUserTypeMask(p1);\nArraySet v14 = new ArraySet(v15);\nUserSystemPackageInstaller$$ExternalSyntheticLambda0 v22 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v18);\nObject v21 = this.sLocalServiceObjects.get(PackageManagerInterna.class);\nv20.forEachPackage(v22);']

The method getPreInstallableSystemPackages has the following similar APIs:

- API Name: canAddMoreProfilesToUser(Ljava/lang/String;IZ)Z with Similarity Score: 0.7511467337608337
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mUserTypes.get(p1);
boolean v4 = this.mEnabled;
PackageManager v7 = this.mContext.getPackageManager();
boolean v8 = v7.hasSystemFeature("android.software.managed_users");
IntArray v31 = UserManagerService.getProfileIdsLU(p2, p1, 0);

- API Name: getUserRestrictionSources(Ljava/lang/String;I)Ljava/util/List; with Similarity Score: 0.7501243352890015
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v8 = this.USER_RESTRICTIONS.contains(p1);
int v9 = Binder.getCallingUid();
IPackageManager v10 = AppGlobals.getPackageManager();
String v11 = v10.getPackagesForUid(v9);
UserManager$EnforcingUser v27 = new UserManager$EnforcingUser(-10000,1);
RestrictionsSet v27 = p0.getDevicePolicyLocalRestrictionsForTargetUserLR(p2);
List v28 = v27.getEnforcingUsers(p1, this.mDeviceOwnerUserId);
boolean v29 = v3.addAll(v28);
return v3;

