This is path 1 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Set v12 = v14;
												ArraySet v18 = new ArraySet();
												Object v21 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
												Object v20 = v21;
												UserSystemPackageInstaller$$ExternalSyntheticLambda0 v22 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v18);
												v20.forEachPackage(v22);
												Set v2 = v18;
												if (v2 != 0) {
													int v25 = v2.size();
													String v26 = new String(v25);
													Object v27 = v2.toArray(v26);
													return v27;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Set v12 = v14;
												ArraySet v18 = new ArraySet();
												Object v21 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
												Object v20 = v21;
												UserSystemPackageInstaller$$ExternalSyntheticLambda0 v22 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v18);
												v20.forEachPackage(v22);
												Set v2 = v18;
												if (v2 != 0) {
													int v25 = v2.size();
													String v26 = new String(v25);
													Object v27 = v2.toArray(v26);
													return v27;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public String getPreInstallableSystemPackages(String p1){
	int v4 = SystemProperties.getInt("persist.debug.user.package_whitelist_mode", -1);
	if (v4 == -1) {
		int v5 = UserSystemPackageInstaller.getDeviceDefaultWhitelistMode();
		int v3 = v5;
		if ((v3 & 1) == 0) {
			boolean v6 = ;
			if (v6 != 0) {
				if ((v3 & 4) == 0) {
					boolean v7 = ;
					if (v7 != 0) {
						if ((v3 & 8) == 0) {
							boolean v8 = ;
							if (v8 == 0) {
								Object v10 = this.mUserTypes.get(p1);
								if (v10 == 0) {
									boolean v11 = v10.isSystem();
									if (v11 == 0) {
										boolean v9 = ;
										if (v9 == 0) {
											long v13 = UserSystemPackageInstaller.getUserTypeMask(p1);
											ArraySet v14 = new ArraySet(v15);
											int v15 = this.mWhitelistedPackagesForUserTypes.size();
											int v17 = this.mWhitelistedPackagesForUserTypes.size();
											if ( >= v17) {
												Set v12 = v14;
												ArraySet v18 = new ArraySet();
												Object v21 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
												Object v20 = v21;
												UserSystemPackageInstaller$$ExternalSyntheticLambda0 v22 = new UserSystemPackageInstaller$$ExternalSyntheticLambda0(UserSystemPackageInstaller,v12,,v18);
												v20.forEachPackage(v22);
												Set v2 = v18;
												if (v2 != 0) {
													return 0;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
