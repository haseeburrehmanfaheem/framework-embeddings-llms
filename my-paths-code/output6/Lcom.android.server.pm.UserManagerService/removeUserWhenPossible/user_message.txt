This is path 1 for the API with depth 2:
public int removeUserWhenPossible(int p1, boolean p2){
	if (p2 != 0) {
		Object v4 = this.mUsers.get(p1);
		if (v4 == 0) {
			if (UserInfo.partial == 0) {
				boolean v5 = this.mRemovingUserIds.get(p1);
				if (v5 != 0) {
					UserInfo v3 = 0;
					if (v3 == 0) {
						boolean v13 = UserManager.isUserTypeManagedProfile(this.userType);
						boolean v12 = v13;
						if (v12 == 0) {
							if ( == 0) {
								String v2 = ;
								int v14 = UserHandle.getCallingUserId();
								Bundle v18 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
								if (v18 != 0) {
									Bundle v19 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
									boolean v20 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v19);
									Bundle v17 = ;
									Bundle v22 = new Bundle(v17);
									if (v17 == 0) {
										Bundle v21 = v22;
										Bundle v15 = v21;
										boolean v24 = v15.getBoolean(v2, 0);
										if (v24 == 0) {
											return -2;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public int removeUserWhenPossible(int p1, boolean p2){
	if (p2 != 0) {
		Object v4 = this.mUsers.get(p1);
		if (v4 == 0) {
			if (UserInfo.partial == 0) {
				boolean v5 = this.mRemovingUserIds.get(p1);
				if (v5 != 0) {
					UserInfo v3 = 0;
					if (v3 == 0) {
						boolean v13 = UserManager.isUserTypeManagedProfile(this.userType);
						boolean v12 = v13;
						if (v12 == 0) {
							if ( == 0) {
								String v2 = ;
								int v14 = UserHandle.getCallingUserId();
								Bundle v18 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
								if (v18 != 0) {
									Bundle v19 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
									boolean v20 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v19);
									Bundle v17 = ;
									Bundle v22 = new Bundle(v17);
									if (v17 == 0) {
										Bundle v21 = v22;
										Bundle v15 = v21;
										boolean v24 = v15.getBoolean(v2, 0);
										if (v24 == 0) {
											return -2;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public int removeUserWhenPossible(int p1, boolean p2){
	if (p2 != 0) {
		Object v4 = this.mUsers.get(p1);
		if (v4 == 0) {
			if (UserInfo.partial == 0) {
				boolean v5 = this.mRemovingUserIds.get(p1);
				if (v5 != 0) {
					UserInfo v3 = 0;
					if (v3 == 0) {
						boolean v13 = UserManager.isUserTypeManagedProfile(this.userType);
						boolean v12 = v13;
						if (v12 == 0) {
							if ( == 0) {
								String v2 = ;
								int v14 = UserHandle.getCallingUserId();
								Bundle v18 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
								if (v18 != 0) {
									Bundle v19 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
									boolean v20 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v19);
									Bundle v17 = ;
									Bundle v22 = new Bundle();
									if (v17 == 0) {
										Bundle v21 = v22;
										Bundle v15 = v21;
										boolean v24 = v15.getBoolean(v2, 0);
										if (v24 == 0) {
											return -2;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
