This is path 1 for the API with depth 2:
public int getRemainingCreatableProfileCount(String p1, int p2){
	Object v3 = this.mUserTypes.get(p1);
	if (v3 == 0) {
		boolean v4 = this.mEnabled;
		if (v4 != 0) {
			boolean v6 = UserManager.isUserTypeManagedProfile(this.mName);
			boolean v5 = v6;
			if (v5 == 0) {
				PackageManager v7 = this.mContext.getPackageManager();
				boolean v8 = v7.hasSystemFeature("android.software.managed_users");
				if (v8 != 0) {
					Object v10 = this.mUsers.get(p2);
					if (v10 == 0) {
						if (UserInfo.partial == 0) {
							boolean v11 = this.mRemovingUserIds.get(p2);
							if (v11 != 0) {
								UserInfo v9 = 0;
								if (v9 == 0) {
									boolean v19 = UserInfo.isProfile();
									if (v19 != 0) {
										boolean v20 = UserInfo.isGuest();
										if (v20 != 0) {
											boolean v21 = UserInfo.isRestricted();
											if (v21 == 0) {
												boolean v18 = 0;
												if (v18 != 0) {
													StringBuilder v24 = new StringBuilder();
													StringBuilder v26 = v24.append("getting profiles related to user ");
													StringBuilder v27 = v24.append(p2);
													String v28 = v24.toString();
													long v30 = Binder.clearCallingIdentity();
													IntArray v31 = UserManagerService.getProfileIdsLU(p2, p1, 0);
													[I v32 = v31.toArray();
													Binder.restoreCallingIdentity(v30);
													[I v22 = v32;
													if (v22.length <= 0) {
														if (0 == 0) {
															int v35 = this.mUsers.size();
															if ( >= v35) {
																int v34 = ;
																int v36 = UserManager.getMaxSupportedUsers();
																if ((v36 - (v34 - )) > 0) {
																	if (v5 == 0) {
																		if ((v34 - ) != 1) {
																			int v38 = v3.getMaxAllowedPerParent();
																			if (Build.IS_DEBUGGABLE != 0) {
																				boolean v39 = v3.isManagedProfile();
																				if (v39 == 0) {
																					int v40 = SystemProperties.getInt("persist.sys.max_profiles", v38);
																					int v37 = v40;
																					if (v37 == -1) {
																						int v41 = Math.min(, (v37 - (v22.length - )));
																						if ( > 0) {
																							int v1 = 0;
																							return v1;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public int getRemainingCreatableProfileCount(String p1, int p2){
	Object v3 = this.mUserTypes.get(p1);
	if (v3 == 0) {
		boolean v4 = this.mEnabled;
		if (v4 != 0) {
			boolean v6 = UserManager.isUserTypeManagedProfile(this.mName);
			boolean v5 = v6;
			if (v5 == 0) {
				PackageManager v7 = this.mContext.getPackageManager();
				boolean v8 = v7.hasSystemFeature("android.software.managed_users");
				if (v8 != 0) {
					Object v10 = this.mUsers.get(p2);
					if (v10 == 0) {
						if (UserInfo.partial == 0) {
							boolean v11 = this.mRemovingUserIds.get(p2);
							if (v11 != 0) {
								UserInfo v9 = 0;
								if (v9 == 0) {
									boolean v19 = UserInfo.isProfile();
									if (v19 != 0) {
										boolean v20 = UserInfo.isGuest();
										if (v20 != 0) {
											boolean v21 = UserInfo.isRestricted();
											if (v21 == 0) {
												boolean v18 = 0;
												if (v18 != 0) {
													StringBuilder v24 = new StringBuilder();
													StringBuilder v26 = v24.append("getting profiles related to user ");
													StringBuilder v27 = v24.append(p2);
													String v28 = v24.toString();
													long v30 = Binder.clearCallingIdentity();
													IntArray v31 = UserManagerService.getProfileIdsLU(p2, p1, 0);
													[I v32 = v31.toArray();
													Binder.restoreCallingIdentity(v30);
													[I v22 = v32;
													if (v22.length <= 0) {
														if (0 == 0) {
															int v35 = this.mUsers.size();
															if ( >= v35) {
																int v34 = ;
																int v36 = UserManager.getMaxSupportedUsers();
																if ((v36 - (v34 - )) > 0) {
																	if (v5 == 0) {
																		if ((v34 - ) != 1) {
																			int v38 = v3.getMaxAllowedPerParent();
																			if (Build.IS_DEBUGGABLE != 0) {
																				boolean v39 = v3.isManagedProfile();
																				if (v39 == 0) {
																					int v37 = v38;
																					if (v37 == -1) {
																						int v40 = Math.min(, (v37 - (v22.length - )));
																						if ( > 0) {
																							int v1 = 0;
																							return v1;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
