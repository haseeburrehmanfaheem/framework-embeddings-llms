The method createProfileForUserEvenWhenDisallowedWithThrow has the following code snippet:

This is path 1 for the API with depth 2:
public UserInfo createProfileForUserEvenWhenDisallowedWithThrow(String p1, String p2, int p3, int p4, String p5){
	int v4 = UserManagerService.scanNextAvailableIdLocked();
	if (v4 < 0) {
		int v5 = this.mRemovingUserIds.size();
		if (v5 <= 0) {
			this.mRemovingUserIds.clear();
			Iterator v8 = this.mRecentlyRemovedIds.iterator();
			boolean v9 = v8.hasNext();
			if (v9 == 0) {
				int v10 = UserManagerService.scanNextAvailableIdLocked();
				UserManager.invalidateStaticUserProperties();
				if ( < 0) {
					int v3 = ;
					StringBuilder v14 = new StringBuilder();
					StringBuilder v16 = v14.append("createUser-");
					StringBuilder v17 = v14.append(p3);
					String v18 = v14.toString();
					TimingsTraceAndSlog.traceBegin(v18);
					long v23 = UserManagerService.logUserJourneyBegin(4, v3, p2, p3);
					long v22 = v23;
					Object v25 = this.mUserTypes.get(p2);
					if (v25 != 0) {
						String v26 = p2.intern();
						int v27 = v25.getDefaultUserInfoFlags();
						boolean v28 = UserManagerService.checkUserTypeConsistency((p3 | v27));
						if (v28 != 0) {
							if (((p3 | v27) & 2048) == 0) {
								boolean v29 = v25.isEnabled();
								if (v29 != 0) {
									StringBuilder v30 = new StringBuilder();
									StringBuilder v32 = v30.append("Cannot add a user of disabled type ");
									StringBuilder v33 = v30.append(v26);
									StringBuilder v34 = v30.append(".");
									String v35 = v30.toString();
									UserManagerService.throwCheckedUserOperationException(v35, 6);
									if (this.mForceEphemeralUsers == 0) {
										if (p5 != 0) {
											if (p4 >= 0) {
												boolean v37 = UserManagerService.isUserTypeEligibleForPreCreation(v25);
												if (v37 == 0) {
													UserInfo v38 = UserManagerService.convertPreCreatedUserIfPossible(v26, , p1, p7);
													if (v38 == 0) {
														UserInfo v24 = v38;
														if (v24 == 0) {
															if ( == 0) {
																FrameworkStatsLog.write(265, v22, v3, 3, );
																v12.traceEnd();
																UserInfo v2 = v24;
																return v2;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public UserInfo createProfileForUserEvenWhenDisallowedWithThrow(String p1, String p2, int p3, int p4, String p5){
	int v4 = UserManagerService.scanNextAvailableIdLocked();
	if (v4 < 0) {
		int v5 = this.mRemovingUserIds.size();
		if (v5 <= 0) {
			this.mRemovingUserIds.clear();
			Iterator v8 = this.mRecentlyRemovedIds.iterator();
			boolean v9 = v8.hasNext();
			if (v9 == 0) {
				int v10 = UserManagerService.scanNextAvailableIdLocked();
				UserManager.invalidateStaticUserProperties();
				if ( < 0) {
					int v3 = ;
					StringBuilder v14 = new StringBuilder();
					StringBuilder v16 = v14.append("createUser-");
					StringBuilder v17 = v14.append(p3);
					String v18 = v14.toString();
					TimingsTraceAndSlog.traceBegin(v18);
					long v23 = UserManagerService.logUserJourneyBegin(4, v3, p2, p3);
					long v22 = v23;
					Object v25 = this.mUserTypes.get(p2);
					if (v25 != 0) {
						String v26 = p2.intern();
						int v27 = v25.getDefaultUserInfoFlags();
						boolean v28 = UserManagerService.checkUserTypeConsistency((p3 | v27));
						if (v28 != 0) {
							if (((p3 | v27) & 2048) == 0) {
								boolean v29 = v25.isEnabled();
								if (v29 != 0) {
									StringBuilder v30 = new StringBuilder();
									StringBuilder v32 = v30.append("Cannot add a user of disabled type ");
									StringBuilder v33 = v30.append(v26);
									StringBuilder v34 = v30.append(".");
									String v35 = v30.toString();
									UserManagerService.throwCheckedUserOperationException(v35, 6);
									if (this.mForceEphemeralUsers == 0) {
										if (p5 != 0) {
											if (p4 >= 0) {
												boolean v37 = UserManagerService.isUserTypeEligibleForPreCreation(v25);
												if (v37 == 0) {
													UserInfo v38 = UserManagerService.convertPreCreatedUserIfPossible(v26, , p1, p7);
													if (v38 == 0) {
														UserInfo v24 = v38;
														if (v24 == 0) {
															if ( == 0) {
																FrameworkStatsLog.write(265, v22, v3, 3, );
																v12.traceEnd();
																UserInfo v2 = v24;
																return v2;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v25 = this.mUserTypes.get(p2);\nString v26 = p2.intern();\nint v27 = v25.getDefaultUserInfoFlags();\nboolean v28 = UserManagerService.checkUserTypeConsistency((p3 | v27));', 'StringBuilder v30 = new StringBuilder();\nStringBuilder v32 = v30.append("Cannot add a user of disabled type ");\nStringBuilder v33 = v30.append(v26);\nStringBuilder v34 = v30.append(".");\nString v35 = v30.toString();\nUserManagerService.throwCheckedUserOperationException(v35, 6);', 'boolean v37 = UserManagerService.isUserTypeEligibleForPreCreation(v25);\nif (v37 == 0) {\nUserInfo v38 = UserManagerService.convertPreCreatedUserIfPossible(v26, , p1, p7);\nreturn v2;']

The method createProfileForUserEvenWhenDisallowedWithThrow has the following similar APIs:

- API Name: preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo; with Similarity Score: 0.9730060696601868
  - Access Control Level: NONE and the following code:
Object v43 = this.mUserTypes.get(p2);
String v44 = p2.intern();
int v45 = v43.getDefaultUserInfoFlags();
boolean v46 = UserManagerService.checkUserTypeConsistency((p3 | v45));

- API Name: preCreateUserWithThrow(Ljava/lang/String;)Landroid/content/pm/UserInfo; with Similarity Score: 0.9630390405654907
  - Access Control Level: NONE and the following code:
StringBuilder v48 = new StringBuilder();
StringBuilder v50 = v48.append("Cannot add a user of disabled type ");
StringBuilder v51 = v48.append(v44);
StringBuilder v52 = v48.append(".");
String v53 = v48.toString();
UserManagerService.throwCheckedUserOperationException(v53, 6);

