This is path 1 for the API with depth 1:
public int getRemainingCreatableUserCount(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v3 = this.mEnabled;
		if (v3 != 0) {
			int v5 = this.mUsers.size();
			if ( >= v5) {
				int v4 = ;
				boolean v6 = UserManager.isUserTypeGuest(p1);
				if (v6 != 0) {
					boolean v7 = UserManager.isUserTypeDemo(p1);
					if (v7 == 0) {
						boolean v9 = UserManager.isUserTypeManagedProfile(this.mName);
						boolean v8 = v9;
						if (v8 == 0) {
							PackageManager v10 = this.mContext.getPackageManager();
							boolean v11 = v10.hasSystemFeature("android.software.managed_users");
							if (v11 != 0) {
								if ( > 0) {
									if (v4 != 1) {
										if (( & ) == 0) {
											if ( > 0) {
												int v12 = this.mMaxAllowed;
												if (v12 != -1) {
													int v13 = this.mMaxAllowed;
													int v15 = this.mUsers.size();
													if ( >= v15) {
														int v14 = ;
														int v16 = Math.min(, );
														int v17 = Math.max(0, v16);
														return v17;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 1:
public int getRemainingCreatableUserCount(String p1){
	Object v2 = this.mUserTypes.get(p1);
	if (v2 == 0) {
		boolean v3 = this.mEnabled;
		if (v3 != 0) {
			int v5 = this.mUsers.size();
			if ( >= v5) {
				int v4 = ;
				boolean v6 = UserManager.isUserTypeGuest(p1);
				if (v6 != 0) {
					boolean v7 = UserManager.isUserTypeDemo(p1);
					if (v7 == 0) {
						boolean v9 = UserManager.isUserTypeManagedProfile(this.mName);
						boolean v8 = v9;
						if (v8 == 0) {
							PackageManager v10 = this.mContext.getPackageManager();
							boolean v11 = v10.hasSystemFeature("android.software.managed_users");
							if (v11 != 0) {
								if ( > 0) {
									if (v4 != 1) {
										if (( & ) == 0) {
											if ( > 0) {
												int v12 = this.mMaxAllowed;
												if (v12 != -1) {
													int v13 = Math.min(, );
													int v14 = Math.max(0, v13);
													return v14;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
