This is path 1 for the API with depth 2:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v3 = ClipboardService.getIntendingUserId(p2, p3);
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getAppId(v4);
	int v6 = UserHandle.getUid(v3, v5);
	int v2 = v6;
	int v1 = v2;
	int v7 = UserHandle.getUserId(v1);
	boolean v10 = ClipboardService.clipboardAccessAllowed(p2, p3, p4, p5, p6, 1);
	boolean v9 = v10;
	boolean v8 = v9;
	if (v8 == 0) {
		long v13 = Binder.clearCallingIdentity();
		Context v14 = ClipboardService.getContext();
		Object v15 = v14.getSystemService(KeyguardManage.class);
		if (v15 == 0) {
			boolean v16 = v15.isDeviceLocked(p2);
			if (v16 == 0) {
				Binder.restoreCallingIdentity(v13);
				boolean v12 = ;
				boolean v11 = v12;
				if (v11 == 0) {
					Object v18 = ClipboardService.-$$Nest$fgetmLock(this.this$0);
					Binder.restoreCallingIdentity(v23);
					int v27 = UserHandle.getUserId(p2);
					ClipboardService$PerUserClipboard v28 = ClipboardService.getClipboardLocked(v27);
					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
						boolean v29 = ClipboardService$PerUserClipboard.activePermissionOwners.contains(p3);
						if (v29 != 0) {
							int v30 = ClipboardService$PerUserClipboard.primaryClip.getItemCount();
							if ( >= v30) {
								boolean v31 = ClipboardService$PerUserClipboard.activePermissionOwners.add(p3);
								Object v34 = this.mClipboards.get(p2);
								if (v34 != 0) {
									ClipboardService$PerUserClipboard v35 = new ClipboardService$PerUserClipboard(ClipboardService,p2);
									this.mClipboards.put(p2, v35);
									ClipboardService$PerUserClipboard v33 = ;
									ClipboardService$PerUserClipboard v32 = v33;
									if (v43 == 0) {
										boolean v44 = ClipboardService.isDefaultIme(p4, p2);
										if (v44 == 0) {
											if (this.mContentCaptureInternal == 0) {
												boolean v45 = this.mContentCaptureInternal.isContentCaptureServiceForUser(p3, p4);
												if (v45 == 0) {
													if (this.mAutofillInternal == 0) {
														boolean v46 = this.mAutofillInternal.isAugmentedAutofillServiceForUser(p3, p4);
														if (v46 == 0) {
															if (ClipboardService$PerUserClipboard.primaryClip != 0) {
																ClipData$Item v49 = ClipboardService$PerUserClipboard.primaryClip.getItemAt(0);
																if (v49 != 0) {
																	boolean v50 = ClipboardService.isText(ClipboardService$PerUserClipboard.primaryClip);
																	if (v50 != 0) {
																		if (ClipboardService$PerUserClipboard.mTextClassifier != 0) {
																			boolean v51 = this.mWm.isUidFocused(p4);
																			if (v51 != 0) {
																				boolean v52 = ClipboardService$PerUserClipboard.mNotifiedTextClassifierUids.get(p4);
																				if (v52 == 0) {
																					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
																						long v54 = Binder.clearCallingIdentity();
																						String v56 = DeviceConfig.getProperty("clipboard", "auto_clear_enabled");
																						if (v56 == 0) {
																							boolean v57 = Boolean.parseBoolean(v56);
																							boolean v55 = ;
																							if (v55 == 0) {
																								Integer v58 = Integer.valueOf(p3);
																								this.mClipboardClearHandler.removeEqualMessages(101, v58);
																								Integer v60 = Integer.valueOf(p3);
																								Message v61 = Message.obtain(this.mClipboardClearHandler, 101, p3, v1, v60);
																								long v63 = DeviceConfig.getLong("clipboard", "auto_clear_timeout", 3600000);
																								long v62 = v63;
																								boolean v64 = this.mClipboardClearHandler.sendMessageDelayed(v61, v62);
																								Binder.restoreCallingIdentity(v54);
																								return ClipboardService$PerUserClipboard.primaryClip;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v3 = ClipboardService.getIntendingUserId(p2, p3);
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getAppId(v4);
	int v6 = UserHandle.getUid(v3, v5);
	int v2 = v6;
	int v1 = v2;
	int v7 = UserHandle.getUserId(v1);
	boolean v10 = ClipboardService.clipboardAccessAllowed(p2, p3, p4, p5, p6, 1);
	boolean v9 = v10;
	boolean v8 = v9;
	if (v8 == 0) {
		long v13 = Binder.clearCallingIdentity();
		Context v14 = ClipboardService.getContext();
		Object v15 = v14.getSystemService(KeyguardManage.class);
		if (v15 == 0) {
			boolean v16 = v15.isDeviceLocked(p2);
			if (v16 == 0) {
				Binder.restoreCallingIdentity(v13);
				boolean v12 = ;
				boolean v11 = v12;
				if (v11 == 0) {
					Object v18 = ClipboardService.-$$Nest$fgetmLock(this.this$0);
					Binder.restoreCallingIdentity(v23);
					int v27 = UserHandle.getUserId(p2);
					ClipboardService$PerUserClipboard v28 = ClipboardService.getClipboardLocked(v27);
					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
						boolean v29 = ClipboardService$PerUserClipboard.activePermissionOwners.contains(p3);
						if (v29 != 0) {
							int v30 = ClipboardService$PerUserClipboard.primaryClip.getItemCount();
							if ( >= v30) {
								boolean v31 = ClipboardService$PerUserClipboard.activePermissionOwners.add(p3);
								Object v34 = this.mClipboards.get(p2);
								if (v34 != 0) {
									ClipboardService$PerUserClipboard v35 = new ClipboardService$PerUserClipboard(ClipboardService,p2);
									this.mClipboards.put(p2, v35);
									ClipboardService$PerUserClipboard v33 = ;
									ClipboardService$PerUserClipboard v32 = v33;
									if (v43 == 0) {
										boolean v44 = ClipboardService.isDefaultIme(p4, p2);
										if (v44 == 0) {
											if (this.mContentCaptureInternal == 0) {
												boolean v45 = this.mContentCaptureInternal.isContentCaptureServiceForUser(p3, p4);
												if (v45 == 0) {
													if (this.mAutofillInternal == 0) {
														boolean v46 = this.mAutofillInternal.isAugmentedAutofillServiceForUser(p3, p4);
														if (v46 == 0) {
															if (ClipboardService$PerUserClipboard.primaryClip != 0) {
																ClipData$Item v49 = ClipboardService$PerUserClipboard.primaryClip.getItemAt(0);
																if (v49 != 0) {
																	boolean v50 = ClipboardService.isText(ClipboardService$PerUserClipboard.primaryClip);
																	if (v50 != 0) {
																		if (ClipboardService$PerUserClipboard.mTextClassifier != 0) {
																			boolean v51 = this.mWm.isUidFocused(p4);
																			if (v51 != 0) {
																				boolean v52 = ClipboardService$PerUserClipboard.mNotifiedTextClassifierUids.get(p4);
																				if (v52 == 0) {
																					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
																						long v54 = Binder.clearCallingIdentity();
																						String v56 = DeviceConfig.getProperty("clipboard", "auto_clear_enabled");
																						if (v56 == 0) {
																							boolean v57 = Boolean.parseBoolean(v56);
																							boolean v55 = ;
																							if (v55 == 0) {
																								Integer v58 = Integer.valueOf(p3);
																								this.mClipboardClearHandler.removeEqualMessages(101, v58);
																								Integer v60 = Integer.valueOf(p3);
																								Message v61 = Message.obtain(this.mClipboardClearHandler, 101, p3, v1, v60);
																								long v63 = DeviceConfig.getLong("clipboard", "auto_clear_timeout", 3600000);
																								long v62 = v63;
																								boolean v64 = this.mClipboardClearHandler.sendMessageDelayed(v61, v62);
																								Binder.restoreCallingIdentity(v54);
																								return ClipboardService$PerUserClipboard.primaryClip;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public ClipData getPrimaryClip(String p1, String p2, int p3){
	int v3 = ClipboardService.getIntendingUserId(p2, p3);
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getAppId(v4);
	int v6 = UserHandle.getUid(v3, v5);
	int v2 = v6;
	int v1 = v2;
	int v7 = UserHandle.getUserId(v1);
	boolean v10 = ClipboardService.clipboardAccessAllowed(p2, p3, p4, p5, p6, 1);
	boolean v9 = v10;
	boolean v8 = v9;
	if (v8 == 0) {
		long v13 = Binder.clearCallingIdentity();
		Context v14 = ClipboardService.getContext();
		Object v15 = v14.getSystemService(KeyguardManage.class);
		if (v15 == 0) {
			boolean v16 = v15.isDeviceLocked(p2);
			if (v16 == 0) {
				Binder.restoreCallingIdentity(v13);
				boolean v12 = ;
				boolean v11 = v12;
				if (v11 == 0) {
					Object v18 = ClipboardService.-$$Nest$fgetmLock(this.this$0);
					Binder.restoreCallingIdentity(v23);
					int v27 = UserHandle.getUserId(p2);
					ClipboardService$PerUserClipboard v28 = ClipboardService.getClipboardLocked(v27);
					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
						boolean v29 = ClipboardService$PerUserClipboard.activePermissionOwners.contains(p3);
						if (v29 != 0) {
							int v30 = ClipboardService$PerUserClipboard.primaryClip.getItemCount();
							if ( >= v30) {
								boolean v31 = ClipboardService$PerUserClipboard.activePermissionOwners.add(p3);
								Object v34 = this.mClipboards.get(p2);
								if (v34 != 0) {
									ClipboardService$PerUserClipboard v35 = new ClipboardService$PerUserClipboard(ClipboardService,p2);
									this.mClipboards.put(p2, v35);
									ClipboardService$PerUserClipboard v33 = ;
									ClipboardService$PerUserClipboard v32 = v33;
									if (v43 == 0) {
										boolean v44 = ClipboardService.isDefaultIme(p4, p2);
										if (v44 == 0) {
											if (this.mContentCaptureInternal == 0) {
												boolean v45 = this.mContentCaptureInternal.isContentCaptureServiceForUser(p3, p4);
												if (v45 == 0) {
													if (this.mAutofillInternal == 0) {
														boolean v46 = this.mAutofillInternal.isAugmentedAutofillServiceForUser(p3, p4);
														if (v46 == 0) {
															if (ClipboardService$PerUserClipboard.primaryClip != 0) {
																ClipData$Item v49 = ClipboardService$PerUserClipboard.primaryClip.getItemAt(0);
																if (v49 != 0) {
																	boolean v50 = ClipboardService.isText(ClipboardService$PerUserClipboard.primaryClip);
																	if (v50 != 0) {
																		if (ClipboardService$PerUserClipboard.mTextClassifier != 0) {
																			boolean v51 = this.mWm.isUidFocused(p4);
																			if (v51 != 0) {
																				boolean v52 = ClipboardService$PerUserClipboard.mNotifiedTextClassifierUids.get(p4);
																				if (v52 == 0) {
																					if (ClipboardService$PerUserClipboard.primaryClip == 0) {
																						long v54 = Binder.clearCallingIdentity();
																						String v56 = DeviceConfig.getProperty("clipboard", "auto_clear_enabled");
																						if (v56 == 0) {
																							boolean v55 = ;
																							if (v55 == 0) {
																								Integer v57 = Integer.valueOf(p3);
																								this.mClipboardClearHandler.removeEqualMessages(101, v57);
																								Integer v59 = Integer.valueOf(p3);
																								Message v60 = Message.obtain(this.mClipboardClearHandler, 101, p3, v1, v59);
																								long v62 = DeviceConfig.getLong("clipboard", "auto_clear_timeout", 3600000);
																								long v61 = v62;
																								boolean v63 = this.mClipboardClearHandler.sendMessageDelayed(v60, v61);
																								Binder.restoreCallingIdentity(v54);
																								return ClipboardService$PerUserClipboard.primaryClip;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
