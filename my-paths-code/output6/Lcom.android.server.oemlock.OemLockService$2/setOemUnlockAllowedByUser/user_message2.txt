The method setOemUnlockAllowedByUser has the following code snippet:

This is path 1 for the API with depth 2:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		long v6 = Binder.clearCallingIdentity();
		UserManager v7 = UserManager.get(this.mContext);
		boolean v8 = v7.isUserAdmin(v5);
		if (v8 == 0) {
			Binder.restoreCallingIdentity(v6);
			long v10 = Binder.clearCallingIdentity();
			UserManager v13 = UserManager.get(this.mContext);
			boolean v14 = v13.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
			boolean v12 = (v14 ^ 1);
			boolean v11 = v12;
			if (v11 == 0) {
				OemLock v15 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
				boolean v16 = v15.isOemUnlockAllowedByCarrier();
				if (v16 == 0) {
					OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
					v17.setOemUnlockAllowedByDevice(p1);
					Object v21 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
					if (v21 == 0) {
						if (this.mOemLock instanceof PersistentDataBlockLock != 0) {
							v21.forceOemUnlockEnabled(p2);
							Binder.restoreCallingIdentity(v10);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		long v6 = Binder.clearCallingIdentity();
		UserManager v7 = UserManager.get(this.mContext);
		boolean v8 = v7.isUserAdmin(v5);
		if (v8 == 0) {
			Binder.restoreCallingIdentity(v6);
			long v10 = Binder.clearCallingIdentity();
			UserManager v13 = UserManager.get(this.mContext);
			boolean v14 = v13.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
			boolean v12 = (v14 ^ 1);
			boolean v11 = v12;
			if (v11 == 0) {
				OemLock v15 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
				boolean v16 = v15.isOemUnlockAllowedByCarrier();
				if (v16 == 0) {
					OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
					v17.setOemUnlockAllowedByDevice(p1);
					Object v21 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
					if (v21 == 0) {
						if (this.mOemLock instanceof PersistentDataBlockLock != 0) {
							Binder.restoreCallingIdentity(v10);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		long v6 = Binder.clearCallingIdentity();
		UserManager v7 = UserManager.get(this.mContext);
		boolean v8 = v7.isUserAdmin(v5);
		if (v8 == 0) {
			Binder.restoreCallingIdentity(v6);
			long v10 = Binder.clearCallingIdentity();
			UserManager v13 = UserManager.get(this.mContext);
			boolean v14 = v13.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
			boolean v12 = (v14 ^ 1);
			boolean v11 = v12;
			if (v11 == 0) {
				OemLock v15 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
				boolean v16 = v15.isOemUnlockAllowedByCarrier();
				if (v16 == 0) {
					OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
					v17.setOemUnlockAllowedByDevice(p1);
					Object v21 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
					if (v21 == 0) {
						Binder.restoreCallingIdentity(v10);
						return;
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v1 = ActivityManager.isUserAMonkey();\nint v5 = UserHandle.getCallingUserId();\nUserManager v7 = UserManager.get(this.mContext);\nboolean v8 = v7.isUserAdmin(v5);\nOemLock v15 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);\nboolean v16 = v15.isOemUnlockAllowedByCarrier();\nv17.setOemUnlockAllowedByDevice(p1);']

The method setOemUnlockAllowedByUser has the following similar APIs:

- API Name: isOemUnlockAllowed()Z with Similarity Score: 0.8180739283561707
  - Access Control Level: NONE and the following code:
boolean v4 = v3.isOemUnlockAllowedByCarrier();
if (v4 == 0) {
OemLock v5 = this.mOemLock;
boolean v6 = v5.isOemUnlockAllowedByDevice();

- API Name: isOemUnlockAllowedByUser()Z with Similarity Score: 0.7692376375198364
  - Access Control Level: NONE and the following code:
OemLock v3 = this.mOemLock;
boolean v4 = v3.isOemUnlockAllowedByDevice();
return v4;

