This is path 1 for the API with depth 2:
public void setBindInstantServiceAllowed(int p1, boolean p2){
	if (1 == 0) {
		boolean v4 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v4 == 0) {
			Object v5 = this.mUserStates.get(p1);
			if (v5 != 0) {
				UserState v6 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v6);
				if (p2 != 0) {
					.increasePriority();
					UserState v3 = ;
					UserState v2 = v3;
					long v10 = Binder.clearCallingIdentity();
					this.mIsInstantServiceAllowed = p2;
					UserState.throwIfDestroyedLocked();
					UserState.readConfigurationLocked();
					UserState.onConfigurationChangedLocked();
					Binder.restoreCallingIdentity(v10);
					return;
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setBindInstantServiceAllowed(int p1, boolean p2){
	if (1 == 0) {
		boolean v4 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v4 == 0) {
			Object v5 = this.mUserStates.get(p1);
			if (v5 != 0) {
				UserState v6 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v6);
				if (p2 != 0) {
					.increasePriority();
					UserState v3 = ;
					UserState v2 = v3;
					long v10 = Binder.clearCallingIdentity();
					this.mIsInstantServiceAllowed = p2;
					UserState.throwIfDestroyedLocked();
					UserState.readConfigurationLocked();
					UserState.onConfigurationChangedLocked();
					Binder.restoreCallingIdentity(v10);
					return;
				}
			}
		}
	}
}
