This is path 1 for the API with depth 2:
public void cancelPrintJob(PrintJobId p1, int p2, int p3){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					RemotePrintSpooler.throwIfCalledOnMainThread();
					RemotePrintSpooler.throwIfDestroyedLocked();
					this.mCanUnbind = 0;
					IPrintSpooler v18 = RemotePrintSpooler.getRemoteInstanceLazy();
					PrintJobInfo v19 = this.mGetPrintJobInfoCaller.getPrintJobInfo(v18, p1, p2);
					this.mCanUnbind = 1;
					this.mLock.notifyAll();
					PrintJobInfo v15 = v19;
					if (v15 != 0) {
						RemotePrintSpooler.throwIfCalledOnMainThread();
						RemotePrintSpooler.throwIfDestroyedLocked();
						this.mCanUnbind = 0;
						IPrintSpooler v24 = RemotePrintSpooler.getRemoteInstanceLazy();
						v24.setPrintJobCancelling(p1, 1);
						this.mCanUnbind = 1;
						this.mLock.notifyAll();
						int v27 = this.mState;
						if (v27 == 6) {
							PrinterId v28 = this.mPrinterId;
							if (v28 == 0) {
								ComponentName v29 = this.mServiceName;
								Object v30 = this.mActiveServices.get(v29);
								if (v30 != 0) {
									Handler v32 = Handler.getMain();
									RemotePrintService$$ExternalSyntheticLambda2 v33 = new RemotePrintService$$ExternalSyntheticLambda2();
									Message v35 = PooledLambda.obtainMessage(v33, RemotePrintService, v15);
									boolean v36 = v32.sendMessage(v35);
									Binder.restoreCallingIdentity(v13);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void cancelPrintJob(PrintJobId p1, int p2, int p3){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					RemotePrintSpooler.throwIfCalledOnMainThread();
					RemotePrintSpooler.throwIfDestroyedLocked();
					this.mCanUnbind = 0;
					IPrintSpooler v18 = RemotePrintSpooler.getRemoteInstanceLazy();
					PrintJobInfo v19 = this.mGetPrintJobInfoCaller.getPrintJobInfo(v18, p1, p2);
					this.mCanUnbind = 1;
					this.mLock.notifyAll();
					PrintJobInfo v15 = v19;
					if (v15 != 0) {
						RemotePrintSpooler.throwIfCalledOnMainThread();
						RemotePrintSpooler.throwIfDestroyedLocked();
						this.mCanUnbind = 0;
						IPrintSpooler v24 = RemotePrintSpooler.getRemoteInstanceLazy();
						v24.setPrintJobCancelling(p1, 1);
						this.mCanUnbind = 1;
						this.mLock.notifyAll();
						int v27 = this.mState;
						if (v27 == 6) {
							RemotePrintSpooler.throwIfCalledOnMainThread();
							RemotePrintSpooler.throwIfDestroyedLocked();
							this.mCanUnbind = 0;
							IPrintSpooler v31 = RemotePrintSpooler.getRemoteInstanceLazy();
							boolean v32 = this.mSetPrintJobStatusCaller.setPrintJobState(v31, p1, 7, 0);
							this.mCanUnbind = 1;
							this.mLock.notifyAll();
							boolean v28 = v32;
							Binder.restoreCallingIdentity(v13);
							return;
						}
					}
				}
			}
		}
	}
}
