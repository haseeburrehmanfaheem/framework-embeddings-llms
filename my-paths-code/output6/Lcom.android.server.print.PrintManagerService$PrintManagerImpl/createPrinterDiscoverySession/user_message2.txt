The method createPrinterDiscoverySession has the following code snippet:

This is path 1 for the API with depth 2:
public void createPrinterDiscoverySession(IPrinterDiscoveryObserver p1, int p2){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					RemotePrintSpooler.throwIfCalledOnMainThread();
					RemotePrintSpooler.throwIfDestroyedLocked();
					this.mCanUnbind = 0;
					IPrintSpooler v18 = RemotePrintSpooler.getRemoteInstanceLazy();
					Void v19 = this.mClearCustomPrinterIconCache.clearCustomPrinterIconCache(v18);
					this.mCanUnbind = 1;
					this.mLock.notifyAll();
					if (this.mDestroyed != 0) {
						if (this.mPrinterDiscoverySession != 0) {
							UserState$1 v22 = new UserState$1(UserState);
							this.mPrinterDiscoverySession = v22;
							boolean v25 = this.mDiscoveryObservers.register(p1);
							boolean v26 = this.mPrinters.isEmpty();
							if (v26 != 0) {
								Handler v27 = Handler.getMain();
								UserState$PrinterDiscoverySessionMediator$$ExternalSyntheticLambda9 v28 = new UserState$PrinterDiscoverySessionMediator$$ExternalSyntheticLambda9();
								ArrayList v30 = new ArrayList(v31);
								Collection v31 = this.mPrinters.values();
								Message v33 = PooledLambda.obtainMessage(v28, UserState$PrinterDiscoverySessionMediator, p1, v30);
								boolean v34 = v27.sendMessage(v33);
								Binder.restoreCallingIdentity(v13);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void createPrinterDiscoverySession(IPrinterDiscoveryObserver p1, int p2){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					RemotePrintSpooler.throwIfCalledOnMainThread();
					RemotePrintSpooler.throwIfDestroyedLocked();
					this.mCanUnbind = 0;
					IPrintSpooler v18 = RemotePrintSpooler.getRemoteInstanceLazy();
					Void v19 = this.mClearCustomPrinterIconCache.clearCustomPrinterIconCache(v18);
					this.mCanUnbind = 1;
					this.mLock.notifyAll();
					if (this.mDestroyed != 0) {
						if (this.mPrinterDiscoverySession != 0) {
							boolean v23 = this.mDiscoveryObservers.register(p1);
							boolean v24 = this.mPrinters.isEmpty();
							if (v24 != 0) {
								Handler v25 = Handler.getMain();
								UserState$PrinterDiscoverySessionMediator$$ExternalSyntheticLambda9 v26 = new UserState$PrinterDiscoverySessionMediator$$ExternalSyntheticLambda9();
								ArrayList v28 = new ArrayList(v29);
								Collection v29 = this.mPrinters.values();
								Message v31 = PooledLambda.obtainMessage(v26, UserState$PrinterDiscoverySessionMediator, p1, v28);
								boolean v32 = v25.sendMessage(v31);
								Binder.restoreCallingIdentity(v13);
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v8 = this.mUserStates.get(p1);\nUserState v9 = new UserState(this.mContext, p1, this.mLock, p2);\nthis.mUserStates.put(p1, v9);', 'boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);']

The method createPrinterDiscoverySession has the following similar APIs:

- API Name: stopPrinterStateTracking(Landroid/print/PrinterId;I)V with Similarity Score: 1.0000001192092896
  - Access Control Level: NONE and the following code:
boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);

- API Name: startPrinterStateTracking(Landroid/print/PrinterId;I)V with Similarity Score: 1.0000001192092896
  - Access Control Level: NONE and the following code:
boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);

