This is path 1 for the API with depth 2:
public List getPrintJobInfos(int p1, int p2){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					Object v16 = UserState.-$$Nest$fgetmLock(this.this$0);
					if (p1 != -2) {
						Object v17 = this.mPrintJobsForRunningApp.get(p1);
						if (v17 == 0) {
							ArrayList v18 = new ArrayList();
							boolean v20 = v18.addAll(v17);
							if ( == 0) {
								List v21 = Collections.emptyList();
								List v15 = v21;
								ArrayMap v22 = new ArrayMap();
								int v24 = v15.size();
								if ( >= v24) {
									RemotePrintSpooler.throwIfCalledOnMainThread();
									RemotePrintSpooler.throwIfDestroyedLocked();
									this.mCanUnbind = 0;
									IPrintSpooler v28 = RemotePrintSpooler.getRemoteInstanceLazy();
									List v29 = this.mGetPrintJobInfosCaller.getPrintJobInfos(v28, 0, -1, p1);
									this.mCanUnbind = 1;
									this.mLock.notifyAll();
									List v25 = v29;
									if (v25 == 0) {
										int v31 = v25.size();
										if ( >= v31) {
											ArrayList v32 = new ArrayList(v33);
											Collection v33 = v22.values();
											List v14 = v32;
											Binder.restoreCallingIdentity(v13);
											return v14;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public List getPrintJobInfos(int p1, int p2){
	if (1 == 0) {
		boolean v7 = this.mUserManager.isUserUnlockingOrUnlocked(p1);
		if (v7 == 0) {
			Object v8 = this.mUserStates.get(p1);
			if (v8 != 0) {
				UserState v9 = new UserState(this.mContext,p1,this.mLock,p2);
				this.mUserStates.put(p1, v9);
				if (p2 != 0) {
					.increasePriority();
					UserState v6 = ;
					UserState v5 = v6;
					long v13 = Binder.clearCallingIdentity();
					Object v16 = UserState.-$$Nest$fgetmLock(this.this$0);
					if (p1 != -2) {
						Object v17 = this.mPrintJobsForRunningApp.get(p1);
						if (v17 == 0) {
							ArrayList v18 = new ArrayList();
							boolean v20 = v18.addAll(v17);
							if ( == 0) {
								List v21 = Collections.emptyList();
								List v15 = v21;
								ArrayMap v22 = new ArrayMap();
								int v24 = v15.size();
								if ( >= v24) {
									RemotePrintSpooler.throwIfCalledOnMainThread();
									RemotePrintSpooler.throwIfDestroyedLocked();
									this.mCanUnbind = 0;
									IPrintSpooler v28 = RemotePrintSpooler.getRemoteInstanceLazy();
									List v29 = this.mGetPrintJobInfosCaller.getPrintJobInfos(v28, 0, -1, p1);
									this.mCanUnbind = 1;
									this.mLock.notifyAll();
									List v25 = v29;
									if (v25 == 0) {
										ArrayList v31 = new ArrayList(v32);
										Collection v32 = v22.values();
										List v14 = v31;
										Binder.restoreCallingIdentity(v13);
										return v14;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
