The method getAllowedCecSettingStringValues has the following code snippet:

This is path 1 for the API with depth 2:
public List getAllowedCecSettingStringValues(String p1){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue();
			String v13 = v12.getStringValue();
			if (v13 == 0) {
				String v11 = ;
				boolean v14 = v11.equals("string");
				if (v14 == 0) {
					ArrayList v15 = new ArrayList();
					List v17 = this.mAllowedValues;
					Iterator v18 = v17.iterator();
					boolean v19 = v18.hasNext();
					if (v19 == 0) {
						List v7 = v15;
						Binder.restoreCallingIdentity(v5);
						return v7;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public List getAllowedCecSettingStringValues(String p1){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		Object v10 = this.mSettings.get(p1);
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			HdmiCecConfig$Value v12 = HdmiCecConfig$Setting.getDefaultValue();
			String v13 = v12.getStringValue();
			if (v13 == 0) {
				String v11 = ;
				boolean v14 = v11.equals("string");
				if (v14 == 0) {
					ArrayList v15 = new ArrayList();
					List v17 = this.mAllowedValues;
					Iterator v18 = v17.iterator();
					boolean v19 = v18.hasNext();
					if (v19 == 0) {
						List v7 = v15;
						Binder.restoreCallingIdentity(v5);
						return v7;
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public List getAllowedCecSettingStringValues(String p1){
	HdmiControlService.setWorkSourceUidToCallingUid();
	long v5 = Binder.clearCallingIdentity();
	HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();
	boolean v9 = this.mSettings.containsKey(p1);
	if (v9 == 0) {
		HdmiCecConfig$Setting v8 = ;
		if (v8 == 0) {
			HdmiCecConfig$Value v11 = HdmiCecConfig$Setting.getDefaultValue();
			String v12 = v11.getStringValue();
			if (v12 == 0) {
				String v10 = ;
				boolean v13 = v10.equals("string");
				if (v13 == 0) {
					ArrayList v14 = new ArrayList();
					List v16 = this.mAllowedValues;
					Iterator v17 = v16.iterator();
					boolean v18 = v17.hasNext();
					if (v18 == 0) {
						List v7 = v14;
						Binder.restoreCallingIdentity(v5);
						return v7;
					}
				}
			}
		}
	}
}

and the following sink code:
['HdmiCecConfig v6 = this.this$0.getHdmiCecConfig();\nObject v10 = this.mSettings.get(p1);\nHdmiCecConfig$Setting v8 = ;\nHdmiCecConfig$Value v11 = HdmiCecConfig$Setting.getDefaultValue();\nString v12 = v11.getStringValue();', 'ArrayList v15 = new ArrayList();\nList v17 = this.mAllowedValues;\nIterator v18 = v17.iterator();\nboolean v19 = v18.hasNext();\nif (v19 == 0) { List v7 = v15; return v7; }']

The method getAllowedCecSettingStringValues has the following similar APIs:

- API Name: shouldHandleTvPowerKey()Z with Similarity Score: 0.9023313522338867
  - Access Control Level: NONE and the following code:
HdmiCecConfig v26 = this.mHdmiCecConfig;
HdmiCecConfig$Setting v28 = HdmiCecConfig.getSetting("hdmi_cec_enabled");
String v29 = v28.getValueType();
HdmiCecConfig$Value v39 = v28.getDefaultValue();
Integer v40 = v39.getIntValue();
int v41 = v40.intValue();
String v42 = Integer.toString(v41);
String v43 = HdmiCecConfig.retrieveValue(v28, v42);

- API Name: getAllowedCecSettingIntValues(Ljava/lang/String;)[I with Similarity Score: 0.8671354055404663
  - Access Control Level: NONE and the following code:
List v17 = this.mAllowedValues;
Iterator v18 = v17.iterator();
boolean v19 = v18.hasNext();
if (v19 == 0) {
ArrayList v15 = new ArrayList();
List v7 = v15;
Stream v20 = v7.stream();
HdmiControlService$BinderService$$ExternalSyntheticLambda0 v21 = new HdmiControlService$BinderService$$ExternalSyntheticLambda0();
IntStream v23 = v20.mapToInt(v21);
[I v24 = v23.toArray();
return v24;

