The method startActivityAsUser has the following code snippet:

This is path 1 for the API with depth 2:
public void startActivityAsUser(IApplicationThread p1, String p2, String p3, ComponentName p4, int p5, boolean p6, IBinder p7, Bundle p8){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p4);
	DevicePolicyEventLogger v8 = new DevicePolicyEventLogger(126);
	DevicePolicyEventLogger v7 = v8;
	String v10 = new String(1);
	this.mStringArrayValue = v10;
	DevicePolicyEventLogger v11 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		StringList v14 = new StringList();
		StringList.stringValue = this.mStringArrayValue;
		byte[] v16 = MessageNano.toByteArray(v14);
		byte[] v13 = v16;
		StatsEvent$Builder v18 = StatsEvent.newBuilder();
		StatsEvent$Builder v19 = v18.setAtomId(103);
		StatsEvent$Builder v20 = v18.writeInt(this.mEventId);
		StatsEvent$Builder v21 = v18.writeString(this.mAdminPackageName);
		StatsEvent$Builder v22 = v18.writeInt(this.mIntValue);
		StatsEvent$Builder v23 = v18.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v24 = v18.writeLong(this.mTimePeriodMs);
		if (v13 != 0) {
			[B v25 = new [B(0);
			StatsEvent$Builder v26 = v18.writeByteArray();
			StatsEvent$Builder v27 = v18.usePooledBuffer();
			StatsEvent v28 = v18.build();
			StatsLog.write(v28);
			int v30 = this.mInjector.getCallingUserId();
			int v31 = this.mInjector.getCallingUid();
			int v32 = this.mInjector.getCallingPid();
			List v33 = p0.getTargetUserProfilesUnchecked(p2, v30);
			UserHandle v34 = UserHandle.of(p5);
			boolean v35 = v33.contains(v34);
			if (v35 == 0) {
				String v36 = p4.getPackageName();
				boolean v37 = p2.equals(v36);
				if (v37 == 0) {
					Intent v38 = new Intent();
					if (p6 == 0) {
						Intent v40 = v38.setAction("android.intent.action.MAIN");
						Intent v41 = v38.addCategory("android.intent.category.LAUNCHER");
						if (p7 != 0) {
							Intent v42 = v38.addFlags(270532608);
							String v43 = p4.getPackageName();
							Intent v44 = v38.setPackage(v43);
							p0.verifyActivityCanHandleIntentAndExported(v38, p4, v31, p5);
							if (p8 != 0) {
								ActivityOptions v46 = ActivityOptions.makeOpenCrossProfileAppsAnimation();
								Bundle v47 = v46.toBundle();
								Intent v48 = v38.setPackage(0);
								Intent v49 = v38.setComponent(p4);
								ActivityTaskManagerInternal v50 = this.mInjector.getActivityTaskManagerInternal();
								int v51 = v50.startActivityAsUser(p1, p2, p3, v38, p7, 0, , p5);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void startActivityAsUser(IApplicationThread p1, String p2, String p3, ComponentName p4, int p5, boolean p6, IBinder p7, Bundle p8){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p4);
	DevicePolicyEventLogger v8 = new DevicePolicyEventLogger(126);
	DevicePolicyEventLogger v7 = v8;
	String v10 = new String(1);
	this.mStringArrayValue = v10;
	DevicePolicyEventLogger v11 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		StringList v14 = new StringList();
		StringList.stringValue = this.mStringArrayValue;
		byte[] v16 = MessageNano.toByteArray(v14);
		byte[] v13 = v16;
		StatsEvent$Builder v18 = StatsEvent.newBuilder();
		StatsEvent$Builder v19 = v18.setAtomId(103);
		StatsEvent$Builder v20 = v18.writeInt(this.mEventId);
		StatsEvent$Builder v21 = v18.writeString(this.mAdminPackageName);
		StatsEvent$Builder v22 = v18.writeInt(this.mIntValue);
		StatsEvent$Builder v23 = v18.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v24 = v18.writeLong(this.mTimePeriodMs);
		if (v13 != 0) {
			[B v25 = new [B(0);
			StatsEvent$Builder v26 = v18.writeByteArray();
			StatsEvent$Builder v27 = v18.usePooledBuffer();
			StatsEvent v28 = v18.build();
			StatsLog.write(v28);
			int v30 = this.mInjector.getCallingUserId();
			int v31 = this.mInjector.getCallingUid();
			int v32 = this.mInjector.getCallingPid();
			List v33 = p0.getTargetUserProfilesUnchecked(p2, v30);
			UserHandle v34 = UserHandle.of(p5);
			boolean v35 = v33.contains(v34);
			if (v35 == 0) {
				String v36 = p4.getPackageName();
				boolean v37 = p2.equals(v36);
				if (v37 == 0) {
					Intent v38 = new Intent();
					if (p6 == 0) {
						Intent v40 = v38.setAction("android.intent.action.MAIN");
						Intent v41 = v38.addCategory("android.intent.category.LAUNCHER");
						if (p7 != 0) {
							Intent v42 = v38.addFlags(270532608);
							String v43 = p4.getPackageName();
							Intent v44 = v38.setPackage(v43);
							p0.verifyActivityCanHandleIntentAndExported(v38, p4, v31, p5);
							if (p8 != 0) {
								ActivityOptions v46 = ActivityOptions.makeOpenCrossProfileAppsAnimation();
								Bundle v47 = v46.toBundle();
								p8.putAll(v47);
								Intent v49 = v38.setPackage(0);
								Intent v50 = v38.setComponent(p4);
								ActivityTaskManagerInternal v51 = this.mInjector.getActivityTaskManagerInternal();
								int v52 = v51.startActivityAsUser(p1, p2, p3, v38, p7, 0, , p5);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void startActivityAsUser(IApplicationThread p1, String p2, String p3, ComponentName p4, int p5, boolean p6, IBinder p7, Bundle p8){
	Object v1 = Objects.requireNonNull(p2);
	Object v2 = Objects.requireNonNull(p4);
	DevicePolicyEventLogger v8 = new DevicePolicyEventLogger(126);
	DevicePolicyEventLogger v7 = v8;
	String v10 = new String(1);
	this.mStringArrayValue = v10;
	DevicePolicyEventLogger v11 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		StringList v14 = new StringList();
		StringList.stringValue = this.mStringArrayValue;
		byte[] v16 = MessageNano.toByteArray(v14);
		byte[] v13 = v16;
		StatsEvent$Builder v18 = StatsEvent.newBuilder();
		StatsEvent$Builder v19 = v18.setAtomId(103);
		StatsEvent$Builder v20 = v18.writeInt(this.mEventId);
		StatsEvent$Builder v21 = v18.writeString(this.mAdminPackageName);
		StatsEvent$Builder v22 = v18.writeInt(this.mIntValue);
		StatsEvent$Builder v23 = v18.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v24 = v18.writeLong(this.mTimePeriodMs);
		if (v13 != 0) {
			StatsEvent$Builder v25 = v18.writeByteArray();
			StatsEvent$Builder v26 = v18.usePooledBuffer();
			StatsEvent v27 = v18.build();
			StatsLog.write(v27);
			int v29 = this.mInjector.getCallingUserId();
			int v30 = this.mInjector.getCallingUid();
			int v31 = this.mInjector.getCallingPid();
			List v32 = p0.getTargetUserProfilesUnchecked(p2, v29);
			UserHandle v33 = UserHandle.of(p5);
			boolean v34 = v32.contains(v33);
			if (v34 == 0) {
				String v35 = p4.getPackageName();
				boolean v36 = p2.equals(v35);
				if (v36 == 0) {
					Intent v37 = new Intent();
					if (p6 == 0) {
						Intent v39 = v37.setAction("android.intent.action.MAIN");
						Intent v40 = v37.addCategory("android.intent.category.LAUNCHER");
						if (p7 != 0) {
							Intent v41 = v37.addFlags(270532608);
							String v42 = p4.getPackageName();
							Intent v43 = v37.setPackage(v42);
							p0.verifyActivityCanHandleIntentAndExported(v37, p4, v30, p5);
							if (p8 != 0) {
								ActivityOptions v45 = ActivityOptions.makeOpenCrossProfileAppsAnimation();
								Bundle v46 = v45.toBundle();
								Intent v47 = v37.setPackage(0);
								Intent v48 = v37.setComponent(p4);
								ActivityTaskManagerInternal v49 = this.mInjector.getActivityTaskManagerInternal();
								int v50 = v49.startActivityAsUser(p1, p2, p3, v37, p7, 0, , p5);
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['StatsEvent$Builder v18 = StatsEvent.newBuilder();\nStatsEvent$Builder v19 = v18.setAtomId(103);\nStatsEvent$Builder v20 = v18.writeInt(this.mEventId);\nStatsEvent$Builder v21 = v18.writeString(this.mAdminPackageName);\nStatsEvent v27 = v18.build();\nStatsLog.write(v27);', 'Intent v38 = new Intent();\nIntent v40 = v38.setAction("android.intent.action.MAIN");\nIntent v41 = v38.addCategory("android.intent.category.LAUNCHER");\np0.verifyActivityCanHandleIntentAndExported(v38, p4, v31, p5);', 'this.mStringArrayValue = v10;\nStringList v14 = new StringList();\nStringList.stringValue = this.mStringArrayValue;', 'ActivityOptions v46 = ActivityOptions.makeOpenCrossProfileAppsAnimation();\nBundle v47 = v46.toBundle();']

The method startActivityAsUser has the following similar APIs:

- API Name: shareData(Landroid/view/contentcapture/DataShareRequest;Landroid/view/contentcapture/IDataShareWriteAdapter;)V with Similarity Score: 0.8965268731117249
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v27 = StatsEvent.newBuilder();
StatsEvent$Builder v28 = v27.setAtomId(207);
StatsEvent$Builder v29 = v27.writeInt(p1);
if (80 != 207) {
StatsEvent$Builder v30 = v27.addBooleanAnnotation(1, 1);
StatsEvent$Builder v31 = v27.writeString(p2);
StatsEvent v36 = v27.build();
StatsLog.write(v36);

- API Name: reportNetworkEvent(Ljava/lang/String;Landroid/media/metrics/NetworkEvent;I)V with Similarity Score: 0.8616477251052856
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v27 = StatsEvent.newBuilder();
StatsEvent$Builder v28 = v27.setAtomId(321);
StatsEvent$Builder v29 = v28.writeString(p1);
int v30 = p2.getNetworkType();
StatsEvent$Builder v31 = v29.writeInt(v30);
long v32 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v33 = v31.writeLong(v32);
StatsEvent$Builder v34 = v33.usePooledBuffer();
StatsEvent v35 = v34.build();
StatsLog.write(v35);

