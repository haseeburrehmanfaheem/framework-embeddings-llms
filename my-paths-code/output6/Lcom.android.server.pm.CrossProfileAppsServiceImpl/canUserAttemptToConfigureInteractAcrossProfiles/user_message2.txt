The method canUserAttemptToConfigureInteractAcrossProfiles has the following code snippet:

This is path 1 for the API with depth 2:
public boolean canUserAttemptToConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	UserManager v3 = this.mInjector.getUserManager();
	[I v4 = v3.getProfileIds(v1, 0);
	if (v4.length >= 2) {
		if ( >= v4.length) {
			boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4[]);
			if (v6 == 0) {
				boolean v5 = 1;
				if (v5 == 0) {
					String v7 = AppOpsManager.opToPermission(93);
					if (v8 != 0) {
						boolean v2 = (v9 ^ 1);
						return v2;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean canUserAttemptToConfigureInteractAcrossProfiles(String p1){
	int v1 = this.mInjector.getCallingUserId();
	UserManager v3 = this.mInjector.getUserManager();
	[I v4 = v3.getProfileIds(v1, 0);
	if (v4.length >= 2) {
		if ( >= v4.length) {
			boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4[]);
			if (v6 == 0) {
				boolean v5 = 1;
				if (v5 == 0) {
					String v7 = AppOpsManager.opToPermission(93);
					if (v8 != 0) {
						boolean v2 = 0;
						return v2;
					}
				}
			}
		}
	}
}

and the following sink code:
['int[] v4 = v3.getProfileIds(v1, 0);\nboolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v4);\nString v7 = AppOpsManager.opToPermission(93);\nreturn /* expression */;']

The method canUserAttemptToConfigureInteractAcrossProfiles has the following similar APIs:

- API Name: canRequestInteractAcrossProfiles(Ljava/lang/String;)Z with Similarity Score: 0.7800354361534119
  - Access Control Level: NONE and the following code:
int v8 = this.mInjector.getCallingUserId();
[I v9 = v7.getEnabledProfileIds(v8);
boolean v11 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[]);

- API Name: canConfigureInteractAcrossProfiles(Ljava/lang/String;)Z with Similarity Score: 0.7179799675941467
  - Access Control Level: NONE and the following code:
int v1 = this.mInjector.getCallingUserId();
UserManager v4 = this.mInjector.getUserManager();
[I v5 = v4.getProfileIds(p2, 0);
boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v5);
CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10 v11 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10(CrossProfileAppsServiceImpl,p2,p1);
Object v13 = this.mInjector.withCleanCallingIdentity(v11);
boolean v14 = v13.booleanValue();

