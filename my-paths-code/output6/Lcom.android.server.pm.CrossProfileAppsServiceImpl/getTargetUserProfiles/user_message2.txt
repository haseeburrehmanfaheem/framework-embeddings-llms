The method getTargetUserProfiles has the following code snippet:

This is path 1 for the API with depth 2:
public List getTargetUserProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	DevicePolicyEventLogger v7 = new DevicePolicyEventLogger(125);
	DevicePolicyEventLogger v6 = v7;
	String v9 = new String(1);
	this.mStringArrayValue = v9;
	DevicePolicyEventLogger v10 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		StringList v13 = new StringList();
		StringList.stringValue = this.mStringArrayValue;
		byte[] v15 = MessageNano.toByteArray(v13);
		byte[] v12 = v15;
		StatsEvent$Builder v17 = StatsEvent.newBuilder();
		StatsEvent$Builder v18 = v17.setAtomId(103);
		StatsEvent$Builder v19 = v17.writeInt(this.mEventId);
		StatsEvent$Builder v20 = v17.writeString(this.mAdminPackageName);
		StatsEvent$Builder v21 = v17.writeInt(this.mIntValue);
		StatsEvent$Builder v22 = v17.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v23 = v17.writeLong(this.mTimePeriodMs);
		if (v12 != 0) {
			[B v24 = new [B(0);
			StatsEvent$Builder v25 = v17.writeByteArray();
			StatsEvent$Builder v26 = v17.usePooledBuffer();
			StatsEvent v27 = v17.build();
			StatsLog.write(v27);
			int v29 = this.mInjector.getCallingUserId();
			List v30 = p0.getTargetUserProfilesUnchecked(p1, v29);
			return v30;
		}
	}
}
This is path 2 for the API with depth 2:
public List getTargetUserProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	DevicePolicyEventLogger v7 = new DevicePolicyEventLogger(125);
	DevicePolicyEventLogger v6 = v7;
	String v9 = new String(1);
	this.mStringArrayValue = v9;
	DevicePolicyEventLogger v10 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		StringList v13 = new StringList();
		StringList.stringValue = this.mStringArrayValue;
		byte[] v15 = MessageNano.toByteArray(v13);
		byte[] v12 = v15;
		StatsEvent$Builder v17 = StatsEvent.newBuilder();
		StatsEvent$Builder v18 = v17.setAtomId(103);
		StatsEvent$Builder v19 = v17.writeInt(this.mEventId);
		StatsEvent$Builder v20 = v17.writeString(this.mAdminPackageName);
		StatsEvent$Builder v21 = v17.writeInt(this.mIntValue);
		StatsEvent$Builder v22 = v17.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v23 = v17.writeLong(this.mTimePeriodMs);
		if (v12 != 0) {
			StatsEvent$Builder v24 = v17.writeByteArray();
			StatsEvent$Builder v25 = v17.usePooledBuffer();
			StatsEvent v26 = v17.build();
			StatsLog.write(v26);
			int v28 = this.mInjector.getCallingUserId();
			List v29 = p0.getTargetUserProfilesUnchecked(p1, v28);
			return v29;
		}
	}
}
This is path 3 for the API with depth 2:
public List getTargetUserProfiles(String p1){
	Object v1 = Objects.requireNonNull(p1);
	DevicePolicyEventLogger v7 = new DevicePolicyEventLogger(125);
	DevicePolicyEventLogger v6 = v7;
	String v9 = new String(1);
	this.mStringArrayValue = v9;
	DevicePolicyEventLogger v10 = DevicePolicyEventLogger;
	if (this.mStringArrayValue != 0) {
		byte[] v12 = 0;
		StatsEvent$Builder v14 = StatsEvent.newBuilder();
		StatsEvent$Builder v15 = v14.setAtomId(103);
		StatsEvent$Builder v16 = v14.writeInt(this.mEventId);
		StatsEvent$Builder v17 = v14.writeString(this.mAdminPackageName);
		StatsEvent$Builder v18 = v14.writeInt(this.mIntValue);
		StatsEvent$Builder v19 = v14.writeBoolean(this.mBooleanValue);
		StatsEvent$Builder v20 = v14.writeLong(this.mTimePeriodMs);
		if (v12 != 0) {
			[B v21 = new [B(0);
			StatsEvent$Builder v22 = v14.writeByteArray();
			StatsEvent$Builder v23 = v14.usePooledBuffer();
			StatsEvent v24 = v14.build();
			StatsLog.write(v24);
			int v26 = this.mInjector.getCallingUserId();
			List v27 = p0.getTargetUserProfilesUnchecked(p1, v26);
			return v27;
		}
	}
}

and the following sink code:
['int vX = this.mInjector.getCallingUserId();\nList vXx = p0.getTargetUserProfilesUnchecked(p1, vX);\nreturn vXx;']

The method getTargetUserProfiles has the following similar APIs:

- API Name: canRequestInteractAcrossProfiles(Ljava/lang/String;)Z with Similarity Score: 0.790402889251709
  - Access Control Level: NONE and the following code:
int v8 = this.mInjector.getCallingUserId();
[I v9 = v7.getEnabledProfileIds(v8);
boolean v11 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v9[]);

- API Name: canConfigureInteractAcrossProfiles(Ljava/lang/String;)Z with Similarity Score: 0.7857497334480286
  - Access Control Level: NONE and the following code:
int v1 = this.mInjector.getCallingUserId();
UserManager v4 = this.mInjector.getUserManager();
[I v5 = v4.getProfileIds(p2, 0);
boolean v6 = CrossProfileAppsServiceImpl.isProfileOwner(p1, v5);
CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10 v11 = new CrossProfileAppsServiceImpl$$ExternalSyntheticLambda10(CrossProfileAppsServiceImpl,p2,p1);
Object v13 = this.mInjector.withCleanCallingIdentity(v11);
boolean v14 = v13.booleanValue();

