The method hasRestrictionsProvider has the following code snippet:

This is path 1 for the API with depth 0:
public boolean hasRestrictionsProvider(){
	int v1 = UserHandle.getCallingUserId();
	if (this.mDpm == 0) {
		long v2 = Binder.clearCallingIdentity();
		ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
		if (v3 == 0) {
			Binder.restoreCallingIdentity(v2);
			return ;
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nComponentName v3 = this.mDpm.getRestrictionsProvider(v1);']

The method hasRestrictionsProvider has the following similar APIs:

- API Name: createLocalApprovalIntent()Landroid/content/Intent; with Similarity Score: 0.8405736684799194
  - Access Control Level: NONE and the following code:
int v1 = UserHandle.getCallingUserId();
ComponentName v3 = this.mDpm.getRestrictionsProvider(v1);
Intent v5 = new Intent("android.content.action.REQUEST_LOCAL_APPROVAL");
Intent v7 = v5.setPackage(v4);
ResolveInfo v10 = v8.resolveIntent(v5, 0, 0, v1);
ComponentName v11 = new ComponentName(ActivityInfo.packageName, ActivityInfo.name);
Intent v13 = v5.setComponent(v11);
return v5;

- API Name: removeUser(I)Z with Similarity Score: 0.7380185127258301
  - Access Control Level: SYS_OR_SIG and the following code:
int v20 = UserHandle.getCallingUserId();
Bundle v25 = UserManagerService.computeEffectiveUserRestrictionsLR(p1);
boolean v26 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v25);

