The method setOemUnlockEnabled has the following code snippet:

This is path 1 for the API with depth 2:
public void setOemUnlockEnabled(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		UserManager v6 = UserManager.get(this.mContext);
		boolean v7 = v6.isUserAdmin(v5);
		if (v7 == 0) {
			if (p1 == 0) {
				Object v16 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				FileChannel v19 = PersistentDataBlockService.getBlockOutputChannel();
				long v20 = PersistentDataBlockService.getBlockDeviceSize();
				FileChannel v21 = v19.position((v20 - 1));
				ByteBuffer v22 = ByteBuffer.allocate(1);
				if (p2 == 0) {
					ByteBuffer v23 = v22.put();
					Buffer v24 = v22.flip();
					int v25 = v19.write(v22);
					v19.force(1);
					if (p2 == 0) {
						SystemProperties.set("sys.oem_unlock_allowed", );
						byte[] v30 = PersistentDataBlockService.computeDigestLocked(0);
						if (v30 == 0) {
							FileChannel v31 = PersistentDataBlockService.getBlockOutputChannel();
							ByteBuffer v32 = ByteBuffer.allocate(32);
							ByteBuffer v33 = v32.put(v30);
							Buffer v34 = v32.flip();
							int v35 = v31.write(v32);
							v31.force(1);
							boolean v29 = 1;
							boolean v28 = v29;
							return;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setOemUnlockEnabled(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		UserManager v6 = UserManager.get(this.mContext);
		boolean v7 = v6.isUserAdmin(v5);
		if (v7 == 0) {
			if (p1 == 0) {
				Object v16 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				FileChannel v19 = PersistentDataBlockService.getBlockOutputChannel();
				long v20 = PersistentDataBlockService.getBlockDeviceSize();
				FileChannel v21 = v19.position((v20 - 1));
				ByteBuffer v22 = ByteBuffer.allocate(1);
				if (p2 == 0) {
					ByteBuffer v23 = v22.put();
					Buffer v24 = v22.flip();
					int v25 = v19.write(v22);
					v19.force(1);
					if (p2 == 0) {
						SystemProperties.set("sys.oem_unlock_allowed", );
						byte[] v30 = PersistentDataBlockService.computeDigestLocked(0);
						if (v30 == 0) {
							boolean v29 = 0;
							boolean v28 = v29;
							return;
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setOemUnlockEnabled(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	if (v1 == 0) {
		int v5 = UserHandle.getCallingUserId();
		UserManager v6 = UserManager.get(this.mContext);
		boolean v7 = v6.isUserAdmin(v5);
		if (v7 == 0) {
			if (p1 == 0) {
				Object v8 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				FileChannel v11 = PersistentDataBlockService.getBlockOutputChannel();
				long v12 = PersistentDataBlockService.getBlockDeviceSize();
				FileChannel v13 = v11.position((v12 - 1));
				ByteBuffer v14 = ByteBuffer.allocate(1);
				if (p2 == 0) {
					ByteBuffer v15 = v14.put();
					Buffer v16 = v14.flip();
					int v17 = v11.write(v14);
					v11.force(1);
					if (p2 == 0) {
						SystemProperties.set("sys.oem_unlock_allowed", );
						byte[] v22 = PersistentDataBlockService.computeDigestLocked(0);
						if (v22 == 0) {
							FileChannel v23 = PersistentDataBlockService.getBlockOutputChannel();
							ByteBuffer v24 = ByteBuffer.allocate(32);
							ByteBuffer v25 = v24.put(v22);
							Buffer v26 = v24.flip();
							int v27 = v23.write(v24);
							v23.force(1);
							boolean v21 = 1;
							boolean v20 = v21;
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v5 = UserHandle.getCallingUserId();\nUserManager v6 = UserManager.get(this.mContext);\nboolean v7 = v6.isUserAdmin(v5);\nObject v16 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);\nFileChannel v19 = PersistentDataBlockService.getBlockOutputChannel();\nlong v20 = PersistentDataBlockService.getBlockDeviceSize();\nFileChannel v21 = v19.position((v20 - 1));\nByteBuffer v22 = ByteBuffer.allocate(1);\nByteBuffer v23 = v22.put();\nBuffer v24 = v22.flip();\nint v25 = v19.write(v22);\nv19.force(1);', 'int v5 = UserHandle.getCallingUserId();\nUserManager v6 = UserManager.get(this.mContext);\nboolean v7 = v6.isUserAdmin(v5);\nObject v8 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);\nFileChannel v11 = PersistentDataBlockService.getBlockOutputChannel();\nlong v12 = PersistentDataBlockService.getBlockDeviceSize();\nFileChannel v13 = v11.position((v12 - 1));\nByteBuffer v14 = ByteBuffer.allocate(1);\nByteBuffer v15 = v14.put();\nBuffer v16 = v14.flip();\nint v17 = v11.write(v14);\nv11.force(1);', 'int v5 = UserHandle.getCallingUserId();\nUserManager v6 = UserManager.get(this.mContext);\nboolean v7 = v6.isUserAdmin(v5);\nObject v16 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);\nFileChannel v19 = PersistentDataBlockService.getBlockOutputChannel();\nlong v20 = PersistentDataBlockService.getBlockDeviceSize();\nFileChannel v21 = v19.position((v20 - 1));\nByteBuffer v22 = ByteBuffer.allocate(1);\nByteBuffer v23 = v22.put();\nBuffer v24 = v22.flip();\nint v25 = v19.write(v22);\nv19.force(1);']

The method setOemUnlockEnabled has the following similar APIs:

- API Name: hasFrpCredentialHandle()Z with Similarity Score: 0.7653573751449585
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = Binder.getCallingUid();
this.this$0.enforceUid(v4);
PersistentDataBlockManagerInternal v7 = PersistentDataBlockService.-$$Nest$fgetmInternalService(this.this$0);
byte[] v8 = v7.getFrpCredentialHandle();

- API Name: hasFrpCredentialHandle()Z with Similarity Score: 0.7653573751449585
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = Binder.getCallingUid();
this.this$0.enforceUid(v4);
PersistentDataBlockManagerInternal v7 = PersistentDataBlockService.-$$Nest$fgetmInternalService(this.this$0);
byte[] v8 = v7.getFrpCredentialHandle();

