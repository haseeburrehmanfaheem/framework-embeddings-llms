The method write has the following code snippet:

This is path 1 for the API with depth 2:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		long v6 = PersistentDataBlockService.getBlockDeviceSize();
		if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) {
			long v5 = ;
			long v4 = v5;
			if ((p1.length < v4) <= 0) {
				RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
				FileChannel v11 = v9.getChannel();
				FileChannel v8 = v11;
				FileChannel v7 = v8;
				ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
				[B v13 = new [B(32);
				ByteBuffer v14 = v12.put(v13);
				ByteBuffer v15 = v12.putInt(428873843);
				ByteBuffer v16 = v12.putInt(p1.length);
				ByteBuffer v17 = v12.put(p1);
				Buffer v18 = v12.flip();
				Object v19 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				boolean v20 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
				if (v20 != 0) {
					int v21 = v7.write(v12);
					v7.force(1);
					byte[] v25 = PersistentDataBlockService.computeDigestLocked(0);
					if (v25 == 0) {
						FileChannel v26 = PersistentDataBlockService.getBlockOutputChannel();
						ByteBuffer v27 = ByteBuffer.allocate(32);
						ByteBuffer v28 = v27.put(v25);
						Buffer v29 = v27.flip();
						int v30 = v26.write(v27);
						v26.force(1);
						boolean v24 = 1;
						boolean v23 = v24;
						if (v23 == 0) {
							return p1.length;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		long v6 = PersistentDataBlockService.getBlockDeviceSize();
		if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) {
			long v5 = ;
			long v4 = v5;
			if ((p1.length < v4) <= 0) {
				RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
				FileChannel v11 = v9.getChannel();
				FileChannel v8 = v11;
				FileChannel v7 = v8;
				ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
				[B v13 = new [B(32);
				ByteBuffer v14 = v12.put(v13);
				ByteBuffer v15 = v12.putInt(428873843);
				ByteBuffer v16 = v12.putInt(p1.length);
				ByteBuffer v17 = v12.put(p1);
				Buffer v18 = v12.flip();
				Object v19 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				boolean v20 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
				if (v20 != 0) {
					int v21 = v7.write(v12);
					v7.force(1);
					byte[] v25 = PersistentDataBlockService.computeDigestLocked(0);
					if (v25 == 0) {
						FileChannel v26 = PersistentDataBlockService.getBlockOutputChannel();
						ByteBuffer v27 = ByteBuffer.allocate(32);
						ByteBuffer v28 = v27.put(v25);
						Buffer v29 = v27.flip();
						int v30 = v26.write(v27);
						v26.force(1);
						boolean v24 = 1;
						boolean v23 = v24;
						if (v23 == 0) {
							return p1.length;
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	if (p2 != this.mAllowedUid) {
		long v6 = PersistentDataBlockService.getBlockDeviceSize();
		if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) {
			long v5 = ;
			long v4 = v5;
			if ((p1.length < v4) <= 0) {
				RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");
				FileChannel v11 = v9.getChannel();
				FileChannel v8 = v11;
				FileChannel v7 = v8;
				ByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));
				[B v13 = new [B(32);
				ByteBuffer v14 = v12.put(v13);
				ByteBuffer v15 = v12.putInt(428873843);
				ByteBuffer v16 = v12.putInt(p1.length);
				ByteBuffer v17 = v12.put(p1);
				Buffer v18 = v12.flip();
				Object v19 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
				boolean v20 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
				if (v20 != 0) {
					int v21 = v7.write(v12);
					v7.force(1);
					byte[] v25 = PersistentDataBlockService.computeDigestLocked(0);
					if (v25 == 0) {
						FileChannel v26 = PersistentDataBlockService.getBlockOutputChannel();
						ByteBuffer v27 = ByteBuffer.allocate(32);
						ByteBuffer v28 = v27.put(v25);
						Buffer v29 = v27.flip();
						int v30 = v26.write(v27);
						v26.force(1);
						boolean v24 = 1;
						boolean v23 = v24;
						if (v23 == 0) {
							return -1;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['RandomAccessFile v9 = new RandomAccessFile(this.mDataBlockFile,"rw");\nFileChannel v11 = v9.getChannel();\nByteBuffer v12 = ByteBuffer.allocate(((p1.length + 8) + 32));\nv12.put(p1);\nint v21 = v7.write(v12);', 'PersistentDataBlockService.getBlockDeviceSize();\nboolean v20 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);\nbyte[] v25 = PersistentDataBlockService.computeDigestLocked(0);']

The method write has the following similar APIs:

- API Name: getOemUnlockEnabled()Z with Similarity Score: 0.8232997059822083
  - Access Control Level: NONE and the following code:
File v6 = new File(this.mDataBlockFile);
FileInputStream v5 = new FileInputStream(v6);
DataInputStream v4 = new DataInputStream(v5);
long v10 = PersistentDataBlockService.getBlockDeviceSize();
long v11 = v4.skip((v10 - 1));
byte v12 = v4.readByte();

- API Name: getMaximumDataBlockSize()J with Similarity Score: 0.7826038599014282
  - Access Control Level: NONE and the following code:
long v6 = PersistentDataBlockService.getBlockDeviceSize();
if (((((((v6 - 8) - 32) - 10000) - 1000) - 1) < 102400) > 0) {
return v4;

