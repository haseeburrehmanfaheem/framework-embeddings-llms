The method onTranslationCapabilitiesRequest has the following code snippet:

This is path 1 for the API with depth 2:
public void onTranslationCapabilitiesRequest(int p1, int p2, ResultReceiver p3, int p4){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p4);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		String v6 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v6 != 0) {
			String v7 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
			boolean v8 = v6.equals(v7);
			boolean v5 = v8;
			boolean v4 = v5;
			if (v4 != 0) {
				int v11 = Binder.getCallingUid();
				String v12 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
				if (v12 != 0) {
					ComponentName v13 = ComponentName.unflattenFromString(v12);
					if (v13 != 0) {
						String v14 = v13.getPackageName();
						Context v15 = TranslationManagerService.getContext();
						PackageManager v16 = v15.getPackageManager();
						int v17 = v16.getPackageUidAsUser(v14, p2);
						boolean v10 = 0;
						boolean v9 = v10;
						if (v9 == 0) {
							if (this.mRemoteTranslationService != 0) {
								String v27 = TranslationManagerServiceImpl.getComponentNameLocked();
								if (v27 != 0) {
									ComponentName v28 = ComponentName.unflattenFromString(v27);
									RemoteTranslationService v29 = new RemoteTranslationService(v30,v28,AbstractPerUserSystemService.mUserId,0,this.mRemoteServiceCallback);
									Context v30 = TranslationManagerServiceImpl.getContext();
									this.mRemoteTranslationService = v29;
									RemoteTranslationService v26 = this.mRemoteTranslationService;
									if (v26 == 0) {
										RemoteTranslationService$$ExternalSyntheticLambda2 v33 = new RemoteTranslationService$$ExternalSyntheticLambda2(p1,p2,p3);
										boolean v35 = RemoteTranslationService.run(v33);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void onTranslationCapabilitiesRequest(int p1, int p2, ResultReceiver p3, int p4){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p4);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		String v6 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v6 != 0) {
			boolean v5 = 0;
			boolean v4 = v5;
			if (v4 != 0) {
				int v9 = Binder.getCallingUid();
				String v10 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
				if (v10 != 0) {
					ComponentName v11 = ComponentName.unflattenFromString(v10);
					if (v11 != 0) {
						String v12 = v11.getPackageName();
						Context v13 = TranslationManagerService.getContext();
						PackageManager v14 = v13.getPackageManager();
						int v15 = v14.getPackageUidAsUser(v12, p2);
						boolean v8 = 0;
						boolean v7 = v8;
						if (v7 == 0) {
							if (this.mRemoteTranslationService != 0) {
								String v25 = TranslationManagerServiceImpl.getComponentNameLocked();
								if (v25 != 0) {
									ComponentName v26 = ComponentName.unflattenFromString(v25);
									RemoteTranslationService v27 = new RemoteTranslationService(v28,v26,AbstractPerUserSystemService.mUserId,0,this.mRemoteServiceCallback);
									Context v28 = TranslationManagerServiceImpl.getContext();
									this.mRemoteTranslationService = v27;
									RemoteTranslationService v24 = this.mRemoteTranslationService;
									if (v24 == 0) {
										RemoteTranslationService$$ExternalSyntheticLambda2 v31 = new RemoteTranslationService$$ExternalSyntheticLambda2(p1,p2,p3);
										boolean v33 = RemoteTranslationService.run(v31);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void onTranslationCapabilitiesRequest(int p1, int p2, ResultReceiver p3, int p4){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p4);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		String v6 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
		if (v6 != 0) {
			String v7 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
			boolean v8 = v6.equals(v7);
			boolean v5 = v8;
			boolean v4 = v5;
			if (v4 != 0) {
				int v11 = Binder.getCallingUid();
				String v12 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2);
				if (v12 != 0) {
					ComponentName v13 = ComponentName.unflattenFromString(v12);
					if (v13 != 0) {
						boolean v10 = 0;
						boolean v9 = v10;
						if (v9 == 0) {
							if (this.mRemoteTranslationService != 0) {
								String v23 = TranslationManagerServiceImpl.getComponentNameLocked();
								if (v23 != 0) {
									ComponentName v24 = ComponentName.unflattenFromString(v23);
									RemoteTranslationService v25 = new RemoteTranslationService(v26,v24,AbstractPerUserSystemService.mUserId,0,this.mRemoteServiceCallback);
									Context v26 = TranslationManagerServiceImpl.getContext();
									this.mRemoteTranslationService = v25;
									RemoteTranslationService v22 = this.mRemoteTranslationService;
									if (v22 == 0) {
										RemoteTranslationService$$ExternalSyntheticLambda2 v29 = new RemoteTranslationService$$ExternalSyntheticLambda2(p1,p2,p3);
										boolean v31 = RemoteTranslationService.run(v29);
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p4);\nString v6 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);\nComponentName v13 = ComponentName.unflattenFromString(v12);\nRemoteTranslationService v29 = new RemoteTranslationService(v30,v28,AbstractPerUserSystemService.mUserId,0,this.mRemoteServiceCallback);\nRemoteTranslationService$$ExternalSyntheticLambda2 v31 = new RemoteTranslationService$$ExternalSyntheticLambda2(p1,p2,p3);\nboolean v33 = RemoteTranslationService.run(v31);']

The method onTranslationCapabilitiesRequest has the following similar APIs:

- API Name: onSessionCreated(Landroid/view/translation/TranslationContext;ILcom/android/internal/os/IResultReceiver;I)V with Similarity Score: 0.9243061542510986
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p4);
String v6 = AbstractMasterSystemService.mServiceNameResolver.getDefaultServiceName(p2);
if (v6 != 0) { String v7 = AbstractMasterSystemService.mServiceNameResolver.getServiceName(p2); }
RemoteTranslationService v29 = new RemoteTranslationService(v30,v28,AbstractPerUserSystemService.mUserId,0,this.mRemoteServiceCallback);
this.mRemoteTranslationService = v29;

- API Name: registerTranslationCapabilityCallback(Landroid/os/IRemoteCallback;I)V with Similarity Score: 0.8992754220962524
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
RemoteTranslationService v11 = new RemoteTranslationService(v12,v10,AbstractPerUserSystemService.mUserId,0,this.mRemoteServiceCallback);
this.mRemoteTranslationService = v11;

