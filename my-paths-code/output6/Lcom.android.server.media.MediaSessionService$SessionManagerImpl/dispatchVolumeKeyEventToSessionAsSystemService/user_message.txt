This is path 1 for the API with depth 2:
public void dispatchVolumeKeyEventToSessionAsSystemService(String p1, String p2, KeyEvent p3, MediaSession$Token p4){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	Object v4 = this.mLock;
	int v7 = p2.getUid();
	UserHandle v8 = UserHandle.getUserHandleForUid(v7);
	int v9 = v8.getIdentifier();
	MediaSessionService$FullUserRecord v10 = MediaSessionService.getFullUserRecordLocked(v9);
	if (v10 == 0) {
		MediaSessionStack v11 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v10);
		MediaSessionRecord v12 = v11.getMediaSessionRecord(p2);
		MediaSessionRecord v6 = v12;
		MediaSessionRecord v5 = v6;
		StringBuilder v13 = new StringBuilder();
		StringBuilder v15 = v13.append("dispatchVolumeKeyEventToSessionAsSystemService, pkg=");
		StringBuilder v16 = v13.append(p1);
		StringBuilder v17 = v13.append(", opPkg=");
		StringBuilder v18 = v13.append(p2);
		StringBuilder v19 = v13.append(", pid=");
		StringBuilder v20 = v13.append(v1);
		StringBuilder v21 = v13.append(", uid=");
		StringBuilder v22 = v13.append(v2);
		StringBuilder v23 = v13.append(", sessionToken=");
		StringBuilder v24 = v13.append(p4);
		StringBuilder v25 = v13.append(", event=");
		StringBuilder v26 = v13.append(p3);
		StringBuilder v27 = v13.append(", session=");
		StringBuilder v28 = v13.append(v5);
		String v29 = v13.toString();
		int v30 = Log.d("MediaSessionService", v29);
		if (v5 != 0) {
			int v31 = p3.getAction();
			if (v31 == 0) {
				int v32 = p3.getKeyCode();
				if (v32 == 24) {
					if (v32 == 25) {
						if (v32 == 164) {
							if (this.mPlaybackState != 0) {
								boolean v35 = this.mPlaybackState.isActive();
								if (v35 != 1) {
									boolean v34 = ;
									if (v34 != 0) {
										if (((this.mFlags & 65536) < 0) == 0) {
											boolean v36 = ;
											if (v36 == 0) {
												if (this.mVolumeType != 1) {
													if (this.mAudioAttrs != 0) {
														int v38 = this.mAudioAttrs.getVolumeControlStream();
														if (v38 != -2147483648) {
															int v39 = this.DEFAULT_ATTRIBUTES.getVolumeControlStream();
															int v37 = ;
															if (this.DEBUG == 0) {
																StringBuilder v41 = new StringBuilder();
																StringBuilder v43 = v41.append("adjusting local volume, stream=");
																StringBuilder v44 = v41.append(v37);
																StringBuilder v45 = v41.append(", dir=");
																StringBuilder v46 = v41.append(p6);
																StringBuilder v47 = v41.append(", asSystemService=");
																StringBuilder v48 = v41.append(p5);
																StringBuilder v49 = v41.append(", useSuggested=");
																StringBuilder v50 = v41.append(p8);
																String v51 = v41.toString();
																int v52 = Log.w("MediaSessionRecord", v51);
																if (p5 == 0) {
																	String v53 = this.mContext.getOpPackageName();
																	int v54 = Process.myPid();
																	MediaSessionRecord$2 v55 = new MediaSessionRecord$2(MediaSessionRecord,p8,v37,p6,,,,,(p7 & 4));
																	boolean v57 = this.mHandler.post(v55);
																	Binder.restoreCallingIdentity(v3);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void dispatchVolumeKeyEventToSessionAsSystemService(String p1, String p2, KeyEvent p3, MediaSession$Token p4){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	Object v4 = this.mLock;
	int v7 = p2.getUid();
	UserHandle v8 = UserHandle.getUserHandleForUid(v7);
	int v9 = v8.getIdentifier();
	MediaSessionService$FullUserRecord v10 = MediaSessionService.getFullUserRecordLocked(v9);
	if (v10 == 0) {
		MediaSessionStack v11 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v10);
		MediaSessionRecord v12 = v11.getMediaSessionRecord(p2);
		MediaSessionRecord v6 = v12;
		MediaSessionRecord v5 = v6;
		StringBuilder v13 = new StringBuilder();
		StringBuilder v15 = v13.append("dispatchVolumeKeyEventToSessionAsSystemService, pkg=");
		StringBuilder v16 = v13.append(p1);
		StringBuilder v17 = v13.append(", opPkg=");
		StringBuilder v18 = v13.append(p2);
		StringBuilder v19 = v13.append(", pid=");
		StringBuilder v20 = v13.append(v1);
		StringBuilder v21 = v13.append(", uid=");
		StringBuilder v22 = v13.append(v2);
		StringBuilder v23 = v13.append(", sessionToken=");
		StringBuilder v24 = v13.append(p4);
		StringBuilder v25 = v13.append(", event=");
		StringBuilder v26 = v13.append(p3);
		StringBuilder v27 = v13.append(", session=");
		StringBuilder v28 = v13.append(v5);
		String v29 = v13.toString();
		int v30 = Log.d("MediaSessionService", v29);
		if (v5 != 0) {
			StringBuilder v31 = new StringBuilder();
			StringBuilder v33 = v31.append("Failed to find session to dispatch key event, token=");
			StringBuilder v34 = v31.append(p4);
			StringBuilder v35 = v31.append(". Fallbacks to the default handling.");
			String v36 = v31.toString();
			int v37 = Log.w("MediaSessionService", v36);
			int v39 = p3.getAction();
			if (v39 != 0) {
				int v40 = p3.getAction();
				if (v40 != 1) {
					int v41 = p3.getKeyCode();
					if (v41 == 24) {
						if (v41 == 25) {
							if (v41 == 164) {
								if ( != 0) {
									if ( == 0) {
										if (0 != 0) {
											if ( == 0) {
												if ( == 0) {
													if ( == 0) {
														boolean v43 = MediaSessionService.-$$Nest$misGlobalPriorityActiveLocked(this.this$0);
														if (v43 == 0) {
															MediaSessionRecord v44 = MediaSessionService.-$$Nest$fgetmGlobalPrioritySession(this.this$0);
															boolean v45 = MediaSessionService$SessionManagerImpl.isValidLocalStreamType(p7);
															if (v45 == 0) {
																boolean v46 = AudioSystem.isStreamActive(p7, 0);
																if (v46 == 0) {
																	if ( == 0) {
																		if ( == 0) {
																			StringBuilder v47 = new StringBuilder();
																			StringBuilder v49 = v47.append("Adjusting suggestedStream=");
																			StringBuilder v50 = v47.append(p7);
																			StringBuilder v51 = v47.append(" by ");
																			StringBuilder v52 = v47.append();
																			StringBuilder v53 = v47.append(". flags=");
																			StringBuilder v54 = v47.append();
																			StringBuilder v55 = v47.append(", preferSuggestedStream=");
																			StringBuilder v56 = v47.append();
																			StringBuilder v57 = v47.append(", session=");
																			StringBuilder v58 = v47.append();
																			String v59 = v47.toString();
																			int v60 = Log.d("MediaSessionService", v59);
																			if (p8 == 0) {
																				boolean v61 = AudioSystem.isStreamActive(3, 0);
																				if (v61 != 0) {
																					StringBuilder v62 = new StringBuilder();
																					StringBuilder v64 = v62.append("Nothing is playing on the music stream. Skipping volume event, flags=");
																					StringBuilder v65 = v62.append();
																					String v66 = v62.toString();
																					int v67 = Log.d("MediaSessionService", v66);
																					Binder.restoreCallingIdentity(v3);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void dispatchVolumeKeyEventToSessionAsSystemService(String p1, String p2, KeyEvent p3, MediaSession$Token p4){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	Object v4 = this.mLock;
	int v7 = p2.getUid();
	UserHandle v8 = UserHandle.getUserHandleForUid(v7);
	int v9 = v8.getIdentifier();
	MediaSessionService$FullUserRecord v10 = MediaSessionService.getFullUserRecordLocked(v9);
	if (v10 == 0) {
		MediaSessionStack v11 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v10);
		MediaSessionRecord v12 = v11.getMediaSessionRecord(p2);
		MediaSessionRecord v6 = v12;
		MediaSessionRecord v5 = v6;
		StringBuilder v13 = new StringBuilder();
		StringBuilder v15 = v13.append("dispatchVolumeKeyEventToSessionAsSystemService, pkg=");
		StringBuilder v16 = v13.append(p1);
		StringBuilder v17 = v13.append(", opPkg=");
		StringBuilder v18 = v13.append(p2);
		StringBuilder v19 = v13.append(", pid=");
		StringBuilder v20 = v13.append(v1);
		StringBuilder v21 = v13.append(", uid=");
		StringBuilder v22 = v13.append(v2);
		StringBuilder v23 = v13.append(", sessionToken=");
		StringBuilder v24 = v13.append(p4);
		StringBuilder v25 = v13.append(", event=");
		StringBuilder v26 = v13.append(p3);
		StringBuilder v27 = v13.append(", session=");
		StringBuilder v28 = v13.append(v5);
		String v29 = v13.toString();
		int v30 = Log.d("MediaSessionService", v29);
		if (v5 != 0) {
			StringBuilder v31 = new StringBuilder();
			StringBuilder v33 = v31.append("Failed to find session to dispatch key event, token=");
			StringBuilder v34 = v31.append(p4);
			StringBuilder v35 = v31.append(". Fallbacks to the default handling.");
			String v36 = v31.toString();
			int v37 = Log.w("MediaSessionService", v36);
			int v39 = p3.getAction();
			if (v39 != 0) {
				int v40 = p3.getAction();
				if (v40 != 1) {
					int v41 = p3.getKeyCode();
					if (v41 == 24) {
						if (v41 == 25) {
							if (v41 == 164) {
								if ( != 0) {
									if ( == 0) {
										if (0 != 0) {
											if ( == 0) {
												if ( == 0) {
													if ( == 0) {
														if ( == 0) {
															int v42 = p3.getRepeatCount();
															if (v42 != 0) {
																boolean v44 = MediaSessionService.-$$Nest$misGlobalPriorityActiveLocked(this.this$0);
																if (v44 == 0) {
																	MediaSessionRecord v45 = MediaSessionService.-$$Nest$fgetmGlobalPrioritySession(this.this$0);
																	boolean v46 = MediaSessionService$SessionManagerImpl.isValidLocalStreamType(p7);
																	if (v46 == 0) {
																		boolean v47 = AudioSystem.isStreamActive(p7, 0);
																		if (v47 == 0) {
																			if ( == 0) {
																				if ( == 0) {
																					StringBuilder v48 = new StringBuilder();
																					StringBuilder v50 = v48.append("Adjusting suggestedStream=");
																					StringBuilder v51 = v48.append(p7);
																					StringBuilder v52 = v48.append(" by ");
																					StringBuilder v53 = v48.append(101);
																					StringBuilder v54 = v48.append(". flags=");
																					StringBuilder v55 = v48.append();
																					StringBuilder v56 = v48.append(", preferSuggestedStream=");
																					StringBuilder v57 = v48.append();
																					StringBuilder v58 = v48.append(", session=");
																					StringBuilder v59 = v48.append();
																					String v60 = v48.toString();
																					int v61 = Log.d("MediaSessionService", v60);
																					if (p8 == 0) {
																						boolean v62 = AudioSystem.isStreamActive(3, 0);
																						if (v62 != 0) {
																							StringBuilder v63 = new StringBuilder();
																							StringBuilder v65 = v63.append("Nothing is playing on the music stream. Skipping volume event, flags=");
																							StringBuilder v66 = v63.append();
																							String v67 = v63.toString();
																							int v68 = Log.d("MediaSessionService", v67);
																							Binder.restoreCallingIdentity(v3);
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
