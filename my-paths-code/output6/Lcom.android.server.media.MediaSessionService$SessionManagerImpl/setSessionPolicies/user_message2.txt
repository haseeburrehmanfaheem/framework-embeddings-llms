The method setSessionPolicies has the following code snippet:

This is path 1 for the API with depth 2:
public void setSessionPolicies(MediaSession$Token p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mLock;
	int v5 = p2.getUid();
	UserHandle v6 = UserHandle.getUserHandleForUid(v5);
	int v7 = v6.getIdentifier();
	MediaSessionService$FullUserRecord v8 = MediaSessionService.getFullUserRecordLocked(v7);
	if (v8 == 0) {
		MediaSessionStack v9 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v8);
		MediaSessionRecord v10 = v9.getMediaSessionRecord(p2);
		MediaSessionRecord v4 = v10;
		MediaSessionRecord v3 = v4;
		int v11 = v3.getUserId();
		int v14 = this.mFullUserIds.get(p2, -1);
		if (v14 >= 0) {
			Object v15 = this.mUserRecords.get(v14);
			MediaSessionService$FullUserRecord v13 = v15;
			MediaSessionService$FullUserRecord v12 = v13;
			if (v12 == 0) {
				v3.setSessionPolicies(p2);
				MediaSessionStack v17 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v12);
				int v19 = this.mPolicies;
				if ((v19 & 2) == 0) {
					if (this.DEBUG == 0) {
						StringBuilder v21 = new StringBuilder();
						StringBuilder v23 = v21.append("updateMediaButtonSessionIfNeeded, callers=");
						String v24 = MediaSessionStack.getCallers(2);
						StringBuilder v25 = v21.append(v24);
						String v26 = v21.toString();
						int v27 = Log.d("MediaSessionStack", v26);
						List v28 = this.mAudioPlayerStateMonitor.getSortedAudioPlaybackClientUids();
						int v29 = v28.size();
						if ( >= v29) {
							Object v30 = v28.get();
							int v31 = v30.intValue();
							MediaSessionRecordImpl v32 = MediaSessionStack.findMediaButtonSession(v31);
							if (v32 != 0) {
								int v33 = v32.getSessionPolicies();
								if ((v33 & 2) == 0) {
									if (this.DEBUG == 0) {
										StringBuilder v34 = new StringBuilder();
										StringBuilder v36 = v34.append("updateMediaButtonSessionIfNeeded, checking uid=");
										StringBuilder v37 = v34.append(v31);
										StringBuilder v38 = v34.append(", mediaButtonSession=");
										StringBuilder v39 = v34.append(v32);
										StringBuilder v40 = v34.append(", ignoreButtonSession=");
										StringBuilder v41 = v34.append();
										String v42 = v34.toString();
										int v43 = Log.d("MediaSessionStack", v42);
										if ( != 0) {
											int v44 = v32.getUid();
											this.mAudioPlayerStateMonitor.cleanUpAudioPlaybackUids(v44);
											if (v32 == this.mMediaButtonSession) {
												MediaSessionStack.updateMediaButtonSession(v32);
												Binder.restoreCallingIdentity(v1);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setSessionPolicies(MediaSession$Token p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mLock;
	int v5 = p2.getUid();
	UserHandle v6 = UserHandle.getUserHandleForUid(v5);
	int v7 = v6.getIdentifier();
	MediaSessionService$FullUserRecord v8 = MediaSessionService.getFullUserRecordLocked(v7);
	if (v8 == 0) {
		MediaSessionStack v9 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v8);
		MediaSessionRecord v10 = v9.getMediaSessionRecord(p2);
		MediaSessionRecord v4 = v10;
		MediaSessionRecord v3 = v4;
		int v11 = v3.getUserId();
		int v14 = this.mFullUserIds.get(p2, -1);
		if (v14 >= 0) {
			Object v15 = this.mUserRecords.get(v14);
			MediaSessionService$FullUserRecord v13 = v15;
			MediaSessionService$FullUserRecord v12 = v13;
			if (v12 == 0) {
				v3.setSessionPolicies(p2);
				MediaSessionStack v17 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v12);
				int v19 = this.mPolicies;
				if ((v19 & 2) == 0) {
					if (this.DEBUG == 0) {
						StringBuilder v21 = new StringBuilder();
						StringBuilder v23 = v21.append("updateMediaButtonSessionIfNeeded, callers=");
						String v24 = MediaSessionStack.getCallers(2);
						StringBuilder v25 = v21.append(v24);
						String v26 = v21.toString();
						int v27 = Log.d("MediaSessionStack", v26);
						List v28 = this.mAudioPlayerStateMonitor.getSortedAudioPlaybackClientUids();
						int v29 = v28.size();
						if ( >= v29) {
							Object v30 = v28.get();
							int v31 = v30.intValue();
							MediaSessionRecordImpl v32 = MediaSessionStack.findMediaButtonSession(v31);
							if (v32 != 0) {
								int v33 = v32.getSessionPolicies();
								if ((v33 & 2) == 0) {
									if (this.DEBUG == 0) {
										StringBuilder v34 = new StringBuilder();
										StringBuilder v36 = v34.append("updateMediaButtonSessionIfNeeded, checking uid=");
										StringBuilder v37 = v34.append(v31);
										StringBuilder v38 = v34.append(", mediaButtonSession=");
										StringBuilder v39 = v34.append(v32);
										StringBuilder v40 = v34.append(", ignoreButtonSession=");
										StringBuilder v41 = v34.append();
										String v42 = v34.toString();
										int v43 = Log.d("MediaSessionStack", v42);
										if ( != 0) {
											int v44 = v32.getUid();
											this.mAudioPlayerStateMonitor.cleanUpAudioPlaybackUids(v44);
											if (v32 == this.mMediaButtonSession) {
												MediaSessionStack.updateMediaButtonSession(v32);
												Binder.restoreCallingIdentity(v1);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setSessionPolicies(MediaSession$Token p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mLock;
	int v5 = p2.getUid();
	UserHandle v6 = UserHandle.getUserHandleForUid(v5);
	int v7 = v6.getIdentifier();
	MediaSessionService$FullUserRecord v8 = MediaSessionService.getFullUserRecordLocked(v7);
	if (v8 == 0) {
		MediaSessionRecord v4 = 0;
		MediaSessionRecord v3 = v4;
		int v9 = v3.getUserId();
		int v12 = this.mFullUserIds.get(p2, -1);
		if (v12 >= 0) {
			Object v13 = this.mUserRecords.get(v12);
			MediaSessionService$FullUserRecord v11 = v13;
			MediaSessionService$FullUserRecord v10 = v11;
			if (v10 == 0) {
				v3.setSessionPolicies(p2);
				MediaSessionStack v15 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v10);
				int v17 = this.mPolicies;
				if ((v17 & 2) == 0) {
					if (this.DEBUG == 0) {
						StringBuilder v19 = new StringBuilder();
						StringBuilder v21 = v19.append("updateMediaButtonSessionIfNeeded, callers=");
						String v22 = MediaSessionStack.getCallers(2);
						StringBuilder v23 = v19.append(v22);
						String v24 = v19.toString();
						int v25 = Log.d("MediaSessionStack", v24);
						List v26 = this.mAudioPlayerStateMonitor.getSortedAudioPlaybackClientUids();
						int v27 = v26.size();
						if ( >= v27) {
							Object v28 = v26.get();
							int v29 = v28.intValue();
							MediaSessionRecordImpl v30 = MediaSessionStack.findMediaButtonSession(v29);
							if (v30 != 0) {
								int v31 = v30.getSessionPolicies();
								if ((v31 & 2) == 0) {
									if (this.DEBUG == 0) {
										StringBuilder v32 = new StringBuilder();
										StringBuilder v34 = v32.append("updateMediaButtonSessionIfNeeded, checking uid=");
										StringBuilder v35 = v32.append(v29);
										StringBuilder v36 = v32.append(", mediaButtonSession=");
										StringBuilder v37 = v32.append(v30);
										StringBuilder v38 = v32.append(", ignoreButtonSession=");
										StringBuilder v39 = v32.append();
										String v40 = v32.toString();
										int v41 = Log.d("MediaSessionStack", v40);
										if ( != 0) {
											int v42 = v30.getUid();
											this.mAudioPlayerStateMonitor.cleanUpAudioPlaybackUids(v42);
											if (v30 == this.mMediaButtonSession) {
												MediaSessionStack.updateMediaButtonSession(v30);
												Binder.restoreCallingIdentity(v1);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['v3.setSessionPolicies(p2);', 'MediaSessionStack v9 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v8);\nMediaSessionRecord v10 = v9.getMediaSessionRecord(p2);']

The method setSessionPolicies has the following similar APIs:

- API Name: dispatchVolumeKeyEventToSessionAsSystemService(Ljava/lang/String;Ljava/lang/String;Landroid/view/KeyEvent;Landroid/media/session/MediaSession$Token;)V with Similarity Score: 0.857999324798584
  - Access Control Level: SYS_OR_SIG and the following code:
int v7 = p2.getUid();
UserHandle v8 = UserHandle.getUserHandleForUid(v7);
MediaSessionService$FullUserRecord v10 = MediaSessionService.getFullUserRecordLocked(v9);
MediaSessionStack v11 = MediaSessionService$FullUserRecord.-$$Nest$fgetmPriorityStack(v10);
MediaSessionRecord v12 = v11.getMediaSessionRecord(p2);

- API Name: getMediaKeyEventSession(Ljava/lang/String;)Landroid/media/session/MediaSession$Token; with Similarity Score: 0.8316197395324707
  - Access Control Level: SYS_OR_SIG and the following code:
MediaSessionRecordImpl v22 = MediaSessionService.-$$Nest$fgetmGlobalPrioritySession(this.this$0);
if (v19 instanceof MediaSessionRecord == 0) {
MediaSession$Token v23 = v19.getSessionToken();
return v23;

