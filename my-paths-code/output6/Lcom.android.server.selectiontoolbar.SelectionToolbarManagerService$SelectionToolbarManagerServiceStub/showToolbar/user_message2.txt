The method showToolbar has the following code snippet:

This is path 1 for the API with depth 2:
public void showToolbar(ShowInfo p1, ISelectionToolbarCallback p2, int p3){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p3);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		if (this.mRemoteService != 0) {
			String v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();
			ComponentName v7 = ComponentName.unflattenFromString(v6);
			RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
			Context v9 = SelectionToolbarManagerServiceImpl.getContext();
			this.mRemoteService = v8;
			RemoteSelectionToolbarRenderService v5 = this.mRemoteService;
			if (v5 == 0) {
				int v11 = Binder.getCallingUid();
				RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda2 v13 = new RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda2(v11,p1,p2);
				boolean v15 = RemoteSelectionToolbarRenderService.run(v13);
				return;
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void showToolbar(ShowInfo p1, ISelectionToolbarCallback p2, int p3){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p3);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		if (this.mRemoteService != 0) {
			String v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();
			ComponentName v7 = ComponentName.unflattenFromString(v6);
			RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
			Context v9 = SelectionToolbarManagerServiceImpl.getContext();
			this.mRemoteService = v8;
			RemoteSelectionToolbarRenderService v5 = this.mRemoteService;
			if (v5 == 0) {
				return;
			}
		}
	}
}

and the following sink code:
['AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p3);\nRemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);', 'int v11 = Binder.getCallingUid();\nRemoteSelectionToolbarRenderService$$ExternalSyntheticLambda2 v13 = new RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda2(v11,p1,p2);\nboolean v15 = RemoteSelectionToolbarRenderService.run(v13);']

The method showToolbar has the following similar APIs:

- API Name: hideToolbar(JI)V with Similarity Score: 0.9646778106689453
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
String v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();
ComponentName v7 = ComponentName.unflattenFromString(v6);
RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
this.mRemoteService = v8;

- API Name: dismissToolbar(JI)V with Similarity Score: 0.954459547996521
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
String v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();
ComponentName v7 = ComponentName.unflattenFromString(v6);
Context v9 = SelectionToolbarManagerServiceImpl.getContext();
RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
this.mRemoteService = v8;

