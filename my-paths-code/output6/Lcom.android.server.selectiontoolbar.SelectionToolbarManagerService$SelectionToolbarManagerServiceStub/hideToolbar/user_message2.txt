The method hideToolbar has the following code snippet:

This is path 1 for the API with depth 2:
public void hideToolbar(long p1, int p2){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		if (this.mRemoteService != 0) {
			String v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();
			ComponentName v7 = ComponentName.unflattenFromString(v6);
			RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
			Context v9 = SelectionToolbarManagerServiceImpl.getContext();
			this.mRemoteService = v8;
			RemoteSelectionToolbarRenderService v5 = this.mRemoteService;
			if (v5 == 0) {
				RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda3 v12 = new RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda3(p1);
				boolean v14 = RemoteSelectionToolbarRenderService.run(v12);
				return;
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void hideToolbar(long p1, int p2){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		if (this.mRemoteService != 0) {
			String v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();
			ComponentName v7 = ComponentName.unflattenFromString(v6);
			RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
			Context v9 = SelectionToolbarManagerServiceImpl.getContext();
			this.mRemoteService = v8;
			RemoteSelectionToolbarRenderService v5 = this.mRemoteService;
			if (v5 == 0) {
				return;
			}
		}
	}
}

and the following sink code:
['RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda3 v12 = new RemoteSelectionToolbarRenderService$$ExternalSyntheticLambda3(p1);\nboolean v14 = RemoteSelectionToolbarRenderService.run(v12);', 'AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);\nString v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();\nComponentName v7 = ComponentName.unflattenFromString(v6);\nRemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);\nthis.mRemoteService = v8;']

The method hideToolbar has the following similar APIs:

- API Name: dismissToolbar(JI)V with Similarity Score: 0.9957807064056396
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p2);
String v6 = SelectionToolbarManagerServiceImpl.getComponentNameLocked();
ComponentName v7 = ComponentName.unflattenFromString(v6);
Context v9 = SelectionToolbarManagerServiceImpl.getContext();
RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);
this.mRemoteService = v8;

- API Name: showToolbar(Landroid/view/selectiontoolbar/ShowInfo;Landroid/view/selectiontoolbar/ISelectionToolbarCallback;I)V with Similarity Score: 0.9646778106689453
  - Access Control Level: NONE and the following code:
AbstractPerUserSystemService v3 = this.this$0.getServiceForUserLocked(p3);
RemoteSelectionToolbarRenderService v8 = new RemoteSelectionToolbarRenderService(v9,v7,AbstractPerUserSystemService.mUserId,this.mRemoteServiceCallback);

