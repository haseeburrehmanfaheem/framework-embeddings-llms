The method resetThrottling has the following code snippet:

This is path 1 for the API with depth 2:
public void resetThrottling(){
	boolean v2 = v4;
	if (v2 != 0) {
		int v6 = ShortcutService.injectBinderCallingUid();
		if (v6 == 2000) {
			if (v6 != 0) {
				boolean v5 = ;
				if (v5 == 0) {
					int v9 = IShortcutService$Stub.getCallingUid();
					int v8 = v9;
					int v10 = UserHandle.getUserId(v8);
					int v7 = v10;
					boolean v13 = this.mUnlockedUsers.get(p1);
					if (v13 == 0) {
						boolean v14 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
						boolean v12 = v14;
						if (v12 != 0) {
							boolean v16 = ShortcutService.isUserUnlockedL(p1);
							if (v16 != 0) {
								if (p1 == this.mLastLockedUser) {
									ShortcutService.wtf("User still locked");
									this.mLastLockedUser = p1;
									Object v18 = this.mUsers.get(p1);
									if (v18 != 0) {
										ShortcutUser v19 = ShortcutService.loadUserLocked(p1);
										if (v19 != 0) {
											ShortcutUser v20 = new ShortcutUser(ShortcutService,p1);
											this.mUsers.put(p1, );
											ShortcutService.checkPackageChanges(p1);
											ShortcutUser v15 = ;
											int v25 = this.mPackages.size();
											if ( < 0) {
												ShortcutService.scheduleSaveInner(p1);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void resetThrottling(){
	boolean v2 = v4;
	if (v2 != 0) {
		int v6 = ShortcutService.injectBinderCallingUid();
		if (v6 == 2000) {
			if (v6 != 0) {
				boolean v5 = ;
				if (v5 == 0) {
					int v9 = IShortcutService$Stub.getCallingUid();
					int v8 = v9;
					int v10 = UserHandle.getUserId(v8);
					int v7 = v10;
					boolean v13 = this.mUnlockedUsers.get(p1);
					if (v13 == 0) {
						boolean v14 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
						boolean v12 = v14;
						if (v12 != 0) {
							boolean v16 = ShortcutService.isUserUnlockedL(p1);
							if (v16 != 0) {
								if (p1 == this.mLastLockedUser) {
									ShortcutService.wtf("User still locked");
									this.mLastLockedUser = p1;
									Object v18 = this.mUsers.get(p1);
									if (v18 != 0) {
										ShortcutUser v19 = ShortcutService.loadUserLocked(p1);
										if (v19 != 0) {
											ShortcutUser v20 = new ShortcutUser(ShortcutService,p1);
											this.mUsers.put(p1, );
											ShortcutService.checkPackageChanges(p1);
											ShortcutUser v15 = ;
											int v25 = this.mPackages.size();
											if ( < 0) {
												ShortcutService.scheduleSaveInner(p1);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void resetThrottling(){
	boolean v2 = v4;
	if (v2 != 0) {
		int v6 = ShortcutService.injectBinderCallingUid();
		if (v6 == 2000) {
			if (v6 != 0) {
				boolean v5 = ;
				if (v5 == 0) {
					int v9 = IShortcutService$Stub.getCallingUid();
					int v8 = v9;
					int v10 = UserHandle.getUserId(v8);
					int v7 = v10;
					boolean v13 = this.mUnlockedUsers.get(p1);
					if (v13 == 0) {
						boolean v12 = 1;
						if (v12 != 0) {
							boolean v15 = ShortcutService.isUserUnlockedL(p1);
							if (v15 != 0) {
								if (p1 == this.mLastLockedUser) {
									ShortcutService.wtf("User still locked");
									this.mLastLockedUser = p1;
									Object v17 = this.mUsers.get(p1);
									if (v17 != 0) {
										ShortcutUser v18 = ShortcutService.loadUserLocked(p1);
										if (v18 != 0) {
											ShortcutUser v19 = new ShortcutUser(ShortcutService,p1);
											this.mUsers.put(p1, );
											ShortcutService.checkPackageChanges(p1);
											ShortcutUser v14 = ;
											int v24 = this.mPackages.size();
											if ( < 0) {
												ShortcutService.scheduleSaveInner(p1);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v6 = ShortcutService.injectBinderCallingUid();\nboolean v13 = this.mUnlockedUsers.get(p1);\nShortcutUser v20 = new ShortcutUser(ShortcutService,p1);\nthis.mUsers.put(p1, );', 'boolean v12 = 1;\nboolean v15 = ShortcutService.isUserUnlockedL(p1);\nthis.mLastLockedUser = p1;']

The method resetThrottling has the following similar APIs:

- API Name: enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.8612935543060303
  - Access Control Level: SYS_OR_SIG and the following code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
boolean v18 = this.mUnlockedUsers.get(p1);
ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
this.mUsers.put(p2, );

- API Name: onApplicationActive(Ljava/lang/String;I)V with Similarity Score: 0.8377100825309753
  - Access Control Level: NONE and the following code:
boolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
ShortcutUser v10 = ShortcutService.loadUserLocked(p2);
this.mUsers.put(p2, );
ShortcutPackage v15 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
Object v17 = this.mPackages.put(p1, v15);

