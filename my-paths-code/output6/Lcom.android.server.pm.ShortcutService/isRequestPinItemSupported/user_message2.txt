The method isRequestPinItemSupported has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isRequestPinItemSupported(int p1, int p2){
	boolean v2 = v4;
	if (v2 == 0) {
		long v5 = p0.injectClearCallingIdentity();
		int v8 = this.mService.getParentOrSelfUserId(p1);
		String v9 = this.mService.getDefaultLauncher(v8);
		if (v9 != 0) {
			ComponentName v10 = this.mService.injectGetPinConfirmationActivity(v9, v8, p2);
			if (v10 != 0) {
				Integer v11 = Integer.valueOf(v8);
				Pair v12 = Pair.create(v10, v11);
				Pair v7 = ;
				if (v7 == 0) {
					boolean v6 = ;
					p0.injectRestoreCallingIdentity(v5);
					return v6;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isRequestPinItemSupported(int p1, int p2){
	boolean v2 = v4;
	if (v2 == 0) {
		long v5 = p0.injectClearCallingIdentity();
		int v8 = this.mService.getParentOrSelfUserId(p1);
		String v9 = this.mService.getDefaultLauncher(v8);
		if (v9 != 0) {
			ComponentName v10 = this.mService.injectGetPinConfirmationActivity(v9, v8, p2);
			if (v10 != 0) {
				Pair v7 = ;
				if (v7 == 0) {
					boolean v6 = ;
					p0.injectRestoreCallingIdentity(v5);
					return v6;
				}
			}
		}
	}
}

and the following sink code:
['int v8 = this.mService.getParentOrSelfUserId(p1);\nString v9 = this.mService.getDefaultLauncher(v8);\nComponentName v10 = this.mService.injectGetPinConfirmationActivity(v9, v8, p2);\nPair v12 = Pair.create(v10, v11);', 'int v8 = this.mService.getParentOrSelfUserId(p1);\nString v9 = this.mService.getDefaultLauncher(v8);\nComponentName v10 = this.mService.injectGetPinConfirmationActivity(v9, v8, p2);']

The method isRequestPinItemSupported has the following similar APIs:

- API Name: startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/WaitResult; with Similarity Score: 0.7141454219818115
  - Access Control Level: SYS_OR_SIG and the following code:
int v12 = this.mAmInternal.handleIncomingUser(v9, v10, p12, 0, 0, "startActivityAndWait", 0);
int v11 = v12;
ActivityStarter$Request.intent = p4;
ActivityStarter v18 = v14.setCaller(p1);
ActivityStarter v19 = v18.setCallingPackage(p2);
ActivityStarter v20 = v19.setCallingFeatureId(p3);
ActivityStarter v21 = v20.setResolvedType(p5);
ActivityStarter v22 = v21.setResultTo(p6);
ActivityStarter v23 = v22.setResultWho(p7);
ActivityStarter v24 = v23.setRequestCode(p8);
ActivityStarter v25 = v24.setStartFlags(p9);
WaitResult v4 = new WaitResult();
int v35 = v34.execute();
return v4;

- API Name: startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/WaitResult; with Similarity Score: 0.7020662426948547
  - Access Control Level: SYS_OR_SIG and the following code:
int v12 = this.mAmInternal.handleIncomingUser(v9, v10, p12, 0, 0, "startActivityAndWait", 0);
int v11 = v12;
ActivityStarter$Request.intent = p4;
ActivityStarter v18 = v14.setCaller(p1);
ActivityStarter v19 = v18.setCallingPackage(p2);
ActivityStarter v20 = v19.setCallingFeatureId(p3);
ActivityStarter v21 = v20.setResolvedType(p5);
ActivityStarter v22 = v21.setResultTo(p6);
ActivityStarter v23 = v22.setResultWho(p7);
ActivityStarter v24 = v23.setRequestCode(p8);
ActivityStarter v25 = v24.setStartFlags(p9);
WaitResult v4 = new WaitResult();
int v35 = v34.execute();
return v4;

