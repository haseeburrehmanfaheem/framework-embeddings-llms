This is path 1 for the API with depth 2:
public void enableShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v19 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v17 = v19;
			if (v17 == 0) {
				boolean v22 = ShortcutService.isUserUnlockedL(p2);
				if (v22 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v24 = this.mUsers.get(p2);
						if (v24 != 0) {
							ShortcutUser v25 = ShortcutService.loadUserLocked(p2);
							if (v25 != 0) {
								ShortcutUser v26 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v21 = ;
								ShortcutPackage v31 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v31 != 0) {
									ShortcutPackage v32 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v34 = this.mPackages.put(p1, v32);
									ShortcutPackage v30 = ;
									ShortcutUser v35 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v20 = v30;
									v20.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
									int v40 = p2.size();
									if ( < 0) {
										Object v42 = Objects.requireNonNull(v20);
										String v43 = this.mPackageName;
										int v44 = this.mPackageUserId;
										ShortcutService$$ExternalSyntheticLambda28 v46 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v44,v43);
										Runnable v45 = v46;
										Object v49 = Objects.requireNonNull(p1);
										Object v50 = Objects.requireNonNull(v45);
										this.mHandler.removeCallbacksAndMessages(p1);
										boolean v52 = this.mHandler.postDelayed(v45, p1, 100);
										List v54 = ShortcutService.removeNonKeyFields(p2);
										List v55 = ShortcutService.removeNonKeyFields(p3);
										UserHandle v56 = UserHandle.of(v44);
										ShortcutService$$ExternalSyntheticLambda26 v57 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v44,v54,v43,v56,v55);
										ShortcutService.injectPostToHandler(v57);
										ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
										boolean v63 = 0;
										if (v63 == 0) {
											ShortcutService$$ExternalSyntheticLambda25 v65 = new ShortcutService$$ExternalSyntheticLambda25();
											ShortcutService.forEachLoadedUserLocked(v65);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void enableShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v15 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v18 = this.mUnlockedUsers.get(p1);
		if (v18 == 0) {
			boolean v17 = 1;
			if (v17 == 0) {
				boolean v21 = ShortcutService.isUserUnlockedL(p2);
				if (v21 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v23 = this.mUsers.get(p2);
						if (v23 != 0) {
							ShortcutUser v24 = ShortcutService.loadUserLocked(p2);
							if (v24 != 0) {
								ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v20 = ;
								ShortcutPackage v30 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v30 != 0) {
									ShortcutPackage v31 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v33 = this.mPackages.put(p1, v31);
									ShortcutPackage v29 = ;
									ShortcutUser v34 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v19 = v29;
									v19.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
									int v39 = p2.size();
									if ( < 0) {
										Object v41 = Objects.requireNonNull(v19);
										String v42 = this.mPackageName;
										int v43 = this.mPackageUserId;
										ShortcutService$$ExternalSyntheticLambda28 v45 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v43,v42);
										Runnable v44 = v45;
										Object v48 = Objects.requireNonNull(p1);
										Object v49 = Objects.requireNonNull(v44);
										this.mHandler.removeCallbacksAndMessages(p1);
										boolean v51 = this.mHandler.postDelayed(v44, p1, 100);
										List v53 = ShortcutService.removeNonKeyFields(p2);
										List v54 = ShortcutService.removeNonKeyFields(p3);
										UserHandle v55 = UserHandle.of(v43);
										ShortcutService$$ExternalSyntheticLambda26 v56 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v43,v53,v42,v55,v54);
										ShortcutService.injectPostToHandler(v56);
										ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
										boolean v62 = 0;
										if (v62 == 0) {
											ShortcutService$$ExternalSyntheticLambda25 v64 = new ShortcutService$$ExternalSyntheticLambda25();
											ShortcutService.forEachLoadedUserLocked(v64);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void enableShortcuts(String p1, List p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = v8;
	if (v6 != v4) {
		ApplicationInfo v11 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v12 = ShortcutService.isEphemeralApp(v11);
		boolean v10 = v12;
		Preconditions.checkState((v10 ^ 1), "Ephemeral apps can't use ShortcutManager");
		Object v14 = Objects.requireNonNull(p2, "shortcutIds must be provided");
		boolean v17 = this.mUnlockedUsers.get(p1);
		if (v17 == 0) {
			boolean v18 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v16 = v18;
			if (v16 == 0) {
				boolean v21 = ShortcutService.isUserUnlockedL(p2);
				if (v21 != 0) {
					if (p2 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked");
						this.mLastLockedUser = p2;
						Object v23 = this.mUsers.get(p2);
						if (v23 != 0) {
							ShortcutUser v24 = ShortcutService.loadUserLocked(p2);
							if (v24 != 0) {
								ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
								this.mUsers.put(p2, );
								ShortcutService.checkPackageChanges(p2);
								ShortcutUser v20 = ;
								ShortcutPackage v30 = ShortcutUser.getPackageShortcutsIfExists(p1);
								if (v30 != 0) {
									ShortcutPackage v31 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
									Object v33 = this.mPackages.put(p1, v31);
									ShortcutPackage v29 = ;
									ShortcutUser v34 = this.mShortcutUser;
									ShortcutUser.detectLocaleChange();
									ShortcutUser.rescanPackageIfNeeded(p1, 0);
									ShortcutPackage v19 = v29;
									v19.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
									int v39 = p2.size();
									if ( < 0) {
										Object v41 = Objects.requireNonNull(v19);
										String v42 = this.mPackageName;
										int v43 = this.mPackageUserId;
										ShortcutService$$ExternalSyntheticLambda28 v45 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v43,v42);
										Runnable v44 = v45;
										Object v48 = Objects.requireNonNull(p1);
										Object v49 = Objects.requireNonNull(v44);
										this.mHandler.removeCallbacksAndMessages(p1);
										boolean v51 = this.mHandler.postDelayed(v44, p1, 100);
										List v53 = ShortcutService.removeNonKeyFields(p2);
										List v54 = ShortcutService.removeNonKeyFields(p3);
										UserHandle v55 = UserHandle.of(v43);
										ShortcutService$$ExternalSyntheticLambda26 v56 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v43,v53,v42,v55,v54);
										ShortcutService.injectPostToHandler(v56);
										ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
										boolean v62 = 0;
										if (v62 == 0) {
											ShortcutService$$ExternalSyntheticLambda25 v64 = new ShortcutService$$ExternalSyntheticLambda25();
											ShortcutService.forEachLoadedUserLocked(v64);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
