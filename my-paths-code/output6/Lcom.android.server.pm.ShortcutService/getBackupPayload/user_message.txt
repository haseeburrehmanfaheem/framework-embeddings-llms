This is path 1 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p1);
		if (v5 != 0) {
			boolean v8 = this.mUnlockedUsers.get(p1);
			if (v8 == 0) {
				boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v7 = v9;
				if (v7 != 0) {
					if (p1 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p1;
						Object v12 = this.mUsers.get(p1);
						if (v12 != 0) {
							File v14 = ShortcutService.getUserFile(p1);
							AtomicFile v15 = new AtomicFile(v14);
							FileInputStream v17 = v15.openRead();
							ShortcutUser v18 = ShortcutService.loadUserInternal(p1, v17, 0);
							IoUtils.closeQuietly(v17);
							ShortcutUser v13 = v18;
							if (v13 != 0) {
								ShortcutUser v20 = new ShortcutUser(ShortcutService,p1);
								this.mUsers.put(p1, );
								boolean v24 = ShortcutService.injectIsSafeModeEnabled();
								if (v24 == 0) {
									long v25 = ShortcutService.getStatStartTime();
									ArrayList v26 = new ArrayList();
									ShortcutUser v28 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v29 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v26);
									v28.forAllPackageItems(v29);
									int v32 = v26.size();
									if (v32 <= 0) {
										int v33 = v26.size();
										if ( < 0) {
											long v34 = v28.getLastAppScanTime();
											ShortcutService.rescanUpdatedPackagesLocked(p1, v34);
											ShortcutService.logDurationStat(8, v25);
											ShortcutService.verifyStates();
											ShortcutUser v6 = ;
											if (v6 != 0) {
												ShortcutService$$ExternalSyntheticLambda1 v38 = new ShortcutService$$ExternalSyntheticLambda1();
												int v42 = this.mLaunchers.size();
												if ( >= v42) {
													int v44 = this.mPackages.size();
													if ( >= v44) {
														ShortcutService$$ExternalSyntheticLambda2 v45 = new ShortcutService$$ExternalSyntheticLambda2();
														v6.forAllPackages(v45);
														ShortcutService$$ExternalSyntheticLambda3 v48 = new ShortcutService$$ExternalSyntheticLambda3();
														v6.forAllLaunchers(v48);
														Integer v53 = Integer.valueOf(p1);
														boolean v54 = this.mDirtyUserIds.contains(v53);
														if (v54 != 0) {
															Integer v55 = Integer.valueOf(p1);
															boolean v56 = this.mDirtyUserIds.add(v55);
															this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
															boolean v58 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
															boolean v60 = this.mShutdown.get();
															if (v60 == 0) {
																Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
																int v62 = this.mDirtyUserIds.size();
																if (caughtException != 0) {
																	this.mWtfCount = (this.mWtfCount + 1);
																	Exception v66 = new Exception("Last failure was logged here:");
																	this.mLastWtfStacktrace = v66;
																	Trace.traceEnd(524288);
																	ByteArrayOutputStream v70 = new ByteArrayOutputStream(32768);
																	if (1 == 0) {
																		TypedXmlSerializer v73 = Xml.newFastSerializer();
																		String v74 = StandardCharsets.UTF_8.name();
																		v73.setOutput(v70, v74);
																		.startDocument(0, Boolean.TRUE);
																		boolean v78 = ShortcutService.isUserUnlockedL(p1);
																		if (v78 != 0) {
																			if (p1 == this.mLastLockedUser) {
																				ShortcutService.wtf("User still locked");
																				this.mLastLockedUser = p1;
																				Object v80 = this.mUsers.get(p1);
																				if (v80 != 0) {
																					ShortcutUser v81 = ShortcutService.loadUserLocked(p1);
																					if (v81 != 0) {
																						ShortcutUser v82 = new ShortcutUser(ShortcutService,p1);
																						this.mUsers.put(p1, );
																						ShortcutService.checkPackageChanges(p1);
																						ShortcutUser v77 = ;
																						XmlSerializer v87 = .startTag(0, "user");
																						if (p3 != 0) {
																							ShortcutService.writeAttr(, "locales", this.mKnownLocales);
																							ShortcutService.writeAttr(, "last-app-scan-time2", this.mLastAppScanTime);
																							ShortcutService.writeAttr(, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
																							ShortcutService.writeAttr(, "restore-from-fp", this.mRestoreFromOsFingerprint);
																							if (p3 != 0) {
																								File v92 = this.mService.injectUserDataPath(this.mUserId);
																								File v93 = new File(v92,"packages");
																								boolean v95 = FileUtils.deleteContents(v93);
																								File v96 = new File(v92,"launchers");
																								boolean v98 = FileUtils.deleteContents(v96);
																								int v99 = this.mLaunchers.size();
																								if ( >= v99) {
																									int v100 = this.mPackages.size();
																									if ( >= v100) {
																										XmlSerializer v101 = .endTag(0, "user");
																										.endDocument();
																										v70.flush();
																										byte[] v104 = v70.toByteArray();
																										ShortcutDumpFiles$$ExternalSyntheticLambda0 v106 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v104);
																										File v109 = this.mService.getDumpPath();
																										boolean v110 = v109.mkdirs();
																										boolean v111 = v109.exists();
																										if (v111 != 0) {
																											StringBuilder v112 = new StringBuilder();
																											boolean v108 = 0;
																											boolean v105 = v108;
																											return v104;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p1);
		if (v5 != 0) {
			boolean v8 = this.mUnlockedUsers.get(p1);
			if (v8 == 0) {
				boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v7 = v9;
				if (v7 != 0) {
					if (p1 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p1;
						Object v12 = this.mUsers.get(p1);
						if (v12 != 0) {
							File v14 = ShortcutService.getUserFile(p1);
							AtomicFile v15 = new AtomicFile(v14);
							FileInputStream v17 = v15.openRead();
							ShortcutUser v18 = ShortcutService.loadUserInternal(p1, v17, 0);
							IoUtils.closeQuietly(v17);
							ShortcutUser v13 = v18;
							if (v13 != 0) {
								ShortcutUser v20 = new ShortcutUser(ShortcutService,p1);
								this.mUsers.put(p1, );
								boolean v24 = ShortcutService.injectIsSafeModeEnabled();
								if (v24 == 0) {
									long v25 = ShortcutService.getStatStartTime();
									ArrayList v26 = new ArrayList();
									ShortcutUser v28 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v29 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v26);
									v28.forAllPackageItems(v29);
									int v32 = v26.size();
									if (v32 <= 0) {
										int v33 = v26.size();
										if ( < 0) {
											long v34 = v28.getLastAppScanTime();
											ShortcutService.rescanUpdatedPackagesLocked(p1, v34);
											ShortcutService.logDurationStat(8, v25);
											ShortcutService.verifyStates();
											ShortcutUser v6 = ;
											if (v6 != 0) {
												ShortcutService$$ExternalSyntheticLambda1 v38 = new ShortcutService$$ExternalSyntheticLambda1();
												int v42 = this.mLaunchers.size();
												if ( >= v42) {
													int v44 = this.mPackages.size();
													if ( >= v44) {
														ShortcutService$$ExternalSyntheticLambda2 v45 = new ShortcutService$$ExternalSyntheticLambda2();
														v6.forAllPackages(v45);
														ShortcutService$$ExternalSyntheticLambda3 v48 = new ShortcutService$$ExternalSyntheticLambda3();
														v6.forAllLaunchers(v48);
														Integer v53 = Integer.valueOf(p1);
														boolean v54 = this.mDirtyUserIds.contains(v53);
														if (v54 != 0) {
															Integer v55 = Integer.valueOf(p1);
															boolean v56 = this.mDirtyUserIds.add(v55);
															this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
															boolean v58 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
															boolean v60 = this.mShutdown.get();
															if (v60 == 0) {
																Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
																if (caughtException != 0) {
																	this.mWtfCount = (this.mWtfCount + 1);
																	Exception v65 = new Exception("Last failure was logged here:");
																	this.mLastWtfStacktrace = v65;
																	Trace.traceEnd(524288);
																	ByteArrayOutputStream v69 = new ByteArrayOutputStream(32768);
																	if (1 == 0) {
																		TypedXmlSerializer v72 = Xml.newFastSerializer();
																		String v73 = StandardCharsets.UTF_8.name();
																		v72.setOutput(v69, v73);
																		.startDocument(0, Boolean.TRUE);
																		boolean v77 = ShortcutService.isUserUnlockedL(p1);
																		if (v77 != 0) {
																			if (p1 == this.mLastLockedUser) {
																				ShortcutService.wtf("User still locked");
																				this.mLastLockedUser = p1;
																				Object v79 = this.mUsers.get(p1);
																				if (v79 != 0) {
																					ShortcutUser v80 = ShortcutService.loadUserLocked(p1);
																					if (v80 != 0) {
																						ShortcutUser v81 = new ShortcutUser(ShortcutService,p1);
																						this.mUsers.put(p1, );
																						ShortcutService.checkPackageChanges(p1);
																						ShortcutUser v76 = ;
																						XmlSerializer v86 = .startTag(0, "user");
																						if (p3 != 0) {
																							ShortcutService.writeAttr(, "locales", this.mKnownLocales);
																							ShortcutService.writeAttr(, "last-app-scan-time2", this.mLastAppScanTime);
																							ShortcutService.writeAttr(, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
																							ShortcutService.writeAttr(, "restore-from-fp", this.mRestoreFromOsFingerprint);
																							if (p3 != 0) {
																								File v91 = this.mService.injectUserDataPath(this.mUserId);
																								File v92 = new File(v91,"packages");
																								boolean v94 = FileUtils.deleteContents(v92);
																								File v95 = new File(v91,"launchers");
																								boolean v97 = FileUtils.deleteContents(v95);
																								int v98 = this.mLaunchers.size();
																								if ( >= v98) {
																									int v99 = this.mPackages.size();
																									if ( >= v99) {
																										XmlSerializer v100 = .endTag(0, "user");
																										.endDocument();
																										v69.flush();
																										byte[] v103 = v69.toByteArray();
																										ShortcutDumpFiles$$ExternalSyntheticLambda0 v105 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v103);
																										File v108 = this.mService.getDumpPath();
																										boolean v109 = v108.mkdirs();
																										boolean v110 = v108.exists();
																										if (v110 != 0) {
																											StringBuilder v111 = new StringBuilder();
																											boolean v107 = 0;
																											boolean v104 = v107;
																											return v103;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	if (v2 == 0) {
		boolean v5 = p0.isUserUnlockedL(p1);
		if (v5 != 0) {
			boolean v8 = this.mUnlockedUsers.get(p1);
			if (v8 == 0) {
				boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
				boolean v7 = v9;
				if (v7 != 0) {
					if (p1 == this.mLastLockedUser) {
						ShortcutService.wtf("User still locked", 0);
						this.mLastLockedUser = p1;
						Object v12 = this.mUsers.get(p1);
						if (v12 != 0) {
							File v14 = ShortcutService.getUserFile(p1);
							AtomicFile v15 = new AtomicFile(v14);
							FileInputStream v17 = v15.openRead();
							ShortcutUser v13 = 0;
							if (v13 != 0) {
								ShortcutUser v18 = new ShortcutUser(ShortcutService,p1);
								this.mUsers.put(p1, );
								boolean v22 = ShortcutService.injectIsSafeModeEnabled();
								if (v22 == 0) {
									long v23 = ShortcutService.getStatStartTime();
									ArrayList v24 = new ArrayList();
									ShortcutUser v26 = ShortcutService.getUserShortcutsLocked(p1);
									ShortcutService$$ExternalSyntheticLambda18 v27 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v24);
									v26.forAllPackageItems(v27);
									int v30 = v24.size();
									if (v30 <= 0) {
										int v31 = v24.size();
										if ( < 0) {
											long v32 = v26.getLastAppScanTime();
											ShortcutService.rescanUpdatedPackagesLocked(p1, v32);
											ShortcutService.logDurationStat(8, v23);
											ShortcutService.verifyStates();
											ShortcutUser v6 = ;
											if (v6 != 0) {
												ShortcutService$$ExternalSyntheticLambda1 v36 = new ShortcutService$$ExternalSyntheticLambda1();
												int v40 = this.mLaunchers.size();
												if ( >= v40) {
													int v42 = this.mPackages.size();
													if ( >= v42) {
														ShortcutService$$ExternalSyntheticLambda2 v43 = new ShortcutService$$ExternalSyntheticLambda2();
														v6.forAllPackages(v43);
														ShortcutService$$ExternalSyntheticLambda3 v46 = new ShortcutService$$ExternalSyntheticLambda3();
														v6.forAllLaunchers(v46);
														Integer v51 = Integer.valueOf(p1);
														boolean v52 = this.mDirtyUserIds.contains(v51);
														if (v52 != 0) {
															Integer v53 = Integer.valueOf(p1);
															boolean v54 = this.mDirtyUserIds.add(v53);
															this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
															boolean v56 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
															boolean v58 = this.mShutdown.get();
															if (v58 == 0) {
																Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
																int v60 = this.mDirtyUserIds.size();
																if (caughtException != 0) {
																	this.mWtfCount = (this.mWtfCount + 1);
																	Exception v64 = new Exception("Last failure was logged here:");
																	this.mLastWtfStacktrace = v64;
																	Trace.traceEnd(524288);
																	ByteArrayOutputStream v68 = new ByteArrayOutputStream(32768);
																	if (1 == 0) {
																		TypedXmlSerializer v71 = Xml.newFastSerializer();
																		String v72 = StandardCharsets.UTF_8.name();
																		v71.setOutput(v68, v72);
																		.startDocument(0, Boolean.TRUE);
																		boolean v76 = ShortcutService.isUserUnlockedL(p1);
																		if (v76 != 0) {
																			if (p1 == this.mLastLockedUser) {
																				ShortcutService.wtf("User still locked");
																				this.mLastLockedUser = p1;
																				Object v78 = this.mUsers.get(p1);
																				if (v78 != 0) {
																					ShortcutUser v79 = ShortcutService.loadUserLocked(p1);
																					if (v79 != 0) {
																						ShortcutUser v80 = new ShortcutUser(ShortcutService,p1);
																						this.mUsers.put(p1, );
																						ShortcutService.checkPackageChanges(p1);
																						ShortcutUser v75 = ;
																						XmlSerializer v85 = .startTag(0, "user");
																						if (p3 != 0) {
																							ShortcutService.writeAttr(, "locales", this.mKnownLocales);
																							ShortcutService.writeAttr(, "last-app-scan-time2", this.mLastAppScanTime);
																							ShortcutService.writeAttr(, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
																							ShortcutService.writeAttr(, "restore-from-fp", this.mRestoreFromOsFingerprint);
																							if (p3 != 0) {
																								File v90 = this.mService.injectUserDataPath(this.mUserId);
																								File v91 = new File(v90,"packages");
																								boolean v93 = FileUtils.deleteContents(v91);
																								File v94 = new File(v90,"launchers");
																								boolean v96 = FileUtils.deleteContents(v94);
																								int v97 = this.mLaunchers.size();
																								if ( >= v97) {
																									int v98 = this.mPackages.size();
																									if ( >= v98) {
																										XmlSerializer v99 = .endTag(0, "user");
																										.endDocument();
																										v68.flush();
																										byte[] v102 = v68.toByteArray();
																										ShortcutDumpFiles$$ExternalSyntheticLambda0 v104 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v102);
																										File v107 = this.mService.getDumpPath();
																										boolean v108 = v107.mkdirs();
																										boolean v109 = v107.exists();
																										if (v109 != 0) {
																											StringBuilder v110 = new StringBuilder();
																											boolean v106 = 0;
																											boolean v103 = v106;
																											return v102;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
