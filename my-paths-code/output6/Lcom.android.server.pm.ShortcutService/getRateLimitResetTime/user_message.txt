This is path 1 for the API with depth 2:
public long getRateLimitResetTime(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		boolean v17 = this.mUnlockedUsers.get(p1);
		if (v17 == 0) {
			boolean v18 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v16 = v18;
			if (v16 == 0) {
				long v21 = ShortcutService.injectCurrentTimeMillis();
				if ((this.mRawLastResetTime < 0) != 0) {
					if ((v21 < this.mRawLastResetTime) >= 0) {
						boolean v22 = ShortcutService.isClockValid(v21);
						if (v22 == 0) {
							this.mRawLastResetTime = v21;
							if ((this.mRawLastResetTime < this.mRawLastResetTime) == 0) {
								ShortcutService.scheduleSaveBaseState();
								long v19 = (this.mRawLastResetTime + this.mResetInterval);
								return v19;
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public long getRateLimitResetTime(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		boolean v17 = this.mUnlockedUsers.get(p1);
		if (v17 == 0) {
			boolean v16 = 1;
			if (v16 == 0) {
				long v20 = ShortcutService.injectCurrentTimeMillis();
				if ((this.mRawLastResetTime < 0) != 0) {
					if ((v20 < this.mRawLastResetTime) >= 0) {
						boolean v21 = ShortcutService.isClockValid(v20);
						if (v21 == 0) {
							this.mRawLastResetTime = v20;
							if ((this.mRawLastResetTime < this.mRawLastResetTime) == 0) {
								ShortcutService.scheduleSaveBaseState();
								long v18 = (this.mRawLastResetTime + this.mResetInterval);
								return v18;
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public long getRateLimitResetTime(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = v8;
	if (v6 != v4) {
		ApplicationInfo v11 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v12 = ShortcutService.isEphemeralApp(v11);
		boolean v10 = v12;
		Preconditions.checkState((v10 ^ 1), "Ephemeral apps can't use ShortcutManager");
		boolean v16 = this.mUnlockedUsers.get(p1);
		if (v16 == 0) {
			boolean v17 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
			boolean v15 = v17;
			if (v15 == 0) {
				long v20 = ShortcutService.injectCurrentTimeMillis();
				if ((this.mRawLastResetTime < 0) != 0) {
					if ((v20 < this.mRawLastResetTime) >= 0) {
						boolean v21 = ShortcutService.isClockValid(v20);
						if (v21 == 0) {
							this.mRawLastResetTime = v20;
							if ((this.mRawLastResetTime < this.mRawLastResetTime) == 0) {
								ShortcutService.scheduleSaveBaseState();
								long v18 = (this.mRawLastResetTime + this.mResetInterval);
								return v18;
							}
						}
					}
				}
			}
		}
	}
}
