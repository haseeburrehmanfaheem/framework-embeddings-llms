The method onApplicationActive has the following code snippet:

This is path 1 for the API with depth 2:
public void onApplicationActive(String p1, int p2){
	boolean v3 = this.mUnlockedUsers.get(p2);
	if (v3 == 0) {
		boolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
		boolean v2 = v4;
		if (v2 != 0) {
			boolean v7 = ShortcutService.isUserUnlockedL(p2);
			if (v7 != 0) {
				if (p2 == this.mLastLockedUser) {
					ShortcutService.wtf("User still locked");
					this.mLastLockedUser = p2;
					Object v9 = this.mUsers.get(p2);
					if (v9 != 0) {
						ShortcutUser v10 = ShortcutService.loadUserLocked(p2);
						if (v10 != 0) {
							ShortcutUser v11 = new ShortcutUser(ShortcutService,p2);
							this.mUsers.put(p2, );
							ShortcutService.checkPackageChanges(p2);
							ShortcutUser v6 = ;
							ShortcutPackage v16 = ShortcutUser.getPackageShortcutsIfExists(p1);
							if (v16 != 0) {
								ShortcutPackage v17 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
								Object v19 = this.mPackages.put(p1, v17);
								ShortcutPackage v15 = ;
								ShortcutPackage v5 = v15;
								v5.resetRateLimitingForCommandLineNoSaving();
								File v23 = new File(v24,"shortcuts.xml");
								File v24 = ShortcutService.injectUserDataPath(p1);
								File v22 = v23;
								File v26 = v22.getParentFile();
								boolean v27 = v26.mkdirs();
								AtomicFile v28 = new AtomicFile(v22);
								FileOutputStream v30 = v28.startWrite();
								if (0 == 0) {
									TypedXmlSerializer v32 = Xml.newFastSerializer();
									String v33 = StandardCharsets.UTF_8.name();
									v32.setOutput(v30, v33);
									.startDocument(0, Boolean.TRUE);
									ShortcutUser v36 = ShortcutService.getUserShortcutsLocked(p1);
									v36.saveToXml(, 0);
									.endDocument();
									v30.flush();
									v28.finishWrite(v30);
									long v42 = ShortcutService.getStatStartTime();
									ShortcutUser v43 = ShortcutService.getUserShortcutsLocked(p1);
									File v44 = ShortcutService.getUserBitmapFilePath(p1);
									File v45 = v44.listFiles();
									if (v45 != 0) {
										if ( >= v45.length) {
											ShortcutService.logDurationStat(5, v42);
											boolean v48 = ShortcutService.isUserUnlockedL(p1);
											if (v48 != 0) {
												if (p1 == this.mLastLockedUser) {
													ShortcutService.wtf("User still locked");
													this.mLastLockedUser = p1;
													Object v50 = this.mUsers.get(p1);
													if (v50 != 0) {
														ShortcutUser v51 = ShortcutService.loadUserLocked(p1);
														if (v51 != 0) {
															ShortcutUser v52 = new ShortcutUser(ShortcutService,p1);
															this.mUsers.put(p1, );
															ShortcutService.checkPackageChanges(p1);
															ShortcutUser v47 = ;
															int v57 = this.mPackages.size();
															if ( >= v57) {
																LogMaker v58 = new LogMaker(1717);
																LogMaker v60 = v58.setType(1);
																LogMaker v61 = v60.setSubtype(this.mUserId);
																this.mMetricsLogger.write(v61);
																LogMaker v63 = v58.setType(2);
																LogMaker v64 = v63.setSubtype();
																this.mMetricsLogger.write(v64);
																LogMaker v66 = v58.setType(3);
																LogMaker v67 = v66.setSubtype();
																this.mMetricsLogger.write(v67);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void onApplicationActive(String p1, int p2){
	boolean v3 = this.mUnlockedUsers.get(p2);
	if (v3 == 0) {
		boolean v2 = 1;
		if (v2 != 0) {
			boolean v6 = ShortcutService.isUserUnlockedL(p2);
			if (v6 != 0) {
				if (p2 == this.mLastLockedUser) {
					ShortcutService.wtf("User still locked");
					this.mLastLockedUser = p2;
					Object v8 = this.mUsers.get(p2);
					if (v8 != 0) {
						ShortcutUser v9 = ShortcutService.loadUserLocked(p2);
						if (v9 != 0) {
							ShortcutUser v10 = new ShortcutUser(ShortcutService,p2);
							this.mUsers.put(p2, );
							ShortcutService.checkPackageChanges(p2);
							ShortcutUser v5 = ;
							ShortcutPackage v15 = ShortcutUser.getPackageShortcutsIfExists(p1);
							if (v15 != 0) {
								ShortcutPackage v16 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
								Object v18 = this.mPackages.put(p1, v16);
								ShortcutPackage v14 = ;
								ShortcutPackage v4 = v14;
								v4.resetRateLimitingForCommandLineNoSaving();
								File v22 = new File(v23,"shortcuts.xml");
								File v23 = ShortcutService.injectUserDataPath(p1);
								File v21 = v22;
								File v25 = v21.getParentFile();
								boolean v26 = v25.mkdirs();
								AtomicFile v27 = new AtomicFile(v21);
								FileOutputStream v29 = v27.startWrite();
								if (0 == 0) {
									TypedXmlSerializer v31 = Xml.newFastSerializer();
									String v32 = StandardCharsets.UTF_8.name();
									v31.setOutput(v29, v32);
									.startDocument(0, Boolean.TRUE);
									ShortcutUser v35 = ShortcutService.getUserShortcutsLocked(p1);
									v35.saveToXml(, 0);
									.endDocument();
									v29.flush();
									v27.finishWrite(v29);
									long v41 = ShortcutService.getStatStartTime();
									ShortcutUser v42 = ShortcutService.getUserShortcutsLocked(p1);
									File v43 = ShortcutService.getUserBitmapFilePath(p1);
									File v44 = v43.listFiles();
									if (v44 != 0) {
										if ( >= v44.length) {
											ShortcutService.logDurationStat(5, v41);
											boolean v47 = ShortcutService.isUserUnlockedL(p1);
											if (v47 != 0) {
												if (p1 == this.mLastLockedUser) {
													ShortcutService.wtf("User still locked");
													this.mLastLockedUser = p1;
													Object v49 = this.mUsers.get(p1);
													if (v49 != 0) {
														ShortcutUser v50 = ShortcutService.loadUserLocked(p1);
														if (v50 != 0) {
															ShortcutUser v51 = new ShortcutUser(ShortcutService,p1);
															this.mUsers.put(p1, );
															ShortcutService.checkPackageChanges(p1);
															ShortcutUser v46 = ;
															int v56 = this.mPackages.size();
															if ( >= v56) {
																LogMaker v57 = new LogMaker(1717);
																LogMaker v59 = v57.setType(1);
																LogMaker v60 = v59.setSubtype(this.mUserId);
																this.mMetricsLogger.write(v60);
																LogMaker v62 = v57.setType(2);
																LogMaker v63 = v62.setSubtype();
																this.mMetricsLogger.write(v63);
																LogMaker v65 = v57.setType(3);
																LogMaker v66 = v65.setSubtype();
																this.mMetricsLogger.write(v66);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void onApplicationActive(String p1, int p2){
	boolean v3 = this.mUnlockedUsers.get(p2);
	if (v3 == 0) {
		boolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);
		boolean v2 = v4;
		if (v2 != 0) {
			boolean v7 = ShortcutService.isUserUnlockedL(p2);
			if (v7 != 0) {
				if (p2 == this.mLastLockedUser) {
					ShortcutService.wtf("User still locked");
					this.mLastLockedUser = p2;
					Object v9 = this.mUsers.get(p2);
					if (v9 != 0) {
						ShortcutUser v10 = ShortcutService.loadUserLocked(p2);
						if (v10 != 0) {
							this.mUsers.put(p2, );
							ShortcutService.checkPackageChanges(p2);
							ShortcutUser v6 = ;
							ShortcutPackage v14 = ShortcutUser.getPackageShortcutsIfExists(p1);
							if (v14 != 0) {
								ShortcutPackage v15 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
								Object v17 = this.mPackages.put(p1, v15);
								ShortcutPackage v13 = ;
								ShortcutPackage v5 = v13;
								v5.resetRateLimitingForCommandLineNoSaving();
								File v21 = new File(v22,"shortcuts.xml");
								File v22 = ShortcutService.injectUserDataPath(p1);
								File v20 = v21;
								File v24 = v20.getParentFile();
								boolean v25 = v24.mkdirs();
								AtomicFile v26 = new AtomicFile(v20);
								FileOutputStream v28 = v26.startWrite();
								if (0 == 0) {
									TypedXmlSerializer v30 = Xml.newFastSerializer();
									String v31 = StandardCharsets.UTF_8.name();
									v30.setOutput(v28, v31);
									.startDocument(0, Boolean.TRUE);
									ShortcutUser v34 = ShortcutService.getUserShortcutsLocked(p1);
									v34.saveToXml(, 0);
									.endDocument();
									v28.flush();
									v26.finishWrite(v28);
									long v40 = ShortcutService.getStatStartTime();
									ShortcutUser v41 = ShortcutService.getUserShortcutsLocked(p1);
									File v42 = ShortcutService.getUserBitmapFilePath(p1);
									File v43 = v42.listFiles();
									if (v43 != 0) {
										if ( >= v43.length) {
											ShortcutService.logDurationStat(5, v40);
											boolean v46 = ShortcutService.isUserUnlockedL(p1);
											if (v46 != 0) {
												if (p1 == this.mLastLockedUser) {
													ShortcutService.wtf("User still locked");
													this.mLastLockedUser = p1;
													Object v48 = this.mUsers.get(p1);
													if (v48 != 0) {
														ShortcutUser v49 = ShortcutService.loadUserLocked(p1);
														if (v49 != 0) {
															ShortcutUser v50 = new ShortcutUser(ShortcutService,p1);
															this.mUsers.put(p1, );
															ShortcutService.checkPackageChanges(p1);
															ShortcutUser v45 = ;
															int v55 = this.mPackages.size();
															if ( >= v55) {
																LogMaker v56 = new LogMaker(1717);
																LogMaker v58 = v56.setType(1);
																LogMaker v59 = v58.setSubtype(this.mUserId);
																this.mMetricsLogger.write(v59);
																LogMaker v61 = v56.setType(2);
																LogMaker v62 = v61.setSubtype();
																this.mMetricsLogger.write(v62);
																LogMaker v64 = v56.setType(3);
																LogMaker v65 = v64.setSubtype();
																this.mMetricsLogger.write(v65);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v3 = this.mUnlockedUsers.get(p2);\nShortcutUser v10 = ShortcutService.loadUserLocked(p2);\nthis.mUsers.put(p2, );\nShortcutPackage v16 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);\nObject v19 = this.mPackages.put(p1, v17);', 'boolean v4 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p2);\nShortcutUser v10 = ShortcutService.loadUserLocked(p2);\nthis.mUsers.put(p2, );\nShortcutPackage v15 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);\nObject v17 = this.mPackages.put(p1, v15);', 'TypedXmlSerializer v32 = Xml.newFastSerializer();\nv32.setOutput(v30, v33);\n.startDocument(0, Boolean.TRUE);\nShortcutUser v36 = ShortcutService.getUserShortcutsLocked(p1);\nv36.saveToXml(, 0);', 'TypedXmlSerializer v31 = Xml.newFastSerializer();\nv31.setOutput(v29, v32);\n.startDocument(0, Boolean.TRUE);\nShortcutUser v35 = ShortcutService.getUserShortcutsLocked(p1);\nv35.saveToXml(, 0);', 'TypedXmlSerializer v30 = Xml.newFastSerializer();\nv30.setOutput(v28, v31);\n.startDocument(0, Boolean.TRUE);\nShortcutUser v34 = ShortcutService.getUserShortcutsLocked(p1);\nv34.saveToXml(, 0);', 'boolean v3 = this.mUnlockedUsers.get(p2);\nShortcutUser v9 = ShortcutService.loadUserLocked(p2);\nthis.mUsers.put(p2, );\nShortcutPackage v16 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);\nObject v18 = this.mPackages.put(p1, v16);']

The method onApplicationActive has the following similar APIs:

- API Name: hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z with Similarity Score: 0.8990879058837891
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutUser v12 = ShortcutService.loadUserLocked(p2);
ShortcutPackage v18 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
Object v21 = this.mPackages.put(p1, v19);
boolean v22 = v7.hasShareTargets();
return v22;

- API Name: removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.8968936800956726
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutUser v25 = new ShortcutUser(ShortcutService,p2);
this.mUsers.put(p2, );
ShortcutService.checkPackageChanges(p2);
ShortcutPackage v31 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
Object v33 = this.mPackages.put(p1, v31);

