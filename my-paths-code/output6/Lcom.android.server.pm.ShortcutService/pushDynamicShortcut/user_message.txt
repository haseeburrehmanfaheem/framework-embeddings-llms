This is path 1 for the API with depth 2:
public void pushDynamicShortcut(String p1, ShortcutInfo p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		if (p2 != 0) {
			String v16 = this.mPackageName;
			boolean v17 = Objects.equals(p1, v16);
			if (v17 == 0) {
				ArrayList v18 = new ArrayList();
				boolean v22 = this.mUnlockedUsers.get(p1);
				if (v22 == 0) {
					boolean v23 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
					boolean v21 = v23;
					if (v21 == 0) {
						boolean v26 = ShortcutService.isUserUnlockedL(p2);
						if (v26 != 0) {
							if (p2 == this.mLastLockedUser) {
								ShortcutService.wtf("User still locked");
								this.mLastLockedUser = p2;
								Object v28 = this.mUsers.get(p2);
								if (v28 != 0) {
									ShortcutUser v29 = ShortcutService.loadUserLocked(p2);
									if (v29 != 0) {
										ShortcutUser v30 = new ShortcutUser(ShortcutService,p2);
										this.mUsers.put(p2, );
										ShortcutService.checkPackageChanges(p2);
										ShortcutUser v25 = ;
										ShortcutPackage v35 = ShortcutUser.getPackageShortcutsIfExists(p1);
										if (v35 != 0) {
											ShortcutPackage v36 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
											Object v38 = this.mPackages.put(p1, v36);
											ShortcutPackage v34 = ;
											ShortcutUser v39 = this.mShortcutUser;
											ShortcutUser.detectLocaleChange();
											ShortcutUser.rescanPackageIfNeeded(p1, 0);
											ShortcutPackage v24 = v34;
											String v43 = p2.getId();
											if (p1 != 0) {
												Object v46 = this.mShortcuts.get(p1);
												ShortcutInfo v45 = v46;
												if (v45 == 0) {
													boolean v48 = v45.isImmutable();
													if (v48 == 0) {
														if (p2 == 0) {
															boolean v49 = v45.isVisibleToPublisher();
															if (v49 != 0) {
																ShortcutInfo v50 = new ShortcutInfo(1);
																List v51 = Arrays.asList(v50);
																p0.fillInDefaultActivity(v51);
																boolean v53 = p2.hasRank();
																if (v53 != 0) {
																	p2.setRank(0);
																	ShortcutPackage$$ExternalSyntheticLambda18 v56 = new ShortcutPackage$$ExternalSyntheticLambda18();
																	int v59 = this.mShortcuts.size();
																	if ( < 0) {
																		p2.setImplicitRank(0);
																		boolean v63 = p1.isReturnedByServer();
																		if (v63 == 0) {
																			int v64 = Log.w("ShortcutService", "Re-publishing ShortcutInfo returned by server is not supported. Some information such as icon may lost from shortcut.");
																			ComponentName v65 = p1.getActivity();
																			if (v65 == 0) {
																				String v66 = p1.getPackage();
																				ComponentName v67 = p1.getActivity();
																				String v68 = v67.getPackageName();
																				boolean v69 = v66.equals(v68);
																				StringBuilder v70 = new StringBuilder();
																				StringBuilder v72 = v70.append("Cannot publish shortcut: activity ");
																				ComponentName v73 = p1.getActivity();
																				StringBuilder v74 = v70.append(v73);
																				StringBuilder v75 = v70.append(" does not belong to package ");
																				String v76 = p1.getPackage();
																				StringBuilder v77 = v70.append(v76);
																				String v78 = v70.toString();
																				Preconditions.checkState(v69, v78);
																				ComponentName v80 = p1.getActivity();
																				int v81 = p1.getUserId();
																				boolean v82 = ShortcutService.injectIsMainActivity(v80, v81);
																				StringBuilder v83 = new StringBuilder();
																				StringBuilder v85 = v83.append("Cannot publish shortcut: activity ");
																				ComponentName v86 = p1.getActivity();
																				StringBuilder v87 = v83.append(v86);
																				StringBuilder v88 = v83.append(" is not main activity");
																				String v89 = v83.toString();
																				Preconditions.checkState(v82, v89);
																				if (p2 != 0) {
																					p1.enforceMandatoryFields(0);
																					if (0 != 0) {
																						ComponentName v92 = p1.getActivity();
																						if (v92 == 0) {
																							Preconditions.checkState(, "Cannot publish shortcut: target activity is not set");
																							Icon v94 = p1.getIcon();
																							if (v94 == 0) {
																								Icon v95 = p1.getIcon();
																								Icon v96 = ShortcutInfo.validateIcon(v95);
																								int v97 = p1.getFlags();
																								p1.replaceFlags((v97 & 8192));
																								p2.setRankChanged();
																								boolean v102 = ShortcutInfo.hasFlags(64);
																								boolean v101 = (v102 ^ 1);
																								Preconditions.checkArgument(v101, "pushDynamicShortcuts() cannot publish disabled shortcuts");
																								this.mFlags = (this.mFlags | 1);
																								v18.clear();
																								String v106 = this.mId;
																								if (v106 != 0) {
																									Object v108 = this.mShortcuts.get(v106);
																									ShortcutInfo v107 = v108;
																									if (v107 != 0) {
																										int v109 = this.mMaxShortcuts;
																										ArrayMap v111 = new ArrayMap();
																										ShortcutPackage$$ExternalSyntheticLambda40 v113 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v111);
																										ShortcutPackage.forEachShortcut(v113);
																										ArrayMap v110 = v111;
																										ComponentName v116 = this.mActivity;
																										Object v117 = v110.get(v116);
																										if (v117 == 0) {
																											int v118 = v117.size();
																											if (v118 <= v109) {
																												if (v117 == 0) {
																													int v119 = v117.size();
																													if (v119 != v109) {
																														Collections.sort(v117, this.mShortcutTypeAndRankComparator);
																														Object v121 = v117.get((v109 - 1));
																														boolean v123 = ShortcutInfo.isDeclaredInManifest();
																														boolean v122 = v123;
																														if (v122 == 0) {
																															boolean v124 = v18.add(v121);
																															String v125 = this.mId;
																															ShortcutInfo v127 = ShortcutPackage.deleteOrDisableWithId(v125, 0, 0, 1, 0, 1);
																															ShortcutInfo v126 = v127;
																															if (v126 == 0) {
																																if ((this.mExcludedSurfaces & 1) == 0) {
																																	boolean v128 = ;
																																	if (v128 == 0) {
																																		boolean v130 = ShortcutUser.mService.isAppSearchEnabled();
																																		boolean v129 = v130;
																																		if (v129 == 0) {
																																			String v131 = this.mId;
																																			Object v132 = this.mTransientShortcuts.put(v131, p2);
																																			boolean v134 = ShortcutUser.mService.isAppSearchEnabled();
																																			boolean v133 = v134;
																																			if (v133 == 0) {
																																				ShortcutPackage$$ExternalSyntheticLambda11 v135 = new ShortcutPackage$$ExternalSyntheticLambda11(ShortcutPackage,p2);
																																				long v138 = Binder.clearCallingIdentity();
																																				v135.run();
																																				Binder.restoreCallingIdentity(v138);
																																				boolean v100 = ;
																																				if (v100 == 0) {
																																					boolean v141 = v18.isEmpty();
																																					if (v141 == 0) {
																																						Object v142 = v18.get(0);
																																						List v143 = Collections.singletonList(v142);
																																						v18.clear();
																																						boolean v145 = v18.add(p2);
																																						long v148 = System.currentTimeMillis();
																																						long v147 = v148;
																																						ShortcutPackage$$ExternalSyntheticLambda4 v149 = new ShortcutPackage$$ExternalSyntheticLambda4(v147);
																																						int v152 = this.mShortcuts.size();
																																						if ( < 0) {
																																							ArrayMap v154 = new ArrayMap();
																																							ShortcutPackage$$ExternalSyntheticLambda40 v156 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v154);
																																							ShortcutPackage.forEachShortcut(v156);
																																							ArrayMap v153 = v154;
																																							int v159 = v153.size();
																																							if ( < 0) {
																																								Object v161 = Objects.requireNonNull(v24);
																																								String v162 = this.mPackageName;
																																								int v163 = this.mPackageUserId;
																																								ShortcutService$$ExternalSyntheticLambda28 v165 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v163,v162);
																																								Runnable v164 = v165;
																																								Object v168 = Objects.requireNonNull(p1);
																																								Object v169 = Objects.requireNonNull(v164);
																																								this.mHandler.removeCallbacksAndMessages(p1);
																																								boolean v171 = this.mHandler.postDelayed(v164, p1, 100);
																																								List v173 = ShortcutService.removeNonKeyFields(p2);
																																								List v174 = ShortcutService.removeNonKeyFields(p3);
																																								UserHandle v175 = UserHandle.of(v163);
																																								ShortcutService$$ExternalSyntheticLambda26 v176 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v163,v173,v162,v175,v174);
																																								ShortcutService.injectPostToHandler(v176);
																																								ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																								String v181 = p2.getId();
																																								long v184 = Binder.clearCallingIdentity();
																																								long v183 = v184;
																																								this.mUsageStatsManagerInternal.reportShortcutUsage(p1, v181, p3);
																																								Binder.restoreCallingIdentity(v183);
																																								boolean v189 = 0;
																																								if (v189 == 0) {
																																									ShortcutService$$ExternalSyntheticLambda25 v191 = new ShortcutService$$ExternalSyntheticLambda25();
																																									ShortcutService.forEachLoadedUserLocked(v191);
																																									return;
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void pushDynamicShortcut(String p1, ShortcutInfo p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		if (p2 != 0) {
			String v16 = this.mPackageName;
			boolean v17 = Objects.equals(p1, v16);
			if (v17 == 0) {
				ArrayList v18 = new ArrayList();
				boolean v22 = this.mUnlockedUsers.get(p1);
				if (v22 == 0) {
					boolean v23 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
					boolean v21 = v23;
					if (v21 == 0) {
						boolean v26 = ShortcutService.isUserUnlockedL(p2);
						if (v26 != 0) {
							if (p2 == this.mLastLockedUser) {
								ShortcutService.wtf("User still locked");
								this.mLastLockedUser = p2;
								Object v28 = this.mUsers.get(p2);
								if (v28 != 0) {
									ShortcutUser v29 = ShortcutService.loadUserLocked(p2);
									if (v29 != 0) {
										ShortcutUser v30 = new ShortcutUser(ShortcutService,p2);
										this.mUsers.put(p2, );
										ShortcutService.checkPackageChanges(p2);
										ShortcutUser v25 = ;
										ShortcutPackage v35 = ShortcutUser.getPackageShortcutsIfExists(p1);
										if (v35 != 0) {
											ShortcutPackage v36 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
											Object v38 = this.mPackages.put(p1, v36);
											ShortcutPackage v34 = ;
											ShortcutUser v39 = this.mShortcutUser;
											ShortcutUser.detectLocaleChange();
											ShortcutUser.rescanPackageIfNeeded(p1, 0);
											ShortcutPackage v24 = v34;
											String v43 = p2.getId();
											if (p1 != 0) {
												Object v46 = this.mShortcuts.get(p1);
												ShortcutInfo v45 = v46;
												if (v45 == 0) {
													boolean v48 = v45.isImmutable();
													if (v48 == 0) {
														if (p2 == 0) {
															boolean v49 = v45.isVisibleToPublisher();
															if (v49 != 0) {
																ShortcutInfo v50 = new ShortcutInfo(1);
																List v51 = Arrays.asList(v50);
																p0.fillInDefaultActivity(v51);
																boolean v53 = p2.hasRank();
																if (v53 != 0) {
																	p2.setRank(0);
																	ShortcutPackage$$ExternalSyntheticLambda18 v56 = new ShortcutPackage$$ExternalSyntheticLambda18();
																	int v59 = this.mShortcuts.size();
																	if ( < 0) {
																		p2.setImplicitRank(0);
																		boolean v63 = p1.isReturnedByServer();
																		if (v63 == 0) {
																			int v64 = Log.w("ShortcutService", "Re-publishing ShortcutInfo returned by server is not supported. Some information such as icon may lost from shortcut.");
																			ComponentName v65 = p1.getActivity();
																			if (v65 == 0) {
																				String v66 = p1.getPackage();
																				ComponentName v67 = p1.getActivity();
																				String v68 = v67.getPackageName();
																				boolean v69 = v66.equals(v68);
																				StringBuilder v70 = new StringBuilder();
																				StringBuilder v72 = v70.append("Cannot publish shortcut: activity ");
																				ComponentName v73 = p1.getActivity();
																				StringBuilder v74 = v70.append(v73);
																				StringBuilder v75 = v70.append(" does not belong to package ");
																				String v76 = p1.getPackage();
																				StringBuilder v77 = v70.append(v76);
																				String v78 = v70.toString();
																				Preconditions.checkState(v69, v78);
																				ComponentName v80 = p1.getActivity();
																				int v81 = p1.getUserId();
																				boolean v82 = ShortcutService.injectIsMainActivity(v80, v81);
																				StringBuilder v83 = new StringBuilder();
																				StringBuilder v85 = v83.append("Cannot publish shortcut: activity ");
																				ComponentName v86 = p1.getActivity();
																				StringBuilder v87 = v83.append(v86);
																				StringBuilder v88 = v83.append(" is not main activity");
																				String v89 = v83.toString();
																				Preconditions.checkState(v82, v89);
																				if (p2 != 0) {
																					p1.enforceMandatoryFields(0);
																					if (0 != 0) {
																						ComponentName v92 = p1.getActivity();
																						if (v92 == 0) {
																							Preconditions.checkState(, "Cannot publish shortcut: target activity is not set");
																							Icon v94 = p1.getIcon();
																							if (v94 == 0) {
																								Icon v95 = p1.getIcon();
																								Icon v96 = ShortcutInfo.validateIcon(v95);
																								int v97 = p1.getFlags();
																								p1.replaceFlags((v97 & 8192));
																								p2.setRankChanged();
																								boolean v102 = ShortcutInfo.hasFlags(64);
																								boolean v101 = (v102 ^ 1);
																								Preconditions.checkArgument(v101, "pushDynamicShortcuts() cannot publish disabled shortcuts");
																								this.mFlags = (this.mFlags | 1);
																								v18.clear();
																								String v106 = this.mId;
																								if (v106 != 0) {
																									Object v108 = this.mShortcuts.get(v106);
																									ShortcutInfo v107 = v108;
																									if (v107 != 0) {
																										int v109 = this.mMaxShortcuts;
																										ArrayMap v111 = new ArrayMap();
																										ShortcutPackage$$ExternalSyntheticLambda40 v113 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v111);
																										ShortcutPackage.forEachShortcut(v113);
																										ArrayMap v110 = v111;
																										ComponentName v116 = this.mActivity;
																										Object v117 = v110.get(v116);
																										if (v117 == 0) {
																											int v118 = v117.size();
																											if (v118 <= v109) {
																												if (v117 == 0) {
																													int v119 = v117.size();
																													if (v119 != v109) {
																														Collections.sort(v117, this.mShortcutTypeAndRankComparator);
																														Object v121 = v117.get((v109 - 1));
																														boolean v123 = ShortcutInfo.isDeclaredInManifest();
																														boolean v122 = v123;
																														if (v122 == 0) {
																															boolean v124 = v18.add(v121);
																															String v125 = this.mId;
																															ShortcutInfo v127 = ShortcutPackage.deleteOrDisableWithId(v125, 0, 0, 1, 0, 1);
																															ShortcutInfo v126 = v127;
																															if (v126 == 0) {
																																if ((this.mExcludedSurfaces & 1) == 0) {
																																	boolean v128 = ;
																																	if (v128 == 0) {
																																		boolean v130 = ShortcutUser.mService.isAppSearchEnabled();
																																		boolean v129 = v130;
																																		if (v129 == 0) {
																																			String v131 = this.mId;
																																			Object v132 = this.mTransientShortcuts.put(v131, p2);
																																			boolean v134 = ShortcutUser.mService.isAppSearchEnabled();
																																			boolean v133 = v134;
																																			if (v133 == 0) {
																																				ShortcutPackage$$ExternalSyntheticLambda11 v135 = new ShortcutPackage$$ExternalSyntheticLambda11(ShortcutPackage,p2);
																																				long v138 = Binder.clearCallingIdentity();
																																				v135.run();
																																				Binder.restoreCallingIdentity(v138);
																																				boolean v100 = ;
																																				if (v100 == 0) {
																																					boolean v141 = v18.isEmpty();
																																					if (v141 == 0) {
																																						Object v142 = v18.get(0);
																																						List v143 = Collections.singletonList(v142);
																																						v18.clear();
																																						boolean v145 = v18.add(p2);
																																						long v148 = System.currentTimeMillis();
																																						long v147 = v148;
																																						ShortcutPackage$$ExternalSyntheticLambda4 v149 = new ShortcutPackage$$ExternalSyntheticLambda4(v147);
																																						int v152 = this.mShortcuts.size();
																																						if ( < 0) {
																																							ArrayMap v154 = new ArrayMap();
																																							ShortcutPackage$$ExternalSyntheticLambda40 v156 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v154);
																																							ShortcutPackage.forEachShortcut(v156);
																																							ArrayMap v153 = v154;
																																							int v159 = v153.size();
																																							if ( < 0) {
																																								Object v161 = Objects.requireNonNull(v24);
																																								String v162 = this.mPackageName;
																																								int v163 = this.mPackageUserId;
																																								ShortcutService$$ExternalSyntheticLambda28 v165 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v163,v162);
																																								Runnable v164 = v165;
																																								Object v168 = Objects.requireNonNull(p1);
																																								Object v169 = Objects.requireNonNull(v164);
																																								this.mHandler.removeCallbacksAndMessages(p1);
																																								boolean v171 = this.mHandler.postDelayed(v164, p1, 100);
																																								List v173 = ShortcutService.removeNonKeyFields(p2);
																																								List v174 = ShortcutService.removeNonKeyFields(p3);
																																								UserHandle v175 = UserHandle.of(v163);
																																								ShortcutService$$ExternalSyntheticLambda26 v176 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v163,v173,v162,v175,v174);
																																								ShortcutService.injectPostToHandler(v176);
																																								ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																								String v181 = p2.getId();
																																								long v184 = Binder.clearCallingIdentity();
																																								long v183 = v184;
																																								this.mUsageStatsManagerInternal.reportShortcutUsage(p1, v181, p3);
																																								Binder.restoreCallingIdentity(v183);
																																								boolean v189 = 0;
																																								if (v189 == 0) {
																																									ShortcutService$$ExternalSyntheticLambda25 v191 = new ShortcutService$$ExternalSyntheticLambda25();
																																									ShortcutService.forEachLoadedUserLocked(v191);
																																									return;
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void pushDynamicShortcut(String p1, ShortcutInfo p2, int p3){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	if (v6 != v4) {
		ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
		boolean v13 = ShortcutService.isEphemeralApp(v12);
		boolean v11 = v13;
		Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
		if (p2 != 0) {
			String v16 = this.mPackageName;
			boolean v17 = Objects.equals(p1, v16);
			if (v17 == 0) {
				ArrayList v18 = new ArrayList();
				boolean v22 = this.mUnlockedUsers.get(p1);
				if (v22 == 0) {
					boolean v23 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
					boolean v21 = v23;
					if (v21 == 0) {
						boolean v26 = ShortcutService.isUserUnlockedL(p2);
						if (v26 != 0) {
							if (p2 == this.mLastLockedUser) {
								ShortcutService.wtf("User still locked");
								this.mLastLockedUser = p2;
								Object v28 = this.mUsers.get(p2);
								if (v28 != 0) {
									ShortcutUser v29 = ShortcutService.loadUserLocked(p2);
									if (v29 != 0) {
										ShortcutUser v30 = new ShortcutUser(ShortcutService,p2);
										this.mUsers.put(p2, );
										ShortcutService.checkPackageChanges(p2);
										ShortcutUser v25 = ;
										ShortcutPackage v35 = ShortcutUser.getPackageShortcutsIfExists(p1);
										if (v35 != 0) {
											ShortcutPackage v36 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
											Object v38 = this.mPackages.put(p1, v36);
											ShortcutPackage v34 = ;
											ShortcutUser v39 = this.mShortcutUser;
											ShortcutUser.detectLocaleChange();
											ShortcutUser.rescanPackageIfNeeded(p1, 0);
											ShortcutPackage v24 = v34;
											String v43 = p2.getId();
											if (p1 != 0) {
												Object v46 = this.mShortcuts.get(p1);
												ShortcutInfo v45 = v46;
												if (v45 == 0) {
													boolean v48 = v45.isImmutable();
													if (v48 == 0) {
														if (p2 == 0) {
															boolean v49 = v45.isVisibleToPublisher();
															if (v49 != 0) {
																ShortcutInfo v50 = new ShortcutInfo(1);
																List v51 = Arrays.asList(v50);
																p0.fillInDefaultActivity(v51);
																boolean v53 = p2.hasRank();
																if (v53 != 0) {
																	ShortcutPackage$$ExternalSyntheticLambda18 v55 = new ShortcutPackage$$ExternalSyntheticLambda18();
																	int v58 = this.mShortcuts.size();
																	if ( < 0) {
																		p2.setImplicitRank(0);
																		boolean v62 = p1.isReturnedByServer();
																		if (v62 == 0) {
																			int v63 = Log.w("ShortcutService", "Re-publishing ShortcutInfo returned by server is not supported. Some information such as icon may lost from shortcut.");
																			ComponentName v64 = p1.getActivity();
																			if (v64 == 0) {
																				String v65 = p1.getPackage();
																				ComponentName v66 = p1.getActivity();
																				String v67 = v66.getPackageName();
																				boolean v68 = v65.equals(v67);
																				StringBuilder v69 = new StringBuilder();
																				StringBuilder v71 = v69.append("Cannot publish shortcut: activity ");
																				ComponentName v72 = p1.getActivity();
																				StringBuilder v73 = v69.append(v72);
																				StringBuilder v74 = v69.append(" does not belong to package ");
																				String v75 = p1.getPackage();
																				StringBuilder v76 = v69.append(v75);
																				String v77 = v69.toString();
																				Preconditions.checkState(v68, v77);
																				ComponentName v79 = p1.getActivity();
																				int v80 = p1.getUserId();
																				boolean v81 = ShortcutService.injectIsMainActivity(v79, v80);
																				StringBuilder v82 = new StringBuilder();
																				StringBuilder v84 = v82.append("Cannot publish shortcut: activity ");
																				ComponentName v85 = p1.getActivity();
																				StringBuilder v86 = v82.append(v85);
																				StringBuilder v87 = v82.append(" is not main activity");
																				String v88 = v82.toString();
																				Preconditions.checkState(v81, v88);
																				if (p2 != 0) {
																					p1.enforceMandatoryFields(0);
																					if (0 != 0) {
																						ComponentName v91 = p1.getActivity();
																						if (v91 == 0) {
																							Preconditions.checkState(, "Cannot publish shortcut: target activity is not set");
																							Icon v93 = p1.getIcon();
																							if (v93 == 0) {
																								Icon v94 = p1.getIcon();
																								Icon v95 = ShortcutInfo.validateIcon(v94);
																								int v96 = p1.getFlags();
																								p1.replaceFlags((v96 & 8192));
																								p2.setRankChanged();
																								boolean v101 = ShortcutInfo.hasFlags(64);
																								boolean v100 = (v101 ^ 1);
																								Preconditions.checkArgument(v100, "pushDynamicShortcuts() cannot publish disabled shortcuts");
																								this.mFlags = (this.mFlags | 1);
																								v18.clear();
																								String v105 = this.mId;
																								if (v105 != 0) {
																									Object v107 = this.mShortcuts.get(v105);
																									ShortcutInfo v106 = v107;
																									if (v106 != 0) {
																										int v108 = this.mMaxShortcuts;
																										ArrayMap v110 = new ArrayMap();
																										ShortcutPackage$$ExternalSyntheticLambda40 v112 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v110);
																										ShortcutPackage.forEachShortcut(v112);
																										ArrayMap v109 = v110;
																										ComponentName v115 = this.mActivity;
																										Object v116 = v109.get(v115);
																										if (v116 == 0) {
																											int v117 = v116.size();
																											if (v117 <= v108) {
																												if (v116 == 0) {
																													int v118 = v116.size();
																													if (v118 != v108) {
																														Collections.sort(v116, this.mShortcutTypeAndRankComparator);
																														Object v120 = v116.get((v108 - 1));
																														boolean v122 = ShortcutInfo.isDeclaredInManifest();
																														boolean v121 = v122;
																														if (v121 == 0) {
																															boolean v123 = v18.add(v120);
																															String v124 = this.mId;
																															ShortcutInfo v126 = ShortcutPackage.deleteOrDisableWithId(v124, 0, 0, 1, 0, 1);
																															ShortcutInfo v125 = v126;
																															if (v125 == 0) {
																																if ((this.mExcludedSurfaces & 1) == 0) {
																																	boolean v127 = ;
																																	if (v127 == 0) {
																																		boolean v129 = ShortcutUser.mService.isAppSearchEnabled();
																																		boolean v128 = v129;
																																		if (v128 == 0) {
																																			String v130 = this.mId;
																																			Object v131 = this.mTransientShortcuts.put(v130, p2);
																																			boolean v133 = ShortcutUser.mService.isAppSearchEnabled();
																																			boolean v132 = v133;
																																			if (v132 == 0) {
																																				ShortcutPackage$$ExternalSyntheticLambda11 v134 = new ShortcutPackage$$ExternalSyntheticLambda11(ShortcutPackage,p2);
																																				long v137 = Binder.clearCallingIdentity();
																																				v134.run();
																																				Binder.restoreCallingIdentity(v137);
																																				boolean v99 = ;
																																				if (v99 == 0) {
																																					boolean v140 = v18.isEmpty();
																																					if (v140 == 0) {
																																						Object v141 = v18.get(0);
																																						List v142 = Collections.singletonList(v141);
																																						v18.clear();
																																						boolean v144 = v18.add(p2);
																																						long v147 = System.currentTimeMillis();
																																						long v146 = v147;
																																						ShortcutPackage$$ExternalSyntheticLambda4 v148 = new ShortcutPackage$$ExternalSyntheticLambda4(v146);
																																						int v151 = this.mShortcuts.size();
																																						if ( < 0) {
																																							ArrayMap v153 = new ArrayMap();
																																							ShortcutPackage$$ExternalSyntheticLambda40 v155 = new ShortcutPackage$$ExternalSyntheticLambda40(ShortcutPackage,v153);
																																							ShortcutPackage.forEachShortcut(v155);
																																							ArrayMap v152 = v153;
																																							int v158 = v152.size();
																																							if ( < 0) {
																																								Object v160 = Objects.requireNonNull(v24);
																																								String v161 = this.mPackageName;
																																								int v162 = this.mPackageUserId;
																																								ShortcutService$$ExternalSyntheticLambda28 v164 = new ShortcutService$$ExternalSyntheticLambda28(ShortcutService,v162,v161);
																																								Runnable v163 = v164;
																																								Object v167 = Objects.requireNonNull(p1);
																																								Object v168 = Objects.requireNonNull(v163);
																																								this.mHandler.removeCallbacksAndMessages(p1);
																																								boolean v170 = this.mHandler.postDelayed(v163, p1, 100);
																																								List v172 = ShortcutService.removeNonKeyFields(p2);
																																								List v173 = ShortcutService.removeNonKeyFields(p3);
																																								UserHandle v174 = UserHandle.of(v162);
																																								ShortcutService$$ExternalSyntheticLambda26 v175 = new ShortcutService$$ExternalSyntheticLambda26(ShortcutService,v162,v172,v161,v174,v173);
																																								ShortcutService.injectPostToHandler(v175);
																																								ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
																																								String v180 = p2.getId();
																																								long v183 = Binder.clearCallingIdentity();
																																								long v182 = v183;
																																								this.mUsageStatsManagerInternal.reportShortcutUsage(p1, v180, p3);
																																								Binder.restoreCallingIdentity(v182);
																																								boolean v188 = 0;
																																								if (v188 == 0) {
																																									ShortcutService$$ExternalSyntheticLambda25 v190 = new ShortcutService$$ExternalSyntheticLambda25();
																																									ShortcutService.forEachLoadedUserLocked(v190);
																																									return;
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
