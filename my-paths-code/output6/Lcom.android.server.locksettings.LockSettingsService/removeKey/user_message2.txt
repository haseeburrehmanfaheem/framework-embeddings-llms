The method removeKey has the following code snippet:

This is path 1 for the API with depth 2:
public void removeKey(String p1){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	SQLiteDatabase v7 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v8 = new String(2);
	String v9 = Integer.toString(v4);
	int v10 = v7.delete("keys", "uid = ? AND alias = ?", v8);
	if (v10 <= 0) {
		boolean v6 = ;
		if (v6 == 0) {
			if (1 == 0) {
				long v12 = RecoverableKeyStoreDb.setLong(v5, v4, "should_create_snapshot", );
				long v11 = v12;
				Object v14 = new Object(3);
				Integer v15 = Integer.valueOf(v5);
				Integer v16 = Integer.valueOf(v4);
				String v17 = String.format(Locale.US, "Del %d/%d/%s", v14);
				int v18 = Log.i("RecoverableAppKeyStore", v17);
				String v19 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);
				this.mKeyStore.deleteEntry(v19);
				return;
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void removeKey(String p1){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	SQLiteDatabase v7 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v8 = new String(2);
	String v9 = Integer.toString(v4);
	int v10 = v7.delete("keys", "uid = ? AND alias = ?", v8);
	if (v10 <= 0) {
		boolean v6 = ;
		if (v6 == 0) {
			if (1 == 0) {
				long v12 = RecoverableKeyStoreDb.setLong(v5, v4, "should_create_snapshot", );
				long v11 = v12;
				Object v14 = new Object(3);
				Integer v15 = Integer.valueOf(v5);
				Integer v16 = Integer.valueOf(v4);
				String v17 = String.format(Locale.US, "Del %d/%d/%s", v14);
				int v18 = Log.i("RecoverableAppKeyStore", v17);
				String v19 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);
				this.mKeyStore.deleteEntry(v19);
				return;
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void removeKey(String p1){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	SQLiteDatabase v7 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v8 = new String(2);
	String v9 = Integer.toString(v4);
	int v10 = v7.delete("keys", "uid = ? AND alias = ?", v8);
	if (v10 <= 0) {
		boolean v6 = ;
		if (v6 == 0) {
			return;
		}
	}
}

and the following sink code:
['SQLiteDatabase v7 = this.mKeyStoreDbHelper.getWritableDatabase();\nString v19 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);\nthis.mKeyStore.deleteEntry(v19);']

The method removeKey has the following similar APIs:

- API Name: setRecoverySecretTypes([I)V with Similarity Score: 0.7968378067016602
  - Access Control Level: NONE and the following code:
SQLiteDatabase v24 = this.mKeyStoreDbHelper.getWritableDatabase();
ContentValues v25 = new ContentValues();
StringJoiner v27 = new StringJoiner(",");
IntStream v29 = Arrays.stream(p1);
RecoverableKeyStoreDb$$ExternalSyntheticLambda0 v30 = new RecoverableKeyStoreDb$$ExternalSyntheticLambda0(v27);
v29.forEach(v30);
String v33 = v27.toString();
v25.put("secret_types", v33);
int v39 = v24.update("recovery_service_metadata", v25, "user_id = ? AND uid = ?", v36);

- API Name: setRecoveryStatus(Ljava/lang/String;I)V with Similarity Score: 0.7917037606239319
  - Access Control Level: NONE and the following code:
SQLiteDatabase v6 = this.mKeyStoreDbHelper.getWritableDatabase();
ContentValues v7 = new ContentValues();
Integer v9 = Integer.valueOf(p2);
v7.put("recovery_status", v9);
int v13 = v6.update("keys", v7, "uid = ? AND alias = ?", new String[]{String.valueOf(v4), p1});

