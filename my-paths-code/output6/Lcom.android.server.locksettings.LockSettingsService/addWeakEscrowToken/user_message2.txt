The method addWeakEscrowToken has the following code snippet:

This is path 1 for the API with depth 2:
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		Object v5 = Objects.requireNonNull(p3, "Listener can not be null.");
		LockSettingsService$$ExternalSyntheticLambda0 v6 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
		long v8 = Binder.clearCallingIdentity();
		int v11 = LockSettingsService.getCredentialTypeInternal(p3);
		if (v11 == -1) {
			boolean v10 = ;
			if (v10 != 0) {
				long v13 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
				if ((v13 < 0) != 0) {
					boolean v12 = ;
					if (v12 == 0) {
						long v15 = LockSettingsService.getLong("sp-handle", 0, p3);
						long v14 = v15;
						if (this.mGateKeeperService == 0) {
							IBinder v17 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
							if (v17 == 0) {
								LockSettingsService$GateKeeperDiedRecipient v18 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
								v17.linkToDeath(v18, 0);
								IGateKeeperService v22 = IGateKeeperService$Stub.asInterface(v17);
								this.mGateKeeperService = v22;
								IGateKeeperService v16 = v22;
								LockscreenCredential v24 = new LockscreenCredential(-1,v25);
								[B v25 = new [B(0);
								LockscreenCredential v23 = v24;
								SyntheticPasswordManager$AuthenticationResult v28 = new SyntheticPasswordManager$AuthenticationResult();
								byte[] v30 = SyntheticPasswordManager.loadState("pwd", v14, p3);
								SyntheticPasswordManager$PasswordData v31 = SyntheticPasswordManager$PasswordData.fromBytes(v30);
								boolean v32 = v23.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
								if (v32 != 0) {
									byte[] v33 = SyntheticPasswordManager.computePasswordToken(v23, v31);
									int v34 = SyntheticPasswordManager.loadWeaverSlot(v14, p3);
									if (v34 == -1) {
										boolean v35 = SyntheticPasswordManager.isWeaverAvailable();
										if (v35 != 0) {
											byte[] v36 = SyntheticPasswordManager.passwordTokenToWeaverKey(v33);
											VerifyCredentialResponse v37 = SyntheticPasswordManager.weaverVerify(v34, v36);
											SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
											int v38 = v37.getResponseCode();
											if (v38 == 0) {
												byte[] v39 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
												byte[] v40 = SyntheticPasswordManager.transformUnderWeaverSecret(v33, v39);
												if (0 == 0) {
													0.onCredentialVerified();
													SyntheticPasswordManager$AuthenticationToken v43 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v14, 0, , , p3);
													SyntheticPasswordManager$AuthenticationResult.authToken = v43;
													VerifyCredentialResponse v44 = SyntheticPasswordManager.verifyChallenge(v16, v43, 0, p3);
													SyntheticPasswordManager$AuthenticationResult.gkResponse = v44;
													if (SyntheticPasswordManager$AuthenticationResult.authToken == 0) {
														boolean v45 = SyntheticPasswordManager.hasPasswordMetrics(v14, p3);
														if (v45 != 0) {
															SyntheticPasswordManager.savePasswordMetrics(v23, SyntheticPasswordManager$AuthenticationResult.authToken, v14, p3);
															SyntheticPasswordManager$AuthenticationResult v27 = v28;
															if (p3 != -9999) {
																LockSettingsStorage$PersistentData v48 = this.mStorage.readPersistentDataBlock();
																if (LockSettingsStorage$PersistentData.type == 1) {
																	if (LockSettingsStorage$PersistentData.type != 2) {
																		boolean v47 = ;
																		if (v47 == 0) {
																			UserManagerInternal v50 = this.mInjector.getUserManagerInternal();
																			boolean v51 = v50.isUserManaged(p3);
																			if (v51 == 0) {
																				boolean v52 = v50.isDeviceManaged();
																				if (v52 == 0) {
																					DeviceStateCache v53 = this.mInjector.getDeviceStateCache();
																					boolean v54 = v53.isDeviceProvisioned();
																					if (v54 != 0) {
																						PackageManager v55 = this.mContext.getPackageManager();
																						boolean v56 = v55.hasSystemFeature("android.hardware.type.automotive");
																						if (v56 == 0) {
																							boolean v63 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
																							if (v63 == 0) {
																								this.mSpManager.destroyEscrowData(p3);
																								boolean v66 = SyntheticPasswordManager.hasState("e0", 0, p3);
																								if (v66 == 0) {
																									boolean v67 = SyntheticPasswordManager.hasState("p1", 0, p3);
																									if (v67 == 0) {
																										boolean v65 = ;
																										if (v65 == 0) {
																											long v69 = SyntheticPasswordManager.generateHandle();
																											Integer v70 = Integer.valueOf(p3);
																											boolean v71 = this.tokenMap.containsKey(v70);
																											if (v71 != 0) {
																												Integer v72 = Integer.valueOf(p3);
																												ArrayMap v73 = new ArrayMap();
																												Object v75 = this.tokenMap.put(v72, v73);
																												SyntheticPasswordManager$TokenData v76 = new SyntheticPasswordManager$TokenData();
																												SyntheticPasswordManager$TokenData.mType = p2;
																												byte[] v78 = SyntheticPasswordManager.secureRandom(16384);
																												boolean v79 = SyntheticPasswordManager.isWeaverAvailable();
																												if (v79 == 0) {
																													byte[] v80 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
																													SyntheticPasswordManager$TokenData.weaverSecret = v80;
																													byte[] v81 = SyntheticPasswordCrypto.encrypt(v80, this.PERSONALISATION_WEAVER_TOKEN, v78);
																													SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v81;
																													byte[] v82 = SyntheticPasswordManager.transformUnderSecdiscardable(p1, v78);
																													SyntheticPasswordManager$TokenData.aggregatedSecret = v82;
																													SyntheticPasswordManager$TokenData.mCallback = p4;
																													Integer v83 = Integer.valueOf(p3);
																													Object v84 = this.tokenMap.get(v83);
																													Long v85 = Long.valueOf(v69);
																													Object v86 = v84.put(v85, v76);
																													long v68 = v69;
																													if ( == 0) {
																														Integer v88 = Integer.valueOf(p3);
																														boolean v89 = this.tokenMap.containsKey(v88);
																														if (v89 != 0) {
																															Integer v90 = Integer.valueOf(p3);
																															Object v91 = this.tokenMap.get(v90);
																															Long v92 = Long.valueOf(v68);
																															Object v93 = v91.get(v92);
																															if (v93 != 0) {
																																boolean v94 = SyntheticPasswordManager.loadEscrowData(, p3);
																																if (v94 != 0) {
																																	boolean v95 = SyntheticPasswordManager.isWeaverAvailable();
																																	if (v95 == 0) {
																																		int v96 = SyntheticPasswordManager.getNextAvailableWeaverSlot();
																																		byte[] v105 = SyntheticPasswordManager.weaverEnroll(v96, 0, SyntheticPasswordManager$TokenData.weaverSecret);
																																		if (v105 != 0) {
																																			SyntheticPasswordManager.saveWeaverSlot(v96, v68, p3);
																																			this.mPasswordSlotManager.markSlotInUse(v96);
																																			SyntheticPasswordManager.saveSecdiscardable(v68, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
																																			byte v109 = SyntheticPasswordManager.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
																																			SyntheticPasswordManager.createSyntheticPasswordBlob(v68, v109, , SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
																																			Integer v111 = Integer.valueOf(p3);
																																			Object v112 = this.tokenMap.get(v111);
																																			Long v113 = Long.valueOf(v68);
																																			Object v114 = v112.remove(v113);
																																			if (SyntheticPasswordManager$TokenData.mCallback == 0) {
																																				SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(v68, p3);
																																				boolean v87 = 1;
																																				long v9 = v68;
																																				Binder.restoreCallingIdentity(v8);
																																				return v9;
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		Object v5 = Objects.requireNonNull(p3, "Listener can not be null.");
		LockSettingsService$$ExternalSyntheticLambda0 v6 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
		long v8 = Binder.clearCallingIdentity();
		int v11 = LockSettingsService.getCredentialTypeInternal(p3);
		if (v11 == -1) {
			boolean v10 = ;
			if (v10 != 0) {
				long v13 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
				if ((v13 < 0) != 0) {
					boolean v12 = ;
					if (v12 == 0) {
						long v15 = LockSettingsService.getLong("sp-handle", 0, p3);
						long v14 = v15;
						if (this.mGateKeeperService == 0) {
							IBinder v17 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
							if (v17 == 0) {
								LockSettingsService$GateKeeperDiedRecipient v18 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
								v17.linkToDeath(v18, 0);
								IGateKeeperService v22 = IGateKeeperService$Stub.asInterface(v17);
								this.mGateKeeperService = v22;
								IGateKeeperService v16 = v22;
								LockscreenCredential v24 = new LockscreenCredential(-1,v25);
								[B v25 = new [B(0);
								LockscreenCredential v23 = v24;
								SyntheticPasswordManager$AuthenticationResult v28 = new SyntheticPasswordManager$AuthenticationResult();
								byte[] v30 = SyntheticPasswordManager.loadState("pwd", v14, p3);
								SyntheticPasswordManager$PasswordData v31 = SyntheticPasswordManager$PasswordData.fromBytes(v30);
								boolean v32 = v23.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
								if (v32 != 0) {
									byte[] v33 = SyntheticPasswordManager.computePasswordToken(v23, v31);
									int v34 = SyntheticPasswordManager.loadWeaverSlot(v14, p3);
									if (v34 == -1) {
										boolean v35 = SyntheticPasswordManager.isWeaverAvailable();
										if (v35 != 0) {
											byte[] v36 = SyntheticPasswordManager.passwordTokenToWeaverKey(v33);
											VerifyCredentialResponse v37 = SyntheticPasswordManager.weaverVerify(v34, v36);
											SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
											int v38 = v37.getResponseCode();
											if (v38 == 0) {
												byte[] v39 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
												byte[] v40 = SyntheticPasswordManager.transformUnderWeaverSecret(v33, v39);
												if (0 == 0) {
													0.onCredentialVerified();
													SyntheticPasswordManager$AuthenticationToken v43 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v14, 0, , , p3);
													SyntheticPasswordManager$AuthenticationResult.authToken = v43;
													VerifyCredentialResponse v44 = SyntheticPasswordManager.verifyChallenge(v16, v43, 0, p3);
													SyntheticPasswordManager$AuthenticationResult.gkResponse = v44;
													if (SyntheticPasswordManager$AuthenticationResult.authToken == 0) {
														boolean v45 = SyntheticPasswordManager.hasPasswordMetrics(v14, p3);
														if (v45 != 0) {
															SyntheticPasswordManager.savePasswordMetrics(v23, SyntheticPasswordManager$AuthenticationResult.authToken, v14, p3);
															SyntheticPasswordManager$AuthenticationResult v27 = v28;
															if (p3 != -9999) {
																LockSettingsStorage$PersistentData v48 = this.mStorage.readPersistentDataBlock();
																if (LockSettingsStorage$PersistentData.type == 1) {
																	if (LockSettingsStorage$PersistentData.type != 2) {
																		boolean v47 = ;
																		if (v47 == 0) {
																			UserManagerInternal v50 = this.mInjector.getUserManagerInternal();
																			boolean v51 = v50.isUserManaged(p3);
																			if (v51 == 0) {
																				boolean v52 = v50.isDeviceManaged();
																				if (v52 == 0) {
																					DeviceStateCache v53 = this.mInjector.getDeviceStateCache();
																					boolean v54 = v53.isDeviceProvisioned();
																					if (v54 != 0) {
																						PackageManager v55 = this.mContext.getPackageManager();
																						boolean v56 = v55.hasSystemFeature("android.hardware.type.automotive");
																						if (v56 == 0) {
																							boolean v63 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
																							if (v63 == 0) {
																								this.mSpManager.destroyEscrowData(p3);
																								boolean v66 = SyntheticPasswordManager.hasState("e0", 0, p3);
																								if (v66 == 0) {
																									boolean v67 = SyntheticPasswordManager.hasState("p1", 0, p3);
																									if (v67 == 0) {
																										boolean v65 = ;
																										if (v65 == 0) {
																											long v69 = SyntheticPasswordManager.generateHandle();
																											Integer v70 = Integer.valueOf(p3);
																											boolean v71 = this.tokenMap.containsKey(v70);
																											if (v71 != 0) {
																												Integer v72 = Integer.valueOf(p3);
																												ArrayMap v73 = new ArrayMap();
																												Object v75 = this.tokenMap.put(v72, v73);
																												SyntheticPasswordManager$TokenData v76 = new SyntheticPasswordManager$TokenData();
																												SyntheticPasswordManager$TokenData.mType = p2;
																												byte[] v78 = SyntheticPasswordManager.secureRandom(16384);
																												boolean v79 = SyntheticPasswordManager.isWeaverAvailable();
																												if (v79 == 0) {
																													byte[] v80 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
																													SyntheticPasswordManager$TokenData.weaverSecret = v80;
																													byte[] v81 = SyntheticPasswordCrypto.encrypt(v80, this.PERSONALISATION_WEAVER_TOKEN, v78);
																													SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v81;
																													byte[] v82 = SyntheticPasswordManager.transformUnderSecdiscardable(p1, v78);
																													SyntheticPasswordManager$TokenData.aggregatedSecret = v82;
																													SyntheticPasswordManager$TokenData.mCallback = p4;
																													Integer v83 = Integer.valueOf(p3);
																													Object v84 = this.tokenMap.get(v83);
																													Long v85 = Long.valueOf(v69);
																													Object v86 = v84.put(v85, v76);
																													long v68 = v69;
																													if ( == 0) {
																														Integer v88 = Integer.valueOf(p3);
																														boolean v89 = this.tokenMap.containsKey(v88);
																														if (v89 != 0) {
																															Integer v90 = Integer.valueOf(p3);
																															Object v91 = this.tokenMap.get(v90);
																															Long v92 = Long.valueOf(v68);
																															Object v93 = v91.get(v92);
																															if (v93 != 0) {
																																boolean v94 = SyntheticPasswordManager.loadEscrowData(, p3);
																																if (v94 != 0) {
																																	boolean v95 = SyntheticPasswordManager.isWeaverAvailable();
																																	if (v95 == 0) {
																																		int v96 = SyntheticPasswordManager.getNextAvailableWeaverSlot();
																																		byte[] v105 = SyntheticPasswordManager.weaverEnroll(v96, 0, SyntheticPasswordManager$TokenData.weaverSecret);
																																		if (v105 != 0) {
																																			SyntheticPasswordManager.saveWeaverSlot(v96, v68, p3);
																																			this.mPasswordSlotManager.markSlotInUse(v96);
																																			SyntheticPasswordManager.saveSecdiscardable(v68, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
																																			byte v109 = SyntheticPasswordManager.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
																																			SyntheticPasswordManager.createSyntheticPasswordBlob(v68, v109, , SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
																																			Integer v111 = Integer.valueOf(p3);
																																			Object v112 = this.tokenMap.get(v111);
																																			Long v113 = Long.valueOf(v68);
																																			Object v114 = v112.remove(v113);
																																			if (SyntheticPasswordManager$TokenData.mCallback == 0) {
																																				SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(v68, p3);
																																				boolean v87 = 1;
																																				long v9 = v68;
																																				Binder.restoreCallingIdentity(v8);
																																				return v9;
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v69 = SyntheticPasswordManager.generateHandle();\nInteger v70 = Integer.valueOf(p3);\nboolean v71 = this.tokenMap.containsKey(v70);\nSyntheticPasswordManager$TokenData v76 = new SyntheticPasswordManager$TokenData();\nSyntheticPasswordManager$TokenData.mType = p2;\nbyte[] v78 = SyntheticPasswordManager.secureRandom(16384);\nboolean v79 = SyntheticPasswordManager.isWeaverAvailable();\nif (v79 == 0) { byte[] v80 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize); }\nSyntheticPasswordManager$TokenData.weaverSecret = v80;\nbyte[] v81 = SyntheticPasswordCrypto.encrypt(v80, this.PERSONALISATION_WEAVER_TOKEN, v78);\nSyntheticPasswordManager$TokenData.secdiscardableOnDisk = v81;\nbyte[] v82 = SyntheticPasswordManager.transformUnderSecdiscardable(p1, v78);\nSyntheticPasswordManager$TokenData.aggregatedSecret = v82;\nInteger v83 = Integer.valueOf(p3);\nObject v84 = this.tokenMap.get(v83);\nLong v85 = Long.valueOf(v69);\nObject v86 = v84.put(v85, v76);', 'LockscreenCredential v24 = new LockscreenCredential(-1,v25);\n[B v25 = new [B(0);\nLockscreenCredential v23 = v24;\nSyntheticPasswordManager$AuthenticationResult v28 = new SyntheticPasswordManager$AuthenticationResult();\nbyte[] v30 = SyntheticPasswordManager.loadState("pwd", v14, p3);\nSyntheticPasswordManager$PasswordData v31 = SyntheticPasswordManager$PasswordData.fromBytes(v30);', 'VerifyCredentialResponse v37 = SyntheticPasswordManager.weaverVerify(v34, v36);\nint v38 = v37.getResponseCode();\nif (v38 == 0) { byte[] v39 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT(); }\nbyte[] v40 = SyntheticPasswordManager.transformUnderWeaverSecret(v33, v39);', 'SyntheticPasswordManager.saveSecdiscardable(v68, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);\nbyte v109 = SyntheticPasswordManager.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);\nSyntheticPasswordManager.createSyntheticPasswordBlob(v68, v109, , SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);']

The method addWeakEscrowToken has the following similar APIs:

- API Name: getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B with Similarity Score: 0.8666695356369019
  - Access Control Level: SYS_OR_SIG and the following code:
LockscreenCredential v26 = new LockscreenCredential(4,v27);
byte[] v27 = Arrays.copyOf(v24, v24.length);

- API Name: verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.8599048256874084
  - Access Control Level: SYS_OR_SIG and the following code:
LockscreenCredential v91 = new LockscreenCredential(4,v92);
byte[] v92 = Arrays.copyOf(v89, v89.length);
Arrays.fill(v89, 0);
boolean v96 = this.mEncryptedPasswords.contains(p1);

