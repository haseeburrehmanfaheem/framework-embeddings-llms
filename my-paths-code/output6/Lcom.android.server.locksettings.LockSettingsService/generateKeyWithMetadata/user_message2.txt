The method generateKeyWithMetadata has the following code snippet:

This is path 1 for the API with depth 2:
public String generateKeyWithMetadata(String p1, byte[] p2){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v5);
	PlatformDecryptionKey v8 = PlatformKeyManager.getDecryptKeyInternal(v5);
	PlatformEncryptionKey v9 = PlatformKeyManager.getEncryptKeyInternal(v5);
	Object v10 = new Object(1);
	Integer v11 = Integer.valueOf(v5);
	String v12 = String.format(Locale.US, "Regenerating permanently invalid Platform key for user %d.", v10);
	int v13 = Log.i("PlatformKeyManager", v12);
	PlatformKeyManager.regenerate(v5);
	PlatformEncryptionKey v15 = PlatformKeyManager.getEncryptKeyInternal(v5);
	PlatformEncryptionKey v6 = v15;
	this.mKeyGenerator.init(256);
	SecretKey v18 = this.mKeyGenerator.generateKey();
	WrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);
	long v20 = this.mDatabase.insertKey(v5, v4, p1, v19);
	if ((v20 < -1) == 0) {
		long v21 = this.mDatabase.setShouldCreateSnapshot(v5, v4, 1);
		if ((v21 < 0) >= 0) {
			int v22 = Log.e("PlatformKeyGen", "Failed to set the shoudCreateSnapshot flag in the local DB.");
			byte[] v23 = v18.getEncoded();
			byte[] v16 = v23;
			Object v25 = new Object(4);
			Integer v26 = Integer.valueOf(v5);
			Integer v27 = Integer.valueOf(v4);
			Integer v28 = Integer.valueOf(v16.length);
			String v29 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v25);
			int v30 = Log.i("RecoverableAppKeyStore", v29);
			String v31 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);
			KeyStore$SecretKeyEntry v32 = new KeyStore$SecretKeyEntry(v33);
			SecretKeySpec v33 = new SecretKeySpec(v16,"AES");
			KeyProtection$Builder v36 = new KeyProtection$Builder(3);
			String v38 = new String(1);
			KeyProtection$Builder v39 = v36.setBlockModes(v38);
			String v40 = new String(1);
			KeyProtection$Builder v41 = v39.setEncryptionPaddings(v40);
			KeyProtection v42 = v41.build();
			this.mKeyStore.setEntry(v31, v32, v42);
			String v45 = this.mApplicationKeyStorage.getGrantAlias(v5, v4, p1);
			String v44 = v45;
			String v1 = v44;
			return v1;
		}
	}
}
This is path 2 for the API with depth 2:
public String generateKeyWithMetadata(String p1, byte[] p2){
	Object v3 = Objects.requireNonNull(p1, "alias is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v5);
	PlatformDecryptionKey v8 = PlatformKeyManager.getDecryptKeyInternal(v5);
	Object v9 = new Object(1);
	Integer v10 = Integer.valueOf(v5);
	String v11 = String.format(Locale.US, "Regenerating permanently invalid Platform key for user %d.", v9);
	int v12 = Log.i("PlatformKeyManager", v11);
	PlatformKeyManager.regenerate(v5);
	PlatformEncryptionKey v14 = PlatformKeyManager.getEncryptKeyInternal(v5);
	PlatformEncryptionKey v6 = v14;
	this.mKeyGenerator.init(256);
	SecretKey v17 = this.mKeyGenerator.generateKey();
	WrappedKey v18 = WrappedKey.fromSecretKey(v6, v17, p2);
	long v19 = this.mDatabase.insertKey(v5, v4, p1, v18);
	if ((v19 < -1) == 0) {
		long v20 = this.mDatabase.setShouldCreateSnapshot(v5, v4, 1);
		if ((v20 < 0) >= 0) {
			int v21 = Log.e("PlatformKeyGen", "Failed to set the shoudCreateSnapshot flag in the local DB.");
			byte[] v22 = v17.getEncoded();
			byte[] v15 = v22;
			Object v24 = new Object(4);
			Integer v25 = Integer.valueOf(v5);
			Integer v26 = Integer.valueOf(v4);
			Integer v27 = Integer.valueOf(v15.length);
			String v28 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v24);
			int v29 = Log.i("RecoverableAppKeyStore", v28);
			String v30 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);
			KeyStore$SecretKeyEntry v31 = new KeyStore$SecretKeyEntry(v32);
			SecretKeySpec v32 = new SecretKeySpec(v15,"AES");
			KeyProtection$Builder v35 = new KeyProtection$Builder(3);
			String v37 = new String(1);
			KeyProtection$Builder v38 = v35.setBlockModes(v37);
			String v39 = new String(1);
			KeyProtection$Builder v40 = v38.setEncryptionPaddings(v39);
			KeyProtection v41 = v40.build();
			this.mKeyStore.setEntry(v30, v31, v41);
			String v44 = this.mApplicationKeyStorage.getGrantAlias(v5, v4, p1);
			String v43 = v44;
			String v1 = v43;
			return v1;
		}
	}
}

and the following sink code:
['SecretKey v18 = this.mKeyGenerator.generateKey();\nWrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);\nlong v20 = this.mDatabase.insertKey(v5, v4, p1, v19);\nbyte[] v23 = v18.getEncoded();\nSecretKeySpec v33 = new SecretKeySpec(v16,"AES");\nthis.mKeyStore.setEntry(v31, v32, v42);', 'PlatformEncryptionKey v15 = PlatformKeyManager.getEncryptKeyInternal(v5);\nPlatformEncryptionKey v6 = v15;\nWrappedKey v19 = WrappedKey.fromSecretKey(v6, v18, p2);', 'String v31 = ApplicationKeyStorage.getInternalAlias(v5, v4, p1);\nthis.mApplicationKeyStorage.getGrantAlias(v5, v4, p1);\nreturn v1;']

The method generateKeyWithMetadata has the following similar APIs:

- API Name: getKey(Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.8833949565887451
  - Access Control Level: NONE and the following code:
String v7 = this.mApplicationKeyStorage.getGrantAlias(v5, v4, p1);
String v6 = v7;
String v1 = v6;
return v1;

- API Name: importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String; with Similarity Score: 0.8687998652458191
  - Access Control Level: SYS_OR_SIG and the following code:
String v38 = this.mApplicationKeyStorage.getGrantAlias(v6, v5, p1);
String v37 = v38;
String v1 = v37;
return v1;

