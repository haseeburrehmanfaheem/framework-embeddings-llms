The method isWeakEscrowTokenValid has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		long v5 = Binder.clearCallingIdentity();
		byte[] v8 = SyntheticPasswordManager.loadState("e0", 0, p1);
		boolean v9 = ArrayUtils.isEmpty(v8);
		boolean v7 = (v9 ^ 1);
		if (v7 == 0) {
			byte[] v11 = SyntheticPasswordManager.loadState("p1", 0, p1);
			boolean v12 = ArrayUtils.isEmpty(v11);
			boolean v10 = (v12 ^ 1);
			if (v10 == 0) {
				boolean v6 = ;
				if (v6 != 0) {
					if (this.mGateKeeperService == 0) {
						IBinder v14 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
						if (v14 == 0) {
							LockSettingsService$GateKeeperDiedRecipient v15 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
							v14.linkToDeath(v15, 0);
							if (v14 != 0) {
								IInterface v20 = v14.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
								if (v20 == 0) {
									if (v20 instanceof IGateKeeperService == 0) {
										IGateKeeperService$Stub$Proxy v21 = new IGateKeeperService$Stub$Proxy(v14);
										IGateKeeperService v19 = v21;
										this.mGateKeeperService = v19;
										IGateKeeperService v13 = v19;
										SyntheticPasswordManager$AuthenticationResult v25 = new SyntheticPasswordManager$AuthenticationResult();
										byte[] v27 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
										int v28 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
										if (v28 == -1) {
											boolean v29 = SyntheticPasswordManager.isWeaverAvailable();
											if (v29 != 0) {
												VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0);
												int v31 = v30.getResponseCode();
												if (v31 != 0) {
													byte[] v32 = v30.getGatekeeperHAT();
													if (v32 != 0) {
														byte[] v33 = v30.getGatekeeperHAT();
														byte[] v34 = SyntheticPasswordCrypto.decrypt(v33, this.PERSONALISATION_WEAVER_TOKEN, v27);
														byte[] v35 = SyntheticPasswordManager.transformUnderSecdiscardable(p3, );
														SyntheticPasswordManager$AuthenticationToken v36 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v35, 0, p4);
														SyntheticPasswordManager$AuthenticationResult.authToken = v36;
														if (v36 == 0) {
															VerifyCredentialResponse v37 = SyntheticPasswordManager.verifyChallenge(p1, v36, 0, p4);
															SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
															if (v37 != 0) {
																SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
																SyntheticPasswordManager$AuthenticationResult v24 = v25;
																SyntheticPasswordManager$AuthenticationResult v23 = v24;
																if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																	Binder.restoreCallingIdentity(v5);
																	return 0;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		long v5 = Binder.clearCallingIdentity();
		byte[] v8 = SyntheticPasswordManager.loadState("e0", 0, p1);
		boolean v9 = ArrayUtils.isEmpty(v8);
		boolean v7 = (v9 ^ 1);
		if (v7 == 0) {
			byte[] v11 = SyntheticPasswordManager.loadState("p1", 0, p1);
			boolean v12 = ArrayUtils.isEmpty(v11);
			boolean v10 = (v12 ^ 1);
			if (v10 == 0) {
				boolean v6 = ;
				if (v6 != 0) {
					if (this.mGateKeeperService == 0) {
						IBinder v14 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
						if (v14 == 0) {
							LockSettingsService$GateKeeperDiedRecipient v15 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
							v14.linkToDeath(v15, 0);
							if (v14 != 0) {
								IInterface v20 = v14.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
								if (v20 == 0) {
									if (v20 instanceof IGateKeeperService == 0) {
										IGateKeeperService$Stub$Proxy v21 = new IGateKeeperService$Stub$Proxy(v14);
										IGateKeeperService v19 = v21;
										this.mGateKeeperService = v19;
										IGateKeeperService v13 = v19;
										SyntheticPasswordManager$AuthenticationResult v25 = new SyntheticPasswordManager$AuthenticationResult();
										byte[] v27 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
										int v28 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
										if (v28 == -1) {
											boolean v29 = SyntheticPasswordManager.isWeaverAvailable();
											if (v29 != 0) {
												VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0);
												int v31 = v30.getResponseCode();
												if (v31 != 0) {
													byte[] v32 = v30.getGatekeeperHAT();
													if (v32 != 0) {
														byte[] v33 = v30.getGatekeeperHAT();
														byte[] v34 = SyntheticPasswordCrypto.decrypt(v33, this.PERSONALISATION_WEAVER_TOKEN, v27);
														byte[] v35 = SyntheticPasswordManager.transformUnderSecdiscardable(p3, );
														SyntheticPasswordManager$AuthenticationToken v36 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v35, 0, p4);
														SyntheticPasswordManager$AuthenticationResult.authToken = v36;
														if (v36 == 0) {
															VerifyCredentialResponse v37 = SyntheticPasswordManager.verifyChallenge(p1, v36, 0, p4);
															SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
															if (v37 != 0) {
																SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
																SyntheticPasswordManager$AuthenticationResult v24 = v25;
																SyntheticPasswordManager$AuthenticationResult v23 = v24;
																if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																	Binder.restoreCallingIdentity(v5);
																	return 0;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	if (v4 == 0) {
		long v5 = Binder.clearCallingIdentity();
		byte[] v8 = SyntheticPasswordManager.loadState("e0", 0, p1);
		boolean v9 = ArrayUtils.isEmpty(v8);
		boolean v7 = (v9 ^ 1);
		if (v7 == 0) {
			byte[] v11 = SyntheticPasswordManager.loadState("p1", 0, p1);
			boolean v12 = ArrayUtils.isEmpty(v11);
			boolean v10 = (v12 ^ 1);
			if (v10 == 0) {
				boolean v6 = ;
				if (v6 != 0) {
					if (this.mGateKeeperService == 0) {
						IBinder v14 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
						if (v14 == 0) {
							LockSettingsService$GateKeeperDiedRecipient v15 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
							v14.linkToDeath(v15, 0);
							if (v14 != 0) {
								IInterface v20 = v14.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
								if (v20 == 0) {
									if (v20 instanceof IGateKeeperService == 0) {
										IGateKeeperService v19 = v20;
										this.mGateKeeperService = v19;
										IGateKeeperService v13 = v19;
										SyntheticPasswordManager$AuthenticationResult v23 = new SyntheticPasswordManager$AuthenticationResult();
										byte[] v25 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
										int v26 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
										if (v26 == -1) {
											boolean v27 = SyntheticPasswordManager.isWeaverAvailable();
											if (v27 != 0) {
												VerifyCredentialResponse v28 = SyntheticPasswordManager.weaverVerify(v26, 0);
												int v29 = v28.getResponseCode();
												if (v29 != 0) {
													byte[] v30 = v28.getGatekeeperHAT();
													if (v30 != 0) {
														byte[] v31 = v28.getGatekeeperHAT();
														byte[] v32 = SyntheticPasswordCrypto.decrypt(v31, this.PERSONALISATION_WEAVER_TOKEN, v25);
														byte[] v33 = SyntheticPasswordManager.transformUnderSecdiscardable(p3, );
														SyntheticPasswordManager$AuthenticationToken v34 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v33, 0, p4);
														SyntheticPasswordManager$AuthenticationResult.authToken = v34;
														if (v34 == 0) {
															VerifyCredentialResponse v35 = SyntheticPasswordManager.verifyChallenge(p1, v34, 0, p4);
															SyntheticPasswordManager$AuthenticationResult.gkResponse = v35;
															if (v35 != 0) {
																SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
																SyntheticPasswordManager$AuthenticationResult v22 = v23;
																SyntheticPasswordManager$AuthenticationResult v21 = v22;
																if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																	Binder.restoreCallingIdentity(v5);
																	return 0;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['IGateKeeperService v13 = this.mGateKeeperService;\nbyte[] v27 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);\nint v28 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);\nVerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0);\nSyntheticPasswordManager$AuthenticationToken v36 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v35, 0, p4);\nVerifyCredentialResponse v37 = SyntheticPasswordManager.verifyChallenge(p1, v36, 0, p4);', 'byte[] v8 = SyntheticPasswordManager.loadState("e0", 0, p1);\nboolean v9 = ArrayUtils.isEmpty(v8);\nbyte[] v11 = SyntheticPasswordManager.loadState("p1", 0, p1);\nboolean v12 = ArrayUtils.isEmpty(v11);']

The method isWeakEscrowTokenValid has the following similar APIs:

- API Name: verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.8868153095245361
  - Access Control Level: NONE and the following code:
IGateKeeperService v9 = v10;
byte[] v13 = SyntheticPasswordManager.loadState("handle", 0, p4);
GateKeeperResponse v14 = v3.verifyChallenge(p3, p2, v12, v2);
VerifyCredentialResponse$Builder v16 = new VerifyCredentialResponse$Builder();
VerifyCredentialResponse v21 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
return v21;

- API Name: verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.855418860912323
  - Access Control Level: NONE and the following code:
IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
VerifyCredentialResponse v27 = this.mSpManager.verifyChallenge(v26, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);

