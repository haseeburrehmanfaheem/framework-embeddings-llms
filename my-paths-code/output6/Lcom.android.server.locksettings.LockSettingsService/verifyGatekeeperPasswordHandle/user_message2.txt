The method verifyGatekeeperPasswordHandle has the following code snippet:

This is path 1 for the API with depth 2:
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v2 = this.mGatekeeperPasswords.get(p1);
	if (v2 != 0) {
		if (this.mGateKeeperService == 0) {
			IBinder v4 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
			if (v4 == 0) {
				LockSettingsService$GateKeeperDiedRecipient v5 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
				v4.linkToDeath(v5, 0);
				if (v4 != 0) {
					IInterface v10 = v4.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
					if (v10 == 0) {
						if (v10 instanceof IGateKeeperService == 0) {
							IGateKeeperService$Stub$Proxy v11 = new IGateKeeperService$Stub$Proxy(v4);
							IGateKeeperService v9 = v11;
							this.mGateKeeperService = v9;
							IGateKeeperService v3 = v9;
							byte[] v15 = SyntheticPasswordManager.loadState("handle", 0, p4);
							byte[] v14 = v15;
							if (v14 != 0) {
								GateKeeperResponse v16 = v3.verifyChallenge(p3, p2, v14, v2);
								int v17 = this.mResponseCode;
								if (v17 != 0) {
									VerifyCredentialResponse$Builder v18 = new VerifyCredentialResponse$Builder();
									byte[] v20 = this.mPayload;
									this.mGatekeeperHAT = v20;
									VerifyCredentialResponse$Builder v21 = VerifyCredentialResponse$Builder;
									VerifyCredentialResponse v23 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
									VerifyCredentialResponse v22 = v23;
									boolean v25 = this.mShouldReEnroll;
									if (v25 == 0) {
										GateKeeperResponse v26 = v3.enroll(p3, v14, v14, v2);
										int v27 = this.mResponseCode;
										if (v27 != 0) {
											byte[] v28 = this.mPayload;
											SyntheticPasswordManager.saveState("handle", v28, 0, p4);
											VerifyCredentialResponse v31 = SyntheticPasswordManager.verifyChallengeInternal(v3, v2, p2, p3);
											byte[] v32 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);
											if (v32 != 0) {
												GateKeeperResponse v33 = v3.verifyChallenge(p3, p2, v32, v2);
												int v34 = v33.getResponseCode();
												if (v34 != 0) {
													VerifyCredentialResponse$Builder v35 = new VerifyCredentialResponse$Builder();
													byte[] v37 = v33.getPayload();
													VerifyCredentialResponse$Builder v38 = v35.setGatekeeperHAT(v37);
													VerifyCredentialResponse v39 = v38.build();
													boolean v40 = v33.getShouldReEnroll();
													if (v40 == 0) {
														GateKeeperResponse v41 = v3.enroll(p3, v32, v32, v2);
														int v42 = .getResponseCode();
														if (v42 != 0) {
															VerifyCredentialResponse v13 = v39;
															return v31;
															return ;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v2 = this.mGatekeeperPasswords.get(p1);
	if (v2 != 0) {
		if (this.mGateKeeperService == 0) {
			IBinder v4 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
			if (v4 == 0) {
				LockSettingsService$GateKeeperDiedRecipient v5 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
				v4.linkToDeath(v5, 0);
				if (v4 != 0) {
					IInterface v10 = v4.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
					if (v10 == 0) {
						if (v10 instanceof IGateKeeperService == 0) {
							IGateKeeperService v9 = v10;
							this.mGateKeeperService = v9;
							IGateKeeperService v3 = v9;
							byte[] v13 = SyntheticPasswordManager.loadState("handle", 0, p4);
							byte[] v12 = v13;
							if (v12 != 0) {
								GateKeeperResponse v14 = v3.verifyChallenge(p3, p2, v12, v2);
								int v15 = this.mResponseCode;
								if (v15 != 0) {
									VerifyCredentialResponse$Builder v16 = new VerifyCredentialResponse$Builder();
									byte[] v18 = this.mPayload;
									this.mGatekeeperHAT = v18;
									VerifyCredentialResponse$Builder v19 = VerifyCredentialResponse$Builder;
									VerifyCredentialResponse v21 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
									VerifyCredentialResponse v20 = v21;
									boolean v23 = this.mShouldReEnroll;
									if (v23 == 0) {
										GateKeeperResponse v24 = v3.enroll(p3, v12, v12, v2);
										int v25 = this.mResponseCode;
										if (v25 != 0) {
											byte[] v26 = this.mPayload;
											SyntheticPasswordManager.saveState("handle", v26, 0, p4);
											VerifyCredentialResponse v29 = SyntheticPasswordManager.verifyChallengeInternal(v3, v2, p2, p3);
											byte[] v30 = SyntheticPasswordManager.loadSyntheticPasswordHandle(p3);
											if (v30 != 0) {
												GateKeeperResponse v31 = v3.verifyChallenge(p3, p2, v30, v2);
												int v32 = v31.getResponseCode();
												if (v32 != 0) {
													VerifyCredentialResponse$Builder v33 = new VerifyCredentialResponse$Builder();
													byte[] v35 = v31.getPayload();
													VerifyCredentialResponse$Builder v36 = v33.setGatekeeperHAT(v35);
													VerifyCredentialResponse v37 = v36.build();
													boolean v38 = v31.getShouldReEnroll();
													if (v38 == 0) {
														GateKeeperResponse v39 = v3.enroll(p3, v30, v30, v2);
														int v40 = .getResponseCode();
														if (v40 != 0) {
															VerifyCredentialResponse v11 = v37;
															return v29;
															return ;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	Object v2 = this.mGatekeeperPasswords.get(p1);
	if (v2 != 0) {
		if (this.mGateKeeperService == 0) {
			IBinder v4 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
			if (v4 == 0) {
				LockSettingsService$GateKeeperDiedRecipient v5 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
				v4.linkToDeath(v5, 0);
				if (v4 != 0) {
					IInterface v10 = v4.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
					if (v10 == 0) {
						if (v10 instanceof IGateKeeperService == 0) {
							IGateKeeperService$Stub$Proxy v11 = new IGateKeeperService$Stub$Proxy(v4);
							IGateKeeperService v9 = v11;
							this.mGateKeeperService = v9;
							IGateKeeperService v3 = v9;
							byte[] v15 = SyntheticPasswordManager.loadState("handle", 0, p4);
							byte[] v14 = v15;
							if (v14 != 0) {
								GateKeeperResponse v16 = v3.verifyChallenge(p3, p2, v14, v2);
								int v17 = this.mResponseCode;
								if (v17 != 0) {
									VerifyCredentialResponse$Builder v18 = new VerifyCredentialResponse$Builder();
									byte[] v20 = this.mPayload;
									this.mGatekeeperHAT = v20;
									VerifyCredentialResponse$Builder v21 = VerifyCredentialResponse$Builder;
									VerifyCredentialResponse v23 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
									VerifyCredentialResponse v22 = v23;
									boolean v25 = this.mShouldReEnroll;
									if (v25 == 0) {
										GateKeeperResponse v26 = v3.enroll(p3, v14, v14, v2);
										int v27 = this.mResponseCode;
										if (v27 != 0) {
											VerifyCredentialResponse v13 = v22;
											return ;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v2 = this.mGatekeeperPasswords.get(p1);\nIGateKeeperService v3 = v9;\nbyte[] v15 = SyntheticPasswordManager.loadState("handle", 0, p4);\nGateKeeperResponse v16 = v3.verifyChallenge(p3, p2, v14, v2);\nVerifyCredentialResponse$Builder v18 = new VerifyCredentialResponse$Builder();\nVerifyCredentialResponse v23 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);\nreturn v23;', 'IGateKeeperService v9 = v10;\nbyte[] v13 = SyntheticPasswordManager.loadState("handle", 0, p4);\nGateKeeperResponse v14 = v3.verifyChallenge(p3, p2, v12, v2);\nVerifyCredentialResponse$Builder v16 = new VerifyCredentialResponse$Builder();\nVerifyCredentialResponse v21 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);\nreturn v21;', 'IGateKeeperService$Stub$Proxy v11 = new IGateKeeperService$Stub$Proxy(v4);\nbyte[] v15 = SyntheticPasswordManager.loadState("handle", 0, p4);\nGateKeeperResponse v16 = v3.verifyChallenge(p3, p2, v14, v2);\nVerifyCredentialResponse$Builder v18 = new VerifyCredentialResponse$Builder();\nVerifyCredentialResponse v23 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);\nreturn v22;']

The method verifyGatekeeperPasswordHandle has the following similar APIs:

- API Name: isWeakEscrowTokenValid(J[BI)Z with Similarity Score: 0.8868153095245361
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v13 = this.mGateKeeperService;
byte[] v27 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
int v28 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0);
SyntheticPasswordManager$AuthenticationToken v36 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v35, 0, p4);
VerifyCredentialResponse v37 = SyntheticPasswordManager.verifyChallenge(p1, v36, 0, p4);

- API Name: isWeakEscrowTokenValid(J[BI)Z with Similarity Score: 0.8501834869384766
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v13 = this.mGateKeeperService;
byte[] v27 = SyntheticPasswordManager.loadSecdiscardable(p2, p4);
int v28 = SyntheticPasswordManager.loadWeaverSlot(p2, p4);
VerifyCredentialResponse v30 = SyntheticPasswordManager.weaverVerify(v28, 0);
SyntheticPasswordManager$AuthenticationToken v36 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(p2, 2, v35, 0, p4);
VerifyCredentialResponse v37 = SyntheticPasswordManager.verifyChallenge(p1, v36, 0, p4);

