The method setLockCredential has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p1 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v1 = this.mType;
				if (v1 != -1) {
					if (v4 != 0) {
						if (v5 != 0) {
							if (v6 == 0) {
								boolean v7 = p2.isNone();
								if (v7 == 0) {
									long v8 = Binder.clearCallingIdentity();
									ContentResolver v10 = this.mContext.getContentResolver();
									int v12 = Settings$Secure.getIntForUser(v10, "user_setup_complete", 0, 0);
									int v11 = v12;
									if (v11 != 0) {
										int v14 = Settings$Secure.getIntForUser(v10, "secure_frp_mode", 0, 0);
										int v13 = v14;
										if (v13 != 1) {
											if ( == 0) {
												if ( != 0) {
													boolean v15 = p2.isNone();
													if (v15 != 0) {
														UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
														boolean v19 = v18.isCredentialSharableWithParent();
														boolean v17 = v19;
														if (v17 == 0) {
															boolean v21 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
															boolean v20 = v21;
															if (v20 != 0) {
																boolean v16 = ;
																if (v16 == 0) {
																	UserInfo v22 = this.mUserManager.getProfileParent(p3);
																	if (v24 != 0) {
																		if (v25 == 0) {
																			long v26 = Binder.clearCallingIdentity();
																			if (p1 == 0) {
																				boolean v28 = p1.isNone();
																				if (v28 != 0) {
																					if (p2 != -9999) {
																						ContentResolver v29 = this.mContext.getContentResolver();
																						int v30 = this.mInjector.settingsGlobalGetInt(v29, "device_provisioned", 0);
																						if (v30 == 0) {
																							VerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
																							if (v31 == 0) {
																								if (p2 != -9999) {
																									LockSettingsStorage$CredentialHash v32 = this.mStorage.readCredentialHash(p2);
																									boolean v33 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
																									if (v33 != 0) {
																										int v39 = p1.getType();
																										VerifyCredentialResponse v27 = VerifyCredentialResponse.ERROR;
																										Binder.restoreCallingIdentity(v26);
																										LockSettingsService$$ExternalSyntheticLambda3 v45 = new LockSettingsService$$ExternalSyntheticLambda3();
																										boolean v47 = this.mHandler.postDelayed(v45, 2000);
																										VerifyCredentialResponse v23 = v27;
																										p2.zeroize();
																										LockscreenCredential v49 = LockscreenCredential.createNone();
																										Object v51 = Objects.requireNonNull(p1);
																										Object v52 = Objects.requireNonNull();
																										if (p3 != -9999) {
																											LockSettingsStorage$PersistentData v54 = this.mStorage.readPersistentDataBlock();
																											if (LockSettingsStorage$PersistentData.type == 1) {
																												if (LockSettingsStorage$PersistentData.type != 2) {
																													boolean v53 = ;
																													if (v53 == 0) {
																														boolean v55 = p1.isNone();
																														if (v55 == 0) {
																															LockSettingsStorage$CredentialHash v57 = LockSettingsStorage.readPasswordHashIfExists(p3);
																															if (v57 == 0) {
																																LockSettingsStorage$CredentialHash v58 = LockSettingsStorage.readPatternHashIfExists(p3);
																																if (v58 == 0) {
																																	LockSettingsStorage$CredentialHash v59 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																	LockSettingsStorage$CredentialHash v56 = v59;
																																	boolean v61 = LockSettingsService.isCredentialSharableWithParent(p3);
																																	if (v61 == 0) {
																																		boolean v62 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p3);
																																		if (v62 != 0) {
																																			boolean v60 = ;
																																			if (v60 == 0) {
																																				boolean v63 = .isNone();
																																				if (v63 == 0) {
																																					byte[] v65 = this.mStorage.readChildProfileLock(p3);
																																					if (v65 == 0) {
																																						byte[] v66 = Arrays.copyOfRange(v65, 0, 12);
																																						byte[] v67 = Arrays.copyOfRange(v65, 12, v65.length);
																																						StringBuilder v68 = new StringBuilder();
																																						StringBuilder v70 = v68.append("profile_key_name_decrypt_");
																																						StringBuilder v71 = v68.append(p3);
																																						String v72 = v68.toString();
																																						Key v73 = this.mJavaKeyStore.getKey(v72, 0);
																																						Cipher v74 = Cipher.getInstance("AES/GCM/NoPadding");
																																						GCMParameterSpec v75 = new GCMParameterSpec(128,v66);
																																						v74.init(2, v73, v75);
																																						byte[] v78 = v74.doFinal(v67);
																																						LockscreenCredential v79 = LockscreenCredential.createManagedPassword(v78);
																																						Arrays.fill(v78, 0);
																																						this.mManagedProfilePasswordCache.storePassword(p3, v79);
																																						LockscreenCredential v64 = v79;
																																						long v90 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
																																						if ((v90 < 0) != 0) {
																																							Preconditions.checkState(, "Cannot reinitialize SP");
																																							IGateKeeperService v92 = LockSettingsService.getGateKeeperService();
																																							SyntheticPasswordManager$AuthenticationToken v93 = this.mSpManager.newSyntheticPasswordAndSid(v92, LockSettingsStorage$CredentialHash.hash, , p3);
																																							if (v93 != 0) {
																																								IGateKeeperService v94 = LockSettingsService.getGateKeeperService();
																																								long v95 = this.mSpManager.createPasswordBasedSyntheticPassword(v94, , v93, p3);
																																								boolean v96 = .isNone();
																																								if (v96 != 0) {
																																									if (LockSettingsStorage$CredentialHash.hash != 0) {
																																										IGateKeeperService v97 = LockSettingsService.getGateKeeperService();
																																										this.mSpManager.newSidForUser(v97, v93, p3);
																																										IGateKeeperService v99 = LockSettingsService.getGateKeeperService();
																																										VerifyCredentialResponse v100 = this.mSpManager.verifyChallenge(v99, v93, 0, p3);
																																										byte[] v101 = v93.deriveDiskEncryptionKey();
																																										LockSettingsService.setUserKeyProtection(p3, v101);
																																										byte[] v103 = v93.deriveKeyStorePassword();
																																										LockSettingsService.setKeystorePassword(v103, p3);
																																										LockSettingsService.fixateNewestUserKeyAuth(p3);
																																										LockSettingsService.setSyntheticPasswordHandleLocked(v95, p3);
																																										LockSettingsService.onAuthTokenKnownForUser(p3, v93);
																																										SyntheticPasswordManager$AuthenticationToken v83 = v93;
																																										boolean v109 = .isNone();
																																										if (v109 == 0) {
																																											boolean v110 = LockSettingsService.isProfileWithUnifiedLock(p3);
																																											if (v110 == 0) {
																																												LockscreenCredential v111 = LockSettingsService.getDecryptedPasswordForTiedProfile(p3);
																																												long v113 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
																																												IGateKeeperService v114 = LockSettingsService.getGateKeeperService();
																																												SyntheticPasswordManager$AuthenticationResult v115 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v114, v113, , p3, 0);
																																												if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																																													if (SyntheticPasswordManager$AuthenticationResult.gkResponse == 0) {
																																														int v116 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																														if (v116 != -1) {
																																															int v117 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																															if (v117 != 1) {
																																																boolean v108 = 0;
																																																boolean v50 = v108;
																																																if (v50 != 0) {
																																																	boolean v122 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
																																																	if (v122 == 0) {
																																																		int v123 = LockSettingsService.getCredentialTypeInternal(p1);
																																																		if (v123 != 1) {
																																																			boolean v120 = ;
																																																			this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
																																																			if (1 == 0) {
																																																				String v128 = LockSettingsStorage.getChildProfileLockFile(p1);
																																																				LockSettingsStorage.deleteFile(v128);
																																																				caughtException.printStackTrace();
																																																				StringBuilder v138 = new StringBuilder();
																																																				StringBuilder v140 = v138.append("profile_key_name_encrypt_");
																																																				StringBuilder v141 = v138.append(p1);
																																																				String v142 = v138.toString();
																																																				this.mJavaKeyStore.deleteEntry(v142);
																																																				StringBuilder v144 = new StringBuilder();
																																																				StringBuilder v146 = v144.append("profile_key_name_decrypt_");
																																																				StringBuilder v147 = v144.append(p1);
																																																				String v148 = v144.toString();
																																																				this.mJavaKeyStore.deleteEntry(v148);
																																																				p0.notifyPasswordChanged(p1, p3);
																																																				UserHandle v153 = UserHandle.of(p1);
																																																				boolean v154 = this.mUserManagerCache.containsKey(v153);
																																																				if (v154 == 0) {
																																																					Context v155 = this.mContext.createPackageContextAsUser("system", 0, v153);
																																																					Object v156 = v155.getSystemService(UserManage.class);
																																																					Object v157 = this.mUserManagerCache.put(v153, v156);
																																																					UserManager v152 = v156;
																																																					boolean v158 = v152.isCredentialSharableWithParent();
																																																					boolean v151 = v158;
																																																					if (v151 == 0) {
																																																						Object v160 = this.mContext.getSystemService(TrustManage.class);
																																																						this.mService.setDeviceLockedForUser(p1, 0);
																																																						p0.notifySeparateProfileChallengeChanged(p3);
																																																						if (p3 != 0) {
																																																							boolean v166 = StorageManager.isEncrypted();
																																																							boolean v165 = v166;
																																																							if (v165 == 0) {
																																																								boolean v168 = LockSettingsService.isCredentialRequiredToDecrypt();
																																																								if (v168 == 0) {
																																																									boolean v169 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
																																																									if (v169 != 0) {
																																																										boolean v167 = ;
																																																										if (v167 == 0) {
																																																											boolean v170 = p1.isNone();
																																																											if (v170 == 0) {
																																																												boolean v172 = LockSettingsService.isDeviceEncryptionEnabled();
																																																												if (v172 == 0) {
																																																													ContentResolver v173 = this.mContext.getContentResolver();
																																																													boolean v174 = Settings$Global.putInt(v173, "require_password_to_decrypt", 0);
																																																													boolean v175 = p1.isPattern();
																																																													if (v175 == 0) {
																																																														this.mStorage.setBoolean("lockscreen.patterneverchosen", 1, p2);
																																																														boolean v180 = p1.isNone();
																																																														if (v180 == 0) {
																																																															boolean v181 = p1.isPattern();
																																																															if (v181 == 0) {
																																																																String v182 = LockSettingsService.getString("lockscreen.passwordhistory", 0, p2);
																																																																if (v182 != 0) {
																																																																	int v183 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
																																																																	if (v183 != 0) {
																																																																		byte[] v184 = LockSettingsService.getHashFactor(p1, p2);
																																																																		String v185 = LockSettingsService.getSalt(p2);
																																																																		byte[] v186 = v185.getBytes();
																																																																		String v187 = p1.passwordToHistoryHash(v186, v184);
																																																																		if (v187 != 0) {
																																																																			boolean v188 = TextUtils.isEmpty();
																																																																			if (v188 == 0) {
																																																																				String v189 = .split(",");
																																																																				StringJoiner v190 = new StringJoiner(",");
																																																																				StringJoiner v192 = v190.add();
																																																																				if ( >= (v183 + -1)) {
																																																																					if ( >= v189.length) {
																																																																						String v193 = v190.toString();
																																																																						LockSettingsService.setString("lockscreen.passwordhistory", , p2);
																																																																						Object v195 = this.mContext.getSystemService(TrustManage.class);
																																																																						this.mService.reportEnabledTrustAgentsChanged(p2);
																																																																						p0.scheduleGc();
																																																																						Binder.restoreCallingIdentity(v8);
																																																																						return 1;
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p1 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v1 = this.mType;
				if (v1 != -1) {
					if (v4 != 0) {
						if (v5 != 0) {
							if (v6 == 0) {
								boolean v7 = p2.isNone();
								if (v7 == 0) {
									long v8 = Binder.clearCallingIdentity();
									ContentResolver v10 = this.mContext.getContentResolver();
									int v12 = Settings$Secure.getIntForUser(v10, "user_setup_complete", 0, 0);
									int v11 = v12;
									if (v11 != 0) {
										int v14 = Settings$Secure.getIntForUser(v10, "secure_frp_mode", 0, 0);
										int v13 = v14;
										if (v13 != 1) {
											if ( == 0) {
												if ( != 0) {
													boolean v15 = p2.isNone();
													if (v15 != 0) {
														UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
														boolean v19 = v18.isCredentialSharableWithParent();
														boolean v17 = v19;
														if (v17 == 0) {
															boolean v21 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
															boolean v20 = v21;
															if (v20 != 0) {
																boolean v16 = ;
																if (v16 == 0) {
																	UserInfo v22 = this.mUserManager.getProfileParent(p3);
																	if (v24 != 0) {
																		if (v25 == 0) {
																			long v26 = Binder.clearCallingIdentity();
																			if (p1 == 0) {
																				boolean v28 = p1.isNone();
																				if (v28 != 0) {
																					if (p2 != -9999) {
																						ContentResolver v29 = this.mContext.getContentResolver();
																						int v30 = this.mInjector.settingsGlobalGetInt(v29, "device_provisioned", 0);
																						if (v30 == 0) {
																							VerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
																							if (v31 == 0) {
																								if (p2 != -9999) {
																									LockSettingsStorage$CredentialHash v32 = this.mStorage.readCredentialHash(p2);
																									boolean v33 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
																									if (v33 != 0) {
																										int v39 = p1.getType();
																										VerifyCredentialResponse v27 = VerifyCredentialResponse.ERROR;
																										Binder.restoreCallingIdentity(v26);
																										LockSettingsService$$ExternalSyntheticLambda3 v45 = new LockSettingsService$$ExternalSyntheticLambda3();
																										boolean v47 = this.mHandler.postDelayed(v45, 2000);
																										VerifyCredentialResponse v23 = v27;
																										p2.zeroize();
																										LockscreenCredential v49 = LockscreenCredential.createNone();
																										Object v51 = Objects.requireNonNull(p1);
																										Object v52 = Objects.requireNonNull();
																										if (p3 != -9999) {
																											LockSettingsStorage$PersistentData v54 = this.mStorage.readPersistentDataBlock();
																											if (LockSettingsStorage$PersistentData.type == 1) {
																												if (LockSettingsStorage$PersistentData.type != 2) {
																													boolean v53 = ;
																													if (v53 == 0) {
																														boolean v55 = p1.isNone();
																														if (v55 == 0) {
																															LockSettingsStorage$CredentialHash v57 = LockSettingsStorage.readPasswordHashIfExists(p3);
																															if (v57 == 0) {
																																LockSettingsStorage$CredentialHash v58 = LockSettingsStorage.readPatternHashIfExists(p3);
																																if (v58 == 0) {
																																	LockSettingsStorage$CredentialHash v59 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																	LockSettingsStorage$CredentialHash v56 = v59;
																																	boolean v61 = LockSettingsService.isCredentialSharableWithParent(p3);
																																	if (v61 == 0) {
																																		boolean v62 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p3);
																																		if (v62 != 0) {
																																			boolean v60 = ;
																																			if (v60 == 0) {
																																				boolean v63 = .isNone();
																																				if (v63 == 0) {
																																					byte[] v65 = this.mStorage.readChildProfileLock(p3);
																																					if (v65 == 0) {
																																						byte[] v66 = Arrays.copyOfRange(v65, 0, 12);
																																						byte[] v67 = Arrays.copyOfRange(v65, 12, v65.length);
																																						StringBuilder v68 = new StringBuilder();
																																						StringBuilder v70 = v68.append("profile_key_name_decrypt_");
																																						StringBuilder v71 = v68.append(p3);
																																						String v72 = v68.toString();
																																						Key v73 = this.mJavaKeyStore.getKey(v72, 0);
																																						Cipher v74 = Cipher.getInstance("AES/GCM/NoPadding");
																																						GCMParameterSpec v75 = new GCMParameterSpec(128,v66);
																																						v74.init(2, v73, v75);
																																						byte[] v78 = v74.doFinal(v67);
																																						LockscreenCredential v79 = LockscreenCredential.createManagedPassword(v78);
																																						Arrays.fill(v78, 0);
																																						this.mManagedProfilePasswordCache.storePassword(p3, v79);
																																						LockscreenCredential v64 = v79;
																																						long v90 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
																																						if ((v90 < 0) != 0) {
																																							Preconditions.checkState(, "Cannot reinitialize SP");
																																							IGateKeeperService v92 = LockSettingsService.getGateKeeperService();
																																							SyntheticPasswordManager$AuthenticationToken v93 = this.mSpManager.newSyntheticPasswordAndSid(v92, LockSettingsStorage$CredentialHash.hash, , p3);
																																							if (v93 != 0) {
																																								IGateKeeperService v94 = LockSettingsService.getGateKeeperService();
																																								long v95 = this.mSpManager.createPasswordBasedSyntheticPassword(v94, , v93, p3);
																																								boolean v96 = .isNone();
																																								if (v96 != 0) {
																																									if (LockSettingsStorage$CredentialHash.hash != 0) {
																																										IGateKeeperService v97 = LockSettingsService.getGateKeeperService();
																																										this.mSpManager.newSidForUser(v97, v93, p3);
																																										IGateKeeperService v99 = LockSettingsService.getGateKeeperService();
																																										VerifyCredentialResponse v100 = this.mSpManager.verifyChallenge(v99, v93, 0, p3);
																																										byte[] v101 = v93.deriveDiskEncryptionKey();
																																										LockSettingsService.setUserKeyProtection(p3, v101);
																																										byte[] v103 = v93.deriveKeyStorePassword();
																																										LockSettingsService.setKeystorePassword(v103, p3);
																																										LockSettingsService.fixateNewestUserKeyAuth(p3);
																																										LockSettingsService.setSyntheticPasswordHandleLocked(v95, p3);
																																										LockSettingsService.onAuthTokenKnownForUser(p3, v93);
																																										SyntheticPasswordManager$AuthenticationToken v83 = v93;
																																										boolean v109 = .isNone();
																																										if (v109 == 0) {
																																											boolean v110 = LockSettingsService.isProfileWithUnifiedLock(p3);
																																											if (v110 == 0) {
																																												LockscreenCredential v111 = LockSettingsService.getDecryptedPasswordForTiedProfile(p3);
																																												long v113 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
																																												IGateKeeperService v114 = LockSettingsService.getGateKeeperService();
																																												SyntheticPasswordManager$AuthenticationResult v115 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v114, v113, , p3, 0);
																																												if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																																													if (SyntheticPasswordManager$AuthenticationResult.gkResponse == 0) {
																																														int v116 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																														if (v116 != -1) {
																																															int v117 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																															if (v117 != 1) {
																																																boolean v108 = 0;
																																																boolean v50 = v108;
																																																if (v50 != 0) {
																																																	boolean v122 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
																																																	if (v122 == 0) {
																																																		int v123 = LockSettingsService.getCredentialTypeInternal(p1);
																																																		if (v123 != 1) {
																																																			boolean v120 = ;
																																																			this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
																																																			if (1 == 0) {
																																																				String v128 = LockSettingsStorage.getChildProfileLockFile(p1);
																																																				LockSettingsStorage.deleteFile(v128);
																																																				caughtException.printStackTrace();
																																																				StringBuilder v138 = new StringBuilder();
																																																				StringBuilder v140 = v138.append("profile_key_name_encrypt_");
																																																				StringBuilder v141 = v138.append(p1);
																																																				String v142 = v138.toString();
																																																				this.mJavaKeyStore.deleteEntry(v142);
																																																				StringBuilder v144 = new StringBuilder();
																																																				StringBuilder v146 = v144.append("profile_key_name_decrypt_");
																																																				StringBuilder v147 = v144.append(p1);
																																																				String v148 = v144.toString();
																																																				this.mJavaKeyStore.deleteEntry(v148);
																																																				p0.notifyPasswordChanged(p1, p3);
																																																				UserHandle v153 = UserHandle.of(p1);
																																																				boolean v154 = this.mUserManagerCache.containsKey(v153);
																																																				if (v154 == 0) {
																																																					Context v155 = this.mContext.createPackageContextAsUser("system", 0, v153);
																																																					Object v156 = v155.getSystemService(UserManage.class);
																																																					Object v157 = this.mUserManagerCache.put(v153, v156);
																																																					UserManager v152 = v156;
																																																					boolean v158 = v152.isCredentialSharableWithParent();
																																																					boolean v151 = v158;
																																																					if (v151 == 0) {
																																																						Object v160 = this.mContext.getSystemService(TrustManage.class);
																																																						this.mService.setDeviceLockedForUser(p1, 0);
																																																						p0.notifySeparateProfileChallengeChanged(p3);
																																																						if (p3 != 0) {
																																																							boolean v166 = StorageManager.isEncrypted();
																																																							boolean v165 = v166;
																																																							if (v165 == 0) {
																																																								boolean v168 = LockSettingsService.isCredentialRequiredToDecrypt();
																																																								if (v168 == 0) {
																																																									boolean v169 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
																																																									if (v169 != 0) {
																																																										boolean v167 = ;
																																																										if (v167 == 0) {
																																																											boolean v170 = p1.isNone();
																																																											if (v170 == 0) {
																																																												boolean v172 = LockSettingsService.isDeviceEncryptionEnabled();
																																																												if (v172 == 0) {
																																																													ContentResolver v173 = this.mContext.getContentResolver();
																																																													boolean v174 = Settings$Global.putInt(v173, "require_password_to_decrypt", 0);
																																																													boolean v175 = p1.isPattern();
																																																													if (v175 == 0) {
																																																														this.mStorage.setBoolean("lockscreen.patterneverchosen", 1, p2);
																																																														boolean v180 = p1.isNone();
																																																														if (v180 == 0) {
																																																															boolean v181 = p1.isPattern();
																																																															if (v181 == 0) {
																																																																String v182 = LockSettingsService.getString("lockscreen.passwordhistory", 0, p2);
																																																																if (v182 != 0) {
																																																																	int v183 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
																																																																	if (v183 != 0) {
																																																																		byte[] v184 = LockSettingsService.getHashFactor(p1, p2);
																																																																		String v185 = LockSettingsService.getSalt(p2);
																																																																		byte[] v186 = v185.getBytes();
																																																																		String v187 = p1.passwordToHistoryHash(v186, v184);
																																																																		if (v187 != 0) {
																																																																			boolean v188 = TextUtils.isEmpty();
																																																																			if (v188 == 0) {
																																																																				String v189 = .split(",");
																																																																				StringJoiner v190 = new StringJoiner(",");
																																																																				StringJoiner v192 = v190.add();
																																																																				if ( >= (v183 + -1)) {
																																																																					if ( >= v189.length) {
																																																																						String v193 = v190.toString();
																																																																						LockSettingsService.setString("lockscreen.passwordhistory", , p2);
																																																																						Object v195 = this.mContext.getSystemService(TrustManage.class);
																																																																						this.mService.reportEnabledTrustAgentsChanged(p2);
																																																																						p0.scheduleGc();
																																																																						Binder.restoreCallingIdentity(v8);
																																																																						return 1;
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean setLockCredential(LockscreenCredential p1, LockscreenCredential p2, int p3){
	if (this.mHasSecureLockScreen != 0) {
		if (p1 == 0) {
			if (this.mCredential == 0) {
				Preconditions.checkState(, "Credential is already zeroized");
				int v1 = this.mType;
				if (v1 != -1) {
					if (v4 != 0) {
						if (v5 != 0) {
							if (v6 == 0) {
								boolean v7 = p2.isNone();
								if (v7 == 0) {
									long v8 = Binder.clearCallingIdentity();
									ContentResolver v10 = this.mContext.getContentResolver();
									int v12 = Settings$Secure.getIntForUser(v10, "user_setup_complete", 0, 0);
									int v11 = v12;
									if (v11 != 0) {
										int v14 = Settings$Secure.getIntForUser(v10, "secure_frp_mode", 0, 0);
										int v13 = v14;
										if (v13 != 1) {
											if ( == 0) {
												if ( != 0) {
													boolean v15 = p2.isNone();
													if (v15 != 0) {
														UserManager v18 = LockSettingsService.getUserManagerFromCache(p1);
														boolean v19 = v18.isCredentialSharableWithParent();
														boolean v17 = v19;
														if (v17 == 0) {
															boolean v21 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
															boolean v20 = v21;
															if (v20 != 0) {
																boolean v16 = ;
																if (v16 == 0) {
																	UserInfo v22 = this.mUserManager.getProfileParent(p3);
																	if (v24 != 0) {
																		if (v25 == 0) {
																			long v26 = Binder.clearCallingIdentity();
																			if (p1 == 0) {
																				boolean v28 = p1.isNone();
																				if (v28 != 0) {
																					if (p2 != -9999) {
																						ContentResolver v29 = this.mContext.getContentResolver();
																						int v30 = this.mInjector.settingsGlobalGetInt(v29, "device_provisioned", 0);
																						if (v30 == 0) {
																							VerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);
																							if (v31 == 0) {
																								if (p2 != -9999) {
																									LockSettingsStorage$CredentialHash v32 = this.mStorage.readCredentialHash(p2);
																									boolean v33 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
																									if (v33 != 0) {
																										int v39 = p1.getType();
																										VerifyCredentialResponse v27 = VerifyCredentialResponse.ERROR;
																										Binder.restoreCallingIdentity(v26);
																										LockSettingsService$$ExternalSyntheticLambda3 v45 = new LockSettingsService$$ExternalSyntheticLambda3();
																										boolean v47 = this.mHandler.postDelayed(v45, 2000);
																										VerifyCredentialResponse v23 = v27;
																										p2.zeroize();
																										LockscreenCredential v49 = LockscreenCredential.createNone();
																										Object v51 = Objects.requireNonNull(p1);
																										Object v52 = Objects.requireNonNull();
																										if (p3 != -9999) {
																											LockSettingsStorage$PersistentData v54 = this.mStorage.readPersistentDataBlock();
																											if (LockSettingsStorage$PersistentData.type == 1) {
																												if (LockSettingsStorage$PersistentData.type != 2) {
																													boolean v53 = ;
																													if (v53 == 0) {
																														boolean v55 = p1.isNone();
																														if (v55 == 0) {
																															LockSettingsStorage$CredentialHash v57 = LockSettingsStorage.readPasswordHashIfExists(p3);
																															if (v57 == 0) {
																																LockSettingsStorage$CredentialHash v58 = LockSettingsStorage.readPatternHashIfExists(p3);
																																if (v58 == 0) {
																																	LockSettingsStorage$CredentialHash v59 = LockSettingsStorage$CredentialHash.createEmptyHash();
																																	LockSettingsStorage$CredentialHash v56 = v59;
																																	boolean v61 = LockSettingsService.isCredentialSharableWithParent(p3);
																																	if (v61 == 0) {
																																		boolean v62 = LockSettingsService.getSeparateProfileChallengeEnabledInternal(p3);
																																		if (v62 != 0) {
																																			boolean v60 = ;
																																			if (v60 == 0) {
																																				boolean v63 = .isNone();
																																				if (v63 == 0) {
																																					byte[] v65 = this.mStorage.readChildProfileLock(p3);
																																					if (v65 == 0) {
																																						byte[] v66 = Arrays.copyOfRange(v65, 0, 12);
																																						byte[] v67 = Arrays.copyOfRange(v65, 12, v65.length);
																																						StringBuilder v68 = new StringBuilder();
																																						StringBuilder v70 = v68.append("profile_key_name_decrypt_");
																																						StringBuilder v71 = v68.append(p3);
																																						String v72 = v68.toString();
																																						Key v73 = this.mJavaKeyStore.getKey(v72, 0);
																																						Cipher v74 = Cipher.getInstance("AES/GCM/NoPadding");
																																						GCMParameterSpec v75 = new GCMParameterSpec(128,v66);
																																						v74.init(2, v73, v75);
																																						byte[] v78 = v74.doFinal(v67);
																																						LockscreenCredential v79 = LockscreenCredential.createManagedPassword(v78);
																																						Arrays.fill(v78, 0);
																																						this.mManagedProfilePasswordCache.storePassword(p3, v79);
																																						LockscreenCredential v64 = v79;
																																						long v90 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
																																						if ((v90 < 0) != 0) {
																																							Preconditions.checkState(, "Cannot reinitialize SP");
																																							IGateKeeperService v92 = LockSettingsService.getGateKeeperService();
																																							SyntheticPasswordManager$AuthenticationToken v93 = this.mSpManager.newSyntheticPasswordAndSid(v92, LockSettingsStorage$CredentialHash.hash, , p3);
																																							if (v93 != 0) {
																																								IGateKeeperService v94 = LockSettingsService.getGateKeeperService();
																																								long v95 = this.mSpManager.createPasswordBasedSyntheticPassword(v94, , v93, p3);
																																								boolean v96 = .isNone();
																																								if (v96 != 0) {
																																									if (LockSettingsStorage$CredentialHash.hash != 0) {
																																										IGateKeeperService v97 = LockSettingsService.getGateKeeperService();
																																										this.mSpManager.newSidForUser(v97, v93, p3);
																																										IGateKeeperService v99 = LockSettingsService.getGateKeeperService();
																																										VerifyCredentialResponse v100 = this.mSpManager.verifyChallenge(v99, v93, 0, p3);
																																										byte[] v101 = v93.deriveDiskEncryptionKey();
																																										LockSettingsService.setUserKeyProtection(p3, v101);
																																										byte[] v103 = v93.deriveKeyStorePassword();
																																										LockSettingsService.setKeystorePassword(v103, p3);
																																										LockSettingsService.fixateNewestUserKeyAuth(p3);
																																										LockSettingsService.setSyntheticPasswordHandleLocked(v95, p3);
																																										LockSettingsService.onAuthTokenKnownForUser(p3, v93);
																																										SyntheticPasswordManager$AuthenticationToken v83 = v93;
																																										boolean v109 = .isNone();
																																										if (v109 == 0) {
																																											boolean v110 = LockSettingsService.isProfileWithUnifiedLock(p3);
																																											if (v110 == 0) {
																																												LockscreenCredential v111 = LockSettingsService.getDecryptedPasswordForTiedProfile(p3);
																																												long v113 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
																																												IGateKeeperService v114 = LockSettingsService.getGateKeeperService();
																																												SyntheticPasswordManager$AuthenticationResult v115 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v114, v113, , p3, 0);
																																												if (SyntheticPasswordManager$AuthenticationResult.authToken != 0) {
																																													if (SyntheticPasswordManager$AuthenticationResult.gkResponse == 0) {
																																														int v116 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																														if (v116 != -1) {
																																															int v117 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
																																															if (v117 != 1) {
																																																boolean v108 = 0;
																																																boolean v50 = v108;
																																																if (v50 != 0) {
																																																	boolean v122 = "lock_pattern_autolock".equals("lockscreen.profilechallenge");
																																																	if (v122 == 0) {
																																																		int v123 = LockSettingsService.getCredentialTypeInternal(p1);
																																																		if (v123 != 1) {
																																																			boolean v120 = ;
																																																			this.mStorage.setBoolean("lockscreen.profilechallenge", p2, p1);
																																																			if (1 == 0) {
																																																				String v128 = LockSettingsStorage.getChildProfileLockFile(p1);
																																																				LockSettingsStorage.deleteFile(v128);
																																																				caughtException.printStackTrace();
																																																				StringBuilder v138 = new StringBuilder();
																																																				StringBuilder v140 = v138.append("profile_key_name_encrypt_");
																																																				StringBuilder v141 = v138.append(p1);
																																																				String v142 = v138.toString();
																																																				this.mJavaKeyStore.deleteEntry(v142);
																																																				StringBuilder v144 = new StringBuilder();
																																																				StringBuilder v146 = v144.append("profile_key_name_decrypt_");
																																																				StringBuilder v147 = v144.append(p1);
																																																				String v148 = v144.toString();
																																																				this.mJavaKeyStore.deleteEntry(v148);
																																																				p0.notifyPasswordChanged(p1, p3);
																																																				UserHandle v153 = UserHandle.of(p1);
																																																				boolean v154 = this.mUserManagerCache.containsKey(v153);
																																																				if (v154 == 0) {
																																																					Context v155 = this.mContext.createPackageContextAsUser("system", 0, v153);
																																																					Object v156 = v155.getSystemService(UserManage.class);
																																																					Object v157 = this.mUserManagerCache.put(v153, v156);
																																																					UserManager v152 = v156;
																																																					boolean v158 = v152.isCredentialSharableWithParent();
																																																					boolean v151 = v158;
																																																					if (v151 == 0) {
																																																						Object v160 = this.mContext.getSystemService(TrustManage.class);
																																																						this.mService.setDeviceLockedForUser(p1, 0);
																																																						p0.notifySeparateProfileChallengeChanged(p3);
																																																						if (p3 != 0) {
																																																							boolean v166 = StorageManager.isEncrypted();
																																																							boolean v165 = v166;
																																																							if (v165 == 0) {
																																																								boolean v168 = LockSettingsService.isCredentialRequiredToDecrypt();
																																																								if (v168 == 0) {
																																																									boolean v169 = LockSettingsService.isDoNotAskCredentialsOnBootSet();
																																																									if (v169 != 0) {
																																																										boolean v167 = ;
																																																										if (v167 == 0) {
																																																											boolean v170 = p1.isNone();
																																																											if (v170 == 0) {
																																																												boolean v172 = LockSettingsService.isDeviceEncryptionEnabled();
																																																												if (v172 == 0) {
																																																													ContentResolver v173 = this.mContext.getContentResolver();
																																																													boolean v174 = Settings$Global.putInt(v173, "require_password_to_decrypt", 0);
																																																													boolean v175 = p1.isPattern();
																																																													if (v175 == 0) {
																																																														this.mStorage.setBoolean("lockscreen.patterneverchosen", 1, p2);
																																																														boolean v180 = p1.isNone();
																																																														if (v180 == 0) {
																																																															boolean v181 = p1.isPattern();
																																																															if (v181 == 0) {
																																																																String v182 = LockSettingsService.getString("lockscreen.passwordhistory", 0, p2);
																																																																if (v182 != 0) {
																																																																	int v183 = LockSettingsService.getRequestedPasswordHistoryLength(p2);
																																																																	if (v183 != 0) {
																																																																		byte[] v184 = LockSettingsService.getHashFactor(p1, p2);
																																																																		String v185 = LockSettingsService.getSalt(p2);
																																																																		byte[] v186 = v185.getBytes();
																																																																		String v187 = p1.passwordToHistoryHash(v186, v184);
																																																																		if (v187 != 0) {
																																																																			boolean v188 = TextUtils.isEmpty();
																																																																			if (v188 == 0) {
																																																																				String v189 = .split(",");
																																																																				StringJoiner v190 = new StringJoiner(",");
																																																																				StringJoiner v192 = v190.add();
																																																																				if ( >= (v183 + -1)) {
																																																																					if ( >= v189.length) {
																																																																						String v193 = v190.toString();
																																																																						LockSettingsService.setString("lockscreen.passwordhistory", , p2);
																																																																						Object v195 = this.mContext.getSystemService(TrustManage.class);
																																																																						this.mService.reportEnabledTrustAgentsChanged(p2);
																																																																						p0.scheduleGc();
																																																																						Binder.restoreCallingIdentity(v8);
																																																																						return 1;
																																																																					}
																																																																				}
																																																																			}
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['VerifyCredentialResponse v31 = LockSettingsService.spBasedDoVerifyCredential(p1, p2, 0, p3);\nLockscreenCredential v79 = LockscreenCredential.createManagedPassword(v78);\nSyntheticPasswordManager$AuthenticationToken v93 = this.mSpManager.newSyntheticPasswordAndSid(v92, LockSettingsStorage$CredentialHash.hash, , p3);', 'this.mSpManager.createPasswordBasedSyntheticPassword(v94, , v93, p3);\nthis.mSpManager.verifyChallenge(v99, v93, 0, p3);']

The method setLockCredential has the following similar APIs:

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.8545175790786743
  - Access Control Level: SYS_OR_SIG and the following code:
SyntheticPasswordManager$AuthenticationResult v20 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v19, v18, p1, p2, p3);
VerifyCredentialResponse v25 = this.mSpManager.verifyChallenge(v24, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
IGateKeeperService v38 = LockSettingsService.getGateKeeperService();
v38.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v39);

- API Name: tryUnlockWithCachedUnifiedChallenge(I)Z with Similarity Score: 0.8471981883049011
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = this.mEncryptedPasswords.get(p1);
this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v33, p1, p2, p3);
IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);

