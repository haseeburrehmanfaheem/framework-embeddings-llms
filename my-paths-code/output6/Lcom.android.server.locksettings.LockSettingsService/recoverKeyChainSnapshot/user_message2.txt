The method recoverKeyChainSnapshot has the following code snippet:

This is path 1 for the API with depth 2:
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	Object v6 = this.mSessionsByUid.get(v4);
	if (v6 != 0) {
		Iterator v7 = v6.iterator();
		boolean v8 = v7.hasNext();
		if (v8 == 0) {
			Object v9 = v7.next();
			String v10 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v9);
			boolean v11 = p1.equals(v10);
			if (v11 == 0) {
				RecoverySessionStorage$Entry v5 = v9;
				if (v5 == 0) {
					byte[] v13 = v5.getKeyClaimant();
					byte[] v14 = v5.getVaultParams();
					byte[] v15 = KeySyncUtils.decryptRecoveryClaimResponse(v13, v14, p2);
					byte[] v16 = v5.getLskfHash();
					byte[] v17 = KeySyncUtils.decryptRecoveryKey(v16, v15);
					byte[] v12 = v17;
					HashMap v19 = new HashMap();
					Iterator v21 = p3.iterator();
					boolean v22 = v21.hasNext();
					if (v22 == 0) {
						boolean v23 = p3.isEmpty();
						if (v23 != 0) {
							boolean v24 = v19.isEmpty();
							if (v24 != 0) {
								Map v18 = v19;
								ArrayMap v26 = new ArrayMap(v27);
								int v27 = v18.size();
								Set v29 = v18.keySet();
								Iterator v30 = v29.iterator();
								boolean v31 = v30.hasNext();
								if (v31 == 0) {
									Map v25 = v26;
									Arrays.fill(this.mLskfHash, 0);
									Arrays.fill(this.mKeyClaimant, 0);
									Object v36 = this.mSessionsByUid.get(v4);
									if (v36 != 0) {
										Iterator v37 = v36.iterator();
										boolean v38 = v37.hasNext();
										if (v38 == 0) {
											this.mSessionsByUid.remove(v4);
											Map v1 = v25;
											return v1;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	int v3 = UserHandle.getCallingUserId();
	int v4 = Binder.getCallingUid();
	Object v6 = this.mSessionsByUid.get(v4);
	if (v6 != 0) {
		Iterator v7 = v6.iterator();
		boolean v8 = v7.hasNext();
		if (v8 == 0) {
			Object v9 = v7.next();
			String v10 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v9);
			boolean v11 = p1.equals(v10);
			if (v11 == 0) {
				RecoverySessionStorage$Entry v5 = v9;
				if (v5 == 0) {
					byte[] v13 = v5.getKeyClaimant();
					byte[] v14 = v5.getVaultParams();
					byte[] v15 = KeySyncUtils.decryptRecoveryClaimResponse(v13, v14, p2);
					byte[] v16 = v5.getLskfHash();
					byte[] v17 = KeySyncUtils.decryptRecoveryKey(v16, v15);
					byte[] v12 = v17;
					HashMap v19 = new HashMap();
					Iterator v21 = p3.iterator();
					boolean v22 = v21.hasNext();
					if (v22 == 0) {
						boolean v23 = p3.isEmpty();
						if (v23 != 0) {
							Map v18 = v19;
							ArrayMap v25 = new ArrayMap(v26);
							int v26 = v18.size();
							Set v28 = v18.keySet();
							Iterator v29 = v28.iterator();
							boolean v30 = v29.hasNext();
							if (v30 == 0) {
								Map v24 = v25;
								Arrays.fill(this.mLskfHash, 0);
								Arrays.fill(this.mKeyClaimant, 0);
								Object v35 = this.mSessionsByUid.get(v4);
								if (v35 != 0) {
									Iterator v36 = v35.iterator();
									boolean v37 = v36.hasNext();
									if (v37 == 0) {
										this.mSessionsByUid.remove(v4);
										Map v1 = v24;
										return v1;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['byte[] v15 = KeySyncUtils.decryptRecoveryClaimResponse(v13, v14, p2);\nbyte[] v17 = KeySyncUtils.decryptRecoveryKey(v16, v15);\nHashMap v19 = new HashMap();\nMap v18 = v19;\nreturn v1;']

The method recoverKeyChainSnapshot has the following similar APIs:

- API Name: startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B with Similarity Score: 0.8001410365104675
  - Access Control Level: NONE and the following code:
PublicKey v27 = KeySyncUtils.deserializePublicKey(v22);
boolean v28 = RecoverableKeyStoreManager.publicKeysMatch(v27, p4);
byte[] v29 = KeySyncUtils.generateKeyClaimant();
RecoverySessionStorage$Entry v32 = new RecoverySessionStorage$Entry(p1,v31,v29,p4);
this.mRecoverySessionStorage.add(v25, v32);
byte[] v42 = KeySyncUtils.calculateThmKfHash(v31);
byte[] v43 = KeySyncUtils.encryptRecoveryClaim(v27, p4, p5, v42, v29);

