This is path 1 for the API with depth 2:
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	if (v1 != 0) {
		if (v2 == 0) {
			long v3 = Binder.clearCallingIdentity();
			if (p1 == 0) {
				boolean v5 = p1.isNone();
				if (v5 != 0) {
					if (p2 != -9999) {
						ContentResolver v6 = this.mContext.getContentResolver();
						int v8 = Settings$Global.getInt(v6, "device_provisioned", 0);
						int v7 = v8;
						if (v7 == 0) {
							boolean v10 = this.mInjector.hasEnrolledBiometrics(p2);
							if ((p4 & 1) == 0) {
								boolean v19 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
								if (v19 != 0) {
									if (p2 != -9999) {
										long v20 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
										IGateKeeperService v21 = LockSettingsService.getGateKeeperService();
										SyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v20, p1, p2, p3);
										int v23 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
										if (v23 != 0) {
											byte[] v24 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
											this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v24);
											IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
											VerifyCredentialResponse v27 = this.mSpManager.verifyChallenge(v26, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
											int v28 = v27.getResponseCode();
											if (v28 == 0) {
												VerifyCredentialResponse v9 = VerifyCredentialResponse.ERROR;
												if (v9 == 0) {
													if (p2 != -9999) {
														LockSettingsStorage$CredentialHash v31 = LockSettingsStorage.readPasswordHashIfExists(p2);
														if (v31 == 0) {
															LockSettingsStorage$CredentialHash v32 = LockSettingsStorage.readPatternHashIfExists(p2);
															if (v32 == 0) {
																LockSettingsStorage$CredentialHash v33 = LockSettingsStorage$CredentialHash.createEmptyHash();
																LockSettingsStorage$CredentialHash v30 = v33;
																if (LockSettingsStorage$CredentialHash.type != 2) {
																	int v35 = LockscreenCredential.getType();
																	if (v35 == 4) {
																		int v36 = LockscreenCredential.getType();
																		if (v36 != 3) {
																			boolean v34 = ;
																			if (v34 != 0) {
																				if (v30 == 0) {
																					if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																						boolean v38 = p1.isNone();
																						if (v38 == 0) {
																							if (v30 == 0) {
																								if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																									boolean v39 = p1.isNone();
																									if (v39 == 0) {
																										StrictMode.noteDiskRead();
																										IGateKeeperService v41 = LockSettingsService.getGateKeeperService();
																										byte[] v42 = p1.getCredential();
																										GateKeeperResponse v43 = v41.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v42);
																										VerifyCredentialResponse v44 = LockSettingsService.convertResponse();
																										boolean v45 = .getShouldReEnroll();
																										int v46 = v44.getResponseCode();
																										if (v46 != 0) {
																											if (p3 == 0) {
																												p3.onCredentialVerified();
																												LockSettingsService.setUserPasswordMetrics(p1, p2);
																												byte[] v50 = p1.getCredential();
																												LockSettingsService.unlockKeystore(v50, p2);
																												byte[] v58 = LockSettingsService.secretFromCredential(p1);
																												LockSettingsService.unlockUser(p2, v58);
																												boolean v60 = LockSettingsService.isProfileWithSeparatedLock(p2);
																												if (v60 == 0) {
																													LockSettingsService.setDeviceUnlockedForUser(p2);
																													if (v45 == 0) {
																														boolean v62 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
																														LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																														VerifyCredentialResponse v37 = v44;
																														int v64 = this.mResponseCode;
																														if (v64 != 0) {
																															Message v66 = this.mHandler.obtainMessage(5, p2, 0);
																															v66.sendToTarget();
																															VerifyCredentialResponse v4 = v37;
																															Binder.restoreCallingIdentity(v3);
																															p0.scheduleGc();
																															return v4;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	if (v1 != 0) {
		if (v2 == 0) {
			long v3 = Binder.clearCallingIdentity();
			if (p1 == 0) {
				boolean v5 = p1.isNone();
				if (v5 != 0) {
					if (p2 != -9999) {
						ContentResolver v6 = this.mContext.getContentResolver();
						int v8 = Settings$Global.getInt(v6, "device_provisioned", 0);
						int v7 = v8;
						if (v7 == 0) {
							boolean v10 = this.mInjector.hasEnrolledBiometrics(p2);
							if ((p4 & 1) == 0) {
								boolean v19 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
								if (v19 != 0) {
									if (p2 != -9999) {
										long v20 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
										IGateKeeperService v21 = LockSettingsService.getGateKeeperService();
										SyntheticPasswordManager$AuthenticationResult v22 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v21, v20, p1, p2, p3);
										int v23 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
										if (v23 != 0) {
											byte[] v24 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
											this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v24);
											IGateKeeperService v26 = LockSettingsService.getGateKeeperService();
											VerifyCredentialResponse v27 = this.mSpManager.verifyChallenge(v26, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
											int v28 = v27.getResponseCode();
											if (v28 == 0) {
												VerifyCredentialResponse v9 = VerifyCredentialResponse.ERROR;
												if (v9 == 0) {
													if (p2 != -9999) {
														LockSettingsStorage$CredentialHash v31 = LockSettingsStorage.readPasswordHashIfExists(p2);
														if (v31 == 0) {
															LockSettingsStorage$CredentialHash v32 = LockSettingsStorage.readPatternHashIfExists(p2);
															if (v32 == 0) {
																LockSettingsStorage$CredentialHash v30 = v32;
																if (LockSettingsStorage$CredentialHash.type != 2) {
																	int v34 = LockscreenCredential.getType();
																	if (v34 == 4) {
																		int v35 = LockscreenCredential.getType();
																		if (v35 != 3) {
																			boolean v33 = ;
																			if (v33 != 0) {
																				if (v30 == 0) {
																					if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																						boolean v37 = p1.isNone();
																						if (v37 == 0) {
																							if (v30 == 0) {
																								if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																									boolean v38 = p1.isNone();
																									if (v38 == 0) {
																										StrictMode.noteDiskRead();
																										IGateKeeperService v40 = LockSettingsService.getGateKeeperService();
																										byte[] v41 = p1.getCredential();
																										GateKeeperResponse v42 = v40.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v41);
																										VerifyCredentialResponse v43 = LockSettingsService.convertResponse();
																										boolean v44 = .getShouldReEnroll();
																										int v45 = v43.getResponseCode();
																										if (v45 != 0) {
																											if (p3 == 0) {
																												p3.onCredentialVerified();
																												LockSettingsService.setUserPasswordMetrics(p1, p2);
																												byte[] v49 = p1.getCredential();
																												LockSettingsService.unlockKeystore(v49, p2);
																												byte[] v57 = LockSettingsService.secretFromCredential(p1);
																												LockSettingsService.unlockUser(p2, v57);
																												boolean v59 = LockSettingsService.isProfileWithSeparatedLock(p2);
																												if (v59 == 0) {
																													LockSettingsService.setDeviceUnlockedForUser(p2);
																													if (v44 == 0) {
																														boolean v61 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
																														LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																														VerifyCredentialResponse v36 = v43;
																														int v63 = this.mResponseCode;
																														if (v63 != 0) {
																															Message v65 = this.mHandler.obtainMessage(5, p2, 0);
																															v65.sendToTarget();
																															VerifyCredentialResponse v4 = v36;
																															Binder.restoreCallingIdentity(v3);
																															p0.scheduleGc();
																															return v4;
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	if (v1 != 0) {
		long v2 = Binder.clearCallingIdentity();
		if (p1 == 0) {
			boolean v4 = p1.isNone();
			if (v4 != 0) {
				if (p2 != -9999) {
					ContentResolver v5 = this.mContext.getContentResolver();
					int v7 = Settings$Global.getInt(v5, "device_provisioned", 0);
					int v6 = v7;
					if (v6 == 0) {
						boolean v9 = this.mInjector.hasEnrolledBiometrics(p2);
						if ((p4 & 1) == 0) {
							boolean v18 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
							if (v18 != 0) {
								if (p2 != -9999) {
									long v19 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
									IGateKeeperService v20 = LockSettingsService.getGateKeeperService();
									SyntheticPasswordManager$AuthenticationResult v21 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v20, v19, p1, p2, p3);
									int v22 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
									if (v22 != 0) {
										byte[] v23 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
										this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v23);
										IGateKeeperService v25 = LockSettingsService.getGateKeeperService();
										VerifyCredentialResponse v26 = this.mSpManager.verifyChallenge(v25, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
										int v27 = v26.getResponseCode();
										if (v27 == 0) {
											VerifyCredentialResponse v8 = VerifyCredentialResponse.ERROR;
											if (v8 == 0) {
												if (p2 != -9999) {
													LockSettingsStorage$CredentialHash v30 = LockSettingsStorage.readPasswordHashIfExists(p2);
													if (v30 == 0) {
														LockSettingsStorage$CredentialHash v31 = LockSettingsStorage.readPatternHashIfExists(p2);
														if (v31 == 0) {
															LockSettingsStorage$CredentialHash v32 = LockSettingsStorage$CredentialHash.createEmptyHash();
															LockSettingsStorage$CredentialHash v29 = v32;
															if (LockSettingsStorage$CredentialHash.type != 2) {
																int v34 = LockscreenCredential.getType();
																if (v34 == 4) {
																	int v35 = LockscreenCredential.getType();
																	if (v35 != 3) {
																		boolean v33 = ;
																		if (v33 != 0) {
																			if (v29 == 0) {
																				if (LockSettingsStorage$CredentialHash.hash.length != 0) {
																					boolean v37 = p1.isNone();
																					if (v37 == 0) {
																						if (v29 == 0) {
																							if (LockSettingsStorage$CredentialHash.hash.length == 0) {
																								boolean v38 = p1.isNone();
																								if (v38 == 0) {
																									StrictMode.noteDiskRead();
																									IGateKeeperService v40 = LockSettingsService.getGateKeeperService();
																									byte[] v41 = p1.getCredential();
																									GateKeeperResponse v42 = v40.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v41);
																									VerifyCredentialResponse v43 = LockSettingsService.convertResponse();
																									boolean v44 = .getShouldReEnroll();
																									int v45 = v43.getResponseCode();
																									if (v45 != 0) {
																										if (p3 == 0) {
																											p3.onCredentialVerified();
																											LockSettingsService.setUserPasswordMetrics(p1, p2);
																											byte[] v49 = p1.getCredential();
																											LockSettingsService.unlockKeystore(v49, p2);
																											byte[] v57 = LockSettingsService.secretFromCredential(p1);
																											LockSettingsService.unlockUser(p2, v57);
																											boolean v59 = LockSettingsService.isProfileWithSeparatedLock(p2);
																											if (v59 == 0) {
																												LockSettingsService.setDeviceUnlockedForUser(p2);
																												if (v44 == 0) {
																													boolean v61 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
																													LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
																													VerifyCredentialResponse v36 = v43;
																													int v63 = this.mResponseCode;
																													if (v63 != 0) {
																														Message v65 = this.mHandler.obtainMessage(5, p2, 0);
																														v65.sendToTarget();
																														VerifyCredentialResponse v3 = v36;
																														Binder.restoreCallingIdentity(v2);
																														p0.scheduleGc();
																														return v3;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
