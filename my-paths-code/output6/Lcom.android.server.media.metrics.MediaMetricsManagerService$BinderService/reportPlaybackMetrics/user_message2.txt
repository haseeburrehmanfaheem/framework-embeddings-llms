The method reportPlaybackMetrics has the following code snippet:

This is path 1 for the API with depth 2:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			StringBuilder v9 = new StringBuilder();
			StringBuilder v11 = v9.append("Parsing integer failed for ");
			StringBuilder v12 = v11.append("media");
			StringBuilder v13 = v12.append(":");
			StringBuilder v14 = v13.append("media_metrics_mode");
			String v15 = v14.toString();
			int v16 = Log.e("DeviceConfig", v15);
			int v6 = 2;
			Integer v17 = Integer.valueOf(v6);
			this.mMode = v17;
			Binder.restoreCallingIdentity(v5);
			Integer v20 = this.mMode;
			int v21 = v20.intValue();
			if (v21 != 1) {
				Integer v22 = this.mMode;
				int v23 = v22.intValue();
				if (v23 != 0) {
					Context v24 = this.this$0.getContext();
					PackageManager v25 = v24.getPackageManager();
					String v26 = v25.getPackagesForUid(v3);
					if (v26 == 0) {
						if (v26.length != 0) {
							Integer v27 = this.mMode;
							int v28 = v27.intValue();
							if (v28 != 2) {
								List v29 = this.mBlockList;
								if (v29 != 0) {
									List v31 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v30 = v31;
									this.mBlockList = v30;
									List v33 = this.mBlockList;
									if (v33 != 0) {
										int v1 = 99999;
										if (v1 != 99999) {
											StatsEvent$Builder v35 = StatsEvent.newBuilder();
											StatsEvent$Builder v36 = v35.setAtomId(320);
											if (v1 != 0) {
												int v37 = Binder.getCallingUid();
												StatsEvent$Builder v38 = v36.writeInt();
												StatsEvent$Builder v39 = v38.writeString(p1);
												long v40 = p2.getMediaDurationMillis();
												StatsEvent$Builder v41 = v39.writeLong(v40);
												int v42 = p2.getStreamSource();
												StatsEvent$Builder v43 = v41.writeInt(v42);
												int v44 = p2.getStreamType();
												StatsEvent$Builder v45 = v43.writeInt(v44);
												int v46 = p2.getPlaybackType();
												StatsEvent$Builder v47 = v45.writeInt(v46);
												int v48 = p2.getDrmType();
												StatsEvent$Builder v49 = v47.writeInt(v48);
												int v50 = p2.getContentType();
												StatsEvent$Builder v51 = v49.writeInt(v50);
												String v52 = p2.getPlayerName();
												StatsEvent$Builder v53 = v51.writeString(v52);
												String v54 = p2.getPlayerVersion();
												StatsEvent$Builder v55 = v53.writeString(v54);
												[B v56 = new [B(0);
												StatsEvent$Builder v57 = v55.writeByteArray(v56);
												int v58 = p2.getVideoFramesPlayed();
												StatsEvent$Builder v59 = v57.writeInt(v58);
												int v60 = p2.getVideoFramesDropped();
												StatsEvent$Builder v61 = v59.writeInt(v60);
												int v62 = p2.getAudioUnderrunCount();
												StatsEvent$Builder v63 = v61.writeInt(v62);
												long v64 = p2.getNetworkBytesRead();
												StatsEvent$Builder v65 = v63.writeLong(v64);
												long v66 = p2.getLocalBytesRead();
												StatsEvent$Builder v67 = v65.writeLong(v66);
												long v68 = p2.getNetworkTransferDurationMillis();
												StatsEvent$Builder v69 = v67.writeLong(v68);
												byte[] v70 = p2.getDrmSessionId();
												String v71 = Base64.encodeToString(v70, 0);
												StatsEvent$Builder v72 = v69.writeString(v71);
												StatsEvent$Builder v73 = v72.usePooledBuffer();
												StatsEvent v74 = v73.build();
												StatsLog.write(v74);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			StringBuilder v9 = new StringBuilder();
			StringBuilder v11 = v9.append("Parsing integer failed for ");
			StringBuilder v12 = v11.append("media");
			StringBuilder v13 = v12.append(":");
			StringBuilder v14 = v13.append("media_metrics_mode");
			String v15 = v14.toString();
			int v16 = Log.e("DeviceConfig", v15);
			int v6 = 2;
			Integer v17 = Integer.valueOf(v6);
			this.mMode = v17;
			Binder.restoreCallingIdentity(v5);
			Integer v20 = this.mMode;
			int v21 = v20.intValue();
			if (v21 != 1) {
				Integer v22 = this.mMode;
				int v23 = v22.intValue();
				if (v23 != 0) {
					Context v24 = this.this$0.getContext();
					PackageManager v25 = v24.getPackageManager();
					String v26 = v25.getPackagesForUid(v3);
					if (v26 == 0) {
						if (v26.length != 0) {
							Integer v27 = this.mMode;
							int v28 = v27.intValue();
							if (v28 != 2) {
								List v29 = this.mBlockList;
								if (v29 != 0) {
									List v31 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v30 = v31;
									this.mBlockList = v30;
									List v33 = this.mBlockList;
									if (v33 != 0) {
										int v1 = 99999;
										if (v1 != 99999) {
											StatsEvent$Builder v35 = StatsEvent.newBuilder();
											StatsEvent$Builder v36 = v35.setAtomId(320);
											if (v1 != 0) {
												StatsEvent$Builder v37 = v36.writeInt();
												StatsEvent$Builder v38 = v37.writeString(p1);
												long v39 = p2.getMediaDurationMillis();
												StatsEvent$Builder v40 = v38.writeLong(v39);
												int v41 = p2.getStreamSource();
												StatsEvent$Builder v42 = v40.writeInt(v41);
												int v43 = p2.getStreamType();
												StatsEvent$Builder v44 = v42.writeInt(v43);
												int v45 = p2.getPlaybackType();
												StatsEvent$Builder v46 = v44.writeInt(v45);
												int v47 = p2.getDrmType();
												StatsEvent$Builder v48 = v46.writeInt(v47);
												int v49 = p2.getContentType();
												StatsEvent$Builder v50 = v48.writeInt(v49);
												String v51 = p2.getPlayerName();
												StatsEvent$Builder v52 = v50.writeString(v51);
												String v53 = p2.getPlayerVersion();
												StatsEvent$Builder v54 = v52.writeString(v53);
												[B v55 = new [B(0);
												StatsEvent$Builder v56 = v54.writeByteArray(v55);
												int v57 = p2.getVideoFramesPlayed();
												StatsEvent$Builder v58 = v56.writeInt(v57);
												int v59 = p2.getVideoFramesDropped();
												StatsEvent$Builder v60 = v58.writeInt(v59);
												int v61 = p2.getAudioUnderrunCount();
												StatsEvent$Builder v62 = v60.writeInt(v61);
												long v63 = p2.getNetworkBytesRead();
												StatsEvent$Builder v64 = v62.writeLong(v63);
												long v65 = p2.getLocalBytesRead();
												StatsEvent$Builder v66 = v64.writeLong(v65);
												long v67 = p2.getNetworkTransferDurationMillis();
												StatsEvent$Builder v68 = v66.writeLong(v67);
												byte[] v69 = p2.getDrmSessionId();
												String v70 = Base64.encodeToString(v69, 0);
												StatsEvent$Builder v71 = v68.writeString(v70);
												StatsEvent$Builder v72 = v71.usePooledBuffer();
												StatsEvent v73 = v72.build();
												StatsLog.write(v73);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void reportPlaybackMetrics(String p1, PlaybackMetrics p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										int v1 = 99999;
										if (v1 != 99999) {
											StatsEvent$Builder v27 = StatsEvent.newBuilder();
											StatsEvent$Builder v28 = v27.setAtomId(320);
											if (v1 != 0) {
												int v29 = Binder.getCallingUid();
												StatsEvent$Builder v30 = v28.writeInt();
												StatsEvent$Builder v31 = v30.writeString(p1);
												long v32 = p2.getMediaDurationMillis();
												StatsEvent$Builder v33 = v31.writeLong(v32);
												int v34 = p2.getStreamSource();
												StatsEvent$Builder v35 = v33.writeInt(v34);
												int v36 = p2.getStreamType();
												StatsEvent$Builder v37 = v35.writeInt(v36);
												int v38 = p2.getPlaybackType();
												StatsEvent$Builder v39 = v37.writeInt(v38);
												int v40 = p2.getDrmType();
												StatsEvent$Builder v41 = v39.writeInt(v40);
												int v42 = p2.getContentType();
												StatsEvent$Builder v43 = v41.writeInt(v42);
												String v44 = p2.getPlayerName();
												StatsEvent$Builder v45 = v43.writeString(v44);
												String v46 = p2.getPlayerVersion();
												StatsEvent$Builder v47 = v45.writeString(v46);
												[B v48 = new [B(0);
												StatsEvent$Builder v49 = v47.writeByteArray(v48);
												int v50 = p2.getVideoFramesPlayed();
												StatsEvent$Builder v51 = v49.writeInt(v50);
												int v52 = p2.getVideoFramesDropped();
												StatsEvent$Builder v53 = v51.writeInt(v52);
												int v54 = p2.getAudioUnderrunCount();
												StatsEvent$Builder v55 = v53.writeInt(v54);
												long v56 = p2.getNetworkBytesRead();
												StatsEvent$Builder v57 = v55.writeLong(v56);
												long v58 = p2.getLocalBytesRead();
												StatsEvent$Builder v59 = v57.writeLong(v58);
												long v60 = p2.getNetworkTransferDurationMillis();
												StatsEvent$Builder v61 = v59.writeLong(v60);
												byte[] v62 = p2.getDrmSessionId();
												String v63 = Base64.encodeToString(v62, 0);
												StatsEvent$Builder v64 = v61.writeString(v63);
												StatsEvent$Builder v65 = v64.usePooledBuffer();
												StatsEvent v66 = v65.build();
												StatsLog.write(v66);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['StatsEvent$Builder v35 = StatsEvent.newBuilder();\nStatsEvent$Builder v36 = v35.setAtomId(320);\nint v29 = Binder.getCallingUid();\nStatsEvent$Builder v30 = v28.writeInt();\nStatsEvent$Builder v31 = v30.writeString(p1);\nlong v32 = p2.getMediaDurationMillis();\nStatsEvent$Builder v33 = v31.writeLong(v32);\nint v34 = p2.getStreamSource();\nStatsEvent$Builder v35 = v33.writeInt(v34);\nString v63 = Base64.encodeToString(v62, 0);\nStatsEvent$Builder v64 = v61.writeString(v63);\nStatsEvent$Builder v65 = v64.usePooledBuffer();\nStatsEvent v66 = v65.build();\nStatsLog.write(v66);']

The method reportPlaybackMetrics has the following similar APIs:

- API Name: reportNetworkEvent(Ljava/lang/String;Landroid/media/metrics/NetworkEvent;I)V with Similarity Score: 0.922630250453949
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v27 = StatsEvent.newBuilder();
StatsEvent$Builder v28 = v27.setAtomId(321);
StatsEvent$Builder v29 = v28.writeString(p1);
int v30 = p2.getNetworkType();
StatsEvent$Builder v31 = v29.writeInt(v30);
long v32 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v33 = v31.writeLong(v32);
StatsEvent$Builder v34 = v33.usePooledBuffer();
StatsEvent v35 = v34.build();
StatsLog.write(v35);

- API Name: reportPlaybackErrorEvent(Ljava/lang/String;Landroid/media/metrics/PlaybackErrorEvent;I)V with Similarity Score: 0.8830863237380981
  - Access Control Level: NONE and the following code:
StatsEvent$Builder v35 = StatsEvent.newBuilder();
StatsEvent$Builder v36 = v35.setAtomId(323);
StatsEvent$Builder v37 = v36.writeString(p1);
String v38 = p2.getExceptionStack();
StatsEvent$Builder v39 = v37.writeString(v38);
int v40 = p2.getErrorCode();
StatsEvent$Builder v41 = v39.writeInt(v40);
int v42 = p2.getSubErrorCode();
StatsEvent$Builder v43 = v41.writeInt(v42);
long v44 = p2.getTimeSinceCreatedMillis();
StatsEvent$Builder v45 = v43.writeLong(v44);
StatsEvent$Builder v46 = v45.usePooledBuffer();
StatsEvent v47 = v46.build();
StatsLog.write(v47);

