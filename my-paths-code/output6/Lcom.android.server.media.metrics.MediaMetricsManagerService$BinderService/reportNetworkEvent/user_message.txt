This is path 1 for the API with depth 2:
public void reportNetworkEvent(String p1, NetworkEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			StringBuilder v9 = new StringBuilder();
			StringBuilder v11 = v9.append("Parsing integer failed for ");
			StringBuilder v12 = v11.append("media");
			StringBuilder v13 = v12.append(":");
			StringBuilder v14 = v13.append("media_metrics_mode");
			String v15 = v14.toString();
			int v16 = Log.e("DeviceConfig", v15);
			int v6 = 2;
			Integer v17 = Integer.valueOf(v6);
			this.mMode = v17;
			Binder.restoreCallingIdentity(v5);
			Integer v20 = this.mMode;
			int v21 = v20.intValue();
			if (v21 != 1) {
				Integer v22 = this.mMode;
				int v23 = v22.intValue();
				if (v23 != 0) {
					Context v24 = this.this$0.getContext();
					PackageManager v25 = v24.getPackageManager();
					String v26 = v25.getPackagesForUid(v3);
					if (v26 == 0) {
						if (v26.length != 0) {
							Integer v27 = this.mMode;
							int v28 = v27.intValue();
							if (v28 != 2) {
								List v29 = this.mBlockList;
								if (v29 != 0) {
									List v31 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v30 = v31;
									this.mBlockList = v30;
									List v33 = this.mBlockList;
									if (v33 != 0) {
										int v1 = 99999;
										if (v1 != 99999) {
											StatsEvent$Builder v35 = StatsEvent.newBuilder();
											StatsEvent$Builder v36 = v35.setAtomId(321);
											StatsEvent$Builder v37 = v36.writeString(p1);
											int v38 = p2.getNetworkType();
											StatsEvent$Builder v39 = v37.writeInt(v38);
											long v40 = p2.getTimeSinceCreatedMillis();
											StatsEvent$Builder v41 = v39.writeLong(v40);
											StatsEvent$Builder v42 = v41.usePooledBuffer();
											StatsEvent v43 = v42.build();
											StatsLog.write(v43);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void reportNetworkEvent(String p1, NetworkEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			int v6 = v8;
			Integer v9 = Integer.valueOf(v6);
			this.mMode = v9;
			Binder.restoreCallingIdentity(v5);
			Integer v12 = this.mMode;
			int v13 = v12.intValue();
			if (v13 != 1) {
				Integer v14 = this.mMode;
				int v15 = v14.intValue();
				if (v15 != 0) {
					Context v16 = this.this$0.getContext();
					PackageManager v17 = v16.getPackageManager();
					String v18 = v17.getPackagesForUid(v3);
					if (v18 == 0) {
						if (v18.length != 0) {
							Integer v19 = this.mMode;
							int v20 = v19.intValue();
							if (v20 != 2) {
								List v21 = this.mBlockList;
								if (v21 != 0) {
									List v23 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v22 = v23;
									this.mBlockList = v22;
									List v25 = this.mBlockList;
									if (v25 != 0) {
										int v1 = 99999;
										if (v1 != 99999) {
											StatsEvent$Builder v27 = StatsEvent.newBuilder();
											StatsEvent$Builder v28 = v27.setAtomId(321);
											StatsEvent$Builder v29 = v28.writeString(p1);
											int v30 = p2.getNetworkType();
											StatsEvent$Builder v31 = v29.writeInt(v30);
											long v32 = p2.getTimeSinceCreatedMillis();
											StatsEvent$Builder v33 = v31.writeLong(v32);
											StatsEvent$Builder v34 = v33.usePooledBuffer();
											StatsEvent v35 = v34.build();
											StatsLog.write(v35);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void reportNetworkEvent(String p1, NetworkEvent p2, int p3){
	Object v2 = this.mLock;
	int v3 = Binder.getCallingUid();
	Integer v4 = this.mMode;
	if (v4 != 0) {
		long v5 = Binder.clearCallingIdentity();
		String v7 = DeviceConfig.getProperty("media", "media_metrics_mode");
		if (v7 != 0) {
			int v8 = Integer.parseInt(v7);
			StringBuilder v9 = new StringBuilder();
			StringBuilder v11 = v9.append("Parsing integer failed for ");
			StringBuilder v12 = v11.append("media");
			StringBuilder v13 = v12.append(":");
			StringBuilder v14 = v13.append("media_metrics_mode");
			String v15 = v14.toString();
			int v16 = Log.e("DeviceConfig", v15);
			int v6 = 2;
			Integer v17 = Integer.valueOf(v6);
			this.mMode = v17;
			Binder.restoreCallingIdentity(v5);
			Integer v20 = this.mMode;
			int v21 = v20.intValue();
			if (v21 != 1) {
				Integer v22 = this.mMode;
				int v23 = v22.intValue();
				if (v23 != 0) {
					Context v24 = this.this$0.getContext();
					PackageManager v25 = v24.getPackageManager();
					String v26 = v25.getPackagesForUid(v3);
					if (v26 == 0) {
						if (v26.length != 0) {
							Integer v27 = this.mMode;
							int v28 = v27.intValue();
							if (v28 != 2) {
								List v29 = this.mBlockList;
								if (v29 != 0) {
									List v31 = this.this$0.getListLocked("player_metrics_app_blocklist");
									List v30 = v31;
									this.mBlockList = v30;
									List v33 = this.mBlockList;
									if (v33 != 0) {
										int v1 = 99999;
										if (v1 != 99999) {
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
