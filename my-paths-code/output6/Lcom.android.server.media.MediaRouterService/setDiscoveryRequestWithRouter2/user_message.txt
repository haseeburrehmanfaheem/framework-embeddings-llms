This is path 1 for the API with depth 2:
public void setDiscoveryRequestWithRouter2(IMediaRouter2 p1, RouteDiscoveryPreference p2){
	Object v2 = Objects.requireNonNull(p1, "router must not be null");
	Object v3 = Objects.requireNonNull(p2, "preference must not be null");
	long v4 = Binder.clearCallingIdentity();
	IBinder v5 = p1.asBinder();
	Object v6 = this.mAllRouterRecords.get(v5);
	if (v6 != 0) {
		boolean v8 = MediaRouter2ServiceImpl$RouterRecord.mDiscoveryPreference.equals(p2);
		if (v8 == 0) {
			Binder.restoreCallingIdentity(v4);
			return;
		}
	}
}

This is path 2 for the API with depth 2:
public void setDiscoveryRequestWithRouter2(IMediaRouter2 p1, RouteDiscoveryPreference p2){
	Object v2 = Objects.requireNonNull(p1, "router must not be null");
	Object v3 = Objects.requireNonNull(p2, "preference must not be null");
	long v4 = Binder.clearCallingIdentity();
	IBinder v5 = p1.asBinder();
	Object v6 = this.mAllRouterRecords.get(v5);
	if (v6 != 0) {
		boolean v8 = MediaRouter2ServiceImpl$RouterRecord.mDiscoveryPreference.equals(p2);
		if (v8 == 0) {
			MediaRouter2ServiceImpl$RouterRecord.mDiscoveryPreference = p2;
			MediaRouter2ServiceImpl$$ExternalSyntheticLambda21 v9 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda21();
			Message v11 = PooledLambda.obtainMessage(v9, MediaRouter2ServiceImpl$UserRecord.mHandler, MediaRouter2ServiceImpl$RouterRecord.mPackageName, MediaRouter2ServiceImpl$RouterRecord.mDiscoveryPreference);
			boolean v12 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v11);
			MediaRouter2ServiceImpl$$ExternalSyntheticLambda22 v13 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda22();
			Message v15 = PooledLambda.obtainMessage(v13, MediaRouter2ServiceImpl$UserRecord.mHandler);
			boolean v16 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v15);
			Binder.restoreCallingIdentity(v4);
			return;
		}
	}
}
