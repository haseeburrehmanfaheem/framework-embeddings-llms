This is path 1 for the API with depth 2:
public void setRouteVolumeWithManager(IMediaRouter2Manager p1, int p2, MediaRoute2Info p3, int p4){
	Object v2 = Objects.requireNonNull(p1, "manager must not be null");
	Object v3 = Objects.requireNonNull(p3, "route must not be null");
	long v4 = Binder.clearCallingIdentity();
	IBinder v6 = p1.asBinder();
	Object v7 = this.mAllManagerRecords.get(v6);
	if (v7 != 0) {
		Binder.restoreCallingIdentity(v4);
		return;
	}
}

This is path 2 for the API with depth 2:
public void setRouteVolumeWithManager(IMediaRouter2Manager p1, int p2, MediaRoute2Info p3, int p4){
	Object v2 = Objects.requireNonNull(p1, "manager must not be null");
	Object v3 = Objects.requireNonNull(p3, "route must not be null");
	long v4 = Binder.clearCallingIdentity();
	IBinder v6 = p1.asBinder();
	Object v7 = this.mAllManagerRecords.get(v6);
	if (v7 != 0) {
		long v8 = MediaRouter2ServiceImpl.toUniqueRequestId(MediaRouter2ServiceImpl$ManagerRecord.mManagerId, p2);
		MediaRouter2ServiceImpl$$ExternalSyntheticLambda4 v9 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda4();
		Long v11 = Long.valueOf(v8);
		Integer v12 = Integer.valueOf(p4);
		Message v13 = PooledLambda.obtainMessage(v9, MediaRouter2ServiceImpl$UserRecord.mHandler, v11, p3, v12);
		boolean v14 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v13);
		Binder.restoreCallingIdentity(v4);
		return;
	}
}
