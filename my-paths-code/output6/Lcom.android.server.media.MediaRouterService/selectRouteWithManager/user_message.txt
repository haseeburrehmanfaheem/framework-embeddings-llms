This is path 1 for the API with depth 2:
public void selectRouteWithManager(IMediaRouter2Manager p1, int p2, String p3, MediaRoute2Info p4){
	Object v2 = Objects.requireNonNull(p1, "manager must not be null");
	boolean v3 = TextUtils.isEmpty(p3);
	if (v3 != 0) {
		Object v4 = Objects.requireNonNull(p4, "route must not be null");
		long v5 = Binder.clearCallingIdentity();
		IBinder v7 = p1.asBinder();
		Object v8 = this.mAllManagerRecords.get(v7);
		if (v8 != 0) {
			Binder.restoreCallingIdentity(v5);
			return;
		}
	}
}

This is path 2 for the API with depth 2:
public void selectRouteWithManager(IMediaRouter2Manager p1, int p2, String p3, MediaRoute2Info p4){
	Object v2 = Objects.requireNonNull(p1, "manager must not be null");
	boolean v3 = TextUtils.isEmpty(p3);
	if (v3 != 0) {
		Object v4 = Objects.requireNonNull(p4, "route must not be null");
		long v5 = Binder.clearCallingIdentity();
		IBinder v7 = p1.asBinder();
		Object v8 = this.mAllManagerRecords.get(v7);
		if (v8 != 0) {
			MediaRouter2ServiceImpl$RouterRecord v9 = MediaRouter2ServiceImpl$UserRecord.mHandler.findRouterWithSessionLocked(p3);
			long v10 = MediaRouter2ServiceImpl.toUniqueRequestId(MediaRouter2ServiceImpl$ManagerRecord.mManagerId, p2);
			MediaRouter2ServiceImpl$$ExternalSyntheticLambda10 v11 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda10();
			Long v13 = Long.valueOf(v10);
			Message v14 = PooledLambda.obtainMessage(v11, MediaRouter2ServiceImpl$UserRecord.mHandler, v13, v9, p3, p4);
			boolean v15 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v14);
			Binder.restoreCallingIdentity(v5);
			return;
		}
	}
}
