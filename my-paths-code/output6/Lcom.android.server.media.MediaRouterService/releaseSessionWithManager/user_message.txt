This is path 1 for the API with depth 2:
public void releaseSessionWithManager(IMediaRouter2Manager p1, int p2, String p3){
	Object v2 = Objects.requireNonNull(p1, "manager must not be null");
	boolean v3 = TextUtils.isEmpty(p3);
	if (v3 != 0) {
		long v4 = Binder.clearCallingIdentity();
		IBinder v6 = p1.asBinder();
		Object v7 = this.mAllManagerRecords.get(v6);
		if (v7 != 0) {
			Binder.restoreCallingIdentity(v4);
			return;
		}
	}
}

This is path 2 for the API with depth 2:
public void releaseSessionWithManager(IMediaRouter2Manager p1, int p2, String p3){
	Object v2 = Objects.requireNonNull(p1, "manager must not be null");
	boolean v3 = TextUtils.isEmpty(p3);
	if (v3 != 0) {
		long v4 = Binder.clearCallingIdentity();
		IBinder v6 = p1.asBinder();
		Object v7 = this.mAllManagerRecords.get(v6);
		if (v7 != 0) {
			MediaRouter2ServiceImpl$RouterRecord v8 = MediaRouter2ServiceImpl$UserRecord.mHandler.findRouterWithSessionLocked(p3);
			long v9 = MediaRouter2ServiceImpl.toUniqueRequestId(MediaRouter2ServiceImpl$ManagerRecord.mManagerId, p2);
			MediaRouter2ServiceImpl$$ExternalSyntheticLambda6 v10 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda6();
			Long v12 = Long.valueOf(v9);
			Message v13 = PooledLambda.obtainMessage(v10, MediaRouter2ServiceImpl$UserRecord.mHandler, v12, v8, p3);
			boolean v14 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v13);
			Binder.restoreCallingIdentity(v4);
			return;
		}
	}
}
