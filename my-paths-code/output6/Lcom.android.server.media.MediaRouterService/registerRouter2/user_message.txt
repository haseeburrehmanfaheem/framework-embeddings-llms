This is path 1 for the API with depth 2:
public void registerRouter2(IMediaRouter2 p1, String p2){
	int v1 = Binder.getCallingUid();
	if (p2 == 0) {
		PackageManager v3 = this.mContext.getPackageManager();
		String v4 = v3.getPackagesForUid(v1);
		if (v4 == 0) {
			if ( >= v4.length) {
				boolean v5 = v4[].equals(p2);
				if (v5 == 0) {
					boolean v2 = 1;
					if (v2 == 0) {
						if (v14 != 0) {
							long v15 = Binder.clearCallingIdentity();
							IBinder v17 = p1.asBinder();
							Object v18 = this.mAllRouterRecords.get(v17);
							if (v18 == 0) {
								MediaRouter2ServiceImpl$UserRecord v19 = MediaRouter2ServiceImpl.getOrCreateUserRecordLocked(v12);
								MediaRouter2ServiceImpl$RouterRecord v20 = new MediaRouter2ServiceImpl$RouterRecord(MediaRouter2ServiceImpl,v19,p1,v9,v10,p2,,);
								v17.linkToDeath(v20, 0);
								boolean v23 = MediaRouter2ServiceImpl$UserRecord.mRouterRecords.add(v20);
								Object v24 = this.mAllRouterRecords.put(v17, v20);
								MediaRouter2ServiceImpl$$ExternalSyntheticLambda8 v25 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda8();
								Message v27 = PooledLambda.obtainMessage(v25, MediaRouter2ServiceImpl$UserRecord.mHandler, v20);
								boolean v28 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v27);
								Binder.restoreCallingIdentity(v15);
								return;
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void registerRouter2(IMediaRouter2 p1, String p2){
	int v1 = Binder.getCallingUid();
	if (p2 == 0) {
		PackageManager v3 = this.mContext.getPackageManager();
		String v4 = v3.getPackagesForUid(v1);
		if (v4 == 0) {
			if ( >= v4.length) {
				boolean v5 = v4[].equals(p2);
				if (v5 == 0) {
					boolean v2 = 1;
					if (v2 == 0) {
						if (v14 != 0) {
							long v15 = Binder.clearCallingIdentity();
							IBinder v17 = p1.asBinder();
							Object v18 = this.mAllRouterRecords.get(v17);
							if (v18 == 0) {
								MediaRouter2ServiceImpl$UserRecord v19 = MediaRouter2ServiceImpl.getOrCreateUserRecordLocked(v12);
								MediaRouter2ServiceImpl$RouterRecord v20 = new MediaRouter2ServiceImpl$RouterRecord(MediaRouter2ServiceImpl,v19,p1,v9,v10,p2,,);
								v17.linkToDeath(v20, 0);
								boolean v23 = MediaRouter2ServiceImpl$UserRecord.mRouterRecords.add(v20);
								Object v24 = this.mAllRouterRecords.put(v17, v20);
								MediaRouter2ServiceImpl$$ExternalSyntheticLambda8 v25 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda8();
								Message v27 = PooledLambda.obtainMessage(v25, MediaRouter2ServiceImpl$UserRecord.mHandler, v20);
								boolean v28 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v27);
								Binder.restoreCallingIdentity(v15);
								return;
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void registerRouter2(IMediaRouter2 p1, String p2){
	int v1 = Binder.getCallingUid();
	if (p2 == 0) {
		PackageManager v3 = this.mContext.getPackageManager();
		String v4 = v3.getPackagesForUid(v1);
		if (v4 == 0) {
			if ( >= v4.length) {
				boolean v2 = 0;
				if (v2 == 0) {
					if (v13 != 0) {
						long v14 = Binder.clearCallingIdentity();
						IBinder v16 = p1.asBinder();
						Object v17 = this.mAllRouterRecords.get(v16);
						if (v17 == 0) {
							MediaRouter2ServiceImpl$UserRecord v18 = MediaRouter2ServiceImpl.getOrCreateUserRecordLocked(v11);
							MediaRouter2ServiceImpl$RouterRecord v19 = new MediaRouter2ServiceImpl$RouterRecord(MediaRouter2ServiceImpl,v18,p1,v8,v9,p2,,);
							v16.linkToDeath(v19, 0);
							boolean v22 = MediaRouter2ServiceImpl$UserRecord.mRouterRecords.add(v19);
							Object v23 = this.mAllRouterRecords.put(v16, v19);
							MediaRouter2ServiceImpl$$ExternalSyntheticLambda8 v24 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda8();
							Message v26 = PooledLambda.obtainMessage(v24, MediaRouter2ServiceImpl$UserRecord.mHandler, v19);
							boolean v27 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v26);
							Binder.restoreCallingIdentity(v14);
							return;
						}
					}
				}
			}
		}
	}
}
