This is path 1 for the API with depth 2:
public void setRouteVolumeWithRouter2(IMediaRouter2 p1, MediaRoute2Info p2, int p3){
	Object v2 = Objects.requireNonNull(p1, "router must not be null");
	Object v3 = Objects.requireNonNull(p2, "route must not be null");
	long v4 = Binder.clearCallingIdentity();
	IBinder v6 = p1.asBinder();
	Object v7 = this.mAllRouterRecords.get(v6);
	if (v7 == 0) {
		MediaRouter2ServiceImpl$$ExternalSyntheticLambda5 v8 = new MediaRouter2ServiceImpl$$ExternalSyntheticLambda5();
		Long v10 = Long.valueOf(-1);
		Integer v11 = Integer.valueOf(p3);
		Message v12 = PooledLambda.obtainMessage(v8, MediaRouter2ServiceImpl$UserRecord.mHandler, v10, p2, v11);
		boolean v13 = MediaRouter2ServiceImpl$UserRecord.mHandler.sendMessage(v12);
		Binder.restoreCallingIdentity(v4);
		return;
	}
}

This is path 2 for the API with depth 2:
public void setRouteVolumeWithRouter2(IMediaRouter2 p1, MediaRoute2Info p2, int p3){
	Object v2 = Objects.requireNonNull(p1, "router must not be null");
	Object v3 = Objects.requireNonNull(p2, "route must not be null");
	long v4 = Binder.clearCallingIdentity();
	IBinder v6 = p1.asBinder();
	Object v7 = this.mAllRouterRecords.get(v6);
	if (v7 == 0) {
		Binder.restoreCallingIdentity(v4);
		return;
	}
}
