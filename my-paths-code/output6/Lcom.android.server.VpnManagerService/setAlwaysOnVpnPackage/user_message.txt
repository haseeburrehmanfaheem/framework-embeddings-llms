This is path 1 for the API with depth 2:
public boolean setAlwaysOnVpnPackage(int p1, String p2, boolean p3, List p4){
	byte[] v5 = LegacyVpnProfileStore.get("LOCKDOWN_VPN");
	byte[] v4 = v5;
	if (v4 == 0) {
		boolean v3 = ;
		if (v3 == 0) {
			Object v6 = this.mVpns.get(p1);
			if (v6 != 0) {
				boolean v9 = Objects.equals(p2, this.mPackage);
				if (v9 != 0) {
					boolean v10 = Vpn.isVpnApp(this.mPackage);
					if (v10 == 0) {
						if (this.mAlwaysOn == 0) {
							if (p3 != this.mLockdown) {
								if ( == 0) {
									boolean v11 = Vpn.isVpnApp(p2);
									if (v11 == 0) {
										if ( == 0) {
											boolean v13 = "[Legacy VPN]".equals(p1);
											if (v13 == 0) {
												if (p3 == 0) {
													Iterator v14 = p3.iterator();
													boolean v15 = v14.hasNext();
													if (v15 == 0) {
														if (p1 == 0) {
															long v16 = Binder.clearCallingIdentity();
															VpnProfile v17 = Vpn.getVpnProfilePrivileged(p1);
															Binder.restoreCallingIdentity(v16);
															if (v17 != 0) {
																boolean v19 = Vpn.setPackageAuthorization(p1, );
																if (v19 != 0) {
																	this.mAlwaysOn = 1;
																	if (this.mAlwaysOn == 0) {
																		if (p2 == 0) {
																			this.mLockdown = ;
																			if ( == 0) {
																				if (p3 == 0) {
																					ArrayList v20 = new ArrayList(p3);
																					List v22 = Collections.unmodifiableList(v20);
																					this.mLockdownAllowlist = ;
																					boolean v23 = Vpn.isCurrentPreparedPackage();
																					if (v23 == 0) {
																						NetworkInfo$DetailedState v24 = this.mNetworkInfo.getDetailedState();
																						Vpn.updateAlwaysOnNotification(v24);
																						Vpn.setVpnForcedLocked(this.mLockdown);
																						boolean v12 = 1;
																						if (v12 != 0) {
																							long v28 = Binder.clearCallingIdentity();
																							String v29 = Vpn.getAlwaysOnPackage();
																							this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_app", v29, this.mUserId);
																							if (this.mAlwaysOn == 0) {
																								if (this.mLockdown == 0) {
																									this.mSystemServices.settingsSecurePutIntForUser("always_on_vpn_lockdown", , this.mUserId);
																									String v32 = String.join(",", this.mLockdownAllowlist);
																									this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_lockdown_whitelist", v32, this.mUserId);
																									Binder.restoreCallingIdentity(v28);
																									boolean v35 = 1;
																									if (v35 != 0) {
																										if ( == 0) {
																											if ( == 0) {
																												VpnProfileState v37 = new VpnProfileState(v38,,this.mAlwaysOn,this.mLockdown);
																												int v38 = Vpn.getStateFromLegacyState(this.mLegacyState);
																												boolean v39 = Vpn.isIkev2VpnRunner();
																												if (v39 == 0) {
																													String v40 = Vpn.getSessionKeyLocked();
																													VpnProfileState v36 = v37;
																													Intent v43 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, , 0, 0, 0);
																													boolean v44 = Vpn.sendEventToVpnManagerApp(v43, this.mPackage);
																													boolean v42 = v44;
																													if ( == 0) {
																														boolean v46 = Vpn.isIkev2VpnRunner();
																														if (v46 == 0) {
																															String v47 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																															String v45 = ;
																															VpnProfileState v49 = new VpnProfileState(v50,,this.mAlwaysOn,this.mLockdown);
																															int v50 = Vpn.getStateFromLegacyState(this.mLegacyState);
																															boolean v51 = Vpn.isIkev2VpnRunner();
																															if (v51 == 0) {
																																String v52 = Vpn.getSessionKeyLocked();
																																VpnProfileState v48 = v49;
																																Intent v55 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, p1, v45, v48, 0, 0, 0);
																																boolean v56 = Vpn.sendEventToVpnManagerApp(v55, p1);
																																boolean v54 = v56;
																																boolean v7 = 1;
																																if (v7 != 0) {
																																	Object v58 = this.mVpns.get(p1);
																																	if (v58 != 0) {
																																		String v60 = Vpn.getAlwaysOnPackage();
																																		if (v60 != 0) {
																																			boolean v61 = Vpn.isAlwaysOnPackageSupported(v60);
																																			if (v61 != 0) {
																																				NetworkInfo v62 = Vpn.getNetworkInfo();
																																				boolean v63 = v62.isConnected();
																																				if (v63 == 0) {
																																					long v64 = Binder.clearCallingIdentity();
																																					VpnProfile v65 = Vpn.getVpnProfilePrivileged(v60);
																																					if (v65 == 0) {
																																						Vpn.startVpnProfilePrivileged(v65, v60);
																																						int v67 = Log.e("Vpn", "Error starting always-on VPN", caughtException);
																																						Binder.restoreCallingIdentity(v64);
																																						boolean v59 = 0;
																																						boolean v57 = v59;
																																						if (v57 != 0) {
																																							boolean v71 = Objects.equals(0, this.mPackage);
																																							if (v71 != 0) {
																																								boolean v72 = Vpn.isVpnApp(this.mPackage);
																																								if (v72 == 0) {
																																									if (this.mAlwaysOn == 0) {
																																										if (0 != this.mLockdown) {
																																											if ( == 0) {
																																												boolean v73 = Vpn.isVpnApp(0);
																																												if (v73 == 0) {
																																													if ( == 0) {
																																														boolean v75 = "[Legacy VPN]".equals(p1);
																																														if (v75 == 0) {
																																															if (p3 == 0) {
																																																Iterator v76 = p3.iterator();
																																																boolean v77 = v76.hasNext();
																																																if (v77 == 0) {
																																																	if (p1 == 0) {
																																																		long v78 = Binder.clearCallingIdentity();
																																																		VpnProfile v79 = Vpn.getVpnProfilePrivileged(p1);
																																																		Binder.restoreCallingIdentity(v78);
																																																		if (v79 != 0) {
																																																			boolean v81 = Vpn.setPackageAuthorization(p1, );
																																																			if (v81 != 0) {
																																																				this.mAlwaysOn = 1;
																																																				if (this.mAlwaysOn == 0) {
																																																					if (p2 == 0) {
																																																						this.mLockdown = ;
																																																						if ( == 0) {
																																																							if (p3 == 0) {
																																																								ArrayList v82 = new ArrayList(p3);
																																																								List v84 = Collections.unmodifiableList(v82);
																																																								this.mLockdownAllowlist = ;
																																																								boolean v85 = Vpn.isCurrentPreparedPackage();
																																																								if (v85 == 0) {
																																																									NetworkInfo$DetailedState v86 = this.mNetworkInfo.getDetailedState();
																																																									Vpn.updateAlwaysOnNotification(v86);
																																																									Vpn.setVpnForcedLocked(this.mLockdown);
																																																									boolean v74 = 1;
																																																									if (v74 != 0) {
																																																										long v90 = Binder.clearCallingIdentity();
																																																										String v91 = Vpn.getAlwaysOnPackage();
																																																										this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_app", v91, this.mUserId);
																																																										if (this.mAlwaysOn == 0) {
																																																											if (this.mLockdown == 0) {
																																																												this.mSystemServices.settingsSecurePutIntForUser("always_on_vpn_lockdown", , this.mUserId);
																																																												String v94 = String.join(",", this.mLockdownAllowlist);
																																																												this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_lockdown_whitelist", v94, this.mUserId);
																																																												Binder.restoreCallingIdentity(v90);
																																																												boolean v97 = 1;
																																																												if (v97 != 0) {
																																																													if ( == 0) {
																																																														if ( == 0) {
																																																															VpnProfileState v99 = new VpnProfileState(v100,,this.mAlwaysOn,this.mLockdown);
																																																															int v100 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																																															boolean v101 = Vpn.isIkev2VpnRunner();
																																																															if (v101 == 0) {
																																																																String v102 = Vpn.getSessionKeyLocked();
																																																																VpnProfileState v98 = v99;
																																																																Intent v105 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, , 0, 0, 0);
																																																																boolean v106 = Vpn.sendEventToVpnManagerApp(v105, this.mPackage);
																																																																boolean v104 = v106;
																																																																if ( == 0) {
																																																																	boolean v108 = Vpn.isIkev2VpnRunner();
																																																																	if (v108 == 0) {
																																																																		String v109 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																																																																		String v107 = ;
																																																																		VpnProfileState v111 = new VpnProfileState(v112,,this.mAlwaysOn,this.mLockdown);
																																																																		int v112 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																																																		boolean v113 = Vpn.isIkev2VpnRunner();
																																																																		if (v113 == 0) {
																																																																			String v114 = Vpn.getSessionKeyLocked();
																																																																			VpnProfileState v110 = v111;
																																																																			Intent v117 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, p1, v107, v110, 0, 0, 0);
																																																																			boolean v118 = Vpn.sendEventToVpnManagerApp(v117, p1);
																																																																			boolean v116 = v118;
																																																																			boolean v69 = 1;
																																																																			return 0;
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean setAlwaysOnVpnPackage(int p1, String p2, boolean p3, List p4){
	byte[] v5 = LegacyVpnProfileStore.get("LOCKDOWN_VPN");
	byte[] v4 = v5;
	if (v4 == 0) {
		boolean v3 = ;
		if (v3 == 0) {
			Object v6 = this.mVpns.get(p1);
			if (v6 != 0) {
				boolean v9 = Objects.equals(p2, this.mPackage);
				if (v9 != 0) {
					boolean v10 = Vpn.isVpnApp(this.mPackage);
					if (v10 == 0) {
						if (this.mAlwaysOn == 0) {
							if (p3 != this.mLockdown) {
								if ( == 0) {
									boolean v11 = Vpn.isVpnApp(p2);
									if (v11 == 0) {
										if ( == 0) {
											boolean v13 = "[Legacy VPN]".equals(p1);
											if (v13 == 0) {
												if (p3 == 0) {
													Iterator v14 = p3.iterator();
													boolean v15 = v14.hasNext();
													if (v15 == 0) {
														if (p1 == 0) {
															long v16 = Binder.clearCallingIdentity();
															VpnProfile v17 = Vpn.getVpnProfilePrivileged(p1);
															Binder.restoreCallingIdentity(v16);
															if (v17 != 0) {
																boolean v19 = Vpn.setPackageAuthorization(p1, );
																if (v19 != 0) {
																	this.mAlwaysOn = 1;
																	if (this.mAlwaysOn == 0) {
																		if (p2 == 0) {
																			this.mLockdown = ;
																			if ( == 0) {
																				if (p3 == 0) {
																					ArrayList v20 = new ArrayList(p3);
																					List v22 = Collections.unmodifiableList(v20);
																					this.mLockdownAllowlist = ;
																					boolean v23 = Vpn.isCurrentPreparedPackage();
																					if (v23 == 0) {
																						NetworkInfo$DetailedState v24 = this.mNetworkInfo.getDetailedState();
																						Vpn.updateAlwaysOnNotification(v24);
																						Vpn.setVpnForcedLocked(this.mLockdown);
																						boolean v12 = 1;
																						if (v12 != 0) {
																							long v28 = Binder.clearCallingIdentity();
																							String v29 = Vpn.getAlwaysOnPackage();
																							this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_app", v29, this.mUserId);
																							if (this.mAlwaysOn == 0) {
																								if (this.mLockdown == 0) {
																									this.mSystemServices.settingsSecurePutIntForUser("always_on_vpn_lockdown", , this.mUserId);
																									String v32 = String.join(",", this.mLockdownAllowlist);
																									this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_lockdown_whitelist", v32, this.mUserId);
																									Binder.restoreCallingIdentity(v28);
																									boolean v35 = 1;
																									if (v35 != 0) {
																										if ( == 0) {
																											if ( == 0) {
																												VpnProfileState v37 = new VpnProfileState(v38,,this.mAlwaysOn,this.mLockdown);
																												int v38 = Vpn.getStateFromLegacyState(this.mLegacyState);
																												boolean v39 = Vpn.isIkev2VpnRunner();
																												if (v39 == 0) {
																													String v40 = Vpn.getSessionKeyLocked();
																													VpnProfileState v36 = v37;
																													Intent v43 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, , 0, 0, 0);
																													boolean v44 = Vpn.sendEventToVpnManagerApp(v43, this.mPackage);
																													boolean v42 = v44;
																													if ( == 0) {
																														boolean v46 = Vpn.isIkev2VpnRunner();
																														if (v46 == 0) {
																															String v47 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																															String v45 = ;
																															VpnProfileState v49 = new VpnProfileState(v50,,this.mAlwaysOn,this.mLockdown);
																															int v50 = Vpn.getStateFromLegacyState(this.mLegacyState);
																															boolean v51 = Vpn.isIkev2VpnRunner();
																															if (v51 == 0) {
																																String v52 = Vpn.getSessionKeyLocked();
																																VpnProfileState v48 = v49;
																																Intent v55 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, p1, v45, v48, 0, 0, 0);
																																boolean v56 = Vpn.sendEventToVpnManagerApp(v55, p1);
																																boolean v54 = v56;
																																boolean v7 = 1;
																																if (v7 != 0) {
																																	Object v58 = this.mVpns.get(p1);
																																	if (v58 != 0) {
																																		String v60 = Vpn.getAlwaysOnPackage();
																																		if (v60 != 0) {
																																			boolean v61 = Vpn.isAlwaysOnPackageSupported(v60);
																																			if (v61 != 0) {
																																				NetworkInfo v62 = Vpn.getNetworkInfo();
																																				boolean v63 = v62.isConnected();
																																				if (v63 == 0) {
																																					long v64 = Binder.clearCallingIdentity();
																																					VpnProfile v65 = Vpn.getVpnProfilePrivileged(v60);
																																					if (v65 == 0) {
																																						Vpn.startVpnProfilePrivileged(v65, v60);
																																						int v67 = Log.e("Vpn", "Error starting always-on VPN", caughtException);
																																						Binder.restoreCallingIdentity(v64);
																																						boolean v59 = 0;
																																						boolean v57 = v59;
																																						if (v57 != 0) {
																																							boolean v71 = Objects.equals(0, this.mPackage);
																																							if (v71 != 0) {
																																								boolean v72 = Vpn.isVpnApp(this.mPackage);
																																								if (v72 == 0) {
																																									if (this.mAlwaysOn == 0) {
																																										if (0 != this.mLockdown) {
																																											if ( == 0) {
																																												boolean v73 = Vpn.isVpnApp(0);
																																												if (v73 == 0) {
																																													if ( == 0) {
																																														boolean v75 = "[Legacy VPN]".equals(p1);
																																														if (v75 == 0) {
																																															if (p3 == 0) {
																																																Iterator v76 = p3.iterator();
																																																boolean v77 = v76.hasNext();
																																																if (v77 == 0) {
																																																	if (p1 == 0) {
																																																		long v78 = Binder.clearCallingIdentity();
																																																		VpnProfile v79 = Vpn.getVpnProfilePrivileged(p1);
																																																		Binder.restoreCallingIdentity(v78);
																																																		if (v79 != 0) {
																																																			boolean v81 = Vpn.setPackageAuthorization(p1, );
																																																			if (v81 != 0) {
																																																				this.mAlwaysOn = 1;
																																																				if (this.mAlwaysOn == 0) {
																																																					if (p2 == 0) {
																																																						this.mLockdown = ;
																																																						if ( == 0) {
																																																							if (p3 == 0) {
																																																								ArrayList v82 = new ArrayList(p3);
																																																								List v84 = Collections.unmodifiableList(v82);
																																																								this.mLockdownAllowlist = ;
																																																								boolean v85 = Vpn.isCurrentPreparedPackage();
																																																								if (v85 == 0) {
																																																									NetworkInfo$DetailedState v86 = this.mNetworkInfo.getDetailedState();
																																																									Vpn.updateAlwaysOnNotification(v86);
																																																									Vpn.setVpnForcedLocked(this.mLockdown);
																																																									boolean v74 = 1;
																																																									if (v74 != 0) {
																																																										long v90 = Binder.clearCallingIdentity();
																																																										String v91 = Vpn.getAlwaysOnPackage();
																																																										this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_app", v91, this.mUserId);
																																																										if (this.mAlwaysOn == 0) {
																																																											if (this.mLockdown == 0) {
																																																												this.mSystemServices.settingsSecurePutIntForUser("always_on_vpn_lockdown", , this.mUserId);
																																																												String v94 = String.join(",", this.mLockdownAllowlist);
																																																												this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_lockdown_whitelist", v94, this.mUserId);
																																																												Binder.restoreCallingIdentity(v90);
																																																												boolean v97 = 1;
																																																												if (v97 != 0) {
																																																													if ( == 0) {
																																																														if ( == 0) {
																																																															VpnProfileState v99 = new VpnProfileState(v100,,this.mAlwaysOn,this.mLockdown);
																																																															int v100 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																																															boolean v101 = Vpn.isIkev2VpnRunner();
																																																															if (v101 == 0) {
																																																																String v102 = Vpn.getSessionKeyLocked();
																																																																VpnProfileState v98 = v99;
																																																																Intent v105 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, , 0, 0, 0);
																																																																boolean v106 = Vpn.sendEventToVpnManagerApp(v105, this.mPackage);
																																																																boolean v104 = v106;
																																																																if ( == 0) {
																																																																	boolean v108 = Vpn.isIkev2VpnRunner();
																																																																	if (v108 == 0) {
																																																																		String v109 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																																																																		String v107 = ;
																																																																		VpnProfileState v111 = new VpnProfileState(v112,,this.mAlwaysOn,this.mLockdown);
																																																																		int v112 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																																																		boolean v113 = Vpn.isIkev2VpnRunner();
																																																																		if (v113 == 0) {
																																																																			String v114 = Vpn.getSessionKeyLocked();
																																																																			VpnProfileState v110 = v111;
																																																																			Intent v117 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, p1, v107, v110, 0, 0, 0);
																																																																			boolean v118 = Vpn.sendEventToVpnManagerApp(v117, p1);
																																																																			boolean v116 = v118;
																																																																			boolean v69 = 1;
																																																																			return 0;
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public boolean setAlwaysOnVpnPackage(int p1, String p2, boolean p3, List p4){
	byte[] v5 = LegacyVpnProfileStore.get("LOCKDOWN_VPN");
	byte[] v4 = v5;
	if (v4 == 0) {
		boolean v3 = ;
		if (v3 == 0) {
			Object v6 = this.mVpns.get(p1);
			if (v6 != 0) {
				boolean v9 = Objects.equals(p2, this.mPackage);
				if (v9 != 0) {
					boolean v10 = Vpn.isVpnApp(this.mPackage);
					if (v10 == 0) {
						if (this.mAlwaysOn == 0) {
							if (p3 != this.mLockdown) {
								if ( == 0) {
									boolean v11 = Vpn.isVpnApp(p2);
									if (v11 == 0) {
										if ( == 0) {
											boolean v13 = "[Legacy VPN]".equals(p1);
											if (v13 == 0) {
												if (p3 == 0) {
													Iterator v14 = p3.iterator();
													boolean v15 = v14.hasNext();
													if (v15 == 0) {
														if (p1 == 0) {
															long v16 = Binder.clearCallingIdentity();
															VpnProfile v17 = Vpn.getVpnProfilePrivileged(p1);
															Binder.restoreCallingIdentity(v16);
															if (v17 != 0) {
																boolean v19 = Vpn.setPackageAuthorization(p1, );
																if (v19 != 0) {
																	this.mAlwaysOn = 1;
																	if (this.mAlwaysOn == 0) {
																		if (p2 == 0) {
																			this.mLockdown = ;
																			if ( == 0) {
																				if (p3 == 0) {
																					ArrayList v20 = new ArrayList(p3);
																					List v22 = Collections.unmodifiableList(v20);
																					this.mLockdownAllowlist = ;
																					boolean v23 = Vpn.isCurrentPreparedPackage();
																					if (v23 == 0) {
																						NetworkInfo$DetailedState v24 = this.mNetworkInfo.getDetailedState();
																						Vpn.updateAlwaysOnNotification(v24);
																						Vpn.setVpnForcedLocked(this.mLockdown);
																						boolean v12 = 1;
																						if (v12 != 0) {
																							long v28 = Binder.clearCallingIdentity();
																							String v29 = Vpn.getAlwaysOnPackage();
																							this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_app", v29, this.mUserId);
																							if (this.mAlwaysOn == 0) {
																								if (this.mLockdown == 0) {
																									this.mSystemServices.settingsSecurePutIntForUser("always_on_vpn_lockdown", , this.mUserId);
																									String v32 = String.join(",", this.mLockdownAllowlist);
																									this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_lockdown_whitelist", v32, this.mUserId);
																									Binder.restoreCallingIdentity(v28);
																									boolean v35 = 1;
																									if (v35 != 0) {
																										if ( == 0) {
																											if ( == 0) {
																												VpnProfileState v37 = new VpnProfileState(v38,,this.mAlwaysOn,this.mLockdown);
																												int v38 = Vpn.getStateFromLegacyState(this.mLegacyState);
																												boolean v39 = Vpn.isIkev2VpnRunner();
																												if (v39 == 0) {
																													String v40 = Vpn.getSessionKeyLocked();
																													VpnProfileState v36 = v37;
																													Intent v43 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, , 0, 0, 0);
																													boolean v44 = Vpn.sendEventToVpnManagerApp(v43, this.mPackage);
																													boolean v42 = v44;
																													if ( == 0) {
																														boolean v46 = Vpn.isIkev2VpnRunner();
																														if (v46 == 0) {
																															String v47 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																															String v45 = ;
																															VpnProfileState v49 = new VpnProfileState(v50,,this.mAlwaysOn,this.mLockdown);
																															int v50 = Vpn.getStateFromLegacyState(this.mLegacyState);
																															boolean v51 = Vpn.isIkev2VpnRunner();
																															if (v51 == 0) {
																																String v52 = Vpn.getSessionKeyLocked();
																																VpnProfileState v48 = v49;
																																Intent v55 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, p1, v45, v48, 0, 0, 0);
																																boolean v56 = Vpn.sendEventToVpnManagerApp(v55, p1);
																																boolean v54 = v56;
																																boolean v7 = 1;
																																if (v7 != 0) {
																																	Object v58 = this.mVpns.get(p1);
																																	if (v58 != 0) {
																																		String v60 = Vpn.getAlwaysOnPackage();
																																		if (v60 != 0) {
																																			boolean v61 = Vpn.isAlwaysOnPackageSupported(v60);
																																			if (v61 != 0) {
																																				NetworkInfo v62 = Vpn.getNetworkInfo();
																																				boolean v63 = v62.isConnected();
																																				if (v63 == 0) {
																																					long v64 = Binder.clearCallingIdentity();
																																					VpnProfile v65 = Vpn.getVpnProfilePrivileged(v60);
																																					if (v65 == 0) {
																																						Vpn.startVpnProfilePrivileged(v65, v60);
																																						int v67 = Log.e("Vpn", "Error starting always-on VPN", caughtException);
																																						Binder.restoreCallingIdentity(v64);
																																						boolean v59 = 0;
																																						boolean v57 = v59;
																																						if (v57 != 0) {
																																							boolean v71 = Objects.equals(0, this.mPackage);
																																							if (v71 != 0) {
																																								boolean v72 = Vpn.isVpnApp(this.mPackage);
																																								if (v72 == 0) {
																																									if (this.mAlwaysOn == 0) {
																																										if (0 != this.mLockdown) {
																																											if ( == 0) {
																																												boolean v73 = Vpn.isVpnApp(0);
																																												if (v73 == 0) {
																																													if ( == 0) {
																																														boolean v75 = "[Legacy VPN]".equals(p1);
																																														if (v75 == 0) {
																																															if (p3 == 0) {
																																																Iterator v76 = p3.iterator();
																																																boolean v77 = v76.hasNext();
																																																if (v77 == 0) {
																																																	if (p1 == 0) {
																																																		long v78 = Binder.clearCallingIdentity();
																																																		VpnProfile v79 = Vpn.getVpnProfilePrivileged(p1);
																																																		Binder.restoreCallingIdentity(v78);
																																																		if (v79 != 0) {
																																																			boolean v81 = Vpn.setPackageAuthorization(p1, );
																																																			if (v81 != 0) {
																																																				this.mAlwaysOn = 1;
																																																				if (this.mAlwaysOn == 0) {
																																																					if (p2 == 0) {
																																																						this.mLockdown = ;
																																																						if ( == 0) {
																																																							if (p3 == 0) {
																																																								ArrayList v82 = new ArrayList(p3);
																																																								List v84 = Collections.unmodifiableList(v82);
																																																								this.mLockdownAllowlist = ;
																																																								boolean v85 = Vpn.isCurrentPreparedPackage();
																																																								if (v85 == 0) {
																																																									NetworkInfo$DetailedState v86 = this.mNetworkInfo.getDetailedState();
																																																									Vpn.updateAlwaysOnNotification(v86);
																																																									Vpn.setVpnForcedLocked(this.mLockdown);
																																																									boolean v74 = 1;
																																																									if (v74 != 0) {
																																																										long v90 = Binder.clearCallingIdentity();
																																																										String v91 = Vpn.getAlwaysOnPackage();
																																																										this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_app", v91, this.mUserId);
																																																										if (this.mAlwaysOn == 0) {
																																																											if (this.mLockdown == 0) {
																																																												this.mSystemServices.settingsSecurePutIntForUser("always_on_vpn_lockdown", , this.mUserId);
																																																												String v94 = String.join(",", this.mLockdownAllowlist);
																																																												this.mSystemServices.settingsSecurePutStringForUser("always_on_vpn_lockdown_whitelist", v94, this.mUserId);
																																																												Binder.restoreCallingIdentity(v90);
																																																												boolean v97 = 1;
																																																												if (v97 != 0) {
																																																													if ( == 0) {
																																																														if ( == 0) {
																																																															VpnProfileState v99 = new VpnProfileState(v100,,this.mAlwaysOn,this.mLockdown);
																																																															int v100 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																																															boolean v101 = Vpn.isIkev2VpnRunner();
																																																															if (v101 == 0) {
																																																																String v102 = Vpn.getSessionKeyLocked();
																																																																VpnProfileState v98 = v99;
																																																																Intent v105 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, , 0, 0, 0);
																																																																boolean v106 = Vpn.sendEventToVpnManagerApp(v105, this.mPackage);
																																																																boolean v104 = v106;
																																																																if ( == 0) {
																																																																	boolean v108 = Vpn.isIkev2VpnRunner();
																																																																	if (v108 == 0) {
																																																																		String v109 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																																																																		String v107 = ;
																																																																		VpnProfileState v111 = new VpnProfileState(v112,,this.mAlwaysOn,this.mLockdown);
																																																																		int v112 = Vpn.getStateFromLegacyState(this.mLegacyState);
																																																																		boolean v113 = Vpn.isIkev2VpnRunner();
																																																																		if (v113 == 0) {
																																																																			String v114 = Vpn.getSessionKeyLocked();
																																																																			VpnProfileState v110 = v111;
																																																																			Intent v117 = Vpn.buildVpnManagerEventIntent("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, p1, v107, v110, 0, 0, 0);
																																																																			boolean v118 = Vpn.sendEventToVpnManagerApp(v117, p1);
																																																																			boolean v116 = v118;
																																																																			boolean v69 = 1;
																																																																			return 0;
																																																																		}
																																																																	}
																																																																}
																																																															}
																																																														}
																																																													}
																																																												}
																																																											}
																																																										}
																																																									}
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
