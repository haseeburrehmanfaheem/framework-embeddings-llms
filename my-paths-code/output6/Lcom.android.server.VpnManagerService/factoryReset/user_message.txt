This is path 1 for the API with depth 2:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	ILegacyKeystore v11 = LegacyVpnProfileStore.getService();
	v11.remove(p1, -1);
	if (ServiceSpecificException.errorCode == 7) {
		int v13 = Log.e("LegacyVpnProfileStore", "Failed to remove vpn profile.", caughtException);
		boolean v10 = 0;
		boolean v9 = v10;
		this.mLockdownEnabled = 0;
		this.mLockdownTracker = 0;
		if (this.mLockdownTracker == 0) {
			LockdownVpnTracker.shutdownLocked();
			if (0 == 0) {
				this.mLockdownTracker = 0;
				LockdownVpnTracker.initLocked();
				Binder.restoreCallingIdentity(v8);
				Object v22 = this.mVpns.get(v4);
				if (v22 == 0) {
					VpnConfig v23 = this.mConfig;
					VpnConfig v20 = v23;
					if (v20 == 0) {
						if (VpnConfig.legacy == 0) {
							Object v27 = this.mVpns.get(v4);
							if (v27 == 0) {
								int v30 = Vpn.getAppUid(p1, this.mUserId);
								if (v30 == -1) {
									boolean v31 = "[Legacy VPN]".equals(p1);
									if (v31 == 0) {
										boolean v28 = 0;
										VpnManagerService.throwIfLockdownEnabled();
										Object v35 = this.mVpns.get(v4);
										if (v35 == 0) {
											if (v37 == 0) {
												if (p1 == 0) {
													Vpn.verifyCallingUidAndPackage(p1);
													if (p2 == 0) {
														Vpn.verifyCallingUidAndPackage(p2);
														if (p1 == 0) {
															if (this.mAlwaysOn == 0) {
																boolean v40 = Vpn.isCurrentPreparedPackage(p1);
																if (v40 != 0) {
																	boolean v41 = Vpn.isCurrentPreparedPackage(p1);
																	if (v41 != 0) {
																		boolean v42 = p1.equals("[Legacy VPN]");
																		if (v42 != 0) {
																			boolean v43 = Vpn.isVpnPreConsented(this.mContext, p1, 1);
																			if (v43 != 0) {
																				if (p2 == 0) {
																					boolean v44 = p2.equals("[Legacy VPN]");
																					if (v44 != 0) {
																						boolean v45 = Vpn.isCurrentPreparedPackage(p2);
																						if (v45 == 0) {
																							boolean v36 = 1;
																							boolean v32 = v36;
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	ILegacyKeystore v11 = LegacyVpnProfileStore.getService();
	v11.remove(p1, -1);
	if (ServiceSpecificException.errorCode == 7) {
		int v13 = Log.e("LegacyVpnProfileStore", "Failed to remove vpn profile.", caughtException);
		boolean v10 = 0;
		boolean v9 = v10;
		this.mLockdownEnabled = 0;
		this.mLockdownTracker = 0;
		if (this.mLockdownTracker == 0) {
			if (0 == 0) {
				this.mLockdownTracker = 0;
				LockdownVpnTracker.initLocked();
				Binder.restoreCallingIdentity(v8);
				Object v20 = this.mVpns.get(v4);
				if (v20 == 0) {
					VpnConfig v21 = this.mConfig;
					VpnConfig v18 = v21;
					if (v18 == 0) {
						if (VpnConfig.legacy == 0) {
							Object v25 = this.mVpns.get(v4);
							if (v25 == 0) {
								int v28 = Vpn.getAppUid(p1, this.mUserId);
								if (v28 == -1) {
									boolean v29 = "[Legacy VPN]".equals(p1);
									if (v29 == 0) {
										boolean v26 = 0;
										VpnManagerService.throwIfLockdownEnabled();
										Object v33 = this.mVpns.get(v4);
										if (v33 == 0) {
											if (v35 == 0) {
												if (p1 == 0) {
													Vpn.verifyCallingUidAndPackage(p1);
													if (p2 == 0) {
														Vpn.verifyCallingUidAndPackage(p2);
														if (p1 == 0) {
															if (this.mAlwaysOn == 0) {
																boolean v38 = Vpn.isCurrentPreparedPackage(p1);
																if (v38 != 0) {
																	boolean v39 = Vpn.isCurrentPreparedPackage(p1);
																	if (v39 != 0) {
																		boolean v40 = p1.equals("[Legacy VPN]");
																		if (v40 != 0) {
																			boolean v41 = Vpn.isVpnPreConsented(this.mContext, p1, 1);
																			if (v41 != 0) {
																				if (p2 == 0) {
																					boolean v42 = p2.equals("[Legacy VPN]");
																					if (v42 != 0) {
																						boolean v43 = Vpn.isCurrentPreparedPackage(p2);
																						if (v43 == 0) {
																							boolean v34 = 1;
																							boolean v30 = v34;
																							return;
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void factoryReset(){
	long v8 = Binder.clearCallingIdentity();
	ILegacyKeystore v11 = LegacyVpnProfileStore.getService();
	v11.remove(p1, -1);
	if (ServiceSpecificException.errorCode == 7) {
		int v13 = Log.e("LegacyVpnProfileStore", "Failed to remove vpn profile.", caughtException);
		boolean v10 = 0;
		boolean v9 = v10;
		this.mLockdownEnabled = 0;
		this.mLockdownTracker = 0;
		if (this.mLockdownTracker == 0) {
			LockdownVpnTracker.shutdownLocked();
			if (0 == 0) {
				this.mLockdownTracker = 0;
				LockdownVpnTracker.initLocked();
				Binder.restoreCallingIdentity(v8);
				Object v22 = this.mVpns.get(v4);
				if (v22 == 0) {
					VpnConfig v23 = this.mConfig;
					VpnConfig v20 = v23;
					if (v20 == 0) {
						if (VpnConfig.legacy == 0) {
							VpnManagerService.throwIfLockdownEnabled();
							Object v28 = this.mVpns.get(v4);
							if (v28 == 0) {
								if (v30 == 0) {
									if (p1 == 0) {
										Vpn.verifyCallingUidAndPackage(p1);
										if (p2 == 0) {
											Vpn.verifyCallingUidAndPackage(p2);
											if (p1 == 0) {
												if (this.mAlwaysOn == 0) {
													boolean v33 = Vpn.isCurrentPreparedPackage(p1);
													if (v33 != 0) {
														boolean v34 = Vpn.isCurrentPreparedPackage(p1);
														if (v34 != 0) {
															boolean v35 = p1.equals("[Legacy VPN]");
															if (v35 != 0) {
																boolean v36 = Vpn.isVpnPreConsented(this.mContext, p1, 1);
																if (v36 != 0) {
																	if (p2 == 0) {
																		boolean v37 = p2.equals("[Legacy VPN]");
																		if (v37 != 0) {
																			boolean v38 = Vpn.isCurrentPreparedPackage(p2);
																			if (v38 == 0) {
																				boolean v29 = 1;
																				boolean v25 = v29;
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
