The method deleteVpnProfile has the following code snippet:

This is path 1 for the API with depth 2:
public void deleteVpnProfile(String p1){
	int v2 = Binder.getCallingUid();
	int v1 = v2;
	int v3 = UserHandle.getUserId(v1);
	Object v4 = this.mVpns.get(v3);
	Object v6 = Objects.requireNonNull(p1, "No package name provided");
	long v11 = Binder.clearCallingIdentity();
	UserInfo v12 = this.mUserManager.getUserInfo(this.mUserId);
	boolean v13 = v12.isRestricted();
	if (v13 != 0) {
		Binder.restoreCallingIdentity(v11);
		long v15 = Binder.clearCallingIdentity();
		boolean v17 = Vpn.isCurrentPreparedPackage(p1);
		if (v17 == 0) {
			boolean v18 = Vpn.isIkev2VpnRunner();
			if (v18 == 0) {
				boolean v16 = ;
				if (v16 == 0) {
					if (this.mAlwaysOn == 0) {
						boolean v21 = Objects.equals(0, this.mPackage);
						if (v21 != 0) {
							boolean v22 = Vpn.isVpnApp(this.mPackage);
							if (v22 == 0) {
								if (this.mAlwaysOn == 0) {
									if (0 != this.mLockdown) {
										if ( == 0) {
											boolean v23 = Vpn.isVpnApp(0);
											if (v23 == 0) {
												if ( == 0) {
													boolean v24 = Vpn.setAlwaysOnPackageInternal(0, 0, 0);
													if (v24 != 0) {
														Vpn.saveAlwaysOnPackage();
														boolean v26 = SdkLevel.isAtLeastT();
														if (v26 != 0) {
															if ( == 0) {
																if ( == 0) {
																	VpnProfileState v27 = Vpn.makeDisconnectedVpnProfileState();
																	boolean v28 = Vpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, , 0, 0, 0);
																	if ( == 0) {
																		String v29 = Vpn.getSessionKeyLocked();
																		VpnProfileState v30 = Vpn.makeVpnProfileStateLocked();
																		boolean v31 = Vpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, 0, v29, v30, 0, 0, 0);
																		boolean v19 = 1;
																		VpnProfileStore v32 = this.mVpnProfileStore;
																		StringBuilder v34 = new StringBuilder();
																		StringBuilder v36 = v34.append("PLATFORM_VPN_");
																		StringBuilder v37 = v34.append(this.mUserId);
																		StringBuilder v38 = v34.append("_");
																		StringBuilder v39 = v34.append(p1);
																		String v40 = v34.toString();
																		String v33 = v40;
																		boolean v42 = LegacyVpnProfileStore.remove(v33);
																		boolean v41 = v42;
																		Binder.restoreCallingIdentity(v15);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void deleteVpnProfile(String p1){
	int v2 = Binder.getCallingUid();
	int v1 = v2;
	int v3 = UserHandle.getUserId(v1);
	Object v4 = this.mVpns.get(v3);
	Object v6 = Objects.requireNonNull(p1, "No package name provided");
	long v11 = Binder.clearCallingIdentity();
	UserInfo v12 = this.mUserManager.getUserInfo(this.mUserId);
	boolean v13 = v12.isRestricted();
	if (v13 != 0) {
		Binder.restoreCallingIdentity(v11);
		long v15 = Binder.clearCallingIdentity();
		boolean v17 = Vpn.isCurrentPreparedPackage(p1);
		if (v17 == 0) {
			boolean v18 = Vpn.isIkev2VpnRunner();
			if (v18 == 0) {
				boolean v16 = ;
				if (v16 == 0) {
					if (this.mAlwaysOn == 0) {
						boolean v21 = Objects.equals(0, this.mPackage);
						if (v21 != 0) {
							boolean v22 = Vpn.isVpnApp(this.mPackage);
							if (v22 == 0) {
								if (this.mAlwaysOn == 0) {
									if (0 != this.mLockdown) {
										if ( == 0) {
											boolean v23 = Vpn.isVpnApp(0);
											if (v23 == 0) {
												if ( == 0) {
													boolean v24 = Vpn.setAlwaysOnPackageInternal(0, 0, 0);
													if (v24 != 0) {
														Vpn.saveAlwaysOnPackage();
														boolean v26 = SdkLevel.isAtLeastT();
														if (v26 != 0) {
															if ( == 0) {
																if ( == 0) {
																	VpnProfileState v27 = Vpn.makeDisconnectedVpnProfileState();
																	boolean v28 = Vpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, this.mPackage, 0, , 0, 0, 0);
																	if ( == 0) {
																		String v29 = Vpn.getSessionKeyLocked();
																		VpnProfileState v30 = Vpn.makeVpnProfileStateLocked();
																		boolean v31 = Vpn.sendEventToVpnManagerApp("android.net.category.EVENT_ALWAYS_ON_STATE_CHANGED", -1, -1, 0, v29, v30, 0, 0, 0);
																		boolean v19 = 1;
																		VpnProfileStore v32 = this.mVpnProfileStore;
																		StringBuilder v34 = new StringBuilder();
																		StringBuilder v36 = v34.append("PLATFORM_VPN_");
																		StringBuilder v37 = v34.append(this.mUserId);
																		StringBuilder v38 = v34.append("_");
																		StringBuilder v39 = v34.append(p1);
																		String v40 = v34.toString();
																		String v33 = v40;
																		boolean v42 = LegacyVpnProfileStore.remove(v33);
																		boolean v41 = v42;
																		Binder.restoreCallingIdentity(v15);
																		return;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v2 = Binder.getCallingUid();\nint v3 = UserHandle.getUserId(v1);\nObject v4 = this.mVpns.get(v3);\nboolean v17 = Vpn.isCurrentPreparedPackage(p1);\nStringBuilder v34 = new StringBuilder();\nStringBuilder v36 = v34.append("PLATFORM_VPN_");\nStringBuilder v37 = v34.append(this.mUserId);\nStringBuilder v38 = v34.append("_");\nStringBuilder v39 = v34.append(p1);\nString v40 = v34.toString();\nboolean v42 = LegacyVpnProfileStore.remove(v33);']

The method deleteVpnProfile has the following similar APIs:

- API Name: isAlwaysOnVpnPackageSupported(ILjava/lang/String;)Z with Similarity Score: 0.8816441893577576
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
if (v3 != 0) {
long v6 = Binder.clearCallingIdentity();
boolean v8 = this.mDeps.isCallerSystem();
if (v8 != 0) {
VpnProfileStore v9 = Vpn.getVpnProfileStore();
String v10 = Vpn.getProfileNameForPackage(p1);
byte[] v11 = v9.get(v10);

- API Name: getAppExclusionList(ILjava/lang/String;)Ljava/util/List; with Similarity Score: 0.8532788157463074
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
StringBuilder v8 = new StringBuilder();
StringBuilder v10 = v8.append("VPNAPPEXCLUDED_");
StringBuilder v11 = v8.append(this.mUserId);
StringBuilder v12 = v8.append("_");
StringBuilder v13 = v8.append(p1);
String v14 = v8.toString();
byte[] v16 = LegacyVpnProfileStore.get(v7);

