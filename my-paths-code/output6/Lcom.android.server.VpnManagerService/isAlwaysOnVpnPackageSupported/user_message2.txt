The method isAlwaysOnVpnPackageSupported has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			long v6 = Binder.clearCallingIdentity();
			boolean v8 = this.mDeps.isCallerSystem();
			if (v8 != 0) {
				VpnProfileStore v9 = Vpn.getVpnProfileStore();
				String v10 = Vpn.getProfileNameForPackage(p1);
				byte[] v11 = v9.get(v10);
				if (v11 != 0) {
					VpnProfile v12 = VpnProfile.decode("", v11);
					VpnProfile v7 = v12;
					if (v7 == 0) {
						Binder.restoreCallingIdentity(v6);
						PackageManager v14 = this.mContext.getPackageManager();
						ApplicationInfo v15 = v14.getApplicationInfoAsUser(p2, 0, this.mUserId);
						StringBuilder v16 = new StringBuilder();
						StringBuilder v18 = v16.append("Can't find "");
						StringBuilder v19 = v16.append(p2);
						StringBuilder v20 = v16.append("" when checking always-on support");
						String v21 = v16.toString();
						int v22 = Log.w("Vpn", v21);
						if ( == 0) {
							if (ApplicationInfo.targetSdkVersion >= 24) {
								Intent v23 = new Intent("android.net.VpnService");
								Intent v25 = v23.setPackage(p2);
								List v26 = v14.queryIntentServicesAsUser(v23, 128, this.mUserId);
								if (v26 == 0) {
									int v27 = v26.size();
									if (v27 != 0) {
										Iterator v28 = v26.iterator();
										boolean v29 = v28.hasNext();
										if (v29 == 0) {
											Object v30 = v28.next();
											if (ServiceInfo.metaData == 0) {
												boolean v31 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
												if (v31 != 0) {
													boolean v4 = 0;
													return v4;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isAlwaysOnVpnPackageSupported(int p1, String p2){
	Object v3 = this.mVpns.get(p1);
	if (v3 != 0) {
		if (p2 != 0) {
			long v6 = Binder.clearCallingIdentity();
			boolean v8 = this.mDeps.isCallerSystem();
			if (v8 != 0) {
				VpnProfileStore v9 = Vpn.getVpnProfileStore();
				String v10 = Vpn.getProfileNameForPackage(p1);
				byte[] v11 = v9.get(v10);
				if (v11 != 0) {
					VpnProfile v7 = 0;
					if (v7 == 0) {
						Binder.restoreCallingIdentity(v6);
						PackageManager v13 = this.mContext.getPackageManager();
						ApplicationInfo v14 = v13.getApplicationInfoAsUser(p2, 0, this.mUserId);
						StringBuilder v15 = new StringBuilder();
						StringBuilder v17 = v15.append("Can't find "");
						StringBuilder v18 = v15.append(p2);
						StringBuilder v19 = v15.append("" when checking always-on support");
						String v20 = v15.toString();
						int v21 = Log.w("Vpn", v20);
						if ( == 0) {
							if (ApplicationInfo.targetSdkVersion >= 24) {
								Intent v22 = new Intent("android.net.VpnService");
								Intent v24 = v22.setPackage(p2);
								List v25 = v13.queryIntentServicesAsUser(v22, 128, this.mUserId);
								if (v25 == 0) {
									int v26 = v25.size();
									if (v26 != 0) {
										Iterator v27 = v25.iterator();
										boolean v28 = v27.hasNext();
										if (v28 == 0) {
											Object v29 = v27.next();
											if (ServiceInfo.metaData == 0) {
												boolean v30 = ServiceInfo.metaData.getBoolean("android.net.VpnService.SUPPORTS_ALWAYS_ON", 1);
												if (v30 != 0) {
													boolean v4 = 0;
													return v4;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mVpns.get(p1);\nif (v3 != 0) {\nlong v6 = Binder.clearCallingIdentity();\nboolean v8 = this.mDeps.isCallerSystem();\nif (v8 != 0) {\nVpnProfileStore v9 = Vpn.getVpnProfileStore();\nString v10 = Vpn.getProfileNameForPackage(p1);\nbyte[] v11 = v9.get(v10);', 'Binder.restoreCallingIdentity(v6);\nPackageManager v14 = this.mContext.getPackageManager();\nApplicationInfo v15 = v14.getApplicationInfoAsUser(p2, 0, this.mUserId);\nIntent v23 = new Intent("android.net.VpnService");\nIntent v25 = v23.setPackage(p2);\nList v26 = v14.queryIntentServicesAsUser(v23, 128, this.mUserId);']

The method isAlwaysOnVpnPackageSupported has the following similar APIs:

- API Name: deleteVpnProfile(Ljava/lang/String;)V with Similarity Score: 0.8816441893577576
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = Binder.getCallingUid();
int v3 = UserHandle.getUserId(v1);
Object v4 = this.mVpns.get(v3);
boolean v17 = Vpn.isCurrentPreparedPackage(p1);
StringBuilder v34 = new StringBuilder();
StringBuilder v36 = v34.append("PLATFORM_VPN_");
StringBuilder v37 = v34.append(this.mUserId);
StringBuilder v38 = v34.append("_");
StringBuilder v39 = v34.append(p1);
String v40 = v34.toString();
boolean v42 = LegacyVpnProfileStore.remove(v33);

- API Name: prepareVpn(Ljava/lang/String;Ljava/lang/String;I)Z with Similarity Score: 0.8438782691955566
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p3);
boolean v12 = Vpn.isCurrentPreparedPackage(p1);
boolean v16 = Vpn.isVpnProfilePreConsented(this.mContext, p1);
return v4;

