The method prepareVpn has the following code snippet:

This is path 1 for the API with depth 2:
public boolean prepareVpn(String p1, String p2, int p3){
	p0.throwIfLockdownEnabled();
	Object v3 = this.mVpns.get(p3);
	if (v3 == 0) {
		if (v5 == 0) {
			if (p1 == 0) {
				if (p2 == 0) {
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v12 = Vpn.isCurrentPreparedPackage(p1);
							if (v12 != 0) {
								boolean v13 = Vpn.isCurrentPreparedPackage(p1);
								if (v13 != 0) {
									boolean v14 = p1.equals("[Legacy VPN]");
									if (v14 != 0) {
										if (p3 == 1) {
											if (p3 == 2) {
												boolean v16 = Vpn.isVpnProfilePreConsented(this.mContext, p1);
												boolean v15 = v16;
												if (v15 != 0) {
													if (p2 == 0) {
														boolean v17 = p2.equals("[Legacy VPN]");
														if (v17 != 0) {
															boolean v18 = Vpn.isCurrentPreparedPackage(p2);
															if (v18 == 0) {
																boolean v4 = 1;
																return v4;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean prepareVpn(String p1, String p2, int p3){
	p0.throwIfLockdownEnabled();
	Object v3 = this.mVpns.get(p3);
	if (v3 == 0) {
		if (v5 == 0) {
			if (p1 == 0) {
				if (p2 == 0) {
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v12 = Vpn.isCurrentPreparedPackage(p1);
							if (v12 != 0) {
								boolean v13 = Vpn.isCurrentPreparedPackage(p1);
								if (v13 != 0) {
									boolean v14 = p1.equals("[Legacy VPN]");
									if (v14 != 0) {
										if (p3 == 1) {
											boolean v16 = Vpn.isVpnServicePreConsented(this.mContext, p1);
											boolean v15 = v16;
											if (v15 != 0) {
												if (p2 == 0) {
													boolean v17 = p2.equals("[Legacy VPN]");
													if (v17 != 0) {
														boolean v18 = Vpn.isCurrentPreparedPackage(p2);
														if (v18 == 0) {
															boolean v4 = 1;
															return v4;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v3 = this.mVpns.get(p3);\nboolean v12 = Vpn.isCurrentPreparedPackage(p1);\nboolean v16 = Vpn.isVpnProfilePreConsented(this.mContext, p1);\nreturn v4;', 'Object v3 = this.mVpns.get(p3);\nboolean v12 = Vpn.isCurrentPreparedPackage(p1);\nboolean v16 = Vpn.isVpnServicePreConsented(this.mContext, p1);\nreturn v4;']

The method prepareVpn has the following similar APIs:

- API Name: isAlwaysOnVpnPackageSupported(ILjava/lang/String;)Z with Similarity Score: 0.8438782691955566
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mVpns.get(p1);
if (v3 != 0) {
long v6 = Binder.clearCallingIdentity();
boolean v8 = this.mDeps.isCallerSystem();
if (v8 != 0) {
VpnProfileStore v9 = Vpn.getVpnProfileStore();
String v10 = Vpn.getProfileNameForPackage(p1);
byte[] v11 = v9.get(v10);

- API Name: establishVpn(Lcom/android/internal/net/VpnConfig;)Landroid/os/ParcelFileDescriptor; with Similarity Score: 0.8388881683349609
  - Access Control Level: NONE and the following code:
Object v5 = this.mVpns.get(v3);
boolean v9 = Vpn.doesPackageHaveAppop(this.mContext, this.mPackage, "android:activate_vpn");
ParcelFileDescriptor v6 = 0;
return v6;

