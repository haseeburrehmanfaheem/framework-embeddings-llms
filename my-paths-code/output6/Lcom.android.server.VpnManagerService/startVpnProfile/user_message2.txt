The method startVpnProfile has the following code snippet:

This is path 1 for the API with depth 2:
public String startVpnProfile(String p1){
	int v1 = Binder.getCallingUid();
	int v5 = UserHandle.getUserId(v1);
	p0.throwIfLockdownEnabled();
	Object v7 = this.mVpns.get(v5);
	Object v9 = Objects.requireNonNull(p1, "No package name provided");
	long v11 = Binder.clearCallingIdentity();
	UserInfo v12 = this.mUserManager.getUserInfo(this.mUserId);
	boolean v13 = v12.isRestricted();
	if (v13 != 0) {
		Binder.restoreCallingIdentity(v11);
		if (v16 == 0) {
			if (p1 == 0) {
				Vpn.verifyCallingUidAndPackage(p1);
				if (0 == 0) {
					Vpn.verifyCallingUidAndPackage(0);
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v19 = Vpn.isCurrentPreparedPackage(p1);
							if (v19 != 0) {
								boolean v20 = Vpn.isCurrentPreparedPackage(p1);
								if (v20 != 0) {
									boolean v21 = p1.equals("[Legacy VPN]");
									if (v21 != 0) {
										boolean v22 = Vpn.isVpnPreConsented(this.mContext, p1, 2);
										if (v22 != 0) {
											if (0 == 0) {
												boolean v23 = 0.equals("[Legacy VPN]");
												if (v23 != 0) {
													boolean v24 = Vpn.isCurrentPreparedPackage(0);
													if (v24 == 0) {
														boolean v15 = 1;
														if (v15 == 0) {
															long v25 = Binder.clearCallingIdentity();
															boolean v27 = this.mDeps.isCallerSystem();
															if (v27 != 0) {
																VpnProfileStore v28 = Vpn.getVpnProfileStore();
																String v29 = Vpn.getProfileNameForPackage(p1);
																byte[] v30 = v28.get(v29);
																if (v30 != 0) {
																	VpnProfile v31 = VpnProfile.decode("", v30);
																	VpnProfile v26 = v31;
																	if (v26 == 0) {
																		Vpn.startVpnProfilePrivileged(v26, p1);
																		boolean v33 = this.mVpnRunner instanceof Vpn$IkeV2VpnRunner;
																		if (v33 == 0) {
																			boolean v35 = Vpn.isIkev2VpnRunner();
																			if (v35 == 0) {
																				String v36 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																				String v34 = ;
																				Binder.restoreCallingIdentity(v25);
																				String v8 = v34;
																				return v8;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String startVpnProfile(String p1){
	int v1 = Binder.getCallingUid();
	int v5 = UserHandle.getUserId(v1);
	p0.throwIfLockdownEnabled();
	Object v7 = this.mVpns.get(v5);
	Object v9 = Objects.requireNonNull(p1, "No package name provided");
	long v11 = Binder.clearCallingIdentity();
	UserInfo v12 = this.mUserManager.getUserInfo(this.mUserId);
	boolean v13 = v12.isRestricted();
	if (v13 != 0) {
		Binder.restoreCallingIdentity(v11);
		if (v16 == 0) {
			if (p1 == 0) {
				Vpn.verifyCallingUidAndPackage(p1);
				if (0 == 0) {
					Vpn.verifyCallingUidAndPackage(0);
					if (p1 == 0) {
						if (this.mAlwaysOn == 0) {
							boolean v19 = Vpn.isCurrentPreparedPackage(p1);
							if (v19 != 0) {
								boolean v20 = Vpn.isCurrentPreparedPackage(p1);
								if (v20 != 0) {
									boolean v21 = p1.equals("[Legacy VPN]");
									if (v21 != 0) {
										boolean v22 = Vpn.isVpnPreConsented(this.mContext, p1, 2);
										if (v22 != 0) {
											if (0 == 0) {
												boolean v23 = 0.equals("[Legacy VPN]");
												if (v23 != 0) {
													boolean v24 = Vpn.isCurrentPreparedPackage(0);
													if (v24 == 0) {
														boolean v15 = 1;
														if (v15 == 0) {
															long v25 = Binder.clearCallingIdentity();
															boolean v27 = this.mDeps.isCallerSystem();
															if (v27 != 0) {
																VpnProfileStore v28 = Vpn.getVpnProfileStore();
																String v29 = Vpn.getProfileNameForPackage(p1);
																byte[] v30 = v28.get(v29);
																if (v30 != 0) {
																	VpnProfile v26 = 0;
																	if (v26 == 0) {
																		Vpn.startVpnProfilePrivileged(v26, p1);
																		boolean v32 = this.mVpnRunner instanceof Vpn$IkeV2VpnRunner;
																		if (v32 == 0) {
																			boolean v34 = Vpn.isIkev2VpnRunner();
																			if (v34 == 0) {
																				String v35 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);
																				String v33 = ;
																				Binder.restoreCallingIdentity(v25);
																				String v8 = v33;
																				return v8;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v9 = Objects.requireNonNull(p1, "No package name provided");\nString v29 = Vpn.getProfileNameForPackage(p1);\nbyte[] v30 = v28.get(v29);\nVpnProfile v31 = VpnProfile.decode("", v30);', 'int v1 = Binder.getCallingUid();\nint v5 = UserHandle.getUserId(v1);\nObject v7 = this.mVpns.get(v5);', 'long v11 = Binder.clearCallingIdentity();\nboolean v27 = this.mDeps.isCallerSystem();\nBinder.restoreCallingIdentity(v25);', 'String v8 = Vpn$IkeV2VpnRunner.-$$Nest$fgetmSessionKey(this.mVpnRunner);\nreturn v8;']

The method startVpnProfile has the following similar APIs:

- API Name: isCallerCurrentAlwaysOnVpnApp()Z with Similarity Score: 0.9887254238128662
  - Access Control Level: NONE and the following code:
int v3 = Binder.getCallingUid();
int v2 = v3;
int v5 = UserHandle.getUserId(v2);
Object v6 = this.mVpns.get(v5);

- API Name: isCallerCurrentAlwaysOnVpnLockdownApp()Z with Similarity Score: 0.9316028356552124
  - Access Control Level: NONE and the following code:
int v3 = Binder.getCallingUid();
int v2 = v3;
int v5 = UserHandle.getUserId(v2);
Object v6 = this.mVpns.get(v5);
UnderlyingNetworkInfo v7 = v6.getUnderlyingNetworkInfo();
int v8 = v7.getOwnerUid();
if (v8 == v2) {

