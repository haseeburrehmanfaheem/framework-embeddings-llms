This is path 1 for the API with depth 2:
public void finishSession(int p1, int p2, int p3){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.peekServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		int v4 = IAutoFillManager$Stub.getCallingUid();
		boolean v6 = AutofillManagerServiceImpl.isEnabledLocked();
		if (v6 != 0) {
			Object v7 = this.mSessions.get(p1);
			if (v7 == 0) {
				if (v4 == Session.uid) {
					if (this.mDestroyed == 0) {
						this.mSessionState = 2;
						FillResponse v9 = Session.getLastResponseLocked("showSaveLocked(%s)");
						if (v9 != 0) {
							if ( != 0) {
								int v10 = .getFlags();
								if ((v10 & 4) == 0) {
									if (Helper.sDebug == 0) {
										Session$SaveResult v18 = new Session$SaveResult(0,0,2);
										Session$SaveResult v8 = v18;
										int v20 = this.mSaveDialogNotShowReason;
										Session$$ExternalSyntheticLambda1 v22 = new Session$$ExternalSyntheticLambda1();
										Integer v24 = Integer.valueOf(v20);
										Integer v25 = Integer.valueOf(p3);
										Message v26 = PooledLambda.obtainMessage(v22, Session, v24, v25);
										boolean v27 = this.mHandler.sendMessage(v26);
										boolean v28 = this.mLogSaveShown;
										if (v28 == 0) {
											Session$$ExternalSyntheticLambda0 v30 = new Session$$ExternalSyntheticLambda0();
											Message v32 = PooledLambda.obtainMessage(v30, Session);
											boolean v33 = this.mHandler.sendMessage(v32);
											boolean v34 = this.mRemoveSession;
											if (Helper.sVerbose == 0) {
												if (v34 == 0) {
													if (Helper.sVerbose == 0) {
														if (this.mDestroyed == 0) {
															boolean v50 = Session.isSaveUiPendingLocked();
															if (v50 == 0) {
																RemoteFillService v51 = Session.destroyLocked();
																this.mService.removeSessionLocked(this.id);
																if (v51 == 0) {
																	v51.destroy();
																	this.mSessionState = 3;
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void finishSession(int p1, int p2, int p3){
	Object v1 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v3 = this.this$0.peekServiceForUserLocked(p2);
	AbstractPerUserSystemService v2 = v3;
	if (v2 == 0) {
		int v4 = IAutoFillManager$Stub.getCallingUid();
		boolean v6 = AutofillManagerServiceImpl.isEnabledLocked();
		if (v6 != 0) {
			Object v7 = this.mSessions.get(p1);
			if (v7 == 0) {
				if (v4 == Session.uid) {
					if (this.mDestroyed == 0) {
						this.mSessionState = 2;
						FillResponse v9 = Session.getLastResponseLocked("showSaveLocked(%s)");
						if (v9 != 0) {
							if ( != 0) {
								int v10 = .getFlags();
								if ((v10 & 4) == 0) {
									if (Helper.sDebug == 0) {
										Session$SaveResult v18 = new Session$SaveResult(0,0,2);
										Session$SaveResult v8 = v18;
										int v20 = this.mSaveDialogNotShowReason;
										Session$$ExternalSyntheticLambda1 v22 = new Session$$ExternalSyntheticLambda1();
										Integer v24 = Integer.valueOf(v20);
										Integer v25 = Integer.valueOf(p3);
										Message v26 = PooledLambda.obtainMessage(v22, Session, v24, v25);
										boolean v27 = this.mHandler.sendMessage(v26);
										boolean v28 = this.mLogSaveShown;
										if (v28 == 0) {
											Session$$ExternalSyntheticLambda0 v30 = new Session$$ExternalSyntheticLambda0();
											Message v32 = PooledLambda.obtainMessage(v30, Session);
											boolean v33 = this.mHandler.sendMessage(v32);
											boolean v34 = this.mRemoveSession;
											if (Helper.sVerbose == 0) {
												if (v34 == 0) {
													if (Helper.sVerbose == 0) {
														if (this.mDestroyed == 0) {
															boolean v50 = Session.isSaveUiPendingLocked();
															if (v50 == 0) {
																RemoteFillService v51 = Session.destroyLocked();
																this.mService.removeSessionLocked(this.id);
																if (v51 == 0) {
																	this.mSessionState = 3;
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
