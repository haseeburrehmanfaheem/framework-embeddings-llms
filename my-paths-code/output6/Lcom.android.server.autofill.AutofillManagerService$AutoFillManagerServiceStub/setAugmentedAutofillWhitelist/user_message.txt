This is path 1 for the API with depth 2:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		RemoteAugmentedAutofillService v8 = AutofillManagerServiceImpl.getRemoteAugmentedAutofillServiceLocked();
		if (v8 != 0) {
			int v9 = AutofillManagerServiceImpl.getAugmentedAutofillServiceUidLocked();
			if (v9 == p3) {
				int v16 = AutofillManagerServiceImpl.getAugmentedAutofillServiceUidLocked();
				int v19 = AutofillManagerServiceImpl.getUserId();
				boolean v7 = 0;
				if (v7 != 0) {
					if (AbstractMasterSystemService.verbose == 0) {
						if (AbstractMasterSystemService.verbose == 0) {
							AutofillManagerService.mAugmentedAutofillState.setWhitelist(AbstractPerUserSystemService.mUserId, p1, p2);
							if (this.mRemoteAugmentedAutofillServiceInfo == 0) {
								ComponentName v42 = this.mRemoteAugmentedAutofillServiceInfo.getComponentName();
								String v43 = v42.flattenToShortString();
								LogMaker v44 = new LogMaker(1721);
								if ( != 0) {
									boolean v47 = LogMaker.isValidValue();
									if (v47 == 0) {
										String v48 = .toString();
										byte[] v49 = v48.getBytes();
										if (v49.length <= 4000) {
											StringBuilder v50 = new StringBuilder();
											StringBuilder v52 = v50.append("Log value too long, omitted: ");
											String v53 = .toString();
											StringBuilder v54 = v52.append(v53);
											String v55 = v54.toString();
											int v56 = Log.i("LogBuilder", v55);
											LogMaker v46 = LogMaker;
											if (p1 == 0) {
												int v57 = p1.size();
												Integer v58 = Integer.valueOf(v57);
												if (v58 != 0) {
													boolean v60 = LogMaker.isValidValue(v58);
													if (v60 == 0) {
														String v61 = v58.toString();
														byte[] v62 = v61.getBytes();
														if (v62.length <= 4000) {
															StringBuilder v63 = new StringBuilder();
															StringBuilder v65 = v63.append("Log value too long, omitted: ");
															String v66 = v58.toString();
															StringBuilder v67 = v65.append(v66);
															String v68 = v67.toString();
															int v69 = Log.i("LogBuilder", v68);
															LogMaker v59 = LogMaker;
															if (p2 == 0) {
																int v70 = p2.size();
																Integer v71 = Integer.valueOf(v70);
																if (v71 != 0) {
																	boolean v73 = LogMaker.isValidValue(v71);
																	if (v73 == 0) {
																		String v74 = v71.toString();
																		byte[] v75 = v74.getBytes();
																		if (v75.length <= 4000) {
																			StringBuilder v76 = new StringBuilder();
																			StringBuilder v78 = v76.append("Log value too long, omitted: ");
																			String v79 = v71.toString();
																			StringBuilder v80 = v78.append(v79);
																			String v81 = v80.toString();
																			int v82 = Log.i("LogBuilder", v81);
																			LogMaker v72 = LogMaker;
																			this.mMetricsLogger.write(v46);
																			boolean v6 = 1;
																			if ( == 0) {
																				p2.send(p3, 0);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		RemoteAugmentedAutofillService v8 = AutofillManagerServiceImpl.getRemoteAugmentedAutofillServiceLocked();
		if (v8 != 0) {
			int v9 = AutofillManagerServiceImpl.getAugmentedAutofillServiceUidLocked();
			if (v9 == p3) {
				int v16 = AutofillManagerServiceImpl.getAugmentedAutofillServiceUidLocked();
				int v19 = AutofillManagerServiceImpl.getUserId();
				boolean v7 = 0;
				if (v7 != 0) {
					if (AbstractMasterSystemService.verbose == 0) {
						if (AbstractMasterSystemService.verbose == 0) {
							AutofillManagerService.mAugmentedAutofillState.setWhitelist(AbstractPerUserSystemService.mUserId, p1, p2);
							if (this.mRemoteAugmentedAutofillServiceInfo == 0) {
								ComponentName v42 = this.mRemoteAugmentedAutofillServiceInfo.getComponentName();
								String v43 = v42.flattenToShortString();
								LogMaker v44 = new LogMaker(1721);
								if ( != 0) {
									boolean v47 = LogMaker.isValidValue();
									if (v47 == 0) {
										String v48 = .toString();
										byte[] v49 = v48.getBytes();
										if (v49.length <= 4000) {
											StringBuilder v50 = new StringBuilder();
											StringBuilder v52 = v50.append("Log value too long, omitted: ");
											String v53 = .toString();
											StringBuilder v54 = v52.append(v53);
											String v55 = v54.toString();
											int v56 = Log.i("LogBuilder", v55);
											LogMaker v46 = LogMaker;
											if (p1 == 0) {
												int v57 = p1.size();
												Integer v58 = Integer.valueOf(v57);
												if (v58 != 0) {
													boolean v60 = LogMaker.isValidValue(v58);
													if (v60 == 0) {
														String v61 = v58.toString();
														byte[] v62 = v61.getBytes();
														if (v62.length <= 4000) {
															StringBuilder v63 = new StringBuilder();
															StringBuilder v65 = v63.append("Log value too long, omitted: ");
															String v66 = v58.toString();
															StringBuilder v67 = v65.append(v66);
															String v68 = v67.toString();
															int v69 = Log.i("LogBuilder", v68);
															LogMaker v59 = LogMaker;
															if (p2 == 0) {
																int v70 = p2.size();
																Integer v71 = Integer.valueOf(v70);
																if (v71 != 0) {
																	boolean v73 = LogMaker.isValidValue(v71);
																	if (v73 == 0) {
																		String v74 = v71.toString();
																		byte[] v75 = v74.getBytes();
																		if (v75.length <= 4000) {
																			StringBuilder v76 = new StringBuilder();
																			StringBuilder v78 = v76.append("Log value too long, omitted: ");
																			String v79 = v71.toString();
																			StringBuilder v80 = v78.append(v79);
																			String v81 = v80.toString();
																			int v82 = Log.i("LogBuilder", v81);
																			LogMaker v72 = LogMaker;
																			this.mMetricsLogger.write(v46);
																			boolean v6 = 1;
																			if ( == 0) {
																				p2.send(p3, 0);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setAugmentedAutofillWhitelist(List p1, List p2, IResultReceiver p3){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		RemoteAugmentedAutofillService v8 = AutofillManagerServiceImpl.getRemoteAugmentedAutofillServiceLocked();
		if (v8 != 0) {
			int v15 = AutofillManagerServiceImpl.getUserId();
			boolean v7 = 0;
			if (v7 != 0) {
				if (AbstractMasterSystemService.verbose == 0) {
					if (AbstractMasterSystemService.verbose == 0) {
						AutofillManagerService.mAugmentedAutofillState.setWhitelist(AbstractPerUserSystemService.mUserId, p1, p2);
						if (this.mRemoteAugmentedAutofillServiceInfo == 0) {
							ComponentName v38 = this.mRemoteAugmentedAutofillServiceInfo.getComponentName();
							String v39 = v38.flattenToShortString();
							LogMaker v40 = new LogMaker(1721);
							if ( != 0) {
								boolean v43 = LogMaker.isValidValue();
								if (v43 == 0) {
									String v44 = .toString();
									byte[] v45 = v44.getBytes();
									if (v45.length <= 4000) {
										StringBuilder v46 = new StringBuilder();
										StringBuilder v48 = v46.append("Log value too long, omitted: ");
										String v49 = .toString();
										StringBuilder v50 = v48.append(v49);
										String v51 = v50.toString();
										int v52 = Log.i("LogBuilder", v51);
										LogMaker v42 = LogMaker;
										if (p1 == 0) {
											int v53 = p1.size();
											Integer v54 = Integer.valueOf(v53);
											if (v54 != 0) {
												boolean v56 = LogMaker.isValidValue(v54);
												if (v56 == 0) {
													String v57 = v54.toString();
													byte[] v58 = v57.getBytes();
													if (v58.length <= 4000) {
														StringBuilder v59 = new StringBuilder();
														StringBuilder v61 = v59.append("Log value too long, omitted: ");
														String v62 = v54.toString();
														StringBuilder v63 = v61.append(v62);
														String v64 = v63.toString();
														int v65 = Log.i("LogBuilder", v64);
														LogMaker v55 = LogMaker;
														if (p2 == 0) {
															int v66 = p2.size();
															Integer v67 = Integer.valueOf(v66);
															if (v67 != 0) {
																boolean v69 = LogMaker.isValidValue(v67);
																if (v69 == 0) {
																	String v70 = v67.toString();
																	byte[] v71 = v70.getBytes();
																	if (v71.length <= 4000) {
																		StringBuilder v72 = new StringBuilder();
																		StringBuilder v74 = v72.append("Log value too long, omitted: ");
																		String v75 = v67.toString();
																		StringBuilder v76 = v74.append(v75);
																		String v77 = v76.toString();
																		int v78 = Log.i("LogBuilder", v77);
																		LogMaker v68 = LogMaker;
																		this.mMetricsLogger.write(v42);
																		boolean v6 = 1;
																		if ( == 0) {
																			p2.send(p3, 0);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
