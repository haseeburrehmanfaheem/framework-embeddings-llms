This is path 1 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, AutofillId p3, Rect p4, AutofillValue p5, int p6, boolean p7, int p8, ComponentName p9, boolean p10, IResultReceiver p11){
	Preconditions.checkArgument(, "userId");
	Context v10 = this.this$0.getContext();
	PackageManager v11 = v10.getPackageManager();
	PackageInfo v12 = v11.getPackageInfoAsUser(v5, 0, p6);
	ActivityManagerInternal v13 = this.mAm;
	int v14 = v13.getTaskIdForActivity(p1, 0);
	Object v15 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v17 = this.this$0.getServiceForUserLocked(p6);
	AbstractPerUserSystemService v16 = v17;
	int v18 = IAutoFillManager$Stub.getCallingUid();
	boolean v19 = AbstractMasterSystemService.mAllowInstantService;
	if ((p8 & 8) == 0) {
		boolean v21 = AutofillManagerServiceImpl.isEnabledLocked();
		if (v21 != 0) {
			if ( != 0) {
				boolean v23 = this.mDisabledInfoCache.isAutofillDisabledLocked(AbstractPerUserSystemService.mUserId, p9);
				boolean v22 = v23;
				if (v22 == 0) {
					boolean v25 = AutofillManagerService.mAugmentedAutofillState.isWhitelisted(AbstractPerUserSystemService.mUserId, p9);
					boolean v24 = v25;
					if (v24 == 0) {
						if (Helper.sDebug == 0) {
							if (Helper.sVerbose == 0) {
								long v44 = System.currentTimeMillis();
								if ((this.mLastPrune < (v44 - 30000)) >= 0) {
									this.mLastPrune = v44;
									int v45 = this.mSessions.size();
									if (v45 <= 0) {
										AutofillManagerServiceImpl$PruneTask v46 = new AutofillManagerServiceImpl$PruneTask(AutofillManagerServiceImpl,0);
										Void v48 = new Void(0);
										AsyncTask v49 = v46.execute(v48);
										if (( + 1) <= 2048) {
											int v51 = this.sRandom.nextInt();
											int v52 = Math.abs(v51);
											if (v52 == 0) {
												if (v52 == 2147483647) {
													int v53 = this.mSessions.indexOfKey(v52);
													if (v53 >= 0) {
														AutofillManagerServiceImpl.assertCallerLocked(p9, p10);
														if (this.mInfo != 0) {
															ServiceInfo v55 = this.mInfo.getServiceInfo();
															ComponentName v56 = v55.getComponentName();
															Session v57 = new Session(AutofillManagerServiceImpl,this.mUi,v58,this.mHandler,AbstractPerUserSystemService.mUserId,AbstractPerUserSystemService.mLock,v52,p2,p3,p1,p4,p8,this.mUiLatencyHistory,this.mWtfHistory,,p9,p10,p11,,p12,this.mInputMethodManagerInternal);
															Context v58 = AutofillManagerServiceImpl.getContext();
															this.mSessions.put(Session.id, v57);
															Session v50 = v57;
															if (v50 != 0) {
																long v20 = 2147483647;
																if ((v20 >> 32) == 0) {
																	Bundle v63 = SyncResultReceiver.bundleFor(p4);
																	p2.send(p3, v63);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, AutofillId p3, Rect p4, AutofillValue p5, int p6, boolean p7, int p8, ComponentName p9, boolean p10, IResultReceiver p11){
	Preconditions.checkArgument(, "userId");
	Context v10 = this.this$0.getContext();
	PackageManager v11 = v10.getPackageManager();
	PackageInfo v12 = v11.getPackageInfoAsUser(v5, 0, p6);
	ActivityManagerInternal v13 = this.mAm;
	int v14 = v13.getTaskIdForActivity(p1, 0);
	Object v15 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v17 = this.this$0.getServiceForUserLocked(p6);
	AbstractPerUserSystemService v16 = v17;
	int v18 = IAutoFillManager$Stub.getCallingUid();
	boolean v19 = AbstractMasterSystemService.mAllowInstantService;
	if ((p8 & 8) == 0) {
		boolean v21 = AutofillManagerServiceImpl.isEnabledLocked();
		if (v21 != 0) {
			if ( != 0) {
				boolean v23 = this.mDisabledInfoCache.isAutofillDisabledLocked(AbstractPerUserSystemService.mUserId, p9);
				boolean v22 = v23;
				if (v22 == 0) {
					boolean v25 = AutofillManagerService.mAugmentedAutofillState.isWhitelisted(AbstractPerUserSystemService.mUserId, p9);
					boolean v24 = v25;
					if (v24 == 0) {
						if (Helper.sDebug == 0) {
							if (Helper.sVerbose == 0) {
								long v44 = System.currentTimeMillis();
								if ((this.mLastPrune < (v44 - 30000)) >= 0) {
									this.mLastPrune = v44;
									int v45 = this.mSessions.size();
									if (v45 <= 0) {
										AutofillManagerServiceImpl$PruneTask v46 = new AutofillManagerServiceImpl$PruneTask(AutofillManagerServiceImpl,0);
										Void v48 = new Void(0);
										AsyncTask v49 = v46.execute(v48);
										if (( + 1) <= 2048) {
											int v51 = this.sRandom.nextInt();
											int v52 = Math.abs(v51);
											if (v52 == 0) {
												if (v52 == 2147483647) {
													int v53 = this.mSessions.indexOfKey(v52);
													if (v53 >= 0) {
														AutofillManagerServiceImpl.assertCallerLocked(p9, p10);
														if (this.mInfo != 0) {
															Session v55 = new Session(AutofillManagerServiceImpl,this.mUi,v56,this.mHandler,AbstractPerUserSystemService.mUserId,AbstractPerUserSystemService.mLock,v52,p2,p3,p1,p4,p8,this.mUiLatencyHistory,this.mWtfHistory,,p9,p10,p11,,p12,this.mInputMethodManagerInternal);
															Context v56 = AutofillManagerServiceImpl.getContext();
															this.mSessions.put(Session.id, v55);
															Session v50 = v55;
															if (v50 != 0) {
																long v20 = 2147483647;
																if ((v20 >> 32) == 0) {
																	Bundle v61 = SyncResultReceiver.bundleFor(p4);
																	p2.send(p3, v61);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void startSession(IBinder p1, IBinder p2, AutofillId p3, Rect p4, AutofillValue p5, int p6, boolean p7, int p8, ComponentName p9, boolean p10, IResultReceiver p11){
	Preconditions.checkArgument(, "userId");
	Context v10 = this.this$0.getContext();
	PackageManager v11 = v10.getPackageManager();
	PackageInfo v12 = v11.getPackageInfoAsUser(v5, 0, p6);
	ActivityManagerInternal v13 = this.mAm;
	int v14 = v13.getTaskIdForActivity(p1, 0);
	Object v15 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v17 = this.this$0.getServiceForUserLocked(p6);
	AbstractPerUserSystemService v16 = v17;
	int v18 = IAutoFillManager$Stub.getCallingUid();
	boolean v19 = AbstractMasterSystemService.mAllowInstantService;
	if ((p8 & 8) == 0) {
		boolean v21 = AutofillManagerServiceImpl.isEnabledLocked();
		if (v21 != 0) {
			if ( != 0) {
				boolean v23 = this.mDisabledInfoCache.isAutofillDisabledLocked(AbstractPerUserSystemService.mUserId, p9);
				boolean v22 = v23;
				if (v22 == 0) {
					boolean v25 = AutofillManagerService.mAugmentedAutofillState.isWhitelisted(AbstractPerUserSystemService.mUserId, p9);
					boolean v24 = v25;
					if (v24 == 0) {
						if (Helper.sDebug == 0) {
							if (Helper.sVerbose == 0) {
								long v44 = System.currentTimeMillis();
								if ((this.mLastPrune < (v44 - 30000)) >= 0) {
									this.mLastPrune = v44;
									int v45 = this.mSessions.size();
									if (v45 <= 0) {
										AutofillManagerServiceImpl$PruneTask v46 = new AutofillManagerServiceImpl$PruneTask(AutofillManagerServiceImpl,0);
										Void v48 = new Void(0);
										AsyncTask v49 = v46.execute(v48);
										if (( + 1) <= 2048) {
											int v51 = this.sRandom.nextInt();
											int v52 = Math.abs(v51);
											if (v52 == 0) {
												if (v52 == 2147483647) {
													int v53 = this.mSessions.indexOfKey(v52);
													if (v53 >= 0) {
														AutofillManagerServiceImpl.assertCallerLocked(p9, p10);
														if (this.mInfo != 0) {
															ServiceInfo v55 = this.mInfo.getServiceInfo();
															ComponentName v56 = v55.getComponentName();
															Session v57 = new Session(AutofillManagerServiceImpl,this.mUi,v58,this.mHandler,AbstractPerUserSystemService.mUserId,AbstractPerUserSystemService.mLock,v52,p2,p3,p1,p4,p8,this.mUiLatencyHistory,this.mWtfHistory,,p9,p10,p11,,p12,this.mInputMethodManagerInternal);
															Context v58 = AutofillManagerServiceImpl.getContext();
															this.mSessions.put(Session.id, v57);
															Session v50 = v57;
															if (v50 != 0) {
																long v20 = 2147483647;
																if ((v20 >> 32) == 0) {
																	Bundle v63 = SyncResultReceiver.bundleFor(p4);
																	p2.send(p3, v63);
																	return;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
