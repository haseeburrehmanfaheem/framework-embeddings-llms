The method setUserData has the following code snippet:

This is path 1 for the API with depth 2:
public void setUserData(UserData p1){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		boolean v7 = AutofillManagerServiceImpl.isCalledByServiceLocked("setUserData", v5);
		if (v7 != 0) {
			this.mUserData = p1;
			if (p1 != 0) {
				String v8 = this.mCategoryIds;
				LogMaker v9 = new LogMaker(1272);
				ComponentName v12 = AbstractPerUserSystemService.getServiceComponentName();
				if (v12 != 0) {
					String v11 = ;
					this.entries.put(806, v11);
					LogMaker v13 = LogMaker;
					Integer v15 = Integer.valueOf();
					if (v15 != 0) {
						boolean v17 = LogMaker.isValidValue(v15);
						if (v17 == 0) {
							String v18 = v15.toString();
							byte[] v19 = v18.getBytes();
							if (v19.length <= 4000) {
								StringBuilder v20 = new StringBuilder();
								StringBuilder v22 = v20.append("Log value too long, omitted: ");
								String v23 = v15.toString();
								StringBuilder v24 = v22.append(v23);
								String v25 = v24.toString();
								int v26 = Log.i("LogBuilder", v25);
								LogMaker v16 = LogMaker;
								this.mMetricsLogger.write(v16);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setUserData(UserData p1){
	int v1 = UserHandle.getCallingUserId();
	Object v2 = AbstractMasterSystemService.mLock;
	AbstractPerUserSystemService v4 = this.this$0.peekServiceForUserLocked(v1);
	AbstractPerUserSystemService v3 = v4;
	if (v3 == 0) {
		int v5 = IAutoFillManager$Stub.getCallingUid();
		boolean v7 = AutofillManagerServiceImpl.isCalledByServiceLocked("setUserData", v5);
		if (v7 != 0) {
			this.mUserData = p1;
			if (p1 != 0) {
				String v8 = this.mCategoryIds;
				LogMaker v9 = new LogMaker(1272);
				ComponentName v12 = AbstractPerUserSystemService.getServiceComponentName();
				if (v12 != 0) {
					String v13 = v12.getPackageName();
					String v11 = ;
					this.entries.put(806, v11);
					LogMaker v14 = LogMaker;
					Integer v16 = Integer.valueOf();
					if (v16 != 0) {
						boolean v18 = LogMaker.isValidValue(v16);
						if (v18 == 0) {
							String v19 = v16.toString();
							byte[] v20 = v19.getBytes();
							if (v20.length <= 4000) {
								StringBuilder v21 = new StringBuilder();
								StringBuilder v23 = v21.append("Log value too long, omitted: ");
								String v24 = v16.toString();
								StringBuilder v25 = v23.append(v24);
								String v26 = v25.toString();
								int v27 = Log.i("LogBuilder", v26);
								LogMaker v17 = LogMaker;
								this.mMetricsLogger.write(v17);
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['this.mUserData = p1;\nif (p1 != 0) {', 'LogMaker v9 = new LogMaker(1272);\nthis.entries.put(806, v11);\nLogMaker v14 = LogMaker;\nthis.mMetricsLogger.write(v17);']

The method setUserData has the following similar APIs:

- API Name: setAugmentedAutofillWhitelist(Ljava/util/List;Ljava/util/List;Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.84139084815979
  - Access Control Level: NONE and the following code:
LogMaker v44 = new LogMaker(1721);
this.mMetricsLogger.write(v46);

- API Name: getUserDataId(Lcom/android/internal/os/IResultReceiver;)V with Similarity Score: 0.7056072354316711
  - Access Control Level: NONE and the following code:
UserData v6 = this.mUserData;
String v8 = this.mId;

