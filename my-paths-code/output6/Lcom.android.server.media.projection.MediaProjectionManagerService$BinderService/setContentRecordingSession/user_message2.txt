The method setContentRecordingSession has the following code snippet:

This is path 1 for the API with depth 2:
public void setContentRecordingSession(ContentRecordingSession p1, IMediaProjection p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mLock;
	IBinder v4 = p2.asBinder();
	boolean v6 = this.this$0.isValidMediaProjection(v4);
	boolean v5 = v6;
	boolean v3 = v5;
	if (v3 == 0) {
		Object v7 = LocalServices.getService(WindowManagerInterna.class);
		boolean v8 = v7.setContentRecordingSession(p1);
		if (v8 != 0) {
			MediaProjectionManagerService$MediaProjection v9 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
			if (v9 == 0) {
				MediaProjectionManagerService$MediaProjection v10 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
				Object v12 = this.mLock;
				IBinder v13 = IMediaProjection$Stub;
				boolean v15 = this.this$0.isValidMediaProjection(v13);
				boolean v14 = v15;
				if (v14 != 0) {
					if (this.mRestoreSystemAlertWindow == 0) {
						long v16 = Binder.clearCallingIdentity();
						AppOpsManager v17 = this.mAppOps;
						int v18 = v17.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
						if (v18 != 0) {
							AppOpsManager v19 = this.mAppOps;
							v19.setMode(24, this.uid, this.packageName, 3);
							this.mRestoreSystemAlertWindow = 0;
							Binder.restoreCallingIdentity(v16);
							this.this$0.stopProjectionLocked(p0);
							boolean v24 = this.mToken.unlinkToDeath(this.mDeathEater, 0);
							this.mToken = 0;
							if (this.mCallback == 0) {
								MediaProjectionManagerService$CallbackDelegate v26 = MediaProjectionManagerService.-$$Nest$fgetmCallbackDelegate(this.this$0);
								v26.remove(this.mCallback);
								this.mCallback = 0;
								Binder.restoreCallingIdentity(v1);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setContentRecordingSession(ContentRecordingSession p1, IMediaProjection p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mLock;
	IBinder v4 = p2.asBinder();
	boolean v6 = this.this$0.isValidMediaProjection(v4);
	boolean v5 = v6;
	boolean v3 = v5;
	if (v3 == 0) {
		Object v7 = LocalServices.getService(WindowManagerInterna.class);
		boolean v8 = v7.setContentRecordingSession(p1);
		if (v8 != 0) {
			MediaProjectionManagerService$MediaProjection v9 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
			if (v9 == 0) {
				MediaProjectionManagerService$MediaProjection v10 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
				Object v12 = this.mLock;
				IBinder v13 = IMediaProjection$Stub;
				boolean v15 = this.this$0.isValidMediaProjection(v13);
				boolean v14 = v15;
				if (v14 != 0) {
					if (this.mRestoreSystemAlertWindow == 0) {
						long v16 = Binder.clearCallingIdentity();
						AppOpsManager v17 = this.mAppOps;
						int v18 = v17.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
						if (v18 != 0) {
							this.mRestoreSystemAlertWindow = 0;
							Binder.restoreCallingIdentity(v16);
							this.this$0.stopProjectionLocked(p0);
							boolean v22 = this.mToken.unlinkToDeath(this.mDeathEater, 0);
							this.mToken = 0;
							if (this.mCallback == 0) {
								MediaProjectionManagerService$CallbackDelegate v24 = MediaProjectionManagerService.-$$Nest$fgetmCallbackDelegate(this.this$0);
								v24.remove(this.mCallback);
								this.mCallback = 0;
								Binder.restoreCallingIdentity(v1);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setContentRecordingSession(ContentRecordingSession p1, IMediaProjection p2){
	long v1 = Binder.clearCallingIdentity();
	Object v2 = this.mLock;
	IBinder v4 = p2.asBinder();
	boolean v6 = this.this$0.isValidMediaProjection(v4);
	boolean v5 = v6;
	boolean v3 = v5;
	if (v3 == 0) {
		Object v7 = LocalServices.getService(WindowManagerInterna.class);
		boolean v8 = v7.setContentRecordingSession(p1);
		if (v8 != 0) {
			MediaProjectionManagerService$MediaProjection v9 = MediaProjectionManagerService.-$$Nest$fgetmProjectionGrant(this.this$0);
			if (v9 == 0) {
				Binder.restoreCallingIdentity(v1);
				return;
			}
		}
	}
}

and the following sink code:
['boolean v6 = this.this$0.isValidMediaProjection(v4);\nObject v7 = LocalServices.getService(WindowManagerInterna.class);\nboolean v8 = v7.setContentRecordingSession(p1);', 'AppOpsManager v17 = this.mAppOps;\nint v18 = v17.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);\nv19.setMode(24, this.uid, this.packageName, 3);', 'this.this$0.stopProjectionLocked(p0);\nboolean v22 = this.mToken.unlinkToDeath(this.mDeathEater, 0);\nthis.mToken = 0;']

The method setContentRecordingSession has the following similar APIs:

- API Name: setAutoRevokeExempted(Ljava/lang/String;ZI)Z with Similarity Score: 0.7740030884742737
  - Access Control Level: SYS_OR_SIG and the following code:
AndroidPackage v2 = this.mPackageManagerInt.getPackage(p1);
int v8 = v2.getUid();
String v10 = v2.getPackageName();
int v9 = UserHandle.getUid(p3, v8);
int v11 = this.mAppOpsManager.checkOpNoThrow(98, v9, v10);
this.mAppOpsManager.setMode(97, v9, v13, );

- API Name: allocateBytes(Ljava/lang/String;JILjava/lang/String;)V with Similarity Score: 0.7722753882408142
  - Access Control Level: SYS_OR_SIG and the following code:
Object v4 = this.mContext.getSystemService(AppOpsManage.class);
long v5 = Binder.clearCallingIdentity();
boolean v6 = v4.isOperationActive(26, v1, p4);

