The method stopActiveProjection has the following code snippet:

This is path 1 for the API with depth 2:
public void stopActiveProjection(){
	if (v2 != 0) {
		long v3 = Binder.clearCallingIdentity();
		MediaProjectionManagerService$MediaProjection v4 = this.mProjectionGrant;
		if (v4 == 0) {
			MediaProjectionManagerService$MediaProjection v5 = this.mProjectionGrant;
			Object v7 = this.mLock;
			IBinder v8 = IMediaProjection$Stub;
			boolean v10 = this.this$0.isValidMediaProjection(v8);
			boolean v9 = v10;
			if (v9 != 0) {
				if (this.mRestoreSystemAlertWindow == 0) {
					long v11 = Binder.clearCallingIdentity();
					AppOpsManager v12 = this.mAppOps;
					int v13 = v12.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
					if (v13 != 0) {
						AppOpsManager v14 = this.mAppOps;
						v14.setMode(24, this.uid, this.packageName, 3);
						this.mRestoreSystemAlertWindow = 0;
						Binder.restoreCallingIdentity(v11);
						this.this$0.stopProjectionLocked(p0);
						boolean v19 = this.mToken.unlinkToDeath(this.mDeathEater, 0);
						this.mToken = 0;
						if (this.mCallback == 0) {
							MediaProjectionManagerService$CallbackDelegate v21 = MediaProjectionManagerService.-$$Nest$fgetmCallbackDelegate(this.this$0);
							v21.remove(this.mCallback);
							this.mCallback = 0;
							Binder.restoreCallingIdentity(v3);
							return;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void stopActiveProjection(){
	if (v2 != 0) {
		long v3 = Binder.clearCallingIdentity();
		MediaProjectionManagerService$MediaProjection v4 = this.mProjectionGrant;
		if (v4 == 0) {
			MediaProjectionManagerService$MediaProjection v5 = this.mProjectionGrant;
			Object v7 = this.mLock;
			IBinder v8 = IMediaProjection$Stub;
			boolean v10 = this.this$0.isValidMediaProjection(v8);
			boolean v9 = v10;
			if (v9 != 0) {
				if (this.mRestoreSystemAlertWindow == 0) {
					long v11 = Binder.clearCallingIdentity();
					AppOpsManager v12 = this.mAppOps;
					int v13 = v12.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);
					if (v13 != 0) {
						this.mRestoreSystemAlertWindow = 0;
						Binder.restoreCallingIdentity(v11);
						this.this$0.stopProjectionLocked(p0);
						boolean v17 = this.mToken.unlinkToDeath(this.mDeathEater, 0);
						this.mToken = 0;
						if (this.mCallback == 0) {
							MediaProjectionManagerService$CallbackDelegate v19 = MediaProjectionManagerService.-$$Nest$fgetmCallbackDelegate(this.this$0);
							v19.remove(this.mCallback);
							this.mCallback = 0;
							Binder.restoreCallingIdentity(v3);
							return;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v10 = this.this$0.isValidMediaProjection(v8);\nint v13 = v12.unsafeCheckOpRawNoThrow(24, this.uid, this.packageName);\nv14.setMode(24, this.uid, this.packageName, 3);']

The method stopActiveProjection has the following similar APIs:

- API Name: setContentRecordingSession(Landroid/view/ContentRecordingSession;Landroid/media/projection/IMediaProjection;)V with Similarity Score: 0.7624279856681824
  - Access Control Level: NONE and the following code:
boolean v6 = this.this$0.isValidMediaProjection(v4);
Object v7 = LocalServices.getService(WindowManagerInterna.class);
boolean v8 = v7.setContentRecordingSession(p1);

- API Name: createProjection(ILjava/lang/String;IZ)Landroid/media/projection/IMediaProjection; with Similarity Score: 0.7506479024887085
  - Access Control Level: SYS_OR_SIG and the following code:
ApplicationInfo v7 = v6.getApplicationInfoAsUser(p2, 0, v4);
boolean v9 = v7.isPrivilegedApp();
MediaProjectionManagerService$MediaProjection v8 = new MediaProjectionManagerService$MediaProjection(this.this$0,p3,p1,p2,ApplicationInfo.targetSdkVersion,v9);
return v8;

