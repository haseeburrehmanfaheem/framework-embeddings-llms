The method enableNanoApp has the following code snippet:

This is path 1 for the API with depth 2:
public void enableNanoApp(int p1, IContextHubTransactionCallback p2, long p3){
	if (this.mContextHubWrapper != 0) {
		Integer v4 = Integer.valueOf(p1);
		boolean v5 = this.mContextHubIdToInfoMap.containsKey(v4);
		boolean v3 = v5;
		if (v3 != 0) {
			StringBuilder v6 = new StringBuilder();
			StringBuilder v8 = v6.append("Cannot start ");
			if (0 == 0) {
				String v9 = ;
				StringBuilder v10 = v6.append(v9);
				StringBuilder v11 = v6.append(" transaction for invalid hub ID ");
				StringBuilder v12 = v6.append(p1);
				String v13 = v6.toString();
				int v14 = Log.e("ContextHubService", v13);
				p2.onTransactionComplete(2);
				int v16 = Log.e("ContextHubService", "RemoteException while calling onTransactionComplete", caughtException);
				boolean v2 = 0;
				if (v2 != 0) {
					String v17 = p0.getCallingPackageName();
					ContextHubServiceTransaction v18 = this.mTransactionManager.createEnableTransaction(p1, p3, p2, v17);
					int v20 = this.mTransactionQueue.size();
					if (v20 == 10000) {
						boolean v21 = this.mTransactionQueue.add(v18);
						ContextHubTransactionManager$TransactionRecord v22 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v23);
						String v23 = v18.toString();
						boolean v25 = this.mTransactionRecordDeque.add(v22);
						int v26 = this.mTransactionQueue.size();
						if (v26 != 1) {
							if ( == 0) {
								boolean v28 = this.mTransactionQueue.isEmpty();
								if (v28 != 0) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void enableNanoApp(int p1, IContextHubTransactionCallback p2, long p3){
	if (this.mContextHubWrapper != 0) {
		Integer v4 = Integer.valueOf(p1);
		boolean v5 = this.mContextHubIdToInfoMap.containsKey(v4);
		boolean v3 = v5;
		if (v3 != 0) {
			StringBuilder v6 = new StringBuilder();
			StringBuilder v8 = v6.append("Cannot start ");
			if (0 == 0) {
				String v9 = ;
				StringBuilder v10 = v6.append(v9);
				StringBuilder v11 = v6.append(" transaction for invalid hub ID ");
				StringBuilder v12 = v6.append(p1);
				String v13 = v6.toString();
				int v14 = Log.e("ContextHubService", v13);
				p2.onTransactionComplete(2);
				boolean v2 = 0;
				if (v2 != 0) {
					String v16 = p0.getCallingPackageName();
					ContextHubServiceTransaction v17 = this.mTransactionManager.createEnableTransaction(p1, p3, p2, v16);
					int v19 = this.mTransactionQueue.size();
					if (v19 == 10000) {
						boolean v20 = this.mTransactionQueue.add(v17);
						ContextHubTransactionManager$TransactionRecord v21 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v22);
						String v22 = v17.toString();
						boolean v24 = this.mTransactionRecordDeque.add(v21);
						int v25 = this.mTransactionQueue.size();
						if (v25 != 1) {
							if ( == 0) {
								boolean v27 = this.mTransactionQueue.isEmpty();
								if (v27 != 0) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void enableNanoApp(int p1, IContextHubTransactionCallback p2, long p3){
	if (this.mContextHubWrapper != 0) {
		Integer v4 = Integer.valueOf(p1);
		boolean v5 = this.mContextHubIdToInfoMap.containsKey(v4);
		boolean v3 = v5;
		if (v3 != 0) {
			StringBuilder v6 = new StringBuilder();
			StringBuilder v8 = v6.append("Cannot start ");
			if (0 == 0) {
				String v9 = ;
				StringBuilder v10 = v6.append(v9);
				StringBuilder v11 = v6.append(" transaction for invalid hub ID ");
				StringBuilder v12 = v6.append(p1);
				String v13 = v6.toString();
				int v14 = Log.e("ContextHubService", v13);
				p2.onTransactionComplete(2);
				int v16 = Log.e("ContextHubService", "RemoteException while calling onTransactionComplete", caughtException);
				boolean v2 = 0;
				if (v2 != 0) {
					String v17 = p0.getCallingPackageName();
					ContextHubServiceTransaction v18 = this.mTransactionManager.createEnableTransaction(p1, p3, p2, v17);
					int v20 = this.mTransactionQueue.size();
					if (v20 == 10000) {
						boolean v21 = this.mTransactionQueue.add(v18);
						ContextHubTransactionManager$TransactionRecord v22 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v23);
						String v23 = v18.toString();
						boolean v25 = this.mTransactionRecordDeque.add(v22);
						int v26 = this.mTransactionQueue.size();
						if (v26 != 1) {
							if ( == 0) {
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v4 = Integer.valueOf(p1);\nContextHubServiceTransaction v18 = this.mTransactionManager.createEnableTransaction(p1, p3, p2, v17);']

The method enableNanoApp has the following similar APIs:

- API Name: loadNanoAppOnHub(ILandroid/hardware/location/IContextHubTransactionCallback;Landroid/hardware/location/NanoAppBinary;)V with Similarity Score: 0.7866175174713135
  - Access Control Level: NONE and the following code:
Integer v4 = Integer.valueOf(p1);
if (this.mContextHubIdToInfoMap.containsKey(v4)) {
ContextHubTransactionManager$1 v19 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v20,0,v21,v17,p1,p3,p2);
int v20 = this.mNextAvailableId.getAndIncrement();
boolean v25 = this.mTransactionQueue.add(v18);

- API Name: unloadNanoAppFromHub(ILandroid/hardware/location/IContextHubTransactionCallback;J)V with Similarity Score: 0.7854738235473633
  - Access Control Level: NONE and the following code:
String v17 = p0.getCallingPackageName();
ContextHubServiceTransaction v17 = this.mTransactionManager.createUnloadTransaction(p1, p3, p2, v16);
boolean v20 = this.mTransactionQueue.add(v17);
ContextHubTransactionManager$TransactionRecord v21 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v22);

