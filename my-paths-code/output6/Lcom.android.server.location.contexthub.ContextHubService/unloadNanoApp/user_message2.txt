The method unloadNanoApp has the following code snippet:

This is path 1 for the API with depth 2:
public int unloadNanoApp(int p1){
	if (this.mContextHubWrapper != 0) {
		Integer v3 = Integer.valueOf(p1);
		Object v4 = this.mNanoAppHash.get(v3);
		NanoAppInstanceInfo v2 = v4;
		if (v2 != 0) {
			int v5 = this.mContexthubId;
			long v6 = this.mAppId;
			ContextHubService$8 v8 = new ContextHubService$8(ContextHubService,v5);
			IContextHubTransactionCallback v7 = v8;
			PackageManager v11 = this.mContext.getPackageManager();
			int v12 = Binder.getCallingUid();
			String v13 = v11.getNameForUid(v12);
			String v10 = v13;
			ContextHubTransactionManager$2 v15 = new ContextHubTransactionManager$2(ContextHubTransactionManager,v16,1,v6,v10,v5,v6,v7);
			int v16 = this.mNextAvailableId.getAndIncrement();
			ContextHubServiceTransaction v14 = v15;
			int v19 = this.mTransactionQueue.size();
			if (v19 == 10000) {
				boolean v20 = this.mTransactionQueue.add(v14);
				ContextHubTransactionManager$TransactionRecord v21 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v22);
				String v22 = v14.toString();
				boolean v24 = this.mTransactionRecordDeque.add(v21);
				int v25 = this.mTransactionQueue.size();
				if (v25 != 1) {
					if ( == 0) {
						boolean v27 = this.mTransactionQueue.isEmpty();
						if (v27 != 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int unloadNanoApp(int p1){
	if (this.mContextHubWrapper != 0) {
		Integer v3 = Integer.valueOf(p1);
		Object v4 = this.mNanoAppHash.get(v3);
		NanoAppInstanceInfo v2 = v4;
		if (v2 != 0) {
			int v5 = this.mContexthubId;
			long v6 = this.mAppId;
			ContextHubService$8 v8 = new ContextHubService$8(ContextHubService,v5);
			IContextHubTransactionCallback v7 = v8;
			PackageManager v11 = this.mContext.getPackageManager();
			int v12 = Binder.getCallingUid();
			String v13 = v11.getNameForUid(v12);
			String v10 = v13;
			ContextHubTransactionManager$2 v15 = new ContextHubTransactionManager$2(ContextHubTransactionManager,v16,1,v6,v10,v5,v6,v7);
			int v16 = this.mNextAvailableId.getAndIncrement();
			ContextHubServiceTransaction v14 = v15;
			int v19 = this.mTransactionQueue.size();
			if (v19 == 10000) {
				boolean v20 = this.mTransactionQueue.add(v14);
				ContextHubTransactionManager$TransactionRecord v21 = new ContextHubTransactionManager$TransactionRecord(ContextHubTransactionManager,v22);
				String v22 = v14.toString();
				boolean v24 = this.mTransactionRecordDeque.add(v21);
				int v25 = this.mTransactionQueue.size();
				if (v25 != 1) {
					if ( == 0) {
						return 0;
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v3 = Integer.valueOf(p1);\nObject v4 = this.mNanoAppHash.get(v3);\nContextHubService$8 v8 = new ContextHubService$8(ContextHubService,v5);\nContextHubTransactionManager$2 v15 = new ContextHubTransactionManager$2(ContextHubTransactionManager,v16,1,v6,v10,v5,v6,v7);\nboolean v20 = this.mTransactionQueue.add(v14);']

The method unloadNanoApp has the following similar APIs:

- API Name: loadNanoAppOnHub(ILandroid/hardware/location/IContextHubTransactionCallback;Landroid/hardware/location/NanoAppBinary;)V with Similarity Score: 0.8331694602966309
  - Access Control Level: NONE and the following code:
Integer v4 = Integer.valueOf(p1);
if (this.mContextHubIdToInfoMap.containsKey(v4)) {
ContextHubTransactionManager$1 v19 = new ContextHubTransactionManager$1(ContextHubTransactionManager,v20,0,v21,v17,p1,p3,p2);
int v20 = this.mNextAvailableId.getAndIncrement();
boolean v25 = this.mTransactionQueue.add(v18);

- API Name: sendMessage(IILandroid/hardware/location/ContextHubMessage;)I with Similarity Score: 0.8130160570144653
  - Access Control Level: NONE and the following code:
Integer v5 = Integer.valueOf(p1);
ContextHubService$9 v10 = new ContextHubService$9(ContextHubService, p1);
ContextHubTransactionManager$5 v17 = new ContextHubTransactionManager$5(ContextHubTransactionManager, v18, 4, v12, p1, v9);

