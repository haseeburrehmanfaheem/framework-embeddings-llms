The method updateFontFamily has the following code snippet:

This is path 1 for the API with depth 2:
public int updateFontFamily(List p1, int p2){
	if (this.mUpdatableFontDir == 0) {
		if (p2 == -1) {
			int v6 = this.mConfigVersion;
			if (v6 != p2) {
				Iterator v8 = p2.iterator();
				boolean v9 = v8.hasNext();
				if (v9 == 0) {
					ArrayMap v10 = new ArrayMap(this.mFontFileInfoMap);
					PersistentSystemFontConfig$Config v12 = UpdatableFontDir.readPersistentConfig();
					HashMap v13 = new HashMap();
					int v15 = PersistentSystemFontConfig$Config.fontFamilies.size();
					if ( >= v15) {
						Iterator v16 = p2.iterator();
						boolean v17 = v16.hasNext();
						if (v17 == 0) {
							Collection v18 = v13.values();
							Iterator v19 = v18.iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = this.mCurrentTimeSupplier.get();
								long v22 = v21.longValue();
								this.mLastModifiedMillis = v22;
								PersistentSystemFontConfig$Config v23 = new PersistentSystemFontConfig$Config();
								PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
								Collection v25 = this.mFontFileInfoMap.values();
								Iterator v26 = v25.iterator();
								boolean v27 = v26.hasNext();
								if (v27 == 0) {
									Collection v28 = v13.values();
									boolean v29 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v28);
									UpdatableFontDir.writePersistentConfig(v23);
									this.mConfigVersion = (this.mConfigVersion + 1);
									FontConfig v32 = FontManagerService.getSystemFontConfig();
									SharedMemory v33 = FontManagerService.serializeFontMap(v32);
									if (v33 != 0) {
										SharedMemory v34 = FontManagerService.serializeSystemServerFontMap();
										FontManagerService.setSerializedFontMap();
										FontManagerService.closeFileDescriptors(p1);
										return 0;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public int updateFontFamily(List p1, int p2){
	if (this.mUpdatableFontDir == 0) {
		if (p2 == -1) {
			int v6 = this.mConfigVersion;
			if (v6 != p2) {
				Iterator v8 = p2.iterator();
				boolean v9 = v8.hasNext();
				if (v9 == 0) {
					ArrayMap v10 = new ArrayMap(this.mFontFileInfoMap);
					PersistentSystemFontConfig$Config v12 = UpdatableFontDir.readPersistentConfig();
					HashMap v13 = new HashMap();
					int v15 = PersistentSystemFontConfig$Config.fontFamilies.size();
					if ( >= v15) {
						Iterator v16 = p2.iterator();
						boolean v17 = v16.hasNext();
						if (v17 == 0) {
							Collection v18 = v13.values();
							Iterator v19 = v18.iterator();
							boolean v20 = v19.hasNext();
							if (v20 == 0) {
								Object v21 = this.mCurrentTimeSupplier.get();
								long v22 = v21.longValue();
								this.mLastModifiedMillis = v22;
								PersistentSystemFontConfig$Config v23 = new PersistentSystemFontConfig$Config();
								PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
								Collection v25 = this.mFontFileInfoMap.values();
								Iterator v26 = v25.iterator();
								boolean v27 = v26.hasNext();
								if (v27 == 0) {
									Collection v28 = v13.values();
									boolean v29 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v28);
									UpdatableFontDir.writePersistentConfig(v23);
									this.mConfigVersion = (this.mConfigVersion + 1);
									FontConfig v32 = FontManagerService.getSystemFontConfig();
									SharedMemory v33 = FontManagerService.serializeFontMap(v32);
									if (v33 != 0) {
										FontManagerService.setSerializedFontMap();
										FontManagerService.closeFileDescriptors(p1);
										return 0;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ArrayMap v10 = new ArrayMap(this.mFontFileInfoMap);\nHashMap v13 = new HashMap();\nPersistentSystemFontConfig$Config v23 = new PersistentSystemFontConfig$Config();\nCollection v28 = v13.values();\nboolean v29 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v28);', 'UpdatableFontDir.readPersistentConfig();\nUpdatableFontDir.writePersistentConfig(v23);', 'FontConfig v32 = FontManagerService.getSystemFontConfig();\nSharedMemory v33 = FontManagerService.serializeFontMap(v32);\nFontManagerService.setSerializedFontMap();\nFontManagerService.closeFileDescriptors(p1);']

The method updateFontFamily has the following similar APIs:

- API Name: getFontConfig()Landroid/text/FontConfig; with Similarity Score: 0.732251763343811
  - Access Control Level: SYS_OR_SIG and the following code:
FontConfig v16 = new FontConfig(v8,v17,this.mLastModifiedMillis,this.mConfigVersion);
return v3;
FontConfig v4 = v16;
FontConfig v3 = v4;

- API Name: getFontConfig()Landroid/text/FontConfig; with Similarity Score: 0.7154408693313599
  - Access Control Level: SYS_OR_SIG and the following code:
FontConfig v16 = new FontConfig(v8,v17,this.mLastModifiedMillis,this.mConfigVersion);
return v3;
FontConfig v4 = v16;
FontConfig v3 = v4;

