The method detectFingerprint has the following code snippet:

This is path 1 for the API with depth 2:
public long detectFingerprint(IBinder p1, int p2, IFingerprintServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if ( == 0) {
				boolean v10 = .equals(p4);
				if (v10 == 0) {
					boolean v4 = ;
					if (v4 != 0) {
						LockPatternUtils v11 = this.mLockPatternUtils;
						int v13 = v11.getStrongAuthForUser(p2);
						if ((v13 & 1) == 0) {
							boolean v14 = ;
							if ((v13 & 2) == 0) {
								boolean v15 = ;
								if (v15 != 0) {
									if ((v13 & 32) == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (v14 != 0) {
												if ( == 0) {
													boolean v12 = ;
													if (v12 != 0) {
														List v27 = FingerprintService.getSensorProperties();
														boolean v28 = v27.isEmpty();
														if (v28 == 0) {
															Object v29 = v27.get(0);
															Iterator v30 = this.mServiceProviders.iterator();
															boolean v31 = v30.hasNext();
															if (v31 == 0) {
																Object v32 = v30.next();
																boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																if (v33 == 0) {
																	Pair v34 = new Pair(v35,v32);
																	Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
																	Pair v26 = v34;
																	Pair v25 = v26;
																	if (v25 != 0) {
																		int v37 = Pair.first.intValue();
																		ClientMonitorCallbackConverter v38 = new ClientMonitorCallbackConverter(p3);
																		long v40 = Pair.second.scheduleFingerDetect(v37, p1, p2, v38, p4, 1);
																		return v40;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public long detectFingerprint(IBinder p1, int p2, IFingerprintServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if ( == 0) {
				boolean v10 = .equals(p4);
				if (v10 == 0) {
					boolean v4 = ;
					if (v4 != 0) {
						LockPatternUtils v11 = this.mLockPatternUtils;
						int v13 = v11.getStrongAuthForUser(p2);
						if ((v13 & 1) == 0) {
							boolean v14 = ;
							if ((v13 & 2) == 0) {
								boolean v15 = ;
								if (v15 != 0) {
									if ((v13 & 32) == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (v14 != 0) {
												if ( == 0) {
													boolean v12 = ;
													if (v12 != 0) {
														List v27 = FingerprintService.getSensorProperties();
														boolean v28 = v27.isEmpty();
														if (v28 == 0) {
															Object v29 = v27.get(0);
															Iterator v30 = this.mServiceProviders.iterator();
															boolean v31 = v30.hasNext();
															if (v31 == 0) {
																Object v32 = v30.next();
																boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																if (v33 == 0) {
																	Pair v34 = new Pair(v35,v32);
																	Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
																	Pair v26 = v34;
																	Pair v25 = v26;
																	if (v25 != 0) {
																		int v37 = Pair.first.intValue();
																		ClientMonitorCallbackConverter v38 = new ClientMonitorCallbackConverter(p3);
																		long v40 = Pair.second.scheduleFingerDetect(v37, p1, p2, v38, p4, 1);
																		return v40;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public long detectFingerprint(IBinder p1, int p2, IFingerprintServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	Resources v6 = v3.getResources();
	String v7 = v6.getString(17039993);
	ComponentName v8 = ComponentName.unflattenFromString(v7);
	if (v8 == 0) {
		String v9 = v8.getPackageName();
		if (v5 == 0) {
			if ( == 0) {
				boolean v10 = .equals(p4);
				if (v10 == 0) {
					boolean v4 = ;
					if (v4 != 0) {
						LockPatternUtils v11 = this.mLockPatternUtils;
						int v13 = v11.getStrongAuthForUser(p2);
						if ((v13 & 1) == 0) {
							boolean v14 = ;
							if ((v13 & 2) == 0) {
								boolean v15 = ;
								if (v15 != 0) {
									if ((v13 & 32) == 0) {
										boolean v16 = ;
										if (v16 == 0) {
											if (v14 != 0) {
												if ( == 0) {
													boolean v12 = ;
													if (v12 != 0) {
														List v27 = FingerprintService.getSensorProperties();
														boolean v28 = v27.isEmpty();
														if (v28 == 0) {
															Object v29 = v27.get(0);
															Iterator v30 = this.mServiceProviders.iterator();
															boolean v31 = v30.hasNext();
															if (v31 == 0) {
																Object v32 = v30.next();
																boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
																if (v33 == 0) {
																	Pair v34 = new Pair(v35,v32);
																	Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
																	Pair v26 = v34;
																	Pair v25 = v26;
																	if (v25 != 0) {
																		return -1;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['LockPatternUtils v11 = this.mLockPatternUtils;\nint v13 = v11.getStrongAuthForUser(p2);\nClientMonitorCallbackConverter v38 = new ClientMonitorCallbackConverter(p3);\nlong v40 = Pair.second.scheduleFingerDetect(v37, p1, p2, v38, p4, 1);\nreturn v40;', 'List v27 = FingerprintService.getSensorProperties();\nIterator v30 = this.mServiceProviders.iterator();\nObject v32 = v30.next();\nPair v34 = new Pair(v35,v32);\nInteger v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);']

The method detectFingerprint has the following similar APIs:

- API Name: detectFace(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)J with Similarity Score: 0.944037675857544
  - Access Control Level: NORMAL and the following code:
LockPatternUtils v11 = this.mLockPatternUtils;
int v13 = v11.getStrongAuthForUser(p2);
ClientMonitorCallbackConverter v38 = new ClientMonitorCallbackConverter(p3);
long v40 = Pair.second.scheduleFaceDetect(v37, p1, p2, v38, p4, 1);
return v40;

- API Name: isHardwareDetectedDeprecated(Ljava/lang/String;Ljava/lang/String;)Z with Similarity Score: 0.9438821077346802
  - Access Control Level: SYS_OR_SIG and the following code:
List v27 = FingerprintService.getSensorProperties();
Object v29 = v27.get(0);
Iterator v30 = this.mServiceProviders.iterator();
Pair v34 = new Pair(v35,v32);
Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
boolean v38 = Pair.second.isHardwareDetected(v37);
return v38;

