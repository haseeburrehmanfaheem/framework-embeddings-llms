This is path 1 for the API with depth 2:
public long enroll(IBinder p1, byte[] p2, int p3, IFingerprintServiceReceiver p4, String p5, int p6){
	List v5 = FingerprintService.getSensorProperties();
	boolean v6 = v5.isEmpty();
	if (v6 == 0) {
		Object v7 = v5.get(0);
		Iterator v8 = this.mServiceProviders.iterator();
		boolean v9 = v8.hasNext();
		if (v9 == 0) {
			Object v10 = v8.next();
			boolean v11 = v10.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
			if (v11 == 0) {
				Pair v12 = new Pair(v13,v10);
				Integer v13 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
				Pair v4 = v12;
				Pair v3 = v4;
				if (v3 != 0) {
					int v15 = Pair.first.intValue();
					long v16 = Pair.second.scheduleEnroll(v15, p1, p2, p3, p4, p5, p6);
					return v16;
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public long enroll(IBinder p1, byte[] p2, int p3, IFingerprintServiceReceiver p4, String p5, int p6){
	List v5 = FingerprintService.getSensorProperties();
	boolean v6 = v5.isEmpty();
	if (v6 == 0) {
		Object v7 = v5.get(0);
		Iterator v8 = this.mServiceProviders.iterator();
		boolean v9 = v8.hasNext();
		if (v9 == 0) {
			Object v10 = v8.next();
			boolean v11 = v10.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
			if (v11 == 0) {
				Pair v12 = new Pair(v13,v10);
				Integer v13 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
				Pair v4 = v12;
				Pair v3 = v4;
				if (v3 != 0) {
					return -1;
				}
			}
		}
	}
}
