This is path 1 for the API with depth 2:
public long authenticate(IBinder p1, long p2, int p3, int p4, IFingerprintServiceReceiver p5, String p6, String p7, boolean p8){
	if (v12 == 0) {
		if (p3 != -1) {
			List v15 = FingerprintService.getSensorProperties();
			boolean v16 = v15.isEmpty();
			if (v16 == 0) {
				Object v17 = v15.get(0);
				Iterator v18 = this.mServiceProviders.iterator();
				boolean v19 = v18.hasNext();
				if (v19 == 0) {
					Object v20 = v18.next();
					boolean v21 = v20.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
					if (v21 == 0) {
						Pair v22 = new Pair(v23,v20);
						Integer v23 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
						Pair v14 = v22;
						Pair v13 = v14;
						if ( != 0) {
							FingerprintSensorPropertiesInternal v25 = Pair.second.getSensorProperties(p3);
							if (v6 != 0) {
								Context v26 = this.this$0.getContext();
								boolean v27 = Utils.isSettings(v26, p6);
								if (v27 != 0) {
									if (v25 == 0) {
										boolean v28 = v25.isAnyUdfpsType();
										if (v28 == 0) {
											Context v30 = this.this$0.getUiContext();
											UserHandle v31 = UserHandle.getUserHandleForUid(v1);
											Context v32 = v30.createPackageContextAsUser(p6, 0, v31);
											Executor v33 = v30.getMainExecutor();
											BiometricPrompt$Builder v34 = new BiometricPrompt$Builder(v32);
											String v36 = v30.getString(17039805);
											this.mPromptInfo.setTitle(v36);
											BiometricPrompt$Builder v37 = BiometricPrompt$Builder;
											String v39 = v30.getString(17040346);
											this.mPromptInfo.setSubtitle(v39);
											BiometricPrompt$Builder v40 = BiometricPrompt$Builder;
											String v42 = v30.getString(17039360);
											FingerprintService$FingerprintServiceWrapper$$ExternalSyntheticLambda1 v43 = new FingerprintService$FingerprintServiceWrapper$$ExternalSyntheticLambda1(p5);
											boolean v46 = TextUtils.isEmpty(v42);
											if (v46 != 0) {
												if (v33 == 0) {
													if (v43 == 0) {
														this.mPromptInfo.setNegativeButtonText(v42);
														BiometricPrompt$ButtonInfo v48 = new BiometricPrompt$ButtonInfo(v33,v43);
														this.mNegativeButtonInfo = v48;
														BiometricPrompt$Builder v45 = BiometricPrompt$Builder;
														this.mPromptInfo.setIsForLegacyFingerprintManager(FingerprintSensorPropertiesInternal.sensorId);
														BiometricPrompt$Builder v50 = BiometricPrompt$Builder;
														this.mPromptInfo.setIgnoreEnrollmentState(p7);
														BiometricPrompt$Builder v52 = BiometricPrompt$Builder;
														CharSequence v55 = this.mPromptInfo.getTitle();
														CharSequence v56 = this.mPromptInfo.getNegativeButtonText();
														boolean v57 = this.mPromptInfo.isUseDefaultTitle();
														boolean v58 = this.mPromptInfo.isDeviceCredentialAllowed();
														int v59 = this.mPromptInfo.getAuthenticators();
														if (v58 != 0) {
															boolean v60 = BiometricPrompt.-$$Nest$smisCredentialAllowed(v59);
															if (v60 == 0) {
																boolean v61 = TextUtils.isEmpty(v55);
																if (v61 == 0) {
																	if (v57 == 0) {
																		boolean v62 = TextUtils.isEmpty(v56);
																		if (v62 == 0) {
																			if ( == 0) {
																				boolean v63 = TextUtils.isEmpty(v56);
																				if (v63 != 0) {
																					if ( != 0) {
																						BiometricPrompt v64 = new BiometricPrompt(this.mContext,this.mPromptInfo,this.mNegativeButtonInfo,0);
																						BiometricPrompt v54 = v64;
																						FingerprintService$FingerprintServiceWrapper$1 v66 = new FingerprintService$FingerprintServiceWrapper$1(FingerprintService$FingerprintServiceWrapper,p5,v25,v3);
																						CancellationSignal v68 = new CancellationSignal();
																						if (v68 == 0) {
																							if (v33 == 0) {
																								if (v66 == 0) {
																									int v71 = this.mContext.getUserId();
																									long v72 = BiometricPrompt.authenticateInternal(p1, v68, v33, v66, v71);
																									long v70 = v72;
																									long v29 = v70;
																									return v29;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public long authenticate(IBinder p1, long p2, int p3, int p4, IFingerprintServiceReceiver p5, String p6, String p7, boolean p8){
	if (v12 == 0) {
		if (p3 != -1) {
			List v15 = FingerprintService.getSensorProperties();
			boolean v16 = v15.isEmpty();
			if (v16 == 0) {
				Object v17 = v15.get(0);
				Iterator v18 = this.mServiceProviders.iterator();
				boolean v19 = v18.hasNext();
				if (v19 == 0) {
					Object v20 = v18.next();
					boolean v21 = v20.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
					if (v21 == 0) {
						Pair v22 = new Pair(v23,v20);
						Integer v23 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
						Pair v14 = v22;
						Pair v13 = v14;
						if ( != 0) {
							return -1;
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public long authenticate(IBinder p1, long p2, int p3, int p4, IFingerprintServiceReceiver p5, String p6, String p7, boolean p8){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							return -1;
						}
					}
				}
			}
		}
	}
}
