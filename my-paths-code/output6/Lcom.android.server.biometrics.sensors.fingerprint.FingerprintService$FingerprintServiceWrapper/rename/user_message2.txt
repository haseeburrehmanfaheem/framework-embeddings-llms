The method rename has the following code snippet:

This is path 1 for the API with depth 2:
public void rename(int p1, int p2, String p3){
	Context v3 = this.this$0.getContext();
	UserManager v5 = UserManager.get(v3);
	if (v5 != 0) {
		long v6 = Binder.clearCallingIdentity();
		int v7 = ActivityManager.getCurrentUser();
		[I v8 = v5.getEnabledProfileIds(v7);
		if ( >= v8.length) {
			Binder.restoreCallingIdentity(v6);
			boolean v4 = 0;
			if (v4 != 0) {
				List v12 = FingerprintService.getSensorProperties();
				boolean v13 = v12.isEmpty();
				if (v13 == 0) {
					Object v14 = v12.get(0);
					Iterator v15 = this.mServiceProviders.iterator();
					boolean v16 = v15.hasNext();
					if (v16 == 0) {
						Object v17 = v15.next();
						boolean v18 = v17.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
						if (v18 == 0) {
							Pair v19 = new Pair(v20,v17);
							Integer v20 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
							Pair v11 = v19;
							Pair v10 = v11;
							if (v10 != 0) {
								int v22 = Pair.first.intValue();
								Pair.second.rename(v22, p1, p2, p3);
								return;
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void rename(int p1, int p2, String p3){
	Context v3 = this.this$0.getContext();
	UserManager v5 = UserManager.get(v3);
	if (v5 != 0) {
		long v6 = Binder.clearCallingIdentity();
		int v7 = ActivityManager.getCurrentUser();
		[I v8 = v5.getEnabledProfileIds(v7);
		if ( >= v8.length) {
			Binder.restoreCallingIdentity(v6);
			boolean v4 = 0;
			if (v4 != 0) {
				List v12 = FingerprintService.getSensorProperties();
				boolean v13 = v12.isEmpty();
				if (v13 == 0) {
					Object v14 = v12.get(0);
					Iterator v15 = this.mServiceProviders.iterator();
					boolean v16 = v15.hasNext();
					if (v16 == 0) {
						Object v17 = v15.next();
						boolean v18 = v17.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
						if (v18 == 0) {
							Pair v19 = new Pair(v20,v17);
							Integer v20 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
							Pair v11 = v19;
							Pair v10 = v11;
							if (v10 != 0) {
								return;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Pair v19 = new Pair(v20,v17);\nInteger v20 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);\nPair v11 = v19;\nPair v10 = v11;\nif (v10 != 0) {\nint v22 = Pair.first.intValue();\nPair.second.rename(v22, p1, p2, p3);']

The method rename has the following similar APIs:

- API Name: detectFingerprint(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;)J with Similarity Score: 0.8256891965866089
  - Access Control Level: NORMAL and the following code:
List v27 = FingerprintService.getSensorProperties();
Iterator v30 = this.mServiceProviders.iterator();
Object v32 = v30.next();
Pair v34 = new Pair(v35,v32);
Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);

- API Name: isHardwareDetectedDeprecated(Ljava/lang/String;Ljava/lang/String;)Z with Similarity Score: 0.809049129486084
  - Access Control Level: SYS_OR_SIG and the following code:
List v27 = FingerprintService.getSensorProperties();
Object v29 = v27.get(0);
Iterator v30 = this.mServiceProviders.iterator();
Pair v34 = new Pair(v35,v32);
Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
boolean v38 = Pair.second.isHardwareDetected(v37);
return v38;

