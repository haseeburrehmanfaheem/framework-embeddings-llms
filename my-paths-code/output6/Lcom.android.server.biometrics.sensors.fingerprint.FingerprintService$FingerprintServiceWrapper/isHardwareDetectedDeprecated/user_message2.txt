The method isHardwareDetectedDeprecated has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							long v24 = Binder.clearCallingIdentity();
							List v27 = FingerprintService.getSensorProperties();
							boolean v28 = v27.isEmpty();
							if (v28 == 0) {
								Object v29 = v27.get(0);
								Iterator v30 = this.mServiceProviders.iterator();
								boolean v31 = v30.hasNext();
								if (v31 == 0) {
									Object v32 = v30.next();
									boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v33 == 0) {
										Pair v34 = new Pair(v35,v32);
										Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
										Pair v26 = v34;
										Pair v25 = v26;
										if (v25 != 0) {
											Binder.restoreCallingIdentity(v24);
											return 0;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							long v24 = Binder.clearCallingIdentity();
							List v27 = FingerprintService.getSensorProperties();
							boolean v28 = v27.isEmpty();
							if (v28 == 0) {
								Object v29 = v27.get(0);
								Iterator v30 = this.mServiceProviders.iterator();
								boolean v31 = v30.hasNext();
								if (v31 == 0) {
									Object v32 = v30.next();
									boolean v33 = v32.containsSensor(FingerprintSensorPropertiesInternal.sensorId);
									if (v33 == 0) {
										Pair v34 = new Pair(v35,v32);
										Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
										Pair v26 = v34;
										Pair v25 = v26;
										if (v25 != 0) {
											int v37 = Pair.first.intValue();
											boolean v38 = Pair.second.isHardwareDetected(v37);
											Binder.restoreCallingIdentity(v24);
											return v38;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean isHardwareDetectedDeprecated(String p1, String p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = UserHandle.getCallingUserId();
	Context v11 = FingerprintService.getContext();
	boolean v12 = Utils.isKeyguard(v11, p2);
	if (v12 == 0) {
		Context v13 = FingerprintService.getContext();
		boolean v14 = Utils.isCurrentUserOrProfile(v13, p7);
		if (v14 != 0) {
			boolean v15 = FingerprintService.checkAppOps(p5, p2, p3);
			if (v15 != 0) {
				if (p4 == 0) {
					boolean v16 = Utils.isForeground(p5, p6);
					if (v16 != 0) {
						boolean v5 = 0;
						boolean v4 = v5;
						if (v4 != 0) {
							return 0;
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v27 = FingerprintService.getSensorProperties();\nObject v29 = v27.get(0);\nIterator v30 = this.mServiceProviders.iterator();\nPair v34 = new Pair(v35,v32);\nInteger v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);\nboolean v38 = Pair.second.isHardwareDetected(v37);\nreturn v38;']

The method isHardwareDetectedDeprecated has the following similar APIs:

- API Name: detectFingerprint(Landroid/os/IBinder;ILandroid/hardware/fingerprint/IFingerprintServiceReceiver;Ljava/lang/String;)J with Similarity Score: 0.9438821077346802
  - Access Control Level: NORMAL and the following code:
List v27 = FingerprintService.getSensorProperties();
Iterator v30 = this.mServiceProviders.iterator();
Object v32 = v30.next();
Pair v34 = new Pair(v35,v32);
Integer v35 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);

- API Name: cancelFingerprintDetect(Landroid/os/IBinder;Ljava/lang/String;J)V with Similarity Score: 0.8696800470352173
  - Access Control Level: NORMAL and the following code:
List v13 = FingerprintService.getSensorProperties();
Object v15 = v13.get(0);
Iterator v16 = this.mServiceProviders.iterator();
Pair v20 = new Pair(v21,v18);
Integer v21 = Integer.valueOf(FingerprintSensorPropertiesInternal.sensorId);
int v23 = Pair.first.intValue();
Pair.second.cancelAuthentication(v23, p1, p3);

