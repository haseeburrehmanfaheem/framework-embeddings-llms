This is path 1 for the API with depth 2:
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("finishSession: response ");
		StringBuilder v7 = v4.append(p1);
		StringBuilder v8 = v4.append(", expectActivityLaunch ");
		StringBuilder v9 = v4.append(p3);
		StringBuilder v10 = v4.append(", caller's uid ");
		StringBuilder v11 = v4.append(v2);
		StringBuilder v12 = v4.append(", caller's user id ");
		int v13 = UserHandle.getCallingUserId();
		StringBuilder v14 = v4.append(v13);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		StringBuilder v18 = v4.append(", for user id ");
		StringBuilder v19 = v4.append(p5);
		String v20 = v4.toString();
		int v21 = Log.v("AccountManagerService", v20);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				int v23 = p2.size();
				if (v23 == 0) {
					if (v26 == 0) {
						boolean v24 = ;
						if (v24 != 0) {
							Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
							if (v29 == 0) {
								boolean v30 = v29.isActiveProfileOwner(p2);
								if (v30 != 0) {
									boolean v31 = v29.isActiveDeviceOwner(p2);
									if (v31 == 0) {
										boolean v28 = ;
										if (v28 == 0) {
											UserManager v32 = AccountManagerService.getUserManager();
											UserHandle v33 = new UserHandle(p5);
											Bundle v35 = v32.getUserRestrictions(v33);
											boolean v36 = v35.getBoolean("no_modify_accounts");
											if (v36 == 0) {
												boolean v27 = 0;
												if (v27 != 0) {
													p0.sendErrorResponse(p1, 100, "User is not allowed to add an account!");
													Object v40 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
													Object v39 = v40;
													if (v39 != 0) {
														Intent v42 = new Intent(this.mContext,CantAddAccountActivit.class);
														Intent v44 = v42.putExtra("android.accounts.extra.ERROR_CODE", p1);
														Intent v45 = v42.addFlags(268435456);
														Intent v41 = v42;
														if ( != 0) {
															Intent v47 = new Intent(this.mContext,CantAddAccountActivit.class);
															Intent v49 = v47.putExtra("android.accounts.extra.ERROR_CODE", p1);
															Intent v50 = v47.addFlags(268435456);
															Intent v46 = v47;
															long v51 = IAccountManager$Stub.clearCallingIdentity();
															UserHandle v52 = new UserHandle(p5);
															this.mContext.startActivityAsUser(, v52);
															IAccountManager$Stub.restoreCallingIdentity(v51);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("finishSession: response ");
		StringBuilder v7 = v4.append(p1);
		StringBuilder v8 = v4.append(", expectActivityLaunch ");
		StringBuilder v9 = v4.append(p3);
		StringBuilder v10 = v4.append(", caller's uid ");
		StringBuilder v11 = v4.append(v2);
		StringBuilder v12 = v4.append(", caller's user id ");
		int v13 = UserHandle.getCallingUserId();
		StringBuilder v14 = v4.append(v13);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		StringBuilder v18 = v4.append(", for user id ");
		StringBuilder v19 = v4.append(p5);
		String v20 = v4.toString();
		int v21 = Log.v("AccountManagerService", v20);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				int v23 = p2.size();
				if (v23 == 0) {
					if (v26 == 0) {
						boolean v24 = ;
						if (v24 != 0) {
							Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
							if (v29 == 0) {
								boolean v30 = v29.isActiveProfileOwner(p2);
								if (v30 != 0) {
									boolean v31 = v29.isActiveDeviceOwner(p2);
									if (v31 == 0) {
										boolean v28 = ;
										if (v28 == 0) {
											UserManager v32 = AccountManagerService.getUserManager();
											UserHandle v33 = new UserHandle(p5);
											Bundle v35 = v32.getUserRestrictions(v33);
											boolean v36 = v35.getBoolean("no_modify_accounts");
											if (v36 == 0) {
												boolean v27 = 1;
												if (v27 != 0) {
													p0.sendErrorResponse(p1, 100, "User is not allowed to add an account!");
													Object v40 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
													Object v39 = v40;
													if (v39 != 0) {
														Intent v42 = new Intent(this.mContext,CantAddAccountActivit.class);
														Intent v44 = v42.putExtra("android.accounts.extra.ERROR_CODE", p1);
														Intent v45 = v42.addFlags(268435456);
														Intent v41 = v42;
														if ( != 0) {
															Intent v47 = new Intent(this.mContext,CantAddAccountActivit.class);
															Intent v49 = v47.putExtra("android.accounts.extra.ERROR_CODE", p1);
															Intent v50 = v47.addFlags(268435456);
															Intent v46 = v47;
															long v51 = IAccountManager$Stub.clearCallingIdentity();
															UserHandle v52 = new UserHandle(p5);
															this.mContext.startActivityAsUser(, v52);
															IAccountManager$Stub.restoreCallingIdentity(v51);
															return;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void finishSessionAsUser(IAccountManagerResponse p1, Bundle p2, boolean p3, Bundle p4, int p5){
	Bundle v1 = Bundle.setDefusable(p2, 1);
	int v2 = Binder.getCallingUid();
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("finishSession: response ");
		StringBuilder v7 = v4.append(p1);
		StringBuilder v8 = v4.append(", expectActivityLaunch ");
		StringBuilder v9 = v4.append(p3);
		StringBuilder v10 = v4.append(", caller's uid ");
		StringBuilder v11 = v4.append(v2);
		StringBuilder v12 = v4.append(", caller's user id ");
		int v13 = UserHandle.getCallingUserId();
		StringBuilder v14 = v4.append(v13);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		StringBuilder v18 = v4.append(", for user id ");
		StringBuilder v19 = v4.append(p5);
		String v20 = v4.toString();
		int v21 = Log.v("AccountManagerService", v20);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				int v23 = p2.size();
				if (v23 == 0) {
					if (v26 == 0) {
						boolean v24 = ;
						if (v24 != 0) {
							Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
							if (v29 == 0) {
								boolean v30 = v29.isActiveProfileOwner(p2);
								if (v30 != 0) {
									boolean v31 = v29.isActiveDeviceOwner(p2);
									if (v31 == 0) {
										boolean v28 = ;
										if (v28 == 0) {
											UserManager v32 = AccountManagerService.getUserManager();
											UserHandle v33 = new UserHandle(p5);
											Bundle v35 = v32.getUserRestrictions(v33);
											boolean v36 = v35.getBoolean("no_modify_accounts");
											if (v36 == 0) {
												boolean v27 = 0;
												if (v27 != 0) {
													int v37 = Binder.getCallingPid();
													CryptoHelper v38 = CryptoHelper.getInstance();
													Object v40 = Objects.requireNonNull(p2, "Cannot decrypt null bundle.");
													byte[] v41 = p2.getByteArray("iv");
													byte[] v42 = p2.getByteArray("cipher");
													byte[] v43 = p2.getByteArray("mac");
													if (v42 == 0) {
														if (v42.length == 0) {
															if (v43 == 0) {
																if (v43.length != 0) {
																	boolean v45 = Log.isLoggable("Account", 2);
																	if (v45 == 0) {
																		int v46 = Log.v("Account", "Cipher or MAC is empty!");
																		boolean v44 = 0;
																		if (v44 != 0) {
																			IvParameterSpec v47 = new IvParameterSpec(v41);
																			Cipher v49 = Cipher.getInstance("AES/CBC/PKCS5Padding");
																			v49.init(2, this.mEncryptionKey, v47);
																			byte[] v51 = v49.doFinal(v42);
																			Parcel v52 = Parcel.obtain();
																			v52.unmarshall(v51, 0, v51.length);
																			v52.setDataPosition(0);
																			Bundle v55 = new Bundle();
																			v55.readFromParcel(v52);
																			v52.recycle();
																			Bundle v39 = v55;
																			boolean v59 = Log.isLoggable("AccountManagerService", 3);
																			if (v59 == 0) {
																				int v60 = Log.v("AccountManagerService", "Failed to decrypt session bundle!", caughtException);
																				p0.sendErrorResponse(p1, 8, "failed to decrypt session bundle");
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
