This is path 1 for the API with depth 2:
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("clearPassword: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", caller's uid ");
		StringBuilder v8 = v3.append(v1);
		StringBuilder v9 = v3.append(", pid ");
		int v10 = Binder.getCallingPid();
		StringBuilder v11 = v3.append(v10);
		String v12 = v3.toString();
		int v13 = Log.v("AccountManagerService", v12);
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v17 = v18;
			boolean v19 = v17.contains(Account.type);
			boolean v16 = v19;
			if (v16 == 0) {
				long v20 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
				if (p1 != 0) {
					SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
					v24.beginTransaction();
					SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabase();
					String v28 = new String(1);
					String v29 = new String(2);
					Cursor v30 = v27.query("accounts", v28, "name=? AND type=?", v29, 0, 0, 0);
					boolean v31 = v30.moveToNext();
					if (v31 == 0) {
						long v32 = v30.getLong(0);
						v30.close();
						long v26 = v32;
						if ((v26 < 0) < 0) {
							SQLiteDatabase v35 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							ContentValues v36 = new ContentValues();
							v36.put("password", p3);
							String v39 = new String(1);
							String v40 = String.valueOf(v26);
							int v41 = v35.update("ceDb.accounts", v36, "_id=?", v39);
							int v34 = v41;
							SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							String v44 = new String(1);
							String v45 = String.valueOf(v26);
							int v46 = v43.delete("ceDb.authtokens", "accounts_id=?", v44);
							if (v46 <= 0) {
								boolean v42 = ;
								Map v47 = this.authTokenCache;
								Object v48 = v47.remove(p1);
								TokenCache v49 = this.accountTokenCaches;
								this.mCachedTokens.evict(p2);
								SQLiteDatabase v53 = this.mDeDatabase.getWritableDatabase();
								v53.setTransactionSuccessful();
								if (0 == 0) {
									int v55 = 0.length();
									if (v55 != 0) {
										long v57 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
										if ((v57 < -1) == 0) {
											AccountManagerService$1LogRecordTask v58 = new AccountManagerService$1LogRecordTask(AccountManagerService,,"accounts",v26,p1,p4,v57);
											boolean v60 = this.mHandler.post(v58);
											SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabase();
											v62.endTransaction();
											if ( == 0) {
												Map v65 = AccountManagerService.getRequestingPackages(p2, p1);
												Set v66 = v65.entrySet();
												Iterator v67 = v66.iterator();
												boolean v68 = v67.hasNext();
												if (v68 == 0) {
													int v69 = this.userId;
													StringBuilder v71 = new StringBuilder();
													StringBuilder v73 = v71.append("the accounts changed, sending broadcast of ");
													String v74 = this.ACCOUNTS_CHANGED_INTENT.getAction();
													StringBuilder v75 = v71.append(v74);
													String v76 = v71.toString();
													int v77 = Log.i("AccountManagerService", v76);
													UserHandle v78 = new UserHandle(v69);
													this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v78);
													IAccountManager$Stub.restoreCallingIdentity(v20);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("clearPassword: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", caller's uid ");
		StringBuilder v8 = v3.append(v1);
		StringBuilder v9 = v3.append(", pid ");
		int v10 = Binder.getCallingPid();
		StringBuilder v11 = v3.append(v10);
		String v12 = v3.toString();
		int v13 = Log.v("AccountManagerService", v12);
		Object v14 = Objects.requireNonNull(p1, "account cannot be null");
		int v15 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v17 = v18;
			boolean v19 = v17.contains(Account.type);
			boolean v16 = v19;
			if (v16 == 0) {
				long v20 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v21 = p0.getUserAccounts(v15);
				if (p1 != 0) {
					SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabase();
					v24.beginTransaction();
					SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabase();
					String v28 = new String(1);
					String v29 = new String(2);
					Cursor v30 = v27.query("accounts", v28, "name=? AND type=?", v29, 0, 0, 0);
					boolean v31 = v30.moveToNext();
					if (v31 == 0) {
						long v32 = v30.getLong(0);
						v30.close();
						long v26 = v32;
						if ((v26 < 0) < 0) {
							SQLiteDatabase v35 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							ContentValues v36 = new ContentValues();
							v36.put("password", p3);
							String v39 = new String(1);
							String v40 = String.valueOf(v26);
							int v41 = v35.update("ceDb.accounts", v36, "_id=?", v39);
							int v34 = v41;
							SQLiteDatabase v43 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							String v44 = new String(1);
							String v45 = String.valueOf(v26);
							int v46 = v43.delete("ceDb.authtokens", "accounts_id=?", v44);
							if (v46 <= 0) {
								boolean v42 = ;
								Map v47 = this.authTokenCache;
								Object v48 = v47.remove(p1);
								TokenCache v49 = this.accountTokenCaches;
								this.mCachedTokens.evict(p2);
								SQLiteDatabase v53 = this.mDeDatabase.getWritableDatabase();
								v53.setTransactionSuccessful();
								if (0 == 0) {
									int v55 = 0.length();
									if (v55 != 0) {
										long v57 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
										if ((v57 < -1) == 0) {
											AccountManagerService$1LogRecordTask v58 = new AccountManagerService$1LogRecordTask(AccountManagerService,,"accounts",v26,p1,p4,v57);
											boolean v60 = this.mHandler.post(v58);
											SQLiteDatabase v62 = this.mDeDatabase.getWritableDatabase();
											v62.endTransaction();
											if ( == 0) {
												Map v65 = AccountManagerService.getRequestingPackages(p2, p1);
												Set v66 = v65.entrySet();
												Iterator v67 = v66.iterator();
												boolean v68 = v67.hasNext();
												if (v68 == 0) {
													int v69 = this.userId;
													StringBuilder v71 = new StringBuilder();
													StringBuilder v73 = v71.append("the accounts changed, sending broadcast of ");
													String v74 = this.ACCOUNTS_CHANGED_INTENT.getAction();
													StringBuilder v75 = v71.append(v74);
													String v76 = v71.toString();
													int v77 = Log.i("AccountManagerService", v76);
													UserHandle v78 = new UserHandle(v69);
													this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v78);
													IAccountManager$Stub.restoreCallingIdentity(v20);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void clearPassword(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = Objects.requireNonNull(p1, "account cannot be null");
		int v4 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v6 = v7;
			boolean v8 = v6.contains(Account.type);
			boolean v5 = v8;
			if (v5 == 0) {
				long v9 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v4);
				if (p1 != 0) {
					SQLiteDatabase v13 = this.mDeDatabase.getWritableDatabase();
					v13.beginTransaction();
					SQLiteDatabase v16 = this.mDeDatabase.getReadableDatabase();
					String v17 = new String(1);
					String v18 = new String(2);
					Cursor v19 = v16.query("accounts", v17, "name=? AND type=?", v18, 0, 0, 0);
					boolean v20 = v19.moveToNext();
					if (v20 == 0) {
						long v21 = v19.getLong(0);
						v19.close();
						long v15 = v21;
						if ((v15 < 0) < 0) {
							SQLiteDatabase v24 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							ContentValues v25 = new ContentValues();
							v25.put("password", p3);
							String v28 = new String(1);
							String v29 = String.valueOf(v15);
							int v30 = v24.update("ceDb.accounts", v25, "_id=?", v28);
							int v23 = v30;
							SQLiteDatabase v32 = this.mDeDatabase.getWritableDatabaseUserIsUnlocked();
							String v33 = new String(1);
							String v34 = String.valueOf(v15);
							int v35 = v32.delete("ceDb.authtokens", "accounts_id=?", v33);
							if (v35 <= 0) {
								boolean v31 = ;
								Map v36 = this.authTokenCache;
								Object v37 = v36.remove(p1);
								TokenCache v38 = this.accountTokenCaches;
								this.mCachedTokens.evict(p2);
								SQLiteDatabase v42 = this.mDeDatabase.getWritableDatabase();
								v42.setTransactionSuccessful();
								if (0 == 0) {
									int v44 = 0.length();
									if (v44 != 0) {
										long v46 = AccountManagerService$UserAccounts.accountsDb.reserveDebugDbInsertionPoint();
										if ((v46 < -1) == 0) {
											AccountManagerService$1LogRecordTask v47 = new AccountManagerService$1LogRecordTask(AccountManagerService,,"accounts",v15,p1,p4,v46);
											boolean v49 = this.mHandler.post(v47);
											SQLiteDatabase v51 = this.mDeDatabase.getWritableDatabase();
											v51.endTransaction();
											if ( == 0) {
												Map v54 = AccountManagerService.getRequestingPackages(p2, p1);
												Set v55 = v54.entrySet();
												Iterator v56 = v55.iterator();
												boolean v57 = v56.hasNext();
												if (v57 == 0) {
													int v58 = this.userId;
													StringBuilder v60 = new StringBuilder();
													StringBuilder v62 = v60.append("the accounts changed, sending broadcast of ");
													String v63 = this.ACCOUNTS_CHANGED_INTENT.getAction();
													StringBuilder v64 = v60.append(v63);
													String v65 = v60.toString();
													int v66 = Log.i("AccountManagerService", v65);
													UserHandle v67 = new UserHandle(v58);
													this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v67);
													IAccountManager$Stub.restoreCallingIdentity(v9);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
