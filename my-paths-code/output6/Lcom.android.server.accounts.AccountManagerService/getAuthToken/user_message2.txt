The method getAuthToken has the following code snippet:

This is path 1 for the API with depth 0:
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("getAuthToken: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", notifyOnAuthFailure ");
		StringBuilder v12 = v3.append(p4);
		StringBuilder v13 = v3.append(", expectActivityLaunch ");
		StringBuilder v14 = v3.append(p5);
		StringBuilder v15 = v3.append(", caller's uid ");
		int v16 = Binder.getCallingUid();
		StringBuilder v17 = v3.append(v16);
		StringBuilder v18 = v3.append(", pid ");
		int v19 = Binder.getCallingPid();
		StringBuilder v20 = v3.append(v19);
		String v21 = v3.toString();
		int v22 = Log.v("AccountManagerService", v21);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 != 0) {
				p1.onError(7, "account is null");
				return;
			}
		}
	}
}
This is path 2 for the API with depth 0:
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("getAuthToken: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", notifyOnAuthFailure ");
		StringBuilder v12 = v3.append(p4);
		StringBuilder v13 = v3.append(", expectActivityLaunch ");
		StringBuilder v14 = v3.append(p5);
		StringBuilder v15 = v3.append(", caller's uid ");
		int v16 = Binder.getCallingUid();
		StringBuilder v17 = v3.append(v16);
		StringBuilder v18 = v3.append(", pid ");
		int v19 = Binder.getCallingPid();
		StringBuilder v20 = v3.append(v19);
		String v21 = v3.toString();
		int v22 = Log.v("AccountManagerService", v21);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 != 0) {
				p1.onError(7, "account is null");
				return;
			}
		}
	}
}
This is path 3 for the API with depth 0:
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("getAuthToken: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", notifyOnAuthFailure ");
		StringBuilder v12 = v3.append(p4);
		StringBuilder v13 = v3.append(", expectActivityLaunch ");
		StringBuilder v14 = v3.append(p5);
		StringBuilder v15 = v3.append(", caller's uid ");
		int v16 = Binder.getCallingUid();
		StringBuilder v17 = v3.append(v16);
		StringBuilder v18 = v3.append(", pid ");
		int v19 = Binder.getCallingPid();
		StringBuilder v20 = v3.append(v19);
		String v21 = v3.toString();
		int v22 = Log.v("AccountManagerService", v21);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 != 0) {
				if (p3 != 0) {
					p1.onError(7, "authTokenType is null");
					return;
				}
			}
		}
	}
}
This is path 4 for the API with depth 0:
public void getAuthToken(IAccountManagerResponse p1, Account p2, String p3, boolean p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("getAuthToken: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", notifyOnAuthFailure ");
		StringBuilder v12 = v3.append(p4);
		StringBuilder v13 = v3.append(", expectActivityLaunch ");
		StringBuilder v14 = v3.append(p5);
		StringBuilder v15 = v3.append(", caller's uid ");
		int v16 = Binder.getCallingUid();
		StringBuilder v17 = v3.append(v16);
		StringBuilder v18 = v3.append(", pid ");
		int v19 = Binder.getCallingPid();
		StringBuilder v20 = v3.append(v19);
		String v21 = v3.toString();
		int v22 = Log.v("AccountManagerService", v21);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 != 0) {
				if (p3 != 0) {
					p1.onError(7, "authTokenType is null");
					return;
				}
			}
		}
	}
}

and the following sink code:
['Bundle v1 = Bundle.setDefusable(p6, 1);']

The method getAuthToken has the following similar APIs:

- API Name: addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/lang/String;)Z with Similarity Score: 0.7907572388648987
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v2 = Bundle.setDefusable(p3, 1);
List v19 = AccountManagerService.getTypesManagedByCaller(v3, v4);
boolean v20 = v19.contains(Account.type);
AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v4);
Bundle v25 = Bundle.setDefusable(p3, 1);

- API Name: finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V with Similarity Score: 0.7676125764846802
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v1 = Bundle.setDefusable(p2, 1);
Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
boolean v30 = v29.isActiveProfileOwner(p2);
boolean v31 = v29.isActiveDeviceOwner(p2);

