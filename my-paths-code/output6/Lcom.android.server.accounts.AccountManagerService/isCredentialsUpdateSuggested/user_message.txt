This is path 1 for the API with depth 2:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable("AccountManagerService", 2);
	if (v1 == 0) {
		StringBuilder v2 = new StringBuilder();
		StringBuilder v4 = v2.append("isCredentialsUpdateSuggested: ");
		StringBuilder v5 = v2.append(p2);
		StringBuilder v6 = v2.append(", response ");
		StringBuilder v7 = v2.append(p1);
		StringBuilder v8 = v2.append(", caller's uid ");
		int v9 = Binder.getCallingUid();
		StringBuilder v10 = v2.append(v9);
		StringBuilder v11 = v2.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v2.append(v12);
		String v14 = v2.toString();
		int v15 = Log.v("AccountManagerService", v14);
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v16 = TextUtils.isEmpty(p3);
				if (v16 != 0) {
					int v17 = UserHandle.getCallingUserId();
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
					AccountManagerService$UserAccounts v19 = v20;
					AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
					boolean v24 = Log.isLoggable("AccountManagerService", 2);
					if (v24 == 0) {
						StringBuilder v25 = new StringBuilder();
						StringBuilder v27 = v25.append("initiating bind to authenticator type ");
						StringBuilder v28 = v25.append(this.mAccountType);
						String v29 = v25.toString();
						int v30 = Log.v("AccountManagerService", v29);
						IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
						AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
						int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);
						if (v35 != 0) {
							int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							boolean v37 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v36);
							if (v37 != 0) {
								if (ComponentInfo.directBootAware != 0) {
									boolean v31 = 0;
									if (v31 != 0) {
										StringBuilder v45 = new StringBuilder();
										StringBuilder v47 = v45.append("bind attempt failed for ");
										long v49 = SystemClock.elapsedRealtime();
										String v50 = AccountManagerService$Session.toDebugString(v49);
										String v48 = v50;
										StringBuilder v51 = v45.append(v48);
										String v52 = v45.toString();
										int v53 = Log.d("AccountManagerService", v52);
										this.mNumErrors = (this.mNumErrors + 1);
										IAccountManagerResponse v55 = AccountManagerService$Session.getResponseAndClose();
										if (v55 == 0) {
											boolean v56 = Log.isLoggable("AccountManagerService", 2);
											if (v56 == 0) {
												StringBuilder v57 = new StringBuilder();
												Class v59 = AccountManagerService$Session.getClass();
												String v60 = v59.getSimpleName();
												StringBuilder v61 = v57.append(v60);
												StringBuilder v62 = v57.append(" calling onError() on response ");
												StringBuilder v63 = v57.append(v55);
												String v64 = v57.toString();
												int v65 = Log.v("AccountManagerService", v64);
												v55.onError(1, "bind failure");
												boolean v67 = Log.isLoggable("AccountManagerService", 2);
												if (v67 == 0) {
													int v68 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
													IAccountManager$Stub.restoreCallingIdentity(v18);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable("AccountManagerService", 2);
	if (v1 == 0) {
		StringBuilder v2 = new StringBuilder();
		StringBuilder v4 = v2.append("isCredentialsUpdateSuggested: ");
		StringBuilder v5 = v2.append(p2);
		StringBuilder v6 = v2.append(", response ");
		StringBuilder v7 = v2.append(p1);
		StringBuilder v8 = v2.append(", caller's uid ");
		int v9 = Binder.getCallingUid();
		StringBuilder v10 = v2.append(v9);
		StringBuilder v11 = v2.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v2.append(v12);
		String v14 = v2.toString();
		int v15 = Log.v("AccountManagerService", v14);
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v16 = TextUtils.isEmpty(p3);
				if (v16 != 0) {
					int v17 = UserHandle.getCallingUserId();
					long v18 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v17);
					AccountManagerService$UserAccounts v19 = v20;
					AccountManagerService$15 v21 = new AccountManagerService$15(p0,v19,p1,Account.type,0,0,Account.name,0,p2,p3);
					boolean v24 = Log.isLoggable("AccountManagerService", 2);
					if (v24 == 0) {
						StringBuilder v25 = new StringBuilder();
						StringBuilder v27 = v25.append("initiating bind to authenticator type ");
						StringBuilder v28 = v25.append(this.mAccountType);
						String v29 = v25.toString();
						int v30 = Log.v("AccountManagerService", v29);
						IAccountAuthenticatorCache v32 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
						AuthenticatorDescription v33 = AuthenticatorDescription.newKey(this.mAccountType);
						int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						RegisteredServicesCache$ServiceInfo v35 = v32.getServiceInfo(v33, v34);
						if (v35 != 0) {
							boolean v36 = Log.isLoggable("AccountManagerService", 2);
							if (v36 == 0) {
								StringBuilder v37 = new StringBuilder();
								StringBuilder v39 = v37.append("there is no authenticator for ");
								StringBuilder v40 = v37.append(this.mAccountType);
								StringBuilder v41 = v37.append(", bailing out");
								String v42 = v37.toString();
								int v43 = Log.v("AccountManagerService", v42);
								boolean v31 = 0;
								if (v31 != 0) {
									StringBuilder v44 = new StringBuilder();
									StringBuilder v46 = v44.append("bind attempt failed for ");
									long v48 = SystemClock.elapsedRealtime();
									String v49 = AccountManagerService$Session.toDebugString(v48);
									String v47 = v49;
									StringBuilder v50 = v44.append(v47);
									String v51 = v44.toString();
									int v52 = Log.d("AccountManagerService", v51);
									this.mNumErrors = (this.mNumErrors + 1);
									IAccountManagerResponse v54 = AccountManagerService$Session.getResponseAndClose();
									if (v54 == 0) {
										boolean v55 = Log.isLoggable("AccountManagerService", 2);
										if (v55 == 0) {
											StringBuilder v56 = new StringBuilder();
											Class v58 = AccountManagerService$Session.getClass();
											String v59 = v58.getSimpleName();
											StringBuilder v60 = v56.append(v59);
											StringBuilder v61 = v56.append(" calling onError() on response ");
											StringBuilder v62 = v56.append(v54);
											String v63 = v56.toString();
											int v64 = Log.v("AccountManagerService", v63);
											v54.onError(1, "bind failure");
											boolean v66 = Log.isLoggable("AccountManagerService", 2);
											if (v66 == 0) {
												int v67 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
												IAccountManager$Stub.restoreCallingIdentity(v18);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void isCredentialsUpdateSuggested(IAccountManagerResponse p1, Account p2, String p3){
	boolean v1 = Log.isLoggable("AccountManagerService", 2);
	if (v1 == 0) {
		if (p1 == 0) {
			if (p2 == 0) {
				boolean v2 = TextUtils.isEmpty(p3);
				if (v2 != 0) {
					int v3 = UserHandle.getCallingUserId();
					long v4 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v6 = AccountManagerService.getUserAccountsNotChecked(v3);
					AccountManagerService$UserAccounts v5 = v6;
					AccountManagerService$15 v7 = new AccountManagerService$15(p0,v5,p1,Account.type,0,0,Account.name,0,p2,p3);
					boolean v10 = Log.isLoggable("AccountManagerService", 2);
					if (v10 == 0) {
						StringBuilder v11 = new StringBuilder();
						StringBuilder v13 = v11.append("initiating bind to authenticator type ");
						StringBuilder v14 = v11.append(this.mAccountType);
						String v15 = v11.toString();
						int v16 = Log.v("AccountManagerService", v15);
						IAccountAuthenticatorCache v18 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
						AuthenticatorDescription v19 = AuthenticatorDescription.newKey(this.mAccountType);
						int v20 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						RegisteredServicesCache$ServiceInfo v21 = v18.getServiceInfo(v19, v20);
						if (v21 != 0) {
							int v22 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
							boolean v23 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v22);
							if (v23 != 0) {
								if (ComponentInfo.directBootAware != 0) {
									boolean v17 = 0;
									if (v17 != 0) {
										StringBuilder v31 = new StringBuilder();
										StringBuilder v33 = v31.append("bind attempt failed for ");
										long v35 = SystemClock.elapsedRealtime();
										String v36 = AccountManagerService$Session.toDebugString(v35);
										String v34 = v36;
										StringBuilder v37 = v31.append(v34);
										String v38 = v31.toString();
										int v39 = Log.d("AccountManagerService", v38);
										this.mNumErrors = (this.mNumErrors + 1);
										IAccountManagerResponse v41 = AccountManagerService$Session.getResponseAndClose();
										if (v41 == 0) {
											boolean v42 = Log.isLoggable("AccountManagerService", 2);
											if (v42 == 0) {
												StringBuilder v43 = new StringBuilder();
												Class v45 = AccountManagerService$Session.getClass();
												String v46 = v45.getSimpleName();
												StringBuilder v47 = v43.append(v46);
												StringBuilder v48 = v43.append(" calling onError() on response ");
												StringBuilder v49 = v43.append(v41);
												String v50 = v43.toString();
												int v51 = Log.v("AccountManagerService", v50);
												v41.onError(1, "bind failure");
												boolean v53 = Log.isLoggable("AccountManagerService", 2);
												if (v53 == 0) {
													int v54 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
													IAccountManager$Stub.restoreCallingIdentity(v4);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
