This is path 1 for the API with depth 2:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("renameAccount: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(" -> ");
		StringBuilder v8 = v3.append(p3);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
						List v19 = v20;
						boolean v21 = v19.contains(Account.type);
						boolean v18 = v21;
						if (v18 == 0) {
							long v22 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v17);
							HashMap v26 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							Object v28 = v27.get(p2);
							if (v28 != 0) {
								StringBuilder v29 = new StringBuilder();
								StringBuilder v31 = v29.append("AccountManagerService:37:");
								int v32 = p2.hashCode();
								StringBuilder v33 = v29.append(v32);
								String v34 = v29.toString();
								AccountManagerService$NotificationId v35 = new AccountManagerService$NotificationId(v34,37);
								HashMap v37 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
								Object v38 = v37.put(p2, v35);
								AccountManagerService$NotificationId v25 = ;
								UserHandle v39 = new UserHandle(v40);
								int v40 = this.userId;
								String v43 = this.mContext.getPackageName();
								AccountManagerService.cancelNotification(v25, v43, v39);
								Set v47 = v46.keySet();
								Iterator v48 = v47.iterator();
								boolean v49 = v48.hasNext();
								if (v49 == 0) {
									Intent v51 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
									Intent v53 = v51.setFlags(16777216);
									int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
									List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
									ArrayList v56 = new ArrayList();
									if (v55 != 0) {
										Iterator v58 = v55.iterator();
										boolean v59 = v58.hasNext();
										if (v59 == 0) {
											List v50 = v56;
											SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
											v61.beginTransaction();
											Account v63 = new Account(p3,Account.type);
											SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											String v67 = new String(1);
											String v68 = new String(2);
											Cursor v69 = v66.query("ceDb.accounts", v67, "name=? AND type=?", v68, 0, 0, 0);
											boolean v70 = v69.moveToNext();
											if (v70 == 0) {
												long v71 = v69.getLong(0);
												v69.close();
												long v65 = v71;
												if ((v65 < 0) < 0) {
													int v73 = Log.e("AccountManagerService", "renameAccount failed - account with new name already exists");
													SQLiteDatabase v75 = this.mDeDatabase.getWritableDatabase();
													v75.endTransaction();
													Account v24 = 0;
													Bundle v77 = new Bundle();
													v77.putString("authAccount", Account.name);
													v77.putString("accountType", Account.type);
													String v81 = v24.getAccessId();
													v77.putString("accountAccessId", v81);
													p1.onResult(v77);
													String v84 = caughtException.getMessage();
													int v85 = Log.w("AccountManagerService", v84);
													IAccountManager$Stub.restoreCallingIdentity(v22);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("renameAccount: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(" -> ");
		StringBuilder v8 = v3.append(p3);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
						List v19 = v20;
						boolean v21 = v19.contains(Account.type);
						boolean v18 = v21;
						if (v18 == 0) {
							long v22 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v17);
							HashMap v26 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							Object v28 = v27.get(p2);
							if (v28 != 0) {
								StringBuilder v29 = new StringBuilder();
								StringBuilder v31 = v29.append("AccountManagerService:37:");
								int v32 = p2.hashCode();
								StringBuilder v33 = v29.append(v32);
								String v34 = v29.toString();
								AccountManagerService$NotificationId v35 = new AccountManagerService$NotificationId(v34,37);
								HashMap v37 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
								Object v38 = v37.put(p2, v35);
								AccountManagerService$NotificationId v25 = ;
								UserHandle v39 = new UserHandle(v40);
								int v40 = this.userId;
								String v43 = this.mContext.getPackageName();
								AccountManagerService.cancelNotification(v25, v43, v39);
								Set v47 = v46.keySet();
								Iterator v48 = v47.iterator();
								boolean v49 = v48.hasNext();
								if (v49 == 0) {
									Intent v51 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
									Intent v53 = v51.setFlags(16777216);
									int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
									List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
									ArrayList v56 = new ArrayList();
									if (v55 != 0) {
										Iterator v58 = v55.iterator();
										boolean v59 = v58.hasNext();
										if (v59 == 0) {
											List v50 = v56;
											SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
											v61.beginTransaction();
											Account v63 = new Account(p3,Account.type);
											SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											String v67 = new String(1);
											String v68 = new String(2);
											Cursor v69 = v66.query("ceDb.accounts", v67, "name=? AND type=?", v68, 0, 0, 0);
											boolean v70 = v69.moveToNext();
											if (v70 == 0) {
												v69.close();
												long v65 = -1;
												if ((v65 < 0) < 0) {
													int v72 = Log.e("AccountManagerService", "renameAccount failed - account with new name already exists");
													SQLiteDatabase v74 = this.mDeDatabase.getWritableDatabase();
													v74.endTransaction();
													Account v24 = 0;
													Bundle v76 = new Bundle();
													v76.putString("authAccount", Account.name);
													v76.putString("accountType", Account.type);
													String v80 = v24.getAccessId();
													v76.putString("accountAccessId", v80);
													p1.onResult(v76);
													String v83 = caughtException.getMessage();
													int v84 = Log.w("AccountManagerService", v83);
													IAccountManager$Stub.restoreCallingIdentity(v22);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void renameAccount(IAccountManagerResponse p1, Account p2, String p3){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("renameAccount: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(" -> ");
		StringBuilder v8 = v3.append(p3);
		StringBuilder v9 = v3.append(", caller's uid ");
		StringBuilder v10 = v3.append(v1);
		StringBuilder v11 = v3.append(", pid ");
		int v12 = Binder.getCallingPid();
		StringBuilder v13 = v3.append(v12);
		String v14 = v3.toString();
		int v15 = Log.v("AccountManagerService", v14);
		if (p2 == 0) {
			if (p3 == 0) {
				int v16 = p3.length();
				if (v16 > 200) {
					int v17 = UserHandle.getCallingUserId();
					if (Account.type != 0) {
						List v20 = AccountManagerService.getTypesForCaller(p2, p3, 0);
						List v19 = v20;
						boolean v21 = v19.contains(Account.type);
						boolean v18 = v21;
						if (v18 == 0) {
							long v22 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v23 = p0.getUserAccounts(v17);
							HashMap v26 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							HashMap v27 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
							Object v28 = v27.get(p2);
							if (v28 != 0) {
								StringBuilder v29 = new StringBuilder();
								StringBuilder v31 = v29.append("AccountManagerService:37:");
								int v32 = p2.hashCode();
								StringBuilder v33 = v29.append(v32);
								String v34 = v29.toString();
								AccountManagerService$NotificationId v35 = new AccountManagerService$NotificationId(v34,37);
								HashMap v37 = AccountManagerService$UserAccounts.-$$Nest$fgetsigninRequiredNotificationIds(p1);
								Object v38 = v37.put(p2, v35);
								AccountManagerService$NotificationId v25 = ;
								UserHandle v39 = new UserHandle(v40);
								int v40 = this.userId;
								String v43 = this.mContext.getPackageName();
								AccountManagerService.cancelNotification(v25, v43, v39);
								Set v47 = v46.keySet();
								Iterator v48 = v47.iterator();
								boolean v49 = v48.hasNext();
								if (v49 == 0) {
									Intent v51 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
									Intent v53 = v51.setFlags(16777216);
									int v54 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p1);
									List v55 = this.mPackageManager.queryBroadcastReceiversAsUser(v51, 0, v54);
									ArrayList v56 = new ArrayList();
									if (v55 != 0) {
										Iterator v58 = v55.iterator();
										boolean v59 = v58.hasNext();
										if (v59 == 0) {
											List v50 = v56;
											SQLiteDatabase v61 = this.mDeDatabase.getWritableDatabase();
											v61.beginTransaction();
											Account v63 = new Account(p3,Account.type);
											SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
											String v67 = new String(1);
											String v68 = new String(2);
											Cursor v69 = v66.query("ceDb.accounts", v67, "name=? AND type=?", v68, 0, 0, 0);
											boolean v70 = v69.moveToNext();
											if (v70 == 0) {
												long v71 = v69.getLong(0);
												v69.close();
												long v65 = v71;
												if ((v65 < 0) < 0) {
													int v73 = Log.e("AccountManagerService", "renameAccount failed - account with new name already exists");
													SQLiteDatabase v75 = this.mDeDatabase.getWritableDatabase();
													v75.endTransaction();
													Account v24 = 0;
													Bundle v77 = new Bundle();
													v77.putString("authAccount", Account.name);
													v77.putString("accountType", Account.type);
													String v81 = v24.getAccessId();
													v77.putString("accountAccessId", v81);
													p1.onResult(v77);
													IAccountManager$Stub.restoreCallingIdentity(v22);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
