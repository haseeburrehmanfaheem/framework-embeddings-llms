This is path 1 for the API with depth 2:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("startUpdateCredentialsSession: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", expectActivityLaunch ");
		StringBuilder v12 = v3.append(p4);
		StringBuilder v13 = v3.append(", caller's uid ");
		int v14 = Binder.getCallingUid();
		StringBuilder v15 = v3.append(v14);
		StringBuilder v16 = v3.append(", pid ");
		int v17 = Binder.getCallingPid();
		StringBuilder v18 = v3.append(v17);
		String v19 = v3.toString();
		int v20 = Log.v("AccountManagerService", v19);
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = Binder.getCallingUid();
				int v22 = UserHandle.getCallingUserId();
				String v23 = p5.getString("androidPackageName");
				String v24 = new String(1);
				long v26 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v28 = AccountManagerService.getUserAccountsNotChecked(v22);
				AccountManagerService$UserAccounts v27 = v28;
				AccountManagerService$14 v29 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
				boolean v32 = Log.isLoggable("AccountManagerService", 2);
				if (v32 == 0) {
					StringBuilder v33 = new StringBuilder();
					StringBuilder v35 = v33.append("initiating bind to authenticator type ");
					StringBuilder v36 = v33.append(this.mAccountType);
					String v37 = v33.toString();
					int v38 = Log.v("AccountManagerService", v37);
					IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
					AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType);
					int v42 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
					RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);
					if (v43 != 0) {
						int v44 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						boolean v45 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v44);
						if (v45 != 0) {
							if (ComponentInfo.directBootAware != 0) {
								boolean v39 = 0;
								if (v39 != 0) {
									StringBuilder v53 = new StringBuilder();
									StringBuilder v55 = v53.append("bind attempt failed for ");
									long v57 = SystemClock.elapsedRealtime();
									String v58 = AccountManagerService$Session.toDebugString(v57);
									String v56 = v58;
									StringBuilder v59 = v53.append(v56);
									String v60 = v53.toString();
									int v61 = Log.d("AccountManagerService", v60);
									this.mNumErrors = (this.mNumErrors + 1);
									IAccountManagerResponse v63 = AccountManagerService$Session.getResponseAndClose();
									if (v63 == 0) {
										boolean v64 = Log.isLoggable("AccountManagerService", 2);
										if (v64 == 0) {
											StringBuilder v65 = new StringBuilder();
											Class v67 = AccountManagerService$Session.getClass();
											String v68 = v67.getSimpleName();
											StringBuilder v69 = v65.append(v68);
											StringBuilder v70 = v65.append(" calling onError() on response ");
											StringBuilder v71 = v65.append(v63);
											String v72 = v65.toString();
											int v73 = Log.v("AccountManagerService", v72);
											v63.onError(1, "bind failure");
											boolean v75 = Log.isLoggable("AccountManagerService", 2);
											if (v75 == 0) {
												int v76 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
												IAccountManager$Stub.restoreCallingIdentity(v26);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("startUpdateCredentialsSession: ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", expectActivityLaunch ");
		StringBuilder v12 = v3.append(p4);
		StringBuilder v13 = v3.append(", caller's uid ");
		int v14 = Binder.getCallingUid();
		StringBuilder v15 = v3.append(v14);
		StringBuilder v16 = v3.append(", pid ");
		int v17 = Binder.getCallingPid();
		StringBuilder v18 = v3.append(v17);
		String v19 = v3.toString();
		int v20 = Log.v("AccountManagerService", v19);
		if (p1 == 0) {
			if (p2 == 0) {
				int v21 = Binder.getCallingUid();
				int v22 = UserHandle.getCallingUserId();
				String v23 = p5.getString("androidPackageName");
				String v24 = new String(1);
				long v26 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v28 = AccountManagerService.getUserAccountsNotChecked(v22);
				AccountManagerService$UserAccounts v27 = v28;
				AccountManagerService$14 v29 = new AccountManagerService$14(p0,v27,p1,Account.type,p4,Account.name,0,1,v25,p2,p3,p5);
				boolean v32 = Log.isLoggable("AccountManagerService", 2);
				if (v32 == 0) {
					StringBuilder v33 = new StringBuilder();
					StringBuilder v35 = v33.append("initiating bind to authenticator type ");
					StringBuilder v36 = v33.append(this.mAccountType);
					String v37 = v33.toString();
					int v38 = Log.v("AccountManagerService", v37);
					IAccountAuthenticatorCache v40 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
					AuthenticatorDescription v41 = AuthenticatorDescription.newKey(this.mAccountType);
					int v42 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
					RegisteredServicesCache$ServiceInfo v43 = v40.getServiceInfo(v41, v42);
					if (v43 != 0) {
						boolean v44 = Log.isLoggable("AccountManagerService", 2);
						if (v44 == 0) {
							StringBuilder v45 = new StringBuilder();
							StringBuilder v47 = v45.append("there is no authenticator for ");
							StringBuilder v48 = v45.append(this.mAccountType);
							StringBuilder v49 = v45.append(", bailing out");
							String v50 = v45.toString();
							int v51 = Log.v("AccountManagerService", v50);
							boolean v39 = 0;
							if (v39 != 0) {
								StringBuilder v52 = new StringBuilder();
								StringBuilder v54 = v52.append("bind attempt failed for ");
								long v56 = SystemClock.elapsedRealtime();
								String v57 = AccountManagerService$Session.toDebugString(v56);
								String v55 = v57;
								StringBuilder v58 = v52.append(v55);
								String v59 = v52.toString();
								int v60 = Log.d("AccountManagerService", v59);
								this.mNumErrors = (this.mNumErrors + 1);
								IAccountManagerResponse v62 = AccountManagerService$Session.getResponseAndClose();
								if (v62 == 0) {
									boolean v63 = Log.isLoggable("AccountManagerService", 2);
									if (v63 == 0) {
										StringBuilder v64 = new StringBuilder();
										Class v66 = AccountManagerService$Session.getClass();
										String v67 = v66.getSimpleName();
										StringBuilder v68 = v64.append(v67);
										StringBuilder v69 = v64.append(" calling onError() on response ");
										StringBuilder v70 = v64.append(v62);
										String v71 = v64.toString();
										int v72 = Log.v("AccountManagerService", v71);
										v62.onError(1, "bind failure");
										boolean v74 = Log.isLoggable("AccountManagerService", 2);
										if (v74 == 0) {
											int v75 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
											IAccountManager$Stub.restoreCallingIdentity(v26);
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void startUpdateCredentialsSession(IAccountManagerResponse p1, Account p2, String p3, boolean p4, Bundle p5){
	Bundle v1 = Bundle.setDefusable(p5, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		if (p1 == 0) {
			if (p2 == 0) {
				int v3 = Binder.getCallingUid();
				int v4 = UserHandle.getCallingUserId();
				String v5 = p5.getString("androidPackageName");
				String v6 = new String(1);
				long v8 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v10 = AccountManagerService.getUserAccountsNotChecked(v4);
				AccountManagerService$UserAccounts v9 = v10;
				AccountManagerService$14 v11 = new AccountManagerService$14(p0,v9,p1,Account.type,p4,Account.name,0,1,v7,p2,p3,p5);
				boolean v14 = Log.isLoggable("AccountManagerService", 2);
				if (v14 == 0) {
					StringBuilder v15 = new StringBuilder();
					StringBuilder v17 = v15.append("initiating bind to authenticator type ");
					StringBuilder v18 = v15.append(this.mAccountType);
					String v19 = v15.toString();
					int v20 = Log.v("AccountManagerService", v19);
					IAccountAuthenticatorCache v22 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
					AuthenticatorDescription v23 = AuthenticatorDescription.newKey(this.mAccountType);
					int v24 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
					RegisteredServicesCache$ServiceInfo v25 = v22.getServiceInfo(v23, v24);
					if (v25 != 0) {
						int v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
						boolean v27 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v26);
						if (v27 != 0) {
							if (ComponentInfo.directBootAware != 0) {
								boolean v21 = 0;
								if (v21 != 0) {
									StringBuilder v35 = new StringBuilder();
									StringBuilder v37 = v35.append("bind attempt failed for ");
									long v39 = SystemClock.elapsedRealtime();
									String v40 = AccountManagerService$Session.toDebugString(v39);
									String v38 = v40;
									StringBuilder v41 = v35.append(v38);
									String v42 = v35.toString();
									int v43 = Log.d("AccountManagerService", v42);
									this.mNumErrors = (this.mNumErrors + 1);
									IAccountManagerResponse v45 = AccountManagerService$Session.getResponseAndClose();
									if (v45 == 0) {
										boolean v46 = Log.isLoggable("AccountManagerService", 2);
										if (v46 == 0) {
											StringBuilder v47 = new StringBuilder();
											Class v49 = AccountManagerService$Session.getClass();
											String v50 = v49.getSimpleName();
											StringBuilder v51 = v47.append(v50);
											StringBuilder v52 = v47.append(" calling onError() on response ");
											StringBuilder v53 = v47.append(v45);
											String v54 = v47.toString();
											int v55 = Log.v("AccountManagerService", v54);
											v45.onError(1, "bind failure");
											boolean v57 = Log.isLoggable("AccountManagerService", 2);
											if (v57 == 0) {
												int v58 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
												IAccountManager$Stub.restoreCallingIdentity(v8);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
