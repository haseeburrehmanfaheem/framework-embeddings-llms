The method startAddAccountSession has the following code snippet:

This is path 1 for the API with depth 2:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("startAddAccountSession: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", requiredFeatures ");
		String v12 = Arrays.toString(p4);
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", expectActivityLaunch ");
		StringBuilder v15 = v3.append(p5);
		StringBuilder v16 = v3.append(", caller's uid ");
		int v17 = Binder.getCallingUid();
		StringBuilder v18 = v3.append(v17);
		StringBuilder v19 = v3.append(", pid ");
		int v20 = Binder.getCallingPid();
		StringBuilder v21 = v3.append(v20);
		String v22 = v3.toString();
		int v23 = Log.v("AccountManagerService", v22);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v30 == 0) {
					boolean v31 = v30.isActiveProfileOwner(p2);
					if (v31 != 0) {
						boolean v32 = v30.isActiveDeviceOwner(p2);
						if (v32 == 0) {
							boolean v29 = ;
							if (v29 == 0) {
								UserManager v33 = AccountManagerService.getUserManager();
								UserHandle v34 = new UserHandle(v27);
								Bundle v36 = v33.getUserRestrictions(v34);
								boolean v37 = v36.getBoolean("no_modify_accounts");
								if (v37 == 0) {
									boolean v28 = 0;
									if (v28 != 0) {
										Object v40 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v40 == 0) {
											boolean v41 = v40.isActiveProfileOwner(p3);
											if (v41 != 0) {
												boolean v42 = v40.isActiveDeviceOwner(p3);
												if (v42 == 0) {
													boolean v39 = ;
													if (v39 == 0) {
														Object v43 = this.mContext.getSystemService("device_policy");
														String v44 = v43.getAccountTypesWithManagementDisabledAsUser(v27);
														if (v44 != 0) {
															if ( >= v44.length) {
																boolean v45 = v44[].equals(p2);
																if (v45 == 0) {
																	boolean v38 = 0;
																	if (v38 != 0) {
																		p1.onError(101, "User cannot modify accounts of this type (policy).");
																		Object v49 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
																		Object v48 = v49;
																		if (v48 != 0) {
																			Intent v51 = new Intent(this.mContext,CantAddAccountActivit.class);
																			Intent v53 = v51.putExtra("android.accounts.extra.ERROR_CODE", p1);
																			Intent v54 = v51.addFlags(268435456);
																			Intent v50 = v51;
																			if ( != 0) {
																				Intent v56 = new Intent(this.mContext,CantAddAccountActivit.class);
																				Intent v58 = v56.putExtra("android.accounts.extra.ERROR_CODE", p1);
																				Intent v59 = v56.addFlags(268435456);
																				Intent v55 = v56;
																				long v60 = IAccountManager$Stub.clearCallingIdentity();
																				UserHandle v61 = new UserHandle(v27);
																				this.mContext.startActivityAsUser(, v61);
																				IAccountManager$Stub.restoreCallingIdentity(v60);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("startAddAccountSession: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", requiredFeatures ");
		String v12 = Arrays.toString(p4);
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", expectActivityLaunch ");
		StringBuilder v15 = v3.append(p5);
		StringBuilder v16 = v3.append(", caller's uid ");
		int v17 = Binder.getCallingUid();
		StringBuilder v18 = v3.append(v17);
		StringBuilder v19 = v3.append(", pid ");
		int v20 = Binder.getCallingPid();
		StringBuilder v21 = v3.append(v20);
		String v22 = v3.toString();
		int v23 = Log.v("AccountManagerService", v22);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v30 == 0) {
					boolean v31 = v30.isActiveProfileOwner(p2);
					if (v31 != 0) {
						boolean v32 = v30.isActiveDeviceOwner(p2);
						if (v32 == 0) {
							boolean v29 = ;
							if (v29 == 0) {
								UserManager v33 = AccountManagerService.getUserManager();
								UserHandle v34 = new UserHandle(v27);
								Bundle v36 = v33.getUserRestrictions(v34);
								boolean v37 = v36.getBoolean("no_modify_accounts");
								if (v37 == 0) {
									boolean v28 = 1;
									if (v28 != 0) {
										Object v40 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v40 == 0) {
											boolean v41 = v40.isActiveProfileOwner(p3);
											if (v41 != 0) {
												boolean v42 = v40.isActiveDeviceOwner(p3);
												if (v42 == 0) {
													boolean v39 = ;
													if (v39 == 0) {
														Object v43 = this.mContext.getSystemService("device_policy");
														String v44 = v43.getAccountTypesWithManagementDisabledAsUser(v27);
														if (v44 != 0) {
															if ( >= v44.length) {
																boolean v45 = v44[].equals(p2);
																if (v45 == 0) {
																	boolean v38 = 0;
																	if (v38 != 0) {
																		p1.onError(101, "User cannot modify accounts of this type (policy).");
																		Object v49 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
																		Object v48 = v49;
																		if (v48 != 0) {
																			Intent v51 = new Intent(this.mContext,CantAddAccountActivit.class);
																			Intent v53 = v51.putExtra("android.accounts.extra.ERROR_CODE", p1);
																			Intent v54 = v51.addFlags(268435456);
																			Intent v50 = v51;
																			if ( != 0) {
																				Intent v56 = new Intent(this.mContext,CantAddAccountActivit.class);
																				Intent v58 = v56.putExtra("android.accounts.extra.ERROR_CODE", p1);
																				Intent v59 = v56.addFlags(268435456);
																				Intent v55 = v56;
																				long v60 = IAccountManager$Stub.clearCallingIdentity();
																				UserHandle v61 = new UserHandle(v27);
																				this.mContext.startActivityAsUser(, v61);
																				IAccountManager$Stub.restoreCallingIdentity(v60);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void startAddAccountSession(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("startAddAccountSession: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", requiredFeatures ");
		String v12 = Arrays.toString(p4);
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", expectActivityLaunch ");
		StringBuilder v15 = v3.append(p5);
		StringBuilder v16 = v3.append(", caller's uid ");
		int v17 = Binder.getCallingUid();
		StringBuilder v18 = v3.append(v17);
		StringBuilder v19 = v3.append(", pid ");
		int v20 = Binder.getCallingPid();
		StringBuilder v21 = v3.append(v20);
		String v22 = v3.toString();
		int v23 = Log.v("AccountManagerService", v22);
		if (p1 == 0) {
			Preconditions.checkArgument(, "response cannot be null");
			if (p2 == 0) {
				Preconditions.checkArgument(, "accountType cannot be null");
				int v26 = Binder.getCallingUid();
				int v27 = UserHandle.getUserId(v26);
				Object v30 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v30 == 0) {
					boolean v31 = v30.isActiveProfileOwner(p2);
					if (v31 != 0) {
						boolean v32 = v30.isActiveDeviceOwner(p2);
						if (v32 == 0) {
							boolean v29 = ;
							if (v29 == 0) {
								UserManager v33 = AccountManagerService.getUserManager();
								UserHandle v34 = new UserHandle(v27);
								Bundle v36 = v33.getUserRestrictions(v34);
								boolean v37 = v36.getBoolean("no_modify_accounts");
								if (v37 == 0) {
									boolean v28 = 0;
									if (v28 != 0) {
										Object v40 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v40 == 0) {
											boolean v41 = v40.isActiveProfileOwner(p3);
											if (v41 != 0) {
												boolean v42 = v40.isActiveDeviceOwner(p3);
												if (v42 == 0) {
													boolean v39 = ;
													if (v39 == 0) {
														Object v43 = this.mContext.getSystemService("device_policy");
														String v44 = v43.getAccountTypesWithManagementDisabledAsUser(v27);
														if (v44 != 0) {
															if ( >= v44.length) {
																boolean v45 = v44[].equals(p2);
																if (v45 == 0) {
																	boolean v38 = 0;
																	if (v38 != 0) {
																		p1.onError(101, "User cannot modify accounts of this type (policy).");
																		Object v49 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);
																		Object v48 = v49;
																		if (v48 != 0) {
																			Intent v51 = new Intent(this.mContext,CantAddAccountActivit.class);
																			Intent v53 = v51.putExtra("android.accounts.extra.ERROR_CODE", p1);
																			Intent v54 = v51.addFlags(268435456);
																			Intent v50 = v51;
																			if ( != 0) {
																				Intent v56 = new Intent(this.mContext,CantAddAccountActivit.class);
																				Intent v58 = v56.putExtra("android.accounts.extra.ERROR_CODE", p1);
																				Intent v59 = v56.addFlags(268435456);
																				Intent v55 = v56;
																				long v60 = IAccountManager$Stub.clearCallingIdentity();
																				UserHandle v61 = new UserHandle(v27);
																				this.mContext.startActivityAsUser(, v61);
																				IAccountManager$Stub.restoreCallingIdentity(v60);
																				return;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Bundle v1 = Bundle.setDefusable(p6, 1);\nint v17 = Binder.getCallingUid();\nint v27 = UserHandle.getUserId(v26);\nObject v30 = LocalServices.getService(DevicePolicyManagerInterna.class);\nboolean v31 = v30.isActiveProfileOwner(p2);\nUserManager v33 = AccountManagerService.getUserManager();\nBundle v36 = v33.getUserRestrictions(v34);', 'StringBuilder v3 = new StringBuilder();\nStringBuilder v5 = v3.append("startAddAccountSession: accountType ");\nStringBuilder v6 = v3.append(p2);\nString v22 = v3.toString();\nint v23 = Log.v("AccountManagerService", v22);', 'p1.onError(101, "User cannot modify accounts of this type (policy).");\nObject v49 = this.sLocalServiceObjects.get(DevicePolicyManagerInterna.class);\nIntent v51 = new Intent(this.mContext,CantAddAccountActivit.class);\nIntent v53 = v51.putExtra("android.accounts.extra.ERROR_CODE", p1);']

The method startAddAccountSession has the following similar APIs:

- API Name: finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V with Similarity Score: 0.8932361006736755
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v1 = Bundle.setDefusable(p2, 1);
Object v29 = LocalServices.getService(DevicePolicyManagerInterna.class);
boolean v30 = v29.isActiveProfileOwner(p2);
boolean v31 = v29.isActiveDeviceOwner(p2);

- API Name: confirmCredentialsAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Landroid/os/Bundle;ZI)V with Similarity Score: 0.8522374629974365
  - Access Control Level: SYS_OR_SIG and the following code:
Bundle v1 = Bundle.setDefusable(p3, 1);
long v22 = IAccountManager$Stub.clearCallingIdentity();
AccountManagerService$UserAccounts v24 = AccountManagerService.getUserAccountsNotChecked(p5);
AuthenticatorDescription v37 = AuthenticatorDescription.newKey(this.mAccountType);
AccountManagerService$12 v25 = new AccountManagerService$12(p0,v23,p1,Account.type,p4,1,Account.name,1,1,p2,p3);

