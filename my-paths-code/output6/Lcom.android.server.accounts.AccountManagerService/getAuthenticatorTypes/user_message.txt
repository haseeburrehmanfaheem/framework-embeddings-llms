This is path 1 for the API with depth 1:
public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("getAuthenticatorTypes: for user id ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(" caller's uid ");
		StringBuilder v8 = v3.append(v1);
		StringBuilder v9 = v3.append(", pid ");
		int v10 = Binder.getCallingPid();
		StringBuilder v11 = v3.append(v10);
		String v12 = v3.toString();
		int v13 = Log.v("AccountManagerService", v12);
		if (v16 == 0) {
			boolean v14 = ;
			if (v14 != 0) {
				long v17 = IAccountManager$Stub.clearCallingIdentity();
				this.mAuthenticatorCache.updateServices(p1);
				Collection v20 = this.mAuthenticatorCache.getAllServices(p1);
				int v21 = v20.size();
				AuthenticatorDescription v22 = new AuthenticatorDescription(v21);
				Iterator v23 = v20.iterator();
				boolean v24 = v23.hasNext();
				if (v24 == 0) {
					AuthenticatorDescription v18 = v22;
					IAccountManager$Stub.restoreCallingIdentity(v17);
					return v18;
				}
			}
		}
	}
}

This is path 2 for the API with depth 1:
public AuthenticatorDescription getAuthenticatorTypes(int p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("getAuthenticatorTypes: for user id ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(" caller's uid ");
		StringBuilder v8 = v3.append(v1);
		StringBuilder v9 = v3.append(", pid ");
		int v10 = Binder.getCallingPid();
		StringBuilder v11 = v3.append(v10);
		String v12 = v3.toString();
		int v13 = Log.v("AccountManagerService", v12);
		if (v16 == 0) {
			boolean v14 = ;
			if (v14 != 0) {
				long v17 = IAccountManager$Stub.clearCallingIdentity();
				this.mAuthenticatorCache.updateServices(p1);
				Collection v20 = this.mAuthenticatorCache.getAllServices(p1);
				int v21 = v20.size();
				AuthenticatorDescription v22 = new AuthenticatorDescription(v21);
				Iterator v23 = v20.iterator();
				boolean v24 = v23.hasNext();
				if (v24 == 0) {
					AuthenticatorDescription v18 = v22;
					IAccountManager$Stub.restoreCallingIdentity(v17);
					return v18;
				}
			}
		}
	}
}
