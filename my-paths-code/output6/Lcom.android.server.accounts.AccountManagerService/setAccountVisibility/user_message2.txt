The method setAccountVisibility has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
				if (1 == 0) {
					boolean v14 = "android:accounts:key_legacy_visible".equals(p2);
					if (v14 != 0) {
						boolean v15 = "android:accounts:key_legacy_not_visible".equals(p2);
						if (v15 == 0) {
							boolean v13 = ;
							if (v13 == 0) {
								int v16 = this.userId;
								long v18 = IAccountManager$Stub.clearCallingIdentity();
								int v19 = this.mPackageManager.getPackageUidAsUser(p2, v16);
								IAccountManager$Stub.restoreCallingIdentity(v18);
								boolean v17 = 0;
								if (v17 != 0) {
									HashMap v21 = new HashMap();
									Object v24 = Objects.requireNonNull(p2, "packageName cannot be null");
									long v25 = IAccountManager$Stub.clearCallingIdentity();
									int v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
									int v27 = this.mPackageManager.getPackageUidAsUser(p2, v26);
									IAccountManager$Stub.restoreCallingIdentity(v25);
									StringBuilder v29 = new StringBuilder();
									StringBuilder v31 = v29.append("Package not found ");
									String v32 = caughtException.getMessage();
									StringBuilder v33 = v29.append(v32);
									String v34 = v29.toString();
									int v35 = Log.d("AccountManagerService", v34);
									Integer v36 = Integer.valueOf(3);
									Integer v23 = v36;
									Object v37 = v21.put(p2, v23);
									ArrayList v38 = new ArrayList();
									Integer v41 = AccountManagerService.resolveAccountVisibility(p1, p2, p5);
									int v42 = v41.intValue();
									if (v42 == 1) {
										if (v42 == 2) {
											Intent v43 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
											Intent v45 = v43.setFlags(16777216);
											Intent v46 = v43.setPackage(p2);
											int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
											List v48 = this.mPackageManager.queryBroadcastReceiversAsUser(v43, 0, v47);
											if (v48 == 0) {
												int v49 = v48.size();
												if (v49 <= 0) {
													boolean v40 = ;
													if (v40 == 0) {
														boolean v50 = v38.add(p2);
														long v52 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
														if ((v52 < 0) >= 0) {
															StrictMode$ThreadPolicy v53 = StrictMode.allowThreadDiskWrites();
															boolean v54 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v52, p2, p3);
															if (v54 != 0) {
																StrictMode.setThreadPolicy(v53);
																Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
																Integer v57 = Integer.valueOf(p3);
																Object v58 = v56.put(p2, v57);
																AccountManager.invalidateLocalAccountsDataCaches();
																boolean v51 = 1;
																if (v51 != 0) {
																	if (1 == 0) {
																		Set v60 = .entrySet();
																		Iterator v61 = v60.iterator();
																		boolean v62 = v61.hasNext();
																		if (v62 == 0) {
																			Iterator v63 = .iterator();
																			boolean v64 = v63.hasNext();
																			if (v64 == 0) {
																				int v65 = this.userId;
																				StringBuilder v67 = new StringBuilder();
																				StringBuilder v69 = v67.append("the accounts changed, sending broadcast of ");
																				String v70 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																				StringBuilder v71 = v67.append(v70);
																				String v72 = v67.toString();
																				int v73 = Log.i("AccountManagerService", v72);
																				UserHandle v74 = new UserHandle(v65);
																				this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v74);
																				boolean v12 = 1;
																				IAccountManager$Stub.restoreCallingIdentity(v10);
																				return v12;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			boolean v9 = p0.isSystemUid(v3);
			if (v9 == 0) {
				long v10 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);
				if (1 == 0) {
					boolean v14 = "android:accounts:key_legacy_visible".equals(p2);
					if (v14 != 0) {
						boolean v15 = "android:accounts:key_legacy_not_visible".equals(p2);
						if (v15 == 0) {
							boolean v13 = ;
							if (v13 == 0) {
								int v16 = this.userId;
								long v18 = IAccountManager$Stub.clearCallingIdentity();
								int v19 = this.mPackageManager.getPackageUidAsUser(p2, v16);
								IAccountManager$Stub.restoreCallingIdentity(v18);
								boolean v17 = 0;
								if (v17 != 0) {
									HashMap v21 = new HashMap();
									Object v24 = Objects.requireNonNull(p2, "packageName cannot be null");
									long v25 = IAccountManager$Stub.clearCallingIdentity();
									int v26 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
									int v27 = this.mPackageManager.getPackageUidAsUser(p2, v26);
									IAccountManager$Stub.restoreCallingIdentity(v25);
									StringBuilder v29 = new StringBuilder();
									StringBuilder v31 = v29.append("Package not found ");
									String v32 = caughtException.getMessage();
									StringBuilder v33 = v29.append(v32);
									String v34 = v29.toString();
									int v35 = Log.d("AccountManagerService", v34);
									Integer v36 = Integer.valueOf(3);
									Integer v23 = v36;
									Object v37 = v21.put(p2, v23);
									ArrayList v38 = new ArrayList();
									Integer v41 = AccountManagerService.resolveAccountVisibility(p1, p2, p5);
									int v42 = v41.intValue();
									if (v42 == 1) {
										if (v42 == 2) {
											Intent v43 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
											Intent v45 = v43.setFlags(16777216);
											Intent v46 = v43.setPackage(p2);
											int v47 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
											List v48 = this.mPackageManager.queryBroadcastReceiversAsUser(v43, 0, v47);
											if (v48 == 0) {
												int v49 = v48.size();
												if (v49 <= 0) {
													boolean v40 = ;
													if (v40 == 0) {
														boolean v50 = v38.add(p2);
														long v52 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
														if ((v52 < 0) >= 0) {
															StrictMode$ThreadPolicy v53 = StrictMode.allowThreadDiskWrites();
															boolean v54 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v52, p2, p3);
															if (v54 != 0) {
																StrictMode.setThreadPolicy(v53);
																Map v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
																Integer v57 = Integer.valueOf(p3);
																Object v58 = v56.put(p2, v57);
																AccountManager.invalidateLocalAccountsDataCaches();
																boolean v51 = 1;
																if (v51 != 0) {
																	if (1 == 0) {
																		Set v60 = .entrySet();
																		Iterator v61 = v60.iterator();
																		boolean v62 = v61.hasNext();
																		if (v62 == 0) {
																			Iterator v63 = .iterator();
																			boolean v64 = v63.hasNext();
																			if (v64 == 0) {
																				int v65 = this.userId;
																				StringBuilder v67 = new StringBuilder();
																				StringBuilder v69 = v67.append("the accounts changed, sending broadcast of ");
																				String v70 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																				StringBuilder v71 = v67.append(v70);
																				String v72 = v67.toString();
																				int v73 = Log.i("AccountManagerService", v72);
																				UserHandle v74 = new UserHandle(v65);
																				this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v74);
																				boolean v12 = 1;
																				IAccountManager$Stub.restoreCallingIdentity(v10);
																				return v12;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean setAccountVisibility(Account p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1, "account cannot be null");
	Object v2 = Objects.requireNonNull(p2, "packageName cannot be null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	if (Account.type != 0) {
		List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
		List v6 = v7;
		boolean v8 = v6.contains(Account.type);
		boolean v5 = v8;
		if (v5 != 0) {
			long v9 = IAccountManager$Stub.clearCallingIdentity();
			AccountManagerService$UserAccounts v10 = p0.getUserAccounts(v4);
			if (1 == 0) {
				boolean v13 = "android:accounts:key_legacy_visible".equals(p2);
				if (v13 != 0) {
					boolean v14 = "android:accounts:key_legacy_not_visible".equals(p2);
					if (v14 == 0) {
						boolean v12 = ;
						if (v12 == 0) {
							int v15 = this.userId;
							long v17 = IAccountManager$Stub.clearCallingIdentity();
							int v18 = this.mPackageManager.getPackageUidAsUser(p2, v15);
							IAccountManager$Stub.restoreCallingIdentity(v17);
							boolean v16 = 0;
							if (v16 != 0) {
								HashMap v20 = new HashMap();
								Object v23 = Objects.requireNonNull(p2, "packageName cannot be null");
								long v24 = IAccountManager$Stub.clearCallingIdentity();
								int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
								int v26 = this.mPackageManager.getPackageUidAsUser(p2, v25);
								IAccountManager$Stub.restoreCallingIdentity(v24);
								StringBuilder v28 = new StringBuilder();
								StringBuilder v30 = v28.append("Package not found ");
								String v31 = caughtException.getMessage();
								StringBuilder v32 = v28.append(v31);
								String v33 = v28.toString();
								int v34 = Log.d("AccountManagerService", v33);
								Integer v35 = Integer.valueOf(3);
								Integer v22 = v35;
								Object v36 = v20.put(p2, v22);
								ArrayList v37 = new ArrayList();
								Integer v40 = AccountManagerService.resolveAccountVisibility(p1, p2, p5);
								int v41 = v40.intValue();
								if (v41 == 1) {
									if (v41 == 2) {
										Intent v42 = new Intent("android.accounts.action.ACCOUNT_REMOVED");
										Intent v44 = v42.setFlags(16777216);
										Intent v45 = v42.setPackage(p2);
										int v46 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p5);
										List v47 = this.mPackageManager.queryBroadcastReceiversAsUser(v42, 0, v46);
										if (v47 == 0) {
											int v48 = v47.size();
											if (v48 <= 0) {
												boolean v39 = ;
												if (v39 == 0) {
													boolean v49 = v37.add(p2);
													long v51 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
													if ((v51 < 0) >= 0) {
														StrictMode$ThreadPolicy v52 = StrictMode.allowThreadDiskWrites();
														boolean v53 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v51, p2, p3);
														if (v53 != 0) {
															StrictMode.setThreadPolicy(v52);
															Map v55 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);
															Integer v56 = Integer.valueOf(p3);
															Object v57 = v55.put(p2, v56);
															AccountManager.invalidateLocalAccountsDataCaches();
															boolean v50 = 1;
															if (v50 != 0) {
																if (1 == 0) {
																	Set v59 = .entrySet();
																	Iterator v60 = v59.iterator();
																	boolean v61 = v60.hasNext();
																	if (v61 == 0) {
																		Iterator v62 = .iterator();
																		boolean v63 = v62.hasNext();
																		if (v63 == 0) {
																			int v64 = this.userId;
																			StringBuilder v66 = new StringBuilder();
																			StringBuilder v68 = v66.append("the accounts changed, sending broadcast of ");
																			String v69 = this.ACCOUNTS_CHANGED_INTENT.getAction();
																			StringBuilder v70 = v66.append(v69);
																			String v71 = v66.toString();
																			int v72 = Log.i("AccountManagerService", v71);
																			UserHandle v73 = new UserHandle(v64);
																			this.mContext.sendBroadcastAsUser(this.ACCOUNTS_CHANGED_INTENT, v73);
																			boolean v11 = 1;
																			IAccountManager$Stub.restoreCallingIdentity(v9);
																			return v11;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);\nboolean v9 = p0.isSystemUid(v3);\nlong v10 = IAccountManager$Stub.clearCallingIdentity();\nAccountManagerService$UserAccounts v11 = p0.getUserAccounts(v4);\nInteger v41 = AccountManagerService.resolveAccountVisibility(p1, p2, p5);\nboolean v54 = AccountManagerService$UserAccounts.accountsDb.setAccountVisibility(v52, p2, p3);\nMap v56 = AccountManagerService.getPackagesAndVisibilityForAccountLocked(p1, p5);\nObject v58 = v56.put(p2, v57);', 'HashMap v21 = new HashMap();\nObject v37 = v21.put(p2, v23);\nboolean v50 = v38.add(p2);\nlong v52 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);']

The method setAccountVisibility has the following similar APIs:

- API Name: removeAccountExplicitly(Landroid/accounts/Account;)Z with Similarity Score: 0.8753474354743958
  - Access Control Level: SYS_OR_SIG and the following code:
List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
boolean v19 = v17.contains(Account.type);
AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v21);
long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);

- API Name: removeAccountExplicitly(Landroid/accounts/Account;)Z with Similarity Score: 0.8603137731552124
  - Access Control Level: SYS_OR_SIG and the following code:
List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
boolean v19 = v17.contains(Account.type);
AccountManagerService$UserAccounts v20 = AccountManagerService.getUserAccountsNotChecked(v21);
long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);

