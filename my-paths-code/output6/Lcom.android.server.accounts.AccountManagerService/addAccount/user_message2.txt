The method addAccount has the following code snippet:

This is path 1 for the API with depth 2:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("addAccount: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", requiredFeatures ");
		String v12 = Arrays.toString(p4);
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", expectActivityLaunch ");
		StringBuilder v15 = v3.append(p5);
		StringBuilder v16 = v3.append(", caller's uid ");
		int v17 = Binder.getCallingUid();
		StringBuilder v18 = v3.append(v17);
		StringBuilder v19 = v3.append(", pid ");
		int v20 = Binder.getCallingPid();
		StringBuilder v21 = v3.append(v20);
		String v22 = v3.toString();
		int v23 = Log.v("AccountManagerService", v22);
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v28 == 0) {
					boolean v29 = v28.isActiveProfileOwner(p2);
					if (v29 != 0) {
						boolean v30 = v28.isActiveDeviceOwner(p2);
						if (v30 == 0) {
							boolean v27 = ;
							if (v27 == 0) {
								UserManager v31 = AccountManagerService.getUserManager();
								UserHandle v32 = new UserHandle(v25);
								Bundle v34 = v31.getUserRestrictions(v32);
								boolean v35 = v34.getBoolean("no_modify_accounts");
								if (v35 == 0) {
									boolean v26 = 0;
									if (v26 != 0) {
										Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v38 == 0) {
											boolean v39 = v38.isActiveProfileOwner(p3);
											if (v39 != 0) {
												boolean v40 = v38.isActiveDeviceOwner(p3);
												if (v40 == 0) {
													boolean v37 = ;
													if (v37 == 0) {
														Object v41 = this.mContext.getSystemService("device_policy");
														String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
														if (v42 != 0) {
															if ( >= v42.length) {
																boolean v43 = v42[].equals(p2);
																if (v43 == 0) {
																	boolean v36 = 0;
																	if (v36 != 0) {
																		int v45 = Binder.getCallingPid();
																		int v46 = Binder.getCallingUid();
																		if (p6 != 0) {
																			Bundle v47 = new Bundle();
																			.putInt("callerUid", v46);
																			.putInt("callerPid", v45);
																			long v51 = IAccountManager$Stub.clearCallingIdentity();
																			AccountManagerService$UserAccounts v53 = AccountManagerService.getUserAccountsNotChecked(p7);
																			AccountManagerService$UserAccounts v52 = v53;
																			AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v52, v46);
																			AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																			boolean v59 = Log.isLoggable("AccountManagerService", 2);
																			if (v59 == 0) {
																				StringBuilder v60 = new StringBuilder();
																				StringBuilder v62 = v60.append("initiating bind to authenticator type ");
																				StringBuilder v63 = v60.append(this.mAccountType);
																				String v64 = v60.toString();
																				int v65 = Log.v("AccountManagerService", v64);
																				boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																				if (v66 != 0) {
																					StringBuilder v67 = new StringBuilder();
																					StringBuilder v69 = v67.append("bind attempt failed for ");
																					String v70 = AccountManagerService$Session.toDebugString();
																					StringBuilder v71 = v67.append(v70);
																					String v72 = v67.toString();
																					int v73 = Log.d("AccountManagerService", v72);
																					AccountManagerService$Session.onError(1, "bind failure");
																					IAccountManager$Stub.restoreCallingIdentity(v51);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("addAccount: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", requiredFeatures ");
		String v12 = Arrays.toString(p4);
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", expectActivityLaunch ");
		StringBuilder v15 = v3.append(p5);
		StringBuilder v16 = v3.append(", caller's uid ");
		int v17 = Binder.getCallingUid();
		StringBuilder v18 = v3.append(v17);
		StringBuilder v19 = v3.append(", pid ");
		int v20 = Binder.getCallingPid();
		StringBuilder v21 = v3.append(v20);
		String v22 = v3.toString();
		int v23 = Log.v("AccountManagerService", v22);
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v28 == 0) {
					boolean v29 = v28.isActiveProfileOwner(p2);
					if (v29 != 0) {
						boolean v30 = v28.isActiveDeviceOwner(p2);
						if (v30 == 0) {
							boolean v27 = ;
							if (v27 == 0) {
								UserManager v31 = AccountManagerService.getUserManager();
								UserHandle v32 = new UserHandle(v25);
								Bundle v34 = v31.getUserRestrictions(v32);
								boolean v35 = v34.getBoolean("no_modify_accounts");
								if (v35 == 0) {
									boolean v26 = 1;
									if (v26 != 0) {
										Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v38 == 0) {
											boolean v39 = v38.isActiveProfileOwner(p3);
											if (v39 != 0) {
												boolean v40 = v38.isActiveDeviceOwner(p3);
												if (v40 == 0) {
													boolean v37 = ;
													if (v37 == 0) {
														Object v41 = this.mContext.getSystemService("device_policy");
														String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
														if (v42 != 0) {
															if ( >= v42.length) {
																boolean v43 = v42[].equals(p2);
																if (v43 == 0) {
																	boolean v36 = 0;
																	if (v36 != 0) {
																		int v45 = Binder.getCallingPid();
																		int v46 = Binder.getCallingUid();
																		if (p6 != 0) {
																			Bundle v47 = new Bundle();
																			.putInt("callerUid", v46);
																			.putInt("callerPid", v45);
																			long v51 = IAccountManager$Stub.clearCallingIdentity();
																			AccountManagerService$UserAccounts v53 = AccountManagerService.getUserAccountsNotChecked(p7);
																			AccountManagerService$UserAccounts v52 = v53;
																			AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v52, v46);
																			AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																			boolean v59 = Log.isLoggable("AccountManagerService", 2);
																			if (v59 == 0) {
																				StringBuilder v60 = new StringBuilder();
																				StringBuilder v62 = v60.append("initiating bind to authenticator type ");
																				StringBuilder v63 = v60.append(this.mAccountType);
																				String v64 = v60.toString();
																				int v65 = Log.v("AccountManagerService", v64);
																				boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																				if (v66 != 0) {
																					StringBuilder v67 = new StringBuilder();
																					StringBuilder v69 = v67.append("bind attempt failed for ");
																					String v70 = AccountManagerService$Session.toDebugString();
																					StringBuilder v71 = v67.append(v70);
																					String v72 = v67.toString();
																					int v73 = Log.d("AccountManagerService", v72);
																					AccountManagerService$Session.onError(1, "bind failure");
																					IAccountManager$Stub.restoreCallingIdentity(v51);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void addAccount(IAccountManagerResponse p1, String p2, String p3, String p4, boolean p5, Bundle p6){
	Bundle v1 = Bundle.setDefusable(p6, 1);
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("addAccount: accountType ");
		StringBuilder v6 = v3.append(p2);
		StringBuilder v7 = v3.append(", response ");
		StringBuilder v8 = v3.append(p1);
		StringBuilder v9 = v3.append(", authTokenType ");
		StringBuilder v10 = v3.append(p3);
		StringBuilder v11 = v3.append(", requiredFeatures ");
		String v12 = Arrays.toString(p4);
		StringBuilder v13 = v3.append(v12);
		StringBuilder v14 = v3.append(", expectActivityLaunch ");
		StringBuilder v15 = v3.append(p5);
		StringBuilder v16 = v3.append(", caller's uid ");
		int v17 = Binder.getCallingUid();
		StringBuilder v18 = v3.append(v17);
		StringBuilder v19 = v3.append(", pid ");
		int v20 = Binder.getCallingPid();
		StringBuilder v21 = v3.append(v20);
		String v22 = v3.toString();
		int v23 = Log.v("AccountManagerService", v22);
		if (p1 == 0) {
			if (p2 == 0) {
				int v24 = Binder.getCallingUid();
				int v25 = UserHandle.getUserId(v24);
				Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);
				if (v28 == 0) {
					boolean v29 = v28.isActiveProfileOwner(p2);
					if (v29 != 0) {
						boolean v30 = v28.isActiveDeviceOwner(p2);
						if (v30 == 0) {
							boolean v27 = ;
							if (v27 == 0) {
								UserManager v31 = AccountManagerService.getUserManager();
								UserHandle v32 = new UserHandle(v25);
								Bundle v34 = v31.getUserRestrictions(v32);
								boolean v35 = v34.getBoolean("no_modify_accounts");
								if (v35 == 0) {
									boolean v26 = 0;
									if (v26 != 0) {
										Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);
										if (v38 == 0) {
											boolean v39 = v38.isActiveProfileOwner(p3);
											if (v39 != 0) {
												boolean v40 = v38.isActiveDeviceOwner(p3);
												if (v40 == 0) {
													boolean v37 = ;
													if (v37 == 0) {
														Object v41 = this.mContext.getSystemService("device_policy");
														String v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);
														if (v42 != 0) {
															if ( >= v42.length) {
																boolean v43 = v42[].equals(p2);
																if (v43 == 0) {
																	boolean v36 = 0;
																	if (v36 != 0) {
																		int v45 = Binder.getCallingPid();
																		int v46 = Binder.getCallingUid();
																		if (p6 != 0) {
																			Bundle v47 = new Bundle();
																			.putInt("callerUid", v46);
																			.putInt("callerPid", v45);
																			long v51 = IAccountManager$Stub.clearCallingIdentity();
																			AccountManagerService$UserAccounts v53 = AccountManagerService.getUserAccountsNotChecked(p7);
																			AccountManagerService$UserAccounts v52 = v53;
																			AccountManagerService.logRecord(AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_ADD, "accounts", -1, v52, v46);
																			AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,,p2);
																			boolean v59 = Log.isLoggable("AccountManagerService", 2);
																			if (v59 == 0) {
																				StringBuilder v60 = new StringBuilder();
																				StringBuilder v62 = v60.append("initiating bind to authenticator type ");
																				StringBuilder v63 = v60.append(this.mAccountType);
																				String v64 = v60.toString();
																				int v65 = Log.v("AccountManagerService", v64);
																				boolean v66 = AccountManagerService$Session.bindToAuthenticator(this.mAccountType);
																				if (v66 != 0) {
																					StringBuilder v67 = new StringBuilder();
																					StringBuilder v69 = v67.append("bind attempt failed for ");
																					String v70 = AccountManagerService$Session.toDebugString();
																					StringBuilder v71 = v67.append(v70);
																					String v72 = v67.toString();
																					int v73 = Log.d("AccountManagerService", v72);
																					AccountManagerService$Session.onError(1, "bind failure");
																					IAccountManager$Stub.restoreCallingIdentity(v51);
																					return;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v28 = LocalServices.getService(DevicePolicyManagerInterna.class);\nboolean v29 = v28.isActiveProfileOwner(p2);\nboolean v30 = v28.isActiveDeviceOwner(p2);', 'UserManager v31 = AccountManagerService.getUserManager();\nUserHandle v32 = new UserHandle(v25);\nBundle v34 = v31.getUserRestrictions(v32);\nboolean v35 = v34.getBoolean("no_modify_accounts");', 'Object v38 = LocalServices.getService(DevicePolicyManagerInterna.class);\nboolean v39 = v38.isActiveProfileOwner(p3);\nboolean v40 = v38.isActiveDeviceOwner(p3);', 'Object v41 = this.mContext.getSystemService("device_policy");\nString v42 = v41.getAccountTypesWithManagementDisabledAsUser(v25);', 'Bundle v47 = new Bundle();\nv47.putInt("callerUid", v46);\nv47.putInt("callerPid", v45);', 'AccountManagerService$9 v56 = new AccountManagerService$9(AccountManagerService,v52,p1,p2,p5,1,0,0,1,p3,p4,,p2);']

The method addAccount has the following similar APIs:

- API Name: finishSessionAsUser(Landroid/accounts/IAccountManagerResponse;Landroid/os/Bundle;ZLandroid/os/Bundle;I)V with Similarity Score: 0.9816586375236511
  - Access Control Level: SYS_OR_SIG and the following code:
UserManager v32 = AccountManagerService.getUserManager();
UserHandle v33 = new UserHandle(p5);
Bundle v35 = v32.getUserRestrictions(v33);
boolean v36 = v35.getBoolean("no_modify_accounts");

- API Name: addAccountAsUser(Landroid/accounts/IAccountManagerResponse;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;ZLandroid/os/Bundle;I)V with Similarity Score: 0.978636622428894
  - Access Control Level: SYS_OR_SIG and the following code:
Object v47 = this.mContext.getSystemService("device_policy");
String v48 = v47.getAccountTypesWithManagementDisabledAsUser(p7);

