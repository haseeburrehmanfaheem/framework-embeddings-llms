This is path 1 for the API with depth 2:
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
	AccountManagerService$UserAccounts v8 = v9;
	AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	boolean v13 = Log.isLoggable("AccountManagerService", 2);
	if (v13 == 0) {
		StringBuilder v14 = new StringBuilder();
		StringBuilder v16 = v14.append("initiating bind to authenticator type ");
		StringBuilder v17 = v14.append(this.mAccountType);
		String v18 = v14.toString();
		int v19 = Log.v("AccountManagerService", v18);
		IAccountAuthenticatorCache v21 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
		AuthenticatorDescription v22 = AuthenticatorDescription.newKey(this.mAccountType);
		int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
		RegisteredServicesCache$ServiceInfo v24 = v21.getServiceInfo(v22, v23);
		if (v24 != 0) {
			int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
			boolean v26 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v25);
			if (v26 != 0) {
				if (ComponentInfo.directBootAware != 0) {
					boolean v20 = 0;
					if (v20 != 0) {
						StringBuilder v34 = new StringBuilder();
						StringBuilder v36 = v34.append("bind attempt failed for ");
						long v38 = SystemClock.elapsedRealtime();
						String v39 = AccountManagerService$Session.toDebugString(v38);
						String v37 = v39;
						StringBuilder v40 = v34.append(v37);
						String v41 = v34.toString();
						int v42 = Log.d("AccountManagerService", v41);
						this.mNumErrors = (this.mNumErrors + 1);
						IAccountManagerResponse v44 = AccountManagerService$Session.getResponseAndClose();
						if (v44 == 0) {
							boolean v45 = Log.isLoggable("AccountManagerService", 2);
							if (v45 == 0) {
								StringBuilder v46 = new StringBuilder();
								Class v48 = AccountManagerService$Session.getClass();
								String v49 = v48.getSimpleName();
								StringBuilder v50 = v46.append(v49);
								StringBuilder v51 = v46.append(" calling onError() on response ");
								StringBuilder v52 = v46.append(v44);
								String v53 = v46.toString();
								int v54 = Log.v("AccountManagerService", v53);
								v44.onError(1, "bind failure");
								boolean v56 = Log.isLoggable("AccountManagerService", 2);
								if (v56 == 0) {
									int v57 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
									IAccountManager$Stub.restoreCallingIdentity(v7);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
	AccountManagerService$UserAccounts v8 = v9;
	AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	boolean v13 = Log.isLoggable("AccountManagerService", 2);
	if (v13 == 0) {
		StringBuilder v14 = new StringBuilder();
		StringBuilder v16 = v14.append("initiating bind to authenticator type ");
		StringBuilder v17 = v14.append(this.mAccountType);
		String v18 = v14.toString();
		int v19 = Log.v("AccountManagerService", v18);
		IAccountAuthenticatorCache v21 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
		AuthenticatorDescription v22 = AuthenticatorDescription.newKey(this.mAccountType);
		int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
		RegisteredServicesCache$ServiceInfo v24 = v21.getServiceInfo(v22, v23);
		if (v24 != 0) {
			int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
			boolean v26 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v25);
			if (v26 != 0) {
				if (ComponentInfo.directBootAware != 0) {
					boolean v20 = 0;
					if (v20 != 0) {
						StringBuilder v34 = new StringBuilder();
						StringBuilder v36 = v34.append("bind attempt failed for ");
						long v38 = SystemClock.elapsedRealtime();
						String v39 = AccountManagerService$Session.toDebugString(v38);
						String v37 = v39;
						StringBuilder v40 = v34.append(v37);
						String v41 = v34.toString();
						int v42 = Log.d("AccountManagerService", v41);
						this.mNumErrors = (this.mNumErrors + 1);
						IAccountManagerResponse v44 = AccountManagerService$Session.getResponseAndClose();
						if (v44 == 0) {
							boolean v45 = Log.isLoggable("AccountManagerService", 2);
							if (v45 == 0) {
								StringBuilder v46 = new StringBuilder();
								Class v48 = AccountManagerService$Session.getClass();
								String v49 = v48.getSimpleName();
								StringBuilder v50 = v46.append(v49);
								StringBuilder v51 = v46.append(" calling onError() on response ");
								StringBuilder v52 = v46.append(v44);
								String v53 = v46.toString();
								int v54 = Log.v("AccountManagerService", v53);
								v44.onError(1, "bind failure");
								boolean v56 = Log.isLoggable("AccountManagerService", 2);
								if (v56 == 0) {
									int v57 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
									IAccountManager$Stub.restoreCallingIdentity(v7);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void getAuthTokenLabel(IAccountManagerResponse p1, String p2, String p3){
	int v6 = UserHandle.getUserId(v3);
	long v7 = IAccountManager$Stub.clearCallingIdentity();
	AccountManagerService$UserAccounts v9 = AccountManagerService.getUserAccountsNotChecked(v6);
	AccountManagerService$UserAccounts v8 = v9;
	AccountManagerService$7 v10 = new AccountManagerService$7(p0,v8,p1,p2,0,0,0,0,p2,p3);
	boolean v13 = Log.isLoggable("AccountManagerService", 2);
	if (v13 == 0) {
		StringBuilder v14 = new StringBuilder();
		StringBuilder v16 = v14.append("initiating bind to authenticator type ");
		StringBuilder v17 = v14.append(this.mAccountType);
		String v18 = v14.toString();
		int v19 = Log.v("AccountManagerService", v18);
		IAccountAuthenticatorCache v21 = AccountManagerService.-$$Nest$fgetmAuthenticatorCache(this.this$0);
		AuthenticatorDescription v22 = AuthenticatorDescription.newKey(this.mAccountType);
		int v23 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
		RegisteredServicesCache$ServiceInfo v24 = v21.getServiceInfo(v22, v23);
		if (v24 != 0) {
			int v25 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(this.mAccounts);
			boolean v26 = AccountManagerService.-$$Nest$misLocalUnlockedUser(this.this$0, v25);
			if (v26 != 0) {
				if (ComponentInfo.directBootAware != 0) {
					boolean v20 = 0;
					if (v20 != 0) {
						StringBuilder v34 = new StringBuilder();
						StringBuilder v36 = v34.append("bind attempt failed for ");
						long v38 = SystemClock.elapsedRealtime();
						String v39 = AccountManagerService$Session.toDebugString(v38);
						String v37 = v39;
						StringBuilder v40 = v34.append(v37);
						String v41 = v34.toString();
						int v42 = Log.d("AccountManagerService", v41);
						this.mNumErrors = (this.mNumErrors + 1);
						IAccountManagerResponse v44 = AccountManagerService$Session.getResponseAndClose();
						if (v44 == 0) {
							boolean v45 = Log.isLoggable("AccountManagerService", 2);
							if (v45 == 0) {
								StringBuilder v46 = new StringBuilder();
								Class v48 = AccountManagerService$Session.getClass();
								String v49 = v48.getSimpleName();
								StringBuilder v50 = v46.append(v49);
								StringBuilder v51 = v46.append(" calling onError() on response ");
								StringBuilder v52 = v46.append(v44);
								String v53 = v46.toString();
								int v54 = Log.v("AccountManagerService", v53);
								v44.onError(1, "bind failure");
								boolean v56 = Log.isLoggable("AccountManagerService", 2);
								if (v56 == 0) {
									int v57 = Log.v("AccountManagerService", "Session.onError: caught RemoteException while responding", caughtException);
									IAccountManager$Stub.restoreCallingIdentity(v7);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
