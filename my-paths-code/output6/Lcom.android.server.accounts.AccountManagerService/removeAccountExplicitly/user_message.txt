This is path 1 for the API with depth 2:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("removeAccountExplicitly: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", caller's uid ");
		StringBuilder v8 = v3.append(v1);
		StringBuilder v9 = v3.append(", pid ");
		int v10 = Binder.getCallingPid();
		StringBuilder v11 = v3.append(v10);
		String v12 = v3.toString();
		int v13 = Log.v("AccountManagerService", v12);
		UserHandle v14 = Binder.getCallingUserHandle();
		int v15 = v14.getIdentifier();
		if (p1 != 0) {
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					int v21 = UserHandle.getCallingUserId();
					AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v21);
					AccountManagerService$UserAccounts v22 = v23;
					AccountManagerService$UserAccounts v20 = v22;
					long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
					if ((this.mDebugDbInsertionPoint < -1) != 0) {
						this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
						long v26 = this.mDebugDbInsertionPoint;
						if ((v26 < -1) == 0) {
							AccountManagerService$1LogRecordTask v27 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v24,v20,v1,v26);
							boolean v29 = this.mHandler.post(v27);
							long v30 = IAccountManager$Stub.clearCallingIdentity();
							boolean v31 = p0.removeAccountInternal(v20, p1, v1);
							IAccountManager$Stub.restoreCallingIdentity(v30);
							return v31;
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		StringBuilder v3 = new StringBuilder();
		StringBuilder v5 = v3.append("removeAccountExplicitly: ");
		StringBuilder v6 = v3.append(p1);
		StringBuilder v7 = v3.append(", caller's uid ");
		StringBuilder v8 = v3.append(v1);
		StringBuilder v9 = v3.append(", pid ");
		int v10 = Binder.getCallingPid();
		StringBuilder v11 = v3.append(v10);
		String v12 = v3.toString();
		int v13 = Log.v("AccountManagerService", v12);
		UserHandle v14 = Binder.getCallingUserHandle();
		int v15 = v14.getIdentifier();
		if (p1 != 0) {
			if (Account.type != 0) {
				List v18 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v17 = v18;
				boolean v19 = v17.contains(Account.type);
				boolean v16 = v19;
				if (v16 == 0) {
					int v21 = UserHandle.getCallingUserId();
					AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v21);
					AccountManagerService$UserAccounts v22 = v23;
					AccountManagerService$UserAccounts v20 = v22;
					long v24 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
					if ((this.mDebugDbInsertionPoint < -1) != 0) {
						long v27 = AccountsDb.calculateDebugTableInsertionPoint();
						this.mDebugDbInsertionPoint = v27;
						long v26 = this.mDebugDbInsertionPoint;
						if ((v26 < -1) == 0) {
							AccountManagerService$1LogRecordTask v28 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v24,v20,v1,v26);
							boolean v30 = this.mHandler.post(v28);
							long v31 = IAccountManager$Stub.clearCallingIdentity();
							boolean v32 = p0.removeAccountInternal(v20, p1, v1);
							IAccountManager$Stub.restoreCallingIdentity(v31);
							return v32;
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public boolean removeAccountExplicitly(Account p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		UserHandle v3 = Binder.getCallingUserHandle();
		int v4 = v3.getIdentifier();
		if (p1 != 0) {
			if (Account.type != 0) {
				List v7 = AccountManagerService.getTypesForCaller(p2, p3, 0);
				List v6 = v7;
				boolean v8 = v6.contains(Account.type);
				boolean v5 = v8;
				if (v5 == 0) {
					int v10 = UserHandle.getCallingUserId();
					AccountManagerService$UserAccounts v12 = AccountManagerService.getUserAccountsNotChecked(v10);
					AccountManagerService$UserAccounts v11 = v12;
					AccountManagerService$UserAccounts v9 = v11;
					long v13 = AccountManagerService$UserAccounts.accountsDb.findDeAccountId(p1);
					if ((this.mDebugDbInsertionPoint < -1) != 0) {
						this.mDebugDbInsertionPoint = ((this.mDebugDbInsertionPoint + 1) % 64);
						long v15 = this.mDebugDbInsertionPoint;
						if ((v15 < -1) == 0) {
							AccountManagerService$1LogRecordTask v16 = new AccountManagerService$1LogRecordTask(AccountManagerService,AccountsDb.DEBUG_ACTION_CALLED_ACCOUNT_REMOVE,"accounts",v13,v9,v1,v15);
							boolean v18 = this.mHandler.post(v16);
							long v19 = IAccountManager$Stub.clearCallingIdentity();
							boolean v20 = p0.removeAccountInternal(v9, p1, v1);
							IAccountManager$Stub.restoreCallingIdentity(v19);
							return v20;
						}
					}
				}
			}
		}
	}
}
