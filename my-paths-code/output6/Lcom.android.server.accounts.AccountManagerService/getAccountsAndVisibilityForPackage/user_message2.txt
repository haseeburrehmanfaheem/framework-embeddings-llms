The method getAccountsAndVisibilityForPackage has the following code snippet:

This is path 1 for the API with depth 2:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	if (v13 == 0) {
		List v4 = v5;
		if (p2 == 0) {
			boolean v14 = v4.contains(p2);
			if (v14 == 0) {
				if (p2 != 0) {
					if (v3 == 0) {
						if (p2 == 0) {
							ArrayList v15 = new ArrayList();
							boolean v17 = v15.add(p2);
							long v18 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2);
							Integer v20 = Integer.valueOf(v1);
							int v22 = this.userId;
							long v24 = IAccountManager$Stub.clearCallingIdentity();
							int v25 = this.mPackageManager.getPackageUidAsUser(p1, v22);
							IAccountManager$Stub.restoreCallingIdentity(v24);
							boolean v23 = 0;
							if (v23 != 0) {
								LinkedHashMap v27 = new LinkedHashMap();
								Iterator v29 = .iterator();
								boolean v30 = v29.hasNext();
								if (v30 == 0) {
									int v31 = v20.intValue();
									UserManager v33 = AccountManagerService.getUserManager();
									if (v33 == 0) {
										if (p4 == 0) {
											int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
											if (v34 < 0) {
												if (v31 != 1000) {
													UserManager v35 = AccountManagerService.getUserManager();
													int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
													UserInfo v37 = v35.getUserInfo(v36);
													if (v37 == 0) {
														boolean v38 = v37.isRestricted();
														if (v38 == 0) {
															String v39 = this.mPackageManager.getPackagesForUid(v31);
															if (v39 != 0) {
																String v40 = new String(0);
																Resources v41 = this.mContext.getResources();
																String v42 = v41.getString(17039884);
																if ( >= .length) {
																	StringBuilder v43 = new StringBuilder();
																	StringBuilder v45 = v43.append(";");
																	StringBuilder v46 = v43.append([]);
																	StringBuilder v47 = v43.append(";");
																	String v48 = v43.toString();
																	boolean v49 = v42.contains(v48);
																	if (v49 == 0) {
																		Map v32 = v27;
																		Map v21 = v32;
																		IAccountManager$Stub.restoreCallingIdentity(v18);
																		return v21;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	if (v13 == 0) {
		List v4 = v5;
		if (p2 == 0) {
			boolean v14 = v4.contains(p2);
			if (v14 == 0) {
				if (p2 != 0) {
					if (v3 == 0) {
						if (p2 == 0) {
							ArrayList v15 = new ArrayList();
							boolean v17 = v15.add(p2);
							long v18 = IAccountManager$Stub.clearCallingIdentity();
							AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2);
							Integer v20 = Integer.valueOf(v1);
							int v22 = this.userId;
							long v24 = IAccountManager$Stub.clearCallingIdentity();
							IAccountManager$Stub.restoreCallingIdentity(v24);
							boolean v23 = 0;
							if (v23 != 0) {
								LinkedHashMap v26 = new LinkedHashMap();
								Iterator v28 = .iterator();
								boolean v29 = v28.hasNext();
								if (v29 == 0) {
									int v30 = v20.intValue();
									UserManager v32 = AccountManagerService.getUserManager();
									if (v32 == 0) {
										if (p4 == 0) {
											int v33 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
											if (v33 < 0) {
												if (v30 != 1000) {
													UserManager v34 = AccountManagerService.getUserManager();
													int v35 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
													UserInfo v36 = v34.getUserInfo(v35);
													if (v36 == 0) {
														boolean v37 = v36.isRestricted();
														if (v37 == 0) {
															String v38 = this.mPackageManager.getPackagesForUid(v30);
															if (v38 != 0) {
																String v39 = new String(0);
																Resources v40 = this.mContext.getResources();
																String v41 = v40.getString(17039884);
																if ( >= .length) {
																	StringBuilder v42 = new StringBuilder();
																	StringBuilder v44 = v42.append(";");
																	StringBuilder v45 = v42.append([]);
																	StringBuilder v46 = v42.append(";");
																	String v47 = v42.toString();
																	boolean v48 = v41.contains(v47);
																	if (v48 == 0) {
																		Map v31 = v26;
																		Map v21 = v31;
																		IAccountManager$Stub.restoreCallingIdentity(v18);
																		return v21;
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public Map getAccountsAndVisibilityForPackage(String p1, String p2){
	ArrayList v5 = new ArrayList();
	long v7 = Binder.clearCallingIdentity();
	Collection v8 = this.mAuthenticatorCache.getAllServices(v2);
	Binder.restoreCallingIdentity(v7);
	Object v11 = this.sLocalServiceObjects.get(PackageManagerInterna.class);
	Object v10 = v11;
	Iterator v12 = v8.iterator();
	boolean v13 = v12.hasNext();
	if (v13 == 0) {
		List v4 = v5;
		if (p2 == 0) {
			boolean v14 = v4.contains(p2);
			if (v14 == 0) {
				if (p2 != 0) {
					if (p2 == 0) {
						ArrayList v15 = new ArrayList();
						boolean v17 = v15.add(p2);
						long v18 = IAccountManager$Stub.clearCallingIdentity();
						AccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2);
						Integer v20 = Integer.valueOf(v1);
						int v22 = this.userId;
						long v24 = IAccountManager$Stub.clearCallingIdentity();
						int v25 = this.mPackageManager.getPackageUidAsUser(p1, v22);
						IAccountManager$Stub.restoreCallingIdentity(v24);
						boolean v23 = 0;
						if (v23 != 0) {
							LinkedHashMap v27 = new LinkedHashMap();
							Iterator v29 = .iterator();
							boolean v30 = v29.hasNext();
							if (v30 == 0) {
								int v31 = v20.intValue();
								UserManager v33 = AccountManagerService.getUserManager();
								if (v33 == 0) {
									if (p4 == 0) {
										int v34 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
										if (v34 < 0) {
											if (v31 != 1000) {
												UserManager v35 = AccountManagerService.getUserManager();
												int v36 = AccountManagerService$UserAccounts.-$$Nest$fgetuserId(p4);
												UserInfo v37 = v35.getUserInfo(v36);
												if (v37 == 0) {
													boolean v38 = v37.isRestricted();
													if (v38 == 0) {
														String v39 = this.mPackageManager.getPackagesForUid(v31);
														if (v39 != 0) {
															String v40 = new String(0);
															Resources v41 = this.mContext.getResources();
															String v42 = v41.getString(17039884);
															if ( >= .length) {
																StringBuilder v43 = new StringBuilder();
																StringBuilder v45 = v43.append(";");
																StringBuilder v46 = v43.append([]);
																StringBuilder v47 = v43.append(";");
																String v48 = v43.toString();
																boolean v49 = v42.contains(v48);
																if (v49 == 0) {
																	Map v32 = v27;
																	Map v21 = v32;
																	IAccountManager$Stub.restoreCallingIdentity(v18);
																	return v21;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Collection v8 = this.mAuthenticatorCache.getAllServices(v2);\nAccountManagerService$UserAccounts v19 = p0.getUserAccounts(v2);\nLinkedHashMap v27 = new LinkedHashMap();\nreturn v21;', 'ArrayList v5 = new ArrayList();\nboolean v14 = v4.contains(p2);\nInteger v20 = Integer.valueOf(v1);\nint v25 = this.mPackageManager.getPackageUidAsUser(p1, v22);']

The method getAccountsAndVisibilityForPackage has the following similar APIs:

- API Name: getAuthenticatorTypes(I)[Landroid/accounts/AuthenticatorDescription; with Similarity Score: 0.8228168487548828
  - Access Control Level: SYS_OR_SIG and the following code:
Collection v20 = this.mAuthenticatorCache.getAllServices(p1);
int v21 = v20.size();
AuthenticatorDescription v22 = new AuthenticatorDescription(v21);
return v18;

- API Name: addOnMediaKeyEventDispatchedListener(Landroid/media/session/IOnMediaKeyEventDispatchedListener;)V with Similarity Score: 0.8170595169067383
  - Access Control Level: NONE and the following code:
PackageManager v24 = this.mContext.getPackageManager();
String v25 = v24.getPackagesForUid(p2);

