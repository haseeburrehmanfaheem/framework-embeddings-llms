This is path 1 for the API with depth 2:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("getAccount: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
				AccountManagerService$UserAccounts v22 = v23;
				boolean v24 = ArrayUtils.isEmpty(p3);
				if (v24 == 0) {
					boolean v26 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
					Preconditions.checkState((v26 ^ 1), "Method should not be called with cacheLock");
					if (p2 == 0) {
						Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
						Iterator v29 = v28.iterator();
						boolean v30 = v29.hasNext();
						if (v30 == 0) {
							if ( != 0) {
								Account v31 = new Account();
								Collection v32 = AccountManagerService$UserAccounts.accountCache.values();
								Iterator v33 = v32.iterator();
								boolean v34 = v33.hasNext();
								if (v34 == 0) {
									if (p4 != 0) {
										String v36 = AccountManagerService.getPackageNameForUid(p3);
										LinkedHashMap v37 = new LinkedHashMap();
										if ( >= v31.length) {
											Map v39 = AccountManagerService.filterSharedAccounts(p1, v37, p3, p4);
											int v40 = v39.size();
											Account v41 = new Account(v40);
											Set v42 = v39.keySet();
											Object v43 = v42.toArray(v41);
											Account v35 = v43;
											Account v25 = v35;
											if (p2.length >= 1) {
												if (p2.length <= 1) {
													int v46 = UserHandle.getCallingUserId();
													AccountManagerService$UserAccounts v47 = AccountManagerService.getUserAccounts(v46);
													Integer v48 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v47);
													int v49 = v48.intValue();
													if (v49 != 4) {
														boolean v45 = 1;
														if (v45 == 0) {
															if (v25.length != 1) {
																Bundle v50 = new Bundle();
																v50.putString("authAccount", Account.name);
																v50.putString("accountType", Account.type);
																if (v50 != 0) {
																	Exception v55 = new Exception();
																	int v57 = Log.e("AccountManagerService", "the result is unexpectedly null", v55);
																	boolean v58 = Log.isLoggable("AccountManagerService", 2);
																	if (v58 == 0) {
																		StringBuilder v59 = new StringBuilder();
																		Class v61 = AccountManagerService.getClass();
																		String v62 = v61.getSimpleName();
																		StringBuilder v63 = v59.append(v62);
																		StringBuilder v64 = v59.append(" calling onResult() on response ");
																		StringBuilder v65 = v59.append(p1);
																		String v66 = v59.toString();
																		int v67 = Log.v("AccountManagerService", v66);
																		p1.onResult(v50);
																		boolean v69 = Log.isLoggable("AccountManagerService", 2);
																		if (v69 == 0) {
																			int v70 = Log.v("AccountManagerService", "failure while notifying response", caughtException);
																			IAccountManager$Stub.restoreCallingIdentity(v21);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("getAccount: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
				AccountManagerService$UserAccounts v22 = v23;
				boolean v24 = ArrayUtils.isEmpty(p3);
				if (v24 == 0) {
					boolean v26 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
					Preconditions.checkState((v26 ^ 1), "Method should not be called with cacheLock");
					if (p2 == 0) {
						Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
						Iterator v29 = v28.iterator();
						boolean v30 = v29.hasNext();
						if (v30 == 0) {
							if ( != 0) {
								Account v31 = new Account();
								Collection v32 = AccountManagerService$UserAccounts.accountCache.values();
								Iterator v33 = v32.iterator();
								boolean v34 = v33.hasNext();
								if (v34 == 0) {
									if (p4 != 0) {
										String v36 = AccountManagerService.getPackageNameForUid(p3);
										LinkedHashMap v37 = new LinkedHashMap();
										if ( >= v31.length) {
											Map v39 = AccountManagerService.filterSharedAccounts(p1, v37, p3, p4);
											int v40 = v39.size();
											Account v41 = new Account(v40);
											Set v42 = v39.keySet();
											Object v43 = v42.toArray(v41);
											Account v35 = v43;
											Account v25 = v35;
											if (p2.length >= 1) {
												if (p2.length <= 1) {
													int v46 = UserHandle.getCallingUserId();
													AccountManagerService$UserAccounts v47 = AccountManagerService.getUserAccounts(v46);
													Integer v48 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v47);
													int v49 = v48.intValue();
													if (v49 != 4) {
														boolean v45 = 0;
														if (v45 == 0) {
															if (v25.length != 1) {
																Bundle v50 = new Bundle();
																v50.putString("authAccount", Account.name);
																v50.putString("accountType", Account.type);
																if (v50 != 0) {
																	Exception v55 = new Exception();
																	int v57 = Log.e("AccountManagerService", "the result is unexpectedly null", v55);
																	boolean v58 = Log.isLoggable("AccountManagerService", 2);
																	if (v58 == 0) {
																		StringBuilder v59 = new StringBuilder();
																		Class v61 = AccountManagerService.getClass();
																		String v62 = v61.getSimpleName();
																		StringBuilder v63 = v59.append(v62);
																		StringBuilder v64 = v59.append(" calling onResult() on response ");
																		StringBuilder v65 = v59.append(p1);
																		String v66 = v59.toString();
																		int v67 = Log.v("AccountManagerService", v66);
																		p1.onResult(v50);
																		boolean v69 = Log.isLoggable("AccountManagerService", 2);
																		if (v69 == 0) {
																			int v70 = Log.v("AccountManagerService", "failure while notifying response", caughtException);
																			IAccountManager$Stub.restoreCallingIdentity(v21);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void getAccountByTypeAndFeatures(IAccountManagerResponse p1, String p2, String p3, String p4){
	boolean v3 = Log.isLoggable("AccountManagerService", 2);
	if (v3 == 0) {
		StringBuilder v4 = new StringBuilder();
		StringBuilder v6 = v4.append("getAccount: accountType ");
		StringBuilder v7 = v4.append(p2);
		StringBuilder v8 = v4.append(", response ");
		StringBuilder v9 = v4.append(p1);
		StringBuilder v10 = v4.append(", features ");
		String v11 = Arrays.toString(p3);
		StringBuilder v12 = v4.append(v11);
		StringBuilder v13 = v4.append(", caller's uid ");
		StringBuilder v14 = v4.append(v1);
		StringBuilder v15 = v4.append(", pid ");
		int v16 = Binder.getCallingPid();
		StringBuilder v17 = v4.append(v16);
		String v18 = v4.toString();
		int v19 = Log.v("AccountManagerService", v18);
		if (p1 == 0) {
			if (p2 == 0) {
				int v20 = UserHandle.getCallingUserId();
				long v21 = IAccountManager$Stub.clearCallingIdentity();
				AccountManagerService$UserAccounts v23 = AccountManagerService.getUserAccountsNotChecked(v20);
				AccountManagerService$UserAccounts v22 = v23;
				boolean v24 = ArrayUtils.isEmpty(p3);
				if (v24 == 0) {
					boolean v26 = Thread.holdsLock(AccountManagerService$UserAccounts.cacheLock);
					Preconditions.checkState((v26 ^ 1), "Method should not be called with cacheLock");
					if (p2 == 0) {
						Collection v28 = AccountManagerService$UserAccounts.accountCache.values();
						Iterator v29 = v28.iterator();
						boolean v30 = v29.hasNext();
						if (v30 == 0) {
							if ( != 0) {
								Account v31 = new Account();
								Collection v32 = AccountManagerService$UserAccounts.accountCache.values();
								Iterator v33 = v32.iterator();
								boolean v34 = v33.hasNext();
								if (v34 == 0) {
									if (p4 != 0) {
										LinkedHashMap v36 = new LinkedHashMap();
										if ( >= v31.length) {
											Map v38 = AccountManagerService.filterSharedAccounts(p1, v36, p3, p4);
											int v39 = v38.size();
											Account v40 = new Account(v39);
											Set v41 = v38.keySet();
											Object v42 = v41.toArray(v40);
											Account v35 = v42;
											Account v25 = v35;
											if (p2.length >= 1) {
												if (p2.length <= 1) {
													int v45 = UserHandle.getCallingUserId();
													AccountManagerService$UserAccounts v46 = AccountManagerService.getUserAccounts(v45);
													Integer v47 = AccountManagerService.resolveAccountVisibility(p2[0], p3, v46);
													int v48 = v47.intValue();
													if (v48 != 4) {
														boolean v44 = 1;
														if (v44 == 0) {
															if (v25.length != 1) {
																Bundle v49 = new Bundle();
																v49.putString("authAccount", Account.name);
																v49.putString("accountType", Account.type);
																if (v49 != 0) {
																	Exception v54 = new Exception();
																	int v56 = Log.e("AccountManagerService", "the result is unexpectedly null", v54);
																	boolean v57 = Log.isLoggable("AccountManagerService", 2);
																	if (v57 == 0) {
																		StringBuilder v58 = new StringBuilder();
																		Class v60 = AccountManagerService.getClass();
																		String v61 = v60.getSimpleName();
																		StringBuilder v62 = v58.append(v61);
																		StringBuilder v63 = v58.append(" calling onResult() on response ");
																		StringBuilder v64 = v58.append(p1);
																		String v65 = v58.toString();
																		int v66 = Log.v("AccountManagerService", v65);
																		p1.onResult(v49);
																		boolean v68 = Log.isLoggable("AccountManagerService", 2);
																		if (v68 == 0) {
																			int v69 = Log.v("AccountManagerService", "failure while notifying response", caughtException);
																			IAccountManager$Stub.restoreCallingIdentity(v21);
																			return;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
