The method getUserData has the following code snippet:

This is path 1 for the API with depth 2:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = new Object(4);
		Integer v4 = Integer.valueOf(v1);
		int v5 = Binder.getCallingPid();
		Integer v6 = Integer.valueOf(v5);
		String v7 = String.format("getUserData( account: %s, key: %s, callerUid: %s, pid: %s", v3);
		int v8 = Log.v("AccountManagerService", v7);
		Object v9 = Objects.requireNonNull(p1, "account cannot be null");
		Object v10 = Objects.requireNonNull(p2, "key cannot be null");
		int v11 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v13 = v14;
			boolean v15 = v13.contains(Account.type);
			boolean v12 = v15;
			if (v12 == 0) {
				boolean v16 = p0.isLocalUnlockedUser(v11);
				if (v16 != 0) {
					long v17 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v11);
					boolean v19 = p0.accountExistsCache(v18, p1);
					if (v19 != 0) {
						Map v21 = this.userDataCache;
						Object v22 = v21.get(p1);
						if (v22 != 0) {
							Map v23 = this.userDataCache;
							Object v24 = v23.get(p1);
							if (v24 != 0) {
								SQLiteDatabase v26 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
								HashMap v27 = new HashMap();
								String v29 = new String(2);
								Cursor v30 = v26.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v29, 0, 0, 0);
								boolean v31 = v30.moveToNext();
								if (v31 == 0) {
									v30.close();
									Map v25 = v27;
									Map v33 = this.userDataCache;
									Object v34 = v33.put(p1, v25);
									Object v35 = .get(p2);
									String v20 = v35;
									IAccountManager$Stub.restoreCallingIdentity(v17);
									return v20;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = Objects.requireNonNull(p1, "account cannot be null");
		Object v4 = Objects.requireNonNull(p2, "key cannot be null");
		int v5 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v8 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v7 = v8;
			boolean v9 = v7.contains(Account.type);
			boolean v6 = v9;
			if (v6 == 0) {
				boolean v10 = p0.isLocalUnlockedUser(v5);
				if (v10 != 0) {
					long v11 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v12 = p0.getUserAccounts(v5);
					boolean v13 = p0.accountExistsCache(v12, p1);
					if (v13 != 0) {
						Map v15 = this.userDataCache;
						Object v16 = v15.get(p1);
						if (v16 != 0) {
							Map v17 = this.userDataCache;
							Object v18 = v17.get(p1);
							if (v18 != 0) {
								SQLiteDatabase v20 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
								HashMap v21 = new HashMap();
								String v23 = new String(2);
								Cursor v24 = v20.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v23, 0, 0, 0);
								boolean v25 = v24.moveToNext();
								if (v25 == 0) {
									v24.close();
									Map v19 = v21;
									Map v27 = this.userDataCache;
									Object v28 = v27.put(p1, v19);
									Object v29 = .get(p2);
									String v14 = v29;
									IAccountManager$Stub.restoreCallingIdentity(v11);
									return v14;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public String getUserData(Account p1, String p2){
	int v1 = Binder.getCallingUid();
	boolean v2 = Log.isLoggable("AccountManagerService", 2);
	if (v2 == 0) {
		Object v3 = new Object(4);
		Integer v4 = Integer.valueOf(v1);
		int v5 = Binder.getCallingPid();
		Integer v6 = Integer.valueOf(v5);
		String v7 = String.format("getUserData( account: %s, key: %s, callerUid: %s, pid: %s", v3);
		int v8 = Log.v("AccountManagerService", v7);
		Object v9 = Objects.requireNonNull(p1, "account cannot be null");
		Object v10 = Objects.requireNonNull(p2, "key cannot be null");
		int v11 = UserHandle.getCallingUserId();
		if (Account.type != 0) {
			List v14 = AccountManagerService.getTypesForCaller(p2, p3, 0);
			List v13 = v14;
			boolean v15 = v13.contains(Account.type);
			boolean v12 = v15;
			if (v12 == 0) {
				boolean v16 = p0.isLocalUnlockedUser(v11);
				if (v16 != 0) {
					long v17 = IAccountManager$Stub.clearCallingIdentity();
					AccountManagerService$UserAccounts v18 = p0.getUserAccounts(v11);
					boolean v19 = p0.accountExistsCache(v18, p1);
					if (v19 != 0) {
						Map v21 = this.userDataCache;
						Object v22 = v21.get(p1);
						if (v22 != 0) {
							Map v23 = this.userDataCache;
							Object v24 = v23.get(p1);
							if (v24 != 0) {
								Object v25 = .get(p2);
								String v20 = v25;
								IAccountManager$Stub.restoreCallingIdentity(v17);
								return v20;
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Map v21 = this.userDataCache;\nObject v22 = v21.get(p1);\nObject v25 = .get(p2);\nString v20 = v25;\nreturn v20;', 'HashMap v21 = new HashMap();\nSQLiteDatabase v26 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();\nCursor v30 = v26.query("ceDb.extras", this.COLUMNS_EXTRAS_KEY_AND_VALUE, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", v29, 0, 0, 0);\nboolean v31 = v30.moveToNext();\nMap v25 = v27;\nObject v35 = .get(p2);\nString v20 = v35;']

The method getUserData has the following similar APIs:

- API Name: getPassword(Landroid/accounts/Account;)Ljava/lang/String; with Similarity Score: 0.9013240337371826
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v27 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
String v28 = new String(2);
String v29 = new String(1);
Cursor v30 = v27.query("ceDb.accounts", v29, "name=? AND type=?", v28, 0, 0, 0);
boolean v31 = v30.moveToNext();
if (v31 == 0) {
String v32 = v30.getString(0);
v30.close();
String v26 = v32;
String v22 = v26;
IAccountManager$Stub.restoreCallingIdentity(v20);
return v22;

- API Name: renameAccount(Landroid/accounts/IAccountManagerResponse;Landroid/accounts/Account;Ljava/lang/String;)V with Similarity Score: 0.8457567095756531
  - Access Control Level: SYS_OR_SIG and the following code:
Account v63 = new Account(p3,Account.type);
SQLiteDatabase v66 = this.mDeDatabase.getReadableDatabaseUserIsUnlocked();
Cursor v69 = v66.query("ceDb.accounts", v67, "name=? AND type=?", v68, 0, 0, 0);

