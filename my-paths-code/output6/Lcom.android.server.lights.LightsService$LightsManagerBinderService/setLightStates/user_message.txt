This is path 1 for the API with depth 2:
public void setLightStates(IBinder p1, [I p2, LightState p3){
	if (p2.length != p3.length) {
		Preconditions.checkState();
		Object v4 = Preconditions.checkNotNull(p1);
		int v6 = this.mSessions.size();
		if ( >= v6) {
			Object v7 = this.mSessions.get();
			boolean v8 = v4.equals(LightsService$LightsManagerBinderService$Session.mToken);
			if (v8 == 0) {
				Object v9 = this.mSessions.get();
				LightsService$LightsManagerBinderService$Session v5 = v9;
				if (v5 == 0) {
					Preconditions.checkState(, "not registered");
					if ( >= p2.length) {
						if ( >= p2.length) {
							HashMap v13 = new HashMap();
							int v15 = this.mSessions.size();
							if ( < 0) {
								SparseArray v16 = this.mLightsById;
								int v17 = v16.size();
								if ( >= v17) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setLightStates(IBinder p1, [I p2, LightState p3){
	if (p2.length != p3.length) {
		Preconditions.checkState();
		Object v4 = Preconditions.checkNotNull(p1);
		int v6 = this.mSessions.size();
		if ( >= v6) {
			Object v7 = this.mSessions.get();
			boolean v8 = v4.equals(LightsService$LightsManagerBinderService$Session.mToken);
			if (v8 == 0) {
				Object v9 = this.mSessions.get();
				LightsService$LightsManagerBinderService$Session v5 = v9;
				if (v5 == 0) {
					Preconditions.checkState(, "not registered");
					if ( >= p2.length) {
						if ( >= p2.length) {
							HashMap v13 = new HashMap();
							int v15 = this.mSessions.size();
							if ( < 0) {
								SparseArray v16 = this.mLightsById;
								int v17 = v16.size();
								if ( >= v17) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setLightStates(IBinder p1, [I p2, LightState p3){
	if (p2.length != p3.length) {
		Preconditions.checkState();
		Object v4 = Preconditions.checkNotNull(p1);
		int v6 = this.mSessions.size();
		if ( >= v6) {
			Object v7 = this.mSessions.get();
			boolean v8 = v4.equals(LightsService$LightsManagerBinderService$Session.mToken);
			if (v8 == 0) {
				Object v9 = this.mSessions.get();
				LightsService$LightsManagerBinderService$Session v5 = v9;
				if (v5 == 0) {
					Preconditions.checkState(, "not registered");
					if ( >= p2.length) {
						if ( >= p2.length) {
							HashMap v13 = new HashMap();
							int v15 = this.mSessions.size();
							if ( < 0) {
								SparseArray v16 = this.mLightsById;
								int v17 = v16.size();
								if ( >= v17) {
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
