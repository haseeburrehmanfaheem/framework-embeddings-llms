This is path 1 for the API with depth 2:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if ( >= v9.length) {
			PackageStats v12 = new PackageStats("StorageStatsService");
			boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
			if (v15 == 0) {
				int v14 = 0;
				if (this.mWarnIfHeld == 0) {
					boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
					if (v18 == 0) {
						Thread v22 = Thread.currentThread();
						String v23 = v22.getName();
						int v26 = System.identityHashCode(this.mWarnIfHeld);
						String v27 = Integer.toHexString(v26);
						if (this.mIsolated == 0) {
							boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
							if (v33 == 0) {
								Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
								boolean v17 = 1;
								if (v17 != 0) {
									boolean v36 = SystemProperties.getBoolean("fw.verify_storage", 0);
									if (v36 == 0) {
										PackageStats v37 = new PackageStats("StorageStatsService");
										if (this.mWarnIfHeld == 0) {
											boolean v41 = Thread.holdsLock(this.mWarnIfHeld);
											if (v41 == 0) {
												Thread v45 = Thread.currentThread();
												String v46 = v45.getName();
												int v49 = System.identityHashCode(this.mWarnIfHeld);
												String v50 = Integer.toHexString(v49);
												if (this.mIsolated == 0) {
													boolean v56 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
													if (v56 == 0) {
														Installer$InstallerException v57 = new Installer$InstallerException("time out waiting for the installer to be ready");
														boolean v40 = 1;
														if (v40 != 0) {
															StringBuilder v59 = new StringBuilder();
															StringBuilder v61 = v59.append("UID ");
															StringBuilder v62 = v59.append(p2);
															String v63 = v59.toString();
															StringBuilder v65 = new StringBuilder();
															StringBuilder v67 = v65.append(v63);
															StringBuilder v68 = v65.append(" codeSize");
															String v69 = v65.toString();
															if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																StringBuilder v71 = new StringBuilder();
																StringBuilder v73 = v71.append(v63);
																StringBuilder v74 = v71.append(" dataSize");
																String v75 = v71.toString();
																if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																	StringBuilder v77 = new StringBuilder();
																	StringBuilder v79 = v77.append(v63);
																	StringBuilder v80 = v77.append(" cacheSize");
																	String v81 = v77.toString();
																	if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																		StringBuilder v83 = new StringBuilder();
																		StringBuilder v85 = v83.append(v63);
																		StringBuilder v86 = v83.append(" externalCodeSize");
																		String v87 = v83.toString();
																		if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																			StringBuilder v89 = new StringBuilder();
																			StringBuilder v91 = v89.append(v63);
																			StringBuilder v92 = v89.append(" externalDataSize");
																			String v93 = v89.toString();
																			if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																				StringBuilder v95 = new StringBuilder();
																				StringBuilder v97 = v95.append(v63);
																				StringBuilder v98 = v95.append(" externalCacheSize");
																				String v99 = v95.toString();
																				if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																					if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																						StorageStatsService$$ExternalSyntheticLambda2 v101 = new StorageStatsService$$ExternalSyntheticLambda2(v12,p2,);
																						p0.forEachStorageStatsAugmenter(v101, "queryStatsForUid");
																						StorageStats v104 = StorageStatsService.translate(v12);
																						return v104;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if ( >= v9.length) {
			PackageStats v12 = new PackageStats("StorageStatsService");
			boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
			if (v15 == 0) {
				int v14 = 4096;
				if (this.mWarnIfHeld == 0) {
					boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
					if (v18 == 0) {
						Thread v22 = Thread.currentThread();
						String v23 = v22.getName();
						int v26 = System.identityHashCode(this.mWarnIfHeld);
						String v27 = Integer.toHexString(v26);
						if (this.mIsolated == 0) {
							boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
							if (v33 == 0) {
								Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
								boolean v17 = 1;
								if (v17 != 0) {
									boolean v36 = SystemProperties.getBoolean("fw.verify_storage", 0);
									if (v36 == 0) {
										PackageStats v37 = new PackageStats("StorageStatsService");
										if (this.mWarnIfHeld == 0) {
											boolean v41 = Thread.holdsLock(this.mWarnIfHeld);
											if (v41 == 0) {
												Thread v45 = Thread.currentThread();
												String v46 = v45.getName();
												int v49 = System.identityHashCode(this.mWarnIfHeld);
												String v50 = Integer.toHexString(v49);
												if (this.mIsolated == 0) {
													boolean v56 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
													if (v56 == 0) {
														Installer$InstallerException v57 = new Installer$InstallerException("time out waiting for the installer to be ready");
														boolean v40 = 1;
														if (v40 != 0) {
															StringBuilder v59 = new StringBuilder();
															StringBuilder v61 = v59.append("UID ");
															StringBuilder v62 = v59.append(p2);
															String v63 = v59.toString();
															StringBuilder v65 = new StringBuilder();
															StringBuilder v67 = v65.append(v63);
															StringBuilder v68 = v65.append(" codeSize");
															String v69 = v65.toString();
															if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																StringBuilder v71 = new StringBuilder();
																StringBuilder v73 = v71.append(v63);
																StringBuilder v74 = v71.append(" dataSize");
																String v75 = v71.toString();
																if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																	StringBuilder v77 = new StringBuilder();
																	StringBuilder v79 = v77.append(v63);
																	StringBuilder v80 = v77.append(" cacheSize");
																	String v81 = v77.toString();
																	if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																		StringBuilder v83 = new StringBuilder();
																		StringBuilder v85 = v83.append(v63);
																		StringBuilder v86 = v83.append(" externalCodeSize");
																		String v87 = v83.toString();
																		if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																			StringBuilder v89 = new StringBuilder();
																			StringBuilder v91 = v89.append(v63);
																			StringBuilder v92 = v89.append(" externalDataSize");
																			String v93 = v89.toString();
																			if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																				StringBuilder v95 = new StringBuilder();
																				StringBuilder v97 = v95.append(v63);
																				StringBuilder v98 = v95.append(" externalCacheSize");
																				String v99 = v95.toString();
																				if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																					if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																						StorageStatsService$$ExternalSyntheticLambda2 v101 = new StorageStatsService$$ExternalSyntheticLambda2(v12,p2,);
																						p0.forEachStorageStatsAugmenter(v101, "queryStatsForUid");
																						StorageStats v104 = StorageStatsService.translate(v12);
																						return v104;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public StorageStats queryStatsForUid(String p1, int p2, String p3){
	int v6 = Binder.getCallingUid();
	if (v7 != 0) {
		String v8 = this.mPackage.getPackagesForUid(p2);
		String v9 = ArrayUtils.defeatNullable(v8);
		[J v10 = new [J(v9.length);
		String v11 = new String(0);
		if ( >= v9.length) {
			PackageStats v12 = new PackageStats("StorageStatsService");
			boolean v15 = SystemProperties.getBoolean("fw.disable_quota", 0);
			if (v15 == 0) {
				int v14 = 0;
				if (this.mWarnIfHeld == 0) {
					boolean v18 = Thread.holdsLock(this.mWarnIfHeld);
					if (v18 == 0) {
						Thread v22 = Thread.currentThread();
						String v23 = v22.getName();
						int v26 = System.identityHashCode(this.mWarnIfHeld);
						String v27 = Integer.toHexString(v26);
						if (this.mIsolated == 0) {
							boolean v33 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
							if (v33 == 0) {
								Installer$InstallerException v34 = new Installer$InstallerException("time out waiting for the installer to be ready");
								boolean v17 = 1;
								if (v17 != 0) {
									boolean v36 = SystemProperties.getBoolean("fw.verify_storage", 0);
									if (v36 == 0) {
										PackageStats v37 = new PackageStats("StorageStatsService");
										if (this.mWarnIfHeld == 0) {
											boolean v41 = Thread.holdsLock(this.mWarnIfHeld);
											if (v41 == 0) {
												Thread v45 = Thread.currentThread();
												String v46 = v45.getName();
												int v49 = System.identityHashCode(this.mWarnIfHeld);
												String v50 = Integer.toHexString(v49);
												if (this.mIsolated == 0) {
													boolean v56 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
													if (v56 == 0) {
														Installer$InstallerException v57 = new Installer$InstallerException("time out waiting for the installer to be ready");
														boolean v40 = 1;
														if (v40 != 0) {
															StringBuilder v59 = new StringBuilder();
															StringBuilder v61 = v59.append("UID ");
															StringBuilder v62 = v59.append(p2);
															String v63 = v59.toString();
															StringBuilder v65 = new StringBuilder();
															StringBuilder v67 = v65.append(v63);
															StringBuilder v68 = v65.append(" codeSize");
															String v69 = v65.toString();
															if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
																StringBuilder v71 = new StringBuilder();
																StringBuilder v73 = v71.append(v63);
																StringBuilder v74 = v71.append(" dataSize");
																String v75 = v71.toString();
																if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																	StringBuilder v77 = new StringBuilder();
																	StringBuilder v79 = v77.append(v63);
																	StringBuilder v80 = v77.append(" cacheSize");
																	String v81 = v77.toString();
																	if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																		StringBuilder v83 = new StringBuilder();
																		StringBuilder v85 = v83.append(v63);
																		StringBuilder v86 = v83.append(" externalCodeSize");
																		String v87 = v83.toString();
																		if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																			StringBuilder v89 = new StringBuilder();
																			StringBuilder v91 = v89.append(v63);
																			StringBuilder v92 = v89.append(" externalDataSize");
																			String v93 = v89.toString();
																			if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																				StringBuilder v95 = new StringBuilder();
																				StringBuilder v97 = v95.append(v63);
																				StringBuilder v98 = v95.append(" externalCacheSize");
																				String v99 = v95.toString();
																				if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																					if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																						StorageStatsService$$ExternalSyntheticLambda2 v101 = new StorageStatsService$$ExternalSyntheticLambda2(v12,p2,);
																						p0.forEachStorageStatsAugmenter(v101, "queryStatsForUid");
																						StorageStats v104 = StorageStatsService.translate(v12);
																						return v104;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
