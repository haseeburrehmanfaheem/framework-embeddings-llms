This is path 1 for the API with depth 2:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		[I v5 = ;
		PackageStats v9 = new PackageStats("StorageStatsService");
		boolean v12 = SystemProperties.getBoolean("fw.disable_quota", 0);
		if (v12 == 0) {
			int v11 = 0;
			if (this.mWarnIfHeld == 0) {
				boolean v15 = Thread.holdsLock(this.mWarnIfHeld);
				if (v15 == 0) {
					Thread v19 = Thread.currentThread();
					String v20 = v19.getName();
					int v23 = System.identityHashCode(this.mWarnIfHeld);
					String v24 = Integer.toHexString(v23);
					if (this.mIsolated == 0) {
						boolean v30 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
						if (v30 == 0) {
							Installer$InstallerException v31 = new Installer$InstallerException("time out waiting for the installer to be ready");
							boolean v14 = 1;
							if (v14 != 0) {
								[J v33 = this.mInstalld.getUserSize(p1, p2, v11, v5);
								PackageStats.codeSize = (PackageStats.codeSize + v33[0]);
								PackageStats.dataSize = (PackageStats.dataSize + v33[1]);
								PackageStats.cacheSize = (PackageStats.cacheSize + v33[2]);
								PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v33[3]);
								PackageStats.externalDataSize = (PackageStats.externalDataSize + v33[4]);
								PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v33[5]);
								boolean v34 = SystemProperties.getBoolean("fw.verify_storage", 0);
								if (v34 == 0) {
									PackageStats v35 = new PackageStats("StorageStatsService");
									if (this.mWarnIfHeld == 0) {
										boolean v39 = Thread.holdsLock(this.mWarnIfHeld);
										if (v39 == 0) {
											Thread v43 = Thread.currentThread();
											String v44 = v43.getName();
											int v47 = System.identityHashCode(this.mWarnIfHeld);
											String v48 = Integer.toHexString(v47);
											if (this.mIsolated == 0) {
												boolean v54 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
												if (v54 == 0) {
													Installer$InstallerException v55 = new Installer$InstallerException("time out waiting for the installer to be ready");
													boolean v38 = 1;
													if (v38 != 0) {
														[J v57 = this.mInstalld.getUserSize(p1, p2, 0, v5);
														PackageStats.codeSize = (PackageStats.codeSize + v57[0]);
														PackageStats.dataSize = (PackageStats.dataSize + v57[1]);
														PackageStats.cacheSize = (PackageStats.cacheSize + v57[2]);
														PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v57[3]);
														PackageStats.externalDataSize = (PackageStats.externalDataSize + v57[4]);
														PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v57[5]);
														StringBuilder v58 = new StringBuilder();
														StringBuilder v60 = v58.append("User ");
														StringBuilder v61 = v58.append(p2);
														String v62 = v58.toString();
														StringBuilder v64 = new StringBuilder();
														StringBuilder v66 = v64.append(v62);
														StringBuilder v67 = v64.append(" codeSize");
														String v68 = v64.toString();
														if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
															StringBuilder v70 = new StringBuilder();
															StringBuilder v72 = v70.append(v62);
															StringBuilder v73 = v70.append(" dataSize");
															String v74 = v70.toString();
															if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																StringBuilder v76 = new StringBuilder();
																StringBuilder v78 = v76.append(v62);
																StringBuilder v79 = v76.append(" cacheSize");
																String v80 = v76.toString();
																if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																	StringBuilder v82 = new StringBuilder();
																	StringBuilder v84 = v82.append(v62);
																	StringBuilder v85 = v82.append(" externalCodeSize");
																	String v86 = v82.toString();
																	if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																		StringBuilder v88 = new StringBuilder();
																		StringBuilder v90 = v88.append(v62);
																		StringBuilder v91 = v88.append(" externalDataSize");
																		String v92 = v88.toString();
																		if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																			StringBuilder v94 = new StringBuilder();
																			StringBuilder v96 = v94.append(v62);
																			StringBuilder v97 = v94.append(" externalCacheSize");
																			String v98 = v94.toString();
																			if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																				if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																					UserHandle v100 = UserHandle.of(p2);
																					StorageStatsService$$ExternalSyntheticLambda1 v101 = new StorageStatsService$$ExternalSyntheticLambda1(v9,v100);
																					p0.forEachStorageStatsAugmenter(v101, "queryStatsForUser");
																					StorageStats v104 = StorageStatsService.translate(v9);
																					return v104;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		[I v5 = ;
		PackageStats v9 = new PackageStats("StorageStatsService");
		boolean v12 = SystemProperties.getBoolean("fw.disable_quota", 0);
		if (v12 == 0) {
			int v11 = 4096;
			if (this.mWarnIfHeld == 0) {
				boolean v15 = Thread.holdsLock(this.mWarnIfHeld);
				if (v15 == 0) {
					Thread v19 = Thread.currentThread();
					String v20 = v19.getName();
					int v23 = System.identityHashCode(this.mWarnIfHeld);
					String v24 = Integer.toHexString(v23);
					if (this.mIsolated == 0) {
						boolean v30 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
						if (v30 == 0) {
							Installer$InstallerException v31 = new Installer$InstallerException("time out waiting for the installer to be ready");
							boolean v14 = 1;
							if (v14 != 0) {
								[J v33 = this.mInstalld.getUserSize(p1, p2, v11, v5);
								PackageStats.codeSize = (PackageStats.codeSize + v33[0]);
								PackageStats.dataSize = (PackageStats.dataSize + v33[1]);
								PackageStats.cacheSize = (PackageStats.cacheSize + v33[2]);
								PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v33[3]);
								PackageStats.externalDataSize = (PackageStats.externalDataSize + v33[4]);
								PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v33[5]);
								boolean v34 = SystemProperties.getBoolean("fw.verify_storage", 0);
								if (v34 == 0) {
									PackageStats v35 = new PackageStats("StorageStatsService");
									if (this.mWarnIfHeld == 0) {
										boolean v39 = Thread.holdsLock(this.mWarnIfHeld);
										if (v39 == 0) {
											Thread v43 = Thread.currentThread();
											String v44 = v43.getName();
											int v47 = System.identityHashCode(this.mWarnIfHeld);
											String v48 = Integer.toHexString(v47);
											if (this.mIsolated == 0) {
												boolean v54 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
												if (v54 == 0) {
													Installer$InstallerException v55 = new Installer$InstallerException("time out waiting for the installer to be ready");
													boolean v38 = 1;
													if (v38 != 0) {
														[J v57 = this.mInstalld.getUserSize(p1, p2, 0, v5);
														PackageStats.codeSize = (PackageStats.codeSize + v57[0]);
														PackageStats.dataSize = (PackageStats.dataSize + v57[1]);
														PackageStats.cacheSize = (PackageStats.cacheSize + v57[2]);
														PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v57[3]);
														PackageStats.externalDataSize = (PackageStats.externalDataSize + v57[4]);
														PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v57[5]);
														StringBuilder v58 = new StringBuilder();
														StringBuilder v60 = v58.append("User ");
														StringBuilder v61 = v58.append(p2);
														String v62 = v58.toString();
														StringBuilder v64 = new StringBuilder();
														StringBuilder v66 = v64.append(v62);
														StringBuilder v67 = v64.append(" codeSize");
														String v68 = v64.toString();
														if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
															StringBuilder v70 = new StringBuilder();
															StringBuilder v72 = v70.append(v62);
															StringBuilder v73 = v70.append(" dataSize");
															String v74 = v70.toString();
															if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																StringBuilder v76 = new StringBuilder();
																StringBuilder v78 = v76.append(v62);
																StringBuilder v79 = v76.append(" cacheSize");
																String v80 = v76.toString();
																if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																	StringBuilder v82 = new StringBuilder();
																	StringBuilder v84 = v82.append(v62);
																	StringBuilder v85 = v82.append(" externalCodeSize");
																	String v86 = v82.toString();
																	if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																		StringBuilder v88 = new StringBuilder();
																		StringBuilder v90 = v88.append(v62);
																		StringBuilder v91 = v88.append(" externalDataSize");
																		String v92 = v88.toString();
																		if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																			StringBuilder v94 = new StringBuilder();
																			StringBuilder v96 = v94.append(v62);
																			StringBuilder v97 = v94.append(" externalCacheSize");
																			String v98 = v94.toString();
																			if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																				if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																					UserHandle v100 = UserHandle.of(p2);
																					StorageStatsService$$ExternalSyntheticLambda1 v101 = new StorageStatsService$$ExternalSyntheticLambda1(v9,v100);
																					p0.forEachStorageStatsAugmenter(v101, "queryStatsForUser");
																					StorageStats v104 = StorageStatsService.translate(v9);
																					return v104;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public StorageStats queryStatsForUser(String p1, int p2, String p3){
	int v2 = Binder.getCallingUid();
	List v5 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v6 = v5.iterator();
	boolean v7 = v6.hasNext();
	if (v7 == 0) {
		[I v4 = ;
		PackageStats v8 = new PackageStats("StorageStatsService");
		boolean v11 = SystemProperties.getBoolean("fw.disable_quota", 0);
		if (v11 == 0) {
			int v10 = 0;
			if (this.mWarnIfHeld == 0) {
				boolean v14 = Thread.holdsLock(this.mWarnIfHeld);
				if (v14 == 0) {
					Thread v18 = Thread.currentThread();
					String v19 = v18.getName();
					int v22 = System.identityHashCode(this.mWarnIfHeld);
					String v23 = Integer.toHexString(v22);
					if (this.mIsolated == 0) {
						boolean v29 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
						if (v29 == 0) {
							Installer$InstallerException v30 = new Installer$InstallerException("time out waiting for the installer to be ready");
							boolean v13 = 1;
							if (v13 != 0) {
								[J v32 = this.mInstalld.getUserSize(p1, p2, v10, v4);
								PackageStats.codeSize = (PackageStats.codeSize + v32[0]);
								PackageStats.dataSize = (PackageStats.dataSize + v32[1]);
								PackageStats.cacheSize = (PackageStats.cacheSize + v32[2]);
								PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v32[3]);
								PackageStats.externalDataSize = (PackageStats.externalDataSize + v32[4]);
								PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v32[5]);
								boolean v33 = SystemProperties.getBoolean("fw.verify_storage", 0);
								if (v33 == 0) {
									PackageStats v34 = new PackageStats("StorageStatsService");
									if (this.mWarnIfHeld == 0) {
										boolean v38 = Thread.holdsLock(this.mWarnIfHeld);
										if (v38 == 0) {
											Thread v42 = Thread.currentThread();
											String v43 = v42.getName();
											int v46 = System.identityHashCode(this.mWarnIfHeld);
											String v47 = Integer.toHexString(v46);
											if (this.mIsolated == 0) {
												boolean v53 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
												if (v53 == 0) {
													Installer$InstallerException v54 = new Installer$InstallerException("time out waiting for the installer to be ready");
													boolean v37 = 1;
													if (v37 != 0) {
														[J v56 = this.mInstalld.getUserSize(p1, p2, 0, v4);
														PackageStats.codeSize = (PackageStats.codeSize + v56[0]);
														PackageStats.dataSize = (PackageStats.dataSize + v56[1]);
														PackageStats.cacheSize = (PackageStats.cacheSize + v56[2]);
														PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v56[3]);
														PackageStats.externalDataSize = (PackageStats.externalDataSize + v56[4]);
														PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v56[5]);
														StringBuilder v57 = new StringBuilder();
														StringBuilder v59 = v57.append("User ");
														StringBuilder v60 = v57.append(p2);
														String v61 = v57.toString();
														StringBuilder v63 = new StringBuilder();
														StringBuilder v65 = v63.append(v61);
														StringBuilder v66 = v63.append(" codeSize");
														String v67 = v63.toString();
														if ((PackageStats.codeSize < PackageStats.codeSize) == 0) {
															StringBuilder v69 = new StringBuilder();
															StringBuilder v71 = v69.append(v61);
															StringBuilder v72 = v69.append(" dataSize");
															String v73 = v69.toString();
															if ((PackageStats.dataSize < PackageStats.dataSize) == 0) {
																StringBuilder v75 = new StringBuilder();
																StringBuilder v77 = v75.append(v61);
																StringBuilder v78 = v75.append(" cacheSize");
																String v79 = v75.toString();
																if ((PackageStats.cacheSize < PackageStats.cacheSize) == 0) {
																	StringBuilder v81 = new StringBuilder();
																	StringBuilder v83 = v81.append(v61);
																	StringBuilder v84 = v81.append(" externalCodeSize");
																	String v85 = v81.toString();
																	if ((PackageStats.externalCodeSize < PackageStats.externalCodeSize) == 0) {
																		StringBuilder v87 = new StringBuilder();
																		StringBuilder v89 = v87.append(v61);
																		StringBuilder v90 = v87.append(" externalDataSize");
																		String v91 = v87.toString();
																		if ((PackageStats.externalDataSize < PackageStats.externalDataSize) == 0) {
																			StringBuilder v93 = new StringBuilder();
																			StringBuilder v95 = v93.append(v61);
																			StringBuilder v96 = v93.append(" externalCacheSize");
																			String v97 = v93.toString();
																			if ((PackageStats.externalCacheSize < PackageStats.externalCacheSize) == 0) {
																				if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
																					UserHandle v99 = UserHandle.of(p2);
																					StorageStatsService$$ExternalSyntheticLambda1 v100 = new StorageStatsService$$ExternalSyntheticLambda1(v8,v99);
																					p0.forEachStorageStatsAugmenter(v100, "queryStatsForUser");
																					StorageStats v103 = StorageStatsService.translate(v8);
																					return v103;
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
