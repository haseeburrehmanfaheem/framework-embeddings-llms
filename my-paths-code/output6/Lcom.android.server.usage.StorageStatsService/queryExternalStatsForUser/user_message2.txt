The method queryExternalStatsForUser has the following code snippet:

This is path 1 for the API with depth 2:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		[I v5 = ;
		boolean v10 = SystemProperties.getBoolean("fw.disable_quota", 0);
		if (v10 == 0) {
			int v9 = 0;
			if (this.mWarnIfHeld == 0) {
				boolean v13 = Thread.holdsLock(this.mWarnIfHeld);
				if (v13 == 0) {
					Thread v17 = Thread.currentThread();
					String v18 = v17.getName();
					int v21 = System.identityHashCode(this.mWarnIfHeld);
					String v22 = Integer.toHexString(v21);
					if (this.mIsolated == 0) {
						boolean v28 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
						if (v28 == 0) {
							Installer$InstallerException v29 = new Installer$InstallerException("time out waiting for the installer to be ready");
							boolean v12 = 1;
							if (v12 != 0) {
								[J v31 = this.mInstalld.getExternalSize(p1, p2, v9, v5);
								[J v11 = v31;
								boolean v32 = SystemProperties.getBoolean("fw.verify_storage", 0);
								if (v32 == 0) {
									if (this.mWarnIfHeld == 0) {
										boolean v35 = Thread.holdsLock(this.mWarnIfHeld);
										if (v35 == 0) {
											Thread v39 = Thread.currentThread();
											String v40 = v39.getName();
											int v43 = System.identityHashCode(this.mWarnIfHeld);
											String v44 = Integer.toHexString(v43);
											if (this.mIsolated == 0) {
												boolean v50 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
												if (v50 == 0) {
													Installer$InstallerException v51 = new Installer$InstallerException("time out waiting for the installer to be ready");
													boolean v34 = 1;
													if (v34 != 0) {
														[J v53 = this.mInstalld.getExternalSize(p1, p2, 0, v5);
														[J v33 = v53;
														StringBuilder v54 = new StringBuilder();
														StringBuilder v56 = v54.append("External ");
														StringBuilder v57 = v54.append(p2);
														String v58 = v54.toString();
														StorageStatsService.checkEquals(v58, v33, v11);
														ExternalStorageStats v60 = new ExternalStorageStats();
														ExternalStorageStats.totalBytes = v11[0];
														ExternalStorageStats.audioBytes = v11[1];
														ExternalStorageStats.videoBytes = v11[2];
														ExternalStorageStats.imageBytes = v11[3];
														ExternalStorageStats.appBytes = v11[4];
														ExternalStorageStats.obbBytes = v11[5];
														return v60;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		[I v5 = ;
		boolean v10 = SystemProperties.getBoolean("fw.disable_quota", 0);
		if (v10 == 0) {
			int v9 = 4096;
			if (this.mWarnIfHeld == 0) {
				boolean v13 = Thread.holdsLock(this.mWarnIfHeld);
				if (v13 == 0) {
					Thread v17 = Thread.currentThread();
					String v18 = v17.getName();
					int v21 = System.identityHashCode(this.mWarnIfHeld);
					String v22 = Integer.toHexString(v21);
					if (this.mIsolated == 0) {
						boolean v28 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
						if (v28 == 0) {
							Installer$InstallerException v29 = new Installer$InstallerException("time out waiting for the installer to be ready");
							boolean v12 = 1;
							if (v12 != 0) {
								[J v31 = this.mInstalld.getExternalSize(p1, p2, v9, v5);
								[J v11 = v31;
								boolean v32 = SystemProperties.getBoolean("fw.verify_storage", 0);
								if (v32 == 0) {
									if (this.mWarnIfHeld == 0) {
										boolean v35 = Thread.holdsLock(this.mWarnIfHeld);
										if (v35 == 0) {
											Thread v39 = Thread.currentThread();
											String v40 = v39.getName();
											int v43 = System.identityHashCode(this.mWarnIfHeld);
											String v44 = Integer.toHexString(v43);
											if (this.mIsolated == 0) {
												boolean v50 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
												if (v50 == 0) {
													Installer$InstallerException v51 = new Installer$InstallerException("time out waiting for the installer to be ready");
													boolean v34 = 1;
													if (v34 != 0) {
														[J v53 = this.mInstalld.getExternalSize(p1, p2, 0, v5);
														[J v33 = v53;
														StringBuilder v54 = new StringBuilder();
														StringBuilder v56 = v54.append("External ");
														StringBuilder v57 = v54.append(p2);
														String v58 = v54.toString();
														StorageStatsService.checkEquals(v58, v33, v11);
														ExternalStorageStats v60 = new ExternalStorageStats();
														ExternalStorageStats.totalBytes = v11[0];
														ExternalStorageStats.audioBytes = v11[1];
														ExternalStorageStats.videoBytes = v11[2];
														ExternalStorageStats.imageBytes = v11[3];
														ExternalStorageStats.appBytes = v11[4];
														ExternalStorageStats.obbBytes = v11[5];
														return v60;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public ExternalStorageStats queryExternalStatsForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);
	Iterator v7 = v6.iterator();
	boolean v8 = v7.hasNext();
	if (v8 == 0) {
		[I v5 = ;
		boolean v10 = SystemProperties.getBoolean("fw.disable_quota", 0);
		if (v10 == 0) {
			int v9 = 0;
			if (this.mWarnIfHeld == 0) {
				boolean v13 = Thread.holdsLock(this.mWarnIfHeld);
				if (v13 == 0) {
					Thread v17 = Thread.currentThread();
					String v18 = v17.getName();
					int v21 = System.identityHashCode(this.mWarnIfHeld);
					String v22 = Integer.toHexString(v21);
					if (this.mIsolated == 0) {
						boolean v28 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
						if (v28 == 0) {
							Installer$InstallerException v29 = new Installer$InstallerException("time out waiting for the installer to be ready");
							boolean v12 = 1;
							if (v12 != 0) {
								[J v31 = this.mInstalld.getExternalSize(p1, p2, v9, v5);
								[J v11 = v31;
								boolean v32 = SystemProperties.getBoolean("fw.verify_storage", 0);
								if (v32 == 0) {
									if (this.mWarnIfHeld == 0) {
										boolean v35 = Thread.holdsLock(this.mWarnIfHeld);
										if (v35 == 0) {
											Thread v39 = Thread.currentThread();
											String v40 = v39.getName();
											int v43 = System.identityHashCode(this.mWarnIfHeld);
											String v44 = Integer.toHexString(v43);
											if (this.mIsolated == 0) {
												boolean v50 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
												if (v50 == 0) {
													Installer$InstallerException v51 = new Installer$InstallerException("time out waiting for the installer to be ready");
													boolean v34 = 1;
													if (v34 != 0) {
														[J v53 = new [J(6);
														[J v33 = v53;
														StringBuilder v54 = new StringBuilder();
														StringBuilder v56 = v54.append("External ");
														StringBuilder v57 = v54.append(p2);
														String v58 = v54.toString();
														StorageStatsService.checkEquals(v58, v33, v11);
														ExternalStorageStats v60 = new ExternalStorageStats();
														ExternalStorageStats.totalBytes = v11[0];
														ExternalStorageStats.audioBytes = v11[1];
														ExternalStorageStats.videoBytes = v11[2];
														ExternalStorageStats.imageBytes = v11[3];
														ExternalStorageStats.appBytes = v11[4];
														ExternalStorageStats.obbBytes = v11[5];
														return v60;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v6 = this.mPackage.getInstalledApplicationsAsUser(8192, p2);\n[J v31 = this.mInstalld.getExternalSize(p1, p2, v9, v5);\n[J v11 = v31;\nExternalStorageStats v60 = new ExternalStorageStats();\nExternalStorageStats.totalBytes = v11[0];\nExternalStorageStats.audioBytes = v11[1];\nExternalStorageStats.videoBytes = v11[2];\nExternalStorageStats.imageBytes = v11[3];\nExternalStorageStats.appBytes = v11[4];\nExternalStorageStats.obbBytes = v11[5];\nreturn v60;', '[J v53 = this.mInstalld.getExternalSize(p1, p2, 0, v5);\n[J v33 = v53;\nExternalStorageStats.totalBytes = v11[0];\nExternalStorageStats.audioBytes = v11[1];\nExternalStorageStats.videoBytes = v11[2];\nExternalStorageStats.imageBytes = v11[3];\nExternalStorageStats.appBytes = v11[4];\nExternalStorageStats.obbBytes = v11[5];\nreturn v60;', '[J v53 = new [J(6);\n[J v33 = v53;\nExternalStorageStats.totalBytes = v11[0];\nExternalStorageStats.audioBytes = v11[1];\nExternalStorageStats.videoBytes = v11[2];\nExternalStorageStats.imageBytes = v11[3];\nExternalStorageStats.appBytes = v11[4];\nExternalStorageStats.obbBytes = v11[5];\nreturn v60;']

The method queryExternalStatsForUser has the following similar APIs:

- API Name: queryStatsForUser(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.8001298904418945
  - Access Control Level: SYS_OR_SIG and the following code:
PackageStats v9 = new PackageStats("StorageStatsService");
int v11 = this.mInstalld.getUserSize(p1, p2, v10, v4);
PackageStats.codeSize = (PackageStats.codeSize + v11[0]);
PackageStats.dataSize = (PackageStats.dataSize + v11[1]);
PackageStats.cacheSize = (PackageStats.cacheSize + v11[2]);
PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v11[3]);
PackageStats.externalDataSize = (PackageStats.externalDataSize + v11[4]);
PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v11[5]);
StorageStats v103 = StorageStatsService.translate(v8);
return v103;

- API Name: queryStatsForUser(Ljava/lang/String;ILjava/lang/String;)Landroid/app/usage/StorageStats; with Similarity Score: 0.7654139995574951
  - Access Control Level: SYS_OR_SIG and the following code:
PackageStats v9 = new PackageStats("StorageStatsService");
int v11 = this.mInstalld.getUserSize(p1, p2, v10, v4);
PackageStats.codeSize = (PackageStats.codeSize + v11[0]);
PackageStats.dataSize = (PackageStats.dataSize + v11[1]);
PackageStats.cacheSize = (PackageStats.cacheSize + v11[2]);
PackageStats.externalCodeSize = (PackageStats.externalCodeSize + v11[3]);
PackageStats.externalDataSize = (PackageStats.externalDataSize + v11[4]);
PackageStats.externalCacheSize = (PackageStats.externalCacheSize + v11[5]);
StorageStats v103 = StorageStatsService.translate(v8);
return v103;

