The method queryCratesForUser has the following code snippet:

This is path 1 for the API with depth 2:
public ParceledListSlice queryCratesForUser(String p1, int p2, String p3){
	int v4 = Binder.getCallingUid();
	if (this.mWarnIfHeld == 0) {
		boolean v8 = Thread.holdsLock(this.mWarnIfHeld);
		if (v8 == 0) {
			Thread v12 = Thread.currentThread();
			String v13 = v12.getName();
			int v16 = System.identityHashCode(this.mWarnIfHeld);
			String v17 = Integer.toHexString(v16);
			if (this.mIsolated == 0) {
				boolean v23 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
				if (v23 == 0) {
					Installer$InstallerException v24 = new Installer$InstallerException("time out waiting for the installer to be ready");
					boolean v7 = 1;
					if (v7 != 0) {
						CrateMetadata v26 = this.mInstalld.getUserCrates(p1, p2);
						CrateMetadata v6 = v26;
						ParceledListSlice v27 = new ParceledListSlice(v28);
						List v28 = StorageStatsService.convertCrateInfoFrom(v6);
						return v27;
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public ParceledListSlice queryCratesForUser(String p1, int p2, String p3){
	int v4 = Binder.getCallingUid();
	if (this.mWarnIfHeld == 0) {
		boolean v8 = Thread.holdsLock(this.mWarnIfHeld);
		if (v8 == 0) {
			Thread v12 = Thread.currentThread();
			String v13 = v12.getName();
			int v16 = System.identityHashCode(this.mWarnIfHeld);
			String v17 = Integer.toHexString(v16);
			if (this.mIsolated == 0) {
				boolean v23 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
				if (v23 == 0) {
					Installer$InstallerException v24 = new Installer$InstallerException("time out waiting for the installer to be ready");
					boolean v7 = 1;
					if (v7 != 0) {
						CrateMetadata v6 = 0;
						ParceledListSlice v26 = new ParceledListSlice(v27);
						List v27 = StorageStatsService.convertCrateInfoFrom(v6);
						return v26;
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public ParceledListSlice queryCratesForUser(String p1, int p2, String p3){
	int v3 = Binder.getCallingUid();
	if (this.mWarnIfHeld == 0) {
		boolean v7 = Thread.holdsLock(this.mWarnIfHeld);
		if (v7 == 0) {
			Thread v11 = Thread.currentThread();
			String v12 = v11.getName();
			int v15 = System.identityHashCode(this.mWarnIfHeld);
			String v16 = Integer.toHexString(v15);
			if (this.mIsolated == 0) {
				boolean v22 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
				if (v22 == 0) {
					Installer$InstallerException v23 = new Installer$InstallerException("time out waiting for the installer to be ready");
					boolean v6 = 1;
					if (v6 != 0) {
						CrateMetadata v25 = this.mInstalld.getUserCrates(p1, p2);
						CrateMetadata v5 = v25;
						ParceledListSlice v26 = new ParceledListSlice(v27);
						List v27 = StorageStatsService.convertCrateInfoFrom(v5);
						return v26;
					}
				}
			}
		}
	}
}

and the following sink code:
['CrateMetadata v25 = this.mInstalld.getUserCrates(p1, p2);\nList v27 = StorageStatsService.convertCrateInfoFrom(v5);\nParceledListSlice v26 = new ParceledListSlice(v27);\nreturn v26;']

The method queryCratesForUser has the following similar APIs:

- API Name: queryCratesForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/content/pm/ParceledListSlice; with Similarity Score: 0.8678609728813171
  - Access Control Level: SYS_OR_SIG and the following code:
CrateMetadata v12 = this.mInstalld.getAppCrates(p1, p2, p3);
ParceledListSlice v13 = new ParceledListSlice(v14);
return v9;

- API Name: queryCratesForPackage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Landroid/content/pm/ParceledListSlice; with Similarity Score: 0.8655496835708618
  - Access Control Level: SYS_OR_SIG and the following code:
CrateMetadata v10 = this.mInstalld.getAppCrates(p1, p2, p3);
ParceledListSlice v11 = new ParceledListSlice(v12);
return v7;

