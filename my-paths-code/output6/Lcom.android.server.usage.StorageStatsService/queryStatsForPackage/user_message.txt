This is path 1 for the API with depth 2:
public StorageStats queryStatsForPackage(String p1, String p2, int p3, String p4){
	int v5 = Binder.getCallingUid();
	if (v6 != 0) {
		String v7 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
		String v8 = ArrayUtils.defeatNullable(v7);
		if (v8.length != 1) {
			int v15 = Binder.getCallingUid();
			if (v16 != 0) {
				String v17 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
				String v18 = ArrayUtils.defeatNullable(v17);
				[J v19 = new [J(v18.length);
				String v20 = new String(0);
				if ( >= v18.length) {
					PackageStats v21 = new PackageStats("StorageStatsService");
					boolean v24 = SystemProperties.getBoolean("fw.disable_quota", 0);
					if (v24 == 0) {
						int v23 = 0;
						boolean v26 = Installer.checkBeforeRemote();
						if (v26 != 0) {
							boolean v27 = SystemProperties.getBoolean("fw.verify_storage", 0);
							if (v27 == 0) {
								PackageStats v28 = new PackageStats("StorageStatsService");
								boolean v31 = Installer.checkBeforeRemote();
								if (v31 != 0) {
									StringBuilder v32 = new StringBuilder();
									StringBuilder v34 = v32.append("UID ");
									StringBuilder v35 = v32.append(ApplicationInfo.uid);
									String v36 = v32.toString();
									StringBuilder v38 = new StringBuilder();
									StringBuilder v40 = v38.append(v36);
									StringBuilder v41 = v38.append(" codeSize");
									String v42 = v38.toString();
									StorageStatsService.checkEquals(v42, PackageStats.codeSize, PackageStats.codeSize);
									StringBuilder v44 = new StringBuilder();
									StringBuilder v46 = v44.append(v36);
									StringBuilder v47 = v44.append(" dataSize");
									String v48 = v44.toString();
									StorageStatsService.checkEquals(v48, PackageStats.dataSize, PackageStats.dataSize);
									StringBuilder v50 = new StringBuilder();
									StringBuilder v52 = v50.append(v36);
									StringBuilder v53 = v50.append(" cacheSize");
									String v54 = v50.toString();
									StorageStatsService.checkEquals(v54, PackageStats.cacheSize, PackageStats.cacheSize);
									StringBuilder v56 = new StringBuilder();
									StringBuilder v58 = v56.append(v36);
									StringBuilder v59 = v56.append(" externalCodeSize");
									String v60 = v56.toString();
									StorageStatsService.checkEquals(v60, PackageStats.externalCodeSize, PackageStats.externalCodeSize);
									StringBuilder v62 = new StringBuilder();
									StringBuilder v64 = v62.append(v36);
									StringBuilder v65 = v62.append(" externalDataSize");
									String v66 = v62.toString();
									StorageStatsService.checkEquals(v66, PackageStats.externalDataSize, PackageStats.externalDataSize);
									StringBuilder v68 = new StringBuilder();
									StringBuilder v70 = v68.append(v36);
									StringBuilder v71 = v68.append(" externalCacheSize");
									String v72 = v68.toString();
									StorageStatsService.checkEquals(v72, PackageStats.externalCacheSize, PackageStats.externalCacheSize);
									if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
										StorageStatsService$$ExternalSyntheticLambda2 v74 = new StorageStatsService$$ExternalSyntheticLambda2(v21,ApplicationInfo.uid,);
										int v77 = this.mStorageStatsAugmenters.size();
										if ( >= v77) {
											StorageStats v79 = new StorageStats();
											StorageStats.codeBytes = (PackageStats.codeSize + PackageStats.externalCodeSize);
											StorageStats.dataBytes = (PackageStats.dataSize + PackageStats.externalDataSize);
											StorageStats.cacheBytes = (PackageStats.cacheSize + PackageStats.externalCacheSize);
											StorageStats.externalCacheBytes = PackageStats.externalCacheSize;
											StorageStats v78 = v79;
											StorageStats v9 = v78;
											return v9;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public StorageStats queryStatsForPackage(String p1, String p2, int p3, String p4){
	int v5 = Binder.getCallingUid();
	if (v6 != 0) {
		String v7 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
		String v8 = ArrayUtils.defeatNullable(v7);
		if (v8.length != 1) {
			int v15 = Binder.getCallingUid();
			if (v16 != 0) {
				String v17 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
				String v18 = ArrayUtils.defeatNullable(v17);
				[J v19 = new [J(v18.length);
				String v20 = new String(0);
				if ( >= v18.length) {
					PackageStats v21 = new PackageStats("StorageStatsService");
					boolean v24 = SystemProperties.getBoolean("fw.disable_quota", 0);
					if (v24 == 0) {
						int v23 = 4096;
						boolean v26 = Installer.checkBeforeRemote();
						if (v26 != 0) {
							boolean v27 = SystemProperties.getBoolean("fw.verify_storage", 0);
							if (v27 == 0) {
								PackageStats v28 = new PackageStats("StorageStatsService");
								boolean v31 = Installer.checkBeforeRemote();
								if (v31 != 0) {
									StringBuilder v32 = new StringBuilder();
									StringBuilder v34 = v32.append("UID ");
									StringBuilder v35 = v32.append(ApplicationInfo.uid);
									String v36 = v32.toString();
									StringBuilder v38 = new StringBuilder();
									StringBuilder v40 = v38.append(v36);
									StringBuilder v41 = v38.append(" codeSize");
									String v42 = v38.toString();
									StorageStatsService.checkEquals(v42, PackageStats.codeSize, PackageStats.codeSize);
									StringBuilder v44 = new StringBuilder();
									StringBuilder v46 = v44.append(v36);
									StringBuilder v47 = v44.append(" dataSize");
									String v48 = v44.toString();
									StorageStatsService.checkEquals(v48, PackageStats.dataSize, PackageStats.dataSize);
									StringBuilder v50 = new StringBuilder();
									StringBuilder v52 = v50.append(v36);
									StringBuilder v53 = v50.append(" cacheSize");
									String v54 = v50.toString();
									StorageStatsService.checkEquals(v54, PackageStats.cacheSize, PackageStats.cacheSize);
									StringBuilder v56 = new StringBuilder();
									StringBuilder v58 = v56.append(v36);
									StringBuilder v59 = v56.append(" externalCodeSize");
									String v60 = v56.toString();
									StorageStatsService.checkEquals(v60, PackageStats.externalCodeSize, PackageStats.externalCodeSize);
									StringBuilder v62 = new StringBuilder();
									StringBuilder v64 = v62.append(v36);
									StringBuilder v65 = v62.append(" externalDataSize");
									String v66 = v62.toString();
									StorageStatsService.checkEquals(v66, PackageStats.externalDataSize, PackageStats.externalDataSize);
									StringBuilder v68 = new StringBuilder();
									StringBuilder v70 = v68.append(v36);
									StringBuilder v71 = v68.append(" externalCacheSize");
									String v72 = v68.toString();
									StorageStatsService.checkEquals(v72, PackageStats.externalCacheSize, PackageStats.externalCacheSize);
									if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
										StorageStatsService$$ExternalSyntheticLambda2 v74 = new StorageStatsService$$ExternalSyntheticLambda2(v21,ApplicationInfo.uid,);
										int v77 = this.mStorageStatsAugmenters.size();
										if ( >= v77) {
											StorageStats v79 = new StorageStats();
											StorageStats.codeBytes = (PackageStats.codeSize + PackageStats.externalCodeSize);
											StorageStats.dataBytes = (PackageStats.dataSize + PackageStats.externalDataSize);
											StorageStats.cacheBytes = (PackageStats.cacheSize + PackageStats.externalCacheSize);
											StorageStats.externalCacheBytes = PackageStats.externalCacheSize;
											StorageStats v78 = v79;
											StorageStats v9 = v78;
											return v9;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public StorageStats queryStatsForPackage(String p1, String p2, int p3, String p4){
	int v5 = Binder.getCallingUid();
	if (v6 != 0) {
		String v7 = this.mPackage.getPackagesForUid(ApplicationInfo.uid);
		String v8 = ArrayUtils.defeatNullable(v7);
		if (v8.length != 1) {
			int v9 = UserHandle.getUserId(ApplicationInfo.uid);
			String v10 = new String(1);
			[J v11 = new [J(1);
			String v12 = new String(0);
			boolean v13 = v3.isSystemApp();
			if (v13 == 0) {
				boolean v14 = v3.isUpdatedSystemApp();
				if (v14 != 0) {
					String v15 = v3.getCodePath();
					Object v16 = ArrayUtils.appendElement(Strin.class, v12, v15);
					PackageStats v17 = new PackageStats("StorageStatsService");
					if (this.mWarnIfHeld == 0) {
						boolean v21 = Thread.holdsLock(this.mWarnIfHeld);
						if (v21 == 0) {
							Thread v25 = Thread.currentThread();
							String v26 = v25.getName();
							int v29 = System.identityHashCode(this.mWarnIfHeld);
							String v30 = Integer.toHexString(v29);
							if (this.mIsolated == 0) {
								boolean v36 = this.mInstalldLatch.await(10000, TimeUnit.MILLISECONDS);
								if (v36 == 0) {
									Installer$InstallerException v37 = new Installer$InstallerException("time out waiting for the installer to be ready");
									boolean v20 = 1;
									if (v20 != 0) {
										if (p1 != StorageManager.UUID_PRIVATE_INTERNAL) {
											UserHandle v39 = UserHandle.of(p3);
											StorageStatsService$$ExternalSyntheticLambda0 v40 = new StorageStatsService$$ExternalSyntheticLambda0(v17,p2,v39,);
											p0.forEachStorageStatsAugmenter(v40, "queryStatsForPackage");
											StorageStats v43 = StorageStatsService.translate(v17);
											return v43;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
