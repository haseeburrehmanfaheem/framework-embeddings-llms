The method legacyDisassociate has the following code snippet:

This is path 1 for the API with depth 2:
public void legacyDisassociate(String p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	List v5 = AssociationStoreImpl.getAssociationsByAddress(p3);
	AssociationStoreImpl$$ExternalSyntheticLambda2 v6 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p1,p2);
	Object v8 = CollectionUtils.find(v5, v6);
	AssociationInfo v4 = v8;
	Context v9 = this.mContext;
	if (v4 != 0) {
		int v11 = v4.getUserId();
		String v12 = v4.getPackageName();
		boolean v13 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v9, v11, v12);
		if (v13 != 0) {
			AssociationInfo v10 = 0;
			AssociationInfo v3 = v10;
			if (v3 == 0) {
				int v14 = v3.getId();
				Integer v17 = Integer.valueOf(p1);
				Object v18 = this.mIdMap.get(v17);
				AssociationInfo v16 = v18;
				int v19 = this.mUserId;
				String v20 = this.mPackageName;
				String v21 = this.mDeviceProfile;
				String v23 = v16.getDeviceProfile();
				if (v23 != 0) {
					int v24 = v16.getId();
					int v25 = v16.getUserId();
					String v26 = v16.getPackageName();
					List v27 = this.mAssociationStore.getAssociationsForPackage(v25, v26);
					CompanionDeviceManagerService$$ExternalSyntheticLambda3 v28 = new CompanionDeviceManagerService$$ExternalSyntheticLambda3(v23,v24);
					boolean v30 = CollectionUtils.any(v27, v28);
					if (v30 == 0) {
						int v31 = CompanionDeviceManagerService.getPackageProcessImportance(v25, v26);
						if (v31 > 200) {
							boolean v22 = 0;
							if (v22 != 0) {
								AssociationInfo$NonActionableBuilder v40 = AssociationInfo.builder(v16);
								AssociationInfo$Builder v41 = v40.setRevoked(1);
								AssociationInfo v42 = v41.build();
								String v43 = v42.getPackageName();
								int v44 = v42.getUserId();
								int v45 = this.mPackageManagerInternal.getPackageUid(v43, 0, v44);
								int v46 = v42.getUserId();
								Object v47 = this.mRevokedAssociationsPendingRoleHolderRemoval.forUser(v46);
								boolean v48 = v47.add(v42);
								Integer v49 = Integer.valueOf(v45);
								boolean v50 = this.mUidsPendingRoleHolderRemoval.containsKey(v49);
								if (v50 != 0) {
									Integer v51 = Integer.valueOf(v45);
									Object v52 = this.mUidsPendingRoleHolderRemoval.put(v51, v43);
									int v53 = this.mUidsPendingRoleHolderRemoval.size();
									if (v53 != 1) {
										this.mOnPackageVisibilityChangeListener.startListening();
										Integer v56 = Integer.valueOf(p1);
										boolean v57 = this.mReportedSelfManagedDevices.contains(v56);
										if (v57 != 0) {
											Integer v58 = Integer.valueOf(p1);
											boolean v59 = this.mConnectedBtDevices.contains(v58);
											if (v59 != 0) {
												Integer v60 = Integer.valueOf(p1);
												boolean v61 = this.mNearbyBleDevices.contains(v60);
												if (v61 != 0) {
													Integer v62 = Integer.valueOf(p1);
													boolean v63 = this.mSimulated.contains(v62);
													if (v63 == 0) {
														boolean v55 = ;
														Integer v65 = Integer.valueOf(p1);
														Object v66 = this.mIdMap.remove(v65);
														if (v66 != 0) {
															MacAddress v67 = v66.getDeviceMacAddress();
															if (v67 == 0) {
																Object v68 = this.mAddressMap.get(v67);
																Integer v69 = Integer.valueOf(p1);
																boolean v70 = v68.remove(v69);
																int v71 = v66.getUserId();
																AssociationStoreImpl.invalidateCacheForUserLocked(v71);
																AssociationStoreImpl.broadcastChange(1, v66);
																Object v75 = this.METRIC_DEVICE_PROFILE.get(v21);
																int v76 = v75.intValue();
																FrameworkStatsLog.write(451, 2, v76);
																if (v55 == 0) {
																	boolean v78 = this.mNotifyOnDeviceNearby;
																	if (v78 != 0) {
																		List v80 = AssociationStoreImpl.getAssociationsForUser(v19);
																		AssociationStoreImpl$$ExternalSyntheticLambda0 v81 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v20);
																		List v83 = CollectionUtils.filter(v80, v81);
																		List v84 = Collections.unmodifiableList(v83);
																		List v79 = v84;
																		CompanionDeviceManagerService$$ExternalSyntheticLambda0 v85 = new CompanionDeviceManagerService$$ExternalSyntheticLambda0(CompanionDeviceManagerService);
																		Object v88 = CollectionUtils.find(v79, v85);
																		if (v88 == 0) {
																			boolean v87 = ;
																			if (v87 == 0) {
																				Object v90 = this.mBoundCompanionApplications.removePackage(v19, v20);
																				if (v90 != 0) {
																					Iterator v91 = v90.iterator();
																					boolean v92 = v91.hasNext();
																					if (v92 == 0) {
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void legacyDisassociate(String p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	List v5 = AssociationStoreImpl.getAssociationsByAddress(p3);
	AssociationStoreImpl$$ExternalSyntheticLambda2 v6 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p1,p2);
	Object v8 = CollectionUtils.find(v5, v6);
	AssociationInfo v4 = v8;
	Context v9 = this.mContext;
	if (v4 != 0) {
		int v11 = v4.getUserId();
		String v12 = v4.getPackageName();
		boolean v13 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v9, v11, v12);
		if (v13 != 0) {
			AssociationInfo v10 = v4;
			AssociationInfo v3 = v10;
			if (v3 == 0) {
				int v14 = v3.getId();
				Integer v17 = Integer.valueOf(p1);
				Object v18 = this.mIdMap.get(v17);
				AssociationInfo v16 = v18;
				int v19 = this.mUserId;
				String v20 = this.mPackageName;
				String v21 = this.mDeviceProfile;
				String v23 = v16.getDeviceProfile();
				if (v23 != 0) {
					int v24 = v16.getId();
					int v25 = v16.getUserId();
					String v26 = v16.getPackageName();
					List v27 = this.mAssociationStore.getAssociationsForPackage(v25, v26);
					CompanionDeviceManagerService$$ExternalSyntheticLambda3 v28 = new CompanionDeviceManagerService$$ExternalSyntheticLambda3(v23,v24);
					boolean v30 = CollectionUtils.any(v27, v28);
					if (v30 == 0) {
						int v31 = CompanionDeviceManagerService.getPackageProcessImportance(v25, v26);
						if (v31 > 200) {
							boolean v22 = 0;
							if (v22 != 0) {
								AssociationInfo$NonActionableBuilder v40 = AssociationInfo.builder(v16);
								AssociationInfo$Builder v41 = v40.setRevoked(1);
								AssociationInfo v42 = v41.build();
								String v43 = v42.getPackageName();
								int v44 = v42.getUserId();
								int v45 = this.mPackageManagerInternal.getPackageUid(v43, 0, v44);
								int v46 = v42.getUserId();
								Object v47 = this.mRevokedAssociationsPendingRoleHolderRemoval.forUser(v46);
								boolean v48 = v47.add(v42);
								Integer v49 = Integer.valueOf(v45);
								boolean v50 = this.mUidsPendingRoleHolderRemoval.containsKey(v49);
								if (v50 != 0) {
									Integer v51 = Integer.valueOf(v45);
									Object v52 = this.mUidsPendingRoleHolderRemoval.put(v51, v43);
									int v53 = this.mUidsPendingRoleHolderRemoval.size();
									if (v53 != 1) {
										this.mOnPackageVisibilityChangeListener.startListening();
										Integer v56 = Integer.valueOf(p1);
										boolean v57 = this.mReportedSelfManagedDevices.contains(v56);
										if (v57 != 0) {
											Integer v58 = Integer.valueOf(p1);
											boolean v59 = this.mConnectedBtDevices.contains(v58);
											if (v59 != 0) {
												Integer v60 = Integer.valueOf(p1);
												boolean v61 = this.mNearbyBleDevices.contains(v60);
												if (v61 != 0) {
													Integer v62 = Integer.valueOf(p1);
													boolean v63 = this.mSimulated.contains(v62);
													if (v63 == 0) {
														boolean v55 = ;
														Integer v65 = Integer.valueOf(p1);
														Object v66 = this.mIdMap.remove(v65);
														if (v66 != 0) {
															MacAddress v67 = v66.getDeviceMacAddress();
															if (v67 == 0) {
																Object v68 = this.mAddressMap.get(v67);
																Integer v69 = Integer.valueOf(p1);
																boolean v70 = v68.remove(v69);
																int v71 = v66.getUserId();
																AssociationStoreImpl.invalidateCacheForUserLocked(v71);
																AssociationStoreImpl.broadcastChange(1, v66);
																Object v75 = this.METRIC_DEVICE_PROFILE.get(v21);
																int v76 = v75.intValue();
																FrameworkStatsLog.write(451, 2, v76);
																if (v55 == 0) {
																	boolean v78 = this.mNotifyOnDeviceNearby;
																	if (v78 != 0) {
																		List v80 = AssociationStoreImpl.getAssociationsForUser(v19);
																		AssociationStoreImpl$$ExternalSyntheticLambda0 v81 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v20);
																		List v83 = CollectionUtils.filter(v80, v81);
																		List v84 = Collections.unmodifiableList(v83);
																		List v79 = v84;
																		CompanionDeviceManagerService$$ExternalSyntheticLambda0 v85 = new CompanionDeviceManagerService$$ExternalSyntheticLambda0(CompanionDeviceManagerService);
																		Object v88 = CollectionUtils.find(v79, v85);
																		if (v88 == 0) {
																			boolean v87 = ;
																			if (v87 == 0) {
																				Object v90 = this.mBoundCompanionApplications.removePackage(v19, v20);
																				if (v90 != 0) {
																					Iterator v91 = v90.iterator();
																					boolean v92 = v91.hasNext();
																					if (v92 == 0) {
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void legacyDisassociate(String p1, String p2, int p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	List v5 = AssociationStoreImpl.getAssociationsByAddress(p3);
	AssociationStoreImpl$$ExternalSyntheticLambda2 v6 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p1,p2);
	Object v8 = CollectionUtils.find(v5, v6);
	AssociationInfo v4 = v8;
	Context v9 = this.mContext;
	if (v4 != 0) {
		int v11 = v4.getUserId();
		String v12 = v4.getPackageName();
		boolean v13 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v9, v11, v12);
		if (v13 != 0) {
			AssociationInfo v10 = 0;
			AssociationInfo v3 = v10;
			if (v3 == 0) {
				int v14 = v3.getId();
				Integer v17 = Integer.valueOf(p1);
				Object v18 = this.mIdMap.get(v17);
				AssociationInfo v16 = v18;
				int v19 = this.mUserId;
				String v20 = this.mPackageName;
				String v21 = this.mDeviceProfile;
				String v23 = v16.getDeviceProfile();
				if (v23 != 0) {
					int v24 = v16.getId();
					int v25 = v16.getUserId();
					String v26 = v16.getPackageName();
					List v27 = this.mAssociationStore.getAssociationsForPackage(v25, v26);
					CompanionDeviceManagerService$$ExternalSyntheticLambda3 v28 = new CompanionDeviceManagerService$$ExternalSyntheticLambda3(v23,v24);
					boolean v30 = CollectionUtils.any(v27, v28);
					if (v30 == 0) {
						int v31 = CompanionDeviceManagerService.getPackageProcessImportance(v25, v26);
						if (v31 > 200) {
							boolean v22 = 0;
							if (v22 != 0) {
								AssociationInfo$NonActionableBuilder v40 = AssociationInfo.builder(v16);
								AssociationInfo$Builder v41 = v40.setRevoked(1);
								AssociationInfo v42 = v41.build();
								String v43 = v42.getPackageName();
								int v44 = v42.getUserId();
								int v45 = this.mPackageManagerInternal.getPackageUid(v43, 0, v44);
								int v46 = v42.getUserId();
								Object v47 = this.mRevokedAssociationsPendingRoleHolderRemoval.forUser(v46);
								boolean v48 = v47.add(v42);
								Integer v49 = Integer.valueOf(v45);
								boolean v50 = this.mUidsPendingRoleHolderRemoval.containsKey(v49);
								if (v50 != 0) {
									Integer v51 = Integer.valueOf(v45);
									Object v52 = this.mUidsPendingRoleHolderRemoval.put(v51, v43);
									int v53 = this.mUidsPendingRoleHolderRemoval.size();
									if (v53 != 1) {
										this.mOnPackageVisibilityChangeListener.startListening();
										Integer v56 = Integer.valueOf(p1);
										boolean v57 = this.mReportedSelfManagedDevices.contains(v56);
										if (v57 != 0) {
											Integer v58 = Integer.valueOf(p1);
											boolean v59 = this.mConnectedBtDevices.contains(v58);
											if (v59 != 0) {
												Integer v60 = Integer.valueOf(p1);
												boolean v61 = this.mNearbyBleDevices.contains(v60);
												if (v61 != 0) {
													Integer v62 = Integer.valueOf(p1);
													boolean v63 = this.mSimulated.contains(v62);
													if (v63 == 0) {
														boolean v55 = ;
														Integer v65 = Integer.valueOf(p1);
														Object v66 = this.mIdMap.remove(v65);
														if (v66 != 0) {
															MacAddress v67 = v66.getDeviceMacAddress();
															if (v67 == 0) {
																Object v68 = this.mAddressMap.get(v67);
																Integer v69 = Integer.valueOf(p1);
																boolean v70 = v68.remove(v69);
																int v71 = v66.getUserId();
																AssociationStoreImpl.invalidateCacheForUserLocked(v71);
																AssociationStoreImpl.broadcastChange(1, v66);
																Object v75 = this.METRIC_DEVICE_PROFILE.get(v21);
																int v76 = v75.intValue();
																FrameworkStatsLog.write(451, 2, v76);
																if (v55 == 0) {
																	boolean v78 = this.mNotifyOnDeviceNearby;
																	if (v78 != 0) {
																		List v80 = AssociationStoreImpl.getAssociationsForUser(v19);
																		AssociationStoreImpl$$ExternalSyntheticLambda0 v81 = new AssociationStoreImpl$$ExternalSyntheticLambda0(v20);
																		List v83 = CollectionUtils.filter(v80, v81);
																		List v84 = Collections.unmodifiableList(v83);
																		List v79 = v84;
																		CompanionDeviceManagerService$$ExternalSyntheticLambda0 v85 = new CompanionDeviceManagerService$$ExternalSyntheticLambda0(CompanionDeviceManagerService);
																		Object v88 = CollectionUtils.find(v79, v85);
																		if (v88 == 0) {
																			boolean v87 = ;
																			if (v87 == 0) {
																				Object v90 = this.mBoundCompanionApplications.removePackage(v19, v20);
																				if (v90 != 0) {
																					Iterator v91 = v90.iterator();
																					boolean v92 = v91.hasNext();
																					if (v92 == 0) {
																						return;
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v5 = AssociationStoreImpl.getAssociationsByAddress(p3);\nAssociationStoreImpl$$ExternalSyntheticLambda2 v6 = new AssociationStoreImpl$$ExternalSyntheticLambda2(p1,p2);\nObject v8 = CollectionUtils.find(v5, v6);', 'Integer v17 = Integer.valueOf(p1);\nObject v18 = this.mIdMap.get(v17);\nAssociationInfo v16 = v18;\nInteger v65 = Integer.valueOf(p1);\nObject v66 = this.mIdMap.remove(v65);', 'AssociationInfo$NonActionableBuilder v40 = AssociationInfo.builder(v16);\nAssociationInfo$Builder v41 = v40.setRevoked(1);\nAssociationInfo v42 = v41.build();\nInteger v49 = Integer.valueOf(v45);\nboolean v50 = this.mUidsPendingRoleHolderRemoval.containsKey(v49);']

The method legacyDisassociate has the following similar APIs:

- API Name: registerDevicePresenceListenerService(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.9474237561225891
  - Access Control Level: SYS_OR_SIG and the following code:
AssociationStoreImpl v10 = this.mAssociationStore;
List v12 = AssociationStoreImpl.getAssociationsByAddress(p2);
AssociationStoreImpl$$ExternalSyntheticLambda2 v13 = new AssociationStoreImpl$$ExternalSyntheticLambda2(v4,p1);
Object v15 = CollectionUtils.find(v12, v13);

- API Name: disassociate(I)V with Similarity Score: 0.939917802810669
  - Access Control Level: SYS_OR_SIG and the following code:
AssociationInfo$NonActionableBuilder v35 = AssociationInfo.builder(v11);
AssociationInfo$Builder v36 = v35.setRevoked(1);
AssociationInfo v37 = v36.build();
Object v42 = this.mRevokedAssociationsPendingRoleHolderRemoval.forUser(v41);
boolean v43 = v42.add(v37);

