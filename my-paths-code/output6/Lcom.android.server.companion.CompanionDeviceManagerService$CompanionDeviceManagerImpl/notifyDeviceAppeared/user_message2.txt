The method notifyDeviceAppeared has the following code snippet:

This is path 1 for the API with depth 2:
public void notifyDeviceAppeared(int p1){
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mIdMap.get(v3);
	AssociationInfo v2 = v4;
	Context v5 = this.mContext;
	if (v2 != 0) {
		int v7 = v2.getUserId();
		String v8 = v2.getPackageName();
		boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);
		if (v9 != 0) {
			AssociationInfo v6 = 0;
			AssociationInfo v1 = v6;
			if (v1 == 0) {
				boolean v10 = v1.isSelfManaged();
				if (v10 == 0) {
					AssociationInfo$NonActionableBuilder v11 = AssociationInfo.builder(v1);
					long v12 = System.currentTimeMillis();
					AssociationInfo$Builder v13 = v11.setLastTimeConnected(v12);
					AssociationInfo v15 = new AssociationInfo(v16,v17,v18,v19,v20,v21,v22,this.mNotifyOnDeviceNearby,this.mRevoked,v23,this.mLastTimeConnectedMs);
					int v16 = this.mId;
					int v17 = this.mUserId;
					String v18 = this.mPackageName;
					MacAddress v19 = this.mDeviceMacAddress;
					CharSequence v20 = this.mDisplayName;
					String v21 = this.mDeviceProfile;
					boolean v22 = this.mSelfManaged;
					long v23 = this.mTimeApprovedMs;
					AssociationInfo v14 = v15;
					AssociationStoreImpl v25 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);
					boolean v28 = p1.isRevoked();
					if (v28 != 0) {
						int v29 = this.mId;
						Integer v30 = Integer.valueOf(v29);
						Object v31 = this.mIdMap.get(v30);
						if (v31 != 0) {
							if (AssociationInfo != p1) {
								if (p1 instanceof AssociationInfo != 0) {
									if (this.mId != this.mId) {
										if (this.mUserId != this.mUserId) {
											if (this.mSelfManaged != this.mSelfManaged) {
												if (this.mNotifyOnDeviceNearby != this.mNotifyOnDeviceNearby) {
													if (this.mRevoked != this.mRevoked) {
														if ((this.mTimeApprovedMs < this.mTimeApprovedMs) != 0) {
															if ((this.mLastTimeConnectedMs < this.mLastTimeConnectedMs) != 0) {
																boolean v33 = Objects.equals(this.mPackageName, this.mPackageName);
																if (v33 == 0) {
																	boolean v34 = Objects.equals(this.mDeviceMacAddress, this.mDeviceMacAddress);
																	if (v34 == 0) {
																		boolean v35 = Objects.equals(this.mDisplayName, this.mDisplayName);
																		if (v35 == 0) {
																			boolean v36 = Objects.equals(this.mDeviceProfile, this.mDeviceProfile);
																			if (v36 == 0) {
																				boolean v32 = ;
																				if (v32 == 0) {
																					Integer v37 = Integer.valueOf(v29);
																					Object v38 = this.mIdMap.put(v37, v14);
																					int v39 = this.mUserId;
																					this.mCachedPerUser.delete(v39);
																					MacAddress v42 = this.mDeviceMacAddress;
																					MacAddress v43 = this.mDeviceMacAddress;
																					boolean v44 = Objects.equals(v43, v42);
																					if ((v44 ^ 1) == 0) {
																						if (v43 == 0) {
																							Object v45 = this.mAddressMap.get(v43);
																							Integer v46 = Integer.valueOf(v29);
																							boolean v47 = v45.remove(v46);
																							if (v42 == 0) {
																								AssociationStoreImpl$$ExternalSyntheticLambda3 v48 = new AssociationStoreImpl$$ExternalSyntheticLambda3();
																								Object v50 = this.mAddressMap.computeIfAbsent(v42, v48);
																								Integer v51 = Integer.valueOf(v29);
																								boolean v52 = v50.add(v51);
																								if ((v44 ^ 1) == 0) {
																									Iterator v54 = this.mListeners.iterator();
																									boolean v55 = v54.hasNext();
																									if (v55 == 0) {
																										CompanionDevicePresenceMonitor v56 = CompanionDeviceManagerService.-$$Nest$fgetmDevicePresenceMonitor(this.this$0);
																										boolean v59 = CompanionDevicePresenceMonitor.isDevicePresent(p1);
																										Integer v60 = Integer.valueOf(p1);
																										boolean v61 = this.mReportedSelfManagedDevices.add(v60);
																										if (v59 == 0) {
																											this.mCallback.onDeviceAppeared(p1);
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void notifyDeviceAppeared(int p1){
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mIdMap.get(v3);
	AssociationInfo v2 = v4;
	Context v5 = this.mContext;
	if (v2 != 0) {
		int v7 = v2.getUserId();
		String v8 = v2.getPackageName();
		boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);
		if (v9 != 0) {
			AssociationInfo v6 = v2;
			AssociationInfo v1 = v6;
			if (v1 == 0) {
				boolean v10 = v1.isSelfManaged();
				if (v10 == 0) {
					AssociationInfo$NonActionableBuilder v11 = AssociationInfo.builder(v1);
					long v12 = System.currentTimeMillis();
					AssociationInfo$Builder v13 = v11.setLastTimeConnected(v12);
					AssociationInfo v15 = new AssociationInfo(v16,v17,v18,v19,v20,v21,v22,this.mNotifyOnDeviceNearby,this.mRevoked,v23,this.mLastTimeConnectedMs);
					int v16 = this.mId;
					int v17 = this.mUserId;
					String v18 = this.mPackageName;
					MacAddress v19 = this.mDeviceMacAddress;
					CharSequence v20 = this.mDisplayName;
					String v21 = this.mDeviceProfile;
					boolean v22 = this.mSelfManaged;
					long v23 = this.mTimeApprovedMs;
					AssociationInfo v14 = v15;
					AssociationStoreImpl v25 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);
					boolean v28 = p1.isRevoked();
					if (v28 != 0) {
						int v29 = this.mId;
						Integer v30 = Integer.valueOf(v29);
						Object v31 = this.mIdMap.get(v30);
						if (v31 != 0) {
							if (AssociationInfo != p1) {
								if (p1 instanceof AssociationInfo != 0) {
									if (this.mId != this.mId) {
										if (this.mUserId != this.mUserId) {
											if (this.mSelfManaged != this.mSelfManaged) {
												if (this.mNotifyOnDeviceNearby != this.mNotifyOnDeviceNearby) {
													if (this.mRevoked != this.mRevoked) {
														if ((this.mTimeApprovedMs < this.mTimeApprovedMs) != 0) {
															if ((this.mLastTimeConnectedMs < this.mLastTimeConnectedMs) != 0) {
																boolean v33 = Objects.equals(this.mPackageName, this.mPackageName);
																if (v33 == 0) {
																	boolean v34 = Objects.equals(this.mDeviceMacAddress, this.mDeviceMacAddress);
																	if (v34 == 0) {
																		boolean v35 = Objects.equals(this.mDisplayName, this.mDisplayName);
																		if (v35 == 0) {
																			boolean v36 = Objects.equals(this.mDeviceProfile, this.mDeviceProfile);
																			if (v36 == 0) {
																				boolean v32 = ;
																				if (v32 == 0) {
																					Integer v37 = Integer.valueOf(v29);
																					Object v38 = this.mIdMap.put(v37, v14);
																					int v39 = this.mUserId;
																					this.mCachedPerUser.delete(v39);
																					MacAddress v42 = this.mDeviceMacAddress;
																					MacAddress v43 = this.mDeviceMacAddress;
																					boolean v44 = Objects.equals(v43, v42);
																					if ((v44 ^ 1) == 0) {
																						if (v43 == 0) {
																							Object v45 = this.mAddressMap.get(v43);
																							Integer v46 = Integer.valueOf(v29);
																							boolean v47 = v45.remove(v46);
																							if (v42 == 0) {
																								AssociationStoreImpl$$ExternalSyntheticLambda3 v48 = new AssociationStoreImpl$$ExternalSyntheticLambda3();
																								Object v50 = this.mAddressMap.computeIfAbsent(v42, v48);
																								Integer v51 = Integer.valueOf(v29);
																								boolean v52 = v50.add(v51);
																								if ((v44 ^ 1) == 0) {
																									Iterator v54 = this.mListeners.iterator();
																									boolean v55 = v54.hasNext();
																									if (v55 == 0) {
																										CompanionDevicePresenceMonitor v56 = CompanionDeviceManagerService.-$$Nest$fgetmDevicePresenceMonitor(this.this$0);
																										boolean v59 = CompanionDevicePresenceMonitor.isDevicePresent(p1);
																										Integer v60 = Integer.valueOf(p1);
																										boolean v61 = this.mReportedSelfManagedDevices.add(v60);
																										if (v59 == 0) {
																											this.mCallback.onDeviceAppeared(p1);
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void notifyDeviceAppeared(int p1){
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mIdMap.get(v3);
	AssociationInfo v2 = v4;
	Context v5 = this.mContext;
	if (v2 != 0) {
		int v7 = v2.getUserId();
		String v8 = v2.getPackageName();
		boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);
		if (v9 != 0) {
			AssociationInfo v6 = 0;
			AssociationInfo v1 = v6;
			if (v1 == 0) {
				boolean v10 = v1.isSelfManaged();
				if (v10 == 0) {
					AssociationInfo$NonActionableBuilder v11 = AssociationInfo.builder(v1);
					long v12 = System.currentTimeMillis();
					AssociationInfo$Builder v13 = v11.setLastTimeConnected(v12);
					AssociationInfo v15 = new AssociationInfo(v16,v17,v18,v19,v20,v21,v22,this.mNotifyOnDeviceNearby,this.mRevoked,v23,this.mLastTimeConnectedMs);
					int v16 = this.mId;
					int v17 = this.mUserId;
					String v18 = this.mPackageName;
					MacAddress v19 = this.mDeviceMacAddress;
					CharSequence v20 = this.mDisplayName;
					String v21 = this.mDeviceProfile;
					boolean v22 = this.mSelfManaged;
					long v23 = this.mTimeApprovedMs;
					AssociationInfo v14 = v15;
					AssociationStoreImpl v25 = CompanionDeviceManagerService.-$$Nest$fgetmAssociationStore(this.this$0);
					boolean v28 = p1.isRevoked();
					if (v28 != 0) {
						int v29 = this.mId;
						Integer v30 = Integer.valueOf(v29);
						Object v31 = this.mIdMap.get(v30);
						if (v31 != 0) {
							if (AssociationInfo != p1) {
								if (p1 instanceof AssociationInfo != 0) {
									if (this.mId != this.mId) {
										if (this.mUserId != this.mUserId) {
											if (this.mSelfManaged != this.mSelfManaged) {
												if (this.mNotifyOnDeviceNearby != this.mNotifyOnDeviceNearby) {
													if (this.mRevoked != this.mRevoked) {
														if ((this.mTimeApprovedMs < this.mTimeApprovedMs) != 0) {
															if ((this.mLastTimeConnectedMs < this.mLastTimeConnectedMs) != 0) {
																boolean v33 = Objects.equals(this.mPackageName, this.mPackageName);
																if (v33 == 0) {
																	boolean v34 = Objects.equals(this.mDeviceMacAddress, this.mDeviceMacAddress);
																	if (v34 == 0) {
																		boolean v35 = Objects.equals(this.mDisplayName, this.mDisplayName);
																		if (v35 == 0) {
																			boolean v36 = Objects.equals(this.mDeviceProfile, this.mDeviceProfile);
																			if (v36 == 0) {
																				boolean v32 = ;
																				if (v32 == 0) {
																					Integer v37 = Integer.valueOf(v29);
																					Object v38 = this.mIdMap.put(v37, v14);
																					int v39 = this.mUserId;
																					this.mCachedPerUser.delete(v39);
																					MacAddress v42 = this.mDeviceMacAddress;
																					MacAddress v43 = this.mDeviceMacAddress;
																					boolean v44 = Objects.equals(v43, v42);
																					if ((v44 ^ 1) == 0) {
																						if (v43 == 0) {
																							Object v45 = this.mAddressMap.get(v43);
																							Integer v46 = Integer.valueOf(v29);
																							boolean v47 = v45.remove(v46);
																							if (v42 == 0) {
																								AssociationStoreImpl$$ExternalSyntheticLambda3 v48 = new AssociationStoreImpl$$ExternalSyntheticLambda3();
																								Object v50 = this.mAddressMap.computeIfAbsent(v42, v48);
																								Integer v51 = Integer.valueOf(v29);
																								boolean v52 = v50.add(v51);
																								if ((v44 ^ 1) == 0) {
																									Iterator v54 = this.mListeners.iterator();
																									boolean v55 = v54.hasNext();
																									if (v55 == 0) {
																										CompanionDevicePresenceMonitor v56 = CompanionDeviceManagerService.-$$Nest$fgetmDevicePresenceMonitor(this.this$0);
																										boolean v59 = CompanionDevicePresenceMonitor.isDevicePresent(p1);
																										Integer v60 = Integer.valueOf(p1);
																										boolean v61 = this.mReportedSelfManagedDevices.add(v60);
																										if (v59 == 0) {
																											this.mCallback.onDeviceAppeared(p1);
																											return;
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Integer v3 = Integer.valueOf(p1);\nObject v4 = this.mIdMap.get(v3);\nAssociationInfo v2 = v4;\nint v7 = v2.getUserId();\nString v8 = v2.getPackageName();\nboolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);', 'AssociationInfo$NonActionableBuilder v11 = AssociationInfo.builder(v1);\nlong v12 = System.currentTimeMillis();\nAssociationInfo$Builder v13 = v11.setLastTimeConnected(v12);\nAssociationInfo v15 = new AssociationInfo(v16,v17,v18,v19,v20,v21,v22,this.mNotifyOnDeviceNearby,this.mRevoked,v23,this.mLastTimeConnectedMs);', 'Integer v37 = Integer.valueOf(v29);\nObject v38 = this.mIdMap.put(v37, v14);\nint v39 = this.mUserId;\nthis.mCachedPerUser.delete(v39);', 'MacAddress v42 = this.mDeviceMacAddress;\nMacAddress v43 = this.mDeviceMacAddress;\nboolean v44 = Objects.equals(v43, v42);\nObject v45 = this.mAddressMap.get(v43);\nInteger v46 = Integer.valueOf(v29);\nboolean v47 = v45.remove(v46);', 'AssociationStoreImpl$$ExternalSyntheticLambda3 v48 = new AssociationStoreImpl$$ExternalSyntheticLambda3();\nObject v50 = this.mAddressMap.computeIfAbsent(v42, v48);\nInteger v51 = Integer.valueOf(v29);\nboolean v52 = v50.add(v51);', 'Iterator v54 = this.mListeners.iterator();\nboolean v55 = v54.hasNext();\nCompanionDevicePresenceMonitor v56 = CompanionDeviceManagerService.-$$Nest$fgetmDevicePresenceMonitor(this.this$0);\nboolean v59 = CompanionDevicePresenceMonitor.isDevicePresent(p1);\nInteger v60 = Integer.valueOf(p1);\nboolean v61 = this.mReportedSelfManagedDevices.add(v60);']

The method notifyDeviceAppeared has the following similar APIs:

- API Name: disassociate(I)V with Similarity Score: 1.0
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v3 = Integer.valueOf(p1);
Object v4 = this.mIdMap.get(v3);
AssociationInfo v2 = v4;
int v7 = v2.getUserId();
String v8 = v2.getPackageName();
boolean v9 = PermissionsUtils.checkCallerCanManageAssociationsForPackage(v5, v7, v8);

- API Name: registerDevicePresenceListenerService(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.9286779761314392
  - Access Control Level: SYS_OR_SIG and the following code:
AssociationInfo$Builder v18 = new AssociationInfo$Builder(v11,0);
AssociationInfo$NonActionableBuilder v17 = v18;
AssociationInfo$Builder v20 = v17.setNotifyOnDeviceNearby(1);
AssociationInfo v22 = new AssociationInfo(v23,v24,v25,v26,v27,v28,v29,this.mNotifyOnDeviceNearby,this.mRevoked,v30,this.mLastTimeConnectedMs);

