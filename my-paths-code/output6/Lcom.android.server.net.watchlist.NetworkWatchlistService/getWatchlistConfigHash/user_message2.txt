The method getWatchlistConfigHash has the following code snippet:

This is path 1 for the API with depth 2:
public byte[] getWatchlistConfigHash(){
	boolean v2 = this.mXmlFile.exists();
	if (v2 != 0) {
		FileInputStream v4 = new FileInputStream(this.mXmlFile);
		byte[] v6 = DigestUtils.getSha256Hash(v4);
		v4.close();
		byte[] v3 = v6;
		int v8 = Log.e("WatchlistConfig", "Unable to get watchlist config hash", caughtException);
		byte[] v1 = 0;
		return v1;
	}
}
This is path 2 for the API with depth 2:
public byte[] getWatchlistConfigHash(){
	boolean v2 = this.mXmlFile.exists();
	if (v2 != 0) {
		FileInputStream v4 = new FileInputStream(this.mXmlFile);
		byte[] v6 = DigestUtils.getSha256Hash(v4);
		v4.close();
		byte[] v3 = v6;
		byte[] v1 = v3;
		return v1;
	}
}

and the following sink code:
['FileInputStream v4 = new FileInputStream(this.mXmlFile);\nbyte[] v6 = DigestUtils.getSha256Hash(v4);\nbyte[] v3 = v6;\nbyte[] v1 = v3;\nreturn v1;']

The method getWatchlistConfigHash has the following similar APIs:

- API Name: reloadWatchlist()V with Similarity Score: 0.8114548921585083
  - Access Control Level: NONE and the following code:
FileInputStream v5 = new FileInputStream(this.mXmlFile);
WatchlistConfig$CrcShaDigests v22 = new WatchlistConfig$CrcShaDigests(v23,v25);
HarmfulCrcs v23 = new HarmfulCrcs(v7);
HarmfulDigests v25 = new HarmfulDigests(v9);
this.mDomainDigests = v22;
WatchlistConfig$CrcShaDigests v28 = new WatchlistConfig$CrcShaDigests(v29,v31);
HarmfulCrcs v29 = new HarmfulCrcs(v11);
HarmfulDigests v31 = new HarmfulDigests(v13);
this.mIpDigests = v28;

