To determine the access control level for the `getRootTaskInfoOnDisplay` API, we need to analyze its code and compare it with similar APIs.

The provided code snippet for `getRootTaskInfoOnDisplay` shows that it retrieves information about a root task on a specific display, including its position, visibility, bounds, child tasks, and top running activity. This information is sensitive as it relates to the state of the system's tasks and displays.

The two similar APIs provided are:

1. `getFocusedRootTaskInfo()`: This API has an access control level of `NONE` and retrieves information about the focused root task.
2. `getRootTaskInfo(II)`: This API also has an access control level of `NONE` and retrieves information about a specific root task.

Both similar APIs have an access control level of `NONE`, indicating that they do not pose significant security risks. However, it's essential to consider the context and potential impact of the `getRootTaskInfoOnDisplay` API.

Given the similarities between these APIs and their access control levels, we can infer that the `getRootTaskInfoOnDisplay` API is likely to have a similar access control level. Since all compared APIs handle sensitive task information but are assigned `NONE`, it suggests that the specific handling of task info in this context does not inherently elevate the risk to require higher access controls like `NORMAL`, `DANGEROUS`, or `SYS_OR_SIG`.

Therefore, based on the provided code and comparisons with similar APIs, the access control level for the `getRootTaskInfoOnDisplay` API can be inferred as follows:

```json
{ "access_control_level": "NONE" }
```

This decision aligns with the access control levels assigned to the similar APIs, reflecting a consistent approach to handling task information within this context.