The method unhandledBack has the following code snippet:

This is path 1 for the API with depth 2:
public void unhandledBack(){
	long v5 = Binder.clearCallingIdentity();
	int v8 = RootWindowContainer.getChildCount();
	if ( < 0) {
		WindowContainer v9 = RootWindowContainer.getChildAt();
		Task v10 = v9.getFocusedRootTask();
		if (v10 == 0) {
			Task v7 = v10;
			Task v6 = v7;
			if (v6 == 0) {
				WindowContainer$$ExternalSyntheticLambda2 v13 = new WindowContainer$$ExternalSyntheticLambda2();
				ActivityRecord v15 = WindowContainer.getActivity(v13, 1);
				ActivityRecord v12 = v15;
				if (v12 == 0) {
					int v17 = ActivityRecord.finishIfPossible(0, 0, 0, "unhandled-back", 1);
					int v16 = v17;
					Binder.restoreCallingIdentity(v5);
					return;
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void unhandledBack(){
	WindowManagerThreadPriorityBooster.boost();
	long v6 = Binder.clearCallingIdentity();
	int v9 = RootWindowContainer.getChildCount();
	if ( < 0) {
		WindowContainer v10 = RootWindowContainer.getChildAt();
		Task v11 = v10.getFocusedRootTask();
		if (v11 == 0) {
			Task v8 = v11;
			Task v7 = v8;
			if (v7 == 0) {
				WindowContainer$$ExternalSyntheticLambda2 v14 = new WindowContainer$$ExternalSyntheticLambda2();
				ActivityRecord v16 = WindowContainer.getActivity(v14, 1);
				ActivityRecord v13 = v16;
				if (v13 == 0) {
					int v18 = ActivityRecord.finishIfPossible(0, 0, 0, "unhandled-back", 1);
					int v17 = v18;
					Binder.restoreCallingIdentity(v6);
					return;
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void unhandledBack(){
	long v5 = Binder.clearCallingIdentity();
	int v8 = RootWindowContainer.getChildCount();
	if ( < 0) {
		WindowContainer v9 = RootWindowContainer.getChildAt();
		Task v10 = v9.getFocusedRootTask();
		if (v10 == 0) {
			Task v7 = v10;
			Task v6 = v7;
			if (v6 == 0) {
				WindowContainer$$ExternalSyntheticLambda2 v13 = new WindowContainer$$ExternalSyntheticLambda2();
				ActivityRecord v15 = WindowContainer.getActivity(v13, 1);
				ActivityRecord v12 = v15;
				if (v12 == 0) {
					int v17 = ActivityRecord.finishIfPossible(0, 0, 0, "unhandled-back", 1);
					int v16 = v17;
					Binder.restoreCallingIdentity(v5);
					WindowManagerThreadPriorityBooster.reset();
					return;
				}
			}
		}
	}
}

and the following sink code:
['int v8 = RootWindowContainer.getChildCount();\nWindowContainer v9 = RootWindowContainer.getChildAt();\nTask v10 = v9.getFocusedRootTask();\nWindowContainer$$ExternalSyntheticLambda2 v13 = new WindowContainer$$ExternalSyntheticLambda2();\nActivityRecord v15 = WindowContainer.getActivity(v13, 1);', 'long v5 = Binder.clearCallingIdentity();\nBinder.restoreCallingIdentity(v5);']

The method unhandledBack has the following similar APIs:

- API Name: setLockScreenShown(ZZ)V with Similarity Score: 1.0
  - Access Control Level: SYS_OR_SIG and the following code:
long v5 = Binder.clearCallingIdentity();
Binder.restoreCallingIdentity(v5);

- API Name: startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I with Similarity Score: 1.0
  - Access Control Level: SYS_OR_SIG and the following code:
long v5 = Binder.clearCallingIdentity();
Binder.restoreCallingIdentity(v5);

