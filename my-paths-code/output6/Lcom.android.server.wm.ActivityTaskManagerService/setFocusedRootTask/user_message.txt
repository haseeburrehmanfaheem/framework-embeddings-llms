This is path 1 for the API with depth 2:
public void setFocusedRootTask(int p1){
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					long v18 = Binder.clearCallingIdentity();
					int v24 = this.mChildren.size();
					int v23 = v24;
					if ( < 0) {
						Object v26 = this.mChildren.get();
						WindowContainer v25 = v26;
						DisplayContent$$ExternalSyntheticLambda6 v28 = new DisplayContent$$ExternalSyntheticLambda6(p1);
						Task v30 = DisplayContent.getRootTask(v28);
						Task v27 = v30;
						if (v27 == 0) {
							Task v22 = v27;
							if (v22 != 0) {
								ActivityRecord v33 = TaskFragment.topRunningActivity(0, 1);
								ActivityRecord v32 = v33;
								ActivityRecord v31 = v32;
								if (v31 == 0) {
									boolean v36 = ActivityRecord.isFocusable();
									if (v36 == 0) {
										boolean v37 = ActivityRecord.canReceiveKeys();
										if (v37 != 0) {
											boolean v38 = ActivityRecord.isAlwaysFocusable();
											if (v38 == 0) {
												boolean v35 = ;
												if (v35 != 0) {
													if (this.task == 0) {
														Task v40 = this.task.getRootTask();
														Task v39 = ;
														if (v39 != 0) {
															if (DisplayContent.mFocusedApp == 0) {
																if (this.task != this.task) {
																	ActivityRecord$$ExternalSyntheticLambda4 v41 = new ActivityRecord$$ExternalSyntheticLambda4();
																	Task v43 = WindowContainer.mDisplayContent.getTask(v41, 1);
																	if (this.task != v43) {
																		if (DisplayContent.mFocusedApp != ActivityRecord) {
																			if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
																				String v44 = String.valueOf(ActivityRecord);
																				Object v45 = new Object(1);
																				ProtoLogImpl v47 = ProtoLogImpl.getSingleInstance();
																				v47.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v45);
																				if (p0 == 0) {
																					DisplayContent v50 = p0.getDisplayContent();
																					if (v50 == DisplayContent) {
																						TaskDisplayArea v51 = p0.getDisplayArea();
																						DisplayContent.onLastFocusedTaskDisplayAreaChanged(v51);
																						if (this.mFocusedApp != p0) {
																							if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																								String v53 = String.valueOf(p0);
																								int v54 = DisplayContent.getDisplayId();
																								String v55 = Debug.getCallers(4);
																								String v56 = String.valueOf(v55);
																								Object v57 = new Object(3);
																								Long v58 = Long.valueOf(v54);
																								ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v57);
																								if (this.mFocusedApp == 0) {
																									Task v60 = this.mFocusedApp.getTask();
																									if (p0 == 0) {
																										Task v61 = p0.getTask();
																										this.mFocusedApp = p0;
																										if ( == ) {
																											if ( == 0) {
																												.onAppFocusChanged(0);
																												if ( == 0) {
																													.onAppFocusChanged(1);
																													InputMonitor v64 = DisplayContent.getInputMonitor();
																													v64.setFocusedAppLw(p0);
																													DisplayContent.updateTouchExcludeRegion();
																													boolean v49 = 1;
																													Trace.traceBegin(32, "wmUpdateFocus");
																													boolean v69 = this.mRoot.updateFocusedWindowLocked(0, 1);
																													Trace.traceEnd(32);
																													boolean v67 = v69;
																													boolean v71 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
																													boolean v34 = (v71 ^ 1);
																													if (v34 == 0) {
																														boolean v74 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0, 0);
																														boolean v73 = v74;
																														boolean v72 = v73;
																														Binder.restoreCallingIdentity(v18);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void setFocusedRootTask(int p1){
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					long v18 = Binder.clearCallingIdentity();
					WindowManagerThreadPriorityBooster.boost();
					int v25 = this.mChildren.size();
					int v24 = v25;
					if ( < 0) {
						Object v27 = this.mChildren.get();
						WindowContainer v26 = v27;
						DisplayContent$$ExternalSyntheticLambda6 v29 = new DisplayContent$$ExternalSyntheticLambda6(p1);
						Task v31 = DisplayContent.getRootTask(v29);
						Task v28 = v31;
						if (v28 == 0) {
							Task v23 = v28;
							if (v23 != 0) {
								ActivityRecord v34 = TaskFragment.topRunningActivity(0, 1);
								ActivityRecord v33 = v34;
								ActivityRecord v32 = v33;
								if (v32 == 0) {
									boolean v37 = ActivityRecord.isFocusable();
									if (v37 == 0) {
										boolean v38 = ActivityRecord.canReceiveKeys();
										if (v38 != 0) {
											boolean v39 = ActivityRecord.isAlwaysFocusable();
											if (v39 == 0) {
												boolean v36 = ;
												if (v36 != 0) {
													if (this.task == 0) {
														Task v41 = this.task.getRootTask();
														Task v40 = ;
														if (v40 != 0) {
															if (DisplayContent.mFocusedApp == 0) {
																if (this.task != this.task) {
																	ActivityRecord$$ExternalSyntheticLambda4 v42 = new ActivityRecord$$ExternalSyntheticLambda4();
																	Task v44 = WindowContainer.mDisplayContent.getTask(v42, 1);
																	if (this.task != v44) {
																		if (DisplayContent.mFocusedApp != ActivityRecord) {
																			if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
																				String v45 = String.valueOf(ActivityRecord);
																				Object v46 = new Object(1);
																				ProtoLogImpl v48 = ProtoLogImpl.getSingleInstance();
																				v48.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v46);
																				if (p0 == 0) {
																					DisplayContent v51 = p0.getDisplayContent();
																					if (v51 == DisplayContent) {
																						TaskDisplayArea v52 = p0.getDisplayArea();
																						DisplayContent.onLastFocusedTaskDisplayAreaChanged(v52);
																						if (this.mFocusedApp != p0) {
																							if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																								String v54 = String.valueOf(p0);
																								int v55 = DisplayContent.getDisplayId();
																								String v56 = Debug.getCallers(4);
																								String v57 = String.valueOf(v56);
																								Object v58 = new Object(3);
																								Long v59 = Long.valueOf(v55);
																								ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v58);
																								if (this.mFocusedApp == 0) {
																									Task v61 = this.mFocusedApp.getTask();
																									if (p0 == 0) {
																										Task v62 = p0.getTask();
																										this.mFocusedApp = p0;
																										if ( == ) {
																											if ( == 0) {
																												.onAppFocusChanged(0);
																												if ( == 0) {
																													.onAppFocusChanged(1);
																													InputMonitor v65 = DisplayContent.getInputMonitor();
																													v65.setFocusedAppLw(p0);
																													DisplayContent.updateTouchExcludeRegion();
																													boolean v50 = 1;
																													Trace.traceBegin(32, "wmUpdateFocus");
																													boolean v70 = this.mRoot.updateFocusedWindowLocked(0, 1);
																													Trace.traceEnd(32);
																													boolean v68 = v70;
																													boolean v72 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
																													boolean v35 = (v72 ^ 1);
																													if (v35 == 0) {
																														boolean v75 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0, 0);
																														boolean v74 = v75;
																														boolean v73 = v74;
																														Binder.restoreCallingIdentity(v18);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void setFocusedRootTask(int p1){
	if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					long v18 = Binder.clearCallingIdentity();
					int v24 = this.mChildren.size();
					int v23 = v24;
					if ( < 0) {
						Object v26 = this.mChildren.get();
						WindowContainer v25 = v26;
						DisplayContent$$ExternalSyntheticLambda6 v28 = new DisplayContent$$ExternalSyntheticLambda6(p1);
						Task v30 = DisplayContent.getRootTask(v28);
						Task v27 = v30;
						if (v27 == 0) {
							Task v22 = v27;
							if (v22 != 0) {
								ActivityRecord v33 = TaskFragment.topRunningActivity(0, 1);
								ActivityRecord v32 = v33;
								ActivityRecord v31 = v32;
								if (v31 == 0) {
									boolean v36 = ActivityRecord.isFocusable();
									if (v36 == 0) {
										boolean v37 = ActivityRecord.canReceiveKeys();
										if (v37 != 0) {
											boolean v38 = ActivityRecord.isAlwaysFocusable();
											if (v38 == 0) {
												boolean v35 = ;
												if (v35 != 0) {
													if (this.task == 0) {
														Task v40 = this.task.getRootTask();
														Task v39 = ;
														if (v39 != 0) {
															if (DisplayContent.mFocusedApp == 0) {
																if (this.task != this.task) {
																	ActivityRecord$$ExternalSyntheticLambda4 v41 = new ActivityRecord$$ExternalSyntheticLambda4();
																	Task v43 = WindowContainer.mDisplayContent.getTask(v41, 1);
																	if (this.task != v43) {
																		if (DisplayContent.mFocusedApp != ActivityRecord) {
																			if (ProtoLogCache.WM_DEBUG_FOCUS_enabled == 0) {
																				String v44 = String.valueOf(ActivityRecord);
																				Object v45 = new Object(1);
																				ProtoLogImpl v47 = ProtoLogImpl.getSingleInstance();
																				v47.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v45);
																				if (p0 == 0) {
																					DisplayContent v50 = p0.getDisplayContent();
																					if (v50 == DisplayContent) {
																						TaskDisplayArea v51 = p0.getDisplayArea();
																						DisplayContent.onLastFocusedTaskDisplayAreaChanged(v51);
																						if (this.mFocusedApp != p0) {
																							if (ProtoLogCache.WM_DEBUG_FOCUS_LIGHT_enabled == 0) {
																								String v53 = String.valueOf(p0);
																								int v54 = DisplayContent.getDisplayId();
																								String v55 = Debug.getCallers(4);
																								String v56 = String.valueOf(v55);
																								Object v57 = new Object(3);
																								Long v58 = Long.valueOf(v54);
																								ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v57);
																								if (this.mFocusedApp == 0) {
																									Task v60 = this.mFocusedApp.getTask();
																									if (p0 == 0) {
																										Task v61 = p0.getTask();
																										this.mFocusedApp = p0;
																										if ( == ) {
																											if ( == 0) {
																												.onAppFocusChanged(0);
																												if ( == 0) {
																													.onAppFocusChanged(1);
																													InputMonitor v64 = DisplayContent.getInputMonitor();
																													v64.setFocusedAppLw(p0);
																													DisplayContent.updateTouchExcludeRegion();
																													boolean v49 = 1;
																													Trace.traceBegin(32, "wmUpdateFocus");
																													boolean v69 = this.mRoot.updateFocusedWindowLocked(0, 1);
																													Trace.traceEnd(32);
																													boolean v67 = v69;
																													boolean v71 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
																													boolean v34 = (v71 ^ 1);
																													if (v34 == 0) {
																														boolean v74 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0, 0);
																														boolean v73 = v74;
																														boolean v72 = v73;
																														WindowManagerThreadPriorityBooster.reset();
																														Binder.restoreCallingIdentity(v18);
																														return;
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
