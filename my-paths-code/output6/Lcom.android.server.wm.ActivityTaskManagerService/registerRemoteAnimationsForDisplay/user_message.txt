This is path 1 for the API with depth 2:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ( < 0) {
		int v11 = this.mChildren.size();
		int v10 = v11;
		if ( < 0) {
			DisplayContent v9 = 0;
			if (v9 != 0) {
				long v12 = Binder.clearCallingIdentity();
				this.mRemoteAnimationDefinition = p1;
				Binder.restoreCallingIdentity(v12);
				return;
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ( < 0) {
		WindowManagerThreadPriorityBooster.boost();
		int v12 = this.mChildren.size();
		int v11 = v12;
		if ( < 0) {
			DisplayContent v10 = 0;
			if (v10 != 0) {
				long v13 = Binder.clearCallingIdentity();
				this.mRemoteAnimationDefinition = p1;
				Binder.restoreCallingIdentity(v13);
				return;
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	int v5 = this.mTransitionAnimationMap.size();
	if ( < 0) {
		int v11 = this.mChildren.size();
		int v10 = v11;
		if ( < 0) {
			DisplayContent v9 = 0;
			if (v9 != 0) {
				long v12 = Binder.clearCallingIdentity();
				this.mRemoteAnimationDefinition = p1;
				Binder.restoreCallingIdentity(v12);
				WindowManagerThreadPriorityBooster.reset();
				return;
			}
		}
	}
}
