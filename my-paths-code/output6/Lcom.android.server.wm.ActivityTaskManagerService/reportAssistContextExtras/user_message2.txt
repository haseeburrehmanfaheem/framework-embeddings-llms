The method reportAssistContextExtras has the following code snippet:

This is path 1 for the API with depth 2:
public void reportAssistContextExtras(IBinder p1, Bundle p2, AssistStructure p3, AssistContent p4, Uri p5){
	ActivityTaskManagerService$PendingAssistExtras.result = p2;
	ActivityTaskManagerService$PendingAssistExtras.structure = p3;
	ActivityTaskManagerService$PendingAssistExtras.content = p4;
	if (p5 == 0) {
		ActivityTaskManagerService$PendingAssistExtras.extras.putParcelable("android.intent.extra.REFERRER", p5);
		WindowContainer v3 = this.mParent;
		if (v3 == 0) {
			boolean v4 = v3.isAttached();
			WindowContainer v5 = WindowContainer.getParent();
			if (v5 == 0) {
				boolean v6 = v5.isAttached();
				if (v6 == 0) {
					boolean v2 = ;
					if (v6 == 0) {
						return ;
						if (isAttached() != 0) {
							if (p3 == 0) {
								Task v7 = ActivityTaskManagerService$PendingAssistExtras.activity.getTask();
								p3.setTaskId(Task.mTaskId);
								p3.setActivityComponent(ActivityRecord.mActivityComponent);
								p3.setHomeActivity(ActivityTaskManagerService$PendingAssistExtras.isHome);
								ActivityTaskManagerService$PendingAssistExtras.haveResult = 1;
								p1.notifyAll();
								if (ActivityTaskManagerService$PendingAssistExtras.intent != 0) {
									if (ActivityTaskManagerService$PendingAssistExtras.receiver != 0) {
										p0.buildAssistBundleLocked(p1, p2);
										boolean v16 = this.mPendingAssistExtras.remove(p1);
										this.mUiHandler.removeCallbacks(p1);
										if (v16 != 0) {
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void reportAssistContextExtras(IBinder p1, Bundle p2, AssistStructure p3, AssistContent p4, Uri p5){
	ActivityTaskManagerService$PendingAssistExtras.result = p2;
	ActivityTaskManagerService$PendingAssistExtras.structure = p3;
	ActivityTaskManagerService$PendingAssistExtras.content = p4;
	if (p5 == 0) {
		ActivityTaskManagerService$PendingAssistExtras.extras.putParcelable("android.intent.extra.REFERRER", p5);
		WindowContainer v3 = this.mParent;
		if (v3 == 0) {
			boolean v4 = v3.isAttached();
			WindowContainer v5 = WindowContainer.getParent();
			if (v5 == 0) {
				boolean v6 = v5.isAttached();
				if (v6 == 0) {
					boolean v2 = ;
					if (v6 == 0) {
						return ;
						if (isAttached() != 0) {
							if (p3 == 0) {
								Task v7 = ActivityTaskManagerService$PendingAssistExtras.activity.getTask();
								p3.setTaskId(Task.mTaskId);
								p3.setActivityComponent(ActivityRecord.mActivityComponent);
								p3.setHomeActivity(ActivityTaskManagerService$PendingAssistExtras.isHome);
								ActivityTaskManagerService$PendingAssistExtras.haveResult = 1;
								p1.notifyAll();
								if (ActivityTaskManagerService$PendingAssistExtras.intent != 0) {
									if (ActivityTaskManagerService$PendingAssistExtras.receiver != 0) {
										WindowManagerThreadPriorityBooster.boost();
										p0.buildAssistBundleLocked(p1, p2);
										boolean v17 = this.mPendingAssistExtras.remove(p1);
										this.mUiHandler.removeCallbacks(p1);
										if (v17 != 0) {
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void reportAssistContextExtras(IBinder p1, Bundle p2, AssistStructure p3, AssistContent p4, Uri p5){
	ActivityTaskManagerService$PendingAssistExtras.result = p2;
	ActivityTaskManagerService$PendingAssistExtras.structure = p3;
	ActivityTaskManagerService$PendingAssistExtras.content = p4;
	if (p5 == 0) {
		ActivityTaskManagerService$PendingAssistExtras.extras.putParcelable("android.intent.extra.REFERRER", p5);
		WindowContainer v3 = this.mParent;
		if (v3 == 0) {
			boolean v4 = v3.isAttached();
			WindowContainer v5 = WindowContainer.getParent();
			if (v5 == 0) {
				boolean v6 = v5.isAttached();
				if (v6 == 0) {
					boolean v2 = ;
					if (v6 == 0) {
						return ;
						if (isAttached() != 0) {
							if (p3 == 0) {
								Task v7 = ActivityTaskManagerService$PendingAssistExtras.activity.getTask();
								p3.setTaskId(Task.mTaskId);
								p3.setActivityComponent(ActivityRecord.mActivityComponent);
								p3.setHomeActivity(ActivityTaskManagerService$PendingAssistExtras.isHome);
								ActivityTaskManagerService$PendingAssistExtras.haveResult = 1;
								p1.notifyAll();
								if (ActivityTaskManagerService$PendingAssistExtras.intent != 0) {
									if (ActivityTaskManagerService$PendingAssistExtras.receiver != 0) {
										p0.buildAssistBundleLocked(p1, p2);
										boolean v16 = this.mPendingAssistExtras.remove(p1);
										this.mUiHandler.removeCallbacks(p1);
										if (v16 != 0) {
											WindowManagerThreadPriorityBooster.reset();
											return;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['ActivityTaskManagerService$PendingAssistExtras.result = p2;\nActivityTaskManagerService$PendingAssistExtras.structure = p3;\nActivityTaskManagerService$PendingAssistExtras.content = p4;', 'p3.setTaskId(Task.mTaskId);\np3.setActivityComponent(ActivityRecord.mActivityComponent);\np3.setHomeActivity(ActivityTaskManagerService$PendingAssistExtras.isHome);', 'ActivityTaskManagerService$PendingAssistExtras.extras.putParcelable("android.intent.extra.REFERRER", p5);', 'p0.buildAssistBundleLocked(p1, p2);']

The method reportAssistContextExtras has the following similar APIs:

- API Name: getAssistContextExtras(I)Landroid/os/Bundle; with Similarity Score: 0.7583706378936768
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityTaskManagerService$PendingAssistExtras v2 = 0;
if (v2 != 0) { if (ActivityTaskManagerService$PendingAssistExtras.haveResult != 0) { p0.buildAssistBundleLocked(v2, ActivityTaskManagerService$PendingAssistExtras.result);
boolean v30 = this.mPendingAssistExtras.remove(v2);
this.mUiHandler.removeCallbacks(v2);
return ActivityTaskManagerService$PendingAssistExtras.extras;

- API Name: setActivityController(Landroid/app/IActivityController;Z)V with Similarity Score: 0.7159218192100525
  - Access Control Level: SYS_OR_SIG and the following code:
this.mController = p1;
this.mControllerIsAMonkey = p2;
Watchdog v5 = Watchdog.getInstance();
v5.setActivityController(p1);

