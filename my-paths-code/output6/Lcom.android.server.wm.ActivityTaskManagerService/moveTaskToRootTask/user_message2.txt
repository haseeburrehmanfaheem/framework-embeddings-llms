The method moveTaskToRootTask has the following code snippet:

This is path 1 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	long v5 = Binder.clearCallingIdentity();
	Task v8 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v7 = v8;
	Task v6 = v7;
	if (v6 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v9 = new Object(3);
			Long v10 = Long.valueOf(p1);
			Long v11 = Long.valueOf(p2);
			Boolean v12 = Boolean.valueOf(p3);
			if (this.sServiceInstance != 0) {
				ProtoLogImpl v15 = new ProtoLogImpl(v16,1048576,v18);
				File v16 = new File("/data/misc/wmtrace/wm_log.winscope");
				ProtoLogViewerConfigReader v18 = new ProtoLogViewerConfigReader();
				this.sServiceInstance = v15;
				ProtoLogImpl v14 = this.sServiceInstance;
				boolean v22 = p1.isLogToProto();
				if (v22 == 0) {
					BaseProtoLogImpl.logToProto(p2, p3, p5);
					boolean v24 = p1.isLogToLogcat();
					if (v24 == 0) {
						String v25 = p1.getTag();
						BaseProtoLogImpl.logToLogcat(v25, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
						int v29 = this.mChildren.size();
						int v28 = v29;
						if ( < 0) {
							Object v31 = this.mChildren.get();
							WindowContainer v30 = v31;
							DisplayContent$$ExternalSyntheticLambda6 v33 = new DisplayContent$$ExternalSyntheticLambda6(p1);
							Task v35 = DisplayContent.getRootTask(v33);
							Task v32 = v35;
							if (v32 == 0) {
								Task v27 = v32;
								if (v27 == 0) {
									boolean v36 = v27.isActivityTypeStandardOrUndefined();
									if (v36 == 0) {
										if (p3 == 0) {
											Task v39 = Task.getRootTask();
											if ( != 2147483647) {
												Task v40 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, );
												if (v40 != v39) {
													int v41 = v40.getDisplayId();
													boolean v42 = Task.canBeLaunchedOnDisplay(v41);
													if (v42 != 0) {
														boolean v38 = 0;
														boolean v37 = v38;
														Binder.restoreCallingIdentity(v5);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	WindowManagerThreadPriorityBooster.boost();
	long v6 = Binder.clearCallingIdentity();
	Task v9 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v8 = v9;
	Task v7 = v8;
	if (v7 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v10 = new Object(3);
			Long v11 = Long.valueOf(p1);
			Long v12 = Long.valueOf(p2);
			Boolean v13 = Boolean.valueOf(p3);
			if (this.sServiceInstance != 0) {
				ProtoLogImpl v16 = new ProtoLogImpl(v17,1048576,v19);
				File v17 = new File("/data/misc/wmtrace/wm_log.winscope");
				ProtoLogViewerConfigReader v19 = new ProtoLogViewerConfigReader();
				this.sServiceInstance = v16;
				ProtoLogImpl v15 = this.sServiceInstance;
				boolean v23 = p1.isLogToProto();
				if (v23 == 0) {
					BaseProtoLogImpl.logToProto(p2, p3, p5);
					boolean v25 = p1.isLogToLogcat();
					if (v25 == 0) {
						String v26 = p1.getTag();
						BaseProtoLogImpl.logToLogcat(v26, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
						int v30 = this.mChildren.size();
						int v29 = v30;
						if ( < 0) {
							Object v32 = this.mChildren.get();
							WindowContainer v31 = v32;
							DisplayContent$$ExternalSyntheticLambda6 v34 = new DisplayContent$$ExternalSyntheticLambda6(p1);
							Task v36 = DisplayContent.getRootTask(v34);
							Task v33 = v36;
							if (v33 == 0) {
								Task v28 = v33;
								if (v28 == 0) {
									boolean v37 = v28.isActivityTypeStandardOrUndefined();
									if (v37 == 0) {
										if (p3 == 0) {
											Task v40 = Task.getRootTask();
											if ( != 2147483647) {
												Task v41 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, );
												if (v41 != v40) {
													int v42 = v41.getDisplayId();
													boolean v43 = Task.canBeLaunchedOnDisplay(v42);
													if (v43 != 0) {
														boolean v39 = 0;
														boolean v38 = v39;
														Binder.restoreCallingIdentity(v6);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	long v5 = Binder.clearCallingIdentity();
	Task v8 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v7 = v8;
	Task v6 = v7;
	if (v6 != 0) {
		if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
			Object v9 = new Object(3);
			Long v10 = Long.valueOf(p1);
			Long v11 = Long.valueOf(p2);
			Boolean v12 = Boolean.valueOf(p3);
			if (this.sServiceInstance != 0) {
				ProtoLogImpl v15 = new ProtoLogImpl(v16,1048576,v18);
				File v16 = new File("/data/misc/wmtrace/wm_log.winscope");
				ProtoLogViewerConfigReader v18 = new ProtoLogViewerConfigReader();
				this.sServiceInstance = v15;
				ProtoLogImpl v14 = this.sServiceInstance;
				boolean v22 = p1.isLogToProto();
				if (v22 == 0) {
					BaseProtoLogImpl.logToProto(p2, p3, p5);
					boolean v24 = p1.isLogToLogcat();
					if (v24 == 0) {
						String v25 = p1.getTag();
						BaseProtoLogImpl.logToLogcat(v25, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
						int v29 = this.mChildren.size();
						int v28 = v29;
						if ( < 0) {
							Object v31 = this.mChildren.get();
							WindowContainer v30 = v31;
							DisplayContent$$ExternalSyntheticLambda6 v33 = new DisplayContent$$ExternalSyntheticLambda6(p1);
							Task v35 = DisplayContent.getRootTask(v33);
							Task v32 = v35;
							if (v32 == 0) {
								Task v27 = v32;
								if (v27 == 0) {
									boolean v36 = v27.isActivityTypeStandardOrUndefined();
									if (v36 == 0) {
										if (p3 == 0) {
											Task v39 = Task.getRootTask();
											if ( != 2147483647) {
												Task v40 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, );
												if (v40 != v39) {
													int v41 = v40.getDisplayId();
													boolean v42 = Task.canBeLaunchedOnDisplay(v41);
													if (v42 != 0) {
														boolean v38 = 0;
														boolean v37 = v38;
														Binder.restoreCallingIdentity(v5);
														WindowManagerThreadPriorityBooster.reset();
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Task v8 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);\nTask v7 = v8;\nTask v6 = v7;\nif (v6 != 0) {', 'Long v10 = Long.valueOf(p1);\nLong v11 = Long.valueOf(p2);\nBoolean v12 = Boolean.valueOf(p3);', 'ProtoLogImpl v15 = new ProtoLogImpl(v16,1048576,v18);\nFile v16 = new File("/data/misc/wmtrace/wm_log.winscope");\nProtoLogViewerConfigReader v18 = new ProtoLogViewerConfigReader();', 'DisplayContent$$ExternalSyntheticLambda6 v33 = new DisplayContent$$ExternalSyntheticLambda6(p1);\nTask v35 = DisplayContent.getRootTask(v33);\nTask v32 = v35;']

The method moveTaskToRootTask has the following similar APIs:

- API Name: cancelTaskWindowTransition(I)V with Similarity Score: 0.8442714810371399
  - Access Control Level: NONE and the following code:
Task v13 = RootWindowContainer.getTask(v12);
if (v13 == 0) { ... }

- API Name: getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot; with Similarity Score: 0.8252583742141724
  - Access Control Level: SYS_OR_SIG and the following code:
Task v36 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
if (v35 == 0) {
int v42 = TaskSnapshotController.getSnapshotMode(v35);

