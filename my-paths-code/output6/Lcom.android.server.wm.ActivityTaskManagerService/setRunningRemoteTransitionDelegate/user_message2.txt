The method setRunningRemoteTransitionDelegate has the following code snippet:

This is path 1 for the API with depth 2:
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	Object v11 = this.mPidMap.get(p1);
	WindowProcessController v10 = v11;
	if (v10 != 0) {
		WindowProcessController v9 = 0;
		if (v9 == 0) {
			boolean v12 = v9.isRunningRemoteTransition();
			if (v12 == 0) {
				if (p1 != 0) {
					IBinder v14 = p1.asBinder();
					ArrayMap v15 = this.mMap;
					int v16 = v15.size();
					if ( < 0) {
						Object v17 = v15.valueAt();
						int v18 = v17.size();
						if ( < 0) {
							Object v19 = v17.valueAt();
							if (this.mThread == 0) {
								boolean v20 = ;
								if (v20 == 0) {
									IApplicationThread v21 = this.mThread;
									IBinder v22 = v21.asBinder();
									if (v22 != v14) {
										WindowProcessController v13 = v19;
										if (v13 != 0) {
											if (1 != 0) {
												boolean v24 = v13.isRunningRemoteTransition();
												if (v24 != 0) {
													boolean v25 = v13.hasThread();
													if (v25 != 0) {
														if (this.mRunningRemoteAnimation != 1) {
															this.mRunningRemoteAnimation = 1;
															WindowProcessController.updateRunningRemoteOrRecentsAnimation();
															TransitionController$RemotePlayer$DelegateProcess v28 = new TransitionController$RemotePlayer$DelegateProcess(TransitionController$RemotePlayer,v13);
															if (0 == 0) {
																TransitionController$RemotePlayer$DelegateProcess.mNeedReport = 1;
																boolean v30 = ActivityTaskManagerService.mH.postDelayed(v28, 100);
																IApplicationThread v31 = this.mThread;
																IBinder v32 = v31.asBinder();
																Object v33 = this.mDelegateProcesses.put(v32, v28);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	WindowManagerThreadPriorityBooster.boost();
	Object v12 = this.mPidMap.get(p1);
	WindowProcessController v11 = v12;
	if (v11 != 0) {
		WindowProcessController v10 = 0;
		if (v10 == 0) {
			boolean v13 = v10.isRunningRemoteTransition();
			if (v13 == 0) {
				if (p1 != 0) {
					IBinder v15 = p1.asBinder();
					ArrayMap v16 = this.mMap;
					int v17 = v16.size();
					if ( < 0) {
						Object v18 = v16.valueAt();
						int v19 = v18.size();
						if ( < 0) {
							Object v20 = v18.valueAt();
							if (this.mThread == 0) {
								boolean v21 = ;
								if (v21 == 0) {
									IApplicationThread v22 = this.mThread;
									IBinder v23 = v22.asBinder();
									if (v23 != v15) {
										WindowProcessController v14 = v20;
										if (v14 != 0) {
											if (1 != 0) {
												boolean v25 = v14.isRunningRemoteTransition();
												if (v25 != 0) {
													boolean v26 = v14.hasThread();
													if (v26 != 0) {
														if (this.mRunningRemoteAnimation != 1) {
															this.mRunningRemoteAnimation = 1;
															WindowProcessController.updateRunningRemoteOrRecentsAnimation();
															TransitionController$RemotePlayer$DelegateProcess v29 = new TransitionController$RemotePlayer$DelegateProcess(TransitionController$RemotePlayer,v14);
															if (0 == 0) {
																TransitionController$RemotePlayer$DelegateProcess.mNeedReport = 1;
																boolean v31 = ActivityTaskManagerService.mH.postDelayed(v29, 100);
																IApplicationThread v32 = this.mThread;
																IBinder v33 = v32.asBinder();
																Object v34 = this.mDelegateProcesses.put(v33, v29);
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setRunningRemoteTransitionDelegate(IApplicationThread p1){
	int v4 = Binder.getCallingPid();
	int v5 = Binder.getCallingUid();
	Object v11 = this.mPidMap.get(p1);
	WindowProcessController v10 = v11;
	if (v10 != 0) {
		WindowProcessController v9 = 0;
		if (v9 == 0) {
			boolean v12 = v9.isRunningRemoteTransition();
			if (v12 == 0) {
				if (p1 != 0) {
					IBinder v14 = p1.asBinder();
					ArrayMap v15 = this.mMap;
					int v16 = v15.size();
					if ( < 0) {
						Object v17 = v15.valueAt();
						int v18 = v17.size();
						if ( < 0) {
							Object v19 = v17.valueAt();
							if (this.mThread == 0) {
								boolean v20 = ;
								if (v20 == 0) {
									IApplicationThread v21 = this.mThread;
									IBinder v22 = v21.asBinder();
									if (v22 != v14) {
										WindowProcessController v13 = v19;
										if (v13 != 0) {
											if (1 != 0) {
												boolean v24 = v13.isRunningRemoteTransition();
												if (v24 != 0) {
													boolean v25 = v13.hasThread();
													if (v25 != 0) {
														if (this.mRunningRemoteAnimation != 1) {
															this.mRunningRemoteAnimation = 1;
															WindowProcessController.updateRunningRemoteOrRecentsAnimation();
															TransitionController$RemotePlayer$DelegateProcess v28 = new TransitionController$RemotePlayer$DelegateProcess(TransitionController$RemotePlayer,v13);
															if (0 == 0) {
																TransitionController$RemotePlayer$DelegateProcess.mNeedReport = 1;
																boolean v30 = ActivityTaskManagerService.mH.postDelayed(v28, 100);
																IApplicationThread v31 = this.mThread;
																IBinder v32 = v31.asBinder();
																Object v33 = this.mDelegateProcesses.put(v32, v28);
																WindowManagerThreadPriorityBooster.reset();
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['Object v11 = this.mPidMap.get(p1);\nWindowProcessController v10 = v11;\nif (v10 != 0) {\nTransitionController$RemotePlayer$DelegateProcess v28 = new TransitionController$RemotePlayer$DelegateProcess(TransitionController$RemotePlayer,v13);\nObject v33 = this.mDelegateProcesses.put(v32, v28);', 'int v4 = Binder.getCallingPid();\nint v5 = Binder.getCallingUid();\nif (this.mThread == 0) {\nIApplicationThread v21 = this.mThread;\nIBinder v22 = v21.asBinder();', 'WindowProcessController.updateRunningRemoteOrRecentsAnimation();\nTransitionController$RemotePlayer$DelegateProcess v28 = new TransitionController$RemotePlayer$DelegateProcess(TransitionController$RemotePlayer,v13);\nboolean v30 = ActivityTaskManagerService.mH.postDelayed(v28, 100);']

The method setRunningRemoteTransitionDelegate has the following similar APIs:

- API Name: showInputMethodPickerFromClient(Lcom/android/internal/view/IInputMethodClient;I)V with Similarity Score: 0.9174728393554688
  - Access Control Level: SYS_OR_SIG and the following code:
int v14 = Binder.getCallingUid();
int v28 = Binder.getCallingUid();

- API Name: getGlobalSearchActivities()Ljava/util/List; with Similarity Score: 0.916770339012146
  - Access Control Level: NONE and the following code:
int v20 = Binder.getCallingUid();
int v21 = UserHandle.getCallingUserId();
Object v19 = LocalServices.getService(PackageManagerInterna.class);

