This is path 1 for the API with depth 2:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 == 0) {
									int v19 = this.mChildren.size();
									if ( < 0) {
										Object v20 = this.mChildren.get();
										boolean v21 = v20.isVisible();
										int v22 = this.mChildren.size();
										if ( < 0) {
											Object v23 = this.mChildren.get();
											boolean v24 = v23.isVisible();
											if (v24 == 0) {
												boolean v18 = 1;
												if (v24 == 0) {
													return 1;
													if (isVisible() != 0) {
														if (0 == 0) {
															ActivityRecord v27 = p1.getTopMostActivity();
															boolean v28 = p1.isActivityTypeStandardOrUndefined();
															if (v28 != 0) {
																boolean v29 = p1.isActivityTypeAssistant();
																if (v29 != 0) {
																	if (v27 == 0) {
																		boolean v30 = v27.shouldUseAppThemeSnapshot();
																		if (v30 == 0) {
																			int v26 = 1;
																			if (v26 == 0) {
																				if (v26 == 1) {
																					ActivityRecord v32 = p1.getTopMostActivity();
																					if (v32 != 0) {
																						WindowState v33 = v32.findMainWindow();
																						if (v33 != 0) {
																							ActivityManager$TaskDescription v34 = p1.getTaskDescription();
																							int v35 = v34.getBackgroundColor();
																							int v36 = ColorUtils.setAlphaComponent(v35, 255);
																							WindowManager$LayoutParams v37 = v33.getAttrs();
																							Rect v38 = p1.getBounds();
																							InsetsState v39 = v33.getInsetsStateWithVisibilityOverride();
																							Rect v40 = v33.getFrame();
																							Rect v41 = TaskSnapshotController.getSystemBarInsets(v40, v39);
																							TaskSnapshotController$SystemBarBackgroundPainter v42 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v43,this.mHighResTaskSnapshotScale,v39);
																							ActivityManager$TaskDescription v43 = p1.getTaskDescription();
																							int v45 = v38.width();
																							int v46 = v38.height();
																							RenderNode v47 = RenderNode.create("TaskSnapshotController", 0);
																							boolean v48 = v47.setLeftTopRightBottom(0, 0, (v45 * this.mHighResTaskSnapshotScale), (v46 * this.mHighResTaskSnapshotScale));
																							boolean v49 = v47.setClipToBounds(0);
																							RecordingCanvas v50 = v47.start((v45 * this.mHighResTaskSnapshotScale), (v46 * this.mHighResTaskSnapshotScale));
																							v50.drawColor(v36);
																							v42.setInsets(v41);
																							v42.drawDecors(v50);
																							v47.end(v50);
																							Bitmap v55 = ThreadedRenderer.createHardwareBitmap(v47, (v45 * this.mHighResTaskSnapshotScale), (v46 * this.mHighResTaskSnapshotScale));
																							if (v55 != 0) {
																								TaskSnapshot v31 = 0;
																								TaskSnapshot v25 = ;
																								Binder.restoreCallingIdentity(v2);
																								return ;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
			Integer v12 = Integer.valueOf(p1);
			PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
			Task v14 = RootWindowContainer.getTask(v13);
			v13.recycle();
			if (v14 == 0) {
				if (0 == 0) {
					Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
					if (v16 == 0) {
						Task v17 = v14.getRootTask();
						if (v17 == v16) {
							if (0 == 0) {
								boolean v18 = v14.reparent(v16, 0, , 1, 1, "anyTaskForId");
								Task v8 = v14;
								Task v7 = v8;
								if (v7 == 0) {
									int v20 = this.mChildren.size();
									if ( < 0) {
										Object v21 = this.mChildren.get();
										boolean v22 = v21.isVisible();
										int v23 = this.mChildren.size();
										if ( < 0) {
											Object v24 = this.mChildren.get();
											boolean v25 = v24.isVisible();
											if (v25 == 0) {
												boolean v19 = 1;
												if (v25 == 0) {
													return 1;
													if (isVisible() != 0) {
														if (0 == 0) {
															ActivityRecord v28 = p1.getTopMostActivity();
															boolean v29 = p1.isActivityTypeStandardOrUndefined();
															if (v29 != 0) {
																boolean v30 = p1.isActivityTypeAssistant();
																if (v30 != 0) {
																	if (v28 == 0) {
																		boolean v31 = v28.shouldUseAppThemeSnapshot();
																		if (v31 == 0) {
																			int v27 = 1;
																			if (v27 == 0) {
																				if (v27 == 1) {
																					ActivityRecord v33 = p1.getTopMostActivity();
																					if (v33 != 0) {
																						WindowState v34 = v33.findMainWindow();
																						if (v34 != 0) {
																							ActivityManager$TaskDescription v35 = p1.getTaskDescription();
																							int v36 = v35.getBackgroundColor();
																							int v37 = ColorUtils.setAlphaComponent(v36, 255);
																							WindowManager$LayoutParams v38 = v34.getAttrs();
																							Rect v39 = p1.getBounds();
																							InsetsState v40 = v34.getInsetsStateWithVisibilityOverride();
																							Rect v41 = v34.getFrame();
																							Rect v42 = TaskSnapshotController.getSystemBarInsets(v41, v40);
																							TaskSnapshotController$SystemBarBackgroundPainter v43 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v44,this.mHighResTaskSnapshotScale,v40);
																							ActivityManager$TaskDescription v44 = p1.getTaskDescription();
																							int v46 = v39.width();
																							int v47 = v39.height();
																							RenderNode v48 = RenderNode.create("TaskSnapshotController", 0);
																							boolean v49 = v48.setLeftTopRightBottom(0, 0, (v46 * this.mHighResTaskSnapshotScale), (v47 * this.mHighResTaskSnapshotScale));
																							boolean v50 = v48.setClipToBounds(0);
																							RecordingCanvas v51 = v48.start((v46 * this.mHighResTaskSnapshotScale), (v47 * this.mHighResTaskSnapshotScale));
																							v51.drawColor(v37);
																							v43.setInsets(v42);
																							v43.drawDecors(v51);
																							v48.end(v51);
																							Bitmap v56 = ThreadedRenderer.createHardwareBitmap(v48, (v46 * this.mHighResTaskSnapshotScale), (v47 * this.mHighResTaskSnapshotScale));
																							if (v56 != 0) {
																								TaskSnapshot v32 = 0;
																								TaskSnapshot v26 = ;
																								Binder.restoreCallingIdentity(v2);
																								return ;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 == 0) {
									int v19 = this.mChildren.size();
									if ( < 0) {
										Object v20 = this.mChildren.get();
										boolean v21 = v20.isVisible();
										int v22 = this.mChildren.size();
										if ( < 0) {
											Object v23 = this.mChildren.get();
											boolean v24 = v23.isVisible();
											if (v24 == 0) {
												boolean v18 = 1;
												if (v24 == 0) {
													return 1;
													if (isVisible() != 0) {
														if (0 == 0) {
															ActivityRecord v27 = p1.getTopMostActivity();
															boolean v28 = p1.isActivityTypeStandardOrUndefined();
															if (v28 != 0) {
																boolean v29 = p1.isActivityTypeAssistant();
																if (v29 != 0) {
																	if (v27 == 0) {
																		boolean v30 = v27.shouldUseAppThemeSnapshot();
																		if (v30 == 0) {
																			int v26 = 1;
																			if (v26 == 0) {
																				if (v26 == 1) {
																					ActivityRecord v32 = p1.getTopMostActivity();
																					if (v32 != 0) {
																						WindowState v33 = v32.findMainWindow();
																						if (v33 != 0) {
																							ActivityManager$TaskDescription v34 = p1.getTaskDescription();
																							int v35 = v34.getBackgroundColor();
																							int v36 = ColorUtils.setAlphaComponent(v35, 255);
																							WindowManager$LayoutParams v37 = v33.getAttrs();
																							Rect v38 = p1.getBounds();
																							InsetsState v39 = v33.getInsetsStateWithVisibilityOverride();
																							Rect v40 = v33.getFrame();
																							Rect v41 = TaskSnapshotController.getSystemBarInsets(v40, v39);
																							TaskSnapshotController$SystemBarBackgroundPainter v42 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v43,this.mHighResTaskSnapshotScale,v39);
																							ActivityManager$TaskDescription v43 = p1.getTaskDescription();
																							int v45 = v38.width();
																							int v46 = v38.height();
																							RenderNode v47 = RenderNode.create("TaskSnapshotController", 0);
																							boolean v48 = v47.setLeftTopRightBottom(0, 0, (v45 * this.mHighResTaskSnapshotScale), (v46 * this.mHighResTaskSnapshotScale));
																							boolean v49 = v47.setClipToBounds(0);
																							RecordingCanvas v50 = v47.start((v45 * this.mHighResTaskSnapshotScale), (v46 * this.mHighResTaskSnapshotScale));
																							v50.drawColor(v36);
																							v42.setInsets(v41);
																							v42.drawDecors(v50);
																							v47.end(v50);
																							Bitmap v55 = ThreadedRenderer.createHardwareBitmap(v47, (v45 * this.mHighResTaskSnapshotScale), (v46 * this.mHighResTaskSnapshotScale));
																							if (v55 != 0) {
																								TaskSnapshot v31 = 0;
																								TaskSnapshot v25 = ;
																								WindowManagerThreadPriorityBooster.reset();
																								Binder.restoreCallingIdentity(v2);
																								return ;
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
