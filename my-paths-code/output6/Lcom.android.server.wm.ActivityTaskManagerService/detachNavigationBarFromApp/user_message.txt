This is path 1 for the API with depth 2:
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	TransitionController v7 = this.mTransitionController;
	TransitionController v6 = v7;
	Transition v9 = p1;
	if (v9 == 0) {
		boolean v10 = this.mPlayingTransitions.contains(v9);
		if (v10 != 0) {
			if (this.mNavBarAttachedToApp != 0) {
				this.mNavBarAttachedToApp = 0;
				if (this.mRecentsDisplayId != -1) {
					if (TransitionController.mStatusBar == 0) {
						TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
						DisplayContent v13 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
						DisplayPolicy v14 = v13.getDisplayPolicy();
						WindowState v15 = v14.getNavigationBar();
						if (v15 != 0) {
							v15.setSurfaceTranslationY(0);
							if (WindowState.mToken != 0) {
								SurfaceControl$Transaction v17 = v13.getPendingTransaction();
								WindowContainer v18 = WindowState.mToken.getParent();
								SurfaceControl v19 = WindowState.mToken.getSurfaceControl();
								int v20 = WindowState.mToken.getLastLayer();
								SurfaceControl$Transaction v21 = v17.setLayer(v19, v20);
								int v22 = this.mTargets.size();
								if ( >= v22) {
									Object v23 = this.mTargets.get();
									Task v24 = v23.asTask();
									if (v24 == 0) {
										boolean v25 = v24.isActivityTypeHomeOrRecents();
										if (v25 != 0) {
											boolean v26 = v24.isVisibleRequested();
											if ( == 0) {
												NavBarFadeAnimationController v27 = new NavBarFadeAnimationController(v13);
												v27.fadeWindowToken(1);
												Binder.restoreCallingIdentity(v2);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	TransitionController v8 = this.mTransitionController;
	TransitionController v7 = v8;
	Transition v10 = p1;
	if (v10 == 0) {
		boolean v11 = this.mPlayingTransitions.contains(v10);
		if (v11 != 0) {
			if (this.mNavBarAttachedToApp != 0) {
				this.mNavBarAttachedToApp = 0;
				if (this.mRecentsDisplayId != -1) {
					if (TransitionController.mStatusBar == 0) {
						TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
						DisplayContent v14 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
						DisplayPolicy v15 = v14.getDisplayPolicy();
						WindowState v16 = v15.getNavigationBar();
						if (v16 != 0) {
							v16.setSurfaceTranslationY(0);
							if (WindowState.mToken != 0) {
								SurfaceControl$Transaction v18 = v14.getPendingTransaction();
								WindowContainer v19 = WindowState.mToken.getParent();
								SurfaceControl v20 = WindowState.mToken.getSurfaceControl();
								int v21 = WindowState.mToken.getLastLayer();
								SurfaceControl$Transaction v22 = v18.setLayer(v20, v21);
								int v23 = this.mTargets.size();
								if ( >= v23) {
									Object v24 = this.mTargets.get();
									Task v25 = v24.asTask();
									if (v25 == 0) {
										boolean v26 = v25.isActivityTypeHomeOrRecents();
										if (v26 != 0) {
											boolean v27 = v25.isVisibleRequested();
											if ( == 0) {
												NavBarFadeAnimationController v28 = new NavBarFadeAnimationController(v14);
												v28.fadeWindowToken(1);
												Binder.restoreCallingIdentity(v2);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	TransitionController v7 = this.mTransitionController;
	TransitionController v6 = v7;
	Transition v9 = p1;
	if (v9 == 0) {
		boolean v10 = this.mPlayingTransitions.contains(v9);
		if (v10 != 0) {
			if (this.mNavBarAttachedToApp != 0) {
				this.mNavBarAttachedToApp = 0;
				if (this.mRecentsDisplayId != -1) {
					if (TransitionController.mStatusBar == 0) {
						TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
						DisplayContent v13 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
						DisplayPolicy v14 = v13.getDisplayPolicy();
						WindowState v15 = v14.getNavigationBar();
						if (v15 != 0) {
							v15.setSurfaceTranslationY(0);
							if (WindowState.mToken != 0) {
								SurfaceControl$Transaction v17 = v13.getPendingTransaction();
								WindowContainer v18 = WindowState.mToken.getParent();
								SurfaceControl v19 = WindowState.mToken.getSurfaceControl();
								int v20 = WindowState.mToken.getLastLayer();
								SurfaceControl$Transaction v21 = v17.setLayer(v19, v20);
								int v22 = this.mTargets.size();
								if ( >= v22) {
									Object v23 = this.mTargets.get();
									Task v24 = v23.asTask();
									if (v24 == 0) {
										boolean v25 = v24.isActivityTypeHomeOrRecents();
										if (v25 != 0) {
											boolean v26 = v24.isVisibleRequested();
											if ( == 0) {
												NavBarFadeAnimationController v27 = new NavBarFadeAnimationController(v13);
												v27.fadeWindowToken(1);
												WindowManagerThreadPriorityBooster.reset();
												Binder.restoreCallingIdentity(v2);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
