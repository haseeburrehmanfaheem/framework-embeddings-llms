This is path 1 for the API with depth 2:
public void setSplitScreenResizing(boolean p1){
	long v2 = Binder.clearCallingIdentity();
	if (p1 != this.mDockedRootTaskResizing) {
		this.mDockedRootTaskResizing = p1;
		DisplayContent v8 = WindowManagerService.getDefaultDisplayContentLocked();
		DockedTaskDividerController v9 = v8.getDockedDividerController();
		v9.setResizing(p1);
		WindowManagerService.requestTraversal();
		Binder.restoreCallingIdentity(v2);
		return;
	}
}

This is path 2 for the API with depth 2:
public void setSplitScreenResizing(boolean p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	if (p1 != this.mDockedRootTaskResizing) {
		this.mDockedRootTaskResizing = p1;
		DisplayContent v9 = WindowManagerService.getDefaultDisplayContentLocked();
		DockedTaskDividerController v10 = v9.getDockedDividerController();
		v10.setResizing(p1);
		WindowManagerService.requestTraversal();
		Binder.restoreCallingIdentity(v2);
		return;
	}
}

This is path 3 for the API with depth 2:
public void setSplitScreenResizing(boolean p1){
	long v2 = Binder.clearCallingIdentity();
	if (p1 != this.mDockedRootTaskResizing) {
		this.mDockedRootTaskResizing = p1;
		DisplayContent v8 = WindowManagerService.getDefaultDisplayContentLocked();
		DockedTaskDividerController v9 = v8.getDockedDividerController();
		v9.setResizing(p1);
		WindowManagerService.requestTraversal();
		WindowManagerThreadPriorityBooster.reset();
		Binder.restoreCallingIdentity(v2);
		return;
	}
}
