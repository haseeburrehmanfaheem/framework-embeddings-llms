The method startVoiceActivity has the following code snippet:

This is path 1 for the API with depth 2:
public int startVoiceActivity(String p1, String p2, int p3, int p4, Intent p5, String p6, IVoiceInteractionSession p7, IVoiceInteractor p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	if (p7 == 0) {
		if (p8 == 0) {
			int v4 = this.mAmInternal.handleIncomingUser(p3, p4, p12, 0, 0, "startVoiceActivity", 0);
			int v3 = v4;
			ActivityStartController v5 = this.mActivityStartController;
			ActivityStarter v7 = this.mFactory.obtain();
			ActivityStarter$Request.intent = p1;
			ActivityStarter v8 = ActivityStarter;
			ActivityStarter$Request.reason = p2;
			ActivityStarter v9 = ActivityStarter;
			ActivityStarter v6 = v9;
			ActivityStarter v10 = v6.setCallingUid(p4);
			ActivityStarter v11 = v10.setCallingPackage(p1);
			ActivityStarter v12 = v11.setCallingFeatureId(p2);
			ActivityStarter v13 = v12.setResolvedType(p6);
			ActivityStarter v14 = v13.setVoiceSession(p7);
			ActivityStarter v15 = v14.setVoiceInteractor(p8);
			ActivityStarter v16 = v15.setStartFlags(p9);
			ActivityStarter v17 = v16.setProfilerInfo(p10);
			if (p1 == 0) {
				SafeActivityOptions v20 = new SafeActivityOptions(v21);
				ActivityOptions v21 = ActivityOptions.fromBundle(p1);
				SafeActivityOptions v19 = ;
				ActivityStarter$Request.activityOptions = v19;
				ActivityStarter v23 = ActivityStarter;
				ActivityStarter v18 = v23;
				ActivityStarter v24 = v18.setUserId(v3);
				ActivityStarter v25 = v24.setAllowBackgroundActivityStart(1);
				int v26 = v25.execute();
				return v26;
			}
		}
	}
}

and the following sink code:
['ActivityStarter v7 = this.mFactory.obtain();\nActivityStarter$Request.intent = p1;\nActivityStarter$Request.reason = p2;\nActivityStarter v10 = v6.setCallingUid(p4);\nActivityStarter v11 = v10.setCallingPackage(p1);\nActivityStarter v12 = v11.setCallingFeatureId(p2);\nActivityStarter v13 = v12.setResolvedType(p6);\nActivityStarter v14 = v13.setVoiceSession(p7);\nActivityStarter v15 = v14.setVoiceInteractor(p8);\nActivityStarter v16 = v15.setStartFlags(p9);\nActivityStarter v17 = v16.setProfilerInfo(p10);\nSafeActivityOptions v20 = new SafeActivityOptions(v21);\nActivityOptions v21 = ActivityOptions.fromBundle(p1);\nActivityStarter$Request.activityOptions = v19;\nActivityStarter v24 = v18.setUserId(v3);\nActivityStarter v25 = v24.setAllowBackgroundActivityStart(1);\nint v26 = v25.execute();']

The method startVoiceActivity has the following similar APIs:

- API Name: startActivityFromGameSession(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;II)I with Similarity Score: 0.8989689946174622
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityStarter v14 = this.mFactory.obtain();
ActivityStarter$Request.intent = p1;
ActivityStarter v17 = v13.setCaller(p1);
ActivityStarter v18 = v17.setCallingUid(p5);
int v33 = v32.execute();

- API Name: startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/WaitResult; with Similarity Score: 0.7902340292930603
  - Access Control Level: SYS_OR_SIG and the following code:
int v12 = this.mAmInternal.handleIncomingUser(v9, v10, p12, 0, 0, "startActivityAndWait", 0);
int v11 = v12;
ActivityStarter$Request.intent = p4;
ActivityStarter v18 = v14.setCaller(p1);
ActivityStarter v19 = v18.setCallingPackage(p2);
ActivityStarter v20 = v19.setCallingFeatureId(p3);
ActivityStarter v21 = v20.setResolvedType(p5);
ActivityStarter v22 = v21.setResultTo(p6);
ActivityStarter v23 = v22.setResultWho(p7);
ActivityStarter v24 = v23.setRequestCode(p8);
ActivityStarter v25 = v24.setStartFlags(p9);
WaitResult v4 = new WaitResult();
int v35 = v34.execute();
return v4;

