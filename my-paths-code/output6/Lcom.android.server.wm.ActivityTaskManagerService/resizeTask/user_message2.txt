The method resizeTask has the following code snippet:

This is path 1 for the API with depth 2:
public boolean resizeTask(int p1, Rect p2, int p3){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									WindowConfiguration v18 = v6.getWindowConfiguration();
									boolean v19 = v18.canResizeTask();
									if (v19 != 0) {
										if ((p3 & 1) == 0) {
											boolean v22 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
											if (v22 != 0) {
												this.mLayoutReasons = 0;
												WindowManagerService.mWindowPlacerLocked.deferLayout();
												if ((p3 & 2) == 0) {
													WindowContainer v24 = this.mParent;
													if (v24 != 0) {
														if (p1 == 0) {
															boolean v26 = Task.inFreeformWindowingMode();
															if (v26 != 0) {
																int v27 = p1.width();
																int v28 = p1.height();
																if (v27 <= v28) {
																	Rect v29 = Task.getRequestedOverrideBounds();
																	if (this.mResizeMode != 7) {
																		boolean v30 = v29.isEmpty();
																		if (v30 != 0) {
																			int v31 = v29.width();
																			int v32 = v29.height();
																			if (v31 <= v32) {
																				if ( != ) {
																					boolean v25 = ;
																					if (v25 == 0) {
																						StringBuilder v33 = new StringBuilder();
																						StringBuilder v35 = v33.append("resizeTask_");
																						StringBuilder v36 = v33.append(this.mTaskId);
																						String v37 = v33.toString();
																						Trace.traceBegin(32, v37);
																						Configuration v39 = this.mResolvedOverrideConfiguration;
																						this.mTmpConfig.setTo(v39);
																						boolean v42 = Task.isRootTask();
																						if (v42 == 0) {
																							Task v43 = Task.getRootTask();
																							if (v43 == 0) {
																								Task v44 = Task.getRootTask();
																								DisplayContent v45 = v44.getDisplayContent();
																								if ( == 0) {
																									DisplayInfo v46 = .getDisplayInfo();
																									int v47 = Task.setBounds(p1);
																									this.mRotation = ;
																									Task.updateSurfacePositionNonOrganized();
																									int v41 = v47;
																									if (v41 == 0) {
																										Configuration v49 = this.mResolvedOverrideConfiguration;
																										boolean v50 = this.mTmpConfig.equals(v49);
																										if ( == 0) {
																											WindowContainer v52 = Task.getParent();
																											if (v52 != 0) {
																												Task$$ExternalSyntheticLambda6 v53 = new Task$$ExternalSyntheticLambda6();
																												ActivityRecord v55 = Task.getActivity(v53);
																												ActivityRecord v51 = v55;
																												if (v51 == 0) {
																													boolean v57 = ActivityRecord.ensureActivityConfiguration(0, p3, 0);
																													boolean v56 = v57;
																													RootWindowContainer.ensureActivitiesVisible(v51, 0, p3, 1);
																													if (v56 != 0) {
																														boolean v61 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
																														boolean v60 = v61;
																														Rect v63 = Task.getRequestedOverrideBounds();
																														int v64 = Task.setBounds(v63, );
																														if (v64 == 0) {
																															if ( == 0) {
																																DisplayContent v65 = Task.getDisplayContent();
																																v65.layoutAndAssignWindowLayersIfNeeded();
																																DisplayContent v68 = Task.getDisplayContent();
																																Task.saveLaunchingStateIfNeeded(v68);
																																Trace.traceEnd(32);
																																if (this.mLayoutReasons == 0) {
																																	WindowManagerService.mWindowPlacerLocked.continueLayout();
																																	boolean v20 = ;
																																	Binder.restoreCallingIdentity(v2);
																																	return v20;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean resizeTask(int p1, Rect p2, int p3){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
			Integer v12 = Integer.valueOf(p1);
			PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
			Task v14 = RootWindowContainer.getTask(v13);
			v13.recycle();
			if (v14 == 0) {
				if (0 == 0) {
					Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
					if (v16 == 0) {
						Task v17 = v14.getRootTask();
						if (v17 == v16) {
							if (0 == 0) {
								boolean v18 = v14.reparent(v16, 0, , 1, 1, "anyTaskForId");
								Task v8 = v14;
								Task v7 = v8;
								if (v7 != 0) {
									WindowConfiguration v19 = v7.getWindowConfiguration();
									boolean v20 = v19.canResizeTask();
									if (v20 != 0) {
										if ((p3 & 1) == 0) {
											boolean v23 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
											if (v23 != 0) {
												this.mLayoutReasons = 0;
												WindowManagerService.mWindowPlacerLocked.deferLayout();
												if ((p3 & 2) == 0) {
													WindowContainer v25 = this.mParent;
													if (v25 != 0) {
														if (p1 == 0) {
															boolean v27 = Task.inFreeformWindowingMode();
															if (v27 != 0) {
																int v28 = p1.width();
																int v29 = p1.height();
																if (v28 <= v29) {
																	Rect v30 = Task.getRequestedOverrideBounds();
																	if (this.mResizeMode != 7) {
																		boolean v31 = v30.isEmpty();
																		if (v31 != 0) {
																			int v32 = v30.width();
																			int v33 = v30.height();
																			if (v32 <= v33) {
																				if ( != ) {
																					boolean v26 = ;
																					if (v26 == 0) {
																						StringBuilder v34 = new StringBuilder();
																						StringBuilder v36 = v34.append("resizeTask_");
																						StringBuilder v37 = v34.append(this.mTaskId);
																						String v38 = v34.toString();
																						Trace.traceBegin(32, v38);
																						Configuration v40 = this.mResolvedOverrideConfiguration;
																						this.mTmpConfig.setTo(v40);
																						boolean v43 = Task.isRootTask();
																						if (v43 == 0) {
																							Task v44 = Task.getRootTask();
																							if (v44 == 0) {
																								Task v45 = Task.getRootTask();
																								DisplayContent v46 = v45.getDisplayContent();
																								if ( == 0) {
																									DisplayInfo v47 = .getDisplayInfo();
																									int v48 = Task.setBounds(p1);
																									this.mRotation = ;
																									Task.updateSurfacePositionNonOrganized();
																									int v42 = v48;
																									if (v42 == 0) {
																										Configuration v50 = this.mResolvedOverrideConfiguration;
																										boolean v51 = this.mTmpConfig.equals(v50);
																										if ( == 0) {
																											WindowContainer v53 = Task.getParent();
																											if (v53 != 0) {
																												Task$$ExternalSyntheticLambda6 v54 = new Task$$ExternalSyntheticLambda6();
																												ActivityRecord v56 = Task.getActivity(v54);
																												ActivityRecord v52 = v56;
																												if (v52 == 0) {
																													boolean v58 = ActivityRecord.ensureActivityConfiguration(0, p3, 0);
																													boolean v57 = v58;
																													RootWindowContainer.ensureActivitiesVisible(v52, 0, p3, 1);
																													if (v57 != 0) {
																														boolean v62 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
																														boolean v61 = v62;
																														Rect v64 = Task.getRequestedOverrideBounds();
																														int v65 = Task.setBounds(v64, );
																														if (v65 == 0) {
																															if ( == 0) {
																																DisplayContent v66 = Task.getDisplayContent();
																																v66.layoutAndAssignWindowLayersIfNeeded();
																																DisplayContent v69 = Task.getDisplayContent();
																																Task.saveLaunchingStateIfNeeded(v69);
																																Trace.traceEnd(32);
																																if (this.mLayoutReasons == 0) {
																																	WindowManagerService.mWindowPlacerLocked.continueLayout();
																																	boolean v21 = ;
																																	Binder.restoreCallingIdentity(v2);
																																	return v21;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean resizeTask(int p1, Rect p2, int p3){
	long v2 = Binder.clearCallingIdentity();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
			Integer v11 = Integer.valueOf(p1);
			PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
			Task v13 = RootWindowContainer.getTask(v12);
			v12.recycle();
			if (v13 == 0) {
				if (0 == 0) {
					Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
					if (v15 == 0) {
						Task v16 = v13.getRootTask();
						if (v16 == v15) {
							if (0 == 0) {
								boolean v17 = v13.reparent(v15, 0, , 1, 1, "anyTaskForId");
								Task v7 = v13;
								Task v6 = v7;
								if (v6 != 0) {
									WindowConfiguration v18 = v6.getWindowConfiguration();
									boolean v19 = v18.canResizeTask();
									if (v19 != 0) {
										if ((p3 & 1) == 0) {
											boolean v22 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
											if (v22 != 0) {
												this.mLayoutReasons = 0;
												WindowManagerService.mWindowPlacerLocked.deferLayout();
												if ((p3 & 2) == 0) {
													WindowContainer v24 = this.mParent;
													if (v24 != 0) {
														if (p1 == 0) {
															boolean v26 = Task.inFreeformWindowingMode();
															if (v26 != 0) {
																int v27 = p1.width();
																int v28 = p1.height();
																if (v27 <= v28) {
																	Rect v29 = Task.getRequestedOverrideBounds();
																	if (this.mResizeMode != 7) {
																		boolean v30 = v29.isEmpty();
																		if (v30 != 0) {
																			int v31 = v29.width();
																			int v32 = v29.height();
																			if (v31 <= v32) {
																				if ( != ) {
																					boolean v25 = ;
																					if (v25 == 0) {
																						StringBuilder v33 = new StringBuilder();
																						StringBuilder v35 = v33.append("resizeTask_");
																						StringBuilder v36 = v33.append(this.mTaskId);
																						String v37 = v33.toString();
																						Trace.traceBegin(32, v37);
																						Configuration v39 = this.mResolvedOverrideConfiguration;
																						this.mTmpConfig.setTo(v39);
																						boolean v42 = Task.isRootTask();
																						if (v42 == 0) {
																							Task v43 = Task.getRootTask();
																							if (v43 == 0) {
																								Task v44 = Task.getRootTask();
																								DisplayContent v45 = v44.getDisplayContent();
																								if ( == 0) {
																									DisplayInfo v46 = .getDisplayInfo();
																									int v47 = Task.setBounds(p1);
																									this.mRotation = ;
																									Task.updateSurfacePositionNonOrganized();
																									int v41 = v47;
																									if (v41 == 0) {
																										Configuration v49 = this.mResolvedOverrideConfiguration;
																										boolean v50 = this.mTmpConfig.equals(v49);
																										if ( == 0) {
																											WindowContainer v52 = Task.getParent();
																											if (v52 != 0) {
																												Task$$ExternalSyntheticLambda6 v53 = new Task$$ExternalSyntheticLambda6();
																												ActivityRecord v55 = Task.getActivity(v53);
																												ActivityRecord v51 = v55;
																												if (v51 == 0) {
																													boolean v57 = ActivityRecord.ensureActivityConfiguration(0, p3, 0);
																													boolean v56 = v57;
																													RootWindowContainer.ensureActivitiesVisible(v51, 0, p3, 1);
																													if (v56 != 0) {
																														boolean v61 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
																														boolean v60 = v61;
																														Rect v63 = Task.getRequestedOverrideBounds();
																														int v64 = Task.setBounds(v63, );
																														if (v64 == 0) {
																															if ( == 0) {
																																DisplayContent v65 = Task.getDisplayContent();
																																v65.layoutAndAssignWindowLayersIfNeeded();
																																DisplayContent v68 = Task.getDisplayContent();
																																Task.saveLaunchingStateIfNeeded(v68);
																																Trace.traceEnd(32);
																																if (this.mLayoutReasons == 0) {
																																	WindowManagerService.mWindowPlacerLocked.continueLayout();
																																	boolean v20 = ;
																																	WindowManagerThreadPriorityBooster.reset();
																																	Binder.restoreCallingIdentity(v2);
																																	return v20;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['long v2 = Binder.clearCallingIdentity();\nPooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);\nTask v13 = RootWindowContainer.getTask(v12);\nboolean v17 = v13.reparent(v16, 0, , 1, 1, "anyTaskForId");\nWindowConfiguration v18 = v6.getWindowConfiguration();\nboolean v19 = v18.canResizeTask();']

The method resizeTask has the following similar APIs:

- API Name: removeTask(I)Z with Similarity Score: 0.8572804927825928
  - Access Control Level: SYS_OR_SIG and the following code:
PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
Task v13 = RootWindowContainer.getTask(v12);
v12.recycle();

- API Name: getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot; with Similarity Score: 0.8545418977737427
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v11 = Integer.valueOf(p1);
PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
Task v13 = RootWindowContainer.getTask(v12);

