The method moveTaskToFront has the following code snippet:

This is path 1 for the API with depth 2:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					if (p5 == 0) {
						SafeActivityOptions v22 = new SafeActivityOptions(v23);
						if (p1 == 0) {
							ActivityOptions v24 = new ActivityOptions(p1);
							ActivityOptions v23 = ;
							SafeActivityOptions v21 = ;
							int v28 = Binder.getCallingPid();
							int v29 = Binder.getCallingUid();
							if (v32 == 0) {
								long v33 = Binder.clearCallingIdentity();
								if (p1 == 0) {
									if (p1 != 0) {
										IBinder v35 = p1.asBinder();
										ArrayMap v36 = this.mProcessNames.getMap();
										int v37 = v36.size();
										if ( < 0) {
											Object v38 = v36.valueAt();
											int v39 = v38.size();
											if ( < 0) {
												Object v40 = v38.valueAt();
												boolean v41 = v40.hasThread();
												if (v41 == 0) {
													IApplicationThread v42 = v40.getThread();
													IBinder v43 = v42.asBinder();
													if (v43 != v35) {
														WindowProcessController v34 = v40;
														ActivityStartController v44 = this.mActivityStartController;
														ActivityStarter v46 = this.mFactory.obtain();
														ActivityStarter v47 = v46.setIntent(0);
														ActivityStarter v48 = v47.setReason("moveTaskToFront");
														ActivityStarter v45 = v48;
														if (v54 == 2) {
															if (v54 != 1) {
																if ( != 0) {
																	boolean v57 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(v29);
																	if (v57 == 0) {
																		if ( == 0) {
																			if ( == 0) {
																				boolean v49 = 0;
																				if (v49 == 0) {
																					boolean v59 = this.mAmInternal.isBackgroundActivityStartsEnabled();
																					boolean v58 = v59;
																					if (v58 != 0) {
																						Task v61 = RootWindowContainer.anyTaskForId(p3, 2);
																						Task v60 = v61;
																						if (v60 != 0) {
																							LockTaskController v62 = this.mLockTaskController;
																							boolean v64 = LockTaskController.isLockTaskModeViolation(v60, 0);
																							boolean v63 = v64;
																							if (v63 == 0) {
																								if (v21 == 0) {
																									ActivityOptions v66 = SafeActivityOptions.getOptions(0, 0, 0, this.mTaskSupervisor);
																									ActivityOptions v65 = v66;
																									this.mTaskSupervisor.findTaskToMoveToFront(v60, p4, , "moveTaskToFront", 0);
																									Binder.restoreCallingIdentity(v33);
																									return;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					WindowManagerThreadPriorityBooster.boost();
					if (p5 == 0) {
						SafeActivityOptions v23 = new SafeActivityOptions(v24);
						if (p1 == 0) {
							ActivityOptions v25 = new ActivityOptions(p1);
							ActivityOptions v24 = ;
							SafeActivityOptions v22 = ;
							int v29 = Binder.getCallingPid();
							int v30 = Binder.getCallingUid();
							if (v33 == 0) {
								long v34 = Binder.clearCallingIdentity();
								if (p1 == 0) {
									if (p1 != 0) {
										IBinder v36 = p1.asBinder();
										ArrayMap v37 = this.mProcessNames.getMap();
										int v38 = v37.size();
										if ( < 0) {
											Object v39 = v37.valueAt();
											int v40 = v39.size();
											if ( < 0) {
												Object v41 = v39.valueAt();
												boolean v42 = v41.hasThread();
												if (v42 == 0) {
													IApplicationThread v43 = v41.getThread();
													IBinder v44 = v43.asBinder();
													if (v44 != v36) {
														WindowProcessController v35 = v41;
														ActivityStartController v45 = this.mActivityStartController;
														ActivityStarter v47 = this.mFactory.obtain();
														ActivityStarter v48 = v47.setIntent(0);
														ActivityStarter v49 = v48.setReason("moveTaskToFront");
														ActivityStarter v46 = v49;
														if (v55 == 2) {
															if (v55 != 1) {
																if ( != 0) {
																	boolean v58 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(v30);
																	if (v58 == 0) {
																		if ( == 0) {
																			if ( == 0) {
																				boolean v50 = 0;
																				if (v50 == 0) {
																					boolean v60 = this.mAmInternal.isBackgroundActivityStartsEnabled();
																					boolean v59 = v60;
																					if (v59 != 0) {
																						Task v62 = RootWindowContainer.anyTaskForId(p3, 2);
																						Task v61 = v62;
																						if (v61 != 0) {
																							LockTaskController v63 = this.mLockTaskController;
																							boolean v65 = LockTaskController.isLockTaskModeViolation(v61, 0);
																							boolean v64 = v65;
																							if (v64 == 0) {
																								if (v22 == 0) {
																									ActivityOptions v67 = SafeActivityOptions.getOptions(0, 0, 0, this.mTaskSupervisor);
																									ActivityOptions v66 = v67;
																									this.mTaskSupervisor.findTaskToMoveToFront(v61, p4, , "moveTaskToFront", 0);
																									Binder.restoreCallingIdentity(v34);
																									return;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
		Object v2 = new Object(1);
		Long v3 = Long.valueOf(p3);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v6 = new ProtoLogImpl(v7,1048576,v9);
			File v7 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v9 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v6;
			ProtoLogImpl v5 = this.sServiceInstance;
			boolean v13 = p1.isLogToProto();
			if (v13 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v15 = p1.isLogToLogcat();
				if (v15 == 0) {
					String v16 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
					if (p5 == 0) {
						SafeActivityOptions v22 = new SafeActivityOptions(v23);
						if (p1 == 0) {
							ActivityOptions v24 = new ActivityOptions(p1);
							ActivityOptions v23 = ;
							SafeActivityOptions v21 = ;
							int v28 = Binder.getCallingPid();
							int v29 = Binder.getCallingUid();
							if (v32 == 0) {
								long v33 = Binder.clearCallingIdentity();
								if (p1 == 0) {
									if (p1 != 0) {
										IBinder v35 = p1.asBinder();
										ArrayMap v36 = this.mProcessNames.getMap();
										int v37 = v36.size();
										if ( < 0) {
											Object v38 = v36.valueAt();
											int v39 = v38.size();
											if ( < 0) {
												Object v40 = v38.valueAt();
												boolean v41 = v40.hasThread();
												if (v41 == 0) {
													IApplicationThread v42 = v40.getThread();
													IBinder v43 = v42.asBinder();
													if (v43 != v35) {
														WindowProcessController v34 = v40;
														ActivityStartController v44 = this.mActivityStartController;
														ActivityStarter v46 = this.mFactory.obtain();
														ActivityStarter v47 = v46.setIntent(0);
														ActivityStarter v48 = v47.setReason("moveTaskToFront");
														ActivityStarter v45 = v48;
														if (v54 == 2) {
															if (v54 != 1) {
																if ( != 0) {
																	boolean v57 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(v29);
																	if (v57 == 0) {
																		if ( == 0) {
																			if ( == 0) {
																				boolean v49 = 0;
																				if (v49 == 0) {
																					boolean v59 = this.mAmInternal.isBackgroundActivityStartsEnabled();
																					boolean v58 = v59;
																					if (v58 != 0) {
																						Task v61 = RootWindowContainer.anyTaskForId(p3, 2);
																						Task v60 = v61;
																						if (v60 != 0) {
																							LockTaskController v62 = this.mLockTaskController;
																							boolean v64 = LockTaskController.isLockTaskModeViolation(v60, 0);
																							boolean v63 = v64;
																							if (v63 == 0) {
																								if (v21 == 0) {
																									ActivityOptions v66 = SafeActivityOptions.getOptions(0, 0, 0, this.mTaskSupervisor);
																									ActivityOptions v65 = v66;
																									this.mTaskSupervisor.findTaskToMoveToFront(v60, p4, , "moveTaskToFront", 0);
																									Binder.restoreCallingIdentity(v33);
																									WindowManagerThreadPriorityBooster.reset();
																									return;
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['boolean v13 = p1.isLogToProto();\nBaseProtoLogImpl.logToProto(p2, p3, p5);\nboolean v15 = p1.isLogToLogcat();\nString v16 = p1.getTag();\nBaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);', 'Task v61 = RootWindowContainer.anyTaskForId(p3, 2);\nLockTaskController v62 = this.mLockTaskController;\nboolean v64 = LockTaskController.isLockTaskModeViolation(v60, 0);\nthis.mTaskSupervisor.findTaskToMoveToFront(v60, p4, , "moveTaskToFront", 0);']

The method moveTaskToFront has the following similar APIs:

- API Name: updateLockTaskPackages(I[Ljava/lang/String;)V with Similarity Score: 0.7725664377212524
  - Access Control Level: SYS_OR_SIG and the following code:
this.mLockTaskPackages.put(p1, p2);
BaseProtoLogImpl.logToProto(p2, p3, p5);
BaseProtoLogImpl.logToLogcat(v22, BaseProtoLogImpl$LogLevel.WARN, p2, p4, p5);

- API Name: getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot; with Similarity Score: 0.7719517946243286
  - Access Control Level: SYS_OR_SIG and the following code:
Task v36 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
if (v35 == 0) {
int v42 = TaskSnapshotController.getSnapshotMode(v35);

