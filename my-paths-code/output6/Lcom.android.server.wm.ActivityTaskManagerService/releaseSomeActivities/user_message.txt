This is path 1 for the API with depth 2:
public void releaseSomeActivities(IApplicationThread p1){
	long v4 = Binder.clearCallingIdentity();
	if (p1 != 0) {
		IBinder v6 = p1.asBinder();
		ArrayMap v7 = this.mMap;
		int v8 = v7.size();
		if ( < 0) {
			Object v9 = v7.valueAt();
			int v10 = v9.size();
			if ( < 0) {
				Object v11 = v9.valueAt();
				if (this.mThread == 0) {
					boolean v12 = ;
					if (v12 == 0) {
						IApplicationThread v13 = this.mThread;
						IBinder v14 = v13.asBinder();
						if (v14 != v6) {
							WindowProcessController v5 = v11;
							int v16 = this.mActivities.size();
							if ( >= v16) {
								if ( == 0) {
									WindowProcessController$$ExternalSyntheticLambda2 v17 = new WindowProcessController$$ExternalSyntheticLambda2();
									.sort(v17);
									int v20 = .size();
									int v21 = Math.max(v20, 1);
									Object v22 = .remove(0);
									boolean v24 = ActivityRecord.isState(ActivityRecord$State.DESTROYING, ActivityRecord$State.DESTROYED);
									if (v24 == 0) {
										if (ProtoLogCache.WM_DEBUG_STATES_enabled == 0) {
											String v25 = String.valueOf(ActivityRecord);
											String v26 = String.valueOf(p1);
											Object v27 = new Object(2);
											ProtoLogImpl.v(ProtoLogGroup.WM_DEBUG_STATES, -21399771, 0, 0, v27);
											boolean v23 = 0;
											if (( + -1) > 0) {
												Binder.restoreCallingIdentity(v4);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void releaseSomeActivities(IApplicationThread p1){
	WindowManagerThreadPriorityBooster.boost();
	long v5 = Binder.clearCallingIdentity();
	if (p1 != 0) {
		IBinder v7 = p1.asBinder();
		ArrayMap v8 = this.mMap;
		int v9 = v8.size();
		if ( < 0) {
			Object v10 = v8.valueAt();
			int v11 = v10.size();
			if ( < 0) {
				Object v12 = v10.valueAt();
				if (this.mThread == 0) {
					boolean v13 = ;
					if (v13 == 0) {
						IApplicationThread v14 = this.mThread;
						IBinder v15 = v14.asBinder();
						if (v15 != v7) {
							WindowProcessController v6 = v12;
							int v17 = this.mActivities.size();
							if ( >= v17) {
								if ( == 0) {
									WindowProcessController$$ExternalSyntheticLambda2 v18 = new WindowProcessController$$ExternalSyntheticLambda2();
									.sort(v18);
									int v21 = .size();
									int v22 = Math.max(v21, 1);
									Object v23 = .remove(0);
									boolean v25 = ActivityRecord.isState(ActivityRecord$State.DESTROYING, ActivityRecord$State.DESTROYED);
									if (v25 == 0) {
										if (ProtoLogCache.WM_DEBUG_STATES_enabled == 0) {
											String v26 = String.valueOf(ActivityRecord);
											String v27 = String.valueOf(p1);
											Object v28 = new Object(2);
											ProtoLogImpl.v(ProtoLogGroup.WM_DEBUG_STATES, -21399771, 0, 0, v28);
											boolean v24 = 0;
											if (( + -1) > 0) {
												Binder.restoreCallingIdentity(v5);
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void releaseSomeActivities(IApplicationThread p1){
	long v4 = Binder.clearCallingIdentity();
	if (p1 != 0) {
		IBinder v6 = p1.asBinder();
		ArrayMap v7 = this.mMap;
		int v8 = v7.size();
		if ( < 0) {
			Object v9 = v7.valueAt();
			int v10 = v9.size();
			if ( < 0) {
				Object v11 = v9.valueAt();
				if (this.mThread == 0) {
					boolean v12 = ;
					if (v12 == 0) {
						IApplicationThread v13 = this.mThread;
						IBinder v14 = v13.asBinder();
						if (v14 != v6) {
							WindowProcessController v5 = v11;
							int v16 = this.mActivities.size();
							if ( >= v16) {
								if ( == 0) {
									WindowProcessController$$ExternalSyntheticLambda2 v17 = new WindowProcessController$$ExternalSyntheticLambda2();
									.sort(v17);
									int v20 = .size();
									int v21 = Math.max(v20, 1);
									Object v22 = .remove(0);
									boolean v24 = ActivityRecord.isState(ActivityRecord$State.DESTROYING, ActivityRecord$State.DESTROYED);
									if (v24 == 0) {
										if (ProtoLogCache.WM_DEBUG_STATES_enabled == 0) {
											String v25 = String.valueOf(ActivityRecord);
											String v26 = String.valueOf(p1);
											Object v27 = new Object(2);
											ProtoLogImpl.v(ProtoLogGroup.WM_DEBUG_STATES, -21399771, 0, 0, v27);
											boolean v23 = 0;
											if (( + -1) > 0) {
												Binder.restoreCallingIdentity(v4);
												WindowManagerThreadPriorityBooster.reset();
												return;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
