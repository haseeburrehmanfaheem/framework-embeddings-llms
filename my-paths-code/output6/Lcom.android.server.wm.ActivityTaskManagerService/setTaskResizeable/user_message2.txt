The method setTaskResizeable has the following code snippet:

This is path 1 for the API with depth 2:
public void setTaskResizeable(int p1, int p2){
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v6 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v8 = PooledLambda.__(Tas.class);
			Integer v9 = Integer.valueOf(p1);
			PooledPredicate v10 = PooledLambda.obtainPredicate(v6, v8, v9);
			Task v11 = RootWindowContainer.getTask(v10);
			v10.recycle();
			if (v11 == 0) {
				if (0 == 0) {
					Task v13 = RootWindowContainer.getOrCreateRootTask(0, 0, v11, 0);
					if (v13 == 0) {
						Task v14 = v11.getRootTask();
						if (v14 == v13) {
							if (0 == 0) {
								boolean v15 = v11.reparent(v13, 0, , 1, 1, "anyTaskForId");
								Task v5 = v11;
								Task v4 = v5;
								if (v4 != 0) {
									if (this.mResizeMode != p2) {
										this.mResizeMode = p2;
										RootWindowContainer.ensureActivitiesVisible(0, 0, 0, 1);
										boolean v20 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
										boolean v19 = v20;
										ActivityRecord v22 = Task.getRootActivity(1);
										if (v22 != 0) {
											ActivityManager$TaskDescription v23 = new ActivityManager$TaskDescription();
											Task$$ExternalSyntheticLambda9 v25 = new Task$$ExternalSyntheticLambda9();
											ArgumentPlaceholder v27 = PooledLambda.__(ActivityRecor.class);
											PooledPredicate v28 = PooledLambda.obtainPredicate(v25, v27, v22, v23);
											boolean v29 = Task.forAllActivities(v28);
											v28.recycle();
											v23.setResizeMode(this.mResizeMode);
											v23.setMinWidth(TaskFragment.mMinWidth);
											v23.setMinHeight(TaskFragment.mMinHeight);
											Task.setTaskDescription(v23);
											TaskChangeNotificationController v35 = TaskFragment.mAtmService.getTaskChangeNotificationController();
											ActivityManager$RunningTaskInfo v36 = Task.getTaskInfo();
											v35.notifyTaskDescriptionChanged(v36);
											WindowContainer v38 = Task.getParent();
											if (v38 == 0) {
												Task v39 = v38.asTask();
												if (v39 == 0) {
													v39.updateTaskDescription();
													Task.dispatchTaskInfoChangedIfNeeded(0);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setTaskResizeable(int p1, int p2){
	WindowManagerThreadPriorityBooster.boost();
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v7 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v9 = PooledLambda.__(Tas.class);
			Integer v10 = Integer.valueOf(p1);
			PooledPredicate v11 = PooledLambda.obtainPredicate(v7, v9, v10);
			Task v12 = RootWindowContainer.getTask(v11);
			v11.recycle();
			if (v12 == 0) {
				if (0 == 0) {
					Task v14 = RootWindowContainer.getOrCreateRootTask(0, 0, v12, 0);
					if (v14 == 0) {
						Task v15 = v12.getRootTask();
						if (v15 == v14) {
							if (0 == 0) {
								boolean v16 = v12.reparent(v14, 0, , 1, 1, "anyTaskForId");
								Task v6 = v12;
								Task v5 = v6;
								if (v5 != 0) {
									if (this.mResizeMode != p2) {
										this.mResizeMode = p2;
										RootWindowContainer.ensureActivitiesVisible(0, 0, 0, 1);
										boolean v21 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
										boolean v20 = v21;
										ActivityRecord v23 = Task.getRootActivity(1);
										if (v23 != 0) {
											ActivityManager$TaskDescription v24 = new ActivityManager$TaskDescription();
											Task$$ExternalSyntheticLambda9 v26 = new Task$$ExternalSyntheticLambda9();
											ArgumentPlaceholder v28 = PooledLambda.__(ActivityRecor.class);
											PooledPredicate v29 = PooledLambda.obtainPredicate(v26, v28, v23, v24);
											boolean v30 = Task.forAllActivities(v29);
											v29.recycle();
											v24.setResizeMode(this.mResizeMode);
											v24.setMinWidth(TaskFragment.mMinWidth);
											v24.setMinHeight(TaskFragment.mMinHeight);
											Task.setTaskDescription(v24);
											TaskChangeNotificationController v36 = TaskFragment.mAtmService.getTaskChangeNotificationController();
											ActivityManager$RunningTaskInfo v37 = Task.getTaskInfo();
											v36.notifyTaskDescriptionChanged(v37);
											WindowContainer v39 = Task.getParent();
											if (v39 == 0) {
												Task v40 = v39.asTask();
												if (v40 == 0) {
													v40.updateTaskDescription();
													Task.dispatchTaskInfoChangedIfNeeded(0);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setTaskResizeable(int p1, int p2){
	if (p2 == 2) {
		if (0 != 0) {
			AppTransition$$ExternalSyntheticLambda2 v6 = new AppTransition$$ExternalSyntheticLambda2();
			ArgumentPlaceholder v8 = PooledLambda.__(Tas.class);
			Integer v9 = Integer.valueOf(p1);
			PooledPredicate v10 = PooledLambda.obtainPredicate(v6, v8, v9);
			Task v11 = RootWindowContainer.getTask(v10);
			v10.recycle();
			if (v11 == 0) {
				if (0 == 0) {
					Task v13 = RootWindowContainer.getOrCreateRootTask(0, 0, v11, 0);
					if (v13 == 0) {
						Task v14 = v11.getRootTask();
						if (v14 == v13) {
							if (0 == 0) {
								boolean v15 = v11.reparent(v13, 0, , 1, 1, "anyTaskForId");
								Task v5 = v11;
								Task v4 = v5;
								if (v4 != 0) {
									if (this.mResizeMode != p2) {
										this.mResizeMode = p2;
										RootWindowContainer.ensureActivitiesVisible(0, 0, 0, 1);
										boolean v20 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
										boolean v19 = v20;
										ActivityRecord v22 = Task.getRootActivity(1);
										if (v22 != 0) {
											ActivityManager$TaskDescription v23 = new ActivityManager$TaskDescription();
											Task$$ExternalSyntheticLambda9 v25 = new Task$$ExternalSyntheticLambda9();
											ArgumentPlaceholder v27 = PooledLambda.__(ActivityRecor.class);
											PooledPredicate v28 = PooledLambda.obtainPredicate(v25, v27, v22, v23);
											boolean v29 = Task.forAllActivities(v28);
											v28.recycle();
											v23.setResizeMode(this.mResizeMode);
											v23.setMinWidth(TaskFragment.mMinWidth);
											v23.setMinHeight(TaskFragment.mMinHeight);
											Task.setTaskDescription(v23);
											TaskChangeNotificationController v35 = TaskFragment.mAtmService.getTaskChangeNotificationController();
											ActivityManager$RunningTaskInfo v36 = Task.getTaskInfo();
											v35.notifyTaskDescriptionChanged(v36);
											WindowContainer v38 = Task.getParent();
											if (v38 == 0) {
												Task v39 = v38.asTask();
												if (v39 == 0) {
													v39.updateTaskDescription();
													Task.dispatchTaskInfoChangedIfNeeded(0);
													WindowManagerThreadPriorityBooster.reset();
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['AppTransition$$ExternalSyntheticLambda2 v6 = new AppTransition$$ExternalSyntheticLambda2();\nInteger v9 = Integer.valueOf(p1);\nPooledPredicate v10 = PooledLambda.obtainPredicate(v6, v8, v9);\nTask v11 = RootWindowContainer.getTask(v10);\nthis.mResizeMode = p2;\nActivityManager$TaskDescription v23 = new ActivityManager$TaskDescription();\nv23.setResizeMode(this.mResizeMode);\nTaskChangeNotificationController v35 = TaskFragment.mAtmService.getTaskChangeNotificationController();\nv35.notifyTaskDescriptionChanged(v36);', 'RootWindowContainer.ensureActivitiesVisible(0, 0, 0, 1);\nboolean v20 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);\nActivityRecord v22 = Task.getRootActivity(1);\nTask$$ExternalSyntheticLambda9 v25 = new Task$$ExternalSyntheticLambda9();\nPooledPredicate v28 = PooledLambda.obtainPredicate(v25, v27, v22, v23);']

The method setTaskResizeable has the following similar APIs:

- API Name: takeTaskSnapshot(I)Landroid/window/TaskSnapshot; with Similarity Score: 0.924690842628479
  - Access Control Level: SYS_OR_SIG and the following code:
AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
Integer v11 = Integer.valueOf(p1);
PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
Task v13 = RootWindowContainer.getTask(v12);
ActivityRecord v27 = p1.getTopMostActivity();
WindowState v33 = v32.findMainWindow();
RenderNode v47 = RenderNode.create("TaskSnapshotController", 0);
Bitmap v55 = ThreadedRenderer.createHardwareBitmap(v47, (v45 * this.mHighResTaskSnapshotScale), (v46 * this.mHighResTaskSnapshotScale));

- API Name: onSplashScreenViewCopyFinished(ILandroid/window/SplashScreenView$SplashScreenViewParcelable;)V with Similarity Score: 0.9245990514755249
  - Access Control Level: SYS_OR_SIG and the following code:
AppTransition$$ExternalSyntheticLambda2 v7 = new AppTransition$$ExternalSyntheticLambda2();
PooledPredicate v11 = PooledLambda.obtainPredicate(v7, v9, v10);
Task v12 = RootWindowContainer.getTask(v11);
if (v12 == 0)
Task v14 = RootWindowContainer.getOrCreateRootTask(0, 0, v12, 0);
SurfaceControl$Transaction v26 = this.mStartingWindow.getPendingTransaction();
this.mStartingWindow.startAnimation(v26, v28, 0, 128);

