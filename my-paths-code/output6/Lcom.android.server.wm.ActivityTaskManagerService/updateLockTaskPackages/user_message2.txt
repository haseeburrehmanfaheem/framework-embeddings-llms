The method updateLockTaskPackages has the following code snippet:

This is path 1 for the API with depth 2:
public void updateLockTaskPackages(int p1, String p2){
	if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
		String v6 = Arrays.toString(p2);
		String v7 = String.valueOf(v6);
		Object v8 = new Object(2);
		Long v9 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v12 = new ProtoLogImpl(v13,1048576,v15);
			File v13 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v15 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v12;
			ProtoLogImpl v11 = this.sServiceInstance;
			boolean v19 = p1.isLogToProto();
			if (v19 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v21 = p1.isLogToLogcat();
				if (v21 == 0) {
					String v22 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v22, BaseProtoLogImpl$LogLevel.WARN, p2, p4, p5);
					LockTaskController v24 = p0.getLockTaskController();
					this.mLockTaskPackages.put(p1, p2);
					int v27 = this.mLockTaskModeTasks.size();
					if ( < 0) {
						LockTaskController$$ExternalSyntheticLambda0 v28 = new LockTaskController$$ExternalSyntheticLambda0();
						ActivityTaskSupervisor.mRootWindowContainer.forAllTasks(v28);
						int v32 = RootWindowContainer.getChildCount();
						if ( < 0) {
							WindowContainer v33 = RootWindowContainer.getChildAt();
							ActivityRecord v34 = v33.topRunningActivity();
							if (v34 == 0) {
								ActivityRecord v31 = v34;
								if (v31 == 0) {
									Task v35 = this.task;
									boolean v36 = this.mLockTaskModeTasks.isEmpty();
									if (v36 == 0) {
										if ( == 0) {
											if (Task.mLockTaskAuth != 2) {
												if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
													String v37 = String.valueOf();
													Object v38 = new Object(1);
													ProtoLogImpl v40 = ProtoLogImpl.getSingleInstance();
													v40.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_LOCKTASK, 1088929964, 0, 0, v38);
													if (Task.mLockTaskAuth != 0) {
														if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
															ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 950074526, 0, 0, 0);
															if ( == 0) {
																boolean v45 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
																boolean v44 = v45;
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void updateLockTaskPackages(int p1, String p2){
	WindowManagerThreadPriorityBooster.boost();
	if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
		String v7 = Arrays.toString(p2);
		String v8 = String.valueOf(v7);
		Object v9 = new Object(2);
		Long v10 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v13 = new ProtoLogImpl(v14,1048576,v16);
			File v14 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v16 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v13;
			ProtoLogImpl v12 = this.sServiceInstance;
			boolean v20 = p1.isLogToProto();
			if (v20 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v22 = p1.isLogToLogcat();
				if (v22 == 0) {
					String v23 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v23, BaseProtoLogImpl$LogLevel.WARN, p2, p4, p5);
					LockTaskController v25 = p0.getLockTaskController();
					this.mLockTaskPackages.put(p1, p2);
					int v28 = this.mLockTaskModeTasks.size();
					if ( < 0) {
						LockTaskController$$ExternalSyntheticLambda0 v29 = new LockTaskController$$ExternalSyntheticLambda0();
						ActivityTaskSupervisor.mRootWindowContainer.forAllTasks(v29);
						int v33 = RootWindowContainer.getChildCount();
						if ( < 0) {
							WindowContainer v34 = RootWindowContainer.getChildAt();
							ActivityRecord v35 = v34.topRunningActivity();
							if (v35 == 0) {
								ActivityRecord v32 = v35;
								if (v32 == 0) {
									Task v36 = this.task;
									boolean v37 = this.mLockTaskModeTasks.isEmpty();
									if (v37 == 0) {
										if ( == 0) {
											if (Task.mLockTaskAuth != 2) {
												if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
													String v38 = String.valueOf();
													Object v39 = new Object(1);
													ProtoLogImpl v41 = ProtoLogImpl.getSingleInstance();
													v41.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_LOCKTASK, 1088929964, 0, 0, v39);
													if (Task.mLockTaskAuth != 0) {
														if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
															ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 950074526, 0, 0, 0);
															if ( == 0) {
																boolean v46 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
																boolean v45 = v46;
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void updateLockTaskPackages(int p1, String p2){
	if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
		String v6 = Arrays.toString(p2);
		String v7 = String.valueOf(v6);
		Object v8 = new Object(2);
		Long v9 = Long.valueOf(p1);
		if (this.sServiceInstance != 0) {
			ProtoLogImpl v12 = new ProtoLogImpl(v13,1048576,v15);
			File v13 = new File("/data/misc/wmtrace/wm_log.winscope");
			ProtoLogViewerConfigReader v15 = new ProtoLogViewerConfigReader();
			this.sServiceInstance = v12;
			ProtoLogImpl v11 = this.sServiceInstance;
			boolean v19 = p1.isLogToProto();
			if (v19 == 0) {
				BaseProtoLogImpl.logToProto(p2, p3, p5);
				boolean v21 = p1.isLogToLogcat();
				if (v21 == 0) {
					String v22 = p1.getTag();
					BaseProtoLogImpl.logToLogcat(v22, BaseProtoLogImpl$LogLevel.WARN, p2, p4, p5);
					LockTaskController v24 = p0.getLockTaskController();
					this.mLockTaskPackages.put(p1, p2);
					int v27 = this.mLockTaskModeTasks.size();
					if ( < 0) {
						LockTaskController$$ExternalSyntheticLambda0 v28 = new LockTaskController$$ExternalSyntheticLambda0();
						ActivityTaskSupervisor.mRootWindowContainer.forAllTasks(v28);
						int v32 = RootWindowContainer.getChildCount();
						if ( < 0) {
							WindowContainer v33 = RootWindowContainer.getChildAt();
							ActivityRecord v34 = v33.topRunningActivity();
							if (v34 == 0) {
								ActivityRecord v31 = v34;
								if (v31 == 0) {
									Task v35 = this.task;
									boolean v36 = this.mLockTaskModeTasks.isEmpty();
									if (v36 == 0) {
										if ( == 0) {
											if (Task.mLockTaskAuth != 2) {
												if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
													String v37 = String.valueOf();
													Object v38 = new Object(1);
													ProtoLogImpl v40 = ProtoLogImpl.getSingleInstance();
													v40.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_LOCKTASK, 1088929964, 0, 0, v38);
													if (Task.mLockTaskAuth != 0) {
														if (ProtoLogCache.WM_DEBUG_LOCKTASK_enabled == 0) {
															ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 950074526, 0, 0, 0);
															if ( == 0) {
																boolean v45 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
																boolean v44 = v45;
																WindowManagerThreadPriorityBooster.reset();
																return;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['this.mLockTaskPackages.put(p1, p2);\nBaseProtoLogImpl.logToProto(p2, p3, p5);\nBaseProtoLogImpl.logToLogcat(v22, BaseProtoLogImpl$LogLevel.WARN, p2, p4, p5);']

The method updateLockTaskPackages has the following similar APIs:

- API Name: moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V with Similarity Score: 0.7725664377212524
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v13 = p1.isLogToProto();
BaseProtoLogImpl.logToProto(p2, p3, p5);
boolean v15 = p1.isLogToLogcat();
String v16 = p1.getTag();
BaseProtoLogImpl.logToLogcat(v16, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);

