The method getTasks has the following code snippet:

This is path 1 for the API with depth 2:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		if (v5 != 0) {
			boolean v3 = ;
			if (v3 == 0) {
				UserManagerService v6 = p0.getUserManager();
				int v7 = UserHandle.getUserId(v1);
				StringBuilder v11 = new StringBuilder();
				StringBuilder v13 = v11.append("getting profiles related to user ");
				StringBuilder v14 = v11.append(p1);
				String v15 = v11.toString();
				long v17 = Binder.clearCallingIdentity();
				IntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);
				[I v19 = v18.toArray();
				Binder.restoreCallingIdentity(v17);
				[I v9 = v19;
				[I v8 = v9;
				ArraySet v21 = new ArraySet();
				if ( >= v8.length) {
					ArrayList v23 = new ArrayList();
					if (v31 != 0) {
						IPackageManager v33 = ActivityThread.getPackageManager();
						IPackageManager v32 = v33;
						boolean v34 = v32.isUidPrivileged(v1);
						if (v34 == 0) {
							if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
								String v35 = String.valueOf("getTasks");
								Object v36 = new Object(2);
								Long v37 = Long.valueOf(v1);
								ProtoLogImpl v39 = ProtoLogImpl.getSingleInstance();
								v39.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v36);
								if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
									String v41 = String.valueOf("getTasks");
									Object v42 = new Object(2);
									Long v43 = Long.valueOf(v1);
									ProtoLogImpl v45 = ProtoLogImpl.getSingleInstance();
									v45.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v42);
									boolean v28 = ;
									if (v28 == 0) {
										if (p4 == -1) {
											int v49 = RootWindowContainer.getChildCount();
											if ( < 0) {
												DisplayContent v48 = 0;
												if (v48 != 0) {
													RunningTasks v50 = this.mRunningTasks;
													RecentTasks v51 = this.mRecentTasks;
													if (p1 > 0) {
														this.mTmpSortedSet.clear();
														this.mCallingUid = p4;
														int v54 = UserHandle.getUserId(p4);
														this.mUserId = v54;
														if ((p3 & 4) != 4) {
															this.mCrossUser = ;
															this.mProfileIds = p5;
															if ((p3 & 2) != 2) {
																this.mAllowed = ;
																if ((p3 & 1) != 1) {
																	this.mFilterOnlyVisibleRecents = ;
																	this.mRecentTasks = v51;
																	if ((p3 & 8) != 8) {
																		this.mKeepIntentExtra = ;
																		RunningTasks$$ExternalSyntheticLambda0 v55 = new RunningTasks$$ExternalSyntheticLambda0();
																		ArgumentPlaceholder v57 = PooledLambda.__(Tas.class);
																		PooledConsumer v58 = PooledLambda.obtainConsumer(v55, RunningTasks, v57);
																		.forAllLeafTasks(v58, 0);
																		v58.recycle();
																		Iterator v61 = this.mTmpSortedSet.iterator();
																		boolean v62 = v61.hasNext();
																		if (v62 == 0) {
																			if ( != 0) {
																				return v23;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		if (v5 != 0) {
			boolean v3 = ;
			if (v3 == 0) {
				UserManagerService v6 = p0.getUserManager();
				int v7 = UserHandle.getUserId(v1);
				StringBuilder v11 = new StringBuilder();
				StringBuilder v13 = v11.append("getting profiles related to user ");
				StringBuilder v14 = v11.append(p1);
				String v15 = v11.toString();
				long v17 = Binder.clearCallingIdentity();
				IntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);
				[I v19 = v18.toArray();
				Binder.restoreCallingIdentity(v17);
				[I v9 = v19;
				[I v8 = v9;
				ArraySet v21 = new ArraySet();
				if ( >= v8.length) {
					ArrayList v23 = new ArrayList();
					if (v31 != 0) {
						IPackageManager v33 = ActivityThread.getPackageManager();
						IPackageManager v32 = v33;
						boolean v34 = v32.isUidPrivileged(v1);
						if (v34 == 0) {
							if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
								String v35 = String.valueOf("getTasks");
								Object v36 = new Object(2);
								Long v37 = Long.valueOf(v1);
								ProtoLogImpl v39 = ProtoLogImpl.getSingleInstance();
								v39.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v36);
								if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
									String v41 = String.valueOf("getTasks");
									Object v42 = new Object(2);
									Long v43 = Long.valueOf(v1);
									ProtoLogImpl v45 = ProtoLogImpl.getSingleInstance();
									v45.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v42);
									boolean v28 = ;
									if (v28 == 0) {
										if (p4 == -1) {
											int v49 = RootWindowContainer.getChildCount();
											if ( < 0) {
												DisplayContent v48 = 0;
												if (v48 != 0) {
													RunningTasks v50 = this.mRunningTasks;
													RecentTasks v51 = this.mRecentTasks;
													if (p1 > 0) {
														this.mTmpSortedSet.clear();
														this.mCallingUid = p4;
														int v54 = UserHandle.getUserId(p4);
														this.mUserId = v54;
														if ((p3 & 4) != 4) {
															this.mCrossUser = ;
															this.mProfileIds = p5;
															if ((p3 & 2) != 2) {
																this.mAllowed = ;
																if ((p3 & 1) != 1) {
																	this.mFilterOnlyVisibleRecents = ;
																	this.mRecentTasks = v51;
																	if ((p3 & 8) != 8) {
																		this.mKeepIntentExtra = ;
																		RunningTasks$$ExternalSyntheticLambda0 v55 = new RunningTasks$$ExternalSyntheticLambda0();
																		ArgumentPlaceholder v57 = PooledLambda.__(Tas.class);
																		PooledConsumer v58 = PooledLambda.obtainConsumer(v55, RunningTasks, v57);
																		.forAllLeafTasks(v58, 0);
																		v58.recycle();
																		Iterator v61 = this.mTmpSortedSet.iterator();
																		boolean v62 = v61.hasNext();
																		if (v62 == 0) {
																			if ( != 0) {
																				return v23;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	if (p3 == 0) {
		if (v5 != 0) {
			boolean v3 = ;
			if (v3 == 0) {
				UserManagerService v6 = p0.getUserManager();
				int v7 = UserHandle.getUserId(v1);
				StringBuilder v11 = new StringBuilder();
				StringBuilder v13 = v11.append("getting profiles related to user ");
				StringBuilder v14 = v11.append(p1);
				String v15 = v11.toString();
				long v17 = Binder.clearCallingIdentity();
				IntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);
				[I v19 = v18.toArray();
				Binder.restoreCallingIdentity(v17);
				[I v9 = v19;
				[I v8 = v9;
				ArraySet v21 = new ArraySet();
				if ( >= v8.length) {
					ArrayList v23 = new ArrayList();
					WindowManagerThreadPriorityBooster.boost();
					if (v32 != 0) {
						IPackageManager v34 = ActivityThread.getPackageManager();
						IPackageManager v33 = v34;
						boolean v35 = v33.isUidPrivileged(v1);
						if (v35 == 0) {
							if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
								String v36 = String.valueOf("getTasks");
								Object v37 = new Object(2);
								Long v38 = Long.valueOf(v1);
								ProtoLogImpl v40 = ProtoLogImpl.getSingleInstance();
								v40.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v37);
								if (ProtoLogCache.WM_DEBUG_TASKS_enabled == 0) {
									String v42 = String.valueOf("getTasks");
									Object v43 = new Object(2);
									Long v44 = Long.valueOf(v1);
									ProtoLogImpl v46 = ProtoLogImpl.getSingleInstance();
									v46.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v43);
									boolean v29 = ;
									if (v29 == 0) {
										if (p4 == -1) {
											int v50 = RootWindowContainer.getChildCount();
											if ( < 0) {
												DisplayContent v49 = 0;
												if (v49 != 0) {
													RunningTasks v51 = this.mRunningTasks;
													RecentTasks v52 = this.mRecentTasks;
													if (p1 > 0) {
														this.mTmpSortedSet.clear();
														this.mCallingUid = p4;
														int v55 = UserHandle.getUserId(p4);
														this.mUserId = v55;
														if ((p3 & 4) != 4) {
															this.mCrossUser = ;
															this.mProfileIds = p5;
															if ((p3 & 2) != 2) {
																this.mAllowed = ;
																if ((p3 & 1) != 1) {
																	this.mFilterOnlyVisibleRecents = ;
																	this.mRecentTasks = v52;
																	if ((p3 & 8) != 8) {
																		this.mKeepIntentExtra = ;
																		RunningTasks$$ExternalSyntheticLambda0 v56 = new RunningTasks$$ExternalSyntheticLambda0();
																		ArgumentPlaceholder v58 = PooledLambda.__(Tas.class);
																		PooledConsumer v59 = PooledLambda.obtainConsumer(v56, RunningTasks, v58);
																		.forAllLeafTasks(v59, 0);
																		v59.recycle();
																		Iterator v62 = this.mTmpSortedSet.iterator();
																		boolean v63 = v62.hasNext();
																		if (v63 == 0) {
																			if ( != 0) {
																				return v23;
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['IntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);\n[I v19 = v18.toArray();\n[I v9 = v19;\n[I v8 = v9;\nArraySet v21 = new ArraySet();', 'RunningTasks$$ExternalSyntheticLambda0 v55 = new RunningTasks$$ExternalSyntheticLambda0();\nArgumentPlaceholder v57 = PooledLambda.__(Tas.class);\nPooledConsumer v58 = PooledLambda.obtainConsumer(v55, RunningTasks, v57);\n.forAllLeafTasks(v58, 0);', 'ArrayList v23 = new ArrayList();\nreturn v23;']

The method getTasks has the following similar APIs:

- API Name: getGlobalSearchActivities()Ljava/util/List; with Similarity Score: 0.9025388956069946
  - Access Control Level: NONE and the following code:
ArrayList v16 = new ArrayList(v17);
return v14;

- API Name: getAvailableTvStreamConfigList(Ljava/lang/String;I)Ljava/util/List; with Similarity Score: 0.8691273331642151
  - Access Control Level: NONE and the following code:
ArrayList v10 = new ArrayList();
List v9 = v10;
return v9;

