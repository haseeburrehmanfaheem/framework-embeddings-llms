The method stopSystemLockTaskMode has the following code snippet:

This is path 1 for the API with depth 2:
public void stopSystemLockTaskMode(){
	int v3 = Binder.getCallingUid();
	long v4 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	if (0 == 0) {
		if (p1 != 0) {
			Object v8 = ActivityRecord$Token.mActivityRef.get();
			if (v8 == 0) {
				Task v9 = v8.getRootTask();
				if (v9 != 0) {
					ActivityRecord v7 = ;
					if (v7 != 0) {
						Task v10 = this.task;
						LockTaskController v11 = this.mLockTaskController;
						if (this.mLockTaskModeState != 0) {
							if (p2 == 0) {
								if ( == 0) {
									if (v3 == Task.mLockTaskUid) {
										if (Task.mLockTaskUid != 0) {
											if (v3 != Task.effectiveUid) {
												LockTaskController.clearLockedTask();
												this.sThreadPriorityBooster.reset();
												Object v16 = this.mContext.getSystemService("telecom");
												if (v16 == 0) {
													ITelecomService v18 = TelecomManager.getTelecomService();
													if (v18 == 0) {
														String v19 = this.mContext.getOpPackageName();
														String v20 = this.mContext.getAttributionTag();
														v18.showInCallScreen(0, v19, v20);
														int v22 = Log.e("TelecomManager", "Error calling ITelecomService#showCallScreen", caughtException);
														Binder.restoreCallingIdentity(v4);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void stopSystemLockTaskMode(){
	int v3 = Binder.getCallingUid();
	long v4 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	if (0 == 0) {
		if (p1 != 0) {
			Object v8 = ActivityRecord$Token.mActivityRef.get();
			if (v8 == 0) {
				Task v9 = v8.getRootTask();
				if (v9 != 0) {
					ActivityRecord v7 = ;
					if (v7 != 0) {
						Task v10 = this.task;
						LockTaskController v11 = this.mLockTaskController;
						if (this.mLockTaskModeState != 0) {
							if (p2 == 0) {
								if ( == 0) {
									if (v3 == Task.mLockTaskUid) {
										if (Task.mLockTaskUid != 0) {
											if (v3 != Task.effectiveUid) {
												LockTaskController.clearLockedTask();
												this.sThreadPriorityBooster.reset();
												Object v16 = this.mContext.getSystemService("telecom");
												if (v16 == 0) {
													ITelecomService v18 = TelecomManager.getTelecomService();
													if (v18 == 0) {
														String v19 = this.mContext.getOpPackageName();
														String v20 = this.mContext.getAttributionTag();
														int v21 = Log.e("TelecomManager", "Error calling ITelecomService#showCallScreen", caughtException);
														Binder.restoreCallingIdentity(v4);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['LockTaskController.clearLockedTask();\nthis.sThreadPriorityBooster.reset();', 'Object v16 = this.mContext.getSystemService("telecom");\nITelecomService v18 = TelecomManager.getTelecomService();\nv18.showInCallScreen(0, v19, v20);']

The method stopSystemLockTaskMode has the following similar APIs:

- API Name: keyguardGoingAway(I)V with Similarity Score: 0.8095900416374207
  - Access Control Level: SYS_OR_SIG and the following code:
long v4 = Binder.clearCallingIdentity();
this.sThreadPriorityBooster.boost();
this.mCache.removeRunningEntry(Task.mTaskId);
this.sThreadPriorityBooster.reset();
Binder.restoreCallingIdentity(v4);

