The method showInputMethodPickerFromClient has the following code snippet:

This is path 1 for the API with depth 2:
public void showInputMethodPickerFromClient(IInputMethodClient p1, int p2){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			int v14 = Binder.getCallingUid();
			if (this.mCurFocusedWindowClient == 0) {
				if (p1 == 0) {
					IBinder v15 = InputMethodManagerService$ClientState.client.asBinder();
					IBinder v16 = p1.asBinder();
					if (v15 != v16) {
						Intent v18 = this.mBindingController.getCurIntent();
						Intent v17 = v18;
						if (v17 == 0) {
							Intent v20 = this.mBindingController.getCurIntent();
							Intent v19 = v20;
							ComponentName v21 = v19.getComponent();
							String v22 = v21.getPackageName();
							boolean v23 = 0;
							if (v23 == 0) {
								boolean v13 = 1;
								if (v13 != 0) {
									int v28 = Binder.getCallingUid();
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void showInputMethodPickerFromClient(IInputMethodClient p1, int p2){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			int v14 = Binder.getCallingUid();
			if (this.mCurFocusedWindowClient == 0) {
				if (p1 == 0) {
					IBinder v15 = InputMethodManagerService$ClientState.client.asBinder();
					IBinder v16 = p1.asBinder();
					if (v15 != v16) {
						Intent v18 = this.mBindingController.getCurIntent();
						Intent v17 = v18;
						if (v17 == 0) {
							Intent v20 = this.mBindingController.getCurIntent();
							Intent v19 = v20;
							ComponentName v21 = v19.getComponent();
							String v22 = v21.getPackageName();
							boolean v23 = 1;
							if (v23 == 0) {
								boolean v13 = 1;
								if (v13 != 0) {
									int v28 = Binder.getCallingUid();
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void showInputMethodPickerFromClient(IInputMethodClient p1, int p2){
	if (v5 != 0) {
		boolean v1 = 1;
		if (v1 != 0) {
			int v7 = Binder.getCallingUid();
			if (this.mCurFocusedWindowClient == 0) {
				if (p1 == 0) {
					IBinder v8 = InputMethodManagerService$ClientState.client.asBinder();
					IBinder v9 = p1.asBinder();
					if (v8 != v9) {
						Intent v11 = this.mBindingController.getCurIntent();
						Intent v10 = v11;
						if (v10 == 0) {
							Intent v13 = this.mBindingController.getCurIntent();
							Intent v12 = v13;
							ComponentName v14 = v12.getComponent();
							String v15 = v14.getPackageName();
							boolean v16 = 0;
							if (v16 == 0) {
								boolean v6 = 1;
								if (v6 != 0) {
									int v21 = Binder.getCallingUid();
									return;
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v14 = Binder.getCallingUid();\nint v28 = Binder.getCallingUid();', 'int v7 = Binder.getCallingUid();\nint v21 = Binder.getCallingUid();', 'int v7 = Binder.getCallingUid();\nint v21 = Binder.getCallingUid();']

The method showInputMethodPickerFromClient has the following similar APIs:

- API Name: startStylusHandwriting(Lcom/android/internal/view/IInputMethodClient;)V with Similarity Score: 0.9289250373840332
  - Access Control Level: SYS_OR_SIG and the following code:
int v8 = Binder.getCallingUid();
Integer v19 = Integer.valueOf(v8);

- API Name: startStylusHandwriting(Lcom/android/internal/view/IInputMethodClient;)V with Similarity Score: 0.9289250373840332
  - Access Control Level: SYS_OR_SIG and the following code:
int v8 = Binder.getCallingUid();
Integer v19 = Integer.valueOf(v8);

