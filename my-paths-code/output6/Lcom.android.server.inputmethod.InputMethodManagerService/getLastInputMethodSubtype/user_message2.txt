The method getLastInputMethodSubtype has the following code snippet:

This is path 1 for the API with depth 2:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
			List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				Object v19 = v17.next();
				boolean v20 = TextUtils.isEmpty(0);
				if (v20 != 0) {
					boolean v21 = Pair.first.equals(0);
					if (v21 == 0) {
						String v22 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
						boolean v23 = TextUtils.isEmpty(v22);
						if (v23 != 0) {
							Pair v24 = new Pair(Pair.first,v22);
							Pair v14 = v24;
							Pair v13 = v14;
							if (v13 == 0) {
								boolean v26 = TextUtils.isEmpty(Pair.first);
								if (v26 != 0) {
									boolean v27 = TextUtils.isEmpty(Pair.second);
									if (v27 == 0) {
										Object v28 = this.mMethodMap.get(Pair.first);
										if (v28 != 0) {
											int v29 = Integer.parseInt(Pair.second);
											if (v28 == 0) {
												int v31 = v28.getSubtypeCount();
												if ( >= v31) {
													InputMethodSubtype v32 = v28.getSubtypeAt();
													int v33 = this.mSubtypeHashCode;
													if (v29 != v33) {
														int v30 = ;
														if (v30 < 0) {
															int v34 = v28.getSubtypeCount();
															return 0;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
			List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				Object v19 = v17.next();
				boolean v20 = TextUtils.isEmpty(0);
				if (v20 != 0) {
					boolean v21 = Pair.first.equals(0);
					if (v21 == 0) {
						String v22 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
						boolean v23 = TextUtils.isEmpty(v22);
						if (v23 != 0) {
							Pair v24 = new Pair(Pair.first,v22);
							Pair v14 = v24;
							Pair v13 = v14;
							if (v13 == 0) {
								boolean v26 = TextUtils.isEmpty(Pair.first);
								if (v26 != 0) {
									boolean v27 = TextUtils.isEmpty(Pair.second);
									if (v27 == 0) {
										Object v28 = this.mMethodMap.get(Pair.first);
										if (v28 != 0) {
											int v29 = Integer.parseInt(Pair.second);
											if (v28 == 0) {
												int v31 = v28.getSubtypeCount();
												if ( >= v31) {
													InputMethodSubtype v32 = v28.getSubtypeAt();
													int v33 = this.mSubtypeHashCode;
													if (v29 != v33) {
														int v30 = ;
														return 0;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public InputMethodSubtype getLastInputMethodSubtype(){
	if (v5 != 0) {
		String v9 = Debug.getCallers(10);
		boolean v1 = 0;
		if (v1 != 0) {
			List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
			List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
			Iterator v17 = v16.iterator();
			boolean v18 = v17.hasNext();
			if (v18 == 0) {
				Object v19 = v17.next();
				boolean v20 = TextUtils.isEmpty(0);
				if (v20 != 0) {
					String v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
					boolean v22 = TextUtils.isEmpty(v21);
					if (v22 != 0) {
						Pair v23 = new Pair(Pair.first,v21);
						Pair v14 = v23;
						Pair v13 = v14;
						if (v13 == 0) {
							boolean v25 = TextUtils.isEmpty(Pair.first);
							if (v25 != 0) {
								boolean v26 = TextUtils.isEmpty(Pair.second);
								if (v26 == 0) {
									Object v27 = this.mMethodMap.get(Pair.first);
									if (v27 != 0) {
										int v28 = Integer.parseInt(Pair.second);
										if (v27 == 0) {
											int v30 = v27.getSubtypeCount();
											if ( >= v30) {
												InputMethodSubtype v31 = v27.getSubtypeAt();
												int v32 = this.mSubtypeHashCode;
												if (v28 != v32) {
													int v29 = ;
													if (v29 < 0) {
														int v33 = v27.getSubtypeCount();
														return 0;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();\nList v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();\nIterator v17 = v16.iterator();\nObject v19 = v17.next();\nString v21 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);\nPair v23 = new Pair(Pair.first,v21);\nObject v27 = this.mMethodMap.get(Pair.first);\nint v28 = Integer.parseInt(Pair.second);\nInputMethodSubtype v31 = v27.getSubtypeAt();']

The method getLastInputMethodSubtype has the following similar APIs:

- API Name: getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List; with Similarity Score: 0.8743069171905518
  - Access Control Level: SYS_OR_SIG and the following code:
List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked();
Resources v17 = this.mContext.getResources();
ArrayList v18 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v17, );
List v19 = InputMethodSubtype.sort(this.mContext, 0, , );
List v14 = v19;
return v14;

- API Name: getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype; with Similarity Score: 0.7989146113395691
  - Access Control Level: SYS_OR_SIG and the following code:
String v15 = this.mBindingController.getSelectedMethodId();
int v17 = InputMethodUtils$InputMethodSettings.getSelectedInputMethodSubtypeHashCode();
Object v18 = this.mMethodMap.get(v14);
int v19 = v18.getSubtypeCount();
List v28 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked(v18);
this.mCurrentSubtype = v35;
return this.mCurrentSubtype;

