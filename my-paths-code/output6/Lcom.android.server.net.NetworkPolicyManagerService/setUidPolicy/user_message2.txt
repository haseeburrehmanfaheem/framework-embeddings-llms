The method setUidPolicy has the following code snippet:

This is path 1 for the API with depth 2:
public void setUidPolicy(int p1, int p2){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		int v4 = this.mUidPolicy.get(p1, 0);
		if (v4 == p2) {
			if (p3 != 0) {
				this.mUidPolicy.delete(p1);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v11 == 0) {
						if (v12 == 0) {
							boolean v10 = ;
							if (v10 != 0) {
								Boolean v13 = Boolean.valueOf();
								Message v14 = this.mHandler.obtainMessage(13, p1, p2, v13);
								v14.sendToTarget();
								if (1 == 0) {
									if (this.LOGV == 0) {
										FileOutputStream v18 = this.mPolicyFile.startWrite();
										TypedXmlSerializer v19 = Xml.resolveSerializer(v18);
										if ( == 0) {
											this.mPolicyFile.failWrite();
											if (this.LOGV != 0) {
												if (p1 != this.mDebugUid) {
													StringBuilder v23 = new StringBuilder();
													StringBuilder v25 = v23.append("Policy for ");
													StringBuilder v26 = v23.append(p1);
													StringBuilder v27 = v23.append(" changed from ");
													String v28 = NetworkPolicyManager.uidPoliciesToString(p2);
													StringBuilder v29 = v23.append(v28);
													StringBuilder v30 = v23.append(" to ");
													String v31 = NetworkPolicyManager.uidPoliciesToString(p3);
													StringBuilder v32 = v23.append(v31);
													String v33 = v23.toString();
													String v22 = v33;
													Object v36 = NetworkPolicyLogger$LogBuffer.getNextSlot();
													if (v36 != 0) {
														v36.reset();
														NetworkPolicyLogger$Data.type = 3;
														NetworkPolicyLogger$Data.ifield1 = p1;
														NetworkPolicyLogger$Data.ifield2 = p2;
														NetworkPolicyLogger$Data.ifield3 = p3;
														long v38 = System.currentTimeMillis();
														NetworkPolicyLogger$Data.timeStamp = v38;
														Binder.restoreCallingIdentity(v3);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public void setUidPolicy(int p1, int p2){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		int v4 = this.mUidPolicy.get(p1, 0);
		if (v4 == p2) {
			if (p3 != 0) {
				this.mUidPolicy.put(p1, p3);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v11 == 0) {
						if (v12 == 0) {
							boolean v10 = ;
							if (v10 != 0) {
								Boolean v13 = Boolean.valueOf();
								Message v14 = this.mHandler.obtainMessage(13, p1, p2, v13);
								v14.sendToTarget();
								if (1 == 0) {
									if (this.LOGV == 0) {
										FileOutputStream v18 = this.mPolicyFile.startWrite();
										TypedXmlSerializer v19 = Xml.resolveSerializer(v18);
										if ( == 0) {
											this.mPolicyFile.failWrite();
											if (this.LOGV != 0) {
												if (p1 != this.mDebugUid) {
													StringBuilder v23 = new StringBuilder();
													StringBuilder v25 = v23.append("Policy for ");
													StringBuilder v26 = v23.append(p1);
													StringBuilder v27 = v23.append(" changed from ");
													String v28 = NetworkPolicyManager.uidPoliciesToString(p2);
													StringBuilder v29 = v23.append(v28);
													StringBuilder v30 = v23.append(" to ");
													String v31 = NetworkPolicyManager.uidPoliciesToString(p3);
													StringBuilder v32 = v23.append(v31);
													String v33 = v23.toString();
													String v22 = v33;
													Object v36 = NetworkPolicyLogger$LogBuffer.getNextSlot();
													if (v36 != 0) {
														v36.reset();
														NetworkPolicyLogger$Data.type = 3;
														NetworkPolicyLogger$Data.ifield1 = p1;
														NetworkPolicyLogger$Data.ifield2 = p2;
														NetworkPolicyLogger$Data.ifield3 = p3;
														long v38 = System.currentTimeMillis();
														NetworkPolicyLogger$Data.timeStamp = v38;
														Binder.restoreCallingIdentity(v3);
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public void setUidPolicy(int p1, int p2){
	if (v2 == 0) {
		long v3 = Binder.clearCallingIdentity();
		int v4 = this.mUidPolicy.get(p1, 0);
		if (v4 == p2) {
			if (p3 != 0) {
				this.mUidPolicy.delete(p1);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v11 == 0) {
						if (v12 == 0) {
							boolean v10 = ;
							if (v10 != 0) {
								Boolean v13 = Boolean.valueOf();
								Message v14 = this.mHandler.obtainMessage(13, p1, p2, v13);
								v14.sendToTarget();
								if (1 == 0) {
									if (this.LOGV == 0) {
										FileOutputStream v18 = this.mPolicyFile.startWrite();
										TypedXmlSerializer v19 = Xml.resolveSerializer(v18);
										if ( == 0) {
											this.mPolicyFile.failWrite();
											if (this.LOGV != 0) {
												StringBuilder v23 = new StringBuilder();
												StringBuilder v25 = v23.append("Policy for ");
												StringBuilder v26 = v23.append(p1);
												StringBuilder v27 = v23.append(" changed from ");
												String v28 = NetworkPolicyManager.uidPoliciesToString(p2);
												StringBuilder v29 = v23.append(v28);
												StringBuilder v30 = v23.append(" to ");
												String v31 = NetworkPolicyManager.uidPoliciesToString(p3);
												StringBuilder v32 = v23.append(v31);
												String v33 = v23.toString();
												String v22 = v33;
												Object v36 = NetworkPolicyLogger$LogBuffer.getNextSlot();
												if (v36 != 0) {
													v36.reset();
													NetworkPolicyLogger$Data.type = 3;
													NetworkPolicyLogger$Data.ifield1 = p1;
													NetworkPolicyLogger$Data.ifield2 = p2;
													NetworkPolicyLogger$Data.ifield3 = p3;
													long v38 = System.currentTimeMillis();
													NetworkPolicyLogger$Data.timeStamp = v38;
													Binder.restoreCallingIdentity(v3);
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v4 = this.mUidPolicy.get(p1, 0);\nthis.mUidPolicy.delete(p1);\nNetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);\nNetworkPolicyManagerService.writePolicyAL();', 'Message v14 = this.mHandler.obtainMessage(13, p1, p2, v13);', 'this.mUidPolicy.put(p1, p3);']

The method setUidPolicy has the following similar APIs:

- API Name: addUidPolicy(II)V with Similarity Score: 0.9423798322677612
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = this.mUidPolicy.get(p1, 0);
if (v3 == (p2 | v3)) {
this.mUidPolicy.delete(p1);
NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);

- API Name: removeUidPolicy(II)V with Similarity Score: 0.9213867783546448
  - Access Control Level: SYS_OR_SIG and the following code:
int v3 = this.mUidPolicy.get(p1, 0);
if (v3 == ((~p2) & v3)) {
this.mUidPolicy.delete(p1);
NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);

