This is path 1 for the API with depth 2:
public void addUidPolicy(int p1, int p2){
	if (v2 == 0) {
		int v3 = this.mUidPolicy.get(p1, 0);
		if (v3 == (p2 | v3)) {
			if (p3 != 0) {
				this.mUidPolicy.delete(p1);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v10 == 0) {
						if (v11 == 0) {
							boolean v9 = ;
							if (v9 != 0) {
								Boolean v12 = Boolean.valueOf();
								Message v13 = this.mHandler.obtainMessage(13, p1, (p2 | v3), v12);
								v13.sendToTarget();
								if (1 == 0) {
									if (this.LOGV == 0) {
										FileOutputStream v17 = this.mPolicyFile.startWrite();
										TypedXmlSerializer v18 = Xml.resolveSerializer(v17);
										if ( == 0) {
											this.mPolicyFile.failWrite();
											if (this.LOGV != 0) {
												if (p1 != this.mDebugUid) {
													StringBuilder v22 = new StringBuilder();
													StringBuilder v24 = v22.append("Policy for ");
													StringBuilder v25 = v22.append(p1);
													StringBuilder v26 = v22.append(" changed from ");
													String v27 = NetworkPolicyManager.uidPoliciesToString(p2);
													StringBuilder v28 = v22.append(v27);
													StringBuilder v29 = v22.append(" to ");
													String v30 = NetworkPolicyManager.uidPoliciesToString(p3);
													StringBuilder v31 = v22.append(v30);
													String v32 = v22.toString();
													String v21 = v32;
													Object v35 = NetworkPolicyLogger$LogBuffer.getNextSlot();
													if (v35 != 0) {
														v35.reset();
														NetworkPolicyLogger$Data.type = 3;
														NetworkPolicyLogger$Data.ifield1 = p1;
														NetworkPolicyLogger$Data.ifield2 = p2;
														NetworkPolicyLogger$Data.ifield3 = p3;
														long v37 = System.currentTimeMillis();
														NetworkPolicyLogger$Data.timeStamp = v37;
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public void addUidPolicy(int p1, int p2){
	if (v2 == 0) {
		int v3 = this.mUidPolicy.get(p1, 0);
		if (v3 == (p2 | v3)) {
			if (p3 != 0) {
				this.mUidPolicy.put(p1, p3);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v10 == 0) {
						if (v11 == 0) {
							boolean v9 = ;
							if (v9 != 0) {
								Boolean v12 = Boolean.valueOf();
								Message v13 = this.mHandler.obtainMessage(13, p1, (p2 | v3), v12);
								v13.sendToTarget();
								if (1 == 0) {
									if (this.LOGV == 0) {
										FileOutputStream v17 = this.mPolicyFile.startWrite();
										TypedXmlSerializer v18 = Xml.resolveSerializer(v17);
										if ( == 0) {
											this.mPolicyFile.failWrite();
											if (this.LOGV != 0) {
												if (p1 != this.mDebugUid) {
													StringBuilder v22 = new StringBuilder();
													StringBuilder v24 = v22.append("Policy for ");
													StringBuilder v25 = v22.append(p1);
													StringBuilder v26 = v22.append(" changed from ");
													String v27 = NetworkPolicyManager.uidPoliciesToString(p2);
													StringBuilder v28 = v22.append(v27);
													StringBuilder v29 = v22.append(" to ");
													String v30 = NetworkPolicyManager.uidPoliciesToString(p3);
													StringBuilder v31 = v22.append(v30);
													String v32 = v22.toString();
													String v21 = v32;
													Object v35 = NetworkPolicyLogger$LogBuffer.getNextSlot();
													if (v35 != 0) {
														v35.reset();
														NetworkPolicyLogger$Data.type = 3;
														NetworkPolicyLogger$Data.ifield1 = p1;
														NetworkPolicyLogger$Data.ifield2 = p2;
														NetworkPolicyLogger$Data.ifield3 = p3;
														long v37 = System.currentTimeMillis();
														NetworkPolicyLogger$Data.timeStamp = v37;
														return;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public void addUidPolicy(int p1, int p2){
	if (v2 == 0) {
		int v3 = this.mUidPolicy.get(p1, 0);
		if (v3 == (p2 | v3)) {
			if (p3 != 0) {
				this.mUidPolicy.delete(p1);
				NetworkPolicyManagerService.updateRulesForDataUsageRestrictionsUL(p1);
				if (0 == 0) {
					NetworkPolicyManagerService.writePolicyAL();
					if (v10 == 0) {
						if (v11 == 0) {
							boolean v9 = ;
							if (v9 != 0) {
								Boolean v12 = Boolean.valueOf();
								Message v13 = this.mHandler.obtainMessage(13, p1, (p2 | v3), v12);
								v13.sendToTarget();
								if (1 == 0) {
									if (this.LOGV == 0) {
										FileOutputStream v17 = this.mPolicyFile.startWrite();
										TypedXmlSerializer v18 = Xml.resolveSerializer(v17);
										if ( == 0) {
											this.mPolicyFile.failWrite();
											if (this.LOGV != 0) {
												StringBuilder v22 = new StringBuilder();
												StringBuilder v24 = v22.append("Policy for ");
												StringBuilder v25 = v22.append(p1);
												StringBuilder v26 = v22.append(" changed from ");
												String v27 = NetworkPolicyManager.uidPoliciesToString(p2);
												StringBuilder v28 = v22.append(v27);
												StringBuilder v29 = v22.append(" to ");
												String v30 = NetworkPolicyManager.uidPoliciesToString(p3);
												StringBuilder v31 = v22.append(v30);
												String v32 = v22.toString();
												String v21 = v32;
												Object v35 = NetworkPolicyLogger$LogBuffer.getNextSlot();
												if (v35 != 0) {
													v35.reset();
													NetworkPolicyLogger$Data.type = 3;
													NetworkPolicyLogger$Data.ifield1 = p1;
													NetworkPolicyLogger$Data.ifield2 = p2;
													NetworkPolicyLogger$Data.ifield3 = p3;
													long v37 = System.currentTimeMillis();
													NetworkPolicyLogger$Data.timeStamp = v37;
													return;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
