This is path 1 for the API with depth 2:
public void startOneTimePermissionSession(String p1, int p2, long p3, long p4, int p5, int p6){
	Object v2 = Objects.requireNonNull(p1);
	long v3 = Binder.clearCallingIdentity();
	PackageManager v6 = this.mContext.getPackageManager();
	int v7 = v6.getPackageUid(p1, 0);
	Object v8 = this.mListeners.get(v7);
	if (v8 == 0) {
		long v10 = Math.min(this.mTimeout, p2);
		this.mTimeout = v10;
		if ((p3 < -1) != 0) {
			long v11 = DeviceConfig.getLong("permissions", "one_time_permissions_killed_delay_millis", 5000);
			long v12 = Math.min(this.mRevokeAfterKilledDelay, );
			this.mRevokeAfterKilledDelay = v12;
			int v13 = Math.min(p4, this.mImportanceToResetTimer);
			this.mImportanceToResetTimer = v13;
			int v14 = Math.min(p5, this.mImportanceToKeepSessionAlive);
			this.mImportanceToKeepSessionAlive = v14;
			String v15 = OneTimePermissionUserManager.-$$Nest$sfgetLOG_TAG();
			StringBuilder v16 = new StringBuilder();
			StringBuilder v18 = v16.append("Updated params for ");
			StringBuilder v19 = v16.append(this.mPackageName);
			StringBuilder v20 = v16.append(". timeout=");
			StringBuilder v21 = v16.append(this.mTimeout);
			StringBuilder v22 = v16.append(" killedDelay=");
			StringBuilder v23 = v16.append(this.mRevokeAfterKilledDelay);
			StringBuilder v24 = v16.append(" importanceToResetTimer=");
			StringBuilder v25 = v16.append(this.mImportanceToResetTimer);
			StringBuilder v26 = v16.append(" importanceToKeepSessionAlive=");
			StringBuilder v27 = v16.append(this.mImportanceToKeepSessionAlive);
			String v28 = v16.toString();
			int v29 = Log.v(v15, v28);
			ActivityManager v30 = OneTimePermissionUserManager.-$$Nest$fgetmActivityManager(this.this$0);
			int v31 = v30.getPackageImportance(this.mPackageName);
			OneTimePermissionUserManager$PackageInactivityListener.onImportanceChanged(this.mUid, v31);
			Binder.restoreCallingIdentity(v3);
			return;
		}
	}
}

This is path 2 for the API with depth 2:
public void startOneTimePermissionSession(String p1, int p2, long p3, long p4, int p5, int p6){
	Object v2 = Objects.requireNonNull(p1);
	long v3 = Binder.clearCallingIdentity();
	PackageManager v6 = this.mContext.getPackageManager();
	int v7 = v6.getPackageUid(p1, 0);
	Object v8 = this.mListeners.get(v7);
	if (v8 == 0) {
		long v10 = Math.min(this.mTimeout, p2);
		this.mTimeout = v10;
		if ((p3 < -1) != 0) {
			long v11 = Math.min(this.mRevokeAfterKilledDelay, );
			this.mRevokeAfterKilledDelay = v11;
			int v12 = Math.min(p4, this.mImportanceToResetTimer);
			this.mImportanceToResetTimer = v12;
			int v13 = Math.min(p5, this.mImportanceToKeepSessionAlive);
			this.mImportanceToKeepSessionAlive = v13;
			String v14 = OneTimePermissionUserManager.-$$Nest$sfgetLOG_TAG();
			StringBuilder v15 = new StringBuilder();
			StringBuilder v17 = v15.append("Updated params for ");
			StringBuilder v18 = v15.append(this.mPackageName);
			StringBuilder v19 = v15.append(". timeout=");
			StringBuilder v20 = v15.append(this.mTimeout);
			StringBuilder v21 = v15.append(" killedDelay=");
			StringBuilder v22 = v15.append(this.mRevokeAfterKilledDelay);
			StringBuilder v23 = v15.append(" importanceToResetTimer=");
			StringBuilder v24 = v15.append(this.mImportanceToResetTimer);
			StringBuilder v25 = v15.append(" importanceToKeepSessionAlive=");
			StringBuilder v26 = v15.append(this.mImportanceToKeepSessionAlive);
			String v27 = v15.toString();
			int v28 = Log.v(v14, v27);
			ActivityManager v29 = OneTimePermissionUserManager.-$$Nest$fgetmActivityManager(this.this$0);
			int v30 = v29.getPackageImportance(this.mPackageName);
			OneTimePermissionUserManager$PackageInactivityListener.onImportanceChanged(this.mUid, v30);
			Binder.restoreCallingIdentity(v3);
			return;
		}
	}
}
