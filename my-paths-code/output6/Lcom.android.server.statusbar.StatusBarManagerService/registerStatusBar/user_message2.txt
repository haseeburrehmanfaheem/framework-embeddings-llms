The method registerStatusBar has the following code snippet:

This is path 1 for the API with depth 2:
public RegisterStatusBarResult registerStatusBar(IStatusBar p1){
	this.mBar = p1;
	IStatusBar v10 = this.mBar;
	IBinder v11 = v10.asBinder();
	StatusBarManagerService$DeathRecipient v12 = this.mDeathRecipient;
	v11.linkToDeath(v12, 0);
	UiThread.ensureThreadLocked();
	Handler v15 = this.sHandler;
	StatusBarManagerService$$ExternalSyntheticLambda4 v17 = new StatusBarManagerService$$ExternalSyntheticLambda4(StatusBarManagerService);
	boolean v19 = v15.post(v17);
	StatusBarManagerService$$ExternalSyntheticLambda5 v20 = new StatusBarManagerService$$ExternalSyntheticLambda5(StatusBarManagerService);
	boolean v22 = this.mHandler.post(v20);
	ArrayMap v23 = new ArrayMap(this.mIcons);
	Object v25 = this.mDisplayUiState.get(0);
	ArraySet v26 = StatusBarManagerService$UiState.-$$Nest$fgetmTransientBarTypes(v25);
	int v27 = v26.size();
	[I v28 = new [I(v27);
	if ( >= v27) {
		RegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v28,v42);
		int v30 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1);
		int v31 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25);
		AppearanceRegion v32 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v25);
		int v33 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v25);
		int v34 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v25);
		boolean v35 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v25);
		int v36 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2);
		IBinder v37 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v25);
		boolean v38 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v25);
		int v39 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v25);
		InsetsVisibilities v40 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v25);
		String v41 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v25);
		LetterboxDetails v42 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v25);
		return v29;
	}
}

and the following sink code:
['this.mBar = p1;\nIStatusBar v10 = this.mBar;\nIBinder v11 = v10.asBinder();\nv11.linkToDeath(v12, 0);\nUiThread.ensureThreadLocked();\nHandler v15 = this.sHandler;\nboolean v19 = v15.post(v17);\nStatusBarManagerService$$ExternalSyntheticLambda5 v20 = new StatusBarManagerService$$ExternalSyntheticLambda5(StatusBarManagerService);\nboolean v22 = this.mHandler.post(v20);\nArrayMap v23 = new ArrayMap(this.mIcons);\nObject v25 = this.mDisplayUiState.get(0);\nint v27 = v26.size();\n[I v28 = new [I(v27);\nint v30 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1);\nint v31 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25);\n...\nRegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v28,v42);\nreturn v29;']

The method registerStatusBar has the following similar APIs:

- API Name: reportPerceptibleAsync(Landroid/os/IBinder;Z)V with Similarity Score: 0.7749293446540833
  - Access Control Level: SYS_OR_SIG and the following code:
int v2 = Binder.getCallingUid();
this.mCurPerceptible = p2;
IBinder v18 = this.mBindingController.getCurToken();
StatusBarManagerService.enforceStatusBar();
StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v29, , p2, v20, v25);
StatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v25,,p2,v20);
Notification$Builder v52 = this.mImeSwitcherNotification.setContentTitle(v37);

- API Name: setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V with Similarity Score: 0.7710690498352051
  - Access Control Level: SYS_OR_SIG and the following code:
StatusBarIcon v3 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5);
Object v5 = this.mIcons.put(p1, v3);
this.mBar.setIcon(p1, v3);

