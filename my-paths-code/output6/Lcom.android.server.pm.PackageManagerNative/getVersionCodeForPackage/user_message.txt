This is path 1 for the API with depth 2:
public long getVersionCodeForPackage(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v16 = new ComputerEngine(v14,v11);
							long v18 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v18, );
								Computer v12 = v16;
								this.sSnapshot.set(v12);
								Computer v21 = v12.use();
								Computer v3 = v21;
								PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);
								if (v22 == 0) {
									long v23 = v22.getLongVersionCode();
									return 0;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 2 for the API with depth 2:
public long getVersionCodeForPackage(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							int v14 = v8.getUsed();
							PackageManagerService$Snapshot v15 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v17 = new ComputerEngine(v15,v11);
							long v19 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v19, );
								Computer v12 = v17;
								this.sSnapshot.set(v12);
								Computer v22 = v12.use();
								Computer v3 = v22;
								PackageInfo v23 = v3.getPackageInfo(p1, 0, v2);
								if (v23 == 0) {
									long v24 = v23.getLongVersionCode();
									return 0;
								}
							}
						}
					}
				}
			}
		}
	}
}

This is path 3 for the API with depth 2:
public long getVersionCodeForPackage(String p1){
	int v1 = Binder.getCallingUid();
	int v2 = UserHandle.getUserId(v1);
	boolean v4 = Thread.holdsLock(this.mLock);
	if (v4 == 0) {
		Object v5 = this.sSnapshot.get();
		int v6 = this.sSnapshotPendingVersion.get();
		if (v5 == 0) {
			int v7 = v5.getVersion();
			if (v7 != v6) {
				Object v8 = this.sSnapshot.get();
				int v9 = this.sSnapshotPendingVersion.get();
				if (v8 == 0) {
					int v10 = v8.getVersion();
					if (v10 != v9) {
						int v11 = this.sSnapshotPendingVersion.get();
						long v13 = SystemClock.currentTimeMicro();
						if (v8 != 0) {
							PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v16 = new ComputerEngine(v14,v11);
							long v18 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v13, v18, );
								Computer v12 = v16;
								this.sSnapshot.set(v12);
								Computer v21 = v12.use();
								Computer v3 = v21;
								PackageInfo v22 = v3.getPackageInfo(p1, 0, v2);
								return 0;
							}
						}
					}
				}
			}
		}
	}
}
