The method isPackageDebuggable has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isPackageDebuggable(String p1){
	int v1 = UserHandle.getCallingUserId();
	boolean v3 = Thread.holdsLock(this.mLock);
	if (v3 == 0) {
		Object v4 = this.sSnapshot.get();
		int v5 = this.sSnapshotPendingVersion.get();
		if (v4 == 0) {
			int v6 = v4.getVersion();
			if (v6 != v5) {
				Object v7 = this.sSnapshot.get();
				int v8 = this.sSnapshotPendingVersion.get();
				if (v7 == 0) {
					int v9 = v7.getVersion();
					if (v9 != v8) {
						int v10 = this.sSnapshotPendingVersion.get();
						long v12 = SystemClock.currentTimeMicro();
						if (v7 != 0) {
							PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v15 = new ComputerEngine(v13,v10);
							long v17 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v12, v17, );
								Computer v11 = v15;
								this.sSnapshot.set(v11);
								Computer v20 = v11.use();
								Computer v2 = v20;
								ApplicationInfo v21 = v2.getApplicationInfo(p1, 0, v1);
								if (v21 == 0) {
									if ((ApplicationInfo.flags & 2) == 0) {
										return ;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 2 for the API with depth 2:
public boolean isPackageDebuggable(String p1){
	int v1 = UserHandle.getCallingUserId();
	boolean v3 = Thread.holdsLock(this.mLock);
	if (v3 == 0) {
		Object v4 = this.sSnapshot.get();
		int v5 = this.sSnapshotPendingVersion.get();
		if (v4 == 0) {
			int v6 = v4.getVersion();
			if (v6 != v5) {
				Object v7 = this.sSnapshot.get();
				int v8 = this.sSnapshotPendingVersion.get();
				if (v7 == 0) {
					int v9 = v7.getVersion();
					if (v9 != v8) {
						int v10 = this.sSnapshotPendingVersion.get();
						long v12 = SystemClock.currentTimeMicro();
						if (v7 != 0) {
							int v13 = v7.getUsed();
							PackageManagerService$Snapshot v14 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v16 = new ComputerEngine(v14,v10);
							long v18 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v12, v18, );
								Computer v11 = v16;
								this.sSnapshot.set(v11);
								Computer v21 = v11.use();
								Computer v2 = v21;
								ApplicationInfo v22 = v2.getApplicationInfo(p1, 0, v1);
								if (v22 == 0) {
									if ((ApplicationInfo.flags & 2) == 0) {
										return ;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
This is path 3 for the API with depth 2:
public boolean isPackageDebuggable(String p1){
	int v1 = UserHandle.getCallingUserId();
	boolean v3 = Thread.holdsLock(this.mLock);
	if (v3 == 0) {
		Object v4 = this.sSnapshot.get();
		int v5 = this.sSnapshotPendingVersion.get();
		if (v4 == 0) {
			int v6 = v4.getVersion();
			if (v6 != v5) {
				Object v7 = this.sSnapshot.get();
				int v8 = this.sSnapshotPendingVersion.get();
				if (v7 == 0) {
					int v9 = v7.getVersion();
					if (v9 != v8) {
						int v10 = this.sSnapshotPendingVersion.get();
						long v12 = SystemClock.currentTimeMicro();
						if (v7 != 0) {
							PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);
							ComputerEngine v15 = new ComputerEngine(v13,v10);
							long v17 = SystemClock.currentTimeMicro();
							if (this.mSnapshotStatistics == 0) {
								this.mSnapshotStatistics.rebuild(v12, v17, );
								Computer v11 = v15;
								this.sSnapshot.set(v11);
								Computer v20 = v11.use();
								Computer v2 = v20;
								ApplicationInfo v21 = v2.getApplicationInfo(p1, 0, v1);
								if (v21 == 0) {
									if ((ApplicationInfo.flags & 2) == 0) {
										return ;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

and the following sink code:
['int v1 = UserHandle.getCallingUserId();\nApplicationInfo v21 = v2.getApplicationInfo(p1, 0, v1);', 'PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);\nComputerEngine v15 = new ComputerEngine(v13,v10);\nthis.sSnapshot.set(v11);\nComputer v20 = v11.use();\nApplicationInfo v21 = v2.getApplicationInfo(p1, 0, v1);']

The method isPackageDebuggable has the following similar APIs:

- API Name: hasSha256SigningCertificate(Ljava/lang/String;[B)Z with Similarity Score: 0.9557085633277893
  - Access Control Level: NONE and the following code:
PackageManagerService$Snapshot v13 = new PackageManagerService$Snapshot(PackageManagerService,2);
ComputerEngine v15 = new ComputerEngine(v13,v9);
this.sSnapshot.set(v10);
Computer v20 = v10.use();
boolean v21 = v20.hasSigningCertificate(p1, p2, 1);

- API Name: hasSha256SigningCertificate(Ljava/lang/String;[B)Z with Similarity Score: 0.9455924034118652
  - Access Control Level: NONE and the following code:
PackageManagerService$Snapshot v12 = new PackageManagerService$Snapshot(PackageManagerService,2);
Computer v14 = new ComputerEngine(v12,v9);
this.sSnapshot.set(v10);
Computer v19 = v10.use();
boolean v20 = v19.hasSigningCertificate(p1, p2, 1);

