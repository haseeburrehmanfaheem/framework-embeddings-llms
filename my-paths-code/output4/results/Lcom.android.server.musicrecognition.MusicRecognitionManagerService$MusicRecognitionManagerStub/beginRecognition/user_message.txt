This is path 1 for the API with depth 2:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	Object v5 = MusicRecognitionManagerService.access$000(this.this$0);
	int v6 = UserHandle.getCallingUserId();
	AbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);
	ServiceNameResolver v9 = AbstractMasterSystemService.mServiceNameResolver;
	String v10 = v9.getDefaultServiceName(v6);
	ServiceNameResolver v11 = AbstractMasterSystemService.mServiceNameResolver;
	String v12 = v11.getServiceName(v6);
	boolean v13 = v10.equals(v12);
	boolean v8 = v13;
	int v15 = UserHandle.getCallingUserId();
	int v16 = Binder.getCallingUid();
	ServiceNameResolver v17 = AbstractMasterSystemService.mServiceNameResolver;
	String v18 = v17.getServiceName(v15);
	ComponentName v19 = ComponentName.unflattenFromString(v18);
	String v20 = v19.getPackageName();
	Context v21 = this.this$0.getContext();
	PackageManager v22 = v21.getPackageManager();
	int v23 = UserHandle.getCallingUserId();
	int v24 = v22.getPackageUidAsUser(v20, v23);
	String v25 = this.TAG;
	boolean v14 = 0;
	IInterface v35 = p2.queryLocalInterface("android.media.musicrecognition.IMusicRecognitionManagerCallback");
	IMusicRecognitionManagerCallback$Stub$Proxy v36 = new IMusicRecognitionManagerCallback$Stub$Proxy(p2);
	IMusicRecognitionManagerCallback v34 = v36;
	String v39 = MusicRecognitionManagerPerUserService.getComponentNameLocked();
	ComponentName v40 = ComponentName.unflattenFromString(v39);
	RemoteMusicRecognitionService v41 = new RemoteMusicRecognitionService(v42,v40,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v43,v45,AbstractMasterSystemService.verbose);
	Context v42 = MusicRecognitionManagerPerUserService.getContext();
	MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback v43 = new MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback(MusicRecognitionManagerPerUserService,v34,0);
	boolean v45 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
	this.mRemoteService = v41;
	Context v47 = MusicRecognitionManagerPerUserService.getContext();
	PackageManager v48 = v47.getPackageManager();
	ComponentName v49 = this.mRemoteService.getComponentName();
	ServiceInfo v50 = v48.getServiceInfo(v49, 128);
	this.mServiceInfo = v50;
	CompletableFuture v51 = this.mRemoteService.getAttributionTag();
	this.mAttributionTagFuture = v51;
	ComponentName v55 = this.mRemoteService.getComponentName();
	RemoteMusicRecognitionService v38 = this.mRemoteService;
	this.mRemoteService = v38;
	ParcelFileDescriptor v61 = ParcelFileDescriptor.createPipe();
	FileDescriptor v62 = v61[0].getFileDescriptor();
	boolean v63 = v62.valid();
	FileDescriptor v64 = v61[1].getFileDescriptor();
	boolean v65 = v64.valid();
	Pair v60 = 0;
	MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v67 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v34,Pair.second);
	CompletableFuture v69 = this.mAttributionTagFuture.thenAcceptAsync(v67, MusicRecognitionManagerService.mExecutorService);
	AudioFormat v70 = this.mAudioFormat;
	RemoteMusicRecognitionService$$ExternalSyntheticLambda0 v72 = new RemoteMusicRecognitionService$$ExternalSyntheticLambda0(RemoteMusicRecognitionService,Pair.first,v70);
	RemoteMusicRecognitionService.scheduleAsyncRequest(v72);
	return;
}

This is path 2 for the API with depth 2:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	Object v5 = MusicRecognitionManagerService.access$000(this.this$0);
	int v6 = UserHandle.getCallingUserId();
	AbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);
	ServiceNameResolver v9 = AbstractMasterSystemService.mServiceNameResolver;
	String v10 = v9.getDefaultServiceName(v6);
	ServiceNameResolver v11 = AbstractMasterSystemService.mServiceNameResolver;
	String v12 = v11.getServiceName(v6);
	boolean v13 = v10.equals(v12);
	boolean v8 = v13;
	String v25 = this.TAG;
	boolean v14 = 0;
	IInterface v37 = p2.queryLocalInterface("android.media.musicrecognition.IMusicRecognitionManagerCallback");
	IMusicRecognitionManagerCallback$Stub$Proxy v38 = new IMusicRecognitionManagerCallback$Stub$Proxy(p2);
	IMusicRecognitionManagerCallback v36 = v38;
	String v41 = MusicRecognitionManagerPerUserService.getComponentNameLocked();
	ComponentName v42 = ComponentName.unflattenFromString(v41);
	RemoteMusicRecognitionService v43 = new RemoteMusicRecognitionService(v44,v42,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v45,v47,AbstractMasterSystemService.verbose);
	Context v44 = MusicRecognitionManagerPerUserService.getContext();
	MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback v45 = new MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback(MusicRecognitionManagerPerUserService,v36,0);
	boolean v47 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
	this.mRemoteService = v43;
	Context v49 = MusicRecognitionManagerPerUserService.getContext();
	PackageManager v50 = v49.getPackageManager();
	ComponentName v51 = this.mRemoteService.getComponentName();
	ServiceInfo v52 = v50.getServiceInfo(v51, 128);
	this.mServiceInfo = v52;
	CompletableFuture v53 = this.mRemoteService.getAttributionTag();
	this.mAttributionTagFuture = v53;
	ComponentName v57 = this.mRemoteService.getComponentName();
	RemoteMusicRecognitionService v40 = this.mRemoteService;
	this.mRemoteService = v40;
	ParcelFileDescriptor v63 = ParcelFileDescriptor.createPipe();
	FileDescriptor v64 = v63[0].getFileDescriptor();
	boolean v65 = v64.valid();
	FileDescriptor v66 = v63[1].getFileDescriptor();
	boolean v67 = v66.valid();
	Pair v62 = 0;
	MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v69 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v36,Pair.second);
	CompletableFuture v71 = this.mAttributionTagFuture.thenAcceptAsync(v69, MusicRecognitionManagerService.mExecutorService);
	AudioFormat v72 = this.mAudioFormat;
	RemoteMusicRecognitionService$$ExternalSyntheticLambda0 v74 = new RemoteMusicRecognitionService$$ExternalSyntheticLambda0(RemoteMusicRecognitionService,Pair.first,v72);
	RemoteMusicRecognitionService.scheduleAsyncRequest(v74);
	return;
}

This is path 3 for the API with depth 2:
public void beginRecognition(RecognitionRequest p1, IBinder p2){
	Object v5 = MusicRecognitionManagerService.access$000(this.this$0);
	int v6 = UserHandle.getCallingUserId();
	AbstractPerUserSystemService v7 = MusicRecognitionManagerService.access$100(this.this$0, v6);
	ServiceNameResolver v9 = AbstractMasterSystemService.mServiceNameResolver;
	String v10 = v9.getDefaultServiceName(v6);
	ServiceNameResolver v11 = AbstractMasterSystemService.mServiceNameResolver;
	String v12 = v11.getServiceName(v6);
	boolean v13 = v10.equals(v12);
	boolean v8 = v13;
	int v15 = UserHandle.getCallingUserId();
	int v16 = Binder.getCallingUid();
	ServiceNameResolver v17 = AbstractMasterSystemService.mServiceNameResolver;
	String v18 = v17.getServiceName(v15);
	ComponentName v19 = ComponentName.unflattenFromString(v18);
	String v20 = v19.getPackageName();
	Context v21 = this.this$0.getContext();
	PackageManager v22 = v21.getPackageManager();
	int v23 = UserHandle.getCallingUserId();
	int v24 = v22.getPackageUidAsUser(v20, v23);
	String v25 = this.TAG;
	boolean v14 = 0;
	IInterface v35 = p2.queryLocalInterface("android.media.musicrecognition.IMusicRecognitionManagerCallback");
	IMusicRecognitionManagerCallback$Stub$Proxy v36 = new IMusicRecognitionManagerCallback$Stub$Proxy(p2);
	IMusicRecognitionManagerCallback v34 = v36;
	String v39 = MusicRecognitionManagerPerUserService.getComponentNameLocked();
	ComponentName v40 = ComponentName.unflattenFromString(v39);
	RemoteMusicRecognitionService v41 = new RemoteMusicRecognitionService(v42,v40,AbstractPerUserSystemService.mUserId,MusicRecognitionManagerPerUserService,v43,v45,AbstractMasterSystemService.verbose);
	Context v42 = MusicRecognitionManagerPerUserService.getContext();
	MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback v43 = new MusicRecognitionManagerPerUserService$MusicRecognitionServiceCallback(MusicRecognitionManagerPerUserService,v34,0);
	boolean v45 = AbstractPerUserSystemService.mMaster.isBindInstantServiceAllowed();
	this.mRemoteService = v41;
	Context v47 = MusicRecognitionManagerPerUserService.getContext();
	PackageManager v48 = v47.getPackageManager();
	ComponentName v49 = this.mRemoteService.getComponentName();
	ServiceInfo v50 = v48.getServiceInfo(v49, 128);
	this.mServiceInfo = v50;
	CompletableFuture v51 = this.mRemoteService.getAttributionTag();
	this.mAttributionTagFuture = v51;
	ComponentName v55 = this.mRemoteService.getComponentName();
	RemoteMusicRecognitionService v38 = this.mRemoteService;
	this.mRemoteService = v38;
	ParcelFileDescriptor v61 = ParcelFileDescriptor.createPipe();
	FileDescriptor v62 = v61[0].getFileDescriptor();
	boolean v63 = v62.valid();
	FileDescriptor v64 = v61[1].getFileDescriptor();
	boolean v65 = v64.valid();
	Pair v66 = Pair.create(v61[0], v61[1]);
	Pair v60 = v66;
	MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0 v67 = new MusicRecognitionManagerPerUserService$$ExternalSyntheticLambda0(MusicRecognitionManagerPerUserService,p1,v34,Pair.second);
	CompletableFuture v69 = this.mAttributionTagFuture.thenAcceptAsync(v67, MusicRecognitionManagerService.mExecutorService);
	AudioFormat v70 = this.mAudioFormat;
	RemoteMusicRecognitionService$$ExternalSyntheticLambda0 v72 = new RemoteMusicRecognitionService$$ExternalSyntheticLambda0(RemoteMusicRecognitionService,Pair.first,v70);
	RemoteMusicRecognitionService.scheduleAsyncRequest(v72);
	return;
}
