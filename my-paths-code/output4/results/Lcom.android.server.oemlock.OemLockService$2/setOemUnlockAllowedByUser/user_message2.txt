The method setOemUnlockAllowedByUser has the following code snippet:

This is path 1 for the API with depth 2:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	int v7 = UserHandle.getCallingUserId();
	long v8 = Binder.clearCallingIdentity();
	UserManager v9 = UserManager.get(this.mContext);
	boolean v10 = v9.isUserAdmin(v7);
	Binder.restoreCallingIdentity(v8);
	long v12 = Binder.clearCallingIdentity();
	UserManager v15 = UserManager.get(this.mContext);
	boolean v16 = v15.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
	boolean v14 = (v16 ^ 1);
	boolean v13 = v14;
	OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v18 = v17.isOemUnlockAllowedByCarrier();
	OemLock v19 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	v19.setOemUnlockAllowedByDevice(p1);
	Object v23 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	v23.forceOemUnlockEnabled(p2);
	Binder.restoreCallingIdentity(v12);
	return;
}
This is path 2 for the API with depth 2:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	int v7 = UserHandle.getCallingUserId();
	long v8 = Binder.clearCallingIdentity();
	UserManager v9 = UserManager.get(this.mContext);
	boolean v10 = v9.isUserAdmin(v7);
	Binder.restoreCallingIdentity(v8);
	long v12 = Binder.clearCallingIdentity();
	UserManager v15 = UserManager.get(this.mContext);
	boolean v16 = v15.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
	boolean v14 = (v16 ^ 1);
	boolean v13 = v14;
	OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v18 = v17.isOemUnlockAllowedByCarrier();
	OemLock v19 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	v19.setOemUnlockAllowedByDevice(p1);
	Object v23 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	Binder.restoreCallingIdentity(v12);
	return;
}
This is path 3 for the API with depth 2:
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	int v7 = UserHandle.getCallingUserId();
	long v8 = Binder.clearCallingIdentity();
	UserManager v9 = UserManager.get(this.mContext);
	boolean v10 = v9.isUserAdmin(v7);
	Binder.restoreCallingIdentity(v8);
	long v12 = Binder.clearCallingIdentity();
	UserManager v15 = UserManager.get(this.mContext);
	boolean v16 = v15.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
	boolean v14 = (v16 ^ 1);
	boolean v13 = v14;
	OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v18 = v17.isOemUnlockAllowedByCarrier();
	OemLock v19 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	v19.setOemUnlockAllowedByDevice(p1);
	Object v23 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	Binder.restoreCallingIdentity(v12);
	return;
}

and the following sink code:
['int v7 = UserHandle.getCallingUserId();\nUserManager v9 = UserManager.get(this.mContext);\nboolean v10 = v9.isUserAdmin(v7);', 'OemLock v17 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);\nboolean v18 = v17.isOemUnlockAllowedByCarrier();', 'OemLock v19 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);\nv19.setOemUnlockAllowedByDevice(p1);', 'Object v23 = LocalServices.getService(PersistentDataBlockManagerInterna.class);\nv23.forceOemUnlockEnabled(p2);']

The method setOemUnlockAllowedByUser has the following similar APIs:

- API Name: isOemUnlockAllowedByCarrier()Z with Similarity Score: 0.9795269966125488
  - Access Control Level: SYS_OR_SIG and the following code:
OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
boolean v6 = v5.isOemUnlockAllowedByCarrier();
return v6;

- API Name: isOemUnlockAllowedByUser()Z with Similarity Score: 0.9338394999504089
  - Access Control Level: SYS_OR_SIG and the following code:
OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
boolean v6 = v5.isOemUnlockAllowedByDevice();
return v6;

