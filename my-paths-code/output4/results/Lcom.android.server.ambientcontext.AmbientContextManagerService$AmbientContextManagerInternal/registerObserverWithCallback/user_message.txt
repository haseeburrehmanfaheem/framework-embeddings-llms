This is path 1 for the API with depth 2:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	this.this$0.assertCalledByPackageOwner(p2);
	ComponentName v13 = AmbientContextManagerPerUserService.updateServiceInfoLocked();
	this.mComponentName = v13;
	IPackageManager v14 = AppGlobals.getPackageManager();
	ServiceInfo v15 = v14.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId);
	boolean v12 = 0;
	Set v21 = p1.getEventTypes();
	boolean v25 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
	AmbientContextManagerPerUserService.ensureRemoteServiceInitiated();
	RemoteCallback v27 = AmbientContextManagerPerUserService.createDetectionResultRemoteCallback();
	AmbientContextManagerPerUserService$$ExternalSyntheticLambda1 v28 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3);
	RemoteCallback v30 = AmbientContextManagerPerUserService.getServerStatusCallback(v28);
	this.mRemoteService.startDetection(p1, p2, v27, v30);
	Set v39 = AmbientContextManagerService.findExistingRequests(AbstractPerUserSystemService.mUserId, p2);
	boolean v40 = this.mExistingClientRequests.removeAll(v39);
	AmbientContextManagerService$ClientRequest v41 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);
	boolean v43 = this.mExistingClientRequests.add(v41);
	return;
}

This is path 2 for the API with depth 2:
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	this.this$0.assertCalledByPackageOwner(p2);
	ComponentName v13 = AmbientContextManagerPerUserService.updateServiceInfoLocked();
	this.mComponentName = v13;
	IPackageManager v14 = AppGlobals.getPackageManager();
	ServiceInfo v15 = v14.getServiceInfo(this.mComponentName, 0, AbstractPerUserSystemService.mUserId);
	boolean v12 = phiInstruction;
	Set v20 = p1.getEventTypes();
	boolean v24 = AmbientContextManagerPerUserService.setUpServiceIfNeeded();
	AmbientContextManagerPerUserService.ensureRemoteServiceInitiated();
	RemoteCallback v26 = AmbientContextManagerPerUserService.createDetectionResultRemoteCallback();
	AmbientContextManagerPerUserService$$ExternalSyntheticLambda1 v27 = new AmbientContextManagerPerUserService$$ExternalSyntheticLambda1(p3);
	RemoteCallback v29 = AmbientContextManagerPerUserService.getServerStatusCallback(v27);
	this.mRemoteService.startDetection(p1, p2, v26, v29);
	Set v38 = AmbientContextManagerService.findExistingRequests(AbstractPerUserSystemService.mUserId, p2);
	boolean v39 = this.mExistingClientRequests.removeAll(v38);
	AmbientContextManagerService$ClientRequest v40 = new AmbientContextManagerService$ClientRequest(AbstractPerUserSystemService.mUserId,p1,p2,p3);
	boolean v42 = this.mExistingClientRequests.add(v40);
	return;
}
