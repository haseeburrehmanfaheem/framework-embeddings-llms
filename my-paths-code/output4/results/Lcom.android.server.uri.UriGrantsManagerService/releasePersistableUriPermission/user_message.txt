This is path 1 for the API with depth 2:
public void releasePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v4 = new GrantUri(p4,p1,0);
	Object v7 = this.mGrantedUriPermissions.get(phiInstruction);
	Object v8 = v7.get(v4);
	UriPermission v6 = v8;
	GrantUri v9 = new GrantUri(p4,p1,128);
	Object v12 = this.mGrantedUriPermissions.get(phiInstruction);
	Object v13 = v12.get(v9);
	UriPermission v11 = v13;
	this.persistedModeFlags = ((~(p2 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v16 = Log.isLoggable("UriPermission", 2);
	boolean v14 = phiInstruction;
	p0.removeUriPermissionIfNeededLocked(v6);
	this.persistedModeFlags = ((~(p2 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v20 = Log.isLoggable("UriPermission", 2);
	boolean v18 = phiInstruction;
	p0.removeUriPermissionIfNeededLocked(v11);
	p0.schedulePersistUriGrants();
	return;
}

This is path 2 for the API with depth 2:
public void releasePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v4 = new GrantUri(p4,p1,0);
	Object v7 = this.mGrantedUriPermissions.get(phiInstruction);
	Object v8 = v7.get(v4);
	UriPermission v6 = v8;
	GrantUri v9 = new GrantUri(p4,p1,128);
	Object v12 = this.mGrantedUriPermissions.get(phiInstruction);
	Object v13 = v12.get(v9);
	UriPermission v11 = v13;
	this.persistedModeFlags = ((~(p2 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v16 = Log.isLoggable("UriPermission", 2);
	boolean v14 = phiInstruction;
	p0.removeUriPermissionIfNeededLocked(v6);
	this.persistedModeFlags = ((~(p2 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v20 = Log.isLoggable("UriPermission", 2);
	boolean v18 = phiInstruction;
	p0.removeUriPermissionIfNeededLocked(v11);
	return;
}

This is path 3 for the API with depth 2:
public void releasePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v4 = new GrantUri(p4,p1,0);
	Object v7 = this.mGrantedUriPermissions.get(phiInstruction);
	UriPermission v6 = 0;
	GrantUri v8 = new GrantUri(p4,p1,128);
	Object v11 = this.mGrantedUriPermissions.get(phiInstruction);
	Object v12 = v11.get(v8);
	UriPermission v10 = v12;
	this.persistedModeFlags = ((~(p2 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v15 = Log.isLoggable("UriPermission", 2);
	boolean v13 = phiInstruction;
	p0.removeUriPermissionIfNeededLocked(v6);
	this.persistedModeFlags = ((~(p2 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v19 = Log.isLoggable("UriPermission", 2);
	boolean v17 = phiInstruction;
	p0.removeUriPermissionIfNeededLocked(v10);
	p0.schedulePersistUriGrants();
	return;
}
