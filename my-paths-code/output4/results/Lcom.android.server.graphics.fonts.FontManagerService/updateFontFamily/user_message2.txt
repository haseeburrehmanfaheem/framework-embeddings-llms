The method updateFontFamily has the following code snippet:

This is path 1 for the API with depth 2:
public int updateFontFamily(List p1, int p2){
	int v6 = this.mConfigVersion;
	Iterator v8 = p2.iterator();
	boolean v9 = v8.hasNext();
	ArrayMap v10 = new ArrayMap(this.mFontFileInfoMap);
	PersistentSystemFontConfig$Config v12 = UpdatableFontDir.readPersistentConfig();
	HashMap v13 = new HashMap();
	int v15 = PersistentSystemFontConfig$Config.fontFamilies.size();
	Iterator v16 = p2.iterator();
	boolean v17 = v16.hasNext();
	Collection v18 = v13.values();
	Iterator v19 = v18.iterator();
	boolean v20 = v19.hasNext();
	Object v21 = this.mCurrentTimeSupplier.get();
	long v22 = v21.longValue();
	this.mLastModifiedMillis = v22;
	PersistentSystemFontConfig$Config v23 = new PersistentSystemFontConfig$Config();
	PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
	Collection v25 = this.mFontFileInfoMap.values();
	Iterator v26 = v25.iterator();
	boolean v27 = v26.hasNext();
	Collection v28 = v13.values();
	boolean v29 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v28);
	UpdatableFontDir.writePersistentConfig(v23);
	this.mConfigVersion = (this.mConfigVersion + 1);
	FontConfig v32 = FontManagerService.getSystemFontConfig();
	SharedMemory v33 = FontManagerService.serializeFontMap(v32);
	SharedMemory v34 = FontManagerService.serializeSystemServerFontMap();
	FontManagerService.setSerializedFontMap(phiInstruction);
	int v37 = caughtException.getErrorCode();
	FontManagerService.closeFileDescriptors(p1);
	return v37;
}
This is path 2 for the API with depth 2:
public int updateFontFamily(List p1, int p2){
	int v6 = this.mConfigVersion;
	Iterator v8 = p2.iterator();
	boolean v9 = v8.hasNext();
	ArrayMap v10 = new ArrayMap(this.mFontFileInfoMap);
	PersistentSystemFontConfig$Config v12 = UpdatableFontDir.readPersistentConfig();
	HashMap v13 = new HashMap();
	int v15 = PersistentSystemFontConfig$Config.fontFamilies.size();
	Iterator v16 = p2.iterator();
	boolean v17 = v16.hasNext();
	Collection v18 = v13.values();
	Iterator v19 = v18.iterator();
	boolean v20 = v19.hasNext();
	Object v21 = this.mCurrentTimeSupplier.get();
	long v22 = v21.longValue();
	this.mLastModifiedMillis = v22;
	PersistentSystemFontConfig$Config v23 = new PersistentSystemFontConfig$Config();
	PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
	Collection v25 = this.mFontFileInfoMap.values();
	Iterator v26 = v25.iterator();
	boolean v27 = v26.hasNext();
	Collection v28 = v13.values();
	boolean v29 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v28);
	UpdatableFontDir.writePersistentConfig(v23);
	this.mConfigVersion = (this.mConfigVersion + 1);
	FontConfig v32 = FontManagerService.getSystemFontConfig();
	SharedMemory v33 = FontManagerService.serializeFontMap(v32);
	FontManagerService.setSerializedFontMap(phiInstruction);
	int v36 = caughtException.getErrorCode();
	FontManagerService.closeFileDescriptors(p1);
	return v36;
}
This is path 3 for the API with depth 2:
public int updateFontFamily(List p1, int p2){
	int v6 = this.mConfigVersion;
	Iterator v8 = p2.iterator();
	boolean v9 = v8.hasNext();
	ArrayMap v10 = new ArrayMap(this.mFontFileInfoMap);
	PersistentSystemFontConfig$Config v12 = UpdatableFontDir.readPersistentConfig();
	HashMap v13 = new HashMap();
	int v15 = PersistentSystemFontConfig$Config.fontFamilies.size();
	Iterator v16 = p2.iterator();
	boolean v17 = v16.hasNext();
	Collection v18 = v13.values();
	Iterator v19 = v18.iterator();
	boolean v20 = v19.hasNext();
	Object v21 = this.mCurrentTimeSupplier.get();
	long v22 = v21.longValue();
	this.mLastModifiedMillis = v22;
	PersistentSystemFontConfig$Config v23 = new PersistentSystemFontConfig$Config();
	PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
	Collection v25 = this.mFontFileInfoMap.values();
	Iterator v26 = v25.iterator();
	boolean v27 = v26.hasNext();
	Collection v28 = v13.values();
	boolean v29 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v28);
	UpdatableFontDir.writePersistentConfig(v23);
	this.mConfigVersion = (this.mConfigVersion + 1);
	FontConfig v32 = FontManagerService.getSystemFontConfig();
	SharedMemory v33 = FontManagerService.serializeFontMap(v32);
	SharedMemory v34 = FontManagerService.serializeSystemServerFontMap();
	FontManagerService.setSerializedFontMap(phiInstruction);
	FontManagerService.closeFileDescriptors(p1);
	return 0;
}

and the following sink code:
['int v6 = this.mConfigVersion;\nthis.mLastModifiedMillis = v22;\nthis.mConfigVersion = (this.mConfigVersion + 1);', 'ArrayMap v10 = new ArrayMap(this.mFontFileInfoMap);\nPersistentSystemFontConfig$Config v23 = new PersistentSystemFontConfig$Config();', 'UpdatableFontDir.readPersistentConfig();\nUpdatableFontDir.writePersistentConfig(v23);\nFontManagerService.getSystemFontConfig();\nFontManagerService.serializeFontMap(v32);\nFontManagerService.serializeSystemServerFontMap();\nFontManagerService.setSerializedFontMap(phiInstruction);']

The method updateFontFamily has the following similar APIs:

- API Name: getFontConfig()Landroid/text/FontConfig; with Similarity Score: 0.7501207590103149
  - Access Control Level: SYS_OR_SIG and the following code:
Map v5 = UpdatableFontDir.getPostScriptMap();
Object v6 = this.mConfigSupplier.apply(v5);
List v9 = v6.getFontFamilies();
List v17 = v6.getAliases();
FontConfig v16 = new FontConfig(v8,v17,this.mLastModifiedMillis,this.mConfigVersion);
return v3;

- API Name: getFontConfig()Landroid/text/FontConfig; with Similarity Score: 0.7211689949035645
  - Access Control Level: SYS_OR_SIG and the following code:
FontConfig v5 = SystemFonts.getSystemFontConfigInternal("/system/etc/fonts.xml", "/system/fonts/", "/product/etc/fonts_customization.xml", "/product/fonts/", 0, 0, 0);
FontConfig v4 = v5;
FontConfig v3 = v4;
return v3;

