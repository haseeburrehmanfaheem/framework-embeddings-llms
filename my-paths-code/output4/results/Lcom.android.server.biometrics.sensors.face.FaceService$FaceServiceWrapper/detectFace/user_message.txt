This is path 1 for the API with depth 2:
public long detectFace(IBinder p1, int p2, IFaceServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	boolean v5 = phiInstruction;
	Resources v7 = v3.getResources();
	String v8 = v7.getString(17039993);
	ComponentName v9 = ComponentName.unflattenFromString(v8);
	String v10 = v9.getPackageName();
	boolean v11 = phiInstruction.equals(p4);
	boolean v4 = phiInstruction;
	LockPatternUtils v12 = FaceService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	int v14 = v12.getStrongAuthForUser(p2);
	boolean v15 = phiInstruction;
	boolean v16 = phiInstruction;
	boolean v17 = phiInstruction;
	boolean v13 = phiInstruction;
	List v28 = FaceService.getSensorProperties();
	int v29 = v28.size();
	Object v30 = v28.get(0);
	Iterator v31 = this.mServiceProviders.iterator();
	boolean v32 = v31.hasNext();
	Object v33 = v31.next();
	boolean v34 = v33.containsSensor(FaceSensorPropertiesInternal.sensorId);
	Pair v35 = new Pair(v36,v33);
	Integer v36 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
	Pair v27 = v35;
	Pair v26 = v27;
	int v38 = Pair.first.intValue();
	ClientMonitorCallbackConverter v39 = new ClientMonitorCallbackConverter(p3);
	long v41 = Pair.second.scheduleFaceDetect(v38, p1, p2, v39, p4, 1);
	return v41;
}

This is path 2 for the API with depth 2:
public long detectFace(IBinder p1, int p2, IFaceServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	boolean v5 = phiInstruction;
	Resources v7 = v3.getResources();
	String v8 = v7.getString(17039993);
	ComponentName v9 = ComponentName.unflattenFromString(v8);
	String v10 = v9.getPackageName();
	boolean v11 = phiInstruction.equals(p4);
	boolean v4 = phiInstruction;
	LockPatternUtils v12 = FaceService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	int v14 = v12.getStrongAuthForUser(p2);
	boolean v15 = phiInstruction;
	boolean v16 = phiInstruction;
	boolean v17 = phiInstruction;
	boolean v13 = phiInstruction;
	List v28 = FaceService.getSensorProperties();
	int v29 = v28.size();
	Object v30 = v28.get(0);
	Iterator v31 = this.mServiceProviders.iterator();
	boolean v32 = v31.hasNext();
	Object v33 = v31.next();
	boolean v34 = v33.containsSensor(FaceSensorPropertiesInternal.sensorId);
	Pair v35 = new Pair(v36,v33);
	Integer v36 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
	Pair v27 = v35;
	Pair v26 = v27;
	int v38 = Pair.first.intValue();
	ClientMonitorCallbackConverter v39 = new ClientMonitorCallbackConverter(p3);
	long v41 = Pair.second.scheduleFaceDetect(v38, p1, p2, v39, p4, 1);
	return v41;
}

This is path 3 for the API with depth 2:
public long detectFace(IBinder p1, int p2, IFaceServiceReceiver p3, String p4){
	Context v3 = this.this$0.getContext();
	boolean v5 = phiInstruction;
	Resources v7 = v3.getResources();
	String v8 = v7.getString(17039993);
	ComponentName v9 = ComponentName.unflattenFromString(v8);
	String v10 = v9.getPackageName();
	boolean v11 = phiInstruction.equals(p4);
	boolean v4 = phiInstruction;
	LockPatternUtils v12 = FaceService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	int v14 = v12.getStrongAuthForUser(p2);
	boolean v15 = phiInstruction;
	boolean v16 = phiInstruction;
	boolean v17 = phiInstruction;
	boolean v13 = phiInstruction;
	List v28 = FaceService.getSensorProperties();
	int v29 = v28.size();
	Object v30 = v28.get(0);
	Iterator v31 = this.mServiceProviders.iterator();
	boolean v32 = v31.hasNext();
	Object v33 = v31.next();
	boolean v34 = v33.containsSensor(FaceSensorPropertiesInternal.sensorId);
	Pair v35 = new Pair(v36,v33);
	Integer v36 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);
	Pair v27 = v35;
	Pair v26 = v27;
	int v38 = Pair.first.intValue();
	ClientMonitorCallbackConverter v39 = new ClientMonitorCallbackConverter(p3);
	long v41 = Pair.second.scheduleFaceDetect(v38, p1, p2, v39, p4, 1);
	return v41;
}
