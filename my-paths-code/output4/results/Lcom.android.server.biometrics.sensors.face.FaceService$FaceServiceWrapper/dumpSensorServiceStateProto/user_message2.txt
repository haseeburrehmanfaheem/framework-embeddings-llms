The method dumpSensorServiceStateProto has the following code snippet:

This is path 1 for the API with depth 2:
public byte[] dumpSensorServiceStateProto(int p1, boolean p2){
	ProtoOutputStream v3 = new ProtoOutputStream();
	Iterator v7 = this.mServiceProviders.iterator();
	boolean v8 = v7.hasNext();
	Object v9 = v7.next();
	boolean v10 = v9.containsSensor(p2);
	ServiceProvider v6 = v9;
	ServiceProvider v5 = v6;
	v5.dumpProtoState(p1, v3, p2);
	v3.flush();
	byte[] v13 = v3.getBytes();
	return v13;
}
This is path 2 for the API with depth 2:
public byte[] dumpSensorServiceStateProto(int p1, boolean p2){
	ProtoOutputStream v3 = new ProtoOutputStream();
	Iterator v7 = this.mServiceProviders.iterator();
	boolean v8 = v7.hasNext();
	Object v9 = v7.next();
	boolean v10 = v9.containsSensor(p2);
	ServiceProvider v6 = v9;
	ServiceProvider v5 = v6;
	v3.flush();
	byte[] v12 = v3.getBytes();
	return v12;
}
This is path 3 for the API with depth 2:
public byte[] dumpSensorServiceStateProto(int p1, boolean p2){
	ProtoOutputStream v3 = new ProtoOutputStream();
	Iterator v7 = this.mServiceProviders.iterator();
	boolean v8 = v7.hasNext();
	ServiceProvider v6 = 0;
	ServiceProvider v5 = v6;
	v5.dumpProtoState(p1, v3, p2);
	v3.flush();
	byte[] v11 = v3.getBytes();
	return v11;
}

and the following sink code:
['ProtoOutputStream v3 = new ProtoOutputStream();\nIterator v7 = this.mServiceProviders.iterator();\nObject v9 = v7.next();\nServiceProvider v6 = v9;\nServiceProvider v5 = v6;\nv5.dumpProtoState(p1, v3, p2);\nv3.flush();\nbyte[] v13 = v3.getBytes();\nreturn v13;', 'ProtoOutputStream v3 = new ProtoOutputStream();\nServiceProvider v6 = 0;\nServiceProvider v5 = v6;\nv5.dumpProtoState(p1, v3, p2);\nv3.flush();\nbyte[] v11 = v3.getBytes();\nreturn v11;']

The method dumpSensorServiceStateProto has the following similar APIs:

- API Name: startProtoDump([BILjava/lang/String;)V with Similarity Score: 0.7346878051757812
  - Access Control Level: NONE and the following code:
ProtoOutputStream v8 = new ProtoOutputStream();
v8.write(1125281431553, SystemClock.elapsedRealtimeNanos());
v8.write(1138166333442, p3);
v8.write(1146756268035, p1);
v8.end(v10);
v1.addToBuffer(v8, p2);

