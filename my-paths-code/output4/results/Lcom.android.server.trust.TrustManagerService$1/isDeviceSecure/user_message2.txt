The method isDeviceSecure has the following code snippet:

This is path 1 for the API with depth 2:
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	VirtualDeviceManagerInternal v4 = this.mVirtualDeviceManager;
	Object v6 = this.sLocalServiceObjects.get(VirtualDeviceManagerInterna.class);
	Object v5 = v6;
	this.mVirtualDeviceManager = v5;
	VirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;
	VirtualDeviceManagerInternal v9 = this.mVirtualDeviceManager;
	boolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);
	boolean v2 = 1;
	int v11 = ITrustManager$Stub.getCallingPid();
	int v12 = ActivityManager.handleIncomingUser(v11, v1, p1, 0, 1, "isDeviceSecure", 0);
	long v13 = Binder.clearCallingIdentity();
	LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v15 = v14.isSeparateProfileChallengeEnabled(v12);
	long v18 = Binder.clearCallingIdentity();
	UserInfo v19 = this.mUserManager.getProfileParent(p2);
	UserHandle v20 = v19.getUserHandle();
	int v21 = v20.getIdentifier();
	Binder.restoreCallingIdentity(v18);
	int v17 = v21;
	int v16 = v17;
	LockPatternUtils v23 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v24 = v23.isSecure(phiInstruction);
	Binder.restoreCallingIdentity(v13);
	return v24;
}
This is path 2 for the API with depth 2:
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	VirtualDeviceManagerInternal v4 = this.mVirtualDeviceManager;
	Object v6 = this.sLocalServiceObjects.get(VirtualDeviceManagerInterna.class);
	Object v5 = v6;
	this.mVirtualDeviceManager = v5;
	VirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;
	VirtualDeviceManagerInternal v9 = this.mVirtualDeviceManager;
	boolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);
	boolean v2 = 0;
	int v11 = ITrustManager$Stub.getCallingPid();
	int v12 = ActivityManager.handleIncomingUser(v11, v1, p1, 0, 1, "isDeviceSecure", 0);
	long v13 = Binder.clearCallingIdentity();
	LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v15 = v14.isSeparateProfileChallengeEnabled(v12);
	long v18 = Binder.clearCallingIdentity();
	UserInfo v19 = this.mUserManager.getProfileParent(p2);
	UserHandle v20 = v19.getUserHandle();
	int v21 = v20.getIdentifier();
	Binder.restoreCallingIdentity(v18);
	int v17 = v21;
	int v16 = v17;
	LockPatternUtils v23 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v24 = v23.isSecure(phiInstruction);
	Binder.restoreCallingIdentity(v13);
	return v24;
}
This is path 3 for the API with depth 2:
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	VirtualDeviceManagerInternal v4 = this.mVirtualDeviceManager;
	Object v6 = this.sLocalServiceObjects.get(VirtualDeviceManagerInterna.class);
	Object v5 = v6;
	this.mVirtualDeviceManager = v5;
	VirtualDeviceManagerInternal v8 = this.mVirtualDeviceManager;
	VirtualDeviceManagerInternal v9 = this.mVirtualDeviceManager;
	boolean v10 = v9.isDisplayOwnedByAnyVirtualDevice(p2);
	boolean v2 = 1;
	int v11 = ITrustManager$Stub.getCallingPid();
	int v12 = ActivityManager.handleIncomingUser(v11, v1, p1, 0, 1, "isDeviceSecure", 0);
	long v13 = Binder.clearCallingIdentity();
	LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v15 = v14.isSeparateProfileChallengeEnabled(v12);
	long v18 = Binder.clearCallingIdentity();
	UserInfo v19 = this.mUserManager.getProfileParent(p2);
	Binder.restoreCallingIdentity(v18);
	int v17 = p2;
	int v16 = v17;
	LockPatternUtils v21 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v22 = v21.isSecure(phiInstruction);
	Binder.restoreCallingIdentity(v13);
	return v22;
}

and the following sink code:
['LockPatternUtils v14 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);\nboolean v15 = v14.isSeparateProfileChallengeEnabled(v12);\nUserInfo v19 = this.mUserManager.getProfileParent(p2);\nLockPatternUtils v23 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);\nboolean v24 = v23.isSecure(phiInstruction);\nreturn v24;']

The method isDeviceSecure has the following similar APIs:

- API Name: detectFace(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)J with Similarity Score: 0.7771947979927063
  - Access Control Level: SYS_OR_SIG and the following code:
LockPatternUtils v12 = FaceService.-$$Nest$fgetmLockPatternUtils(this.this$0);
int v14 = v12.getStrongAuthForUser(p2);

