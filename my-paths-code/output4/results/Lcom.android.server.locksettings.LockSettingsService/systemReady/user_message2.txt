The method systemReady has the following code snippet:

This is path 1 for the API with depth 2:
public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature("android.software.secure_lock_screen");
	this.mHasSecureLockScreen = v9;
	p0.migrateOldData();
	IBinder v12 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v13 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v12.linkToDeath(v13, 0);
	IInterface v18 = v12.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v19 = new IGateKeeperService$Stub$Proxy(v12);
	IGateKeeperService v17 = v19;
	this.mGateKeeperService = v17;
	IGateKeeperService v11 = v17;
	this.mWeaverConfig = 0;
	IWeaver v23 = IWeaver.getService(1);
	IWeaver v22 = 0;
	this.mWeaver = v22;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v25 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
	v22.getConfig(v25);
	Map v29 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
	HashSet v30 = new HashSet();
	Set v32 = v29.entrySet();
	Iterator v33 = v32.iterator();
	boolean v34 = v33.hasNext();
	Set v28 = v30;
	HashSet v36 = new HashSet();
	Set v38 = this.mSlotMap.entrySet();
	Iterator v39 = v38.iterator();
	boolean v40 = v39.hasNext();
	Iterator v41 = v36.iterator();
	boolean v42 = v41.hasNext();
	Iterator v43 = v28.iterator();
	boolean v44 = v43.hasNext();
	PasswordSlotManager.saveSlotMap();
	p0.getAuthSecretHal();
	Context v48 = this.mContext;
	boolean v49 = LockPatternUtils.frpCredentialEnabled(v48);
	Context v51 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v52 = v51.getContentResolver();
	int v53 = Settings$Global.getInt(v52, "device_provisioned", 0);
	boolean v50 = phiInstruction;
	IGateKeeperService v56 = this.this$0.getGateKeeperService();
	v56.reportDeviceSetupComplete();
	boolean v61 = LockSettingsStorage$Cache.contains(2, "", p1);
	boolean v60 = v61;
	LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
	int v65 = this.mCache.getVersion();
	int v64 = v65;
	SQLiteDatabase v66 = this.mOpenHelper.getReadableDatabase();
	String v67 = new String(1);
	String v68 = Integer.toString(0);
	Cursor v69 = v66.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v67, 0, 0, 0);
	boolean v70 = v69.moveToNext();
	v69.close();
	LockSettingsStorage$CredentialHash v73 = LockSettingsStorage.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v74 = LockSettingsStorage.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v75 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v72 = v75;
	FingerprintManager v76 = this.mInjector.getFingerprintManager();
	FaceManager v77 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v76, v77);
	return;
}
This is path 2 for the API with depth 2:
public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature("android.software.secure_lock_screen");
	this.mHasSecureLockScreen = v9;
	p0.migrateOldData();
	IBinder v12 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v13 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v12.linkToDeath(v13, 0);
	IInterface v18 = v12.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService v17 = v18;
	this.mGateKeeperService = v17;
	IGateKeeperService v11 = v17;
	this.mWeaverConfig = 0;
	IWeaver v21 = IWeaver.getService(1);
	IWeaver v20 = 0;
	this.mWeaver = v20;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v23 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
	v20.getConfig(v23);
	Map v27 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
	HashSet v28 = new HashSet();
	Set v30 = v27.entrySet();
	Iterator v31 = v30.iterator();
	boolean v32 = v31.hasNext();
	Set v26 = v28;
	HashSet v34 = new HashSet();
	Set v36 = this.mSlotMap.entrySet();
	Iterator v37 = v36.iterator();
	boolean v38 = v37.hasNext();
	Iterator v39 = v34.iterator();
	boolean v40 = v39.hasNext();
	Iterator v41 = v26.iterator();
	boolean v42 = v41.hasNext();
	PasswordSlotManager.saveSlotMap();
	p0.getAuthSecretHal();
	Context v46 = this.mContext;
	boolean v47 = LockPatternUtils.frpCredentialEnabled(v46);
	Context v49 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v50 = v49.getContentResolver();
	int v51 = Settings$Global.getInt(v50, "device_provisioned", 0);
	boolean v48 = phiInstruction;
	IGateKeeperService v54 = this.this$0.getGateKeeperService();
	v54.reportDeviceSetupComplete();
	boolean v59 = LockSettingsStorage$Cache.contains(2, "", p1);
	boolean v58 = v59;
	LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
	int v63 = this.mCache.getVersion();
	int v62 = v63;
	SQLiteDatabase v64 = this.mOpenHelper.getReadableDatabase();
	String v65 = new String(1);
	String v66 = Integer.toString(0);
	Cursor v67 = v64.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v65, 0, 0, 0);
	boolean v68 = v67.moveToNext();
	v67.close();
	LockSettingsStorage$CredentialHash v71 = LockSettingsStorage.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v72 = LockSettingsStorage.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v73 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v70 = v73;
	FingerprintManager v74 = this.mInjector.getFingerprintManager();
	FaceManager v75 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v74, v75);
	return;
}
This is path 3 for the API with depth 2:
public void systemReady(){
	Object v2 = new Object(3);
	int v3 = ILockSettings$Stub.getCallingUid();
	Integer v4 = Integer.valueOf(v3);
	int v5 = EventLog.writeEvent(1397638484, v2);
	PackageManager v8 = this.mContext.getPackageManager();
	boolean v9 = v8.hasSystemFeature("android.software.secure_lock_screen");
	this.mHasSecureLockScreen = v9;
	p0.migrateOldData();
	IBinder v12 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v13 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v12.linkToDeath(v13, 0);
	IInterface v18 = v12.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v19 = new IGateKeeperService$Stub$Proxy(v12);
	IGateKeeperService v17 = v19;
	this.mGateKeeperService = v17;
	IGateKeeperService v11 = v17;
	this.mWeaverConfig = 0;
	IWeaver v23 = IWeaver.getService(1);
	IWeaver v22 = v23;
	this.mWeaver = v22;
	SyntheticPasswordManager$$ExternalSyntheticLambda0 v24 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);
	v22.getConfig(v24);
	Map v28 = this.mStorage.listSyntheticPasswordHandlesForAllUsers("weaver");
	HashSet v29 = new HashSet();
	Set v31 = v28.entrySet();
	Iterator v32 = v31.iterator();
	boolean v33 = v32.hasNext();
	Set v27 = v29;
	HashSet v35 = new HashSet();
	Set v37 = this.mSlotMap.entrySet();
	Iterator v38 = v37.iterator();
	boolean v39 = v38.hasNext();
	Iterator v40 = v35.iterator();
	boolean v41 = v40.hasNext();
	Iterator v42 = v27.iterator();
	boolean v43 = v42.hasNext();
	PasswordSlotManager.saveSlotMap();
	p0.getAuthSecretHal();
	Context v47 = this.mContext;
	boolean v48 = LockPatternUtils.frpCredentialEnabled(v47);
	Context v50 = LockSettingsService.-$$Nest$fgetmContext(this.this$0);
	ContentResolver v51 = v50.getContentResolver();
	int v52 = Settings$Global.getInt(v51, "device_provisioned", 0);
	boolean v49 = phiInstruction;
	IGateKeeperService v55 = this.this$0.getGateKeeperService();
	v55.reportDeviceSetupComplete();
	boolean v60 = LockSettingsStorage$Cache.contains(2, "", p1);
	boolean v59 = v60;
	LockSettingsStorage$Cache.put(2, "isFetched", "true", p1);
	int v64 = this.mCache.getVersion();
	int v63 = v64;
	SQLiteDatabase v65 = this.mOpenHelper.getReadableDatabase();
	String v66 = new String(1);
	String v67 = Integer.toString(0);
	Cursor v68 = v65.query("locksettings", this.COLUMNS_FOR_PREFETCH, "user=?", v66, 0, 0, 0);
	boolean v69 = v68.moveToNext();
	v68.close();
	LockSettingsStorage$CredentialHash v72 = LockSettingsStorage.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v73 = LockSettingsStorage.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v74 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v71 = v74;
	FingerprintManager v75 = this.mInjector.getFingerprintManager();
	FaceManager v76 = this.mInjector.getFaceManager();
	this.mBiometricDeferredQueue.systemReady(v75, v76);
	return;
}

and the following sink code:
['LockSettingsStorage$CredentialHash v73 = LockSettingsStorage.readPasswordHashIfExists(p1);\nLockSettingsStorage$CredentialHash v74 = LockSettingsStorage.readPatternHashIfExists(p1);', 'IGateKeeperService v17 = v19;\nthis.mGateKeeperService = v17;', 'IWeaver v22 = 0;\nthis.mWeaver = v22;\nSyntheticPasswordManager$$ExternalSyntheticLambda0 v25 = new SyntheticPasswordManager$$ExternalSyntheticLambda0(SyntheticPasswordManager);']

The method systemReady has the following similar APIs:

- API Name: isWeakEscrowTokenValid(J[BI)Z with Similarity Score: 0.9885582327842712
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v19 = v21;
this.mGateKeeperService = v19;

- API Name: tryUnlockWithCachedUnifiedChallenge(I)Z with Similarity Score: 0.9574752449989319
  - Access Control Level: SYS_OR_SIG and the following code:
LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);
LockSettingsStorage$CredentialHash v45 = LockSettingsStorage.readPatternHashIfExists(p2);
LockSettingsStorage$CredentialHash v43 = v46;

