The method addWeakEscrowToken has the following code snippet:

This is path 1 for the API with depth 2:
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	Object v5 = Objects.requireNonNull(p3, "Listener can not be null.");
	LockSettingsService$$ExternalSyntheticLambda0 v6 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v8 = Binder.clearCallingIdentity();
	int v11 = LockSettingsService.getCredentialTypeInternal(p3);
	boolean v10 = phiInstruction;
	long v13 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	boolean v12 = phiInstruction;
	long v15 = LockSettingsService.getLong("sp-handle", 0, p3);
	long v14 = v15;
	IBinder v17 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v18 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v17.linkToDeath(v18, 0);
	IGateKeeperService v22 = IGateKeeperService$Stub.asInterface(v17);
	this.mGateKeeperService = v22;
	IGateKeeperService v16 = v22;
	LockscreenCredential v24 = new LockscreenCredential(-1,v25);
	[B v25 = new [B(0);
	LockscreenCredential v23 = v24;
	SyntheticPasswordManager$AuthenticationResult v28 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v30 = SyntheticPasswordManager.loadState("pwd", v14, p3);
	SyntheticPasswordManager$PasswordData v31 = SyntheticPasswordManager$PasswordData.fromBytes(v30);
	boolean v32 = v23.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v33 = SyntheticPasswordManager.computePasswordToken(v23, v31);
	int v34 = SyntheticPasswordManager.loadWeaverSlot(v14, p3);
	boolean v35 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v36 = SyntheticPasswordManager.passwordTokenToWeaverKey(v33);
	VerifyCredentialResponse v37 = SyntheticPasswordManager.weaverVerify(v34, v36);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
	int v38 = v37.getResponseCode();
	byte[] v39 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v40 = SyntheticPasswordManager.transformUnderWeaverSecret(v33, v39);
	0.onCredentialVerified();
	SyntheticPasswordManager$AuthenticationToken v43 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v14, 0, phiInstruction, phiInstruction, p3);
	SyntheticPasswordManager$AuthenticationResult.authToken = v43;
	VerifyCredentialResponse v44 = SyntheticPasswordManager.verifyChallenge(v16, v43, 0, p3);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v44;
	boolean v45 = SyntheticPasswordManager.hasPasswordMetrics(v14, p3);
	SyntheticPasswordManager.savePasswordMetrics(v23, SyntheticPasswordManager$AuthenticationResult.authToken, v14, p3);
	SyntheticPasswordManager$AuthenticationResult v27 = v28;
	LockSettingsStorage$PersistentData v48 = this.mStorage.readPersistentDataBlock();
	boolean v47 = phiInstruction;
	UserManagerInternal v50 = this.mInjector.getUserManagerInternal();
	boolean v51 = v50.isUserManaged(p3);
	boolean v52 = v50.isDeviceManaged();
	DeviceStateCache v53 = this.mInjector.getDeviceStateCache();
	boolean v54 = v53.isDeviceProvisioned();
	PackageManager v55 = this.mContext.getPackageManager();
	boolean v56 = v55.hasSystemFeature("android.hardware.type.automotive");
	boolean v63 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
	this.mSpManager.destroyEscrowData(p3);
	boolean v66 = SyntheticPasswordManager.hasState("e0", 0, p3);
	boolean v67 = SyntheticPasswordManager.hasState("p1", 0, p3);
	boolean v65 = phiInstruction;
	long v69 = SyntheticPasswordManager.generateHandle();
	Integer v70 = Integer.valueOf(p3);
	boolean v71 = this.tokenMap.containsKey(v70);
	Integer v72 = Integer.valueOf(p3);
	ArrayMap v73 = new ArrayMap();
	Object v75 = this.tokenMap.put(v72, v73);
	SyntheticPasswordManager$TokenData v76 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v78 = SyntheticPasswordManager.secureRandom(16384);
	boolean v79 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v80 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v80;
	byte[] v81 = SyntheticPasswordCrypto.encrypt(v80, this.PERSONALISATION_WEAVER_TOKEN, v78);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v81;
	byte[] v82 = SyntheticPasswordManager.transformUnderSecdiscardable(p1, v78);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v82;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v83 = Integer.valueOf(p3);
	Object v84 = this.tokenMap.get(v83);
	Long v85 = Long.valueOf(v69);
	Object v86 = v84.put(v85, v76);
	long v68 = v69;
	Integer v88 = Integer.valueOf(p3);
	boolean v89 = this.tokenMap.containsKey(v88);
	Integer v90 = Integer.valueOf(p3);
	Object v91 = this.tokenMap.get(v90);
	Long v92 = Long.valueOf(v68);
	Object v93 = v91.get(v92);
	boolean v94 = SyntheticPasswordManager.loadEscrowData(phiInstruction, p3);
	boolean v95 = SyntheticPasswordManager.isWeaverAvailable();
	int v96 = SyntheticPasswordManager.getNextAvailableWeaverSlot();
	byte[] v105 = SyntheticPasswordManager.weaverEnroll(v96, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	SyntheticPasswordManager.saveWeaverSlot(v96, v68, p3);
	this.mPasswordSlotManager.markSlotInUse(v96);
	SyntheticPasswordManager.saveSecdiscardable(v68, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v109 = SyntheticPasswordManager.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	SyntheticPasswordManager.createSyntheticPasswordBlob(v68, v109, phiInstruction, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v111 = Integer.valueOf(p3);
	Object v112 = this.tokenMap.get(v111);
	Long v113 = Long.valueOf(v68);
	Object v114 = v112.remove(v113);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(v68, p3);
	boolean v87 = 1;
	long v9 = v68;
	Binder.restoreCallingIdentity(v8);
	return v9;
}
This is path 2 for the API with depth 2:
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	PackageManager v3 = this.mContext.getPackageManager();
	boolean v4 = v3.hasSystemFeature("android.hardware.type.automotive");
	Object v5 = Objects.requireNonNull(p3, "Listener can not be null.");
	LockSettingsService$$ExternalSyntheticLambda0 v6 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v8 = Binder.clearCallingIdentity();
	int v11 = LockSettingsService.getCredentialTypeInternal(p3);
	boolean v10 = phiInstruction;
	long v13 = LockSettingsService.getSyntheticPasswordHandleLocked(p3);
	boolean v12 = phiInstruction;
	long v15 = LockSettingsService.getLong("sp-handle", 0, p3);
	long v14 = v15;
	IBinder v17 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v18 = new LockSettingsService$GateKeeperDiedRecipient(LockSettingsService,0);
	v17.linkToDeath(v18, 0);
	IGateKeeperService v22 = IGateKeeperService$Stub.asInterface(v17);
	this.mGateKeeperService = v22;
	IGateKeeperService v16 = v22;
	LockscreenCredential v24 = new LockscreenCredential(-1,v25);
	[B v25 = new [B(0);
	LockscreenCredential v23 = v24;
	SyntheticPasswordManager$AuthenticationResult v28 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v30 = SyntheticPasswordManager.loadState("pwd", v14, p3);
	SyntheticPasswordManager$PasswordData v31 = SyntheticPasswordManager$PasswordData.fromBytes(v30);
	boolean v32 = v23.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v33 = SyntheticPasswordManager.computePasswordToken(v23, v31);
	int v34 = SyntheticPasswordManager.loadWeaverSlot(v14, p3);
	boolean v35 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v36 = SyntheticPasswordManager.passwordTokenToWeaverKey(v33);
	VerifyCredentialResponse v37 = SyntheticPasswordManager.weaverVerify(v34, v36);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v37;
	int v38 = v37.getResponseCode();
	byte[] v39 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v40 = SyntheticPasswordManager.transformUnderWeaverSecret(v33, v39);
	0.onCredentialVerified();
	SyntheticPasswordManager$AuthenticationToken v43 = SyntheticPasswordManager.unwrapSyntheticPasswordBlob(v14, 0, phiInstruction, phiInstruction, p3);
	SyntheticPasswordManager$AuthenticationResult.authToken = v43;
	VerifyCredentialResponse v44 = SyntheticPasswordManager.verifyChallenge(v16, v43, 0, p3);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v44;
	boolean v45 = SyntheticPasswordManager.hasPasswordMetrics(v14, p3);
	SyntheticPasswordManager.savePasswordMetrics(v23, SyntheticPasswordManager$AuthenticationResult.authToken, v14, p3);
	SyntheticPasswordManager$AuthenticationResult v27 = v28;
	LockSettingsStorage$PersistentData v48 = this.mStorage.readPersistentDataBlock();
	boolean v47 = phiInstruction;
	UserManagerInternal v50 = this.mInjector.getUserManagerInternal();
	boolean v51 = v50.isUserManaged(p3);
	boolean v52 = v50.isDeviceManaged();
	DeviceStateCache v53 = this.mInjector.getDeviceStateCache();
	boolean v54 = v53.isDeviceProvisioned();
	PackageManager v55 = this.mContext.getPackageManager();
	boolean v56 = v55.hasSystemFeature("android.hardware.type.automotive");
	boolean v63 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p3);
	this.mSpManager.destroyEscrowData(p3);
	boolean v66 = SyntheticPasswordManager.hasState("e0", 0, p3);
	boolean v67 = SyntheticPasswordManager.hasState("p1", 0, p3);
	boolean v65 = phiInstruction;
	long v69 = SyntheticPasswordManager.generateHandle();
	Integer v70 = Integer.valueOf(p3);
	boolean v71 = this.tokenMap.containsKey(v70);
	Integer v72 = Integer.valueOf(p3);
	ArrayMap v73 = new ArrayMap();
	Object v75 = this.tokenMap.put(v72, v73);
	SyntheticPasswordManager$TokenData v76 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v78 = SyntheticPasswordManager.secureRandom(16384);
	boolean v79 = SyntheticPasswordManager.isWeaverAvailable();
	byte[] v80 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v80;
	byte[] v81 = SyntheticPasswordCrypto.encrypt(v80, this.PERSONALISATION_WEAVER_TOKEN, v78);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v81;
	byte[] v82 = SyntheticPasswordManager.transformUnderSecdiscardable(p1, v78);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v82;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v83 = Integer.valueOf(p3);
	Object v84 = this.tokenMap.get(v83);
	Long v85 = Long.valueOf(v69);
	Object v86 = v84.put(v85, v76);
	long v68 = v69;
	Integer v88 = Integer.valueOf(p3);
	boolean v89 = this.tokenMap.containsKey(v88);
	Integer v90 = Integer.valueOf(p3);
	Object v91 = this.tokenMap.get(v90);
	Long v92 = Long.valueOf(v68);
	Object v93 = v91.get(v92);
	boolean v94 = SyntheticPasswordManager.loadEscrowData(phiInstruction, p3);
	boolean v95 = SyntheticPasswordManager.isWeaverAvailable();
	int v96 = SyntheticPasswordManager.getNextAvailableWeaverSlot();
	byte[] v105 = SyntheticPasswordManager.weaverEnroll(v96, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	SyntheticPasswordManager.saveWeaverSlot(v96, v68, p3);
	this.mPasswordSlotManager.markSlotInUse(v96);
	SyntheticPasswordManager.saveSecdiscardable(v68, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v109 = SyntheticPasswordManager.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	SyntheticPasswordManager.createSyntheticPasswordBlob(v68, v109, phiInstruction, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v111 = Integer.valueOf(p3);
	Object v112 = this.tokenMap.get(v111);
	Long v113 = Long.valueOf(v68);
	Object v114 = v112.remove(v113);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(v68, p3);
	boolean v87 = 1;
	long v9 = v68;
	Binder.restoreCallingIdentity(v8);
	return v9;
}

and the following sink code:
['SyntheticPasswordManager$TokenData v76 = new SyntheticPasswordManager$TokenData();\nSyntheticPasswordManager$TokenData.mType = p2;\nbyte[] v78 = SyntheticPasswordManager.secureRandom(16384);\nboolean v79 = SyntheticPasswordManager.isWeaverAvailable();\nbyte[] v80 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);\nSyntheticPasswordManager$TokenData.weaverSecret = v80;\nbyte[] v81 = SyntheticPasswordCrypto.encrypt(v80, this.PERSONALISATION_WEAVER_TOKEN, v78);\nSyntheticPasswordManager$TokenData.secdiscardableOnDisk = v81;\nbyte[] v82 = SyntheticPasswordManager.transformUnderSecdiscardable(p1, v78);\nSyntheticPasswordManager$TokenData.aggregatedSecret = v82;\nInteger v83 = Integer.valueOf(p3);\nObject v84 = this.tokenMap.get(v83);\nLong v85 = Long.valueOf(v69);\nObject v86 = v84.put(v85, v76);', 'long v68 = SyntheticPasswordManager.generateHandle();\nInteger v90 = Integer.valueOf(p3);\nObject v91 = this.tokenMap.get(v90);\nLong v92 = Long.valueOf(v68);\nObject v93 = v91.get(v92);', 'SyntheticPasswordManager.saveWeaverSlot(v96, v68, p3);\nthis.mPasswordSlotManager.markSlotInUse(v96);\nSyntheticPasswordManager.saveSecdiscardable(v68, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);', 'byte v109 = SyntheticPasswordManager.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);\nSyntheticPasswordManager.createSyntheticPasswordBlob(v68, v109, phiInstruction, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);', 'Integer v111 = Integer.valueOf(p3);\nObject v112 = this.tokenMap.get(v111);\nLong v113 = Long.valueOf(v68);\nObject v114 = v112.remove(v113);']

The method addWeakEscrowToken has the following similar APIs:

- API Name: hasPendingEscrowToken(I)Z with Similarity Score: 0.9019067287445068
  - Access Control Level: SYS_OR_SIG and the following code:
Integer v4 = Integer.valueOf(p1);
boolean v5 = this.tokenMap.containsKey(v4);
Object v8 = this.tokenMap.get(v7);
Set v9 = v8.keySet();
ArraySet v6 = new ArraySet(v9);

- API Name: removeWeakEscrowToken(JI)Z with Similarity Score: 0.7898169159889221
  - Access Control Level: SYS_OR_SIG and the following code:
long v8 = LockSettingsService.getLong("sp-handle", 0, p2);
Integer v10 = Integer.valueOf(p2);
boolean v11 = this.tokenMap.containsKey(v10);
Object v13 = this.tokenMap.get(v12);
Long v14 = Long.valueOf(p1);
Object v15 = v13.remove(v14);

