The method removeKey has the following code snippet:

This is path 1 for the API with depth 2:
public void removeKey(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, "alias is null");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	SQLiteDatabase v18 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v19 = new String(2);
	String v20 = Integer.toString(v15);
	int v21 = v18.delete("keys", "uid = ? AND alias = ?", v19);
	boolean v17 = phiInstruction;
	long v23 = RecoverableKeyStoreDb.setLong(v16, v15, "should_create_snapshot", phiInstruction);
	long v22 = v23;
	Object v25 = new Object(3);
	Integer v26 = Integer.valueOf(v16);
	Integer v27 = Integer.valueOf(v15);
	String v28 = String.format(Locale.US, "Del %d/%d/%s", v25);
	int v29 = Log.i("RecoverableAppKeyStore", v28);
	String v30 = ApplicationKeyStorage.getInternalAlias(v16, v15, p1);
	this.mKeyStore.deleteEntry(v30);
	return;
}
This is path 2 for the API with depth 2:
public void removeKey(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, "alias is null");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	SQLiteDatabase v18 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v19 = new String(2);
	String v20 = Integer.toString(v15);
	int v21 = v18.delete("keys", "uid = ? AND alias = ?", v19);
	boolean v17 = phiInstruction;
	long v23 = RecoverableKeyStoreDb.setLong(v16, v15, "should_create_snapshot", phiInstruction);
	long v22 = v23;
	Object v25 = new Object(3);
	Integer v26 = Integer.valueOf(v16);
	Integer v27 = Integer.valueOf(v15);
	String v28 = String.format(Locale.US, "Del %d/%d/%s", v25);
	int v29 = Log.i("RecoverableAppKeyStore", v28);
	String v30 = ApplicationKeyStorage.getInternalAlias(v16, v15, p1);
	this.mKeyStore.deleteEntry(v30);
	return;
}
This is path 3 for the API with depth 2:
public void removeKey(String p1){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, "alias is null");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	SQLiteDatabase v18 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v19 = new String(2);
	String v20 = Integer.toString(v15);
	int v21 = v18.delete("keys", "uid = ? AND alias = ?", v19);
	boolean v17 = phiInstruction;
	return;
}

and the following sink code:
['this.mCleanupManager.registerRecoveryAgent(v11, v12);\nSQLiteDatabase v18 = this.mKeyStoreDbHelper.getWritableDatabase();\nint v21 = v18.delete("keys", "uid = ? AND alias = ?", v19);']

The method removeKey has the following similar APIs:

- API Name: setServerParams([B)V with Similarity Score: 0.8726614117622375
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCleanupManager.registerRecoveryAgent(v11, v12);

- API Name: initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V with Similarity Score: 0.8709416389465332
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCleanupManager.registerRecoveryAgent(v11, v12);
int v34 = UserHandle.getCallingUserId();
int v35 = Binder.getCallingUid();
long v47 = this.mDatabase.setActiveRootOfTrust(v34, v35, v36);

