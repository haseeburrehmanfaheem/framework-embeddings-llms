The method recoverKeyChainSnapshot has the following code snippet:

This is path 1 for the API with depth 2:
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = UserHandle.getCallingUserId();
	int v15 = Binder.getCallingUid();
	Object v17 = this.mSessionsByUid.get(v15);
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	Object v20 = v18.next();
	String v21 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v20);
	boolean v22 = p1.equals(v21);
	RecoverySessionStorage$Entry v16 = v20;
	byte[] v24 = v16.getKeyClaimant();
	byte[] v25 = v16.getVaultParams();
	byte[] v26 = KeySyncUtils.decryptRecoveryClaimResponse(v24, v25, p2);
	byte[] v27 = v16.getLskfHash();
	byte[] v28 = KeySyncUtils.decryptRecoveryKey(v27, v26);
	byte[] v23 = v28;
	HashMap v30 = new HashMap();
	Iterator v32 = p3.iterator();
	boolean v33 = v32.hasNext();
	boolean v34 = p3.isEmpty();
	boolean v35 = v30.isEmpty();
	Map v29 = v30;
	ArrayMap v37 = new ArrayMap(v38);
	int v38 = v29.size();
	Set v40 = v29.keySet();
	Iterator v41 = v40.iterator();
	boolean v42 = v41.hasNext();
	Map v36 = v37;
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	Object v47 = this.mSessionsByUid.get(v15);
	Iterator v48 = v47.iterator();
	boolean v49 = v48.hasNext();
	this.mSessionsByUid.remove(v15);
	Map v1 = v36;
	return v1;
}
This is path 2 for the API with depth 2:
public Map recoverKeyChainSnapshot(String p1, byte[] p2, List p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	int v14 = UserHandle.getCallingUserId();
	int v15 = Binder.getCallingUid();
	Object v17 = this.mSessionsByUid.get(v15);
	Iterator v18 = v17.iterator();
	boolean v19 = v18.hasNext();
	Object v20 = v18.next();
	String v21 = RecoverySessionStorage$Entry.-$$Nest$fgetmSessionId(v20);
	boolean v22 = p1.equals(v21);
	RecoverySessionStorage$Entry v16 = v20;
	byte[] v24 = v16.getKeyClaimant();
	byte[] v25 = v16.getVaultParams();
	byte[] v26 = KeySyncUtils.decryptRecoveryClaimResponse(v24, v25, p2);
	byte[] v27 = v16.getLskfHash();
	byte[] v28 = KeySyncUtils.decryptRecoveryKey(v27, v26);
	byte[] v23 = v28;
	HashMap v30 = new HashMap();
	Iterator v32 = p3.iterator();
	boolean v33 = v32.hasNext();
	boolean v34 = p3.isEmpty();
	Map v29 = v30;
	ArrayMap v36 = new ArrayMap(v37);
	int v37 = v29.size();
	Set v39 = v29.keySet();
	Iterator v40 = v39.iterator();
	boolean v41 = v40.hasNext();
	Map v35 = v36;
	Arrays.fill(this.mLskfHash, 0);
	Arrays.fill(this.mKeyClaimant, 0);
	Object v46 = this.mSessionsByUid.get(v15);
	Iterator v47 = v46.iterator();
	boolean v48 = v47.hasNext();
	this.mSessionsByUid.remove(v15);
	Map v1 = v35;
	return v1;
}

and the following sink code:
['int v11 = UserHandle.getCallingUserId();\nint v12 = Binder.getCallingUid();\nthis.mCleanupManager.registerRecoveryAgent(v11, v12);\nObject v17 = this.mSessionsByUid.get(v15);\nbyte[] v26 = KeySyncUtils.decryptRecoveryClaimResponse(v24, v25, p2);\nbyte[] v28 = KeySyncUtils.decryptRecoveryKey(v27, v26);\nHashMap v30 = new HashMap();\nreturn v1;']

The method recoverKeyChainSnapshot has the following similar APIs:

- API Name: getRecoveryStatus()Ljava/util/Map; with Similarity Score: 0.8945967555046082
  - Access Control Level: SYS_OR_SIG and the following code:
int v11 = UserHandle.getCallingUserId();
int v12 = Binder.getCallingUid();
this.mCleanupManager.registerRecoveryAgent(v11, v12);
SQLiteDatabase v16 = this.mKeyStoreDbHelper.getReadableDatabase();
Cursor v20 = v16.query("keys", new String[] {"key_id"}, "uid = ?", new String[] {String.valueOf(v14)}, 0, 0, 0);
HashMap v21 = new HashMap();
v21.put("recovery_status", v20.getString(0));
Map v1 = v21;
return v1;

- API Name: setRecoverySecretTypes([I)V with Similarity Score: 0.857391357421875
  - Access Control Level: SYS_OR_SIG and the following code:
int v11 = UserHandle.getCallingUserId();
int v12 = Binder.getCallingUid();
this.mCleanupManager.registerRecoveryAgent(v11, v12);

