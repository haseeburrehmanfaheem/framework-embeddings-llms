This is path 1 for the API with depth 2:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	boolean v15 = p1.isEmpty();
	int v16 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
	String v14 = phiInstruction;
	Object v17 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
	Object v18 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
	Element v20 = CertUtils.getXmlRootNode(p3);
	SigXml v21 = new SigXml(v22,v23,v24);
	List v22 = SigXml.parseIntermediateCerts(v20);
	X509Certificate v23 = SigXml.parseSignerCert(v20);
	byte[] v24 = SigXml.parseFileSignature(v20);
	SigXml v19 = v21;
	String v27 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v28 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v27);
	X509Certificate v29 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	X509Certificate v26 = v29;
	SigXml.verifyFileSignature(v26, p2, 0);
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v34 = UserHandle.getCallingUserId();
	int v35 = Binder.getCallingUid();
	String v36 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v37 = this.mTestCertHelper.isValidRootCertificateAlias(v36);
	String v38 = this.mDatabase.getActiveRootOfTrust(v34, v35);
	StringBuilder v39 = new StringBuilder();
	StringBuilder v41 = v39.append("Root of trust for recovery agent + ");
	StringBuilder v42 = v39.append(v35);
	StringBuilder v43 = v39.append(" is assigned for the first time to ");
	StringBuilder v44 = v39.append(v36);
	String v45 = v39.toString();
	int v46 = Log.d("RecoverableKeyStoreMgr", v45);
	long v47 = this.mDatabase.setActiveRootOfTrust(v34, v35, v36);
	CertXml v48 = CertXml.parse(p2);
	long v49 = v48.getSerial();
	Long v50 = this.mDatabase.getRecoveryServiceCertSerial(v34, v35, v36);
	long v51 = v50.longValue();
	boolean v52 = this.mTestCertHelper.isTestOnlyCertificateAlias(v36);
	long v53 = v50.longValue();
	int v54 = Log.i("RecoverableKeyStoreMgr", "The cert file serial number is the same, so skip updating.");
	return;
}

This is path 2 for the API with depth 2:
public void initRecoveryServiceWithSigFile(String p1, byte[] p2, byte[] p3){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	boolean v15 = p1.isEmpty();
	int v16 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
	String v14 = phiInstruction;
	Object v17 = Objects.requireNonNull(p2, "recoveryServiceCertFile is null");
	Object v18 = Objects.requireNonNull(p3, "recoveryServiceSigFile is null");
	Element v20 = CertUtils.getXmlRootNode(p3);
	SigXml v21 = new SigXml(v22,v23,v24);
	List v22 = SigXml.parseIntermediateCerts(v20);
	X509Certificate v23 = SigXml.parseSignerCert(v20);
	byte[] v24 = SigXml.parseFileSignature(v20);
	SigXml v19 = v21;
	String v27 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v28 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v27);
	X509Certificate v29 = TrustedRootCertificates.getRootCertificate(v27);
	X509Certificate v26 = v29;
	SigXml.verifyFileSignature(v26, p2, 0);
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v34 = UserHandle.getCallingUserId();
	int v35 = Binder.getCallingUid();
	String v36 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v37 = this.mTestCertHelper.isValidRootCertificateAlias(v36);
	String v38 = this.mDatabase.getActiveRootOfTrust(v34, v35);
	StringBuilder v39 = new StringBuilder();
	StringBuilder v41 = v39.append("Root of trust for recovery agent + ");
	StringBuilder v42 = v39.append(v35);
	StringBuilder v43 = v39.append(" is assigned for the first time to ");
	StringBuilder v44 = v39.append(v36);
	String v45 = v39.toString();
	int v46 = Log.d("RecoverableKeyStoreMgr", v45);
	long v47 = this.mDatabase.setActiveRootOfTrust(v34, v35, v36);
	CertXml v48 = CertXml.parse(p2);
	long v49 = v48.getSerial();
	Long v50 = this.mDatabase.getRecoveryServiceCertSerial(v34, v35, v36);
	long v51 = v50.longValue();
	boolean v52 = this.mTestCertHelper.isTestOnlyCertificateAlias(v36);
	long v53 = v50.longValue();
	int v54 = Log.i("RecoverableKeyStoreMgr", "The cert file serial number is the same, so skip updating.");
	return;
}
