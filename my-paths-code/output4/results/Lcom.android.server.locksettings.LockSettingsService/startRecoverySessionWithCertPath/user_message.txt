This is path 1 for the API with depth 2:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	boolean v15 = p2.isEmpty();
	int v16 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
	String v14 = phiInstruction;
	Object v17 = Objects.requireNonNull(p1, "invalid session");
	Object v18 = Objects.requireNonNull(p3, "verifierCertPath is null");
	Object v19 = Objects.requireNonNull(p4, "vaultParams is null");
	Object v20 = Objects.requireNonNull(p5, "vaultChallenge is null");
	Object v21 = Objects.requireNonNull(p6, "secrets is null");
	CertPath v23 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	CertPath v22 = v23;
	String v25 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v26 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v25);
	X509Certificate v27 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	X509Certificate v24 = v27;
	CertUtils.validateCertPath(0, v24, v22);
	List v30 = v22.getCertificates();
	Object v31 = v30.get(0);
	PublicKey v32 = v31.getPublicKey();
	byte[] v33 = v32.getEncoded();
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v36 = Binder.getCallingUid();
	int v37 = p6.size();
	PublicKey v38 = KeySyncUtils.deserializePublicKey(v33);
	boolean v39 = RecoverableKeyStoreManager.publicKeysMatch(v38, p4);
	byte[] v40 = KeySyncUtils.generateKeyClaimant();
	Object v41 = p6.get(0);
	byte[] v42 = v41.getSecret();
	RecoverySessionStorage$Entry v43 = new RecoverySessionStorage$Entry(p1,v42,v40,p4);
	this.mRecoverySessionStorage.add(v36, v43);
	StringBuilder v46 = new StringBuilder();
	StringBuilder v48 = v46.append("Received VaultParams for recovery: ");
	String v49 = HexDump.toHexString(p4);
	StringBuilder v50 = v46.append(v49);
	String v51 = v46.toString();
	int v52 = Log.i("RecoverableKeyStoreMgr", v51);
	byte[] v53 = KeySyncUtils.calculateThmKfHash(v42);
	byte[] v54 = KeySyncUtils.encryptRecoveryClaim(v38, p4, p5, v53, v40);
	byte[] v34 = v54;
	byte[] v1 = v34;
	return v1;
}

This is path 2 for the API with depth 2:
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	boolean v15 = p2.isEmpty();
	int v16 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
	String v14 = phiInstruction;
	Object v17 = Objects.requireNonNull(p1, "invalid session");
	Object v18 = Objects.requireNonNull(p3, "verifierCertPath is null");
	Object v19 = Objects.requireNonNull(p4, "vaultParams is null");
	Object v20 = Objects.requireNonNull(p5, "vaultChallenge is null");
	Object v21 = Objects.requireNonNull(p6, "secrets is null");
	CertPath v23 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	CertPath v22 = v23;
	String v25 = TestOnlyInsecureCertificateHelper.getDefaultCertificateAliasIfEmpty(v14);
	boolean v26 = TestOnlyInsecureCertificateHelper.isTestOnlyCertificateAlias(v25);
	X509Certificate v27 = TrustedRootCertificates.getRootCertificate(v25);
	X509Certificate v24 = v27;
	CertUtils.validateCertPath(0, v24, v22);
	List v30 = v22.getCertificates();
	Object v31 = v30.get(0);
	PublicKey v32 = v31.getPublicKey();
	byte[] v33 = v32.getEncoded();
	RecoverableKeyStoreManager.checkRecoverKeyStorePermission();
	int v36 = Binder.getCallingUid();
	int v37 = p6.size();
	PublicKey v38 = KeySyncUtils.deserializePublicKey(v33);
	boolean v39 = RecoverableKeyStoreManager.publicKeysMatch(v38, p4);
	byte[] v40 = KeySyncUtils.generateKeyClaimant();
	Object v41 = p6.get(0);
	byte[] v42 = v41.getSecret();
	RecoverySessionStorage$Entry v43 = new RecoverySessionStorage$Entry(p1,v42,v40,p4);
	this.mRecoverySessionStorage.add(v36, v43);
	StringBuilder v46 = new StringBuilder();
	StringBuilder v48 = v46.append("Received VaultParams for recovery: ");
	String v49 = HexDump.toHexString(p4);
	StringBuilder v50 = v46.append(v49);
	String v51 = v46.toString();
	int v52 = Log.i("RecoverableKeyStoreMgr", v51);
	byte[] v53 = KeySyncUtils.calculateThmKfHash(v42);
	byte[] v54 = KeySyncUtils.encryptRecoveryClaim(v38, p4, p5, v53, v40);
	byte[] v34 = v54;
	byte[] v1 = v34;
	return v1;
}
