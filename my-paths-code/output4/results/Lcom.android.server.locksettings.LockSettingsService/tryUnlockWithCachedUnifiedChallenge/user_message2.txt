The method tryUnlockWithCachedUnifiedChallenge has the following code snippet:

This is path 1 for the API with depth 2:
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("com.android.server.locksettings.unified_profile_cache_v2_");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	String v3 = v8;
	Key v9 = this.mKeyStore.getKey(v3, 0);
	byte[] v10 = Arrays.copyOf(v2, 12);
	byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
	Cipher v12 = Cipher.getInstance("AES/GCM/NoPadding");
	GCMParameterSpec v13 = new GCMParameterSpec(128,v10);
	LockscreenCredential v1 = 0;
	LockscreenCredential.ensureNotZeroized();
	boolean v17 = phiInstruction;
	ContentResolver v19 = this.mContext.getContentResolver();
	int v21 = Settings$Global.getInt(v19, "device_provisioned", 0);
	int v20 = v21;
	boolean v23 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v32 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v33 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v34 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v33, p1, p2, p3);
	int v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v37 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v37);
	IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v41 = v40.getResponseCode();
	VerifyCredentialResponse v22 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v45 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v46 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v43 = v46;
	int v48 = LockscreenCredential.getType();
	int v49 = LockscreenCredential.getType();
	boolean v47 = phiInstruction;
	boolean v51 = p1.isNone();
	boolean v52 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v54 = LockSettingsService.getGateKeeperService();
	byte[] v55 = p1.getCredential();
	GateKeeperResponse v56 = v54.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v55);
	VerifyCredentialResponse v58 = LockSettingsService.convertResponse(phiInstruction);
	boolean v59 = phiInstruction.getShouldReEnroll();
	int v60 = v58.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v64 = p1.getCredential();
	LockSettingsService.unlockKeystore(v64, p2);
	byte[] v72 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v72);
	boolean v74 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v76 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v50 = v58;
	int v78 = this.mResponseCode;
	Message v80 = this.mHandler.obtainMessage(5, p2, 0);
	v80.sendToTarget();
	VerifyCredentialResponse v16 = v50;
	int v82 = v16.getResponseCode();
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return phiInstruction;
}
This is path 2 for the API with depth 2:
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("com.android.server.locksettings.unified_profile_cache_v2_");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	String v3 = v8;
	Key v9 = this.mKeyStore.getKey(v3, 0);
	byte[] v10 = Arrays.copyOf(v2, 12);
	byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
	Cipher v12 = Cipher.getInstance("AES/GCM/NoPadding");
	GCMParameterSpec v13 = new GCMParameterSpec(128,v10);
	LockscreenCredential v1 = 0;
	LockscreenCredential.ensureNotZeroized();
	boolean v17 = phiInstruction;
	ContentResolver v19 = this.mContext.getContentResolver();
	int v21 = Settings$Global.getInt(v19, "device_provisioned", 0);
	int v20 = v21;
	boolean v23 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v32 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v33 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v34 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v33, p1, p2, p3);
	int v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v37 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v37);
	IGateKeeperService v39 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v41 = v40.getResponseCode();
	VerifyCredentialResponse v22 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v45 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v43 = v45;
	int v47 = LockscreenCredential.getType();
	int v48 = LockscreenCredential.getType();
	boolean v46 = phiInstruction;
	boolean v50 = p1.isNone();
	boolean v51 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v53 = LockSettingsService.getGateKeeperService();
	byte[] v54 = p1.getCredential();
	GateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);
	VerifyCredentialResponse v57 = LockSettingsService.convertResponse(phiInstruction);
	boolean v58 = phiInstruction.getShouldReEnroll();
	int v59 = v57.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v63 = p1.getCredential();
	LockSettingsService.unlockKeystore(v63, p2);
	byte[] v71 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v71);
	boolean v73 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v75 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v49 = v57;
	int v77 = this.mResponseCode;
	Message v79 = this.mHandler.obtainMessage(5, p2, 0);
	v79.sendToTarget();
	VerifyCredentialResponse v16 = v49;
	int v81 = v16.getResponseCode();
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return phiInstruction;
}
This is path 3 for the API with depth 2:
public boolean tryUnlockWithCachedUnifiedChallenge(int p1){
	Object v2 = this.mEncryptedPasswords.get(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("com.android.server.locksettings.unified_profile_cache_v2_");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	String v3 = v8;
	Key v9 = this.mKeyStore.getKey(v3, 0);
	byte[] v10 = Arrays.copyOf(v2, 12);
	byte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);
	Cipher v12 = Cipher.getInstance("AES/GCM/NoPadding");
	LockscreenCredential v1 = 0;
	LockscreenCredential.ensureNotZeroized();
	boolean v15 = phiInstruction;
	ContentResolver v17 = this.mContext.getContentResolver();
	int v19 = Settings$Global.getInt(v17, "device_provisioned", 0);
	int v18 = v19;
	boolean v21 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v30 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v31 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v32 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v33 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v32, v31, p1, p2, p3);
	int v34 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v35 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v35);
	IGateKeeperService v37 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v38 = this.mSpManager.verifyChallenge(v37, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v39 = v38.getResponseCode();
	VerifyCredentialResponse v20 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v42 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v43 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v44 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v41 = v44;
	int v46 = LockscreenCredential.getType();
	int v47 = LockscreenCredential.getType();
	boolean v45 = phiInstruction;
	boolean v49 = p1.isNone();
	boolean v50 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v52 = LockSettingsService.getGateKeeperService();
	byte[] v53 = p1.getCredential();
	GateKeeperResponse v54 = v52.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v53);
	VerifyCredentialResponse v56 = LockSettingsService.convertResponse(phiInstruction);
	boolean v57 = phiInstruction.getShouldReEnroll();
	int v58 = v56.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v62 = p1.getCredential();
	LockSettingsService.unlockKeystore(v62, p2);
	byte[] v70 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v70);
	boolean v72 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v74 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v48 = v56;
	int v76 = this.mResponseCode;
	Message v78 = this.mHandler.obtainMessage(5, p2, 0);
	v78.sendToTarget();
	VerifyCredentialResponse v14 = v48;
	int v80 = v14.getResponseCode();
	Arrays.fill(this.mCredential, 0);
	this.mCredential = 0;
	return phiInstruction;
}

and the following sink code:
['Object v2 = this.mEncryptedPasswords.get(p1);\nStringBuilder v4 = new StringBuilder();\nStringBuilder v6 = v4.append("com.android.server.locksettings.unified_profile_cache_v2_");\nStringBuilder v7 = v4.append(p1);\nString v8 = v4.toString();\nKey v9 = this.mKeyStore.getKey(v3, 0);', 'byte[] v10 = Arrays.copyOf(v2, 12);\nbyte[] v11 = Arrays.copyOfRange(v2, 12, v2.length);\nCipher v12 = Cipher.getInstance("AES/GCM/NoPadding");\nGCMParameterSpec v13 = new GCMParameterSpec(128,v10);', 'IGateKeeperService v34 = LockSettingsService.getGateKeeperService();\nSyntheticPasswordManager$AuthenticationResult v35 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v34, v33, p1, p2, p3);\nint v36 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();', 'IGateKeeperService v39 = LockSettingsService.getGateKeeperService();\nVerifyCredentialResponse v40 = this.mSpManager.verifyChallenge(v39, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);\nint v41 = v40.getResponseCode();', 'LockSettingsStorage$CredentialHash v44 = LockSettingsStorage.readPasswordHashIfExists(p2);\nLockSettingsStorage$CredentialHash v45 = LockSettingsStorage.readPatternHashIfExists(p2);\nLockSettingsStorage$CredentialHash v43 = v46;', 'IGateKeeperService v53 = LockSettingsService.getGateKeeperService();\nbyte[] v54 = p1.getCredential();\nGateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);', 'VerifyCredentialResponse v57 = LockSettingsService.convertResponse(phiInstruction);\nboolean v58 = phiInstruction.getShouldReEnroll();\nint v59 = v57.getResponseCode();', 'LockSettingsService.setUserPasswordMetrics(p1, p2);\nbyte[] v63 = p1.getCredential();\nLockSettingsService.unlockKeystore(v63, p2);', 'byte[] v71 = LockSettingsService.secretFromCredential(p1);\nLockSettingsService.unlockUser(p2, v71);']

The method tryUnlockWithCachedUnifiedChallenge has the following similar APIs:

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9945125579833984
  - Access Control Level: SYS_OR_SIG and the following code:
VerifyCredentialResponse v44 = LockSettingsService.convertResponse(phiInstruction);
boolean v45 = phiInstruction.getShouldReEnroll();
int v46 = v44.getResponseCode();

- API Name: verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9935137033462524
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v43 = LockSettingsService.getGateKeeperService();
byte[] v44 = p1.getCredential();
GateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);

