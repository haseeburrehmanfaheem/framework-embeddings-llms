This is path 1 for the API with depth 2:
public String generateKeyWithMetadata(String p1, byte[] p2){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, "alias is null");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v16);
	PlatformDecryptionKey v19 = PlatformKeyManager.getDecryptKeyInternal(v16);
	PlatformEncryptionKey v20 = PlatformKeyManager.getEncryptKeyInternal(v16);
	Object v21 = new Object(1);
	Integer v22 = Integer.valueOf(v16);
	String v23 = String.format(Locale.US, "Regenerating permanently invalid Platform key for user %d.", v21);
	int v24 = Log.i("PlatformKeyManager", v23);
	PlatformKeyManager.regenerate(v16);
	PlatformEncryptionKey v26 = PlatformKeyManager.getEncryptKeyInternal(v16);
	PlatformEncryptionKey v17 = v26;
	this.mKeyGenerator.init(256);
	SecretKey v29 = this.mKeyGenerator.generateKey();
	WrappedKey v30 = WrappedKey.fromSecretKey(v17, v29, p2);
	long v31 = this.mDatabase.insertKey(v16, v15, p1, v30);
	long v32 = this.mDatabase.setShouldCreateSnapshot(v16, v15, 1);
	int v33 = Log.e("PlatformKeyGen", "Failed to set the shoudCreateSnapshot flag in the local DB.");
	byte[] v34 = v29.getEncoded();
	byte[] v27 = v34;
	Object v36 = new Object(4);
	Integer v37 = Integer.valueOf(v16);
	Integer v38 = Integer.valueOf(v15);
	Integer v39 = Integer.valueOf(v27.length);
	String v40 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v36);
	int v41 = Log.i("RecoverableAppKeyStore", v40);
	String v42 = ApplicationKeyStorage.getInternalAlias(v16, v15, p1);
	KeyStore$SecretKeyEntry v43 = new KeyStore$SecretKeyEntry(v44);
	SecretKeySpec v44 = new SecretKeySpec(v27,"AES");
	KeyProtection$Builder v47 = new KeyProtection$Builder(3);
	String v49 = new String(1);
	KeyProtection$Builder v50 = v47.setBlockModes(v49);
	String v51 = new String(1);
	KeyProtection$Builder v52 = v50.setEncryptionPaddings(v51);
	KeyProtection v53 = v52.build();
	this.mKeyStore.setEntry(v42, v43, v53);
	String v56 = this.mApplicationKeyStorage.getGrantAlias(v16, v15, p1);
	String v55 = v56;
	String v1 = v55;
	return v1;
}

This is path 2 for the API with depth 2:
public String generateKeyWithMetadata(String p1, byte[] p2){
	int v11 = UserHandle.getCallingUserId();
	int v12 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v11, v12);
	Object v14 = Objects.requireNonNull(p1, "alias is null");
	int v15 = Binder.getCallingUid();
	int v16 = UserHandle.getCallingUserId();
	PlatformKeyManager.init(v16);
	PlatformDecryptionKey v19 = PlatformKeyManager.getDecryptKeyInternal(v16);
	Object v20 = new Object(1);
	Integer v21 = Integer.valueOf(v16);
	String v22 = String.format(Locale.US, "Regenerating permanently invalid Platform key for user %d.", v20);
	int v23 = Log.i("PlatformKeyManager", v22);
	PlatformKeyManager.regenerate(v16);
	PlatformEncryptionKey v25 = PlatformKeyManager.getEncryptKeyInternal(v16);
	PlatformEncryptionKey v17 = v25;
	this.mKeyGenerator.init(256);
	SecretKey v28 = this.mKeyGenerator.generateKey();
	WrappedKey v29 = WrappedKey.fromSecretKey(v17, v28, p2);
	long v30 = this.mDatabase.insertKey(v16, v15, p1, v29);
	long v31 = this.mDatabase.setShouldCreateSnapshot(v16, v15, 1);
	int v32 = Log.e("PlatformKeyGen", "Failed to set the shoudCreateSnapshot flag in the local DB.");
	byte[] v33 = v28.getEncoded();
	byte[] v26 = v33;
	Object v35 = new Object(4);
	Integer v36 = Integer.valueOf(v16);
	Integer v37 = Integer.valueOf(v15);
	Integer v38 = Integer.valueOf(v26.length);
	String v39 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v35);
	int v40 = Log.i("RecoverableAppKeyStore", v39);
	String v41 = ApplicationKeyStorage.getInternalAlias(v16, v15, p1);
	KeyStore$SecretKeyEntry v42 = new KeyStore$SecretKeyEntry(v43);
	SecretKeySpec v43 = new SecretKeySpec(v26,"AES");
	KeyProtection$Builder v46 = new KeyProtection$Builder(3);
	String v48 = new String(1);
	KeyProtection$Builder v49 = v46.setBlockModes(v48);
	String v50 = new String(1);
	KeyProtection$Builder v51 = v49.setEncryptionPaddings(v50);
	KeyProtection v52 = v51.build();
	this.mKeyStore.setEntry(v41, v42, v52);
	String v55 = this.mApplicationKeyStorage.getGrantAlias(v16, v15, p1);
	String v54 = v55;
	String v1 = v54;
	return v1;
}
