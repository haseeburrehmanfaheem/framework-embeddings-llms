The method verifyCredential has the following code snippet:

This is path 1 for the API with depth 2:
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = phiInstruction;
	boolean v3 = phiInstruction;
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = p1.isNone();
	ContentResolver v8 = this.mContext.getContentResolver();
	int v10 = Settings$Global.getInt(v8, "device_provisioned", 0);
	int v9 = v10;
	boolean v12 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v21 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v22 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v23 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v24 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v23, v22, p1, p2, p3);
	int v25 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v26 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v26);
	IGateKeeperService v28 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v29 = this.mSpManager.verifyChallenge(v28, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v30 = v29.getResponseCode();
	VerifyCredentialResponse v11 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v33 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v34 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v35 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v32 = v35;
	int v37 = LockscreenCredential.getType();
	int v38 = LockscreenCredential.getType();
	boolean v36 = phiInstruction;
	boolean v40 = p1.isNone();
	boolean v41 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v43 = LockSettingsService.getGateKeeperService();
	byte[] v44 = p1.getCredential();
	GateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);
	VerifyCredentialResponse v47 = LockSettingsService.convertResponse(phiInstruction);
	boolean v48 = phiInstruction.getShouldReEnroll();
	int v49 = v47.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v53 = p1.getCredential();
	LockSettingsService.unlockKeystore(v53, p2);
	byte[] v61 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v61);
	boolean v63 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v65 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v39 = v47;
	int v67 = this.mResponseCode;
	Message v69 = this.mHandler.obtainMessage(5, p2, 0);
	v69.sendToTarget();
	VerifyCredentialResponse v6 = v39;
	Binder.restoreCallingIdentity(v5);
	p0.scheduleGc();
	return v6;
}
This is path 2 for the API with depth 2:
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = phiInstruction;
	boolean v3 = phiInstruction;
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = p1.isNone();
	ContentResolver v8 = this.mContext.getContentResolver();
	int v10 = Settings$Global.getInt(v8, "device_provisioned", 0);
	int v9 = v10;
	boolean v12 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v21 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v22 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v23 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v24 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v23, v22, p1, p2, p3);
	int v25 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v26 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v26);
	IGateKeeperService v28 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v29 = this.mSpManager.verifyChallenge(v28, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v30 = v29.getResponseCode();
	VerifyCredentialResponse v11 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v33 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v34 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v35 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v32 = v35;
	int v37 = LockscreenCredential.getType();
	int v38 = LockscreenCredential.getType();
	boolean v36 = phiInstruction;
	boolean v40 = p1.isNone();
	boolean v41 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v43 = LockSettingsService.getGateKeeperService();
	byte[] v44 = p1.getCredential();
	GateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);
	VerifyCredentialResponse v47 = LockSettingsService.convertResponse(phiInstruction);
	boolean v48 = phiInstruction.getShouldReEnroll();
	int v49 = v47.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v53 = p1.getCredential();
	LockSettingsService.unlockKeystore(v53, p2);
	byte[] v61 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v61);
	boolean v63 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v65 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v39 = v47;
	int v67 = this.mResponseCode;
	Message v69 = this.mHandler.obtainMessage(5, p2, 0);
	v69.sendToTarget();
	VerifyCredentialResponse v6 = v39;
	Binder.restoreCallingIdentity(v5);
	p0.scheduleGc();
	return v6;
}
This is path 3 for the API with depth 2:
public VerifyCredentialResponse verifyCredential(LockscreenCredential p1, int p2, int p3){
	boolean v1 = phiInstruction;
	boolean v3 = phiInstruction;
	long v5 = Binder.clearCallingIdentity();
	boolean v7 = p1.isNone();
	ContentResolver v8 = this.mContext.getContentResolver();
	int v10 = Settings$Global.getInt(v8, "device_provisioned", 0);
	int v9 = v10;
	boolean v12 = this.mInjector.hasEnrolledBiometrics(p2);
	boolean v21 = LockSettingsService.isSyntheticPasswordBasedCredentialLocked(p2);
	long v22 = LockSettingsService.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v23 = LockSettingsService.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v24 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v23, v22, p1, p2, p3);
	int v25 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v26 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v26);
	IGateKeeperService v28 = LockSettingsService.getGateKeeperService();
	VerifyCredentialResponse v29 = this.mSpManager.verifyChallenge(v28, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v30 = v29.getResponseCode();
	VerifyCredentialResponse v11 = VerifyCredentialResponse.ERROR;
	LockSettingsStorage$CredentialHash v33 = LockSettingsStorage.readPasswordHashIfExists(p2);
	LockSettingsStorage$CredentialHash v34 = LockSettingsStorage.readPatternHashIfExists(p2);
	LockSettingsStorage$CredentialHash v35 = LockSettingsStorage$CredentialHash.createEmptyHash();
	LockSettingsStorage$CredentialHash v32 = v35;
	int v37 = LockscreenCredential.getType();
	int v38 = LockscreenCredential.getType();
	boolean v36 = phiInstruction;
	boolean v40 = p1.isNone();
	boolean v41 = p1.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v43 = LockSettingsService.getGateKeeperService();
	byte[] v44 = p1.getCredential();
	GateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);
	VerifyCredentialResponse v47 = LockSettingsService.convertResponse(phiInstruction);
	boolean v48 = phiInstruction.getShouldReEnroll();
	int v49 = v47.getResponseCode();
	p3.onCredentialVerified();
	LockSettingsService.setUserPasswordMetrics(p1, p2);
	byte[] v53 = p1.getCredential();
	LockSettingsService.unlockKeystore(v53, p2);
	byte[] v61 = LockSettingsService.secretFromCredential(p1);
	LockSettingsService.unlockUser(p2, v61);
	boolean v63 = LockSettingsService.isProfileWithSeparatedLock(p2);
	LockSettingsService.setDeviceUnlockedForUser(p2);
	boolean v65 = LockSettingsService.setLockCredentialInternal(p1, p1, p2, 0);
	LockSettingsService.sendCredentialsOnUnlockIfRequired(p1, p2);
	VerifyCredentialResponse v39 = v47;
	int v67 = this.mResponseCode;
	Message v69 = this.mHandler.obtainMessage(5, p2, 0);
	v69.sendToTarget();
	VerifyCredentialResponse v6 = v39;
	Binder.restoreCallingIdentity(v5);
	p0.scheduleGc();
	return v6;
}

and the following sink code:
['SyntheticPasswordManager$AuthenticationResult v24 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v23, v22, p1, p2, p3);\nVerifyCredentialResponse v29 = this.mSpManager.verifyChallenge(v28, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);\nLockSettingsService.unlockKeystore(p1.getCredential(), p2);\nLockSettingsService.unlockUser(LockSettingsService.secretFromCredential(p1), p2);', 'IGateKeeperService v43 = LockSettingsService.getGateKeeperService();\nbyte[] v44 = p1.getCredential();\nGateKeeperResponse v45 = v43.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v44);']

The method verifyCredential has the following similar APIs:

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9948545098304749
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v40 = LockSettingsService.getGateKeeperService();
byte[] v41 = p1.getCredential();
GateKeeperResponse v42 = v40.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v41);

- API Name: tryUnlockWithCachedUnifiedChallenge(I)Z with Similarity Score: 0.9935137033462524
  - Access Control Level: SYS_OR_SIG and the following code:
IGateKeeperService v53 = LockSettingsService.getGateKeeperService();
byte[] v54 = p1.getCredential();
GateKeeperResponse v55 = v53.verifyChallenge(p2, 0, LockSettingsStorage$CredentialHash.hash, v54);

