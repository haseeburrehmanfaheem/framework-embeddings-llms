This is path 1 for the API with depth 2:
public boolean getBoolean(String p1, boolean p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v3 = "lock_pattern_autolock".equals(p1);
	LockSettingsStorage$PersistentData v6 = this.mStorage.readPersistentDataBlock();
	boolean v5 = phiInstruction;
	long v8 = LockSettingsService.getLong("sp-handle", 0, p1);
	long v7 = v8;
	byte[] v10 = SyntheticPasswordManager.loadState("pwd", v7, p1);
	int v9 = -1;
	long v18 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
	int v17 = v18;
	boolean v20 = LockPatternUtils.isQualityAlphabeticPassword(v17);
	boolean v21 = LockPatternUtils.isQualityNumericPin(v17);
	int v19 = 3;
	int v4 = v19;
	return phiInstruction;
}

This is path 2 for the API with depth 2:
public boolean getBoolean(String p1, boolean p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v3 = "lock_pattern_autolock".equals(p1);
	LockSettingsStorage$PersistentData v6 = this.mStorage.readPersistentDataBlock();
	boolean v5 = phiInstruction;
	long v8 = LockSettingsService.getLong("sp-handle", 0, p1);
	long v7 = v8;
	byte[] v10 = SyntheticPasswordManager.loadState("pwd", v7, p1);
	int v9 = -1;
	long v18 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
	int v17 = v18;
	boolean v20 = LockPatternUtils.isQualityAlphabeticPassword(v17);
	boolean v21 = LockPatternUtils.isQualityNumericPin(v17);
	int v19 = 3;
	int v4 = v19;
	return phiInstruction;
}

This is path 3 for the API with depth 2:
public boolean getBoolean(String p1, boolean p2, int p3){
	int v2 = Binder.getCallingUid();
	boolean v3 = "lock_pattern_autolock".equals(p1);
	LockSettingsStorage$PersistentData v6 = this.mStorage.readPersistentDataBlock();
	boolean v5 = phiInstruction;
	long v8 = LockSettingsService.getLong("sp-handle", 0, p1);
	long v7 = v8;
	byte[] v10 = SyntheticPasswordManager.loadState("pwd", v7, p1);
	int v9 = -1;
	long v18 = this.mStorage.getLong("lockscreen.password_type", 0, p1);
	int v17 = v18;
	boolean v20 = LockPatternUtils.isQualityAlphabeticPassword(v17);
	boolean v21 = LockPatternUtils.isQualityNumericPin(v17);
	int v19 = 3;
	int v4 = v19;
	return phiInstruction;
}
