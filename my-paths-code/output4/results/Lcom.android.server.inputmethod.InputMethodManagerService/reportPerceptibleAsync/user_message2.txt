The method reportPerceptibleAsync has the following code snippet:

This is path 1 for the API with depth 2:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	String v11 = Debug.getCallers(10);
	boolean v3 = 0;
	long v15 = Binder.clearCallingIdentity();
	this.mCurPerceptible = p2;
	IBinder v18 = this.mBindingController.getCurToken();
	IBinder v17 = v18;
	long v19 = Binder.clearCallingIdentity();
	AlertDialog v21 = this.mMenuController.getSwitchingDialogLocked();
	boolean v22 = this.mWindowManagerInternal.isKeyguardShowingAndNotOccluded();
	boolean v23 = this.mKeyguardManager.isKeyguardSecure();
	boolean v24 = this.mWindowManagerInternal.isHardKeyboardAvailable();
	boolean v20 = 0;
	IBinder v26 = this.mBindingController.getCurToken();
	IBinder v25 = v26;
	StatusBarManagerService.enforceStatusBar();
	StatusBarManagerService$UiState v29 = StatusBarManagerService.getUiState(this.mCurTokenDisplayId);
	StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v29, phiInstruction, p2, v20, v25);
	StatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v25,phiInstruction,p2,v20);
	boolean v33 = this.mHandler.post(v31);
	String v35 = this.mBindingController.getSelectedMethodId();
	String v34 = v35;
	Object v36 = this.mMethodMap.get(v34);
	CharSequence v37 = this.mRes.getText(17041471);
	PackageManager v39 = this.mContext.getPackageManager();
	CharSequence v40 = v36.loadLabel(v39);
	CharSequence v41 = new CharSequence(2);
	String v42 = v36.getPackageName();
	ServiceInfo v43 = v36.getServiceInfo();
	CharSequence v44 = this.mCurrentSubtype.getDisplayName(this.mContext, v42, ServiceInfo.applicationInfo);
	boolean v45 = TextUtils.isEmpty(v40);
	StringBuilder v46 = new StringBuilder();
	StringBuilder v48 = v46.append(" - ");
	StringBuilder v49 = v46.append(v40);
	String v50 = v46.toString();
	CharSequence v51 = TextUtils.concat(v41);
	CharSequence v38 = phiInstruction;
	Notification$Builder v52 = this.mImeSwitcherNotification.setContentTitle(v37);
	Notification$Builder v53 = v52.setContentText(v38);
	Notification$Builder v54 = v53.setContentIntent(this.mImeSwitchPendingIntent);
	boolean v55 = this.mIWindowManager.hasNavigationBar(0);
	Notification v56 = this.mImeSwitcherNotification.build();
	this.mNotificationManager.notifyAsUser(0, 8, v56, UserHandle.ALL);
	this.mNotificationShown = 1;
	Binder.restoreCallingIdentity(v19);
	Binder.restoreCallingIdentity(v15);
	return;
}
This is path 2 for the API with depth 2:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	String v11 = Debug.getCallers(10);
	boolean v3 = 0;
	long v15 = Binder.clearCallingIdentity();
	this.mCurPerceptible = p2;
	IBinder v18 = this.mBindingController.getCurToken();
	IBinder v17 = v18;
	long v19 = Binder.clearCallingIdentity();
	AlertDialog v21 = this.mMenuController.getSwitchingDialogLocked();
	boolean v22 = this.mWindowManagerInternal.isKeyguardShowingAndNotOccluded();
	boolean v23 = this.mKeyguardManager.isKeyguardSecure();
	boolean v24 = this.mWindowManagerInternal.isHardKeyboardAvailable();
	boolean v20 = 0;
	IBinder v26 = this.mBindingController.getCurToken();
	IBinder v25 = v26;
	StatusBarManagerService.enforceStatusBar();
	StatusBarManagerService$UiState v29 = StatusBarManagerService.getUiState(this.mCurTokenDisplayId);
	StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v29, phiInstruction, p2, v20, v25);
	StatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v25,phiInstruction,p2,v20);
	boolean v33 = this.mHandler.post(v31);
	String v35 = this.mBindingController.getSelectedMethodId();
	String v34 = v35;
	Object v36 = this.mMethodMap.get(v34);
	CharSequence v37 = this.mRes.getText(17041471);
	PackageManager v39 = this.mContext.getPackageManager();
	CharSequence v40 = v36.loadLabel(v39);
	CharSequence v41 = new CharSequence(2);
	String v42 = v36.getPackageName();
	ServiceInfo v43 = v36.getServiceInfo();
	CharSequence v44 = this.mCurrentSubtype.getDisplayName(this.mContext, v42, ServiceInfo.applicationInfo);
	boolean v45 = TextUtils.isEmpty(v40);
	StringBuilder v46 = new StringBuilder();
	StringBuilder v48 = v46.append(" - ");
	StringBuilder v49 = v46.append(v40);
	String v50 = v46.toString();
	CharSequence v51 = TextUtils.concat(v41);
	CharSequence v38 = phiInstruction;
	Notification$Builder v52 = this.mImeSwitcherNotification.setContentTitle(v37);
	Notification$Builder v53 = v52.setContentText(v38);
	Notification$Builder v54 = v53.setContentIntent(this.mImeSwitchPendingIntent);
	boolean v55 = this.mIWindowManager.hasNavigationBar(0);
	Notification v56 = this.mImeSwitcherNotification.build();
	this.mNotificationManager.notifyAsUser(0, 8, v56, UserHandle.ALL);
	Binder.restoreCallingIdentity(v19);
	Binder.restoreCallingIdentity(v15);
	return;
}
This is path 3 for the API with depth 2:
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	boolean v3 = 1;
	long v8 = Binder.clearCallingIdentity();
	this.mCurPerceptible = p2;
	IBinder v11 = this.mBindingController.getCurToken();
	IBinder v10 = v11;
	long v12 = Binder.clearCallingIdentity();
	AlertDialog v14 = this.mMenuController.getSwitchingDialogLocked();
	boolean v15 = this.mWindowManagerInternal.isKeyguardShowingAndNotOccluded();
	boolean v16 = this.mKeyguardManager.isKeyguardSecure();
	boolean v17 = this.mWindowManagerInternal.isHardKeyboardAvailable();
	boolean v13 = 0;
	IBinder v19 = this.mBindingController.getCurToken();
	IBinder v18 = v19;
	StatusBarManagerService.enforceStatusBar();
	StatusBarManagerService$UiState v22 = StatusBarManagerService.getUiState(this.mCurTokenDisplayId);
	StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v22, phiInstruction, p2, v13, v18);
	StatusBarManagerService$$ExternalSyntheticLambda1 v24 = new StatusBarManagerService$$ExternalSyntheticLambda1(StatusBarManagerService,this.mCurTokenDisplayId,v18,phiInstruction,p2,v13);
	boolean v26 = this.mHandler.post(v24);
	String v28 = this.mBindingController.getSelectedMethodId();
	String v27 = v28;
	Object v29 = this.mMethodMap.get(v27);
	CharSequence v30 = this.mRes.getText(17041471);
	PackageManager v32 = this.mContext.getPackageManager();
	CharSequence v33 = v29.loadLabel(v32);
	CharSequence v34 = new CharSequence(2);
	String v35 = v29.getPackageName();
	ServiceInfo v36 = v29.getServiceInfo();
	CharSequence v37 = this.mCurrentSubtype.getDisplayName(this.mContext, v35, ServiceInfo.applicationInfo);
	boolean v38 = TextUtils.isEmpty(v33);
	StringBuilder v39 = new StringBuilder();
	StringBuilder v41 = v39.append(" - ");
	StringBuilder v42 = v39.append(v33);
	String v43 = v39.toString();
	CharSequence v44 = TextUtils.concat(v34);
	CharSequence v31 = phiInstruction;
	Notification$Builder v45 = this.mImeSwitcherNotification.setContentTitle(v30);
	Notification$Builder v46 = v45.setContentText(v31);
	Notification$Builder v47 = v46.setContentIntent(this.mImeSwitchPendingIntent);
	boolean v48 = this.mIWindowManager.hasNavigationBar(0);
	Notification v49 = this.mImeSwitcherNotification.build();
	this.mNotificationManager.notifyAsUser(0, 8, v49, UserHandle.ALL);
	this.mNotificationShown = 1;
	Binder.restoreCallingIdentity(v12);
	Binder.restoreCallingIdentity(v8);
	return;
}

and the following sink code:
['this.mCurPerceptible = p2;\nIBinder v18 = this.mBindingController.getCurToken();\nStatusBarManagerService.enforceStatusBar();\nStatusBarManagerService$$ExternalSyntheticLambda1 v31 = new StatusBarManagerService$$ExternalSyntheticLambda1(...);\nboolean v33 = this.mHandler.post(v31);', 'Notification$Builder v52 = this.mImeSwitcherNotification.setContentTitle(v37);\nNotification$Builder v53 = v52.setContentText(v38);\nthis.mNotificationManager.notifyAsUser(0, 8, v56, UserHandle.ALL);']

The method reportPerceptibleAsync has the following similar APIs:

- API Name: disable2(ILandroid/os/IBinder;Ljava/lang/String;)V with Similarity Score: 0.7009677290916443
  - Access Control Level: SYS_OR_SIG and the following code:
int v6 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 1);
int v7 = StatusBarManagerService.gatherDisableActionsLocked(this.mCurrentUserId, 2);
StatusBarManagerService$$ExternalSyntheticLambda6 v11 = new StatusBarManagerService$$ExternalSyntheticLambda6(StatusBarManagerService,v6);
boolean v13 = this.mHandler.post(v11);
this.mBar.disable(0, v6, v7);

