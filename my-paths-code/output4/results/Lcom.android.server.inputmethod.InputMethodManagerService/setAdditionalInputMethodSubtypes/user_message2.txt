The method setAdditionalInputMethodSubtypes has the following code snippet:

This is path 1 for the API with depth 2:
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	ArrayList v2 = new ArrayList();
	String v12 = Debug.getCallers(10);
	boolean v4 = 0;
	Object v16 = this.mMethodMap.get(p1);
	int v17 = Binder.getCallingUid();
	String v18 = this.mIPackageManager.getPackagesForUid(v17);
	String v19 = v16.getPackageName();
	boolean v20 = v18[phiInstruction].equals(v19);
	String v21 = v16.getId();
	Object v22 = this.mAdditionalSubtypeMap.put(v21, v2);
	int v23 = this.mCurrentUserId;
	File v26 = new File(v27,"system");
	File v27 = Environment.getDataDirectory();
	File v29 = new File(phiInstruction,"inputmethod");
	File v25 = v29;
	boolean v31 = this.mAdditionalSubtypeMap.isEmpty();
	boolean v32 = v25.exists();
	File v34 = new File(v25,"subtypes.xml");
	AtomicFile v36 = new AtomicFile(v34,"input-subtypes");
	AtomicFile v33 = v36;
	boolean v38 = v33.exists();
	v33.delete();
	File v40 = FileUtils.listFilesOrEmpty(v25);
	boolean v41 = v25.delete();
	long v48 = Binder.clearCallingIdentity();
	p0.buildInputMethodListLocked(0);
	Binder.restoreCallingIdentity(v48);
	return;
}
This is path 2 for the API with depth 2:
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	ArrayList v2 = new ArrayList();
	String v12 = Debug.getCallers(10);
	boolean v4 = 0;
	Object v16 = this.mMethodMap.get(p1);
	int v17 = Binder.getCallingUid();
	String v18 = this.mIPackageManager.getPackagesForUid(v17);
	String v19 = v16.getPackageName();
	boolean v20 = v18[phiInstruction].equals(v19);
	String v21 = v16.getId();
	Object v22 = this.mAdditionalSubtypeMap.put(v21, v2);
	int v23 = this.mCurrentUserId;
	File v26 = new File(v27,"system");
	File v27 = Environment.getDataDirectory();
	File v29 = new File(phiInstruction,"inputmethod");
	File v25 = v29;
	boolean v31 = this.mAdditionalSubtypeMap.isEmpty();
	boolean v32 = v25.exists();
	File v34 = new File(v25,"subtypes.xml");
	AtomicFile v36 = new AtomicFile(v34,"input-subtypes");
	AtomicFile v33 = v36;
	boolean v38 = v33.exists();
	File v39 = FileUtils.listFilesOrEmpty(v25);
	boolean v40 = v25.delete();
	long v47 = Binder.clearCallingIdentity();
	p0.buildInputMethodListLocked(0);
	Binder.restoreCallingIdentity(v47);
	return;
}
This is path 3 for the API with depth 2:
public void setAdditionalInputMethodSubtypes(String p1, InputMethodSubtype p2){
	boolean v1 = TextUtils.isEmpty(p1);
	ArrayList v2 = new ArrayList();
	boolean v4 = 1;
	Object v9 = this.mMethodMap.get(p1);
	int v10 = Binder.getCallingUid();
	String v11 = this.mIPackageManager.getPackagesForUid(v10);
	String v12 = v9.getPackageName();
	boolean v13 = v11[phiInstruction].equals(v12);
	String v14 = v9.getId();
	Object v15 = this.mAdditionalSubtypeMap.put(v14, v2);
	int v16 = this.mCurrentUserId;
	File v19 = new File(v20,"system");
	File v20 = Environment.getDataDirectory();
	File v22 = new File(phiInstruction,"inputmethod");
	File v18 = v22;
	boolean v24 = this.mAdditionalSubtypeMap.isEmpty();
	boolean v25 = v18.exists();
	File v27 = new File(v18,"subtypes.xml");
	AtomicFile v29 = new AtomicFile(v27,"input-subtypes");
	AtomicFile v26 = v29;
	boolean v31 = v26.exists();
	v26.delete();
	File v33 = FileUtils.listFilesOrEmpty(v18);
	boolean v34 = v18.delete();
	long v41 = Binder.clearCallingIdentity();
	p0.buildInputMethodListLocked(0);
	Binder.restoreCallingIdentity(v41);
	return;
}

and the following sink code:
['Object v16 = this.mMethodMap.get(p1);\nString v21 = v16.getId();\nObject v22 = this.mAdditionalSubtypeMap.put(v21, v2);', 'ArrayList v2 = new ArrayList();\nObject v22 = this.mAdditionalSubtypeMap.put(v21, v2);', 'File v29 = new File(phiInstruction,"inputmethod");\nFile v34 = new File(v25,"subtypes.xml");\nAtomicFile v36 = new AtomicFile(v34,"input-subtypes");\nv33.delete();']

The method setAdditionalInputMethodSubtypes has the following similar APIs:

- API Name: getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype; with Similarity Score: 0.7086005210876465
  - Access Control Level: SYS_OR_SIG and the following code:
List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodsAndSubtypeListLocked();
List v16 = InputMethodUtils$InputMethodSettings.loadInputMethodAndSubtypeHistoryLocked();
Object v19 = v17.next();
String v22 = InputMethodUtils$InputMethodSettings.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v15, Pair.first, Pair.second);
Pair v24 = new Pair(Pair.first,v22);
Object v28 = this.mMethodMap.get(Pair.first);
int v29 = Integer.parseInt(Pair.second);
InputMethodSubtype v32 = v28.getSubtypeAt(phiInstruction);

