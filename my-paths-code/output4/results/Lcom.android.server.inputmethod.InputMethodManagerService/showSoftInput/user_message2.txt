The method showSoftInput has the following code snippet:

This is path 1 for the API with depth 2:
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	boolean v5 = ActivityThread.isSystem();
	boolean v4 = v5;
	ImeTracingServerImpl v6 = new ImeTracingServerImpl();
	this.sInstance = phiInstruction;
	ImeTracing v3 = this.sInstance;
	v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
	boolean v9 = p0.calledFromValidUserLocked();
	long v10 = Binder.clearCallingIdentity();
	IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v13 = p1.asBinder();
	IBinder v14 = p1.asBinder();
	Object v15 = this.mClients.get(v14);
	int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	boolean v16 = phiInstruction;
	Integer v19 = Integer.valueOf(v2);
	boolean v11 = 0;
	this.mShowRequested = 1;
	this.mShowExplicitlyRequested = 1;
	this.mShowForced = 1;
	long v24 = SystemClock.uptimeMillis();
	Object v25 = new Object(3);
	String v26 = InputMethodBindingController.getSelectedMethodId();
	Long v27 = Long.valueOf((v24 - this.mLastBindTime));
	Integer v28 = Integer.valueOf(1);
	int v29 = EventLog.writeEvent(32000, v25);
	InputMethodBindingController.unbindMainConnection();
	boolean v32 = InputMethodBindingController.bindCurrentInputMethodServiceMainConnection();
	IInputMethodInvoker v34 = this.mBindingController.getCurMethod();
	IInputMethodInvoker v33 = v34;
	Binder v35 = new Binder();
	Object v37 = this.mShowRequestWindowMap.put(v35, p2);
	int v38 = InputMethodManagerService.getImeShowFlagsLocked();
	this.mTarget.showSoftInput(v35, v38, p3);
	IInputMethodInvoker.logRemoteException(caughtException);
	boolean v39 = 0;
	WindowManagerInternal$ImeTargetInfo v43 = this.mWindowManagerInternal.onToggleImeRequested(1, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);
	InputMethodManagerService$SoftInputShowHideHistory$Entry v44 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
	this.mSoftInputShowHideHistory.addEntry(v44);
	this.mInputShown = 1;
	boolean v22 = 1;
	Binder.restoreCallingIdentity(v10);
	Trace.traceEnd(32);
	return v22;
}
This is path 2 for the API with depth 2:
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	boolean v5 = ActivityThread.isSystem();
	boolean v4 = v5;
	ImeTracingClientImpl v6 = new ImeTracingClientImpl();
	this.sInstance = phiInstruction;
	ImeTracing v3 = this.sInstance;
	v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
	boolean v9 = p0.calledFromValidUserLocked();
	long v10 = Binder.clearCallingIdentity();
	IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v13 = p1.asBinder();
	IBinder v14 = p1.asBinder();
	Object v15 = this.mClients.get(v14);
	int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	boolean v16 = phiInstruction;
	Integer v19 = Integer.valueOf(v2);
	boolean v11 = 0;
	this.mShowRequested = 1;
	this.mShowExplicitlyRequested = 1;
	this.mShowForced = 1;
	long v24 = SystemClock.uptimeMillis();
	Object v25 = new Object(3);
	String v26 = InputMethodBindingController.getSelectedMethodId();
	Long v27 = Long.valueOf((v24 - this.mLastBindTime));
	Integer v28 = Integer.valueOf(1);
	int v29 = EventLog.writeEvent(32000, v25);
	InputMethodBindingController.unbindMainConnection();
	boolean v32 = InputMethodBindingController.bindCurrentInputMethodServiceMainConnection();
	IInputMethodInvoker v34 = this.mBindingController.getCurMethod();
	IInputMethodInvoker v33 = v34;
	Binder v35 = new Binder();
	Object v37 = this.mShowRequestWindowMap.put(v35, p2);
	int v38 = InputMethodManagerService.getImeShowFlagsLocked();
	this.mTarget.showSoftInput(v35, v38, p3);
	IInputMethodInvoker.logRemoteException(caughtException);
	boolean v39 = 0;
	WindowManagerInternal$ImeTargetInfo v43 = this.mWindowManagerInternal.onToggleImeRequested(1, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);
	InputMethodManagerService$SoftInputShowHideHistory$Entry v44 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
	this.mSoftInputShowHideHistory.addEntry(v44);
	this.mInputShown = 1;
	boolean v22 = 1;
	Binder.restoreCallingIdentity(v10);
	Trace.traceEnd(32);
	return v22;
}
This is path 3 for the API with depth 2:
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	boolean v5 = ActivityThread.isSystem();
	boolean v4 = v5;
	ImeTracingServerImpl v6 = new ImeTracingServerImpl();
	this.sInstance = phiInstruction;
	ImeTracing v3 = this.sInstance;
	v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
	boolean v9 = p0.calledFromValidUserLocked();
	long v10 = Binder.clearCallingIdentity();
	IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v13 = p1.asBinder();
	IBinder v14 = p1.asBinder();
	Object v15 = this.mClients.get(v14);
	int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	boolean v16 = phiInstruction;
	Integer v19 = Integer.valueOf(v2);
	boolean v11 = 0;
	this.mShowRequested = 1;
	this.mShowExplicitlyRequested = 1;
	this.mShowForced = 1;
	long v24 = SystemClock.uptimeMillis();
	Object v25 = new Object(3);
	String v26 = InputMethodBindingController.getSelectedMethodId();
	Long v27 = Long.valueOf((v24 - this.mLastBindTime));
	Integer v28 = Integer.valueOf(1);
	int v29 = EventLog.writeEvent(32000, v25);
	InputMethodBindingController.unbindMainConnection();
	boolean v32 = InputMethodBindingController.bindCurrentInputMethodServiceMainConnection();
	IInputMethodInvoker v34 = this.mBindingController.getCurMethod();
	IInputMethodInvoker v33 = v34;
	Binder v35 = new Binder();
	Object v37 = this.mShowRequestWindowMap.put(v35, p2);
	int v38 = InputMethodManagerService.getImeShowFlagsLocked();
	this.mTarget.showSoftInput(v35, v38, p3);
	IInputMethodInvoker.logRemoteException(caughtException);
	boolean v39 = 0;
	WindowManagerInternal$ImeTargetInfo v43 = this.mWindowManagerInternal.onToggleImeRequested(1, this.mCurFocusedWindow, p1, this.mCurTokenDisplayId);
	InputMethodManagerService$SoftInputShowHideHistory$Entry v44 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
	this.mSoftInputShowHideHistory.addEntry(v44);
	this.mInputShown = 1;
	boolean v22 = 1;
	Binder.restoreCallingIdentity(v10);
	Trace.traceEnd(32);
	return v22;
}

and the following sink code:
['this.mShowRequested = 1;\nthis.mShowExplicitlyRequested = 1;\nthis.mShowForced = 1;', 'int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);\nthis.mTarget.showSoftInput(v35, v38, p3);', 'Object v37 = this.mShowRequestWindowMap.put(v35, p2);\nIInputMethodInvoker v34 = this.mBindingController.getCurMethod();\nboolean v32 = InputMethodBindingController.bindCurrentInputMethodServiceMainConnection();', 'InputMethodManagerService$SoftInputShowHideHistory$Entry v44 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p4,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);\nthis.mSoftInputShowHideHistory.addEntry(v44);']

The method showSoftInput has the following similar APIs:

- API Name: getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List; with Similarity Score: 0.7430369257926941
  - Access Control Level: SYS_OR_SIG and the following code:
String v12 = this.mBindingController.getSelectedMethodId();
Object v13 = this.mMethodMap.get(v11);
List v15 = InputMethodUtils$InputMethodSettings.getEnabledInputMethodSubtypeListLocked(phiInstruction);
ArrayList v18 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v17, phiInstruction);
List v19 = InputMethodSubtype.sort(this.mContext, 0, phiInstruction, phiInstruction);
return v9;

- API Name: startInputOrWindowGainedFocus(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;Lcom/android/internal/inputmethod/IRemoteAccessibilityInputConnection;ILandroid/window/ImeOnBackInvokedDispatcher;)Lcom/android/internal/inputmethod/InputBindResult; with Similarity Score: 0.7250988483428955
  - Access Control Level: SYS_OR_SIG and the following code:
int v8 = EditorInfo.targetInputMethodUser.getIdentifier();
boolean v9 = this.mUserManagerInternal.isUserRunning(v8);

