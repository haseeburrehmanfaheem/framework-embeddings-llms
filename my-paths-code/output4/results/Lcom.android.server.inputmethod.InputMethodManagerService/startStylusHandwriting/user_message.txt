This is path 1 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	boolean v4 = ActivityThread.isSystem();
	boolean v3 = v4;
	ImeTracingServerImpl v5 = new ImeTracingServerImpl();
	this.sInstance = phiInstruction;
	ImeTracing v2 = this.sInstance;
	v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
	int v8 = Binder.getCallingUid();
	boolean v9 = p0.calledFromValidUserLocked();
	long v10 = Binder.clearCallingIdentity();
	IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v13 = p1.asBinder();
	IBinder v14 = p1.asBinder();
	Object v15 = this.mClients.get(v14);
	int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	boolean v16 = phiInstruction;
	Integer v19 = Integer.valueOf(v8);
	boolean v11 = 0;
	boolean v22 = this.mBindingController.supportsStylusHandwriting();
	OptionalInt v23 = this.mHwController.getCurrentRequestId();
	boolean v24 = v23.isPresent();
	boolean v25 = this.mHwController.isStylusGestureOngoing();
	IInputMethodInvoker v27 = this.mCurMethod;
	IInputMethodInvoker v26 = v27;
	int v28 = v23.getAsInt();
	this.mTarget.canStartStylusHandwriting(v28);
	String v35 = IInputMethodInvoker.getCallerMethodName();
	Binder.restoreCallingIdentity(v10);
	Trace.traceEnd(32);
	return;
}

This is path 2 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	boolean v4 = ActivityThread.isSystem();
	boolean v3 = v4;
	ImeTracingClientImpl v5 = new ImeTracingClientImpl();
	this.sInstance = phiInstruction;
	ImeTracing v2 = this.sInstance;
	v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
	int v8 = Binder.getCallingUid();
	boolean v9 = p0.calledFromValidUserLocked();
	long v10 = Binder.clearCallingIdentity();
	IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v13 = p1.asBinder();
	IBinder v14 = p1.asBinder();
	Object v15 = this.mClients.get(v14);
	int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	boolean v16 = phiInstruction;
	Integer v19 = Integer.valueOf(v8);
	boolean v11 = 0;
	boolean v22 = this.mBindingController.supportsStylusHandwriting();
	OptionalInt v23 = this.mHwController.getCurrentRequestId();
	boolean v24 = v23.isPresent();
	boolean v25 = this.mHwController.isStylusGestureOngoing();
	IInputMethodInvoker v27 = this.mCurMethod;
	IInputMethodInvoker v26 = v27;
	int v28 = v23.getAsInt();
	this.mTarget.canStartStylusHandwriting(v28);
	String v35 = IInputMethodInvoker.getCallerMethodName();
	Binder.restoreCallingIdentity(v10);
	Trace.traceEnd(32);
	return;
}

This is path 3 for the API with depth 2:
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	boolean v4 = ActivityThread.isSystem();
	boolean v3 = v4;
	ImeTracingServerImpl v5 = new ImeTracingServerImpl();
	this.sInstance = phiInstruction;
	ImeTracing v2 = this.sInstance;
	v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
	int v8 = Binder.getCallingUid();
	boolean v9 = p0.calledFromValidUserLocked();
	long v10 = Binder.clearCallingIdentity();
	IBinder v12 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v13 = p1.asBinder();
	IBinder v14 = p1.asBinder();
	Object v15 = this.mClients.get(v14);
	int v17 = this.mWindowManagerInternal.hasInputMethodClientFocus(this.mCurFocusedWindow, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	boolean v16 = phiInstruction;
	Integer v19 = Integer.valueOf(v8);
	boolean v11 = 0;
	boolean v22 = this.mBindingController.supportsStylusHandwriting();
	OptionalInt v23 = this.mHwController.getCurrentRequestId();
	boolean v24 = v23.isPresent();
	boolean v25 = this.mHwController.isStylusGestureOngoing();
	IInputMethodInvoker v27 = this.mCurMethod;
	IInputMethodInvoker v26 = v27;
	int v28 = v23.getAsInt();
	this.mTarget.canStartStylusHandwriting(v28);
	String v35 = IInputMethodInvoker.getCallerMethodName();
	Binder.restoreCallingIdentity(v10);
	Trace.traceEnd(32);
	return;
}
