The method hasShareTargets has the following code snippet:

This is path 1 for the API with depth 2:
public boolean hasShareTargets(String p1, String p2, int p3){
	boolean v5 = this.mUnlockedUsers.get(p1);
	boolean v6 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	boolean v4 = v6;
	boolean v9 = ShortcutService.isUserUnlockedL(p2);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p2;
	Object v11 = this.mUsers.get(p2);
	ShortcutUser v12 = ShortcutService.loadUserLocked(p2);
	ShortcutUser v13 = new ShortcutUser(ShortcutService,p2);
	this.mUsers.put(p2, phiInstruction);
	ShortcutService.checkPackageChanges(p2);
	ShortcutUser v8 = phiInstruction;
	ShortcutPackage v18 = ShortcutUser.getPackageShortcutsIfExists(p1);
	ShortcutPackage v19 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
	Object v21 = this.mPackages.put(p1, v19);
	ShortcutPackage v17 = phiInstruction;
	ShortcutPackage v7 = v17;
	boolean v22 = v7.hasShareTargets();
	return v22;
}
This is path 2 for the API with depth 2:
public boolean hasShareTargets(String p1, String p2, int p3){
	boolean v5 = this.mUnlockedUsers.get(p1);
	boolean v4 = 1;
	boolean v8 = ShortcutService.isUserUnlockedL(p2);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p2;
	Object v10 = this.mUsers.get(p2);
	ShortcutUser v11 = ShortcutService.loadUserLocked(p2);
	ShortcutUser v12 = new ShortcutUser(ShortcutService,p2);
	this.mUsers.put(p2, phiInstruction);
	ShortcutService.checkPackageChanges(p2);
	ShortcutUser v7 = phiInstruction;
	ShortcutPackage v17 = ShortcutUser.getPackageShortcutsIfExists(p1);
	ShortcutPackage v18 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
	Object v20 = this.mPackages.put(p1, v18);
	ShortcutPackage v16 = phiInstruction;
	ShortcutPackage v6 = v16;
	boolean v21 = v6.hasShareTargets();
	return v21;
}
This is path 3 for the API with depth 2:
public boolean hasShareTargets(String p1, String p2, int p3){
	boolean v5 = this.mUnlockedUsers.get(p1);
	boolean v6 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	boolean v4 = v6;
	boolean v9 = ShortcutService.isUserUnlockedL(p2);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p2;
	Object v11 = this.mUsers.get(p2);
	ShortcutUser v12 = ShortcutService.loadUserLocked(p2);
	this.mUsers.put(p2, phiInstruction);
	ShortcutService.checkPackageChanges(p2);
	ShortcutUser v8 = phiInstruction;
	ShortcutPackage v16 = ShortcutUser.getPackageShortcutsIfExists(p1);
	ShortcutPackage v17 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);
	Object v19 = this.mPackages.put(p1, v17);
	ShortcutPackage v15 = phiInstruction;
	ShortcutPackage v7 = v15;
	boolean v20 = v7.hasShareTargets();
	return v20;
}

and the following sink code:
['boolean v5 = this.mUnlockedUsers.get(p1);\nboolean v6 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);\nShortcutService.wtf("User still locked");\nthis.mLastLockedUser = p2;\nObject v11 = this.mUsers.get(p2);\nShortcutUser v12 = ShortcutService.loadUserLocked(p2);\nthis.mUsers.put(p2, phiInstruction);\nShortcutPackage v18 = new ShortcutPackage(ShortcutUser,this.mUserId,p1);\nObject v21 = this.mPackages.put(p1, v19);\nboolean v22 = v7.hasShareTargets();\nreturn v22;']

The method hasShareTargets has the following similar APIs:

- API Name: resetThrottling()V with Similarity Score: 0.8846415877342224
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v13 = this.mUnlockedUsers.get(p1);
this.mLastLockedUser = p1;
Object v18 = this.mUsers.get(p1);
ShortcutUser v19 = ShortcutService.loadUserLocked(p1);
this.mUsers.put(p1, phiInstruction);

- API Name: getBackupPayload(I)[B with Similarity Score: 0.8802368640899658
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v5 = p0.isUserUnlockedL(p1);
this.mLastLockedUser = p1;
Object v12 = this.mUsers.get(p1);
ShortcutUser v27 = new ShortcutUser(ShortcutService, p1);
ShortcutService.loadUserInternal(p1, v17, 0)
return v111;

