The method applyRestore has the following code snippet:

This is path 1 for the API with depth 2:
public void applyRestore(byte[] p1, int p2){
	boolean v2 = v4;
	boolean v5 = p0.isUserUnlockedL(p2);
	ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);
	boolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v10 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p1);
	File v13 = this.mService.getDumpPath();
	boolean v14 = v13.mkdirs();
	boolean v15 = v13.exists();
	StringBuilder v16 = new StringBuilder();
	boolean v12 = 0;
	boolean v9 = v12;
	ByteArrayInputStream v24 = new ByteArrayInputStream(p1);
	ShortcutUser v26 = p0.loadUserInternal(p2, v24, 1);
	ShortcutService$$ExternalSyntheticLambda7 v27 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v29 = this.mShortcutDumpFiles.save("restore-2.txt", v27);
	boolean v32 = this.mUnlockedUsers.get(p1);
	boolean v33 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	boolean v31 = v33;
	ShortcutService.wtf("User still locked", 0);
	this.mLastLockedUser = p2;
	Object v36 = this.mUsers.get(p2);
	File v38 = ShortcutService.getUserFile(p1);
	AtomicFile v39 = new AtomicFile(v38);
	FileInputStream v41 = v39.openRead();
	ShortcutUser v42 = ShortcutService.loadUserInternal(p1, v41, 0);
	File v46 = v39.getBaseFile();
	IoUtils.closeQuietly(v41);
	ShortcutUser v37 = 0;
	ShortcutUser v51 = new ShortcutUser(ShortcutService,p2);
	this.mUsers.put(p2, phiInstruction);
	boolean v55 = ShortcutService.injectIsSafeModeEnabled();
	long v56 = ShortcutService.getStatStartTime();
	ArrayList v57 = new ArrayList();
	ShortcutUser v59 = ShortcutService.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v60 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v57);
	v59.forAllPackageItems(v60);
	int v63 = v57.size();
	int v64 = v57.size();
	long v65 = v59.getLastAppScanTime();
	ShortcutService.rescanUpdatedPackagesLocked(p1, v65);
	ShortcutService.logDurationStat(8, v56);
	ShortcutService.verifyStates();
	ShortcutUser v30 = phiInstruction;
	[I v70 = new [I(1);
	[I v71 = new [I(1);
	[I v72 = new [I(1);
	this.mLaunchers.clear();
	ShortcutUser$$ExternalSyntheticLambda3 v74 = new ShortcutUser$$ExternalSyntheticLambda3(ShortcutUser,this.mService,v70);
	int v77 = this.mLaunchers.size();
	ShortcutUser$$ExternalSyntheticLambda4 v78 = new ShortcutUser$$ExternalSyntheticLambda4(ShortcutUser,this.mService,v71,v72);
	int v81 = this.mPackages.size();
	this.mLaunchers.clear();
	this.mPackages.clear();
	this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
	ShortcutService$$ExternalSyntheticLambda7 v94 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v96 = this.mShortcutDumpFiles.save("restore-3.txt", v94);
	boolean v99 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v101 = this.mUsers.get(p1);
	ShortcutUser v102 = ShortcutService.loadUserLocked(p1);
	ShortcutUser v103 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v98 = phiInstruction;
	long v108 = System.currentTimeMillis();
	long v107 = v108;
	String v109 = Build.FINGERPRINT;
	String v110 = this.mLastAppScanOsFingerprint;
	boolean v111 = v109.equals(v110);
	ShortcutService$$ExternalSyntheticLambda21 v112 = new ShortcutService$$ExternalSyntheticLambda21(ShortcutService,v98,p2);
	List v115 = ShortcutService.getInstalledPackages(p1);
	int v116 = v115.size();
	this.mLastAppScanTime = v107;
	String v118 = Build.FINGERPRINT;
	this.mLastAppScanOsFingerprint = v118;
	ShortcutService.scheduleSaveInner(p1);
	ShortcutService$$ExternalSyntheticLambda7 v122 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v124 = this.mShortcutDumpFiles.save("restore-4.txt", v122);
	ShortcutService$$ExternalSyntheticLambda8 v125 = new ShortcutService$$ExternalSyntheticLambda8(p0);
	boolean v127 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v125);
	File v130 = new File(v131,"shortcuts.xml");
	File v131 = ShortcutService.injectUserDataPath(p1);
	File v129 = v130;
	File v133 = v129.getParentFile();
	boolean v134 = v133.mkdirs();
	AtomicFile v135 = new AtomicFile(v129);
	FileOutputStream v137 = v135.startWrite();
	TypedXmlSerializer v139 = Xml.newFastSerializer();
	String v140 = StandardCharsets.UTF_8.name();
	v139.setOutput(v137, v140);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v143 = ShortcutService.getUserShortcutsLocked(p1);
	v143.saveToXml(phiInstruction, 0);
	phiInstruction.endDocument();
	v137.flush();
	v135.finishWrite(v137);
	long v149 = ShortcutService.getStatStartTime();
	ShortcutUser v150 = ShortcutService.getUserShortcutsLocked(p1);
	File v151 = ShortcutService.getUserBitmapFilePath(p1);
	File v152 = v151.listFiles();
	ShortcutService.logDurationStat(5, v149);
	File v157 = v135.getBaseFile();
	v135.failWrite(phiInstruction);
	boolean v163 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v165 = this.mUsers.get(p1);
	ShortcutUser v166 = ShortcutService.loadUserLocked(p1);
	ShortcutUser v167 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v162 = phiInstruction;
	int v172 = this.mPackages.size();
	LogMaker v173 = new LogMaker(1717);
	LogMaker v175 = v173.setType(1);
	LogMaker v176 = v175.setSubtype(this.mUserId);
	this.mMetricsLogger.write(v176);
	LogMaker v178 = v173.setType(2);
	LogMaker v179 = v178.setSubtype(phiInstruction);
	this.mMetricsLogger.write(v179);
	LogMaker v181 = v173.setType(3);
	LogMaker v182 = v181.setSubtype(phiInstruction);
	this.mMetricsLogger.write(v182);
	return;
}
This is path 2 for the API with depth 2:
public void applyRestore(byte[] p1, int p2){
	boolean v2 = v4;
	boolean v5 = p0.isUserUnlockedL(p2);
	ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);
	boolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v10 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p1);
	File v13 = this.mService.getDumpPath();
	boolean v14 = v13.mkdirs();
	boolean v15 = v13.exists();
	StringBuilder v16 = new StringBuilder();
	boolean v12 = 0;
	boolean v9 = v12;
	ByteArrayInputStream v24 = new ByteArrayInputStream(p1);
	ShortcutUser v26 = p0.loadUserInternal(p2, v24, 1);
	ShortcutService$$ExternalSyntheticLambda7 v27 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v29 = this.mShortcutDumpFiles.save("restore-2.txt", v27);
	boolean v32 = this.mUnlockedUsers.get(p1);
	boolean v31 = 1;
	ShortcutService.wtf("User still locked", 0);
	this.mLastLockedUser = p2;
	Object v35 = this.mUsers.get(p2);
	File v37 = ShortcutService.getUserFile(p1);
	AtomicFile v38 = new AtomicFile(v37);
	FileInputStream v40 = v38.openRead();
	ShortcutUser v41 = ShortcutService.loadUserInternal(p1, v40, 0);
	File v45 = v38.getBaseFile();
	IoUtils.closeQuietly(v40);
	ShortcutUser v36 = 0;
	ShortcutUser v50 = new ShortcutUser(ShortcutService,p2);
	this.mUsers.put(p2, phiInstruction);
	boolean v54 = ShortcutService.injectIsSafeModeEnabled();
	long v55 = ShortcutService.getStatStartTime();
	ArrayList v56 = new ArrayList();
	ShortcutUser v58 = ShortcutService.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v59 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v56);
	v58.forAllPackageItems(v59);
	int v62 = v56.size();
	int v63 = v56.size();
	long v64 = v58.getLastAppScanTime();
	ShortcutService.rescanUpdatedPackagesLocked(p1, v64);
	ShortcutService.logDurationStat(8, v55);
	ShortcutService.verifyStates();
	ShortcutUser v30 = phiInstruction;
	[I v69 = new [I(1);
	[I v70 = new [I(1);
	[I v71 = new [I(1);
	this.mLaunchers.clear();
	ShortcutUser$$ExternalSyntheticLambda3 v73 = new ShortcutUser$$ExternalSyntheticLambda3(ShortcutUser,this.mService,v69);
	int v76 = this.mLaunchers.size();
	ShortcutUser$$ExternalSyntheticLambda4 v77 = new ShortcutUser$$ExternalSyntheticLambda4(ShortcutUser,this.mService,v70,v71);
	int v80 = this.mPackages.size();
	this.mLaunchers.clear();
	this.mPackages.clear();
	this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
	ShortcutService$$ExternalSyntheticLambda7 v93 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v95 = this.mShortcutDumpFiles.save("restore-3.txt", v93);
	boolean v98 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v100 = this.mUsers.get(p1);
	ShortcutUser v101 = ShortcutService.loadUserLocked(p1);
	ShortcutUser v102 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v97 = phiInstruction;
	long v107 = System.currentTimeMillis();
	long v106 = v107;
	String v108 = Build.FINGERPRINT;
	String v109 = this.mLastAppScanOsFingerprint;
	boolean v110 = v108.equals(v109);
	ShortcutService$$ExternalSyntheticLambda21 v111 = new ShortcutService$$ExternalSyntheticLambda21(ShortcutService,v97,p2);
	List v114 = ShortcutService.getInstalledPackages(p1);
	int v115 = v114.size();
	this.mLastAppScanTime = v106;
	String v117 = Build.FINGERPRINT;
	this.mLastAppScanOsFingerprint = v117;
	ShortcutService.scheduleSaveInner(p1);
	ShortcutService$$ExternalSyntheticLambda7 v121 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v123 = this.mShortcutDumpFiles.save("restore-4.txt", v121);
	ShortcutService$$ExternalSyntheticLambda8 v124 = new ShortcutService$$ExternalSyntheticLambda8(p0);
	boolean v126 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v124);
	File v129 = new File(v130,"shortcuts.xml");
	File v130 = ShortcutService.injectUserDataPath(p1);
	File v128 = v129;
	File v132 = v128.getParentFile();
	boolean v133 = v132.mkdirs();
	AtomicFile v134 = new AtomicFile(v128);
	FileOutputStream v136 = v134.startWrite();
	TypedXmlSerializer v138 = Xml.newFastSerializer();
	String v139 = StandardCharsets.UTF_8.name();
	v138.setOutput(v136, v139);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v142 = ShortcutService.getUserShortcutsLocked(p1);
	v142.saveToXml(phiInstruction, 0);
	phiInstruction.endDocument();
	v136.flush();
	v134.finishWrite(v136);
	long v148 = ShortcutService.getStatStartTime();
	ShortcutUser v149 = ShortcutService.getUserShortcutsLocked(p1);
	File v150 = ShortcutService.getUserBitmapFilePath(p1);
	File v151 = v150.listFiles();
	ShortcutService.logDurationStat(5, v148);
	File v156 = v134.getBaseFile();
	v134.failWrite(phiInstruction);
	boolean v162 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v164 = this.mUsers.get(p1);
	ShortcutUser v165 = ShortcutService.loadUserLocked(p1);
	ShortcutUser v166 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v161 = phiInstruction;
	int v171 = this.mPackages.size();
	LogMaker v172 = new LogMaker(1717);
	LogMaker v174 = v172.setType(1);
	LogMaker v175 = v174.setSubtype(this.mUserId);
	this.mMetricsLogger.write(v175);
	LogMaker v177 = v172.setType(2);
	LogMaker v178 = v177.setSubtype(phiInstruction);
	this.mMetricsLogger.write(v178);
	LogMaker v180 = v172.setType(3);
	LogMaker v181 = v180.setSubtype(phiInstruction);
	this.mMetricsLogger.write(v181);
	return;
}
This is path 3 for the API with depth 2:
public void applyRestore(byte[] p1, int p2){
	boolean v2 = v4;
	boolean v5 = p0.isUserUnlockedL(p2);
	ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);
	boolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v10 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p1);
	File v13 = this.mService.getDumpPath();
	boolean v14 = v13.mkdirs();
	boolean v15 = v13.exists();
	StringBuilder v16 = new StringBuilder();
	boolean v12 = 0;
	boolean v9 = v12;
	ByteArrayInputStream v24 = new ByteArrayInputStream(p1);
	ShortcutUser v26 = p0.loadUserInternal(p2, v24, 1);
	ShortcutService$$ExternalSyntheticLambda7 v27 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v29 = this.mShortcutDumpFiles.save("restore-2.txt", v27);
	boolean v32 = this.mUnlockedUsers.get(p1);
	boolean v33 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	boolean v31 = v33;
	ShortcutService.wtf("User still locked", 0);
	this.mLastLockedUser = p2;
	Object v36 = this.mUsers.get(p2);
	File v38 = ShortcutService.getUserFile(p1);
	AtomicFile v39 = new AtomicFile(v38);
	FileInputStream v41 = v39.openRead();
	ShortcutUser v42 = ShortcutService.loadUserInternal(p1, v41, 0);
	File v46 = v39.getBaseFile();
	IoUtils.closeQuietly(v41);
	ShortcutUser v37 = 0;
	ShortcutUser v51 = new ShortcutUser(ShortcutService,p2);
	this.mUsers.put(p2, phiInstruction);
	boolean v55 = ShortcutService.injectIsSafeModeEnabled();
	long v56 = ShortcutService.getStatStartTime();
	ArrayList v57 = new ArrayList();
	ShortcutUser v59 = ShortcutService.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v60 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v57);
	v59.forAllPackageItems(v60);
	int v63 = v57.size();
	int v64 = v57.size();
	long v65 = v59.getLastAppScanTime();
	ShortcutService.rescanUpdatedPackagesLocked(p1, v65);
	ShortcutService.logDurationStat(8, v56);
	ShortcutService.verifyStates();
	ShortcutUser v30 = phiInstruction;
	[I v70 = new [I(1);
	[I v71 = new [I(1);
	[I v72 = new [I(1);
	this.mLaunchers.clear();
	ShortcutUser$$ExternalSyntheticLambda3 v74 = new ShortcutUser$$ExternalSyntheticLambda3(ShortcutUser,this.mService,v70);
	int v77 = this.mLaunchers.size();
	ShortcutUser$$ExternalSyntheticLambda4 v78 = new ShortcutUser$$ExternalSyntheticLambda4(ShortcutUser,this.mService,v71,v72);
	int v81 = this.mPackages.size();
	this.mLaunchers.clear();
	this.mPackages.clear();
	this.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;
	ShortcutService$$ExternalSyntheticLambda7 v94 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v96 = this.mShortcutDumpFiles.save("restore-3.txt", v94);
	boolean v99 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v101 = this.mUsers.get(p1);
	ShortcutUser v102 = ShortcutService.loadUserLocked(p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v98 = phiInstruction;
	long v106 = System.currentTimeMillis();
	long v105 = v106;
	String v107 = Build.FINGERPRINT;
	String v108 = this.mLastAppScanOsFingerprint;
	boolean v109 = v107.equals(v108);
	ShortcutService$$ExternalSyntheticLambda21 v110 = new ShortcutService$$ExternalSyntheticLambda21(ShortcutService,v98,p2);
	List v113 = ShortcutService.getInstalledPackages(p1);
	int v114 = v113.size();
	this.mLastAppScanTime = v105;
	String v116 = Build.FINGERPRINT;
	this.mLastAppScanOsFingerprint = v116;
	ShortcutService.scheduleSaveInner(p1);
	ShortcutService$$ExternalSyntheticLambda7 v120 = new ShortcutService$$ExternalSyntheticLambda7(p0);
	boolean v122 = this.mShortcutDumpFiles.save("restore-4.txt", v120);
	ShortcutService$$ExternalSyntheticLambda8 v123 = new ShortcutService$$ExternalSyntheticLambda8(p0);
	boolean v125 = this.mShortcutDumpFiles.save("restore-5-finish.txt", v123);
	File v128 = new File(v129,"shortcuts.xml");
	File v129 = ShortcutService.injectUserDataPath(p1);
	File v127 = v128;
	File v131 = v127.getParentFile();
	boolean v132 = v131.mkdirs();
	AtomicFile v133 = new AtomicFile(v127);
	FileOutputStream v135 = v133.startWrite();
	TypedXmlSerializer v137 = Xml.newFastSerializer();
	String v138 = StandardCharsets.UTF_8.name();
	v137.setOutput(v135, v138);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v141 = ShortcutService.getUserShortcutsLocked(p1);
	v141.saveToXml(phiInstruction, 0);
	phiInstruction.endDocument();
	v135.flush();
	v133.finishWrite(v135);
	long v147 = ShortcutService.getStatStartTime();
	ShortcutUser v148 = ShortcutService.getUserShortcutsLocked(p1);
	File v149 = ShortcutService.getUserBitmapFilePath(p1);
	File v150 = v149.listFiles();
	ShortcutService.logDurationStat(5, v147);
	File v155 = v133.getBaseFile();
	v133.failWrite(phiInstruction);
	boolean v161 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v163 = this.mUsers.get(p1);
	ShortcutUser v164 = ShortcutService.loadUserLocked(p1);
	ShortcutUser v165 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v160 = phiInstruction;
	int v170 = this.mPackages.size();
	LogMaker v171 = new LogMaker(1717);
	LogMaker v173 = v171.setType(1);
	LogMaker v174 = v173.setSubtype(this.mUserId);
	this.mMetricsLogger.write(v174);
	LogMaker v176 = v171.setType(2);
	LogMaker v177 = v176.setSubtype(phiInstruction);
	this.mMetricsLogger.write(v177);
	LogMaker v179 = v171.setType(3);
	LogMaker v180 = v179.setSubtype(phiInstruction);
	this.mMetricsLogger.write(v180);
	return;
}

and the following sink code:
['boolean v5 = p0.isUserUnlockedL(p2);\nShortcutUser v26 = p0.loadUserInternal(p2, v24, 1);\nthis.mLastLockedUser = p2;\nObject v36 = this.mUsers.get(p2);\nv42.saveToXml(phiInstruction, 0);', 'ShortcutService$$ExternalSyntheticLambda6 v6 = new ShortcutService$$ExternalSyntheticLambda6(p0);\nboolean v8 = this.mShortcutDumpFiles.save("restore-0-start.txt", v6);\nv27.startDocument(0, Boolean.TRUE);\nphiInstruction.endDocument();', 'ArrayList v57 = new ArrayList();\nv58.forAllPackageItems(v60);\nint v63 = v57.size();\nlong v65 = v58.getLastAppScanTime();\nShortcutService.rescanUpdatedPackagesLocked(p1, v65);', 'this.mLaunchers.clear();\nthis.mPackages.clear();\nthis.mRestoreFromOsFingerprint = this.mRestoreFromOsFingerprint;\nint v81 = this.mPackages.size();']

The method applyRestore has the following similar APIs:

- API Name: requestUninstall([BLandroid/app/timezone/ICallback;)I with Similarity Score: 0.7856341600418091
  - Access Control Level: NONE and the following code:
ByteArrayInputStream v4 = new ByteArrayInputStream(p1);
DataInputStream v6 = new DataInputStream(v4);
int v8 = v6.readInt();
long v9 = v6.readLong();
long v10 = v6.readLong();

