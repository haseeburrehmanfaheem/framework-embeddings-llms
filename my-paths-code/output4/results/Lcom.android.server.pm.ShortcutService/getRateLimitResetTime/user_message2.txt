The method getRateLimitResetTime has the following code snippet:

This is path 1 for the API with depth 2:
public long getRateLimitResetTime(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
	boolean v13 = ShortcutService.isEphemeralApp(v12);
	boolean v11 = v13;
	Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
	boolean v17 = this.mUnlockedUsers.get(p1);
	boolean v18 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	boolean v16 = v18;
	long v21 = ShortcutService.injectCurrentTimeMillis();
	boolean v22 = ShortcutService.isClockValid(v21);
	this.mRawLastResetTime = v21;
	ShortcutService.scheduleSaveBaseState();
	long v19 = (this.mRawLastResetTime + this.mResetInterval);
	return v19;
}
This is path 2 for the API with depth 2:
public long getRateLimitResetTime(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = -1;
	ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
	boolean v13 = ShortcutService.isEphemeralApp(v12);
	boolean v11 = v13;
	Preconditions.checkState((v11 ^ 1), "Ephemeral apps can't use ShortcutManager");
	boolean v17 = this.mUnlockedUsers.get(p1);
	boolean v16 = 1;
	long v20 = ShortcutService.injectCurrentTimeMillis();
	boolean v21 = ShortcutService.isClockValid(v20);
	this.mRawLastResetTime = v20;
	ShortcutService.scheduleSaveBaseState();
	long v18 = (this.mRawLastResetTime + this.mResetInterval);
	return v18;
}
This is path 3 for the API with depth 2:
public long getRateLimitResetTime(String p1, int p2){
	long v7 = ShortcutService.injectClearCallingIdentity();
	int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	ShortcutService.injectRestoreCallingIdentity(v7);
	int v6 = v8;
	ApplicationInfo v11 = ShortcutService.getApplicationInfo(p1, p2);
	boolean v12 = ShortcutService.isEphemeralApp(v11);
	boolean v10 = v12;
	Preconditions.checkState((v10 ^ 1), "Ephemeral apps can't use ShortcutManager");
	boolean v16 = this.mUnlockedUsers.get(p1);
	boolean v17 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	boolean v15 = v17;
	long v20 = ShortcutService.injectCurrentTimeMillis();
	boolean v21 = ShortcutService.isClockValid(v20);
	this.mRawLastResetTime = v20;
	ShortcutService.scheduleSaveBaseState();
	long v18 = (this.mRawLastResetTime + this.mResetInterval);
	return v18;
}

and the following sink code:
['int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);\nApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);\nthis.mRawLastResetTime = ShortcutService.injectCurrentTimeMillis();\nlong v19 = (this.mRawLastResetTime + this.mResetInterval);\nreturn v19;']

The method getRateLimitResetTime has the following similar APIs:

- API Name: enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.8236166834831238
  - Access Control Level: SYS_OR_SIG and the following code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
boolean v13 = ShortcutService.isEphemeralApp(v12);

- API Name: removeAllDynamicShortcuts(Ljava/lang/String;I)V with Similarity Score: 0.8236166834831238
  - Access Control Level: SYS_OR_SIG and the following code:
int v8 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
ApplicationInfo v12 = ShortcutService.getApplicationInfo(p1, p2);
boolean v13 = ShortcutService.isEphemeralApp(v12);

