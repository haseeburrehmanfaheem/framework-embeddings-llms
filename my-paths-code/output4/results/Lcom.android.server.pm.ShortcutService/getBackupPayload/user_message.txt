This is path 1 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	boolean v5 = p0.isUserUnlockedL(p1);
	boolean v8 = this.mUnlockedUsers.get(p1);
	boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	boolean v7 = v9;
	ShortcutService.wtf("User still locked", 0);
	this.mLastLockedUser = p1;
	Object v12 = this.mUsers.get(p1);
	File v14 = ShortcutService.getUserFile(p1);
	AtomicFile v15 = new AtomicFile(v14);
	FileInputStream v17 = v15.openRead();
	ShortcutUser v18 = ShortcutService.loadUserInternal(p1, v17, 0);
	File v22 = v15.getBaseFile();
	IoUtils.closeQuietly(v17);
	ShortcutUser v13 = 0;
	ShortcutUser v27 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	boolean v31 = ShortcutService.injectIsSafeModeEnabled();
	long v32 = ShortcutService.getStatStartTime();
	ArrayList v33 = new ArrayList();
	ShortcutUser v35 = ShortcutService.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v36 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v33);
	v35.forAllPackageItems(v36);
	int v39 = v33.size();
	int v40 = v33.size();
	long v41 = v35.getLastAppScanTime();
	ShortcutService.rescanUpdatedPackagesLocked(p1, v41);
	ShortcutService.logDurationStat(8, v32);
	ShortcutService.verifyStates();
	ShortcutUser v6 = phiInstruction;
	ShortcutService$$ExternalSyntheticLambda1 v45 = new ShortcutService$$ExternalSyntheticLambda1();
	int v49 = this.mLaunchers.size();
	int v51 = this.mPackages.size();
	ShortcutService$$ExternalSyntheticLambda2 v52 = new ShortcutService$$ExternalSyntheticLambda2();
	v6.forAllPackages(v52);
	ShortcutService$$ExternalSyntheticLambda3 v55 = new ShortcutService$$ExternalSyntheticLambda3();
	v6.forAllLaunchers(v55);
	Integer v60 = Integer.valueOf(p1);
	boolean v61 = this.mDirtyUserIds.contains(v60);
	Integer v62 = Integer.valueOf(p1);
	boolean v63 = this.mDirtyUserIds.add(v62);
	this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
	boolean v65 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
	boolean v67 = this.mShutdown.get();
	Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
	int v69 = this.mDirtyUserIds.size();
	this.mWtfCount = (this.mWtfCount + 1);
	Exception v73 = new Exception("Last failure was logged here:");
	this.mLastWtfStacktrace = v73;
	Trace.traceEnd(524288);
	ByteArrayOutputStream v77 = new ByteArrayOutputStream(32768);
	TypedXmlSerializer v80 = Xml.newFastSerializer();
	String v81 = StandardCharsets.UTF_8.name();
	v80.setOutput(v77, v81);
	phiInstruction.startDocument(0, Boolean.TRUE);
	boolean v85 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v87 = this.mUsers.get(p1);
	ShortcutUser v88 = ShortcutService.loadUserLocked(p1);
	ShortcutUser v89 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v84 = phiInstruction;
	XmlSerializer v94 = phiInstruction.startTag(0, "user");
	ShortcutService.writeAttr(phiInstruction, "locales", this.mKnownLocales);
	ShortcutService.writeAttr(phiInstruction, "last-app-scan-time2", this.mLastAppScanTime);
	ShortcutService.writeAttr(phiInstruction, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
	ShortcutService.writeAttr(phiInstruction, "restore-from-fp", this.mRestoreFromOsFingerprint);
	File v99 = this.mService.injectUserDataPath(this.mUserId);
	File v100 = new File(v99,"packages");
	boolean v102 = FileUtils.deleteContents(v100);
	File v103 = new File(v99,"launchers");
	boolean v105 = FileUtils.deleteContents(v103);
	int v106 = this.mLaunchers.size();
	int v107 = this.mPackages.size();
	XmlSerializer v108 = phiInstruction.endTag(0, "user");
	phiInstruction.endDocument();
	v77.flush();
	byte[] v111 = v77.toByteArray();
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v113 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v111);
	File v116 = this.mService.getDumpPath();
	boolean v117 = v116.mkdirs();
	boolean v118 = v116.exists();
	StringBuilder v119 = new StringBuilder();
	boolean v115 = 0;
	boolean v112 = v115;
	return v111;
}

This is path 2 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	boolean v5 = p0.isUserUnlockedL(p1);
	boolean v8 = this.mUnlockedUsers.get(p1);
	boolean v9 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	boolean v7 = v9;
	ShortcutService.wtf("User still locked", 0);
	this.mLastLockedUser = p1;
	Object v12 = this.mUsers.get(p1);
	File v14 = ShortcutService.getUserFile(p1);
	AtomicFile v15 = new AtomicFile(v14);
	FileInputStream v17 = v15.openRead();
	ShortcutUser v18 = ShortcutService.loadUserInternal(p1, v17, 0);
	File v22 = v15.getBaseFile();
	IoUtils.closeQuietly(v17);
	ShortcutUser v13 = 0;
	ShortcutUser v27 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	boolean v31 = ShortcutService.injectIsSafeModeEnabled();
	long v32 = ShortcutService.getStatStartTime();
	ArrayList v33 = new ArrayList();
	ShortcutUser v35 = ShortcutService.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v36 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v33);
	v35.forAllPackageItems(v36);
	int v39 = v33.size();
	int v40 = v33.size();
	long v41 = v35.getLastAppScanTime();
	ShortcutService.rescanUpdatedPackagesLocked(p1, v41);
	ShortcutService.logDurationStat(8, v32);
	ShortcutService.verifyStates();
	ShortcutUser v6 = phiInstruction;
	ShortcutService$$ExternalSyntheticLambda1 v45 = new ShortcutService$$ExternalSyntheticLambda1();
	int v49 = this.mLaunchers.size();
	int v51 = this.mPackages.size();
	ShortcutService$$ExternalSyntheticLambda2 v52 = new ShortcutService$$ExternalSyntheticLambda2();
	v6.forAllPackages(v52);
	ShortcutService$$ExternalSyntheticLambda3 v55 = new ShortcutService$$ExternalSyntheticLambda3();
	v6.forAllLaunchers(v55);
	Integer v60 = Integer.valueOf(p1);
	boolean v61 = this.mDirtyUserIds.contains(v60);
	Integer v62 = Integer.valueOf(p1);
	boolean v63 = this.mDirtyUserIds.add(v62);
	this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
	boolean v65 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
	boolean v67 = this.mShutdown.get();
	Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
	this.mWtfCount = (this.mWtfCount + 1);
	Exception v72 = new Exception("Last failure was logged here:");
	this.mLastWtfStacktrace = v72;
	Trace.traceEnd(524288);
	ByteArrayOutputStream v76 = new ByteArrayOutputStream(32768);
	TypedXmlSerializer v79 = Xml.newFastSerializer();
	String v80 = StandardCharsets.UTF_8.name();
	v79.setOutput(v76, v80);
	phiInstruction.startDocument(0, Boolean.TRUE);
	boolean v84 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v86 = this.mUsers.get(p1);
	ShortcutUser v87 = ShortcutService.loadUserLocked(p1);
	ShortcutUser v88 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v83 = phiInstruction;
	XmlSerializer v93 = phiInstruction.startTag(0, "user");
	ShortcutService.writeAttr(phiInstruction, "locales", this.mKnownLocales);
	ShortcutService.writeAttr(phiInstruction, "last-app-scan-time2", this.mLastAppScanTime);
	ShortcutService.writeAttr(phiInstruction, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
	ShortcutService.writeAttr(phiInstruction, "restore-from-fp", this.mRestoreFromOsFingerprint);
	File v98 = this.mService.injectUserDataPath(this.mUserId);
	File v99 = new File(v98,"packages");
	boolean v101 = FileUtils.deleteContents(v99);
	File v102 = new File(v98,"launchers");
	boolean v104 = FileUtils.deleteContents(v102);
	int v105 = this.mLaunchers.size();
	int v106 = this.mPackages.size();
	XmlSerializer v107 = phiInstruction.endTag(0, "user");
	phiInstruction.endDocument();
	v76.flush();
	byte[] v110 = v76.toByteArray();
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v112 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v110);
	File v115 = this.mService.getDumpPath();
	boolean v116 = v115.mkdirs();
	boolean v117 = v115.exists();
	StringBuilder v118 = new StringBuilder();
	boolean v114 = 0;
	boolean v111 = v114;
	return v110;
}

This is path 3 for the API with depth 2:
public byte[] getBackupPayload(int p1){
	boolean v2 = v4;
	boolean v5 = p0.isUserUnlockedL(p1);
	boolean v8 = this.mUnlockedUsers.get(p1);
	boolean v7 = 1;
	ShortcutService.wtf("User still locked", 0);
	this.mLastLockedUser = p1;
	Object v11 = this.mUsers.get(p1);
	File v13 = ShortcutService.getUserFile(p1);
	AtomicFile v14 = new AtomicFile(v13);
	FileInputStream v16 = v14.openRead();
	ShortcutUser v17 = ShortcutService.loadUserInternal(p1, v16, 0);
	File v21 = v14.getBaseFile();
	IoUtils.closeQuietly(v16);
	ShortcutUser v12 = 0;
	ShortcutUser v26 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	boolean v30 = ShortcutService.injectIsSafeModeEnabled();
	long v31 = ShortcutService.getStatStartTime();
	ArrayList v32 = new ArrayList();
	ShortcutUser v34 = ShortcutService.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v35 = new ShortcutService$$ExternalSyntheticLambda18(ShortcutService,v32);
	v34.forAllPackageItems(v35);
	int v38 = v32.size();
	int v39 = v32.size();
	long v40 = v34.getLastAppScanTime();
	ShortcutService.rescanUpdatedPackagesLocked(p1, v40);
	ShortcutService.logDurationStat(8, v31);
	ShortcutService.verifyStates();
	ShortcutUser v6 = phiInstruction;
	ShortcutService$$ExternalSyntheticLambda1 v44 = new ShortcutService$$ExternalSyntheticLambda1();
	int v48 = this.mLaunchers.size();
	int v50 = this.mPackages.size();
	ShortcutService$$ExternalSyntheticLambda2 v51 = new ShortcutService$$ExternalSyntheticLambda2();
	v6.forAllPackages(v51);
	ShortcutService$$ExternalSyntheticLambda3 v54 = new ShortcutService$$ExternalSyntheticLambda3();
	v6.forAllLaunchers(v54);
	Integer v59 = Integer.valueOf(p1);
	boolean v60 = this.mDirtyUserIds.contains(v59);
	Integer v61 = Integer.valueOf(p1);
	boolean v62 = this.mDirtyUserIds.add(v61);
	this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
	boolean v64 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
	boolean v66 = this.mShutdown.get();
	Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
	int v68 = this.mDirtyUserIds.size();
	this.mWtfCount = (this.mWtfCount + 1);
	Exception v72 = new Exception("Last failure was logged here:");
	this.mLastWtfStacktrace = v72;
	Trace.traceEnd(524288);
	ByteArrayOutputStream v76 = new ByteArrayOutputStream(32768);
	TypedXmlSerializer v79 = Xml.newFastSerializer();
	String v80 = StandardCharsets.UTF_8.name();
	v79.setOutput(v76, v80);
	phiInstruction.startDocument(0, Boolean.TRUE);
	boolean v84 = ShortcutService.isUserUnlockedL(p1);
	ShortcutService.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v86 = this.mUsers.get(p1);
	ShortcutUser v87 = ShortcutService.loadUserLocked(p1);
	ShortcutUser v88 = new ShortcutUser(ShortcutService,p1);
	this.mUsers.put(p1, phiInstruction);
	ShortcutService.checkPackageChanges(p1);
	ShortcutUser v83 = phiInstruction;
	XmlSerializer v93 = phiInstruction.startTag(0, "user");
	ShortcutService.writeAttr(phiInstruction, "locales", this.mKnownLocales);
	ShortcutService.writeAttr(phiInstruction, "last-app-scan-time2", this.mLastAppScanTime);
	ShortcutService.writeAttr(phiInstruction, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
	ShortcutService.writeAttr(phiInstruction, "restore-from-fp", this.mRestoreFromOsFingerprint);
	File v98 = this.mService.injectUserDataPath(this.mUserId);
	File v99 = new File(v98,"packages");
	boolean v101 = FileUtils.deleteContents(v99);
	File v102 = new File(v98,"launchers");
	boolean v104 = FileUtils.deleteContents(v102);
	int v105 = this.mLaunchers.size();
	int v106 = this.mPackages.size();
	XmlSerializer v107 = phiInstruction.endTag(0, "user");
	phiInstruction.endDocument();
	v76.flush();
	byte[] v110 = v76.toByteArray();
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v112 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(v110);
	File v115 = this.mService.getDumpPath();
	boolean v116 = v115.mkdirs();
	boolean v117 = v115.exists();
	StringBuilder v118 = new StringBuilder();
	boolean v114 = 0;
	boolean v111 = v114;
	return v110;
}
