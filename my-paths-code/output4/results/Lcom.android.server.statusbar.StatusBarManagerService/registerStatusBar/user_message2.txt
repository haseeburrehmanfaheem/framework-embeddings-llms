The method registerStatusBar has the following code snippet:

This is path 1 for the API with depth 2:
public RegisterStatusBarResult registerStatusBar(IStatusBar p1){
	this.mBar = p1;
	IStatusBar v10 = this.mBar;
	IBinder v11 = v10.asBinder();
	StatusBarManagerService$DeathRecipient v12 = this.mDeathRecipient;
	v11.linkToDeath(v12, 0);
	UiThread.ensureThreadLocked();
	Handler v16 = this.sHandler;
	StatusBarManagerService$$ExternalSyntheticLambda4 v18 = new StatusBarManagerService$$ExternalSyntheticLambda4(StatusBarManagerService);
	boolean v20 = v16.post(v18);
	StatusBarManagerService$$ExternalSyntheticLambda5 v21 = new StatusBarManagerService$$ExternalSyntheticLambda5(StatusBarManagerService);
	boolean v23 = this.mHandler.post(v21);
	ArrayMap v24 = new ArrayMap(this.mIcons);
	Object v26 = this.mDisplayUiState.get(0);
	ArraySet v27 = StatusBarManagerService$UiState.-$$Nest$fgetmTransientBarTypes(v26);
	int v28 = v27.size();
	[I v29 = new [I(v28);
	RegisterStatusBarResult v30 = new RegisterStatusBarResult(v24,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v42,v29,v43);
	int v31 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1);
	int v32 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v26);
	AppearanceRegion v33 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v26);
	int v34 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v26);
	int v35 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v26);
	boolean v36 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v26);
	int v37 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2);
	IBinder v38 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v26);
	boolean v39 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v26);
	int v40 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v26);
	InsetsVisibilities v41 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v26);
	String v42 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v26);
	LetterboxDetails v43 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v26);
	return v30;
}
This is path 2 for the API with depth 2:
public RegisterStatusBarResult registerStatusBar(IStatusBar p1){
	this.mBar = p1;
	IStatusBar v10 = this.mBar;
	IBinder v11 = v10.asBinder();
	StatusBarManagerService$DeathRecipient v12 = this.mDeathRecipient;
	v11.linkToDeath(v12, 0);
	UiThread.ensureThreadLocked();
	Handler v15 = this.sHandler;
	StatusBarManagerService$$ExternalSyntheticLambda4 v17 = new StatusBarManagerService$$ExternalSyntheticLambda4(StatusBarManagerService);
	boolean v19 = v15.post(v17);
	StatusBarManagerService$$ExternalSyntheticLambda5 v20 = new StatusBarManagerService$$ExternalSyntheticLambda5(StatusBarManagerService);
	boolean v22 = this.mHandler.post(v20);
	ArrayMap v23 = new ArrayMap(this.mIcons);
	Object v25 = this.mDisplayUiState.get(0);
	ArraySet v26 = StatusBarManagerService$UiState.-$$Nest$fgetmTransientBarTypes(v25);
	int v27 = v26.size();
	[I v28 = new [I(v27);
	RegisterStatusBarResult v29 = new RegisterStatusBarResult(v23,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v28,v42);
	int v30 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1);
	int v31 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearance(v25);
	AppearanceRegion v32 = StatusBarManagerService$UiState.-$$Nest$fgetmAppearanceRegions(v25);
	int v33 = StatusBarManagerService$UiState.-$$Nest$fgetmImeWindowVis(v25);
	int v34 = StatusBarManagerService$UiState.-$$Nest$fgetmImeBackDisposition(v25);
	boolean v35 = StatusBarManagerService$UiState.-$$Nest$fgetmShowImeSwitcher(v25);
	int v36 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2);
	IBinder v37 = StatusBarManagerService$UiState.-$$Nest$fgetmImeToken(v25);
	boolean v38 = StatusBarManagerService$UiState.-$$Nest$fgetmNavbarColorManagedByIme(v25);
	int v39 = StatusBarManagerService$UiState.-$$Nest$fgetmBehavior(v25);
	InsetsVisibilities v40 = StatusBarManagerService$UiState.-$$Nest$fgetmRequestedVisibilities(v25);
	String v41 = StatusBarManagerService$UiState.-$$Nest$fgetmPackageName(v25);
	LetterboxDetails v42 = StatusBarManagerService$UiState.-$$Nest$fgetmLetterboxDetails(v25);
	return v29;
}

and the following sink code:
['this.mBar = p1;\nArrayMap v24 = new ArrayMap(this.mIcons);\nObject v26 = this.mDisplayUiState.get(0);\nRegisterStatusBarResult v30 = new RegisterStatusBarResult(v24,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v42,v29,v43);\nreturn v30;']

The method registerStatusBar has the following similar APIs:

- API Name: setIconVisibility(Ljava/lang/String;Z)V with Similarity Score: 0.7913923859596252
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mIcons.get(p1);
StatusBarIcon.visible = p2;
this.mBar.setIcon(p1, v3);

- API Name: setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V with Similarity Score: 0.7891382575035095
  - Access Control Level: SYS_OR_SIG and the following code:
StatusBarIcon v3 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5);
Object v5 = this.mIcons.put(p1, v3);
this.mBar.setIcon(p1, v3);

