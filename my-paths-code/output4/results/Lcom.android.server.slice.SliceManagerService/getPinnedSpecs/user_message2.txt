The method getPinnedSpecs has the following code snippet:

This is path 1 for the API with depth 2:
public SliceSpec getPinnedSpecs(Uri p1, String p2){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
	int v7 = v8;
	UserHandle v9 = Binder.getCallingUserHandle();
	int v10 = v9.getIdentifier();
	int v11 = ContentProvider.getUserIdFromUri(p1, v10);
	long v13 = Binder.clearCallingIdentity();
	Uri v14 = ContentProvider.getUriWithoutUserId(p2);
	String v15 = v14.getAuthority();
	PackageManager v16 = this.mContext.getPackageManager();
	int v17 = ContentProvider.getUserIdFromUri(p2, v11);
	ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
	Binder.restoreCallingIdentity(v13);
	String v12 = ProviderInfo.packageName;
	boolean v20 = Objects.equals(p2, v12);
	UserHandle v27 = Binder.getCallingUserHandle();
	int v28 = v27.getIdentifier();
	Uri v29 = ContentProvider.maybeAddUserId(p1, v28);
	PinnedSliceState v30 = p0.getPinnedSlice(v29);
	SliceSpec v31 = v30.getSpecs();
	return v31;
}
This is path 2 for the API with depth 2:
public SliceSpec getPinnedSpecs(Uri p1, String p2){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
	int v7 = v8;
	UserHandle v9 = Binder.getCallingUserHandle();
	int v10 = v9.getIdentifier();
	int v11 = ContentProvider.getUserIdFromUri(p1, v10);
	long v13 = Binder.clearCallingIdentity();
	Uri v14 = ContentProvider.getUriWithoutUserId(p2);
	String v15 = v14.getAuthority();
	PackageManager v16 = this.mContext.getPackageManager();
	int v17 = ContentProvider.getUserIdFromUri(p2, v11);
	ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
	Binder.restoreCallingIdentity(v13);
	String v12 = ProviderInfo.packageName;
	boolean v20 = Objects.equals(p2, v12);
	UserHandle v25 = Binder.getCallingUserHandle();
	int v26 = v25.getIdentifier();
	Uri v27 = ContentProvider.maybeAddUserId(p1, v26);
	PinnedSliceState v28 = p0.getPinnedSlice(v27);
	SliceSpec v29 = v28.getSpecs();
	return v29;
}

and the following sink code:
['int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);\nUri v29 = ContentProvider.maybeAddUserId(p1, v28);\nPinnedSliceState v30 = p0.getPinnedSlice(v29);\nSliceSpec v31 = v30.getSpecs();\nreturn v31;']

The method getPinnedSpecs has the following similar APIs:

- API Name: unpinSlice(Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)V with Similarity Score: 0.8079410195350647
  - Access Control Level: SYS_OR_SIG and the following code:
int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
UserHandle v9 = Binder.getCallingUserHandle();
int v10 = v9.getIdentifier();
Uri v14 = ContentProvider.getUriWithoutUserId(p2);
String v15 = v14.getAuthority();
PackageManager v16 = this.mContext.getPackageManager();
ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);

- API Name: pinSlice(Ljava/lang/String;Landroid/net/Uri;[Landroid/app/slice/SliceSpec;Landroid/os/IBinder;)V with Similarity Score: 0.7803633809089661
  - Access Control Level: SYS_OR_SIG and the following code:
PinnedSliceState v34 = new PinnedSliceState(SliceManagerService,p1,p2);
Object v36 = this.mPinnedSlicesByUri.put(v29, v33);

