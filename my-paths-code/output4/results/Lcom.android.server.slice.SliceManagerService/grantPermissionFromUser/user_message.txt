This is path 1 for the API with depth 2:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	Uri$Builder v6 = p1.buildUpon();
	Uri$Builder v7 = v6.path("");
	Uri v8 = v7.build();
	int v9 = ContentProvider.getUserIdFromUri(v8, v5);
	long v11 = Binder.clearCallingIdentity();
	Uri v12 = ContentProvider.getUriWithoutUserId(v8);
	String v13 = v12.getAuthority();
	PackageManager v14 = this.mContext.getPackageManager();
	int v15 = ContentProvider.getUserIdFromUri(v8, v9);
	ProviderInfo v16 = v14.resolveContentProviderAsUser(v13, 0, v15);
	Binder.restoreCallingIdentity(v11);
	String v10 = ProviderInfo.packageName;
	SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
	Object v24 = this.mCachedClients.get(v19);
	String v25 = SliceClientPermissions.getFileName(v19);
	SlicePermissionManager$ParserHolder v26 = SlicePermissionManager.getParser(v25);
	XmlPullParser v27 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v26);
	v26.close();
	caughtException.addSuppressed(caughtException);
	int v30 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v31 = new SliceClientPermissions(v19,SlicePermissionManager);
	Object v33 = this.mCachedClients.put(v19, v31);
	SliceClientPermissions v23 = phiInstruction;
	SlicePermissionManager$PkgUser v35 = new SlicePermissionManager$PkgUser(v36,v37);
	String v36 = p5.getAuthority();
	int v37 = v21.getUserId();
	SliceClientPermissions$SliceAuthority v39 = SliceClientPermissions.getOrCreateAuthority(v35, v21);
	List v40 = p5.getPathSegments();
	v39.addPath(v40);
	Object v43 = this.mCachedProviders.get(v21);
	String v44 = SliceProviderPermissions.getFileName(v21);
	SlicePermissionManager$ParserHolder v45 = SlicePermissionManager.getParser(v44);
	XmlPullParser v46 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v45);
	v45.close();
	caughtException.addSuppressed(caughtException);
	int v49 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v50 = new SliceProviderPermissions(v21,SlicePermissionManager);
	Object v52 = this.mCachedProviders.put(v21, v50);
	SliceProviderPermissions v42 = phiInstruction;
	Uri v53 = ContentProvider.getUriWithoutUserId(v8);
	String v54 = v53.getAuthority();
	Object v56 = this.mAuths.get(v54);
	SliceProviderPermissions$SliceAuthority v57 = new SliceProviderPermissions$SliceAuthority(v54,SliceProviderPermissions);
	Object v59 = this.mAuths.put(v54, v57);
	SliceProviderPermissions.onPersistableDirty(v57);
	SliceProviderPermissions$SliceAuthority v55 = phiInstruction;
	boolean v62 = this.mPkgs.add(v19);
	this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
	long v64 = Binder.clearCallingIdentity();
	ContentResolver v65 = this.mContext.getContentResolver();
	v65.notifyChange(p1, 0);
	Binder.restoreCallingIdentity(v64);
	return;
}

This is path 2 for the API with depth 2:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	Uri$Builder v6 = p1.buildUpon();
	Uri$Builder v7 = v6.path("");
	Uri v8 = v7.build();
	int v9 = ContentProvider.getUserIdFromUri(v8, v5);
	long v11 = Binder.clearCallingIdentity();
	Uri v12 = ContentProvider.getUriWithoutUserId(v8);
	String v13 = v12.getAuthority();
	PackageManager v14 = this.mContext.getPackageManager();
	int v15 = ContentProvider.getUserIdFromUri(v8, v9);
	ProviderInfo v16 = v14.resolveContentProviderAsUser(v13, 0, v15);
	Binder.restoreCallingIdentity(v11);
	String v10 = ProviderInfo.packageName;
	SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
	Object v24 = this.mCachedClients.get(v19);
	String v25 = SliceClientPermissions.getFileName(v19);
	SlicePermissionManager$ParserHolder v26 = SlicePermissionManager.getParser(v25);
	XmlPullParser v27 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v26);
	v26.close();
	caughtException.addSuppressed(caughtException);
	int v30 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v31 = new SliceClientPermissions(v19,SlicePermissionManager);
	Object v33 = this.mCachedClients.put(v19, v31);
	SliceClientPermissions v23 = phiInstruction;
	SlicePermissionManager$PkgUser v35 = new SlicePermissionManager$PkgUser(v36,v37);
	String v36 = p5.getAuthority();
	int v37 = v21.getUserId();
	SliceClientPermissions$SliceAuthority v39 = SliceClientPermissions.getOrCreateAuthority(v35, v21);
	List v40 = p5.getPathSegments();
	v39.addPath(v40);
	Object v43 = this.mCachedProviders.get(v21);
	String v44 = SliceProviderPermissions.getFileName(v21);
	SlicePermissionManager$ParserHolder v45 = SlicePermissionManager.getParser(v44);
	XmlPullParser v46 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v45);
	v45.close();
	caughtException.addSuppressed(caughtException);
	int v49 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v50 = new SliceProviderPermissions(v21,SlicePermissionManager);
	Object v52 = this.mCachedProviders.put(v21, v50);
	SliceProviderPermissions v42 = phiInstruction;
	Uri v53 = ContentProvider.getUriWithoutUserId(v8);
	String v54 = v53.getAuthority();
	Object v56 = this.mAuths.get(v54);
	SliceProviderPermissions$SliceAuthority v57 = new SliceProviderPermissions$SliceAuthority(v54,SliceProviderPermissions);
	Object v59 = this.mAuths.put(v54, v57);
	SliceProviderPermissions.onPersistableDirty(v57);
	SliceProviderPermissions$SliceAuthority v55 = phiInstruction;
	boolean v62 = this.mPkgs.add(v19);
	long v63 = Binder.clearCallingIdentity();
	ContentResolver v64 = this.mContext.getContentResolver();
	v64.notifyChange(p1, 0);
	Binder.restoreCallingIdentity(v63);
	return;
}

This is path 3 for the API with depth 2:
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	Uri$Builder v6 = p1.buildUpon();
	Uri$Builder v7 = v6.path("");
	Uri v8 = v7.build();
	int v9 = ContentProvider.getUserIdFromUri(v8, v5);
	long v11 = Binder.clearCallingIdentity();
	Uri v12 = ContentProvider.getUriWithoutUserId(v8);
	String v13 = v12.getAuthority();
	PackageManager v14 = this.mContext.getPackageManager();
	int v15 = ContentProvider.getUserIdFromUri(v8, v9);
	ProviderInfo v16 = v14.resolveContentProviderAsUser(v13, 0, v15);
	Binder.restoreCallingIdentity(v11);
	String v10 = ProviderInfo.packageName;
	SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v21 = new SlicePermissionManager$PkgUser(v10,v9);
	Object v24 = this.mCachedClients.get(v19);
	String v25 = SliceClientPermissions.getFileName(v19);
	SlicePermissionManager$ParserHolder v26 = SlicePermissionManager.getParser(v25);
	XmlPullParser v27 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v26);
	v26.close();
	caughtException.addSuppressed(caughtException);
	int v30 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v31 = new SliceClientPermissions(v19,SlicePermissionManager);
	Object v33 = this.mCachedClients.put(v19, v31);
	SliceClientPermissions v23 = phiInstruction;
	SlicePermissionManager$PkgUser v35 = new SlicePermissionManager$PkgUser(v36,v37);
	String v36 = p5.getAuthority();
	int v37 = v21.getUserId();
	SliceClientPermissions$SliceAuthority v39 = SliceClientPermissions.getOrCreateAuthority(v35, v21);
	List v40 = p5.getPathSegments();
	v39.addPath(v40);
	Object v43 = this.mCachedProviders.get(v21);
	String v44 = SliceProviderPermissions.getFileName(v21);
	SlicePermissionManager$ParserHolder v45 = SlicePermissionManager.getParser(v44);
	XmlPullParser v46 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v45);
	v45.close();
	caughtException.addSuppressed(caughtException);
	int v49 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v50 = new SliceProviderPermissions(v21,SlicePermissionManager);
	Object v52 = this.mCachedProviders.put(v21, v50);
	SliceProviderPermissions v42 = phiInstruction;
	Uri v53 = ContentProvider.getUriWithoutUserId(v8);
	String v54 = v53.getAuthority();
	Object v56 = this.mAuths.get(v54);
	SliceProviderPermissions$SliceAuthority v55 = phiInstruction;
	boolean v58 = this.mPkgs.add(v19);
	this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
	long v60 = Binder.clearCallingIdentity();
	ContentResolver v61 = this.mContext.getContentResolver();
	v61.notifyChange(p1, 0);
	Binder.restoreCallingIdentity(v60);
	return;
}
