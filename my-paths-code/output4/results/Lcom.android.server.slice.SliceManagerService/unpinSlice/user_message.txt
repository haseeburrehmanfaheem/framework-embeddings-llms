This is path 1 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
	int v7 = v8;
	UserHandle v9 = Binder.getCallingUserHandle();
	int v10 = v9.getIdentifier();
	int v11 = ContentProvider.getUserIdFromUri(p2, v10);
	long v13 = Binder.clearCallingIdentity();
	Uri v14 = ContentProvider.getUriWithoutUserId(p2);
	String v15 = v14.getAuthority();
	PackageManager v16 = this.mContext.getPackageManager();
	int v17 = ContentProvider.getUserIdFromUri(p2, v11);
	ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
	Binder.restoreCallingIdentity(v13);
	String v12 = ProviderInfo.packageName;
	boolean v20 = Objects.equals(p1, v12);
	UserHandle v27 = Binder.getCallingUserHandle();
	int v28 = v27.getIdentifier();
	Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
	PinnedSliceState v30 = p0.getPinnedSlice(v29);
	boolean v32 = p3.unlinkToDeath(this.mDeathRecipient, 0);
	Object v33 = this.mListeners.remove(p3);
	boolean v35 = this.mPinnedPkgs.isEmpty();
	boolean v36 = this.mListeners.isEmpty();
	boolean v34 = phiInstruction;
	boolean v31 = (v34 ^ 1);
	Object v38 = this.mPinnedSlicesByUri.remove(v29);
	PinnedSliceState.setSlicePinned(0);
	return;
}

This is path 2 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
	int v7 = v8;
	UserHandle v9 = Binder.getCallingUserHandle();
	int v10 = v9.getIdentifier();
	int v11 = ContentProvider.getUserIdFromUri(p2, v10);
	long v13 = Binder.clearCallingIdentity();
	Uri v14 = ContentProvider.getUriWithoutUserId(p2);
	String v15 = v14.getAuthority();
	PackageManager v16 = this.mContext.getPackageManager();
	int v17 = ContentProvider.getUserIdFromUri(p2, v11);
	ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
	Binder.restoreCallingIdentity(v13);
	String v12 = ProviderInfo.packageName;
	boolean v20 = Objects.equals(p1, v12);
	UserHandle v27 = Binder.getCallingUserHandle();
	int v28 = v27.getIdentifier();
	Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
	PinnedSliceState v30 = p0.getPinnedSlice(v29);
	boolean v32 = p3.unlinkToDeath(this.mDeathRecipient, 0);
	Object v33 = this.mListeners.remove(p3);
	boolean v35 = this.mPinnedPkgs.isEmpty();
	boolean v36 = this.mListeners.isEmpty();
	boolean v34 = phiInstruction;
	boolean v31 = (v34 ^ 1);
	Object v38 = this.mPinnedSlicesByUri.remove(v29);
	PinnedSliceState.setSlicePinned(0);
	return;
}

This is path 3 for the API with depth 2:
public void unpinSlice(String p1, Uri p2, IBinder p3){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
	int v7 = v8;
	UserHandle v9 = Binder.getCallingUserHandle();
	int v10 = v9.getIdentifier();
	int v11 = ContentProvider.getUserIdFromUri(p2, v10);
	long v13 = Binder.clearCallingIdentity();
	Uri v14 = ContentProvider.getUriWithoutUserId(p2);
	String v15 = v14.getAuthority();
	PackageManager v16 = this.mContext.getPackageManager();
	int v17 = ContentProvider.getUserIdFromUri(p2, v11);
	ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
	Binder.restoreCallingIdentity(v13);
	String v12 = ProviderInfo.packageName;
	boolean v20 = Objects.equals(p1, v12);
	UserHandle v25 = Binder.getCallingUserHandle();
	int v26 = v25.getIdentifier();
	Uri v27 = ContentProvider.maybeAddUserId(p2, v26);
	PinnedSliceState v28 = p0.getPinnedSlice(v27);
	boolean v30 = p3.unlinkToDeath(this.mDeathRecipient, 0);
	Object v31 = this.mListeners.remove(p3);
	boolean v33 = this.mPinnedPkgs.isEmpty();
	boolean v34 = this.mListeners.isEmpty();
	boolean v32 = phiInstruction;
	boolean v29 = (v32 ^ 1);
	Object v36 = this.mPinnedSlicesByUri.remove(v27);
	PinnedSliceState.setSlicePinned(0);
	return;
}
