The method checkSlicePermission has the following code snippet:

This is path 1 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v7 = ContentProvider.getUserIdFromUri(p1, v1);
	long v9 = Binder.clearCallingIdentity();
	Uri v10 = ContentProvider.getUriWithoutUserId(p1);
	String v11 = v10.getAuthority();
	PackageManager v12 = this.mContext.getPackageManager();
	int v13 = ContentProvider.getUserIdFromUri(p1, v7);
	ProviderInfo v14 = v12.resolveContentProviderAsUser(v11, 0, v13);
	Binder.restoreCallingIdentity(v9);
	String v8 = ProviderInfo.packageName;
	SlicePermissionManager$PkgUser v17 = new SlicePermissionManager$PkgUser(p3,v1);
	SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(v8,v7);
	Object v22 = this.mCachedClients.get(v17);
	String v23 = SliceClientPermissions.getFileName(v17);
	SlicePermissionManager$ParserHolder v24 = SlicePermissionManager.getParser(v23);
	XmlPullParser v25 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v24);
	v24.close();
	caughtException.addSuppressed(caughtException);
	int v28 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v29 = new SliceClientPermissions(v17,SlicePermissionManager);
	Object v31 = this.mCachedClients.put(v17, v29);
	SliceClientPermissions v21 = phiInstruction;
	SlicePermissionManager$PkgUser v33 = new SlicePermissionManager$PkgUser(v34,v35);
	String v34 = p5.getAuthority();
	int v35 = v19.getUserId();
	SliceClientPermissions$SliceAuthority v37 = SliceClientPermissions.getOrCreateAuthority(v33, v19);
	List v38 = p5.getPathSegments();
	v37.addPath(v38);
	Object v41 = this.mCachedProviders.get(v19);
	String v42 = SliceProviderPermissions.getFileName(v19);
	SlicePermissionManager$ParserHolder v43 = SlicePermissionManager.getParser(v42);
	XmlPullParser v44 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v43);
	v43.close();
	caughtException.addSuppressed(caughtException);
	int v47 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v48 = new SliceProviderPermissions(v19,SlicePermissionManager);
	Object v50 = this.mCachedProviders.put(v19, v48);
	SliceProviderPermissions v40 = phiInstruction;
	Uri v51 = ContentProvider.getUriWithoutUserId(p1);
	String v52 = v51.getAuthority();
	Object v54 = this.mAuths.get(v52);
	SliceProviderPermissions$SliceAuthority v55 = new SliceProviderPermissions$SliceAuthority(v52,SliceProviderPermissions);
	Object v57 = this.mAuths.put(v52, v55);
	SliceProviderPermissions.onPersistableDirty(v55);
	SliceProviderPermissions$SliceAuthority v53 = phiInstruction;
	boolean v60 = this.mPkgs.add(v17);
	this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
	return 0;
}
This is path 2 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v7 = ContentProvider.getUserIdFromUri(p1, v1);
	long v9 = Binder.clearCallingIdentity();
	Uri v10 = ContentProvider.getUriWithoutUserId(p1);
	String v11 = v10.getAuthority();
	PackageManager v12 = this.mContext.getPackageManager();
	int v13 = ContentProvider.getUserIdFromUri(p1, v7);
	ProviderInfo v14 = v12.resolveContentProviderAsUser(v11, 0, v13);
	Binder.restoreCallingIdentity(v9);
	String v8 = ProviderInfo.packageName;
	SlicePermissionManager$PkgUser v17 = new SlicePermissionManager$PkgUser(p3,v1);
	SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(v8,v7);
	Object v22 = this.mCachedClients.get(v17);
	String v23 = SliceClientPermissions.getFileName(v17);
	SlicePermissionManager$ParserHolder v24 = SlicePermissionManager.getParser(v23);
	XmlPullParser v25 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v24);
	v24.close();
	caughtException.addSuppressed(caughtException);
	int v28 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v29 = new SliceClientPermissions(v17,SlicePermissionManager);
	Object v31 = this.mCachedClients.put(v17, v29);
	SliceClientPermissions v21 = phiInstruction;
	SlicePermissionManager$PkgUser v33 = new SlicePermissionManager$PkgUser(v34,v35);
	String v34 = p5.getAuthority();
	int v35 = v19.getUserId();
	SliceClientPermissions$SliceAuthority v37 = SliceClientPermissions.getOrCreateAuthority(v33, v19);
	List v38 = p5.getPathSegments();
	v37.addPath(v38);
	Object v41 = this.mCachedProviders.get(v19);
	String v42 = SliceProviderPermissions.getFileName(v19);
	SlicePermissionManager$ParserHolder v43 = SlicePermissionManager.getParser(v42);
	XmlPullParser v44 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v43);
	v43.close();
	caughtException.addSuppressed(caughtException);
	int v47 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v48 = new SliceProviderPermissions(v19,SlicePermissionManager);
	Object v50 = this.mCachedProviders.put(v19, v48);
	SliceProviderPermissions v40 = phiInstruction;
	Uri v51 = ContentProvider.getUriWithoutUserId(p1);
	String v52 = v51.getAuthority();
	Object v54 = this.mAuths.get(v52);
	SliceProviderPermissions$SliceAuthority v55 = new SliceProviderPermissions$SliceAuthority(v52,SliceProviderPermissions);
	Object v57 = this.mAuths.put(v52, v55);
	SliceProviderPermissions.onPersistableDirty(v55);
	SliceProviderPermissions$SliceAuthority v53 = phiInstruction;
	boolean v60 = this.mPkgs.add(v17);
	return 0;
}
This is path 3 for the API with depth 2:
public int checkSlicePermission(Uri p1, String p2, String p3, int p4, int p5, String p6){
	int v7 = ContentProvider.getUserIdFromUri(p1, v1);
	long v9 = Binder.clearCallingIdentity();
	Uri v10 = ContentProvider.getUriWithoutUserId(p1);
	String v11 = v10.getAuthority();
	PackageManager v12 = this.mContext.getPackageManager();
	int v13 = ContentProvider.getUserIdFromUri(p1, v7);
	ProviderInfo v14 = v12.resolveContentProviderAsUser(v11, 0, v13);
	Binder.restoreCallingIdentity(v9);
	String v8 = ProviderInfo.packageName;
	SlicePermissionManager$PkgUser v17 = new SlicePermissionManager$PkgUser(p3,v1);
	SlicePermissionManager$PkgUser v19 = new SlicePermissionManager$PkgUser(v8,v7);
	Object v22 = this.mCachedClients.get(v17);
	String v23 = SliceClientPermissions.getFileName(v17);
	SlicePermissionManager$ParserHolder v24 = SlicePermissionManager.getParser(v23);
	XmlPullParser v25 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v24);
	v24.close();
	caughtException.addSuppressed(caughtException);
	int v28 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v29 = new SliceClientPermissions(v17,SlicePermissionManager);
	Object v31 = this.mCachedClients.put(v17, v29);
	SliceClientPermissions v21 = phiInstruction;
	SlicePermissionManager$PkgUser v33 = new SlicePermissionManager$PkgUser(v34,v35);
	String v34 = p5.getAuthority();
	int v35 = v19.getUserId();
	SliceClientPermissions$SliceAuthority v37 = SliceClientPermissions.getOrCreateAuthority(v33, v19);
	List v38 = p5.getPathSegments();
	v37.addPath(v38);
	Object v41 = this.mCachedProviders.get(v19);
	String v42 = SliceProviderPermissions.getFileName(v19);
	SlicePermissionManager$ParserHolder v43 = SlicePermissionManager.getParser(v42);
	XmlPullParser v44 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v43);
	v43.close();
	caughtException.addSuppressed(caughtException);
	int v47 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v48 = new SliceProviderPermissions(v19,SlicePermissionManager);
	Object v50 = this.mCachedProviders.put(v19, v48);
	SliceProviderPermissions v40 = phiInstruction;
	Uri v51 = ContentProvider.getUriWithoutUserId(p1);
	String v52 = v51.getAuthority();
	Object v54 = this.mAuths.get(v52);
	SliceProviderPermissions$SliceAuthority v53 = phiInstruction;
	boolean v56 = this.mPkgs.add(v17);
	this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
	return 0;
}

and the following sink code:
['int v7 = ContentProvider.getUserIdFromUri(p1, v1);\nlong v9 = Binder.clearCallingIdentity();\nUri v10 = ContentProvider.getUriWithoutUserId(p1);\nString v11 = v10.getAuthority();\nPackageManager v12 = this.mContext.getPackageManager();\nint v13 = ContentProvider.getUserIdFromUri(p1, v7);\nProviderInfo v14 = v12.resolveContentProviderAsUser(v11, 0, v13);\nBinder.restoreCallingIdentity(v9);\nString v8 = ProviderInfo.packageName;\nSlicePermissionManager$PkgUser v17 = new SlicePermissionManager$PkgUser(p3,v1);\nObject v31 = this.mCachedClients.put(v17, v29);', 'SliceClientPermissions$SliceAuthority v37 = SliceClientPermissions.getOrCreateAuthority(v33, v19);\nList v38 = p5.getPathSegments();\nv37.addPath(v38);\nObject v41 = this.mCachedProviders.get(v19);\nString v42 = SliceProviderPermissions.getFileName(v19);\nSlicePermissionManager$ParserHolder v43 = SlicePermissionManager.getParser(v42);\nXmlPullParser v44 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v43);\nv43.close();', 'Uri v51 = ContentProvider.getUriWithoutUserId(p1);\nString v52 = v51.getAuthority();\nObject v54 = this.mAuths.get(v52);\nSliceProviderPermissions$SliceAuthority v55 = new SliceProviderPermissions$SliceAuthority(v52,SliceProviderPermissions);\nObject v57 = this.mAuths.put(v52, v55);']

The method checkSlicePermission has the following similar APIs:

- API Name: grantPermissionFromUser(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V with Similarity Score: 0.9715559482574463
  - Access Control Level: SYS_OR_SIG and the following code:
Uri v53 = ContentProvider.getUriWithoutUserId(v8);
String v54 = v53.getAuthority();
Object v56 = this.mAuths.get(v54);
SliceProviderPermissions$SliceAuthority v57 = new SliceProviderPermissions$SliceAuthority(v54,SliceProviderPermissions);
Object v59 = this.mAuths.put(v54, v57);

- API Name: revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.8672658205032349
  - Access Control Level: NONE and the following code:
SliceClientPermissions$SliceAuthority v28 = SliceClientPermissions.getOrCreateAuthority(v24, v10);
List v29 = p5.getPathSegments();
v28.removePath(v29);

