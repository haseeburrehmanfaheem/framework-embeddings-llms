This is path 1 for the API with depth 2:
public void grantSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	String v14 = SliceClientPermissions.getFileName(v8);
	SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
	XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
	v15.close();
	caughtException.addSuppressed(caughtException);
	int v19 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v20 = new SliceClientPermissions(v8,SlicePermissionManager);
	Object v22 = this.mCachedClients.put(v8, v20);
	SliceClientPermissions v12 = phiInstruction;
	SlicePermissionManager$PkgUser v24 = new SlicePermissionManager$PkgUser(v25,v26);
	String v25 = p5.getAuthority();
	int v26 = v10.getUserId();
	SliceClientPermissions$SliceAuthority v28 = SliceClientPermissions.getOrCreateAuthority(v24, v10);
	List v29 = p5.getPathSegments();
	v28.addPath(v29);
	Object v32 = this.mCachedProviders.get(v10);
	String v33 = SliceProviderPermissions.getFileName(v10);
	SlicePermissionManager$ParserHolder v34 = SlicePermissionManager.getParser(v33);
	XmlPullParser v35 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v34);
	v34.close();
	caughtException.addSuppressed(caughtException);
	int v38 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v39 = new SliceProviderPermissions(v10,SlicePermissionManager);
	Object v41 = this.mCachedProviders.put(v10, v39);
	SliceProviderPermissions v31 = phiInstruction;
	Uri v42 = ContentProvider.getUriWithoutUserId(p3);
	String v43 = v42.getAuthority();
	Object v45 = this.mAuths.get(v43);
	SliceProviderPermissions$SliceAuthority v46 = new SliceProviderPermissions$SliceAuthority(v43,SliceProviderPermissions);
	Object v48 = this.mAuths.put(v43, v46);
	SliceProviderPermissions.onPersistableDirty(v46);
	SliceProviderPermissions$SliceAuthority v44 = phiInstruction;
	boolean v51 = this.mPkgs.add(v8);
	this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
	return;
}

This is path 2 for the API with depth 2:
public void grantSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	String v14 = SliceClientPermissions.getFileName(v8);
	SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
	XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
	v15.close();
	caughtException.addSuppressed(caughtException);
	int v19 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v20 = new SliceClientPermissions(v8,SlicePermissionManager);
	Object v22 = this.mCachedClients.put(v8, v20);
	SliceClientPermissions v12 = phiInstruction;
	SlicePermissionManager$PkgUser v24 = new SlicePermissionManager$PkgUser(v25,v26);
	String v25 = p5.getAuthority();
	int v26 = v10.getUserId();
	SliceClientPermissions$SliceAuthority v28 = SliceClientPermissions.getOrCreateAuthority(v24, v10);
	List v29 = p5.getPathSegments();
	v28.addPath(v29);
	Object v32 = this.mCachedProviders.get(v10);
	String v33 = SliceProviderPermissions.getFileName(v10);
	SlicePermissionManager$ParserHolder v34 = SlicePermissionManager.getParser(v33);
	XmlPullParser v35 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v34);
	v34.close();
	caughtException.addSuppressed(caughtException);
	int v38 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v39 = new SliceProviderPermissions(v10,SlicePermissionManager);
	Object v41 = this.mCachedProviders.put(v10, v39);
	SliceProviderPermissions v31 = phiInstruction;
	Uri v42 = ContentProvider.getUriWithoutUserId(p3);
	String v43 = v42.getAuthority();
	Object v45 = this.mAuths.get(v43);
	SliceProviderPermissions$SliceAuthority v46 = new SliceProviderPermissions$SliceAuthority(v43,SliceProviderPermissions);
	Object v48 = this.mAuths.put(v43, v46);
	SliceProviderPermissions.onPersistableDirty(v46);
	SliceProviderPermissions$SliceAuthority v44 = phiInstruction;
	boolean v51 = this.mPkgs.add(v8);
	return;
}

This is path 3 for the API with depth 2:
public void grantSlicePermission(String p1, String p2, Uri p3){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	p0.enforceOwner(p1, p3, v5);
	SlicePermissionManager$PkgUser v8 = new SlicePermissionManager$PkgUser(p2,v5);
	SlicePermissionManager$PkgUser v10 = new SlicePermissionManager$PkgUser(p1,v5);
	Object v13 = this.mCachedClients.get(v8);
	String v14 = SliceClientPermissions.getFileName(v8);
	SlicePermissionManager$ParserHolder v15 = SlicePermissionManager.getParser(v14);
	XmlPullParser v16 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v15);
	v15.close();
	caughtException.addSuppressed(caughtException);
	int v19 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v20 = new SliceClientPermissions(v8,SlicePermissionManager);
	Object v22 = this.mCachedClients.put(v8, v20);
	SliceClientPermissions v12 = phiInstruction;
	SlicePermissionManager$PkgUser v24 = new SlicePermissionManager$PkgUser(v25,v26);
	String v25 = p5.getAuthority();
	int v26 = v10.getUserId();
	SliceClientPermissions$SliceAuthority v28 = SliceClientPermissions.getOrCreateAuthority(v24, v10);
	List v29 = p5.getPathSegments();
	v28.addPath(v29);
	Object v32 = this.mCachedProviders.get(v10);
	String v33 = SliceProviderPermissions.getFileName(v10);
	SlicePermissionManager$ParserHolder v34 = SlicePermissionManager.getParser(v33);
	XmlPullParser v35 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v34);
	v34.close();
	caughtException.addSuppressed(caughtException);
	int v38 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v39 = new SliceProviderPermissions(v10,SlicePermissionManager);
	Object v41 = this.mCachedProviders.put(v10, v39);
	SliceProviderPermissions v31 = phiInstruction;
	Uri v42 = ContentProvider.getUriWithoutUserId(p3);
	String v43 = v42.getAuthority();
	Object v45 = this.mAuths.get(v43);
	SliceProviderPermissions$SliceAuthority v44 = phiInstruction;
	boolean v47 = this.mPkgs.add(v8);
	this.mTracker.onPersistableDirty(SliceProviderPermissions$SliceAuthority);
	return;
}
