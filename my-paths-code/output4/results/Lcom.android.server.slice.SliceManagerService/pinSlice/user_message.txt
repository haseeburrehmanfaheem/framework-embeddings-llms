This is path 1 for the API with depth 2:
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
	int v7 = v8;
	UserHandle v9 = Binder.getCallingUserHandle();
	int v10 = v9.getIdentifier();
	int v11 = ContentProvider.getUserIdFromUri(p2, v10);
	long v13 = Binder.clearCallingIdentity();
	Uri v14 = ContentProvider.getUriWithoutUserId(p2);
	String v15 = v14.getAuthority();
	PackageManager v16 = this.mContext.getPackageManager();
	int v17 = ContentProvider.getUserIdFromUri(p2, v11);
	ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
	Binder.restoreCallingIdentity(v13);
	String v12 = ProviderInfo.packageName;
	boolean v20 = Objects.equals(p1, v12);
	UserHandle v27 = Binder.getCallingUserHandle();
	int v28 = v27.getIdentifier();
	Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
	String v30 = p0.getProviderPkg(v29, v28);
	Object v32 = this.mPinnedSlicesByUri.get(v29);
	PinnedSliceState v34 = new PinnedSliceState(SliceManagerService,p1,p2);
	PinnedSliceState v33 = v34;
	Object v36 = this.mPinnedSlicesByUri.put(v29, v33);
	PinnedSliceState v31 = phiInstruction;
	PinnedSliceState$ListenerInfo v38 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v39,v40);
	int v39 = Binder.getCallingUid();
	int v40 = Binder.getCallingPid();
	Object v42 = this.mListeners.put(p4, v38);
	p4.linkToDeath(this.mDeathRecipient, 0);
	List v45 = Arrays.asList(this.mSupportedSpecs);
	Stream v46 = v45.stream();
	PinnedSliceState$$ExternalSyntheticLambda1 v47 = new PinnedSliceState$$ExternalSyntheticLambda1(PinnedSliceState,p2);
	Stream v49 = v46.map(v47);
	PinnedSliceState$$ExternalSyntheticLambda2 v50 = new PinnedSliceState$$ExternalSyntheticLambda2();
	Stream v52 = v49.filter(v50);
	PinnedSliceState$$ExternalSyntheticLambda3 v53 = new PinnedSliceState$$ExternalSyntheticLambda3();
	Object v55 = v52.toArray(v53);
	this.mSupportedSpecs = v55;
	this.mSlicePinned = 1;
	Handler v57 = this.mService.getHandler();
	PinnedSliceState$$ExternalSyntheticLambda4 v58 = new PinnedSliceState$$ExternalSyntheticLambda4(PinnedSliceState);
	boolean v60 = v57.post(v58);
	SliceManagerService$$ExternalSyntheticLambda0 v61 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v30,p1,v28);
	boolean v63 = this.mHandler.post(v61);
	return;
}

This is path 2 for the API with depth 2:
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
	int v7 = v8;
	UserHandle v9 = Binder.getCallingUserHandle();
	int v10 = v9.getIdentifier();
	int v11 = ContentProvider.getUserIdFromUri(p2, v10);
	long v13 = Binder.clearCallingIdentity();
	Uri v14 = ContentProvider.getUriWithoutUserId(p2);
	String v15 = v14.getAuthority();
	PackageManager v16 = this.mContext.getPackageManager();
	int v17 = ContentProvider.getUserIdFromUri(p2, v11);
	ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
	Binder.restoreCallingIdentity(v13);
	String v12 = ProviderInfo.packageName;
	boolean v20 = Objects.equals(p1, v12);
	UserHandle v27 = Binder.getCallingUserHandle();
	int v28 = v27.getIdentifier();
	Uri v29 = ContentProvider.maybeAddUserId(p2, v28);
	String v30 = p0.getProviderPkg(v29, v28);
	Object v32 = this.mPinnedSlicesByUri.get(v29);
	PinnedSliceState v34 = new PinnedSliceState(SliceManagerService,p1,p2);
	PinnedSliceState v33 = v34;
	Object v36 = this.mPinnedSlicesByUri.put(v29, v33);
	PinnedSliceState v31 = phiInstruction;
	PinnedSliceState$ListenerInfo v38 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v39,v40);
	int v39 = Binder.getCallingUid();
	int v40 = Binder.getCallingPid();
	Object v42 = this.mListeners.put(p4, v38);
	p4.linkToDeath(this.mDeathRecipient, 0);
	List v45 = Arrays.asList(this.mSupportedSpecs);
	Stream v46 = v45.stream();
	PinnedSliceState$$ExternalSyntheticLambda1 v47 = new PinnedSliceState$$ExternalSyntheticLambda1(PinnedSliceState,p2);
	Stream v49 = v46.map(v47);
	PinnedSliceState$$ExternalSyntheticLambda2 v50 = new PinnedSliceState$$ExternalSyntheticLambda2();
	Stream v52 = v49.filter(v50);
	PinnedSliceState$$ExternalSyntheticLambda3 v53 = new PinnedSliceState$$ExternalSyntheticLambda3();
	Object v55 = v52.toArray(v53);
	this.mSupportedSpecs = v55;
	this.mSlicePinned = 1;
	Handler v57 = this.mService.getHandler();
	PinnedSliceState$$ExternalSyntheticLambda5 v58 = new PinnedSliceState$$ExternalSyntheticLambda5(PinnedSliceState);
	boolean v60 = v57.post(v58);
	SliceManagerService$$ExternalSyntheticLambda0 v61 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v30,p1,v28);
	boolean v63 = this.mHandler.post(v61);
	return;
}

This is path 3 for the API with depth 2:
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	int v5 = Binder.getCallingUid();
	int v6 = Binder.getCallingPid();
	int v8 = SliceManagerService.checkSlicePermission(p2, 0, p1, v6, v5, 0);
	int v7 = v8;
	UserHandle v9 = Binder.getCallingUserHandle();
	int v10 = v9.getIdentifier();
	int v11 = ContentProvider.getUserIdFromUri(p2, v10);
	long v13 = Binder.clearCallingIdentity();
	Uri v14 = ContentProvider.getUriWithoutUserId(p2);
	String v15 = v14.getAuthority();
	PackageManager v16 = this.mContext.getPackageManager();
	int v17 = ContentProvider.getUserIdFromUri(p2, v11);
	ProviderInfo v18 = v16.resolveContentProviderAsUser(v15, 0, v17);
	Binder.restoreCallingIdentity(v13);
	String v12 = ProviderInfo.packageName;
	boolean v20 = Objects.equals(p1, v12);
	UserHandle v25 = Binder.getCallingUserHandle();
	int v26 = v25.getIdentifier();
	Uri v27 = ContentProvider.maybeAddUserId(p2, v26);
	String v28 = p0.getProviderPkg(v27, v26);
	Object v30 = this.mPinnedSlicesByUri.get(v27);
	PinnedSliceState v32 = new PinnedSliceState(SliceManagerService,p1,p2);
	PinnedSliceState v31 = v32;
	Object v34 = this.mPinnedSlicesByUri.put(v27, v31);
	PinnedSliceState v29 = phiInstruction;
	PinnedSliceState$ListenerInfo v36 = new PinnedSliceState$ListenerInfo(PinnedSliceState,p4,p1,1,v37,v38);
	int v37 = Binder.getCallingUid();
	int v38 = Binder.getCallingPid();
	Object v40 = this.mListeners.put(p4, v36);
	p4.linkToDeath(this.mDeathRecipient, 0);
	List v43 = Arrays.asList(this.mSupportedSpecs);
	Stream v44 = v43.stream();
	PinnedSliceState$$ExternalSyntheticLambda1 v45 = new PinnedSliceState$$ExternalSyntheticLambda1(PinnedSliceState,p2);
	Stream v47 = v44.map(v45);
	PinnedSliceState$$ExternalSyntheticLambda2 v48 = new PinnedSliceState$$ExternalSyntheticLambda2();
	Stream v50 = v47.filter(v48);
	PinnedSliceState$$ExternalSyntheticLambda3 v51 = new PinnedSliceState$$ExternalSyntheticLambda3();
	Object v53 = v50.toArray(v51);
	this.mSupportedSpecs = v53;
	this.mSlicePinned = 1;
	Handler v55 = this.mService.getHandler();
	PinnedSliceState$$ExternalSyntheticLambda4 v56 = new PinnedSliceState$$ExternalSyntheticLambda4(PinnedSliceState);
	boolean v58 = v55.post(v56);
	SliceManagerService$$ExternalSyntheticLambda0 v59 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v28,p1,v26);
	boolean v61 = this.mHandler.post(v59);
	return;
}
