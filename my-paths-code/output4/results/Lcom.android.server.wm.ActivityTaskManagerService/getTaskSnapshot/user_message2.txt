The method getTaskSnapshot has the following code snippet:

This is path 1 for the API with depth 2:
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
	Integer v11 = Integer.valueOf(p1);
	PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
	Task v13 = RootWindowContainer.getTask(v12);
	v12.recycle();
	Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
	Task v16 = v13.getRootTask();
	boolean v17 = v13.reparent(v15, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v7 = v13;
	Task v6 = v7;
	boolean v22 = this.mEnableLowResSnapshots;
	WindowManagerService.boostPriorityForLockedSection();
	Integer v25 = Integer.valueOf(p1);
	Object v26 = this.mRunningCache.get(v25);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v28 = TaskSnapshotCache.tryRestoreFromDisk(p1, p2, phiInstruction);
	TaskSnapshot v23 = v28;
	TaskSnapshot v21 = v23;
	long v31 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	Task v35 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
	Task v34 = v35;
	int v37 = this.mChildren.size();
	Object v38 = this.mChildren.get(phiInstruction);
	boolean v39 = v38.isVisible();
	boolean v36 = 1;
	int v41 = TaskSnapshotController.getSnapshotMode(v34);
	TaskSnapshot v40 = phiInstruction;
	this.sThreadPriorityBooster.reset();
	Binder.restoreCallingIdentity(v31);
	TaskSnapshot v29 = phiInstruction;
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
This is path 2 for the API with depth 2:
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
	Integer v12 = Integer.valueOf(p1);
	PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
	Task v14 = RootWindowContainer.getTask(v13);
	v13.recycle();
	Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
	Task v17 = v14.getRootTask();
	boolean v18 = v14.reparent(v16, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v8 = v14;
	Task v7 = v8;
	boolean v23 = this.mEnableLowResSnapshots;
	WindowManagerService.boostPriorityForLockedSection();
	Integer v26 = Integer.valueOf(p1);
	Object v27 = this.mRunningCache.get(v26);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v29 = TaskSnapshotCache.tryRestoreFromDisk(p1, p2, phiInstruction);
	TaskSnapshot v24 = v29;
	TaskSnapshot v22 = v24;
	long v32 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	Task v36 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
	Task v35 = v36;
	int v38 = this.mChildren.size();
	Object v39 = this.mChildren.get(phiInstruction);
	boolean v40 = v39.isVisible();
	boolean v37 = 1;
	int v42 = TaskSnapshotController.getSnapshotMode(v35);
	TaskSnapshot v41 = phiInstruction;
	this.sThreadPriorityBooster.reset();
	Binder.restoreCallingIdentity(v32);
	TaskSnapshot v30 = phiInstruction;
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
This is path 3 for the API with depth 2:
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
	Integer v11 = Integer.valueOf(p1);
	PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
	Task v13 = RootWindowContainer.getTask(v12);
	v12.recycle();
	Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
	Task v16 = v13.getRootTask();
	boolean v17 = v13.reparent(v15, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v7 = v13;
	Task v6 = v7;
	WindowManagerThreadPriorityBooster.reset();
	boolean v23 = this.mEnableLowResSnapshots;
	WindowManagerService.boostPriorityForLockedSection();
	Integer v26 = Integer.valueOf(p1);
	Object v27 = this.mRunningCache.get(v26);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v29 = TaskSnapshotCache.tryRestoreFromDisk(p1, p2, phiInstruction);
	TaskSnapshot v24 = v29;
	TaskSnapshot v22 = v24;
	long v32 = Binder.clearCallingIdentity();
	this.sThreadPriorityBooster.boost();
	Task v36 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);
	Task v35 = v36;
	int v38 = this.mChildren.size();
	Object v39 = this.mChildren.get(phiInstruction);
	boolean v40 = v39.isVisible();
	boolean v37 = 1;
	int v42 = TaskSnapshotController.getSnapshotMode(v35);
	TaskSnapshot v41 = phiInstruction;
	this.sThreadPriorityBooster.reset();
	Binder.restoreCallingIdentity(v32);
	TaskSnapshot v30 = phiInstruction;
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}

and the following sink code:
['PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);\nTask v13 = RootWindowContainer.getTask(v12);\nv12.recycle();\nTaskSnapshot v29 = TaskSnapshotCache.tryRestoreFromDisk(p1, p2, phiInstruction);\nreturn phiInstruction;', 'Integer v11 = Integer.valueOf(p1);\nObject v27 = this.mRunningCache.get(v26);', 'Task v36 = RootWindowContainer.anyTaskForId(p1, 1, 0, 0);\nint v42 = TaskSnapshotController.getSnapshotMode(v35);']

The method getTaskSnapshot has the following similar APIs:

- API Name: resizeTask(ILandroid/graphics/Rect;I)Z with Similarity Score: 0.9212175607681274
  - Access Control Level: SYS_OR_SIG and the following code:
PooledPredicate v15 = PooledLambda.obtainPredicate(v11, v13, v14);
Task v16 = RootWindowContainer.getTask(v15);
v15.recycle();
boolean v20 = v16.reparent(v18, 0, phiInstruction, 1, 1, "anyTaskForId");

- API Name: startSystemLockTaskMode(I)V with Similarity Score: 0.9138574600219727
  - Access Control Level: SYS_OR_SIG and the following code:
PooledPredicate v15 = PooledLambda.obtainPredicate(v11, v13, v14);
Task v16 = RootWindowContainer.getTask(v15);
v15.recycle();
Task v18 = RootWindowContainer.getOrCreateRootTask(0, 0, v16, 0);
boolean v20 = v16.reparent(v18, 0, phiInstruction, 1, 1, "anyTaskForId");

