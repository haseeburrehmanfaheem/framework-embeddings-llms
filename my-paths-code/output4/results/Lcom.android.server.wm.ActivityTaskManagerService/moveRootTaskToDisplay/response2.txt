Based on the provided information, we can analyze the access control level for the `moveRootTaskToDisplay` API.

The API interacts with sensitive components such as `RootWindowContainer`, `DisplayManager`, and `TaskDisplayArea`, which are related to window management and task handling. The sink code snippets also indicate that the API is capable of reparenting tasks and accessing display contents, which requires elevated privileges.

The similar APIs provided, `onPictureInPictureStateChanged` and `startActivityAsUser`, have an access control level of `SYS_OR_SIG`. These APIs also interact with sensitive components such as `TaskDisplayArea` and `ActivityRecord`, and require elevated privileges to perform their functions.

Given the similarities between these APIs and the `moveRootTaskToDisplay` API, it is reasonable to conclude that the access control level for `moveRootTaskToDisplay` should also be `SYS_OR_SIG`. This is because all three APIs interact with sensitive components and require elevated privileges to perform their functions, which aligns with the characteristics of the `SYS_OR_SIG` access control level.

Here is the final access control level in JSON format:

```json
{
  "access_control_level": "SYS_OR_SIG"
}
```