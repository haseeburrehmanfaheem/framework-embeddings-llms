This is path 1 for the API with depth 2:
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	AppTransition$$ExternalSyntheticLambda2 v7 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v9 = PooledLambda.__(Tas.class);
	Integer v10 = Integer.valueOf(p1);
	PooledPredicate v11 = PooledLambda.obtainPredicate(v7, v9, v10);
	Task v12 = RootWindowContainer.getTask(v11);
	v11.recycle();
	Task v14 = RootWindowContainer.getOrCreateRootTask(0, 0, v12, 0);
	Task v15 = v12.getRootTask();
	boolean v16 = v12.reparent(v14, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v6 = v12;
	Task v5 = v6;
	Task$$ExternalSyntheticLambda8 v18 = new Task$$ExternalSyntheticLambda8();
	ActivityRecord v21 = WindowContainer.getActivity(v18, 1);
	ActivityRecord v20 = v21;
	ActivityRecord v17 = v20;
	ActivityTaskManagerService.mH.removeCallbacks(this.mTransferSplashScreenTimeoutRunnable);
	SurfaceControl$Transaction v26 = this.mStartingWindow.getPendingTransaction();
	Rect v27 = this.mStartingWindow.getRelativeFrame();
	TaskOrganizerController$StartingWindowAnimationAdaptor v28 = new TaskOrganizerController$StartingWindowAnimationAdaptor();
	this.mStartingWindow.startAnimation(v26, v28, 0, 128);
	SurfaceControl v25 = 0;
	this.mTransferringSplashScreenState = 2;
	ClientLifecycleManager v38 = this.mLifecycleManager;
	int v46 = this.mSurfaceAnimator.getAnimationType();
	AnimationAdapter v47 = this.mSurfaceAnimator.getAnimation();
	WindowContainer.doAnimationFinished(v46, v47);
	this.mSurfaceAnimator.cancelAnimation();
	SurfaceControl$Transaction v50 = WindowContainer.getSyncTransaction();
	this.mSurfaceFreezer.unfreeze(v50);
	this.mIconBitmap.recycle();
	this.mIconBitmap = 0;
	this.mBrandingBitmap.recycle();
	this.mBrandingBitmap = 0;
	this.mTransferringSplashScreenState = 3;
	return;
}

This is path 2 for the API with depth 2:
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	WindowManagerThreadPriorityBooster.boost();
	AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
	Integer v11 = Integer.valueOf(p1);
	PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
	Task v13 = RootWindowContainer.getTask(v12);
	v12.recycle();
	Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
	Task v16 = v13.getRootTask();
	boolean v17 = v13.reparent(v15, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v7 = v13;
	Task v6 = v7;
	Task$$ExternalSyntheticLambda8 v19 = new Task$$ExternalSyntheticLambda8();
	ActivityRecord v22 = WindowContainer.getActivity(v19, 1);
	ActivityRecord v21 = v22;
	ActivityRecord v18 = v21;
	ActivityTaskManagerService.mH.removeCallbacks(this.mTransferSplashScreenTimeoutRunnable);
	SurfaceControl$Transaction v27 = this.mStartingWindow.getPendingTransaction();
	Rect v28 = this.mStartingWindow.getRelativeFrame();
	TaskOrganizerController$StartingWindowAnimationAdaptor v29 = new TaskOrganizerController$StartingWindowAnimationAdaptor();
	this.mStartingWindow.startAnimation(v27, v29, 0, 128);
	SurfaceControl v26 = 0;
	this.mTransferringSplashScreenState = 2;
	ClientLifecycleManager v39 = this.mLifecycleManager;
	int v47 = this.mSurfaceAnimator.getAnimationType();
	AnimationAdapter v48 = this.mSurfaceAnimator.getAnimation();
	WindowContainer.doAnimationFinished(v47, v48);
	this.mSurfaceAnimator.cancelAnimation();
	SurfaceControl$Transaction v51 = WindowContainer.getSyncTransaction();
	this.mSurfaceFreezer.unfreeze(v51);
	this.mIconBitmap.recycle();
	this.mIconBitmap = 0;
	this.mBrandingBitmap.recycle();
	this.mBrandingBitmap = 0;
	this.mTransferringSplashScreenState = 3;
	return;
}

This is path 3 for the API with depth 2:
public void onSplashScreenViewCopyFinished(int p1, SplashScreenView$SplashScreenViewParcelable p2){
	AppTransition$$ExternalSyntheticLambda2 v7 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v9 = PooledLambda.__(Tas.class);
	Integer v10 = Integer.valueOf(p1);
	PooledPredicate v11 = PooledLambda.obtainPredicate(v7, v9, v10);
	Task v12 = RootWindowContainer.getTask(v11);
	v11.recycle();
	Task v14 = RootWindowContainer.getOrCreateRootTask(0, 0, v12, 0);
	Task v15 = v12.getRootTask();
	boolean v16 = v12.reparent(v14, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v6 = v12;
	Task v5 = v6;
	Task$$ExternalSyntheticLambda8 v18 = new Task$$ExternalSyntheticLambda8();
	ActivityRecord v21 = WindowContainer.getActivity(v18, 1);
	ActivityRecord v20 = v21;
	ActivityRecord v17 = v20;
	ActivityTaskManagerService.mH.removeCallbacks(this.mTransferSplashScreenTimeoutRunnable);
	SurfaceControl$Transaction v26 = this.mStartingWindow.getPendingTransaction();
	Rect v27 = this.mStartingWindow.getRelativeFrame();
	TaskOrganizerController$StartingWindowAnimationAdaptor v28 = new TaskOrganizerController$StartingWindowAnimationAdaptor();
	this.mStartingWindow.startAnimation(v26, v28, 0, 128);
	SurfaceControl v25 = 0;
	this.mTransferringSplashScreenState = 2;
	ClientLifecycleManager v38 = this.mLifecycleManager;
	int v46 = this.mSurfaceAnimator.getAnimationType();
	AnimationAdapter v47 = this.mSurfaceAnimator.getAnimation();
	WindowContainer.doAnimationFinished(v46, v47);
	this.mSurfaceAnimator.cancelAnimation();
	SurfaceControl$Transaction v50 = WindowContainer.getSyncTransaction();
	this.mSurfaceFreezer.unfreeze(v50);
	this.mIconBitmap.recycle();
	this.mIconBitmap = 0;
	this.mBrandingBitmap.recycle();
	this.mBrandingBitmap = 0;
	this.mTransferringSplashScreenState = 3;
	WindowManagerThreadPriorityBooster.reset();
	return;
}
