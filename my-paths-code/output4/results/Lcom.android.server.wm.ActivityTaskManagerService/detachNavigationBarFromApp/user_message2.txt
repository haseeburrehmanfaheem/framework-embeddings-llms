The method detachNavigationBarFromApp has the following code snippet:

This is path 1 for the API with depth 2:
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	TransitionController v7 = this.mTransitionController;
	TransitionController v6 = v7;
	Transition v9 = p1;
	boolean v10 = this.mPlayingTransitions.contains(v9);
	this.mNavBarAttachedToApp = 0;
	this.mRecentsDisplayId = 0;
	TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
	DisplayContent v14 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
	DisplayPolicy v15 = v14.getDisplayPolicy();
	WindowState v16 = v15.getNavigationBar();
	v16.setSurfaceTranslationY(0);
	SurfaceControl$Transaction v18 = v14.getPendingTransaction();
	WindowContainer v19 = WindowState.mToken.getParent();
	SurfaceControl v20 = WindowState.mToken.getSurfaceControl();
	int v21 = WindowState.mToken.getLastLayer();
	SurfaceControl$Transaction v22 = v18.setLayer(v20, v21);
	int v23 = this.mTargets.size();
	Object v24 = this.mTargets.get(phiInstruction);
	Task v25 = v24.asTask();
	boolean v26 = v25.isActivityTypeHomeOrRecents();
	boolean v27 = v25.isVisibleRequested();
	NavBarFadeAnimationController v28 = new NavBarFadeAnimationController(v14);
	v28.fadeWindowToken(1);
	Binder.restoreCallingIdentity(v2);
	return;
}
This is path 2 for the API with depth 2:
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	TransitionController v8 = this.mTransitionController;
	TransitionController v7 = v8;
	Transition v10 = p1;
	boolean v11 = this.mPlayingTransitions.contains(v10);
	this.mNavBarAttachedToApp = 0;
	this.mRecentsDisplayId = 0;
	TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
	DisplayContent v15 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
	DisplayPolicy v16 = v15.getDisplayPolicy();
	WindowState v17 = v16.getNavigationBar();
	v17.setSurfaceTranslationY(0);
	SurfaceControl$Transaction v19 = v15.getPendingTransaction();
	WindowContainer v20 = WindowState.mToken.getParent();
	SurfaceControl v21 = WindowState.mToken.getSurfaceControl();
	int v22 = WindowState.mToken.getLastLayer();
	SurfaceControl$Transaction v23 = v19.setLayer(v21, v22);
	int v24 = this.mTargets.size();
	Object v25 = this.mTargets.get(phiInstruction);
	Task v26 = v25.asTask();
	boolean v27 = v26.isActivityTypeHomeOrRecents();
	boolean v28 = v26.isVisibleRequested();
	NavBarFadeAnimationController v29 = new NavBarFadeAnimationController(v15);
	v29.fadeWindowToken(1);
	Binder.restoreCallingIdentity(v2);
	return;
}
This is path 3 for the API with depth 2:
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	TransitionController v7 = this.mTransitionController;
	TransitionController v6 = v7;
	Transition v9 = p1;
	boolean v10 = this.mPlayingTransitions.contains(v9);
	this.mNavBarAttachedToApp = 0;
	this.mRecentsDisplayId = 0;
	TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
	DisplayContent v14 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
	DisplayPolicy v15 = v14.getDisplayPolicy();
	WindowState v16 = v15.getNavigationBar();
	v16.setSurfaceTranslationY(0);
	SurfaceControl$Transaction v18 = v14.getPendingTransaction();
	WindowContainer v19 = WindowState.mToken.getParent();
	SurfaceControl v20 = WindowState.mToken.getSurfaceControl();
	int v21 = WindowState.mToken.getLastLayer();
	SurfaceControl$Transaction v22 = v18.setLayer(v20, v21);
	int v23 = this.mTargets.size();
	Object v24 = this.mTargets.get(phiInstruction);
	Task v25 = v24.asTask();
	boolean v26 = v25.isActivityTypeHomeOrRecents();
	boolean v27 = v25.isVisibleRequested();
	NavBarFadeAnimationController v28 = new NavBarFadeAnimationController(v14);
	v28.fadeWindowToken(1);
	WindowManagerThreadPriorityBooster.reset();
	Binder.restoreCallingIdentity(v2);
	return;
}

and the following sink code:
['TransitionController v7 = this.mTransitionController;\nboolean v10 = this.mPlayingTransitions.contains(v9);\nthis.mNavBarAttachedToApp = 0;\nthis.mRecentsDisplayId = 0;\nTransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);\nDisplayContent v14 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);\nDisplayPolicy v15 = v14.getDisplayPolicy();\nWindowState v16 = v15.getNavigationBar();\nv16.setSurfaceTranslationY(0);', 'NavBarFadeAnimationController v28 = new NavBarFadeAnimationController(v14);\nv28.fadeWindowToken(1);']

The method detachNavigationBarFromApp has the following similar APIs:

- API Name: startBackNavigation(ZLandroid/view/IWindowFocusObserver;Landroid/window/BackAnimationAdaptor;)Landroid/window/BackNavigationInfo; with Similarity Score: 0.7415562272071838
  - Access Control Level: SYS_OR_SIG and the following code:
RecentsAnimationController v18 = this.mRecentsAnimationController;
boolean v19 = WindowState.mActivityRecord.isActivityTypeHomeOrRecents();
boolean v21 = this.mCollectingTransition.isTransientLaunch(WindowState.mActivityRecord);
boolean v24 = v23.isTransientLaunch(WindowState.mActivityRecord);

