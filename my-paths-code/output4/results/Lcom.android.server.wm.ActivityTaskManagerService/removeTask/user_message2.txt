The method removeTask has the following code snippet:

This is path 1 for the API with depth 2:
public boolean removeTask(int p1){
	long v5 = Binder.clearCallingIdentity();
	AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
	Integer v11 = Integer.valueOf(p1);
	PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
	Task v13 = RootWindowContainer.getTask(v12);
	v12.recycle();
	Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
	Task v16 = v13.getRootTask();
	boolean v17 = v13.reparent(v15, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v7 = v13;
	Task v6 = v7;
	int v19 = WindowContainer.mChildren.size();
	Object v20 = WindowContainer.mChildren.get(phiInstruction);
	Task v21 = 0;
	boolean v18 = 0;
	boolean v24 = p1.isVisibleRequested();
	boolean v25 = TransitionController.isCollecting();
	Transition v26 = TransitionController.createTransition(2, 0);
	Task v27 = p1.asTask();
	Transition v28 = TransitionController.requestStartTransition(v26, v27, 0, 0);
	TransitionController.collectExistenceChange(p1);
	Task.mInRemoveTask = 1;
	Task.clearPinnedTaskIfNeed();
	Task v32 = Task.getRootTask();
	Task$$ExternalSyntheticLambda2 v33 = new Task$$ExternalSyntheticLambda2(Task,0,p4);
	Task.forAllActivities(v33);
	this.mRecentTasks.remove(p1);
	Intent v38 = p1.getBaseIntent();
	ComponentName v39 = v38.getComponent();
	ActivityTaskSupervisor$$ExternalSyntheticLambda1 v40 = new ActivityTaskSupervisor$$ExternalSyntheticLambda1();
	Integer v42 = Integer.valueOf(Task.mUserId);
	Intent v43 = new Intent(v44);
	Intent v44 = p1.getBaseIntent();
	Message v46 = PooledLambda.obtainMessage(v40, ActivityTaskManagerService.mAmInternal, v42, v39, v43);
	boolean v47 = ActivityTaskManagerService.mH.sendMessage(v46);
	String v48 = v39.getPackageName();
	ArrayList v49 = new ArrayList();
	ArrayMap v51 = ActivityTaskManagerService.mProcessNames.getMap();
	int v52 = v51.size();
	Object v53 = v51.valueAt(phiInstruction);
	int v54 = v53.size();
	Object v55 = v53.valueAt(phiInstruction);
	boolean v56 = WindowProcessController.mPkgList.contains(v48);
	boolean v57 = v55.shouldKillProcessForRemovedTask(p1);
	LockTaskController v58 = this.mLockTaskController;
	boolean v60 = this.mLockTaskModeTasks.isEmpty();
	Object v61 = this.mLockTaskModeTasks.get(0);
	int v62 = this.mLockTaskModeTasks.size();
	LockTaskController.removeLockedTask(p1);
	boolean v64 = this.mLockTaskModeTasks.isEmpty();
	p1.performClearTaskForReuse(0);
	boolean v66 = ActivityTaskSupervisor.mRootWindowContainer.resumeFocusedTasksTopActivities();
	TaskChangeNotificationController v67 = this.mTaskChangeNotificationController;
	ActivityMetricsLogger v69 = this.mTaskSupervisor.getActivityMetricsLogger();
	v69.logWindowState();
	this.mHandler.removeMessages(2);
	Message v72 = this.mHandler.obtainMessage(2);
	TaskChangeNotificationController.forAllLocalListeners(this.mNotifyTaskStackChanged, v72);
	boolean v74 = this.mHandler.sendMessageDelayed(v72, 100);
	this.mRecentTasks.notifyTaskPersisterLocked(0, 1);
	Task.mInRemoveTask = 0;
	Binder.restoreCallingIdentity(v5);
	return 1;
}
This is path 2 for the API with depth 2:
public boolean removeTask(int p1){
	WindowManagerThreadPriorityBooster.boost();
	long v6 = Binder.clearCallingIdentity();
	AppTransition$$ExternalSyntheticLambda2 v9 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v11 = PooledLambda.__(Tas.class);
	Integer v12 = Integer.valueOf(p1);
	PooledPredicate v13 = PooledLambda.obtainPredicate(v9, v11, v12);
	Task v14 = RootWindowContainer.getTask(v13);
	v13.recycle();
	Task v16 = RootWindowContainer.getOrCreateRootTask(0, 0, v14, 0);
	Task v17 = v14.getRootTask();
	boolean v18 = v14.reparent(v16, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v8 = v14;
	Task v7 = v8;
	int v20 = WindowContainer.mChildren.size();
	Object v21 = WindowContainer.mChildren.get(phiInstruction);
	Task v22 = 0;
	boolean v19 = 0;
	boolean v25 = p1.isVisibleRequested();
	boolean v26 = TransitionController.isCollecting();
	Transition v27 = TransitionController.createTransition(2, 0);
	Task v28 = p1.asTask();
	Transition v29 = TransitionController.requestStartTransition(v27, v28, 0, 0);
	TransitionController.collectExistenceChange(p1);
	Task.mInRemoveTask = 1;
	Task.clearPinnedTaskIfNeed();
	Task v33 = Task.getRootTask();
	Task$$ExternalSyntheticLambda2 v34 = new Task$$ExternalSyntheticLambda2(Task,0,p4);
	Task.forAllActivities(v34);
	this.mRecentTasks.remove(p1);
	Intent v39 = p1.getBaseIntent();
	ComponentName v40 = v39.getComponent();
	ActivityTaskSupervisor$$ExternalSyntheticLambda1 v41 = new ActivityTaskSupervisor$$ExternalSyntheticLambda1();
	Integer v43 = Integer.valueOf(Task.mUserId);
	Intent v44 = new Intent(v45);
	Intent v45 = p1.getBaseIntent();
	Message v47 = PooledLambda.obtainMessage(v41, ActivityTaskManagerService.mAmInternal, v43, v40, v44);
	boolean v48 = ActivityTaskManagerService.mH.sendMessage(v47);
	String v49 = v40.getPackageName();
	ArrayList v50 = new ArrayList();
	ArrayMap v52 = ActivityTaskManagerService.mProcessNames.getMap();
	int v53 = v52.size();
	Object v54 = v52.valueAt(phiInstruction);
	int v55 = v54.size();
	Object v56 = v54.valueAt(phiInstruction);
	boolean v57 = WindowProcessController.mPkgList.contains(v49);
	boolean v58 = v56.shouldKillProcessForRemovedTask(p1);
	LockTaskController v59 = this.mLockTaskController;
	boolean v61 = this.mLockTaskModeTasks.isEmpty();
	Object v62 = this.mLockTaskModeTasks.get(0);
	int v63 = this.mLockTaskModeTasks.size();
	LockTaskController.removeLockedTask(p1);
	boolean v65 = this.mLockTaskModeTasks.isEmpty();
	p1.performClearTaskForReuse(0);
	boolean v67 = ActivityTaskSupervisor.mRootWindowContainer.resumeFocusedTasksTopActivities();
	TaskChangeNotificationController v68 = this.mTaskChangeNotificationController;
	ActivityMetricsLogger v70 = this.mTaskSupervisor.getActivityMetricsLogger();
	v70.logWindowState();
	this.mHandler.removeMessages(2);
	Message v73 = this.mHandler.obtainMessage(2);
	TaskChangeNotificationController.forAllLocalListeners(this.mNotifyTaskStackChanged, v73);
	boolean v75 = this.mHandler.sendMessageDelayed(v73, 100);
	this.mRecentTasks.notifyTaskPersisterLocked(0, 1);
	Task.mInRemoveTask = 0;
	Binder.restoreCallingIdentity(v6);
	return 1;
}
This is path 3 for the API with depth 2:
public boolean removeTask(int p1){
	long v5 = Binder.clearCallingIdentity();
	AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v10 = PooledLambda.__(Tas.class);
	Integer v11 = Integer.valueOf(p1);
	PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);
	Task v13 = RootWindowContainer.getTask(v12);
	v12.recycle();
	Task v15 = RootWindowContainer.getOrCreateRootTask(0, 0, v13, 0);
	Task v16 = v13.getRootTask();
	boolean v17 = v13.reparent(v15, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v7 = v13;
	Task v6 = v7;
	int v19 = WindowContainer.mChildren.size();
	Object v20 = WindowContainer.mChildren.get(phiInstruction);
	Task v21 = 0;
	boolean v18 = 0;
	boolean v24 = p1.isVisibleRequested();
	boolean v25 = TransitionController.isCollecting();
	Transition v26 = TransitionController.createTransition(2, 0);
	Task v27 = p1.asTask();
	Transition v28 = TransitionController.requestStartTransition(v26, v27, 0, 0);
	TransitionController.collectExistenceChange(p1);
	Task.mInRemoveTask = 1;
	Task.clearPinnedTaskIfNeed();
	Task v32 = Task.getRootTask();
	Task$$ExternalSyntheticLambda2 v33 = new Task$$ExternalSyntheticLambda2(Task,0,p4);
	Task.forAllActivities(v33);
	this.mRecentTasks.remove(p1);
	Intent v38 = p1.getBaseIntent();
	ComponentName v39 = v38.getComponent();
	ActivityTaskSupervisor$$ExternalSyntheticLambda1 v40 = new ActivityTaskSupervisor$$ExternalSyntheticLambda1();
	Integer v42 = Integer.valueOf(Task.mUserId);
	Intent v43 = new Intent(v44);
	Intent v44 = p1.getBaseIntent();
	Message v46 = PooledLambda.obtainMessage(v40, ActivityTaskManagerService.mAmInternal, v42, v39, v43);
	boolean v47 = ActivityTaskManagerService.mH.sendMessage(v46);
	String v48 = v39.getPackageName();
	ArrayList v49 = new ArrayList();
	ArrayMap v51 = ActivityTaskManagerService.mProcessNames.getMap();
	int v52 = v51.size();
	Object v53 = v51.valueAt(phiInstruction);
	int v54 = v53.size();
	Object v55 = v53.valueAt(phiInstruction);
	boolean v56 = WindowProcessController.mPkgList.contains(v48);
	boolean v57 = v55.shouldKillProcessForRemovedTask(p1);
	LockTaskController v58 = this.mLockTaskController;
	boolean v60 = this.mLockTaskModeTasks.isEmpty();
	Object v61 = this.mLockTaskModeTasks.get(0);
	int v62 = this.mLockTaskModeTasks.size();
	LockTaskController.removeLockedTask(p1);
	boolean v64 = this.mLockTaskModeTasks.isEmpty();
	p1.performClearTaskForReuse(0);
	boolean v66 = ActivityTaskSupervisor.mRootWindowContainer.resumeFocusedTasksTopActivities();
	TaskChangeNotificationController v67 = this.mTaskChangeNotificationController;
	ActivityMetricsLogger v69 = this.mTaskSupervisor.getActivityMetricsLogger();
	v69.logWindowState();
	this.mHandler.removeMessages(2);
	Message v72 = this.mHandler.obtainMessage(2);
	TaskChangeNotificationController.forAllLocalListeners(this.mNotifyTaskStackChanged, v72);
	boolean v74 = this.mHandler.sendMessageDelayed(v72, 100);
	this.mRecentTasks.notifyTaskPersisterLocked(0, 1);
	Task.mInRemoveTask = 0;
	Binder.restoreCallingIdentity(v5);
	WindowManagerThreadPriorityBooster.reset();
	return 1;
}

and the following sink code:
['PooledPredicate v12 = PooledLambda.obtainPredicate(v8, v10, v11);\nTask v13 = RootWindowContainer.getTask(v12);\nthis.mRecentTasks.remove(p1);', 'Transition v26 = TransitionController.createTransition(2, 0);\nTransition v28 = TransitionController.requestStartTransition(v26, v27, 0, 0);', 'AppTransition$$ExternalSyntheticLambda2 v8 = new AppTransition$$ExternalSyntheticLambda2();\nTask$$ExternalSyntheticLambda2 v33 = new Task$$ExternalSyntheticLambda2(Task,0,p4);']

The method removeTask has the following similar APIs:

- API Name: resizeTask(ILandroid/graphics/Rect;I)Z with Similarity Score: 0.9779946208000183
  - Access Control Level: SYS_OR_SIG and the following code:
AppTransition$$ExternalSyntheticLambda2 v11 = new AppTransition$$ExternalSyntheticLambda2();
Task$$ExternalSyntheticLambda6 v56 = new Task$$ExternalSyntheticLambda6();

- API Name: setTaskResizeable(II)V with Similarity Score: 0.9135651588439941
  - Access Control Level: SYS_OR_SIG and the following code:
PooledPredicate v10 = PooledLambda.obtainPredicate(v6, v8, v9);
Task v11 = RootWindowContainer.getTask(v10);
v10.recycle();
Task v13 = RootWindowContainer.getOrCreateRootTask(0, 0, v11, 0);

