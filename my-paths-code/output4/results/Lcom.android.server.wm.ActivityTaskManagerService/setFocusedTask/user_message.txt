This is path 1 for the API with depth 2:
public void setFocusedTask(int p1){
	long v5 = Binder.clearCallingIdentity();
	String v10 = String.valueOf(0);
	Object v11 = new Object(2);
	Long v12 = Long.valueOf(p1);
	ProtoLogImpl v14 = ProtoLogImpl.getSingleInstance();
	v14.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v11);
	Task v17 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
	Task v16 = v17;
	WindowContainer v19 = Task.getParent();
	Task$$ExternalSyntheticLambda6 v20 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v22 = Task.getActivity(v20);
	ActivityRecord v18 = v22;
	boolean v24 = ActivityRecord.isFocusable();
	Task v25 = ActivityRecord.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v26 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v28 = WindowContainer.mDisplayContent.getTask(v26, 1);
	String v29 = String.valueOf(ActivityRecord);
	Object v30 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v30);
	boolean v32 = WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
	boolean v33 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v34 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
	boolean v23 = (v34 ^ 1);
	boolean v36 = ActivityRecord.isFocusable();
	boolean v37 = ActivityRecord.canReceiveKeys();
	boolean v38 = ActivityRecord.isAlwaysFocusable();
	boolean v35 = phiInstruction;
	WindowContainer v40 = ActivityRecord.getParent();
	TaskFragment v41 = v40.asTaskFragment();
	TaskFragment v39 = phiInstruction;
	WindowContainer v43 = TaskFragment.getParent();
	TaskFragment v44 = v43.asTaskFragment();
	boolean v45 = v44.isEmbedded();
	boolean v42 = phiInstruction;
	DisplayContent v46 = this.mDisplayContent;
	DisplayContent v48 = p2.getDisplayContent();
	TaskDisplayArea v49 = p2.getDisplayArea();
	DisplayContent.onLastFocusedTaskDisplayAreaChanged(v49);
	String v51 = String.valueOf(p2);
	int v52 = DisplayContent.getDisplayId();
	String v53 = Debug.getCallers(4);
	String v54 = String.valueOf(v53);
	Object v55 = new Object(3);
	Long v56 = Long.valueOf(v52);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v55);
	Task v58 = this.mFocusedApp.getTask();
	Task v59 = p2.getTask();
	this.mFocusedApp = p2;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v62 = DisplayContent.getInputMonitor();
	v62.setFocusedAppLw(p2);
	DisplayContent.updateTouchExcludeRegion();
	boolean v47 = 1;
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v67 = this.mRoot.updateFocusedWindowLocked(0, 1);
	Trace.traceEnd(32);
	boolean v65 = v67;
	Binder.restoreCallingIdentity(v5);
	return;
}

This is path 2 for the API with depth 2:
public void setFocusedTask(int p1){
	long v5 = Binder.clearCallingIdentity();
	WindowManagerThreadPriorityBooster.boost();
	String v11 = String.valueOf(0);
	Object v12 = new Object(2);
	Long v13 = Long.valueOf(p1);
	ProtoLogImpl v15 = ProtoLogImpl.getSingleInstance();
	v15.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v12);
	Task v18 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
	Task v17 = v18;
	WindowContainer v20 = Task.getParent();
	Task$$ExternalSyntheticLambda6 v21 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v23 = Task.getActivity(v21);
	ActivityRecord v19 = v23;
	boolean v25 = ActivityRecord.isFocusable();
	Task v26 = ActivityRecord.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v27 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v29 = WindowContainer.mDisplayContent.getTask(v27, 1);
	String v30 = String.valueOf(ActivityRecord);
	Object v31 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v31);
	boolean v33 = WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
	boolean v34 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v35 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
	boolean v24 = (v35 ^ 1);
	boolean v37 = ActivityRecord.isFocusable();
	boolean v38 = ActivityRecord.canReceiveKeys();
	boolean v39 = ActivityRecord.isAlwaysFocusable();
	boolean v36 = phiInstruction;
	WindowContainer v41 = ActivityRecord.getParent();
	TaskFragment v42 = v41.asTaskFragment();
	TaskFragment v40 = phiInstruction;
	WindowContainer v44 = TaskFragment.getParent();
	TaskFragment v45 = v44.asTaskFragment();
	boolean v46 = v45.isEmbedded();
	boolean v43 = phiInstruction;
	DisplayContent v47 = this.mDisplayContent;
	DisplayContent v49 = p2.getDisplayContent();
	TaskDisplayArea v50 = p2.getDisplayArea();
	DisplayContent.onLastFocusedTaskDisplayAreaChanged(v50);
	String v52 = String.valueOf(p2);
	int v53 = DisplayContent.getDisplayId();
	String v54 = Debug.getCallers(4);
	String v55 = String.valueOf(v54);
	Object v56 = new Object(3);
	Long v57 = Long.valueOf(v53);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v56);
	Task v59 = this.mFocusedApp.getTask();
	Task v60 = p2.getTask();
	this.mFocusedApp = p2;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v63 = DisplayContent.getInputMonitor();
	v63.setFocusedAppLw(p2);
	DisplayContent.updateTouchExcludeRegion();
	boolean v48 = 1;
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v68 = this.mRoot.updateFocusedWindowLocked(0, 1);
	Trace.traceEnd(32);
	boolean v66 = v68;
	Binder.restoreCallingIdentity(v5);
	return;
}

This is path 3 for the API with depth 2:
public void setFocusedTask(int p1){
	long v5 = Binder.clearCallingIdentity();
	String v10 = String.valueOf(0);
	Object v11 = new Object(2);
	Long v12 = Long.valueOf(p1);
	ProtoLogImpl v14 = ProtoLogImpl.getSingleInstance();
	v14.log(BaseProtoLogImpl$LogLevel.DEBUG, ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v11);
	Task v17 = RootWindowContainer.anyTaskForId(p1, 0, 0, 0);
	Task v16 = v17;
	WindowContainer v19 = Task.getParent();
	Task$$ExternalSyntheticLambda6 v20 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v22 = Task.getActivity(v20);
	ActivityRecord v18 = v22;
	boolean v24 = ActivityRecord.isFocusable();
	Task v25 = ActivityRecord.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v26 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v28 = WindowContainer.mDisplayContent.getTask(v26, 1);
	String v29 = String.valueOf(ActivityRecord);
	Object v30 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v30);
	boolean v32 = WindowContainer.mDisplayContent.setFocusedApp(ActivityRecord);
	boolean v33 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v34 = ActivityRecord.isState(ActivityRecord$State.RESUMED);
	boolean v23 = (v34 ^ 1);
	boolean v36 = ActivityRecord.isFocusable();
	boolean v37 = ActivityRecord.canReceiveKeys();
	boolean v38 = ActivityRecord.isAlwaysFocusable();
	boolean v35 = phiInstruction;
	WindowContainer v40 = ActivityRecord.getParent();
	TaskFragment v41 = v40.asTaskFragment();
	TaskFragment v39 = phiInstruction;
	WindowContainer v43 = TaskFragment.getParent();
	TaskFragment v44 = v43.asTaskFragment();
	boolean v45 = v44.isEmbedded();
	boolean v42 = phiInstruction;
	DisplayContent v46 = this.mDisplayContent;
	DisplayContent v48 = p2.getDisplayContent();
	TaskDisplayArea v49 = p2.getDisplayArea();
	DisplayContent.onLastFocusedTaskDisplayAreaChanged(v49);
	String v51 = String.valueOf(p2);
	int v52 = DisplayContent.getDisplayId();
	String v53 = Debug.getCallers(4);
	String v54 = String.valueOf(v53);
	Object v55 = new Object(3);
	Long v56 = Long.valueOf(v52);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v55);
	Task v58 = this.mFocusedApp.getTask();
	Task v59 = p2.getTask();
	this.mFocusedApp = p2;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v62 = DisplayContent.getInputMonitor();
	v62.setFocusedAppLw(p2);
	DisplayContent.updateTouchExcludeRegion();
	boolean v47 = 1;
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v67 = this.mRoot.updateFocusedWindowLocked(0, 1);
	Trace.traceEnd(32);
	boolean v65 = v67;
	WindowManagerThreadPriorityBooster.reset();
	Binder.restoreCallingIdentity(v5);
	return;
}
