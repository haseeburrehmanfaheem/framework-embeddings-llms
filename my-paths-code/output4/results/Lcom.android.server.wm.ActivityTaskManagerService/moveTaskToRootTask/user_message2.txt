The method moveTaskToRootTask has the following code snippet:

This is path 1 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	long v8 = Binder.clearCallingIdentity();
	Task v11 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v10 = v11;
	Task v9 = v10;
	Object v12 = new Object(3);
	Long v13 = Long.valueOf(p1);
	Long v14 = Long.valueOf(p2);
	Boolean v15 = Boolean.valueOf(p3);
	ProtoLogImpl v18 = new ProtoLogImpl(v19,1048576,v21);
	File v19 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v21 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v18;
	ProtoLogImpl v17 = this.sServiceInstance;
	boolean v25 = p1.isLogToProto();
	BaseProtoLogImpl.logToProto(p2, p3, p5);
	boolean v27 = p1.isLogToLogcat();
	String v28 = p1.getTag();
	BaseProtoLogImpl.logToLogcat(v28, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
	int v32 = this.mChildren.size();
	int v31 = v32;
	Object v34 = this.mChildren.get(phiInstruction);
	WindowContainer v33 = v34;
	DisplayContent$$ExternalSyntheticLambda6 v36 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v38 = DisplayContent.getRootTask(v36);
	Task v35 = v38;
	Task v30 = v35;
	boolean v39 = v30.isActivityTypeStandardOrUndefined();
	Task v42 = Task.getRootTask();
	Task v43 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, phiInstruction);
	int v44 = v43.getDisplayId();
	boolean v45 = Task.canBeLaunchedOnDisplay(v44);
	boolean v41 = 0;
	boolean v40 = v41;
	Binder.restoreCallingIdentity(v8);
	return;
}
This is path 2 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	WindowManagerThreadPriorityBooster.boost();
	long v9 = Binder.clearCallingIdentity();
	Task v12 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v11 = v12;
	Task v10 = v11;
	Object v13 = new Object(3);
	Long v14 = Long.valueOf(p1);
	Long v15 = Long.valueOf(p2);
	Boolean v16 = Boolean.valueOf(p3);
	ProtoLogImpl v19 = new ProtoLogImpl(v20,1048576,v22);
	File v20 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v22 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v19;
	ProtoLogImpl v18 = this.sServiceInstance;
	boolean v26 = p1.isLogToProto();
	BaseProtoLogImpl.logToProto(p2, p3, p5);
	boolean v28 = p1.isLogToLogcat();
	String v29 = p1.getTag();
	BaseProtoLogImpl.logToLogcat(v29, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
	int v33 = this.mChildren.size();
	int v32 = v33;
	Object v35 = this.mChildren.get(phiInstruction);
	WindowContainer v34 = v35;
	DisplayContent$$ExternalSyntheticLambda6 v37 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v39 = DisplayContent.getRootTask(v37);
	Task v36 = v39;
	Task v31 = v36;
	boolean v40 = v31.isActivityTypeStandardOrUndefined();
	Task v43 = Task.getRootTask();
	Task v44 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, phiInstruction);
	int v45 = v44.getDisplayId();
	boolean v46 = Task.canBeLaunchedOnDisplay(v45);
	boolean v42 = 0;
	boolean v41 = v42;
	Binder.restoreCallingIdentity(v9);
	return;
}
This is path 3 for the API with depth 2:
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	long v8 = Binder.clearCallingIdentity();
	Task v11 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);
	Task v10 = v11;
	Task v9 = v10;
	Object v12 = new Object(3);
	Long v13 = Long.valueOf(p1);
	Long v14 = Long.valueOf(p2);
	Boolean v15 = Boolean.valueOf(p3);
	ProtoLogImpl v18 = new ProtoLogImpl(v19,1048576,v21);
	File v19 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v21 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v18;
	ProtoLogImpl v17 = this.sServiceInstance;
	boolean v25 = p1.isLogToProto();
	BaseProtoLogImpl.logToProto(p2, p3, p5);
	boolean v27 = p1.isLogToLogcat();
	String v28 = p1.getTag();
	BaseProtoLogImpl.logToLogcat(v28, BaseProtoLogImpl$LogLevel.DEBUG, p2, p4, p5);
	int v32 = this.mChildren.size();
	int v31 = v32;
	Object v34 = this.mChildren.get(phiInstruction);
	WindowContainer v33 = v34;
	DisplayContent$$ExternalSyntheticLambda6 v36 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v38 = DisplayContent.getRootTask(v36);
	Task v35 = v38;
	Task v30 = v35;
	boolean v39 = v30.isActivityTypeStandardOrUndefined();
	Task v42 = Task.getRootTask();
	Task v43 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(Task, p1, phiInstruction);
	int v44 = v43.getDisplayId();
	boolean v45 = Task.canBeLaunchedOnDisplay(v44);
	boolean v41 = 0;
	boolean v40 = v41;
	Binder.restoreCallingIdentity(v8);
	WindowManagerThreadPriorityBooster.reset();
	return;
}

and the following sink code:
['Task v11 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);\nDisplayContent$$ExternalSyntheticLambda6 v36 = new DisplayContent$$ExternalSyntheticLambda6(p1);\nTask v38 = DisplayContent.getRootTask(v36);', 'Task v12 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);\nDisplayContent$$ExternalSyntheticLambda6 v37 = new DisplayContent$$ExternalSyntheticLambda6(p1);\nTask v39 = DisplayContent.getRootTask(v37);', 'Task v11 = RootWindowContainer.anyTaskForId(p1, 2, 0, 0);\nDisplayContent$$ExternalSyntheticLambda6 v36 = new DisplayContent$$ExternalSyntheticLambda6(p1);\nTask v38 = DisplayContent.getRootTask(v36);']

The method moveTaskToRootTask has the following similar APIs:

- API Name: finishVoiceTask(Landroid/service/voice/IVoiceInteractionSession;)V with Similarity Score: 0.8526061773300171
  - Access Control Level: NONE and the following code:
RootWindowContainer$$ExternalSyntheticLambda5 v6 = new RootWindowContainer$$ExternalSyntheticLambda5(p1);
WindowContainer.forAllRootTasks(v6, 1);

- API Name: finishVoiceTask(Landroid/service/voice/IVoiceInteractionSession;)V with Similarity Score: 0.8524240255355835
  - Access Control Level: NONE and the following code:
RootWindowContainer$$ExternalSyntheticLambda5 v6 = new RootWindowContainer$$ExternalSyntheticLambda5(p1);
WindowContainer.forAllRootTasks(v6, 1);

