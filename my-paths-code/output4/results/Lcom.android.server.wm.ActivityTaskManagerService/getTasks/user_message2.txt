The method getTasks has the following code snippet:

This is path 1 for the API with depth 2:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	boolean v3 = phiInstruction;
	UserManagerService v6 = p0.getUserManager();
	int v7 = UserHandle.getUserId(v1);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append("getting profiles related to user ");
	StringBuilder v14 = v11.append(p1);
	String v15 = v11.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v15);
	long v17 = Binder.clearCallingIdentity();
	IntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);
	[I v19 = v18.toArray();
	Binder.restoreCallingIdentity(v17);
	[I v9 = v19;
	[I v8 = v9;
	ArraySet v21 = new ArraySet();
	ArrayList v23 = new ArrayList();
	IPackageManager v33 = ActivityThread.getPackageManager();
	IPackageManager v32 = v33;
	boolean v34 = v32.isUidPrivileged(v1);
	String v35 = String.valueOf("getTasks");
	Object v36 = new Object(2);
	Long v37 = Long.valueOf(v1);
	ProtoLogImpl v39 = ProtoLogImpl.getSingleInstance();
	v39.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v36);
	String v41 = String.valueOf("getTasks");
	Object v42 = new Object(2);
	Long v43 = Long.valueOf(v1);
	ProtoLogImpl v45 = ProtoLogImpl.getSingleInstance();
	v45.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v42);
	boolean v28 = phiInstruction;
	int v49 = RootWindowContainer.getChildCount();
	DisplayContent v48 = 0;
	RunningTasks v50 = this.mRunningTasks;
	RecentTasks v51 = this.mRecentTasks;
	this.mTmpSortedSet.clear();
	this.mCallingUid = p4;
	int v54 = UserHandle.getUserId(p4);
	this.mUserId = v54;
	this.mCrossUser = phiInstruction;
	this.mProfileIds = p5;
	this.mAllowed = phiInstruction;
	this.mFilterOnlyVisibleRecents = phiInstruction;
	this.mRecentTasks = v51;
	this.mKeepIntentExtra = phiInstruction;
	RunningTasks$$ExternalSyntheticLambda0 v55 = new RunningTasks$$ExternalSyntheticLambda0();
	ArgumentPlaceholder v57 = PooledLambda.__(Tas.class);
	PooledConsumer v58 = PooledLambda.obtainConsumer(v55, RunningTasks, v57);
	phiInstruction.forAllLeafTasks(v58, 0);
	v58.recycle();
	Iterator v61 = this.mTmpSortedSet.iterator();
	boolean v62 = v61.hasNext();
	return v23;
}
This is path 2 for the API with depth 2:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	boolean v3 = phiInstruction;
	UserManagerService v6 = p0.getUserManager();
	int v7 = UserHandle.getUserId(v1);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append("getting profiles related to user ");
	StringBuilder v14 = v11.append(p1);
	String v15 = v11.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v15);
	long v17 = Binder.clearCallingIdentity();
	IntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);
	[I v19 = v18.toArray();
	Binder.restoreCallingIdentity(v17);
	[I v9 = v19;
	[I v8 = v9;
	ArraySet v21 = new ArraySet();
	ArrayList v23 = new ArrayList();
	IPackageManager v33 = ActivityThread.getPackageManager();
	IPackageManager v32 = v33;
	boolean v34 = v32.isUidPrivileged(v1);
	String v35 = String.valueOf("getTasks");
	Object v36 = new Object(2);
	Long v37 = Long.valueOf(v1);
	ProtoLogImpl v39 = ProtoLogImpl.getSingleInstance();
	v39.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v36);
	String v41 = String.valueOf("getTasks");
	Object v42 = new Object(2);
	Long v43 = Long.valueOf(v1);
	ProtoLogImpl v45 = ProtoLogImpl.getSingleInstance();
	v45.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v42);
	boolean v28 = phiInstruction;
	int v49 = RootWindowContainer.getChildCount();
	DisplayContent v48 = 0;
	RunningTasks v50 = this.mRunningTasks;
	RecentTasks v51 = this.mRecentTasks;
	this.mTmpSortedSet.clear();
	this.mCallingUid = p4;
	int v54 = UserHandle.getUserId(p4);
	this.mUserId = v54;
	this.mCrossUser = phiInstruction;
	this.mProfileIds = p5;
	this.mAllowed = phiInstruction;
	this.mFilterOnlyVisibleRecents = phiInstruction;
	this.mRecentTasks = v51;
	this.mKeepIntentExtra = phiInstruction;
	RunningTasks$$ExternalSyntheticLambda0 v55 = new RunningTasks$$ExternalSyntheticLambda0();
	ArgumentPlaceholder v57 = PooledLambda.__(Tas.class);
	PooledConsumer v58 = PooledLambda.obtainConsumer(v55, RunningTasks, v57);
	phiInstruction.forAllLeafTasks(v58, 0);
	v58.recycle();
	Iterator v61 = this.mTmpSortedSet.iterator();
	boolean v62 = v61.hasNext();
	return v23;
}
This is path 3 for the API with depth 2:
public List getTasks(int p1, boolean p2, boolean p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	boolean v3 = phiInstruction;
	UserManagerService v6 = p0.getUserManager();
	int v7 = UserHandle.getUserId(v1);
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append("getting profiles related to user ");
	StringBuilder v14 = v11.append(p1);
	String v15 = v11.toString();
	UserManagerService.checkQueryOrCreateUsersPermission(v15);
	long v17 = Binder.clearCallingIdentity();
	IntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);
	[I v19 = v18.toArray();
	Binder.restoreCallingIdentity(v17);
	[I v9 = v19;
	[I v8 = v9;
	ArraySet v21 = new ArraySet();
	ArrayList v23 = new ArrayList();
	WindowManagerThreadPriorityBooster.boost();
	IPackageManager v34 = ActivityThread.getPackageManager();
	IPackageManager v33 = v34;
	boolean v35 = v33.isUidPrivileged(v1);
	String v36 = String.valueOf("getTasks");
	Object v37 = new Object(2);
	Long v38 = Long.valueOf(v1);
	ProtoLogImpl v40 = ProtoLogImpl.getSingleInstance();
	v40.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v37);
	String v42 = String.valueOf("getTasks");
	Object v43 = new Object(2);
	Long v44 = Long.valueOf(v1);
	ProtoLogImpl v46 = ProtoLogImpl.getSingleInstance();
	v46.log(BaseProtoLogImpl$LogLevel.WARN, ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v43);
	boolean v29 = phiInstruction;
	int v50 = RootWindowContainer.getChildCount();
	DisplayContent v49 = 0;
	RunningTasks v51 = this.mRunningTasks;
	RecentTasks v52 = this.mRecentTasks;
	this.mTmpSortedSet.clear();
	this.mCallingUid = p4;
	int v55 = UserHandle.getUserId(p4);
	this.mUserId = v55;
	this.mCrossUser = phiInstruction;
	this.mProfileIds = p5;
	this.mAllowed = phiInstruction;
	this.mFilterOnlyVisibleRecents = phiInstruction;
	this.mRecentTasks = v52;
	this.mKeepIntentExtra = phiInstruction;
	RunningTasks$$ExternalSyntheticLambda0 v56 = new RunningTasks$$ExternalSyntheticLambda0();
	ArgumentPlaceholder v58 = PooledLambda.__(Tas.class);
	PooledConsumer v59 = PooledLambda.obtainConsumer(v56, RunningTasks, v58);
	phiInstruction.forAllLeafTasks(v59, 0);
	v59.recycle();
	Iterator v62 = this.mTmpSortedSet.iterator();
	boolean v63 = v62.hasNext();
	return v23;
}

and the following sink code:
['int v7 = UserHandle.getUserId(v1);\nIntArray v18 = UserManagerService.getProfileIdsLU(p1, 0, p2);\n[I v19 = v18.toArray();\nArrayList v23 = new ArrayList();\nthis.mCallingUid = p4;\nint v54 = UserHandle.getUserId(p4);\nthis.mUserId = v54;\nRunningTasks$$ExternalSyntheticLambda0 v55 = new RunningTasks$$ExternalSyntheticLambda0();\nPooledConsumer v58 = PooledLambda.obtainConsumer(v55, RunningTasks, v57);\nphiInstruction.forAllLeafTasks(v58, 0);\nreturn v23;']

The method getTasks has the following similar APIs:

- API Name: getRecentTasks(III)Landroid/content/pm/ParceledListSlice; with Similarity Score: 0.739470362663269
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = this.mAmInternal.handleIncomingUser(v2, v1, p3, 0, 0, "getRecentTasks", 0);
boolean v31 = RecentTasks.isUserRunning(p4, 4);
RecentTasks.loadUserRecentsLocked(p4);
Set v33 = RecentTasks.getProfileIds(p4);
Integer v34 = Integer.valueOf(p4);
boolean v35 = v33.add(v34);
ArrayList v36 = new ArrayList();
int v38 = this.mTasks.size();
ArrayList v30 = v36;
ParceledListSlice v29 = new ParceledListSlice(v30);
return v28;

- API Name: getLastResumedActivityUserId()I with Similarity Score: 0.726024329662323
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = p0.getCurrentUserId();
return v5;

