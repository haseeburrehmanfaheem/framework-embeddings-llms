The method setTaskResizeable has the following code snippet:

This is path 1 for the API with depth 2:
public void setTaskResizeable(int p1, int p2){
	AppTransition$$ExternalSyntheticLambda2 v6 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v8 = PooledLambda.__(Tas.class);
	Integer v9 = Integer.valueOf(p1);
	PooledPredicate v10 = PooledLambda.obtainPredicate(v6, v8, v9);
	Task v11 = RootWindowContainer.getTask(v10);
	v10.recycle();
	Task v13 = RootWindowContainer.getOrCreateRootTask(0, 0, v11, 0);
	Task v14 = v11.getRootTask();
	boolean v15 = v11.reparent(v13, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v5 = v11;
	Task v4 = v5;
	this.mResizeMode = p2;
	RootWindowContainer.ensureActivitiesVisible(0, 0, 0, 1);
	boolean v20 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
	boolean v19 = v20;
	ActivityRecord v22 = Task.getRootActivity(1);
	ActivityManager$TaskDescription v23 = new ActivityManager$TaskDescription();
	Task$$ExternalSyntheticLambda9 v25 = new Task$$ExternalSyntheticLambda9();
	ArgumentPlaceholder v27 = PooledLambda.__(ActivityRecor.class);
	PooledPredicate v28 = PooledLambda.obtainPredicate(v25, v27, v22, v23);
	boolean v29 = Task.forAllActivities(v28);
	v28.recycle();
	v23.setResizeMode(this.mResizeMode);
	v23.setMinWidth(TaskFragment.mMinWidth);
	v23.setMinHeight(TaskFragment.mMinHeight);
	Task.setTaskDescription(v23);
	TaskChangeNotificationController v35 = TaskFragment.mAtmService.getTaskChangeNotificationController();
	ActivityManager$RunningTaskInfo v36 = Task.getTaskInfo();
	v35.notifyTaskDescriptionChanged(v36);
	WindowContainer v38 = Task.getParent();
	Task v39 = v38.asTask();
	v39.updateTaskDescription();
	Task.dispatchTaskInfoChangedIfNeeded(0);
	return;
}
This is path 2 for the API with depth 2:
public void setTaskResizeable(int p1, int p2){
	WindowManagerThreadPriorityBooster.boost();
	AppTransition$$ExternalSyntheticLambda2 v7 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v9 = PooledLambda.__(Tas.class);
	Integer v10 = Integer.valueOf(p1);
	PooledPredicate v11 = PooledLambda.obtainPredicate(v7, v9, v10);
	Task v12 = RootWindowContainer.getTask(v11);
	v11.recycle();
	Task v14 = RootWindowContainer.getOrCreateRootTask(0, 0, v12, 0);
	Task v15 = v12.getRootTask();
	boolean v16 = v12.reparent(v14, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v6 = v12;
	Task v5 = v6;
	this.mResizeMode = p2;
	RootWindowContainer.ensureActivitiesVisible(0, 0, 0, 1);
	boolean v21 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
	boolean v20 = v21;
	ActivityRecord v23 = Task.getRootActivity(1);
	ActivityManager$TaskDescription v24 = new ActivityManager$TaskDescription();
	Task$$ExternalSyntheticLambda9 v26 = new Task$$ExternalSyntheticLambda9();
	ArgumentPlaceholder v28 = PooledLambda.__(ActivityRecor.class);
	PooledPredicate v29 = PooledLambda.obtainPredicate(v26, v28, v23, v24);
	boolean v30 = Task.forAllActivities(v29);
	v29.recycle();
	v24.setResizeMode(this.mResizeMode);
	v24.setMinWidth(TaskFragment.mMinWidth);
	v24.setMinHeight(TaskFragment.mMinHeight);
	Task.setTaskDescription(v24);
	TaskChangeNotificationController v36 = TaskFragment.mAtmService.getTaskChangeNotificationController();
	ActivityManager$RunningTaskInfo v37 = Task.getTaskInfo();
	v36.notifyTaskDescriptionChanged(v37);
	WindowContainer v39 = Task.getParent();
	Task v40 = v39.asTask();
	v40.updateTaskDescription();
	Task.dispatchTaskInfoChangedIfNeeded(0);
	return;
}
This is path 3 for the API with depth 2:
public void setTaskResizeable(int p1, int p2){
	AppTransition$$ExternalSyntheticLambda2 v6 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v8 = PooledLambda.__(Tas.class);
	Integer v9 = Integer.valueOf(p1);
	PooledPredicate v10 = PooledLambda.obtainPredicate(v6, v8, v9);
	Task v11 = RootWindowContainer.getTask(v10);
	v10.recycle();
	Task v13 = RootWindowContainer.getOrCreateRootTask(0, 0, v11, 0);
	Task v14 = v11.getRootTask();
	boolean v15 = v11.reparent(v13, 0, phiInstruction, 1, 1, "anyTaskForId");
	Task v5 = v11;
	Task v4 = v5;
	this.mResizeMode = p2;
	RootWindowContainer.ensureActivitiesVisible(0, 0, 0, 1);
	boolean v20 = RootWindowContainer.resumeFocusedTasksTopActivities(0, 0, 0);
	boolean v19 = v20;
	ActivityRecord v22 = Task.getRootActivity(1);
	ActivityManager$TaskDescription v23 = new ActivityManager$TaskDescription();
	Task$$ExternalSyntheticLambda9 v25 = new Task$$ExternalSyntheticLambda9();
	ArgumentPlaceholder v27 = PooledLambda.__(ActivityRecor.class);
	PooledPredicate v28 = PooledLambda.obtainPredicate(v25, v27, v22, v23);
	boolean v29 = Task.forAllActivities(v28);
	v28.recycle();
	v23.setResizeMode(this.mResizeMode);
	v23.setMinWidth(TaskFragment.mMinWidth);
	v23.setMinHeight(TaskFragment.mMinHeight);
	Task.setTaskDescription(v23);
	TaskChangeNotificationController v35 = TaskFragment.mAtmService.getTaskChangeNotificationController();
	ActivityManager$RunningTaskInfo v36 = Task.getTaskInfo();
	v35.notifyTaskDescriptionChanged(v36);
	WindowContainer v38 = Task.getParent();
	Task v39 = v38.asTask();
	v39.updateTaskDescription();
	Task.dispatchTaskInfoChangedIfNeeded(0);
	WindowManagerThreadPriorityBooster.reset();
	return;
}

and the following sink code:
['PooledPredicate v10 = PooledLambda.obtainPredicate(v6, v8, v9);\nTask v11 = RootWindowContainer.getTask(v10);\nv10.recycle();\nTask v13 = RootWindowContainer.getOrCreateRootTask(0, 0, v11, 0);', 'ActivityManager$TaskDescription v23 = new ActivityManager$TaskDescription();\nv23.setResizeMode(this.mResizeMode);\nv23.setMinWidth(TaskFragment.mMinWidth);\nv23.setMinHeight(TaskFragment.mMinHeight);\nTask.setTaskDescription(v23);', 'this.mResizeMode = p2;']

The method setTaskResizeable has the following similar APIs:

- API Name: onSplashScreenViewCopyFinished(ILandroid/window/SplashScreenView$SplashScreenViewParcelable;)V with Similarity Score: 0.9618838429450989
  - Access Control Level: SYS_OR_SIG and the following code:
PooledPredicate v11 = PooledLambda.obtainPredicate(v7, v9, v10);
Task v12 = RootWindowContainer.getTask(v11);

- API Name: startSystemLockTaskMode(I)V with Similarity Score: 0.9422319531440735
  - Access Control Level: SYS_OR_SIG and the following code:
PooledPredicate v15 = PooledLambda.obtainPredicate(v11, v13, v14);
Task v16 = RootWindowContainer.getTask(v15);
v15.recycle();
Task v18 = RootWindowContainer.getOrCreateRootTask(0, 0, v16, 0);
boolean v20 = v16.reparent(v18, 0, phiInstruction, 1, 1, "anyTaskForId");

