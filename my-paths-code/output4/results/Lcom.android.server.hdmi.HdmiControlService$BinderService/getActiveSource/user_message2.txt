The method getActiveSource has the following code snippet:

This is path 1 for the API with depth 2:
public HdmiDeviceInfo getActiveSource(){
	HdmiControlService.enforceAccessPermission();
	HdmiControlService.setWorkSourceUidToCallingUid();
	HdmiCecLocalDevice v7 = this.mHdmiCecNetwork.getLocalDevice(4);
	HdmiCecLocalDevicePlayback v6 = v7;
	HdmiCecLocalDevice v9 = this.mHdmiCecNetwork.getLocalDevice(4);
	HdmiCecLocalDevicePlayback v8 = v9;
	boolean v10 = v8.isActiveSource();
	HdmiCecLocalDevice$ActiveSource v11 = this.mActiveSource;
	boolean v13 = HdmiUtils.isValidAddress(this.logicalAddress);
	boolean v12 = v13;
	HdmiCecLocalDevice v15 = this.mHdmiCecNetwork.getLocalDevice(0);
	HdmiCecLocalDeviceTv v14 = v15;
	HdmiCecLocalDevice v17 = this.mHdmiCecNetwork.getLocalDevice(0);
	HdmiCecLocalDeviceTv v16 = v17;
	int v18 = v16.getActivePath();
	Iterator v20 = this.mSafeAllDeviceInfos.iterator();
	boolean v21 = v20.hasNext();
	HdmiDeviceInfo v19 = 0;
	HdmiCecLocalDevice v23 = this.mHdmiCecNetwork.getLocalDevice(0);
	HdmiCecLocalDeviceTv v22 = v23;
	int v24 = v22.getActivePortId();
	HdmiDeviceInfo$Builder v26 = new HdmiDeviceInfo$Builder(2,0);
	HdmiDeviceInfo$Builder v28 = v26.setPhysicalAddress(v18);
	HdmiDeviceInfo$Builder v29 = v28.setPortId(v24);
	HdmiDeviceInfo$Builder v30 = v29.setVendorId(0);
	StringBuilder v31 = new StringBuilder();
	StringBuilder v33 = v31.append("HDMI");
	StringBuilder v34 = v33.append(v24);
	String v35 = v34.toString();
	HdmiDeviceInfo$Builder v36 = v30.setDisplayName(v35);
	HdmiDeviceInfo v37 = v36.build();
	HdmiDeviceInfo v25 = v37;
	HdmiDeviceInfo v5 = phiInstruction;
	return v5;
}
This is path 2 for the API with depth 2:
public HdmiDeviceInfo getActiveSource(){
	HdmiControlService.enforceAccessPermission();
	HdmiControlService.setWorkSourceUidToCallingUid();
	HdmiCecLocalDevice v7 = this.mHdmiCecNetwork.getLocalDevice(4);
	HdmiCecLocalDevicePlayback v6 = v7;
	HdmiCecLocalDevice v9 = this.mHdmiCecNetwork.getLocalDevice(4);
	HdmiCecLocalDevicePlayback v8 = v9;
	boolean v10 = v8.isActiveSource();
	HdmiCecLocalDevice$ActiveSource v11 = this.mActiveSource;
	boolean v13 = HdmiUtils.isValidAddress(this.logicalAddress);
	boolean v12 = v13;
	Iterator v15 = this.mSafeAllDeviceInfos.iterator();
	boolean v16 = v15.hasNext();
	HdmiDeviceInfo v14 = 0;
	int v18 = this.mHdmiCecNetwork.physicalAddressToPortId(HdmiCecLocalDevice$ActiveSource.physicalAddress);
	int v17 = v18;
	HdmiDeviceInfo$Builder v20 = new HdmiDeviceInfo$Builder(2,0);
	HdmiDeviceInfo$Builder v22 = v20.setPhysicalAddress(HdmiCecLocalDevice$ActiveSource.physicalAddress);
	HdmiDeviceInfo$Builder v23 = v22.setPortId(v17);
	HdmiDeviceInfo$Builder v24 = v23.setVendorId(0);
	StringBuilder v25 = new StringBuilder();
	StringBuilder v27 = v25.append("HDMI");
	StringBuilder v28 = v27.append(v17);
	String v29 = v28.toString();
	HdmiDeviceInfo$Builder v30 = v24.setDisplayName(v29);
	HdmiDeviceInfo v31 = v30.build();
	HdmiDeviceInfo v19 = v31;
	HdmiDeviceInfo v5 = v19;
	return v5;
}

and the following sink code:
['HdmiCecLocalDevice v7 = this.mHdmiCecNetwork.getLocalDevice(4);\nHdmiCecLocalDevicePlayback v6 = v7;\nboolean v10 = v8.isActiveSource();\nint v18 = v16.getActivePath();\nHdmiDeviceInfo$Builder v26 = new HdmiDeviceInfo$Builder(2,0);\nHdmiDeviceInfo$Builder v28 = v26.setPhysicalAddress(v18);\nHdmiDeviceInfo$Builder v29 = v28.setPortId(v24);\nHdmiDeviceInfo$Builder v30 = v29.setVendorId(0);\nStringBuilder v31 = new StringBuilder();\nStringBuilder v33 = v31.append("HDMI");\nStringBuilder v34 = v33.append(v24);\nString v35 = v34.toString();\nHdmiDeviceInfo$Builder v36 = v30.setDisplayName(v35);\nHdmiDeviceInfo v37 = v36.build();', 'int v18 = this.mHdmiCecNetwork.physicalAddressToPortId(HdmiCecLocalDevice$ActiveSource.physicalAddress);\nHdmiDeviceInfo$Builder v20 = new HdmiDeviceInfo$Builder(2,0);\nHdmiDeviceInfo$Builder v22 = v20.setPhysicalAddress(HdmiCecLocalDevice$ActiveSource.physicalAddress);\nHdmiDeviceInfo$Builder v23 = v22.setPortId(v17);\nHdmiDeviceInfo$Builder v24 = v23.setVendorId(0);\nStringBuilder v25 = new StringBuilder();\nStringBuilder v27 = v25.append("HDMI");\nStringBuilder v28 = v27.append(v17);\nString v29 = v28.toString();\nHdmiDeviceInfo$Builder v30 = v24.setDisplayName(v29);\nHdmiDeviceInfo v31 = v30.build();']

The method getActiveSource has the following similar APIs:

- API Name: canChangeSystemAudioMode()Z with Similarity Score: 0.7839633226394653
  - Access Control Level: SYS_OR_SIG and the following code:
HdmiCecNetwork v10 = HdmiCecLocalDevice.mService.getHdmiCecNetwork();
HdmiDeviceInfo v11 = v10.getSafeCecDeviceInfo(5);
boolean v8 = phiInstruction;
return v8;

- API Name: shouldHandleTvPowerKey()Z with Similarity Score: 0.7810965180397034
  - Access Control Level: SYS_OR_SIG and the following code:
HdmiControlService.enforceAccessPermission();
HdmiControlService.setWorkSourceUidToCallingUid();
Integer v7 = Integer.valueOf(0);
boolean v8 = this.mLocalDevices.contains(v7);
HdmiCecConfig$Setting v11 = HdmiCecConfig.getSetting("power_control_mode");
String v12 = v11.getValueType();
StringBuilder v14 = new StringBuilder();
StringBuilder v16 = v14.append("Getting CEC setting value '");
StringBuilder v17 = v14.append("power_control_mode");
StringBuilder v18 = v14.append("'.");
String v19 = v14.toString();
HdmiCecConfig$Value v22 = v11.getDefaultValue();
String v23 = v22.getStringValue();
String v24 = HdmiCecConfig.retrieveValue(v11, v23);
boolean v25 = v10.equals("none");
HdmiCecConfig$Setting v28 = HdmiCecConfig.getSetting("hdmi_cec_enabled");
Integer v40 = v39.getIntValue();
int v41 = v40.intValue();
String v42 = Integer.toString(v41);
String v43 = HdmiCecConfig.retrieveValue(v28, v42);
boolean v5 = this.mIsCecAvailable;
return v5;

