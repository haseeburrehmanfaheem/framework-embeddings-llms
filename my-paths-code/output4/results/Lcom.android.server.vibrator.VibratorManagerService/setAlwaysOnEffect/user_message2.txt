The method setAlwaysOnEffect has the following code snippet:

This is path 1 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	boolean v3 = VibratorManagerService.isEffectValid(p4);
	int v5 = this.mUsage;
	boolean v6 = p4.isHapticFeedbackCandidate();
	int v7 = this.mFlags;
	boolean v8 = phiInstruction;
	boolean v10 = phiInstruction;
	boolean v12 = phiInstruction;
	int v14 = this.mUsage;
	int v15 = this.mFlags;
	VibrationAttributes$Builder v16 = new VibrationAttributes$Builder(phiInstruction);
	this.mOriginalAudioUsage = 0;
	this.mUsage = phiInstruction;
	VibrationAttributes$Builder v18 = VibrationAttributes$Builder;
	int v19 = this.mFlags;
	this.mFlags = ((this.mFlags & (~(v19 & 3))) | (phiInstruction & (v19 & 3)));
	VibrationAttributes$Builder v20 = VibrationAttributes$Builder;
	VibrationAttributes v22 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	VibrationAttributes v21 = v22;
	VibrationAttributes v4 = v21;
	Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
	VibrationEffect v26 = this.mEffect;
	VibratorManagerService$$ExternalSyntheticLambda2 v27 = new VibratorManagerService$$ExternalSyntheticLambda2(v26);
	SparseArray v30 = new SparseArray(v31);
	int v31 = this.mVibrators.size();
	int v33 = this.mVibrators.size();
	SparseArray v29 = v30;
	SparseArray v34 = new SparseArray();
	int v36 = phiInstruction.size();
	Object v37 = phiInstruction.valueAt(phiInstruction);
	List v39 = v37.getSegments();
	int v40 = v39.size();
	List v41 = v37.getSegments();
	Object v42 = v41.get(0);
	PrebakedSegment v38 = v42;
	Trace.traceEnd(8388608);
	SparseArray v24 = 0;
	VibratorManagerService$AlwaysOnVibration v45 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v24);
	this.mAlwaysOnEffects.put(p3, v45);
	p0.updateAlwaysOnLocked(v45);
	Trace.traceEnd(8388608);
	return 1;
}
This is path 2 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	boolean v3 = VibratorManagerService.isEffectValid(p4);
	int v5 = this.mUsage;
	boolean v6 = p4.isHapticFeedbackCandidate();
	int v7 = this.mFlags;
	boolean v8 = phiInstruction;
	boolean v10 = phiInstruction;
	boolean v12 = phiInstruction;
	int v14 = this.mUsage;
	int v15 = this.mFlags;
	VibrationAttributes$Builder v16 = new VibrationAttributes$Builder(phiInstruction);
	this.mOriginalAudioUsage = 0;
	this.mUsage = phiInstruction;
	VibrationAttributes$Builder v18 = VibrationAttributes$Builder;
	int v19 = this.mFlags;
	this.mFlags = ((this.mFlags & (~(v19 & 3))) | (phiInstruction & (v19 & 3)));
	VibrationAttributes$Builder v20 = VibrationAttributes$Builder;
	VibrationAttributes v22 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	VibrationAttributes v21 = v22;
	VibrationAttributes v4 = v21;
	Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
	VibrationEffect v26 = this.mEffect;
	VibratorManagerService$$ExternalSyntheticLambda2 v27 = new VibratorManagerService$$ExternalSyntheticLambda2(v26);
	SparseArray v30 = new SparseArray(v31);
	int v31 = this.mVibrators.size();
	int v33 = this.mVibrators.size();
	SparseArray v29 = v30;
	SparseArray v34 = new SparseArray();
	int v36 = phiInstruction.size();
	Object v37 = phiInstruction.valueAt(phiInstruction);
	List v39 = v37.getSegments();
	int v40 = v39.size();
	List v41 = v37.getSegments();
	Object v42 = v41.get(0);
	PrebakedSegment v38 = v42;
	Trace.traceEnd(8388608);
	SparseArray v24 = 0;
	VibratorManagerService$AlwaysOnVibration v45 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v24);
	this.mAlwaysOnEffects.put(p3, v45);
	p0.updateAlwaysOnLocked(v45);
	Trace.traceEnd(8388608);
	return 1;
}
This is path 3 for the API with depth 2:
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	boolean v3 = VibratorManagerService.isEffectValid(p4);
	int v5 = this.mUsage;
	boolean v6 = p4.isHapticFeedbackCandidate();
	int v7 = this.mFlags;
	boolean v8 = phiInstruction;
	boolean v10 = phiInstruction;
	boolean v12 = phiInstruction;
	int v14 = this.mUsage;
	int v15 = this.mFlags;
	VibrationAttributes$Builder v16 = new VibrationAttributes$Builder(phiInstruction);
	this.mOriginalAudioUsage = 0;
	this.mUsage = phiInstruction;
	VibrationAttributes$Builder v18 = VibrationAttributes$Builder;
	int v19 = this.mFlags;
	this.mFlags = ((this.mFlags & (~(v19 & 3))) | (phiInstruction & (v19 & 3)));
	VibrationAttributes$Builder v20 = VibrationAttributes$Builder;
	VibrationAttributes v22 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	VibrationAttributes v21 = v22;
	VibrationAttributes v4 = v21;
	Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
	VibrationEffect v26 = this.mEffect;
	VibratorManagerService$$ExternalSyntheticLambda2 v27 = new VibratorManagerService$$ExternalSyntheticLambda2(v26);
	SparseArray v30 = new SparseArray(v31);
	int v31 = this.mVibrators.size();
	int v33 = this.mVibrators.size();
	SparseArray v29 = v30;
	SparseArray v34 = new SparseArray();
	int v36 = phiInstruction.size();
	Object v37 = phiInstruction.valueAt(phiInstruction);
	List v39 = v37.getSegments();
	int v40 = v39.size();
	List v41 = v37.getSegments();
	Object v42 = v41.get(0);
	PrebakedSegment v38 = 0;
	Trace.traceEnd(8388608);
	SparseArray v24 = 0;
	VibratorManagerService$AlwaysOnVibration v45 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v24);
	this.mAlwaysOnEffects.put(p3, v45);
	p0.updateAlwaysOnLocked(v45);
	Trace.traceEnd(8388608);
	return 1;
}

and the following sink code:
['VibrationAttributes v22 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);\nVibrationAttributes v21 = v22;\nVibrationAttributes v4 = v21;\nVibratorManagerService$AlwaysOnVibration v45 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v24);', 'this.mAlwaysOnEffects.put(p3, v45);\np0.updateAlwaysOnLocked(v45);']

The method setAlwaysOnEffect has the following similar APIs:

- API Name: cancelVibrate(ILandroid/os/IBinder;)V with Similarity Score: 0.7234979271888733
  - Access Control Level: NORMAL and the following code:
Vibration v13 = this.mVibration;
v13.end(p1);
this.mVibratorManagerRecords.record(v13);

- API Name: cancelVibrate(ILandroid/os/IBinder;)V with Similarity Score: 0.7087259888648987
  - Access Control Level: NORMAL and the following code:
long v18 = SystemClock.uptimeMillis();
VibrationStats$StatsInfo v19 = v13.getStatsInfo(v18);
this.mFrameworkStatsLogger.writeVibrationReportedAsync(v19);

