This is path 1 for the API with depth 2:
depth : 0
public FontConfig getFontConfig(){
	FontConfig v3 = p0.getSystemFontConfig();
	return v3;
}
-----
depth : 1
public FontConfig getSystemFontConfig(){
	FontConfig v1 = SystemFonts.getSystemPreinstalledFontConfig();
	return v1;
}
-----
depth : 2
public FontConfig getSystemPreinstalledFontConfig(){
	FontConfig v1 = SystemFonts.getSystemFontConfigInternal("/system/etc/fonts.xml", "/system/fonts/", "/product/etc/fonts_customization.xml", "/product/fonts/", 0, 0, 0);
	return v1;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public FontConfig getFontConfig(){
	FontConfig v3 = p0.getSystemFontConfig();
	return v3;
}
-----
depth : 1
public FontConfig getSystemFontConfig(){
	FontConfig v1 = this.mUpdatableFontDir.getSystemFontConfig();
	return v1;
}
-----
depth : 2
public FontConfig getSystemFontConfig(){
	Map v1 = p0.getPostScriptMap();
	Object v2 = this.mConfigSupplier.apply(v1);
	PersistentSystemFontConfig$Config v3 = p0.readPersistentConfig();
	ArrayList v3 = new ArrayList((v5 + v6));
	List v4 = v2.getFontFamilies();
	int v5 = v4.size();
	int v6 = PersistentSystemFontConfig$Config.fontFamilies.size();
	List v8 = v2.getFontFamilies();
	boolean v9 = v3.addAll(v8);
	int v10 = PersistentSystemFontConfig$Config.fontFamilies.size();
	FontConfig v10 = new FontConfig(v3,v11,this.mLastModifiedMillis,this.mConfigVersion);
	List v11 = v2.getAliases();
	return v10;
}
-----
