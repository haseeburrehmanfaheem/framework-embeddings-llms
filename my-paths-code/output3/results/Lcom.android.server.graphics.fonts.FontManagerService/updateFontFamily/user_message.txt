This is path 1 for the API with depth 2:
depth : 0
public int updateFontFamily(List p1, int p2){
	p0.update(p2, p1);
	int v6 = Slog.e("FontManagerService", "Failed to update font family", caughtException);
	int v7 = caughtException.getErrorCode();
	FontManagerService.closeFileDescriptors(p1);
	return v7;
}
-----
depth : 1
public void update(int p1, List p2){
	int v1 = this.mUpdatableFontDir.getConfigVersion();
	this.mUpdatableFontDir.update(p2);
	p0.updateSerializedFontMap();
	return;
}
-----
depth : 2
public int getConfigVersion(){
	return this.mConfigVersion;
}
-----
depth : 2
public void update(List p1){
	Iterator v1 = p1.iterator();
	boolean v2 = v1.hasNext();
	ArrayMap v2 = new ArrayMap(this.mFontFileInfoMap);
	PersistentSystemFontConfig$Config v4 = p0.readPersistentConfig();
	HashMap v4 = new HashMap();
	int v6 = PersistentSystemFontConfig$Config.fontFamilies.size();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	Collection v9 = v4.values();
	Iterator v10 = v9.iterator();
	boolean v11 = v10.hasNext();
	Object v12 = this.mCurrentTimeSupplier.get();
	long v13 = v12.longValue();
	this.mLastModifiedMillis = v13;
	PersistentSystemFontConfig$Config v13 = new PersistentSystemFontConfig$Config();
	PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
	Collection v15 = this.mFontFileInfoMap.values();
	Iterator v16 = v15.iterator();
	boolean v17 = v16.hasNext();
	Collection v18 = v4.values();
	boolean v19 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v18);
	p0.writePersistentConfig(v13);
	this.mConfigVersion = (this.mConfigVersion + 1);
	return;
}
-----
depth : 2
public void updateSerializedFontMap(){
	FontConfig v1 = p0.getSystemFontConfig();
	SharedMemory v2 = FontManagerService.serializeFontMap(v1);
	SharedMemory v3 = FontManagerService.serializeSystemServerFontMap();
	p0.setSerializedFontMap(phiInstruction);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public int updateFontFamily(List p1, int p2){
	p0.update(p2, p1);
	int v6 = Slog.e("FontManagerService", "Failed to update font family", caughtException);
	int v7 = caughtException.getErrorCode();
	FontManagerService.closeFileDescriptors(p1);
	return v7;
}
-----
depth : 1
public void update(int p1, List p2){
	int v1 = this.mUpdatableFontDir.getConfigVersion();
	this.mUpdatableFontDir.update(p2);
	p0.updateSerializedFontMap();
	return;
}
-----
depth : 2
public int getConfigVersion(){
	return this.mConfigVersion;
}
-----
depth : 2
public void update(List p1){
	Iterator v1 = p1.iterator();
	boolean v2 = v1.hasNext();
	ArrayMap v2 = new ArrayMap(this.mFontFileInfoMap);
	PersistentSystemFontConfig$Config v4 = p0.readPersistentConfig();
	HashMap v4 = new HashMap();
	int v6 = PersistentSystemFontConfig$Config.fontFamilies.size();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	Collection v9 = v4.values();
	Iterator v10 = v9.iterator();
	boolean v11 = v10.hasNext();
	Object v12 = this.mCurrentTimeSupplier.get();
	long v13 = v12.longValue();
	this.mLastModifiedMillis = v13;
	PersistentSystemFontConfig$Config v13 = new PersistentSystemFontConfig$Config();
	PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
	Collection v15 = this.mFontFileInfoMap.values();
	Iterator v16 = v15.iterator();
	boolean v17 = v16.hasNext();
	Collection v18 = v4.values();
	boolean v19 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v18);
	p0.writePersistentConfig(v13);
	this.mConfigVersion = (this.mConfigVersion + 1);
	return;
}
-----
depth : 2
public void updateSerializedFontMap(){
	FontConfig v1 = p0.getSystemFontConfig();
	SharedMemory v2 = FontManagerService.serializeFontMap(v1);
	p0.setSerializedFontMap(phiInstruction);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public int updateFontFamily(List p1, int p2){
	p0.update(p2, p1);
	FontManagerService.closeFileDescriptors(p1);
	return 0;
}
-----
depth : 1
public void update(int p1, List p2){
	int v1 = this.mUpdatableFontDir.getConfigVersion();
	this.mUpdatableFontDir.update(p2);
	p0.updateSerializedFontMap();
	return;
}
-----
depth : 2
public int getConfigVersion(){
	return this.mConfigVersion;
}
-----
depth : 2
public void update(List p1){
	Iterator v1 = p1.iterator();
	boolean v2 = v1.hasNext();
	ArrayMap v2 = new ArrayMap(this.mFontFileInfoMap);
	PersistentSystemFontConfig$Config v4 = p0.readPersistentConfig();
	HashMap v4 = new HashMap();
	int v6 = PersistentSystemFontConfig$Config.fontFamilies.size();
	Iterator v7 = p1.iterator();
	boolean v8 = v7.hasNext();
	Collection v9 = v4.values();
	Iterator v10 = v9.iterator();
	boolean v11 = v10.hasNext();
	Object v12 = this.mCurrentTimeSupplier.get();
	long v13 = v12.longValue();
	this.mLastModifiedMillis = v13;
	PersistentSystemFontConfig$Config v13 = new PersistentSystemFontConfig$Config();
	PersistentSystemFontConfig$Config.lastModifiedMillis = this.mLastModifiedMillis;
	Collection v15 = this.mFontFileInfoMap.values();
	Iterator v16 = v15.iterator();
	boolean v17 = v16.hasNext();
	Collection v18 = v4.values();
	boolean v19 = PersistentSystemFontConfig$Config.fontFamilies.addAll(v18);
	p0.writePersistentConfig(v13);
	this.mConfigVersion = (this.mConfigVersion + 1);
	return;
}
-----
depth : 2
public void updateSerializedFontMap(){
	FontConfig v1 = p0.getSystemFontConfig();
	SharedMemory v2 = FontManagerService.serializeFontMap(v1);
	SharedMemory v3 = FontManagerService.serializeSystemServerFontMap();
	p0.setSerializedFontMap(phiInstruction);
	return;
}
-----
