This is path 1 for the API with depth 2:
depth : 0
public void releasePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v3 = new GrantUri(p4,p1,0);
	UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3);
	GrantUri v5 = new GrantUri(p4,p1,128);
	UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);
	boolean v8 = v5.releasePersistableModes(p2);
	p0.removeUriPermissionIfNeededLocked(v5);
	boolean v10 = v7.releasePersistableModes(p2);
	p0.removeUriPermissionIfNeededLocked(v7);
	p0.schedulePersistUriGrants();
	return;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public boolean releasePersistableModes(int p1){
	this.persistedModeFlags = ((~(p1 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	p0.updateModeFlags();
	return phiInstruction;
}
-----
depth : 2
public void updateModeFlags(){
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v1 = Log.isLoggable("UriPermission", 2);
	return;
}
-----
depth : 1
public boolean releasePersistableModes(int p1){
	this.persistedModeFlags = ((~(p1 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	p0.updateModeFlags();
	return phiInstruction;
}
-----
depth : 2
public void updateModeFlags(){
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v1 = Log.isLoggable("UriPermission", 2);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void releasePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v3 = new GrantUri(p4,p1,0);
	UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3);
	GrantUri v5 = new GrantUri(p4,p1,128);
	UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);
	boolean v8 = v5.releasePersistableModes(p2);
	p0.removeUriPermissionIfNeededLocked(v5);
	boolean v10 = v7.releasePersistableModes(p2);
	p0.removeUriPermissionIfNeededLocked(v7);
	return;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public boolean releasePersistableModes(int p1){
	this.persistedModeFlags = ((~(p1 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	p0.updateModeFlags();
	return phiInstruction;
}
-----
depth : 2
public void updateModeFlags(){
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v1 = Log.isLoggable("UriPermission", 2);
	return;
}
-----
depth : 1
public boolean releasePersistableModes(int p1){
	this.persistedModeFlags = ((~(p1 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	p0.updateModeFlags();
	return phiInstruction;
}
-----
depth : 2
public void updateModeFlags(){
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v1 = Log.isLoggable("UriPermission", 2);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void releasePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v3 = new GrantUri(p4,p1,0);
	UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3);
	GrantUri v5 = new GrantUri(p4,p1,128);
	UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);
	boolean v8 = v5.releasePersistableModes(p2);
	p0.removeUriPermissionIfNeededLocked(v5);
	boolean v10 = v7.releasePersistableModes(p2);
	p0.removeUriPermissionIfNeededLocked(v7);
	p0.schedulePersistUriGrants();
	return;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	return 0;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public boolean releasePersistableModes(int p1){
	this.persistedModeFlags = ((~(p1 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	p0.updateModeFlags();
	return phiInstruction;
}
-----
depth : 2
public void updateModeFlags(){
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v1 = Log.isLoggable("UriPermission", 2);
	return;
}
-----
depth : 1
public boolean releasePersistableModes(int p1){
	this.persistedModeFlags = ((~(p1 & 3)) & this.persistedModeFlags);
	this.persistedCreateTime = 0;
	p0.updateModeFlags();
	return phiInstruction;
}
-----
depth : 2
public void updateModeFlags(){
	this.modeFlags = ((this.ownedModeFlags | this.globalModeFlags) | this.persistedModeFlags);
	boolean v1 = Log.isLoggable("UriPermission", 2);
	return;
}
-----
