This is path 1 for the API with depth 2:
depth : 0
public void takePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v3 = new GrantUri(p4,p1,0);
	UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3);
	GrantUri v5 = new GrantUri(p4,p1,128);
	UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);
	boolean v8 = v5.takePersistableModes(p2);
	boolean v9 = v7.takePersistableModes(p2);
	boolean v10 = p0.maybePrunePersistedUriGrantsLocked(phiInstruction);
	p0.schedulePersistUriGrants();
	return;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public boolean takePersistableModes(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Requested flags 0x");
	String v3 = Integer.toHexString((p1 & 3));
	StringBuilder v4 = v0.append(v3);
	StringBuilder v5 = v0.append(", but only 0x");
	String v6 = Integer.toHexString(this.persistableModeFlags);
	StringBuilder v7 = v0.append(v6);
	StringBuilder v8 = v0.append(" are allowed");
	String v9 = v0.toString();
	int v10 = Slog.w("UriPermission", v9);
	return 0;
}
-----
depth : 1
public boolean takePersistableModes(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Requested flags 0x");
	String v3 = Integer.toHexString((p1 & 3));
	StringBuilder v4 = v0.append(v3);
	StringBuilder v5 = v0.append(", but only 0x");
	String v6 = Integer.toHexString(this.persistableModeFlags);
	StringBuilder v7 = v0.append(v6);
	StringBuilder v8 = v0.append(" are allowed");
	String v9 = v0.toString();
	int v10 = Slog.w("UriPermission", v9);
	return 0;
}
-----
depth : 1
public boolean maybePrunePersistedUriGrantsLocked(int p1){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	int v2 = v1.size();
	ArrayList v3 = Lists.newArrayList();
	Collection v4 = v1.values();
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	int v7 = v3.size();
	UriPermission$PersistedTimeComparator v7 = new UriPermission$PersistedTimeComparator();
	Collections.sort(v3, v7);
	return 1;
}
-----
depth : 2
public ArrayList newArrayList(){
	ArrayList v0 = new ArrayList();
	return v0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void takePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v3 = new GrantUri(p4,p1,0);
	UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3);
	GrantUri v5 = new GrantUri(p4,p1,128);
	UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);
	boolean v8 = v5.takePersistableModes(p2);
	boolean v9 = v7.takePersistableModes(p2);
	boolean v10 = p0.maybePrunePersistedUriGrantsLocked(phiInstruction);
	return;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public boolean takePersistableModes(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Requested flags 0x");
	String v3 = Integer.toHexString((p1 & 3));
	StringBuilder v4 = v0.append(v3);
	StringBuilder v5 = v0.append(", but only 0x");
	String v6 = Integer.toHexString(this.persistableModeFlags);
	StringBuilder v7 = v0.append(v6);
	StringBuilder v8 = v0.append(" are allowed");
	String v9 = v0.toString();
	int v10 = Slog.w("UriPermission", v9);
	return 0;
}
-----
depth : 1
public boolean takePersistableModes(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Requested flags 0x");
	String v3 = Integer.toHexString((p1 & 3));
	StringBuilder v4 = v0.append(v3);
	StringBuilder v5 = v0.append(", but only 0x");
	String v6 = Integer.toHexString(this.persistableModeFlags);
	StringBuilder v7 = v0.append(v6);
	StringBuilder v8 = v0.append(" are allowed");
	String v9 = v0.toString();
	int v10 = Slog.w("UriPermission", v9);
	return 0;
}
-----
depth : 1
public boolean maybePrunePersistedUriGrantsLocked(int p1){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	int v2 = v1.size();
	ArrayList v3 = Lists.newArrayList();
	Collection v4 = v1.values();
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	int v7 = v3.size();
	UriPermission$PersistedTimeComparator v7 = new UriPermission$PersistedTimeComparator();
	Collections.sort(v3, v7);
	return 1;
}
-----
depth : 2
public ArrayList newArrayList(){
	ArrayList v0 = new ArrayList();
	return v0;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void takePersistableUriPermission(Uri p1, int p2, String p3, int p4){
	int v2 = this.mPmInternal.getPackageUid(p3, 0, p4);
	int v3 = Preconditions.checkFlagsArgument(p2, 3);
	GrantUri v3 = new GrantUri(p4,p1,0);
	UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3);
	GrantUri v5 = new GrantUri(p4,p1,128);
	UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);
	boolean v8 = v5.takePersistableModes(p2);
	boolean v9 = v7.takePersistableModes(p2);
	boolean v10 = p0.maybePrunePersistedUriGrantsLocked(phiInstruction);
	p0.schedulePersistUriGrants();
	return;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	return 0;
}
-----
depth : 1
public UriPermission findUriPermissionLocked(int p1, GrantUri p2){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	Object v2 = v1.get(p2);
	return v2;
}
-----
depth : 1
public boolean takePersistableModes(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Requested flags 0x");
	String v3 = Integer.toHexString((p1 & 3));
	StringBuilder v4 = v0.append(v3);
	StringBuilder v5 = v0.append(", but only 0x");
	String v6 = Integer.toHexString(this.persistableModeFlags);
	StringBuilder v7 = v0.append(v6);
	StringBuilder v8 = v0.append(" are allowed");
	String v9 = v0.toString();
	int v10 = Slog.w("UriPermission", v9);
	return 0;
}
-----
depth : 1
public boolean takePersistableModes(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Requested flags 0x");
	String v3 = Integer.toHexString((p1 & 3));
	StringBuilder v4 = v0.append(v3);
	StringBuilder v5 = v0.append(", but only 0x");
	String v6 = Integer.toHexString(this.persistableModeFlags);
	StringBuilder v7 = v0.append(v6);
	StringBuilder v8 = v0.append(" are allowed");
	String v9 = v0.toString();
	int v10 = Slog.w("UriPermission", v9);
	return 0;
}
-----
depth : 1
public boolean maybePrunePersistedUriGrantsLocked(int p1){
	Object v1 = this.mGrantedUriPermissions.get(p1);
	int v2 = v1.size();
	ArrayList v3 = Lists.newArrayList();
	Collection v4 = v1.values();
	Iterator v5 = v4.iterator();
	boolean v6 = v5.hasNext();
	int v7 = v3.size();
	UriPermission$PersistedTimeComparator v7 = new UriPermission$PersistedTimeComparator();
	Collections.sort(v3, v7);
	return 1;
}
-----
depth : 2
public ArrayList newArrayList(){
	ArrayList v0 = new ArrayList();
	return v0;
}
-----
