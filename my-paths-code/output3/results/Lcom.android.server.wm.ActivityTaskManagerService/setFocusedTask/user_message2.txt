The method setFocusedTask has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void setFocusedTask(int p1){
	ActivityTaskManagerService.enforceTaskPermission("setFocusedTask()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	p0.setFocusedTask(p1, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void setFocusedTask(int p1, ActivityRecord p2){
	String v1 = String.valueOf(p2);
	Object v1 = new Object(2);
	Long v2 = Long.valueOf(p1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v1);
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	ActivityRecord v5 = v4.topRunningActivityLocked();
	boolean v6 = v5.moveFocusableActivityToTop("setFocusedTask");
	boolean v7 = p2.isFocusable();
	TaskFragment v8 = p2.getTaskFragment();
	boolean v9 = v8.isEmbedded();
	DisplayContent v10 = p2.getDisplayContent();
	boolean v11 = v10.setFocusedApp(p2);
	boolean v12 = this.mWindowManager.updateFocusedWindowLocked(0, 1);
	return;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivityLocked(){
	WindowContainer v1 = p0.getParent();
	Task$$ExternalSyntheticLambda6 v1 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v3 = p0.getActivity(v1);
	return v3;
}
-----
depth : 2
public boolean moveFocusableActivityToTop(String p1){
	boolean v1 = p0.isFocusable();
	Task v2 = p0.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v2 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v4 = WindowContainer.mDisplayContent.getTask(v2, 1);
	String v5 = String.valueOf(p0);
	Object v5 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v5);
	boolean v7 = WindowContainer.mDisplayContent.setFocusedApp(p0);
	boolean v8 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v9 = p0.isState(ActivityRecord$State.RESUMED);
	return (v9 ^ 1);
}
-----
depth : 2
public boolean isFocusable(){
	boolean v1 = p0.isFocusable();
	boolean v2 = p0.canReceiveKeys();
	boolean v3 = p0.isAlwaysFocusable();
	return phiInstruction;
}
-----
depth : 2
public TaskFragment getTaskFragment(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	return phiInstruction;
}
-----
depth : 2
public boolean isEmbedded(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	boolean v3 = v2.isEmbedded();
	return phiInstruction;
}
-----
depth : 2
public DisplayContent getDisplayContent(){
	return this.mDisplayContent;
}
-----
depth : 2
public boolean setFocusedApp(ActivityRecord p1){
	DisplayContent v1 = p1.getDisplayContent();
	TaskDisplayArea v2 = p1.getDisplayArea();
	p0.onLastFocusedTaskDisplayAreaChanged(v2);
	String v4 = String.valueOf(p1);
	int v5 = p0.getDisplayId();
	String v6 = Debug.getCallers(4);
	String v7 = String.valueOf(v6);
	Object v7 = new Object(3);
	Long v8 = Long.valueOf(v5);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v7);
	Task v10 = this.mFocusedApp.getTask();
	Task v11 = p1.getTask();
	this.mFocusedApp = p1;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v14 = p0.getInputMonitor();
	v14.setFocusedAppLw(p1);
	p0.updateTouchExcludeRegion();
	return 1;
}
-----
depth : 2
public boolean updateFocusedWindowLocked(int p1, boolean p2){
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v2 = this.mRoot.updateFocusedWindowLocked(p1, p2);
	Trace.traceEnd(32);
	return v2;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void setFocusedTask(int p1){
	ActivityTaskManagerService.enforceTaskPermission("setFocusedTask()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	p0.setFocusedTask(p1, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void setFocusedTask(int p1, ActivityRecord p2){
	String v1 = String.valueOf(p2);
	Object v1 = new Object(2);
	Long v2 = Long.valueOf(p1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v1);
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	ActivityRecord v5 = v4.topRunningActivityLocked();
	boolean v6 = v5.moveFocusableActivityToTop("setFocusedTask");
	boolean v7 = p2.isFocusable();
	TaskFragment v8 = p2.getTaskFragment();
	boolean v9 = v8.isEmbedded();
	DisplayContent v10 = p2.getDisplayContent();
	boolean v11 = v10.setFocusedApp(p2);
	boolean v12 = this.mWindowManager.updateFocusedWindowLocked(0, 1);
	return;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivityLocked(){
	WindowContainer v1 = p0.getParent();
	Task$$ExternalSyntheticLambda6 v1 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v3 = p0.getActivity(v1);
	return v3;
}
-----
depth : 2
public boolean moveFocusableActivityToTop(String p1){
	boolean v1 = p0.isFocusable();
	Task v2 = p0.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v2 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v4 = WindowContainer.mDisplayContent.getTask(v2, 1);
	String v5 = String.valueOf(p0);
	Object v5 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v5);
	boolean v7 = WindowContainer.mDisplayContent.setFocusedApp(p0);
	boolean v8 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v9 = p0.isState(ActivityRecord$State.RESUMED);
	return (v9 ^ 1);
}
-----
depth : 2
public boolean isFocusable(){
	boolean v1 = p0.isFocusable();
	boolean v2 = p0.canReceiveKeys();
	boolean v3 = p0.isAlwaysFocusable();
	return phiInstruction;
}
-----
depth : 2
public TaskFragment getTaskFragment(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	return phiInstruction;
}
-----
depth : 2
public boolean isEmbedded(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	boolean v3 = v2.isEmbedded();
	return phiInstruction;
}
-----
depth : 2
public DisplayContent getDisplayContent(){
	return this.mDisplayContent;
}
-----
depth : 2
public boolean setFocusedApp(ActivityRecord p1){
	DisplayContent v1 = p1.getDisplayContent();
	TaskDisplayArea v2 = p1.getDisplayArea();
	p0.onLastFocusedTaskDisplayAreaChanged(v2);
	String v4 = String.valueOf(p1);
	int v5 = p0.getDisplayId();
	String v6 = Debug.getCallers(4);
	String v7 = String.valueOf(v6);
	Object v7 = new Object(3);
	Long v8 = Long.valueOf(v5);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v7);
	Task v10 = this.mFocusedApp.getTask();
	Task v11 = p1.getTask();
	this.mFocusedApp = p1;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v14 = p0.getInputMonitor();
	v14.setFocusedAppLw(p1);
	p0.updateTouchExcludeRegion();
	return 1;
}
-----
depth : 2
public boolean updateFocusedWindowLocked(int p1, boolean p2){
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v2 = this.mRoot.updateFocusedWindowLocked(p1, p2);
	Trace.traceEnd(32);
	return v2;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void setFocusedTask(int p1){
	ActivityTaskManagerService.enforceTaskPermission("setFocusedTask()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	p0.setFocusedTask(p1, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void setFocusedTask(int p1, ActivityRecord p2){
	String v1 = String.valueOf(p2);
	Object v1 = new Object(2);
	Long v2 = Long.valueOf(p1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, -55185509, 1, 0, v1);
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	ActivityRecord v5 = v4.topRunningActivityLocked();
	boolean v6 = v5.moveFocusableActivityToTop("setFocusedTask");
	boolean v7 = p2.isFocusable();
	TaskFragment v8 = p2.getTaskFragment();
	boolean v9 = v8.isEmbedded();
	DisplayContent v10 = p2.getDisplayContent();
	boolean v11 = v10.setFocusedApp(p2);
	boolean v12 = this.mWindowManager.updateFocusedWindowLocked(0, 1);
	return;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivityLocked(){
	WindowContainer v1 = p0.getParent();
	Task$$ExternalSyntheticLambda6 v1 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v3 = p0.getActivity(v1);
	return v3;
}
-----
depth : 2
public boolean moveFocusableActivityToTop(String p1){
	boolean v1 = p0.isFocusable();
	Task v2 = p0.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v2 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v4 = WindowContainer.mDisplayContent.getTask(v2, 1);
	String v5 = String.valueOf(p0);
	Object v5 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v5);
	boolean v7 = WindowContainer.mDisplayContent.setFocusedApp(p0);
	boolean v8 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v9 = p0.isState(ActivityRecord$State.RESUMED);
	return (v9 ^ 1);
}
-----
depth : 2
public boolean isFocusable(){
	boolean v1 = p0.isFocusable();
	boolean v2 = p0.canReceiveKeys();
	boolean v3 = p0.isAlwaysFocusable();
	return phiInstruction;
}
-----
depth : 2
public TaskFragment getTaskFragment(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	return phiInstruction;
}
-----
depth : 2
public boolean isEmbedded(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	boolean v3 = v2.isEmbedded();
	return phiInstruction;
}
-----
depth : 2
public DisplayContent getDisplayContent(){
	return this.mDisplayContent;
}
-----
depth : 2
public boolean setFocusedApp(ActivityRecord p1){
	DisplayContent v1 = p1.getDisplayContent();
	TaskDisplayArea v2 = p1.getDisplayArea();
	p0.onLastFocusedTaskDisplayAreaChanged(v2);
	String v4 = String.valueOf(p1);
	int v5 = p0.getDisplayId();
	String v6 = Debug.getCallers(4);
	String v7 = String.valueOf(v6);
	Object v7 = new Object(3);
	Long v8 = Long.valueOf(v5);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v7);
	Task v10 = this.mFocusedApp.getTask();
	Task v11 = p1.getTask();
	this.mFocusedApp = p1;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v14 = p0.getInputMonitor();
	v14.setFocusedAppLw(p1);
	p0.updateTouchExcludeRegion();
	return 1;
}
-----
depth : 2
public boolean updateFocusedWindowLocked(int p1, boolean p2){
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v2 = this.mRoot.updateFocusedWindowLocked(p1, p2);
	Trace.traceEnd(32);
	return v2;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['p0.setFocusedTask(p1, 0)\nTask v4 = this.mRootWindowContainer.anyTaskForId(p1, 0)\nActivityRecord v5 = v4.topRunningActivityLocked()\nboolean v6 = v5.moveFocusableActivityToTop("setFocusedTask")\nthis.mFocusedApp = p1', 'DisplayContent v10 = p2.getDisplayContent()\nboolean v11 = v10.setFocusedApp(p2)']

The method setFocusedTask has the following similar APIs:

- API Name: setFocusedRootTask(I)V with Similarity Score: 0.8627128005027771
  - Access Control Level: SYS_OR_SIG and the following code:
Object v1 = new Object(1);
Long v2 = Long.valueOf(p1);
Task v6 = this.mRootWindowContainer.getRootTask(p1);
ActivityRecord v7 = v6.topRunningActivity();
boolean v8 = v7.moveFocusableActivityToTop("setFocusedRootTask");

- API Name: getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo; with Similarity Score: 0.8433007001876831
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = p0.getTopDisplayFocusedRootTask();
ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);

