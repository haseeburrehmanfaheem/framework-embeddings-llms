The method moveTaskToRootTask has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	ActivityTaskManagerService.enforceTaskPermission("moveTaskToRootTask()");
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1);
	Object v4 = new Object(3);
	Long v5 = Long.valueOf(p1);
	Long v6 = Long.valueOf(p2);
	Boolean v7 = Boolean.valueOf(p3);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, -677449371, 53, 0, v4);
	Task v9 = this.mRootWindowContainer.getRootTask(p2);
	boolean v10 = v9.isActivityTypeStandardOrUndefined();
	boolean v11 = v4.reparent(v9, p3, 1, 1, 0, "moveTaskToRootTask");
	Binder.restoreCallingIdentity(v3);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1){
	Task v1 = p0.anyTaskForId(p1, 2);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 2
public WindowContainer getChildAt(int p1){
	Object v1 = this.mChildren.get(p1);
	return v1;
}
-----
depth : 2
public Task getRootTask(int p1){
	DisplayContent$$ExternalSyntheticLambda6 v0 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v2 = p0.getRootTask(v0);
	return v2;
}
-----
depth : 1
public boolean reparent(Task p1, boolean p2, int p3, boolean p4, boolean p5, String p6){
	boolean v1 = p0.reparent(p1, phiInstruction, p3, p4, p5, 1, p6);
	return v1;
}
-----
depth : 2
public boolean reparent(Task p1, int p2, int p3, boolean p4, boolean p5, boolean p6, String p7){
	Task v1 = p0.getRootTask();
	Task v2 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(p0, p1, phiInstruction);
	int v3 = v2.getDisplayId();
	boolean v4 = p0.canBeLaunchedOnDisplay(v3);
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	ActivityTaskManagerService.enforceTaskPermission("moveTaskToRootTask()");
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1);
	Object v4 = new Object(3);
	Long v5 = Long.valueOf(p1);
	Long v6 = Long.valueOf(p2);
	Boolean v7 = Boolean.valueOf(p3);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, -677449371, 53, 0, v4);
	Task v9 = this.mRootWindowContainer.getRootTask(p2);
	boolean v10 = v9.isActivityTypeStandardOrUndefined();
	boolean v11 = v4.reparent(v9, p3, 1, 1, 0, "moveTaskToRootTask");
	Binder.restoreCallingIdentity(v3);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1){
	Task v1 = p0.anyTaskForId(p1, 2);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 2
public WindowContainer getChildAt(int p1){
	Object v1 = this.mChildren.get(p1);
	return v1;
}
-----
depth : 2
public Task getRootTask(int p1){
	DisplayContent$$ExternalSyntheticLambda6 v0 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v2 = p0.getRootTask(v0);
	return v2;
}
-----
depth : 1
public boolean reparent(Task p1, boolean p2, int p3, boolean p4, boolean p5, String p6){
	boolean v1 = p0.reparent(p1, phiInstruction, p3, p4, p5, 1, p6);
	return v1;
}
-----
depth : 2
public boolean reparent(Task p1, int p2, int p3, boolean p4, boolean p5, boolean p6, String p7){
	Task v1 = p0.getRootTask();
	Task v2 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(p0, p1, phiInstruction);
	int v3 = v2.getDisplayId();
	boolean v4 = p0.canBeLaunchedOnDisplay(v3);
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void moveTaskToRootTask(int p1, int p2, boolean p3){
	ActivityTaskManagerService.enforceTaskPermission("moveTaskToRootTask()");
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1);
	Object v4 = new Object(3);
	Long v5 = Long.valueOf(p1);
	Long v6 = Long.valueOf(p2);
	Boolean v7 = Boolean.valueOf(p3);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, -677449371, 53, 0, v4);
	Task v9 = this.mRootWindowContainer.getRootTask(p2);
	boolean v10 = v9.isActivityTypeStandardOrUndefined();
	boolean v11 = v4.reparent(v9, p3, 1, 1, 0, "moveTaskToRootTask");
	Binder.restoreCallingIdentity(v3);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1){
	Task v1 = p0.anyTaskForId(p1, 2);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 2
public WindowContainer getChildAt(int p1){
	Object v1 = this.mChildren.get(p1);
	return v1;
}
-----
depth : 2
public Task getRootTask(int p1){
	DisplayContent$$ExternalSyntheticLambda6 v0 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v2 = p0.getRootTask(v0);
	return v2;
}
-----
depth : 1
public boolean reparent(Task p1, boolean p2, int p3, boolean p4, boolean p5, String p6){
	boolean v1 = p0.reparent(p1, phiInstruction, p3, p4, p5, 1, p6);
	return v1;
}
-----
depth : 2
public boolean reparent(Task p1, int p2, int p3, boolean p4, boolean p5, boolean p6, String p7){
	Task v1 = p0.getRootTask();
	Task v2 = TaskFragment.mTaskSupervisor.getReparentTargetRootTask(p0, p1, phiInstruction);
	int v3 = v2.getDisplayId();
	boolean v4 = p0.canBeLaunchedOnDisplay(v3);
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['Task v4 = this.mRootWindowContainer.anyTaskForId(p1);\nTask v9 = this.mRootWindowContainer.getRootTask(p2);\nboolean v11 = v4.reparent(v9, p3, 1, 1, 0, "moveTaskToRootTask");']

The method moveTaskToRootTask has the following similar APIs:

- API Name: removeTask(I)Z with Similarity Score: 0.851344108581543
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
boolean v5 = v4.isLeafTask();
this.mTaskSupervisor.removeTask(v4, 1, 1, "remove-task");

- API Name: setTaskResizeable(II)V with Similarity Score: 0.8346332311630249
  - Access Control Level: SYS_OR_SIG and the following code:
Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);
v2.setResizeMode(p2);

