This is path 1 for the API with depth 2:
depth : 0
public int getFrontActivityScreenCompatMode(){
	ActivityTaskManagerService.enforceNotIsolatedCaller("getFrontActivityScreenCompatMode");
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v4 = v3.topRunningActivity();
	int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v5;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivity(boolean p1){
	ActivityRecord v1 = p0.topRunningActivity(p1, 1);
	return v1;
}
-----
depth : 1
public int computeCompatModeLocked(ApplicationInfo p1){
	CompatibilityInfo v1 = p0.compatibilityInfoForPackageLocked(p1);
	boolean v2 = v1.alwaysSupportsScreen();
	boolean v3 = v1.neverSupportsScreen();
	boolean v4 = p0.getPackageCompatModeEnabledLocked(p1);
	return v4;
}
-----
depth : 2
public CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo p1){
	boolean v1 = p0.getPackageCompatModeEnabledLocked(p1);
	float v2 = p0.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
	Configuration v3 = this.mService.getGlobalConfiguration();
	CompatibilityInfo v3 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v1,v2);
	return v3;
}
-----
depth : 2
public boolean getPackageCompatModeEnabledLocked(ApplicationInfo p1){
	int v1 = p0.getPackageFlags(ApplicationInfo.packageName);
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public int getFrontActivityScreenCompatMode(){
	ActivityTaskManagerService.enforceNotIsolatedCaller("getFrontActivityScreenCompatMode");
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v4 = v3.topRunningActivity();
	int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v5;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivity(boolean p1){
	ActivityRecord v1 = p0.topRunningActivity(p1, 1);
	return v1;
}
-----
depth : 1
public int computeCompatModeLocked(ApplicationInfo p1){
	CompatibilityInfo v1 = p0.compatibilityInfoForPackageLocked(p1);
	boolean v2 = v1.alwaysSupportsScreen();
	boolean v3 = v1.neverSupportsScreen();
	boolean v4 = p0.getPackageCompatModeEnabledLocked(p1);
	return v4;
}
-----
depth : 2
public CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo p1){
	boolean v1 = p0.getPackageCompatModeEnabledLocked(p1);
	float v2 = p0.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
	Configuration v3 = this.mService.getGlobalConfiguration();
	CompatibilityInfo v3 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v1,v2);
	return v3;
}
-----
depth : 2
public boolean getPackageCompatModeEnabledLocked(ApplicationInfo p1){
	int v1 = p0.getPackageFlags(ApplicationInfo.packageName);
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public int getFrontActivityScreenCompatMode(){
	ActivityTaskManagerService.enforceNotIsolatedCaller("getFrontActivityScreenCompatMode");
	WindowManagerService.boostPriorityForLockedSection();
	Task v3 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v4 = v3.topRunningActivity();
	int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v5;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivity(boolean p1){
	ActivityRecord v1 = p0.topRunningActivity(p1, 1);
	return v1;
}
-----
depth : 1
public int computeCompatModeLocked(ApplicationInfo p1){
	CompatibilityInfo v1 = p0.compatibilityInfoForPackageLocked(p1);
	boolean v2 = v1.alwaysSupportsScreen();
	boolean v3 = v1.neverSupportsScreen();
	boolean v4 = p0.getPackageCompatModeEnabledLocked(p1);
	return v4;
}
-----
depth : 2
public CompatibilityInfo compatibilityInfoForPackageLocked(ApplicationInfo p1){
	boolean v1 = p0.getPackageCompatModeEnabledLocked(p1);
	float v2 = p0.getCompatScale(ApplicationInfo.packageName, ApplicationInfo.uid);
	Configuration v3 = this.mService.getGlobalConfiguration();
	CompatibilityInfo v3 = new CompatibilityInfo(p1,Configuration.screenLayout,Configuration.smallestScreenWidthDp,v1,v2);
	return v3;
}
-----
depth : 2
public boolean getPackageCompatModeEnabledLocked(ApplicationInfo p1){
	int v1 = p0.getPackageFlags(ApplicationInfo.packageName);
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
