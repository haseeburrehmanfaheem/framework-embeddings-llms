This is path 1 for the API with depth 2:
depth : 0
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.handleIncomingUser(v2, v1, p3, "getRecentTasks");
	int v4 = Binder.getCallingPid();
	boolean v5 = p0.isGetTasksAllowed("getRecentTasks", v4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	ParceledListSlice v7 = this.mRecentTasks.getRecentTasks(p1, p2, v5, v3, v1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v7;
}
-----
depth : 1
public int handleIncomingUser(int p1, int p2, int p3, String p4){
	int v1 = this.mAmInternal.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public boolean isGetTasksAllowed(String p1, int p2, int p3){
	IPackageManager v4 = AppGlobals.getPackageManager();
	boolean v5 = v4.isUidPrivileged(p3);
	String v6 = String.valueOf(p1);
	Object v6 = new Object(2);
	Long v7 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v6);
	String v9 = String.valueOf(p1);
	Object v9 = new Object(2);
	Long v10 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v9);
	return phiInstruction;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public ParceledListSlice getRecentTasks(int p1, int p2, boolean p3, int p4, int p5){
	ParceledListSlice v0 = new ParceledListSlice(v1);
	ArrayList v1 = p0.getRecentTasksImpl(p1, p2, p3, p4, p5);
	return v0;
}
-----
depth : 2
public ArrayList getRecentTasksImpl(int p1, int p2, boolean p3, int p4, int p5){
	boolean v1 = p0.isUserRunning(p4, 4);
	p0.loadUserRecentsLocked(p4);
	Set v3 = p0.getProfileIds(p4);
	Integer v4 = Integer.valueOf(p4);
	boolean v5 = v3.add(v4);
	ArrayList v5 = new ArrayList();
	int v7 = this.mTasks.size();
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.handleIncomingUser(v2, v1, p3, "getRecentTasks");
	int v4 = Binder.getCallingPid();
	boolean v5 = p0.isGetTasksAllowed("getRecentTasks", v4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	ParceledListSlice v7 = this.mRecentTasks.getRecentTasks(p1, p2, v5, v3, v1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v7;
}
-----
depth : 1
public int handleIncomingUser(int p1, int p2, int p3, String p4){
	int v1 = this.mAmInternal.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public boolean isGetTasksAllowed(String p1, int p2, int p3){
	IPackageManager v4 = AppGlobals.getPackageManager();
	boolean v5 = v4.isUidPrivileged(p3);
	String v6 = String.valueOf(p1);
	Object v6 = new Object(2);
	Long v7 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v6);
	String v9 = String.valueOf(p1);
	Object v9 = new Object(2);
	Long v10 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v9);
	return phiInstruction;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public ParceledListSlice getRecentTasks(int p1, int p2, boolean p3, int p4, int p5){
	ParceledListSlice v0 = new ParceledListSlice(v1);
	ArrayList v1 = p0.getRecentTasksImpl(p1, p2, p3, p4, p5);
	return v0;
}
-----
depth : 2
public ArrayList getRecentTasksImpl(int p1, int p2, boolean p3, int p4, int p5){
	boolean v1 = p0.isUserRunning(p4, 4);
	p0.loadUserRecentsLocked(p4);
	Set v3 = p0.getProfileIds(p4);
	Integer v4 = Integer.valueOf(p4);
	boolean v5 = v3.add(v4);
	ArrayList v5 = new ArrayList();
	int v7 = this.mTasks.size();
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public ParceledListSlice getRecentTasks(int p1, int p2, int p3){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.handleIncomingUser(v2, v1, p3, "getRecentTasks");
	int v4 = Binder.getCallingPid();
	boolean v5 = p0.isGetTasksAllowed("getRecentTasks", v4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	ParceledListSlice v7 = this.mRecentTasks.getRecentTasks(p1, p2, v5, v3, v1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v7;
}
-----
depth : 1
public int handleIncomingUser(int p1, int p2, int p3, String p4){
	int v1 = this.mAmInternal.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public boolean isGetTasksAllowed(String p1, int p2, int p3){
	IPackageManager v4 = AppGlobals.getPackageManager();
	boolean v5 = v4.isUidPrivileged(p3);
	String v6 = String.valueOf(p1);
	Object v6 = new Object(2);
	Long v7 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -917215012, 4, 0, v6);
	String v9 = String.valueOf(p1);
	Object v9 = new Object(2);
	Long v10 = Long.valueOf(p3);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_TASKS, -401029526, 4, 0, v9);
	return phiInstruction;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public ParceledListSlice getRecentTasks(int p1, int p2, boolean p3, int p4, int p5){
	ParceledListSlice v0 = new ParceledListSlice(v1);
	ArrayList v1 = p0.getRecentTasksImpl(p1, p2, p3, p4, p5);
	return v0;
}
-----
depth : 2
public ArrayList getRecentTasksImpl(int p1, int p2, boolean p3, int p4, int p5){
	boolean v1 = p0.isUserRunning(p4, 4);
	p0.loadUserRecentsLocked(p4);
	Set v3 = p0.getProfileIds(p4);
	Integer v4 = Integer.valueOf(p4);
	boolean v5 = v3.add(v4);
	ArrayList v5 = new ArrayList();
	int v7 = this.mTasks.size();
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
