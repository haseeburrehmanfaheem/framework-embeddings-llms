The method getTaskDescription has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public ActivityManager$TaskDescription getTaskDescription(int p1){
	WindowManagerService.boostPriorityForLockedSection();
	ActivityTaskManagerService.enforceTaskPermission("getTaskDescription()");
	Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	ActivityManager$TaskDescription v4 = v3.getTaskDescription();
	WindowManagerService.resetPriorityAfterLockedSection();
	return v4;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public ActivityManager$TaskDescription getTaskDescription(int p1){
	WindowManagerService.boostPriorityForLockedSection();
	ActivityTaskManagerService.enforceTaskPermission("getTaskDescription()");
	Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	ActivityManager$TaskDescription v4 = v3.getTaskDescription();
	WindowManagerService.resetPriorityAfterLockedSection();
	return v4;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public ActivityManager$TaskDescription getTaskDescription(int p1){
	WindowManagerService.boostPriorityForLockedSection();
	ActivityTaskManagerService.enforceTaskPermission("getTaskDescription()");
	Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	ActivityManager$TaskDescription v4 = v3.getTaskDescription();
	WindowManagerService.resetPriorityAfterLockedSection();
	return v4;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 1);\nActivityManager$TaskDescription v4 = v3.getTaskDescription();\nreturn v4;']

The method getTaskDescription has the following similar APIs:

- API Name: getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo; with Similarity Score: 0.862377405166626
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = p0.getTopDisplayFocusedRootTask();
ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);

- API Name: getRootTaskInfoOnDisplay(III)Landroid/app/ActivityTaskManager$RootTaskInfo; with Similarity Score: 0.8389332294464111
  - Access Control Level: SYS_OR_SIG and the following code:
ActivityTaskManager$RootTaskInfo v4 = this.mRootWindowContainer.getRootTaskInfo(p1, p2, p3);
return v4;

