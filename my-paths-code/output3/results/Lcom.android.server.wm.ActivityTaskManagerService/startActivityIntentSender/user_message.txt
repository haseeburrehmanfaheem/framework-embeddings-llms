This is path 1 for the API with depth 2:
depth : 0
public int startActivityIntentSender(IApplicationThread p1, IIntentSender p2, IBinder p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, int p10, Bundle p11){
	ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityIntentSender");
	boolean v2 = p4.hasFileDescriptors();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v5 = v4.getTopResumedActivity();
	WindowManagerService.resetPriorityAfterLockedSection();
	int v7 = p2.sendInner(0, p4, p5, p3, 0, 0, p6, p7, p8, p9, p10, p11);
	return v7;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityRecord getTopResumedActivity(){
	boolean v1 = p0.isLeafTask();
	int v2 = WindowContainer.mChildren.size();
	ActivityRecord v3 = p0.getResumedActivity();
	int v4 = WindowContainer.mChildren.size();
	Object v5 = WindowContainer.mChildren.get(phiInstruction);
	TaskFragment v6 = v5.asTaskFragment();
	TaskFragment v7 = v5.asTaskFragment();
	ActivityRecord v8 = v7.getTopResumedActivity();
	return phiInstruction;
}
-----
depth : 2
public boolean isLeafTask(){
	int v1 = WindowContainer.mChildren.size();
	Object v2 = WindowContainer.mChildren.get(phiInstruction);
	Task v3 = v2.asTask();
	return 0;
}
-----
depth : 2
public ActivityRecord getResumedActivity(){
	return this.mResumedActivity;
}
-----
depth : 2
public TaskFragment asTaskFragment(){
	return 0;
}
-----
depth : 2
public TaskFragment asTaskFragment(){
	return 0;
}
-----
depth : 2
public ActivityRecord getTopResumedActivity(){
	ActivityRecord v1 = p0.getResumedActivity();
	int v2 = p0.getChildCount();
	WindowContainer v3 = p0.getChildAt(phiInstruction);
	TaskFragment v4 = v3.asTaskFragment();
	TaskFragment v5 = v3.asTaskFragment();
	ActivityRecord v6 = v5.getTopResumedActivity();
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public int startActivityIntentSender(IApplicationThread p1, IIntentSender p2, IBinder p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, int p10, Bundle p11){
	ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityIntentSender");
	boolean v2 = p4.hasFileDescriptors();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v5 = v4.getTopResumedActivity();
	WindowManagerService.resetPriorityAfterLockedSection();
	int v7 = p2.sendInner(0, p4, p5, p3, 0, 0, p6, p7, p8, p9, p10, p11);
	return v7;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityRecord getTopResumedActivity(){
	boolean v1 = p0.isLeafTask();
	int v2 = WindowContainer.mChildren.size();
	ActivityRecord v3 = p0.getResumedActivity();
	int v4 = WindowContainer.mChildren.size();
	Object v5 = WindowContainer.mChildren.get(phiInstruction);
	TaskFragment v6 = v5.asTaskFragment();
	TaskFragment v7 = v5.asTaskFragment();
	ActivityRecord v8 = v7.getTopResumedActivity();
	return phiInstruction;
}
-----
depth : 2
public boolean isLeafTask(){
	int v1 = WindowContainer.mChildren.size();
	Object v2 = WindowContainer.mChildren.get(phiInstruction);
	Task v3 = v2.asTask();
	return 0;
}
-----
depth : 2
public ActivityRecord getResumedActivity(){
	return this.mResumedActivity;
}
-----
depth : 2
public TaskFragment asTaskFragment(){
	return 0;
}
-----
depth : 2
public TaskFragment asTaskFragment(){
	return 0;
}
-----
depth : 2
public ActivityRecord getTopResumedActivity(){
	ActivityRecord v1 = p0.getResumedActivity();
	int v2 = p0.getChildCount();
	WindowContainer v3 = p0.getChildAt(phiInstruction);
	TaskFragment v4 = v3.asTaskFragment();
	TaskFragment v5 = v3.asTaskFragment();
	ActivityRecord v6 = v5.getTopResumedActivity();
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public int startActivityIntentSender(IApplicationThread p1, IIntentSender p2, IBinder p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, int p10, Bundle p11){
	ActivityTaskManagerService.enforceNotIsolatedCaller("startActivityIntentSender");
	boolean v2 = p4.hasFileDescriptors();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = p0.getTopDisplayFocusedRootTask();
	ActivityRecord v5 = v4.getTopResumedActivity();
	WindowManagerService.resetPriorityAfterLockedSection();
	int v7 = p2.sendInner(0, p4, p5, p3, 0, 0, p6, p7, p8, p9, p10, p11);
	return v7;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task getTopDisplayFocusedRootTask(){
	Task v1 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	return v1;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 1
public ActivityRecord getTopResumedActivity(){
	boolean v1 = p0.isLeafTask();
	int v2 = WindowContainer.mChildren.size();
	ActivityRecord v3 = p0.getResumedActivity();
	int v4 = WindowContainer.mChildren.size();
	Object v5 = WindowContainer.mChildren.get(phiInstruction);
	TaskFragment v6 = v5.asTaskFragment();
	TaskFragment v7 = v5.asTaskFragment();
	ActivityRecord v8 = v7.getTopResumedActivity();
	return phiInstruction;
}
-----
depth : 2
public boolean isLeafTask(){
	int v1 = WindowContainer.mChildren.size();
	Object v2 = WindowContainer.mChildren.get(phiInstruction);
	Task v3 = v2.asTask();
	return 0;
}
-----
depth : 2
public ActivityRecord getResumedActivity(){
	return this.mResumedActivity;
}
-----
depth : 2
public TaskFragment asTaskFragment(){
	return 0;
}
-----
depth : 2
public TaskFragment asTaskFragment(){
	return 0;
}
-----
depth : 2
public ActivityRecord getTopResumedActivity(){
	ActivityRecord v1 = p0.getResumedActivity();
	int v2 = p0.getChildCount();
	WindowContainer v3 = p0.getChildAt(phiInstruction);
	TaskFragment v4 = v3.asTaskFragment();
	TaskFragment v5 = v3.asTaskFragment();
	ActivityRecord v6 = v5.getTopResumedActivity();
	return phiInstruction;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
