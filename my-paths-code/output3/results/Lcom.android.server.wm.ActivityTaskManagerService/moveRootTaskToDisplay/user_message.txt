This is path 1 for the API with depth 2:
depth : 0
public void moveRootTaskToDisplay(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	Object v3 = new Object(2);
	Long v4 = Long.valueOf(p1);
	Long v5 = Long.valueOf(p2);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, -1419762046, 5, 0, v3);
	this.mRootWindowContainer.moveRootTaskToDisplay(p1, p2, 1);
	Binder.restoreCallingIdentity(v3);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void moveRootTaskToDisplay(int p1, int p2, boolean p3){
	DisplayContent v1 = p0.getDisplayContentOrCreate(p2);
	TaskDisplayArea v2 = v1.getDefaultTaskDisplayArea();
	p0.moveRootTaskToTaskDisplayArea(p1, v2, p3);
	return;
}
-----
depth : 2
public DisplayContent getDisplayContentOrCreate(int p1){
	DisplayContent v1 = p0.getDisplayContent(p1);
	Display v2 = this.mDisplayManager.getDisplay(p1);
	DisplayContent v2 = new DisplayContent(v2,p0);
	p0.addChild(v2, -2147483648);
	return v2;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDisplayAreaPolicy.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public void moveRootTaskToTaskDisplayArea(int p1, TaskDisplayArea p2, boolean p3){
	Task v1 = p0.getRootTask(p1);
	TaskDisplayArea v2 = v1.getDisplayArea();
	v1.reparent(p2, p3);
	v1.resumeNextFocusAfterReparent();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void moveRootTaskToDisplay(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	Object v3 = new Object(2);
	Long v4 = Long.valueOf(p1);
	Long v5 = Long.valueOf(p2);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, -1419762046, 5, 0, v3);
	this.mRootWindowContainer.moveRootTaskToDisplay(p1, p2, 1);
	Binder.restoreCallingIdentity(v3);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void moveRootTaskToDisplay(int p1, int p2, boolean p3){
	DisplayContent v1 = p0.getDisplayContentOrCreate(p2);
	TaskDisplayArea v2 = v1.getDefaultTaskDisplayArea();
	p0.moveRootTaskToTaskDisplayArea(p1, v2, p3);
	return;
}
-----
depth : 2
public DisplayContent getDisplayContentOrCreate(int p1){
	DisplayContent v1 = p0.getDisplayContent(p1);
	Display v2 = this.mDisplayManager.getDisplay(p1);
	DisplayContent v2 = new DisplayContent(v2,p0);
	p0.addChild(v2, -2147483648);
	return v2;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDisplayAreaPolicy.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public void moveRootTaskToTaskDisplayArea(int p1, TaskDisplayArea p2, boolean p3){
	Task v1 = p0.getRootTask(p1);
	TaskDisplayArea v2 = v1.getDisplayArea();
	v1.reparent(p2, p3);
	v1.resumeNextFocusAfterReparent();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void moveRootTaskToDisplay(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	long v3 = Binder.clearCallingIdentity();
	Object v3 = new Object(2);
	Long v4 = Long.valueOf(p1);
	Long v5 = Long.valueOf(p2);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, -1419762046, 5, 0, v3);
	this.mRootWindowContainer.moveRootTaskToDisplay(p1, p2, 1);
	Binder.restoreCallingIdentity(v3);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void moveRootTaskToDisplay(int p1, int p2, boolean p3){
	DisplayContent v1 = p0.getDisplayContentOrCreate(p2);
	TaskDisplayArea v2 = v1.getDefaultTaskDisplayArea();
	p0.moveRootTaskToTaskDisplayArea(p1, v2, p3);
	return;
}
-----
depth : 2
public DisplayContent getDisplayContentOrCreate(int p1){
	DisplayContent v1 = p0.getDisplayContent(p1);
	Display v2 = this.mDisplayManager.getDisplay(p1);
	DisplayContent v2 = new DisplayContent(v2,p0);
	p0.addChild(v2, -2147483648);
	return v2;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDisplayAreaPolicy.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public void moveRootTaskToTaskDisplayArea(int p1, TaskDisplayArea p2, boolean p3){
	Task v1 = p0.getRootTask(p1);
	TaskDisplayArea v2 = v1.getDisplayArea();
	v1.reparent(p2, p3);
	v1.resumeNextFocusAfterReparent();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
