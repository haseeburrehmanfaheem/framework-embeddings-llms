This is path 1 for the API with depth 2:
depth : 0
public void cancelTaskWindowTransition(int p1){
	ActivityTaskManagerService.enforceTaskPermission("cancelTaskWindowTransition()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cancelTaskWindowTransition: taskId=");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append(" not found");
	String v9 = v4.toString();
	int v10 = Slog.w("ActivityTaskManager", v9);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void cancelTaskWindowTransition(int p1){
	ActivityTaskManagerService.enforceTaskPermission("cancelTaskWindowTransition()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cancelTaskWindowTransition: taskId=");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append(" not found");
	String v9 = v4.toString();
	int v10 = Slog.w("ActivityTaskManager", v9);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void cancelTaskWindowTransition(int p1){
	ActivityTaskManagerService.enforceTaskPermission("cancelTaskWindowTransition()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cancelTaskWindowTransition: taskId=");
	StringBuilder v7 = v4.append(p1);
	StringBuilder v8 = v4.append(" not found");
	String v9 = v4.toString();
	int v10 = Slog.w("ActivityTaskManager", v9);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
