This is path 1 for the API with depth 2:
depth : 0
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	TransitionController v4 = p0.getTransitionController();
	v4.legacyDetachNavigationBarFromApp(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public TransitionController getTransitionController(){
	TransitionController v1 = this.mWindowOrganizerController.getTransitionController();
	return v1;
}
-----
depth : 2
public TransitionController getTransitionController(){
	return this.mTransitionController;
}
-----
depth : 1
public void legacyDetachNavigationBarFromApp(IBinder p1){
	Transition v1 = Transition.fromBinder(p1);
	boolean v2 = this.mPlayingTransitions.contains(v1);
	v1.legacyRestoreNavigationBarFromApp();
	return;
}
-----
depth : 2
public Transition fromBinder(IBinder p1){
	return p1;
}
-----
depth : 2
public void legacyRestoreNavigationBarFromApp(){
	this.mNavBarAttachedToApp = 0;
	int v1 = Slog.e("Transition", "Reparented navigation bar without a valid display");
	this.mRecentsDisplayId = 0;
	TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
	DisplayContent v3 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
	DisplayPolicy v4 = v3.getDisplayPolicy();
	WindowState v5 = v4.getNavigationBar();
	v5.setSurfaceTranslationY(0);
	SurfaceControl$Transaction v7 = v3.getPendingTransaction();
	WindowContainer v8 = WindowState.mToken.getParent();
	SurfaceControl v9 = WindowState.mToken.getSurfaceControl();
	int v10 = WindowState.mToken.getLastLayer();
	SurfaceControl$Transaction v11 = v7.setLayer(v9, v10);
	int v12 = this.mTargets.size();
	Object v13 = this.mTargets.get(phiInstruction);
	Task v14 = v13.asTask();
	boolean v15 = v14.isActivityTypeHomeOrRecents();
	boolean v16 = v14.isVisibleRequested();
	NavBarFadeAnimationController v16 = new NavBarFadeAnimationController(v3);
	v16.fadeWindowToken(1);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	TransitionController v4 = p0.getTransitionController();
	v4.legacyDetachNavigationBarFromApp(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public TransitionController getTransitionController(){
	TransitionController v1 = this.mWindowOrganizerController.getTransitionController();
	return v1;
}
-----
depth : 2
public TransitionController getTransitionController(){
	return this.mTransitionController;
}
-----
depth : 1
public void legacyDetachNavigationBarFromApp(IBinder p1){
	Transition v1 = Transition.fromBinder(p1);
	boolean v2 = this.mPlayingTransitions.contains(v1);
	v1.legacyRestoreNavigationBarFromApp();
	return;
}
-----
depth : 2
public Transition fromBinder(IBinder p1){
	return p1;
}
-----
depth : 2
public void legacyRestoreNavigationBarFromApp(){
	this.mNavBarAttachedToApp = 0;
	int v1 = Slog.e("Transition", "Reparented navigation bar without a valid display");
	this.mRecentsDisplayId = 0;
	TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
	DisplayContent v3 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
	DisplayPolicy v4 = v3.getDisplayPolicy();
	WindowState v5 = v4.getNavigationBar();
	v5.setSurfaceTranslationY(0);
	SurfaceControl$Transaction v7 = v3.getPendingTransaction();
	WindowContainer v8 = WindowState.mToken.getParent();
	SurfaceControl v9 = WindowState.mToken.getSurfaceControl();
	int v10 = WindowState.mToken.getLastLayer();
	SurfaceControl$Transaction v11 = v7.setLayer(v9, v10);
	int v12 = this.mTargets.size();
	Object v13 = this.mTargets.get(phiInstruction);
	Task v14 = v13.asTask();
	boolean v15 = v14.isActivityTypeHomeOrRecents();
	boolean v16 = v14.isVisibleRequested();
	NavBarFadeAnimationController v16 = new NavBarFadeAnimationController(v3);
	v16.fadeWindowToken(1);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void detachNavigationBarFromApp(IBinder p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	TransitionController v4 = p0.getTransitionController();
	v4.legacyDetachNavigationBarFromApp(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public TransitionController getTransitionController(){
	TransitionController v1 = this.mWindowOrganizerController.getTransitionController();
	return v1;
}
-----
depth : 2
public TransitionController getTransitionController(){
	return this.mTransitionController;
}
-----
depth : 1
public void legacyDetachNavigationBarFromApp(IBinder p1){
	Transition v1 = Transition.fromBinder(p1);
	boolean v2 = this.mPlayingTransitions.contains(v1);
	v1.legacyRestoreNavigationBarFromApp();
	return;
}
-----
depth : 2
public Transition fromBinder(IBinder p1){
	return p1;
}
-----
depth : 2
public void legacyRestoreNavigationBarFromApp(){
	this.mNavBarAttachedToApp = 0;
	int v1 = Slog.e("Transition", "Reparented navigation bar without a valid display");
	this.mRecentsDisplayId = 0;
	TransitionController.mStatusBar.setNavigationBarLumaSamplingEnabled(this.mRecentsDisplayId, 1);
	DisplayContent v3 = ActivityTaskManagerService.mRootWindowContainer.getDisplayContent(this.mRecentsDisplayId);
	DisplayPolicy v4 = v3.getDisplayPolicy();
	WindowState v5 = v4.getNavigationBar();
	v5.setSurfaceTranslationY(0);
	SurfaceControl$Transaction v7 = v3.getPendingTransaction();
	WindowContainer v8 = WindowState.mToken.getParent();
	SurfaceControl v9 = WindowState.mToken.getSurfaceControl();
	int v10 = WindowState.mToken.getLastLayer();
	SurfaceControl$Transaction v11 = v7.setLayer(v9, v10);
	int v12 = this.mTargets.size();
	Object v13 = this.mTargets.get(phiInstruction);
	Task v14 = v13.asTask();
	boolean v15 = v14.isActivityTypeHomeOrRecents();
	boolean v16 = v14.isVisibleRequested();
	NavBarFadeAnimationController v16 = new NavBarFadeAnimationController(v3);
	v16.fadeWindowToken(1);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
