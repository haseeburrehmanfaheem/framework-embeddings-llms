This is path 1 for the API with depth 2:
depth : 0
public void startSystemLockTaskMode(int p1){
	ActivityTaskManagerService.enforceTaskPermission("startSystemLockTaskMode");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	Task v5 = v4.getRootTask();
	v5.moveToFront("startSystemLockTaskMode");
	p0.startLockTaskMode(v4, 1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public Task getRootTask(){
	TaskFragment v1 = p0.getRootTaskFragment();
	Task v2 = v1.asTask();
	return v2;
}
-----
depth : 2
public TaskFragment getRootTaskFragment(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	return phiInstruction;
}
-----
depth : 2
public Task asTask(){
	return 0;
}
-----
depth : 1
public void moveToFront(String p1){
	p0.moveToFront(p1, 0);
	return;
}
-----
depth : 2
public void moveToFront(String p1, Task p2){
	boolean v1 = p0.isAttached();
	TaskDisplayArea v2 = p0.getDisplayArea();
	boolean v3 = p0.isActivityTypeHome();
	boolean v4 = p0.returnsToHomeRootTask();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(p1);
	StringBuilder v7 = v4.append(" returnToHome");
	String v8 = v4.toString();
	v2.moveHomeRootTaskToFront(v8);
	boolean v10 = p0.isRootTask();
	Task v11 = v2.getFocusedRootTask();
	WindowContainer v12 = phiInstruction.getParent();
	v12.positionChildAt(2147483647, phiInstruction, 1);
	v2.updateLastFocusedRootTask(phiInstruction, p1);
	return;
}
-----
depth : 1
public void startLockTaskMode(Task p1, boolean p2){
	String v1 = String.valueOf(p1);
	Object v1 = new Object(1);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 295861935, 0, 0, v1);
	Task v3 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v4 = v3.getTopMostTask();
	int v5 = Binder.getCallingUid();
	long v6 = Binder.clearCallingIdentity();
	[I v6 = new [I(1);
	this.mRootWindowContainer.removeRootTasksInWindowingModes(v6);
	LockTaskController v8 = p0.getLockTaskController();
	v8.startLockTaskMode(p1, p2, v5);
	Binder.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 2
public Task getTopMostTask(){
	WindowContainer$$ExternalSyntheticLambda1 v0 = new WindowContainer$$ExternalSyntheticLambda1();
	Task v2 = p0.getTask(v0, 1);
	return v2;
}
-----
depth : 2
public void removeRootTasksInWindowingModes([I p1){
	int v1 = p0.getChildCount();
	return;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public void startLockTaskMode(Task p1, boolean p2, int p3){
	Task.mLockTaskUid = p3;
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 1401295262, 0, 0, 0);
	Object v2 = LocalServices.getService(StatusBarManagerInterna.class);
	v2.showScreenPinningRequest(Task.mTaskId);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void startSystemLockTaskMode(int p1){
	ActivityTaskManagerService.enforceTaskPermission("startSystemLockTaskMode");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	Task v5 = v4.getRootTask();
	v5.moveToFront("startSystemLockTaskMode");
	p0.startLockTaskMode(v4, 1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public Task getRootTask(){
	TaskFragment v1 = p0.getRootTaskFragment();
	Task v2 = v1.asTask();
	return v2;
}
-----
depth : 2
public TaskFragment getRootTaskFragment(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	return phiInstruction;
}
-----
depth : 2
public Task asTask(){
	return 0;
}
-----
depth : 1
public void moveToFront(String p1){
	p0.moveToFront(p1, 0);
	return;
}
-----
depth : 2
public void moveToFront(String p1, Task p2){
	boolean v1 = p0.isAttached();
	TaskDisplayArea v2 = p0.getDisplayArea();
	boolean v3 = p0.isActivityTypeHome();
	boolean v4 = p0.returnsToHomeRootTask();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(p1);
	StringBuilder v7 = v4.append(" returnToHome");
	String v8 = v4.toString();
	v2.moveHomeRootTaskToFront(v8);
	boolean v10 = p0.isRootTask();
	Task v11 = v2.getFocusedRootTask();
	WindowContainer v12 = phiInstruction.getParent();
	v12.positionChildAt(2147483647, phiInstruction, 1);
	v2.updateLastFocusedRootTask(phiInstruction, p1);
	return;
}
-----
depth : 1
public void startLockTaskMode(Task p1, boolean p2){
	String v1 = String.valueOf(p1);
	Object v1 = new Object(1);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 295861935, 0, 0, v1);
	Task v3 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v4 = v3.getTopMostTask();
	int v5 = Binder.getCallingUid();
	long v6 = Binder.clearCallingIdentity();
	[I v6 = new [I(1);
	this.mRootWindowContainer.removeRootTasksInWindowingModes(v6);
	LockTaskController v8 = p0.getLockTaskController();
	v8.startLockTaskMode(p1, p2, v5);
	Binder.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 2
public Task getTopMostTask(){
	WindowContainer$$ExternalSyntheticLambda1 v0 = new WindowContainer$$ExternalSyntheticLambda1();
	Task v2 = p0.getTask(v0, 1);
	return v2;
}
-----
depth : 2
public void removeRootTasksInWindowingModes([I p1){
	int v1 = p0.getChildCount();
	return;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public void startLockTaskMode(Task p1, boolean p2, int p3){
	Task.mLockTaskUid = p3;
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 1401295262, 0, 0, 0);
	Object v2 = LocalServices.getService(StatusBarManagerInterna.class);
	v2.showScreenPinningRequest(Task.mTaskId);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void startSystemLockTaskMode(int p1){
	ActivityTaskManagerService.enforceTaskPermission("startSystemLockTaskMode");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	Task v5 = v4.getRootTask();
	v5.moveToFront("startSystemLockTaskMode");
	p0.startLockTaskMode(v4, 1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public Task getRootTask(){
	TaskFragment v1 = p0.getRootTaskFragment();
	Task v2 = v1.asTask();
	return v2;
}
-----
depth : 2
public TaskFragment getRootTaskFragment(){
	WindowContainer v1 = p0.getParent();
	TaskFragment v2 = v1.asTaskFragment();
	TaskFragment v3 = v2.getRootTaskFragment();
	return phiInstruction;
}
-----
depth : 2
public Task asTask(){
	return 0;
}
-----
depth : 1
public void moveToFront(String p1){
	p0.moveToFront(p1, 0);
	return;
}
-----
depth : 2
public void moveToFront(String p1, Task p2){
	boolean v1 = p0.isAttached();
	TaskDisplayArea v2 = p0.getDisplayArea();
	boolean v3 = p0.isActivityTypeHome();
	boolean v4 = p0.returnsToHomeRootTask();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append(p1);
	StringBuilder v7 = v4.append(" returnToHome");
	String v8 = v4.toString();
	v2.moveHomeRootTaskToFront(v8);
	boolean v10 = p0.isRootTask();
	Task v11 = v2.getFocusedRootTask();
	WindowContainer v12 = phiInstruction.getParent();
	v12.positionChildAt(2147483647, phiInstruction, 1);
	v2.updateLastFocusedRootTask(phiInstruction, p1);
	return;
}
-----
depth : 1
public void startLockTaskMode(Task p1, boolean p2){
	String v1 = String.valueOf(p1);
	Object v1 = new Object(1);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 295861935, 0, 0, v1);
	Task v3 = this.mRootWindowContainer.getTopDisplayFocusedRootTask();
	Task v4 = v3.getTopMostTask();
	int v5 = Binder.getCallingUid();
	long v6 = Binder.clearCallingIdentity();
	[I v6 = new [I(1);
	this.mRootWindowContainer.removeRootTasksInWindowingModes(v6);
	LockTaskController v8 = p0.getLockTaskController();
	v8.startLockTaskMode(p1, p2, v5);
	Binder.restoreCallingIdentity(v6);
	return;
}
-----
depth : 2
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public Task getTopDisplayFocusedRootTask(){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getFocusedRootTask();
	return v3;
}
-----
depth : 2
public Task getTopMostTask(){
	WindowContainer$$ExternalSyntheticLambda1 v0 = new WindowContainer$$ExternalSyntheticLambda1();
	Task v2 = p0.getTask(v0, 1);
	return v2;
}
-----
depth : 2
public void removeRootTasksInWindowingModes([I p1){
	int v1 = p0.getChildCount();
	return;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public void startLockTaskMode(Task p1, boolean p2, int p3){
	Task.mLockTaskUid = p3;
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, 1401295262, 0, 0, 0);
	Object v2 = LocalServices.getService(StatusBarManagerInterna.class);
	v2.showScreenPinningRequest(Task.mTaskId);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
