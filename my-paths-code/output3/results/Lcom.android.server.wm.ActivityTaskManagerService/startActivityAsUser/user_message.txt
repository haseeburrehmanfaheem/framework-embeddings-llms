This is path 1 for the API with depth 2:
depth : 0
public int startActivityAsUser(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	int v1 = p0.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, 1);
	return v1;
}
-----
depth : 1
public int startActivityAsUser(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12, boolean p13){
	SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11);
	ActivityOptions v2 = v1.getOriginalOptions();
	boolean v3 = v2.getTransientLaunch();
	int v4 = Binder.getCallingUid();
	boolean v5 = p0.isCallerRecents(v4);
	long v6 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Trace.traceBegin(32, "startExistingRecents");
	ActivityOptions v9 = v1.getOriginalOptions();
	boolean v10 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v9);
	WindowManagerService.resetPriorityAfterLockedSection();
	Trace.traceEnd(32);
	Binder.restoreCallingIdentity(v6);
	return 2;
}
-----
depth : 2
public SafeActivityOptions fromBundle(Bundle p1){
	SafeActivityOptions v0 = new SafeActivityOptions(v1);
	ActivityOptions v1 = ActivityOptions.fromBundle(p1);
	return phiInstruction;
}
-----
depth : 2
public ActivityOptions getOriginalOptions(){
	return this.mOriginalOptions;
}
-----
depth : 2
public boolean getTransientLaunch(){
	return this.mTransientLaunch;
}
-----
depth : 2
public boolean isCallerRecents(int p1){
	boolean v1 = this.mRecentTasks.isCallerRecents(p1);
	return v1;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public ActivityOptions getOriginalOptions(){
	return this.mOriginalOptions;
}
-----
depth : 2
public boolean startExistingRecentsIfPossible(Intent p1, ActivityOptions p2){
	RecentTasks v1 = this.mService.getRecentTasks();
	ComponentName v2 = v1.getRecentsComponent();
	ComponentName v3 = p1.getComponent();
	boolean v4 = v2.equals(v3);
	TaskDisplayArea v5 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v6 = v5.getRootTask(0, phiInstruction);
	return 0;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public int startActivityAsUser(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12){
	int v1 = p0.startActivityAsUser(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, 1);
	return v1;
}
-----
depth : 1
public int startActivityAsUser(IApplicationThread p1, String p2, String p3, Intent p4, String p5, IBinder p6, String p7, int p8, int p9, ProfilerInfo p10, Bundle p11, int p12, boolean p13){
	SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11);
	ActivityOptions v2 = v1.getOriginalOptions();
	boolean v3 = v2.getTransientLaunch();
	int v4 = Binder.getCallingUid();
	boolean v5 = p0.isCallerRecents(v4);
	long v6 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Trace.traceBegin(32, "startExistingRecents");
	ActivityOptions v9 = v1.getOriginalOptions();
	boolean v10 = this.mActivityStartController.startExistingRecentsIfPossible(p4, v9);
	WindowManagerService.resetPriorityAfterLockedSection();
	Trace.traceEnd(32);
	Binder.restoreCallingIdentity(v6);
	return 2;
}
-----
depth : 2
public SafeActivityOptions fromBundle(Bundle p1){
	SafeActivityOptions v0 = new SafeActivityOptions(v1);
	ActivityOptions v1 = ActivityOptions.fromBundle(p1);
	return phiInstruction;
}
-----
depth : 2
public ActivityOptions getOriginalOptions(){
	return this.mOriginalOptions;
}
-----
depth : 2
public boolean getTransientLaunch(){
	return this.mTransientLaunch;
}
-----
depth : 2
public boolean isCallerRecents(int p1){
	boolean v1 = this.mRecentTasks.isCallerRecents(p1);
	return v1;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public ActivityOptions getOriginalOptions(){
	return this.mOriginalOptions;
}
-----
depth : 2
public boolean startExistingRecentsIfPossible(Intent p1, ActivityOptions p2){
	RecentTasks v1 = this.mService.getRecentTasks();
	ComponentName v2 = v1.getRecentsComponent();
	ComponentName v3 = p1.getComponent();
	boolean v4 = v2.equals(v3);
	TaskDisplayArea v5 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v6 = v5.getRootTask(0, phiInstruction);
	ActivityRecord v7 = v6.topRunningActivity();
	boolean v8 = v7.attachedToProcess();
	ComponentName v9 = p1.getComponent();
	boolean v10 = ActivityRecord.mActivityComponent.equals(v9);
	boolean v11 = WindowContainer.mDisplayContent.isKeyguardLocked();
	return 0;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
