This is path 1 for the API with depth 2:
depth : 0
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	p2.setCallingPidUid(v2, v3);
	WindowManagerService.boostPriorityForLockedSection();
	DisplayContent v6 = this.mRootWindowContainer.getDisplayContent(p1);
	long v7 = Binder.clearCallingIdentity();
	v6.registerRemoteAnimations(p2);
	Binder.restoreCallingIdentity(v7);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void setCallingPidUid(int p1, int p2){
	int v1 = this.mTransitionAnimationMap.size();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 1
public void registerRemoteAnimations(RemoteAnimationDefinition p1){
	this.mAppTransitionController.registerRemoteAnimations(p1);
	return;
}
-----
depth : 2
public void registerRemoteAnimations(RemoteAnimationDefinition p1){
	this.mRemoteAnimationDefinition = p1;
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	p2.setCallingPidUid(v2, v3);
	WindowManagerService.boostPriorityForLockedSection();
	DisplayContent v6 = this.mRootWindowContainer.getDisplayContent(p1);
	long v7 = Binder.clearCallingIdentity();
	v6.registerRemoteAnimations(p2);
	Binder.restoreCallingIdentity(v7);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void setCallingPidUid(int p1, int p2){
	int v1 = this.mTransitionAnimationMap.size();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 1
public void registerRemoteAnimations(RemoteAnimationDefinition p1){
	this.mAppTransitionController.registerRemoteAnimations(p1);
	return;
}
-----
depth : 2
public void registerRemoteAnimations(RemoteAnimationDefinition p1){
	this.mRemoteAnimationDefinition = p1;
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void registerRemoteAnimationsForDisplay(int p1, RemoteAnimationDefinition p2){
	int v2 = Binder.getCallingPid();
	int v3 = Binder.getCallingUid();
	p2.setCallingPidUid(v2, v3);
	WindowManagerService.boostPriorityForLockedSection();
	DisplayContent v6 = this.mRootWindowContainer.getDisplayContent(p1);
	long v7 = Binder.clearCallingIdentity();
	v6.registerRemoteAnimations(p2);
	Binder.restoreCallingIdentity(v7);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void setCallingPidUid(int p1, int p2){
	int v1 = this.mTransitionAnimationMap.size();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public DisplayContent getDisplayContent(int p1){
	int v1 = p0.getChildCount();
	return 0;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 1
public void registerRemoteAnimations(RemoteAnimationDefinition p1){
	this.mAppTransitionController.registerRemoteAnimations(p1);
	return;
}
-----
depth : 2
public void registerRemoteAnimations(RemoteAnimationDefinition p1){
	this.mRemoteAnimationDefinition = p1;
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
