This is path 1 for the API with depth 2:
depth : 0
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.getSnapshot(p1, Task.mUserId, 1, p2);
	TaskSnapshot v7 = p0.takeTaskSnapshot(p1);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
depth : 1
public TaskSnapshot getSnapshot(int p1, int p2, boolean p3, boolean p4){
	boolean v1 = this.mPersister.enableLowResSnapshots();
	TaskSnapshot v2 = this.mCache.getSnapshot(p1, p2, p3, phiInstruction);
	return v2;
}
-----
depth : 2
public boolean enableLowResSnapshots(){
	return this.mEnableLowResSnapshots;
}
-----
depth : 2
public TaskSnapshot getSnapshot(int p1, int p2, boolean p3, boolean p4){
	WindowManagerService.boostPriorityForLockedSection();
	Integer v2 = Integer.valueOf(p1);
	Object v3 = this.mRunningCache.get(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v5 = p0.tryRestoreFromDisk(p1, p2, p4);
	return v5;
}
-----
depth : 1
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	boolean v5 = v4.isVisible();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 2
public TaskSnapshot captureTaskSnapshot(Task p1, boolean p2){
	int v1 = p0.getSnapshotMode(p1);
	return phiInstruction;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.getSnapshot(p1, Task.mUserId, 1, p2);
	TaskSnapshot v7 = p0.takeTaskSnapshot(p1);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
depth : 1
public TaskSnapshot getSnapshot(int p1, int p2, boolean p3, boolean p4){
	boolean v1 = this.mPersister.enableLowResSnapshots();
	TaskSnapshot v2 = this.mCache.getSnapshot(p1, p2, p3, phiInstruction);
	return v2;
}
-----
depth : 2
public boolean enableLowResSnapshots(){
	return this.mEnableLowResSnapshots;
}
-----
depth : 2
public TaskSnapshot getSnapshot(int p1, int p2, boolean p3, boolean p4){
	WindowManagerService.boostPriorityForLockedSection();
	Integer v2 = Integer.valueOf(p1);
	Object v3 = this.mRunningCache.get(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v5 = p0.tryRestoreFromDisk(p1, p2, p4);
	return v5;
}
-----
depth : 1
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	boolean v5 = v4.isVisible();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 2
public TaskSnapshot captureTaskSnapshot(Task p1, boolean p2){
	int v1 = p0.getSnapshotMode(p1);
	return phiInstruction;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public TaskSnapshot getTaskSnapshot(int p1, boolean p2, boolean p3){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.getSnapshot(p1, Task.mUserId, 1, p2);
	TaskSnapshot v7 = p0.takeTaskSnapshot(p1);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
depth : 1
public TaskSnapshot getSnapshot(int p1, int p2, boolean p3, boolean p4){
	boolean v1 = this.mPersister.enableLowResSnapshots();
	TaskSnapshot v2 = this.mCache.getSnapshot(p1, p2, p3, phiInstruction);
	return v2;
}
-----
depth : 2
public boolean enableLowResSnapshots(){
	return this.mEnableLowResSnapshots;
}
-----
depth : 2
public TaskSnapshot getSnapshot(int p1, int p2, boolean p3, boolean p4){
	WindowManagerService.boostPriorityForLockedSection();
	Integer v2 = Integer.valueOf(p1);
	Object v3 = this.mRunningCache.get(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	TaskSnapshot v5 = p0.tryRestoreFromDisk(p1, p2, p4);
	return v5;
}
-----
depth : 1
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	boolean v5 = v4.isVisible();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 2
public TaskSnapshot captureTaskSnapshot(Task p1, boolean p2){
	int v1 = p0.getSnapshotMode(p1);
	return phiInstruction;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
