This is path 1 for the API with depth 2:
depth : 0
public void cancelRecentsAnimation(boolean p1){
	ActivityTaskManagerService.enforceTaskPermission("cancelRecentsAnimation()");
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cancelRecentsAnimation/uid=");
	StringBuilder v7 = v4.append(v2);
	String v8 = v4.toString();
	this.mWindowManager.cancelRecentsAnimation(phiInstruction, v8);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v3);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void cancelRecentsAnimation(int p1, String p2){
	this.mRecentsAnimationController.cancelAnimation(p1, p2);
	return;
}
-----
depth : 2
public void cancelAnimation(int p1, String p2){
	p0.cancelAnimation(p1, 0, p2);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void cancelRecentsAnimation(boolean p1){
	ActivityTaskManagerService.enforceTaskPermission("cancelRecentsAnimation()");
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cancelRecentsAnimation/uid=");
	StringBuilder v7 = v4.append(v2);
	String v8 = v4.toString();
	this.mWindowManager.cancelRecentsAnimation(phiInstruction, v8);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v3);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void cancelRecentsAnimation(int p1, String p2){
	this.mRecentsAnimationController.cancelAnimation(p1, p2);
	return;
}
-----
depth : 2
public void cancelAnimation(int p1, String p2){
	p0.cancelAnimation(p1, 0, p2);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void cancelRecentsAnimation(boolean p1){
	ActivityTaskManagerService.enforceTaskPermission("cancelRecentsAnimation()");
	int v2 = Binder.getCallingUid();
	long v3 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("cancelRecentsAnimation/uid=");
	StringBuilder v7 = v4.append(v2);
	String v8 = v4.toString();
	this.mWindowManager.cancelRecentsAnimation(phiInstruction, v8);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v3);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void cancelRecentsAnimation(int p1, String p2){
	this.mRecentsAnimationController.cancelAnimation(p1, p2);
	return;
}
-----
depth : 2
public void cancelAnimation(int p1, String p2){
	p0.cancelAnimation(p1, 0, p2);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
