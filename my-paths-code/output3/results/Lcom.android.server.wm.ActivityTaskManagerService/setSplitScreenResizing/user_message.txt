This is path 1 for the API with depth 2:
depth : 0
public void setSplitScreenResizing(boolean p1){
	ActivityTaskManagerService.enforceTaskPermission("setSplitScreenResizing()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	this.mTaskSupervisor.setSplitScreenResizing(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void setSplitScreenResizing(boolean p1){
	this.mDockedRootTaskResizing = p1;
	this.mWindowManager.setDockedRootTaskResizing(p1);
	return;
}
-----
depth : 2
public void setDockedRootTaskResizing(boolean p1){
	DisplayContent v1 = p0.getDefaultDisplayContentLocked();
	DockedTaskDividerController v2 = v1.getDockedDividerController();
	v2.setResizing(p1);
	p0.requestTraversal();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setSplitScreenResizing(boolean p1){
	ActivityTaskManagerService.enforceTaskPermission("setSplitScreenResizing()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	this.mTaskSupervisor.setSplitScreenResizing(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void setSplitScreenResizing(boolean p1){
	this.mDockedRootTaskResizing = p1;
	this.mWindowManager.setDockedRootTaskResizing(p1);
	return;
}
-----
depth : 2
public void setDockedRootTaskResizing(boolean p1){
	DisplayContent v1 = p0.getDefaultDisplayContentLocked();
	DockedTaskDividerController v2 = v1.getDockedDividerController();
	v2.setResizing(p1);
	p0.requestTraversal();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setSplitScreenResizing(boolean p1){
	ActivityTaskManagerService.enforceTaskPermission("setSplitScreenResizing()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	this.mTaskSupervisor.setSplitScreenResizing(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void setSplitScreenResizing(boolean p1){
	this.mDockedRootTaskResizing = p1;
	this.mWindowManager.setDockedRootTaskResizing(p1);
	return;
}
-----
depth : 2
public void setDockedRootTaskResizing(boolean p1){
	DisplayContent v1 = p0.getDefaultDisplayContentLocked();
	DockedTaskDividerController v2 = v1.getDockedDividerController();
	v2.setResizing(p1);
	p0.requestTraversal();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
