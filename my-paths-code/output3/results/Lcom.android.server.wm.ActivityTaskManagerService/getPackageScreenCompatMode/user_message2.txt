The method getPackageScreenCompatMode has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public int getPackageScreenCompatMode(String p1){
	ActivityTaskManagerService.enforceNotIsolatedCaller("getPackageScreenCompatMode");
	WindowManagerService.boostPriorityForLockedSection();
	int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v3;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public int getPackageScreenCompatModeLocked(String p1){
	IPackageManager v1 = AppGlobals.getPackageManager();
	ApplicationInfo v2 = v1.getApplicationInfo(p1, 0, 0);
	int v3 = p0.computeCompatModeLocked(phiInstruction);
	return v3;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public int computeCompatModeLocked(ApplicationInfo p1){
	CompatibilityInfo v1 = p0.compatibilityInfoForPackageLocked(p1);
	boolean v2 = v1.alwaysSupportsScreen();
	boolean v3 = v1.neverSupportsScreen();
	boolean v4 = p0.getPackageCompatModeEnabledLocked(p1);
	return v4;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public int getPackageScreenCompatMode(String p1){
	ActivityTaskManagerService.enforceNotIsolatedCaller("getPackageScreenCompatMode");
	WindowManagerService.boostPriorityForLockedSection();
	int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v3;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public int getPackageScreenCompatModeLocked(String p1){
	IPackageManager v1 = AppGlobals.getPackageManager();
	ApplicationInfo v2 = v1.getApplicationInfo(p1, 0, 0);
	int v3 = p0.computeCompatModeLocked(phiInstruction);
	return v3;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public int computeCompatModeLocked(ApplicationInfo p1){
	CompatibilityInfo v1 = p0.compatibilityInfoForPackageLocked(p1);
	boolean v2 = v1.alwaysSupportsScreen();
	boolean v3 = v1.neverSupportsScreen();
	boolean v4 = p0.getPackageCompatModeEnabledLocked(p1);
	return v4;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public int getPackageScreenCompatMode(String p1){
	ActivityTaskManagerService.enforceNotIsolatedCaller("getPackageScreenCompatMode");
	WindowManagerService.boostPriorityForLockedSection();
	int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1);
	WindowManagerService.resetPriorityAfterLockedSection();
	return v3;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public int getPackageScreenCompatModeLocked(String p1){
	IPackageManager v1 = AppGlobals.getPackageManager();
	ApplicationInfo v2 = v1.getApplicationInfo(p1, 0, 0);
	int v3 = p0.computeCompatModeLocked(phiInstruction);
	return v3;
}
-----
depth : 2
public IPackageManager getPackageManager(){
	IPackageManager v1 = ActivityThread.getPackageManager();
	return v1;
}
-----
depth : 2
public int computeCompatModeLocked(ApplicationInfo p1){
	CompatibilityInfo v1 = p0.compatibilityInfoForPackageLocked(p1);
	boolean v2 = v1.alwaysSupportsScreen();
	boolean v3 = v1.neverSupportsScreen();
	boolean v4 = p0.getPackageCompatModeEnabledLocked(p1);
	return v4;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1);\nreturn v3;']

The method getPackageScreenCompatMode has the following similar APIs:

- API Name: setPackageScreenCompatMode(Ljava/lang/String;I)V with Similarity Score: 0.9079293608665466
  - Access Control Level: SYS_OR_SIG and the following code:
this.mCompatModePackages.setPackageScreenCompatModeLocked(p1, p2);

- API Name: getPackageAskScreenCompat(Ljava/lang/String;)Z with Similarity Score: 0.8652791976928711
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = this.mCompatModePackages.getPackageAskCompatModeLocked(p1);
int v1 = p0.getPackageFlags(p1);
Object v1 = this.mPackages.get(p1);

