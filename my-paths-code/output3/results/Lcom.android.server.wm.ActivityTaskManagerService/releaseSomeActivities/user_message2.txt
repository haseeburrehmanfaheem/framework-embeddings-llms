The method releaseSomeActivities has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void releaseSomeActivities(IApplicationThread p1){
	WindowManagerService.boostPriorityForLockedSection();
	long v2 = Binder.clearCallingIdentity();
	WindowProcessController v3 = p0.getProcessController(p1);
	v3.releaseSomeActivities("low-mem");
	Binder.restoreCallingIdentity(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ArrayMap getMap(){
	return this.mMap;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void releaseSomeActivities(String p1){
	int v1 = this.mActivities.size();
	WindowProcessController$$ExternalSyntheticLambda2 v1 = new WindowProcessController$$ExternalSyntheticLambda2();
	phiInstruction.sort(v1);
	int v4 = phiInstruction.size();
	int v5 = Math.max(v4, 1);
	Object v6 = phiInstruction.remove(0);
	boolean v7 = v6.destroyImmediately(p1);
	return;
}
-----
depth : 2
public boolean destroyImmediately(String p1){
	boolean v1 = p0.isState(ActivityRecord$State.DESTROYING, ActivityRecord$State.DESTROYED);
	String v2 = String.valueOf(p0);
	String v3 = String.valueOf(p1);
	Object v3 = new Object(2);
	ProtoLogImpl.v(ProtoLogGroup.WM_DEBUG_STATES, -21399771, 0, 0, v3);
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void releaseSomeActivities(IApplicationThread p1){
	WindowManagerService.boostPriorityForLockedSection();
	long v2 = Binder.clearCallingIdentity();
	WindowProcessController v3 = p0.getProcessController(p1);
	v3.releaseSomeActivities("low-mem");
	Binder.restoreCallingIdentity(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ArrayMap getMap(){
	return this.mMap;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void releaseSomeActivities(String p1){
	int v1 = this.mActivities.size();
	WindowProcessController$$ExternalSyntheticLambda2 v1 = new WindowProcessController$$ExternalSyntheticLambda2();
	phiInstruction.sort(v1);
	int v4 = phiInstruction.size();
	int v5 = Math.max(v4, 1);
	Object v6 = phiInstruction.remove(0);
	boolean v7 = v6.destroyImmediately(p1);
	return;
}
-----
depth : 2
public boolean destroyImmediately(String p1){
	boolean v1 = p0.isState(ActivityRecord$State.DESTROYING, ActivityRecord$State.DESTROYED);
	String v2 = String.valueOf(p0);
	String v3 = String.valueOf(p1);
	Object v3 = new Object(2);
	ProtoLogImpl.v(ProtoLogGroup.WM_DEBUG_STATES, -21399771, 0, 0, v3);
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void releaseSomeActivities(IApplicationThread p1){
	WindowManagerService.boostPriorityForLockedSection();
	long v2 = Binder.clearCallingIdentity();
	WindowProcessController v3 = p0.getProcessController(p1);
	v3.releaseSomeActivities("low-mem");
	Binder.restoreCallingIdentity(v2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ArrayMap getMap(){
	return this.mMap;
}
-----
depth : 2
public boolean hasThread(){
	return phiInstruction;
}
-----
depth : 2
public IApplicationThread getThread(){
	return this.mThread;
}
-----
depth : 1
public void releaseSomeActivities(String p1){
	int v1 = this.mActivities.size();
	WindowProcessController$$ExternalSyntheticLambda2 v1 = new WindowProcessController$$ExternalSyntheticLambda2();
	phiInstruction.sort(v1);
	int v4 = phiInstruction.size();
	int v5 = Math.max(v4, 1);
	Object v6 = phiInstruction.remove(0);
	boolean v7 = v6.destroyImmediately(p1);
	return;
}
-----
depth : 2
public boolean destroyImmediately(String p1){
	boolean v1 = p0.isState(ActivityRecord$State.DESTROYING, ActivityRecord$State.DESTROYED);
	String v2 = String.valueOf(p0);
	String v3 = String.valueOf(p1);
	Object v3 = new Object(2);
	ProtoLogImpl.v(ProtoLogGroup.WM_DEBUG_STATES, -21399771, 0, 0, v3);
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['WindowProcessController v3 = p0.getProcessController(p1);\nv3.releaseSomeActivities("low-mem");', 'ArrayMap v2 = this.mProcessNames.getMap();']

The method releaseSomeActivities has the following similar APIs:

- API Name: moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V with Similarity Score: 0.8315834403038025
  - Access Control Level: SYS_OR_SIG and the following code:
WindowProcessController v5 = p0.getProcessController(p1);
ActivityStartController v6 = p0.getActivityStartController();
ActivityStarter v7 = v6.obtainStarter(0, "moveTaskToFront");

