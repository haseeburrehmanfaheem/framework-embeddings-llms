This is path 1 for the API with depth 2:
depth : 0
public void keyguardGoingAway(int p1){
	ActivityTaskManagerService.enforceNotIsolatedCaller("keyguardGoingAway");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	this.mActivityClientController.invalidateHomeTaskSnapshot(0);
	ActivityTaskManagerService$$ExternalSyntheticLambda1 v4 = new ActivityTaskManagerService$$ExternalSyntheticLambda1(p0,p1);
	this.mRootWindowContainer.forAllDisplays(v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void invalidateHomeTaskSnapshot(IBinder p1){
	ActivityTaskManagerService.enforceTaskPermission("invalidateHomeTaskSnapshot");
	WindowManagerService.boostPriorityForLockedSection();
	TaskDisplayArea v3 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v4 = v3.getRootHomeTask();
	ActivityRecord v5 = v4.topRunningActivity();
	boolean v6 = phiInstruction.isActivityTypeHome();
	Task v7 = phiInstruction.getTask();
	WindowManagerService.mTaskSnapshotController.removeSnapshotCache(Task.mTaskId);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 2
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public Task getRootHomeTask(){
	return this.mRootHomeTask;
}
-----
depth : 2
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public Task getTask(){
	return this.task;
}
-----
depth : 2
public void removeSnapshotCache(int p1){
	this.mCache.removeRunningEntry(p1);
	return;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void keyguardGoingAway(int p1){
	ActivityTaskManagerService.enforceNotIsolatedCaller("keyguardGoingAway");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	this.mActivityClientController.invalidateHomeTaskSnapshot(0);
	ActivityTaskManagerService$$ExternalSyntheticLambda1 v4 = new ActivityTaskManagerService$$ExternalSyntheticLambda1(p0,p1);
	this.mRootWindowContainer.forAllDisplays(v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void invalidateHomeTaskSnapshot(IBinder p1){
	ActivityTaskManagerService.enforceTaskPermission("invalidateHomeTaskSnapshot");
	WindowManagerService.boostPriorityForLockedSection();
	TaskDisplayArea v3 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v4 = v3.getRootHomeTask();
	ActivityRecord v5 = v4.topRunningActivity();
	boolean v6 = phiInstruction.isActivityTypeHome();
	Task v7 = phiInstruction.getTask();
	WindowManagerService.mTaskSnapshotController.removeSnapshotCache(Task.mTaskId);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 2
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public Task getRootHomeTask(){
	return this.mRootHomeTask;
}
-----
depth : 2
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public Task getTask(){
	return this.task;
}
-----
depth : 2
public void removeSnapshotCache(int p1){
	this.mCache.removeRunningEntry(p1);
	return;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void keyguardGoingAway(int p1){
	ActivityTaskManagerService.enforceNotIsolatedCaller("keyguardGoingAway");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	this.mActivityClientController.invalidateHomeTaskSnapshot(0);
	ActivityTaskManagerService$$ExternalSyntheticLambda1 v4 = new ActivityTaskManagerService$$ExternalSyntheticLambda1(p0,p1);
	this.mRootWindowContainer.forAllDisplays(v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceNotIsolatedCaller(String p1){
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void invalidateHomeTaskSnapshot(IBinder p1){
	ActivityTaskManagerService.enforceTaskPermission("invalidateHomeTaskSnapshot");
	WindowManagerService.boostPriorityForLockedSection();
	TaskDisplayArea v3 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea();
	Task v4 = v3.getRootHomeTask();
	ActivityRecord v5 = v4.topRunningActivity();
	boolean v6 = phiInstruction.isActivityTypeHome();
	Task v7 = phiInstruction.getTask();
	WindowManagerService.mTaskSnapshotController.removeSnapshotCache(Task.mTaskId);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 2
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public TaskDisplayArea getDefaultTaskDisplayArea(){
	TaskDisplayArea v1 = this.mDefaultDisplay.getDefaultTaskDisplayArea();
	return v1;
}
-----
depth : 2
public Task getRootHomeTask(){
	return this.mRootHomeTask;
}
-----
depth : 2
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public Task getTask(){
	return this.task;
}
-----
depth : 2
public void removeSnapshotCache(int p1){
	this.mCache.removeRunningEntry(p1);
	return;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
