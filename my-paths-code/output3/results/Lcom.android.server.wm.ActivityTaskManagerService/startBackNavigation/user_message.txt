This is path 1 for the API with depth 2:
depth : 0
public BackNavigationInfo startBackNavigation(boolean p1, IWindowFocusObserver p2, BackAnimationAdaptor p3){
	BackNavigationInfo v2 = this.mBackNavigationController.startBackNavigation(p1, p2, p3);
	return v2;
}
-----
depth : 1
public BackNavigationInfo startBackNavigation(boolean p1, IWindowFocusObserver p2, BackAnimationAdaptor p3){
	Object v1 = WindowManagerService.mTransactionFactory.get();
	this.mFocusObserver = p2;
	BackNavigationInfo$Builder v1 = new BackNavigationInfo$Builder();
	WindowManagerService.boostPriorityForLockedSection();
	Object v4 = LocalServices.getService(WindowManagerInterna.class);
	IBinder v5 = v4.getFocusedWindowToken();
	WindowState v6 = this.mWindowManagerService.getFocusedWindowLocked();
	EmbeddedWindowController$EmbeddedWindow v7 = WindowManagerService.mEmbeddedWindowController.getByFocusToken(v5);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_BACK_PREVIEW, -997565097, 0, "Focused window found using getFocusedWindowToken", 0);
	RecentsAnimationController v9 = this.mWindowManagerService.getRecentsAnimationController();
	boolean v10 = WindowState.mActivityRecord.isActivityTypeHomeOrRecents();
	boolean v11 = WindowContainer.mTransitionController.isTransientLaunch(WindowState.mActivityRecord);
	boolean v12 = v9.shouldApplyInputConsumer(WindowState.mActivityRecord);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_BACK_PREVIEW, -451552570, 0, "Current focused window being animated by recents. Overriding back callback to recents controller callback.", 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	return 0;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public WindowState getFocusedWindowLocked(){
	DisplayContent v1 = this.mRoot.getTopFocusedDisplayContent();
	return DisplayContent.mCurrentFocus;
}
-----
depth : 2
public EmbeddedWindowController$EmbeddedWindow getByFocusToken(IBinder p1){
	Object v1 = this.mWindowsByFocusToken.get(p1);
	return v1;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public RecentsAnimationController getRecentsAnimationController(){
	return this.mRecentsAnimationController;
}
-----
depth : 2
public boolean isTransientLaunch(ActivityRecord p1){
	boolean v1 = this.mCollectingTransition.isTransientLaunch(p1);
	int v2 = this.mPlayingTransitions.size();
	Object v3 = this.mPlayingTransitions.get(phiInstruction);
	boolean v4 = v3.isTransientLaunch(p1);
	return 1;
}
-----
depth : 2
public boolean shouldApplyInputConsumer(ActivityRecord p1){
	boolean v1 = p0.isTargetApp(p1);
	boolean v2 = p0.isAnimatingApp(p1);
	return phiInstruction;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public BackNavigationInfo startBackNavigation(boolean p1, IWindowFocusObserver p2, BackAnimationAdaptor p3){
	BackNavigationInfo v2 = this.mBackNavigationController.startBackNavigation(p1, p2, p3);
	return v2;
}
-----
depth : 1
public BackNavigationInfo startBackNavigation(boolean p1, IWindowFocusObserver p2, BackAnimationAdaptor p3){
	Object v1 = WindowManagerService.mTransactionFactory.get();
	this.mFocusObserver = p2;
	BackNavigationInfo$Builder v1 = new BackNavigationInfo$Builder();
	WindowManagerService.boostPriorityForLockedSection();
	Object v4 = LocalServices.getService(WindowManagerInterna.class);
	IBinder v5 = v4.getFocusedWindowToken();
	WindowState v6 = this.mWindowManagerService.getFocusedWindowLocked();
	EmbeddedWindowController$EmbeddedWindow v7 = WindowManagerService.mEmbeddedWindowController.getByFocusToken(v5);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_BACK_PREVIEW, -997565097, 0, "Focused window found using getFocusedWindowToken", 0);
	RecentsAnimationController v9 = this.mWindowManagerService.getRecentsAnimationController();
	boolean v10 = WindowState.mActivityRecord.isActivityTypeHomeOrRecents();
	boolean v11 = WindowContainer.mTransitionController.isTransientLaunch(WindowState.mActivityRecord);
	boolean v12 = v9.shouldApplyInputConsumer(WindowState.mActivityRecord);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_BACK_PREVIEW, -451552570, 0, "Current focused window being animated by recents. Overriding back callback to recents controller callback.", 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	return 0;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public WindowState getFocusedWindowLocked(){
	DisplayContent v1 = this.mRoot.getTopFocusedDisplayContent();
	return DisplayContent.mCurrentFocus;
}
-----
depth : 2
public EmbeddedWindowController$EmbeddedWindow getByFocusToken(IBinder p1){
	Object v1 = this.mWindowsByFocusToken.get(p1);
	return v1;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public RecentsAnimationController getRecentsAnimationController(){
	return this.mRecentsAnimationController;
}
-----
depth : 2
public boolean isTransientLaunch(ActivityRecord p1){
	boolean v1 = this.mCollectingTransition.isTransientLaunch(p1);
	int v2 = this.mPlayingTransitions.size();
	Object v3 = this.mPlayingTransitions.get(phiInstruction);
	boolean v4 = v3.isTransientLaunch(p1);
	return 1;
}
-----
depth : 2
public boolean shouldApplyInputConsumer(ActivityRecord p1){
	boolean v1 = p0.isTargetApp(p1);
	boolean v2 = p0.isAnimatingApp(p1);
	return phiInstruction;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
