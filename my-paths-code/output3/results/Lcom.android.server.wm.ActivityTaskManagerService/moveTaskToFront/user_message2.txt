The method moveTaskToFront has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	Object v1 = new Object(1);
	Long v2 = Long.valueOf(p3);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, 2117696413, 1, 0, v1);
	WindowManagerService.boostPriorityForLockedSection();
	SafeActivityOptions v5 = SafeActivityOptions.fromBundle(p5);
	p0.moveTaskToFrontLocked(p1, p2, p3, p4, v5);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public SafeActivityOptions fromBundle(Bundle p1){
	SafeActivityOptions v0 = new SafeActivityOptions(v1);
	ActivityOptions v1 = ActivityOptions.fromBundle(p1);
	return phiInstruction;
}
-----
depth : 2
public ActivityOptions fromBundle(Bundle p1){
	ActivityOptions v0 = new ActivityOptions(p1);
	return phiInstruction;
}
-----
depth : 1
public void moveTaskToFrontLocked(IApplicationThread p1, String p2, int p3, int p4, SafeActivityOptions p5){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	p0.assertPackageMatchesCallingUid(p2);
	long v4 = Binder.clearCallingIdentity();
	WindowProcessController v5 = p0.getProcessController(p1);
	ActivityStartController v6 = p0.getActivityStartController();
	ActivityStarter v7 = v6.obtainStarter(0, "moveTaskToFront");
	boolean v8 = v7.shouldAbortBackgroundActivityStart(v2, v1, p2, -1, -1, phiInstruction, 0, 0, 0, 0);
	boolean v9 = p0.isBackgroundActivityStartsEnabled();
	Task v10 = this.mRootWindowContainer.anyTaskForId(p3);
	LockTaskController v11 = p0.getLockTaskController();
	boolean v12 = v11.isLockTaskModeViolation(v10);
	ActivityOptions v13 = p5.getOptions(this.mTaskSupervisor);
	this.mTaskSupervisor.findTaskToMoveToFront(v10, p4, phiInstruction, "moveTaskToFront", 0);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public void assertPackageMatchesCallingUid(String p1){
	return;
}
-----
depth : 2
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ActivityStartController getActivityStartController(){
	return this.mActivityStartController;
}
-----
depth : 2
public ActivityStarter obtainStarter(Intent p1, String p2){
	ActivityStarter v1 = this.mFactory.obtain();
	ActivityStarter v2 = v1.setIntent(p1);
	ActivityStarter v3 = v2.setReason(p2);
	return v3;
}
-----
depth : 2
public boolean shouldAbortBackgroundActivityStart(int p1, int p2, String p3, int p4, int p5, WindowProcessController p6, PendingIntentRecord p7, boolean p8, Intent p9, ActivityOptions p10){
	boolean v8 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(p1);
	return 0;
}
-----
depth : 2
public boolean isBackgroundActivityStartsEnabled(){
	boolean v1 = this.mAmInternal.isBackgroundActivityStartsEnabled();
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1){
	Task v1 = p0.anyTaskForId(p1, 2);
	return v1;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public boolean isLockTaskModeViolation(Task p1){
	boolean v1 = p0.isLockTaskModeViolation(p1, 0);
	return v1;
}
-----
depth : 2
public ActivityOptions getOptions(ActivityTaskSupervisor p1){
	ActivityOptions v1 = p0.getOptions(0, 0, 0, p1);
	return v1;
}
-----
depth : 2
public void findTaskToMoveToFront(Task p1, int p2, ActivityOptions p3, String p4, boolean p5){
	Task v1 = p1.getRootTask();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("findTaskToMoveToFront: can't move task=");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append(" to front. Root task is null");
	String v6 = v1.toString();
	int v7 = Slog.e("ActivityTaskManager", v6);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	Object v1 = new Object(1);
	Long v2 = Long.valueOf(p3);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, 2117696413, 1, 0, v1);
	WindowManagerService.boostPriorityForLockedSection();
	SafeActivityOptions v5 = SafeActivityOptions.fromBundle(p5);
	p0.moveTaskToFrontLocked(p1, p2, p3, p4, v5);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public SafeActivityOptions fromBundle(Bundle p1){
	SafeActivityOptions v0 = new SafeActivityOptions(v1);
	ActivityOptions v1 = ActivityOptions.fromBundle(p1);
	return phiInstruction;
}
-----
depth : 2
public ActivityOptions fromBundle(Bundle p1){
	ActivityOptions v0 = new ActivityOptions(p1);
	return phiInstruction;
}
-----
depth : 1
public void moveTaskToFrontLocked(IApplicationThread p1, String p2, int p3, int p4, SafeActivityOptions p5){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	p0.assertPackageMatchesCallingUid(p2);
	long v4 = Binder.clearCallingIdentity();
	WindowProcessController v5 = p0.getProcessController(p1);
	ActivityStartController v6 = p0.getActivityStartController();
	ActivityStarter v7 = v6.obtainStarter(0, "moveTaskToFront");
	boolean v8 = v7.shouldAbortBackgroundActivityStart(v2, v1, p2, -1, -1, phiInstruction, 0, 0, 0, 0);
	boolean v9 = p0.isBackgroundActivityStartsEnabled();
	Task v10 = this.mRootWindowContainer.anyTaskForId(p3);
	LockTaskController v11 = p0.getLockTaskController();
	boolean v12 = v11.isLockTaskModeViolation(v10);
	ActivityOptions v13 = p5.getOptions(this.mTaskSupervisor);
	this.mTaskSupervisor.findTaskToMoveToFront(v10, p4, phiInstruction, "moveTaskToFront", 0);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public void assertPackageMatchesCallingUid(String p1){
	return;
}
-----
depth : 2
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ActivityStartController getActivityStartController(){
	return this.mActivityStartController;
}
-----
depth : 2
public ActivityStarter obtainStarter(Intent p1, String p2){
	ActivityStarter v1 = this.mFactory.obtain();
	ActivityStarter v2 = v1.setIntent(p1);
	ActivityStarter v3 = v2.setReason(p2);
	return v3;
}
-----
depth : 2
public boolean shouldAbortBackgroundActivityStart(int p1, int p2, String p3, int p4, int p5, WindowProcessController p6, PendingIntentRecord p7, boolean p8, Intent p9, ActivityOptions p10){
	boolean v8 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(p1);
	return 0;
}
-----
depth : 2
public boolean isBackgroundActivityStartsEnabled(){
	boolean v1 = this.mAmInternal.isBackgroundActivityStartsEnabled();
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1){
	Task v1 = p0.anyTaskForId(p1, 2);
	return v1;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public boolean isLockTaskModeViolation(Task p1){
	boolean v1 = p0.isLockTaskModeViolation(p1, 0);
	return v1;
}
-----
depth : 2
public ActivityOptions getOptions(ActivityTaskSupervisor p1){
	ActivityOptions v1 = p0.getOptions(0, 0, 0, p1);
	return v1;
}
-----
depth : 2
public void findTaskToMoveToFront(Task p1, int p2, ActivityOptions p3, String p4, boolean p5){
	Task v1 = p1.getRootTask();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("findTaskToMoveToFront: can't move task=");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append(" to front. Root task is null");
	String v6 = v1.toString();
	int v7 = Slog.e("ActivityTaskManager", v6);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void moveTaskToFront(IApplicationThread p1, String p2, int p3, int p4, Bundle p5){
	Object v1 = new Object(1);
	Long v2 = Long.valueOf(p3);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_TASKS, 2117696413, 1, 0, v1);
	WindowManagerService.boostPriorityForLockedSection();
	SafeActivityOptions v5 = SafeActivityOptions.fromBundle(p5);
	p0.moveTaskToFrontLocked(p1, p2, p3, p4, v5);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public SafeActivityOptions fromBundle(Bundle p1){
	SafeActivityOptions v0 = new SafeActivityOptions(v1);
	ActivityOptions v1 = ActivityOptions.fromBundle(p1);
	return phiInstruction;
}
-----
depth : 2
public ActivityOptions fromBundle(Bundle p1){
	ActivityOptions v0 = new ActivityOptions(p1);
	return phiInstruction;
}
-----
depth : 1
public void moveTaskToFrontLocked(IApplicationThread p1, String p2, int p3, int p4, SafeActivityOptions p5){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	p0.assertPackageMatchesCallingUid(p2);
	long v4 = Binder.clearCallingIdentity();
	WindowProcessController v5 = p0.getProcessController(p1);
	ActivityStartController v6 = p0.getActivityStartController();
	ActivityStarter v7 = v6.obtainStarter(0, "moveTaskToFront");
	boolean v8 = v7.shouldAbortBackgroundActivityStart(v2, v1, p2, -1, -1, phiInstruction, 0, 0, 0, 0);
	boolean v9 = p0.isBackgroundActivityStartsEnabled();
	Task v10 = this.mRootWindowContainer.anyTaskForId(p3);
	LockTaskController v11 = p0.getLockTaskController();
	boolean v12 = v11.isLockTaskModeViolation(v10);
	ActivityOptions v13 = p5.getOptions(this.mTaskSupervisor);
	this.mTaskSupervisor.findTaskToMoveToFront(v10, p4, phiInstruction, "moveTaskToFront", 0);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 2
public void assertPackageMatchesCallingUid(String p1){
	return;
}
-----
depth : 2
public WindowProcessController getProcessController(IApplicationThread p1){
	IBinder v1 = p1.asBinder();
	ArrayMap v2 = this.mProcessNames.getMap();
	int v3 = v2.size();
	Object v4 = v2.valueAt(phiInstruction);
	int v5 = v4.size();
	Object v6 = v4.valueAt(phiInstruction);
	boolean v7 = v6.hasThread();
	IApplicationThread v8 = v6.getThread();
	IBinder v9 = v8.asBinder();
	return v6;
}
-----
depth : 2
public ActivityStartController getActivityStartController(){
	return this.mActivityStartController;
}
-----
depth : 2
public ActivityStarter obtainStarter(Intent p1, String p2){
	ActivityStarter v1 = this.mFactory.obtain();
	ActivityStarter v2 = v1.setIntent(p1);
	ActivityStarter v3 = v2.setReason(p2);
	return v3;
}
-----
depth : 2
public boolean shouldAbortBackgroundActivityStart(int p1, int p2, String p3, int p4, int p5, WindowProcessController p6, PendingIntentRecord p7, boolean p8, Intent p9, ActivityOptions p10){
	boolean v8 = ActivityTaskManagerService.mActiveUids.hasNonAppVisibleWindow(p1);
	return 0;
}
-----
depth : 2
public boolean isBackgroundActivityStartsEnabled(){
	boolean v1 = this.mAmInternal.isBackgroundActivityStartsEnabled();
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1){
	Task v1 = p0.anyTaskForId(p1, 2);
	return v1;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public boolean isLockTaskModeViolation(Task p1){
	boolean v1 = p0.isLockTaskModeViolation(p1, 0);
	return v1;
}
-----
depth : 2
public ActivityOptions getOptions(ActivityTaskSupervisor p1){
	ActivityOptions v1 = p0.getOptions(0, 0, 0, p1);
	return v1;
}
-----
depth : 2
public void findTaskToMoveToFront(Task p1, int p2, ActivityOptions p3, String p4, boolean p5){
	Task v1 = p1.getRootTask();
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("findTaskToMoveToFront: can't move task=");
	StringBuilder v4 = v1.append(p1);
	StringBuilder v5 = v1.append(" to front. Root task is null");
	String v6 = v1.toString();
	int v7 = Slog.e("ActivityTaskManager", v6);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['WindowProcessController v5 = p0.getProcessController(p1);\nActivityStartController v6 = p0.getActivityStartController();\nActivityStarter v7 = v6.obtainStarter(0, "moveTaskToFront");', 'SafeActivityOptions v5 = SafeActivityOptions.fromBundle(p5);\nActivityOptions v13 = p5.getOptions(this.mTaskSupervisor);']

The method moveTaskToFront has the following similar APIs:

- API Name: startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I with Similarity Score: 0.8873229026794434
  - Access Control Level: SYS_OR_SIG and the following code:
SafeActivityOptions v7 = SafeActivityOptions.fromBundle(p7);

- API Name: startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I with Similarity Score: 0.874103844165802
  - Access Control Level: SYS_OR_SIG and the following code:
SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11);
ActivityOptions v2 = v1.getOriginalOptions();
boolean v3 = v2.getTransientLaunch();

