This is path 1 for the API with depth 2:
depth : 0
public void stopSystemLockTaskMode(){
	ActivityTaskManagerService.enforceTaskPermission("stopSystemLockTaskMode");
	p0.stopLockTaskModeInternal(0, 1);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void stopLockTaskModeInternal(IBinder p1, boolean p2){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	ActivityRecord v4 = ActivityRecord.forTokenLocked(p1);
	Task v5 = v4.getTask();
	LockTaskController v6 = p0.getLockTaskController();
	v6.stopLockTaskMode(phiInstruction, p2, v1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Object v9 = this.mContext.getSystemService("telecom");
	v9.showInCallScreen(0);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public Task getTask(){
	return this.task;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public void stopLockTaskMode(Task p1, boolean p2, int p3){
	p0.clearLockedTask(p1);
	return;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void showInCallScreen(boolean p1){
	ITelecomService v1 = p0.getTelecomService();
	String v2 = this.mContext.getOpPackageName();
	String v3 = this.mContext.getAttributionTag();
	v1.showInCallScreen(p1, v2, v3);
	int v5 = Log.e("TelecomManager", "Error calling ITelecomService#showCallScreen", caughtException);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void stopSystemLockTaskMode(){
	ActivityTaskManagerService.enforceTaskPermission("stopSystemLockTaskMode");
	p0.stopLockTaskModeInternal(0, 1);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void stopLockTaskModeInternal(IBinder p1, boolean p2){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	ActivityRecord v4 = ActivityRecord.forTokenLocked(p1);
	Task v5 = v4.getTask();
	LockTaskController v6 = p0.getLockTaskController();
	v6.stopLockTaskMode(phiInstruction, p2, v1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Object v9 = this.mContext.getSystemService("telecom");
	v9.showInCallScreen(0);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public Task getTask(){
	return this.task;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public void stopLockTaskMode(Task p1, boolean p2, int p3){
	p0.clearLockedTask(p1);
	return;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void showInCallScreen(boolean p1){
	ITelecomService v1 = p0.getTelecomService();
	String v2 = this.mContext.getOpPackageName();
	String v3 = this.mContext.getAttributionTag();
	int v4 = Log.e("TelecomManager", "Error calling ITelecomService#showCallScreen", caughtException);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void stopSystemLockTaskMode(){
	ActivityTaskManagerService.enforceTaskPermission("stopSystemLockTaskMode");
	p0.stopLockTaskModeInternal(0, 1);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	return;
}
-----
depth : 1
public void stopLockTaskModeInternal(IBinder p1, boolean p2){
	int v1 = Binder.getCallingUid();
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	ActivityRecord v4 = ActivityRecord.forTokenLocked(p1);
	Task v5 = v4.getTask();
	LockTaskController v6 = p0.getLockTaskController();
	v6.stopLockTaskMode(phiInstruction, p2, v1);
	WindowManagerService.resetPriorityAfterLockedSection();
	Object v9 = this.mContext.getSystemService("telecom");
	v9.showInCallScreen(0);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 2
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public ActivityRecord forTokenLocked(IBinder p1){
	Object v1 = ActivityRecord$Token.mActivityRef.get();
	Task v2 = v1.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public Task getTask(){
	return this.task;
}
-----
depth : 2
public LockTaskController getLockTaskController(){
	return this.mLockTaskController;
}
-----
depth : 2
public void stopLockTaskMode(Task p1, boolean p2, int p3){
	p0.clearLockedTask(p1);
	return;
}
-----
depth : 2
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void showInCallScreen(boolean p1){
	ITelecomService v1 = p0.getTelecomService();
	String v2 = this.mContext.getOpPackageName();
	String v3 = this.mContext.getAttributionTag();
	v1.showInCallScreen(p1, v2, v3);
	int v5 = Log.e("TelecomManager", "Error calling ITelecomService#showCallScreen", caughtException);
	return;
}
-----
