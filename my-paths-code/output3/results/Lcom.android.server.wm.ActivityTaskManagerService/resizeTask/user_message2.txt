The method resizeTask has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean resizeTask(int p1, Rect p2, int p3){
	ActivityTaskManagerService.enforceTaskPermission("resizeTask()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	WindowConfiguration v5 = v4.getWindowConfiguration();
	boolean v6 = v5.canResizeTask();
	boolean v7 = v4.resize(p2, p3, phiInstruction);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return v7;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public boolean resize(Rect p1, int p2, boolean p3){
	TaskFragment.mAtmService.deferWindowLayout();
	WindowContainer v2 = p0.getParent();
	boolean v3 = p0.canResizeToBounds(p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("resizeTask_");
	StringBuilder v6 = v3.append(this.mTaskId);
	String v7 = v3.toString();
	Trace.traceBegin(32, v7);
	Configuration v9 = p0.getResolvedOverrideConfiguration();
	this.mTmpConfig.setTo(v9);
	int v11 = p0.setBounds(p1);
	Configuration v12 = p0.getResolvedOverrideConfiguration();
	boolean v13 = this.mTmpConfig.equals(v12);
	ActivityRecord v14 = p0.topRunningActivityLocked();
	boolean v15 = v14.ensureActivityConfiguration(0, p3);
	TaskFragment.mRootWindowContainer.ensureActivitiesVisible(v14, 0, p3);
	boolean v17 = TaskFragment.mRootWindowContainer.resumeFocusedTasksTopActivities();
	p0.resize(phiInstruction, phiInstruction);
	p0.saveLaunchingStateIfNeeded();
	Trace.traceEnd(32);
	TaskFragment.mAtmService.continueWindowLayout();
	return phiInstruction;
}
-----
depth : 2
public void deferWindowLayout(){
	boolean v1 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
	this.mLayoutReasons = 0;
	WindowManagerService.mWindowPlacerLocked.deferLayout();
	return;
}
-----
depth : 2
public WindowContainer getParent(){
	return this.mParent;
}
-----
depth : 2
public boolean canResizeToBounds(Rect p1){
	boolean v1 = p0.inFreeformWindowingMode();
	int v2 = p1.width();
	int v3 = p1.height();
	Rect v4 = p0.getRequestedOverrideBounds();
	boolean v5 = v4.isEmpty();
	int v6 = v4.width();
	int v7 = v4.height();
	return phiInstruction;
}
-----
depth : 2
public Configuration getResolvedOverrideConfiguration(){
	return this.mResolvedOverrideConfiguration;
}
-----
depth : 2
public int setBounds(Rect p1){
	boolean v1 = p0.isRootTask();
	Task v2 = p0.getRootTask();
	Task v3 = p0.getRootTask();
	DisplayContent v4 = v3.getDisplayContent();
	DisplayInfo v5 = phiInstruction.getDisplayInfo();
	int v6 = p0.setBounds(p1);
	this.mRotation = phiInstruction;
	p0.updateSurfacePositionNonOrganized();
	return v6;
}
-----
depth : 2
public Configuration getResolvedOverrideConfiguration(){
	return this.mResolvedOverrideConfiguration;
}
-----
depth : 2
public ActivityRecord topRunningActivityLocked(){
	WindowContainer v1 = p0.getParent();
	Task$$ExternalSyntheticLambda6 v1 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v3 = p0.getActivity(v1);
	return v3;
}
-----
depth : 2
public boolean ensureActivityConfiguration(int p1, boolean p2){
	boolean v1 = p0.ensureActivityConfiguration(p1, p2, 0);
	return v1;
}
-----
depth : 2
public void ensureActivitiesVisible(ActivityRecord p1, int p2, boolean p3){
	p0.ensureActivitiesVisible(p1, p2, p3, 1);
	return;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public void resize(boolean p1, boolean p2){
	Rect v1 = p0.getRequestedOverrideBounds();
	int v2 = p0.setBounds(v1, p2);
	DisplayContent v3 = p0.getDisplayContent();
	v3.layoutAndAssignWindowLayersIfNeeded();
	return;
}
-----
depth : 2
public void saveLaunchingStateIfNeeded(){
	DisplayContent v1 = p0.getDisplayContent();
	p0.saveLaunchingStateIfNeeded(v1);
	return;
}
-----
depth : 2
public void continueWindowLayout(){
	WindowManagerService.mWindowPlacerLocked.continueLayout(phiInstruction);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean resizeTask(int p1, Rect p2, int p3){
	ActivityTaskManagerService.enforceTaskPermission("resizeTask()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	WindowConfiguration v5 = v4.getWindowConfiguration();
	boolean v6 = v5.canResizeTask();
	boolean v7 = v4.resize(p2, p3, phiInstruction);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return v7;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public boolean resize(Rect p1, int p2, boolean p3){
	TaskFragment.mAtmService.deferWindowLayout();
	WindowContainer v2 = p0.getParent();
	boolean v3 = p0.canResizeToBounds(p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("resizeTask_");
	StringBuilder v6 = v3.append(this.mTaskId);
	String v7 = v3.toString();
	Trace.traceBegin(32, v7);
	Configuration v9 = p0.getResolvedOverrideConfiguration();
	this.mTmpConfig.setTo(v9);
	int v11 = p0.setBounds(p1);
	Configuration v12 = p0.getResolvedOverrideConfiguration();
	boolean v13 = this.mTmpConfig.equals(v12);
	ActivityRecord v14 = p0.topRunningActivityLocked();
	boolean v15 = v14.ensureActivityConfiguration(0, p3);
	TaskFragment.mRootWindowContainer.ensureActivitiesVisible(v14, 0, p3);
	boolean v17 = TaskFragment.mRootWindowContainer.resumeFocusedTasksTopActivities();
	p0.resize(phiInstruction, phiInstruction);
	p0.saveLaunchingStateIfNeeded();
	Trace.traceEnd(32);
	TaskFragment.mAtmService.continueWindowLayout();
	return phiInstruction;
}
-----
depth : 2
public void deferWindowLayout(){
	boolean v1 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
	this.mLayoutReasons = 0;
	WindowManagerService.mWindowPlacerLocked.deferLayout();
	return;
}
-----
depth : 2
public WindowContainer getParent(){
	return this.mParent;
}
-----
depth : 2
public boolean canResizeToBounds(Rect p1){
	boolean v1 = p0.inFreeformWindowingMode();
	int v2 = p1.width();
	int v3 = p1.height();
	Rect v4 = p0.getRequestedOverrideBounds();
	boolean v5 = v4.isEmpty();
	int v6 = v4.width();
	int v7 = v4.height();
	return phiInstruction;
}
-----
depth : 2
public Configuration getResolvedOverrideConfiguration(){
	return this.mResolvedOverrideConfiguration;
}
-----
depth : 2
public int setBounds(Rect p1){
	boolean v1 = p0.isRootTask();
	Task v2 = p0.getRootTask();
	Task v3 = p0.getRootTask();
	DisplayContent v4 = v3.getDisplayContent();
	DisplayInfo v5 = phiInstruction.getDisplayInfo();
	int v6 = p0.setBounds(p1);
	this.mRotation = phiInstruction;
	p0.updateSurfacePositionNonOrganized();
	return v6;
}
-----
depth : 2
public Configuration getResolvedOverrideConfiguration(){
	return this.mResolvedOverrideConfiguration;
}
-----
depth : 2
public ActivityRecord topRunningActivityLocked(){
	WindowContainer v1 = p0.getParent();
	Task$$ExternalSyntheticLambda6 v1 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v3 = p0.getActivity(v1);
	return v3;
}
-----
depth : 2
public boolean ensureActivityConfiguration(int p1, boolean p2){
	boolean v1 = p0.ensureActivityConfiguration(p1, p2, 0);
	return v1;
}
-----
depth : 2
public void ensureActivitiesVisible(ActivityRecord p1, int p2, boolean p3){
	p0.ensureActivitiesVisible(p1, p2, p3, 1);
	return;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public void resize(boolean p1, boolean p2){
	Rect v1 = p0.getRequestedOverrideBounds();
	int v2 = p0.setBounds(v1, p2);
	DisplayContent v3 = p0.getDisplayContent();
	v3.layoutAndAssignWindowLayersIfNeeded();
	return;
}
-----
depth : 2
public void saveLaunchingStateIfNeeded(){
	DisplayContent v1 = p0.getDisplayContent();
	p0.saveLaunchingStateIfNeeded(v1);
	return;
}
-----
depth : 2
public void continueWindowLayout(){
	WindowManagerService.mWindowPlacerLocked.continueLayout(phiInstruction);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean resizeTask(int p1, Rect p2, int p3){
	ActivityTaskManagerService.enforceTaskPermission("resizeTask()");
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
	WindowConfiguration v5 = v4.getWindowConfiguration();
	boolean v6 = v5.canResizeTask();
	boolean v7 = v4.resize(p2, p3, phiInstruction);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return v7;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public boolean resize(Rect p1, int p2, boolean p3){
	TaskFragment.mAtmService.deferWindowLayout();
	WindowContainer v2 = p0.getParent();
	boolean v3 = p0.canResizeToBounds(p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("resizeTask_");
	StringBuilder v6 = v3.append(this.mTaskId);
	String v7 = v3.toString();
	Trace.traceBegin(32, v7);
	Configuration v9 = p0.getResolvedOverrideConfiguration();
	this.mTmpConfig.setTo(v9);
	int v11 = p0.setBounds(p1);
	Configuration v12 = p0.getResolvedOverrideConfiguration();
	boolean v13 = this.mTmpConfig.equals(v12);
	ActivityRecord v14 = p0.topRunningActivityLocked();
	boolean v15 = v14.ensureActivityConfiguration(0, p3);
	TaskFragment.mRootWindowContainer.ensureActivitiesVisible(v14, 0, p3);
	boolean v17 = TaskFragment.mRootWindowContainer.resumeFocusedTasksTopActivities();
	p0.resize(phiInstruction, phiInstruction);
	p0.saveLaunchingStateIfNeeded();
	Trace.traceEnd(32);
	TaskFragment.mAtmService.continueWindowLayout();
	return phiInstruction;
}
-----
depth : 2
public void deferWindowLayout(){
	boolean v1 = WindowManagerService.mWindowPlacerLocked.isLayoutDeferred();
	this.mLayoutReasons = 0;
	WindowManagerService.mWindowPlacerLocked.deferLayout();
	return;
}
-----
depth : 2
public WindowContainer getParent(){
	return this.mParent;
}
-----
depth : 2
public boolean canResizeToBounds(Rect p1){
	boolean v1 = p0.inFreeformWindowingMode();
	int v2 = p1.width();
	int v3 = p1.height();
	Rect v4 = p0.getRequestedOverrideBounds();
	boolean v5 = v4.isEmpty();
	int v6 = v4.width();
	int v7 = v4.height();
	return phiInstruction;
}
-----
depth : 2
public Configuration getResolvedOverrideConfiguration(){
	return this.mResolvedOverrideConfiguration;
}
-----
depth : 2
public int setBounds(Rect p1){
	boolean v1 = p0.isRootTask();
	Task v2 = p0.getRootTask();
	Task v3 = p0.getRootTask();
	DisplayContent v4 = v3.getDisplayContent();
	DisplayInfo v5 = phiInstruction.getDisplayInfo();
	int v6 = p0.setBounds(p1);
	this.mRotation = phiInstruction;
	p0.updateSurfacePositionNonOrganized();
	return v6;
}
-----
depth : 2
public Configuration getResolvedOverrideConfiguration(){
	return this.mResolvedOverrideConfiguration;
}
-----
depth : 2
public ActivityRecord topRunningActivityLocked(){
	WindowContainer v1 = p0.getParent();
	Task$$ExternalSyntheticLambda6 v1 = new Task$$ExternalSyntheticLambda6();
	ActivityRecord v3 = p0.getActivity(v1);
	return v3;
}
-----
depth : 2
public boolean ensureActivityConfiguration(int p1, boolean p2){
	boolean v1 = p0.ensureActivityConfiguration(p1, p2, 0);
	return v1;
}
-----
depth : 2
public void ensureActivitiesVisible(ActivityRecord p1, int p2, boolean p3){
	p0.ensureActivitiesVisible(p1, p2, p3, 1);
	return;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public void resize(boolean p1, boolean p2){
	Rect v1 = p0.getRequestedOverrideBounds();
	int v2 = p0.setBounds(v1, p2);
	DisplayContent v3 = p0.getDisplayContent();
	v3.layoutAndAssignWindowLayersIfNeeded();
	return;
}
-----
depth : 2
public void saveLaunchingStateIfNeeded(){
	DisplayContent v1 = p0.getDisplayContent();
	p0.saveLaunchingStateIfNeeded(v1);
	return;
}
-----
depth : 2
public void continueWindowLayout(){
	WindowManagerService.mWindowPlacerLocked.continueLayout(phiInstruction);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);\nboolean v7 = v4.resize(p2, p3, phiInstruction);']

The method resizeTask has the following similar APIs:

- API Name: setTaskResizeable(II)V with Similarity Score: 0.8401419520378113
  - Access Control Level: SYS_OR_SIG and the following code:
Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);
v2.setResizeMode(p2);

- API Name: moveTaskToRootTask(IIZ)V with Similarity Score: 0.8276774883270264
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1);
Task v9 = this.mRootWindowContainer.getRootTask(p2);
boolean v11 = v4.reparent(v9, p3, 1, 1, 0, "moveTaskToRootTask");

