This is path 1 for the API with depth 2:
depth : 0
public void setFocusedRootTask(int p1){
	ActivityTaskManagerService.enforceTaskPermission("setFocusedRootTask()");
	Object v1 = new Object(1);
	Long v2 = Long.valueOf(p1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 255339989, 1, 0, v1);
	long v4 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v6 = this.mRootWindowContainer.getRootTask(p1);
	ActivityRecord v7 = v6.topRunningActivity();
	boolean v8 = v7.moveFocusableActivityToTop("setFocusedRootTask");
	boolean v9 = this.mRootWindowContainer.resumeFocusedTasksTopActivities();
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 2
public WindowContainer getChildAt(int p1){
	Object v1 = this.mChildren.get(p1);
	return v1;
}
-----
depth : 2
public Task getRootTask(int p1){
	DisplayContent$$ExternalSyntheticLambda6 v0 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v2 = p0.getRootTask(v0);
	return v2;
}
-----
depth : 1
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivity(boolean p1){
	ActivityRecord v1 = p0.topRunningActivity(p1, 1);
	return v1;
}
-----
depth : 1
public boolean moveFocusableActivityToTop(String p1){
	boolean v1 = p0.isFocusable();
	Task v2 = p0.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v2 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v4 = WindowContainer.mDisplayContent.getTask(v2, 1);
	String v5 = String.valueOf(p0);
	Object v5 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v5);
	boolean v7 = WindowContainer.mDisplayContent.setFocusedApp(p0);
	boolean v8 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v9 = p0.isState(ActivityRecord$State.RESUMED);
	return (v9 ^ 1);
}
-----
depth : 2
public boolean isFocusable(){
	boolean v1 = p0.isFocusable();
	boolean v2 = p0.canReceiveKeys();
	boolean v3 = p0.isAlwaysFocusable();
	return phiInstruction;
}
-----
depth : 2
public Task getRootTask(){
	Task v1 = this.task.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public boolean setFocusedApp(ActivityRecord p1){
	DisplayContent v1 = p1.getDisplayContent();
	TaskDisplayArea v2 = p1.getDisplayArea();
	p0.onLastFocusedTaskDisplayAreaChanged(v2);
	String v4 = String.valueOf(p1);
	int v5 = p0.getDisplayId();
	String v6 = Debug.getCallers(4);
	String v7 = String.valueOf(v6);
	Object v7 = new Object(3);
	Long v8 = Long.valueOf(v5);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v7);
	Task v10 = this.mFocusedApp.getTask();
	Task v11 = p1.getTask();
	this.mFocusedApp = p1;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v14 = p0.getInputMonitor();
	v14.setFocusedAppLw(p1);
	p0.updateTouchExcludeRegion();
	return 1;
}
-----
depth : 2
public boolean updateFocusedWindowLocked(int p1, boolean p2){
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v2 = this.mRoot.updateFocusedWindowLocked(p1, p2);
	Trace.traceEnd(32);
	return v2;
}
-----
depth : 1
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(Task p1, ActivityRecord p2, ActivityOptions p3){
	boolean v1 = p0.resumeFocusedTasksTopActivities(p1, p2, p3, 0);
	return v1;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setFocusedRootTask(int p1){
	ActivityTaskManagerService.enforceTaskPermission("setFocusedRootTask()");
	Object v1 = new Object(1);
	Long v2 = Long.valueOf(p1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 255339989, 1, 0, v1);
	long v4 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v6 = this.mRootWindowContainer.getRootTask(p1);
	ActivityRecord v7 = v6.topRunningActivity();
	boolean v8 = v7.moveFocusableActivityToTop("setFocusedRootTask");
	boolean v9 = this.mRootWindowContainer.resumeFocusedTasksTopActivities();
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 2
public WindowContainer getChildAt(int p1){
	Object v1 = this.mChildren.get(p1);
	return v1;
}
-----
depth : 2
public Task getRootTask(int p1){
	DisplayContent$$ExternalSyntheticLambda6 v0 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v2 = p0.getRootTask(v0);
	return v2;
}
-----
depth : 1
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivity(boolean p1){
	ActivityRecord v1 = p0.topRunningActivity(p1, 1);
	return v1;
}
-----
depth : 1
public boolean moveFocusableActivityToTop(String p1){
	boolean v1 = p0.isFocusable();
	Task v2 = p0.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v2 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v4 = WindowContainer.mDisplayContent.getTask(v2, 1);
	String v5 = String.valueOf(p0);
	Object v5 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v5);
	boolean v7 = WindowContainer.mDisplayContent.setFocusedApp(p0);
	boolean v8 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v9 = p0.isState(ActivityRecord$State.RESUMED);
	return (v9 ^ 1);
}
-----
depth : 2
public boolean isFocusable(){
	boolean v1 = p0.isFocusable();
	boolean v2 = p0.canReceiveKeys();
	boolean v3 = p0.isAlwaysFocusable();
	return phiInstruction;
}
-----
depth : 2
public Task getRootTask(){
	Task v1 = this.task.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public boolean setFocusedApp(ActivityRecord p1){
	DisplayContent v1 = p1.getDisplayContent();
	TaskDisplayArea v2 = p1.getDisplayArea();
	p0.onLastFocusedTaskDisplayAreaChanged(v2);
	String v4 = String.valueOf(p1);
	int v5 = p0.getDisplayId();
	String v6 = Debug.getCallers(4);
	String v7 = String.valueOf(v6);
	Object v7 = new Object(3);
	Long v8 = Long.valueOf(v5);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v7);
	Task v10 = this.mFocusedApp.getTask();
	Task v11 = p1.getTask();
	this.mFocusedApp = p1;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v14 = p0.getInputMonitor();
	v14.setFocusedAppLw(p1);
	p0.updateTouchExcludeRegion();
	return 1;
}
-----
depth : 2
public boolean updateFocusedWindowLocked(int p1, boolean p2){
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v2 = this.mRoot.updateFocusedWindowLocked(p1, p2);
	Trace.traceEnd(32);
	return v2;
}
-----
depth : 1
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(Task p1, ActivityRecord p2, ActivityOptions p3){
	boolean v1 = p0.resumeFocusedTasksTopActivities(p1, p2, p3, 0);
	return v1;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setFocusedRootTask(int p1){
	ActivityTaskManagerService.enforceTaskPermission("setFocusedRootTask()");
	Object v1 = new Object(1);
	Long v2 = Long.valueOf(p1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 255339989, 1, 0, v1);
	long v4 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v6 = this.mRootWindowContainer.getRootTask(p1);
	ActivityRecord v7 = v6.topRunningActivity();
	boolean v8 = v7.moveFocusableActivityToTop("setFocusedRootTask");
	boolean v9 = this.mRootWindowContainer.resumeFocusedTasksTopActivities();
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public void enforceTaskPermission(String p1){
	int v3 = Slog.w("ActivityTaskManager", "MANAGE_ACTIVITY_STACKS is deprecated, please use alternative permission: MANAGE_ACTIVITY_TASKS");
	return;
}
-----
depth : 1
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task getRootTask(int p1){
	int v1 = p0.getChildCount();
	WindowContainer v2 = p0.getChildAt(phiInstruction);
	Task v3 = v2.getRootTask(p1);
	return v3;
}
-----
depth : 2
public int getChildCount(){
	int v1 = this.mChildren.size();
	return v1;
}
-----
depth : 2
public WindowContainer getChildAt(int p1){
	Object v1 = this.mChildren.get(p1);
	return v1;
}
-----
depth : 2
public Task getRootTask(int p1){
	DisplayContent$$ExternalSyntheticLambda6 v0 = new DisplayContent$$ExternalSyntheticLambda6(p1);
	Task v2 = p0.getRootTask(v0);
	return v2;
}
-----
depth : 1
public ActivityRecord topRunningActivity(){
	ActivityRecord v1 = p0.topRunningActivity(0);
	return v1;
}
-----
depth : 2
public ActivityRecord topRunningActivity(boolean p1){
	ActivityRecord v1 = p0.topRunningActivity(p1, 1);
	return v1;
}
-----
depth : 1
public boolean moveFocusableActivityToTop(String p1){
	boolean v1 = p0.isFocusable();
	Task v2 = p0.getRootTask();
	ActivityRecord$$ExternalSyntheticLambda4 v2 = new ActivityRecord$$ExternalSyntheticLambda4();
	Task v4 = WindowContainer.mDisplayContent.getTask(v2, 1);
	String v5 = String.valueOf(p0);
	Object v5 = new Object(1);
	ProtoLogImpl.d(ProtoLogGroup.WM_DEBUG_FOCUS, 1239439010, 0, 0, v5);
	boolean v7 = WindowContainer.mDisplayContent.setFocusedApp(p0);
	boolean v8 = ActivityTaskManagerService.mWindowManager.updateFocusedWindowLocked(0, 1);
	boolean v9 = p0.isState(ActivityRecord$State.RESUMED);
	return (v9 ^ 1);
}
-----
depth : 2
public boolean isFocusable(){
	boolean v1 = p0.isFocusable();
	boolean v2 = p0.canReceiveKeys();
	boolean v3 = p0.isAlwaysFocusable();
	return phiInstruction;
}
-----
depth : 2
public Task getRootTask(){
	Task v1 = this.task.getRootTask();
	return phiInstruction;
}
-----
depth : 2
public void d(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.DEBUG, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public boolean setFocusedApp(ActivityRecord p1){
	DisplayContent v1 = p1.getDisplayContent();
	TaskDisplayArea v2 = p1.getDisplayArea();
	p0.onLastFocusedTaskDisplayAreaChanged(v2);
	String v4 = String.valueOf(p1);
	int v5 = p0.getDisplayId();
	String v6 = Debug.getCallers(4);
	String v7 = String.valueOf(v6);
	Object v7 = new Object(3);
	Long v8 = Long.valueOf(v5);
	ProtoLogImpl.i(ProtoLogGroup.WM_DEBUG_FOCUS_LIGHT, -639217716, 4, 0, v7);
	Task v10 = this.mFocusedApp.getTask();
	Task v11 = p1.getTask();
	this.mFocusedApp = p1;
	phiInstruction.onAppFocusChanged(0);
	phiInstruction.onAppFocusChanged(1);
	InputMonitor v14 = p0.getInputMonitor();
	v14.setFocusedAppLw(p1);
	p0.updateTouchExcludeRegion();
	return 1;
}
-----
depth : 2
public boolean updateFocusedWindowLocked(int p1, boolean p2){
	Trace.traceBegin(32, "wmUpdateFocus");
	boolean v2 = this.mRoot.updateFocusedWindowLocked(p1, p2);
	Trace.traceEnd(32);
	return v2;
}
-----
depth : 1
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(Task p1, ActivityRecord p2, ActivityOptions p3){
	boolean v1 = p0.resumeFocusedTasksTopActivities(p1, p2, p3, 0);
	return v1;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
