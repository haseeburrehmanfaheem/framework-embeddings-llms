The method setTaskResizeable has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void setTaskResizeable(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	v2.setResizeMode(p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void setResizeMode(int p1){
	this.mResizeMode = p1;
	TaskFragment.mRootWindowContainer.ensureActivitiesVisible(0, 0, 0);
	boolean v2 = TaskFragment.mRootWindowContainer.resumeFocusedTasksTopActivities();
	p0.updateTaskDescription();
	return;
}
-----
depth : 2
public void ensureActivitiesVisible(ActivityRecord p1, int p2, boolean p3){
	p0.ensureActivitiesVisible(p1, p2, p3, 1);
	return;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public void updateTaskDescription(){
	ActivityRecord v1 = p0.getRootActivity(1);
	ActivityManager$TaskDescription v1 = new ActivityManager$TaskDescription();
	Task$$ExternalSyntheticLambda9 v2 = new Task$$ExternalSyntheticLambda9();
	ArgumentPlaceholder v4 = PooledLambda.__(ActivityRecor.class);
	PooledPredicate v5 = PooledLambda.obtainPredicate(v2, v4, v1, v1);
	boolean v6 = p0.forAllActivities(v5);
	v5.recycle();
	v1.setResizeMode(this.mResizeMode);
	v1.setMinWidth(TaskFragment.mMinWidth);
	v1.setMinHeight(TaskFragment.mMinHeight);
	p0.setTaskDescription(v1);
	TaskChangeNotificationController v12 = TaskFragment.mAtmService.getTaskChangeNotificationController();
	ActivityManager$RunningTaskInfo v13 = p0.getTaskInfo();
	v12.notifyTaskDescriptionChanged(v13);
	WindowContainer v15 = p0.getParent();
	Task v16 = v15.asTask();
	v16.updateTaskDescription();
	p0.dispatchTaskInfoChangedIfNeeded(0);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void setTaskResizeable(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	v2.setResizeMode(p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void setResizeMode(int p1){
	this.mResizeMode = p1;
	TaskFragment.mRootWindowContainer.ensureActivitiesVisible(0, 0, 0);
	boolean v2 = TaskFragment.mRootWindowContainer.resumeFocusedTasksTopActivities();
	p0.updateTaskDescription();
	return;
}
-----
depth : 2
public void ensureActivitiesVisible(ActivityRecord p1, int p2, boolean p3){
	p0.ensureActivitiesVisible(p1, p2, p3, 1);
	return;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public void updateTaskDescription(){
	ActivityRecord v1 = p0.getRootActivity(1);
	ActivityManager$TaskDescription v1 = new ActivityManager$TaskDescription();
	Task$$ExternalSyntheticLambda9 v2 = new Task$$ExternalSyntheticLambda9();
	ArgumentPlaceholder v4 = PooledLambda.__(ActivityRecor.class);
	PooledPredicate v5 = PooledLambda.obtainPredicate(v2, v4, v1, v1);
	boolean v6 = p0.forAllActivities(v5);
	v5.recycle();
	v1.setResizeMode(this.mResizeMode);
	v1.setMinWidth(TaskFragment.mMinWidth);
	v1.setMinHeight(TaskFragment.mMinHeight);
	p0.setTaskDescription(v1);
	TaskChangeNotificationController v12 = TaskFragment.mAtmService.getTaskChangeNotificationController();
	ActivityManager$RunningTaskInfo v13 = p0.getTaskInfo();
	v12.notifyTaskDescriptionChanged(v13);
	WindowContainer v15 = p0.getParent();
	Task v16 = v15.asTask();
	v16.updateTaskDescription();
	p0.dispatchTaskInfoChangedIfNeeded(0);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void setTaskResizeable(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	v2.setResizeMode(p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public void setResizeMode(int p1){
	this.mResizeMode = p1;
	TaskFragment.mRootWindowContainer.ensureActivitiesVisible(0, 0, 0);
	boolean v2 = TaskFragment.mRootWindowContainer.resumeFocusedTasksTopActivities();
	p0.updateTaskDescription();
	return;
}
-----
depth : 2
public void ensureActivitiesVisible(ActivityRecord p1, int p2, boolean p3){
	p0.ensureActivitiesVisible(p1, p2, p3, 1);
	return;
}
-----
depth : 2
public boolean resumeFocusedTasksTopActivities(){
	boolean v1 = p0.resumeFocusedTasksTopActivities(0, 0, 0);
	return v1;
}
-----
depth : 2
public void updateTaskDescription(){
	ActivityRecord v1 = p0.getRootActivity(1);
	ActivityManager$TaskDescription v1 = new ActivityManager$TaskDescription();
	Task$$ExternalSyntheticLambda9 v2 = new Task$$ExternalSyntheticLambda9();
	ArgumentPlaceholder v4 = PooledLambda.__(ActivityRecor.class);
	PooledPredicate v5 = PooledLambda.obtainPredicate(v2, v4, v1, v1);
	boolean v6 = p0.forAllActivities(v5);
	v5.recycle();
	v1.setResizeMode(this.mResizeMode);
	v1.setMinWidth(TaskFragment.mMinWidth);
	v1.setMinHeight(TaskFragment.mMinHeight);
	p0.setTaskDescription(v1);
	TaskChangeNotificationController v12 = TaskFragment.mAtmService.getTaskChangeNotificationController();
	ActivityManager$RunningTaskInfo v13 = p0.getTaskInfo();
	v12.notifyTaskDescriptionChanged(v13);
	WindowContainer v15 = p0.getParent();
	Task v16 = v15.asTask();
	v16.updateTaskDescription();
	p0.dispatchTaskInfoChangedIfNeeded(0);
	return;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1);\nv2.setResizeMode(p2);', 'this.mResizeMode = p1;\nActivityManager$TaskDescription v1 = new ActivityManager$TaskDescription();\nv1.setResizeMode(this.mResizeMode);\np0.setTaskDescription(v1);']

The method setTaskResizeable has the following similar APIs:

- API Name: resizeTask(ILandroid/graphics/Rect;I)Z with Similarity Score: 0.8401419520378113
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0);
boolean v7 = v4.resize(p2, p3, phiInstruction);

- API Name: moveTaskToRootTask(IIZ)V with Similarity Score: 0.8346332311630249
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1);
Task v9 = this.mRootWindowContainer.getRootTask(p2);
boolean v11 = v4.reparent(v9, p3, 1, 1, 0, "moveTaskToRootTask");

