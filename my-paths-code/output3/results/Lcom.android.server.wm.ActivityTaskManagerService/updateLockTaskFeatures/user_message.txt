This is path 1 for the API with depth 2:
depth : 0
public void updateLockTaskFeatures(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	String v4 = Integer.toHexString(p2);
	String v5 = String.valueOf(v4);
	Object v5 = new Object(2);
	Long v6 = Long.valueOf(p1);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, -168799453, 1, 0, v5);
	LockTaskController v8 = p0.getLockTaskController();
	v8.updateLockTaskFeatures(p1, p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void updateLockTaskFeatures(int p1, int p2){
	int v1 = p0.getLockTaskFeaturesForUser(p1);
	this.mLockTaskFeatures.put(p1, p2);
	boolean v3 = this.mLockTaskModeTasks.isEmpty();
	Object v4 = this.mLockTaskModeTasks.get(0);
	LockTaskController$$ExternalSyntheticLambda1 v4 = new LockTaskController$$ExternalSyntheticLambda1(p0,p1);
	boolean v6 = this.mHandler.post(v4);
	return;
}
-----
depth : 2
public int getLockTaskFeaturesForUser(int p1){
	int v1 = this.mLockTaskFeatures.get(p1, 0);
	return v1;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void updateLockTaskFeatures(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	String v4 = Integer.toHexString(p2);
	String v5 = String.valueOf(v4);
	Object v5 = new Object(2);
	Long v6 = Long.valueOf(p1);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, -168799453, 1, 0, v5);
	LockTaskController v8 = p0.getLockTaskController();
	v8.updateLockTaskFeatures(p1, p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void updateLockTaskFeatures(int p1, int p2){
	int v1 = p0.getLockTaskFeaturesForUser(p1);
	this.mLockTaskFeatures.put(p1, p2);
	boolean v3 = this.mLockTaskModeTasks.isEmpty();
	Object v4 = this.mLockTaskModeTasks.get(0);
	LockTaskController$$ExternalSyntheticLambda1 v4 = new LockTaskController$$ExternalSyntheticLambda1(p0,p1);
	boolean v6 = this.mHandler.post(v4);
	return;
}
-----
depth : 2
public int getLockTaskFeaturesForUser(int p1){
	int v1 = this.mLockTaskFeatures.get(p1, 0);
	return v1;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void updateLockTaskFeatures(int p1, int p2){
	WindowManagerService.boostPriorityForLockedSection();
	String v4 = Integer.toHexString(p2);
	String v5 = String.valueOf(v4);
	Object v5 = new Object(2);
	Long v6 = Long.valueOf(p1);
	ProtoLogImpl.w(ProtoLogGroup.WM_DEBUG_LOCKTASK, -168799453, 1, 0, v5);
	LockTaskController v8 = p0.getLockTaskController();
	v8.updateLockTaskFeatures(p1, p2);
	WindowManagerService.resetPriorityAfterLockedSection();
	return;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public void w(IProtoLogGroup p1, int p2, int p3, String p4, Object p5){
	ProtoLogImpl v1 = ProtoLogImpl.getSingleInstance();
	v1.log(BaseProtoLogImpl$LogLevel.WARN, p1, p2, p3, p4, p5);
	return;
}
-----
depth : 2
public ProtoLogImpl getSingleInstance(){
	ProtoLogImpl v0 = new ProtoLogImpl(v0,1048576,v1);
	File v0 = new File("/data/misc/wmtrace/wm_log.winscope");
	ProtoLogViewerConfigReader v1 = new ProtoLogViewerConfigReader();
	this.sServiceInstance = v0;
	return this.sServiceInstance;
}
-----
depth : 2
public void log(BaseProtoLogImpl$LogLevel p1, IProtoLogGroup p2, int p3, int p4, String p5, Object p6){
	boolean v1 = p2.isLogToProto();
	p0.logToProto(p3, p4, p6);
	boolean v3 = p2.isLogToLogcat();
	String v4 = p2.getTag();
	p0.logToLogcat(v4, p1, p3, p5, p6);
	return;
}
-----
depth : 1
public void updateLockTaskFeatures(int p1, int p2){
	int v1 = p0.getLockTaskFeaturesForUser(p1);
	this.mLockTaskFeatures.put(p1, p2);
	boolean v3 = this.mLockTaskModeTasks.isEmpty();
	Object v4 = this.mLockTaskModeTasks.get(0);
	LockTaskController$$ExternalSyntheticLambda1 v4 = new LockTaskController$$ExternalSyntheticLambda1(p0,p1);
	boolean v6 = this.mHandler.post(v4);
	return;
}
-----
depth : 2
public int getLockTaskFeaturesForUser(int p1){
	int v1 = this.mLockTaskFeatures.get(p1, 0);
	return v1;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----
