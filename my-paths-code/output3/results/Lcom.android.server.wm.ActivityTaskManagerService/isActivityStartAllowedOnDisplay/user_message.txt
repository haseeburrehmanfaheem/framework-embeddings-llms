This is path 1 for the API with depth 2:
depth : 0
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	ActivityInfo v4 = p0.resolveActivityInfoForIntent(p2, p3, p4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	boolean v6 = this.mTaskSupervisor.canPlaceEntityOnDisplay(p1, v2, v1, v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v3);
	return v6;
}
-----
depth : 1
public ActivityInfo resolveActivityInfoForIntent(Intent p1, String p2, int p3, int p4){
	int v1 = ActivityStarter.computeResolveFilterUid(p4, p4, -10000);
	ActivityInfo v2 = this.mTaskSupervisor.resolveActivity(p1, p2, 0, 0, p3, v1);
	ActivityInfo v3 = this.mAmInternal.getActivityInfoForUser(v2, p3);
	return v3;
}
-----
depth : 2
public int computeResolveFilterUid(int p1, int p2, int p3){
	return phiInstruction;
}
-----
depth : 2
public ActivityInfo resolveActivity(Intent p1, String p2, int p3, ProfilerInfo p4, int p5, int p6){
	ResolveInfo v1 = p0.resolveIntent(p1, p2, p5, 0, p6);
	ActivityInfo v2 = p0.resolveActivity(p1, v1, p3, p4);
	return v2;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public boolean canPlaceEntityOnDisplay(int p1, int p2, int p3, ActivityInfo p4){
	boolean v1 = p0.canPlaceEntityOnDisplay(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 2
public boolean canPlaceEntityOnDisplay(int p1, int p2, int p3, Task p4, ActivityInfo p5){
	boolean v1 = p0.isCallerAllowedToLaunchOnDisplay(p2, p3, p1, p5);
	DisplayContent v2 = this.mRootWindowContainer.getDisplayContentOrCreate(p1);
	boolean v3 = DisplayContent.mDwpcHelper.hasController();
	ArrayList v3 = new ArrayList();
	boolean v5 = v3.add(p5);
	ActivityTaskSupervisor$$ExternalSyntheticLambda6 v5 = new ActivityTaskSupervisor$$ExternalSyntheticLambda6(v3);
	p4.forAllActivities(v5);
	int v8 = v2.getWindowingMode();
	boolean v9 = DisplayContent.mDwpcHelper.canContainActivities(v3, v8);
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	ActivityInfo v4 = p0.resolveActivityInfoForIntent(p2, p3, p4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	boolean v6 = this.mTaskSupervisor.canPlaceEntityOnDisplay(p1, v2, v1, v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v3);
	return v6;
}
-----
depth : 1
public ActivityInfo resolveActivityInfoForIntent(Intent p1, String p2, int p3, int p4){
	int v1 = ActivityStarter.computeResolveFilterUid(p4, p4, -10000);
	ActivityInfo v2 = this.mTaskSupervisor.resolveActivity(p1, p2, 0, 0, p3, v1);
	ActivityInfo v3 = this.mAmInternal.getActivityInfoForUser(v2, p3);
	return v3;
}
-----
depth : 2
public int computeResolveFilterUid(int p1, int p2, int p3){
	return phiInstruction;
}
-----
depth : 2
public ActivityInfo resolveActivity(Intent p1, String p2, int p3, ProfilerInfo p4, int p5, int p6){
	ResolveInfo v1 = p0.resolveIntent(p1, p2, p5, 0, p6);
	ActivityInfo v2 = p0.resolveActivity(p1, v1, p3, p4);
	return v2;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public boolean canPlaceEntityOnDisplay(int p1, int p2, int p3, ActivityInfo p4){
	boolean v1 = p0.canPlaceEntityOnDisplay(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 2
public boolean canPlaceEntityOnDisplay(int p1, int p2, int p3, Task p4, ActivityInfo p5){
	boolean v1 = p0.isCallerAllowedToLaunchOnDisplay(p2, p3, p1, p5);
	DisplayContent v2 = this.mRootWindowContainer.getDisplayContentOrCreate(p1);
	boolean v3 = DisplayContent.mDwpcHelper.hasController();
	ArrayList v3 = new ArrayList();
	boolean v5 = v3.add(p5);
	ActivityTaskSupervisor$$ExternalSyntheticLambda6 v5 = new ActivityTaskSupervisor$$ExternalSyntheticLambda6(v3);
	p4.forAllActivities(v5);
	int v8 = v2.getWindowingMode();
	boolean v9 = DisplayContent.mDwpcHelper.canContainActivities(v3, v8);
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean isActivityStartAllowedOnDisplay(int p1, Intent p2, String p3, int p4){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	long v3 = Binder.clearCallingIdentity();
	ActivityInfo v4 = p0.resolveActivityInfoForIntent(p2, p3, p4, v1);
	WindowManagerService.boostPriorityForLockedSection();
	boolean v6 = this.mTaskSupervisor.canPlaceEntityOnDisplay(p1, v2, v1, v4);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v3);
	return v6;
}
-----
depth : 1
public ActivityInfo resolveActivityInfoForIntent(Intent p1, String p2, int p3, int p4){
	int v1 = ActivityStarter.computeResolveFilterUid(p4, p4, -10000);
	ActivityInfo v2 = this.mTaskSupervisor.resolveActivity(p1, p2, 0, 0, p3, v1);
	ActivityInfo v3 = this.mAmInternal.getActivityInfoForUser(v2, p3);
	return v3;
}
-----
depth : 2
public int computeResolveFilterUid(int p1, int p2, int p3){
	return phiInstruction;
}
-----
depth : 2
public ActivityInfo resolveActivity(Intent p1, String p2, int p3, ProfilerInfo p4, int p5, int p6){
	ResolveInfo v1 = p0.resolveIntent(p1, p2, p5, 0, p6);
	ActivityInfo v2 = p0.resolveActivity(p1, v1, p3, p4);
	return v2;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public boolean canPlaceEntityOnDisplay(int p1, int p2, int p3, ActivityInfo p4){
	boolean v1 = p0.canPlaceEntityOnDisplay(p1, p2, p3, 0, p4);
	return v1;
}
-----
depth : 2
public boolean canPlaceEntityOnDisplay(int p1, int p2, int p3, Task p4, ActivityInfo p5){
	boolean v1 = p0.isCallerAllowedToLaunchOnDisplay(p2, p3, p1, p5);
	DisplayContent v2 = this.mRootWindowContainer.getDisplayContentOrCreate(p1);
	boolean v3 = DisplayContent.mDwpcHelper.hasController();
	ArrayList v3 = new ArrayList();
	boolean v5 = v3.add(p5);
	ActivityTaskSupervisor$$ExternalSyntheticLambda6 v5 = new ActivityTaskSupervisor$$ExternalSyntheticLambda6(v3);
	p4.forAllActivities(v5);
	int v8 = v2.getWindowingMode();
	boolean v9 = DisplayContent.mDwpcHelper.canContainActivities(v3, v8);
	return 1;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
