The method takeTaskSnapshot has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	boolean v5 = v4.isVisible();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 2
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 1
public TaskSnapshot captureTaskSnapshot(Task p1, boolean p2){
	int v1 = p0.getSnapshotMode(p1);
	TaskSnapshot v2 = p0.drawAppThemeSnapshot(p1);
	return phiInstruction;
}
-----
depth : 2
public int getSnapshotMode(Task p1){
	ActivityRecord v1 = p1.getTopMostActivity();
	boolean v2 = p1.isActivityTypeStandardOrUndefined();
	boolean v3 = p1.isActivityTypeAssistant();
	boolean v4 = v1.shouldUseAppThemeSnapshot();
	return 1;
}
-----
depth : 2
public TaskSnapshot drawAppThemeSnapshot(Task p1){
	ActivityRecord v1 = p1.getTopMostActivity();
	WindowState v2 = v1.findMainWindow();
	ActivityManager$TaskDescription v3 = p1.getTaskDescription();
	int v4 = v3.getBackgroundColor();
	int v5 = ColorUtils.setAlphaComponent(v4, 255);
	WindowManager$LayoutParams v6 = v2.getAttrs();
	Rect v7 = p1.getBounds();
	InsetsState v8 = v2.getInsetsStateWithVisibilityOverride();
	Rect v9 = v2.getFrame();
	Rect v10 = TaskSnapshotController.getSystemBarInsets(v9, v8);
	TaskSnapshotController$SystemBarBackgroundPainter v10 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v11,this.mHighResTaskSnapshotScale,v8);
	ActivityManager$TaskDescription v11 = p1.getTaskDescription();
	int v13 = v7.width();
	int v14 = v7.height();
	RenderNode v15 = RenderNode.create("TaskSnapshotController", 0);
	boolean v16 = v15.setLeftTopRightBottom(0, 0, (v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	boolean v17 = v15.setClipToBounds(0);
	RecordingCanvas v18 = v15.start((v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	v18.drawColor(v5);
	v10.setInsets(v10);
	v10.drawDecors(v18);
	v15.end(v18);
	Bitmap v23 = ThreadedRenderer.createHardwareBitmap(v15, (v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	boolean v5 = v4.isVisible();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	p0.boost();
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 2
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 1
public TaskSnapshot captureTaskSnapshot(Task p1, boolean p2){
	int v1 = p0.getSnapshotMode(p1);
	TaskSnapshot v2 = p0.drawAppThemeSnapshot(p1);
	return phiInstruction;
}
-----
depth : 2
public int getSnapshotMode(Task p1){
	ActivityRecord v1 = p1.getTopMostActivity();
	boolean v2 = p1.isActivityTypeStandardOrUndefined();
	boolean v3 = p1.isActivityTypeAssistant();
	boolean v4 = v1.shouldUseAppThemeSnapshot();
	return 1;
}
-----
depth : 2
public TaskSnapshot drawAppThemeSnapshot(Task p1){
	ActivityRecord v1 = p1.getTopMostActivity();
	WindowState v2 = v1.findMainWindow();
	ActivityManager$TaskDescription v3 = p1.getTaskDescription();
	int v4 = v3.getBackgroundColor();
	int v5 = ColorUtils.setAlphaComponent(v4, 255);
	WindowManager$LayoutParams v6 = v2.getAttrs();
	Rect v7 = p1.getBounds();
	InsetsState v8 = v2.getInsetsStateWithVisibilityOverride();
	Rect v9 = v2.getFrame();
	Rect v10 = TaskSnapshotController.getSystemBarInsets(v9, v8);
	TaskSnapshotController$SystemBarBackgroundPainter v10 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v11,this.mHighResTaskSnapshotScale,v8);
	ActivityManager$TaskDescription v11 = p1.getTaskDescription();
	int v13 = v7.width();
	int v14 = v7.height();
	RenderNode v15 = RenderNode.create("TaskSnapshotController", 0);
	boolean v16 = v15.setLeftTopRightBottom(0, 0, (v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	boolean v17 = v15.setClipToBounds(0);
	RecordingCanvas v18 = v15.start((v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	v18.drawColor(v5);
	v10.setInsets(v10);
	v10.drawDecors(v18);
	v15.end(v18);
	Bitmap v23 = ThreadedRenderer.createHardwareBitmap(v15, (v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public TaskSnapshot takeTaskSnapshot(int p1){
	long v2 = Binder.clearCallingIdentity();
	WindowManagerService.boostPriorityForLockedSection();
	Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
	boolean v5 = v4.isVisible();
	TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);
	WindowManagerService.resetPriorityAfterLockedSection();
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void boostPriorityForLockedSection(){
	this.sThreadPriorityBooster.boost();
	return;
}
-----
depth : 2
public void boost(){
	return;
}
-----
depth : 1
public Task anyTaskForId(int p1, int p2){
	Task v1 = p0.anyTaskForId(p1, p2, 0, 0);
	return v1;
}
-----
depth : 2
public Task anyTaskForId(int p1, int p2, ActivityOptions p3, boolean p4){
	AppTransition$$ExternalSyntheticLambda2 v0 = new AppTransition$$ExternalSyntheticLambda2();
	ArgumentPlaceholder v2 = PooledLambda.__(Tas.class);
	Integer v3 = Integer.valueOf(p1);
	PooledPredicate v4 = PooledLambda.obtainPredicate(v0, v2, v3);
	Task v5 = p0.getTask(v4);
	v4.recycle();
	Task v7 = p0.getOrCreateRootTask(0, p3, v5, p4);
	Task v8 = v5.getRootTask();
	boolean v9 = v5.reparent(v7, p4, phiInstruction, 1, 1, "anyTaskForId");
	return v5;
}
-----
depth : 1
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 2
public boolean isVisible(){
	int v1 = this.mChildren.size();
	Object v2 = this.mChildren.get(phiInstruction);
	boolean v3 = v2.isVisible();
	return 1;
}
-----
depth : 1
public TaskSnapshot captureTaskSnapshot(Task p1, boolean p2){
	int v1 = p0.getSnapshotMode(p1);
	TaskSnapshot v2 = p0.drawAppThemeSnapshot(p1);
	return phiInstruction;
}
-----
depth : 2
public int getSnapshotMode(Task p1){
	ActivityRecord v1 = p1.getTopMostActivity();
	boolean v2 = p1.isActivityTypeStandardOrUndefined();
	boolean v3 = p1.isActivityTypeAssistant();
	boolean v4 = v1.shouldUseAppThemeSnapshot();
	return 1;
}
-----
depth : 2
public TaskSnapshot drawAppThemeSnapshot(Task p1){
	ActivityRecord v1 = p1.getTopMostActivity();
	WindowState v2 = v1.findMainWindow();
	ActivityManager$TaskDescription v3 = p1.getTaskDescription();
	int v4 = v3.getBackgroundColor();
	int v5 = ColorUtils.setAlphaComponent(v4, 255);
	WindowManager$LayoutParams v6 = v2.getAttrs();
	Rect v7 = p1.getBounds();
	InsetsState v8 = v2.getInsetsStateWithVisibilityOverride();
	Rect v9 = v2.getFrame();
	Rect v10 = TaskSnapshotController.getSystemBarInsets(v9, v8);
	TaskSnapshotController$SystemBarBackgroundPainter v10 = new TaskSnapshotController$SystemBarBackgroundPainter(WindowManager$LayoutParams.flags,WindowManager$LayoutParams.privateFlags,InsetsFlags.appearance,v11,this.mHighResTaskSnapshotScale,v8);
	ActivityManager$TaskDescription v11 = p1.getTaskDescription();
	int v13 = v7.width();
	int v14 = v7.height();
	RenderNode v15 = RenderNode.create("TaskSnapshotController", 0);
	boolean v16 = v15.setLeftTopRightBottom(0, 0, (v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	boolean v17 = v15.setClipToBounds(0);
	RecordingCanvas v18 = v15.start((v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	v18.drawColor(v5);
	v10.setInsets(v10);
	v10.drawDecors(v18);
	v15.end(v18);
	Bitmap v23 = ThreadedRenderer.createHardwareBitmap(v15, (v13 * this.mHighResTaskSnapshotScale), (v14 * this.mHighResTaskSnapshotScale));
	return 0;
}
-----
depth : 1
public void resetPriorityAfterLockedSection(){
	this.sThreadPriorityBooster.reset();
	return;
}
-----
depth : 2
public void reset(){
	p0.reset();
	return;
}
-----

and the following sink code:
['Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);\nboolean v5 = v4.isVisible();\nTaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0);\nreturn phiInstruction;', 'int v1 = p0.getSnapshotMode(p1);\nTaskSnapshot v2 = p0.drawAppThemeSnapshot(p1);']

The method takeTaskSnapshot has the following similar APIs:

- API Name: getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot; with Similarity Score: 0.9391462802886963
  - Access Control Level: SYS_OR_SIG and the following code:
Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1);
TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.getSnapshot(p1, Task.mUserId, 1, p2);
TaskSnapshot v7 = p0.takeTaskSnapshot(p1);
return phiInstruction;

- API Name: getTaskDescription(I)Landroid/app/ActivityManager$TaskDescription; with Similarity Score: 0.8191801905632019
  - Access Control Level: SYS_OR_SIG and the following code:
Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 1);
ActivityManager$TaskDescription v4 = v3.getTaskDescription();
return v4;

