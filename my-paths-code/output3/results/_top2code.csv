EP1_ID,EP2_ID,EP1_Code,EP2_Code,Similarity
addAnnouncementListener([ILandroid/hardware/radio/IAnnouncementListener;)Landroid/hardware/radio/ICloseHandle;,No similar EPs with similarity > 0.8,,,
listModules()Ljava/util/List;,No similar EPs with similarity > 0.8,,,
openTuner(ILandroid/hardware/radio/RadioManager$BandConfig;ZLandroid/hardware/radio/ITunerCallback;)Landroid/hardware/radio/ITuner;,No similar EPs with similarity > 0.8,,,
<clinit>()V,No similar EPs with similarity > 0.8,,,
attachAsOriginator(ILandroid/media/permission/Identity;Landroid/media/soundtrigger_middleware/ISoundTriggerCallback;)Landroid/media/soundtrigger_middleware/ISoundTriggerModule;,attachAsMiddleman(ILandroid/media/permission/Identity;Landroid/media/permission/Identity;Landroid/media/soundtrigger_middleware/ISoundTriggerCallback;)Landroid/media/soundtrigger_middleware/ISoundTriggerModule;,"SoundTriggerMiddlewareService$ModuleService v2 = new SoundTriggerMiddlewareService$ModuleService(v3,0); ISoundTriggerModule v3 = this.mDelegate.attach(p1, p3); return v2;","SafeCloseable v3 = p0.establishIdentityIndirect(p2, p3); ISoundTriggerModule v4 = this.mDelegate.attach(p1, p4); SoundTriggerMiddlewareService$ModuleService v3 = new SoundTriggerMiddlewareService$ModuleService(v4,0); return v3;",0.8340879678726196
listModulesAsOriginator(Landroid/media/permission/Identity;)[Landroid/media/soundtrigger_middleware/SoundTriggerModuleDescriptor;,listModulesAsMiddleman(Landroid/media/permission/Identity;Landroid/media/permission/Identity;)[Landroid/media/soundtrigger_middleware/SoundTriggerModuleDescriptor;,SoundTriggerModuleDescriptor v2 = this.mDelegate.listModules(); return v2;,SoundTriggerModuleDescriptor v2 = this.mDelegate.listModules(); return v2;,1.0000001192092896
listModulesAsOriginator(Landroid/media/permission/Identity;)[Landroid/media/soundtrigger_middleware/SoundTriggerModuleDescriptor;,registerRemoteAnimationsForDisplay(ILandroid/view/RemoteAnimationDefinition;)V,int v2 = Binder.getCallingUid(); Identity.uid = v2; int v3 = Binder.getCallingPid(); Identity.pid = v3;,"int v2 = Binder.getCallingPid(); int v3 = Binder.getCallingUid(); p2.setCallingPidUid(v2, v3);",0.9267750382423401
attachAsMiddleman(ILandroid/media/permission/Identity;Landroid/media/permission/Identity;Landroid/media/soundtrigger_middleware/ISoundTriggerCallback;)Landroid/media/soundtrigger_middleware/ISoundTriggerModule;,attachAsOriginator(ILandroid/media/permission/Identity;Landroid/media/soundtrigger_middleware/ISoundTriggerCallback;)Landroid/media/soundtrigger_middleware/ISoundTriggerModule;,"SafeCloseable v3 = p0.establishIdentityIndirect(p2, p3); ISoundTriggerModule v4 = this.mDelegate.attach(p1, p4); SoundTriggerMiddlewareService$ModuleService v3 = new SoundTriggerMiddlewareService$ModuleService(v4,0); return v3;","SoundTriggerMiddlewareService$ModuleService v2 = new SoundTriggerMiddlewareService$ModuleService(v3,0); ISoundTriggerModule v3 = this.mDelegate.attach(p1, p3); return v2;",0.8340879678726196
listModulesAsMiddleman(Landroid/media/permission/Identity;Landroid/media/permission/Identity;)[Landroid/media/soundtrigger_middleware/SoundTriggerModuleDescriptor;,listModulesAsOriginator(Landroid/media/permission/Identity;)[Landroid/media/soundtrigger_middleware/SoundTriggerModuleDescriptor;,SoundTriggerModuleDescriptor v2 = this.mDelegate.listModules(); return v2;,SoundTriggerModuleDescriptor v2 = this.mDelegate.listModules(); return v2;,1.0000001192092896
getFontConfig()Landroid/text/FontConfig;,No similar EPs with similarity > 0.8,,,
updateFontFamily(Ljava/util/List;I)I,No similar EPs with similarity > 0.8,,,
reportUnlockAttempt(ZI)V,unregisterTrustListener(Landroid/app/trust/ITrustListener;)V,"Message v3 = v2.obtainMessage(3, p1, p2); v3.sendToTarget();","Message v3 = v2.obtainMessage(2, p1); v3.sendToTarget();",0.9902768731117249
reportUnlockAttempt(ZI)V,reportUserRequestedUnlock(IZ)V,"Message v3 = v2.obtainMessage(3, p1, p2); v3.sendToTarget();","Message v3 = v2.obtainMessage(16, p1, p2); v3.sendToTarget();",0.9870986938476562
unlockedByBiometricForUser(ILandroid/hardware/biometrics/BiometricSourceType;)V,clearAllBiometricRecognized(Landroid/hardware/biometrics/BiometricSourceType;I)V,"SparseBooleanArray v2 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); SparseBooleanArray v3 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); v3.put(p1, 1);",SparseBooleanArray v2 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); SparseBooleanArray v3 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); v3.clear();,0.9516425132751465
unlockedByBiometricForUser(ILandroid/hardware/biometrics/BiometricSourceType;)V,reportUnlockLockout(II)V,"Message v8 = v7.obtainMessage(14, p1, v6); v8.sendToTarget();","Message v3 = v2.obtainMessage(13, p1, p2); v3.sendToTarget();",0.9415740966796875
reportUnlockLockout(II)V,reportUserRequestedUnlock(IZ)V,"Message v3 = v2.obtainMessage(13, p1, p2); v3.sendToTarget();","Message v3 = v2.obtainMessage(16, p1, p2); v3.sendToTarget();",0.9871155023574829
reportUnlockLockout(II)V,unregisterTrustListener(Landroid/app/trust/ITrustListener;)V,"Message v3 = v2.obtainMessage(13, p1, p2); v3.sendToTarget();","Message v3 = v2.obtainMessage(2, p1); v3.sendToTarget();",0.9850486516952515
isDeviceLocked(II)Z,isDeviceSecure(II)Z,"boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2); int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4); boolean v7 = v6.isSeparateProfileChallengeEnabled(v4); return v9;","boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2); int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);",0.9127565622329712
setDeviceLockedForUser(IZ)V,isDeviceSecure(II)Z,LockPatternUtils v3 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0); boolean v4 = v3.isSeparateProfileChallengeEnabled(p1); LockPatternUtils v5 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0); boolean v6 = v5.isSecure(p1);,LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0); boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);,0.9690092206001282
setDeviceLockedForUser(IZ)V,unlockedByBiometricForUser(ILandroid/hardware/biometrics/BiometricSourceType;)V,"SparseBooleanArray v7 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0); SparseBooleanArray v8 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0); v8.put(p1, p2);","SparseBooleanArray v2 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); SparseBooleanArray v3 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); v3.put(p1, 1);",0.901128888130188
clearAllBiometricRecognized(Landroid/hardware/biometrics/BiometricSourceType;I)V,unlockedByBiometricForUser(ILandroid/hardware/biometrics/BiometricSourceType;)V,SparseBooleanArray v2 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); SparseBooleanArray v3 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); v3.clear();,"SparseBooleanArray v2 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); SparseBooleanArray v3 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); v3.put(p1, 1);",0.9516425132751465
clearAllBiometricRecognized(Landroid/hardware/biometrics/BiometricSourceType;I)V,setDeviceLockedForUser(IZ)V,SparseBooleanArray v2 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); SparseBooleanArray v3 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0); v3.clear();,"SparseBooleanArray v7 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0); SparseBooleanArray v8 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0); v8.put(p1, p2);",0.8574119806289673
reportUserMayRequestUnlock(I)V,reportUserRequestedUnlock(IZ)V,"Integer v3 = Integer.valueOf(p1); Message v4 = v2.obtainMessage(18, v3); v4.sendToTarget();","Message v3 = v2.obtainMessage(16, p1, p2); v3.sendToTarget();",0.901436448097229
reportUserMayRequestUnlock(I)V,registerTrustListener(Landroid/app/trust/ITrustListener;)V,"Integer v3 = Integer.valueOf(p1); Message v4 = v2.obtainMessage(18, v3); v4.sendToTarget();","Message v3 = v2.obtainMessage(1, p1); v3.sendToTarget();",0.8994328379631042
reportEnabledTrustAgentsChanged(I)V,reportUserRequestedUnlock(IZ)V,Handler v2 = TrustManagerService.-$$Nest$fgetmHandler(this.this$0); v2.removeMessages(4); Handler v4 = TrustManagerService.-$$Nest$fgetmHandler(this.this$0); boolean v5 = v4.sendEmptyMessage(4);,Handler v2 = TrustManagerService.-$$Nest$fgetmHandler(this.this$0);,0.8078945875167847
reportKeyguardShowingChanged()V,No similar EPs with similarity > 0.8,,,
isTrustUsuallyManaged(I)Z,No similar EPs with similarity > 0.8,,,
unregisterTrustListener(Landroid/app/trust/ITrustListener;)V,registerTrustListener(Landroid/app/trust/ITrustListener;)V,"Message v3 = v2.obtainMessage(2, p1); v3.sendToTarget();","Message v3 = v2.obtainMessage(1, p1); v3.sendToTarget();",0.9970855712890625
unregisterTrustListener(Landroid/app/trust/ITrustListener;)V,reportUnlockAttempt(ZI)V,"Message v3 = v2.obtainMessage(2, p1); v3.sendToTarget();","Message v3 = v2.obtainMessage(3, p1, p2); v3.sendToTarget();",0.9902768731117249
isDeviceSecure(II)Z,setDeviceLockedForUser(IZ)V,LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0); boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);,LockPatternUtils v3 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0); boolean v4 = v3.isSeparateProfileChallengeEnabled(p1); LockPatternUtils v5 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0); boolean v6 = v5.isSecure(p1);,0.9690092206001282
isDeviceSecure(II)Z,isDeviceLocked(II)Z,"boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2); int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);","boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2); int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4); boolean v7 = v6.isSeparateProfileChallengeEnabled(v4); return v9;",0.9127565622329712
registerTrustListener(Landroid/app/trust/ITrustListener;)V,unregisterTrustListener(Landroid/app/trust/ITrustListener;)V,"Message v3 = v2.obtainMessage(1, p1); v3.sendToTarget();","Message v3 = v2.obtainMessage(2, p1); v3.sendToTarget();",0.9970855712890625
registerTrustListener(Landroid/app/trust/ITrustListener;)V,reportUnlockAttempt(ZI)V,"Message v3 = v2.obtainMessage(1, p1); v3.sendToTarget();","Message v3 = v2.obtainMessage(3, p1, p2); v3.sendToTarget();",0.9859944581985474
reportUserRequestedUnlock(IZ)V,reportUnlockLockout(II)V,"Message v3 = v2.obtainMessage(16, p1, p2); v3.sendToTarget();","Message v3 = v2.obtainMessage(13, p1, p2); v3.sendToTarget();",0.9871155023574829
reportUserRequestedUnlock(IZ)V,reportUnlockAttempt(ZI)V,"Message v3 = v2.obtainMessage(16, p1, p2); v3.sendToTarget();","Message v3 = v2.obtainMessage(3, p1, p2); v3.sendToTarget();",0.9870986938476562
getRecentlyCommittedRollbacks()Landroid/content/pm/ParceledListSlice;,getAvailableRollbacks()Landroid/content/pm/ParceledListSlice;,RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0); Object v4 = p0.awaitResult(v2); return v4;,RollbackManagerServiceImpl$$ExternalSyntheticLambda12 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda12(p0); Object v4 = p0.awaitResult(v2); return v4;,0.9960804581642151
getRecentlyCommittedRollbacks()Landroid/content/pm/ParceledListSlice;,notifyStagedSession(I)I,RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0); Object v4 = p0.awaitResult(v2); return v4;,"RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1); Object v4 = p0.awaitResult(v2); int v5 = v4.intValue(); return v5;",0.9672808051109314
expireRollbackForPackage(Ljava/lang/String;)V,reloadPersistedData()V,"RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1); p0.awaitResult(v2);",RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0); p0.awaitResult(v2);,0.9765657186508179
expireRollbackForPackage(Ljava/lang/String;)V,notifyStagedSession(I)I,"RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1); p0.awaitResult(v2);","RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1); Object v4 = p0.awaitResult(v2); int v5 = v4.intValue(); return v5;",0.9622024297714233
blockRollbackManager(J)V,No similar EPs with similarity > 0.8,,,
getAvailableRollbacks()Landroid/content/pm/ParceledListSlice;,getRecentlyCommittedRollbacks()Landroid/content/pm/ParceledListSlice;,RollbackManagerServiceImpl$$ExternalSyntheticLambda12 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda12(p0); Object v4 = p0.awaitResult(v2); return v4;,RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0); Object v4 = p0.awaitResult(v2); return v4;,0.9960804581642151
getAvailableRollbacks()Landroid/content/pm/ParceledListSlice;,notifyStagedSession(I)I,RollbackManagerServiceImpl$$ExternalSyntheticLambda12 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda12(p0); Object v4 = p0.awaitResult(v2); return v4;,"RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1); Object v4 = p0.awaitResult(v2); int v5 = v4.intValue(); return v5;",0.9664520621299744
reloadPersistedData()V,expireRollbackForPackage(Ljava/lang/String;)V,RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0); p0.awaitResult(v2);,"RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1); p0.awaitResult(v2);",0.9765657186508179
reloadPersistedData()V,getRecentlyCommittedRollbacks()Landroid/content/pm/ParceledListSlice;,RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0); p0.awaitResult(v2);,RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0); Object v4 = p0.awaitResult(v2); return v4;,0.9636512398719788
notifyStagedSession(I)I,getRecentlyCommittedRollbacks()Landroid/content/pm/ParceledListSlice;,"RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1); Object v4 = p0.awaitResult(v2); int v5 = v4.intValue(); return v5;",RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0); Object v4 = p0.awaitResult(v2); return v4;,0.9672808051109314
notifyStagedSession(I)I,getAvailableRollbacks()Landroid/content/pm/ParceledListSlice;,"RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1); Object v4 = p0.awaitResult(v2); int v5 = v4.intValue(); return v5;",RollbackManagerServiceImpl$$ExternalSyntheticLambda12 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda12(p0); Object v4 = p0.awaitResult(v2); return v4;,0.9664520621299744
snapshotAndRestoreUserData(Ljava/lang/String;[IIJLjava/lang/String;I)V,expireRollbackForPackage(Ljava/lang/String;)V,"Handler v3 = p0.getHandler(); RollbackManagerServiceImpl$$ExternalSyntheticLambda14 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda14(p0,p1,p2,p3,p5,p6); boolean v5 = v3.post(v3);","RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1); p0.awaitResult(v2);",0.8692296743392944
snapshotAndRestoreUserData(Ljava/lang/String;[IIJLjava/lang/String;I)V,getRecentlyCommittedRollbacks()Landroid/content/pm/ParceledListSlice;,"Handler v3 = p0.getHandler(); RollbackManagerServiceImpl$$ExternalSyntheticLambda14 v3 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda14(p0,p1,p2,p3,p5,p6); boolean v5 = v3.post(v3);",RollbackManagerServiceImpl$$ExternalSyntheticLambda8 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda8(p0); Object v4 = p0.awaitResult(v2); return v4;,0.8628327250480652
isApkVeritySupported()Z,No similar EPs with similarity > 0.8,,,
isAppSourceCertificateTrusted([BLjava/lang/String;)Z,No similar EPs with similarity > 0.8,,,
checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0); return v2;","VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);",0.9841635823249817
checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4); VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);","VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);",0.9427560567855835
getLong(Ljava/lang/String;JI)J,getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;,"long v2 = this.mStorage.getLong(p1, p2, p3); return v2;","String v2 = this.mStorage.getString(p1, p2, p3); return v2;",0.9139488935470581
getLong(Ljava/lang/String;JI)J,setLong(Ljava/lang/String;JI)V,"long v2 = this.mStorage.getLong(p1, p2, p3); return v2;","this.mStorage.setLong(p1, p2, p3); p0.setString(p1, v1, p3); p0.writeKeyValue(p1, p2, p3);",0.8038596510887146
setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z,verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"int v1 = p1.getType(); boolean v2 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE""); boolean v3 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS""); boolean v14 = p0.setLockCredentialInternal(p1, phiInstruction, p3, 0);","boolean v1 = p0.hasPermission(""android.permission.ACCESS_KEYGUARD_SECURE_STORAGE""); boolean v2 = p0.hasPermission(""android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS"");",0.8675707578659058
setLockCredential(Lcom/android/internal/widget/LockscreenCredential;Lcom/android/internal/widget/LockscreenCredential;I)Z,verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"VerifyCredentialResponse v11 = p0.verifyCredential(p2, UserInfo.id, 0); p2.zeroize(); LockscreenCredential v13 = LockscreenCredential.createNone();","VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3); int v5 = v4.getResponseCode();",0.8651136159896851
generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,generateKey(Ljava/lang/String;)Ljava/lang/String;,"String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2); PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4); byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2); this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6); String v8 = p0.getAlias(v4, v3, p1);","String v1 = this.mRecoverableKeyStoreManager.generateKey(p1); String v1 = p0.generateKeyWithMetadata(p1, 0); Object v2 = Objects.requireNonNull(p1, ""alias is null""); PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4); byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2); this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6); String v8 = p0.getAlias(v4, v3, p1); return v8;",0.9717889428138733
generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,closeSession(Ljava/lang/String;)V,"int v8 = UserHandle.getCallingUserId(); int v9 = Binder.getCallingUid(); this.mCleanupManager.registerRecoveryAgent(v8, v9);","int v9 = Binder.getCallingUid(); this.mCleanupManager.registerRecoveryAgent(v8, v9);",0.965415358543396
getString(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;,getLong(Ljava/lang/String;JI)J,"String v2 = this.mStorage.getString(p1, p2, p3); return v2;","long v2 = this.mStorage.getLong(p1, p2, p3); return v2;",0.9139488935470581
registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,boolean v3 = this.mSpManager.registerWeakEscrowTokenRemovedListener(p1); return v3;,boolean v3 = this.mSpManager.unregisterWeakEscrowTokenRemovedListener(p1); return v3;,0.9843965768814087
removeGatekeeperPasswordHandle(J)V,No similar EPs with similarity > 0.8,,,
setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V,closeSession(Ljava/lang/String;)V,"this.mCleanupManager.registerRecoveryAgent(v8, v9);","int v9 = Binder.getCallingUid(); this.mCleanupManager.registerRecoveryAgent(v8, v9);",0.9211486577987671
setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,"this.mCleanupManager.registerRecoveryAgent(v8, v9);","int v8 = UserHandle.getCallingUserId(); int v9 = Binder.getCallingUid(); this.mCleanupManager.registerRecoveryAgent(v8, v9);",0.8787892460823059
startRecoverySessionWithCertPath(Ljava/lang/String;Ljava/lang/String;Landroid/security/keystore/recovery/RecoveryCertPath;[B[BLjava/util/List;)[B,No similar EPs with similarity > 0.8,,,
addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,isWeakEscrowTokenValid(J[BI)Z,"long v5 = p0.addEscrowToken(p1, 1, p2, v2); boolean v1 = p0.isUserSecure(p3); boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3); long v3 = p0.getSyntheticPasswordHandleLocked(p3); IGateKeeperService v4 = p0.getGateKeeperService(); LockscreenCredential v5 = LockscreenCredential.createNone(); SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0); boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3); p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3); boolean v9 = this.mSpManager.hasEscrowData(p3); long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4); boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);","boolean v3 = this.mSpManager.hasEscrowData(p3); IGateKeeperService v4 = p0.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);",0.8789445757865906
addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,removeWeakEscrowToken(JI)Z,"long v5 = p0.addEscrowToken(p1, 1, p2, v2); boolean v1 = p0.isUserSecure(p3); boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3); long v3 = p0.getSyntheticPasswordHandleLocked(p3); IGateKeeperService v4 = p0.getGateKeeperService(); LockscreenCredential v5 = LockscreenCredential.createNone(); SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0); boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3); p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3); boolean v9 = this.mSpManager.hasEscrowData(p3); long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4); boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);","boolean v3 = p0.removeEscrowToken(p1, p2); long v1 = p0.getSyntheticPasswordHandleLocked(p2); boolean v2 = this.mSpManager.removePendingToken(p1, p2); boolean v3 = this.mSpManager.existsHandle(p1, p2); this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);",0.8021445274353027
hasPendingEscrowToken(I)Z,No similar EPs with similarity > 0.8,,,
isWeakEscrowTokenValid(J[BI)Z,addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,"boolean v3 = this.mSpManager.hasEscrowData(p3); IGateKeeperService v4 = p0.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);","long v5 = p0.addEscrowToken(p1, 1, p2, v2); boolean v1 = p0.isUserSecure(p3); boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3); long v3 = p0.getSyntheticPasswordHandleLocked(p3); IGateKeeperService v4 = p0.getGateKeeperService(); LockscreenCredential v5 = LockscreenCredential.createNone(); SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0); boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3); p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3); boolean v9 = this.mSpManager.hasEscrowData(p3); long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4); boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);",0.8789445757865906
isWeakEscrowTokenValid(J[BI)Z,removeWeakEscrowToken(JI)Z,"boolean v3 = this.mSpManager.hasEscrowData(p3); IGateKeeperService v4 = p0.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);","boolean v3 = p0.removeEscrowToken(p1, p2); long v1 = p0.getSyntheticPasswordHandleLocked(p2); boolean v2 = this.mSpManager.removePendingToken(p1, p2); boolean v3 = this.mSpManager.existsHandle(p1, p2); this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);",0.8004565238952637
getStrongAuthForUser(I)I,No similar EPs with similarity > 0.8,,,
hasSecureLockScreen()Z,No similar EPs with similarity > 0.8,,,
initRecoveryServiceWithSigFile(Ljava/lang/String;[B[B)V,No similar EPs with similarity > 0.8,,,
getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,tryUnlockWithCachedUnifiedChallenge(I)Z,"LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2); boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2); long v5 = p0.getSyntheticPasswordHandleLocked(p2); IGateKeeperService v6 = p0.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0); byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();","LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1); VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0); int v3 = v2.getResponseCode();",0.862998366355896
getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2); boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2); long v5 = p0.getSyntheticPasswordHandleLocked(p2); IGateKeeperService v6 = p0.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0); byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();","LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2); VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);",0.8549943566322327
requireStrongAuth(II)V,userPresent(I)V,p0.checkWritePermission(p2);,p0.checkWritePermission(p1);,0.9840850830078125
requireStrongAuth(II)V,registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,"this.mStrongAuth.requireStrongAuth(p1, p2); Message v1 = this.mHandler.obtainMessage(1, p1, p2); v1.sendToTarget();","this.mStrongAuth.registerStrongAuthTracker(p1); Message v1 = this.mHandler.obtainMessage(2, p1); v1.sendToTarget();",0.9020297527313232
resetKeyStore(I)V,No similar EPs with similarity > 0.8,,,
removeCachedUnifiedChallenge(I)V,tryUnlockWithCachedUnifiedChallenge(I)Z,String v1 = ManagedProfilePasswordCache.getEncryptionKeyName(p1); String v2 = ManagedProfilePasswordCache.getLegacyEncryptionKeyName(p1); this.mKeyStore.deleteEntry(v1);,"Object v1 = this.mEncryptedPasswords.get(p1); String v2 = ManagedProfilePasswordCache.getEncryptionKeyName(p1); Key v3 = this.mKeyStore.getKey(v2, 0);",0.8277599215507507
systemReady()V,No similar EPs with similarity > 0.8,,,
getKeyChainSnapshot()Landroid/security/keystore/recovery/KeyChainSnapshot;,No similar EPs with similarity > 0.8,,,
importKeyWithMetadata(Ljava/lang/String;[B[B)Ljava/lang/String;,No similar EPs with similarity > 0.8,,,
getRecoveryStatus()Ljava/util/Map;,setRecoveryStatus(Ljava/lang/String;I)V,Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus(); return v1;,"this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2); p0.checkRecoverKeyStorePermission(); int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);",0.8411587476730347
importKey(Ljava/lang/String;[B)Ljava/lang/String;,No similar EPs with similarity > 0.8,,,
setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V,getSeparateProfileChallengeEnabled(I)Z,"boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1); p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);","boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1); boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1); String v1 = p0.getString(p1, 0, p3); return v2;",0.8752861022949219
getKey(Ljava/lang/String;)Ljava/lang/String;,generateKey(Ljava/lang/String;)Ljava/lang/String;,String v1 = this.mRecoverableKeyStoreManager.getKey(p1); return v1;,"String v1 = this.mRecoverableKeyStoreManager.generateKey(p1); String v1 = p0.generateKeyWithMetadata(p1, 0); Object v2 = Objects.requireNonNull(p1, ""alias is null""); PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4); byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2); this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6); String v8 = p0.getAlias(v4, v3, p1); return v8;",0.8438516855239868
getKey(Ljava/lang/String;)Ljava/lang/String;,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,String v1 = this.mRecoverableKeyStoreManager.getKey(p1); return v1;,"String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2); PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4); byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2); this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6); String v8 = p0.getAlias(v4, v3, p1);",0.8361668586730957
registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,requireStrongAuth(II)V,"this.mStrongAuth.registerStrongAuthTracker(p1); Message v1 = this.mHandler.obtainMessage(2, p1); v1.sendToTarget();","this.mStrongAuth.requireStrongAuth(p1, p2); Message v1 = this.mHandler.obtainMessage(1, p1, p2); v1.sendToTarget();",0.9020297527313232
registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,p0.checkPasswordReadPermission();,p0.enforceAccessPermission();,0.8517293334007263
isWeakEscrowTokenActive(JI)Z,No similar EPs with similarity > 0.8,,,
setBoolean(Ljava/lang/String;ZI)V,No similar EPs with similarity > 0.8,,,
verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);","VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0); return v2;",0.9841635823249817
verifyCredential(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, p2, 0, p3);","VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4); VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);",0.9427560567855835
getSeparateProfileChallengeEnabled(I)Z,setSeparateProfileChallengeEnabled(IZLcom/android/internal/widget/LockscreenCredential;)V,"boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1); boolean v1 = this.mStorage.getBoolean(""lockscreen.profilechallenge"", 0, p1); String v1 = p0.getString(p1, 0, p3); return v2;","boolean v1 = p0.getBoolean(""lockscreen.profilechallenge"", 0, p1); p0.setBoolean(""lockscreen.profilechallenge"", p2, p1);",0.8752861022949219
removeWeakEscrowToken(JI)Z,addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J,"boolean v3 = p0.removeEscrowToken(p1, p2); long v1 = p0.getSyntheticPasswordHandleLocked(p2); boolean v2 = this.mSpManager.removePendingToken(p1, p2); boolean v3 = this.mSpManager.existsHandle(p1, p2); this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);","long v5 = p0.addEscrowToken(p1, 1, p2, v2); boolean v1 = p0.isUserSecure(p3); boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3); long v3 = p0.getSyntheticPasswordHandleLocked(p3); IGateKeeperService v4 = p0.getGateKeeperService(); LockscreenCredential v5 = LockscreenCredential.createNone(); SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0); boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3); p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3); boolean v9 = this.mSpManager.hasEscrowData(p3); long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4); boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);",0.8021445274353027
removeWeakEscrowToken(JI)Z,isWeakEscrowTokenValid(J[BI)Z,"boolean v3 = p0.removeEscrowToken(p1, p2); long v1 = p0.getSyntheticPasswordHandleLocked(p2); boolean v2 = this.mSpManager.removePendingToken(p1, p2); boolean v3 = this.mSpManager.existsHandle(p1, p2); this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);","boolean v3 = this.mSpManager.hasEscrowData(p3); IGateKeeperService v4 = p0.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);",0.8004565238952637
getBoolean(Ljava/lang/String;ZI)Z,getCredentialType(I)I,"int v3 = p0.getCredentialTypeInternal(p3); boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p3); long v2 = p0.getSyntheticPasswordHandleLocked(p3); int v3 = this.mSpManager.getCredentialType(v2, p3); int v4 = p0.getKeyguardStoredQuality(p3); int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4); return v5;","boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1); long v2 = p0.getSyntheticPasswordHandleLocked(p1); int v3 = this.mSpManager.getCredentialType(v2, p1);",0.8936920166015625
getBoolean(Ljava/lang/String;ZI)Z,unpinSlice(Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)V,"p0.checkReadPermission(p1, p3); int v1 = Binder.getCallingUid();","int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); int v3 = p0.checkAccess(p1, p2, v1, v2);",0.8669859170913696
getRecoverySecretTypes()[I,setRecoverySecretTypes([I)V,"SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase(); String v2 = Integer.toString(p1); String v3 = Integer.toString(p2); Cursor v4 = v1.query(""recovery_service_metadata"", new String[] {""secret_types""}, ""user_id = ? AND uid = ?"", new String[] {v2, v3}, 0, 0, 0); int v7 = v4.getColumnIndexOrThrow(""secret_types""); String v9 = v4.getString(v7); [I v11 = new [I(v11.length);","SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0); [I v11 = new [I(v11.length); return v11;",0.944584846496582
getRecoverySecretTypes()[I,setRecoverySecretTypes([I)V,"int v2 = UserHandle.getCallingUserId(); int v3 = Binder.getCallingUid(); [I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3); return v4;","Object v2 = Objects.requireNonNull(p1, ""secretTypes is null""); int v3 = UserHandle.getCallingUserId(); int v4 = Binder.getCallingUid(); [I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4); boolean v6 = Arrays.equals(p1, v5); long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);",0.9059246182441711
userPresent(I)V,requireStrongAuth(II)V,p0.checkWritePermission(p1);,p0.checkWritePermission(p2);,0.9840850830078125
userPresent(I)V,portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,p0.checkWritePermission(p1);,p0.enforceAccessPermission();,0.8462145328521729
closeSession(Ljava/lang/String;)V,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,"int v9 = Binder.getCallingUid(); this.mCleanupManager.registerRecoveryAgent(v8, v9);","int v8 = UserHandle.getCallingUserId(); int v9 = Binder.getCallingUid(); this.mCleanupManager.registerRecoveryAgent(v8, v9);",0.965415358543396
closeSession(Ljava/lang/String;)V,setSnapshotCreatedPendingIntent(Landroid/app/PendingIntent;)V,"int v9 = Binder.getCallingUid(); this.mCleanupManager.registerRecoveryAgent(v8, v9);","this.mCleanupManager.registerRecoveryAgent(v8, v9);",0.9211486577987671
scheduleNonStrongBiometricIdleTimeout(I)V,removeImeSurfaceFromWindowAsync(Landroid/os/IBinder;)V,"Message v1 = this.mHandler.obtainMessage(9, p1, 0); v1.sendToTarget();","Message v1 = this.mHandler.obtainMessage(1061, p1); v1.sendToTarget();",0.9768016338348389
scheduleNonStrongBiometricIdleTimeout(I)V,removeImeSurface()V,"Message v1 = this.mHandler.obtainMessage(9, p1, 0); v1.sendToTarget();",Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,0.9267264008522034
reportSuccessfulBiometricUnlock(ZI)V,No similar EPs with similarity > 0.8,,,
setRecoveryStatus(Ljava/lang/String;I)V,getRecoveryStatus()Ljava/util/Map;,"this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2); p0.checkRecoverKeyStorePermission(); int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);",Map v1 = this.mRecoverableKeyStoreManager.getRecoveryStatus(); return v1;,0.8411587476730347
setRecoveryStatus(Ljava/lang/String;I)V,removeKey(Ljava/lang/String;)V,"this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2); p0.checkRecoverKeyStorePermission(); int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);","p0.checkRecoverKeyStorePermission(); boolean v5 = this.mDatabase.removeKey(v3, p1); this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);",0.8004450798034668
setServerParams([B)V,No similar EPs with similarity > 0.8,,,
verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse;,"VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3); int v5 = v4.getResponseCode();","VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0); return v2;",0.9161944389343262
verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,tryUnlockWithCachedUnifiedChallenge(I)Z,"LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2); VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);","LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1); VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0); int v3 = v2.getResponseCode();",0.911974310874939
tryUnlockWithCachedUnifiedChallenge(I)Z,verifyTiedProfileChallenge(Lcom/android/internal/widget/LockscreenCredential;II)Lcom/android/internal/widget/VerifyCredentialResponse;,"LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1); VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0); int v3 = v2.getResponseCode();","LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2); VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);",0.911974310874939
tryUnlockWithCachedUnifiedChallenge(I)Z,getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,"LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1); VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0); int v3 = v2.getResponseCode();","LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2); boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2); long v5 = p0.getSyntheticPasswordHandleLocked(p2); IGateKeeperService v6 = p0.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0); byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();",0.862998366355896
generateKey(Ljava/lang/String;)Ljava/lang/String;,generateKeyWithMetadata(Ljava/lang/String;[B)Ljava/lang/String;,"String v1 = this.mRecoverableKeyStoreManager.generateKey(p1); String v1 = p0.generateKeyWithMetadata(p1, 0); Object v2 = Objects.requireNonNull(p1, ""alias is null""); PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4); byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2); this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6); String v8 = p0.getAlias(v4, v3, p1); return v8;","String v1 = this.mRecoverableKeyStoreManager.generateKeyWithMetadata(p1, p2); PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4); byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2); this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6); String v8 = p0.getAlias(v4, v3, p1);",0.9717889428138733
generateKey(Ljava/lang/String;)Ljava/lang/String;,getKey(Ljava/lang/String;)Ljava/lang/String;,"String v1 = this.mRecoverableKeyStoreManager.generateKey(p1); String v1 = p0.generateKeyWithMetadata(p1, 0); Object v2 = Objects.requireNonNull(p1, ""alias is null""); PlatformEncryptionKey v5 = this.mPlatformKeyManager.getEncryptKey(v4); byte[] v6 = this.mRecoverableKeyGenerator.generateAndStoreKey(v5, v4, v3, p1, p2); this.mApplicationKeyStorage.setSymmetricKeyEntry(v4, v3, p1, v6); String v8 = p0.getAlias(v4, v3, p1); return v8;",String v1 = this.mRecoverableKeyStoreManager.getKey(p1); return v1;,0.8438516855239868
setLong(Ljava/lang/String;JI)V,setString(Ljava/lang/String;Ljava/lang/String;I)V,"this.mStorage.setLong(p1, p2, p3); p0.setString(p1, v1, p3); p0.writeKeyValue(p1, p2, p3);","this.mStorage.setString(p1, p2, p3); p0.writeKeyValue(p1, p2, p3); SQLiteDatabase v1 = this.mOpenHelper.getWritableDatabase(); p0.writeKeyValue(v1, p1, p2, p3);",0.8488759398460388
setLong(Ljava/lang/String;JI)V,getLong(Ljava/lang/String;JI)J,"this.mStorage.setLong(p1, p2, p3); p0.setString(p1, v1, p3); p0.writeKeyValue(p1, p2, p3);","long v2 = this.mStorage.getLong(p1, p2, p3); return v2;",0.8038596510887146
removeKey(Ljava/lang/String;)V,getKey(Ljava/lang/String;)Ljava/lang/String;,public void removeKey(String p1){ this.mRecoverableKeyStoreManager.removeKey(p1);,String v1 = this.mRecoverableKeyStoreManager.getKey(p1); return v1;,0.8105447292327881
removeKey(Ljava/lang/String;)V,setRecoveryStatus(Ljava/lang/String;I)V,"p0.checkRecoverKeyStorePermission(); boolean v5 = this.mDatabase.removeKey(v3, p1); this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);","this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2); p0.checkRecoverKeyStorePermission(); int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);",0.8004450798034668
unregisterWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,registerWeakEscrowTokenRemovedListener(Lcom/android/internal/widget/IWeakEscrowTokenRemovedListener;)Z,boolean v3 = this.mSpManager.unregisterWeakEscrowTokenRemovedListener(p1); return v3;,boolean v3 = this.mSpManager.registerWeakEscrowTokenRemovedListener(p1); return v3;,0.9843965768814087
setString(Ljava/lang/String;Ljava/lang/String;I)V,setLong(Ljava/lang/String;JI)V,"this.mStorage.setString(p1, p2, p3); p0.writeKeyValue(p1, p2, p3); SQLiteDatabase v1 = this.mOpenHelper.getWritableDatabase(); p0.writeKeyValue(v1, p1, p2, p3);","this.mStorage.setLong(p1, p2, p3); p0.setString(p1, v1, p3); p0.writeKeyValue(p1, p2, p3);",0.8488759398460388
setRecoverySecretTypes([I)V,getRecoverySecretTypes()[I,"SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase(); Cursor v4 = v1.query(""recovery_service_metadata"", v1, ""user_id = ? AND uid = ?"", v1, 0, 0, 0); [I v11 = new [I(v11.length); return v11;","SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase(); String v2 = Integer.toString(p1); String v3 = Integer.toString(p2); Cursor v4 = v1.query(""recovery_service_metadata"", new String[] {""secret_types""}, ""user_id = ? AND uid = ?"", new String[] {v2, v3}, 0, 0, 0); int v7 = v4.getColumnIndexOrThrow(""secret_types""); String v9 = v4.getString(v7); [I v11 = new [I(v11.length);",0.944584846496582
setRecoverySecretTypes([I)V,getRecoverySecretTypes()[I,"Object v2 = Objects.requireNonNull(p1, ""secretTypes is null""); int v3 = UserHandle.getCallingUserId(); int v4 = Binder.getCallingUid(); [I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4); boolean v6 = Arrays.equals(p1, v5); long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);","int v2 = UserHandle.getCallingUserId(); int v3 = Binder.getCallingUid(); [I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3); return v4;",0.9059246182441711
getCredentialType(I)I,getBoolean(Ljava/lang/String;ZI)Z,"boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1); long v2 = p0.getSyntheticPasswordHandleLocked(p1); int v3 = this.mSpManager.getCredentialType(v2, p1);","int v3 = p0.getCredentialTypeInternal(p3); boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p3); long v2 = p0.getSyntheticPasswordHandleLocked(p3); int v3 = this.mSpManager.getCredentialType(v2, p3); int v4 = p0.getKeyguardStoredQuality(p3); int v5 = LockSettingsService.pinOrPasswordQualityToCredentialType(v4); return v5;",0.8936920166015625
getCredentialType(I)I,getHashFactor(Lcom/android/internal/widget/LockscreenCredential;I)[B,"boolean v1 = p0.isSyntheticPasswordBasedCredentialLocked(p1); long v2 = p0.getSyntheticPasswordHandleLocked(p1); int v3 = this.mSpManager.getCredentialType(v2, p1);","LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2); boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2); long v5 = p0.getSyntheticPasswordHandleLocked(p2); IGateKeeperService v6 = p0.getGateKeeperService(); SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0); byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();",0.8474336862564087
recoverKeyChainSnapshot(Ljava/lang/String;[BLjava/util/List;)Ljava/util/Map;,No similar EPs with similarity > 0.8,,,
unregisterStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,No similar EPs with similarity > 0.8,,,
verifyGatekeeperPasswordHandle(JJI)Lcom/android/internal/widget/VerifyCredentialResponse;,No similar EPs with similarity > 0.8,,,
isOemUnlockAllowed()Z,setOemUnlockEnabled(Z)V,"OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction); p1.setPersistentDataBlockOemUnlockAllowedBit(p2); Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class); v1.forceOemUnlockEnabled(p1);","PersistentDataBlockService.-$$Nest$mdoSetOemUnlockEnabledLocked(this.this$0, p1); public void doSetOemUnlockEnabledLocked(boolean p1){ FileChannel v1 = p0.getBlockOutputChannel(); long v2 = p0.getBlockDeviceSize(); FileChannel v3 = v1.position((v2 - 1)); SystemProperties.set(""sys.oem_unlock_allowed"", phiInstruction);",0.9158771634101868
isOemUnlockAllowed()Z,getOemUnlockEnabled()Z,"OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction); p1.setPersistentDataBlockOemUnlockAllowedBit(p2); Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class); v1.forceOemUnlockEnabled(p1);",boolean v2 = PersistentDataBlockService.-$$Nest$mdoGetOemUnlockEnabled(this.this$0); public boolean -$$Nest$mdoGetOemUnlockEnabled(PersistentDataBlockService p1){ boolean v1 = p1.doGetOemUnlockEnabled(); public boolean doGetOemUnlockEnabled(){ return 0; return v2;,0.8596096634864807
isOemUnlockAllowedByCarrier()Z,setOemUnlockAllowedByCarrier(Z[B)V,OemLockService.-$$Nest$menforceManageCarrierOemUnlockPermission(this.this$0); long v2 = Binder.clearCallingIdentity(); OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); boolean v4 = v3.isOemUnlockAllowedByCarrier(); Binder.restoreCallingIdentity(v2); return v4;,"OemLockService.-$$Nest$menforceManageCarrierOemUnlockPermission(this.this$0); OemLockService.-$$Nest$menforceUserIsAdmin(this.this$0); long v3 = Binder.clearCallingIdentity(); OemLock v4 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); v4.setOemUnlockAllowedByCarrier(p1, p2); Binder.restoreCallingIdentity(v3);",0.9564201235771179
isOemUnlockAllowedByCarrier()Z,isOemUnlockAllowedByUser()Z,OemLockService.-$$Nest$menforceManageCarrierOemUnlockPermission(this.this$0); long v2 = Binder.clearCallingIdentity(); OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); boolean v4 = v3.isOemUnlockAllowedByCarrier(); Binder.restoreCallingIdentity(v2); return v4;,OemLockService.-$$Nest$menforceManageUserOemUnlockPermission(this.this$0); OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); boolean v4 = v3.isOemUnlockAllowedByDevice(); return v4;,0.8147966861724854
isDeviceOemUnlocked()Z,No similar EPs with similarity > 0.8,,,
setOemUnlockAllowedByCarrier(Z[B)V,isOemUnlockAllowedByCarrier()Z,"OemLockService.-$$Nest$menforceManageCarrierOemUnlockPermission(this.this$0); OemLockService.-$$Nest$menforceUserIsAdmin(this.this$0); long v3 = Binder.clearCallingIdentity(); OemLock v4 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); v4.setOemUnlockAllowedByCarrier(p1, p2); Binder.restoreCallingIdentity(v3);",OemLockService.-$$Nest$menforceManageCarrierOemUnlockPermission(this.this$0); long v2 = Binder.clearCallingIdentity(); OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); boolean v4 = v3.isOemUnlockAllowedByCarrier(); Binder.restoreCallingIdentity(v2); return v4;,0.9564201235771179
setOemUnlockAllowedByCarrier(Z[B)V,isOemUnlockAllowedByUser()Z,"OemLockService.-$$Nest$menforceManageCarrierOemUnlockPermission(this.this$0); OemLockService.-$$Nest$menforceUserIsAdmin(this.this$0); long v3 = Binder.clearCallingIdentity(); OemLock v4 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); v4.setOemUnlockAllowedByCarrier(p1, p2); Binder.restoreCallingIdentity(v3);",OemLockService.-$$Nest$menforceManageUserOemUnlockPermission(this.this$0); OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); boolean v4 = v3.isOemUnlockAllowedByDevice(); return v4;,0.8062117695808411
isOemUnlockAllowedByUser()Z,isOemUnlockAllowedByCarrier()Z,OemLockService.-$$Nest$menforceManageUserOemUnlockPermission(this.this$0); OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); boolean v4 = v3.isOemUnlockAllowedByDevice(); return v4;,OemLockService.-$$Nest$menforceManageCarrierOemUnlockPermission(this.this$0); long v2 = Binder.clearCallingIdentity(); OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); boolean v4 = v3.isOemUnlockAllowedByCarrier(); Binder.restoreCallingIdentity(v2); return v4;,0.8147966861724854
isOemUnlockAllowedByUser()Z,setOemUnlockAllowedByCarrier(Z[B)V,OemLockService.-$$Nest$menforceManageUserOemUnlockPermission(this.this$0); OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); boolean v4 = v3.isOemUnlockAllowedByDevice(); return v4;,"OemLockService.-$$Nest$menforceManageCarrierOemUnlockPermission(this.this$0); OemLockService.-$$Nest$menforceUserIsAdmin(this.this$0); long v3 = Binder.clearCallingIdentity(); OemLock v4 = OemLockService.-$$Nest$fgetmOemLock(this.this$0); v4.setOemUnlockAllowedByCarrier(p1, p2); Binder.restoreCallingIdentity(v3);",0.8062117695808411
setOemUnlockAllowedByUser(Z)V,No similar EPs with similarity > 0.8,,,
getLockName()Ljava/lang/String;,No similar EPs with similarity > 0.8,,,
setOemUnlockEnabled(Z)V,isOemUnlockAllowed()Z,"PersistentDataBlockService.-$$Nest$mdoSetOemUnlockEnabledLocked(this.this$0, p1); public void doSetOemUnlockEnabledLocked(boolean p1){ FileChannel v1 = p0.getBlockOutputChannel(); long v2 = p0.getBlockDeviceSize(); FileChannel v3 = v1.position((v2 - 1)); SystemProperties.set(""sys.oem_unlock_allowed"", phiInstruction);","OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction); p1.setPersistentDataBlockOemUnlockAllowedBit(p2); Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class); v1.forceOemUnlockEnabled(p1);",0.9158771634101868
setOemUnlockEnabled(Z)V,getOemUnlockEnabled()Z,"PersistentDataBlockService.-$$Nest$mdoSetOemUnlockEnabledLocked(this.this$0, p1); public void doSetOemUnlockEnabledLocked(boolean p1){ FileChannel v1 = p0.getBlockOutputChannel(); long v2 = p0.getBlockDeviceSize(); FileChannel v3 = v1.position((v2 - 1)); SystemProperties.set(""sys.oem_unlock_allowed"", phiInstruction);",boolean v2 = PersistentDataBlockService.-$$Nest$mdoGetOemUnlockEnabled(this.this$0); public boolean -$$Nest$mdoGetOemUnlockEnabled(PersistentDataBlockService p1){ boolean v1 = p1.doGetOemUnlockEnabled(); public boolean doGetOemUnlockEnabled(){ return 0; return v2;,0.844541072845459
getMaximumDataBlockSize()J,No similar EPs with similarity > 0.8,,,
write([B)I,No similar EPs with similarity > 0.8,,,
getDataBlockSize()I,No similar EPs with similarity > 0.8,,,
getOemUnlockEnabled()Z,isOemUnlockAllowed()Z,boolean v2 = PersistentDataBlockService.-$$Nest$mdoGetOemUnlockEnabled(this.this$0); public boolean -$$Nest$mdoGetOemUnlockEnabled(PersistentDataBlockService p1){ boolean v1 = p1.doGetOemUnlockEnabled(); public boolean doGetOemUnlockEnabled(){ return 0; return v2;,"OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction); p1.setPersistentDataBlockOemUnlockAllowedBit(p2); Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class); v1.forceOemUnlockEnabled(p1);",0.8596096634864807
getOemUnlockEnabled()Z,setOemUnlockEnabled(Z)V,boolean v2 = PersistentDataBlockService.-$$Nest$mdoGetOemUnlockEnabled(this.this$0); public boolean -$$Nest$mdoGetOemUnlockEnabled(PersistentDataBlockService p1){ boolean v1 = p1.doGetOemUnlockEnabled(); public boolean doGetOemUnlockEnabled(){ return 0; return v2;,"PersistentDataBlockService.-$$Nest$mdoSetOemUnlockEnabledLocked(this.this$0, p1); public void doSetOemUnlockEnabledLocked(boolean p1){ FileChannel v1 = p0.getBlockOutputChannel(); long v2 = p0.getBlockDeviceSize(); FileChannel v3 = v1.position((v2 - 1)); SystemProperties.set(""sys.oem_unlock_allowed"", phiInstruction);",0.844541072845459
getPersistentDataPackageName()Ljava/lang/String;,No similar EPs with similarity > 0.8,,,
wipe()V,No similar EPs with similarity > 0.8,,,
hasFrpCredentialHandle()Z,No similar EPs with similarity > 0.8,,,
read()[B,No similar EPs with similarity > 0.8,,,
getFlashLockState()I,No similar EPs with similarity > 0.8,,,
onApplicationActive(Ljava/lang/String;I)V,removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2); v3.resetRateLimitingForCommandLineNoSaving();","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); v4.adjustRanks(); p0.packageShortcutsChanged(v4, phiInstruction, phiInstruction);",0.8449288010597229
onApplicationActive(Ljava/lang/String;I)V,hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z,"ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2); v3.resetRateLimitingForCommandLineNoSaving();","ShortcutPackage v4 = p0.getPackageShortcutsLocked(p2, p3); boolean v5 = v4.hasShareTargets(); return v5;",0.8449105024337769
getShareTargets(Ljava/lang/String;Landroid/content/IntentFilter;I)Landroid/content/pm/ParceledListSlice;,reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V,public void throwIfUserLockedL(int p1){ boolean v1 = p0.isUserUnlockedL(p1);,p0.throwIfUserLockedL(p3); boolean v1 = p0.isUserUnlockedL(p1);,0.8301826119422913
applyRestore([BI)V,No similar EPs with similarity > 0.8,,,
getBackupPayload(I)[B,onBiometricError(III)V,,,1.0000001192092896
getBackupPayload(I)[B,onNotificationExpansionChanged(Ljava/lang/String;ZZI)V,,,1.0000001192092896
getShortcuts(Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;,removeLongLivedShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"ParceledListSlice v4 = p0.getShortcutsWithQueryLocked(p1, p3, 9, v2); return v4; ShortcutPackage v2 = p0.getPackageShortcutsForPublisherLocked(p1, p2); v2.findAll(v0, p4, p3); List v4 = p0.setReturnedByServer(v0);","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.8153008818626404
getShortcuts(Ljava/lang/String;II)Landroid/content/pm/ParceledListSlice;,disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,"ParceledListSlice v4 = p0.getShortcutsWithQueryLocked(p1, p3, 9, v2); return v4; ShortcutPackage v2 = p0.getPackageShortcutsForPublisherLocked(p1, p2); v2.findAll(v0, p4, p3); List v4 = p0.setReturnedByServer(v0);","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.8134908676147461
enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V,removeAllDynamicShortcuts(Ljava/lang/String;I)V,"int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);","int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);",1.0000001192092896
enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V,disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,"p0.verifyCaller(p1, p3); Object v2 = Objects.requireNonNull(p2, ""shortcutIds must be provided""); p0.throwIfUserLockedL(p3); ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);","Object v2 = Objects.requireNonNull(p2, ""shortcutIds must be provided""); p0.throwIfUserLockedL(p5); ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5);",0.9611727595329285
removeAllDynamicShortcuts(Ljava/lang/String;I)V,enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);","int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);",1.0000001192092896
removeAllDynamicShortcuts(Ljava/lang/String;I)V,removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);","p0.verifyCaller(p1, p3); int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);",0.9302960634231567
getRateLimitResetTime(Ljava/lang/String;I)J,getIconMaxDimensions(Ljava/lang/String;I)I,"int v5 = p0.injectGetPackageUid(p1, p2); long v1 = p0.injectClearCallingIdentity(); int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2); p0.injectRestoreCallingIdentity(v1);","int v5 = p0.injectGetPackageUid(p1, p2); long v1 = p0.injectClearCallingIdentity(); int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);",0.9773979187011719
getRateLimitResetTime(Ljava/lang/String;I)J,getMaxShortcutCountPerActivity(Ljava/lang/String;I)I,"int v5 = p0.injectGetPackageUid(p1, p2); long v1 = p0.injectClearCallingIdentity(); int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2); p0.injectRestoreCallingIdentity(v1);","int v5 = p0.injectGetPackageUid(p1, p2); int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);",0.9216465353965759
hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z,onApplicationActive(Ljava/lang/String;I)V,"ShortcutPackage v4 = p0.getPackageShortcutsLocked(p2, p3); boolean v5 = v4.hasShareTargets(); return v5;","ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2); v3.resetRateLimitingForCommandLineNoSaving();",0.8449105024337769
hasShareTargets(Ljava/lang/String;Ljava/lang/String;I)Z,disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,"ShortcutPackage v4 = p0.getPackageShortcutsLocked(p2, p3); boolean v5 = v4.hasShareTargets(); return v5;","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.8025898933410645
disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,removeLongLivedShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.9980810284614563
disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"Object v2 = Objects.requireNonNull(p2, ""shortcutIds must be provided""); p0.throwIfUserLockedL(p5); ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5);","p0.verifyCaller(p1, p3); Object v2 = Objects.requireNonNull(p2, ""shortcutIds must be provided""); p0.throwIfUserLockedL(p3); ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);",0.9611727595329285
getRemainingCallCount(Ljava/lang/String;I)I,disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,"ShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p2); int v7 = v6.getApiCallCount(v4); return (this.mMaxUpdatesPerInterval - v7);","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.8419172763824463
getRemainingCallCount(Ljava/lang/String;I)I,removeLongLivedShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"ShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p2); int v7 = v6.getApiCallCount(v4); return (this.mMaxUpdatesPerInterval - v7);","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.8399849534034729
pushDynamicShortcut(Ljava/lang/String;Landroid/content/pm/ShortcutInfo;I)V,disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,"ShortcutPackage v5 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v5.ensureNotImmutable(v6, 1); v5.clearAllImplicitRanks(); p2.setImplicitRank(0); boolean v16 = v5.pushDynamicShortcut(p2, v2);","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.9198773503303528
pushDynamicShortcut(Ljava/lang/String;Landroid/content/pm/ShortcutInfo;I)V,removeLongLivedShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"ShortcutPackage v5 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v5.ensureNotImmutable(v6, 1); v5.clearAllImplicitRanks(); p2.setImplicitRank(0); boolean v16 = v5.pushDynamicShortcut(p2, v2);","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.9182133078575134
isRequestPinItemSupported(II)Z,No similar EPs with similarity > 0.8,,,
removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V,reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V,"p0.verifyCaller(p1, p3); int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);","p0.verifyCaller(p1, p3); int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);",1.0
removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V,disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,"ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); v4.adjustRanks(); p0.packageShortcutsChanged(v4, phiInstruction, phiInstruction);","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.9585101008415222
resetThrottling()V,No similar EPs with similarity > 0.8,,,
reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V,removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"p0.verifyCaller(p1, p3); int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);","p0.verifyCaller(p1, p3); int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);",1.0
reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V,enableShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"p0.verifyCaller(p1, p3); int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);","int v5 = p0.injectGetPackageUid(p1, p2); boolean v6 = p0.isEphemeralApp(p1, p2);",0.9302960634231567
getIconMaxDimensions(Ljava/lang/String;I)I,getMaxShortcutCountPerActivity(Ljava/lang/String;I)I,"boolean v6 = p0.isEphemeralApp(p1, p2); ApplicationInfo v1 = p0.getApplicationInfo(p1, p2); boolean v2 = ShortcutService.isEphemeralApp(v1);","boolean v6 = p0.isEphemeralApp(p1, p2); ApplicationInfo v1 = p0.getApplicationInfo(p1, p2); boolean v2 = ShortcutService.isEphemeralApp(v1);",1.0000001192092896
getIconMaxDimensions(Ljava/lang/String;I)I,getRateLimitResetTime(Ljava/lang/String;I)J,"int v5 = p0.injectGetPackageUid(p1, p2); long v1 = p0.injectClearCallingIdentity(); int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);","int v5 = p0.injectGetPackageUid(p1, p2); long v1 = p0.injectClearCallingIdentity(); int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2); p0.injectRestoreCallingIdentity(v1);",0.9773979187011719
getMaxShortcutCountPerActivity(Ljava/lang/String;I)I,getIconMaxDimensions(Ljava/lang/String;I)I,"boolean v6 = p0.isEphemeralApp(p1, p2); ApplicationInfo v1 = p0.getApplicationInfo(p1, p2); boolean v2 = ShortcutService.isEphemeralApp(v1);","boolean v6 = p0.isEphemeralApp(p1, p2); ApplicationInfo v1 = p0.getApplicationInfo(p1, p2); boolean v2 = ShortcutService.isEphemeralApp(v1);",1.0000001192092896
getMaxShortcutCountPerActivity(Ljava/lang/String;I)I,getIconMaxDimensions(Ljava/lang/String;I)I,"int v5 = p0.injectGetPackageUid(p1, p2); int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);","int v5 = p0.injectGetPackageUid(p1, p2); long v1 = p0.injectClearCallingIdentity(); int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);",0.9622329473495483
removeLongLivedShortcuts(Ljava/lang/String;Ljava/util/List;I)V,disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V,"ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();",0.9980810284614563
removeLongLivedShortcuts(Ljava/lang/String;Ljava/util/List;I)V,removeDynamicShortcuts(Ljava/lang/String;Ljava/util/List;I)V,"ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); int v6 = p2.size(); v4.adjustRanks();","ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3); v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1); v4.adjustRanks(); p0.packageShortcutsChanged(v4, phiInstruction, phiInstruction);",0.9581443667411804
onReceive(Landroid/content/Context;Landroid/content/Intent;)V,No similar EPs with similarity > 0.8,,,
getCecSettingStringValue(Ljava/lang/String;)Ljava/lang/String;,No similar EPs with similarity > 0.8,,,
getPhysicalAddress()I,No similar EPs with similarity > 0.8,,,
removeCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,"boolean v1 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p1); Object v2 = this.mHdmiCecSettingChangeListenerRecords.get(p1); boolean v3 = v2.unregister(p2); this.mHdmiCecConfig.removeChangeListener(p1, this.mSettingChangeListener);",boolean v1 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p1); Object v2 = this.mHdmiCecSettingChangeListenerRecords.get(p1); boolean v3 = v2.register(p2);,0.9238696098327637
removeCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,"boolean v1 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p1); Object v2 = this.mHdmiCecSettingChangeListenerRecords.get(p1); boolean v3 = v2.unregister(p2); this.mHdmiCecConfig.removeChangeListener(p1, this.mSettingChangeListener);","boolean v1 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p1); RemoteCallbackList v1 = new RemoteCallbackList(); Object v3 = this.mHdmiCecSettingChangeListenerRecords.put(p1, v1); this.mHdmiCecConfig.registerChangeListener(p1, this.mSettingChangeListener); boolean v6 = v5.register(p2);",0.9130552411079407
removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,setProhibitMode(Z)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;,canChangeSystemAudioMode()Z,HdmiDeviceInfo v9 = this.mHdmiCecNetwork.getSafeDeviceInfoByPath(v8); int v8 = v7.getActivePath(); HdmiCecLocalDeviceTv v7 = p0.tv(); HdmiCecLocalDeviceTv v6 = p0.tv(); return phiInstruction;,boolean v3 = v2.hasSystemAudioDevice(); HdmiDeviceInfo v1 = p0.getSafeAvrDeviceInfo(); return phiInstruction;,0.8405741453170776
getSystemAudioMode()Z,removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,0.9044051170349121
getSystemAudioMode()Z,setProhibitMode(Z)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,0.9044051170349121
getSupportedTypes()[I,No similar EPs with similarity > 0.8,,,
removeHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,getSystemAudioMode()Z,this.this$0.removeHdmiControlVolumeControlStatusChangeListener(p1); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,0.8359090685844421
removeHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,this.this$0.removeHdmiControlVolumeControlStatusChangeListener(p1); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,0.8261942863464355
getMessageHistorySize()I,No similar EPs with similarity > 0.8,,,
setSystemAudioMute(Z)V,startOneTouchRecord(I[B)V,"HdmiControlService$BinderService$13 v1 = new HdmiControlService$BinderService$13(p0,p1); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$17 v1 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v1);",0.9870809316635132
setSystemAudioMute(Z)V,askRemoteDeviceToBecomeActiveSource(I)V,"HdmiControlService$BinderService$13 v1 = new HdmiControlService$BinderService$13(p0,p1); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$11 v1 = new HdmiControlService$BinderService$11(p0,p1); this.this$0.runOnServiceThread(v1);",0.986514151096344
removeSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,"public void removeSystemAudioModeChangeListener(IHdmiSystemAudioModeChangeListener p1){ HdmiControlService.-$$Nest$minitBinderCall(this.this$0); HdmiControlService.-$$Nest$mremoveSystemAudioModeChangeListener(this.this$0, p1); public void -$$Nest$mremoveSystemAudioModeChangeListener(HdmiControlService p1, IHdmiSystemAudioModeChangeListener p2){ p1.removeSystemAudioModeChangeListener(p2); Iterator v1 = this.mSystemAudioModeChangeListenerRecords.iterator(); boolean v2 = v1.hasNext(); Object v3 = v1.next(); IHdmiSystemAudioModeChangeListener v4 = HdmiControlService$SystemAudioModeChangeListenerRecord.-$$Nest$fgetmListener(v3); IBinder v5 = v4.asBinder(); IBinder v6 = p1.asBinder(); boolean v7 = v6.unlinkToDeath(v3, 0); boolean v8 = this.mSystemAudioModeChangeListenerRecords.remove(v3);","HdmiControlService.-$$Nest$maddSystemAudioModeChangeListner(this.this$0, p1); p1.addSystemAudioModeChangeListner(p2); HdmiControlService$SystemAudioModeChangeListenerRecord v0 = new HdmiControlService$SystemAudioModeChangeListenerRecord(p0,p1);",0.8326511383056641
getAllowedCecSettingStringValues(Ljava/lang/String;)Ljava/util/List;,getCecSettingIntValue(Ljava/lang/String;)I,"HdmiCecConfig v3 = this.this$0.getHdmiCecConfig(); List v4 = v3.getAllowedStringValues(p1); HdmiCecConfig$Setting v1 = p0.getSetting(p1); String v2 = v1.getValueType(); boolean v3 = v2.equals(""string""); ArrayList v3 = new ArrayList(); List v5 = v1.getAllowedValues(); return v3;","HdmiCecConfig$Setting v1 = p0.getSetting(p1); String v2 = v1.getValueType(); HdmiCecConfig$Value v10 = v1.getDefaultValue(); Integer v11 = v10.getIntValue(); int v12 = v11.intValue(); String v13 = Integer.toString(v12); String v14 = p0.retrieveValue(v1, v13); int v15 = Integer.parseInt(v14); return v15;",0.8650744557380676
getAllowedCecSettingStringValues(Ljava/lang/String;)Ljava/util/List;,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,"HdmiCecConfig v3 = this.this$0.getHdmiCecConfig(); List v4 = v3.getAllowedStringValues(p1); HdmiCecConfig$Setting v1 = p0.getSetting(p1); String v2 = v1.getValueType(); boolean v3 = v2.equals(""string""); ArrayList v3 = new ArrayList(); List v5 = v1.getAllowedValues(); return v3;","HdmiCecConfig$Setting v1 = p0.getSetting(p1); boolean v2 = v1.getUserConfigurable(); String v3 = v1.getValueType(); List v5 = p0.getAllowedStringValues(p1); p0.storeValue(v1, p2);",0.8335242867469788
powerOffRemoteDevice(II)V,askRemoteDeviceToBecomeActiveSource(I)V,"HdmiControlService$BinderService$9 v1 = new HdmiControlService$BinderService$9(p0,p1,p2); this.this$0.runOnServiceThread(v1); p1.initBinderCall(); p0.enforceAccessPermission();","HdmiControlService$BinderService$11 v1 = new HdmiControlService$BinderService$11(p0,p1); this.this$0.runOnServiceThread(v1);",0.9354644417762756
powerOffRemoteDevice(II)V,setArcMode(Z)V,"HdmiControlService$BinderService$9 v1 = new HdmiControlService$BinderService$9(p0,p1,p2); this.this$0.runOnServiceThread(v1); p1.initBinderCall(); p0.enforceAccessPermission();",HdmiControlService$BinderService$14 v1 = new HdmiControlService$BinderService$14(p0); this.this$0.runOnServiceThread(v1);,0.9291694164276123
setProhibitMode(Z)V,removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setProhibitMode(Z)V,setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V,sendMhlVendorCommand(III[B)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); this.this$0.enforceAccessPermission();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission();,0.8882113695144653
oneTouchPlay(Landroid/hardware/hdmi/IHdmiControlCallback;)V,getSystemAudioMode()Z,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); this.this$0.enforceAccessPermission();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,0.8863862752914429
startTimerRecording(II[B)V,clearTimerRecording(II[B)V,"HdmiControlService$BinderService$19 v1 = new HdmiControlService$BinderService$19(p0,p1,p2,p3); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$20 v1 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v1);",0.9917587041854858
startTimerRecording(II[B)V,startOneTouchRecord(I[B)V,"HdmiControlService$BinderService$19 v1 = new HdmiControlService$BinderService$19(p0,p1,p2,p3); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$17 v1 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v1);",0.9891713857650757
powerOnRemoteDevice(II)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
powerOnRemoteDevice(II)V,sendVendorCommand(II[BZ)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,getDeviceList()Ljava/util/List;,p0.enforceAccessPermission();,p0.enforceAccessPermission();,0.9999999403953552
portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,"HdmiControlService$BinderService$2 v1 = new HdmiControlService$BinderService$2(p0,p2,p1); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$1 v1 = new HdmiControlService$BinderService$1(p0,p2,p1); this.this$0.runOnServiceThread(v1);",0.9972963333129883
shouldHandleTvPowerKey()Z,sendStandby(II)V,public void initBinderCall(){ p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid(); },p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,0.9006586074829102
shouldHandleTvPowerKey()Z,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,public void initBinderCall(){ p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid(); },p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,0.9006586074829102
sendStandby(II)V,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
sendStandby(II)V,setStandbyMode(Z)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,sendVendorCommand(II[BZ)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setSystemAudioModeOnForAudioOnlySource()V,setArcMode(Z)V,HdmiControlService$BinderService$24 v1 = new HdmiControlService$BinderService$24(p0); this.this$0.runOnServiceThread(v1);,HdmiControlService$BinderService$14 v1 = new HdmiControlService$BinderService$14(p0); this.this$0.runOnServiceThread(v1);,0.9837446212768555
setSystemAudioModeOnForAudioOnlySource()V,stopOneTouchRecord(I)V,HdmiControlService$BinderService$24 v1 = new HdmiControlService$BinderService$24(p0); this.this$0.runOnServiceThread(v1);,"HdmiControlService$BinderService$18 v1 = new HdmiControlService$BinderService$18(p0,p1); this.this$0.runOnServiceThread(v1);",0.979724109172821
sendVendorCommand(II[BZ)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
sendVendorCommand(II[BZ)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
getAllowedCecSettingIntValues(Ljava/lang/String;)[I,setCecSettingIntValue(Ljava/lang/String;I)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); long v2 = Binder.clearCallingIdentity(); HdmiCecConfig v3 = this.this$0.getHdmiCecConfig(); List v4 = v3.getAllowedIntValues(p1); Stream v5 = v4.stream(); HdmiControlService$BinderService$$ExternalSyntheticLambda0 v6 = new HdmiControlService$BinderService$$ExternalSyntheticLambda0(); IntStream v7 = v6.mapToInt(v6); [I v8 = v7.toArray(); return v8;,"HdmiControlService.-$$Nest$minitBinderCall(this.this$0); long v2 = Binder.clearCallingIdentity(); HdmiCecConfig v3 = this.this$0.getHdmiCecConfig(); v3.setIntValue(p1, p2);",0.8620955944061279
toggleAndFollowTvPower()V,setArcMode(Z)V,HdmiControlService$BinderService$6 v8 = new HdmiControlService$BinderService$6(p0); this.this$0.runOnServiceThread(v8);,HdmiControlService$BinderService$14 v1 = new HdmiControlService$BinderService$14(p0); this.this$0.runOnServiceThread(v1);,0.9747803211212158
toggleAndFollowTvPower()V,setSystemAudioMute(Z)V,HdmiControlService$BinderService$6 v8 = new HdmiControlService$BinderService$6(p0); this.this$0.runOnServiceThread(v8);,"HdmiControlService$BinderService$13 v1 = new HdmiControlService$BinderService$13(p0,p1); this.this$0.runOnServiceThread(v1);",0.9681273698806763
addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
addHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setSystemAudioVolume(III)V,sendMhlVendorCommand(III[B)V,"this.this$0.runOnServiceThread(v1); HdmiControlService$BinderService$12 v1 = new HdmiControlService$BinderService$12(p0,p1,p2,p3);","this.this$0.runOnServiceThread(v1); HdmiControlService$BinderService$21 v1 = new HdmiControlService$BinderService$21(p0,p1,p2,p3,p4);",0.9941360950469971
setSystemAudioVolume(III)V,clearTimerRecording(II[B)V,"this.this$0.runOnServiceThread(v1); HdmiControlService$BinderService$12 v1 = new HdmiControlService$BinderService$12(p0,p1,p2,p3);","HdmiControlService$BinderService$20 v1 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v1);",0.9549793004989624
clearTimerRecording(II[B)V,sendVendorCommand(II[BZ)V,"HdmiControlService$BinderService$20 v1 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$15 v1 = new HdmiControlService$BinderService$15(p0,p1,p4,p2,p3); this.this$0.runOnServiceThread(v1);",0.9928556680679321
clearTimerRecording(II[B)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$20 v1 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$10 v1 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v1);",0.9925484657287598
removeHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,addHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,"HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid(); Iterator v1 = this.mHdmiControlStatusChangeListenerRecords.iterator(); boolean v2 = v1.hasNext(); Object v3 = v1.next(); IHdmiControlStatusChangeListener v4 = HdmiControlService$HdmiControlStatusChangeListenerRecord.-$$Nest$fgetmListener(v3); IBinder v5 = v4.asBinder(); boolean v8 = v7.unlinkToDeath(v3, 0); boolean v9 = this.mHdmiControlStatusChangeListenerRecords.remove(v3);","HdmiControlService$HdmiControlStatusChangeListenerRecord v0 = new HdmiControlService$HdmiControlStatusChangeListenerRecord(p0, p1); IBinder v2 = p1.asBinder(); v2.linkToDeath(v0, 0); boolean v4 = this.mHdmiControlStatusChangeListenerRecords.add(v0); HdmiControlService$9 v4 = new HdmiControlService$9(p0, v0, p1); p0.runOnServiceThread(v4);",0.872092068195343
removeHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,"HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid(); Iterator v1 = this.mHdmiControlStatusChangeListenerRecords.iterator(); boolean v2 = v1.hasNext(); Object v3 = v1.next(); IHdmiControlStatusChangeListener v4 = HdmiControlService$HdmiControlStatusChangeListenerRecord.-$$Nest$fgetmListener(v3); IBinder v5 = v4.asBinder(); boolean v8 = v7.unlinkToDeath(v3, 0); boolean v9 = this.mHdmiControlStatusChangeListenerRecords.remove(v3);","HdmiControlService$InputChangeListenerRecord v0 = new HdmiControlService$InputChangeListenerRecord(p0,p1); this.mInputChangeListenerRecord = v0; IBinder v2 = p1.asBinder(); v2.linkToDeath(this.mInputChangeListenerRecord, 0);",0.8221646547317505
deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,sendStandby(II)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,setStandbyMode(Z)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
addDeviceEventListener(Landroid/hardware/hdmi/IHdmiDeviceEventListener;)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
addDeviceEventListener(Landroid/hardware/hdmi/IHdmiDeviceEventListener;)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setHdmiRecordListener(Landroid/hardware/hdmi/IHdmiRecordListener;)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
askRemoteDeviceToBecomeActiveSource(I)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
askRemoteDeviceToBecomeActiveSource(I)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
reportAudioStatus(IIIZ)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
reportAudioStatus(IIIZ)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setMessageHistorySize(I)Z,No similar EPs with similarity > 0.8,,,
addVendorCommandListener(Landroid/hardware/hdmi/IHdmiVendorCommandListener;I)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
addVendorCommandListener(Landroid/hardware/hdmi/IHdmiVendorCommandListener;I)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
canChangeSystemAudioMode()Z,getSystemAudioMode()Z,boolean v3 = v2.hasSystemAudioDevice(); HdmiDeviceInfo v1 = p0.getSafeAvrDeviceInfo(); return phiInstruction;,boolean v4 = v2.isSystemAudioActivated(); boolean v5 = v3.isSystemAudioActivated(); return phiInstruction;,0.8524812459945679
canChangeSystemAudioMode()Z,getActiveSource()Landroid/hardware/hdmi/HdmiDeviceInfo;,boolean v3 = v2.hasSystemAudioDevice(); HdmiDeviceInfo v1 = p0.getSafeAvrDeviceInfo(); return phiInstruction;,HdmiDeviceInfo v9 = this.mHdmiCecNetwork.getSafeDeviceInfoByPath(v8); int v8 = v7.getActivePath(); HdmiCecLocalDeviceTv v7 = p0.tv(); HdmiCecLocalDeviceTv v6 = p0.tv(); return phiInstruction;,0.8405741453170776
sendVolumeKeyEvent(IIZ)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
sendVolumeKeyEvent(IIZ)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setCecSettingIntValue(Ljava/lang/String;I)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setCecSettingIntValue(Ljava/lang/String;I)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
addHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,"HdmiControlService$HdmiControlStatusChangeListenerRecord v0 = new HdmiControlService$HdmiControlStatusChangeListenerRecord(p0, p1); IBinder v2 = p1.asBinder(); v2.linkToDeath(v0, 0); boolean v4 = this.mHdmiControlStatusChangeListenerRecords.add(v0); HdmiControlService$9 v4 = new HdmiControlService$9(p0, v0, p1); p0.runOnServiceThread(v4);","HdmiControlService$InputChangeListenerRecord v0 = new HdmiControlService$InputChangeListenerRecord(p0,p1); this.mInputChangeListenerRecord = v0; IBinder v2 = p1.asBinder(); v2.linkToDeath(this.mInputChangeListenerRecord, 0);",0.894353985786438
addHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,removeHdmiControlStatusChangeListener(Landroid/hardware/hdmi/IHdmiControlStatusChangeListener;)V,"HdmiControlService$HdmiControlStatusChangeListenerRecord v0 = new HdmiControlService$HdmiControlStatusChangeListenerRecord(p0, p1); IBinder v2 = p1.asBinder(); v2.linkToDeath(v0, 0); boolean v4 = this.mHdmiControlStatusChangeListenerRecords.add(v0); HdmiControlService$9 v4 = new HdmiControlService$9(p0, v0, p1); p0.runOnServiceThread(v4);","HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid(); Iterator v1 = this.mHdmiControlStatusChangeListenerRecords.iterator(); boolean v2 = v1.hasNext(); Object v3 = v1.next(); IHdmiControlStatusChangeListener v4 = HdmiControlService$HdmiControlStatusChangeListenerRecord.-$$Nest$fgetmListener(v3); IBinder v5 = v4.asBinder(); boolean v8 = v7.unlinkToDeath(v3, 0); boolean v9 = this.mHdmiControlStatusChangeListenerRecords.remove(v3);",0.872092068195343
setArcMode(Z)V,askRemoteDeviceToBecomeActiveSource(I)V,HdmiControlService$BinderService$14 v1 = new HdmiControlService$BinderService$14(p0); this.this$0.runOnServiceThread(v1);,"HdmiControlService$BinderService$11 v1 = new HdmiControlService$BinderService$11(p0,p1); this.this$0.runOnServiceThread(v1);",0.9856756925582886
setArcMode(Z)V,setSystemAudioModeOnForAudioOnlySource()V,HdmiControlService$BinderService$14 v1 = new HdmiControlService$BinderService$14(p0); this.this$0.runOnServiceThread(v1);,HdmiControlService$BinderService$24 v1 = new HdmiControlService$BinderService$24(p0); this.this$0.runOnServiceThread(v1);,0.9837446212768555
addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,removeCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,boolean v1 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p1); Object v2 = this.mHdmiCecSettingChangeListenerRecords.get(p1); boolean v3 = v2.register(p2);,"boolean v1 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p1); Object v2 = this.mHdmiCecSettingChangeListenerRecords.get(p1); boolean v3 = v2.unregister(p2); this.mHdmiCecConfig.removeChangeListener(p1, this.mSettingChangeListener);",0.9238696098327637
addCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,removeCecSettingChangeListener(Ljava/lang/String;Landroid/hardware/hdmi/IHdmiCecSettingChangeListener;)V,"boolean v1 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p1); RemoteCallbackList v1 = new RemoteCallbackList(); Object v3 = this.mHdmiCecSettingChangeListenerRecords.put(p1, v1); this.mHdmiCecConfig.registerChangeListener(p1, this.mSettingChangeListener); boolean v6 = v5.register(p2);","boolean v1 = this.mHdmiCecSettingChangeListenerRecords.containsKey(p1); Object v2 = this.mHdmiCecSettingChangeListenerRecords.get(p1); boolean v3 = v2.unregister(p2); this.mHdmiCecConfig.removeChangeListener(p1, this.mSettingChangeListener);",0.9130552411079407
setStandbyMode(Z)V,sendStandby(II)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setStandbyMode(Z)V,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
addHdmiMhlVendorCommandListener(Landroid/hardware/hdmi/IHdmiMhlVendorCommandListener;)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
addHdmiMhlVendorCommandListener(Landroid/hardware/hdmi/IHdmiMhlVendorCommandListener;)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
stopOneTouchRecord(I)V,sendStandby(II)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
stopOneTouchRecord(I)V,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
getPortInfo()Ljava/util/List;,No similar EPs with similarity > 0.8,,,
getUserCecSettings()Ljava/util/List;,getCecSettingIntValue(Ljava/lang/String;)I,HdmiCecConfig v3 = this.this$0.getHdmiCecConfig(); List v4 = v3.getUserSettings();,HdmiCecConfig v3 = this.this$0.getHdmiCecConfig(); int v4 = v3.getIntValue(p1); return v4;,0.8642735481262207
sendKeyEvent(IIZ)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
sendKeyEvent(IIZ)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
startOneTouchRecord(I[B)V,powerOnRemoteDevice(II)V,"HdmiControlService$BinderService$17 v1 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$10 v1 = new HdmiControlService$BinderService$10(p0,p1,p2); this.this$0.runOnServiceThread(v1);",0.9933775663375854
startOneTouchRecord(I[B)V,clearTimerRecording(II[B)V,"HdmiControlService$BinderService$17 v1 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v1);","HdmiControlService$BinderService$20 v1 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v1);",0.9904001951217651
setSystemAudioMode(ZLandroid/hardware/hdmi/IHdmiControlCallback;)V,sendStandby(II)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setSystemAudioMode(ZLandroid/hardware/hdmi/IHdmiControlCallback;)V,deviceSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
getDeviceList()Ljava/util/List;,portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,p0.enforceAccessPermission();,p0.enforceAccessPermission();,0.9999999403953552
getDeviceList()Ljava/util/List;,registerStrongAuthTracker(Landroid/app/trust/IStrongAuthTracker;)V,p0.enforceAccessPermission();,p0.checkPasswordReadPermission();,0.8517293334007263
getCecSettingIntValue(Ljava/lang/String;)I,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,"HdmiCecConfig$Setting v1 = p0.getSetting(p1); String v2 = v1.getValueType(); HdmiCecConfig$Value v10 = v1.getDefaultValue(); Integer v11 = v10.getIntValue(); int v12 = v11.intValue(); String v13 = Integer.toString(v12); String v14 = p0.retrieveValue(v1, v13); int v15 = Integer.parseInt(v14); return v15;","HdmiCecConfig$Setting v1 = p0.getSetting(p1); boolean v2 = v1.getUserConfigurable(); String v3 = v1.getValueType(); List v5 = p0.getAllowedStringValues(p1); p0.storeValue(v1, p2);",0.8864816427230835
getCecSettingIntValue(Ljava/lang/String;)I,getAllowedCecSettingStringValues(Ljava/lang/String;)Ljava/util/List;,"HdmiCecConfig$Setting v1 = p0.getSetting(p1); String v2 = v1.getValueType(); HdmiCecConfig$Value v10 = v1.getDefaultValue(); Integer v11 = v10.getIntValue(); int v12 = v11.intValue(); String v13 = Integer.toString(v12); String v14 = p0.retrieveValue(v1, v13); int v15 = Integer.parseInt(v14); return v15;","HdmiCecConfig v3 = this.this$0.getHdmiCecConfig(); List v4 = v3.getAllowedStringValues(p1); HdmiCecConfig$Setting v1 = p0.getSetting(p1); String v2 = v1.getValueType(); boolean v3 = v2.equals(""string""); ArrayList v3 = new ArrayList(); List v5 = v1.getAllowedValues(); return v3;",0.8650744557380676
setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
setInputChangeListener(Landroid/hardware/hdmi/IHdmiInputChangeListener;)V,setProhibitMode(Z)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
sendMhlVendorCommand(III[B)V,setSystemAudioVolume(III)V,"this.this$0.runOnServiceThread(v1); HdmiControlService$BinderService$21 v1 = new HdmiControlService$BinderService$21(p0,p1,p2,p3,p4);","this.this$0.runOnServiceThread(v1); HdmiControlService$BinderService$12 v1 = new HdmiControlService$BinderService$12(p0,p1,p2,p3);",0.9941360950469971
sendMhlVendorCommand(III[B)V,toggleAndFollowTvPower()V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); -$$Nest$minitBinderCall method: p1.initBinderCall(); initBinderCall method: p0.enforceAccessPermission();,0.9603546857833862
addHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,clearTimerRecording(II[B)V,"HdmiControlService$10 v1 = new HdmiControlService$10(p0,p1); p0.runOnServiceThread(v1);","HdmiControlService$BinderService$20 v1 = new HdmiControlService$BinderService$20(p0,p1,p2,p3); this.this$0.runOnServiceThread(v1);",0.9112719297409058
addHdmiCecVolumeControlFeatureListener(Landroid/hardware/hdmi/IHdmiCecVolumeControlFeatureListener;)V,startOneTouchRecord(I[B)V,"HdmiControlService$10 v1 = new HdmiControlService$10(p0,p1); p0.runOnServiceThread(v1);","HdmiControlService$BinderService$17 v1 = new HdmiControlService$BinderService$17(p0,p1,p2); this.this$0.runOnServiceThread(v1);",0.9105618596076965
addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,removeHotplugEventListener(Landroid/hardware/hdmi/IHdmiHotplugEventListener;)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
addSystemAudioModeChangeListener(Landroid/hardware/hdmi/IHdmiSystemAudioModeChangeListener;)V,setProhibitMode(Z)V,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,HdmiControlService.-$$Nest$minitBinderCall(this.this$0); p1.initBinderCall(); p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
getInputDevices()Ljava/util/List;,No similar EPs with similarity > 0.8,,,
queryDisplayStatus(Landroid/hardware/hdmi/IHdmiControlCallback;)V,powerOnRemoteDevice(II)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
queryDisplayStatus(Landroid/hardware/hdmi/IHdmiControlCallback;)V,setCecSettingStringValue(Ljava/lang/String;Ljava/lang/String;)V,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,p0.enforceAccessPermission(); p0.setWorkSourceUidToCallingUid();,1.0
requestUninstall([BLandroid/app/timezone/ICallback;)I,requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I,"CheckToken v1 = CheckToken.fromByteArray(p1); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);","CheckToken v1 = CheckToken.fromByteArray(p1); ByteArrayInputStream v0 = new ByteArrayInputStream(p1); DataInputStream v1 = new DataInputStream(v0); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);",0.9362308979034424
requestUninstall([BLandroid/app/timezone/ICallback;)I,requestNothing([BZ)V,"CheckToken v1 = CheckToken.fromByteArray(p1); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);","CheckToken v2 = RulesManagerService.createCheckTokenOrThrow(p1); CheckToken v1 = CheckToken.fromByteArray(p1); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);",0.880966067314148
requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I,requestUninstall([BLandroid/app/timezone/ICallback;)I,"CheckToken v1 = CheckToken.fromByteArray(p1); ByteArrayInputStream v0 = new ByteArrayInputStream(p1); DataInputStream v1 = new DataInputStream(v0); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);","CheckToken v1 = CheckToken.fromByteArray(p1); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);",0.9362308979034424
requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I,requestNothing([BZ)V,"CheckToken v1 = CheckToken.fromByteArray(p1); ByteArrayInputStream v0 = new ByteArrayInputStream(p1); DataInputStream v1 = new DataInputStream(v0); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);","CheckToken v2 = RulesManagerService.createCheckTokenOrThrow(p1); CheckToken v1 = CheckToken.fromByteArray(p1); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);",0.8756322860717773
requestNothing([BZ)V,requestUninstall([BLandroid/app/timezone/ICallback;)I,"CheckToken v2 = RulesManagerService.createCheckTokenOrThrow(p1); CheckToken v1 = CheckToken.fromByteArray(p1); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);","CheckToken v1 = CheckToken.fromByteArray(p1); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);",0.880966067314148
requestNothing([BZ)V,requestInstall(Landroid/os/ParcelFileDescriptor;[BLandroid/app/timezone/ICallback;)I,"CheckToken v2 = RulesManagerService.createCheckTokenOrThrow(p1); CheckToken v1 = CheckToken.fromByteArray(p1); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);","CheckToken v1 = CheckToken.fromByteArray(p1); ByteArrayInputStream v0 = new ByteArrayInputStream(p1); DataInputStream v1 = new DataInputStream(v0); int v3 = v1.readInt(); long v4 = v1.readLong(); long v5 = v1.readLong(); CheckToken v5 = new CheckToken(v3,v5);",0.8756322860717773
getRulesState()Landroid/app/timezone/RulesState;,No similar EPs with similarity > 0.8,,,
startConsentActivity([ILjava/lang/String;)V,No similar EPs with similarity > 0.8,,,
registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,"AmbientContextManagerService.access$100(this.this$0, p2); this.mService.onRegisterObserver(p1, p2, p3);","AmbientContextManagerService.access$100(this.this$0, p2); this.mService.onRegisterObserver(p1, p2, p3);",1.0
registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,"AmbientContextManagerService.access$100(this.this$0, p2); this.mService.onRegisterObserver(p1, p2, p3);","Object v3 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3); p0.registerObserverWithCallback(p1, v5, v3);",0.8476412296295166
unregisterObserver(Ljava/lang/String;)V,registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,"AmbientContextManagerService.access$200(this.this$0, p1); p1.assertCalledByPackageOwner(p2);","AmbientContextManagerService.access$100(this.this$0, p2); this.mService.onRegisterObserver(p1, p2, p3);",0.8064783215522766
unregisterObserver(Ljava/lang/String;)V,registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,"AmbientContextManagerService.access$200(this.this$0, p1); p1.assertCalledByPackageOwner(p2);","AmbientContextManagerService.access$100(this.this$0, p2); this.mService.onRegisterObserver(p1, p2, p3);",0.8064783215522766
registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,"AmbientContextManagerService.access$100(this.this$0, p2); this.mService.onRegisterObserver(p1, p2, p3);","AmbientContextManagerService.access$100(this.this$0, p2); this.mService.onRegisterObserver(p1, p2, p3);",1.0
registerObserver(Landroid/app/ambientcontext/AmbientContextEventRequest;Landroid/app/PendingIntent;Landroid/os/RemoteCallback;)V,registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V,"Object v3 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3); p0.registerObserverWithCallback(p1, v5, v3);","AmbientContextManagerService.access$100(this.this$0, p2); this.mService.onRegisterObserver(p1, p2, p3);",0.8476412296295166
queryServiceStatus([ILjava/lang/String;Landroid/os/RemoteCallback;)V,No similar EPs with similarity > 0.8,,,
getAutoPersisting()Z,addMultimediaMessageDraft(Ljava/lang/String;Landroid/net/Uri;)Landroid/net/Uri;,IMms v1 = p1.getServiceGuarded(); return v1;,IMms v1 = p1.getServiceGuarded(); return v1;,1.0
getAutoPersisting()Z,setAutoPersisting(Ljava/lang/String;Z)V,IMms v1 = p1.getServiceGuarded(); return v1;,IMms v1 = p1.getServiceGuarded(); return v1;,1.0
importTextMessage(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;JZZ)Landroid/net/Uri;,No similar EPs with similarity > 0.8,,,
addTextMessageDraft(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;,addMultimediaMessageDraft(Ljava/lang/String;Landroid/net/Uri;)Landroid/net/Uri;,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); Uri v5 = v4.addTextMessageDraft(p1, p2, p3); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); Uri v5 = v4.addMultimediaMessageDraft(p1, p2); return v5;",0.9612409472465515
addTextMessageDraft(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;,importMultimediaMessage(Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;JZZ)Landroid/net/Uri;,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); Uri v5 = v4.addTextMessageDraft(p1, p2, p3); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); Uri v5 = v4.importMultimediaMessage(p1, p2, p3, p4, p5, p6); return v5;",0.834735095500946
downloadMessage(ILjava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;JLjava/lang/String;)V,sendMessage(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;JLjava/lang/String;)V,"Uri v11 = p0.adjustUriForUserAndGrantPermission(p4, ""android.service.carrier.CarrierMessagingService"", 3, p1); IMms v12 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); v12.downloadMessage(p1, p2, p3, v11, p5, p6, p7, p8);","Uri v11 = p0.adjustUriForUserAndGrantPermission(p3, ""android.service.carrier.CarrierMessagingService"", 1, p1); IMms v12 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); v12.sendMessage(p1, p2, v11, p4, p5, p6, p7, p8);",0.9436665773391724
deleteStoredConversation(Ljava/lang/String;J)Z,archiveStoredConversation(Ljava/lang/String;JZ)Z,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.deleteStoredConversation(p1, p2); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.archiveStoredConversation(p1, p2, p3);",0.9019594192504883
deleteStoredConversation(Ljava/lang/String;J)Z,deleteStoredMessage(Ljava/lang/String;Landroid/net/Uri;)Z,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.deleteStoredConversation(p1, p2); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.deleteStoredMessage(p1, p2); return v5;",0.8770543932914734
updateStoredMessageStatus(Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;)Z,deleteStoredMessage(Ljava/lang/String;Landroid/net/Uri;)Z,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.updateStoredMessageStatus(p1, p2, p3); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.deleteStoredMessage(p1, p2); return v5;",0.8951582312583923
updateStoredMessageStatus(Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;)Z,sendStoredMessage(ILjava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.updateStoredMessageStatus(p1, p2, p3); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); v4.sendStoredMessage(p1, p2, p3, p4, p5);",0.8911342620849609
sendMessage(ILjava/lang/String;Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/PendingIntent;JLjava/lang/String;)V,downloadMessage(ILjava/lang/String;Ljava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;JLjava/lang/String;)V,"Uri v11 = p0.adjustUriForUserAndGrantPermission(p3, ""android.service.carrier.CarrierMessagingService"", 1, p1); IMms v12 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); v12.sendMessage(p1, p2, v11, p4, p5, p6, p7, p8);","Uri v11 = p0.adjustUriForUserAndGrantPermission(p4, ""android.service.carrier.CarrierMessagingService"", 3, p1); IMms v12 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); v12.downloadMessage(p1, p2, p3, v11, p5, p6, p7, p8);",0.9436665773391724
importMultimediaMessage(Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;JZZ)Landroid/net/Uri;,addMultimediaMessageDraft(Ljava/lang/String;Landroid/net/Uri;)Landroid/net/Uri;,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); Uri v5 = v4.importMultimediaMessage(p1, p2, p3, p4, p5, p6); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); Uri v5 = v4.addMultimediaMessageDraft(p1, p2); return v5;",0.8953300714492798
importMultimediaMessage(Ljava/lang/String;Landroid/net/Uri;Ljava/lang/String;JZZ)Landroid/net/Uri;,addTextMessageDraft(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); Uri v5 = v4.importMultimediaMessage(p1, p2, p3, p4, p5, p6); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); Uri v5 = v4.addTextMessageDraft(p1, p2, p3); return v5;",0.834735095500946
addMultimediaMessageDraft(Ljava/lang/String;Landroid/net/Uri;)Landroid/net/Uri;,getAutoPersisting()Z,IMms v1 = p1.getServiceGuarded(); return v1;,IMms v1 = p1.getServiceGuarded(); return v1;,1.0
addMultimediaMessageDraft(Ljava/lang/String;Landroid/net/Uri;)Landroid/net/Uri;,setAutoPersisting(Ljava/lang/String;Z)V,IMms v1 = p1.getServiceGuarded(); return v1;,IMms v1 = p1.getServiceGuarded(); return v1;,1.0
deleteStoredMessage(Ljava/lang/String;Landroid/net/Uri;)Z,updateStoredMessageStatus(Ljava/lang/String;Landroid/net/Uri;Landroid/content/ContentValues;)Z,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.deleteStoredMessage(p1, p2); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.updateStoredMessageStatus(p1, p2, p3); return v5;",0.8951582312583923
deleteStoredMessage(Ljava/lang/String;Landroid/net/Uri;)Z,deleteStoredConversation(Ljava/lang/String;J)Z,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.deleteStoredMessage(p1, p2); return v5;","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.deleteStoredConversation(p1, p2); return v5;",0.8770543932914734
sendStoredMessage(ILjava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V,getAutoPersisting()Z,IMms v1 = p1.getServiceGuarded();,IMms v1 = p1.getServiceGuarded(); return v1;,0.9582581520080566
sendStoredMessage(ILjava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V,addMultimediaMessageDraft(Ljava/lang/String;Landroid/net/Uri;)Landroid/net/Uri;,IMms v1 = p1.getServiceGuarded();,IMms v1 = p1.getServiceGuarded(); return v1;,0.9582581520080566
archiveStoredConversation(Ljava/lang/String;JZ)Z,deleteStoredConversation(Ljava/lang/String;J)Z,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.archiveStoredConversation(p1, p2, p3);","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.deleteStoredConversation(p1, p2); return v5;",0.9019594192504883
archiveStoredConversation(Ljava/lang/String;JZ)Z,sendStoredMessage(ILjava/lang/String;Landroid/net/Uri;Landroid/os/Bundle;Landroid/app/PendingIntent;)V,"IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); boolean v5 = v4.archiveStoredConversation(p1, p2, p3);","IMms v4 = MmsServiceBroker.-$$Nest$mgetServiceGuarded(this.this$0); v4.sendStoredMessage(p1, p2, p3, p4, p5);",0.8338165283203125
setAutoPersisting(Ljava/lang/String;Z)V,getAutoPersisting()Z,IMms v1 = p1.getServiceGuarded(); return v1;,IMms v1 = p1.getServiceGuarded(); return v1;,1.0
setAutoPersisting(Ljava/lang/String;Z)V,addMultimediaMessageDraft(Ljava/lang/String;Landroid/net/Uri;)Landroid/net/Uri;,IMms v1 = p1.getServiceGuarded(); return v1;,IMms v1 = p1.getServiceGuarded(); return v1;,1.0
getLastResumedActivityUserId()I,No similar EPs with similarity > 0.8,,,
removeRootTasksInWindowingModes([I)V,removeRootTasksWithActivityTypes([I)V,"ActivityTaskManagerService.enforceTaskPermission(""removeRootTasksInWindowingModes()""); this.mRootWindowContainer.removeRootTasksInWindowingModes(p1);",this.mRootWindowContainer.removeRootTasksWithActivityTypes(p1);,0.8923709392547607
removeRootTasksInWindowingModes([I)V,setFocusedRootTask(I)V,"ActivityTaskManagerService.enforceTaskPermission(""removeRootTasksInWindowingModes()""); this.mRootWindowContainer.removeRootTasksInWindowingModes(p1);",boolean v9 = this.mRootWindowContainer.resumeFocusedTasksTopActivities(); WindowManagerService.resetPriorityAfterLockedSection();,0.8390274047851562
startSystemLockTaskMode(I)V,No similar EPs with similarity > 0.8,,,
cancelTaskWindowTransition(I)V,setPackageAskScreenCompat(Ljava/lang/String;Z)V,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,1.0000001192092896
cancelTaskWindowTransition(I)V,setLockScreenShown(ZZ)V,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,1.0000001192092896
setPackageAskScreenCompat(Ljava/lang/String;Z)V,cancelTaskWindowTransition(I)V,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,1.0000001192092896
setPackageAskScreenCompat(Ljava/lang/String;Z)V,setLockScreenShown(ZZ)V,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,1.0000001192092896
setRunningRemoteTransitionDelegate(Landroid/app/IApplicationThread;)V,No similar EPs with similarity > 0.8,,,
setSplitScreenResizing(Z)V,No similar EPs with similarity > 0.8,,,
reportAssistContextExtras(Landroid/os/IBinder;Landroid/os/Bundle;Landroid/app/assist/AssistStructure;Landroid/app/assist/AssistContent;Landroid/net/Uri;)V,No similar EPs with similarity > 0.8,,,
isTopActivityImmersive()Z,isAssistDataAllowedOnCurrentActivity()Z,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity();,Task v2 = p0.getTopDisplayFocusedRootTask(); boolean v3 = v2.isActivityTypeAssistant(); ActivityRecord v4 = v2.getTopNonFinishingActivity();,0.9456148147583008
isTopActivityImmersive()Z,getFrontActivityScreenCompatMode()I,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity();,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo); return v5;,0.8952821493148804
getAssistContextExtras(I)Landroid/os/Bundle;,No similar EPs with similarity > 0.8,,,
cancelRecentsAnimation(Z)V,No similar EPs with similarity > 0.8,,,
moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V,startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I,SafeActivityOptions v5 = SafeActivityOptions.fromBundle(p5); ActivityOptions v13 = p5.getOptions(this.mTaskSupervisor);,SafeActivityOptions v7 = SafeActivityOptions.fromBundle(p7);,0.8873229026794434
moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V,startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,SafeActivityOptions v5 = SafeActivityOptions.fromBundle(p5); ActivityOptions v13 = p5.getOptions(this.mTaskSupervisor);,SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11); ActivityOptions v2 = v1.getOriginalOptions(); boolean v3 = v2.getTransientLaunch();,0.874103844165802
setVrThread(I)V,No similar EPs with similarity > 0.8,,,
updateLockTaskFeatures(II)V,updateLockTaskPackages(I[Ljava/lang/String;)V,"LockTaskController v8 = p0.getLockTaskController(); v8.updateLockTaskFeatures(p1, p2);","LockTaskController v8 = p0.getLockTaskController(); v8.updateLockTaskPackages(p1, p2);",0.907630443572998
updateLockTaskFeatures(II)V,updateLockTaskPackages(I[Ljava/lang/String;)V,"this.mLockTaskFeatures.put(p1, p2);","this.mLockTaskPackages.put(p1, p2); p0.setLockTaskMode(phiInstruction, 1, ""package updated"", 0);",0.824227511882782
getAllRootTaskInfos()Ljava/util/List;,getAllRootTaskInfosOnDisplay(I)Ljava/util/List;,ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(-1); return v4;,"ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(p1); ArrayList v0 = new ArrayList(); DisplayContent v2 = p0.getDisplayContent(p1); RootWindowContainer$$ExternalSyntheticLambda12 v2 = new RootWindowContainer$$ExternalSyntheticLambda12(p0,v0); v2.forAllRootTasks(v2); return v0;",0.8376497030258179
getAllRootTaskInfos()Ljava/util/List;,getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo;,ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(-1); return v4;,Task v4 = p0.getTopDisplayFocusedRootTask(); ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);,0.8199061155319214
onSplashScreenViewCopyFinished(ILandroid/window/SplashScreenView$SplashScreenViewParcelable;)V,No similar EPs with similarity > 0.8,,,
clearLaunchParamsForPackages(Ljava/util/List;)V,No similar EPs with similarity > 0.8,,,
startActivityFromGameSession(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;II)I,startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,"int v5 = p0.handleIncomingUser(p4, p5, p8, ""startActivityFromGameSession""); ActivityStarter v15 = v14.setUserId(v5);","int v3 = p0.handleIncomingUser(p3, p4, p12, ""startVoiceActivity""); ActivityStartController v4 = p0.getActivityStartController(); ActivityStarter v5 = v4.obtainStarter(p5, ""startVoiceActivity"");",0.915881872177124
startActivityFromGameSession(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;II)I,startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/WaitResult;,"int v5 = p0.handleIncomingUser(p4, p5, p8, ""startActivityFromGameSession""); ActivityStarter v15 = v14.setUserId(v5);","int v6 = p0.handleIncomingUser(v4, v5, p12, ""startActivityAndWait"");",0.9092293977737427
removeAllVisibleRecentTasks()V,No similar EPs with similarity > 0.8,,,
startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/WaitResult;,startActivityFromGameSession(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;II)I,"int v6 = p0.handleIncomingUser(v4, v5, p12, ""startActivityAndWait"");","int v5 = p0.handleIncomingUser(p4, p5, p8, ""startActivityFromGameSession""); ActivityStarter v15 = v14.setUserId(v5);",0.9092293977737427
startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/WaitResult;,startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,"int v6 = p0.handleIncomingUser(v4, v5, p12, ""startActivityAndWait"");","int v3 = p0.handleIncomingUser(p3, p4, p12, ""startVoiceActivity""); ActivityStartController v4 = p0.getActivityStartController(); ActivityStarter v5 = v4.obtainStarter(p5, ""startVoiceActivity"");",0.9036830067634583
getAllRootTaskInfosOnDisplay(I)Ljava/util/List;,getAllRootTaskInfos()Ljava/util/List;,"ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(p1); ArrayList v0 = new ArrayList(); DisplayContent v2 = p0.getDisplayContent(p1); RootWindowContainer$$ExternalSyntheticLambda12 v2 = new RootWindowContainer$$ExternalSyntheticLambda12(p0,v0); v2.forAllRootTasks(v2); return v0;",ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(-1); return v4;,0.8376497030258179
getRootTaskInfo(II)Landroid/app/ActivityTaskManager$RootTaskInfo;,getRootTaskInfoOnDisplay(III)Landroid/app/ActivityTaskManager$RootTaskInfo;,"Task v1 = p0.getRootTask(p1, p2); ActivityTaskManager$RootTaskInfo v2 = p0.getRootTaskInfo(v1);","Task v1 = p0.getRootTask(p1, p2, p3); ActivityTaskManager$RootTaskInfo v2 = p0.getRootTaskInfo(v1);",0.993352472782135
getRootTaskInfo(II)Landroid/app/ActivityTaskManager$RootTaskInfo;,getRootTaskInfoOnDisplay(III)Landroid/app/ActivityTaskManager$RootTaskInfo;,"ActivityTaskManager$RootTaskInfo v4 = this.mRootWindowContainer.getRootTaskInfo(p1, p2); return v4;","ActivityTaskManager$RootTaskInfo v4 = this.mRootWindowContainer.getRootTaskInfo(p1, p2, p3); return v4;",0.9889705181121826
setLockScreenShown(ZZ)V,cancelTaskWindowTransition(I)V,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,1.0000001192092896
setLockScreenShown(ZZ)V,setPackageAskScreenCompat(Ljava/lang/String;Z)V,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,1.0000001192092896
registerRemoteAnimationsForDisplay(ILandroid/view/RemoteAnimationDefinition;)V,listModulesAsOriginator(Landroid/media/permission/Identity;)[Landroid/media/soundtrigger_middleware/SoundTriggerModuleDescriptor;,"int v2 = Binder.getCallingPid(); int v3 = Binder.getCallingUid(); p2.setCallingPidUid(v2, v3);",int v2 = Binder.getCallingUid(); Identity.uid = v2; int v3 = Binder.getCallingPid(); Identity.pid = v3;,0.9267750382423401
registerRemoteAnimationsForDisplay(ILandroid/view/RemoteAnimationDefinition;)V,unpinSlice(Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)V,"int v2 = Binder.getCallingPid(); int v3 = Binder.getCallingUid(); p2.setCallingPidUid(v2, v3);","int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); int v3 = p0.checkAccess(p1, p2, v1, v2);",0.885023832321167
updateLockTaskPackages(I[Ljava/lang/String;)V,updateLockTaskFeatures(II)V,"LockTaskController v8 = p0.getLockTaskController(); v8.updateLockTaskPackages(p1, p2);","LockTaskController v8 = p0.getLockTaskController(); v8.updateLockTaskFeatures(p1, p2);",0.907630443572998
updateLockTaskPackages(I[Ljava/lang/String;)V,updateLockTaskFeatures(II)V,"this.mLockTaskPackages.put(p1, p2); p0.setLockTaskMode(phiInstruction, 1, ""package updated"", 0);","this.mLockTaskFeatures.put(p1, p2);",0.824227511882782
setPackageScreenCompatMode(Ljava/lang/String;I)V,getPackageScreenCompatMode(Ljava/lang/String;)I,"this.mCompatModePackages.setPackageScreenCompatModeLocked(p1, p2);",int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1); return v3;,0.9079293608665466
setPackageScreenCompatMode(Ljava/lang/String;I)V,getPackageAskScreenCompat(Ljava/lang/String;)Z,"this.mCompatModePackages.setPackageScreenCompatModeLocked(p1, p2);",boolean v3 = this.mCompatModePackages.getPackageAskCompatModeLocked(p1); int v1 = p0.getPackageFlags(p1); Object v1 = this.mPackages.get(p1);,0.8247159719467163
setFrontActivityScreenCompatMode(I)V,keyguardGoingAway(I)V,"WindowManagerService.boostPriorityForLockedSection(); Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); this.mCompatModePackages.setPackageScreenCompatModeLocked(ActivityInfo.applicationInfo, p1);",WindowManagerService.boostPriorityForLockedSection(); TaskDisplayArea v3 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea(); Task v4 = v3.getRootHomeTask(); ActivityRecord v5 = v4.topRunningActivity();,0.8913691639900208
setFrontActivityScreenCompatMode(I)V,getFrontActivityScreenCompatMode()I,"WindowManagerService.boostPriorityForLockedSection(); Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); this.mCompatModePackages.setPackageScreenCompatModeLocked(ActivityInfo.applicationInfo, p1);",Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo); return v5;,0.8838438987731934
suppressResizeConfigChanges(Z)V,cancelTaskWindowTransition(I)V,WindowManagerService.boostPriorityForLockedSection(); this.mSuppressResizeConfigChanges = p1; WindowManagerService.resetPriorityAfterLockedSection();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,0.8303985595703125
suppressResizeConfigChanges(Z)V,setPackageAskScreenCompat(Ljava/lang/String;Z)V,WindowManagerService.boostPriorityForLockedSection(); this.mSuppressResizeConfigChanges = p1; WindowManagerService.resetPriorityAfterLockedSection();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,0.8303985595703125
getVoiceInteractorPackageName(Landroid/os/IBinder;)Ljava/lang/String;,No similar EPs with similarity > 0.8,,,
setActivityController(Landroid/app/IActivityController;Z)V,No similar EPs with similarity > 0.8,,,
startNextMatchingActivity(Landroid/os/IBinder;Landroid/content/Intent;Landroid/os/Bundle;)Z,No similar EPs with similarity > 0.8,,,
setFocusedTask(I)V,setFocusedRootTask(I)V,"p0.setFocusedTask(p1, 0) Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0) ActivityRecord v5 = v4.topRunningActivityLocked() boolean v6 = v5.moveFocusableActivityToTop(""setFocusedTask"") this.mFocusedApp = p1","Object v1 = new Object(1); Long v2 = Long.valueOf(p1); Task v6 = this.mRootWindowContainer.getRootTask(p1); ActivityRecord v7 = v6.topRunningActivity(); boolean v8 = v7.moveFocusableActivityToTop(""setFocusedRootTask"");",0.8627128005027771
setFocusedTask(I)V,getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo;,"p0.setFocusedTask(p1, 0) Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0) ActivityRecord v5 = v4.topRunningActivityLocked() boolean v6 = v5.moveFocusableActivityToTop(""setFocusedTask"") this.mFocusedApp = p1",Task v4 = p0.getTopDisplayFocusedRootTask(); ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);,0.8433007001876831
setFocusedRootTask(I)V,getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo;,"Object v1 = new Object(1); Long v2 = Long.valueOf(p1); Task v6 = this.mRootWindowContainer.getRootTask(p1); ActivityRecord v7 = v6.topRunningActivity(); boolean v8 = v7.moveFocusableActivityToTop(""setFocusedRootTask"");",Task v4 = p0.getTopDisplayFocusedRootTask(); ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);,0.8950079083442688
setFocusedRootTask(I)V,setFocusedTask(I)V,"Object v1 = new Object(1); Long v2 = Long.valueOf(p1); Task v6 = this.mRootWindowContainer.getRootTask(p1); ActivityRecord v7 = v6.topRunningActivity(); boolean v8 = v7.moveFocusableActivityToTop(""setFocusedRootTask"");","p0.setFocusedTask(p1, 0) Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0) ActivityRecord v5 = v4.topRunningActivityLocked() boolean v6 = v5.moveFocusableActivityToTop(""setFocusedTask"") this.mFocusedApp = p1",0.8627128005027771
takeTaskSnapshot(I)Landroid/window/TaskSnapshot;,getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot;,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1); boolean v5 = v4.isVisible(); TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0); return phiInstruction;","Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1); TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.getSnapshot(p1, Task.mUserId, 1, p2); TaskSnapshot v7 = p0.takeTaskSnapshot(p1); return phiInstruction;",0.9391462802886963
takeTaskSnapshot(I)Landroid/window/TaskSnapshot;,getTaskDescription(I)Landroid/app/ActivityManager$TaskDescription;,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1); boolean v5 = v4.isVisible(); TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0); return phiInstruction;","Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 1); ActivityManager$TaskDescription v4 = v3.getTaskDescription(); return v4;",0.8191801905632019
startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I,startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I,"int v5 = p0.handleIncomingUser(v3, v4, p12, ""startActivityWithConfig""); ActivityStartController v6 = p0.getActivityStartController(); ActivityStarter v7 = v6.obtainStarter(p4, ""startActivityWithConfig""); ActivityStarter v8 = v7.setCaller(p1); ActivityStarter v9 = v8.setCallingPackage(p2); ActivityStarter v10 = v9.setCallingFeatureId(p3); ActivityStarter v11 = v10.setResolvedType(p5); ActivityStarter v12 = v11.setResultTo(p6); ActivityStarter v13 = v12.setResultWho(p7); ActivityStarter v14 = v13.setRequestCode(p8); ActivityStarter v15 = v14.setStartFlags(p9); ActivityStarter v16 = v15.setGlobalConfiguration(p10); ActivityStarter v17 = v16.setActivityOptions(p11); ActivityStarter v18 = v17.setUserId(v5); int v19 = v18.execute(); return v19;","int v3 = p0.handleIncomingUser(p3, p4, p8, ""startAssistantActivity""); ActivityStartController v5 = p0.getActivityStartController(); ActivityStarter v6 = v5.obtainStarter(p5, ""startAssistantActivity""); ActivityStarter v7 = v6.setCallingUid(p4); ActivityStarter v8 = v7.setCallingPackage(p1); ActivityStarter v9 = v8.setCallingFeatureId(p2); ActivityStarter v10 = v9.setResolvedType(p6); SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p7); ActivityStarter v11 = v10.setActivityOptions(v1); ActivityStarter v12 = v11.setUserId(v3); int v14 = v13.execute();",0.9372016787528992
startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I,startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,"int v5 = p0.handleIncomingUser(v3, v4, p12, ""startActivityWithConfig""); ActivityStartController v6 = p0.getActivityStartController(); ActivityStarter v7 = v6.obtainStarter(p4, ""startActivityWithConfig""); ActivityStarter v8 = v7.setCaller(p1); ActivityStarter v9 = v8.setCallingPackage(p2); ActivityStarter v10 = v9.setCallingFeatureId(p3); ActivityStarter v11 = v10.setResolvedType(p5); ActivityStarter v12 = v11.setResultTo(p6); ActivityStarter v13 = v12.setResultWho(p7); ActivityStarter v14 = v13.setRequestCode(p8); ActivityStarter v15 = v14.setStartFlags(p9); ActivityStarter v16 = v15.setGlobalConfiguration(p10); ActivityStarter v17 = v16.setActivityOptions(p11); ActivityStarter v18 = v17.setUserId(v5); int v19 = v18.execute(); return v19;","int v3 = p0.handleIncomingUser(p3, p4, p12, ""startVoiceActivity""); ActivityStartController v4 = p0.getActivityStartController(); ActivityStarter v5 = v4.obtainStarter(p5, ""startVoiceActivity"");",0.8142622113227844
getRecentTasks(III)Landroid/content/pm/ParceledListSlice;,No similar EPs with similarity > 0.8,,,
stopSystemLockTaskMode()V,keyguardGoingAway(I)V,"ActivityTaskManagerService.enforceTaskPermission(""stopSystemLockTaskMode""); p0.stopLockTaskModeInternal(0, 1); int v1 = Binder.getCallingUid(); long v2 = Binder.clearCallingIdentity(); WindowManagerService.boostPriorityForLockedSection(); ActivityRecord v4 = ActivityRecord.forTokenLocked(p1); Task v5 = v4.getTask(); LockTaskController v6 = p0.getLockTaskController(); v6.stopLockTaskMode(phiInstruction, p2, v1); WindowManagerService.resetPriorityAfterLockedSection();",WindowManagerService.boostPriorityForLockedSection(); TaskDisplayArea v3 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea(); Task v4 = v3.getRootHomeTask(); ActivityRecord v5 = v4.topRunningActivity();,0.80550217628479
getFrontActivityScreenCompatMode()I,isTopActivityImmersive()Z,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo); return v5;,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity();,0.8952821493148804
getFrontActivityScreenCompatMode()I,setFrontActivityScreenCompatMode(I)V,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo); return v5;,"WindowManagerService.boostPriorityForLockedSection(); Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); this.mCompatModePackages.setPackageScreenCompatModeLocked(ActivityInfo.applicationInfo, p1);",0.8838438987731934
resizeTask(ILandroid/graphics/Rect;I)Z,setTaskResizeable(II)V,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0); boolean v7 = v4.resize(p2, p3, phiInstruction);","Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1); v2.setResizeMode(p2);",0.8401419520378113
resizeTask(ILandroid/graphics/Rect;I)Z,moveTaskToRootTask(IIZ)V,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0); boolean v7 = v4.resize(p2, p3, phiInstruction);","Task v4 = this.mRootWindowContainer.anyTaskForId(p1); Task v9 = this.mRootWindowContainer.getRootTask(p2); boolean v11 = v4.reparent(v9, p3, 1, 1, 0, ""moveTaskToRootTask"");",0.8276774883270264
onPictureInPictureStateChanged(Landroid/app/PictureInPictureUiState;)V,No similar EPs with similarity > 0.8,,,
startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,startActivityFromGameSession(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;II)I,"int v3 = p0.handleIncomingUser(p3, p4, p12, ""startVoiceActivity""); ActivityStartController v4 = p0.getActivityStartController(); ActivityStarter v5 = v4.obtainStarter(p5, ""startVoiceActivity"");","int v5 = p0.handleIncomingUser(p4, p5, p8, ""startActivityFromGameSession""); ActivityStarter v15 = v14.setUserId(v5);",0.915881872177124
startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,startActivityAndWait(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)Landroid/app/WaitResult;,"int v3 = p0.handleIncomingUser(p3, p4, p12, ""startVoiceActivity""); ActivityStartController v4 = p0.getActivityStartController(); ActivityStarter v5 = v4.obtainStarter(p5, ""startVoiceActivity"");","int v6 = p0.handleIncomingUser(v4, v5, p12, ""startActivityAndWait"");",0.9036830067634583
releaseSomeActivities(Landroid/app/IApplicationThread;)V,moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V,"WindowProcessController v3 = p0.getProcessController(p1); v3.releaseSomeActivities(""low-mem"");","WindowProcessController v5 = p0.getProcessController(p1); ActivityStartController v6 = p0.getActivityStartController(); ActivityStarter v7 = v6.obtainStarter(0, ""moveTaskToFront"");",0.8315834403038025
updateConfiguration(Landroid/content/res/Configuration;)Z,No similar EPs with similarity > 0.8,,,
startActivityIntentSender(Landroid/app/IApplicationThread;Landroid/content/IIntentSender;Landroid/os/IBinder;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;)I,No similar EPs with similarity > 0.8,,,
supportsLocalVoiceInteraction()Z,No similar EPs with similarity > 0.8,,,
startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I,startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11); ActivityOptions v2 = v1.getOriginalOptions(); boolean v3 = v2.getTransientLaunch(); int v4 = Binder.getCallingUid(); boolean v5 = p0.isCallerRecents(v4);,SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11); ActivityOptions v2 = v1.getOriginalOptions(); boolean v3 = v2.getTransientLaunch();,0.9573872685432434
startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I,moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V,SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11); ActivityOptions v2 = v1.getOriginalOptions(); boolean v3 = v2.getTransientLaunch(); int v4 = Binder.getCallingUid(); boolean v5 = p0.isCallerRecents(v4);,SafeActivityOptions v5 = SafeActivityOptions.fromBundle(p5); ActivityOptions v13 = p5.getOptions(this.mTaskSupervisor);,0.8702619075775146
setPersistentVrThread(I)V,No similar EPs with similarity > 0.8,,,
getWindowOrganizerController()Landroid/window/IWindowOrganizerController;,No similar EPs with similarity > 0.8,,,
getPackageAskScreenCompat(Ljava/lang/String;)Z,getPackageScreenCompatMode(Ljava/lang/String;)I,boolean v3 = this.mCompatModePackages.getPackageAskCompatModeLocked(p1); int v1 = p0.getPackageFlags(p1); Object v1 = this.mPackages.get(p1);,int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1); return v3;,0.8652791976928711
getPackageAskScreenCompat(Ljava/lang/String;)Z,setPackageAskScreenCompat(Ljava/lang/String;Z)V,boolean v3 = this.mCompatModePackages.getPackageAskCompatModeLocked(p1); int v1 = p0.getPackageFlags(p1); Object v1 = this.mPackages.get(p1);,"this.mCompatModePackages.setPackageAskCompatModeLocked(p1, p2); p0.setPackageFlagLocked(p1, 1, p2); Integer v2 = Integer.valueOf(phiInstruction); Object v3 = this.mPackages.put(p1, v2);",0.8612093329429626
startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I,startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,SafeActivityOptions v7 = SafeActivityOptions.fromBundle(p7);,SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11); ActivityOptions v2 = v1.getOriginalOptions(); boolean v3 = v2.getTransientLaunch();,0.8951875567436218
startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I,moveTaskToFront(Landroid/app/IApplicationThread;Ljava/lang/String;IILandroid/os/Bundle;)V,SafeActivityOptions v7 = SafeActivityOptions.fromBundle(p7);,SafeActivityOptions v5 = SafeActivityOptions.fromBundle(p5); ActivityOptions v13 = p5.getOptions(this.mTaskSupervisor);,0.8873229026794434
removeTask(I)Z,moveTaskToRootTask(IIZ)V,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1); boolean v5 = v4.isLeafTask(); this.mTaskSupervisor.removeTask(v4, 1, 1, ""remove-task"");","Task v4 = this.mRootWindowContainer.anyTaskForId(p1); Task v9 = this.mRootWindowContainer.getRootTask(p2); boolean v11 = v4.reparent(v9, p3, 1, 1, 0, ""moveTaskToRootTask"");",0.851344108581543
isActivityStartAllowedOnDisplay(ILandroid/content/Intent;Ljava/lang/String;I)Z,No similar EPs with similarity > 0.8,,,
moveRootTaskToDisplay(II)V,No similar EPs with similarity > 0.8,,,
startActivityFromRecents(ILandroid/os/Bundle;)I,No similar EPs with similarity > 0.8,,,
getLockTaskModeState()I,isInLockTaskMode()Z,public int getLockTaskModeState(){ LockTaskController v1 = p0.getLockTaskController(); int v2 = v1.getLockTaskModeState(); return v2;,int v1 = p0.getLockTaskModeState(); public int getLockTaskModeState(){ LockTaskController v1 = p0.getLockTaskController(); int v2 = v1.getLockTaskModeState(); return v2; } public LockTaskController getLockTaskController(){ return this.mLockTaskController; } public int getLockTaskModeState(){ return this.mLockTaskModeState; },0.887726902961731
getLockTaskModeState()I,isInLockTaskMode()Z,public LockTaskController getLockTaskController(){ return this.mLockTaskController; public int getLockTaskModeState(){ return this.mLockTaskModeState;,int v1 = p0.getLockTaskModeState(); public int getLockTaskModeState(){ LockTaskController v1 = p0.getLockTaskController(); int v2 = v1.getLockTaskModeState(); return v2; } public LockTaskController getLockTaskController(){ return this.mLockTaskController; } public int getLockTaskModeState(){ return this.mLockTaskModeState; },0.8778915405273438
getAppTasks(Ljava/lang/String;)Ljava/util/List;,No similar EPs with similarity > 0.8,,,
isInLockTaskMode()Z,getLockTaskModeState()I,int v1 = p0.getLockTaskModeState(); public int getLockTaskModeState(){ LockTaskController v1 = p0.getLockTaskController(); int v2 = v1.getLockTaskModeState(); return v2; } public LockTaskController getLockTaskController(){ return this.mLockTaskController; } public int getLockTaskModeState(){ return this.mLockTaskModeState; },public int getLockTaskModeState(){ LockTaskController v1 = p0.getLockTaskController(); int v2 = v1.getLockTaskModeState(); return v2;,0.887726902961731
isInLockTaskMode()Z,getLockTaskModeState()I,int v1 = p0.getLockTaskModeState(); public int getLockTaskModeState(){ LockTaskController v1 = p0.getLockTaskController(); int v2 = v1.getLockTaskModeState(); return v2; } public LockTaskController getLockTaskController(){ return this.mLockTaskController; } public int getLockTaskModeState(){ return this.mLockTaskModeState; },public LockTaskController getLockTaskController(){ return this.mLockTaskController; public int getLockTaskModeState(){ return this.mLockTaskModeState;,0.8778915405273438
registerTaskStackListener(Landroid/app/ITaskStackListener;)V,No similar EPs with similarity > 0.8,,,
isAssistDataAllowedOnCurrentActivity()Z,isTopActivityImmersive()Z,Task v2 = p0.getTopDisplayFocusedRootTask(); boolean v3 = v2.isActivityTypeAssistant(); ActivityRecord v4 = v2.getTopNonFinishingActivity();,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity();,0.9456148147583008
isAssistDataAllowedOnCurrentActivity()Z,getFrontActivityScreenCompatMode()I,Task v2 = p0.getTopDisplayFocusedRootTask(); boolean v3 = v2.isActivityTypeAssistant(); ActivityRecord v4 = v2.getTopNonFinishingActivity();,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); int v5 = this.mCompatModePackages.computeCompatModeLocked(ActivityInfo.applicationInfo); return v5;,0.8790966868400574
setTaskResizeable(II)V,resizeTask(ILandroid/graphics/Rect;I)Z,"Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1); v2.setResizeMode(p2);","Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0); boolean v7 = v4.resize(p2, p3, phiInstruction);",0.8401419520378113
setTaskResizeable(II)V,moveTaskToRootTask(IIZ)V,"Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1); v2.setResizeMode(p2);","Task v4 = this.mRootWindowContainer.anyTaskForId(p1); Task v9 = this.mRootWindowContainer.getRootTask(p2); boolean v11 = v4.reparent(v9, p3, 1, 1, 0, ""moveTaskToRootTask"");",0.8346332311630249
startBackNavigation(ZLandroid/view/IWindowFocusObserver;Landroid/window/BackAnimationAdaptor;)Landroid/window/BackNavigationInfo;,No similar EPs with similarity > 0.8,,,
getPackageScreenCompatMode(Ljava/lang/String;)I,setPackageScreenCompatMode(Ljava/lang/String;I)V,int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1); return v3;,"this.mCompatModePackages.setPackageScreenCompatModeLocked(p1, p2);",0.9079293608665466
getPackageScreenCompatMode(Ljava/lang/String;)I,getPackageAskScreenCompat(Ljava/lang/String;)Z,int v3 = this.mCompatModePackages.getPackageScreenCompatModeLocked(p1); return v3;,boolean v3 = this.mCompatModePackages.getPackageAskCompatModeLocked(p1); int v1 = p0.getPackageFlags(p1); Object v1 = this.mPackages.get(p1);,0.8652791976928711
setVoiceKeepAwake(Landroid/service/voice/IVoiceInteractionSession;Z)V,cancelTaskWindowTransition(I)V,this.mVoiceWakeLock.acquire(); WindowManagerService.boostPriorityForLockedSection(); WindowManagerService.resetPriorityAfterLockedSection();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,0.8160435557365417
setVoiceKeepAwake(Landroid/service/voice/IVoiceInteractionSession;Z)V,setPackageAskScreenCompat(Ljava/lang/String;Z)V,this.mVoiceWakeLock.acquire(); WindowManagerService.boostPriorityForLockedSection(); WindowManagerService.resetPriorityAfterLockedSection();,WindowManagerService.boostPriorityForLockedSection(); this.sThreadPriorityBooster.boost();,0.8160435557365417
startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I,startActivityWithConfig(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/content/res/Configuration;Landroid/os/Bundle;I)I,"int v3 = p0.handleIncomingUser(p3, p4, p8, ""startAssistantActivity""); ActivityStartController v5 = p0.getActivityStartController(); ActivityStarter v6 = v5.obtainStarter(p5, ""startAssistantActivity""); ActivityStarter v7 = v6.setCallingUid(p4); ActivityStarter v8 = v7.setCallingPackage(p1); ActivityStarter v9 = v8.setCallingFeatureId(p2); ActivityStarter v10 = v9.setResolvedType(p6); SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p7); ActivityStarter v11 = v10.setActivityOptions(v1); ActivityStarter v12 = v11.setUserId(v3); int v14 = v13.execute();","int v5 = p0.handleIncomingUser(v3, v4, p12, ""startActivityWithConfig""); ActivityStartController v6 = p0.getActivityStartController(); ActivityStarter v7 = v6.obtainStarter(p4, ""startActivityWithConfig""); ActivityStarter v8 = v7.setCaller(p1); ActivityStarter v9 = v8.setCallingPackage(p2); ActivityStarter v10 = v9.setCallingFeatureId(p3); ActivityStarter v11 = v10.setResolvedType(p5); ActivityStarter v12 = v11.setResultTo(p6); ActivityStarter v13 = v12.setResultWho(p7); ActivityStarter v14 = v13.setRequestCode(p8); ActivityStarter v15 = v14.setStartFlags(p9); ActivityStarter v16 = v15.setGlobalConfiguration(p10); ActivityStarter v17 = v16.setActivityOptions(p11); ActivityStarter v18 = v17.setUserId(v5); int v19 = v18.execute(); return v19;",0.9372016787528992
startAssistantActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;I)I,startVoiceActivity(Ljava/lang/String;Ljava/lang/String;IILandroid/content/Intent;Ljava/lang/String;Landroid/service/voice/IVoiceInteractionSession;Lcom/android/internal/app/IVoiceInteractor;ILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,"int v3 = p0.handleIncomingUser(p3, p4, p8, ""startAssistantActivity""); ActivityStartController v5 = p0.getActivityStartController(); ActivityStarter v6 = v5.obtainStarter(p5, ""startAssistantActivity""); ActivityStarter v7 = v6.setCallingUid(p4); ActivityStarter v8 = v7.setCallingPackage(p1); ActivityStarter v9 = v8.setCallingFeatureId(p2); ActivityStarter v10 = v9.setResolvedType(p6); SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p7); ActivityStarter v11 = v10.setActivityOptions(v1); ActivityStarter v12 = v11.setUserId(v3); int v14 = v13.execute();","int v3 = p0.handleIncomingUser(p3, p4, p12, ""startVoiceActivity""); ActivityStartController v4 = p0.getActivityStartController(); ActivityStarter v5 = v4.obtainStarter(p5, ""startVoiceActivity"");",0.8018344640731812
unhandledBack()V,No similar EPs with similarity > 0.8,,,
keyguardGoingAway(I)V,setFrontActivityScreenCompatMode(I)V,WindowManagerService.boostPriorityForLockedSection(); TaskDisplayArea v3 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea(); Task v4 = v3.getRootHomeTask(); ActivityRecord v5 = v4.topRunningActivity();,"WindowManagerService.boostPriorityForLockedSection(); Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity(); this.mCompatModePackages.setPackageScreenCompatModeLocked(ActivityInfo.applicationInfo, p1);",0.8913691639900208
keyguardGoingAway(I)V,setFocusedRootTask(I)V,WindowManagerService.boostPriorityForLockedSection(); TaskDisplayArea v3 = ActivityTaskManagerService.mRootWindowContainer.getDefaultTaskDisplayArea(); Task v4 = v3.getRootHomeTask(); ActivityRecord v5 = v4.topRunningActivity();,boolean v9 = this.mRootWindowContainer.resumeFocusedTasksTopActivities(); WindowManagerService.resetPriorityAfterLockedSection();,0.8591970801353455
getTaskDescriptionIcon(Ljava/lang/String;I)Landroid/graphics/Bitmap;,No similar EPs with similarity > 0.8,,,
getTaskDescription(I)Landroid/app/ActivityManager$TaskDescription;,getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo;,"Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 1); ActivityManager$TaskDescription v4 = v3.getTaskDescription(); return v4;",Task v4 = p0.getTopDisplayFocusedRootTask(); ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);,0.862377405166626
getTaskDescription(I)Landroid/app/ActivityManager$TaskDescription;,getRootTaskInfoOnDisplay(III)Landroid/app/ActivityTaskManager$RootTaskInfo;,"Task v3 = this.mRootWindowContainer.anyTaskForId(p1, 1); ActivityManager$TaskDescription v4 = v3.getTaskDescription(); return v4;","ActivityTaskManager$RootTaskInfo v4 = this.mRootWindowContainer.getRootTaskInfo(p1, p2, p3); return v4;",0.8389332294464111
unregisterTaskStackListener(Landroid/app/ITaskStackListener;)V,No similar EPs with similarity > 0.8,,,
getActivityClientController()Landroid/app/IActivityClientController;,No similar EPs with similarity > 0.8,,,
getDeviceConfigurationInfo()Landroid/content/pm/ConfigurationInfo;,No similar EPs with similarity > 0.8,,,
detachNavigationBarFromApp(Landroid/os/IBinder;)V,No similar EPs with similarity > 0.8,,,
getRootTaskInfoOnDisplay(III)Landroid/app/ActivityTaskManager$RootTaskInfo;,getRootTaskInfo(II)Landroid/app/ActivityTaskManager$RootTaskInfo;,"Task v1 = p0.getRootTask(p1, p2, p3); ActivityTaskManager$RootTaskInfo v2 = p0.getRootTaskInfo(v1);","Task v1 = p0.getRootTask(p1, p2); ActivityTaskManager$RootTaskInfo v2 = p0.getRootTaskInfo(v1);",0.993352472782135
getRootTaskInfoOnDisplay(III)Landroid/app/ActivityTaskManager$RootTaskInfo;,getRootTaskInfo(II)Landroid/app/ActivityTaskManager$RootTaskInfo;,"ActivityTaskManager$RootTaskInfo v4 = this.mRootWindowContainer.getRootTaskInfo(p1, p2, p3); return v4;","ActivityTaskManager$RootTaskInfo v4 = this.mRootWindowContainer.getRootTaskInfo(p1, p2); return v4;",0.9889705181121826
getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot;,takeTaskSnapshot(I)Landroid/window/TaskSnapshot;,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1); TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.getSnapshot(p1, Task.mUserId, 1, p2); TaskSnapshot v7 = p0.takeTaskSnapshot(p1); return phiInstruction;","Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1); boolean v5 = v4.isVisible(); TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.captureTaskSnapshot(v4, 0); return phiInstruction;",0.9391462802886963
getTaskSnapshot(IZZ)Landroid/window/TaskSnapshot;,resizeTask(ILandroid/graphics/Rect;I)Z,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1); TaskSnapshot v6 = WindowManagerService.mTaskSnapshotController.getSnapshot(p1, Task.mUserId, 1, p2); TaskSnapshot v7 = p0.takeTaskSnapshot(p1); return phiInstruction;","Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 0); boolean v7 = v4.resize(p2, p3, phiInstruction);",0.8170499801635742
finishVoiceTask(Landroid/service/voice/IVoiceInteractionSession;)V,No similar EPs with similarity > 0.8,,,
stopAppSwitches()V,No similar EPs with similarity > 0.8,,,
startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,startActivity(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;)I,SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11); ActivityOptions v2 = v1.getOriginalOptions(); boolean v3 = v2.getTransientLaunch();,SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11); ActivityOptions v2 = v1.getOriginalOptions(); boolean v3 = v2.getTransientLaunch(); int v4 = Binder.getCallingUid(); boolean v5 = p0.isCallerRecents(v4);,0.9573872685432434
startActivityAsUser(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;Landroid/content/Intent;Ljava/lang/String;Landroid/os/IBinder;Ljava/lang/String;IILandroid/app/ProfilerInfo;Landroid/os/Bundle;I)I,startActivities(Landroid/app/IApplicationThread;Ljava/lang/String;Ljava/lang/String;[Landroid/content/Intent;[Ljava/lang/String;Landroid/os/IBinder;Landroid/os/Bundle;I)I,SafeActivityOptions v1 = SafeActivityOptions.fromBundle(p11); ActivityOptions v2 = v1.getOriginalOptions(); boolean v3 = v2.getTransientLaunch();,SafeActivityOptions v7 = SafeActivityOptions.fromBundle(p7);,0.8951875567436218
getTaskBounds(I)Landroid/graphics/Rect;,getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo;,"ActivityTaskManagerService.enforceTaskPermission(""getTaskBounds()""); Rect v2 = new Rect(); Task v5 = this.mRootWindowContainer.anyTaskForId(p1, 1); return v2;",Task v4 = p0.getTopDisplayFocusedRootTask(); ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);,0.807231068611145
moveTaskToRootTask(IIZ)V,removeTask(I)Z,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1); Task v9 = this.mRootWindowContainer.getRootTask(p2); boolean v11 = v4.reparent(v9, p3, 1, 1, 0, ""moveTaskToRootTask"");","Task v4 = this.mRootWindowContainer.anyTaskForId(p1, 1); boolean v5 = v4.isLeafTask(); this.mTaskSupervisor.removeTask(v4, 1, 1, ""remove-task"");",0.851344108581543
moveTaskToRootTask(IIZ)V,setTaskResizeable(II)V,"Task v4 = this.mRootWindowContainer.anyTaskForId(p1); Task v9 = this.mRootWindowContainer.getRootTask(p2); boolean v11 = v4.reparent(v9, p3, 1, 1, 0, ""moveTaskToRootTask"");","Task v2 = this.mRootWindowContainer.anyTaskForId(p1, 1); v2.setResizeMode(p2);",0.8346332311630249
removeRootTasksWithActivityTypes([I)V,removeRootTasksInWindowingModes([I)V,this.mRootWindowContainer.removeRootTasksWithActivityTypes(p1);,"ActivityTaskManagerService.enforceTaskPermission(""removeRootTasksInWindowingModes()""); this.mRootWindowContainer.removeRootTasksInWindowingModes(p1);",0.8923709392547607
removeRootTasksWithActivityTypes([I)V,getAllRootTaskInfos()Ljava/util/List;,this.mRootWindowContainer.removeRootTasksWithActivityTypes(p1);,ArrayList v4 = this.mRootWindowContainer.getAllRootTaskInfos(-1); return v4;,0.8039498925209045
alwaysShowUnsupportedCompileSdkWarning(Landroid/content/ComponentName;)V,No similar EPs with similarity > 0.8,,,
getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo;,setFocusedRootTask(I)V,Task v4 = p0.getTopDisplayFocusedRootTask(); ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);,"Object v1 = new Object(1); Long v2 = Long.valueOf(p1); Task v6 = this.mRootWindowContainer.getRootTask(p1); ActivityRecord v7 = v6.topRunningActivity(); boolean v8 = v7.moveFocusableActivityToTop(""setFocusedRootTask"");",0.8950079083442688
getFocusedRootTaskInfo()Landroid/app/ActivityTaskManager$RootTaskInfo;,isTopActivityImmersive()Z,Task v4 = p0.getTopDisplayFocusedRootTask(); ActivityTaskManager$RootTaskInfo v5 = this.mRootWindowContainer.getRootTaskInfo(Task.mTaskId);,Task v3 = p0.getTopDisplayFocusedRootTask(); ActivityRecord v4 = v3.topRunningActivity();,0.8815797567367554
getAppTaskThumbnailSize()Landroid/graphics/Point;,No similar EPs with similarity > 0.8,,,
resumeAppSwitches()V,No similar EPs with similarity > 0.8,,,
getTasks(IZZI)Ljava/util/List;,No similar EPs with similarity > 0.8,,,
createSession(Ljava/lang/String;Landroid/speech/tts/ITextToSpeechSessionCallback;)V,No similar EPs with similarity > 0.8,,,
getPinnedSlices(Ljava/lang/String;)[Landroid/net/Uri;,No similar EPs with similarity > 0.8,,,
revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V,grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V,"this.mPermissions.revokeSliceAccess(p2, v3, p1, v3, p3); SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SliceClientPermissions v3 = p0.getClient(v0); v3.revokeUri(p5, v1);","SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);",0.8643988370895386
revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V,checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I,"this.mPermissions.revokeSliceAccess(p2, v3, p1, v3, p3); SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SliceClientPermissions v3 = p0.getClient(v0); v3.revokeUri(p5, v1);","SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1);",0.8621689081192017
grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V,checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I,"SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);","SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1);",0.8822618722915649
grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V,checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I,"SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1);","SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1);",0.8693497180938721
checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I,grantPermissionFromUser(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V,"SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1);","SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1); SliceProviderPermissions v5 = p0.getProvider(v1); Uri v6 = ContentProvider.getUriWithoutUserId(p5); String v7 = v6.getAuthority(); SliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7); v8.addPkg(v0);",0.8954552412033081
checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I,grantSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V,"SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1);","SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);",0.8822618722915649
hasSliceAccess(Ljava/lang/String;)Z,No similar EPs with similarity > 0.8,,,
getPinnedSpecs(Landroid/net/Uri;Ljava/lang/String;)[Landroid/app/slice/SliceSpec;,checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I,"int v3 = p0.checkAccess(p1, p2, v1, v2); int v6 = ContentProvider.getUserIdFromUri(p2, v5); String v7 = p0.getProviderPkg(p2, v6);","int v7 = ContentProvider.getUserIdFromUri(p1, v1); String v8 = p0.getProviderPkg(p1, v7); this.mPermissions.grantSliceAccess(p3, v1, v8, v7, p1);",0.8382217884063721
unpinSlice(Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)V,registerRemoteAnimationsForDisplay(ILandroid/view/RemoteAnimationDefinition;)V,"int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); int v3 = p0.checkAccess(p1, p2, v1, v2);","int v2 = Binder.getCallingPid(); int v3 = Binder.getCallingUid(); p2.setCallingPidUid(v2, v3);",0.885023832321167
unpinSlice(Ljava/lang/String;Landroid/net/Uri;Landroid/os/IBinder;)V,getBoolean(Ljava/lang/String;ZI)Z,"int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); int v3 = p0.checkAccess(p1, p2, v1, v2);","p0.checkReadPermission(p1, p3); int v1 = Binder.getCallingUid();",0.8669859170913696
pinSlice(Ljava/lang/String;Landroid/net/Uri;[Landroid/app/slice/SliceSpec;Landroid/os/IBinder;)V,No similar EPs with similarity > 0.8,,,
grantPermissionFromUser(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V,checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I,"SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1); SliceProviderPermissions v5 = p0.getProvider(v1); Uri v6 = ContentProvider.getUriWithoutUserId(p5); String v7 = v6.getAuthority(); SliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7); v8.addPkg(v0);","SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2); SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); SliceClientPermissions v3 = p0.getClient(v0); v3.grantUri(p5, v1);",0.8954552412033081
grantPermissionFromUser(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Z)V,revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V,"Object v1 = this.mCachedClients.get(p1); String v2 = SliceClientPermissions.getFileName(p1); SlicePermissionManager$ParserHolder v3 = p0.getParser(v2); XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3); v3.close(); SliceClientPermissions v7 = new SliceClientPermissions(p1,p0); Object v9 = this.mCachedClients.put(p1, v7);","SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4); Object v1 = this.mCachedClients.get(p1); SliceClientPermissions v7 = new SliceClientPermissions(p1,p0); Object v9 = this.mCachedClients.put(p1, v7);",0.8308852910995483
stopTracing()V,startTracing()V,this.mTracingEnabled = 0; this.mBar.stopTracing();,this.mBar.startTracing(); this.mTracingEnabled = 1;,0.9443179368972778
stopTracing()V,startTracing()V,this.mTracingEnabled = 0; this.mBar.stopTracing();,this.mBar.startTracing();,0.8705247640609741
onBiometricError(III)V,getBackupPayload(I)[B,,,1.0000001192092896
onBiometricError(III)V,onNotificationExpansionChanged(Ljava/lang/String;ZZI)V,,,1.0000001192092896
onBubbleMetadataFlagChanged(Ljava/lang/String;I)V,No similar EPs with similarity > 0.8,,,
onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,onNotificationActionClick(Ljava/lang/String;ILandroid/app/Notification$Action;Lcom/android/internal/statusbar/NotificationVisibility;Z)V,"this.mNotificationDelegate.onNotificationClick(v2, v3, p1, p2);","this.mNotificationDelegate.onNotificationActionClick(v2, v3, p1, p2, p3, p4, p5);",0.9469502568244934
onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,"this.mNotificationDelegate.onNotificationClick(v2, v3, p1, p2);","this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);",0.8153913021087646
disable2(ILandroid/os/IBinder;Ljava/lang/String;)V,disable2ForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,"p0.disableLocked(0, p4, p1, p2, p3, 2); p0.manageDisableListLocked(p2, p3, p4, p5, p6); int v2 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v3 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v4 = p0.getUiState(p1); boolean v5 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v4, v2, v3); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v4, v2, v3); StatusBarManagerService$$ExternalSyntheticLambda6 v6 = new StatusBarManagerService$$ExternalSyntheticLambda6(p0,v2); boolean v8 = this.mHandler.post(v6);","p0.disableLocked(0, p4, p1, p2, p3, 2); p0.manageDisableListLocked(p2, p3, p4, p5, p6); int v2 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v3 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v4 = p0.getUiState(p1); boolean v5 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v4, v2, v3); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v4, v2, v3); new StatusBarManagerService$$ExternalSyntheticLambda6(p0,v2);",0.9764715433120728
disable2(ILandroid/os/IBinder;Ljava/lang/String;)V,disable(ILandroid/os/IBinder;Ljava/lang/String;)V,"p0.disableLocked(0, p4, p1, p2, p3, 2); p0.manageDisableListLocked(p2, p3, p4, p5, p6); int v2 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v3 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v4 = p0.getUiState(p1); boolean v5 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v4, v2, v3); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v4, v2, v3); StatusBarManagerService$$ExternalSyntheticLambda6 v6 = new StatusBarManagerService$$ExternalSyntheticLambda6(p0,v2); boolean v8 = this.mHandler.post(v6);","public void disable(int p1, IBinder p2, String p3){ p0.disableForUser(p1, p2, p3, this.mCurrentUserId); public void disableForUser(int p1, IBinder p2, String p3, int p4){ p0.enforceStatusBar(); p0.disableLocked(0, p4, p1, p2, p3, 1); public void disableLocked(int p1, int p2, int p3, IBinder p4, String p5, int p6){ p0.manageDisableListLocked(p2, p3, p4, p5, p6); int v2 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v3 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v4 = p0.getUiState(p1); boolean v5 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v4, v2, v3); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v4, v2, v3); StatusBarManagerService$$ExternalSyntheticLambda6 v6 = new StatusBarManagerService$$ExternalSyntheticLambda6(p0,v2); boolean v8 = this.mHandler.post(v6); this.mBar.disable(p1, v2, v3);",0.8213374018669128
clickTile(Landroid/content/ComponentName;)V,addTile(Landroid/content/ComponentName;)V,this.mBar.clickQsTile(p1);,this.mBar.addQsTile(p1); p0.enforceStatusBarOrShell();,0.824985921382904
onNotificationDirectReplied(Ljava/lang/String;)V,onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,this.mNotificationDelegate.onNotificationDirectReplied(p1);,"this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);",0.8068280816078186
registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;)Lcom/android/internal/statusbar/RegisterStatusBarResult;,setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V,"this.mBar = p1; ArrayMap v8 = new ArrayMap(this.mIcons); Object v10 = this.mDisplayUiState.get(0); RegisterStatusBarResult v12 = new RegisterStatusBarResult(v8,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v12,v25); return v12;","StatusBarIcon v1 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5); Object v3 = this.mIcons.put(p1, v1); this.mBar.setIcon(p1, v1);",0.801673173904419
registerSessionListener(ILcom/android/internal/statusbar/ISessionListener;)V,onSessionEnded(ILcom/android/internal/logging/InstanceId;)V,"this.mSessionMonitor.registerSessionListener(p1, p2);","this.mSessionMonitor.onSessionEnded(p1, p2);",0.862453043460846
onGlobalActionsHidden()V,onGlobalActionsShown()V,long v2 = Binder.clearCallingIdentity(); this.mGlobalActionListener.onGlobalActionsDismissed(); Binder.restoreCallingIdentity(v2);,long v2 = Binder.clearCallingIdentity(); this.mGlobalActionListener.onGlobalActionsShown(); Binder.restoreCallingIdentity(v2);,0.9575890302658081
onGlobalActionsHidden()V,restart()V,long v2 = Binder.clearCallingIdentity(); this.mGlobalActionListener.onGlobalActionsDismissed(); Binder.restoreCallingIdentity(v2);,long v2 = Binder.clearCallingIdentity(); Binder.restoreCallingIdentity(v2);,0.8088724613189697
onNotificationClear(Ljava/lang/String;ILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V,onClearAllNotifications(I)V,"int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationClear(v2, v3, p1, p2, p3, p4, p5, p6);","this.mNotificationDelegate.onClearAll(v2, v3, p1); int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); long v4 = Binder.clearCallingIdentity();",0.9302526712417603
onNotificationClear(Ljava/lang/String;ILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V,onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,"int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationClear(v2, v3, p1, p2, p3, p4, p5, p6);","int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationError(v2, v3, p1, p2, p3, p4, p5, p6, p7);",0.9143876433372498
isTracing()Z,No similar EPs with similarity > 0.8,,,
setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V,setIconVisibility(Ljava/lang/String;Z)V,"StatusBarIcon v1 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5); Object v3 = this.mIcons.put(p1, v1); this.mBar.setIcon(p1, v1);","Object v2 = this.mIcons.get(p1); StatusBarIcon.visible = p2; this.mBar.setIcon(p1, v2);",0.8697917461395264
setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V,registerStatusBar(Lcom/android/internal/statusbar/IStatusBar;)Lcom/android/internal/statusbar/RegisterStatusBarResult;,"StatusBarIcon v1 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5); Object v3 = this.mIcons.put(p1, v1); this.mBar.setIcon(p1, v1);","this.mBar = p1; ArrayMap v8 = new ArrayMap(this.mIcons); Object v10 = this.mDisplayUiState.get(0); RegisterStatusBarResult v12 = new RegisterStatusBarResult(v8,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v12,v25); return v12;",0.801673173904419
unregisterNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,registerNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,this.mBar.unregisterNearbyMediaDevicesProvider(p1); p0.enforceMediaContentControl();,this.mBar.registerNearbyMediaDevicesProvider(p1);,0.914763867855072
onClearAllNotifications(I)V,onNotificationClear(Ljava/lang/String;ILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onClearAll(v2, v3, p1); int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); long v4 = Binder.clearCallingIdentity();","int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationClear(v2, v3, p1, p2, p3, p4, p5, p6);",0.9302526712417603
onClearAllNotifications(I)V,onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,"this.mNotificationDelegate.onClearAll(v2, v3, p1); int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); long v4 = Binder.clearCallingIdentity();","int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationError(v2, v3, p1, p2, p3, p4, p5, p6, p7);",0.8272926807403564
onNotificationActionClick(Ljava/lang/String;ILandroid/app/Notification$Action;Lcom/android/internal/statusbar/NotificationVisibility;Z)V,onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onNotificationActionClick(v2, v3, p1, p2, p3, p4, p5);","this.mNotificationDelegate.onNotificationClick(v2, v3, p1, p2);",0.9469502568244934
onNotificationSmartReplySent(Ljava/lang/String;ILjava/lang/CharSequence;IZ)V,No similar EPs with similarity > 0.8,,,
onPanelRevealed(ZI)V,No similar EPs with similarity > 0.8,,,
disable2ForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,disable2(ILandroid/os/IBinder;Ljava/lang/String;)V,"p0.disableLocked(0, p4, p1, p2, p3, 2); p0.manageDisableListLocked(p2, p3, p4, p5, p6); int v2 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v3 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v4 = p0.getUiState(p1); boolean v5 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v4, v2, v3); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v4, v2, v3); new StatusBarManagerService$$ExternalSyntheticLambda6(p0,v2);","p0.disableLocked(0, p4, p1, p2, p3, 2); p0.manageDisableListLocked(p2, p3, p4, p5, p6); int v2 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v3 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v4 = p0.getUiState(p1); boolean v5 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v4, v2, v3); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v4, v2, v3); StatusBarManagerService$$ExternalSyntheticLambda6 v6 = new StatusBarManagerService$$ExternalSyntheticLambda6(p0,v2); boolean v8 = this.mHandler.post(v6);",0.9764715433120728
setImeWindowStatus(ILandroid/os/IBinder;IIZ)V,setVcnConfig(Landroid/os/ParcelUuid;Landroid/net/vcn/VcnConfig;Ljava/lang/String;)V,"StatusBarManagerService$$ExternalSyntheticLambda1 v3 = new StatusBarManagerService$$ExternalSyntheticLambda1(p0,p1,p2,p3,p4,p5);","VcnManagementService$$ExternalSyntheticLambda4 v16 = new VcnManagementService$$ExternalSyntheticLambda4(p0,p1,p2); Binder.withCleanCallingIdentity(v16);",0.8354077339172363
setImeWindowStatus(ILandroid/os/IBinder;IIZ)V,removeVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,"StatusBarManagerService$$ExternalSyntheticLambda1 v3 = new StatusBarManagerService$$ExternalSyntheticLambda1(p0,p1,p2,p3,p4,p5);","VcnManagementService$$ExternalSyntheticLambda3 v2 = new VcnManagementService$$ExternalSyntheticLambda3(p0,p1); Binder.withCleanCallingIdentity(v2);",0.8343411684036255
onBiometricAuthenticated(I)V,No similar EPs with similarity > 0.8,,,
setUdfpsHbmListener(Landroid/hardware/fingerprint/IUdfpsHbmListener;)V,No similar EPs with similarity > 0.8,,,
showPinningEscapeToast()V,No similar EPs with similarity > 0.8,,,
showAuthenticationDialog(Landroid/hardware/biometrics/PromptInfo;Landroid/hardware/biometrics/IBiometricSysuiReceiver;[IZZIJLjava/lang/String;JI)V,hideAuthenticationDialog(J)V,"this.mBar.showAuthenticationDialog(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);",this.mBar.hideAuthenticationDialog(p1);,0.8986908197402954
showInattentiveSleepWarning()V,No similar EPs with similarity > 0.8,,,
dismissInattentiveSleepWarning(Z)V,No similar EPs with similarity > 0.8,,,
onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,onNotificationClick(Ljava/lang/String;Lcom/android/internal/statusbar/NotificationVisibility;)V,"this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);","this.mNotificationDelegate.onNotificationClick(v2, v3, p1, p2);",0.8153913021087646
onNotificationFeedbackReceived(Ljava/lang/String;Landroid/os/Bundle;)V,onNotificationDirectReplied(Ljava/lang/String;)V,"this.mNotificationDelegate.onNotificationFeedbackReceived(p1, p2);",this.mNotificationDelegate.onNotificationDirectReplied(p1);,0.8068280816078186
onNotificationExpansionChanged(Ljava/lang/String;ZZI)V,getBackupPayload(I)[B,,,1.0000001192092896
onNotificationExpansionChanged(Ljava/lang/String;ZZI)V,onBiometricError(III)V,,,1.0000001192092896
onNotificationSmartSuggestionsAdded(Ljava/lang/String;IIZZ)V,No similar EPs with similarity > 0.8,,,
onNotificationSettingsViewed(Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
disableForUser(ILandroid/os/IBinder;Ljava/lang/String;I)V,No similar EPs with similarity > 0.8,,,
requestTileServiceListeningState(Landroid/content/ComponentName;I)V,No similar EPs with similarity > 0.8,,,
shutdown()V,reboot(Z)V,"int v2 = Binder.getCallingPid(); ShutdownCheckPoints.recordCheckPoint(v2, ""userrequested""); ShutdownCheckPoints$SystemServerCheckPoint v1 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,p2);","int v2 = Binder.getCallingPid(); ShutdownCheckPoints.recordCheckPoint(v2, phiInstruction);",0.8577584624290466
shutdown()V,reboot(Z)V,"int v2 = Binder.getCallingPid(); ShutdownCheckPoints.recordCheckPoint(v2, ""userrequested""); ShutdownCheckPoints$BinderCheckPoint v1 = new ShutdownCheckPoints$BinderCheckPoint(this.mInjector,p1,p2);","int v2 = Binder.getCallingPid(); ShutdownCheckPoints.recordCheckPoint(v2, phiInstruction);",0.8507492542266846
onGlobalActionsShown()V,onGlobalActionsHidden()V,long v2 = Binder.clearCallingIdentity(); this.mGlobalActionListener.onGlobalActionsShown(); Binder.restoreCallingIdentity(v2);,long v2 = Binder.clearCallingIdentity(); this.mGlobalActionListener.onGlobalActionsDismissed(); Binder.restoreCallingIdentity(v2);,0.9575890302658081
onGlobalActionsShown()V,restart()V,long v2 = Binder.clearCallingIdentity(); this.mGlobalActionListener.onGlobalActionsShown(); Binder.restoreCallingIdentity(v2);,long v2 = Binder.clearCallingIdentity(); Binder.restoreCallingIdentity(v2);,0.8353121876716614
onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,onNotificationClear(Ljava/lang/String;ILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V,"int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationError(v2, v3, p1, p2, p3, p4, p5, p6, p7);","int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationClear(v2, v3, p1, p2, p3, p4, p5, p6);",0.9143876433372498
onNotificationError(Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;I)V,onClearAllNotifications(I)V,"int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationError(v2, v3, p1, p2, p3, p4, p5, p6, p7);","this.mNotificationDelegate.onClearAll(v2, v3, p1); int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); long v4 = Binder.clearCallingIdentity();",0.8272926807403564
unregisterSessionListener(ILcom/android/internal/statusbar/ISessionListener;)V,No similar EPs with similarity > 0.8,,,
setBiometicContextListener(Landroid/hardware/biometrics/IBiometricContextListener;)V,No similar EPs with similarity > 0.8,,,
setNavBarMode(I)V,getNavBarMode()I,"boolean v4 = Settings$Secure.putIntForUser(v3, ""nav_bar_kids_mode"", p1, this.mCurrentUserId); boolean v6 = Settings$Secure.putIntForUser(v5, ""nav_bar_force_visible"", p1, this.mCurrentUserId);","int v4 = Settings$Secure.getIntForUser(v3, ""nav_bar_kids_mode"", this.mCurrentUserId); return v4;",0.8439133763313293
startTracing()V,stopTracing()V,this.mBar.startTracing(); this.mTracingEnabled = 1;,this.mTracingEnabled = 0; this.mBar.stopTracing();,0.9443179368972778
startTracing()V,stopTracing()V,this.mBar.startTracing();,this.mTracingEnabled = 0; this.mBar.stopTracing();,0.8705247640609741
onNotificationBubbleChanged(Ljava/lang/String;ZI)V,onNotificationClear(Ljava/lang/String;ILjava/lang/String;IILcom/android/internal/statusbar/NotificationVisibility;)V,"long v2 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3); Binder.restoreCallingIdentity(v2);","int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); this.mNotificationDelegate.onNotificationClear(v2, v3, p1, p2, p3, p4, p5, p6);",0.8373443484306335
onNotificationBubbleChanged(Ljava/lang/String;ZI)V,onClearAllNotifications(I)V,"long v2 = Binder.clearCallingIdentity(); this.mNotificationDelegate.onNotificationBubbleChanged(p1, p2, p3); Binder.restoreCallingIdentity(v2);","this.mNotificationDelegate.onClearAll(v2, v3, p1); int v2 = Binder.getCallingUid(); int v3 = Binder.getCallingPid(); long v4 = Binder.clearCallingIdentity();",0.8227339386940002
reboot(Z)V,restart()V,"this.mNotificationDelegate.prepareForPossibleShutdown(); StatusBarManagerService$$ExternalSyntheticLambda2 v5 = new StatusBarManagerService$$ExternalSyntheticLambda2(p1,phiInstruction); boolean v7 = this.mHandler.post(v5);",boolean v4 = this.mHandler.post(v2); StatusBarManagerService$$ExternalSyntheticLambda0 v2 = new StatusBarManagerService$$ExternalSyntheticLambda0(p0);,0.8587847948074341
reboot(Z)V,shutdown()V,"int v2 = Binder.getCallingPid(); ShutdownCheckPoints.recordCheckPoint(v2, phiInstruction);","int v2 = Binder.getCallingPid(); ShutdownCheckPoints.recordCheckPoint(v2, ""userrequested""); ShutdownCheckPoints$SystemServerCheckPoint v1 = new ShutdownCheckPoints$SystemServerCheckPoint(this.mInjector,p2);",0.8577584624290466
removeIcon(Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
expandNotificationsPanel()V,No similar EPs with similarity > 0.8,,,
expandSettingsPanel(Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
suppressAmbientDisplay(Z)V,No similar EPs with similarity > 0.8,,,
clearInlineReplyUriPermissions(Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
hideCurrentInputMethodForBubbles()V,No similar EPs with similarity > 0.8,,,
onPanelHidden()V,No similar EPs with similarity > 0.8,,,
remTile(Landroid/content/ComponentName;)V,No similar EPs with similarity > 0.8,,,
restart()V,timeShiftPause(Landroid/os/IBinder;I)V,long v2 = Binder.clearCallingIdentity(); Binder.restoreCallingIdentity(v2);,int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); long v4 = Binder.clearCallingIdentity(); Object v5 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0); Binder.restoreCallingIdentity(v4);,0.8629044890403748
restart()V,reboot(Z)V,boolean v4 = this.mHandler.post(v2); StatusBarManagerService$$ExternalSyntheticLambda0 v2 = new StatusBarManagerService$$ExternalSyntheticLambda0(p0);,"this.mNotificationDelegate.prepareForPossibleShutdown(); StatusBarManagerService$$ExternalSyntheticLambda2 v5 = new StatusBarManagerService$$ExternalSyntheticLambda2(p1,phiInstruction); boolean v7 = this.mHandler.post(v5);",0.8587847948074341
showPinningEnterExitToast(Z)V,No similar EPs with similarity > 0.8,,,
updateMediaTapToTransferSenderDisplay(ILandroid/media/MediaRoute2Info;Lcom/android/internal/statusbar/IUndoMediaTransferCallback;)V,No similar EPs with similarity > 0.8,,,
onNotificationVisibilityChanged([Lcom/android/internal/statusbar/NotificationVisibility;[Lcom/android/internal/statusbar/NotificationVisibility;)V,No similar EPs with similarity > 0.8,,,
togglePanel()V,collapsePanels()V,"public void togglePanel(){ boolean v1 = p0.checkCanCollapseStatusBar(""togglePanel""); boolean v2 = p0.isDisable2FlagSet(4);","boolean v1 = p0.checkCanCollapseStatusBar(""collapsePanels""); p0.enforceExpandStatusBar(); this.mBar.animateCollapsePanels();",0.8546744585037231
togglePanel()V,handleSystemKey(I)V,"public boolean checkCanCollapseStatusBar(String p1){ p0.enforceExpandStatusBar(); int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingUid(); boolean v3 = CompatChanges.isChangeEnabled(173031413, v1);","boolean v1 = p0.checkCanCollapseStatusBar(""handleSystemKey""); p0.enforceExpandStatusBar();",0.836973249912262
collapsePanels()V,handleSystemKey(I)V,"boolean v1 = p0.checkCanCollapseStatusBar(""collapsePanels""); p0.enforceExpandStatusBar(); this.mBar.animateCollapsePanels();","boolean v1 = p0.checkCanCollapseStatusBar(""handleSystemKey""); p0.enforceExpandStatusBar();",0.8567057847976685
collapsePanels()V,togglePanel()V,"boolean v1 = p0.checkCanCollapseStatusBar(""collapsePanels""); p0.enforceExpandStatusBar(); this.mBar.animateCollapsePanels();","public void togglePanel(){ boolean v1 = p0.checkCanCollapseStatusBar(""togglePanel""); boolean v2 = p0.isDisable2FlagSet(4);",0.8546744585037231
handleSystemKey(I)V,collapsePanels()V,"boolean v1 = p0.checkCanCollapseStatusBar(""handleSystemKey""); p0.enforceExpandStatusBar();","boolean v1 = p0.checkCanCollapseStatusBar(""collapsePanels""); p0.enforceExpandStatusBar(); this.mBar.animateCollapsePanels();",0.8567057847976685
handleSystemKey(I)V,togglePanel()V,"boolean v1 = p0.checkCanCollapseStatusBar(""handleSystemKey""); p0.enforceExpandStatusBar();","public boolean checkCanCollapseStatusBar(String p1){ p0.enforceExpandStatusBar(); int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingUid(); boolean v3 = CompatChanges.isChangeEnabled(173031413, v1);",0.836973249912262
onSessionEnded(ILcom/android/internal/logging/InstanceId;)V,registerSessionListener(ILcom/android/internal/statusbar/ISessionListener;)V,"this.mSessionMonitor.onSessionEnded(p1, p2);","this.mSessionMonitor.registerSessionListener(p1, p2);",0.862453043460846
disable(ILandroid/os/IBinder;Ljava/lang/String;)V,disable2(ILandroid/os/IBinder;Ljava/lang/String;)V,"public void disable(int p1, IBinder p2, String p3){ p0.disableForUser(p1, p2, p3, this.mCurrentUserId); public void disableForUser(int p1, IBinder p2, String p3, int p4){ p0.enforceStatusBar(); p0.disableLocked(0, p4, p1, p2, p3, 1); public void disableLocked(int p1, int p2, int p3, IBinder p4, String p5, int p6){ p0.manageDisableListLocked(p2, p3, p4, p5, p6); int v2 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v3 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v4 = p0.getUiState(p1); boolean v5 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v4, v2, v3); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v4, v2, v3); StatusBarManagerService$$ExternalSyntheticLambda6 v6 = new StatusBarManagerService$$ExternalSyntheticLambda6(p0,v2); boolean v8 = this.mHandler.post(v6); this.mBar.disable(p1, v2, v3);","p0.disableLocked(0, p4, p1, p2, p3, 2); p0.manageDisableListLocked(p2, p3, p4, p5, p6); int v2 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 1); int v3 = p0.gatherDisableActionsLocked(this.mCurrentUserId, 2); StatusBarManagerService$UiState v4 = p0.getUiState(p1); boolean v5 = StatusBarManagerService$UiState.-$$Nest$mdisableEquals(v4, v2, v3); StatusBarManagerService$UiState.-$$Nest$msetDisabled(v4, v2, v3); StatusBarManagerService$$ExternalSyntheticLambda6 v6 = new StatusBarManagerService$$ExternalSyntheticLambda6(p0,v2); boolean v8 = this.mHandler.post(v6);",0.8213374018669128
getNavBarMode()I,setNavBarMode(I)V,"int v4 = Settings$Secure.getIntForUser(v3, ""nav_bar_kids_mode"", this.mCurrentUserId); return v4;","boolean v4 = Settings$Secure.putIntForUser(v3, ""nav_bar_kids_mode"", p1, this.mCurrentUserId); boolean v6 = Settings$Secure.putIntForUser(v5, ""nav_bar_force_visible"", p1, this.mCurrentUserId);",0.8439133763313293
onSessionStarted(ILcom/android/internal/logging/InstanceId;)V,No similar EPs with similarity > 0.8,,,
registerNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,unregisterNearbyMediaDevicesProvider(Landroid/media/INearbyMediaDevicesProvider;)V,this.mBar.registerNearbyMediaDevicesProvider(p1);,this.mBar.unregisterNearbyMediaDevicesProvider(p1); p0.enforceMediaContentControl();,0.914763867855072
clearNotificationEffects()V,No similar EPs with similarity > 0.8,,,
onBiometricHelp(ILjava/lang/String;)V,No similar EPs with similarity > 0.8,,,
cancelRequestAddTile(Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
getDisableFlags(Landroid/os/IBinder;I)[I,No similar EPs with similarity > 0.8,,,
hideAuthenticationDialog(J)V,showAuthenticationDialog(Landroid/hardware/biometrics/PromptInfo;Landroid/hardware/biometrics/IBiometricSysuiReceiver;[IZZIJLjava/lang/String;JI)V,this.mBar.hideAuthenticationDialog(p1);,"this.mBar.showAuthenticationDialog(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);",0.8986908197402954
addTile(Landroid/content/ComponentName;)V,clickTile(Landroid/content/ComponentName;)V,this.mBar.addQsTile(p1); p0.enforceStatusBarOrShell();,this.mBar.clickQsTile(p1);,0.824985921382904
setIconVisibility(Ljava/lang/String;Z)V,setIcon(Ljava/lang/String;Ljava/lang/String;IILjava/lang/String;)V,"Object v2 = this.mIcons.get(p1); StatusBarIcon.visible = p2; this.mBar.setIcon(p1, v2);","StatusBarIcon v1 = new StatusBarIcon(p2,UserHandle.SYSTEM,p3,p4,0,p5); Object v3 = this.mIcons.put(p1, v1); this.mBar.setIcon(p1, v1);",0.8697917461395264
grantUriPermissionFromOwner(Landroid/os/IBinder;ILjava/lang/String;Landroid/net/Uri;III)V,releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,"p0.grantUriPermissionFromOwnerUnlocked(p1, p2, p3, p4, p5, p6, p7); GrantUri v7 = new GrantUri(p6,p4,p5); int v1 = this.mPmInternal.getPackageUid(p2, 268435456, p6); int v2 = p0.checkGrantUriPermissionUnlocked(p1, p2, p3, p4, v1); p0.grantUriPermissionUnchecked(v2, p2, p3, p4, p5);","GrantUri v5 = new GrantUri(p4, p1, 128); UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5); boolean v10 = v7.releasePersistableModes(p2);",0.8167453408241272
grantUriPermissionFromOwner(Landroid/os/IBinder;ILjava/lang/String;Landroid/net/Uri;III)V,releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,"p0.grantUriPermissionFromOwnerUnlocked(p1, p2, p3, p4, p5, p6, p7); GrantUri v7 = new GrantUri(p6,p4,p5); int v1 = this.mPmInternal.getPackageUid(p2, 268435456, p6); int v2 = p0.checkGrantUriPermissionUnlocked(p1, p2, p3, p4, v1); p0.grantUriPermissionUnchecked(v2, p2, p3, p4, p5);","GrantUri v3 = new GrantUri(p4, p1, 0); UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3); boolean v8 = v5.releasePersistableModes(p2);",0.8121235370635986
getUriPermissions(Ljava/lang/String;ZZ)Landroid/content/pm/ParceledListSlice;,getGrantedUriPermissions(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;,ArrayList v7 = Lists.newArrayList(); ParceledListSlice v13 = new ParceledListSlice(v7); return v13;,ArrayList v1 = new ArrayList(); ParceledListSlice v3 = new ParceledListSlice(v1); return v3;,0.9706020951271057
releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,takePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,"GrantUri v5 = new GrantUri(p4, p1, 128); UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5); boolean v10 = v7.releasePersistableModes(p2);","GrantUri v3 = new GrantUri(p4,p1,0); UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3); GrantUri v5 = new GrantUri(p4,p1,128); UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);",0.9271271824836731
releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,takePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,"GrantUri v3 = new GrantUri(p4, p1, 0); UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3); boolean v8 = v5.releasePersistableModes(p2);","GrantUri v3 = new GrantUri(p4,p1,0); UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3); GrantUri v5 = new GrantUri(p4,p1,128); UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);",0.925805926322937
getGrantedUriPermissions(Ljava/lang/String;I)Landroid/content/pm/ParceledListSlice;,getUriPermissions(Ljava/lang/String;ZZ)Landroid/content/pm/ParceledListSlice;,ArrayList v1 = new ArrayList(); ParceledListSlice v3 = new ParceledListSlice(v1); return v3;,ArrayList v7 = Lists.newArrayList(); ParceledListSlice v13 = new ParceledListSlice(v7); return v13;,0.9706020951271057
takePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,"GrantUri v3 = new GrantUri(p4,p1,0); UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3); GrantUri v5 = new GrantUri(p4,p1,128); UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);","GrantUri v5 = new GrantUri(p4, p1, 128); UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5); boolean v10 = v7.releasePersistableModes(p2);",0.9271271824836731
takePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,releasePersistableUriPermission(Landroid/net/Uri;ILjava/lang/String;I)V,"GrantUri v3 = new GrantUri(p4,p1,0); UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3); GrantUri v5 = new GrantUri(p4,p1,128); UriPermission v7 = p0.findUriPermissionLocked(phiInstruction, v5);","GrantUri v3 = new GrantUri(p4, p1, 0); UriPermission v5 = p0.findUriPermissionLocked(phiInstruction, v3); boolean v8 = v5.releasePersistableModes(p2);",0.925805926322937
clearGrantedUriPermissions(Ljava/lang/String;I)V,removeImeSurface()V,"Message v2 = this.mH.obtainMessage(1); boolean v3 = this.mH.sendMessageDelayed(v2, 10000);",Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,0.8173137307167053
getCurrentRules()Landroid/content/pm/ParceledListSlice;,No similar EPs with similarity > 0.8,,,
getWhitelistedRuleProviders()Ljava/util/List;,getDvbDeviceList()Ljava/util/List;,ArrayList v3 = new ArrayList(); return v3;,ArrayList v3 = new ArrayList(); List v7 = Collections.unmodifiableList(v3); return v7;,0.8742842674255371
getWhitelistedRuleProviders()Ljava/util/List;,getCurrentRuleSetVersion()Ljava/lang/String;,List v1 = p0.getAllowedRuleProviderSystemApps(); return v1;,List v1 = p0.getAllowedRuleProviderSystemApps(); List v2 = p0.getPackageListForUid(p1); ArrayList v2 = new ArrayList(); Iterator v4 = v2.iterator(); boolean v5 = v4.hasNext(); boolean v6 = v2.isEmpty();,0.8483672142028809
getCurrentRuleSetVersion()Ljava/lang/String;,getWhitelistedRuleProviders()Ljava/util/List;,List v1 = p0.getAllowedRuleProviderSystemApps(); List v2 = p0.getPackageListForUid(p1); ArrayList v2 = new ArrayList(); Iterator v4 = v2.iterator(); boolean v5 = v4.hasNext(); boolean v6 = v2.isEmpty();,List v1 = p0.getAllowedRuleProviderSystemApps(); return v1;,0.8483672142028809
getCurrentRuleSetProvider()Ljava/lang/String;,No similar EPs with similarity > 0.8,,,
beginRecognition(Landroid/media/musicrecognition/RecognitionRequest;Landroid/os/IBinder;)V,No similar EPs with similarity > 0.8,,,
isParentalControlsEnabled(I)Z,setParentalControlsEnabled(ZI)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""isParentalControlsEnabled""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); boolean v8 = v7.isParentalControlsEnabled(); return v8;","int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""setParentalControlsEnabled""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7); v8.setParentalControlsEnabled(p1);",0.9749832153320312
isParentalControlsEnabled(I)Z,isSingleSessionActive(I)Z,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""isParentalControlsEnabled""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); boolean v8 = v7.isParentalControlsEnabled(); return v8;","int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, ""isSingleSessionActive""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);",0.8877894282341003
isSingleSessionActive(I)Z,createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, ""isSingleSessionActive""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""createSession""); TvInputManagerService$UserState v12 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v13 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v12); Object v14 = v13.get(p2);",0.9328297972679138
isSingleSessionActive(I)Z,tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, ""isSingleSessionActive""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);",0.9196550846099854
tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,releaseSession(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""releaseSession""); TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mreleaseSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetUserStateLocked(this.this$0, p2); TvInputManagerService$TvInputState v8 = TvInputManagerService.-$$Nest$smgetTvInputState(v6, v7);",0.9474503993988037
tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""createSession""); TvInputManagerService$UserState v12 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v13 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v12); Object v14 = v13.get(p2);",0.9335177540779114
getTvInputState(Ljava/lang/String;I)I,relayoutOverlayView(Landroid/os/IBinder;Landroid/graphics/Rect;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""getTvInputState""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""relayoutOverlayView""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);",0.9644519090652466
getTvInputState(Ljava/lang/String;I)I,createOverlayView(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/graphics/Rect;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""getTvInputState""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""createOverlayView""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);",0.9614880084991455
setInteractiveAppNotificationEnabled(Landroid/os/IBinder;ZI)V,timeShiftEnablePositionTracking(Landroid/os/IBinder;ZI)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setInteractiveAppNotificationEnabled""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.setInteractiveAppNotificationEnabled(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftEnablePositionTracking""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftEnablePositionTracking(p2);",0.8959735035896301
setInteractiveAppNotificationEnabled(Landroid/os/IBinder;ZI)V,timeShiftPause(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setInteractiveAppNotificationEnabled""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.setInteractiveAppNotificationEnabled(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.8863227367401123
unregisterCallback(Landroid/media/tv/ITvInputManagerCallback;I)V,isRatingBlocked(Ljava/lang/String;I)Z,"TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext, p1, 0); this.mUserStates.put(p1, v1);","TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0); this.mUserStates.put(p1, v1);",0.9961750507354736
unregisterCallback(Landroid/media/tv/ITvInputManagerCallback;I)V,registerCallback(Landroid/media/tv/ITvInputManagerCallback;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""unregisterCallback""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); RemoteCallbackList v7 = TvInputManagerService$UserState.-$$Nest$fgetmCallbacks(v6); boolean v8 = v7.unregister(p1); Map v9 = TvInputManagerService$UserState.-$$Nest$fgetcallbackPidUidMap(v6); Object v10 = v9.remove(p1);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""registerCallback""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); RemoteCallbackList v7 = TvInputManagerService$UserState.-$$Nest$fgetmCallbacks(v6); boolean v8 = v7.register(p1);",0.9212309718132019
removeBlockedRating(Ljava/lang/String;I)V,isRatingBlocked(Ljava/lang/String;I)Z,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""removeBlockedRating""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7); TvContentRating v9 = TvContentRating.unflattenFromString(p1); v8.removeBlockedRating(v9);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""isRatingBlocked""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); TvContentRating v8 = TvContentRating.unflattenFromString(p1); boolean v9 = v7.isRatingBlocked(v8);",0.9731816053390503
removeBlockedRating(Ljava/lang/String;I)V,getBlockedRatings(I)Ljava/util/List;,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""removeBlockedRating""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7); TvContentRating v9 = TvContentRating.unflattenFromString(p1); v8.removeBlockedRating(v9);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getBlockedRatings""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); TvContentRating v9 = v8.getBlockedRatings(); return v6;",0.9493948817253113
sendTvInputNotifyIntent(Landroid/content/Intent;I)V,requestBroadcastInfo(Landroid/os/IBinder;Landroid/media/tv/BroadcastInfoRequest;I)V,"int v12 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v10, v11, p2, ""sendTvInputNotifyIntent""); UserHandle v14 = new UserHandle(v12); v14.sendBroadcastAsUser(p1, v14);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""requestBroadcastInfo""); int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid();",0.8485488295555115
getExtensionInterface(Ljava/lang/String;Ljava/lang/String;I)Landroid/os/IBinder;,createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p3, ""getExtensionInterface""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7); Object v9 = v8.get(p1); Map v10 = TvInputManagerService$UserState.-$$Nest$fgetserviceStateMap(v7); TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9); ComponentName v12 = v11.getComponent(); Object v13 = v10.get(v12); boolean v14 = TvInputManagerService$ServiceState.-$$Nest$fgetisHardware(v13); ITvInputService v15 = TvInputManagerService$ServiceState.-$$Nest$fgetservice(v13);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""createSession""); TvInputManagerService$UserState v12 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v13 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v12); Object v14 = v13.get(p2);",0.9078948497772217
getExtensionInterface(Ljava/lang/String;Ljava/lang/String;I)Landroid/os/IBinder;,getAvailableExtensionInterfaceNames(Ljava/lang/String;I)Ljava/util/List;,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p3, ""getExtensionInterface""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7); Object v9 = v8.get(p1); Map v10 = TvInputManagerService$UserState.-$$Nest$fgetserviceStateMap(v7); TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9); ComponentName v12 = v11.getComponent(); Object v13 = v10.get(v12); boolean v14 = TvInputManagerService$ServiceState.-$$Nest$fgetisHardware(v13); ITvInputService v15 = TvInputManagerService$ServiceState.-$$Nest$fgetservice(v13);","int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p2, ""getAvailableExtensionInterfaceNames""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7); Object v9 = v8.get(p1); TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9);",0.9062875509262085
getTvContentRatingSystemList(I)Ljava/util/List;,isRatingBlocked(Ljava/lang/String;I)Z,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v4, p1, ""getTvContentRatingSystemList""); long v6 = Binder.clearCallingIdentity(); Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); List v9 = TvInputManagerService$UserState.-$$Nest$fgetcontentRatingSystemList(v8); return v9;","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""isRatingBlocked""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); TvContentRating v8 = TvContentRating.unflattenFromString(p1); boolean v9 = v7.isRatingBlocked(v8);",0.8713839054107666
getTvContentRatingSystemList(I)Ljava/util/List;,tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v4, p1, ""getTvContentRatingSystemList""); long v6 = Binder.clearCallingIdentity(); Object v7 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); List v9 = TvInputManagerService$UserState.-$$Nest$fgetcontentRatingSystemList(v8); return v9;","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);",0.8492521047592163
addBlockedRating(Ljava/lang/String;I)V,removeBlockedRating(Ljava/lang/String;I)V,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""addBlockedRating""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4);","int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""removeBlockedRating""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7); TvContentRating v9 = TvContentRating.unflattenFromString(p1); v8.removeBlockedRating(v9);",0.9450280666351318
addBlockedRating(Ljava/lang/String;I)V,isRatingBlocked(Ljava/lang/String;I)Z,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""addBlockedRating""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""isRatingBlocked""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); TvContentRating v8 = TvContentRating.unflattenFromString(p1); boolean v9 = v7.isRatingBlocked(v8);",0.9205684661865234
requestAd(Landroid/os/IBinder;Landroid/media/tv/AdRequest;I)V,No similar EPs with similarity > 0.8,,,
getClientPid(Ljava/lang/String;)I,getClientPriority(ILjava/lang/String;)I,int v4 = p0.getClientPidLocked(p1); Map v1 = TvInputManagerService.-$$Nest$fgetmSessionIdToSessionStateMap(this.this$0); Object v2 = v1.get(p1); int v5 = TvInputManagerService$SessionState.-$$Nest$fgetcallingPid(v4);,int v5 = p0.getClientPidLocked(p2); Map v1 = TvInputManagerService.-$$Nest$fgetmSessionIdToSessionStateMap(this.this$0); Object v2 = v1.get(p1); int v5 = TvInputManagerService$SessionState.-$$Nest$fgetcallingPid(v4);,0.9981073141098022
getClientPid(Ljava/lang/String;)I,isSingleSessionActive(I)Z,int v4 = p0.getClientPidLocked(p1); Map v1 = TvInputManagerService.-$$Nest$fgetmSessionIdToSessionStateMap(this.this$0); Object v2 = v1.get(p1); int v5 = TvInputManagerService$SessionState.-$$Nest$fgetcallingPid(v4);,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, ""isSingleSessionActive""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);",0.8063305020332336
dispatchSurfaceChanged(Landroid/os/IBinder;IIII)V,setSurface(Landroid/os/IBinder;Landroid/view/Surface;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""dispatchSurfaceChanged""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3); ITvInputSession v7 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, v6); v7.dispatchSurfaceChanged(p2, p3, p4);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setSurface""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetUserStateLocked(this.this$0, p3);",0.9075697064399719
dispatchSurfaceChanged(Landroid/os/IBinder;IIII)V,timeShiftPause(Landroid/os/IBinder;I)V,"TvInputManagerService$SessionState v1 = p1.getSessionStateLocked(p2, p3, v1); ITvInputSession v1 = TvInputManagerService$SessionState.-$$Nest$fgetsession(p1); int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.8206071853637695
requestChannelBrowsable(Landroid/net/Uri;I)V,requestBroadcastInfo(Landroid/os/IBinder;Landroid/media/tv/BroadcastInfoRequest;I)V,"String v1 = p0.getCallingPackageName(); int v2 = Binder.getCallingPid(); int v3 = Binder.getCallingUid(); int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""requestChannelBrowsable"");","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""requestBroadcastInfo""); int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid();",0.8738863468170166
requestChannelBrowsable(Landroid/net/Uri;I)V,setVolume(Landroid/os/IBinder;FI)V,"String v1 = p0.getCallingPackageName(); int v2 = Binder.getCallingPid(); int v3 = Binder.getCallingUid(); int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""requestChannelBrowsable"");","int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setVolume"");",0.868148922920227
setMainSession(Landroid/os/IBinder;I)V,tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p2, ""setMainSession""); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); IBinder v9 = TvInputManagerService$UserState.-$$Nest$fgetmainSessionToken(v8); TvInputManagerService.-$$Nest$msetMainLocked(this.this$0, v10, 0, 1000, p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);",0.8700442910194397
setMainSession(Landroid/os/IBinder;I)V,releaseSession(Landroid/os/IBinder;I)V,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p2, ""setMainSession""); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); IBinder v9 = TvInputManagerService$UserState.-$$Nest$fgetmainSessionToken(v8); TvInputManagerService.-$$Nest$msetMainLocked(this.this$0, v10, 0, 1000, p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""releaseSession""); TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mreleaseSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetUserStateLocked(this.this$0, p2); TvInputManagerService$TvInputState v8 = TvInputManagerService.-$$Nest$smgetTvInputState(v6, v7);",0.8600906133651733
stopRecording(Landroid/os/IBinder;I)V,startRecording(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""stopRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.stopRecording();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""startRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.startRecording(p2, p3);",0.9662951827049255
stopRecording(Landroid/os/IBinder;I)V,resumeRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""stopRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.stopRecording();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""resumeRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.resumeRecording(p2);",0.9562522768974304
getCurrentTunedInfos(I)Ljava/util/List;,getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo;,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v4, p1, ""getTvCurrentChannelInfos""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); List v8 = TvInputManagerService.-$$Nest$mgetCurrentTunedInfosInternalLocked(this.this$0, v7, v3, v4); return v8;","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""getTvInputInfo""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v7 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v6); Object v8 = v7.get(p1);",0.8606301546096802
getCurrentTunedInfos(I)Ljava/util/List;,tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v4, p1, ""getTvCurrentChannelInfos""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); List v8 = TvInputManagerService.-$$Nest$mgetCurrentTunedInfosInternalLocked(this.this$0, v7, v3, v4); return v8;","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);",0.838409423828125
setSurface(Landroid/os/IBinder;Landroid/view/Surface;I)V,getTvInputList(I)Ljava/util/List;,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setSurface""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetUserStateLocked(this.this$0, p3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getTvInputList""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);",0.9407275319099426
setSurface(Landroid/os/IBinder;Landroid/view/Surface;I)V,dispatchSurfaceChanged(Landroid/os/IBinder;IIII)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setSurface""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetUserStateLocked(this.this$0, p3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""dispatchSurfaceChanged""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3); ITvInputSession v7 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, v6); v7.dispatchSurfaceChanged(p2, p3, p4);",0.9075697064399719
removeOverlayView(Landroid/os/IBinder;I)V,timeShiftPause(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""removeOverlayView""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.removeOverlayView();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.8784729242324829
removeOverlayView(Landroid/os/IBinder;I)V,timeShiftEnablePositionTracking(Landroid/os/IBinder;ZI)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""removeOverlayView""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.removeOverlayView();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftEnablePositionTracking""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftEnablePositionTracking(p2);",0.8715084195137024
releaseSession(Landroid/os/IBinder;I)V,tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""releaseSession""); TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mreleaseSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetUserStateLocked(this.this$0, p2); TvInputManagerService$TvInputState v8 = TvInputManagerService.-$$Nest$smgetTvInputState(v6, v7);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);",0.9474503993988037
releaseSession(Landroid/os/IBinder;I)V,createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""releaseSession""); TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mreleaseSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetUserStateLocked(this.this$0, p2); TvInputManagerService$TvInputState v8 = TvInputManagerService.-$$Nest$smgetTvInputState(v6, v7);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""createSession""); TvInputManagerService$UserState v12 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v13 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v12); Object v14 = v13.get(p2);",0.9321023225784302
getClientPriority(ILjava/lang/String;)I,getClientPid(Ljava/lang/String;)I,int v5 = p0.getClientPidLocked(p2); Map v1 = TvInputManagerService.-$$Nest$fgetmSessionIdToSessionStateMap(this.this$0); Object v2 = v1.get(p1); int v5 = TvInputManagerService$SessionState.-$$Nest$fgetcallingPid(v4);,int v4 = p0.getClientPidLocked(p1); Map v1 = TvInputManagerService.-$$Nest$fgetmSessionIdToSessionStateMap(this.this$0); Object v2 = v1.get(p1); int v5 = TvInputManagerService$SessionState.-$$Nest$fgetcallingPid(v4);,0.9981073141098022
getClientPriority(ILjava/lang/String;)I,isSingleSessionActive(I)Z,int v5 = p0.getClientPidLocked(p2); Map v1 = TvInputManagerService.-$$Nest$fgetmSessionIdToSessionStateMap(this.this$0); Object v2 = v1.get(p1); int v5 = TvInputManagerService$SessionState.-$$Nest$fgetcallingPid(v4);,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, ""isSingleSessionActive""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);",0.8061208128929138
getBlockedRatings(I)Ljava/util/List;,removeBlockedRating(Ljava/lang/String;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getBlockedRatings""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); TvContentRating v9 = v8.getBlockedRatings(); return v6;","int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""removeBlockedRating""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7); TvContentRating v9 = TvContentRating.unflattenFromString(p1); v8.removeBlockedRating(v9);",0.9493948817253113
getBlockedRatings(I)Ljava/util/List;,isRatingBlocked(Ljava/lang/String;I)Z,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getBlockedRatings""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); TvContentRating v9 = v8.getBlockedRatings(); return v6;","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""isRatingBlocked""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); TvContentRating v8 = TvContentRating.unflattenFromString(p1); boolean v9 = v7.isRatingBlocked(v8);",0.9333261251449585
getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo;,createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""getTvInputInfo""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v7 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v6); Object v8 = v7.get(p1);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""createSession""); TvInputManagerService$UserState v12 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v13 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v12); Object v14 = v13.get(p2);",0.953310489654541
getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo;,getTvInputList(I)Ljava/util/List;,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""getTvInputInfo""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v7 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v6); Object v8 = v7.get(p1);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getTvInputList""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);",0.9090855717658997
captureFrame(Ljava/lang/String;Landroid/view/Surface;Landroid/media/tv/TvStreamConfig;I)Z,getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo;,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p4, ""captureFrame""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7); Object v9 = v8.get(p1); TvInputHardwareManager$2 v7 = new TvInputHardwareManager$2(p0,v3,p3); boolean v23 = v22.captureFrame(phiInstruction, p2, p3, v3, v5);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""getTvInputInfo""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v7 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v6); Object v8 = v7.get(p1);",0.8655956387519836
captureFrame(Ljava/lang/String;Landroid/view/Surface;Landroid/media/tv/TvStreamConfig;I)Z,createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p4, ""captureFrame""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7); Object v9 = v8.get(p1); TvInputHardwareManager$2 v7 = new TvInputHardwareManager$2(p0,v3,p3); boolean v23 = v22.captureFrame(phiInstruction, p2, p3, v3, v5);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""createSession""); TvInputManagerService$UserState v12 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v13 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v12); Object v14 = v13.get(p2);",0.842080295085907
getDvbDeviceList()Ljava/util/List;,getWhitelistedRuleProviders()Ljava/util/List;,ArrayList v3 = new ArrayList(); List v7 = Collections.unmodifiableList(v3); return v7;,ArrayList v3 = new ArrayList(); return v3;,0.8742842674255371
relayoutOverlayView(Landroid/os/IBinder;Landroid/graphics/Rect;I)V,createOverlayView(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/graphics/Rect;I)V,"ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); public ITvInputSession -$$Nest$mgetSessionLocked(TvInputManagerService p1, IBinder p2, int p3, int p4){ ITvInputSession v1 = p1.getSessionLocked(p2, p3, p4); public ITvInputSession getSessionLocked(IBinder p1, int p2, int p3){ TvInputManagerService$SessionState v1 = p0.getSessionStateLocked(p1, p2, p3); ITvInputSession v2 = p0.getSessionLocked(v1);","ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); public ITvInputSession -$$Nest$mgetSessionLocked(TvInputManagerService p1, IBinder p2, int p3, int p4){ ITvInputSession v1 = p1.getSessionLocked(p2, p3, p4); public ITvInputSession getSessionLocked(IBinder p1, int p2, int p3){ TvInputManagerService$SessionState v1 = p0.getSessionStateLocked(p1, p2, p3); ITvInputSession v2 = p0.getSessionLocked(v1);",1.0000001192092896
relayoutOverlayView(Landroid/os/IBinder;Landroid/graphics/Rect;I)V,createOverlayView(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/graphics/Rect;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""relayoutOverlayView""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""createOverlayView""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);",0.9949566125869751
sendAppPrivateCommand(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;I)V,setInteractiveAppNotificationEnabled(Landroid/os/IBinder;ZI)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""sendAppPrivateCommand""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.appPrivateCommand(p2, p3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setInteractiveAppNotificationEnabled""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.setInteractiveAppNotificationEnabled(p2);",0.8200363516807556
sendAppPrivateCommand(Landroid/os/IBinder;Ljava/lang/String;Landroid/os/Bundle;I)V,timeShiftPause(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""sendAppPrivateCommand""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.appPrivateCommand(p2, p3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.8177553415298462
pauseRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V,resumeRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""pauseRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.pauseRecording(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""resumeRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.resumeRecording(p2);",0.9679550528526306
pauseRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V,stopRecording(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""pauseRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.pauseRecording(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""stopRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.stopRecording();",0.9545837640762329
timeShiftResume(Landroid/os/IBinder;I)V,timeShiftPause(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftResume""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftResume();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.932478666305542
timeShiftResume(Landroid/os/IBinder;I)V,timeShiftPlay(Landroid/os/IBinder;Landroid/net/Uri;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftResume""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftResume();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftPlay""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPlay(p2);",0.9116208553314209
resumeRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V,pauseRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""resumeRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.resumeRecording(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""pauseRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.pauseRecording(p2);",0.9679550528526306
resumeRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V,startRecording(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""resumeRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.resumeRecording(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""startRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.startRecording(p2, p3);",0.9575246572494507
setVolume(Landroid/os/IBinder;FI)V,requestChannelBrowsable(Landroid/net/Uri;I)V,"int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setVolume"");","String v1 = p0.getCallingPackageName(); int v2 = Binder.getCallingPid(); int v3 = Binder.getCallingUid(); int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""requestChannelBrowsable"");",0.868148922920227
setVolume(Landroid/os/IBinder;FI)V,getTvInputList(I)Ljava/util/List;,"long v4 = Binder.clearCallingIdentity(); Object v5 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0); TvInputManagerService$SessionState v6 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getTvInputList""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);",0.8669055700302124
timeShiftSeekTo(Landroid/os/IBinder;JI)V,timeShiftPause(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftSeekTo""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftSeekTo(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.920139491558075
timeShiftSeekTo(Landroid/os/IBinder;JI)V,timeShiftResume(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftSeekTo""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftSeekTo(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftResume""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftResume();",0.9051218032836914
setCaptionEnabled(Landroid/os/IBinder;ZI)V,setInteractiveAppNotificationEnabled(Landroid/os/IBinder;ZI)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setCaptionEnabled""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.setCaptionEnabled(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setInteractiveAppNotificationEnabled""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.setInteractiveAppNotificationEnabled(p2);",0.8182674050331116
getTvInputList(I)Ljava/util/List;,setSurface(Landroid/os/IBinder;Landroid/view/Surface;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getTvInputList""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""setSurface""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetUserStateLocked(this.this$0, p3);",0.9407275319099426
getTvInputList(I)Ljava/util/List;,registerCallback(Landroid/media/tv/ITvInputManagerCallback;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getTvInputList""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""registerCallback""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); RemoteCallbackList v7 = TvInputManagerService$UserState.-$$Nest$fgetmCallbacks(v6); boolean v8 = v7.register(p1);",0.9227958917617798
removeHardwareDevice(I)V,addHardwareDevice(I)V,TvInputHardwareManager v1 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); v1.onDeviceUnavailable(p1);,"TvInputHardwareManager v8 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); v8.onDeviceAvailable(v7, 0);",0.9371740818023682
removeHardwareDevice(I)V,getHardwareList()Ljava/util/List;,TvInputHardwareManager v1 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); v1.onDeviceUnavailable(p1);,TvInputHardwareManager v4 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); List v5 = v4.getHardwareList(); return v5;,0.8111284375190735
setParentalControlsEnabled(ZI)V,isParentalControlsEnabled(I)Z,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""setParentalControlsEnabled""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7); v8.setParentalControlsEnabled(p1);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""isParentalControlsEnabled""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); boolean v8 = v7.isParentalControlsEnabled(); return v8;",0.9749832153320312
setParentalControlsEnabled(ZI)V,isSingleSessionActive(I)Z,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""setParentalControlsEnabled""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7); v8.setParentalControlsEnabled(p1);","int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p1, ""isSingleSessionActive""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetsessionStateMap(v7);",0.8772662281990051
getAvailableExtensionInterfaceNames(Ljava/lang/String;I)Ljava/util/List;,getExtensionInterface(Ljava/lang/String;Ljava/lang/String;I)Landroid/os/IBinder;,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p2, ""getAvailableExtensionInterfaceNames""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7); Object v9 = v8.get(p1); TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9);","int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p3, ""getExtensionInterface""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7); Object v9 = v8.get(p1); Map v10 = TvInputManagerService$UserState.-$$Nest$fgetserviceStateMap(v7); TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9); ComponentName v12 = v11.getComponent(); Object v13 = v10.get(v12); boolean v14 = TvInputManagerService$ServiceState.-$$Nest$fgetisHardware(v13); ITvInputService v15 = TvInputManagerService$ServiceState.-$$Nest$fgetservice(v13);",0.9062875509262085
getAvailableExtensionInterfaceNames(Ljava/lang/String;I)Ljava/util/List;,getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo;,"int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p2, ""getAvailableExtensionInterfaceNames""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7); Object v9 = v8.get(p1); TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""getTvInputInfo""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v7 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v6); Object v8 = v7.get(p1);",0.8402469158172607
getHardwareList()Ljava/util/List;,addHardwareDevice(I)V,TvInputHardwareManager v4 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); List v5 = v4.getHardwareList(); return v5;,"TvInputHardwareManager v8 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); v8.onDeviceAvailable(v7, 0);",0.8493471741676331
getHardwareList()Ljava/util/List;,removeHardwareDevice(I)V,TvInputHardwareManager v4 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); List v5 = v4.getHardwareList(); return v5;,TvInputHardwareManager v1 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); v1.onDeviceUnavailable(p1);,0.8111284375190735
registerCallback(Landroid/media/tv/ITvInputManagerCallback;I)V,getTvInputList(I)Ljava/util/List;,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""registerCallback""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); RemoteCallbackList v7 = TvInputManagerService$UserState.-$$Nest$fgetmCallbacks(v6); boolean v8 = v7.register(p1);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p1, ""getTvInputList""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);",0.9227958917617798
registerCallback(Landroid/media/tv/ITvInputManagerCallback;I)V,unregisterCallback(Landroid/media/tv/ITvInputManagerCallback;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""registerCallback""); long v4 = Binder.clearCallingIdentity(); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); RemoteCallbackList v7 = TvInputManagerService$UserState.-$$Nest$fgetmCallbacks(v6); boolean v8 = v7.register(p1);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""unregisterCallback""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); RemoteCallbackList v7 = TvInputManagerService$UserState.-$$Nest$fgetmCallbacks(v6); boolean v8 = v7.unregister(p1); Map v9 = TvInputManagerService$UserState.-$$Nest$fgetcallbackPidUidMap(v6); Object v10 = v9.remove(p1);",0.9212309718132019
releaseTvInputHardware(ILandroid/media/tv/ITvInputHardware;I)V,No similar EPs with similarity > 0.8,,,
startRecording(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,stopRecording(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""startRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.startRecording(p2, p3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""stopRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.stopRecording();",0.9662951827049255
startRecording(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,resumeRecording(Landroid/os/IBinder;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""startRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.startRecording(p2, p3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""resumeRecording""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.resumeRecording(p2);",0.9575246572494507
isRatingBlocked(Ljava/lang/String;I)Z,unregisterCallback(Landroid/media/tv/ITvInputManagerCallback;I)V,"TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0); this.mUserStates.put(p1, v1);","TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext, p1, 0); this.mUserStates.put(p1, v1);",0.9961750507354736
isRatingBlocked(Ljava/lang/String;I)Z,removeBlockedRating(Ljava/lang/String;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""isRatingBlocked""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6); TvContentRating v8 = TvContentRating.unflattenFromString(p1); boolean v9 = v7.isRatingBlocked(v8);","int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""removeBlockedRating""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4); PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7); TvContentRating v9 = TvContentRating.unflattenFromString(p1); v8.removeBlockedRating(v9);",0.9731816053390503
selectTrack(Landroid/os/IBinder;ILjava/lang/String;I)V,timeShiftEnablePositionTracking(Landroid/os/IBinder;ZI)V,"int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""selectTrack""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.selectTrack(p2, p3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftEnablePositionTracking""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftEnablePositionTracking(p2);",0.8726822137832642
selectTrack(Landroid/os/IBinder;ILjava/lang/String;I)V,timeShiftPause(Landroid/os/IBinder;I)V,"int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid(); int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""selectTrack""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.selectTrack(p2, p3);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.8652998208999634
requestBroadcastInfo(Landroid/os/IBinder;Landroid/media/tv/BroadcastInfoRequest;I)V,removeBroadcastInfo(Landroid/os/IBinder;II)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""requestBroadcastInfo""); int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""removeBroadcastInfo""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);",0.8851996064186096
requestBroadcastInfo(Landroid/os/IBinder;Landroid/media/tv/BroadcastInfoRequest;I)V,requestChannelBrowsable(Landroid/net/Uri;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""requestBroadcastInfo""); int v1 = Binder.getCallingUid(); int v2 = Binder.getCallingPid();","String v1 = p0.getCallingPackageName(); int v2 = Binder.getCallingPid(); int v3 = Binder.getCallingUid(); int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, ""requestChannelBrowsable"");",0.8738863468170166
removeBroadcastInfo(Landroid/os/IBinder;II)V,relayoutOverlayView(Landroid/os/IBinder;Landroid/graphics/Rect;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""removeBroadcastInfo""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""relayoutOverlayView""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);",0.921782910823822
removeBroadcastInfo(Landroid/os/IBinder;II)V,createOverlayView(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/graphics/Rect;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""removeBroadcastInfo""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""createOverlayView""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);",0.9209021925926208
timeShiftPlay(Landroid/os/IBinder;Landroid/net/Uri;I)V,timeShiftPause(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftPlay""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPlay(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.9362770915031433
timeShiftPlay(Landroid/os/IBinder;Landroid/net/Uri;I)V,timeShiftResume(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftPlay""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPlay(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftResume""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftResume();",0.9116208553314209
timeShiftPause(Landroid/os/IBinder;I)V,timeShiftEnablePositionTracking(Landroid/os/IBinder;ZI)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftEnablePositionTracking""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftEnablePositionTracking(p2);",0.959598958492279
timeShiftPause(Landroid/os/IBinder;I)V,timeShiftPlay(Landroid/os/IBinder;Landroid/net/Uri;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftPlay""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPlay(p2);",0.9362770915031433
timeShiftEnablePositionTracking(Landroid/os/IBinder;ZI)V,timeShiftPause(Landroid/os/IBinder;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftEnablePositionTracking""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftEnablePositionTracking(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p2, ""timeShiftPause""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftPause();",0.959598958492279
timeShiftEnablePositionTracking(Landroid/os/IBinder;ZI)V,tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""timeShiftEnablePositionTracking""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); v6.timeShiftEnablePositionTracking(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);",0.907943069934845
getAvailableTvStreamConfigList(Ljava/lang/String;I)Ljava/util/List;,getCurrentTunedInfos(I)Ljava/util/List;,"int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v4, v3, p2, ""getAvailableTvStreamConfigList""); TvInputHardwareManager v6 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); List v7 = v6.getAvailableTvStreamConfigList(p1, v3, v5); return v7;","int v5 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v4, p1, ""getTvCurrentChannelInfos""); TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v5); List v8 = TvInputManagerService.-$$Nest$mgetCurrentTunedInfosInternalLocked(this.this$0, v7, v3, v4); return v8;",0.8356624841690063
createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V,getTvInputInfo(Ljava/lang/String;I)Landroid/media/tv/TvInputInfo;,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""createSession""); TvInputManagerService$UserState v12 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v13 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v12); Object v14 = v13.get(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, ""getTvInputInfo""); TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v7 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v6); Object v8 = v7.get(p1);",0.953310489654541
createSession(Landroid/media/tv/ITvInputClient;Ljava/lang/String;ZII)V,tune(Landroid/os/IBinder;Landroid/net/Uri;Landroid/os/Bundle;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p5, ""createSession""); TvInputManagerService$UserState v12 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); Map v13 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v12); Object v14 = v13.get(p2);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""tune""); ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); TvInputManagerService$UserState v8 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3); TvInputManagerService$SessionState v9 = TvInputManagerService.-$$Nest$mgetSessionStateLocked(this.this$0, p1, v1, v8);",0.9335177540779114
addHardwareDevice(I)V,removeHardwareDevice(I)V,"TvInputHardwareManager v8 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); v8.onDeviceAvailable(v7, 0);",TvInputHardwareManager v1 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); v1.onDeviceUnavailable(p1);,0.9371740818023682
addHardwareDevice(I)V,getHardwareList()Ljava/util/List;,"TvInputHardwareManager v8 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); v8.onDeviceAvailable(v7, 0);",TvInputHardwareManager v4 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0); List v5 = v4.getHardwareList(); return v5;,0.8493471741676331
createOverlayView(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/graphics/Rect;I)V,relayoutOverlayView(Landroid/os/IBinder;Landroid/graphics/Rect;I)V,"ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); public ITvInputSession -$$Nest$mgetSessionLocked(TvInputManagerService p1, IBinder p2, int p3, int p4){ ITvInputSession v1 = p1.getSessionLocked(p2, p3, p4); public ITvInputSession getSessionLocked(IBinder p1, int p2, int p3){ TvInputManagerService$SessionState v1 = p0.getSessionStateLocked(p1, p2, p3); ITvInputSession v2 = p0.getSessionLocked(v1);","ITvInputSession v6 = TvInputManagerService.-$$Nest$mgetSessionLocked(this.this$0, p1, v1, v3); public ITvInputSession -$$Nest$mgetSessionLocked(TvInputManagerService p1, IBinder p2, int p3, int p4){ ITvInputSession v1 = p1.getSessionLocked(p2, p3, p4); public ITvInputSession getSessionLocked(IBinder p1, int p2, int p3){ TvInputManagerService$SessionState v1 = p0.getSessionStateLocked(p1, p2, p3); ITvInputSession v2 = p0.getSessionLocked(v1);",1.0000001192092896
createOverlayView(Landroid/os/IBinder;Landroid/os/IBinder;Landroid/graphics/Rect;I)V,relayoutOverlayView(Landroid/os/IBinder;Landroid/graphics/Rect;I)V,"int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p4, ""createOverlayView""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);","int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v1, p3, ""relayoutOverlayView""); public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){ int v1 = p1.resolveCallingUserId(p2, p3, p4, p5); public int resolveCallingUserId(int p1, int p2, int p3, String p4){ int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);",0.9949566125869751
unblockContent(Landroid/os/IBinder;Ljava/lang/String;I)V,No similar EPs with similarity > 0.8,,,
cancelVibrate(ILandroid/os/IBinder;)V,No similar EPs with similarity > 0.8,,,
registerVibratorStateListener(ILandroid/os/IVibratorStateListener;)Z,unregisterVibratorStateListener(ILandroid/os/IVibratorStateListener;)Z,"Object v2 = this.mVibrators.get(p1); boolean v3 = v2.registerVibratorStateListener(p2); long v1 = Binder.clearCallingIdentity(); boolean v2 = this.mVibratorStateListeners.register(p1); p0.notifyStateListener(p1, this.mIsVibrating); p1.onVibrating(p2);",Object v2 = this.mVibrators.get(p1); boolean v3 = v2.unregisterVibratorStateListener(p2);,0.8685743808746338
unregisterVibratorStateListener(ILandroid/os/IVibratorStateListener;)Z,registerVibratorStateListener(ILandroid/os/IVibratorStateListener;)Z,Object v2 = this.mVibrators.get(p1); boolean v3 = v2.unregisterVibratorStateListener(p2);,"Object v2 = this.mVibrators.get(p1); boolean v3 = v2.registerVibratorStateListener(p2); long v1 = Binder.clearCallingIdentity(); boolean v2 = this.mVibratorStateListeners.register(p1); p0.notifyStateListener(p1, this.mIsVibrating); p1.onVibrating(p2);",0.8685743808746338
getVibratorInfo(I)Landroid/os/VibratorInfo;,isVibrating(I)Z,Object v1 = this.mVibrators.get(p1); VibratorInfo v2 = v1.getVibratorInfo(); return phiInstruction;,Object v2 = this.mVibrators.get(p1); boolean v3 = v2.isVibrating(); return phiInstruction;,0.925897479057312
setAlwaysOnEffect(ILjava/lang/String;ILandroid/os/CombinedVibration;Landroid/os/VibrationAttributes;)Z,No similar EPs with similarity > 0.8,,,
isVibrating(I)Z,getVibratorInfo(I)Landroid/os/VibratorInfo;,Object v2 = this.mVibrators.get(p1); boolean v3 = v2.isVibrating(); return phiInstruction;,Object v1 = this.mVibrators.get(p1); VibratorInfo v2 = v1.getVibratorInfo(); return phiInstruction;,0.925897479057312
vibrate(IILjava/lang/String;Landroid/os/CombinedVibration;Landroid/os/VibrationAttributes;Ljava/lang/String;Landroid/os/IBinder;)V,No similar EPs with similarity > 0.8,,,
getVibratorIds()[I,No similar EPs with similarity > 0.8,,,
clearVcnConfig(Landroid/os/ParcelUuid;Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
addVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,removeVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,"VcnManagementService$$ExternalSyntheticLambda2 v2 = new VcnManagementService$$ExternalSyntheticLambda2(p0,p1); Binder.withCleanCallingIdentity(v2);","VcnManagementService$$ExternalSyntheticLambda3 v2 = new VcnManagementService$$ExternalSyntheticLambda3(p0,p1); Binder.withCleanCallingIdentity(v2);",0.9946724772453308
addVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,setVcnConfig(Landroid/os/ParcelUuid;Landroid/net/vcn/VcnConfig;Ljava/lang/String;)V,"VcnManagementService$$ExternalSyntheticLambda2 v2 = new VcnManagementService$$ExternalSyntheticLambda2(p0,p1); Binder.withCleanCallingIdentity(v2);","VcnManagementService$$ExternalSyntheticLambda4 v16 = new VcnManagementService$$ExternalSyntheticLambda4(p0,p1,p2); Binder.withCleanCallingIdentity(v16);",0.9896705150604248
removeVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,addVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,"VcnManagementService$$ExternalSyntheticLambda3 v2 = new VcnManagementService$$ExternalSyntheticLambda3(p0,p1); Binder.withCleanCallingIdentity(v2);","VcnManagementService$$ExternalSyntheticLambda2 v2 = new VcnManagementService$$ExternalSyntheticLambda2(p0,p1); Binder.withCleanCallingIdentity(v2);",0.9946724772453308
removeVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,setVcnConfig(Landroid/os/ParcelUuid;Landroid/net/vcn/VcnConfig;Ljava/lang/String;)V,"VcnManagementService$$ExternalSyntheticLambda3 v2 = new VcnManagementService$$ExternalSyntheticLambda3(p0,p1); Binder.withCleanCallingIdentity(v2);","VcnManagementService$$ExternalSyntheticLambda4 v16 = new VcnManagementService$$ExternalSyntheticLambda4(p0,p1,p2); Binder.withCleanCallingIdentity(v16);",0.9886142611503601
setVcnConfig(Landroid/os/ParcelUuid;Landroid/net/vcn/VcnConfig;Ljava/lang/String;)V,addVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,"VcnManagementService$$ExternalSyntheticLambda4 v16 = new VcnManagementService$$ExternalSyntheticLambda4(p0,p1,p2); Binder.withCleanCallingIdentity(v16);","VcnManagementService$$ExternalSyntheticLambda2 v2 = new VcnManagementService$$ExternalSyntheticLambda2(p0,p1); Binder.withCleanCallingIdentity(v2);",0.9896705150604248
setVcnConfig(Landroid/os/ParcelUuid;Landroid/net/vcn/VcnConfig;Ljava/lang/String;)V,removeVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,"VcnManagementService$$ExternalSyntheticLambda4 v16 = new VcnManagementService$$ExternalSyntheticLambda4(p0,p1,p2); Binder.withCleanCallingIdentity(v16);","VcnManagementService$$ExternalSyntheticLambda3 v2 = new VcnManagementService$$ExternalSyntheticLambda3(p0,p1); Binder.withCleanCallingIdentity(v2);",0.9886142611503601
getConfiguredSubscriptionGroups(Ljava/lang/String;)Ljava/util/List;,portSelect(ILandroid/hardware/hdmi/IHdmiControlCallback;)V,p0.enforcePrimaryUser();,p0.enforceAccessPermission();,0.8228601813316345
getConfiguredSubscriptionGroups(Ljava/lang/String;)Ljava/util/List;,getDeviceList()Ljava/util/List;,p0.enforcePrimaryUser();,p0.enforceAccessPermission();,0.8228601813316345
registerVcnStatusCallback(Landroid/os/ParcelUuid;Landroid/net/vcn/IVcnStatusCallback;Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
unregisterVcnStatusCallback(Landroid/net/vcn/IVcnStatusCallback;)V,No similar EPs with similarity > 0.8,,,
getAuthenticatorId(II)J,prepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){ ServiceProvider v1 = p1.getProviderForSensor(p2); long v4 = v3.getAuthenticatorId(p1, p2); return v4;","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ServiceProvider v1 = p1.getProviderForSensor(p2); return v1;",0.9174738526344299
getAuthenticatorId(II)J,getEnrolledFaces(IILjava/lang/String;)Ljava/util/List;,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){ ServiceProvider v1 = p1.getProviderForSensor(p2); long v4 = v3.getAuthenticatorId(p1, p2); return v4;","ServiceProvider v6 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){ ServiceProvider v1 = p1.getProviderForSensor(p2); public ServiceProvider getProviderForSensor(int p1){ Iterator v1 = this.mServiceProviders.iterator();",0.913934051990509
getSensorProperties(ILjava/lang/String;)Landroid/hardware/face/FaceSensorPropertiesInternal;,getSensorPropertiesInternal(Ljava/lang/String;)Ljava/util/List;,FaceSensorPropertiesInternal v4 = v3.getSensorProperties(p1); return v4;,List v3 = FaceService.-$$Nest$mgetSensorProperties(this.this$0); return v3; List v1 = p1.getSensorProperties(); return v1; ArrayList v0 = new ArrayList(); return v0;,0.8451244831085205
hasEnrolledFaces(IILjava/lang/String;)Z,No similar EPs with similarity > 0.8,,,
addLockoutResetCallback(Landroid/hardware/biometrics/IBiometricServiceLockoutResetCallback;Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
detectFace(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)J,No similar EPs with similarity > 0.8,,,
remove(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,cancelEnrollment(Landroid/os/IBinder;J)V,"Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v4 = Pair.first.intValue(); Pair.second.scheduleRemove(v4, p1, p2, p3, p4, p5); Pair v1 = p1.getSingleProvider(); List v1 = p0.getSensorProperties(); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6);","List v1 = p0.getSensorProperties(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6);",0.8225153684616089
remove(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,enroll(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[ILandroid/view/Surface;Z)J,"Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v4 = Pair.first.intValue(); Pair.second.scheduleRemove(v4, p1, p2, p3, p4, p5); Pair v1 = p1.getSingleProvider(); List v1 = p0.getSensorProperties(); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6);","Pair v1 = p1.getSingleProvider(); List v1 = p0.getSensorProperties(); int v2 = v1.size(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v5 = v4.hasNext(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);",0.8216276168823242
cancelFaceDetect(Landroid/os/IBinder;Ljava/lang/String;J)V,cancelEnrollment(Landroid/os/IBinder;J)V,"Pair v5 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v6 = Pair.first.intValue(); Pair.second.cancelFaceDetect(v6, p1, p3);","Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v4 = Pair.first.intValue(); Pair.second.cancelEnrollment(v4, p1, p2);",0.8665028810501099
cancelFaceDetect(Landroid/os/IBinder;Ljava/lang/String;J)V,cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;J)V,"Pair v5 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v6 = Pair.first.intValue(); Pair.second.cancelFaceDetect(v6, p1, p3);","Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v4 = Pair.first.intValue(); Pair.second.cancelAuthentication(v4, p1, p3);",0.8651722073554993
cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;J)V,cancelEnrollment(Landroid/os/IBinder;J)V,"Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v4 = Pair.first.intValue(); Pair.second.cancelAuthentication(v4, p1, p3);","Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v4 = Pair.first.intValue(); Pair.second.cancelEnrollment(v4, p1, p2);",0.8862057328224182
cancelAuthentication(Landroid/os/IBinder;Ljava/lang/String;J)V,cancelFaceDetect(Landroid/os/IBinder;Ljava/lang/String;J)V,"Pair v3 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v4 = Pair.first.intValue(); Pair.second.cancelAuthentication(v4, p1, p3);","Pair v5 = FaceService.-$$Nest$mgetSingleProvider(this.this$0); int v6 = Pair.first.intValue(); Pair.second.cancelFaceDetect(v6, p1, p3);",0.8651722073554993
getLockoutModeForUser(II)I,resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); int v4 = v3.getLockoutModeForUser(p1, p2); return v4;","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleResetLockout(p2, p3, p4);",0.8730204701423645
getLockoutModeForUser(II)I,cancelAuthenticationFromService(ILandroid/os/IBinder;Ljava/lang/String;J)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); int v4 = v3.getLockoutModeForUser(p1, p2); return v4;","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.cancelAuthentication(p1, p2, p4);",0.8355559706687927
setFeature(Landroid/os/IBinder;IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,getFeature(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,"List v1 = p0.getSensorProperties(); Iterator v4 = this.mServiceProviders.iterator(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);","List v1 = p0.getSensorProperties(); int v2 = v1.size(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v5 = v4.hasNext(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);",0.9877036213874817
setFeature(Landroid/os/IBinder;IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,cancelEnrollment(Landroid/os/IBinder;J)V,"List v1 = p0.getSensorProperties(); Iterator v4 = this.mServiceProviders.iterator(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);","List v1 = p0.getSensorProperties(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6);",0.980220377445221
cancelEnrollment(Landroid/os/IBinder;J)V,setFeature(Landroid/os/IBinder;IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,"List v1 = p0.getSensorProperties(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6);","List v1 = p0.getSensorProperties(); Iterator v4 = this.mServiceProviders.iterator(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);",0.980220377445221
cancelEnrollment(Landroid/os/IBinder;J)V,getFeature(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,"List v1 = p0.getSensorProperties(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6);","List v1 = p0.getSensorProperties(); int v2 = v1.size(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v5 = v4.hasNext(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);",0.9659282565116882
resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,createTestSession(ILandroid/hardware/biometrics/ITestSessionCallback;Ljava/lang/String;)Landroid/hardware/biometrics/ITestSession;,Iterator v1 = this.mServiceProviders.iterator(); boolean v2 = v1.hasNext(); Object v3 = v1.next(); boolean v4 = v3.containsSensor(p1); return v3;,Iterator v1 = this.mServiceProviders.iterator(); boolean v2 = v1.hasNext(); Object v3 = v1.next(); boolean v4 = v3.containsSensor(p1); return v3;,1.0000001192092896
resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,invalidateAuthenticatorId(IILandroid/hardware/biometrics/IInvalidationCallback;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleResetLockout(p2, p3, p4);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.scheduleInvalidateAuthenticatorId(p1, p2, p3);",0.8999180793762207
registerAuthenticators(Ljava/util/List;)V,No similar EPs with similarity > 0.8,,,
startPreparedClient(II)V,prepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.startPreparedClient(p1, p2);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ServiceProvider v1 = p1.getProviderForSensor(p2); return v1;",0.9109510779380798
startPreparedClient(II)V,resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.startPreparedClient(p1, p2);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleResetLockout(p2, p3, p4);",0.8856012225151062
createTestSession(ILandroid/hardware/biometrics/ITestSessionCallback;Ljava/lang/String;)Landroid/hardware/biometrics/ITestSession;,resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,Iterator v1 = this.mServiceProviders.iterator(); boolean v2 = v1.hasNext(); Object v3 = v1.next(); boolean v4 = v3.containsSensor(p1); return v3;,Iterator v1 = this.mServiceProviders.iterator(); boolean v2 = v1.hasNext(); Object v3 = v1.next(); boolean v4 = v3.containsSensor(p1); return v3;,1.0000001192092896
createTestSession(ILandroid/hardware/biometrics/ITestSessionCallback;Ljava/lang/String;)Landroid/hardware/biometrics/ITestSession;,prepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ITestSession v4 = v3.createTestSession(p1, p2, p3); return v4;","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ServiceProvider v1 = p1.getProviderForSensor(p2); return v1;",0.8806637525558472
isHardwareDetected(ILjava/lang/String;)Z,prepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V,"ServiceProvider v4 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); boolean v5 = v4.isHardwareDetected(p1); return v5;","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ServiceProvider v1 = p1.getProviderForSensor(p2); return v1;",0.8977432250976562
isHardwareDetected(ILjava/lang/String;)Z,startPreparedClient(II)V,"ServiceProvider v4 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); boolean v5 = v4.isHardwareDetected(p1); return v5;","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.startPreparedClient(p1, p2);",0.8655840158462524
invalidateAuthenticatorId(IILandroid/hardware/biometrics/IInvalidationCallback;)V,cancelAuthenticationFromService(ILandroid/os/IBinder;Ljava/lang/String;J)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.scheduleInvalidateAuthenticatorId(p1, p2, p3);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.cancelAuthentication(p1, p2, p4);",0.9080188274383545
invalidateAuthenticatorId(IILandroid/hardware/biometrics/IInvalidationCallback;)V,resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.scheduleInvalidateAuthenticatorId(p1, p2, p3);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleResetLockout(p2, p3, p4);",0.8999180793762207
removeAll(Landroid/os/IBinder;ILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,No similar EPs with similarity > 0.8,,,
revokeChallenge(Landroid/os/IBinder;IILjava/lang/String;J)V,generateChallenge(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleRevokeChallenge(p2, p3, p1, p4, p5);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleGenerateChallenge(p2, p3, p1, p4, p5);",0.9359691143035889
revokeChallenge(Landroid/os/IBinder;IILjava/lang/String;J)V,resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleRevokeChallenge(p2, p3, p1, p4, p5);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleResetLockout(p2, p3, p4);",0.8868186473846436
enrollRemotely(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[I)J,No similar EPs with similarity > 0.8,,,
getEnrolledFaces(IILjava/lang/String;)Ljava/util/List;,getAuthenticatorId(II)J,"ServiceProvider v6 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){ ServiceProvider v1 = p1.getProviderForSensor(p2); public ServiceProvider getProviderForSensor(int p1){ Iterator v1 = this.mServiceProviders.iterator();","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){ ServiceProvider v1 = p1.getProviderForSensor(p2); long v4 = v3.getAuthenticatorId(p1, p2); return v4;",0.913934051990509
getEnrolledFaces(IILjava/lang/String;)Ljava/util/List;,prepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V,"ServiceProvider v6 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){ ServiceProvider v1 = p1.getProviderForSensor(p2); public ServiceProvider getProviderForSensor(int p1){ Iterator v1 = this.mServiceProviders.iterator();","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ServiceProvider v1 = p1.getProviderForSensor(p2); return v1;",0.8947982788085938
cancelAuthenticationFromService(ILandroid/os/IBinder;Ljava/lang/String;J)V,invalidateAuthenticatorId(IILandroid/hardware/biometrics/IInvalidationCallback;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.cancelAuthentication(p1, p2, p4);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.scheduleInvalidateAuthenticatorId(p1, p2, p3);",0.9080188274383545
cancelAuthenticationFromService(ILandroid/os/IBinder;Ljava/lang/String;J)V,resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.cancelAuthentication(p1, p2, p4);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleResetLockout(p2, p3, p4);",0.89649498462677
dumpSensorServiceStateProto(IZ)[B,prepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V,"ServiceProvider v4 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v4.dumpProtoState(p1, v2, p2);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ServiceProvider v1 = p1.getProviderForSensor(p2); return v1;",0.8688411116600037
dumpSensorServiceStateProto(IZ)[B,startPreparedClient(II)V,"ServiceProvider v4 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v4.dumpProtoState(p1, v2, p2);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.startPreparedClient(p1, p2);",0.8490655422210693
prepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V,getAuthenticatorId(II)J,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ServiceProvider v1 = p1.getProviderForSensor(p2); return v1;","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){ ServiceProvider v1 = p1.getProviderForSensor(p2); long v4 = v3.getAuthenticatorId(p1, p2); return v4;",0.9174738526344299
prepareForAuthentication(IZLandroid/os/IBinder;JILandroid/hardware/biometrics/IBiometricSensorReceiver;Ljava/lang/String;JIZ)V,startPreparedClient(II)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); ServiceProvider v1 = p1.getProviderForSensor(p2); return v1;","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1); v3.startPreparedClient(p1, p2);",0.9109510779380798
authenticate(Landroid/os/IBinder;JILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;Z)J,No similar EPs with similarity > 0.8,,,
generateChallenge(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,revokeChallenge(Landroid/os/IBinder;IILjava/lang/String;J)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleGenerateChallenge(p2, p3, p1, p4, p5);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleRevokeChallenge(p2, p3, p1, p4, p5);",0.9359691143035889
generateChallenge(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V,"ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleGenerateChallenge(p2, p3, p1, p4, p5);","ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2); v3.scheduleResetLockout(p2, p3, p4);",0.8918377161026001
enroll(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[ILandroid/view/Surface;Z)J,getFeature(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,"Pair v1 = p1.getSingleProvider(); List v1 = p0.getSensorProperties(); int v2 = v1.size(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v5 = v4.hasNext(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);","List v1 = p0.getSensorProperties(); int v2 = v1.size(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v5 = v4.hasNext(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);",0.9517744183540344
enroll(ILandroid/os/IBinder;[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;[ILandroid/view/Surface;Z)J,setFeature(Landroid/os/IBinder;IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,"Pair v1 = p1.getSingleProvider(); List v1 = p0.getSensorProperties(); int v2 = v1.size(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v5 = v4.hasNext(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);","List v1 = p0.getSensorProperties(); Iterator v4 = this.mServiceProviders.iterator(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);",0.9492899179458618
getSensorPropertiesInternal(Ljava/lang/String;)Ljava/util/List;,getSensorProperties(ILjava/lang/String;)Landroid/hardware/face/FaceSensorPropertiesInternal;,List v3 = FaceService.-$$Nest$mgetSensorProperties(this.this$0); return v3; List v1 = p1.getSensorProperties(); return v1; ArrayList v0 = new ArrayList(); return v0;,FaceSensorPropertiesInternal v4 = v3.getSensorProperties(p1); return v4;,0.8451244831085205
getSensorPropertiesInternal(Ljava/lang/String;)Ljava/util/List;,cancelEnrollment(Landroid/os/IBinder;J)V,List v3 = FaceService.-$$Nest$mgetSensorProperties(this.this$0); return v3; List v1 = p1.getSensorProperties(); return v1; ArrayList v0 = new ArrayList(); return v0;,"List v1 = p0.getSensorProperties(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6);",0.8004723191261292
getFeature(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,setFeature(Landroid/os/IBinder;IIZ[BLandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,"List v1 = p0.getSensorProperties(); int v2 = v1.size(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v5 = v4.hasNext(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);","List v1 = p0.getSensorProperties(); Iterator v4 = this.mServiceProviders.iterator(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);",0.9877036213874817
getFeature(Landroid/os/IBinder;IILandroid/hardware/face/IFaceServiceReceiver;Ljava/lang/String;)V,cancelEnrollment(Landroid/os/IBinder;J)V,"List v1 = p0.getSensorProperties(); int v2 = v1.size(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v5 = v4.hasNext(); Object v6 = v4.next(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6); Integer v8 = Integer.valueOf(FaceSensorPropertiesInternal.sensorId);","List v1 = p0.getSensorProperties(); Object v3 = v1.get(0); Iterator v4 = this.mServiceProviders.iterator(); boolean v7 = v6.containsSensor(FaceSensorPropertiesInternal.sensorId); Pair v7 = new Pair(v8,v6);",0.9659282565116882
stopImeTrace()V,startProtoDump([BILjava/lang/String;)V,ImeTracing v1 = ImeTracing.getInstance(); v1.stopTrace(0);,ImeTracing v1 = ImeTracing.getInstance(); boolean v2 = v1.isAvailable(); boolean v3 = v1.isEnabled();,0.8268284797668457
stopImeTrace()V,isImeTraceEnabled()Z,ImeTracing v1 = ImeTracing.getInstance(); v1.stopTrace(0);,ImeTracing v1 = ImeTracing.getInstance(); boolean v2 = v1.isEnabled(); return v2;,0.8099822998046875
removeImeSurface()V,removeImeSurfaceFromWindowAsync(Landroid/os/IBinder;)V,Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,"Message v1 = this.mHandler.obtainMessage(1061, p1); v1.sendToTarget();",0.9407423734664917
removeImeSurface()V,scheduleNonStrongBiometricIdleTimeout(I)V,Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,"Message v1 = this.mHandler.obtainMessage(9, p1, 0); v1.sendToTarget();",0.9267264008522034
getInputMethodList(I)Ljava/util/List;,getAwareLockedInputMethodList(II)Ljava/util/List;,"List v1 = p0.getInputMethodListInternal(p1, 0); int v3 = this.mSettings.getCurrentUserId(); [I v4 = InputMethodUtils.resolveUserId(p1, v3, 0); List v6 = p0.getInputMethodListLocked(v4[0], p2); return v6;","List v1 = p0.getInputMethodListInternal(p1, p2); int v3 = this.mSettings.getCurrentUserId(); [I v4 = InputMethodUtils.resolveUserId(p1, v3, 0); long v5 = Binder.clearCallingIdentity(); List v6 = p0.getInputMethodListLocked(v4[0], p2); return v6; return v1;",0.9401180744171143
getInputMethodList(I)Ljava/util/List;,getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;,"List v1 = p0.getInputMethodListInternal(p1, 0); int v3 = this.mSettings.getCurrentUserId(); [I v4 = InputMethodUtils.resolveUserId(p1, v3, 0); List v6 = p0.getInputMethodListLocked(v4[0], p2); return v6;","int v1 = UserHandle.getCallingUserId(); int v2 = this.mSettings.getCurrentUserId(); [I v3 = InputMethodUtils.resolveUserId(v1, v2, 0); long v4 = Binder.clearCallingIdentity(); List v5 = p0.getEnabledInputMethodSubtypeListLocked(p1, p2, v3[0]); return v5;",0.8490983247756958
getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,"Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked(); Object v5 = this.mMethodMap.get(Pair.first); int v6 = Integer.parseInt(Pair.second); int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);","Object v3 = this.mMethodMap.get(v1); int v4 = v3.getSubtypeCount(); int v5 = this.mCurrentSubtype.hashCode(); boolean v6 = InputMethodUtils.isValidSubtypeId(v3, v5);",0.8180199861526489
startStylusHandwriting(Lcom/android/internal/view/IInputMethodClient;)V,No similar EPs with similarity > 0.8,,,
showSoftInput(Lcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;ILandroid/os/ResultReceiver;I)Z,No similar EPs with similarity > 0.8,,,
startInputOrWindowGainedFocus(ILcom/android/internal/view/IInputMethodClient;Landroid/os/IBinder;IIILandroid/view/inputmethod/EditorInfo;Lcom/android/internal/view/IInputContext;Lcom/android/internal/inputmethod/IRemoteAccessibilityInputConnection;ILandroid/window/ImeOnBackInvokedDispatcher;)Lcom/android/internal/inputmethod/InputBindResult;,No similar EPs with similarity > 0.8,,,
getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;,getAwareLockedInputMethodList(II)Ljava/util/List;,"int v1 = UserHandle.getCallingUserId(); int v2 = this.mSettings.getCurrentUserId(); [I v3 = InputMethodUtils.resolveUserId(v1, v2, 0); long v4 = Binder.clearCallingIdentity(); List v5 = p0.getEnabledInputMethodSubtypeListLocked(p1, p2, v3[0]); return v5;","List v1 = p0.getInputMethodListInternal(p1, p2); int v3 = this.mSettings.getCurrentUserId(); [I v4 = InputMethodUtils.resolveUserId(p1, v3, 0); long v5 = Binder.clearCallingIdentity(); List v6 = p0.getInputMethodListLocked(v4[0], p2); return v6; return v1;",0.8903931379318237
getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;,getInputMethodList(I)Ljava/util/List;,"int v1 = UserHandle.getCallingUserId(); int v2 = this.mSettings.getCurrentUserId(); [I v3 = InputMethodUtils.resolveUserId(v1, v2, 0); long v4 = Binder.clearCallingIdentity(); List v5 = p0.getEnabledInputMethodSubtypeListLocked(p1, p2, v3[0]); return v5;","List v1 = p0.getInputMethodListInternal(p1, 0); int v3 = this.mSettings.getCurrentUserId(); [I v4 = InputMethodUtils.resolveUserId(p1, v3, 0); List v6 = p0.getInputMethodListLocked(v4[0], p2); return v6;",0.8490983247756958
showInputMethodPickerFromSystem(Lcom/android/internal/view/IInputMethodClient;II)V,No similar EPs with similarity > 0.8,,,
getAwareLockedInputMethodList(II)Ljava/util/List;,getInputMethodList(I)Ljava/util/List;,"List v1 = p0.getInputMethodListInternal(p1, p2); int v3 = this.mSettings.getCurrentUserId(); [I v4 = InputMethodUtils.resolveUserId(p1, v3, 0); long v5 = Binder.clearCallingIdentity(); List v6 = p0.getInputMethodListLocked(v4[0], p2); return v6; return v1;","List v1 = p0.getInputMethodListInternal(p1, 0); int v3 = this.mSettings.getCurrentUserId(); [I v4 = InputMethodUtils.resolveUserId(p1, v3, 0); List v6 = p0.getInputMethodListLocked(v4[0], p2); return v6;",0.9401180744171143
getAwareLockedInputMethodList(II)Ljava/util/List;,getEnabledInputMethodSubtypeList(Ljava/lang/String;Z)Ljava/util/List;,"List v1 = p0.getInputMethodListInternal(p1, p2); int v3 = this.mSettings.getCurrentUserId(); [I v4 = InputMethodUtils.resolveUserId(p1, v3, 0); long v5 = Binder.clearCallingIdentity(); List v6 = p0.getInputMethodListLocked(v4[0], p2); return v6; return v1;","int v1 = UserHandle.getCallingUserId(); int v2 = this.mSettings.getCurrentUserId(); [I v3 = InputMethodUtils.resolveUserId(v1, v2, 0); long v4 = Binder.clearCallingIdentity(); List v5 = p0.getEnabledInputMethodSubtypeListLocked(p1, p2, v3[0]); return v5;",0.8903931379318237
isInputMethodPickerShownForTest()Z,No similar EPs with similarity > 0.8,,,
getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype;,"Object v3 = this.mMethodMap.get(v1); int v4 = v3.getSubtypeCount(); int v5 = this.mCurrentSubtype.hashCode(); boolean v6 = InputMethodUtils.isValidSubtypeId(v3, v5);","Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked(); Object v5 = this.mMethodMap.get(Pair.first); int v6 = Integer.parseInt(Pair.second); int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);",0.8180199861526489
reportPerceptibleAsync(Landroid/os/IBinder;Z)V,No similar EPs with similarity > 0.8,,,
reportVirtualDisplayGeometryAsync(Lcom/android/internal/view/IInputMethodClient;I[F)V,No similar EPs with similarity > 0.8,,,
showInputMethodPickerFromClient(Lcom/android/internal/view/IInputMethodClient;I)V,showInputMethodAndSubtypeEnablerFromClient(Lcom/android/internal/view/IInputMethodClient;Ljava/lang/String;)V,boolean v1 = p0.calledFromValidUserLocked(); boolean v2 = p0.canShowInputMethodPickerLocked(p1);,boolean v1 = p0.calledFromValidUserLocked(); p0.showInputMethodAndSubtypeEnabler(p2);,0.8628883957862854
addClient(Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;I)V,No similar EPs with similarity > 0.8,,,
startImeTrace()V,No similar EPs with similarity > 0.8,,,
removeImeSurfaceFromWindowAsync(Landroid/os/IBinder;)V,scheduleNonStrongBiometricIdleTimeout(I)V,"Message v1 = this.mHandler.obtainMessage(1061, p1); v1.sendToTarget();","Message v1 = this.mHandler.obtainMessage(9, p1, 0); v1.sendToTarget();",0.9768016338348389
removeImeSurfaceFromWindowAsync(Landroid/os/IBinder;)V,removeImeSurface()V,"Message v1 = this.mHandler.obtainMessage(1061, p1); v1.sendToTarget();",Message v2 = this.mHandler.obtainMessage(1060); v2.sendToTarget();,0.9407423734664917
startProtoDump([BILjava/lang/String;)V,isImeTraceEnabled()Z,ImeTracing v1 = ImeTracing.getInstance(); boolean v2 = v1.isAvailable(); boolean v3 = v1.isEnabled();,ImeTracing v1 = ImeTracing.getInstance(); boolean v2 = v1.isEnabled(); return v2;,0.9499703645706177
startProtoDump([BILjava/lang/String;)V,stopImeTrace()V,ImeTracing v1 = ImeTracing.getInstance(); boolean v2 = v1.isAvailable(); boolean v3 = v1.isEnabled();,ImeTracing v1 = ImeTracing.getInstance(); v1.stopTrace(0);,0.8268284797668457
getInputMethodWindowVisibleHeight(Lcom/android/internal/view/IInputMethodClient;)I,setVcnConfig(Landroid/os/ParcelUuid;Landroid/net/vcn/VcnConfig;Ljava/lang/String;)V,"InputMethodManagerService$$ExternalSyntheticLambda4 v1 = new InputMethodManagerService$$ExternalSyntheticLambda4(p0,v1,p1); Object v3 = Binder.withCleanCallingIdentity(v1); int v4 = v3.intValue(); return v4;","VcnManagementService$$ExternalSyntheticLambda4 v16 = new VcnManagementService$$ExternalSyntheticLambda4(p0,p1,p2); Binder.withCleanCallingIdentity(v16);",0.8751208782196045
getInputMethodWindowVisibleHeight(Lcom/android/internal/view/IInputMethodClient;)I,removeVcnUnderlyingNetworkPolicyListener(Landroid/net/vcn/IVcnUnderlyingNetworkPolicyListener;)V,"InputMethodManagerService$$ExternalSyntheticLambda4 v1 = new InputMethodManagerService$$ExternalSyntheticLambda4(p0,v1,p1); Object v3 = Binder.withCleanCallingIdentity(v1); int v4 = v3.intValue(); return v4;","VcnManagementService$$ExternalSyntheticLambda3 v2 = new VcnManagementService$$ExternalSyntheticLambda3(p0,p1); Binder.withCleanCallingIdentity(v2);",0.8655728697776794
setAdditionalInputMethodSubtypes(Ljava/lang/String;[Landroid/view/inputmethod/InputMethodSubtype;)V,No similar EPs with similarity > 0.8,,,
showInputMethodAndSubtypeEnablerFromClient(Lcom/android/internal/view/IInputMethodClient;Ljava/lang/String;)V,showInputMethodPickerFromClient(Lcom/android/internal/view/IInputMethodClient;I)V,boolean v1 = p0.calledFromValidUserLocked(); p0.showInputMethodAndSubtypeEnabler(p2);,boolean v1 = p0.calledFromValidUserLocked(); boolean v2 = p0.canShowInputMethodPickerLocked(p1);,0.8628883957862854
isImeTraceEnabled()Z,startProtoDump([BILjava/lang/String;)V,ImeTracing v1 = ImeTracing.getInstance(); boolean v2 = v1.isEnabled(); return v2;,ImeTracing v1 = ImeTracing.getInstance(); boolean v2 = v1.isAvailable(); boolean v3 = v1.isEnabled();,0.9499703645706177
isImeTraceEnabled()Z,stopImeTrace()V,ImeTracing v1 = ImeTracing.getInstance(); boolean v2 = v1.isEnabled(); return v2;,ImeTracing v1 = ImeTracing.getInstance(); v1.stopTrace(0);,0.8099822998046875
