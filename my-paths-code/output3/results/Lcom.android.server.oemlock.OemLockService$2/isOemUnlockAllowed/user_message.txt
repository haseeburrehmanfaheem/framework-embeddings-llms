This is path 1 for the API with depth 2:
depth : 0
public boolean isOemUnlockAllowed(){
	OemLockService.-$$Nest$menforceOemUnlockReadPermission(this.this$0);
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v6 = v5.isOemUnlockAllowedByDevice();
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$menforceOemUnlockReadPermission(OemLockService p1){
	p1.enforceOemUnlockReadPermission();
	return;
}
-----
depth : 2
public void enforceOemUnlockReadPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Update OEM Unlock bit in pst partition to ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.i("OemLock", v5);
	v1.forceOemUnlockEnabled(p1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean isOemUnlockAllowed(){
	OemLockService.-$$Nest$menforceOemUnlockReadPermission(this.this$0);
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v6 = v5.isOemUnlockAllowedByDevice();
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$menforceOemUnlockReadPermission(OemLockService p1){
	p1.enforceOemUnlockReadPermission();
	return;
}
-----
depth : 2
public void enforceOemUnlockReadPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Update OEM Unlock bit in pst partition to ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.i("OemLock", v5);
	v1.forceOemUnlockEnabled(p1);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean isOemUnlockAllowed(){
	OemLockService.-$$Nest$menforceOemUnlockReadPermission(this.this$0);
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v6 = v5.isOemUnlockAllowedByDevice();
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$menforceOemUnlockReadPermission(OemLockService p1){
	p1.enforceOemUnlockReadPermission();
	return;
}
-----
depth : 2
public void enforceOemUnlockReadPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Update OEM Unlock bit in pst partition to ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.i("OemLock", v5);
	v1.forceOemUnlockEnabled(p1);
	return;
}
-----
