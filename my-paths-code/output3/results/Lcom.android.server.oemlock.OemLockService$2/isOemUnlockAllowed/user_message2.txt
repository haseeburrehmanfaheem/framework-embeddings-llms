The method isOemUnlockAllowed has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean isOemUnlockAllowed(){
	OemLockService.-$$Nest$menforceOemUnlockReadPermission(this.this$0);
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v6 = v5.isOemUnlockAllowedByDevice();
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$menforceOemUnlockReadPermission(OemLockService p1){
	p1.enforceOemUnlockReadPermission();
	return;
}
-----
depth : 2
public void enforceOemUnlockReadPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Update OEM Unlock bit in pst partition to ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.i("OemLock", v5);
	v1.forceOemUnlockEnabled(p1);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean isOemUnlockAllowed(){
	OemLockService.-$$Nest$menforceOemUnlockReadPermission(this.this$0);
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v6 = v5.isOemUnlockAllowedByDevice();
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$menforceOemUnlockReadPermission(OemLockService p1){
	p1.enforceOemUnlockReadPermission();
	return;
}
-----
depth : 2
public void enforceOemUnlockReadPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Update OEM Unlock bit in pst partition to ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.i("OemLock", v5);
	v1.forceOemUnlockEnabled(p1);
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean isOemUnlockAllowed(){
	OemLockService.-$$Nest$menforceOemUnlockReadPermission(this.this$0);
	long v2 = Binder.clearCallingIdentity();
	OemLock v3 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v4 = v3.isOemUnlockAllowedByCarrier();
	OemLock v5 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v6 = v5.isOemUnlockAllowedByDevice();
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction);
	Binder.restoreCallingIdentity(v2);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$menforceOemUnlockReadPermission(OemLockService p1){
	p1.enforceOemUnlockReadPermission();
	return;
}
-----
depth : 2
public void enforceOemUnlockReadPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Update OEM Unlock bit in pst partition to ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.i("OemLock", v5);
	v1.forceOemUnlockEnabled(p1);
	return;
}
-----

and the following sink code:
['OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, phiInstruction);\np1.setPersistentDataBlockOemUnlockAllowedBit(p2);\nObject v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);\nv1.forceOemUnlockEnabled(p1);']

The method isOemUnlockAllowed has the following similar APIs:

- API Name: setOemUnlockEnabled(Z)V with Similarity Score: 0.9158771634101868
  - Access Control Level: SYS_OR_SIG and the following code:
PersistentDataBlockService.-$$Nest$mdoSetOemUnlockEnabledLocked(this.this$0, p1);
public void doSetOemUnlockEnabledLocked(boolean p1){
FileChannel v1 = p0.getBlockOutputChannel();
long v2 = p0.getBlockDeviceSize();
FileChannel v3 = v1.position((v2 - 1));
SystemProperties.set("sys.oem_unlock_allowed", phiInstruction);

- API Name: getOemUnlockEnabled()Z with Similarity Score: 0.8596096634864807
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v2 = PersistentDataBlockService.-$$Nest$mdoGetOemUnlockEnabled(this.this$0);
public boolean -$$Nest$mdoGetOemUnlockEnabled(PersistentDataBlockService p1){
boolean v1 = p1.doGetOemUnlockEnabled();
public boolean doGetOemUnlockEnabled(){
return 0;
return v2;

