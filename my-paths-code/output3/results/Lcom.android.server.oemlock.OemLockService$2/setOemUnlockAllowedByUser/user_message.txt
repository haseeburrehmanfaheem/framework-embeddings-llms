This is path 1 for the API with depth 2:
depth : 0
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	OemLockService.-$$Nest$menforceManageUserOemUnlockPermission(this.this$0);
	OemLockService.-$$Nest$menforceUserIsAdmin(this.this$0);
	long v4 = Binder.clearCallingIdentity();
	boolean v5 = OemLockService.-$$Nest$misOemUnlockAllowedByAdmin(this.this$0);
	OemLock v6 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v7 = v6.isOemUnlockAllowedByCarrier();
	OemLock v8 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	v8.setOemUnlockAllowedByDevice(p1);
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, p1);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public void -$$Nest$menforceManageUserOemUnlockPermission(OemLockService p1){
	p1.enforceManageUserOemUnlockPermission();
	return;
}
-----
depth : 2
public void enforceManageUserOemUnlockPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$menforceUserIsAdmin(OemLockService p1){
	p1.enforceUserIsAdmin();
	return;
}
-----
depth : 2
public void enforceUserIsAdmin(){
	int v1 = UserHandle.getCallingUserId();
	long v2 = Binder.clearCallingIdentity();
	UserManager v3 = UserManager.get(this.mContext);
	boolean v4 = v3.isUserAdmin(v1);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public boolean -$$Nest$misOemUnlockAllowedByAdmin(OemLockService p1){
	boolean v1 = p1.isOemUnlockAllowedByAdmin();
	return v1;
}
-----
depth : 2
public boolean isOemUnlockAllowedByAdmin(){
	UserManager v1 = UserManager.get(this.mContext);
	boolean v2 = v1.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
	return (v2 ^ 1);
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Update OEM Unlock bit in pst partition to ");
	StringBuilder v4 = v1.append(p1);
	String v5 = v1.toString();
	int v6 = Slog.i("OemLock", v5);
	v1.forceOemUnlockEnabled(p1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	OemLockService.-$$Nest$menforceManageUserOemUnlockPermission(this.this$0);
	OemLockService.-$$Nest$menforceUserIsAdmin(this.this$0);
	long v4 = Binder.clearCallingIdentity();
	boolean v5 = OemLockService.-$$Nest$misOemUnlockAllowedByAdmin(this.this$0);
	OemLock v6 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v7 = v6.isOemUnlockAllowedByCarrier();
	OemLock v8 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	v8.setOemUnlockAllowedByDevice(p1);
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, p1);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public void -$$Nest$menforceManageUserOemUnlockPermission(OemLockService p1){
	p1.enforceManageUserOemUnlockPermission();
	return;
}
-----
depth : 2
public void enforceManageUserOemUnlockPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$menforceUserIsAdmin(OemLockService p1){
	p1.enforceUserIsAdmin();
	return;
}
-----
depth : 2
public void enforceUserIsAdmin(){
	int v1 = UserHandle.getCallingUserId();
	long v2 = Binder.clearCallingIdentity();
	UserManager v3 = UserManager.get(this.mContext);
	boolean v4 = v3.isUserAdmin(v1);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public boolean -$$Nest$misOemUnlockAllowedByAdmin(OemLockService p1){
	boolean v1 = p1.isOemUnlockAllowedByAdmin();
	return v1;
}
-----
depth : 2
public boolean isOemUnlockAllowedByAdmin(){
	UserManager v1 = UserManager.get(this.mContext);
	boolean v2 = v1.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
	return (v2 ^ 1);
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setOemUnlockAllowedByUser(boolean p1){
	boolean v1 = ActivityManager.isUserAMonkey();
	OemLockService.-$$Nest$menforceManageUserOemUnlockPermission(this.this$0);
	OemLockService.-$$Nest$menforceUserIsAdmin(this.this$0);
	long v4 = Binder.clearCallingIdentity();
	boolean v5 = OemLockService.-$$Nest$misOemUnlockAllowedByAdmin(this.this$0);
	OemLock v6 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	boolean v7 = v6.isOemUnlockAllowedByCarrier();
	OemLock v8 = OemLockService.-$$Nest$fgetmOemLock(this.this$0);
	v8.setOemUnlockAllowedByDevice(p1);
	OemLockService.-$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(this.this$0, p1);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public void -$$Nest$menforceManageUserOemUnlockPermission(OemLockService p1){
	p1.enforceManageUserOemUnlockPermission();
	return;
}
-----
depth : 2
public void enforceManageUserOemUnlockPermission(){
	return;
}
-----
depth : 1
public void -$$Nest$menforceUserIsAdmin(OemLockService p1){
	p1.enforceUserIsAdmin();
	return;
}
-----
depth : 2
public void enforceUserIsAdmin(){
	int v1 = UserHandle.getCallingUserId();
	long v2 = Binder.clearCallingIdentity();
	UserManager v3 = UserManager.get(this.mContext);
	boolean v4 = v3.isUserAdmin(v1);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public boolean -$$Nest$misOemUnlockAllowedByAdmin(OemLockService p1){
	boolean v1 = p1.isOemUnlockAllowedByAdmin();
	return v1;
}
-----
depth : 2
public boolean isOemUnlockAllowedByAdmin(){
	UserManager v1 = UserManager.get(this.mContext);
	boolean v2 = v1.hasUserRestriction("no_factory_reset", UserHandle.SYSTEM);
	return (v2 ^ 1);
}
-----
depth : 1
public void -$$Nest$msetPersistentDataBlockOemUnlockAllowedBit(OemLockService p1, boolean p2){
	p1.setPersistentDataBlockOemUnlockAllowedBit(p2);
	return;
}
-----
depth : 2
public void setPersistentDataBlockOemUnlockAllowedBit(boolean p1){
	Object v1 = LocalServices.getService(PersistentDataBlockManagerInterna.class);
	return;
}
-----
