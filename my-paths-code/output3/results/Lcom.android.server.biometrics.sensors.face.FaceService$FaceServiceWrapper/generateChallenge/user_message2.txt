The method generateChallenge has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void generateChallenge(IBinder p1, int p2, int p3, IFaceServiceReceiver p4, String p5){
	ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("No matching sensor for generateChallenge, sensorId: ");
	StringBuilder v6 = v3.append(p2);
	String v7 = v3.toString();
	int v8 = Slog.w("FaceService", v7);
	return;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	Object v3 = v1.next();
	boolean v4 = v3.containsSensor(p1);
	return v3;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void generateChallenge(IBinder p1, int p2, int p3, IFaceServiceReceiver p4, String p5){
	ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("No matching sensor for generateChallenge, sensorId: ");
	StringBuilder v6 = v3.append(p2);
	String v7 = v3.toString();
	int v8 = Slog.w("FaceService", v7);
	return;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	return 0;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void generateChallenge(IBinder p1, int p2, int p3, IFaceServiceReceiver p4, String p5){
	ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2);
	v3.scheduleGenerateChallenge(p2, p3, p1, p4, p5);
	return;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	Object v3 = v1.next();
	boolean v4 = v3.containsSensor(p1);
	return v3;
}
-----

and the following sink code:
['ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2);\nv3.scheduleGenerateChallenge(p2, p3, p1, p4, p5);']

The method generateChallenge has the following similar APIs:

- API Name: revokeChallenge(Landroid/os/IBinder;IILjava/lang/String;J)V with Similarity Score: 0.9359691143035889
  - Access Control Level: NORMAL and the following code:
ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2);
v3.scheduleRevokeChallenge(p2, p3, p1, p4, p5);

- API Name: resetLockout(Landroid/os/IBinder;II[BLjava/lang/String;)V with Similarity Score: 0.8918377161026001
  - Access Control Level: NORMAL and the following code:
ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p2);
v3.scheduleResetLockout(p2, p3, p4);

