The method prepareForAuthentication has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void prepareForAuthentication(int p1, boolean p2, IBinder p3, long p4, int p5, IBiometricSensorReceiver p6, String p7, long p8, int p9, boolean p10){
	ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
	ClientMonitorCallbackConverter v3 = new ClientMonitorCallbackConverter(p6);
	v3.scheduleAuthenticate(p1, p3, p4, p5, p9, v3, p7, p8, 1, 2, p10, 0);
	return;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	Object v3 = v1.next();
	boolean v4 = v3.containsSensor(p1);
	return v3;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void prepareForAuthentication(int p1, boolean p2, IBinder p3, long p4, int p5, IBiometricSensorReceiver p6, String p7, long p8, int p9, boolean p10){
	ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
	int v4 = Slog.w("FaceService", "Null provider for prepareForAuthentication");
	return;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	Object v3 = v1.next();
	boolean v4 = v3.containsSensor(p1);
	return v3;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void prepareForAuthentication(int p1, boolean p2, IBinder p3, long p4, int p5, IBiometricSensorReceiver p6, String p7, long p8, int p9, boolean p10){
	ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
	ClientMonitorCallbackConverter v3 = new ClientMonitorCallbackConverter(p6);
	v3.scheduleAuthenticate(p1, p3, p4, p5, p9, v3, p7, p8, 1, 2, p10, 0);
	return;
}
-----
depth : 1
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
	ServiceProvider v1 = p1.getProviderForSensor(p2);
	return v1;
}
-----
depth : 2
public ServiceProvider getProviderForSensor(int p1){
	Iterator v1 = this.mServiceProviders.iterator();
	boolean v2 = v1.hasNext();
	return 0;
}
-----

and the following sink code:
['ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);\nServiceProvider v1 = p1.getProviderForSensor(p2);\nreturn v1;', 'ClientMonitorCallbackConverter v3 = new ClientMonitorCallbackConverter(p6);\nv3.scheduleAuthenticate(p1, p3, p4, p5, p9, v3, p7, p8, 1, 2, p10, 0);']

The method prepareForAuthentication has the following similar APIs:

- API Name: getAuthenticatorId(II)J with Similarity Score: 0.9174738526344299
  - Access Control Level: NORMAL and the following code:
ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
public ServiceProvider -$$Nest$mgetProviderForSensor(FaceService p1, int p2){
ServiceProvider v1 = p1.getProviderForSensor(p2);
long v4 = v3.getAuthenticatorId(p1, p2);
return v4;

- API Name: startPreparedClient(II)V with Similarity Score: 0.9109510779380798
  - Access Control Level: NORMAL and the following code:
ServiceProvider v3 = FaceService.-$$Nest$mgetProviderForSensor(this.this$0, p1);
v3.startPreparedClient(p1, p2);

