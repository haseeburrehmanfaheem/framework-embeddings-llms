This is path 1 for the API with depth 2:
depth : 0
public void requestTileServiceListeningState(ComponentName p1, int p2){
	int v1 = Binder.getCallingUid();
	String v2 = p1.getPackageName();
	boolean v3 = CompatChanges.isChangeEnabled(172251878, v1);
	this.mBar.requestTileServiceListeningState(p1);
	int v5 = Slog.e("StatusBarManagerService", "requestTileServiceListeningState", caughtException);
	return;
}
-----
depth : 1
public boolean isChangeEnabled(long p1, int p2){
	ChangeIdStateQuery v1 = ChangeIdStateQuery.byUid(p1, p2);
	Object v2 = this.QUERY_CACHE.query(v1);
	boolean v3 = v2.booleanValue();
	return v3;
}
-----
depth : 2
public ChangeIdStateQuery byUid(long p1, int p2){
	ChangeIdStateQuery v0 = new ChangeIdStateQuery(1,p1,0,p2,0);
	return v0;
}
-----
depth : 2
public Object query(Object p1){
	boolean v1 = p0.isDisabled();
	long v2 = p0.getCurrentNonce();
	boolean v3 = p0.bypass(p1);
	boolean v4 = PropertyInvalidatedCache.isReservedNonce(phiInstruction);
	Object v5 = this.mCache.get(p1);
	this.mHits = (this.mHits + 1);
	Object v6 = p0.refresh(phiInstruction, p1);
	long v7 = p0.getCurrentNonce();
	Object v8 = this.mCache.remove(p1);
	Object v9 = p0.maybeCheckConsistency(p1, v6);
	return v9;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void requestTileServiceListeningState(ComponentName p1, int p2){
	int v1 = Binder.getCallingUid();
	String v2 = p1.getPackageName();
	boolean v3 = CompatChanges.isChangeEnabled(172251878, v1);
	this.mBar.requestTileServiceListeningState(p1);
	return;
}
-----
depth : 1
public boolean isChangeEnabled(long p1, int p2){
	ChangeIdStateQuery v1 = ChangeIdStateQuery.byUid(p1, p2);
	Object v2 = this.QUERY_CACHE.query(v1);
	boolean v3 = v2.booleanValue();
	return v3;
}
-----
depth : 2
public ChangeIdStateQuery byUid(long p1, int p2){
	ChangeIdStateQuery v0 = new ChangeIdStateQuery(1,p1,0,p2,0);
	return v0;
}
-----
depth : 2
public Object query(Object p1){
	boolean v1 = p0.isDisabled();
	long v2 = p0.getCurrentNonce();
	boolean v3 = p0.bypass(p1);
	boolean v4 = PropertyInvalidatedCache.isReservedNonce(phiInstruction);
	Object v5 = this.mCache.get(p1);
	this.mHits = (this.mHits + 1);
	Object v6 = p0.refresh(phiInstruction, p1);
	long v7 = p0.getCurrentNonce();
	Object v8 = this.mCache.remove(p1);
	Object v9 = p0.maybeCheckConsistency(p1, v6);
	return v9;
}
-----
