This is path 1 for the API with depth 2:
depth : 0
public byte[] getBackupPayload(int p1){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p1);
	ShortcutUser v3 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda1 v3 = new ShortcutService$$ExternalSyntheticLambda1();
	v3.forAllPackageItems(v3);
	ShortcutService$$ExternalSyntheticLambda2 v5 = new ShortcutService$$ExternalSyntheticLambda2();
	v3.forAllPackages(v5);
	ShortcutService$$ExternalSyntheticLambda3 v7 = new ShortcutService$$ExternalSyntheticLambda3();
	v3.forAllLaunchers(v7);
	p0.scheduleSaveUser(p1);
	p0.saveDirtyInfo();
	ByteArrayOutputStream v11 = new ByteArrayOutputStream(32768);
	p0.saveUserInternalLocked(p1, v11, 1);
	byte[] v14 = v11.toByteArray();
	boolean v15 = this.mShortcutDumpFiles.save("backup-1-payload.txt", v14);
	return v14;
}
-----
depth : 1
public void enforceSystem(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void forAllPackageItems(Consumer p1){
	p0.forAllLaunchers(p1);
	p0.forAllPackages(p1);
	return;
}
-----
depth : 2
public void forAllLaunchers(Consumer p1){
	int v1 = this.mLaunchers.size();
	return;
}
-----
depth : 2
public void forAllPackages(Consumer p1){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 1
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----
depth : 2
public void scheduleSaveInner(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.mDirtyUserIds.contains(v1);
	Integer v3 = Integer.valueOf(p1);
	boolean v4 = this.mDirtyUserIds.add(v3);
	this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
	boolean v6 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
	return;
}
-----
depth : 1
public void saveDirtyInfo(){
	boolean v1 = this.mShutdown.get();
	Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
	int v3 = this.mDirtyUserIds.size();
	p0.wtf("Exception in saveDirtyInfo", caughtException);
	Trace.traceEnd(524288);
	return;
}
-----
depth : 2
public void wtf(String p1, Throwable p2){
	RuntimeException v0 = new RuntimeException("Stacktrace");
	this.mWtfCount = (this.mWtfCount + 1);
	Exception v1 = new Exception("Last failure was logged here:");
	this.mLastWtfStacktrace = v1;
	int v3 = Slog.wtf("ShortcutService", p1, phiInstruction);
	return;
}
-----
depth : 1
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void saveToXml(TypedXmlSerializer p1, boolean p2){
	XmlSerializer v1 = p1.startTag(0, "user");
	ShortcutService.writeAttr(p1, "locales", this.mKnownLocales);
	ShortcutService.writeAttr(p1, "last-app-scan-time2", this.mLastAppScanTime);
	ShortcutService.writeAttr(p1, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
	ShortcutService.writeAttr(p1, "restore-from-fp", this.mRestoreFromOsFingerprint);
	File v6 = this.mService.injectUserDataPath(this.mUserId);
	File v6 = new File(v6,"packages");
	boolean v8 = FileUtils.deleteContents(v6);
	File v8 = new File(v6,"launchers");
	boolean v10 = FileUtils.deleteContents(v8);
	int v11 = this.mLaunchers.size();
	int v12 = this.mPackages.size();
	XmlSerializer v13 = p1.endTag(0, "user");
	return;
}
-----
depth : 1
public boolean save(String p1, byte[] p2){
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v0 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p2);
	boolean v2 = p0.save(p1, v0);
	return v2;
}
-----
depth : 2
public boolean save(String p1, Consumer p2){
	File v1 = this.mService.getDumpPath();
	boolean v2 = v1.mkdirs();
	boolean v3 = v1.exists();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to create dump file: ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.w("ShortcutService", v8, caughtException);
	return 0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public byte[] getBackupPayload(int p1){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p1);
	ShortcutUser v3 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda1 v3 = new ShortcutService$$ExternalSyntheticLambda1();
	v3.forAllPackageItems(v3);
	ShortcutService$$ExternalSyntheticLambda2 v5 = new ShortcutService$$ExternalSyntheticLambda2();
	v3.forAllPackages(v5);
	ShortcutService$$ExternalSyntheticLambda3 v7 = new ShortcutService$$ExternalSyntheticLambda3();
	v3.forAllLaunchers(v7);
	p0.scheduleSaveUser(p1);
	p0.saveDirtyInfo();
	ByteArrayOutputStream v11 = new ByteArrayOutputStream(32768);
	p0.saveUserInternalLocked(p1, v11, 1);
	byte[] v14 = v11.toByteArray();
	boolean v15 = this.mShortcutDumpFiles.save("backup-1-payload.txt", v14);
	return v14;
}
-----
depth : 1
public void enforceSystem(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void forAllPackageItems(Consumer p1){
	p0.forAllLaunchers(p1);
	p0.forAllPackages(p1);
	return;
}
-----
depth : 2
public void forAllLaunchers(Consumer p1){
	int v1 = this.mLaunchers.size();
	return;
}
-----
depth : 2
public void forAllPackages(Consumer p1){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 1
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----
depth : 2
public void scheduleSaveInner(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.mDirtyUserIds.contains(v1);
	Integer v3 = Integer.valueOf(p1);
	boolean v4 = this.mDirtyUserIds.add(v3);
	this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
	boolean v6 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
	return;
}
-----
depth : 1
public void saveDirtyInfo(){
	boolean v1 = this.mShutdown.get();
	Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
	p0.wtf("Exception in saveDirtyInfo", caughtException);
	Trace.traceEnd(524288);
	return;
}
-----
depth : 2
public void wtf(String p1, Throwable p2){
	RuntimeException v0 = new RuntimeException("Stacktrace");
	this.mWtfCount = (this.mWtfCount + 1);
	Exception v1 = new Exception("Last failure was logged here:");
	this.mLastWtfStacktrace = v1;
	int v3 = Slog.wtf("ShortcutService", p1, phiInstruction);
	return;
}
-----
depth : 1
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void saveToXml(TypedXmlSerializer p1, boolean p2){
	XmlSerializer v1 = p1.startTag(0, "user");
	ShortcutService.writeAttr(p1, "locales", this.mKnownLocales);
	ShortcutService.writeAttr(p1, "last-app-scan-time2", this.mLastAppScanTime);
	ShortcutService.writeAttr(p1, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
	ShortcutService.writeAttr(p1, "restore-from-fp", this.mRestoreFromOsFingerprint);
	File v6 = this.mService.injectUserDataPath(this.mUserId);
	File v6 = new File(v6,"packages");
	boolean v8 = FileUtils.deleteContents(v6);
	File v8 = new File(v6,"launchers");
	boolean v10 = FileUtils.deleteContents(v8);
	int v11 = this.mLaunchers.size();
	int v12 = this.mPackages.size();
	XmlSerializer v13 = p1.endTag(0, "user");
	return;
}
-----
depth : 1
public boolean save(String p1, byte[] p2){
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v0 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p2);
	boolean v2 = p0.save(p1, v0);
	return v2;
}
-----
depth : 2
public boolean save(String p1, Consumer p2){
	File v1 = this.mService.getDumpPath();
	boolean v2 = v1.mkdirs();
	boolean v3 = v1.exists();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to create dump file: ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.w("ShortcutService", v8, caughtException);
	return 0;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public byte[] getBackupPayload(int p1){
	p0.enforceSystem();
	boolean v2 = p0.isUserUnlockedL(p1);
	ShortcutUser v3 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda1 v3 = new ShortcutService$$ExternalSyntheticLambda1();
	v3.forAllPackageItems(v3);
	ShortcutService$$ExternalSyntheticLambda2 v5 = new ShortcutService$$ExternalSyntheticLambda2();
	v3.forAllPackages(v5);
	ShortcutService$$ExternalSyntheticLambda3 v7 = new ShortcutService$$ExternalSyntheticLambda3();
	v3.forAllLaunchers(v7);
	p0.scheduleSaveUser(p1);
	p0.saveDirtyInfo();
	ByteArrayOutputStream v11 = new ByteArrayOutputStream(32768);
	p0.saveUserInternalLocked(p1, v11, 1);
	byte[] v14 = v11.toByteArray();
	boolean v15 = this.mShortcutDumpFiles.save("backup-1-payload.txt", v14);
	return v14;
}
-----
depth : 1
public void enforceSystem(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	return 1;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void forAllPackageItems(Consumer p1){
	p0.forAllLaunchers(p1);
	p0.forAllPackages(p1);
	return;
}
-----
depth : 2
public void forAllLaunchers(Consumer p1){
	int v1 = this.mLaunchers.size();
	return;
}
-----
depth : 2
public void forAllPackages(Consumer p1){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 1
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----
depth : 2
public void scheduleSaveInner(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.mDirtyUserIds.contains(v1);
	Integer v3 = Integer.valueOf(p1);
	boolean v4 = this.mDirtyUserIds.add(v3);
	this.mHandler.removeCallbacks(this.mSaveDirtyInfoRunner);
	boolean v6 = this.mHandler.postDelayed(this.mSaveDirtyInfoRunner, this.mSaveDelayMillis);
	return;
}
-----
depth : 1
public void saveDirtyInfo(){
	boolean v1 = this.mShutdown.get();
	Trace.traceBegin(524288, "shortcutSaveDirtyInfo");
	int v3 = this.mDirtyUserIds.size();
	p0.wtf("Exception in saveDirtyInfo", caughtException);
	Trace.traceEnd(524288);
	return;
}
-----
depth : 2
public void wtf(String p1, Throwable p2){
	RuntimeException v0 = new RuntimeException("Stacktrace");
	this.mWtfCount = (this.mWtfCount + 1);
	Exception v1 = new Exception("Last failure was logged here:");
	this.mLastWtfStacktrace = v1;
	int v3 = Slog.wtf("ShortcutService", p1, phiInstruction);
	return;
}
-----
depth : 1
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void saveToXml(TypedXmlSerializer p1, boolean p2){
	XmlSerializer v1 = p1.startTag(0, "user");
	ShortcutService.writeAttr(p1, "locales", this.mKnownLocales);
	ShortcutService.writeAttr(p1, "last-app-scan-time2", this.mLastAppScanTime);
	ShortcutService.writeAttr(p1, "last-app-scan-fp", this.mLastAppScanOsFingerprint);
	ShortcutService.writeAttr(p1, "restore-from-fp", this.mRestoreFromOsFingerprint);
	File v6 = this.mService.injectUserDataPath(this.mUserId);
	File v6 = new File(v6,"packages");
	boolean v8 = FileUtils.deleteContents(v6);
	File v8 = new File(v6,"launchers");
	boolean v10 = FileUtils.deleteContents(v8);
	int v11 = this.mLaunchers.size();
	int v12 = this.mPackages.size();
	XmlSerializer v13 = p1.endTag(0, "user");
	return;
}
-----
depth : 1
public boolean save(String p1, byte[] p2){
	ShortcutDumpFiles$$ExternalSyntheticLambda0 v0 = new ShortcutDumpFiles$$ExternalSyntheticLambda0(p2);
	boolean v2 = p0.save(p1, v0);
	return v2;
}
-----
depth : 2
public boolean save(String p1, Consumer p2){
	File v1 = this.mService.getDumpPath();
	boolean v2 = v1.mkdirs();
	boolean v3 = v1.exists();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to create dump file: ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.w("ShortcutService", v8, caughtException);
	return 0;
}
-----
