This is path 1 for the API with depth 2:
depth : 0
public void reportShortcutUsed(String p1, String p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2);
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	ShortcutInfo v5 = v4.findShortcutById(p2);
	p0.reportShortcutUsedInternal(p1, p2, p3);
	return;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public void reportShortcutUsedInternal(String p1, String p2, int p3){
	long v1 = p0.injectClearCallingIdentity();
	this.mUsageStatsManagerInternal.reportShortcutUsage(p1, p2, p3);
	p0.injectRestoreCallingIdentity(v1);
	return;
}
-----
depth : 2
public long injectClearCallingIdentity(){
	long v1 = Binder.clearCallingIdentity();
	return v1;
}
-----
depth : 2
public void injectRestoreCallingIdentity(long p1){
	Binder.restoreCallingIdentity(p1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void reportShortcutUsed(String p1, String p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2);
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	ShortcutInfo v5 = v4.findShortcutById(p2);
	p0.reportShortcutUsedInternal(p1, p2, p3);
	return;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	return 1;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public void reportShortcutUsedInternal(String p1, String p2, int p3){
	long v1 = p0.injectClearCallingIdentity();
	this.mUsageStatsManagerInternal.reportShortcutUsage(p1, p2, p3);
	p0.injectRestoreCallingIdentity(v1);
	return;
}
-----
depth : 2
public long injectClearCallingIdentity(){
	long v1 = Binder.clearCallingIdentity();
	return v1;
}
-----
depth : 2
public void injectRestoreCallingIdentity(long p1){
	Binder.restoreCallingIdentity(p1);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void reportShortcutUsed(String p1, String p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2);
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	ShortcutInfo v5 = v4.findShortcutById(p2);
	p0.reportShortcutUsedInternal(p1, p2, p3);
	return;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	p0.injectRestoreCallingIdentity(v1);
	return v2;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public void reportShortcutUsedInternal(String p1, String p2, int p3){
	long v1 = p0.injectClearCallingIdentity();
	this.mUsageStatsManagerInternal.reportShortcutUsage(p1, p2, p3);
	p0.injectRestoreCallingIdentity(v1);
	return;
}
-----
depth : 2
public long injectClearCallingIdentity(){
	long v1 = Binder.clearCallingIdentity();
	return v1;
}
-----
depth : 2
public void injectRestoreCallingIdentity(long p1){
	Binder.restoreCallingIdentity(p1);
	return;
}
-----
