The method getShareTargets has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	p0.throwIfUserLockedL(p3);
	ArrayList v6 = new ArrayList();
	ShortcutUser v8 = p0.getUserShortcutsLocked(p3);
	ShortcutService$$ExternalSyntheticLambda12 v8 = new ShortcutService$$ExternalSyntheticLambda12(v6,p2);
	v8.forAllPackages(v8);
	ParceledListSlice v10 = new ParceledListSlice(v6);
	return v10;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	p0.throwIfUserLockedL(p3);
	ArrayList v5 = new ArrayList();
	ShortcutUser v7 = p0.getUserShortcutsLocked(p3);
	ShortcutService$$ExternalSyntheticLambda12 v7 = new ShortcutService$$ExternalSyntheticLambda12(v5,p2);
	v7.forAllPackages(v7);
	ParceledListSlice v9 = new ParceledListSlice(v5);
	return v9;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){
	p0.throwIfUserLockedL(p3);
	ArrayList v6 = new ArrayList();
	ShortcutUser v8 = p0.getUserShortcutsLocked(p3);
	ShortcutService$$ExternalSyntheticLambda12 v8 = new ShortcutService$$ExternalSyntheticLambda12(v6,p2);
	v8.forAllPackages(v8);
	ParceledListSlice v10 = new ParceledListSlice(v6);
	return v10;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	return 1;
}
-----
depth : 1
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public void wtf(String p1){
	p0.wtf(p1, 0);
	return;
}
-----
depth : 2
public ShortcutUser loadUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	AtomicFile v1 = new AtomicFile(v1);
	FileInputStream v3 = v1.openRead();
	ShortcutUser v4 = p0.loadUserInternal(p1, v3, 0);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("Failed to read file ");
	File v7 = v1.getBaseFile();
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.e("ShortcutService", v9, caughtException);
	IoUtils.closeQuietly(v3);
	return 0;
}
-----
depth : 2
public void checkPackageChanges(int p1){
	boolean v1 = p0.injectIsSafeModeEnabled();
	long v2 = p0.getStatStartTime();
	ArrayList v2 = new ArrayList();
	ShortcutUser v4 = p0.getUserShortcutsLocked(p1);
	ShortcutService$$ExternalSyntheticLambda18 v4 = new ShortcutService$$ExternalSyntheticLambda18(p0,v2);
	v4.forAllPackageItems(v4);
	int v7 = v2.size();
	int v8 = v2.size();
	long v9 = v4.getLastAppScanTime();
	p0.rescanUpdatedPackagesLocked(p1, v9);
	p0.logDurationStat(8, v2);
	p0.verifyStates();
	return;
}
-----

and the following sink code:
['public ParceledListSlice getShareTargets(String p1, IntentFilter p2, int p3){\nShortcutUser v8 = p0.getUserShortcutsLocked(p3);\nShortcutService$$ExternalSyntheticLambda12 v8 = new ShortcutService$$ExternalSyntheticLambda12(v6,p2);\nv8.forAllPackages(v8);\nParceledListSlice v10 = new ParceledListSlice(v6);\nreturn v10;', 'public void throwIfUserLockedL(int p1){\nboolean v1 = p0.isUserUnlockedL(p1);']

The method getShareTargets has the following similar APIs:

- API Name: reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 0.8301826119422913
  - Access Control Level: SYS_OR_SIG and the following code:
p0.throwIfUserLockedL(p3);
boolean v1 = p0.isUserUnlockedL(p1);

