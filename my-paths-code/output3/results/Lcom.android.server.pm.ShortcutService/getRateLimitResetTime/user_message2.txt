The method getRateLimitResetTime has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public long getRateLimitResetTime(String p1, int p2){
	p0.verifyCaller(p1, p2);
	p0.throwIfUserLockedL(p2);
	long v3 = p0.getNextResetTimeLocked();
	return v3;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public long getNextResetTimeLocked(){
	p0.updateTimesLocked();
	return (this.mRawLastResetTime + this.mResetInterval);
}
-----
depth : 2
public void updateTimesLocked(){
	long v1 = p0.injectCurrentTimeMillis();
	boolean v2 = ShortcutService.isClockValid(v1);
	int v3 = Slog.w("ShortcutService", "Clock rewound");
	this.mRawLastResetTime = v1;
	p0.scheduleSaveBaseState();
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public long getRateLimitResetTime(String p1, int p2){
	p0.verifyCaller(p1, p2);
	p0.throwIfUserLockedL(p2);
	long v3 = p0.getNextResetTimeLocked();
	return v3;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	return 1;
}
-----
depth : 1
public long getNextResetTimeLocked(){
	p0.updateTimesLocked();
	return (this.mRawLastResetTime + this.mResetInterval);
}
-----
depth : 2
public void updateTimesLocked(){
	long v1 = p0.injectCurrentTimeMillis();
	boolean v2 = ShortcutService.isClockValid(v1);
	int v3 = Slog.w("ShortcutService", "Clock rewound");
	this.mRawLastResetTime = v1;
	p0.scheduleSaveBaseState();
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public long getRateLimitResetTime(String p1, int p2){
	p0.verifyCaller(p1, p2);
	p0.throwIfUserLockedL(p2);
	long v3 = p0.getNextResetTimeLocked();
	return v3;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	p0.injectRestoreCallingIdentity(v1);
	return v2;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public long getNextResetTimeLocked(){
	p0.updateTimesLocked();
	return (this.mRawLastResetTime + this.mResetInterval);
}
-----
depth : 2
public void updateTimesLocked(){
	long v1 = p0.injectCurrentTimeMillis();
	boolean v2 = ShortcutService.isClockValid(v1);
	int v3 = Slog.w("ShortcutService", "Clock rewound");
	this.mRawLastResetTime = v1;
	p0.scheduleSaveBaseState();
	return;
}
-----

and the following sink code:
['long v3 = p0.getNextResetTimeLocked();\np0.updateTimesLocked();\nthis.mRawLastResetTime = v1;\nreturn (this.mRawLastResetTime + this.mResetInterval);', 'int v5 = p0.injectGetPackageUid(p1, p2);\nlong v1 = p0.injectClearCallingIdentity();\nint v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);\np0.injectRestoreCallingIdentity(v1);']

The method getRateLimitResetTime has the following similar APIs:

- API Name: getIconMaxDimensions(Ljava/lang/String;I)I with Similarity Score: 0.9773979187011719
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = p0.injectGetPackageUid(p1, p2);
long v1 = p0.injectClearCallingIdentity();
int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);

- API Name: getMaxShortcutCountPerActivity(Ljava/lang/String;I)I with Similarity Score: 0.9216465353965759
  - Access Control Level: SYS_OR_SIG and the following code:
int v5 = p0.injectGetPackageUid(p1, p2);
int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);

