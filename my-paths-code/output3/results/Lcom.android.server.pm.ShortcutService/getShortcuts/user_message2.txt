The method getShortcuts has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public ParceledListSlice getShortcuts(String p1, int p2, int p3){
	p0.verifyCaller(p1, p3);
	p0.throwIfUserLockedL(p3);
	ShortcutService$$ExternalSyntheticLambda19 v2 = new ShortcutService$$ExternalSyntheticLambda19((((phiInstruction | phiInstruction) | phiInstruction) | phiInstruction));
	ParceledListSlice v4 = p0.getShortcutsWithQueryLocked(p1, p3, 9, v2);
	return v4;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ParceledListSlice getShortcutsWithQueryLocked(String p1, int p2, int p3, Predicate p4){
	ArrayList v0 = new ArrayList();
	ShortcutPackage v2 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
	v2.findAll(v0, p4, p3);
	ParceledListSlice v3 = new ParceledListSlice(v4);
	List v4 = p0.setReturnedByServer(v0);
	return v3;
}
-----
depth : 2
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public void findAll(List p1, Predicate p2, int p3){
	p0.findAll(p1, p2, p3, 0, 0, 0);
	return;
}
-----
depth : 2
public List setReturnedByServer(List p1){
	int v1 = p1.size();
	return p1;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public ParceledListSlice getShortcuts(String p1, int p2, int p3){
	p0.verifyCaller(p1, p3);
	p0.throwIfUserLockedL(p3);
	ShortcutService$$ExternalSyntheticLambda19 v2 = new ShortcutService$$ExternalSyntheticLambda19((((phiInstruction | phiInstruction) | phiInstruction) | phiInstruction));
	ParceledListSlice v4 = p0.getShortcutsWithQueryLocked(p1, p3, 9, v2);
	return v4;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ParceledListSlice getShortcutsWithQueryLocked(String p1, int p2, int p3, Predicate p4){
	ArrayList v0 = new ArrayList();
	ShortcutPackage v2 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
	v2.findAll(v0, p4, p3);
	ParceledListSlice v3 = new ParceledListSlice(v4);
	List v4 = p0.setReturnedByServer(v0);
	return v3;
}
-----
depth : 2
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public void findAll(List p1, Predicate p2, int p3){
	p0.findAll(p1, p2, p3, 0, 0, 0);
	return;
}
-----
depth : 2
public List setReturnedByServer(List p1){
	int v1 = p1.size();
	return p1;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public ParceledListSlice getShortcuts(String p1, int p2, int p3){
	p0.verifyCaller(p1, p3);
	p0.throwIfUserLockedL(p3);
	ShortcutService$$ExternalSyntheticLambda19 v2 = new ShortcutService$$ExternalSyntheticLambda19((((phiInstruction | phiInstruction) | phiInstruction) | phiInstruction));
	ParceledListSlice v4 = p0.getShortcutsWithQueryLocked(p1, p3, 9, v2);
	return v4;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ParceledListSlice getShortcutsWithQueryLocked(String p1, int p2, int p3, Predicate p4){
	ArrayList v0 = new ArrayList();
	ShortcutPackage v2 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
	v2.findAll(v0, p4, p3);
	ParceledListSlice v3 = new ParceledListSlice(v4);
	List v4 = p0.setReturnedByServer(v0);
	return v3;
}
-----
depth : 2
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public void findAll(List p1, Predicate p2, int p3){
	p0.findAll(p1, p2, p3, 0, 0, 0);
	return;
}
-----
depth : 2
public List setReturnedByServer(List p1){
	int v1 = p1.size();
	return p1;
}
-----

and the following sink code:
['ParceledListSlice v4 = p0.getShortcutsWithQueryLocked(p1, p3, 9, v2);\nreturn v4;\nShortcutPackage v2 = p0.getPackageShortcutsForPublisherLocked(p1, p2);\nv2.findAll(v0, p4, p3);\nList v4 = p0.setReturnedByServer(v0);', 'int v5 = p0.injectGetPackageUid(p1, p2);\nboolean v6 = p0.isEphemeralApp(p1, p2);\nPreconditions.checkState((v6 ^ 1), "Ephemeral apps can\'t use ShortcutManager");']

The method getShortcuts has the following similar APIs:

- API Name: removeLongLivedShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.8153008818626404
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
int v6 = p2.size();
v4.adjustRanks();

- API Name: disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V with Similarity Score: 0.8134908676147461
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5);
v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
int v6 = p2.size();
v4.adjustRanks();

