The method removeDynamicShortcuts has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void removeDynamicShortcuts(String p1, List p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
	int v6 = p2.size();
	v4.adjustRanks();
	p0.packageShortcutsChanged(v4, phiInstruction, phiInstruction);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public void adjustRanks(){
	long v1 = ShortcutUser.mService.injectCurrentTimeMillis();
	ShortcutPackage$$ExternalSyntheticLambda4 v1 = new ShortcutPackage$$ExternalSyntheticLambda4(v1);
	p0.forEachShortcutMutate(v1);
	ArrayMap v4 = p0.sortShortcutsToActivities();
	int v5 = v4.size();
	return;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public void forEachShortcutMutate(Consumer p1){
	int v1 = this.mShortcuts.size();
	return;
}
-----
depth : 2
public ArrayMap sortShortcutsToActivities(){
	ArrayMap v0 = new ArrayMap();
	ShortcutPackage$$ExternalSyntheticLambda40 v1 = new ShortcutPackage$$ExternalSyntheticLambda40(p0,v0);
	p0.forEachShortcut(v1);
	return v0;
}
-----
depth : 1
public void packageShortcutsChanged(ShortcutPackage p1, List p2, List p3){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = p1.getPackageName();
	int v3 = p1.getPackageUserId();
	Runnable v4 = p0.notifyListenerRunnable(v2, v3);
	p0.injectPostToHandlerDebounced(p1, v4);
	p0.notifyShortcutChangeCallbacks(v2, v3, p2, p3);
	p1.scheduleSave();
	return;
}
-----
depth : 2
public String getPackageName(){
	return this.mPackageName;
}
-----
depth : 2
public int getPackageUserId(){
	return this.mPackageUserId;
}
-----
depth : 2
public Runnable notifyListenerRunnable(String p1, int p2){
	ShortcutService$$ExternalSyntheticLambda28 v0 = new ShortcutService$$ExternalSyntheticLambda28(p0,p2,p1);
	return v0;
}
-----
depth : 2
public void injectPostToHandlerDebounced(Object p1, Runnable p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	this.mHandler.removeCallbacksAndMessages(p1);
	boolean v4 = this.mHandler.postDelayed(p2, p1, 100);
	return;
}
-----
depth : 2
public void notifyShortcutChangeCallbacks(String p1, int p2, List p3, List p4){
	List v1 = p0.removeNonKeyFields(p3);
	List v2 = p0.removeNonKeyFields(p4);
	UserHandle v3 = UserHandle.of(p2);
	ShortcutService$$ExternalSyntheticLambda26 v3 = new ShortcutService$$ExternalSyntheticLambda26(p0,p2,v1,p1,v3,v2);
	p0.injectPostToHandler(v3);
	return;
}
-----
depth : 2
public void scheduleSave(){
	ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
	return;
}
-----
depth : 1
public void verifyStates(){
	boolean v1 = p0.injectShouldPerformVerification();
	p0.verifyStatesInner();
	return;
}
-----
depth : 2
public boolean injectShouldPerformVerification(){
	return 0;
}
-----
depth : 2
public void verifyStatesInner(){
	ShortcutService$$ExternalSyntheticLambda25 v0 = new ShortcutService$$ExternalSyntheticLambda25();
	p0.forEachLoadedUserLocked(v0);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void removeDynamicShortcuts(String p1, List p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
	int v6 = p2.size();
	v4.adjustRanks();
	p0.packageShortcutsChanged(v4, phiInstruction, phiInstruction);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	return 1;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public void adjustRanks(){
	long v1 = ShortcutUser.mService.injectCurrentTimeMillis();
	ShortcutPackage$$ExternalSyntheticLambda4 v1 = new ShortcutPackage$$ExternalSyntheticLambda4(v1);
	p0.forEachShortcutMutate(v1);
	ArrayMap v4 = p0.sortShortcutsToActivities();
	int v5 = v4.size();
	return;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public void forEachShortcutMutate(Consumer p1){
	int v1 = this.mShortcuts.size();
	return;
}
-----
depth : 2
public ArrayMap sortShortcutsToActivities(){
	ArrayMap v0 = new ArrayMap();
	ShortcutPackage$$ExternalSyntheticLambda40 v1 = new ShortcutPackage$$ExternalSyntheticLambda40(p0,v0);
	p0.forEachShortcut(v1);
	return v0;
}
-----
depth : 1
public void packageShortcutsChanged(ShortcutPackage p1, List p2, List p3){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = p1.getPackageName();
	int v3 = p1.getPackageUserId();
	Runnable v4 = p0.notifyListenerRunnable(v2, v3);
	p0.injectPostToHandlerDebounced(p1, v4);
	p0.notifyShortcutChangeCallbacks(v2, v3, p2, p3);
	p1.scheduleSave();
	return;
}
-----
depth : 2
public String getPackageName(){
	return this.mPackageName;
}
-----
depth : 2
public int getPackageUserId(){
	return this.mPackageUserId;
}
-----
depth : 2
public Runnable notifyListenerRunnable(String p1, int p2){
	ShortcutService$$ExternalSyntheticLambda28 v0 = new ShortcutService$$ExternalSyntheticLambda28(p0,p2,p1);
	return v0;
}
-----
depth : 2
public void injectPostToHandlerDebounced(Object p1, Runnable p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	this.mHandler.removeCallbacksAndMessages(p1);
	boolean v4 = this.mHandler.postDelayed(p2, p1, 100);
	return;
}
-----
depth : 2
public void notifyShortcutChangeCallbacks(String p1, int p2, List p3, List p4){
	List v1 = p0.removeNonKeyFields(p3);
	List v2 = p0.removeNonKeyFields(p4);
	UserHandle v3 = UserHandle.of(p2);
	ShortcutService$$ExternalSyntheticLambda26 v3 = new ShortcutService$$ExternalSyntheticLambda26(p0,p2,v1,p1,v3,v2);
	p0.injectPostToHandler(v3);
	return;
}
-----
depth : 2
public void scheduleSave(){
	ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
	return;
}
-----
depth : 1
public void verifyStates(){
	boolean v1 = p0.injectShouldPerformVerification();
	p0.verifyStatesInner();
	return;
}
-----
depth : 2
public boolean injectShouldPerformVerification(){
	return 0;
}
-----
depth : 2
public void verifyStatesInner(){
	ShortcutService$$ExternalSyntheticLambda25 v0 = new ShortcutService$$ExternalSyntheticLambda25();
	p0.forEachLoadedUserLocked(v0);
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void removeDynamicShortcuts(String p1, List p2, int p3){
	p0.verifyCaller(p1, p3);
	Object v2 = Objects.requireNonNull(p2, "shortcutIds must be provided");
	p0.throwIfUserLockedL(p3);
	ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
	v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
	int v6 = p2.size();
	v4.adjustRanks();
	p0.packageShortcutsChanged(v4, phiInstruction, phiInstruction);
	p0.verifyStates();
	return;
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	p0.injectRestoreCallingIdentity(v1);
	return v2;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public void adjustRanks(){
	long v1 = ShortcutUser.mService.injectCurrentTimeMillis();
	ShortcutPackage$$ExternalSyntheticLambda4 v1 = new ShortcutPackage$$ExternalSyntheticLambda4(v1);
	p0.forEachShortcutMutate(v1);
	ArrayMap v4 = p0.sortShortcutsToActivities();
	int v5 = v4.size();
	return;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public void forEachShortcutMutate(Consumer p1){
	int v1 = this.mShortcuts.size();
	return;
}
-----
depth : 2
public ArrayMap sortShortcutsToActivities(){
	ArrayMap v0 = new ArrayMap();
	ShortcutPackage$$ExternalSyntheticLambda40 v1 = new ShortcutPackage$$ExternalSyntheticLambda40(p0,v0);
	p0.forEachShortcut(v1);
	return v0;
}
-----
depth : 1
public void packageShortcutsChanged(ShortcutPackage p1, List p2, List p3){
	Object v1 = Objects.requireNonNull(p1);
	String v2 = p1.getPackageName();
	int v3 = p1.getPackageUserId();
	Runnable v4 = p0.notifyListenerRunnable(v2, v3);
	p0.injectPostToHandlerDebounced(p1, v4);
	p0.notifyShortcutChangeCallbacks(v2, v3, p2, p3);
	p1.scheduleSave();
	return;
}
-----
depth : 2
public String getPackageName(){
	return this.mPackageName;
}
-----
depth : 2
public int getPackageUserId(){
	return this.mPackageUserId;
}
-----
depth : 2
public Runnable notifyListenerRunnable(String p1, int p2){
	ShortcutService$$ExternalSyntheticLambda28 v0 = new ShortcutService$$ExternalSyntheticLambda28(p0,p2,p1);
	return v0;
}
-----
depth : 2
public void injectPostToHandlerDebounced(Object p1, Runnable p2){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	this.mHandler.removeCallbacksAndMessages(p1);
	boolean v4 = this.mHandler.postDelayed(p2, p1, 100);
	return;
}
-----
depth : 2
public void notifyShortcutChangeCallbacks(String p1, int p2, List p3, List p4){
	List v1 = p0.removeNonKeyFields(p3);
	List v2 = p0.removeNonKeyFields(p4);
	UserHandle v3 = UserHandle.of(p2);
	ShortcutService$$ExternalSyntheticLambda26 v3 = new ShortcutService$$ExternalSyntheticLambda26(p0,p2,v1,p1,v3,v2);
	p0.injectPostToHandler(v3);
	return;
}
-----
depth : 2
public void scheduleSave(){
	ShortcutUser.mService.injectPostToHandlerDebounced(this.mSaveShortcutPackageRunner, this.mSaveShortcutPackageRunner);
	return;
}
-----
depth : 1
public void verifyStates(){
	boolean v1 = p0.injectShouldPerformVerification();
	p0.verifyStatesInner();
	return;
}
-----
depth : 2
public boolean injectShouldPerformVerification(){
	return 0;
}
-----
depth : 2
public void verifyStatesInner(){
	ShortcutService$$ExternalSyntheticLambda25 v0 = new ShortcutService$$ExternalSyntheticLambda25();
	p0.forEachLoadedUserLocked(v0);
	return;
}
-----

and the following sink code:
['p0.verifyCaller(p1, p3);\nint v5 = p0.injectGetPackageUid(p1, p2);\nboolean v6 = p0.isEphemeralApp(p1, p2);', 'ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);\nv4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);\nv4.adjustRanks();\np0.packageShortcutsChanged(v4, phiInstruction, phiInstruction);']

The method removeDynamicShortcuts has the following similar APIs:

- API Name: reportShortcutUsed(Ljava/lang/String;Ljava/lang/String;I)V with Similarity Score: 1.0
  - Access Control Level: SYS_OR_SIG and the following code:
p0.verifyCaller(p1, p3);
int v5 = p0.injectGetPackageUid(p1, p2);
boolean v6 = p0.isEphemeralApp(p1, p2);

- API Name: disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V with Similarity Score: 0.9585101008415222
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5);
v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
int v6 = p2.size();
v4.adjustRanks();

