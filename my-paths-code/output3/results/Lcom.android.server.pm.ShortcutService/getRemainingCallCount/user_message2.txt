The method getRemainingCallCount has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public int getRemainingCallCount(String p1, int p2){
	p0.verifyCaller(p1, p2);
	int v2 = p0.injectBinderCallingPid();
	int v3 = p0.injectBinderCallingUid();
	boolean v4 = p0.injectHasUnlimitedShortcutsApiCallsPermission(v2, v3);
	p0.throwIfUserLockedL(p2);
	ShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
	int v7 = v6.getApiCallCount(v4);
	return (this.mMaxUpdatesPerInterval - v7);
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public int getApiCallCount(boolean p1){
	boolean v1 = ShortcutUser.mService.isUidForegroundLocked(this.mPackageUid);
	long v2 = ShortcutUser.mService.getUidLastForegroundElapsedTimeLocked(this.mPackageUid);
	long v3 = ShortcutUser.mService.injectElapsedRealtime();
	this.mLastKnownForegroundElapsedTime = v3;
	p0.resetRateLimiting();
	long v5 = ShortcutUser.mService.getLastResetTimeLocked();
	long v6 = ShortcutUser.mService.injectCurrentTimeMillis();
	boolean v7 = ShortcutService.isClockValid(v6);
	this.mApiCallCount = 0;
	this.mLastResetTime = v5;
	return this.mApiCallCount;
}
-----
depth : 2
public boolean isUidForegroundLocked(int p1){
	int v1 = this.mUidState.get(p1, 20);
	boolean v2 = p0.isProcessStateForeground(v1);
	int v3 = this.mActivityManagerInternal.getUidProcessState(p1);
	boolean v4 = p0.isProcessStateForeground(v3);
	return v4;
}
-----
depth : 2
public long getUidLastForegroundElapsedTimeLocked(int p1){
	long v1 = this.mUidLastForegroundElapsedTime.get(p1);
	return v1;
}
-----
depth : 2
public long injectElapsedRealtime(){
	long v1 = SystemClock.elapsedRealtime();
	return v1;
}
-----
depth : 2
public void resetRateLimiting(){
	this.mApiCallCount = 0;
	p0.scheduleSave();
	return;
}
-----
depth : 2
public long getLastResetTimeLocked(){
	p0.updateTimesLocked();
	return this.mRawLastResetTime;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public boolean isClockValid(long p1){
	return phiInstruction;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public int getRemainingCallCount(String p1, int p2){
	p0.verifyCaller(p1, p2);
	int v2 = p0.injectBinderCallingPid();
	int v3 = p0.injectBinderCallingUid();
	boolean v4 = p0.injectHasUnlimitedShortcutsApiCallsPermission(v2, v3);
	p0.throwIfUserLockedL(p2);
	ShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
	int v7 = v6.getApiCallCount(v4);
	return (this.mMaxUpdatesPerInterval - v7);
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public int getApiCallCount(boolean p1){
	boolean v1 = ShortcutUser.mService.isUidForegroundLocked(this.mPackageUid);
	long v2 = ShortcutUser.mService.getUidLastForegroundElapsedTimeLocked(this.mPackageUid);
	long v3 = ShortcutUser.mService.injectElapsedRealtime();
	this.mLastKnownForegroundElapsedTime = v3;
	p0.resetRateLimiting();
	long v5 = ShortcutUser.mService.getLastResetTimeLocked();
	long v6 = ShortcutUser.mService.injectCurrentTimeMillis();
	boolean v7 = ShortcutService.isClockValid(v6);
	this.mApiCallCount = 0;
	this.mLastResetTime = v5;
	return this.mApiCallCount;
}
-----
depth : 2
public boolean isUidForegroundLocked(int p1){
	int v1 = this.mUidState.get(p1, 20);
	boolean v2 = p0.isProcessStateForeground(v1);
	int v3 = this.mActivityManagerInternal.getUidProcessState(p1);
	boolean v4 = p0.isProcessStateForeground(v3);
	return v4;
}
-----
depth : 2
public long getUidLastForegroundElapsedTimeLocked(int p1){
	long v1 = this.mUidLastForegroundElapsedTime.get(p1);
	return v1;
}
-----
depth : 2
public long injectElapsedRealtime(){
	long v1 = SystemClock.elapsedRealtime();
	return v1;
}
-----
depth : 2
public void resetRateLimiting(){
	this.mApiCallCount = 0;
	p0.scheduleSave();
	return;
}
-----
depth : 2
public long getLastResetTimeLocked(){
	p0.updateTimesLocked();
	return this.mRawLastResetTime;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public boolean isClockValid(long p1){
	return phiInstruction;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public int getRemainingCallCount(String p1, int p2){
	p0.verifyCaller(p1, p2);
	int v2 = p0.injectBinderCallingPid();
	int v3 = p0.injectBinderCallingUid();
	boolean v4 = p0.injectHasUnlimitedShortcutsApiCallsPermission(v2, v3);
	p0.throwIfUserLockedL(p2);
	ShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p2);
	int v7 = v6.getApiCallCount(v4);
	return (this.mMaxUpdatesPerInterval - v7);
}
-----
depth : 1
public void verifyCaller(String p1, int p2){
	int v5 = p0.injectGetPackageUid(p1, p2);
	boolean v6 = p0.isEphemeralApp(p1, p2);
	Preconditions.checkState((v6 ^ 1), "Ephemeral apps can't use ShortcutManager");
	return;
}
-----
depth : 2
public int injectGetPackageUid(String p1, int p2){
	long v1 = p0.injectClearCallingIdentity();
	int v2 = this.mIPackageManager.getPackageUid(p1, 795136, p2);
	int v3 = Slog.wtf("ShortcutService", "RemoteException", caughtException);
	p0.injectRestoreCallingIdentity(v1);
	return -1;
}
-----
depth : 2
public boolean isEphemeralApp(String p1, int p2){
	ApplicationInfo v1 = p0.getApplicationInfo(p1, p2);
	boolean v2 = ShortcutService.isEphemeralApp(v1);
	return v2;
}
-----
depth : 1
public void throwIfUserLockedL(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	return 1;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsForPublisherLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	ShortcutUser v3 = v2.getUser();
	v3.onCalledByPublisher(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutUser getUser(){
	return this.mShortcutUser;
}
-----
depth : 2
public void onCalledByPublisher(String p1){
	p0.detectLocaleChange();
	p0.rescanPackageIfNeeded(p1, 0);
	return;
}
-----
depth : 1
public int getApiCallCount(boolean p1){
	boolean v1 = ShortcutUser.mService.isUidForegroundLocked(this.mPackageUid);
	long v2 = ShortcutUser.mService.getUidLastForegroundElapsedTimeLocked(this.mPackageUid);
	long v3 = ShortcutUser.mService.injectElapsedRealtime();
	this.mLastKnownForegroundElapsedTime = v3;
	p0.resetRateLimiting();
	long v5 = ShortcutUser.mService.getLastResetTimeLocked();
	long v6 = ShortcutUser.mService.injectCurrentTimeMillis();
	boolean v7 = ShortcutService.isClockValid(v6);
	this.mApiCallCount = 0;
	this.mLastResetTime = v5;
	return this.mApiCallCount;
}
-----
depth : 2
public boolean isUidForegroundLocked(int p1){
	int v1 = this.mUidState.get(p1, 20);
	boolean v2 = p0.isProcessStateForeground(v1);
	int v3 = this.mActivityManagerInternal.getUidProcessState(p1);
	boolean v4 = p0.isProcessStateForeground(v3);
	return v4;
}
-----
depth : 2
public long getUidLastForegroundElapsedTimeLocked(int p1){
	long v1 = this.mUidLastForegroundElapsedTime.get(p1);
	return v1;
}
-----
depth : 2
public long injectElapsedRealtime(){
	long v1 = SystemClock.elapsedRealtime();
	return v1;
}
-----
depth : 2
public void resetRateLimiting(){
	this.mApiCallCount = 0;
	p0.scheduleSave();
	return;
}
-----
depth : 2
public long getLastResetTimeLocked(){
	p0.updateTimesLocked();
	return this.mRawLastResetTime;
}
-----
depth : 2
public long injectCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public boolean isClockValid(long p1){
	return phiInstruction;
}
-----

and the following sink code:
['int v7 = v6.getApiCallCount(v4);\nreturn (this.mMaxUpdatesPerInterval - v7);', 'ShortcutPackage v6 = p0.getPackageShortcutsForPublisherLocked(p1, p2);\nint v7 = v6.getApiCallCount(v4);\nreturn (this.mMaxUpdatesPerInterval - v7);']

The method getRemainingCallCount has the following similar APIs:

- API Name: disableShortcuts(Ljava/lang/String;Ljava/util/List;Ljava/lang/CharSequence;II)V with Similarity Score: 0.8419172763824463
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p5);
v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
int v6 = p2.size();
v4.adjustRanks();

- API Name: removeLongLivedShortcuts(Ljava/lang/String;Ljava/util/List;I)V with Similarity Score: 0.8399849534034729
  - Access Control Level: SYS_OR_SIG and the following code:
ShortcutPackage v4 = p0.getPackageShortcutsForPublisherLocked(p1, p3);
v4.ensureImmutableShortcutsNotIncludedWithIds(p2, 1);
int v6 = p2.size();
v4.adjustRanks();

