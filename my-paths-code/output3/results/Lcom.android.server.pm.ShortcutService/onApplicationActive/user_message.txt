This is path 1 for the API with depth 2:
depth : 0
public void onApplicationActive(String p1, int p2){
	p0.enforceResetThrottlingPermission();
	boolean v2 = p0.isUserUnlockedL(p2);
	ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2);
	v3.resetRateLimitingForCommandLineNoSaving();
	p0.saveUserLocked(p2);
	return;
}
-----
depth : 1
public void enforceResetThrottlingPermission(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 1
public void saveUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	File v2 = v1.getParentFile();
	boolean v3 = v2.mkdirs();
	AtomicFile v3 = new AtomicFile(v1);
	FileOutputStream v5 = v3.startWrite();
	p0.saveUserInternalLocked(p1, v5, 0);
	v3.finishWrite(v5);
	p0.cleanupDanglingBitmapDirectoriesLocked(p1);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Failed to write to file ");
	File v11 = v3.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.e("ShortcutService", v13, caughtException);
	v3.failWrite(phiInstruction);
	ShortcutUser v16 = p0.getUserShortcutsLocked(p1);
	v16.logSharingShortcutStats(this.mMetricsLogger);
	return;
}
-----
depth : 2
public File getUserFile(int p1){
	File v0 = new File(v1,"shortcuts.xml");
	File v1 = p0.injectUserDataPath(p1);
	return v0;
}
-----
depth : 2
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public void cleanupDanglingBitmapDirectoriesLocked(int p1){
	long v1 = p0.getStatStartTime();
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	File v3 = p0.getUserBitmapFilePath(p1);
	File v4 = v3.listFiles();
	p0.logDurationStat(5, v1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void logSharingShortcutStats(MetricsLogger p1){
	int v1 = this.mPackages.size();
	LogMaker v1 = new LogMaker(1717);
	LogMaker v3 = v1.setType(1);
	LogMaker v4 = v3.setSubtype(this.mUserId);
	p1.write(v4);
	LogMaker v6 = v1.setType(2);
	LogMaker v7 = v6.setSubtype(phiInstruction);
	p1.write(v7);
	LogMaker v9 = v1.setType(3);
	LogMaker v10 = v9.setSubtype(phiInstruction);
	p1.write(v10);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void onApplicationActive(String p1, int p2){
	p0.enforceResetThrottlingPermission();
	boolean v2 = p0.isUserUnlockedL(p2);
	ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2);
	v3.resetRateLimitingForCommandLineNoSaving();
	p0.saveUserLocked(p2);
	return;
}
-----
depth : 1
public void enforceResetThrottlingPermission(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 1
public void saveUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	File v2 = v1.getParentFile();
	boolean v3 = v2.mkdirs();
	AtomicFile v3 = new AtomicFile(v1);
	FileOutputStream v5 = v3.startWrite();
	p0.saveUserInternalLocked(p1, v5, 0);
	v3.finishWrite(v5);
	p0.cleanupDanglingBitmapDirectoriesLocked(p1);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Failed to write to file ");
	File v11 = v3.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.e("ShortcutService", v13, caughtException);
	v3.failWrite(phiInstruction);
	ShortcutUser v16 = p0.getUserShortcutsLocked(p1);
	v16.logSharingShortcutStats(this.mMetricsLogger);
	return;
}
-----
depth : 2
public File getUserFile(int p1){
	File v0 = new File(v1,"shortcuts.xml");
	File v1 = p0.injectUserDataPath(p1);
	return v0;
}
-----
depth : 2
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public void cleanupDanglingBitmapDirectoriesLocked(int p1){
	long v1 = p0.getStatStartTime();
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	File v3 = p0.getUserBitmapFilePath(p1);
	File v4 = v3.listFiles();
	p0.logDurationStat(5, v1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void logSharingShortcutStats(MetricsLogger p1){
	int v1 = this.mPackages.size();
	LogMaker v1 = new LogMaker(1717);
	LogMaker v3 = v1.setType(1);
	LogMaker v4 = v3.setSubtype(this.mUserId);
	p1.write(v4);
	LogMaker v6 = v1.setType(2);
	LogMaker v7 = v6.setSubtype(phiInstruction);
	p1.write(v7);
	LogMaker v9 = v1.setType(3);
	LogMaker v10 = v9.setSubtype(phiInstruction);
	p1.write(v10);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void onApplicationActive(String p1, int p2){
	p0.enforceResetThrottlingPermission();
	boolean v2 = p0.isUserUnlockedL(p2);
	ShortcutPackage v3 = p0.getPackageShortcutsLocked(p1, p2);
	v3.resetRateLimitingForCommandLineNoSaving();
	p0.saveUserLocked(p2);
	return;
}
-----
depth : 1
public void enforceResetThrottlingPermission(){
	boolean v1 = p0.isCallerSystem();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 1
public ShortcutPackage getPackageShortcutsLocked(String p1, int p2){
	ShortcutUser v1 = p0.getUserShortcutsLocked(p2);
	ShortcutPackage v2 = v1.getPackageShortcuts(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public ShortcutPackage getPackageShortcuts(String p1){
	ShortcutPackage v1 = p0.getPackageShortcutsIfExists(p1);
	ShortcutPackage v1 = new ShortcutPackage(p0,this.mUserId,p1);
	Object v3 = this.mPackages.put(p1, v1);
	return phiInstruction;
}
-----
depth : 1
public void saveUserLocked(int p1){
	File v1 = p0.getUserFile(p1);
	File v2 = v1.getParentFile();
	boolean v3 = v2.mkdirs();
	AtomicFile v3 = new AtomicFile(v1);
	FileOutputStream v5 = v3.startWrite();
	p0.saveUserInternalLocked(p1, v5, 0);
	v3.finishWrite(v5);
	p0.cleanupDanglingBitmapDirectoriesLocked(p1);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Failed to write to file ");
	File v11 = v3.getBaseFile();
	StringBuilder v12 = v8.append(v11);
	String v13 = v8.toString();
	int v14 = Slog.e("ShortcutService", v13, caughtException);
	v3.failWrite(phiInstruction);
	ShortcutUser v16 = p0.getUserShortcutsLocked(p1);
	v16.logSharingShortcutStats(this.mMetricsLogger);
	return;
}
-----
depth : 2
public File getUserFile(int p1){
	File v0 = new File(v1,"shortcuts.xml");
	File v1 = p0.injectUserDataPath(p1);
	return v0;
}
-----
depth : 2
public void saveUserInternalLocked(int p1, OutputStream p2, boolean p3){
	TypedXmlSerializer v1 = Xml.newFastSerializer();
	String v2 = StandardCharsets.UTF_8.name();
	v1.setOutput(p2, v2);
	phiInstruction.startDocument(0, Boolean.TRUE);
	ShortcutUser v5 = p0.getUserShortcutsLocked(p1);
	v5.saveToXml(phiInstruction, p3);
	phiInstruction.endDocument();
	p2.flush();
	return;
}
-----
depth : 2
public void cleanupDanglingBitmapDirectoriesLocked(int p1){
	long v1 = p0.getStatStartTime();
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	File v3 = p0.getUserBitmapFilePath(p1);
	File v4 = v3.listFiles();
	p0.logDurationStat(5, v1);
	return;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void logSharingShortcutStats(MetricsLogger p1){
	int v1 = this.mPackages.size();
	LogMaker v1 = new LogMaker(1717);
	LogMaker v3 = v1.setType(1);
	LogMaker v4 = v3.setSubtype(this.mUserId);
	p1.write(v4);
	LogMaker v6 = v1.setType(2);
	LogMaker v7 = v6.setSubtype(phiInstruction);
	p1.write(v7);
	LogMaker v9 = v1.setType(3);
	LogMaker v10 = v9.setSubtype(phiInstruction);
	p1.write(v10);
	return;
}
-----
