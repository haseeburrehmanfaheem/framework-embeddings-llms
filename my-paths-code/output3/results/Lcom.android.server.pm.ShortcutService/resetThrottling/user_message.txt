This is path 1 for the API with depth 2:
depth : 0
public void resetThrottling(){
	p0.enforceSystemOrShell();
	int v2 = p0.getCallingUserId();
	p0.resetThrottlingInner(v2);
	return;
}
-----
depth : 1
public void enforceSystemOrShell(){
	boolean v1 = p0.isCallerSystem();
	boolean v2 = p0.isCallerShell();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 2
public boolean isCallerShell(){
	int v1 = p0.injectBinderCallingUid();
	return phiInstruction;
}
-----
depth : 1
public int getCallingUserId(){
	int v1 = p0.injectBinderCallingUid();
	int v2 = UserHandle.getUserId(v1);
	return v2;
}
-----
depth : 2
public int injectBinderCallingUid(){
	int v1 = IShortcutService$Stub.getCallingUid();
	return v1;
}
-----
depth : 1
public void resetThrottlingInner(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	v2.resetThrottling();
	p0.scheduleSaveUser(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("ShortcutManager: throttling counter reset for user ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.i("ShortcutService", v8);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void resetThrottling(){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 2
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void resetThrottling(){
	p0.enforceSystemOrShell();
	int v2 = p0.getCallingUserId();
	p0.resetThrottlingInner(v2);
	return;
}
-----
depth : 1
public void enforceSystemOrShell(){
	boolean v1 = p0.isCallerSystem();
	boolean v2 = p0.isCallerShell();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 2
public boolean isCallerShell(){
	int v1 = p0.injectBinderCallingUid();
	return phiInstruction;
}
-----
depth : 1
public int getCallingUserId(){
	int v1 = p0.injectBinderCallingUid();
	int v2 = UserHandle.getUserId(v1);
	return v2;
}
-----
depth : 2
public int injectBinderCallingUid(){
	int v1 = IShortcutService$Stub.getCallingUid();
	return v1;
}
-----
depth : 1
public void resetThrottlingInner(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	v2.resetThrottling();
	p0.scheduleSaveUser(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("ShortcutManager: throttling counter reset for user ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.i("ShortcutService", v8);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	boolean v2 = this.mUserManagerInternal.isUserUnlockingOrUnlocked(p1);
	return v2;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void resetThrottling(){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 2
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void resetThrottling(){
	p0.enforceSystemOrShell();
	int v2 = p0.getCallingUserId();
	p0.resetThrottlingInner(v2);
	return;
}
-----
depth : 1
public void enforceSystemOrShell(){
	boolean v1 = p0.isCallerSystem();
	boolean v2 = p0.isCallerShell();
	return;
}
-----
depth : 2
public boolean isCallerSystem(){
	return v2;
}
-----
depth : 2
public boolean isCallerShell(){
	int v1 = p0.injectBinderCallingUid();
	return phiInstruction;
}
-----
depth : 1
public int getCallingUserId(){
	int v1 = p0.injectBinderCallingUid();
	int v2 = UserHandle.getUserId(v1);
	return v2;
}
-----
depth : 2
public int injectBinderCallingUid(){
	int v1 = IShortcutService$Stub.getCallingUid();
	return v1;
}
-----
depth : 1
public void resetThrottlingInner(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	ShortcutUser v2 = p0.getUserShortcutsLocked(p1);
	v2.resetThrottling();
	p0.scheduleSaveUser(p1);
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("ShortcutManager: throttling counter reset for user ");
	StringBuilder v7 = v4.append(p1);
	String v8 = v4.toString();
	int v9 = Slog.i("ShortcutService", v8);
	return;
}
-----
depth : 2
public boolean isUserUnlockedL(int p1){
	boolean v1 = this.mUnlockedUsers.get(p1);
	return 1;
}
-----
depth : 2
public ShortcutUser getUserShortcutsLocked(int p1){
	boolean v1 = p0.isUserUnlockedL(p1);
	p0.wtf("User still locked");
	this.mLastLockedUser = p1;
	Object v3 = this.mUsers.get(p1);
	ShortcutUser v4 = p0.loadUserLocked(p1);
	ShortcutUser v4 = new ShortcutUser(p0,p1);
	this.mUsers.put(p1, phiInstruction);
	p0.checkPackageChanges(p1);
	return phiInstruction;
}
-----
depth : 2
public void resetThrottling(){
	int v1 = this.mPackages.size();
	return;
}
-----
depth : 2
public void scheduleSaveUser(int p1){
	p0.scheduleSaveInner(p1);
	return;
}
-----
