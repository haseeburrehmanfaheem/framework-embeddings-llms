This is path 1 for the API with depth 2:
depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("profile_key_name_decrypt_");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance("AES/GCM/NoPadding");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance("AES", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance("AES/GCM/NoPadding");
	int v18 = Slog.d("ManagedProfilePasswordCache", "Cannot encrypt", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v3 = LockSettingsStorage$PersistentData.fromBytes(v2);
	int v4 = Slog.e("LockSettingsStorage", "Error reading persistent data block", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState("pwd", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w("SyntheticPasswordManager", "progressCallback throws exception", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState("weaver", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Invalid weaver slot version of handle ");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e("SyntheticPasswordManager", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	[B v0 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("weaver read failed, slot: ");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e("SyntheticPasswordManager", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState("spblob", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Upgrade v1 SP blob for user ");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append(", type = ");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i("SyntheticPasswordManager", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState("metrics", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState("metrics", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	SP800Derive v0 = new SP800Derive(this.mSyntheticPassword);
	byte[] v2 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v3 = v0.withContext(p1, v2);
	return v3;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("profile_key_name_decrypt_");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance("AES/GCM/NoPadding");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance("AES", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance("AES/GCM/NoPadding");
	int v18 = Slog.d("ManagedProfilePasswordCache", "Cannot encrypt", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v3 = LockSettingsStorage$PersistentData.fromBytes(v2);
	int v4 = Slog.e("LockSettingsStorage", "Error reading persistent data block", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState("pwd", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w("SyntheticPasswordManager", "progressCallback throws exception", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState("weaver", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Invalid weaver slot version of handle ");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e("SyntheticPasswordManager", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("weaver read failed, slot: ");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e("SyntheticPasswordManager", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState("spblob", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Upgrade v1 SP blob for user ");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append(", type = ");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i("SyntheticPasswordManager", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState("metrics", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState("metrics", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	SP800Derive v0 = new SP800Derive(this.mSyntheticPassword);
	byte[] v2 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v3 = v0.withContext(p1, v2);
	return v3;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public byte[] getHashFactor(LockscreenCredential p1, int p2){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	LockscreenCredential v3 = p0.getDecryptedPasswordForTiedProfile(p2);
	boolean v4 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v5 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v6 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v7 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v6, v5, phiInstruction, p2, 0);
	byte[] v8 = SyntheticPasswordManager$AuthenticationResult.authToken.derivePasswordHashFactor();
	p0.scheduleGc();
	return v8;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
	return v1;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("profile_key_name_decrypt_");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance("AES/GCM/NoPadding");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance("AES", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance("AES/GCM/NoPadding");
	int v18 = Slog.d("ManagedProfilePasswordCache", "Cannot encrypt", caughtException);
	return;
}
-----
depth : 1
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public LockSettingsStorage$PersistentData readPersistentDataBlock(){
	PersistentDataBlockManagerInternal v1 = p0.getPersistentDataBlockManager();
	byte[] v2 = v1.getFrpCredentialHandle();
	LockSettingsStorage$PersistentData v3 = LockSettingsStorage$PersistentData.fromBytes(v2);
	int v4 = Slog.e("LockSettingsStorage", "Error reading persistent data block", caughtException);
	return LockSettingsStorage$PersistentData.NONE;
}
-----
depth : 1
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public long getLong(String p1, long p2, int p3){
	p0.checkReadPermission(p1, p3);
	long v2 = this.mStorage.getLong(p1, p2, p3);
	return v2;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState("pwd", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w("SyntheticPasswordManager", "progressCallback throws exception", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public byte[] loadState(String p1, long p2, int p3){
	byte[] v1 = this.mStorage.readSyntheticPasswordState(p3, p2, p1);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$PasswordData fromBytes(byte[] p1){
	SyntheticPasswordManager$PasswordData v0 = new SyntheticPasswordManager$PasswordData();
	ByteBuffer v2 = ByteBuffer.allocate(p1.length);
	ByteBuffer v3 = v2.put(p1, 0, p1.length);
	Buffer v4 = v2.flip();
	int v5 = v2.getInt();
	this.credentialType = v5;
	byte v6 = v2.get();
	this.scryptN = v6;
	byte v7 = v2.get();
	this.scryptR = v7;
	byte v8 = v2.get();
	this.scryptP = v8;
	int v9 = v2.getInt();
	[B v9 = new [B(v9);
	this.salt = v9;
	ByteBuffer v10 = v2.get(v9);
	int v11 = v2.getInt();
	[B v11 = new [B(v11);
	this.passwordHandle = v11;
	ByteBuffer v12 = v2.get(v11);
	return v0;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public byte[] computePasswordToken(LockscreenCredential p1, SyntheticPasswordManager$PasswordData p2){
	boolean v1 = p1.isNone();
	byte[] v2 = p0.scrypt(phiInstruction, SyntheticPasswordManager$PasswordData.salt, (1 << SyntheticPasswordManager$PasswordData.scryptN), (1 << SyntheticPasswordManager$PasswordData.scryptR), (1 << SyntheticPasswordManager$PasswordData.scryptP), 32);
	return v2;
}
-----
depth : 2
public int loadWeaverSlot(long p1, int p2){
	byte[] v1 = p0.loadState("weaver", p1, p2);
	ByteBuffer v2 = ByteBuffer.allocate(5);
	ByteBuffer v3 = v2.put(v1, 0, v1.length);
	Buffer v4 = v2.flip();
	byte v5 = v2.get();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("Invalid weaver slot version of handle ");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	int v10 = Slog.e("SyntheticPasswordManager", v9);
	return -1;
}
-----
depth : 2
public VerifyCredentialResponse weaverVerify(int p1, byte[] p2){
	[B v0 = new [B(WeaverConfig.keySize);
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(1);
	ArrayList v1 = SyntheticPasswordManager.toByteArrayList(phiInstruction);
	SyntheticPasswordManager$$ExternalSyntheticLambda1 v1 = new SyntheticPasswordManager$$ExternalSyntheticLambda1(v0,p1);
	this.mWeaver.read(p1, v1, v1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("weaver read failed, slot: ");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.e("SyntheticPasswordManager", v7, caughtException);
	return v0[0];
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getGatekeeperHAT(){
	return this.mGatekeeperHAT;
}
-----
depth : 2
public byte[] transformUnderWeaverSecret(byte[] p1, byte[] p2){
	[[B v0 = new [[B(1);
	byte[] v1 = SyntheticPasswordCrypto.personalisedHash(this.PERSONALISATION_WEAVER_PASSWORD, v0);
	[B v1 = new [B((p1.length + v1.length));
	System.arraycopy(p1, 0, v1, 0, p1.length);
	System.arraycopy(v1, 0, v1, p1.length, v1.length);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationToken unwrapSyntheticPasswordBlob(long p1, byte p2, byte[] p3, long p4, int p5){
	byte[] v1 = p0.loadState("spblob", p1, p5);
	SyntheticPasswordManager$SyntheticPasswordBlob v2 = SyntheticPasswordManager$SyntheticPasswordBlob.fromBytes(v1);
	String v3 = p0.getKeyName(p1);
	byte[] v4 = SyntheticPasswordCrypto.decryptBlobV1(v3, SyntheticPasswordManager$SyntheticPasswordBlob.mContent, p3);
	SyntheticPasswordManager$AuthenticationToken v4 = new SyntheticPasswordManager$AuthenticationToken(SyntheticPasswordManager$SyntheticPasswordBlob.mVersion);
	boolean v6 = p0.loadEscrowData(v4, p5);
	v4.recreateFromEscrow(phiInstruction);
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Upgrade v1 SP blob for user ");
	StringBuilder v10 = v7.append(p5);
	StringBuilder v11 = v7.append(", type = ");
	StringBuilder v12 = v7.append(p2);
	String v13 = v7.toString();
	int v14 = Slog.i("SyntheticPasswordManager", v13);
	p0.createSyntheticPasswordBlob(p1, p2, v4, p3, p4, p5);
	return v4;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallenge(IGateKeeperService p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveGkPassword();
	VerifyCredentialResponse v2 = p0.verifyChallengeInternal(p1, v1, p3, p4);
	return v2;
}
-----
depth : 2
public boolean hasPasswordMetrics(long p1, int p2){
	boolean v1 = p0.hasState("metrics", p1, p2);
	return v1;
}
-----
depth : 2
public void savePasswordMetrics(LockscreenCredential p1, SyntheticPasswordManager$AuthenticationToken p2, long p3, int p4){
	byte[] v1 = p2.deriveMetricsKey();
	[B v1 = new [B(0);
	VersionedPasswordMetrics v1 = new VersionedPasswordMetrics(p1);
	byte[] v3 = v1.serialize();
	byte[] v4 = SyntheticPasswordCrypto.encrypt(v1, v1, v3);
	p0.saveState("metrics", v4, p3, p4);
	return;
}
-----
depth : 1
public byte[] derivePasswordHashFactor(){
	byte[] v1 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH();
	byte[] v2 = p0.derivePassword(v1);
	return v2;
}
-----
depth : 2
public byte[] -$$Nest$sfgetPERSONALIZATION_PASSWORD_HASH(){
	return this.PERSONALIZATION_PASSWORD_HASH;
}
-----
depth : 2
public byte[] derivePassword(byte[] p1){
	SP800Derive v0 = new SP800Derive(this.mSyntheticPassword);
	byte[] v2 = SyntheticPasswordManager.-$$Nest$sfgetPERSONALISATION_CONTEXT();
	byte[] v3 = v0.withContext(p1, v2);
	return v3;
}
-----
