The method removeKey has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, "alias is null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	long v6 = this.mDatabase.setShouldCreateSnapshot(v4, v3, 1);
	this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete("keys", "uid = ? AND alias = ?", v1);
	return phiInstruction;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, "should_create_snapshot", phiInstruction);
	return v1;
}
-----
depth : 2
public void deleteEntry(int p1, int p2, String p3){
	Object v0 = new Object(3);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	String v3 = String.format(Locale.US, "Del %d/%d/%s", v0);
	int v4 = Log.i("RecoverableAppKeyStore", v3);
	String v5 = p0.getInternalAlias(p1, p2, p3);
	this.mKeyStore.deleteEntry(v5);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, "alias is null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	long v6 = this.mDatabase.setShouldCreateSnapshot(v4, v3, 1);
	this.mApplicationKeyStorage.deleteEntry(v4, v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete("keys", "uid = ? AND alias = ?", v1);
	return phiInstruction;
}
-----
depth : 2
public long setShouldCreateSnapshot(int p1, int p2, boolean p3){
	long v1 = p0.setLong(p1, p2, "should_create_snapshot", phiInstruction);
	return v1;
}
-----
depth : 2
public void deleteEntry(int p1, int p2, String p3){
	Object v0 = new Object(3);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	String v3 = String.format(Locale.US, "Del %d/%d/%s", v0);
	int v4 = Log.i("RecoverableAppKeyStore", v3);
	String v5 = p0.getInternalAlias(p1, p2, p3);
	this.mKeyStore.deleteEntry(v5);
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void removeKey(String p1){
	this.mRecoverableKeyStoreManager.removeKey(p1);
	return;
}
-----
depth : 1
public void removeKey(String p1){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, "alias is null");
	int v3 = Binder.getCallingUid();
	int v4 = UserHandle.getCallingUserId();
	boolean v5 = this.mDatabase.removeKey(v3, p1);
	return;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public boolean removeKey(int p1, String p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getWritableDatabase();
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	int v3 = v1.delete("keys", "uid = ? AND alias = ?", v1);
	return phiInstruction;
}
-----

and the following sink code:
['public void removeKey(String p1){\nthis.mRecoverableKeyStoreManager.removeKey(p1);', 'p0.checkRecoverKeyStorePermission();\nboolean v5 = this.mDatabase.removeKey(v3, p1);\nthis.mApplicationKeyStorage.deleteEntry(v4, v3, p1);']

The method removeKey has the following similar APIs:

- API Name: getKey(Ljava/lang/String;)Ljava/lang/String; with Similarity Score: 0.8105447292327881
  - Access Control Level: SYS_OR_SIG and the following code:
String v1 = this.mRecoverableKeyStoreManager.getKey(p1);
return v1;

- API Name: setRecoveryStatus(Ljava/lang/String;I)V with Similarity Score: 0.8004450798034668
  - Access Control Level: SYS_OR_SIG and the following code:
this.mRecoverableKeyStoreManager.setRecoveryStatus(p1, p2);
p0.checkRecoverKeyStorePermission();
int v4 = this.mDatabase.setRecoveryStatus(v3, p1, p2);

