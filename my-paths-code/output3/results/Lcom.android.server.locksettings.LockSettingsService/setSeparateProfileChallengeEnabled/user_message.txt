This is path 1 for the API with depth 2:
depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, "Credential is already zeroized");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean("lockscreen.profilechallenge", 0, p1);
	p0.setBoolean("lockscreen.profilechallenge", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = "lock_pattern_autolock".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Remove keystore profile key for user: ");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i("LockSettingsService", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("profile_key_name_encrypt_");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append("profile_key_name_decrypt_");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unable to remove keystore profile key for user:");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e("LockSettingsService", v19, caughtException);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	LockscreenCredential v3 = LockscreenCredential.createNone();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, "Credential is already zeroized");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean("lockscreen.profilechallenge", 0, p1);
	p0.setBoolean("lockscreen.profilechallenge", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = "lock_pattern_autolock".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Remove keystore profile key for user: ");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i("LockSettingsService", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("profile_key_name_encrypt_");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append("profile_key_name_decrypt_");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unable to remove keystore profile key for user:");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e("LockSettingsService", v19, caughtException);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setSeparateProfileChallengeEnabled(int p1, boolean p2, LockscreenCredential p3){
	p0.checkWritePermission(p1);
	int v2 = p3.getType();
	p0.setSeparateProfileChallengeEnabledLocked(p1, p2, phiInstruction);
	p0.notifySeparateProfileChallengeChanged(p1);
	return;
}
-----
depth : 1
public void checkWritePermission(int p1){
	return;
}
-----
depth : 1
public int getType(){
	p0.ensureNotZeroized();
	return this.mType;
}
-----
depth : 2
public void ensureNotZeroized(){
	Preconditions.checkState(phiInstruction, "Credential is already zeroized");
	return;
}
-----
depth : 1
public void setSeparateProfileChallengeEnabledLocked(int p1, boolean p2, LockscreenCredential p3){
	boolean v1 = p0.getBoolean("lockscreen.profilechallenge", 0, p1);
	p0.setBoolean("lockscreen.profilechallenge", p2, p1);
	this.mStorage.removeChildProfileLock(p1);
	p0.removeKeystoreProfileKey(p1);
	return;
}
-----
depth : 2
public boolean getBoolean(String p1, boolean p2, int p3){
	p0.checkReadPermission(p1, p3);
	boolean v2 = "lock_pattern_autolock".equals(p1);
	int v3 = p0.getCredentialTypeInternal(p3);
	return phiInstruction;
}
-----
depth : 2
public void setBoolean(String p1, boolean p2, int p3){
	p0.checkWritePermission(p3);
	this.mStorage.setBoolean(p1, p2, p3);
	return;
}
-----
depth : 2
public void removeChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	p0.deleteFile(v1);
	caughtException.printStackTrace();
	return;
}
-----
depth : 2
public void removeKeystoreProfileKey(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Remove keystore profile key for user: ");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i("LockSettingsService", v4);
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append("profile_key_name_encrypt_");
	StringBuilder v8 = v5.append(p1);
	String v9 = v5.toString();
	this.mJavaKeyStore.deleteEntry(v9);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append("profile_key_name_decrypt_");
	StringBuilder v13 = v10.append(p1);
	String v14 = v10.toString();
	this.mJavaKeyStore.deleteEntry(v14);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unable to remove keystore profile key for user:");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.e("LockSettingsService", v19, caughtException);
	return;
}
-----
