This is path 1 for the API with depth 2:
depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e("SyntheticPasswordManager", "Failed to invoke gatekeeper.enroll", caughtException);
	int v11 = phiInstruction.getResponseCode();
	byte[] v12 = phiInstruction.getPayload();
	p0.saveSyntheticPasswordHandle(v12, p4);
	VerifyCredentialResponse v14 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v14;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState("handle", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState("handle", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e("SyntheticPasswordManager", "Failed to invoke gatekeeper.enroll", caughtException);
	int v11 = phiInstruction.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append("Fail to re-enroll SP handle for user ");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w("SyntheticPasswordManager", v15);
	return v7;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e("SyntheticPasswordManager", "Failed to invoke gatekeeper.enroll", caughtException);
	int v11 = phiInstruction.getResponseCode();
	byte[] v12 = phiInstruction.getPayload();
	p0.saveSyntheticPasswordHandle(v12, p4);
	VerifyCredentialResponse v14 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v14;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState("handle", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState("handle", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e("SyntheticPasswordManager", "Failed to invoke gatekeeper.enroll", caughtException);
	int v11 = phiInstruction.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append("Fail to re-enroll SP handle for user ");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w("SyntheticPasswordManager", v15);
	return v7;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public VerifyCredentialResponse verifyGatekeeperPasswordHandle(long p1, long p2, int p3){
	p0.checkPasswordReadPermission();
	Object v2 = this.mGatekeeperPasswords.get(p1);
	IGateKeeperService v3 = p0.getGateKeeperService();
	VerifyCredentialResponse v4 = this.mSpManager.verifyChallengeInternal(v3, v2, p2, p3);
	return phiInstruction;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = phiInstruction.getResponseCode();
	byte[] v11 = phiInstruction.getPayload();
	p0.saveSyntheticPasswordHandle(v11, p4);
	VerifyCredentialResponse v13 = p0.verifyChallengeInternal(p1, p2, p3, p4);
	return v13;
}
-----
depth : 2
public byte[] loadSyntheticPasswordHandle(int p1){
	byte[] v1 = p0.loadState("handle", 0, p1);
	return v1;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public VerifyCredentialResponse$Builder setGatekeeperHAT(byte[] p1){
	this.mGatekeeperHAT = p1;
	return p0;
}
-----
depth : 2
public VerifyCredentialResponse build(){
	VerifyCredentialResponse v0 = new VerifyCredentialResponse(0,0,this.mGatekeeperHAT,this.mGatekeeperPasswordHandle,0);
	return v0;
}
-----
depth : 2
public boolean getShouldReEnroll(){
	return this.mShouldReEnroll;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public byte[] getPayload(){
	return this.mPayload;
}
-----
depth : 2
public void saveSyntheticPasswordHandle(byte[] p1, int p2){
	p0.saveState("handle", p1, 0, p2);
	return;
}
-----
depth : 2
public VerifyCredentialResponse verifyChallengeInternal(IGateKeeperService p1, byte[] p2, long p3, int p4){
	byte[] v1 = p0.loadSyntheticPasswordHandle(p4);
	GateKeeperResponse v2 = p1.verifyChallenge(p4, p3, v1, p2);
	int v3 = v2.getResponseCode();
	VerifyCredentialResponse$Builder v3 = new VerifyCredentialResponse$Builder();
	byte[] v5 = v2.getPayload();
	VerifyCredentialResponse$Builder v6 = v3.setGatekeeperHAT(v5);
	VerifyCredentialResponse v7 = v6.build();
	boolean v8 = v2.getShouldReEnroll();
	GateKeeperResponse v9 = p1.enroll(p4, v1, v1, p2);
	int v10 = Slog.e("SyntheticPasswordManager", "Failed to invoke gatekeeper.enroll", caughtException);
	int v11 = phiInstruction.getResponseCode();
	StringBuilder v11 = new StringBuilder();
	StringBuilder v13 = v11.append("Fail to re-enroll SP handle for user ");
	StringBuilder v14 = v11.append(p4);
	String v15 = v11.toString();
	int v16 = Slog.w("SyntheticPasswordManager", v15);
	return v7;
}
-----
