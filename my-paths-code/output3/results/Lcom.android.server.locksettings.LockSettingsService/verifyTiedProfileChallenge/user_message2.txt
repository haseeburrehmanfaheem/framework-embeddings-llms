The method verifyTiedProfileChallenge has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, "device_provisioned", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("spBasedDoVerifyCredential: user=");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append(" hasEnrolledBiometrics=");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d("LockSettingsService", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf("LockSettingsService", "verifyChallenge with SP failed.");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e("LockSettingsService", "gatekeeper verify failed", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w("LockSettingsService", "progressCallback throws exception", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unlocking user ");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i("LockSettingsService", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("profile_key_name_decrypt_");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance("AES/GCM/NoPadding");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance("AES", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance("AES/GCM/NoPadding");
	int v18 = Slog.d("ManagedProfilePasswordCache", "Cannot encrypt", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, "device_provisioned", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("spBasedDoVerifyCredential: user=");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append(" hasEnrolledBiometrics=");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d("LockSettingsService", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf("LockSettingsService", "verifyChallenge with SP failed.");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e("LockSettingsService", "gatekeeper verify failed", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w("LockSettingsService", "progressCallback throws exception", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unlocking user ");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i("LockSettingsService", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, "device_provisioned", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("spBasedDoVerifyCredential: user=");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append(" hasEnrolledBiometrics=");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d("LockSettingsService", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf("LockSettingsService", "verifyChallenge with SP failed.");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e("LockSettingsService", "gatekeeper verify failed", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w("LockSettingsService", "progressCallback throws exception", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unlocking user ");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i("LockSettingsService", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("profile_key_name_decrypt_");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance("AES/GCM/NoPadding");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance("AES", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance("AES/GCM/NoPadding");
	int v18 = Slog.d("ManagedProfilePasswordCache", "Cannot encrypt", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, "device_provisioned", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("spBasedDoVerifyCredential: user=");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append(" hasEnrolledBiometrics=");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d("LockSettingsService", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf("LockSettingsService", "verifyChallenge with SP failed.");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e("LockSettingsService", "gatekeeper verify failed", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w("LockSettingsService", "progressCallback throws exception", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unlocking user ");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i("LockSettingsService", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public VerifyCredentialResponse verifyTiedProfileChallenge(LockscreenCredential p1, int p2, int p3){
	p0.checkPasswordReadPermission();
	boolean v2 = p0.isProfileWithUnifiedLock(p2);
	UserInfo v3 = this.mUserManager.getProfileParent(p2);
	VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);
	int v5 = v4.getResponseCode();
	LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);
	VerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);
	p0.scheduleGc();
	return v7;
}
-----
depth : 1
public void checkPasswordReadPermission(){
	return;
}
-----
depth : 1
public boolean isProfileWithUnifiedLock(int p1){
	boolean v1 = p0.isCredentialSharableWithParent(p1);
	boolean v2 = p0.getSeparateProfileChallengeEnabledInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isCredentialSharableWithParent(int p1){
	UserManager v1 = p0.getUserManagerFromCache(p1);
	boolean v2 = v1.isCredentialSharableWithParent();
	return v2;
}
-----
depth : 2
public boolean getSeparateProfileChallengeEnabledInternal(int p1){
	boolean v1 = this.mStorage.getBoolean("lockscreen.profilechallenge", 0, p1);
	return v1;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, "device_provisioned", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("spBasedDoVerifyCredential: user=");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append(" hasEnrolledBiometrics=");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d("LockSettingsService", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf("LockSettingsService", "verifyChallenge with SP failed.");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	return v2;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e("LockSettingsService", "gatekeeper verify failed", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w("LockSettingsService", "progressCallback throws exception", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unlocking user ");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i("LockSettingsService", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----
depth : 1
public LockscreenCredential getDecryptedPasswordForTiedProfile(int p1){
	byte[] v1 = this.mStorage.readChildProfileLock(p1);
	byte[] v2 = Arrays.copyOfRange(v1, 0, 12);
	byte[] v3 = Arrays.copyOfRange(v1, 12, v1.length);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append("profile_key_name_decrypt_");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	Key v8 = this.mJavaKeyStore.getKey(v7, 0);
	Cipher v9 = Cipher.getInstance("AES/GCM/NoPadding");
	GCMParameterSpec v9 = new GCMParameterSpec(128,v2);
	v9.init(2, v8, v9);
	byte[] v12 = v9.doFinal(v3);
	LockscreenCredential v13 = LockscreenCredential.createManagedPassword(v12);
	Arrays.fill(v12, 0);
	this.mManagedProfilePasswordCache.storePassword(p1, v13);
	return v13;
}
-----
depth : 2
public byte[] readChildProfileLock(int p1){
	String v1 = p0.getChildProfileLockFile(p1);
	byte[] v2 = p0.readFile(v1);
	return v2;
}
-----
depth : 2
public LockscreenCredential createManagedPassword(byte[] p1){
	LockscreenCredential v0 = new LockscreenCredential(4,v1);
	byte[] v1 = Arrays.copyOf(p1, p1.length);
	return v0;
}
-----
depth : 2
public void storePassword(int p1, LockscreenCredential p2){
	boolean v1 = this.mEncryptedPasswords.contains(p1);
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	String v3 = ManagedProfilePasswordCache.getEncryptionKeyName(p1);
	Provider v4 = this.mKeyStore.getProvider();
	KeyGenerator v5 = KeyGenerator.getInstance("AES", v4);
	KeyGenParameterSpec$Builder v5 = new KeyGenParameterSpec$Builder(v3,3);
	KeyGenParameterSpec$Builder v7 = v5.setKeySize(256);
	String v7 = new String(1);
	KeyGenParameterSpec$Builder v8 = v7.setBlockModes(v7);
	int v9 = SyntheticPasswordCrypto.keyNamespace();
	KeyGenParameterSpec$Builder v10 = v8.setNamespace(v9);
	String v10 = new String(1);
	KeyGenParameterSpec$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyGenParameterSpec$Builder v12 = v11.setUserAuthenticationRequired(1);
	KeyGenParameterSpec$Builder v13 = v12.setUserAuthenticationValidityDurationSeconds(this.CACHE_TIMEOUT_SECONDS);
	KeyGenParameterSpec v14 = v13.build();
	v5.init(v14);
	SecretKey v16 = v5.generateKey();
	Cipher v17 = Cipher.getInstance("AES/GCM/NoPadding");
	int v18 = Slog.d("ManagedProfilePasswordCache", "Cannot encrypt", caughtException);
	return;
}
-----
depth : 1
public VerifyCredentialResponse doVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = p1.isNone();
	ContentResolver v2 = this.mContext.getContentResolver();
	int v3 = this.mInjector.settingsGlobalGetInt(v2, "device_provisioned", 0);
	VerifyCredentialResponse v4 = p0.spBasedDoVerifyCredential(p1, p2, p3, p4);
	LockSettingsStorage$CredentialHash v5 = this.mStorage.readCredentialHash(p2);
	boolean v6 = p1.checkAgainstStoredType(LockSettingsStorage$CredentialHash.type);
	VerifyCredentialResponse v7 = p0.verifyCredential(p2, v5, p1, p3);
	int v8 = v7.getResponseCode();
	this.mStrongAuth.reportSuccessfulStrongAuthUnlock(p2);
	return v7;
}
-----
depth : 2
public int settingsGlobalGetInt(ContentResolver p1, String p2, int p3){
	int v1 = Settings$Global.getInt(p1, p2, p3);
	return v1;
}
-----
depth : 2
public VerifyCredentialResponse spBasedDoVerifyCredential(LockscreenCredential p1, int p2, ICheckCredentialProgressCallback p3, int p4){
	boolean v1 = this.mInjector.hasEnrolledBiometrics(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("spBasedDoVerifyCredential: user=");
	StringBuilder v4 = v1.append(p2);
	StringBuilder v5 = v1.append(" hasEnrolledBiometrics=");
	StringBuilder v6 = v1.append(v1);
	String v7 = v1.toString();
	int v8 = Slog.d("LockSettingsService", v7);
	boolean v9 = p0.isSyntheticPasswordBasedCredentialLocked(p2);
	long v10 = p0.getSyntheticPasswordHandleLocked(p2);
	IGateKeeperService v11 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v12 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v11, v10, p1, p2, p3);
	int v13 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getResponseCode();
	byte[] v14 = SyntheticPasswordManager$AuthenticationResult.authToken.deriveGkPassword();
	this.mBiometricDeferredQueue.addPendingLockoutResetForUser(p2, v14);
	IGateKeeperService v16 = p0.getGateKeeperService();
	VerifyCredentialResponse v17 = this.mSpManager.verifyChallenge(v16, SyntheticPasswordManager$AuthenticationResult.authToken, 0, p2);
	int v18 = v17.getResponseCode();
	int v19 = Slog.wtf("LockSettingsService", "verifyChallenge with SP failed.");
	return VerifyCredentialResponse.ERROR;
}
-----
depth : 2
public LockSettingsStorage$CredentialHash readCredentialHash(int p1){
	LockSettingsStorage$CredentialHash v1 = p0.readPasswordHashIfExists(p1);
	LockSettingsStorage$CredentialHash v2 = p0.readPatternHashIfExists(p1);
	LockSettingsStorage$CredentialHash v3 = LockSettingsStorage$CredentialHash.createEmptyHash();
	return v3;
}
-----
depth : 2
public boolean checkAgainstStoredType(int p1){
	int v1 = p0.getType();
	int v2 = p0.getType();
	return phiInstruction;
}
-----
depth : 2
public VerifyCredentialResponse verifyCredential(int p1, LockSettingsStorage$CredentialHash p2, LockscreenCredential p3, ICheckCredentialProgressCallback p4){
	boolean v1 = p3.isNone();
	boolean v2 = p3.isNone();
	StrictMode.noteDiskRead();
	IGateKeeperService v4 = p0.getGateKeeperService();
	byte[] v5 = p3.getCredential();
	GateKeeperResponse v6 = v4.verifyChallenge(p1, 0, LockSettingsStorage$CredentialHash.hash, v5);
	int v7 = Slog.e("LockSettingsService", "gatekeeper verify failed", caughtException);
	VerifyCredentialResponse v8 = p0.convertResponse(phiInstruction);
	boolean v9 = phiInstruction.getShouldReEnroll();
	int v10 = v8.getResponseCode();
	p4.onCredentialVerified();
	int v12 = Slog.w("LockSettingsService", "progressCallback throws exception", caughtException);
	p0.setUserPasswordMetrics(p3, p1);
	byte[] v14 = p3.getCredential();
	p0.unlockKeystore(v14, p1);
	StringBuilder v15 = new StringBuilder();
	StringBuilder v17 = v15.append("Unlocking user ");
	StringBuilder v18 = v15.append(p1);
	String v19 = v15.toString();
	int v20 = Slog.i("LockSettingsService", v19);
	byte[] v21 = LockSettingsService.secretFromCredential(p3);
	p0.unlockUser(p1, v21);
	boolean v23 = p0.isProfileWithSeparatedLock(p1);
	p0.setDeviceUnlockedForUser(p1);
	boolean v25 = p0.setLockCredentialInternal(p3, p3, p1, 0);
	p0.sendCredentialsOnUnlockIfRequired(p3, p1);
	return v8;
}
-----
depth : 2
public int getResponseCode(){
	return this.mResponseCode;
}
-----
depth : 2
public void reportSuccessfulStrongAuthUnlock(int p1){
	Message v1 = this.mHandler.obtainMessage(5, p1, 0);
	v1.sendToTarget();
	return;
}
-----

and the following sink code:
['VerifyCredentialResponse v4 = p0.doVerifyCredential(p1, UserInfo.id, 0, p3);\nint v5 = v4.getResponseCode();', 'LockscreenCredential v6 = p0.getDecryptedPasswordForTiedProfile(p2);\nVerifyCredentialResponse v7 = p0.doVerifyCredential(v6, p2, 0, p3);']

The method verifyTiedProfileChallenge has the following similar APIs:

- API Name: checkCredential(Lcom/android/internal/widget/LockscreenCredential;ILcom/android/internal/widget/ICheckCredentialProgressCallback;)Lcom/android/internal/widget/VerifyCredentialResponse; with Similarity Score: 0.9161944389343262
  - Access Control Level: SYS_OR_SIG and the following code:
VerifyCredentialResponse v2 = p0.doVerifyCredential(p1, p2, p3, 0);
return v2;

- API Name: tryUnlockWithCachedUnifiedChallenge(I)Z with Similarity Score: 0.911974310874939
  - Access Control Level: SYS_OR_SIG and the following code:
LockscreenCredential v1 = this.mManagedProfilePasswordCache.retrievePassword(p1);
VerifyCredentialResponse v2 = p0.doVerifyCredential(v1, p1, 0, 0);
int v3 = v2.getResponseCode();

