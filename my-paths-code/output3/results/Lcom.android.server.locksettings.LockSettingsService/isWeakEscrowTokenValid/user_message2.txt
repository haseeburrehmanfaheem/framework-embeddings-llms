The method isWeakEscrowTokenValid has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w("LockSettingsService", "Invalid escrow token supplied");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature("android.hardware.type.automotive");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState("e0", 0, p1);
	boolean v2 = p0.hasState("p1", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w("LockSettingsService", "Invalid escrow token supplied");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature("android.hardware.type.automotive");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState("e0", 0, p1);
	boolean v2 = p0.hasState("p1", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	IGateKeeperService$Stub$Proxy v1 = new IGateKeeperService$Stub$Proxy(p1);
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean isWeakEscrowTokenValid(long p1, byte[] p2, int p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = this.mSpManager.hasEscrowData(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);
	int v6 = Slog.w("LockSettingsService", "Invalid escrow token supplied");
	Binder.restoreCallingIdentity(v2);
	return 0;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature("android.hardware.type.automotive");
	return;
}
-----
depth : 1
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState("e0", 0, p1);
	boolean v2 = p0.hasState("p1", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 2
public boolean hasState(String p1, long p2, int p3){
	byte[] v1 = p0.loadState(p1, p2, p3);
	boolean v2 = ArrayUtils.isEmpty(v1);
	return (v2 ^ 1);
}
-----
depth : 1
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public IGateKeeperService asInterface(IBinder p1){
	IInterface v1 = p1.queryLocalInterface("android.service.gatekeeper.IGateKeeperService");
	return v1;
}
-----
depth : 1
public SyntheticPasswordManager$AuthenticationResult unwrapWeakTokenBasedSyntheticPassword(IGateKeeperService p1, long p2, byte[] p3, int p4){
	SyntheticPasswordManager$AuthenticationResult v1 = p0.unwrapTokenBasedSyntheticPasswordInternal(p1, p2, 2, p3, p4);
	return v1;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPasswordInternal(IGateKeeperService p1, long p2, byte p3, byte[] p4, int p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadSecdiscardable(p2, p5);
	int v3 = p0.loadWeaverSlot(p2, p5);
	boolean v4 = p0.isWeaverAvailable();
	VerifyCredentialResponse v5 = p0.weaverVerify(v3, 0);
	int v6 = v5.getResponseCode();
	byte[] v7 = v5.getGatekeeperHAT();
	byte[] v8 = v5.getGatekeeperHAT();
	byte[] v9 = SyntheticPasswordCrypto.decrypt(v8, this.PERSONALISATION_WEAVER_TOKEN, v2);
	byte[] v10 = p0.transformUnderSecdiscardable(p4, phiInstruction);
	SyntheticPasswordManager$AuthenticationToken v11 = p0.unwrapSyntheticPasswordBlob(p2, p3, v10, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.authToken = v11;
	VerifyCredentialResponse v12 = p0.verifyChallenge(p1, v11, 0, p5);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v12;
	SyntheticPasswordManager$AuthenticationResult.gkResponse = VerifyCredentialResponse.OK;
	return v0;
}
-----

and the following sink code:
['boolean v3 = this.mSpManager.hasEscrowData(p3);\nIGateKeeperService v4 = p0.getGateKeeperService();\nSyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);', 'boolean v1 = p0.hasState("e0", 0, p1);\nboolean v2 = p0.hasState("p1", 0, p1);\nreturn phiInstruction;']

The method isWeakEscrowTokenValid has the following similar APIs:

- API Name: addWeakEscrowToken([BILcom/android/internal/widget/IWeakEscrowTokenActivatedListener;)J with Similarity Score: 0.8789445757865906
  - Access Control Level: SYS_OR_SIG and the following code:
long v5 = p0.addEscrowToken(p1, 1, p2, v2);
boolean v1 = p0.isUserSecure(p3);
boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
long v3 = p0.getSyntheticPasswordHandleLocked(p3);
IGateKeeperService v4 = p0.getGateKeeperService();
LockscreenCredential v5 = LockscreenCredential.createNone();
SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
boolean v9 = this.mSpManager.hasEscrowData(p3);
long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);

- API Name: removeWeakEscrowToken(JI)Z with Similarity Score: 0.8004565238952637
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = p0.removeEscrowToken(p1, p2);
long v1 = p0.getSyntheticPasswordHandleLocked(p2);
boolean v2 = this.mSpManager.removePendingToken(p1, p2);
boolean v3 = this.mSpManager.existsHandle(p1, p2);
this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);

