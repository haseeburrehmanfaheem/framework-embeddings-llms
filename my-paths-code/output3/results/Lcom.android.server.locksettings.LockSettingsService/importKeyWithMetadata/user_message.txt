This is path 1 for the API with depth 2:
depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, "alias is null");
	Object v3 = Objects.requireNonNull(p2, "keyBytes is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	Object v2 = new Object(1);
	Integer v3 = Integer.valueOf(p1);
	String v4 = String.format(Locale.US, "Regenerating permanently invalid Platform key for user %d.", v2);
	int v5 = Log.i("PlatformKeyManager", v4);
	p0.regenerate(p1);
	PlatformEncryptionKey v7 = p0.getEncryptKeyInternal(p1);
	return v7;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,"AES");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v0);
	int v5 = Log.i("RecoverableAppKeyStore", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,"AES");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, "alias is null");
	Object v3 = Objects.requireNonNull(p2, "keyBytes is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	PlatformEncryptionKey v3 = p0.getEncryptKeyInternal(p1);
	Object v3 = new Object(1);
	Integer v4 = Integer.valueOf(p1);
	String v5 = String.format(Locale.US, "Regenerating permanently invalid Platform key for user %d.", v3);
	int v6 = Log.i("PlatformKeyManager", v5);
	p0.regenerate(p1);
	PlatformEncryptionKey v8 = p0.getEncryptKeyInternal(p1);
	return v8;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,"AES");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v0);
	int v5 = Log.i("RecoverableAppKeyStore", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,"AES");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	String v1 = this.mRecoverableKeyStoreManager.importKeyWithMetadata(p1, p2, p3);
	return v1;
}
-----
depth : 1
public String importKeyWithMetadata(String p1, byte[] p2, byte[] p3){
	p0.checkRecoverKeyStorePermission();
	Object v2 = Objects.requireNonNull(p1, "alias is null");
	Object v3 = Objects.requireNonNull(p2, "keyBytes is null");
	int v4 = Binder.getCallingUid();
	int v5 = UserHandle.getCallingUserId();
	PlatformEncryptionKey v6 = this.mPlatformKeyManager.getEncryptKey(v5);
	this.mRecoverableKeyGenerator.importKey(v6, v5, v4, p1, p2, p3);
	this.mApplicationKeyStorage.setSymmetricKeyEntry(v5, v4, p1, p2);
	String v9 = p0.getAlias(v5, v4, p1);
	return v9;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public PlatformEncryptionKey getEncryptKey(int p1){
	p0.init(p1);
	PlatformDecryptionKey v2 = p0.getDecryptKeyInternal(p1);
	PlatformEncryptionKey v3 = p0.getEncryptKeyInternal(p1);
	return v3;
}
-----
depth : 2
public void importKey(PlatformEncryptionKey p1, int p2, int p3, String p4, byte[] p5, byte[] p6){
	SecretKeySpec v0 = new SecretKeySpec(p5,"AES");
	WrappedKey v2 = WrappedKey.fromSecretKey(p1, v0, p6);
	long v3 = this.mDatabase.insertKey(p2, p3, p4, v2);
	long v4 = this.mDatabase.setShouldCreateSnapshot(p2, p3, 1);
	return;
}
-----
depth : 2
public void setSymmetricKeyEntry(int p1, int p2, String p3, byte[] p4){
	Object v0 = new Object(4);
	Integer v1 = Integer.valueOf(p1);
	Integer v2 = Integer.valueOf(p2);
	Integer v3 = Integer.valueOf(p4.length);
	String v4 = String.format(Locale.US, "Set %d/%d/%s: %d bytes of key material", v0);
	int v5 = Log.i("RecoverableAppKeyStore", v4);
	String v6 = p0.getInternalAlias(p1, p2, p3);
	KeyStore$SecretKeyEntry v6 = new KeyStore$SecretKeyEntry(v6);
	SecretKeySpec v6 = new SecretKeySpec(p4,"AES");
	KeyProtection$Builder v8 = new KeyProtection$Builder(3);
	String v9 = new String(1);
	KeyProtection$Builder v10 = v8.setBlockModes(v9);
	String v10 = new String(1);
	KeyProtection$Builder v11 = v10.setEncryptionPaddings(v10);
	KeyProtection v12 = v11.build();
	this.mKeyStore.setEntry(v6, v6, v12);
	return;
}
-----
depth : 2
public String getAlias(int p1, int p2, String p3){
	String v1 = this.mApplicationKeyStorage.getGrantAlias(p1, p2, p3);
	return v1;
}
-----
