The method addWeakEscrowToken has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, "Listener can not be null.");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature("android.hardware.type.automotive");
	return;
}
-----
depth : 1
public long addEscrowToken(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	boolean v1 = p0.isUserSecure(p3);
	boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
	long v3 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	LockscreenCredential v5 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
	boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
	boolean v9 = this.mSpManager.hasEscrowData(p3);
	long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
	boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);
	return v10;
}
-----
depth : 2
public boolean isUserSecure(int p1){
	int v1 = p0.getCredentialTypeInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldMigrateToSyntheticPasswordLocked(int p1){
	long v1 = p0.getSyntheticPasswordHandleLocked(p1);
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState("pwd", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w("SyntheticPasswordManager", "progressCallback throws exception", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public void disableEscrowTokenOnNonManagedDevicesIfNeeded(int p1){
	UserManagerInternal v1 = this.mInjector.getUserManagerInternal();
	boolean v2 = v1.isUserManaged(p1);
	boolean v3 = v1.isDeviceManaged();
	DeviceStateCache v4 = this.mInjector.getDeviceStateCache();
	boolean v5 = v4.isDeviceProvisioned();
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature("android.hardware.type.automotive");
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Disabling escrow token on user ");
	StringBuilder v10 = v7.append(p1);
	String v11 = v7.toString();
	int v12 = Slog.i("LockSettingsService", v11);
	boolean v13 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	this.mSpManager.destroyEscrowData(p1);
	return;
}
-----
depth : 2
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState("e0", 0, p1);
	boolean v2 = p0.hasState("p1", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public long createTokenBasedSyntheticPassword(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	long v1 = SyntheticPasswordManager.generateHandle();
	Integer v2 = Integer.valueOf(p3);
	boolean v3 = this.tokenMap.containsKey(v2);
	Integer v4 = Integer.valueOf(p3);
	ArrayMap v4 = new ArrayMap();
	Object v6 = this.tokenMap.put(v4, v4);
	SyntheticPasswordManager$TokenData v6 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v8 = SyntheticPasswordManager.secureRandom(16384);
	boolean v9 = p0.isWeaverAvailable();
	byte[] v10 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v10;
	byte[] v11 = SyntheticPasswordCrypto.encrypt(v10, this.PERSONALISATION_WEAVER_TOKEN, v8);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v11;
	byte[] v12 = p0.transformUnderSecdiscardable(p1, v8);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v12;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v13 = Integer.valueOf(p3);
	Object v14 = this.tokenMap.get(v13);
	Long v15 = Long.valueOf(v1);
	Object v16 = v14.put(v15, v6);
	return v1;
}
-----
depth : 2
public boolean activateTokenBasedSyntheticPassword(long p1, SyntheticPasswordManager$AuthenticationToken p2, int p3){
	Integer v1 = Integer.valueOf(p3);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p3);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.get(v5);
	boolean v7 = p0.loadEscrowData(p2, p3);
	boolean v8 = p0.isWeaverAvailable();
	int v9 = p0.getNextAvailableWeaverSlot();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("Weaver enroll token to slot ");
	StringBuilder v12 = v9.append(v9);
	StringBuilder v13 = v9.append(" for user ");
	StringBuilder v14 = v9.append(p3);
	String v15 = v9.toString();
	int v16 = Slog.i("SyntheticPasswordManager", v15);
	byte[] v17 = p0.weaverEnroll(v9, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	p0.saveWeaverSlot(v9, p1, p3);
	this.mPasswordSlotManager.markSlotInUse(v9);
	p0.saveSecdiscardable(p1, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v21 = p0.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	p0.createSyntheticPasswordBlob(p1, v21, p2, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v23 = Integer.valueOf(p3);
	Object v24 = this.tokenMap.get(v23);
	Long v25 = Long.valueOf(p1);
	Object v26 = v24.remove(v25);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(p1, p3);
	return 1;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public long addWeakEscrowToken(byte[] p1, int p2, IWeakEscrowTokenActivatedListener p3){
	p0.checkManageWeakEscrowTokenMethodUsage();
	Object v2 = Objects.requireNonNull(p3, "Listener can not be null.");
	LockSettingsService$$ExternalSyntheticLambda0 v2 = new LockSettingsService$$ExternalSyntheticLambda0(p3);
	long v4 = Binder.clearCallingIdentity();
	long v5 = p0.addEscrowToken(p1, 1, p2, v2);
	Binder.restoreCallingIdentity(v4);
	return v5;
}
-----
depth : 1
public void checkManageWeakEscrowTokenMethodUsage(){
	PackageManager v2 = this.mContext.getPackageManager();
	boolean v3 = v2.hasSystemFeature("android.hardware.type.automotive");
	return;
}
-----
depth : 1
public long addEscrowToken(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	boolean v1 = p0.isUserSecure(p3);
	boolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);
	long v3 = p0.getSyntheticPasswordHandleLocked(p3);
	IGateKeeperService v4 = p0.getGateKeeperService();
	LockscreenCredential v5 = LockscreenCredential.createNone();
	SyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);
	boolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);
	p0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);
	boolean v9 = this.mSpManager.hasEscrowData(p3);
	long v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);
	boolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);
	return v10;
}
-----
depth : 2
public boolean isUserSecure(int p1){
	int v1 = p0.getCredentialTypeInternal(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean shouldMigrateToSyntheticPasswordLocked(int p1){
	long v1 = p0.getSyntheticPasswordHandleLocked(p1);
	return phiInstruction;
}
-----
depth : 2
public long getSyntheticPasswordHandleLocked(int p1){
	long v1 = p0.getLong("sp-handle", 0, p1);
	return v1;
}
-----
depth : 2
public IGateKeeperService getGateKeeperService(){
	IBinder v1 = ServiceManager.getService("android.service.gatekeeper.IGateKeeperService");
	LockSettingsService$GateKeeperDiedRecipient v1 = new LockSettingsService$GateKeeperDiedRecipient(p0,0);
	v1.linkToDeath(v1, 0);
	int v4 = Slog.w("LockSettingsService", " Unable to register death recipient", caughtException);
	IGateKeeperService v5 = IGateKeeperService$Stub.asInterface(v1);
	this.mGateKeeperService = v5;
	return v5;
}
-----
depth : 2
public LockscreenCredential createNone(){
	LockscreenCredential v0 = new LockscreenCredential(-1,v0);
	[B v0 = new [B(0);
	return v0;
}
-----
depth : 2
public SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(IGateKeeperService p1, long p2, LockscreenCredential p3, int p4, ICheckCredentialProgressCallback p5){
	SyntheticPasswordManager$AuthenticationResult v0 = new SyntheticPasswordManager$AuthenticationResult();
	byte[] v2 = p0.loadState("pwd", p2, p4);
	SyntheticPasswordManager$PasswordData v3 = SyntheticPasswordManager$PasswordData.fromBytes(v2);
	boolean v4 = p3.checkAgainstStoredType(SyntheticPasswordManager$PasswordData.credentialType);
	byte[] v5 = p0.computePasswordToken(p3, v3);
	int v6 = p0.loadWeaverSlot(p2, p4);
	boolean v7 = p0.isWeaverAvailable();
	byte[] v8 = p0.passwordTokenToWeaverKey(v5);
	VerifyCredentialResponse v9 = p0.weaverVerify(v6, v8);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v9;
	int v10 = v9.getResponseCode();
	byte[] v11 = SyntheticPasswordManager$AuthenticationResult.gkResponse.getGatekeeperHAT();
	byte[] v12 = p0.transformUnderWeaverSecret(v5, v11);
	p5.onCredentialVerified();
	int v14 = Slog.w("SyntheticPasswordManager", "progressCallback throws exception", caughtException);
	SyntheticPasswordManager$AuthenticationToken v15 = p0.unwrapSyntheticPasswordBlob(p2, 0, phiInstruction, phiInstruction, p4);
	SyntheticPasswordManager$AuthenticationResult.authToken = v15;
	VerifyCredentialResponse v16 = p0.verifyChallenge(p1, v15, 0, p4);
	SyntheticPasswordManager$AuthenticationResult.gkResponse = v16;
	boolean v17 = p0.hasPasswordMetrics(p2, p4);
	p0.savePasswordMetrics(p3, SyntheticPasswordManager$AuthenticationResult.authToken, p2, p4);
	return v0;
}
-----
depth : 2
public boolean isSyntheticPasswordBasedCredentialLocked(int p1){
	LockSettingsStorage$PersistentData v1 = this.mStorage.readPersistentDataBlock();
	return phiInstruction;
}
-----
depth : 2
public void disableEscrowTokenOnNonManagedDevicesIfNeeded(int p1){
	UserManagerInternal v1 = this.mInjector.getUserManagerInternal();
	boolean v2 = v1.isUserManaged(p1);
	boolean v3 = v1.isDeviceManaged();
	DeviceStateCache v4 = this.mInjector.getDeviceStateCache();
	boolean v5 = v4.isDeviceProvisioned();
	PackageManager v6 = this.mContext.getPackageManager();
	boolean v7 = v6.hasSystemFeature("android.hardware.type.automotive");
	StringBuilder v7 = new StringBuilder();
	StringBuilder v9 = v7.append("Disabling escrow token on user ");
	StringBuilder v10 = v7.append(p1);
	String v11 = v7.toString();
	int v12 = Slog.i("LockSettingsService", v11);
	boolean v13 = p0.isSyntheticPasswordBasedCredentialLocked(p1);
	this.mSpManager.destroyEscrowData(p1);
	return;
}
-----
depth : 2
public boolean hasEscrowData(int p1){
	boolean v1 = p0.hasState("e0", 0, p1);
	boolean v2 = p0.hasState("p1", 0, p1);
	return phiInstruction;
}
-----
depth : 2
public long createTokenBasedSyntheticPassword(byte[] p1, int p2, int p3, LockPatternUtils$EscrowTokenStateChangeCallback p4){
	long v1 = SyntheticPasswordManager.generateHandle();
	Integer v2 = Integer.valueOf(p3);
	boolean v3 = this.tokenMap.containsKey(v2);
	Integer v4 = Integer.valueOf(p3);
	ArrayMap v4 = new ArrayMap();
	Object v6 = this.tokenMap.put(v4, v4);
	SyntheticPasswordManager$TokenData v6 = new SyntheticPasswordManager$TokenData();
	SyntheticPasswordManager$TokenData.mType = p2;
	byte[] v8 = SyntheticPasswordManager.secureRandom(16384);
	boolean v9 = p0.isWeaverAvailable();
	byte[] v10 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);
	SyntheticPasswordManager$TokenData.weaverSecret = v10;
	byte[] v11 = SyntheticPasswordCrypto.encrypt(v10, this.PERSONALISATION_WEAVER_TOKEN, v8);
	SyntheticPasswordManager$TokenData.secdiscardableOnDisk = v11;
	byte[] v12 = p0.transformUnderSecdiscardable(p1, v8);
	SyntheticPasswordManager$TokenData.aggregatedSecret = v12;
	SyntheticPasswordManager$TokenData.mCallback = p4;
	Integer v13 = Integer.valueOf(p3);
	Object v14 = this.tokenMap.get(v13);
	Long v15 = Long.valueOf(v1);
	Object v16 = v14.put(v15, v6);
	return v1;
}
-----
depth : 2
public boolean activateTokenBasedSyntheticPassword(long p1, SyntheticPasswordManager$AuthenticationToken p2, int p3){
	Integer v1 = Integer.valueOf(p3);
	boolean v2 = this.tokenMap.containsKey(v1);
	Integer v3 = Integer.valueOf(p3);
	Object v4 = this.tokenMap.get(v3);
	Long v5 = Long.valueOf(p1);
	Object v6 = v4.get(v5);
	boolean v7 = p0.loadEscrowData(p2, p3);
	boolean v8 = p0.isWeaverAvailable();
	int v9 = p0.getNextAvailableWeaverSlot();
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append("Weaver enroll token to slot ");
	StringBuilder v12 = v9.append(v9);
	StringBuilder v13 = v9.append(" for user ");
	StringBuilder v14 = v9.append(p3);
	String v15 = v9.toString();
	int v16 = Slog.i("SyntheticPasswordManager", v15);
	byte[] v17 = p0.weaverEnroll(v9, 0, SyntheticPasswordManager$TokenData.weaverSecret);
	p0.saveWeaverSlot(v9, p1, p3);
	this.mPasswordSlotManager.markSlotInUse(v9);
	p0.saveSecdiscardable(p1, SyntheticPasswordManager$TokenData.secdiscardableOnDisk, p3);
	byte v21 = p0.getTokenBasedBlobType(SyntheticPasswordManager$TokenData.mType);
	p0.createSyntheticPasswordBlob(p1, v21, p2, SyntheticPasswordManager$TokenData.aggregatedSecret, 0, p3);
	Integer v23 = Integer.valueOf(p3);
	Object v24 = this.tokenMap.get(v23);
	Long v25 = Long.valueOf(p1);
	Object v26 = v24.remove(v25);
	SyntheticPasswordManager$TokenData.mCallback.onEscrowTokenActivated(p1, p3);
	return 1;
}
-----

and the following sink code:
['long v5 = p0.addEscrowToken(p1, 1, p2, v2);\nboolean v1 = p0.isUserSecure(p3);\nboolean v2 = p0.shouldMigrateToSyntheticPasswordLocked(p3);\nlong v3 = p0.getSyntheticPasswordHandleLocked(p3);\nIGateKeeperService v4 = p0.getGateKeeperService();\nLockscreenCredential v5 = LockscreenCredential.createNone();\nSyntheticPasswordManager$AuthenticationResult v6 = this.mSpManager.unwrapPasswordBasedSyntheticPassword(v4, v3, v5, p3, 0);\nboolean v7 = p0.isSyntheticPasswordBasedCredentialLocked(p3);\np0.disableEscrowTokenOnNonManagedDevicesIfNeeded(p3);\nboolean v9 = this.mSpManager.hasEscrowData(p3);\nlong v10 = this.mSpManager.createTokenBasedSyntheticPassword(p1, p2, p3, p4);\nboolean v11 = this.mSpManager.activateTokenBasedSyntheticPassword(v10, phiInstruction, p3);', 'SyntheticPasswordManager$TokenData v6 = new SyntheticPasswordManager$TokenData();\nSyntheticPasswordManager$TokenData.mType = p2;\nbyte[] v8 = SyntheticPasswordManager.secureRandom(16384);\nboolean v9 = p0.isWeaverAvailable();\nbyte[] v10 = SyntheticPasswordManager.secureRandom(WeaverConfig.valueSize);\nSyntheticPasswordManager$TokenData.weaverSecret = v10;\nbyte[] v11 = SyntheticPasswordCrypto.encrypt(v10, this.PERSONALISATION_WEAVER_TOKEN, v8);\nSyntheticPasswordManager$TokenData.secdiscardableOnDisk = v11;\nbyte[] v12 = p0.transformUnderSecdiscardable(p1, v8);\nSyntheticPasswordManager$TokenData.aggregatedSecret = v12;']

The method addWeakEscrowToken has the following similar APIs:

- API Name: isWeakEscrowTokenValid(J[BI)Z with Similarity Score: 0.8789445757865906
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = this.mSpManager.hasEscrowData(p3);
IGateKeeperService v4 = p0.getGateKeeperService();
SyntheticPasswordManager$AuthenticationResult v5 = this.mSpManager.unwrapWeakTokenBasedSyntheticPassword(v4, p1, p2, p3);

- API Name: removeWeakEscrowToken(JI)Z with Similarity Score: 0.8021445274353027
  - Access Control Level: SYS_OR_SIG and the following code:
boolean v3 = p0.removeEscrowToken(p1, p2);
long v1 = p0.getSyntheticPasswordHandleLocked(p2);
boolean v2 = this.mSpManager.removePendingToken(p1, p2);
boolean v3 = this.mSpManager.existsHandle(p1, p2);
this.mSpManager.destroyTokenBasedSyntheticPassword(p1, p2);

