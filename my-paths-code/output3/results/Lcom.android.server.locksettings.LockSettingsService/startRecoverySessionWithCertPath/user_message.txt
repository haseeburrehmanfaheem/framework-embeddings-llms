This is path 1 for the API with depth 2:
depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
depth : 1
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v3 = Objects.requireNonNull(p1, "invalid session");
	Object v4 = Objects.requireNonNull(p3, "verifierCertPath is null");
	Object v5 = Objects.requireNonNull(p4, "vaultParams is null");
	Object v6 = Objects.requireNonNull(p5, "vaultChallenge is null");
	Object v7 = Objects.requireNonNull(p6, "secrets is null");
	CertPath v8 = p3.getCertPath();
	X509Certificate v9 = this.mTestCertHelper.getRootCertificate(v2);
	CertUtils.validateCertPath(v9, v8);
	List v11 = v8.getCertificates();
	Object v12 = v11.get(0);
	PublicKey v13 = v12.getPublicKey();
	byte[] v14 = v13.getEncoded();
	byte[] v15 = p0.startRecoverySession(p1, v14, p4, p5, p6);
	return v15;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
	return phiInstruction;
}
-----
depth : 2
public CertPath getCertPath(){
	CertPath v1 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getTestOnlyInsecureCertificate();
	return v3;
}
-----
depth : 2
public void validateCertPath(X509Certificate p1, CertPath p2){
	CertUtils.validateCertPath(0, p1, p2);
	return;
}
-----
depth : 2
public byte[] startRecoverySession(String p1, byte[] p2, byte[] p3, byte[] p4, List p5){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	int v3 = p5.size();
	PublicKey v4 = KeySyncUtils.deserializePublicKey(p2);
	boolean v5 = p0.publicKeysMatch(v4, p3);
	byte[] v6 = KeySyncUtils.generateKeyClaimant();
	Object v7 = p5.get(0);
	byte[] v8 = v7.getSecret();
	RecoverySessionStorage$Entry v8 = new RecoverySessionStorage$Entry(p1,v8,v6,p3);
	this.mRecoverySessionStorage.add(v2, v8);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append("Received VaultParams for recovery: ");
	String v13 = HexDump.toHexString(p3);
	StringBuilder v14 = v10.append(v13);
	String v15 = v10.toString();
	int v16 = Log.i("RecoverableKeyStoreMgr", v15);
	byte[] v17 = KeySyncUtils.calculateThmKfHash(v8);
	byte[] v18 = KeySyncUtils.encryptRecoveryClaim(v4, p3, p4, v17, v6);
	return v18;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	byte[] v1 = this.mRecoverableKeyStoreManager.startRecoverySessionWithCertPath(p1, p2, p3, p4, p5, p6);
	return v1;
}
-----
depth : 1
public byte[] startRecoverySessionWithCertPath(String p1, String p2, RecoveryCertPath p3, byte[] p4, byte[] p5, List p6){
	p0.checkRecoverKeyStorePermission();
	String v2 = this.mTestCertHelper.getDefaultCertificateAliasIfEmpty(p2);
	Object v3 = Objects.requireNonNull(p1, "invalid session");
	Object v4 = Objects.requireNonNull(p3, "verifierCertPath is null");
	Object v5 = Objects.requireNonNull(p4, "vaultParams is null");
	Object v6 = Objects.requireNonNull(p5, "vaultChallenge is null");
	Object v7 = Objects.requireNonNull(p6, "secrets is null");
	CertPath v8 = p3.getCertPath();
	X509Certificate v9 = this.mTestCertHelper.getRootCertificate(v2);
	CertUtils.validateCertPath(v9, v8);
	List v11 = v8.getCertificates();
	Object v12 = v11.get(0);
	PublicKey v13 = v12.getPublicKey();
	byte[] v14 = v13.getEncoded();
	byte[] v15 = p0.startRecoverySession(p1, v14, p4, p5, p6);
	return v15;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public String getDefaultCertificateAliasIfEmpty(String p1){
	boolean v1 = p1.isEmpty();
	int v2 = Log.e("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");
	return phiInstruction;
}
-----
depth : 2
public CertPath getCertPath(){
	CertPath v1 = RecoveryCertPath.decodeCertPath(this.mEncodedCertPath);
	return v1;
}
-----
depth : 2
public X509Certificate getRootCertificate(String p1){
	String v1 = p0.getDefaultCertificateAliasIfEmpty(p1);
	boolean v2 = p0.isTestOnlyCertificateAlias(v1);
	X509Certificate v3 = TrustedRootCertificates.getRootCertificate(v1);
	return v3;
}
-----
depth : 2
public void validateCertPath(X509Certificate p1, CertPath p2){
	CertUtils.validateCertPath(0, p1, p2);
	return;
}
-----
depth : 2
public byte[] startRecoverySession(String p1, byte[] p2, byte[] p3, byte[] p4, List p5){
	p0.checkRecoverKeyStorePermission();
	int v2 = Binder.getCallingUid();
	int v3 = p5.size();
	PublicKey v4 = KeySyncUtils.deserializePublicKey(p2);
	boolean v5 = p0.publicKeysMatch(v4, p3);
	byte[] v6 = KeySyncUtils.generateKeyClaimant();
	Object v7 = p5.get(0);
	byte[] v8 = v7.getSecret();
	RecoverySessionStorage$Entry v8 = new RecoverySessionStorage$Entry(p1,v8,v6,p3);
	this.mRecoverySessionStorage.add(v2, v8);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append("Received VaultParams for recovery: ");
	String v13 = HexDump.toHexString(p3);
	StringBuilder v14 = v10.append(v13);
	String v15 = v10.toString();
	int v16 = Log.i("RecoverableKeyStoreMgr", v15);
	byte[] v17 = KeySyncUtils.calculateThmKfHash(v8);
	byte[] v18 = KeySyncUtils.encryptRecoveryClaim(v4, p3, p4, v17, v6);
	return v18;
}
-----
