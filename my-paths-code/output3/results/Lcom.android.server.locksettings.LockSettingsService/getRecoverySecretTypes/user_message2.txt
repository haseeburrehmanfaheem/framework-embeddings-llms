The method getRecoverySecretTypes has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
depth : 1
public [I getRecoverySecretTypes(){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);
	return v4;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query("recovery_service_metadata", v1, "user_id = ? AND uid = ?", v1, 0, 0, 0);
	int v5 = v4.getCount();
	boolean v6 = v4.moveToFirst();
	int v7 = v4.getColumnIndexOrThrow("secret_types");
	boolean v8 = v4.isNull(v7);
	String v9 = v4.getString(v7);
	boolean v10 = TextUtils.isEmpty(v9);
	String v11 = v9.split(",");
	[I v11 = new [I(v11.length);
	v4.close();
	return v11;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public [I getRecoverySecretTypes(){
	[I v1 = this.mRecoverableKeyStoreManager.getRecoverySecretTypes();
	return v1;
}
-----
depth : 1
public [I getRecoverySecretTypes(){
	p0.checkRecoverKeyStorePermission();
	int v2 = UserHandle.getCallingUserId();
	int v3 = Binder.getCallingUid();
	[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);
	return v4;
}
-----
depth : 2
public void checkRecoverKeyStorePermission(){
	int v8 = UserHandle.getCallingUserId();
	int v9 = Binder.getCallingUid();
	this.mCleanupManager.registerRecoveryAgent(v8, v9);
	return;
}
-----
depth : 2
public [I getRecoverySecretTypes(int p1, int p2){
	SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
	String v1 = new String(4);
	String v1 = new String(2);
	String v2 = Integer.toString(p1);
	String v3 = Integer.toString(p2);
	Cursor v4 = v1.query("recovery_service_metadata", v1, "user_id = ? AND uid = ?", v1, 0, 0, 0);
	int v5 = v4.getCount();
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(v5);
	Integer v7 = Integer.valueOf(p1);
	Integer v8 = Integer.valueOf(p2);
	String v9 = String.format(Locale.US, "%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1.", v5);
	int v10 = Log.wtf("RecoverableKeyStoreDb", v9);
	[I v10 = new [I(0);
	v4.close();
	return v10;
}
-----

and the following sink code:
['int v2 = UserHandle.getCallingUserId();\nint v3 = Binder.getCallingUid();\n[I v4 = this.mDatabase.getRecoverySecretTypes(v2, v3);\nreturn v4;', 'SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();\nString v2 = Integer.toString(p1);\nString v3 = Integer.toString(p2);\nCursor v4 = v1.query("recovery_service_metadata", new String[] {"secret_types"}, "user_id = ? AND uid = ?", new String[] {v2, v3}, 0, 0, 0);\nint v7 = v4.getColumnIndexOrThrow("secret_types");\nString v9 = v4.getString(v7);\n[I v11 = new [I(v11.length);']

The method getRecoverySecretTypes has the following similar APIs:

- API Name: setRecoverySecretTypes([I)V with Similarity Score: 0.944584846496582
  - Access Control Level: SYS_OR_SIG and the following code:
SQLiteDatabase v1 = this.mKeyStoreDbHelper.getReadableDatabase();
Cursor v4 = v1.query("recovery_service_metadata", v1, "user_id = ? AND uid = ?", v1, 0, 0, 0);
[I v11 = new [I(v11.length);
return v11;

- API Name: setRecoverySecretTypes([I)V with Similarity Score: 0.9059246182441711
  - Access Control Level: SYS_OR_SIG and the following code:
Object v2 = Objects.requireNonNull(p1, "secretTypes is null");
int v3 = UserHandle.getCallingUserId();
int v4 = Binder.getCallingUid();
[I v5 = this.mDatabase.getRecoverySecretTypes(v3, v4);
boolean v6 = Arrays.equals(p1, v5);
long v7 = this.mDatabase.setRecoverySecretTypes(v3, v4, p1);

