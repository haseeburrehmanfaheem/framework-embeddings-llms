This is path 1 for the API with depth 2:
depth : 0
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	long v3 = PersistentDataBlockService.-$$Nest$mdoGetMaximumDataBlockSize(this.this$0);
	FileChannel v4 = PersistentDataBlockService.-$$Nest$mgetBlockOutputChannel(this.this$0);
	ByteBuffer v5 = ByteBuffer.allocate(((p1.length + 8) + 32));
	[B v5 = new [B(32);
	ByteBuffer v6 = v5.put(v5);
	ByteBuffer v7 = v5.putInt(428873843);
	ByteBuffer v8 = v5.putInt(p1.length);
	ByteBuffer v9 = v5.put(p1);
	Buffer v10 = v5.flip();
	Object v11 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
	boolean v12 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
	int v13 = v4.write(v5);
	v4.force(1);
	String v15 = PersistentDataBlockService.-$$Nest$sfgetTAG();
	int v16 = Slog.e(v15, "failed writing to the persistent data block", caughtException);
	return -1;
}
-----
depth : 1
public void -$$Nest$menforceUid(PersistentDataBlockService p1, int p2){
	p1.enforceUid(p2);
	return;
}
-----
depth : 2
public void enforceUid(int p1){
	return;
}
-----
depth : 1
public long -$$Nest$mdoGetMaximumDataBlockSize(PersistentDataBlockService p1){
	long v1 = p1.doGetMaximumDataBlockSize();
	return v1;
}
-----
depth : 2
public long doGetMaximumDataBlockSize(){
	long v1 = p0.getBlockDeviceSize();
	return phiInstruction;
}
-----
depth : 1
public FileChannel -$$Nest$mgetBlockOutputChannel(PersistentDataBlockService p1){
	FileChannel v1 = p1.getBlockOutputChannel();
	return v1;
}
-----
depth : 2
public FileChannel getBlockOutputChannel(){
	RandomAccessFile v0 = new RandomAccessFile(this.mDataBlockFile,"rw");
	FileChannel v2 = v0.getChannel();
	return v2;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	long v3 = PersistentDataBlockService.-$$Nest$mdoGetMaximumDataBlockSize(this.this$0);
	FileChannel v4 = PersistentDataBlockService.-$$Nest$mgetBlockOutputChannel(this.this$0);
	ByteBuffer v5 = ByteBuffer.allocate(((p1.length + 8) + 32));
	[B v5 = new [B(32);
	ByteBuffer v6 = v5.put(v5);
	ByteBuffer v7 = v5.putInt(428873843);
	ByteBuffer v8 = v5.putInt(p1.length);
	ByteBuffer v9 = v5.put(p1);
	Buffer v10 = v5.flip();
	Object v11 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
	boolean v12 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
	int v13 = v4.write(v5);
	String v14 = PersistentDataBlockService.-$$Nest$sfgetTAG();
	int v15 = Slog.e(v14, "failed writing to the persistent data block", caughtException);
	return -1;
}
-----
depth : 1
public void -$$Nest$menforceUid(PersistentDataBlockService p1, int p2){
	p1.enforceUid(p2);
	return;
}
-----
depth : 2
public void enforceUid(int p1){
	return;
}
-----
depth : 1
public long -$$Nest$mdoGetMaximumDataBlockSize(PersistentDataBlockService p1){
	long v1 = p1.doGetMaximumDataBlockSize();
	return v1;
}
-----
depth : 2
public long doGetMaximumDataBlockSize(){
	long v1 = p0.getBlockDeviceSize();
	return phiInstruction;
}
-----
depth : 1
public FileChannel -$$Nest$mgetBlockOutputChannel(PersistentDataBlockService p1){
	FileChannel v1 = p1.getBlockOutputChannel();
	return v1;
}
-----
depth : 2
public FileChannel getBlockOutputChannel(){
	RandomAccessFile v0 = new RandomAccessFile(this.mDataBlockFile,"rw");
	FileChannel v2 = v0.getChannel();
	return v2;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public int write(byte[] p1){
	int v1 = Binder.getCallingUid();
	PersistentDataBlockService.-$$Nest$menforceUid(this.this$0, v1);
	long v3 = PersistentDataBlockService.-$$Nest$mdoGetMaximumDataBlockSize(this.this$0);
	FileChannel v4 = PersistentDataBlockService.-$$Nest$mgetBlockOutputChannel(this.this$0);
	ByteBuffer v5 = ByteBuffer.allocate(((p1.length + 8) + 32));
	[B v5 = new [B(32);
	ByteBuffer v6 = v5.put(v5);
	ByteBuffer v7 = v5.putInt(428873843);
	ByteBuffer v8 = v5.putInt(p1.length);
	ByteBuffer v9 = v5.put(p1);
	Buffer v10 = v5.flip();
	Object v11 = PersistentDataBlockService.-$$Nest$fgetmLock(this.this$0);
	boolean v12 = PersistentDataBlockService.-$$Nest$fgetmIsWritable(this.this$0);
	int v13 = v4.write(v5);
	v4.force(1);
	String v15 = PersistentDataBlockService.-$$Nest$sfgetTAG();
	int v16 = Slog.e(v15, "failed writing to the persistent data block", caughtException);
	return -1;
}
-----
depth : 1
public void -$$Nest$menforceUid(PersistentDataBlockService p1, int p2){
	p1.enforceUid(p2);
	return;
}
-----
depth : 2
public void enforceUid(int p1){
	return;
}
-----
depth : 1
public long -$$Nest$mdoGetMaximumDataBlockSize(PersistentDataBlockService p1){
	long v1 = p1.doGetMaximumDataBlockSize();
	return v1;
}
-----
depth : 2
public long doGetMaximumDataBlockSize(){
	long v1 = p0.getBlockDeviceSize();
	return phiInstruction;
}
-----
depth : 1
public FileChannel -$$Nest$mgetBlockOutputChannel(PersistentDataBlockService p1){
	FileChannel v1 = p1.getBlockOutputChannel();
	return v1;
}
-----
depth : 2
public FileChannel getBlockOutputChannel(){
	RandomAccessFile v0 = new RandomAccessFile(this.mDataBlockFile,"rw");
	FileChannel v2 = v0.getChannel();
	return v2;
}
-----
