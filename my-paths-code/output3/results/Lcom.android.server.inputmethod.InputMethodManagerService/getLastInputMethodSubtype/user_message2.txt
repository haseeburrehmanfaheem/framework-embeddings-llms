The method getLastInputMethodSubtype has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public InputMethodSubtype getLastInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();
	boolean v3 = TextUtils.isEmpty(Pair.first);
	boolean v4 = TextUtils.isEmpty(Pair.second);
	Object v5 = this.mMethodMap.get(Pair.first);
	int v6 = Integer.parseInt(Pair.second);
	int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);
	int v8 = v5.getSubtypeCount();
	return 0;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public Pair getLastInputMethodAndSubtypeLocked(){
	Pair v1 = p0.getLastSubtypeForInputMethodLockedInternal(0);
	return v1;
}
-----
depth : 2
public Pair getLastSubtypeForInputMethodLockedInternal(String p1){
	List v1 = p0.getEnabledInputMethodsAndSubtypeListLocked();
	List v2 = p0.loadInputMethodAndSubtypeHistoryLocked();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Object v5 = v3.next();
	boolean v6 = TextUtils.isEmpty(p1);
	boolean v7 = Pair.first.equals(p1);
	String v8 = p0.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v1, Pair.first, Pair.second);
	boolean v9 = TextUtils.isEmpty(v8);
	Pair v9 = new Pair(Pair.first,v8);
	return v9;
}
-----
depth : 1
public int getSubtypeIdFromHashCode(InputMethodInfo p1, int p2){
	int v1 = p1.getSubtypeCount();
	InputMethodSubtype v2 = p1.getSubtypeAt(phiInstruction);
	int v3 = v2.hashCode();
	return phiInstruction;
}
-----
depth : 2
public int hashCode(){
	return this.mSubtypeHashCode;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public InputMethodSubtype getLastInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();
	boolean v3 = TextUtils.isEmpty(Pair.first);
	boolean v4 = TextUtils.isEmpty(Pair.second);
	Object v5 = this.mMethodMap.get(Pair.first);
	int v6 = Integer.parseInt(Pair.second);
	int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);
	return 0;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public Pair getLastInputMethodAndSubtypeLocked(){
	Pair v1 = p0.getLastSubtypeForInputMethodLockedInternal(0);
	return v1;
}
-----
depth : 2
public Pair getLastSubtypeForInputMethodLockedInternal(String p1){
	List v1 = p0.getEnabledInputMethodsAndSubtypeListLocked();
	List v2 = p0.loadInputMethodAndSubtypeHistoryLocked();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Object v5 = v3.next();
	boolean v6 = TextUtils.isEmpty(p1);
	boolean v7 = Pair.first.equals(p1);
	String v8 = p0.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v1, Pair.first, Pair.second);
	boolean v9 = TextUtils.isEmpty(v8);
	Pair v9 = new Pair(Pair.first,v8);
	return v9;
}
-----
depth : 1
public int getSubtypeIdFromHashCode(InputMethodInfo p1, int p2){
	int v1 = p1.getSubtypeCount();
	InputMethodSubtype v2 = p1.getSubtypeAt(phiInstruction);
	int v3 = v2.hashCode();
	return phiInstruction;
}
-----
depth : 2
public int hashCode(){
	return this.mSubtypeHashCode;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public InputMethodSubtype getLastInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();
	boolean v3 = TextUtils.isEmpty(Pair.first);
	boolean v4 = TextUtils.isEmpty(Pair.second);
	Object v5 = this.mMethodMap.get(Pair.first);
	int v6 = Integer.parseInt(Pair.second);
	int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);
	int v8 = v5.getSubtypeCount();
	return 0;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public Pair getLastInputMethodAndSubtypeLocked(){
	Pair v1 = p0.getLastSubtypeForInputMethodLockedInternal(0);
	return v1;
}
-----
depth : 2
public Pair getLastSubtypeForInputMethodLockedInternal(String p1){
	List v1 = p0.getEnabledInputMethodsAndSubtypeListLocked();
	List v2 = p0.loadInputMethodAndSubtypeHistoryLocked();
	Iterator v3 = v2.iterator();
	boolean v4 = v3.hasNext();
	Object v5 = v3.next();
	boolean v6 = TextUtils.isEmpty(p1);
	String v7 = p0.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v1, Pair.first, Pair.second);
	boolean v8 = TextUtils.isEmpty(v7);
	Pair v8 = new Pair(Pair.first,v7);
	return v8;
}
-----
depth : 1
public int getSubtypeIdFromHashCode(InputMethodInfo p1, int p2){
	int v1 = p1.getSubtypeCount();
	InputMethodSubtype v2 = p1.getSubtypeAt(phiInstruction);
	int v3 = v2.hashCode();
	return phiInstruction;
}
-----
depth : 2
public int hashCode(){
	return this.mSubtypeHashCode;
}
-----

and the following sink code:
['Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();\nObject v5 = this.mMethodMap.get(Pair.first);\nint v6 = Integer.parseInt(Pair.second);\nint v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);', 'Pair v1 = p0.getLastSubtypeForInputMethodLockedInternal(0);\nList v1 = p0.getEnabledInputMethodsAndSubtypeListLocked();\nString v8 = p0.getEnabledSubtypeHashCodeForInputMethodAndSubtypeLocked(v1, Pair.first, Pair.second);\nPair v9 = new Pair(Pair.first,v8);']

The method getLastInputMethodSubtype has the following similar APIs:

- API Name: getCurrentInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype; with Similarity Score: 0.8180199861526489
  - Access Control Level: SYS_OR_SIG and the following code:
Object v3 = this.mMethodMap.get(v1);
int v4 = v3.getSubtypeCount();
int v5 = this.mCurrentSubtype.hashCode();
boolean v6 = InputMethodUtils.isValidSubtypeId(v3, v5);

