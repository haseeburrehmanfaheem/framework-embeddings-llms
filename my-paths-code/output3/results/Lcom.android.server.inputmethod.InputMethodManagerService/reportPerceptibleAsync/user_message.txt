This is path 1 for the API with depth 2:
depth : 0
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	boolean v3 = p0.calledFromValidUserLocked();
	long v4 = Binder.clearCallingIdentity();
	this.mCurPerceptible = p2;
	p0.updateSystemUiLocked(this.mImeWindowVis, this.mBackDisposition);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public void updateSystemUiLocked(int p1, int p2){
	IBinder v1 = p0.getCurTokenLocked();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.shouldShowImeSwitcherLocked(phiInstruction);
	IBinder v4 = p0.getCurTokenLocked();
	this.mStatusBar.setImeWindowStatus(this.mCurTokenDisplayId, v4, phiInstruction, p2, v3);
	String v6 = p0.getSelectedMethodIdLocked();
	Object v7 = this.mMethodMap.get(v6);
	CharSequence v8 = this.mRes.getText(17041471);
	CharSequence v9 = InputMethodUtils.getImeAndSubtypeDisplayName(this.mContext, v7, this.mCurrentSubtype);
	Notification$Builder v10 = this.mImeSwitcherNotification.setContentTitle(v8);
	Notification$Builder v11 = v10.setContentText(v9);
	Notification$Builder v12 = v11.setContentIntent(this.mImeSwitchPendingIntent);
	boolean v13 = this.mIWindowManager.hasNavigationBar(0);
	Notification v14 = this.mImeSwitcherNotification.build();
	this.mNotificationManager.notifyAsUser(0, 8, v14, UserHandle.ALL);
	this.mNotificationShown = 1;
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 2
public IBinder getCurTokenLocked(){
	IBinder v1 = this.mBindingController.getCurToken();
	return v1;
}
-----
depth : 2
public boolean shouldShowImeSwitcherLocked(int p1){
	AlertDialog v1 = this.mMenuController.getSwitchingDialogLocked();
	boolean v2 = this.mWindowManagerInternal.isKeyguardShowingAndNotOccluded();
	boolean v3 = this.mKeyguardManager.isKeyguardSecure();
	boolean v4 = this.mWindowManagerInternal.isHardKeyboardAvailable();
	return 0;
}
-----
depth : 2
public IBinder getCurTokenLocked(){
	IBinder v1 = this.mBindingController.getCurToken();
	return v1;
}
-----
depth : 2
public void setImeWindowStatus(int p1, IBinder p2, int p3, int p4, boolean p5){
	p0.enforceStatusBar();
	StatusBarManagerService$UiState v2 = p0.getUiState(p1);
	StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v2, p3, p4, p5, p2);
	StatusBarManagerService$$ExternalSyntheticLambda1 v3 = new StatusBarManagerService$$ExternalSyntheticLambda1(p0,p1,p2,p3,p4,p5);
	boolean v5 = this.mHandler.post(v3);
	return;
}
-----
depth : 2
public String getSelectedMethodIdLocked(){
	String v1 = this.mBindingController.getSelectedMethodId();
	return v1;
}
-----
depth : 2
public CharSequence getImeAndSubtypeDisplayName(Context p1, InputMethodInfo p2, InputMethodSubtype p3){
	PackageManager v1 = p1.getPackageManager();
	CharSequence v2 = p2.loadLabel(v1);
	CharSequence v2 = new CharSequence(2);
	String v3 = p2.getPackageName();
	ServiceInfo v4 = p2.getServiceInfo();
	CharSequence v5 = p3.getDisplayName(p1, v3, ServiceInfo.applicationInfo);
	boolean v6 = TextUtils.isEmpty(v2);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(" - ");
	StringBuilder v9 = v6.append(v2);
	String v10 = v6.toString();
	CharSequence v11 = TextUtils.concat(v2);
	return phiInstruction;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	boolean v3 = p0.calledFromValidUserLocked();
	long v4 = Binder.clearCallingIdentity();
	this.mCurPerceptible = p2;
	p0.updateSystemUiLocked(this.mImeWindowVis, this.mBackDisposition);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public void updateSystemUiLocked(int p1, int p2){
	IBinder v1 = p0.getCurTokenLocked();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.shouldShowImeSwitcherLocked(phiInstruction);
	IBinder v4 = p0.getCurTokenLocked();
	this.mStatusBar.setImeWindowStatus(this.mCurTokenDisplayId, v4, phiInstruction, p2, v3);
	String v6 = p0.getSelectedMethodIdLocked();
	Object v7 = this.mMethodMap.get(v6);
	CharSequence v8 = this.mRes.getText(17041471);
	CharSequence v9 = InputMethodUtils.getImeAndSubtypeDisplayName(this.mContext, v7, this.mCurrentSubtype);
	Notification$Builder v10 = this.mImeSwitcherNotification.setContentTitle(v8);
	Notification$Builder v11 = v10.setContentText(v9);
	Notification$Builder v12 = v11.setContentIntent(this.mImeSwitchPendingIntent);
	boolean v13 = this.mIWindowManager.hasNavigationBar(0);
	Notification v14 = this.mImeSwitcherNotification.build();
	this.mNotificationManager.notifyAsUser(0, 8, v14, UserHandle.ALL);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 2
public IBinder getCurTokenLocked(){
	IBinder v1 = this.mBindingController.getCurToken();
	return v1;
}
-----
depth : 2
public boolean shouldShowImeSwitcherLocked(int p1){
	AlertDialog v1 = this.mMenuController.getSwitchingDialogLocked();
	boolean v2 = this.mWindowManagerInternal.isKeyguardShowingAndNotOccluded();
	boolean v3 = this.mKeyguardManager.isKeyguardSecure();
	boolean v4 = this.mWindowManagerInternal.isHardKeyboardAvailable();
	return 0;
}
-----
depth : 2
public IBinder getCurTokenLocked(){
	IBinder v1 = this.mBindingController.getCurToken();
	return v1;
}
-----
depth : 2
public void setImeWindowStatus(int p1, IBinder p2, int p3, int p4, boolean p5){
	p0.enforceStatusBar();
	StatusBarManagerService$UiState v2 = p0.getUiState(p1);
	StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v2, p3, p4, p5, p2);
	StatusBarManagerService$$ExternalSyntheticLambda1 v3 = new StatusBarManagerService$$ExternalSyntheticLambda1(p0,p1,p2,p3,p4,p5);
	boolean v5 = this.mHandler.post(v3);
	return;
}
-----
depth : 2
public String getSelectedMethodIdLocked(){
	String v1 = this.mBindingController.getSelectedMethodId();
	return v1;
}
-----
depth : 2
public CharSequence getImeAndSubtypeDisplayName(Context p1, InputMethodInfo p2, InputMethodSubtype p3){
	PackageManager v1 = p1.getPackageManager();
	CharSequence v2 = p2.loadLabel(v1);
	CharSequence v2 = new CharSequence(2);
	String v3 = p2.getPackageName();
	ServiceInfo v4 = p2.getServiceInfo();
	CharSequence v5 = p3.getDisplayName(p1, v3, ServiceInfo.applicationInfo);
	boolean v6 = TextUtils.isEmpty(v2);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(" - ");
	StringBuilder v9 = v6.append(v2);
	String v10 = v6.toString();
	CharSequence v11 = TextUtils.concat(v2);
	return phiInstruction;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void reportPerceptibleAsync(IBinder p1, boolean p2){
	Object v1 = Objects.requireNonNull(p1, "windowToken must not be null");
	int v2 = Binder.getCallingUid();
	boolean v3 = p0.calledFromValidUserLocked();
	long v4 = Binder.clearCallingIdentity();
	this.mCurPerceptible = p2;
	p0.updateSystemUiLocked(this.mImeWindowVis, this.mBackDisposition);
	Binder.restoreCallingIdentity(v4);
	return;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	return 1;
}
-----
depth : 1
public void updateSystemUiLocked(int p1, int p2){
	IBinder v1 = p0.getCurTokenLocked();
	long v2 = Binder.clearCallingIdentity();
	boolean v3 = p0.shouldShowImeSwitcherLocked(phiInstruction);
	IBinder v4 = p0.getCurTokenLocked();
	this.mStatusBar.setImeWindowStatus(this.mCurTokenDisplayId, v4, phiInstruction, p2, v3);
	String v6 = p0.getSelectedMethodIdLocked();
	Object v7 = this.mMethodMap.get(v6);
	CharSequence v8 = this.mRes.getText(17041471);
	CharSequence v9 = InputMethodUtils.getImeAndSubtypeDisplayName(this.mContext, v7, this.mCurrentSubtype);
	Notification$Builder v10 = this.mImeSwitcherNotification.setContentTitle(v8);
	Notification$Builder v11 = v10.setContentText(v9);
	Notification$Builder v12 = v11.setContentIntent(this.mImeSwitchPendingIntent);
	boolean v13 = this.mIWindowManager.hasNavigationBar(0);
	Notification v14 = this.mImeSwitcherNotification.build();
	this.mNotificationManager.notifyAsUser(0, 8, v14, UserHandle.ALL);
	this.mNotificationShown = 1;
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 2
public IBinder getCurTokenLocked(){
	IBinder v1 = this.mBindingController.getCurToken();
	return v1;
}
-----
depth : 2
public boolean shouldShowImeSwitcherLocked(int p1){
	AlertDialog v1 = this.mMenuController.getSwitchingDialogLocked();
	boolean v2 = this.mWindowManagerInternal.isKeyguardShowingAndNotOccluded();
	boolean v3 = this.mKeyguardManager.isKeyguardSecure();
	boolean v4 = this.mWindowManagerInternal.isHardKeyboardAvailable();
	return 0;
}
-----
depth : 2
public IBinder getCurTokenLocked(){
	IBinder v1 = this.mBindingController.getCurToken();
	return v1;
}
-----
depth : 2
public void setImeWindowStatus(int p1, IBinder p2, int p3, int p4, boolean p5){
	p0.enforceStatusBar();
	StatusBarManagerService$UiState v2 = p0.getUiState(p1);
	StatusBarManagerService$UiState.-$$Nest$msetImeWindowState(v2, p3, p4, p5, p2);
	StatusBarManagerService$$ExternalSyntheticLambda1 v3 = new StatusBarManagerService$$ExternalSyntheticLambda1(p0,p1,p2,p3,p4,p5);
	boolean v5 = this.mHandler.post(v3);
	return;
}
-----
depth : 2
public String getSelectedMethodIdLocked(){
	String v1 = this.mBindingController.getSelectedMethodId();
	return v1;
}
-----
depth : 2
public CharSequence getImeAndSubtypeDisplayName(Context p1, InputMethodInfo p2, InputMethodSubtype p3){
	PackageManager v1 = p1.getPackageManager();
	CharSequence v2 = p2.loadLabel(v1);
	CharSequence v2 = new CharSequence(2);
	String v3 = p2.getPackageName();
	ServiceInfo v4 = p2.getServiceInfo();
	CharSequence v5 = p3.getDisplayName(p1, v3, ServiceInfo.applicationInfo);
	boolean v6 = TextUtils.isEmpty(v2);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(" - ");
	StringBuilder v9 = v6.append(v2);
	String v10 = v6.toString();
	CharSequence v11 = TextUtils.concat(v2);
	return phiInstruction;
}
-----
