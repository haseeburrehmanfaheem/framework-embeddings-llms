This is path 1 for the API with depth 2:
depth : 0
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	ImeTracing v3 = ImeTracing.getInstance();
	v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
	boolean v5 = p0.calledFromValidUserLocked();
	long v6 = Binder.clearCallingIdentity();
	boolean v7 = p0.canInteractWithImeLocked(v2, p1, "showSoftInput");
	boolean v8 = p0.showCurrentInputLocked(p2, p3, p4, p5);
	Binder.restoreCallingIdentity(v6);
	Trace.traceEnd(32);
	return v8;
}
-----
depth : 1
public ImeTracing getInstance(){
	boolean v1 = ImeTracing.isSystemProcess();
	ImeTracingServerImpl v1 = new ImeTracingServerImpl();
	this.sInstance = phiInstruction;
	return this.sInstance;
}
-----
depth : 2
public boolean isSystemProcess(){
	boolean v1 = ActivityThread.isSystem();
	return v1;
}
-----
depth : 1
public boolean canInteractWithImeLocked(int p1, IInputMethodClient p2, String p3){
	IBinder v1 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v2 = p2.asBinder();
	IBinder v3 = p2.asBinder();
	Object v4 = this.mClients.get(v3);
	boolean v5 = p0.isImeClientFocused(this.mCurFocusedWindow, v4);
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(p1);
	String v7 = String.format("Ignoring %s of uid %d : %s", v5);
	int v8 = Slog.w("InputMethodManagerService", v7);
	return 0;
}
-----
depth : 2
public boolean isImeClientFocused(IBinder p1, InputMethodManagerService$ClientState p2){
	int v1 = this.mWindowManagerInternal.hasInputMethodClientFocus(p1, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	return phiInstruction;
}
-----
depth : 1
public boolean showCurrentInputLocked(IBinder p1, int p2, ResultReceiver p3, int p4){
	this.mShowRequested = 1;
	this.mShowExplicitlyRequested = 1;
	this.mShowForced = 1;
	this.mBindingController.setCurrentMethodVisible();
	IInputMethodInvoker v2 = p0.getCurMethodLocked();
	Binder v2 = new Binder();
	Object v4 = this.mShowRequestWindowMap.put(v2, p1);
	int v5 = p0.getImeShowFlagsLocked();
	boolean v6 = v2.showSoftInput(v2, v5, p3);
	p0.onShowHideSoftInputRequested(1, p1, p4);
	this.mInputShown = 1;
	return 1;
}
-----
depth : 2
public void setCurrentMethodVisible(){
	long v1 = SystemClock.uptimeMillis();
	Object v1 = new Object(3);
	String v2 = p0.getSelectedMethodId();
	Long v3 = Long.valueOf((v1 - this.mLastBindTime));
	Integer v4 = Integer.valueOf(1);
	int v5 = EventLog.writeEvent(32000, v1);
	int v6 = Slog.w(this.TAG, "Force disconnect/connect to the IME in setCurrentMethodVisible()");
	p0.unbindMainConnection();
	boolean v8 = p0.bindCurrentInputMethodServiceMainConnection();
	return;
}
-----
depth : 2
public IInputMethodInvoker getCurMethodLocked(){
	IInputMethodInvoker v1 = this.mBindingController.getCurMethod();
	return v1;
}
-----
depth : 2
public boolean showSoftInput(IBinder p1, int p2, ResultReceiver p3){
	this.mTarget.showSoftInput(p1, p2, p3);
	IInputMethodInvoker.logRemoteException(caughtException);
	return 0;
}
-----
depth : 2
public void onShowHideSoftInputRequested(boolean p1, IBinder p2, int p3){
	WindowManagerInternal$ImeTargetInfo v1 = this.mWindowManagerInternal.onToggleImeRequested(p1, this.mCurFocusedWindow, p2, this.mCurTokenDisplayId);
	InputMethodManagerService$SoftInputShowHideHistory$Entry v1 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p3,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
	this.mSoftInputShowHideHistory.addEntry(v1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	ImeTracing v3 = ImeTracing.getInstance();
	v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
	boolean v5 = p0.calledFromValidUserLocked();
	long v6 = Binder.clearCallingIdentity();
	boolean v7 = p0.canInteractWithImeLocked(v2, p1, "showSoftInput");
	boolean v8 = p0.showCurrentInputLocked(p2, p3, p4, p5);
	Binder.restoreCallingIdentity(v6);
	Trace.traceEnd(32);
	return v8;
}
-----
depth : 1
public ImeTracing getInstance(){
	boolean v1 = ImeTracing.isSystemProcess();
	ImeTracingClientImpl v1 = new ImeTracingClientImpl();
	this.sInstance = phiInstruction;
	return this.sInstance;
}
-----
depth : 2
public boolean isSystemProcess(){
	boolean v1 = ActivityThread.isSystem();
	return v1;
}
-----
depth : 1
public boolean canInteractWithImeLocked(int p1, IInputMethodClient p2, String p3){
	IBinder v1 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v2 = p2.asBinder();
	IBinder v3 = p2.asBinder();
	Object v4 = this.mClients.get(v3);
	boolean v5 = p0.isImeClientFocused(this.mCurFocusedWindow, v4);
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(p1);
	String v7 = String.format("Ignoring %s of uid %d : %s", v5);
	int v8 = Slog.w("InputMethodManagerService", v7);
	return 0;
}
-----
depth : 2
public boolean isImeClientFocused(IBinder p1, InputMethodManagerService$ClientState p2){
	int v1 = this.mWindowManagerInternal.hasInputMethodClientFocus(p1, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	return phiInstruction;
}
-----
depth : 1
public boolean showCurrentInputLocked(IBinder p1, int p2, ResultReceiver p3, int p4){
	this.mShowRequested = 1;
	this.mShowExplicitlyRequested = 1;
	this.mShowForced = 1;
	this.mBindingController.setCurrentMethodVisible();
	IInputMethodInvoker v2 = p0.getCurMethodLocked();
	Binder v2 = new Binder();
	Object v4 = this.mShowRequestWindowMap.put(v2, p1);
	int v5 = p0.getImeShowFlagsLocked();
	boolean v6 = v2.showSoftInput(v2, v5, p3);
	p0.onShowHideSoftInputRequested(1, p1, p4);
	this.mInputShown = 1;
	return 1;
}
-----
depth : 2
public void setCurrentMethodVisible(){
	long v1 = SystemClock.uptimeMillis();
	Object v1 = new Object(3);
	String v2 = p0.getSelectedMethodId();
	Long v3 = Long.valueOf((v1 - this.mLastBindTime));
	Integer v4 = Integer.valueOf(1);
	int v5 = EventLog.writeEvent(32000, v1);
	int v6 = Slog.w(this.TAG, "Force disconnect/connect to the IME in setCurrentMethodVisible()");
	p0.unbindMainConnection();
	boolean v8 = p0.bindCurrentInputMethodServiceMainConnection();
	return;
}
-----
depth : 2
public IInputMethodInvoker getCurMethodLocked(){
	IInputMethodInvoker v1 = this.mBindingController.getCurMethod();
	return v1;
}
-----
depth : 2
public boolean showSoftInput(IBinder p1, int p2, ResultReceiver p3){
	this.mTarget.showSoftInput(p1, p2, p3);
	IInputMethodInvoker.logRemoteException(caughtException);
	return 0;
}
-----
depth : 2
public void onShowHideSoftInputRequested(boolean p1, IBinder p2, int p3){
	WindowManagerInternal$ImeTargetInfo v1 = this.mWindowManagerInternal.onToggleImeRequested(p1, this.mCurFocusedWindow, p2, this.mCurTokenDisplayId);
	InputMethodManagerService$SoftInputShowHideHistory$Entry v1 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p3,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
	this.mSoftInputShowHideHistory.addEntry(v1);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean showSoftInput(IInputMethodClient p1, IBinder p2, int p3, ResultReceiver p4, int p5){
	Trace.traceBegin(32, "IMMS.showSoftInput");
	int v2 = Binder.getCallingUid();
	ImeTracing v3 = ImeTracing.getInstance();
	v3.triggerManagerServiceDump("InputMethodManagerService#showSoftInput");
	boolean v5 = p0.calledFromValidUserLocked();
	long v6 = Binder.clearCallingIdentity();
	boolean v7 = p0.canInteractWithImeLocked(v2, p1, "showSoftInput");
	boolean v8 = p0.showCurrentInputLocked(p2, p3, p4, p5);
	Binder.restoreCallingIdentity(v6);
	Trace.traceEnd(32);
	return v8;
}
-----
depth : 1
public ImeTracing getInstance(){
	boolean v1 = ImeTracing.isSystemProcess();
	ImeTracingServerImpl v1 = new ImeTracingServerImpl();
	this.sInstance = phiInstruction;
	return this.sInstance;
}
-----
depth : 2
public boolean isSystemProcess(){
	boolean v1 = ActivityThread.isSystem();
	return v1;
}
-----
depth : 1
public boolean canInteractWithImeLocked(int p1, IInputMethodClient p2, String p3){
	IBinder v1 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v2 = p2.asBinder();
	IBinder v3 = p2.asBinder();
	Object v4 = this.mClients.get(v3);
	boolean v5 = p0.isImeClientFocused(this.mCurFocusedWindow, v4);
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(p1);
	String v7 = String.format("Ignoring %s of uid %d : %s", v5);
	int v8 = Slog.w("InputMethodManagerService", v7);
	return 0;
}
-----
depth : 2
public boolean isImeClientFocused(IBinder p1, InputMethodManagerService$ClientState p2){
	int v1 = this.mWindowManagerInternal.hasInputMethodClientFocus(p1, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	return phiInstruction;
}
-----
depth : 1
public boolean showCurrentInputLocked(IBinder p1, int p2, ResultReceiver p3, int p4){
	this.mShowRequested = 1;
	this.mShowExplicitlyRequested = 1;
	this.mShowForced = 1;
	this.mBindingController.setCurrentMethodVisible();
	IInputMethodInvoker v2 = p0.getCurMethodLocked();
	Binder v2 = new Binder();
	Object v4 = this.mShowRequestWindowMap.put(v2, p1);
	int v5 = p0.getImeShowFlagsLocked();
	boolean v6 = v2.showSoftInput(v2, v5, p3);
	p0.onShowHideSoftInputRequested(1, p1, p4);
	this.mInputShown = 1;
	return 1;
}
-----
depth : 2
public void setCurrentMethodVisible(){
	long v1 = SystemClock.uptimeMillis();
	Object v1 = new Object(3);
	String v2 = p0.getSelectedMethodId();
	Long v3 = Long.valueOf((v1 - this.mLastBindTime));
	Integer v4 = Integer.valueOf(1);
	int v5 = EventLog.writeEvent(32000, v1);
	int v6 = Slog.w(this.TAG, "Force disconnect/connect to the IME in setCurrentMethodVisible()");
	p0.unbindMainConnection();
	boolean v8 = p0.bindCurrentInputMethodServiceMainConnection();
	return;
}
-----
depth : 2
public IInputMethodInvoker getCurMethodLocked(){
	IInputMethodInvoker v1 = this.mBindingController.getCurMethod();
	return v1;
}
-----
depth : 2
public boolean showSoftInput(IBinder p1, int p2, ResultReceiver p3){
	this.mTarget.showSoftInput(p1, p2, p3);
	IInputMethodInvoker.logRemoteException(caughtException);
	return 0;
}
-----
depth : 2
public void onShowHideSoftInputRequested(boolean p1, IBinder p2, int p3){
	WindowManagerInternal$ImeTargetInfo v1 = this.mWindowManagerInternal.onToggleImeRequested(p1, this.mCurFocusedWindow, p2, this.mCurTokenDisplayId);
	InputMethodManagerService$SoftInputShowHideHistory$Entry v1 = new InputMethodManagerService$SoftInputShowHideHistory$Entry(this.mCurFocusedWindowClient,this.mCurAttribute,WindowManagerInternal$ImeTargetInfo.focusedWindowName,this.mCurFocusedWindowSoftInputMode,p3,this.mInFullscreenMode,WindowManagerInternal$ImeTargetInfo.requestWindowName,WindowManagerInternal$ImeTargetInfo.imeControlTargetName,WindowManagerInternal$ImeTargetInfo.imeLayerTargetName);
	this.mSoftInputShowHideHistory.addEntry(v1);
	return;
}
-----
