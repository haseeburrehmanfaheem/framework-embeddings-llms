This is path 1 for the API with depth 2:
depth : 0
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	ImeTracing v2 = ImeTracing.getInstance();
	v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
	int v4 = Binder.getCallingUid();
	boolean v5 = p0.calledFromValidUserLocked();
	long v6 = Binder.clearCallingIdentity();
	boolean v7 = p0.canInteractWithImeLocked(v4, p1, "startStylusHandwriting");
	boolean v8 = this.mBindingController.supportsStylusHandwriting();
	OptionalInt v9 = this.mHwController.getCurrentRequestId();
	boolean v10 = v9.isPresent();
	boolean v11 = this.mHwController.isStylusGestureOngoing();
	IInputMethodInvoker v12 = p0.getCurMethodLocked();
	int v13 = v9.getAsInt();
	v12.canStartStylusHandwriting(v13);
	Binder.restoreCallingIdentity(v6);
	Trace.traceEnd(32);
	return;
}
-----
depth : 1
public ImeTracing getInstance(){
	boolean v1 = ImeTracing.isSystemProcess();
	ImeTracingServerImpl v1 = new ImeTracingServerImpl();
	this.sInstance = phiInstruction;
	return this.sInstance;
}
-----
depth : 2
public boolean isSystemProcess(){
	boolean v1 = ActivityThread.isSystem();
	return v1;
}
-----
depth : 1
public boolean canInteractWithImeLocked(int p1, IInputMethodClient p2, String p3){
	IBinder v1 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v2 = p2.asBinder();
	IBinder v3 = p2.asBinder();
	Object v4 = this.mClients.get(v3);
	boolean v5 = p0.isImeClientFocused(this.mCurFocusedWindow, v4);
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(p1);
	String v7 = String.format("Ignoring %s of uid %d : %s", v5);
	int v8 = Slog.w("InputMethodManagerService", v7);
	return 0;
}
-----
depth : 2
public boolean isImeClientFocused(IBinder p1, InputMethodManagerService$ClientState p2){
	int v1 = this.mWindowManagerInternal.hasInputMethodClientFocus(p1, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	return phiInstruction;
}
-----
depth : 1
public IInputMethodInvoker getCurMethodLocked(){
	IInputMethodInvoker v1 = this.mBindingController.getCurMethod();
	return v1;
}
-----
depth : 2
public IInputMethodInvoker getCurMethod(){
	return this.mCurMethod;
}
-----
depth : 1
public void canStartStylusHandwriting(int p1){
	this.mTarget.canStartStylusHandwriting(p1);
	IInputMethodInvoker.logRemoteException(caughtException);
	return;
}
-----
depth : 2
public void logRemoteException(RemoteException p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("IPC failed at IInputMethodInvoker#");
	String v3 = IInputMethodInvoker.getCallerMethodName();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Slog.w("InputMethodManagerService", v5, p1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	ImeTracing v2 = ImeTracing.getInstance();
	v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
	int v4 = Binder.getCallingUid();
	boolean v5 = p0.calledFromValidUserLocked();
	long v6 = Binder.clearCallingIdentity();
	boolean v7 = p0.canInteractWithImeLocked(v4, p1, "startStylusHandwriting");
	boolean v8 = this.mBindingController.supportsStylusHandwriting();
	OptionalInt v9 = this.mHwController.getCurrentRequestId();
	boolean v10 = v9.isPresent();
	boolean v11 = this.mHwController.isStylusGestureOngoing();
	IInputMethodInvoker v12 = p0.getCurMethodLocked();
	int v13 = v9.getAsInt();
	v12.canStartStylusHandwriting(v13);
	Binder.restoreCallingIdentity(v6);
	Trace.traceEnd(32);
	return;
}
-----
depth : 1
public ImeTracing getInstance(){
	boolean v1 = ImeTracing.isSystemProcess();
	ImeTracingClientImpl v1 = new ImeTracingClientImpl();
	this.sInstance = phiInstruction;
	return this.sInstance;
}
-----
depth : 2
public boolean isSystemProcess(){
	boolean v1 = ActivityThread.isSystem();
	return v1;
}
-----
depth : 1
public boolean canInteractWithImeLocked(int p1, IInputMethodClient p2, String p3){
	IBinder v1 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v2 = p2.asBinder();
	IBinder v3 = p2.asBinder();
	Object v4 = this.mClients.get(v3);
	boolean v5 = p0.isImeClientFocused(this.mCurFocusedWindow, v4);
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(p1);
	String v7 = String.format("Ignoring %s of uid %d : %s", v5);
	int v8 = Slog.w("InputMethodManagerService", v7);
	return 0;
}
-----
depth : 2
public boolean isImeClientFocused(IBinder p1, InputMethodManagerService$ClientState p2){
	int v1 = this.mWindowManagerInternal.hasInputMethodClientFocus(p1, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	return phiInstruction;
}
-----
depth : 1
public IInputMethodInvoker getCurMethodLocked(){
	IInputMethodInvoker v1 = this.mBindingController.getCurMethod();
	return v1;
}
-----
depth : 2
public IInputMethodInvoker getCurMethod(){
	return this.mCurMethod;
}
-----
depth : 1
public void canStartStylusHandwriting(int p1){
	this.mTarget.canStartStylusHandwriting(p1);
	IInputMethodInvoker.logRemoteException(caughtException);
	return;
}
-----
depth : 2
public void logRemoteException(RemoteException p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("IPC failed at IInputMethodInvoker#");
	String v3 = IInputMethodInvoker.getCallerMethodName();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Slog.w("InputMethodManagerService", v5, p1);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void startStylusHandwriting(IInputMethodClient p1){
	Trace.traceBegin(32, "IMMS.startStylusHandwriting");
	ImeTracing v2 = ImeTracing.getInstance();
	v2.triggerManagerServiceDump("InputMethodManagerService#startStylusHandwriting");
	int v4 = Binder.getCallingUid();
	boolean v5 = p0.calledFromValidUserLocked();
	long v6 = Binder.clearCallingIdentity();
	boolean v7 = p0.canInteractWithImeLocked(v4, p1, "startStylusHandwriting");
	boolean v8 = this.mBindingController.supportsStylusHandwriting();
	OptionalInt v9 = this.mHwController.getCurrentRequestId();
	boolean v10 = v9.isPresent();
	boolean v11 = this.mHwController.isStylusGestureOngoing();
	IInputMethodInvoker v12 = p0.getCurMethodLocked();
	int v13 = v9.getAsInt();
	v12.canStartStylusHandwriting(v13);
	Binder.restoreCallingIdentity(v6);
	Trace.traceEnd(32);
	return;
}
-----
depth : 1
public ImeTracing getInstance(){
	boolean v1 = ImeTracing.isSystemProcess();
	ImeTracingServerImpl v1 = new ImeTracingServerImpl();
	this.sInstance = phiInstruction;
	return this.sInstance;
}
-----
depth : 2
public boolean isSystemProcess(){
	boolean v1 = ActivityThread.isSystem();
	return v1;
}
-----
depth : 1
public boolean canInteractWithImeLocked(int p1, IInputMethodClient p2, String p3){
	IBinder v1 = InputMethodManagerService$ClientState.client.asBinder();
	IBinder v2 = p2.asBinder();
	IBinder v3 = p2.asBinder();
	Object v4 = this.mClients.get(v3);
	boolean v5 = p0.isImeClientFocused(this.mCurFocusedWindow, v4);
	Object v5 = new Object(3);
	Integer v6 = Integer.valueOf(p1);
	String v7 = String.format("Ignoring %s of uid %d : %s", v5);
	int v8 = Slog.w("InputMethodManagerService", v7);
	return 0;
}
-----
depth : 2
public boolean isImeClientFocused(IBinder p1, InputMethodManagerService$ClientState p2){
	int v1 = this.mWindowManagerInternal.hasInputMethodClientFocus(p1, InputMethodManagerService$ClientState.uid, InputMethodManagerService$ClientState.pid, InputMethodManagerService$ClientState.selfReportedDisplayId);
	return phiInstruction;
}
-----
depth : 1
public IInputMethodInvoker getCurMethodLocked(){
	IInputMethodInvoker v1 = this.mBindingController.getCurMethod();
	return v1;
}
-----
depth : 2
public IInputMethodInvoker getCurMethod(){
	return this.mCurMethod;
}
-----
depth : 1
public void canStartStylusHandwriting(int p1){
	this.mTarget.canStartStylusHandwriting(p1);
	IInputMethodInvoker.logRemoteException(caughtException);
	return;
}
-----
depth : 2
public void logRemoteException(RemoteException p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("IPC failed at IInputMethodInvoker#");
	String v3 = IInputMethodInvoker.getCallerMethodName();
	StringBuilder v4 = v0.append(v3);
	String v5 = v0.toString();
	int v6 = Slog.w("InputMethodManagerService", v5, p1);
	return;
}
-----
