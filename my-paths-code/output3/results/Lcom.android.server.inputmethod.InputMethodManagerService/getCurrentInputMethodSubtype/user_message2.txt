The method getCurrentInputMethodSubtype has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public InputMethodSubtype getCurrentInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	InputMethodSubtype v2 = p0.getCurrentInputMethodSubtypeLocked();
	return v2;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public InputMethodSubtype getCurrentInputMethodSubtypeLocked(){
	String v1 = p0.getSelectedMethodIdLocked();
	boolean v2 = this.mSettings.isSubtypeSelected();
	Object v3 = this.mMethodMap.get(v1);
	int v4 = v3.getSubtypeCount();
	int v5 = this.mCurrentSubtype.hashCode();
	boolean v6 = InputMethodUtils.isValidSubtypeId(v3, v5);
	int v7 = this.mSettings.getSelectedInputMethodSubtypeId(v1);
	List v8 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, v3, 1);
	int v9 = v8.size();
	int v10 = v8.size();
	InputMethodSubtype v11 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v8, "keyboard", 0, 1);
	this.mCurrentSubtype = v11;
	InputMethodSubtype v12 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v8, 0, 0, 1);
	this.mCurrentSubtype = v12;
	return this.mCurrentSubtype;
}
-----
depth : 2
public String getSelectedMethodIdLocked(){
	String v1 = this.mBindingController.getSelectedMethodId();
	return v1;
}
-----
depth : 2
public boolean isSubtypeSelected(){
	int v1 = p0.getSelectedInputMethodSubtypeHashCode();
	return phiInstruction;
}
-----
depth : 2
public int hashCode(){
	return this.mSubtypeHashCode;
}
-----
depth : 2
public boolean isValidSubtypeId(InputMethodInfo p1, int p2){
	int v1 = InputMethodUtils.getSubtypeIdFromHashCode(p1, p2);
	return phiInstruction;
}
-----
depth : 2
public int getSelectedInputMethodSubtypeId(String p1){
	Object v1 = this.mMethodMap.get(p1);
	int v2 = p0.getSelectedInputMethodSubtypeHashCode();
	int v3 = InputMethodUtils.getSubtypeIdFromHashCode(v1, v2);
	return v3;
}
-----
depth : 2
public List getEnabledInputMethodSubtypeListLocked(Context p1, InputMethodInfo p2, boolean p3){
	List v1 = p0.getEnabledInputMethodSubtypeListLocked(p2);
	boolean v2 = v1.isEmpty();
	Resources v3 = p1.getResources();
	ArrayList v4 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v3, p2);
	List v5 = InputMethodSubtype.sort(p1, 0, p2, phiInstruction);
	return v5;
}
-----
depth : 2
public InputMethodSubtype findLastResortApplicableSubtypeLocked(Resources p1, List p2, String p3, String p4, boolean p5){
	int v1 = p2.size();
	boolean v2 = TextUtils.isEmpty(p4);
	Configuration v3 = p1.getConfiguration();
	String v4 = Configuration.locale.toString();
	String v5 = InputMethodUtils.getLanguageFromLocaleString(phiInstruction);
	int v6 = p2.size();
	Object v7 = p2.get(phiInstruction);
	String v8 = v7.getLocale();
	String v9 = InputMethodUtils.getLanguageFromLocaleString(v8);
	Object v10 = p2.get(phiInstruction);
	String v11 = v10.getMode();
	boolean v12 = v11.equalsIgnoreCase(p3);
	boolean v13 = phiInstruction.equals(v8);
	return phiInstruction;
}
-----
depth : 2
public InputMethodSubtype findLastResortApplicableSubtypeLocked(Resources p1, List p2, String p3, String p4, boolean p5){
	int v1 = p2.size();
	boolean v2 = TextUtils.isEmpty(p4);
	Configuration v3 = p1.getConfiguration();
	String v4 = Configuration.locale.toString();
	String v5 = InputMethodUtils.getLanguageFromLocaleString(phiInstruction);
	int v6 = p2.size();
	Object v7 = p2.get(phiInstruction);
	String v8 = v7.getLocale();
	String v9 = InputMethodUtils.getLanguageFromLocaleString(v8);
	Object v10 = p2.get(phiInstruction);
	String v11 = v10.getMode();
	boolean v12 = v11.equalsIgnoreCase(p3);
	boolean v13 = phiInstruction.equals(v8);
	return phiInstruction;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public InputMethodSubtype getCurrentInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	InputMethodSubtype v2 = p0.getCurrentInputMethodSubtypeLocked();
	return v2;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	StringBuilder v4 = new StringBuilder();
	StringBuilder v6 = v4.append("--- IPC called from background users. Ignore. callers=");
	String v7 = Debug.getCallers(10);
	StringBuilder v8 = v4.append(v7);
	String v9 = v4.toString();
	int v10 = Slog.w("InputMethodManagerService", v9);
	return 0;
}
-----
depth : 1
public InputMethodSubtype getCurrentInputMethodSubtypeLocked(){
	String v1 = p0.getSelectedMethodIdLocked();
	boolean v2 = this.mSettings.isSubtypeSelected();
	Object v3 = this.mMethodMap.get(v1);
	int v4 = v3.getSubtypeCount();
	int v5 = this.mCurrentSubtype.hashCode();
	boolean v6 = InputMethodUtils.isValidSubtypeId(v3, v5);
	int v7 = this.mSettings.getSelectedInputMethodSubtypeId(v1);
	List v8 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, v3, 1);
	int v9 = v8.size();
	int v10 = v8.size();
	InputMethodSubtype v11 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v8, "keyboard", 0, 1);
	this.mCurrentSubtype = v11;
	InputMethodSubtype v12 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v8, 0, 0, 1);
	this.mCurrentSubtype = v12;
	return this.mCurrentSubtype;
}
-----
depth : 2
public String getSelectedMethodIdLocked(){
	String v1 = this.mBindingController.getSelectedMethodId();
	return v1;
}
-----
depth : 2
public boolean isSubtypeSelected(){
	int v1 = p0.getSelectedInputMethodSubtypeHashCode();
	return phiInstruction;
}
-----
depth : 2
public int hashCode(){
	return this.mSubtypeHashCode;
}
-----
depth : 2
public boolean isValidSubtypeId(InputMethodInfo p1, int p2){
	int v1 = InputMethodUtils.getSubtypeIdFromHashCode(p1, p2);
	return phiInstruction;
}
-----
depth : 2
public int getSelectedInputMethodSubtypeId(String p1){
	Object v1 = this.mMethodMap.get(p1);
	int v2 = p0.getSelectedInputMethodSubtypeHashCode();
	int v3 = InputMethodUtils.getSubtypeIdFromHashCode(v1, v2);
	return v3;
}
-----
depth : 2
public List getEnabledInputMethodSubtypeListLocked(Context p1, InputMethodInfo p2, boolean p3){
	List v1 = p0.getEnabledInputMethodSubtypeListLocked(p2);
	boolean v2 = v1.isEmpty();
	Resources v3 = p1.getResources();
	ArrayList v4 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v3, p2);
	List v5 = InputMethodSubtype.sort(p1, 0, p2, phiInstruction);
	return v5;
}
-----
depth : 2
public InputMethodSubtype findLastResortApplicableSubtypeLocked(Resources p1, List p2, String p3, String p4, boolean p5){
	int v1 = p2.size();
	boolean v2 = TextUtils.isEmpty(p4);
	Configuration v3 = p1.getConfiguration();
	String v4 = Configuration.locale.toString();
	String v5 = InputMethodUtils.getLanguageFromLocaleString(phiInstruction);
	int v6 = p2.size();
	Object v7 = p2.get(phiInstruction);
	String v8 = v7.getLocale();
	String v9 = InputMethodUtils.getLanguageFromLocaleString(v8);
	Object v10 = p2.get(phiInstruction);
	String v11 = v10.getMode();
	boolean v12 = v11.equalsIgnoreCase(p3);
	boolean v13 = phiInstruction.equals(v8);
	return phiInstruction;
}
-----
depth : 2
public InputMethodSubtype findLastResortApplicableSubtypeLocked(Resources p1, List p2, String p3, String p4, boolean p5){
	int v1 = p2.size();
	boolean v2 = TextUtils.isEmpty(p4);
	Configuration v3 = p1.getConfiguration();
	String v4 = Configuration.locale.toString();
	String v5 = InputMethodUtils.getLanguageFromLocaleString(phiInstruction);
	int v6 = p2.size();
	Object v7 = p2.get(phiInstruction);
	String v8 = v7.getLocale();
	String v9 = InputMethodUtils.getLanguageFromLocaleString(v8);
	Object v10 = p2.get(phiInstruction);
	String v11 = v10.getMode();
	boolean v12 = v11.equalsIgnoreCase(p3);
	boolean v13 = phiInstruction.equals(v8);
	return phiInstruction;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public InputMethodSubtype getCurrentInputMethodSubtype(){
	boolean v1 = p0.calledFromValidUserLocked();
	InputMethodSubtype v2 = p0.getCurrentInputMethodSubtypeLocked();
	return v2;
}
-----
depth : 1
public boolean calledFromValidUserLocked(){
	return 1;
}
-----
depth : 1
public InputMethodSubtype getCurrentInputMethodSubtypeLocked(){
	String v1 = p0.getSelectedMethodIdLocked();
	boolean v2 = this.mSettings.isSubtypeSelected();
	Object v3 = this.mMethodMap.get(v1);
	int v4 = v3.getSubtypeCount();
	int v5 = this.mCurrentSubtype.hashCode();
	boolean v6 = InputMethodUtils.isValidSubtypeId(v3, v5);
	int v7 = this.mSettings.getSelectedInputMethodSubtypeId(v1);
	List v8 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, v3, 1);
	int v9 = v8.size();
	int v10 = v8.size();
	InputMethodSubtype v11 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v8, "keyboard", 0, 1);
	this.mCurrentSubtype = v11;
	InputMethodSubtype v12 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v8, 0, 0, 1);
	this.mCurrentSubtype = v12;
	return this.mCurrentSubtype;
}
-----
depth : 2
public String getSelectedMethodIdLocked(){
	String v1 = this.mBindingController.getSelectedMethodId();
	return v1;
}
-----
depth : 2
public boolean isSubtypeSelected(){
	int v1 = p0.getSelectedInputMethodSubtypeHashCode();
	return phiInstruction;
}
-----
depth : 2
public int hashCode(){
	return this.mSubtypeHashCode;
}
-----
depth : 2
public boolean isValidSubtypeId(InputMethodInfo p1, int p2){
	int v1 = InputMethodUtils.getSubtypeIdFromHashCode(p1, p2);
	return phiInstruction;
}
-----
depth : 2
public int getSelectedInputMethodSubtypeId(String p1){
	Object v1 = this.mMethodMap.get(p1);
	int v2 = p0.getSelectedInputMethodSubtypeHashCode();
	int v3 = InputMethodUtils.getSubtypeIdFromHashCode(v1, v2);
	return v3;
}
-----
depth : 2
public List getEnabledInputMethodSubtypeListLocked(Context p1, InputMethodInfo p2, boolean p3){
	List v1 = p0.getEnabledInputMethodSubtypeListLocked(p2);
	boolean v2 = v1.isEmpty();
	Resources v3 = p1.getResources();
	ArrayList v4 = InputMethodUtils.getImplicitlyApplicableSubtypesLocked(v3, p2);
	List v5 = InputMethodSubtype.sort(p1, 0, p2, phiInstruction);
	return v5;
}
-----
depth : 2
public InputMethodSubtype findLastResortApplicableSubtypeLocked(Resources p1, List p2, String p3, String p4, boolean p5){
	int v1 = p2.size();
	boolean v2 = TextUtils.isEmpty(p4);
	Configuration v3 = p1.getConfiguration();
	String v4 = Configuration.locale.toString();
	String v5 = InputMethodUtils.getLanguageFromLocaleString(phiInstruction);
	int v6 = p2.size();
	Object v7 = p2.get(phiInstruction);
	String v8 = v7.getLocale();
	String v9 = InputMethodUtils.getLanguageFromLocaleString(v8);
	Object v10 = p2.get(phiInstruction);
	String v11 = v10.getMode();
	boolean v12 = v11.equalsIgnoreCase(p3);
	boolean v13 = phiInstruction.equals(v8);
	return phiInstruction;
}
-----
depth : 2
public InputMethodSubtype findLastResortApplicableSubtypeLocked(Resources p1, List p2, String p3, String p4, boolean p5){
	int v1 = p2.size();
	boolean v2 = TextUtils.isEmpty(p4);
	Configuration v3 = p1.getConfiguration();
	String v4 = Configuration.locale.toString();
	String v5 = InputMethodUtils.getLanguageFromLocaleString(phiInstruction);
	int v6 = p2.size();
	Object v7 = p2.get(phiInstruction);
	String v8 = v7.getLocale();
	String v9 = InputMethodUtils.getLanguageFromLocaleString(v8);
	Object v10 = p2.get(phiInstruction);
	String v11 = v10.getMode();
	boolean v12 = v11.equalsIgnoreCase(p3);
	boolean v13 = phiInstruction.equals(v8);
	return phiInstruction;
}
-----

and the following sink code:
['InputMethodSubtype v2 = p0.getCurrentInputMethodSubtypeLocked();\nString v1 = p0.getSelectedMethodIdLocked();\nboolean v2 = this.mSettings.isSubtypeSelected();\nObject v3 = this.mMethodMap.get(v1);\nint v7 = this.mSettings.getSelectedInputMethodSubtypeId(v1);\nList v8 = this.mSettings.getEnabledInputMethodSubtypeListLocked(this.mContext, v3, 1);\nInputMethodSubtype v11 = InputMethodUtils.findLastResortApplicableSubtypeLocked(this.mRes, v8, "keyboard", 0, 1);\nthis.mCurrentSubtype = v11;\nreturn this.mCurrentSubtype;', 'Object v3 = this.mMethodMap.get(v1);\nint v4 = v3.getSubtypeCount();\nint v5 = this.mCurrentSubtype.hashCode();\nboolean v6 = InputMethodUtils.isValidSubtypeId(v3, v5);']

The method getCurrentInputMethodSubtype has the following similar APIs:

- API Name: getLastInputMethodSubtype()Landroid/view/inputmethod/InputMethodSubtype; with Similarity Score: 0.8180199861526489
  - Access Control Level: SYS_OR_SIG and the following code:
Pair v2 = this.mSettings.getLastInputMethodAndSubtypeLocked();
Object v5 = this.mMethodMap.get(Pair.first);
int v6 = Integer.parseInt(Pair.second);
int v7 = InputMethodUtils.getSubtypeIdFromHashCode(v5, v6);

