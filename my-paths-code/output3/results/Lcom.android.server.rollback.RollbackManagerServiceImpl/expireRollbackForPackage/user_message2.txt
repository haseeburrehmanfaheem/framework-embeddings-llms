The method expireRollbackForPackage has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void expireRollbackForPackage(String p1){
	RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1);
	p0.awaitResult(v2);
	return;
}
-----
depth : 1
public void awaitResult(Runnable p1){
	p0.assertNotInWorkerThread();
	CompletableFuture v2 = CompletableFuture.runAsync(p1, this.mExecutor);
	Object v3 = v2.get();
	return;
}
-----
depth : 2
public void assertNotInWorkerThread(){
	Handler v1 = p0.getHandler();
	Looper v2 = v1.getLooper();
	boolean v3 = v2.isCurrentThread();
	Preconditions.checkState((v3 ^ 1));
	return;
}
-----

and the following sink code:
['RollbackManagerServiceImpl$$ExternalSyntheticLambda7 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda7(p0,p1);\np0.awaitResult(v2);', 'CompletableFuture v2 = CompletableFuture.runAsync(p1, this.mExecutor);']

The method expireRollbackForPackage has the following similar APIs:

- API Name: reloadPersistedData()V with Similarity Score: 0.9765657186508179
  - Access Control Level: SYS_OR_SIG and the following code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda0 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda0(p0);
p0.awaitResult(v2);

- API Name: notifyStagedSession(I)I with Similarity Score: 0.9622024297714233
  - Access Control Level: SYS_OR_SIG and the following code:
RollbackManagerServiceImpl$$ExternalSyntheticLambda9 v2 = new RollbackManagerServiceImpl$$ExternalSyntheticLambda9(p0,p1);
Object v4 = p0.awaitResult(v2);
int v5 = v4.intValue();
return v5;

