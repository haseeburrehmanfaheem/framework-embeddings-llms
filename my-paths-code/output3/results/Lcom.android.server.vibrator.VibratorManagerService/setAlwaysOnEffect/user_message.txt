This is path 1 for the API with depth 2:
depth : 0
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	boolean v3 = VibratorManagerService.isEffectValid(p4);
	VibrationAttributes v4 = p0.fixupVibrationAttributes(p5, p4);
	SparseArray v5 = p0.fixupAlwaysOnEffectsLocked(p4);
	VibratorManagerService$AlwaysOnVibration v5 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v5);
	this.mAlwaysOnEffects.put(p3, v5);
	p0.updateAlwaysOnLocked(v5);
	Trace.traceEnd(8388608);
	return 1;
}
-----
depth : 1
public VibrationAttributes fixupVibrationAttributes(VibrationAttributes p1, CombinedVibration p2){
	int v1 = phiInstruction.getUsage();
	boolean v2 = p2.isHapticFeedbackCandidate();
	int v3 = phiInstruction.getFlags();
	boolean v4 = p0.hasPermission("android.permission.WRITE_SECURE_SETTINGS");
	boolean v5 = p0.hasPermission("android.permission.MODIFY_PHONE_STATE");
	boolean v6 = p0.hasPermission("android.permission.MODIFY_AUDIO_ROUTING");
	int v7 = phiInstruction.getUsage();
	int v8 = phiInstruction.getFlags();
	VibrationAttributes$Builder v8 = new VibrationAttributes$Builder(phiInstruction);
	VibrationAttributes$Builder v10 = v8.setUsage(phiInstruction);
	int v11 = phiInstruction.getFlags();
	VibrationAttributes$Builder v12 = v10.setFlags(phiInstruction, v11);
	VibrationAttributes v13 = v12.build();
	return v13;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public VibrationAttributes$Builder setUsage(int p1){
	this.mOriginalAudioUsage = 0;
	this.mUsage = p1;
	return p0;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public VibrationAttributes$Builder setFlags(int p1, int p2){
	this.mFlags = ((this.mFlags & (~(p2 & 3))) | (p1 & (p2 & 3)));
	return p0;
}
-----
depth : 2
public VibrationAttributes build(){
	VibrationAttributes v0 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	return v0;
}
-----
depth : 1
public SparseArray fixupAlwaysOnEffectsLocked(CombinedVibration p1){
	Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
	VibrationEffect v2 = p1.getEffect();
	VibratorManagerService$$ExternalSyntheticLambda2 v2 = new VibratorManagerService$$ExternalSyntheticLambda2(v2);
	SparseArray v4 = p0.transformAllVibratorsLocked(v2);
	SparseArray v4 = new SparseArray();
	int v6 = phiInstruction.size();
	Object v7 = phiInstruction.valueAt(phiInstruction);
	PrebakedSegment v8 = VibratorManagerService.extractPrebakedSegment(v7);
	int v9 = Slog.e("VibratorManagerService", "Only prebaked effects supported for always-on.");
	Trace.traceEnd(8388608);
	return 0;
}
-----
depth : 2
public VibrationEffect getEffect(){
	return this.mEffect;
}
-----
depth : 2
public SparseArray transformAllVibratorsLocked(Function p1){
	SparseArray v0 = new SparseArray(v1);
	int v1 = this.mVibrators.size();
	int v3 = this.mVibrators.size();
	return v0;
}
-----
depth : 2
public PrebakedSegment extractPrebakedSegment(VibrationEffect p1){
	List v1 = p1.getSegments();
	int v2 = v1.size();
	List v3 = p1.getSegments();
	Object v4 = v3.get(0);
	return v4;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	boolean v3 = VibratorManagerService.isEffectValid(p4);
	VibrationAttributes v4 = p0.fixupVibrationAttributes(p5, p4);
	SparseArray v5 = p0.fixupAlwaysOnEffectsLocked(p4);
	VibratorManagerService$AlwaysOnVibration v5 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v5);
	this.mAlwaysOnEffects.put(p3, v5);
	p0.updateAlwaysOnLocked(v5);
	Trace.traceEnd(8388608);
	return 1;
}
-----
depth : 1
public VibrationAttributes fixupVibrationAttributes(VibrationAttributes p1, CombinedVibration p2){
	int v1 = phiInstruction.getUsage();
	boolean v2 = p2.isHapticFeedbackCandidate();
	int v3 = phiInstruction.getFlags();
	boolean v4 = p0.hasPermission("android.permission.WRITE_SECURE_SETTINGS");
	boolean v5 = p0.hasPermission("android.permission.MODIFY_PHONE_STATE");
	boolean v6 = p0.hasPermission("android.permission.MODIFY_AUDIO_ROUTING");
	int v7 = phiInstruction.getUsage();
	int v8 = phiInstruction.getFlags();
	VibrationAttributes$Builder v8 = new VibrationAttributes$Builder(phiInstruction);
	VibrationAttributes$Builder v10 = v8.setUsage(phiInstruction);
	int v11 = phiInstruction.getFlags();
	VibrationAttributes$Builder v12 = v10.setFlags(phiInstruction, v11);
	VibrationAttributes v13 = v12.build();
	return v13;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public VibrationAttributes$Builder setUsage(int p1){
	this.mOriginalAudioUsage = 0;
	this.mUsage = p1;
	return p0;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public VibrationAttributes$Builder setFlags(int p1, int p2){
	this.mFlags = ((this.mFlags & (~(p2 & 3))) | (p1 & (p2 & 3)));
	return p0;
}
-----
depth : 2
public VibrationAttributes build(){
	VibrationAttributes v0 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	return v0;
}
-----
depth : 1
public SparseArray fixupAlwaysOnEffectsLocked(CombinedVibration p1){
	Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
	VibrationEffect v2 = p1.getEffect();
	VibratorManagerService$$ExternalSyntheticLambda2 v2 = new VibratorManagerService$$ExternalSyntheticLambda2(v2);
	SparseArray v4 = p0.transformAllVibratorsLocked(v2);
	SparseArray v4 = new SparseArray();
	int v6 = phiInstruction.size();
	Object v7 = phiInstruction.valueAt(phiInstruction);
	PrebakedSegment v8 = VibratorManagerService.extractPrebakedSegment(v7);
	int v9 = Slog.e("VibratorManagerService", "Only prebaked effects supported for always-on.");
	Trace.traceEnd(8388608);
	return 0;
}
-----
depth : 2
public VibrationEffect getEffect(){
	return this.mEffect;
}
-----
depth : 2
public SparseArray transformAllVibratorsLocked(Function p1){
	SparseArray v0 = new SparseArray(v1);
	int v1 = this.mVibrators.size();
	int v3 = this.mVibrators.size();
	return v0;
}
-----
depth : 2
public PrebakedSegment extractPrebakedSegment(VibrationEffect p1){
	List v1 = p1.getSegments();
	int v2 = v1.size();
	List v3 = p1.getSegments();
	Object v4 = v3.get(0);
	return v4;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean setAlwaysOnEffect(int p1, String p2, int p3, CombinedVibration p4, VibrationAttributes p5){
	boolean v3 = VibratorManagerService.isEffectValid(p4);
	VibrationAttributes v4 = p0.fixupVibrationAttributes(p5, p4);
	SparseArray v5 = p0.fixupAlwaysOnEffectsLocked(p4);
	VibratorManagerService$AlwaysOnVibration v5 = new VibratorManagerService$AlwaysOnVibration(p3,p1,p2,v4,v5);
	this.mAlwaysOnEffects.put(p3, v5);
	p0.updateAlwaysOnLocked(v5);
	Trace.traceEnd(8388608);
	return 1;
}
-----
depth : 1
public VibrationAttributes fixupVibrationAttributes(VibrationAttributes p1, CombinedVibration p2){
	int v1 = phiInstruction.getUsage();
	boolean v2 = p2.isHapticFeedbackCandidate();
	int v3 = phiInstruction.getFlags();
	boolean v4 = p0.hasPermission("android.permission.WRITE_SECURE_SETTINGS");
	boolean v5 = p0.hasPermission("android.permission.MODIFY_PHONE_STATE");
	boolean v6 = p0.hasPermission("android.permission.MODIFY_AUDIO_ROUTING");
	int v7 = phiInstruction.getUsage();
	int v8 = phiInstruction.getFlags();
	VibrationAttributes$Builder v8 = new VibrationAttributes$Builder(phiInstruction);
	VibrationAttributes$Builder v10 = v8.setUsage(phiInstruction);
	int v11 = phiInstruction.getFlags();
	VibrationAttributes$Builder v12 = v10.setFlags(phiInstruction, v11);
	VibrationAttributes v13 = v12.build();
	return v13;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermission(String p1){
	return phiInstruction;
}
-----
depth : 2
public int getUsage(){
	return this.mUsage;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public VibrationAttributes$Builder setUsage(int p1){
	this.mOriginalAudioUsage = 0;
	this.mUsage = p1;
	return p0;
}
-----
depth : 2
public int getFlags(){
	return this.mFlags;
}
-----
depth : 2
public VibrationAttributes$Builder setFlags(int p1, int p2){
	this.mFlags = ((this.mFlags & (~(p2 & 3))) | (p1 & (p2 & 3)));
	return p0;
}
-----
depth : 2
public VibrationAttributes build(){
	VibrationAttributes v0 = new VibrationAttributes(this.mUsage,this.mOriginalAudioUsage,this.mFlags,0);
	return v0;
}
-----
depth : 1
public SparseArray fixupAlwaysOnEffectsLocked(CombinedVibration p1){
	Trace.traceBegin(8388608, "fixupAlwaysOnEffectsLocked");
	VibrationEffect v2 = p1.getEffect();
	VibratorManagerService$$ExternalSyntheticLambda2 v2 = new VibratorManagerService$$ExternalSyntheticLambda2(v2);
	SparseArray v4 = p0.transformAllVibratorsLocked(v2);
	SparseArray v4 = new SparseArray();
	int v6 = phiInstruction.size();
	Object v7 = phiInstruction.valueAt(phiInstruction);
	PrebakedSegment v8 = VibratorManagerService.extractPrebakedSegment(v7);
	int v9 = Slog.e("VibratorManagerService", "Only prebaked effects supported for always-on.");
	Trace.traceEnd(8388608);
	return 0;
}
-----
depth : 2
public VibrationEffect getEffect(){
	return this.mEffect;
}
-----
depth : 2
public SparseArray transformAllVibratorsLocked(Function p1){
	SparseArray v0 = new SparseArray(v1);
	int v1 = this.mVibrators.size();
	int v3 = this.mVibrators.size();
	return v0;
}
-----
depth : 2
public PrebakedSegment extractPrebakedSegment(VibrationEffect p1){
	List v1 = p1.getSegments();
	int v2 = v1.size();
	List v3 = p1.getSegments();
	Object v4 = v3.get(0);
	return 0;
}
-----
