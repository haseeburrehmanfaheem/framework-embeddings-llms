This is path 1 for the API with depth 2:
depth : 0
public ITuner openTuner(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Opening module ");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.v("BcRadioSrv", v4);
	p0.enforcePolicyAccess();
	Object v7 = BroadcastRadioService.-$$Nest$fgetmLock(this.this$0);
	BroadcastRadioService v8 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	boolean v9 = v8.hasModule(p1);
	BroadcastRadioService v10 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	ITuner v11 = v10.openSession(p1, p2, p3, p4);
	return v11;
}
-----
depth : 1
public void enforcePolicyAccess(){
	return;
}
-----
depth : 1
public Object -$$Nest$fgetmLock(BroadcastRadioService p1){
	return this.mLock;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public boolean hasModule(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.mModules.containsKey(v1);
	return v2;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public ITuner openSession(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	int v1 = Slog.v("BcRadio2Srv", "Open HIDL 2.0 session");
	Object v2 = Objects.requireNonNull(p4);
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mModules.get(v3);
	TunerSession v5 = v4.openSession(p4);
	v5.setConfiguration(p2);
	return v5;
}
-----
depth : 2
public TunerSession openSession(ITunerCallback p1){
	Object v0 = new Object(0);
	this.mEventLogger.logRadioEvent("Open TunerSession", v0);
	Mutable v1 = new Mutable();
	RadioModule$$ExternalSyntheticLambda5 v2 = new RadioModule$$ExternalSyntheticLambda5(p0,v1);
	this.mService.openSession(this.mHalTunerCallback, v2);
	Object v5 = Objects.requireNonNull(Mutable.value);
	this.mHalTunerSession = Mutable.value;
	TunerSession v5 = new TunerSession(p0,this.mHalTunerSession,p1,this.mLock);
	boolean v7 = this.mAidlTunerSessions.add(v5);
	boolean v8 = this.mAntennaConnected.booleanValue();
	p1.onAntennaState(v8);
	p1.onCurrentProgramInfoChanged(this.mCurrentProgramInfo);
	return v5;
}
-----
depth : 2
public void setConfiguration(RadioManager$BandConfig p1){
	p0.checkNotClosedLocked();
	Object v2 = Objects.requireNonNull(p1);
	this.mDummyConfig = p1;
	int v3 = Slog.i("BcRadio2Srv.session", "Ignoring setConfiguration - not applicable for broadcastradio HAL 2.0");
	TunerSession$$ExternalSyntheticLambda5 v3 = new TunerSession$$ExternalSyntheticLambda5(p1);
	this.mModule.fanoutAidlCallback(v3);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public ITuner openTuner(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Opening module ");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.v("BcRadioSrv", v4);
	p0.enforcePolicyAccess();
	Object v7 = BroadcastRadioService.-$$Nest$fgetmLock(this.this$0);
	BroadcastRadioService v8 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	boolean v9 = v8.hasModule(p1);
	BroadcastRadioService v10 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	ITuner v11 = v10.openSession(p1, p2, p3, p4);
	return v11;
}
-----
depth : 1
public void enforcePolicyAccess(){
	return;
}
-----
depth : 1
public Object -$$Nest$fgetmLock(BroadcastRadioService p1){
	return this.mLock;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public boolean hasModule(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.mModules.containsKey(v1);
	return v2;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public ITuner openSession(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	int v1 = Slog.v("BcRadio2Srv", "Open HIDL 2.0 session");
	Object v2 = Objects.requireNonNull(p4);
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mModules.get(v3);
	TunerSession v5 = v4.openSession(p4);
	v5.setConfiguration(p2);
	return v5;
}
-----
depth : 2
public TunerSession openSession(ITunerCallback p1){
	Object v0 = new Object(0);
	this.mEventLogger.logRadioEvent("Open TunerSession", v0);
	Mutable v1 = new Mutable();
	RadioModule$$ExternalSyntheticLambda5 v2 = new RadioModule$$ExternalSyntheticLambda5(p0,v1);
	this.mService.openSession(this.mHalTunerCallback, v2);
	Object v5 = Objects.requireNonNull(Mutable.value);
	this.mHalTunerSession = Mutable.value;
	TunerSession v5 = new TunerSession(p0,this.mHalTunerSession,p1,this.mLock);
	boolean v7 = this.mAidlTunerSessions.add(v5);
	p1.onCurrentProgramInfoChanged(this.mCurrentProgramInfo);
	return v5;
}
-----
depth : 2
public void setConfiguration(RadioManager$BandConfig p1){
	p0.checkNotClosedLocked();
	Object v2 = Objects.requireNonNull(p1);
	this.mDummyConfig = p1;
	int v3 = Slog.i("BcRadio2Srv.session", "Ignoring setConfiguration - not applicable for broadcastradio HAL 2.0");
	TunerSession$$ExternalSyntheticLambda5 v3 = new TunerSession$$ExternalSyntheticLambda5(p1);
	this.mModule.fanoutAidlCallback(v3);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public ITuner openTuner(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("Opening module ");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.v("BcRadioSrv", v4);
	p0.enforcePolicyAccess();
	Object v7 = BroadcastRadioService.-$$Nest$fgetmLock(this.this$0);
	BroadcastRadioService v8 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	boolean v9 = v8.hasModule(p1);
	BroadcastRadioService v10 = BroadcastRadioService.-$$Nest$fgetmHal2(this.this$0);
	ITuner v11 = v10.openSession(p1, p2, p3, p4);
	return v11;
}
-----
depth : 1
public void enforcePolicyAccess(){
	return;
}
-----
depth : 1
public Object -$$Nest$fgetmLock(BroadcastRadioService p1){
	return this.mLock;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public boolean hasModule(int p1){
	Integer v1 = Integer.valueOf(p1);
	boolean v2 = this.mModules.containsKey(v1);
	return v2;
}
-----
depth : 1
public BroadcastRadioService -$$Nest$fgetmHal2(BroadcastRadioService p1){
	return this.mHal2;
}
-----
depth : 1
public ITuner openSession(int p1, RadioManager$BandConfig p2, boolean p3, ITunerCallback p4){
	int v1 = Slog.v("BcRadio2Srv", "Open HIDL 2.0 session");
	Object v2 = Objects.requireNonNull(p4);
	Integer v3 = Integer.valueOf(p1);
	Object v4 = this.mModules.get(v3);
	TunerSession v5 = v4.openSession(p4);
	v5.setConfiguration(p2);
	return v5;
}
-----
depth : 2
public TunerSession openSession(ITunerCallback p1){
	Object v0 = new Object(0);
	this.mEventLogger.logRadioEvent("Open TunerSession", v0);
	TunerSession v1 = new TunerSession(p0,this.mHalTunerSession,p1,this.mLock);
	boolean v3 = this.mAidlTunerSessions.add(v1);
	boolean v4 = this.mAntennaConnected.booleanValue();
	p1.onAntennaState(v4);
	p1.onCurrentProgramInfoChanged(this.mCurrentProgramInfo);
	return v1;
}
-----
depth : 2
public void setConfiguration(RadioManager$BandConfig p1){
	p0.checkNotClosedLocked();
	Object v2 = Objects.requireNonNull(p1);
	this.mDummyConfig = p1;
	int v3 = Slog.i("BcRadio2Srv.session", "Ignoring setConfiguration - not applicable for broadcastradio HAL 2.0");
	TunerSession$$ExternalSyntheticLambda5 v3 = new TunerSession$$ExternalSyntheticLambda5(p1);
	this.mModule.fanoutAidlCallback(v3);
	return;
}
-----
