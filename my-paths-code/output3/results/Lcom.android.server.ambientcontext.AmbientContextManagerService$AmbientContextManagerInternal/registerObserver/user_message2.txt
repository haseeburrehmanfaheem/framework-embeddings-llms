The method registerObserver has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void registerObserver(AmbientContextEventRequest p1, PendingIntent p2, RemoteCallback p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = Objects.requireNonNull(p3);
	AmbientContextManagerService$AmbientContextManagerInternal$1 v3 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);
	String v5 = p2.getCreatorPackage();
	p0.registerObserverWithCallback(p1, v5, v3);
	return;
}
-----
depth : 1
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	AmbientContextManagerService.access$100(this.this$0, p2);
	String v10 = AmbientContextManagerService.-$$Nest$sfgetTAG();
	int v11 = Slog.w(v10, "Service not available.");
	AmbientContextManagerPerUserService.completeRegistration(p3, 3);
	return;
}
-----
depth : 2
public void access$100(AmbientContextManagerService p1, String p2){
	p1.assertCalledByPackageOwner(p2);
	return;
}
-----
depth : 2
public String -$$Nest$sfgetTAG(){
	return this.TAG;
}
-----
depth : 2
public void completeRegistration(IAmbientContextObserver p1, int p2){
	p1.onRegistrationComplete(p2);
	StringBuilder v1 = new StringBuilder();
	StringBuilder v3 = v1.append("Failed to call IAmbientContextObserver.onRegistrationComplete: ");
	String v4 = caughtException.getMessage();
	StringBuilder v5 = v1.append(v4);
	String v6 = v1.toString();
	int v7 = Slog.w(this.TAG, v6);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void registerObserver(AmbientContextEventRequest p1, PendingIntent p2, RemoteCallback p3){
	Object v1 = Objects.requireNonNull(p1);
	Object v2 = Objects.requireNonNull(p2);
	Object v3 = Objects.requireNonNull(p3);
	AmbientContextManagerService$AmbientContextManagerInternal$1 v3 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);
	String v5 = p2.getCreatorPackage();
	p0.registerObserverWithCallback(p1, v5, v3);
	return;
}
-----
depth : 1
public void registerObserverWithCallback(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	AmbientContextManagerService.access$100(this.this$0, p2);
	this.mService.onRegisterObserver(p1, p2, p3);
	return;
}
-----
depth : 2
public void access$100(AmbientContextManagerService p1, String p2){
	p1.assertCalledByPackageOwner(p2);
	return;
}
-----
depth : 2
public void onRegisterObserver(AmbientContextEventRequest p1, String p2, IAmbientContextObserver p3){
	boolean v1 = p0.setUpServiceIfNeeded();
	p0.startDetection(p1, p2, p3);
	AbstractPerUserSystemService.mMaster.newClientAdded(AbstractPerUserSystemService.mUserId, p1, p2, p3);
	return;
}
-----

and the following sink code:
['Object v3 = new AmbientContextManagerService$AmbientContextManagerInternal$1(p0,p2,p3);\np0.registerObserverWithCallback(p1, v5, v3);', 'AmbientContextManagerService.access$100(this.this$0, p2);\nthis.mService.onRegisterObserver(p1, p2, p3);']

The method registerObserver has the following similar APIs:

- API Name: registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V with Similarity Score: 1.0
  - Access Control Level: NORMAL and the following code:
AmbientContextManagerService.access$100(this.this$0, p2);
this.mService.onRegisterObserver(p1, p2, p3);

- API Name: registerObserverWithCallback(Landroid/app/ambientcontext/AmbientContextEventRequest;Ljava/lang/String;Landroid/app/ambientcontext/IAmbientContextObserver;)V with Similarity Score: 0.8476412296295166
  - Access Control Level: NORMAL and the following code:
AmbientContextManagerService.access$100(this.this$0, p2);
this.mService.onRegisterObserver(p1, p2, p3);

