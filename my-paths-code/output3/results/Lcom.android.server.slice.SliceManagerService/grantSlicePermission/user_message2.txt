The method grantSlicePermission has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void grantSlicePermission(String p1, String p2, Uri p3){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	p0.enforceOwner(p1, p3, v3);
	this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void grantSliceAccess(String p1, int p2, String p3, int p4, Uri p5){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
	SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
	SliceClientPermissions v3 = p0.getClient(v0);
	v3.grantUri(p5, v1);
	SliceProviderPermissions v5 = p0.getProvider(v1);
	Uri v6 = ContentProvider.getUriWithoutUserId(p5);
	String v7 = v6.getAuthority();
	SliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7);
	v8.addPkg(v0);
	return;
}
-----
depth : 2
public SliceClientPermissions getClient(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedClients.get(p1);
	String v2 = SliceClientPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v7 = new SliceClientPermissions(p1,p0);
	Object v9 = this.mCachedClients.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public void grantUri(Uri p1, SlicePermissionManager$PkgUser p2){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(v1,v2);
	String v1 = p1.getAuthority();
	int v2 = p2.getUserId();
	SliceClientPermissions$SliceAuthority v4 = p0.getOrCreateAuthority(v0, p2);
	List v5 = p1.getPathSegments();
	v4.addPath(v5);
	return;
}
-----
depth : 2
public SliceProviderPermissions getProvider(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedProviders.get(p1);
	String v2 = SliceProviderPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v7 = new SliceProviderPermissions(p1,p0);
	Object v9 = this.mCachedProviders.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public SliceProviderPermissions$SliceAuthority getOrCreateAuthority(String p1){
	Object v1 = this.mAuths.get(p1);
	SliceProviderPermissions$SliceAuthority v1 = new SliceProviderPermissions$SliceAuthority(p1,p0);
	Object v3 = this.mAuths.put(p1, v1);
	p0.onPersistableDirty(v1);
	return phiInstruction;
}
-----
depth : 2
public void addPkg(SlicePermissionManager$PkgUser p1){
	boolean v1 = this.mPkgs.add(p1);
	this.mTracker.onPersistableDirty(p0);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void grantSlicePermission(String p1, String p2, Uri p3){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	p0.enforceOwner(p1, p3, v3);
	this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void grantSliceAccess(String p1, int p2, String p3, int p4, Uri p5){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
	SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
	SliceClientPermissions v3 = p0.getClient(v0);
	v3.grantUri(p5, v1);
	SliceProviderPermissions v5 = p0.getProvider(v1);
	Uri v6 = ContentProvider.getUriWithoutUserId(p5);
	String v7 = v6.getAuthority();
	SliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7);
	v8.addPkg(v0);
	return;
}
-----
depth : 2
public SliceClientPermissions getClient(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedClients.get(p1);
	String v2 = SliceClientPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v7 = new SliceClientPermissions(p1,p0);
	Object v9 = this.mCachedClients.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public void grantUri(Uri p1, SlicePermissionManager$PkgUser p2){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(v1,v2);
	String v1 = p1.getAuthority();
	int v2 = p2.getUserId();
	SliceClientPermissions$SliceAuthority v4 = p0.getOrCreateAuthority(v0, p2);
	List v5 = p1.getPathSegments();
	v4.addPath(v5);
	return;
}
-----
depth : 2
public SliceProviderPermissions getProvider(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedProviders.get(p1);
	String v2 = SliceProviderPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v7 = new SliceProviderPermissions(p1,p0);
	Object v9 = this.mCachedProviders.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public SliceProviderPermissions$SliceAuthority getOrCreateAuthority(String p1){
	Object v1 = this.mAuths.get(p1);
	SliceProviderPermissions$SliceAuthority v1 = new SliceProviderPermissions$SliceAuthority(p1,p0);
	Object v3 = this.mAuths.put(p1, v1);
	p0.onPersistableDirty(v1);
	return phiInstruction;
}
-----
depth : 2
public void addPkg(SlicePermissionManager$PkgUser p1){
	boolean v1 = this.mPkgs.add(p1);
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void grantSlicePermission(String p1, String p2, Uri p3){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	p0.enforceOwner(p1, p3, v3);
	this.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void grantSliceAccess(String p1, int p2, String p3, int p4, Uri p5){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
	SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
	SliceClientPermissions v3 = p0.getClient(v0);
	v3.grantUri(p5, v1);
	SliceProviderPermissions v5 = p0.getProvider(v1);
	Uri v6 = ContentProvider.getUriWithoutUserId(p5);
	String v7 = v6.getAuthority();
	SliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7);
	v8.addPkg(v0);
	return;
}
-----
depth : 2
public SliceClientPermissions getClient(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedClients.get(p1);
	String v2 = SliceClientPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v7 = new SliceClientPermissions(p1,p0);
	Object v9 = this.mCachedClients.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public void grantUri(Uri p1, SlicePermissionManager$PkgUser p2){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(v1,v2);
	String v1 = p1.getAuthority();
	int v2 = p2.getUserId();
	SliceClientPermissions$SliceAuthority v4 = p0.getOrCreateAuthority(v0, p2);
	List v5 = p1.getPathSegments();
	v4.addPath(v5);
	return;
}
-----
depth : 2
public SliceProviderPermissions getProvider(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedProviders.get(p1);
	String v2 = SliceProviderPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v7 = new SliceProviderPermissions(p1,p0);
	Object v9 = this.mCachedProviders.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public SliceProviderPermissions$SliceAuthority getOrCreateAuthority(String p1){
	Object v1 = this.mAuths.get(p1);
	return phiInstruction;
}
-----
depth : 2
public void addPkg(SlicePermissionManager$PkgUser p1){
	boolean v1 = this.mPkgs.add(p1);
	this.mTracker.onPersistableDirty(p0);
	return;
}
-----

and the following sink code:
['SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);\nSlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);\nthis.mPermissions.grantSliceAccess(p2, v3, p1, v3, p3);', 'SliceClientPermissions v3 = p0.getClient(v0);\nv3.grantUri(p5, v1);']

The method grantSlicePermission has the following similar APIs:

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I with Similarity Score: 0.8822618722915649
  - Access Control Level: NORMAL and the following code:
SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
SliceClientPermissions v3 = p0.getClient(v0);
v3.grantUri(p5, v1);

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I with Similarity Score: 0.8693497180938721
  - Access Control Level: NORMAL and the following code:
SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
SliceClientPermissions v3 = p0.getClient(v0);
v3.grantUri(p5, v1);

