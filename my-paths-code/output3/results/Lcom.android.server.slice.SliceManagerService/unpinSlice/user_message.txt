This is path 1 for the API with depth 2:
depth : 0
public void unpinSlice(String p1, Uri p2, IBinder p3){
	p0.verifyCaller(p1);
	p0.enforceAccess(p1, p2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p2, v4);
	PinnedSliceState v6 = p0.getPinnedSlice(v5);
	boolean v7 = v6.unpin(p1, p3);
	p0.removePinnedSlice(v5);
	String v9 = caughtException.getMessage();
	int v10 = Slog.w("SliceManagerService", v9);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void enforceAccess(String p1, Uri p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.checkAccess(p1, p2, v1, v2);
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	int v6 = ContentProvider.getUserIdFromUri(p2, v5);
	String v7 = p0.getProviderPkg(p2, v6);
	boolean v8 = Objects.equals(p1, v7);
	p0.enforceCrossUser(p1, p2);
	return;
}
-----
depth : 2
public int checkAccess(String p1, Uri p2, int p3, int p4){
	int v1 = p0.checkSlicePermission(p2, 0, p1, p4, p3, 0);
	return v1;
}
-----
depth : 2
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 2
public void enforceCrossUser(String p1, Uri p2){
	return;
}
-----
depth : 1
public boolean unpin(String p1, IBinder p2){
	boolean v1 = p2.unlinkToDeath(this.mDeathRecipient, 0);
	Object v2 = this.mListeners.remove(p2);
	boolean v3 = p0.hasPinOrListener();
	return (v3 ^ 1);
}
-----
depth : 2
public boolean hasPinOrListener(){
	boolean v1 = this.mPinnedPkgs.isEmpty();
	boolean v2 = this.mListeners.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public void removePinnedSlice(Uri p1){
	Object v1 = this.mPinnedSlicesByUri.remove(p1);
	v1.destroy();
	return;
}
-----
depth : 2
public void destroy(){
	p0.setSlicePinned(0);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void unpinSlice(String p1, Uri p2, IBinder p3){
	p0.verifyCaller(p1);
	p0.enforceAccess(p1, p2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p2, v4);
	PinnedSliceState v6 = p0.getPinnedSlice(v5);
	boolean v7 = v6.unpin(p1, p3);
	p0.removePinnedSlice(v5);
	String v9 = caughtException.getMessage();
	int v10 = Slog.w("SliceManagerService", v9);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void enforceAccess(String p1, Uri p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.checkAccess(p1, p2, v1, v2);
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	int v6 = ContentProvider.getUserIdFromUri(p2, v5);
	String v7 = p0.getProviderPkg(p2, v6);
	boolean v8 = Objects.equals(p1, v7);
	p0.enforceCrossUser(p1, p2);
	return;
}
-----
depth : 2
public int checkAccess(String p1, Uri p2, int p3, int p4){
	int v1 = p0.checkSlicePermission(p2, 0, p1, p4, p3, 0);
	return v1;
}
-----
depth : 2
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 2
public void enforceCrossUser(String p1, Uri p2){
	return;
}
-----
depth : 1
public boolean unpin(String p1, IBinder p2){
	boolean v1 = p2.unlinkToDeath(this.mDeathRecipient, 0);
	Object v2 = this.mListeners.remove(p2);
	boolean v3 = p0.hasPinOrListener();
	return (v3 ^ 1);
}
-----
depth : 2
public boolean hasPinOrListener(){
	boolean v1 = this.mPinnedPkgs.isEmpty();
	boolean v2 = this.mListeners.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public void removePinnedSlice(Uri p1){
	Object v1 = this.mPinnedSlicesByUri.remove(p1);
	v1.destroy();
	return;
}
-----
depth : 2
public void destroy(){
	p0.setSlicePinned(0);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void unpinSlice(String p1, Uri p2, IBinder p3){
	p0.verifyCaller(p1);
	p0.enforceAccess(p1, p2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p2, v4);
	PinnedSliceState v6 = p0.getPinnedSlice(v5);
	boolean v7 = v6.unpin(p1, p3);
	p0.removePinnedSlice(v5);
	String v9 = caughtException.getMessage();
	int v10 = Slog.w("SliceManagerService", v9);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void enforceAccess(String p1, Uri p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.checkAccess(p1, p2, v1, v2);
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	int v6 = ContentProvider.getUserIdFromUri(p2, v5);
	String v7 = p0.getProviderPkg(p2, v6);
	boolean v8 = Objects.equals(p1, v7);
	p0.enforceCrossUser(p1, p2);
	return;
}
-----
depth : 2
public int checkAccess(String p1, Uri p2, int p3, int p4){
	int v1 = p0.checkSlicePermission(p2, 0, p1, p4, p3, 0);
	return v1;
}
-----
depth : 2
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 2
public void enforceCrossUser(String p1, Uri p2){
	return;
}
-----
depth : 1
public boolean unpin(String p1, IBinder p2){
	boolean v1 = p2.unlinkToDeath(this.mDeathRecipient, 0);
	Object v2 = this.mListeners.remove(p2);
	boolean v3 = p0.hasPinOrListener();
	return (v3 ^ 1);
}
-----
depth : 2
public boolean hasPinOrListener(){
	boolean v1 = this.mPinnedPkgs.isEmpty();
	boolean v2 = this.mListeners.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public void removePinnedSlice(Uri p1){
	Object v1 = this.mPinnedSlicesByUri.remove(p1);
	v1.destroy();
	return;
}
-----
depth : 2
public void destroy(){
	p0.setSlicePinned(0);
	return;
}
-----
