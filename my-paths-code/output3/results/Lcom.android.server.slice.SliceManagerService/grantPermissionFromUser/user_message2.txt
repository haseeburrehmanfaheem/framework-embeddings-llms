The method grantPermissionFromUser has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	Uri$Builder v6 = p1.buildUpon();
	Uri$Builder v7 = v6.path("");
	Uri v8 = v7.build();
	int v9 = ContentProvider.getUserIdFromUri(v8, v5);
	String v10 = p0.getProviderPkg(v8, v9);
	this.mPermissions.grantSliceAccess(p2, v5, v10, v9, v8);
	long v12 = Binder.clearCallingIdentity();
	ContentResolver v13 = this.mContext.getContentResolver();
	v13.notifyChange(p1, 0);
	Binder.restoreCallingIdentity(v12);
	return;
}
-----
depth : 1
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 1
public void grantSliceAccess(String p1, int p2, String p3, int p4, Uri p5){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
	SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
	SliceClientPermissions v3 = p0.getClient(v0);
	v3.grantUri(p5, v1);
	SliceProviderPermissions v5 = p0.getProvider(v1);
	Uri v6 = ContentProvider.getUriWithoutUserId(p5);
	String v7 = v6.getAuthority();
	SliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7);
	v8.addPkg(v0);
	return;
}
-----
depth : 2
public SliceClientPermissions getClient(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedClients.get(p1);
	String v2 = SliceClientPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v7 = new SliceClientPermissions(p1,p0);
	Object v9 = this.mCachedClients.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public void grantUri(Uri p1, SlicePermissionManager$PkgUser p2){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(v1,v2);
	String v1 = p1.getAuthority();
	int v2 = p2.getUserId();
	SliceClientPermissions$SliceAuthority v4 = p0.getOrCreateAuthority(v0, p2);
	List v5 = p1.getPathSegments();
	v4.addPath(v5);
	return;
}
-----
depth : 2
public SliceProviderPermissions getProvider(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedProviders.get(p1);
	String v2 = SliceProviderPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v7 = new SliceProviderPermissions(p1,p0);
	Object v9 = this.mCachedProviders.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public SliceProviderPermissions$SliceAuthority getOrCreateAuthority(String p1){
	Object v1 = this.mAuths.get(p1);
	SliceProviderPermissions$SliceAuthority v1 = new SliceProviderPermissions$SliceAuthority(p1,p0);
	Object v3 = this.mAuths.put(p1, v1);
	p0.onPersistableDirty(v1);
	return phiInstruction;
}
-----
depth : 2
public void addPkg(SlicePermissionManager$PkgUser p1){
	boolean v1 = this.mPkgs.add(p1);
	this.mTracker.onPersistableDirty(p0);
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	Uri$Builder v6 = p1.buildUpon();
	Uri$Builder v7 = v6.path("");
	Uri v8 = v7.build();
	int v9 = ContentProvider.getUserIdFromUri(v8, v5);
	String v10 = p0.getProviderPkg(v8, v9);
	this.mPermissions.grantSliceAccess(p2, v5, v10, v9, v8);
	long v12 = Binder.clearCallingIdentity();
	ContentResolver v13 = this.mContext.getContentResolver();
	v13.notifyChange(p1, 0);
	Binder.restoreCallingIdentity(v12);
	return;
}
-----
depth : 1
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 1
public void grantSliceAccess(String p1, int p2, String p3, int p4, Uri p5){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
	SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
	SliceClientPermissions v3 = p0.getClient(v0);
	v3.grantUri(p5, v1);
	SliceProviderPermissions v5 = p0.getProvider(v1);
	Uri v6 = ContentProvider.getUriWithoutUserId(p5);
	String v7 = v6.getAuthority();
	SliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7);
	v8.addPkg(v0);
	return;
}
-----
depth : 2
public SliceClientPermissions getClient(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedClients.get(p1);
	String v2 = SliceClientPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v7 = new SliceClientPermissions(p1,p0);
	Object v9 = this.mCachedClients.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public void grantUri(Uri p1, SlicePermissionManager$PkgUser p2){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(v1,v2);
	String v1 = p1.getAuthority();
	int v2 = p2.getUserId();
	SliceClientPermissions$SliceAuthority v4 = p0.getOrCreateAuthority(v0, p2);
	List v5 = p1.getPathSegments();
	v4.addPath(v5);
	return;
}
-----
depth : 2
public SliceProviderPermissions getProvider(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedProviders.get(p1);
	String v2 = SliceProviderPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v7 = new SliceProviderPermissions(p1,p0);
	Object v9 = this.mCachedProviders.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public SliceProviderPermissions$SliceAuthority getOrCreateAuthority(String p1){
	Object v1 = this.mAuths.get(p1);
	SliceProviderPermissions$SliceAuthority v1 = new SliceProviderPermissions$SliceAuthority(p1,p0);
	Object v3 = this.mAuths.put(p1, v1);
	p0.onPersistableDirty(v1);
	return phiInstruction;
}
-----
depth : 2
public void addPkg(SlicePermissionManager$PkgUser p1){
	boolean v1 = this.mPkgs.add(p1);
	return;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void grantPermissionFromUser(Uri p1, String p2, String p3, boolean p4){
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	Uri$Builder v6 = p1.buildUpon();
	Uri$Builder v7 = v6.path("");
	Uri v8 = v7.build();
	int v9 = ContentProvider.getUserIdFromUri(v8, v5);
	String v10 = p0.getProviderPkg(v8, v9);
	this.mPermissions.grantSliceAccess(p2, v5, v10, v9, v8);
	long v12 = Binder.clearCallingIdentity();
	ContentResolver v13 = this.mContext.getContentResolver();
	v13.notifyChange(p1, 0);
	Binder.restoreCallingIdentity(v12);
	return;
}
-----
depth : 1
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 1
public void grantSliceAccess(String p1, int p2, String p3, int p4, Uri p5){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
	SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
	SliceClientPermissions v3 = p0.getClient(v0);
	v3.grantUri(p5, v1);
	SliceProviderPermissions v5 = p0.getProvider(v1);
	Uri v6 = ContentProvider.getUriWithoutUserId(p5);
	String v7 = v6.getAuthority();
	SliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7);
	v8.addPkg(v0);
	return;
}
-----
depth : 2
public SliceClientPermissions getClient(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedClients.get(p1);
	String v2 = SliceClientPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read client", caughtException);
	SliceClientPermissions v7 = new SliceClientPermissions(p1,p0);
	Object v9 = this.mCachedClients.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public void grantUri(Uri p1, SlicePermissionManager$PkgUser p2){
	SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(v1,v2);
	String v1 = p1.getAuthority();
	int v2 = p2.getUserId();
	SliceClientPermissions$SliceAuthority v4 = p0.getOrCreateAuthority(v0, p2);
	List v5 = p1.getPathSegments();
	v4.addPath(v5);
	return;
}
-----
depth : 2
public SliceProviderPermissions getProvider(SlicePermissionManager$PkgUser p1){
	Object v1 = this.mCachedProviders.get(p1);
	String v2 = SliceProviderPermissions.getFileName(p1);
	SlicePermissionManager$ParserHolder v3 = p0.getParser(v2);
	XmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);
	v3.close();
	caughtException.addSuppressed(caughtException);
	int v7 = Log.e("SlicePermissionManager", "Can't read provider", caughtException);
	SliceProviderPermissions v7 = new SliceProviderPermissions(p1,p0);
	Object v9 = this.mCachedProviders.put(p1, v7);
	return phiInstruction;
}
-----
depth : 2
public SliceProviderPermissions$SliceAuthority getOrCreateAuthority(String p1){
	Object v1 = this.mAuths.get(p1);
	return phiInstruction;
}
-----
depth : 2
public void addPkg(SlicePermissionManager$PkgUser p1){
	boolean v1 = this.mPkgs.add(p1);
	this.mTracker.onPersistableDirty(p0);
	return;
}
-----

and the following sink code:
['SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);\nSliceClientPermissions v3 = p0.getClient(v0);\nv3.grantUri(p5, v1);\nSliceProviderPermissions v5 = p0.getProvider(v1);\nUri v6 = ContentProvider.getUriWithoutUserId(p5);\nString v7 = v6.getAuthority();\nSliceProviderPermissions$SliceAuthority v8 = v5.getOrCreateAuthority(v7);\nv8.addPkg(v0);', 'Object v1 = this.mCachedClients.get(p1);\nString v2 = SliceClientPermissions.getFileName(p1);\nSlicePermissionManager$ParserHolder v3 = p0.getParser(v2);\nXmlPullParser v4 = SlicePermissionManager$ParserHolder.-$$Nest$fgetparser(v3);\nv3.close();\nSliceClientPermissions v7 = new SliceClientPermissions(p1,p0);\nObject v9 = this.mCachedClients.put(p1, v7);']

The method grantPermissionFromUser has the following similar APIs:

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I with Similarity Score: 0.8954552412033081
  - Access Control Level: NORMAL and the following code:
SlicePermissionManager$PkgUser v0 = new SlicePermissionManager$PkgUser(p1,p2);
SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
SliceClientPermissions v3 = p0.getClient(v0);
v3.grantUri(p5, v1);

- API Name: revokeSlicePermission(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)V with Similarity Score: 0.8308852910995483
  - Access Control Level: NONE and the following code:
SlicePermissionManager$PkgUser v1 = new SlicePermissionManager$PkgUser(p3,p4);
Object v1 = this.mCachedClients.get(p1);
SliceClientPermissions v7 = new SliceClientPermissions(p1,p0);
Object v9 = this.mCachedClients.put(p1, v7);

