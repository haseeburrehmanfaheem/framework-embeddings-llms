This is path 1 for the API with depth 2:
depth : 0
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	p0.verifyCaller(p1);
	p0.enforceAccess(p1, p2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p2, v4);
	String v6 = p0.getProviderPkg(v5, v4);
	PinnedSliceState v7 = p0.getOrCreatePinnedSlice(v5, v6);
	v7.pin(p1, p3, p4);
	SliceManagerService$$ExternalSyntheticLambda0 v8 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v6,p1,v4);
	boolean v10 = this.mHandler.post(v8);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void enforceAccess(String p1, Uri p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.checkAccess(p1, p2, v1, v2);
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	int v6 = ContentProvider.getUserIdFromUri(p2, v5);
	String v7 = p0.getProviderPkg(p2, v6);
	boolean v8 = Objects.equals(p1, v7);
	p0.enforceCrossUser(p1, p2);
	return;
}
-----
depth : 2
public int checkAccess(String p1, Uri p2, int p3, int p4){
	int v1 = p0.checkSlicePermission(p2, 0, p1, p4, p3, 0);
	return v1;
}
-----
depth : 2
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 2
public void enforceCrossUser(String p1, Uri p2){
	return;
}
-----
depth : 1
public PinnedSliceState getOrCreatePinnedSlice(Uri p1, String p2){
	Object v1 = this.mPinnedSlicesByUri.get(p1);
	PinnedSliceState v2 = p0.createPinnedSlice(p1, p2);
	Object v3 = this.mPinnedSlicesByUri.put(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public PinnedSliceState createPinnedSlice(Uri p1, String p2){
	PinnedSliceState v0 = new PinnedSliceState(p0,p1,p2);
	return v0;
}
-----
depth : 1
public void pin(String p1, SliceSpec p2, IBinder p3){
	PinnedSliceState$ListenerInfo v0 = new PinnedSliceState$ListenerInfo(p0,p3,p1,1,v1,v2);
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	Object v4 = this.mListeners.put(p3, v0);
	p3.linkToDeath(this.mDeathRecipient, 0);
	p0.mergeSpecs(p2);
	p0.setSlicePinned(1);
	return;
}
-----
depth : 2
public void mergeSpecs(SliceSpec p1){
	List v1 = Arrays.asList(this.mSupportedSpecs);
	Stream v2 = v1.stream();
	PinnedSliceState$$ExternalSyntheticLambda1 v2 = new PinnedSliceState$$ExternalSyntheticLambda1(p0,p1);
	Stream v4 = v2.map(v2);
	PinnedSliceState$$ExternalSyntheticLambda2 v4 = new PinnedSliceState$$ExternalSyntheticLambda2();
	Stream v6 = v4.filter(v4);
	PinnedSliceState$$ExternalSyntheticLambda3 v6 = new PinnedSliceState$$ExternalSyntheticLambda3();
	Object v8 = v6.toArray(v6);
	this.mSupportedSpecs = v8;
	return;
}
-----
depth : 2
public void setSlicePinned(boolean p1){
	this.mSlicePinned = p1;
	Handler v1 = this.mService.getHandler();
	PinnedSliceState$$ExternalSyntheticLambda4 v1 = new PinnedSliceState$$ExternalSyntheticLambda4(p0);
	boolean v3 = v1.post(v1);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	p0.verifyCaller(p1);
	p0.enforceAccess(p1, p2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p2, v4);
	String v6 = p0.getProviderPkg(v5, v4);
	PinnedSliceState v7 = p0.getOrCreatePinnedSlice(v5, v6);
	v7.pin(p1, p3, p4);
	SliceManagerService$$ExternalSyntheticLambda0 v8 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v6,p1,v4);
	boolean v10 = this.mHandler.post(v8);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void enforceAccess(String p1, Uri p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.checkAccess(p1, p2, v1, v2);
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	int v6 = ContentProvider.getUserIdFromUri(p2, v5);
	String v7 = p0.getProviderPkg(p2, v6);
	boolean v8 = Objects.equals(p1, v7);
	p0.enforceCrossUser(p1, p2);
	return;
}
-----
depth : 2
public int checkAccess(String p1, Uri p2, int p3, int p4){
	int v1 = p0.checkSlicePermission(p2, 0, p1, p4, p3, 0);
	return v1;
}
-----
depth : 2
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 2
public void enforceCrossUser(String p1, Uri p2){
	return;
}
-----
depth : 1
public PinnedSliceState getOrCreatePinnedSlice(Uri p1, String p2){
	Object v1 = this.mPinnedSlicesByUri.get(p1);
	PinnedSliceState v2 = p0.createPinnedSlice(p1, p2);
	Object v3 = this.mPinnedSlicesByUri.put(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public PinnedSliceState createPinnedSlice(Uri p1, String p2){
	PinnedSliceState v0 = new PinnedSliceState(p0,p1,p2);
	return v0;
}
-----
depth : 1
public void pin(String p1, SliceSpec p2, IBinder p3){
	PinnedSliceState$ListenerInfo v0 = new PinnedSliceState$ListenerInfo(p0,p3,p1,1,v1,v2);
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	Object v4 = this.mListeners.put(p3, v0);
	p3.linkToDeath(this.mDeathRecipient, 0);
	p0.mergeSpecs(p2);
	p0.setSlicePinned(1);
	return;
}
-----
depth : 2
public void mergeSpecs(SliceSpec p1){
	List v1 = Arrays.asList(this.mSupportedSpecs);
	Stream v2 = v1.stream();
	PinnedSliceState$$ExternalSyntheticLambda1 v2 = new PinnedSliceState$$ExternalSyntheticLambda1(p0,p1);
	Stream v4 = v2.map(v2);
	PinnedSliceState$$ExternalSyntheticLambda2 v4 = new PinnedSliceState$$ExternalSyntheticLambda2();
	Stream v6 = v4.filter(v4);
	PinnedSliceState$$ExternalSyntheticLambda3 v6 = new PinnedSliceState$$ExternalSyntheticLambda3();
	Object v8 = v6.toArray(v6);
	this.mSupportedSpecs = v8;
	return;
}
-----
depth : 2
public void setSlicePinned(boolean p1){
	this.mSlicePinned = p1;
	Handler v1 = this.mService.getHandler();
	PinnedSliceState$$ExternalSyntheticLambda5 v1 = new PinnedSliceState$$ExternalSyntheticLambda5(p0);
	boolean v3 = v1.post(v1);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void pinSlice(String p1, Uri p2, SliceSpec p3, IBinder p4){
	p0.verifyCaller(p1);
	p0.enforceAccess(p1, p2);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p2, v4);
	String v6 = p0.getProviderPkg(v5, v4);
	PinnedSliceState v7 = p0.getOrCreatePinnedSlice(v5, v6);
	v7.pin(p1, p3, p4);
	SliceManagerService$$ExternalSyntheticLambda0 v8 = new SliceManagerService$$ExternalSyntheticLambda0(p0,v6,p1,v4);
	boolean v10 = this.mHandler.post(v8);
	return;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void enforceAccess(String p1, Uri p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.checkAccess(p1, p2, v1, v2);
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	int v6 = ContentProvider.getUserIdFromUri(p2, v5);
	String v7 = p0.getProviderPkg(p2, v6);
	boolean v8 = Objects.equals(p1, v7);
	p0.enforceCrossUser(p1, p2);
	return;
}
-----
depth : 2
public int checkAccess(String p1, Uri p2, int p3, int p4){
	int v1 = p0.checkSlicePermission(p2, 0, p1, p4, p3, 0);
	return v1;
}
-----
depth : 2
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 2
public void enforceCrossUser(String p1, Uri p2){
	return;
}
-----
depth : 1
public PinnedSliceState getOrCreatePinnedSlice(Uri p1, String p2){
	Object v1 = this.mPinnedSlicesByUri.get(p1);
	PinnedSliceState v2 = p0.createPinnedSlice(p1, p2);
	Object v3 = this.mPinnedSlicesByUri.put(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public PinnedSliceState createPinnedSlice(Uri p1, String p2){
	PinnedSliceState v0 = new PinnedSliceState(p0,p1,p2);
	return v0;
}
-----
depth : 1
public void pin(String p1, SliceSpec p2, IBinder p3){
	PinnedSliceState$ListenerInfo v0 = new PinnedSliceState$ListenerInfo(p0,p3,p1,1,v1,v2);
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	Object v4 = this.mListeners.put(p3, v0);
	p3.linkToDeath(this.mDeathRecipient, 0);
	p0.mergeSpecs(p2);
	p0.setSlicePinned(1);
	return;
}
-----
depth : 2
public void mergeSpecs(SliceSpec p1){
	List v1 = Arrays.asList(this.mSupportedSpecs);
	Stream v2 = v1.stream();
	PinnedSliceState$$ExternalSyntheticLambda1 v2 = new PinnedSliceState$$ExternalSyntheticLambda1(p0,p1);
	Stream v4 = v2.map(v2);
	PinnedSliceState$$ExternalSyntheticLambda2 v4 = new PinnedSliceState$$ExternalSyntheticLambda2();
	Stream v6 = v4.filter(v4);
	PinnedSliceState$$ExternalSyntheticLambda3 v6 = new PinnedSliceState$$ExternalSyntheticLambda3();
	Object v8 = v6.toArray(v6);
	this.mSupportedSpecs = v8;
	return;
}
-----
depth : 2
public void setSlicePinned(boolean p1){
	this.mSlicePinned = p1;
	Handler v1 = this.mService.getHandler();
	PinnedSliceState$$ExternalSyntheticLambda4 v1 = new PinnedSliceState$$ExternalSyntheticLambda4(p0);
	boolean v3 = v1.post(v1);
	return;
}
-----
