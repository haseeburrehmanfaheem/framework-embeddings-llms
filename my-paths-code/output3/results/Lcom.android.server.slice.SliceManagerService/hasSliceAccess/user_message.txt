This is path 1 for the API with depth 2:
depth : 0
public boolean hasSliceAccess(String p1){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	boolean v4 = p0.hasFullSliceAccess(p1, v3);
	return v4;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public boolean hasFullSliceAccess(String p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	boolean v2 = p0.isDefaultHomeApp(p1, p2);
	boolean v3 = p0.isAssistant(p1, p2);
	boolean v4 = p0.isGrantedFullAccess(p1, p2);
	Binder.restoreCallingIdentity(v1);
	return phiInstruction;
}
-----
depth : 2
public boolean isDefaultHomeApp(String p1, int p2){
	SliceManagerService$PackageMatchingCache v1 = p0.getHomeMatcher(p2);
	boolean v2 = v1.matches(p1);
	return v2;
}
-----
depth : 2
public boolean isAssistant(String p1, int p2){
	SliceManagerService$PackageMatchingCache v1 = p0.getAssistantMatcher(p2);
	boolean v2 = v1.matches(p1);
	return v2;
}
-----
depth : 2
public boolean isGrantedFullAccess(String p1, int p2){
	boolean v1 = this.mPermissions.hasFullAccess(p1, p2);
	return v1;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean hasSliceAccess(String p1){
	p0.verifyCaller(p1);
	UserHandle v2 = Binder.getCallingUserHandle();
	int v3 = v2.getIdentifier();
	boolean v4 = p0.hasFullSliceAccess(p1, v3);
	return v4;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public boolean hasFullSliceAccess(String p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	boolean v2 = p0.isDefaultHomeApp(p1, p2);
	boolean v3 = p0.isAssistant(p1, p2);
	boolean v4 = p0.isGrantedFullAccess(p1, p2);
	Binder.restoreCallingIdentity(v1);
	return phiInstruction;
}
-----
depth : 2
public boolean isDefaultHomeApp(String p1, int p2){
	SliceManagerService$PackageMatchingCache v1 = p0.getHomeMatcher(p2);
	boolean v2 = v1.matches(p1);
	return v2;
}
-----
depth : 2
public boolean isAssistant(String p1, int p2){
	SliceManagerService$PackageMatchingCache v1 = p0.getAssistantMatcher(p2);
	boolean v2 = v1.matches(p1);
	return v2;
}
-----
depth : 2
public boolean isGrantedFullAccess(String p1, int p2){
	boolean v1 = this.mPermissions.hasFullAccess(p1, p2);
	return v1;
}
-----
