The method getPinnedSpecs has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public SliceSpec getPinnedSpecs(Uri p1, String p2){
	p0.verifyCaller(p2);
	p0.enforceAccess(p2, p1);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p1, v4);
	PinnedSliceState v6 = p0.getPinnedSlice(v5);
	SliceSpec v7 = v6.getSpecs();
	return v7;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void enforceAccess(String p1, Uri p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.checkAccess(p1, p2, v1, v2);
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	int v6 = ContentProvider.getUserIdFromUri(p2, v5);
	String v7 = p0.getProviderPkg(p2, v6);
	boolean v8 = Objects.equals(p1, v7);
	p0.enforceCrossUser(p1, p2);
	return;
}
-----
depth : 2
public int checkAccess(String p1, Uri p2, int p3, int p4){
	int v1 = p0.checkSlicePermission(p2, 0, p1, p4, p3, 0);
	return v1;
}
-----
depth : 2
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 2
public void enforceCrossUser(String p1, Uri p2){
	return;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public SliceSpec getPinnedSpecs(Uri p1, String p2){
	p0.verifyCaller(p2);
	p0.enforceAccess(p2, p1);
	UserHandle v3 = Binder.getCallingUserHandle();
	int v4 = v3.getIdentifier();
	Uri v5 = ContentProvider.maybeAddUserId(p1, v4);
	PinnedSliceState v6 = p0.getPinnedSlice(v5);
	SliceSpec v7 = v6.getSpecs();
	return v7;
}
-----
depth : 1
public void verifyCaller(String p1){
	return;
}
-----
depth : 1
public void enforceAccess(String p1, Uri p2){
	int v1 = Binder.getCallingUid();
	int v2 = Binder.getCallingPid();
	int v3 = p0.checkAccess(p1, p2, v1, v2);
	UserHandle v4 = Binder.getCallingUserHandle();
	int v5 = v4.getIdentifier();
	int v6 = ContentProvider.getUserIdFromUri(p2, v5);
	String v7 = p0.getProviderPkg(p2, v6);
	boolean v8 = Objects.equals(p1, v7);
	p0.enforceCrossUser(p1, p2);
	return;
}
-----
depth : 2
public int checkAccess(String p1, Uri p2, int p3, int p4){
	int v1 = p0.checkSlicePermission(p2, 0, p1, p4, p3, 0);
	return v1;
}
-----
depth : 2
public String getProviderPkg(Uri p1, int p2){
	long v1 = Binder.clearCallingIdentity();
	Uri v2 = ContentProvider.getUriWithoutUserId(p1);
	String v3 = v2.getAuthority();
	PackageManager v4 = this.mContext.getPackageManager();
	int v5 = ContentProvider.getUserIdFromUri(p1, p2);
	ProviderInfo v6 = v4.resolveContentProviderAsUser(v3, 0, v5);
	Binder.restoreCallingIdentity(v1);
	return ProviderInfo.packageName;
}
-----
depth : 2
public void enforceCrossUser(String p1, Uri p2){
	return;
}
-----

and the following sink code:
['int v3 = p0.checkAccess(p1, p2, v1, v2);\nint v6 = ContentProvider.getUserIdFromUri(p2, v5);\nString v7 = p0.getProviderPkg(p2, v6);', 'p0.enforceAccess(p2, p1);\nUserHandle v3 = Binder.getCallingUserHandle();\nint v4 = v3.getIdentifier();\nUri v5 = ContentProvider.maybeAddUserId(p1, v4);\nPinnedSliceState v6 = p0.getPinnedSlice(v5);\nSliceSpec v7 = v6.getSpecs();']

The method getPinnedSpecs has the following similar APIs:

- API Name: checkSlicePermission(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;II[Ljava/lang/String;)I with Similarity Score: 0.8382217884063721
  - Access Control Level: NORMAL and the following code:
int v7 = ContentProvider.getUserIdFromUri(p1, v1);
String v8 = p0.getProviderPkg(p1, v7);
this.mPermissions.grantSliceAccess(p3, v1, v8, v7, p1);

