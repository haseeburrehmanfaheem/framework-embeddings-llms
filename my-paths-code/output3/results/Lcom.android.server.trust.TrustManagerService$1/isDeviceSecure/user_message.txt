This is path 1 for the API with depth 2:
depth : 0
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
	int v3 = ITrustManager$Stub.getCallingPid();
	int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceSecure", 0);
	long v5 = Binder.clearCallingIdentity();
	LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);
	int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);
	LockPatternUtils v9 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v10 = v9.isSecure(phiInstruction);
	Binder.restoreCallingIdentity(v5);
	return v10;
}
-----
depth : 1
public boolean isAppOrDisplayOnAnyVirtualDevice(int p1, int p2){
	VirtualDeviceManagerInternal v2 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	Object v3 = LocalServices.getService(VirtualDeviceManagerInterna.class);
	TrustManagerService.-$$Nest$fputmVirtualDeviceManager(this.this$0, v3);
	VirtualDeviceManagerInternal v5 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	VirtualDeviceManagerInternal v6 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	boolean v7 = v6.isDisplayOwnedByAnyVirtualDevice(p2);
	return 1;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public void -$$Nest$fputmVirtualDeviceManager(TrustManagerService p1, VirtualDeviceManagerInternal p2){
	this.mVirtualDeviceManager = p2;
	return;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 1
public int -$$Nest$mresolveProfileParent(TrustManagerService p1, int p2){
	int v1 = p1.resolveProfileParent(p2);
	return v1;
}
-----
depth : 2
public int resolveProfileParent(int p1){
	long v1 = Binder.clearCallingIdentity();
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	UserHandle v3 = v2.getUserHandle();
	int v4 = v3.getIdentifier();
	Binder.restoreCallingIdentity(v1);
	return v4;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
	int v3 = ITrustManager$Stub.getCallingPid();
	int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceSecure", 0);
	long v5 = Binder.clearCallingIdentity();
	LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);
	int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);
	LockPatternUtils v9 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v10 = v9.isSecure(phiInstruction);
	Binder.restoreCallingIdentity(v5);
	return v10;
}
-----
depth : 1
public boolean isAppOrDisplayOnAnyVirtualDevice(int p1, int p2){
	VirtualDeviceManagerInternal v2 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	Object v3 = LocalServices.getService(VirtualDeviceManagerInterna.class);
	TrustManagerService.-$$Nest$fputmVirtualDeviceManager(this.this$0, v3);
	VirtualDeviceManagerInternal v5 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	VirtualDeviceManagerInternal v6 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	boolean v7 = v6.isDisplayOwnedByAnyVirtualDevice(p2);
	return 0;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public void -$$Nest$fputmVirtualDeviceManager(TrustManagerService p1, VirtualDeviceManagerInternal p2){
	this.mVirtualDeviceManager = p2;
	return;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 1
public int -$$Nest$mresolveProfileParent(TrustManagerService p1, int p2){
	int v1 = p1.resolveProfileParent(p2);
	return v1;
}
-----
depth : 2
public int resolveProfileParent(int p1){
	long v1 = Binder.clearCallingIdentity();
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	UserHandle v3 = v2.getUserHandle();
	int v4 = v3.getIdentifier();
	Binder.restoreCallingIdentity(v1);
	return v4;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean isDeviceSecure(int p1, int p2){
	int v1 = ITrustManager$Stub.getCallingUid();
	boolean v2 = p0.isAppOrDisplayOnAnyVirtualDevice(v1, p2);
	int v3 = ITrustManager$Stub.getCallingPid();
	int v4 = ActivityManager.handleIncomingUser(v3, v1, p1, 0, 1, "isDeviceSecure", 0);
	long v5 = Binder.clearCallingIdentity();
	LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);
	int v8 = TrustManagerService.-$$Nest$mresolveProfileParent(this.this$0, v4);
	LockPatternUtils v9 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v10 = v9.isSecure(phiInstruction);
	Binder.restoreCallingIdentity(v5);
	return v10;
}
-----
depth : 1
public boolean isAppOrDisplayOnAnyVirtualDevice(int p1, int p2){
	VirtualDeviceManagerInternal v2 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	Object v3 = LocalServices.getService(VirtualDeviceManagerInterna.class);
	TrustManagerService.-$$Nest$fputmVirtualDeviceManager(this.this$0, v3);
	VirtualDeviceManagerInternal v5 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	VirtualDeviceManagerInternal v6 = TrustManagerService.-$$Nest$fgetmVirtualDeviceManager(this.this$0);
	boolean v7 = v6.isDisplayOwnedByAnyVirtualDevice(p2);
	return 1;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public void -$$Nest$fputmVirtualDeviceManager(TrustManagerService p1, VirtualDeviceManagerInternal p2){
	this.mVirtualDeviceManager = p2;
	return;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 2
public VirtualDeviceManagerInternal -$$Nest$fgetmVirtualDeviceManager(TrustManagerService p1){
	return this.mVirtualDeviceManager;
}
-----
depth : 1
public int -$$Nest$mresolveProfileParent(TrustManagerService p1, int p2){
	int v1 = p1.resolveProfileParent(p2);
	return v1;
}
-----
depth : 2
public int resolveProfileParent(int p1){
	long v1 = Binder.clearCallingIdentity();
	UserInfo v2 = this.mUserManager.getProfileParent(p1);
	Binder.restoreCallingIdentity(v1);
	return p1;
}
-----
