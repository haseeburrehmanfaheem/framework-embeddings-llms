The method setDeviceLockedForUser has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public void setDeviceLockedForUser(int p1, boolean p2){
	p0.enforceReportPermission();
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	LockPatternUtils v5 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v6 = v5.isSecure(p1);
	SparseBooleanArray v7 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);
	SparseBooleanArray v8 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);
	v8.put(p1, p2);
	[J v10 = TrustManagerService.-$$Nest$mgetBiometricSids(this.this$0, p1);
	int v11 = Authorization.onLockScreenEvent(p2, p1, 0, v10);
	IActivityManager v12 = ActivityManager.getService();
	v12.notifyLockedProfile(p1);
	Intent v13 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
	Intent v15 = v13.addFlags(1073741824);
	Intent v16 = v13.putExtra("android.intent.extra.user_handle", p1);
	Context v17 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);
	v17.sendBroadcastAsUser(v13, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceReportPermission(){
	return;
}
-----
depth : 1
public LockPatternUtils -$$Nest$fgetmLockPatternUtils(TrustManagerService p1){
	return this.mLockPatternUtils;
}
-----
depth : 1
public LockPatternUtils -$$Nest$fgetmLockPatternUtils(TrustManagerService p1){
	return this.mLockPatternUtils;
}
-----
depth : 1
public SparseBooleanArray -$$Nest$fgetmDeviceLockedForUser(TrustManagerService p1){
	return this.mDeviceLockedForUser;
}
-----
depth : 1
public SparseBooleanArray -$$Nest$fgetmDeviceLockedForUser(TrustManagerService p1){
	return this.mDeviceLockedForUser;
}
-----
depth : 1
public [J -$$Nest$mgetBiometricSids(TrustManagerService p1, int p2){
	[J v1 = p1.getBiometricSids(p2);
	return v1;
}
-----
depth : 2
public [J getBiometricSids(int p1){
	Object v1 = this.mContext.getSystemService(BiometricManage.class);
	[J v2 = v1.getAuthenticatorIds(p1);
	return v2;
}
-----
depth : 1
public int onLockScreenEvent(boolean p1, int p2, byte[] p3, [J p4){
	IKeystoreAuthorization v1 = Authorization.getService();
	v1.onLockScreenEvent(1, p2, 0, p4);
	return ServiceSpecificException.errorCode;
}
-----
depth : 2
public IKeystoreAuthorization getService(){
	IBinder v1 = ServiceManager.checkService("android.security.authorization");
	IKeystoreAuthorization v2 = IKeystoreAuthorization$Stub.asInterface(v1);
	return v2;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public void setDeviceLockedForUser(int p1, boolean p2){
	p0.enforceReportPermission();
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	LockPatternUtils v5 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v6 = v5.isSecure(p1);
	SparseBooleanArray v7 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);
	SparseBooleanArray v8 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);
	v8.put(p1, p2);
	[J v10 = TrustManagerService.-$$Nest$mgetBiometricSids(this.this$0, p1);
	int v11 = Authorization.onLockScreenEvent(p2, p1, 0, v10);
	IActivityManager v12 = ActivityManager.getService();
	v12.notifyLockedProfile(p1);
	Intent v13 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
	Intent v15 = v13.addFlags(1073741824);
	Intent v16 = v13.putExtra("android.intent.extra.user_handle", p1);
	Context v17 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);
	v17.sendBroadcastAsUser(v13, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceReportPermission(){
	return;
}
-----
depth : 1
public LockPatternUtils -$$Nest$fgetmLockPatternUtils(TrustManagerService p1){
	return this.mLockPatternUtils;
}
-----
depth : 1
public LockPatternUtils -$$Nest$fgetmLockPatternUtils(TrustManagerService p1){
	return this.mLockPatternUtils;
}
-----
depth : 1
public SparseBooleanArray -$$Nest$fgetmDeviceLockedForUser(TrustManagerService p1){
	return this.mDeviceLockedForUser;
}
-----
depth : 1
public SparseBooleanArray -$$Nest$fgetmDeviceLockedForUser(TrustManagerService p1){
	return this.mDeviceLockedForUser;
}
-----
depth : 1
public [J -$$Nest$mgetBiometricSids(TrustManagerService p1, int p2){
	[J v1 = p1.getBiometricSids(p2);
	return v1;
}
-----
depth : 2
public [J getBiometricSids(int p1){
	Object v1 = this.mContext.getSystemService(BiometricManage.class);
	[J v2 = v1.getAuthenticatorIds(p1);
	return v2;
}
-----
depth : 1
public int onLockScreenEvent(boolean p1, int p2, byte[] p3, [J p4){
	IKeystoreAuthorization v1 = Authorization.getService();
	v1.onLockScreenEvent(1, p2, 0, p4);
	int v3 = Log.w("KeystoreAuthorization", "Can not connect to keystore", caughtException);
	return 4;
}
-----
depth : 2
public IKeystoreAuthorization getService(){
	IBinder v1 = ServiceManager.checkService("android.security.authorization");
	IKeystoreAuthorization v2 = IKeystoreAuthorization$Stub.asInterface(v1);
	return v2;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public void setDeviceLockedForUser(int p1, boolean p2){
	p0.enforceReportPermission();
	long v2 = Binder.clearCallingIdentity();
	LockPatternUtils v3 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v4 = v3.isSeparateProfileChallengeEnabled(p1);
	LockPatternUtils v5 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
	boolean v6 = v5.isSecure(p1);
	SparseBooleanArray v7 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);
	SparseBooleanArray v8 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);
	v8.put(p1, p2);
	[J v10 = TrustManagerService.-$$Nest$mgetBiometricSids(this.this$0, p1);
	int v11 = Authorization.onLockScreenEvent(p2, p1, 0, v10);
	IActivityManager v12 = ActivityManager.getService();
	Intent v12 = new Intent("android.intent.action.DEVICE_LOCKED_CHANGED");
	Intent v14 = v12.addFlags(1073741824);
	Intent v15 = v12.putExtra("android.intent.extra.user_handle", p1);
	Context v16 = TrustManagerService.-$$Nest$fgetmContext(this.this$0);
	v16.sendBroadcastAsUser(v12, UserHandle.SYSTEM, "android.permission.TRUST_LISTENER", 0);
	Binder.restoreCallingIdentity(v2);
	return;
}
-----
depth : 1
public void enforceReportPermission(){
	return;
}
-----
depth : 1
public LockPatternUtils -$$Nest$fgetmLockPatternUtils(TrustManagerService p1){
	return this.mLockPatternUtils;
}
-----
depth : 1
public LockPatternUtils -$$Nest$fgetmLockPatternUtils(TrustManagerService p1){
	return this.mLockPatternUtils;
}
-----
depth : 1
public SparseBooleanArray -$$Nest$fgetmDeviceLockedForUser(TrustManagerService p1){
	return this.mDeviceLockedForUser;
}
-----
depth : 1
public SparseBooleanArray -$$Nest$fgetmDeviceLockedForUser(TrustManagerService p1){
	return this.mDeviceLockedForUser;
}
-----
depth : 1
public [J -$$Nest$mgetBiometricSids(TrustManagerService p1, int p2){
	[J v1 = p1.getBiometricSids(p2);
	return v1;
}
-----
depth : 2
public [J getBiometricSids(int p1){
	Object v1 = this.mContext.getSystemService(BiometricManage.class);
	[J v2 = v1.getAuthenticatorIds(p1);
	return v2;
}
-----
depth : 1
public int onLockScreenEvent(boolean p1, int p2, byte[] p3, [J p4){
	IKeystoreAuthorization v1 = Authorization.getService();
	v1.onLockScreenEvent(1, p2, 0, p4);
	return ServiceSpecificException.errorCode;
}
-----
depth : 2
public IKeystoreAuthorization getService(){
	IBinder v1 = ServiceManager.checkService("android.security.authorization");
	IKeystoreAuthorization v2 = IKeystoreAuthorization$Stub.asInterface(v1);
	return v2;
}
-----

and the following sink code:
['LockPatternUtils v3 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);\nboolean v4 = v3.isSeparateProfileChallengeEnabled(p1);\nLockPatternUtils v5 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);\nboolean v6 = v5.isSecure(p1);', 'SparseBooleanArray v7 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);\nSparseBooleanArray v8 = TrustManagerService.-$$Nest$fgetmDeviceLockedForUser(this.this$0);\nv8.put(p1, p2);']

The method setDeviceLockedForUser has the following similar APIs:

- API Name: isDeviceSecure(II)Z with Similarity Score: 0.9690092206001282
  - Access Control Level: SYS_OR_SIG and the following code:
LockPatternUtils v6 = TrustManagerService.-$$Nest$fgetmLockPatternUtils(this.this$0);
boolean v7 = v6.isSeparateProfileChallengeEnabled(v4);

- API Name: unlockedByBiometricForUser(ILandroid/hardware/biometrics/BiometricSourceType;)V with Similarity Score: 0.901128888130188
  - Access Control Level: SYS_OR_SIG and the following code:
SparseBooleanArray v2 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0);
SparseBooleanArray v3 = TrustManagerService.-$$Nest$fgetmUsersUnlockedByBiometric(this.this$0);
v3.put(p1, 1);

