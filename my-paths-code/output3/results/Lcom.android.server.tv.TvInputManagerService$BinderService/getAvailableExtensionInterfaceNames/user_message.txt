This is path 1 for the API with depth 2:
depth : 0
public List getAvailableExtensionInterfaceNames(String p1, int p2){
	p0.ensureTisExtensionInterfacePermission();
	int v2 = Binder.getCallingUid();
	int v3 = Binder.getCallingPid();
	int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p2, "getAvailableExtensionInterfaceNames");
	long v5 = Binder.clearCallingIdentity();
	Object v6 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4);
	Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7);
	Object v9 = v8.get(p1);
	Map v10 = TvInputManagerService$UserState.-$$Nest$fgetserviceStateMap(v7);
	TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9);
	ComponentName v12 = v11.getComponent();
	Object v13 = v10.get(v12);
	boolean v14 = TvInputManagerService$ServiceState.-$$Nest$fgetisHardware(v13);
	ITvInputService v15 = TvInputManagerService$ServiceState.-$$Nest$fgetservice(v13);
	ITvInputService v16 = TvInputManagerService$ServiceState.-$$Nest$fgetservice(v13);
	ArrayList v16 = new ArrayList();
	List v18 = phiInstruction.getAvailableExtensionInterfaceNames();
	List v19 = CollectionUtils.emptyIfNull(v18);
	Iterator v20 = v19.iterator();
	boolean v21 = v20.hasNext();
	Object v22 = v20.next();
	String v23 = phiInstruction.getExtensionInterfacePermission(v22);
	int v24 = Slog.e("TvInputManagerService", "error in getAvailableExtensionInterfaceNames or getExtensionInterfacePermission", caughtException);
	ArrayList v24 = new ArrayList();
	Binder.restoreCallingIdentity(v5);
	return v24;
}
-----
depth : 1
public void ensureTisExtensionInterfacePermission(){
	return;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0);
	this.mUserStates.put(p1, v1);
	return phiInstruction;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public List getAvailableExtensionInterfaceNames(String p1, int p2){
	p0.ensureTisExtensionInterfacePermission();
	int v2 = Binder.getCallingUid();
	int v3 = Binder.getCallingPid();
	int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p2, "getAvailableExtensionInterfaceNames");
	long v5 = Binder.clearCallingIdentity();
	Object v6 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4);
	Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7);
	Object v9 = v8.get(p1);
	Map v10 = TvInputManagerService$UserState.-$$Nest$fgetserviceStateMap(v7);
	TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9);
	ComponentName v12 = v11.getComponent();
	Object v13 = v10.get(v12);
	boolean v14 = TvInputManagerService$ServiceState.-$$Nest$fgetisHardware(v13);
	ITvInputService v15 = TvInputManagerService$ServiceState.-$$Nest$fgetservice(v13);
	ArrayList v15 = new ArrayList();
	List v17 = phiInstruction.getAvailableExtensionInterfaceNames();
	List v18 = CollectionUtils.emptyIfNull(v17);
	Iterator v19 = v18.iterator();
	boolean v20 = v19.hasNext();
	Object v21 = v19.next();
	String v22 = phiInstruction.getExtensionInterfacePermission(v21);
	int v23 = Slog.e("TvInputManagerService", "error in getAvailableExtensionInterfaceNames or getExtensionInterfacePermission", caughtException);
	ArrayList v23 = new ArrayList();
	Binder.restoreCallingIdentity(v5);
	return v23;
}
-----
depth : 1
public void ensureTisExtensionInterfacePermission(){
	return;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0);
	this.mUserStates.put(p1, v1);
	return phiInstruction;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public List getAvailableExtensionInterfaceNames(String p1, int p2){
	p0.ensureTisExtensionInterfacePermission();
	int v2 = Binder.getCallingUid();
	int v3 = Binder.getCallingPid();
	int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v3, v2, p2, "getAvailableExtensionInterfaceNames");
	long v5 = Binder.clearCallingIdentity();
	Object v6 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4);
	Map v8 = TvInputManagerService$UserState.-$$Nest$fgetinputMap(v7);
	Object v9 = v8.get(p1);
	Map v10 = TvInputManagerService$UserState.-$$Nest$fgetserviceStateMap(v7);
	TvInputInfo v11 = TvInputManagerService$TvInputState.-$$Nest$fgetinfo(v9);
	ComponentName v12 = v11.getComponent();
	Object v13 = v10.get(v12);
	boolean v14 = TvInputManagerService$ServiceState.-$$Nest$fgetisHardware(v13);
	ITvInputService v15 = TvInputManagerService$ServiceState.-$$Nest$fgetservice(v13);
	ITvInputService v16 = TvInputManagerService$ServiceState.-$$Nest$fgetservice(v13);
	ArrayList v16 = new ArrayList();
	List v18 = phiInstruction.getAvailableExtensionInterfaceNames();
	List v19 = CollectionUtils.emptyIfNull(v18);
	Iterator v20 = v19.iterator();
	boolean v21 = v20.hasNext();
	Object v22 = v20.next();
	String v23 = phiInstruction.getExtensionInterfacePermission(v22);
	int v24 = Slog.e("TvInputManagerService", "error in getAvailableExtensionInterfaceNames or getExtensionInterfacePermission", caughtException);
	ArrayList v24 = new ArrayList();
	Binder.restoreCallingIdentity(v5);
	return v24;
}
-----
depth : 1
public void ensureTisExtensionInterfacePermission(){
	return;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	return phiInstruction;
}
-----
