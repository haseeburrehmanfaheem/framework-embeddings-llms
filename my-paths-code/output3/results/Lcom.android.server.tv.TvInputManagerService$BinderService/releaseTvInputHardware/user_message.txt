This is path 1 for the API with depth 2:
depth : 0
public void releaseTvInputHardware(int p1, ITvInputHardware p2, int p3){
	long v3 = Binder.clearCallingIdentity();
	int v4 = Binder.getCallingUid();
	int v5 = Binder.getCallingPid();
	int v6 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v5, v4, p3, "releaseTvInputHardware");
	TvInputHardwareManager v7 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
	v7.releaseHardware(p1, p2, v4, v6);
	Binder.restoreCallingIdentity(v3);
	return;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public void releaseHardware(int p1, ITvInputHardware p2, int p3, int p4){
	Object v1 = this.mConnections.get(p1);
	ITvInputHardware v2 = v1.getHardwareLocked();
	boolean v3 = p0.checkUidChangedLocked(v1, p3, p4);
	ITvInputHardwareCallback v4 = v1.getCallbackLocked();
	IBinder v5 = v4.asBinder();
	boolean v6 = v5.unlinkToDeath(v1, 0);
	v1.resetLocked(0, 0, 0, 0, 0, 0);
	return;
}
-----
depth : 2
public ITvInputHardware getHardwareLocked(){
	return this.mHardware;
}
-----
depth : 2
public boolean checkUidChangedLocked(TvInputHardwareManager$Connection p1, int p2, int p3){
	return phiInstruction;
}
-----
depth : 2
public ITvInputHardwareCallback getCallbackLocked(){
	return this.mCallback;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void releaseTvInputHardware(int p1, ITvInputHardware p2, int p3){
	long v3 = Binder.clearCallingIdentity();
	int v4 = Binder.getCallingUid();
	int v5 = Binder.getCallingPid();
	int v6 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v5, v4, p3, "releaseTvInputHardware");
	TvInputHardwareManager v7 = TvInputManagerService.-$$Nest$fgetmTvInputHardwareManager(this.this$0);
	v7.releaseHardware(p1, p2, v4, v6);
	Binder.restoreCallingIdentity(v3);
	return;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public void releaseHardware(int p1, ITvInputHardware p2, int p3, int p4){
	Object v1 = this.mConnections.get(p1);
	ITvInputHardware v2 = v1.getHardwareLocked();
	boolean v3 = p0.checkUidChangedLocked(v1, p3, p4);
	ITvInputHardwareCallback v4 = v1.getCallbackLocked();
	IBinder v5 = v4.asBinder();
	boolean v6 = v5.unlinkToDeath(v1, 0);
	v1.resetLocked(0, 0, 0, 0, 0, 0);
	return;
}
-----
depth : 2
public ITvInputHardware getHardwareLocked(){
	return this.mHardware;
}
-----
depth : 2
public boolean checkUidChangedLocked(TvInputHardwareManager$Connection p1, int p2, int p3){
	return phiInstruction;
}
-----
depth : 2
public ITvInputHardwareCallback getCallbackLocked(){
	return this.mCallback;
}
-----
