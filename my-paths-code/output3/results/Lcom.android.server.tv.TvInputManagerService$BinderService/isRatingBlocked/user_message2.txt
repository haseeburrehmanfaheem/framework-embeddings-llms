The method isRatingBlocked has the following code snippet:

This is path 1 for the API with depth 2:
depth : 0
public boolean isRatingBlocked(String p1, int p2){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, "isRatingBlocked");
	long v4 = Binder.clearCallingIdentity();
	Object v5 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);
	PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6);
	TvContentRating v8 = TvContentRating.unflattenFromString(p1);
	boolean v9 = v7.isRatingBlocked(v8);
	Binder.restoreCallingIdentity(v4);
	return v9;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0);
	this.mUserStates.put(p1, v1);
	return phiInstruction;
}
-----
depth : 1
public boolean isRatingBlocked(TvContentRating p1){
	p0.loadIfNeeded();
	Iterator v2 = this.mBlockedRatings.iterator();
	boolean v3 = v2.hasNext();
	Object v4 = v2.next();
	boolean v5 = p1.contains(v4);
	return 1;
}
-----
depth : 2
public void loadIfNeeded(){
	p0.load();
	this.mLoaded = 1;
	return;
}
-----
depth : 2
public boolean contains(TvContentRating p1){
	Object v1 = Preconditions.checkNotNull(p1);
	String v2 = p1.getMainRating();
	boolean v3 = v2.equals(this.mRating);
	String v4 = p1.getDomain();
	boolean v5 = v4.equals(this.mDomain);
	String v6 = p1.getRatingSystem();
	boolean v7 = v6.equals(this.mRatingSystem);
	String v8 = p1.getMainRating();
	boolean v9 = v8.equals(this.mRating);
	List v10 = p0.getSubRatings();
	List v11 = p1.getSubRatings();
	boolean v12 = v10.containsAll(v11);
	return v12;
}
-----
This is path 2 for the API with depth 2:
depth : 0
public boolean isRatingBlocked(String p1, int p2){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, "isRatingBlocked");
	long v4 = Binder.clearCallingIdentity();
	Object v5 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);
	PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6);
	TvContentRating v8 = TvContentRating.unflattenFromString(p1);
	boolean v9 = v7.isRatingBlocked(v8);
	Binder.restoreCallingIdentity(v4);
	return v9;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	return phiInstruction;
}
-----
depth : 1
public boolean isRatingBlocked(TvContentRating p1){
	p0.loadIfNeeded();
	Iterator v2 = this.mBlockedRatings.iterator();
	boolean v3 = v2.hasNext();
	Object v4 = v2.next();
	boolean v5 = p1.contains(v4);
	return 1;
}
-----
depth : 2
public void loadIfNeeded(){
	p0.load();
	this.mLoaded = 1;
	return;
}
-----
depth : 2
public boolean contains(TvContentRating p1){
	Object v1 = Preconditions.checkNotNull(p1);
	String v2 = p1.getMainRating();
	boolean v3 = v2.equals(this.mRating);
	String v4 = p1.getDomain();
	boolean v5 = v4.equals(this.mDomain);
	String v6 = p1.getRatingSystem();
	boolean v7 = v6.equals(this.mRatingSystem);
	String v8 = p1.getMainRating();
	boolean v9 = v8.equals(this.mRating);
	List v10 = p0.getSubRatings();
	List v11 = p1.getSubRatings();
	boolean v12 = v10.containsAll(v11);
	return v12;
}
-----
This is path 3 for the API with depth 2:
depth : 0
public boolean isRatingBlocked(String p1, int p2){
	int v1 = Binder.getCallingPid();
	int v2 = Binder.getCallingUid();
	int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, "isRatingBlocked");
	long v4 = Binder.clearCallingIdentity();
	Object v5 = TvInputManagerService.-$$Nest$fgetmLock(this.this$0);
	TvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);
	PersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6);
	TvContentRating v8 = TvContentRating.unflattenFromString(p1);
	boolean v9 = v7.isRatingBlocked(v8);
	Binder.restoreCallingIdentity(v4);
	return v9;
}
-----
depth : 1
public int -$$Nest$mresolveCallingUserId(TvInputManagerService p1, int p2, int p3, int p4, String p5){
	int v1 = p1.resolveCallingUserId(p2, p3, p4, p5);
	return v1;
}
-----
depth : 2
public int resolveCallingUserId(int p1, int p2, int p3, String p4){
	int v1 = ActivityManager.handleIncomingUser(p1, p2, p3, 0, 0, p4, 0);
	return v1;
}
-----
depth : 1
public TvInputManagerService$UserState -$$Nest$mgetOrCreateUserStateLocked(TvInputManagerService p1, int p2){
	TvInputManagerService$UserState v1 = p1.getOrCreateUserStateLocked(p2);
	return v1;
}
-----
depth : 2
public TvInputManagerService$UserState getOrCreateUserStateLocked(int p1){
	TvInputManagerService$UserState v1 = p0.getUserStateLocked(p1);
	TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0);
	this.mUserStates.put(p1, v1);
	return phiInstruction;
}
-----
depth : 1
public boolean isRatingBlocked(TvContentRating p1){
	p0.loadIfNeeded();
	Iterator v2 = this.mBlockedRatings.iterator();
	boolean v3 = v2.hasNext();
	return 0;
}
-----
depth : 2
public void loadIfNeeded(){
	p0.load();
	this.mLoaded = 1;
	return;
}
-----

and the following sink code:
['int v3 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v1, v2, p2, "isRatingBlocked");\nTvInputManagerService$UserState v6 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v3);\nPersistentDataStore v7 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v6);\nTvContentRating v8 = TvContentRating.unflattenFromString(p1);\nboolean v9 = v7.isRatingBlocked(v8);', 'TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext,p1,0);\nthis.mUserStates.put(p1, v1);']

The method isRatingBlocked has the following similar APIs:

- API Name: unregisterCallback(Landroid/media/tv/ITvInputManagerCallback;I)V with Similarity Score: 0.9961750507354736
  - Access Control Level: NONE and the following code:
TvInputManagerService$UserState v1 = new TvInputManagerService$UserState(this.mContext, p1, 0);
this.mUserStates.put(p1, v1);

- API Name: removeBlockedRating(Ljava/lang/String;I)V with Similarity Score: 0.9731816053390503
  - Access Control Level: SYS_OR_SIG and the following code:
int v4 = TvInputManagerService.-$$Nest$mresolveCallingUserId(this.this$0, v2, v3, p2, "removeBlockedRating");
TvInputManagerService$UserState v7 = TvInputManagerService.-$$Nest$mgetOrCreateUserStateLocked(this.this$0, v4);
PersistentDataStore v8 = TvInputManagerService$UserState.-$$Nest$fgetpersistentDataStore(v7);
TvContentRating v9 = TvContentRating.unflattenFromString(p1);
v8.removeBlockedRating(v9);

