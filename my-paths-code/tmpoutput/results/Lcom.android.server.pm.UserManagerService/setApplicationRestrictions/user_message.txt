This is path 1 for the API with depth 2:
depth : 0
public void setApplicationRestrictions(String p1, Bundle p2, int p3){
	UserManagerService.checkSystemOrRoot("set application restrictions");
	p2.setDefusable(1);
	boolean v3 = p2.isEmpty();
	UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3);
	Intent v4 = new Intent("android.intent.action.APPLICATION_RESTRICTIONS_CHANGED");
	Intent v6 = v4.setPackage(p1);
	Intent v7 = v4.addFlags(1073741824);
	UserHandle v8 = UserHandle.of(p3);
	this.mContext.sendBroadcastAsUser(v4, v8);
	return;
}
-----
depth : 1
public void checkSystemOrRoot(String p1){
	return;
}
-----
depth : 1
public void writeApplicationRestrictionsLAr(String p1, Bundle p2, int p3){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(v1,v2);
	File v1 = Environment.getUserSystemDirectory(p3);
	String v2 = UserManagerService.packageToRestrictionsFileName(p1);
	UserManagerService.writeApplicationRestrictionsLAr(p2, v0);
	return;
}
-----
depth : 2
public String packageToRestrictionsFileName(String p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("res_");
	StringBuilder v3 = v0.append(p1);
	StringBuilder v4 = v0.append(".xml");
	String v5 = v0.toString();
	return v5;
}
-----
depth : 2
public void writeApplicationRestrictionsLAr(Bundle p1, AtomicFile p2){
	FileOutputStream v1 = p2.startWrite();
	TypedXmlSerializer v2 = Xml.resolveSerializer(v1);
	v2.startDocument(0, Boolean.TRUE);
	p2.failWrite(phiInstruction);
	int v5 = Slog.e("UserManagerService", "Error writing application restrictions list", phiInstruction);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public void setApplicationRestrictions(String p1, Bundle p2, int p3){
	UserManagerService.checkSystemOrRoot("set application restrictions");
	p2.setDefusable(1);
	boolean v3 = p2.isEmpty();
	UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3);
	Intent v4 = new Intent("android.intent.action.APPLICATION_RESTRICTIONS_CHANGED");
	Intent v6 = v4.setPackage(p1);
	Intent v7 = v4.addFlags(1073741824);
	UserHandle v8 = UserHandle.of(p3);
	this.mContext.sendBroadcastAsUser(v4, v8);
	return;
}
-----
depth : 1
public void checkSystemOrRoot(String p1){
	return;
}
-----
depth : 1
public void writeApplicationRestrictionsLAr(String p1, Bundle p2, int p3){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(v1,v2);
	File v1 = Environment.getUserSystemDirectory(p3);
	String v2 = UserManagerService.packageToRestrictionsFileName(p1);
	UserManagerService.writeApplicationRestrictionsLAr(p2, v0);
	return;
}
-----
depth : 2
public String packageToRestrictionsFileName(String p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("res_");
	StringBuilder v3 = v0.append(p1);
	StringBuilder v4 = v0.append(".xml");
	String v5 = v0.toString();
	return v5;
}
-----
depth : 2
public void writeApplicationRestrictionsLAr(Bundle p1, AtomicFile p2){
	FileOutputStream v1 = p2.startWrite();
	TypedXmlSerializer v2 = Xml.resolveSerializer(v1);
	v2.startDocument(0, Boolean.TRUE);
	p2.failWrite(phiInstruction);
	int v5 = Slog.e("UserManagerService", "Error writing application restrictions list", phiInstruction);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public void setApplicationRestrictions(String p1, Bundle p2, int p3){
	UserManagerService.checkSystemOrRoot("set application restrictions");
	p2.setDefusable(1);
	boolean v3 = p2.isEmpty();
	UserManagerService.writeApplicationRestrictionsLAr(p1, p2, p3);
	return;
}
-----
depth : 1
public void checkSystemOrRoot(String p1){
	return;
}
-----
depth : 1
public void writeApplicationRestrictionsLAr(String p1, Bundle p2, int p3){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(v1,v2);
	File v1 = Environment.getUserSystemDirectory(p3);
	String v2 = UserManagerService.packageToRestrictionsFileName(p1);
	UserManagerService.writeApplicationRestrictionsLAr(p2, v0);
	return;
}
-----
depth : 2
public String packageToRestrictionsFileName(String p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("res_");
	StringBuilder v3 = v0.append(p1);
	StringBuilder v4 = v0.append(".xml");
	String v5 = v0.toString();
	return v5;
}
-----
depth : 2
public void writeApplicationRestrictionsLAr(Bundle p1, AtomicFile p2){
	FileOutputStream v1 = p2.startWrite();
	TypedXmlSerializer v2 = Xml.resolveSerializer(v1);
	v2.startDocument(0, Boolean.TRUE);
	p2.failWrite(phiInstruction);
	int v5 = Slog.e("UserManagerService", "Error writing application restrictions list", phiInstruction);
	return;
}
-----
