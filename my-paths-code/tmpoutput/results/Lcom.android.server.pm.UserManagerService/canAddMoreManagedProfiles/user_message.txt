This is path 1 for the API with depth 2:
depth : 0
public boolean canAddMoreManagedProfiles(int p1, boolean p2){
	boolean v1 = p0.canAddMoreProfilesToUser("android.os.usertype.profile.MANAGED", p1, p2);
	return v1;
}
-----
depth : 1
public boolean canAddMoreProfilesToUser(String p1, int p2, boolean p3){
	int v1 = p0.getRemainingCreatableProfileCount(p1, p2, p3);
	return phiInstruction;
}
-----
depth : 2
public int getRemainingCreatableProfileCount(String p1, int p2, boolean p3){
	UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of profiles that can be added to the given user.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = v2.isEnabled();
	boolean v4 = v2.isManagedProfile();
	PackageManager v5 = this.mContext.getPackageManager();
	boolean v6 = v5.hasSystemFeature("android.software.managed_users");
	UserInfo v7 = p0.getUserInfoLU(p2);
	boolean v8 = v7.canHaveProfile();
	[I v9 = p0.getProfileIds(p2, p1, 0);
	int v10 = p0.getAliveUsersExcludingGuestsCountLU();
	int v11 = UserManager.getMaxSupportedUsers();
	int v12 = UserManagerService.getMaxUsersOfTypePerParent(v2);
	int v13 = Math.min(phiInstruction, (v12 - (v9.length - phiInstruction)));
	return 0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean canAddMoreManagedProfiles(int p1, boolean p2){
	boolean v1 = p0.canAddMoreProfilesToUser("android.os.usertype.profile.MANAGED", p1, p2);
	return v1;
}
-----
depth : 1
public boolean canAddMoreProfilesToUser(String p1, int p2, boolean p3){
	int v1 = p0.getRemainingCreatableProfileCount(p1, p2, p3);
	return phiInstruction;
}
-----
depth : 2
public int getRemainingCreatableProfileCount(String p1, int p2, boolean p3){
	UserManagerService.checkQueryOrCreateUsersPermission("get the remaining number of profiles that can be added to the given user.");
	Object v2 = this.mUserTypes.get(p1);
	boolean v3 = v2.isEnabled();
	boolean v4 = v2.isManagedProfile();
	PackageManager v5 = this.mContext.getPackageManager();
	boolean v6 = v5.hasSystemFeature("android.software.managed_users");
	UserInfo v7 = p0.getUserInfoLU(p2);
	boolean v8 = v7.canHaveProfile();
	[I v9 = p0.getProfileIds(p2, p1, 0);
	int v10 = p0.getAliveUsersExcludingGuestsCountLU();
	int v11 = UserManager.getMaxSupportedUsers();
	int v12 = UserManagerService.getMaxUsersOfTypePerParent(v2);
	int v13 = Math.min(phiInstruction, (v12 - (v9.length - phiInstruction)));
	return 0;
}
-----
