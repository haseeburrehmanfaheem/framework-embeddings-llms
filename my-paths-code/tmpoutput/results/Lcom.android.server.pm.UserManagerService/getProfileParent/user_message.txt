This is path 1 for the API with depth 2:
depth : 0
public UserInfo getProfileParent(int p1){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.INTERACT_ACROSS_USERS");
	UserInfo v2 = p0.getProfileParentLU(p1);
	return v2;
}
-----
depth : 1
public boolean hasManageUsersOrPermission(String p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(int p1){
	boolean v2 = UserManagerService.hasPermissionGranted("android.permission.MANAGE_USERS", p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId);
	return v2;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public UserInfo getProfileParent(int p1){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.INTERACT_ACROSS_USERS");
	UserInfo v2 = p0.getProfileParentLU(p1);
	return v2;
}
-----
depth : 1
public boolean hasManageUsersOrPermission(String p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(int p1){
	boolean v2 = UserManagerService.hasPermissionGranted("android.permission.MANAGE_USERS", p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId);
	return v2;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public UserInfo getProfileParent(int p1){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.INTERACT_ACROSS_USERS");
	UserInfo v2 = p0.getProfileParentLU(p1);
	return v2;
}
-----
depth : 1
public boolean hasManageUsersOrPermission(String p1){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	boolean v3 = UserManagerService.hasPermissionGranted(p1, v1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasManageUsersPermission(int p1){
	boolean v2 = UserManagerService.hasPermissionGranted("android.permission.MANAGE_USERS", p1);
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 1
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	return 0;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
