This is path 1 for the API with depth 2:
depth : 0
public boolean removeUser(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("removeUser u");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i("UserManagerService", v4);
	UserManagerService.checkCreateUsersPermission("Only the system can remove users");
	String v7 = p0.getUserRemovalRestriction(p1);
	int v8 = UserHandle.getCallingUserId();
	Bundle v9 = p0.getUserRestrictions(v8);
	boolean v10 = v9.getBoolean(v7, 0);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append("Cannot remove user. ");
	StringBuilder v13 = v10.append(v7);
	StringBuilder v14 = v10.append(" is enabled.");
	String v15 = v10.toString();
	int v16 = Slog.w("UserManagerService", v15);
	return 0;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public String getUserRemovalRestriction(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	boolean v2 = v1.isManagedProfile();
	return phiInstruction;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.userType);
	return v1;
}
-----
depth : 1
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 2
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle clone(Bundle p1){
	Bundle v0 = new Bundle(p1);
	return v0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean removeUser(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("removeUser u");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i("UserManagerService", v4);
	UserManagerService.checkCreateUsersPermission("Only the system can remove users");
	String v7 = p0.getUserRemovalRestriction(p1);
	int v8 = UserHandle.getCallingUserId();
	Bundle v9 = p0.getUserRestrictions(v8);
	boolean v10 = v9.getBoolean(v7, 0);
	boolean v11 = p0.removeUserUnchecked(p1);
	return v11;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public String getUserRemovalRestriction(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	boolean v2 = v1.isManagedProfile();
	return phiInstruction;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.userType);
	return v1;
}
-----
depth : 1
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 2
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle clone(Bundle p1){
	Bundle v0 = new Bundle(p1);
	return v0;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean removeUser(int p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append("removeUser u");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	int v5 = Slog.i("UserManagerService", v4);
	UserManagerService.checkCreateUsersPermission("Only the system can remove users");
	String v7 = p0.getUserRemovalRestriction(p1);
	int v8 = UserHandle.getCallingUserId();
	Bundle v9 = p0.getUserRestrictions(v8);
	boolean v10 = v9.getBoolean(v7, 0);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append("Cannot remove user. ");
	StringBuilder v13 = v10.append(v7);
	StringBuilder v14 = v10.append(" is enabled.");
	String v15 = v10.toString();
	int v16 = Slog.w("UserManagerService", v15);
	return 0;
}
-----
depth : 1
public void checkCreateUsersPermission(String p1){
	boolean v1 = UserManagerService.hasCreateUsersPermission();
	return;
}
-----
depth : 2
public boolean hasCreateUsersPermission(){
	boolean v1 = UserManagerService.hasManageUsersOrPermission("android.permission.CREATE_USERS");
	return v1;
}
-----
depth : 1
public String getUserRemovalRestriction(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	boolean v2 = v1.isManagedProfile();
	return phiInstruction;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.userType);
	return v1;
}
-----
depth : 1
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 2
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle clone(Bundle p1){
	Bundle v0 = new Bundle(p1);
	return v0;
}
-----
