This is path 1 for the API with depth 2:
depth : 0
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	int v2 = Binder.getCallingUid();
	p0.ensureCanModifyQuietMode(p1, v2, p3, phiInstruction, phiInstruction);
	PackageManagerInternal v4 = p0.getPackageManagerInternal();
	ComponentName v5 = v4.getSystemUiServiceComponent();
	String v6 = v5.getPackageName();
	boolean v7 = p1.equals(v6);
	long v8 = Binder.clearCallingIdentity();
	p0.setQuietModeEnabled(p3, 1, p4, p1);
	Binder.restoreCallingIdentity(v8);
	return 1;
}
-----
depth : 1
public void ensureCanModifyQuietMode(String p1, int p2, int p3, boolean p4, boolean p5){
	p0.verifyCallingPackage(p1, p2);
	boolean v2 = UserManagerService.hasManageUsersPermission();
	int v3 = UserHandle.getUserId(p2);
	boolean v4 = p0.isSameProfileGroupNoChecks(v3, p3);
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.MODIFY_QUIET_MODE", p2);
	Object v6 = LocalServices.getService(ShortcutServiceInterna.class);
	boolean v7 = v6.isForegroundDefaultLauncher(p1, p2);
	return;
}
-----
depth : 2
public void verifyCallingPackage(String p1, int p2){
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public PackageManagerInternal getPackageManagerInternal(){
	Object v1 = LocalServices.getService(PackageManagerInterna.class);
	this.mPmInternal = v1;
	return this.mPmInternal;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public void setQuietModeEnabled(int p1, boolean p2, IntentSender p3, String p4){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getProfileParentLU(p1);
	boolean v3 = v1.isManagedProfile();
	boolean v4 = v1.isQuietModeEnabled();
	UserInfo.flags = (UserInfo.flags ^ 128);
	UserManagerService$UserData v5 = p0.getUserDataLU(UserInfo.id);
	p0.writeUserLP(v5);
	IActivityManager v7 = ActivityManager.getService();
	int v8 = v7.stopUser(p1, 1, 0);
	Object v9 = LocalServices.getService(ActivityManagerInterna.class);
	v9.killForegroundAppsForUser(p1);
	p0.logQuietModeEnabled(p1, p2, p4);
	UserHandle v12 = v1.getUserHandle();
	UserHandle v13 = v2.getUserHandle();
	p0.broadcastProfileAvailabilityChanges(v12, v13, p2);
	return;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId);
	return v2;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.userType);
	return v1;
}
-----
depth : 2
public boolean isQuietModeEnabled(){
	return phiInstruction;
}
-----
depth : 2
public UserManagerService$UserData getUserDataLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return 0;
}
-----
depth : 2
public void writeUserLP(UserManagerService$UserData p1){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(this.mUsersDir,v4);
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(UserInfo.id);
	StringBuilder v3 = v0.append(".xml");
	String v4 = v0.toString();
	FileOutputStream v7 = v0.startWrite();
	p0.writeUserLP(p1, v7);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Error writing user info ");
	StringBuilder v11 = v8.append(UserInfo.id);
	String v12 = v8.toString();
	int v13 = Slog.e("UserManagerService", v12, phiInstruction);
	v0.failWrite(phiInstruction);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public void logQuietModeEnabled(int p1, boolean p2, String p3){
	Object v0 = new Object(2);
	Boolean v1 = Boolean.valueOf(p2);
	Slogf.i("UserManagerService", "requestQuietModeEnabled called by package %s, with enableQuietMode %b.", v0);
	UserManagerService$UserData v3 = p0.getUserDataLU(p1);
	long v4 = System.currentTimeMillis();
	long v5 = v3.getLastRequestQuietModeEnabledMillis();
	DevicePolicyEventLogger v6 = DevicePolicyEventLogger.createEvent(55);
	String v6 = new String(1);
	DevicePolicyEventLogger v7 = v6.setStrings(v6);
	DevicePolicyEventLogger v8 = v7.setBoolean(p2);
	DevicePolicyEventLogger v9 = v8.setTimePeriod((v4 - phiInstruction));
	v9.write();
	v3.setLastRequestQuietModeEnabledMillis(v4);
	return;
}
-----
depth : 2
public UserHandle getUserHandle(){
	UserHandle v1 = UserHandle.of(this.id);
	return v1;
}
-----
depth : 2
public UserHandle getUserHandle(){
	UserHandle v1 = UserHandle.of(this.id);
	return v1;
}
-----
depth : 2
public void broadcastProfileAvailabilityChanges(UserHandle p1, UserHandle p2, boolean p3){
	Intent v0 = new Intent();
	Intent v2 = v0.setAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
	Intent v3 = v0.putExtra("android.intent.extra.QUIET_MODE", p3);
	Intent v4 = v0.putExtra("android.intent.extra.USER", p1);
	int v5 = p1.getIdentifier();
	Intent v6 = v0.putExtra("android.intent.extra.user_handle", v5);
	DevicePolicyManagerInternal v7 = p0.getDevicePolicyManagerInternal();
	v7.broadcastIntentToManifestReceivers(v0, p2, 1);
	Intent v9 = v0.addFlags(1073741824);
	this.mContext.sendBroadcastAsUser(v0, p2);
	return;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	int v2 = Binder.getCallingUid();
	p0.ensureCanModifyQuietMode(p1, v2, p3, phiInstruction, phiInstruction);
	PackageManagerInternal v4 = p0.getPackageManagerInternal();
	ComponentName v5 = v4.getSystemUiServiceComponent();
	String v6 = v5.getPackageName();
	boolean v7 = p1.equals(v6);
	long v8 = Binder.clearCallingIdentity();
	p0.setQuietModeEnabled(p3, 1, p4, p1);
	Binder.restoreCallingIdentity(v8);
	return 1;
}
-----
depth : 1
public void ensureCanModifyQuietMode(String p1, int p2, int p3, boolean p4, boolean p5){
	p0.verifyCallingPackage(p1, p2);
	boolean v2 = UserManagerService.hasManageUsersPermission();
	int v3 = UserHandle.getUserId(p2);
	boolean v4 = p0.isSameProfileGroupNoChecks(v3, p3);
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.MODIFY_QUIET_MODE", p2);
	Object v6 = LocalServices.getService(ShortcutServiceInterna.class);
	boolean v7 = v6.isForegroundDefaultLauncher(p1, p2);
	return;
}
-----
depth : 2
public void verifyCallingPackage(String p1, int p2){
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public PackageManagerInternal getPackageManagerInternal(){
	Object v1 = LocalServices.getService(PackageManagerInterna.class);
	this.mPmInternal = v1;
	return this.mPmInternal;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public void setQuietModeEnabled(int p1, boolean p2, IntentSender p3, String p4){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getProfileParentLU(p1);
	boolean v3 = v1.isManagedProfile();
	boolean v4 = v1.isQuietModeEnabled();
	UserInfo.flags = (UserInfo.flags ^ 128);
	UserManagerService$UserData v5 = p0.getUserDataLU(UserInfo.id);
	p0.writeUserLP(v5);
	IActivityManager v7 = ActivityManager.getService();
	int v8 = v7.stopUser(p1, 1, 0);
	Object v9 = LocalServices.getService(ActivityManagerInterna.class);
	v9.killForegroundAppsForUser(p1);
	p0.logQuietModeEnabled(p1, p2, p4);
	UserHandle v12 = v1.getUserHandle();
	UserHandle v13 = v2.getUserHandle();
	p0.broadcastProfileAvailabilityChanges(v12, v13, p2);
	return;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId);
	return v2;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.userType);
	return v1;
}
-----
depth : 2
public boolean isQuietModeEnabled(){
	return phiInstruction;
}
-----
depth : 2
public UserManagerService$UserData getUserDataLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return v1;
}
-----
depth : 2
public void writeUserLP(UserManagerService$UserData p1){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(this.mUsersDir,v4);
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(UserInfo.id);
	StringBuilder v3 = v0.append(".xml");
	String v4 = v0.toString();
	FileOutputStream v7 = v0.startWrite();
	p0.writeUserLP(p1, v7);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Error writing user info ");
	StringBuilder v11 = v8.append(UserInfo.id);
	String v12 = v8.toString();
	int v13 = Slog.e("UserManagerService", v12, phiInstruction);
	v0.failWrite(phiInstruction);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public void logQuietModeEnabled(int p1, boolean p2, String p3){
	Object v0 = new Object(2);
	Boolean v1 = Boolean.valueOf(p2);
	Slogf.i("UserManagerService", "requestQuietModeEnabled called by package %s, with enableQuietMode %b.", v0);
	UserManagerService$UserData v3 = p0.getUserDataLU(p1);
	long v4 = System.currentTimeMillis();
	long v5 = v3.getLastRequestQuietModeEnabledMillis();
	DevicePolicyEventLogger v6 = DevicePolicyEventLogger.createEvent(55);
	String v6 = new String(1);
	DevicePolicyEventLogger v7 = v6.setStrings(v6);
	DevicePolicyEventLogger v8 = v7.setBoolean(p2);
	DevicePolicyEventLogger v9 = v8.setTimePeriod((v4 - phiInstruction));
	v9.write();
	v3.setLastRequestQuietModeEnabledMillis(v4);
	return;
}
-----
depth : 2
public UserHandle getUserHandle(){
	UserHandle v1 = UserHandle.of(this.id);
	return v1;
}
-----
depth : 2
public UserHandle getUserHandle(){
	UserHandle v1 = UserHandle.of(this.id);
	return v1;
}
-----
depth : 2
public void broadcastProfileAvailabilityChanges(UserHandle p1, UserHandle p2, boolean p3){
	Intent v0 = new Intent();
	Intent v2 = v0.setAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
	Intent v3 = v0.putExtra("android.intent.extra.QUIET_MODE", p3);
	Intent v4 = v0.putExtra("android.intent.extra.USER", p1);
	int v5 = p1.getIdentifier();
	Intent v6 = v0.putExtra("android.intent.extra.user_handle", v5);
	DevicePolicyManagerInternal v7 = p0.getDevicePolicyManagerInternal();
	v7.broadcastIntentToManifestReceivers(v0, p2, 1);
	Intent v9 = v0.addFlags(1073741824);
	this.mContext.sendBroadcastAsUser(v0, p2);
	return;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean requestQuietModeEnabled(String p1, boolean p2, int p3, IntentSender p4, int p5){
	Object v1 = Objects.requireNonNull(p1);
	int v2 = Binder.getCallingUid();
	p0.ensureCanModifyQuietMode(p1, v2, p3, phiInstruction, phiInstruction);
	PackageManagerInternal v4 = p0.getPackageManagerInternal();
	ComponentName v5 = v4.getSystemUiServiceComponent();
	String v6 = v5.getPackageName();
	boolean v7 = p1.equals(v6);
	long v8 = Binder.clearCallingIdentity();
	p0.setQuietModeEnabled(p3, 1, p4, p1);
	Binder.restoreCallingIdentity(v8);
	return 1;
}
-----
depth : 1
public void ensureCanModifyQuietMode(String p1, int p2, int p3, boolean p4, boolean p5){
	p0.verifyCallingPackage(p1, p2);
	boolean v2 = UserManagerService.hasManageUsersPermission();
	int v3 = UserHandle.getUserId(p2);
	boolean v4 = p0.isSameProfileGroupNoChecks(v3, p3);
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.MODIFY_QUIET_MODE", p2);
	Object v6 = LocalServices.getService(ShortcutServiceInterna.class);
	boolean v7 = v6.isForegroundDefaultLauncher(p1, p2);
	return;
}
-----
depth : 2
public void verifyCallingPackage(String p1, int p2){
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 2
public boolean isSameProfileGroupNoChecks(int p1, int p2){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(p2);
	return phiInstruction;
}
-----
depth : 2
public boolean hasPermissionGranted(String p1, int p2){
	return phiInstruction;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public PackageManagerInternal getPackageManagerInternal(){
	Object v1 = LocalServices.getService(PackageManagerInterna.class);
	this.mPmInternal = v1;
	return this.mPmInternal;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public void setQuietModeEnabled(int p1, boolean p2, IntentSender p3, String p4){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getProfileParentLU(p1);
	boolean v3 = v1.isManagedProfile();
	boolean v4 = v1.isQuietModeEnabled();
	UserInfo.flags = (UserInfo.flags ^ 128);
	UserManagerService$UserData v5 = p0.getUserDataLU(UserInfo.id);
	p0.writeUserLP(v5);
	IActivityManager v7 = ActivityManager.getService();
	int v8 = v7.stopUser(p1, 1, 0);
	Object v9 = LocalServices.getService(ActivityManagerInterna.class);
	v9.killForegroundAppsForUser(p1);
	p0.logQuietModeEnabled(p1, p2, p4);
	UserHandle v12 = v1.getUserHandle();
	UserHandle v13 = v2.getUserHandle();
	p0.broadcastProfileAvailabilityChanges(v12, v13, p2);
	return;
}
-----
depth : 2
public UserInfo getUserInfoLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return phiInstruction;
}
-----
depth : 2
public UserInfo getProfileParentLU(int p1){
	UserInfo v1 = p0.getUserInfoLU(p1);
	UserInfo v2 = p0.getUserInfoLU(UserInfo.profileGroupId);
	return v2;
}
-----
depth : 2
public boolean isManagedProfile(){
	boolean v1 = UserManager.isUserTypeManagedProfile(this.userType);
	return v1;
}
-----
depth : 2
public boolean isQuietModeEnabled(){
	return phiInstruction;
}
-----
depth : 2
public UserManagerService$UserData getUserDataLU(int p1){
	Object v1 = this.mUsers.get(p1);
	boolean v2 = this.mRemovingUserIds.get(p1);
	return 0;
}
-----
depth : 2
public void writeUserLP(UserManagerService$UserData p1){
	AtomicFile v0 = new AtomicFile(v0);
	File v0 = new File(this.mUsersDir,v4);
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(UserInfo.id);
	StringBuilder v3 = v0.append(".xml");
	String v4 = v0.toString();
	FileOutputStream v7 = v0.startWrite();
	p0.writeUserLP(p1, v7);
	StringBuilder v8 = new StringBuilder();
	StringBuilder v10 = v8.append("Error writing user info ");
	StringBuilder v11 = v8.append(UserInfo.id);
	String v12 = v8.toString();
	int v13 = Slog.e("UserManagerService", v12, phiInstruction);
	v0.failWrite(phiInstruction);
	return;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 2
public void logQuietModeEnabled(int p1, boolean p2, String p3){
	Object v0 = new Object(2);
	Boolean v1 = Boolean.valueOf(p2);
	Slogf.i("UserManagerService", "requestQuietModeEnabled called by package %s, with enableQuietMode %b.", v0);
	UserManagerService$UserData v3 = p0.getUserDataLU(p1);
	long v4 = System.currentTimeMillis();
	long v5 = v3.getLastRequestQuietModeEnabledMillis();
	DevicePolicyEventLogger v6 = DevicePolicyEventLogger.createEvent(55);
	String v6 = new String(1);
	DevicePolicyEventLogger v7 = v6.setStrings(v6);
	DevicePolicyEventLogger v8 = v7.setBoolean(p2);
	DevicePolicyEventLogger v9 = v8.setTimePeriod((v4 - phiInstruction));
	v9.write();
	v3.setLastRequestQuietModeEnabledMillis(v4);
	return;
}
-----
depth : 2
public UserHandle getUserHandle(){
	UserHandle v1 = UserHandle.of(this.id);
	return v1;
}
-----
depth : 2
public UserHandle getUserHandle(){
	UserHandle v1 = UserHandle.of(this.id);
	return v1;
}
-----
depth : 2
public void broadcastProfileAvailabilityChanges(UserHandle p1, UserHandle p2, boolean p3){
	Intent v0 = new Intent();
	Intent v2 = v0.setAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
	Intent v3 = v0.putExtra("android.intent.extra.QUIET_MODE", p3);
	Intent v4 = v0.putExtra("android.intent.extra.USER", p1);
	int v5 = p1.getIdentifier();
	Intent v6 = v0.putExtra("android.intent.extra.user_handle", v5);
	DevicePolicyManagerInternal v7 = p0.getDevicePolicyManagerInternal();
	v7.broadcastIntentToManifestReceivers(v0, p2, 1);
	Intent v9 = v0.addFlags(1073741824);
	this.mContext.sendBroadcastAsUser(v0, p2);
	return;
}
-----
