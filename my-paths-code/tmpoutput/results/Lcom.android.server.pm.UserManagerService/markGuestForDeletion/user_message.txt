This is path 1 for the API with depth 2:
depth : 0
public boolean markGuestForDeletion(int p1){
	UserManagerService.checkManageUsersPermission("Only the system can remove users");
	int v2 = UserHandle.getCallingUserId();
	Bundle v3 = p0.getUserRestrictions(v2);
	boolean v4 = v3.getBoolean("no_remove_user", 0);
	long v5 = Binder.clearCallingIdentity();
	Object v6 = this.mUsers.get(p1);
	boolean v7 = this.mRemovingUserIds.get(p1);
	boolean v8 = UserManagerService$UserData.info.isGuest();
	UserInfo.guestToRemove = 1;
	UserInfo.flags = (UserInfo.flags | 64);
	p0.writeUserLP(v6);
	Binder.restoreCallingIdentity(v5);
	return 1;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 2
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle clone(Bundle p1){
	Bundle v0 = new Bundle(p1);
	return v0;
}
-----

This is path 2 for the API with depth 2:
depth : 0
public boolean markGuestForDeletion(int p1){
	UserManagerService.checkManageUsersPermission("Only the system can remove users");
	int v2 = UserHandle.getCallingUserId();
	Bundle v3 = p0.getUserRestrictions(v2);
	boolean v4 = v3.getBoolean("no_remove_user", 0);
	long v5 = Binder.clearCallingIdentity();
	Object v6 = this.mUsers.get(p1);
	boolean v7 = this.mRemovingUserIds.get(p1);
	boolean v8 = UserManagerService$UserData.info.isGuest();
	UserInfo.guestToRemove = 1;
	UserInfo.flags = (UserInfo.flags | 64);
	p0.writeUserLP(v6);
	Binder.restoreCallingIdentity(v5);
	return 1;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 2
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	return;
}
-----
depth : 2
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle clone(Bundle p1){
	Bundle v0 = new Bundle(p1);
	return v0;
}
-----

This is path 3 for the API with depth 2:
depth : 0
public boolean markGuestForDeletion(int p1){
	UserManagerService.checkManageUsersPermission("Only the system can remove users");
	int v2 = UserHandle.getCallingUserId();
	Bundle v3 = p0.getUserRestrictions(v2);
	boolean v4 = v3.getBoolean("no_remove_user", 0);
	long v5 = Binder.clearCallingIdentity();
	Object v6 = this.mUsers.get(p1);
	boolean v7 = this.mRemovingUserIds.get(p1);
	boolean v8 = UserManagerService$UserData.info.isGuest();
	Binder.restoreCallingIdentity(v5);
	return 0;
}
-----
depth : 1
public void checkManageUsersPermission(String p1){
	boolean v1 = UserManagerService.hasManageUsersPermission();
	return;
}
-----
depth : 2
public boolean hasManageUsersPermission(){
	int v1 = Binder.getCallingUid();
	boolean v2 = UserManagerService.hasManageUsersPermission(v1);
	return v2;
}
-----
depth : 1
public Bundle getUserRestrictions(int p1){
	p0.checkManageOrInteractPermissionIfCallerInOtherProfileGroup(p1, "getUserRestrictions");
	Bundle v2 = p0.getEffectiveUserRestrictions(p1);
	Bundle v3 = BundleUtils.clone(v2);
	return v3;
}
-----
depth : 2
public void checkManageOrInteractPermissionIfCallerInOtherProfileGroup(int p1, String p2){
	boolean v2 = p0.isSameProfileGroupNoChecks(v1, p1);
	boolean v3 = UserManagerService.hasManageUsersPermission();
	int v4 = Binder.getCallingUid();
	boolean v5 = UserManagerService.hasPermissionGranted("android.permission.INTERACT_ACROSS_USERS", v4);
	return;
}
-----
depth : 2
public Bundle getEffectiveUserRestrictions(int p1){
	Bundle v1 = this.mCachedEffectiveUserRestrictions.getRestrictions(p1);
	Bundle v2 = p0.computeEffectiveUserRestrictionsLR(p1);
	boolean v3 = this.mCachedEffectiveUserRestrictions.updateRestrictions(p1, v2);
	return phiInstruction;
}
-----
depth : 2
public Bundle clone(Bundle p1){
	Bundle v0 = new Bundle(p1);
	return v0;
}
-----
