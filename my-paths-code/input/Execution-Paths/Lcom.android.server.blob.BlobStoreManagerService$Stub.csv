"Class","Method","Depth","Trace Instruction(s) ...","Java Code Representation","Access Control Level"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseAllLeases(Ljava/lang/String;)V","0","8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 8,7,2 @12 exception:9,
10 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
12 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 10,7,2 @17 exception:11,
conditional branch(eq, to iindex=-1) 12,13,
30 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseAllLeasesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 30,7,2 @25 exception:31,
return,","depth : 0
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, ""packageName must not be null"");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
	BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseAllLeases(Ljava/lang/String;)V","1","8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 8,7,2 @12 exception:9,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
10 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
12 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 10,7,2 @17 exception:11,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 12,13,
30 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseAllLeasesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 30,7,2 @25 exception:31,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseAllLeasesInternal(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,","depth : 0
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, ""packageName must not be null"");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
	BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1);
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public void -$$Nest$mreleaseAllLeasesInternal(BlobStoreManagerService p1, int p2, String p3){
	p1.releaseAllLeasesInternal(p2, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseAllLeases(Ljava/lang/String;)V","2","8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 8,7,2 @12 exception:9,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
10 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
12 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 10,7,2 @17 exception:11,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 12,13,
30 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseAllLeasesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 30,7,2 @25 exception:31,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseAllLeasesInternal(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
4 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
6 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda12>@5,
10 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 10,11,
13 = new <Application,Ljava/lang/StringBuilder>@22,
monitorexit 4,
return,
return,
return,","depth : 0
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, ""packageName must not be null"");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
	BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1);
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$mreleaseAllLeasesInternal(BlobStoreManagerService p1, int p2, String p3){
	p1.releaseAllLeasesInternal(p2, p3);
	return;
}
-----
depth : 2
public void releaseAllLeasesInternal(int p1, String p2){
	BlobStoreManagerService$$ExternalSyntheticLambda12 v0 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p2,p1);
	this.mBlobsMap.forEach(v0);
	p0.writeBlobsInfoAsync();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Release all leases associated with pkg="");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", uid="");
	StringBuilder v8 = v3.append(p1);
	String v9 = v3.toString();
	int v10 = Slog.v(""BlobStore"", v9);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseAllLeases(Ljava/lang/String;)V","2","8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 8,7,2 @12 exception:9,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
10 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
12 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 10,7,2 @17 exception:11,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 12,13,
30 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseAllLeasesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 30,7,2 @25 exception:31,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseAllLeasesInternal(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
4 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
6 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda12>@5,
10 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 10,11,
13 = new <Application,Ljava/lang/StringBuilder>@22,
monitorexit 4,
return,
return,
return,","depth : 0
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, ""packageName must not be null"");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
	BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1);
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$mreleaseAllLeasesInternal(BlobStoreManagerService p1, int p2, String p3){
	p1.releaseAllLeasesInternal(p2, p3);
	return;
}
-----
depth : 2
public void releaseAllLeasesInternal(int p1, String p2){
	BlobStoreManagerService$$ExternalSyntheticLambda12 v0 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p2,p1);
	this.mBlobsMap.forEach(v0);
	p0.writeBlobsInfoAsync();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Release all leases associated with pkg="");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", uid="");
	StringBuilder v8 = v3.append(p1);
	String v9 = v3.toString();
	int v10 = Slog.v(""BlobStore"", v9);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseAllLeases(Ljava/lang/String;)V","2","8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 8,7,2 @12 exception:9,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
10 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
12 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 10,7,2 @17 exception:11,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 12,13,
30 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseAllLeasesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 30,7,2 @25 exception:31,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseAllLeasesInternal(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
4 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
6 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda12>@5,
10 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 4,
return,
return,
return,","depth : 0
public void releaseAllLeases(String p1){
	Object v1 = Objects.requireNonNull(p1, ""packageName must not be null"");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	boolean v4 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v2, p1);
	BlobStoreManagerService.-$$Nest$mreleaseAllLeasesInternal(this.this$0, v2, p1);
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$mreleaseAllLeasesInternal(BlobStoreManagerService p1, int p2, String p3){
	p1.releaseAllLeasesInternal(p2, p3);
	return;
}
-----
depth : 2
public void releaseAllLeasesInternal(int p1, String p2){
	BlobStoreManagerService$$ExternalSyntheticLambda12 v0 = new BlobStoreManagerService$$ExternalSyntheticLambda12(p2,p1);
	this.mBlobsMap.forEach(v0);
	p0.writeBlobsInfoAsync();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","waitForIdle(Landroid/os/RemoteCallback;)V","0","22 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
24 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$fgetmHandler(Lcom/android/server/blob/BlobStoreManagerService;)Landroid/os/Handler; > 22 @40 exception:23,
25 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$Stub$$ExternalSyntheticLambda0>@44,
return,","depth : 0
public void waitForIdle(RemoteCallback p1){
	Handler v9 = BlobStoreManagerService.-$$Nest$fgetmHandler(this.this$0);
	BlobStoreManagerService$Stub$$ExternalSyntheticLambda0 v9 = new BlobStoreManagerService$Stub$$ExternalSyntheticLambda0(p0,p1);
	boolean v11 = v9.post(v9);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","waitForIdle(Landroid/os/RemoteCallback;)V","1","22 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
24 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$fgetmHandler(Lcom/android/server/blob/BlobStoreManagerService;)Landroid/os/Handler; > 22 @40 exception:23,
2 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mHandler, <Application,Landroid/os/Handler> > 1,
return 2,
25 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$Stub$$ExternalSyntheticLambda0>@44,
return,","depth : 0
public void waitForIdle(RemoteCallback p1){
	Handler v9 = BlobStoreManagerService.-$$Nest$fgetmHandler(this.this$0);
	BlobStoreManagerService$Stub$$ExternalSyntheticLambda0 v9 = new BlobStoreManagerService$Stub$$ExternalSyntheticLambda0(p0,p1);
	boolean v11 = v9.post(v9);
	return;
}
-----
depth : 1
public Handler -$$Nest$fgetmHandler(BlobStoreManagerService p1){
	return this.mHandler;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;","0","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 35,2,12,3 @33 exception:36,
return 37,","depth : 0
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, openBlobInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 1,2,3,4 @0 exception:5,
return 6,
return 37,","depth : 0
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public ParcelFileDescriptor -$$Nest$mopenBlobInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	ParcelFileDescriptor v1 = p1.openBlobInternal(p2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, openBlobInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 1,2,3,4 @0 exception:5,
return 6,
return 37,","depth : 0
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public ParcelFileDescriptor -$$Nest$mopenBlobInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	ParcelFileDescriptor v1 = p1.openBlobInternal(p2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, openBlobInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(ne, to iindex=-1) 12,10,
monitorexit 5,
return 21,
return 6,
return 37,","depth : 0
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public ParcelFileDescriptor -$$Nest$mopenBlobInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	ParcelFileDescriptor v1 = p1.openBlobInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public ParcelFileDescriptor openBlobInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	long v3 = v1.getBlobId();
	long v4 = v1.getSize();
	FrameworkStatsLog.write(300, p2, v3, v4, 1);
	ParcelFileDescriptor v6 = v1.openForRead(p3, p2);
	return v6;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, openBlobInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(ne, to iindex=-1) 12,10,
monitorexit 5,
return 21,
return 6,
return 37,","depth : 0
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public ParcelFileDescriptor -$$Nest$mopenBlobInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	ParcelFileDescriptor v1 = p1.openBlobInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public ParcelFileDescriptor openBlobInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	long v3 = v1.getBlobId();
	long v4 = v1.getSize();
	FrameworkStatsLog.write(300, p2, v3, v4, 1);
	ParcelFileDescriptor v6 = v1.openForRead(p3, p2);
	return v6;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","openBlob(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, openBlobInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/os/ParcelFileDescriptor; > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(ne, to iindex=-1) 12,10,
monitorexit 5,
return 21,
return 6,
return 37,","depth : 0
public ParcelFileDescriptor openBlob(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	ParcelFileDescriptor v7 = BlobStoreManagerService.-$$Nest$mopenBlobInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public ParcelFileDescriptor -$$Nest$mopenBlobInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	ParcelFileDescriptor v1 = p1.openBlobInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public ParcelFileDescriptor openBlobInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	long v3 = v1.getBlobId();
	long v4 = v1.getSize();
	FrameworkStatsLog.write(300, p2, v3, v4, 1);
	ParcelFileDescriptor v6 = v1.openForRead(p3, p2);
	return v6;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession;","0","4 = conversion(F) 2,
5 = new <Application,Ljava/lang/StringBuilder>@1,
21 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 21,20,3 @34 exception:22,
23 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
25 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;JILjava/lang/String;)Lcom/android/server/blob/BlobStoreSession; > 23,2,20,3 @39 exception:24,
return 25,","depth : 0
public IBlobStoreSession openSession(long p1, String p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""sessionId must be positive: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	float v5 = Preconditions.checkArgumentPositive(p1, v4);
	Object v6 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v7 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v7, p2);
	BlobStoreSession v9 = BlobStoreManagerService.-$$Nest$mopenSessionInternal(this.this$0, p1, v7, p2);
	return v9;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession;","1","4 = conversion(F) 2,
5 = new <Application,Ljava/lang/StringBuilder>@1,
21 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 21,20,3 @34 exception:22,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
23 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
25 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;JILjava/lang/String;)Lcom/android/server/blob/BlobStoreSession; > 23,2,20,3 @39 exception:24,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, openSessionInternal(JILjava/lang/String;)Lcom/android/server/blob/BlobStoreSession; > 1,2,3,4 @0 exception:5,
return 6,
return 25,","depth : 0
public IBlobStoreSession openSession(long p1, String p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""sessionId must be positive: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	float v5 = Preconditions.checkArgumentPositive(p1, v4);
	Object v6 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v7 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v7, p2);
	BlobStoreSession v9 = BlobStoreManagerService.-$$Nest$mopenSessionInternal(this.this$0, p1, v7, p2);
	return v9;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public BlobStoreSession -$$Nest$mopenSessionInternal(BlobStoreManagerService p1, long p2, int p3, String p4){
	BlobStoreSession v1 = p1.openSessionInternal(p2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","openSession(JLjava/lang/String;)Landroid/app/blob/IBlobStoreSession;","2","4 = conversion(F) 2,
5 = new <Application,Ljava/lang/StringBuilder>@1,
21 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 21,20,3 @34 exception:22,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
23 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
25 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mopenSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;JILjava/lang/String;)Lcom/android/server/blob/BlobStoreSession; > 23,2,20,3 @39 exception:24,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, openSessionInternal(JILjava/lang/String;)Lcom/android/server/blob/BlobStoreSession; > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
12 = checkcast <Application,Lcom/android/server/blob/BlobStoreSession>11 <Application,Lcom/android/server/blob/BlobStoreSession>,
conditional branch(eq, to iindex=-1) 12,13,
conditional branch(eq, to iindex=-1) 15,13,
conditional branch(ne, to iindex=-1) 17,13,
monitorexit 5,
return 12,
return 6,
return 25,","depth : 0
public IBlobStoreSession openSession(long p1, String p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""sessionId must be positive: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	float v5 = Preconditions.checkArgumentPositive(p1, v4);
	Object v6 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v7 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v7, p2);
	BlobStoreSession v9 = BlobStoreManagerService.-$$Nest$mopenSessionInternal(this.this$0, p1, v7, p2);
	return v9;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public BlobStoreSession -$$Nest$mopenSessionInternal(BlobStoreManagerService p1, long p2, int p3, String p4){
	BlobStoreSession v1 = p1.openSessionInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public BlobStoreSession openSessionInternal(long p1, int p2, String p3){
	int v1 = UserHandle.getUserId(p2);
	LongSparseArray v2 = p0.getUserSessionsLocked(v1);
	Object v3 = v2.get(p1);
	boolean v4 = v3.hasAccess(p2, p3);
	boolean v5 = v3.isFinalized();
	v3.open();
	return v3;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","queryBlobsForUser(I)Ljava/util/List;","0","conditional branch(ne, to iindex=-1) 2,9,
12 = phi  2,11,
15 = load_metadata: <Application,Landroid/app/ActivityManagerInternal>, <Primordial,Ljava/lang/Class>,
17 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 15 @17 exception:16,
18 = checkcast <Application,Landroid/app/ActivityManagerInternal>17 <Application,Landroid/app/ActivityManagerInternal>,
20 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
22 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mqueryBlobsForUserInternal(Lcom/android/server/blob/BlobStoreManagerService;I)Ljava/util/List; > 20,12 @28 exception:21,
return 22,","depth : 0
public List queryBlobsForUser(int p1){
	int v2 = ActivityManager.getCurrentUser();
	Object v3 = LocalServices.getService(ActivityManagerInterna.class);
	v3.ensureNotSpecialUser(phiInstruction);
	List v5 = BlobStoreManagerService.-$$Nest$mqueryBlobsForUserInternal(this.this$0, phiInstruction);
	return v5;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","queryBlobsForUser(I)Ljava/util/List;","1","conditional branch(ne, to iindex=-1) 2,9,
12 = phi  2,11,
15 = load_metadata: <Application,Landroid/app/ActivityManagerInternal>, <Primordial,Ljava/lang/Class>,
17 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 15 @17 exception:16,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
18 = checkcast <Application,Landroid/app/ActivityManagerInternal>17 <Application,Landroid/app/ActivityManagerInternal>,
20 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
22 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mqueryBlobsForUserInternal(Lcom/android/server/blob/BlobStoreManagerService;I)Ljava/util/List; > 20,12 @28 exception:21,
4 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, queryBlobsForUserInternal(I)Ljava/util/List; > 1,2 @0 exception:3,
return 4,
return 22,","depth : 0
public List queryBlobsForUser(int p1){
	int v2 = ActivityManager.getCurrentUser();
	Object v3 = LocalServices.getService(ActivityManagerInterna.class);
	v3.ensureNotSpecialUser(phiInstruction);
	List v5 = BlobStoreManagerService.-$$Nest$mqueryBlobsForUserInternal(this.this$0, phiInstruction);
	return v5;
}
-----
depth : 1
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public List -$$Nest$mqueryBlobsForUserInternal(BlobStoreManagerService p1, int p2){
	List v1 = p1.queryBlobsForUserInternal(p2);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","queryBlobsForUser(I)Ljava/util/List;","1","conditional branch(ne, to iindex=-1) 2,9,
12 = phi  2,11,
15 = load_metadata: <Application,Landroid/app/ActivityManagerInternal>, <Primordial,Ljava/lang/Class>,
17 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 15 @17 exception:16,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
18 = checkcast <Application,Landroid/app/ActivityManagerInternal>17 <Application,Landroid/app/ActivityManagerInternal>,
20 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
22 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mqueryBlobsForUserInternal(Lcom/android/server/blob/BlobStoreManagerService;I)Ljava/util/List; > 20,12 @28 exception:21,
4 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, queryBlobsForUserInternal(I)Ljava/util/List; > 1,2 @0 exception:3,
return 4,
return 22,","depth : 0
public List queryBlobsForUser(int p1){
	Object v2 = LocalServices.getService(ActivityManagerInterna.class);
	v2.ensureNotSpecialUser(phiInstruction);
	List v4 = BlobStoreManagerService.-$$Nest$mqueryBlobsForUserInternal(this.this$0, phiInstruction);
	return v4;
}
-----
depth : 1
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public List -$$Nest$mqueryBlobsForUserInternal(BlobStoreManagerService p1, int p2){
	List v1 = p1.queryBlobsForUserInternal(p2);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","queryBlobsForUser(I)Ljava/util/List;","2","conditional branch(ne, to iindex=-1) 2,9,
12 = phi  2,11,
15 = load_metadata: <Application,Landroid/app/ActivityManagerInternal>, <Primordial,Ljava/lang/Class>,
17 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 15 @17 exception:16,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
18 = checkcast <Application,Landroid/app/ActivityManagerInternal>17 <Application,Landroid/app/ActivityManagerInternal>,
20 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
22 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mqueryBlobsForUserInternal(Lcom/android/server/blob/BlobStoreManagerService;I)Ljava/util/List; > 20,12 @28 exception:21,
4 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, queryBlobsForUserInternal(I)Ljava/util/List; > 1,2 @0 exception:3,
3 = new <Application,Ljava/util/ArrayList>@0,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = new <Application,Landroid/util/ArrayMap>@8,
8 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda9>@13,
10 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda10>@18,
monitorexit 5,
return 3,
return 4,
return 22,","depth : 0
public List queryBlobsForUser(int p1){
	int v2 = ActivityManager.getCurrentUser();
	Object v3 = LocalServices.getService(ActivityManagerInterna.class);
	v3.ensureNotSpecialUser(phiInstruction);
	List v5 = BlobStoreManagerService.-$$Nest$mqueryBlobsForUserInternal(this.this$0, phiInstruction);
	return v5;
}
-----
depth : 1
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public List -$$Nest$mqueryBlobsForUserInternal(BlobStoreManagerService p1, int p2){
	List v1 = p1.queryBlobsForUserInternal(p2);
	return v1;
}
-----
depth : 2
public List queryBlobsForUserInternal(int p1){
	ArrayList v0 = new ArrayList();
	ArrayMap v1 = new ArrayMap();
	BlobStoreManagerService$$ExternalSyntheticLambda9 v2 = new BlobStoreManagerService$$ExternalSyntheticLambda9(p0,v1,p1);
	BlobStoreManagerService$$ExternalSyntheticLambda10 v3 = new BlobStoreManagerService$$ExternalSyntheticLambda10(p1,v2,v0);
	p0.forEachBlobLocked(v3);
	return v0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","queryBlobsForUser(I)Ljava/util/List;","2","conditional branch(ne, to iindex=-1) 2,9,
12 = phi  2,11,
15 = load_metadata: <Application,Landroid/app/ActivityManagerInternal>, <Primordial,Ljava/lang/Class>,
17 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 15 @17 exception:16,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
18 = checkcast <Application,Landroid/app/ActivityManagerInternal>17 <Application,Landroid/app/ActivityManagerInternal>,
20 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
22 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mqueryBlobsForUserInternal(Lcom/android/server/blob/BlobStoreManagerService;I)Ljava/util/List; > 20,12 @28 exception:21,
4 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, queryBlobsForUserInternal(I)Ljava/util/List; > 1,2 @0 exception:3,
3 = new <Application,Ljava/util/ArrayList>@0,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = new <Application,Landroid/util/ArrayMap>@8,
8 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda9>@13,
10 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda10>@18,
monitorexit 5,
return 3,
return 4,
return 22,","depth : 0
public List queryBlobsForUser(int p1){
	Object v2 = LocalServices.getService(ActivityManagerInterna.class);
	v2.ensureNotSpecialUser(phiInstruction);
	List v4 = BlobStoreManagerService.-$$Nest$mqueryBlobsForUserInternal(this.this$0, phiInstruction);
	return v4;
}
-----
depth : 1
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
depth : 1
public List -$$Nest$mqueryBlobsForUserInternal(BlobStoreManagerService p1, int p2){
	List v1 = p1.queryBlobsForUserInternal(p2);
	return v1;
}
-----
depth : 2
public List queryBlobsForUserInternal(int p1){
	ArrayList v0 = new ArrayList();
	ArrayMap v1 = new ArrayMap();
	BlobStoreManagerService$$ExternalSyntheticLambda9 v2 = new BlobStoreManagerService$$ExternalSyntheticLambda9(p0,v1,p1);
	BlobStoreManagerService$$ExternalSyntheticLambda10 v3 = new BlobStoreManagerService$$ExternalSyntheticLambda10(p1,v2,v0);
	p0.forEachBlobLocked(v3);
	return v0;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","abandonSession(JLjava/lang/String;)V","0","4 = conversion(F) 2,
5 = new <Application,Ljava/lang/StringBuilder>@1,
21 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 21,20,3 @34 exception:22,
23 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mabandonSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;JILjava/lang/String;)V > 23,2,20,3 @39 exception:24,
return,","depth : 0
public void abandonSession(long p1, String p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""sessionId must be positive: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	float v5 = Preconditions.checkArgumentPositive(p1, v4);
	Object v6 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v7 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v7, p2);
	BlobStoreManagerService.-$$Nest$mabandonSessionInternal(this.this$0, p1, v7, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","abandonSession(JLjava/lang/String;)V","1","4 = conversion(F) 2,
5 = new <Application,Ljava/lang/StringBuilder>@1,
21 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 21,20,3 @34 exception:22,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
23 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mabandonSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;JILjava/lang/String;)V > 23,2,20,3 @39 exception:24,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, abandonSessionInternal(JILjava/lang/String;)V > 1,2,3,4 @0 exception:5,
return,
return,","depth : 0
public void abandonSession(long p1, String p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""sessionId must be positive: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	float v5 = Preconditions.checkArgumentPositive(p1, v4);
	Object v6 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v7 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v7, p2);
	BlobStoreManagerService.-$$Nest$mabandonSessionInternal(this.this$0, p1, v7, p2);
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public void -$$Nest$mabandonSessionInternal(BlobStoreManagerService p1, long p2, int p3, String p4){
	p1.abandonSessionInternal(p2, p3, p4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","abandonSession(JLjava/lang/String;)V","2","4 = conversion(F) 2,
5 = new <Application,Ljava/lang/StringBuilder>@1,
21 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 21,20,3 @34 exception:22,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
23 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mabandonSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;JILjava/lang/String;)V > 23,2,20,3 @39 exception:24,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, abandonSessionInternal(JILjava/lang/String;)V > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
10 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 10,11,
13 = new <Application,Ljava/lang/StringBuilder>@19,
monitorexit 5,
return,
return,
return,","depth : 0
public void abandonSession(long p1, String p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""sessionId must be positive: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	float v5 = Preconditions.checkArgumentPositive(p1, v4);
	Object v6 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v7 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v7, p2);
	BlobStoreManagerService.-$$Nest$mabandonSessionInternal(this.this$0, p1, v7, p2);
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public void -$$Nest$mabandonSessionInternal(BlobStoreManagerService p1, long p2, int p3, String p4){
	p1.abandonSessionInternal(p2, p3, p4);
	return;
}
-----
depth : 2
public void abandonSessionInternal(long p1, int p2, String p3){
	BlobStoreSession v1 = p0.openSessionInternal(p1, p2, p3);
	v1.open();
	v1.abandon();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Abandoned session with id "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append(""; callingUid="");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", callingPackage="");
	StringBuilder v10 = v3.append(p3);
	String v11 = v3.toString();
	int v12 = Slog.v(""BlobStore"", v11);
	p0.writeBlobSessionsAsync();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","abandonSession(JLjava/lang/String;)V","2","4 = conversion(F) 2,
5 = new <Application,Ljava/lang/StringBuilder>@1,
21 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 21,20,3 @34 exception:22,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
23 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mabandonSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;JILjava/lang/String;)V > 23,2,20,3 @39 exception:24,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, abandonSessionInternal(JILjava/lang/String;)V > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
10 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 10,11,
monitorexit 5,
return,
return,
return,","depth : 0
public void abandonSession(long p1, String p2){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""sessionId must be positive: "");
	StringBuilder v3 = v0.append(p1);
	String v4 = v0.toString();
	float v5 = Preconditions.checkArgumentPositive(p1, v4);
	Object v6 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v7 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v7, p2);
	BlobStoreManagerService.-$$Nest$mabandonSessionInternal(this.this$0, p1, v7, p2);
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public void -$$Nest$mabandonSessionInternal(BlobStoreManagerService p1, long p2, int p3, String p4){
	p1.abandonSessionInternal(p2, p3, p4);
	return;
}
-----
depth : 2
public void abandonSessionInternal(long p1, int p2, String p3){
	BlobStoreSession v1 = p0.openSessionInternal(p1, p2, p3);
	v1.open();
	v1.abandon();
	p0.writeBlobSessionsAsync();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V","0","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 35,2,12,3 @33 exception:36,
return,","depth : 0
public void releaseLease(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 35,2,12,3 @33 exception:36,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 1,2,3,4 @0 exception:5,
return,
return,","depth : 0
public void releaseLease(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public void -$$Nest$mreleaseLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	p1.releaseLeaseInternal(p2, p3, p4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 35,2,12,3 @33 exception:36,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 1,2,3,4 @0 exception:5,
return,
return,","depth : 0
public void releaseLease(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public void -$$Nest$mreleaseLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	p1.releaseLeaseInternal(p2, p3, p4);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 35,2,12,3 @33 exception:36,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 12,10,
37 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 37,10,
39 = new <Application,Ljava/lang/StringBuilder>@28,
conditional branch(ne, to iindex=-1) 63,10,
64 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mHandler, <Application,Landroid/os/Handler> > 1,
65 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda7>@72,
monitorexit 5,
return,
return,
return,","depth : 0
public void releaseLease(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$mreleaseLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	p1.releaseLeaseInternal(p2, p3, p4);
	return;
}
-----
depth : 2
public void releaseLeaseInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	v1.removeLeasee(p3, p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Released lease on "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append(""; callingUid="");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", callingPackage="");
	StringBuilder v10 = v3.append(p3);
	String v11 = v3.toString();
	int v12 = Slog.v(""BlobStore"", v11);
	boolean v13 = v1.hasValidLeases();
	BlobStoreManagerService$$ExternalSyntheticLambda7 v13 = new BlobStoreManagerService$$ExternalSyntheticLambda7(p0,p1,v1);
	long v15 = BlobStoreConfig.getDeletionOnLastLeaseDelayMs();
	boolean v16 = this.mHandler.postDelayed(v13, v15);
	p0.writeBlobsInfoAsync();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 35,2,12,3 @33 exception:36,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 12,10,
37 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 37,10,
39 = new <Application,Ljava/lang/StringBuilder>@28,
conditional branch(ne, to iindex=-1) 63,10,
64 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mHandler, <Application,Landroid/os/Handler> > 1,
65 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda7>@72,
monitorexit 5,
return,
return,
return,","depth : 0
public void releaseLease(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$mreleaseLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	p1.releaseLeaseInternal(p2, p3, p4);
	return;
}
-----
depth : 2
public void releaseLeaseInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	v1.removeLeasee(p3, p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Released lease on "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append(""; callingUid="");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", callingPackage="");
	StringBuilder v10 = v3.append(p3);
	String v11 = v3.toString();
	int v12 = Slog.v(""BlobStore"", v11);
	boolean v13 = v1.hasValidLeases();
	BlobStoreManagerService$$ExternalSyntheticLambda7 v13 = new BlobStoreManagerService$$ExternalSyntheticLambda7(p0,p1,v1);
	long v15 = BlobStoreConfig.getDeletionOnLastLeaseDelayMs();
	boolean v16 = this.mHandler.postDelayed(v13, v15);
	p0.writeBlobsInfoAsync();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","releaseLease(Landroid/app/blob/BlobHandle;Ljava/lang/String;)V","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mreleaseLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 35,2,12,3 @33 exception:36,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, releaseLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)V > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 12,10,
37 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 37,10,
39 = new <Application,Ljava/lang/StringBuilder>@28,
conditional branch(ne, to iindex=-1) 63,10,
64 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mHandler, <Application,Landroid/os/Handler> > 1,
65 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda7>@72,
monitorexit 5,
return,
return,
return,","depth : 0
public void releaseLease(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	BlobStoreManagerService.-$$Nest$mreleaseLeaseInternal(this.this$0, p1, v4, p2);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$mreleaseLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	p1.releaseLeaseInternal(p2, p3, p4);
	return;
}
-----
depth : 2
public void releaseLeaseInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	v1.removeLeasee(p3, p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Released lease on "");
	StringBuilder v6 = v3.append(p1);
	StringBuilder v7 = v3.append(""; callingUid="");
	StringBuilder v8 = v3.append(p2);
	StringBuilder v9 = v3.append("", callingPackage="");
	StringBuilder v10 = v3.append(p3);
	String v11 = v3.toString();
	int v12 = Slog.v(""BlobStore"", v11);
	boolean v13 = v1.hasValidLeases();
	BlobStoreManagerService$$ExternalSyntheticLambda7 v13 = new BlobStoreManagerService$$ExternalSyntheticLambda7(p0,p1,v1);
	long v15 = BlobStoreConfig.getDeletionOnLastLeaseDelayMs();
	boolean v16 = this.mHandler.postDelayed(v13, v15);
	p0.writeBlobsInfoAsync();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeasedBlobs(Ljava/lang/String;)Ljava/util/List;","0","8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 8,7,2 @12 exception:9,
10 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
12 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeasedBlobsInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Ljava/util/List; > 10,7,2 @17 exception:11,
return 12,","depth : 0
public List getLeasedBlobs(String p1){
	Object v1 = Objects.requireNonNull(p1, ""packageName must not be null"");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	List v4 = BlobStoreManagerService.-$$Nest$mgetLeasedBlobsInternal(this.this$0, v2, p1);
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeasedBlobs(Ljava/lang/String;)Ljava/util/List;","1","8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 8,7,2 @12 exception:9,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
10 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
12 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeasedBlobsInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Ljava/util/List; > 10,7,2 @17 exception:11,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getLeasedBlobsInternal(ILjava/lang/String;)Ljava/util/List; > 1,2,3 @0 exception:4,
return 5,
return 12,","depth : 0
public List getLeasedBlobs(String p1){
	Object v1 = Objects.requireNonNull(p1, ""packageName must not be null"");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	List v4 = BlobStoreManagerService.-$$Nest$mgetLeasedBlobsInternal(this.this$0, v2, p1);
	return v4;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public List -$$Nest$mgetLeasedBlobsInternal(BlobStoreManagerService p1, int p2, String p3){
	List v1 = p1.getLeasedBlobsInternal(p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeasedBlobs(Ljava/lang/String;)Ljava/util/List;","2","8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 8,7,2 @12 exception:9,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
10 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
12 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeasedBlobsInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Ljava/util/List; > 10,7,2 @17 exception:11,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getLeasedBlobsInternal(ILjava/lang/String;)Ljava/util/List; > 1,2,3 @0 exception:4,
4 = new <Application,Ljava/util/ArrayList>@0,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 6,
7 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda13>@8,
monitorexit 6,
return 4,
return 5,
return 12,","depth : 0
public List getLeasedBlobs(String p1){
	Object v1 = Objects.requireNonNull(p1, ""packageName must not be null"");
	int v2 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v2, p1);
	List v4 = BlobStoreManagerService.-$$Nest$mgetLeasedBlobsInternal(this.this$0, v2, p1);
	return v4;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public List -$$Nest$mgetLeasedBlobsInternal(BlobStoreManagerService p1, int p2, String p3){
	List v1 = p1.getLeasedBlobsInternal(p2, p3);
	return v1;
}
-----
depth : 2
public List getLeasedBlobsInternal(int p1, String p2){
	ArrayList v0 = new ArrayList();
	BlobStoreManagerService$$ExternalSyntheticLambda13 v1 = new BlobStoreManagerService$$ExternalSyntheticLambda13(p2,p1,v0);
	p0.forEachBlobLocked(v1);
	return v0;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J","0","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mcreateSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 35,2,12,3 @33 exception:36,
return 37,","depth : 0
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	long v7 = BlobStoreManagerService.-$$Nest$mcreateSessionInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mcreateSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, createSessionInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 1,2,3,4 @0 exception:5,
return 6,
return 37,","depth : 0
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	long v7 = BlobStoreManagerService.-$$Nest$mcreateSessionInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public long -$$Nest$mcreateSessionInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	long v1 = p1.createSessionInternal(p2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mcreateSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, createSessionInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 1,2,3,4 @0 exception:5,
return 6,
return 37,","depth : 0
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	long v7 = BlobStoreManagerService.-$$Nest$mcreateSessionInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public long -$$Nest$mcreateSessionInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	long v1 = p1.createSessionInternal(p2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mcreateSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, createSessionInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
conditional branch(ge, to iindex=-1) 7,9,
23 = new <Application,Lcom/android/server/blob/BlobStoreSession>@17,
24 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mContext, <Application,Landroid/content/Context> > 1,
25 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mSessionStateChangeListener, <Application,Lcom/android/server/blob/BlobStoreManagerService$SessionStateChangeListener> > 1,
30 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 30,31,
33 = new <Application,Ljava/lang/StringBuilder>@44,
monitorexit 5,
return 22,
return 6,
return 37,","depth : 0
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	long v7 = BlobStoreManagerService.-$$Nest$mcreateSessionInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public long -$$Nest$mcreateSessionInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	long v1 = p1.createSessionInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public long createSessionInternal(BlobHandle p1, int p2, String p3){
	int v1 = p0.getSessionsCountLocked(p2, p3);
	int v2 = BlobStoreConfig.getMaxActiveSessions();
	long v3 = p0.generateNextSessionIdLocked();
	BlobStoreSession v3 = new BlobStoreSession(this.mContext,v3,p1,p2,p3,this.mSessionStateChangeListener);
	int v5 = UserHandle.getUserId(p2);
	p0.addSessionForUserLocked(v3, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Created session for "");
	StringBuilder v9 = v6.append(p1);
	StringBuilder v10 = v6.append(""; callingUid="");
	StringBuilder v11 = v6.append(p2);
	StringBuilder v12 = v6.append("", callingPackage="");
	StringBuilder v13 = v6.append(p3);
	String v14 = v6.toString();
	int v15 = Slog.v(""BlobStore"", v14);
	p0.writeBlobSessionsAsync();
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mcreateSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, createSessionInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
conditional branch(ge, to iindex=-1) 7,9,
23 = new <Application,Lcom/android/server/blob/BlobStoreSession>@17,
24 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mContext, <Application,Landroid/content/Context> > 1,
25 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mSessionStateChangeListener, <Application,Lcom/android/server/blob/BlobStoreManagerService$SessionStateChangeListener> > 1,
30 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 30,31,
33 = new <Application,Ljava/lang/StringBuilder>@44,
monitorexit 5,
return 22,
return 6,
return 37,","depth : 0
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	long v7 = BlobStoreManagerService.-$$Nest$mcreateSessionInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public long -$$Nest$mcreateSessionInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	long v1 = p1.createSessionInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public long createSessionInternal(BlobHandle p1, int p2, String p3){
	int v1 = p0.getSessionsCountLocked(p2, p3);
	int v2 = BlobStoreConfig.getMaxActiveSessions();
	long v3 = p0.generateNextSessionIdLocked();
	BlobStoreSession v3 = new BlobStoreSession(this.mContext,v3,p1,p2,p3,this.mSessionStateChangeListener);
	int v5 = UserHandle.getUserId(p2);
	p0.addSessionForUserLocked(v3, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Created session for "");
	StringBuilder v9 = v6.append(p1);
	StringBuilder v10 = v6.append(""; callingUid="");
	StringBuilder v11 = v6.append(p2);
	StringBuilder v12 = v6.append("", callingPackage="");
	StringBuilder v13 = v6.append(p3);
	String v14 = v6.toString();
	int v15 = Slog.v(""BlobStore"", v14);
	p0.writeBlobSessionsAsync();
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","createSession(Landroid/app/blob/BlobHandle;Ljava/lang/String;)J","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mcreateSessionInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, createSessionInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)J > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
conditional branch(ge, to iindex=-1) 7,9,
23 = new <Application,Lcom/android/server/blob/BlobStoreSession>@17,
24 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mContext, <Application,Landroid/content/Context> > 1,
25 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mSessionStateChangeListener, <Application,Lcom/android/server/blob/BlobStoreManagerService$SessionStateChangeListener> > 1,
30 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 30,31,
33 = new <Application,Ljava/lang/StringBuilder>@44,
monitorexit 5,
return 22,
return 6,
return 37,","depth : 0
public long createSession(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	long v7 = BlobStoreManagerService.-$$Nest$mcreateSessionInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public long -$$Nest$mcreateSessionInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	long v1 = p1.createSessionInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public long createSessionInternal(BlobHandle p1, int p2, String p3){
	int v1 = p0.getSessionsCountLocked(p2, p3);
	int v2 = BlobStoreConfig.getMaxActiveSessions();
	long v3 = p0.generateNextSessionIdLocked();
	BlobStoreSession v3 = new BlobStoreSession(this.mContext,v3,p1,p2,p3,this.mSessionStateChangeListener);
	int v5 = UserHandle.getUserId(p2);
	p0.addSessionForUserLocked(v3, v5);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Created session for "");
	StringBuilder v9 = v6.append(p1);
	StringBuilder v10 = v6.append(""; callingUid="");
	StringBuilder v11 = v6.append(p2);
	StringBuilder v12 = v6.append("", callingPackage="");
	StringBuilder v13 = v6.append(p3);
	String v14 = v6.toString();
	int v15 = Slog.v(""BlobStore"", v14);
	p0.writeBlobSessionsAsync();
	return v3;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V","0","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:10,
12 = invokestatic < Application, Landroid/content/res/ResourceId, isValid(I)Z > 3 @8 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
conditional branch(eq, to iindex=-1) 4,13,
goto (from iindex= 7 to iindex = 3),
15 = phi  13,14,
16 = new <Application,Ljava/lang/StringBuilder>@20,
38 = invokestatic < Application, Lcom/android/server/blob/BlobStoreConfig, getTruncatedLeaseDescription(Ljava/lang/CharSequence;)Ljava/lang/CharSequence; > 4 @59 exception:37,
41 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 41,40,6 @69 exception:42,
43 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
45 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 43,40,6 @74 exception:44,
conditional branch(eq, to iindex=-1) 45,13,
62 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$macquireLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 62,2,3,38,5,40,6 @86 exception:63,
return,","depth : 0
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	boolean v3 = ResourceId.isValid(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Description must be valid; descriptionId="");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", description="");
	StringBuilder v8 = v3.append(p3);
	String v9 = v3.toString();
	Preconditions.checkArgument(phiInstruction, v9);
	long v11 = Preconditions.checkArgumentNonnegative(p4, ""leaseExpiryTimeMillis must not be negative"");
	Object v12 = Objects.requireNonNull(p5, ""packageName must not be null"");
	CharSequence v13 = BlobStoreConfig.getTruncatedLeaseDescription(p3);
	int v14 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v14, p5);
	boolean v16 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v14, p5);
	BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v13, p4, v14, p5);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:10,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
12 = invokestatic < Application, Landroid/content/res/ResourceId, isValid(I)Z > 3 @8 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
conditional branch(eq, to iindex=-1) 4,13,
goto (from iindex= 7 to iindex = 3),
15 = phi  13,14,
16 = new <Application,Ljava/lang/StringBuilder>@20,
38 = invokestatic < Application, Lcom/android/server/blob/BlobStoreConfig, getTruncatedLeaseDescription(Ljava/lang/CharSequence;)Ljava/lang/CharSequence; > 4 @59 exception:37,
3 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
5 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig$DeviceConfigProperties, LEASE_DESC_CHAR_LIMIT, <Primordial,I> >,
return 7,
41 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 41,40,6 @69 exception:42,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
43 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
45 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 43,40,6 @74 exception:44,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 45,13,
62 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$macquireLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 62,2,3,38,5,40,6 @86 exception:63,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, acquireLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 1,2,3,4,5,6,7 @0 exception:8,
return,
return,","depth : 0
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	boolean v3 = ResourceId.isValid(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Description must be valid; descriptionId="");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", description="");
	StringBuilder v8 = v3.append(p3);
	String v9 = v3.toString();
	Preconditions.checkArgument(phiInstruction, v9);
	long v11 = Preconditions.checkArgumentNonnegative(p4, ""leaseExpiryTimeMillis must not be negative"");
	Object v12 = Objects.requireNonNull(p5, ""packageName must not be null"");
	CharSequence v13 = BlobStoreConfig.getTruncatedLeaseDescription(p3);
	int v14 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v14, p5);
	boolean v16 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v14, p5);
	BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v13, p4, v14, p5);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public CharSequence getTruncatedLeaseDescription(CharSequence p1){
	boolean v1 = TextUtils.isEmpty(p1);
	CharSequence v2 = TextUtils.trimToLengthWithEllipsis(p1, BlobStoreConfig$DeviceConfigProperties.LEASE_DESC_CHAR_LIMIT);
	return v2;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public void -$$Nest$macquireLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, CharSequence p4, long p5, int p6, String p7){
	p1.acquireLeaseInternal(p2, p3, p4, p5, p6, p7);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:10,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
12 = invokestatic < Application, Landroid/content/res/ResourceId, isValid(I)Z > 3 @8 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
conditional branch(eq, to iindex=-1) 4,13,
goto (from iindex= 9 to iindex = 2),
15 = phi  13,14,
16 = new <Application,Ljava/lang/StringBuilder>@20,
38 = invokestatic < Application, Lcom/android/server/blob/BlobStoreConfig, getTruncatedLeaseDescription(Ljava/lang/CharSequence;)Ljava/lang/CharSequence; > 4 @59 exception:37,
3 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
5 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig$DeviceConfigProperties, LEASE_DESC_CHAR_LIMIT, <Primordial,I> >,
return 7,
41 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 41,40,6 @69 exception:42,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
43 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
45 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 43,40,6 @74 exception:44,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 45,13,
62 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$macquireLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 62,2,3,38,5,40,6 @86 exception:63,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, acquireLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 1,2,3,4,5,6,7 @0 exception:8,
return,
return,","depth : 0
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	boolean v3 = ResourceId.isValid(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Description must be valid; descriptionId="");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", description="");
	StringBuilder v8 = v3.append(p3);
	String v9 = v3.toString();
	Preconditions.checkArgument(phiInstruction, v9);
	long v11 = Preconditions.checkArgumentNonnegative(p4, ""leaseExpiryTimeMillis must not be negative"");
	Object v12 = Objects.requireNonNull(p5, ""packageName must not be null"");
	CharSequence v13 = BlobStoreConfig.getTruncatedLeaseDescription(p3);
	int v14 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v14, p5);
	boolean v16 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v14, p5);
	BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v13, p4, v14, p5);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public CharSequence getTruncatedLeaseDescription(CharSequence p1){
	boolean v1 = TextUtils.isEmpty(p1);
	CharSequence v2 = TextUtils.trimToLengthWithEllipsis(p1, BlobStoreConfig$DeviceConfigProperties.LEASE_DESC_CHAR_LIMIT);
	return v2;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public void -$$Nest$macquireLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, CharSequence p4, long p5, int p6, String p7){
	p1.acquireLeaseInternal(p2, p3, p4, p5, p6, p7);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:10,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
12 = invokestatic < Application, Landroid/content/res/ResourceId, isValid(I)Z > 3 @8 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
conditional branch(eq, to iindex=-1) 4,13,
goto (from iindex= 7 to iindex = 3),
15 = phi  13,14,
16 = new <Application,Ljava/lang/StringBuilder>@20,
38 = invokestatic < Application, Lcom/android/server/blob/BlobStoreConfig, getTruncatedLeaseDescription(Ljava/lang/CharSequence;)Ljava/lang/CharSequence; > 4 @59 exception:37,
3 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
5 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig$DeviceConfigProperties, LEASE_DESC_CHAR_LIMIT, <Primordial,I> >,
return 7,
41 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 41,40,6 @69 exception:42,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
43 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
45 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 43,40,6 @74 exception:44,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 45,13,
62 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$macquireLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 62,2,3,38,5,40,6 @86 exception:63,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, acquireLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 1,2,3,4,5,6,7 @0 exception:8,
8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 8,
conditional branch(ge, to iindex=-1) 10,12,
28 = binaryop(lt) 5 , 14,
conditional branch(eq, to iindex=-1) 28,29,
30 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 2,
31 = binaryop(lt) 30 , 14,
conditional branch(eq, to iindex=-1) 31,29,
32 = binaryop(lt) 5 , 30,
conditional branch(gt, to iindex=-1) 32,29,
goto (from iindex= 19 to iindex = 21),
40 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
43 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>42 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 43,29,
conditional branch(ne, to iindex=-1) 45,29,
50 = binaryop(lt) 47 , 49,
conditional branch(gt, to iindex=-1) 50,29,
67 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 67,29,
69 = new <Application,Ljava/lang/StringBuilder>@121,
monitorexit 8,
return,
return,
return,","depth : 0
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	boolean v3 = ResourceId.isValid(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Description must be valid; descriptionId="");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", description="");
	StringBuilder v8 = v3.append(p3);
	String v9 = v3.toString();
	Preconditions.checkArgument(phiInstruction, v9);
	long v11 = Preconditions.checkArgumentNonnegative(p4, ""leaseExpiryTimeMillis must not be negative"");
	Object v12 = Objects.requireNonNull(p5, ""packageName must not be null"");
	CharSequence v13 = BlobStoreConfig.getTruncatedLeaseDescription(p3);
	int v14 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v14, p5);
	boolean v16 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v14, p5);
	BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v13, p4, v14, p5);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public CharSequence getTruncatedLeaseDescription(CharSequence p1){
	boolean v1 = TextUtils.isEmpty(p1);
	CharSequence v2 = TextUtils.trimToLengthWithEllipsis(p1, BlobStoreConfig$DeviceConfigProperties.LEASE_DESC_CHAR_LIMIT);
	return v2;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$macquireLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, CharSequence p4, long p5, int p6, String p7){
	p1.acquireLeaseInternal(p2, p3, p4, p5, p6, p7);
	return;
}
-----
depth : 2
public void acquireLeaseInternal(BlobHandle p1, int p2, CharSequence p3, long p4, int p5, String p6){
	int v1 = p0.getLeasedBlobsCountLocked(p5, p6);
	int v2 = BlobStoreConfig.getMaxLeasedBlobs();
	Object v3 = this.mBlobsMap.get(p1);
	boolean v4 = v3.isAccessAllowedForCaller(p6, p5);
	long v5 = v3.getSize();
	long v6 = p0.getRemainingLeaseQuotaBytesInternal(p5, p6);
	long v7 = v3.getBlobId();
	long v8 = v3.getSize();
	FrameworkStatsLog.write(299, p5, v7, v8, 1);
	v3.addOrReplaceLeasee(p6, p5, p2, p3, p4);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""Acquired lease on "");
	StringBuilder v13 = v10.append(p1);
	StringBuilder v14 = v10.append(""; callingUid="");
	StringBuilder v15 = v10.append(p5);
	StringBuilder v16 = v10.append("", callingPackage="");
	StringBuilder v17 = v10.append(p6);
	String v18 = v10.toString();
	int v19 = Slog.v(""BlobStore"", v18);
	p0.writeBlobsInfoAsync();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:10,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
12 = invokestatic < Application, Landroid/content/res/ResourceId, isValid(I)Z > 3 @8 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
conditional branch(eq, to iindex=-1) 4,13,
goto (from iindex= 9 to iindex = 2),
15 = phi  13,14,
16 = new <Application,Ljava/lang/StringBuilder>@20,
38 = invokestatic < Application, Lcom/android/server/blob/BlobStoreConfig, getTruncatedLeaseDescription(Ljava/lang/CharSequence;)Ljava/lang/CharSequence; > 4 @59 exception:37,
3 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
5 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig$DeviceConfigProperties, LEASE_DESC_CHAR_LIMIT, <Primordial,I> >,
return 7,
41 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 41,40,6 @69 exception:42,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
43 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
45 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 43,40,6 @74 exception:44,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 45,13,
62 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$macquireLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 62,2,3,38,5,40,6 @86 exception:63,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, acquireLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 1,2,3,4,5,6,7 @0 exception:8,
8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 8,
conditional branch(ge, to iindex=-1) 10,12,
28 = binaryop(lt) 5 , 14,
conditional branch(eq, to iindex=-1) 28,29,
30 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 2,
31 = binaryop(lt) 30 , 14,
conditional branch(eq, to iindex=-1) 31,29,
32 = binaryop(lt) 5 , 30,
conditional branch(gt, to iindex=-1) 32,29,
goto (from iindex= 19 to iindex = 21),
40 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
43 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>42 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 43,29,
conditional branch(ne, to iindex=-1) 45,29,
50 = binaryop(lt) 47 , 49,
conditional branch(gt, to iindex=-1) 50,29,
67 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 67,29,
69 = new <Application,Ljava/lang/StringBuilder>@121,
monitorexit 8,
return,
return,
return,","depth : 0
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	boolean v3 = ResourceId.isValid(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Description must be valid; descriptionId="");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", description="");
	StringBuilder v8 = v3.append(p3);
	String v9 = v3.toString();
	Preconditions.checkArgument(phiInstruction, v9);
	long v11 = Preconditions.checkArgumentNonnegative(p4, ""leaseExpiryTimeMillis must not be negative"");
	Object v12 = Objects.requireNonNull(p5, ""packageName must not be null"");
	CharSequence v13 = BlobStoreConfig.getTruncatedLeaseDescription(p3);
	int v14 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v14, p5);
	boolean v16 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v14, p5);
	BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v13, p4, v14, p5);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public CharSequence getTruncatedLeaseDescription(CharSequence p1){
	boolean v1 = TextUtils.isEmpty(p1);
	CharSequence v2 = TextUtils.trimToLengthWithEllipsis(p1, BlobStoreConfig$DeviceConfigProperties.LEASE_DESC_CHAR_LIMIT);
	return v2;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$macquireLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, CharSequence p4, long p5, int p6, String p7){
	p1.acquireLeaseInternal(p2, p3, p4, p5, p6, p7);
	return;
}
-----
depth : 2
public void acquireLeaseInternal(BlobHandle p1, int p2, CharSequence p3, long p4, int p5, String p6){
	int v1 = p0.getLeasedBlobsCountLocked(p5, p6);
	int v2 = BlobStoreConfig.getMaxLeasedBlobs();
	Object v3 = this.mBlobsMap.get(p1);
	boolean v4 = v3.isAccessAllowedForCaller(p6, p5);
	long v5 = v3.getSize();
	long v6 = p0.getRemainingLeaseQuotaBytesInternal(p5, p6);
	long v7 = v3.getBlobId();
	long v8 = v3.getSize();
	FrameworkStatsLog.write(299, p5, v7, v8, 1);
	v3.addOrReplaceLeasee(p6, p5, p2, p3, p4);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""Acquired lease on "");
	StringBuilder v13 = v10.append(p1);
	StringBuilder v14 = v10.append(""; callingUid="");
	StringBuilder v15 = v10.append(p5);
	StringBuilder v16 = v10.append("", callingPackage="");
	StringBuilder v17 = v10.append(p6);
	String v18 = v10.toString();
	int v19 = Slog.v(""BlobStore"", v18);
	p0.writeBlobsInfoAsync();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","acquireLease(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JLjava/lang/String;)V","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:10,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
12 = invokestatic < Application, Landroid/content/res/ResourceId, isValid(I)Z > 3 @8 exception:11,
conditional branch(ne, to iindex=-1) 12,13,
conditional branch(eq, to iindex=-1) 4,13,
goto (from iindex= 7 to iindex = 3),
15 = phi  13,14,
16 = new <Application,Ljava/lang/StringBuilder>@20,
38 = invokestatic < Application, Lcom/android/server/blob/BlobStoreConfig, getTruncatedLeaseDescription(Ljava/lang/CharSequence;)Ljava/lang/CharSequence; > 4 @59 exception:37,
3 = invokestatic < Application, Landroid/text/TextUtils, isEmpty(Ljava/lang/CharSequence;)Z > 1 @0 exception:2,
conditional branch(eq, to iindex=-1) 3,4,
return 1,
41 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 41,40,6 @69 exception:42,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
43 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
45 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 43,40,6 @74 exception:44,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 45,13,
62 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$macquireLeaseInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 62,2,3,38,5,40,6 @86 exception:63,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, acquireLeaseInternal(Landroid/app/blob/BlobHandle;ILjava/lang/CharSequence;JILjava/lang/String;)V > 1,2,3,4,5,6,7 @0 exception:8,
8 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 8,
conditional branch(ge, to iindex=-1) 10,12,
28 = binaryop(lt) 5 , 14,
conditional branch(eq, to iindex=-1) 28,29,
30 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 2,
31 = binaryop(lt) 30 , 14,
conditional branch(eq, to iindex=-1) 31,29,
32 = binaryop(lt) 5 , 30,
conditional branch(gt, to iindex=-1) 32,29,
goto (from iindex= 19 to iindex = 21),
40 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
43 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>42 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 43,29,
conditional branch(ne, to iindex=-1) 45,29,
50 = binaryop(lt) 47 , 49,
conditional branch(gt, to iindex=-1) 50,29,
67 = getstatic < Application, Lcom/android/server/blob/BlobStoreConfig, LOGV, <Primordial,Z> >,
conditional branch(eq, to iindex=-1) 67,29,
69 = new <Application,Ljava/lang/StringBuilder>@121,
monitorexit 8,
return,
return,
return,","depth : 0
public void acquireLease(BlobHandle p1, int p2, CharSequence p3, long p4, String p5){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	boolean v3 = ResourceId.isValid(p2);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Description must be valid; descriptionId="");
	StringBuilder v6 = v3.append(p2);
	StringBuilder v7 = v3.append("", description="");
	StringBuilder v8 = v3.append(p3);
	String v9 = v3.toString();
	Preconditions.checkArgument(phiInstruction, v9);
	long v11 = Preconditions.checkArgumentNonnegative(p4, ""leaseExpiryTimeMillis must not be negative"");
	Object v12 = Objects.requireNonNull(p5, ""packageName must not be null"");
	CharSequence v13 = BlobStoreConfig.getTruncatedLeaseDescription(p3);
	int v14 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v14, p5);
	boolean v16 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v14, p5);
	BlobStoreManagerService.-$$Nest$macquireLeaseInternal(this.this$0, p1, p2, v13, p4, v14, p5);
	return;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public CharSequence getTruncatedLeaseDescription(CharSequence p1){
	boolean v1 = TextUtils.isEmpty(p1);
	return p1;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public void -$$Nest$macquireLeaseInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, CharSequence p4, long p5, int p6, String p7){
	p1.acquireLeaseInternal(p2, p3, p4, p5, p6, p7);
	return;
}
-----
depth : 2
public void acquireLeaseInternal(BlobHandle p1, int p2, CharSequence p3, long p4, int p5, String p6){
	int v1 = p0.getLeasedBlobsCountLocked(p5, p6);
	int v2 = BlobStoreConfig.getMaxLeasedBlobs();
	Object v3 = this.mBlobsMap.get(p1);
	boolean v4 = v3.isAccessAllowedForCaller(p6, p5);
	long v5 = v3.getSize();
	long v6 = p0.getRemainingLeaseQuotaBytesInternal(p5, p6);
	long v7 = v3.getBlobId();
	long v8 = v3.getSize();
	FrameworkStatsLog.write(299, p5, v7, v8, 1);
	v3.addOrReplaceLeasee(p6, p5, p2, p3, p4);
	StringBuilder v10 = new StringBuilder();
	StringBuilder v12 = v10.append(""Acquired lease on "");
	StringBuilder v13 = v10.append(p1);
	StringBuilder v14 = v10.append(""; callingUid="");
	StringBuilder v15 = v10.append(p5);
	StringBuilder v16 = v10.append("", callingPackage="");
	StringBuilder v17 = v10.append(p6);
	String v18 = v10.toString();
	int v19 = Slog.v(""BlobStore"", v18);
	p0.writeBlobsInfoAsync();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","getRemainingLeaseQuotaBytes(Ljava/lang/String;)J","0","5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 5,4,2 @6 exception:6,
7 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
9 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetRemainingLeaseQuotaBytesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)J > 7,4,2 @11 exception:8,
return 9,","depth : 0
public long getRemainingLeaseQuotaBytes(String p1){
	int v1 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v1, p1);
	long v3 = BlobStoreManagerService.-$$Nest$mgetRemainingLeaseQuotaBytesInternal(this.this$0, v1, p1);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getRemainingLeaseQuotaBytes(Ljava/lang/String;)J","1","5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 5,4,2 @6 exception:6,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
7 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
9 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetRemainingLeaseQuotaBytesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)J > 7,4,2 @11 exception:8,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getRemainingLeaseQuotaBytesInternal(ILjava/lang/String;)J > 1,2,3 @0 exception:4,
return 5,
return 9,","depth : 0
public long getRemainingLeaseQuotaBytes(String p1){
	int v1 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v1, p1);
	long v3 = BlobStoreManagerService.-$$Nest$mgetRemainingLeaseQuotaBytesInternal(this.this$0, v1, p1);
	return v3;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public long -$$Nest$mgetRemainingLeaseQuotaBytesInternal(BlobStoreManagerService p1, int p2, String p3){
	long v1 = p1.getRemainingLeaseQuotaBytesInternal(p2, p3);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getRemainingLeaseQuotaBytes(Ljava/lang/String;)J","2","5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 5,4,2 @6 exception:6,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
7 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
9 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetRemainingLeaseQuotaBytesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)J > 7,4,2 @11 exception:8,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getRemainingLeaseQuotaBytesInternal(ILjava/lang/String;)J > 1,2,3 @0 exception:4,
4 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 4,
9 = binaryop(sub) 6 , 8,
11 = binaryop(lt) 9 , 10,
conditional branch(le, to iindex=-1) 11,12,
goto (from iindex= 10 to iindex = 2),
13 = phi  9,10,
monitorexit 4,
return 13,
return 5,
return 9,","depth : 0
public long getRemainingLeaseQuotaBytes(String p1){
	int v1 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v1, p1);
	long v3 = BlobStoreManagerService.-$$Nest$mgetRemainingLeaseQuotaBytesInternal(this.this$0, v1, p1);
	return v3;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public long -$$Nest$mgetRemainingLeaseQuotaBytesInternal(BlobStoreManagerService p1, int p2, String p3){
	long v1 = p1.getRemainingLeaseQuotaBytesInternal(p2, p3);
	return v1;
}
-----
depth : 2
public long getRemainingLeaseQuotaBytesInternal(int p1, String p2){
	long v1 = BlobStoreConfig.getAppDataBytesLimit();
	long v2 = p0.getTotalUsageBytesLocked(p1, p2);
	return phiInstruction;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getRemainingLeaseQuotaBytes(Ljava/lang/String;)J","2","5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 5,4,2 @6 exception:6,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
7 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
9 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetRemainingLeaseQuotaBytesInternal(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)J > 7,4,2 @11 exception:8,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getRemainingLeaseQuotaBytesInternal(ILjava/lang/String;)J > 1,2,3 @0 exception:4,
4 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 4,
9 = binaryop(sub) 6 , 8,
11 = binaryop(lt) 9 , 10,
conditional branch(le, to iindex=-1) 11,12,
13 = phi  9,10,
monitorexit 4,
return 13,
return 5,
return 9,","depth : 0
public long getRemainingLeaseQuotaBytes(String p1){
	int v1 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v1, p1);
	long v3 = BlobStoreManagerService.-$$Nest$mgetRemainingLeaseQuotaBytesInternal(this.this$0, v1, p1);
	return v3;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public long -$$Nest$mgetRemainingLeaseQuotaBytesInternal(BlobStoreManagerService p1, int p2, String p3){
	long v1 = p1.getRemainingLeaseQuotaBytesInternal(p2, p3);
	return v1;
}
-----
depth : 2
public long getRemainingLeaseQuotaBytesInternal(int p1, String p2){
	long v1 = BlobStoreConfig.getAppDataBytesLimit();
	long v2 = p0.getTotalUsageBytesLocked(p1, p2);
	return phiInstruction;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","deleteBlob(J)V","0","9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mdeleteBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;JI)V > 9,2,4 @10 exception:10,
return,","depth : 0
public void deleteBlob(long p1){
	BlobStoreManagerService.-$$Nest$mdeleteBlobInternal(this.this$0, p1, v1);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","deleteBlob(J)V","1","9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mdeleteBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;JI)V > 9,2,4 @10 exception:10,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, deleteBlobInternal(JI)V > 1,2,3 @0 exception:4,
return,
return,","depth : 0
public void deleteBlob(long p1){
	BlobStoreManagerService.-$$Nest$mdeleteBlobInternal(this.this$0, p1, v1);
	return;
}
-----
depth : 1
public void -$$Nest$mdeleteBlobInternal(BlobStoreManagerService p1, long p2, int p3){
	p1.deleteBlobInternal(p2, p3);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","deleteBlob(J)V","2","9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mdeleteBlobInternal(Lcom/android/server/blob/BlobStoreManagerService;JI)V > 9,2,4 @10 exception:10,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, deleteBlobInternal(JI)V > 1,2,3 @0 exception:4,
4 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 4,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
8 = new <Application,Lcom/android/server/blob/BlobStoreManagerService$$ExternalSyntheticLambda8>@9,
monitorexit 4,
return,
return,
return,","depth : 0
public void deleteBlob(long p1){
	BlobStoreManagerService.-$$Nest$mdeleteBlobInternal(this.this$0, p1, v1);
	return;
}
-----
depth : 1
public void -$$Nest$mdeleteBlobInternal(BlobStoreManagerService p1, long p2, int p3){
	p1.deleteBlobInternal(p2, p3);
	return;
}
-----
depth : 2
public void deleteBlobInternal(long p1, int p2){
	Set v1 = this.mBlobsMap.entrySet();
	BlobStoreManagerService$$ExternalSyntheticLambda8 v1 = new BlobStoreManagerService$$ExternalSyntheticLambda8(p0,p1);
	boolean v3 = v1.removeIf(v1);
	p0.writeBlobsInfoAsync();
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;","0","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeaseInfoInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 35,2,12,3 @33 exception:36,
return 37,","depth : 0
public LeaseInfo getLeaseInfo(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	LeaseInfo v7 = BlobStoreManagerService.-$$Nest$mgetLeaseInfoInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeaseInfoInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getLeaseInfoInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 1,2,3,4 @0 exception:5,
return 6,
return 37,","depth : 0
public LeaseInfo getLeaseInfo(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	LeaseInfo v7 = BlobStoreManagerService.-$$Nest$mgetLeaseInfoInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public LeaseInfo -$$Nest$mgetLeaseInfoInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	LeaseInfo v1 = p1.getLeaseInfoInternal(p2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;","1","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeaseInfoInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getLeaseInfoInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 1,2,3,4 @0 exception:5,
return 6,
return 37,","depth : 0
public LeaseInfo getLeaseInfo(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	LeaseInfo v7 = BlobStoreManagerService.-$$Nest$mgetLeaseInfoInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 1
public LeaseInfo -$$Nest$mgetLeaseInfoInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	LeaseInfo v1 = p1.getLeaseInfoInternal(p2, p3, p4);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeaseInfoInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getLeaseInfoInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 12,10,
monitorexit 5,
return 37,
return 6,
return 37,","depth : 0
public LeaseInfo getLeaseInfo(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	LeaseInfo v7 = BlobStoreManagerService.-$$Nest$mgetLeaseInfoInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public LeaseInfo -$$Nest$mgetLeaseInfoInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	LeaseInfo v1 = p1.getLeaseInfoInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public LeaseInfo getLeaseInfoInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	LeaseInfo v3 = v1.getLeaseInfo(p3, p2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
goto (from iindex= 17 to iindex = 2),
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeaseInfoInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getLeaseInfoInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 12,10,
monitorexit 5,
return 37,
return 6,
return 37,","depth : 0
public LeaseInfo getLeaseInfo(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	LeaseInfo v7 = BlobStoreManagerService.-$$Nest$mgetLeaseInfoInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public LeaseInfo -$$Nest$mgetLeaseInfoInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	LeaseInfo v1 = p1.getLeaseInfoInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public LeaseInfo getLeaseInfoInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	LeaseInfo v3 = v1.getLeaseInfo(p3, p2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/blob/BlobStoreManagerService$Stub","getLeaseInfo(Landroid/app/blob/BlobHandle;Ljava/lang/String;)Landroid/app/blob/LeaseInfo;","2","invokevirtual < Application, Landroid/app/blob/BlobHandle, assertIsValid()V > 2 @5 exception:7,
2 = getstatic < Application, Landroid/app/blob/BlobHandle, SUPPORTED_ALGOS, <Application,[Ljava/lang/String> >,
3 = getfield < Application, Landroid/app/blob/BlobHandle, algorithm, <Application,Ljava/lang/String> > 1,
6 = getfield < Application, Landroid/app/blob/BlobHandle, digest, <Primordial,[B> > 1,
10 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
14 = getfield < Application, Landroid/app/blob/BlobHandle, label, <Application,Ljava/lang/CharSequence> > 1,
conditional branch(gt, to iindex=-1) 16,19,
20 = phi  17,18,
23 = getfield < Application, Landroid/app/blob/BlobHandle, expiryTimeMillis, <Primordial,J> > 1,
27 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
31 = getfield < Application, Landroid/app/blob/BlobHandle, tag, <Application,Ljava/lang/String> > 1,
conditional branch(gt, to iindex=-1) 33,34,
goto (from iindex= 32 to iindex = 2),
35 = phi  17,18,
return,
13 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mverifyCallingPackage(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)V > 13,12,3 @20 exception:14,
invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, verifyCallingPackage(ILjava/lang/String;)V > 1,2,3 @0 exception:4,
return,
return,
15 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
17 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$misAllowedBlobStoreAccess(Lcom/android/server/blob/BlobStoreManagerService;ILjava/lang/String;)Z > 15,12,3 @25 exception:16,
5 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, isAllowedBlobStoreAccess(ILjava/lang/String;)Z > 1,2,3 @0 exception:4,
conditional branch(ne, to iindex=-1) 8,6,
9 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mPackageManagerInternal, <Application,Landroid/content/pm/PackageManagerInternal> > 1,
conditional branch(ne, to iindex=-1) 13,6,
goto (from iindex= 13 to iindex = 2),
21 = phi  19,6,
return 21,
return 5,
conditional branch(eq, to iindex=-1) 17,18,
35 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService$Stub, this$0, <Application,Lcom/android/server/blob/BlobStoreManagerService> > 1,
37 = invokestatic < Application, Lcom/android/server/blob/BlobStoreManagerService, -$$Nest$mgetLeaseInfoInternal(Lcom/android/server/blob/BlobStoreManagerService;Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 35,2,12,3 @33 exception:36,
6 = invokevirtual < Application, Lcom/android/server/blob/BlobStoreManagerService, getLeaseInfoInternal(Landroid/app/blob/BlobHandle;ILjava/lang/String;)Landroid/app/blob/LeaseInfo; > 1,2,3,4 @0 exception:5,
5 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsLock, <Application,Ljava/lang/Object> > 1,
monitorenter 5,
6 = getfield < Application, Lcom/android/server/blob/BlobStoreManagerService, mBlobsMap, <Application,Landroid/util/ArrayMap> > 1,
9 = checkcast <Application,Lcom/android/server/blob/BlobMetadata>8 <Application,Lcom/android/server/blob/BlobMetadata>,
conditional branch(eq, to iindex=-1) 9,10,
conditional branch(eq, to iindex=-1) 12,10,
monitorexit 5,
return 37,
return 6,
return 37,","depth : 0
public LeaseInfo getLeaseInfo(BlobHandle p1, String p2){
	Object v1 = Objects.requireNonNull(p1, ""blobHandle must not be null"");
	p1.assertIsValid();
	Object v3 = Objects.requireNonNull(p2, ""packageName must not be null"");
	int v4 = Binder.getCallingUid();
	BlobStoreManagerService.-$$Nest$mverifyCallingPackage(this.this$0, v4, p2);
	boolean v6 = BlobStoreManagerService.-$$Nest$misAllowedBlobStoreAccess(this.this$0, v4, p2);
	LeaseInfo v7 = BlobStoreManagerService.-$$Nest$mgetLeaseInfoInternal(this.this$0, p1, v4, p2);
	return v7;
}
-----
depth : 1
public void assertIsValid(){
	String v1 = Preconditions.checkArgumentIsSupported(this.SUPPORTED_ALGOS, this.algorithm);
	byte[] v2 = Preconditions.checkByteArrayNotEmpty(this.digest, ""digest"");
	CharSequence v3 = Preconditions.checkStringNotEmpty(this.label, ""label must not be null"");
	int v4 = this.label.length();
	Preconditions.checkArgument(phiInstruction, ""label too long"");
	long v6 = Preconditions.checkArgumentNonnegative(this.expiryTimeMillis, ""expiryTimeMillis must not be negative"");
	CharSequence v7 = Preconditions.checkStringNotEmpty(this.tag, ""tag must not be null"");
	int v8 = this.tag.length();
	Preconditions.checkArgument(phiInstruction, ""tag too long"");
	return;
}
-----
depth : 1
public void -$$Nest$mverifyCallingPackage(BlobStoreManagerService p1, int p2, String p3){
	p1.verifyCallingPackage(p2, p3);
	return;
}
-----
depth : 2
public void verifyCallingPackage(int p1, String p2){
	return;
}
-----
depth : 1
public boolean -$$Nest$misAllowedBlobStoreAccess(BlobStoreManagerService p1, int p2, String p3){
	boolean v1 = p1.isAllowedBlobStoreAccess(p2, p3);
	return v1;
}
-----
depth : 2
public boolean isAllowedBlobStoreAccess(int p1, String p2){
	int v3 = UserHandle.getUserId(p1);
	boolean v4 = this.mPackageManagerInternal.isInstantApp(p2, v3);
	return phiInstruction;
}
-----
depth : 1
public LeaseInfo -$$Nest$mgetLeaseInfoInternal(BlobStoreManagerService p1, BlobHandle p2, int p3, String p4){
	LeaseInfo v1 = p1.getLeaseInfoInternal(p2, p3, p4);
	return v1;
}
-----
depth : 2
public LeaseInfo getLeaseInfoInternal(BlobHandle p1, int p2, String p3){
	Object v1 = this.mBlobsMap.get(p1);
	boolean v2 = v1.isAccessAllowedForCaller(p3, p2);
	LeaseInfo v3 = v1.getLeaseInfo(p3, p2);
	return v3;
}
-----
","SYS_OR_SIG"

