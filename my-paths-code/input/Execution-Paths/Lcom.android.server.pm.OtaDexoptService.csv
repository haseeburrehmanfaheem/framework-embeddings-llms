"Class","Method","Depth","Trace Instruction(s) ...","Java Code Representation","Access Control Level"
"Lcom/android/server/pm/OtaDexoptService","nextDexoptCommand()Ljava/lang/String;","0","monitorenter 1,
2 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 8,3,
9 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
12 = checkcast <Application,Ljava/lang/String>11 <Application,Ljava/lang/String>,
14 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @24 exception:13,
16 = binaryop(lt) 14 , 15,
conditional branch(le, to iindex=-1) 16,3,
40 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > 1,
41 = binaryop(add) 40 , 26,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > = 41,
42 = new <Application,Ljava/lang/StringBuilder>@42,
monitorexit 1,
return 12,","depth : 0
public String nextDexoptCommand(){
	boolean v1 = this.mDexoptCommands.isEmpty();
	Object v2 = this.mDexoptCommands.remove(0);
	long v3 = p0.getAvailableSpace();
	this.dexoptCommandCountExecuted = (this.dexoptCommandCountExecuted + 1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Next command: "");
	StringBuilder v6 = v3.append(v2);
	String v7 = v3.toString();
	int v8 = Log.d(""OTADexopt"", v7);
	return v2;
}
-----
","NONE"
"Lcom/android/server/pm/OtaDexoptService","nextDexoptCommand()Ljava/lang/String;","1","monitorenter 1,
2 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 8,3,
9 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
12 = checkcast <Application,Ljava/lang/String>11 <Application,Ljava/lang/String>,
14 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @24 exception:13,
3 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getMainLowSpaceThreshold()J > 1 @0 exception:2,
5 = invokestatic < Application, Landroid/os/Environment, getDataDirectory()Ljava/io/File; > @4 exception:4,
8 = binaryop(sub) 7 , 3,
return 8,
16 = binaryop(lt) 14 , 15,
conditional branch(le, to iindex=-1) 16,3,
40 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > 1,
41 = binaryop(add) 40 , 26,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > = 41,
42 = new <Application,Ljava/lang/StringBuilder>@42,
monitorexit 1,
return 12,","depth : 0
public String nextDexoptCommand(){
	boolean v1 = this.mDexoptCommands.isEmpty();
	Object v2 = this.mDexoptCommands.remove(0);
	long v3 = p0.getAvailableSpace();
	this.dexoptCommandCountExecuted = (this.dexoptCommandCountExecuted + 1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Next command: "");
	StringBuilder v6 = v3.append(v2);
	String v7 = v3.toString();
	int v8 = Log.d(""OTADexopt"", v7);
	return v2;
}
-----
depth : 1
public long getAvailableSpace(){
	long v1 = p0.getMainLowSpaceThreshold();
	File v2 = Environment.getDataDirectory();
	long v3 = v2.getUsableSpace();
	return (v3 - v1);
}
-----
","NONE"
"Lcom/android/server/pm/OtaDexoptService","nextDexoptCommand()Ljava/lang/String;","1","monitorenter 1,
2 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 8,3,
9 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
12 = checkcast <Application,Ljava/lang/String>11 <Application,Ljava/lang/String>,
14 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @24 exception:13,
3 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getMainLowSpaceThreshold()J > 1 @0 exception:2,
5 = invokestatic < Application, Landroid/os/Environment, getDataDirectory()Ljava/io/File; > @4 exception:4,
8 = binaryop(sub) 7 , 3,
return 8,
16 = binaryop(lt) 14 , 15,
conditional branch(le, to iindex=-1) 16,3,
18 = new <Application,Ljava/lang/StringBuilder>@66,
23 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
27 = binaryop(add) 25 , 26,
37 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
monitorexit 1,
return 39,","depth : 0
public String nextDexoptCommand(){
	boolean v1 = this.mDexoptCommands.isEmpty();
	Object v2 = this.mDexoptCommands.remove(0);
	long v3 = p0.getAvailableSpace();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Not enough space for OTA dexopt, stopping with "");
	int v6 = this.mDexoptCommands.size();
	StringBuilder v7 = v3.append((v6 + 1));
	StringBuilder v8 = v3.append("" commands left."");
	String v9 = v3.toString();
	int v10 = Log.w(""OTADexopt"", v9);
	this.mDexoptCommands.clear();
	return ""(no free space)"";
}
-----
depth : 1
public long getAvailableSpace(){
	long v1 = p0.getMainLowSpaceThreshold();
	File v2 = Environment.getDataDirectory();
	long v3 = v2.getUsableSpace();
	return (v3 - v1);
}
-----
","NONE"
"Lcom/android/server/pm/OtaDexoptService","nextDexoptCommand()Ljava/lang/String;","2","monitorenter 1,
2 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 8,3,
9 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
12 = checkcast <Application,Ljava/lang/String>11 <Application,Ljava/lang/String>,
14 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @24 exception:13,
3 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getMainLowSpaceThreshold()J > 1 @0 exception:2,
4 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mContext, <Application,Landroid/content/Context> > 1,
10 = binaryop(lt) 8 , 9,
conditional branch(eq, to iindex=-1) 10,11,
return 8,
5 = invokestatic < Application, Landroid/os/Environment, getDataDirectory()Ljava/io/File; > @4 exception:4,
8 = binaryop(sub) 7 , 3,
return 8,
16 = binaryop(lt) 14 , 15,
conditional branch(le, to iindex=-1) 16,3,
40 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > 1,
41 = binaryop(add) 40 , 26,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > = 41,
42 = new <Application,Ljava/lang/StringBuilder>@42,
monitorexit 1,
return 12,","depth : 0
public String nextDexoptCommand(){
	boolean v1 = this.mDexoptCommands.isEmpty();
	Object v2 = this.mDexoptCommands.remove(0);
	long v3 = p0.getAvailableSpace();
	this.dexoptCommandCountExecuted = (this.dexoptCommandCountExecuted + 1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Next command: "");
	StringBuilder v6 = v3.append(v2);
	String v7 = v3.toString();
	int v8 = Log.d(""OTADexopt"", v7);
	return v2;
}
-----
depth : 1
public long getAvailableSpace(){
	long v1 = p0.getMainLowSpaceThreshold();
	File v2 = Environment.getDataDirectory();
	long v3 = v2.getUsableSpace();
	return (v3 - v1);
}
-----
depth : 2
public long getMainLowSpaceThreshold(){
	File v1 = Environment.getDataDirectory();
	StorageManager v2 = StorageManager.from(this.mContext);
	long v3 = v2.getStorageLowBytes(v1);
	return v3;
}
-----
","NONE"
"Lcom/android/server/pm/OtaDexoptService","nextDexoptCommand()Ljava/lang/String;","2","monitorenter 1,
2 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
conditional branch(eq, to iindex=-1) 2,3,
conditional branch(eq, to iindex=-1) 8,3,
9 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
12 = checkcast <Application,Ljava/lang/String>11 <Application,Ljava/lang/String>,
14 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @24 exception:13,
3 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getMainLowSpaceThreshold()J > 1 @0 exception:2,
4 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mContext, <Application,Landroid/content/Context> > 1,
10 = binaryop(lt) 8 , 9,
conditional branch(eq, to iindex=-1) 10,11,
return 8,
5 = invokestatic < Application, Landroid/os/Environment, getDataDirectory()Ljava/io/File; > @4 exception:4,
8 = binaryop(sub) 7 , 3,
return 8,
16 = binaryop(lt) 14 , 15,
conditional branch(le, to iindex=-1) 16,3,
18 = new <Application,Ljava/lang/StringBuilder>@66,
23 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
27 = binaryop(add) 25 , 26,
37 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
monitorexit 1,
return 39,","depth : 0
public String nextDexoptCommand(){
	boolean v1 = this.mDexoptCommands.isEmpty();
	Object v2 = this.mDexoptCommands.remove(0);
	long v3 = p0.getAvailableSpace();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Not enough space for OTA dexopt, stopping with "");
	int v6 = this.mDexoptCommands.size();
	StringBuilder v7 = v3.append((v6 + 1));
	StringBuilder v8 = v3.append("" commands left."");
	String v9 = v3.toString();
	int v10 = Log.w(""OTADexopt"", v9);
	this.mDexoptCommands.clear();
	return ""(no free space)"";
}
-----
depth : 1
public long getAvailableSpace(){
	long v1 = p0.getMainLowSpaceThreshold();
	File v2 = Environment.getDataDirectory();
	long v3 = v2.getUsableSpace();
	return (v3 - v1);
}
-----
depth : 2
public long getMainLowSpaceThreshold(){
	File v1 = Environment.getDataDirectory();
	StorageManager v2 = StorageManager.from(this.mContext);
	long v3 = v2.getStorageLowBytes(v1);
	return v3;
}
-----
","NONE"

"Lcom/android/server/pm/OtaDexoptService","getProgress()F","0","monitorenter 1,
2 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, completeSize, <Primordial,I> > 1,
conditional branch(ne, to iindex=-1) 2,3,
4 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
7 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, completeSize, <Primordial,I> > 1,
10 = binaryop(sub) 7 , 6,
11 = conversion(F) 10,
12 = conversion(F) 7,
13 = binaryop(div) 11 , 12,
monitorexit 1,
return 13,","depth : 0
public float getProgress(){
	int v1 = this.mDexoptCommands.size();
	return ((this.completeSize - v1) / this.completeSize);
}
-----
","NONE"

"Lcom/android/server/pm/OtaDexoptService","cleanup()V","0","monitorenter 1,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > = 6,
8 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @11 exception:7,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterDexopt, <Primordial,J> > = 8,
invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, performMetricsLogging()V > 1 @17 exception:9,
monitorexit 1,
return,","depth : 0
public void cleanup(){
	int v1 = Log.i(""OTADexopt"", ""Cleaning up OTA Dexopt state."");
	this.mDexoptCommands = 0;
	long v2 = p0.getAvailableSpace();
	this.availableSpaceAfterDexopt = v2;
	p0.performMetricsLogging();
	return;
}
-----
","NONE"
"Lcom/android/server/pm/OtaDexoptService","cleanup()V","1","monitorenter 1,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > = 6,
8 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @11 exception:7,
3 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getMainLowSpaceThreshold()J > 1 @0 exception:2,
5 = invokestatic < Application, Landroid/os/Environment, getDataDirectory()Ljava/io/File; > @4 exception:4,
8 = binaryop(sub) 7 , 3,
return 8,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterDexopt, <Primordial,J> > = 8,
invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, performMetricsLogging()V > 1 @17 exception:9,
4 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
5 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceBefore, <Primordial,J> > 1,
7 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 5 @8 exception:6,
10 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
11 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterBulkDelete, <Primordial,J> > 1,
13 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 11 @21 exception:12,
16 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
17 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterDexopt, <Primordial,J> > 1,
19 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 17 @34 exception:18,
22 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
23 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, importantPackageCount, <Primordial,I> > 1,
26 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
27 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, otherPackageCount, <Primordial,I> > 1,
30 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
31 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountTotal, <Primordial,I> > 1,
34 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
35 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > 1,
38 = getstatic < Application, Ljava/util/concurrent/TimeUnit, NANOSECONDS, <Application,Ljava/util/concurrent/TimeUnit> >,
39 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, otaDexoptTimeStart, <Primordial,J> > 1,
40 = binaryop(sub) 3 , 39,
43 = conversion(I) 42,
44 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
return,
monitorexit 1,
return,","depth : 0
public void cleanup(){
	int v1 = Log.i(""OTADexopt"", ""Cleaning up OTA Dexopt state."");
	this.mDexoptCommands = 0;
	long v2 = p0.getAvailableSpace();
	this.availableSpaceAfterDexopt = v2;
	p0.performMetricsLogging();
	return;
}
-----
depth : 1
public long getAvailableSpace(){
	long v1 = p0.getMainLowSpaceThreshold();
	File v2 = Environment.getDataDirectory();
	long v3 = v2.getUsableSpace();
	return (v3 - v1);
}
-----
depth : 1
public void performMetricsLogging(){
	long v1 = System.nanoTime();
	int v2 = OtaDexoptService.inMegabytes(this.availableSpaceBefore);
	this.metricsLogger.histogram(""ota_dexopt_available_space_before_mb"", v2);
	int v4 = OtaDexoptService.inMegabytes(this.availableSpaceAfterBulkDelete);
	this.metricsLogger.histogram(""ota_dexopt_available_space_after_bulk_delete_mb"", v4);
	int v6 = OtaDexoptService.inMegabytes(this.availableSpaceAfterDexopt);
	this.metricsLogger.histogram(""ota_dexopt_available_space_after_dexopt_mb"", v6);
	this.metricsLogger.histogram(""ota_dexopt_num_important_packages"", this.importantPackageCount);
	this.metricsLogger.histogram(""ota_dexopt_num_other_packages"", this.otherPackageCount);
	this.metricsLogger.histogram(""ota_dexopt_num_commands"", this.dexoptCommandCountTotal);
	this.metricsLogger.histogram(""ota_dexopt_num_commands_executed"", this.dexoptCommandCountExecuted);
	long v12 = TimeUnit.NANOSECONDS.toSeconds((v1 - this.otaDexoptTimeStart));
	this.metricsLogger.histogram(""ota_dexopt_time_s"", v12);
	return;
}
-----
","NONE"
"Lcom/android/server/pm/OtaDexoptService","cleanup()V","2","monitorenter 1,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > = 6,
8 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @11 exception:7,
3 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getMainLowSpaceThreshold()J > 1 @0 exception:2,
4 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mContext, <Application,Landroid/content/Context> > 1,
10 = binaryop(lt) 8 , 9,
conditional branch(eq, to iindex=-1) 10,11,
return 8,
5 = invokestatic < Application, Landroid/os/Environment, getDataDirectory()Ljava/io/File; > @4 exception:4,
8 = binaryop(sub) 7 , 3,
return 8,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterDexopt, <Primordial,J> > = 8,
invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, performMetricsLogging()V > 1 @17 exception:9,
4 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
5 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceBefore, <Primordial,J> > 1,
7 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 5 @8 exception:6,
3 = binaryop(div) 1 , 2,
5 = binaryop(lt) 3 , 4,
conditional branch(le, to iindex=-1) 5,6,
8 = new <Application,Ljava/lang/StringBuilder>@11,
return 23,
10 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
11 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterBulkDelete, <Primordial,J> > 1,
13 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 11 @21 exception:12,
3 = binaryop(div) 1 , 2,
5 = binaryop(lt) 3 , 4,
conditional branch(le, to iindex=-1) 5,6,
8 = new <Application,Ljava/lang/StringBuilder>@11,
return 23,
16 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
17 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterDexopt, <Primordial,J> > 1,
19 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 17 @34 exception:18,
3 = binaryop(div) 1 , 2,
5 = binaryop(lt) 3 , 4,
conditional branch(le, to iindex=-1) 5,6,
8 = new <Application,Ljava/lang/StringBuilder>@11,
return 23,
22 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
23 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, importantPackageCount, <Primordial,I> > 1,
26 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
27 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, otherPackageCount, <Primordial,I> > 1,
30 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
31 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountTotal, <Primordial,I> > 1,
34 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
35 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > 1,
38 = getstatic < Application, Ljava/util/concurrent/TimeUnit, NANOSECONDS, <Application,Ljava/util/concurrent/TimeUnit> >,
39 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, otaDexoptTimeStart, <Primordial,J> > 1,
40 = binaryop(sub) 3 , 39,
43 = conversion(I) 42,
44 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
return,
monitorexit 1,
return,","depth : 0
public void cleanup(){
	int v1 = Log.i(""OTADexopt"", ""Cleaning up OTA Dexopt state."");
	this.mDexoptCommands = 0;
	long v2 = p0.getAvailableSpace();
	this.availableSpaceAfterDexopt = v2;
	p0.performMetricsLogging();
	return;
}
-----
depth : 1
public long getAvailableSpace(){
	long v1 = p0.getMainLowSpaceThreshold();
	File v2 = Environment.getDataDirectory();
	long v3 = v2.getUsableSpace();
	return (v3 - v1);
}
-----
depth : 2
public long getMainLowSpaceThreshold(){
	File v1 = Environment.getDataDirectory();
	StorageManager v2 = StorageManager.from(this.mContext);
	long v3 = v2.getStorageLowBytes(v1);
	return v3;
}
-----
depth : 1
public void performMetricsLogging(){
	long v1 = System.nanoTime();
	int v2 = OtaDexoptService.inMegabytes(this.availableSpaceBefore);
	this.metricsLogger.histogram(""ota_dexopt_available_space_before_mb"", v2);
	int v4 = OtaDexoptService.inMegabytes(this.availableSpaceAfterBulkDelete);
	this.metricsLogger.histogram(""ota_dexopt_available_space_after_bulk_delete_mb"", v4);
	int v6 = OtaDexoptService.inMegabytes(this.availableSpaceAfterDexopt);
	this.metricsLogger.histogram(""ota_dexopt_available_space_after_dexopt_mb"", v6);
	this.metricsLogger.histogram(""ota_dexopt_num_important_packages"", this.importantPackageCount);
	this.metricsLogger.histogram(""ota_dexopt_num_other_packages"", this.otherPackageCount);
	this.metricsLogger.histogram(""ota_dexopt_num_commands"", this.dexoptCommandCountTotal);
	this.metricsLogger.histogram(""ota_dexopt_num_commands_executed"", this.dexoptCommandCountExecuted);
	long v12 = TimeUnit.NANOSECONDS.toSeconds((v1 - this.otaDexoptTimeStart));
	this.metricsLogger.histogram(""ota_dexopt_time_s"", v12);
	return;
}
-----
depth : 2
public int inMegabytes(long p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Recording "");
	StringBuilder v3 = v0.append((p1 / 1048576));
	StringBuilder v4 = v0.append(""MB of free space, overflowing range"");
	String v5 = v0.toString();
	int v6 = Log.w(""OTADexopt"", v5);
	return 2147483647;
}
-----
depth : 2
public int inMegabytes(long p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Recording "");
	StringBuilder v3 = v0.append((p1 / 1048576));
	StringBuilder v4 = v0.append(""MB of free space, overflowing range"");
	String v5 = v0.toString();
	int v6 = Log.w(""OTADexopt"", v5);
	return 2147483647;
}
-----
depth : 2
public int inMegabytes(long p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Recording "");
	StringBuilder v3 = v0.append((p1 / 1048576));
	StringBuilder v4 = v0.append(""MB of free space, overflowing range"");
	String v5 = v0.toString();
	int v6 = Log.w(""OTADexopt"", v5);
	return 2147483647;
}
-----
","NONE"
"Lcom/android/server/pm/OtaDexoptService","cleanup()V","2","monitorenter 1,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > = 6,
8 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getAvailableSpace()J > 1 @11 exception:7,
3 = invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, getMainLowSpaceThreshold()J > 1 @0 exception:2,
4 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mContext, <Application,Landroid/content/Context> > 1,
10 = binaryop(lt) 8 , 9,
conditional branch(eq, to iindex=-1) 10,11,
return 8,
5 = invokestatic < Application, Landroid/os/Environment, getDataDirectory()Ljava/io/File; > @4 exception:4,
8 = binaryop(sub) 7 , 3,
return 8,
putfield 1.< Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterDexopt, <Primordial,J> > = 8,
invokevirtual < Application, Lcom/android/server/pm/OtaDexoptService, performMetricsLogging()V > 1 @17 exception:9,
4 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
5 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceBefore, <Primordial,J> > 1,
7 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 5 @8 exception:6,
3 = binaryop(div) 1 , 2,
5 = binaryop(lt) 3 , 4,
conditional branch(le, to iindex=-1) 5,6,
7 = conversion(I) 3,
return 7,
10 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
11 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterBulkDelete, <Primordial,J> > 1,
13 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 11 @21 exception:12,
3 = binaryop(div) 1 , 2,
5 = binaryop(lt) 3 , 4,
conditional branch(le, to iindex=-1) 5,6,
8 = new <Application,Ljava/lang/StringBuilder>@11,
return 23,
16 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
17 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, availableSpaceAfterDexopt, <Primordial,J> > 1,
19 = invokestatic < Application, Lcom/android/server/pm/OtaDexoptService, inMegabytes(J)I > 17 @34 exception:18,
3 = binaryop(div) 1 , 2,
5 = binaryop(lt) 3 , 4,
conditional branch(le, to iindex=-1) 5,6,
8 = new <Application,Ljava/lang/StringBuilder>@11,
return 23,
22 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
23 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, importantPackageCount, <Primordial,I> > 1,
26 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
27 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, otherPackageCount, <Primordial,I> > 1,
30 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
31 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountTotal, <Primordial,I> > 1,
34 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
35 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, dexoptCommandCountExecuted, <Primordial,I> > 1,
38 = getstatic < Application, Ljava/util/concurrent/TimeUnit, NANOSECONDS, <Application,Ljava/util/concurrent/TimeUnit> >,
39 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, otaDexoptTimeStart, <Primordial,J> > 1,
40 = binaryop(sub) 3 , 39,
43 = conversion(I) 42,
44 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, metricsLogger, <Application,Lcom/android/internal/logging/MetricsLogger> > 1,
return,
monitorexit 1,
return,","depth : 0
public void cleanup(){
	int v1 = Log.i(""OTADexopt"", ""Cleaning up OTA Dexopt state."");
	this.mDexoptCommands = 0;
	long v2 = p0.getAvailableSpace();
	this.availableSpaceAfterDexopt = v2;
	p0.performMetricsLogging();
	return;
}
-----
depth : 1
public long getAvailableSpace(){
	long v1 = p0.getMainLowSpaceThreshold();
	File v2 = Environment.getDataDirectory();
	long v3 = v2.getUsableSpace();
	return (v3 - v1);
}
-----
depth : 2
public long getMainLowSpaceThreshold(){
	File v1 = Environment.getDataDirectory();
	StorageManager v2 = StorageManager.from(this.mContext);
	long v3 = v2.getStorageLowBytes(v1);
	return v3;
}
-----
depth : 1
public void performMetricsLogging(){
	long v1 = System.nanoTime();
	int v2 = OtaDexoptService.inMegabytes(this.availableSpaceBefore);
	this.metricsLogger.histogram(""ota_dexopt_available_space_before_mb"", v2);
	int v4 = OtaDexoptService.inMegabytes(this.availableSpaceAfterBulkDelete);
	this.metricsLogger.histogram(""ota_dexopt_available_space_after_bulk_delete_mb"", v4);
	int v6 = OtaDexoptService.inMegabytes(this.availableSpaceAfterDexopt);
	this.metricsLogger.histogram(""ota_dexopt_available_space_after_dexopt_mb"", v6);
	this.metricsLogger.histogram(""ota_dexopt_num_important_packages"", this.importantPackageCount);
	this.metricsLogger.histogram(""ota_dexopt_num_other_packages"", this.otherPackageCount);
	this.metricsLogger.histogram(""ota_dexopt_num_commands"", this.dexoptCommandCountTotal);
	this.metricsLogger.histogram(""ota_dexopt_num_commands_executed"", this.dexoptCommandCountExecuted);
	long v12 = TimeUnit.NANOSECONDS.toSeconds((v1 - this.otaDexoptTimeStart));
	this.metricsLogger.histogram(""ota_dexopt_time_s"", v12);
	return;
}
-----
depth : 2
public int inMegabytes(long p1){
	return (p1 / 1048576);
}
-----
depth : 2
public int inMegabytes(long p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Recording "");
	StringBuilder v3 = v0.append((p1 / 1048576));
	StringBuilder v4 = v0.append(""MB of free space, overflowing range"");
	String v5 = v0.toString();
	int v6 = Log.w(""OTADexopt"", v5);
	return 2147483647;
}
-----
depth : 2
public int inMegabytes(long p1){
	StringBuilder v0 = new StringBuilder();
	StringBuilder v2 = v0.append(""Recording "");
	StringBuilder v3 = v0.append((p1 / 1048576));
	StringBuilder v4 = v0.append(""MB of free space, overflowing range"");
	String v5 = v0.toString();
	int v6 = Log.w(""OTADexopt"", v5);
	return 2147483647;
}
-----
","NONE"

"Lcom/android/server/pm/OtaDexoptService","isDone()Z","0","monitorenter 1,
2 = getfield < Application, Lcom/android/server/pm/OtaDexoptService, mDexoptCommands, <Application,Ljava/util/List> > 1,
conditional branch(eq, to iindex=-1) 2,3,
monitorexit 1,
return 8,","depth : 0
public boolean isDone(){
	boolean v1 = this.mDexoptCommands.isEmpty();
	return v1;
}
-----
","NONE"



