"Class","Method","Depth","Trace Instruction(s) ...","Java Code Representation","Access Control Level"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearBcb()Z","0","2 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 2,
5 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,3,3 @5 exception:4,
monitorexit 2,
return 5,","depth : 0
public boolean clearBcb(){
	boolean v1 = p0.setupOrClearBcb(0, 0);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearBcb()Z","1","2 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 2,
5 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,3,3 @5 exception:4,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
return 6,
monitorexit 2,
return 5,","depth : 0
public boolean clearBcb(){
	boolean v1 = p0.setupOrClearBcb(0, 0);
	return v1;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearBcb()Z","2","2 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 2,
5 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,3,3 @5 exception:4,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 27 to iindex = 3),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
return,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
2 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket>@0,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  2,6,
return 8,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
3 = getstatic < Application, Ljava/nio/charset/StandardCharsets, UTF_8, <Application,Ljava/nio/charset/Charset> >,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
7 = arraylength 5,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
10 = arraylength 5,
return,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
return 4,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
return,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mLocalSocket, <Application,Landroid/net/LocalSocket> > 1,
return,
return 6,
monitorexit 2,
return 5,","depth : 0
public boolean clearBcb(){
	boolean v1 = p0.setupOrClearBcb(0, 0);
	return v1;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
depth : 2
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public void systemPropertiesSet(String p1, String p2){
	SystemProperties.set(p1, p2);
	return;
}
-----
depth : 2
public RecoverySystemService$UncryptSocket connectService(){
	RecoverySystemService$UncryptSocket v0 = new RecoverySystemService$UncryptSocket();
	boolean v2 = v0.connectService();
	v0.close();
	return phiInstruction;
}
-----
depth : 2
public void sendCommand(String p1){
	byte[] v1 = p1.getBytes(StandardCharsets.UTF_8);
	this.mOutputStream.writeInt(v1.length);
	this.mOutputStream.write(v1, 0, v1.length);
	return;
}
-----
depth : 2
public int getPercentageUncrypted(){
	int v1 = this.mInputStream.readInt();
	return v1;
}
-----
depth : 2
public void sendAck(){
	this.mOutputStream.writeInt(0);
	return;
}
-----
depth : 2
public void close(){
	IoUtils.closeQuietly(this.mInputStream);
	IoUtils.closeQuietly(this.mOutputStream);
	IoUtils.closeQuietly(this.mLocalSocket);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearBcb()Z","2","2 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 2,
5 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,3,3 @5 exception:4,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 29 to iindex = 2),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
return,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
2 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket>@0,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  2,6,
return 8,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
3 = getstatic < Application, Ljava/nio/charset/StandardCharsets, UTF_8, <Application,Ljava/nio/charset/Charset> >,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
7 = arraylength 5,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
10 = arraylength 5,
return,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
return 4,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
return,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mLocalSocket, <Application,Landroid/net/LocalSocket> > 1,
return,
return 6,
monitorexit 2,
return 5,","depth : 0
public boolean clearBcb(){
	boolean v1 = p0.setupOrClearBcb(0, 0);
	return v1;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
depth : 2
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public void systemPropertiesSet(String p1, String p2){
	SystemProperties.set(p1, p2);
	return;
}
-----
depth : 2
public RecoverySystemService$UncryptSocket connectService(){
	RecoverySystemService$UncryptSocket v0 = new RecoverySystemService$UncryptSocket();
	boolean v2 = v0.connectService();
	v0.close();
	return phiInstruction;
}
-----
depth : 2
public void sendCommand(String p1){
	byte[] v1 = p1.getBytes(StandardCharsets.UTF_8);
	this.mOutputStream.writeInt(v1.length);
	this.mOutputStream.write(v1, 0, v1.length);
	return;
}
-----
depth : 2
public int getPercentageUncrypted(){
	int v1 = this.mInputStream.readInt();
	return v1;
}
-----
depth : 2
public void sendAck(){
	this.mOutputStream.writeInt(0);
	return;
}
-----
depth : 2
public void close(){
	IoUtils.closeQuietly(this.mInputStream);
	IoUtils.closeQuietly(this.mOutputStream);
	IoUtils.closeQuietly(this.mLocalSocket);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","rebootRecoveryWithCommand(Ljava/lang/String;)V","0","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 8 @14 exception:9,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 10,11 @20 exception:12,
monitorexit 3,
return,","depth : 0
public void rebootRecoveryWithCommand(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	PowerManager v2 = this.mInjector.getPowerManager();
	v2.reboot(""recovery"");
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootRecoveryWithCommand(Ljava/lang/String;)V","1","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
return 6,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 8 @14 exception:9,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
6 = checkcast <Application,Landroid/os/PowerManager>5 <Application,Landroid/os/PowerManager>,
return 6,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 10,11 @20 exception:12,
monitorexit 3,
return,","depth : 0
public void rebootRecoveryWithCommand(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	PowerManager v2 = this.mInjector.getPowerManager();
	v2.reboot(""recovery"");
	return;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
depth : 1
public PowerManager getPowerManager(){
	Object v1 = this.mContext.getSystemService(""power"");
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootRecoveryWithCommand(Ljava/lang/String;)V","1","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
return 6,
conditional branch(ne, to iindex=-1) 6,7,
monitorexit 3,
return,","depth : 0
public void rebootRecoveryWithCommand(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	return;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootRecoveryWithCommand(Ljava/lang/String;)V","2","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 27 to iindex = 3),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
return,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
2 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket>@0,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  2,6,
return 8,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
3 = getstatic < Application, Ljava/nio/charset/StandardCharsets, UTF_8, <Application,Ljava/nio/charset/Charset> >,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
7 = arraylength 5,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
10 = arraylength 5,
return,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
return 4,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
return,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mLocalSocket, <Application,Landroid/net/LocalSocket> > 1,
return,
return 6,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 8 @14 exception:9,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 10,11 @20 exception:12,
monitorexit 3,
return,","depth : 0
public void rebootRecoveryWithCommand(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	PowerManager v2 = this.mInjector.getPowerManager();
	v2.reboot(""recovery"");
	return;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
depth : 2
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public void systemPropertiesSet(String p1, String p2){
	SystemProperties.set(p1, p2);
	return;
}
-----
depth : 2
public RecoverySystemService$UncryptSocket connectService(){
	RecoverySystemService$UncryptSocket v0 = new RecoverySystemService$UncryptSocket();
	boolean v2 = v0.connectService();
	v0.close();
	return phiInstruction;
}
-----
depth : 2
public void sendCommand(String p1){
	byte[] v1 = p1.getBytes(StandardCharsets.UTF_8);
	this.mOutputStream.writeInt(v1.length);
	this.mOutputStream.write(v1, 0, v1.length);
	return;
}
-----
depth : 2
public int getPercentageUncrypted(){
	int v1 = this.mInputStream.readInt();
	return v1;
}
-----
depth : 2
public void sendAck(){
	this.mOutputStream.writeInt(0);
	return;
}
-----
depth : 2
public void close(){
	IoUtils.closeQuietly(this.mInputStream);
	IoUtils.closeQuietly(this.mOutputStream);
	IoUtils.closeQuietly(this.mLocalSocket);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootRecoveryWithCommand(Ljava/lang/String;)V","2","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 29 to iindex = 2),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
return,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
2 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket>@0,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  2,6,
return 8,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
3 = getstatic < Application, Ljava/nio/charset/StandardCharsets, UTF_8, <Application,Ljava/nio/charset/Charset> >,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
7 = arraylength 5,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
10 = arraylength 5,
return,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
return 4,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
return,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mLocalSocket, <Application,Landroid/net/LocalSocket> > 1,
return,
return 6,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 8 @14 exception:9,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 10,11 @20 exception:12,
monitorexit 3,
return,","depth : 0
public void rebootRecoveryWithCommand(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	PowerManager v2 = this.mInjector.getPowerManager();
	v2.reboot(""recovery"");
	return;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
depth : 2
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public void systemPropertiesSet(String p1, String p2){
	SystemProperties.set(p1, p2);
	return;
}
-----
depth : 2
public RecoverySystemService$UncryptSocket connectService(){
	RecoverySystemService$UncryptSocket v0 = new RecoverySystemService$UncryptSocket();
	boolean v2 = v0.connectService();
	v0.close();
	return phiInstruction;
}
-----
depth : 2
public void sendCommand(String p1){
	byte[] v1 = p1.getBytes(StandardCharsets.UTF_8);
	this.mOutputStream.writeInt(v1.length);
	this.mOutputStream.write(v1, 0, v1.length);
	return;
}
-----
depth : 2
public int getPercentageUncrypted(){
	int v1 = this.mInputStream.readInt();
	return v1;
}
-----
depth : 2
public void sendAck(){
	this.mOutputStream.writeInt(0);
	return;
}
-----
depth : 2
public void close(){
	IoUtils.closeQuietly(this.mInputStream);
	IoUtils.closeQuietly(this.mOutputStream);
	IoUtils.closeQuietly(this.mLocalSocket);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootRecoveryWithCommand(Ljava/lang/String;)V","2","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 27 to iindex = 3),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
return,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
2 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket>@0,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  2,6,
return 8,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
3 = getstatic < Application, Ljava/nio/charset/StandardCharsets, UTF_8, <Application,Ljava/nio/charset/Charset> >,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
7 = arraylength 5,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
10 = arraylength 5,
return,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
return 4,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
return,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mLocalSocket, <Application,Landroid/net/LocalSocket> > 1,
return,
return 6,
conditional branch(ne, to iindex=-1) 6,7,
monitorexit 3,
return,","depth : 0
public void rebootRecoveryWithCommand(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	return;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
depth : 2
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public void systemPropertiesSet(String p1, String p2){
	SystemProperties.set(p1, p2);
	return;
}
-----
depth : 2
public RecoverySystemService$UncryptSocket connectService(){
	RecoverySystemService$UncryptSocket v0 = new RecoverySystemService$UncryptSocket();
	boolean v2 = v0.connectService();
	v0.close();
	return phiInstruction;
}
-----
depth : 2
public void sendCommand(String p1){
	byte[] v1 = p1.getBytes(StandardCharsets.UTF_8);
	this.mOutputStream.writeInt(v1.length);
	this.mOutputStream.write(v1, 0, v1.length);
	return;
}
-----
depth : 2
public int getPercentageUncrypted(){
	int v1 = this.mInputStream.readInt();
	return v1;
}
-----
depth : 2
public void sendAck(){
	this.mOutputStream.writeInt(0);
	return;
}
-----
depth : 2
public void close(){
	IoUtils.closeQuietly(this.mInputStream);
	IoUtils.closeQuietly(this.mOutputStream);
	IoUtils.closeQuietly(this.mLocalSocket);
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I","0","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:5,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,4 @3 exception:6,
return 7,","depth : 0
public int rebootWithLskf(String p1, String p2, boolean p3){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.rebootWithLskfImpl(p1, p2, p3);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I","1","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:5,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,4 @3 exception:6,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, armRebootEscrow(Ljava/lang/String;Z)Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError; > 1,2,4 @0 exception:5,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRebootWithLskf(Ljava/lang/String;ZLcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,2,4,6 @4 exception:7,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationStateOnRebootFailure(Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,6 @7 exception:8,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mRebootErrorCode, <Primordial,I> > 6,
conditional branch(eq, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 11 @17 exception:12,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, deletePrefsFile()V > 13 @21 exception:14,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 15 @26 exception:16,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 17,3 @30 exception:18,
return 19,
return 7,","depth : 0
public int rebootWithLskf(String p1, String p2, boolean p3){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.rebootWithLskfImpl(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int rebootWithLskfImpl(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v1 = p0.armRebootEscrow(p1, p3);
	p0.reportMetricsOnRebootWithLskf(p1, p3, v1);
	p0.clearRoRPreparationStateOnRebootFailure(v1);
	RecoverySystemService$PreferencesManager v4 = this.mInjector.getMetricsPrefs();
	v4.deletePrefsFile();
	PowerManager v6 = this.mInjector.getPowerManager();
	v6.reboot(p2);
	return 1000;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I","1","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:5,
conditional branch(eq, to iindex=-1) 5,6,
return,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,4 @3 exception:6,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, armRebootEscrow(Ljava/lang/String;Z)Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError; > 1,2,4 @0 exception:5,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRebootWithLskf(Ljava/lang/String;ZLcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,2,4,6 @4 exception:7,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationStateOnRebootFailure(Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,6 @7 exception:8,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mRebootErrorCode, <Primordial,I> > 6,
conditional branch(eq, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 11 @17 exception:12,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, deletePrefsFile()V > 13 @21 exception:14,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 15 @26 exception:16,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 17,3 @30 exception:18,
return 19,
return 7,","depth : 0
public int rebootWithLskf(String p1, String p2, boolean p3){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.rebootWithLskfImpl(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int rebootWithLskfImpl(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v1 = p0.armRebootEscrow(p1, p3);
	p0.reportMetricsOnRebootWithLskf(p1, p3, v1);
	p0.clearRoRPreparationStateOnRebootFailure(v1);
	RecoverySystemService$PreferencesManager v4 = this.mInjector.getMetricsPrefs();
	v4.deletePrefsFile();
	PowerManager v6 = this.mInjector.getPowerManager();
	v6.reboot(p2);
	return 1000;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:5,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,4 @3 exception:6,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, armRebootEscrow(Ljava/lang/String;Z)Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError; > 1,2,4 @0 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 7,5,
conditional branch(ne, to iindex=-1) 9,5,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 14,5,
conditional branch(eq, to iindex=-1) 17,5,
21 = new <Application,Ljava/lang/StringBuilder>@84,
32 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError>@104,
return 32,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRebootWithLskf(Ljava/lang/String;ZLcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,2,4,6 @4 exception:7,
5 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
monitorenter 1,
10 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
17 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
20 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
27 = binaryop(lt) 26 , 24,
conditional branch(eq, to iindex=-1) 27,29,
30 = binaryop(lt) 19 , 26,
conditional branch(le, to iindex=-1) 30,29,
32 = binaryop(sub) 19 , 26,
33 = conversion(I) 32,
35 = binaryop(div) 33 , 34,
goto (from iindex= 29 to iindex = 2),
37 = phi  35,28,
38 = new <Application,Ljava/lang/StringBuilder>@54,
55 = new <Application,[Ljava/lang/Object>@8654 ,
arraystore 55[29] = 2,
arraystore 55[56] = 58,
arraystore 55[59] = 61,
arraystore 55[62] = 64,
arraystore 55[65] = 67,
72 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
return,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationStateOnRebootFailure(Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,6 @7 exception:8,
3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, FATAL_ARM_ESCROW_ERRORS, <Application,Landroid/util/FastImmutableArraySet> >,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
conditional branch(ne, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@15,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
return,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mRebootErrorCode, <Primordial,I> > 6,
conditional branch(eq, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 11 @17 exception:12,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mPrefs, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, deletePrefsFile()V > 13 @21 exception:14,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, mMetricsPrefsFile, <Application,Ljava/io/File> > 1,
conditional branch(ne, to iindex=-1) 4,5,
return,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
6 = checkcast <Application,Landroid/os/PowerManager>5 <Application,Landroid/os/PowerManager>,
return 6,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 17,3 @30 exception:18,
return 19,
return 7,","depth : 0
public int rebootWithLskf(String p1, String p2, boolean p3){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.rebootWithLskfImpl(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int rebootWithLskfImpl(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v1 = p0.armRebootEscrow(p1, p3);
	p0.reportMetricsOnRebootWithLskf(p1, p3, v1);
	p0.clearRoRPreparationStateOnRebootFailure(v1);
	RecoverySystemService$PreferencesManager v4 = this.mInjector.getMetricsPrefs();
	v4.deletePrefsFile();
	PowerManager v6 = this.mInjector.getPowerManager();
	v6.reboot(p2);
	return 1000;
}
-----
depth : 2
public RecoverySystemService$RebootPreparationError armRebootEscrow(String p1, boolean p2){
	boolean v1 = p0.isLskfCaptured(p1);
	boolean v2 = p0.verifySlotForNextBoot(p2);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = v4.armRebootEscrow();
	Binder.restoreCallingIdentity(v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Failure to escrow key for reboot, providerErrorCode: "");
	StringBuilder v9 = v6.append(v5);
	String v10 = v6.toString();
	int v11 = Slog.w(""RecoverySystemService"", v10);
	RecoverySystemService$RebootPreparationError v11 = new RecoverySystemService$RebootPreparationError(5000,v5);
	return v11;
}
-----
depth : 2
public void reportMetricsOnRebootWithLskf(String p1, boolean p2, RecoverySystemService$RebootPreparationError p3){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	boolean v2 = p0.useServerBasedRoR();
	int v3 = this.mCallerPreparedForReboot.size();
	long v4 = this.mInjector.getCurrentTimeMillis();
	RecoverySystemService$PreferencesManager v5 = this.mInjector.getMetricsPrefs();
	long v6 = v5.getLong(""lskf_captured_timestamp"", -1);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(p1);
	StringBuilder v9 = v6.append(""_request_lskf_count"");
	String v10 = v6.toString();
	int v11 = v5.getInt(v10, -1);
	int v12 = v5.getInt(""lskf_captured_count"", -1);
	Object v12 = new Object(5);
	Integer v13 = Integer.valueOf(v3);
	Integer v14 = Integer.valueOf(v11);
	Integer v15 = Integer.valueOf(v12);
	Integer v16 = Integer.valueOf(phiInstruction);
	String v17 = String.format(""Reporting reboot with lskf, package name %s, client count %d, request count %d, lskf captured count %d, duration since lskf captured %d seconds."", v12);
	int v18 = Slog.i(""RecoverySystemService"", v17);
	int v19 = p3.getErrorCodeForMetrics();
	this.mInjector.reportRebootEscrowRebootMetrics(v19, v1, v3, v11, p2, v2, phiInstruction, v12);
	return;
}
-----
depth : 2
public void clearRoRPreparationStateOnRebootFailure(RecoverySystemService$RebootPreparationError p1){
	Integer v1 = Integer.valueOf(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	boolean v2 = this.FATAL_ARM_ESCROW_ERRORS.contains(v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Clearing resume on reboot states for all clients on arm escrow error: "");
	StringBuilder v5 = v2.append(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	String v6 = v2.toString();
	int v7 = Slog.w(""RecoverySystemService"", v6);
	p0.clearRoRPreparationState();
	return;
}
-----
depth : 2
public RecoverySystemService$PreferencesManager getMetricsPrefs(){
	return this.mPrefs;
}
-----
depth : 2
public void deletePrefsFile(){
	boolean v1 = this.mMetricsPrefsFile.delete();
	int v2 = Slog.w(""RecoverySystemService"", ""Failed to delete metrics prefs"");
	return;
}
-----
depth : 2
public PowerManager getPowerManager(){
	Object v1 = this.mContext.getSystemService(""power"");
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:5,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,4 @3 exception:6,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, armRebootEscrow(Ljava/lang/String;Z)Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError; > 1,2,4 @0 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 7,5,
conditional branch(ne, to iindex=-1) 9,5,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 14,5,
conditional branch(eq, to iindex=-1) 17,5,
21 = new <Application,Ljava/lang/StringBuilder>@84,
32 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError>@104,
return 32,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRebootWithLskf(Ljava/lang/String;ZLcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,2,4,6 @4 exception:7,
5 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
monitorenter 1,
10 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
17 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
20 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
27 = binaryop(lt) 26 , 24,
conditional branch(eq, to iindex=-1) 27,29,
30 = binaryop(lt) 19 , 26,
conditional branch(le, to iindex=-1) 30,29,
32 = binaryop(sub) 19 , 26,
33 = conversion(I) 32,
35 = binaryop(div) 33 , 34,
goto (from iindex= 29 to iindex = 2),
37 = phi  35,28,
38 = new <Application,Ljava/lang/StringBuilder>@54,
55 = new <Application,[Ljava/lang/Object>@8654 ,
arraystore 55[29] = 2,
arraystore 55[56] = 58,
arraystore 55[59] = 61,
arraystore 55[62] = 64,
arraystore 55[65] = 67,
72 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
return,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationStateOnRebootFailure(Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,6 @7 exception:8,
3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, FATAL_ARM_ESCROW_ERRORS, <Application,Landroid/util/FastImmutableArraySet> >,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
conditional branch(ne, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@15,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
return,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mRebootErrorCode, <Primordial,I> > 6,
conditional branch(eq, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 11 @17 exception:12,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mPrefs, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, deletePrefsFile()V > 13 @21 exception:14,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, mMetricsPrefsFile, <Application,Ljava/io/File> > 1,
conditional branch(ne, to iindex=-1) 4,5,
return,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
6 = checkcast <Application,Landroid/os/PowerManager>5 <Application,Landroid/os/PowerManager>,
return 6,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 17,3 @30 exception:18,
return 19,
return 7,","depth : 0
public int rebootWithLskf(String p1, String p2, boolean p3){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.rebootWithLskfImpl(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int rebootWithLskfImpl(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v1 = p0.armRebootEscrow(p1, p3);
	p0.reportMetricsOnRebootWithLskf(p1, p3, v1);
	p0.clearRoRPreparationStateOnRebootFailure(v1);
	RecoverySystemService$PreferencesManager v4 = this.mInjector.getMetricsPrefs();
	v4.deletePrefsFile();
	PowerManager v6 = this.mInjector.getPowerManager();
	v6.reboot(p2);
	return 1000;
}
-----
depth : 2
public RecoverySystemService$RebootPreparationError armRebootEscrow(String p1, boolean p2){
	boolean v1 = p0.isLskfCaptured(p1);
	boolean v2 = p0.verifySlotForNextBoot(p2);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = v4.armRebootEscrow();
	Binder.restoreCallingIdentity(v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Failure to escrow key for reboot, providerErrorCode: "");
	StringBuilder v9 = v6.append(v5);
	String v10 = v6.toString();
	int v11 = Slog.w(""RecoverySystemService"", v10);
	RecoverySystemService$RebootPreparationError v11 = new RecoverySystemService$RebootPreparationError(5000,v5);
	return v11;
}
-----
depth : 2
public void reportMetricsOnRebootWithLskf(String p1, boolean p2, RecoverySystemService$RebootPreparationError p3){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	boolean v2 = p0.useServerBasedRoR();
	int v3 = this.mCallerPreparedForReboot.size();
	long v4 = this.mInjector.getCurrentTimeMillis();
	RecoverySystemService$PreferencesManager v5 = this.mInjector.getMetricsPrefs();
	long v6 = v5.getLong(""lskf_captured_timestamp"", -1);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(p1);
	StringBuilder v9 = v6.append(""_request_lskf_count"");
	String v10 = v6.toString();
	int v11 = v5.getInt(v10, -1);
	int v12 = v5.getInt(""lskf_captured_count"", -1);
	Object v12 = new Object(5);
	Integer v13 = Integer.valueOf(v3);
	Integer v14 = Integer.valueOf(v11);
	Integer v15 = Integer.valueOf(v12);
	Integer v16 = Integer.valueOf(phiInstruction);
	String v17 = String.format(""Reporting reboot with lskf, package name %s, client count %d, request count %d, lskf captured count %d, duration since lskf captured %d seconds."", v12);
	int v18 = Slog.i(""RecoverySystemService"", v17);
	int v19 = p3.getErrorCodeForMetrics();
	this.mInjector.reportRebootEscrowRebootMetrics(v19, v1, v3, v11, p2, v2, phiInstruction, v12);
	return;
}
-----
depth : 2
public void clearRoRPreparationStateOnRebootFailure(RecoverySystemService$RebootPreparationError p1){
	Integer v1 = Integer.valueOf(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	boolean v2 = this.FATAL_ARM_ESCROW_ERRORS.contains(v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Clearing resume on reboot states for all clients on arm escrow error: "");
	StringBuilder v5 = v2.append(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	String v6 = v2.toString();
	int v7 = Slog.w(""RecoverySystemService"", v6);
	p0.clearRoRPreparationState();
	return;
}
-----
depth : 2
public RecoverySystemService$PreferencesManager getMetricsPrefs(){
	return this.mPrefs;
}
-----
depth : 2
public void deletePrefsFile(){
	boolean v1 = this.mMetricsPrefsFile.delete();
	return;
}
-----
depth : 2
public PowerManager getPowerManager(){
	Object v1 = this.mContext.getSystemService(""power"");
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskf(Ljava/lang/String;Ljava/lang/String;Z)I","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:5,
conditional branch(eq, to iindex=-1) 5,6,
return,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,4 @3 exception:6,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, armRebootEscrow(Ljava/lang/String;Z)Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError; > 1,2,4 @0 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 7,5,
conditional branch(ne, to iindex=-1) 9,5,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 14,5,
conditional branch(eq, to iindex=-1) 17,5,
21 = new <Application,Ljava/lang/StringBuilder>@84,
32 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError>@104,
return 32,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRebootWithLskf(Ljava/lang/String;ZLcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,2,4,6 @4 exception:7,
5 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
monitorenter 1,
10 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
17 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
20 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
27 = binaryop(lt) 26 , 24,
conditional branch(eq, to iindex=-1) 27,29,
30 = binaryop(lt) 19 , 26,
conditional branch(le, to iindex=-1) 30,29,
32 = binaryop(sub) 19 , 26,
33 = conversion(I) 32,
35 = binaryop(div) 33 , 34,
goto (from iindex= 29 to iindex = 2),
37 = phi  35,28,
38 = new <Application,Ljava/lang/StringBuilder>@54,
55 = new <Application,[Ljava/lang/Object>@8654 ,
arraystore 55[29] = 2,
arraystore 55[56] = 58,
arraystore 55[59] = 61,
arraystore 55[62] = 64,
arraystore 55[65] = 67,
72 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
return,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationStateOnRebootFailure(Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,6 @7 exception:8,
3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, FATAL_ARM_ESCROW_ERRORS, <Application,Landroid/util/FastImmutableArraySet> >,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
conditional branch(ne, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@15,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
return,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mRebootErrorCode, <Primordial,I> > 6,
conditional branch(eq, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 11 @17 exception:12,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mPrefs, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, deletePrefsFile()V > 13 @21 exception:14,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, mMetricsPrefsFile, <Application,Ljava/io/File> > 1,
conditional branch(ne, to iindex=-1) 4,5,
return,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
6 = checkcast <Application,Landroid/os/PowerManager>5 <Application,Landroid/os/PowerManager>,
return 6,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 17,3 @30 exception:18,
return 19,
return 7,","depth : 0
public int rebootWithLskf(String p1, String p2, boolean p3){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.rebootWithLskfImpl(p1, p2, p3);
	return v2;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int rebootWithLskfImpl(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v1 = p0.armRebootEscrow(p1, p3);
	p0.reportMetricsOnRebootWithLskf(p1, p3, v1);
	p0.clearRoRPreparationStateOnRebootFailure(v1);
	RecoverySystemService$PreferencesManager v4 = this.mInjector.getMetricsPrefs();
	v4.deletePrefsFile();
	PowerManager v6 = this.mInjector.getPowerManager();
	v6.reboot(p2);
	return 1000;
}
-----
depth : 2
public RecoverySystemService$RebootPreparationError armRebootEscrow(String p1, boolean p2){
	boolean v1 = p0.isLskfCaptured(p1);
	boolean v2 = p0.verifySlotForNextBoot(p2);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = v4.armRebootEscrow();
	Binder.restoreCallingIdentity(v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Failure to escrow key for reboot, providerErrorCode: "");
	StringBuilder v9 = v6.append(v5);
	String v10 = v6.toString();
	int v11 = Slog.w(""RecoverySystemService"", v10);
	RecoverySystemService$RebootPreparationError v11 = new RecoverySystemService$RebootPreparationError(5000,v5);
	return v11;
}
-----
depth : 2
public void reportMetricsOnRebootWithLskf(String p1, boolean p2, RecoverySystemService$RebootPreparationError p3){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	boolean v2 = p0.useServerBasedRoR();
	int v3 = this.mCallerPreparedForReboot.size();
	long v4 = this.mInjector.getCurrentTimeMillis();
	RecoverySystemService$PreferencesManager v5 = this.mInjector.getMetricsPrefs();
	long v6 = v5.getLong(""lskf_captured_timestamp"", -1);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(p1);
	StringBuilder v9 = v6.append(""_request_lskf_count"");
	String v10 = v6.toString();
	int v11 = v5.getInt(v10, -1);
	int v12 = v5.getInt(""lskf_captured_count"", -1);
	Object v12 = new Object(5);
	Integer v13 = Integer.valueOf(v3);
	Integer v14 = Integer.valueOf(v11);
	Integer v15 = Integer.valueOf(v12);
	Integer v16 = Integer.valueOf(phiInstruction);
	String v17 = String.format(""Reporting reboot with lskf, package name %s, client count %d, request count %d, lskf captured count %d, duration since lskf captured %d seconds."", v12);
	int v18 = Slog.i(""RecoverySystemService"", v17);
	int v19 = p3.getErrorCodeForMetrics();
	this.mInjector.reportRebootEscrowRebootMetrics(v19, v1, v3, v11, p2, v2, phiInstruction, v12);
	return;
}
-----
depth : 2
public void clearRoRPreparationStateOnRebootFailure(RecoverySystemService$RebootPreparationError p1){
	Integer v1 = Integer.valueOf(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	boolean v2 = this.FATAL_ARM_ESCROW_ERRORS.contains(v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Clearing resume on reboot states for all clients on arm escrow error: "");
	StringBuilder v5 = v2.append(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	String v6 = v2.toString();
	int v7 = Slog.w(""RecoverySystemService"", v6);
	p0.clearRoRPreparationState();
	return;
}
-----
depth : 2
public RecoverySystemService$PreferencesManager getMetricsPrefs(){
	return this.mPrefs;
}
-----
depth : 2
public void deletePrefsFile(){
	boolean v1 = this.mMetricsPrefsFile.delete();
	int v2 = Slog.w(""RecoverySystemService"", ""Failed to delete metrics prefs"");
	return;
}
-----
depth : 2
public PowerManager getPowerManager(){
	Object v1 = this.mContext.getSystemService(""power"");
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I","0","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,8 @9 exception:9,
return 10,","depth : 0
public int rebootWithLskfAssumeSlotSwitch(String p1, String p2){
	int v2 = p0.rebootWithLskfImpl(p1, p2, 1);
	return v2;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I","1","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,8 @9 exception:9,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, armRebootEscrow(Ljava/lang/String;Z)Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError; > 1,2,4 @0 exception:5,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRebootWithLskf(Ljava/lang/String;ZLcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,2,4,6 @4 exception:7,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationStateOnRebootFailure(Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,6 @7 exception:8,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mRebootErrorCode, <Primordial,I> > 6,
conditional branch(eq, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 11 @17 exception:12,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, deletePrefsFile()V > 13 @21 exception:14,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 15 @26 exception:16,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 17,3 @30 exception:18,
return 19,
return 10,","depth : 0
public int rebootWithLskfAssumeSlotSwitch(String p1, String p2){
	int v2 = p0.rebootWithLskfImpl(p1, p2, 1);
	return v2;
}
-----
depth : 1
public int rebootWithLskfImpl(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v1 = p0.armRebootEscrow(p1, p3);
	p0.reportMetricsOnRebootWithLskf(p1, p3, v1);
	p0.clearRoRPreparationStateOnRebootFailure(v1);
	RecoverySystemService$PreferencesManager v4 = this.mInjector.getMetricsPrefs();
	v4.deletePrefsFile();
	PowerManager v6 = this.mInjector.getPowerManager();
	v6.reboot(p2);
	return 1000;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I","2","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,8 @9 exception:9,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, armRebootEscrow(Ljava/lang/String;Z)Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError; > 1,2,4 @0 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 7,5,
conditional branch(ne, to iindex=-1) 9,5,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 14,5,
conditional branch(eq, to iindex=-1) 17,5,
21 = new <Application,Ljava/lang/StringBuilder>@84,
32 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError>@104,
return 32,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRebootWithLskf(Ljava/lang/String;ZLcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,2,4,6 @4 exception:7,
5 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
monitorenter 1,
10 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
17 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
20 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
27 = binaryop(lt) 26 , 24,
conditional branch(eq, to iindex=-1) 27,29,
30 = binaryop(lt) 19 , 26,
conditional branch(le, to iindex=-1) 30,29,
32 = binaryop(sub) 19 , 26,
33 = conversion(I) 32,
35 = binaryop(div) 33 , 34,
goto (from iindex= 29 to iindex = 2),
37 = phi  35,28,
38 = new <Application,Ljava/lang/StringBuilder>@54,
55 = new <Application,[Ljava/lang/Object>@8654 ,
arraystore 55[29] = 2,
arraystore 55[56] = 58,
arraystore 55[59] = 61,
arraystore 55[62] = 64,
arraystore 55[65] = 67,
72 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
return,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationStateOnRebootFailure(Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,6 @7 exception:8,
3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, FATAL_ARM_ESCROW_ERRORS, <Application,Landroid/util/FastImmutableArraySet> >,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
conditional branch(ne, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@15,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
return,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mRebootErrorCode, <Primordial,I> > 6,
conditional branch(eq, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 11 @17 exception:12,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mPrefs, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, deletePrefsFile()V > 13 @21 exception:14,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, mMetricsPrefsFile, <Application,Ljava/io/File> > 1,
conditional branch(ne, to iindex=-1) 4,5,
return,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
6 = checkcast <Application,Landroid/os/PowerManager>5 <Application,Landroid/os/PowerManager>,
return 6,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 17,3 @30 exception:18,
return 19,
return 10,","depth : 0
public int rebootWithLskfAssumeSlotSwitch(String p1, String p2){
	int v2 = p0.rebootWithLskfImpl(p1, p2, 1);
	return v2;
}
-----
depth : 1
public int rebootWithLskfImpl(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v1 = p0.armRebootEscrow(p1, p3);
	p0.reportMetricsOnRebootWithLskf(p1, p3, v1);
	p0.clearRoRPreparationStateOnRebootFailure(v1);
	RecoverySystemService$PreferencesManager v4 = this.mInjector.getMetricsPrefs();
	v4.deletePrefsFile();
	PowerManager v6 = this.mInjector.getPowerManager();
	v6.reboot(p2);
	return 1000;
}
-----
depth : 2
public RecoverySystemService$RebootPreparationError armRebootEscrow(String p1, boolean p2){
	boolean v1 = p0.isLskfCaptured(p1);
	boolean v2 = p0.verifySlotForNextBoot(p2);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = v4.armRebootEscrow();
	Binder.restoreCallingIdentity(v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Failure to escrow key for reboot, providerErrorCode: "");
	StringBuilder v9 = v6.append(v5);
	String v10 = v6.toString();
	int v11 = Slog.w(""RecoverySystemService"", v10);
	RecoverySystemService$RebootPreparationError v11 = new RecoverySystemService$RebootPreparationError(5000,v5);
	return v11;
}
-----
depth : 2
public void reportMetricsOnRebootWithLskf(String p1, boolean p2, RecoverySystemService$RebootPreparationError p3){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	boolean v2 = p0.useServerBasedRoR();
	int v3 = this.mCallerPreparedForReboot.size();
	long v4 = this.mInjector.getCurrentTimeMillis();
	RecoverySystemService$PreferencesManager v5 = this.mInjector.getMetricsPrefs();
	long v6 = v5.getLong(""lskf_captured_timestamp"", -1);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(p1);
	StringBuilder v9 = v6.append(""_request_lskf_count"");
	String v10 = v6.toString();
	int v11 = v5.getInt(v10, -1);
	int v12 = v5.getInt(""lskf_captured_count"", -1);
	Object v12 = new Object(5);
	Integer v13 = Integer.valueOf(v3);
	Integer v14 = Integer.valueOf(v11);
	Integer v15 = Integer.valueOf(v12);
	Integer v16 = Integer.valueOf(phiInstruction);
	String v17 = String.format(""Reporting reboot with lskf, package name %s, client count %d, request count %d, lskf captured count %d, duration since lskf captured %d seconds."", v12);
	int v18 = Slog.i(""RecoverySystemService"", v17);
	int v19 = p3.getErrorCodeForMetrics();
	this.mInjector.reportRebootEscrowRebootMetrics(v19, v1, v3, v11, p2, v2, phiInstruction, v12);
	return;
}
-----
depth : 2
public void clearRoRPreparationStateOnRebootFailure(RecoverySystemService$RebootPreparationError p1){
	Integer v1 = Integer.valueOf(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	boolean v2 = this.FATAL_ARM_ESCROW_ERRORS.contains(v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Clearing resume on reboot states for all clients on arm escrow error: "");
	StringBuilder v5 = v2.append(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	String v6 = v2.toString();
	int v7 = Slog.w(""RecoverySystemService"", v6);
	p0.clearRoRPreparationState();
	return;
}
-----
depth : 2
public RecoverySystemService$PreferencesManager getMetricsPrefs(){
	return this.mPrefs;
}
-----
depth : 2
public void deletePrefsFile(){
	boolean v1 = this.mMetricsPrefsFile.delete();
	int v2 = Slog.w(""RecoverySystemService"", ""Failed to delete metrics prefs"");
	return;
}
-----
depth : 2
public PowerManager getPowerManager(){
	Object v1 = this.mContext.getSystemService(""power"");
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","rebootWithLskfAssumeSlotSwitch(Ljava/lang/String;Ljava/lang/String;)I","2","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, rebootWithLskfImpl(Ljava/lang/String;Ljava/lang/String;Z)I > 1,2,3,8 @9 exception:9,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, armRebootEscrow(Ljava/lang/String;Z)Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError; > 1,2,4 @0 exception:5,
conditional branch(ne, to iindex=-1) 2,5,
conditional branch(ne, to iindex=-1) 7,5,
conditional branch(ne, to iindex=-1) 9,5,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 14,5,
conditional branch(eq, to iindex=-1) 17,5,
21 = new <Application,Ljava/lang/StringBuilder>@84,
32 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError>@104,
return 32,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRebootWithLskf(Ljava/lang/String;ZLcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,2,4,6 @4 exception:7,
5 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
monitorenter 1,
10 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
17 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
20 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
27 = binaryop(lt) 26 , 24,
conditional branch(eq, to iindex=-1) 27,29,
30 = binaryop(lt) 19 , 26,
conditional branch(le, to iindex=-1) 30,29,
32 = binaryop(sub) 19 , 26,
33 = conversion(I) 32,
35 = binaryop(div) 33 , 34,
goto (from iindex= 29 to iindex = 2),
37 = phi  35,28,
38 = new <Application,Ljava/lang/StringBuilder>@54,
55 = new <Application,[Ljava/lang/Object>@8654 ,
arraystore 55[29] = 2,
arraystore 55[56] = 58,
arraystore 55[59] = 61,
arraystore 55[62] = 64,
arraystore 55[65] = 67,
72 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
return,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationStateOnRebootFailure(Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError;)V > 1,6 @7 exception:8,
3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, FATAL_ARM_ESCROW_ERRORS, <Application,Landroid/util/FastImmutableArraySet> >,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
conditional branch(ne, to iindex=-1) 8,9,
10 = new <Application,Ljava/lang/StringBuilder>@15,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mProviderErrorCode, <Primordial,I> > 2,
return,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$RebootPreparationError, mRebootErrorCode, <Primordial,I> > 6,
conditional branch(eq, to iindex=-1) 9,10,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 11 @17 exception:12,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mPrefs, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager> > 1,
return 2,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, deletePrefsFile()V > 13 @21 exception:14,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, mMetricsPrefsFile, <Application,Ljava/io/File> > 1,
conditional branch(ne, to iindex=-1) 4,5,
return,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getPowerManager()Landroid/os/PowerManager; > 15 @26 exception:16,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
6 = checkcast <Application,Landroid/os/PowerManager>5 <Application,Landroid/os/PowerManager>,
return 6,
invokevirtual < Application, Landroid/os/PowerManager, reboot(Ljava/lang/String;)V > 17,3 @30 exception:18,
return 19,
return 10,","depth : 0
public int rebootWithLskfAssumeSlotSwitch(String p1, String p2){
	int v2 = p0.rebootWithLskfImpl(p1, p2, 1);
	return v2;
}
-----
depth : 1
public int rebootWithLskfImpl(String p1, String p2, boolean p3){
	RecoverySystemService$RebootPreparationError v1 = p0.armRebootEscrow(p1, p3);
	p0.reportMetricsOnRebootWithLskf(p1, p3, v1);
	p0.clearRoRPreparationStateOnRebootFailure(v1);
	RecoverySystemService$PreferencesManager v4 = this.mInjector.getMetricsPrefs();
	v4.deletePrefsFile();
	PowerManager v6 = this.mInjector.getPowerManager();
	v6.reboot(p2);
	return 1000;
}
-----
depth : 2
public RecoverySystemService$RebootPreparationError armRebootEscrow(String p1, boolean p2){
	boolean v1 = p0.isLskfCaptured(p1);
	boolean v2 = p0.verifySlotForNextBoot(p2);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = v4.armRebootEscrow();
	Binder.restoreCallingIdentity(v3);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""Failure to escrow key for reboot, providerErrorCode: "");
	StringBuilder v9 = v6.append(v5);
	String v10 = v6.toString();
	int v11 = Slog.w(""RecoverySystemService"", v10);
	RecoverySystemService$RebootPreparationError v11 = new RecoverySystemService$RebootPreparationError(5000,v5);
	return v11;
}
-----
depth : 2
public void reportMetricsOnRebootWithLskf(String p1, boolean p2, RecoverySystemService$RebootPreparationError p3){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	boolean v2 = p0.useServerBasedRoR();
	int v3 = this.mCallerPreparedForReboot.size();
	long v4 = this.mInjector.getCurrentTimeMillis();
	RecoverySystemService$PreferencesManager v5 = this.mInjector.getMetricsPrefs();
	long v6 = v5.getLong(""lskf_captured_timestamp"", -1);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(p1);
	StringBuilder v9 = v6.append(""_request_lskf_count"");
	String v10 = v6.toString();
	int v11 = v5.getInt(v10, -1);
	int v12 = v5.getInt(""lskf_captured_count"", -1);
	Object v12 = new Object(5);
	Integer v13 = Integer.valueOf(v3);
	Integer v14 = Integer.valueOf(v11);
	Integer v15 = Integer.valueOf(v12);
	Integer v16 = Integer.valueOf(phiInstruction);
	String v17 = String.format(""Reporting reboot with lskf, package name %s, client count %d, request count %d, lskf captured count %d, duration since lskf captured %d seconds."", v12);
	int v18 = Slog.i(""RecoverySystemService"", v17);
	int v19 = p3.getErrorCodeForMetrics();
	this.mInjector.reportRebootEscrowRebootMetrics(v19, v1, v3, v11, p2, v2, phiInstruction, v12);
	return;
}
-----
depth : 2
public void clearRoRPreparationStateOnRebootFailure(RecoverySystemService$RebootPreparationError p1){
	Integer v1 = Integer.valueOf(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	boolean v2 = this.FATAL_ARM_ESCROW_ERRORS.contains(v1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Clearing resume on reboot states for all clients on arm escrow error: "");
	StringBuilder v5 = v2.append(RecoverySystemService$RebootPreparationError.mProviderErrorCode);
	String v6 = v2.toString();
	int v7 = Slog.w(""RecoverySystemService"", v6);
	p0.clearRoRPreparationState();
	return;
}
-----
depth : 2
public RecoverySystemService$PreferencesManager getMetricsPrefs(){
	return this.mPrefs;
}
-----
depth : 2
public void deletePrefsFile(){
	boolean v1 = this.mMetricsPrefsFile.delete();
	return;
}
-----
depth : 2
public PowerManager getPowerManager(){
	Object v1 = this.mContext.getSystemService(""power"");
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","allocateSpaceForUpdate(Ljava/lang/String;)Z","0","8 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, isUpdatableApexSupported()Z > @8 exception:7,
conditional branch(ne, to iindex=-1) 8,5,
14 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, getCompressedApexInfoList(Ljava/lang/String;)Landroid/apex/CompressedApexInfoList; > 2 @27 exception:13,
conditional branch(ne, to iindex=-1) 14,5,
33 = getCaughtException ,
goto (from iindex= 31 to iindex = 5),
return 5,","depth : 0
public boolean allocateSpaceForUpdate(String p1){
	boolean v2 = RecoverySystemService.isUpdatableApexSupported();
	long v3 = Binder.clearCallingIdentity();
	CompressedApexInfoList v4 = RecoverySystemService.getCompressedApexInfoList(p1);
	int v5 = Slog.e(""RecoverySystemService"", ""Failed to reserve space for compressed apex: "", caughtException);
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","allocateSpaceForUpdate(Ljava/lang/String;)Z","1","8 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, isUpdatableApexSupported()Z > @8 exception:7,
2 = invokestatic < Application, Landroid/sysprop/ApexProperties, updatable()Ljava/util/Optional; > @0 exception:1,
3 = getstatic < Application, Ljava/lang/Boolean, FALSE, <Application,Ljava/lang/Boolean> >,
6 = checkcast <Application,Ljava/lang/Boolean>5 <Application,Ljava/lang/Boolean>,
return 8,
conditional branch(ne, to iindex=-1) 8,5,
14 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, getCompressedApexInfoList(Ljava/lang/String;)Landroid/apex/CompressedApexInfoList; > 2 @27 exception:13,
3 = new <Application,Ljava/util/zip/ZipFile>@2,
conditional branch(ne, to iindex=-1) 7,8,
12 = binaryop(lt) 10 , 11,
conditional branch(ge, to iindex=-1) 12,8,
34 = binaryop(lt) 32 , 33,
conditional branch(ne, to iindex=-1) 34,8,
111 = new <Application,Landroid/apex/CompressedApexInfoList>@41,
113 = new <Application,[Landroid/apex/CompressedApexInfo>@478 ,
putfield 111.< Application, Landroid/apex/CompressedApexInfoList, apexInfos, <Application,[Landroid/apex/CompressedApexInfo> > = 113,
return 111,
conditional branch(ne, to iindex=-1) 14,5,
33 = getCaughtException ,
goto (from iindex= 31 to iindex = 5),
return 5,","depth : 0
public boolean allocateSpaceForUpdate(String p1){
	boolean v2 = RecoverySystemService.isUpdatableApexSupported();
	long v3 = Binder.clearCallingIdentity();
	CompressedApexInfoList v4 = RecoverySystemService.getCompressedApexInfoList(p1);
	int v5 = Slog.e(""RecoverySystemService"", ""Failed to reserve space for compressed apex: "", caughtException);
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public boolean isUpdatableApexSupported(){
	Optional v1 = ApexProperties.updatable();
	Object v2 = v1.orElse(Boolean.FALSE);
	boolean v3 = v2.booleanValue();
	return v3;
}
-----
depth : 1
public CompressedApexInfoList getCompressedApexInfoList(String p1){
	ZipFile v0 = new ZipFile(p1);
	ZipEntry v2 = v0.getEntry(""apex_info.pb"");
	long v3 = v2.getSize();
	long v4 = v2.getSize();
	CompressedApexInfoList v4 = new CompressedApexInfoList();
	CompressedApexInfo v5 = new CompressedApexInfo(0);
	CompressedApexInfoList.apexInfos = v5;
	v0.close();
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","allocateSpaceForUpdate(Ljava/lang/String;)Z","1","8 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, isUpdatableApexSupported()Z > @8 exception:7,
2 = invokestatic < Application, Landroid/sysprop/ApexProperties, updatable()Ljava/util/Optional; > @0 exception:1,
3 = getstatic < Application, Ljava/lang/Boolean, FALSE, <Application,Ljava/lang/Boolean> >,
6 = checkcast <Application,Ljava/lang/Boolean>5 <Application,Ljava/lang/Boolean>,
return 8,
conditional branch(ne, to iindex=-1) 8,5,
14 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, getCompressedApexInfoList(Ljava/lang/String;)Landroid/apex/CompressedApexInfoList; > 2 @27 exception:13,
3 = new <Application,Ljava/util/zip/ZipFile>@2,
conditional branch(ne, to iindex=-1) 7,8,
12 = binaryop(lt) 10 , 11,
conditional branch(ge, to iindex=-1) 12,8,
34 = binaryop(lt) 32 , 33,
conditional branch(ne, to iindex=-1) 34,8,
111 = new <Application,Landroid/apex/CompressedApexInfoList>@41,
113 = new <Application,[Landroid/apex/CompressedApexInfo>@478 ,
putfield 111.< Application, Landroid/apex/CompressedApexInfoList, apexInfos, <Application,[Landroid/apex/CompressedApexInfo> > = 113,
return 111,
conditional branch(ne, to iindex=-1) 14,5,
33 = getCaughtException ,
goto (from iindex= 31 to iindex = 5),
return 5,","depth : 0
public boolean allocateSpaceForUpdate(String p1){
	boolean v2 = RecoverySystemService.isUpdatableApexSupported();
	long v3 = Binder.clearCallingIdentity();
	CompressedApexInfoList v4 = RecoverySystemService.getCompressedApexInfoList(p1);
	int v5 = Log.i(""RecoverySystemService"", ""apex_info.pb not present in OTA package. Assuming device doesn't support compressedAPEX, continueing without allocating space."");
	int v6 = Slog.e(""RecoverySystemService"", ""Failed to reserve space for compressed apex: "", caughtException);
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public boolean isUpdatableApexSupported(){
	Optional v1 = ApexProperties.updatable();
	Object v2 = v1.orElse(Boolean.FALSE);
	boolean v3 = v2.booleanValue();
	return v3;
}
-----
depth : 1
public CompressedApexInfoList getCompressedApexInfoList(String p1){
	ZipFile v0 = new ZipFile(p1);
	ZipEntry v2 = v0.getEntry(""apex_info.pb"");
	long v3 = v2.getSize();
	long v4 = v2.getSize();
	CompressedApexInfoList v4 = new CompressedApexInfoList();
	CompressedApexInfo v5 = new CompressedApexInfo(0);
	CompressedApexInfoList.apexInfos = v5;
	v0.close();
	return v4;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","allocateSpaceForUpdate(Ljava/lang/String;)Z","2","8 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, isUpdatableApexSupported()Z > @8 exception:7,
2 = invokestatic < Application, Landroid/sysprop/ApexProperties, updatable()Ljava/util/Optional; > @0 exception:1,
return 7,
3 = getstatic < Application, Ljava/lang/Boolean, FALSE, <Application,Ljava/lang/Boolean> >,
6 = checkcast <Application,Ljava/lang/Boolean>5 <Application,Ljava/lang/Boolean>,
return 8,
conditional branch(ne, to iindex=-1) 8,5,
14 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, getCompressedApexInfoList(Ljava/lang/String;)Landroid/apex/CompressedApexInfoList; > 2 @27 exception:13,
conditional branch(ne, to iindex=-1) 14,5,
33 = getCaughtException ,
goto (from iindex= 31 to iindex = 5),
return 5,","depth : 0
public boolean allocateSpaceForUpdate(String p1){
	boolean v2 = RecoverySystemService.isUpdatableApexSupported();
	long v3 = Binder.clearCallingIdentity();
	CompressedApexInfoList v4 = RecoverySystemService.getCompressedApexInfoList(p1);
	int v5 = Slog.e(""RecoverySystemService"", ""Failed to reserve space for compressed apex: "", caughtException);
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public boolean isUpdatableApexSupported(){
	Optional v1 = ApexProperties.updatable();
	Object v2 = v1.orElse(Boolean.FALSE);
	boolean v3 = v2.booleanValue();
	return v3;
}
-----
depth : 2
public Optional updatable(){
	String v1 = SystemProperties.get(""ro.apex.updatable"");
	Boolean v2 = ApexProperties.tryParseBoolean(v1);
	Optional v3 = Optional.ofNullable(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","allocateSpaceForUpdate(Ljava/lang/String;)Z","2","8 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, isUpdatableApexSupported()Z > @8 exception:7,
2 = invokestatic < Application, Landroid/sysprop/ApexProperties, updatable()Ljava/util/Optional; > @0 exception:1,
return 7,
3 = getstatic < Application, Ljava/lang/Boolean, FALSE, <Application,Ljava/lang/Boolean> >,
6 = checkcast <Application,Ljava/lang/Boolean>5 <Application,Ljava/lang/Boolean>,
return 8,
conditional branch(ne, to iindex=-1) 8,5,
14 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, getCompressedApexInfoList(Ljava/lang/String;)Landroid/apex/CompressedApexInfoList; > 2 @27 exception:13,
conditional branch(ne, to iindex=-1) 14,5,
33 = getCaughtException ,
goto (from iindex= 31 to iindex = 5),
return 5,","depth : 0
public boolean allocateSpaceForUpdate(String p1){
	boolean v2 = RecoverySystemService.isUpdatableApexSupported();
	long v3 = Binder.clearCallingIdentity();
	CompressedApexInfoList v4 = RecoverySystemService.getCompressedApexInfoList(p1);
	int v5 = Log.i(""RecoverySystemService"", ""apex_info.pb not present in OTA package. Assuming device doesn't support compressedAPEX, continueing without allocating space."");
	int v6 = Slog.e(""RecoverySystemService"", ""Failed to reserve space for compressed apex: "", caughtException);
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public boolean isUpdatableApexSupported(){
	Optional v1 = ApexProperties.updatable();
	Object v2 = v1.orElse(Boolean.FALSE);
	boolean v3 = v2.booleanValue();
	return v3;
}
-----
depth : 2
public Optional updatable(){
	String v1 = SystemProperties.get(""ro.apex.updatable"");
	Boolean v2 = ApexProperties.tryParseBoolean(v1);
	Optional v3 = Optional.ofNullable(v2);
	return v3;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","allocateSpaceForUpdate(Ljava/lang/String;)Z","2","8 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, isUpdatableApexSupported()Z > @8 exception:7,
2 = invokestatic < Application, Landroid/sysprop/ApexProperties, updatable()Ljava/util/Optional; > @0 exception:1,
return 7,
3 = getstatic < Application, Ljava/lang/Boolean, FALSE, <Application,Ljava/lang/Boolean> >,
6 = checkcast <Application,Ljava/lang/Boolean>5 <Application,Ljava/lang/Boolean>,
return 8,
conditional branch(ne, to iindex=-1) 8,5,
14 = invokestatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, getCompressedApexInfoList(Ljava/lang/String;)Landroid/apex/CompressedApexInfoList; > 2 @27 exception:13,
33 = getCaughtException ,
goto (from iindex= 31 to iindex = 5),
return 5,","depth : 0
public boolean allocateSpaceForUpdate(String p1){
	boolean v2 = RecoverySystemService.isUpdatableApexSupported();
	long v3 = Binder.clearCallingIdentity();
	CompressedApexInfoList v4 = RecoverySystemService.getCompressedApexInfoList(p1);
	int v5 = Slog.e(""RecoverySystemService"", ""Failed to reserve space for compressed apex: "", caughtException);
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public boolean isUpdatableApexSupported(){
	Optional v1 = ApexProperties.updatable();
	Object v2 = v1.orElse(Boolean.FALSE);
	boolean v3 = v2.booleanValue();
	return v3;
}
-----
depth : 2
public Optional updatable(){
	String v1 = SystemProperties.get(""ro.apex.updatable"");
	Boolean v2 = ApexProperties.tryParseBoolean(v1);
	Optional v3 = Optional.ofNullable(v2);
	return v3;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z","0","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @11 exception:9,
conditional branch(ne, to iindex=-1) 10,7,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, uncryptPackageFileDelete()Z > 11 @29 exception:12,
14 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
16 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileWriter()Ljava/io/FileWriter; > 14 @34 exception:15,
17 = new <Application,Ljava/lang/StringBuilder>@38,
30 = getCaughtException ,
conditional branch(eq, to iindex=-1) 16,7,
32 = getCaughtException ,
throw 30,
43 = getCaughtException ,
45 = new <Application,Ljava/lang/StringBuilder>@224,
50 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
52 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileName()Ljava/lang/String; > 50 @236 exception:51,
monitorexit 4,
return 7,","depth : 0
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	boolean v3 = this.mInjector.uncryptPackageFileDelete();
	FileWriter v4 = this.mInjector.getUncryptPackageFileWriter();
	StringBuilder v4 = new StringBuilder;
	v4.close();
	[resolveCodeAbst] + 30 = getCaughtException .addSuppressed(caughtException);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""IOException when writing """");
	String v9 = this.mInjector.getUncryptPackageFileName();
	StringBuilder v10 = v6.append(v9);
	StringBuilder v11 = v6.append("""":"");
	String v12 = v6.toString();
	int v13 = Slog.e(""RecoverySystemService"", v12, caughtException);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z","1","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @11 exception:9,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 4,5 @10 exception:6,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
11 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 8,9 @18 exception:10,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 12,13 @26 exception:14,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 27 to iindex = 3),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 10,7,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, uncryptPackageFileDelete()Z > 11 @29 exception:12,
2 = getstatic < Application, Landroid/os/RecoverySystem, UNCRYPT_PACKAGE_FILE, <Application,Ljava/io/File> >,
return 4,
14 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
16 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileWriter()Ljava/io/FileWriter; > 14 @34 exception:15,
2 = new <Application,Ljava/io/FileWriter>@0,
3 = getstatic < Application, Landroid/os/RecoverySystem, UNCRYPT_PACKAGE_FILE, <Application,Ljava/io/File> >,
return 2,
17 = new <Application,Ljava/lang/StringBuilder>@38,
30 = getCaughtException ,
conditional branch(eq, to iindex=-1) 16,7,
32 = getCaughtException ,
throw 30,
43 = getCaughtException ,
45 = new <Application,Ljava/lang/StringBuilder>@224,
50 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
52 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileName()Ljava/lang/String; > 50 @236 exception:51,
2 = getstatic < Application, Landroid/os/RecoverySystem, UNCRYPT_PACKAGE_FILE, <Application,Ljava/io/File> >,
return 4,
monitorexit 4,
return 7,","depth : 0
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	boolean v3 = this.mInjector.uncryptPackageFileDelete();
	FileWriter v4 = this.mInjector.getUncryptPackageFileWriter();
	StringBuilder v4 = new StringBuilder;
	v4.close();
	[resolveCodeAbst] + 30 = getCaughtException .addSuppressed(caughtException);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""IOException when writing """");
	String v9 = this.mInjector.getUncryptPackageFileName();
	StringBuilder v10 = v6.append(v9);
	StringBuilder v11 = v6.append("""":"");
	String v12 = v6.toString();
	int v13 = Slog.e(""RecoverySystemService"", v12, caughtException);
	return 0;
}
-----
depth : 1
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 1
public boolean uncryptPackageFileDelete(){
	boolean v1 = RecoverySystem.UNCRYPT_PACKAGE_FILE.delete();
	return v1;
}
-----
depth : 1
public FileWriter getUncryptPackageFileWriter(){
	FileWriter v0 = new FileWriter(RecoverySystem.UNCRYPT_PACKAGE_FILE);
	return v0;
}
-----
depth : 1
public String getUncryptPackageFileName(){
	String v1 = RecoverySystem.UNCRYPT_PACKAGE_FILE.getName();
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z","1","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @11 exception:9,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 4,5 @10 exception:6,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
11 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 8,9 @18 exception:10,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 12,13 @26 exception:14,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 27 to iindex = 3),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 10,7,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, uncryptPackageFileDelete()Z > 11 @29 exception:12,
2 = getstatic < Application, Landroid/os/RecoverySystem, UNCRYPT_PACKAGE_FILE, <Application,Ljava/io/File> >,
return 4,
14 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
16 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileWriter()Ljava/io/FileWriter; > 14 @34 exception:15,
2 = new <Application,Ljava/io/FileWriter>@0,
3 = getstatic < Application, Landroid/os/RecoverySystem, UNCRYPT_PACKAGE_FILE, <Application,Ljava/io/File> >,
return 2,
17 = new <Application,Ljava/lang/StringBuilder>@38,
30 = getCaughtException ,
conditional branch(eq, to iindex=-1) 16,7,
goto (from iindex= 105 to iindex = 5),
throw 30,
43 = getCaughtException ,
45 = new <Application,Ljava/lang/StringBuilder>@224,
50 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
52 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileName()Ljava/lang/String; > 50 @236 exception:51,
2 = getstatic < Application, Landroid/os/RecoverySystem, UNCRYPT_PACKAGE_FILE, <Application,Ljava/io/File> >,
return 4,
monitorexit 4,
return 7,","depth : 0
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	boolean v3 = this.mInjector.uncryptPackageFileDelete();
	FileWriter v4 = this.mInjector.getUncryptPackageFileWriter();
	StringBuilder v4 = new StringBuilder;
	v4.close();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""IOException when writing """");
	String v8 = this.mInjector.getUncryptPackageFileName();
	StringBuilder v9 = v5.append(v8);
	StringBuilder v10 = v5.append("""":"");
	String v11 = v5.toString();
	int v12 = Slog.e(""RecoverySystemService"", v11, caughtException);
	return 0;
}
-----
depth : 1
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 1
public boolean uncryptPackageFileDelete(){
	boolean v1 = RecoverySystem.UNCRYPT_PACKAGE_FILE.delete();
	return v1;
}
-----
depth : 1
public FileWriter getUncryptPackageFileWriter(){
	FileWriter v0 = new FileWriter(RecoverySystem.UNCRYPT_PACKAGE_FILE);
	return v0;
}
-----
depth : 1
public String getUncryptPackageFileName(){
	String v1 = RecoverySystem.UNCRYPT_PACKAGE_FILE.getName();
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z","2","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @11 exception:9,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 4,5 @10 exception:6,
return 4,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
11 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 8,9 @18 exception:10,
return 4,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 12,13 @26 exception:14,
return 4,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 27 to iindex = 3),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 10,7,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, uncryptPackageFileDelete()Z > 11 @29 exception:12,
14 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
16 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileWriter()Ljava/io/FileWriter; > 14 @34 exception:15,
17 = new <Application,Ljava/lang/StringBuilder>@38,
30 = getCaughtException ,
conditional branch(eq, to iindex=-1) 16,7,
32 = getCaughtException ,
throw 30,
43 = getCaughtException ,
45 = new <Application,Ljava/lang/StringBuilder>@224,
50 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
52 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileName()Ljava/lang/String; > 50 @236 exception:51,
monitorexit 4,
return 7,","depth : 0
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	boolean v3 = this.mInjector.uncryptPackageFileDelete();
	FileWriter v4 = this.mInjector.getUncryptPackageFileWriter();
	StringBuilder v4 = new StringBuilder;
	v4.close();
	[resolveCodeAbst] + 30 = getCaughtException .addSuppressed(caughtException);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""IOException when writing """");
	String v9 = this.mInjector.getUncryptPackageFileName();
	StringBuilder v10 = v6.append(v9);
	StringBuilder v11 = v6.append("""":"");
	String v12 = v6.toString();
	int v13 = Slog.e(""RecoverySystemService"", v12, caughtException);
	return 0;
}
-----
depth : 1
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z","2","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @11 exception:9,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 4,5 @10 exception:6,
return 4,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
11 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 8,9 @18 exception:10,
return 4,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 12,13 @26 exception:14,
return 4,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 29 to iindex = 2),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 10,7,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, uncryptPackageFileDelete()Z > 11 @29 exception:12,
14 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
16 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileWriter()Ljava/io/FileWriter; > 14 @34 exception:15,
17 = new <Application,Ljava/lang/StringBuilder>@38,
30 = getCaughtException ,
conditional branch(eq, to iindex=-1) 16,7,
32 = getCaughtException ,
throw 30,
43 = getCaughtException ,
45 = new <Application,Ljava/lang/StringBuilder>@224,
50 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
52 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileName()Ljava/lang/String; > 50 @236 exception:51,
monitorexit 4,
return 7,","depth : 0
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	boolean v3 = this.mInjector.uncryptPackageFileDelete();
	FileWriter v4 = this.mInjector.getUncryptPackageFileWriter();
	StringBuilder v4 = new StringBuilder;
	v4.close();
	[resolveCodeAbst] + 30 = getCaughtException .addSuppressed(caughtException);
	StringBuilder v6 = new StringBuilder();
	StringBuilder v8 = v6.append(""IOException when writing """");
	String v9 = this.mInjector.getUncryptPackageFileName();
	StringBuilder v10 = v6.append(v9);
	StringBuilder v11 = v6.append("""":"");
	String v12 = v6.toString();
	int v13 = Slog.e(""RecoverySystemService"", v12, caughtException);
	return 0;
}
-----
depth : 1
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","uncrypt(Ljava/lang/String;Landroid/os/IRecoverySystemProgressListener;)Z","2","10 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @11 exception:9,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 4,5 @10 exception:6,
return 4,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
11 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 8,9 @18 exception:10,
return 4,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesGet(Ljava/lang/String;)Ljava/lang/String; > 12,13 @26 exception:14,
return 4,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 27 to iindex = 3),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 10,7,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
13 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, uncryptPackageFileDelete()Z > 11 @29 exception:12,
14 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
16 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileWriter()Ljava/io/FileWriter; > 14 @34 exception:15,
17 = new <Application,Ljava/lang/StringBuilder>@38,
30 = getCaughtException ,
conditional branch(eq, to iindex=-1) 16,7,
goto (from iindex= 105 to iindex = 5),
throw 30,
43 = getCaughtException ,
45 = new <Application,Ljava/lang/StringBuilder>@224,
50 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
52 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUncryptPackageFileName()Ljava/lang/String; > 50 @236 exception:51,
monitorexit 4,
return 7,","depth : 0
public boolean uncrypt(String p1, IRecoverySystemProgressListener p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	boolean v3 = this.mInjector.uncryptPackageFileDelete();
	FileWriter v4 = this.mInjector.getUncryptPackageFileWriter();
	StringBuilder v4 = new StringBuilder;
	v4.close();
	StringBuilder v5 = new StringBuilder();
	StringBuilder v7 = v5.append(""IOException when writing """");
	String v8 = this.mInjector.getUncryptPackageFileName();
	StringBuilder v9 = v5.append(v8);
	StringBuilder v10 = v5.append("""":"");
	String v11 = v5.toString();
	int v12 = Slog.e(""RecoverySystemService"", v11, caughtException);
	return 0;
}
-----
depth : 1
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
depth : 2
public String systemPropertiesGet(String p1){
	String v1 = SystemProperties.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","clearLskf(Ljava/lang/String;)Z","0","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
conditional branch(ne, to iindex=-1) 2,4,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnClear(Ljava/lang/String;)I > 1,2 @14 exception:6,
conditional branch(eq, to iindex=-1) 7,4,
conditional branch(eq, to iindex=-1) 7,8,
22 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
24 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 22 @56 exception:23,
conditional branch(ne, to iindex=-1) 24,4,
return 4,","depth : 0
public boolean clearLskf(String p1){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnClear(p1);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = Slog.e(""RecoverySystemService"", ""Failed to get lock settings service, skipping clearRebootEscrow"");
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearLskf(Ljava/lang/String;)Z","1","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
conditional branch(ne, to iindex=-1) 2,4,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnClear(Ljava/lang/String;)I > 1,2 @14 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 5,6,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 9,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
16 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
19 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 21,6,
23 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(eq, to iindex=-1) 25,6,
26 = phi  6,6,22,
conditional branch(eq, to iindex=-1) 26,6,
goto (from iindex= 36 to iindex = 2),
31 = phi  22,30,
monitorexit 1,
return 31,
conditional branch(eq, to iindex=-1) 7,4,
conditional branch(eq, to iindex=-1) 7,8,
22 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
24 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 22 @56 exception:23,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 24,4,
return 4,","depth : 0
public boolean clearLskf(String p1){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnClear(p1);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = Slog.e(""RecoverySystemService"", ""Failed to get lock settings service, skipping clearRebootEscrow"");
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnClear(String p1){
	boolean v1 = this.mCallerPreparedForReboot.contains(p1);
	boolean v2 = this.mCallerPendingRequest.containsKey(p1);
	Object v3 = this.mCallerPendingRequest.remove(p1);
	boolean v4 = this.mCallerPreparedForReboot.remove(p1);
	boolean v5 = this.mCallerPendingRequest.isEmpty();
	boolean v6 = this.mCallerPreparedForReboot.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearLskf(Ljava/lang/String;)Z","1","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
conditional branch(ne, to iindex=-1) 2,4,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnClear(Ljava/lang/String;)I > 1,2 @14 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 5,6,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 9,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
16 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
19 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 21,6,
23 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(eq, to iindex=-1) 25,6,
26 = phi  6,6,22,
conditional branch(eq, to iindex=-1) 26,6,
goto (from iindex= 36 to iindex = 2),
31 = phi  22,30,
monitorexit 1,
return 31,
conditional branch(eq, to iindex=-1) 7,4,
conditional branch(eq, to iindex=-1) 7,8,
22 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
24 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 22 @56 exception:23,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 24,4,
return 26,","depth : 0
public boolean clearLskf(String p1){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnClear(p1);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	boolean v5 = v4.clearRebootEscrow();
	Binder.restoreCallingIdentity(v3);
	return v5;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnClear(String p1){
	boolean v1 = this.mCallerPreparedForReboot.contains(p1);
	boolean v2 = this.mCallerPendingRequest.containsKey(p1);
	Object v3 = this.mCallerPendingRequest.remove(p1);
	boolean v4 = this.mCallerPreparedForReboot.remove(p1);
	boolean v5 = this.mCallerPendingRequest.isEmpty();
	boolean v6 = this.mCallerPreparedForReboot.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearLskf(Ljava/lang/String;)Z","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
conditional branch(ne, to iindex=-1) 2,4,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnClear(Ljava/lang/String;)I > 1,2 @14 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 5,6,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 9,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
16 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
19 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 21,6,
23 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(eq, to iindex=-1) 25,6,
26 = phi  6,6,22,
conditional branch(eq, to iindex=-1) 26,6,
goto (from iindex= 36 to iindex = 2),
31 = phi  22,30,
monitorexit 1,
return 31,
conditional branch(eq, to iindex=-1) 7,4,
conditional branch(eq, to iindex=-1) 7,8,
22 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
24 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 22 @56 exception:23,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 24,4,
return 4,","depth : 0
public boolean clearLskf(String p1){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnClear(p1);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = Slog.e(""RecoverySystemService"", ""Failed to get lock settings service, skipping clearRebootEscrow"");
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnClear(String p1){
	boolean v1 = this.mCallerPreparedForReboot.contains(p1);
	boolean v2 = this.mCallerPendingRequest.containsKey(p1);
	Object v3 = this.mCallerPendingRequest.remove(p1);
	boolean v4 = this.mCallerPreparedForReboot.remove(p1);
	boolean v5 = this.mCallerPendingRequest.isEmpty();
	boolean v6 = this.mCallerPreparedForReboot.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearLskf(Ljava/lang/String;)Z","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
conditional branch(ne, to iindex=-1) 2,4,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnClear(Ljava/lang/String;)I > 1,2 @14 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 5,6,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 9,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
16 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
19 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 21,6,
23 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(eq, to iindex=-1) 25,6,
26 = phi  6,6,22,
conditional branch(eq, to iindex=-1) 26,6,
goto (from iindex= 36 to iindex = 2),
31 = phi  22,30,
monitorexit 1,
return 31,
conditional branch(eq, to iindex=-1) 7,4,
conditional branch(eq, to iindex=-1) 7,8,
22 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
24 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 22 @56 exception:23,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 24,4,
return 26,","depth : 0
public boolean clearLskf(String p1){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnClear(p1);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	boolean v5 = v4.clearRebootEscrow();
	Binder.restoreCallingIdentity(v3);
	return v5;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnClear(String p1){
	boolean v1 = this.mCallerPreparedForReboot.contains(p1);
	boolean v2 = this.mCallerPendingRequest.containsKey(p1);
	Object v3 = this.mCallerPendingRequest.remove(p1);
	boolean v4 = this.mCallerPreparedForReboot.remove(p1);
	boolean v5 = this.mCallerPendingRequest.isEmpty();
	boolean v6 = this.mCallerPreparedForReboot.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","clearLskf(Ljava/lang/String;)Z","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
conditional branch(eq, to iindex=-1) 5,6,
return,
conditional branch(ne, to iindex=-1) 2,4,
7 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnClear(Ljava/lang/String;)I > 1,2 @14 exception:6,
monitorenter 1,
3 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 5,6,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(ne, to iindex=-1) 9,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
16 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
19 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 21,6,
23 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(eq, to iindex=-1) 25,6,
26 = phi  6,6,22,
conditional branch(eq, to iindex=-1) 26,6,
goto (from iindex= 36 to iindex = 2),
31 = phi  22,30,
monitorexit 1,
return 31,
conditional branch(eq, to iindex=-1) 7,4,
conditional branch(eq, to iindex=-1) 7,8,
22 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
24 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 22 @56 exception:23,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 24,4,
return 4,","depth : 0
public boolean clearLskf(String p1){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnClear(p1);
	long v3 = Binder.clearCallingIdentity();
	LockSettingsInternal v4 = this.mInjector.getLockSettingsService();
	int v5 = Slog.e(""RecoverySystemService"", ""Failed to get lock settings service, skipping clearRebootEscrow"");
	Binder.restoreCallingIdentity(v3);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnClear(String p1){
	boolean v1 = this.mCallerPreparedForReboot.contains(p1);
	boolean v2 = this.mCallerPendingRequest.containsKey(p1);
	Object v3 = this.mCallerPendingRequest.remove(p1);
	boolean v4 = this.mCallerPreparedForReboot.remove(p1);
	boolean v5 = this.mCallerPendingRequest.isEmpty();
	boolean v6 = this.mCallerPreparedForReboot.isEmpty();
	return phiInstruction;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","isLskfCaptured(Ljava/lang/String;)Z","0","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
monitorenter 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
conditional branch(ne, to iindex=-1) 6,11,
14 = new <Application,Ljava/lang/StringBuilder>@15,
return 11,","depth : 0
public boolean isLskfCaptured(String p1){
	p0.enforcePermissionForResumeOnReboot();
	boolean v2 = this.mCallerPreparedForReboot.contains(p1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Reboot requested before prepare completed for caller "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Slog.i(""RecoverySystemService"", v6);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","isLskfCaptured(Ljava/lang/String;)Z","1","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
monitorenter 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
conditional branch(ne, to iindex=-1) 6,11,
14 = new <Application,Ljava/lang/StringBuilder>@15,
return 11,","depth : 0
public boolean isLskfCaptured(String p1){
	p0.enforcePermissionForResumeOnReboot();
	boolean v2 = this.mCallerPreparedForReboot.contains(p1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Reboot requested before prepare completed for caller "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Slog.i(""RecoverySystemService"", v6);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","isLskfCaptured(Ljava/lang/String;)Z","1","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:3,
conditional branch(eq, to iindex=-1) 5,6,
return,
monitorenter 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
conditional branch(ne, to iindex=-1) 6,11,
14 = new <Application,Ljava/lang/StringBuilder>@15,
return 11,","depth : 0
public boolean isLskfCaptured(String p1){
	p0.enforcePermissionForResumeOnReboot();
	boolean v2 = this.mCallerPreparedForReboot.contains(p1);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Reboot requested before prepare completed for caller "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Slog.i(""RecoverySystemService"", v6);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z","0","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:4,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnNewRequest(Ljava/lang/String;Landroid/content/IntentSender;)I > 1,2,3 @14 exception:7,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRequestLskf(Ljava/lang/String;I)V > 1,2,8 @18 exception:9,
conditional branch(eq, to iindex=-1) 8,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 13 @63 exception:14,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 17,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationState()V > 1 @84 exception:19,
return 6,","depth : 0
public boolean requestLskf(String p1, IntentSender p2){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
	p0.reportMetricsOnRequestLskf(p1, v2);
	long v4 = Binder.clearCallingIdentity();
	LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
	boolean v6 = v5.prepareRebootEscrow();
	p0.clearRoRPreparationState();
	Binder.restoreCallingIdentity(v4);
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z","1","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:4,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnNewRequest(Ljava/lang/String;Landroid/content/IntentSender;)I > 1,2,3 @14 exception:7,
monitorenter 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 13,7,
15 = new <Application,Ljava/lang/StringBuilder>@63,
29 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 43 to iindex = 2),
33 = phi  7,32,
monitorexit 1,
return 33,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRequestLskf(Ljava/lang/String;I)V > 1,2,8 @18 exception:9,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUidFromPackageName(Ljava/lang/String;)I > 4,2 @2 exception:5,
monitorenter 1,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
monitorexit 1,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 15 @16 exception:16,
18 = new <Application,Ljava/lang/StringBuilder>@20,
27 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
29 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getCurrentTimeMillis()J > 27 @39 exception:28,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, putLong(Ljava/lang/String;J)V > 17,26,29 @43 exception:30,
31 = new <Application,Ljava/lang/StringBuilder>@46,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, incrementIntKey(Ljava/lang/String;I)V > 17,39,40 @64 exception:41,
42 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, reportRebootEscrowPreparationMetrics(III)V > 42,6,3,9 @69 exception:43,
return,
conditional branch(eq, to iindex=-1) 8,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 13 @63 exception:14,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 17,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationState()V > 1 @84 exception:19,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
return,
return 6,","depth : 0
public boolean requestLskf(String p1, IntentSender p2){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
	p0.reportMetricsOnRequestLskf(p1, v2);
	long v4 = Binder.clearCallingIdentity();
	LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
	boolean v6 = v5.prepareRebootEscrow();
	p0.clearRoRPreparationState();
	Binder.restoreCallingIdentity(v4);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnNewRequest(String p1, IntentSender p2){
	boolean v1 = this.mCallerPreparedForReboot.isEmpty();
	boolean v2 = this.mCallerPendingRequest.isEmpty();
	boolean v3 = this.mCallerPendingRequest.containsKey(p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Duplicate RoR preparation request for "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.i(""RecoverySystemService"", v7);
	Object v9 = this.mCallerPendingRequest.put(p1, p2);
	return phiInstruction;
}
-----
depth : 1
public void reportMetricsOnRequestLskf(String p1, int p2){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	int v2 = this.mCallerPendingRequest.size();
	RecoverySystemService$PreferencesManager v3 = this.mInjector.getMetricsPrefs();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(p1);
	StringBuilder v6 = v3.append(""_request_lskf_timestamp"");
	String v7 = v3.toString();
	long v8 = this.mInjector.getCurrentTimeMillis();
	v3.putLong(v7, v8);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(p1);
	StringBuilder v12 = v9.append(""_request_lskf_count"");
	String v13 = v9.toString();
	v3.incrementIntKey(v13, 0);
	this.mInjector.reportRebootEscrowPreparationMetrics(v1, p2, v2);
	return;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
depth : 1
public void clearRoRPreparationState(){
	this.mCallerPendingRequest.clear();
	this.mCallerPreparedForReboot.clear();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z","1","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
return,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnNewRequest(Ljava/lang/String;Landroid/content/IntentSender;)I > 1,2,3 @14 exception:7,
monitorenter 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 13,7,
15 = new <Application,Ljava/lang/StringBuilder>@63,
29 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 43 to iindex = 2),
33 = phi  7,32,
monitorexit 1,
return 33,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRequestLskf(Ljava/lang/String;I)V > 1,2,8 @18 exception:9,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUidFromPackageName(Ljava/lang/String;)I > 4,2 @2 exception:5,
monitorenter 1,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
monitorexit 1,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 15 @16 exception:16,
18 = new <Application,Ljava/lang/StringBuilder>@20,
27 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
29 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getCurrentTimeMillis()J > 27 @39 exception:28,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, putLong(Ljava/lang/String;J)V > 17,26,29 @43 exception:30,
31 = new <Application,Ljava/lang/StringBuilder>@46,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, incrementIntKey(Ljava/lang/String;I)V > 17,39,40 @64 exception:41,
42 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, reportRebootEscrowPreparationMetrics(III)V > 42,6,3,9 @69 exception:43,
return,
conditional branch(eq, to iindex=-1) 8,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 13 @63 exception:14,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 17,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationState()V > 1 @84 exception:19,
monitorenter 1,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
monitorexit 1,
return,
return 6,","depth : 0
public boolean requestLskf(String p1, IntentSender p2){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
	p0.reportMetricsOnRequestLskf(p1, v2);
	long v4 = Binder.clearCallingIdentity();
	LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
	boolean v6 = v5.prepareRebootEscrow();
	p0.clearRoRPreparationState();
	Binder.restoreCallingIdentity(v4);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnNewRequest(String p1, IntentSender p2){
	boolean v1 = this.mCallerPreparedForReboot.isEmpty();
	boolean v2 = this.mCallerPendingRequest.isEmpty();
	boolean v3 = this.mCallerPendingRequest.containsKey(p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Duplicate RoR preparation request for "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.i(""RecoverySystemService"", v7);
	Object v9 = this.mCallerPendingRequest.put(p1, p2);
	return phiInstruction;
}
-----
depth : 1
public void reportMetricsOnRequestLskf(String p1, int p2){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	int v2 = this.mCallerPendingRequest.size();
	RecoverySystemService$PreferencesManager v3 = this.mInjector.getMetricsPrefs();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(p1);
	StringBuilder v6 = v3.append(""_request_lskf_timestamp"");
	String v7 = v3.toString();
	long v8 = this.mInjector.getCurrentTimeMillis();
	v3.putLong(v7, v8);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(p1);
	StringBuilder v12 = v9.append(""_request_lskf_count"");
	String v13 = v9.toString();
	v3.incrementIntKey(v13, 0);
	this.mInjector.reportRebootEscrowPreparationMetrics(v1, p2, v2);
	return;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
depth : 1
public void clearRoRPreparationState(){
	this.mCallerPendingRequest.clear();
	this.mCallerPreparedForReboot.clear();
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:4,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnNewRequest(Ljava/lang/String;Landroid/content/IntentSender;)I > 1,2,3 @14 exception:7,
monitorenter 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 13,7,
15 = new <Application,Ljava/lang/StringBuilder>@63,
29 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 43 to iindex = 2),
33 = phi  7,32,
monitorexit 1,
return 33,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRequestLskf(Ljava/lang/String;I)V > 1,2,8 @18 exception:9,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUidFromPackageName(Ljava/lang/String;)I > 4,2 @2 exception:5,
3 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
9 = new <Application,Ljava/lang/StringBuilder>@12,
return 21,
monitorenter 1,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
monitorexit 1,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 15 @16 exception:16,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mPrefs, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager> > 1,
return 2,
18 = new <Application,Ljava/lang/StringBuilder>@20,
27 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
29 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getCurrentTimeMillis()J > 27 @39 exception:28,
return 3,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, putLong(Ljava/lang/String;J)V > 17,26,29 @43 exception:30,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, mSharedPreferences, <Application,Landroid/content/SharedPreferences> > 1,
return,
31 = new <Application,Ljava/lang/StringBuilder>@46,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, incrementIntKey(Ljava/lang/String;I)V > 17,39,40 @64 exception:41,
monitorenter 1,
7 = binaryop(add) 5 , 6,
monitorexit 1,
return,
42 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, reportRebootEscrowPreparationMetrics(III)V > 42,6,3,9 @69 exception:43,
return,
return,
conditional branch(eq, to iindex=-1) 8,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 13 @63 exception:14,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 17,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationState()V > 1 @84 exception:19,
return 6,","depth : 0
public boolean requestLskf(String p1, IntentSender p2){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
	p0.reportMetricsOnRequestLskf(p1, v2);
	long v4 = Binder.clearCallingIdentity();
	LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
	boolean v6 = v5.prepareRebootEscrow();
	p0.clearRoRPreparationState();
	Binder.restoreCallingIdentity(v4);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnNewRequest(String p1, IntentSender p2){
	boolean v1 = this.mCallerPreparedForReboot.isEmpty();
	boolean v2 = this.mCallerPendingRequest.isEmpty();
	boolean v3 = this.mCallerPendingRequest.containsKey(p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Duplicate RoR preparation request for "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.i(""RecoverySystemService"", v7);
	Object v9 = this.mCallerPendingRequest.put(p1, p2);
	return phiInstruction;
}
-----
depth : 1
public void reportMetricsOnRequestLskf(String p1, int p2){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	int v2 = this.mCallerPendingRequest.size();
	RecoverySystemService$PreferencesManager v3 = this.mInjector.getMetricsPrefs();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(p1);
	StringBuilder v6 = v3.append(""_request_lskf_timestamp"");
	String v7 = v3.toString();
	long v8 = this.mInjector.getCurrentTimeMillis();
	v3.putLong(v7, v8);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(p1);
	StringBuilder v12 = v9.append(""_request_lskf_count"");
	String v13 = v9.toString();
	v3.incrementIntKey(v13, 0);
	this.mInjector.reportRebootEscrowPreparationMetrics(v1, p2, v2);
	return;
}
-----
depth : 2
public int getUidFromPackageName(String p1){
	PackageManager v1 = this.mContext.getPackageManager();
	int v2 = v1.getPackageUidAsUser(p1, 0);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Failed to find uid for "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Slog.w(""RecoverySystemService"", v6);
	return -1;
}
-----
depth : 2
public RecoverySystemService$PreferencesManager getMetricsPrefs(){
	return this.mPrefs;
}
-----
depth : 2
public long getCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public void putLong(String p1, long p2){
	SharedPreferences$Editor v1 = this.mSharedPreferences.edit();
	SharedPreferences$Editor v2 = v1.putLong(p1, p2);
	boolean v3 = v2.commit();
	return;
}
-----
depth : 2
public void incrementIntKey(String p1, int p2){
	int v1 = p0.getInt(p1, p2);
	p0.putInt(p1, (v1 + 1));
	return;
}
-----
depth : 2
public void reportRebootEscrowPreparationMetrics(int p1, int p2, int p3){
	FrameworkStatsLog.write(339, p1, p2, p3);
	return;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:4,
conditional branch(eq, to iindex=-1) 5,6,
return,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnNewRequest(Ljava/lang/String;Landroid/content/IntentSender;)I > 1,2,3 @14 exception:7,
monitorenter 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 13,7,
15 = new <Application,Ljava/lang/StringBuilder>@63,
29 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 43 to iindex = 2),
33 = phi  7,32,
monitorexit 1,
return 33,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRequestLskf(Ljava/lang/String;I)V > 1,2,8 @18 exception:9,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUidFromPackageName(Ljava/lang/String;)I > 4,2 @2 exception:5,
3 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
9 = new <Application,Ljava/lang/StringBuilder>@12,
return 21,
monitorenter 1,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
monitorexit 1,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 15 @16 exception:16,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mPrefs, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager> > 1,
return 2,
18 = new <Application,Ljava/lang/StringBuilder>@20,
27 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
29 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getCurrentTimeMillis()J > 27 @39 exception:28,
return 3,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, putLong(Ljava/lang/String;J)V > 17,26,29 @43 exception:30,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, mSharedPreferences, <Application,Landroid/content/SharedPreferences> > 1,
return,
31 = new <Application,Ljava/lang/StringBuilder>@46,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, incrementIntKey(Ljava/lang/String;I)V > 17,39,40 @64 exception:41,
monitorenter 1,
7 = binaryop(add) 5 , 6,
monitorexit 1,
return,
42 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, reportRebootEscrowPreparationMetrics(III)V > 42,6,3,9 @69 exception:43,
return,
return,
conditional branch(eq, to iindex=-1) 8,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 13 @63 exception:14,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 17,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationState()V > 1 @84 exception:19,
return 6,","depth : 0
public boolean requestLskf(String p1, IntentSender p2){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
	p0.reportMetricsOnRequestLskf(p1, v2);
	long v4 = Binder.clearCallingIdentity();
	LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
	boolean v6 = v5.prepareRebootEscrow();
	p0.clearRoRPreparationState();
	Binder.restoreCallingIdentity(v4);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnNewRequest(String p1, IntentSender p2){
	boolean v1 = this.mCallerPreparedForReboot.isEmpty();
	boolean v2 = this.mCallerPendingRequest.isEmpty();
	boolean v3 = this.mCallerPendingRequest.containsKey(p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Duplicate RoR preparation request for "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.i(""RecoverySystemService"", v7);
	Object v9 = this.mCallerPendingRequest.put(p1, p2);
	return phiInstruction;
}
-----
depth : 1
public void reportMetricsOnRequestLskf(String p1, int p2){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	int v2 = this.mCallerPendingRequest.size();
	RecoverySystemService$PreferencesManager v3 = this.mInjector.getMetricsPrefs();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(p1);
	StringBuilder v6 = v3.append(""_request_lskf_timestamp"");
	String v7 = v3.toString();
	long v8 = this.mInjector.getCurrentTimeMillis();
	v3.putLong(v7, v8);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(p1);
	StringBuilder v12 = v9.append(""_request_lskf_count"");
	String v13 = v9.toString();
	v3.incrementIntKey(v13, 0);
	this.mInjector.reportRebootEscrowPreparationMetrics(v1, p2, v2);
	return;
}
-----
depth : 2
public int getUidFromPackageName(String p1){
	PackageManager v1 = this.mContext.getPackageManager();
	int v2 = v1.getPackageUidAsUser(p1, 0);
	StringBuilder v2 = new StringBuilder();
	StringBuilder v4 = v2.append(""Failed to find uid for "");
	StringBuilder v5 = v2.append(p1);
	String v6 = v2.toString();
	int v7 = Slog.w(""RecoverySystemService"", v6);
	return -1;
}
-----
depth : 2
public RecoverySystemService$PreferencesManager getMetricsPrefs(){
	return this.mPrefs;
}
-----
depth : 2
public long getCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public void putLong(String p1, long p2){
	SharedPreferences$Editor v1 = this.mSharedPreferences.edit();
	SharedPreferences$Editor v2 = v1.putLong(p1, p2);
	boolean v3 = v2.commit();
	return;
}
-----
depth : 2
public void incrementIntKey(String p1, int p2){
	int v1 = p0.getInt(p1, p2);
	p0.putInt(p1, (v1 + 1));
	return;
}
-----
depth : 2
public void reportRebootEscrowPreparationMetrics(int p1, int p2, int p3){
	FrameworkStatsLog.write(339, p1, p2, p3);
	return;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","requestLskf(Ljava/lang/String;Landroid/content/IntentSender;)Z","2","invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, enforcePermissionForResumeOnReboot()V > 1 @0 exception:4,
conditional branch(ne, to iindex=-1) 10,6,
goto (from iindex= 10 to iindex = 9),
return,
conditional branch(ne, to iindex=-1) 2,6,
8 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, updateRoRPreparationStateOnNewRequest(Ljava/lang/String;Landroid/content/IntentSender;)I > 1,2,3 @14 exception:7,
monitorenter 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPreparedForReboot, <Application,Landroid/util/ArraySet> > 1,
conditional branch(ne, to iindex=-1) 6,7,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
11 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 13,7,
15 = new <Application,Ljava/lang/StringBuilder>@63,
29 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
conditional branch(eq, to iindex=-1) 10,7,
goto (from iindex= 43 to iindex = 2),
33 = phi  7,32,
monitorexit 1,
return 33,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, reportMetricsOnRequestLskf(Ljava/lang/String;I)V > 1,2,8 @18 exception:9,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getUidFromPackageName(Ljava/lang/String;)I > 4,2 @2 exception:5,
3 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mContext, <Application,Landroid/content/Context> > 1,
return 8,
monitorenter 1,
7 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mCallerPendingRequest, <Application,Landroid/util/ArrayMap> > 1,
monitorexit 1,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
17 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getMetricsPrefs()Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager; > 15 @16 exception:16,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, mPrefs, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager> > 1,
return 2,
18 = new <Application,Ljava/lang/StringBuilder>@20,
27 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
29 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getCurrentTimeMillis()J > 27 @39 exception:28,
return 3,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, putLong(Ljava/lang/String;J)V > 17,26,29 @43 exception:30,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, mSharedPreferences, <Application,Landroid/content/SharedPreferences> > 1,
return,
31 = new <Application,Ljava/lang/StringBuilder>@46,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$PreferencesManager, incrementIntKey(Ljava/lang/String;I)V > 17,39,40 @64 exception:41,
monitorenter 1,
7 = binaryop(add) 5 , 6,
monitorexit 1,
return,
42 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, reportRebootEscrowPreparationMetrics(III)V > 42,6,3,9 @69 exception:43,
return,
return,
conditional branch(eq, to iindex=-1) 8,6,
13 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
15 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, getLockSettingsService()Lcom/android/internal/widget/LockSettingsInternal; > 13 @63 exception:14,
2 = load_metadata: <Application,Lcom/android/internal/widget/LockSettingsInternal>, <Primordial,Ljava/lang/Class>,
4 = invokestatic < Application, Lcom/android/server/LocalServices, getService(Ljava/lang/Class;)Ljava/lang/Object; > 2 @2 exception:3,
2 = getstatic < Application, Lcom/android/server/LocalServices, sLocalServiceObjects, <Application,Landroid/util/ArrayMap> >,
monitorenter 2,
monitorexit 2,
return 4,
5 = checkcast <Application,Lcom/android/internal/widget/LockSettingsInternal>4 <Application,Lcom/android/internal/widget/LockSettingsInternal>,
return 5,
conditional branch(ne, to iindex=-1) 15,6,
conditional branch(ne, to iindex=-1) 17,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, clearRoRPreparationState()V > 1 @84 exception:19,
return 6,","depth : 0
public boolean requestLskf(String p1, IntentSender p2){
	p0.enforcePermissionForResumeOnReboot();
	int v2 = p0.updateRoRPreparationStateOnNewRequest(p1, p2);
	p0.reportMetricsOnRequestLskf(p1, v2);
	long v4 = Binder.clearCallingIdentity();
	LockSettingsInternal v5 = this.mInjector.getLockSettingsService();
	boolean v6 = v5.prepareRebootEscrow();
	p0.clearRoRPreparationState();
	Binder.restoreCallingIdentity(v4);
	return 0;
}
-----
depth : 1
public void enforcePermissionForResumeOnReboot(){
	return;
}
-----
depth : 1
public int updateRoRPreparationStateOnNewRequest(String p1, IntentSender p2){
	boolean v1 = this.mCallerPreparedForReboot.isEmpty();
	boolean v2 = this.mCallerPendingRequest.isEmpty();
	boolean v3 = this.mCallerPendingRequest.containsKey(p1);
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(""Duplicate RoR preparation request for "");
	StringBuilder v6 = v3.append(p1);
	String v7 = v3.toString();
	int v8 = Slog.i(""RecoverySystemService"", v7);
	Object v9 = this.mCallerPendingRequest.put(p1, p2);
	return phiInstruction;
}
-----
depth : 1
public void reportMetricsOnRequestLskf(String p1, int p2){
	int v1 = this.mInjector.getUidFromPackageName(p1);
	int v2 = this.mCallerPendingRequest.size();
	RecoverySystemService$PreferencesManager v3 = this.mInjector.getMetricsPrefs();
	StringBuilder v3 = new StringBuilder();
	StringBuilder v5 = v3.append(p1);
	StringBuilder v6 = v3.append(""_request_lskf_timestamp"");
	String v7 = v3.toString();
	long v8 = this.mInjector.getCurrentTimeMillis();
	v3.putLong(v7, v8);
	StringBuilder v9 = new StringBuilder();
	StringBuilder v11 = v9.append(p1);
	StringBuilder v12 = v9.append(""_request_lskf_count"");
	String v13 = v9.toString();
	v3.incrementIntKey(v13, 0);
	this.mInjector.reportRebootEscrowPreparationMetrics(v1, p2, v2);
	return;
}
-----
depth : 2
public int getUidFromPackageName(String p1){
	PackageManager v1 = this.mContext.getPackageManager();
	int v2 = v1.getPackageUidAsUser(p1, 0);
	return v2;
}
-----
depth : 2
public RecoverySystemService$PreferencesManager getMetricsPrefs(){
	return this.mPrefs;
}
-----
depth : 2
public long getCurrentTimeMillis(){
	long v1 = System.currentTimeMillis();
	return v1;
}
-----
depth : 2
public void putLong(String p1, long p2){
	SharedPreferences$Editor v1 = this.mSharedPreferences.edit();
	SharedPreferences$Editor v2 = v1.putLong(p1, p2);
	boolean v3 = v2.commit();
	return;
}
-----
depth : 2
public void incrementIntKey(String p1, int p2){
	int v1 = p0.getInt(p1, p2);
	p0.putInt(p1, (v1 + 1));
	return;
}
-----
depth : 2
public void reportRebootEscrowPreparationMetrics(int p1, int p2, int p3){
	FrameworkStatsLog.write(339, p1, p2, p3);
	return;
}
-----
depth : 1
public LockSettingsInternal getLockSettingsService(){
	Object v1 = LocalServices.getService(LockSettingsInterna.class);
	return v1;
}
-----
depth : 2
public Object getService(Class p1){
	Object v1 = this.sLocalServiceObjects.get(p1);
	return v1;
}
-----
","SYS_OR_SIG"

"Lcom/android/server/recoverysystem/RecoverySystemService","setupBcb(Ljava/lang/String;)Z","0","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
monitorexit 3,
return 6,","depth : 0
public boolean setupBcb(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	return v1;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","setupBcb(Ljava/lang/String;)Z","1","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
return 6,
monitorexit 3,
return 6,","depth : 0
public boolean setupBcb(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	return v1;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","setupBcb(Ljava/lang/String;)Z","2","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 27 to iindex = 3),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
return,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
2 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket>@0,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  2,6,
return 8,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
3 = getstatic < Application, Ljava/nio/charset/StandardCharsets, UTF_8, <Application,Ljava/nio/charset/Charset> >,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
7 = arraylength 5,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
10 = arraylength 5,
return,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
return 4,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
return,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mLocalSocket, <Application,Landroid/net/LocalSocket> > 1,
return,
return 6,
monitorexit 3,
return 6,","depth : 0
public boolean setupBcb(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	return v1;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
depth : 2
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public void systemPropertiesSet(String p1, String p2){
	SystemProperties.set(p1, p2);
	return;
}
-----
depth : 2
public RecoverySystemService$UncryptSocket connectService(){
	RecoverySystemService$UncryptSocket v0 = new RecoverySystemService$UncryptSocket();
	boolean v2 = v0.connectService();
	v0.close();
	return phiInstruction;
}
-----
depth : 2
public void sendCommand(String p1){
	byte[] v1 = p1.getBytes(StandardCharsets.UTF_8);
	this.mOutputStream.writeInt(v1.length);
	this.mOutputStream.write(v1, 0, v1.length);
	return;
}
-----
depth : 2
public int getPercentageUncrypted(){
	int v1 = this.mInputStream.readInt();
	return v1;
}
-----
depth : 2
public void sendAck(){
	this.mOutputStream.writeInt(0);
	return;
}
-----
depth : 2
public void close(){
	IoUtils.closeQuietly(this.mInputStream);
	IoUtils.closeQuietly(this.mOutputStream);
	IoUtils.closeQuietly(this.mLocalSocket);
	return;
}
-----
","SYS_OR_SIG"
"Lcom/android/server/recoverysystem/RecoverySystemService","setupBcb(Ljava/lang/String;)Z","2","3 = getstatic < Application, Lcom/android/server/recoverysystem/RecoverySystemService, sRequestLock, <Application,Ljava/lang/Object> >,
monitorenter 3,
6 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, setupOrClearBcb(ZLjava/lang/String;)Z > 1,4,2 @4 exception:5,
9 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService, checkAndWaitForUncryptService()Z > 1 @8 exception:8,
45 = phi  44,2,
conditional branch(ge, to iindex=-1) 45,3,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
8 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
12 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
conditional branch(ne, to iindex=-1) 18,2,
conditional branch(ne, to iindex=-1) 21,2,
conditional branch(eq, to iindex=-1) 23,2,
goto (from iindex= 29 to iindex = 2),
27 = phi  2,19,
conditional branch(ne, to iindex=-1) 27,2,
return 19,
conditional branch(ne, to iindex=-1) 9,6,
conditional branch(eq, to iindex=-1) 2,6,
15 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, systemPropertiesSet(Ljava/lang/String;Ljava/lang/String;)V > 15,11,16 @31 exception:17,
return,
goto (from iindex= 17 to iindex = 8),
21 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService, mInjector, <Application,Lcom/android/server/recoverysystem/RecoverySystemService$Injector> > 1,
23 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$Injector, connectService()Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket; > 21 @44 exception:22,
2 = new <Application,Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket>@0,
conditional branch(ne, to iindex=-1) 5,6,
8 = phi  2,6,
return 8,
conditional branch(ne, to iindex=-1) 23,6,
conditional branch(eq, to iindex=-1) 2,6,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendCommand(Ljava/lang/String;)V > 23,3 @58 exception:24,
3 = getstatic < Application, Ljava/nio/charset/StandardCharsets, UTF_8, <Application,Ljava/nio/charset/Charset> >,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
7 = arraylength 5,
9 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
10 = arraylength 5,
return,
27 = invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, getPercentageUncrypted()I > 23 @61 exception:26,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
return 4,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, sendAck()V > 23 @65 exception:28,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
return,
conditional branch(ne, to iindex=-1) 27,29,
42 = new <Application,Ljava/lang/StringBuilder>@72,
64 = getCaughtException ,
invokevirtual < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, close()V > 23 @141 exception:68,
2 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mInputStream, <Application,Ljava/io/DataInputStream> > 1,
4 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mOutputStream, <Application,Ljava/io/DataOutputStream> > 1,
6 = getfield < Application, Lcom/android/server/recoverysystem/RecoverySystemService$UncryptSocket, mLocalSocket, <Application,Landroid/net/LocalSocket> > 1,
return,
return 6,
monitorexit 3,
return 6,","depth : 0
public boolean setupBcb(String p1){
	boolean v1 = p0.setupOrClearBcb(1, p1);
	return v1;
}
-----
depth : 1
public boolean setupOrClearBcb(boolean p1, String p2){
	boolean v2 = p0.checkAndWaitForUncryptService();
	this.mInjector.systemPropertiesSet(""ctl.start"", ""setup-bcb"");
	RecoverySystemService$UncryptSocket v4 = this.mInjector.connectService();
	v4.sendCommand(p2);
	int v6 = v4.getPercentageUncrypted();
	v4.sendAck();
	StringBuilder v7 = new StringBuilder;
	int v8 = Slog.e(""RecoverySystemService"", ""IOException when communicating with uncrypt:"", caughtException);
	v4.close();
	return 0;
}
-----
depth : 2
public boolean checkAndWaitForUncryptService(){
	String v1 = this.mInjector.systemPropertiesGet(""init.svc.uncrypt"");
	String v2 = this.mInjector.systemPropertiesGet(""init.svc.setup-bcb"");
	String v3 = this.mInjector.systemPropertiesGet(""init.svc.clear-bcb"");
	boolean v4 = running.equals(v1);
	boolean v5 = running.equals(v2);
	boolean v6 = running.equals(v3);
	return 1;
}
-----
depth : 2
public void systemPropertiesSet(String p1, String p2){
	SystemProperties.set(p1, p2);
	return;
}
-----
depth : 2
public RecoverySystemService$UncryptSocket connectService(){
	RecoverySystemService$UncryptSocket v0 = new RecoverySystemService$UncryptSocket();
	boolean v2 = v0.connectService();
	v0.close();
	return phiInstruction;
}
-----
depth : 2
public void sendCommand(String p1){
	byte[] v1 = p1.getBytes(StandardCharsets.UTF_8);
	this.mOutputStream.writeInt(v1.length);
	this.mOutputStream.write(v1, 0, v1.length);
	return;
}
-----
depth : 2
public int getPercentageUncrypted(){
	int v1 = this.mInputStream.readInt();
	return v1;
}
-----
depth : 2
public void sendAck(){
	this.mOutputStream.writeInt(0);
	return;
}
-----
depth : 2
public void close(){
	IoUtils.closeQuietly(this.mInputStream);
	IoUtils.closeQuietly(this.mOutputStream);
	IoUtils.closeQuietly(this.mLocalSocket);
	return;
}
-----
","SYS_OR_SIG"

